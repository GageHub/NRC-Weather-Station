
Weather-Station_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d14c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000087c  0800d290  0800d290  0001d290  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db0c  0800db0c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800db0c  0800db0c  0001db0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db14  0800db14  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db14  0800db14  0001db14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800db18  0800db18  0001db18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800db1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000410  200001e4  0800dd00  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005f4  0800dd00  000205f4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f943  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000387e  00000000  00000000  0003fb51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f10  00000000  00000000  000433d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001db8  00000000  00000000  000452e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fd4d  00000000  00000000  00047098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e8bf  00000000  00000000  00066de5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d12e5  00000000  00000000  000856a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00156989  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009d80  00000000  00000000  001569dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e4 	.word	0x200001e4
 800015c:	00000000 	.word	0x00000000
 8000160:	0800d274 	.word	0x0800d274

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e8 	.word	0x200001e8
 800017c:	0800d274 	.word	0x0800d274

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_frsub>:
 8000c38:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c3c:	e002      	b.n	8000c44 <__addsf3>
 8000c3e:	bf00      	nop

08000c40 <__aeabi_fsub>:
 8000c40:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c44 <__addsf3>:
 8000c44:	0042      	lsls	r2, r0, #1
 8000c46:	bf1f      	itttt	ne
 8000c48:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c4c:	ea92 0f03 	teqne	r2, r3
 8000c50:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c54:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c58:	d06a      	beq.n	8000d30 <__addsf3+0xec>
 8000c5a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c5e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c62:	bfc1      	itttt	gt
 8000c64:	18d2      	addgt	r2, r2, r3
 8000c66:	4041      	eorgt	r1, r0
 8000c68:	4048      	eorgt	r0, r1
 8000c6a:	4041      	eorgt	r1, r0
 8000c6c:	bfb8      	it	lt
 8000c6e:	425b      	neglt	r3, r3
 8000c70:	2b19      	cmp	r3, #25
 8000c72:	bf88      	it	hi
 8000c74:	4770      	bxhi	lr
 8000c76:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c7a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c7e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c82:	bf18      	it	ne
 8000c84:	4240      	negne	r0, r0
 8000c86:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c8a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c8e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c92:	bf18      	it	ne
 8000c94:	4249      	negne	r1, r1
 8000c96:	ea92 0f03 	teq	r2, r3
 8000c9a:	d03f      	beq.n	8000d1c <__addsf3+0xd8>
 8000c9c:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca0:	fa41 fc03 	asr.w	ip, r1, r3
 8000ca4:	eb10 000c 	adds.w	r0, r0, ip
 8000ca8:	f1c3 0320 	rsb	r3, r3, #32
 8000cac:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cb4:	d502      	bpl.n	8000cbc <__addsf3+0x78>
 8000cb6:	4249      	negs	r1, r1
 8000cb8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cbc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc0:	d313      	bcc.n	8000cea <__addsf3+0xa6>
 8000cc2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cc6:	d306      	bcc.n	8000cd6 <__addsf3+0x92>
 8000cc8:	0840      	lsrs	r0, r0, #1
 8000cca:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cce:	f102 0201 	add.w	r2, r2, #1
 8000cd2:	2afe      	cmp	r2, #254	; 0xfe
 8000cd4:	d251      	bcs.n	8000d7a <__addsf3+0x136>
 8000cd6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cda:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cde:	bf08      	it	eq
 8000ce0:	f020 0001 	biceq.w	r0, r0, #1
 8000ce4:	ea40 0003 	orr.w	r0, r0, r3
 8000ce8:	4770      	bx	lr
 8000cea:	0049      	lsls	r1, r1, #1
 8000cec:	eb40 0000 	adc.w	r0, r0, r0
 8000cf0:	3a01      	subs	r2, #1
 8000cf2:	bf28      	it	cs
 8000cf4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cf8:	d2ed      	bcs.n	8000cd6 <__addsf3+0x92>
 8000cfa:	fab0 fc80 	clz	ip, r0
 8000cfe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d02:	ebb2 020c 	subs.w	r2, r2, ip
 8000d06:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d0a:	bfaa      	itet	ge
 8000d0c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d10:	4252      	neglt	r2, r2
 8000d12:	4318      	orrge	r0, r3
 8000d14:	bfbc      	itt	lt
 8000d16:	40d0      	lsrlt	r0, r2
 8000d18:	4318      	orrlt	r0, r3
 8000d1a:	4770      	bx	lr
 8000d1c:	f092 0f00 	teq	r2, #0
 8000d20:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d24:	bf06      	itte	eq
 8000d26:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d2a:	3201      	addeq	r2, #1
 8000d2c:	3b01      	subne	r3, #1
 8000d2e:	e7b5      	b.n	8000c9c <__addsf3+0x58>
 8000d30:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d34:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d38:	bf18      	it	ne
 8000d3a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d3e:	d021      	beq.n	8000d84 <__addsf3+0x140>
 8000d40:	ea92 0f03 	teq	r2, r3
 8000d44:	d004      	beq.n	8000d50 <__addsf3+0x10c>
 8000d46:	f092 0f00 	teq	r2, #0
 8000d4a:	bf08      	it	eq
 8000d4c:	4608      	moveq	r0, r1
 8000d4e:	4770      	bx	lr
 8000d50:	ea90 0f01 	teq	r0, r1
 8000d54:	bf1c      	itt	ne
 8000d56:	2000      	movne	r0, #0
 8000d58:	4770      	bxne	lr
 8000d5a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d5e:	d104      	bne.n	8000d6a <__addsf3+0x126>
 8000d60:	0040      	lsls	r0, r0, #1
 8000d62:	bf28      	it	cs
 8000d64:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d68:	4770      	bx	lr
 8000d6a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d6e:	bf3c      	itt	cc
 8000d70:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d74:	4770      	bxcc	lr
 8000d76:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d7a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d82:	4770      	bx	lr
 8000d84:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d88:	bf16      	itet	ne
 8000d8a:	4608      	movne	r0, r1
 8000d8c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d90:	4601      	movne	r1, r0
 8000d92:	0242      	lsls	r2, r0, #9
 8000d94:	bf06      	itte	eq
 8000d96:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d9a:	ea90 0f01 	teqeq	r0, r1
 8000d9e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000da2:	4770      	bx	lr

08000da4 <__aeabi_ui2f>:
 8000da4:	f04f 0300 	mov.w	r3, #0
 8000da8:	e004      	b.n	8000db4 <__aeabi_i2f+0x8>
 8000daa:	bf00      	nop

08000dac <__aeabi_i2f>:
 8000dac:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db0:	bf48      	it	mi
 8000db2:	4240      	negmi	r0, r0
 8000db4:	ea5f 0c00 	movs.w	ip, r0
 8000db8:	bf08      	it	eq
 8000dba:	4770      	bxeq	lr
 8000dbc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc0:	4601      	mov	r1, r0
 8000dc2:	f04f 0000 	mov.w	r0, #0
 8000dc6:	e01c      	b.n	8000e02 <__aeabi_l2f+0x2a>

08000dc8 <__aeabi_ul2f>:
 8000dc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dcc:	bf08      	it	eq
 8000dce:	4770      	bxeq	lr
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	e00a      	b.n	8000dec <__aeabi_l2f+0x14>
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_l2f>:
 8000dd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ddc:	bf08      	it	eq
 8000dde:	4770      	bxeq	lr
 8000de0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000de4:	d502      	bpl.n	8000dec <__aeabi_l2f+0x14>
 8000de6:	4240      	negs	r0, r0
 8000de8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dec:	ea5f 0c01 	movs.w	ip, r1
 8000df0:	bf02      	ittt	eq
 8000df2:	4684      	moveq	ip, r0
 8000df4:	4601      	moveq	r1, r0
 8000df6:	2000      	moveq	r0, #0
 8000df8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dfc:	bf08      	it	eq
 8000dfe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e02:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e06:	fabc f28c 	clz	r2, ip
 8000e0a:	3a08      	subs	r2, #8
 8000e0c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e10:	db10      	blt.n	8000e34 <__aeabi_l2f+0x5c>
 8000e12:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e16:	4463      	add	r3, ip
 8000e18:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e1c:	f1c2 0220 	rsb	r2, r2, #32
 8000e20:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e24:	fa20 f202 	lsr.w	r2, r0, r2
 8000e28:	eb43 0002 	adc.w	r0, r3, r2
 8000e2c:	bf08      	it	eq
 8000e2e:	f020 0001 	biceq.w	r0, r0, #1
 8000e32:	4770      	bx	lr
 8000e34:	f102 0220 	add.w	r2, r2, #32
 8000e38:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e3c:	f1c2 0220 	rsb	r2, r2, #32
 8000e40:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e44:	fa21 f202 	lsr.w	r2, r1, r2
 8000e48:	eb43 0002 	adc.w	r0, r3, r2
 8000e4c:	bf08      	it	eq
 8000e4e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e52:	4770      	bx	lr

08000e54 <__aeabi_fmul>:
 8000e54:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e58:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e5c:	bf1e      	ittt	ne
 8000e5e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e62:	ea92 0f0c 	teqne	r2, ip
 8000e66:	ea93 0f0c 	teqne	r3, ip
 8000e6a:	d06f      	beq.n	8000f4c <__aeabi_fmul+0xf8>
 8000e6c:	441a      	add	r2, r3
 8000e6e:	ea80 0c01 	eor.w	ip, r0, r1
 8000e72:	0240      	lsls	r0, r0, #9
 8000e74:	bf18      	it	ne
 8000e76:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e7a:	d01e      	beq.n	8000eba <__aeabi_fmul+0x66>
 8000e7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e80:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e84:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e88:	fba0 3101 	umull	r3, r1, r0, r1
 8000e8c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e90:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e94:	bf3e      	ittt	cc
 8000e96:	0049      	lslcc	r1, r1, #1
 8000e98:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e9c:	005b      	lslcc	r3, r3, #1
 8000e9e:	ea40 0001 	orr.w	r0, r0, r1
 8000ea2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000ea6:	2afd      	cmp	r2, #253	; 0xfd
 8000ea8:	d81d      	bhi.n	8000ee6 <__aeabi_fmul+0x92>
 8000eaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000eae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eb2:	bf08      	it	eq
 8000eb4:	f020 0001 	biceq.w	r0, r0, #1
 8000eb8:	4770      	bx	lr
 8000eba:	f090 0f00 	teq	r0, #0
 8000ebe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ec2:	bf08      	it	eq
 8000ec4:	0249      	lsleq	r1, r1, #9
 8000ec6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eca:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ece:	3a7f      	subs	r2, #127	; 0x7f
 8000ed0:	bfc2      	ittt	gt
 8000ed2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ed6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eda:	4770      	bxgt	lr
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	f04f 0300 	mov.w	r3, #0
 8000ee4:	3a01      	subs	r2, #1
 8000ee6:	dc5d      	bgt.n	8000fa4 <__aeabi_fmul+0x150>
 8000ee8:	f112 0f19 	cmn.w	r2, #25
 8000eec:	bfdc      	itt	le
 8000eee:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000ef2:	4770      	bxle	lr
 8000ef4:	f1c2 0200 	rsb	r2, r2, #0
 8000ef8:	0041      	lsls	r1, r0, #1
 8000efa:	fa21 f102 	lsr.w	r1, r1, r2
 8000efe:	f1c2 0220 	rsb	r2, r2, #32
 8000f02:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f06:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f0a:	f140 0000 	adc.w	r0, r0, #0
 8000f0e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f12:	bf08      	it	eq
 8000f14:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f18:	4770      	bx	lr
 8000f1a:	f092 0f00 	teq	r2, #0
 8000f1e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f22:	bf02      	ittt	eq
 8000f24:	0040      	lsleq	r0, r0, #1
 8000f26:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f2a:	3a01      	subeq	r2, #1
 8000f2c:	d0f9      	beq.n	8000f22 <__aeabi_fmul+0xce>
 8000f2e:	ea40 000c 	orr.w	r0, r0, ip
 8000f32:	f093 0f00 	teq	r3, #0
 8000f36:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f3a:	bf02      	ittt	eq
 8000f3c:	0049      	lsleq	r1, r1, #1
 8000f3e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f42:	3b01      	subeq	r3, #1
 8000f44:	d0f9      	beq.n	8000f3a <__aeabi_fmul+0xe6>
 8000f46:	ea41 010c 	orr.w	r1, r1, ip
 8000f4a:	e78f      	b.n	8000e6c <__aeabi_fmul+0x18>
 8000f4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f50:	ea92 0f0c 	teq	r2, ip
 8000f54:	bf18      	it	ne
 8000f56:	ea93 0f0c 	teqne	r3, ip
 8000f5a:	d00a      	beq.n	8000f72 <__aeabi_fmul+0x11e>
 8000f5c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f60:	bf18      	it	ne
 8000f62:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f66:	d1d8      	bne.n	8000f1a <__aeabi_fmul+0xc6>
 8000f68:	ea80 0001 	eor.w	r0, r0, r1
 8000f6c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f70:	4770      	bx	lr
 8000f72:	f090 0f00 	teq	r0, #0
 8000f76:	bf17      	itett	ne
 8000f78:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f7c:	4608      	moveq	r0, r1
 8000f7e:	f091 0f00 	teqne	r1, #0
 8000f82:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f86:	d014      	beq.n	8000fb2 <__aeabi_fmul+0x15e>
 8000f88:	ea92 0f0c 	teq	r2, ip
 8000f8c:	d101      	bne.n	8000f92 <__aeabi_fmul+0x13e>
 8000f8e:	0242      	lsls	r2, r0, #9
 8000f90:	d10f      	bne.n	8000fb2 <__aeabi_fmul+0x15e>
 8000f92:	ea93 0f0c 	teq	r3, ip
 8000f96:	d103      	bne.n	8000fa0 <__aeabi_fmul+0x14c>
 8000f98:	024b      	lsls	r3, r1, #9
 8000f9a:	bf18      	it	ne
 8000f9c:	4608      	movne	r0, r1
 8000f9e:	d108      	bne.n	8000fb2 <__aeabi_fmul+0x15e>
 8000fa0:	ea80 0001 	eor.w	r0, r0, r1
 8000fa4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fa8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb0:	4770      	bx	lr
 8000fb2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fb6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fba:	4770      	bx	lr

08000fbc <__aeabi_fdiv>:
 8000fbc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fc4:	bf1e      	ittt	ne
 8000fc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fca:	ea92 0f0c 	teqne	r2, ip
 8000fce:	ea93 0f0c 	teqne	r3, ip
 8000fd2:	d069      	beq.n	80010a8 <__aeabi_fdiv+0xec>
 8000fd4:	eba2 0203 	sub.w	r2, r2, r3
 8000fd8:	ea80 0c01 	eor.w	ip, r0, r1
 8000fdc:	0249      	lsls	r1, r1, #9
 8000fde:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fe2:	d037      	beq.n	8001054 <__aeabi_fdiv+0x98>
 8000fe4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fe8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fec:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ff4:	428b      	cmp	r3, r1
 8000ff6:	bf38      	it	cc
 8000ff8:	005b      	lslcc	r3, r3, #1
 8000ffa:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ffe:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8001002:	428b      	cmp	r3, r1
 8001004:	bf24      	itt	cs
 8001006:	1a5b      	subcs	r3, r3, r1
 8001008:	ea40 000c 	orrcs.w	r0, r0, ip
 800100c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001010:	bf24      	itt	cs
 8001012:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8001016:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800101a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800101e:	bf24      	itt	cs
 8001020:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001024:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001028:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800102c:	bf24      	itt	cs
 800102e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8001032:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001036:	011b      	lsls	r3, r3, #4
 8001038:	bf18      	it	ne
 800103a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800103e:	d1e0      	bne.n	8001002 <__aeabi_fdiv+0x46>
 8001040:	2afd      	cmp	r2, #253	; 0xfd
 8001042:	f63f af50 	bhi.w	8000ee6 <__aeabi_fmul+0x92>
 8001046:	428b      	cmp	r3, r1
 8001048:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800104c:	bf08      	it	eq
 800104e:	f020 0001 	biceq.w	r0, r0, #1
 8001052:	4770      	bx	lr
 8001054:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001058:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800105c:	327f      	adds	r2, #127	; 0x7f
 800105e:	bfc2      	ittt	gt
 8001060:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001064:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001068:	4770      	bxgt	lr
 800106a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800106e:	f04f 0300 	mov.w	r3, #0
 8001072:	3a01      	subs	r2, #1
 8001074:	e737      	b.n	8000ee6 <__aeabi_fmul+0x92>
 8001076:	f092 0f00 	teq	r2, #0
 800107a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800107e:	bf02      	ittt	eq
 8001080:	0040      	lsleq	r0, r0, #1
 8001082:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001086:	3a01      	subeq	r2, #1
 8001088:	d0f9      	beq.n	800107e <__aeabi_fdiv+0xc2>
 800108a:	ea40 000c 	orr.w	r0, r0, ip
 800108e:	f093 0f00 	teq	r3, #0
 8001092:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001096:	bf02      	ittt	eq
 8001098:	0049      	lsleq	r1, r1, #1
 800109a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800109e:	3b01      	subeq	r3, #1
 80010a0:	d0f9      	beq.n	8001096 <__aeabi_fdiv+0xda>
 80010a2:	ea41 010c 	orr.w	r1, r1, ip
 80010a6:	e795      	b.n	8000fd4 <__aeabi_fdiv+0x18>
 80010a8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010ac:	ea92 0f0c 	teq	r2, ip
 80010b0:	d108      	bne.n	80010c4 <__aeabi_fdiv+0x108>
 80010b2:	0242      	lsls	r2, r0, #9
 80010b4:	f47f af7d 	bne.w	8000fb2 <__aeabi_fmul+0x15e>
 80010b8:	ea93 0f0c 	teq	r3, ip
 80010bc:	f47f af70 	bne.w	8000fa0 <__aeabi_fmul+0x14c>
 80010c0:	4608      	mov	r0, r1
 80010c2:	e776      	b.n	8000fb2 <__aeabi_fmul+0x15e>
 80010c4:	ea93 0f0c 	teq	r3, ip
 80010c8:	d104      	bne.n	80010d4 <__aeabi_fdiv+0x118>
 80010ca:	024b      	lsls	r3, r1, #9
 80010cc:	f43f af4c 	beq.w	8000f68 <__aeabi_fmul+0x114>
 80010d0:	4608      	mov	r0, r1
 80010d2:	e76e      	b.n	8000fb2 <__aeabi_fmul+0x15e>
 80010d4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010d8:	bf18      	it	ne
 80010da:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010de:	d1ca      	bne.n	8001076 <__aeabi_fdiv+0xba>
 80010e0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010e4:	f47f af5c 	bne.w	8000fa0 <__aeabi_fmul+0x14c>
 80010e8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010ec:	f47f af3c 	bne.w	8000f68 <__aeabi_fmul+0x114>
 80010f0:	e75f      	b.n	8000fb2 <__aeabi_fmul+0x15e>
 80010f2:	bf00      	nop

080010f4 <__gesf2>:
 80010f4:	f04f 3cff 	mov.w	ip, #4294967295
 80010f8:	e006      	b.n	8001108 <__cmpsf2+0x4>
 80010fa:	bf00      	nop

080010fc <__lesf2>:
 80010fc:	f04f 0c01 	mov.w	ip, #1
 8001100:	e002      	b.n	8001108 <__cmpsf2+0x4>
 8001102:	bf00      	nop

08001104 <__cmpsf2>:
 8001104:	f04f 0c01 	mov.w	ip, #1
 8001108:	f84d cd04 	str.w	ip, [sp, #-4]!
 800110c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001110:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001114:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001118:	bf18      	it	ne
 800111a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800111e:	d011      	beq.n	8001144 <__cmpsf2+0x40>
 8001120:	b001      	add	sp, #4
 8001122:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001126:	bf18      	it	ne
 8001128:	ea90 0f01 	teqne	r0, r1
 800112c:	bf58      	it	pl
 800112e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001132:	bf88      	it	hi
 8001134:	17c8      	asrhi	r0, r1, #31
 8001136:	bf38      	it	cc
 8001138:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800113c:	bf18      	it	ne
 800113e:	f040 0001 	orrne.w	r0, r0, #1
 8001142:	4770      	bx	lr
 8001144:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001148:	d102      	bne.n	8001150 <__cmpsf2+0x4c>
 800114a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800114e:	d105      	bne.n	800115c <__cmpsf2+0x58>
 8001150:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001154:	d1e4      	bne.n	8001120 <__cmpsf2+0x1c>
 8001156:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800115a:	d0e1      	beq.n	8001120 <__cmpsf2+0x1c>
 800115c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop

08001164 <__aeabi_cfrcmple>:
 8001164:	4684      	mov	ip, r0
 8001166:	4608      	mov	r0, r1
 8001168:	4661      	mov	r1, ip
 800116a:	e7ff      	b.n	800116c <__aeabi_cfcmpeq>

0800116c <__aeabi_cfcmpeq>:
 800116c:	b50f      	push	{r0, r1, r2, r3, lr}
 800116e:	f7ff ffc9 	bl	8001104 <__cmpsf2>
 8001172:	2800      	cmp	r0, #0
 8001174:	bf48      	it	mi
 8001176:	f110 0f00 	cmnmi.w	r0, #0
 800117a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800117c <__aeabi_fcmpeq>:
 800117c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001180:	f7ff fff4 	bl	800116c <__aeabi_cfcmpeq>
 8001184:	bf0c      	ite	eq
 8001186:	2001      	moveq	r0, #1
 8001188:	2000      	movne	r0, #0
 800118a:	f85d fb08 	ldr.w	pc, [sp], #8
 800118e:	bf00      	nop

08001190 <__aeabi_fcmplt>:
 8001190:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001194:	f7ff ffea 	bl	800116c <__aeabi_cfcmpeq>
 8001198:	bf34      	ite	cc
 800119a:	2001      	movcc	r0, #1
 800119c:	2000      	movcs	r0, #0
 800119e:	f85d fb08 	ldr.w	pc, [sp], #8
 80011a2:	bf00      	nop

080011a4 <__aeabi_fcmple>:
 80011a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011a8:	f7ff ffe0 	bl	800116c <__aeabi_cfcmpeq>
 80011ac:	bf94      	ite	ls
 80011ae:	2001      	movls	r0, #1
 80011b0:	2000      	movhi	r0, #0
 80011b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011b6:	bf00      	nop

080011b8 <__aeabi_fcmpge>:
 80011b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011bc:	f7ff ffd2 	bl	8001164 <__aeabi_cfrcmple>
 80011c0:	bf94      	ite	ls
 80011c2:	2001      	movls	r0, #1
 80011c4:	2000      	movhi	r0, #0
 80011c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011ca:	bf00      	nop

080011cc <__aeabi_fcmpgt>:
 80011cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011d0:	f7ff ffc8 	bl	8001164 <__aeabi_cfrcmple>
 80011d4:	bf34      	ite	cc
 80011d6:	2001      	movcc	r0, #1
 80011d8:	2000      	movcs	r0, #0
 80011da:	f85d fb08 	ldr.w	pc, [sp], #8
 80011de:	bf00      	nop

080011e0 <__aeabi_ldivmod>:
 80011e0:	b97b      	cbnz	r3, 8001202 <__aeabi_ldivmod+0x22>
 80011e2:	b972      	cbnz	r2, 8001202 <__aeabi_ldivmod+0x22>
 80011e4:	2900      	cmp	r1, #0
 80011e6:	bfbe      	ittt	lt
 80011e8:	2000      	movlt	r0, #0
 80011ea:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80011ee:	e006      	blt.n	80011fe <__aeabi_ldivmod+0x1e>
 80011f0:	bf08      	it	eq
 80011f2:	2800      	cmpeq	r0, #0
 80011f4:	bf1c      	itt	ne
 80011f6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80011fa:	f04f 30ff 	movne.w	r0, #4294967295
 80011fe:	f000 b9f7 	b.w	80015f0 <__aeabi_idiv0>
 8001202:	f1ad 0c08 	sub.w	ip, sp, #8
 8001206:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800120a:	2900      	cmp	r1, #0
 800120c:	db09      	blt.n	8001222 <__aeabi_ldivmod+0x42>
 800120e:	2b00      	cmp	r3, #0
 8001210:	db1a      	blt.n	8001248 <__aeabi_ldivmod+0x68>
 8001212:	f000 f885 	bl	8001320 <__udivmoddi4>
 8001216:	f8dd e004 	ldr.w	lr, [sp, #4]
 800121a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800121e:	b004      	add	sp, #16
 8001220:	4770      	bx	lr
 8001222:	4240      	negs	r0, r0
 8001224:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001228:	2b00      	cmp	r3, #0
 800122a:	db1b      	blt.n	8001264 <__aeabi_ldivmod+0x84>
 800122c:	f000 f878 	bl	8001320 <__udivmoddi4>
 8001230:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001234:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001238:	b004      	add	sp, #16
 800123a:	4240      	negs	r0, r0
 800123c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001240:	4252      	negs	r2, r2
 8001242:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001246:	4770      	bx	lr
 8001248:	4252      	negs	r2, r2
 800124a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800124e:	f000 f867 	bl	8001320 <__udivmoddi4>
 8001252:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001256:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800125a:	b004      	add	sp, #16
 800125c:	4240      	negs	r0, r0
 800125e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001262:	4770      	bx	lr
 8001264:	4252      	negs	r2, r2
 8001266:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800126a:	f000 f859 	bl	8001320 <__udivmoddi4>
 800126e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001272:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001276:	b004      	add	sp, #16
 8001278:	4252      	negs	r2, r2
 800127a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800127e:	4770      	bx	lr

08001280 <__aeabi_uldivmod>:
 8001280:	b953      	cbnz	r3, 8001298 <__aeabi_uldivmod+0x18>
 8001282:	b94a      	cbnz	r2, 8001298 <__aeabi_uldivmod+0x18>
 8001284:	2900      	cmp	r1, #0
 8001286:	bf08      	it	eq
 8001288:	2800      	cmpeq	r0, #0
 800128a:	bf1c      	itt	ne
 800128c:	f04f 31ff 	movne.w	r1, #4294967295
 8001290:	f04f 30ff 	movne.w	r0, #4294967295
 8001294:	f000 b9ac 	b.w	80015f0 <__aeabi_idiv0>
 8001298:	f1ad 0c08 	sub.w	ip, sp, #8
 800129c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80012a0:	f000 f83e 	bl	8001320 <__udivmoddi4>
 80012a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80012a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80012ac:	b004      	add	sp, #16
 80012ae:	4770      	bx	lr

080012b0 <__aeabi_d2lz>:
 80012b0:	b538      	push	{r3, r4, r5, lr}
 80012b2:	4605      	mov	r5, r0
 80012b4:	460c      	mov	r4, r1
 80012b6:	4628      	mov	r0, r5
 80012b8:	4621      	mov	r1, r4
 80012ba:	2200      	movs	r2, #0
 80012bc:	2300      	movs	r3, #0
 80012be:	f7ff fbe5 	bl	8000a8c <__aeabi_dcmplt>
 80012c2:	b928      	cbnz	r0, 80012d0 <__aeabi_d2lz+0x20>
 80012c4:	4628      	mov	r0, r5
 80012c6:	4621      	mov	r1, r4
 80012c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80012cc:	f000 b80a 	b.w	80012e4 <__aeabi_d2ulz>
 80012d0:	4628      	mov	r0, r5
 80012d2:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80012d6:	f000 f805 	bl	80012e4 <__aeabi_d2ulz>
 80012da:	4240      	negs	r0, r0
 80012dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80012e0:	bd38      	pop	{r3, r4, r5, pc}
 80012e2:	bf00      	nop

080012e4 <__aeabi_d2ulz>:
 80012e4:	b5d0      	push	{r4, r6, r7, lr}
 80012e6:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <__aeabi_d2ulz+0x34>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	4606      	mov	r6, r0
 80012ec:	460f      	mov	r7, r1
 80012ee:	f7ff f95b 	bl	80005a8 <__aeabi_dmul>
 80012f2:	f7ff fc31 	bl	8000b58 <__aeabi_d2uiz>
 80012f6:	4604      	mov	r4, r0
 80012f8:	f7ff f8dc 	bl	80004b4 <__aeabi_ui2d>
 80012fc:	4b07      	ldr	r3, [pc, #28]	; (800131c <__aeabi_d2ulz+0x38>)
 80012fe:	2200      	movs	r2, #0
 8001300:	f7ff f952 	bl	80005a8 <__aeabi_dmul>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	4630      	mov	r0, r6
 800130a:	4639      	mov	r1, r7
 800130c:	f7fe ff94 	bl	8000238 <__aeabi_dsub>
 8001310:	f7ff fc22 	bl	8000b58 <__aeabi_d2uiz>
 8001314:	4621      	mov	r1, r4
 8001316:	bdd0      	pop	{r4, r6, r7, pc}
 8001318:	3df00000 	.word	0x3df00000
 800131c:	41f00000 	.word	0x41f00000

08001320 <__udivmoddi4>:
 8001320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001324:	9e08      	ldr	r6, [sp, #32]
 8001326:	460d      	mov	r5, r1
 8001328:	4604      	mov	r4, r0
 800132a:	4688      	mov	r8, r1
 800132c:	2b00      	cmp	r3, #0
 800132e:	d14d      	bne.n	80013cc <__udivmoddi4+0xac>
 8001330:	428a      	cmp	r2, r1
 8001332:	4694      	mov	ip, r2
 8001334:	d968      	bls.n	8001408 <__udivmoddi4+0xe8>
 8001336:	fab2 f282 	clz	r2, r2
 800133a:	b152      	cbz	r2, 8001352 <__udivmoddi4+0x32>
 800133c:	fa01 f302 	lsl.w	r3, r1, r2
 8001340:	f1c2 0120 	rsb	r1, r2, #32
 8001344:	fa20 f101 	lsr.w	r1, r0, r1
 8001348:	fa0c fc02 	lsl.w	ip, ip, r2
 800134c:	ea41 0803 	orr.w	r8, r1, r3
 8001350:	4094      	lsls	r4, r2
 8001352:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8001356:	0c21      	lsrs	r1, r4, #16
 8001358:	fbb8 fef5 	udiv	lr, r8, r5
 800135c:	fa1f f78c 	uxth.w	r7, ip
 8001360:	fb05 831e 	mls	r3, r5, lr, r8
 8001364:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8001368:	fb0e f107 	mul.w	r1, lr, r7
 800136c:	4299      	cmp	r1, r3
 800136e:	d90b      	bls.n	8001388 <__udivmoddi4+0x68>
 8001370:	eb1c 0303 	adds.w	r3, ip, r3
 8001374:	f10e 30ff 	add.w	r0, lr, #4294967295
 8001378:	f080 811e 	bcs.w	80015b8 <__udivmoddi4+0x298>
 800137c:	4299      	cmp	r1, r3
 800137e:	f240 811b 	bls.w	80015b8 <__udivmoddi4+0x298>
 8001382:	f1ae 0e02 	sub.w	lr, lr, #2
 8001386:	4463      	add	r3, ip
 8001388:	1a5b      	subs	r3, r3, r1
 800138a:	b2a4      	uxth	r4, r4
 800138c:	fbb3 f0f5 	udiv	r0, r3, r5
 8001390:	fb05 3310 	mls	r3, r5, r0, r3
 8001394:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001398:	fb00 f707 	mul.w	r7, r0, r7
 800139c:	42a7      	cmp	r7, r4
 800139e:	d90a      	bls.n	80013b6 <__udivmoddi4+0x96>
 80013a0:	eb1c 0404 	adds.w	r4, ip, r4
 80013a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80013a8:	f080 8108 	bcs.w	80015bc <__udivmoddi4+0x29c>
 80013ac:	42a7      	cmp	r7, r4
 80013ae:	f240 8105 	bls.w	80015bc <__udivmoddi4+0x29c>
 80013b2:	4464      	add	r4, ip
 80013b4:	3802      	subs	r0, #2
 80013b6:	1be4      	subs	r4, r4, r7
 80013b8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80013bc:	2100      	movs	r1, #0
 80013be:	b11e      	cbz	r6, 80013c8 <__udivmoddi4+0xa8>
 80013c0:	40d4      	lsrs	r4, r2
 80013c2:	2300      	movs	r3, #0
 80013c4:	e9c6 4300 	strd	r4, r3, [r6]
 80013c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013cc:	428b      	cmp	r3, r1
 80013ce:	d908      	bls.n	80013e2 <__udivmoddi4+0xc2>
 80013d0:	2e00      	cmp	r6, #0
 80013d2:	f000 80ee 	beq.w	80015b2 <__udivmoddi4+0x292>
 80013d6:	2100      	movs	r1, #0
 80013d8:	e9c6 0500 	strd	r0, r5, [r6]
 80013dc:	4608      	mov	r0, r1
 80013de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013e2:	fab3 f183 	clz	r1, r3
 80013e6:	2900      	cmp	r1, #0
 80013e8:	d14a      	bne.n	8001480 <__udivmoddi4+0x160>
 80013ea:	42ab      	cmp	r3, r5
 80013ec:	d302      	bcc.n	80013f4 <__udivmoddi4+0xd4>
 80013ee:	4282      	cmp	r2, r0
 80013f0:	f200 80f9 	bhi.w	80015e6 <__udivmoddi4+0x2c6>
 80013f4:	1a84      	subs	r4, r0, r2
 80013f6:	eb65 0303 	sbc.w	r3, r5, r3
 80013fa:	2001      	movs	r0, #1
 80013fc:	4698      	mov	r8, r3
 80013fe:	2e00      	cmp	r6, #0
 8001400:	d0e2      	beq.n	80013c8 <__udivmoddi4+0xa8>
 8001402:	e9c6 4800 	strd	r4, r8, [r6]
 8001406:	e7df      	b.n	80013c8 <__udivmoddi4+0xa8>
 8001408:	b902      	cbnz	r2, 800140c <__udivmoddi4+0xec>
 800140a:	deff      	udf	#255	; 0xff
 800140c:	fab2 f282 	clz	r2, r2
 8001410:	2a00      	cmp	r2, #0
 8001412:	f040 8091 	bne.w	8001538 <__udivmoddi4+0x218>
 8001416:	eba1 050c 	sub.w	r5, r1, ip
 800141a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800141e:	fa1f fe8c 	uxth.w	lr, ip
 8001422:	2101      	movs	r1, #1
 8001424:	fbb5 f3f7 	udiv	r3, r5, r7
 8001428:	fb07 5013 	mls	r0, r7, r3, r5
 800142c:	0c25      	lsrs	r5, r4, #16
 800142e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001432:	fb0e f003 	mul.w	r0, lr, r3
 8001436:	42a8      	cmp	r0, r5
 8001438:	d908      	bls.n	800144c <__udivmoddi4+0x12c>
 800143a:	eb1c 0505 	adds.w	r5, ip, r5
 800143e:	f103 38ff 	add.w	r8, r3, #4294967295
 8001442:	d202      	bcs.n	800144a <__udivmoddi4+0x12a>
 8001444:	42a8      	cmp	r0, r5
 8001446:	f200 80cb 	bhi.w	80015e0 <__udivmoddi4+0x2c0>
 800144a:	4643      	mov	r3, r8
 800144c:	1a2d      	subs	r5, r5, r0
 800144e:	b2a4      	uxth	r4, r4
 8001450:	fbb5 f0f7 	udiv	r0, r5, r7
 8001454:	fb07 5510 	mls	r5, r7, r0, r5
 8001458:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800145c:	fb0e fe00 	mul.w	lr, lr, r0
 8001460:	45a6      	cmp	lr, r4
 8001462:	d908      	bls.n	8001476 <__udivmoddi4+0x156>
 8001464:	eb1c 0404 	adds.w	r4, ip, r4
 8001468:	f100 35ff 	add.w	r5, r0, #4294967295
 800146c:	d202      	bcs.n	8001474 <__udivmoddi4+0x154>
 800146e:	45a6      	cmp	lr, r4
 8001470:	f200 80bb 	bhi.w	80015ea <__udivmoddi4+0x2ca>
 8001474:	4628      	mov	r0, r5
 8001476:	eba4 040e 	sub.w	r4, r4, lr
 800147a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800147e:	e79e      	b.n	80013be <__udivmoddi4+0x9e>
 8001480:	f1c1 0720 	rsb	r7, r1, #32
 8001484:	408b      	lsls	r3, r1
 8001486:	fa22 fc07 	lsr.w	ip, r2, r7
 800148a:	ea4c 0c03 	orr.w	ip, ip, r3
 800148e:	fa20 f407 	lsr.w	r4, r0, r7
 8001492:	fa05 f301 	lsl.w	r3, r5, r1
 8001496:	431c      	orrs	r4, r3
 8001498:	40fd      	lsrs	r5, r7
 800149a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800149e:	fa00 f301 	lsl.w	r3, r0, r1
 80014a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80014a6:	0c20      	lsrs	r0, r4, #16
 80014a8:	fa1f fe8c 	uxth.w	lr, ip
 80014ac:	fb09 5518 	mls	r5, r9, r8, r5
 80014b0:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80014b4:	fb08 f00e 	mul.w	r0, r8, lr
 80014b8:	42a8      	cmp	r0, r5
 80014ba:	fa02 f201 	lsl.w	r2, r2, r1
 80014be:	d90b      	bls.n	80014d8 <__udivmoddi4+0x1b8>
 80014c0:	eb1c 0505 	adds.w	r5, ip, r5
 80014c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80014c8:	f080 8088 	bcs.w	80015dc <__udivmoddi4+0x2bc>
 80014cc:	42a8      	cmp	r0, r5
 80014ce:	f240 8085 	bls.w	80015dc <__udivmoddi4+0x2bc>
 80014d2:	f1a8 0802 	sub.w	r8, r8, #2
 80014d6:	4465      	add	r5, ip
 80014d8:	1a2d      	subs	r5, r5, r0
 80014da:	b2a4      	uxth	r4, r4
 80014dc:	fbb5 f0f9 	udiv	r0, r5, r9
 80014e0:	fb09 5510 	mls	r5, r9, r0, r5
 80014e4:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80014e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80014ec:	45ae      	cmp	lr, r5
 80014ee:	d908      	bls.n	8001502 <__udivmoddi4+0x1e2>
 80014f0:	eb1c 0505 	adds.w	r5, ip, r5
 80014f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80014f8:	d26c      	bcs.n	80015d4 <__udivmoddi4+0x2b4>
 80014fa:	45ae      	cmp	lr, r5
 80014fc:	d96a      	bls.n	80015d4 <__udivmoddi4+0x2b4>
 80014fe:	3802      	subs	r0, #2
 8001500:	4465      	add	r5, ip
 8001502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001506:	fba0 9402 	umull	r9, r4, r0, r2
 800150a:	eba5 050e 	sub.w	r5, r5, lr
 800150e:	42a5      	cmp	r5, r4
 8001510:	46c8      	mov	r8, r9
 8001512:	46a6      	mov	lr, r4
 8001514:	d356      	bcc.n	80015c4 <__udivmoddi4+0x2a4>
 8001516:	d053      	beq.n	80015c0 <__udivmoddi4+0x2a0>
 8001518:	b15e      	cbz	r6, 8001532 <__udivmoddi4+0x212>
 800151a:	ebb3 0208 	subs.w	r2, r3, r8
 800151e:	eb65 050e 	sbc.w	r5, r5, lr
 8001522:	fa05 f707 	lsl.w	r7, r5, r7
 8001526:	fa22 f301 	lsr.w	r3, r2, r1
 800152a:	40cd      	lsrs	r5, r1
 800152c:	431f      	orrs	r7, r3
 800152e:	e9c6 7500 	strd	r7, r5, [r6]
 8001532:	2100      	movs	r1, #0
 8001534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001538:	f1c2 0320 	rsb	r3, r2, #32
 800153c:	fa20 f103 	lsr.w	r1, r0, r3
 8001540:	fa0c fc02 	lsl.w	ip, ip, r2
 8001544:	fa25 f303 	lsr.w	r3, r5, r3
 8001548:	4095      	lsls	r5, r2
 800154a:	430d      	orrs	r5, r1
 800154c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001550:	fa1f fe8c 	uxth.w	lr, ip
 8001554:	fbb3 f1f7 	udiv	r1, r3, r7
 8001558:	fb07 3011 	mls	r0, r7, r1, r3
 800155c:	0c2b      	lsrs	r3, r5, #16
 800155e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001562:	fb01 f00e 	mul.w	r0, r1, lr
 8001566:	4298      	cmp	r0, r3
 8001568:	fa04 f402 	lsl.w	r4, r4, r2
 800156c:	d908      	bls.n	8001580 <__udivmoddi4+0x260>
 800156e:	eb1c 0303 	adds.w	r3, ip, r3
 8001572:	f101 38ff 	add.w	r8, r1, #4294967295
 8001576:	d22f      	bcs.n	80015d8 <__udivmoddi4+0x2b8>
 8001578:	4298      	cmp	r0, r3
 800157a:	d92d      	bls.n	80015d8 <__udivmoddi4+0x2b8>
 800157c:	3902      	subs	r1, #2
 800157e:	4463      	add	r3, ip
 8001580:	1a1b      	subs	r3, r3, r0
 8001582:	b2ad      	uxth	r5, r5
 8001584:	fbb3 f0f7 	udiv	r0, r3, r7
 8001588:	fb07 3310 	mls	r3, r7, r0, r3
 800158c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8001590:	fb00 f30e 	mul.w	r3, r0, lr
 8001594:	42ab      	cmp	r3, r5
 8001596:	d908      	bls.n	80015aa <__udivmoddi4+0x28a>
 8001598:	eb1c 0505 	adds.w	r5, ip, r5
 800159c:	f100 38ff 	add.w	r8, r0, #4294967295
 80015a0:	d216      	bcs.n	80015d0 <__udivmoddi4+0x2b0>
 80015a2:	42ab      	cmp	r3, r5
 80015a4:	d914      	bls.n	80015d0 <__udivmoddi4+0x2b0>
 80015a6:	3802      	subs	r0, #2
 80015a8:	4465      	add	r5, ip
 80015aa:	1aed      	subs	r5, r5, r3
 80015ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80015b0:	e738      	b.n	8001424 <__udivmoddi4+0x104>
 80015b2:	4631      	mov	r1, r6
 80015b4:	4630      	mov	r0, r6
 80015b6:	e707      	b.n	80013c8 <__udivmoddi4+0xa8>
 80015b8:	4686      	mov	lr, r0
 80015ba:	e6e5      	b.n	8001388 <__udivmoddi4+0x68>
 80015bc:	4618      	mov	r0, r3
 80015be:	e6fa      	b.n	80013b6 <__udivmoddi4+0x96>
 80015c0:	454b      	cmp	r3, r9
 80015c2:	d2a9      	bcs.n	8001518 <__udivmoddi4+0x1f8>
 80015c4:	ebb9 0802 	subs.w	r8, r9, r2
 80015c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80015cc:	3801      	subs	r0, #1
 80015ce:	e7a3      	b.n	8001518 <__udivmoddi4+0x1f8>
 80015d0:	4640      	mov	r0, r8
 80015d2:	e7ea      	b.n	80015aa <__udivmoddi4+0x28a>
 80015d4:	4620      	mov	r0, r4
 80015d6:	e794      	b.n	8001502 <__udivmoddi4+0x1e2>
 80015d8:	4641      	mov	r1, r8
 80015da:	e7d1      	b.n	8001580 <__udivmoddi4+0x260>
 80015dc:	46d0      	mov	r8, sl
 80015de:	e77b      	b.n	80014d8 <__udivmoddi4+0x1b8>
 80015e0:	3b02      	subs	r3, #2
 80015e2:	4465      	add	r5, ip
 80015e4:	e732      	b.n	800144c <__udivmoddi4+0x12c>
 80015e6:	4608      	mov	r0, r1
 80015e8:	e709      	b.n	80013fe <__udivmoddi4+0xde>
 80015ea:	4464      	add	r4, ip
 80015ec:	3802      	subs	r0, #2
 80015ee:	e742      	b.n	8001476 <__udivmoddi4+0x156>

080015f0 <__aeabi_idiv0>:
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop

080015f4 <bme680_init>:
/*!
 *@brief This API is the entry point.
 *It reads the chip-id and calibration data from the sensor.
 */
int8_t bme680_init(struct bme680_dev *dev)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f001 fa61 	bl	8002ac4 <null_ptr_check>
 8001602:	4603      	mov	r3, r0
 8001604:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8001606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d120      	bne.n	8001650 <bme680_init+0x5c>
		/* Soft reset to restore it to default values*/
		rslt = bme680_soft_reset(dev);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f000 f8ee 	bl	80017f0 <bme680_soft_reset>
 8001614:	4603      	mov	r3, r0
 8001616:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME680_OK) {
 8001618:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d117      	bne.n	8001650 <bme680_init+0x5c>
			rslt = bme680_get_regs(BME680_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 8001620:	6879      	ldr	r1, [r7, #4]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2201      	movs	r2, #1
 8001626:	20d0      	movs	r0, #208	; 0xd0
 8001628:	f000 f818 	bl	800165c <bme680_get_regs>
 800162c:	4603      	mov	r3, r0
 800162e:	73fb      	strb	r3, [r7, #15]
			if (rslt == BME680_OK) {
 8001630:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d10b      	bne.n	8001650 <bme680_init+0x5c>
				if (dev->chip_id == BME680_CHIP_ID) {
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b61      	cmp	r3, #97	; 0x61
 800163e:	d105      	bne.n	800164c <bme680_init+0x58>
					/* Get the Calibration data */
					rslt = get_calib_data(dev);
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f000 fbcf 	bl	8001de4 <get_calib_data>
 8001646:	4603      	mov	r3, r0
 8001648:	73fb      	strb	r3, [r7, #15]
 800164a:	e001      	b.n	8001650 <bme680_init+0x5c>
				} else {
					rslt = BME680_E_DEV_NOT_FOUND;
 800164c:	23fd      	movs	r3, #253	; 0xfd
 800164e:	73fb      	strb	r3, [r7, #15]
				}
			}
		}
	}

	return rslt;
 8001650:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <bme680_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev)
{
 800165c:	b590      	push	{r4, r7, lr}
 800165e:	b087      	sub	sp, #28
 8001660:	af00      	add	r7, sp, #0
 8001662:	60b9      	str	r1, [r7, #8]
 8001664:	607b      	str	r3, [r7, #4]
 8001666:	4603      	mov	r3, r0
 8001668:	73fb      	strb	r3, [r7, #15]
 800166a:	4613      	mov	r3, r2
 800166c:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f001 fa28 	bl	8002ac4 <null_ptr_check>
 8001674:	4603      	mov	r3, r0
 8001676:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME680_OK) {
 8001678:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d126      	bne.n	80016ce <bme680_get_regs+0x72>
		if (dev->intf == BME680_SPI_INTF) {
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	789b      	ldrb	r3, [r3, #2]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d10e      	bne.n	80016a6 <bme680_get_regs+0x4a>
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
 8001688:	7bfb      	ldrb	r3, [r7, #15]
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	4618      	mov	r0, r3
 800168e:	f001 f94b 	bl	8002928 <set_mem_page>
 8001692:	4603      	mov	r3, r0
 8001694:	75fb      	strb	r3, [r7, #23]
			if (rslt == BME680_OK)
 8001696:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d103      	bne.n	80016a6 <bme680_get_regs+0x4a>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
 800169e:	7bfb      	ldrb	r3, [r7, #15]
 80016a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016a4:	73fb      	strb	r3, [r7, #15]
		}
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	7858      	ldrb	r0, [r3, #1]
 80016ae:	89bb      	ldrh	r3, [r7, #12]
 80016b0:	7bf9      	ldrb	r1, [r7, #15]
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	47a0      	blx	r4
 80016b6:	4603      	mov	r3, r0
 80016b8:	461a      	mov	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		if (dev->com_rslt != 0)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <bme680_get_regs+0x72>
			rslt = BME680_E_COM_FAIL;
 80016ca:	23fe      	movs	r3, #254	; 0xfe
 80016cc:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80016ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	371c      	adds	r7, #28
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd90      	pop	{r4, r7, pc}

080016da <bme680_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme680_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme680_dev *dev)
{
 80016da:	b5b0      	push	{r4, r5, r7, lr}
 80016dc:	b090      	sub	sp, #64	; 0x40
 80016de:	af00      	add	r7, sp, #0
 80016e0:	60f8      	str	r0, [r7, #12]
 80016e2:	60b9      	str	r1, [r7, #8]
 80016e4:	603b      	str	r3, [r7, #0]
 80016e6:	4613      	mov	r3, r2
 80016e8:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	/* Length of the temporary buffer is 2*(length of register)*/
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
 80016ee:	f107 0318 	add.w	r3, r7, #24
 80016f2:	2224      	movs	r2, #36	; 0x24
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f007 f9b4 	bl	8008a64 <memset>
	uint16_t index;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80016fc:	6838      	ldr	r0, [r7, #0]
 80016fe:	f001 f9e1 	bl	8002ac4 <null_ptr_check>
 8001702:	4603      	mov	r3, r0
 8001704:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (rslt == BME680_OK) {
 8001708:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800170c:	2b00      	cmp	r3, #0
 800170e:	d169      	bne.n	80017e4 <bme680_set_regs+0x10a>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d061      	beq.n	80017da <bme680_set_regs+0x100>
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	2b13      	cmp	r3, #19
 800171a:	d85e      	bhi.n	80017da <bme680_set_regs+0x100>
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
 800171c:	2300      	movs	r3, #0
 800171e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001720:	e034      	b.n	800178c <bme680_set_regs+0xb2>
				if (dev->intf == BME680_SPI_INTF) {
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	789b      	ldrb	r3, [r3, #2]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d118      	bne.n	800175c <bme680_set_regs+0x82>
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
 800172a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800172c:	68fa      	ldr	r2, [r7, #12]
 800172e:	4413      	add	r3, r2
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	6839      	ldr	r1, [r7, #0]
 8001734:	4618      	mov	r0, r3
 8001736:	f001 f8f7 	bl	8002928 <set_mem_page>
 800173a:	4603      	mov	r3, r0
 800173c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 8001740:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	4413      	add	r3, r2
 8001746:	781a      	ldrb	r2, [r3, #0]
 8001748:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001750:	b2d2      	uxtb	r2, r2
 8001752:	3340      	adds	r3, #64	; 0x40
 8001754:	443b      	add	r3, r7
 8001756:	f803 2c2c 	strb.w	r2, [r3, #-44]
 800175a:	e009      	b.n	8001770 <bme680_set_regs+0x96>
				} else {
					tmp_buff[(2 * index)] = reg_addr[index];
 800175c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	441a      	add	r2, r3
 8001762:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	7812      	ldrb	r2, [r2, #0]
 8001768:	3340      	adds	r3, #64	; 0x40
 800176a:	443b      	add	r3, r7
 800176c:	f803 2c2c 	strb.w	r2, [r3, #-44]
				}
				tmp_buff[(2 * index) + 1] = reg_data[index];
 8001770:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001772:	68ba      	ldr	r2, [r7, #8]
 8001774:	441a      	add	r2, r3
 8001776:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	3301      	adds	r3, #1
 800177c:	7812      	ldrb	r2, [r2, #0]
 800177e:	3340      	adds	r3, #64	; 0x40
 8001780:	443b      	add	r3, r7
 8001782:	f803 2c2c 	strb.w	r2, [r3, #-44]
			for (index = 0; index < len; index++) {
 8001786:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001788:	3301      	adds	r3, #1
 800178a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	b29b      	uxth	r3, r3
 8001790:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001792:	429a      	cmp	r2, r3
 8001794:	d3c5      	bcc.n	8001722 <bme680_set_regs+0x48>
			}
			/* Write the interleaved array */
			if (rslt == BME680_OK) {
 8001796:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800179a:	2b00      	cmp	r3, #0
 800179c:	d121      	bne.n	80017e2 <bme680_set_regs+0x108>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	7858      	ldrb	r0, [r3, #1]
 80017a6:	7d39      	ldrb	r1, [r7, #20]
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	3b01      	subs	r3, #1
 80017b2:	b29d      	uxth	r5, r3
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	1c5a      	adds	r2, r3, #1
 80017ba:	462b      	mov	r3, r5
 80017bc:	47a0      	blx	r4
 80017be:	4603      	mov	r3, r0
 80017c0:	461a      	mov	r2, r3
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
				if (dev->com_rslt != 0)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d007      	beq.n	80017e2 <bme680_set_regs+0x108>
					rslt = BME680_E_COM_FAIL;
 80017d2:	23fe      	movs	r3, #254	; 0xfe
 80017d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			if (rslt == BME680_OK) {
 80017d8:	e003      	b.n	80017e2 <bme680_set_regs+0x108>
			}
		} else {
			rslt = BME680_E_INVALID_LENGTH;
 80017da:	23fc      	movs	r3, #252	; 0xfc
 80017dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80017e0:	e000      	b.n	80017e4 <bme680_set_regs+0x10a>
			if (rslt == BME680_OK) {
 80017e2:	bf00      	nop
		}
	}

	return rslt;
 80017e4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3740      	adds	r7, #64	; 0x40
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bdb0      	pop	{r4, r5, r7, pc}

080017f0 <bme680_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme680_soft_reset(struct bme680_dev *dev)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
 80017f8:	23e0      	movs	r3, #224	; 0xe0
 80017fa:	73bb      	strb	r3, [r7, #14]
	/* 0xb6 is the soft reset command */
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
 80017fc:	23b6      	movs	r3, #182	; 0xb6
 80017fe:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f001 f95f 	bl	8002ac4 <null_ptr_check>
 8001806:	4603      	mov	r3, r0
 8001808:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 800180a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d127      	bne.n	8001862 <bme680_soft_reset+0x72>
		if (dev->intf == BME680_SPI_INTF)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	789b      	ldrb	r3, [r3, #2]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d104      	bne.n	8001824 <bme680_soft_reset+0x34>
			rslt = get_mem_page(dev);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f001 f8e9 	bl	80029f2 <get_mem_page>
 8001820:	4603      	mov	r3, r0
 8001822:	73fb      	strb	r3, [r7, #15]

		/* Reset the device */
		if (rslt == BME680_OK) {
 8001824:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d11a      	bne.n	8001862 <bme680_soft_reset+0x72>
			rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 800182c:	f107 010d 	add.w	r1, r7, #13
 8001830:	f107 000e 	add.w	r0, r7, #14
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	f7ff ff4f 	bl	80016da <bme680_set_regs>
 800183c:	4603      	mov	r3, r0
 800183e:	73fb      	strb	r3, [r7, #15]
			/* Wait for 5ms */
			dev->delay_ms(BME680_RESET_PERIOD);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001844:	200a      	movs	r0, #10
 8001846:	4798      	blx	r3

			if (rslt == BME680_OK) {
 8001848:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d108      	bne.n	8001862 <bme680_soft_reset+0x72>
				/* After reset get the memory page */
				if (dev->intf == BME680_SPI_INTF)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	789b      	ldrb	r3, [r3, #2]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d104      	bne.n	8001862 <bme680_soft_reset+0x72>
					rslt = get_mem_page(dev);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f001 f8ca 	bl	80029f2 <get_mem_page>
 800185e:	4603      	mov	r3, r0
 8001860:	73fb      	strb	r3, [r7, #15]
			}
		}
	}

	return rslt;
 8001862:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <bme680_set_sensor_settings>:
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b088      	sub	sp, #32
 8001872:	af00      	add	r7, sp, #0
 8001874:	4603      	mov	r3, r0
 8001876:	6039      	str	r1, [r7, #0]
 8001878:	80fb      	strh	r3, [r7, #6]
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
 800187a:	2300      	movs	r3, #0
 800187c:	76fb      	strb	r3, [r7, #27]
	uint8_t count = 0;
 800187e:	2300      	movs	r3, #0
 8001880:	77bb      	strb	r3, [r7, #30]
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 8001882:	2300      	movs	r3, #0
 8001884:	617b      	str	r3, [r7, #20]
 8001886:	2300      	movs	r3, #0
 8001888:	833b      	strh	r3, [r7, #24]
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	2300      	movs	r3, #0
 8001890:	823b      	strh	r3, [r7, #16]
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001898:	777b      	strb	r3, [r7, #29]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800189a:	6838      	ldr	r0, [r7, #0]
 800189c:	f001 f912 	bl	8002ac4 <null_ptr_check>
 80018a0:	4603      	mov	r3, r0
 80018a2:	77fb      	strb	r3, [r7, #31]
	if (rslt == BME680_OK) {
 80018a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f040 81a2 	bne.w	8001bf2 <bme680_set_sensor_settings+0x384>
		if (desired_settings & BME680_GAS_MEAS_SEL)
 80018ae:	88fb      	ldrh	r3, [r7, #6]
 80018b0:	f003 0308 	and.w	r3, r3, #8
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d004      	beq.n	80018c2 <bme680_set_sensor_settings+0x54>
			rslt = set_gas_config(dev);
 80018b8:	6838      	ldr	r0, [r7, #0]
 80018ba:	f000 fbbf 	bl	800203c <set_gas_config>
 80018be:	4603      	mov	r3, r0
 80018c0:	77fb      	strb	r3, [r7, #31]

		dev->power_mode = BME680_SLEEP_MODE;
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		if (rslt == BME680_OK)
 80018ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d104      	bne.n	80018dc <bme680_set_sensor_settings+0x6e>
			rslt = bme680_set_sensor_mode(dev);
 80018d2:	6838      	ldr	r0, [r7, #0]
 80018d4:	f000 f993 	bl	8001bfe <bme680_set_sensor_mode>
 80018d8:	4603      	mov	r3, r0
 80018da:	77fb      	strb	r3, [r7, #31]

		/* Selecting the filter */
		if (desired_settings & BME680_FILTER_SEL) {
 80018dc:	88fb      	ldrh	r3, [r7, #6]
 80018de:	f003 0310 	and.w	r3, r3, #16
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d03d      	beq.n	8001962 <bme680_set_sensor_settings+0xf4>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	f103 003b 	add.w	r0, r3, #59	; 0x3b
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	2207      	movs	r2, #7
 80018f0:	2100      	movs	r1, #0
 80018f2:	f001 f8ad 	bl	8002a50 <boundary_check>
 80018f6:	4603      	mov	r3, r0
 80018f8:	77fb      	strb	r3, [r7, #31]
			reg_addr = BME680_CONF_ODR_FILT_ADDR;
 80018fa:	2375      	movs	r3, #117	; 0x75
 80018fc:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 80018fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d108      	bne.n	8001918 <bme680_set_sensor_settings+0xaa>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8001906:	f107 011b 	add.w	r1, r7, #27
 800190a:	7f38      	ldrb	r0, [r7, #28]
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	2201      	movs	r2, #1
 8001910:	f7ff fea4 	bl	800165c <bme680_get_regs>
 8001914:	4603      	mov	r3, r0
 8001916:	77fb      	strb	r3, [r7, #31]

			if (desired_settings & BME680_FILTER_SEL)
 8001918:	88fb      	ldrh	r3, [r7, #6]
 800191a:	f003 0310 	and.w	r3, r3, #16
 800191e:	2b00      	cmp	r3, #0
 8001920:	d010      	beq.n	8001944 <bme680_set_sensor_settings+0xd6>
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 8001922:	7efb      	ldrb	r3, [r7, #27]
 8001924:	b25b      	sxtb	r3, r3
 8001926:	f023 031c 	bic.w	r3, r3, #28
 800192a:	b25a      	sxtb	r2, r3
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	b25b      	sxtb	r3, r3
 8001936:	f003 031c 	and.w	r3, r3, #28
 800193a:	b25b      	sxtb	r3, r3
 800193c:	4313      	orrs	r3, r2
 800193e:	b25b      	sxtb	r3, r3
 8001940:	b2db      	uxtb	r3, r3
 8001942:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 8001944:	7fbb      	ldrb	r3, [r7, #30]
 8001946:	3320      	adds	r3, #32
 8001948:	443b      	add	r3, r7
 800194a:	7f3a      	ldrb	r2, [r7, #28]
 800194c:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 8001950:	7fbb      	ldrb	r3, [r7, #30]
 8001952:	7efa      	ldrb	r2, [r7, #27]
 8001954:	3320      	adds	r3, #32
 8001956:	443b      	add	r3, r7
 8001958:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 800195c:	7fbb      	ldrb	r3, [r7, #30]
 800195e:	3301      	adds	r3, #1
 8001960:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting heater control for the sensor */
		if (desired_settings & BME680_HCNTRL_SEL) {
 8001962:	88fb      	ldrh	r3, [r7, #6]
 8001964:	f003 0320 	and.w	r3, r3, #32
 8001968:	2b00      	cmp	r3, #0
 800196a:	d037      	beq.n	80019dc <bme680_set_sensor_settings+0x16e>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	f103 003d 	add.w	r0, r3, #61	; 0x3d
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	2208      	movs	r2, #8
 8001976:	2100      	movs	r1, #0
 8001978:	f001 f86a 	bl	8002a50 <boundary_check>
 800197c:	4603      	mov	r3, r0
 800197e:	77fb      	strb	r3, [r7, #31]
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;
 8001980:	2370      	movs	r3, #112	; 0x70
 8001982:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 8001984:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d108      	bne.n	800199e <bme680_set_sensor_settings+0x130>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 800198c:	f107 011b 	add.w	r1, r7, #27
 8001990:	7f38      	ldrb	r0, [r7, #28]
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	2201      	movs	r2, #1
 8001996:	f7ff fe61 	bl	800165c <bme680_get_regs>
 800199a:	4603      	mov	r3, r0
 800199c:	77fb      	strb	r3, [r7, #31]
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 800199e:	7efb      	ldrb	r3, [r7, #27]
 80019a0:	b25b      	sxtb	r3, r3
 80019a2:	f023 0308 	bic.w	r3, r3, #8
 80019a6:	b25a      	sxtb	r2, r3
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019ae:	b25b      	sxtb	r3, r3
 80019b0:	f003 0308 	and.w	r3, r3, #8
 80019b4:	b25b      	sxtb	r3, r3
 80019b6:	4313      	orrs	r3, r2
 80019b8:	b25b      	sxtb	r3, r3
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 80019be:	7fbb      	ldrb	r3, [r7, #30]
 80019c0:	3320      	adds	r3, #32
 80019c2:	443b      	add	r3, r7
 80019c4:	7f3a      	ldrb	r2, [r7, #28]
 80019c6:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 80019ca:	7fbb      	ldrb	r3, [r7, #30]
 80019cc:	7efa      	ldrb	r2, [r7, #27]
 80019ce:	3320      	adds	r3, #32
 80019d0:	443b      	add	r3, r7
 80019d2:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 80019d6:	7fbb      	ldrb	r3, [r7, #30]
 80019d8:	3301      	adds	r3, #1
 80019da:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting heater T,P oversampling for the sensor */
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
 80019dc:	88fb      	ldrh	r3, [r7, #6]
 80019de:	f003 0303 	and.w	r3, r3, #3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d050      	beq.n	8001a88 <bme680_set_sensor_settings+0x21a>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	f103 0039 	add.w	r0, r3, #57	; 0x39
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	2205      	movs	r2, #5
 80019f0:	2100      	movs	r1, #0
 80019f2:	f001 f82d 	bl	8002a50 <boundary_check>
 80019f6:	4603      	mov	r3, r0
 80019f8:	77fb      	strb	r3, [r7, #31]
			reg_addr = BME680_CONF_T_P_MODE_ADDR;
 80019fa:	2374      	movs	r3, #116	; 0x74
 80019fc:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 80019fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d108      	bne.n	8001a18 <bme680_set_sensor_settings+0x1aa>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8001a06:	f107 011b 	add.w	r1, r7, #27
 8001a0a:	7f38      	ldrb	r0, [r7, #28]
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f7ff fe24 	bl	800165c <bme680_get_regs>
 8001a14:	4603      	mov	r3, r0
 8001a16:	77fb      	strb	r3, [r7, #31]

			if (desired_settings & BME680_OST_SEL)
 8001a18:	88fb      	ldrh	r3, [r7, #6]
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d00d      	beq.n	8001a3e <bme680_set_sensor_settings+0x1d0>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
 8001a22:	7efb      	ldrb	r3, [r7, #27]
 8001a24:	b25b      	sxtb	r3, r3
 8001a26:	f003 031f 	and.w	r3, r3, #31
 8001a2a:	b25a      	sxtb	r2, r3
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a32:	015b      	lsls	r3, r3, #5
 8001a34:	b25b      	sxtb	r3, r3
 8001a36:	4313      	orrs	r3, r2
 8001a38:	b25b      	sxtb	r3, r3
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	76fb      	strb	r3, [r7, #27]

			if (desired_settings & BME680_OSP_SEL)
 8001a3e:	88fb      	ldrh	r3, [r7, #6]
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d010      	beq.n	8001a6a <bme680_set_sensor_settings+0x1fc>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
 8001a48:	7efb      	ldrb	r3, [r7, #27]
 8001a4a:	b25b      	sxtb	r3, r3
 8001a4c:	f023 031c 	bic.w	r3, r3, #28
 8001a50:	b25a      	sxtb	r2, r3
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	b25b      	sxtb	r3, r3
 8001a5c:	f003 031c 	and.w	r3, r3, #28
 8001a60:	b25b      	sxtb	r3, r3
 8001a62:	4313      	orrs	r3, r2
 8001a64:	b25b      	sxtb	r3, r3
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr;
 8001a6a:	7fbb      	ldrb	r3, [r7, #30]
 8001a6c:	3320      	adds	r3, #32
 8001a6e:	443b      	add	r3, r7
 8001a70:	7f3a      	ldrb	r2, [r7, #28]
 8001a72:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 8001a76:	7fbb      	ldrb	r3, [r7, #30]
 8001a78:	7efa      	ldrb	r2, [r7, #27]
 8001a7a:	3320      	adds	r3, #32
 8001a7c:	443b      	add	r3, r7
 8001a7e:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 8001a82:	7fbb      	ldrb	r3, [r7, #30]
 8001a84:	3301      	adds	r3, #1
 8001a86:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting humidity oversampling for the sensor */
		if (desired_settings & BME680_OSH_SEL) {
 8001a88:	88fb      	ldrh	r3, [r7, #6]
 8001a8a:	f003 0304 	and.w	r3, r3, #4
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d037      	beq.n	8001b02 <bme680_set_sensor_settings+0x294>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	2205      	movs	r2, #5
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	f000 ffd7 	bl	8002a50 <boundary_check>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	77fb      	strb	r3, [r7, #31]
			reg_addr = BME680_CONF_OS_H_ADDR;
 8001aa6:	2372      	movs	r3, #114	; 0x72
 8001aa8:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 8001aaa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d108      	bne.n	8001ac4 <bme680_set_sensor_settings+0x256>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8001ab2:	f107 011b 	add.w	r1, r7, #27
 8001ab6:	7f38      	ldrb	r0, [r7, #28]
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f7ff fdce 	bl	800165c <bme680_get_regs>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	77fb      	strb	r3, [r7, #31]
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 8001ac4:	7efb      	ldrb	r3, [r7, #27]
 8001ac6:	b25b      	sxtb	r3, r3
 8001ac8:	f023 0307 	bic.w	r3, r3, #7
 8001acc:	b25a      	sxtb	r2, r3
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ad4:	b25b      	sxtb	r3, r3
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	b25b      	sxtb	r3, r3
 8001adc:	4313      	orrs	r3, r2
 8001ade:	b25b      	sxtb	r3, r3
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 8001ae4:	7fbb      	ldrb	r3, [r7, #30]
 8001ae6:	3320      	adds	r3, #32
 8001ae8:	443b      	add	r3, r7
 8001aea:	7f3a      	ldrb	r2, [r7, #28]
 8001aec:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 8001af0:	7fbb      	ldrb	r3, [r7, #30]
 8001af2:	7efa      	ldrb	r2, [r7, #27]
 8001af4:	3320      	adds	r3, #32
 8001af6:	443b      	add	r3, r7
 8001af8:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 8001afc:	7fbb      	ldrb	r3, [r7, #30]
 8001afe:	3301      	adds	r3, #1
 8001b00:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting the runGas and NB conversion settings for the sensor */
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
 8001b02:	88fb      	ldrh	r3, [r7, #6]
 8001b04:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d060      	beq.n	8001bce <bme680_set_sensor_settings+0x360>
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	f103 003e 	add.w	r0, r3, #62	; 0x3e
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	2201      	movs	r2, #1
 8001b16:	2100      	movs	r1, #0
 8001b18:	f000 ff9a 	bl	8002a50 <boundary_check>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	77fb      	strb	r3, [r7, #31]
				BME680_RUN_GAS_ENABLE, dev);
			if (rslt == BME680_OK) {
 8001b20:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d109      	bne.n	8001b3c <bme680_set_sensor_settings+0x2ce>
				/* Validate boundary conditions */
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	220a      	movs	r2, #10
 8001b32:	2100      	movs	r1, #0
 8001b34:	f000 ff8c 	bl	8002a50 <boundary_check>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	77fb      	strb	r3, [r7, #31]
					BME680_NBCONV_MAX, dev);
			}

			reg_addr = BME680_CONF_ODR_RUN_GAS_NBC_ADDR;
 8001b3c:	2371      	movs	r3, #113	; 0x71
 8001b3e:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 8001b40:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d108      	bne.n	8001b5a <bme680_set_sensor_settings+0x2ec>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8001b48:	f107 011b 	add.w	r1, r7, #27
 8001b4c:	7f38      	ldrb	r0, [r7, #28]
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f7ff fd83 	bl	800165c <bme680_get_regs>
 8001b56:	4603      	mov	r3, r0
 8001b58:	77fb      	strb	r3, [r7, #31]

			if (desired_settings & BME680_RUN_GAS_SEL)
 8001b5a:	88fb      	ldrh	r3, [r7, #6]
 8001b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d010      	beq.n	8001b86 <bme680_set_sensor_settings+0x318>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
 8001b64:	7efb      	ldrb	r3, [r7, #27]
 8001b66:	b25b      	sxtb	r3, r3
 8001b68:	f023 0310 	bic.w	r3, r3, #16
 8001b6c:	b25a      	sxtb	r2, r3
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b74:	011b      	lsls	r3, r3, #4
 8001b76:	b25b      	sxtb	r3, r3
 8001b78:	f003 0310 	and.w	r3, r3, #16
 8001b7c:	b25b      	sxtb	r3, r3
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	b25b      	sxtb	r3, r3
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	76fb      	strb	r3, [r7, #27]

			if (desired_settings & BME680_NBCONV_SEL)
 8001b86:	88fb      	ldrh	r3, [r7, #6]
 8001b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d00f      	beq.n	8001bb0 <bme680_set_sensor_settings+0x342>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
 8001b90:	7efb      	ldrb	r3, [r7, #27]
 8001b92:	b25b      	sxtb	r3, r3
 8001b94:	f023 030f 	bic.w	r3, r3, #15
 8001b98:	b25a      	sxtb	r2, r3
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ba0:	b25b      	sxtb	r3, r3
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	b25b      	sxtb	r3, r3
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	b25b      	sxtb	r3, r3
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 8001bb0:	7fbb      	ldrb	r3, [r7, #30]
 8001bb2:	3320      	adds	r3, #32
 8001bb4:	443b      	add	r3, r7
 8001bb6:	7f3a      	ldrb	r2, [r7, #28]
 8001bb8:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 8001bbc:	7fbb      	ldrb	r3, [r7, #30]
 8001bbe:	7efa      	ldrb	r2, [r7, #27]
 8001bc0:	3320      	adds	r3, #32
 8001bc2:	443b      	add	r3, r7
 8001bc4:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 8001bc8:	7fbb      	ldrb	r3, [r7, #30]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	77bb      	strb	r3, [r7, #30]
		}

		if (rslt == BME680_OK)
 8001bce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d109      	bne.n	8001bea <bme680_set_sensor_settings+0x37c>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
 8001bd6:	7fba      	ldrb	r2, [r7, #30]
 8001bd8:	f107 010c 	add.w	r1, r7, #12
 8001bdc:	f107 0014 	add.w	r0, r7, #20
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	f7ff fd7a 	bl	80016da <bme680_set_regs>
 8001be6:	4603      	mov	r3, r0
 8001be8:	77fb      	strb	r3, [r7, #31]

		/* Restore previous intended power mode */
		dev->power_mode = intended_power_mode;
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	7f7a      	ldrb	r2, [r7, #29]
 8001bee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}

	return rslt;
 8001bf2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3720      	adds	r7, #32
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <bme680_set_sensor_mode>:

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bme680_set_sensor_mode(struct bme680_dev *dev)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b084      	sub	sp, #16
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	73bb      	strb	r3, [r7, #14]
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 8001c0a:	2374      	movs	r3, #116	; 0x74
 8001c0c:	733b      	strb	r3, [r7, #12]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 ff58 	bl	8002ac4 <null_ptr_check>
 8001c14:	4603      	mov	r3, r0
 8001c16:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8001c18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d14c      	bne.n	8001cba <bme680_set_sensor_mode+0xbc>
		/* Call repeatedly until in sleep */
		do {
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
 8001c20:	f107 010d 	add.w	r1, r7, #13
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	2074      	movs	r0, #116	; 0x74
 8001c2a:	f7ff fd17 	bl	800165c <bme680_get_regs>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	73fb      	strb	r3, [r7, #15]
			if (rslt == BME680_OK) {
 8001c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d119      	bne.n	8001c6e <bme680_set_sensor_mode+0x70>
				/* Put to sleep before changing mode */
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
 8001c3a:	7b7b      	ldrb	r3, [r7, #13]
 8001c3c:	f003 0303 	and.w	r3, r3, #3
 8001c40:	73bb      	strb	r3, [r7, #14]

				if (pow_mode != BME680_SLEEP_MODE) {
 8001c42:	7bbb      	ldrb	r3, [r7, #14]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d012      	beq.n	8001c6e <bme680_set_sensor_mode+0x70>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
 8001c48:	7b7b      	ldrb	r3, [r7, #13]
 8001c4a:	f023 0303 	bic.w	r3, r3, #3
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	737b      	strb	r3, [r7, #13]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8001c52:	f107 010d 	add.w	r1, r7, #13
 8001c56:	f107 000c 	add.w	r0, r7, #12
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f7ff fd3c 	bl	80016da <bme680_set_regs>
 8001c62:	4603      	mov	r3, r0
 8001c64:	73fb      	strb	r3, [r7, #15]
					dev->delay_ms(BME680_POLL_PERIOD_MS);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c6a:	200a      	movs	r0, #10
 8001c6c:	4798      	blx	r3
				}
			}
		} while (pow_mode != BME680_SLEEP_MODE);
 8001c6e:	7bbb      	ldrb	r3, [r7, #14]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1d5      	bne.n	8001c20 <bme680_set_sensor_mode+0x22>

		/* Already in sleep */
		if (dev->power_mode != BME680_SLEEP_MODE) {
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d01d      	beq.n	8001cba <bme680_set_sensor_mode+0xbc>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
 8001c7e:	7b7b      	ldrb	r3, [r7, #13]
 8001c80:	b25b      	sxtb	r3, r3
 8001c82:	f023 0303 	bic.w	r3, r3, #3
 8001c86:	b25a      	sxtb	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c8e:	b25b      	sxtb	r3, r3
 8001c90:	f003 0303 	and.w	r3, r3, #3
 8001c94:	b25b      	sxtb	r3, r3
 8001c96:	4313      	orrs	r3, r2
 8001c98:	b25b      	sxtb	r3, r3
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	737b      	strb	r3, [r7, #13]
			if (rslt == BME680_OK)
 8001c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d109      	bne.n	8001cba <bme680_set_sensor_mode+0xbc>
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8001ca6:	f107 010d 	add.w	r1, r7, #13
 8001caa:	f107 000c 	add.w	r0, r7, #12
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	f7ff fd12 	bl	80016da <bme680_set_regs>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 8001cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
	...

08001cc8 <bme680_get_profile_dur>:

/*!
 * @brief This API is used to get the profile duration of the sensor.
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b087      	sub	sp, #28
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 8001cd2:	4a2c      	ldr	r2, [pc, #176]	; (8001d84 <bme680_get_profile_dur+0xbc>)
 8001cd4:	f107 0308 	add.w	r3, r7, #8
 8001cd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cdc:	6018      	str	r0, [r3, #0]
 8001cde:	3304      	adds	r3, #4
 8001ce0:	8019      	strh	r1, [r3, #0]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ce8:	3318      	adds	r3, #24
 8001cea:	443b      	add	r3, r7
 8001cec:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001cf0:	617b      	str	r3, [r7, #20]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001cf8:	3318      	adds	r3, #24
 8001cfa:	443b      	add	r3, r7
 8001cfc:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001d00:	461a      	mov	r2, r3
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	4413      	add	r3, r2
 8001d06:	617b      	str	r3, [r7, #20]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d0e:	3318      	adds	r3, #24
 8001d10:	443b      	add	r3, r7
 8001d12:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001d16:	461a      	mov	r2, r3
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	617b      	str	r3, [r7, #20]

	/* TPH measurement duration */
	tph_dur = meas_cycles * UINT32_C(1963);
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	f240 72ab 	movw	r2, #1963	; 0x7ab
 8001d24:	fb02 f303 	mul.w	r3, r2, r3
 8001d28:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(477 * 4); /* TPH switching duration */
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	f203 7374 	addw	r3, r3, #1908	; 0x774
 8001d30:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(477 * 5); /* Gas measurement duration */
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	f603 1351 	addw	r3, r3, #2385	; 0x951
 8001d38:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001d40:	613b      	str	r3, [r7, #16]
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	4a10      	ldr	r2, [pc, #64]	; (8001d88 <bme680_get_profile_dur+0xc0>)
 8001d46:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4a:	099b      	lsrs	r3, r3, #6
 8001d4c:	613b      	str	r3, [r7, #16]

	tph_dur += UINT32_C(1); /* Wake up duration of 1ms */
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	3301      	adds	r3, #1
 8001d52:	613b      	str	r3, [r7, #16]

	*duration = (uint16_t) tph_dur;
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	801a      	strh	r2, [r3, #0]

	/* Get the gas duration only when the run gas is enabled */
	if (dev->gas_sett.run_gas) {
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d008      	beq.n	8001d78 <bme680_get_profile_dur+0xb0>
		/* The remaining time should be used for heating */
		*duration += dev->gas_sett.heatr_dur;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	881a      	ldrh	r2, [r3, #0]
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8001d70:	4413      	add	r3, r2
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	801a      	strh	r2, [r3, #0]
	}
}
 8001d78:	bf00      	nop
 8001d7a:	371c      	adds	r7, #28
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bc80      	pop	{r7}
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	0800d290 	.word	0x0800d290
 8001d88:	10624dd3 	.word	0x10624dd3

08001d8c <bme680_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme680_data
 * structure instance passed by the user.
 */
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001d96:	6838      	ldr	r0, [r7, #0]
 8001d98:	f000 fe94 	bl	8002ac4 <null_ptr_check>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8001da0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d117      	bne.n	8001dd8 <bme680_get_sensor_data+0x4c>
		/* Reading the sensor data in forced mode only */
		rslt = read_field_data(data, dev);
 8001da8:	6839      	ldr	r1, [r7, #0]
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 fd02 	bl	80027b4 <read_field_data>
 8001db0:	4603      	mov	r3, r0
 8001db2:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME680_OK) {
 8001db4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d10d      	bne.n	8001dd8 <bme680_get_sensor_data+0x4c>
			if (data->status & BME680_NEW_DATA_MSK)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	b25b      	sxtb	r3, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	da04      	bge.n	8001dd0 <bme680_get_sensor_data+0x44>
				dev->new_fields = 1;
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001dce:	e003      	b.n	8001dd8 <bme680_get_sensor_data+0x4c>
			else
				dev->new_fields = 0;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		}
	}

	return rslt;
 8001dd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <get_calib_data>:

/*!
 * @brief This internal API is used to read the calibrated data from the sensor.
 */
static int8_t get_calib_data(struct bme680_dev *dev)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08e      	sub	sp, #56	; 0x38
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
 8001dec:	2300      	movs	r3, #0
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	f107 0310 	add.w	r3, r7, #16
 8001df4:	2225      	movs	r2, #37	; 0x25
 8001df6:	2100      	movs	r1, #0
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f006 fe33 	bl	8008a64 <memset>
	uint8_t temp_var = 0; /* Temporary variable */
 8001dfe:	2300      	movs	r3, #0
 8001e00:	72fb      	strb	r3, [r7, #11]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 fe5e 	bl	8002ac4 <null_ptr_check>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (rslt == BME680_OK) {
 8001e0e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f040 810c 	bne.w	8002030 <get_calib_data+0x24c>
		rslt = bme680_get_regs(BME680_COEFF_ADDR1, coeff_array, BME680_COEFF_ADDR1_LEN, dev);
 8001e18:	f107 010c 	add.w	r1, r7, #12
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2219      	movs	r2, #25
 8001e20:	2089      	movs	r0, #137	; 0x89
 8001e22:	f7ff fc1b 	bl	800165c <bme680_get_regs>
 8001e26:	4603      	mov	r3, r0
 8001e28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		/* Append the second half in the same array */
		if (rslt == BME680_OK)
 8001e2c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d10b      	bne.n	8001e4c <get_calib_data+0x68>
			rslt = bme680_get_regs(BME680_COEFF_ADDR2, &coeff_array[BME680_COEFF_ADDR1_LEN]
 8001e34:	f107 030c 	add.w	r3, r7, #12
 8001e38:	f103 0119 	add.w	r1, r3, #25
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2210      	movs	r2, #16
 8001e40:	20e1      	movs	r0, #225	; 0xe1
 8001e42:	f7ff fc0b 	bl	800165c <bme680_get_regs>
 8001e46:	4603      	mov	r3, r0
 8001e48:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			, BME680_COEFF_ADDR2_LEN, dev);

		/* Temperature related coefficients */
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
 8001e4c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001e50:	021b      	lsls	r3, r3, #8
 8001e52:	b21a      	sxth	r2, r3
 8001e54:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e58:	b21b      	sxth	r3, r3
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	b21b      	sxth	r3, r3
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	82da      	strh	r2, [r3, #22]
			coeff_array[BME680_T1_LSB_REG]));
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
 8001e64:	7bbb      	ldrb	r3, [r7, #14]
 8001e66:	021b      	lsls	r3, r3, #8
 8001e68:	b21a      	sxth	r2, r3
 8001e6a:	7b7b      	ldrb	r3, [r7, #13]
 8001e6c:	b21b      	sxth	r3, r3
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	b21a      	sxth	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	831a      	strh	r2, [r3, #24]
			coeff_array[BME680_T2_LSB_REG]));
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
 8001e76:	7bfb      	ldrb	r3, [r7, #15]
 8001e78:	b25a      	sxtb	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	769a      	strb	r2, [r3, #26]

		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
 8001e7e:	7cbb      	ldrb	r3, [r7, #18]
 8001e80:	021b      	lsls	r3, r3, #8
 8001e82:	b21a      	sxth	r2, r3
 8001e84:	7c7b      	ldrb	r3, [r7, #17]
 8001e86:	b21b      	sxth	r3, r3
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	b21b      	sxth	r3, r3
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	839a      	strh	r2, [r3, #28]
			coeff_array[BME680_P1_LSB_REG]));
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
 8001e92:	7d3b      	ldrb	r3, [r7, #20]
 8001e94:	021b      	lsls	r3, r3, #8
 8001e96:	b21a      	sxth	r2, r3
 8001e98:	7cfb      	ldrb	r3, [r7, #19]
 8001e9a:	b21b      	sxth	r3, r3
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	b21a      	sxth	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	83da      	strh	r2, [r3, #30]
			coeff_array[BME680_P2_LSB_REG]));
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
 8001ea4:	7d7b      	ldrb	r3, [r7, #21]
 8001ea6:	b25a      	sxtb	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f883 2020 	strb.w	r2, [r3, #32]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
 8001eae:	7e3b      	ldrb	r3, [r7, #24]
 8001eb0:	021b      	lsls	r3, r3, #8
 8001eb2:	b21a      	sxth	r2, r3
 8001eb4:	7dfb      	ldrb	r3, [r7, #23]
 8001eb6:	b21b      	sxth	r3, r3
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	b21a      	sxth	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	845a      	strh	r2, [r3, #34]	; 0x22
			coeff_array[BME680_P4_LSB_REG]));
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
 8001ec0:	7ebb      	ldrb	r3, [r7, #26]
 8001ec2:	021b      	lsls	r3, r3, #8
 8001ec4:	b21a      	sxth	r2, r3
 8001ec6:	7e7b      	ldrb	r3, [r7, #25]
 8001ec8:	b21b      	sxth	r3, r3
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	b21a      	sxth	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	849a      	strh	r2, [r3, #36]	; 0x24
			coeff_array[BME680_P5_LSB_REG]));
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
 8001ed2:	7f3b      	ldrb	r3, [r7, #28]
 8001ed4:	b25a      	sxtb	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
 8001edc:	7efb      	ldrb	r3, [r7, #27]
 8001ede:	b25a      	sxtb	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
 8001ee6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001eea:	021b      	lsls	r3, r3, #8
 8001eec:	b21a      	sxth	r2, r3
 8001eee:	7ffb      	ldrb	r3, [r7, #31]
 8001ef0:	b21b      	sxth	r3, r3
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	b21a      	sxth	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	851a      	strh	r2, [r3, #40]	; 0x28
			coeff_array[BME680_P8_LSB_REG]));
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
 8001efa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001efe:	021b      	lsls	r3, r3, #8
 8001f00:	b21a      	sxth	r2, r3
 8001f02:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001f06:	b21b      	sxth	r3, r3
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	b21a      	sxth	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	855a      	strh	r2, [r3, #42]	; 0x2a
			coeff_array[BME680_P9_LSB_REG]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
 8001f10:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 8001f1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f1e:	011b      	lsls	r3, r3, #4
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
 8001f20:	b21a      	sxth	r2, r3
 8001f22:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f26:	b21b      	sxth	r3, r3
 8001f28:	f003 030f 	and.w	r3, r3, #15
 8001f2c:	b21b      	sxth	r3, r3
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	b21b      	sxth	r3, r3
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	811a      	strh	r2, [r3, #8]
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 8001f38:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001f3c:	011b      	lsls	r3, r3, #4
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
 8001f3e:	b21a      	sxth	r2, r3
 8001f40:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f44:	091b      	lsrs	r3, r3, #4
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	b21b      	sxth	r3, r3
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	b21b      	sxth	r3, r3
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	815a      	strh	r2, [r3, #10]
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
 8001f54:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001f58:	b25a      	sxtb	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	731a      	strb	r2, [r3, #12]
		dev->calib.par_h4 = (int8_t) coeff_array[BME680_H4_REG];
 8001f5e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001f62:	b25a      	sxtb	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	735a      	strb	r2, [r3, #13]
		dev->calib.par_h5 = (int8_t) coeff_array[BME680_H5_REG];
 8001f68:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001f6c:	b25a      	sxtb	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	739a      	strb	r2, [r3, #14]
		dev->calib.par_h6 = (uint8_t) coeff_array[BME680_H6_REG];
 8001f72:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	73da      	strb	r2, [r3, #15]
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];
 8001f7a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f7e:	b25a      	sxtb	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	741a      	strb	r2, [r3, #16]

		/* Gas heater related coefficients */
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
 8001f84:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001f88:	b25a      	sxtb	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	745a      	strb	r2, [r3, #17]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
 8001f8e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001f92:	021b      	lsls	r3, r3, #8
 8001f94:	b21a      	sxth	r2, r3
 8001f96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f9a:	b21b      	sxth	r3, r3
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	b21a      	sxth	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	825a      	strh	r2, [r3, #18]
			coeff_array[BME680_GH2_LSB_REG]));
		dev->calib.par_gh3 = (int8_t) coeff_array[BME680_GH3_REG];
 8001fa4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001fa8:	b25a      	sxtb	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	751a      	strb	r2, [r3, #20]

		/* Other coefficients */
		if (rslt == BME680_OK) {
 8001fae:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d135      	bne.n	8002022 <get_calib_data+0x23e>
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);
 8001fb6:	f107 010b 	add.w	r1, r7, #11
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	2002      	movs	r0, #2
 8001fc0:	f7ff fb4c 	bl	800165c <bme680_get_regs>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
 8001fca:	7afb      	ldrb	r3, [r7, #11]
 8001fcc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	da00      	bge.n	8001fd6 <get_calib_data+0x1f2>
 8001fd4:	330f      	adds	r3, #15
 8001fd6:	111b      	asrs	r3, r3, #4
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			if (rslt == BME680_OK) {
 8001fe0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d11c      	bne.n	8002022 <get_calib_data+0x23e>
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);
 8001fe8:	f107 010b 	add.w	r1, r7, #11
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	2000      	movs	r0, #0
 8001ff2:	f7ff fb33 	bl	800165c <bme680_get_regs>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

				dev->calib.res_heat_val = (int8_t) temp_var;
 8001ffc:	7afb      	ldrb	r3, [r7, #11]
 8001ffe:	b25a      	sxtb	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
				if (rslt == BME680_OK)
 8002006:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800200a:	2b00      	cmp	r3, #0
 800200c:	d109      	bne.n	8002022 <get_calib_data+0x23e>
					rslt = bme680_get_regs(BME680_ADDR_RANGE_SW_ERR_ADDR, &temp_var, 1, dev);
 800200e:	f107 010b 	add.w	r1, r7, #11
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	2004      	movs	r0, #4
 8002018:	f7ff fb20 	bl	800165c <bme680_get_regs>
 800201c:	4603      	mov	r3, r0
 800201e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			}
		}
		dev->calib.range_sw_err = ((int8_t) temp_var & (int8_t) BME680_RSERROR_MSK) / 16;
 8002022:	7afb      	ldrb	r3, [r7, #11]
 8002024:	b25b      	sxtb	r3, r3
 8002026:	111b      	asrs	r3, r3, #4
 8002028:	b25a      	sxtb	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	}

	return rslt;
 8002030:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8002034:	4618      	mov	r0, r3
 8002036:	3738      	adds	r7, #56	; 0x38
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <set_gas_config>:

/*!
 * @brief This internal API is used to set the gas configuration of the sensor.
 */
static int8_t set_gas_config(struct bme680_dev *dev)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 fd3d 	bl	8002ac4 <null_ptr_check>
 800204a:	4603      	mov	r3, r0
 800204c:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 800204e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d132      	bne.n	80020bc <set_gas_config+0x80>

		uint8_t reg_addr[2] = {0};
 8002056:	2300      	movs	r3, #0
 8002058:	81bb      	strh	r3, [r7, #12]
		uint8_t reg_data[2] = {0};
 800205a:	2300      	movs	r3, #0
 800205c:	813b      	strh	r3, [r7, #8]

		if (dev->power_mode == BME680_FORCED_MODE) {
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002064:	2b01      	cmp	r3, #1
 8002066:	d119      	bne.n	800209c <set_gas_config+0x60>
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
 8002068:	235a      	movs	r3, #90	; 0x5a
 800206a:	733b      	strb	r3, [r7, #12]
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	4618      	mov	r0, r3
 8002076:	f000 faff 	bl	8002678 <calc_heater_res>
 800207a:	4603      	mov	r3, r0
 800207c:	723b      	strb	r3, [r7, #8]
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
 800207e:	2364      	movs	r3, #100	; 0x64
 8002080:	737b      	strb	r3, [r7, #13]
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8002088:	4618      	mov	r0, r3
 800208a:	f000 fb6f 	bl	800276c <calc_heater_dur>
 800208e:	4603      	mov	r3, r0
 8002090:	727b      	strb	r3, [r7, #9]
			dev->gas_sett.nb_conv = 0;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800209a:	e001      	b.n	80020a0 <set_gas_config+0x64>
		} else {
			rslt = BME680_W_DEFINE_PWR_MODE;
 800209c:	2301      	movs	r3, #1
 800209e:	73fb      	strb	r3, [r7, #15]
		}
		if (rslt == BME680_OK)
 80020a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d109      	bne.n	80020bc <set_gas_config+0x80>
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 80020a8:	f107 0108 	add.w	r1, r7, #8
 80020ac:	f107 000c 	add.w	r0, r7, #12
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2202      	movs	r2, #2
 80020b4:	f7ff fb11 	bl	80016da <bme680_set_regs>
 80020b8:	4603      	mov	r3, r0
 80020ba:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80020bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3710      	adds	r7, #16
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <calc_temperature>:

/*!
 * @brief This internal API is used to calculate the temperature value.
 */
static int16_t calc_temperature(uint32_t temp_adc, struct bme680_dev *dev)
{
 80020c8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80020cc:	b091      	sub	sp, #68	; 0x44
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	61f8      	str	r0, [r7, #28]
 80020d2:	61b9      	str	r1, [r7, #24]
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	10da      	asrs	r2, r3, #3
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	8adb      	ldrh	r3, [r3, #22]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	17da      	asrs	r2, r3, #31
 80020e2:	603b      	str	r3, [r7, #0]
 80020e4:	607a      	str	r2, [r7, #4]
 80020e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020ea:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80020f4:	b21b      	sxth	r3, r3
 80020f6:	17da      	asrs	r2, r3, #31
 80020f8:	613b      	str	r3, [r7, #16]
 80020fa:	617a      	str	r2, [r7, #20]
 80020fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020fe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002102:	460a      	mov	r2, r1
 8002104:	fb02 f203 	mul.w	r2, r2, r3
 8002108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800210a:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800210e:	4601      	mov	r1, r0
 8002110:	fb01 f303 	mul.w	r3, r1, r3
 8002114:	4413      	add	r3, r2
 8002116:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002118:	6939      	ldr	r1, [r7, #16]
 800211a:	fba2 4501 	umull	r4, r5, r2, r1
 800211e:	442b      	add	r3, r5
 8002120:	461d      	mov	r5, r3
 8002122:	f04f 0200 	mov.w	r2, #0
 8002126:	f04f 0300 	mov.w	r3, #0
 800212a:	0ae2      	lsrs	r2, r4, #11
 800212c:	ea42 5245 	orr.w	r2, r2, r5, lsl #21
 8002130:	12eb      	asrs	r3, r5, #11
 8002132:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 8002136:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800213a:	f04f 0000 	mov.w	r0, #0
 800213e:	f04f 0100 	mov.w	r1, #0
 8002142:	0850      	lsrs	r0, r2, #1
 8002144:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 8002148:	1059      	asrs	r1, r3, #1
 800214a:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800214e:	f04f 0200 	mov.w	r2, #0
 8002152:	f04f 0300 	mov.w	r3, #0
 8002156:	0862      	lsrs	r2, r4, #1
 8002158:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 800215c:	106b      	asrs	r3, r5, #1
 800215e:	fb02 f501 	mul.w	r5, r2, r1
 8002162:	fb00 f403 	mul.w	r4, r0, r3
 8002166:	442c      	add	r4, r5
 8002168:	fba0 ab02 	umull	sl, fp, r0, r2
 800216c:	eb04 030b 	add.w	r3, r4, fp
 8002170:	469b      	mov	fp, r3
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	f04f 0300 	mov.w	r3, #0
 800217a:	ea4f 321a 	mov.w	r2, sl, lsr #12
 800217e:	ea42 520b 	orr.w	r2, r2, fp, lsl #20
 8002182:	ea4f 332b 	mov.w	r3, fp, asr #12
 8002186:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	f993 301a 	ldrsb.w	r3, [r3, #26]
 8002190:	011b      	lsls	r3, r3, #4
 8002192:	17da      	asrs	r2, r3, #31
 8002194:	60bb      	str	r3, [r7, #8]
 8002196:	60fa      	str	r2, [r7, #12]
 8002198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800219a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800219e:	462a      	mov	r2, r5
 80021a0:	fb02 f203 	mul.w	r2, r2, r3
 80021a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a6:	4621      	mov	r1, r4
 80021a8:	fb01 f303 	mul.w	r3, r1, r3
 80021ac:	4413      	add	r3, r2
 80021ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021b0:	4621      	mov	r1, r4
 80021b2:	fba2 8901 	umull	r8, r9, r2, r1
 80021b6:	444b      	add	r3, r9
 80021b8:	4699      	mov	r9, r3
 80021ba:	f04f 0200 	mov.w	r2, #0
 80021be:	f04f 0300 	mov.w	r3, #0
 80021c2:	ea4f 3298 	mov.w	r2, r8, lsr #14
 80021c6:	ea42 4289 	orr.w	r2, r2, r9, lsl #18
 80021ca:	ea4f 33a9 	mov.w	r3, r9, asr #14
 80021ce:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	dev->calib.t_fine = (int32_t) (var2 + var3);
 80021d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d6:	4413      	add	r3, r2
 80021d8:	461a      	mov	r2, r3
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	631a      	str	r2, [r3, #48]	; 0x30
	calc_temp = (int16_t) (((dev->calib.t_fine * 5) + 128) >> 8);
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021e2:	4613      	mov	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4413      	add	r3, r2
 80021e8:	3380      	adds	r3, #128	; 0x80
 80021ea:	121b      	asrs	r3, r3, #8
 80021ec:	84fb      	strh	r3, [r7, #38]	; 0x26

	return calc_temp;
 80021ee:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3744      	adds	r7, #68	; 0x44
 80021f6:	46bd      	mov	sp, r7
 80021f8:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80021fc:	4770      	bx	lr

080021fe <calc_pressure>:

/*!
 * @brief This internal API is used to calculate the pressure value.
 */
static uint32_t calc_pressure(uint32_t pres_adc, const struct bme680_dev *dev)
{
 80021fe:	b480      	push	{r7}
 8002200:	b087      	sub	sp, #28
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
 8002206:	6039      	str	r1, [r7, #0]
	int32_t var1;
	int32_t var2;
	int32_t var3;
	int32_t pressure_comp;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220c:	105b      	asrs	r3, r3, #1
 800220e:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 8002212:	613b      	str	r3, [r7, #16]
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	109b      	asrs	r3, r3, #2
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	1092      	asrs	r2, r2, #2
 800221c:	fb02 f303 	mul.w	r3, r2, r3
 8002220:	12db      	asrs	r3, r3, #11
		(int32_t)dev->calib.par_p6) >> 2;
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	f992 2026 	ldrsb.w	r2, [r2, #38]	; 0x26
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8002228:	fb02 f303 	mul.w	r3, r2, r3
 800222c:	109b      	asrs	r3, r3, #2
 800222e:	60fb      	str	r3, [r7, #12]
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002236:	461a      	mov	r2, r3
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	fb02 f303 	mul.w	r3, r2, r3
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	4413      	add	r3, r2
 8002244:	60fb      	str	r3, [r7, #12]
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	109a      	asrs	r2, r3, #2
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002250:	041b      	lsls	r3, r3, #16
 8002252:	4413      	add	r3, r2
 8002254:	60fb      	str	r3, [r7, #12]
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	109b      	asrs	r3, r3, #2
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	1092      	asrs	r2, r2, #2
 800225e:	fb02 f303 	mul.w	r3, r2, r3
 8002262:	135b      	asrs	r3, r3, #13
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	f992 2020 	ldrsb.w	r2, [r2, #32]
 800226a:	0152      	lsls	r2, r2, #5
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 800226c:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 8002270:	10da      	asrs	r2, r3, #3
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002278:	4619      	mov	r1, r3
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	fb01 f303 	mul.w	r3, r1, r3
 8002280:	105b      	asrs	r3, r3, #1
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8002282:	4413      	add	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
	var1 = var1 >> 18;
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	149b      	asrs	r3, r3, #18
 800228a:	613b      	str	r3, [r7, #16]
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	8b92      	ldrh	r2, [r2, #28]
 8002296:	fb02 f303 	mul.w	r3, r2, r3
 800229a:	13db      	asrs	r3, r3, #15
 800229c:	613b      	str	r3, [r7, #16]
	pressure_comp = 1048576 - pres_adc;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80022a4:	617b      	str	r3, [r7, #20]
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	131b      	asrs	r3, r3, #12
 80022aa:	697a      	ldr	r2, [r7, #20]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	461a      	mov	r2, r3
 80022b0:	f640 4335 	movw	r3, #3125	; 0xc35
 80022b4:	fb02 f303 	mul.w	r3, r2, r3
 80022b8:	617b      	str	r3, [r7, #20]
	if (pressure_comp >= BME680_MAX_OVERFLOW_VAL)
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022c0:	db06      	blt.n	80022d0 <calc_pressure+0xd2>
		pressure_comp = ((pressure_comp / var1) << 1);
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	617b      	str	r3, [r7, #20]
 80022ce:	e005      	b.n	80022dc <calc_pressure+0xde>
	else
		pressure_comp = ((pressure_comp << 1) / var1);
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	005a      	lsls	r2, r3, #1
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80022da:	617b      	str	r3, [r7, #20]
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80022e2:	4619      	mov	r1, r3
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	10db      	asrs	r3, r3, #3
		(pressure_comp >> 3)) >> 13)) >> 12;
 80022e8:	697a      	ldr	r2, [r7, #20]
 80022ea:	10d2      	asrs	r2, r2, #3
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 80022ec:	fb02 f303 	mul.w	r3, r2, r3
		(pressure_comp >> 3)) >> 13)) >> 12;
 80022f0:	135b      	asrs	r3, r3, #13
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 80022f2:	fb01 f303 	mul.w	r3, r1, r3
 80022f6:	131b      	asrs	r3, r3, #12
 80022f8:	613b      	str	r3, [r7, #16]
	var2 = ((int32_t)(pressure_comp >> 2) *
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	109b      	asrs	r3, r3, #2
		(int32_t)dev->calib.par_p8) >> 13;
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	f9b2 2028 	ldrsh.w	r2, [r2, #40]	; 0x28
	var2 = ((int32_t)(pressure_comp >> 2) *
 8002304:	fb02 f303 	mul.w	r3, r2, r3
 8002308:	135b      	asrs	r3, r3, #13
 800230a:	60fb      	str	r3, [r7, #12]
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	121b      	asrs	r3, r3, #8
 8002310:	697a      	ldr	r2, [r7, #20]
 8002312:	1212      	asrs	r2, r2, #8
 8002314:	fb02 f303 	mul.w	r3, r2, r3
		(int32_t)(pressure_comp >> 8) *
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	1212      	asrs	r2, r2, #8
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 800231c:	fb02 f303 	mul.w	r3, r2, r3
		(int32_t)dev->calib.par_p10) >> 17;
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
		(int32_t)(pressure_comp >> 8) *
 8002326:	fb02 f303 	mul.w	r3, r2, r3
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 800232a:	145b      	asrs	r3, r3, #17
 800232c:	60bb      	str	r3, [r7, #8]

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	441a      	add	r2, r3
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	441a      	add	r2, r3
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	f993 3027 	ldrsb.w	r3, [r3, #39]	; 0x27
 800233e:	01db      	lsls	r3, r3, #7
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8002340:	4413      	add	r3, r2
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 8002342:	111b      	asrs	r3, r3, #4
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8002344:	697a      	ldr	r2, [r7, #20]
 8002346:	4413      	add	r3, r2
 8002348:	617b      	str	r3, [r7, #20]

	return (uint32_t)pressure_comp;
 800234a:	697b      	ldr	r3, [r7, #20]

}
 800234c:	4618      	mov	r0, r3
 800234e:	371c      	adds	r7, #28
 8002350:	46bd      	mov	sp, r7
 8002352:	bc80      	pop	{r7}
 8002354:	4770      	bx	lr
	...

08002358 <calc_humidity>:

/*!
 * @brief This internal API is used to calculate the humidity value.
 */
static uint32_t calc_humidity(uint16_t hum_adc, const struct bme680_dev *dev)
{
 8002358:	b480      	push	{r7}
 800235a:	b08b      	sub	sp, #44	; 0x2c
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	6039      	str	r1, [r7, #0]
 8002362:	80fb      	strh	r3, [r7, #6]
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002368:	4613      	mov	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4413      	add	r3, r2
 800236e:	3380      	adds	r3, #128	; 0x80
 8002370:	121b      	asrs	r3, r3, #8
 8002372:	623b      	str	r3, [r7, #32]
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 8002374:	88fa      	ldrh	r2, [r7, #6]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	891b      	ldrh	r3, [r3, #8]
 800237a:	011b      	lsls	r3, r3, #4
 800237c:	1ad2      	subs	r2, r2, r3
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002384:	4619      	mov	r1, r3
 8002386:	6a3b      	ldr	r3, [r7, #32]
 8002388:	fb01 f303 	mul.w	r3, r1, r3
 800238c:	493d      	ldr	r1, [pc, #244]	; (8002484 <calc_humidity+0x12c>)
 800238e:	fb81 0103 	smull	r0, r1, r1, r3
 8002392:	1149      	asrs	r1, r1, #5
 8002394:	17db      	asrs	r3, r3, #31
 8002396:	1acb      	subs	r3, r1, r3
 8002398:	105b      	asrs	r3, r3, #1
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	61fb      	str	r3, [r7, #28]
	var2 = ((int32_t) dev->calib.par_h2
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	895b      	ldrh	r3, [r3, #10]
 80023a2:	4618      	mov	r0, r3
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	f993 300d 	ldrsb.w	r3, [r3, #13]
 80023aa:	461a      	mov	r2, r3
 80023ac:	6a3b      	ldr	r3, [r7, #32]
 80023ae:	fb02 f303 	mul.w	r3, r2, r3
 80023b2:	4a34      	ldr	r2, [pc, #208]	; (8002484 <calc_humidity+0x12c>)
 80023b4:	fb82 1203 	smull	r1, r2, r2, r3
 80023b8:	1152      	asrs	r2, r2, #5
 80023ba:	17db      	asrs	r3, r3, #31
 80023bc:	1ad2      	subs	r2, r2, r3
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	f993 300e 	ldrsb.w	r3, [r3, #14]
 80023c4:	4619      	mov	r1, r3
 80023c6:	6a3b      	ldr	r3, [r7, #32]
 80023c8:	fb01 f303 	mul.w	r3, r1, r3
 80023cc:	492d      	ldr	r1, [pc, #180]	; (8002484 <calc_humidity+0x12c>)
 80023ce:	fb81 c103 	smull	ip, r1, r1, r3
 80023d2:	1149      	asrs	r1, r1, #5
 80023d4:	17db      	asrs	r3, r3, #31
 80023d6:	1acb      	subs	r3, r1, r3
 80023d8:	6a39      	ldr	r1, [r7, #32]
 80023da:	fb01 f303 	mul.w	r3, r1, r3
 80023de:	119b      	asrs	r3, r3, #6
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 80023e0:	4928      	ldr	r1, [pc, #160]	; (8002484 <calc_humidity+0x12c>)
 80023e2:	fb81 c103 	smull	ip, r1, r1, r3
 80023e6:	1149      	asrs	r1, r1, #5
 80023e8:	17db      	asrs	r3, r3, #31
 80023ea:	1acb      	subs	r3, r1, r3
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 80023ec:	4413      	add	r3, r2
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 80023ee:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 80023f2:	fb00 f303 	mul.w	r3, r0, r3
	var2 = ((int32_t) dev->calib.par_h2
 80023f6:	129b      	asrs	r3, r3, #10
 80023f8:	61bb      	str	r3, [r7, #24]
	var3 = var1 * var2;
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	fb02 f303 	mul.w	r3, r2, r3
 8002402:	617b      	str	r3, [r7, #20]
	var4 = (int32_t) dev->calib.par_h6 << 7;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	7bdb      	ldrb	r3, [r3, #15]
 8002408:	01db      	lsls	r3, r3, #7
 800240a:	613b      	str	r3, [r7, #16]
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8002412:	461a      	mov	r2, r3
 8002414:	6a3b      	ldr	r3, [r7, #32]
 8002416:	fb02 f303 	mul.w	r3, r2, r3
 800241a:	4a1a      	ldr	r2, [pc, #104]	; (8002484 <calc_humidity+0x12c>)
 800241c:	fb82 1203 	smull	r1, r2, r2, r3
 8002420:	1152      	asrs	r2, r2, #5
 8002422:	17db      	asrs	r3, r3, #31
 8002424:	1ad2      	subs	r2, r2, r3
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	4413      	add	r3, r2
 800242a:	111b      	asrs	r3, r3, #4
 800242c:	613b      	str	r3, [r7, #16]
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	139b      	asrs	r3, r3, #14
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	1392      	asrs	r2, r2, #14
 8002436:	fb02 f303 	mul.w	r3, r2, r3
 800243a:	129b      	asrs	r3, r3, #10
 800243c:	60fb      	str	r3, [r7, #12]
	var6 = (var4 * var5) >> 1;
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	fb02 f303 	mul.w	r3, r2, r3
 8002446:	105b      	asrs	r3, r3, #1
 8002448:	60bb      	str	r3, [r7, #8]
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	4413      	add	r3, r2
 8002450:	129b      	asrs	r3, r3, #10
 8002452:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002456:	fb02 f303 	mul.w	r3, r2, r3
 800245a:	131b      	asrs	r3, r3, #12
 800245c:	627b      	str	r3, [r7, #36]	; 0x24

	if (calc_hum > 100000) /* Cap at 100%rH */
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	4a09      	ldr	r2, [pc, #36]	; (8002488 <calc_humidity+0x130>)
 8002462:	4293      	cmp	r3, r2
 8002464:	dd02      	ble.n	800246c <calc_humidity+0x114>
		calc_hum = 100000;
 8002466:	4b08      	ldr	r3, [pc, #32]	; (8002488 <calc_humidity+0x130>)
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
 800246a:	e004      	b.n	8002476 <calc_humidity+0x11e>
	else if (calc_hum < 0)
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	2b00      	cmp	r3, #0
 8002470:	da01      	bge.n	8002476 <calc_humidity+0x11e>
		calc_hum = 0;
 8002472:	2300      	movs	r3, #0
 8002474:	627b      	str	r3, [r7, #36]	; 0x24

	return (uint32_t) calc_hum;
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002478:	4618      	mov	r0, r3
 800247a:	372c      	adds	r7, #44	; 0x2c
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	51eb851f 	.word	0x51eb851f
 8002488:	000186a0 	.word	0x000186a0

0800248c <calc_gas_resistance>:

/*!
 * @brief This internal API is used to calculate the Gas Resistance value.
 */
static uint32_t calc_gas_resistance(uint16_t gas_res_adc, uint8_t gas_range, const struct bme680_dev *dev)
{
 800248c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002490:	b0bd      	sub	sp, #244	; 0xf4
 8002492:	af00      	add	r7, sp, #0
 8002494:	4603      	mov	r3, r0
 8002496:	64ba      	str	r2, [r7, #72]	; 0x48
 8002498:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800249c:	460b      	mov	r3, r1
 800249e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;
	/**Look up table 1 for the possible gas range values */
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
 80024a2:	4b73      	ldr	r3, [pc, #460]	; (8002670 <calc_gas_resistance+0x1e4>)
 80024a4:	f107 0594 	add.w	r5, r7, #148	; 0x94
 80024a8:	461c      	mov	r4, r3
 80024aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024b6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80024ba:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2130303777),
		UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2143188679), UINT32_C(2136746228),
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2147483647) };
	/**Look up table 2 for the possible gas range values */
	uint32_t lookupTable2[16] = { UINT32_C(4096000000), UINT32_C(2048000000), UINT32_C(1024000000), UINT32_C(512000000),
 80024be:	4b6d      	ldr	r3, [pc, #436]	; (8002674 <calc_gas_resistance+0x1e8>)
 80024c0:	f107 0554 	add.w	r5, r7, #84	; 0x54
 80024c4:	461c      	mov	r4, r3
 80024c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024d2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80024d6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		UINT32_C(255744255), UINT32_C(127110228), UINT32_C(64000000), UINT32_C(32258064), UINT32_C(16016016),
		UINT32_C(8000000), UINT32_C(4000000), UINT32_C(2000000), UINT32_C(1000000), UINT32_C(500000),
		UINT32_C(250000), UINT32_C(125000) };

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 80024da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024dc:	f993 3036 	ldrsb.w	r3, [r3, #54]	; 0x36
 80024e0:	b25b      	sxtb	r3, r3
 80024e2:	17da      	asrs	r2, r3, #31
 80024e4:	643b      	str	r3, [r7, #64]	; 0x40
 80024e6:	647a      	str	r2, [r7, #68]	; 0x44
 80024e8:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80024ec:	4622      	mov	r2, r4
 80024ee:	462b      	mov	r3, r5
 80024f0:	f04f 0000 	mov.w	r0, #0
 80024f4:	f04f 0100 	mov.w	r1, #0
 80024f8:	0099      	lsls	r1, r3, #2
 80024fa:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80024fe:	0090      	lsls	r0, r2, #2
 8002500:	4602      	mov	r2, r0
 8002502:	460b      	mov	r3, r1
 8002504:	4621      	mov	r1, r4
 8002506:	1851      	adds	r1, r2, r1
 8002508:	63b9      	str	r1, [r7, #56]	; 0x38
 800250a:	4629      	mov	r1, r5
 800250c:	eb43 0101 	adc.w	r1, r3, r1
 8002510:	63f9      	str	r1, [r7, #60]	; 0x3c
 8002512:	f240 533c 	movw	r3, #1340	; 0x53c
 8002516:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800251a:	4602      	mov	r2, r0
 800251c:	18d3      	adds	r3, r2, r3
 800251e:	633b      	str	r3, [r7, #48]	; 0x30
 8002520:	460b      	mov	r3, r1
 8002522:	f143 0300 	adc.w	r3, r3, #0
 8002526:	637b      	str	r3, [r7, #52]	; 0x34
		((int64_t) lookupTable1[gas_range])) >> 16;
 8002528:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	33a8      	adds	r3, #168	; 0xa8
 8002530:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002534:	4413      	add	r3, r2
 8002536:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 800253a:	2200      	movs	r2, #0
 800253c:	62bb      	str	r3, [r7, #40]	; 0x28
 800253e:	62fa      	str	r2, [r7, #44]	; 0x2c
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8002540:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002544:	4622      	mov	r2, r4
 8002546:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 800254a:	4629      	mov	r1, r5
 800254c:	fb01 f202 	mul.w	r2, r1, r2
 8002550:	46b4      	mov	ip, r6
 8002552:	4618      	mov	r0, r3
 8002554:	4621      	mov	r1, r4
 8002556:	4603      	mov	r3, r0
 8002558:	fb03 f30c 	mul.w	r3, r3, ip
 800255c:	4413      	add	r3, r2
 800255e:	4602      	mov	r2, r0
 8002560:	4629      	mov	r1, r5
 8002562:	fba2 8901 	umull	r8, r9, r2, r1
 8002566:	444b      	add	r3, r9
 8002568:	4699      	mov	r9, r3
 800256a:	f04f 0200 	mov.w	r2, #0
 800256e:	f04f 0300 	mov.w	r3, #0
 8002572:	ea4f 4218 	mov.w	r2, r8, lsr #16
 8002576:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 800257a:	ea4f 4329 	mov.w	r3, r9, asr #16
 800257e:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8002582:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002586:	2200      	movs	r2, #0
 8002588:	623b      	str	r3, [r7, #32]
 800258a:	627a      	str	r2, [r7, #36]	; 0x24
 800258c:	f04f 0200 	mov.w	r2, #0
 8002590:	f04f 0300 	mov.w	r3, #0
 8002594:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002598:	4629      	mov	r1, r5
 800259a:	03cb      	lsls	r3, r1, #15
 800259c:	4620      	mov	r0, r4
 800259e:	4629      	mov	r1, r5
 80025a0:	4604      	mov	r4, r0
 80025a2:	ea43 4354 	orr.w	r3, r3, r4, lsr #17
 80025a6:	4601      	mov	r1, r0
 80025a8:	03ca      	lsls	r2, r1, #15
 80025aa:	f112 417f 	adds.w	r1, r2, #4278190080	; 0xff000000
 80025ae:	61b9      	str	r1, [r7, #24]
 80025b0:	f143 33ff 	adc.w	r3, r3, #4294967295
 80025b4:	61fb      	str	r3, [r7, #28]
 80025b6:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80025ba:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80025be:	4621      	mov	r1, r4
 80025c0:	1889      	adds	r1, r1, r2
 80025c2:	6139      	str	r1, [r7, #16]
 80025c4:	4629      	mov	r1, r5
 80025c6:	eb43 0101 	adc.w	r1, r3, r1
 80025ca:	6179      	str	r1, [r7, #20]
 80025cc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80025d0:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 80025d4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	33a8      	adds	r3, #168	; 0xa8
 80025dc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80025e0:	4413      	add	r3, r2
 80025e2:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 80025e6:	2200      	movs	r2, #0
 80025e8:	60bb      	str	r3, [r7, #8]
 80025ea:	60fa      	str	r2, [r7, #12]
 80025ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80025f0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80025f4:	462a      	mov	r2, r5
 80025f6:	fb02 f203 	mul.w	r2, r2, r3
 80025fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80025fe:	4621      	mov	r1, r4
 8002600:	fb01 f303 	mul.w	r3, r1, r3
 8002604:	4413      	add	r3, r2
 8002606:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800260a:	4621      	mov	r1, r4
 800260c:	fba2 ab01 	umull	sl, fp, r2, r1
 8002610:	445b      	add	r3, fp
 8002612:	469b      	mov	fp, r3
 8002614:	f04f 0200 	mov.w	r2, #0
 8002618:	f04f 0300 	mov.w	r3, #0
 800261c:	ea4f 225a 	mov.w	r2, sl, lsr #9
 8002620:	ea42 52cb 	orr.w	r2, r2, fp, lsl #23
 8002624:	ea4f 236b 	mov.w	r3, fp, asr #9
 8002628:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
 800262c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002630:	f04f 0200 	mov.w	r2, #0
 8002634:	f04f 0300 	mov.w	r3, #0
 8002638:	0842      	lsrs	r2, r0, #1
 800263a:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800263e:	104b      	asrs	r3, r1, #1
 8002640:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8002644:	1814      	adds	r4, r2, r0
 8002646:	603c      	str	r4, [r7, #0]
 8002648:	414b      	adcs	r3, r1
 800264a:	607b      	str	r3, [r7, #4]
 800264c:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8002650:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002654:	f7fe fdc4 	bl	80011e0 <__aeabi_ldivmod>
 8002658:	4602      	mov	r2, r0
 800265a:	460b      	mov	r3, r1
 800265c:	4613      	mov	r3, r2
 800265e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

	return calc_gas_res;
 8002662:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
}
 8002666:	4618      	mov	r0, r3
 8002668:	37f4      	adds	r7, #244	; 0xf4
 800266a:	46bd      	mov	sp, r7
 800266c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002670:	0800d298 	.word	0x0800d298
 8002674:	0800d2d8 	.word	0x0800d2d8

08002678 <calc_heater_res>:

/*!
 * @brief This internal API is used to calculate the Heat Resistance value.
 */
static uint8_t calc_heater_res(uint16_t temp, const struct bme680_dev *dev)
{
 8002678:	b480      	push	{r7}
 800267a:	b08b      	sub	sp, #44	; 0x2c
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	6039      	str	r1, [r7, #0]
 8002682:	80fb      	strh	r3, [r7, #6]
	int32_t var3;
	int32_t var4;
	int32_t var5;
	int32_t heatr_res_x100;

	if (temp > 400) /* Cap temperature */
 8002684:	88fb      	ldrh	r3, [r7, #6]
 8002686:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800268a:	d902      	bls.n	8002692 <calc_heater_res+0x1a>
		temp = 400;
 800268c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002690:	80fb      	strh	r3, [r7, #6]

	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002698:	461a      	mov	r2, r3
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80026a0:	fb02 f303 	mul.w	r3, r2, r3
 80026a4:	4a2e      	ldr	r2, [pc, #184]	; (8002760 <calc_heater_res+0xe8>)
 80026a6:	fb82 1203 	smull	r1, r2, r2, r3
 80026aa:	1192      	asrs	r2, r2, #6
 80026ac:	17db      	asrs	r3, r3, #31
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	021b      	lsls	r3, r3, #8
 80026b2:	627b      	str	r3, [r7, #36]	; 0x24
	var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	f993 3011 	ldrsb.w	r3, [r3, #17]
 80026ba:	f503 7244 	add.w	r2, r3, #784	; 0x310
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80026c4:	f503 3316 	add.w	r3, r3, #153600	; 0x25800
 80026c8:	f203 1399 	addw	r3, r3, #409	; 0x199
 80026cc:	88f9      	ldrh	r1, [r7, #6]
 80026ce:	fb01 f303 	mul.w	r3, r1, r3
 80026d2:	4924      	ldr	r1, [pc, #144]	; (8002764 <calc_heater_res+0xec>)
 80026d4:	fb81 0103 	smull	r0, r1, r1, r3
 80026d8:	10c9      	asrs	r1, r1, #3
 80026da:	17db      	asrs	r3, r3, #31
 80026dc:	1acb      	subs	r3, r1, r3
 80026de:	f503 1348 	add.w	r3, r3, #3276800	; 0x320000
 80026e2:	4920      	ldr	r1, [pc, #128]	; (8002764 <calc_heater_res+0xec>)
 80026e4:	fb81 0103 	smull	r0, r1, r1, r3
 80026e8:	1089      	asrs	r1, r1, #2
 80026ea:	17db      	asrs	r3, r3, #31
 80026ec:	1acb      	subs	r3, r1, r3
 80026ee:	fb02 f303 	mul.w	r3, r2, r3
 80026f2:	623b      	str	r3, [r7, #32]
	var3 = var1 + (var2 / 2);
 80026f4:	6a3b      	ldr	r3, [r7, #32]
 80026f6:	0fda      	lsrs	r2, r3, #31
 80026f8:	4413      	add	r3, r2
 80026fa:	105b      	asrs	r3, r3, #1
 80026fc:	461a      	mov	r2, r3
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	4413      	add	r3, r2
 8002702:	61fb      	str	r3, [r7, #28]
	var4 = (var3 / (dev->calib.res_heat_range + 4));
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800270a:	3304      	adds	r3, #4
 800270c:	69fa      	ldr	r2, [r7, #28]
 800270e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002712:	61bb      	str	r3, [r7, #24]
	var5 = (131 * dev->calib.res_heat_val) + 65536;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	f993 3035 	ldrsb.w	r3, [r3, #53]	; 0x35
 800271a:	461a      	mov	r2, r3
 800271c:	4613      	mov	r3, r2
 800271e:	019b      	lsls	r3, r3, #6
 8002720:	4413      	add	r3, r2
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	4413      	add	r3, r2
 8002726:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800272a:	617b      	str	r3, [r7, #20]
	heatr_res_x100 = (int32_t) (((var4 / var5) - 250) * 34);
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	fb92 f3f3 	sdiv	r3, r2, r3
 8002734:	f1a3 02fa 	sub.w	r2, r3, #250	; 0xfa
 8002738:	4613      	mov	r3, r2
 800273a:	011b      	lsls	r3, r3, #4
 800273c:	4413      	add	r3, r2
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	613b      	str	r3, [r7, #16]
	heatr_res = (uint8_t) ((heatr_res_x100 + 50) / 100);
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	3332      	adds	r3, #50	; 0x32
 8002746:	4a08      	ldr	r2, [pc, #32]	; (8002768 <calc_heater_res+0xf0>)
 8002748:	fb82 1203 	smull	r1, r2, r2, r3
 800274c:	1152      	asrs	r2, r2, #5
 800274e:	17db      	asrs	r3, r3, #31
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	73fb      	strb	r3, [r7, #15]

	return heatr_res;
 8002754:	7bfb      	ldrb	r3, [r7, #15]
}
 8002756:	4618      	mov	r0, r3
 8002758:	372c      	adds	r7, #44	; 0x2c
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr
 8002760:	10624dd3 	.word	0x10624dd3
 8002764:	66666667 	.word	0x66666667
 8002768:	51eb851f 	.word	0x51eb851f

0800276c <calc_heater_dur>:

/*!
 * @brief This internal API is used to calculate the Heat duration value.
 */
static uint8_t calc_heater_dur(uint16_t dur)
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	4603      	mov	r3, r0
 8002774:	80fb      	strh	r3, [r7, #6]
	uint8_t factor = 0;
 8002776:	2300      	movs	r3, #0
 8002778:	73fb      	strb	r3, [r7, #15]
	uint8_t durval;

	if (dur >= 0xfc0) {
 800277a:	88fb      	ldrh	r3, [r7, #6]
 800277c:	f5b3 6f7c 	cmp.w	r3, #4032	; 0xfc0
 8002780:	d308      	bcc.n	8002794 <calc_heater_dur+0x28>
		durval = 0xff; /* Max duration*/
 8002782:	23ff      	movs	r3, #255	; 0xff
 8002784:	73bb      	strb	r3, [r7, #14]
 8002786:	e00f      	b.n	80027a8 <calc_heater_dur+0x3c>
	} else {
		while (dur > 0x3F) {
			dur = dur / 4;
 8002788:	88fb      	ldrh	r3, [r7, #6]
 800278a:	089b      	lsrs	r3, r3, #2
 800278c:	80fb      	strh	r3, [r7, #6]
			factor += 1;
 800278e:	7bfb      	ldrb	r3, [r7, #15]
 8002790:	3301      	adds	r3, #1
 8002792:	73fb      	strb	r3, [r7, #15]
		while (dur > 0x3F) {
 8002794:	88fb      	ldrh	r3, [r7, #6]
 8002796:	2b3f      	cmp	r3, #63	; 0x3f
 8002798:	d8f6      	bhi.n	8002788 <calc_heater_dur+0x1c>
		}
		durval = (uint8_t) (dur + (factor * 64));
 800279a:	88fb      	ldrh	r3, [r7, #6]
 800279c:	b2da      	uxtb	r2, r3
 800279e:	7bfb      	ldrb	r3, [r7, #15]
 80027a0:	019b      	lsls	r3, r3, #6
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	4413      	add	r3, r2
 80027a6:	73bb      	strb	r3, [r7, #14]
	}

	return durval;
 80027a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3714      	adds	r7, #20
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr

080027b4 <read_field_data>:

/*!
 * @brief This internal API is used to calculate the field data of sensor.
 */
static int8_t read_field_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08a      	sub	sp, #40	; 0x28
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
 80027be:	2300      	movs	r3, #0
 80027c0:	60bb      	str	r3, [r7, #8]
 80027c2:	f107 030c 	add.w	r3, r7, #12
 80027c6:	2200      	movs	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]
 80027ca:	605a      	str	r2, [r3, #4]
 80027cc:	f8c3 2007 	str.w	r2, [r3, #7]
	uint8_t gas_range;
	uint32_t adc_temp;
	uint32_t adc_pres;
	uint16_t adc_hum;
	uint16_t adc_gas_res;
	uint8_t tries = 10;
 80027d0:	230a      	movs	r3, #10
 80027d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80027d6:	6838      	ldr	r0, [r7, #0]
 80027d8:	f000 f974 	bl	8002ac4 <null_ptr_check>
 80027dc:	4603      	mov	r3, r0
 80027de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	do {
		if (rslt == BME680_OK) {
 80027e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f040 8087 	bne.w	80028fa <read_field_data+0x146>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 80027ec:	f107 0108 	add.w	r1, r7, #8
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	220f      	movs	r2, #15
 80027f4:	201d      	movs	r0, #29
 80027f6:	f7fe ff31 	bl	800165c <bme680_get_regs>
 80027fa:	4603      	mov	r3, r0
 80027fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
 8002800:	7a3b      	ldrb	r3, [r7, #8]
 8002802:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002806:	b2da      	uxtb	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	701a      	strb	r2, [r3, #0]
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 800280c:	7a3b      	ldrb	r3, [r7, #8]
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	b2da      	uxtb	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	705a      	strb	r2, [r3, #1]
			data->meas_index = buff[1];
 8002818:	7a7a      	ldrb	r2, [r7, #9]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	709a      	strb	r2, [r3, #2]

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 800281e:	7abb      	ldrb	r3, [r7, #10]
 8002820:	031a      	lsls	r2, r3, #12
 8002822:	7afb      	ldrb	r3, [r7, #11]
 8002824:	011b      	lsls	r3, r3, #4
 8002826:	4313      	orrs	r3, r2
				| ((uint32_t) buff[4] / 16));
 8002828:	7b3a      	ldrb	r2, [r7, #12]
 800282a:	0912      	lsrs	r2, r2, #4
 800282c:	b2d2      	uxtb	r2, r2
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 800282e:	4313      	orrs	r3, r2
 8002830:	623b      	str	r3, [r7, #32]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 8002832:	7b7b      	ldrb	r3, [r7, #13]
 8002834:	031a      	lsls	r2, r3, #12
 8002836:	7bbb      	ldrb	r3, [r7, #14]
 8002838:	011b      	lsls	r3, r3, #4
 800283a:	4313      	orrs	r3, r2
				| ((uint32_t) buff[7] / 16));
 800283c:	7bfa      	ldrb	r2, [r7, #15]
 800283e:	0912      	lsrs	r2, r2, #4
 8002840:	b2d2      	uxtb	r2, r2
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 8002842:	4313      	orrs	r3, r2
 8002844:	61fb      	str	r3, [r7, #28]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 8002846:	7c3b      	ldrb	r3, [r7, #16]
 8002848:	b29b      	uxth	r3, r3
 800284a:	021b      	lsls	r3, r3, #8
 800284c:	b29a      	uxth	r2, r3
 800284e:	7c7b      	ldrb	r3, [r7, #17]
 8002850:	b29b      	uxth	r3, r3
 8002852:	4313      	orrs	r3, r2
 8002854:	837b      	strh	r3, [r7, #26]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 8002856:	7d7b      	ldrb	r3, [r7, #21]
 8002858:	b29b      	uxth	r3, r3
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	b29a      	uxth	r2, r3
 800285e:	7dbb      	ldrb	r3, [r7, #22]
 8002860:	099b      	lsrs	r3, r3, #6
 8002862:	b2db      	uxtb	r3, r3
 8002864:	b29b      	uxth	r3, r3
 8002866:	4313      	orrs	r3, r2
 8002868:	833b      	strh	r3, [r7, #24]
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;
 800286a:	7dbb      	ldrb	r3, [r7, #22]
 800286c:	f003 030f 	and.w	r3, r3, #15
 8002870:	75fb      	strb	r3, [r7, #23]

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	b25a      	sxtb	r2, r3
 8002878:	7dbb      	ldrb	r3, [r7, #22]
 800287a:	b25b      	sxtb	r3, r3
 800287c:	f003 0320 	and.w	r3, r3, #32
 8002880:	b25b      	sxtb	r3, r3
 8002882:	4313      	orrs	r3, r2
 8002884:	b25b      	sxtb	r3, r3
 8002886:	b2da      	uxtb	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	701a      	strb	r2, [r3, #0]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	b25a      	sxtb	r2, r3
 8002892:	7dbb      	ldrb	r3, [r7, #22]
 8002894:	b25b      	sxtb	r3, r3
 8002896:	f003 0310 	and.w	r3, r3, #16
 800289a:	b25b      	sxtb	r3, r3
 800289c:	4313      	orrs	r3, r2
 800289e:	b25b      	sxtb	r3, r3
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	701a      	strb	r2, [r3, #0]

			if (data->status & BME680_NEW_DATA_MSK) {
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	b25b      	sxtb	r3, r3
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	da20      	bge.n	80028f2 <read_field_data+0x13e>
				data->temperature = calc_temperature(adc_temp, dev);
 80028b0:	6839      	ldr	r1, [r7, #0]
 80028b2:	69f8      	ldr	r0, [r7, #28]
 80028b4:	f7ff fc08 	bl	80020c8 <calc_temperature>
 80028b8:	4603      	mov	r3, r0
 80028ba:	461a      	mov	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	809a      	strh	r2, [r3, #4]
				data->pressure = calc_pressure(adc_pres, dev);
 80028c0:	6839      	ldr	r1, [r7, #0]
 80028c2:	6a38      	ldr	r0, [r7, #32]
 80028c4:	f7ff fc9b 	bl	80021fe <calc_pressure>
 80028c8:	4602      	mov	r2, r0
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	609a      	str	r2, [r3, #8]
				data->humidity = calc_humidity(adc_hum, dev);
 80028ce:	8b7b      	ldrh	r3, [r7, #26]
 80028d0:	6839      	ldr	r1, [r7, #0]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff fd40 	bl	8002358 <calc_humidity>
 80028d8:	4602      	mov	r2, r0
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	60da      	str	r2, [r3, #12]
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 80028de:	7df9      	ldrb	r1, [r7, #23]
 80028e0:	8b3b      	ldrh	r3, [r7, #24]
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff fdd1 	bl	800248c <calc_gas_resistance>
 80028ea:	4602      	mov	r2, r0
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	611a      	str	r2, [r3, #16]
				break;
 80028f0:	e00d      	b.n	800290e <read_field_data+0x15a>
			}
			/* Delay to poll the data */
			dev->delay_ms(BME680_POLL_PERIOD_MS);
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028f6:	200a      	movs	r0, #10
 80028f8:	4798      	blx	r3
		}
		tries--;
 80028fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80028fe:	3b01      	subs	r3, #1
 8002900:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	} while (tries);
 8002904:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002908:	2b00      	cmp	r3, #0
 800290a:	f47f af6a 	bne.w	80027e2 <read_field_data+0x2e>

	if (!tries)
 800290e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002912:	2b00      	cmp	r3, #0
 8002914:	d102      	bne.n	800291c <read_field_data+0x168>
		rslt = BME680_W_NO_NEW_DATA;
 8002916:	2302      	movs	r3, #2
 8002918:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return rslt;
 800291c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8002920:	4618      	mov	r0, r3
 8002922:	3728      	adds	r7, #40	; 0x28
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <set_mem_page>:

/*!
 * @brief This internal API is used to set the memory page based on register address.
 */
static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
{
 8002928:	b590      	push	{r4, r7, lr}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	4603      	mov	r3, r0
 8002930:	6039      	str	r1, [r7, #0]
 8002932:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
 8002934:	6838      	ldr	r0, [r7, #0]
 8002936:	f000 f8c5 	bl	8002ac4 <null_ptr_check>
 800293a:	4603      	mov	r3, r0
 800293c:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 800293e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d14f      	bne.n	80029e6 <set_mem_page+0xbe>
		if (reg_addr > 0x7f)
 8002946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294a:	2b00      	cmp	r3, #0
 800294c:	da02      	bge.n	8002954 <set_mem_page+0x2c>
			mem_page = BME680_MEM_PAGE1;
 800294e:	2300      	movs	r3, #0
 8002950:	73bb      	strb	r3, [r7, #14]
 8002952:	e001      	b.n	8002958 <set_mem_page+0x30>
		else
			mem_page = BME680_MEM_PAGE0;
 8002954:	2310      	movs	r3, #16
 8002956:	73bb      	strb	r3, [r7, #14]

		if (mem_page != dev->mem_page) {
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	78db      	ldrb	r3, [r3, #3]
 800295c:	7bba      	ldrb	r2, [r7, #14]
 800295e:	429a      	cmp	r2, r3
 8002960:	d041      	beq.n	80029e6 <set_mem_page+0xbe>
			dev->mem_page = mem_page;
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	7bba      	ldrb	r2, [r7, #14]
 8002966:	70da      	strb	r2, [r3, #3]

			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	7858      	ldrb	r0, [r3, #1]
 8002970:	f107 020d 	add.w	r2, r7, #13
 8002974:	2301      	movs	r3, #1
 8002976:	21f3      	movs	r1, #243	; 0xf3
 8002978:	47a0      	blx	r4
 800297a:	4603      	mov	r3, r0
 800297c:	461a      	mov	r2, r3
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			if (dev->com_rslt != 0)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <set_mem_page+0x6a>
				rslt = BME680_E_COM_FAIL;
 800298e:	23fe      	movs	r3, #254	; 0xfe
 8002990:	73fb      	strb	r3, [r7, #15]

			if (rslt == BME680_OK) {
 8002992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d125      	bne.n	80029e6 <set_mem_page+0xbe>
				reg = reg & (~BME680_MEM_PAGE_MSK);
 800299a:	7b7b      	ldrb	r3, [r7, #13]
 800299c:	f023 0310 	bic.w	r3, r3, #16
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	737b      	strb	r3, [r7, #13]
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	78db      	ldrb	r3, [r3, #3]
 80029a8:	b25b      	sxtb	r3, r3
 80029aa:	f003 0310 	and.w	r3, r3, #16
 80029ae:	b25a      	sxtb	r2, r3
 80029b0:	7b7b      	ldrb	r3, [r7, #13]
 80029b2:	b25b      	sxtb	r3, r3
 80029b4:	4313      	orrs	r3, r2
 80029b6:	b25b      	sxtb	r3, r3
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	737b      	strb	r3, [r7, #13]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	7858      	ldrb	r0, [r3, #1]
 80029c4:	f107 020d 	add.w	r2, r7, #13
 80029c8:	2301      	movs	r3, #1
 80029ca:	2173      	movs	r1, #115	; 0x73
 80029cc:	47a0      	blx	r4
 80029ce:	4603      	mov	r3, r0
 80029d0:	461a      	mov	r2, r3
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
					&reg, 1);
				if (dev->com_rslt != 0)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <set_mem_page+0xbe>
					rslt = BME680_E_COM_FAIL;
 80029e2:	23fe      	movs	r3, #254	; 0xfe
 80029e4:	73fb      	strb	r3, [r7, #15]
			}
		}
	}

	return rslt;
 80029e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3714      	adds	r7, #20
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd90      	pop	{r4, r7, pc}

080029f2 <get_mem_page>:

/*!
 * @brief This internal API is used to get the memory page based on register address.
 */
static int8_t get_mem_page(struct bme680_dev *dev)
{
 80029f2:	b590      	push	{r4, r7, lr}
 80029f4:	b085      	sub	sp, #20
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f862 	bl	8002ac4 <null_ptr_check>
 8002a00:	4603      	mov	r3, r0
 8002a02:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8002a04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d11b      	bne.n	8002a44 <get_mem_page+0x52>
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	7858      	ldrb	r0, [r3, #1]
 8002a14:	f107 020e 	add.w	r2, r7, #14
 8002a18:	2301      	movs	r3, #1
 8002a1a:	21f3      	movs	r1, #243	; 0xf3
 8002a1c:	47a0      	blx	r4
 8002a1e:	4603      	mov	r3, r0
 8002a20:	461a      	mov	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		if (dev->com_rslt != 0)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d002      	beq.n	8002a38 <get_mem_page+0x46>
			rslt = BME680_E_COM_FAIL;
 8002a32:	23fe      	movs	r3, #254	; 0xfe
 8002a34:	73fb      	strb	r3, [r7, #15]
 8002a36:	e005      	b.n	8002a44 <get_mem_page+0x52>
		else
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
 8002a38:	7bbb      	ldrb	r3, [r7, #14]
 8002a3a:	f003 0310 	and.w	r3, r3, #16
 8002a3e:	b2da      	uxtb	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	70da      	strb	r2, [r3, #3]
	}

	return rslt;
 8002a44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3714      	adds	r7, #20
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd90      	pop	{r4, r7, pc}

08002a50 <boundary_check>:
/*!
 * @brief This internal API is used to validate the boundary
 * conditions.
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b087      	sub	sp, #28
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	607b      	str	r3, [r7, #4]
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	72fb      	strb	r3, [r7, #11]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	72bb      	strb	r3, [r7, #10]
	int8_t rslt = BME680_OK;
 8002a62:	2300      	movs	r3, #0
 8002a64:	75fb      	strb	r3, [r7, #23]

	if (value != NULL) {
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d022      	beq.n	8002ab2 <boundary_check+0x62>
		/* Check if value is below minimum value */
		if (*value < min) {
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	7afa      	ldrb	r2, [r7, #11]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d90b      	bls.n	8002a8e <boundary_check+0x3e>
			/* Auto correct the invalid value to minimum value */
			*value = min;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	7afa      	ldrb	r2, [r7, #11]
 8002a7a:	701a      	strb	r2, [r3, #0]
			dev->info_msg |= BME680_I_MIN_CORRECTION;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002a82:	f043 0301 	orr.w	r3, r3, #1
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		}
		/* Check if value is above maximum value */
		if (*value > max) {
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	7aba      	ldrb	r2, [r7, #10]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d20e      	bcs.n	8002ab6 <boundary_check+0x66>
			/* Auto correct the invalid value to maximum value */
			*value = max;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	7aba      	ldrb	r2, [r7, #10]
 8002a9c:	701a      	strb	r2, [r3, #0]
			dev->info_msg |= BME680_I_MAX_CORRECTION;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002aa4:	f043 0302 	orr.w	r3, r3, #2
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ab0:	e001      	b.n	8002ab6 <boundary_check+0x66>
		}
	} else {
		rslt = BME680_E_NULL_PTR;
 8002ab2:	23ff      	movs	r3, #255	; 0xff
 8002ab4:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8002ab6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	371c      	adds	r7, #28
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr

08002ac4 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00b      	beq.n	8002aea <null_ptr_check+0x26>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d007      	beq.n	8002aea <null_ptr_check+0x26>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <null_ptr_check+0x26>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d102      	bne.n	8002af0 <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
 8002aea:	23ff      	movs	r3, #255	; 0xff
 8002aec:	73fb      	strb	r3, [r7, #15]
 8002aee:	e001      	b.n	8002af4 <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME680_OK;
 8002af0:	2300      	movs	r3, #0
 8002af2:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8002af4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3714      	adds	r7, #20
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr

08002b02 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b02:	b480      	push	{r7}
 8002b04:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002b06:	bf00      	nop
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bc80      	pop	{r7}
 8002b0c:	4770      	bx	lr

08002b0e <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b1e:	f023 0218 	bic.w	r2, r3, #24
 8002b22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bc80      	pop	{r7}
 8002b36:	4770      	bx	lr

08002b38 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002b40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
}
 8002b5e:	bf00      	nop
 8002b60:	3714      	adds	r7, #20
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr

08002b68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b6a:	b0fb      	sub	sp, #492	; 0x1ec
 8002b6c:	af2c      	add	r7, sp, #176	; 0xb0
  /* USER CODE BEGIN 1 */

  //-------------- GPIO INITS -----------------------
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b6e:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8002b72:	2200      	movs	r2, #0
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	605a      	str	r2, [r3, #4]
 8002b78:	609a      	str	r2, [r3, #8]
 8002b7a:	60da      	str	r2, [r3, #12]
 8002b7c:	611a      	str	r2, [r3, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b84:	487e      	ldr	r0, [pc, #504]	; (8002d80 <main+0x218>)
 8002b86:	f002 f9a1 	bl	8004ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	2110      	movs	r1, #16
 8002b8e:	487c      	ldr	r0, [pc, #496]	; (8002d80 <main+0x218>)
 8002b90:	f002 f99c 	bl	8004ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002b94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b98:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bae:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4872      	ldr	r0, [pc, #456]	; (8002d80 <main+0x218>)
 8002bb6:	f002 f829 	bl	8004c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002bba:	2310      	movs	r3, #16
 8002bbc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bd2:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	4869      	ldr	r0, [pc, #420]	; (8002d80 <main+0x218>)
 8002bda:	f002 f817 	bl	8004c0c <HAL_GPIO_Init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bde:	f001 f921 	bl	8003e24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002be2:	f000 f8f3 	bl	8002dcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002be6:	f000 fae5 	bl	80031b4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002bea:	f000 f9a5 	bl	8002f38 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8002bee:	f000 fa95 	bl	800311c <MX_USART2_UART_Init>
  MX_ADC_Init();
 8002bf2:	f000 f953 	bl	8002e9c <MX_ADC_Init>
  MX_TIM16_Init();
 8002bf6:	f000 fa69 	bl	80030cc <MX_TIM16_Init>
  MX_RTC_Init();
 8002bfa:	f000 f9dd 	bl	8002fb8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  // Initialize BME680 sensor
  bmes = bme680Init(gas_sensor, rslt, bmes);
 8002bfe:	4b61      	ldr	r3, [pc, #388]	; (8002d84 <main+0x21c>)
 8002c00:	f993 5000 	ldrsb.w	r5, [r3]
 8002c04:	f107 06c8 	add.w	r6, r7, #200	; 0xc8
 8002c08:	4c5f      	ldr	r4, [pc, #380]	; (8002d88 <main+0x220>)
 8002c0a:	a814      	add	r0, sp, #80	; 0x50
 8002c0c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002c10:	225c      	movs	r2, #92	; 0x5c
 8002c12:	4619      	mov	r1, r3
 8002c14:	f005 ff18 	bl	8008a48 <memcpy>
 8002c18:	9513      	str	r5, [sp, #76]	; 0x4c
 8002c1a:	4668      	mov	r0, sp
 8002c1c:	f104 030c 	add.w	r3, r4, #12
 8002c20:	224c      	movs	r2, #76	; 0x4c
 8002c22:	4619      	mov	r1, r3
 8002c24:	f005 ff10 	bl	8008a48 <memcpy>
 8002c28:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8002c2c:	4630      	mov	r0, r6
 8002c2e:	f000 fb99 	bl	8003364 <bme680Init>

  // Print initialization messages to serial
  sprintf(initMsg, "Time between samples: %u seconds \r\n", DELAY_PERIOD_MS/1000);
 8002c32:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002c36:	2205      	movs	r2, #5
 8002c38:	4954      	ldr	r1, [pc, #336]	; (8002d8c <main+0x224>)
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f006 fe74 	bl	8009928 <siprintf>
  DebugSerialOutput("Program Start!\r\n");
 8002c40:	4853      	ldr	r0, [pc, #332]	; (8002d90 <main+0x228>)
 8002c42:	f000 faed 	bl	8003220 <DebugSerialOutput>
  DebugSerialOutput(initMsg);
 8002c46:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f000 fae8 	bl	8003220 <DebugSerialOutput>

  // start timer
  HAL_TIM_Base_Start(&htim16);
 8002c50:	4850      	ldr	r0, [pc, #320]	; (8002d94 <main+0x22c>)
 8002c52:	f004 fe83 	bl	800795c <HAL_TIM_Base_Start>
  //------------------Config done-------------------------

  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 8002c56:	2001      	movs	r0, #1
 8002c58:	f002 ff24 	bl	8005aa4 <HAL_PWREx_ReleaseCore>
  while (1)
  {

	//--------------== Sample init and time stamp ==-------------------------

	sprintf(countMsg, "\r\n Taking sample %u: \r\n", sampleNumber);
 8002c5c:	4b4e      	ldr	r3, [pc, #312]	; (8002d98 <main+0x230>)
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	463b      	mov	r3, r7
 8002c62:	494e      	ldr	r1, [pc, #312]	; (8002d9c <main+0x234>)
 8002c64:	4618      	mov	r0, r3
 8002c66:	f006 fe5f 	bl	8009928 <siprintf>
	DebugSerialOutput(countMsg);
 8002c6a:	463b      	mov	r3, r7
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f000 fad7 	bl	8003220 <DebugSerialOutput>
	sampleNumber++;
 8002c72:	4b49      	ldr	r3, [pc, #292]	; (8002d98 <main+0x230>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	3301      	adds	r3, #1
 8002c78:	4a47      	ldr	r2, [pc, #284]	; (8002d98 <main+0x230>)
 8002c7a:	6013      	str	r3, [r2, #0]

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	4948      	ldr	r1, [pc, #288]	; (8002da0 <main+0x238>)
 8002c80:	4848      	ldr	r0, [pc, #288]	; (8002da4 <main+0x23c>)
 8002c82:	f004 fb5d 	bl	8007340 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002c86:	2200      	movs	r2, #0
 8002c88:	4947      	ldr	r1, [pc, #284]	; (8002da8 <main+0x240>)
 8002c8a:	4846      	ldr	r0, [pc, #280]	; (8002da4 <main+0x23c>)
 8002c8c:	f004 fc40 	bl	8007510 <HAL_RTC_GetDate>

	sprintf(date,"Date: %02d.%02d.%02d \t" ,sDate.Date,sDate.Month,sDate.Year);
 8002c90:	4b45      	ldr	r3, [pc, #276]	; (8002da8 <main+0x240>)
 8002c92:	789b      	ldrb	r3, [r3, #2]
 8002c94:	461a      	mov	r2, r3
 8002c96:	4b44      	ldr	r3, [pc, #272]	; (8002da8 <main+0x240>)
 8002c98:	785b      	ldrb	r3, [r3, #1]
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	4b42      	ldr	r3, [pc, #264]	; (8002da8 <main+0x240>)
 8002c9e:	78db      	ldrb	r3, [r3, #3]
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	4941      	ldr	r1, [pc, #260]	; (8002dac <main+0x244>)
 8002ca6:	4842      	ldr	r0, [pc, #264]	; (8002db0 <main+0x248>)
 8002ca8:	f006 fe3e 	bl	8009928 <siprintf>
	sprintf(time,"Time: %02d.%02d.%02d\r\n",sTime.Hours,sTime.Minutes,sTime.Seconds);
 8002cac:	4b3c      	ldr	r3, [pc, #240]	; (8002da0 <main+0x238>)
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	4b3b      	ldr	r3, [pc, #236]	; (8002da0 <main+0x238>)
 8002cb4:	785b      	ldrb	r3, [r3, #1]
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	4b39      	ldr	r3, [pc, #228]	; (8002da0 <main+0x238>)
 8002cba:	789b      	ldrb	r3, [r3, #2]
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	493c      	ldr	r1, [pc, #240]	; (8002db4 <main+0x24c>)
 8002cc2:	483d      	ldr	r0, [pc, #244]	; (8002db8 <main+0x250>)
 8002cc4:	f006 fe30 	bl	8009928 <siprintf>
	DebugSerialOutput(date);
 8002cc8:	4839      	ldr	r0, [pc, #228]	; (8002db0 <main+0x248>)
 8002cca:	f000 faa9 	bl	8003220 <DebugSerialOutput>
	DebugSerialOutput(time);
 8002cce:	483a      	ldr	r0, [pc, #232]	; (8002db8 <main+0x250>)
 8002cd0:	f000 faa6 	bl	8003220 <DebugSerialOutput>

	//-------WIND SPEED START---------
	printWindSpeed();
 8002cd4:	f000 fd2c 	bl	8003730 <printWindSpeed>
	//-------WIND SPEED END-----------

	//----- BME680 START ------------
	bme680TakeSample(i2c_reading_buf, bmes.result, data, bmes.min_period, bmes.gs);
 8002cd8:	f997 50c8 	ldrsb.w	r5, [r7, #200]	; 0xc8
 8002cdc:	f8b7 40ca 	ldrh.w	r4, [r7, #202]	; 0xca
 8002ce0:	a804      	add	r0, sp, #16
 8002ce2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ce6:	2258      	movs	r2, #88	; 0x58
 8002ce8:	4619      	mov	r1, r3
 8002cea:	f005 fead 	bl	8008a48 <memcpy>
 8002cee:	9403      	str	r4, [sp, #12]
 8002cf0:	466c      	mov	r4, sp
 8002cf2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002cf6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002cfa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002cfe:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002d02:	cb0c      	ldmia	r3, {r2, r3}
 8002d04:	4629      	mov	r1, r5
 8002d06:	482d      	ldr	r0, [pc, #180]	; (8002dbc <main+0x254>)
 8002d08:	f000 fbd2 	bl	80034b0 <bme680TakeSample>
	//------ BME680 END -------------

	//----- ADC WIND DIR START --------
	getWindDir();
 8002d0c:	f000 fc3c 	bl	8003588 <getWindDir>
	//----- ADC WIND DIR END ----------

	//------GPIO RAIN START-----------
	// done via interrupts
	if(rainFallInMM != 0) {
 8002d10:	4b2b      	ldr	r3, [pc, #172]	; (8002dc0 <main+0x258>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f04f 0100 	mov.w	r1, #0
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7fe fa2f 	bl	800117c <__aeabi_fcmpeq>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d110      	bne.n	8002d46 <main+0x1de>
		sprintf(countMsg, "Rainfall since program start: %f mm \r\n", rainFallInMM-0.1397);
 8002d24:	4b26      	ldr	r3, [pc, #152]	; (8002dc0 <main+0x258>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7fd fbe5 	bl	80004f8 <__aeabi_f2d>
 8002d2e:	a312      	add	r3, pc, #72	; (adr r3, 8002d78 <main+0x210>)
 8002d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d34:	f7fd fa80 	bl	8000238 <__aeabi_dsub>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4638      	mov	r0, r7
 8002d3e:	4921      	ldr	r1, [pc, #132]	; (8002dc4 <main+0x25c>)
 8002d40:	f006 fdf2 	bl	8009928 <siprintf>
 8002d44:	e00a      	b.n	8002d5c <main+0x1f4>
	}
	else {
		sprintf(countMsg, "Rainfall since program start: %f mm \r\n", rainFallInMM);
 8002d46:	4b1e      	ldr	r3, [pc, #120]	; (8002dc0 <main+0x258>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fd fbd4 	bl	80004f8 <__aeabi_f2d>
 8002d50:	4602      	mov	r2, r0
 8002d52:	460b      	mov	r3, r1
 8002d54:	4638      	mov	r0, r7
 8002d56:	491b      	ldr	r1, [pc, #108]	; (8002dc4 <main+0x25c>)
 8002d58:	f006 fde6 	bl	8009928 <siprintf>
	}
	DebugSerialOutput(countMsg);
 8002d5c:	463b      	mov	r3, r7
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 fa5e 	bl	8003220 <DebugSerialOutput>
	//------GPIO RAIN END-------------

	//------ DELAY START ------
	// reset wind tips per second
	windTips = 0;
 8002d64:	4b18      	ldr	r3, [pc, #96]	; (8002dc8 <main+0x260>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]

	// Wait between samples
	HAL_Delay(DELAY_PERIOD_MS);
 8002d6a:	f241 3088 	movw	r0, #5000	; 0x1388
 8002d6e:	f001 f8cf 	bl	8003f10 <HAL_Delay>
	sprintf(countMsg, "\r\n Taking sample %u: \r\n", sampleNumber);
 8002d72:	e773      	b.n	8002c5c <main+0xf4>
 8002d74:	f3af 8000 	nop.w
 8002d78:	89a02752 	.word	0x89a02752
 8002d7c:	3fc1e1b0 	.word	0x3fc1e1b0
 8002d80:	48000400 	.word	0x48000400
 8002d84:	20000480 	.word	0x20000480
 8002d88:	200003c4 	.word	0x200003c4
 8002d8c:	0800d368 	.word	0x0800d368
 8002d90:	0800d38c 	.word	0x0800d38c
 8002d94:	200002e8 	.word	0x200002e8
 8002d98:	20000004 	.word	0x20000004
 8002d9c:	0800d3a0 	.word	0x0800d3a0
 8002da0:	200005c4 	.word	0x200005c4
 8002da4:	200002b0 	.word	0x200002b0
 8002da8:	200005d8 	.word	0x200005d8
 8002dac:	0800d3b8 	.word	0x0800d3b8
 8002db0:	200005a4 	.word	0x200005a4
 8002db4:	0800d3d0 	.word	0x0800d3d0
 8002db8:	20000584 	.word	0x20000584
 8002dbc:	2000041c 	.word	0x2000041c
 8002dc0:	20000484 	.word	0x20000484
 8002dc4:	0800d3e8 	.word	0x0800d3e8
 8002dc8:	20000490 	.word	0x20000490

08002dcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b09a      	sub	sp, #104	; 0x68
 8002dd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002dd2:	f107 0320 	add.w	r3, r7, #32
 8002dd6:	2248      	movs	r2, #72	; 0x48
 8002dd8:	2100      	movs	r1, #0
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f005 fe42 	bl	8008a64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002de0:	1d3b      	adds	r3, r7, #4
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	605a      	str	r2, [r3, #4]
 8002de8:	609a      	str	r2, [r3, #8]
 8002dea:	60da      	str	r2, [r3, #12]
 8002dec:	611a      	str	r2, [r3, #16]
 8002dee:	615a      	str	r2, [r3, #20]
 8002df0:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002df2:	f002 fe21 	bl	8005a38 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002df6:	2000      	movs	r0, #0
 8002df8:	f7ff fe89 	bl	8002b0e <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002dfc:	4b26      	ldr	r3, [pc, #152]	; (8002e98 <SystemClock_Config+0xcc>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e04:	4a24      	ldr	r2, [pc, #144]	; (8002e98 <SystemClock_Config+0xcc>)
 8002e06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e0a:	6013      	str	r3, [r2, #0]
 8002e0c:	4b22      	ldr	r3, [pc, #136]	; (8002e98 <SystemClock_Config+0xcc>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e14:	603b      	str	r3, [r7, #0]
 8002e16:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8002e18:	2306      	movs	r3, #6
 8002e1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002e1c:	2381      	movs	r3, #129	; 0x81
 8002e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e24:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e26:	2340      	movs	r3, #64	; 0x40
 8002e28:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002e2e:	2302      	movs	r3, #2
 8002e30:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002e32:	2300      	movs	r3, #0
 8002e34:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 6;
 8002e36:	2306      	movs	r3, #6
 8002e38:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002e3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e3e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002e40:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002e44:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002e46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e4a:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e4c:	f107 0320 	add.w	r3, r7, #32
 8002e50:	4618      	mov	r0, r3
 8002e52:	f003 f8e9 	bl	8006028 <HAL_RCC_OscConfig>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002e5c:	f000 fd22 	bl	80038a4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 8002e60:	236f      	movs	r3, #111	; 0x6f
 8002e62:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e64:	2303      	movs	r3, #3
 8002e66:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e70:	2300      	movs	r3, #0
 8002e72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002e74:	2300      	movs	r3, #0
 8002e76:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002e7c:	1d3b      	adds	r3, r7, #4
 8002e7e:	2102      	movs	r1, #2
 8002e80:	4618      	mov	r0, r3
 8002e82:	f003 fc6d 	bl	8006760 <HAL_RCC_ClockConfig>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002e8c:	f000 fd0a 	bl	80038a4 <Error_Handler>
  }
}
 8002e90:	bf00      	nop
 8002e92:	3768      	adds	r7, #104	; 0x68
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	58000400 	.word	0x58000400

08002e9c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8002ea0:	4b23      	ldr	r3, [pc, #140]	; (8002f30 <MX_ADC_Init+0x94>)
 8002ea2:	4a24      	ldr	r2, [pc, #144]	; (8002f34 <MX_ADC_Init+0x98>)
 8002ea4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002ea6:	4b22      	ldr	r3, [pc, #136]	; (8002f30 <MX_ADC_Init+0x94>)
 8002ea8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002eac:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002eae:	4b20      	ldr	r3, [pc, #128]	; (8002f30 <MX_ADC_Init+0x94>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002eb4:	4b1e      	ldr	r3, [pc, #120]	; (8002f30 <MX_ADC_Init+0x94>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002eba:	4b1d      	ldr	r3, [pc, #116]	; (8002f30 <MX_ADC_Init+0x94>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002ec0:	4b1b      	ldr	r3, [pc, #108]	; (8002f30 <MX_ADC_Init+0x94>)
 8002ec2:	2204      	movs	r2, #4
 8002ec4:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002ec6:	4b1a      	ldr	r3, [pc, #104]	; (8002f30 <MX_ADC_Init+0x94>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002ecc:	4b18      	ldr	r3, [pc, #96]	; (8002f30 <MX_ADC_Init+0x94>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002ed2:	4b17      	ldr	r3, [pc, #92]	; (8002f30 <MX_ADC_Init+0x94>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8002ed8:	4b15      	ldr	r3, [pc, #84]	; (8002f30 <MX_ADC_Init+0x94>)
 8002eda:	2201      	movs	r2, #1
 8002edc:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002ede:	4b14      	ldr	r3, [pc, #80]	; (8002f30 <MX_ADC_Init+0x94>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002ee6:	4b12      	ldr	r3, [pc, #72]	; (8002f30 <MX_ADC_Init+0x94>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002eec:	4b10      	ldr	r3, [pc, #64]	; (8002f30 <MX_ADC_Init+0x94>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002ef2:	4b0f      	ldr	r3, [pc, #60]	; (8002f30 <MX_ADC_Init+0x94>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002efa:	4b0d      	ldr	r3, [pc, #52]	; (8002f30 <MX_ADC_Init+0x94>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8002f00:	4b0b      	ldr	r3, [pc, #44]	; (8002f30 <MX_ADC_Init+0x94>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8002f06:	4b0a      	ldr	r3, [pc, #40]	; (8002f30 <MX_ADC_Init+0x94>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8002f0c:	4b08      	ldr	r3, [pc, #32]	; (8002f30 <MX_ADC_Init+0x94>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002f14:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <MX_ADC_Init+0x94>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002f1a:	4805      	ldr	r0, [pc, #20]	; (8002f30 <MX_ADC_Init+0x94>)
 8002f1c:	f001 f8ee 	bl	80040fc <HAL_ADC_Init>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <MX_ADC_Init+0x8e>
  {
    Error_Handler();
 8002f26:	f000 fcbd 	bl	80038a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002f2a:	bf00      	nop
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	20000200 	.word	0x20000200
 8002f34:	40012400 	.word	0x40012400

08002f38 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002f3c:	4b1b      	ldr	r3, [pc, #108]	; (8002fac <MX_I2C1_Init+0x74>)
 8002f3e:	4a1c      	ldr	r2, [pc, #112]	; (8002fb0 <MX_I2C1_Init+0x78>)
 8002f40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8002f42:	4b1a      	ldr	r3, [pc, #104]	; (8002fac <MX_I2C1_Init+0x74>)
 8002f44:	4a1b      	ldr	r2, [pc, #108]	; (8002fb4 <MX_I2C1_Init+0x7c>)
 8002f46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002f48:	4b18      	ldr	r3, [pc, #96]	; (8002fac <MX_I2C1_Init+0x74>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f4e:	4b17      	ldr	r3, [pc, #92]	; (8002fac <MX_I2C1_Init+0x74>)
 8002f50:	2201      	movs	r2, #1
 8002f52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f54:	4b15      	ldr	r3, [pc, #84]	; (8002fac <MX_I2C1_Init+0x74>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002f5a:	4b14      	ldr	r3, [pc, #80]	; (8002fac <MX_I2C1_Init+0x74>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002f60:	4b12      	ldr	r3, [pc, #72]	; (8002fac <MX_I2C1_Init+0x74>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f66:	4b11      	ldr	r3, [pc, #68]	; (8002fac <MX_I2C1_Init+0x74>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f6c:	4b0f      	ldr	r3, [pc, #60]	; (8002fac <MX_I2C1_Init+0x74>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002f72:	480e      	ldr	r0, [pc, #56]	; (8002fac <MX_I2C1_Init+0x74>)
 8002f74:	f001 ffda 	bl	8004f2c <HAL_I2C_Init>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002f7e:	f000 fc91 	bl	80038a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002f82:	2100      	movs	r1, #0
 8002f84:	4809      	ldr	r0, [pc, #36]	; (8002fac <MX_I2C1_Init+0x74>)
 8002f86:	f002 fcc1 	bl	800590c <HAL_I2CEx_ConfigAnalogFilter>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002f90:	f000 fc88 	bl	80038a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002f94:	2100      	movs	r1, #0
 8002f96:	4805      	ldr	r0, [pc, #20]	; (8002fac <MX_I2C1_Init+0x74>)
 8002f98:	f002 fd02 	bl	80059a0 <HAL_I2CEx_ConfigDigitalFilter>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002fa2:	f000 fc7f 	bl	80038a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002fa6:	bf00      	nop
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	20000264 	.word	0x20000264
 8002fb0:	40005400 	.word	0x40005400
 8002fb4:	20303e5d 	.word	0x20303e5d

08002fb8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002fbe:	1d3b      	adds	r3, r7, #4
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	605a      	str	r2, [r3, #4]
 8002fc6:	609a      	str	r2, [r3, #8]
 8002fc8:	60da      	str	r2, [r3, #12]
 8002fca:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002fcc:	2300      	movs	r3, #0
 8002fce:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002fd0:	4b3c      	ldr	r3, [pc, #240]	; (80030c4 <MX_RTC_Init+0x10c>)
 8002fd2:	4a3d      	ldr	r2, [pc, #244]	; (80030c8 <MX_RTC_Init+0x110>)
 8002fd4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002fd6:	4b3b      	ldr	r3, [pc, #236]	; (80030c4 <MX_RTC_Init+0x10c>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002fdc:	4b39      	ldr	r3, [pc, #228]	; (80030c4 <MX_RTC_Init+0x10c>)
 8002fde:	227f      	movs	r2, #127	; 0x7f
 8002fe0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002fe2:	4b38      	ldr	r3, [pc, #224]	; (80030c4 <MX_RTC_Init+0x10c>)
 8002fe4:	22ff      	movs	r2, #255	; 0xff
 8002fe6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002fe8:	4b36      	ldr	r3, [pc, #216]	; (80030c4 <MX_RTC_Init+0x10c>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002fee:	4b35      	ldr	r3, [pc, #212]	; (80030c4 <MX_RTC_Init+0x10c>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002ff4:	4b33      	ldr	r3, [pc, #204]	; (80030c4 <MX_RTC_Init+0x10c>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002ffa:	4b32      	ldr	r3, [pc, #200]	; (80030c4 <MX_RTC_Init+0x10c>)
 8002ffc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003000:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8003002:	4b30      	ldr	r3, [pc, #192]	; (80030c4 <MX_RTC_Init+0x10c>)
 8003004:	2200      	movs	r2, #0
 8003006:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8003008:	4b2e      	ldr	r3, [pc, #184]	; (80030c4 <MX_RTC_Init+0x10c>)
 800300a:	2200      	movs	r2, #0
 800300c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800300e:	482d      	ldr	r0, [pc, #180]	; (80030c4 <MX_RTC_Init+0x10c>)
 8003010:	f004 f880 	bl	8007114 <HAL_RTC_Init>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800301a:	f000 fc43 	bl	80038a4 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */

  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0xBEBE) {
 800301e:	2101      	movs	r1, #1
 8003020:	4828      	ldr	r0, [pc, #160]	; (80030c4 <MX_RTC_Init+0x10c>)
 8003022:	f004 fc2d 	bl	8007880 <HAL_RTCEx_BKUPRead>
 8003026:	4603      	mov	r3, r0
 8003028:	f64b 62be 	movw	r2, #48830	; 0xbebe
 800302c:	4293      	cmp	r3, r2
 800302e:	d044      	beq.n	80030ba <MX_RTC_Init+0x102>

	  // Write Back Up Register 1 Data
	  HAL_PWR_EnableBkUpAccess();
 8003030:	f002 fd02 	bl	8005a38 <HAL_PWR_EnableBkUpAccess>
	  // Writes a data in a RTC Backup data Register 1
	  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0xBEBE);
 8003034:	f64b 62be 	movw	r2, #48830	; 0xbebe
 8003038:	2101      	movs	r1, #1
 800303a:	4822      	ldr	r0, [pc, #136]	; (80030c4 <MX_RTC_Init+0x10c>)
 800303c:	f004 fc08 	bl	8007850 <HAL_RTCEx_BKUPWrite>
	  HAL_PWR_DisableBkUpAccess();
 8003040:	f002 fd08 	bl	8005a54 <HAL_PWR_DisableBkUpAccess>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x10;
 8003044:	2310      	movs	r3, #16
 8003046:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x53;
 8003048:	2353      	movs	r3, #83	; 0x53
 800304a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x30;
 800304c:	2330      	movs	r3, #48	; 0x30
 800304e:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003050:	2300      	movs	r3, #0
 8003052:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003054:	2300      	movs	r3, #0
 8003056:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003058:	1d3b      	adds	r3, r7, #4
 800305a:	2201      	movs	r2, #1
 800305c:	4619      	mov	r1, r3
 800305e:	4819      	ldr	r0, [pc, #100]	; (80030c4 <MX_RTC_Init+0x10c>)
 8003060:	f004 f8d2 	bl	8007208 <HAL_RTC_SetTime>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <MX_RTC_Init+0xb6>
  {
    Error_Handler();
 800306a:	f000 fc1b 	bl	80038a4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 800306e:	2302      	movs	r3, #2
 8003070:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JUNE;
 8003072:	2306      	movs	r3, #6
 8003074:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x21;
 8003076:	2321      	movs	r3, #33	; 0x21
 8003078:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 800307a:	2322      	movs	r3, #34	; 0x22
 800307c:	70fb      	strb	r3, [r7, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800307e:	463b      	mov	r3, r7
 8003080:	2201      	movs	r2, #1
 8003082:	4619      	mov	r1, r3
 8003084:	480f      	ldr	r0, [pc, #60]	; (80030c4 <MX_RTC_Init+0x10c>)
 8003086:	f004 f9bd 	bl	8007404 <HAL_RTC_SetDate>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8003090:	f000 fc08 	bl	80038a4 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_DEFAULT) != HAL_OK)
 8003094:	2200      	movs	r2, #0
 8003096:	2100      	movs	r1, #0
 8003098:	480a      	ldr	r0, [pc, #40]	; (80030c4 <MX_RTC_Init+0x10c>)
 800309a:	f004 fb59 	bl	8007750 <HAL_RTCEx_SetTimeStamp>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <MX_RTC_Init+0xf0>
  {
    Error_Handler();
 80030a4:	f000 fbfe 	bl	80038a4 <Error_Handler>
  }

  /** Enable the reference Clock input
  */
  if (HAL_RTCEx_SetRefClock(&hrtc) != HAL_OK)
 80030a8:	4806      	ldr	r0, [pc, #24]	; (80030c4 <MX_RTC_Init+0x10c>)
 80030aa:	f004 fb8f 	bl	80077cc <HAL_RTCEx_SetRefClock>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d003      	beq.n	80030bc <MX_RTC_Init+0x104>
  {
    Error_Handler();
 80030b4:	f000 fbf6 	bl	80038a4 <Error_Handler>
 80030b8:	e000      	b.n	80030bc <MX_RTC_Init+0x104>
	  return;
 80030ba:	bf00      	nop
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80030bc:	3718      	adds	r7, #24
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	200002b0 	.word	0x200002b0
 80030c8:	40002800 	.word	0x40002800

080030cc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80030d0:	4b10      	ldr	r3, [pc, #64]	; (8003114 <MX_TIM16_Init+0x48>)
 80030d2:	4a11      	ldr	r2, [pc, #68]	; (8003118 <MX_TIM16_Init+0x4c>)
 80030d4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 4800-1;
 80030d6:	4b0f      	ldr	r3, [pc, #60]	; (8003114 <MX_TIM16_Init+0x48>)
 80030d8:	f241 22bf 	movw	r2, #4799	; 0x12bf
 80030dc:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030de:	4b0d      	ldr	r3, [pc, #52]	; (8003114 <MX_TIM16_Init+0x48>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000;
 80030e4:	4b0b      	ldr	r3, [pc, #44]	; (8003114 <MX_TIM16_Init+0x48>)
 80030e6:	f242 7210 	movw	r2, #10000	; 0x2710
 80030ea:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030ec:	4b09      	ldr	r3, [pc, #36]	; (8003114 <MX_TIM16_Init+0x48>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80030f2:	4b08      	ldr	r3, [pc, #32]	; (8003114 <MX_TIM16_Init+0x48>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030f8:	4b06      	ldr	r3, [pc, #24]	; (8003114 <MX_TIM16_Init+0x48>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80030fe:	4805      	ldr	r0, [pc, #20]	; (8003114 <MX_TIM16_Init+0x48>)
 8003100:	f004 fbd4 	bl	80078ac <HAL_TIM_Base_Init>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800310a:	f000 fbcb 	bl	80038a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800310e:	bf00      	nop
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	200002e8 	.word	0x200002e8
 8003118:	40014400 	.word	0x40014400

0800311c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003120:	4b22      	ldr	r3, [pc, #136]	; (80031ac <MX_USART2_UART_Init+0x90>)
 8003122:	4a23      	ldr	r2, [pc, #140]	; (80031b0 <MX_USART2_UART_Init+0x94>)
 8003124:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003126:	4b21      	ldr	r3, [pc, #132]	; (80031ac <MX_USART2_UART_Init+0x90>)
 8003128:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800312c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800312e:	4b1f      	ldr	r3, [pc, #124]	; (80031ac <MX_USART2_UART_Init+0x90>)
 8003130:	2200      	movs	r2, #0
 8003132:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003134:	4b1d      	ldr	r3, [pc, #116]	; (80031ac <MX_USART2_UART_Init+0x90>)
 8003136:	2200      	movs	r2, #0
 8003138:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800313a:	4b1c      	ldr	r3, [pc, #112]	; (80031ac <MX_USART2_UART_Init+0x90>)
 800313c:	2200      	movs	r2, #0
 800313e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003140:	4b1a      	ldr	r3, [pc, #104]	; (80031ac <MX_USART2_UART_Init+0x90>)
 8003142:	220c      	movs	r2, #12
 8003144:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003146:	4b19      	ldr	r3, [pc, #100]	; (80031ac <MX_USART2_UART_Init+0x90>)
 8003148:	2200      	movs	r2, #0
 800314a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800314c:	4b17      	ldr	r3, [pc, #92]	; (80031ac <MX_USART2_UART_Init+0x90>)
 800314e:	2200      	movs	r2, #0
 8003150:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003152:	4b16      	ldr	r3, [pc, #88]	; (80031ac <MX_USART2_UART_Init+0x90>)
 8003154:	2200      	movs	r2, #0
 8003156:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003158:	4b14      	ldr	r3, [pc, #80]	; (80031ac <MX_USART2_UART_Init+0x90>)
 800315a:	2200      	movs	r2, #0
 800315c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800315e:	4b13      	ldr	r3, [pc, #76]	; (80031ac <MX_USART2_UART_Init+0x90>)
 8003160:	2200      	movs	r2, #0
 8003162:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003164:	4811      	ldr	r0, [pc, #68]	; (80031ac <MX_USART2_UART_Init+0x90>)
 8003166:	f004 fe27 	bl	8007db8 <HAL_UART_Init>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003170:	f000 fb98 	bl	80038a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003174:	2100      	movs	r1, #0
 8003176:	480d      	ldr	r0, [pc, #52]	; (80031ac <MX_USART2_UART_Init+0x90>)
 8003178:	f005 fb64 	bl	8008844 <HAL_UARTEx_SetTxFifoThreshold>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8003182:	f000 fb8f 	bl	80038a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003186:	2100      	movs	r1, #0
 8003188:	4808      	ldr	r0, [pc, #32]	; (80031ac <MX_USART2_UART_Init+0x90>)
 800318a:	f005 fb99 	bl	80088c0 <HAL_UARTEx_SetRxFifoThreshold>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003194:	f000 fb86 	bl	80038a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003198:	4804      	ldr	r0, [pc, #16]	; (80031ac <MX_USART2_UART_Init+0x90>)
 800319a:	f005 fb1b 	bl	80087d4 <HAL_UARTEx_DisableFifoMode>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80031a4:	f000 fb7e 	bl	80038a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80031a8:	bf00      	nop
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	20000334 	.word	0x20000334
 80031b0:	40004400 	.word	0x40004400

080031b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031ba:	1d3b      	adds	r3, r7, #4
 80031bc:	2200      	movs	r2, #0
 80031be:	601a      	str	r2, [r3, #0]
 80031c0:	605a      	str	r2, [r3, #4]
 80031c2:	609a      	str	r2, [r3, #8]
 80031c4:	60da      	str	r2, [r3, #12]
 80031c6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031c8:	2001      	movs	r0, #1
 80031ca:	f7ff fcb5 	bl	8002b38 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031ce:	2004      	movs	r0, #4
 80031d0:	f7ff fcb2 	bl	8002b38 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031d4:	2002      	movs	r0, #2
 80031d6:	f7ff fcaf 	bl	8002b38 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pins : Wind_speed_Pin Rain_Tip_Pin */
  GPIO_InitStruct.Pin = Wind_speed_Pin|Rain_Tip_Pin;
 80031da:	f244 0310 	movw	r3, #16400	; 0x4010
 80031de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80031e0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80031e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e6:	2300      	movs	r3, #0
 80031e8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031ea:	1d3b      	adds	r3, r7, #4
 80031ec:	4619      	mov	r1, r3
 80031ee:	480b      	ldr	r0, [pc, #44]	; (800321c <MX_GPIO_Init+0x68>)
 80031f0:	f001 fd0c 	bl	8004c0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80031f4:	2200      	movs	r2, #0
 80031f6:	2100      	movs	r1, #0
 80031f8:	200a      	movs	r0, #10
 80031fa:	f001 fcd2 	bl	8004ba2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80031fe:	200a      	movs	r0, #10
 8003200:	f001 fce9 	bl	8004bd6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003204:	2200      	movs	r2, #0
 8003206:	2100      	movs	r1, #0
 8003208:	2029      	movs	r0, #41	; 0x29
 800320a:	f001 fcca 	bl	8004ba2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800320e:	2029      	movs	r0, #41	; 0x29
 8003210:	f001 fce1 	bl	8004bd6 <HAL_NVIC_EnableIRQ>

}
 8003214:	bf00      	nop
 8003216:	3718      	adds	r7, #24
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	48000400 	.word	0x48000400

08003220 <DebugSerialOutput>:

/* USER CODE BEGIN 4 */

size_t DebugSerialOutput(const char *message) {
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]

	// print to UART easily

	static const size_t USART1_TIMEOUT = 250;
	size_t result = 0;
 8003228:	2300      	movs	r3, #0
 800322a:	60fb      	str	r3, [r7, #12]

	HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), USART1_TIMEOUT);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f7fc ffa7 	bl	8000180 <strlen>
 8003232:	4603      	mov	r3, r0
 8003234:	b29a      	uxth	r2, r3
 8003236:	4b0a      	ldr	r3, [pc, #40]	; (8003260 <DebugSerialOutput+0x40>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	4809      	ldr	r0, [pc, #36]	; (8003264 <DebugSerialOutput+0x44>)
 800323e:	f004 fe0b 	bl	8007e58 <HAL_UART_Transmit>
 8003242:	4603      	mov	r3, r0
 8003244:	72fb      	strb	r3, [r7, #11]
	if (HAL_OK == status) {
 8003246:	7afb      	ldrb	r3, [r7, #11]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d102      	bne.n	8003252 <DebugSerialOutput+0x32>
		result = sizeof(message);
 800324c:	2304      	movs	r3, #4
 800324e:	60fb      	str	r3, [r7, #12]
 8003250:	e001      	b.n	8003256 <DebugSerialOutput+0x36>
	} else {
		result = 0;
 8003252:	2300      	movs	r3, #0
 8003254:	60fb      	str	r3, [r7, #12]
	}

	return result;
 8003256:	68fb      	ldr	r3, [r7, #12]
}
 8003258:	4618      	mov	r0, r3
 800325a:	3710      	adds	r7, #16
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	0800d638 	.word	0x0800d638
 8003264:	20000334 	.word	0x20000334

08003268 <bme680I2cRead>:

int8_t bme680I2cRead(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af02      	add	r7, sp, #8
 800326e:	603a      	str	r2, [r7, #0]
 8003270:	461a      	mov	r2, r3
 8003272:	4603      	mov	r3, r0
 8003274:	71fb      	strb	r3, [r7, #7]
 8003276:	460b      	mov	r3, r1
 8003278:	71bb      	strb	r3, [r7, #6]
 800327a:	4613      	mov	r3, r2
 800327c:	80bb      	strh	r3, [r7, #4]
	// read I2C line

	int8_t result;
	static const size_t I2C_READ_TIMEOUT = 250;

	if (HAL_I2C_Master_Transmit(&hi2c1, (dev_id << 1), &reg_addr, 1, I2C_READ_TIMEOUT) != HAL_OK) {
 800327e:	79fb      	ldrb	r3, [r7, #7]
 8003280:	b29b      	uxth	r3, r3
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	b299      	uxth	r1, r3
 8003286:	4b16      	ldr	r3, [pc, #88]	; (80032e0 <bme680I2cRead+0x78>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	1dba      	adds	r2, r7, #6
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	2301      	movs	r3, #1
 8003290:	4814      	ldr	r0, [pc, #80]	; (80032e4 <bme680I2cRead+0x7c>)
 8003292:	f001 fedb 	bl	800504c <HAL_I2C_Master_Transmit>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d002      	beq.n	80032a2 <bme680I2cRead+0x3a>
		result = -1;
 800329c:	23ff      	movs	r3, #255	; 0xff
 800329e:	73fb      	strb	r3, [r7, #15]
 80032a0:	e017      	b.n	80032d2 <bme680I2cRead+0x6a>
	} else if (HAL_I2C_Master_Receive (&hi2c1, (dev_id << 1) | 0x01, reg_data, len, I2C_READ_TIMEOUT) != HAL_OK) {
 80032a2:	79fb      	ldrb	r3, [r7, #7]
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	b21b      	sxth	r3, r3
 80032a8:	f043 0301 	orr.w	r3, r3, #1
 80032ac:	b21b      	sxth	r3, r3
 80032ae:	b299      	uxth	r1, r3
 80032b0:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <bme680I2cRead+0x78>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	88ba      	ldrh	r2, [r7, #4]
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	4613      	mov	r3, r2
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	4809      	ldr	r0, [pc, #36]	; (80032e4 <bme680I2cRead+0x7c>)
 80032be:	f001 ffb9 	bl	8005234 <HAL_I2C_Master_Receive>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d002      	beq.n	80032ce <bme680I2cRead+0x66>
		result = -1;
 80032c8:	23ff      	movs	r3, #255	; 0xff
 80032ca:	73fb      	strb	r3, [r7, #15]
 80032cc:	e001      	b.n	80032d2 <bme680I2cRead+0x6a>
	} else {
		result = 0;
 80032ce:	2300      	movs	r3, #0
 80032d0:	73fb      	strb	r3, [r7, #15]
	}

	return result;
 80032d2:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	0800d63c 	.word	0x0800d63c
 80032e4:	20000264 	.word	0x20000264

080032e8 <bme680I2cWrite>:

int8_t bme680I2cWrite(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af02      	add	r7, sp, #8
 80032ee:	603a      	str	r2, [r7, #0]
 80032f0:	461a      	mov	r2, r3
 80032f2:	4603      	mov	r3, r0
 80032f4:	71fb      	strb	r3, [r7, #7]
 80032f6:	460b      	mov	r3, r1
 80032f8:	71bb      	strb	r3, [r7, #6]
 80032fa:	4613      	mov	r3, r2
 80032fc:	80bb      	strh	r3, [r7, #4]
  // write to I2C line
  int8_t result;
  int8_t *buf;

  // Allocate and load I2C transmit buffer
  buf = malloc(len + 1);
 80032fe:	88bb      	ldrh	r3, [r7, #4]
 8003300:	3301      	adds	r3, #1
 8003302:	4618      	mov	r0, r3
 8003304:	f005 fb90 	bl	8008a28 <malloc>
 8003308:	4603      	mov	r3, r0
 800330a:	60bb      	str	r3, [r7, #8]
  buf[0] = reg_addr;
 800330c:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	701a      	strb	r2, [r3, #0]
  memcpy(buf + 1, reg_data, len);
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	3301      	adds	r3, #1
 8003318:	88ba      	ldrh	r2, [r7, #4]
 800331a:	6839      	ldr	r1, [r7, #0]
 800331c:	4618      	mov	r0, r3
 800331e:	f005 fb93 	bl	8008a48 <memcpy>

  if (HAL_I2C_Master_Transmit(&hi2c1, (dev_id << 1), (uint8_t *) buf, len + 1, HAL_MAX_DELAY) != HAL_OK) {
 8003322:	79fb      	ldrb	r3, [r7, #7]
 8003324:	b29b      	uxth	r3, r3
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	b299      	uxth	r1, r3
 800332a:	88bb      	ldrh	r3, [r7, #4]
 800332c:	3301      	adds	r3, #1
 800332e:	b29b      	uxth	r3, r3
 8003330:	f04f 32ff 	mov.w	r2, #4294967295
 8003334:	9200      	str	r2, [sp, #0]
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	4809      	ldr	r0, [pc, #36]	; (8003360 <bme680I2cWrite+0x78>)
 800333a:	f001 fe87 	bl	800504c <HAL_I2C_Master_Transmit>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d002      	beq.n	800334a <bme680I2cWrite+0x62>
    result = -1;
 8003344:	23ff      	movs	r3, #255	; 0xff
 8003346:	73fb      	strb	r3, [r7, #15]
 8003348:	e001      	b.n	800334e <bme680I2cWrite+0x66>
  } else {
    result = 0;
 800334a:	2300      	movs	r3, #0
 800334c:	73fb      	strb	r3, [r7, #15]
  }

  free(buf);
 800334e:	68b8      	ldr	r0, [r7, #8]
 8003350:	f005 fb72 	bl	8008a38 <free>
  return result;
 8003354:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003358:	4618      	mov	r0, r3
 800335a:	3710      	adds	r7, #16
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	20000264 	.word	0x20000264

08003364 <bme680Init>:

bme bme680Init(struct bme680_dev gas_sensor, int8_t rslt, bme bmes) {
 8003364:	b084      	sub	sp, #16
 8003366:	b5b0      	push	{r4, r5, r7, lr}
 8003368:	b094      	sub	sp, #80	; 0x50
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
 800336e:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8003372:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  // ----------------------Configure the BME680 driver-----------------------------

  gas_sensor.dev_id = BME680_I2C_ADDR_PRIMARY;
 8003376:	2376      	movs	r3, #118	; 0x76
 8003378:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  gas_sensor.intf = BME680_I2C_INTF;
 800337c:	2301      	movs	r3, #1
 800337e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  gas_sensor.read = bme680I2cRead;
 8003382:	4b46      	ldr	r3, [pc, #280]	; (800349c <bme680Init+0x138>)
 8003384:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  gas_sensor.write = bme680I2cWrite;
 8003388:	4b45      	ldr	r3, [pc, #276]	; (80034a0 <bme680Init+0x13c>)
 800338a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  gas_sensor.delay_ms = HAL_Delay;
 800338e:	4b45      	ldr	r3, [pc, #276]	; (80034a4 <bme680Init+0x140>)
 8003390:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  gas_sensor.amb_temp = 25;
 8003394:	2319      	movs	r3, #25
 8003396:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

  // Initialize the driver
  if (bme680_init(&gas_sensor) != BME680_OK) {
 800339a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fe f928 	bl	80015f4 <bme680_init>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00f      	beq.n	80033ca <bme680Init+0x66>
	char bme_msg[] = "BME680 Initialization Error\r\n";
 80033aa:	4b3f      	ldr	r3, [pc, #252]	; (80034a8 <bme680Init+0x144>)
 80033ac:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80033b0:	461d      	mov	r5, r3
 80033b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033b6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80033ba:	c407      	stmia	r4!, {r0, r1, r2}
 80033bc:	8023      	strh	r3, [r4, #0]
	DebugSerialOutput(bme_msg);
 80033be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7ff ff2c 	bl	8003220 <DebugSerialOutput>
 80033c8:	e011      	b.n	80033ee <bme680Init+0x8a>
  } else {
	char bme_msg[] = "BME680 Initialized and Ready\r\n";
 80033ca:	4b38      	ldr	r3, [pc, #224]	; (80034ac <bme680Init+0x148>)
 80033cc:	f107 040c 	add.w	r4, r7, #12
 80033d0:	461d      	mov	r5, r3
 80033d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033d6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80033da:	c407      	stmia	r4!, {r0, r1, r2}
 80033dc:	8023      	strh	r3, [r4, #0]
 80033de:	3402      	adds	r4, #2
 80033e0:	0c1b      	lsrs	r3, r3, #16
 80033e2:	7023      	strb	r3, [r4, #0]
	DebugSerialOutput(bme_msg);
 80033e4:	f107 030c 	add.w	r3, r7, #12
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7ff ff19 	bl	8003220 <DebugSerialOutput>
  }

  // Select desired over sampling rates
  gas_sensor.tph_sett.os_hum = BME680_OS_2X;
 80033ee:	2302      	movs	r3, #2
 80033f0:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
  gas_sensor.tph_sett.os_pres = BME680_OS_4X;
 80033f4:	2303      	movs	r3, #3
 80033f6:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
  gas_sensor.tph_sett.os_temp = BME680_OS_8X;
 80033fa:	2304      	movs	r3, #4
 80033fc:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
  gas_sensor.tph_sett.filter = BME680_FILTER_SIZE_3;
 8003400:	2302      	movs	r3, #2
 8003402:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

  /* Set the remaining gas sensor settings and link the heating profile */
  gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
 8003406:	2301      	movs	r3, #1
 8003408:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
  /* Create a ramp heat waveform in 3 steps */
  gas_sensor.gas_sett.heatr_temp = 320; /* degree Celsius */
 800340c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003410:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
  gas_sensor.gas_sett.heatr_dur = 150; /* milliseconds */
 8003414:	2396      	movs	r3, #150	; 0x96
 8003416:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6

  // Set sensor to "always on"
  gas_sensor.power_mode = BME680_FORCED_MODE;
 800341a:	2301      	movs	r3, #1
 800341c:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8

  // Set over sampling settings
  uint8_t required_settings = (BME680_OST_SEL | BME680_OSP_SEL | BME680_OSH_SEL | BME680_FILTER_SEL | BME680_GAS_SENSOR_SEL);
 8003420:	23df      	movs	r3, #223	; 0xdf
 8003422:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  rslt = bme680_set_sensor_settings(required_settings, &gas_sensor);
 8003426:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800342a:	b29b      	uxth	r3, r3
 800342c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003430:	4611      	mov	r1, r2
 8003432:	4618      	mov	r0, r3
 8003434:	f7fe fa1b 	bl	800186e <bme680_set_sensor_settings>
 8003438:	4603      	mov	r3, r0
 800343a:	f887 30bc 	strb.w	r3, [r7, #188]	; 0xbc

  // Set sensor mode
  rslt = bme680_set_sensor_mode(&gas_sensor);
 800343e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003442:	4618      	mov	r0, r3
 8003444:	f7fe fbdb 	bl	8001bfe <bme680_set_sensor_mode>
 8003448:	4603      	mov	r3, r0
 800344a:	f887 30bc 	strb.w	r3, [r7, #188]	; 0xbc

  // Query minimum sampling period
  uint16_t min_sampling_period;
  bme680_get_profile_dur(&min_sampling_period, &gas_sensor);
 800344e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003452:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003456:	4611      	mov	r1, r2
 8003458:	4618      	mov	r0, r3
 800345a:	f7fe fc35 	bl	8001cc8 <bme680_get_profile_dur>

  bmes.result = rslt;
 800345e:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 8003462:	f887 30c0 	strb.w	r3, [r7, #192]	; 0xc0
  bmes.min_period = min_sampling_period;
 8003466:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800346a:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
  bmes.gs = gas_sensor;
 800346e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003472:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8003476:	2258      	movs	r2, #88	; 0x58
 8003478:	4618      	mov	r0, r3
 800347a:	f005 fae5 	bl	8008a48 <memcpy>

  return bmes;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4618      	mov	r0, r3
 8003482:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003486:	225c      	movs	r2, #92	; 0x5c
 8003488:	4619      	mov	r1, r3
 800348a:	f005 fadd 	bl	8008a48 <memcpy>

}//bme680 init
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	3750      	adds	r7, #80	; 0x50
 8003492:	46bd      	mov	sp, r7
 8003494:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8003498:	b004      	add	sp, #16
 800349a:	4770      	bx	lr
 800349c:	08003269 	.word	0x08003269
 80034a0:	080032e9 	.word	0x080032e9
 80034a4:	08003f11 	.word	0x08003f11
 80034a8:	0800d410 	.word	0x0800d410
 80034ac:	0800d430 	.word	0x0800d430

080034b0 <bme680TakeSample>:

void bme680TakeSample(char i2c_reading_buf[100], int8_t rslt, struct bme680_field_data data, uint16_t min_sampling_period, struct bme680_dev gas_sensor) {
 80034b0:	b082      	sub	sp, #8
 80034b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034b4:	b087      	sub	sp, #28
 80034b6:	af04      	add	r7, sp, #16
 80034b8:	6078      	str	r0, [r7, #4]
 80034ba:	f107 0020 	add.w	r0, r7, #32
 80034be:	e880 000c 	stmia.w	r0, {r2, r3}
 80034c2:	460b      	mov	r3, r1
 80034c4:	70fb      	strb	r3, [r7, #3]

	//------------------------Take sample using BME-----------------------------------

	// Allow BME680 to sample environment
	HAL_Delay(min_sampling_period);
 80034c6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80034c8:	4618      	mov	r0, r3
 80034ca:	f000 fd21 	bl	8003f10 <HAL_Delay>

	// Query the sample data
	rslt = bme680_get_sensor_data(&data, &gas_sensor);
 80034ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80034d2:	4619      	mov	r1, r3
 80034d4:	f107 0020 	add.w	r0, r7, #32
 80034d8:	f7fe fc58 	bl	8001d8c <bme680_get_sensor_data>
 80034dc:	4603      	mov	r3, r0
 80034de:	70fb      	strb	r3, [r7, #3]

	// Format results into a readable string
	sprintf(i2c_reading_buf,
	  "Temp: %u.%u degC, Pres: %u.%u hPa, Humi: %u.%u %%rH\r\n",
	  (unsigned int)data.temperature / 100,
 80034e0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80034e4:	461a      	mov	r2, r3
	sprintf(i2c_reading_buf,
 80034e6:	4b25      	ldr	r3, [pc, #148]	; (800357c <bme680TakeSample+0xcc>)
 80034e8:	fba3 2302 	umull	r2, r3, r3, r2
 80034ec:	095e      	lsrs	r6, r3, #5
	  (unsigned int)data.temperature % 100,
 80034ee:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
	sprintf(i2c_reading_buf,
 80034f2:	4a22      	ldr	r2, [pc, #136]	; (800357c <bme680TakeSample+0xcc>)
 80034f4:	fba2 1203 	umull	r1, r2, r2, r3
 80034f8:	0951      	lsrs	r1, r2, #5
 80034fa:	2264      	movs	r2, #100	; 0x64
 80034fc:	fb01 f202 	mul.w	r2, r1, r2
 8003500:	1a99      	subs	r1, r3, r2
	  (unsigned int)data.pressure / 100,
 8003502:	6abb      	ldr	r3, [r7, #40]	; 0x28
	sprintf(i2c_reading_buf,
 8003504:	4a1d      	ldr	r2, [pc, #116]	; (800357c <bme680TakeSample+0xcc>)
 8003506:	fba2 2303 	umull	r2, r3, r2, r3
 800350a:	095c      	lsrs	r4, r3, #5
	  (unsigned int)data.pressure % 100,
 800350c:	6aba      	ldr	r2, [r7, #40]	; 0x28
	sprintf(i2c_reading_buf,
 800350e:	4b1b      	ldr	r3, [pc, #108]	; (800357c <bme680TakeSample+0xcc>)
 8003510:	fba3 0302 	umull	r0, r3, r3, r2
 8003514:	095b      	lsrs	r3, r3, #5
 8003516:	2064      	movs	r0, #100	; 0x64
 8003518:	fb00 f303 	mul.w	r3, r0, r3
 800351c:	1ad3      	subs	r3, r2, r3
	  (unsigned int)data.humidity / 1000,
 800351e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
	sprintf(i2c_reading_buf,
 8003520:	4817      	ldr	r0, [pc, #92]	; (8003580 <bme680TakeSample+0xd0>)
 8003522:	fba0 0202 	umull	r0, r2, r0, r2
 8003526:	0995      	lsrs	r5, r2, #6
	  (unsigned int)data.humidity % 1000);
 8003528:	6af8      	ldr	r0, [r7, #44]	; 0x2c
	sprintf(i2c_reading_buf,
 800352a:	4a15      	ldr	r2, [pc, #84]	; (8003580 <bme680TakeSample+0xd0>)
 800352c:	fba2 c200 	umull	ip, r2, r2, r0
 8003530:	0992      	lsrs	r2, r2, #6
 8003532:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
 8003536:	fb0c f202 	mul.w	r2, ip, r2
 800353a:	1a82      	subs	r2, r0, r2
 800353c:	9203      	str	r2, [sp, #12]
 800353e:	9502      	str	r5, [sp, #8]
 8003540:	9301      	str	r3, [sp, #4]
 8003542:	9400      	str	r4, [sp, #0]
 8003544:	460b      	mov	r3, r1
 8003546:	4632      	mov	r2, r6
 8003548:	490e      	ldr	r1, [pc, #56]	; (8003584 <bme680TakeSample+0xd4>)
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f006 f9ec 	bl	8009928 <siprintf>

	// Publish result to connected PC
	DebugSerialOutput(i2c_reading_buf);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f7ff fe65 	bl	8003220 <DebugSerialOutput>

	// Request the next sample
	if (gas_sensor.power_mode == BME680_FORCED_MODE) {
 8003556:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800355a:	2b01      	cmp	r3, #1
 800355c:	d106      	bne.n	800356c <bme680TakeSample+0xbc>
	  rslt = bme680_set_sensor_mode(&gas_sensor);
 800355e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003562:	4618      	mov	r0, r3
 8003564:	f7fe fb4b 	bl	8001bfe <bme680_set_sensor_mode>
 8003568:	4603      	mov	r3, r0
 800356a:	70fb      	strb	r3, [r7, #3]
	}

	//------------------------Finish BME sample--------------------------------

} // bme680TakeSample function
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8003576:	b002      	add	sp, #8
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	51eb851f 	.word	0x51eb851f
 8003580:	10624dd3 	.word	0x10624dd3
 8003584:	0800d450 	.word	0x0800d450

08003588 <getWindDir>:

void getWindDir(void) {
 8003588:	b5b0      	push	{r4, r5, r7, lr}
 800358a:	b0a8      	sub	sp, #160	; 0xa0
 800358c:	af00      	add	r7, sp, #0

	//------------------------Take Sample Using weather vane ADC ---------------------------
	// init variables
    uint16_t raw;
    char msg[80];
    int numDirs = 7;
 800358e:	2307      	movs	r3, #7
 8003590:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    int inIf = 0;
 8003594:	2300      	movs	r3, #0
 8003596:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    // digital voltage values and the directions they correspond to
    uint16_t vMin[] = {2500, 940, 160, 310, 500, 1580, 4080, 3600};  	// 5V = 4095, 0V = (50) 0
 800359a:	4b38      	ldr	r3, [pc, #224]	; (800367c <getWindDir+0xf4>)
 800359c:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80035a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint16_t vMax[] = {2700, 990, 190, 340, 540, 1620, 4100, 3650};
 80035a6:	4b36      	ldr	r3, [pc, #216]	; (8003680 <getWindDir+0xf8>)
 80035a8:	f107 0420 	add.w	r4, r7, #32
 80035ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    char* windDir[] = {"North","North East","East","South East","South","South West","West","North West"};
 80035b2:	4b34      	ldr	r3, [pc, #208]	; (8003684 <getWindDir+0xfc>)
 80035b4:	463c      	mov	r4, r7
 80035b6:	461d      	mov	r5, r3
 80035b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80035c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // poll the ADC for its value, that value corresponds to a direction
    HAL_ADC_Start(&hadc);
 80035c4:	4830      	ldr	r0, [pc, #192]	; (8003688 <getWindDir+0x100>)
 80035c6:	f000 ff4d 	bl	8004464 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80035ca:	f04f 31ff 	mov.w	r1, #4294967295
 80035ce:	482e      	ldr	r0, [pc, #184]	; (8003688 <getWindDir+0x100>)
 80035d0:	f000 ff8e 	bl	80044f0 <HAL_ADC_PollForConversion>
	raw = HAL_ADC_GetValue(&hadc);
 80035d4:	482c      	ldr	r0, [pc, #176]	; (8003688 <getWindDir+0x100>)
 80035d6:	f001 f822 	bl	800461e <HAL_ADC_GetValue>
 80035da:	4603      	mov	r3, r0
 80035dc:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

	// check that direction, print it to serial
	for(int i=0; i<=numDirs; i++) {
 80035e0:	2300      	movs	r3, #0
 80035e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80035e6:	e030      	b.n	800364a <getWindDir+0xc2>
		if(raw >= vMin[i] && raw <= vMax[i]) {
 80035e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	33a0      	adds	r3, #160	; 0xa0
 80035f0:	443b      	add	r3, r7
 80035f2:	f833 3c70 	ldrh.w	r3, [r3, #-112]
 80035f6:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d320      	bcc.n	8003640 <getWindDir+0xb8>
 80035fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	33a0      	adds	r3, #160	; 0xa0
 8003606:	443b      	add	r3, r7
 8003608:	f833 3c80 	ldrh.w	r3, [r3, #-128]
 800360c:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8003610:	429a      	cmp	r2, r3
 8003612:	d815      	bhi.n	8003640 <getWindDir+0xb8>
			sprintf(msg, "The wind is blowing %s\r\n", windDir[i]);
 8003614:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	33a0      	adds	r3, #160	; 0xa0
 800361c:	443b      	add	r3, r7
 800361e:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 8003622:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003626:	4919      	ldr	r1, [pc, #100]	; (800368c <getWindDir+0x104>)
 8003628:	4618      	mov	r0, r3
 800362a:	f006 f97d 	bl	8009928 <siprintf>
			DebugSerialOutput(msg);
 800362e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003632:	4618      	mov	r0, r3
 8003634:	f7ff fdf4 	bl	8003220 <DebugSerialOutput>
			inIf = 1;
 8003638:	2301      	movs	r3, #1
 800363a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			break;
 800363e:	e00a      	b.n	8003656 <getWindDir+0xce>
	for(int i=0; i<=numDirs; i++) {
 8003640:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003644:	3301      	adds	r3, #1
 8003646:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800364a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800364e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003652:	429a      	cmp	r2, r3
 8003654:	ddc8      	ble.n	80035e8 <getWindDir+0x60>
		}//if
	} //for

	// during rapid wind direction change voltage can fall out of range of values. failsafe.
	if(!inIf) {
 8003656:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10a      	bne.n	8003674 <getWindDir+0xec>
		sprintf(msg, "The wind direction is changing rapidly \r\n");
 800365e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003662:	490b      	ldr	r1, [pc, #44]	; (8003690 <getWindDir+0x108>)
 8003664:	4618      	mov	r0, r3
 8003666:	f006 f95f 	bl	8009928 <siprintf>
		DebugSerialOutput(msg);
 800366a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800366e:	4618      	mov	r0, r3
 8003670:	f7ff fdd6 	bl	8003220 <DebugSerialOutput>
	}

	//------------------------Finish weather vane sample --------------------------------

} // getWindDir function
 8003674:	bf00      	nop
 8003676:	37a0      	adds	r7, #160	; 0xa0
 8003678:	46bd      	mov	sp, r7
 800367a:	bdb0      	pop	{r4, r5, r7, pc}
 800367c:	0800d4d0 	.word	0x0800d4d0
 8003680:	0800d4e0 	.word	0x0800d4e0
 8003684:	0800d4f0 	.word	0x0800d4f0
 8003688:	20000200 	.word	0x20000200
 800368c:	0800d488 	.word	0x0800d488
 8003690:	0800d4a4 	.word	0x0800d4a4
 8003694:	00000000 	.word	0x00000000

08003698 <getRainfall>:

int getRainfall(int rainTips) {
 8003698:	b580      	push	{r7, lr}
 800369a:	b096      	sub	sp, #88	; 0x58
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]

	// interrupt function. Increments every reed closure. twice per tip (debounce)
	rainTips++;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	3301      	adds	r3, #1
 80036a4:	607b      	str	r3, [r7, #4]

	char rainfallMsg[80];
	rainFallInMM = rainTips*0.1397; //2791 per tip, 2x due to debounce
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7fc ff14 	bl	80004d4 <__aeabi_i2d>
 80036ac:	a314      	add	r3, pc, #80	; (adr r3, 8003700 <getRainfall+0x68>)
 80036ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b2:	f7fc ff79 	bl	80005a8 <__aeabi_dmul>
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
 80036ba:	4610      	mov	r0, r2
 80036bc:	4619      	mov	r1, r3
 80036be:	f7fd fa6b 	bl	8000b98 <__aeabi_d2f>
 80036c2:	4603      	mov	r3, r0
 80036c4:	4a10      	ldr	r2, [pc, #64]	; (8003708 <getRainfall+0x70>)
 80036c6:	6013      	str	r3, [r2, #0]

	// only print once every tip, again accounting for debounce
	if(rainTips % 2 == 0) {
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d110      	bne.n	80036f4 <getRainfall+0x5c>
		sprintf(rainfallMsg, "Rainfall since program start: %f mm \r\n", rainFallInMM);
 80036d2:	4b0d      	ldr	r3, [pc, #52]	; (8003708 <getRainfall+0x70>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7fc ff0e 	bl	80004f8 <__aeabi_f2d>
 80036dc:	4602      	mov	r2, r0
 80036de:	460b      	mov	r3, r1
 80036e0:	f107 0008 	add.w	r0, r7, #8
 80036e4:	4909      	ldr	r1, [pc, #36]	; (800370c <getRainfall+0x74>)
 80036e6:	f006 f91f 	bl	8009928 <siprintf>
		DebugSerialOutput(rainfallMsg);
 80036ea:	f107 0308 	add.w	r3, r7, #8
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7ff fd96 	bl	8003220 <DebugSerialOutput>
	}

	return rainTips;
 80036f4:	687b      	ldr	r3, [r7, #4]

} // getRainfall function
 80036f6:	4618      	mov	r0, r3
 80036f8:	3758      	adds	r7, #88	; 0x58
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	89a02752 	.word	0x89a02752
 8003704:	3fc1e1b0 	.word	0x3fc1e1b0
 8003708:	20000484 	.word	0x20000484
 800370c:	0800d3e8 	.word	0x0800d3e8

08003710 <getWindSpeed>:

void getWindSpeed() {
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0

	// interrupt function. Increments every reed closure. ~3 times in a full rotation
	windTips++;
 8003714:	4b04      	ldr	r3, [pc, #16]	; (8003728 <getWindSpeed+0x18>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	3301      	adds	r3, #1
 800371a:	4a03      	ldr	r2, [pc, #12]	; (8003728 <getWindSpeed+0x18>)
 800371c:	6013      	str	r3, [r2, #0]

} // getWindSpeed function
 800371e:	bf00      	nop
 8003720:	46bd      	mov	sp, r7
 8003722:	bc80      	pop	{r7}
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	20000490 	.word	0x20000490
 800372c:	00000000 	.word	0x00000000

08003730 <printWindSpeed>:

void printWindSpeed() {
 8003730:	b590      	push	{r4, r7, lr}
 8003732:	b097      	sub	sp, #92	; 0x5c
 8003734:	af00      	add	r7, sp, #0

	// hold uart msg
	char windMsg[80];

	// calculate a store windspeed taken over 5 sec period
	windValues[windCounts++] = windTips*2.4/5;
 8003736:	4b44      	ldr	r3, [pc, #272]	; (8003848 <printWindSpeed+0x118>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4618      	mov	r0, r3
 800373c:	f7fc feca 	bl	80004d4 <__aeabi_i2d>
 8003740:	a33f      	add	r3, pc, #252	; (adr r3, 8003840 <printWindSpeed+0x110>)
 8003742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003746:	f7fc ff2f 	bl	80005a8 <__aeabi_dmul>
 800374a:	4602      	mov	r2, r0
 800374c:	460b      	mov	r3, r1
 800374e:	4610      	mov	r0, r2
 8003750:	4619      	mov	r1, r3
 8003752:	f04f 0200 	mov.w	r2, #0
 8003756:	4b3d      	ldr	r3, [pc, #244]	; (800384c <printWindSpeed+0x11c>)
 8003758:	f7fd f850 	bl	80007fc <__aeabi_ddiv>
 800375c:	4602      	mov	r2, r0
 800375e:	460b      	mov	r3, r1
 8003760:	4610      	mov	r0, r2
 8003762:	4619      	mov	r1, r3
 8003764:	4b3a      	ldr	r3, [pc, #232]	; (8003850 <printWindSpeed+0x120>)
 8003766:	681c      	ldr	r4, [r3, #0]
 8003768:	1c63      	adds	r3, r4, #1
 800376a:	4a39      	ldr	r2, [pc, #228]	; (8003850 <printWindSpeed+0x120>)
 800376c:	6013      	str	r3, [r2, #0]
 800376e:	f7fd fa13 	bl	8000b98 <__aeabi_d2f>
 8003772:	4603      	mov	r3, r0
 8003774:	4a37      	ldr	r2, [pc, #220]	; (8003854 <printWindSpeed+0x124>)
 8003776:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

	// reset array index if filled. for purposes of averaging
	if(windCounts > 60) {
 800377a:	4b35      	ldr	r3, [pc, #212]	; (8003850 <printWindSpeed+0x120>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2b3c      	cmp	r3, #60	; 0x3c
 8003780:	dd02      	ble.n	8003788 <printWindSpeed+0x58>
		windCounts = 0;
 8003782:	4b33      	ldr	r3, [pc, #204]	; (8003850 <printWindSpeed+0x120>)
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]
	}

	sprintf(windMsg, "Full spins in 5 seconds: %u \r\n", windTips);
 8003788:	4b2f      	ldr	r3, [pc, #188]	; (8003848 <printWindSpeed+0x118>)
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	463b      	mov	r3, r7
 800378e:	4932      	ldr	r1, [pc, #200]	; (8003858 <printWindSpeed+0x128>)
 8003790:	4618      	mov	r0, r3
 8003792:	f006 f8c9 	bl	8009928 <siprintf>
	DebugSerialOutput(windMsg);
 8003796:	463b      	mov	r3, r7
 8003798:	4618      	mov	r0, r3
 800379a:	f7ff fd41 	bl	8003220 <DebugSerialOutput>

	sprintf(windMsg, "Wind speed over 5 seconds: %f \r\n", windValues[windCounts-1]);
 800379e:	4b2c      	ldr	r3, [pc, #176]	; (8003850 <printWindSpeed+0x120>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	3b01      	subs	r3, #1
 80037a4:	4a2b      	ldr	r2, [pc, #172]	; (8003854 <printWindSpeed+0x124>)
 80037a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7fc fea4 	bl	80004f8 <__aeabi_f2d>
 80037b0:	4602      	mov	r2, r0
 80037b2:	460b      	mov	r3, r1
 80037b4:	4638      	mov	r0, r7
 80037b6:	4929      	ldr	r1, [pc, #164]	; (800385c <printWindSpeed+0x12c>)
 80037b8:	f006 f8b6 	bl	8009928 <siprintf>
	DebugSerialOutput(windMsg);
 80037bc:	463b      	mov	r3, r7
 80037be:	4618      	mov	r0, r3
 80037c0:	f7ff fd2e 	bl	8003220 <DebugSerialOutput>

	// find and report average windspeed
	float avgWindSpeed = 0.0;
 80037c4:	f04f 0300 	mov.w	r3, #0
 80037c8:	657b      	str	r3, [r7, #84]	; 0x54
	for(int i = 0; i<60; i++) {
 80037ca:	2300      	movs	r3, #0
 80037cc:	653b      	str	r3, [r7, #80]	; 0x50
 80037ce:	e00c      	b.n	80037ea <printWindSpeed+0xba>
		avgWindSpeed += windValues[i];
 80037d0:	4a20      	ldr	r2, [pc, #128]	; (8003854 <printWindSpeed+0x124>)
 80037d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037d8:	4619      	mov	r1, r3
 80037da:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80037dc:	f7fd fa32 	bl	8000c44 <__addsf3>
 80037e0:	4603      	mov	r3, r0
 80037e2:	657b      	str	r3, [r7, #84]	; 0x54
	for(int i = 0; i<60; i++) {
 80037e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037e6:	3301      	adds	r3, #1
 80037e8:	653b      	str	r3, [r7, #80]	; 0x50
 80037ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037ec:	2b3b      	cmp	r3, #59	; 0x3b
 80037ee:	ddef      	ble.n	80037d0 <printWindSpeed+0xa0>
	}

	if(sampleNumber < 60) {
 80037f0:	4b1b      	ldr	r3, [pc, #108]	; (8003860 <printWindSpeed+0x130>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2b3b      	cmp	r3, #59	; 0x3b
 80037f6:	dc0c      	bgt.n	8003812 <printWindSpeed+0xe2>
		avgWindSpeed = avgWindSpeed / windCounts;
 80037f8:	4b15      	ldr	r3, [pc, #84]	; (8003850 <printWindSpeed+0x120>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7fd fad5 	bl	8000dac <__aeabi_i2f>
 8003802:	4603      	mov	r3, r0
 8003804:	4619      	mov	r1, r3
 8003806:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003808:	f7fd fbd8 	bl	8000fbc <__aeabi_fdiv>
 800380c:	4603      	mov	r3, r0
 800380e:	657b      	str	r3, [r7, #84]	; 0x54
 8003810:	e005      	b.n	800381e <printWindSpeed+0xee>
	}
	else {
		avgWindSpeed = avgWindSpeed / 60;
 8003812:	4914      	ldr	r1, [pc, #80]	; (8003864 <printWindSpeed+0x134>)
 8003814:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003816:	f7fd fbd1 	bl	8000fbc <__aeabi_fdiv>
 800381a:	4603      	mov	r3, r0
 800381c:	657b      	str	r3, [r7, #84]	; 0x54
	}

	sprintf(windMsg, "Avg Wind speed over 15 min: %f km/h \r\n", avgWindSpeed);
 800381e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003820:	f7fc fe6a 	bl	80004f8 <__aeabi_f2d>
 8003824:	4602      	mov	r2, r0
 8003826:	460b      	mov	r3, r1
 8003828:	4638      	mov	r0, r7
 800382a:	490f      	ldr	r1, [pc, #60]	; (8003868 <printWindSpeed+0x138>)
 800382c:	f006 f87c 	bl	8009928 <siprintf>
	DebugSerialOutput(windMsg);
 8003830:	463b      	mov	r3, r7
 8003832:	4618      	mov	r0, r3
 8003834:	f7ff fcf4 	bl	8003220 <DebugSerialOutput>
}
 8003838:	bf00      	nop
 800383a:	375c      	adds	r7, #92	; 0x5c
 800383c:	46bd      	mov	sp, r7
 800383e:	bd90      	pop	{r4, r7, pc}
 8003840:	33333333 	.word	0x33333333
 8003844:	40033333 	.word	0x40033333
 8003848:	20000490 	.word	0x20000490
 800384c:	40140000 	.word	0x40140000
 8003850:	2000048c 	.word	0x2000048c
 8003854:	20000494 	.word	0x20000494
 8003858:	0800d510 	.word	0x0800d510
 800385c:	0800d530 	.word	0x0800d530
 8003860:	20000004 	.word	0x20000004
 8003864:	42700000 	.word	0x42700000
 8003868:	0800d554 	.word	0x0800d554

0800386c <HAL_GPIO_EXTI_Callback>:

// EXTI Line15 10 External Interrupt ISR Handler CallBackFun
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	4603      	mov	r3, r0
 8003874:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == Rain_Tip_Pin) {
 8003876:	88fb      	ldrh	r3, [r7, #6]
 8003878:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800387c:	d107      	bne.n	800388e <HAL_GPIO_EXTI_Callback+0x22>
    	rainTips = getRainfall(rainTips);
 800387e:	4b08      	ldr	r3, [pc, #32]	; (80038a0 <HAL_GPIO_EXTI_Callback+0x34>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4618      	mov	r0, r3
 8003884:	f7ff ff08 	bl	8003698 <getRainfall>
 8003888:	4603      	mov	r3, r0
 800388a:	4a05      	ldr	r2, [pc, #20]	; (80038a0 <HAL_GPIO_EXTI_Callback+0x34>)
 800388c:	6013      	str	r3, [r2, #0]
    }
    if(GPIO_Pin == Wind_speed_Pin) {
 800388e:	88fb      	ldrh	r3, [r7, #6]
 8003890:	2b10      	cmp	r3, #16
 8003892:	d101      	bne.n	8003898 <HAL_GPIO_EXTI_Callback+0x2c>
    	getWindSpeed();
 8003894:	f7ff ff3c 	bl	8003710 <getWindSpeed>
    }
}
 8003898:	bf00      	nop
 800389a:	3708      	adds	r7, #8
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	20000488 	.word	0x20000488

080038a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80038a8:	b672      	cpsid	i
}
 80038aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80038ac:	e7fe      	b.n	80038ac <Error_Handler+0x8>

080038ae <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80038ae:	b480      	push	{r7}
 80038b0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80038b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80038c6:	bf00      	nop
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bc80      	pop	{r7}
 80038cc:	4770      	bx	lr

080038ce <LL_AHB2_GRP1_EnableClock>:
{
 80038ce:	b480      	push	{r7}
 80038d0:	b085      	sub	sp, #20
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80038d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80038e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4013      	ands	r3, r2
 80038f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80038f2:	68fb      	ldr	r3, [r7, #12]
}
 80038f4:	bf00      	nop
 80038f6:	3714      	adds	r7, #20
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bc80      	pop	{r7}
 80038fc:	4770      	bx	lr

080038fe <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80038fe:	b480      	push	{r7}
 8003900:	b085      	sub	sp, #20
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800390a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800390c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4313      	orrs	r3, r2
 8003914:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800391a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4013      	ands	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003922:	68fb      	ldr	r3, [r7, #12]
}
 8003924:	bf00      	nop
 8003926:	3714      	adds	r7, #20
 8003928:	46bd      	mov	sp, r7
 800392a:	bc80      	pop	{r7}
 800392c:	4770      	bx	lr

0800392e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800392e:	b480      	push	{r7}
 8003930:	b085      	sub	sp, #20
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800393a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800393c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4313      	orrs	r3, r2
 8003944:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003946:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800394a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4013      	ands	r3, r2
 8003950:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003952:	68fb      	ldr	r3, [r7, #12]
}
 8003954:	bf00      	nop
 8003956:	3714      	adds	r7, #20
 8003958:	46bd      	mov	sp, r7
 800395a:	bc80      	pop	{r7}
 800395c:	4770      	bx	lr

0800395e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800395e:	b480      	push	{r7}
 8003960:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003962:	bf00      	nop
 8003964:	46bd      	mov	sp, r7
 8003966:	bc80      	pop	{r7}
 8003968:	4770      	bx	lr
	...

0800396c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b088      	sub	sp, #32
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003974:	f107 030c 	add.w	r3, r7, #12
 8003978:	2200      	movs	r2, #0
 800397a:	601a      	str	r2, [r3, #0]
 800397c:	605a      	str	r2, [r3, #4]
 800397e:	609a      	str	r2, [r3, #8]
 8003980:	60da      	str	r2, [r3, #12]
 8003982:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a10      	ldr	r2, [pc, #64]	; (80039cc <HAL_ADC_MspInit+0x60>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d11a      	bne.n	80039c4 <HAL_ADC_MspInit+0x58>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800398e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003992:	f7ff ffcc 	bl	800392e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003996:	2002      	movs	r0, #2
 8003998:	f7ff ff99 	bl	80038ce <LL_AHB2_GRP1_EnableClock>
    /**ADC GPIO Configuration
    PB1     ------> ADC_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800399c:	2302      	movs	r3, #2
 800399e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039a0:	2303      	movs	r3, #3
 80039a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a4:	2300      	movs	r3, #0
 80039a6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039a8:	f107 030c 	add.w	r3, r7, #12
 80039ac:	4619      	mov	r1, r3
 80039ae:	4808      	ldr	r0, [pc, #32]	; (80039d0 <HAL_ADC_MspInit+0x64>)
 80039b0:	f001 f92c 	bl	8004c0c <HAL_GPIO_Init>

    /* ADC interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80039b4:	2200      	movs	r2, #0
 80039b6:	2100      	movs	r1, #0
 80039b8:	2012      	movs	r0, #18
 80039ba:	f001 f8f2 	bl	8004ba2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80039be:	2012      	movs	r0, #18
 80039c0:	f001 f909 	bl	8004bd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }

}
 80039c4:	bf00      	nop
 80039c6:	3720      	adds	r7, #32
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	40012400 	.word	0x40012400
 80039d0:	48000400 	.word	0x48000400

080039d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b096      	sub	sp, #88	; 0x58
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80039e0:	2200      	movs	r2, #0
 80039e2:	601a      	str	r2, [r3, #0]
 80039e4:	605a      	str	r2, [r3, #4]
 80039e6:	609a      	str	r2, [r3, #8]
 80039e8:	60da      	str	r2, [r3, #12]
 80039ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80039ec:	f107 030c 	add.w	r3, r7, #12
 80039f0:	2238      	movs	r2, #56	; 0x38
 80039f2:	2100      	movs	r1, #0
 80039f4:	4618      	mov	r0, r3
 80039f6:	f005 f835 	bl	8008a64 <memset>
  if(hi2c->Instance==I2C1)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a17      	ldr	r2, [pc, #92]	; (8003a5c <HAL_I2C_MspInit+0x88>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d126      	bne.n	8003a52 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003a04:	2340      	movs	r3, #64	; 0x40
 8003a06:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003a08:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003a0c:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a0e:	f107 030c 	add.w	r3, r7, #12
 8003a12:	4618      	mov	r0, r3
 8003a14:	f003 fa64 	bl	8006ee0 <HAL_RCCEx_PeriphCLKConfig>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003a1e:	f7ff ff41 	bl	80038a4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a22:	2002      	movs	r0, #2
 8003a24:	f7ff ff53 	bl	80038ce <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8003a28:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003a2c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a2e:	2312      	movs	r3, #18
 8003a30:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a32:	2300      	movs	r3, #0
 8003a34:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a36:	2300      	movs	r3, #0
 8003a38:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003a3a:	2304      	movs	r3, #4
 8003a3c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a3e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003a42:	4619      	mov	r1, r3
 8003a44:	4806      	ldr	r0, [pc, #24]	; (8003a60 <HAL_I2C_MspInit+0x8c>)
 8003a46:	f001 f8e1 	bl	8004c0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003a4a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003a4e:	f7ff ff56 	bl	80038fe <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003a52:	bf00      	nop
 8003a54:	3758      	adds	r7, #88	; 0x58
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	40005400 	.word	0x40005400
 8003a60:	48000400 	.word	0x48000400

08003a64 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b096      	sub	sp, #88	; 0x58
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a6c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003a70:	2200      	movs	r2, #0
 8003a72:	601a      	str	r2, [r3, #0]
 8003a74:	605a      	str	r2, [r3, #4]
 8003a76:	609a      	str	r2, [r3, #8]
 8003a78:	60da      	str	r2, [r3, #12]
 8003a7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a7c:	f107 030c 	add.w	r3, r7, #12
 8003a80:	2238      	movs	r2, #56	; 0x38
 8003a82:	2100      	movs	r1, #0
 8003a84:	4618      	mov	r0, r3
 8003a86:	f004 ffed 	bl	8008a64 <memset>
  if(hrtc->Instance==RTC)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a19      	ldr	r2, [pc, #100]	; (8003af4 <HAL_RTC_MspInit+0x90>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d12a      	bne.n	8003aea <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003a94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a98:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003a9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a9e:	643b      	str	r3, [r7, #64]	; 0x40

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003aa0:	f107 030c 	add.w	r3, r7, #12
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f003 fa1b 	bl	8006ee0 <HAL_RCCEx_PeriphCLKConfig>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <HAL_RTC_MspInit+0x50>
    {
      Error_Handler();
 8003ab0:	f7ff fef8 	bl	80038a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003ab4:	f7ff fefb 	bl	80038ae <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003ab8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003abc:	f7ff ff1f 	bl	80038fe <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ac0:	2001      	movs	r0, #1
 8003ac2:	f7ff ff04 	bl	80038ce <LL_AHB2_GRP1_EnableClock>
    /**RTC GPIO Configuration
    PA10     ------> RTC_REFIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003ac6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003aca:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003acc:	2302      	movs	r3, #2
 8003ace:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF0_RTC;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003adc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ae6:	f001 f891 	bl	8004c0c <HAL_GPIO_Init>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003aea:	bf00      	nop
 8003aec:	3758      	adds	r7, #88	; 0x58
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	40002800 	.word	0x40002800

08003af8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a09      	ldr	r2, [pc, #36]	; (8003b2c <HAL_TIM_Base_MspInit+0x34>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d10b      	bne.n	8003b22 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003b0a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003b0e:	f7ff ff0e 	bl	800392e <LL_APB2_GRP1_EnableClock>
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8003b12:	2200      	movs	r2, #0
 8003b14:	2100      	movs	r1, #0
 8003b16:	201c      	movs	r0, #28
 8003b18:	f001 f843 	bl	8004ba2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8003b1c:	201c      	movs	r0, #28
 8003b1e:	f001 f85a 	bl	8004bd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003b22:	bf00      	nop
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	40014400 	.word	0x40014400

08003b30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b096      	sub	sp, #88	; 0x58
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b38:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	601a      	str	r2, [r3, #0]
 8003b40:	605a      	str	r2, [r3, #4]
 8003b42:	609a      	str	r2, [r3, #8]
 8003b44:	60da      	str	r2, [r3, #12]
 8003b46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b48:	f107 030c 	add.w	r3, r7, #12
 8003b4c:	2238      	movs	r2, #56	; 0x38
 8003b4e:	2100      	movs	r1, #0
 8003b50:	4618      	mov	r0, r3
 8003b52:	f004 ff87 	bl	8008a64 <memset>
  if(huart->Instance==USART2)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a17      	ldr	r2, [pc, #92]	; (8003bb8 <HAL_UART_MspInit+0x88>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d126      	bne.n	8003bae <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003b60:	2302      	movs	r3, #2
 8003b62:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003b64:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8003b68:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b6a:	f107 030c 	add.w	r3, r7, #12
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f003 f9b6 	bl	8006ee0 <HAL_RCCEx_PeriphCLKConfig>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003b7a:	f7ff fe93 	bl	80038a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b7e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003b82:	f7ff febc 	bl	80038fe <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b86:	2001      	movs	r0, #1
 8003b88:	f7ff fea1 	bl	80038ce <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8003b8c:	230c      	movs	r3, #12
 8003b8e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b90:	2302      	movs	r3, #2
 8003b92:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b94:	2300      	movs	r3, #0
 8003b96:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003b9c:	2307      	movs	r3, #7
 8003b9e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ba0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003baa:	f001 f82f 	bl	8004c0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003bae:	bf00      	nop
 8003bb0:	3758      	adds	r7, #88	; 0x58
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	40004400 	.word	0x40004400

08003bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003bc0:	e7fe      	b.n	8003bc0 <NMI_Handler+0x4>

08003bc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bc6:	e7fe      	b.n	8003bc6 <HardFault_Handler+0x4>

08003bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bcc:	e7fe      	b.n	8003bcc <MemManage_Handler+0x4>

08003bce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003bd2:	e7fe      	b.n	8003bd2 <BusFault_Handler+0x4>

08003bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003bd8:	e7fe      	b.n	8003bd8 <UsageFault_Handler+0x4>

08003bda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003bde:	bf00      	nop
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bc80      	pop	{r7}
 8003be4:	4770      	bx	lr

08003be6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003be6:	b480      	push	{r7}
 8003be8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003bea:	bf00      	nop
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bc80      	pop	{r7}
 8003bf0:	4770      	bx	lr

08003bf2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003bf6:	bf00      	nop
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bc80      	pop	{r7}
 8003bfc:	4770      	bx	lr

08003bfe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c02:	f000 f969 	bl	8003ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c06:	bf00      	nop
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI Line 4 Interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Wind_speed_Pin);
 8003c0e:	2010      	movs	r0, #16
 8003c10:	f001 f974 	bl	8004efc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003c14:	bf00      	nop
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC Interrupt.
  */
void ADC_IRQHandler(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8003c1c:	4802      	ldr	r0, [pc, #8]	; (8003c28 <ADC_IRQHandler+0x10>)
 8003c1e:	f000 fd0a 	bl	8004636 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003c22:	bf00      	nop
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	20000200 	.word	0x20000200

08003c2c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 Global Interrupt.
  */
void TIM16_IRQHandler(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003c30:	4802      	ldr	r0, [pc, #8]	; (8003c3c <TIM16_IRQHandler+0x10>)
 8003c32:	f003 fed7 	bl	80079e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8003c36:	bf00      	nop
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	200002e8 	.word	0x200002e8

08003c40 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Rain_Tip_Pin);
 8003c44:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003c48:	f001 f958 	bl	8004efc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003c4c:	bf00      	nop
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
	return 1;
 8003c54:	2301      	movs	r3, #1
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bc80      	pop	{r7}
 8003c5c:	4770      	bx	lr

08003c5e <_kill>:

int _kill(int pid, int sig)
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b082      	sub	sp, #8
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
 8003c66:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003c68:	f004 feb4 	bl	80089d4 <__errno>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2216      	movs	r2, #22
 8003c70:	601a      	str	r2, [r3, #0]
	return -1;
 8003c72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <_exit>:

void _exit (int status)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b082      	sub	sp, #8
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003c86:	f04f 31ff 	mov.w	r1, #4294967295
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f7ff ffe7 	bl	8003c5e <_kill>
	while (1) {}		/* Make sure we hang here */
 8003c90:	e7fe      	b.n	8003c90 <_exit+0x12>

08003c92 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b086      	sub	sp, #24
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	60f8      	str	r0, [r7, #12]
 8003c9a:	60b9      	str	r1, [r7, #8]
 8003c9c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	617b      	str	r3, [r7, #20]
 8003ca2:	e00a      	b.n	8003cba <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003ca4:	f3af 8000 	nop.w
 8003ca8:	4601      	mov	r1, r0
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	1c5a      	adds	r2, r3, #1
 8003cae:	60ba      	str	r2, [r7, #8]
 8003cb0:	b2ca      	uxtb	r2, r1
 8003cb2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	617b      	str	r3, [r7, #20]
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	dbf0      	blt.n	8003ca4 <_read+0x12>
	}

return len;
 8003cc2:	687b      	ldr	r3, [r7, #4]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3718      	adds	r7, #24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b086      	sub	sp, #24
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cd8:	2300      	movs	r3, #0
 8003cda:	617b      	str	r3, [r7, #20]
 8003cdc:	e009      	b.n	8003cf2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	1c5a      	adds	r2, r3, #1
 8003ce2:	60ba      	str	r2, [r7, #8]
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	3301      	adds	r3, #1
 8003cf0:	617b      	str	r3, [r7, #20]
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	dbf1      	blt.n	8003cde <_write+0x12>
	}
	return len;
 8003cfa:	687b      	ldr	r3, [r7, #4]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3718      	adds	r7, #24
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <_close>:

int _close(int file)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
	return -1;
 8003d0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bc80      	pop	{r7}
 8003d18:	4770      	bx	lr

08003d1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b083      	sub	sp, #12
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
 8003d22:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d2a:	605a      	str	r2, [r3, #4]
	return 0;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bc80      	pop	{r7}
 8003d36:	4770      	bx	lr

08003d38 <_isatty>:

int _isatty(int file)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
	return 1;
 8003d40:	2301      	movs	r3, #1
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bc80      	pop	{r7}
 8003d4a:	4770      	bx	lr

08003d4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
	return 0;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3714      	adds	r7, #20
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bc80      	pop	{r7}
 8003d62:	4770      	bx	lr

08003d64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d6c:	4a14      	ldr	r2, [pc, #80]	; (8003dc0 <_sbrk+0x5c>)
 8003d6e:	4b15      	ldr	r3, [pc, #84]	; (8003dc4 <_sbrk+0x60>)
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d78:	4b13      	ldr	r3, [pc, #76]	; (8003dc8 <_sbrk+0x64>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d102      	bne.n	8003d86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d80:	4b11      	ldr	r3, [pc, #68]	; (8003dc8 <_sbrk+0x64>)
 8003d82:	4a12      	ldr	r2, [pc, #72]	; (8003dcc <_sbrk+0x68>)
 8003d84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d86:	4b10      	ldr	r3, [pc, #64]	; (8003dc8 <_sbrk+0x64>)
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d207      	bcs.n	8003da4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d94:	f004 fe1e 	bl	80089d4 <__errno>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	220c      	movs	r2, #12
 8003d9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003da2:	e009      	b.n	8003db8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003da4:	4b08      	ldr	r3, [pc, #32]	; (8003dc8 <_sbrk+0x64>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003daa:	4b07      	ldr	r3, [pc, #28]	; (8003dc8 <_sbrk+0x64>)
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4413      	add	r3, r2
 8003db2:	4a05      	ldr	r2, [pc, #20]	; (8003dc8 <_sbrk+0x64>)
 8003db4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003db6:	68fb      	ldr	r3, [r7, #12]
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3718      	adds	r7, #24
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	20008000 	.word	0x20008000
 8003dc4:	00000400 	.word	0x00000400
 8003dc8:	200005dc 	.word	0x200005dc
 8003dcc:	200005f8 	.word	0x200005f8

08003dd0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003dd0:	480d      	ldr	r0, [pc, #52]	; (8003e08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003dd2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003dd4:	f7fe fe95 	bl	8002b02 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003dd8:	480c      	ldr	r0, [pc, #48]	; (8003e0c <LoopForever+0x6>)
  ldr r1, =_edata
 8003dda:	490d      	ldr	r1, [pc, #52]	; (8003e10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ddc:	4a0d      	ldr	r2, [pc, #52]	; (8003e14 <LoopForever+0xe>)
  movs r3, #0
 8003dde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003de0:	e002      	b.n	8003de8 <LoopCopyDataInit>

08003de2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003de2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003de4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003de6:	3304      	adds	r3, #4

08003de8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003de8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003dea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003dec:	d3f9      	bcc.n	8003de2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003dee:	4a0a      	ldr	r2, [pc, #40]	; (8003e18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003df0:	4c0a      	ldr	r4, [pc, #40]	; (8003e1c <LoopForever+0x16>)
  movs r3, #0
 8003df2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003df4:	e001      	b.n	8003dfa <LoopFillZerobss>

08003df6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003df6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003df8:	3204      	adds	r2, #4

08003dfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003dfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003dfc:	d3fb      	bcc.n	8003df6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003dfe:	f004 fdef 	bl	80089e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003e02:	f7fe feb1 	bl	8002b68 <main>

08003e06 <LoopForever>:

LoopForever:
    b LoopForever
 8003e06:	e7fe      	b.n	8003e06 <LoopForever>
  ldr   r0, =_estack
 8003e08:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e10:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8003e14:	0800db1c 	.word	0x0800db1c
  ldr r2, =_sbss
 8003e18:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8003e1c:	200005f4 	.word	0x200005f4

08003e20 <AES_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003e20:	e7fe      	b.n	8003e20 <AES_IRQHandler>
	...

08003e24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e2e:	2003      	movs	r0, #3
 8003e30:	f000 feac 	bl	8004b8c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003e34:	f002 fe76 	bl	8006b24 <HAL_RCC_GetHCLKFreq>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	4a09      	ldr	r2, [pc, #36]	; (8003e60 <HAL_Init+0x3c>)
 8003e3c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e3e:	2000      	movs	r0, #0
 8003e40:	f000 f810 	bl	8003e64 <HAL_InitTick>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d002      	beq.n	8003e50 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	71fb      	strb	r3, [r7, #7]
 8003e4e:	e001      	b.n	8003e54 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003e50:	f7ff fd85 	bl	800395e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003e54:	79fb      	ldrb	r3, [r7, #7]
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	20000000 	.word	0x20000000

08003e64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003e70:	4b17      	ldr	r3, [pc, #92]	; (8003ed0 <HAL_InitTick+0x6c>)
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d024      	beq.n	8003ec2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003e78:	f002 fe54 	bl	8006b24 <HAL_RCC_GetHCLKFreq>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	4b14      	ldr	r3, [pc, #80]	; (8003ed0 <HAL_InitTick+0x6c>)
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	4619      	mov	r1, r3
 8003e84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e88:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 feae 	bl	8004bf2 <HAL_SYSTICK_Config>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d10f      	bne.n	8003ebc <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b0f      	cmp	r3, #15
 8003ea0:	d809      	bhi.n	8003eb6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	6879      	ldr	r1, [r7, #4]
 8003ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8003eaa:	f000 fe7a 	bl	8004ba2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003eae:	4a09      	ldr	r2, [pc, #36]	; (8003ed4 <HAL_InitTick+0x70>)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6013      	str	r3, [r2, #0]
 8003eb4:	e007      	b.n	8003ec6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	73fb      	strb	r3, [r7, #15]
 8003eba:	e004      	b.n	8003ec6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	73fb      	strb	r3, [r7, #15]
 8003ec0:	e001      	b.n	8003ec6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	2000000c 	.word	0x2000000c
 8003ed4:	20000008 	.word	0x20000008

08003ed8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003edc:	4b05      	ldr	r3, [pc, #20]	; (8003ef4 <HAL_IncTick+0x1c>)
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	4b05      	ldr	r3, [pc, #20]	; (8003ef8 <HAL_IncTick+0x20>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	4a03      	ldr	r2, [pc, #12]	; (8003ef8 <HAL_IncTick+0x20>)
 8003eea:	6013      	str	r3, [r2, #0]
}
 8003eec:	bf00      	nop
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bc80      	pop	{r7}
 8003ef2:	4770      	bx	lr
 8003ef4:	2000000c 	.word	0x2000000c
 8003ef8:	200005e0 	.word	0x200005e0

08003efc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  return uwTick;
 8003f00:	4b02      	ldr	r3, [pc, #8]	; (8003f0c <HAL_GetTick+0x10>)
 8003f02:	681b      	ldr	r3, [r3, #0]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bc80      	pop	{r7}
 8003f0a:	4770      	bx	lr
 8003f0c:	200005e0 	.word	0x200005e0

08003f10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f18:	f7ff fff0 	bl	8003efc <HAL_GetTick>
 8003f1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f28:	d005      	beq.n	8003f36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f2a:	4b0a      	ldr	r3, [pc, #40]	; (8003f54 <HAL_Delay+0x44>)
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	4413      	add	r3, r2
 8003f34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f36:	bf00      	nop
 8003f38:	f7ff ffe0 	bl	8003efc <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d8f7      	bhi.n	8003f38 <HAL_Delay+0x28>
  {
  }
}
 8003f48:	bf00      	nop
 8003f4a:	bf00      	nop
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	2000000c 	.word	0x2000000c

08003f58 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bc80      	pop	{r7}
 8003f70:	4770      	bx	lr

08003f72 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003f72:	b480      	push	{r7}
 8003f74:	b085      	sub	sp, #20
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	60f8      	str	r0, [r7, #12]
 8003f7a:	60b9      	str	r1, [r7, #8]
 8003f7c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	695a      	ldr	r2, [r3, #20]
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	f003 0304 	and.w	r3, r3, #4
 8003f88:	2107      	movs	r1, #7
 8003f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f8e:	43db      	mvns	r3, r3
 8003f90:	401a      	ands	r2, r3
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	f003 0304 	and.w	r3, r3, #4
 8003f98:	6879      	ldr	r1, [r7, #4]
 8003f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003fa4:	bf00      	nop
 8003fa6:	3714      	adds	r7, #20
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bc80      	pop	{r7}
 8003fac:	4770      	bx	lr

08003fae <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b083      	sub	sp, #12
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
 8003fb6:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	695a      	ldr	r2, [r3, #20]
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	f003 0304 	and.w	r3, r3, #4
 8003fc2:	2107      	movs	r1, #7
 8003fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc8:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bc80      	pop	{r7}
 8003fdc:	4770      	bx	lr

08003fde <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b083      	sub	sp, #12
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e000      	b.n	8003ff8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bc80      	pop	{r7}
 8004000:	4770      	bx	lr

08004002 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8004002:	b480      	push	{r7}
 8004004:	b083      	sub	sp, #12
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	f003 0303 	and.w	r3, r3, #3
}
 8004012:	4618      	mov	r0, r3
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	bc80      	pop	{r7}
 800401a:	4770      	bx	lr

0800401c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800402c:	f023 0317 	bic.w	r3, r3, #23
 8004030:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	bc80      	pop	{r7}
 8004040:	4770      	bx	lr

08004042 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004042:	b480      	push	{r7}
 8004044:	b083      	sub	sp, #12
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004052:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004056:	d101      	bne.n	800405c <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004058:	2301      	movs	r3, #1
 800405a:	e000      	b.n	800405e <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	bc80      	pop	{r7}
 8004066:	4770      	bx	lr

08004068 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004078:	f023 0317 	bic.w	r3, r3, #23
 800407c:	f043 0201 	orr.w	r2, r3, #1
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	bc80      	pop	{r7}
 800408c:	4770      	bx	lr

0800408e <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800408e:	b480      	push	{r7}
 8004090:	b083      	sub	sp, #12
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d101      	bne.n	80040a6 <LL_ADC_IsEnabled+0x18>
 80040a2:	2301      	movs	r3, #1
 80040a4:	e000      	b.n	80040a8 <LL_ADC_IsEnabled+0x1a>
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bc80      	pop	{r7}
 80040b0:	4770      	bx	lr

080040b2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80040b2:	b480      	push	{r7}
 80040b4:	b083      	sub	sp, #12
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80040c2:	f023 0317 	bic.w	r3, r3, #23
 80040c6:	f043 0204 	orr.w	r2, r3, #4
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80040ce:	bf00      	nop
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bc80      	pop	{r7}
 80040d6:	4770      	bx	lr

080040d8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f003 0304 	and.w	r3, r3, #4
 80040e8:	2b04      	cmp	r3, #4
 80040ea:	d101      	bne.n	80040f0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80040ec:	2301      	movs	r3, #1
 80040ee:	e000      	b.n	80040f2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bc80      	pop	{r7}
 80040fa:	4770      	bx	lr

080040fc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b088      	sub	sp, #32
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004104:	2300      	movs	r3, #0
 8004106:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8004108:	2300      	movs	r3, #0
 800410a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 800410c:	2300      	movs	r3, #0
 800410e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004110:	2300      	movs	r3, #0
 8004112:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e19e      	b.n	800445c <HAL_ADC_Init+0x360>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004128:	2b00      	cmp	r3, #0
 800412a:	d109      	bne.n	8004140 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f7ff fc1d 	bl	800396c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4618      	mov	r0, r3
 8004146:	f7ff ff7c 	bl	8004042 <LL_ADC_IsInternalRegulatorEnabled>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d115      	bne.n	800417c <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4618      	mov	r0, r3
 8004156:	f7ff ff61 	bl	800401c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800415a:	4b99      	ldr	r3, [pc, #612]	; (80043c0 <HAL_ADC_Init+0x2c4>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	099b      	lsrs	r3, r3, #6
 8004160:	4a98      	ldr	r2, [pc, #608]	; (80043c4 <HAL_ADC_Init+0x2c8>)
 8004162:	fba2 2303 	umull	r2, r3, r2, r3
 8004166:	099b      	lsrs	r3, r3, #6
 8004168:	3301      	adds	r3, #1
 800416a:	005b      	lsls	r3, r3, #1
 800416c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800416e:	e002      	b.n	8004176 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	3b01      	subs	r3, #1
 8004174:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1f9      	bne.n	8004170 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4618      	mov	r0, r3
 8004182:	f7ff ff5e 	bl	8004042 <LL_ADC_IsInternalRegulatorEnabled>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d10d      	bne.n	80041a8 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004190:	f043 0210 	orr.w	r2, r3, #16
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800419c:	f043 0201 	orr.w	r2, r3, #1
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7ff ff93 	bl	80040d8 <LL_ADC_REG_IsConversionOngoing>
 80041b2:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b8:	f003 0310 	and.w	r3, r3, #16
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f040 8144 	bne.w	800444a <HAL_ADC_Init+0x34e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f040 8140 	bne.w	800444a <HAL_ADC_Init+0x34e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ce:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80041d2:	f043 0202 	orr.w	r2, r3, #2
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4618      	mov	r0, r3
 80041e0:	f7ff ff55 	bl	800408e <LL_ADC_IsEnabled>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f040 80a7 	bne.w	800433a <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	7e1b      	ldrb	r3, [r3, #24]
 80041f4:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80041f6:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	7e5b      	ldrb	r3, [r3, #25]
 80041fc:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80041fe:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	7e9b      	ldrb	r3, [r3, #26]
 8004204:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004206:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800420c:	2a00      	cmp	r2, #0
 800420e:	d002      	beq.n	8004216 <HAL_ADC_Init+0x11a>
 8004210:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004214:	e000      	b.n	8004218 <HAL_ADC_Init+0x11c>
 8004216:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004218:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800421e:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	2b00      	cmp	r3, #0
 8004226:	da04      	bge.n	8004232 <HAL_ADC_Init+0x136>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004230:	e001      	b.n	8004236 <HAL_ADC_Init+0x13a>
 8004232:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8004236:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800423e:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004240:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004242:	69ba      	ldr	r2, [r7, #24]
 8004244:	4313      	orrs	r3, r2
 8004246:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d114      	bne.n	800427c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	7e9b      	ldrb	r3, [r3, #26]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d104      	bne.n	8004264 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004260:	61bb      	str	r3, [r7, #24]
 8004262:	e00b      	b.n	800427c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004268:	f043 0220 	orr.w	r2, r3, #32
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004274:	f043 0201 	orr.w	r2, r3, #1
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004280:	2b00      	cmp	r3, #0
 8004282:	d009      	beq.n	8004298 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004288:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004290:	4313      	orrs	r3, r2
 8004292:	69ba      	ldr	r2, [r7, #24]
 8004294:	4313      	orrs	r3, r2
 8004296:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 80042a2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	6812      	ldr	r2, [r2, #0]
 80042aa:	69b9      	ldr	r1, [r7, #24]
 80042ac:	430b      	orrs	r3, r1
 80042ae:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80042bc:	4313      	orrs	r3, r2
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d111      	bne.n	80042f2 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80042da:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80042e0:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80042e6:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	f043 0301 	orr.w	r3, r3, #1
 80042f0:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	691a      	ldr	r2, [r3, #16]
 80042f8:	4b33      	ldr	r3, [pc, #204]	; (80043c8 <HAL_ADC_Init+0x2cc>)
 80042fa:	4013      	ands	r3, r2
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	6812      	ldr	r2, [r2, #0]
 8004300:	6979      	ldr	r1, [r7, #20]
 8004302:	430b      	orrs	r3, r1
 8004304:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800430e:	d014      	beq.n	800433a <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004318:	d00f      	beq.n	800433a <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800431e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004322:	d00a      	beq.n	800433a <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8004324:	4b29      	ldr	r3, [pc, #164]	; (80043cc <HAL_ADC_Init+0x2d0>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004334:	4925      	ldr	r1, [pc, #148]	; (80043cc <HAL_ADC_Init+0x2d0>)
 8004336:	4313      	orrs	r3, r2
 8004338:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6818      	ldr	r0, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004342:	461a      	mov	r2, r3
 8004344:	2100      	movs	r1, #0
 8004346:	f7ff fe14 	bl	8003f72 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6818      	ldr	r0, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004352:	461a      	mov	r2, r3
 8004354:	491e      	ldr	r1, [pc, #120]	; (80043d0 <HAL_ADC_Init+0x2d4>)
 8004356:	f7ff fe0c 	bl	8003f72 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d108      	bne.n	8004374 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f062 020f 	orn	r2, r2, #15
 8004370:	629a      	str	r2, [r3, #40]	; 0x28
 8004372:	e042      	b.n	80043fa <HAL_ADC_Init+0x2fe>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800437c:	d13d      	bne.n	80043fa <HAL_ADC_Init+0x2fe>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800437e:	2300      	movs	r3, #0
 8004380:	613b      	str	r3, [r7, #16]
 8004382:	e00c      	b.n	800439e <HAL_ADC_Init+0x2a2>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	fa22 f303 	lsr.w	r3, r2, r3
 8004390:	f003 030f 	and.w	r3, r3, #15
 8004394:	2b0f      	cmp	r3, #15
 8004396:	d006      	beq.n	80043a6 <HAL_ADC_Init+0x2aa>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	3301      	adds	r3, #1
 800439c:	613b      	str	r3, [r7, #16]
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	2b07      	cmp	r3, #7
 80043a2:	d9ef      	bls.n	8004384 <HAL_ADC_Init+0x288>
 80043a4:	e000      	b.n	80043a8 <HAL_ADC_Init+0x2ac>
            ADC_CHSELR_SQ1)
        {
          break;
 80043a6:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d112      	bne.n	80043d4 <HAL_ADC_Init+0x2d8>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f062 020f 	orn	r2, r2, #15
 80043bc:	629a      	str	r2, [r3, #40]	; 0x28
 80043be:	e01c      	b.n	80043fa <HAL_ADC_Init+0x2fe>
 80043c0:	20000000 	.word	0x20000000
 80043c4:	053e2d63 	.word	0x053e2d63
 80043c8:	1ffffc02 	.word	0x1ffffc02
 80043cc:	40012708 	.word	0x40012708
 80043d0:	03ffff04 	.word	0x03ffff04
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	69db      	ldr	r3, [r3, #28]
 80043de:	3b01      	subs	r3, #1
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	f003 031c 	and.w	r3, r3, #28
 80043e6:	f06f 020f 	mvn.w	r2, #15
 80043ea:	fa02 f103 	lsl.w	r1, r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	430a      	orrs	r2, r1
 80043f8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2100      	movs	r1, #0
 8004400:	4618      	mov	r0, r3
 8004402:	f7ff fdd4 	bl	8003fae <LL_ADC_GetSamplingTimeCommonChannels>
 8004406:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800440c:	429a      	cmp	r2, r3
 800440e:	d10b      	bne.n	8004428 <HAL_ADC_Init+0x32c>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800441a:	f023 0303 	bic.w	r3, r3, #3
 800441e:	f043 0201 	orr.w	r2, r3, #1
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004426:	e018      	b.n	800445a <HAL_ADC_Init+0x35e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800442c:	f023 0312 	bic.w	r3, r3, #18
 8004430:	f043 0210 	orr.w	r2, r3, #16
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800443c:	f043 0201 	orr.w	r2, r3, #1
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004448:	e007      	b.n	800445a <HAL_ADC_Init+0x35e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800444e:	f043 0210 	orr.w	r2, r3, #16
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 800445a:	7ffb      	ldrb	r3, [r7, #31]
}
 800445c:	4618      	mov	r0, r3
 800445e:	3720      	adds	r7, #32
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4618      	mov	r0, r3
 8004472:	f7ff fe31 	bl	80040d8 <LL_ADC_REG_IsConversionOngoing>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d132      	bne.n	80044e2 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004482:	2b01      	cmp	r3, #1
 8004484:	d101      	bne.n	800448a <HAL_ADC_Start+0x26>
 8004486:	2302      	movs	r3, #2
 8004488:	e02e      	b.n	80044e8 <HAL_ADC_Start+0x84>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 fa04 	bl	80048a0 <ADC_Enable>
 8004498:	4603      	mov	r3, r0
 800449a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800449c:	7bfb      	ldrb	r3, [r7, #15]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d11a      	bne.n	80044d8 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80044aa:	f023 0301 	bic.w	r3, r3, #1
 80044ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	221c      	movs	r2, #28
 80044c2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7ff fdee 	bl	80040b2 <LL_ADC_REG_StartConversion>
 80044d6:	e006      	b.n	80044e6 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80044e0:	e001      	b.n	80044e6 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80044e2:	2302      	movs	r3, #2
 80044e4:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 80044e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	2b08      	cmp	r3, #8
 8004500:	d102      	bne.n	8004508 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8004502:	2308      	movs	r3, #8
 8004504:	60fb      	str	r3, [r7, #12]
 8004506:	e010      	b.n	800452a <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b00      	cmp	r3, #0
 8004514:	d007      	beq.n	8004526 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800451a:	f043 0220 	orr.w	r2, r3, #32
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e077      	b.n	8004616 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8004526:	2304      	movs	r3, #4
 8004528:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800452a:	f7ff fce7 	bl	8003efc <HAL_GetTick>
 800452e:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004530:	e021      	b.n	8004576 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004538:	d01d      	beq.n	8004576 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800453a:	f7ff fcdf 	bl	8003efc <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	429a      	cmp	r2, r3
 8004548:	d302      	bcc.n	8004550 <HAL_ADC_PollForConversion+0x60>
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d112      	bne.n	8004576 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	4013      	ands	r3, r2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d10b      	bne.n	8004576 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004562:	f043 0204 	orr.w	r2, r3, #4
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e04f      	b.n	8004616 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	4013      	ands	r3, r2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d0d6      	beq.n	8004532 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004588:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4618      	mov	r0, r3
 8004596:	f7ff fd22 	bl	8003fde <LL_ADC_REG_IsTriggerSourceSWStart>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d031      	beq.n	8004604 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	7e9b      	ldrb	r3, [r3, #26]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d12d      	bne.n	8004604 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0308 	and.w	r3, r3, #8
 80045b2:	2b08      	cmp	r3, #8
 80045b4:	d126      	bne.n	8004604 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7ff fd8c 	bl	80040d8 <LL_ADC_REG_IsConversionOngoing>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d112      	bne.n	80045ec <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	685a      	ldr	r2, [r3, #4]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f022 020c 	bic.w	r2, r2, #12
 80045d4:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045de:	f023 0301 	bic.w	r3, r3, #1
 80045e2:	f043 0201 	orr.w	r2, r3, #1
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	659a      	str	r2, [r3, #88]	; 0x58
 80045ea:	e00b      	b.n	8004604 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f0:	f043 0220 	orr.w	r2, r3, #32
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045fc:	f043 0201 	orr.w	r2, r3, #1
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	7e1b      	ldrb	r3, [r3, #24]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d103      	bne.n	8004614 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	220c      	movs	r2, #12
 8004612:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}

0800461e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800461e:	b480      	push	{r7}
 8004620:	b083      	sub	sp, #12
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800462c:	4618      	mov	r0, r3
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	bc80      	pop	{r7}
 8004634:	4770      	bx	lr

08004636 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004636:	b580      	push	{r7, lr}
 8004638:	b086      	sub	sp, #24
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800463e:	2300      	movs	r3, #0
 8004640:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d017      	beq.n	800468c <HAL_ADC_IRQHandler+0x56>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	2b00      	cmp	r3, #0
 8004664:	d012      	beq.n	800468c <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800466a:	f003 0310 	and.w	r3, r3, #16
 800466e:	2b00      	cmp	r3, #0
 8004670:	d105      	bne.n	800467e <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004676:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 f9a6 	bl	80049d0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2202      	movs	r2, #2
 800468a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	f003 0304 	and.w	r3, r3, #4
 8004692:	2b00      	cmp	r3, #0
 8004694:	d004      	beq.n	80046a0 <HAL_ADC_IRQHandler+0x6a>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f003 0304 	and.w	r3, r3, #4
 800469c:	2b00      	cmp	r3, #0
 800469e:	d109      	bne.n	80046b4 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d051      	beq.n	800474e <HAL_ADC_IRQHandler+0x118>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f003 0308 	and.w	r3, r3, #8
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d04c      	beq.n	800474e <HAL_ADC_IRQHandler+0x118>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b8:	f003 0310 	and.w	r3, r3, #16
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d105      	bne.n	80046cc <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7ff fc84 	bl	8003fde <LL_ADC_REG_IsTriggerSourceSWStart>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d031      	beq.n	8004740 <HAL_ADC_IRQHandler+0x10a>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	7e9b      	ldrb	r3, [r3, #26]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d12d      	bne.n	8004740 <HAL_ADC_IRQHandler+0x10a>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0308 	and.w	r3, r3, #8
 80046ee:	2b08      	cmp	r3, #8
 80046f0:	d126      	bne.n	8004740 <HAL_ADC_IRQHandler+0x10a>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7ff fcee 	bl	80040d8 <LL_ADC_REG_IsConversionOngoing>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d112      	bne.n	8004728 <HAL_ADC_IRQHandler+0xf2>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	685a      	ldr	r2, [r3, #4]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f022 020c 	bic.w	r2, r2, #12
 8004710:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004716:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800471a:	f023 0301 	bic.w	r3, r3, #1
 800471e:	f043 0201 	orr.w	r2, r3, #1
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	659a      	str	r2, [r3, #88]	; 0x58
 8004726:	e00b      	b.n	8004740 <HAL_ADC_IRQHandler+0x10a>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800472c:	f043 0220 	orr.w	r2, r3, #32
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004738:	f043 0201 	orr.w	r2, r3, #1
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 f892 	bl	800486a <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	220c      	movs	r2, #12
 800474c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004754:	2b00      	cmp	r3, #0
 8004756:	d011      	beq.n	800477c <HAL_ADC_IRQHandler+0x146>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00c      	beq.n	800477c <HAL_ADC_IRQHandler+0x146>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004766:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f884 	bl	800487c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2280      	movs	r2, #128	; 0x80
 800477a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004782:	2b00      	cmp	r3, #0
 8004784:	d012      	beq.n	80047ac <HAL_ADC_IRQHandler+0x176>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00d      	beq.n	80047ac <HAL_ADC_IRQHandler+0x176>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004794:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f000 f905 	bl	80049ac <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047aa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d012      	beq.n	80047dc <HAL_ADC_IRQHandler+0x1a6>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00d      	beq.n	80047dc <HAL_ADC_IRQHandler+0x1a6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 f8f6 	bl	80049be <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047da:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	f003 0310 	and.w	r3, r3, #16
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d02b      	beq.n	800483e <HAL_ADC_IRQHandler+0x208>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f003 0310 	and.w	r3, r3, #16
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d026      	beq.n	800483e <HAL_ADC_IRQHandler+0x208>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d102      	bne.n	80047fe <HAL_ADC_IRQHandler+0x1c8>
    {
      overrun_error = 1UL;
 80047f8:	2301      	movs	r3, #1
 80047fa:	617b      	str	r3, [r7, #20]
 80047fc:	e009      	b.n	8004812 <HAL_ADC_IRQHandler+0x1dc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4618      	mov	r0, r3
 8004804:	f7ff fbfd 	bl	8004002 <LL_ADC_REG_GetDMATransfer>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d001      	beq.n	8004812 <HAL_ADC_IRQHandler+0x1dc>
      {
        overrun_error = 1UL;
 800480e:	2301      	movs	r3, #1
 8004810:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d10e      	bne.n	8004836 <HAL_ADC_IRQHandler+0x200>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800481c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004828:	f043 0202 	orr.w	r2, r3, #2
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f000 f82c 	bl	800488e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2210      	movs	r2, #16
 800483c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00c      	beq.n	8004862 <HAL_ADC_IRQHandler+0x22c>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d007      	beq.n	8004862 <HAL_ADC_IRQHandler+0x22c>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 f8c5 	bl	80049e2 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004860:	601a      	str	r2, [r3, #0]
  }
}
 8004862:	bf00      	nop
 8004864:	3718      	adds	r7, #24
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800486a:	b480      	push	{r7}
 800486c:	b083      	sub	sp, #12
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004872:	bf00      	nop
 8004874:	370c      	adds	r7, #12
 8004876:	46bd      	mov	sp, r7
 8004878:	bc80      	pop	{r7}
 800487a:	4770      	bx	lr

0800487c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	bc80      	pop	{r7}
 800488c:	4770      	bx	lr

0800488e <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800488e:	b480      	push	{r7}
 8004890:	b083      	sub	sp, #12
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004896:	bf00      	nop
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	bc80      	pop	{r7}
 800489e:	4770      	bx	lr

080048a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80048a8:	2300      	movs	r3, #0
 80048aa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7ff fbec 	bl	800408e <LL_ADC_IsEnabled>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d169      	bne.n	8004990 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	689a      	ldr	r2, [r3, #8]
 80048c2:	4b36      	ldr	r3, [pc, #216]	; (800499c <ADC_Enable+0xfc>)
 80048c4:	4013      	ands	r3, r2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00d      	beq.n	80048e6 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ce:	f043 0210 	orr.w	r2, r3, #16
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048da:	f043 0201 	orr.w	r2, r3, #1
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e055      	b.n	8004992 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7ff fbbc 	bl	8004068 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80048f0:	482b      	ldr	r0, [pc, #172]	; (80049a0 <ADC_Enable+0x100>)
 80048f2:	f7ff fb31 	bl	8003f58 <LL_ADC_GetCommonPathInternalCh>
 80048f6:	4603      	mov	r3, r0
 80048f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00f      	beq.n	8004920 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004900:	4b28      	ldr	r3, [pc, #160]	; (80049a4 <ADC_Enable+0x104>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	099b      	lsrs	r3, r3, #6
 8004906:	4a28      	ldr	r2, [pc, #160]	; (80049a8 <ADC_Enable+0x108>)
 8004908:	fba2 2303 	umull	r2, r3, r2, r3
 800490c:	099b      	lsrs	r3, r3, #6
 800490e:	3301      	adds	r3, #1
 8004910:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004912:	e002      	b.n	800491a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	3b01      	subs	r3, #1
 8004918:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1f9      	bne.n	8004914 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	7e5b      	ldrb	r3, [r3, #25]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d033      	beq.n	8004990 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004928:	f7ff fae8 	bl	8003efc <HAL_GetTick>
 800492c:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800492e:	e028      	b.n	8004982 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4618      	mov	r0, r3
 8004936:	f7ff fbaa 	bl	800408e <LL_ADC_IsEnabled>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d104      	bne.n	800494a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4618      	mov	r0, r3
 8004946:	f7ff fb8f 	bl	8004068 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800494a:	f7ff fad7 	bl	8003efc <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	2b02      	cmp	r3, #2
 8004956:	d914      	bls.n	8004982 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b01      	cmp	r3, #1
 8004964:	d00d      	beq.n	8004982 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800496a:	f043 0210 	orr.w	r2, r3, #16
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004976:	f043 0201 	orr.w	r2, r3, #1
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e007      	b.n	8004992 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0301 	and.w	r3, r3, #1
 800498c:	2b01      	cmp	r3, #1
 800498e:	d1cf      	bne.n	8004930 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	80000017 	.word	0x80000017
 80049a0:	40012708 	.word	0x40012708
 80049a4:	20000000 	.word	0x20000000
 80049a8:	053e2d63 	.word	0x053e2d63

080049ac <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bc80      	pop	{r7}
 80049bc:	4770      	bx	lr

080049be <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80049be:	b480      	push	{r7}
 80049c0:	b083      	sub	sp, #12
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80049c6:	bf00      	nop
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bc80      	pop	{r7}
 80049ce:	4770      	bx	lr

080049d0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80049d8:	bf00      	nop
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	bc80      	pop	{r7}
 80049e0:	4770      	bx	lr

080049e2 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 80049e2:	b480      	push	{r7}
 80049e4:	b083      	sub	sp, #12
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 80049ea:	bf00      	nop
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bc80      	pop	{r7}
 80049f2:	4770      	bx	lr

080049f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f003 0307 	and.w	r3, r3, #7
 8004a02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a04:	4b0c      	ldr	r3, [pc, #48]	; (8004a38 <__NVIC_SetPriorityGrouping+0x44>)
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a10:	4013      	ands	r3, r2
 8004a12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a26:	4a04      	ldr	r2, [pc, #16]	; (8004a38 <__NVIC_SetPriorityGrouping+0x44>)
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	60d3      	str	r3, [r2, #12]
}
 8004a2c:	bf00      	nop
 8004a2e:	3714      	adds	r7, #20
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bc80      	pop	{r7}
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	e000ed00 	.word	0xe000ed00

08004a3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a40:	4b04      	ldr	r3, [pc, #16]	; (8004a54 <__NVIC_GetPriorityGrouping+0x18>)
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	0a1b      	lsrs	r3, r3, #8
 8004a46:	f003 0307 	and.w	r3, r3, #7
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bc80      	pop	{r7}
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	e000ed00 	.word	0xe000ed00

08004a58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	4603      	mov	r3, r0
 8004a60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	db0b      	blt.n	8004a82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a6a:	79fb      	ldrb	r3, [r7, #7]
 8004a6c:	f003 021f 	and.w	r2, r3, #31
 8004a70:	4906      	ldr	r1, [pc, #24]	; (8004a8c <__NVIC_EnableIRQ+0x34>)
 8004a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a76:	095b      	lsrs	r3, r3, #5
 8004a78:	2001      	movs	r0, #1
 8004a7a:	fa00 f202 	lsl.w	r2, r0, r2
 8004a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004a82:	bf00      	nop
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bc80      	pop	{r7}
 8004a8a:	4770      	bx	lr
 8004a8c:	e000e100 	.word	0xe000e100

08004a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	4603      	mov	r3, r0
 8004a98:	6039      	str	r1, [r7, #0]
 8004a9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	db0a      	blt.n	8004aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	b2da      	uxtb	r2, r3
 8004aa8:	490c      	ldr	r1, [pc, #48]	; (8004adc <__NVIC_SetPriority+0x4c>)
 8004aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aae:	0112      	lsls	r2, r2, #4
 8004ab0:	b2d2      	uxtb	r2, r2
 8004ab2:	440b      	add	r3, r1
 8004ab4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ab8:	e00a      	b.n	8004ad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	b2da      	uxtb	r2, r3
 8004abe:	4908      	ldr	r1, [pc, #32]	; (8004ae0 <__NVIC_SetPriority+0x50>)
 8004ac0:	79fb      	ldrb	r3, [r7, #7]
 8004ac2:	f003 030f 	and.w	r3, r3, #15
 8004ac6:	3b04      	subs	r3, #4
 8004ac8:	0112      	lsls	r2, r2, #4
 8004aca:	b2d2      	uxtb	r2, r2
 8004acc:	440b      	add	r3, r1
 8004ace:	761a      	strb	r2, [r3, #24]
}
 8004ad0:	bf00      	nop
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bc80      	pop	{r7}
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	e000e100 	.word	0xe000e100
 8004ae0:	e000ed00 	.word	0xe000ed00

08004ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b089      	sub	sp, #36	; 0x24
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f003 0307 	and.w	r3, r3, #7
 8004af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	f1c3 0307 	rsb	r3, r3, #7
 8004afe:	2b04      	cmp	r3, #4
 8004b00:	bf28      	it	cs
 8004b02:	2304      	movcs	r3, #4
 8004b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	3304      	adds	r3, #4
 8004b0a:	2b06      	cmp	r3, #6
 8004b0c:	d902      	bls.n	8004b14 <NVIC_EncodePriority+0x30>
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	3b03      	subs	r3, #3
 8004b12:	e000      	b.n	8004b16 <NVIC_EncodePriority+0x32>
 8004b14:	2300      	movs	r3, #0
 8004b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b18:	f04f 32ff 	mov.w	r2, #4294967295
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b22:	43da      	mvns	r2, r3
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	401a      	ands	r2, r3
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	fa01 f303 	lsl.w	r3, r1, r3
 8004b36:	43d9      	mvns	r1, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b3c:	4313      	orrs	r3, r2
         );
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3724      	adds	r7, #36	; 0x24
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bc80      	pop	{r7}
 8004b46:	4770      	bx	lr

08004b48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	3b01      	subs	r3, #1
 8004b54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b58:	d301      	bcc.n	8004b5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e00f      	b.n	8004b7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b5e:	4a0a      	ldr	r2, [pc, #40]	; (8004b88 <SysTick_Config+0x40>)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	3b01      	subs	r3, #1
 8004b64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b66:	210f      	movs	r1, #15
 8004b68:	f04f 30ff 	mov.w	r0, #4294967295
 8004b6c:	f7ff ff90 	bl	8004a90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b70:	4b05      	ldr	r3, [pc, #20]	; (8004b88 <SysTick_Config+0x40>)
 8004b72:	2200      	movs	r2, #0
 8004b74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b76:	4b04      	ldr	r3, [pc, #16]	; (8004b88 <SysTick_Config+0x40>)
 8004b78:	2207      	movs	r2, #7
 8004b7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3708      	adds	r7, #8
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	e000e010 	.word	0xe000e010

08004b8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f7ff ff2d 	bl	80049f4 <__NVIC_SetPriorityGrouping>
}
 8004b9a:	bf00      	nop
 8004b9c:	3708      	adds	r7, #8
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b086      	sub	sp, #24
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	4603      	mov	r3, r0
 8004baa:	60b9      	str	r1, [r7, #8]
 8004bac:	607a      	str	r2, [r7, #4]
 8004bae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004bb0:	f7ff ff44 	bl	8004a3c <__NVIC_GetPriorityGrouping>
 8004bb4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	68b9      	ldr	r1, [r7, #8]
 8004bba:	6978      	ldr	r0, [r7, #20]
 8004bbc:	f7ff ff92 	bl	8004ae4 <NVIC_EncodePriority>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bc6:	4611      	mov	r1, r2
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7ff ff61 	bl	8004a90 <__NVIC_SetPriority>
}
 8004bce:	bf00      	nop
 8004bd0:	3718      	adds	r7, #24
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b082      	sub	sp, #8
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	4603      	mov	r3, r0
 8004bde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f7ff ff37 	bl	8004a58 <__NVIC_EnableIRQ>
}
 8004bea:	bf00      	nop
 8004bec:	3708      	adds	r7, #8
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b082      	sub	sp, #8
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7ff ffa4 	bl	8004b48 <SysTick_Config>
 8004c00:	4603      	mov	r3, r0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3708      	adds	r7, #8
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
	...

08004c0c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b087      	sub	sp, #28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004c16:	2300      	movs	r3, #0
 8004c18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c1a:	e140      	b.n	8004e9e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	2101      	movs	r1, #1
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	fa01 f303 	lsl.w	r3, r1, r3
 8004c28:	4013      	ands	r3, r2
 8004c2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f000 8132 	beq.w	8004e98 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f003 0303 	and.w	r3, r3, #3
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d005      	beq.n	8004c4c <HAL_GPIO_Init+0x40>
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f003 0303 	and.w	r3, r3, #3
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d130      	bne.n	8004cae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	005b      	lsls	r3, r3, #1
 8004c56:	2203      	movs	r2, #3
 8004c58:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5c:	43db      	mvns	r3, r3
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	4013      	ands	r3, r2
 8004c62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	68da      	ldr	r2, [r3, #12]
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	005b      	lsls	r3, r3, #1
 8004c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c70:	693a      	ldr	r2, [r7, #16]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c82:	2201      	movs	r2, #1
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8a:	43db      	mvns	r3, r3
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	4013      	ands	r3, r2
 8004c90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	091b      	lsrs	r3, r3, #4
 8004c98:	f003 0201 	and.w	r2, r3, #1
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f003 0303 	and.w	r3, r3, #3
 8004cb6:	2b03      	cmp	r3, #3
 8004cb8:	d017      	beq.n	8004cea <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	005b      	lsls	r3, r3, #1
 8004cc4:	2203      	movs	r2, #3
 8004cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cca:	43db      	mvns	r3, r3
 8004ccc:	693a      	ldr	r2, [r7, #16]
 8004cce:	4013      	ands	r3, r2
 8004cd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	689a      	ldr	r2, [r3, #8]
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	005b      	lsls	r3, r3, #1
 8004cda:	fa02 f303 	lsl.w	r3, r2, r3
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	693a      	ldr	r2, [r7, #16]
 8004ce8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f003 0303 	and.w	r3, r3, #3
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d123      	bne.n	8004d3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	08da      	lsrs	r2, r3, #3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	3208      	adds	r2, #8
 8004cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	f003 0307 	and.w	r3, r3, #7
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	220f      	movs	r2, #15
 8004d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d12:	43db      	mvns	r3, r3
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	4013      	ands	r3, r2
 8004d18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	691a      	ldr	r2, [r3, #16]
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	f003 0307 	and.w	r3, r3, #7
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	08da      	lsrs	r2, r3, #3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	3208      	adds	r2, #8
 8004d38:	6939      	ldr	r1, [r7, #16]
 8004d3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	005b      	lsls	r3, r3, #1
 8004d48:	2203      	movs	r2, #3
 8004d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4e:	43db      	mvns	r3, r3
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	4013      	ands	r3, r2
 8004d54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f003 0203 	and.w	r2, r3, #3
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	005b      	lsls	r3, r3, #1
 8004d62:	fa02 f303 	lsl.w	r3, r2, r3
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	f000 808c 	beq.w	8004e98 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004d80:	4a4e      	ldr	r2, [pc, #312]	; (8004ebc <HAL_GPIO_Init+0x2b0>)
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	089b      	lsrs	r3, r3, #2
 8004d86:	3302      	adds	r3, #2
 8004d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	f003 0303 	and.w	r3, r3, #3
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	2207      	movs	r2, #7
 8004d98:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9c:	43db      	mvns	r3, r3
 8004d9e:	693a      	ldr	r2, [r7, #16]
 8004da0:	4013      	ands	r3, r2
 8004da2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004daa:	d00d      	beq.n	8004dc8 <HAL_GPIO_Init+0x1bc>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a44      	ldr	r2, [pc, #272]	; (8004ec0 <HAL_GPIO_Init+0x2b4>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d007      	beq.n	8004dc4 <HAL_GPIO_Init+0x1b8>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a43      	ldr	r2, [pc, #268]	; (8004ec4 <HAL_GPIO_Init+0x2b8>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d101      	bne.n	8004dc0 <HAL_GPIO_Init+0x1b4>
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	e004      	b.n	8004dca <HAL_GPIO_Init+0x1be>
 8004dc0:	2307      	movs	r3, #7
 8004dc2:	e002      	b.n	8004dca <HAL_GPIO_Init+0x1be>
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e000      	b.n	8004dca <HAL_GPIO_Init+0x1be>
 8004dc8:	2300      	movs	r3, #0
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	f002 0203 	and.w	r2, r2, #3
 8004dd0:	0092      	lsls	r2, r2, #2
 8004dd2:	4093      	lsls	r3, r2
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004dda:	4938      	ldr	r1, [pc, #224]	; (8004ebc <HAL_GPIO_Init+0x2b0>)
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	089b      	lsrs	r3, r3, #2
 8004de0:	3302      	adds	r3, #2
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004de8:	4b37      	ldr	r3, [pc, #220]	; (8004ec8 <HAL_GPIO_Init+0x2bc>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	43db      	mvns	r3, r3
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	4013      	ands	r3, r2
 8004df6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d003      	beq.n	8004e0c <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004e0c:	4a2e      	ldr	r2, [pc, #184]	; (8004ec8 <HAL_GPIO_Init+0x2bc>)
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004e12:	4b2d      	ldr	r3, [pc, #180]	; (8004ec8 <HAL_GPIO_Init+0x2bc>)
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	43db      	mvns	r3, r3
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	4013      	ands	r3, r2
 8004e20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d003      	beq.n	8004e36 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004e36:	4a24      	ldr	r2, [pc, #144]	; (8004ec8 <HAL_GPIO_Init+0x2bc>)
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8004e3c:	4b22      	ldr	r3, [pc, #136]	; (8004ec8 <HAL_GPIO_Init+0x2bc>)
 8004e3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e42:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	43db      	mvns	r3, r3
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d003      	beq.n	8004e62 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8004e62:	4a19      	ldr	r2, [pc, #100]	; (8004ec8 <HAL_GPIO_Init+0x2bc>)
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8004e6a:	4b17      	ldr	r3, [pc, #92]	; (8004ec8 <HAL_GPIO_Init+0x2bc>)
 8004e6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e70:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	43db      	mvns	r3, r3
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	4013      	ands	r3, r2
 8004e7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d003      	beq.n	8004e90 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8004e90:	4a0d      	ldr	r2, [pc, #52]	; (8004ec8 <HAL_GPIO_Init+0x2bc>)
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f47f aeb7 	bne.w	8004c1c <HAL_GPIO_Init+0x10>
  }
}
 8004eae:	bf00      	nop
 8004eb0:	bf00      	nop
 8004eb2:	371c      	adds	r7, #28
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bc80      	pop	{r7}
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	40010000 	.word	0x40010000
 8004ec0:	48000400 	.word	0x48000400
 8004ec4:	48000800 	.word	0x48000800
 8004ec8:	58000800 	.word	0x58000800

08004ecc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	807b      	strh	r3, [r7, #2]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004edc:	787b      	ldrb	r3, [r7, #1]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d003      	beq.n	8004eea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ee2:	887a      	ldrh	r2, [r7, #2]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ee8:	e002      	b.n	8004ef0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004eea:	887a      	ldrh	r2, [r7, #2]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004ef0:	bf00      	nop
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bc80      	pop	{r7}
 8004ef8:	4770      	bx	lr
	...

08004efc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	4603      	mov	r3, r0
 8004f04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004f06:	4b08      	ldr	r3, [pc, #32]	; (8004f28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f08:	68da      	ldr	r2, [r3, #12]
 8004f0a:	88fb      	ldrh	r3, [r7, #6]
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d006      	beq.n	8004f20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004f12:	4a05      	ldr	r2, [pc, #20]	; (8004f28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f14:	88fb      	ldrh	r3, [r7, #6]
 8004f16:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004f18:	88fb      	ldrh	r3, [r7, #6]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7fe fca6 	bl	800386c <HAL_GPIO_EXTI_Callback>
  }
}
 8004f20:	bf00      	nop
 8004f22:	3708      	adds	r7, #8
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	58000800 	.word	0x58000800

08004f2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e081      	b.n	8005042 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d106      	bne.n	8004f58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f7fe fd3e 	bl	80039d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2224      	movs	r2, #36	; 0x24
 8004f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f022 0201 	bic.w	r2, r2, #1
 8004f6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685a      	ldr	r2, [r3, #4]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f7c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	689a      	ldr	r2, [r3, #8]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f8c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d107      	bne.n	8004fa6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	689a      	ldr	r2, [r3, #8]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004fa2:	609a      	str	r2, [r3, #8]
 8004fa4:	e006      	b.n	8004fb4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	689a      	ldr	r2, [r3, #8]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004fb2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d104      	bne.n	8004fc6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fc4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	6812      	ldr	r2, [r2, #0]
 8004fd0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004fd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fd8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68da      	ldr	r2, [r3, #12]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004fe8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	691a      	ldr	r2, [r3, #16]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	430a      	orrs	r2, r1
 8005002:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	69d9      	ldr	r1, [r3, #28]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a1a      	ldr	r2, [r3, #32]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	430a      	orrs	r2, r1
 8005012:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f042 0201 	orr.w	r2, r2, #1
 8005022:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2220      	movs	r2, #32
 800502e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3708      	adds	r7, #8
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
	...

0800504c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b088      	sub	sp, #32
 8005050:	af02      	add	r7, sp, #8
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	607a      	str	r2, [r7, #4]
 8005056:	461a      	mov	r2, r3
 8005058:	460b      	mov	r3, r1
 800505a:	817b      	strh	r3, [r7, #10]
 800505c:	4613      	mov	r3, r2
 800505e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005066:	b2db      	uxtb	r3, r3
 8005068:	2b20      	cmp	r3, #32
 800506a:	f040 80da 	bne.w	8005222 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005074:	2b01      	cmp	r3, #1
 8005076:	d101      	bne.n	800507c <HAL_I2C_Master_Transmit+0x30>
 8005078:	2302      	movs	r3, #2
 800507a:	e0d3      	b.n	8005224 <HAL_I2C_Master_Transmit+0x1d8>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005084:	f7fe ff3a 	bl	8003efc <HAL_GetTick>
 8005088:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	9300      	str	r3, [sp, #0]
 800508e:	2319      	movs	r3, #25
 8005090:	2201      	movs	r2, #1
 8005092:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005096:	68f8      	ldr	r0, [r7, #12]
 8005098:	f000 f9e5 	bl	8005466 <I2C_WaitOnFlagUntilTimeout>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d001      	beq.n	80050a6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e0be      	b.n	8005224 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2221      	movs	r2, #33	; 0x21
 80050aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2210      	movs	r2, #16
 80050b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	893a      	ldrh	r2, [r7, #8]
 80050c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	2bff      	cmp	r3, #255	; 0xff
 80050d6:	d90e      	bls.n	80050f6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	22ff      	movs	r2, #255	; 0xff
 80050dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050e2:	b2da      	uxtb	r2, r3
 80050e4:	8979      	ldrh	r1, [r7, #10]
 80050e6:	4b51      	ldr	r3, [pc, #324]	; (800522c <HAL_I2C_Master_Transmit+0x1e0>)
 80050e8:	9300      	str	r3, [sp, #0]
 80050ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 fbdc 	bl	80058ac <I2C_TransferConfig>
 80050f4:	e06c      	b.n	80051d0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005104:	b2da      	uxtb	r2, r3
 8005106:	8979      	ldrh	r1, [r7, #10]
 8005108:	4b48      	ldr	r3, [pc, #288]	; (800522c <HAL_I2C_Master_Transmit+0x1e0>)
 800510a:	9300      	str	r3, [sp, #0]
 800510c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f000 fbcb 	bl	80058ac <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005116:	e05b      	b.n	80051d0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	6a39      	ldr	r1, [r7, #32]
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	f000 f9e2 	bl	80054e6 <I2C_WaitOnTXISFlagUntilTimeout>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d001      	beq.n	800512c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e07b      	b.n	8005224 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005130:	781a      	ldrb	r2, [r3, #0]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513c:	1c5a      	adds	r2, r3, #1
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005146:	b29b      	uxth	r3, r3
 8005148:	3b01      	subs	r3, #1
 800514a:	b29a      	uxth	r2, r3
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005154:	3b01      	subs	r3, #1
 8005156:	b29a      	uxth	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005160:	b29b      	uxth	r3, r3
 8005162:	2b00      	cmp	r3, #0
 8005164:	d034      	beq.n	80051d0 <HAL_I2C_Master_Transmit+0x184>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800516a:	2b00      	cmp	r3, #0
 800516c:	d130      	bne.n	80051d0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	9300      	str	r3, [sp, #0]
 8005172:	6a3b      	ldr	r3, [r7, #32]
 8005174:	2200      	movs	r2, #0
 8005176:	2180      	movs	r1, #128	; 0x80
 8005178:	68f8      	ldr	r0, [r7, #12]
 800517a:	f000 f974 	bl	8005466 <I2C_WaitOnFlagUntilTimeout>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d001      	beq.n	8005188 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e04d      	b.n	8005224 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800518c:	b29b      	uxth	r3, r3
 800518e:	2bff      	cmp	r3, #255	; 0xff
 8005190:	d90e      	bls.n	80051b0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	22ff      	movs	r2, #255	; 0xff
 8005196:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800519c:	b2da      	uxtb	r2, r3
 800519e:	8979      	ldrh	r1, [r7, #10]
 80051a0:	2300      	movs	r3, #0
 80051a2:	9300      	str	r3, [sp, #0]
 80051a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f000 fb7f 	bl	80058ac <I2C_TransferConfig>
 80051ae:	e00f      	b.n	80051d0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051be:	b2da      	uxtb	r2, r3
 80051c0:	8979      	ldrh	r1, [r7, #10]
 80051c2:	2300      	movs	r3, #0
 80051c4:	9300      	str	r3, [sp, #0]
 80051c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051ca:	68f8      	ldr	r0, [r7, #12]
 80051cc:	f000 fb6e 	bl	80058ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d19e      	bne.n	8005118 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	6a39      	ldr	r1, [r7, #32]
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f000 f9c1 	bl	8005566 <I2C_WaitOnSTOPFlagUntilTimeout>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d001      	beq.n	80051ee <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e01a      	b.n	8005224 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2220      	movs	r2, #32
 80051f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	6859      	ldr	r1, [r3, #4]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	4b0b      	ldr	r3, [pc, #44]	; (8005230 <HAL_I2C_Master_Transmit+0x1e4>)
 8005202:	400b      	ands	r3, r1
 8005204:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2220      	movs	r2, #32
 800520a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800521e:	2300      	movs	r3, #0
 8005220:	e000      	b.n	8005224 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005222:	2302      	movs	r3, #2
  }
}
 8005224:	4618      	mov	r0, r3
 8005226:	3718      	adds	r7, #24
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}
 800522c:	80002000 	.word	0x80002000
 8005230:	fe00e800 	.word	0xfe00e800

08005234 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b088      	sub	sp, #32
 8005238:	af02      	add	r7, sp, #8
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	607a      	str	r2, [r7, #4]
 800523e:	461a      	mov	r2, r3
 8005240:	460b      	mov	r3, r1
 8005242:	817b      	strh	r3, [r7, #10]
 8005244:	4613      	mov	r3, r2
 8005246:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b20      	cmp	r3, #32
 8005252:	f040 80db 	bne.w	800540c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800525c:	2b01      	cmp	r3, #1
 800525e:	d101      	bne.n	8005264 <HAL_I2C_Master_Receive+0x30>
 8005260:	2302      	movs	r3, #2
 8005262:	e0d4      	b.n	800540e <HAL_I2C_Master_Receive+0x1da>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800526c:	f7fe fe46 	bl	8003efc <HAL_GetTick>
 8005270:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	2319      	movs	r3, #25
 8005278:	2201      	movs	r2, #1
 800527a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	f000 f8f1 	bl	8005466 <I2C_WaitOnFlagUntilTimeout>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d001      	beq.n	800528e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e0bf      	b.n	800540e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2222      	movs	r2, #34	; 0x22
 8005292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2210      	movs	r2, #16
 800529a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	893a      	ldrh	r2, [r7, #8]
 80052ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	2bff      	cmp	r3, #255	; 0xff
 80052be:	d90e      	bls.n	80052de <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	22ff      	movs	r2, #255	; 0xff
 80052c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ca:	b2da      	uxtb	r2, r3
 80052cc:	8979      	ldrh	r1, [r7, #10]
 80052ce:	4b52      	ldr	r3, [pc, #328]	; (8005418 <HAL_I2C_Master_Receive+0x1e4>)
 80052d0:	9300      	str	r3, [sp, #0]
 80052d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80052d6:	68f8      	ldr	r0, [r7, #12]
 80052d8:	f000 fae8 	bl	80058ac <I2C_TransferConfig>
 80052dc:	e06d      	b.n	80053ba <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ec:	b2da      	uxtb	r2, r3
 80052ee:	8979      	ldrh	r1, [r7, #10]
 80052f0:	4b49      	ldr	r3, [pc, #292]	; (8005418 <HAL_I2C_Master_Receive+0x1e4>)
 80052f2:	9300      	str	r3, [sp, #0]
 80052f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052f8:	68f8      	ldr	r0, [r7, #12]
 80052fa:	f000 fad7 	bl	80058ac <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80052fe:	e05c      	b.n	80053ba <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	6a39      	ldr	r1, [r7, #32]
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f000 f96b 	bl	80055e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d001      	beq.n	8005314 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e07c      	b.n	800540e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531e:	b2d2      	uxtb	r2, r2
 8005320:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005326:	1c5a      	adds	r2, r3, #1
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005330:	3b01      	subs	r3, #1
 8005332:	b29a      	uxth	r2, r3
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800533c:	b29b      	uxth	r3, r3
 800533e:	3b01      	subs	r3, #1
 8005340:	b29a      	uxth	r2, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800534a:	b29b      	uxth	r3, r3
 800534c:	2b00      	cmp	r3, #0
 800534e:	d034      	beq.n	80053ba <HAL_I2C_Master_Receive+0x186>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005354:	2b00      	cmp	r3, #0
 8005356:	d130      	bne.n	80053ba <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	9300      	str	r3, [sp, #0]
 800535c:	6a3b      	ldr	r3, [r7, #32]
 800535e:	2200      	movs	r2, #0
 8005360:	2180      	movs	r1, #128	; 0x80
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f000 f87f 	bl	8005466 <I2C_WaitOnFlagUntilTimeout>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d001      	beq.n	8005372 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e04d      	b.n	800540e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005376:	b29b      	uxth	r3, r3
 8005378:	2bff      	cmp	r3, #255	; 0xff
 800537a:	d90e      	bls.n	800539a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	22ff      	movs	r2, #255	; 0xff
 8005380:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005386:	b2da      	uxtb	r2, r3
 8005388:	8979      	ldrh	r1, [r7, #10]
 800538a:	2300      	movs	r3, #0
 800538c:	9300      	str	r3, [sp, #0]
 800538e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f000 fa8a 	bl	80058ac <I2C_TransferConfig>
 8005398:	e00f      	b.n	80053ba <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800539e:	b29a      	uxth	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053a8:	b2da      	uxtb	r2, r3
 80053aa:	8979      	ldrh	r1, [r7, #10]
 80053ac:	2300      	movs	r3, #0
 80053ae:	9300      	str	r3, [sp, #0]
 80053b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	f000 fa79 	bl	80058ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053be:	b29b      	uxth	r3, r3
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d19d      	bne.n	8005300 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053c4:	697a      	ldr	r2, [r7, #20]
 80053c6:	6a39      	ldr	r1, [r7, #32]
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	f000 f8cc 	bl	8005566 <I2C_WaitOnSTOPFlagUntilTimeout>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d001      	beq.n	80053d8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e01a      	b.n	800540e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2220      	movs	r2, #32
 80053de:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6859      	ldr	r1, [r3, #4]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	4b0c      	ldr	r3, [pc, #48]	; (800541c <HAL_I2C_Master_Receive+0x1e8>)
 80053ec:	400b      	ands	r3, r1
 80053ee:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2220      	movs	r2, #32
 80053f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005408:	2300      	movs	r3, #0
 800540a:	e000      	b.n	800540e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800540c:	2302      	movs	r3, #2
  }
}
 800540e:	4618      	mov	r0, r3
 8005410:	3718      	adds	r7, #24
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	80002400 	.word	0x80002400
 800541c:	fe00e800 	.word	0xfe00e800

08005420 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	2b02      	cmp	r3, #2
 8005434:	d103      	bne.n	800543e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2200      	movs	r2, #0
 800543c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	f003 0301 	and.w	r3, r3, #1
 8005448:	2b01      	cmp	r3, #1
 800544a:	d007      	beq.n	800545c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	699a      	ldr	r2, [r3, #24]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f042 0201 	orr.w	r2, r2, #1
 800545a:	619a      	str	r2, [r3, #24]
  }
}
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	bc80      	pop	{r7}
 8005464:	4770      	bx	lr

08005466 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005466:	b580      	push	{r7, lr}
 8005468:	b084      	sub	sp, #16
 800546a:	af00      	add	r7, sp, #0
 800546c:	60f8      	str	r0, [r7, #12]
 800546e:	60b9      	str	r1, [r7, #8]
 8005470:	603b      	str	r3, [r7, #0]
 8005472:	4613      	mov	r3, r2
 8005474:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005476:	e022      	b.n	80054be <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800547e:	d01e      	beq.n	80054be <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005480:	f7fe fd3c 	bl	8003efc <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	683a      	ldr	r2, [r7, #0]
 800548c:	429a      	cmp	r2, r3
 800548e:	d302      	bcc.n	8005496 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d113      	bne.n	80054be <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800549a:	f043 0220 	orr.w	r2, r3, #32
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2220      	movs	r2, #32
 80054a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e00f      	b.n	80054de <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	699a      	ldr	r2, [r3, #24]
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	4013      	ands	r3, r2
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	bf0c      	ite	eq
 80054ce:	2301      	moveq	r3, #1
 80054d0:	2300      	movne	r3, #0
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	461a      	mov	r2, r3
 80054d6:	79fb      	ldrb	r3, [r7, #7]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d0cd      	beq.n	8005478 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b084      	sub	sp, #16
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	60f8      	str	r0, [r7, #12]
 80054ee:	60b9      	str	r1, [r7, #8]
 80054f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80054f2:	e02c      	b.n	800554e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	68b9      	ldr	r1, [r7, #8]
 80054f8:	68f8      	ldr	r0, [r7, #12]
 80054fa:	f000 f8eb 	bl	80056d4 <I2C_IsErrorOccurred>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d001      	beq.n	8005508 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e02a      	b.n	800555e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800550e:	d01e      	beq.n	800554e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005510:	f7fe fcf4 	bl	8003efc <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	68ba      	ldr	r2, [r7, #8]
 800551c:	429a      	cmp	r2, r3
 800551e:	d302      	bcc.n	8005526 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d113      	bne.n	800554e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800552a:	f043 0220 	orr.w	r2, r3, #32
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2220      	movs	r2, #32
 8005536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e007      	b.n	800555e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	f003 0302 	and.w	r3, r3, #2
 8005558:	2b02      	cmp	r3, #2
 800555a:	d1cb      	bne.n	80054f4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b084      	sub	sp, #16
 800556a:	af00      	add	r7, sp, #0
 800556c:	60f8      	str	r0, [r7, #12]
 800556e:	60b9      	str	r1, [r7, #8]
 8005570:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005572:	e028      	b.n	80055c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	68b9      	ldr	r1, [r7, #8]
 8005578:	68f8      	ldr	r0, [r7, #12]
 800557a:	f000 f8ab 	bl	80056d4 <I2C_IsErrorOccurred>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d001      	beq.n	8005588 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e026      	b.n	80055d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005588:	f7fe fcb8 	bl	8003efc <HAL_GetTick>
 800558c:	4602      	mov	r2, r0
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	429a      	cmp	r2, r3
 8005596:	d302      	bcc.n	800559e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d113      	bne.n	80055c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a2:	f043 0220 	orr.w	r2, r3, #32
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2220      	movs	r2, #32
 80055ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e007      	b.n	80055d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	f003 0320 	and.w	r3, r3, #32
 80055d0:	2b20      	cmp	r3, #32
 80055d2:	d1cf      	bne.n	8005574 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
	...

080055e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055ec:	e064      	b.n	80056b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	68b9      	ldr	r1, [r7, #8]
 80055f2:	68f8      	ldr	r0, [r7, #12]
 80055f4:	f000 f86e 	bl	80056d4 <I2C_IsErrorOccurred>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d001      	beq.n	8005602 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e062      	b.n	80056c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	f003 0320 	and.w	r3, r3, #32
 800560c:	2b20      	cmp	r3, #32
 800560e:	d138      	bne.n	8005682 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	f003 0304 	and.w	r3, r3, #4
 800561a:	2b04      	cmp	r3, #4
 800561c:	d105      	bne.n	800562a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005622:	2b00      	cmp	r3, #0
 8005624:	d001      	beq.n	800562a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005626:	2300      	movs	r3, #0
 8005628:	e04e      	b.n	80056c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	f003 0310 	and.w	r3, r3, #16
 8005634:	2b10      	cmp	r3, #16
 8005636:	d107      	bne.n	8005648 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2210      	movs	r2, #16
 800563e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2204      	movs	r2, #4
 8005644:	645a      	str	r2, [r3, #68]	; 0x44
 8005646:	e002      	b.n	800564e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2220      	movs	r2, #32
 8005654:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	6859      	ldr	r1, [r3, #4]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	4b1b      	ldr	r3, [pc, #108]	; (80056d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8005662:	400b      	ands	r3, r1
 8005664:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2220      	movs	r2, #32
 800566a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e022      	b.n	80056c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005682:	f7fe fc3b 	bl	8003efc <HAL_GetTick>
 8005686:	4602      	mov	r2, r0
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	68ba      	ldr	r2, [r7, #8]
 800568e:	429a      	cmp	r2, r3
 8005690:	d302      	bcc.n	8005698 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10f      	bne.n	80056b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800569c:	f043 0220 	orr.w	r2, r3, #32
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2220      	movs	r2, #32
 80056a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e007      	b.n	80056c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	699b      	ldr	r3, [r3, #24]
 80056be:	f003 0304 	and.w	r3, r3, #4
 80056c2:	2b04      	cmp	r3, #4
 80056c4:	d193      	bne.n	80055ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3710      	adds	r7, #16
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	fe00e800 	.word	0xfe00e800

080056d4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b08a      	sub	sp, #40	; 0x28
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056e0:	2300      	movs	r3, #0
 80056e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80056ee:	2300      	movs	r3, #0
 80056f0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	f003 0310 	and.w	r3, r3, #16
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d075      	beq.n	80057ec <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2210      	movs	r2, #16
 8005706:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005708:	e056      	b.n	80057b8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005710:	d052      	beq.n	80057b8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005712:	f7fe fbf3 	bl	8003efc <HAL_GetTick>
 8005716:	4602      	mov	r2, r0
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	429a      	cmp	r2, r3
 8005720:	d302      	bcc.n	8005728 <I2C_IsErrorOccurred+0x54>
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d147      	bne.n	80057b8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005732:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800573a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005746:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800574a:	d12e      	bne.n	80057aa <I2C_IsErrorOccurred+0xd6>
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005752:	d02a      	beq.n	80057aa <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005754:	7cfb      	ldrb	r3, [r7, #19]
 8005756:	2b20      	cmp	r3, #32
 8005758:	d027      	beq.n	80057aa <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	685a      	ldr	r2, [r3, #4]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005768:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800576a:	f7fe fbc7 	bl	8003efc <HAL_GetTick>
 800576e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005770:	e01b      	b.n	80057aa <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005772:	f7fe fbc3 	bl	8003efc <HAL_GetTick>
 8005776:	4602      	mov	r2, r0
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	2b19      	cmp	r3, #25
 800577e:	d914      	bls.n	80057aa <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005784:	f043 0220 	orr.w	r2, r3, #32
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2220      	movs	r2, #32
 8005790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2200      	movs	r2, #0
 80057a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	699b      	ldr	r3, [r3, #24]
 80057b0:	f003 0320 	and.w	r3, r3, #32
 80057b4:	2b20      	cmp	r3, #32
 80057b6:	d1dc      	bne.n	8005772 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	f003 0320 	and.w	r3, r3, #32
 80057c2:	2b20      	cmp	r3, #32
 80057c4:	d003      	beq.n	80057ce <I2C_IsErrorOccurred+0xfa>
 80057c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d09d      	beq.n	800570a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80057ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d103      	bne.n	80057de <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2220      	movs	r2, #32
 80057dc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80057de:	6a3b      	ldr	r3, [r7, #32]
 80057e0:	f043 0304 	orr.w	r3, r3, #4
 80057e4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00b      	beq.n	8005816 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80057fe:	6a3b      	ldr	r3, [r7, #32]
 8005800:	f043 0301 	orr.w	r3, r3, #1
 8005804:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800580e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00b      	beq.n	8005838 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005820:	6a3b      	ldr	r3, [r7, #32]
 8005822:	f043 0308 	orr.w	r3, r3, #8
 8005826:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005830:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00b      	beq.n	800585a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005842:	6a3b      	ldr	r3, [r7, #32]
 8005844:	f043 0302 	orr.w	r3, r3, #2
 8005848:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005852:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800585a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800585e:	2b00      	cmp	r3, #0
 8005860:	d01c      	beq.n	800589c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005862:	68f8      	ldr	r0, [r7, #12]
 8005864:	f7ff fddc 	bl	8005420 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	6859      	ldr	r1, [r3, #4]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	4b0d      	ldr	r3, [pc, #52]	; (80058a8 <I2C_IsErrorOccurred+0x1d4>)
 8005874:	400b      	ands	r3, r1
 8005876:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800587c:	6a3b      	ldr	r3, [r7, #32]
 800587e:	431a      	orrs	r2, r3
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2220      	movs	r2, #32
 8005888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800589c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3728      	adds	r7, #40	; 0x28
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	fe00e800 	.word	0xfe00e800

080058ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b087      	sub	sp, #28
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	607b      	str	r3, [r7, #4]
 80058b6:	460b      	mov	r3, r1
 80058b8:	817b      	strh	r3, [r7, #10]
 80058ba:	4613      	mov	r3, r2
 80058bc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80058be:	897b      	ldrh	r3, [r7, #10]
 80058c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80058c4:	7a7b      	ldrb	r3, [r7, #9]
 80058c6:	041b      	lsls	r3, r3, #16
 80058c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80058cc:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80058d2:	6a3b      	ldr	r3, [r7, #32]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80058da:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	685a      	ldr	r2, [r3, #4]
 80058e2:	6a3b      	ldr	r3, [r7, #32]
 80058e4:	0d5b      	lsrs	r3, r3, #21
 80058e6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80058ea:	4b07      	ldr	r3, [pc, #28]	; (8005908 <I2C_TransferConfig+0x5c>)
 80058ec:	430b      	orrs	r3, r1
 80058ee:	43db      	mvns	r3, r3
 80058f0:	ea02 0103 	and.w	r1, r2, r3
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	430a      	orrs	r2, r1
 80058fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80058fe:	bf00      	nop
 8005900:	371c      	adds	r7, #28
 8005902:	46bd      	mov	sp, r7
 8005904:	bc80      	pop	{r7}
 8005906:	4770      	bx	lr
 8005908:	03ff63ff 	.word	0x03ff63ff

0800590c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2b20      	cmp	r3, #32
 8005920:	d138      	bne.n	8005994 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005928:	2b01      	cmp	r3, #1
 800592a:	d101      	bne.n	8005930 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800592c:	2302      	movs	r3, #2
 800592e:	e032      	b.n	8005996 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2224      	movs	r2, #36	; 0x24
 800593c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f022 0201 	bic.w	r2, r2, #1
 800594e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800595e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6819      	ldr	r1, [r3, #0]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	683a      	ldr	r2, [r7, #0]
 800596c:	430a      	orrs	r2, r1
 800596e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f042 0201 	orr.w	r2, r2, #1
 800597e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2220      	movs	r2, #32
 8005984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005990:	2300      	movs	r3, #0
 8005992:	e000      	b.n	8005996 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005994:	2302      	movs	r3, #2
  }
}
 8005996:	4618      	mov	r0, r3
 8005998:	370c      	adds	r7, #12
 800599a:	46bd      	mov	sp, r7
 800599c:	bc80      	pop	{r7}
 800599e:	4770      	bx	lr

080059a0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	2b20      	cmp	r3, #32
 80059b4:	d139      	bne.n	8005a2a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d101      	bne.n	80059c4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80059c0:	2302      	movs	r3, #2
 80059c2:	e033      	b.n	8005a2c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2224      	movs	r2, #36	; 0x24
 80059d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f022 0201 	bic.w	r2, r2, #1
 80059e2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80059f2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	021b      	lsls	r3, r3, #8
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f042 0201 	orr.w	r2, r2, #1
 8005a14:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2220      	movs	r2, #32
 8005a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a26:	2300      	movs	r3, #0
 8005a28:	e000      	b.n	8005a2c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005a2a:	2302      	movs	r3, #2
  }
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3714      	adds	r7, #20
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bc80      	pop	{r7}
 8005a34:	4770      	bx	lr
	...

08005a38 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a3c:	4b04      	ldr	r3, [pc, #16]	; (8005a50 <HAL_PWR_EnableBkUpAccess+0x18>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a03      	ldr	r2, [pc, #12]	; (8005a50 <HAL_PWR_EnableBkUpAccess+0x18>)
 8005a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a46:	6013      	str	r3, [r2, #0]
}
 8005a48:	bf00      	nop
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bc80      	pop	{r7}
 8005a4e:	4770      	bx	lr
 8005a50:	58000400 	.word	0x58000400

08005a54 <HAL_PWR_DisableBkUpAccess>:
  * @brief  Disable access to the backup domain
  *         (RTC registers, RTC backup data registers).
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8005a54:	b480      	push	{r7}
 8005a56:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a58:	4b04      	ldr	r3, [pc, #16]	; (8005a6c <HAL_PWR_DisableBkUpAccess+0x18>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a03      	ldr	r2, [pc, #12]	; (8005a6c <HAL_PWR_DisableBkUpAccess+0x18>)
 8005a5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a62:	6013      	str	r3, [r2, #0]
}
 8005a64:	bf00      	nop
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bc80      	pop	{r7}
 8005a6a:	4770      	bx	lr
 8005a6c:	58000400 	.word	0x58000400

08005a70 <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8005a70:	b480      	push	{r7}
 8005a72:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8005a74:	4b04      	ldr	r3, [pc, #16]	; (8005a88 <LL_PWR_EnableBootC2+0x18>)
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	4a03      	ldr	r2, [pc, #12]	; (8005a88 <LL_PWR_EnableBootC2+0x18>)
 8005a7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a7e:	60d3      	str	r3, [r2, #12]
}
 8005a80:	bf00      	nop
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bc80      	pop	{r7}
 8005a86:	4770      	bx	lr
 8005a88:	58000400 	.word	0x58000400

08005a8c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8005a90:	4b03      	ldr	r3, [pc, #12]	; (8005aa0 <HAL_PWREx_GetVoltageRange+0x14>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bc80      	pop	{r7}
 8005a9e:	4770      	bx	lr
 8005aa0:	58000400 	.word	0x58000400

08005aa4 <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 8005aac:	f7ff ffe0 	bl	8005a70 <LL_PWR_EnableBootC2>
}
 8005ab0:	bf00      	nop
 8005ab2:	3708      	adds	r7, #8
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <LL_PWR_IsEnabledBkUpAccess>:
{
 8005ab8:	b480      	push	{r7}
 8005aba:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8005abc:	4b06      	ldr	r3, [pc, #24]	; (8005ad8 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ac4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ac8:	d101      	bne.n	8005ace <LL_PWR_IsEnabledBkUpAccess+0x16>
 8005aca:	2301      	movs	r3, #1
 8005acc:	e000      	b.n	8005ad0 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bc80      	pop	{r7}
 8005ad6:	4770      	bx	lr
 8005ad8:	58000400 	.word	0x58000400

08005adc <LL_RCC_HSE_EnableTcxo>:
{
 8005adc:	b480      	push	{r7}
 8005ade:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005ae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005aea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005aee:	6013      	str	r3, [r2, #0]
}
 8005af0:	bf00      	nop
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bc80      	pop	{r7}
 8005af6:	4770      	bx	lr

08005af8 <LL_RCC_HSE_DisableTcxo>:
{
 8005af8:	b480      	push	{r7}
 8005afa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b0a:	6013      	str	r3, [r2, #0]
}
 8005b0c:	bf00      	nop
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bc80      	pop	{r7}
 8005b12:	4770      	bx	lr

08005b14 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005b14:	b480      	push	{r7}
 8005b16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b26:	d101      	bne.n	8005b2c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e000      	b.n	8005b2e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bc80      	pop	{r7}
 8005b34:	4770      	bx	lr

08005b36 <LL_RCC_HSE_Enable>:
{
 8005b36:	b480      	push	{r7}
 8005b38:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005b3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b48:	6013      	str	r3, [r2, #0]
}
 8005b4a:	bf00      	nop
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bc80      	pop	{r7}
 8005b50:	4770      	bx	lr

08005b52 <LL_RCC_HSE_Disable>:
{
 8005b52:	b480      	push	{r7}
 8005b54:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005b56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b64:	6013      	str	r3, [r2, #0]
}
 8005b66:	bf00      	nop
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bc80      	pop	{r7}
 8005b6c:	4770      	bx	lr

08005b6e <LL_RCC_HSE_IsReady>:
{
 8005b6e:	b480      	push	{r7}
 8005b70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b80:	d101      	bne.n	8005b86 <LL_RCC_HSE_IsReady+0x18>
 8005b82:	2301      	movs	r3, #1
 8005b84:	e000      	b.n	8005b88 <LL_RCC_HSE_IsReady+0x1a>
 8005b86:	2300      	movs	r3, #0
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bc80      	pop	{r7}
 8005b8e:	4770      	bx	lr

08005b90 <LL_RCC_HSI_Enable>:
{
 8005b90:	b480      	push	{r7}
 8005b92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ba2:	6013      	str	r3, [r2, #0]
}
 8005ba4:	bf00      	nop
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bc80      	pop	{r7}
 8005baa:	4770      	bx	lr

08005bac <LL_RCC_HSI_Disable>:
{
 8005bac:	b480      	push	{r7}
 8005bae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005bb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bbe:	6013      	str	r3, [r2, #0]
}
 8005bc0:	bf00      	nop
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bc80      	pop	{r7}
 8005bc6:	4770      	bx	lr

08005bc8 <LL_RCC_HSI_IsReady>:
{
 8005bc8:	b480      	push	{r7}
 8005bca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bda:	d101      	bne.n	8005be0 <LL_RCC_HSI_IsReady+0x18>
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e000      	b.n	8005be2 <LL_RCC_HSI_IsReady+0x1a>
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bc80      	pop	{r7}
 8005be8:	4770      	bx	lr

08005bea <LL_RCC_HSI_SetCalibTrimming>:
{
 8005bea:	b480      	push	{r7}
 8005bec:	b083      	sub	sp, #12
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	061b      	lsls	r3, r3, #24
 8005c00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c04:	4313      	orrs	r3, r2
 8005c06:	604b      	str	r3, [r1, #4]
}
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bc80      	pop	{r7}
 8005c10:	4770      	bx	lr

08005c12 <LL_RCC_LSE_IsReady>:
{
 8005c12:	b480      	push	{r7}
 8005c14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c1e:	f003 0302 	and.w	r3, r3, #2
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d101      	bne.n	8005c2a <LL_RCC_LSE_IsReady+0x18>
 8005c26:	2301      	movs	r3, #1
 8005c28:	e000      	b.n	8005c2c <LL_RCC_LSE_IsReady+0x1a>
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bc80      	pop	{r7}
 8005c32:	4770      	bx	lr

08005c34 <LL_RCC_LSI_Enable>:
{
 8005c34:	b480      	push	{r7}
 8005c36:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8005c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c44:	f043 0301 	orr.w	r3, r3, #1
 8005c48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005c4c:	bf00      	nop
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bc80      	pop	{r7}
 8005c52:	4770      	bx	lr

08005c54 <LL_RCC_LSI_Disable>:
{
 8005c54:	b480      	push	{r7}
 8005c56:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c64:	f023 0301 	bic.w	r3, r3, #1
 8005c68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005c6c:	bf00      	nop
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bc80      	pop	{r7}
 8005c72:	4770      	bx	lr

08005c74 <LL_RCC_LSI_IsReady>:
{
 8005c74:	b480      	push	{r7}
 8005c76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c80:	f003 0302 	and.w	r3, r3, #2
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d101      	bne.n	8005c8c <LL_RCC_LSI_IsReady+0x18>
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e000      	b.n	8005c8e <LL_RCC_LSI_IsReady+0x1a>
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bc80      	pop	{r7}
 8005c94:	4770      	bx	lr

08005c96 <LL_RCC_MSI_Enable>:
{
 8005c96:	b480      	push	{r7}
 8005c98:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ca4:	f043 0301 	orr.w	r3, r3, #1
 8005ca8:	6013      	str	r3, [r2, #0]
}
 8005caa:	bf00      	nop
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bc80      	pop	{r7}
 8005cb0:	4770      	bx	lr

08005cb2 <LL_RCC_MSI_Disable>:
{
 8005cb2:	b480      	push	{r7}
 8005cb4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cc0:	f023 0301 	bic.w	r3, r3, #1
 8005cc4:	6013      	str	r3, [r2, #0]
}
 8005cc6:	bf00      	nop
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bc80      	pop	{r7}
 8005ccc:	4770      	bx	lr

08005cce <LL_RCC_MSI_IsReady>:
{
 8005cce:	b480      	push	{r7}
 8005cd0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005cd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0302 	and.w	r3, r3, #2
 8005cdc:	2b02      	cmp	r3, #2
 8005cde:	d101      	bne.n	8005ce4 <LL_RCC_MSI_IsReady+0x16>
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e000      	b.n	8005ce6 <LL_RCC_MSI_IsReady+0x18>
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bc80      	pop	{r7}
 8005cec:	4770      	bx	lr

08005cee <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8005cee:	b480      	push	{r7}
 8005cf0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005cf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0308 	and.w	r3, r3, #8
 8005cfc:	2b08      	cmp	r3, #8
 8005cfe:	d101      	bne.n	8005d04 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8005d00:	2301      	movs	r3, #1
 8005d02:	e000      	b.n	8005d06 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bc80      	pop	{r7}
 8005d0c:	4770      	bx	lr

08005d0e <LL_RCC_MSI_GetRange>:
{
 8005d0e:	b480      	push	{r7}
 8005d10:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bc80      	pop	{r7}
 8005d22:	4770      	bx	lr

08005d24 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8005d24:	b480      	push	{r7}
 8005d26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d30:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bc80      	pop	{r7}
 8005d3a:	4770      	bx	lr

08005d3c <LL_RCC_MSI_SetCalibTrimming>:
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005d44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	021b      	lsls	r3, r3, #8
 8005d52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d56:	4313      	orrs	r3, r2
 8005d58:	604b      	str	r3, [r1, #4]
}
 8005d5a:	bf00      	nop
 8005d5c:	370c      	adds	r7, #12
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bc80      	pop	{r7}
 8005d62:	4770      	bx	lr

08005d64 <LL_RCC_SetSysClkSource>:
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f023 0203 	bic.w	r2, r3, #3
 8005d76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	608b      	str	r3, [r1, #8]
}
 8005d80:	bf00      	nop
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bc80      	pop	{r7}
 8005d88:	4770      	bx	lr

08005d8a <LL_RCC_GetSysClkSource>:
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	f003 030c 	and.w	r3, r3, #12
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bc80      	pop	{r7}
 8005d9e:	4770      	bx	lr

08005da0 <LL_RCC_SetAHBPrescaler>:
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005db2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	608b      	str	r3, [r1, #8]
}
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bc80      	pop	{r7}
 8005dc4:	4770      	bx	lr

08005dc6 <LL_C2_RCC_SetAHBPrescaler>:
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b083      	sub	sp, #12
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005dce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dd2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005dd6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005dda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005de6:	bf00      	nop
 8005de8:	370c      	adds	r7, #12
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bc80      	pop	{r7}
 8005dee:	4770      	bx	lr

08005df0 <LL_RCC_SetAHB3Prescaler>:
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005df8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dfc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005e00:	f023 020f 	bic.w	r2, r3, #15
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	091b      	lsrs	r3, r3, #4
 8005e08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005e12:	bf00      	nop
 8005e14:	370c      	adds	r7, #12
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bc80      	pop	{r7}
 8005e1a:	4770      	bx	lr

08005e1c <LL_RCC_SetAPB1Prescaler>:
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	608b      	str	r3, [r1, #8]
}
 8005e38:	bf00      	nop
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bc80      	pop	{r7}
 8005e40:	4770      	bx	lr

08005e42 <LL_RCC_SetAPB2Prescaler>:
{
 8005e42:	b480      	push	{r7}
 8005e44:	b083      	sub	sp, #12
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005e54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	608b      	str	r3, [r1, #8]
}
 8005e5e:	bf00      	nop
 8005e60:	370c      	adds	r7, #12
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bc80      	pop	{r7}
 8005e66:	4770      	bx	lr

08005e68 <LL_RCC_GetAHBPrescaler>:
{
 8005e68:	b480      	push	{r7}
 8005e6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005e6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bc80      	pop	{r7}
 8005e7c:	4770      	bx	lr

08005e7e <LL_RCC_GetAHB3Prescaler>:
{
 8005e7e:	b480      	push	{r7}
 8005e80:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e86:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005e8a:	011b      	lsls	r3, r3, #4
 8005e8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bc80      	pop	{r7}
 8005e96:	4770      	bx	lr

08005e98 <LL_RCC_GetAPB1Prescaler>:
{
 8005e98:	b480      	push	{r7}
 8005e9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005e9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bc80      	pop	{r7}
 8005eac:	4770      	bx	lr

08005eae <LL_RCC_GetAPB2Prescaler>:
{
 8005eae:	b480      	push	{r7}
 8005eb0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005eb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bc80      	pop	{r7}
 8005ec2:	4770      	bx	lr

08005ec4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ed2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ed6:	6013      	str	r3, [r2, #0]
}
 8005ed8:	bf00      	nop
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bc80      	pop	{r7}
 8005ede:	4770      	bx	lr

08005ee0 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005ee4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005eee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ef2:	6013      	str	r3, [r2, #0]
}
 8005ef4:	bf00      	nop
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bc80      	pop	{r7}
 8005efa:	4770      	bx	lr

08005efc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005efc:	b480      	push	{r7}
 8005efe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f0e:	d101      	bne.n	8005f14 <LL_RCC_PLL_IsReady+0x18>
 8005f10:	2301      	movs	r3, #1
 8005f12:	e000      	b.n	8005f16 <LL_RCC_PLL_IsReady+0x1a>
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bc80      	pop	{r7}
 8005f1c:	4770      	bx	lr

08005f1e <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005f1e:	b480      	push	{r7}
 8005f20:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	0a1b      	lsrs	r3, r3, #8
 8005f2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bc80      	pop	{r7}
 8005f34:	4770      	bx	lr

08005f36 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005f36:	b480      	push	{r7}
 8005f38:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005f3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bc80      	pop	{r7}
 8005f4a:	4770      	bx	lr

08005f4c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bc80      	pop	{r7}
 8005f60:	4770      	bx	lr

08005f62 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005f62:	b480      	push	{r7}
 8005f64:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	f003 0303 	and.w	r3, r3, #3
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bc80      	pop	{r7}
 8005f76:	4770      	bx	lr

08005f78 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f8a:	d101      	bne.n	8005f90 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e000      	b.n	8005f92 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bc80      	pop	{r7}
 8005f98:	4770      	bx	lr

08005f9a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8005f9a:	b480      	push	{r7}
 8005f9c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fa2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005faa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fae:	d101      	bne.n	8005fb4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e000      	b.n	8005fb6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bc80      	pop	{r7}
 8005fbc:	4770      	bx	lr

08005fbe <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005fbe:	b480      	push	{r7}
 8005fc0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fc6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005fca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fd2:	d101      	bne.n	8005fd8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e000      	b.n	8005fda <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bc80      	pop	{r7}
 8005fe0:	4770      	bx	lr

08005fe2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005fe2:	b480      	push	{r7}
 8005fe4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ff0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ff4:	d101      	bne.n	8005ffa <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e000      	b.n	8005ffc <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bc80      	pop	{r7}
 8006002:	4770      	bx	lr

08006004 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8006004:	b480      	push	{r7}
 8006006:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006008:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006012:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006016:	d101      	bne.n	800601c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8006018:	2301      	movs	r3, #1
 800601a:	e000      	b.n	800601e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	46bd      	mov	sp, r7
 8006022:	bc80      	pop	{r7}
 8006024:	4770      	bx	lr
	...

08006028 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b088      	sub	sp, #32
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d101      	bne.n	800603a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e38b      	b.n	8006752 <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800603a:	f7ff fea6 	bl	8005d8a <LL_RCC_GetSysClkSource>
 800603e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006040:	f7ff ff8f 	bl	8005f62 <LL_RCC_PLL_GetMainSource>
 8006044:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0320 	and.w	r3, r3, #32
 800604e:	2b00      	cmp	r3, #0
 8006050:	f000 80c9 	beq.w	80061e6 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d005      	beq.n	8006066 <HAL_RCC_OscConfig+0x3e>
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	2b0c      	cmp	r3, #12
 800605e:	d17b      	bne.n	8006158 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	2b01      	cmp	r3, #1
 8006064:	d178      	bne.n	8006158 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006066:	f7ff fe32 	bl	8005cce <LL_RCC_MSI_IsReady>
 800606a:	4603      	mov	r3, r0
 800606c:	2b00      	cmp	r3, #0
 800606e:	d005      	beq.n	800607c <HAL_RCC_OscConfig+0x54>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6a1b      	ldr	r3, [r3, #32]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d101      	bne.n	800607c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	e36a      	b.n	8006752 <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006080:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0308 	and.w	r3, r3, #8
 800608a:	2b00      	cmp	r3, #0
 800608c:	d005      	beq.n	800609a <HAL_RCC_OscConfig+0x72>
 800608e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006098:	e006      	b.n	80060a8 <HAL_RCC_OscConfig+0x80>
 800609a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800609e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060a2:	091b      	lsrs	r3, r3, #4
 80060a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d222      	bcs.n	80060f2 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b0:	4618      	mov	r0, r3
 80060b2:	f000 fd6f 	bl	8006b94 <RCC_SetFlashLatencyFromMSIRange>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d001      	beq.n	80060c0 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	e348      	b.n	8006752 <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80060c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060ca:	f043 0308 	orr.w	r3, r3, #8
 80060ce:	6013      	str	r3, [r2, #0]
 80060d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060e2:	4313      	orrs	r3, r2
 80060e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7ff fe26 	bl	8005d3c <LL_RCC_MSI_SetCalibTrimming>
 80060f0:	e021      	b.n	8006136 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80060f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060fc:	f043 0308 	orr.w	r3, r3, #8
 8006100:	6013      	str	r3, [r2, #0]
 8006102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006110:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006114:	4313      	orrs	r3, r2
 8006116:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611c:	4618      	mov	r0, r3
 800611e:	f7ff fe0d 	bl	8005d3c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006126:	4618      	mov	r0, r3
 8006128:	f000 fd34 	bl	8006b94 <RCC_SetFlashLatencyFromMSIRange>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d001      	beq.n	8006136 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e30d      	b.n	8006752 <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006136:	f000 fcf5 	bl	8006b24 <HAL_RCC_GetHCLKFreq>
 800613a:	4603      	mov	r3, r0
 800613c:	4aa1      	ldr	r2, [pc, #644]	; (80063c4 <HAL_RCC_OscConfig+0x39c>)
 800613e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006140:	4ba1      	ldr	r3, [pc, #644]	; (80063c8 <HAL_RCC_OscConfig+0x3a0>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4618      	mov	r0, r3
 8006146:	f7fd fe8d 	bl	8003e64 <HAL_InitTick>
 800614a:	4603      	mov	r3, r0
 800614c:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 800614e:	7cfb      	ldrb	r3, [r7, #19]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d047      	beq.n	80061e4 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8006154:	7cfb      	ldrb	r3, [r7, #19]
 8006156:	e2fc      	b.n	8006752 <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a1b      	ldr	r3, [r3, #32]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d02c      	beq.n	80061ba <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006160:	f7ff fd99 	bl	8005c96 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006164:	f7fd feca 	bl	8003efc <HAL_GetTick>
 8006168:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800616a:	e008      	b.n	800617e <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800616c:	f7fd fec6 	bl	8003efc <HAL_GetTick>
 8006170:	4602      	mov	r2, r0
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	2b02      	cmp	r3, #2
 8006178:	d901      	bls.n	800617e <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	e2e9      	b.n	8006752 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 800617e:	f7ff fda6 	bl	8005cce <LL_RCC_MSI_IsReady>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d0f1      	beq.n	800616c <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006192:	f043 0308 	orr.w	r3, r3, #8
 8006196:	6013      	str	r3, [r2, #0]
 8006198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061aa:	4313      	orrs	r3, r2
 80061ac:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b2:	4618      	mov	r0, r3
 80061b4:	f7ff fdc2 	bl	8005d3c <LL_RCC_MSI_SetCalibTrimming>
 80061b8:	e015      	b.n	80061e6 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80061ba:	f7ff fd7a 	bl	8005cb2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80061be:	f7fd fe9d 	bl	8003efc <HAL_GetTick>
 80061c2:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80061c4:	e008      	b.n	80061d8 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80061c6:	f7fd fe99 	bl	8003efc <HAL_GetTick>
 80061ca:	4602      	mov	r2, r0
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	1ad3      	subs	r3, r2, r3
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	d901      	bls.n	80061d8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80061d4:	2303      	movs	r3, #3
 80061d6:	e2bc      	b.n	8006752 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 80061d8:	f7ff fd79 	bl	8005cce <LL_RCC_MSI_IsReady>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1f1      	bne.n	80061c6 <HAL_RCC_OscConfig+0x19e>
 80061e2:	e000      	b.n	80061e6 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80061e4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 0301 	and.w	r3, r3, #1
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d05f      	beq.n	80062b2 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	2b08      	cmp	r3, #8
 80061f6:	d005      	beq.n	8006204 <HAL_RCC_OscConfig+0x1dc>
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	2b0c      	cmp	r3, #12
 80061fc:	d10d      	bne.n	800621a <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	2b03      	cmp	r3, #3
 8006202:	d10a      	bne.n	800621a <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006204:	f7ff fcb3 	bl	8005b6e <LL_RCC_HSE_IsReady>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d050      	beq.n	80062b0 <HAL_RCC_OscConfig+0x288>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d14c      	bne.n	80062b0 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e29b      	b.n	8006752 <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800621a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800622c:	4313      	orrs	r3, r2
 800622e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006238:	d102      	bne.n	8006240 <HAL_RCC_OscConfig+0x218>
 800623a:	f7ff fc7c 	bl	8005b36 <LL_RCC_HSE_Enable>
 800623e:	e00d      	b.n	800625c <HAL_RCC_OscConfig+0x234>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8006248:	d104      	bne.n	8006254 <HAL_RCC_OscConfig+0x22c>
 800624a:	f7ff fc47 	bl	8005adc <LL_RCC_HSE_EnableTcxo>
 800624e:	f7ff fc72 	bl	8005b36 <LL_RCC_HSE_Enable>
 8006252:	e003      	b.n	800625c <HAL_RCC_OscConfig+0x234>
 8006254:	f7ff fc7d 	bl	8005b52 <LL_RCC_HSE_Disable>
 8006258:	f7ff fc4e 	bl	8005af8 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d012      	beq.n	800628a <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006264:	f7fd fe4a 	bl	8003efc <HAL_GetTick>
 8006268:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800626a:	e008      	b.n	800627e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800626c:	f7fd fe46 	bl	8003efc <HAL_GetTick>
 8006270:	4602      	mov	r2, r0
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	2b64      	cmp	r3, #100	; 0x64
 8006278:	d901      	bls.n	800627e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e269      	b.n	8006752 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 800627e:	f7ff fc76 	bl	8005b6e <LL_RCC_HSE_IsReady>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d0f1      	beq.n	800626c <HAL_RCC_OscConfig+0x244>
 8006288:	e013      	b.n	80062b2 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800628a:	f7fd fe37 	bl	8003efc <HAL_GetTick>
 800628e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8006290:	e008      	b.n	80062a4 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006292:	f7fd fe33 	bl	8003efc <HAL_GetTick>
 8006296:	4602      	mov	r2, r0
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	2b64      	cmp	r3, #100	; 0x64
 800629e:	d901      	bls.n	80062a4 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 80062a0:	2303      	movs	r3, #3
 80062a2:	e256      	b.n	8006752 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 80062a4:	f7ff fc63 	bl	8005b6e <LL_RCC_HSE_IsReady>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d1f1      	bne.n	8006292 <HAL_RCC_OscConfig+0x26a>
 80062ae:	e000      	b.n	80062b2 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062b0:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 0302 	and.w	r3, r3, #2
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d04b      	beq.n	8006356 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	2b04      	cmp	r3, #4
 80062c2:	d005      	beq.n	80062d0 <HAL_RCC_OscConfig+0x2a8>
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	2b0c      	cmp	r3, #12
 80062c8:	d113      	bne.n	80062f2 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d110      	bne.n	80062f2 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062d0:	f7ff fc7a 	bl	8005bc8 <LL_RCC_HSI_IsReady>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d005      	beq.n	80062e6 <HAL_RCC_OscConfig+0x2be>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d101      	bne.n	80062e6 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e235      	b.n	8006752 <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	695b      	ldr	r3, [r3, #20]
 80062ea:	4618      	mov	r0, r3
 80062ec:	f7ff fc7d 	bl	8005bea <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062f0:	e031      	b.n	8006356 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d019      	beq.n	800632e <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062fa:	f7ff fc49 	bl	8005b90 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062fe:	f7fd fdfd 	bl	8003efc <HAL_GetTick>
 8006302:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8006304:	e008      	b.n	8006318 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006306:	f7fd fdf9 	bl	8003efc <HAL_GetTick>
 800630a:	4602      	mov	r2, r0
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	1ad3      	subs	r3, r2, r3
 8006310:	2b02      	cmp	r3, #2
 8006312:	d901      	bls.n	8006318 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8006314:	2303      	movs	r3, #3
 8006316:	e21c      	b.n	8006752 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 8006318:	f7ff fc56 	bl	8005bc8 <LL_RCC_HSI_IsReady>
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d0f1      	beq.n	8006306 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	695b      	ldr	r3, [r3, #20]
 8006326:	4618      	mov	r0, r3
 8006328:	f7ff fc5f 	bl	8005bea <LL_RCC_HSI_SetCalibTrimming>
 800632c:	e013      	b.n	8006356 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800632e:	f7ff fc3d 	bl	8005bac <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006332:	f7fd fde3 	bl	8003efc <HAL_GetTick>
 8006336:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8006338:	e008      	b.n	800634c <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800633a:	f7fd fddf 	bl	8003efc <HAL_GetTick>
 800633e:	4602      	mov	r2, r0
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	2b02      	cmp	r3, #2
 8006346:	d901      	bls.n	800634c <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8006348:	2303      	movs	r3, #3
 800634a:	e202      	b.n	8006752 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 800634c:	f7ff fc3c 	bl	8005bc8 <LL_RCC_HSI_IsReady>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1f1      	bne.n	800633a <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 0308 	and.w	r3, r3, #8
 800635e:	2b00      	cmp	r3, #0
 8006360:	d06f      	beq.n	8006442 <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	699b      	ldr	r3, [r3, #24]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d057      	beq.n	800641a <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 800636a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800636e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006372:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	69da      	ldr	r2, [r3, #28]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f003 0310 	and.w	r3, r3, #16
 800637e:	429a      	cmp	r2, r3
 8006380:	d036      	beq.n	80063f0 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f003 0302 	and.w	r3, r3, #2
 8006388:	2b00      	cmp	r3, #0
 800638a:	d006      	beq.n	800639a <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006392:	2b00      	cmp	r3, #0
 8006394:	d101      	bne.n	800639a <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e1db      	b.n	8006752 <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f003 0301 	and.w	r3, r3, #1
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d018      	beq.n	80063d6 <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 80063a4:	f7ff fc56 	bl	8005c54 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80063a8:	f7fd fda8 	bl	8003efc <HAL_GetTick>
 80063ac:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80063ae:	e00d      	b.n	80063cc <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063b0:	f7fd fda4 	bl	8003efc <HAL_GetTick>
 80063b4:	4602      	mov	r2, r0
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	2b11      	cmp	r3, #17
 80063bc:	d906      	bls.n	80063cc <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	e1c7      	b.n	8006752 <HAL_RCC_OscConfig+0x72a>
 80063c2:	bf00      	nop
 80063c4:	20000000 	.word	0x20000000
 80063c8:	20000008 	.word	0x20000008
          while (LL_RCC_LSI_IsReady() != 0U)
 80063cc:	f7ff fc52 	bl	8005c74 <LL_RCC_LSI_IsReady>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1ec      	bne.n	80063b0 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80063d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063de:	f023 0210 	bic.w	r2, r3, #16
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	69db      	ldr	r3, [r3, #28]
 80063e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063ea:	4313      	orrs	r3, r2
 80063ec:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063f0:	f7ff fc20 	bl	8005c34 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063f4:	f7fd fd82 	bl	8003efc <HAL_GetTick>
 80063f8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80063fa:	e008      	b.n	800640e <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063fc:	f7fd fd7e 	bl	8003efc <HAL_GetTick>
 8006400:	4602      	mov	r2, r0
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	1ad3      	subs	r3, r2, r3
 8006406:	2b11      	cmp	r3, #17
 8006408:	d901      	bls.n	800640e <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 800640a:	2303      	movs	r3, #3
 800640c:	e1a1      	b.n	8006752 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 800640e:	f7ff fc31 	bl	8005c74 <LL_RCC_LSI_IsReady>
 8006412:	4603      	mov	r3, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d0f1      	beq.n	80063fc <HAL_RCC_OscConfig+0x3d4>
 8006418:	e013      	b.n	8006442 <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800641a:	f7ff fc1b 	bl	8005c54 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800641e:	f7fd fd6d 	bl	8003efc <HAL_GetTick>
 8006422:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8006424:	e008      	b.n	8006438 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006426:	f7fd fd69 	bl	8003efc <HAL_GetTick>
 800642a:	4602      	mov	r2, r0
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	2b11      	cmp	r3, #17
 8006432:	d901      	bls.n	8006438 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8006434:	2303      	movs	r3, #3
 8006436:	e18c      	b.n	8006752 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 8006438:	f7ff fc1c 	bl	8005c74 <LL_RCC_LSI_IsReady>
 800643c:	4603      	mov	r3, r0
 800643e:	2b00      	cmp	r3, #0
 8006440:	d1f1      	bne.n	8006426 <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 0304 	and.w	r3, r3, #4
 800644a:	2b00      	cmp	r3, #0
 800644c:	f000 80d8 	beq.w	8006600 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006450:	f7ff fb32 	bl	8005ab8 <LL_PWR_IsEnabledBkUpAccess>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d113      	bne.n	8006482 <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800645a:	f7ff faed 	bl	8005a38 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800645e:	f7fd fd4d 	bl	8003efc <HAL_GetTick>
 8006462:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006464:	e008      	b.n	8006478 <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006466:	f7fd fd49 	bl	8003efc <HAL_GetTick>
 800646a:	4602      	mov	r2, r0
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	1ad3      	subs	r3, r2, r3
 8006470:	2b02      	cmp	r3, #2
 8006472:	d901      	bls.n	8006478 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8006474:	2303      	movs	r3, #3
 8006476:	e16c      	b.n	8006752 <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006478:	f7ff fb1e 	bl	8005ab8 <LL_PWR_IsEnabledBkUpAccess>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d0f1      	beq.n	8006466 <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d07b      	beq.n	8006582 <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	2b85      	cmp	r3, #133	; 0x85
 8006490:	d003      	beq.n	800649a <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	2b05      	cmp	r3, #5
 8006498:	d109      	bne.n	80064ae <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800649a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800649e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064a6:	f043 0304 	orr.w	r3, r3, #4
 80064aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064ae:	f7fd fd25 	bl	8003efc <HAL_GetTick>
 80064b2:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80064b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064c0:	f043 0301 	orr.w	r3, r3, #1
 80064c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80064c8:	e00a      	b.n	80064e0 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064ca:	f7fd fd17 	bl	8003efc <HAL_GetTick>
 80064ce:	4602      	mov	r2, r0
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	1ad3      	subs	r3, r2, r3
 80064d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80064d8:	4293      	cmp	r3, r2
 80064da:	d901      	bls.n	80064e0 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80064dc:	2303      	movs	r3, #3
 80064de:	e138      	b.n	8006752 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 80064e0:	f7ff fb97 	bl	8005c12 <LL_RCC_LSE_IsReady>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d0ef      	beq.n	80064ca <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	2b81      	cmp	r3, #129	; 0x81
 80064f0:	d003      	beq.n	80064fa <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	2b85      	cmp	r3, #133	; 0x85
 80064f8:	d121      	bne.n	800653e <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064fa:	f7fd fcff 	bl	8003efc <HAL_GetTick>
 80064fe:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006500:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006508:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800650c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006510:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006514:	e00a      	b.n	800652c <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006516:	f7fd fcf1 	bl	8003efc <HAL_GetTick>
 800651a:	4602      	mov	r2, r0
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	1ad3      	subs	r3, r2, r3
 8006520:	f241 3288 	movw	r2, #5000	; 0x1388
 8006524:	4293      	cmp	r3, r2
 8006526:	d901      	bls.n	800652c <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 8006528:	2303      	movs	r3, #3
 800652a:	e112      	b.n	8006752 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800652c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006534:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006538:	2b00      	cmp	r3, #0
 800653a:	d0ec      	beq.n	8006516 <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800653c:	e060      	b.n	8006600 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800653e:	f7fd fcdd 	bl	8003efc <HAL_GetTick>
 8006542:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800654c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006550:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006554:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006558:	e00a      	b.n	8006570 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800655a:	f7fd fccf 	bl	8003efc <HAL_GetTick>
 800655e:	4602      	mov	r2, r0
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	1ad3      	subs	r3, r2, r3
 8006564:	f241 3288 	movw	r2, #5000	; 0x1388
 8006568:	4293      	cmp	r3, r2
 800656a:	d901      	bls.n	8006570 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 800656c:	2303      	movs	r3, #3
 800656e:	e0f0      	b.n	8006752 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006578:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800657c:	2b00      	cmp	r3, #0
 800657e:	d1ec      	bne.n	800655a <HAL_RCC_OscConfig+0x532>
 8006580:	e03e      	b.n	8006600 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006582:	f7fd fcbb 	bl	8003efc <HAL_GetTick>
 8006586:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800658c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006590:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006594:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006598:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800659c:	e00a      	b.n	80065b4 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800659e:	f7fd fcad 	bl	8003efc <HAL_GetTick>
 80065a2:	4602      	mov	r2, r0
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d901      	bls.n	80065b4 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 80065b0:	2303      	movs	r3, #3
 80065b2:	e0ce      	b.n	8006752 <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80065b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d1ec      	bne.n	800659e <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065c4:	f7fd fc9a 	bl	8003efc <HAL_GetTick>
 80065c8:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80065ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065d6:	f023 0301 	bic.w	r3, r3, #1
 80065da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80065de:	e00a      	b.n	80065f6 <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065e0:	f7fd fc8c 	bl	8003efc <HAL_GetTick>
 80065e4:	4602      	mov	r2, r0
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d901      	bls.n	80065f6 <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e0ad      	b.n	8006752 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 80065f6:	f7ff fb0c 	bl	8005c12 <LL_RCC_LSE_IsReady>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d1ef      	bne.n	80065e0 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006604:	2b00      	cmp	r3, #0
 8006606:	f000 80a3 	beq.w	8006750 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	2b0c      	cmp	r3, #12
 800660e:	d076      	beq.n	80066fe <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006614:	2b02      	cmp	r3, #2
 8006616:	d14b      	bne.n	80066b0 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006618:	f7ff fc62 	bl	8005ee0 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800661c:	f7fd fc6e 	bl	8003efc <HAL_GetTick>
 8006620:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8006622:	e008      	b.n	8006636 <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006624:	f7fd fc6a 	bl	8003efc <HAL_GetTick>
 8006628:	4602      	mov	r2, r0
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	2b0a      	cmp	r3, #10
 8006630:	d901      	bls.n	8006636 <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	e08d      	b.n	8006752 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8006636:	f7ff fc61 	bl	8005efc <LL_RCC_PLL_IsReady>
 800663a:	4603      	mov	r3, r0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d1f1      	bne.n	8006624 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006644:	68da      	ldr	r2, [r3, #12]
 8006646:	4b45      	ldr	r3, [pc, #276]	; (800675c <HAL_RCC_OscConfig+0x734>)
 8006648:	4013      	ands	r3, r2
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006652:	4311      	orrs	r1, r2
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006658:	0212      	lsls	r2, r2, #8
 800665a:	4311      	orrs	r1, r2
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006660:	4311      	orrs	r1, r2
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006666:	4311      	orrs	r1, r2
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800666c:	430a      	orrs	r2, r1
 800666e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006672:	4313      	orrs	r3, r2
 8006674:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006676:	f7ff fc25 	bl	8005ec4 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800667a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006688:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800668a:	f7fd fc37 	bl	8003efc <HAL_GetTick>
 800668e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8006690:	e008      	b.n	80066a4 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006692:	f7fd fc33 	bl	8003efc <HAL_GetTick>
 8006696:	4602      	mov	r2, r0
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	1ad3      	subs	r3, r2, r3
 800669c:	2b0a      	cmp	r3, #10
 800669e:	d901      	bls.n	80066a4 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 80066a0:	2303      	movs	r3, #3
 80066a2:	e056      	b.n	8006752 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 80066a4:	f7ff fc2a 	bl	8005efc <LL_RCC_PLL_IsReady>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d0f1      	beq.n	8006692 <HAL_RCC_OscConfig+0x66a>
 80066ae:	e04f      	b.n	8006750 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066b0:	f7ff fc16 	bl	8005ee0 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80066b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80066be:	f023 0303 	bic.w	r3, r3, #3
 80066c2:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 80066c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80066ce:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80066d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066d6:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066d8:	f7fd fc10 	bl	8003efc <HAL_GetTick>
 80066dc:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80066de:	e008      	b.n	80066f2 <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066e0:	f7fd fc0c 	bl	8003efc <HAL_GetTick>
 80066e4:	4602      	mov	r2, r0
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	1ad3      	subs	r3, r2, r3
 80066ea:	2b0a      	cmp	r3, #10
 80066ec:	d901      	bls.n	80066f2 <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 80066ee:	2303      	movs	r3, #3
 80066f0:	e02f      	b.n	8006752 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 80066f2:	f7ff fc03 	bl	8005efc <LL_RCC_PLL_IsReady>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d1f1      	bne.n	80066e0 <HAL_RCC_OscConfig+0x6b8>
 80066fc:	e028      	b.n	8006750 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006702:	2b01      	cmp	r3, #1
 8006704:	d101      	bne.n	800670a <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e023      	b.n	8006752 <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800670a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	f003 0203 	and.w	r2, r3, #3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800671c:	429a      	cmp	r2, r3
 800671e:	d115      	bne.n	800674c <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800672a:	429a      	cmp	r2, r3
 800672c:	d10e      	bne.n	800674c <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006738:	021b      	lsls	r3, r3, #8
 800673a:	429a      	cmp	r2, r3
 800673c:	d106      	bne.n	800674c <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006748:	429a      	cmp	r2, r3
 800674a:	d001      	beq.n	8006750 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	e000      	b.n	8006752 <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	3720      	adds	r7, #32
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	11c1808c 	.word	0x11c1808c

08006760 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d101      	bne.n	8006774 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e12c      	b.n	80069ce <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006774:	4b98      	ldr	r3, [pc, #608]	; (80069d8 <HAL_RCC_ClockConfig+0x278>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 0307 	and.w	r3, r3, #7
 800677c:	683a      	ldr	r2, [r7, #0]
 800677e:	429a      	cmp	r2, r3
 8006780:	d91b      	bls.n	80067ba <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006782:	4b95      	ldr	r3, [pc, #596]	; (80069d8 <HAL_RCC_ClockConfig+0x278>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f023 0207 	bic.w	r2, r3, #7
 800678a:	4993      	ldr	r1, [pc, #588]	; (80069d8 <HAL_RCC_ClockConfig+0x278>)
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	4313      	orrs	r3, r2
 8006790:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006792:	f7fd fbb3 	bl	8003efc <HAL_GetTick>
 8006796:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006798:	e008      	b.n	80067ac <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800679a:	f7fd fbaf 	bl	8003efc <HAL_GetTick>
 800679e:	4602      	mov	r2, r0
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	1ad3      	subs	r3, r2, r3
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d901      	bls.n	80067ac <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80067a8:	2303      	movs	r3, #3
 80067aa:	e110      	b.n	80069ce <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067ac:	4b8a      	ldr	r3, [pc, #552]	; (80069d8 <HAL_RCC_ClockConfig+0x278>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 0307 	and.w	r3, r3, #7
 80067b4:	683a      	ldr	r2, [r7, #0]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d1ef      	bne.n	800679a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 0302 	and.w	r3, r3, #2
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d016      	beq.n	80067f4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7ff fae8 	bl	8005da0 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80067d0:	f7fd fb94 	bl	8003efc <HAL_GetTick>
 80067d4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80067d6:	e008      	b.n	80067ea <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80067d8:	f7fd fb90 	bl	8003efc <HAL_GetTick>
 80067dc:	4602      	mov	r2, r0
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	2b02      	cmp	r3, #2
 80067e4:	d901      	bls.n	80067ea <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80067e6:	2303      	movs	r3, #3
 80067e8:	e0f1      	b.n	80069ce <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80067ea:	f7ff fbc5 	bl	8005f78 <LL_RCC_IsActiveFlag_HPRE>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d0f1      	beq.n	80067d8 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 0320 	and.w	r3, r3, #32
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d016      	beq.n	800682e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	695b      	ldr	r3, [r3, #20]
 8006804:	4618      	mov	r0, r3
 8006806:	f7ff fade 	bl	8005dc6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800680a:	f7fd fb77 	bl	8003efc <HAL_GetTick>
 800680e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006810:	e008      	b.n	8006824 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006812:	f7fd fb73 	bl	8003efc <HAL_GetTick>
 8006816:	4602      	mov	r2, r0
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	2b02      	cmp	r3, #2
 800681e:	d901      	bls.n	8006824 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006820:	2303      	movs	r3, #3
 8006822:	e0d4      	b.n	80069ce <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006824:	f7ff fbb9 	bl	8005f9a <LL_RCC_IsActiveFlag_C2HPRE>
 8006828:	4603      	mov	r3, r0
 800682a:	2b00      	cmp	r3, #0
 800682c:	d0f1      	beq.n	8006812 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006836:	2b00      	cmp	r3, #0
 8006838:	d016      	beq.n	8006868 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	699b      	ldr	r3, [r3, #24]
 800683e:	4618      	mov	r0, r3
 8006840:	f7ff fad6 	bl	8005df0 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006844:	f7fd fb5a 	bl	8003efc <HAL_GetTick>
 8006848:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800684a:	e008      	b.n	800685e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800684c:	f7fd fb56 	bl	8003efc <HAL_GetTick>
 8006850:	4602      	mov	r2, r0
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	2b02      	cmp	r3, #2
 8006858:	d901      	bls.n	800685e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	e0b7      	b.n	80069ce <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800685e:	f7ff fbae 	bl	8005fbe <LL_RCC_IsActiveFlag_SHDHPRE>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d0f1      	beq.n	800684c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0304 	and.w	r3, r3, #4
 8006870:	2b00      	cmp	r3, #0
 8006872:	d016      	beq.n	80068a2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	4618      	mov	r0, r3
 800687a:	f7ff facf 	bl	8005e1c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800687e:	f7fd fb3d 	bl	8003efc <HAL_GetTick>
 8006882:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006884:	e008      	b.n	8006898 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006886:	f7fd fb39 	bl	8003efc <HAL_GetTick>
 800688a:	4602      	mov	r2, r0
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	1ad3      	subs	r3, r2, r3
 8006890:	2b02      	cmp	r3, #2
 8006892:	d901      	bls.n	8006898 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8006894:	2303      	movs	r3, #3
 8006896:	e09a      	b.n	80069ce <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006898:	f7ff fba3 	bl	8005fe2 <LL_RCC_IsActiveFlag_PPRE1>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d0f1      	beq.n	8006886 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 0308 	and.w	r3, r3, #8
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d017      	beq.n	80068de <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	00db      	lsls	r3, r3, #3
 80068b4:	4618      	mov	r0, r3
 80068b6:	f7ff fac4 	bl	8005e42 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80068ba:	f7fd fb1f 	bl	8003efc <HAL_GetTick>
 80068be:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80068c0:	e008      	b.n	80068d4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80068c2:	f7fd fb1b 	bl	8003efc <HAL_GetTick>
 80068c6:	4602      	mov	r2, r0
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	1ad3      	subs	r3, r2, r3
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	d901      	bls.n	80068d4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80068d0:	2303      	movs	r3, #3
 80068d2:	e07c      	b.n	80069ce <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80068d4:	f7ff fb96 	bl	8006004 <LL_RCC_IsActiveFlag_PPRE2>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d0f1      	beq.n	80068c2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 0301 	and.w	r3, r3, #1
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d043      	beq.n	8006972 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	d106      	bne.n	8006900 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80068f2:	f7ff f93c 	bl	8005b6e <LL_RCC_HSE_IsReady>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d11e      	bne.n	800693a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e066      	b.n	80069ce <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	2b03      	cmp	r3, #3
 8006906:	d106      	bne.n	8006916 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006908:	f7ff faf8 	bl	8005efc <LL_RCC_PLL_IsReady>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d113      	bne.n	800693a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e05b      	b.n	80069ce <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d106      	bne.n	800692c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800691e:	f7ff f9d6 	bl	8005cce <LL_RCC_MSI_IsReady>
 8006922:	4603      	mov	r3, r0
 8006924:	2b00      	cmp	r3, #0
 8006926:	d108      	bne.n	800693a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	e050      	b.n	80069ce <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800692c:	f7ff f94c 	bl	8005bc8 <LL_RCC_HSI_IsReady>
 8006930:	4603      	mov	r3, r0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d101      	bne.n	800693a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e049      	b.n	80069ce <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	4618      	mov	r0, r3
 8006940:	f7ff fa10 	bl	8005d64 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006944:	f7fd fada 	bl	8003efc <HAL_GetTick>
 8006948:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800694a:	e00a      	b.n	8006962 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800694c:	f7fd fad6 	bl	8003efc <HAL_GetTick>
 8006950:	4602      	mov	r2, r0
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	f241 3288 	movw	r2, #5000	; 0x1388
 800695a:	4293      	cmp	r3, r2
 800695c:	d901      	bls.n	8006962 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800695e:	2303      	movs	r3, #3
 8006960:	e035      	b.n	80069ce <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006962:	f7ff fa12 	bl	8005d8a <LL_RCC_GetSysClkSource>
 8006966:	4602      	mov	r2, r0
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	429a      	cmp	r2, r3
 8006970:	d1ec      	bne.n	800694c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006972:	4b19      	ldr	r3, [pc, #100]	; (80069d8 <HAL_RCC_ClockConfig+0x278>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 0307 	and.w	r3, r3, #7
 800697a:	683a      	ldr	r2, [r7, #0]
 800697c:	429a      	cmp	r2, r3
 800697e:	d21b      	bcs.n	80069b8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006980:	4b15      	ldr	r3, [pc, #84]	; (80069d8 <HAL_RCC_ClockConfig+0x278>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f023 0207 	bic.w	r2, r3, #7
 8006988:	4913      	ldr	r1, [pc, #76]	; (80069d8 <HAL_RCC_ClockConfig+0x278>)
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	4313      	orrs	r3, r2
 800698e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006990:	f7fd fab4 	bl	8003efc <HAL_GetTick>
 8006994:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006996:	e008      	b.n	80069aa <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006998:	f7fd fab0 	bl	8003efc <HAL_GetTick>
 800699c:	4602      	mov	r2, r0
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d901      	bls.n	80069aa <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e011      	b.n	80069ce <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069aa:	4b0b      	ldr	r3, [pc, #44]	; (80069d8 <HAL_RCC_ClockConfig+0x278>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 0307 	and.w	r3, r3, #7
 80069b2:	683a      	ldr	r2, [r7, #0]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d1ef      	bne.n	8006998 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80069b8:	f000 f8b4 	bl	8006b24 <HAL_RCC_GetHCLKFreq>
 80069bc:	4603      	mov	r3, r0
 80069be:	4a07      	ldr	r2, [pc, #28]	; (80069dc <HAL_RCC_ClockConfig+0x27c>)
 80069c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80069c2:	4b07      	ldr	r3, [pc, #28]	; (80069e0 <HAL_RCC_ClockConfig+0x280>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4618      	mov	r0, r3
 80069c8:	f7fd fa4c 	bl	8003e64 <HAL_InitTick>
 80069cc:	4603      	mov	r3, r0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	58004000 	.word	0x58004000
 80069dc:	20000000 	.word	0x20000000
 80069e0:	20000008 	.word	0x20000008

080069e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069e4:	b590      	push	{r4, r7, lr}
 80069e6:	b087      	sub	sp, #28
 80069e8:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80069ea:	2300      	movs	r3, #0
 80069ec:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80069ee:	2300      	movs	r3, #0
 80069f0:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069f2:	f7ff f9ca 	bl	8005d8a <LL_RCC_GetSysClkSource>
 80069f6:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80069f8:	f7ff fab3 	bl	8005f62 <LL_RCC_PLL_GetMainSource>
 80069fc:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d005      	beq.n	8006a10 <HAL_RCC_GetSysClockFreq+0x2c>
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	2b0c      	cmp	r3, #12
 8006a08:	d139      	bne.n	8006a7e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d136      	bne.n	8006a7e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006a10:	f7ff f96d 	bl	8005cee <LL_RCC_MSI_IsEnabledRangeSelect>
 8006a14:	4603      	mov	r3, r0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d115      	bne.n	8006a46 <HAL_RCC_GetSysClockFreq+0x62>
 8006a1a:	f7ff f968 	bl	8005cee <LL_RCC_MSI_IsEnabledRangeSelect>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d106      	bne.n	8006a32 <HAL_RCC_GetSysClockFreq+0x4e>
 8006a24:	f7ff f973 	bl	8005d0e <LL_RCC_MSI_GetRange>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	0a1b      	lsrs	r3, r3, #8
 8006a2c:	f003 030f 	and.w	r3, r3, #15
 8006a30:	e005      	b.n	8006a3e <HAL_RCC_GetSysClockFreq+0x5a>
 8006a32:	f7ff f977 	bl	8005d24 <LL_RCC_MSI_GetRangeAfterStandby>
 8006a36:	4603      	mov	r3, r0
 8006a38:	0a1b      	lsrs	r3, r3, #8
 8006a3a:	f003 030f 	and.w	r3, r3, #15
 8006a3e:	4a36      	ldr	r2, [pc, #216]	; (8006b18 <HAL_RCC_GetSysClockFreq+0x134>)
 8006a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a44:	e014      	b.n	8006a70 <HAL_RCC_GetSysClockFreq+0x8c>
 8006a46:	f7ff f952 	bl	8005cee <LL_RCC_MSI_IsEnabledRangeSelect>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d106      	bne.n	8006a5e <HAL_RCC_GetSysClockFreq+0x7a>
 8006a50:	f7ff f95d 	bl	8005d0e <LL_RCC_MSI_GetRange>
 8006a54:	4603      	mov	r3, r0
 8006a56:	091b      	lsrs	r3, r3, #4
 8006a58:	f003 030f 	and.w	r3, r3, #15
 8006a5c:	e005      	b.n	8006a6a <HAL_RCC_GetSysClockFreq+0x86>
 8006a5e:	f7ff f961 	bl	8005d24 <LL_RCC_MSI_GetRangeAfterStandby>
 8006a62:	4603      	mov	r3, r0
 8006a64:	091b      	lsrs	r3, r3, #4
 8006a66:	f003 030f 	and.w	r3, r3, #15
 8006a6a:	4a2b      	ldr	r2, [pc, #172]	; (8006b18 <HAL_RCC_GetSysClockFreq+0x134>)
 8006a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a70:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d115      	bne.n	8006aa4 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006a7c:	e012      	b.n	8006aa4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	2b04      	cmp	r3, #4
 8006a82:	d102      	bne.n	8006a8a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006a84:	4b25      	ldr	r3, [pc, #148]	; (8006b1c <HAL_RCC_GetSysClockFreq+0x138>)
 8006a86:	617b      	str	r3, [r7, #20]
 8006a88:	e00c      	b.n	8006aa4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	2b08      	cmp	r3, #8
 8006a8e:	d109      	bne.n	8006aa4 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006a90:	f7ff f840 	bl	8005b14 <LL_RCC_HSE_IsEnabledDiv2>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d102      	bne.n	8006aa0 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006a9a:	4b20      	ldr	r3, [pc, #128]	; (8006b1c <HAL_RCC_GetSysClockFreq+0x138>)
 8006a9c:	617b      	str	r3, [r7, #20]
 8006a9e:	e001      	b.n	8006aa4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006aa0:	4b1f      	ldr	r3, [pc, #124]	; (8006b20 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006aa2:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006aa4:	f7ff f971 	bl	8005d8a <LL_RCC_GetSysClkSource>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b0c      	cmp	r3, #12
 8006aac:	d12f      	bne.n	8006b0e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006aae:	f7ff fa58 	bl	8005f62 <LL_RCC_PLL_GetMainSource>
 8006ab2:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	d003      	beq.n	8006ac2 <HAL_RCC_GetSysClockFreq+0xde>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2b03      	cmp	r3, #3
 8006abe:	d003      	beq.n	8006ac8 <HAL_RCC_GetSysClockFreq+0xe4>
 8006ac0:	e00d      	b.n	8006ade <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006ac2:	4b16      	ldr	r3, [pc, #88]	; (8006b1c <HAL_RCC_GetSysClockFreq+0x138>)
 8006ac4:	60fb      	str	r3, [r7, #12]
        break;
 8006ac6:	e00d      	b.n	8006ae4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006ac8:	f7ff f824 	bl	8005b14 <LL_RCC_HSE_IsEnabledDiv2>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d102      	bne.n	8006ad8 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006ad2:	4b12      	ldr	r3, [pc, #72]	; (8006b1c <HAL_RCC_GetSysClockFreq+0x138>)
 8006ad4:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006ad6:	e005      	b.n	8006ae4 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8006ad8:	4b11      	ldr	r3, [pc, #68]	; (8006b20 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006ada:	60fb      	str	r3, [r7, #12]
        break;
 8006adc:	e002      	b.n	8006ae4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	60fb      	str	r3, [r7, #12]
        break;
 8006ae2:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8006ae4:	f7ff fa1b 	bl	8005f1e <LL_RCC_PLL_GetN>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	fb03 f402 	mul.w	r4, r3, r2
 8006af0:	f7ff fa2c 	bl	8005f4c <LL_RCC_PLL_GetDivider>
 8006af4:	4603      	mov	r3, r0
 8006af6:	091b      	lsrs	r3, r3, #4
 8006af8:	3301      	adds	r3, #1
 8006afa:	fbb4 f4f3 	udiv	r4, r4, r3
 8006afe:	f7ff fa1a 	bl	8005f36 <LL_RCC_PLL_GetR>
 8006b02:	4603      	mov	r3, r0
 8006b04:	0f5b      	lsrs	r3, r3, #29
 8006b06:	3301      	adds	r3, #1
 8006b08:	fbb4 f3f3 	udiv	r3, r4, r3
 8006b0c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8006b0e:	697b      	ldr	r3, [r7, #20]
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	371c      	adds	r7, #28
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd90      	pop	{r4, r7, pc}
 8006b18:	0800d5f8 	.word	0x0800d5f8
 8006b1c:	00f42400 	.word	0x00f42400
 8006b20:	01e84800 	.word	0x01e84800

08006b24 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b24:	b598      	push	{r3, r4, r7, lr}
 8006b26:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006b28:	f7ff ff5c 	bl	80069e4 <HAL_RCC_GetSysClockFreq>
 8006b2c:	4604      	mov	r4, r0
 8006b2e:	f7ff f99b 	bl	8005e68 <LL_RCC_GetAHBPrescaler>
 8006b32:	4603      	mov	r3, r0
 8006b34:	091b      	lsrs	r3, r3, #4
 8006b36:	f003 030f 	and.w	r3, r3, #15
 8006b3a:	4a03      	ldr	r2, [pc, #12]	; (8006b48 <HAL_RCC_GetHCLKFreq+0x24>)
 8006b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b40:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	bd98      	pop	{r3, r4, r7, pc}
 8006b48:	0800d598 	.word	0x0800d598

08006b4c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b4c:	b598      	push	{r3, r4, r7, lr}
 8006b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006b50:	f7ff ffe8 	bl	8006b24 <HAL_RCC_GetHCLKFreq>
 8006b54:	4604      	mov	r4, r0
 8006b56:	f7ff f99f 	bl	8005e98 <LL_RCC_GetAPB1Prescaler>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	0a1b      	lsrs	r3, r3, #8
 8006b5e:	4a03      	ldr	r2, [pc, #12]	; (8006b6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b64:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	bd98      	pop	{r3, r4, r7, pc}
 8006b6c:	0800d5d8 	.word	0x0800d5d8

08006b70 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b70:	b598      	push	{r3, r4, r7, lr}
 8006b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006b74:	f7ff ffd6 	bl	8006b24 <HAL_RCC_GetHCLKFreq>
 8006b78:	4604      	mov	r4, r0
 8006b7a:	f7ff f998 	bl	8005eae <LL_RCC_GetAPB2Prescaler>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	0adb      	lsrs	r3, r3, #11
 8006b82:	4a03      	ldr	r2, [pc, #12]	; (8006b90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b88:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	bd98      	pop	{r3, r4, r7, pc}
 8006b90:	0800d5d8 	.word	0x0800d5d8

08006b94 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006b94:	b590      	push	{r4, r7, lr}
 8006b96:	b085      	sub	sp, #20
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	091b      	lsrs	r3, r3, #4
 8006ba0:	f003 030f 	and.w	r3, r3, #15
 8006ba4:	4a10      	ldr	r2, [pc, #64]	; (8006be8 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8006ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006baa:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8006bac:	f7ff f967 	bl	8005e7e <LL_RCC_GetAHB3Prescaler>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	091b      	lsrs	r3, r3, #4
 8006bb4:	f003 030f 	and.w	r3, r3, #15
 8006bb8:	4a0c      	ldr	r2, [pc, #48]	; (8006bec <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8006bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bc4:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	4a09      	ldr	r2, [pc, #36]	; (8006bf0 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8006bca:	fba2 2303 	umull	r2, r3, r2, r3
 8006bce:	0c9c      	lsrs	r4, r3, #18
 8006bd0:	f7fe ff5c 	bl	8005a8c <HAL_PWREx_GetVoltageRange>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	4620      	mov	r0, r4
 8006bda:	f000 f80b 	bl	8006bf4 <RCC_SetFlashLatency>
 8006bde:	4603      	mov	r3, r0
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3714      	adds	r7, #20
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd90      	pop	{r4, r7, pc}
 8006be8:	0800d5f8 	.word	0x0800d5f8
 8006bec:	0800d598 	.word	0x0800d598
 8006bf0:	431bde83 	.word	0x431bde83

08006bf4 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b08e      	sub	sp, #56	; 0x38
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8006bfe:	4a3a      	ldr	r2, [pc, #232]	; (8006ce8 <RCC_SetFlashLatency+0xf4>)
 8006c00:	f107 0320 	add.w	r3, r7, #32
 8006c04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006c08:	6018      	str	r0, [r3, #0]
 8006c0a:	3304      	adds	r3, #4
 8006c0c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8006c0e:	4a37      	ldr	r2, [pc, #220]	; (8006cec <RCC_SetFlashLatency+0xf8>)
 8006c10:	f107 0318 	add.w	r3, r7, #24
 8006c14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006c18:	6018      	str	r0, [r3, #0]
 8006c1a:	3304      	adds	r3, #4
 8006c1c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8006c1e:	4a34      	ldr	r2, [pc, #208]	; (8006cf0 <RCC_SetFlashLatency+0xfc>)
 8006c20:	f107 030c 	add.w	r3, r7, #12
 8006c24:	ca07      	ldmia	r2, {r0, r1, r2}
 8006c26:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c34:	d11b      	bne.n	8006c6e <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006c36:	2300      	movs	r3, #0
 8006c38:	633b      	str	r3, [r7, #48]	; 0x30
 8006c3a:	e014      	b.n	8006c66 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3e:	005b      	lsls	r3, r3, #1
 8006c40:	3338      	adds	r3, #56	; 0x38
 8006c42:	443b      	add	r3, r7
 8006c44:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8006c48:	461a      	mov	r2, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d807      	bhi.n	8006c60 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	3338      	adds	r3, #56	; 0x38
 8006c56:	443b      	add	r3, r7
 8006c58:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006c5c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c5e:	e021      	b.n	8006ca4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c62:	3301      	adds	r3, #1
 8006c64:	633b      	str	r3, [r7, #48]	; 0x30
 8006c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c68:	2b02      	cmp	r3, #2
 8006c6a:	d9e7      	bls.n	8006c3c <RCC_SetFlashLatency+0x48>
 8006c6c:	e01a      	b.n	8006ca4 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006c6e:	2300      	movs	r3, #0
 8006c70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c72:	e014      	b.n	8006c9e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c76:	005b      	lsls	r3, r3, #1
 8006c78:	3338      	adds	r3, #56	; 0x38
 8006c7a:	443b      	add	r3, r7
 8006c7c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8006c80:	461a      	mov	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d807      	bhi.n	8006c98 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	3338      	adds	r3, #56	; 0x38
 8006c8e:	443b      	add	r3, r7
 8006c90:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006c94:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c96:	e005      	b.n	8006ca4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	d9e7      	bls.n	8006c74 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006ca4:	4b13      	ldr	r3, [pc, #76]	; (8006cf4 <RCC_SetFlashLatency+0x100>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f023 0207 	bic.w	r2, r3, #7
 8006cac:	4911      	ldr	r1, [pc, #68]	; (8006cf4 <RCC_SetFlashLatency+0x100>)
 8006cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006cb4:	f7fd f922 	bl	8003efc <HAL_GetTick>
 8006cb8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006cba:	e008      	b.n	8006cce <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006cbc:	f7fd f91e 	bl	8003efc <HAL_GetTick>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d901      	bls.n	8006cce <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	e007      	b.n	8006cde <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006cce:	4b09      	ldr	r3, [pc, #36]	; (8006cf4 <RCC_SetFlashLatency+0x100>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 0307 	and.w	r3, r3, #7
 8006cd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d1ef      	bne.n	8006cbc <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3738      	adds	r7, #56	; 0x38
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	bf00      	nop
 8006ce8:	0800d57c 	.word	0x0800d57c
 8006cec:	0800d584 	.word	0x0800d584
 8006cf0:	0800d58c 	.word	0x0800d58c
 8006cf4:	58004000 	.word	0x58004000

08006cf8 <LL_RCC_LSE_IsReady>:
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d04:	f003 0302 	and.w	r3, r3, #2
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	d101      	bne.n	8006d10 <LL_RCC_LSE_IsReady+0x18>
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e000      	b.n	8006d12 <LL_RCC_LSE_IsReady+0x1a>
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bc80      	pop	{r7}
 8006d18:	4770      	bx	lr

08006d1a <LL_RCC_SetUSARTClockSource>:
{
 8006d1a:	b480      	push	{r7}
 8006d1c:	b083      	sub	sp, #12
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8006d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d26:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	0c1b      	lsrs	r3, r3, #16
 8006d2e:	43db      	mvns	r3, r3
 8006d30:	401a      	ands	r2, r3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006d40:	bf00      	nop
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bc80      	pop	{r7}
 8006d48:	4770      	bx	lr

08006d4a <LL_RCC_SetI2SClockSource>:
{
 8006d4a:	b480      	push	{r7}
 8006d4c:	b083      	sub	sp, #12
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8006d52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006d6a:	bf00      	nop
 8006d6c:	370c      	adds	r7, #12
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bc80      	pop	{r7}
 8006d72:	4770      	bx	lr

08006d74 <LL_RCC_SetLPUARTClockSource>:
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d84:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006d88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006d94:	bf00      	nop
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bc80      	pop	{r7}
 8006d9c:	4770      	bx	lr

08006d9e <LL_RCC_SetI2CClockSource>:
{
 8006d9e:	b480      	push	{r7}
 8006da0:	b083      	sub	sp, #12
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006da6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006daa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	091b      	lsrs	r3, r3, #4
 8006db2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006db6:	43db      	mvns	r3, r3
 8006db8:	401a      	ands	r2, r3
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	011b      	lsls	r3, r3, #4
 8006dbe:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006dc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006dcc:	bf00      	nop
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bc80      	pop	{r7}
 8006dd4:	4770      	bx	lr

08006dd6 <LL_RCC_SetLPTIMClockSource>:
{
 8006dd6:	b480      	push	{r7}
 8006dd8:	b083      	sub	sp, #12
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006dde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006de2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	0c1b      	lsrs	r3, r3, #16
 8006dea:	041b      	lsls	r3, r3, #16
 8006dec:	43db      	mvns	r3, r3
 8006dee:	401a      	ands	r2, r3
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	041b      	lsls	r3, r3, #16
 8006df4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006dfe:	bf00      	nop
 8006e00:	370c      	adds	r7, #12
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bc80      	pop	{r7}
 8006e06:	4770      	bx	lr

08006e08 <LL_RCC_SetRNGClockSource>:
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e18:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006e1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006e28:	bf00      	nop
 8006e2a:	370c      	adds	r7, #12
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bc80      	pop	{r7}
 8006e30:	4770      	bx	lr

08006e32 <LL_RCC_SetADCClockSource>:
{
 8006e32:	b480      	push	{r7}
 8006e34:	b083      	sub	sp, #12
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006e3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e42:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006e46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006e52:	bf00      	nop
 8006e54:	370c      	adds	r7, #12
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bc80      	pop	{r7}
 8006e5a:	4770      	bx	lr

08006e5c <LL_RCC_SetRTCClockSource>:
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006e7c:	bf00      	nop
 8006e7e:	370c      	adds	r7, #12
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bc80      	pop	{r7}
 8006e84:	4770      	bx	lr

08006e86 <LL_RCC_GetRTCClockSource>:
{
 8006e86:	b480      	push	{r7}
 8006e88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e92:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bc80      	pop	{r7}
 8006e9c:	4770      	bx	lr

08006e9e <LL_RCC_ForceBackupDomainReset>:
{
 8006e9e:	b480      	push	{r7}
 8006ea0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006ea2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eaa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006eae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006eb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006eb6:	bf00      	nop
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bc80      	pop	{r7}
 8006ebc:	4770      	bx	lr

08006ebe <LL_RCC_ReleaseBackupDomainReset>:
{
 8006ebe:	b480      	push	{r7}
 8006ec0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006ec2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ece:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ed2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006ed6:	bf00      	nop
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bc80      	pop	{r7}
 8006edc:	4770      	bx	lr
	...

08006ee0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b086      	sub	sp, #24
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8006eec:	2300      	movs	r3, #0
 8006eee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d058      	beq.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8006f00:	f7fe fd9a 	bl	8005a38 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f04:	f7fc fffa 	bl	8003efc <HAL_GetTick>
 8006f08:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006f0a:	e009      	b.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f0c:	f7fc fff6 	bl	8003efc <HAL_GetTick>
 8006f10:	4602      	mov	r2, r0
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	1ad3      	subs	r3, r2, r3
 8006f16:	2b02      	cmp	r3, #2
 8006f18:	d902      	bls.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8006f1a:	2303      	movs	r3, #3
 8006f1c:	74fb      	strb	r3, [r7, #19]
        break;
 8006f1e:	e006      	b.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006f20:	4b7b      	ldr	r3, [pc, #492]	; (8007110 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f2c:	d1ee      	bne.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8006f2e:	7cfb      	ldrb	r3, [r7, #19]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d13c      	bne.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8006f34:	f7ff ffa7 	bl	8006e86 <LL_RCC_GetRTCClockSource>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d00f      	beq.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f4e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006f50:	f7ff ffa5 	bl	8006e9e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006f54:	f7ff ffb3 	bl	8006ebe <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006f58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	f003 0302 	and.w	r3, r3, #2
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d014      	beq.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f6c:	f7fc ffc6 	bl	8003efc <HAL_GetTick>
 8006f70:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8006f72:	e00b      	b.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f74:	f7fc ffc2 	bl	8003efc <HAL_GetTick>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	1ad3      	subs	r3, r2, r3
 8006f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d902      	bls.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8006f86:	2303      	movs	r3, #3
 8006f88:	74fb      	strb	r3, [r7, #19]
            break;
 8006f8a:	e004      	b.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8006f8c:	f7ff feb4 	bl	8006cf8 <LL_RCC_LSE_IsReady>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d1ee      	bne.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8006f96:	7cfb      	ldrb	r3, [r7, #19]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d105      	bne.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f7ff ff5b 	bl	8006e5c <LL_RCC_SetRTCClockSource>
 8006fa6:	e004      	b.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006fa8:	7cfb      	ldrb	r3, [r7, #19]
 8006faa:	74bb      	strb	r3, [r7, #18]
 8006fac:	e001      	b.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fae:	7cfb      	ldrb	r3, [r7, #19]
 8006fb0:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 0301 	and.w	r3, r3, #1
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d004      	beq.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f7ff fea9 	bl	8006d1a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 0302 	and.w	r3, r3, #2
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d004      	beq.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f7ff fe9e 	bl	8006d1a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f003 0320 	and.w	r3, r3, #32
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d004      	beq.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f7ff fec0 	bl	8006d74 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d004      	beq.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6a1b      	ldr	r3, [r3, #32]
 8007004:	4618      	mov	r0, r3
 8007006:	f7ff fee6 	bl	8006dd6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007012:	2b00      	cmp	r3, #0
 8007014:	d004      	beq.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701a:	4618      	mov	r0, r3
 800701c:	f7ff fedb 	bl	8006dd6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007028:	2b00      	cmp	r3, #0
 800702a:	d004      	beq.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007030:	4618      	mov	r0, r3
 8007032:	f7ff fed0 	bl	8006dd6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800703e:	2b00      	cmp	r3, #0
 8007040:	d004      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	695b      	ldr	r3, [r3, #20]
 8007046:	4618      	mov	r0, r3
 8007048:	f7ff fea9 	bl	8006d9e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007054:	2b00      	cmp	r3, #0
 8007056:	d004      	beq.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	699b      	ldr	r3, [r3, #24]
 800705c:	4618      	mov	r0, r3
 800705e:	f7ff fe9e 	bl	8006d9e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800706a:	2b00      	cmp	r3, #0
 800706c:	d004      	beq.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	69db      	ldr	r3, [r3, #28]
 8007072:	4618      	mov	r0, r3
 8007074:	f7ff fe93 	bl	8006d9e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f003 0310 	and.w	r3, r3, #16
 8007080:	2b00      	cmp	r3, #0
 8007082:	d011      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	4618      	mov	r0, r3
 800708a:	f7ff fe5e 	bl	8006d4a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007096:	d107      	bne.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8007098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80070a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80070a6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d010      	beq.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b8:	4618      	mov	r0, r3
 80070ba:	f7ff fea5 	bl	8006e08 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d107      	bne.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80070c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80070d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80070d4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d011      	beq.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e6:	4618      	mov	r0, r3
 80070e8:	f7ff fea3 	bl	8006e32 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070f4:	d107      	bne.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80070f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007104:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8007106:	7cbb      	ldrb	r3, [r7, #18]
}
 8007108:	4618      	mov	r0, r3
 800710a:	3718      	adds	r7, #24
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}
 8007110:	58000400 	.word	0x58000400

08007114 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d068      	beq.n	80071f8 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800712c:	b2db      	uxtb	r3, r3
 800712e:	2b00      	cmp	r3, #0
 8007130:	d106      	bne.n	8007140 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f7fc fc92 	bl	8003a64 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2202      	movs	r2, #2
 8007144:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007148:	4b2e      	ldr	r3, [pc, #184]	; (8007204 <HAL_RTC_Init+0xf0>)
 800714a:	22ca      	movs	r2, #202	; 0xca
 800714c:	625a      	str	r2, [r3, #36]	; 0x24
 800714e:	4b2d      	ldr	r3, [pc, #180]	; (8007204 <HAL_RTC_Init+0xf0>)
 8007150:	2253      	movs	r2, #83	; 0x53
 8007152:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 fa4f 	bl	80075f8 <RTC_EnterInitMode>
 800715a:	4603      	mov	r3, r0
 800715c:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800715e:	7bfb      	ldrb	r3, [r7, #15]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d13f      	bne.n	80071e4 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8007164:	4b27      	ldr	r3, [pc, #156]	; (8007204 <HAL_RTC_Init+0xf0>)
 8007166:	699b      	ldr	r3, [r3, #24]
 8007168:	4a26      	ldr	r2, [pc, #152]	; (8007204 <HAL_RTC_Init+0xf0>)
 800716a:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800716e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007172:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8007174:	4b23      	ldr	r3, [pc, #140]	; (8007204 <HAL_RTC_Init+0xf0>)
 8007176:	699a      	ldr	r2, [r3, #24]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6859      	ldr	r1, [r3, #4]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	4319      	orrs	r1, r3
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	699b      	ldr	r3, [r3, #24]
 8007186:	430b      	orrs	r3, r1
 8007188:	491e      	ldr	r1, [pc, #120]	; (8007204 <HAL_RTC_Init+0xf0>)
 800718a:	4313      	orrs	r3, r2
 800718c:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	68da      	ldr	r2, [r3, #12]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	041b      	lsls	r3, r3, #16
 8007198:	491a      	ldr	r1, [pc, #104]	; (8007204 <HAL_RTC_Init+0xf0>)
 800719a:	4313      	orrs	r3, r2
 800719c:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800719e:	4b19      	ldr	r3, [pc, #100]	; (8007204 <HAL_RTC_Init+0xf0>)
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ae:	430b      	orrs	r3, r1
 80071b0:	4914      	ldr	r1, [pc, #80]	; (8007204 <HAL_RTC_Init+0xf0>)
 80071b2:	4313      	orrs	r3, r2
 80071b4:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 fa52 	bl	8007660 <RTC_ExitInitMode>
 80071bc:	4603      	mov	r3, r0
 80071be:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80071c0:	7bfb      	ldrb	r3, [r7, #15]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d10e      	bne.n	80071e4 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 80071c6:	4b0f      	ldr	r3, [pc, #60]	; (8007204 <HAL_RTC_Init+0xf0>)
 80071c8:	699b      	ldr	r3, [r3, #24]
 80071ca:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a19      	ldr	r1, [r3, #32]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	69db      	ldr	r3, [r3, #28]
 80071d6:	4319      	orrs	r1, r3
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	695b      	ldr	r3, [r3, #20]
 80071dc:	430b      	orrs	r3, r1
 80071de:	4909      	ldr	r1, [pc, #36]	; (8007204 <HAL_RTC_Init+0xf0>)
 80071e0:	4313      	orrs	r3, r2
 80071e2:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071e4:	4b07      	ldr	r3, [pc, #28]	; (8007204 <HAL_RTC_Init+0xf0>)
 80071e6:	22ff      	movs	r2, #255	; 0xff
 80071e8:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 80071ea:	7bfb      	ldrb	r3, [r7, #15]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d103      	bne.n	80071f8 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 80071f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3710      	adds	r7, #16
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	40002800 	.word	0x40002800

08007208 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007208:	b590      	push	{r4, r7, lr}
 800720a:	b087      	sub	sp, #28
 800720c:	af00      	add	r7, sp, #0
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	60b9      	str	r1, [r7, #8]
 8007212:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800721a:	2b01      	cmp	r3, #1
 800721c:	d101      	bne.n	8007222 <HAL_RTC_SetTime+0x1a>
 800721e:	2302      	movs	r3, #2
 8007220:	e088      	b.n	8007334 <HAL_RTC_SetTime+0x12c>
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2201      	movs	r2, #1
 8007226:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2202      	movs	r2, #2
 800722e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007232:	4b42      	ldr	r3, [pc, #264]	; (800733c <HAL_RTC_SetTime+0x134>)
 8007234:	22ca      	movs	r2, #202	; 0xca
 8007236:	625a      	str	r2, [r3, #36]	; 0x24
 8007238:	4b40      	ldr	r3, [pc, #256]	; (800733c <HAL_RTC_SetTime+0x134>)
 800723a:	2253      	movs	r2, #83	; 0x53
 800723c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800723e:	68f8      	ldr	r0, [r7, #12]
 8007240:	f000 f9da 	bl	80075f8 <RTC_EnterInitMode>
 8007244:	4603      	mov	r3, r0
 8007246:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007248:	7cfb      	ldrb	r3, [r7, #19]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d15e      	bne.n	800730c <HAL_RTC_SetTime+0x104>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800724e:	4b3b      	ldr	r3, [pc, #236]	; (800733c <HAL_RTC_SetTime+0x134>)
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800725a:	d057      	beq.n	800730c <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d125      	bne.n	80072ae <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8007262:	4b36      	ldr	r3, [pc, #216]	; (800733c <HAL_RTC_SetTime+0x134>)
 8007264:	699b      	ldr	r3, [r3, #24]
 8007266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800726a:	2b00      	cmp	r3, #0
 800726c:	d102      	bne.n	8007274 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	2200      	movs	r2, #0
 8007272:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	4618      	mov	r0, r3
 800727a:	f000 fa2f 	bl	80076dc <RTC_ByteToBcd2>
 800727e:	4603      	mov	r3, r0
 8007280:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	785b      	ldrb	r3, [r3, #1]
 8007286:	4618      	mov	r0, r3
 8007288:	f000 fa28 	bl	80076dc <RTC_ByteToBcd2>
 800728c:	4603      	mov	r3, r0
 800728e:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007290:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	789b      	ldrb	r3, [r3, #2]
 8007296:	4618      	mov	r0, r3
 8007298:	f000 fa20 	bl	80076dc <RTC_ByteToBcd2>
 800729c:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800729e:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	78db      	ldrb	r3, [r3, #3]
 80072a6:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80072a8:	4313      	orrs	r3, r2
 80072aa:	617b      	str	r3, [r7, #20]
 80072ac:	e017      	b.n	80072de <HAL_RTC_SetTime+0xd6>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80072ae:	4b23      	ldr	r3, [pc, #140]	; (800733c <HAL_RTC_SetTime+0x134>)
 80072b0:	699b      	ldr	r3, [r3, #24]
 80072b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d102      	bne.n	80072c0 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	2200      	movs	r2, #0
 80072be:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	785b      	ldrb	r3, [r3, #1]
 80072ca:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80072cc:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80072ce:	68ba      	ldr	r2, [r7, #8]
 80072d0:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80072d2:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	78db      	ldrb	r3, [r3, #3]
 80072d8:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80072da:	4313      	orrs	r3, r2
 80072dc:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 80072de:	4a17      	ldr	r2, [pc, #92]	; (800733c <HAL_RTC_SetTime+0x134>)
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80072e6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80072ea:	6013      	str	r3, [r2, #0]
      
      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 80072ec:	4b13      	ldr	r3, [pc, #76]	; (800733c <HAL_RTC_SetTime+0x134>)
 80072ee:	699b      	ldr	r3, [r3, #24]
 80072f0:	4a12      	ldr	r2, [pc, #72]	; (800733c <HAL_RTC_SetTime+0x134>)
 80072f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80072f6:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 80072f8:	4b10      	ldr	r3, [pc, #64]	; (800733c <HAL_RTC_SetTime+0x134>)
 80072fa:	699a      	ldr	r2, [r3, #24]
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	68d9      	ldr	r1, [r3, #12]
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	691b      	ldr	r3, [r3, #16]
 8007304:	430b      	orrs	r3, r1
 8007306:	490d      	ldr	r1, [pc, #52]	; (800733c <HAL_RTC_SetTime+0x134>)
 8007308:	4313      	orrs	r3, r2
 800730a:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 800730c:	68f8      	ldr	r0, [r7, #12]
 800730e:	f000 f9a7 	bl	8007660 <RTC_ExitInitMode>
 8007312:	4603      	mov	r3, r0
 8007314:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007316:	4b09      	ldr	r3, [pc, #36]	; (800733c <HAL_RTC_SetTime+0x134>)
 8007318:	22ff      	movs	r2, #255	; 0xff
 800731a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800731c:	7cfb      	ldrb	r3, [r7, #19]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d103      	bne.n	800732a <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2201      	movs	r2, #1
 8007326:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2200      	movs	r2, #0
 800732e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8007332:	7cfb      	ldrb	r3, [r7, #19]
}
 8007334:	4618      	mov	r0, r3
 8007336:	371c      	adds	r7, #28
 8007338:	46bd      	mov	sp, r7
 800733a:	bd90      	pop	{r4, r7, pc}
 800733c:	40002800 	.word	0x40002800

08007340 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b086      	sub	sp, #24
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 800734c:	4b2c      	ldr	r3, [pc, #176]	; (8007400 <HAL_RTC_GetTime+0xc0>)
 800734e:	689a      	ldr	r2, [r3, #8]
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8007354:	4b2a      	ldr	r3, [pc, #168]	; (8007400 <HAL_RTC_GetTime+0xc0>)
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800735c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007360:	d049      	beq.n	80073f6 <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8007362:	4b27      	ldr	r3, [pc, #156]	; (8007400 <HAL_RTC_GetTime+0xc0>)
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 800736e:	4b24      	ldr	r3, [pc, #144]	; (8007400 <HAL_RTC_GetTime+0xc0>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007376:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800737a:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	0c1b      	lsrs	r3, r3, #16
 8007380:	b2db      	uxtb	r3, r3
 8007382:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007386:	b2da      	uxtb	r2, r3
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	0a1b      	lsrs	r3, r3, #8
 8007390:	b2db      	uxtb	r3, r3
 8007392:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007396:	b2da      	uxtb	r2, r3
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073a4:	b2da      	uxtb	r2, r3
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	0d9b      	lsrs	r3, r3, #22
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	f003 0301 	and.w	r3, r3, #1
 80073b4:	b2da      	uxtb	r2, r3
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d11a      	bne.n	80073f6 <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	4618      	mov	r0, r3
 80073c6:	f000 f9a8 	bl	800771a <RTC_Bcd2ToByte>
 80073ca:	4603      	mov	r3, r0
 80073cc:	461a      	mov	r2, r3
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	785b      	ldrb	r3, [r3, #1]
 80073d6:	4618      	mov	r0, r3
 80073d8:	f000 f99f 	bl	800771a <RTC_Bcd2ToByte>
 80073dc:	4603      	mov	r3, r0
 80073de:	461a      	mov	r2, r3
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	789b      	ldrb	r3, [r3, #2]
 80073e8:	4618      	mov	r0, r3
 80073ea:	f000 f996 	bl	800771a <RTC_Bcd2ToByte>
 80073ee:	4603      	mov	r3, r0
 80073f0:	461a      	mov	r2, r3
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 80073f6:	2300      	movs	r3, #0
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3718      	adds	r7, #24
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	40002800 	.word	0x40002800

08007404 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007404:	b590      	push	{r4, r7, lr}
 8007406:	b087      	sub	sp, #28
 8007408:	af00      	add	r7, sp, #0
 800740a:	60f8      	str	r0, [r7, #12]
 800740c:	60b9      	str	r1, [r7, #8]
 800740e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007416:	2b01      	cmp	r3, #1
 8007418:	d101      	bne.n	800741e <HAL_RTC_SetDate+0x1a>
 800741a:	2302      	movs	r3, #2
 800741c:	e071      	b.n	8007502 <HAL_RTC_SetDate+0xfe>
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2201      	movs	r2, #1
 8007422:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2202      	movs	r2, #2
 800742a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d10e      	bne.n	8007452 <HAL_RTC_SetDate+0x4e>
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	785b      	ldrb	r3, [r3, #1]
 8007438:	f003 0310 	and.w	r3, r3, #16
 800743c:	2b00      	cmp	r3, #0
 800743e:	d008      	beq.n	8007452 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	785b      	ldrb	r3, [r3, #1]
 8007444:	f023 0310 	bic.w	r3, r3, #16
 8007448:	b2db      	uxtb	r3, r3
 800744a:	330a      	adds	r3, #10
 800744c:	b2da      	uxtb	r2, r3
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d11c      	bne.n	8007492 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	78db      	ldrb	r3, [r3, #3]
 800745c:	4618      	mov	r0, r3
 800745e:	f000 f93d 	bl	80076dc <RTC_ByteToBcd2>
 8007462:	4603      	mov	r3, r0
 8007464:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	785b      	ldrb	r3, [r3, #1]
 800746a:	4618      	mov	r0, r3
 800746c:	f000 f936 	bl	80076dc <RTC_ByteToBcd2>
 8007470:	4603      	mov	r3, r0
 8007472:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007474:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	789b      	ldrb	r3, [r3, #2]
 800747a:	4618      	mov	r0, r3
 800747c:	f000 f92e 	bl	80076dc <RTC_ByteToBcd2>
 8007480:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007482:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800748c:	4313      	orrs	r3, r2
 800748e:	617b      	str	r3, [r7, #20]
 8007490:	e00e      	b.n	80074b0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	78db      	ldrb	r3, [r3, #3]
 8007496:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	785b      	ldrb	r3, [r3, #1]
 800749c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800749e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80074a0:	68ba      	ldr	r2, [r7, #8]
 80074a2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80074a4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80074ac:	4313      	orrs	r3, r2
 80074ae:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80074b0:	4b16      	ldr	r3, [pc, #88]	; (800750c <HAL_RTC_SetDate+0x108>)
 80074b2:	22ca      	movs	r2, #202	; 0xca
 80074b4:	625a      	str	r2, [r3, #36]	; 0x24
 80074b6:	4b15      	ldr	r3, [pc, #84]	; (800750c <HAL_RTC_SetDate+0x108>)
 80074b8:	2253      	movs	r2, #83	; 0x53
 80074ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80074bc:	68f8      	ldr	r0, [r7, #12]
 80074be:	f000 f89b 	bl	80075f8 <RTC_EnterInitMode>
 80074c2:	4603      	mov	r3, r0
 80074c4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80074c6:	7cfb      	ldrb	r3, [r7, #19]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d10b      	bne.n	80074e4 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 80074cc:	4a0f      	ldr	r2, [pc, #60]	; (800750c <HAL_RTC_SetDate+0x108>)
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80074d4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80074d8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80074da:	68f8      	ldr	r0, [r7, #12]
 80074dc:	f000 f8c0 	bl	8007660 <RTC_ExitInitMode>
 80074e0:	4603      	mov	r3, r0
 80074e2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074e4:	4b09      	ldr	r3, [pc, #36]	; (800750c <HAL_RTC_SetDate+0x108>)
 80074e6:	22ff      	movs	r2, #255	; 0xff
 80074e8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80074ea:	7cfb      	ldrb	r3, [r7, #19]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d103      	bne.n	80074f8 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8007500:	7cfb      	ldrb	r3, [r7, #19]
}
 8007502:	4618      	mov	r0, r3
 8007504:	371c      	adds	r7, #28
 8007506:	46bd      	mov	sp, r7
 8007508:	bd90      	pop	{r4, r7, pc}
 800750a:	bf00      	nop
 800750c:	40002800 	.word	0x40002800

08007510 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b086      	sub	sp, #24
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 800751c:	4b22      	ldr	r3, [pc, #136]	; (80075a8 <HAL_RTC_GetDate+0x98>)
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007524:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007528:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	0c1b      	lsrs	r3, r3, #16
 800752e:	b2da      	uxtb	r2, r3
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	0a1b      	lsrs	r3, r3, #8
 8007538:	b2db      	uxtb	r3, r3
 800753a:	f003 031f 	and.w	r3, r3, #31
 800753e:	b2da      	uxtb	r2, r3
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	b2db      	uxtb	r3, r3
 8007548:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800754c:	b2da      	uxtb	r2, r3
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	0b5b      	lsrs	r3, r3, #13
 8007556:	b2db      	uxtb	r3, r3
 8007558:	f003 0307 	and.w	r3, r3, #7
 800755c:	b2da      	uxtb	r2, r3
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d11a      	bne.n	800759e <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	78db      	ldrb	r3, [r3, #3]
 800756c:	4618      	mov	r0, r3
 800756e:	f000 f8d4 	bl	800771a <RTC_Bcd2ToByte>
 8007572:	4603      	mov	r3, r0
 8007574:	461a      	mov	r2, r3
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	785b      	ldrb	r3, [r3, #1]
 800757e:	4618      	mov	r0, r3
 8007580:	f000 f8cb 	bl	800771a <RTC_Bcd2ToByte>
 8007584:	4603      	mov	r3, r0
 8007586:	461a      	mov	r2, r3
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	789b      	ldrb	r3, [r3, #2]
 8007590:	4618      	mov	r0, r3
 8007592:	f000 f8c2 	bl	800771a <RTC_Bcd2ToByte>
 8007596:	4603      	mov	r3, r0
 8007598:	461a      	mov	r2, r3
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800759e:	2300      	movs	r3, #0
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3718      	adds	r7, #24
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	40002800 	.word	0x40002800

080075ac <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80075b4:	4b0f      	ldr	r3, [pc, #60]	; (80075f4 <HAL_RTC_WaitForSynchro+0x48>)
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	4a0e      	ldr	r2, [pc, #56]	; (80075f4 <HAL_RTC_WaitForSynchro+0x48>)
 80075ba:	f023 0320 	bic.w	r3, r3, #32
 80075be:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80075c0:	f7fc fc9c 	bl	8003efc <HAL_GetTick>
 80075c4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80075c6:	e009      	b.n	80075dc <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80075c8:	f7fc fc98 	bl	8003efc <HAL_GetTick>
 80075cc:	4602      	mov	r2, r0
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	1ad3      	subs	r3, r2, r3
 80075d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075d6:	d901      	bls.n	80075dc <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80075d8:	2303      	movs	r3, #3
 80075da:	e006      	b.n	80075ea <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80075dc:	4b05      	ldr	r3, [pc, #20]	; (80075f4 <HAL_RTC_WaitForSynchro+0x48>)
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	f003 0320 	and.w	r3, r3, #32
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d0ef      	beq.n	80075c8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3710      	adds	r7, #16
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	40002800 	.word	0x40002800

080075f8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007600:	2300      	movs	r3, #0
 8007602:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8007604:	4b15      	ldr	r3, [pc, #84]	; (800765c <RTC_EnterInitMode+0x64>)
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800760c:	2b00      	cmp	r3, #0
 800760e:	d120      	bne.n	8007652 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007610:	4b12      	ldr	r3, [pc, #72]	; (800765c <RTC_EnterInitMode+0x64>)
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	4a11      	ldr	r2, [pc, #68]	; (800765c <RTC_EnterInitMode+0x64>)
 8007616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800761a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800761c:	f7fc fc6e 	bl	8003efc <HAL_GetTick>
 8007620:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007622:	e00d      	b.n	8007640 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007624:	f7fc fc6a 	bl	8003efc <HAL_GetTick>
 8007628:	4602      	mov	r2, r0
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	1ad3      	subs	r3, r2, r3
 800762e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007632:	d905      	bls.n	8007640 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007634:	2303      	movs	r3, #3
 8007636:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2203      	movs	r2, #3
 800763c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007640:	4b06      	ldr	r3, [pc, #24]	; (800765c <RTC_EnterInitMode+0x64>)
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007648:	2b00      	cmp	r3, #0
 800764a:	d102      	bne.n	8007652 <RTC_EnterInitMode+0x5a>
 800764c:	7bfb      	ldrb	r3, [r7, #15]
 800764e:	2b03      	cmp	r3, #3
 8007650:	d1e8      	bne.n	8007624 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8007652:	7bfb      	ldrb	r3, [r7, #15]
}
 8007654:	4618      	mov	r0, r3
 8007656:	3710      	adds	r7, #16
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}
 800765c:	40002800 	.word	0x40002800

08007660 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007668:	2300      	movs	r3, #0
 800766a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800766c:	4b1a      	ldr	r3, [pc, #104]	; (80076d8 <RTC_ExitInitMode+0x78>)
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	4a19      	ldr	r2, [pc, #100]	; (80076d8 <RTC_ExitInitMode+0x78>)
 8007672:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007676:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007678:	4b17      	ldr	r3, [pc, #92]	; (80076d8 <RTC_ExitInitMode+0x78>)
 800767a:	699b      	ldr	r3, [r3, #24]
 800767c:	f003 0320 	and.w	r3, r3, #32
 8007680:	2b00      	cmp	r3, #0
 8007682:	d10c      	bne.n	800769e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f7ff ff91 	bl	80075ac <HAL_RTC_WaitForSynchro>
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	d01e      	beq.n	80076ce <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2203      	movs	r2, #3
 8007694:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8007698:	2303      	movs	r3, #3
 800769a:	73fb      	strb	r3, [r7, #15]
 800769c:	e017      	b.n	80076ce <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800769e:	4b0e      	ldr	r3, [pc, #56]	; (80076d8 <RTC_ExitInitMode+0x78>)
 80076a0:	699b      	ldr	r3, [r3, #24]
 80076a2:	4a0d      	ldr	r2, [pc, #52]	; (80076d8 <RTC_ExitInitMode+0x78>)
 80076a4:	f023 0320 	bic.w	r3, r3, #32
 80076a8:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f7ff ff7e 	bl	80075ac <HAL_RTC_WaitForSynchro>
 80076b0:	4603      	mov	r3, r0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d005      	beq.n	80076c2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2203      	movs	r2, #3
 80076ba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80076be:	2303      	movs	r3, #3
 80076c0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80076c2:	4b05      	ldr	r3, [pc, #20]	; (80076d8 <RTC_ExitInitMode+0x78>)
 80076c4:	699b      	ldr	r3, [r3, #24]
 80076c6:	4a04      	ldr	r2, [pc, #16]	; (80076d8 <RTC_ExitInitMode+0x78>)
 80076c8:	f043 0320 	orr.w	r3, r3, #32
 80076cc:	6193      	str	r3, [r2, #24]
  }

  return status;
 80076ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3710      	adds	r7, #16
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	40002800 	.word	0x40002800

080076dc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80076dc:	b480      	push	{r7}
 80076de:	b085      	sub	sp, #20
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	4603      	mov	r3, r0
 80076e4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80076e6:	2300      	movs	r3, #0
 80076e8:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80076ea:	79fb      	ldrb	r3, [r7, #7]
 80076ec:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80076ee:	e005      	b.n	80076fc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	3301      	adds	r3, #1
 80076f4:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80076f6:	7afb      	ldrb	r3, [r7, #11]
 80076f8:	3b0a      	subs	r3, #10
 80076fa:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80076fc:	7afb      	ldrb	r3, [r7, #11]
 80076fe:	2b09      	cmp	r3, #9
 8007700:	d8f6      	bhi.n	80076f0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	b2db      	uxtb	r3, r3
 8007706:	011b      	lsls	r3, r3, #4
 8007708:	b2da      	uxtb	r2, r3
 800770a:	7afb      	ldrb	r3, [r7, #11]
 800770c:	4313      	orrs	r3, r2
 800770e:	b2db      	uxtb	r3, r3
}
 8007710:	4618      	mov	r0, r3
 8007712:	3714      	adds	r7, #20
 8007714:	46bd      	mov	sp, r7
 8007716:	bc80      	pop	{r7}
 8007718:	4770      	bx	lr

0800771a <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800771a:	b480      	push	{r7}
 800771c:	b085      	sub	sp, #20
 800771e:	af00      	add	r7, sp, #0
 8007720:	4603      	mov	r3, r0
 8007722:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8007724:	79fb      	ldrb	r3, [r7, #7]
 8007726:	091b      	lsrs	r3, r3, #4
 8007728:	b2db      	uxtb	r3, r3
 800772a:	461a      	mov	r2, r3
 800772c:	4613      	mov	r3, r2
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	4413      	add	r3, r2
 8007732:	005b      	lsls	r3, r3, #1
 8007734:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	b2da      	uxtb	r2, r3
 800773a:	79fb      	ldrb	r3, [r7, #7]
 800773c:	f003 030f 	and.w	r3, r3, #15
 8007740:	b2db      	uxtb	r3, r3
 8007742:	4413      	add	r3, r2
 8007744:	b2db      	uxtb	r3, r3
}
 8007746:	4618      	mov	r0, r3
 8007748:	3714      	adds	r7, #20
 800774a:	46bd      	mov	sp, r7
 800774c:	bc80      	pop	{r7}
 800774e:	4770      	bx	lr

08007750 <HAL_RTCEx_SetTimeStamp>:
  *               The RTC TimeStamp Pin is per default PC13, but for reasons of
  *               compatibility, this parameter is required.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8007750:	b480      	push	{r7}
 8007752:	b085      	sub	sp, #20
 8007754:	af00      	add	r7, sp, #0
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	60b9      	str	r1, [r7, #8]
 800775a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
  UNUSED(RTC_TimeStampPin);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007762:	2b01      	cmp	r3, #1
 8007764:	d101      	bne.n	800776a <HAL_RTCEx_SetTimeStamp+0x1a>
 8007766:	2302      	movs	r3, #2
 8007768:	e029      	b.n	80077be <HAL_RTCEx_SetTimeStamp+0x6e>
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2201      	movs	r2, #1
 800776e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2202      	movs	r2, #2
 8007776:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Get the RTC_CR register and clear the bits to be configured */
  CLEAR_BIT(RTC->CR, (RTC_CR_TSEDGE | RTC_CR_TSE));
 800777a:	4b13      	ldr	r3, [pc, #76]	; (80077c8 <HAL_RTCEx_SetTimeStamp+0x78>)
 800777c:	699b      	ldr	r3, [r3, #24]
 800777e:	4a12      	ldr	r2, [pc, #72]	; (80077c8 <HAL_RTCEx_SetTimeStamp+0x78>)
 8007780:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007784:	f023 0308 	bic.w	r3, r3, #8
 8007788:	6193      	str	r3, [r2, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800778a:	4b0f      	ldr	r3, [pc, #60]	; (80077c8 <HAL_RTCEx_SetTimeStamp+0x78>)
 800778c:	22ca      	movs	r2, #202	; 0xca
 800778e:	625a      	str	r2, [r3, #36]	; 0x24
 8007790:	4b0d      	ldr	r3, [pc, #52]	; (80077c8 <HAL_RTCEx_SetTimeStamp+0x78>)
 8007792:	2253      	movs	r2, #83	; 0x53
 8007794:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Time Stamp TSEDGE and Enable bits */
  SET_BIT(RTC->CR, (uint32_t)TimeStampEdge | RTC_CR_TSE);
 8007796:	4b0c      	ldr	r3, [pc, #48]	; (80077c8 <HAL_RTCEx_SetTimeStamp+0x78>)
 8007798:	699a      	ldr	r2, [r3, #24]
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	4313      	orrs	r3, r2
 800779e:	4a0a      	ldr	r2, [pc, #40]	; (80077c8 <HAL_RTCEx_SetTimeStamp+0x78>)
 80077a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80077a4:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077a6:	4b08      	ldr	r3, [pc, #32]	; (80077c8 <HAL_RTCEx_SetTimeStamp+0x78>)
 80077a8:	22ff      	movs	r2, #255	; 0xff
 80077aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2201      	movs	r2, #1
 80077b0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2200      	movs	r2, #0
 80077b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3714      	adds	r7, #20
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bc80      	pop	{r7}
 80077c6:	4770      	bx	lr
 80077c8:	40002800 	.word	0x40002800

080077cc <HAL_RTCEx_SetRefClock>:
  * @brief  Enable the RTC reference clock detection.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetRefClock(RTC_HandleTypeDef *hrtc)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d101      	bne.n	80077e2 <HAL_RTCEx_SetRefClock+0x16>
 80077de:	2302      	movs	r3, #2
 80077e0:	e02f      	b.n	8007842 <HAL_RTCEx_SetRefClock+0x76>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2201      	movs	r2, #1
 80077e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2202      	movs	r2, #2
 80077ee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80077f2:	4b16      	ldr	r3, [pc, #88]	; (800784c <HAL_RTCEx_SetRefClock+0x80>)
 80077f4:	22ca      	movs	r2, #202	; 0xca
 80077f6:	625a      	str	r2, [r3, #36]	; 0x24
 80077f8:	4b14      	ldr	r3, [pc, #80]	; (800784c <HAL_RTCEx_SetRefClock+0x80>)
 80077fa:	2253      	movs	r2, #83	; 0x53
 80077fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f7ff fefa 	bl	80075f8 <RTC_EnterInitMode>
 8007804:	4603      	mov	r3, r0
 8007806:	73fb      	strb	r3, [r7, #15]
  if (status == HAL_OK)
 8007808:	7bfb      	ldrb	r3, [r7, #15]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d10a      	bne.n	8007824 <HAL_RTCEx_SetRefClock+0x58>
  {
    /* Enable clockref detection */
    SET_BIT(RTC->CR, RTC_CR_REFCKON);
 800780e:	4b0f      	ldr	r3, [pc, #60]	; (800784c <HAL_RTCEx_SetRefClock+0x80>)
 8007810:	699b      	ldr	r3, [r3, #24]
 8007812:	4a0e      	ldr	r2, [pc, #56]	; (800784c <HAL_RTCEx_SetRefClock+0x80>)
 8007814:	f043 0310 	orr.w	r3, r3, #16
 8007818:	6193      	str	r3, [r2, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f7ff ff20 	bl	8007660 <RTC_ExitInitMode>
 8007820:	4603      	mov	r3, r0
 8007822:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007824:	4b09      	ldr	r3, [pc, #36]	; (800784c <HAL_RTCEx_SetRefClock+0x80>)
 8007826:	22ff      	movs	r2, #255	; 0xff
 8007828:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800782a:	7bfb      	ldrb	r3, [r7, #15]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d103      	bne.n	8007838 <HAL_RTCEx_SetRefClock+0x6c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8007840:	7bfb      	ldrb	r3, [r7, #15]
}
 8007842:	4618      	mov	r0, r3
 8007844:	3710      	adds	r7, #16
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	40002800 	.word	0x40002800

08007850 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8007850:	b480      	push	{r7}
 8007852:	b087      	sub	sp, #28
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800785c:	4b07      	ldr	r3, [pc, #28]	; (800787c <HAL_RTCEx_BKUPWrite+0x2c>)
 800785e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	697a      	ldr	r2, [r7, #20]
 8007866:	4413      	add	r3, r2
 8007868:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	601a      	str	r2, [r3, #0]
}
 8007870:	bf00      	nop
 8007872:	371c      	adds	r7, #28
 8007874:	46bd      	mov	sp, r7
 8007876:	bc80      	pop	{r7}
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	4000b100 	.word	0x4000b100

08007880 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8007880:	b480      	push	{r7}
 8007882:	b085      	sub	sp, #20
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800788a:	4b07      	ldr	r3, [pc, #28]	; (80078a8 <HAL_RTCEx_BKUPRead+0x28>)
 800788c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	68fa      	ldr	r2, [r7, #12]
 8007894:	4413      	add	r3, r2
 8007896:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
}
 800789c:	4618      	mov	r0, r3
 800789e:	3714      	adds	r7, #20
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bc80      	pop	{r7}
 80078a4:	4770      	bx	lr
 80078a6:	bf00      	nop
 80078a8:	4000b100 	.word	0x4000b100

080078ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d101      	bne.n	80078be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	e049      	b.n	8007952 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d106      	bne.n	80078d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2200      	movs	r2, #0
 80078ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f7fc f910 	bl	8003af8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2202      	movs	r2, #2
 80078dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	3304      	adds	r3, #4
 80078e8:	4619      	mov	r1, r3
 80078ea:	4610      	mov	r0, r2
 80078ec:	f000 f9c6 	bl	8007c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2201      	movs	r2, #1
 80078f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2201      	movs	r2, #1
 80078fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2201      	movs	r2, #1
 8007904:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2201      	movs	r2, #1
 800790c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2201      	movs	r2, #1
 8007914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2201      	movs	r2, #1
 800791c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2201      	movs	r2, #1
 8007924:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2201      	movs	r2, #1
 800792c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2201      	movs	r2, #1
 8007934:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2201      	movs	r2, #1
 800794c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007950:	2300      	movs	r3, #0
}
 8007952:	4618      	mov	r0, r3
 8007954:	3708      	adds	r7, #8
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
	...

0800795c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800795c:	b480      	push	{r7}
 800795e:	b085      	sub	sp, #20
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800796a:	b2db      	uxtb	r3, r3
 800796c:	2b01      	cmp	r3, #1
 800796e:	d001      	beq.n	8007974 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007970:	2301      	movs	r3, #1
 8007972:	e02e      	b.n	80079d2 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2202      	movs	r2, #2
 8007978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a16      	ldr	r2, [pc, #88]	; (80079dc <HAL_TIM_Base_Start+0x80>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d004      	beq.n	8007990 <HAL_TIM_Base_Start+0x34>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800798e:	d115      	bne.n	80079bc <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	689a      	ldr	r2, [r3, #8]
 8007996:	4b12      	ldr	r3, [pc, #72]	; (80079e0 <HAL_TIM_Base_Start+0x84>)
 8007998:	4013      	ands	r3, r2
 800799a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2b06      	cmp	r3, #6
 80079a0:	d015      	beq.n	80079ce <HAL_TIM_Base_Start+0x72>
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079a8:	d011      	beq.n	80079ce <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f042 0201 	orr.w	r2, r2, #1
 80079b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079ba:	e008      	b.n	80079ce <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	681a      	ldr	r2, [r3, #0]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f042 0201 	orr.w	r2, r2, #1
 80079ca:	601a      	str	r2, [r3, #0]
 80079cc:	e000      	b.n	80079d0 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80079d0:	2300      	movs	r3, #0
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3714      	adds	r7, #20
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bc80      	pop	{r7}
 80079da:	4770      	bx	lr
 80079dc:	40012c00 	.word	0x40012c00
 80079e0:	00010007 	.word	0x00010007

080079e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b082      	sub	sp, #8
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	691b      	ldr	r3, [r3, #16]
 80079f2:	f003 0302 	and.w	r3, r3, #2
 80079f6:	2b02      	cmp	r3, #2
 80079f8:	d122      	bne.n	8007a40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	f003 0302 	and.w	r3, r3, #2
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	d11b      	bne.n	8007a40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f06f 0202 	mvn.w	r2, #2
 8007a10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2201      	movs	r2, #1
 8007a16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	699b      	ldr	r3, [r3, #24]
 8007a1e:	f003 0303 	and.w	r3, r3, #3
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d003      	beq.n	8007a2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 f90d 	bl	8007c46 <HAL_TIM_IC_CaptureCallback>
 8007a2c:	e005      	b.n	8007a3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 f900 	bl	8007c34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 f90f 	bl	8007c58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	691b      	ldr	r3, [r3, #16]
 8007a46:	f003 0304 	and.w	r3, r3, #4
 8007a4a:	2b04      	cmp	r3, #4
 8007a4c:	d122      	bne.n	8007a94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	f003 0304 	and.w	r3, r3, #4
 8007a58:	2b04      	cmp	r3, #4
 8007a5a:	d11b      	bne.n	8007a94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f06f 0204 	mvn.w	r2, #4
 8007a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2202      	movs	r2, #2
 8007a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	699b      	ldr	r3, [r3, #24]
 8007a72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d003      	beq.n	8007a82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 f8e3 	bl	8007c46 <HAL_TIM_IC_CaptureCallback>
 8007a80:	e005      	b.n	8007a8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 f8d6 	bl	8007c34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 f8e5 	bl	8007c58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2200      	movs	r2, #0
 8007a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	691b      	ldr	r3, [r3, #16]
 8007a9a:	f003 0308 	and.w	r3, r3, #8
 8007a9e:	2b08      	cmp	r3, #8
 8007aa0:	d122      	bne.n	8007ae8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	f003 0308 	and.w	r3, r3, #8
 8007aac:	2b08      	cmp	r3, #8
 8007aae:	d11b      	bne.n	8007ae8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f06f 0208 	mvn.w	r2, #8
 8007ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2204      	movs	r2, #4
 8007abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	69db      	ldr	r3, [r3, #28]
 8007ac6:	f003 0303 	and.w	r3, r3, #3
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d003      	beq.n	8007ad6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 f8b9 	bl	8007c46 <HAL_TIM_IC_CaptureCallback>
 8007ad4:	e005      	b.n	8007ae2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 f8ac 	bl	8007c34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 f8bb 	bl	8007c58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	691b      	ldr	r3, [r3, #16]
 8007aee:	f003 0310 	and.w	r3, r3, #16
 8007af2:	2b10      	cmp	r3, #16
 8007af4:	d122      	bne.n	8007b3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	f003 0310 	and.w	r3, r3, #16
 8007b00:	2b10      	cmp	r3, #16
 8007b02:	d11b      	bne.n	8007b3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f06f 0210 	mvn.w	r2, #16
 8007b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2208      	movs	r2, #8
 8007b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	69db      	ldr	r3, [r3, #28]
 8007b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d003      	beq.n	8007b2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 f88f 	bl	8007c46 <HAL_TIM_IC_CaptureCallback>
 8007b28:	e005      	b.n	8007b36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 f882 	bl	8007c34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 f891 	bl	8007c58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	691b      	ldr	r3, [r3, #16]
 8007b42:	f003 0301 	and.w	r3, r3, #1
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d10e      	bne.n	8007b68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	f003 0301 	and.w	r3, r3, #1
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d107      	bne.n	8007b68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f06f 0201 	mvn.w	r2, #1
 8007b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 f85d 	bl	8007c22 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	691b      	ldr	r3, [r3, #16]
 8007b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b72:	2b80      	cmp	r3, #128	; 0x80
 8007b74:	d10e      	bne.n	8007b94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b80:	2b80      	cmp	r3, #128	; 0x80
 8007b82:	d107      	bne.n	8007b94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 f8df 	bl	8007d52 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	691b      	ldr	r3, [r3, #16]
 8007b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ba2:	d10e      	bne.n	8007bc2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	68db      	ldr	r3, [r3, #12]
 8007baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bae:	2b80      	cmp	r3, #128	; 0x80
 8007bb0:	d107      	bne.n	8007bc2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007bba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 f8d1 	bl	8007d64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	691b      	ldr	r3, [r3, #16]
 8007bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bcc:	2b40      	cmp	r3, #64	; 0x40
 8007bce:	d10e      	bne.n	8007bee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	68db      	ldr	r3, [r3, #12]
 8007bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bda:	2b40      	cmp	r3, #64	; 0x40
 8007bdc:	d107      	bne.n	8007bee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007be6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 f83e 	bl	8007c6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	691b      	ldr	r3, [r3, #16]
 8007bf4:	f003 0320 	and.w	r3, r3, #32
 8007bf8:	2b20      	cmp	r3, #32
 8007bfa:	d10e      	bne.n	8007c1a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	f003 0320 	and.w	r3, r3, #32
 8007c06:	2b20      	cmp	r3, #32
 8007c08:	d107      	bne.n	8007c1a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f06f 0220 	mvn.w	r2, #32
 8007c12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f000 f893 	bl	8007d40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c1a:	bf00      	nop
 8007c1c:	3708      	adds	r7, #8
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c22:	b480      	push	{r7}
 8007c24:	b083      	sub	sp, #12
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007c2a:	bf00      	nop
 8007c2c:	370c      	adds	r7, #12
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bc80      	pop	{r7}
 8007c32:	4770      	bx	lr

08007c34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c3c:	bf00      	nop
 8007c3e:	370c      	adds	r7, #12
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bc80      	pop	{r7}
 8007c44:	4770      	bx	lr

08007c46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c46:	b480      	push	{r7}
 8007c48:	b083      	sub	sp, #12
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c4e:	bf00      	nop
 8007c50:	370c      	adds	r7, #12
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bc80      	pop	{r7}
 8007c56:	4770      	bx	lr

08007c58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c60:	bf00      	nop
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bc80      	pop	{r7}
 8007c68:	4770      	bx	lr

08007c6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c6a:	b480      	push	{r7}
 8007c6c:	b083      	sub	sp, #12
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c72:	bf00      	nop
 8007c74:	370c      	adds	r7, #12
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bc80      	pop	{r7}
 8007c7a:	4770      	bx	lr

08007c7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b085      	sub	sp, #20
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	4a29      	ldr	r2, [pc, #164]	; (8007d34 <TIM_Base_SetConfig+0xb8>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d003      	beq.n	8007c9c <TIM_Base_SetConfig+0x20>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c9a:	d108      	bne.n	8007cae <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ca2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	68fa      	ldr	r2, [r7, #12]
 8007caa:	4313      	orrs	r3, r2
 8007cac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	4a20      	ldr	r2, [pc, #128]	; (8007d34 <TIM_Base_SetConfig+0xb8>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d00b      	beq.n	8007cce <TIM_Base_SetConfig+0x52>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cbc:	d007      	beq.n	8007cce <TIM_Base_SetConfig+0x52>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	4a1d      	ldr	r2, [pc, #116]	; (8007d38 <TIM_Base_SetConfig+0xbc>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d003      	beq.n	8007cce <TIM_Base_SetConfig+0x52>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4a1c      	ldr	r2, [pc, #112]	; (8007d3c <TIM_Base_SetConfig+0xc0>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d108      	bne.n	8007ce0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	68fa      	ldr	r2, [r7, #12]
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	695b      	ldr	r3, [r3, #20]
 8007cea:	4313      	orrs	r3, r2
 8007cec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	68fa      	ldr	r2, [r7, #12]
 8007cf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	689a      	ldr	r2, [r3, #8]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	4a0b      	ldr	r2, [pc, #44]	; (8007d34 <TIM_Base_SetConfig+0xb8>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d007      	beq.n	8007d1c <TIM_Base_SetConfig+0xa0>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	4a0a      	ldr	r2, [pc, #40]	; (8007d38 <TIM_Base_SetConfig+0xbc>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d003      	beq.n	8007d1c <TIM_Base_SetConfig+0xa0>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	4a09      	ldr	r2, [pc, #36]	; (8007d3c <TIM_Base_SetConfig+0xc0>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d103      	bne.n	8007d24 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	691a      	ldr	r2, [r3, #16]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2201      	movs	r2, #1
 8007d28:	615a      	str	r2, [r3, #20]
}
 8007d2a:	bf00      	nop
 8007d2c:	3714      	adds	r7, #20
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bc80      	pop	{r7}
 8007d32:	4770      	bx	lr
 8007d34:	40012c00 	.word	0x40012c00
 8007d38:	40014400 	.word	0x40014400
 8007d3c:	40014800 	.word	0x40014800

08007d40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d48:	bf00      	nop
 8007d4a:	370c      	adds	r7, #12
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bc80      	pop	{r7}
 8007d50:	4770      	bx	lr

08007d52 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d52:	b480      	push	{r7}
 8007d54:	b083      	sub	sp, #12
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d5a:	bf00      	nop
 8007d5c:	370c      	adds	r7, #12
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bc80      	pop	{r7}
 8007d62:	4770      	bx	lr

08007d64 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007d6c:	bf00      	nop
 8007d6e:	370c      	adds	r7, #12
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bc80      	pop	{r7}
 8007d74:	4770      	bx	lr

08007d76 <LL_RCC_GetUSARTClockSource>:
{
 8007d76:	b480      	push	{r7}
 8007d78:	b083      	sub	sp, #12
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8007d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d82:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	401a      	ands	r2, r3
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	041b      	lsls	r3, r3, #16
 8007d8e:	4313      	orrs	r3, r2
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	370c      	adds	r7, #12
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bc80      	pop	{r7}
 8007d98:	4770      	bx	lr

08007d9a <LL_RCC_GetLPUARTClockSource>:
{
 8007d9a:	b480      	push	{r7}
 8007d9c:	b083      	sub	sp, #12
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007da2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007da6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4013      	ands	r3, r2
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	370c      	adds	r7, #12
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bc80      	pop	{r7}
 8007db6:	4770      	bx	lr

08007db8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b082      	sub	sp, #8
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d101      	bne.n	8007dca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e042      	b.n	8007e50 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d106      	bne.n	8007de2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f7fb fea7 	bl	8003b30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2224      	movs	r2, #36	; 0x24
 8007de6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f022 0201 	bic.w	r2, r2, #1
 8007df8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 f8c2 	bl	8007f84 <UART_SetConfig>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d101      	bne.n	8007e0a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	e022      	b.n	8007e50 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d002      	beq.n	8007e18 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 fb2a 	bl	800846c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	685a      	ldr	r2, [r3, #4]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	689a      	ldr	r2, [r3, #8]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f042 0201 	orr.w	r2, r2, #1
 8007e46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 fbb0 	bl	80085ae <UART_CheckIdleState>
 8007e4e:	4603      	mov	r3, r0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3708      	adds	r7, #8
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b08a      	sub	sp, #40	; 0x28
 8007e5c:	af02      	add	r7, sp, #8
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	603b      	str	r3, [r7, #0]
 8007e64:	4613      	mov	r3, r2
 8007e66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e6e:	2b20      	cmp	r3, #32
 8007e70:	f040 8083 	bne.w	8007f7a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d002      	beq.n	8007e80 <HAL_UART_Transmit+0x28>
 8007e7a:	88fb      	ldrh	r3, [r7, #6]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d101      	bne.n	8007e84 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007e80:	2301      	movs	r3, #1
 8007e82:	e07b      	b.n	8007f7c <HAL_UART_Transmit+0x124>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d101      	bne.n	8007e92 <HAL_UART_Transmit+0x3a>
 8007e8e:	2302      	movs	r3, #2
 8007e90:	e074      	b.n	8007f7c <HAL_UART_Transmit+0x124>
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2201      	movs	r2, #1
 8007e96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2221      	movs	r2, #33	; 0x21
 8007ea6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007eaa:	f7fc f827 	bl	8003efc <HAL_GetTick>
 8007eae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	88fa      	ldrh	r2, [r7, #6]
 8007eb4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	88fa      	ldrh	r2, [r7, #6]
 8007ebc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ec8:	d108      	bne.n	8007edc <HAL_UART_Transmit+0x84>
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d104      	bne.n	8007edc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	61bb      	str	r3, [r7, #24]
 8007eda:	e003      	b.n	8007ee4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007eec:	e02c      	b.n	8007f48 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	9300      	str	r3, [sp, #0]
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	2180      	movs	r1, #128	; 0x80
 8007ef8:	68f8      	ldr	r0, [r7, #12]
 8007efa:	f000 fba3 	bl	8008644 <UART_WaitOnFlagUntilTimeout>
 8007efe:	4603      	mov	r3, r0
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d001      	beq.n	8007f08 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007f04:	2303      	movs	r3, #3
 8007f06:	e039      	b.n	8007f7c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d10b      	bne.n	8007f26 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f0e:	69bb      	ldr	r3, [r7, #24]
 8007f10:	881b      	ldrh	r3, [r3, #0]
 8007f12:	461a      	mov	r2, r3
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f1c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007f1e:	69bb      	ldr	r3, [r7, #24]
 8007f20:	3302      	adds	r3, #2
 8007f22:	61bb      	str	r3, [r7, #24]
 8007f24:	e007      	b.n	8007f36 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f26:	69fb      	ldr	r3, [r7, #28]
 8007f28:	781a      	ldrb	r2, [r3, #0]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007f30:	69fb      	ldr	r3, [r7, #28]
 8007f32:	3301      	adds	r3, #1
 8007f34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	3b01      	subs	r3, #1
 8007f40:	b29a      	uxth	r2, r3
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d1cc      	bne.n	8007eee <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	9300      	str	r3, [sp, #0]
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	2140      	movs	r1, #64	; 0x40
 8007f5e:	68f8      	ldr	r0, [r7, #12]
 8007f60:	f000 fb70 	bl	8008644 <UART_WaitOnFlagUntilTimeout>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d001      	beq.n	8007f6e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007f6a:	2303      	movs	r3, #3
 8007f6c:	e006      	b.n	8007f7c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2220      	movs	r2, #32
 8007f72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007f76:	2300      	movs	r3, #0
 8007f78:	e000      	b.n	8007f7c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007f7a:	2302      	movs	r3, #2
  }
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3720      	adds	r7, #32
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f88:	b08c      	sub	sp, #48	; 0x30
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	689a      	ldr	r2, [r3, #8]
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	691b      	ldr	r3, [r3, #16]
 8007f9c:	431a      	orrs	r2, r3
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	695b      	ldr	r3, [r3, #20]
 8007fa2:	431a      	orrs	r2, r3
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	69db      	ldr	r3, [r3, #28]
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	4b94      	ldr	r3, [pc, #592]	; (8008204 <UART_SetConfig+0x280>)
 8007fb4:	4013      	ands	r3, r2
 8007fb6:	697a      	ldr	r2, [r7, #20]
 8007fb8:	6812      	ldr	r2, [r2, #0]
 8007fba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fbc:	430b      	orrs	r3, r1
 8007fbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	68da      	ldr	r2, [r3, #12]
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	430a      	orrs	r2, r1
 8007fd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	699b      	ldr	r3, [r3, #24]
 8007fda:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a89      	ldr	r2, [pc, #548]	; (8008208 <UART_SetConfig+0x284>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d004      	beq.n	8007ff0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	6a1b      	ldr	r3, [r3, #32]
 8007fea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fec:	4313      	orrs	r3, r2
 8007fee:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007ffa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007ffe:	697a      	ldr	r2, [r7, #20]
 8008000:	6812      	ldr	r2, [r2, #0]
 8008002:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008004:	430b      	orrs	r3, r1
 8008006:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800800e:	f023 010f 	bic.w	r1, r3, #15
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	430a      	orrs	r2, r1
 800801c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a7a      	ldr	r2, [pc, #488]	; (800820c <UART_SetConfig+0x288>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d127      	bne.n	8008078 <UART_SetConfig+0xf4>
 8008028:	2003      	movs	r0, #3
 800802a:	f7ff fea4 	bl	8007d76 <LL_RCC_GetUSARTClockSource>
 800802e:	4603      	mov	r3, r0
 8008030:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8008034:	2b03      	cmp	r3, #3
 8008036:	d81b      	bhi.n	8008070 <UART_SetConfig+0xec>
 8008038:	a201      	add	r2, pc, #4	; (adr r2, 8008040 <UART_SetConfig+0xbc>)
 800803a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800803e:	bf00      	nop
 8008040:	08008051 	.word	0x08008051
 8008044:	08008061 	.word	0x08008061
 8008048:	08008059 	.word	0x08008059
 800804c:	08008069 	.word	0x08008069
 8008050:	2301      	movs	r3, #1
 8008052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008056:	e080      	b.n	800815a <UART_SetConfig+0x1d6>
 8008058:	2302      	movs	r3, #2
 800805a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800805e:	e07c      	b.n	800815a <UART_SetConfig+0x1d6>
 8008060:	2304      	movs	r3, #4
 8008062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008066:	e078      	b.n	800815a <UART_SetConfig+0x1d6>
 8008068:	2308      	movs	r3, #8
 800806a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800806e:	e074      	b.n	800815a <UART_SetConfig+0x1d6>
 8008070:	2310      	movs	r3, #16
 8008072:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008076:	e070      	b.n	800815a <UART_SetConfig+0x1d6>
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a64      	ldr	r2, [pc, #400]	; (8008210 <UART_SetConfig+0x28c>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d138      	bne.n	80080f4 <UART_SetConfig+0x170>
 8008082:	200c      	movs	r0, #12
 8008084:	f7ff fe77 	bl	8007d76 <LL_RCC_GetUSARTClockSource>
 8008088:	4603      	mov	r3, r0
 800808a:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800808e:	2b0c      	cmp	r3, #12
 8008090:	d82c      	bhi.n	80080ec <UART_SetConfig+0x168>
 8008092:	a201      	add	r2, pc, #4	; (adr r2, 8008098 <UART_SetConfig+0x114>)
 8008094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008098:	080080cd 	.word	0x080080cd
 800809c:	080080ed 	.word	0x080080ed
 80080a0:	080080ed 	.word	0x080080ed
 80080a4:	080080ed 	.word	0x080080ed
 80080a8:	080080dd 	.word	0x080080dd
 80080ac:	080080ed 	.word	0x080080ed
 80080b0:	080080ed 	.word	0x080080ed
 80080b4:	080080ed 	.word	0x080080ed
 80080b8:	080080d5 	.word	0x080080d5
 80080bc:	080080ed 	.word	0x080080ed
 80080c0:	080080ed 	.word	0x080080ed
 80080c4:	080080ed 	.word	0x080080ed
 80080c8:	080080e5 	.word	0x080080e5
 80080cc:	2300      	movs	r3, #0
 80080ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080d2:	e042      	b.n	800815a <UART_SetConfig+0x1d6>
 80080d4:	2302      	movs	r3, #2
 80080d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080da:	e03e      	b.n	800815a <UART_SetConfig+0x1d6>
 80080dc:	2304      	movs	r3, #4
 80080de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080e2:	e03a      	b.n	800815a <UART_SetConfig+0x1d6>
 80080e4:	2308      	movs	r3, #8
 80080e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080ea:	e036      	b.n	800815a <UART_SetConfig+0x1d6>
 80080ec:	2310      	movs	r3, #16
 80080ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080f2:	e032      	b.n	800815a <UART_SetConfig+0x1d6>
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a43      	ldr	r2, [pc, #268]	; (8008208 <UART_SetConfig+0x284>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d12a      	bne.n	8008154 <UART_SetConfig+0x1d0>
 80080fe:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008102:	f7ff fe4a 	bl	8007d9a <LL_RCC_GetLPUARTClockSource>
 8008106:	4603      	mov	r3, r0
 8008108:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800810c:	d01a      	beq.n	8008144 <UART_SetConfig+0x1c0>
 800810e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008112:	d81b      	bhi.n	800814c <UART_SetConfig+0x1c8>
 8008114:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008118:	d00c      	beq.n	8008134 <UART_SetConfig+0x1b0>
 800811a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800811e:	d815      	bhi.n	800814c <UART_SetConfig+0x1c8>
 8008120:	2b00      	cmp	r3, #0
 8008122:	d003      	beq.n	800812c <UART_SetConfig+0x1a8>
 8008124:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008128:	d008      	beq.n	800813c <UART_SetConfig+0x1b8>
 800812a:	e00f      	b.n	800814c <UART_SetConfig+0x1c8>
 800812c:	2300      	movs	r3, #0
 800812e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008132:	e012      	b.n	800815a <UART_SetConfig+0x1d6>
 8008134:	2302      	movs	r3, #2
 8008136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800813a:	e00e      	b.n	800815a <UART_SetConfig+0x1d6>
 800813c:	2304      	movs	r3, #4
 800813e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008142:	e00a      	b.n	800815a <UART_SetConfig+0x1d6>
 8008144:	2308      	movs	r3, #8
 8008146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800814a:	e006      	b.n	800815a <UART_SetConfig+0x1d6>
 800814c:	2310      	movs	r3, #16
 800814e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008152:	e002      	b.n	800815a <UART_SetConfig+0x1d6>
 8008154:	2310      	movs	r3, #16
 8008156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a2a      	ldr	r2, [pc, #168]	; (8008208 <UART_SetConfig+0x284>)
 8008160:	4293      	cmp	r3, r2
 8008162:	f040 80a4 	bne.w	80082ae <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008166:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800816a:	2b08      	cmp	r3, #8
 800816c:	d823      	bhi.n	80081b6 <UART_SetConfig+0x232>
 800816e:	a201      	add	r2, pc, #4	; (adr r2, 8008174 <UART_SetConfig+0x1f0>)
 8008170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008174:	08008199 	.word	0x08008199
 8008178:	080081b7 	.word	0x080081b7
 800817c:	080081a1 	.word	0x080081a1
 8008180:	080081b7 	.word	0x080081b7
 8008184:	080081a7 	.word	0x080081a7
 8008188:	080081b7 	.word	0x080081b7
 800818c:	080081b7 	.word	0x080081b7
 8008190:	080081b7 	.word	0x080081b7
 8008194:	080081af 	.word	0x080081af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008198:	f7fe fcd8 	bl	8006b4c <HAL_RCC_GetPCLK1Freq>
 800819c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800819e:	e010      	b.n	80081c2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081a0:	4b1c      	ldr	r3, [pc, #112]	; (8008214 <UART_SetConfig+0x290>)
 80081a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80081a4:	e00d      	b.n	80081c2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081a6:	f7fe fc1d 	bl	80069e4 <HAL_RCC_GetSysClockFreq>
 80081aa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80081ac:	e009      	b.n	80081c2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80081b4:	e005      	b.n	80081c2 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80081b6:	2300      	movs	r3, #0
 80081b8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80081c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80081c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	f000 8137 	beq.w	8008438 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ce:	4a12      	ldr	r2, [pc, #72]	; (8008218 <UART_SetConfig+0x294>)
 80081d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081d4:	461a      	mov	r2, r3
 80081d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80081dc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	685a      	ldr	r2, [r3, #4]
 80081e2:	4613      	mov	r3, r2
 80081e4:	005b      	lsls	r3, r3, #1
 80081e6:	4413      	add	r3, r2
 80081e8:	69ba      	ldr	r2, [r7, #24]
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d305      	bcc.n	80081fa <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081f4:	69ba      	ldr	r2, [r7, #24]
 80081f6:	429a      	cmp	r2, r3
 80081f8:	d910      	bls.n	800821c <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80081fa:	2301      	movs	r3, #1
 80081fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008200:	e11a      	b.n	8008438 <UART_SetConfig+0x4b4>
 8008202:	bf00      	nop
 8008204:	cfff69f3 	.word	0xcfff69f3
 8008208:	40008000 	.word	0x40008000
 800820c:	40013800 	.word	0x40013800
 8008210:	40004400 	.word	0x40004400
 8008214:	00f42400 	.word	0x00f42400
 8008218:	0800d640 	.word	0x0800d640
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800821c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821e:	2200      	movs	r2, #0
 8008220:	60bb      	str	r3, [r7, #8]
 8008222:	60fa      	str	r2, [r7, #12]
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008228:	4a8e      	ldr	r2, [pc, #568]	; (8008464 <UART_SetConfig+0x4e0>)
 800822a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800822e:	b29b      	uxth	r3, r3
 8008230:	2200      	movs	r2, #0
 8008232:	603b      	str	r3, [r7, #0]
 8008234:	607a      	str	r2, [r7, #4]
 8008236:	e9d7 2300 	ldrd	r2, r3, [r7]
 800823a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800823e:	f7f9 f81f 	bl	8001280 <__aeabi_uldivmod>
 8008242:	4602      	mov	r2, r0
 8008244:	460b      	mov	r3, r1
 8008246:	4610      	mov	r0, r2
 8008248:	4619      	mov	r1, r3
 800824a:	f04f 0200 	mov.w	r2, #0
 800824e:	f04f 0300 	mov.w	r3, #0
 8008252:	020b      	lsls	r3, r1, #8
 8008254:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008258:	0202      	lsls	r2, r0, #8
 800825a:	6979      	ldr	r1, [r7, #20]
 800825c:	6849      	ldr	r1, [r1, #4]
 800825e:	0849      	lsrs	r1, r1, #1
 8008260:	2000      	movs	r0, #0
 8008262:	460c      	mov	r4, r1
 8008264:	4605      	mov	r5, r0
 8008266:	eb12 0804 	adds.w	r8, r2, r4
 800826a:	eb43 0905 	adc.w	r9, r3, r5
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	469a      	mov	sl, r3
 8008276:	4693      	mov	fp, r2
 8008278:	4652      	mov	r2, sl
 800827a:	465b      	mov	r3, fp
 800827c:	4640      	mov	r0, r8
 800827e:	4649      	mov	r1, r9
 8008280:	f7f8 fffe 	bl	8001280 <__aeabi_uldivmod>
 8008284:	4602      	mov	r2, r0
 8008286:	460b      	mov	r3, r1
 8008288:	4613      	mov	r3, r2
 800828a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800828c:	6a3b      	ldr	r3, [r7, #32]
 800828e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008292:	d308      	bcc.n	80082a6 <UART_SetConfig+0x322>
 8008294:	6a3b      	ldr	r3, [r7, #32]
 8008296:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800829a:	d204      	bcs.n	80082a6 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	6a3a      	ldr	r2, [r7, #32]
 80082a2:	60da      	str	r2, [r3, #12]
 80082a4:	e0c8      	b.n	8008438 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80082ac:	e0c4      	b.n	8008438 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	69db      	ldr	r3, [r3, #28]
 80082b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082b6:	d168      	bne.n	800838a <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80082b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80082bc:	2b08      	cmp	r3, #8
 80082be:	d828      	bhi.n	8008312 <UART_SetConfig+0x38e>
 80082c0:	a201      	add	r2, pc, #4	; (adr r2, 80082c8 <UART_SetConfig+0x344>)
 80082c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c6:	bf00      	nop
 80082c8:	080082ed 	.word	0x080082ed
 80082cc:	080082f5 	.word	0x080082f5
 80082d0:	080082fd 	.word	0x080082fd
 80082d4:	08008313 	.word	0x08008313
 80082d8:	08008303 	.word	0x08008303
 80082dc:	08008313 	.word	0x08008313
 80082e0:	08008313 	.word	0x08008313
 80082e4:	08008313 	.word	0x08008313
 80082e8:	0800830b 	.word	0x0800830b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082ec:	f7fe fc2e 	bl	8006b4c <HAL_RCC_GetPCLK1Freq>
 80082f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80082f2:	e014      	b.n	800831e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082f4:	f7fe fc3c 	bl	8006b70 <HAL_RCC_GetPCLK2Freq>
 80082f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80082fa:	e010      	b.n	800831e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082fc:	4b5a      	ldr	r3, [pc, #360]	; (8008468 <UART_SetConfig+0x4e4>)
 80082fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008300:	e00d      	b.n	800831e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008302:	f7fe fb6f 	bl	80069e4 <HAL_RCC_GetSysClockFreq>
 8008306:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008308:	e009      	b.n	800831e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800830a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800830e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008310:	e005      	b.n	800831e <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8008312:	2300      	movs	r3, #0
 8008314:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008316:	2301      	movs	r3, #1
 8008318:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800831c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800831e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008320:	2b00      	cmp	r3, #0
 8008322:	f000 8089 	beq.w	8008438 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832a:	4a4e      	ldr	r2, [pc, #312]	; (8008464 <UART_SetConfig+0x4e0>)
 800832c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008330:	461a      	mov	r2, r3
 8008332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008334:	fbb3 f3f2 	udiv	r3, r3, r2
 8008338:	005a      	lsls	r2, r3, #1
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	085b      	lsrs	r3, r3, #1
 8008340:	441a      	add	r2, r3
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	fbb2 f3f3 	udiv	r3, r2, r3
 800834a:	b29b      	uxth	r3, r3
 800834c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800834e:	6a3b      	ldr	r3, [r7, #32]
 8008350:	2b0f      	cmp	r3, #15
 8008352:	d916      	bls.n	8008382 <UART_SetConfig+0x3fe>
 8008354:	6a3b      	ldr	r3, [r7, #32]
 8008356:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800835a:	d212      	bcs.n	8008382 <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800835c:	6a3b      	ldr	r3, [r7, #32]
 800835e:	b29b      	uxth	r3, r3
 8008360:	f023 030f 	bic.w	r3, r3, #15
 8008364:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008366:	6a3b      	ldr	r3, [r7, #32]
 8008368:	085b      	lsrs	r3, r3, #1
 800836a:	b29b      	uxth	r3, r3
 800836c:	f003 0307 	and.w	r3, r3, #7
 8008370:	b29a      	uxth	r2, r3
 8008372:	8bfb      	ldrh	r3, [r7, #30]
 8008374:	4313      	orrs	r3, r2
 8008376:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	8bfa      	ldrh	r2, [r7, #30]
 800837e:	60da      	str	r2, [r3, #12]
 8008380:	e05a      	b.n	8008438 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008382:	2301      	movs	r3, #1
 8008384:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008388:	e056      	b.n	8008438 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800838a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800838e:	2b08      	cmp	r3, #8
 8008390:	d827      	bhi.n	80083e2 <UART_SetConfig+0x45e>
 8008392:	a201      	add	r2, pc, #4	; (adr r2, 8008398 <UART_SetConfig+0x414>)
 8008394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008398:	080083bd 	.word	0x080083bd
 800839c:	080083c5 	.word	0x080083c5
 80083a0:	080083cd 	.word	0x080083cd
 80083a4:	080083e3 	.word	0x080083e3
 80083a8:	080083d3 	.word	0x080083d3
 80083ac:	080083e3 	.word	0x080083e3
 80083b0:	080083e3 	.word	0x080083e3
 80083b4:	080083e3 	.word	0x080083e3
 80083b8:	080083db 	.word	0x080083db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083bc:	f7fe fbc6 	bl	8006b4c <HAL_RCC_GetPCLK1Freq>
 80083c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80083c2:	e014      	b.n	80083ee <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083c4:	f7fe fbd4 	bl	8006b70 <HAL_RCC_GetPCLK2Freq>
 80083c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80083ca:	e010      	b.n	80083ee <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083cc:	4b26      	ldr	r3, [pc, #152]	; (8008468 <UART_SetConfig+0x4e4>)
 80083ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80083d0:	e00d      	b.n	80083ee <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083d2:	f7fe fb07 	bl	80069e4 <HAL_RCC_GetSysClockFreq>
 80083d6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80083d8:	e009      	b.n	80083ee <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80083e0:	e005      	b.n	80083ee <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80083e2:	2300      	movs	r3, #0
 80083e4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80083e6:	2301      	movs	r3, #1
 80083e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80083ec:	bf00      	nop
    }

    if (pclk != 0U)
 80083ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d021      	beq.n	8008438 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f8:	4a1a      	ldr	r2, [pc, #104]	; (8008464 <UART_SetConfig+0x4e0>)
 80083fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083fe:	461a      	mov	r2, r3
 8008400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008402:	fbb3 f2f2 	udiv	r2, r3, r2
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	085b      	lsrs	r3, r3, #1
 800840c:	441a      	add	r2, r3
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	fbb2 f3f3 	udiv	r3, r2, r3
 8008416:	b29b      	uxth	r3, r3
 8008418:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800841a:	6a3b      	ldr	r3, [r7, #32]
 800841c:	2b0f      	cmp	r3, #15
 800841e:	d908      	bls.n	8008432 <UART_SetConfig+0x4ae>
 8008420:	6a3b      	ldr	r3, [r7, #32]
 8008422:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008426:	d204      	bcs.n	8008432 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	6a3a      	ldr	r2, [r7, #32]
 800842e:	60da      	str	r2, [r3, #12]
 8008430:	e002      	b.n	8008438 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008432:	2301      	movs	r3, #1
 8008434:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	2201      	movs	r2, #1
 800843c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	2201      	movs	r2, #1
 8008444:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	2200      	movs	r2, #0
 800844c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	2200      	movs	r2, #0
 8008452:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008454:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008458:	4618      	mov	r0, r3
 800845a:	3730      	adds	r7, #48	; 0x30
 800845c:	46bd      	mov	sp, r7
 800845e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008462:	bf00      	nop
 8008464:	0800d640 	.word	0x0800d640
 8008468:	00f42400 	.word	0x00f42400

0800846c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800846c:	b480      	push	{r7}
 800846e:	b083      	sub	sp, #12
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008478:	f003 0301 	and.w	r3, r3, #1
 800847c:	2b00      	cmp	r3, #0
 800847e:	d00a      	beq.n	8008496 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	430a      	orrs	r2, r1
 8008494:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800849a:	f003 0302 	and.w	r3, r3, #2
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d00a      	beq.n	80084b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	430a      	orrs	r2, r1
 80084b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084bc:	f003 0304 	and.w	r3, r3, #4
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d00a      	beq.n	80084da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	430a      	orrs	r2, r1
 80084d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084de:	f003 0308 	and.w	r3, r3, #8
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d00a      	beq.n	80084fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	430a      	orrs	r2, r1
 80084fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008500:	f003 0310 	and.w	r3, r3, #16
 8008504:	2b00      	cmp	r3, #0
 8008506:	d00a      	beq.n	800851e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	689b      	ldr	r3, [r3, #8]
 800850e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	430a      	orrs	r2, r1
 800851c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008522:	f003 0320 	and.w	r3, r3, #32
 8008526:	2b00      	cmp	r3, #0
 8008528:	d00a      	beq.n	8008540 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	430a      	orrs	r2, r1
 800853e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008548:	2b00      	cmp	r3, #0
 800854a:	d01a      	beq.n	8008582 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	430a      	orrs	r2, r1
 8008560:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008566:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800856a:	d10a      	bne.n	8008582 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	430a      	orrs	r2, r1
 8008580:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800858a:	2b00      	cmp	r3, #0
 800858c:	d00a      	beq.n	80085a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	430a      	orrs	r2, r1
 80085a2:	605a      	str	r2, [r3, #4]
  }
}
 80085a4:	bf00      	nop
 80085a6:	370c      	adds	r7, #12
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bc80      	pop	{r7}
 80085ac:	4770      	bx	lr

080085ae <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80085ae:	b580      	push	{r7, lr}
 80085b0:	b086      	sub	sp, #24
 80085b2:	af02      	add	r7, sp, #8
 80085b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2200      	movs	r2, #0
 80085ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80085be:	f7fb fc9d 	bl	8003efc <HAL_GetTick>
 80085c2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f003 0308 	and.w	r3, r3, #8
 80085ce:	2b08      	cmp	r3, #8
 80085d0:	d10e      	bne.n	80085f0 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085d2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80085d6:	9300      	str	r3, [sp, #0]
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2200      	movs	r2, #0
 80085dc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 f82f 	bl	8008644 <UART_WaitOnFlagUntilTimeout>
 80085e6:	4603      	mov	r3, r0
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d001      	beq.n	80085f0 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085ec:	2303      	movs	r3, #3
 80085ee:	e025      	b.n	800863c <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f003 0304 	and.w	r3, r3, #4
 80085fa:	2b04      	cmp	r3, #4
 80085fc:	d10e      	bne.n	800861c <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008602:	9300      	str	r3, [sp, #0]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2200      	movs	r2, #0
 8008608:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 f819 	bl	8008644 <UART_WaitOnFlagUntilTimeout>
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d001      	beq.n	800861c <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008618:	2303      	movs	r3, #3
 800861a:	e00f      	b.n	800863c <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2220      	movs	r2, #32
 8008620:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2220      	movs	r2, #32
 8008628:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800863a:	2300      	movs	r3, #0
}
 800863c:	4618      	mov	r0, r3
 800863e:	3710      	adds	r7, #16
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b09c      	sub	sp, #112	; 0x70
 8008648:	af00      	add	r7, sp, #0
 800864a:	60f8      	str	r0, [r7, #12]
 800864c:	60b9      	str	r1, [r7, #8]
 800864e:	603b      	str	r3, [r7, #0]
 8008650:	4613      	mov	r3, r2
 8008652:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008654:	e0a9      	b.n	80087aa <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008656:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800865c:	f000 80a5 	beq.w	80087aa <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008660:	f7fb fc4c 	bl	8003efc <HAL_GetTick>
 8008664:	4602      	mov	r2, r0
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	1ad3      	subs	r3, r2, r3
 800866a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800866c:	429a      	cmp	r2, r3
 800866e:	d302      	bcc.n	8008676 <UART_WaitOnFlagUntilTimeout+0x32>
 8008670:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008672:	2b00      	cmp	r3, #0
 8008674:	d140      	bne.n	80086f8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800867c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800867e:	e853 3f00 	ldrex	r3, [r3]
 8008682:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008686:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800868a:	667b      	str	r3, [r7, #100]	; 0x64
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	461a      	mov	r2, r3
 8008692:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008694:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008696:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008698:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800869a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800869c:	e841 2300 	strex	r3, r2, [r1]
 80086a0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80086a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d1e6      	bne.n	8008676 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	3308      	adds	r3, #8
 80086ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086b2:	e853 3f00 	ldrex	r3, [r3]
 80086b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80086b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ba:	f023 0301 	bic.w	r3, r3, #1
 80086be:	663b      	str	r3, [r7, #96]	; 0x60
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	3308      	adds	r3, #8
 80086c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80086c8:	64ba      	str	r2, [r7, #72]	; 0x48
 80086ca:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086cc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80086ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086d0:	e841 2300 	strex	r3, r2, [r1]
 80086d4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80086d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d1e5      	bne.n	80086a8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2220      	movs	r2, #32
 80086e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2220      	movs	r2, #32
 80086e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2200      	movs	r2, #0
 80086f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80086f4:	2303      	movs	r3, #3
 80086f6:	e069      	b.n	80087cc <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f003 0304 	and.w	r3, r3, #4
 8008702:	2b00      	cmp	r3, #0
 8008704:	d051      	beq.n	80087aa <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	69db      	ldr	r3, [r3, #28]
 800870c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008710:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008714:	d149      	bne.n	80087aa <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800871e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008728:	e853 3f00 	ldrex	r3, [r3]
 800872c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800872e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008730:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008734:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	461a      	mov	r2, r3
 800873c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800873e:	637b      	str	r3, [r7, #52]	; 0x34
 8008740:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008742:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008744:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008746:	e841 2300 	strex	r3, r2, [r1]
 800874a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800874c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800874e:	2b00      	cmp	r3, #0
 8008750:	d1e6      	bne.n	8008720 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	3308      	adds	r3, #8
 8008758:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	e853 3f00 	ldrex	r3, [r3]
 8008760:	613b      	str	r3, [r7, #16]
   return(result);
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	f023 0301 	bic.w	r3, r3, #1
 8008768:	66bb      	str	r3, [r7, #104]	; 0x68
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	3308      	adds	r3, #8
 8008770:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008772:	623a      	str	r2, [r7, #32]
 8008774:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008776:	69f9      	ldr	r1, [r7, #28]
 8008778:	6a3a      	ldr	r2, [r7, #32]
 800877a:	e841 2300 	strex	r3, r2, [r1]
 800877e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008780:	69bb      	ldr	r3, [r7, #24]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d1e5      	bne.n	8008752 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2220      	movs	r2, #32
 800878a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2220      	movs	r2, #32
 8008792:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	2220      	movs	r2, #32
 800879a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2200      	movs	r2, #0
 80087a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80087a6:	2303      	movs	r3, #3
 80087a8:	e010      	b.n	80087cc <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	69da      	ldr	r2, [r3, #28]
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	4013      	ands	r3, r2
 80087b4:	68ba      	ldr	r2, [r7, #8]
 80087b6:	429a      	cmp	r2, r3
 80087b8:	bf0c      	ite	eq
 80087ba:	2301      	moveq	r3, #1
 80087bc:	2300      	movne	r3, #0
 80087be:	b2db      	uxtb	r3, r3
 80087c0:	461a      	mov	r2, r3
 80087c2:	79fb      	ldrb	r3, [r7, #7]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	f43f af46 	beq.w	8008656 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80087ca:	2300      	movs	r3, #0
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3770      	adds	r7, #112	; 0x70
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b085      	sub	sp, #20
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d101      	bne.n	80087ea <HAL_UARTEx_DisableFifoMode+0x16>
 80087e6:	2302      	movs	r3, #2
 80087e8:	e027      	b.n	800883a <HAL_UARTEx_DisableFifoMode+0x66>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2201      	movs	r2, #1
 80087ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2224      	movs	r2, #36	; 0x24
 80087f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f022 0201 	bic.w	r2, r2, #1
 8008810:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008818:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	68fa      	ldr	r2, [r7, #12]
 8008826:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2220      	movs	r2, #32
 800882c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2200      	movs	r2, #0
 8008834:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008838:	2300      	movs	r3, #0
}
 800883a:	4618      	mov	r0, r3
 800883c:	3714      	adds	r7, #20
 800883e:	46bd      	mov	sp, r7
 8008840:	bc80      	pop	{r7}
 8008842:	4770      	bx	lr

08008844 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b084      	sub	sp, #16
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008854:	2b01      	cmp	r3, #1
 8008856:	d101      	bne.n	800885c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008858:	2302      	movs	r3, #2
 800885a:	e02d      	b.n	80088b8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2201      	movs	r2, #1
 8008860:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2224      	movs	r2, #36	; 0x24
 8008868:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f022 0201 	bic.w	r2, r2, #1
 8008882:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	689b      	ldr	r3, [r3, #8]
 800888a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	683a      	ldr	r2, [r7, #0]
 8008894:	430a      	orrs	r2, r1
 8008896:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f000 f84f 	bl	800893c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	68fa      	ldr	r2, [r7, #12]
 80088a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2220      	movs	r2, #32
 80088aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2200      	movs	r2, #0
 80088b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80088b6:	2300      	movs	r3, #0
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3710      	adds	r7, #16
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d101      	bne.n	80088d8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80088d4:	2302      	movs	r3, #2
 80088d6:	e02d      	b.n	8008934 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2201      	movs	r2, #1
 80088dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2224      	movs	r2, #36	; 0x24
 80088e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	681a      	ldr	r2, [r3, #0]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f022 0201 	bic.w	r2, r2, #1
 80088fe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	689b      	ldr	r3, [r3, #8]
 8008906:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	683a      	ldr	r2, [r7, #0]
 8008910:	430a      	orrs	r2, r1
 8008912:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 f811 	bl	800893c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	68fa      	ldr	r2, [r7, #12]
 8008920:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2220      	movs	r2, #32
 8008926:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	3710      	adds	r7, #16
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800893c:	b480      	push	{r7}
 800893e:	b085      	sub	sp, #20
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008948:	2b00      	cmp	r3, #0
 800894a:	d108      	bne.n	800895e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2201      	movs	r2, #1
 8008950:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2201      	movs	r2, #1
 8008958:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800895c:	e031      	b.n	80089c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800895e:	2308      	movs	r3, #8
 8008960:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008962:	2308      	movs	r3, #8
 8008964:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	0e5b      	lsrs	r3, r3, #25
 800896e:	b2db      	uxtb	r3, r3
 8008970:	f003 0307 	and.w	r3, r3, #7
 8008974:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	689b      	ldr	r3, [r3, #8]
 800897c:	0f5b      	lsrs	r3, r3, #29
 800897e:	b2db      	uxtb	r3, r3
 8008980:	f003 0307 	and.w	r3, r3, #7
 8008984:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008986:	7bbb      	ldrb	r3, [r7, #14]
 8008988:	7b3a      	ldrb	r2, [r7, #12]
 800898a:	4910      	ldr	r1, [pc, #64]	; (80089cc <UARTEx_SetNbDataToProcess+0x90>)
 800898c:	5c8a      	ldrb	r2, [r1, r2]
 800898e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008992:	7b3a      	ldrb	r2, [r7, #12]
 8008994:	490e      	ldr	r1, [pc, #56]	; (80089d0 <UARTEx_SetNbDataToProcess+0x94>)
 8008996:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008998:	fb93 f3f2 	sdiv	r3, r3, r2
 800899c:	b29a      	uxth	r2, r3
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80089a4:	7bfb      	ldrb	r3, [r7, #15]
 80089a6:	7b7a      	ldrb	r2, [r7, #13]
 80089a8:	4908      	ldr	r1, [pc, #32]	; (80089cc <UARTEx_SetNbDataToProcess+0x90>)
 80089aa:	5c8a      	ldrb	r2, [r1, r2]
 80089ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80089b0:	7b7a      	ldrb	r2, [r7, #13]
 80089b2:	4907      	ldr	r1, [pc, #28]	; (80089d0 <UARTEx_SetNbDataToProcess+0x94>)
 80089b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80089b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80089ba:	b29a      	uxth	r2, r3
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80089c2:	bf00      	nop
 80089c4:	3714      	adds	r7, #20
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bc80      	pop	{r7}
 80089ca:	4770      	bx	lr
 80089cc:	0800d658 	.word	0x0800d658
 80089d0:	0800d660 	.word	0x0800d660

080089d4 <__errno>:
 80089d4:	4b01      	ldr	r3, [pc, #4]	; (80089dc <__errno+0x8>)
 80089d6:	6818      	ldr	r0, [r3, #0]
 80089d8:	4770      	bx	lr
 80089da:	bf00      	nop
 80089dc:	20000010 	.word	0x20000010

080089e0 <__libc_init_array>:
 80089e0:	b570      	push	{r4, r5, r6, lr}
 80089e2:	4d0d      	ldr	r5, [pc, #52]	; (8008a18 <__libc_init_array+0x38>)
 80089e4:	4c0d      	ldr	r4, [pc, #52]	; (8008a1c <__libc_init_array+0x3c>)
 80089e6:	1b64      	subs	r4, r4, r5
 80089e8:	10a4      	asrs	r4, r4, #2
 80089ea:	2600      	movs	r6, #0
 80089ec:	42a6      	cmp	r6, r4
 80089ee:	d109      	bne.n	8008a04 <__libc_init_array+0x24>
 80089f0:	4d0b      	ldr	r5, [pc, #44]	; (8008a20 <__libc_init_array+0x40>)
 80089f2:	4c0c      	ldr	r4, [pc, #48]	; (8008a24 <__libc_init_array+0x44>)
 80089f4:	f004 fc3e 	bl	800d274 <_init>
 80089f8:	1b64      	subs	r4, r4, r5
 80089fa:	10a4      	asrs	r4, r4, #2
 80089fc:	2600      	movs	r6, #0
 80089fe:	42a6      	cmp	r6, r4
 8008a00:	d105      	bne.n	8008a0e <__libc_init_array+0x2e>
 8008a02:	bd70      	pop	{r4, r5, r6, pc}
 8008a04:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a08:	4798      	blx	r3
 8008a0a:	3601      	adds	r6, #1
 8008a0c:	e7ee      	b.n	80089ec <__libc_init_array+0xc>
 8008a0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a12:	4798      	blx	r3
 8008a14:	3601      	adds	r6, #1
 8008a16:	e7f2      	b.n	80089fe <__libc_init_array+0x1e>
 8008a18:	0800db14 	.word	0x0800db14
 8008a1c:	0800db14 	.word	0x0800db14
 8008a20:	0800db14 	.word	0x0800db14
 8008a24:	0800db18 	.word	0x0800db18

08008a28 <malloc>:
 8008a28:	4b02      	ldr	r3, [pc, #8]	; (8008a34 <malloc+0xc>)
 8008a2a:	4601      	mov	r1, r0
 8008a2c:	6818      	ldr	r0, [r3, #0]
 8008a2e:	f000 b88b 	b.w	8008b48 <_malloc_r>
 8008a32:	bf00      	nop
 8008a34:	20000010 	.word	0x20000010

08008a38 <free>:
 8008a38:	4b02      	ldr	r3, [pc, #8]	; (8008a44 <free+0xc>)
 8008a3a:	4601      	mov	r1, r0
 8008a3c:	6818      	ldr	r0, [r3, #0]
 8008a3e:	f000 b819 	b.w	8008a74 <_free_r>
 8008a42:	bf00      	nop
 8008a44:	20000010 	.word	0x20000010

08008a48 <memcpy>:
 8008a48:	440a      	add	r2, r1
 8008a4a:	4291      	cmp	r1, r2
 8008a4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a50:	d100      	bne.n	8008a54 <memcpy+0xc>
 8008a52:	4770      	bx	lr
 8008a54:	b510      	push	{r4, lr}
 8008a56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a5e:	4291      	cmp	r1, r2
 8008a60:	d1f9      	bne.n	8008a56 <memcpy+0xe>
 8008a62:	bd10      	pop	{r4, pc}

08008a64 <memset>:
 8008a64:	4402      	add	r2, r0
 8008a66:	4603      	mov	r3, r0
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d100      	bne.n	8008a6e <memset+0xa>
 8008a6c:	4770      	bx	lr
 8008a6e:	f803 1b01 	strb.w	r1, [r3], #1
 8008a72:	e7f9      	b.n	8008a68 <memset+0x4>

08008a74 <_free_r>:
 8008a74:	b538      	push	{r3, r4, r5, lr}
 8008a76:	4605      	mov	r5, r0
 8008a78:	2900      	cmp	r1, #0
 8008a7a:	d041      	beq.n	8008b00 <_free_r+0x8c>
 8008a7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a80:	1f0c      	subs	r4, r1, #4
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	bfb8      	it	lt
 8008a86:	18e4      	addlt	r4, r4, r3
 8008a88:	f002 fff0 	bl	800ba6c <__malloc_lock>
 8008a8c:	4a1d      	ldr	r2, [pc, #116]	; (8008b04 <_free_r+0x90>)
 8008a8e:	6813      	ldr	r3, [r2, #0]
 8008a90:	b933      	cbnz	r3, 8008aa0 <_free_r+0x2c>
 8008a92:	6063      	str	r3, [r4, #4]
 8008a94:	6014      	str	r4, [r2, #0]
 8008a96:	4628      	mov	r0, r5
 8008a98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a9c:	f002 bfec 	b.w	800ba78 <__malloc_unlock>
 8008aa0:	42a3      	cmp	r3, r4
 8008aa2:	d908      	bls.n	8008ab6 <_free_r+0x42>
 8008aa4:	6820      	ldr	r0, [r4, #0]
 8008aa6:	1821      	adds	r1, r4, r0
 8008aa8:	428b      	cmp	r3, r1
 8008aaa:	bf01      	itttt	eq
 8008aac:	6819      	ldreq	r1, [r3, #0]
 8008aae:	685b      	ldreq	r3, [r3, #4]
 8008ab0:	1809      	addeq	r1, r1, r0
 8008ab2:	6021      	streq	r1, [r4, #0]
 8008ab4:	e7ed      	b.n	8008a92 <_free_r+0x1e>
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	b10b      	cbz	r3, 8008ac0 <_free_r+0x4c>
 8008abc:	42a3      	cmp	r3, r4
 8008abe:	d9fa      	bls.n	8008ab6 <_free_r+0x42>
 8008ac0:	6811      	ldr	r1, [r2, #0]
 8008ac2:	1850      	adds	r0, r2, r1
 8008ac4:	42a0      	cmp	r0, r4
 8008ac6:	d10b      	bne.n	8008ae0 <_free_r+0x6c>
 8008ac8:	6820      	ldr	r0, [r4, #0]
 8008aca:	4401      	add	r1, r0
 8008acc:	1850      	adds	r0, r2, r1
 8008ace:	4283      	cmp	r3, r0
 8008ad0:	6011      	str	r1, [r2, #0]
 8008ad2:	d1e0      	bne.n	8008a96 <_free_r+0x22>
 8008ad4:	6818      	ldr	r0, [r3, #0]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	6053      	str	r3, [r2, #4]
 8008ada:	4401      	add	r1, r0
 8008adc:	6011      	str	r1, [r2, #0]
 8008ade:	e7da      	b.n	8008a96 <_free_r+0x22>
 8008ae0:	d902      	bls.n	8008ae8 <_free_r+0x74>
 8008ae2:	230c      	movs	r3, #12
 8008ae4:	602b      	str	r3, [r5, #0]
 8008ae6:	e7d6      	b.n	8008a96 <_free_r+0x22>
 8008ae8:	6820      	ldr	r0, [r4, #0]
 8008aea:	1821      	adds	r1, r4, r0
 8008aec:	428b      	cmp	r3, r1
 8008aee:	bf04      	itt	eq
 8008af0:	6819      	ldreq	r1, [r3, #0]
 8008af2:	685b      	ldreq	r3, [r3, #4]
 8008af4:	6063      	str	r3, [r4, #4]
 8008af6:	bf04      	itt	eq
 8008af8:	1809      	addeq	r1, r1, r0
 8008afa:	6021      	streq	r1, [r4, #0]
 8008afc:	6054      	str	r4, [r2, #4]
 8008afe:	e7ca      	b.n	8008a96 <_free_r+0x22>
 8008b00:	bd38      	pop	{r3, r4, r5, pc}
 8008b02:	bf00      	nop
 8008b04:	200005e4 	.word	0x200005e4

08008b08 <sbrk_aligned>:
 8008b08:	b570      	push	{r4, r5, r6, lr}
 8008b0a:	4e0e      	ldr	r6, [pc, #56]	; (8008b44 <sbrk_aligned+0x3c>)
 8008b0c:	460c      	mov	r4, r1
 8008b0e:	6831      	ldr	r1, [r6, #0]
 8008b10:	4605      	mov	r5, r0
 8008b12:	b911      	cbnz	r1, 8008b1a <sbrk_aligned+0x12>
 8008b14:	f000 fef4 	bl	8009900 <_sbrk_r>
 8008b18:	6030      	str	r0, [r6, #0]
 8008b1a:	4621      	mov	r1, r4
 8008b1c:	4628      	mov	r0, r5
 8008b1e:	f000 feef 	bl	8009900 <_sbrk_r>
 8008b22:	1c43      	adds	r3, r0, #1
 8008b24:	d00a      	beq.n	8008b3c <sbrk_aligned+0x34>
 8008b26:	1cc4      	adds	r4, r0, #3
 8008b28:	f024 0403 	bic.w	r4, r4, #3
 8008b2c:	42a0      	cmp	r0, r4
 8008b2e:	d007      	beq.n	8008b40 <sbrk_aligned+0x38>
 8008b30:	1a21      	subs	r1, r4, r0
 8008b32:	4628      	mov	r0, r5
 8008b34:	f000 fee4 	bl	8009900 <_sbrk_r>
 8008b38:	3001      	adds	r0, #1
 8008b3a:	d101      	bne.n	8008b40 <sbrk_aligned+0x38>
 8008b3c:	f04f 34ff 	mov.w	r4, #4294967295
 8008b40:	4620      	mov	r0, r4
 8008b42:	bd70      	pop	{r4, r5, r6, pc}
 8008b44:	200005e8 	.word	0x200005e8

08008b48 <_malloc_r>:
 8008b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b4c:	1ccd      	adds	r5, r1, #3
 8008b4e:	f025 0503 	bic.w	r5, r5, #3
 8008b52:	3508      	adds	r5, #8
 8008b54:	2d0c      	cmp	r5, #12
 8008b56:	bf38      	it	cc
 8008b58:	250c      	movcc	r5, #12
 8008b5a:	2d00      	cmp	r5, #0
 8008b5c:	4607      	mov	r7, r0
 8008b5e:	db01      	blt.n	8008b64 <_malloc_r+0x1c>
 8008b60:	42a9      	cmp	r1, r5
 8008b62:	d905      	bls.n	8008b70 <_malloc_r+0x28>
 8008b64:	230c      	movs	r3, #12
 8008b66:	603b      	str	r3, [r7, #0]
 8008b68:	2600      	movs	r6, #0
 8008b6a:	4630      	mov	r0, r6
 8008b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b70:	4e2e      	ldr	r6, [pc, #184]	; (8008c2c <_malloc_r+0xe4>)
 8008b72:	f002 ff7b 	bl	800ba6c <__malloc_lock>
 8008b76:	6833      	ldr	r3, [r6, #0]
 8008b78:	461c      	mov	r4, r3
 8008b7a:	bb34      	cbnz	r4, 8008bca <_malloc_r+0x82>
 8008b7c:	4629      	mov	r1, r5
 8008b7e:	4638      	mov	r0, r7
 8008b80:	f7ff ffc2 	bl	8008b08 <sbrk_aligned>
 8008b84:	1c43      	adds	r3, r0, #1
 8008b86:	4604      	mov	r4, r0
 8008b88:	d14d      	bne.n	8008c26 <_malloc_r+0xde>
 8008b8a:	6834      	ldr	r4, [r6, #0]
 8008b8c:	4626      	mov	r6, r4
 8008b8e:	2e00      	cmp	r6, #0
 8008b90:	d140      	bne.n	8008c14 <_malloc_r+0xcc>
 8008b92:	6823      	ldr	r3, [r4, #0]
 8008b94:	4631      	mov	r1, r6
 8008b96:	4638      	mov	r0, r7
 8008b98:	eb04 0803 	add.w	r8, r4, r3
 8008b9c:	f000 feb0 	bl	8009900 <_sbrk_r>
 8008ba0:	4580      	cmp	r8, r0
 8008ba2:	d13a      	bne.n	8008c1a <_malloc_r+0xd2>
 8008ba4:	6821      	ldr	r1, [r4, #0]
 8008ba6:	3503      	adds	r5, #3
 8008ba8:	1a6d      	subs	r5, r5, r1
 8008baa:	f025 0503 	bic.w	r5, r5, #3
 8008bae:	3508      	adds	r5, #8
 8008bb0:	2d0c      	cmp	r5, #12
 8008bb2:	bf38      	it	cc
 8008bb4:	250c      	movcc	r5, #12
 8008bb6:	4629      	mov	r1, r5
 8008bb8:	4638      	mov	r0, r7
 8008bba:	f7ff ffa5 	bl	8008b08 <sbrk_aligned>
 8008bbe:	3001      	adds	r0, #1
 8008bc0:	d02b      	beq.n	8008c1a <_malloc_r+0xd2>
 8008bc2:	6823      	ldr	r3, [r4, #0]
 8008bc4:	442b      	add	r3, r5
 8008bc6:	6023      	str	r3, [r4, #0]
 8008bc8:	e00e      	b.n	8008be8 <_malloc_r+0xa0>
 8008bca:	6822      	ldr	r2, [r4, #0]
 8008bcc:	1b52      	subs	r2, r2, r5
 8008bce:	d41e      	bmi.n	8008c0e <_malloc_r+0xc6>
 8008bd0:	2a0b      	cmp	r2, #11
 8008bd2:	d916      	bls.n	8008c02 <_malloc_r+0xba>
 8008bd4:	1961      	adds	r1, r4, r5
 8008bd6:	42a3      	cmp	r3, r4
 8008bd8:	6025      	str	r5, [r4, #0]
 8008bda:	bf18      	it	ne
 8008bdc:	6059      	strne	r1, [r3, #4]
 8008bde:	6863      	ldr	r3, [r4, #4]
 8008be0:	bf08      	it	eq
 8008be2:	6031      	streq	r1, [r6, #0]
 8008be4:	5162      	str	r2, [r4, r5]
 8008be6:	604b      	str	r3, [r1, #4]
 8008be8:	4638      	mov	r0, r7
 8008bea:	f104 060b 	add.w	r6, r4, #11
 8008bee:	f002 ff43 	bl	800ba78 <__malloc_unlock>
 8008bf2:	f026 0607 	bic.w	r6, r6, #7
 8008bf6:	1d23      	adds	r3, r4, #4
 8008bf8:	1af2      	subs	r2, r6, r3
 8008bfa:	d0b6      	beq.n	8008b6a <_malloc_r+0x22>
 8008bfc:	1b9b      	subs	r3, r3, r6
 8008bfe:	50a3      	str	r3, [r4, r2]
 8008c00:	e7b3      	b.n	8008b6a <_malloc_r+0x22>
 8008c02:	6862      	ldr	r2, [r4, #4]
 8008c04:	42a3      	cmp	r3, r4
 8008c06:	bf0c      	ite	eq
 8008c08:	6032      	streq	r2, [r6, #0]
 8008c0a:	605a      	strne	r2, [r3, #4]
 8008c0c:	e7ec      	b.n	8008be8 <_malloc_r+0xa0>
 8008c0e:	4623      	mov	r3, r4
 8008c10:	6864      	ldr	r4, [r4, #4]
 8008c12:	e7b2      	b.n	8008b7a <_malloc_r+0x32>
 8008c14:	4634      	mov	r4, r6
 8008c16:	6876      	ldr	r6, [r6, #4]
 8008c18:	e7b9      	b.n	8008b8e <_malloc_r+0x46>
 8008c1a:	230c      	movs	r3, #12
 8008c1c:	603b      	str	r3, [r7, #0]
 8008c1e:	4638      	mov	r0, r7
 8008c20:	f002 ff2a 	bl	800ba78 <__malloc_unlock>
 8008c24:	e7a1      	b.n	8008b6a <_malloc_r+0x22>
 8008c26:	6025      	str	r5, [r4, #0]
 8008c28:	e7de      	b.n	8008be8 <_malloc_r+0xa0>
 8008c2a:	bf00      	nop
 8008c2c:	200005e4 	.word	0x200005e4

08008c30 <__cvt>:
 8008c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c34:	b088      	sub	sp, #32
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	461f      	mov	r7, r3
 8008c3a:	4614      	mov	r4, r2
 8008c3c:	bfb8      	it	lt
 8008c3e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008c42:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008c44:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008c46:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008c4a:	bfb6      	itet	lt
 8008c4c:	461f      	movlt	r7, r3
 8008c4e:	2300      	movge	r3, #0
 8008c50:	232d      	movlt	r3, #45	; 0x2d
 8008c52:	7013      	strb	r3, [r2, #0]
 8008c54:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008c56:	f023 0820 	bic.w	r8, r3, #32
 8008c5a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008c5e:	d005      	beq.n	8008c6c <__cvt+0x3c>
 8008c60:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008c64:	d100      	bne.n	8008c68 <__cvt+0x38>
 8008c66:	3501      	adds	r5, #1
 8008c68:	2302      	movs	r3, #2
 8008c6a:	e000      	b.n	8008c6e <__cvt+0x3e>
 8008c6c:	2303      	movs	r3, #3
 8008c6e:	aa07      	add	r2, sp, #28
 8008c70:	9204      	str	r2, [sp, #16]
 8008c72:	aa06      	add	r2, sp, #24
 8008c74:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008c78:	e9cd 3500 	strd	r3, r5, [sp]
 8008c7c:	4622      	mov	r2, r4
 8008c7e:	463b      	mov	r3, r7
 8008c80:	f001 fd8a 	bl	800a798 <_dtoa_r>
 8008c84:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008c88:	4606      	mov	r6, r0
 8008c8a:	d102      	bne.n	8008c92 <__cvt+0x62>
 8008c8c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c8e:	07db      	lsls	r3, r3, #31
 8008c90:	d522      	bpl.n	8008cd8 <__cvt+0xa8>
 8008c92:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008c96:	eb06 0905 	add.w	r9, r6, r5
 8008c9a:	d110      	bne.n	8008cbe <__cvt+0x8e>
 8008c9c:	7833      	ldrb	r3, [r6, #0]
 8008c9e:	2b30      	cmp	r3, #48	; 0x30
 8008ca0:	d10a      	bne.n	8008cb8 <__cvt+0x88>
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	4620      	mov	r0, r4
 8008ca8:	4639      	mov	r1, r7
 8008caa:	f7f7 fee5 	bl	8000a78 <__aeabi_dcmpeq>
 8008cae:	b918      	cbnz	r0, 8008cb8 <__cvt+0x88>
 8008cb0:	f1c5 0501 	rsb	r5, r5, #1
 8008cb4:	f8ca 5000 	str.w	r5, [sl]
 8008cb8:	f8da 3000 	ldr.w	r3, [sl]
 8008cbc:	4499      	add	r9, r3
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	4620      	mov	r0, r4
 8008cc4:	4639      	mov	r1, r7
 8008cc6:	f7f7 fed7 	bl	8000a78 <__aeabi_dcmpeq>
 8008cca:	b108      	cbz	r0, 8008cd0 <__cvt+0xa0>
 8008ccc:	f8cd 901c 	str.w	r9, [sp, #28]
 8008cd0:	2230      	movs	r2, #48	; 0x30
 8008cd2:	9b07      	ldr	r3, [sp, #28]
 8008cd4:	454b      	cmp	r3, r9
 8008cd6:	d307      	bcc.n	8008ce8 <__cvt+0xb8>
 8008cd8:	9b07      	ldr	r3, [sp, #28]
 8008cda:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008cdc:	1b9b      	subs	r3, r3, r6
 8008cde:	4630      	mov	r0, r6
 8008ce0:	6013      	str	r3, [r2, #0]
 8008ce2:	b008      	add	sp, #32
 8008ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ce8:	1c59      	adds	r1, r3, #1
 8008cea:	9107      	str	r1, [sp, #28]
 8008cec:	701a      	strb	r2, [r3, #0]
 8008cee:	e7f0      	b.n	8008cd2 <__cvt+0xa2>

08008cf0 <__exponent>:
 8008cf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2900      	cmp	r1, #0
 8008cf6:	bfb8      	it	lt
 8008cf8:	4249      	neglt	r1, r1
 8008cfa:	f803 2b02 	strb.w	r2, [r3], #2
 8008cfe:	bfb4      	ite	lt
 8008d00:	222d      	movlt	r2, #45	; 0x2d
 8008d02:	222b      	movge	r2, #43	; 0x2b
 8008d04:	2909      	cmp	r1, #9
 8008d06:	7042      	strb	r2, [r0, #1]
 8008d08:	dd2a      	ble.n	8008d60 <__exponent+0x70>
 8008d0a:	f10d 0407 	add.w	r4, sp, #7
 8008d0e:	46a4      	mov	ip, r4
 8008d10:	270a      	movs	r7, #10
 8008d12:	46a6      	mov	lr, r4
 8008d14:	460a      	mov	r2, r1
 8008d16:	fb91 f6f7 	sdiv	r6, r1, r7
 8008d1a:	fb07 1516 	mls	r5, r7, r6, r1
 8008d1e:	3530      	adds	r5, #48	; 0x30
 8008d20:	2a63      	cmp	r2, #99	; 0x63
 8008d22:	f104 34ff 	add.w	r4, r4, #4294967295
 8008d26:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008d2a:	4631      	mov	r1, r6
 8008d2c:	dcf1      	bgt.n	8008d12 <__exponent+0x22>
 8008d2e:	3130      	adds	r1, #48	; 0x30
 8008d30:	f1ae 0502 	sub.w	r5, lr, #2
 8008d34:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008d38:	1c44      	adds	r4, r0, #1
 8008d3a:	4629      	mov	r1, r5
 8008d3c:	4561      	cmp	r1, ip
 8008d3e:	d30a      	bcc.n	8008d56 <__exponent+0x66>
 8008d40:	f10d 0209 	add.w	r2, sp, #9
 8008d44:	eba2 020e 	sub.w	r2, r2, lr
 8008d48:	4565      	cmp	r5, ip
 8008d4a:	bf88      	it	hi
 8008d4c:	2200      	movhi	r2, #0
 8008d4e:	4413      	add	r3, r2
 8008d50:	1a18      	subs	r0, r3, r0
 8008d52:	b003      	add	sp, #12
 8008d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d5a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008d5e:	e7ed      	b.n	8008d3c <__exponent+0x4c>
 8008d60:	2330      	movs	r3, #48	; 0x30
 8008d62:	3130      	adds	r1, #48	; 0x30
 8008d64:	7083      	strb	r3, [r0, #2]
 8008d66:	70c1      	strb	r1, [r0, #3]
 8008d68:	1d03      	adds	r3, r0, #4
 8008d6a:	e7f1      	b.n	8008d50 <__exponent+0x60>

08008d6c <_printf_float>:
 8008d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d70:	b091      	sub	sp, #68	; 0x44
 8008d72:	460c      	mov	r4, r1
 8008d74:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008d78:	4616      	mov	r6, r2
 8008d7a:	461f      	mov	r7, r3
 8008d7c:	4605      	mov	r5, r0
 8008d7e:	f002 fe5f 	bl	800ba40 <_localeconv_r>
 8008d82:	6803      	ldr	r3, [r0, #0]
 8008d84:	9309      	str	r3, [sp, #36]	; 0x24
 8008d86:	4618      	mov	r0, r3
 8008d88:	f7f7 f9fa 	bl	8000180 <strlen>
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	930e      	str	r3, [sp, #56]	; 0x38
 8008d90:	f8d8 3000 	ldr.w	r3, [r8]
 8008d94:	900a      	str	r0, [sp, #40]	; 0x28
 8008d96:	3307      	adds	r3, #7
 8008d98:	f023 0307 	bic.w	r3, r3, #7
 8008d9c:	f103 0208 	add.w	r2, r3, #8
 8008da0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008da4:	f8d4 b000 	ldr.w	fp, [r4]
 8008da8:	f8c8 2000 	str.w	r2, [r8]
 8008dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008db4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8008db8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008dbc:	930b      	str	r3, [sp, #44]	; 0x2c
 8008dbe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008dc0:	4b9c      	ldr	r3, [pc, #624]	; (8009034 <_printf_float+0x2c8>)
 8008dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8008dc6:	4640      	mov	r0, r8
 8008dc8:	f7f7 fe88 	bl	8000adc <__aeabi_dcmpun>
 8008dcc:	bb70      	cbnz	r0, 8008e2c <_printf_float+0xc0>
 8008dce:	4b99      	ldr	r3, [pc, #612]	; (8009034 <_printf_float+0x2c8>)
 8008dd0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8008dd6:	4640      	mov	r0, r8
 8008dd8:	f7f7 fe62 	bl	8000aa0 <__aeabi_dcmple>
 8008ddc:	bb30      	cbnz	r0, 8008e2c <_printf_float+0xc0>
 8008dde:	2200      	movs	r2, #0
 8008de0:	2300      	movs	r3, #0
 8008de2:	4640      	mov	r0, r8
 8008de4:	4651      	mov	r1, sl
 8008de6:	f7f7 fe51 	bl	8000a8c <__aeabi_dcmplt>
 8008dea:	b110      	cbz	r0, 8008df2 <_printf_float+0x86>
 8008dec:	232d      	movs	r3, #45	; 0x2d
 8008dee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008df2:	4b91      	ldr	r3, [pc, #580]	; (8009038 <_printf_float+0x2cc>)
 8008df4:	4891      	ldr	r0, [pc, #580]	; (800903c <_printf_float+0x2d0>)
 8008df6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008dfa:	bf94      	ite	ls
 8008dfc:	4698      	movls	r8, r3
 8008dfe:	4680      	movhi	r8, r0
 8008e00:	2303      	movs	r3, #3
 8008e02:	6123      	str	r3, [r4, #16]
 8008e04:	f02b 0304 	bic.w	r3, fp, #4
 8008e08:	6023      	str	r3, [r4, #0]
 8008e0a:	f04f 0a00 	mov.w	sl, #0
 8008e0e:	9700      	str	r7, [sp, #0]
 8008e10:	4633      	mov	r3, r6
 8008e12:	aa0f      	add	r2, sp, #60	; 0x3c
 8008e14:	4621      	mov	r1, r4
 8008e16:	4628      	mov	r0, r5
 8008e18:	f000 f9d2 	bl	80091c0 <_printf_common>
 8008e1c:	3001      	adds	r0, #1
 8008e1e:	f040 808f 	bne.w	8008f40 <_printf_float+0x1d4>
 8008e22:	f04f 30ff 	mov.w	r0, #4294967295
 8008e26:	b011      	add	sp, #68	; 0x44
 8008e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e2c:	4642      	mov	r2, r8
 8008e2e:	4653      	mov	r3, sl
 8008e30:	4640      	mov	r0, r8
 8008e32:	4651      	mov	r1, sl
 8008e34:	f7f7 fe52 	bl	8000adc <__aeabi_dcmpun>
 8008e38:	b140      	cbz	r0, 8008e4c <_printf_float+0xe0>
 8008e3a:	f1ba 0f00 	cmp.w	sl, #0
 8008e3e:	bfbc      	itt	lt
 8008e40:	232d      	movlt	r3, #45	; 0x2d
 8008e42:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008e46:	487e      	ldr	r0, [pc, #504]	; (8009040 <_printf_float+0x2d4>)
 8008e48:	4b7e      	ldr	r3, [pc, #504]	; (8009044 <_printf_float+0x2d8>)
 8008e4a:	e7d4      	b.n	8008df6 <_printf_float+0x8a>
 8008e4c:	6863      	ldr	r3, [r4, #4]
 8008e4e:	1c5a      	adds	r2, r3, #1
 8008e50:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008e54:	d142      	bne.n	8008edc <_printf_float+0x170>
 8008e56:	2306      	movs	r3, #6
 8008e58:	6063      	str	r3, [r4, #4]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	9206      	str	r2, [sp, #24]
 8008e5e:	aa0e      	add	r2, sp, #56	; 0x38
 8008e60:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8008e64:	aa0d      	add	r2, sp, #52	; 0x34
 8008e66:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008e6a:	9203      	str	r2, [sp, #12]
 8008e6c:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008e70:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008e74:	6023      	str	r3, [r4, #0]
 8008e76:	6863      	ldr	r3, [r4, #4]
 8008e78:	9300      	str	r3, [sp, #0]
 8008e7a:	4642      	mov	r2, r8
 8008e7c:	4653      	mov	r3, sl
 8008e7e:	4628      	mov	r0, r5
 8008e80:	910b      	str	r1, [sp, #44]	; 0x2c
 8008e82:	f7ff fed5 	bl	8008c30 <__cvt>
 8008e86:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008e88:	2947      	cmp	r1, #71	; 0x47
 8008e8a:	4680      	mov	r8, r0
 8008e8c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008e8e:	d108      	bne.n	8008ea2 <_printf_float+0x136>
 8008e90:	1cc8      	adds	r0, r1, #3
 8008e92:	db02      	blt.n	8008e9a <_printf_float+0x12e>
 8008e94:	6863      	ldr	r3, [r4, #4]
 8008e96:	4299      	cmp	r1, r3
 8008e98:	dd40      	ble.n	8008f1c <_printf_float+0x1b0>
 8008e9a:	f1a9 0902 	sub.w	r9, r9, #2
 8008e9e:	fa5f f989 	uxtb.w	r9, r9
 8008ea2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008ea6:	d81f      	bhi.n	8008ee8 <_printf_float+0x17c>
 8008ea8:	3901      	subs	r1, #1
 8008eaa:	464a      	mov	r2, r9
 8008eac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008eb0:	910d      	str	r1, [sp, #52]	; 0x34
 8008eb2:	f7ff ff1d 	bl	8008cf0 <__exponent>
 8008eb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008eb8:	1813      	adds	r3, r2, r0
 8008eba:	2a01      	cmp	r2, #1
 8008ebc:	4682      	mov	sl, r0
 8008ebe:	6123      	str	r3, [r4, #16]
 8008ec0:	dc02      	bgt.n	8008ec8 <_printf_float+0x15c>
 8008ec2:	6822      	ldr	r2, [r4, #0]
 8008ec4:	07d2      	lsls	r2, r2, #31
 8008ec6:	d501      	bpl.n	8008ecc <_printf_float+0x160>
 8008ec8:	3301      	adds	r3, #1
 8008eca:	6123      	str	r3, [r4, #16]
 8008ecc:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d09c      	beq.n	8008e0e <_printf_float+0xa2>
 8008ed4:	232d      	movs	r3, #45	; 0x2d
 8008ed6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008eda:	e798      	b.n	8008e0e <_printf_float+0xa2>
 8008edc:	2947      	cmp	r1, #71	; 0x47
 8008ede:	d1bc      	bne.n	8008e5a <_printf_float+0xee>
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d1ba      	bne.n	8008e5a <_printf_float+0xee>
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	e7b7      	b.n	8008e58 <_printf_float+0xec>
 8008ee8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008eec:	d118      	bne.n	8008f20 <_printf_float+0x1b4>
 8008eee:	2900      	cmp	r1, #0
 8008ef0:	6863      	ldr	r3, [r4, #4]
 8008ef2:	dd0b      	ble.n	8008f0c <_printf_float+0x1a0>
 8008ef4:	6121      	str	r1, [r4, #16]
 8008ef6:	b913      	cbnz	r3, 8008efe <_printf_float+0x192>
 8008ef8:	6822      	ldr	r2, [r4, #0]
 8008efa:	07d0      	lsls	r0, r2, #31
 8008efc:	d502      	bpl.n	8008f04 <_printf_float+0x198>
 8008efe:	3301      	adds	r3, #1
 8008f00:	440b      	add	r3, r1
 8008f02:	6123      	str	r3, [r4, #16]
 8008f04:	65a1      	str	r1, [r4, #88]	; 0x58
 8008f06:	f04f 0a00 	mov.w	sl, #0
 8008f0a:	e7df      	b.n	8008ecc <_printf_float+0x160>
 8008f0c:	b913      	cbnz	r3, 8008f14 <_printf_float+0x1a8>
 8008f0e:	6822      	ldr	r2, [r4, #0]
 8008f10:	07d2      	lsls	r2, r2, #31
 8008f12:	d501      	bpl.n	8008f18 <_printf_float+0x1ac>
 8008f14:	3302      	adds	r3, #2
 8008f16:	e7f4      	b.n	8008f02 <_printf_float+0x196>
 8008f18:	2301      	movs	r3, #1
 8008f1a:	e7f2      	b.n	8008f02 <_printf_float+0x196>
 8008f1c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008f20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f22:	4299      	cmp	r1, r3
 8008f24:	db05      	blt.n	8008f32 <_printf_float+0x1c6>
 8008f26:	6823      	ldr	r3, [r4, #0]
 8008f28:	6121      	str	r1, [r4, #16]
 8008f2a:	07d8      	lsls	r0, r3, #31
 8008f2c:	d5ea      	bpl.n	8008f04 <_printf_float+0x198>
 8008f2e:	1c4b      	adds	r3, r1, #1
 8008f30:	e7e7      	b.n	8008f02 <_printf_float+0x196>
 8008f32:	2900      	cmp	r1, #0
 8008f34:	bfd4      	ite	le
 8008f36:	f1c1 0202 	rsble	r2, r1, #2
 8008f3a:	2201      	movgt	r2, #1
 8008f3c:	4413      	add	r3, r2
 8008f3e:	e7e0      	b.n	8008f02 <_printf_float+0x196>
 8008f40:	6823      	ldr	r3, [r4, #0]
 8008f42:	055a      	lsls	r2, r3, #21
 8008f44:	d407      	bmi.n	8008f56 <_printf_float+0x1ea>
 8008f46:	6923      	ldr	r3, [r4, #16]
 8008f48:	4642      	mov	r2, r8
 8008f4a:	4631      	mov	r1, r6
 8008f4c:	4628      	mov	r0, r5
 8008f4e:	47b8      	blx	r7
 8008f50:	3001      	adds	r0, #1
 8008f52:	d12b      	bne.n	8008fac <_printf_float+0x240>
 8008f54:	e765      	b.n	8008e22 <_printf_float+0xb6>
 8008f56:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008f5a:	f240 80dc 	bls.w	8009116 <_printf_float+0x3aa>
 8008f5e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008f62:	2200      	movs	r2, #0
 8008f64:	2300      	movs	r3, #0
 8008f66:	f7f7 fd87 	bl	8000a78 <__aeabi_dcmpeq>
 8008f6a:	2800      	cmp	r0, #0
 8008f6c:	d033      	beq.n	8008fd6 <_printf_float+0x26a>
 8008f6e:	4a36      	ldr	r2, [pc, #216]	; (8009048 <_printf_float+0x2dc>)
 8008f70:	2301      	movs	r3, #1
 8008f72:	4631      	mov	r1, r6
 8008f74:	4628      	mov	r0, r5
 8008f76:	47b8      	blx	r7
 8008f78:	3001      	adds	r0, #1
 8008f7a:	f43f af52 	beq.w	8008e22 <_printf_float+0xb6>
 8008f7e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008f82:	429a      	cmp	r2, r3
 8008f84:	db02      	blt.n	8008f8c <_printf_float+0x220>
 8008f86:	6823      	ldr	r3, [r4, #0]
 8008f88:	07d8      	lsls	r0, r3, #31
 8008f8a:	d50f      	bpl.n	8008fac <_printf_float+0x240>
 8008f8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f90:	4631      	mov	r1, r6
 8008f92:	4628      	mov	r0, r5
 8008f94:	47b8      	blx	r7
 8008f96:	3001      	adds	r0, #1
 8008f98:	f43f af43 	beq.w	8008e22 <_printf_float+0xb6>
 8008f9c:	f04f 0800 	mov.w	r8, #0
 8008fa0:	f104 091a 	add.w	r9, r4, #26
 8008fa4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008fa6:	3b01      	subs	r3, #1
 8008fa8:	4543      	cmp	r3, r8
 8008faa:	dc09      	bgt.n	8008fc0 <_printf_float+0x254>
 8008fac:	6823      	ldr	r3, [r4, #0]
 8008fae:	079b      	lsls	r3, r3, #30
 8008fb0:	f100 8101 	bmi.w	80091b6 <_printf_float+0x44a>
 8008fb4:	68e0      	ldr	r0, [r4, #12]
 8008fb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008fb8:	4298      	cmp	r0, r3
 8008fba:	bfb8      	it	lt
 8008fbc:	4618      	movlt	r0, r3
 8008fbe:	e732      	b.n	8008e26 <_printf_float+0xba>
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	464a      	mov	r2, r9
 8008fc4:	4631      	mov	r1, r6
 8008fc6:	4628      	mov	r0, r5
 8008fc8:	47b8      	blx	r7
 8008fca:	3001      	adds	r0, #1
 8008fcc:	f43f af29 	beq.w	8008e22 <_printf_float+0xb6>
 8008fd0:	f108 0801 	add.w	r8, r8, #1
 8008fd4:	e7e6      	b.n	8008fa4 <_printf_float+0x238>
 8008fd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	dc37      	bgt.n	800904c <_printf_float+0x2e0>
 8008fdc:	4a1a      	ldr	r2, [pc, #104]	; (8009048 <_printf_float+0x2dc>)
 8008fde:	2301      	movs	r3, #1
 8008fe0:	4631      	mov	r1, r6
 8008fe2:	4628      	mov	r0, r5
 8008fe4:	47b8      	blx	r7
 8008fe6:	3001      	adds	r0, #1
 8008fe8:	f43f af1b 	beq.w	8008e22 <_printf_float+0xb6>
 8008fec:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	d102      	bne.n	8008ffa <_printf_float+0x28e>
 8008ff4:	6823      	ldr	r3, [r4, #0]
 8008ff6:	07d9      	lsls	r1, r3, #31
 8008ff8:	d5d8      	bpl.n	8008fac <_printf_float+0x240>
 8008ffa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ffe:	4631      	mov	r1, r6
 8009000:	4628      	mov	r0, r5
 8009002:	47b8      	blx	r7
 8009004:	3001      	adds	r0, #1
 8009006:	f43f af0c 	beq.w	8008e22 <_printf_float+0xb6>
 800900a:	f04f 0900 	mov.w	r9, #0
 800900e:	f104 0a1a 	add.w	sl, r4, #26
 8009012:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009014:	425b      	negs	r3, r3
 8009016:	454b      	cmp	r3, r9
 8009018:	dc01      	bgt.n	800901e <_printf_float+0x2b2>
 800901a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800901c:	e794      	b.n	8008f48 <_printf_float+0x1dc>
 800901e:	2301      	movs	r3, #1
 8009020:	4652      	mov	r2, sl
 8009022:	4631      	mov	r1, r6
 8009024:	4628      	mov	r0, r5
 8009026:	47b8      	blx	r7
 8009028:	3001      	adds	r0, #1
 800902a:	f43f aefa 	beq.w	8008e22 <_printf_float+0xb6>
 800902e:	f109 0901 	add.w	r9, r9, #1
 8009032:	e7ee      	b.n	8009012 <_printf_float+0x2a6>
 8009034:	7fefffff 	.word	0x7fefffff
 8009038:	0800d66c 	.word	0x0800d66c
 800903c:	0800d670 	.word	0x0800d670
 8009040:	0800d678 	.word	0x0800d678
 8009044:	0800d674 	.word	0x0800d674
 8009048:	0800d67c 	.word	0x0800d67c
 800904c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800904e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009050:	429a      	cmp	r2, r3
 8009052:	bfa8      	it	ge
 8009054:	461a      	movge	r2, r3
 8009056:	2a00      	cmp	r2, #0
 8009058:	4691      	mov	r9, r2
 800905a:	dc37      	bgt.n	80090cc <_printf_float+0x360>
 800905c:	f04f 0b00 	mov.w	fp, #0
 8009060:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009064:	f104 021a 	add.w	r2, r4, #26
 8009068:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800906c:	ebaa 0309 	sub.w	r3, sl, r9
 8009070:	455b      	cmp	r3, fp
 8009072:	dc33      	bgt.n	80090dc <_printf_float+0x370>
 8009074:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009078:	429a      	cmp	r2, r3
 800907a:	db3b      	blt.n	80090f4 <_printf_float+0x388>
 800907c:	6823      	ldr	r3, [r4, #0]
 800907e:	07da      	lsls	r2, r3, #31
 8009080:	d438      	bmi.n	80090f4 <_printf_float+0x388>
 8009082:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009084:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009086:	eba3 020a 	sub.w	r2, r3, sl
 800908a:	eba3 0901 	sub.w	r9, r3, r1
 800908e:	4591      	cmp	r9, r2
 8009090:	bfa8      	it	ge
 8009092:	4691      	movge	r9, r2
 8009094:	f1b9 0f00 	cmp.w	r9, #0
 8009098:	dc34      	bgt.n	8009104 <_printf_float+0x398>
 800909a:	f04f 0800 	mov.w	r8, #0
 800909e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80090a2:	f104 0a1a 	add.w	sl, r4, #26
 80090a6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80090aa:	1a9b      	subs	r3, r3, r2
 80090ac:	eba3 0309 	sub.w	r3, r3, r9
 80090b0:	4543      	cmp	r3, r8
 80090b2:	f77f af7b 	ble.w	8008fac <_printf_float+0x240>
 80090b6:	2301      	movs	r3, #1
 80090b8:	4652      	mov	r2, sl
 80090ba:	4631      	mov	r1, r6
 80090bc:	4628      	mov	r0, r5
 80090be:	47b8      	blx	r7
 80090c0:	3001      	adds	r0, #1
 80090c2:	f43f aeae 	beq.w	8008e22 <_printf_float+0xb6>
 80090c6:	f108 0801 	add.w	r8, r8, #1
 80090ca:	e7ec      	b.n	80090a6 <_printf_float+0x33a>
 80090cc:	4613      	mov	r3, r2
 80090ce:	4631      	mov	r1, r6
 80090d0:	4642      	mov	r2, r8
 80090d2:	4628      	mov	r0, r5
 80090d4:	47b8      	blx	r7
 80090d6:	3001      	adds	r0, #1
 80090d8:	d1c0      	bne.n	800905c <_printf_float+0x2f0>
 80090da:	e6a2      	b.n	8008e22 <_printf_float+0xb6>
 80090dc:	2301      	movs	r3, #1
 80090de:	4631      	mov	r1, r6
 80090e0:	4628      	mov	r0, r5
 80090e2:	920b      	str	r2, [sp, #44]	; 0x2c
 80090e4:	47b8      	blx	r7
 80090e6:	3001      	adds	r0, #1
 80090e8:	f43f ae9b 	beq.w	8008e22 <_printf_float+0xb6>
 80090ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80090ee:	f10b 0b01 	add.w	fp, fp, #1
 80090f2:	e7b9      	b.n	8009068 <_printf_float+0x2fc>
 80090f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80090f8:	4631      	mov	r1, r6
 80090fa:	4628      	mov	r0, r5
 80090fc:	47b8      	blx	r7
 80090fe:	3001      	adds	r0, #1
 8009100:	d1bf      	bne.n	8009082 <_printf_float+0x316>
 8009102:	e68e      	b.n	8008e22 <_printf_float+0xb6>
 8009104:	464b      	mov	r3, r9
 8009106:	eb08 020a 	add.w	r2, r8, sl
 800910a:	4631      	mov	r1, r6
 800910c:	4628      	mov	r0, r5
 800910e:	47b8      	blx	r7
 8009110:	3001      	adds	r0, #1
 8009112:	d1c2      	bne.n	800909a <_printf_float+0x32e>
 8009114:	e685      	b.n	8008e22 <_printf_float+0xb6>
 8009116:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009118:	2a01      	cmp	r2, #1
 800911a:	dc01      	bgt.n	8009120 <_printf_float+0x3b4>
 800911c:	07db      	lsls	r3, r3, #31
 800911e:	d537      	bpl.n	8009190 <_printf_float+0x424>
 8009120:	2301      	movs	r3, #1
 8009122:	4642      	mov	r2, r8
 8009124:	4631      	mov	r1, r6
 8009126:	4628      	mov	r0, r5
 8009128:	47b8      	blx	r7
 800912a:	3001      	adds	r0, #1
 800912c:	f43f ae79 	beq.w	8008e22 <_printf_float+0xb6>
 8009130:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009134:	4631      	mov	r1, r6
 8009136:	4628      	mov	r0, r5
 8009138:	47b8      	blx	r7
 800913a:	3001      	adds	r0, #1
 800913c:	f43f ae71 	beq.w	8008e22 <_printf_float+0xb6>
 8009140:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009144:	2200      	movs	r2, #0
 8009146:	2300      	movs	r3, #0
 8009148:	f7f7 fc96 	bl	8000a78 <__aeabi_dcmpeq>
 800914c:	b9d8      	cbnz	r0, 8009186 <_printf_float+0x41a>
 800914e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009150:	f108 0201 	add.w	r2, r8, #1
 8009154:	3b01      	subs	r3, #1
 8009156:	4631      	mov	r1, r6
 8009158:	4628      	mov	r0, r5
 800915a:	47b8      	blx	r7
 800915c:	3001      	adds	r0, #1
 800915e:	d10e      	bne.n	800917e <_printf_float+0x412>
 8009160:	e65f      	b.n	8008e22 <_printf_float+0xb6>
 8009162:	2301      	movs	r3, #1
 8009164:	464a      	mov	r2, r9
 8009166:	4631      	mov	r1, r6
 8009168:	4628      	mov	r0, r5
 800916a:	47b8      	blx	r7
 800916c:	3001      	adds	r0, #1
 800916e:	f43f ae58 	beq.w	8008e22 <_printf_float+0xb6>
 8009172:	f108 0801 	add.w	r8, r8, #1
 8009176:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009178:	3b01      	subs	r3, #1
 800917a:	4543      	cmp	r3, r8
 800917c:	dcf1      	bgt.n	8009162 <_printf_float+0x3f6>
 800917e:	4653      	mov	r3, sl
 8009180:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009184:	e6e1      	b.n	8008f4a <_printf_float+0x1de>
 8009186:	f04f 0800 	mov.w	r8, #0
 800918a:	f104 091a 	add.w	r9, r4, #26
 800918e:	e7f2      	b.n	8009176 <_printf_float+0x40a>
 8009190:	2301      	movs	r3, #1
 8009192:	4642      	mov	r2, r8
 8009194:	e7df      	b.n	8009156 <_printf_float+0x3ea>
 8009196:	2301      	movs	r3, #1
 8009198:	464a      	mov	r2, r9
 800919a:	4631      	mov	r1, r6
 800919c:	4628      	mov	r0, r5
 800919e:	47b8      	blx	r7
 80091a0:	3001      	adds	r0, #1
 80091a2:	f43f ae3e 	beq.w	8008e22 <_printf_float+0xb6>
 80091a6:	f108 0801 	add.w	r8, r8, #1
 80091aa:	68e3      	ldr	r3, [r4, #12]
 80091ac:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80091ae:	1a5b      	subs	r3, r3, r1
 80091b0:	4543      	cmp	r3, r8
 80091b2:	dcf0      	bgt.n	8009196 <_printf_float+0x42a>
 80091b4:	e6fe      	b.n	8008fb4 <_printf_float+0x248>
 80091b6:	f04f 0800 	mov.w	r8, #0
 80091ba:	f104 0919 	add.w	r9, r4, #25
 80091be:	e7f4      	b.n	80091aa <_printf_float+0x43e>

080091c0 <_printf_common>:
 80091c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091c4:	4616      	mov	r6, r2
 80091c6:	4699      	mov	r9, r3
 80091c8:	688a      	ldr	r2, [r1, #8]
 80091ca:	690b      	ldr	r3, [r1, #16]
 80091cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80091d0:	4293      	cmp	r3, r2
 80091d2:	bfb8      	it	lt
 80091d4:	4613      	movlt	r3, r2
 80091d6:	6033      	str	r3, [r6, #0]
 80091d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80091dc:	4607      	mov	r7, r0
 80091de:	460c      	mov	r4, r1
 80091e0:	b10a      	cbz	r2, 80091e6 <_printf_common+0x26>
 80091e2:	3301      	adds	r3, #1
 80091e4:	6033      	str	r3, [r6, #0]
 80091e6:	6823      	ldr	r3, [r4, #0]
 80091e8:	0699      	lsls	r1, r3, #26
 80091ea:	bf42      	ittt	mi
 80091ec:	6833      	ldrmi	r3, [r6, #0]
 80091ee:	3302      	addmi	r3, #2
 80091f0:	6033      	strmi	r3, [r6, #0]
 80091f2:	6825      	ldr	r5, [r4, #0]
 80091f4:	f015 0506 	ands.w	r5, r5, #6
 80091f8:	d106      	bne.n	8009208 <_printf_common+0x48>
 80091fa:	f104 0a19 	add.w	sl, r4, #25
 80091fe:	68e3      	ldr	r3, [r4, #12]
 8009200:	6832      	ldr	r2, [r6, #0]
 8009202:	1a9b      	subs	r3, r3, r2
 8009204:	42ab      	cmp	r3, r5
 8009206:	dc26      	bgt.n	8009256 <_printf_common+0x96>
 8009208:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800920c:	1e13      	subs	r3, r2, #0
 800920e:	6822      	ldr	r2, [r4, #0]
 8009210:	bf18      	it	ne
 8009212:	2301      	movne	r3, #1
 8009214:	0692      	lsls	r2, r2, #26
 8009216:	d42b      	bmi.n	8009270 <_printf_common+0xb0>
 8009218:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800921c:	4649      	mov	r1, r9
 800921e:	4638      	mov	r0, r7
 8009220:	47c0      	blx	r8
 8009222:	3001      	adds	r0, #1
 8009224:	d01e      	beq.n	8009264 <_printf_common+0xa4>
 8009226:	6823      	ldr	r3, [r4, #0]
 8009228:	68e5      	ldr	r5, [r4, #12]
 800922a:	6832      	ldr	r2, [r6, #0]
 800922c:	f003 0306 	and.w	r3, r3, #6
 8009230:	2b04      	cmp	r3, #4
 8009232:	bf08      	it	eq
 8009234:	1aad      	subeq	r5, r5, r2
 8009236:	68a3      	ldr	r3, [r4, #8]
 8009238:	6922      	ldr	r2, [r4, #16]
 800923a:	bf0c      	ite	eq
 800923c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009240:	2500      	movne	r5, #0
 8009242:	4293      	cmp	r3, r2
 8009244:	bfc4      	itt	gt
 8009246:	1a9b      	subgt	r3, r3, r2
 8009248:	18ed      	addgt	r5, r5, r3
 800924a:	2600      	movs	r6, #0
 800924c:	341a      	adds	r4, #26
 800924e:	42b5      	cmp	r5, r6
 8009250:	d11a      	bne.n	8009288 <_printf_common+0xc8>
 8009252:	2000      	movs	r0, #0
 8009254:	e008      	b.n	8009268 <_printf_common+0xa8>
 8009256:	2301      	movs	r3, #1
 8009258:	4652      	mov	r2, sl
 800925a:	4649      	mov	r1, r9
 800925c:	4638      	mov	r0, r7
 800925e:	47c0      	blx	r8
 8009260:	3001      	adds	r0, #1
 8009262:	d103      	bne.n	800926c <_printf_common+0xac>
 8009264:	f04f 30ff 	mov.w	r0, #4294967295
 8009268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800926c:	3501      	adds	r5, #1
 800926e:	e7c6      	b.n	80091fe <_printf_common+0x3e>
 8009270:	18e1      	adds	r1, r4, r3
 8009272:	1c5a      	adds	r2, r3, #1
 8009274:	2030      	movs	r0, #48	; 0x30
 8009276:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800927a:	4422      	add	r2, r4
 800927c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009280:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009284:	3302      	adds	r3, #2
 8009286:	e7c7      	b.n	8009218 <_printf_common+0x58>
 8009288:	2301      	movs	r3, #1
 800928a:	4622      	mov	r2, r4
 800928c:	4649      	mov	r1, r9
 800928e:	4638      	mov	r0, r7
 8009290:	47c0      	blx	r8
 8009292:	3001      	adds	r0, #1
 8009294:	d0e6      	beq.n	8009264 <_printf_common+0xa4>
 8009296:	3601      	adds	r6, #1
 8009298:	e7d9      	b.n	800924e <_printf_common+0x8e>
	...

0800929c <_printf_i>:
 800929c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092a0:	7e0f      	ldrb	r7, [r1, #24]
 80092a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80092a4:	2f78      	cmp	r7, #120	; 0x78
 80092a6:	4691      	mov	r9, r2
 80092a8:	4680      	mov	r8, r0
 80092aa:	460c      	mov	r4, r1
 80092ac:	469a      	mov	sl, r3
 80092ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80092b2:	d807      	bhi.n	80092c4 <_printf_i+0x28>
 80092b4:	2f62      	cmp	r7, #98	; 0x62
 80092b6:	d80a      	bhi.n	80092ce <_printf_i+0x32>
 80092b8:	2f00      	cmp	r7, #0
 80092ba:	f000 80d8 	beq.w	800946e <_printf_i+0x1d2>
 80092be:	2f58      	cmp	r7, #88	; 0x58
 80092c0:	f000 80a3 	beq.w	800940a <_printf_i+0x16e>
 80092c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80092cc:	e03a      	b.n	8009344 <_printf_i+0xa8>
 80092ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80092d2:	2b15      	cmp	r3, #21
 80092d4:	d8f6      	bhi.n	80092c4 <_printf_i+0x28>
 80092d6:	a101      	add	r1, pc, #4	; (adr r1, 80092dc <_printf_i+0x40>)
 80092d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80092dc:	08009335 	.word	0x08009335
 80092e0:	08009349 	.word	0x08009349
 80092e4:	080092c5 	.word	0x080092c5
 80092e8:	080092c5 	.word	0x080092c5
 80092ec:	080092c5 	.word	0x080092c5
 80092f0:	080092c5 	.word	0x080092c5
 80092f4:	08009349 	.word	0x08009349
 80092f8:	080092c5 	.word	0x080092c5
 80092fc:	080092c5 	.word	0x080092c5
 8009300:	080092c5 	.word	0x080092c5
 8009304:	080092c5 	.word	0x080092c5
 8009308:	08009455 	.word	0x08009455
 800930c:	08009379 	.word	0x08009379
 8009310:	08009437 	.word	0x08009437
 8009314:	080092c5 	.word	0x080092c5
 8009318:	080092c5 	.word	0x080092c5
 800931c:	08009477 	.word	0x08009477
 8009320:	080092c5 	.word	0x080092c5
 8009324:	08009379 	.word	0x08009379
 8009328:	080092c5 	.word	0x080092c5
 800932c:	080092c5 	.word	0x080092c5
 8009330:	0800943f 	.word	0x0800943f
 8009334:	682b      	ldr	r3, [r5, #0]
 8009336:	1d1a      	adds	r2, r3, #4
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	602a      	str	r2, [r5, #0]
 800933c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009340:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009344:	2301      	movs	r3, #1
 8009346:	e0a3      	b.n	8009490 <_printf_i+0x1f4>
 8009348:	6820      	ldr	r0, [r4, #0]
 800934a:	6829      	ldr	r1, [r5, #0]
 800934c:	0606      	lsls	r6, r0, #24
 800934e:	f101 0304 	add.w	r3, r1, #4
 8009352:	d50a      	bpl.n	800936a <_printf_i+0xce>
 8009354:	680e      	ldr	r6, [r1, #0]
 8009356:	602b      	str	r3, [r5, #0]
 8009358:	2e00      	cmp	r6, #0
 800935a:	da03      	bge.n	8009364 <_printf_i+0xc8>
 800935c:	232d      	movs	r3, #45	; 0x2d
 800935e:	4276      	negs	r6, r6
 8009360:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009364:	485e      	ldr	r0, [pc, #376]	; (80094e0 <_printf_i+0x244>)
 8009366:	230a      	movs	r3, #10
 8009368:	e019      	b.n	800939e <_printf_i+0x102>
 800936a:	680e      	ldr	r6, [r1, #0]
 800936c:	602b      	str	r3, [r5, #0]
 800936e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009372:	bf18      	it	ne
 8009374:	b236      	sxthne	r6, r6
 8009376:	e7ef      	b.n	8009358 <_printf_i+0xbc>
 8009378:	682b      	ldr	r3, [r5, #0]
 800937a:	6820      	ldr	r0, [r4, #0]
 800937c:	1d19      	adds	r1, r3, #4
 800937e:	6029      	str	r1, [r5, #0]
 8009380:	0601      	lsls	r1, r0, #24
 8009382:	d501      	bpl.n	8009388 <_printf_i+0xec>
 8009384:	681e      	ldr	r6, [r3, #0]
 8009386:	e002      	b.n	800938e <_printf_i+0xf2>
 8009388:	0646      	lsls	r6, r0, #25
 800938a:	d5fb      	bpl.n	8009384 <_printf_i+0xe8>
 800938c:	881e      	ldrh	r6, [r3, #0]
 800938e:	4854      	ldr	r0, [pc, #336]	; (80094e0 <_printf_i+0x244>)
 8009390:	2f6f      	cmp	r7, #111	; 0x6f
 8009392:	bf0c      	ite	eq
 8009394:	2308      	moveq	r3, #8
 8009396:	230a      	movne	r3, #10
 8009398:	2100      	movs	r1, #0
 800939a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800939e:	6865      	ldr	r5, [r4, #4]
 80093a0:	60a5      	str	r5, [r4, #8]
 80093a2:	2d00      	cmp	r5, #0
 80093a4:	bfa2      	ittt	ge
 80093a6:	6821      	ldrge	r1, [r4, #0]
 80093a8:	f021 0104 	bicge.w	r1, r1, #4
 80093ac:	6021      	strge	r1, [r4, #0]
 80093ae:	b90e      	cbnz	r6, 80093b4 <_printf_i+0x118>
 80093b0:	2d00      	cmp	r5, #0
 80093b2:	d04d      	beq.n	8009450 <_printf_i+0x1b4>
 80093b4:	4615      	mov	r5, r2
 80093b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80093ba:	fb03 6711 	mls	r7, r3, r1, r6
 80093be:	5dc7      	ldrb	r7, [r0, r7]
 80093c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80093c4:	4637      	mov	r7, r6
 80093c6:	42bb      	cmp	r3, r7
 80093c8:	460e      	mov	r6, r1
 80093ca:	d9f4      	bls.n	80093b6 <_printf_i+0x11a>
 80093cc:	2b08      	cmp	r3, #8
 80093ce:	d10b      	bne.n	80093e8 <_printf_i+0x14c>
 80093d0:	6823      	ldr	r3, [r4, #0]
 80093d2:	07de      	lsls	r6, r3, #31
 80093d4:	d508      	bpl.n	80093e8 <_printf_i+0x14c>
 80093d6:	6923      	ldr	r3, [r4, #16]
 80093d8:	6861      	ldr	r1, [r4, #4]
 80093da:	4299      	cmp	r1, r3
 80093dc:	bfde      	ittt	le
 80093de:	2330      	movle	r3, #48	; 0x30
 80093e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80093e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80093e8:	1b52      	subs	r2, r2, r5
 80093ea:	6122      	str	r2, [r4, #16]
 80093ec:	f8cd a000 	str.w	sl, [sp]
 80093f0:	464b      	mov	r3, r9
 80093f2:	aa03      	add	r2, sp, #12
 80093f4:	4621      	mov	r1, r4
 80093f6:	4640      	mov	r0, r8
 80093f8:	f7ff fee2 	bl	80091c0 <_printf_common>
 80093fc:	3001      	adds	r0, #1
 80093fe:	d14c      	bne.n	800949a <_printf_i+0x1fe>
 8009400:	f04f 30ff 	mov.w	r0, #4294967295
 8009404:	b004      	add	sp, #16
 8009406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800940a:	4835      	ldr	r0, [pc, #212]	; (80094e0 <_printf_i+0x244>)
 800940c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009410:	6829      	ldr	r1, [r5, #0]
 8009412:	6823      	ldr	r3, [r4, #0]
 8009414:	f851 6b04 	ldr.w	r6, [r1], #4
 8009418:	6029      	str	r1, [r5, #0]
 800941a:	061d      	lsls	r5, r3, #24
 800941c:	d514      	bpl.n	8009448 <_printf_i+0x1ac>
 800941e:	07df      	lsls	r7, r3, #31
 8009420:	bf44      	itt	mi
 8009422:	f043 0320 	orrmi.w	r3, r3, #32
 8009426:	6023      	strmi	r3, [r4, #0]
 8009428:	b91e      	cbnz	r6, 8009432 <_printf_i+0x196>
 800942a:	6823      	ldr	r3, [r4, #0]
 800942c:	f023 0320 	bic.w	r3, r3, #32
 8009430:	6023      	str	r3, [r4, #0]
 8009432:	2310      	movs	r3, #16
 8009434:	e7b0      	b.n	8009398 <_printf_i+0xfc>
 8009436:	6823      	ldr	r3, [r4, #0]
 8009438:	f043 0320 	orr.w	r3, r3, #32
 800943c:	6023      	str	r3, [r4, #0]
 800943e:	2378      	movs	r3, #120	; 0x78
 8009440:	4828      	ldr	r0, [pc, #160]	; (80094e4 <_printf_i+0x248>)
 8009442:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009446:	e7e3      	b.n	8009410 <_printf_i+0x174>
 8009448:	0659      	lsls	r1, r3, #25
 800944a:	bf48      	it	mi
 800944c:	b2b6      	uxthmi	r6, r6
 800944e:	e7e6      	b.n	800941e <_printf_i+0x182>
 8009450:	4615      	mov	r5, r2
 8009452:	e7bb      	b.n	80093cc <_printf_i+0x130>
 8009454:	682b      	ldr	r3, [r5, #0]
 8009456:	6826      	ldr	r6, [r4, #0]
 8009458:	6961      	ldr	r1, [r4, #20]
 800945a:	1d18      	adds	r0, r3, #4
 800945c:	6028      	str	r0, [r5, #0]
 800945e:	0635      	lsls	r5, r6, #24
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	d501      	bpl.n	8009468 <_printf_i+0x1cc>
 8009464:	6019      	str	r1, [r3, #0]
 8009466:	e002      	b.n	800946e <_printf_i+0x1d2>
 8009468:	0670      	lsls	r0, r6, #25
 800946a:	d5fb      	bpl.n	8009464 <_printf_i+0x1c8>
 800946c:	8019      	strh	r1, [r3, #0]
 800946e:	2300      	movs	r3, #0
 8009470:	6123      	str	r3, [r4, #16]
 8009472:	4615      	mov	r5, r2
 8009474:	e7ba      	b.n	80093ec <_printf_i+0x150>
 8009476:	682b      	ldr	r3, [r5, #0]
 8009478:	1d1a      	adds	r2, r3, #4
 800947a:	602a      	str	r2, [r5, #0]
 800947c:	681d      	ldr	r5, [r3, #0]
 800947e:	6862      	ldr	r2, [r4, #4]
 8009480:	2100      	movs	r1, #0
 8009482:	4628      	mov	r0, r5
 8009484:	f7f6 fe84 	bl	8000190 <memchr>
 8009488:	b108      	cbz	r0, 800948e <_printf_i+0x1f2>
 800948a:	1b40      	subs	r0, r0, r5
 800948c:	6060      	str	r0, [r4, #4]
 800948e:	6863      	ldr	r3, [r4, #4]
 8009490:	6123      	str	r3, [r4, #16]
 8009492:	2300      	movs	r3, #0
 8009494:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009498:	e7a8      	b.n	80093ec <_printf_i+0x150>
 800949a:	6923      	ldr	r3, [r4, #16]
 800949c:	462a      	mov	r2, r5
 800949e:	4649      	mov	r1, r9
 80094a0:	4640      	mov	r0, r8
 80094a2:	47d0      	blx	sl
 80094a4:	3001      	adds	r0, #1
 80094a6:	d0ab      	beq.n	8009400 <_printf_i+0x164>
 80094a8:	6823      	ldr	r3, [r4, #0]
 80094aa:	079b      	lsls	r3, r3, #30
 80094ac:	d413      	bmi.n	80094d6 <_printf_i+0x23a>
 80094ae:	68e0      	ldr	r0, [r4, #12]
 80094b0:	9b03      	ldr	r3, [sp, #12]
 80094b2:	4298      	cmp	r0, r3
 80094b4:	bfb8      	it	lt
 80094b6:	4618      	movlt	r0, r3
 80094b8:	e7a4      	b.n	8009404 <_printf_i+0x168>
 80094ba:	2301      	movs	r3, #1
 80094bc:	4632      	mov	r2, r6
 80094be:	4649      	mov	r1, r9
 80094c0:	4640      	mov	r0, r8
 80094c2:	47d0      	blx	sl
 80094c4:	3001      	adds	r0, #1
 80094c6:	d09b      	beq.n	8009400 <_printf_i+0x164>
 80094c8:	3501      	adds	r5, #1
 80094ca:	68e3      	ldr	r3, [r4, #12]
 80094cc:	9903      	ldr	r1, [sp, #12]
 80094ce:	1a5b      	subs	r3, r3, r1
 80094d0:	42ab      	cmp	r3, r5
 80094d2:	dcf2      	bgt.n	80094ba <_printf_i+0x21e>
 80094d4:	e7eb      	b.n	80094ae <_printf_i+0x212>
 80094d6:	2500      	movs	r5, #0
 80094d8:	f104 0619 	add.w	r6, r4, #25
 80094dc:	e7f5      	b.n	80094ca <_printf_i+0x22e>
 80094de:	bf00      	nop
 80094e0:	0800d67e 	.word	0x0800d67e
 80094e4:	0800d68f 	.word	0x0800d68f

080094e8 <_scanf_float>:
 80094e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ec:	b087      	sub	sp, #28
 80094ee:	4617      	mov	r7, r2
 80094f0:	9303      	str	r3, [sp, #12]
 80094f2:	688b      	ldr	r3, [r1, #8]
 80094f4:	1e5a      	subs	r2, r3, #1
 80094f6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80094fa:	bf83      	ittte	hi
 80094fc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009500:	195b      	addhi	r3, r3, r5
 8009502:	9302      	strhi	r3, [sp, #8]
 8009504:	2300      	movls	r3, #0
 8009506:	bf86      	itte	hi
 8009508:	f240 135d 	movwhi	r3, #349	; 0x15d
 800950c:	608b      	strhi	r3, [r1, #8]
 800950e:	9302      	strls	r3, [sp, #8]
 8009510:	680b      	ldr	r3, [r1, #0]
 8009512:	468b      	mov	fp, r1
 8009514:	2500      	movs	r5, #0
 8009516:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800951a:	f84b 3b1c 	str.w	r3, [fp], #28
 800951e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009522:	4680      	mov	r8, r0
 8009524:	460c      	mov	r4, r1
 8009526:	465e      	mov	r6, fp
 8009528:	46aa      	mov	sl, r5
 800952a:	46a9      	mov	r9, r5
 800952c:	9501      	str	r5, [sp, #4]
 800952e:	68a2      	ldr	r2, [r4, #8]
 8009530:	b152      	cbz	r2, 8009548 <_scanf_float+0x60>
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	781b      	ldrb	r3, [r3, #0]
 8009536:	2b4e      	cmp	r3, #78	; 0x4e
 8009538:	d864      	bhi.n	8009604 <_scanf_float+0x11c>
 800953a:	2b40      	cmp	r3, #64	; 0x40
 800953c:	d83c      	bhi.n	80095b8 <_scanf_float+0xd0>
 800953e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009542:	b2c8      	uxtb	r0, r1
 8009544:	280e      	cmp	r0, #14
 8009546:	d93a      	bls.n	80095be <_scanf_float+0xd6>
 8009548:	f1b9 0f00 	cmp.w	r9, #0
 800954c:	d003      	beq.n	8009556 <_scanf_float+0x6e>
 800954e:	6823      	ldr	r3, [r4, #0]
 8009550:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009554:	6023      	str	r3, [r4, #0]
 8009556:	f10a 3aff 	add.w	sl, sl, #4294967295
 800955a:	f1ba 0f01 	cmp.w	sl, #1
 800955e:	f200 8113 	bhi.w	8009788 <_scanf_float+0x2a0>
 8009562:	455e      	cmp	r6, fp
 8009564:	f200 8105 	bhi.w	8009772 <_scanf_float+0x28a>
 8009568:	2501      	movs	r5, #1
 800956a:	4628      	mov	r0, r5
 800956c:	b007      	add	sp, #28
 800956e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009572:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009576:	2a0d      	cmp	r2, #13
 8009578:	d8e6      	bhi.n	8009548 <_scanf_float+0x60>
 800957a:	a101      	add	r1, pc, #4	; (adr r1, 8009580 <_scanf_float+0x98>)
 800957c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009580:	080096bf 	.word	0x080096bf
 8009584:	08009549 	.word	0x08009549
 8009588:	08009549 	.word	0x08009549
 800958c:	08009549 	.word	0x08009549
 8009590:	0800971f 	.word	0x0800971f
 8009594:	080096f7 	.word	0x080096f7
 8009598:	08009549 	.word	0x08009549
 800959c:	08009549 	.word	0x08009549
 80095a0:	080096cd 	.word	0x080096cd
 80095a4:	08009549 	.word	0x08009549
 80095a8:	08009549 	.word	0x08009549
 80095ac:	08009549 	.word	0x08009549
 80095b0:	08009549 	.word	0x08009549
 80095b4:	08009685 	.word	0x08009685
 80095b8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80095bc:	e7db      	b.n	8009576 <_scanf_float+0x8e>
 80095be:	290e      	cmp	r1, #14
 80095c0:	d8c2      	bhi.n	8009548 <_scanf_float+0x60>
 80095c2:	a001      	add	r0, pc, #4	; (adr r0, 80095c8 <_scanf_float+0xe0>)
 80095c4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80095c8:	08009677 	.word	0x08009677
 80095cc:	08009549 	.word	0x08009549
 80095d0:	08009677 	.word	0x08009677
 80095d4:	0800970b 	.word	0x0800970b
 80095d8:	08009549 	.word	0x08009549
 80095dc:	08009625 	.word	0x08009625
 80095e0:	08009661 	.word	0x08009661
 80095e4:	08009661 	.word	0x08009661
 80095e8:	08009661 	.word	0x08009661
 80095ec:	08009661 	.word	0x08009661
 80095f0:	08009661 	.word	0x08009661
 80095f4:	08009661 	.word	0x08009661
 80095f8:	08009661 	.word	0x08009661
 80095fc:	08009661 	.word	0x08009661
 8009600:	08009661 	.word	0x08009661
 8009604:	2b6e      	cmp	r3, #110	; 0x6e
 8009606:	d809      	bhi.n	800961c <_scanf_float+0x134>
 8009608:	2b60      	cmp	r3, #96	; 0x60
 800960a:	d8b2      	bhi.n	8009572 <_scanf_float+0x8a>
 800960c:	2b54      	cmp	r3, #84	; 0x54
 800960e:	d077      	beq.n	8009700 <_scanf_float+0x218>
 8009610:	2b59      	cmp	r3, #89	; 0x59
 8009612:	d199      	bne.n	8009548 <_scanf_float+0x60>
 8009614:	2d07      	cmp	r5, #7
 8009616:	d197      	bne.n	8009548 <_scanf_float+0x60>
 8009618:	2508      	movs	r5, #8
 800961a:	e029      	b.n	8009670 <_scanf_float+0x188>
 800961c:	2b74      	cmp	r3, #116	; 0x74
 800961e:	d06f      	beq.n	8009700 <_scanf_float+0x218>
 8009620:	2b79      	cmp	r3, #121	; 0x79
 8009622:	e7f6      	b.n	8009612 <_scanf_float+0x12a>
 8009624:	6821      	ldr	r1, [r4, #0]
 8009626:	05c8      	lsls	r0, r1, #23
 8009628:	d51a      	bpl.n	8009660 <_scanf_float+0x178>
 800962a:	9b02      	ldr	r3, [sp, #8]
 800962c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009630:	6021      	str	r1, [r4, #0]
 8009632:	f109 0901 	add.w	r9, r9, #1
 8009636:	b11b      	cbz	r3, 8009640 <_scanf_float+0x158>
 8009638:	3b01      	subs	r3, #1
 800963a:	3201      	adds	r2, #1
 800963c:	9302      	str	r3, [sp, #8]
 800963e:	60a2      	str	r2, [r4, #8]
 8009640:	68a3      	ldr	r3, [r4, #8]
 8009642:	3b01      	subs	r3, #1
 8009644:	60a3      	str	r3, [r4, #8]
 8009646:	6923      	ldr	r3, [r4, #16]
 8009648:	3301      	adds	r3, #1
 800964a:	6123      	str	r3, [r4, #16]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	3b01      	subs	r3, #1
 8009650:	2b00      	cmp	r3, #0
 8009652:	607b      	str	r3, [r7, #4]
 8009654:	f340 8084 	ble.w	8009760 <_scanf_float+0x278>
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	3301      	adds	r3, #1
 800965c:	603b      	str	r3, [r7, #0]
 800965e:	e766      	b.n	800952e <_scanf_float+0x46>
 8009660:	eb1a 0f05 	cmn.w	sl, r5
 8009664:	f47f af70 	bne.w	8009548 <_scanf_float+0x60>
 8009668:	6822      	ldr	r2, [r4, #0]
 800966a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800966e:	6022      	str	r2, [r4, #0]
 8009670:	f806 3b01 	strb.w	r3, [r6], #1
 8009674:	e7e4      	b.n	8009640 <_scanf_float+0x158>
 8009676:	6822      	ldr	r2, [r4, #0]
 8009678:	0610      	lsls	r0, r2, #24
 800967a:	f57f af65 	bpl.w	8009548 <_scanf_float+0x60>
 800967e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009682:	e7f4      	b.n	800966e <_scanf_float+0x186>
 8009684:	f1ba 0f00 	cmp.w	sl, #0
 8009688:	d10e      	bne.n	80096a8 <_scanf_float+0x1c0>
 800968a:	f1b9 0f00 	cmp.w	r9, #0
 800968e:	d10e      	bne.n	80096ae <_scanf_float+0x1c6>
 8009690:	6822      	ldr	r2, [r4, #0]
 8009692:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009696:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800969a:	d108      	bne.n	80096ae <_scanf_float+0x1c6>
 800969c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80096a0:	6022      	str	r2, [r4, #0]
 80096a2:	f04f 0a01 	mov.w	sl, #1
 80096a6:	e7e3      	b.n	8009670 <_scanf_float+0x188>
 80096a8:	f1ba 0f02 	cmp.w	sl, #2
 80096ac:	d055      	beq.n	800975a <_scanf_float+0x272>
 80096ae:	2d01      	cmp	r5, #1
 80096b0:	d002      	beq.n	80096b8 <_scanf_float+0x1d0>
 80096b2:	2d04      	cmp	r5, #4
 80096b4:	f47f af48 	bne.w	8009548 <_scanf_float+0x60>
 80096b8:	3501      	adds	r5, #1
 80096ba:	b2ed      	uxtb	r5, r5
 80096bc:	e7d8      	b.n	8009670 <_scanf_float+0x188>
 80096be:	f1ba 0f01 	cmp.w	sl, #1
 80096c2:	f47f af41 	bne.w	8009548 <_scanf_float+0x60>
 80096c6:	f04f 0a02 	mov.w	sl, #2
 80096ca:	e7d1      	b.n	8009670 <_scanf_float+0x188>
 80096cc:	b97d      	cbnz	r5, 80096ee <_scanf_float+0x206>
 80096ce:	f1b9 0f00 	cmp.w	r9, #0
 80096d2:	f47f af3c 	bne.w	800954e <_scanf_float+0x66>
 80096d6:	6822      	ldr	r2, [r4, #0]
 80096d8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80096dc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80096e0:	f47f af39 	bne.w	8009556 <_scanf_float+0x6e>
 80096e4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80096e8:	6022      	str	r2, [r4, #0]
 80096ea:	2501      	movs	r5, #1
 80096ec:	e7c0      	b.n	8009670 <_scanf_float+0x188>
 80096ee:	2d03      	cmp	r5, #3
 80096f0:	d0e2      	beq.n	80096b8 <_scanf_float+0x1d0>
 80096f2:	2d05      	cmp	r5, #5
 80096f4:	e7de      	b.n	80096b4 <_scanf_float+0x1cc>
 80096f6:	2d02      	cmp	r5, #2
 80096f8:	f47f af26 	bne.w	8009548 <_scanf_float+0x60>
 80096fc:	2503      	movs	r5, #3
 80096fe:	e7b7      	b.n	8009670 <_scanf_float+0x188>
 8009700:	2d06      	cmp	r5, #6
 8009702:	f47f af21 	bne.w	8009548 <_scanf_float+0x60>
 8009706:	2507      	movs	r5, #7
 8009708:	e7b2      	b.n	8009670 <_scanf_float+0x188>
 800970a:	6822      	ldr	r2, [r4, #0]
 800970c:	0591      	lsls	r1, r2, #22
 800970e:	f57f af1b 	bpl.w	8009548 <_scanf_float+0x60>
 8009712:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009716:	6022      	str	r2, [r4, #0]
 8009718:	f8cd 9004 	str.w	r9, [sp, #4]
 800971c:	e7a8      	b.n	8009670 <_scanf_float+0x188>
 800971e:	6822      	ldr	r2, [r4, #0]
 8009720:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009724:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009728:	d006      	beq.n	8009738 <_scanf_float+0x250>
 800972a:	0550      	lsls	r0, r2, #21
 800972c:	f57f af0c 	bpl.w	8009548 <_scanf_float+0x60>
 8009730:	f1b9 0f00 	cmp.w	r9, #0
 8009734:	f43f af0f 	beq.w	8009556 <_scanf_float+0x6e>
 8009738:	0591      	lsls	r1, r2, #22
 800973a:	bf58      	it	pl
 800973c:	9901      	ldrpl	r1, [sp, #4]
 800973e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009742:	bf58      	it	pl
 8009744:	eba9 0101 	subpl.w	r1, r9, r1
 8009748:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800974c:	bf58      	it	pl
 800974e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009752:	6022      	str	r2, [r4, #0]
 8009754:	f04f 0900 	mov.w	r9, #0
 8009758:	e78a      	b.n	8009670 <_scanf_float+0x188>
 800975a:	f04f 0a03 	mov.w	sl, #3
 800975e:	e787      	b.n	8009670 <_scanf_float+0x188>
 8009760:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009764:	4639      	mov	r1, r7
 8009766:	4640      	mov	r0, r8
 8009768:	4798      	blx	r3
 800976a:	2800      	cmp	r0, #0
 800976c:	f43f aedf 	beq.w	800952e <_scanf_float+0x46>
 8009770:	e6ea      	b.n	8009548 <_scanf_float+0x60>
 8009772:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009776:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800977a:	463a      	mov	r2, r7
 800977c:	4640      	mov	r0, r8
 800977e:	4798      	blx	r3
 8009780:	6923      	ldr	r3, [r4, #16]
 8009782:	3b01      	subs	r3, #1
 8009784:	6123      	str	r3, [r4, #16]
 8009786:	e6ec      	b.n	8009562 <_scanf_float+0x7a>
 8009788:	1e6b      	subs	r3, r5, #1
 800978a:	2b06      	cmp	r3, #6
 800978c:	d825      	bhi.n	80097da <_scanf_float+0x2f2>
 800978e:	2d02      	cmp	r5, #2
 8009790:	d836      	bhi.n	8009800 <_scanf_float+0x318>
 8009792:	455e      	cmp	r6, fp
 8009794:	f67f aee8 	bls.w	8009568 <_scanf_float+0x80>
 8009798:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800979c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80097a0:	463a      	mov	r2, r7
 80097a2:	4640      	mov	r0, r8
 80097a4:	4798      	blx	r3
 80097a6:	6923      	ldr	r3, [r4, #16]
 80097a8:	3b01      	subs	r3, #1
 80097aa:	6123      	str	r3, [r4, #16]
 80097ac:	e7f1      	b.n	8009792 <_scanf_float+0x2aa>
 80097ae:	9802      	ldr	r0, [sp, #8]
 80097b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80097b4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80097b8:	9002      	str	r0, [sp, #8]
 80097ba:	463a      	mov	r2, r7
 80097bc:	4640      	mov	r0, r8
 80097be:	4798      	blx	r3
 80097c0:	6923      	ldr	r3, [r4, #16]
 80097c2:	3b01      	subs	r3, #1
 80097c4:	6123      	str	r3, [r4, #16]
 80097c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80097ca:	fa5f fa8a 	uxtb.w	sl, sl
 80097ce:	f1ba 0f02 	cmp.w	sl, #2
 80097d2:	d1ec      	bne.n	80097ae <_scanf_float+0x2c6>
 80097d4:	3d03      	subs	r5, #3
 80097d6:	b2ed      	uxtb	r5, r5
 80097d8:	1b76      	subs	r6, r6, r5
 80097da:	6823      	ldr	r3, [r4, #0]
 80097dc:	05da      	lsls	r2, r3, #23
 80097de:	d52f      	bpl.n	8009840 <_scanf_float+0x358>
 80097e0:	055b      	lsls	r3, r3, #21
 80097e2:	d510      	bpl.n	8009806 <_scanf_float+0x31e>
 80097e4:	455e      	cmp	r6, fp
 80097e6:	f67f aebf 	bls.w	8009568 <_scanf_float+0x80>
 80097ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80097ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80097f2:	463a      	mov	r2, r7
 80097f4:	4640      	mov	r0, r8
 80097f6:	4798      	blx	r3
 80097f8:	6923      	ldr	r3, [r4, #16]
 80097fa:	3b01      	subs	r3, #1
 80097fc:	6123      	str	r3, [r4, #16]
 80097fe:	e7f1      	b.n	80097e4 <_scanf_float+0x2fc>
 8009800:	46aa      	mov	sl, r5
 8009802:	9602      	str	r6, [sp, #8]
 8009804:	e7df      	b.n	80097c6 <_scanf_float+0x2de>
 8009806:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800980a:	6923      	ldr	r3, [r4, #16]
 800980c:	2965      	cmp	r1, #101	; 0x65
 800980e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009812:	f106 35ff 	add.w	r5, r6, #4294967295
 8009816:	6123      	str	r3, [r4, #16]
 8009818:	d00c      	beq.n	8009834 <_scanf_float+0x34c>
 800981a:	2945      	cmp	r1, #69	; 0x45
 800981c:	d00a      	beq.n	8009834 <_scanf_float+0x34c>
 800981e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009822:	463a      	mov	r2, r7
 8009824:	4640      	mov	r0, r8
 8009826:	4798      	blx	r3
 8009828:	6923      	ldr	r3, [r4, #16]
 800982a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800982e:	3b01      	subs	r3, #1
 8009830:	1eb5      	subs	r5, r6, #2
 8009832:	6123      	str	r3, [r4, #16]
 8009834:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009838:	463a      	mov	r2, r7
 800983a:	4640      	mov	r0, r8
 800983c:	4798      	blx	r3
 800983e:	462e      	mov	r6, r5
 8009840:	6825      	ldr	r5, [r4, #0]
 8009842:	f015 0510 	ands.w	r5, r5, #16
 8009846:	d155      	bne.n	80098f4 <_scanf_float+0x40c>
 8009848:	7035      	strb	r5, [r6, #0]
 800984a:	6823      	ldr	r3, [r4, #0]
 800984c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009850:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009854:	d11b      	bne.n	800988e <_scanf_float+0x3a6>
 8009856:	9b01      	ldr	r3, [sp, #4]
 8009858:	454b      	cmp	r3, r9
 800985a:	eba3 0209 	sub.w	r2, r3, r9
 800985e:	d123      	bne.n	80098a8 <_scanf_float+0x3c0>
 8009860:	2200      	movs	r2, #0
 8009862:	4659      	mov	r1, fp
 8009864:	4640      	mov	r0, r8
 8009866:	f000 fe8b 	bl	800a580 <_strtod_r>
 800986a:	6822      	ldr	r2, [r4, #0]
 800986c:	9b03      	ldr	r3, [sp, #12]
 800986e:	f012 0f02 	tst.w	r2, #2
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4606      	mov	r6, r0
 8009876:	460f      	mov	r7, r1
 8009878:	d021      	beq.n	80098be <_scanf_float+0x3d6>
 800987a:	1d1a      	adds	r2, r3, #4
 800987c:	9903      	ldr	r1, [sp, #12]
 800987e:	600a      	str	r2, [r1, #0]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	e9c3 6700 	strd	r6, r7, [r3]
 8009886:	68e3      	ldr	r3, [r4, #12]
 8009888:	3301      	adds	r3, #1
 800988a:	60e3      	str	r3, [r4, #12]
 800988c:	e66d      	b.n	800956a <_scanf_float+0x82>
 800988e:	9b04      	ldr	r3, [sp, #16]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d0e5      	beq.n	8009860 <_scanf_float+0x378>
 8009894:	9905      	ldr	r1, [sp, #20]
 8009896:	230a      	movs	r3, #10
 8009898:	462a      	mov	r2, r5
 800989a:	3101      	adds	r1, #1
 800989c:	4640      	mov	r0, r8
 800989e:	f000 fef1 	bl	800a684 <_strtol_r>
 80098a2:	9b04      	ldr	r3, [sp, #16]
 80098a4:	9e05      	ldr	r6, [sp, #20]
 80098a6:	1ac2      	subs	r2, r0, r3
 80098a8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80098ac:	429e      	cmp	r6, r3
 80098ae:	bf28      	it	cs
 80098b0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80098b4:	4910      	ldr	r1, [pc, #64]	; (80098f8 <_scanf_float+0x410>)
 80098b6:	4630      	mov	r0, r6
 80098b8:	f000 f836 	bl	8009928 <siprintf>
 80098bc:	e7d0      	b.n	8009860 <_scanf_float+0x378>
 80098be:	f012 0f04 	tst.w	r2, #4
 80098c2:	f103 0204 	add.w	r2, r3, #4
 80098c6:	d1d9      	bne.n	800987c <_scanf_float+0x394>
 80098c8:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80098cc:	f8cc 2000 	str.w	r2, [ip]
 80098d0:	f8d3 8000 	ldr.w	r8, [r3]
 80098d4:	4602      	mov	r2, r0
 80098d6:	460b      	mov	r3, r1
 80098d8:	f7f7 f900 	bl	8000adc <__aeabi_dcmpun>
 80098dc:	b128      	cbz	r0, 80098ea <_scanf_float+0x402>
 80098de:	4807      	ldr	r0, [pc, #28]	; (80098fc <_scanf_float+0x414>)
 80098e0:	f000 f81e 	bl	8009920 <nanf>
 80098e4:	f8c8 0000 	str.w	r0, [r8]
 80098e8:	e7cd      	b.n	8009886 <_scanf_float+0x39e>
 80098ea:	4630      	mov	r0, r6
 80098ec:	4639      	mov	r1, r7
 80098ee:	f7f7 f953 	bl	8000b98 <__aeabi_d2f>
 80098f2:	e7f7      	b.n	80098e4 <_scanf_float+0x3fc>
 80098f4:	2500      	movs	r5, #0
 80098f6:	e638      	b.n	800956a <_scanf_float+0x82>
 80098f8:	0800d6a0 	.word	0x0800d6a0
 80098fc:	0800daa8 	.word	0x0800daa8

08009900 <_sbrk_r>:
 8009900:	b538      	push	{r3, r4, r5, lr}
 8009902:	4d06      	ldr	r5, [pc, #24]	; (800991c <_sbrk_r+0x1c>)
 8009904:	2300      	movs	r3, #0
 8009906:	4604      	mov	r4, r0
 8009908:	4608      	mov	r0, r1
 800990a:	602b      	str	r3, [r5, #0]
 800990c:	f7fa fa2a 	bl	8003d64 <_sbrk>
 8009910:	1c43      	adds	r3, r0, #1
 8009912:	d102      	bne.n	800991a <_sbrk_r+0x1a>
 8009914:	682b      	ldr	r3, [r5, #0]
 8009916:	b103      	cbz	r3, 800991a <_sbrk_r+0x1a>
 8009918:	6023      	str	r3, [r4, #0]
 800991a:	bd38      	pop	{r3, r4, r5, pc}
 800991c:	200005ec 	.word	0x200005ec

08009920 <nanf>:
 8009920:	4800      	ldr	r0, [pc, #0]	; (8009924 <nanf+0x4>)
 8009922:	4770      	bx	lr
 8009924:	7fc00000 	.word	0x7fc00000

08009928 <siprintf>:
 8009928:	b40e      	push	{r1, r2, r3}
 800992a:	b500      	push	{lr}
 800992c:	b09c      	sub	sp, #112	; 0x70
 800992e:	ab1d      	add	r3, sp, #116	; 0x74
 8009930:	9002      	str	r0, [sp, #8]
 8009932:	9006      	str	r0, [sp, #24]
 8009934:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009938:	4809      	ldr	r0, [pc, #36]	; (8009960 <siprintf+0x38>)
 800993a:	9107      	str	r1, [sp, #28]
 800993c:	9104      	str	r1, [sp, #16]
 800993e:	4909      	ldr	r1, [pc, #36]	; (8009964 <siprintf+0x3c>)
 8009940:	f853 2b04 	ldr.w	r2, [r3], #4
 8009944:	9105      	str	r1, [sp, #20]
 8009946:	6800      	ldr	r0, [r0, #0]
 8009948:	9301      	str	r3, [sp, #4]
 800994a:	a902      	add	r1, sp, #8
 800994c:	f002 fdbe 	bl	800c4cc <_svfiprintf_r>
 8009950:	9b02      	ldr	r3, [sp, #8]
 8009952:	2200      	movs	r2, #0
 8009954:	701a      	strb	r2, [r3, #0]
 8009956:	b01c      	add	sp, #112	; 0x70
 8009958:	f85d eb04 	ldr.w	lr, [sp], #4
 800995c:	b003      	add	sp, #12
 800995e:	4770      	bx	lr
 8009960:	20000010 	.word	0x20000010
 8009964:	ffff0208 	.word	0xffff0208

08009968 <sulp>:
 8009968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800996c:	460f      	mov	r7, r1
 800996e:	4690      	mov	r8, r2
 8009970:	f002 fbf4 	bl	800c15c <__ulp>
 8009974:	4604      	mov	r4, r0
 8009976:	460d      	mov	r5, r1
 8009978:	f1b8 0f00 	cmp.w	r8, #0
 800997c:	d011      	beq.n	80099a2 <sulp+0x3a>
 800997e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009982:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009986:	2b00      	cmp	r3, #0
 8009988:	dd0b      	ble.n	80099a2 <sulp+0x3a>
 800998a:	051b      	lsls	r3, r3, #20
 800998c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009990:	2400      	movs	r4, #0
 8009992:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009996:	4622      	mov	r2, r4
 8009998:	462b      	mov	r3, r5
 800999a:	f7f6 fe05 	bl	80005a8 <__aeabi_dmul>
 800999e:	4604      	mov	r4, r0
 80099a0:	460d      	mov	r5, r1
 80099a2:	4620      	mov	r0, r4
 80099a4:	4629      	mov	r1, r5
 80099a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099aa:	0000      	movs	r0, r0
 80099ac:	0000      	movs	r0, r0
	...

080099b0 <_strtod_l>:
 80099b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099b4:	b09f      	sub	sp, #124	; 0x7c
 80099b6:	469b      	mov	fp, r3
 80099b8:	2300      	movs	r3, #0
 80099ba:	931a      	str	r3, [sp, #104]	; 0x68
 80099bc:	4b9e      	ldr	r3, [pc, #632]	; (8009c38 <_strtod_l+0x288>)
 80099be:	9215      	str	r2, [sp, #84]	; 0x54
 80099c0:	681f      	ldr	r7, [r3, #0]
 80099c2:	4682      	mov	sl, r0
 80099c4:	4638      	mov	r0, r7
 80099c6:	460e      	mov	r6, r1
 80099c8:	f7f6 fbda 	bl	8000180 <strlen>
 80099cc:	f04f 0800 	mov.w	r8, #0
 80099d0:	4604      	mov	r4, r0
 80099d2:	f04f 0900 	mov.w	r9, #0
 80099d6:	9619      	str	r6, [sp, #100]	; 0x64
 80099d8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80099da:	781a      	ldrb	r2, [r3, #0]
 80099dc:	2a2b      	cmp	r2, #43	; 0x2b
 80099de:	d04c      	beq.n	8009a7a <_strtod_l+0xca>
 80099e0:	d83a      	bhi.n	8009a58 <_strtod_l+0xa8>
 80099e2:	2a0d      	cmp	r2, #13
 80099e4:	d833      	bhi.n	8009a4e <_strtod_l+0x9e>
 80099e6:	2a08      	cmp	r2, #8
 80099e8:	d833      	bhi.n	8009a52 <_strtod_l+0xa2>
 80099ea:	2a00      	cmp	r2, #0
 80099ec:	d03d      	beq.n	8009a6a <_strtod_l+0xba>
 80099ee:	2300      	movs	r3, #0
 80099f0:	930a      	str	r3, [sp, #40]	; 0x28
 80099f2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80099f4:	782b      	ldrb	r3, [r5, #0]
 80099f6:	2b30      	cmp	r3, #48	; 0x30
 80099f8:	f040 80aa 	bne.w	8009b50 <_strtod_l+0x1a0>
 80099fc:	786b      	ldrb	r3, [r5, #1]
 80099fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009a02:	2b58      	cmp	r3, #88	; 0x58
 8009a04:	d166      	bne.n	8009ad4 <_strtod_l+0x124>
 8009a06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a08:	9301      	str	r3, [sp, #4]
 8009a0a:	ab1a      	add	r3, sp, #104	; 0x68
 8009a0c:	9300      	str	r3, [sp, #0]
 8009a0e:	4a8b      	ldr	r2, [pc, #556]	; (8009c3c <_strtod_l+0x28c>)
 8009a10:	f8cd b008 	str.w	fp, [sp, #8]
 8009a14:	ab1b      	add	r3, sp, #108	; 0x6c
 8009a16:	a919      	add	r1, sp, #100	; 0x64
 8009a18:	4650      	mov	r0, sl
 8009a1a:	f001 fd13 	bl	800b444 <__gethex>
 8009a1e:	f010 0607 	ands.w	r6, r0, #7
 8009a22:	4604      	mov	r4, r0
 8009a24:	d005      	beq.n	8009a32 <_strtod_l+0x82>
 8009a26:	2e06      	cmp	r6, #6
 8009a28:	d129      	bne.n	8009a7e <_strtod_l+0xce>
 8009a2a:	3501      	adds	r5, #1
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	9519      	str	r5, [sp, #100]	; 0x64
 8009a30:	930a      	str	r3, [sp, #40]	; 0x28
 8009a32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	f040 858a 	bne.w	800a54e <_strtod_l+0xb9e>
 8009a3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a3c:	b1d3      	cbz	r3, 8009a74 <_strtod_l+0xc4>
 8009a3e:	4642      	mov	r2, r8
 8009a40:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009a44:	4610      	mov	r0, r2
 8009a46:	4619      	mov	r1, r3
 8009a48:	b01f      	add	sp, #124	; 0x7c
 8009a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a4e:	2a20      	cmp	r2, #32
 8009a50:	d1cd      	bne.n	80099ee <_strtod_l+0x3e>
 8009a52:	3301      	adds	r3, #1
 8009a54:	9319      	str	r3, [sp, #100]	; 0x64
 8009a56:	e7bf      	b.n	80099d8 <_strtod_l+0x28>
 8009a58:	2a2d      	cmp	r2, #45	; 0x2d
 8009a5a:	d1c8      	bne.n	80099ee <_strtod_l+0x3e>
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	920a      	str	r2, [sp, #40]	; 0x28
 8009a60:	1c5a      	adds	r2, r3, #1
 8009a62:	9219      	str	r2, [sp, #100]	; 0x64
 8009a64:	785b      	ldrb	r3, [r3, #1]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d1c3      	bne.n	80099f2 <_strtod_l+0x42>
 8009a6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a6c:	9619      	str	r6, [sp, #100]	; 0x64
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	f040 856b 	bne.w	800a54a <_strtod_l+0xb9a>
 8009a74:	4642      	mov	r2, r8
 8009a76:	464b      	mov	r3, r9
 8009a78:	e7e4      	b.n	8009a44 <_strtod_l+0x94>
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	e7ef      	b.n	8009a5e <_strtod_l+0xae>
 8009a7e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009a80:	b13a      	cbz	r2, 8009a92 <_strtod_l+0xe2>
 8009a82:	2135      	movs	r1, #53	; 0x35
 8009a84:	a81c      	add	r0, sp, #112	; 0x70
 8009a86:	f002 fc6d 	bl	800c364 <__copybits>
 8009a8a:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009a8c:	4650      	mov	r0, sl
 8009a8e:	f002 f839 	bl	800bb04 <_Bfree>
 8009a92:	3e01      	subs	r6, #1
 8009a94:	2e04      	cmp	r6, #4
 8009a96:	d806      	bhi.n	8009aa6 <_strtod_l+0xf6>
 8009a98:	e8df f006 	tbb	[pc, r6]
 8009a9c:	1714030a 	.word	0x1714030a
 8009aa0:	0a          	.byte	0x0a
 8009aa1:	00          	.byte	0x00
 8009aa2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8009aa6:	0721      	lsls	r1, r4, #28
 8009aa8:	d5c3      	bpl.n	8009a32 <_strtod_l+0x82>
 8009aaa:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8009aae:	e7c0      	b.n	8009a32 <_strtod_l+0x82>
 8009ab0:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8009ab4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009ab6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009aba:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009abe:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009ac2:	e7f0      	b.n	8009aa6 <_strtod_l+0xf6>
 8009ac4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009c40 <_strtod_l+0x290>
 8009ac8:	e7ed      	b.n	8009aa6 <_strtod_l+0xf6>
 8009aca:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009ace:	f04f 38ff 	mov.w	r8, #4294967295
 8009ad2:	e7e8      	b.n	8009aa6 <_strtod_l+0xf6>
 8009ad4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009ad6:	1c5a      	adds	r2, r3, #1
 8009ad8:	9219      	str	r2, [sp, #100]	; 0x64
 8009ada:	785b      	ldrb	r3, [r3, #1]
 8009adc:	2b30      	cmp	r3, #48	; 0x30
 8009ade:	d0f9      	beq.n	8009ad4 <_strtod_l+0x124>
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d0a6      	beq.n	8009a32 <_strtod_l+0x82>
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	9307      	str	r3, [sp, #28]
 8009ae8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009aea:	9308      	str	r3, [sp, #32]
 8009aec:	2300      	movs	r3, #0
 8009aee:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8009af2:	469b      	mov	fp, r3
 8009af4:	220a      	movs	r2, #10
 8009af6:	9819      	ldr	r0, [sp, #100]	; 0x64
 8009af8:	7805      	ldrb	r5, [r0, #0]
 8009afa:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8009afe:	b2d9      	uxtb	r1, r3
 8009b00:	2909      	cmp	r1, #9
 8009b02:	d927      	bls.n	8009b54 <_strtod_l+0x1a4>
 8009b04:	4622      	mov	r2, r4
 8009b06:	4639      	mov	r1, r7
 8009b08:	f002 fde6 	bl	800c6d8 <strncmp>
 8009b0c:	2800      	cmp	r0, #0
 8009b0e:	d033      	beq.n	8009b78 <_strtod_l+0x1c8>
 8009b10:	2000      	movs	r0, #0
 8009b12:	462a      	mov	r2, r5
 8009b14:	465c      	mov	r4, fp
 8009b16:	9004      	str	r0, [sp, #16]
 8009b18:	4603      	mov	r3, r0
 8009b1a:	2a65      	cmp	r2, #101	; 0x65
 8009b1c:	d001      	beq.n	8009b22 <_strtod_l+0x172>
 8009b1e:	2a45      	cmp	r2, #69	; 0x45
 8009b20:	d114      	bne.n	8009b4c <_strtod_l+0x19c>
 8009b22:	b91c      	cbnz	r4, 8009b2c <_strtod_l+0x17c>
 8009b24:	9a07      	ldr	r2, [sp, #28]
 8009b26:	4302      	orrs	r2, r0
 8009b28:	d09f      	beq.n	8009a6a <_strtod_l+0xba>
 8009b2a:	2400      	movs	r4, #0
 8009b2c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8009b2e:	1c72      	adds	r2, r6, #1
 8009b30:	9219      	str	r2, [sp, #100]	; 0x64
 8009b32:	7872      	ldrb	r2, [r6, #1]
 8009b34:	2a2b      	cmp	r2, #43	; 0x2b
 8009b36:	d079      	beq.n	8009c2c <_strtod_l+0x27c>
 8009b38:	2a2d      	cmp	r2, #45	; 0x2d
 8009b3a:	f000 8083 	beq.w	8009c44 <_strtod_l+0x294>
 8009b3e:	2700      	movs	r7, #0
 8009b40:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009b44:	2909      	cmp	r1, #9
 8009b46:	f240 8083 	bls.w	8009c50 <_strtod_l+0x2a0>
 8009b4a:	9619      	str	r6, [sp, #100]	; 0x64
 8009b4c:	2500      	movs	r5, #0
 8009b4e:	e09f      	b.n	8009c90 <_strtod_l+0x2e0>
 8009b50:	2300      	movs	r3, #0
 8009b52:	e7c8      	b.n	8009ae6 <_strtod_l+0x136>
 8009b54:	f1bb 0f08 	cmp.w	fp, #8
 8009b58:	bfd5      	itete	le
 8009b5a:	9906      	ldrle	r1, [sp, #24]
 8009b5c:	9905      	ldrgt	r1, [sp, #20]
 8009b5e:	fb02 3301 	mlale	r3, r2, r1, r3
 8009b62:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009b66:	f100 0001 	add.w	r0, r0, #1
 8009b6a:	bfd4      	ite	le
 8009b6c:	9306      	strle	r3, [sp, #24]
 8009b6e:	9305      	strgt	r3, [sp, #20]
 8009b70:	f10b 0b01 	add.w	fp, fp, #1
 8009b74:	9019      	str	r0, [sp, #100]	; 0x64
 8009b76:	e7be      	b.n	8009af6 <_strtod_l+0x146>
 8009b78:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009b7a:	191a      	adds	r2, r3, r4
 8009b7c:	9219      	str	r2, [sp, #100]	; 0x64
 8009b7e:	5d1a      	ldrb	r2, [r3, r4]
 8009b80:	f1bb 0f00 	cmp.w	fp, #0
 8009b84:	d036      	beq.n	8009bf4 <_strtod_l+0x244>
 8009b86:	9004      	str	r0, [sp, #16]
 8009b88:	465c      	mov	r4, fp
 8009b8a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009b8e:	2b09      	cmp	r3, #9
 8009b90:	d912      	bls.n	8009bb8 <_strtod_l+0x208>
 8009b92:	2301      	movs	r3, #1
 8009b94:	e7c1      	b.n	8009b1a <_strtod_l+0x16a>
 8009b96:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009b98:	1c5a      	adds	r2, r3, #1
 8009b9a:	9219      	str	r2, [sp, #100]	; 0x64
 8009b9c:	785a      	ldrb	r2, [r3, #1]
 8009b9e:	3001      	adds	r0, #1
 8009ba0:	2a30      	cmp	r2, #48	; 0x30
 8009ba2:	d0f8      	beq.n	8009b96 <_strtod_l+0x1e6>
 8009ba4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009ba8:	2b08      	cmp	r3, #8
 8009baa:	f200 84d5 	bhi.w	800a558 <_strtod_l+0xba8>
 8009bae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009bb0:	9004      	str	r0, [sp, #16]
 8009bb2:	2000      	movs	r0, #0
 8009bb4:	9308      	str	r3, [sp, #32]
 8009bb6:	4604      	mov	r4, r0
 8009bb8:	3a30      	subs	r2, #48	; 0x30
 8009bba:	f100 0301 	add.w	r3, r0, #1
 8009bbe:	d013      	beq.n	8009be8 <_strtod_l+0x238>
 8009bc0:	9904      	ldr	r1, [sp, #16]
 8009bc2:	4419      	add	r1, r3
 8009bc4:	9104      	str	r1, [sp, #16]
 8009bc6:	4623      	mov	r3, r4
 8009bc8:	1905      	adds	r5, r0, r4
 8009bca:	210a      	movs	r1, #10
 8009bcc:	42ab      	cmp	r3, r5
 8009bce:	d113      	bne.n	8009bf8 <_strtod_l+0x248>
 8009bd0:	1823      	adds	r3, r4, r0
 8009bd2:	2b08      	cmp	r3, #8
 8009bd4:	f104 0401 	add.w	r4, r4, #1
 8009bd8:	4404      	add	r4, r0
 8009bda:	dc1b      	bgt.n	8009c14 <_strtod_l+0x264>
 8009bdc:	9906      	ldr	r1, [sp, #24]
 8009bde:	230a      	movs	r3, #10
 8009be0:	fb03 2301 	mla	r3, r3, r1, r2
 8009be4:	9306      	str	r3, [sp, #24]
 8009be6:	2300      	movs	r3, #0
 8009be8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009bea:	1c51      	adds	r1, r2, #1
 8009bec:	9119      	str	r1, [sp, #100]	; 0x64
 8009bee:	7852      	ldrb	r2, [r2, #1]
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	e7ca      	b.n	8009b8a <_strtod_l+0x1da>
 8009bf4:	4658      	mov	r0, fp
 8009bf6:	e7d3      	b.n	8009ba0 <_strtod_l+0x1f0>
 8009bf8:	2b08      	cmp	r3, #8
 8009bfa:	dc04      	bgt.n	8009c06 <_strtod_l+0x256>
 8009bfc:	9f06      	ldr	r7, [sp, #24]
 8009bfe:	434f      	muls	r7, r1
 8009c00:	9706      	str	r7, [sp, #24]
 8009c02:	3301      	adds	r3, #1
 8009c04:	e7e2      	b.n	8009bcc <_strtod_l+0x21c>
 8009c06:	1c5f      	adds	r7, r3, #1
 8009c08:	2f10      	cmp	r7, #16
 8009c0a:	bfde      	ittt	le
 8009c0c:	9f05      	ldrle	r7, [sp, #20]
 8009c0e:	434f      	mulle	r7, r1
 8009c10:	9705      	strle	r7, [sp, #20]
 8009c12:	e7f6      	b.n	8009c02 <_strtod_l+0x252>
 8009c14:	2c10      	cmp	r4, #16
 8009c16:	bfdf      	itttt	le
 8009c18:	9905      	ldrle	r1, [sp, #20]
 8009c1a:	230a      	movle	r3, #10
 8009c1c:	fb03 2301 	mlale	r3, r3, r1, r2
 8009c20:	9305      	strle	r3, [sp, #20]
 8009c22:	e7e0      	b.n	8009be6 <_strtod_l+0x236>
 8009c24:	2300      	movs	r3, #0
 8009c26:	9304      	str	r3, [sp, #16]
 8009c28:	2301      	movs	r3, #1
 8009c2a:	e77b      	b.n	8009b24 <_strtod_l+0x174>
 8009c2c:	2700      	movs	r7, #0
 8009c2e:	1cb2      	adds	r2, r6, #2
 8009c30:	9219      	str	r2, [sp, #100]	; 0x64
 8009c32:	78b2      	ldrb	r2, [r6, #2]
 8009c34:	e784      	b.n	8009b40 <_strtod_l+0x190>
 8009c36:	bf00      	nop
 8009c38:	0800d8f0 	.word	0x0800d8f0
 8009c3c:	0800d6a8 	.word	0x0800d6a8
 8009c40:	7ff00000 	.word	0x7ff00000
 8009c44:	2701      	movs	r7, #1
 8009c46:	e7f2      	b.n	8009c2e <_strtod_l+0x27e>
 8009c48:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009c4a:	1c51      	adds	r1, r2, #1
 8009c4c:	9119      	str	r1, [sp, #100]	; 0x64
 8009c4e:	7852      	ldrb	r2, [r2, #1]
 8009c50:	2a30      	cmp	r2, #48	; 0x30
 8009c52:	d0f9      	beq.n	8009c48 <_strtod_l+0x298>
 8009c54:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009c58:	2908      	cmp	r1, #8
 8009c5a:	f63f af77 	bhi.w	8009b4c <_strtod_l+0x19c>
 8009c5e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8009c62:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009c64:	9209      	str	r2, [sp, #36]	; 0x24
 8009c66:	f04f 0e0a 	mov.w	lr, #10
 8009c6a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009c6c:	1c51      	adds	r1, r2, #1
 8009c6e:	9119      	str	r1, [sp, #100]	; 0x64
 8009c70:	7852      	ldrb	r2, [r2, #1]
 8009c72:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8009c76:	2d09      	cmp	r5, #9
 8009c78:	d935      	bls.n	8009ce6 <_strtod_l+0x336>
 8009c7a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009c7c:	1b49      	subs	r1, r1, r5
 8009c7e:	2908      	cmp	r1, #8
 8009c80:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8009c84:	dc02      	bgt.n	8009c8c <_strtod_l+0x2dc>
 8009c86:	4565      	cmp	r5, ip
 8009c88:	bfa8      	it	ge
 8009c8a:	4665      	movge	r5, ip
 8009c8c:	b107      	cbz	r7, 8009c90 <_strtod_l+0x2e0>
 8009c8e:	426d      	negs	r5, r5
 8009c90:	2c00      	cmp	r4, #0
 8009c92:	d14c      	bne.n	8009d2e <_strtod_l+0x37e>
 8009c94:	9907      	ldr	r1, [sp, #28]
 8009c96:	4301      	orrs	r1, r0
 8009c98:	f47f aecb 	bne.w	8009a32 <_strtod_l+0x82>
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	f47f aee4 	bne.w	8009a6a <_strtod_l+0xba>
 8009ca2:	2a69      	cmp	r2, #105	; 0x69
 8009ca4:	d026      	beq.n	8009cf4 <_strtod_l+0x344>
 8009ca6:	dc23      	bgt.n	8009cf0 <_strtod_l+0x340>
 8009ca8:	2a49      	cmp	r2, #73	; 0x49
 8009caa:	d023      	beq.n	8009cf4 <_strtod_l+0x344>
 8009cac:	2a4e      	cmp	r2, #78	; 0x4e
 8009cae:	f47f aedc 	bne.w	8009a6a <_strtod_l+0xba>
 8009cb2:	499d      	ldr	r1, [pc, #628]	; (8009f28 <_strtod_l+0x578>)
 8009cb4:	a819      	add	r0, sp, #100	; 0x64
 8009cb6:	f001 fe13 	bl	800b8e0 <__match>
 8009cba:	2800      	cmp	r0, #0
 8009cbc:	f43f aed5 	beq.w	8009a6a <_strtod_l+0xba>
 8009cc0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	2b28      	cmp	r3, #40	; 0x28
 8009cc6:	d12c      	bne.n	8009d22 <_strtod_l+0x372>
 8009cc8:	4998      	ldr	r1, [pc, #608]	; (8009f2c <_strtod_l+0x57c>)
 8009cca:	aa1c      	add	r2, sp, #112	; 0x70
 8009ccc:	a819      	add	r0, sp, #100	; 0x64
 8009cce:	f001 fe1b 	bl	800b908 <__hexnan>
 8009cd2:	2805      	cmp	r0, #5
 8009cd4:	d125      	bne.n	8009d22 <_strtod_l+0x372>
 8009cd6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009cd8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8009cdc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009ce0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009ce4:	e6a5      	b.n	8009a32 <_strtod_l+0x82>
 8009ce6:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8009cea:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8009cee:	e7bc      	b.n	8009c6a <_strtod_l+0x2ba>
 8009cf0:	2a6e      	cmp	r2, #110	; 0x6e
 8009cf2:	e7dc      	b.n	8009cae <_strtod_l+0x2fe>
 8009cf4:	498e      	ldr	r1, [pc, #568]	; (8009f30 <_strtod_l+0x580>)
 8009cf6:	a819      	add	r0, sp, #100	; 0x64
 8009cf8:	f001 fdf2 	bl	800b8e0 <__match>
 8009cfc:	2800      	cmp	r0, #0
 8009cfe:	f43f aeb4 	beq.w	8009a6a <_strtod_l+0xba>
 8009d02:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009d04:	498b      	ldr	r1, [pc, #556]	; (8009f34 <_strtod_l+0x584>)
 8009d06:	3b01      	subs	r3, #1
 8009d08:	a819      	add	r0, sp, #100	; 0x64
 8009d0a:	9319      	str	r3, [sp, #100]	; 0x64
 8009d0c:	f001 fde8 	bl	800b8e0 <__match>
 8009d10:	b910      	cbnz	r0, 8009d18 <_strtod_l+0x368>
 8009d12:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009d14:	3301      	adds	r3, #1
 8009d16:	9319      	str	r3, [sp, #100]	; 0x64
 8009d18:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8009f38 <_strtod_l+0x588>
 8009d1c:	f04f 0800 	mov.w	r8, #0
 8009d20:	e687      	b.n	8009a32 <_strtod_l+0x82>
 8009d22:	4886      	ldr	r0, [pc, #536]	; (8009f3c <_strtod_l+0x58c>)
 8009d24:	f002 fcd2 	bl	800c6cc <nan>
 8009d28:	4680      	mov	r8, r0
 8009d2a:	4689      	mov	r9, r1
 8009d2c:	e681      	b.n	8009a32 <_strtod_l+0x82>
 8009d2e:	9b04      	ldr	r3, [sp, #16]
 8009d30:	9806      	ldr	r0, [sp, #24]
 8009d32:	1aeb      	subs	r3, r5, r3
 8009d34:	f1bb 0f00 	cmp.w	fp, #0
 8009d38:	bf08      	it	eq
 8009d3a:	46a3      	moveq	fp, r4
 8009d3c:	2c10      	cmp	r4, #16
 8009d3e:	9307      	str	r3, [sp, #28]
 8009d40:	4626      	mov	r6, r4
 8009d42:	bfa8      	it	ge
 8009d44:	2610      	movge	r6, #16
 8009d46:	f7f6 fbb5 	bl	80004b4 <__aeabi_ui2d>
 8009d4a:	2c09      	cmp	r4, #9
 8009d4c:	4680      	mov	r8, r0
 8009d4e:	4689      	mov	r9, r1
 8009d50:	dd13      	ble.n	8009d7a <_strtod_l+0x3ca>
 8009d52:	4b7b      	ldr	r3, [pc, #492]	; (8009f40 <_strtod_l+0x590>)
 8009d54:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009d58:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009d5c:	f7f6 fc24 	bl	80005a8 <__aeabi_dmul>
 8009d60:	4680      	mov	r8, r0
 8009d62:	9805      	ldr	r0, [sp, #20]
 8009d64:	4689      	mov	r9, r1
 8009d66:	f7f6 fba5 	bl	80004b4 <__aeabi_ui2d>
 8009d6a:	4602      	mov	r2, r0
 8009d6c:	460b      	mov	r3, r1
 8009d6e:	4640      	mov	r0, r8
 8009d70:	4649      	mov	r1, r9
 8009d72:	f7f6 fa63 	bl	800023c <__adddf3>
 8009d76:	4680      	mov	r8, r0
 8009d78:	4689      	mov	r9, r1
 8009d7a:	2c0f      	cmp	r4, #15
 8009d7c:	dc36      	bgt.n	8009dec <_strtod_l+0x43c>
 8009d7e:	9b07      	ldr	r3, [sp, #28]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	f43f ae56 	beq.w	8009a32 <_strtod_l+0x82>
 8009d86:	dd22      	ble.n	8009dce <_strtod_l+0x41e>
 8009d88:	2b16      	cmp	r3, #22
 8009d8a:	dc09      	bgt.n	8009da0 <_strtod_l+0x3f0>
 8009d8c:	496c      	ldr	r1, [pc, #432]	; (8009f40 <_strtod_l+0x590>)
 8009d8e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009d92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d96:	4642      	mov	r2, r8
 8009d98:	464b      	mov	r3, r9
 8009d9a:	f7f6 fc05 	bl	80005a8 <__aeabi_dmul>
 8009d9e:	e7c3      	b.n	8009d28 <_strtod_l+0x378>
 8009da0:	9a07      	ldr	r2, [sp, #28]
 8009da2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8009da6:	4293      	cmp	r3, r2
 8009da8:	db20      	blt.n	8009dec <_strtod_l+0x43c>
 8009daa:	4d65      	ldr	r5, [pc, #404]	; (8009f40 <_strtod_l+0x590>)
 8009dac:	f1c4 040f 	rsb	r4, r4, #15
 8009db0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8009db4:	4642      	mov	r2, r8
 8009db6:	464b      	mov	r3, r9
 8009db8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009dbc:	f7f6 fbf4 	bl	80005a8 <__aeabi_dmul>
 8009dc0:	9b07      	ldr	r3, [sp, #28]
 8009dc2:	1b1c      	subs	r4, r3, r4
 8009dc4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009dc8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009dcc:	e7e5      	b.n	8009d9a <_strtod_l+0x3ea>
 8009dce:	9b07      	ldr	r3, [sp, #28]
 8009dd0:	3316      	adds	r3, #22
 8009dd2:	db0b      	blt.n	8009dec <_strtod_l+0x43c>
 8009dd4:	9b04      	ldr	r3, [sp, #16]
 8009dd6:	1b5d      	subs	r5, r3, r5
 8009dd8:	4b59      	ldr	r3, [pc, #356]	; (8009f40 <_strtod_l+0x590>)
 8009dda:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009dde:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009de2:	4640      	mov	r0, r8
 8009de4:	4649      	mov	r1, r9
 8009de6:	f7f6 fd09 	bl	80007fc <__aeabi_ddiv>
 8009dea:	e79d      	b.n	8009d28 <_strtod_l+0x378>
 8009dec:	9b07      	ldr	r3, [sp, #28]
 8009dee:	1ba6      	subs	r6, r4, r6
 8009df0:	441e      	add	r6, r3
 8009df2:	2e00      	cmp	r6, #0
 8009df4:	dd74      	ble.n	8009ee0 <_strtod_l+0x530>
 8009df6:	f016 030f 	ands.w	r3, r6, #15
 8009dfa:	d00a      	beq.n	8009e12 <_strtod_l+0x462>
 8009dfc:	4950      	ldr	r1, [pc, #320]	; (8009f40 <_strtod_l+0x590>)
 8009dfe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009e02:	4642      	mov	r2, r8
 8009e04:	464b      	mov	r3, r9
 8009e06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e0a:	f7f6 fbcd 	bl	80005a8 <__aeabi_dmul>
 8009e0e:	4680      	mov	r8, r0
 8009e10:	4689      	mov	r9, r1
 8009e12:	f036 060f 	bics.w	r6, r6, #15
 8009e16:	d052      	beq.n	8009ebe <_strtod_l+0x50e>
 8009e18:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8009e1c:	dd27      	ble.n	8009e6e <_strtod_l+0x4be>
 8009e1e:	f04f 0b00 	mov.w	fp, #0
 8009e22:	f8cd b010 	str.w	fp, [sp, #16]
 8009e26:	f8cd b020 	str.w	fp, [sp, #32]
 8009e2a:	f8cd b018 	str.w	fp, [sp, #24]
 8009e2e:	2322      	movs	r3, #34	; 0x22
 8009e30:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8009f38 <_strtod_l+0x588>
 8009e34:	f8ca 3000 	str.w	r3, [sl]
 8009e38:	f04f 0800 	mov.w	r8, #0
 8009e3c:	9b08      	ldr	r3, [sp, #32]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	f43f adf7 	beq.w	8009a32 <_strtod_l+0x82>
 8009e44:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009e46:	4650      	mov	r0, sl
 8009e48:	f001 fe5c 	bl	800bb04 <_Bfree>
 8009e4c:	9906      	ldr	r1, [sp, #24]
 8009e4e:	4650      	mov	r0, sl
 8009e50:	f001 fe58 	bl	800bb04 <_Bfree>
 8009e54:	9904      	ldr	r1, [sp, #16]
 8009e56:	4650      	mov	r0, sl
 8009e58:	f001 fe54 	bl	800bb04 <_Bfree>
 8009e5c:	9908      	ldr	r1, [sp, #32]
 8009e5e:	4650      	mov	r0, sl
 8009e60:	f001 fe50 	bl	800bb04 <_Bfree>
 8009e64:	4659      	mov	r1, fp
 8009e66:	4650      	mov	r0, sl
 8009e68:	f001 fe4c 	bl	800bb04 <_Bfree>
 8009e6c:	e5e1      	b.n	8009a32 <_strtod_l+0x82>
 8009e6e:	4b35      	ldr	r3, [pc, #212]	; (8009f44 <_strtod_l+0x594>)
 8009e70:	9305      	str	r3, [sp, #20]
 8009e72:	2300      	movs	r3, #0
 8009e74:	1136      	asrs	r6, r6, #4
 8009e76:	4640      	mov	r0, r8
 8009e78:	4649      	mov	r1, r9
 8009e7a:	461f      	mov	r7, r3
 8009e7c:	2e01      	cmp	r6, #1
 8009e7e:	dc21      	bgt.n	8009ec4 <_strtod_l+0x514>
 8009e80:	b10b      	cbz	r3, 8009e86 <_strtod_l+0x4d6>
 8009e82:	4680      	mov	r8, r0
 8009e84:	4689      	mov	r9, r1
 8009e86:	4b2f      	ldr	r3, [pc, #188]	; (8009f44 <_strtod_l+0x594>)
 8009e88:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009e8c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009e90:	4642      	mov	r2, r8
 8009e92:	464b      	mov	r3, r9
 8009e94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e98:	f7f6 fb86 	bl	80005a8 <__aeabi_dmul>
 8009e9c:	4b26      	ldr	r3, [pc, #152]	; (8009f38 <_strtod_l+0x588>)
 8009e9e:	460a      	mov	r2, r1
 8009ea0:	400b      	ands	r3, r1
 8009ea2:	4929      	ldr	r1, [pc, #164]	; (8009f48 <_strtod_l+0x598>)
 8009ea4:	428b      	cmp	r3, r1
 8009ea6:	4680      	mov	r8, r0
 8009ea8:	d8b9      	bhi.n	8009e1e <_strtod_l+0x46e>
 8009eaa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009eae:	428b      	cmp	r3, r1
 8009eb0:	bf86      	itte	hi
 8009eb2:	f8df 9098 	ldrhi.w	r9, [pc, #152]	; 8009f4c <_strtod_l+0x59c>
 8009eb6:	f04f 38ff 	movhi.w	r8, #4294967295
 8009eba:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	9305      	str	r3, [sp, #20]
 8009ec2:	e07f      	b.n	8009fc4 <_strtod_l+0x614>
 8009ec4:	07f2      	lsls	r2, r6, #31
 8009ec6:	d505      	bpl.n	8009ed4 <_strtod_l+0x524>
 8009ec8:	9b05      	ldr	r3, [sp, #20]
 8009eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ece:	f7f6 fb6b 	bl	80005a8 <__aeabi_dmul>
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	9a05      	ldr	r2, [sp, #20]
 8009ed6:	3208      	adds	r2, #8
 8009ed8:	3701      	adds	r7, #1
 8009eda:	1076      	asrs	r6, r6, #1
 8009edc:	9205      	str	r2, [sp, #20]
 8009ede:	e7cd      	b.n	8009e7c <_strtod_l+0x4cc>
 8009ee0:	d0ed      	beq.n	8009ebe <_strtod_l+0x50e>
 8009ee2:	4276      	negs	r6, r6
 8009ee4:	f016 020f 	ands.w	r2, r6, #15
 8009ee8:	d00a      	beq.n	8009f00 <_strtod_l+0x550>
 8009eea:	4b15      	ldr	r3, [pc, #84]	; (8009f40 <_strtod_l+0x590>)
 8009eec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ef0:	4640      	mov	r0, r8
 8009ef2:	4649      	mov	r1, r9
 8009ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef8:	f7f6 fc80 	bl	80007fc <__aeabi_ddiv>
 8009efc:	4680      	mov	r8, r0
 8009efe:	4689      	mov	r9, r1
 8009f00:	1136      	asrs	r6, r6, #4
 8009f02:	d0dc      	beq.n	8009ebe <_strtod_l+0x50e>
 8009f04:	2e1f      	cmp	r6, #31
 8009f06:	dd23      	ble.n	8009f50 <_strtod_l+0x5a0>
 8009f08:	f04f 0b00 	mov.w	fp, #0
 8009f0c:	f8cd b010 	str.w	fp, [sp, #16]
 8009f10:	f8cd b020 	str.w	fp, [sp, #32]
 8009f14:	f8cd b018 	str.w	fp, [sp, #24]
 8009f18:	2322      	movs	r3, #34	; 0x22
 8009f1a:	f04f 0800 	mov.w	r8, #0
 8009f1e:	f04f 0900 	mov.w	r9, #0
 8009f22:	f8ca 3000 	str.w	r3, [sl]
 8009f26:	e789      	b.n	8009e3c <_strtod_l+0x48c>
 8009f28:	0800d679 	.word	0x0800d679
 8009f2c:	0800d6bc 	.word	0x0800d6bc
 8009f30:	0800d671 	.word	0x0800d671
 8009f34:	0800d7fc 	.word	0x0800d7fc
 8009f38:	7ff00000 	.word	0x7ff00000
 8009f3c:	0800daa8 	.word	0x0800daa8
 8009f40:	0800d988 	.word	0x0800d988
 8009f44:	0800d960 	.word	0x0800d960
 8009f48:	7ca00000 	.word	0x7ca00000
 8009f4c:	7fefffff 	.word	0x7fefffff
 8009f50:	f016 0310 	ands.w	r3, r6, #16
 8009f54:	bf18      	it	ne
 8009f56:	236a      	movne	r3, #106	; 0x6a
 8009f58:	4fb1      	ldr	r7, [pc, #708]	; (800a220 <_strtod_l+0x870>)
 8009f5a:	9305      	str	r3, [sp, #20]
 8009f5c:	4640      	mov	r0, r8
 8009f5e:	4649      	mov	r1, r9
 8009f60:	2300      	movs	r3, #0
 8009f62:	07f2      	lsls	r2, r6, #31
 8009f64:	d504      	bpl.n	8009f70 <_strtod_l+0x5c0>
 8009f66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f6a:	f7f6 fb1d 	bl	80005a8 <__aeabi_dmul>
 8009f6e:	2301      	movs	r3, #1
 8009f70:	1076      	asrs	r6, r6, #1
 8009f72:	f107 0708 	add.w	r7, r7, #8
 8009f76:	d1f4      	bne.n	8009f62 <_strtod_l+0x5b2>
 8009f78:	b10b      	cbz	r3, 8009f7e <_strtod_l+0x5ce>
 8009f7a:	4680      	mov	r8, r0
 8009f7c:	4689      	mov	r9, r1
 8009f7e:	9b05      	ldr	r3, [sp, #20]
 8009f80:	b1c3      	cbz	r3, 8009fb4 <_strtod_l+0x604>
 8009f82:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009f86:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	4649      	mov	r1, r9
 8009f8e:	dd11      	ble.n	8009fb4 <_strtod_l+0x604>
 8009f90:	2b1f      	cmp	r3, #31
 8009f92:	f340 8124 	ble.w	800a1de <_strtod_l+0x82e>
 8009f96:	2b34      	cmp	r3, #52	; 0x34
 8009f98:	bfde      	ittt	le
 8009f9a:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009f9e:	f04f 33ff 	movle.w	r3, #4294967295
 8009fa2:	fa03 f202 	lslle.w	r2, r3, r2
 8009fa6:	f04f 0800 	mov.w	r8, #0
 8009faa:	bfcc      	ite	gt
 8009fac:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009fb0:	ea02 0901 	andle.w	r9, r2, r1
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	4640      	mov	r0, r8
 8009fba:	4649      	mov	r1, r9
 8009fbc:	f7f6 fd5c 	bl	8000a78 <__aeabi_dcmpeq>
 8009fc0:	2800      	cmp	r0, #0
 8009fc2:	d1a1      	bne.n	8009f08 <_strtod_l+0x558>
 8009fc4:	9b06      	ldr	r3, [sp, #24]
 8009fc6:	9300      	str	r3, [sp, #0]
 8009fc8:	9908      	ldr	r1, [sp, #32]
 8009fca:	4623      	mov	r3, r4
 8009fcc:	465a      	mov	r2, fp
 8009fce:	4650      	mov	r0, sl
 8009fd0:	f001 fe00 	bl	800bbd4 <__s2b>
 8009fd4:	9008      	str	r0, [sp, #32]
 8009fd6:	2800      	cmp	r0, #0
 8009fd8:	f43f af21 	beq.w	8009e1e <_strtod_l+0x46e>
 8009fdc:	9b04      	ldr	r3, [sp, #16]
 8009fde:	1b5d      	subs	r5, r3, r5
 8009fe0:	9b07      	ldr	r3, [sp, #28]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	bfb4      	ite	lt
 8009fe6:	462b      	movlt	r3, r5
 8009fe8:	2300      	movge	r3, #0
 8009fea:	930e      	str	r3, [sp, #56]	; 0x38
 8009fec:	9b07      	ldr	r3, [sp, #28]
 8009fee:	f04f 0b00 	mov.w	fp, #0
 8009ff2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009ff6:	9314      	str	r3, [sp, #80]	; 0x50
 8009ff8:	f8cd b010 	str.w	fp, [sp, #16]
 8009ffc:	9b08      	ldr	r3, [sp, #32]
 8009ffe:	4650      	mov	r0, sl
 800a000:	6859      	ldr	r1, [r3, #4]
 800a002:	f001 fd3f 	bl	800ba84 <_Balloc>
 800a006:	9006      	str	r0, [sp, #24]
 800a008:	2800      	cmp	r0, #0
 800a00a:	f43f af10 	beq.w	8009e2e <_strtod_l+0x47e>
 800a00e:	9b08      	ldr	r3, [sp, #32]
 800a010:	691a      	ldr	r2, [r3, #16]
 800a012:	3202      	adds	r2, #2
 800a014:	f103 010c 	add.w	r1, r3, #12
 800a018:	0092      	lsls	r2, r2, #2
 800a01a:	300c      	adds	r0, #12
 800a01c:	f7fe fd14 	bl	8008a48 <memcpy>
 800a020:	ab1c      	add	r3, sp, #112	; 0x70
 800a022:	9301      	str	r3, [sp, #4]
 800a024:	ab1b      	add	r3, sp, #108	; 0x6c
 800a026:	9300      	str	r3, [sp, #0]
 800a028:	4642      	mov	r2, r8
 800a02a:	464b      	mov	r3, r9
 800a02c:	4650      	mov	r0, sl
 800a02e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800a032:	f002 f90d 	bl	800c250 <__d2b>
 800a036:	901a      	str	r0, [sp, #104]	; 0x68
 800a038:	2800      	cmp	r0, #0
 800a03a:	f43f aef8 	beq.w	8009e2e <_strtod_l+0x47e>
 800a03e:	2101      	movs	r1, #1
 800a040:	4650      	mov	r0, sl
 800a042:	f001 fe5f 	bl	800bd04 <__i2b>
 800a046:	9004      	str	r0, [sp, #16]
 800a048:	4603      	mov	r3, r0
 800a04a:	2800      	cmp	r0, #0
 800a04c:	f43f aeef 	beq.w	8009e2e <_strtod_l+0x47e>
 800a050:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a052:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a054:	2d00      	cmp	r5, #0
 800a056:	bfab      	itete	ge
 800a058:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800a05a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800a05c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800a05e:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800a060:	bfac      	ite	ge
 800a062:	18ee      	addge	r6, r5, r3
 800a064:	1b5c      	sublt	r4, r3, r5
 800a066:	9b05      	ldr	r3, [sp, #20]
 800a068:	1aed      	subs	r5, r5, r3
 800a06a:	4415      	add	r5, r2
 800a06c:	4b6d      	ldr	r3, [pc, #436]	; (800a224 <_strtod_l+0x874>)
 800a06e:	3d01      	subs	r5, #1
 800a070:	429d      	cmp	r5, r3
 800a072:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a076:	f280 80c4 	bge.w	800a202 <_strtod_l+0x852>
 800a07a:	1b5b      	subs	r3, r3, r5
 800a07c:	2b1f      	cmp	r3, #31
 800a07e:	eba2 0203 	sub.w	r2, r2, r3
 800a082:	f04f 0701 	mov.w	r7, #1
 800a086:	f300 80b1 	bgt.w	800a1ec <_strtod_l+0x83c>
 800a08a:	fa07 f303 	lsl.w	r3, r7, r3
 800a08e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a090:	2500      	movs	r5, #0
 800a092:	18b7      	adds	r7, r6, r2
 800a094:	9b05      	ldr	r3, [sp, #20]
 800a096:	42be      	cmp	r6, r7
 800a098:	4414      	add	r4, r2
 800a09a:	441c      	add	r4, r3
 800a09c:	4633      	mov	r3, r6
 800a09e:	bfa8      	it	ge
 800a0a0:	463b      	movge	r3, r7
 800a0a2:	42a3      	cmp	r3, r4
 800a0a4:	bfa8      	it	ge
 800a0a6:	4623      	movge	r3, r4
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	bfc2      	ittt	gt
 800a0ac:	1aff      	subgt	r7, r7, r3
 800a0ae:	1ae4      	subgt	r4, r4, r3
 800a0b0:	1af6      	subgt	r6, r6, r3
 800a0b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	dd17      	ble.n	800a0e8 <_strtod_l+0x738>
 800a0b8:	9904      	ldr	r1, [sp, #16]
 800a0ba:	461a      	mov	r2, r3
 800a0bc:	4650      	mov	r0, sl
 800a0be:	f001 fedf 	bl	800be80 <__pow5mult>
 800a0c2:	9004      	str	r0, [sp, #16]
 800a0c4:	2800      	cmp	r0, #0
 800a0c6:	f43f aeb2 	beq.w	8009e2e <_strtod_l+0x47e>
 800a0ca:	4601      	mov	r1, r0
 800a0cc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a0ce:	4650      	mov	r0, sl
 800a0d0:	f001 fe2e 	bl	800bd30 <__multiply>
 800a0d4:	9009      	str	r0, [sp, #36]	; 0x24
 800a0d6:	2800      	cmp	r0, #0
 800a0d8:	f43f aea9 	beq.w	8009e2e <_strtod_l+0x47e>
 800a0dc:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a0de:	4650      	mov	r0, sl
 800a0e0:	f001 fd10 	bl	800bb04 <_Bfree>
 800a0e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0e6:	931a      	str	r3, [sp, #104]	; 0x68
 800a0e8:	2f00      	cmp	r7, #0
 800a0ea:	f300 808e 	bgt.w	800a20a <_strtod_l+0x85a>
 800a0ee:	9b07      	ldr	r3, [sp, #28]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	dd08      	ble.n	800a106 <_strtod_l+0x756>
 800a0f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a0f6:	9906      	ldr	r1, [sp, #24]
 800a0f8:	4650      	mov	r0, sl
 800a0fa:	f001 fec1 	bl	800be80 <__pow5mult>
 800a0fe:	9006      	str	r0, [sp, #24]
 800a100:	2800      	cmp	r0, #0
 800a102:	f43f ae94 	beq.w	8009e2e <_strtod_l+0x47e>
 800a106:	2c00      	cmp	r4, #0
 800a108:	dd08      	ble.n	800a11c <_strtod_l+0x76c>
 800a10a:	9906      	ldr	r1, [sp, #24]
 800a10c:	4622      	mov	r2, r4
 800a10e:	4650      	mov	r0, sl
 800a110:	f001 ff10 	bl	800bf34 <__lshift>
 800a114:	9006      	str	r0, [sp, #24]
 800a116:	2800      	cmp	r0, #0
 800a118:	f43f ae89 	beq.w	8009e2e <_strtod_l+0x47e>
 800a11c:	2e00      	cmp	r6, #0
 800a11e:	dd08      	ble.n	800a132 <_strtod_l+0x782>
 800a120:	9904      	ldr	r1, [sp, #16]
 800a122:	4632      	mov	r2, r6
 800a124:	4650      	mov	r0, sl
 800a126:	f001 ff05 	bl	800bf34 <__lshift>
 800a12a:	9004      	str	r0, [sp, #16]
 800a12c:	2800      	cmp	r0, #0
 800a12e:	f43f ae7e 	beq.w	8009e2e <_strtod_l+0x47e>
 800a132:	9a06      	ldr	r2, [sp, #24]
 800a134:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a136:	4650      	mov	r0, sl
 800a138:	f001 ff88 	bl	800c04c <__mdiff>
 800a13c:	4683      	mov	fp, r0
 800a13e:	2800      	cmp	r0, #0
 800a140:	f43f ae75 	beq.w	8009e2e <_strtod_l+0x47e>
 800a144:	2400      	movs	r4, #0
 800a146:	68c3      	ldr	r3, [r0, #12]
 800a148:	9904      	ldr	r1, [sp, #16]
 800a14a:	60c4      	str	r4, [r0, #12]
 800a14c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a14e:	f001 ff61 	bl	800c014 <__mcmp>
 800a152:	42a0      	cmp	r0, r4
 800a154:	da6c      	bge.n	800a230 <_strtod_l+0x880>
 800a156:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a158:	ea53 0308 	orrs.w	r3, r3, r8
 800a15c:	f040 8092 	bne.w	800a284 <_strtod_l+0x8d4>
 800a160:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a164:	2b00      	cmp	r3, #0
 800a166:	f040 808d 	bne.w	800a284 <_strtod_l+0x8d4>
 800a16a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a16e:	0d1b      	lsrs	r3, r3, #20
 800a170:	051b      	lsls	r3, r3, #20
 800a172:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a176:	f240 8085 	bls.w	800a284 <_strtod_l+0x8d4>
 800a17a:	f8db 3014 	ldr.w	r3, [fp, #20]
 800a17e:	b91b      	cbnz	r3, 800a188 <_strtod_l+0x7d8>
 800a180:	f8db 3010 	ldr.w	r3, [fp, #16]
 800a184:	2b01      	cmp	r3, #1
 800a186:	dd7d      	ble.n	800a284 <_strtod_l+0x8d4>
 800a188:	4659      	mov	r1, fp
 800a18a:	2201      	movs	r2, #1
 800a18c:	4650      	mov	r0, sl
 800a18e:	f001 fed1 	bl	800bf34 <__lshift>
 800a192:	9904      	ldr	r1, [sp, #16]
 800a194:	4683      	mov	fp, r0
 800a196:	f001 ff3d 	bl	800c014 <__mcmp>
 800a19a:	2800      	cmp	r0, #0
 800a19c:	dd72      	ble.n	800a284 <_strtod_l+0x8d4>
 800a19e:	9905      	ldr	r1, [sp, #20]
 800a1a0:	4a21      	ldr	r2, [pc, #132]	; (800a228 <_strtod_l+0x878>)
 800a1a2:	464b      	mov	r3, r9
 800a1a4:	2900      	cmp	r1, #0
 800a1a6:	f000 808d 	beq.w	800a2c4 <_strtod_l+0x914>
 800a1aa:	ea02 0109 	and.w	r1, r2, r9
 800a1ae:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a1b2:	f300 8087 	bgt.w	800a2c4 <_strtod_l+0x914>
 800a1b6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a1ba:	f77f aead 	ble.w	8009f18 <_strtod_l+0x568>
 800a1be:	4b1b      	ldr	r3, [pc, #108]	; (800a22c <_strtod_l+0x87c>)
 800a1c0:	4640      	mov	r0, r8
 800a1c2:	4649      	mov	r1, r9
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	f7f6 f9ef 	bl	80005a8 <__aeabi_dmul>
 800a1ca:	460b      	mov	r3, r1
 800a1cc:	4303      	orrs	r3, r0
 800a1ce:	bf08      	it	eq
 800a1d0:	2322      	moveq	r3, #34	; 0x22
 800a1d2:	4680      	mov	r8, r0
 800a1d4:	4689      	mov	r9, r1
 800a1d6:	bf08      	it	eq
 800a1d8:	f8ca 3000 	streq.w	r3, [sl]
 800a1dc:	e632      	b.n	8009e44 <_strtod_l+0x494>
 800a1de:	f04f 32ff 	mov.w	r2, #4294967295
 800a1e2:	fa02 f303 	lsl.w	r3, r2, r3
 800a1e6:	ea03 0808 	and.w	r8, r3, r8
 800a1ea:	e6e3      	b.n	8009fb4 <_strtod_l+0x604>
 800a1ec:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800a1f0:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800a1f4:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800a1f8:	35e2      	adds	r5, #226	; 0xe2
 800a1fa:	fa07 f505 	lsl.w	r5, r7, r5
 800a1fe:	970f      	str	r7, [sp, #60]	; 0x3c
 800a200:	e747      	b.n	800a092 <_strtod_l+0x6e2>
 800a202:	2301      	movs	r3, #1
 800a204:	2500      	movs	r5, #0
 800a206:	930f      	str	r3, [sp, #60]	; 0x3c
 800a208:	e743      	b.n	800a092 <_strtod_l+0x6e2>
 800a20a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a20c:	463a      	mov	r2, r7
 800a20e:	4650      	mov	r0, sl
 800a210:	f001 fe90 	bl	800bf34 <__lshift>
 800a214:	901a      	str	r0, [sp, #104]	; 0x68
 800a216:	2800      	cmp	r0, #0
 800a218:	f47f af69 	bne.w	800a0ee <_strtod_l+0x73e>
 800a21c:	e607      	b.n	8009e2e <_strtod_l+0x47e>
 800a21e:	bf00      	nop
 800a220:	0800d6d0 	.word	0x0800d6d0
 800a224:	fffffc02 	.word	0xfffffc02
 800a228:	7ff00000 	.word	0x7ff00000
 800a22c:	39500000 	.word	0x39500000
 800a230:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a234:	d165      	bne.n	800a302 <_strtod_l+0x952>
 800a236:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a238:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a23c:	b35a      	cbz	r2, 800a296 <_strtod_l+0x8e6>
 800a23e:	4a9a      	ldr	r2, [pc, #616]	; (800a4a8 <_strtod_l+0xaf8>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d12b      	bne.n	800a29c <_strtod_l+0x8ec>
 800a244:	9b05      	ldr	r3, [sp, #20]
 800a246:	4641      	mov	r1, r8
 800a248:	b303      	cbz	r3, 800a28c <_strtod_l+0x8dc>
 800a24a:	4b98      	ldr	r3, [pc, #608]	; (800a4ac <_strtod_l+0xafc>)
 800a24c:	464a      	mov	r2, r9
 800a24e:	4013      	ands	r3, r2
 800a250:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a254:	f04f 32ff 	mov.w	r2, #4294967295
 800a258:	d81b      	bhi.n	800a292 <_strtod_l+0x8e2>
 800a25a:	0d1b      	lsrs	r3, r3, #20
 800a25c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a260:	fa02 f303 	lsl.w	r3, r2, r3
 800a264:	4299      	cmp	r1, r3
 800a266:	d119      	bne.n	800a29c <_strtod_l+0x8ec>
 800a268:	4b91      	ldr	r3, [pc, #580]	; (800a4b0 <_strtod_l+0xb00>)
 800a26a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a26c:	429a      	cmp	r2, r3
 800a26e:	d102      	bne.n	800a276 <_strtod_l+0x8c6>
 800a270:	3101      	adds	r1, #1
 800a272:	f43f addc 	beq.w	8009e2e <_strtod_l+0x47e>
 800a276:	4b8d      	ldr	r3, [pc, #564]	; (800a4ac <_strtod_l+0xafc>)
 800a278:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a27a:	401a      	ands	r2, r3
 800a27c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800a280:	f04f 0800 	mov.w	r8, #0
 800a284:	9b05      	ldr	r3, [sp, #20]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d199      	bne.n	800a1be <_strtod_l+0x80e>
 800a28a:	e5db      	b.n	8009e44 <_strtod_l+0x494>
 800a28c:	f04f 33ff 	mov.w	r3, #4294967295
 800a290:	e7e8      	b.n	800a264 <_strtod_l+0x8b4>
 800a292:	4613      	mov	r3, r2
 800a294:	e7e6      	b.n	800a264 <_strtod_l+0x8b4>
 800a296:	ea53 0308 	orrs.w	r3, r3, r8
 800a29a:	d080      	beq.n	800a19e <_strtod_l+0x7ee>
 800a29c:	b1e5      	cbz	r5, 800a2d8 <_strtod_l+0x928>
 800a29e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2a0:	421d      	tst	r5, r3
 800a2a2:	d0ef      	beq.n	800a284 <_strtod_l+0x8d4>
 800a2a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2a6:	9a05      	ldr	r2, [sp, #20]
 800a2a8:	4640      	mov	r0, r8
 800a2aa:	4649      	mov	r1, r9
 800a2ac:	b1c3      	cbz	r3, 800a2e0 <_strtod_l+0x930>
 800a2ae:	f7ff fb5b 	bl	8009968 <sulp>
 800a2b2:	4602      	mov	r2, r0
 800a2b4:	460b      	mov	r3, r1
 800a2b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a2ba:	f7f5 ffbf 	bl	800023c <__adddf3>
 800a2be:	4680      	mov	r8, r0
 800a2c0:	4689      	mov	r9, r1
 800a2c2:	e7df      	b.n	800a284 <_strtod_l+0x8d4>
 800a2c4:	4013      	ands	r3, r2
 800a2c6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a2ca:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a2ce:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a2d2:	f04f 38ff 	mov.w	r8, #4294967295
 800a2d6:	e7d5      	b.n	800a284 <_strtod_l+0x8d4>
 800a2d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a2da:	ea13 0f08 	tst.w	r3, r8
 800a2de:	e7e0      	b.n	800a2a2 <_strtod_l+0x8f2>
 800a2e0:	f7ff fb42 	bl	8009968 <sulp>
 800a2e4:	4602      	mov	r2, r0
 800a2e6:	460b      	mov	r3, r1
 800a2e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a2ec:	f7f5 ffa4 	bl	8000238 <__aeabi_dsub>
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	4680      	mov	r8, r0
 800a2f6:	4689      	mov	r9, r1
 800a2f8:	f7f6 fbbe 	bl	8000a78 <__aeabi_dcmpeq>
 800a2fc:	2800      	cmp	r0, #0
 800a2fe:	d0c1      	beq.n	800a284 <_strtod_l+0x8d4>
 800a300:	e60a      	b.n	8009f18 <_strtod_l+0x568>
 800a302:	9904      	ldr	r1, [sp, #16]
 800a304:	4658      	mov	r0, fp
 800a306:	f001 ffff 	bl	800c308 <__ratio>
 800a30a:	2200      	movs	r2, #0
 800a30c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a310:	4606      	mov	r6, r0
 800a312:	460f      	mov	r7, r1
 800a314:	f7f6 fbc4 	bl	8000aa0 <__aeabi_dcmple>
 800a318:	2800      	cmp	r0, #0
 800a31a:	d070      	beq.n	800a3fe <_strtod_l+0xa4e>
 800a31c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d042      	beq.n	800a3a8 <_strtod_l+0x9f8>
 800a322:	4f64      	ldr	r7, [pc, #400]	; (800a4b4 <_strtod_l+0xb04>)
 800a324:	2600      	movs	r6, #0
 800a326:	4d63      	ldr	r5, [pc, #396]	; (800a4b4 <_strtod_l+0xb04>)
 800a328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a32a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a32e:	0d1b      	lsrs	r3, r3, #20
 800a330:	051b      	lsls	r3, r3, #20
 800a332:	930f      	str	r3, [sp, #60]	; 0x3c
 800a334:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a336:	4b60      	ldr	r3, [pc, #384]	; (800a4b8 <_strtod_l+0xb08>)
 800a338:	429a      	cmp	r2, r3
 800a33a:	f040 80c5 	bne.w	800a4c8 <_strtod_l+0xb18>
 800a33e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a340:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800a344:	4640      	mov	r0, r8
 800a346:	4649      	mov	r1, r9
 800a348:	f001 ff08 	bl	800c15c <__ulp>
 800a34c:	4602      	mov	r2, r0
 800a34e:	460b      	mov	r3, r1
 800a350:	4630      	mov	r0, r6
 800a352:	4639      	mov	r1, r7
 800a354:	f7f6 f928 	bl	80005a8 <__aeabi_dmul>
 800a358:	4642      	mov	r2, r8
 800a35a:	464b      	mov	r3, r9
 800a35c:	f7f5 ff6e 	bl	800023c <__adddf3>
 800a360:	460b      	mov	r3, r1
 800a362:	4952      	ldr	r1, [pc, #328]	; (800a4ac <_strtod_l+0xafc>)
 800a364:	4a55      	ldr	r2, [pc, #340]	; (800a4bc <_strtod_l+0xb0c>)
 800a366:	4019      	ands	r1, r3
 800a368:	4291      	cmp	r1, r2
 800a36a:	4680      	mov	r8, r0
 800a36c:	d95d      	bls.n	800a42a <_strtod_l+0xa7a>
 800a36e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a370:	4b4f      	ldr	r3, [pc, #316]	; (800a4b0 <_strtod_l+0xb00>)
 800a372:	429a      	cmp	r2, r3
 800a374:	d103      	bne.n	800a37e <_strtod_l+0x9ce>
 800a376:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a378:	3301      	adds	r3, #1
 800a37a:	f43f ad58 	beq.w	8009e2e <_strtod_l+0x47e>
 800a37e:	f8df 9130 	ldr.w	r9, [pc, #304]	; 800a4b0 <_strtod_l+0xb00>
 800a382:	f04f 38ff 	mov.w	r8, #4294967295
 800a386:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a388:	4650      	mov	r0, sl
 800a38a:	f001 fbbb 	bl	800bb04 <_Bfree>
 800a38e:	9906      	ldr	r1, [sp, #24]
 800a390:	4650      	mov	r0, sl
 800a392:	f001 fbb7 	bl	800bb04 <_Bfree>
 800a396:	9904      	ldr	r1, [sp, #16]
 800a398:	4650      	mov	r0, sl
 800a39a:	f001 fbb3 	bl	800bb04 <_Bfree>
 800a39e:	4659      	mov	r1, fp
 800a3a0:	4650      	mov	r0, sl
 800a3a2:	f001 fbaf 	bl	800bb04 <_Bfree>
 800a3a6:	e629      	b.n	8009ffc <_strtod_l+0x64c>
 800a3a8:	f1b8 0f00 	cmp.w	r8, #0
 800a3ac:	d119      	bne.n	800a3e2 <_strtod_l+0xa32>
 800a3ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a3b4:	b9e3      	cbnz	r3, 800a3f0 <_strtod_l+0xa40>
 800a3b6:	4b3f      	ldr	r3, [pc, #252]	; (800a4b4 <_strtod_l+0xb04>)
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	4630      	mov	r0, r6
 800a3bc:	4639      	mov	r1, r7
 800a3be:	f7f6 fb65 	bl	8000a8c <__aeabi_dcmplt>
 800a3c2:	b9c8      	cbnz	r0, 800a3f8 <_strtod_l+0xa48>
 800a3c4:	4b3e      	ldr	r3, [pc, #248]	; (800a4c0 <_strtod_l+0xb10>)
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	4630      	mov	r0, r6
 800a3ca:	4639      	mov	r1, r7
 800a3cc:	f7f6 f8ec 	bl	80005a8 <__aeabi_dmul>
 800a3d0:	4604      	mov	r4, r0
 800a3d2:	460d      	mov	r5, r1
 800a3d4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a3d8:	9416      	str	r4, [sp, #88]	; 0x58
 800a3da:	9317      	str	r3, [sp, #92]	; 0x5c
 800a3dc:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800a3e0:	e7a2      	b.n	800a328 <_strtod_l+0x978>
 800a3e2:	f1b8 0f01 	cmp.w	r8, #1
 800a3e6:	d103      	bne.n	800a3f0 <_strtod_l+0xa40>
 800a3e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	f43f ad94 	beq.w	8009f18 <_strtod_l+0x568>
 800a3f0:	4f34      	ldr	r7, [pc, #208]	; (800a4c4 <_strtod_l+0xb14>)
 800a3f2:	2600      	movs	r6, #0
 800a3f4:	2400      	movs	r4, #0
 800a3f6:	e796      	b.n	800a326 <_strtod_l+0x976>
 800a3f8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a3fa:	4d31      	ldr	r5, [pc, #196]	; (800a4c0 <_strtod_l+0xb10>)
 800a3fc:	e7ea      	b.n	800a3d4 <_strtod_l+0xa24>
 800a3fe:	4b30      	ldr	r3, [pc, #192]	; (800a4c0 <_strtod_l+0xb10>)
 800a400:	2200      	movs	r2, #0
 800a402:	4630      	mov	r0, r6
 800a404:	4639      	mov	r1, r7
 800a406:	f7f6 f8cf 	bl	80005a8 <__aeabi_dmul>
 800a40a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a40c:	4604      	mov	r4, r0
 800a40e:	460d      	mov	r5, r1
 800a410:	b933      	cbnz	r3, 800a420 <_strtod_l+0xa70>
 800a412:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a416:	9010      	str	r0, [sp, #64]	; 0x40
 800a418:	9311      	str	r3, [sp, #68]	; 0x44
 800a41a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a41e:	e783      	b.n	800a328 <_strtod_l+0x978>
 800a420:	4602      	mov	r2, r0
 800a422:	460b      	mov	r3, r1
 800a424:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a428:	e7f7      	b.n	800a41a <_strtod_l+0xa6a>
 800a42a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a42e:	9b05      	ldr	r3, [sp, #20]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d1a8      	bne.n	800a386 <_strtod_l+0x9d6>
 800a434:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a438:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a43a:	0d1b      	lsrs	r3, r3, #20
 800a43c:	051b      	lsls	r3, r3, #20
 800a43e:	429a      	cmp	r2, r3
 800a440:	d1a1      	bne.n	800a386 <_strtod_l+0x9d6>
 800a442:	4620      	mov	r0, r4
 800a444:	4629      	mov	r1, r5
 800a446:	f7f6 ff33 	bl	80012b0 <__aeabi_d2lz>
 800a44a:	f7f6 f87f 	bl	800054c <__aeabi_l2d>
 800a44e:	4602      	mov	r2, r0
 800a450:	460b      	mov	r3, r1
 800a452:	4620      	mov	r0, r4
 800a454:	4629      	mov	r1, r5
 800a456:	f7f5 feef 	bl	8000238 <__aeabi_dsub>
 800a45a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a45c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a460:	ea43 0308 	orr.w	r3, r3, r8
 800a464:	4313      	orrs	r3, r2
 800a466:	4604      	mov	r4, r0
 800a468:	460d      	mov	r5, r1
 800a46a:	d068      	beq.n	800a53e <_strtod_l+0xb8e>
 800a46c:	a30a      	add	r3, pc, #40	; (adr r3, 800a498 <_strtod_l+0xae8>)
 800a46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a472:	f7f6 fb0b 	bl	8000a8c <__aeabi_dcmplt>
 800a476:	2800      	cmp	r0, #0
 800a478:	f47f ace4 	bne.w	8009e44 <_strtod_l+0x494>
 800a47c:	a308      	add	r3, pc, #32	; (adr r3, 800a4a0 <_strtod_l+0xaf0>)
 800a47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a482:	4620      	mov	r0, r4
 800a484:	4629      	mov	r1, r5
 800a486:	f7f6 fb1f 	bl	8000ac8 <__aeabi_dcmpgt>
 800a48a:	2800      	cmp	r0, #0
 800a48c:	f43f af7b 	beq.w	800a386 <_strtod_l+0x9d6>
 800a490:	e4d8      	b.n	8009e44 <_strtod_l+0x494>
 800a492:	bf00      	nop
 800a494:	f3af 8000 	nop.w
 800a498:	94a03595 	.word	0x94a03595
 800a49c:	3fdfffff 	.word	0x3fdfffff
 800a4a0:	35afe535 	.word	0x35afe535
 800a4a4:	3fe00000 	.word	0x3fe00000
 800a4a8:	000fffff 	.word	0x000fffff
 800a4ac:	7ff00000 	.word	0x7ff00000
 800a4b0:	7fefffff 	.word	0x7fefffff
 800a4b4:	3ff00000 	.word	0x3ff00000
 800a4b8:	7fe00000 	.word	0x7fe00000
 800a4bc:	7c9fffff 	.word	0x7c9fffff
 800a4c0:	3fe00000 	.word	0x3fe00000
 800a4c4:	bff00000 	.word	0xbff00000
 800a4c8:	9b05      	ldr	r3, [sp, #20]
 800a4ca:	b313      	cbz	r3, 800a512 <_strtod_l+0xb62>
 800a4cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a4ce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a4d2:	d81e      	bhi.n	800a512 <_strtod_l+0xb62>
 800a4d4:	a326      	add	r3, pc, #152	; (adr r3, 800a570 <_strtod_l+0xbc0>)
 800a4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4da:	4620      	mov	r0, r4
 800a4dc:	4629      	mov	r1, r5
 800a4de:	f7f6 fadf 	bl	8000aa0 <__aeabi_dcmple>
 800a4e2:	b190      	cbz	r0, 800a50a <_strtod_l+0xb5a>
 800a4e4:	4629      	mov	r1, r5
 800a4e6:	4620      	mov	r0, r4
 800a4e8:	f7f6 fb36 	bl	8000b58 <__aeabi_d2uiz>
 800a4ec:	2801      	cmp	r0, #1
 800a4ee:	bf38      	it	cc
 800a4f0:	2001      	movcc	r0, #1
 800a4f2:	f7f5 ffdf 	bl	80004b4 <__aeabi_ui2d>
 800a4f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4f8:	4604      	mov	r4, r0
 800a4fa:	460d      	mov	r5, r1
 800a4fc:	b9d3      	cbnz	r3, 800a534 <_strtod_l+0xb84>
 800a4fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a502:	9012      	str	r0, [sp, #72]	; 0x48
 800a504:	9313      	str	r3, [sp, #76]	; 0x4c
 800a506:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800a50a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a50c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800a510:	1a9f      	subs	r7, r3, r2
 800a512:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a516:	f001 fe21 	bl	800c15c <__ulp>
 800a51a:	4602      	mov	r2, r0
 800a51c:	460b      	mov	r3, r1
 800a51e:	4630      	mov	r0, r6
 800a520:	4639      	mov	r1, r7
 800a522:	f7f6 f841 	bl	80005a8 <__aeabi_dmul>
 800a526:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a52a:	f7f5 fe87 	bl	800023c <__adddf3>
 800a52e:	4680      	mov	r8, r0
 800a530:	4689      	mov	r9, r1
 800a532:	e77c      	b.n	800a42e <_strtod_l+0xa7e>
 800a534:	4602      	mov	r2, r0
 800a536:	460b      	mov	r3, r1
 800a538:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800a53c:	e7e3      	b.n	800a506 <_strtod_l+0xb56>
 800a53e:	a30e      	add	r3, pc, #56	; (adr r3, 800a578 <_strtod_l+0xbc8>)
 800a540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a544:	f7f6 faa2 	bl	8000a8c <__aeabi_dcmplt>
 800a548:	e79f      	b.n	800a48a <_strtod_l+0xada>
 800a54a:	2300      	movs	r3, #0
 800a54c:	930a      	str	r3, [sp, #40]	; 0x28
 800a54e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a550:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a552:	6013      	str	r3, [r2, #0]
 800a554:	f7ff ba71 	b.w	8009a3a <_strtod_l+0x8a>
 800a558:	2a65      	cmp	r2, #101	; 0x65
 800a55a:	f43f ab63 	beq.w	8009c24 <_strtod_l+0x274>
 800a55e:	2a45      	cmp	r2, #69	; 0x45
 800a560:	f43f ab60 	beq.w	8009c24 <_strtod_l+0x274>
 800a564:	2301      	movs	r3, #1
 800a566:	f7ff bb95 	b.w	8009c94 <_strtod_l+0x2e4>
 800a56a:	bf00      	nop
 800a56c:	f3af 8000 	nop.w
 800a570:	ffc00000 	.word	0xffc00000
 800a574:	41dfffff 	.word	0x41dfffff
 800a578:	94a03595 	.word	0x94a03595
 800a57c:	3fcfffff 	.word	0x3fcfffff

0800a580 <_strtod_r>:
 800a580:	4b01      	ldr	r3, [pc, #4]	; (800a588 <_strtod_r+0x8>)
 800a582:	f7ff ba15 	b.w	80099b0 <_strtod_l>
 800a586:	bf00      	nop
 800a588:	20000078 	.word	0x20000078

0800a58c <_strtol_l.constprop.0>:
 800a58c:	2b01      	cmp	r3, #1
 800a58e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a592:	4680      	mov	r8, r0
 800a594:	d001      	beq.n	800a59a <_strtol_l.constprop.0+0xe>
 800a596:	2b24      	cmp	r3, #36	; 0x24
 800a598:	d906      	bls.n	800a5a8 <_strtol_l.constprop.0+0x1c>
 800a59a:	f7fe fa1b 	bl	80089d4 <__errno>
 800a59e:	2316      	movs	r3, #22
 800a5a0:	6003      	str	r3, [r0, #0]
 800a5a2:	2000      	movs	r0, #0
 800a5a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5a8:	4f35      	ldr	r7, [pc, #212]	; (800a680 <_strtol_l.constprop.0+0xf4>)
 800a5aa:	460d      	mov	r5, r1
 800a5ac:	4628      	mov	r0, r5
 800a5ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a5b2:	5de6      	ldrb	r6, [r4, r7]
 800a5b4:	f016 0608 	ands.w	r6, r6, #8
 800a5b8:	d1f8      	bne.n	800a5ac <_strtol_l.constprop.0+0x20>
 800a5ba:	2c2d      	cmp	r4, #45	; 0x2d
 800a5bc:	d12f      	bne.n	800a61e <_strtol_l.constprop.0+0x92>
 800a5be:	782c      	ldrb	r4, [r5, #0]
 800a5c0:	2601      	movs	r6, #1
 800a5c2:	1c85      	adds	r5, r0, #2
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d057      	beq.n	800a678 <_strtol_l.constprop.0+0xec>
 800a5c8:	2b10      	cmp	r3, #16
 800a5ca:	d109      	bne.n	800a5e0 <_strtol_l.constprop.0+0x54>
 800a5cc:	2c30      	cmp	r4, #48	; 0x30
 800a5ce:	d107      	bne.n	800a5e0 <_strtol_l.constprop.0+0x54>
 800a5d0:	7828      	ldrb	r0, [r5, #0]
 800a5d2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a5d6:	2858      	cmp	r0, #88	; 0x58
 800a5d8:	d149      	bne.n	800a66e <_strtol_l.constprop.0+0xe2>
 800a5da:	786c      	ldrb	r4, [r5, #1]
 800a5dc:	2310      	movs	r3, #16
 800a5de:	3502      	adds	r5, #2
 800a5e0:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800a5e4:	f10e 3eff 	add.w	lr, lr, #4294967295
 800a5e8:	2700      	movs	r7, #0
 800a5ea:	fbbe f9f3 	udiv	r9, lr, r3
 800a5ee:	4638      	mov	r0, r7
 800a5f0:	fb03 ea19 	mls	sl, r3, r9, lr
 800a5f4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a5f8:	f1bc 0f09 	cmp.w	ip, #9
 800a5fc:	d814      	bhi.n	800a628 <_strtol_l.constprop.0+0x9c>
 800a5fe:	4664      	mov	r4, ip
 800a600:	42a3      	cmp	r3, r4
 800a602:	dd22      	ble.n	800a64a <_strtol_l.constprop.0+0xbe>
 800a604:	2f00      	cmp	r7, #0
 800a606:	db1d      	blt.n	800a644 <_strtol_l.constprop.0+0xb8>
 800a608:	4581      	cmp	r9, r0
 800a60a:	d31b      	bcc.n	800a644 <_strtol_l.constprop.0+0xb8>
 800a60c:	d101      	bne.n	800a612 <_strtol_l.constprop.0+0x86>
 800a60e:	45a2      	cmp	sl, r4
 800a610:	db18      	blt.n	800a644 <_strtol_l.constprop.0+0xb8>
 800a612:	fb00 4003 	mla	r0, r0, r3, r4
 800a616:	2701      	movs	r7, #1
 800a618:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a61c:	e7ea      	b.n	800a5f4 <_strtol_l.constprop.0+0x68>
 800a61e:	2c2b      	cmp	r4, #43	; 0x2b
 800a620:	bf04      	itt	eq
 800a622:	782c      	ldrbeq	r4, [r5, #0]
 800a624:	1c85      	addeq	r5, r0, #2
 800a626:	e7cd      	b.n	800a5c4 <_strtol_l.constprop.0+0x38>
 800a628:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a62c:	f1bc 0f19 	cmp.w	ip, #25
 800a630:	d801      	bhi.n	800a636 <_strtol_l.constprop.0+0xaa>
 800a632:	3c37      	subs	r4, #55	; 0x37
 800a634:	e7e4      	b.n	800a600 <_strtol_l.constprop.0+0x74>
 800a636:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a63a:	f1bc 0f19 	cmp.w	ip, #25
 800a63e:	d804      	bhi.n	800a64a <_strtol_l.constprop.0+0xbe>
 800a640:	3c57      	subs	r4, #87	; 0x57
 800a642:	e7dd      	b.n	800a600 <_strtol_l.constprop.0+0x74>
 800a644:	f04f 37ff 	mov.w	r7, #4294967295
 800a648:	e7e6      	b.n	800a618 <_strtol_l.constprop.0+0x8c>
 800a64a:	2f00      	cmp	r7, #0
 800a64c:	da07      	bge.n	800a65e <_strtol_l.constprop.0+0xd2>
 800a64e:	2322      	movs	r3, #34	; 0x22
 800a650:	f8c8 3000 	str.w	r3, [r8]
 800a654:	4670      	mov	r0, lr
 800a656:	2a00      	cmp	r2, #0
 800a658:	d0a4      	beq.n	800a5a4 <_strtol_l.constprop.0+0x18>
 800a65a:	1e69      	subs	r1, r5, #1
 800a65c:	e005      	b.n	800a66a <_strtol_l.constprop.0+0xde>
 800a65e:	b106      	cbz	r6, 800a662 <_strtol_l.constprop.0+0xd6>
 800a660:	4240      	negs	r0, r0
 800a662:	2a00      	cmp	r2, #0
 800a664:	d09e      	beq.n	800a5a4 <_strtol_l.constprop.0+0x18>
 800a666:	2f00      	cmp	r7, #0
 800a668:	d1f7      	bne.n	800a65a <_strtol_l.constprop.0+0xce>
 800a66a:	6011      	str	r1, [r2, #0]
 800a66c:	e79a      	b.n	800a5a4 <_strtol_l.constprop.0+0x18>
 800a66e:	2430      	movs	r4, #48	; 0x30
 800a670:	2b00      	cmp	r3, #0
 800a672:	d1b5      	bne.n	800a5e0 <_strtol_l.constprop.0+0x54>
 800a674:	2308      	movs	r3, #8
 800a676:	e7b3      	b.n	800a5e0 <_strtol_l.constprop.0+0x54>
 800a678:	2c30      	cmp	r4, #48	; 0x30
 800a67a:	d0a9      	beq.n	800a5d0 <_strtol_l.constprop.0+0x44>
 800a67c:	230a      	movs	r3, #10
 800a67e:	e7af      	b.n	800a5e0 <_strtol_l.constprop.0+0x54>
 800a680:	0800d6f9 	.word	0x0800d6f9

0800a684 <_strtol_r>:
 800a684:	f7ff bf82 	b.w	800a58c <_strtol_l.constprop.0>

0800a688 <quorem>:
 800a688:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a68c:	6903      	ldr	r3, [r0, #16]
 800a68e:	690c      	ldr	r4, [r1, #16]
 800a690:	42a3      	cmp	r3, r4
 800a692:	4607      	mov	r7, r0
 800a694:	db7d      	blt.n	800a792 <quorem+0x10a>
 800a696:	3c01      	subs	r4, #1
 800a698:	f101 0814 	add.w	r8, r1, #20
 800a69c:	f100 0514 	add.w	r5, r0, #20
 800a6a0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a6a4:	9301      	str	r3, [sp, #4]
 800a6a6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a6aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a6ae:	3301      	adds	r3, #1
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a6b6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a6ba:	fbb2 f6f3 	udiv	r6, r2, r3
 800a6be:	d32e      	bcc.n	800a71e <quorem+0x96>
 800a6c0:	f04f 0e00 	mov.w	lr, #0
 800a6c4:	4640      	mov	r0, r8
 800a6c6:	46ac      	mov	ip, r5
 800a6c8:	46f2      	mov	sl, lr
 800a6ca:	f850 2b04 	ldr.w	r2, [r0], #4
 800a6ce:	b293      	uxth	r3, r2
 800a6d0:	fb06 e303 	mla	r3, r6, r3, lr
 800a6d4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a6d8:	0c12      	lsrs	r2, r2, #16
 800a6da:	b29b      	uxth	r3, r3
 800a6dc:	fb06 e202 	mla	r2, r6, r2, lr
 800a6e0:	ebaa 0303 	sub.w	r3, sl, r3
 800a6e4:	f8dc a000 	ldr.w	sl, [ip]
 800a6e8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a6ec:	b292      	uxth	r2, r2
 800a6ee:	fa13 f38a 	uxtah	r3, r3, sl
 800a6f2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a6f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a6fa:	b29b      	uxth	r3, r3
 800a6fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a700:	4581      	cmp	r9, r0
 800a702:	f84c 3b04 	str.w	r3, [ip], #4
 800a706:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a70a:	d2de      	bcs.n	800a6ca <quorem+0x42>
 800a70c:	f855 300b 	ldr.w	r3, [r5, fp]
 800a710:	b92b      	cbnz	r3, 800a71e <quorem+0x96>
 800a712:	9b01      	ldr	r3, [sp, #4]
 800a714:	3b04      	subs	r3, #4
 800a716:	429d      	cmp	r5, r3
 800a718:	461a      	mov	r2, r3
 800a71a:	d32e      	bcc.n	800a77a <quorem+0xf2>
 800a71c:	613c      	str	r4, [r7, #16]
 800a71e:	4638      	mov	r0, r7
 800a720:	f001 fc78 	bl	800c014 <__mcmp>
 800a724:	2800      	cmp	r0, #0
 800a726:	db24      	blt.n	800a772 <quorem+0xea>
 800a728:	3601      	adds	r6, #1
 800a72a:	4628      	mov	r0, r5
 800a72c:	f04f 0c00 	mov.w	ip, #0
 800a730:	f858 2b04 	ldr.w	r2, [r8], #4
 800a734:	f8d0 e000 	ldr.w	lr, [r0]
 800a738:	b293      	uxth	r3, r2
 800a73a:	ebac 0303 	sub.w	r3, ip, r3
 800a73e:	0c12      	lsrs	r2, r2, #16
 800a740:	fa13 f38e 	uxtah	r3, r3, lr
 800a744:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a748:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a74c:	b29b      	uxth	r3, r3
 800a74e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a752:	45c1      	cmp	r9, r8
 800a754:	f840 3b04 	str.w	r3, [r0], #4
 800a758:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a75c:	d2e8      	bcs.n	800a730 <quorem+0xa8>
 800a75e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a762:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a766:	b922      	cbnz	r2, 800a772 <quorem+0xea>
 800a768:	3b04      	subs	r3, #4
 800a76a:	429d      	cmp	r5, r3
 800a76c:	461a      	mov	r2, r3
 800a76e:	d30a      	bcc.n	800a786 <quorem+0xfe>
 800a770:	613c      	str	r4, [r7, #16]
 800a772:	4630      	mov	r0, r6
 800a774:	b003      	add	sp, #12
 800a776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a77a:	6812      	ldr	r2, [r2, #0]
 800a77c:	3b04      	subs	r3, #4
 800a77e:	2a00      	cmp	r2, #0
 800a780:	d1cc      	bne.n	800a71c <quorem+0x94>
 800a782:	3c01      	subs	r4, #1
 800a784:	e7c7      	b.n	800a716 <quorem+0x8e>
 800a786:	6812      	ldr	r2, [r2, #0]
 800a788:	3b04      	subs	r3, #4
 800a78a:	2a00      	cmp	r2, #0
 800a78c:	d1f0      	bne.n	800a770 <quorem+0xe8>
 800a78e:	3c01      	subs	r4, #1
 800a790:	e7eb      	b.n	800a76a <quorem+0xe2>
 800a792:	2000      	movs	r0, #0
 800a794:	e7ee      	b.n	800a774 <quorem+0xec>
	...

0800a798 <_dtoa_r>:
 800a798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a79c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a79e:	b099      	sub	sp, #100	; 0x64
 800a7a0:	4616      	mov	r6, r2
 800a7a2:	461f      	mov	r7, r3
 800a7a4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a7a8:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800a7ac:	4605      	mov	r5, r0
 800a7ae:	b974      	cbnz	r4, 800a7ce <_dtoa_r+0x36>
 800a7b0:	2010      	movs	r0, #16
 800a7b2:	f7fe f939 	bl	8008a28 <malloc>
 800a7b6:	4602      	mov	r2, r0
 800a7b8:	6268      	str	r0, [r5, #36]	; 0x24
 800a7ba:	b920      	cbnz	r0, 800a7c6 <_dtoa_r+0x2e>
 800a7bc:	4ba8      	ldr	r3, [pc, #672]	; (800aa60 <_dtoa_r+0x2c8>)
 800a7be:	21ea      	movs	r1, #234	; 0xea
 800a7c0:	48a8      	ldr	r0, [pc, #672]	; (800aa64 <_dtoa_r+0x2cc>)
 800a7c2:	f001 ffab 	bl	800c71c <__assert_func>
 800a7c6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a7ca:	6004      	str	r4, [r0, #0]
 800a7cc:	60c4      	str	r4, [r0, #12]
 800a7ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a7d0:	6819      	ldr	r1, [r3, #0]
 800a7d2:	b151      	cbz	r1, 800a7ea <_dtoa_r+0x52>
 800a7d4:	685a      	ldr	r2, [r3, #4]
 800a7d6:	604a      	str	r2, [r1, #4]
 800a7d8:	2301      	movs	r3, #1
 800a7da:	4093      	lsls	r3, r2
 800a7dc:	608b      	str	r3, [r1, #8]
 800a7de:	4628      	mov	r0, r5
 800a7e0:	f001 f990 	bl	800bb04 <_Bfree>
 800a7e4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	601a      	str	r2, [r3, #0]
 800a7ea:	1e3b      	subs	r3, r7, #0
 800a7ec:	bfb9      	ittee	lt
 800a7ee:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a7f2:	9305      	strlt	r3, [sp, #20]
 800a7f4:	2300      	movge	r3, #0
 800a7f6:	f8c8 3000 	strge.w	r3, [r8]
 800a7fa:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a7fe:	4b9a      	ldr	r3, [pc, #616]	; (800aa68 <_dtoa_r+0x2d0>)
 800a800:	bfbc      	itt	lt
 800a802:	2201      	movlt	r2, #1
 800a804:	f8c8 2000 	strlt.w	r2, [r8]
 800a808:	ea33 0309 	bics.w	r3, r3, r9
 800a80c:	d119      	bne.n	800a842 <_dtoa_r+0xaa>
 800a80e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a810:	f242 730f 	movw	r3, #9999	; 0x270f
 800a814:	6013      	str	r3, [r2, #0]
 800a816:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a81a:	4333      	orrs	r3, r6
 800a81c:	f000 8580 	beq.w	800b320 <_dtoa_r+0xb88>
 800a820:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a822:	b953      	cbnz	r3, 800a83a <_dtoa_r+0xa2>
 800a824:	4b91      	ldr	r3, [pc, #580]	; (800aa6c <_dtoa_r+0x2d4>)
 800a826:	e022      	b.n	800a86e <_dtoa_r+0xd6>
 800a828:	4b91      	ldr	r3, [pc, #580]	; (800aa70 <_dtoa_r+0x2d8>)
 800a82a:	9303      	str	r3, [sp, #12]
 800a82c:	3308      	adds	r3, #8
 800a82e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a830:	6013      	str	r3, [r2, #0]
 800a832:	9803      	ldr	r0, [sp, #12]
 800a834:	b019      	add	sp, #100	; 0x64
 800a836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a83a:	4b8c      	ldr	r3, [pc, #560]	; (800aa6c <_dtoa_r+0x2d4>)
 800a83c:	9303      	str	r3, [sp, #12]
 800a83e:	3303      	adds	r3, #3
 800a840:	e7f5      	b.n	800a82e <_dtoa_r+0x96>
 800a842:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a846:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a84a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a84e:	2200      	movs	r2, #0
 800a850:	2300      	movs	r3, #0
 800a852:	f7f6 f911 	bl	8000a78 <__aeabi_dcmpeq>
 800a856:	4680      	mov	r8, r0
 800a858:	b158      	cbz	r0, 800a872 <_dtoa_r+0xda>
 800a85a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a85c:	2301      	movs	r3, #1
 800a85e:	6013      	str	r3, [r2, #0]
 800a860:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a862:	2b00      	cmp	r3, #0
 800a864:	f000 8559 	beq.w	800b31a <_dtoa_r+0xb82>
 800a868:	4882      	ldr	r0, [pc, #520]	; (800aa74 <_dtoa_r+0x2dc>)
 800a86a:	6018      	str	r0, [r3, #0]
 800a86c:	1e43      	subs	r3, r0, #1
 800a86e:	9303      	str	r3, [sp, #12]
 800a870:	e7df      	b.n	800a832 <_dtoa_r+0x9a>
 800a872:	ab16      	add	r3, sp, #88	; 0x58
 800a874:	9301      	str	r3, [sp, #4]
 800a876:	ab17      	add	r3, sp, #92	; 0x5c
 800a878:	9300      	str	r3, [sp, #0]
 800a87a:	4628      	mov	r0, r5
 800a87c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a880:	f001 fce6 	bl	800c250 <__d2b>
 800a884:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a888:	4683      	mov	fp, r0
 800a88a:	2c00      	cmp	r4, #0
 800a88c:	d07e      	beq.n	800a98c <_dtoa_r+0x1f4>
 800a88e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a890:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a894:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a898:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a89c:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800a8a0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a8a4:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a8a8:	4b73      	ldr	r3, [pc, #460]	; (800aa78 <_dtoa_r+0x2e0>)
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	f7f5 fcc4 	bl	8000238 <__aeabi_dsub>
 800a8b0:	a365      	add	r3, pc, #404	; (adr r3, 800aa48 <_dtoa_r+0x2b0>)
 800a8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b6:	f7f5 fe77 	bl	80005a8 <__aeabi_dmul>
 800a8ba:	a365      	add	r3, pc, #404	; (adr r3, 800aa50 <_dtoa_r+0x2b8>)
 800a8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c0:	f7f5 fcbc 	bl	800023c <__adddf3>
 800a8c4:	4606      	mov	r6, r0
 800a8c6:	4620      	mov	r0, r4
 800a8c8:	460f      	mov	r7, r1
 800a8ca:	f7f5 fe03 	bl	80004d4 <__aeabi_i2d>
 800a8ce:	a362      	add	r3, pc, #392	; (adr r3, 800aa58 <_dtoa_r+0x2c0>)
 800a8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d4:	f7f5 fe68 	bl	80005a8 <__aeabi_dmul>
 800a8d8:	4602      	mov	r2, r0
 800a8da:	460b      	mov	r3, r1
 800a8dc:	4630      	mov	r0, r6
 800a8de:	4639      	mov	r1, r7
 800a8e0:	f7f5 fcac 	bl	800023c <__adddf3>
 800a8e4:	4606      	mov	r6, r0
 800a8e6:	460f      	mov	r7, r1
 800a8e8:	f7f6 f90e 	bl	8000b08 <__aeabi_d2iz>
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	4682      	mov	sl, r0
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	4630      	mov	r0, r6
 800a8f4:	4639      	mov	r1, r7
 800a8f6:	f7f6 f8c9 	bl	8000a8c <__aeabi_dcmplt>
 800a8fa:	b148      	cbz	r0, 800a910 <_dtoa_r+0x178>
 800a8fc:	4650      	mov	r0, sl
 800a8fe:	f7f5 fde9 	bl	80004d4 <__aeabi_i2d>
 800a902:	4632      	mov	r2, r6
 800a904:	463b      	mov	r3, r7
 800a906:	f7f6 f8b7 	bl	8000a78 <__aeabi_dcmpeq>
 800a90a:	b908      	cbnz	r0, 800a910 <_dtoa_r+0x178>
 800a90c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a910:	f1ba 0f16 	cmp.w	sl, #22
 800a914:	d857      	bhi.n	800a9c6 <_dtoa_r+0x22e>
 800a916:	4b59      	ldr	r3, [pc, #356]	; (800aa7c <_dtoa_r+0x2e4>)
 800a918:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a920:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a924:	f7f6 f8b2 	bl	8000a8c <__aeabi_dcmplt>
 800a928:	2800      	cmp	r0, #0
 800a92a:	d04e      	beq.n	800a9ca <_dtoa_r+0x232>
 800a92c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a930:	2300      	movs	r3, #0
 800a932:	930f      	str	r3, [sp, #60]	; 0x3c
 800a934:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a936:	1b1c      	subs	r4, r3, r4
 800a938:	1e63      	subs	r3, r4, #1
 800a93a:	9309      	str	r3, [sp, #36]	; 0x24
 800a93c:	bf45      	ittet	mi
 800a93e:	f1c4 0301 	rsbmi	r3, r4, #1
 800a942:	9306      	strmi	r3, [sp, #24]
 800a944:	2300      	movpl	r3, #0
 800a946:	2300      	movmi	r3, #0
 800a948:	bf4c      	ite	mi
 800a94a:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a94c:	9306      	strpl	r3, [sp, #24]
 800a94e:	f1ba 0f00 	cmp.w	sl, #0
 800a952:	db3c      	blt.n	800a9ce <_dtoa_r+0x236>
 800a954:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a956:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a95a:	4453      	add	r3, sl
 800a95c:	9309      	str	r3, [sp, #36]	; 0x24
 800a95e:	2300      	movs	r3, #0
 800a960:	930a      	str	r3, [sp, #40]	; 0x28
 800a962:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a964:	2b09      	cmp	r3, #9
 800a966:	f200 808d 	bhi.w	800aa84 <_dtoa_r+0x2ec>
 800a96a:	2b05      	cmp	r3, #5
 800a96c:	bfc4      	itt	gt
 800a96e:	3b04      	subgt	r3, #4
 800a970:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a972:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a974:	f1a3 0302 	sub.w	r3, r3, #2
 800a978:	bfcc      	ite	gt
 800a97a:	2400      	movgt	r4, #0
 800a97c:	2401      	movle	r4, #1
 800a97e:	2b03      	cmp	r3, #3
 800a980:	f200 808c 	bhi.w	800aa9c <_dtoa_r+0x304>
 800a984:	e8df f003 	tbb	[pc, r3]
 800a988:	5b4d4f2d 	.word	0x5b4d4f2d
 800a98c:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a990:	441c      	add	r4, r3
 800a992:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a996:	2b20      	cmp	r3, #32
 800a998:	bfc3      	ittte	gt
 800a99a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a99e:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800a9a2:	fa09 f303 	lslgt.w	r3, r9, r3
 800a9a6:	f1c3 0320 	rsble	r3, r3, #32
 800a9aa:	bfc6      	itte	gt
 800a9ac:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a9b0:	4318      	orrgt	r0, r3
 800a9b2:	fa06 f003 	lslle.w	r0, r6, r3
 800a9b6:	f7f5 fd7d 	bl	80004b4 <__aeabi_ui2d>
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a9c0:	3c01      	subs	r4, #1
 800a9c2:	9313      	str	r3, [sp, #76]	; 0x4c
 800a9c4:	e770      	b.n	800a8a8 <_dtoa_r+0x110>
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	e7b3      	b.n	800a932 <_dtoa_r+0x19a>
 800a9ca:	900f      	str	r0, [sp, #60]	; 0x3c
 800a9cc:	e7b2      	b.n	800a934 <_dtoa_r+0x19c>
 800a9ce:	9b06      	ldr	r3, [sp, #24]
 800a9d0:	eba3 030a 	sub.w	r3, r3, sl
 800a9d4:	9306      	str	r3, [sp, #24]
 800a9d6:	f1ca 0300 	rsb	r3, sl, #0
 800a9da:	930a      	str	r3, [sp, #40]	; 0x28
 800a9dc:	2300      	movs	r3, #0
 800a9de:	930e      	str	r3, [sp, #56]	; 0x38
 800a9e0:	e7bf      	b.n	800a962 <_dtoa_r+0x1ca>
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	930b      	str	r3, [sp, #44]	; 0x2c
 800a9e6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	dc5a      	bgt.n	800aaa2 <_dtoa_r+0x30a>
 800a9ec:	f04f 0901 	mov.w	r9, #1
 800a9f0:	f8cd 9020 	str.w	r9, [sp, #32]
 800a9f4:	464b      	mov	r3, r9
 800a9f6:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800a9fa:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	6042      	str	r2, [r0, #4]
 800aa00:	2204      	movs	r2, #4
 800aa02:	f102 0614 	add.w	r6, r2, #20
 800aa06:	429e      	cmp	r6, r3
 800aa08:	6841      	ldr	r1, [r0, #4]
 800aa0a:	d950      	bls.n	800aaae <_dtoa_r+0x316>
 800aa0c:	4628      	mov	r0, r5
 800aa0e:	f001 f839 	bl	800ba84 <_Balloc>
 800aa12:	9003      	str	r0, [sp, #12]
 800aa14:	2800      	cmp	r0, #0
 800aa16:	d14e      	bne.n	800aab6 <_dtoa_r+0x31e>
 800aa18:	4b19      	ldr	r3, [pc, #100]	; (800aa80 <_dtoa_r+0x2e8>)
 800aa1a:	4602      	mov	r2, r0
 800aa1c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800aa20:	e6ce      	b.n	800a7c0 <_dtoa_r+0x28>
 800aa22:	2301      	movs	r3, #1
 800aa24:	e7de      	b.n	800a9e4 <_dtoa_r+0x24c>
 800aa26:	2300      	movs	r3, #0
 800aa28:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa2a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800aa2c:	eb0a 0903 	add.w	r9, sl, r3
 800aa30:	f109 0301 	add.w	r3, r9, #1
 800aa34:	2b01      	cmp	r3, #1
 800aa36:	9308      	str	r3, [sp, #32]
 800aa38:	bfb8      	it	lt
 800aa3a:	2301      	movlt	r3, #1
 800aa3c:	e7dd      	b.n	800a9fa <_dtoa_r+0x262>
 800aa3e:	2301      	movs	r3, #1
 800aa40:	e7f2      	b.n	800aa28 <_dtoa_r+0x290>
 800aa42:	bf00      	nop
 800aa44:	f3af 8000 	nop.w
 800aa48:	636f4361 	.word	0x636f4361
 800aa4c:	3fd287a7 	.word	0x3fd287a7
 800aa50:	8b60c8b3 	.word	0x8b60c8b3
 800aa54:	3fc68a28 	.word	0x3fc68a28
 800aa58:	509f79fb 	.word	0x509f79fb
 800aa5c:	3fd34413 	.word	0x3fd34413
 800aa60:	0800d806 	.word	0x0800d806
 800aa64:	0800d81d 	.word	0x0800d81d
 800aa68:	7ff00000 	.word	0x7ff00000
 800aa6c:	0800d802 	.word	0x0800d802
 800aa70:	0800d7f9 	.word	0x0800d7f9
 800aa74:	0800d67d 	.word	0x0800d67d
 800aa78:	3ff80000 	.word	0x3ff80000
 800aa7c:	0800d988 	.word	0x0800d988
 800aa80:	0800d878 	.word	0x0800d878
 800aa84:	2401      	movs	r4, #1
 800aa86:	2300      	movs	r3, #0
 800aa88:	9322      	str	r3, [sp, #136]	; 0x88
 800aa8a:	940b      	str	r4, [sp, #44]	; 0x2c
 800aa8c:	f04f 39ff 	mov.w	r9, #4294967295
 800aa90:	2200      	movs	r2, #0
 800aa92:	f8cd 9020 	str.w	r9, [sp, #32]
 800aa96:	2312      	movs	r3, #18
 800aa98:	9223      	str	r2, [sp, #140]	; 0x8c
 800aa9a:	e7ae      	b.n	800a9fa <_dtoa_r+0x262>
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	930b      	str	r3, [sp, #44]	; 0x2c
 800aaa0:	e7f4      	b.n	800aa8c <_dtoa_r+0x2f4>
 800aaa2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800aaa6:	f8cd 9020 	str.w	r9, [sp, #32]
 800aaaa:	464b      	mov	r3, r9
 800aaac:	e7a5      	b.n	800a9fa <_dtoa_r+0x262>
 800aaae:	3101      	adds	r1, #1
 800aab0:	6041      	str	r1, [r0, #4]
 800aab2:	0052      	lsls	r2, r2, #1
 800aab4:	e7a5      	b.n	800aa02 <_dtoa_r+0x26a>
 800aab6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aab8:	9a03      	ldr	r2, [sp, #12]
 800aaba:	601a      	str	r2, [r3, #0]
 800aabc:	9b08      	ldr	r3, [sp, #32]
 800aabe:	2b0e      	cmp	r3, #14
 800aac0:	f200 80a8 	bhi.w	800ac14 <_dtoa_r+0x47c>
 800aac4:	2c00      	cmp	r4, #0
 800aac6:	f000 80a5 	beq.w	800ac14 <_dtoa_r+0x47c>
 800aaca:	f1ba 0f00 	cmp.w	sl, #0
 800aace:	dd34      	ble.n	800ab3a <_dtoa_r+0x3a2>
 800aad0:	4a9a      	ldr	r2, [pc, #616]	; (800ad3c <_dtoa_r+0x5a4>)
 800aad2:	f00a 030f 	and.w	r3, sl, #15
 800aad6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800aada:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aade:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800aae2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800aae6:	ea4f 142a 	mov.w	r4, sl, asr #4
 800aaea:	d016      	beq.n	800ab1a <_dtoa_r+0x382>
 800aaec:	4b94      	ldr	r3, [pc, #592]	; (800ad40 <_dtoa_r+0x5a8>)
 800aaee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aaf2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aaf6:	f7f5 fe81 	bl	80007fc <__aeabi_ddiv>
 800aafa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aafe:	f004 040f 	and.w	r4, r4, #15
 800ab02:	2703      	movs	r7, #3
 800ab04:	4e8e      	ldr	r6, [pc, #568]	; (800ad40 <_dtoa_r+0x5a8>)
 800ab06:	b954      	cbnz	r4, 800ab1e <_dtoa_r+0x386>
 800ab08:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ab0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab10:	f7f5 fe74 	bl	80007fc <__aeabi_ddiv>
 800ab14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ab18:	e029      	b.n	800ab6e <_dtoa_r+0x3d6>
 800ab1a:	2702      	movs	r7, #2
 800ab1c:	e7f2      	b.n	800ab04 <_dtoa_r+0x36c>
 800ab1e:	07e1      	lsls	r1, r4, #31
 800ab20:	d508      	bpl.n	800ab34 <_dtoa_r+0x39c>
 800ab22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ab26:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ab2a:	f7f5 fd3d 	bl	80005a8 <__aeabi_dmul>
 800ab2e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ab32:	3701      	adds	r7, #1
 800ab34:	1064      	asrs	r4, r4, #1
 800ab36:	3608      	adds	r6, #8
 800ab38:	e7e5      	b.n	800ab06 <_dtoa_r+0x36e>
 800ab3a:	f000 80a5 	beq.w	800ac88 <_dtoa_r+0x4f0>
 800ab3e:	f1ca 0400 	rsb	r4, sl, #0
 800ab42:	4b7e      	ldr	r3, [pc, #504]	; (800ad3c <_dtoa_r+0x5a4>)
 800ab44:	4e7e      	ldr	r6, [pc, #504]	; (800ad40 <_dtoa_r+0x5a8>)
 800ab46:	f004 020f 	and.w	r2, r4, #15
 800ab4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ab56:	f7f5 fd27 	bl	80005a8 <__aeabi_dmul>
 800ab5a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ab5e:	1124      	asrs	r4, r4, #4
 800ab60:	2300      	movs	r3, #0
 800ab62:	2702      	movs	r7, #2
 800ab64:	2c00      	cmp	r4, #0
 800ab66:	f040 8084 	bne.w	800ac72 <_dtoa_r+0x4da>
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d1d2      	bne.n	800ab14 <_dtoa_r+0x37c>
 800ab6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	f000 808b 	beq.w	800ac8c <_dtoa_r+0x4f4>
 800ab76:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800ab7a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ab7e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ab82:	4b70      	ldr	r3, [pc, #448]	; (800ad44 <_dtoa_r+0x5ac>)
 800ab84:	2200      	movs	r2, #0
 800ab86:	f7f5 ff81 	bl	8000a8c <__aeabi_dcmplt>
 800ab8a:	2800      	cmp	r0, #0
 800ab8c:	d07e      	beq.n	800ac8c <_dtoa_r+0x4f4>
 800ab8e:	9b08      	ldr	r3, [sp, #32]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d07b      	beq.n	800ac8c <_dtoa_r+0x4f4>
 800ab94:	f1b9 0f00 	cmp.w	r9, #0
 800ab98:	dd38      	ble.n	800ac0c <_dtoa_r+0x474>
 800ab9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ab9e:	4b6a      	ldr	r3, [pc, #424]	; (800ad48 <_dtoa_r+0x5b0>)
 800aba0:	2200      	movs	r2, #0
 800aba2:	f7f5 fd01 	bl	80005a8 <__aeabi_dmul>
 800aba6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800abaa:	f10a 38ff 	add.w	r8, sl, #4294967295
 800abae:	3701      	adds	r7, #1
 800abb0:	464c      	mov	r4, r9
 800abb2:	4638      	mov	r0, r7
 800abb4:	f7f5 fc8e 	bl	80004d4 <__aeabi_i2d>
 800abb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800abbc:	f7f5 fcf4 	bl	80005a8 <__aeabi_dmul>
 800abc0:	4b62      	ldr	r3, [pc, #392]	; (800ad4c <_dtoa_r+0x5b4>)
 800abc2:	2200      	movs	r2, #0
 800abc4:	f7f5 fb3a 	bl	800023c <__adddf3>
 800abc8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800abcc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800abd0:	9611      	str	r6, [sp, #68]	; 0x44
 800abd2:	2c00      	cmp	r4, #0
 800abd4:	d15d      	bne.n	800ac92 <_dtoa_r+0x4fa>
 800abd6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800abda:	4b5d      	ldr	r3, [pc, #372]	; (800ad50 <_dtoa_r+0x5b8>)
 800abdc:	2200      	movs	r2, #0
 800abde:	f7f5 fb2b 	bl	8000238 <__aeabi_dsub>
 800abe2:	4602      	mov	r2, r0
 800abe4:	460b      	mov	r3, r1
 800abe6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800abea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800abec:	4633      	mov	r3, r6
 800abee:	f7f5 ff6b 	bl	8000ac8 <__aeabi_dcmpgt>
 800abf2:	2800      	cmp	r0, #0
 800abf4:	f040 829c 	bne.w	800b130 <_dtoa_r+0x998>
 800abf8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800abfc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800abfe:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ac02:	f7f5 ff43 	bl	8000a8c <__aeabi_dcmplt>
 800ac06:	2800      	cmp	r0, #0
 800ac08:	f040 8290 	bne.w	800b12c <_dtoa_r+0x994>
 800ac0c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800ac10:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ac14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	f2c0 8152 	blt.w	800aec0 <_dtoa_r+0x728>
 800ac1c:	f1ba 0f0e 	cmp.w	sl, #14
 800ac20:	f300 814e 	bgt.w	800aec0 <_dtoa_r+0x728>
 800ac24:	4b45      	ldr	r3, [pc, #276]	; (800ad3c <_dtoa_r+0x5a4>)
 800ac26:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ac2a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ac2e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800ac32:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	f280 80db 	bge.w	800adf0 <_dtoa_r+0x658>
 800ac3a:	9b08      	ldr	r3, [sp, #32]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	f300 80d7 	bgt.w	800adf0 <_dtoa_r+0x658>
 800ac42:	f040 8272 	bne.w	800b12a <_dtoa_r+0x992>
 800ac46:	4b42      	ldr	r3, [pc, #264]	; (800ad50 <_dtoa_r+0x5b8>)
 800ac48:	2200      	movs	r2, #0
 800ac4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac4e:	f7f5 fcab 	bl	80005a8 <__aeabi_dmul>
 800ac52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac56:	f7f5 ff2d 	bl	8000ab4 <__aeabi_dcmpge>
 800ac5a:	9c08      	ldr	r4, [sp, #32]
 800ac5c:	4626      	mov	r6, r4
 800ac5e:	2800      	cmp	r0, #0
 800ac60:	f040 8248 	bne.w	800b0f4 <_dtoa_r+0x95c>
 800ac64:	9f03      	ldr	r7, [sp, #12]
 800ac66:	2331      	movs	r3, #49	; 0x31
 800ac68:	f807 3b01 	strb.w	r3, [r7], #1
 800ac6c:	f10a 0a01 	add.w	sl, sl, #1
 800ac70:	e244      	b.n	800b0fc <_dtoa_r+0x964>
 800ac72:	07e2      	lsls	r2, r4, #31
 800ac74:	d505      	bpl.n	800ac82 <_dtoa_r+0x4ea>
 800ac76:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ac7a:	f7f5 fc95 	bl	80005a8 <__aeabi_dmul>
 800ac7e:	3701      	adds	r7, #1
 800ac80:	2301      	movs	r3, #1
 800ac82:	1064      	asrs	r4, r4, #1
 800ac84:	3608      	adds	r6, #8
 800ac86:	e76d      	b.n	800ab64 <_dtoa_r+0x3cc>
 800ac88:	2702      	movs	r7, #2
 800ac8a:	e770      	b.n	800ab6e <_dtoa_r+0x3d6>
 800ac8c:	9c08      	ldr	r4, [sp, #32]
 800ac8e:	46d0      	mov	r8, sl
 800ac90:	e78f      	b.n	800abb2 <_dtoa_r+0x41a>
 800ac92:	9903      	ldr	r1, [sp, #12]
 800ac94:	4b29      	ldr	r3, [pc, #164]	; (800ad3c <_dtoa_r+0x5a4>)
 800ac96:	4421      	add	r1, r4
 800ac98:	9112      	str	r1, [sp, #72]	; 0x48
 800ac9a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ac9c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aca0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800aca4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aca8:	2900      	cmp	r1, #0
 800acaa:	d055      	beq.n	800ad58 <_dtoa_r+0x5c0>
 800acac:	4929      	ldr	r1, [pc, #164]	; (800ad54 <_dtoa_r+0x5bc>)
 800acae:	2000      	movs	r0, #0
 800acb0:	f7f5 fda4 	bl	80007fc <__aeabi_ddiv>
 800acb4:	463b      	mov	r3, r7
 800acb6:	4632      	mov	r2, r6
 800acb8:	f7f5 fabe 	bl	8000238 <__aeabi_dsub>
 800acbc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800acc0:	9f03      	ldr	r7, [sp, #12]
 800acc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800acc6:	f7f5 ff1f 	bl	8000b08 <__aeabi_d2iz>
 800acca:	4604      	mov	r4, r0
 800accc:	f7f5 fc02 	bl	80004d4 <__aeabi_i2d>
 800acd0:	4602      	mov	r2, r0
 800acd2:	460b      	mov	r3, r1
 800acd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800acd8:	f7f5 faae 	bl	8000238 <__aeabi_dsub>
 800acdc:	3430      	adds	r4, #48	; 0x30
 800acde:	4602      	mov	r2, r0
 800ace0:	460b      	mov	r3, r1
 800ace2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ace6:	f807 4b01 	strb.w	r4, [r7], #1
 800acea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800acee:	f7f5 fecd 	bl	8000a8c <__aeabi_dcmplt>
 800acf2:	2800      	cmp	r0, #0
 800acf4:	d174      	bne.n	800ade0 <_dtoa_r+0x648>
 800acf6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800acfa:	4912      	ldr	r1, [pc, #72]	; (800ad44 <_dtoa_r+0x5ac>)
 800acfc:	2000      	movs	r0, #0
 800acfe:	f7f5 fa9b 	bl	8000238 <__aeabi_dsub>
 800ad02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ad06:	f7f5 fec1 	bl	8000a8c <__aeabi_dcmplt>
 800ad0a:	2800      	cmp	r0, #0
 800ad0c:	f040 80b7 	bne.w	800ae7e <_dtoa_r+0x6e6>
 800ad10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ad12:	429f      	cmp	r7, r3
 800ad14:	f43f af7a 	beq.w	800ac0c <_dtoa_r+0x474>
 800ad18:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ad1c:	4b0a      	ldr	r3, [pc, #40]	; (800ad48 <_dtoa_r+0x5b0>)
 800ad1e:	2200      	movs	r2, #0
 800ad20:	f7f5 fc42 	bl	80005a8 <__aeabi_dmul>
 800ad24:	4b08      	ldr	r3, [pc, #32]	; (800ad48 <_dtoa_r+0x5b0>)
 800ad26:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad30:	f7f5 fc3a 	bl	80005a8 <__aeabi_dmul>
 800ad34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad38:	e7c3      	b.n	800acc2 <_dtoa_r+0x52a>
 800ad3a:	bf00      	nop
 800ad3c:	0800d988 	.word	0x0800d988
 800ad40:	0800d960 	.word	0x0800d960
 800ad44:	3ff00000 	.word	0x3ff00000
 800ad48:	40240000 	.word	0x40240000
 800ad4c:	401c0000 	.word	0x401c0000
 800ad50:	40140000 	.word	0x40140000
 800ad54:	3fe00000 	.word	0x3fe00000
 800ad58:	4630      	mov	r0, r6
 800ad5a:	4639      	mov	r1, r7
 800ad5c:	f7f5 fc24 	bl	80005a8 <__aeabi_dmul>
 800ad60:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ad64:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ad66:	9c03      	ldr	r4, [sp, #12]
 800ad68:	9314      	str	r3, [sp, #80]	; 0x50
 800ad6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad6e:	f7f5 fecb 	bl	8000b08 <__aeabi_d2iz>
 800ad72:	9015      	str	r0, [sp, #84]	; 0x54
 800ad74:	f7f5 fbae 	bl	80004d4 <__aeabi_i2d>
 800ad78:	4602      	mov	r2, r0
 800ad7a:	460b      	mov	r3, r1
 800ad7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad80:	f7f5 fa5a 	bl	8000238 <__aeabi_dsub>
 800ad84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad86:	3330      	adds	r3, #48	; 0x30
 800ad88:	f804 3b01 	strb.w	r3, [r4], #1
 800ad8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ad8e:	429c      	cmp	r4, r3
 800ad90:	4606      	mov	r6, r0
 800ad92:	460f      	mov	r7, r1
 800ad94:	f04f 0200 	mov.w	r2, #0
 800ad98:	d124      	bne.n	800ade4 <_dtoa_r+0x64c>
 800ad9a:	4ba4      	ldr	r3, [pc, #656]	; (800b02c <_dtoa_r+0x894>)
 800ad9c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ada0:	f7f5 fa4c 	bl	800023c <__adddf3>
 800ada4:	4602      	mov	r2, r0
 800ada6:	460b      	mov	r3, r1
 800ada8:	4630      	mov	r0, r6
 800adaa:	4639      	mov	r1, r7
 800adac:	f7f5 fe8c 	bl	8000ac8 <__aeabi_dcmpgt>
 800adb0:	2800      	cmp	r0, #0
 800adb2:	d163      	bne.n	800ae7c <_dtoa_r+0x6e4>
 800adb4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800adb8:	499c      	ldr	r1, [pc, #624]	; (800b02c <_dtoa_r+0x894>)
 800adba:	2000      	movs	r0, #0
 800adbc:	f7f5 fa3c 	bl	8000238 <__aeabi_dsub>
 800adc0:	4602      	mov	r2, r0
 800adc2:	460b      	mov	r3, r1
 800adc4:	4630      	mov	r0, r6
 800adc6:	4639      	mov	r1, r7
 800adc8:	f7f5 fe60 	bl	8000a8c <__aeabi_dcmplt>
 800adcc:	2800      	cmp	r0, #0
 800adce:	f43f af1d 	beq.w	800ac0c <_dtoa_r+0x474>
 800add2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800add4:	1e7b      	subs	r3, r7, #1
 800add6:	9314      	str	r3, [sp, #80]	; 0x50
 800add8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800addc:	2b30      	cmp	r3, #48	; 0x30
 800adde:	d0f8      	beq.n	800add2 <_dtoa_r+0x63a>
 800ade0:	46c2      	mov	sl, r8
 800ade2:	e03b      	b.n	800ae5c <_dtoa_r+0x6c4>
 800ade4:	4b92      	ldr	r3, [pc, #584]	; (800b030 <_dtoa_r+0x898>)
 800ade6:	f7f5 fbdf 	bl	80005a8 <__aeabi_dmul>
 800adea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800adee:	e7bc      	b.n	800ad6a <_dtoa_r+0x5d2>
 800adf0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800adf4:	9f03      	ldr	r7, [sp, #12]
 800adf6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800adfa:	4640      	mov	r0, r8
 800adfc:	4649      	mov	r1, r9
 800adfe:	f7f5 fcfd 	bl	80007fc <__aeabi_ddiv>
 800ae02:	f7f5 fe81 	bl	8000b08 <__aeabi_d2iz>
 800ae06:	4604      	mov	r4, r0
 800ae08:	f7f5 fb64 	bl	80004d4 <__aeabi_i2d>
 800ae0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ae10:	f7f5 fbca 	bl	80005a8 <__aeabi_dmul>
 800ae14:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800ae18:	4602      	mov	r2, r0
 800ae1a:	460b      	mov	r3, r1
 800ae1c:	4640      	mov	r0, r8
 800ae1e:	4649      	mov	r1, r9
 800ae20:	f7f5 fa0a 	bl	8000238 <__aeabi_dsub>
 800ae24:	f807 6b01 	strb.w	r6, [r7], #1
 800ae28:	9e03      	ldr	r6, [sp, #12]
 800ae2a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800ae2e:	1bbe      	subs	r6, r7, r6
 800ae30:	45b4      	cmp	ip, r6
 800ae32:	4602      	mov	r2, r0
 800ae34:	460b      	mov	r3, r1
 800ae36:	d136      	bne.n	800aea6 <_dtoa_r+0x70e>
 800ae38:	f7f5 fa00 	bl	800023c <__adddf3>
 800ae3c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ae40:	4680      	mov	r8, r0
 800ae42:	4689      	mov	r9, r1
 800ae44:	f7f5 fe40 	bl	8000ac8 <__aeabi_dcmpgt>
 800ae48:	bb58      	cbnz	r0, 800aea2 <_dtoa_r+0x70a>
 800ae4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ae4e:	4640      	mov	r0, r8
 800ae50:	4649      	mov	r1, r9
 800ae52:	f7f5 fe11 	bl	8000a78 <__aeabi_dcmpeq>
 800ae56:	b108      	cbz	r0, 800ae5c <_dtoa_r+0x6c4>
 800ae58:	07e1      	lsls	r1, r4, #31
 800ae5a:	d422      	bmi.n	800aea2 <_dtoa_r+0x70a>
 800ae5c:	4628      	mov	r0, r5
 800ae5e:	4659      	mov	r1, fp
 800ae60:	f000 fe50 	bl	800bb04 <_Bfree>
 800ae64:	2300      	movs	r3, #0
 800ae66:	703b      	strb	r3, [r7, #0]
 800ae68:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ae6a:	f10a 0001 	add.w	r0, sl, #1
 800ae6e:	6018      	str	r0, [r3, #0]
 800ae70:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	f43f acdd 	beq.w	800a832 <_dtoa_r+0x9a>
 800ae78:	601f      	str	r7, [r3, #0]
 800ae7a:	e4da      	b.n	800a832 <_dtoa_r+0x9a>
 800ae7c:	4627      	mov	r7, r4
 800ae7e:	463b      	mov	r3, r7
 800ae80:	461f      	mov	r7, r3
 800ae82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae86:	2a39      	cmp	r2, #57	; 0x39
 800ae88:	d107      	bne.n	800ae9a <_dtoa_r+0x702>
 800ae8a:	9a03      	ldr	r2, [sp, #12]
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	d1f7      	bne.n	800ae80 <_dtoa_r+0x6e8>
 800ae90:	9903      	ldr	r1, [sp, #12]
 800ae92:	2230      	movs	r2, #48	; 0x30
 800ae94:	f108 0801 	add.w	r8, r8, #1
 800ae98:	700a      	strb	r2, [r1, #0]
 800ae9a:	781a      	ldrb	r2, [r3, #0]
 800ae9c:	3201      	adds	r2, #1
 800ae9e:	701a      	strb	r2, [r3, #0]
 800aea0:	e79e      	b.n	800ade0 <_dtoa_r+0x648>
 800aea2:	46d0      	mov	r8, sl
 800aea4:	e7eb      	b.n	800ae7e <_dtoa_r+0x6e6>
 800aea6:	4b62      	ldr	r3, [pc, #392]	; (800b030 <_dtoa_r+0x898>)
 800aea8:	2200      	movs	r2, #0
 800aeaa:	f7f5 fb7d 	bl	80005a8 <__aeabi_dmul>
 800aeae:	2200      	movs	r2, #0
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	4680      	mov	r8, r0
 800aeb4:	4689      	mov	r9, r1
 800aeb6:	f7f5 fddf 	bl	8000a78 <__aeabi_dcmpeq>
 800aeba:	2800      	cmp	r0, #0
 800aebc:	d09b      	beq.n	800adf6 <_dtoa_r+0x65e>
 800aebe:	e7cd      	b.n	800ae5c <_dtoa_r+0x6c4>
 800aec0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aec2:	2a00      	cmp	r2, #0
 800aec4:	f000 80d0 	beq.w	800b068 <_dtoa_r+0x8d0>
 800aec8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800aeca:	2a01      	cmp	r2, #1
 800aecc:	f300 80b2 	bgt.w	800b034 <_dtoa_r+0x89c>
 800aed0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800aed2:	2a00      	cmp	r2, #0
 800aed4:	f000 80a6 	beq.w	800b024 <_dtoa_r+0x88c>
 800aed8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800aedc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800aede:	9f06      	ldr	r7, [sp, #24]
 800aee0:	9a06      	ldr	r2, [sp, #24]
 800aee2:	441a      	add	r2, r3
 800aee4:	9206      	str	r2, [sp, #24]
 800aee6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aee8:	2101      	movs	r1, #1
 800aeea:	441a      	add	r2, r3
 800aeec:	4628      	mov	r0, r5
 800aeee:	9209      	str	r2, [sp, #36]	; 0x24
 800aef0:	f000 ff08 	bl	800bd04 <__i2b>
 800aef4:	4606      	mov	r6, r0
 800aef6:	2f00      	cmp	r7, #0
 800aef8:	dd0c      	ble.n	800af14 <_dtoa_r+0x77c>
 800aefa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	dd09      	ble.n	800af14 <_dtoa_r+0x77c>
 800af00:	42bb      	cmp	r3, r7
 800af02:	9a06      	ldr	r2, [sp, #24]
 800af04:	bfa8      	it	ge
 800af06:	463b      	movge	r3, r7
 800af08:	1ad2      	subs	r2, r2, r3
 800af0a:	9206      	str	r2, [sp, #24]
 800af0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af0e:	1aff      	subs	r7, r7, r3
 800af10:	1ad3      	subs	r3, r2, r3
 800af12:	9309      	str	r3, [sp, #36]	; 0x24
 800af14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af16:	b1f3      	cbz	r3, 800af56 <_dtoa_r+0x7be>
 800af18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	f000 80a8 	beq.w	800b070 <_dtoa_r+0x8d8>
 800af20:	2c00      	cmp	r4, #0
 800af22:	dd10      	ble.n	800af46 <_dtoa_r+0x7ae>
 800af24:	4631      	mov	r1, r6
 800af26:	4622      	mov	r2, r4
 800af28:	4628      	mov	r0, r5
 800af2a:	f000 ffa9 	bl	800be80 <__pow5mult>
 800af2e:	465a      	mov	r2, fp
 800af30:	4601      	mov	r1, r0
 800af32:	4606      	mov	r6, r0
 800af34:	4628      	mov	r0, r5
 800af36:	f000 fefb 	bl	800bd30 <__multiply>
 800af3a:	4659      	mov	r1, fp
 800af3c:	4680      	mov	r8, r0
 800af3e:	4628      	mov	r0, r5
 800af40:	f000 fde0 	bl	800bb04 <_Bfree>
 800af44:	46c3      	mov	fp, r8
 800af46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af48:	1b1a      	subs	r2, r3, r4
 800af4a:	d004      	beq.n	800af56 <_dtoa_r+0x7be>
 800af4c:	4659      	mov	r1, fp
 800af4e:	4628      	mov	r0, r5
 800af50:	f000 ff96 	bl	800be80 <__pow5mult>
 800af54:	4683      	mov	fp, r0
 800af56:	2101      	movs	r1, #1
 800af58:	4628      	mov	r0, r5
 800af5a:	f000 fed3 	bl	800bd04 <__i2b>
 800af5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af60:	2b00      	cmp	r3, #0
 800af62:	4604      	mov	r4, r0
 800af64:	f340 8086 	ble.w	800b074 <_dtoa_r+0x8dc>
 800af68:	461a      	mov	r2, r3
 800af6a:	4601      	mov	r1, r0
 800af6c:	4628      	mov	r0, r5
 800af6e:	f000 ff87 	bl	800be80 <__pow5mult>
 800af72:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800af74:	2b01      	cmp	r3, #1
 800af76:	4604      	mov	r4, r0
 800af78:	dd7f      	ble.n	800b07a <_dtoa_r+0x8e2>
 800af7a:	f04f 0800 	mov.w	r8, #0
 800af7e:	6923      	ldr	r3, [r4, #16]
 800af80:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800af84:	6918      	ldr	r0, [r3, #16]
 800af86:	f000 fe6f 	bl	800bc68 <__hi0bits>
 800af8a:	f1c0 0020 	rsb	r0, r0, #32
 800af8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af90:	4418      	add	r0, r3
 800af92:	f010 001f 	ands.w	r0, r0, #31
 800af96:	f000 8092 	beq.w	800b0be <_dtoa_r+0x926>
 800af9a:	f1c0 0320 	rsb	r3, r0, #32
 800af9e:	2b04      	cmp	r3, #4
 800afa0:	f340 808a 	ble.w	800b0b8 <_dtoa_r+0x920>
 800afa4:	f1c0 001c 	rsb	r0, r0, #28
 800afa8:	9b06      	ldr	r3, [sp, #24]
 800afaa:	4403      	add	r3, r0
 800afac:	9306      	str	r3, [sp, #24]
 800afae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afb0:	4403      	add	r3, r0
 800afb2:	4407      	add	r7, r0
 800afb4:	9309      	str	r3, [sp, #36]	; 0x24
 800afb6:	9b06      	ldr	r3, [sp, #24]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	dd05      	ble.n	800afc8 <_dtoa_r+0x830>
 800afbc:	4659      	mov	r1, fp
 800afbe:	461a      	mov	r2, r3
 800afc0:	4628      	mov	r0, r5
 800afc2:	f000 ffb7 	bl	800bf34 <__lshift>
 800afc6:	4683      	mov	fp, r0
 800afc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afca:	2b00      	cmp	r3, #0
 800afcc:	dd05      	ble.n	800afda <_dtoa_r+0x842>
 800afce:	4621      	mov	r1, r4
 800afd0:	461a      	mov	r2, r3
 800afd2:	4628      	mov	r0, r5
 800afd4:	f000 ffae 	bl	800bf34 <__lshift>
 800afd8:	4604      	mov	r4, r0
 800afda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d070      	beq.n	800b0c2 <_dtoa_r+0x92a>
 800afe0:	4621      	mov	r1, r4
 800afe2:	4658      	mov	r0, fp
 800afe4:	f001 f816 	bl	800c014 <__mcmp>
 800afe8:	2800      	cmp	r0, #0
 800afea:	da6a      	bge.n	800b0c2 <_dtoa_r+0x92a>
 800afec:	2300      	movs	r3, #0
 800afee:	4659      	mov	r1, fp
 800aff0:	220a      	movs	r2, #10
 800aff2:	4628      	mov	r0, r5
 800aff4:	f000 fda8 	bl	800bb48 <__multadd>
 800aff8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800affa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800affe:	4683      	mov	fp, r0
 800b000:	2b00      	cmp	r3, #0
 800b002:	f000 8194 	beq.w	800b32e <_dtoa_r+0xb96>
 800b006:	4631      	mov	r1, r6
 800b008:	2300      	movs	r3, #0
 800b00a:	220a      	movs	r2, #10
 800b00c:	4628      	mov	r0, r5
 800b00e:	f000 fd9b 	bl	800bb48 <__multadd>
 800b012:	f1b9 0f00 	cmp.w	r9, #0
 800b016:	4606      	mov	r6, r0
 800b018:	f300 8093 	bgt.w	800b142 <_dtoa_r+0x9aa>
 800b01c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b01e:	2b02      	cmp	r3, #2
 800b020:	dc57      	bgt.n	800b0d2 <_dtoa_r+0x93a>
 800b022:	e08e      	b.n	800b142 <_dtoa_r+0x9aa>
 800b024:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b026:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b02a:	e757      	b.n	800aedc <_dtoa_r+0x744>
 800b02c:	3fe00000 	.word	0x3fe00000
 800b030:	40240000 	.word	0x40240000
 800b034:	9b08      	ldr	r3, [sp, #32]
 800b036:	1e5c      	subs	r4, r3, #1
 800b038:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b03a:	42a3      	cmp	r3, r4
 800b03c:	bfbf      	itttt	lt
 800b03e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b040:	940a      	strlt	r4, [sp, #40]	; 0x28
 800b042:	1ae2      	sublt	r2, r4, r3
 800b044:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b046:	bfb6      	itet	lt
 800b048:	189b      	addlt	r3, r3, r2
 800b04a:	1b1c      	subge	r4, r3, r4
 800b04c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b04e:	9b08      	ldr	r3, [sp, #32]
 800b050:	bfb8      	it	lt
 800b052:	2400      	movlt	r4, #0
 800b054:	2b00      	cmp	r3, #0
 800b056:	bfb9      	ittee	lt
 800b058:	9b06      	ldrlt	r3, [sp, #24]
 800b05a:	9a08      	ldrlt	r2, [sp, #32]
 800b05c:	9f06      	ldrge	r7, [sp, #24]
 800b05e:	9b08      	ldrge	r3, [sp, #32]
 800b060:	bfbc      	itt	lt
 800b062:	1a9f      	sublt	r7, r3, r2
 800b064:	2300      	movlt	r3, #0
 800b066:	e73b      	b.n	800aee0 <_dtoa_r+0x748>
 800b068:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b06a:	9f06      	ldr	r7, [sp, #24]
 800b06c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b06e:	e742      	b.n	800aef6 <_dtoa_r+0x75e>
 800b070:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b072:	e76b      	b.n	800af4c <_dtoa_r+0x7b4>
 800b074:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b076:	2b01      	cmp	r3, #1
 800b078:	dc19      	bgt.n	800b0ae <_dtoa_r+0x916>
 800b07a:	9b04      	ldr	r3, [sp, #16]
 800b07c:	b9bb      	cbnz	r3, 800b0ae <_dtoa_r+0x916>
 800b07e:	9b05      	ldr	r3, [sp, #20]
 800b080:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b084:	b99b      	cbnz	r3, 800b0ae <_dtoa_r+0x916>
 800b086:	9b05      	ldr	r3, [sp, #20]
 800b088:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b08c:	0d1b      	lsrs	r3, r3, #20
 800b08e:	051b      	lsls	r3, r3, #20
 800b090:	b183      	cbz	r3, 800b0b4 <_dtoa_r+0x91c>
 800b092:	9b06      	ldr	r3, [sp, #24]
 800b094:	3301      	adds	r3, #1
 800b096:	9306      	str	r3, [sp, #24]
 800b098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b09a:	3301      	adds	r3, #1
 800b09c:	9309      	str	r3, [sp, #36]	; 0x24
 800b09e:	f04f 0801 	mov.w	r8, #1
 800b0a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	f47f af6a 	bne.w	800af7e <_dtoa_r+0x7e6>
 800b0aa:	2001      	movs	r0, #1
 800b0ac:	e76f      	b.n	800af8e <_dtoa_r+0x7f6>
 800b0ae:	f04f 0800 	mov.w	r8, #0
 800b0b2:	e7f6      	b.n	800b0a2 <_dtoa_r+0x90a>
 800b0b4:	4698      	mov	r8, r3
 800b0b6:	e7f4      	b.n	800b0a2 <_dtoa_r+0x90a>
 800b0b8:	f43f af7d 	beq.w	800afb6 <_dtoa_r+0x81e>
 800b0bc:	4618      	mov	r0, r3
 800b0be:	301c      	adds	r0, #28
 800b0c0:	e772      	b.n	800afa8 <_dtoa_r+0x810>
 800b0c2:	9b08      	ldr	r3, [sp, #32]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	dc36      	bgt.n	800b136 <_dtoa_r+0x99e>
 800b0c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b0ca:	2b02      	cmp	r3, #2
 800b0cc:	dd33      	ble.n	800b136 <_dtoa_r+0x99e>
 800b0ce:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b0d2:	f1b9 0f00 	cmp.w	r9, #0
 800b0d6:	d10d      	bne.n	800b0f4 <_dtoa_r+0x95c>
 800b0d8:	4621      	mov	r1, r4
 800b0da:	464b      	mov	r3, r9
 800b0dc:	2205      	movs	r2, #5
 800b0de:	4628      	mov	r0, r5
 800b0e0:	f000 fd32 	bl	800bb48 <__multadd>
 800b0e4:	4601      	mov	r1, r0
 800b0e6:	4604      	mov	r4, r0
 800b0e8:	4658      	mov	r0, fp
 800b0ea:	f000 ff93 	bl	800c014 <__mcmp>
 800b0ee:	2800      	cmp	r0, #0
 800b0f0:	f73f adb8 	bgt.w	800ac64 <_dtoa_r+0x4cc>
 800b0f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b0f6:	9f03      	ldr	r7, [sp, #12]
 800b0f8:	ea6f 0a03 	mvn.w	sl, r3
 800b0fc:	f04f 0800 	mov.w	r8, #0
 800b100:	4621      	mov	r1, r4
 800b102:	4628      	mov	r0, r5
 800b104:	f000 fcfe 	bl	800bb04 <_Bfree>
 800b108:	2e00      	cmp	r6, #0
 800b10a:	f43f aea7 	beq.w	800ae5c <_dtoa_r+0x6c4>
 800b10e:	f1b8 0f00 	cmp.w	r8, #0
 800b112:	d005      	beq.n	800b120 <_dtoa_r+0x988>
 800b114:	45b0      	cmp	r8, r6
 800b116:	d003      	beq.n	800b120 <_dtoa_r+0x988>
 800b118:	4641      	mov	r1, r8
 800b11a:	4628      	mov	r0, r5
 800b11c:	f000 fcf2 	bl	800bb04 <_Bfree>
 800b120:	4631      	mov	r1, r6
 800b122:	4628      	mov	r0, r5
 800b124:	f000 fcee 	bl	800bb04 <_Bfree>
 800b128:	e698      	b.n	800ae5c <_dtoa_r+0x6c4>
 800b12a:	2400      	movs	r4, #0
 800b12c:	4626      	mov	r6, r4
 800b12e:	e7e1      	b.n	800b0f4 <_dtoa_r+0x95c>
 800b130:	46c2      	mov	sl, r8
 800b132:	4626      	mov	r6, r4
 800b134:	e596      	b.n	800ac64 <_dtoa_r+0x4cc>
 800b136:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b138:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	f000 80fd 	beq.w	800b33c <_dtoa_r+0xba4>
 800b142:	2f00      	cmp	r7, #0
 800b144:	dd05      	ble.n	800b152 <_dtoa_r+0x9ba>
 800b146:	4631      	mov	r1, r6
 800b148:	463a      	mov	r2, r7
 800b14a:	4628      	mov	r0, r5
 800b14c:	f000 fef2 	bl	800bf34 <__lshift>
 800b150:	4606      	mov	r6, r0
 800b152:	f1b8 0f00 	cmp.w	r8, #0
 800b156:	d05c      	beq.n	800b212 <_dtoa_r+0xa7a>
 800b158:	6871      	ldr	r1, [r6, #4]
 800b15a:	4628      	mov	r0, r5
 800b15c:	f000 fc92 	bl	800ba84 <_Balloc>
 800b160:	4607      	mov	r7, r0
 800b162:	b928      	cbnz	r0, 800b170 <_dtoa_r+0x9d8>
 800b164:	4b80      	ldr	r3, [pc, #512]	; (800b368 <_dtoa_r+0xbd0>)
 800b166:	4602      	mov	r2, r0
 800b168:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b16c:	f7ff bb28 	b.w	800a7c0 <_dtoa_r+0x28>
 800b170:	6932      	ldr	r2, [r6, #16]
 800b172:	3202      	adds	r2, #2
 800b174:	0092      	lsls	r2, r2, #2
 800b176:	f106 010c 	add.w	r1, r6, #12
 800b17a:	300c      	adds	r0, #12
 800b17c:	f7fd fc64 	bl	8008a48 <memcpy>
 800b180:	2201      	movs	r2, #1
 800b182:	4639      	mov	r1, r7
 800b184:	4628      	mov	r0, r5
 800b186:	f000 fed5 	bl	800bf34 <__lshift>
 800b18a:	9b03      	ldr	r3, [sp, #12]
 800b18c:	3301      	adds	r3, #1
 800b18e:	9308      	str	r3, [sp, #32]
 800b190:	9b03      	ldr	r3, [sp, #12]
 800b192:	444b      	add	r3, r9
 800b194:	930a      	str	r3, [sp, #40]	; 0x28
 800b196:	9b04      	ldr	r3, [sp, #16]
 800b198:	f003 0301 	and.w	r3, r3, #1
 800b19c:	46b0      	mov	r8, r6
 800b19e:	9309      	str	r3, [sp, #36]	; 0x24
 800b1a0:	4606      	mov	r6, r0
 800b1a2:	9b08      	ldr	r3, [sp, #32]
 800b1a4:	4621      	mov	r1, r4
 800b1a6:	3b01      	subs	r3, #1
 800b1a8:	4658      	mov	r0, fp
 800b1aa:	9304      	str	r3, [sp, #16]
 800b1ac:	f7ff fa6c 	bl	800a688 <quorem>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	3330      	adds	r3, #48	; 0x30
 800b1b4:	9006      	str	r0, [sp, #24]
 800b1b6:	4641      	mov	r1, r8
 800b1b8:	4658      	mov	r0, fp
 800b1ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800b1bc:	f000 ff2a 	bl	800c014 <__mcmp>
 800b1c0:	4632      	mov	r2, r6
 800b1c2:	4681      	mov	r9, r0
 800b1c4:	4621      	mov	r1, r4
 800b1c6:	4628      	mov	r0, r5
 800b1c8:	f000 ff40 	bl	800c04c <__mdiff>
 800b1cc:	68c2      	ldr	r2, [r0, #12]
 800b1ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1d0:	4607      	mov	r7, r0
 800b1d2:	bb02      	cbnz	r2, 800b216 <_dtoa_r+0xa7e>
 800b1d4:	4601      	mov	r1, r0
 800b1d6:	4658      	mov	r0, fp
 800b1d8:	f000 ff1c 	bl	800c014 <__mcmp>
 800b1dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1de:	4602      	mov	r2, r0
 800b1e0:	4639      	mov	r1, r7
 800b1e2:	4628      	mov	r0, r5
 800b1e4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800b1e8:	f000 fc8c 	bl	800bb04 <_Bfree>
 800b1ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b1ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b1f0:	9f08      	ldr	r7, [sp, #32]
 800b1f2:	ea43 0102 	orr.w	r1, r3, r2
 800b1f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1f8:	430b      	orrs	r3, r1
 800b1fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1fc:	d10d      	bne.n	800b21a <_dtoa_r+0xa82>
 800b1fe:	2b39      	cmp	r3, #57	; 0x39
 800b200:	d029      	beq.n	800b256 <_dtoa_r+0xabe>
 800b202:	f1b9 0f00 	cmp.w	r9, #0
 800b206:	dd01      	ble.n	800b20c <_dtoa_r+0xa74>
 800b208:	9b06      	ldr	r3, [sp, #24]
 800b20a:	3331      	adds	r3, #49	; 0x31
 800b20c:	9a04      	ldr	r2, [sp, #16]
 800b20e:	7013      	strb	r3, [r2, #0]
 800b210:	e776      	b.n	800b100 <_dtoa_r+0x968>
 800b212:	4630      	mov	r0, r6
 800b214:	e7b9      	b.n	800b18a <_dtoa_r+0x9f2>
 800b216:	2201      	movs	r2, #1
 800b218:	e7e2      	b.n	800b1e0 <_dtoa_r+0xa48>
 800b21a:	f1b9 0f00 	cmp.w	r9, #0
 800b21e:	db06      	blt.n	800b22e <_dtoa_r+0xa96>
 800b220:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b222:	ea41 0909 	orr.w	r9, r1, r9
 800b226:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b228:	ea59 0101 	orrs.w	r1, r9, r1
 800b22c:	d120      	bne.n	800b270 <_dtoa_r+0xad8>
 800b22e:	2a00      	cmp	r2, #0
 800b230:	ddec      	ble.n	800b20c <_dtoa_r+0xa74>
 800b232:	4659      	mov	r1, fp
 800b234:	2201      	movs	r2, #1
 800b236:	4628      	mov	r0, r5
 800b238:	9308      	str	r3, [sp, #32]
 800b23a:	f000 fe7b 	bl	800bf34 <__lshift>
 800b23e:	4621      	mov	r1, r4
 800b240:	4683      	mov	fp, r0
 800b242:	f000 fee7 	bl	800c014 <__mcmp>
 800b246:	2800      	cmp	r0, #0
 800b248:	9b08      	ldr	r3, [sp, #32]
 800b24a:	dc02      	bgt.n	800b252 <_dtoa_r+0xaba>
 800b24c:	d1de      	bne.n	800b20c <_dtoa_r+0xa74>
 800b24e:	07da      	lsls	r2, r3, #31
 800b250:	d5dc      	bpl.n	800b20c <_dtoa_r+0xa74>
 800b252:	2b39      	cmp	r3, #57	; 0x39
 800b254:	d1d8      	bne.n	800b208 <_dtoa_r+0xa70>
 800b256:	9a04      	ldr	r2, [sp, #16]
 800b258:	2339      	movs	r3, #57	; 0x39
 800b25a:	7013      	strb	r3, [r2, #0]
 800b25c:	463b      	mov	r3, r7
 800b25e:	461f      	mov	r7, r3
 800b260:	3b01      	subs	r3, #1
 800b262:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800b266:	2a39      	cmp	r2, #57	; 0x39
 800b268:	d050      	beq.n	800b30c <_dtoa_r+0xb74>
 800b26a:	3201      	adds	r2, #1
 800b26c:	701a      	strb	r2, [r3, #0]
 800b26e:	e747      	b.n	800b100 <_dtoa_r+0x968>
 800b270:	2a00      	cmp	r2, #0
 800b272:	dd03      	ble.n	800b27c <_dtoa_r+0xae4>
 800b274:	2b39      	cmp	r3, #57	; 0x39
 800b276:	d0ee      	beq.n	800b256 <_dtoa_r+0xabe>
 800b278:	3301      	adds	r3, #1
 800b27a:	e7c7      	b.n	800b20c <_dtoa_r+0xa74>
 800b27c:	9a08      	ldr	r2, [sp, #32]
 800b27e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b280:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b284:	428a      	cmp	r2, r1
 800b286:	d02a      	beq.n	800b2de <_dtoa_r+0xb46>
 800b288:	4659      	mov	r1, fp
 800b28a:	2300      	movs	r3, #0
 800b28c:	220a      	movs	r2, #10
 800b28e:	4628      	mov	r0, r5
 800b290:	f000 fc5a 	bl	800bb48 <__multadd>
 800b294:	45b0      	cmp	r8, r6
 800b296:	4683      	mov	fp, r0
 800b298:	f04f 0300 	mov.w	r3, #0
 800b29c:	f04f 020a 	mov.w	r2, #10
 800b2a0:	4641      	mov	r1, r8
 800b2a2:	4628      	mov	r0, r5
 800b2a4:	d107      	bne.n	800b2b6 <_dtoa_r+0xb1e>
 800b2a6:	f000 fc4f 	bl	800bb48 <__multadd>
 800b2aa:	4680      	mov	r8, r0
 800b2ac:	4606      	mov	r6, r0
 800b2ae:	9b08      	ldr	r3, [sp, #32]
 800b2b0:	3301      	adds	r3, #1
 800b2b2:	9308      	str	r3, [sp, #32]
 800b2b4:	e775      	b.n	800b1a2 <_dtoa_r+0xa0a>
 800b2b6:	f000 fc47 	bl	800bb48 <__multadd>
 800b2ba:	4631      	mov	r1, r6
 800b2bc:	4680      	mov	r8, r0
 800b2be:	2300      	movs	r3, #0
 800b2c0:	220a      	movs	r2, #10
 800b2c2:	4628      	mov	r0, r5
 800b2c4:	f000 fc40 	bl	800bb48 <__multadd>
 800b2c8:	4606      	mov	r6, r0
 800b2ca:	e7f0      	b.n	800b2ae <_dtoa_r+0xb16>
 800b2cc:	f1b9 0f00 	cmp.w	r9, #0
 800b2d0:	9a03      	ldr	r2, [sp, #12]
 800b2d2:	bfcc      	ite	gt
 800b2d4:	464f      	movgt	r7, r9
 800b2d6:	2701      	movle	r7, #1
 800b2d8:	4417      	add	r7, r2
 800b2da:	f04f 0800 	mov.w	r8, #0
 800b2de:	4659      	mov	r1, fp
 800b2e0:	2201      	movs	r2, #1
 800b2e2:	4628      	mov	r0, r5
 800b2e4:	9308      	str	r3, [sp, #32]
 800b2e6:	f000 fe25 	bl	800bf34 <__lshift>
 800b2ea:	4621      	mov	r1, r4
 800b2ec:	4683      	mov	fp, r0
 800b2ee:	f000 fe91 	bl	800c014 <__mcmp>
 800b2f2:	2800      	cmp	r0, #0
 800b2f4:	dcb2      	bgt.n	800b25c <_dtoa_r+0xac4>
 800b2f6:	d102      	bne.n	800b2fe <_dtoa_r+0xb66>
 800b2f8:	9b08      	ldr	r3, [sp, #32]
 800b2fa:	07db      	lsls	r3, r3, #31
 800b2fc:	d4ae      	bmi.n	800b25c <_dtoa_r+0xac4>
 800b2fe:	463b      	mov	r3, r7
 800b300:	461f      	mov	r7, r3
 800b302:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b306:	2a30      	cmp	r2, #48	; 0x30
 800b308:	d0fa      	beq.n	800b300 <_dtoa_r+0xb68>
 800b30a:	e6f9      	b.n	800b100 <_dtoa_r+0x968>
 800b30c:	9a03      	ldr	r2, [sp, #12]
 800b30e:	429a      	cmp	r2, r3
 800b310:	d1a5      	bne.n	800b25e <_dtoa_r+0xac6>
 800b312:	f10a 0a01 	add.w	sl, sl, #1
 800b316:	2331      	movs	r3, #49	; 0x31
 800b318:	e779      	b.n	800b20e <_dtoa_r+0xa76>
 800b31a:	4b14      	ldr	r3, [pc, #80]	; (800b36c <_dtoa_r+0xbd4>)
 800b31c:	f7ff baa7 	b.w	800a86e <_dtoa_r+0xd6>
 800b320:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b322:	2b00      	cmp	r3, #0
 800b324:	f47f aa80 	bne.w	800a828 <_dtoa_r+0x90>
 800b328:	4b11      	ldr	r3, [pc, #68]	; (800b370 <_dtoa_r+0xbd8>)
 800b32a:	f7ff baa0 	b.w	800a86e <_dtoa_r+0xd6>
 800b32e:	f1b9 0f00 	cmp.w	r9, #0
 800b332:	dc03      	bgt.n	800b33c <_dtoa_r+0xba4>
 800b334:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b336:	2b02      	cmp	r3, #2
 800b338:	f73f aecb 	bgt.w	800b0d2 <_dtoa_r+0x93a>
 800b33c:	9f03      	ldr	r7, [sp, #12]
 800b33e:	4621      	mov	r1, r4
 800b340:	4658      	mov	r0, fp
 800b342:	f7ff f9a1 	bl	800a688 <quorem>
 800b346:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b34a:	f807 3b01 	strb.w	r3, [r7], #1
 800b34e:	9a03      	ldr	r2, [sp, #12]
 800b350:	1aba      	subs	r2, r7, r2
 800b352:	4591      	cmp	r9, r2
 800b354:	ddba      	ble.n	800b2cc <_dtoa_r+0xb34>
 800b356:	4659      	mov	r1, fp
 800b358:	2300      	movs	r3, #0
 800b35a:	220a      	movs	r2, #10
 800b35c:	4628      	mov	r0, r5
 800b35e:	f000 fbf3 	bl	800bb48 <__multadd>
 800b362:	4683      	mov	fp, r0
 800b364:	e7eb      	b.n	800b33e <_dtoa_r+0xba6>
 800b366:	bf00      	nop
 800b368:	0800d878 	.word	0x0800d878
 800b36c:	0800d67c 	.word	0x0800d67c
 800b370:	0800d7f9 	.word	0x0800d7f9

0800b374 <rshift>:
 800b374:	6903      	ldr	r3, [r0, #16]
 800b376:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b37a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b37e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b382:	f100 0414 	add.w	r4, r0, #20
 800b386:	dd45      	ble.n	800b414 <rshift+0xa0>
 800b388:	f011 011f 	ands.w	r1, r1, #31
 800b38c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b390:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b394:	d10c      	bne.n	800b3b0 <rshift+0x3c>
 800b396:	f100 0710 	add.w	r7, r0, #16
 800b39a:	4629      	mov	r1, r5
 800b39c:	42b1      	cmp	r1, r6
 800b39e:	d334      	bcc.n	800b40a <rshift+0x96>
 800b3a0:	1a9b      	subs	r3, r3, r2
 800b3a2:	009b      	lsls	r3, r3, #2
 800b3a4:	1eea      	subs	r2, r5, #3
 800b3a6:	4296      	cmp	r6, r2
 800b3a8:	bf38      	it	cc
 800b3aa:	2300      	movcc	r3, #0
 800b3ac:	4423      	add	r3, r4
 800b3ae:	e015      	b.n	800b3dc <rshift+0x68>
 800b3b0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b3b4:	f1c1 0820 	rsb	r8, r1, #32
 800b3b8:	40cf      	lsrs	r7, r1
 800b3ba:	f105 0e04 	add.w	lr, r5, #4
 800b3be:	46a1      	mov	r9, r4
 800b3c0:	4576      	cmp	r6, lr
 800b3c2:	46f4      	mov	ip, lr
 800b3c4:	d815      	bhi.n	800b3f2 <rshift+0x7e>
 800b3c6:	1a9a      	subs	r2, r3, r2
 800b3c8:	0092      	lsls	r2, r2, #2
 800b3ca:	3a04      	subs	r2, #4
 800b3cc:	3501      	adds	r5, #1
 800b3ce:	42ae      	cmp	r6, r5
 800b3d0:	bf38      	it	cc
 800b3d2:	2200      	movcc	r2, #0
 800b3d4:	18a3      	adds	r3, r4, r2
 800b3d6:	50a7      	str	r7, [r4, r2]
 800b3d8:	b107      	cbz	r7, 800b3dc <rshift+0x68>
 800b3da:	3304      	adds	r3, #4
 800b3dc:	1b1a      	subs	r2, r3, r4
 800b3de:	42a3      	cmp	r3, r4
 800b3e0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b3e4:	bf08      	it	eq
 800b3e6:	2300      	moveq	r3, #0
 800b3e8:	6102      	str	r2, [r0, #16]
 800b3ea:	bf08      	it	eq
 800b3ec:	6143      	streq	r3, [r0, #20]
 800b3ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3f2:	f8dc c000 	ldr.w	ip, [ip]
 800b3f6:	fa0c fc08 	lsl.w	ip, ip, r8
 800b3fa:	ea4c 0707 	orr.w	r7, ip, r7
 800b3fe:	f849 7b04 	str.w	r7, [r9], #4
 800b402:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b406:	40cf      	lsrs	r7, r1
 800b408:	e7da      	b.n	800b3c0 <rshift+0x4c>
 800b40a:	f851 cb04 	ldr.w	ip, [r1], #4
 800b40e:	f847 cf04 	str.w	ip, [r7, #4]!
 800b412:	e7c3      	b.n	800b39c <rshift+0x28>
 800b414:	4623      	mov	r3, r4
 800b416:	e7e1      	b.n	800b3dc <rshift+0x68>

0800b418 <__hexdig_fun>:
 800b418:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b41c:	2b09      	cmp	r3, #9
 800b41e:	d802      	bhi.n	800b426 <__hexdig_fun+0xe>
 800b420:	3820      	subs	r0, #32
 800b422:	b2c0      	uxtb	r0, r0
 800b424:	4770      	bx	lr
 800b426:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b42a:	2b05      	cmp	r3, #5
 800b42c:	d801      	bhi.n	800b432 <__hexdig_fun+0x1a>
 800b42e:	3847      	subs	r0, #71	; 0x47
 800b430:	e7f7      	b.n	800b422 <__hexdig_fun+0xa>
 800b432:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b436:	2b05      	cmp	r3, #5
 800b438:	d801      	bhi.n	800b43e <__hexdig_fun+0x26>
 800b43a:	3827      	subs	r0, #39	; 0x27
 800b43c:	e7f1      	b.n	800b422 <__hexdig_fun+0xa>
 800b43e:	2000      	movs	r0, #0
 800b440:	4770      	bx	lr
	...

0800b444 <__gethex>:
 800b444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b448:	b08b      	sub	sp, #44	; 0x2c
 800b44a:	468b      	mov	fp, r1
 800b44c:	9305      	str	r3, [sp, #20]
 800b44e:	4bb2      	ldr	r3, [pc, #712]	; (800b718 <__gethex+0x2d4>)
 800b450:	9002      	str	r0, [sp, #8]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	9303      	str	r3, [sp, #12]
 800b456:	4618      	mov	r0, r3
 800b458:	4690      	mov	r8, r2
 800b45a:	f7f4 fe91 	bl	8000180 <strlen>
 800b45e:	9b03      	ldr	r3, [sp, #12]
 800b460:	f8db 2000 	ldr.w	r2, [fp]
 800b464:	4403      	add	r3, r0
 800b466:	4682      	mov	sl, r0
 800b468:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b46c:	9306      	str	r3, [sp, #24]
 800b46e:	1c93      	adds	r3, r2, #2
 800b470:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b474:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b478:	32fe      	adds	r2, #254	; 0xfe
 800b47a:	18d1      	adds	r1, r2, r3
 800b47c:	461f      	mov	r7, r3
 800b47e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b482:	9101      	str	r1, [sp, #4]
 800b484:	2830      	cmp	r0, #48	; 0x30
 800b486:	d0f8      	beq.n	800b47a <__gethex+0x36>
 800b488:	f7ff ffc6 	bl	800b418 <__hexdig_fun>
 800b48c:	4604      	mov	r4, r0
 800b48e:	2800      	cmp	r0, #0
 800b490:	d13a      	bne.n	800b508 <__gethex+0xc4>
 800b492:	9903      	ldr	r1, [sp, #12]
 800b494:	4652      	mov	r2, sl
 800b496:	4638      	mov	r0, r7
 800b498:	f001 f91e 	bl	800c6d8 <strncmp>
 800b49c:	4605      	mov	r5, r0
 800b49e:	2800      	cmp	r0, #0
 800b4a0:	d166      	bne.n	800b570 <__gethex+0x12c>
 800b4a2:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b4a6:	eb07 060a 	add.w	r6, r7, sl
 800b4aa:	f7ff ffb5 	bl	800b418 <__hexdig_fun>
 800b4ae:	2800      	cmp	r0, #0
 800b4b0:	d060      	beq.n	800b574 <__gethex+0x130>
 800b4b2:	4633      	mov	r3, r6
 800b4b4:	7818      	ldrb	r0, [r3, #0]
 800b4b6:	2830      	cmp	r0, #48	; 0x30
 800b4b8:	461f      	mov	r7, r3
 800b4ba:	f103 0301 	add.w	r3, r3, #1
 800b4be:	d0f9      	beq.n	800b4b4 <__gethex+0x70>
 800b4c0:	f7ff ffaa 	bl	800b418 <__hexdig_fun>
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	fab0 f480 	clz	r4, r0
 800b4ca:	0964      	lsrs	r4, r4, #5
 800b4cc:	4635      	mov	r5, r6
 800b4ce:	9301      	str	r3, [sp, #4]
 800b4d0:	463a      	mov	r2, r7
 800b4d2:	4616      	mov	r6, r2
 800b4d4:	3201      	adds	r2, #1
 800b4d6:	7830      	ldrb	r0, [r6, #0]
 800b4d8:	f7ff ff9e 	bl	800b418 <__hexdig_fun>
 800b4dc:	2800      	cmp	r0, #0
 800b4de:	d1f8      	bne.n	800b4d2 <__gethex+0x8e>
 800b4e0:	9903      	ldr	r1, [sp, #12]
 800b4e2:	4652      	mov	r2, sl
 800b4e4:	4630      	mov	r0, r6
 800b4e6:	f001 f8f7 	bl	800c6d8 <strncmp>
 800b4ea:	b980      	cbnz	r0, 800b50e <__gethex+0xca>
 800b4ec:	b94d      	cbnz	r5, 800b502 <__gethex+0xbe>
 800b4ee:	eb06 050a 	add.w	r5, r6, sl
 800b4f2:	462a      	mov	r2, r5
 800b4f4:	4616      	mov	r6, r2
 800b4f6:	3201      	adds	r2, #1
 800b4f8:	7830      	ldrb	r0, [r6, #0]
 800b4fa:	f7ff ff8d 	bl	800b418 <__hexdig_fun>
 800b4fe:	2800      	cmp	r0, #0
 800b500:	d1f8      	bne.n	800b4f4 <__gethex+0xb0>
 800b502:	1bad      	subs	r5, r5, r6
 800b504:	00ad      	lsls	r5, r5, #2
 800b506:	e004      	b.n	800b512 <__gethex+0xce>
 800b508:	2400      	movs	r4, #0
 800b50a:	4625      	mov	r5, r4
 800b50c:	e7e0      	b.n	800b4d0 <__gethex+0x8c>
 800b50e:	2d00      	cmp	r5, #0
 800b510:	d1f7      	bne.n	800b502 <__gethex+0xbe>
 800b512:	7833      	ldrb	r3, [r6, #0]
 800b514:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b518:	2b50      	cmp	r3, #80	; 0x50
 800b51a:	d139      	bne.n	800b590 <__gethex+0x14c>
 800b51c:	7873      	ldrb	r3, [r6, #1]
 800b51e:	2b2b      	cmp	r3, #43	; 0x2b
 800b520:	d02a      	beq.n	800b578 <__gethex+0x134>
 800b522:	2b2d      	cmp	r3, #45	; 0x2d
 800b524:	d02c      	beq.n	800b580 <__gethex+0x13c>
 800b526:	1c71      	adds	r1, r6, #1
 800b528:	f04f 0900 	mov.w	r9, #0
 800b52c:	7808      	ldrb	r0, [r1, #0]
 800b52e:	f7ff ff73 	bl	800b418 <__hexdig_fun>
 800b532:	1e43      	subs	r3, r0, #1
 800b534:	b2db      	uxtb	r3, r3
 800b536:	2b18      	cmp	r3, #24
 800b538:	d82a      	bhi.n	800b590 <__gethex+0x14c>
 800b53a:	f1a0 0210 	sub.w	r2, r0, #16
 800b53e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b542:	f7ff ff69 	bl	800b418 <__hexdig_fun>
 800b546:	1e43      	subs	r3, r0, #1
 800b548:	b2db      	uxtb	r3, r3
 800b54a:	2b18      	cmp	r3, #24
 800b54c:	d91b      	bls.n	800b586 <__gethex+0x142>
 800b54e:	f1b9 0f00 	cmp.w	r9, #0
 800b552:	d000      	beq.n	800b556 <__gethex+0x112>
 800b554:	4252      	negs	r2, r2
 800b556:	4415      	add	r5, r2
 800b558:	f8cb 1000 	str.w	r1, [fp]
 800b55c:	b1d4      	cbz	r4, 800b594 <__gethex+0x150>
 800b55e:	9b01      	ldr	r3, [sp, #4]
 800b560:	2b00      	cmp	r3, #0
 800b562:	bf14      	ite	ne
 800b564:	2700      	movne	r7, #0
 800b566:	2706      	moveq	r7, #6
 800b568:	4638      	mov	r0, r7
 800b56a:	b00b      	add	sp, #44	; 0x2c
 800b56c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b570:	463e      	mov	r6, r7
 800b572:	4625      	mov	r5, r4
 800b574:	2401      	movs	r4, #1
 800b576:	e7cc      	b.n	800b512 <__gethex+0xce>
 800b578:	f04f 0900 	mov.w	r9, #0
 800b57c:	1cb1      	adds	r1, r6, #2
 800b57e:	e7d5      	b.n	800b52c <__gethex+0xe8>
 800b580:	f04f 0901 	mov.w	r9, #1
 800b584:	e7fa      	b.n	800b57c <__gethex+0x138>
 800b586:	230a      	movs	r3, #10
 800b588:	fb03 0202 	mla	r2, r3, r2, r0
 800b58c:	3a10      	subs	r2, #16
 800b58e:	e7d6      	b.n	800b53e <__gethex+0xfa>
 800b590:	4631      	mov	r1, r6
 800b592:	e7e1      	b.n	800b558 <__gethex+0x114>
 800b594:	1bf3      	subs	r3, r6, r7
 800b596:	3b01      	subs	r3, #1
 800b598:	4621      	mov	r1, r4
 800b59a:	2b07      	cmp	r3, #7
 800b59c:	dc0a      	bgt.n	800b5b4 <__gethex+0x170>
 800b59e:	9802      	ldr	r0, [sp, #8]
 800b5a0:	f000 fa70 	bl	800ba84 <_Balloc>
 800b5a4:	4604      	mov	r4, r0
 800b5a6:	b940      	cbnz	r0, 800b5ba <__gethex+0x176>
 800b5a8:	4b5c      	ldr	r3, [pc, #368]	; (800b71c <__gethex+0x2d8>)
 800b5aa:	4602      	mov	r2, r0
 800b5ac:	21de      	movs	r1, #222	; 0xde
 800b5ae:	485c      	ldr	r0, [pc, #368]	; (800b720 <__gethex+0x2dc>)
 800b5b0:	f001 f8b4 	bl	800c71c <__assert_func>
 800b5b4:	3101      	adds	r1, #1
 800b5b6:	105b      	asrs	r3, r3, #1
 800b5b8:	e7ef      	b.n	800b59a <__gethex+0x156>
 800b5ba:	f100 0914 	add.w	r9, r0, #20
 800b5be:	f04f 0b00 	mov.w	fp, #0
 800b5c2:	f1ca 0301 	rsb	r3, sl, #1
 800b5c6:	f8cd 9010 	str.w	r9, [sp, #16]
 800b5ca:	f8cd b004 	str.w	fp, [sp, #4]
 800b5ce:	9308      	str	r3, [sp, #32]
 800b5d0:	42b7      	cmp	r7, r6
 800b5d2:	d33f      	bcc.n	800b654 <__gethex+0x210>
 800b5d4:	9f04      	ldr	r7, [sp, #16]
 800b5d6:	9b01      	ldr	r3, [sp, #4]
 800b5d8:	f847 3b04 	str.w	r3, [r7], #4
 800b5dc:	eba7 0709 	sub.w	r7, r7, r9
 800b5e0:	10bf      	asrs	r7, r7, #2
 800b5e2:	6127      	str	r7, [r4, #16]
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f000 fb3f 	bl	800bc68 <__hi0bits>
 800b5ea:	017f      	lsls	r7, r7, #5
 800b5ec:	f8d8 6000 	ldr.w	r6, [r8]
 800b5f0:	1a3f      	subs	r7, r7, r0
 800b5f2:	42b7      	cmp	r7, r6
 800b5f4:	dd62      	ble.n	800b6bc <__gethex+0x278>
 800b5f6:	1bbf      	subs	r7, r7, r6
 800b5f8:	4639      	mov	r1, r7
 800b5fa:	4620      	mov	r0, r4
 800b5fc:	f000 fed5 	bl	800c3aa <__any_on>
 800b600:	4682      	mov	sl, r0
 800b602:	b1a8      	cbz	r0, 800b630 <__gethex+0x1ec>
 800b604:	1e7b      	subs	r3, r7, #1
 800b606:	1159      	asrs	r1, r3, #5
 800b608:	f003 021f 	and.w	r2, r3, #31
 800b60c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b610:	f04f 0a01 	mov.w	sl, #1
 800b614:	fa0a f202 	lsl.w	r2, sl, r2
 800b618:	420a      	tst	r2, r1
 800b61a:	d009      	beq.n	800b630 <__gethex+0x1ec>
 800b61c:	4553      	cmp	r3, sl
 800b61e:	dd05      	ble.n	800b62c <__gethex+0x1e8>
 800b620:	1eb9      	subs	r1, r7, #2
 800b622:	4620      	mov	r0, r4
 800b624:	f000 fec1 	bl	800c3aa <__any_on>
 800b628:	2800      	cmp	r0, #0
 800b62a:	d144      	bne.n	800b6b6 <__gethex+0x272>
 800b62c:	f04f 0a02 	mov.w	sl, #2
 800b630:	4639      	mov	r1, r7
 800b632:	4620      	mov	r0, r4
 800b634:	f7ff fe9e 	bl	800b374 <rshift>
 800b638:	443d      	add	r5, r7
 800b63a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b63e:	42ab      	cmp	r3, r5
 800b640:	da4a      	bge.n	800b6d8 <__gethex+0x294>
 800b642:	9802      	ldr	r0, [sp, #8]
 800b644:	4621      	mov	r1, r4
 800b646:	f000 fa5d 	bl	800bb04 <_Bfree>
 800b64a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b64c:	2300      	movs	r3, #0
 800b64e:	6013      	str	r3, [r2, #0]
 800b650:	27a3      	movs	r7, #163	; 0xa3
 800b652:	e789      	b.n	800b568 <__gethex+0x124>
 800b654:	1e73      	subs	r3, r6, #1
 800b656:	9a06      	ldr	r2, [sp, #24]
 800b658:	9307      	str	r3, [sp, #28]
 800b65a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b65e:	4293      	cmp	r3, r2
 800b660:	d019      	beq.n	800b696 <__gethex+0x252>
 800b662:	f1bb 0f20 	cmp.w	fp, #32
 800b666:	d107      	bne.n	800b678 <__gethex+0x234>
 800b668:	9b04      	ldr	r3, [sp, #16]
 800b66a:	9a01      	ldr	r2, [sp, #4]
 800b66c:	f843 2b04 	str.w	r2, [r3], #4
 800b670:	9304      	str	r3, [sp, #16]
 800b672:	2300      	movs	r3, #0
 800b674:	9301      	str	r3, [sp, #4]
 800b676:	469b      	mov	fp, r3
 800b678:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b67c:	f7ff fecc 	bl	800b418 <__hexdig_fun>
 800b680:	9b01      	ldr	r3, [sp, #4]
 800b682:	f000 000f 	and.w	r0, r0, #15
 800b686:	fa00 f00b 	lsl.w	r0, r0, fp
 800b68a:	4303      	orrs	r3, r0
 800b68c:	9301      	str	r3, [sp, #4]
 800b68e:	f10b 0b04 	add.w	fp, fp, #4
 800b692:	9b07      	ldr	r3, [sp, #28]
 800b694:	e00d      	b.n	800b6b2 <__gethex+0x26e>
 800b696:	9a08      	ldr	r2, [sp, #32]
 800b698:	1e73      	subs	r3, r6, #1
 800b69a:	4413      	add	r3, r2
 800b69c:	42bb      	cmp	r3, r7
 800b69e:	d3e0      	bcc.n	800b662 <__gethex+0x21e>
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	9903      	ldr	r1, [sp, #12]
 800b6a4:	9309      	str	r3, [sp, #36]	; 0x24
 800b6a6:	4652      	mov	r2, sl
 800b6a8:	f001 f816 	bl	800c6d8 <strncmp>
 800b6ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6ae:	2800      	cmp	r0, #0
 800b6b0:	d1d7      	bne.n	800b662 <__gethex+0x21e>
 800b6b2:	461e      	mov	r6, r3
 800b6b4:	e78c      	b.n	800b5d0 <__gethex+0x18c>
 800b6b6:	f04f 0a03 	mov.w	sl, #3
 800b6ba:	e7b9      	b.n	800b630 <__gethex+0x1ec>
 800b6bc:	da09      	bge.n	800b6d2 <__gethex+0x28e>
 800b6be:	1bf7      	subs	r7, r6, r7
 800b6c0:	4621      	mov	r1, r4
 800b6c2:	9802      	ldr	r0, [sp, #8]
 800b6c4:	463a      	mov	r2, r7
 800b6c6:	f000 fc35 	bl	800bf34 <__lshift>
 800b6ca:	1bed      	subs	r5, r5, r7
 800b6cc:	4604      	mov	r4, r0
 800b6ce:	f100 0914 	add.w	r9, r0, #20
 800b6d2:	f04f 0a00 	mov.w	sl, #0
 800b6d6:	e7b0      	b.n	800b63a <__gethex+0x1f6>
 800b6d8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b6dc:	42a8      	cmp	r0, r5
 800b6de:	dd71      	ble.n	800b7c4 <__gethex+0x380>
 800b6e0:	1b45      	subs	r5, r0, r5
 800b6e2:	42ae      	cmp	r6, r5
 800b6e4:	dc35      	bgt.n	800b752 <__gethex+0x30e>
 800b6e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b6ea:	2b02      	cmp	r3, #2
 800b6ec:	d029      	beq.n	800b742 <__gethex+0x2fe>
 800b6ee:	2b03      	cmp	r3, #3
 800b6f0:	d02b      	beq.n	800b74a <__gethex+0x306>
 800b6f2:	2b01      	cmp	r3, #1
 800b6f4:	d11c      	bne.n	800b730 <__gethex+0x2ec>
 800b6f6:	42ae      	cmp	r6, r5
 800b6f8:	d11a      	bne.n	800b730 <__gethex+0x2ec>
 800b6fa:	2e01      	cmp	r6, #1
 800b6fc:	d112      	bne.n	800b724 <__gethex+0x2e0>
 800b6fe:	9a05      	ldr	r2, [sp, #20]
 800b700:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b704:	6013      	str	r3, [r2, #0]
 800b706:	2301      	movs	r3, #1
 800b708:	6123      	str	r3, [r4, #16]
 800b70a:	f8c9 3000 	str.w	r3, [r9]
 800b70e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b710:	2762      	movs	r7, #98	; 0x62
 800b712:	601c      	str	r4, [r3, #0]
 800b714:	e728      	b.n	800b568 <__gethex+0x124>
 800b716:	bf00      	nop
 800b718:	0800d8f0 	.word	0x0800d8f0
 800b71c:	0800d878 	.word	0x0800d878
 800b720:	0800d889 	.word	0x0800d889
 800b724:	1e71      	subs	r1, r6, #1
 800b726:	4620      	mov	r0, r4
 800b728:	f000 fe3f 	bl	800c3aa <__any_on>
 800b72c:	2800      	cmp	r0, #0
 800b72e:	d1e6      	bne.n	800b6fe <__gethex+0x2ba>
 800b730:	9802      	ldr	r0, [sp, #8]
 800b732:	4621      	mov	r1, r4
 800b734:	f000 f9e6 	bl	800bb04 <_Bfree>
 800b738:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b73a:	2300      	movs	r3, #0
 800b73c:	6013      	str	r3, [r2, #0]
 800b73e:	2750      	movs	r7, #80	; 0x50
 800b740:	e712      	b.n	800b568 <__gethex+0x124>
 800b742:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b744:	2b00      	cmp	r3, #0
 800b746:	d1f3      	bne.n	800b730 <__gethex+0x2ec>
 800b748:	e7d9      	b.n	800b6fe <__gethex+0x2ba>
 800b74a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d1d6      	bne.n	800b6fe <__gethex+0x2ba>
 800b750:	e7ee      	b.n	800b730 <__gethex+0x2ec>
 800b752:	1e6f      	subs	r7, r5, #1
 800b754:	f1ba 0f00 	cmp.w	sl, #0
 800b758:	d131      	bne.n	800b7be <__gethex+0x37a>
 800b75a:	b127      	cbz	r7, 800b766 <__gethex+0x322>
 800b75c:	4639      	mov	r1, r7
 800b75e:	4620      	mov	r0, r4
 800b760:	f000 fe23 	bl	800c3aa <__any_on>
 800b764:	4682      	mov	sl, r0
 800b766:	117b      	asrs	r3, r7, #5
 800b768:	2101      	movs	r1, #1
 800b76a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b76e:	f007 071f 	and.w	r7, r7, #31
 800b772:	fa01 f707 	lsl.w	r7, r1, r7
 800b776:	421f      	tst	r7, r3
 800b778:	4629      	mov	r1, r5
 800b77a:	4620      	mov	r0, r4
 800b77c:	bf18      	it	ne
 800b77e:	f04a 0a02 	orrne.w	sl, sl, #2
 800b782:	1b76      	subs	r6, r6, r5
 800b784:	f7ff fdf6 	bl	800b374 <rshift>
 800b788:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b78c:	2702      	movs	r7, #2
 800b78e:	f1ba 0f00 	cmp.w	sl, #0
 800b792:	d048      	beq.n	800b826 <__gethex+0x3e2>
 800b794:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b798:	2b02      	cmp	r3, #2
 800b79a:	d015      	beq.n	800b7c8 <__gethex+0x384>
 800b79c:	2b03      	cmp	r3, #3
 800b79e:	d017      	beq.n	800b7d0 <__gethex+0x38c>
 800b7a0:	2b01      	cmp	r3, #1
 800b7a2:	d109      	bne.n	800b7b8 <__gethex+0x374>
 800b7a4:	f01a 0f02 	tst.w	sl, #2
 800b7a8:	d006      	beq.n	800b7b8 <__gethex+0x374>
 800b7aa:	f8d9 0000 	ldr.w	r0, [r9]
 800b7ae:	ea4a 0a00 	orr.w	sl, sl, r0
 800b7b2:	f01a 0f01 	tst.w	sl, #1
 800b7b6:	d10e      	bne.n	800b7d6 <__gethex+0x392>
 800b7b8:	f047 0710 	orr.w	r7, r7, #16
 800b7bc:	e033      	b.n	800b826 <__gethex+0x3e2>
 800b7be:	f04f 0a01 	mov.w	sl, #1
 800b7c2:	e7d0      	b.n	800b766 <__gethex+0x322>
 800b7c4:	2701      	movs	r7, #1
 800b7c6:	e7e2      	b.n	800b78e <__gethex+0x34a>
 800b7c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b7ca:	f1c3 0301 	rsb	r3, r3, #1
 800b7ce:	9315      	str	r3, [sp, #84]	; 0x54
 800b7d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d0f0      	beq.n	800b7b8 <__gethex+0x374>
 800b7d6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b7da:	f104 0314 	add.w	r3, r4, #20
 800b7de:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b7e2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b7e6:	f04f 0c00 	mov.w	ip, #0
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7f0:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b7f4:	d01c      	beq.n	800b830 <__gethex+0x3ec>
 800b7f6:	3201      	adds	r2, #1
 800b7f8:	6002      	str	r2, [r0, #0]
 800b7fa:	2f02      	cmp	r7, #2
 800b7fc:	f104 0314 	add.w	r3, r4, #20
 800b800:	d13d      	bne.n	800b87e <__gethex+0x43a>
 800b802:	f8d8 2000 	ldr.w	r2, [r8]
 800b806:	3a01      	subs	r2, #1
 800b808:	42b2      	cmp	r2, r6
 800b80a:	d10a      	bne.n	800b822 <__gethex+0x3de>
 800b80c:	1171      	asrs	r1, r6, #5
 800b80e:	2201      	movs	r2, #1
 800b810:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b814:	f006 061f 	and.w	r6, r6, #31
 800b818:	fa02 f606 	lsl.w	r6, r2, r6
 800b81c:	421e      	tst	r6, r3
 800b81e:	bf18      	it	ne
 800b820:	4617      	movne	r7, r2
 800b822:	f047 0720 	orr.w	r7, r7, #32
 800b826:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b828:	601c      	str	r4, [r3, #0]
 800b82a:	9b05      	ldr	r3, [sp, #20]
 800b82c:	601d      	str	r5, [r3, #0]
 800b82e:	e69b      	b.n	800b568 <__gethex+0x124>
 800b830:	4299      	cmp	r1, r3
 800b832:	f843 cc04 	str.w	ip, [r3, #-4]
 800b836:	d8d8      	bhi.n	800b7ea <__gethex+0x3a6>
 800b838:	68a3      	ldr	r3, [r4, #8]
 800b83a:	459b      	cmp	fp, r3
 800b83c:	db17      	blt.n	800b86e <__gethex+0x42a>
 800b83e:	6861      	ldr	r1, [r4, #4]
 800b840:	9802      	ldr	r0, [sp, #8]
 800b842:	3101      	adds	r1, #1
 800b844:	f000 f91e 	bl	800ba84 <_Balloc>
 800b848:	4681      	mov	r9, r0
 800b84a:	b918      	cbnz	r0, 800b854 <__gethex+0x410>
 800b84c:	4b1a      	ldr	r3, [pc, #104]	; (800b8b8 <__gethex+0x474>)
 800b84e:	4602      	mov	r2, r0
 800b850:	2184      	movs	r1, #132	; 0x84
 800b852:	e6ac      	b.n	800b5ae <__gethex+0x16a>
 800b854:	6922      	ldr	r2, [r4, #16]
 800b856:	3202      	adds	r2, #2
 800b858:	f104 010c 	add.w	r1, r4, #12
 800b85c:	0092      	lsls	r2, r2, #2
 800b85e:	300c      	adds	r0, #12
 800b860:	f7fd f8f2 	bl	8008a48 <memcpy>
 800b864:	4621      	mov	r1, r4
 800b866:	9802      	ldr	r0, [sp, #8]
 800b868:	f000 f94c 	bl	800bb04 <_Bfree>
 800b86c:	464c      	mov	r4, r9
 800b86e:	6923      	ldr	r3, [r4, #16]
 800b870:	1c5a      	adds	r2, r3, #1
 800b872:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b876:	6122      	str	r2, [r4, #16]
 800b878:	2201      	movs	r2, #1
 800b87a:	615a      	str	r2, [r3, #20]
 800b87c:	e7bd      	b.n	800b7fa <__gethex+0x3b6>
 800b87e:	6922      	ldr	r2, [r4, #16]
 800b880:	455a      	cmp	r2, fp
 800b882:	dd0b      	ble.n	800b89c <__gethex+0x458>
 800b884:	2101      	movs	r1, #1
 800b886:	4620      	mov	r0, r4
 800b888:	f7ff fd74 	bl	800b374 <rshift>
 800b88c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b890:	3501      	adds	r5, #1
 800b892:	42ab      	cmp	r3, r5
 800b894:	f6ff aed5 	blt.w	800b642 <__gethex+0x1fe>
 800b898:	2701      	movs	r7, #1
 800b89a:	e7c2      	b.n	800b822 <__gethex+0x3de>
 800b89c:	f016 061f 	ands.w	r6, r6, #31
 800b8a0:	d0fa      	beq.n	800b898 <__gethex+0x454>
 800b8a2:	4453      	add	r3, sl
 800b8a4:	f1c6 0620 	rsb	r6, r6, #32
 800b8a8:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b8ac:	f000 f9dc 	bl	800bc68 <__hi0bits>
 800b8b0:	42b0      	cmp	r0, r6
 800b8b2:	dbe7      	blt.n	800b884 <__gethex+0x440>
 800b8b4:	e7f0      	b.n	800b898 <__gethex+0x454>
 800b8b6:	bf00      	nop
 800b8b8:	0800d878 	.word	0x0800d878

0800b8bc <L_shift>:
 800b8bc:	f1c2 0208 	rsb	r2, r2, #8
 800b8c0:	0092      	lsls	r2, r2, #2
 800b8c2:	b570      	push	{r4, r5, r6, lr}
 800b8c4:	f1c2 0620 	rsb	r6, r2, #32
 800b8c8:	6843      	ldr	r3, [r0, #4]
 800b8ca:	6804      	ldr	r4, [r0, #0]
 800b8cc:	fa03 f506 	lsl.w	r5, r3, r6
 800b8d0:	432c      	orrs	r4, r5
 800b8d2:	40d3      	lsrs	r3, r2
 800b8d4:	6004      	str	r4, [r0, #0]
 800b8d6:	f840 3f04 	str.w	r3, [r0, #4]!
 800b8da:	4288      	cmp	r0, r1
 800b8dc:	d3f4      	bcc.n	800b8c8 <L_shift+0xc>
 800b8de:	bd70      	pop	{r4, r5, r6, pc}

0800b8e0 <__match>:
 800b8e0:	b530      	push	{r4, r5, lr}
 800b8e2:	6803      	ldr	r3, [r0, #0]
 800b8e4:	3301      	adds	r3, #1
 800b8e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b8ea:	b914      	cbnz	r4, 800b8f2 <__match+0x12>
 800b8ec:	6003      	str	r3, [r0, #0]
 800b8ee:	2001      	movs	r0, #1
 800b8f0:	bd30      	pop	{r4, r5, pc}
 800b8f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8f6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b8fa:	2d19      	cmp	r5, #25
 800b8fc:	bf98      	it	ls
 800b8fe:	3220      	addls	r2, #32
 800b900:	42a2      	cmp	r2, r4
 800b902:	d0f0      	beq.n	800b8e6 <__match+0x6>
 800b904:	2000      	movs	r0, #0
 800b906:	e7f3      	b.n	800b8f0 <__match+0x10>

0800b908 <__hexnan>:
 800b908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b90c:	680b      	ldr	r3, [r1, #0]
 800b90e:	115e      	asrs	r6, r3, #5
 800b910:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b914:	f013 031f 	ands.w	r3, r3, #31
 800b918:	b087      	sub	sp, #28
 800b91a:	bf18      	it	ne
 800b91c:	3604      	addne	r6, #4
 800b91e:	2500      	movs	r5, #0
 800b920:	1f37      	subs	r7, r6, #4
 800b922:	4690      	mov	r8, r2
 800b924:	6802      	ldr	r2, [r0, #0]
 800b926:	9301      	str	r3, [sp, #4]
 800b928:	4682      	mov	sl, r0
 800b92a:	f846 5c04 	str.w	r5, [r6, #-4]
 800b92e:	46b9      	mov	r9, r7
 800b930:	463c      	mov	r4, r7
 800b932:	9502      	str	r5, [sp, #8]
 800b934:	46ab      	mov	fp, r5
 800b936:	7851      	ldrb	r1, [r2, #1]
 800b938:	1c53      	adds	r3, r2, #1
 800b93a:	9303      	str	r3, [sp, #12]
 800b93c:	b341      	cbz	r1, 800b990 <__hexnan+0x88>
 800b93e:	4608      	mov	r0, r1
 800b940:	9205      	str	r2, [sp, #20]
 800b942:	9104      	str	r1, [sp, #16]
 800b944:	f7ff fd68 	bl	800b418 <__hexdig_fun>
 800b948:	2800      	cmp	r0, #0
 800b94a:	d14f      	bne.n	800b9ec <__hexnan+0xe4>
 800b94c:	9904      	ldr	r1, [sp, #16]
 800b94e:	9a05      	ldr	r2, [sp, #20]
 800b950:	2920      	cmp	r1, #32
 800b952:	d818      	bhi.n	800b986 <__hexnan+0x7e>
 800b954:	9b02      	ldr	r3, [sp, #8]
 800b956:	459b      	cmp	fp, r3
 800b958:	dd13      	ble.n	800b982 <__hexnan+0x7a>
 800b95a:	454c      	cmp	r4, r9
 800b95c:	d206      	bcs.n	800b96c <__hexnan+0x64>
 800b95e:	2d07      	cmp	r5, #7
 800b960:	dc04      	bgt.n	800b96c <__hexnan+0x64>
 800b962:	462a      	mov	r2, r5
 800b964:	4649      	mov	r1, r9
 800b966:	4620      	mov	r0, r4
 800b968:	f7ff ffa8 	bl	800b8bc <L_shift>
 800b96c:	4544      	cmp	r4, r8
 800b96e:	d950      	bls.n	800ba12 <__hexnan+0x10a>
 800b970:	2300      	movs	r3, #0
 800b972:	f1a4 0904 	sub.w	r9, r4, #4
 800b976:	f844 3c04 	str.w	r3, [r4, #-4]
 800b97a:	f8cd b008 	str.w	fp, [sp, #8]
 800b97e:	464c      	mov	r4, r9
 800b980:	461d      	mov	r5, r3
 800b982:	9a03      	ldr	r2, [sp, #12]
 800b984:	e7d7      	b.n	800b936 <__hexnan+0x2e>
 800b986:	2929      	cmp	r1, #41	; 0x29
 800b988:	d156      	bne.n	800ba38 <__hexnan+0x130>
 800b98a:	3202      	adds	r2, #2
 800b98c:	f8ca 2000 	str.w	r2, [sl]
 800b990:	f1bb 0f00 	cmp.w	fp, #0
 800b994:	d050      	beq.n	800ba38 <__hexnan+0x130>
 800b996:	454c      	cmp	r4, r9
 800b998:	d206      	bcs.n	800b9a8 <__hexnan+0xa0>
 800b99a:	2d07      	cmp	r5, #7
 800b99c:	dc04      	bgt.n	800b9a8 <__hexnan+0xa0>
 800b99e:	462a      	mov	r2, r5
 800b9a0:	4649      	mov	r1, r9
 800b9a2:	4620      	mov	r0, r4
 800b9a4:	f7ff ff8a 	bl	800b8bc <L_shift>
 800b9a8:	4544      	cmp	r4, r8
 800b9aa:	d934      	bls.n	800ba16 <__hexnan+0x10e>
 800b9ac:	f1a8 0204 	sub.w	r2, r8, #4
 800b9b0:	4623      	mov	r3, r4
 800b9b2:	f853 1b04 	ldr.w	r1, [r3], #4
 800b9b6:	f842 1f04 	str.w	r1, [r2, #4]!
 800b9ba:	429f      	cmp	r7, r3
 800b9bc:	d2f9      	bcs.n	800b9b2 <__hexnan+0xaa>
 800b9be:	1b3b      	subs	r3, r7, r4
 800b9c0:	f023 0303 	bic.w	r3, r3, #3
 800b9c4:	3304      	adds	r3, #4
 800b9c6:	3401      	adds	r4, #1
 800b9c8:	3e03      	subs	r6, #3
 800b9ca:	42b4      	cmp	r4, r6
 800b9cc:	bf88      	it	hi
 800b9ce:	2304      	movhi	r3, #4
 800b9d0:	4443      	add	r3, r8
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	f843 2b04 	str.w	r2, [r3], #4
 800b9d8:	429f      	cmp	r7, r3
 800b9da:	d2fb      	bcs.n	800b9d4 <__hexnan+0xcc>
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	b91b      	cbnz	r3, 800b9e8 <__hexnan+0xe0>
 800b9e0:	4547      	cmp	r7, r8
 800b9e2:	d127      	bne.n	800ba34 <__hexnan+0x12c>
 800b9e4:	2301      	movs	r3, #1
 800b9e6:	603b      	str	r3, [r7, #0]
 800b9e8:	2005      	movs	r0, #5
 800b9ea:	e026      	b.n	800ba3a <__hexnan+0x132>
 800b9ec:	3501      	adds	r5, #1
 800b9ee:	2d08      	cmp	r5, #8
 800b9f0:	f10b 0b01 	add.w	fp, fp, #1
 800b9f4:	dd06      	ble.n	800ba04 <__hexnan+0xfc>
 800b9f6:	4544      	cmp	r4, r8
 800b9f8:	d9c3      	bls.n	800b982 <__hexnan+0x7a>
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	f844 3c04 	str.w	r3, [r4, #-4]
 800ba00:	2501      	movs	r5, #1
 800ba02:	3c04      	subs	r4, #4
 800ba04:	6822      	ldr	r2, [r4, #0]
 800ba06:	f000 000f 	and.w	r0, r0, #15
 800ba0a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ba0e:	6022      	str	r2, [r4, #0]
 800ba10:	e7b7      	b.n	800b982 <__hexnan+0x7a>
 800ba12:	2508      	movs	r5, #8
 800ba14:	e7b5      	b.n	800b982 <__hexnan+0x7a>
 800ba16:	9b01      	ldr	r3, [sp, #4]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d0df      	beq.n	800b9dc <__hexnan+0xd4>
 800ba1c:	f04f 32ff 	mov.w	r2, #4294967295
 800ba20:	f1c3 0320 	rsb	r3, r3, #32
 800ba24:	fa22 f303 	lsr.w	r3, r2, r3
 800ba28:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ba2c:	401a      	ands	r2, r3
 800ba2e:	f846 2c04 	str.w	r2, [r6, #-4]
 800ba32:	e7d3      	b.n	800b9dc <__hexnan+0xd4>
 800ba34:	3f04      	subs	r7, #4
 800ba36:	e7d1      	b.n	800b9dc <__hexnan+0xd4>
 800ba38:	2004      	movs	r0, #4
 800ba3a:	b007      	add	sp, #28
 800ba3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ba40 <_localeconv_r>:
 800ba40:	4800      	ldr	r0, [pc, #0]	; (800ba44 <_localeconv_r+0x4>)
 800ba42:	4770      	bx	lr
 800ba44:	20000168 	.word	0x20000168

0800ba48 <__ascii_mbtowc>:
 800ba48:	b082      	sub	sp, #8
 800ba4a:	b901      	cbnz	r1, 800ba4e <__ascii_mbtowc+0x6>
 800ba4c:	a901      	add	r1, sp, #4
 800ba4e:	b142      	cbz	r2, 800ba62 <__ascii_mbtowc+0x1a>
 800ba50:	b14b      	cbz	r3, 800ba66 <__ascii_mbtowc+0x1e>
 800ba52:	7813      	ldrb	r3, [r2, #0]
 800ba54:	600b      	str	r3, [r1, #0]
 800ba56:	7812      	ldrb	r2, [r2, #0]
 800ba58:	1e10      	subs	r0, r2, #0
 800ba5a:	bf18      	it	ne
 800ba5c:	2001      	movne	r0, #1
 800ba5e:	b002      	add	sp, #8
 800ba60:	4770      	bx	lr
 800ba62:	4610      	mov	r0, r2
 800ba64:	e7fb      	b.n	800ba5e <__ascii_mbtowc+0x16>
 800ba66:	f06f 0001 	mvn.w	r0, #1
 800ba6a:	e7f8      	b.n	800ba5e <__ascii_mbtowc+0x16>

0800ba6c <__malloc_lock>:
 800ba6c:	4801      	ldr	r0, [pc, #4]	; (800ba74 <__malloc_lock+0x8>)
 800ba6e:	f000 be86 	b.w	800c77e <__retarget_lock_acquire_recursive>
 800ba72:	bf00      	nop
 800ba74:	200005f0 	.word	0x200005f0

0800ba78 <__malloc_unlock>:
 800ba78:	4801      	ldr	r0, [pc, #4]	; (800ba80 <__malloc_unlock+0x8>)
 800ba7a:	f000 be81 	b.w	800c780 <__retarget_lock_release_recursive>
 800ba7e:	bf00      	nop
 800ba80:	200005f0 	.word	0x200005f0

0800ba84 <_Balloc>:
 800ba84:	b570      	push	{r4, r5, r6, lr}
 800ba86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ba88:	4604      	mov	r4, r0
 800ba8a:	460d      	mov	r5, r1
 800ba8c:	b976      	cbnz	r6, 800baac <_Balloc+0x28>
 800ba8e:	2010      	movs	r0, #16
 800ba90:	f7fc ffca 	bl	8008a28 <malloc>
 800ba94:	4602      	mov	r2, r0
 800ba96:	6260      	str	r0, [r4, #36]	; 0x24
 800ba98:	b920      	cbnz	r0, 800baa4 <_Balloc+0x20>
 800ba9a:	4b18      	ldr	r3, [pc, #96]	; (800bafc <_Balloc+0x78>)
 800ba9c:	4818      	ldr	r0, [pc, #96]	; (800bb00 <_Balloc+0x7c>)
 800ba9e:	2166      	movs	r1, #102	; 0x66
 800baa0:	f000 fe3c 	bl	800c71c <__assert_func>
 800baa4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800baa8:	6006      	str	r6, [r0, #0]
 800baaa:	60c6      	str	r6, [r0, #12]
 800baac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800baae:	68f3      	ldr	r3, [r6, #12]
 800bab0:	b183      	cbz	r3, 800bad4 <_Balloc+0x50>
 800bab2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bab4:	68db      	ldr	r3, [r3, #12]
 800bab6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800baba:	b9b8      	cbnz	r0, 800baec <_Balloc+0x68>
 800babc:	2101      	movs	r1, #1
 800babe:	fa01 f605 	lsl.w	r6, r1, r5
 800bac2:	1d72      	adds	r2, r6, #5
 800bac4:	0092      	lsls	r2, r2, #2
 800bac6:	4620      	mov	r0, r4
 800bac8:	f000 fc90 	bl	800c3ec <_calloc_r>
 800bacc:	b160      	cbz	r0, 800bae8 <_Balloc+0x64>
 800bace:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bad2:	e00e      	b.n	800baf2 <_Balloc+0x6e>
 800bad4:	2221      	movs	r2, #33	; 0x21
 800bad6:	2104      	movs	r1, #4
 800bad8:	4620      	mov	r0, r4
 800bada:	f000 fc87 	bl	800c3ec <_calloc_r>
 800bade:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bae0:	60f0      	str	r0, [r6, #12]
 800bae2:	68db      	ldr	r3, [r3, #12]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d1e4      	bne.n	800bab2 <_Balloc+0x2e>
 800bae8:	2000      	movs	r0, #0
 800baea:	bd70      	pop	{r4, r5, r6, pc}
 800baec:	6802      	ldr	r2, [r0, #0]
 800baee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800baf2:	2300      	movs	r3, #0
 800baf4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800baf8:	e7f7      	b.n	800baea <_Balloc+0x66>
 800bafa:	bf00      	nop
 800bafc:	0800d806 	.word	0x0800d806
 800bb00:	0800d904 	.word	0x0800d904

0800bb04 <_Bfree>:
 800bb04:	b570      	push	{r4, r5, r6, lr}
 800bb06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bb08:	4605      	mov	r5, r0
 800bb0a:	460c      	mov	r4, r1
 800bb0c:	b976      	cbnz	r6, 800bb2c <_Bfree+0x28>
 800bb0e:	2010      	movs	r0, #16
 800bb10:	f7fc ff8a 	bl	8008a28 <malloc>
 800bb14:	4602      	mov	r2, r0
 800bb16:	6268      	str	r0, [r5, #36]	; 0x24
 800bb18:	b920      	cbnz	r0, 800bb24 <_Bfree+0x20>
 800bb1a:	4b09      	ldr	r3, [pc, #36]	; (800bb40 <_Bfree+0x3c>)
 800bb1c:	4809      	ldr	r0, [pc, #36]	; (800bb44 <_Bfree+0x40>)
 800bb1e:	218a      	movs	r1, #138	; 0x8a
 800bb20:	f000 fdfc 	bl	800c71c <__assert_func>
 800bb24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb28:	6006      	str	r6, [r0, #0]
 800bb2a:	60c6      	str	r6, [r0, #12]
 800bb2c:	b13c      	cbz	r4, 800bb3e <_Bfree+0x3a>
 800bb2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bb30:	6862      	ldr	r2, [r4, #4]
 800bb32:	68db      	ldr	r3, [r3, #12]
 800bb34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bb38:	6021      	str	r1, [r4, #0]
 800bb3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bb3e:	bd70      	pop	{r4, r5, r6, pc}
 800bb40:	0800d806 	.word	0x0800d806
 800bb44:	0800d904 	.word	0x0800d904

0800bb48 <__multadd>:
 800bb48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb4c:	690d      	ldr	r5, [r1, #16]
 800bb4e:	4607      	mov	r7, r0
 800bb50:	460c      	mov	r4, r1
 800bb52:	461e      	mov	r6, r3
 800bb54:	f101 0c14 	add.w	ip, r1, #20
 800bb58:	2000      	movs	r0, #0
 800bb5a:	f8dc 3000 	ldr.w	r3, [ip]
 800bb5e:	b299      	uxth	r1, r3
 800bb60:	fb02 6101 	mla	r1, r2, r1, r6
 800bb64:	0c1e      	lsrs	r6, r3, #16
 800bb66:	0c0b      	lsrs	r3, r1, #16
 800bb68:	fb02 3306 	mla	r3, r2, r6, r3
 800bb6c:	b289      	uxth	r1, r1
 800bb6e:	3001      	adds	r0, #1
 800bb70:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bb74:	4285      	cmp	r5, r0
 800bb76:	f84c 1b04 	str.w	r1, [ip], #4
 800bb7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bb7e:	dcec      	bgt.n	800bb5a <__multadd+0x12>
 800bb80:	b30e      	cbz	r6, 800bbc6 <__multadd+0x7e>
 800bb82:	68a3      	ldr	r3, [r4, #8]
 800bb84:	42ab      	cmp	r3, r5
 800bb86:	dc19      	bgt.n	800bbbc <__multadd+0x74>
 800bb88:	6861      	ldr	r1, [r4, #4]
 800bb8a:	4638      	mov	r0, r7
 800bb8c:	3101      	adds	r1, #1
 800bb8e:	f7ff ff79 	bl	800ba84 <_Balloc>
 800bb92:	4680      	mov	r8, r0
 800bb94:	b928      	cbnz	r0, 800bba2 <__multadd+0x5a>
 800bb96:	4602      	mov	r2, r0
 800bb98:	4b0c      	ldr	r3, [pc, #48]	; (800bbcc <__multadd+0x84>)
 800bb9a:	480d      	ldr	r0, [pc, #52]	; (800bbd0 <__multadd+0x88>)
 800bb9c:	21b5      	movs	r1, #181	; 0xb5
 800bb9e:	f000 fdbd 	bl	800c71c <__assert_func>
 800bba2:	6922      	ldr	r2, [r4, #16]
 800bba4:	3202      	adds	r2, #2
 800bba6:	f104 010c 	add.w	r1, r4, #12
 800bbaa:	0092      	lsls	r2, r2, #2
 800bbac:	300c      	adds	r0, #12
 800bbae:	f7fc ff4b 	bl	8008a48 <memcpy>
 800bbb2:	4621      	mov	r1, r4
 800bbb4:	4638      	mov	r0, r7
 800bbb6:	f7ff ffa5 	bl	800bb04 <_Bfree>
 800bbba:	4644      	mov	r4, r8
 800bbbc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bbc0:	3501      	adds	r5, #1
 800bbc2:	615e      	str	r6, [r3, #20]
 800bbc4:	6125      	str	r5, [r4, #16]
 800bbc6:	4620      	mov	r0, r4
 800bbc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbcc:	0800d878 	.word	0x0800d878
 800bbd0:	0800d904 	.word	0x0800d904

0800bbd4 <__s2b>:
 800bbd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbd8:	460c      	mov	r4, r1
 800bbda:	4615      	mov	r5, r2
 800bbdc:	461f      	mov	r7, r3
 800bbde:	2209      	movs	r2, #9
 800bbe0:	3308      	adds	r3, #8
 800bbe2:	4606      	mov	r6, r0
 800bbe4:	fb93 f3f2 	sdiv	r3, r3, r2
 800bbe8:	2100      	movs	r1, #0
 800bbea:	2201      	movs	r2, #1
 800bbec:	429a      	cmp	r2, r3
 800bbee:	db09      	blt.n	800bc04 <__s2b+0x30>
 800bbf0:	4630      	mov	r0, r6
 800bbf2:	f7ff ff47 	bl	800ba84 <_Balloc>
 800bbf6:	b940      	cbnz	r0, 800bc0a <__s2b+0x36>
 800bbf8:	4602      	mov	r2, r0
 800bbfa:	4b19      	ldr	r3, [pc, #100]	; (800bc60 <__s2b+0x8c>)
 800bbfc:	4819      	ldr	r0, [pc, #100]	; (800bc64 <__s2b+0x90>)
 800bbfe:	21ce      	movs	r1, #206	; 0xce
 800bc00:	f000 fd8c 	bl	800c71c <__assert_func>
 800bc04:	0052      	lsls	r2, r2, #1
 800bc06:	3101      	adds	r1, #1
 800bc08:	e7f0      	b.n	800bbec <__s2b+0x18>
 800bc0a:	9b08      	ldr	r3, [sp, #32]
 800bc0c:	6143      	str	r3, [r0, #20]
 800bc0e:	2d09      	cmp	r5, #9
 800bc10:	f04f 0301 	mov.w	r3, #1
 800bc14:	6103      	str	r3, [r0, #16]
 800bc16:	dd16      	ble.n	800bc46 <__s2b+0x72>
 800bc18:	f104 0909 	add.w	r9, r4, #9
 800bc1c:	46c8      	mov	r8, r9
 800bc1e:	442c      	add	r4, r5
 800bc20:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bc24:	4601      	mov	r1, r0
 800bc26:	3b30      	subs	r3, #48	; 0x30
 800bc28:	220a      	movs	r2, #10
 800bc2a:	4630      	mov	r0, r6
 800bc2c:	f7ff ff8c 	bl	800bb48 <__multadd>
 800bc30:	45a0      	cmp	r8, r4
 800bc32:	d1f5      	bne.n	800bc20 <__s2b+0x4c>
 800bc34:	f1a5 0408 	sub.w	r4, r5, #8
 800bc38:	444c      	add	r4, r9
 800bc3a:	1b2d      	subs	r5, r5, r4
 800bc3c:	1963      	adds	r3, r4, r5
 800bc3e:	42bb      	cmp	r3, r7
 800bc40:	db04      	blt.n	800bc4c <__s2b+0x78>
 800bc42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc46:	340a      	adds	r4, #10
 800bc48:	2509      	movs	r5, #9
 800bc4a:	e7f6      	b.n	800bc3a <__s2b+0x66>
 800bc4c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bc50:	4601      	mov	r1, r0
 800bc52:	3b30      	subs	r3, #48	; 0x30
 800bc54:	220a      	movs	r2, #10
 800bc56:	4630      	mov	r0, r6
 800bc58:	f7ff ff76 	bl	800bb48 <__multadd>
 800bc5c:	e7ee      	b.n	800bc3c <__s2b+0x68>
 800bc5e:	bf00      	nop
 800bc60:	0800d878 	.word	0x0800d878
 800bc64:	0800d904 	.word	0x0800d904

0800bc68 <__hi0bits>:
 800bc68:	0c02      	lsrs	r2, r0, #16
 800bc6a:	0412      	lsls	r2, r2, #16
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	b9ca      	cbnz	r2, 800bca4 <__hi0bits+0x3c>
 800bc70:	0403      	lsls	r3, r0, #16
 800bc72:	2010      	movs	r0, #16
 800bc74:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800bc78:	bf04      	itt	eq
 800bc7a:	021b      	lsleq	r3, r3, #8
 800bc7c:	3008      	addeq	r0, #8
 800bc7e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800bc82:	bf04      	itt	eq
 800bc84:	011b      	lsleq	r3, r3, #4
 800bc86:	3004      	addeq	r0, #4
 800bc88:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800bc8c:	bf04      	itt	eq
 800bc8e:	009b      	lsleq	r3, r3, #2
 800bc90:	3002      	addeq	r0, #2
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	db05      	blt.n	800bca2 <__hi0bits+0x3a>
 800bc96:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800bc9a:	f100 0001 	add.w	r0, r0, #1
 800bc9e:	bf08      	it	eq
 800bca0:	2020      	moveq	r0, #32
 800bca2:	4770      	bx	lr
 800bca4:	2000      	movs	r0, #0
 800bca6:	e7e5      	b.n	800bc74 <__hi0bits+0xc>

0800bca8 <__lo0bits>:
 800bca8:	6803      	ldr	r3, [r0, #0]
 800bcaa:	4602      	mov	r2, r0
 800bcac:	f013 0007 	ands.w	r0, r3, #7
 800bcb0:	d00b      	beq.n	800bcca <__lo0bits+0x22>
 800bcb2:	07d9      	lsls	r1, r3, #31
 800bcb4:	d421      	bmi.n	800bcfa <__lo0bits+0x52>
 800bcb6:	0798      	lsls	r0, r3, #30
 800bcb8:	bf49      	itett	mi
 800bcba:	085b      	lsrmi	r3, r3, #1
 800bcbc:	089b      	lsrpl	r3, r3, #2
 800bcbe:	2001      	movmi	r0, #1
 800bcc0:	6013      	strmi	r3, [r2, #0]
 800bcc2:	bf5c      	itt	pl
 800bcc4:	6013      	strpl	r3, [r2, #0]
 800bcc6:	2002      	movpl	r0, #2
 800bcc8:	4770      	bx	lr
 800bcca:	b299      	uxth	r1, r3
 800bccc:	b909      	cbnz	r1, 800bcd2 <__lo0bits+0x2a>
 800bcce:	0c1b      	lsrs	r3, r3, #16
 800bcd0:	2010      	movs	r0, #16
 800bcd2:	b2d9      	uxtb	r1, r3
 800bcd4:	b909      	cbnz	r1, 800bcda <__lo0bits+0x32>
 800bcd6:	3008      	adds	r0, #8
 800bcd8:	0a1b      	lsrs	r3, r3, #8
 800bcda:	0719      	lsls	r1, r3, #28
 800bcdc:	bf04      	itt	eq
 800bcde:	091b      	lsreq	r3, r3, #4
 800bce0:	3004      	addeq	r0, #4
 800bce2:	0799      	lsls	r1, r3, #30
 800bce4:	bf04      	itt	eq
 800bce6:	089b      	lsreq	r3, r3, #2
 800bce8:	3002      	addeq	r0, #2
 800bcea:	07d9      	lsls	r1, r3, #31
 800bcec:	d403      	bmi.n	800bcf6 <__lo0bits+0x4e>
 800bcee:	085b      	lsrs	r3, r3, #1
 800bcf0:	f100 0001 	add.w	r0, r0, #1
 800bcf4:	d003      	beq.n	800bcfe <__lo0bits+0x56>
 800bcf6:	6013      	str	r3, [r2, #0]
 800bcf8:	4770      	bx	lr
 800bcfa:	2000      	movs	r0, #0
 800bcfc:	4770      	bx	lr
 800bcfe:	2020      	movs	r0, #32
 800bd00:	4770      	bx	lr
	...

0800bd04 <__i2b>:
 800bd04:	b510      	push	{r4, lr}
 800bd06:	460c      	mov	r4, r1
 800bd08:	2101      	movs	r1, #1
 800bd0a:	f7ff febb 	bl	800ba84 <_Balloc>
 800bd0e:	4602      	mov	r2, r0
 800bd10:	b928      	cbnz	r0, 800bd1e <__i2b+0x1a>
 800bd12:	4b05      	ldr	r3, [pc, #20]	; (800bd28 <__i2b+0x24>)
 800bd14:	4805      	ldr	r0, [pc, #20]	; (800bd2c <__i2b+0x28>)
 800bd16:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bd1a:	f000 fcff 	bl	800c71c <__assert_func>
 800bd1e:	2301      	movs	r3, #1
 800bd20:	6144      	str	r4, [r0, #20]
 800bd22:	6103      	str	r3, [r0, #16]
 800bd24:	bd10      	pop	{r4, pc}
 800bd26:	bf00      	nop
 800bd28:	0800d878 	.word	0x0800d878
 800bd2c:	0800d904 	.word	0x0800d904

0800bd30 <__multiply>:
 800bd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd34:	4691      	mov	r9, r2
 800bd36:	690a      	ldr	r2, [r1, #16]
 800bd38:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bd3c:	429a      	cmp	r2, r3
 800bd3e:	bfb8      	it	lt
 800bd40:	460b      	movlt	r3, r1
 800bd42:	460c      	mov	r4, r1
 800bd44:	bfbc      	itt	lt
 800bd46:	464c      	movlt	r4, r9
 800bd48:	4699      	movlt	r9, r3
 800bd4a:	6927      	ldr	r7, [r4, #16]
 800bd4c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bd50:	68a3      	ldr	r3, [r4, #8]
 800bd52:	6861      	ldr	r1, [r4, #4]
 800bd54:	eb07 060a 	add.w	r6, r7, sl
 800bd58:	42b3      	cmp	r3, r6
 800bd5a:	b085      	sub	sp, #20
 800bd5c:	bfb8      	it	lt
 800bd5e:	3101      	addlt	r1, #1
 800bd60:	f7ff fe90 	bl	800ba84 <_Balloc>
 800bd64:	b930      	cbnz	r0, 800bd74 <__multiply+0x44>
 800bd66:	4602      	mov	r2, r0
 800bd68:	4b43      	ldr	r3, [pc, #268]	; (800be78 <__multiply+0x148>)
 800bd6a:	4844      	ldr	r0, [pc, #272]	; (800be7c <__multiply+0x14c>)
 800bd6c:	f240 115d 	movw	r1, #349	; 0x15d
 800bd70:	f000 fcd4 	bl	800c71c <__assert_func>
 800bd74:	f100 0514 	add.w	r5, r0, #20
 800bd78:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bd7c:	462b      	mov	r3, r5
 800bd7e:	2200      	movs	r2, #0
 800bd80:	4543      	cmp	r3, r8
 800bd82:	d321      	bcc.n	800bdc8 <__multiply+0x98>
 800bd84:	f104 0314 	add.w	r3, r4, #20
 800bd88:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bd8c:	f109 0314 	add.w	r3, r9, #20
 800bd90:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bd94:	9202      	str	r2, [sp, #8]
 800bd96:	1b3a      	subs	r2, r7, r4
 800bd98:	3a15      	subs	r2, #21
 800bd9a:	f022 0203 	bic.w	r2, r2, #3
 800bd9e:	3204      	adds	r2, #4
 800bda0:	f104 0115 	add.w	r1, r4, #21
 800bda4:	428f      	cmp	r7, r1
 800bda6:	bf38      	it	cc
 800bda8:	2204      	movcc	r2, #4
 800bdaa:	9201      	str	r2, [sp, #4]
 800bdac:	9a02      	ldr	r2, [sp, #8]
 800bdae:	9303      	str	r3, [sp, #12]
 800bdb0:	429a      	cmp	r2, r3
 800bdb2:	d80c      	bhi.n	800bdce <__multiply+0x9e>
 800bdb4:	2e00      	cmp	r6, #0
 800bdb6:	dd03      	ble.n	800bdc0 <__multiply+0x90>
 800bdb8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d059      	beq.n	800be74 <__multiply+0x144>
 800bdc0:	6106      	str	r6, [r0, #16]
 800bdc2:	b005      	add	sp, #20
 800bdc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdc8:	f843 2b04 	str.w	r2, [r3], #4
 800bdcc:	e7d8      	b.n	800bd80 <__multiply+0x50>
 800bdce:	f8b3 a000 	ldrh.w	sl, [r3]
 800bdd2:	f1ba 0f00 	cmp.w	sl, #0
 800bdd6:	d023      	beq.n	800be20 <__multiply+0xf0>
 800bdd8:	f104 0e14 	add.w	lr, r4, #20
 800bddc:	46a9      	mov	r9, r5
 800bdde:	f04f 0c00 	mov.w	ip, #0
 800bde2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bde6:	f8d9 1000 	ldr.w	r1, [r9]
 800bdea:	fa1f fb82 	uxth.w	fp, r2
 800bdee:	b289      	uxth	r1, r1
 800bdf0:	fb0a 110b 	mla	r1, sl, fp, r1
 800bdf4:	4461      	add	r1, ip
 800bdf6:	f8d9 c000 	ldr.w	ip, [r9]
 800bdfa:	0c12      	lsrs	r2, r2, #16
 800bdfc:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800be00:	fb0a c202 	mla	r2, sl, r2, ip
 800be04:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800be08:	b289      	uxth	r1, r1
 800be0a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800be0e:	4577      	cmp	r7, lr
 800be10:	f849 1b04 	str.w	r1, [r9], #4
 800be14:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800be18:	d8e3      	bhi.n	800bde2 <__multiply+0xb2>
 800be1a:	9a01      	ldr	r2, [sp, #4]
 800be1c:	f845 c002 	str.w	ip, [r5, r2]
 800be20:	9a03      	ldr	r2, [sp, #12]
 800be22:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800be26:	3304      	adds	r3, #4
 800be28:	f1b9 0f00 	cmp.w	r9, #0
 800be2c:	d020      	beq.n	800be70 <__multiply+0x140>
 800be2e:	6829      	ldr	r1, [r5, #0]
 800be30:	f104 0c14 	add.w	ip, r4, #20
 800be34:	46ae      	mov	lr, r5
 800be36:	f04f 0a00 	mov.w	sl, #0
 800be3a:	f8bc b000 	ldrh.w	fp, [ip]
 800be3e:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800be42:	fb09 220b 	mla	r2, r9, fp, r2
 800be46:	4492      	add	sl, r2
 800be48:	b289      	uxth	r1, r1
 800be4a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800be4e:	f84e 1b04 	str.w	r1, [lr], #4
 800be52:	f85c 2b04 	ldr.w	r2, [ip], #4
 800be56:	f8be 1000 	ldrh.w	r1, [lr]
 800be5a:	0c12      	lsrs	r2, r2, #16
 800be5c:	fb09 1102 	mla	r1, r9, r2, r1
 800be60:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800be64:	4567      	cmp	r7, ip
 800be66:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800be6a:	d8e6      	bhi.n	800be3a <__multiply+0x10a>
 800be6c:	9a01      	ldr	r2, [sp, #4]
 800be6e:	50a9      	str	r1, [r5, r2]
 800be70:	3504      	adds	r5, #4
 800be72:	e79b      	b.n	800bdac <__multiply+0x7c>
 800be74:	3e01      	subs	r6, #1
 800be76:	e79d      	b.n	800bdb4 <__multiply+0x84>
 800be78:	0800d878 	.word	0x0800d878
 800be7c:	0800d904 	.word	0x0800d904

0800be80 <__pow5mult>:
 800be80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be84:	4615      	mov	r5, r2
 800be86:	f012 0203 	ands.w	r2, r2, #3
 800be8a:	4606      	mov	r6, r0
 800be8c:	460f      	mov	r7, r1
 800be8e:	d007      	beq.n	800bea0 <__pow5mult+0x20>
 800be90:	4c25      	ldr	r4, [pc, #148]	; (800bf28 <__pow5mult+0xa8>)
 800be92:	3a01      	subs	r2, #1
 800be94:	2300      	movs	r3, #0
 800be96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800be9a:	f7ff fe55 	bl	800bb48 <__multadd>
 800be9e:	4607      	mov	r7, r0
 800bea0:	10ad      	asrs	r5, r5, #2
 800bea2:	d03d      	beq.n	800bf20 <__pow5mult+0xa0>
 800bea4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bea6:	b97c      	cbnz	r4, 800bec8 <__pow5mult+0x48>
 800bea8:	2010      	movs	r0, #16
 800beaa:	f7fc fdbd 	bl	8008a28 <malloc>
 800beae:	4602      	mov	r2, r0
 800beb0:	6270      	str	r0, [r6, #36]	; 0x24
 800beb2:	b928      	cbnz	r0, 800bec0 <__pow5mult+0x40>
 800beb4:	4b1d      	ldr	r3, [pc, #116]	; (800bf2c <__pow5mult+0xac>)
 800beb6:	481e      	ldr	r0, [pc, #120]	; (800bf30 <__pow5mult+0xb0>)
 800beb8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bebc:	f000 fc2e 	bl	800c71c <__assert_func>
 800bec0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bec4:	6004      	str	r4, [r0, #0]
 800bec6:	60c4      	str	r4, [r0, #12]
 800bec8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800becc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bed0:	b94c      	cbnz	r4, 800bee6 <__pow5mult+0x66>
 800bed2:	f240 2171 	movw	r1, #625	; 0x271
 800bed6:	4630      	mov	r0, r6
 800bed8:	f7ff ff14 	bl	800bd04 <__i2b>
 800bedc:	2300      	movs	r3, #0
 800bede:	f8c8 0008 	str.w	r0, [r8, #8]
 800bee2:	4604      	mov	r4, r0
 800bee4:	6003      	str	r3, [r0, #0]
 800bee6:	f04f 0900 	mov.w	r9, #0
 800beea:	07eb      	lsls	r3, r5, #31
 800beec:	d50a      	bpl.n	800bf04 <__pow5mult+0x84>
 800beee:	4639      	mov	r1, r7
 800bef0:	4622      	mov	r2, r4
 800bef2:	4630      	mov	r0, r6
 800bef4:	f7ff ff1c 	bl	800bd30 <__multiply>
 800bef8:	4639      	mov	r1, r7
 800befa:	4680      	mov	r8, r0
 800befc:	4630      	mov	r0, r6
 800befe:	f7ff fe01 	bl	800bb04 <_Bfree>
 800bf02:	4647      	mov	r7, r8
 800bf04:	106d      	asrs	r5, r5, #1
 800bf06:	d00b      	beq.n	800bf20 <__pow5mult+0xa0>
 800bf08:	6820      	ldr	r0, [r4, #0]
 800bf0a:	b938      	cbnz	r0, 800bf1c <__pow5mult+0x9c>
 800bf0c:	4622      	mov	r2, r4
 800bf0e:	4621      	mov	r1, r4
 800bf10:	4630      	mov	r0, r6
 800bf12:	f7ff ff0d 	bl	800bd30 <__multiply>
 800bf16:	6020      	str	r0, [r4, #0]
 800bf18:	f8c0 9000 	str.w	r9, [r0]
 800bf1c:	4604      	mov	r4, r0
 800bf1e:	e7e4      	b.n	800beea <__pow5mult+0x6a>
 800bf20:	4638      	mov	r0, r7
 800bf22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf26:	bf00      	nop
 800bf28:	0800da50 	.word	0x0800da50
 800bf2c:	0800d806 	.word	0x0800d806
 800bf30:	0800d904 	.word	0x0800d904

0800bf34 <__lshift>:
 800bf34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf38:	460c      	mov	r4, r1
 800bf3a:	6849      	ldr	r1, [r1, #4]
 800bf3c:	6923      	ldr	r3, [r4, #16]
 800bf3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bf42:	68a3      	ldr	r3, [r4, #8]
 800bf44:	4607      	mov	r7, r0
 800bf46:	4691      	mov	r9, r2
 800bf48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bf4c:	f108 0601 	add.w	r6, r8, #1
 800bf50:	42b3      	cmp	r3, r6
 800bf52:	db0b      	blt.n	800bf6c <__lshift+0x38>
 800bf54:	4638      	mov	r0, r7
 800bf56:	f7ff fd95 	bl	800ba84 <_Balloc>
 800bf5a:	4605      	mov	r5, r0
 800bf5c:	b948      	cbnz	r0, 800bf72 <__lshift+0x3e>
 800bf5e:	4602      	mov	r2, r0
 800bf60:	4b2a      	ldr	r3, [pc, #168]	; (800c00c <__lshift+0xd8>)
 800bf62:	482b      	ldr	r0, [pc, #172]	; (800c010 <__lshift+0xdc>)
 800bf64:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bf68:	f000 fbd8 	bl	800c71c <__assert_func>
 800bf6c:	3101      	adds	r1, #1
 800bf6e:	005b      	lsls	r3, r3, #1
 800bf70:	e7ee      	b.n	800bf50 <__lshift+0x1c>
 800bf72:	2300      	movs	r3, #0
 800bf74:	f100 0114 	add.w	r1, r0, #20
 800bf78:	f100 0210 	add.w	r2, r0, #16
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	4553      	cmp	r3, sl
 800bf80:	db37      	blt.n	800bff2 <__lshift+0xbe>
 800bf82:	6920      	ldr	r0, [r4, #16]
 800bf84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bf88:	f104 0314 	add.w	r3, r4, #20
 800bf8c:	f019 091f 	ands.w	r9, r9, #31
 800bf90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bf94:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bf98:	d02f      	beq.n	800bffa <__lshift+0xc6>
 800bf9a:	f1c9 0e20 	rsb	lr, r9, #32
 800bf9e:	468a      	mov	sl, r1
 800bfa0:	f04f 0c00 	mov.w	ip, #0
 800bfa4:	681a      	ldr	r2, [r3, #0]
 800bfa6:	fa02 f209 	lsl.w	r2, r2, r9
 800bfaa:	ea42 020c 	orr.w	r2, r2, ip
 800bfae:	f84a 2b04 	str.w	r2, [sl], #4
 800bfb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfb6:	4298      	cmp	r0, r3
 800bfb8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bfbc:	d8f2      	bhi.n	800bfa4 <__lshift+0x70>
 800bfbe:	1b03      	subs	r3, r0, r4
 800bfc0:	3b15      	subs	r3, #21
 800bfc2:	f023 0303 	bic.w	r3, r3, #3
 800bfc6:	3304      	adds	r3, #4
 800bfc8:	f104 0215 	add.w	r2, r4, #21
 800bfcc:	4290      	cmp	r0, r2
 800bfce:	bf38      	it	cc
 800bfd0:	2304      	movcc	r3, #4
 800bfd2:	f841 c003 	str.w	ip, [r1, r3]
 800bfd6:	f1bc 0f00 	cmp.w	ip, #0
 800bfda:	d001      	beq.n	800bfe0 <__lshift+0xac>
 800bfdc:	f108 0602 	add.w	r6, r8, #2
 800bfe0:	3e01      	subs	r6, #1
 800bfe2:	4638      	mov	r0, r7
 800bfe4:	612e      	str	r6, [r5, #16]
 800bfe6:	4621      	mov	r1, r4
 800bfe8:	f7ff fd8c 	bl	800bb04 <_Bfree>
 800bfec:	4628      	mov	r0, r5
 800bfee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bff2:	f842 0f04 	str.w	r0, [r2, #4]!
 800bff6:	3301      	adds	r3, #1
 800bff8:	e7c1      	b.n	800bf7e <__lshift+0x4a>
 800bffa:	3904      	subs	r1, #4
 800bffc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c000:	f841 2f04 	str.w	r2, [r1, #4]!
 800c004:	4298      	cmp	r0, r3
 800c006:	d8f9      	bhi.n	800bffc <__lshift+0xc8>
 800c008:	e7ea      	b.n	800bfe0 <__lshift+0xac>
 800c00a:	bf00      	nop
 800c00c:	0800d878 	.word	0x0800d878
 800c010:	0800d904 	.word	0x0800d904

0800c014 <__mcmp>:
 800c014:	690a      	ldr	r2, [r1, #16]
 800c016:	4603      	mov	r3, r0
 800c018:	6900      	ldr	r0, [r0, #16]
 800c01a:	1a80      	subs	r0, r0, r2
 800c01c:	b530      	push	{r4, r5, lr}
 800c01e:	d10d      	bne.n	800c03c <__mcmp+0x28>
 800c020:	3314      	adds	r3, #20
 800c022:	3114      	adds	r1, #20
 800c024:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c028:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c02c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c030:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c034:	4295      	cmp	r5, r2
 800c036:	d002      	beq.n	800c03e <__mcmp+0x2a>
 800c038:	d304      	bcc.n	800c044 <__mcmp+0x30>
 800c03a:	2001      	movs	r0, #1
 800c03c:	bd30      	pop	{r4, r5, pc}
 800c03e:	42a3      	cmp	r3, r4
 800c040:	d3f4      	bcc.n	800c02c <__mcmp+0x18>
 800c042:	e7fb      	b.n	800c03c <__mcmp+0x28>
 800c044:	f04f 30ff 	mov.w	r0, #4294967295
 800c048:	e7f8      	b.n	800c03c <__mcmp+0x28>
	...

0800c04c <__mdiff>:
 800c04c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c050:	460d      	mov	r5, r1
 800c052:	4607      	mov	r7, r0
 800c054:	4611      	mov	r1, r2
 800c056:	4628      	mov	r0, r5
 800c058:	4614      	mov	r4, r2
 800c05a:	f7ff ffdb 	bl	800c014 <__mcmp>
 800c05e:	1e06      	subs	r6, r0, #0
 800c060:	d111      	bne.n	800c086 <__mdiff+0x3a>
 800c062:	4631      	mov	r1, r6
 800c064:	4638      	mov	r0, r7
 800c066:	f7ff fd0d 	bl	800ba84 <_Balloc>
 800c06a:	4602      	mov	r2, r0
 800c06c:	b928      	cbnz	r0, 800c07a <__mdiff+0x2e>
 800c06e:	4b39      	ldr	r3, [pc, #228]	; (800c154 <__mdiff+0x108>)
 800c070:	f240 2132 	movw	r1, #562	; 0x232
 800c074:	4838      	ldr	r0, [pc, #224]	; (800c158 <__mdiff+0x10c>)
 800c076:	f000 fb51 	bl	800c71c <__assert_func>
 800c07a:	2301      	movs	r3, #1
 800c07c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c080:	4610      	mov	r0, r2
 800c082:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c086:	bfa4      	itt	ge
 800c088:	4623      	movge	r3, r4
 800c08a:	462c      	movge	r4, r5
 800c08c:	4638      	mov	r0, r7
 800c08e:	6861      	ldr	r1, [r4, #4]
 800c090:	bfa6      	itte	ge
 800c092:	461d      	movge	r5, r3
 800c094:	2600      	movge	r6, #0
 800c096:	2601      	movlt	r6, #1
 800c098:	f7ff fcf4 	bl	800ba84 <_Balloc>
 800c09c:	4602      	mov	r2, r0
 800c09e:	b918      	cbnz	r0, 800c0a8 <__mdiff+0x5c>
 800c0a0:	4b2c      	ldr	r3, [pc, #176]	; (800c154 <__mdiff+0x108>)
 800c0a2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c0a6:	e7e5      	b.n	800c074 <__mdiff+0x28>
 800c0a8:	6927      	ldr	r7, [r4, #16]
 800c0aa:	60c6      	str	r6, [r0, #12]
 800c0ac:	692e      	ldr	r6, [r5, #16]
 800c0ae:	f104 0014 	add.w	r0, r4, #20
 800c0b2:	f105 0914 	add.w	r9, r5, #20
 800c0b6:	f102 0e14 	add.w	lr, r2, #20
 800c0ba:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 800c0be:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c0c2:	3410      	adds	r4, #16
 800c0c4:	46f2      	mov	sl, lr
 800c0c6:	2100      	movs	r1, #0
 800c0c8:	f859 3b04 	ldr.w	r3, [r9], #4
 800c0cc:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800c0d0:	fa1f f883 	uxth.w	r8, r3
 800c0d4:	fa11 f18b 	uxtah	r1, r1, fp
 800c0d8:	0c1b      	lsrs	r3, r3, #16
 800c0da:	eba1 0808 	sub.w	r8, r1, r8
 800c0de:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c0e2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c0e6:	fa1f f888 	uxth.w	r8, r8
 800c0ea:	1419      	asrs	r1, r3, #16
 800c0ec:	454e      	cmp	r6, r9
 800c0ee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c0f2:	f84a 3b04 	str.w	r3, [sl], #4
 800c0f6:	d8e7      	bhi.n	800c0c8 <__mdiff+0x7c>
 800c0f8:	1b73      	subs	r3, r6, r5
 800c0fa:	3b15      	subs	r3, #21
 800c0fc:	f023 0303 	bic.w	r3, r3, #3
 800c100:	3304      	adds	r3, #4
 800c102:	3515      	adds	r5, #21
 800c104:	42ae      	cmp	r6, r5
 800c106:	bf38      	it	cc
 800c108:	2304      	movcc	r3, #4
 800c10a:	4418      	add	r0, r3
 800c10c:	4473      	add	r3, lr
 800c10e:	469e      	mov	lr, r3
 800c110:	4606      	mov	r6, r0
 800c112:	4566      	cmp	r6, ip
 800c114:	d30e      	bcc.n	800c134 <__mdiff+0xe8>
 800c116:	f10c 0103 	add.w	r1, ip, #3
 800c11a:	1a09      	subs	r1, r1, r0
 800c11c:	f021 0103 	bic.w	r1, r1, #3
 800c120:	3803      	subs	r0, #3
 800c122:	4584      	cmp	ip, r0
 800c124:	bf38      	it	cc
 800c126:	2100      	movcc	r1, #0
 800c128:	4419      	add	r1, r3
 800c12a:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800c12e:	b17b      	cbz	r3, 800c150 <__mdiff+0x104>
 800c130:	6117      	str	r7, [r2, #16]
 800c132:	e7a5      	b.n	800c080 <__mdiff+0x34>
 800c134:	f856 8b04 	ldr.w	r8, [r6], #4
 800c138:	fa11 f488 	uxtah	r4, r1, r8
 800c13c:	1425      	asrs	r5, r4, #16
 800c13e:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 800c142:	b2a4      	uxth	r4, r4
 800c144:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800c148:	f84e 4b04 	str.w	r4, [lr], #4
 800c14c:	1429      	asrs	r1, r5, #16
 800c14e:	e7e0      	b.n	800c112 <__mdiff+0xc6>
 800c150:	3f01      	subs	r7, #1
 800c152:	e7ea      	b.n	800c12a <__mdiff+0xde>
 800c154:	0800d878 	.word	0x0800d878
 800c158:	0800d904 	.word	0x0800d904

0800c15c <__ulp>:
 800c15c:	4b11      	ldr	r3, [pc, #68]	; (800c1a4 <__ulp+0x48>)
 800c15e:	400b      	ands	r3, r1
 800c160:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c164:	2b00      	cmp	r3, #0
 800c166:	dd02      	ble.n	800c16e <__ulp+0x12>
 800c168:	2000      	movs	r0, #0
 800c16a:	4619      	mov	r1, r3
 800c16c:	4770      	bx	lr
 800c16e:	425b      	negs	r3, r3
 800c170:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c174:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c178:	f04f 0000 	mov.w	r0, #0
 800c17c:	f04f 0100 	mov.w	r1, #0
 800c180:	da04      	bge.n	800c18c <__ulp+0x30>
 800c182:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c186:	fa43 f102 	asr.w	r1, r3, r2
 800c18a:	4770      	bx	lr
 800c18c:	f1a2 0314 	sub.w	r3, r2, #20
 800c190:	2b1e      	cmp	r3, #30
 800c192:	bfda      	itte	le
 800c194:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c198:	fa22 f303 	lsrle.w	r3, r2, r3
 800c19c:	2301      	movgt	r3, #1
 800c19e:	4618      	mov	r0, r3
 800c1a0:	4770      	bx	lr
 800c1a2:	bf00      	nop
 800c1a4:	7ff00000 	.word	0x7ff00000

0800c1a8 <__b2d>:
 800c1a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1ac:	6907      	ldr	r7, [r0, #16]
 800c1ae:	f100 0914 	add.w	r9, r0, #20
 800c1b2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800c1b6:	f1a7 0804 	sub.w	r8, r7, #4
 800c1ba:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800c1be:	4630      	mov	r0, r6
 800c1c0:	f7ff fd52 	bl	800bc68 <__hi0bits>
 800c1c4:	f1c0 0320 	rsb	r3, r0, #32
 800c1c8:	280a      	cmp	r0, #10
 800c1ca:	600b      	str	r3, [r1, #0]
 800c1cc:	491f      	ldr	r1, [pc, #124]	; (800c24c <__b2d+0xa4>)
 800c1ce:	dc17      	bgt.n	800c200 <__b2d+0x58>
 800c1d0:	f1c0 0c0b 	rsb	ip, r0, #11
 800c1d4:	45c1      	cmp	r9, r8
 800c1d6:	fa26 f30c 	lsr.w	r3, r6, ip
 800c1da:	bf38      	it	cc
 800c1dc:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800c1e0:	ea43 0501 	orr.w	r5, r3, r1
 800c1e4:	bf28      	it	cs
 800c1e6:	2200      	movcs	r2, #0
 800c1e8:	f100 0315 	add.w	r3, r0, #21
 800c1ec:	fa06 f303 	lsl.w	r3, r6, r3
 800c1f0:	fa22 f20c 	lsr.w	r2, r2, ip
 800c1f4:	ea43 0402 	orr.w	r4, r3, r2
 800c1f8:	4620      	mov	r0, r4
 800c1fa:	4629      	mov	r1, r5
 800c1fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c200:	45c1      	cmp	r9, r8
 800c202:	bf3a      	itte	cc
 800c204:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800c208:	f1a7 0808 	subcc.w	r8, r7, #8
 800c20c:	2200      	movcs	r2, #0
 800c20e:	f1b0 030b 	subs.w	r3, r0, #11
 800c212:	d016      	beq.n	800c242 <__b2d+0x9a>
 800c214:	f1c3 0720 	rsb	r7, r3, #32
 800c218:	fa22 f107 	lsr.w	r1, r2, r7
 800c21c:	45c8      	cmp	r8, r9
 800c21e:	fa06 f603 	lsl.w	r6, r6, r3
 800c222:	ea46 0601 	orr.w	r6, r6, r1
 800c226:	bf8c      	ite	hi
 800c228:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800c22c:	2100      	movls	r1, #0
 800c22e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800c232:	fa02 f003 	lsl.w	r0, r2, r3
 800c236:	40f9      	lsrs	r1, r7
 800c238:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c23c:	ea40 0401 	orr.w	r4, r0, r1
 800c240:	e7da      	b.n	800c1f8 <__b2d+0x50>
 800c242:	ea46 0501 	orr.w	r5, r6, r1
 800c246:	4614      	mov	r4, r2
 800c248:	e7d6      	b.n	800c1f8 <__b2d+0x50>
 800c24a:	bf00      	nop
 800c24c:	3ff00000 	.word	0x3ff00000

0800c250 <__d2b>:
 800c250:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c254:	2101      	movs	r1, #1
 800c256:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800c25a:	4690      	mov	r8, r2
 800c25c:	461d      	mov	r5, r3
 800c25e:	f7ff fc11 	bl	800ba84 <_Balloc>
 800c262:	4604      	mov	r4, r0
 800c264:	b930      	cbnz	r0, 800c274 <__d2b+0x24>
 800c266:	4602      	mov	r2, r0
 800c268:	4b25      	ldr	r3, [pc, #148]	; (800c300 <__d2b+0xb0>)
 800c26a:	4826      	ldr	r0, [pc, #152]	; (800c304 <__d2b+0xb4>)
 800c26c:	f240 310a 	movw	r1, #778	; 0x30a
 800c270:	f000 fa54 	bl	800c71c <__assert_func>
 800c274:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800c278:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800c27c:	bb2d      	cbnz	r5, 800c2ca <__d2b+0x7a>
 800c27e:	9301      	str	r3, [sp, #4]
 800c280:	f1b8 0300 	subs.w	r3, r8, #0
 800c284:	d026      	beq.n	800c2d4 <__d2b+0x84>
 800c286:	4668      	mov	r0, sp
 800c288:	9300      	str	r3, [sp, #0]
 800c28a:	f7ff fd0d 	bl	800bca8 <__lo0bits>
 800c28e:	9900      	ldr	r1, [sp, #0]
 800c290:	b1f0      	cbz	r0, 800c2d0 <__d2b+0x80>
 800c292:	9a01      	ldr	r2, [sp, #4]
 800c294:	f1c0 0320 	rsb	r3, r0, #32
 800c298:	fa02 f303 	lsl.w	r3, r2, r3
 800c29c:	430b      	orrs	r3, r1
 800c29e:	40c2      	lsrs	r2, r0
 800c2a0:	6163      	str	r3, [r4, #20]
 800c2a2:	9201      	str	r2, [sp, #4]
 800c2a4:	9b01      	ldr	r3, [sp, #4]
 800c2a6:	61a3      	str	r3, [r4, #24]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	bf14      	ite	ne
 800c2ac:	2102      	movne	r1, #2
 800c2ae:	2101      	moveq	r1, #1
 800c2b0:	6121      	str	r1, [r4, #16]
 800c2b2:	b1c5      	cbz	r5, 800c2e6 <__d2b+0x96>
 800c2b4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c2b8:	4405      	add	r5, r0
 800c2ba:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c2be:	603d      	str	r5, [r7, #0]
 800c2c0:	6030      	str	r0, [r6, #0]
 800c2c2:	4620      	mov	r0, r4
 800c2c4:	b002      	add	sp, #8
 800c2c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c2ce:	e7d6      	b.n	800c27e <__d2b+0x2e>
 800c2d0:	6161      	str	r1, [r4, #20]
 800c2d2:	e7e7      	b.n	800c2a4 <__d2b+0x54>
 800c2d4:	a801      	add	r0, sp, #4
 800c2d6:	f7ff fce7 	bl	800bca8 <__lo0bits>
 800c2da:	9b01      	ldr	r3, [sp, #4]
 800c2dc:	6163      	str	r3, [r4, #20]
 800c2de:	2101      	movs	r1, #1
 800c2e0:	6121      	str	r1, [r4, #16]
 800c2e2:	3020      	adds	r0, #32
 800c2e4:	e7e5      	b.n	800c2b2 <__d2b+0x62>
 800c2e6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800c2ea:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c2ee:	6038      	str	r0, [r7, #0]
 800c2f0:	6918      	ldr	r0, [r3, #16]
 800c2f2:	f7ff fcb9 	bl	800bc68 <__hi0bits>
 800c2f6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800c2fa:	6031      	str	r1, [r6, #0]
 800c2fc:	e7e1      	b.n	800c2c2 <__d2b+0x72>
 800c2fe:	bf00      	nop
 800c300:	0800d878 	.word	0x0800d878
 800c304:	0800d904 	.word	0x0800d904

0800c308 <__ratio>:
 800c308:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c30c:	4688      	mov	r8, r1
 800c30e:	4669      	mov	r1, sp
 800c310:	4681      	mov	r9, r0
 800c312:	f7ff ff49 	bl	800c1a8 <__b2d>
 800c316:	460f      	mov	r7, r1
 800c318:	4604      	mov	r4, r0
 800c31a:	460d      	mov	r5, r1
 800c31c:	4640      	mov	r0, r8
 800c31e:	a901      	add	r1, sp, #4
 800c320:	f7ff ff42 	bl	800c1a8 <__b2d>
 800c324:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c328:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c32c:	eba3 0c02 	sub.w	ip, r3, r2
 800c330:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c334:	1a9b      	subs	r3, r3, r2
 800c336:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	bfd5      	itete	le
 800c33e:	460a      	movle	r2, r1
 800c340:	462a      	movgt	r2, r5
 800c342:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c346:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c34a:	468b      	mov	fp, r1
 800c34c:	bfd8      	it	le
 800c34e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c352:	465b      	mov	r3, fp
 800c354:	4602      	mov	r2, r0
 800c356:	4639      	mov	r1, r7
 800c358:	4620      	mov	r0, r4
 800c35a:	f7f4 fa4f 	bl	80007fc <__aeabi_ddiv>
 800c35e:	b003      	add	sp, #12
 800c360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c364 <__copybits>:
 800c364:	3901      	subs	r1, #1
 800c366:	b570      	push	{r4, r5, r6, lr}
 800c368:	1149      	asrs	r1, r1, #5
 800c36a:	6914      	ldr	r4, [r2, #16]
 800c36c:	3101      	adds	r1, #1
 800c36e:	f102 0314 	add.w	r3, r2, #20
 800c372:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c376:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c37a:	1f05      	subs	r5, r0, #4
 800c37c:	42a3      	cmp	r3, r4
 800c37e:	d30c      	bcc.n	800c39a <__copybits+0x36>
 800c380:	1aa3      	subs	r3, r4, r2
 800c382:	3b11      	subs	r3, #17
 800c384:	f023 0303 	bic.w	r3, r3, #3
 800c388:	3211      	adds	r2, #17
 800c38a:	42a2      	cmp	r2, r4
 800c38c:	bf88      	it	hi
 800c38e:	2300      	movhi	r3, #0
 800c390:	4418      	add	r0, r3
 800c392:	2300      	movs	r3, #0
 800c394:	4288      	cmp	r0, r1
 800c396:	d305      	bcc.n	800c3a4 <__copybits+0x40>
 800c398:	bd70      	pop	{r4, r5, r6, pc}
 800c39a:	f853 6b04 	ldr.w	r6, [r3], #4
 800c39e:	f845 6f04 	str.w	r6, [r5, #4]!
 800c3a2:	e7eb      	b.n	800c37c <__copybits+0x18>
 800c3a4:	f840 3b04 	str.w	r3, [r0], #4
 800c3a8:	e7f4      	b.n	800c394 <__copybits+0x30>

0800c3aa <__any_on>:
 800c3aa:	f100 0214 	add.w	r2, r0, #20
 800c3ae:	6900      	ldr	r0, [r0, #16]
 800c3b0:	114b      	asrs	r3, r1, #5
 800c3b2:	4298      	cmp	r0, r3
 800c3b4:	b510      	push	{r4, lr}
 800c3b6:	db11      	blt.n	800c3dc <__any_on+0x32>
 800c3b8:	dd0a      	ble.n	800c3d0 <__any_on+0x26>
 800c3ba:	f011 011f 	ands.w	r1, r1, #31
 800c3be:	d007      	beq.n	800c3d0 <__any_on+0x26>
 800c3c0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c3c4:	fa24 f001 	lsr.w	r0, r4, r1
 800c3c8:	fa00 f101 	lsl.w	r1, r0, r1
 800c3cc:	428c      	cmp	r4, r1
 800c3ce:	d10b      	bne.n	800c3e8 <__any_on+0x3e>
 800c3d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c3d4:	4293      	cmp	r3, r2
 800c3d6:	d803      	bhi.n	800c3e0 <__any_on+0x36>
 800c3d8:	2000      	movs	r0, #0
 800c3da:	bd10      	pop	{r4, pc}
 800c3dc:	4603      	mov	r3, r0
 800c3de:	e7f7      	b.n	800c3d0 <__any_on+0x26>
 800c3e0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c3e4:	2900      	cmp	r1, #0
 800c3e6:	d0f5      	beq.n	800c3d4 <__any_on+0x2a>
 800c3e8:	2001      	movs	r0, #1
 800c3ea:	e7f6      	b.n	800c3da <__any_on+0x30>

0800c3ec <_calloc_r>:
 800c3ec:	b570      	push	{r4, r5, r6, lr}
 800c3ee:	fba1 5402 	umull	r5, r4, r1, r2
 800c3f2:	b934      	cbnz	r4, 800c402 <_calloc_r+0x16>
 800c3f4:	4629      	mov	r1, r5
 800c3f6:	f7fc fba7 	bl	8008b48 <_malloc_r>
 800c3fa:	4606      	mov	r6, r0
 800c3fc:	b928      	cbnz	r0, 800c40a <_calloc_r+0x1e>
 800c3fe:	4630      	mov	r0, r6
 800c400:	bd70      	pop	{r4, r5, r6, pc}
 800c402:	220c      	movs	r2, #12
 800c404:	6002      	str	r2, [r0, #0]
 800c406:	2600      	movs	r6, #0
 800c408:	e7f9      	b.n	800c3fe <_calloc_r+0x12>
 800c40a:	462a      	mov	r2, r5
 800c40c:	4621      	mov	r1, r4
 800c40e:	f7fc fb29 	bl	8008a64 <memset>
 800c412:	e7f4      	b.n	800c3fe <_calloc_r+0x12>

0800c414 <__ssputs_r>:
 800c414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c418:	688e      	ldr	r6, [r1, #8]
 800c41a:	429e      	cmp	r6, r3
 800c41c:	4682      	mov	sl, r0
 800c41e:	460c      	mov	r4, r1
 800c420:	4690      	mov	r8, r2
 800c422:	461f      	mov	r7, r3
 800c424:	d838      	bhi.n	800c498 <__ssputs_r+0x84>
 800c426:	898a      	ldrh	r2, [r1, #12]
 800c428:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c42c:	d032      	beq.n	800c494 <__ssputs_r+0x80>
 800c42e:	6825      	ldr	r5, [r4, #0]
 800c430:	6909      	ldr	r1, [r1, #16]
 800c432:	eba5 0901 	sub.w	r9, r5, r1
 800c436:	6965      	ldr	r5, [r4, #20]
 800c438:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c43c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c440:	3301      	adds	r3, #1
 800c442:	444b      	add	r3, r9
 800c444:	106d      	asrs	r5, r5, #1
 800c446:	429d      	cmp	r5, r3
 800c448:	bf38      	it	cc
 800c44a:	461d      	movcc	r5, r3
 800c44c:	0553      	lsls	r3, r2, #21
 800c44e:	d531      	bpl.n	800c4b4 <__ssputs_r+0xa0>
 800c450:	4629      	mov	r1, r5
 800c452:	f7fc fb79 	bl	8008b48 <_malloc_r>
 800c456:	4606      	mov	r6, r0
 800c458:	b950      	cbnz	r0, 800c470 <__ssputs_r+0x5c>
 800c45a:	230c      	movs	r3, #12
 800c45c:	f8ca 3000 	str.w	r3, [sl]
 800c460:	89a3      	ldrh	r3, [r4, #12]
 800c462:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c466:	81a3      	strh	r3, [r4, #12]
 800c468:	f04f 30ff 	mov.w	r0, #4294967295
 800c46c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c470:	6921      	ldr	r1, [r4, #16]
 800c472:	464a      	mov	r2, r9
 800c474:	f7fc fae8 	bl	8008a48 <memcpy>
 800c478:	89a3      	ldrh	r3, [r4, #12]
 800c47a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c47e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c482:	81a3      	strh	r3, [r4, #12]
 800c484:	6126      	str	r6, [r4, #16]
 800c486:	6165      	str	r5, [r4, #20]
 800c488:	444e      	add	r6, r9
 800c48a:	eba5 0509 	sub.w	r5, r5, r9
 800c48e:	6026      	str	r6, [r4, #0]
 800c490:	60a5      	str	r5, [r4, #8]
 800c492:	463e      	mov	r6, r7
 800c494:	42be      	cmp	r6, r7
 800c496:	d900      	bls.n	800c49a <__ssputs_r+0x86>
 800c498:	463e      	mov	r6, r7
 800c49a:	6820      	ldr	r0, [r4, #0]
 800c49c:	4632      	mov	r2, r6
 800c49e:	4641      	mov	r1, r8
 800c4a0:	f000 f96f 	bl	800c782 <memmove>
 800c4a4:	68a3      	ldr	r3, [r4, #8]
 800c4a6:	1b9b      	subs	r3, r3, r6
 800c4a8:	60a3      	str	r3, [r4, #8]
 800c4aa:	6823      	ldr	r3, [r4, #0]
 800c4ac:	4433      	add	r3, r6
 800c4ae:	6023      	str	r3, [r4, #0]
 800c4b0:	2000      	movs	r0, #0
 800c4b2:	e7db      	b.n	800c46c <__ssputs_r+0x58>
 800c4b4:	462a      	mov	r2, r5
 800c4b6:	f000 f97e 	bl	800c7b6 <_realloc_r>
 800c4ba:	4606      	mov	r6, r0
 800c4bc:	2800      	cmp	r0, #0
 800c4be:	d1e1      	bne.n	800c484 <__ssputs_r+0x70>
 800c4c0:	6921      	ldr	r1, [r4, #16]
 800c4c2:	4650      	mov	r0, sl
 800c4c4:	f7fc fad6 	bl	8008a74 <_free_r>
 800c4c8:	e7c7      	b.n	800c45a <__ssputs_r+0x46>
	...

0800c4cc <_svfiprintf_r>:
 800c4cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4d0:	4698      	mov	r8, r3
 800c4d2:	898b      	ldrh	r3, [r1, #12]
 800c4d4:	061b      	lsls	r3, r3, #24
 800c4d6:	b09d      	sub	sp, #116	; 0x74
 800c4d8:	4607      	mov	r7, r0
 800c4da:	460d      	mov	r5, r1
 800c4dc:	4614      	mov	r4, r2
 800c4de:	d50e      	bpl.n	800c4fe <_svfiprintf_r+0x32>
 800c4e0:	690b      	ldr	r3, [r1, #16]
 800c4e2:	b963      	cbnz	r3, 800c4fe <_svfiprintf_r+0x32>
 800c4e4:	2140      	movs	r1, #64	; 0x40
 800c4e6:	f7fc fb2f 	bl	8008b48 <_malloc_r>
 800c4ea:	6028      	str	r0, [r5, #0]
 800c4ec:	6128      	str	r0, [r5, #16]
 800c4ee:	b920      	cbnz	r0, 800c4fa <_svfiprintf_r+0x2e>
 800c4f0:	230c      	movs	r3, #12
 800c4f2:	603b      	str	r3, [r7, #0]
 800c4f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c4f8:	e0d1      	b.n	800c69e <_svfiprintf_r+0x1d2>
 800c4fa:	2340      	movs	r3, #64	; 0x40
 800c4fc:	616b      	str	r3, [r5, #20]
 800c4fe:	2300      	movs	r3, #0
 800c500:	9309      	str	r3, [sp, #36]	; 0x24
 800c502:	2320      	movs	r3, #32
 800c504:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c508:	f8cd 800c 	str.w	r8, [sp, #12]
 800c50c:	2330      	movs	r3, #48	; 0x30
 800c50e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c6b8 <_svfiprintf_r+0x1ec>
 800c512:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c516:	f04f 0901 	mov.w	r9, #1
 800c51a:	4623      	mov	r3, r4
 800c51c:	469a      	mov	sl, r3
 800c51e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c522:	b10a      	cbz	r2, 800c528 <_svfiprintf_r+0x5c>
 800c524:	2a25      	cmp	r2, #37	; 0x25
 800c526:	d1f9      	bne.n	800c51c <_svfiprintf_r+0x50>
 800c528:	ebba 0b04 	subs.w	fp, sl, r4
 800c52c:	d00b      	beq.n	800c546 <_svfiprintf_r+0x7a>
 800c52e:	465b      	mov	r3, fp
 800c530:	4622      	mov	r2, r4
 800c532:	4629      	mov	r1, r5
 800c534:	4638      	mov	r0, r7
 800c536:	f7ff ff6d 	bl	800c414 <__ssputs_r>
 800c53a:	3001      	adds	r0, #1
 800c53c:	f000 80aa 	beq.w	800c694 <_svfiprintf_r+0x1c8>
 800c540:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c542:	445a      	add	r2, fp
 800c544:	9209      	str	r2, [sp, #36]	; 0x24
 800c546:	f89a 3000 	ldrb.w	r3, [sl]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	f000 80a2 	beq.w	800c694 <_svfiprintf_r+0x1c8>
 800c550:	2300      	movs	r3, #0
 800c552:	f04f 32ff 	mov.w	r2, #4294967295
 800c556:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c55a:	f10a 0a01 	add.w	sl, sl, #1
 800c55e:	9304      	str	r3, [sp, #16]
 800c560:	9307      	str	r3, [sp, #28]
 800c562:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c566:	931a      	str	r3, [sp, #104]	; 0x68
 800c568:	4654      	mov	r4, sl
 800c56a:	2205      	movs	r2, #5
 800c56c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c570:	4851      	ldr	r0, [pc, #324]	; (800c6b8 <_svfiprintf_r+0x1ec>)
 800c572:	f7f3 fe0d 	bl	8000190 <memchr>
 800c576:	9a04      	ldr	r2, [sp, #16]
 800c578:	b9d8      	cbnz	r0, 800c5b2 <_svfiprintf_r+0xe6>
 800c57a:	06d0      	lsls	r0, r2, #27
 800c57c:	bf44      	itt	mi
 800c57e:	2320      	movmi	r3, #32
 800c580:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c584:	0711      	lsls	r1, r2, #28
 800c586:	bf44      	itt	mi
 800c588:	232b      	movmi	r3, #43	; 0x2b
 800c58a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c58e:	f89a 3000 	ldrb.w	r3, [sl]
 800c592:	2b2a      	cmp	r3, #42	; 0x2a
 800c594:	d015      	beq.n	800c5c2 <_svfiprintf_r+0xf6>
 800c596:	9a07      	ldr	r2, [sp, #28]
 800c598:	4654      	mov	r4, sl
 800c59a:	2000      	movs	r0, #0
 800c59c:	f04f 0c0a 	mov.w	ip, #10
 800c5a0:	4621      	mov	r1, r4
 800c5a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5a6:	3b30      	subs	r3, #48	; 0x30
 800c5a8:	2b09      	cmp	r3, #9
 800c5aa:	d94e      	bls.n	800c64a <_svfiprintf_r+0x17e>
 800c5ac:	b1b0      	cbz	r0, 800c5dc <_svfiprintf_r+0x110>
 800c5ae:	9207      	str	r2, [sp, #28]
 800c5b0:	e014      	b.n	800c5dc <_svfiprintf_r+0x110>
 800c5b2:	eba0 0308 	sub.w	r3, r0, r8
 800c5b6:	fa09 f303 	lsl.w	r3, r9, r3
 800c5ba:	4313      	orrs	r3, r2
 800c5bc:	9304      	str	r3, [sp, #16]
 800c5be:	46a2      	mov	sl, r4
 800c5c0:	e7d2      	b.n	800c568 <_svfiprintf_r+0x9c>
 800c5c2:	9b03      	ldr	r3, [sp, #12]
 800c5c4:	1d19      	adds	r1, r3, #4
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	9103      	str	r1, [sp, #12]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	bfbb      	ittet	lt
 800c5ce:	425b      	neglt	r3, r3
 800c5d0:	f042 0202 	orrlt.w	r2, r2, #2
 800c5d4:	9307      	strge	r3, [sp, #28]
 800c5d6:	9307      	strlt	r3, [sp, #28]
 800c5d8:	bfb8      	it	lt
 800c5da:	9204      	strlt	r2, [sp, #16]
 800c5dc:	7823      	ldrb	r3, [r4, #0]
 800c5de:	2b2e      	cmp	r3, #46	; 0x2e
 800c5e0:	d10c      	bne.n	800c5fc <_svfiprintf_r+0x130>
 800c5e2:	7863      	ldrb	r3, [r4, #1]
 800c5e4:	2b2a      	cmp	r3, #42	; 0x2a
 800c5e6:	d135      	bne.n	800c654 <_svfiprintf_r+0x188>
 800c5e8:	9b03      	ldr	r3, [sp, #12]
 800c5ea:	1d1a      	adds	r2, r3, #4
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	9203      	str	r2, [sp, #12]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	bfb8      	it	lt
 800c5f4:	f04f 33ff 	movlt.w	r3, #4294967295
 800c5f8:	3402      	adds	r4, #2
 800c5fa:	9305      	str	r3, [sp, #20]
 800c5fc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800c6bc <_svfiprintf_r+0x1f0>
 800c600:	7821      	ldrb	r1, [r4, #0]
 800c602:	2203      	movs	r2, #3
 800c604:	4650      	mov	r0, sl
 800c606:	f7f3 fdc3 	bl	8000190 <memchr>
 800c60a:	b140      	cbz	r0, 800c61e <_svfiprintf_r+0x152>
 800c60c:	2340      	movs	r3, #64	; 0x40
 800c60e:	eba0 000a 	sub.w	r0, r0, sl
 800c612:	fa03 f000 	lsl.w	r0, r3, r0
 800c616:	9b04      	ldr	r3, [sp, #16]
 800c618:	4303      	orrs	r3, r0
 800c61a:	3401      	adds	r4, #1
 800c61c:	9304      	str	r3, [sp, #16]
 800c61e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c622:	4827      	ldr	r0, [pc, #156]	; (800c6c0 <_svfiprintf_r+0x1f4>)
 800c624:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c628:	2206      	movs	r2, #6
 800c62a:	f7f3 fdb1 	bl	8000190 <memchr>
 800c62e:	2800      	cmp	r0, #0
 800c630:	d038      	beq.n	800c6a4 <_svfiprintf_r+0x1d8>
 800c632:	4b24      	ldr	r3, [pc, #144]	; (800c6c4 <_svfiprintf_r+0x1f8>)
 800c634:	bb1b      	cbnz	r3, 800c67e <_svfiprintf_r+0x1b2>
 800c636:	9b03      	ldr	r3, [sp, #12]
 800c638:	3307      	adds	r3, #7
 800c63a:	f023 0307 	bic.w	r3, r3, #7
 800c63e:	3308      	adds	r3, #8
 800c640:	9303      	str	r3, [sp, #12]
 800c642:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c644:	4433      	add	r3, r6
 800c646:	9309      	str	r3, [sp, #36]	; 0x24
 800c648:	e767      	b.n	800c51a <_svfiprintf_r+0x4e>
 800c64a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c64e:	460c      	mov	r4, r1
 800c650:	2001      	movs	r0, #1
 800c652:	e7a5      	b.n	800c5a0 <_svfiprintf_r+0xd4>
 800c654:	2300      	movs	r3, #0
 800c656:	3401      	adds	r4, #1
 800c658:	9305      	str	r3, [sp, #20]
 800c65a:	4619      	mov	r1, r3
 800c65c:	f04f 0c0a 	mov.w	ip, #10
 800c660:	4620      	mov	r0, r4
 800c662:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c666:	3a30      	subs	r2, #48	; 0x30
 800c668:	2a09      	cmp	r2, #9
 800c66a:	d903      	bls.n	800c674 <_svfiprintf_r+0x1a8>
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d0c5      	beq.n	800c5fc <_svfiprintf_r+0x130>
 800c670:	9105      	str	r1, [sp, #20]
 800c672:	e7c3      	b.n	800c5fc <_svfiprintf_r+0x130>
 800c674:	fb0c 2101 	mla	r1, ip, r1, r2
 800c678:	4604      	mov	r4, r0
 800c67a:	2301      	movs	r3, #1
 800c67c:	e7f0      	b.n	800c660 <_svfiprintf_r+0x194>
 800c67e:	ab03      	add	r3, sp, #12
 800c680:	9300      	str	r3, [sp, #0]
 800c682:	462a      	mov	r2, r5
 800c684:	4b10      	ldr	r3, [pc, #64]	; (800c6c8 <_svfiprintf_r+0x1fc>)
 800c686:	a904      	add	r1, sp, #16
 800c688:	4638      	mov	r0, r7
 800c68a:	f7fc fb6f 	bl	8008d6c <_printf_float>
 800c68e:	1c42      	adds	r2, r0, #1
 800c690:	4606      	mov	r6, r0
 800c692:	d1d6      	bne.n	800c642 <_svfiprintf_r+0x176>
 800c694:	89ab      	ldrh	r3, [r5, #12]
 800c696:	065b      	lsls	r3, r3, #25
 800c698:	f53f af2c 	bmi.w	800c4f4 <_svfiprintf_r+0x28>
 800c69c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c69e:	b01d      	add	sp, #116	; 0x74
 800c6a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6a4:	ab03      	add	r3, sp, #12
 800c6a6:	9300      	str	r3, [sp, #0]
 800c6a8:	462a      	mov	r2, r5
 800c6aa:	4b07      	ldr	r3, [pc, #28]	; (800c6c8 <_svfiprintf_r+0x1fc>)
 800c6ac:	a904      	add	r1, sp, #16
 800c6ae:	4638      	mov	r0, r7
 800c6b0:	f7fc fdf4 	bl	800929c <_printf_i>
 800c6b4:	e7eb      	b.n	800c68e <_svfiprintf_r+0x1c2>
 800c6b6:	bf00      	nop
 800c6b8:	0800da5c 	.word	0x0800da5c
 800c6bc:	0800da62 	.word	0x0800da62
 800c6c0:	0800da66 	.word	0x0800da66
 800c6c4:	08008d6d 	.word	0x08008d6d
 800c6c8:	0800c415 	.word	0x0800c415

0800c6cc <nan>:
 800c6cc:	4901      	ldr	r1, [pc, #4]	; (800c6d4 <nan+0x8>)
 800c6ce:	2000      	movs	r0, #0
 800c6d0:	4770      	bx	lr
 800c6d2:	bf00      	nop
 800c6d4:	7ff80000 	.word	0x7ff80000

0800c6d8 <strncmp>:
 800c6d8:	b510      	push	{r4, lr}
 800c6da:	4603      	mov	r3, r0
 800c6dc:	b172      	cbz	r2, 800c6fc <strncmp+0x24>
 800c6de:	3901      	subs	r1, #1
 800c6e0:	1884      	adds	r4, r0, r2
 800c6e2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c6e6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c6ea:	4290      	cmp	r0, r2
 800c6ec:	d101      	bne.n	800c6f2 <strncmp+0x1a>
 800c6ee:	42a3      	cmp	r3, r4
 800c6f0:	d101      	bne.n	800c6f6 <strncmp+0x1e>
 800c6f2:	1a80      	subs	r0, r0, r2
 800c6f4:	bd10      	pop	{r4, pc}
 800c6f6:	2800      	cmp	r0, #0
 800c6f8:	d1f3      	bne.n	800c6e2 <strncmp+0xa>
 800c6fa:	e7fa      	b.n	800c6f2 <strncmp+0x1a>
 800c6fc:	4610      	mov	r0, r2
 800c6fe:	e7f9      	b.n	800c6f4 <strncmp+0x1c>

0800c700 <__ascii_wctomb>:
 800c700:	4603      	mov	r3, r0
 800c702:	4608      	mov	r0, r1
 800c704:	b141      	cbz	r1, 800c718 <__ascii_wctomb+0x18>
 800c706:	2aff      	cmp	r2, #255	; 0xff
 800c708:	d904      	bls.n	800c714 <__ascii_wctomb+0x14>
 800c70a:	228a      	movs	r2, #138	; 0x8a
 800c70c:	601a      	str	r2, [r3, #0]
 800c70e:	f04f 30ff 	mov.w	r0, #4294967295
 800c712:	4770      	bx	lr
 800c714:	700a      	strb	r2, [r1, #0]
 800c716:	2001      	movs	r0, #1
 800c718:	4770      	bx	lr
	...

0800c71c <__assert_func>:
 800c71c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c71e:	4614      	mov	r4, r2
 800c720:	461a      	mov	r2, r3
 800c722:	4b09      	ldr	r3, [pc, #36]	; (800c748 <__assert_func+0x2c>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	4605      	mov	r5, r0
 800c728:	68d8      	ldr	r0, [r3, #12]
 800c72a:	b14c      	cbz	r4, 800c740 <__assert_func+0x24>
 800c72c:	4b07      	ldr	r3, [pc, #28]	; (800c74c <__assert_func+0x30>)
 800c72e:	9100      	str	r1, [sp, #0]
 800c730:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c734:	4906      	ldr	r1, [pc, #24]	; (800c750 <__assert_func+0x34>)
 800c736:	462b      	mov	r3, r5
 800c738:	f000 f80e 	bl	800c758 <fiprintf>
 800c73c:	f000 fa82 	bl	800cc44 <abort>
 800c740:	4b04      	ldr	r3, [pc, #16]	; (800c754 <__assert_func+0x38>)
 800c742:	461c      	mov	r4, r3
 800c744:	e7f3      	b.n	800c72e <__assert_func+0x12>
 800c746:	bf00      	nop
 800c748:	20000010 	.word	0x20000010
 800c74c:	0800da6d 	.word	0x0800da6d
 800c750:	0800da7a 	.word	0x0800da7a
 800c754:	0800daa8 	.word	0x0800daa8

0800c758 <fiprintf>:
 800c758:	b40e      	push	{r1, r2, r3}
 800c75a:	b503      	push	{r0, r1, lr}
 800c75c:	4601      	mov	r1, r0
 800c75e:	ab03      	add	r3, sp, #12
 800c760:	4805      	ldr	r0, [pc, #20]	; (800c778 <fiprintf+0x20>)
 800c762:	f853 2b04 	ldr.w	r2, [r3], #4
 800c766:	6800      	ldr	r0, [r0, #0]
 800c768:	9301      	str	r3, [sp, #4]
 800c76a:	f000 f87b 	bl	800c864 <_vfiprintf_r>
 800c76e:	b002      	add	sp, #8
 800c770:	f85d eb04 	ldr.w	lr, [sp], #4
 800c774:	b003      	add	sp, #12
 800c776:	4770      	bx	lr
 800c778:	20000010 	.word	0x20000010

0800c77c <__retarget_lock_init_recursive>:
 800c77c:	4770      	bx	lr

0800c77e <__retarget_lock_acquire_recursive>:
 800c77e:	4770      	bx	lr

0800c780 <__retarget_lock_release_recursive>:
 800c780:	4770      	bx	lr

0800c782 <memmove>:
 800c782:	4288      	cmp	r0, r1
 800c784:	b510      	push	{r4, lr}
 800c786:	eb01 0402 	add.w	r4, r1, r2
 800c78a:	d902      	bls.n	800c792 <memmove+0x10>
 800c78c:	4284      	cmp	r4, r0
 800c78e:	4623      	mov	r3, r4
 800c790:	d807      	bhi.n	800c7a2 <memmove+0x20>
 800c792:	1e43      	subs	r3, r0, #1
 800c794:	42a1      	cmp	r1, r4
 800c796:	d008      	beq.n	800c7aa <memmove+0x28>
 800c798:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c79c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c7a0:	e7f8      	b.n	800c794 <memmove+0x12>
 800c7a2:	4402      	add	r2, r0
 800c7a4:	4601      	mov	r1, r0
 800c7a6:	428a      	cmp	r2, r1
 800c7a8:	d100      	bne.n	800c7ac <memmove+0x2a>
 800c7aa:	bd10      	pop	{r4, pc}
 800c7ac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c7b0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c7b4:	e7f7      	b.n	800c7a6 <memmove+0x24>

0800c7b6 <_realloc_r>:
 800c7b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7ba:	4680      	mov	r8, r0
 800c7bc:	4614      	mov	r4, r2
 800c7be:	460e      	mov	r6, r1
 800c7c0:	b921      	cbnz	r1, 800c7cc <_realloc_r+0x16>
 800c7c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7c6:	4611      	mov	r1, r2
 800c7c8:	f7fc b9be 	b.w	8008b48 <_malloc_r>
 800c7cc:	b92a      	cbnz	r2, 800c7da <_realloc_r+0x24>
 800c7ce:	f7fc f951 	bl	8008a74 <_free_r>
 800c7d2:	4625      	mov	r5, r4
 800c7d4:	4628      	mov	r0, r5
 800c7d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7da:	f000 fc53 	bl	800d084 <_malloc_usable_size_r>
 800c7de:	4284      	cmp	r4, r0
 800c7e0:	4607      	mov	r7, r0
 800c7e2:	d802      	bhi.n	800c7ea <_realloc_r+0x34>
 800c7e4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c7e8:	d812      	bhi.n	800c810 <_realloc_r+0x5a>
 800c7ea:	4621      	mov	r1, r4
 800c7ec:	4640      	mov	r0, r8
 800c7ee:	f7fc f9ab 	bl	8008b48 <_malloc_r>
 800c7f2:	4605      	mov	r5, r0
 800c7f4:	2800      	cmp	r0, #0
 800c7f6:	d0ed      	beq.n	800c7d4 <_realloc_r+0x1e>
 800c7f8:	42bc      	cmp	r4, r7
 800c7fa:	4622      	mov	r2, r4
 800c7fc:	4631      	mov	r1, r6
 800c7fe:	bf28      	it	cs
 800c800:	463a      	movcs	r2, r7
 800c802:	f7fc f921 	bl	8008a48 <memcpy>
 800c806:	4631      	mov	r1, r6
 800c808:	4640      	mov	r0, r8
 800c80a:	f7fc f933 	bl	8008a74 <_free_r>
 800c80e:	e7e1      	b.n	800c7d4 <_realloc_r+0x1e>
 800c810:	4635      	mov	r5, r6
 800c812:	e7df      	b.n	800c7d4 <_realloc_r+0x1e>

0800c814 <__sfputc_r>:
 800c814:	6893      	ldr	r3, [r2, #8]
 800c816:	3b01      	subs	r3, #1
 800c818:	2b00      	cmp	r3, #0
 800c81a:	b410      	push	{r4}
 800c81c:	6093      	str	r3, [r2, #8]
 800c81e:	da07      	bge.n	800c830 <__sfputc_r+0x1c>
 800c820:	6994      	ldr	r4, [r2, #24]
 800c822:	42a3      	cmp	r3, r4
 800c824:	db01      	blt.n	800c82a <__sfputc_r+0x16>
 800c826:	290a      	cmp	r1, #10
 800c828:	d102      	bne.n	800c830 <__sfputc_r+0x1c>
 800c82a:	bc10      	pop	{r4}
 800c82c:	f000 b94a 	b.w	800cac4 <__swbuf_r>
 800c830:	6813      	ldr	r3, [r2, #0]
 800c832:	1c58      	adds	r0, r3, #1
 800c834:	6010      	str	r0, [r2, #0]
 800c836:	7019      	strb	r1, [r3, #0]
 800c838:	4608      	mov	r0, r1
 800c83a:	bc10      	pop	{r4}
 800c83c:	4770      	bx	lr

0800c83e <__sfputs_r>:
 800c83e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c840:	4606      	mov	r6, r0
 800c842:	460f      	mov	r7, r1
 800c844:	4614      	mov	r4, r2
 800c846:	18d5      	adds	r5, r2, r3
 800c848:	42ac      	cmp	r4, r5
 800c84a:	d101      	bne.n	800c850 <__sfputs_r+0x12>
 800c84c:	2000      	movs	r0, #0
 800c84e:	e007      	b.n	800c860 <__sfputs_r+0x22>
 800c850:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c854:	463a      	mov	r2, r7
 800c856:	4630      	mov	r0, r6
 800c858:	f7ff ffdc 	bl	800c814 <__sfputc_r>
 800c85c:	1c43      	adds	r3, r0, #1
 800c85e:	d1f3      	bne.n	800c848 <__sfputs_r+0xa>
 800c860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c864 <_vfiprintf_r>:
 800c864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c868:	460d      	mov	r5, r1
 800c86a:	b09d      	sub	sp, #116	; 0x74
 800c86c:	4614      	mov	r4, r2
 800c86e:	4698      	mov	r8, r3
 800c870:	4606      	mov	r6, r0
 800c872:	b118      	cbz	r0, 800c87c <_vfiprintf_r+0x18>
 800c874:	6983      	ldr	r3, [r0, #24]
 800c876:	b90b      	cbnz	r3, 800c87c <_vfiprintf_r+0x18>
 800c878:	f000 fb02 	bl	800ce80 <__sinit>
 800c87c:	4b89      	ldr	r3, [pc, #548]	; (800caa4 <_vfiprintf_r+0x240>)
 800c87e:	429d      	cmp	r5, r3
 800c880:	d11b      	bne.n	800c8ba <_vfiprintf_r+0x56>
 800c882:	6875      	ldr	r5, [r6, #4]
 800c884:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c886:	07d9      	lsls	r1, r3, #31
 800c888:	d405      	bmi.n	800c896 <_vfiprintf_r+0x32>
 800c88a:	89ab      	ldrh	r3, [r5, #12]
 800c88c:	059a      	lsls	r2, r3, #22
 800c88e:	d402      	bmi.n	800c896 <_vfiprintf_r+0x32>
 800c890:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c892:	f7ff ff74 	bl	800c77e <__retarget_lock_acquire_recursive>
 800c896:	89ab      	ldrh	r3, [r5, #12]
 800c898:	071b      	lsls	r3, r3, #28
 800c89a:	d501      	bpl.n	800c8a0 <_vfiprintf_r+0x3c>
 800c89c:	692b      	ldr	r3, [r5, #16]
 800c89e:	b9eb      	cbnz	r3, 800c8dc <_vfiprintf_r+0x78>
 800c8a0:	4629      	mov	r1, r5
 800c8a2:	4630      	mov	r0, r6
 800c8a4:	f000 f960 	bl	800cb68 <__swsetup_r>
 800c8a8:	b1c0      	cbz	r0, 800c8dc <_vfiprintf_r+0x78>
 800c8aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8ac:	07dc      	lsls	r4, r3, #31
 800c8ae:	d50e      	bpl.n	800c8ce <_vfiprintf_r+0x6a>
 800c8b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c8b4:	b01d      	add	sp, #116	; 0x74
 800c8b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8ba:	4b7b      	ldr	r3, [pc, #492]	; (800caa8 <_vfiprintf_r+0x244>)
 800c8bc:	429d      	cmp	r5, r3
 800c8be:	d101      	bne.n	800c8c4 <_vfiprintf_r+0x60>
 800c8c0:	68b5      	ldr	r5, [r6, #8]
 800c8c2:	e7df      	b.n	800c884 <_vfiprintf_r+0x20>
 800c8c4:	4b79      	ldr	r3, [pc, #484]	; (800caac <_vfiprintf_r+0x248>)
 800c8c6:	429d      	cmp	r5, r3
 800c8c8:	bf08      	it	eq
 800c8ca:	68f5      	ldreq	r5, [r6, #12]
 800c8cc:	e7da      	b.n	800c884 <_vfiprintf_r+0x20>
 800c8ce:	89ab      	ldrh	r3, [r5, #12]
 800c8d0:	0598      	lsls	r0, r3, #22
 800c8d2:	d4ed      	bmi.n	800c8b0 <_vfiprintf_r+0x4c>
 800c8d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c8d6:	f7ff ff53 	bl	800c780 <__retarget_lock_release_recursive>
 800c8da:	e7e9      	b.n	800c8b0 <_vfiprintf_r+0x4c>
 800c8dc:	2300      	movs	r3, #0
 800c8de:	9309      	str	r3, [sp, #36]	; 0x24
 800c8e0:	2320      	movs	r3, #32
 800c8e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c8e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c8ea:	2330      	movs	r3, #48	; 0x30
 800c8ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cab0 <_vfiprintf_r+0x24c>
 800c8f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c8f4:	f04f 0901 	mov.w	r9, #1
 800c8f8:	4623      	mov	r3, r4
 800c8fa:	469a      	mov	sl, r3
 800c8fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c900:	b10a      	cbz	r2, 800c906 <_vfiprintf_r+0xa2>
 800c902:	2a25      	cmp	r2, #37	; 0x25
 800c904:	d1f9      	bne.n	800c8fa <_vfiprintf_r+0x96>
 800c906:	ebba 0b04 	subs.w	fp, sl, r4
 800c90a:	d00b      	beq.n	800c924 <_vfiprintf_r+0xc0>
 800c90c:	465b      	mov	r3, fp
 800c90e:	4622      	mov	r2, r4
 800c910:	4629      	mov	r1, r5
 800c912:	4630      	mov	r0, r6
 800c914:	f7ff ff93 	bl	800c83e <__sfputs_r>
 800c918:	3001      	adds	r0, #1
 800c91a:	f000 80aa 	beq.w	800ca72 <_vfiprintf_r+0x20e>
 800c91e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c920:	445a      	add	r2, fp
 800c922:	9209      	str	r2, [sp, #36]	; 0x24
 800c924:	f89a 3000 	ldrb.w	r3, [sl]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	f000 80a2 	beq.w	800ca72 <_vfiprintf_r+0x20e>
 800c92e:	2300      	movs	r3, #0
 800c930:	f04f 32ff 	mov.w	r2, #4294967295
 800c934:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c938:	f10a 0a01 	add.w	sl, sl, #1
 800c93c:	9304      	str	r3, [sp, #16]
 800c93e:	9307      	str	r3, [sp, #28]
 800c940:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c944:	931a      	str	r3, [sp, #104]	; 0x68
 800c946:	4654      	mov	r4, sl
 800c948:	2205      	movs	r2, #5
 800c94a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c94e:	4858      	ldr	r0, [pc, #352]	; (800cab0 <_vfiprintf_r+0x24c>)
 800c950:	f7f3 fc1e 	bl	8000190 <memchr>
 800c954:	9a04      	ldr	r2, [sp, #16]
 800c956:	b9d8      	cbnz	r0, 800c990 <_vfiprintf_r+0x12c>
 800c958:	06d1      	lsls	r1, r2, #27
 800c95a:	bf44      	itt	mi
 800c95c:	2320      	movmi	r3, #32
 800c95e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c962:	0713      	lsls	r3, r2, #28
 800c964:	bf44      	itt	mi
 800c966:	232b      	movmi	r3, #43	; 0x2b
 800c968:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c96c:	f89a 3000 	ldrb.w	r3, [sl]
 800c970:	2b2a      	cmp	r3, #42	; 0x2a
 800c972:	d015      	beq.n	800c9a0 <_vfiprintf_r+0x13c>
 800c974:	9a07      	ldr	r2, [sp, #28]
 800c976:	4654      	mov	r4, sl
 800c978:	2000      	movs	r0, #0
 800c97a:	f04f 0c0a 	mov.w	ip, #10
 800c97e:	4621      	mov	r1, r4
 800c980:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c984:	3b30      	subs	r3, #48	; 0x30
 800c986:	2b09      	cmp	r3, #9
 800c988:	d94e      	bls.n	800ca28 <_vfiprintf_r+0x1c4>
 800c98a:	b1b0      	cbz	r0, 800c9ba <_vfiprintf_r+0x156>
 800c98c:	9207      	str	r2, [sp, #28]
 800c98e:	e014      	b.n	800c9ba <_vfiprintf_r+0x156>
 800c990:	eba0 0308 	sub.w	r3, r0, r8
 800c994:	fa09 f303 	lsl.w	r3, r9, r3
 800c998:	4313      	orrs	r3, r2
 800c99a:	9304      	str	r3, [sp, #16]
 800c99c:	46a2      	mov	sl, r4
 800c99e:	e7d2      	b.n	800c946 <_vfiprintf_r+0xe2>
 800c9a0:	9b03      	ldr	r3, [sp, #12]
 800c9a2:	1d19      	adds	r1, r3, #4
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	9103      	str	r1, [sp, #12]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	bfbb      	ittet	lt
 800c9ac:	425b      	neglt	r3, r3
 800c9ae:	f042 0202 	orrlt.w	r2, r2, #2
 800c9b2:	9307      	strge	r3, [sp, #28]
 800c9b4:	9307      	strlt	r3, [sp, #28]
 800c9b6:	bfb8      	it	lt
 800c9b8:	9204      	strlt	r2, [sp, #16]
 800c9ba:	7823      	ldrb	r3, [r4, #0]
 800c9bc:	2b2e      	cmp	r3, #46	; 0x2e
 800c9be:	d10c      	bne.n	800c9da <_vfiprintf_r+0x176>
 800c9c0:	7863      	ldrb	r3, [r4, #1]
 800c9c2:	2b2a      	cmp	r3, #42	; 0x2a
 800c9c4:	d135      	bne.n	800ca32 <_vfiprintf_r+0x1ce>
 800c9c6:	9b03      	ldr	r3, [sp, #12]
 800c9c8:	1d1a      	adds	r2, r3, #4
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	9203      	str	r2, [sp, #12]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	bfb8      	it	lt
 800c9d2:	f04f 33ff 	movlt.w	r3, #4294967295
 800c9d6:	3402      	adds	r4, #2
 800c9d8:	9305      	str	r3, [sp, #20]
 800c9da:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800cab4 <_vfiprintf_r+0x250>
 800c9de:	7821      	ldrb	r1, [r4, #0]
 800c9e0:	2203      	movs	r2, #3
 800c9e2:	4650      	mov	r0, sl
 800c9e4:	f7f3 fbd4 	bl	8000190 <memchr>
 800c9e8:	b140      	cbz	r0, 800c9fc <_vfiprintf_r+0x198>
 800c9ea:	2340      	movs	r3, #64	; 0x40
 800c9ec:	eba0 000a 	sub.w	r0, r0, sl
 800c9f0:	fa03 f000 	lsl.w	r0, r3, r0
 800c9f4:	9b04      	ldr	r3, [sp, #16]
 800c9f6:	4303      	orrs	r3, r0
 800c9f8:	3401      	adds	r4, #1
 800c9fa:	9304      	str	r3, [sp, #16]
 800c9fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca00:	482d      	ldr	r0, [pc, #180]	; (800cab8 <_vfiprintf_r+0x254>)
 800ca02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ca06:	2206      	movs	r2, #6
 800ca08:	f7f3 fbc2 	bl	8000190 <memchr>
 800ca0c:	2800      	cmp	r0, #0
 800ca0e:	d03f      	beq.n	800ca90 <_vfiprintf_r+0x22c>
 800ca10:	4b2a      	ldr	r3, [pc, #168]	; (800cabc <_vfiprintf_r+0x258>)
 800ca12:	bb1b      	cbnz	r3, 800ca5c <_vfiprintf_r+0x1f8>
 800ca14:	9b03      	ldr	r3, [sp, #12]
 800ca16:	3307      	adds	r3, #7
 800ca18:	f023 0307 	bic.w	r3, r3, #7
 800ca1c:	3308      	adds	r3, #8
 800ca1e:	9303      	str	r3, [sp, #12]
 800ca20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca22:	443b      	add	r3, r7
 800ca24:	9309      	str	r3, [sp, #36]	; 0x24
 800ca26:	e767      	b.n	800c8f8 <_vfiprintf_r+0x94>
 800ca28:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca2c:	460c      	mov	r4, r1
 800ca2e:	2001      	movs	r0, #1
 800ca30:	e7a5      	b.n	800c97e <_vfiprintf_r+0x11a>
 800ca32:	2300      	movs	r3, #0
 800ca34:	3401      	adds	r4, #1
 800ca36:	9305      	str	r3, [sp, #20]
 800ca38:	4619      	mov	r1, r3
 800ca3a:	f04f 0c0a 	mov.w	ip, #10
 800ca3e:	4620      	mov	r0, r4
 800ca40:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca44:	3a30      	subs	r2, #48	; 0x30
 800ca46:	2a09      	cmp	r2, #9
 800ca48:	d903      	bls.n	800ca52 <_vfiprintf_r+0x1ee>
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d0c5      	beq.n	800c9da <_vfiprintf_r+0x176>
 800ca4e:	9105      	str	r1, [sp, #20]
 800ca50:	e7c3      	b.n	800c9da <_vfiprintf_r+0x176>
 800ca52:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca56:	4604      	mov	r4, r0
 800ca58:	2301      	movs	r3, #1
 800ca5a:	e7f0      	b.n	800ca3e <_vfiprintf_r+0x1da>
 800ca5c:	ab03      	add	r3, sp, #12
 800ca5e:	9300      	str	r3, [sp, #0]
 800ca60:	462a      	mov	r2, r5
 800ca62:	4b17      	ldr	r3, [pc, #92]	; (800cac0 <_vfiprintf_r+0x25c>)
 800ca64:	a904      	add	r1, sp, #16
 800ca66:	4630      	mov	r0, r6
 800ca68:	f7fc f980 	bl	8008d6c <_printf_float>
 800ca6c:	4607      	mov	r7, r0
 800ca6e:	1c78      	adds	r0, r7, #1
 800ca70:	d1d6      	bne.n	800ca20 <_vfiprintf_r+0x1bc>
 800ca72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca74:	07d9      	lsls	r1, r3, #31
 800ca76:	d405      	bmi.n	800ca84 <_vfiprintf_r+0x220>
 800ca78:	89ab      	ldrh	r3, [r5, #12]
 800ca7a:	059a      	lsls	r2, r3, #22
 800ca7c:	d402      	bmi.n	800ca84 <_vfiprintf_r+0x220>
 800ca7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca80:	f7ff fe7e 	bl	800c780 <__retarget_lock_release_recursive>
 800ca84:	89ab      	ldrh	r3, [r5, #12]
 800ca86:	065b      	lsls	r3, r3, #25
 800ca88:	f53f af12 	bmi.w	800c8b0 <_vfiprintf_r+0x4c>
 800ca8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca8e:	e711      	b.n	800c8b4 <_vfiprintf_r+0x50>
 800ca90:	ab03      	add	r3, sp, #12
 800ca92:	9300      	str	r3, [sp, #0]
 800ca94:	462a      	mov	r2, r5
 800ca96:	4b0a      	ldr	r3, [pc, #40]	; (800cac0 <_vfiprintf_r+0x25c>)
 800ca98:	a904      	add	r1, sp, #16
 800ca9a:	4630      	mov	r0, r6
 800ca9c:	f7fc fbfe 	bl	800929c <_printf_i>
 800caa0:	e7e4      	b.n	800ca6c <_vfiprintf_r+0x208>
 800caa2:	bf00      	nop
 800caa4:	0800dacc 	.word	0x0800dacc
 800caa8:	0800daec 	.word	0x0800daec
 800caac:	0800daac 	.word	0x0800daac
 800cab0:	0800da5c 	.word	0x0800da5c
 800cab4:	0800da62 	.word	0x0800da62
 800cab8:	0800da66 	.word	0x0800da66
 800cabc:	08008d6d 	.word	0x08008d6d
 800cac0:	0800c83f 	.word	0x0800c83f

0800cac4 <__swbuf_r>:
 800cac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cac6:	460e      	mov	r6, r1
 800cac8:	4614      	mov	r4, r2
 800caca:	4605      	mov	r5, r0
 800cacc:	b118      	cbz	r0, 800cad6 <__swbuf_r+0x12>
 800cace:	6983      	ldr	r3, [r0, #24]
 800cad0:	b90b      	cbnz	r3, 800cad6 <__swbuf_r+0x12>
 800cad2:	f000 f9d5 	bl	800ce80 <__sinit>
 800cad6:	4b21      	ldr	r3, [pc, #132]	; (800cb5c <__swbuf_r+0x98>)
 800cad8:	429c      	cmp	r4, r3
 800cada:	d12b      	bne.n	800cb34 <__swbuf_r+0x70>
 800cadc:	686c      	ldr	r4, [r5, #4]
 800cade:	69a3      	ldr	r3, [r4, #24]
 800cae0:	60a3      	str	r3, [r4, #8]
 800cae2:	89a3      	ldrh	r3, [r4, #12]
 800cae4:	071a      	lsls	r2, r3, #28
 800cae6:	d52f      	bpl.n	800cb48 <__swbuf_r+0x84>
 800cae8:	6923      	ldr	r3, [r4, #16]
 800caea:	b36b      	cbz	r3, 800cb48 <__swbuf_r+0x84>
 800caec:	6923      	ldr	r3, [r4, #16]
 800caee:	6820      	ldr	r0, [r4, #0]
 800caf0:	1ac0      	subs	r0, r0, r3
 800caf2:	6963      	ldr	r3, [r4, #20]
 800caf4:	b2f6      	uxtb	r6, r6
 800caf6:	4283      	cmp	r3, r0
 800caf8:	4637      	mov	r7, r6
 800cafa:	dc04      	bgt.n	800cb06 <__swbuf_r+0x42>
 800cafc:	4621      	mov	r1, r4
 800cafe:	4628      	mov	r0, r5
 800cb00:	f000 f92a 	bl	800cd58 <_fflush_r>
 800cb04:	bb30      	cbnz	r0, 800cb54 <__swbuf_r+0x90>
 800cb06:	68a3      	ldr	r3, [r4, #8]
 800cb08:	3b01      	subs	r3, #1
 800cb0a:	60a3      	str	r3, [r4, #8]
 800cb0c:	6823      	ldr	r3, [r4, #0]
 800cb0e:	1c5a      	adds	r2, r3, #1
 800cb10:	6022      	str	r2, [r4, #0]
 800cb12:	701e      	strb	r6, [r3, #0]
 800cb14:	6963      	ldr	r3, [r4, #20]
 800cb16:	3001      	adds	r0, #1
 800cb18:	4283      	cmp	r3, r0
 800cb1a:	d004      	beq.n	800cb26 <__swbuf_r+0x62>
 800cb1c:	89a3      	ldrh	r3, [r4, #12]
 800cb1e:	07db      	lsls	r3, r3, #31
 800cb20:	d506      	bpl.n	800cb30 <__swbuf_r+0x6c>
 800cb22:	2e0a      	cmp	r6, #10
 800cb24:	d104      	bne.n	800cb30 <__swbuf_r+0x6c>
 800cb26:	4621      	mov	r1, r4
 800cb28:	4628      	mov	r0, r5
 800cb2a:	f000 f915 	bl	800cd58 <_fflush_r>
 800cb2e:	b988      	cbnz	r0, 800cb54 <__swbuf_r+0x90>
 800cb30:	4638      	mov	r0, r7
 800cb32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb34:	4b0a      	ldr	r3, [pc, #40]	; (800cb60 <__swbuf_r+0x9c>)
 800cb36:	429c      	cmp	r4, r3
 800cb38:	d101      	bne.n	800cb3e <__swbuf_r+0x7a>
 800cb3a:	68ac      	ldr	r4, [r5, #8]
 800cb3c:	e7cf      	b.n	800cade <__swbuf_r+0x1a>
 800cb3e:	4b09      	ldr	r3, [pc, #36]	; (800cb64 <__swbuf_r+0xa0>)
 800cb40:	429c      	cmp	r4, r3
 800cb42:	bf08      	it	eq
 800cb44:	68ec      	ldreq	r4, [r5, #12]
 800cb46:	e7ca      	b.n	800cade <__swbuf_r+0x1a>
 800cb48:	4621      	mov	r1, r4
 800cb4a:	4628      	mov	r0, r5
 800cb4c:	f000 f80c 	bl	800cb68 <__swsetup_r>
 800cb50:	2800      	cmp	r0, #0
 800cb52:	d0cb      	beq.n	800caec <__swbuf_r+0x28>
 800cb54:	f04f 37ff 	mov.w	r7, #4294967295
 800cb58:	e7ea      	b.n	800cb30 <__swbuf_r+0x6c>
 800cb5a:	bf00      	nop
 800cb5c:	0800dacc 	.word	0x0800dacc
 800cb60:	0800daec 	.word	0x0800daec
 800cb64:	0800daac 	.word	0x0800daac

0800cb68 <__swsetup_r>:
 800cb68:	4b32      	ldr	r3, [pc, #200]	; (800cc34 <__swsetup_r+0xcc>)
 800cb6a:	b570      	push	{r4, r5, r6, lr}
 800cb6c:	681d      	ldr	r5, [r3, #0]
 800cb6e:	4606      	mov	r6, r0
 800cb70:	460c      	mov	r4, r1
 800cb72:	b125      	cbz	r5, 800cb7e <__swsetup_r+0x16>
 800cb74:	69ab      	ldr	r3, [r5, #24]
 800cb76:	b913      	cbnz	r3, 800cb7e <__swsetup_r+0x16>
 800cb78:	4628      	mov	r0, r5
 800cb7a:	f000 f981 	bl	800ce80 <__sinit>
 800cb7e:	4b2e      	ldr	r3, [pc, #184]	; (800cc38 <__swsetup_r+0xd0>)
 800cb80:	429c      	cmp	r4, r3
 800cb82:	d10f      	bne.n	800cba4 <__swsetup_r+0x3c>
 800cb84:	686c      	ldr	r4, [r5, #4]
 800cb86:	89a3      	ldrh	r3, [r4, #12]
 800cb88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cb8c:	0719      	lsls	r1, r3, #28
 800cb8e:	d42c      	bmi.n	800cbea <__swsetup_r+0x82>
 800cb90:	06dd      	lsls	r5, r3, #27
 800cb92:	d411      	bmi.n	800cbb8 <__swsetup_r+0x50>
 800cb94:	2309      	movs	r3, #9
 800cb96:	6033      	str	r3, [r6, #0]
 800cb98:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cb9c:	81a3      	strh	r3, [r4, #12]
 800cb9e:	f04f 30ff 	mov.w	r0, #4294967295
 800cba2:	e03e      	b.n	800cc22 <__swsetup_r+0xba>
 800cba4:	4b25      	ldr	r3, [pc, #148]	; (800cc3c <__swsetup_r+0xd4>)
 800cba6:	429c      	cmp	r4, r3
 800cba8:	d101      	bne.n	800cbae <__swsetup_r+0x46>
 800cbaa:	68ac      	ldr	r4, [r5, #8]
 800cbac:	e7eb      	b.n	800cb86 <__swsetup_r+0x1e>
 800cbae:	4b24      	ldr	r3, [pc, #144]	; (800cc40 <__swsetup_r+0xd8>)
 800cbb0:	429c      	cmp	r4, r3
 800cbb2:	bf08      	it	eq
 800cbb4:	68ec      	ldreq	r4, [r5, #12]
 800cbb6:	e7e6      	b.n	800cb86 <__swsetup_r+0x1e>
 800cbb8:	0758      	lsls	r0, r3, #29
 800cbba:	d512      	bpl.n	800cbe2 <__swsetup_r+0x7a>
 800cbbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cbbe:	b141      	cbz	r1, 800cbd2 <__swsetup_r+0x6a>
 800cbc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cbc4:	4299      	cmp	r1, r3
 800cbc6:	d002      	beq.n	800cbce <__swsetup_r+0x66>
 800cbc8:	4630      	mov	r0, r6
 800cbca:	f7fb ff53 	bl	8008a74 <_free_r>
 800cbce:	2300      	movs	r3, #0
 800cbd0:	6363      	str	r3, [r4, #52]	; 0x34
 800cbd2:	89a3      	ldrh	r3, [r4, #12]
 800cbd4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cbd8:	81a3      	strh	r3, [r4, #12]
 800cbda:	2300      	movs	r3, #0
 800cbdc:	6063      	str	r3, [r4, #4]
 800cbde:	6923      	ldr	r3, [r4, #16]
 800cbe0:	6023      	str	r3, [r4, #0]
 800cbe2:	89a3      	ldrh	r3, [r4, #12]
 800cbe4:	f043 0308 	orr.w	r3, r3, #8
 800cbe8:	81a3      	strh	r3, [r4, #12]
 800cbea:	6923      	ldr	r3, [r4, #16]
 800cbec:	b94b      	cbnz	r3, 800cc02 <__swsetup_r+0x9a>
 800cbee:	89a3      	ldrh	r3, [r4, #12]
 800cbf0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cbf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbf8:	d003      	beq.n	800cc02 <__swsetup_r+0x9a>
 800cbfa:	4621      	mov	r1, r4
 800cbfc:	4630      	mov	r0, r6
 800cbfe:	f000 fa01 	bl	800d004 <__smakebuf_r>
 800cc02:	89a0      	ldrh	r0, [r4, #12]
 800cc04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cc08:	f010 0301 	ands.w	r3, r0, #1
 800cc0c:	d00a      	beq.n	800cc24 <__swsetup_r+0xbc>
 800cc0e:	2300      	movs	r3, #0
 800cc10:	60a3      	str	r3, [r4, #8]
 800cc12:	6963      	ldr	r3, [r4, #20]
 800cc14:	425b      	negs	r3, r3
 800cc16:	61a3      	str	r3, [r4, #24]
 800cc18:	6923      	ldr	r3, [r4, #16]
 800cc1a:	b943      	cbnz	r3, 800cc2e <__swsetup_r+0xc6>
 800cc1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cc20:	d1ba      	bne.n	800cb98 <__swsetup_r+0x30>
 800cc22:	bd70      	pop	{r4, r5, r6, pc}
 800cc24:	0781      	lsls	r1, r0, #30
 800cc26:	bf58      	it	pl
 800cc28:	6963      	ldrpl	r3, [r4, #20]
 800cc2a:	60a3      	str	r3, [r4, #8]
 800cc2c:	e7f4      	b.n	800cc18 <__swsetup_r+0xb0>
 800cc2e:	2000      	movs	r0, #0
 800cc30:	e7f7      	b.n	800cc22 <__swsetup_r+0xba>
 800cc32:	bf00      	nop
 800cc34:	20000010 	.word	0x20000010
 800cc38:	0800dacc 	.word	0x0800dacc
 800cc3c:	0800daec 	.word	0x0800daec
 800cc40:	0800daac 	.word	0x0800daac

0800cc44 <abort>:
 800cc44:	b508      	push	{r3, lr}
 800cc46:	2006      	movs	r0, #6
 800cc48:	f000 fa4c 	bl	800d0e4 <raise>
 800cc4c:	2001      	movs	r0, #1
 800cc4e:	f7f7 f816 	bl	8003c7e <_exit>
	...

0800cc54 <__sflush_r>:
 800cc54:	898a      	ldrh	r2, [r1, #12]
 800cc56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc58:	4605      	mov	r5, r0
 800cc5a:	0710      	lsls	r0, r2, #28
 800cc5c:	460c      	mov	r4, r1
 800cc5e:	d457      	bmi.n	800cd10 <__sflush_r+0xbc>
 800cc60:	684b      	ldr	r3, [r1, #4]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	dc04      	bgt.n	800cc70 <__sflush_r+0x1c>
 800cc66:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	dc01      	bgt.n	800cc70 <__sflush_r+0x1c>
 800cc6c:	2000      	movs	r0, #0
 800cc6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc72:	2e00      	cmp	r6, #0
 800cc74:	d0fa      	beq.n	800cc6c <__sflush_r+0x18>
 800cc76:	2300      	movs	r3, #0
 800cc78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cc7c:	682f      	ldr	r7, [r5, #0]
 800cc7e:	602b      	str	r3, [r5, #0]
 800cc80:	d032      	beq.n	800cce8 <__sflush_r+0x94>
 800cc82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cc84:	89a3      	ldrh	r3, [r4, #12]
 800cc86:	075a      	lsls	r2, r3, #29
 800cc88:	d505      	bpl.n	800cc96 <__sflush_r+0x42>
 800cc8a:	6863      	ldr	r3, [r4, #4]
 800cc8c:	1ac0      	subs	r0, r0, r3
 800cc8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cc90:	b10b      	cbz	r3, 800cc96 <__sflush_r+0x42>
 800cc92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cc94:	1ac0      	subs	r0, r0, r3
 800cc96:	2300      	movs	r3, #0
 800cc98:	4602      	mov	r2, r0
 800cc9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc9c:	6a21      	ldr	r1, [r4, #32]
 800cc9e:	4628      	mov	r0, r5
 800cca0:	47b0      	blx	r6
 800cca2:	1c43      	adds	r3, r0, #1
 800cca4:	89a3      	ldrh	r3, [r4, #12]
 800cca6:	d106      	bne.n	800ccb6 <__sflush_r+0x62>
 800cca8:	6829      	ldr	r1, [r5, #0]
 800ccaa:	291d      	cmp	r1, #29
 800ccac:	d82c      	bhi.n	800cd08 <__sflush_r+0xb4>
 800ccae:	4a29      	ldr	r2, [pc, #164]	; (800cd54 <__sflush_r+0x100>)
 800ccb0:	40ca      	lsrs	r2, r1
 800ccb2:	07d6      	lsls	r6, r2, #31
 800ccb4:	d528      	bpl.n	800cd08 <__sflush_r+0xb4>
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	6062      	str	r2, [r4, #4]
 800ccba:	04d9      	lsls	r1, r3, #19
 800ccbc:	6922      	ldr	r2, [r4, #16]
 800ccbe:	6022      	str	r2, [r4, #0]
 800ccc0:	d504      	bpl.n	800cccc <__sflush_r+0x78>
 800ccc2:	1c42      	adds	r2, r0, #1
 800ccc4:	d101      	bne.n	800ccca <__sflush_r+0x76>
 800ccc6:	682b      	ldr	r3, [r5, #0]
 800ccc8:	b903      	cbnz	r3, 800cccc <__sflush_r+0x78>
 800ccca:	6560      	str	r0, [r4, #84]	; 0x54
 800cccc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ccce:	602f      	str	r7, [r5, #0]
 800ccd0:	2900      	cmp	r1, #0
 800ccd2:	d0cb      	beq.n	800cc6c <__sflush_r+0x18>
 800ccd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ccd8:	4299      	cmp	r1, r3
 800ccda:	d002      	beq.n	800cce2 <__sflush_r+0x8e>
 800ccdc:	4628      	mov	r0, r5
 800ccde:	f7fb fec9 	bl	8008a74 <_free_r>
 800cce2:	2000      	movs	r0, #0
 800cce4:	6360      	str	r0, [r4, #52]	; 0x34
 800cce6:	e7c2      	b.n	800cc6e <__sflush_r+0x1a>
 800cce8:	6a21      	ldr	r1, [r4, #32]
 800ccea:	2301      	movs	r3, #1
 800ccec:	4628      	mov	r0, r5
 800ccee:	47b0      	blx	r6
 800ccf0:	1c41      	adds	r1, r0, #1
 800ccf2:	d1c7      	bne.n	800cc84 <__sflush_r+0x30>
 800ccf4:	682b      	ldr	r3, [r5, #0]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d0c4      	beq.n	800cc84 <__sflush_r+0x30>
 800ccfa:	2b1d      	cmp	r3, #29
 800ccfc:	d001      	beq.n	800cd02 <__sflush_r+0xae>
 800ccfe:	2b16      	cmp	r3, #22
 800cd00:	d101      	bne.n	800cd06 <__sflush_r+0xb2>
 800cd02:	602f      	str	r7, [r5, #0]
 800cd04:	e7b2      	b.n	800cc6c <__sflush_r+0x18>
 800cd06:	89a3      	ldrh	r3, [r4, #12]
 800cd08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd0c:	81a3      	strh	r3, [r4, #12]
 800cd0e:	e7ae      	b.n	800cc6e <__sflush_r+0x1a>
 800cd10:	690f      	ldr	r7, [r1, #16]
 800cd12:	2f00      	cmp	r7, #0
 800cd14:	d0aa      	beq.n	800cc6c <__sflush_r+0x18>
 800cd16:	0793      	lsls	r3, r2, #30
 800cd18:	680e      	ldr	r6, [r1, #0]
 800cd1a:	bf08      	it	eq
 800cd1c:	694b      	ldreq	r3, [r1, #20]
 800cd1e:	600f      	str	r7, [r1, #0]
 800cd20:	bf18      	it	ne
 800cd22:	2300      	movne	r3, #0
 800cd24:	1bf6      	subs	r6, r6, r7
 800cd26:	608b      	str	r3, [r1, #8]
 800cd28:	2e00      	cmp	r6, #0
 800cd2a:	dd9f      	ble.n	800cc6c <__sflush_r+0x18>
 800cd2c:	6a21      	ldr	r1, [r4, #32]
 800cd2e:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800cd32:	4633      	mov	r3, r6
 800cd34:	463a      	mov	r2, r7
 800cd36:	4628      	mov	r0, r5
 800cd38:	47e0      	blx	ip
 800cd3a:	2800      	cmp	r0, #0
 800cd3c:	dc06      	bgt.n	800cd4c <__sflush_r+0xf8>
 800cd3e:	89a3      	ldrh	r3, [r4, #12]
 800cd40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd44:	81a3      	strh	r3, [r4, #12]
 800cd46:	f04f 30ff 	mov.w	r0, #4294967295
 800cd4a:	e790      	b.n	800cc6e <__sflush_r+0x1a>
 800cd4c:	4407      	add	r7, r0
 800cd4e:	1a36      	subs	r6, r6, r0
 800cd50:	e7ea      	b.n	800cd28 <__sflush_r+0xd4>
 800cd52:	bf00      	nop
 800cd54:	20400001 	.word	0x20400001

0800cd58 <_fflush_r>:
 800cd58:	b538      	push	{r3, r4, r5, lr}
 800cd5a:	690b      	ldr	r3, [r1, #16]
 800cd5c:	4605      	mov	r5, r0
 800cd5e:	460c      	mov	r4, r1
 800cd60:	b913      	cbnz	r3, 800cd68 <_fflush_r+0x10>
 800cd62:	2500      	movs	r5, #0
 800cd64:	4628      	mov	r0, r5
 800cd66:	bd38      	pop	{r3, r4, r5, pc}
 800cd68:	b118      	cbz	r0, 800cd72 <_fflush_r+0x1a>
 800cd6a:	6983      	ldr	r3, [r0, #24]
 800cd6c:	b90b      	cbnz	r3, 800cd72 <_fflush_r+0x1a>
 800cd6e:	f000 f887 	bl	800ce80 <__sinit>
 800cd72:	4b14      	ldr	r3, [pc, #80]	; (800cdc4 <_fflush_r+0x6c>)
 800cd74:	429c      	cmp	r4, r3
 800cd76:	d11b      	bne.n	800cdb0 <_fflush_r+0x58>
 800cd78:	686c      	ldr	r4, [r5, #4]
 800cd7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d0ef      	beq.n	800cd62 <_fflush_r+0xa>
 800cd82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cd84:	07d0      	lsls	r0, r2, #31
 800cd86:	d404      	bmi.n	800cd92 <_fflush_r+0x3a>
 800cd88:	0599      	lsls	r1, r3, #22
 800cd8a:	d402      	bmi.n	800cd92 <_fflush_r+0x3a>
 800cd8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd8e:	f7ff fcf6 	bl	800c77e <__retarget_lock_acquire_recursive>
 800cd92:	4628      	mov	r0, r5
 800cd94:	4621      	mov	r1, r4
 800cd96:	f7ff ff5d 	bl	800cc54 <__sflush_r>
 800cd9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd9c:	07da      	lsls	r2, r3, #31
 800cd9e:	4605      	mov	r5, r0
 800cda0:	d4e0      	bmi.n	800cd64 <_fflush_r+0xc>
 800cda2:	89a3      	ldrh	r3, [r4, #12]
 800cda4:	059b      	lsls	r3, r3, #22
 800cda6:	d4dd      	bmi.n	800cd64 <_fflush_r+0xc>
 800cda8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cdaa:	f7ff fce9 	bl	800c780 <__retarget_lock_release_recursive>
 800cdae:	e7d9      	b.n	800cd64 <_fflush_r+0xc>
 800cdb0:	4b05      	ldr	r3, [pc, #20]	; (800cdc8 <_fflush_r+0x70>)
 800cdb2:	429c      	cmp	r4, r3
 800cdb4:	d101      	bne.n	800cdba <_fflush_r+0x62>
 800cdb6:	68ac      	ldr	r4, [r5, #8]
 800cdb8:	e7df      	b.n	800cd7a <_fflush_r+0x22>
 800cdba:	4b04      	ldr	r3, [pc, #16]	; (800cdcc <_fflush_r+0x74>)
 800cdbc:	429c      	cmp	r4, r3
 800cdbe:	bf08      	it	eq
 800cdc0:	68ec      	ldreq	r4, [r5, #12]
 800cdc2:	e7da      	b.n	800cd7a <_fflush_r+0x22>
 800cdc4:	0800dacc 	.word	0x0800dacc
 800cdc8:	0800daec 	.word	0x0800daec
 800cdcc:	0800daac 	.word	0x0800daac

0800cdd0 <std>:
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	b510      	push	{r4, lr}
 800cdd4:	4604      	mov	r4, r0
 800cdd6:	e9c0 3300 	strd	r3, r3, [r0]
 800cdda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cdde:	6083      	str	r3, [r0, #8]
 800cde0:	8181      	strh	r1, [r0, #12]
 800cde2:	6643      	str	r3, [r0, #100]	; 0x64
 800cde4:	81c2      	strh	r2, [r0, #14]
 800cde6:	6183      	str	r3, [r0, #24]
 800cde8:	4619      	mov	r1, r3
 800cdea:	2208      	movs	r2, #8
 800cdec:	305c      	adds	r0, #92	; 0x5c
 800cdee:	f7fb fe39 	bl	8008a64 <memset>
 800cdf2:	4b05      	ldr	r3, [pc, #20]	; (800ce08 <std+0x38>)
 800cdf4:	6263      	str	r3, [r4, #36]	; 0x24
 800cdf6:	4b05      	ldr	r3, [pc, #20]	; (800ce0c <std+0x3c>)
 800cdf8:	62a3      	str	r3, [r4, #40]	; 0x28
 800cdfa:	4b05      	ldr	r3, [pc, #20]	; (800ce10 <std+0x40>)
 800cdfc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cdfe:	4b05      	ldr	r3, [pc, #20]	; (800ce14 <std+0x44>)
 800ce00:	6224      	str	r4, [r4, #32]
 800ce02:	6323      	str	r3, [r4, #48]	; 0x30
 800ce04:	bd10      	pop	{r4, pc}
 800ce06:	bf00      	nop
 800ce08:	0800d11d 	.word	0x0800d11d
 800ce0c:	0800d13f 	.word	0x0800d13f
 800ce10:	0800d177 	.word	0x0800d177
 800ce14:	0800d19b 	.word	0x0800d19b

0800ce18 <_cleanup_r>:
 800ce18:	4901      	ldr	r1, [pc, #4]	; (800ce20 <_cleanup_r+0x8>)
 800ce1a:	f000 b8af 	b.w	800cf7c <_fwalk_reent>
 800ce1e:	bf00      	nop
 800ce20:	0800cd59 	.word	0x0800cd59

0800ce24 <__sfmoreglue>:
 800ce24:	b570      	push	{r4, r5, r6, lr}
 800ce26:	2268      	movs	r2, #104	; 0x68
 800ce28:	1e4d      	subs	r5, r1, #1
 800ce2a:	4355      	muls	r5, r2
 800ce2c:	460e      	mov	r6, r1
 800ce2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ce32:	f7fb fe89 	bl	8008b48 <_malloc_r>
 800ce36:	4604      	mov	r4, r0
 800ce38:	b140      	cbz	r0, 800ce4c <__sfmoreglue+0x28>
 800ce3a:	2100      	movs	r1, #0
 800ce3c:	e9c0 1600 	strd	r1, r6, [r0]
 800ce40:	300c      	adds	r0, #12
 800ce42:	60a0      	str	r0, [r4, #8]
 800ce44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ce48:	f7fb fe0c 	bl	8008a64 <memset>
 800ce4c:	4620      	mov	r0, r4
 800ce4e:	bd70      	pop	{r4, r5, r6, pc}

0800ce50 <__sfp_lock_acquire>:
 800ce50:	4801      	ldr	r0, [pc, #4]	; (800ce58 <__sfp_lock_acquire+0x8>)
 800ce52:	f7ff bc94 	b.w	800c77e <__retarget_lock_acquire_recursive>
 800ce56:	bf00      	nop
 800ce58:	200005f1 	.word	0x200005f1

0800ce5c <__sfp_lock_release>:
 800ce5c:	4801      	ldr	r0, [pc, #4]	; (800ce64 <__sfp_lock_release+0x8>)
 800ce5e:	f7ff bc8f 	b.w	800c780 <__retarget_lock_release_recursive>
 800ce62:	bf00      	nop
 800ce64:	200005f1 	.word	0x200005f1

0800ce68 <__sinit_lock_acquire>:
 800ce68:	4801      	ldr	r0, [pc, #4]	; (800ce70 <__sinit_lock_acquire+0x8>)
 800ce6a:	f7ff bc88 	b.w	800c77e <__retarget_lock_acquire_recursive>
 800ce6e:	bf00      	nop
 800ce70:	200005f2 	.word	0x200005f2

0800ce74 <__sinit_lock_release>:
 800ce74:	4801      	ldr	r0, [pc, #4]	; (800ce7c <__sinit_lock_release+0x8>)
 800ce76:	f7ff bc83 	b.w	800c780 <__retarget_lock_release_recursive>
 800ce7a:	bf00      	nop
 800ce7c:	200005f2 	.word	0x200005f2

0800ce80 <__sinit>:
 800ce80:	b510      	push	{r4, lr}
 800ce82:	4604      	mov	r4, r0
 800ce84:	f7ff fff0 	bl	800ce68 <__sinit_lock_acquire>
 800ce88:	69a3      	ldr	r3, [r4, #24]
 800ce8a:	b11b      	cbz	r3, 800ce94 <__sinit+0x14>
 800ce8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce90:	f7ff bff0 	b.w	800ce74 <__sinit_lock_release>
 800ce94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ce98:	6523      	str	r3, [r4, #80]	; 0x50
 800ce9a:	4b13      	ldr	r3, [pc, #76]	; (800cee8 <__sinit+0x68>)
 800ce9c:	4a13      	ldr	r2, [pc, #76]	; (800ceec <__sinit+0x6c>)
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	62a2      	str	r2, [r4, #40]	; 0x28
 800cea2:	42a3      	cmp	r3, r4
 800cea4:	bf04      	itt	eq
 800cea6:	2301      	moveq	r3, #1
 800cea8:	61a3      	streq	r3, [r4, #24]
 800ceaa:	4620      	mov	r0, r4
 800ceac:	f000 f820 	bl	800cef0 <__sfp>
 800ceb0:	6060      	str	r0, [r4, #4]
 800ceb2:	4620      	mov	r0, r4
 800ceb4:	f000 f81c 	bl	800cef0 <__sfp>
 800ceb8:	60a0      	str	r0, [r4, #8]
 800ceba:	4620      	mov	r0, r4
 800cebc:	f000 f818 	bl	800cef0 <__sfp>
 800cec0:	2200      	movs	r2, #0
 800cec2:	60e0      	str	r0, [r4, #12]
 800cec4:	2104      	movs	r1, #4
 800cec6:	6860      	ldr	r0, [r4, #4]
 800cec8:	f7ff ff82 	bl	800cdd0 <std>
 800cecc:	68a0      	ldr	r0, [r4, #8]
 800cece:	2201      	movs	r2, #1
 800ced0:	2109      	movs	r1, #9
 800ced2:	f7ff ff7d 	bl	800cdd0 <std>
 800ced6:	68e0      	ldr	r0, [r4, #12]
 800ced8:	2202      	movs	r2, #2
 800ceda:	2112      	movs	r1, #18
 800cedc:	f7ff ff78 	bl	800cdd0 <std>
 800cee0:	2301      	movs	r3, #1
 800cee2:	61a3      	str	r3, [r4, #24]
 800cee4:	e7d2      	b.n	800ce8c <__sinit+0xc>
 800cee6:	bf00      	nop
 800cee8:	0800d668 	.word	0x0800d668
 800ceec:	0800ce19 	.word	0x0800ce19

0800cef0 <__sfp>:
 800cef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cef2:	4607      	mov	r7, r0
 800cef4:	f7ff ffac 	bl	800ce50 <__sfp_lock_acquire>
 800cef8:	4b1e      	ldr	r3, [pc, #120]	; (800cf74 <__sfp+0x84>)
 800cefa:	681e      	ldr	r6, [r3, #0]
 800cefc:	69b3      	ldr	r3, [r6, #24]
 800cefe:	b913      	cbnz	r3, 800cf06 <__sfp+0x16>
 800cf00:	4630      	mov	r0, r6
 800cf02:	f7ff ffbd 	bl	800ce80 <__sinit>
 800cf06:	3648      	adds	r6, #72	; 0x48
 800cf08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cf0c:	3b01      	subs	r3, #1
 800cf0e:	d503      	bpl.n	800cf18 <__sfp+0x28>
 800cf10:	6833      	ldr	r3, [r6, #0]
 800cf12:	b30b      	cbz	r3, 800cf58 <__sfp+0x68>
 800cf14:	6836      	ldr	r6, [r6, #0]
 800cf16:	e7f7      	b.n	800cf08 <__sfp+0x18>
 800cf18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cf1c:	b9d5      	cbnz	r5, 800cf54 <__sfp+0x64>
 800cf1e:	4b16      	ldr	r3, [pc, #88]	; (800cf78 <__sfp+0x88>)
 800cf20:	60e3      	str	r3, [r4, #12]
 800cf22:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cf26:	6665      	str	r5, [r4, #100]	; 0x64
 800cf28:	f7ff fc28 	bl	800c77c <__retarget_lock_init_recursive>
 800cf2c:	f7ff ff96 	bl	800ce5c <__sfp_lock_release>
 800cf30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cf34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cf38:	6025      	str	r5, [r4, #0]
 800cf3a:	61a5      	str	r5, [r4, #24]
 800cf3c:	2208      	movs	r2, #8
 800cf3e:	4629      	mov	r1, r5
 800cf40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cf44:	f7fb fd8e 	bl	8008a64 <memset>
 800cf48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cf4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cf50:	4620      	mov	r0, r4
 800cf52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf54:	3468      	adds	r4, #104	; 0x68
 800cf56:	e7d9      	b.n	800cf0c <__sfp+0x1c>
 800cf58:	2104      	movs	r1, #4
 800cf5a:	4638      	mov	r0, r7
 800cf5c:	f7ff ff62 	bl	800ce24 <__sfmoreglue>
 800cf60:	4604      	mov	r4, r0
 800cf62:	6030      	str	r0, [r6, #0]
 800cf64:	2800      	cmp	r0, #0
 800cf66:	d1d5      	bne.n	800cf14 <__sfp+0x24>
 800cf68:	f7ff ff78 	bl	800ce5c <__sfp_lock_release>
 800cf6c:	230c      	movs	r3, #12
 800cf6e:	603b      	str	r3, [r7, #0]
 800cf70:	e7ee      	b.n	800cf50 <__sfp+0x60>
 800cf72:	bf00      	nop
 800cf74:	0800d668 	.word	0x0800d668
 800cf78:	ffff0001 	.word	0xffff0001

0800cf7c <_fwalk_reent>:
 800cf7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf80:	4606      	mov	r6, r0
 800cf82:	4688      	mov	r8, r1
 800cf84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cf88:	2700      	movs	r7, #0
 800cf8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cf8e:	f1b9 0901 	subs.w	r9, r9, #1
 800cf92:	d505      	bpl.n	800cfa0 <_fwalk_reent+0x24>
 800cf94:	6824      	ldr	r4, [r4, #0]
 800cf96:	2c00      	cmp	r4, #0
 800cf98:	d1f7      	bne.n	800cf8a <_fwalk_reent+0xe>
 800cf9a:	4638      	mov	r0, r7
 800cf9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfa0:	89ab      	ldrh	r3, [r5, #12]
 800cfa2:	2b01      	cmp	r3, #1
 800cfa4:	d907      	bls.n	800cfb6 <_fwalk_reent+0x3a>
 800cfa6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cfaa:	3301      	adds	r3, #1
 800cfac:	d003      	beq.n	800cfb6 <_fwalk_reent+0x3a>
 800cfae:	4629      	mov	r1, r5
 800cfb0:	4630      	mov	r0, r6
 800cfb2:	47c0      	blx	r8
 800cfb4:	4307      	orrs	r7, r0
 800cfb6:	3568      	adds	r5, #104	; 0x68
 800cfb8:	e7e9      	b.n	800cf8e <_fwalk_reent+0x12>

0800cfba <__swhatbuf_r>:
 800cfba:	b570      	push	{r4, r5, r6, lr}
 800cfbc:	460e      	mov	r6, r1
 800cfbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfc2:	2900      	cmp	r1, #0
 800cfc4:	b096      	sub	sp, #88	; 0x58
 800cfc6:	4614      	mov	r4, r2
 800cfc8:	461d      	mov	r5, r3
 800cfca:	da08      	bge.n	800cfde <__swhatbuf_r+0x24>
 800cfcc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	602a      	str	r2, [r5, #0]
 800cfd4:	061a      	lsls	r2, r3, #24
 800cfd6:	d410      	bmi.n	800cffa <__swhatbuf_r+0x40>
 800cfd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cfdc:	e00e      	b.n	800cffc <__swhatbuf_r+0x42>
 800cfde:	466a      	mov	r2, sp
 800cfe0:	f000 f902 	bl	800d1e8 <_fstat_r>
 800cfe4:	2800      	cmp	r0, #0
 800cfe6:	dbf1      	blt.n	800cfcc <__swhatbuf_r+0x12>
 800cfe8:	9a01      	ldr	r2, [sp, #4]
 800cfea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cfee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cff2:	425a      	negs	r2, r3
 800cff4:	415a      	adcs	r2, r3
 800cff6:	602a      	str	r2, [r5, #0]
 800cff8:	e7ee      	b.n	800cfd8 <__swhatbuf_r+0x1e>
 800cffa:	2340      	movs	r3, #64	; 0x40
 800cffc:	2000      	movs	r0, #0
 800cffe:	6023      	str	r3, [r4, #0]
 800d000:	b016      	add	sp, #88	; 0x58
 800d002:	bd70      	pop	{r4, r5, r6, pc}

0800d004 <__smakebuf_r>:
 800d004:	898b      	ldrh	r3, [r1, #12]
 800d006:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d008:	079d      	lsls	r5, r3, #30
 800d00a:	4606      	mov	r6, r0
 800d00c:	460c      	mov	r4, r1
 800d00e:	d507      	bpl.n	800d020 <__smakebuf_r+0x1c>
 800d010:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d014:	6023      	str	r3, [r4, #0]
 800d016:	6123      	str	r3, [r4, #16]
 800d018:	2301      	movs	r3, #1
 800d01a:	6163      	str	r3, [r4, #20]
 800d01c:	b002      	add	sp, #8
 800d01e:	bd70      	pop	{r4, r5, r6, pc}
 800d020:	ab01      	add	r3, sp, #4
 800d022:	466a      	mov	r2, sp
 800d024:	f7ff ffc9 	bl	800cfba <__swhatbuf_r>
 800d028:	9900      	ldr	r1, [sp, #0]
 800d02a:	4605      	mov	r5, r0
 800d02c:	4630      	mov	r0, r6
 800d02e:	f7fb fd8b 	bl	8008b48 <_malloc_r>
 800d032:	b948      	cbnz	r0, 800d048 <__smakebuf_r+0x44>
 800d034:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d038:	059a      	lsls	r2, r3, #22
 800d03a:	d4ef      	bmi.n	800d01c <__smakebuf_r+0x18>
 800d03c:	f023 0303 	bic.w	r3, r3, #3
 800d040:	f043 0302 	orr.w	r3, r3, #2
 800d044:	81a3      	strh	r3, [r4, #12]
 800d046:	e7e3      	b.n	800d010 <__smakebuf_r+0xc>
 800d048:	4b0d      	ldr	r3, [pc, #52]	; (800d080 <__smakebuf_r+0x7c>)
 800d04a:	62b3      	str	r3, [r6, #40]	; 0x28
 800d04c:	89a3      	ldrh	r3, [r4, #12]
 800d04e:	6020      	str	r0, [r4, #0]
 800d050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d054:	81a3      	strh	r3, [r4, #12]
 800d056:	9b00      	ldr	r3, [sp, #0]
 800d058:	6163      	str	r3, [r4, #20]
 800d05a:	9b01      	ldr	r3, [sp, #4]
 800d05c:	6120      	str	r0, [r4, #16]
 800d05e:	b15b      	cbz	r3, 800d078 <__smakebuf_r+0x74>
 800d060:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d064:	4630      	mov	r0, r6
 800d066:	f000 f8d1 	bl	800d20c <_isatty_r>
 800d06a:	b128      	cbz	r0, 800d078 <__smakebuf_r+0x74>
 800d06c:	89a3      	ldrh	r3, [r4, #12]
 800d06e:	f023 0303 	bic.w	r3, r3, #3
 800d072:	f043 0301 	orr.w	r3, r3, #1
 800d076:	81a3      	strh	r3, [r4, #12]
 800d078:	89a0      	ldrh	r0, [r4, #12]
 800d07a:	4305      	orrs	r5, r0
 800d07c:	81a5      	strh	r5, [r4, #12]
 800d07e:	e7cd      	b.n	800d01c <__smakebuf_r+0x18>
 800d080:	0800ce19 	.word	0x0800ce19

0800d084 <_malloc_usable_size_r>:
 800d084:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d088:	1f18      	subs	r0, r3, #4
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	bfbc      	itt	lt
 800d08e:	580b      	ldrlt	r3, [r1, r0]
 800d090:	18c0      	addlt	r0, r0, r3
 800d092:	4770      	bx	lr

0800d094 <_raise_r>:
 800d094:	291f      	cmp	r1, #31
 800d096:	b538      	push	{r3, r4, r5, lr}
 800d098:	4604      	mov	r4, r0
 800d09a:	460d      	mov	r5, r1
 800d09c:	d904      	bls.n	800d0a8 <_raise_r+0x14>
 800d09e:	2316      	movs	r3, #22
 800d0a0:	6003      	str	r3, [r0, #0]
 800d0a2:	f04f 30ff 	mov.w	r0, #4294967295
 800d0a6:	bd38      	pop	{r3, r4, r5, pc}
 800d0a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d0aa:	b112      	cbz	r2, 800d0b2 <_raise_r+0x1e>
 800d0ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d0b0:	b94b      	cbnz	r3, 800d0c6 <_raise_r+0x32>
 800d0b2:	4620      	mov	r0, r4
 800d0b4:	f000 f830 	bl	800d118 <_getpid_r>
 800d0b8:	462a      	mov	r2, r5
 800d0ba:	4601      	mov	r1, r0
 800d0bc:	4620      	mov	r0, r4
 800d0be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d0c2:	f000 b817 	b.w	800d0f4 <_kill_r>
 800d0c6:	2b01      	cmp	r3, #1
 800d0c8:	d00a      	beq.n	800d0e0 <_raise_r+0x4c>
 800d0ca:	1c59      	adds	r1, r3, #1
 800d0cc:	d103      	bne.n	800d0d6 <_raise_r+0x42>
 800d0ce:	2316      	movs	r3, #22
 800d0d0:	6003      	str	r3, [r0, #0]
 800d0d2:	2001      	movs	r0, #1
 800d0d4:	e7e7      	b.n	800d0a6 <_raise_r+0x12>
 800d0d6:	2400      	movs	r4, #0
 800d0d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d0dc:	4628      	mov	r0, r5
 800d0de:	4798      	blx	r3
 800d0e0:	2000      	movs	r0, #0
 800d0e2:	e7e0      	b.n	800d0a6 <_raise_r+0x12>

0800d0e4 <raise>:
 800d0e4:	4b02      	ldr	r3, [pc, #8]	; (800d0f0 <raise+0xc>)
 800d0e6:	4601      	mov	r1, r0
 800d0e8:	6818      	ldr	r0, [r3, #0]
 800d0ea:	f7ff bfd3 	b.w	800d094 <_raise_r>
 800d0ee:	bf00      	nop
 800d0f0:	20000010 	.word	0x20000010

0800d0f4 <_kill_r>:
 800d0f4:	b538      	push	{r3, r4, r5, lr}
 800d0f6:	4d07      	ldr	r5, [pc, #28]	; (800d114 <_kill_r+0x20>)
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	4604      	mov	r4, r0
 800d0fc:	4608      	mov	r0, r1
 800d0fe:	4611      	mov	r1, r2
 800d100:	602b      	str	r3, [r5, #0]
 800d102:	f7f6 fdac 	bl	8003c5e <_kill>
 800d106:	1c43      	adds	r3, r0, #1
 800d108:	d102      	bne.n	800d110 <_kill_r+0x1c>
 800d10a:	682b      	ldr	r3, [r5, #0]
 800d10c:	b103      	cbz	r3, 800d110 <_kill_r+0x1c>
 800d10e:	6023      	str	r3, [r4, #0]
 800d110:	bd38      	pop	{r3, r4, r5, pc}
 800d112:	bf00      	nop
 800d114:	200005ec 	.word	0x200005ec

0800d118 <_getpid_r>:
 800d118:	f7f6 bd9a 	b.w	8003c50 <_getpid>

0800d11c <__sread>:
 800d11c:	b510      	push	{r4, lr}
 800d11e:	460c      	mov	r4, r1
 800d120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d124:	f000 f894 	bl	800d250 <_read_r>
 800d128:	2800      	cmp	r0, #0
 800d12a:	bfab      	itete	ge
 800d12c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d12e:	89a3      	ldrhlt	r3, [r4, #12]
 800d130:	181b      	addge	r3, r3, r0
 800d132:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d136:	bfac      	ite	ge
 800d138:	6563      	strge	r3, [r4, #84]	; 0x54
 800d13a:	81a3      	strhlt	r3, [r4, #12]
 800d13c:	bd10      	pop	{r4, pc}

0800d13e <__swrite>:
 800d13e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d142:	461f      	mov	r7, r3
 800d144:	898b      	ldrh	r3, [r1, #12]
 800d146:	05db      	lsls	r3, r3, #23
 800d148:	4605      	mov	r5, r0
 800d14a:	460c      	mov	r4, r1
 800d14c:	4616      	mov	r6, r2
 800d14e:	d505      	bpl.n	800d15c <__swrite+0x1e>
 800d150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d154:	2302      	movs	r3, #2
 800d156:	2200      	movs	r2, #0
 800d158:	f000 f868 	bl	800d22c <_lseek_r>
 800d15c:	89a3      	ldrh	r3, [r4, #12]
 800d15e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d162:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d166:	81a3      	strh	r3, [r4, #12]
 800d168:	4632      	mov	r2, r6
 800d16a:	463b      	mov	r3, r7
 800d16c:	4628      	mov	r0, r5
 800d16e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d172:	f000 b817 	b.w	800d1a4 <_write_r>

0800d176 <__sseek>:
 800d176:	b510      	push	{r4, lr}
 800d178:	460c      	mov	r4, r1
 800d17a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d17e:	f000 f855 	bl	800d22c <_lseek_r>
 800d182:	1c43      	adds	r3, r0, #1
 800d184:	89a3      	ldrh	r3, [r4, #12]
 800d186:	bf15      	itete	ne
 800d188:	6560      	strne	r0, [r4, #84]	; 0x54
 800d18a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d18e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d192:	81a3      	strheq	r3, [r4, #12]
 800d194:	bf18      	it	ne
 800d196:	81a3      	strhne	r3, [r4, #12]
 800d198:	bd10      	pop	{r4, pc}

0800d19a <__sclose>:
 800d19a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d19e:	f000 b813 	b.w	800d1c8 <_close_r>
	...

0800d1a4 <_write_r>:
 800d1a4:	b538      	push	{r3, r4, r5, lr}
 800d1a6:	4d07      	ldr	r5, [pc, #28]	; (800d1c4 <_write_r+0x20>)
 800d1a8:	4604      	mov	r4, r0
 800d1aa:	4608      	mov	r0, r1
 800d1ac:	4611      	mov	r1, r2
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	602a      	str	r2, [r5, #0]
 800d1b2:	461a      	mov	r2, r3
 800d1b4:	f7f6 fd8a 	bl	8003ccc <_write>
 800d1b8:	1c43      	adds	r3, r0, #1
 800d1ba:	d102      	bne.n	800d1c2 <_write_r+0x1e>
 800d1bc:	682b      	ldr	r3, [r5, #0]
 800d1be:	b103      	cbz	r3, 800d1c2 <_write_r+0x1e>
 800d1c0:	6023      	str	r3, [r4, #0]
 800d1c2:	bd38      	pop	{r3, r4, r5, pc}
 800d1c4:	200005ec 	.word	0x200005ec

0800d1c8 <_close_r>:
 800d1c8:	b538      	push	{r3, r4, r5, lr}
 800d1ca:	4d06      	ldr	r5, [pc, #24]	; (800d1e4 <_close_r+0x1c>)
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	4604      	mov	r4, r0
 800d1d0:	4608      	mov	r0, r1
 800d1d2:	602b      	str	r3, [r5, #0]
 800d1d4:	f7f6 fd96 	bl	8003d04 <_close>
 800d1d8:	1c43      	adds	r3, r0, #1
 800d1da:	d102      	bne.n	800d1e2 <_close_r+0x1a>
 800d1dc:	682b      	ldr	r3, [r5, #0]
 800d1de:	b103      	cbz	r3, 800d1e2 <_close_r+0x1a>
 800d1e0:	6023      	str	r3, [r4, #0]
 800d1e2:	bd38      	pop	{r3, r4, r5, pc}
 800d1e4:	200005ec 	.word	0x200005ec

0800d1e8 <_fstat_r>:
 800d1e8:	b538      	push	{r3, r4, r5, lr}
 800d1ea:	4d07      	ldr	r5, [pc, #28]	; (800d208 <_fstat_r+0x20>)
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	4604      	mov	r4, r0
 800d1f0:	4608      	mov	r0, r1
 800d1f2:	4611      	mov	r1, r2
 800d1f4:	602b      	str	r3, [r5, #0]
 800d1f6:	f7f6 fd90 	bl	8003d1a <_fstat>
 800d1fa:	1c43      	adds	r3, r0, #1
 800d1fc:	d102      	bne.n	800d204 <_fstat_r+0x1c>
 800d1fe:	682b      	ldr	r3, [r5, #0]
 800d200:	b103      	cbz	r3, 800d204 <_fstat_r+0x1c>
 800d202:	6023      	str	r3, [r4, #0]
 800d204:	bd38      	pop	{r3, r4, r5, pc}
 800d206:	bf00      	nop
 800d208:	200005ec 	.word	0x200005ec

0800d20c <_isatty_r>:
 800d20c:	b538      	push	{r3, r4, r5, lr}
 800d20e:	4d06      	ldr	r5, [pc, #24]	; (800d228 <_isatty_r+0x1c>)
 800d210:	2300      	movs	r3, #0
 800d212:	4604      	mov	r4, r0
 800d214:	4608      	mov	r0, r1
 800d216:	602b      	str	r3, [r5, #0]
 800d218:	f7f6 fd8e 	bl	8003d38 <_isatty>
 800d21c:	1c43      	adds	r3, r0, #1
 800d21e:	d102      	bne.n	800d226 <_isatty_r+0x1a>
 800d220:	682b      	ldr	r3, [r5, #0]
 800d222:	b103      	cbz	r3, 800d226 <_isatty_r+0x1a>
 800d224:	6023      	str	r3, [r4, #0]
 800d226:	bd38      	pop	{r3, r4, r5, pc}
 800d228:	200005ec 	.word	0x200005ec

0800d22c <_lseek_r>:
 800d22c:	b538      	push	{r3, r4, r5, lr}
 800d22e:	4d07      	ldr	r5, [pc, #28]	; (800d24c <_lseek_r+0x20>)
 800d230:	4604      	mov	r4, r0
 800d232:	4608      	mov	r0, r1
 800d234:	4611      	mov	r1, r2
 800d236:	2200      	movs	r2, #0
 800d238:	602a      	str	r2, [r5, #0]
 800d23a:	461a      	mov	r2, r3
 800d23c:	f7f6 fd86 	bl	8003d4c <_lseek>
 800d240:	1c43      	adds	r3, r0, #1
 800d242:	d102      	bne.n	800d24a <_lseek_r+0x1e>
 800d244:	682b      	ldr	r3, [r5, #0]
 800d246:	b103      	cbz	r3, 800d24a <_lseek_r+0x1e>
 800d248:	6023      	str	r3, [r4, #0]
 800d24a:	bd38      	pop	{r3, r4, r5, pc}
 800d24c:	200005ec 	.word	0x200005ec

0800d250 <_read_r>:
 800d250:	b538      	push	{r3, r4, r5, lr}
 800d252:	4d07      	ldr	r5, [pc, #28]	; (800d270 <_read_r+0x20>)
 800d254:	4604      	mov	r4, r0
 800d256:	4608      	mov	r0, r1
 800d258:	4611      	mov	r1, r2
 800d25a:	2200      	movs	r2, #0
 800d25c:	602a      	str	r2, [r5, #0]
 800d25e:	461a      	mov	r2, r3
 800d260:	f7f6 fd17 	bl	8003c92 <_read>
 800d264:	1c43      	adds	r3, r0, #1
 800d266:	d102      	bne.n	800d26e <_read_r+0x1e>
 800d268:	682b      	ldr	r3, [r5, #0]
 800d26a:	b103      	cbz	r3, 800d26e <_read_r+0x1e>
 800d26c:	6023      	str	r3, [r4, #0]
 800d26e:	bd38      	pop	{r3, r4, r5, pc}
 800d270:	200005ec 	.word	0x200005ec

0800d274 <_init>:
 800d274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d276:	bf00      	nop
 800d278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d27a:	bc08      	pop	{r3}
 800d27c:	469e      	mov	lr, r3
 800d27e:	4770      	bx	lr

0800d280 <_fini>:
 800d280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d282:	bf00      	nop
 800d284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d286:	bc08      	pop	{r3}
 800d288:	469e      	mov	lr, r3
 800d28a:	4770      	bx	lr
