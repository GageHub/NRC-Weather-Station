
LoRaWAN_End_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013ee8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001000  08014028  08014028  00024028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015028  08015028  0003e5c0  2**0
                  CONTENTS
  4 .ARM          00000008  08015028  08015028  00025028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015030  08015030  0003e5c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08015030  08015030  00025030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08015038  08015038  00025038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .USER_embedded_Keys 000000c0  0803e500  0803e500  0003e500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000180  20000000  08015040  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 LW_NVM_RAM    00000b18  20008000  20008000  00048000  2**2
                  ALLOC
 11 .bss          000016a0  20000180  20000180  00040180  2**2
                  ALLOC
 12 RAM1_region   00000000  20001820  20001820  0003e5c0  2**0
                  CONTENTS
 13 RAM2_region   00000000  20009000  20009000  0003e5c0  2**0
                  CONTENTS
 14 ._user_heap_stack 00000a00  20001820  20001820  00040180  2**0
                  ALLOC
 15 .ARM.attributes 0000002a  00000000  00000000  0003e5c0  2**0
                  CONTENTS, READONLY
 16 .debug_info   00060160  00000000  00000000  0003e5ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000c46e  00000000  00000000  0009e74a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    0002ac29  00000000  00000000  000aabb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003028  00000000  00000000  000d57e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 000031f8  00000000  00000000  000d8810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002c8f6  00000000  00000000  000dba08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   00052018  00000000  00000000  001082fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000e26f5  00000000  00000000  0015a316  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000050  00000000  00000000  0023ca0b  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00008cac  00000000  00000000  0023ca5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000180 	.word	0x20000180
 800015c:	00000000 	.word	0x00000000
 8000160:	08014010 	.word	0x08014010

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000184 	.word	0x20000184
 800017c:	08014010 	.word	0x08014010

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__gedf2>:
 80005a8:	f04f 3cff 	mov.w	ip, #4294967295
 80005ac:	e006      	b.n	80005bc <__cmpdf2+0x4>
 80005ae:	bf00      	nop

080005b0 <__ledf2>:
 80005b0:	f04f 0c01 	mov.w	ip, #1
 80005b4:	e002      	b.n	80005bc <__cmpdf2+0x4>
 80005b6:	bf00      	nop

080005b8 <__cmpdf2>:
 80005b8:	f04f 0c01 	mov.w	ip, #1
 80005bc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80005c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005cc:	bf18      	it	ne
 80005ce:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80005d2:	d01b      	beq.n	800060c <__cmpdf2+0x54>
 80005d4:	b001      	add	sp, #4
 80005d6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80005da:	bf0c      	ite	eq
 80005dc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80005e0:	ea91 0f03 	teqne	r1, r3
 80005e4:	bf02      	ittt	eq
 80005e6:	ea90 0f02 	teqeq	r0, r2
 80005ea:	2000      	moveq	r0, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	f110 0f00 	cmn.w	r0, #0
 80005f2:	ea91 0f03 	teq	r1, r3
 80005f6:	bf58      	it	pl
 80005f8:	4299      	cmppl	r1, r3
 80005fa:	bf08      	it	eq
 80005fc:	4290      	cmpeq	r0, r2
 80005fe:	bf2c      	ite	cs
 8000600:	17d8      	asrcs	r0, r3, #31
 8000602:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000606:	f040 0001 	orr.w	r0, r0, #1
 800060a:	4770      	bx	lr
 800060c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000610:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000614:	d102      	bne.n	800061c <__cmpdf2+0x64>
 8000616:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800061a:	d107      	bne.n	800062c <__cmpdf2+0x74>
 800061c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000620:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000624:	d1d6      	bne.n	80005d4 <__cmpdf2+0x1c>
 8000626:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800062a:	d0d3      	beq.n	80005d4 <__cmpdf2+0x1c>
 800062c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop

08000634 <__aeabi_cdrcmple>:
 8000634:	4684      	mov	ip, r0
 8000636:	4610      	mov	r0, r2
 8000638:	4662      	mov	r2, ip
 800063a:	468c      	mov	ip, r1
 800063c:	4619      	mov	r1, r3
 800063e:	4663      	mov	r3, ip
 8000640:	e000      	b.n	8000644 <__aeabi_cdcmpeq>
 8000642:	bf00      	nop

08000644 <__aeabi_cdcmpeq>:
 8000644:	b501      	push	{r0, lr}
 8000646:	f7ff ffb7 	bl	80005b8 <__cmpdf2>
 800064a:	2800      	cmp	r0, #0
 800064c:	bf48      	it	mi
 800064e:	f110 0f00 	cmnmi.w	r0, #0
 8000652:	bd01      	pop	{r0, pc}

08000654 <__aeabi_dcmpeq>:
 8000654:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000658:	f7ff fff4 	bl	8000644 <__aeabi_cdcmpeq>
 800065c:	bf0c      	ite	eq
 800065e:	2001      	moveq	r0, #1
 8000660:	2000      	movne	r0, #0
 8000662:	f85d fb08 	ldr.w	pc, [sp], #8
 8000666:	bf00      	nop

08000668 <__aeabi_dcmplt>:
 8000668:	f84d ed08 	str.w	lr, [sp, #-8]!
 800066c:	f7ff ffea 	bl	8000644 <__aeabi_cdcmpeq>
 8000670:	bf34      	ite	cc
 8000672:	2001      	movcc	r0, #1
 8000674:	2000      	movcs	r0, #0
 8000676:	f85d fb08 	ldr.w	pc, [sp], #8
 800067a:	bf00      	nop

0800067c <__aeabi_dcmple>:
 800067c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000680:	f7ff ffe0 	bl	8000644 <__aeabi_cdcmpeq>
 8000684:	bf94      	ite	ls
 8000686:	2001      	movls	r0, #1
 8000688:	2000      	movhi	r0, #0
 800068a:	f85d fb08 	ldr.w	pc, [sp], #8
 800068e:	bf00      	nop

08000690 <__aeabi_dcmpge>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff ffce 	bl	8000634 <__aeabi_cdrcmple>
 8000698:	bf94      	ite	ls
 800069a:	2001      	movls	r0, #1
 800069c:	2000      	movhi	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_dcmpgt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffc4 	bl	8000634 <__aeabi_cdrcmple>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_d2iz>:
 80006b8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80006bc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80006c0:	d215      	bcs.n	80006ee <__aeabi_d2iz+0x36>
 80006c2:	d511      	bpl.n	80006e8 <__aeabi_d2iz+0x30>
 80006c4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80006c8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80006cc:	d912      	bls.n	80006f4 <__aeabi_d2iz+0x3c>
 80006ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80006d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80006d6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80006da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006de:	fa23 f002 	lsr.w	r0, r3, r2
 80006e2:	bf18      	it	ne
 80006e4:	4240      	negne	r0, r0
 80006e6:	4770      	bx	lr
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	4770      	bx	lr
 80006ee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80006f2:	d105      	bne.n	8000700 <__aeabi_d2iz+0x48>
 80006f4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80006f8:	bf08      	it	eq
 80006fa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80006fe:	4770      	bx	lr
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop

08000708 <__aeabi_frsub>:
 8000708:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800070c:	e002      	b.n	8000714 <__addsf3>
 800070e:	bf00      	nop

08000710 <__aeabi_fsub>:
 8000710:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000714 <__addsf3>:
 8000714:	0042      	lsls	r2, r0, #1
 8000716:	bf1f      	itttt	ne
 8000718:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800071c:	ea92 0f03 	teqne	r2, r3
 8000720:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000724:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000728:	d06a      	beq.n	8000800 <__addsf3+0xec>
 800072a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800072e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000732:	bfc1      	itttt	gt
 8000734:	18d2      	addgt	r2, r2, r3
 8000736:	4041      	eorgt	r1, r0
 8000738:	4048      	eorgt	r0, r1
 800073a:	4041      	eorgt	r1, r0
 800073c:	bfb8      	it	lt
 800073e:	425b      	neglt	r3, r3
 8000740:	2b19      	cmp	r3, #25
 8000742:	bf88      	it	hi
 8000744:	4770      	bxhi	lr
 8000746:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800074a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800074e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000752:	bf18      	it	ne
 8000754:	4240      	negne	r0, r0
 8000756:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800075a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800075e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000762:	bf18      	it	ne
 8000764:	4249      	negne	r1, r1
 8000766:	ea92 0f03 	teq	r2, r3
 800076a:	d03f      	beq.n	80007ec <__addsf3+0xd8>
 800076c:	f1a2 0201 	sub.w	r2, r2, #1
 8000770:	fa41 fc03 	asr.w	ip, r1, r3
 8000774:	eb10 000c 	adds.w	r0, r0, ip
 8000778:	f1c3 0320 	rsb	r3, r3, #32
 800077c:	fa01 f103 	lsl.w	r1, r1, r3
 8000780:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000784:	d502      	bpl.n	800078c <__addsf3+0x78>
 8000786:	4249      	negs	r1, r1
 8000788:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800078c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000790:	d313      	bcc.n	80007ba <__addsf3+0xa6>
 8000792:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000796:	d306      	bcc.n	80007a6 <__addsf3+0x92>
 8000798:	0840      	lsrs	r0, r0, #1
 800079a:	ea4f 0131 	mov.w	r1, r1, rrx
 800079e:	f102 0201 	add.w	r2, r2, #1
 80007a2:	2afe      	cmp	r2, #254	; 0xfe
 80007a4:	d251      	bcs.n	800084a <__addsf3+0x136>
 80007a6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80007aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007ae:	bf08      	it	eq
 80007b0:	f020 0001 	biceq.w	r0, r0, #1
 80007b4:	ea40 0003 	orr.w	r0, r0, r3
 80007b8:	4770      	bx	lr
 80007ba:	0049      	lsls	r1, r1, #1
 80007bc:	eb40 0000 	adc.w	r0, r0, r0
 80007c0:	3a01      	subs	r2, #1
 80007c2:	bf28      	it	cs
 80007c4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80007c8:	d2ed      	bcs.n	80007a6 <__addsf3+0x92>
 80007ca:	fab0 fc80 	clz	ip, r0
 80007ce:	f1ac 0c08 	sub.w	ip, ip, #8
 80007d2:	ebb2 020c 	subs.w	r2, r2, ip
 80007d6:	fa00 f00c 	lsl.w	r0, r0, ip
 80007da:	bfaa      	itet	ge
 80007dc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80007e0:	4252      	neglt	r2, r2
 80007e2:	4318      	orrge	r0, r3
 80007e4:	bfbc      	itt	lt
 80007e6:	40d0      	lsrlt	r0, r2
 80007e8:	4318      	orrlt	r0, r3
 80007ea:	4770      	bx	lr
 80007ec:	f092 0f00 	teq	r2, #0
 80007f0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80007f4:	bf06      	itte	eq
 80007f6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80007fa:	3201      	addeq	r2, #1
 80007fc:	3b01      	subne	r3, #1
 80007fe:	e7b5      	b.n	800076c <__addsf3+0x58>
 8000800:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000804:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000808:	bf18      	it	ne
 800080a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800080e:	d021      	beq.n	8000854 <__addsf3+0x140>
 8000810:	ea92 0f03 	teq	r2, r3
 8000814:	d004      	beq.n	8000820 <__addsf3+0x10c>
 8000816:	f092 0f00 	teq	r2, #0
 800081a:	bf08      	it	eq
 800081c:	4608      	moveq	r0, r1
 800081e:	4770      	bx	lr
 8000820:	ea90 0f01 	teq	r0, r1
 8000824:	bf1c      	itt	ne
 8000826:	2000      	movne	r0, #0
 8000828:	4770      	bxne	lr
 800082a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800082e:	d104      	bne.n	800083a <__addsf3+0x126>
 8000830:	0040      	lsls	r0, r0, #1
 8000832:	bf28      	it	cs
 8000834:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000838:	4770      	bx	lr
 800083a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800083e:	bf3c      	itt	cc
 8000840:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000844:	4770      	bxcc	lr
 8000846:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800084a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800084e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000852:	4770      	bx	lr
 8000854:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000858:	bf16      	itet	ne
 800085a:	4608      	movne	r0, r1
 800085c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000860:	4601      	movne	r1, r0
 8000862:	0242      	lsls	r2, r0, #9
 8000864:	bf06      	itte	eq
 8000866:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800086a:	ea90 0f01 	teqeq	r0, r1
 800086e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000872:	4770      	bx	lr

08000874 <__aeabi_ui2f>:
 8000874:	f04f 0300 	mov.w	r3, #0
 8000878:	e004      	b.n	8000884 <__aeabi_i2f+0x8>
 800087a:	bf00      	nop

0800087c <__aeabi_i2f>:
 800087c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000880:	bf48      	it	mi
 8000882:	4240      	negmi	r0, r0
 8000884:	ea5f 0c00 	movs.w	ip, r0
 8000888:	bf08      	it	eq
 800088a:	4770      	bxeq	lr
 800088c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000890:	4601      	mov	r1, r0
 8000892:	f04f 0000 	mov.w	r0, #0
 8000896:	e01c      	b.n	80008d2 <__aeabi_l2f+0x2a>

08000898 <__aeabi_ul2f>:
 8000898:	ea50 0201 	orrs.w	r2, r0, r1
 800089c:	bf08      	it	eq
 800089e:	4770      	bxeq	lr
 80008a0:	f04f 0300 	mov.w	r3, #0
 80008a4:	e00a      	b.n	80008bc <__aeabi_l2f+0x14>
 80008a6:	bf00      	nop

080008a8 <__aeabi_l2f>:
 80008a8:	ea50 0201 	orrs.w	r2, r0, r1
 80008ac:	bf08      	it	eq
 80008ae:	4770      	bxeq	lr
 80008b0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80008b4:	d502      	bpl.n	80008bc <__aeabi_l2f+0x14>
 80008b6:	4240      	negs	r0, r0
 80008b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008bc:	ea5f 0c01 	movs.w	ip, r1
 80008c0:	bf02      	ittt	eq
 80008c2:	4684      	moveq	ip, r0
 80008c4:	4601      	moveq	r1, r0
 80008c6:	2000      	moveq	r0, #0
 80008c8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80008cc:	bf08      	it	eq
 80008ce:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80008d2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80008d6:	fabc f28c 	clz	r2, ip
 80008da:	3a08      	subs	r2, #8
 80008dc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80008e0:	db10      	blt.n	8000904 <__aeabi_l2f+0x5c>
 80008e2:	fa01 fc02 	lsl.w	ip, r1, r2
 80008e6:	4463      	add	r3, ip
 80008e8:	fa00 fc02 	lsl.w	ip, r0, r2
 80008ec:	f1c2 0220 	rsb	r2, r2, #32
 80008f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80008f4:	fa20 f202 	lsr.w	r2, r0, r2
 80008f8:	eb43 0002 	adc.w	r0, r3, r2
 80008fc:	bf08      	it	eq
 80008fe:	f020 0001 	biceq.w	r0, r0, #1
 8000902:	4770      	bx	lr
 8000904:	f102 0220 	add.w	r2, r2, #32
 8000908:	fa01 fc02 	lsl.w	ip, r1, r2
 800090c:	f1c2 0220 	rsb	r2, r2, #32
 8000910:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000914:	fa21 f202 	lsr.w	r2, r1, r2
 8000918:	eb43 0002 	adc.w	r0, r3, r2
 800091c:	bf08      	it	eq
 800091e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000922:	4770      	bx	lr

08000924 <__aeabi_fmul>:
 8000924:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000928:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800092c:	bf1e      	ittt	ne
 800092e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000932:	ea92 0f0c 	teqne	r2, ip
 8000936:	ea93 0f0c 	teqne	r3, ip
 800093a:	d06f      	beq.n	8000a1c <__aeabi_fmul+0xf8>
 800093c:	441a      	add	r2, r3
 800093e:	ea80 0c01 	eor.w	ip, r0, r1
 8000942:	0240      	lsls	r0, r0, #9
 8000944:	bf18      	it	ne
 8000946:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800094a:	d01e      	beq.n	800098a <__aeabi_fmul+0x66>
 800094c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000950:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000954:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000958:	fba0 3101 	umull	r3, r1, r0, r1
 800095c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000960:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000964:	bf3e      	ittt	cc
 8000966:	0049      	lslcc	r1, r1, #1
 8000968:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800096c:	005b      	lslcc	r3, r3, #1
 800096e:	ea40 0001 	orr.w	r0, r0, r1
 8000972:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000976:	2afd      	cmp	r2, #253	; 0xfd
 8000978:	d81d      	bhi.n	80009b6 <__aeabi_fmul+0x92>
 800097a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800097e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000982:	bf08      	it	eq
 8000984:	f020 0001 	biceq.w	r0, r0, #1
 8000988:	4770      	bx	lr
 800098a:	f090 0f00 	teq	r0, #0
 800098e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000992:	bf08      	it	eq
 8000994:	0249      	lsleq	r1, r1, #9
 8000996:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800099a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800099e:	3a7f      	subs	r2, #127	; 0x7f
 80009a0:	bfc2      	ittt	gt
 80009a2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80009a6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80009aa:	4770      	bxgt	lr
 80009ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009b0:	f04f 0300 	mov.w	r3, #0
 80009b4:	3a01      	subs	r2, #1
 80009b6:	dc5d      	bgt.n	8000a74 <__aeabi_fmul+0x150>
 80009b8:	f112 0f19 	cmn.w	r2, #25
 80009bc:	bfdc      	itt	le
 80009be:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80009c2:	4770      	bxle	lr
 80009c4:	f1c2 0200 	rsb	r2, r2, #0
 80009c8:	0041      	lsls	r1, r0, #1
 80009ca:	fa21 f102 	lsr.w	r1, r1, r2
 80009ce:	f1c2 0220 	rsb	r2, r2, #32
 80009d2:	fa00 fc02 	lsl.w	ip, r0, r2
 80009d6:	ea5f 0031 	movs.w	r0, r1, rrx
 80009da:	f140 0000 	adc.w	r0, r0, #0
 80009de:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80009e2:	bf08      	it	eq
 80009e4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80009e8:	4770      	bx	lr
 80009ea:	f092 0f00 	teq	r2, #0
 80009ee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80009f2:	bf02      	ittt	eq
 80009f4:	0040      	lsleq	r0, r0, #1
 80009f6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80009fa:	3a01      	subeq	r2, #1
 80009fc:	d0f9      	beq.n	80009f2 <__aeabi_fmul+0xce>
 80009fe:	ea40 000c 	orr.w	r0, r0, ip
 8000a02:	f093 0f00 	teq	r3, #0
 8000a06:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a0a:	bf02      	ittt	eq
 8000a0c:	0049      	lsleq	r1, r1, #1
 8000a0e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a12:	3b01      	subeq	r3, #1
 8000a14:	d0f9      	beq.n	8000a0a <__aeabi_fmul+0xe6>
 8000a16:	ea41 010c 	orr.w	r1, r1, ip
 8000a1a:	e78f      	b.n	800093c <__aeabi_fmul+0x18>
 8000a1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a20:	ea92 0f0c 	teq	r2, ip
 8000a24:	bf18      	it	ne
 8000a26:	ea93 0f0c 	teqne	r3, ip
 8000a2a:	d00a      	beq.n	8000a42 <__aeabi_fmul+0x11e>
 8000a2c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000a30:	bf18      	it	ne
 8000a32:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a36:	d1d8      	bne.n	80009ea <__aeabi_fmul+0xc6>
 8000a38:	ea80 0001 	eor.w	r0, r0, r1
 8000a3c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000a40:	4770      	bx	lr
 8000a42:	f090 0f00 	teq	r0, #0
 8000a46:	bf17      	itett	ne
 8000a48:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000a4c:	4608      	moveq	r0, r1
 8000a4e:	f091 0f00 	teqne	r1, #0
 8000a52:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000a56:	d014      	beq.n	8000a82 <__aeabi_fmul+0x15e>
 8000a58:	ea92 0f0c 	teq	r2, ip
 8000a5c:	d101      	bne.n	8000a62 <__aeabi_fmul+0x13e>
 8000a5e:	0242      	lsls	r2, r0, #9
 8000a60:	d10f      	bne.n	8000a82 <__aeabi_fmul+0x15e>
 8000a62:	ea93 0f0c 	teq	r3, ip
 8000a66:	d103      	bne.n	8000a70 <__aeabi_fmul+0x14c>
 8000a68:	024b      	lsls	r3, r1, #9
 8000a6a:	bf18      	it	ne
 8000a6c:	4608      	movne	r0, r1
 8000a6e:	d108      	bne.n	8000a82 <__aeabi_fmul+0x15e>
 8000a70:	ea80 0001 	eor.w	r0, r0, r1
 8000a74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000a78:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a80:	4770      	bx	lr
 8000a82:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a86:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_fdiv>:
 8000a8c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000a90:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000a94:	bf1e      	ittt	ne
 8000a96:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000a9a:	ea92 0f0c 	teqne	r2, ip
 8000a9e:	ea93 0f0c 	teqne	r3, ip
 8000aa2:	d069      	beq.n	8000b78 <__aeabi_fdiv+0xec>
 8000aa4:	eba2 0203 	sub.w	r2, r2, r3
 8000aa8:	ea80 0c01 	eor.w	ip, r0, r1
 8000aac:	0249      	lsls	r1, r1, #9
 8000aae:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ab2:	d037      	beq.n	8000b24 <__aeabi_fdiv+0x98>
 8000ab4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ab8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000abc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ac0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ac4:	428b      	cmp	r3, r1
 8000ac6:	bf38      	it	cc
 8000ac8:	005b      	lslcc	r3, r3, #1
 8000aca:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ace:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ad2:	428b      	cmp	r3, r1
 8000ad4:	bf24      	itt	cs
 8000ad6:	1a5b      	subcs	r3, r3, r1
 8000ad8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000adc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ae0:	bf24      	itt	cs
 8000ae2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ae6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000aea:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000aee:	bf24      	itt	cs
 8000af0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000af4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000af8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000afc:	bf24      	itt	cs
 8000afe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000b02:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b06:	011b      	lsls	r3, r3, #4
 8000b08:	bf18      	it	ne
 8000b0a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000b0e:	d1e0      	bne.n	8000ad2 <__aeabi_fdiv+0x46>
 8000b10:	2afd      	cmp	r2, #253	; 0xfd
 8000b12:	f63f af50 	bhi.w	80009b6 <__aeabi_fmul+0x92>
 8000b16:	428b      	cmp	r3, r1
 8000b18:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b1c:	bf08      	it	eq
 8000b1e:	f020 0001 	biceq.w	r0, r0, #1
 8000b22:	4770      	bx	lr
 8000b24:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000b28:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b2c:	327f      	adds	r2, #127	; 0x7f
 8000b2e:	bfc2      	ittt	gt
 8000b30:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000b34:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b38:	4770      	bxgt	lr
 8000b3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3e:	f04f 0300 	mov.w	r3, #0
 8000b42:	3a01      	subs	r2, #1
 8000b44:	e737      	b.n	80009b6 <__aeabi_fmul+0x92>
 8000b46:	f092 0f00 	teq	r2, #0
 8000b4a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000b4e:	bf02      	ittt	eq
 8000b50:	0040      	lsleq	r0, r0, #1
 8000b52:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000b56:	3a01      	subeq	r2, #1
 8000b58:	d0f9      	beq.n	8000b4e <__aeabi_fdiv+0xc2>
 8000b5a:	ea40 000c 	orr.w	r0, r0, ip
 8000b5e:	f093 0f00 	teq	r3, #0
 8000b62:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b66:	bf02      	ittt	eq
 8000b68:	0049      	lsleq	r1, r1, #1
 8000b6a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000b6e:	3b01      	subeq	r3, #1
 8000b70:	d0f9      	beq.n	8000b66 <__aeabi_fdiv+0xda>
 8000b72:	ea41 010c 	orr.w	r1, r1, ip
 8000b76:	e795      	b.n	8000aa4 <__aeabi_fdiv+0x18>
 8000b78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000b7c:	ea92 0f0c 	teq	r2, ip
 8000b80:	d108      	bne.n	8000b94 <__aeabi_fdiv+0x108>
 8000b82:	0242      	lsls	r2, r0, #9
 8000b84:	f47f af7d 	bne.w	8000a82 <__aeabi_fmul+0x15e>
 8000b88:	ea93 0f0c 	teq	r3, ip
 8000b8c:	f47f af70 	bne.w	8000a70 <__aeabi_fmul+0x14c>
 8000b90:	4608      	mov	r0, r1
 8000b92:	e776      	b.n	8000a82 <__aeabi_fmul+0x15e>
 8000b94:	ea93 0f0c 	teq	r3, ip
 8000b98:	d104      	bne.n	8000ba4 <__aeabi_fdiv+0x118>
 8000b9a:	024b      	lsls	r3, r1, #9
 8000b9c:	f43f af4c 	beq.w	8000a38 <__aeabi_fmul+0x114>
 8000ba0:	4608      	mov	r0, r1
 8000ba2:	e76e      	b.n	8000a82 <__aeabi_fmul+0x15e>
 8000ba4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ba8:	bf18      	it	ne
 8000baa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000bae:	d1ca      	bne.n	8000b46 <__aeabi_fdiv+0xba>
 8000bb0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000bb4:	f47f af5c 	bne.w	8000a70 <__aeabi_fmul+0x14c>
 8000bb8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000bbc:	f47f af3c 	bne.w	8000a38 <__aeabi_fmul+0x114>
 8000bc0:	e75f      	b.n	8000a82 <__aeabi_fmul+0x15e>
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_f2iz>:
 8000bc4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000bc8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000bcc:	d30f      	bcc.n	8000bee <__aeabi_f2iz+0x2a>
 8000bce:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000bd2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000bd6:	d90d      	bls.n	8000bf4 <__aeabi_f2iz+0x30>
 8000bd8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000bdc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000be4:	fa23 f002 	lsr.w	r0, r3, r2
 8000be8:	bf18      	it	ne
 8000bea:	4240      	negne	r0, r0
 8000bec:	4770      	bx	lr
 8000bee:	f04f 0000 	mov.w	r0, #0
 8000bf2:	4770      	bx	lr
 8000bf4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000bf8:	d101      	bne.n	8000bfe <__aeabi_f2iz+0x3a>
 8000bfa:	0242      	lsls	r2, r0, #9
 8000bfc:	d105      	bne.n	8000c0a <__aeabi_f2iz+0x46>
 8000bfe:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000c02:	bf08      	it	eq
 8000c04:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c08:	4770      	bx	lr
 8000c0a:	f04f 0000 	mov.w	r0, #0
 8000c0e:	4770      	bx	lr

08000c10 <__aeabi_f2uiz>:
 8000c10:	0042      	lsls	r2, r0, #1
 8000c12:	d20e      	bcs.n	8000c32 <__aeabi_f2uiz+0x22>
 8000c14:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000c18:	d30b      	bcc.n	8000c32 <__aeabi_f2uiz+0x22>
 8000c1a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000c1e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c22:	d409      	bmi.n	8000c38 <__aeabi_f2uiz+0x28>
 8000c24:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c2c:	fa23 f002 	lsr.w	r0, r3, r2
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr
 8000c38:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c3c:	d101      	bne.n	8000c42 <__aeabi_f2uiz+0x32>
 8000c3e:	0242      	lsls	r2, r0, #9
 8000c40:	d102      	bne.n	8000c48 <__aeabi_f2uiz+0x38>
 8000c42:	f04f 30ff 	mov.w	r0, #4294967295
 8000c46:	4770      	bx	lr
 8000c48:	f04f 0000 	mov.w	r0, #0
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop

08000c50 <__aeabi_ldivmod>:
 8000c50:	b97b      	cbnz	r3, 8000c72 <__aeabi_ldivmod+0x22>
 8000c52:	b972      	cbnz	r2, 8000c72 <__aeabi_ldivmod+0x22>
 8000c54:	2900      	cmp	r1, #0
 8000c56:	bfbe      	ittt	lt
 8000c58:	2000      	movlt	r0, #0
 8000c5a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c5e:	e006      	blt.n	8000c6e <__aeabi_ldivmod+0x1e>
 8000c60:	bf08      	it	eq
 8000c62:	2800      	cmpeq	r0, #0
 8000c64:	bf1c      	itt	ne
 8000c66:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c6a:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6e:	f000 b9bf 	b.w	8000ff0 <__aeabi_idiv0>
 8000c72:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c76:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7a:	2900      	cmp	r1, #0
 8000c7c:	db09      	blt.n	8000c92 <__aeabi_ldivmod+0x42>
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	db1a      	blt.n	8000cb8 <__aeabi_ldivmod+0x68>
 8000c82:	f000 f84d 	bl	8000d20 <__udivmoddi4>
 8000c86:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c8e:	b004      	add	sp, #16
 8000c90:	4770      	bx	lr
 8000c92:	4240      	negs	r0, r0
 8000c94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	db1b      	blt.n	8000cd4 <__aeabi_ldivmod+0x84>
 8000c9c:	f000 f840 	bl	8000d20 <__udivmoddi4>
 8000ca0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca8:	b004      	add	sp, #16
 8000caa:	4240      	negs	r0, r0
 8000cac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb0:	4252      	negs	r2, r2
 8000cb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cb6:	4770      	bx	lr
 8000cb8:	4252      	negs	r2, r2
 8000cba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cbe:	f000 f82f 	bl	8000d20 <__udivmoddi4>
 8000cc2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cca:	b004      	add	sp, #16
 8000ccc:	4240      	negs	r0, r0
 8000cce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd2:	4770      	bx	lr
 8000cd4:	4252      	negs	r2, r2
 8000cd6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cda:	f000 f821 	bl	8000d20 <__udivmoddi4>
 8000cde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce6:	b004      	add	sp, #16
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr

08000cf0 <__aeabi_uldivmod>:
 8000cf0:	b953      	cbnz	r3, 8000d08 <__aeabi_uldivmod+0x18>
 8000cf2:	b94a      	cbnz	r2, 8000d08 <__aeabi_uldivmod+0x18>
 8000cf4:	2900      	cmp	r1, #0
 8000cf6:	bf08      	it	eq
 8000cf8:	2800      	cmpeq	r0, #0
 8000cfa:	bf1c      	itt	ne
 8000cfc:	f04f 31ff 	movne.w	r1, #4294967295
 8000d00:	f04f 30ff 	movne.w	r0, #4294967295
 8000d04:	f000 b974 	b.w	8000ff0 <__aeabi_idiv0>
 8000d08:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d10:	f000 f806 	bl	8000d20 <__udivmoddi4>
 8000d14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1c:	b004      	add	sp, #16
 8000d1e:	4770      	bx	lr

08000d20 <__udivmoddi4>:
 8000d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d24:	9e08      	ldr	r6, [sp, #32]
 8000d26:	460d      	mov	r5, r1
 8000d28:	4604      	mov	r4, r0
 8000d2a:	4688      	mov	r8, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14d      	bne.n	8000dcc <__udivmoddi4+0xac>
 8000d30:	428a      	cmp	r2, r1
 8000d32:	4694      	mov	ip, r2
 8000d34:	d968      	bls.n	8000e08 <__udivmoddi4+0xe8>
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	b152      	cbz	r2, 8000d52 <__udivmoddi4+0x32>
 8000d3c:	fa01 f302 	lsl.w	r3, r1, r2
 8000d40:	f1c2 0120 	rsb	r1, r2, #32
 8000d44:	fa20 f101 	lsr.w	r1, r0, r1
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	ea41 0803 	orr.w	r8, r1, r3
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000d56:	0c21      	lsrs	r1, r4, #16
 8000d58:	fbb8 fef5 	udiv	lr, r8, r5
 8000d5c:	fa1f f78c 	uxth.w	r7, ip
 8000d60:	fb05 831e 	mls	r3, r5, lr, r8
 8000d64:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d68:	fb0e f107 	mul.w	r1, lr, r7
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x68>
 8000d70:	eb1c 0303 	adds.w	r3, ip, r3
 8000d74:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000d78:	f080 811e 	bcs.w	8000fb8 <__udivmoddi4+0x298>
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	f240 811b 	bls.w	8000fb8 <__udivmoddi4+0x298>
 8000d82:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f5 	udiv	r0, r3, r5
 8000d90:	fb05 3310 	mls	r3, r5, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x96>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 8108 	bcs.w	8000fbc <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8105 	bls.w	8000fbc <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	1be4      	subs	r4, r4, r7
 8000db8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	b11e      	cbz	r6, 8000dc8 <__udivmoddi4+0xa8>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dcc:	428b      	cmp	r3, r1
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0xc2>
 8000dd0:	2e00      	cmp	r6, #0
 8000dd2:	f000 80ee 	beq.w	8000fb2 <__udivmoddi4+0x292>
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e9c6 0500 	strd	r0, r5, [r6]
 8000ddc:	4608      	mov	r0, r1
 8000dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de2:	fab3 f183 	clz	r1, r3
 8000de6:	2900      	cmp	r1, #0
 8000de8:	d14a      	bne.n	8000e80 <__udivmoddi4+0x160>
 8000dea:	42ab      	cmp	r3, r5
 8000dec:	d302      	bcc.n	8000df4 <__udivmoddi4+0xd4>
 8000dee:	4282      	cmp	r2, r0
 8000df0:	f200 80f9 	bhi.w	8000fe6 <__udivmoddi4+0x2c6>
 8000df4:	1a84      	subs	r4, r0, r2
 8000df6:	eb65 0303 	sbc.w	r3, r5, r3
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	4698      	mov	r8, r3
 8000dfe:	2e00      	cmp	r6, #0
 8000e00:	d0e2      	beq.n	8000dc8 <__udivmoddi4+0xa8>
 8000e02:	e9c6 4800 	strd	r4, r8, [r6]
 8000e06:	e7df      	b.n	8000dc8 <__udivmoddi4+0xa8>
 8000e08:	b902      	cbnz	r2, 8000e0c <__udivmoddi4+0xec>
 8000e0a:	deff      	udf	#255	; 0xff
 8000e0c:	fab2 f282 	clz	r2, r2
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	f040 8091 	bne.w	8000f38 <__udivmoddi4+0x218>
 8000e16:	eba1 050c 	sub.w	r5, r1, ip
 8000e1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1e:	fa1f fe8c 	uxth.w	lr, ip
 8000e22:	2101      	movs	r1, #1
 8000e24:	fbb5 f3f7 	udiv	r3, r5, r7
 8000e28:	fb07 5013 	mls	r0, r7, r3, r5
 8000e2c:	0c25      	lsrs	r5, r4, #16
 8000e2e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000e32:	fb0e f003 	mul.w	r0, lr, r3
 8000e36:	42a8      	cmp	r0, r5
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x12c>
 8000e3a:	eb1c 0505 	adds.w	r5, ip, r5
 8000e3e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e42:	d202      	bcs.n	8000e4a <__udivmoddi4+0x12a>
 8000e44:	42a8      	cmp	r0, r5
 8000e46:	f200 80cb 	bhi.w	8000fe0 <__udivmoddi4+0x2c0>
 8000e4a:	4643      	mov	r3, r8
 8000e4c:	1a2d      	subs	r5, r5, r0
 8000e4e:	b2a4      	uxth	r4, r4
 8000e50:	fbb5 f0f7 	udiv	r0, r5, r7
 8000e54:	fb07 5510 	mls	r5, r7, r0, r5
 8000e58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e60:	45a6      	cmp	lr, r4
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x156>
 8000e64:	eb1c 0404 	adds.w	r4, ip, r4
 8000e68:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e6c:	d202      	bcs.n	8000e74 <__udivmoddi4+0x154>
 8000e6e:	45a6      	cmp	lr, r4
 8000e70:	f200 80bb 	bhi.w	8000fea <__udivmoddi4+0x2ca>
 8000e74:	4628      	mov	r0, r5
 8000e76:	eba4 040e 	sub.w	r4, r4, lr
 8000e7a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e7e:	e79e      	b.n	8000dbe <__udivmoddi4+0x9e>
 8000e80:	f1c1 0720 	rsb	r7, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8e:	fa20 f407 	lsr.w	r4, r0, r7
 8000e92:	fa05 f301 	lsl.w	r3, r5, r1
 8000e96:	431c      	orrs	r4, r3
 8000e98:	40fd      	lsrs	r5, r7
 8000e9a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e9e:	fa00 f301 	lsl.w	r3, r0, r1
 8000ea2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ea6:	0c20      	lsrs	r0, r4, #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb0:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000eb4:	fb08 f00e 	mul.w	r0, r8, lr
 8000eb8:	42a8      	cmp	r0, r5
 8000eba:	fa02 f201 	lsl.w	r2, r2, r1
 8000ebe:	d90b      	bls.n	8000ed8 <__udivmoddi4+0x1b8>
 8000ec0:	eb1c 0505 	adds.w	r5, ip, r5
 8000ec4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec8:	f080 8088 	bcs.w	8000fdc <__udivmoddi4+0x2bc>
 8000ecc:	42a8      	cmp	r0, r5
 8000ece:	f240 8085 	bls.w	8000fdc <__udivmoddi4+0x2bc>
 8000ed2:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed6:	4465      	add	r5, ip
 8000ed8:	1a2d      	subs	r5, r5, r0
 8000eda:	b2a4      	uxth	r4, r4
 8000edc:	fbb5 f0f9 	udiv	r0, r5, r9
 8000ee0:	fb09 5510 	mls	r5, r9, r0, r5
 8000ee4:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000ee8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000eec:	45ae      	cmp	lr, r5
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1e2>
 8000ef0:	eb1c 0505 	adds.w	r5, ip, r5
 8000ef4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ef8:	d26c      	bcs.n	8000fd4 <__udivmoddi4+0x2b4>
 8000efa:	45ae      	cmp	lr, r5
 8000efc:	d96a      	bls.n	8000fd4 <__udivmoddi4+0x2b4>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4465      	add	r5, ip
 8000f02:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f06:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0a:	eba5 050e 	sub.w	r5, r5, lr
 8000f0e:	42a5      	cmp	r5, r4
 8000f10:	46c8      	mov	r8, r9
 8000f12:	46a6      	mov	lr, r4
 8000f14:	d356      	bcc.n	8000fc4 <__udivmoddi4+0x2a4>
 8000f16:	d053      	beq.n	8000fc0 <__udivmoddi4+0x2a0>
 8000f18:	b15e      	cbz	r6, 8000f32 <__udivmoddi4+0x212>
 8000f1a:	ebb3 0208 	subs.w	r2, r3, r8
 8000f1e:	eb65 050e 	sbc.w	r5, r5, lr
 8000f22:	fa05 f707 	lsl.w	r7, r5, r7
 8000f26:	fa22 f301 	lsr.w	r3, r2, r1
 8000f2a:	40cd      	lsrs	r5, r1
 8000f2c:	431f      	orrs	r7, r3
 8000f2e:	e9c6 7500 	strd	r7, r5, [r6]
 8000f32:	2100      	movs	r1, #0
 8000f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa25 f303 	lsr.w	r3, r5, r3
 8000f48:	4095      	lsls	r5, r2
 8000f4a:	430d      	orrs	r5, r1
 8000f4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f50:	fa1f fe8c 	uxth.w	lr, ip
 8000f54:	fbb3 f1f7 	udiv	r1, r3, r7
 8000f58:	fb07 3011 	mls	r0, r7, r1, r3
 8000f5c:	0c2b      	lsrs	r3, r5, #16
 8000f5e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000f62:	fb01 f00e 	mul.w	r0, r1, lr
 8000f66:	4298      	cmp	r0, r3
 8000f68:	fa04 f402 	lsl.w	r4, r4, r2
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x260>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f101 38ff 	add.w	r8, r1, #4294967295
 8000f76:	d22f      	bcs.n	8000fd8 <__udivmoddi4+0x2b8>
 8000f78:	4298      	cmp	r0, r3
 8000f7a:	d92d      	bls.n	8000fd8 <__udivmoddi4+0x2b8>
 8000f7c:	3902      	subs	r1, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a1b      	subs	r3, r3, r0
 8000f82:	b2ad      	uxth	r5, r5
 8000f84:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f88:	fb07 3310 	mls	r3, r7, r0, r3
 8000f8c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000f90:	fb00 f30e 	mul.w	r3, r0, lr
 8000f94:	42ab      	cmp	r3, r5
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x28a>
 8000f98:	eb1c 0505 	adds.w	r5, ip, r5
 8000f9c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fa0:	d216      	bcs.n	8000fd0 <__udivmoddi4+0x2b0>
 8000fa2:	42ab      	cmp	r3, r5
 8000fa4:	d914      	bls.n	8000fd0 <__udivmoddi4+0x2b0>
 8000fa6:	3802      	subs	r0, #2
 8000fa8:	4465      	add	r5, ip
 8000faa:	1aed      	subs	r5, r5, r3
 8000fac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000fb0:	e738      	b.n	8000e24 <__udivmoddi4+0x104>
 8000fb2:	4631      	mov	r1, r6
 8000fb4:	4630      	mov	r0, r6
 8000fb6:	e707      	b.n	8000dc8 <__udivmoddi4+0xa8>
 8000fb8:	4686      	mov	lr, r0
 8000fba:	e6e5      	b.n	8000d88 <__udivmoddi4+0x68>
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	e6fa      	b.n	8000db6 <__udivmoddi4+0x96>
 8000fc0:	454b      	cmp	r3, r9
 8000fc2:	d2a9      	bcs.n	8000f18 <__udivmoddi4+0x1f8>
 8000fc4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fcc:	3801      	subs	r0, #1
 8000fce:	e7a3      	b.n	8000f18 <__udivmoddi4+0x1f8>
 8000fd0:	4640      	mov	r0, r8
 8000fd2:	e7ea      	b.n	8000faa <__udivmoddi4+0x28a>
 8000fd4:	4620      	mov	r0, r4
 8000fd6:	e794      	b.n	8000f02 <__udivmoddi4+0x1e2>
 8000fd8:	4641      	mov	r1, r8
 8000fda:	e7d1      	b.n	8000f80 <__udivmoddi4+0x260>
 8000fdc:	46d0      	mov	r8, sl
 8000fde:	e77b      	b.n	8000ed8 <__udivmoddi4+0x1b8>
 8000fe0:	3b02      	subs	r3, #2
 8000fe2:	4465      	add	r5, ip
 8000fe4:	e732      	b.n	8000e4c <__udivmoddi4+0x12c>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e709      	b.n	8000dfe <__udivmoddi4+0xde>
 8000fea:	4464      	add	r4, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e742      	b.n	8000e76 <__udivmoddi4+0x156>

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000ff4:	b508      	push	{r3, lr}

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000ff6:	4813      	ldr	r0, [pc, #76]	; (8001044 <MX_ADC_Init+0x50>)
 8000ff8:	4b13      	ldr	r3, [pc, #76]	; (8001048 <MX_ADC_Init+0x54>)
 8000ffa:	6003      	str	r3, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ffc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001000:	6043      	str	r3, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001002:	2300      	movs	r3, #0
 8001004:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001006:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001008:	6103      	str	r3, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800100a:	2204      	movs	r2, #4
 800100c:	6142      	str	r2, [r0, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800100e:	7603      	strb	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001010:	7643      	strb	r3, [r0, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001012:	7683      	strb	r3, [r0, #26]
  hadc.Init.NbrOfConversion = 1;
 8001014:	2201      	movs	r2, #1
 8001016:	61c2      	str	r2, [r0, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001018:	f880 3020 	strb.w	r3, [r0, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800101c:	6243      	str	r3, [r0, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800101e:	6283      	str	r3, [r0, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001020:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001024:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001028:	6302      	str	r2, [r0, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 800102a:	2207      	movs	r2, #7
 800102c:	6342      	str	r2, [r0, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 800102e:	6382      	str	r2, [r0, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8001030:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001034:	64c3      	str	r3, [r0, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001036:	f002 fe29 	bl	8003c8c <HAL_ADC_Init>
 800103a:	b900      	cbnz	r0, 800103e <MX_ADC_Init+0x4a>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800103c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800103e:	f000 fb0f 	bl	8001660 <Error_Handler>
}
 8001042:	e7fb      	b.n	800103c <MX_ADC_Init+0x48>
 8001044:	2000019c 	.word	0x2000019c
 8001048:	40012400 	.word	0x40012400

0800104c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 800104c:	6802      	ldr	r2, [r0, #0]
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <HAL_ADC_MspInit+0x28>)
 8001050:	429a      	cmp	r2, r3
 8001052:	d000      	beq.n	8001056 <HAL_ADC_MspInit+0xa>
 8001054:	4770      	bx	lr
{
 8001056:	b082      	sub	sp, #8
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800105c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800105e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001062:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001066:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800106a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800106c:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_ADC_CLK_ENABLE();
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 800106e:	b002      	add	sp, #8
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	40012400 	.word	0x40012400

08001078 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8001078:	6802      	ldr	r2, [r0, #0]
 800107a:	4b05      	ldr	r3, [pc, #20]	; (8001090 <HAL_ADC_MspDeInit+0x18>)
 800107c:	429a      	cmp	r2, r3
 800107e:	d000      	beq.n	8001082 <HAL_ADC_MspDeInit+0xa>
    __HAL_RCC_ADC_CLK_DISABLE();
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8001080:	4770      	bx	lr
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8001082:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001086:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8001088:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800108c:	6613      	str	r3, [r2, #96]	; 0x60
 800108e:	e7f7      	b.n	8001080 <HAL_ADC_MspDeInit+0x8>
 8001090:	40012400 	.word	0x40012400

08001094 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001094:	b530      	push	{r4, r5, lr}
 8001096:	b085      	sub	sp, #20
 8001098:	4604      	mov	r4, r0
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 800109a:	2300      	movs	r3, #0
 800109c:	9301      	str	r3, [sp, #4]
 800109e:	9302      	str	r3, [sp, #8]
 80010a0:	9303      	str	r3, [sp, #12]

  MX_ADC_Init();
 80010a2:	f7ff ffa7 	bl	8000ff4 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 80010a6:	4816      	ldr	r0, [pc, #88]	; (8001100 <ADC_ReadChannels+0x6c>)
 80010a8:	f003 fa34 	bl	8004514 <HAL_ADCEx_Calibration_Start>
 80010ac:	b9f8      	cbnz	r0, 80010ee <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 80010ae:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010b0:	2300      	movs	r3, #0
 80010b2:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80010b4:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80010b6:	a901      	add	r1, sp, #4
 80010b8:	4811      	ldr	r0, [pc, #68]	; (8001100 <ADC_ReadChannels+0x6c>)
 80010ba:	f002 ff75 	bl	8003fa8 <HAL_ADC_ConfigChannel>
 80010be:	b9c8      	cbnz	r0, 80010f4 <ADC_ReadChannels+0x60>
  {
    Error_Handler();
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 80010c0:	480f      	ldr	r0, [pc, #60]	; (8001100 <ADC_ReadChannels+0x6c>)
 80010c2:	f003 f935 	bl	8004330 <HAL_ADC_Start>
 80010c6:	b9c0      	cbnz	r0, 80010fa <ADC_ReadChannels+0x66>
  {
    /* Start Error */
    Error_Handler();
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80010c8:	4c0d      	ldr	r4, [pc, #52]	; (8001100 <ADC_ReadChannels+0x6c>)
 80010ca:	f04f 31ff 	mov.w	r1, #4294967295
 80010ce:	4620      	mov	r0, r4
 80010d0:	f002 ff08 	bl	8003ee4 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 80010d4:	4620      	mov	r0, r4
 80010d6:	f003 f9fd 	bl	80044d4 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 80010da:	4620      	mov	r0, r4
 80010dc:	f002 ff61 	bl	8003fa2 <HAL_ADC_GetValue>
 80010e0:	4605      	mov	r5, r0

  HAL_ADC_DeInit(&hadc);
 80010e2:	4620      	mov	r0, r4
 80010e4:	f003 f9a0 	bl	8004428 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 80010e8:	4628      	mov	r0, r5
 80010ea:	b005      	add	sp, #20
 80010ec:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 80010ee:	f000 fab7 	bl	8001660 <Error_Handler>
 80010f2:	e7dc      	b.n	80010ae <ADC_ReadChannels+0x1a>
    Error_Handler();
 80010f4:	f000 fab4 	bl	8001660 <Error_Handler>
 80010f8:	e7e2      	b.n	80010c0 <ADC_ReadChannels+0x2c>
    Error_Handler();
 80010fa:	f000 fab1 	bl	8001660 <Error_Handler>
 80010fe:	e7e3      	b.n	80010c8 <ADC_ReadChannels+0x34>
 8001100:	2000019c 	.word	0x2000019c

08001104 <SYS_InitMeasurement>:
  hadc.Instance = ADC;
 8001104:	4b01      	ldr	r3, [pc, #4]	; (800110c <SYS_InitMeasurement+0x8>)
 8001106:	4a02      	ldr	r2, [pc, #8]	; (8001110 <SYS_InitMeasurement+0xc>)
 8001108:	601a      	str	r2, [r3, #0]
}
 800110a:	4770      	bx	lr
 800110c:	2000019c 	.word	0x2000019c
 8001110:	40012400 	.word	0x40012400

08001114 <SYS_GetBatteryLevel>:
{
 8001114:	b508      	push	{r3, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8001116:	480d      	ldr	r0, [pc, #52]	; (800114c <SYS_GetBatteryLevel+0x38>)
 8001118:	f7ff ffbc 	bl	8001094 <ADC_ReadChannels>
  if (measuredLevel == 0)
 800111c:	b1a0      	cbz	r0, 8001148 <SYS_GetBatteryLevel+0x34>
 800111e:	4602      	mov	r2, r0
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8001120:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <SYS_GetBatteryLevel+0x3c>)
 8001122:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8001126:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800112a:	428b      	cmp	r3, r1
 800112c:	d007      	beq.n	800113e <SYS_GetBatteryLevel+0x2a>
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 800112e:	f640 40e4 	movw	r0, #3300	; 0xce4
 8001132:	fb03 f000 	mul.w	r0, r3, r0
 8001136:	fbb0 f0f2 	udiv	r0, r0, r2
 800113a:	b280      	uxth	r0, r0
 800113c:	e005      	b.n	800114a <SYS_GetBatteryLevel+0x36>
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 800113e:	4805      	ldr	r0, [pc, #20]	; (8001154 <SYS_GetBatteryLevel+0x40>)
 8001140:	fbb0 f0f2 	udiv	r0, r0, r2
 8001144:	b280      	uxth	r0, r0
 8001146:	e000      	b.n	800114a <SYS_GetBatteryLevel+0x36>
    batteryLevelmV = 0;
 8001148:	2000      	movs	r0, #0
}
 800114a:	bd08      	pop	{r3, pc}
 800114c:	b4002000 	.word	0xb4002000
 8001150:	1fff7500 	.word	0x1fff7500
 8001154:	004c08d8 	.word	0x004c08d8

08001158 <SYS_GetTemperatureLevel>:
{
 8001158:	b510      	push	{r4, lr}
 800115a:	b082      	sub	sp, #8
  __IO int16_t temperatureDegreeC = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 8001162:	f7ff ffd7 	bl	8001114 <SYS_GetBatteryLevel>
 8001166:	4604      	mov	r4, r0
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8001168:	4821      	ldr	r0, [pc, #132]	; (80011f0 <SYS_GetTemperatureLevel+0x98>)
 800116a:	f7ff ff93 	bl	8001094 <ADC_ReadChannels>
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 800116e:	4b21      	ldr	r3, [pc, #132]	; (80011f4 <SYS_GetTemperatureLevel+0x9c>)
 8001170:	f8b3 20c8 	ldrh.w	r2, [r3, #200]	; 0xc8
 8001174:	f8b3 10a8 	ldrh.w	r1, [r3, #168]	; 0xa8
 8001178:	428a      	cmp	r2, r1
 800117a:	d01d      	beq.n	80011b8 <SYS_GetTemperatureLevel+0x60>
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 800117c:	fb00 f304 	mul.w	r3, r0, r4
 8001180:	089b      	lsrs	r3, r3, #2
 8001182:	4c1d      	ldr	r4, [pc, #116]	; (80011f8 <SYS_GetTemperatureLevel+0xa0>)
 8001184:	fba4 0303 	umull	r0, r3, r4, r3
 8001188:	ebc1 1353 	rsb	r3, r1, r3, lsr #5
 800118c:	2064      	movs	r0, #100	; 0x64
 800118e:	fb00 f303 	mul.w	r3, r0, r3
 8001192:	1a52      	subs	r2, r2, r1
 8001194:	fb93 f3f2 	sdiv	r3, r3, r2
 8001198:	331e      	adds	r3, #30
 800119a:	b21b      	sxth	r3, r3
 800119c:	f8ad 3006 	strh.w	r3, [sp, #6]
  temperatureDegreeC <<= 8;
 80011a0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80011a4:	b21b      	sxth	r3, r3
 80011a6:	021b      	lsls	r3, r3, #8
 80011a8:	b21b      	sxth	r3, r3
 80011aa:	f8ad 3006 	strh.w	r3, [sp, #6]
  return (int16_t) temperatureDegreeC;
 80011ae:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}
 80011b2:	b200      	sxth	r0, r0
 80011b4:	b002      	add	sp, #8
 80011b6:	bd10      	pop	{r4, pc}
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 80011b8:	fb00 f404 	mul.w	r4, r0, r4
 80011bc:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <SYS_GetTemperatureLevel+0xa4>)
 80011be:	fba3 2304 	umull	r2, r3, r3, r4
 80011c2:	1ae4      	subs	r4, r4, r3
 80011c4:	eb03 0454 	add.w	r4, r3, r4, lsr #1
 80011c8:	0ae4      	lsrs	r4, r4, #11
 80011ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ce:	fb03 f404 	mul.w	r4, r3, r4
 80011d2:	f5a4 2439 	sub.w	r4, r4, #757760	; 0xb9000
 80011d6:	f5a4 640c 	sub.w	r4, r4, #2240	; 0x8c0
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <SYS_GetTemperatureLevel+0xa8>)
 80011dc:	fb83 2304 	smull	r2, r3, r3, r4
 80011e0:	17e4      	asrs	r4, r4, #31
 80011e2:	ebc4 24a3 	rsb	r4, r4, r3, asr #10
 80011e6:	341e      	adds	r4, #30
 80011e8:	b224      	sxth	r4, r4
 80011ea:	f8ad 4006 	strh.w	r4, [sp, #6]
 80011ee:	e7d7      	b.n	80011a0 <SYS_GetTemperatureLevel+0x48>
 80011f0:	b0001000 	.word	0xb0001000
 80011f4:	1fff7500 	.word	0x1fff7500
 80011f8:	09ee009f 	.word	0x09ee009f
 80011fc:	00100101 	.word	0x00100101
 8001200:	68db8bad 	.word	0x68db8bad

08001204 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001204:	b500      	push	{lr}
 8001206:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800120c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800120e:	f042 0204 	orr.w	r2, r2, #4
 8001212:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001214:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001216:	f002 0204 	and.w	r2, r2, #4
 800121a:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800121c:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800121e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001220:	f042 0201 	orr.w	r2, r2, #1
 8001224:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800122e:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 8001230:	2200      	movs	r2, #0
 8001232:	2102      	movs	r1, #2
 8001234:	200f      	movs	r0, #15
 8001236:	f003 fa1f 	bl	8004678 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800123a:	200f      	movs	r0, #15
 800123c:	f003 fa54 	bl	80046e8 <HAL_NVIC_EnableIRQ>

}
 8001240:	b003      	add	sp, #12
 8001242:	f85d fb04 	ldr.w	pc, [sp], #4

08001246 <FLASH_IF_IsEmpty>:
  /* USER CODE END FLASH_IF_IsEmpty_1 */
  uint64_t *addr64;
  uint32_t i;

  /* start memory NOT 64bits aligned */
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001246:	e000      	b.n	800124a <FLASH_IF_IsEmpty+0x4>
  {
    if (*addr++ != UINT8_MAX)
    {
      return FLASH_NOT_EMPTY;
    }
    size--;
 8001248:	3901      	subs	r1, #1
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 800124a:	f010 0307 	ands.w	r3, r0, #7
 800124e:	d012      	beq.n	8001276 <FLASH_IF_IsEmpty+0x30>
    if (*addr++ != UINT8_MAX)
 8001250:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001254:	2bff      	cmp	r3, #255	; 0xff
 8001256:	d0f7      	beq.n	8001248 <FLASH_IF_IsEmpty+0x2>
      return FLASH_NOT_EMPTY;
 8001258:	2001      	movs	r0, #1
 800125a:	4770      	bx	lr
  {
    if (*addr++ != UINT8_MAX)
    {
      return FLASH_NOT_EMPTY;
    }
    size--;
 800125c:	3901      	subs	r1, #1
  while (size != 0)
 800125e:	b129      	cbz	r1, 800126c <FLASH_IF_IsEmpty+0x26>
    if (*addr++ != UINT8_MAX)
 8001260:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001264:	2bff      	cmp	r3, #255	; 0xff
 8001266:	d0f9      	beq.n	800125c <FLASH_IF_IsEmpty+0x16>
      return FLASH_NOT_EMPTY;
 8001268:	2001      	movs	r0, #1
 800126a:	e002      	b.n	8001272 <FLASH_IF_IsEmpty+0x2c>
  }
  return FLASH_EMPTY;
 800126c:	2000      	movs	r0, #0
 800126e:	e000      	b.n	8001272 <FLASH_IF_IsEmpty+0x2c>
      return FLASH_NOT_EMPTY;
 8001270:	2001      	movs	r0, #1
  /* USER CODE BEGIN FLASH_IF_IsEmpty_2 */

  /* USER CODE END FLASH_IF_IsEmpty_2 */
}
 8001272:	bc10      	pop	{r4}
 8001274:	4770      	bx	lr
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001276:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800127a:	d212      	bcs.n	80012a2 <FLASH_IF_IsEmpty+0x5c>
{
 800127c:	b410      	push	{r4}
    if (*addr64++ != UINT64_MAX)
 800127e:	4602      	mov	r2, r0
 8001280:	f852 4b08 	ldr.w	r4, [r2], #8
 8001284:	6840      	ldr	r0, [r0, #4]
 8001286:	f1b0 3fff 	cmp.w	r0, #4294967295
 800128a:	bf08      	it	eq
 800128c:	f1b4 3fff 	cmpeq.w	r4, #4294967295
 8001290:	d1ee      	bne.n	8001270 <FLASH_IF_IsEmpty+0x2a>
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001292:	3301      	adds	r3, #1
    if (*addr64++ != UINT64_MAX)
 8001294:	4610      	mov	r0, r2
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001296:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800129a:	d3f0      	bcc.n	800127e <FLASH_IF_IsEmpty+0x38>
  size -= sizeof(uint64_t) * i;
 800129c:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
  while (size != 0)
 80012a0:	e7dd      	b.n	800125e <FLASH_IF_IsEmpty+0x18>
  size -= sizeof(uint64_t) * i;
 80012a2:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
  while (size != 0)
 80012a6:	b129      	cbz	r1, 80012b4 <FLASH_IF_IsEmpty+0x6e>
    if (*addr++ != UINT8_MAX)
 80012a8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80012ac:	2bff      	cmp	r3, #255	; 0xff
 80012ae:	d103      	bne.n	80012b8 <FLASH_IF_IsEmpty+0x72>
    size--;
 80012b0:	3901      	subs	r1, #1
 80012b2:	e7f8      	b.n	80012a6 <FLASH_IF_IsEmpty+0x60>
  return FLASH_EMPTY;
 80012b4:	2000      	movs	r0, #0
 80012b6:	4770      	bx	lr
      return FLASH_NOT_EMPTY;
 80012b8:	2001      	movs	r0, #1
}
 80012ba:	4770      	bx	lr

080012bc <FLASH_IF_Write64>:
{
 80012bc:	b570      	push	{r4, r5, r6, lr}
 80012be:	4604      	mov	r4, r0
 80012c0:	4616      	mov	r6, r2
 80012c2:	461d      	mov	r5, r3
  while (*(uint64_t *)address != data)
 80012c4:	e005      	b.n	80012d2 <FLASH_IF_Write64+0x16>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data);
 80012c6:	4632      	mov	r2, r6
 80012c8:	462b      	mov	r3, r5
 80012ca:	4621      	mov	r1, r4
 80012cc:	2001      	movs	r0, #1
 80012ce:	f003 fd37 	bl	8004d40 <HAL_FLASH_Program>
  while (*(uint64_t *)address != data)
 80012d2:	6822      	ldr	r2, [r4, #0]
 80012d4:	6863      	ldr	r3, [r4, #4]
 80012d6:	42ab      	cmp	r3, r5
 80012d8:	bf08      	it	eq
 80012da:	42b2      	cmpeq	r2, r6
 80012dc:	d005      	beq.n	80012ea <FLASH_IF_Write64+0x2e>
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
#if defined(CORE_CM0PLUS)
  return ((READ_BIT(FLASH->C2SR, FLASH_C2SR_PESD) == (FLASH_C2SR_PESD)) ? 1UL : 0UL);
#else
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 80012de:	4904      	ldr	r1, [pc, #16]	; (80012f0 <FLASH_IF_Write64+0x34>)
 80012e0:	6909      	ldr	r1, [r1, #16]
 80012e2:	f411 2f00 	tst.w	r1, #524288	; 0x80000
 80012e6:	d1fa      	bne.n	80012de <FLASH_IF_Write64+0x22>
 80012e8:	e7ed      	b.n	80012c6 <FLASH_IF_Write64+0xa>
}
 80012ea:	2000      	movs	r0, #0
 80012ec:	bd70      	pop	{r4, r5, r6, pc}
 80012ee:	bf00      	nop
 80012f0:	58004000 	.word	0x58004000

080012f4 <FLASH_IF_Write_Buffer>:
{
 80012f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	4606      	mov	r6, r0
 80012fc:	460c      	mov	r4, r1
 80012fe:	4690      	mov	r8, r2
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 8001300:	2500      	movs	r5, #0
  int32_t status = FLASH_OK;
 8001302:	462f      	mov	r7, r5
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 8001304:	e003      	b.n	800130e <FLASH_IF_Write_Buffer+0x1a>
    pDestination += sizeof(uint64_t);
 8001306:	3608      	adds	r6, #8
    pSrc += sizeof(uint64_t);
 8001308:	3408      	adds	r4, #8
    if (status != FLASH_OK)
 800130a:	b9af      	cbnz	r7, 8001338 <FLASH_IF_Write_Buffer+0x44>
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 800130c:	3501      	adds	r5, #1
 800130e:	ebb5 0fd8 	cmp.w	r5, r8, lsr #3
 8001312:	d211      	bcs.n	8001338 <FLASH_IF_Write_Buffer+0x44>
    UTIL_MEM_cpy_8(&src_value, pSrc, sizeof(uint64_t));
 8001314:	2208      	movs	r2, #8
 8001316:	4621      	mov	r1, r4
 8001318:	4668      	mov	r0, sp
 800131a:	f011 fcad 	bl	8012c78 <UTIL_MEM_cpy_8>
    if (src_value != UINT64_MAX)
 800131e:	9a00      	ldr	r2, [sp, #0]
 8001320:	9b01      	ldr	r3, [sp, #4]
 8001322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001326:	bf08      	it	eq
 8001328:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800132c:	d0eb      	beq.n	8001306 <FLASH_IF_Write_Buffer+0x12>
      status = FLASH_IF_Write64(pDestination, src_value);
 800132e:	4630      	mov	r0, r6
 8001330:	f7ff ffc4 	bl	80012bc <FLASH_IF_Write64>
 8001334:	4607      	mov	r7, r0
 8001336:	e7e6      	b.n	8001306 <FLASH_IF_Write_Buffer+0x12>
}
 8001338:	4638      	mov	r0, r7
 800133a:	b002      	add	sp, #8
 800133c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001340 <FLASH_IF_EraseByPages>:
{
 8001340:	b500      	push	{lr}
 8001342:	b085      	sub	sp, #20
  erase_str.TypeErase = FLASH_TYPEERASE_PAGES;
 8001344:	2302      	movs	r3, #2
 8001346:	9301      	str	r3, [sp, #4]
  erase_str.Page = page;
 8001348:	9002      	str	r0, [sp, #8]
  erase_str.NbPages = n;
 800134a:	9103      	str	r1, [sp, #12]
  if (interrupt)
 800134c:	b13a      	cbz	r2, 800135e <FLASH_IF_EraseByPages+0x1e>
    hal_status = HAL_FLASHEx_Erase_IT(&erase_str);
 800134e:	a801      	add	r0, sp, #4
 8001350:	f003 fdbe 	bl	8004ed0 <HAL_FLASHEx_Erase_IT>
  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 8001354:	b140      	cbz	r0, 8001368 <FLASH_IF_EraseByPages+0x28>
 8001356:	2802      	cmp	r0, #2
 8001358:	d10a      	bne.n	8001370 <FLASH_IF_EraseByPages+0x30>
 800135a:	2001      	movs	r0, #1
 800135c:	e005      	b.n	800136a <FLASH_IF_EraseByPages+0x2a>
    hal_status = HAL_FLASHEx_Erase(&erase_str, &page_error);
 800135e:	4669      	mov	r1, sp
 8001360:	a801      	add	r0, sp, #4
 8001362:	f003 fd75 	bl	8004e50 <HAL_FLASHEx_Erase>
 8001366:	e7f5      	b.n	8001354 <FLASH_IF_EraseByPages+0x14>
  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 8001368:	2000      	movs	r0, #0
}
 800136a:	b005      	add	sp, #20
 800136c:	f85d fb04 	ldr.w	pc, [sp], #4
  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 8001370:	f06f 0001 	mvn.w	r0, #1
 8001374:	e7f9      	b.n	800136a <FLASH_IF_EraseByPages+0x2a>
	...

08001378 <FLASH_IF_Write>:
{
 8001378:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800137c:	4693      	mov	fp, r2
 800137e:	4699      	mov	r9, r3
  uint32_t page_start_index = PAGE(address);
 8001380:	f100 4578 	add.w	r5, r0, #4160749568	; 0xf8000000
 8001384:	4b3e      	ldr	r3, [pc, #248]	; (8001480 <FLASH_IF_Write+0x108>)
 8001386:	f8d3 25e0 	ldr.w	r2, [r3, #1504]	; 0x5e0
 800138a:	4b3e      	ldr	r3, [pc, #248]	; (8001484 <FLASH_IF_Write+0x10c>)
 800138c:	ea03 2382 	and.w	r3, r3, r2, lsl #10
 8001390:	fbb5 f2f3 	udiv	r2, r5, r3
 8001394:	fb03 5512 	mls	r5, r3, r2, r5
  uint32_t page_end_index = PAGE(address + size - 1);
 8001398:	eb00 0a0b 	add.w	sl, r0, fp
 800139c:	f10a 4a78 	add.w	sl, sl, #4160749568	; 0xf8000000
 80013a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80013a4:	fbba f2f3 	udiv	r2, sl, r3
 80013a8:	fb03 aa12 	mls	sl, r3, r2, sl
  if ((data == NULL) || ((size % sizeof(uint64_t)) != 0) || ((address % sizeof(uint64_t)) != 0))
 80013ac:	2900      	cmp	r1, #0
 80013ae:	d052      	beq.n	8001456 <FLASH_IF_Write+0xde>
 80013b0:	4606      	mov	r6, r0
 80013b2:	0aed      	lsrs	r5, r5, #11
 80013b4:	ea4f 2ada 	mov.w	sl, sl, lsr #11
 80013b8:	4688      	mov	r8, r1
 80013ba:	f01b 0f07 	tst.w	fp, #7
 80013be:	d14d      	bne.n	800145c <FLASH_IF_Write+0xe4>
 80013c0:	f010 0f07 	tst.w	r0, #7
 80013c4:	d14d      	bne.n	8001462 <FLASH_IF_Write+0xea>
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80013c6:	4b30      	ldr	r3, [pc, #192]	; (8001488 <FLASH_IF_Write+0x110>)
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	db4c      	blt.n	8001468 <FLASH_IF_Write+0xf0>
  if (page_start_index != page_end_index)
 80013ce:	4555      	cmp	r5, sl
 80013d0:	d004      	beq.n	80013dc <FLASH_IF_Write+0x64>
    curr_size = FLASH_PAGE_SIZE - (address % FLASH_PAGE_SIZE);
 80013d2:	f3c0 040a 	ubfx	r4, r0, #0, #11
 80013d6:	f5c4 6400 	rsb	r4, r4, #2048	; 0x800
 80013da:	e00d      	b.n	80013f8 <FLASH_IF_Write+0x80>
  uint32_t curr_size = size;
 80013dc:	465c      	mov	r4, fp
 80013de:	e00b      	b.n	80013f8 <FLASH_IF_Write+0x80>
      if (FLASH_IF_Write_Buffer(curr_dest_addr, (uint8_t *)curr_src_addr, curr_size) != FLASH_OK)
 80013e0:	4622      	mov	r2, r4
 80013e2:	4641      	mov	r1, r8
 80013e4:	4630      	mov	r0, r6
 80013e6:	f7ff ff85 	bl	80012f4 <FLASH_IF_Write_Buffer>
 80013ea:	2800      	cmp	r0, #0
 80013ec:	d145      	bne.n	800147a <FLASH_IF_Write+0x102>
    curr_dest_addr += curr_size;
 80013ee:	4426      	add	r6, r4
    curr_src_addr += curr_size;
 80013f0:	44a0      	add	r8, r4
    curr_size = size - curr_size;
 80013f2:	ebab 0404 	sub.w	r4, fp, r4
  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 80013f6:	3501      	adds	r5, #1
 80013f8:	4555      	cmp	r5, sl
 80013fa:	d829      	bhi.n	8001450 <FLASH_IF_Write+0xd8>
    if (FLASH_IF_IsEmpty((uint8_t *)curr_dest_addr, curr_size) != FLASH_EMPTY)
 80013fc:	4621      	mov	r1, r4
 80013fe:	4630      	mov	r0, r6
 8001400:	f7ff ff21 	bl	8001246 <FLASH_IF_IsEmpty>
 8001404:	2800      	cmp	r0, #0
 8001406:	d0eb      	beq.n	80013e0 <FLASH_IF_Write+0x68>
      if (dataTempPage == NULL)
 8001408:	f1b9 0f00 	cmp.w	r9, #0
 800140c:	d02f      	beq.n	800146e <FLASH_IF_Write+0xf6>
      UTIL_MEM_cpy_8(dataTempPage, (uint8_t *)(idx * FLASH_PAGE_SIZE + FLASH_BASE), FLASH_PAGE_SIZE);
 800140e:	f505 3780 	add.w	r7, r5, #65536	; 0x10000
 8001412:	02ff      	lsls	r7, r7, #11
 8001414:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001418:	4639      	mov	r1, r7
 800141a:	4648      	mov	r0, r9
 800141c:	f011 fc2c 	bl	8012c78 <UTIL_MEM_cpy_8>
      UTIL_MEM_cpy_8(&dataTempPage[((uint32_t)curr_dest_addr) % FLASH_PAGE_SIZE], (uint8_t *)curr_src_addr, curr_size);
 8001420:	f3c6 000a 	ubfx	r0, r6, #0, #11
 8001424:	b2a2      	uxth	r2, r4
 8001426:	4641      	mov	r1, r8
 8001428:	4448      	add	r0, r9
 800142a:	f011 fc25 	bl	8012c78 <UTIL_MEM_cpy_8>
      if (FLASH_IF_EraseByPages(idx, 1, 0) != FLASH_OK)
 800142e:	2200      	movs	r2, #0
 8001430:	2101      	movs	r1, #1
 8001432:	4628      	mov	r0, r5
 8001434:	f7ff ff84 	bl	8001340 <FLASH_IF_EraseByPages>
 8001438:	b9e0      	cbnz	r0, 8001474 <FLASH_IF_Write+0xfc>
        if (FLASH_IF_Write_Buffer(idx * FLASH_PAGE_SIZE + FLASH_BASE, dataTempPage, FLASH_PAGE_SIZE) != FLASH_OK)
 800143a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800143e:	4649      	mov	r1, r9
 8001440:	4638      	mov	r0, r7
 8001442:	f7ff ff57 	bl	80012f4 <FLASH_IF_Write_Buffer>
 8001446:	2800      	cmp	r0, #0
 8001448:	d0d1      	beq.n	80013ee <FLASH_IF_Write+0x76>
          status = FLASH_WRITE_ERROR;
 800144a:	f06f 0002 	mvn.w	r0, #2
 800144e:	e000      	b.n	8001452 <FLASH_IF_Write+0xda>
  int32_t status = FLASH_OK;
 8001450:	2000      	movs	r0, #0
}
 8001452:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return FLASH_PARAM_ERROR;
 8001456:	f06f 0004 	mvn.w	r0, #4
 800145a:	e7fa      	b.n	8001452 <FLASH_IF_Write+0xda>
 800145c:	f06f 0004 	mvn.w	r0, #4
 8001460:	e7f7      	b.n	8001452 <FLASH_IF_Write+0xda>
 8001462:	f06f 0004 	mvn.w	r0, #4
 8001466:	e7f4      	b.n	8001452 <FLASH_IF_Write+0xda>
    return FLASH_LOCK_ERROR;
 8001468:	f06f 0003 	mvn.w	r0, #3
 800146c:	e7f1      	b.n	8001452 <FLASH_IF_Write+0xda>
        return FLASH_PARAM_ERROR;
 800146e:	f06f 0004 	mvn.w	r0, #4
 8001472:	e7ee      	b.n	8001452 <FLASH_IF_Write+0xda>
        status = FLASH_ERASE_ERROR;
 8001474:	f06f 0001 	mvn.w	r0, #1
 8001478:	e7eb      	b.n	8001452 <FLASH_IF_Write+0xda>
        status = FLASH_WRITE_ERROR;
 800147a:	f06f 0002 	mvn.w	r0, #2
 800147e:	e7e8      	b.n	8001452 <FLASH_IF_Write+0xda>
 8001480:	1fff7000 	.word	0x1fff7000
 8001484:	03fffc00 	.word	0x03fffc00
 8001488:	58004000 	.word	0x58004000

0800148c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800148c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001490:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001492:	2400      	movs	r4, #0
 8001494:	9403      	str	r4, [sp, #12]
 8001496:	9404      	str	r4, [sp, #16]
 8001498:	9405      	str	r4, [sp, #20]
 800149a:	9406      	str	r4, [sp, #24]
 800149c:	9407      	str	r4, [sp, #28]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800149e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014a4:	f042 0202 	orr.w	r2, r2, #2
 80014a8:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80014aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014ac:	f002 0202 	and.w	r2, r2, #2
 80014b0:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80014b2:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80014b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014b6:	f042 0204 	orr.w	r2, r2, #4
 80014ba:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80014bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014be:	f002 0204 	and.w	r2, r2, #4
 80014c2:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80014c4:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80014c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014c8:	f042 0201 	orr.w	r2, r2, #1
 80014cc:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80014ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80014d6:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|PROB2_Pin|PROB1_Pin
 80014d8:	4e26      	ldr	r6, [pc, #152]	; (8001574 <MX_GPIO_Init+0xe8>)
 80014da:	4622      	mov	r2, r4
 80014dc:	f44f 413a 	mov.w	r1, #47616	; 0xba00
 80014e0:	4630      	mov	r0, r6
 80014e2:	f003 fe79 	bl	80051d8 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80014e6:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 80014ea:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ec:	2501      	movs	r5, #1
 80014ee:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014f2:	2302      	movs	r3, #2
 80014f4:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f6:	a903      	add	r1, sp, #12
 80014f8:	4630      	mov	r0, r6
 80014fa:	f003 fd1d 	bl	8004f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin;
 80014fe:	f04f 0803 	mov.w	r8, #3
 8001502:	f8cd 800c 	str.w	r8, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001506:	f44f 1704 	mov.w	r7, #2162688	; 0x210000
 800150a:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800150c:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150e:	a903      	add	r1, sp, #12
 8001510:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001514:	f003 fd10 	bl	8004f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PROB2_Pin|PROB1_Pin;
 8001518:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800151c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001522:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001526:	a903      	add	r1, sp, #12
 8001528:	4630      	mov	r0, r6
 800152a:	f003 fd05 	bl	8004f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT3_Pin;
 800152e:	2340      	movs	r3, #64	; 0x40
 8001530:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001532:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001534:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(BUT3_GPIO_Port, &GPIO_InitStruct);
 8001536:	a903      	add	r1, sp, #12
 8001538:	480f      	ldr	r0, [pc, #60]	; (8001578 <MX_GPIO_Init+0xec>)
 800153a:	f003 fcfd 	bl	8004f38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800153e:	4622      	mov	r2, r4
 8001540:	4621      	mov	r1, r4
 8001542:	2006      	movs	r0, #6
 8001544:	f003 f898 	bl	8004678 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001548:	2006      	movs	r0, #6
 800154a:	f003 f8cd 	bl	80046e8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800154e:	4622      	mov	r2, r4
 8001550:	4621      	mov	r1, r4
 8001552:	2007      	movs	r0, #7
 8001554:	f003 f890 	bl	8004678 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001558:	2007      	movs	r0, #7
 800155a:	f003 f8c5 	bl	80046e8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800155e:	4622      	mov	r2, r4
 8001560:	4621      	mov	r1, r4
 8001562:	2016      	movs	r0, #22
 8001564:	f003 f888 	bl	8004678 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001568:	2016      	movs	r0, #22
 800156a:	f003 f8bd 	bl	80046e8 <HAL_NVIC_EnableIRQ>

}
 800156e:	b008      	add	sp, #32
 8001570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001574:	48000400 	.word	0x48000400
 8001578:	48000800 	.word	0x48000800

0800157c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800157c:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800157e:	4812      	ldr	r0, [pc, #72]	; (80015c8 <MX_I2C1_Init+0x4c>)
 8001580:	4b12      	ldr	r3, [pc, #72]	; (80015cc <MX_I2C1_Init+0x50>)
 8001582:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8001584:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <MX_I2C1_Init+0x54>)
 8001586:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800158c:	2201      	movs	r2, #1
 800158e:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001590:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001592:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001594:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001596:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001598:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800159a:	f003 ffd4 	bl	8005546 <HAL_I2C_Init>
 800159e:	b950      	cbnz	r0, 80015b6 <MX_I2C1_Init+0x3a>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015a0:	2100      	movs	r1, #0
 80015a2:	4809      	ldr	r0, [pc, #36]	; (80015c8 <MX_I2C1_Init+0x4c>)
 80015a4:	f004 f9aa 	bl	80058fc <HAL_I2CEx_ConfigAnalogFilter>
 80015a8:	b940      	cbnz	r0, 80015bc <MX_I2C1_Init+0x40>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015aa:	2100      	movs	r1, #0
 80015ac:	4806      	ldr	r0, [pc, #24]	; (80015c8 <MX_I2C1_Init+0x4c>)
 80015ae:	f004 f9d3 	bl	8005958 <HAL_I2CEx_ConfigDigitalFilter>
 80015b2:	b930      	cbnz	r0, 80015c2 <MX_I2C1_Init+0x46>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015b4:	bd08      	pop	{r3, pc}
    Error_Handler();
 80015b6:	f000 f853 	bl	8001660 <Error_Handler>
 80015ba:	e7f1      	b.n	80015a0 <MX_I2C1_Init+0x24>
    Error_Handler();
 80015bc:	f000 f850 	bl	8001660 <Error_Handler>
 80015c0:	e7f3      	b.n	80015aa <MX_I2C1_Init+0x2e>
    Error_Handler();
 80015c2:	f000 f84d 	bl	8001660 <Error_Handler>
}
 80015c6:	e7f5      	b.n	80015b4 <MX_I2C1_Init+0x38>
 80015c8:	20000200 	.word	0x20000200
 80015cc:	40005400 	.word	0x40005400
 80015d0:	20303e5d 	.word	0x20303e5d

080015d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015d4:	b510      	push	{r4, lr}
 80015d6:	b096      	sub	sp, #88	; 0x58
 80015d8:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015da:	2100      	movs	r1, #0
 80015dc:	9111      	str	r1, [sp, #68]	; 0x44
 80015de:	9112      	str	r1, [sp, #72]	; 0x48
 80015e0:	9113      	str	r1, [sp, #76]	; 0x4c
 80015e2:	9114      	str	r1, [sp, #80]	; 0x50
 80015e4:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015e6:	2238      	movs	r2, #56	; 0x38
 80015e8:	a803      	add	r0, sp, #12
 80015ea:	f012 f82b 	bl	8013644 <memset>
  if(i2cHandle->Instance==I2C1)
 80015ee:	6822      	ldr	r2, [r4, #0]
 80015f0:	4b19      	ldr	r3, [pc, #100]	; (8001658 <HAL_I2C_MspInit+0x84>)
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d001      	beq.n	80015fa <HAL_I2C_MspInit+0x26>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80015f6:	b016      	add	sp, #88	; 0x58
 80015f8:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015fa:	2340      	movs	r3, #64	; 0x40
 80015fc:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015fe:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001602:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001604:	a803      	add	r0, sp, #12
 8001606:	f004 fffd 	bl	8006604 <HAL_RCCEx_PeriphCLKConfig>
 800160a:	bb10      	cbnz	r0, 8001652 <HAL_I2C_MspInit+0x7e>
  SET_BIT(RCC->AHB2ENR, Periphs);
 800160c:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8001610:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001612:	f043 0302 	orr.w	r3, r3, #2
 8001616:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001618:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8001620:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001622:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001626:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001628:	2312      	movs	r3, #18
 800162a:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001630:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001632:	2304      	movs	r3, #4
 8001634:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001636:	a911      	add	r1, sp, #68	; 0x44
 8001638:	4808      	ldr	r0, [pc, #32]	; (800165c <HAL_I2C_MspInit+0x88>)
 800163a:	f003 fc7d 	bl	8004f38 <HAL_GPIO_Init>
  SET_BIT(RCC->APB1ENR1, Periphs);
 800163e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001640:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001644:	65a3      	str	r3, [r4, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001646:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001648:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800164c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800164e:	9b01      	ldr	r3, [sp, #4]
}
 8001650:	e7d1      	b.n	80015f6 <HAL_I2C_MspInit+0x22>
      Error_Handler();
 8001652:	f000 f805 	bl	8001660 <Error_Handler>
 8001656:	e7d9      	b.n	800160c <HAL_I2C_MspInit+0x38>
 8001658:	40005400 	.word	0x40005400
 800165c:	48000400 	.word	0x48000400

08001660 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001660:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001662:	e7fe      	b.n	8001662 <Error_Handler+0x2>

08001664 <SystemClock_Config>:
{
 8001664:	b510      	push	{r4, lr}
 8001666:	b09a      	sub	sp, #104	; 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001668:	2248      	movs	r2, #72	; 0x48
 800166a:	2100      	movs	r1, #0
 800166c:	a808      	add	r0, sp, #32
 800166e:	f011 ffe9 	bl	8013644 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001672:	2400      	movs	r4, #0
 8001674:	9401      	str	r4, [sp, #4]
 8001676:	9402      	str	r4, [sp, #8]
 8001678:	9403      	str	r4, [sp, #12]
 800167a:	9404      	str	r4, [sp, #16]
 800167c:	9405      	str	r4, [sp, #20]
 800167e:	9406      	str	r4, [sp, #24]
 8001680:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 8001682:	f004 f995 	bl	80059b0 <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001686:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800168a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800168e:	f023 0318 	bic.w	r3, r3, #24
 8001692:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001696:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800169a:	6813      	ldr	r3, [r2, #0]
 800169c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016a4:	6013      	str	r3, [r2, #0]
 80016a6:	6813      	ldr	r3, [r2, #0]
 80016a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80016b0:	2324      	movs	r3, #36	; 0x24
 80016b2:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80016b4:	2381      	movs	r3, #129	; 0x81
 80016b6:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80016b8:	2301      	movs	r3, #1
 80016ba:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80016bc:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80016be:	23b0      	movs	r3, #176	; 0xb0
 80016c0:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016c2:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016c4:	a808      	add	r0, sp, #32
 80016c6:	f004 fb0d 	bl	8005ce4 <HAL_RCC_OscConfig>
 80016ca:	b970      	cbnz	r0, 80016ea <SystemClock_Config+0x86>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80016cc:	234f      	movs	r3, #79	; 0x4f
 80016ce:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80016d0:	2300      	movs	r3, #0
 80016d2:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d4:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016d6:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016d8:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80016da:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016dc:	2102      	movs	r1, #2
 80016de:	a801      	add	r0, sp, #4
 80016e0:	f004 fe3c 	bl	800635c <HAL_RCC_ClockConfig>
 80016e4:	b918      	cbnz	r0, 80016ee <SystemClock_Config+0x8a>
}
 80016e6:	b01a      	add	sp, #104	; 0x68
 80016e8:	bd10      	pop	{r4, pc}
    Error_Handler();
 80016ea:	f7ff ffb9 	bl	8001660 <Error_Handler>
    Error_Handler();
 80016ee:	f7ff ffb7 	bl	8001660 <Error_Handler>

080016f2 <main>:
{
 80016f2:	b508      	push	{r3, lr}
  HAL_Init();
 80016f4:	f002 fa7c 	bl	8003bf0 <HAL_Init>
  SystemClock_Config();
 80016f8:	f7ff ffb4 	bl	8001664 <SystemClock_Config>
  MX_GPIO_Init();
 80016fc:	f7ff fec6 	bl	800148c <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8001700:	f000 fe70 	bl	80023e4 <MX_LoRaWAN_Init>
  MX_I2C1_Init();
 8001704:	f7ff ff3a 	bl	800157c <MX_I2C1_Init>
    MX_LoRaWAN_Process();
 8001708:	f000 fe72 	bl	80023f0 <MX_LoRaWAN_Process>
  while (1)
 800170c:	e7fc      	b.n	8001708 <main+0x16>
	...

08001710 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001710:	b500      	push	{lr}
 8001712:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001714:	222c      	movs	r2, #44	; 0x2c
 8001716:	2100      	movs	r1, #0
 8001718:	a801      	add	r0, sp, #4
 800171a:	f011 ff93 	bl	8013644 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800171e:	4819      	ldr	r0, [pc, #100]	; (8001784 <MX_RTC_Init+0x74>)
 8001720:	4b19      	ldr	r3, [pc, #100]	; (8001788 <MX_RTC_Init+0x78>)
 8001722:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001724:	231f      	movs	r3, #31
 8001726:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001728:	2300      	movs	r3, #0
 800172a:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800172c:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800172e:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001730:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001734:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001736:	6203      	str	r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001738:	f44f 7380 	mov.w	r3, #256	; 0x100
 800173c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800173e:	f005 f973 	bl	8006a28 <HAL_RTC_Init>
 8001742:	b9a8      	cbnz	r0, 8001770 <MX_RTC_Init+0x60>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001744:	480f      	ldr	r0, [pc, #60]	; (8001784 <MX_RTC_Init+0x74>)
 8001746:	f005 faa9 	bl	8006c9c <HAL_RTCEx_SetSSRU_IT>
 800174a:	b9a0      	cbnz	r0, 8001776 <MX_RTC_Init+0x66>
    Error_Handler();
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800174c:	2200      	movs	r2, #0
 800174e:	9208      	str	r2, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001750:	9202      	str	r2, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001752:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001754:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001758:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800175a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800175e:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001760:	a901      	add	r1, sp, #4
 8001762:	4808      	ldr	r0, [pc, #32]	; (8001784 <MX_RTC_Init+0x74>)
 8001764:	f005 f9be 	bl	8006ae4 <HAL_RTC_SetAlarm_IT>
 8001768:	b940      	cbnz	r0, 800177c <MX_RTC_Init+0x6c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800176a:	b00d      	add	sp, #52	; 0x34
 800176c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001770:	f7ff ff76 	bl	8001660 <Error_Handler>
 8001774:	e7e6      	b.n	8001744 <MX_RTC_Init+0x34>
    Error_Handler();
 8001776:	f7ff ff73 	bl	8001660 <Error_Handler>
 800177a:	e7e7      	b.n	800174c <MX_RTC_Init+0x3c>
    Error_Handler();
 800177c:	f7ff ff70 	bl	8001660 <Error_Handler>
}
 8001780:	e7f3      	b.n	800176a <MX_RTC_Init+0x5a>
 8001782:	bf00      	nop
 8001784:	2000024c 	.word	0x2000024c
 8001788:	40002800 	.word	0x40002800

0800178c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800178c:	b510      	push	{r4, lr}
 800178e:	b090      	sub	sp, #64	; 0x40
 8001790:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001792:	2238      	movs	r2, #56	; 0x38
 8001794:	2100      	movs	r1, #0
 8001796:	a802      	add	r0, sp, #8
 8001798:	f011 ff54 	bl	8013644 <memset>
  if(rtcHandle->Instance==RTC)
 800179c:	6822      	ldr	r2, [r4, #0]
 800179e:	4b1a      	ldr	r3, [pc, #104]	; (8001808 <HAL_RTC_MspInit+0x7c>)
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d001      	beq.n	80017a8 <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80017a4:	b010      	add	sp, #64	; 0x40
 80017a6:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80017a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017ac:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80017ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017b2:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017b4:	a802      	add	r0, sp, #8
 80017b6:	f004 ff25 	bl	8006604 <HAL_RCCEx_PeriphCLKConfig>
 80017ba:	bb08      	cbnz	r0, 8001800 <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80017bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017c0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80017c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 80017cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80017ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80017d2:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80017d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017da:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80017dc:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80017de:	2200      	movs	r2, #0
 80017e0:	4611      	mov	r1, r2
 80017e2:	2002      	movs	r0, #2
 80017e4:	f002 ff48 	bl	8004678 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 80017e8:	2002      	movs	r0, #2
 80017ea:	f002 ff7d 	bl	80046e8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80017ee:	2200      	movs	r2, #0
 80017f0:	4611      	mov	r1, r2
 80017f2:	202a      	movs	r0, #42	; 0x2a
 80017f4:	f002 ff40 	bl	8004678 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80017f8:	202a      	movs	r0, #42	; 0x2a
 80017fa:	f002 ff75 	bl	80046e8 <HAL_NVIC_EnableIRQ>
}
 80017fe:	e7d1      	b.n	80017a4 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 8001800:	f7ff ff2e 	bl	8001660 <Error_Handler>
 8001804:	e7da      	b.n	80017bc <HAL_RTC_MspInit+0x30>
 8001806:	bf00      	nop
 8001808:	40002800 	.word	0x40002800

0800180c <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 800180c:	4770      	bx	lr

0800180e <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 800180e:	4770      	bx	lr

08001810 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001810:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001812:	f002 fa03 	bl	8003c1c <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001816:	2001      	movs	r0, #1
 8001818:	4b02      	ldr	r3, [pc, #8]	; (8001824 <PWR_EnterStopMode+0x14>)
 800181a:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 800181e:	f004 f92b 	bl	8005a78 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001822:	bd08      	pop	{r3, pc}
 8001824:	58000400 	.word	0x58000400

08001828 <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 8001828:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 800182a:	f002 f9fe 	bl	8003c2a <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 800182e:	bd08      	pop	{r3, pc}

08001830 <PWR_ExitStopMode>:
{
 8001830:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 8001832:	f002 f9fa 	bl	8003c2a <HAL_ResumeTick>
  vcom_Resume();
 8001836:	f000 fd95 	bl	8002364 <vcom_Resume>
}
 800183a:	bd08      	pop	{r3, pc}

0800183c <PWR_EnterSleepMode>:
{
 800183c:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 800183e:	f002 f9ed 	bl	8003c1c <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001842:	2101      	movs	r1, #1
 8001844:	2000      	movs	r0, #0
 8001846:	f004 f8bb 	bl	80059c0 <HAL_PWR_EnterSLEEPMode>
}
 800184a:	bd08      	pop	{r3, pc}

0800184c <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800184c:	4770      	bx	lr

0800184e <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800184e:	e7fe      	b.n	800184e <NMI_Handler>

08001850 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001850:	e7fe      	b.n	8001850 <HardFault_Handler>

08001852 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001852:	e7fe      	b.n	8001852 <MemManage_Handler>

08001854 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001854:	e7fe      	b.n	8001854 <BusFault_Handler>

08001856 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001856:	e7fe      	b.n	8001856 <UsageFault_Handler>

08001858 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001858:	4770      	bx	lr

0800185a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800185a:	4770      	bx	lr

0800185c <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800185c:	4770      	bx	lr

0800185e <SysTick_Handler>:

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800185e:	4770      	bx	lr

08001860 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001860:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001862:	4802      	ldr	r0, [pc, #8]	; (800186c <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 8001864:	f005 fa46 	bl	8006cf4 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001868:	bd08      	pop	{r3, pc}
 800186a:	bf00      	nop
 800186c:	2000024c 	.word	0x2000024c

08001870 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001870:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8001872:	2001      	movs	r0, #1
 8001874:	f003 fcbe 	bl	80051f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001878:	bd08      	pop	{r3, pc}

0800187a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800187a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT2_Pin);
 800187c:	2002      	movs	r0, #2
 800187e:	f003 fcb9 	bl	80051f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001882:	bd08      	pop	{r3, pc}

08001884 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001884:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001886:	4802      	ldr	r0, [pc, #8]	; (8001890 <DMA1_Channel5_IRQHandler+0xc>)
 8001888:	f003 f94c 	bl	8004b24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800188c:	bd08      	pop	{r3, pc}
 800188e:	bf00      	nop
 8001890:	200003d0 	.word	0x200003d0

08001894 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 8001894:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT3_Pin);
 8001896:	2040      	movs	r0, #64	; 0x40
 8001898:	f003 fcac 	bl	80051f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800189c:	bd08      	pop	{r3, pc}
	...

080018a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 80018a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018a2:	4802      	ldr	r0, [pc, #8]	; (80018ac <USART2_IRQHandler+0xc>)
 80018a4:	f005 fee2 	bl	800766c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018a8:	bd08      	pop	{r3, pc}
 80018aa:	bf00      	nop
 80018ac:	20000430 	.word	0x20000430

080018b0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 80018b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80018b2:	4802      	ldr	r0, [pc, #8]	; (80018bc <RTC_Alarm_IRQHandler+0xc>)
 80018b4:	f005 f830 	bl	8006918 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80018b8:	bd08      	pop	{r3, pc}
 80018ba:	bf00      	nop
 80018bc:	2000024c 	.word	0x2000024c

080018c0 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80018c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80018c2:	4802      	ldr	r0, [pc, #8]	; (80018cc <SUBGHZ_Radio_IRQHandler+0xc>)
 80018c4:	f005 fcc0 	bl	8007248 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80018c8:	bd08      	pop	{r3, pc}
 80018ca:	bf00      	nop
 80018cc:	20000284 	.word	0x20000284

080018d0 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80018d0:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80018d2:	4805      	ldr	r0, [pc, #20]	; (80018e8 <MX_SUBGHZ_Init+0x18>)
 80018d4:	2308      	movs	r3, #8
 80018d6:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80018d8:	f005 fa42 	bl	8006d60 <HAL_SUBGHZ_Init>
 80018dc:	b900      	cbnz	r0, 80018e0 <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80018de:	bd08      	pop	{r3, pc}
    Error_Handler();
 80018e0:	f7ff febe 	bl	8001660 <Error_Handler>
}
 80018e4:	e7fb      	b.n	80018de <MX_SUBGHZ_Init+0xe>
 80018e6:	bf00      	nop
 80018e8:	20000284 	.word	0x20000284

080018ec <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80018ec:	b500      	push	{lr}
 80018ee:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80018f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018f4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80018f6:	f042 0201 	orr.w	r2, r2, #1
 80018fa:	665a      	str	r2, [r3, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80018fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001904:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001906:	2200      	movs	r2, #0
 8001908:	4611      	mov	r1, r2
 800190a:	2032      	movs	r0, #50	; 0x32
 800190c:	f002 feb4 	bl	8004678 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001910:	2032      	movs	r0, #50	; 0x32
 8001912:	f002 fee9 	bl	80046e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001916:	b003      	add	sp, #12
 8001918:	f85d fb04 	ldr.w	pc, [sp], #4

0800191c <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 800191c:	b40c      	push	{r2, r3}
 800191e:	b500      	push	{lr}
 8001920:	b083      	sub	sp, #12
 8001922:	ab04      	add	r3, sp, #16
 8001924:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001928:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 800192a:	f011 fd7f 	bl	801342c <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 800192e:	b003      	add	sp, #12
 8001930:	f85d eb04 	ldr.w	lr, [sp], #4
 8001934:	b002      	add	sp, #8
 8001936:	4770      	bx	lr

08001938 <TimestampNow>:
{
 8001938:	b530      	push	{r4, r5, lr}
 800193a:	b085      	sub	sp, #20
 800193c:	4604      	mov	r4, r0
 800193e:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 8001940:	a802      	add	r0, sp, #8
 8001942:	f011 fae9 	bl	8012f18 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001946:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800194a:	9300      	str	r3, [sp, #0]
 800194c:	9b02      	ldr	r3, [sp, #8]
 800194e:	4a05      	ldr	r2, [pc, #20]	; (8001964 <TimestampNow+0x2c>)
 8001950:	2110      	movs	r1, #16
 8001952:	4620      	mov	r0, r4
 8001954:	f7ff ffe2 	bl	800191c <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001958:	4620      	mov	r0, r4
 800195a:	f7fe fc11 	bl	8000180 <strlen>
 800195e:	8028      	strh	r0, [r5, #0]
}
 8001960:	b005      	add	sp, #20
 8001962:	bd30      	pop	{r4, r5, pc}
 8001964:	08014150 	.word	0x08014150

08001968 <SystemApp_Init>:
{
 8001968:	b510      	push	{r4, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800196a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800196e:	6893      	ldr	r3, [r2, #8]
 8001970:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001974:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 8001976:	f011 fb53 	bl	8013020 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 800197a:	2401      	movs	r4, #1
 800197c:	4b0d      	ldr	r3, [pc, #52]	; (80019b4 <SystemApp_Init+0x4c>)
 800197e:	701c      	strb	r4, [r3, #0]
  DBG_Init();
 8001980:	f000 f8b8 	bl	8001af4 <DBG_Init>
  UTIL_ADV_TRACE_Init();
 8001984:	f010 ffee 	bl	8012964 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001988:	480b      	ldr	r0, [pc, #44]	; (80019b8 <SystemApp_Init+0x50>)
 800198a:	f011 f805 	bl	8012998 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800198e:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <SystemApp_Init+0x54>)
 8001990:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001994:	611a      	str	r2, [r3, #16]
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001996:	2002      	movs	r0, #2
 8001998:	f011 f804 	bl	80129a4 <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 800199c:	f7ff fbb2 	bl	8001104 <SYS_InitMeasurement>
  EnvSensors_Init();
 80019a0:	f000 f9a0 	bl	8001ce4 <EnvSensors_Init>
  UTIL_LPM_Init();
 80019a4:	f011 f90e 	bl	8012bc4 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80019a8:	4621      	mov	r1, r4
 80019aa:	4620      	mov	r0, r4
 80019ac:	f011 f92a 	bl	8012c04 <UTIL_LPM_SetOffMode>
}
 80019b0:	bd10      	pop	{r4, pc}
 80019b2:	bf00      	nop
 80019b4:	20000290 	.word	0x20000290
 80019b8:	08001939 	.word	0x08001939
 80019bc:	58004000 	.word	0x58004000

080019c0 <UTIL_SEQ_Idle>:
{
 80019c0:	b508      	push	{r3, lr}
  UTIL_LPM_EnterLowPower();
 80019c2:	f011 f935 	bl	8012c30 <UTIL_LPM_EnterLowPower>
}
 80019c6:	bd08      	pop	{r3, pc}

080019c8 <GetBatteryLevel>:
{
 80019c8:	b508      	push	{r3, lr}
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 80019ca:	f7ff fba3 	bl	8001114 <SYS_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 80019ce:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80019d2:	4298      	cmp	r0, r3
 80019d4:	d80d      	bhi.n	80019f2 <GetBatteryLevel+0x2a>
  else if (batteryLevelmV < VDD_MIN)
 80019d6:	f5b0 6fe1 	cmp.w	r0, #1800	; 0x708
 80019da:	d30c      	bcc.n	80019f6 <GetBatteryLevel+0x2e>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80019dc:	f5a0 60e1 	sub.w	r0, r0, #1800	; 0x708
 80019e0:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
 80019e4:	0040      	lsls	r0, r0, #1
 80019e6:	4b05      	ldr	r3, [pc, #20]	; (80019fc <GetBatteryLevel+0x34>)
 80019e8:	fba3 3000 	umull	r3, r0, r3, r0
 80019ec:	f3c0 10c7 	ubfx	r0, r0, #7, #8
 80019f0:	e000      	b.n	80019f4 <GetBatteryLevel+0x2c>
    batteryLevel = LORAWAN_MAX_BAT;
 80019f2:	20fe      	movs	r0, #254	; 0xfe
}
 80019f4:	bd08      	pop	{r3, pc}
    batteryLevel = 0;
 80019f6:	2000      	movs	r0, #0
 80019f8:	e7fc      	b.n	80019f4 <GetBatteryLevel+0x2c>
 80019fa:	bf00      	nop
 80019fc:	1b4e81b5 	.word	0x1b4e81b5

08001a00 <GetTemperatureLevel>:
{
 8001a00:	b500      	push	{lr}
 8001a02:	b087      	sub	sp, #28
  EnvSensors_Read(&sensor_data);
 8001a04:	4668      	mov	r0, sp
 8001a06:	f000 f9f1 	bl	8001dec <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8001a0a:	9801      	ldr	r0, [sp, #4]
 8001a0c:	f7ff f8da 	bl	8000bc4 <__aeabi_f2iz>
}
 8001a10:	b200      	sxth	r0, r0
 8001a12:	b007      	add	sp, #28
 8001a14:	f85d fb04 	ldr.w	pc, [sp], #4

08001a18 <GetUniqueId>:
{
 8001a18:	b538      	push	{r3, r4, r5, lr}
 8001a1a:	4604      	mov	r4, r0
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001a1c:	4b18      	ldr	r3, [pc, #96]	; (8001a80 <GetUniqueId+0x68>)
 8001a1e:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a26:	d013      	beq.n	8001a50 <GetUniqueId+0x38>
    id[7] = val & 0xFF;
 8001a28:	71c3      	strb	r3, [r0, #7]
    id[6] = (val >> 8) & 0xFF;
 8001a2a:	0a1a      	lsrs	r2, r3, #8
 8001a2c:	7182      	strb	r2, [r0, #6]
    id[5] = (val >> 16) & 0xFF;
 8001a2e:	0c1a      	lsrs	r2, r3, #16
 8001a30:	7142      	strb	r2, [r0, #5]
    id[4] = (val >> 24) & 0xFF;
 8001a32:	0e1b      	lsrs	r3, r3, #24
 8001a34:	7103      	strb	r3, [r0, #4]
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001a36:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <GetUniqueId+0x68>)
 8001a38:	f8d3 2584 	ldr.w	r2, [r3, #1412]	; 0x584
    id[3] = val & 0xFF;
 8001a3c:	70c2      	strb	r2, [r0, #3]
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001a3e:	f8d3 3584 	ldr.w	r3, [r3, #1412]	; 0x584
 8001a42:	0a1a      	lsrs	r2, r3, #8
    id[2] = val & 0xFF;
 8001a44:	7082      	strb	r2, [r0, #2]
    id[1] = (val >> 8) & 0xFF;
 8001a46:	0c1a      	lsrs	r2, r3, #16
 8001a48:	7042      	strb	r2, [r0, #1]
    id[0] = (val >> 16) & 0xFF;
 8001a4a:	0e1b      	lsrs	r3, r3, #24
 8001a4c:	7003      	strb	r3, [r0, #0]
}
 8001a4e:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001a50:	f002 f8f2 	bl	8003c38 <HAL_GetUIDw0>
 8001a54:	4605      	mov	r5, r0
 8001a56:	f002 f8fb 	bl	8003c50 <HAL_GetUIDw2>
 8001a5a:	4405      	add	r5, r0
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001a5c:	f002 f8f2 	bl	8003c44 <HAL_GetUIDw1>
    id[7] = (ID_1_3_val) >> 24;
 8001a60:	0e2b      	lsrs	r3, r5, #24
 8001a62:	71e3      	strb	r3, [r4, #7]
    id[6] = (ID_1_3_val) >> 16;
 8001a64:	0c2b      	lsrs	r3, r5, #16
 8001a66:	71a3      	strb	r3, [r4, #6]
    id[5] = (ID_1_3_val) >> 8;
 8001a68:	0a2b      	lsrs	r3, r5, #8
 8001a6a:	7163      	strb	r3, [r4, #5]
    id[4] = (ID_1_3_val);
 8001a6c:	7125      	strb	r5, [r4, #4]
    id[3] = (ID_2_val) >> 24;
 8001a6e:	0e03      	lsrs	r3, r0, #24
 8001a70:	70e3      	strb	r3, [r4, #3]
    id[2] = (ID_2_val) >> 16;
 8001a72:	0c03      	lsrs	r3, r0, #16
 8001a74:	70a3      	strb	r3, [r4, #2]
    id[1] = (ID_2_val) >> 8;
 8001a76:	0a03      	lsrs	r3, r0, #8
 8001a78:	7063      	strb	r3, [r4, #1]
    id[0] = (ID_2_val);
 8001a7a:	7020      	strb	r0, [r4, #0]
 8001a7c:	e7e7      	b.n	8001a4e <GetUniqueId+0x36>
 8001a7e:	bf00      	nop
 8001a80:	1fff7000 	.word	0x1fff7000

08001a84 <GetDevAddr>:
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001a84:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <GetDevAddr+0x24>)
 8001a86:	f8d3 0580 	ldr.w	r0, [r3, #1408]	; 0x580
  if (val == 0xFFFFFFFF)
 8001a8a:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001a8e:	d000      	beq.n	8001a92 <GetDevAddr+0xe>
}
 8001a90:	4770      	bx	lr
{
 8001a92:	b510      	push	{r4, lr}
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001a94:	f002 f8d0 	bl	8003c38 <HAL_GetUIDw0>
 8001a98:	4604      	mov	r4, r0
 8001a9a:	f002 f8d3 	bl	8003c44 <HAL_GetUIDw1>
 8001a9e:	4044      	eors	r4, r0
 8001aa0:	f002 f8d6 	bl	8003c50 <HAL_GetUIDw2>
 8001aa4:	4060      	eors	r0, r4
}
 8001aa6:	bd10      	pop	{r4, pc}
 8001aa8:	1fff7000 	.word	0x1fff7000

08001aac <UTIL_ADV_TRACE_PreSendHook>:
{
 8001aac:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001aae:	2101      	movs	r1, #1
 8001ab0:	2002      	movs	r0, #2
 8001ab2:	f011 f891 	bl	8012bd8 <UTIL_LPM_SetStopMode>
}
 8001ab6:	bd08      	pop	{r3, pc}

08001ab8 <UTIL_ADV_TRACE_PostSendHook>:
{
 8001ab8:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001aba:	2100      	movs	r1, #0
 8001abc:	2002      	movs	r0, #2
 8001abe:	f011 f88b 	bl	8012bd8 <UTIL_LPM_SetStopMode>
}
 8001ac2:	bd08      	pop	{r3, pc}

08001ac4 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	4770      	bx	lr

08001ac8 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001ac8:	b508      	push	{r3, lr}
  uint32_t ret = 0;
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8001aca:	4b04      	ldr	r3, [pc, #16]	; (8001adc <HAL_GetTick+0x14>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	b90b      	cbnz	r3, 8001ad4 <HAL_GetTick+0xc>
  uint32_t ret = 0;
 8001ad0:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
}
 8001ad2:	bd08      	pop	{r3, pc}
    ret = TIMER_IF_GetTimerValue();
 8001ad4:	f000 fa10 	bl	8001ef8 <TIMER_IF_GetTimerValue>
 8001ad8:	e7fb      	b.n	8001ad2 <HAL_GetTick+0xa>
 8001ada:	bf00      	nop
 8001adc:	20000290 	.word	0x20000290

08001ae0 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001ae0:	b500      	push	{lr}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001ae6:	9801      	ldr	r0, [sp, #4]
 8001ae8:	f000 faec 	bl	80020c4 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001aec:	b003      	add	sp, #12
 8001aee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001af4 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8001af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001af6:	b089      	sub	sp, #36	; 0x24
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001af8:	4a22      	ldr	r2, [pc, #136]	; (8001b84 <DBG_Init+0x90>)
 8001afa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001afe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8001b06:	f002 f8a9 	bl	8003c5c <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8001b0a:	f002 f8af 	bl	8003c6c <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8001b0e:	f002 f8b5 	bl	8003c7c <HAL_DBGMCU_EnableDBGStandbyMode>
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8001b12:	2400      	movs	r4, #0
 8001b14:	9403      	str	r4, [sp, #12]
 8001b16:	9404      	str	r4, [sp, #16]
 8001b18:	9405      	str	r4, [sp, #20]
 8001b1a:	9406      	str	r4, [sp, #24]
 8001b1c:	9407      	str	r4, [sp, #28]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b22:	2303      	movs	r3, #3
 8001b24:	9306      	str	r3, [sp, #24]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b2c:	f042 0202 	orr.w	r2, r2, #2
 8001b30:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b34:	f002 0202 	and.w	r2, r2, #2
 8001b38:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001b3a:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b3e:	f042 0202 	orr.w	r2, r2, #2
 8001b42:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001b4c:	9b01      	ldr	r3, [sp, #4]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
  PROBE_LINE2_CLK_ENABLE();

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8001b4e:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8001b52:	9703      	str	r7, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8001b54:	4d0c      	ldr	r5, [pc, #48]	; (8001b88 <DBG_Init+0x94>)
 8001b56:	a903      	add	r1, sp, #12
 8001b58:	4628      	mov	r0, r5
 8001b5a:	f003 f9ed 	bl	8004f38 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8001b5e:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 8001b62:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8001b64:	a903      	add	r1, sp, #12
 8001b66:	4628      	mov	r0, r5
 8001b68:	f003 f9e6 	bl	8004f38 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8001b6c:	4622      	mov	r2, r4
 8001b6e:	4639      	mov	r1, r7
 8001b70:	4628      	mov	r0, r5
 8001b72:	f003 fb31 	bl	80051d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8001b76:	4622      	mov	r2, r4
 8001b78:	4631      	mov	r1, r6
 8001b7a:	4628      	mov	r0, r5
 8001b7c:	f003 fb2c 	bl	80051d8 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8001b80:	b009      	add	sp, #36	; 0x24
 8001b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b84:	58000800 	.word	0x58000800
 8001b88:	48000400 	.word	0x48000400

08001b8c <bme680I2cRead>:
/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
/* USER CODE BEGIN PrFD */

int8_t bme680I2cRead(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8001b8c:	b570      	push	{r4, r5, r6, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	4604      	mov	r4, r0
 8001b92:	4616      	mov	r6, r2
 8001b94:	461d      	mov	r5, r3
 8001b96:	f88d 100f 	strb.w	r1, [sp, #15]
	// read I2C line

	int8_t result;
	static const size_t I2C_READ_TIMEOUT = 250;

	if (HAL_I2C_Master_Transmit(&hi2c1, (dev_id << 1), &reg_addr, 1, I2C_READ_TIMEOUT) != HAL_OK) {
 8001b9a:	23fa      	movs	r3, #250	; 0xfa
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	f10d 020f 	add.w	r2, sp, #15
 8001ba4:	fa00 f103 	lsl.w	r1, r0, r3
 8001ba8:	480b      	ldr	r0, [pc, #44]	; (8001bd8 <bme680I2cRead+0x4c>)
 8001baa:	f003 fd2b 	bl	8005604 <HAL_I2C_Master_Transmit>
 8001bae:	b980      	cbnz	r0, 8001bd2 <bme680I2cRead+0x46>
		result = -1;
	} else if (HAL_I2C_Master_Receive (&hi2c1, (dev_id << 1) | 0x01, reg_data, len, I2C_READ_TIMEOUT) != HAL_OK) {
 8001bb0:	0061      	lsls	r1, r4, #1
 8001bb2:	23fa      	movs	r3, #250	; 0xfa
 8001bb4:	9300      	str	r3, [sp, #0]
 8001bb6:	462b      	mov	r3, r5
 8001bb8:	4632      	mov	r2, r6
 8001bba:	f041 0101 	orr.w	r1, r1, #1
 8001bbe:	4806      	ldr	r0, [pc, #24]	; (8001bd8 <bme680I2cRead+0x4c>)
 8001bc0:	f003 fdde 	bl	8005780 <HAL_I2C_Master_Receive>
 8001bc4:	b910      	cbnz	r0, 8001bcc <bme680I2cRead+0x40>
		result = -1;
	} else {
		result = 0;
 8001bc6:	2000      	movs	r0, #0
	}

	return result;

}
 8001bc8:	b004      	add	sp, #16
 8001bca:	bd70      	pop	{r4, r5, r6, pc}
		result = -1;
 8001bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd0:	e7fa      	b.n	8001bc8 <bme680I2cRead+0x3c>
		result = -1;
 8001bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd6:	e7f7      	b.n	8001bc8 <bme680I2cRead+0x3c>
 8001bd8:	20000200 	.word	0x20000200

08001bdc <bme680I2cWrite>:

int8_t bme680I2cWrite(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8001bdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001be0:	b083      	sub	sp, #12
 8001be2:	4606      	mov	r6, r0
 8001be4:	4688      	mov	r8, r1
 8001be6:	4617      	mov	r7, r2
 8001be8:	461d      	mov	r5, r3
  // write to I2C line
  int8_t result;
  int8_t *buf;

  // Allocate and load I2C transmit buffer
  buf = malloc(len + 1);
 8001bea:	f103 0901 	add.w	r9, r3, #1
 8001bee:	4648      	mov	r0, r9
 8001bf0:	f011 fd0a 	bl	8013608 <malloc>
 8001bf4:	4604      	mov	r4, r0
  buf[0] = reg_addr;
 8001bf6:	f800 8b01 	strb.w	r8, [r0], #1
  memcpy(buf + 1, reg_data, len);
 8001bfa:	462a      	mov	r2, r5
 8001bfc:	4639      	mov	r1, r7
 8001bfe:	f011 fd13 	bl	8013628 <memcpy>

  if (HAL_I2C_Master_Transmit(&hi2c1, (dev_id << 1), (uint8_t *) buf, len + 1, HAL_MAX_DELAY) != HAL_OK) {
 8001c02:	f04f 33ff 	mov.w	r3, #4294967295
 8001c06:	9300      	str	r3, [sp, #0]
 8001c08:	fa1f f389 	uxth.w	r3, r9
 8001c0c:	4622      	mov	r2, r4
 8001c0e:	0071      	lsls	r1, r6, #1
 8001c10:	4807      	ldr	r0, [pc, #28]	; (8001c30 <bme680I2cWrite+0x54>)
 8001c12:	f003 fcf7 	bl	8005604 <HAL_I2C_Master_Transmit>
 8001c16:	b938      	cbnz	r0, 8001c28 <bme680I2cWrite+0x4c>
    result = -1;
  } else {
    result = 0;
 8001c18:	2500      	movs	r5, #0
  }

  free(buf);
 8001c1a:	4620      	mov	r0, r4
 8001c1c:	f011 fcfc 	bl	8013618 <free>
  return result;
}
 8001c20:	4628      	mov	r0, r5
 8001c22:	b003      	add	sp, #12
 8001c24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    result = -1;
 8001c28:	f04f 35ff 	mov.w	r5, #4294967295
 8001c2c:	e7f5      	b.n	8001c1a <bme680I2cWrite+0x3e>
 8001c2e:	bf00      	nop
 8001c30:	20000200 	.word	0x20000200

08001c34 <bme680Init>:

bme bme680Init(struct bme680_dev gas_sensor, int8_t rslt, bme bmes) {
 8001c34:	b084      	sub	sp, #16
 8001c36:	b570      	push	{r4, r5, r6, lr}
 8001c38:	b082      	sub	sp, #8
 8001c3a:	4605      	mov	r5, r0
 8001c3c:	ac07      	add	r4, sp, #28
 8001c3e:	e884 000e 	stmia.w	r4, {r1, r2, r3}

  // ----------------------Configure the BME680 driver-----------------------------

  gas_sensor.dev_id = BME680_I2C_ADDR_PRIMARY;
 8001c42:	2376      	movs	r3, #118	; 0x76
 8001c44:	f88d 301d 	strb.w	r3, [sp, #29]
  gas_sensor.intf = BME680_I2C_INTF;
 8001c48:	2601      	movs	r6, #1
 8001c4a:	f88d 601e 	strb.w	r6, [sp, #30]
  gas_sensor.read = bme680I2cRead;
 8001c4e:	4b22      	ldr	r3, [pc, #136]	; (8001cd8 <bme680Init+0xa4>)
 8001c50:	9319      	str	r3, [sp, #100]	; 0x64
  gas_sensor.write = bme680I2cWrite;
 8001c52:	4b22      	ldr	r3, [pc, #136]	; (8001cdc <bme680Init+0xa8>)
 8001c54:	931a      	str	r3, [sp, #104]	; 0x68
  gas_sensor.delay_ms = HAL_Delay;
 8001c56:	4b22      	ldr	r3, [pc, #136]	; (8001ce0 <bme680Init+0xac>)
 8001c58:	931b      	str	r3, [sp, #108]	; 0x6c
  gas_sensor.amb_temp = 25;
 8001c5a:	2319      	movs	r3, #25
 8001c5c:	f88d 3020 	strb.w	r3, [sp, #32]

  // Initialize the driver
  if (bme680_init(&gas_sensor) != BME680_OK) {
 8001c60:	4620      	mov	r0, r4
 8001c62:	f001 fd29 	bl	80036b8 <bme680_init>
	//char bme_msg[] = "BME680 Initialized and Ready\r\n";
	//DebugSerialOutput(bme_msg);
  }

  // Select desired over sampling rates
  gas_sensor.tph_sett.os_hum = BME680_OS_2X;
 8001c66:	2302      	movs	r3, #2
 8001c68:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
  gas_sensor.tph_sett.os_pres = BME680_OS_4X;
 8001c6c:	2203      	movs	r2, #3
 8001c6e:	f88d 2056 	strb.w	r2, [sp, #86]	; 0x56
  gas_sensor.tph_sett.os_temp = BME680_OS_8X;
 8001c72:	2204      	movs	r2, #4
 8001c74:	f88d 2055 	strb.w	r2, [sp, #85]	; 0x55
  gas_sensor.tph_sett.filter = BME680_FILTER_SIZE_3;
 8001c78:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57

  /* Set the remaining gas sensor settings and link the heating profile */
  gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
 8001c7c:	f88d 605a 	strb.w	r6, [sp, #90]	; 0x5a
  /* Create a ramp heat waveform in 3 steps */
  gas_sensor.gas_sett.heatr_temp = 320; /* degree Celsius */
 8001c80:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001c84:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
  gas_sensor.gas_sett.heatr_dur = 150; /* milliseconds */
 8001c88:	2396      	movs	r3, #150	; 0x96
 8001c8a:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e

  // Set sensor to "always on"
  gas_sensor.power_mode = BME680_FORCED_MODE;
 8001c8e:	f88d 6060 	strb.w	r6, [sp, #96]	; 0x60

  // Set over sampling settings
  uint8_t required_settings = (BME680_OST_SEL | BME680_OSP_SEL | BME680_OSH_SEL | BME680_FILTER_SEL | BME680_GAS_SENSOR_SEL);
  rslt = bme680_set_sensor_settings(required_settings, &gas_sensor);
 8001c92:	4621      	mov	r1, r4
 8001c94:	20df      	movs	r0, #223	; 0xdf
 8001c96:	f001 fd74 	bl	8003782 <bme680_set_sensor_settings>

  // Set sensor mode
  rslt = bme680_set_sensor_mode(&gas_sensor);
 8001c9a:	4620      	mov	r0, r4
 8001c9c:	f001 fd29 	bl	80036f2 <bme680_set_sensor_mode>
 8001ca0:	4606      	mov	r6, r0

  // Query minimum sampling period
  uint16_t min_sampling_period;
  bme680_get_profile_dur(&min_sampling_period, &gas_sensor);
 8001ca2:	4621      	mov	r1, r4
 8001ca4:	f10d 0006 	add.w	r0, sp, #6
 8001ca8:	f001 feb2 	bl	8003a10 <bme680_get_profile_dur>

  bmes.result = rslt;
 8001cac:	f88d 6078 	strb.w	r6, [sp, #120]	; 0x78
  bmes.min_period = min_sampling_period;
 8001cb0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001cb4:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
  bmes.gs = gas_sensor;
 8001cb8:	2258      	movs	r2, #88	; 0x58
 8001cba:	4621      	mov	r1, r4
 8001cbc:	a81f      	add	r0, sp, #124	; 0x7c
 8001cbe:	f011 fcb3 	bl	8013628 <memcpy>

  return bmes;
 8001cc2:	225c      	movs	r2, #92	; 0x5c
 8001cc4:	a91e      	add	r1, sp, #120	; 0x78
 8001cc6:	4628      	mov	r0, r5
 8001cc8:	f011 fcae 	bl	8013628 <memcpy>

}//bme680 init
 8001ccc:	4628      	mov	r0, r5
 8001cce:	b002      	add	sp, #8
 8001cd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001cd4:	b004      	add	sp, #16
 8001cd6:	4770      	bx	lr
 8001cd8:	08001b8d 	.word	0x08001b8d
 8001cdc:	08001bdd 	.word	0x08001bdd
 8001ce0:	08001ae1 	.word	0x08001ae1

08001ce4 <EnvSensors_Init>:
{
 8001ce4:	b570      	push	{r4, r5, r6, lr}
 8001ce6:	b0c4      	sub	sp, #272	; 0x110
  bmes = bme680Init(gas_sensor, rslt, bmes);
 8001ce8:	4d0f      	ldr	r5, [pc, #60]	; (8001d28 <EnvSensors_Init+0x44>)
 8001cea:	4c10      	ldr	r4, [pc, #64]	; (8001d2c <EnvSensors_Init+0x48>)
 8001cec:	265c      	movs	r6, #92	; 0x5c
 8001cee:	4632      	mov	r2, r6
 8001cf0:	4629      	mov	r1, r5
 8001cf2:	a814      	add	r0, sp, #80	; 0x50
 8001cf4:	f011 fc98 	bl	8013628 <memcpy>
 8001cf8:	4b0d      	ldr	r3, [pc, #52]	; (8001d30 <EnvSensors_Init+0x4c>)
 8001cfa:	f993 3000 	ldrsb.w	r3, [r3]
 8001cfe:	9313      	str	r3, [sp, #76]	; 0x4c
 8001d00:	224c      	movs	r2, #76	; 0x4c
 8001d02:	f104 010c 	add.w	r1, r4, #12
 8001d06:	4668      	mov	r0, sp
 8001d08:	f011 fc8e 	bl	8013628 <memcpy>
 8001d0c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001d10:	a82c      	add	r0, sp, #176	; 0xb0
 8001d12:	f7ff ff8f 	bl	8001c34 <bme680Init>
 8001d16:	4632      	mov	r2, r6
 8001d18:	a92c      	add	r1, sp, #176	; 0xb0
 8001d1a:	4628      	mov	r0, r5
 8001d1c:	f011 fc84 	bl	8013628 <memcpy>
}
 8001d20:	2000      	movs	r0, #0
 8001d22:	b044      	add	sp, #272	; 0x110
 8001d24:	bd70      	pop	{r4, r5, r6, pc}
 8001d26:	bf00      	nop
 8001d28:	20000294 	.word	0x20000294
 8001d2c:	20000304 	.word	0x20000304
 8001d30:	200003c0 	.word	0x200003c0

08001d34 <bme680TakeSample>:

void bme680TakeSample(sensor_t *sensor_data, char i2c_reading_buf[100], int8_t rslt, struct bme680_field_data data, uint16_t min_sampling_period, struct bme680_dev gas_sensor) {
 8001d34:	b082      	sub	sp, #8
 8001d36:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	4604      	mov	r4, r0
 8001d3e:	4688      	mov	r8, r1
 8001d40:	930d      	str	r3, [sp, #52]	; 0x34

	//------------------------Take sample using BME-----------------------------------

	// Allow BME680 to sample environment
	HAL_Delay(min_sampling_period);
 8001d42:	f8bd 0048 	ldrh.w	r0, [sp, #72]	; 0x48
 8001d46:	f7ff fecb 	bl	8001ae0 <HAL_Delay>

	// Query the sample data
	rslt = bme680_get_sensor_data(&data, &gas_sensor);
 8001d4a:	a913      	add	r1, sp, #76	; 0x4c
 8001d4c:	a80d      	add	r0, sp, #52	; 0x34
 8001d4e:	f001 fe99 	bl	8003a84 <bme680_get_sensor_data>

	// Format results into a readable string
	sprintf(i2c_reading_buf,
	  "Temp: %u.%u degC, Pres: %u.%u hPa, Humi: %u.%u %%rH\r\n",
	  (unsigned int)data.temperature / 100,
 8001d52:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
	  (unsigned int)data.temperature % 100,
	  (unsigned int)data.pressure / 100,
 8001d56:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
	  (unsigned int)data.pressure % 100,
	  (unsigned int)data.humidity / 1000,
 8001d58:	9810      	ldr	r0, [sp, #64]	; 0x40
	sprintf(i2c_reading_buf,
 8001d5a:	4d21      	ldr	r5, [pc, #132]	; (8001de0 <bme680TakeSample+0xac>)
 8001d5c:	fba5 320c 	umull	r3, r2, r5, ip
 8001d60:	0952      	lsrs	r2, r2, #5
 8001d62:	2364      	movs	r3, #100	; 0x64
 8001d64:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8001de4 <bme680TakeSample+0xb0>
 8001d68:	fba9 6100 	umull	r6, r1, r9, r0
 8001d6c:	0989      	lsrs	r1, r1, #6
 8001d6e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8001d72:	fb06 0011 	mls	r0, r6, r1, r0
 8001d76:	9003      	str	r0, [sp, #12]
 8001d78:	9102      	str	r1, [sp, #8]
 8001d7a:	fba5 1607 	umull	r1, r6, r5, r7
 8001d7e:	0976      	lsrs	r6, r6, #5
 8001d80:	fb03 7716 	mls	r7, r3, r6, r7
 8001d84:	9701      	str	r7, [sp, #4]
 8001d86:	9600      	str	r6, [sp, #0]
 8001d88:	fb03 c312 	mls	r3, r3, r2, ip
 8001d8c:	4916      	ldr	r1, [pc, #88]	; (8001de8 <bme680TakeSample+0xb4>)
 8001d8e:	4640      	mov	r0, r8
 8001d90:	f011 fd4e 	bl	8013830 <siprintf>
	  (unsigned int)data.humidity % 1000);

	sensor_data->humidity    = data.humidity / 1000;
 8001d94:	9810      	ldr	r0, [sp, #64]	; 0x40
 8001d96:	fba9 3000 	umull	r3, r0, r9, r0
 8001d9a:	0980      	lsrs	r0, r0, #6
 8001d9c:	f7fe fd6a 	bl	8000874 <__aeabi_ui2f>
 8001da0:	60a0      	str	r0, [r4, #8]
	sensor_data->temperature = data.temperature / 100;
 8001da2:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 8001da6:	fb85 2003 	smull	r2, r0, r5, r3
 8001daa:	17db      	asrs	r3, r3, #31
 8001dac:	ebc3 1060 	rsb	r0, r3, r0, asr #5
 8001db0:	b200      	sxth	r0, r0
 8001db2:	f7fe fd63 	bl	800087c <__aeabi_i2f>
 8001db6:	6060      	str	r0, [r4, #4]
	sensor_data->pressure    = data.pressure / 100;
 8001db8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8001dba:	fba5 3000 	umull	r3, r0, r5, r0
 8001dbe:	0940      	lsrs	r0, r0, #5
 8001dc0:	f7fe fd58 	bl	8000874 <__aeabi_ui2f>
 8001dc4:	6020      	str	r0, [r4, #0]

	// Publish result to connected PC
	//DebugSerialOutput(i2c_reading_buf);

	// Request the next sample
	if (gas_sensor.power_mode == BME680_FORCED_MODE) {
 8001dc6:	f89d 3090 	ldrb.w	r3, [sp, #144]	; 0x90
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d004      	beq.n	8001dd8 <bme680TakeSample+0xa4>
	  rslt = bme680_set_sensor_mode(&gas_sensor);
	}

	//------------------------Finish BME sample--------------------------------

} // bme680TakeSample function
 8001dce:	b005      	add	sp, #20
 8001dd0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001dd4:	b002      	add	sp, #8
 8001dd6:	4770      	bx	lr
	  rslt = bme680_set_sensor_mode(&gas_sensor);
 8001dd8:	a813      	add	r0, sp, #76	; 0x4c
 8001dda:	f001 fc8a 	bl	80036f2 <bme680_set_sensor_mode>
} // bme680TakeSample function
 8001dde:	e7f6      	b.n	8001dce <bme680TakeSample+0x9a>
 8001de0:	51eb851f 	.word	0x51eb851f
 8001de4:	10624dd3 	.word	0x10624dd3
 8001de8:	0801415c 	.word	0x0801415c

08001dec <EnvSensors_Read>:
{
 8001dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dee:	b09d      	sub	sp, #116	; 0x74
 8001df0:	4604      	mov	r4, r0
  TEMPERATURE_Value = (SYS_GetTemperatureLevel() >> 8);
 8001df2:	f7ff f9b1 	bl	8001158 <SYS_GetTemperatureLevel>
 8001df6:	f340 200f 	sbfx	r0, r0, #8, #16
 8001dfa:	f7fe fd3f 	bl	800087c <__aeabi_i2f>
  sensor_data->humidity    = HUMIDITY_Value;
 8001dfe:	4b10      	ldr	r3, [pc, #64]	; (8001e40 <EnvSensors_Read+0x54>)
 8001e00:	60a3      	str	r3, [r4, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8001e02:	6060      	str	r0, [r4, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8001e04:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <EnvSensors_Read+0x58>)
 8001e06:	6023      	str	r3, [r4, #0]
  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8001e08:	4b0f      	ldr	r3, [pc, #60]	; (8001e48 <EnvSensors_Read+0x5c>)
 8001e0a:	60e3      	str	r3, [r4, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8001e0c:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <EnvSensors_Read+0x60>)
 8001e0e:	6123      	str	r3, [r4, #16]
  bme680TakeSample(sensor_data, i2c_reading_buf, bmes.result, data, bmes.min_period, bmes.gs);
 8001e10:	4d0f      	ldr	r5, [pc, #60]	; (8001e50 <EnvSensors_Read+0x64>)
 8001e12:	4e10      	ldr	r6, [pc, #64]	; (8001e54 <EnvSensors_Read+0x68>)
 8001e14:	4631      	mov	r1, r6
 8001e16:	f911 7b04 	ldrsb.w	r7, [r1], #4
 8001e1a:	2258      	movs	r2, #88	; 0x58
 8001e1c:	a805      	add	r0, sp, #20
 8001e1e:	f011 fc03 	bl	8013628 <memcpy>
 8001e22:	8873      	ldrh	r3, [r6, #2]
 8001e24:	9304      	str	r3, [sp, #16]
 8001e26:	1d2b      	adds	r3, r5, #4
 8001e28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e2a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8001e2e:	682b      	ldr	r3, [r5, #0]
 8001e30:	463a      	mov	r2, r7
 8001e32:	4909      	ldr	r1, [pc, #36]	; (8001e58 <EnvSensors_Read+0x6c>)
 8001e34:	4620      	mov	r0, r4
 8001e36:	f7ff ff7d 	bl	8001d34 <bme680TakeSample>
}
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	b01d      	add	sp, #116	; 0x74
 8001e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e40:	42480000 	.word	0x42480000
 8001e44:	447a0000 	.word	0x447a0000
 8001e48:	003e090d 	.word	0x003e090d
 8001e4c:	000503ab 	.word	0x000503ab
 8001e50:	200002f0 	.word	0x200002f0
 8001e54:	20000294 	.word	0x20000294
 8001e58:	2000035c 	.word	0x2000035c

08001e5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e5c:	b510      	push	{r4, lr}
 8001e5e:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e60:	4a0c      	ldr	r2, [pc, #48]	; (8001e94 <_sbrk+0x38>)
 8001e62:	490d      	ldr	r1, [pc, #52]	; (8001e98 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e64:	480d      	ldr	r0, [pc, #52]	; (8001e9c <_sbrk+0x40>)
 8001e66:	6800      	ldr	r0, [r0, #0]
 8001e68:	b140      	cbz	r0, 8001e7c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e6a:	480c      	ldr	r0, [pc, #48]	; (8001e9c <_sbrk+0x40>)
 8001e6c:	6800      	ldr	r0, [r0, #0]
 8001e6e:	4403      	add	r3, r0
 8001e70:	1a52      	subs	r2, r2, r1
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d806      	bhi.n	8001e84 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001e76:	4a09      	ldr	r2, [pc, #36]	; (8001e9c <_sbrk+0x40>)
 8001e78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001e7a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001e7c:	4807      	ldr	r0, [pc, #28]	; (8001e9c <_sbrk+0x40>)
 8001e7e:	4c08      	ldr	r4, [pc, #32]	; (8001ea0 <_sbrk+0x44>)
 8001e80:	6004      	str	r4, [r0, #0]
 8001e82:	e7f2      	b.n	8001e6a <_sbrk+0xe>
    errno = ENOMEM;
 8001e84:	f011 fb96 	bl	80135b4 <__errno>
 8001e88:	230c      	movs	r3, #12
 8001e8a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e90:	e7f3      	b.n	8001e7a <_sbrk+0x1e>
 8001e92:	bf00      	nop
 8001e94:	20008000 	.word	0x20008000
 8001e98:	00000800 	.word	0x00000800
 8001e9c:	200003c4 	.word	0x200003c4
 8001ea0:	20001820 	.word	0x20001820

08001ea4 <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001ea4:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <TIMER_IF_SetTimerContext+0x1c>)
 8001ea6:	6898      	ldr	r0, [r3, #8]
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001ea8:	e001      	b.n	8001eae <TIMER_IF_SetTimerContext+0xa>
 8001eaa:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <TIMER_IF_SetTimerContext+0x1c>)
 8001eac:	6898      	ldr	r0, [r3, #8]
 8001eae:	4b04      	ldr	r3, [pc, #16]	; (8001ec0 <TIMER_IF_SetTimerContext+0x1c>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	4283      	cmp	r3, r0
 8001eb4:	d1f9      	bne.n	8001eaa <TIMER_IF_SetTimerContext+0x6>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
  }
  return UINT32_MAX - ssr;
 8001eb6:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 8001eb8:	4b02      	ldr	r3, [pc, #8]	; (8001ec4 <TIMER_IF_SetTimerContext+0x20>)
 8001eba:	6018      	str	r0, [r3, #0]
}
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	40002800 	.word	0x40002800
 8001ec4:	200003cc 	.word	0x200003cc

08001ec8 <TIMER_IF_GetTimerContext>:
}
 8001ec8:	4b01      	ldr	r3, [pc, #4]	; (8001ed0 <TIMER_IF_GetTimerContext+0x8>)
 8001eca:	6818      	ldr	r0, [r3, #0]
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	200003cc 	.word	0x200003cc

08001ed4 <TIMER_IF_GetTimerElapsedTime>:
 8001ed4:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001ed6:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001ed8:	e001      	b.n	8001ede <TIMER_IF_GetTimerElapsedTime+0xa>
 8001eda:	4b05      	ldr	r3, [pc, #20]	; (8001ef0 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001edc:	6898      	ldr	r0, [r3, #8]
 8001ede:	4b04      	ldr	r3, [pc, #16]	; (8001ef0 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	4283      	cmp	r3, r0
 8001ee4:	d1f9      	bne.n	8001eda <TIMER_IF_GetTimerElapsedTime+0x6>
  return UINT32_MAX - ssr;
 8001ee6:	43c0      	mvns	r0, r0
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001ee8:	4b02      	ldr	r3, [pc, #8]	; (8001ef4 <TIMER_IF_GetTimerElapsedTime+0x20>)
 8001eea:	681b      	ldr	r3, [r3, #0]
}
 8001eec:	1ac0      	subs	r0, r0, r3
 8001eee:	4770      	bx	lr
 8001ef0:	40002800 	.word	0x40002800
 8001ef4:	200003cc 	.word	0x200003cc

08001ef8 <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 8001ef8:	4b07      	ldr	r3, [pc, #28]	; (8001f18 <TIMER_IF_GetTimerValue+0x20>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	b153      	cbz	r3, 8001f14 <TIMER_IF_GetTimerValue+0x1c>
 8001efe:	4b07      	ldr	r3, [pc, #28]	; (8001f1c <TIMER_IF_GetTimerValue+0x24>)
 8001f00:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001f02:	e001      	b.n	8001f08 <TIMER_IF_GetTimerValue+0x10>
 8001f04:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <TIMER_IF_GetTimerValue+0x24>)
 8001f06:	6898      	ldr	r0, [r3, #8]
 8001f08:	4b04      	ldr	r3, [pc, #16]	; (8001f1c <TIMER_IF_GetTimerValue+0x24>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	4283      	cmp	r3, r0
 8001f0e:	d1f9      	bne.n	8001f04 <TIMER_IF_GetTimerValue+0xc>
  return UINT32_MAX - ssr;
 8001f10:	43c0      	mvns	r0, r0
 8001f12:	4770      	bx	lr
  uint32_t ret = 0;
 8001f14:	2000      	movs	r0, #0
}
 8001f16:	4770      	bx	lr
 8001f18:	200003c8 	.word	0x200003c8
 8001f1c:	40002800 	.word	0x40002800

08001f20 <TIMER_IF_GetMinimumTimeout>:
}
 8001f20:	2003      	movs	r0, #3
 8001f22:	4770      	bx	lr

08001f24 <TIMER_IF_Convert_ms2Tick>:
{
 8001f24:	b508      	push	{r3, lr}
 8001f26:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8001f28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	0280      	lsls	r0, r0, #10
 8001f30:	0d89      	lsrs	r1, r1, #22
 8001f32:	f7fe fedd 	bl	8000cf0 <__aeabi_uldivmod>
}
 8001f36:	bd08      	pop	{r3, pc}

08001f38 <TIMER_IF_Convert_Tick2ms>:
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8001f38:	0ec2      	lsrs	r2, r0, #27
 8001f3a:	0143      	lsls	r3, r0, #5
 8001f3c:	1a1b      	subs	r3, r3, r0
 8001f3e:	f162 0200 	sbc.w	r2, r2, #0
 8001f42:	0092      	lsls	r2, r2, #2
 8001f44:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	181b      	adds	r3, r3, r0
 8001f4c:	f142 0000 	adc.w	r0, r2, #0
 8001f50:	00c0      	lsls	r0, r0, #3
 8001f52:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8001f56:	f3c3 13d5 	ubfx	r3, r3, #7, #22
}
 8001f5a:	ea43 5080 	orr.w	r0, r3, r0, lsl #22
 8001f5e:	4770      	bx	lr

08001f60 <TIMER_IF_StopTimer>:
{
 8001f60:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001f62:	4b07      	ldr	r3, [pc, #28]	; (8001f80 <TIMER_IF_StopTimer+0x20>)
 8001f64:	2201      	movs	r2, #1
 8001f66:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001f68:	4c06      	ldr	r4, [pc, #24]	; (8001f84 <TIMER_IF_StopTimer+0x24>)
 8001f6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f6e:	4620      	mov	r0, r4
 8001f70:	f004 fc92 	bl	8006898 <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001f74:	f04f 33ff 	mov.w	r3, #4294967295
 8001f78:	6323      	str	r3, [r4, #48]	; 0x30
}
 8001f7a:	2000      	movs	r0, #0
 8001f7c:	bd10      	pop	{r4, pc}
 8001f7e:	bf00      	nop
 8001f80:	40002800 	.word	0x40002800
 8001f84:	2000024c 	.word	0x2000024c

08001f88 <TIMER_IF_BkUp_Write_MSBticks>:
{
 8001f88:	b508      	push	{r3, lr}
 8001f8a:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8001f8c:	2102      	movs	r1, #2
 8001f8e:	4802      	ldr	r0, [pc, #8]	; (8001f98 <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 8001f90:	f004 fec5 	bl	8006d1e <HAL_RTCEx_BKUPWrite>
}
 8001f94:	bd08      	pop	{r3, pc}
 8001f96:	bf00      	nop
 8001f98:	2000024c 	.word	0x2000024c

08001f9c <TIMER_IF_Init>:
{
 8001f9c:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 8001f9e:	4b0f      	ldr	r3, [pc, #60]	; (8001fdc <TIMER_IF_Init+0x40>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	b10b      	cbz	r3, 8001fa8 <TIMER_IF_Init+0xc>
}
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001fa8:	4c0d      	ldr	r4, [pc, #52]	; (8001fe0 <TIMER_IF_Init+0x44>)
 8001faa:	f04f 35ff 	mov.w	r5, #4294967295
 8001fae:	6325      	str	r5, [r4, #48]	; 0x30
    MX_RTC_Init();
 8001fb0:	f7ff fbae 	bl	8001710 <MX_RTC_Init>
    TIMER_IF_StopTimer();
 8001fb4:	f7ff ffd4 	bl	8001f60 <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001fb8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fbc:	4620      	mov	r0, r4
 8001fbe:	f004 fc6b 	bl	8006898 <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001fc2:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001fc4:	4620      	mov	r0, r4
 8001fc6:	f004 fe49 	bl	8006c5c <HAL_RTCEx_EnableBypassShadow>
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001fca:	2000      	movs	r0, #0
 8001fcc:	f7ff ffdc 	bl	8001f88 <TIMER_IF_BkUp_Write_MSBticks>
    TIMER_IF_SetTimerContext();
 8001fd0:	f7ff ff68 	bl	8001ea4 <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 8001fd4:	4b01      	ldr	r3, [pc, #4]	; (8001fdc <TIMER_IF_Init+0x40>)
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	701a      	strb	r2, [r3, #0]
 8001fda:	e7e3      	b.n	8001fa4 <TIMER_IF_Init+0x8>
 8001fdc:	200003c8 	.word	0x200003c8
 8001fe0:	2000024c 	.word	0x2000024c

08001fe4 <TIMER_IF_BkUp_Write_Seconds>:
{
 8001fe4:	b508      	push	{r3, lr}
 8001fe6:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8001fe8:	2100      	movs	r1, #0
 8001fea:	4802      	ldr	r0, [pc, #8]	; (8001ff4 <TIMER_IF_BkUp_Write_Seconds+0x10>)
 8001fec:	f004 fe97 	bl	8006d1e <HAL_RTCEx_BKUPWrite>
}
 8001ff0:	bd08      	pop	{r3, pc}
 8001ff2:	bf00      	nop
 8001ff4:	2000024c 	.word	0x2000024c

08001ff8 <TIMER_IF_BkUp_Write_SubSeconds>:
{
 8001ff8:	b508      	push	{r3, lr}
 8001ffa:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	4802      	ldr	r0, [pc, #8]	; (8002008 <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 8002000:	f004 fe8d 	bl	8006d1e <HAL_RTCEx_BKUPWrite>
}
 8002004:	bd08      	pop	{r3, pc}
 8002006:	bf00      	nop
 8002008:	2000024c 	.word	0x2000024c

0800200c <TIMER_IF_StartTimer>:
{
 800200c:	b510      	push	{r4, lr}
 800200e:	b08c      	sub	sp, #48	; 0x30
 8002010:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 8002012:	222c      	movs	r2, #44	; 0x2c
 8002014:	2100      	movs	r1, #0
 8002016:	a801      	add	r0, sp, #4
 8002018:	f011 fb14 	bl	8013644 <memset>
  TIMER_IF_StopTimer();
 800201c:	f7ff ffa0 	bl	8001f60 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002020:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <TIMER_IF_StartTimer+0x48>)
 8002022:	6818      	ldr	r0, [r3, #0]
 8002024:	4404      	add	r4, r0
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002026:	2300      	movs	r3, #0
 8002028:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 800202a:	43e4      	mvns	r4, r4
 800202c:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800202e:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002030:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002034:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8002036:	f44f 7380 	mov.w	r3, #256	; 0x100
 800203a:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800203c:	2201      	movs	r2, #1
 800203e:	a901      	add	r1, sp, #4
 8002040:	4805      	ldr	r0, [pc, #20]	; (8002058 <TIMER_IF_StartTimer+0x4c>)
 8002042:	f004 fd4f 	bl	8006ae4 <HAL_RTC_SetAlarm_IT>
 8002046:	b910      	cbnz	r0, 800204e <TIMER_IF_StartTimer+0x42>
}
 8002048:	2000      	movs	r0, #0
 800204a:	b00c      	add	sp, #48	; 0x30
 800204c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800204e:	f7ff fb07 	bl	8001660 <Error_Handler>
 8002052:	e7f9      	b.n	8002048 <TIMER_IF_StartTimer+0x3c>
 8002054:	200003cc 	.word	0x200003cc
 8002058:	2000024c 	.word	0x2000024c

0800205c <TIMER_IF_BkUp_Read_MSBticks>:
{
 800205c:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 800205e:	2102      	movs	r1, #2
 8002060:	4801      	ldr	r0, [pc, #4]	; (8002068 <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 8002062:	f004 fe63 	bl	8006d2c <HAL_RTCEx_BKUPRead>
}
 8002066:	bd08      	pop	{r3, pc}
 8002068:	2000024c 	.word	0x2000024c

0800206c <TIMER_IF_GetTime>:
{
 800206c:	b538      	push	{r3, r4, r5, lr}
 800206e:	4605      	mov	r5, r0
 8002070:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <TIMER_IF_GetTime+0x34>)
 8002072:	689c      	ldr	r4, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002074:	e001      	b.n	800207a <TIMER_IF_GetTime+0xe>
 8002076:	4b0a      	ldr	r3, [pc, #40]	; (80020a0 <TIMER_IF_GetTime+0x34>)
 8002078:	689c      	ldr	r4, [r3, #8]
 800207a:	4a09      	ldr	r2, [pc, #36]	; (80020a0 <TIMER_IF_GetTime+0x34>)
 800207c:	6892      	ldr	r2, [r2, #8]
 800207e:	42a2      	cmp	r2, r4
 8002080:	d1f9      	bne.n	8002076 <TIMER_IF_GetTime+0xa>
  return UINT32_MAX - ssr;
 8002082:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002084:	f7ff ffea 	bl	800205c <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002088:	4623      	mov	r3, r4
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 800208a:	0aa4      	lsrs	r4, r4, #10
 800208c:	ea44 5480 	orr.w	r4, r4, r0, lsl #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002090:	f3c3 0009 	ubfx	r0, r3, #0, #10
 8002094:	f7ff ff50 	bl	8001f38 <TIMER_IF_Convert_Tick2ms>
 8002098:	8028      	strh	r0, [r5, #0]
}
 800209a:	4620      	mov	r0, r4
 800209c:	bd38      	pop	{r3, r4, r5, pc}
 800209e:	bf00      	nop
 80020a0:	40002800 	.word	0x40002800

080020a4 <TIMER_IF_BkUp_Read_Seconds>:
{
 80020a4:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 80020a6:	2100      	movs	r1, #0
 80020a8:	4801      	ldr	r0, [pc, #4]	; (80020b0 <TIMER_IF_BkUp_Read_Seconds+0xc>)
 80020aa:	f004 fe3f 	bl	8006d2c <HAL_RTCEx_BKUPRead>
}
 80020ae:	bd08      	pop	{r3, pc}
 80020b0:	2000024c 	.word	0x2000024c

080020b4 <TIMER_IF_BkUp_Read_SubSeconds>:
{
 80020b4:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 80020b6:	2101      	movs	r1, #1
 80020b8:	4801      	ldr	r0, [pc, #4]	; (80020c0 <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 80020ba:	f004 fe37 	bl	8006d2c <HAL_RTCEx_BKUPRead>
}
 80020be:	bd08      	pop	{r3, pc}
 80020c0:	2000024c 	.word	0x2000024c

080020c4 <TIMER_IF_DelayMs>:
{
 80020c4:	b508      	push	{r3, lr}
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 80020c6:	f7ff ff2d 	bl	8001f24 <TIMER_IF_Convert_ms2Tick>
 80020ca:	4b0d      	ldr	r3, [pc, #52]	; (8002100 <TIMER_IF_DelayMs+0x3c>)
 80020cc:	6899      	ldr	r1, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80020ce:	e001      	b.n	80020d4 <TIMER_IF_DelayMs+0x10>
 80020d0:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <TIMER_IF_DelayMs+0x3c>)
 80020d2:	6899      	ldr	r1, [r3, #8]
 80020d4:	4a0a      	ldr	r2, [pc, #40]	; (8002100 <TIMER_IF_DelayMs+0x3c>)
 80020d6:	6892      	ldr	r2, [r2, #8]
 80020d8:	428a      	cmp	r2, r1
 80020da:	d1f9      	bne.n	80020d0 <TIMER_IF_DelayMs+0xc>
  return UINT32_MAX - ssr;
 80020dc:	43c9      	mvns	r1, r1
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80020de:	e00a      	b.n	80020f6 <TIMER_IF_DelayMs+0x32>
 80020e0:	4b07      	ldr	r3, [pc, #28]	; (8002100 <TIMER_IF_DelayMs+0x3c>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	4a06      	ldr	r2, [pc, #24]	; (8002100 <TIMER_IF_DelayMs+0x3c>)
 80020e6:	6892      	ldr	r2, [r2, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d1f9      	bne.n	80020e0 <TIMER_IF_DelayMs+0x1c>
  return UINT32_MAX - ssr;
 80020ec:	43db      	mvns	r3, r3
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80020ee:	1a5b      	subs	r3, r3, r1
 80020f0:	4283      	cmp	r3, r0
 80020f2:	d203      	bcs.n	80020fc <TIMER_IF_DelayMs+0x38>
    __NOP();
 80020f4:	bf00      	nop
 80020f6:	4b02      	ldr	r3, [pc, #8]	; (8002100 <TIMER_IF_DelayMs+0x3c>)
 80020f8:	689b      	ldr	r3, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80020fa:	e7f3      	b.n	80020e4 <TIMER_IF_DelayMs+0x20>
}
 80020fc:	bd08      	pop	{r3, pc}
 80020fe:	bf00      	nop
 8002100:	40002800 	.word	0x40002800

08002104 <HAL_RTC_AlarmAEventCallback>:
{
 8002104:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8002106:	f011 f8af 	bl	8013268 <UTIL_TIMER_IRQ_Handler>
}
 800210a:	bd08      	pop	{r3, pc}

0800210c <HAL_RTCEx_SSRUEventCallback>:
{
 800210c:	b508      	push	{r3, lr}
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 800210e:	f7ff ffa5 	bl	800205c <TIMER_IF_BkUp_Read_MSBticks>
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002112:	3001      	adds	r0, #1
 8002114:	f7ff ff38 	bl	8001f88 <TIMER_IF_BkUp_Write_MSBticks>
}
 8002118:	bd08      	pop	{r3, pc}
	...

0800211c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800211c:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800211e:	4817      	ldr	r0, [pc, #92]	; (800217c <MX_USART2_UART_Init+0x60>)
 8002120:	4b17      	ldr	r3, [pc, #92]	; (8002180 <MX_USART2_UART_Init+0x64>)
 8002122:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8002124:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002128:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800212a:	2300      	movs	r3, #0
 800212c:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800212e:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002130:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002132:	220c      	movs	r2, #12
 8002134:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002136:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002138:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800213a:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800213c:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800213e:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002140:	f006 f8f3 	bl	800832a <HAL_UART_Init>
 8002144:	b970      	cbnz	r0, 8002164 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002146:	2100      	movs	r1, #0
 8002148:	480c      	ldr	r0, [pc, #48]	; (800217c <MX_USART2_UART_Init+0x60>)
 800214a:	f006 fab0 	bl	80086ae <HAL_UARTEx_SetTxFifoThreshold>
 800214e:	b960      	cbnz	r0, 800216a <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002150:	2100      	movs	r1, #0
 8002152:	480a      	ldr	r0, [pc, #40]	; (800217c <MX_USART2_UART_Init+0x60>)
 8002154:	f006 fad0 	bl	80086f8 <HAL_UARTEx_SetRxFifoThreshold>
 8002158:	b950      	cbnz	r0, 8002170 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 800215a:	4808      	ldr	r0, [pc, #32]	; (800217c <MX_USART2_UART_Init+0x60>)
 800215c:	f006 fa83 	bl	8008666 <HAL_UARTEx_EnableFifoMode>
 8002160:	b948      	cbnz	r0, 8002176 <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002162:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002164:	f7ff fa7c 	bl	8001660 <Error_Handler>
 8002168:	e7ed      	b.n	8002146 <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 800216a:	f7ff fa79 	bl	8001660 <Error_Handler>
 800216e:	e7ef      	b.n	8002150 <MX_USART2_UART_Init+0x34>
    Error_Handler();
 8002170:	f7ff fa76 	bl	8001660 <Error_Handler>
 8002174:	e7f1      	b.n	800215a <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 8002176:	f7ff fa73 	bl	8001660 <Error_Handler>
}
 800217a:	e7f2      	b.n	8002162 <MX_USART2_UART_Init+0x46>
 800217c:	20000430 	.word	0x20000430
 8002180:	40004400 	.word	0x40004400

08002184 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002184:	b530      	push	{r4, r5, lr}
 8002186:	b097      	sub	sp, #92	; 0x5c
 8002188:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218a:	2100      	movs	r1, #0
 800218c:	9111      	str	r1, [sp, #68]	; 0x44
 800218e:	9112      	str	r1, [sp, #72]	; 0x48
 8002190:	9113      	str	r1, [sp, #76]	; 0x4c
 8002192:	9114      	str	r1, [sp, #80]	; 0x50
 8002194:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002196:	2238      	movs	r2, #56	; 0x38
 8002198:	a803      	add	r0, sp, #12
 800219a:	f011 fa53 	bl	8013644 <memset>
  if(uartHandle->Instance==USART2)
 800219e:	6822      	ldr	r2, [r4, #0]
 80021a0:	4b2d      	ldr	r3, [pc, #180]	; (8002258 <HAL_UART_MspInit+0xd4>)
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d001      	beq.n	80021aa <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80021a6:	b017      	add	sp, #92	; 0x5c
 80021a8:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80021aa:	2302      	movs	r3, #2
 80021ac:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80021ae:	4b2b      	ldr	r3, [pc, #172]	; (800225c <HAL_UART_MspInit+0xd8>)
 80021b0:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021b2:	a803      	add	r0, sp, #12
 80021b4:	f004 fa26 	bl	8006604 <HAL_RCCEx_PeriphCLKConfig>
 80021b8:	2800      	cmp	r0, #0
 80021ba:	d144      	bne.n	8002246 <HAL_UART_MspInit+0xc2>
  SET_BIT(RCC->APB1ENR1, Periphs);
 80021bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80021c2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80021c6:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80021c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80021ca:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80021ce:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80021d0:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80021d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021d4:	f042 0201 	orr.w	r2, r2, #1
 80021d8:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80021da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80021e2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 80021e4:	230c      	movs	r3, #12
 80021e6:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e8:	2302      	movs	r3, #2
 80021ea:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2500      	movs	r5, #0
 80021ee:	9513      	str	r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f0:	2303      	movs	r3, #3
 80021f2:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021f4:	2307      	movs	r3, #7
 80021f6:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f8:	a911      	add	r1, sp, #68	; 0x44
 80021fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021fe:	f002 fe9b 	bl	8004f38 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel5;
 8002202:	4817      	ldr	r0, [pc, #92]	; (8002260 <HAL_UART_MspInit+0xdc>)
 8002204:	4b17      	ldr	r3, [pc, #92]	; (8002264 <HAL_UART_MspInit+0xe0>)
 8002206:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002208:	2314      	movs	r3, #20
 800220a:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800220c:	2310      	movs	r3, #16
 800220e:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002210:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002212:	2380      	movs	r3, #128	; 0x80
 8002214:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002216:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002218:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800221a:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800221c:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800221e:	f002 faf3 	bl	8004808 <HAL_DMA_Init>
 8002222:	b998      	cbnz	r0, 800224c <HAL_UART_MspInit+0xc8>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002224:	2110      	movs	r1, #16
 8002226:	480e      	ldr	r0, [pc, #56]	; (8002260 <HAL_UART_MspInit+0xdc>)
 8002228:	f002 fcf0 	bl	8004c0c <HAL_DMA_ConfigChannelAttributes>
 800222c:	b988      	cbnz	r0, 8002252 <HAL_UART_MspInit+0xce>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800222e:	4b0c      	ldr	r3, [pc, #48]	; (8002260 <HAL_UART_MspInit+0xdc>)
 8002230:	67a3      	str	r3, [r4, #120]	; 0x78
 8002232:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8002234:	2200      	movs	r2, #0
 8002236:	2102      	movs	r1, #2
 8002238:	2025      	movs	r0, #37	; 0x25
 800223a:	f002 fa1d 	bl	8004678 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800223e:	2025      	movs	r0, #37	; 0x25
 8002240:	f002 fa52 	bl	80046e8 <HAL_NVIC_EnableIRQ>
}
 8002244:	e7af      	b.n	80021a6 <HAL_UART_MspInit+0x22>
      Error_Handler();
 8002246:	f7ff fa0b 	bl	8001660 <Error_Handler>
 800224a:	e7b7      	b.n	80021bc <HAL_UART_MspInit+0x38>
      Error_Handler();
 800224c:	f7ff fa08 	bl	8001660 <Error_Handler>
 8002250:	e7e8      	b.n	8002224 <HAL_UART_MspInit+0xa0>
      Error_Handler();
 8002252:	f7ff fa05 	bl	8001660 <Error_Handler>
 8002256:	e7ea      	b.n	800222e <HAL_UART_MspInit+0xaa>
 8002258:	40004400 	.word	0x40004400
 800225c:	000c0004 	.word	0x000c0004
 8002260:	200003d0 	.word	0x200003d0
 8002264:	40020058 	.word	0x40020058

08002268 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART2)
 8002268:	6802      	ldr	r2, [r0, #0]
 800226a:	4b0c      	ldr	r3, [pc, #48]	; (800229c <HAL_UART_MspDeInit+0x34>)
 800226c:	429a      	cmp	r2, r3
 800226e:	d000      	beq.n	8002272 <HAL_UART_MspDeInit+0xa>
 8002270:	4770      	bx	lr
{
 8002272:	b510      	push	{r4, lr}
 8002274:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8002276:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800227a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800227c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002280:	6593      	str	r3, [r2, #88]	; 0x58

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 8002282:	210c      	movs	r1, #12
 8002284:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002288:	f002 ff28 	bl	80050dc <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800228c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800228e:	f002 fb2d 	bl	80048ec <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002292:	2025      	movs	r0, #37	; 0x25
 8002294:	f002 fa36 	bl	8004704 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8002298:	bd10      	pop	{r4, pc}
 800229a:	bf00      	nop
 800229c:	40004400 	.word	0x40004400

080022a0 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 80022a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80022a2:	4b07      	ldr	r3, [pc, #28]	; (80022c0 <vcom_Init+0x20>)
 80022a4:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 80022a6:	f7fe ffad 	bl	8001204 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80022aa:	f7ff ff37 	bl	800211c <MX_USART2_UART_Init>
  SET_BIT(EXTI->IMR1, ExtiLine);
 80022ae:	4a05      	ldr	r2, [pc, #20]	; (80022c4 <vcom_Init+0x24>)
 80022b0:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80022b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80022b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 80022bc:	2000      	movs	r0, #0
 80022be:	bd08      	pop	{r3, pc}
 80022c0:	200004c4 	.word	0x200004c4
 80022c4:	58000800 	.word	0x58000800

080022c8 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80022c8:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB1RSTR1, Periphs);
 80022ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022d0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80022d4:	639a      	str	r2, [r3, #56]	; 0x38
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 80022d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022d8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80022dc:	639a      	str	r2, [r3, #56]	; 0x38
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
  __HAL_RCC_USART2_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 80022de:	4804      	ldr	r0, [pc, #16]	; (80022f0 <vcom_DeInit+0x28>)
 80022e0:	f7ff ffc2 	bl	8002268 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 80022e4:	200f      	movs	r0, #15
 80022e6:	f002 fa0d 	bl	8004704 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80022ea:	2000      	movs	r0, #0
 80022ec:	bd08      	pop	{r3, pc}
 80022ee:	bf00      	nop
 80022f0:	20000430 	.word	0x20000430

080022f4 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80022f4:	b508      	push	{r3, lr}
 80022f6:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 80022f8:	4601      	mov	r1, r0
 80022fa:	4802      	ldr	r0, [pc, #8]	; (8002304 <vcom_Trace_DMA+0x10>)
 80022fc:	f005 f8e2 	bl	80074c4 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002300:	2000      	movs	r0, #0
 8002302:	bd08      	pop	{r3, pc}
 8002304:	20000430 	.word	0x20000430

08002308 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002308:	b510      	push	{r4, lr}
 800230a:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 800230c:	4b12      	ldr	r3, [pc, #72]	; (8002358 <vcom_ReceiveInit+0x50>)
 800230e:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002310:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002314:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 8002316:	ab02      	add	r3, sp, #8
 8002318:	e913 0006 	ldmdb	r3, {r1, r2}
 800231c:	480f      	ldr	r0, [pc, #60]	; (800235c <vcom_ReceiveInit+0x54>)
 800231e:	f006 f94a 	bl	80085b6 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 8002322:	4b0e      	ldr	r3, [pc, #56]	; (800235c <vcom_ReceiveInit+0x54>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	69da      	ldr	r2, [r3, #28]
 8002328:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800232c:	d1f9      	bne.n	8002322 <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 800232e:	69da      	ldr	r2, [r3, #28]
 8002330:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8002334:	d0fb      	beq.n	800232e <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800233c:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 800233e:	4c07      	ldr	r4, [pc, #28]	; (800235c <vcom_ReceiveInit+0x54>)
 8002340:	4620      	mov	r0, r4
 8002342:	f006 f979 	bl	8008638 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 8002346:	2201      	movs	r2, #1
 8002348:	4905      	ldr	r1, [pc, #20]	; (8002360 <vcom_ReceiveInit+0x58>)
 800234a:	4620      	mov	r0, r4
 800234c:	f006 f8c4 	bl	80084d8 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002350:	2000      	movs	r0, #0
 8002352:	b002      	add	sp, #8
 8002354:	bd10      	pop	{r4, pc}
 8002356:	bf00      	nop
 8002358:	200004c0 	.word	0x200004c0
 800235c:	20000430 	.word	0x20000430
 8002360:	200004c8 	.word	0x200004c8

08002364 <vcom_Resume>:

void vcom_Resume(void)
{
 8002364:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002366:	4807      	ldr	r0, [pc, #28]	; (8002384 <vcom_Resume+0x20>)
 8002368:	f005 ffdf 	bl	800832a <HAL_UART_Init>
 800236c:	b920      	cbnz	r0, 8002378 <vcom_Resume+0x14>
  {
    Error_Handler();
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800236e:	4806      	ldr	r0, [pc, #24]	; (8002388 <vcom_Resume+0x24>)
 8002370:	f002 fa4a 	bl	8004808 <HAL_DMA_Init>
 8002374:	b918      	cbnz	r0, 800237e <vcom_Resume+0x1a>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8002376:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002378:	f7ff f972 	bl	8001660 <Error_Handler>
 800237c:	e7f7      	b.n	800236e <vcom_Resume+0xa>
    Error_Handler();
 800237e:	f7ff f96f 	bl	8001660 <Error_Handler>
}
 8002382:	e7f8      	b.n	8002376 <vcom_Resume+0x12>
 8002384:	20000430 	.word	0x20000430
 8002388:	200003d0 	.word	0x200003d0

0800238c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800238c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 800238e:	6802      	ldr	r2, [r0, #0]
 8002390:	4b04      	ldr	r3, [pc, #16]	; (80023a4 <HAL_UART_TxCpltCallback+0x18>)
 8002392:	429a      	cmp	r2, r3
 8002394:	d000      	beq.n	8002398 <HAL_UART_TxCpltCallback+0xc>
    TxCpltCallback(NULL);
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002396:	bd08      	pop	{r3, pc}
    TxCpltCallback(NULL);
 8002398:	4b03      	ldr	r3, [pc, #12]	; (80023a8 <HAL_UART_TxCpltCallback+0x1c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2000      	movs	r0, #0
 800239e:	4798      	blx	r3
}
 80023a0:	e7f9      	b.n	8002396 <HAL_UART_TxCpltCallback+0xa>
 80023a2:	bf00      	nop
 80023a4:	40004400 	.word	0x40004400
 80023a8:	200004c4 	.word	0x200004c4

080023ac <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 80023ac:	6802      	ldr	r2, [r0, #0]
 80023ae:	4b0a      	ldr	r3, [pc, #40]	; (80023d8 <HAL_UART_RxCpltCallback+0x2c>)
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d000      	beq.n	80023b6 <HAL_UART_RxCpltCallback+0xa>
 80023b4:	4770      	bx	lr
{
 80023b6:	b510      	push	{r4, lr}
 80023b8:	4604      	mov	r4, r0
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 80023ba:	4b08      	ldr	r3, [pc, #32]	; (80023dc <HAL_UART_RxCpltCallback+0x30>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	b12b      	cbz	r3, 80023cc <HAL_UART_RxCpltCallback+0x20>
 80023c0:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 80023c4:	b912      	cbnz	r2, 80023cc <HAL_UART_RxCpltCallback+0x20>
    {
      RxCpltCallback(&charRx, 1, 0);
 80023c6:	2101      	movs	r1, #1
 80023c8:	4805      	ldr	r0, [pc, #20]	; (80023e0 <HAL_UART_RxCpltCallback+0x34>)
 80023ca:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 80023cc:	2201      	movs	r2, #1
 80023ce:	4904      	ldr	r1, [pc, #16]	; (80023e0 <HAL_UART_RxCpltCallback+0x34>)
 80023d0:	4620      	mov	r0, r4
 80023d2:	f006 f881 	bl	80084d8 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80023d6:	bd10      	pop	{r4, pc}
 80023d8:	40004400 	.word	0x40004400
 80023dc:	200004c0 	.word	0x200004c0
 80023e0:	200004c8 	.word	0x200004c8

080023e4 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 80023e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 80023e6:	f7ff fabf 	bl	8001968 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 80023ea:	f000 fbab 	bl	8002b44 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 80023ee:	bd08      	pop	{r3, pc}

080023f0 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 80023f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80023f2:	f04f 30ff 	mov.w	r0, #4294967295
 80023f6:	f010 fc87 	bl	8012d08 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 80023fa:	bd08      	pop	{r3, pc}

080023fc <OnTxFrameCtrlChanged>:
static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 80023fc:	4b01      	ldr	r3, [pc, #4]	; (8002404 <OnTxFrameCtrlChanged+0x8>)
 80023fe:	70d8      	strb	r0, [r3, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	20000058 	.word	0x20000058

08002408 <OnPingSlotPeriodicityChanged>:
static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 8002408:	4b01      	ldr	r3, [pc, #4]	; (8002410 <OnPingSlotPeriodicityChanged+0x8>)
 800240a:	7318      	strb	r0, [r3, #12]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	20000058 	.word	0x20000058

08002414 <OnBeaconStatusChange>:
  if (params != NULL)
 8002414:	2800      	cmp	r0, #0
 8002416:	d03f      	beq.n	8002498 <OnBeaconStatusChange+0x84>
{
 8002418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800241c:	b08c      	sub	sp, #48	; 0x30
 800241e:	4603      	mov	r3, r0
    switch (params->State)
 8002420:	7842      	ldrb	r2, [r0, #1]
 8002422:	2a02      	cmp	r2, #2
 8002424:	d00a      	beq.n	800243c <OnBeaconStatusChange+0x28>
 8002426:	2a03      	cmp	r2, #3
 8002428:	d02f      	beq.n	800248a <OnBeaconStatusChange+0x76>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800242a:	4b1c      	ldr	r3, [pc, #112]	; (800249c <OnBeaconStatusChange+0x88>)
 800242c:	2200      	movs	r2, #0
 800242e:	4611      	mov	r1, r2
 8002430:	2002      	movs	r0, #2
 8002432:	f010 fb0b 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
}
 8002436:	b00c      	add	sp, #48	; 0x30
 8002438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        APP_LOG(TS_OFF, VLEVEL_M,
 800243c:	7c02      	ldrb	r2, [r0, #16]
 800243e:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
 8002442:	f990 0014 	ldrsb.w	r0, [r0, #20]
 8002446:	7d9c      	ldrb	r4, [r3, #22]
 8002448:	7ddd      	ldrb	r5, [r3, #23]
 800244a:	7e1e      	ldrb	r6, [r3, #24]
 800244c:	7e5f      	ldrb	r7, [r3, #25]
 800244e:	f893 c01a 	ldrb.w	ip, [r3, #26]
 8002452:	f893 e01b 	ldrb.w	lr, [r3, #27]
 8002456:	f893 801c 	ldrb.w	r8, [r3, #28]
 800245a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800245e:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 8002462:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8002466:	9708      	str	r7, [sp, #32]
 8002468:	9607      	str	r6, [sp, #28]
 800246a:	9506      	str	r5, [sp, #24]
 800246c:	9405      	str	r4, [sp, #20]
 800246e:	685c      	ldr	r4, [r3, #4]
 8002470:	9404      	str	r4, [sp, #16]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	9303      	str	r3, [sp, #12]
 8002476:	9002      	str	r0, [sp, #8]
 8002478:	9101      	str	r1, [sp, #4]
 800247a:	9200      	str	r2, [sp, #0]
 800247c:	4b08      	ldr	r3, [pc, #32]	; (80024a0 <OnBeaconStatusChange+0x8c>)
 800247e:	2200      	movs	r2, #0
 8002480:	4611      	mov	r1, r2
 8002482:	2002      	movs	r0, #2
 8002484:	f010 fae2 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
        break;
 8002488:	e7d5      	b.n	8002436 <OnBeaconStatusChange+0x22>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800248a:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <OnBeaconStatusChange+0x90>)
 800248c:	2200      	movs	r2, #0
 800248e:	4611      	mov	r1, r2
 8002490:	2002      	movs	r0, #2
 8002492:	f010 fadb 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
}
 8002496:	e7ce      	b.n	8002436 <OnBeaconStatusChange+0x22>
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	080141e4 	.word	0x080141e4
 80024a0:	080141fc 	.word	0x080141fc
 80024a4:	08014270 	.word	0x08014270

080024a8 <OnClassChange>:
{
 80024a8:	b500      	push	{lr}
 80024aa:	b083      	sub	sp, #12
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 80024ac:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <OnClassChange+0x1c>)
 80024ae:	5c1b      	ldrb	r3, [r3, r0]
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <OnClassChange+0x20>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	4611      	mov	r1, r2
 80024b8:	2002      	movs	r0, #2
 80024ba:	f010 fac7 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
}
 80024be:	b003      	add	sp, #12
 80024c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80024c4:	080142ac 	.word	0x080142ac
 80024c8:	08014290 	.word	0x08014290

080024cc <OnNvmDataChange>:

  /* USER CODE END StoreContext_Last */
}

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 80024cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 80024ce:	2801      	cmp	r0, #1
 80024d0:	d006      	beq.n	80024e0 <OnNvmDataChange+0x14>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 80024d2:	4b07      	ldr	r3, [pc, #28]	; (80024f0 <OnNvmDataChange+0x24>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	4611      	mov	r1, r2
 80024d8:	2002      	movs	r0, #2
 80024da:	f010 fab7 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 80024de:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 80024e0:	4b04      	ldr	r3, [pc, #16]	; (80024f4 <OnNvmDataChange+0x28>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	4611      	mov	r1, r2
 80024e6:	2002      	movs	r0, #2
 80024e8:	f010 fab0 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
 80024ec:	e7f7      	b.n	80024de <OnNvmDataChange+0x12>
 80024ee:	bf00      	nop
 80024f0:	080142c4 	.word	0x080142c4
 80024f4:	080142b0 	.word	0x080142b0

080024f8 <OnTxTimerEvent>:
{
 80024f8:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 80024fa:	2100      	movs	r1, #0
 80024fc:	2002      	movs	r0, #2
 80024fe:	f010 fbcf 	bl	8012ca0 <UTIL_SEQ_SetTask>
  UTIL_TIMER_Start(&TxTimer);
 8002502:	4802      	ldr	r0, [pc, #8]	; (800250c <OnTxTimerEvent+0x14>)
 8002504:	f010 fe50 	bl	80131a8 <UTIL_TIMER_Start>
}
 8002508:	bd08      	pop	{r3, pc}
 800250a:	bf00      	nop
 800250c:	20000620 	.word	0x20000620

08002510 <OnMacProcessNotify>:
{
 8002510:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 8002512:	2100      	movs	r1, #0
 8002514:	2001      	movs	r0, #1
 8002516:	f010 fbc3 	bl	8012ca0 <UTIL_SEQ_SetTask>
}
 800251a:	bd08      	pop	{r3, pc}

0800251c <OnSystemReset>:
{
 800251c:	b508      	push	{r3, lr}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800251e:	f006 fdd5 	bl	80090cc <LmHandlerHalt>
 8002522:	b100      	cbz	r0, 8002526 <OnSystemReset+0xa>
}
 8002524:	bd08      	pop	{r3, pc}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002526:	f006 fa53 	bl	80089d0 <LmHandlerJoinStatus>
 800252a:	2801      	cmp	r0, #1
 800252c:	d1fa      	bne.n	8002524 <OnSystemReset+0x8>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800252e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002532:	4905      	ldr	r1, [pc, #20]	; (8002548 <OnSystemReset+0x2c>)
 8002534:	68ca      	ldr	r2, [r1, #12]
 8002536:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800253a:	4b04      	ldr	r3, [pc, #16]	; (800254c <OnSystemReset+0x30>)
 800253c:	4313      	orrs	r3, r2
 800253e:	60cb      	str	r3, [r1, #12]
 8002540:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002544:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8002546:	e7fd      	b.n	8002544 <OnSystemReset+0x28>
 8002548:	e000ed00 	.word	0xe000ed00
 800254c:	05fa0004 	.word	0x05fa0004

08002550 <OnTxPeriodicityChanged>:
{
 8002550:	b510      	push	{r4, lr}
  TxPeriodicity = periodicity;
 8002552:	4b09      	ldr	r3, [pc, #36]	; (8002578 <OnTxPeriodicityChanged+0x28>)
 8002554:	6018      	str	r0, [r3, #0]
  if (TxPeriodicity == 0)
 8002556:	b910      	cbnz	r0, 800255e <OnTxPeriodicityChanged+0xe>
    TxPeriodicity = APP_TX_DUTYCYCLE;
 8002558:	f242 7210 	movw	r2, #10000	; 0x2710
 800255c:	601a      	str	r2, [r3, #0]
  UTIL_TIMER_Stop(&TxTimer);
 800255e:	4c07      	ldr	r4, [pc, #28]	; (800257c <OnTxPeriodicityChanged+0x2c>)
 8002560:	4620      	mov	r0, r4
 8002562:	f010 fdc7 	bl	80130f4 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 8002566:	4b04      	ldr	r3, [pc, #16]	; (8002578 <OnTxPeriodicityChanged+0x28>)
 8002568:	6819      	ldr	r1, [r3, #0]
 800256a:	4620      	mov	r0, r4
 800256c:	f010 fe62 	bl	8013234 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 8002570:	4620      	mov	r0, r4
 8002572:	f010 fe19 	bl	80131a8 <UTIL_TIMER_Start>
}
 8002576:	bd10      	pop	{r4, pc}
 8002578:	2000006c 	.word	0x2000006c
 800257c:	20000620 	.word	0x20000620

08002580 <OnTxData>:
  if ((params != NULL))
 8002580:	2800      	cmp	r0, #0
 8002582:	d042      	beq.n	800260a <OnTxData+0x8a>
{
 8002584:	b510      	push	{r4, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	4604      	mov	r4, r0
    if (params->IsMcpsConfirm != 0)
 800258a:	7803      	ldrb	r3, [r0, #0]
 800258c:	b90b      	cbnz	r3, 8002592 <OnTxData+0x12>
}
 800258e:	b004      	add	sp, #16
 8002590:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 8002592:	2201      	movs	r2, #1
 8002594:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002598:	481c      	ldr	r0, [pc, #112]	; (800260c <OnTxData+0x8c>)
 800259a:	f002 fe1d 	bl	80051d8 <HAL_GPIO_WritePin>
      UTIL_TIMER_Start(&TxLedTimer);
 800259e:	481c      	ldr	r0, [pc, #112]	; (8002610 <OnTxData+0x90>)
 80025a0:	f010 fe02 	bl	80131a8 <UTIL_TIMER_Start>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 80025a4:	4b1b      	ldr	r3, [pc, #108]	; (8002614 <OnTxData+0x94>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	4611      	mov	r1, r2
 80025aa:	2002      	movs	r0, #2
 80025ac:	f010 fa4e 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 80025b0:	7c23      	ldrb	r3, [r4, #16]
 80025b2:	f994 200a 	ldrsb.w	r2, [r4, #10]
 80025b6:	f994 1018 	ldrsb.w	r1, [r4, #24]
 80025ba:	9103      	str	r1, [sp, #12]
 80025bc:	9202      	str	r2, [sp, #8]
 80025be:	9301      	str	r3, [sp, #4]
 80025c0:	68e3      	ldr	r3, [r4, #12]
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	4b14      	ldr	r3, [pc, #80]	; (8002618 <OnTxData+0x98>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	4611      	mov	r1, r2
 80025ca:	2003      	movs	r0, #3
 80025cc:	f010 fa3e 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 80025d0:	4b12      	ldr	r3, [pc, #72]	; (800261c <OnTxData+0x9c>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	4611      	mov	r1, r2
 80025d6:	2003      	movs	r0, #3
 80025d8:	f010 fa38 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 80025dc:	7a23      	ldrb	r3, [r4, #8]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d10c      	bne.n	80025fc <OnTxData+0x7c>
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 80025e2:	7a63      	ldrb	r3, [r4, #9]
 80025e4:	b143      	cbz	r3, 80025f8 <OnTxData+0x78>
 80025e6:	4b0e      	ldr	r3, [pc, #56]	; (8002620 <OnTxData+0xa0>)
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	4b0e      	ldr	r3, [pc, #56]	; (8002624 <OnTxData+0xa4>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	4611      	mov	r1, r2
 80025f0:	2003      	movs	r0, #3
 80025f2:	f010 fa2b 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
 80025f6:	e7ca      	b.n	800258e <OnTxData+0xe>
 80025f8:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <OnTxData+0xa8>)
 80025fa:	e7f5      	b.n	80025e8 <OnTxData+0x68>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 80025fc:	4b0b      	ldr	r3, [pc, #44]	; (800262c <OnTxData+0xac>)
 80025fe:	2200      	movs	r2, #0
 8002600:	4611      	mov	r1, r2
 8002602:	2003      	movs	r0, #3
 8002604:	f010 fa22 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
}
 8002608:	e7c1      	b.n	800258e <OnTxData+0xe>
 800260a:	4770      	bx	lr
 800260c:	48000400 	.word	0x48000400
 8002610:	20000608 	.word	0x20000608
 8002614:	080142e4 	.word	0x080142e4
 8002618:	08014318 	.word	0x08014318
 800261c:	0801434c 	.word	0x0801434c
 8002620:	080142e0 	.word	0x080142e0
 8002624:	0801435c 	.word	0x0801435c
 8002628:	080142d8 	.word	0x080142d8
 800262c:	08014370 	.word	0x08014370

08002630 <OnJoinRequest>:
  if (joinParams != NULL)
 8002630:	b358      	cbz	r0, 800268a <OnJoinRequest+0x5a>
{
 8002632:	b510      	push	{r4, lr}
 8002634:	4604      	mov	r4, r0
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 8002636:	f990 3005 	ldrsb.w	r3, [r0, #5]
 800263a:	b9fb      	cbnz	r3, 800267c <OnJoinRequest+0x4c>
      UTIL_TIMER_Stop(&JoinLedTimer);
 800263c:	4813      	ldr	r0, [pc, #76]	; (800268c <OnJoinRequest+0x5c>)
 800263e:	f010 fd59 	bl	80130f4 <UTIL_TIMER_Stop>
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002642:	2200      	movs	r2, #0
 8002644:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002648:	4811      	ldr	r0, [pc, #68]	; (8002690 <OnJoinRequest+0x60>)
 800264a:	f002 fdc5 	bl	80051d8 <HAL_GPIO_WritePin>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800264e:	4b11      	ldr	r3, [pc, #68]	; (8002694 <OnJoinRequest+0x64>)
 8002650:	2200      	movs	r2, #0
 8002652:	4611      	mov	r1, r2
 8002654:	2002      	movs	r0, #2
 8002656:	f010 f9f9 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800265a:	79a3      	ldrb	r3, [r4, #6]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d006      	beq.n	800266e <OnJoinRequest+0x3e>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 8002660:	4b0d      	ldr	r3, [pc, #52]	; (8002698 <OnJoinRequest+0x68>)
 8002662:	2200      	movs	r2, #0
 8002664:	4611      	mov	r1, r2
 8002666:	2002      	movs	r0, #2
 8002668:	f010 f9f0 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
 800266c:	e00c      	b.n	8002688 <OnJoinRequest+0x58>
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800266e:	4b0b      	ldr	r3, [pc, #44]	; (800269c <OnJoinRequest+0x6c>)
 8002670:	2200      	movs	r2, #0
 8002672:	4611      	mov	r1, r2
 8002674:	2002      	movs	r0, #2
 8002676:	f010 f9e9 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
 800267a:	e005      	b.n	8002688 <OnJoinRequest+0x58>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800267c:	4b08      	ldr	r3, [pc, #32]	; (80026a0 <OnJoinRequest+0x70>)
 800267e:	2200      	movs	r2, #0
 8002680:	4611      	mov	r1, r2
 8002682:	2002      	movs	r0, #2
 8002684:	f010 f9e2 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
}
 8002688:	bd10      	pop	{r4, pc}
 800268a:	4770      	bx	lr
 800268c:	200005c0 	.word	0x200005c0
 8002690:	48000400 	.word	0x48000400
 8002694:	08014380 	.word	0x08014380
 8002698:	080143b8 	.word	0x080143b8
 800269c:	08014398 	.word	0x08014398
 80026a0:	080143d8 	.word	0x080143d8

080026a4 <OnStopJoinTimerEvent>:
{
 80026a4:	b510      	push	{r4, lr}
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 80026a6:	4b0e      	ldr	r3, [pc, #56]	; (80026e0 <OnStopJoinTimerEvent+0x3c>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d013      	beq.n	80026d6 <OnStopJoinTimerEvent+0x32>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 80026ae:	4c0d      	ldr	r4, [pc, #52]	; (80026e4 <OnStopJoinTimerEvent+0x40>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026b6:	4620      	mov	r0, r4
 80026b8:	f002 fd8e 	bl	80051d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 80026bc:	2200      	movs	r2, #0
 80026be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026c2:	4620      	mov	r0, r4
 80026c4:	f002 fd88 	bl	80051d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 80026c8:	2200      	movs	r2, #0
 80026ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026ce:	4620      	mov	r0, r4
 80026d0:	f002 fd82 	bl	80051d8 <HAL_GPIO_WritePin>
}
 80026d4:	bd10      	pop	{r4, pc}
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 80026d6:	2100      	movs	r1, #0
 80026d8:	2008      	movs	r0, #8
 80026da:	f010 fae1 	bl	8012ca0 <UTIL_SEQ_SetTask>
 80026de:	e7e6      	b.n	80026ae <OnStopJoinTimerEvent+0xa>
 80026e0:	20000000 	.word	0x20000000
 80026e4:	48000400 	.word	0x48000400

080026e8 <OnRxTimerLedEvent>:
{
 80026e8:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 80026ea:	2200      	movs	r2, #0
 80026ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026f0:	4801      	ldr	r0, [pc, #4]	; (80026f8 <OnRxTimerLedEvent+0x10>)
 80026f2:	f002 fd71 	bl	80051d8 <HAL_GPIO_WritePin>
}
 80026f6:	bd08      	pop	{r3, pc}
 80026f8:	48000400 	.word	0x48000400

080026fc <OnTxTimerLedEvent>:
{
 80026fc:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 80026fe:	2200      	movs	r2, #0
 8002700:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002704:	4801      	ldr	r0, [pc, #4]	; (800270c <OnTxTimerLedEvent+0x10>)
 8002706:	f002 fd67 	bl	80051d8 <HAL_GPIO_WritePin>
}
 800270a:	bd08      	pop	{r3, pc}
 800270c:	48000400 	.word	0x48000400

08002710 <OnRxData>:
  if (params != NULL)
 8002710:	2900      	cmp	r1, #0
 8002712:	d06e      	beq.n	80027f2 <OnRxData+0xe2>
{
 8002714:	b570      	push	{r4, r5, r6, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	4604      	mov	r4, r0
 800271a:	460d      	mov	r5, r1
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 800271c:	2201      	movs	r2, #1
 800271e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002722:	4834      	ldr	r0, [pc, #208]	; (80027f4 <OnRxData+0xe4>)
 8002724:	f002 fd58 	bl	80051d8 <HAL_GPIO_WritePin>
    UTIL_TIMER_Start(&RxLedTimer);
 8002728:	4833      	ldr	r0, [pc, #204]	; (80027f8 <OnRxData+0xe8>)
 800272a:	f010 fd3d 	bl	80131a8 <UTIL_TIMER_Start>
    if (params->IsMcpsIndication)
 800272e:	782e      	ldrb	r6, [r5, #0]
 8002730:	2e00      	cmp	r6, #0
 8002732:	d042      	beq.n	80027ba <OnRxData+0xaa>
      if (appData != NULL)
 8002734:	2c00      	cmp	r4, #0
 8002736:	d03f      	beq.n	80027b8 <OnRxData+0xa8>
        RxPort = appData->Port;
 8002738:	7826      	ldrb	r6, [r4, #0]
        if (appData->Buffer != NULL)
 800273a:	6863      	ldr	r3, [r4, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d03c      	beq.n	80027ba <OnRxData+0xaa>
          switch (appData->Port)
 8002740:	2e02      	cmp	r6, #2
 8002742:	d016      	beq.n	8002772 <OnRxData+0x62>
 8002744:	2e03      	cmp	r6, #3
 8002746:	d138      	bne.n	80027ba <OnRxData+0xaa>
              if (appData->BufferSize == 1)
 8002748:	7862      	ldrb	r2, [r4, #1]
 800274a:	2a01      	cmp	r2, #1
 800274c:	d135      	bne.n	80027ba <OnRxData+0xaa>
                switch (appData->Buffer[0])
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d006      	beq.n	8002762 <OnRxData+0x52>
 8002754:	2b02      	cmp	r3, #2
 8002756:	d008      	beq.n	800276a <OnRxData+0x5a>
 8002758:	bb7b      	cbnz	r3, 80027ba <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_A);
 800275a:	2000      	movs	r0, #0
 800275c:	f006 f9ec 	bl	8008b38 <LmHandlerRequestClass>
                    break;
 8002760:	e02b      	b.n	80027ba <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_B);
 8002762:	2001      	movs	r0, #1
 8002764:	f006 f9e8 	bl	8008b38 <LmHandlerRequestClass>
                    break;
 8002768:	e027      	b.n	80027ba <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_C);
 800276a:	2002      	movs	r0, #2
 800276c:	f006 f9e4 	bl	8008b38 <LmHandlerRequestClass>
                    break;
 8002770:	e023      	b.n	80027ba <OnRxData+0xaa>
              if (appData->BufferSize == 1)
 8002772:	7862      	ldrb	r2, [r4, #1]
 8002774:	2a01      	cmp	r2, #1
 8002776:	d120      	bne.n	80027ba <OnRxData+0xaa>
                AppLedStateOn = appData->Buffer[0] & 0x01;
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	4a1f      	ldr	r2, [pc, #124]	; (80027fc <OnRxData+0xec>)
 8002780:	7013      	strb	r3, [r2, #0]
                if (AppLedStateOn == RESET)
 8002782:	b963      	cbnz	r3, 800279e <OnRxData+0x8e>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 8002784:	4b1e      	ldr	r3, [pc, #120]	; (8002800 <OnRxData+0xf0>)
 8002786:	2200      	movs	r2, #0
 8002788:	4611      	mov	r1, r2
 800278a:	2003      	movs	r0, #3
 800278c:	f010 f95e 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002790:	2200      	movs	r2, #0
 8002792:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002796:	4817      	ldr	r0, [pc, #92]	; (80027f4 <OnRxData+0xe4>)
 8002798:	f002 fd1e 	bl	80051d8 <HAL_GPIO_WritePin>
 800279c:	e00d      	b.n	80027ba <OnRxData+0xaa>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800279e:	4b19      	ldr	r3, [pc, #100]	; (8002804 <OnRxData+0xf4>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	4611      	mov	r1, r2
 80027a4:	2003      	movs	r0, #3
 80027a6:	f010 f951 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 80027aa:	2201      	movs	r2, #1
 80027ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80027b0:	4810      	ldr	r0, [pc, #64]	; (80027f4 <OnRxData+0xe4>)
 80027b2:	f002 fd11 	bl	80051d8 <HAL_GPIO_WritePin>
 80027b6:	e000      	b.n	80027ba <OnRxData+0xaa>
  uint8_t RxPort = 0;
 80027b8:	2600      	movs	r6, #0
    if (params->RxSlot < RX_SLOT_NONE)
 80027ba:	7c2b      	ldrb	r3, [r5, #16]
 80027bc:	2b05      	cmp	r3, #5
 80027be:	d901      	bls.n	80027c4 <OnRxData+0xb4>
}
 80027c0:	b006      	add	sp, #24
 80027c2:	bd70      	pop	{r4, r5, r6, pc}
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 80027c4:	f995 2008 	ldrsb.w	r2, [r5, #8]
 80027c8:	f995 1009 	ldrsb.w	r1, [r5, #9]
 80027cc:	f995 000a 	ldrsb.w	r0, [r5, #10]
 80027d0:	9005      	str	r0, [sp, #20]
 80027d2:	9104      	str	r1, [sp, #16]
 80027d4:	490c      	ldr	r1, [pc, #48]	; (8002808 <OnRxData+0xf8>)
 80027d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80027da:	9303      	str	r3, [sp, #12]
 80027dc:	9202      	str	r2, [sp, #8]
 80027de:	9601      	str	r6, [sp, #4]
 80027e0:	68eb      	ldr	r3, [r5, #12]
 80027e2:	9300      	str	r3, [sp, #0]
 80027e4:	4b09      	ldr	r3, [pc, #36]	; (800280c <OnRxData+0xfc>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	4611      	mov	r1, r2
 80027ea:	2003      	movs	r0, #3
 80027ec:	f010 f92e 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
}
 80027f0:	e7e6      	b.n	80027c0 <OnRxData+0xb0>
 80027f2:	4770      	bx	lr
 80027f4:	48000400 	.word	0x48000400
 80027f8:	200005d8 	.word	0x200005d8
 80027fc:	200005be 	.word	0x200005be
 8002800:	080143f4 	.word	0x080143f4
 8002804:	08014400 	.word	0x08014400
 8002808:	0801460c 	.word	0x0801460c
 800280c:	0801440c 	.word	0x0801440c

08002810 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8002810:	b538      	push	{r3, r4, r5, lr}
 8002812:	4605      	mov	r5, r0
 8002814:	460c      	mov	r4, r1
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (HAL_FLASH_Unlock() == HAL_OK)
 8002816:	f002 fa37 	bl	8004c88 <HAL_FLASH_Unlock>
 800281a:	b100      	cbz	r0, 800281e <OnStoreContextRequest+0xe>
    HAL_FLASH_Lock();
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800281c:	bd38      	pop	{r3, r4, r5, pc}
    if (FLASH_IF_EraseByPages(PAGE(LORAWAN_NVM_BASE_ADDRESS), 1, 0U) == FLASH_OK)
 800281e:	4b0f      	ldr	r3, [pc, #60]	; (800285c <OnStoreContextRequest+0x4c>)
 8002820:	f8d3 05e0 	ldr.w	r0, [r3, #1504]	; 0x5e0
 8002824:	4b0e      	ldr	r3, [pc, #56]	; (8002860 <OnStoreContextRequest+0x50>)
 8002826:	ea03 2080 	and.w	r0, r3, r0, lsl #10
 800282a:	f44f 337c 	mov.w	r3, #258048	; 0x3f000
 800282e:	fbb3 f3f0 	udiv	r3, r3, r0
 8002832:	fb00 f303 	mul.w	r3, r0, r3
 8002836:	f5c3 337c 	rsb	r3, r3, #258048	; 0x3f000
 800283a:	2200      	movs	r2, #0
 800283c:	2101      	movs	r1, #1
 800283e:	0ad8      	lsrs	r0, r3, #11
 8002840:	f7fe fd7e 	bl	8001340 <FLASH_IF_EraseByPages>
 8002844:	b110      	cbz	r0, 800284c <OnStoreContextRequest+0x3c>
    HAL_FLASH_Lock();
 8002846:	f002 fa37 	bl	8004cb8 <HAL_FLASH_Lock>
}
 800284a:	e7e7      	b.n	800281c <OnStoreContextRequest+0xc>
      FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (uint8_t *)nvm, nvm_size, NULL);
 800284c:	2300      	movs	r3, #0
 800284e:	4622      	mov	r2, r4
 8002850:	4629      	mov	r1, r5
 8002852:	4804      	ldr	r0, [pc, #16]	; (8002864 <OnStoreContextRequest+0x54>)
 8002854:	f7fe fd90 	bl	8001378 <FLASH_IF_Write>
 8002858:	e7f5      	b.n	8002846 <OnStoreContextRequest+0x36>
 800285a:	bf00      	nop
 800285c:	1fff7000 	.word	0x1fff7000
 8002860:	03fffc00 	.word	0x03fffc00
 8002864:	0803f000 	.word	0x0803f000

08002868 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8002868:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  UTIL_MEM_cpy_8(nvm, (void *)LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800286a:	b28a      	uxth	r2, r1
 800286c:	4901      	ldr	r1, [pc, #4]	; (8002874 <OnRestoreContextRequest+0xc>)
 800286e:	f010 fa03 	bl	8012c78 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 8002872:	bd08      	pop	{r3, pc}
 8002874:	0803f000 	.word	0x0803f000

08002878 <StopJoin>:
{
 8002878:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 800287a:	4c1e      	ldr	r4, [pc, #120]	; (80028f4 <StopJoin+0x7c>)
 800287c:	2201      	movs	r2, #1
 800287e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002882:	4620      	mov	r0, r4
 8002884:	f002 fca8 	bl	80051d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 8002888:	2201      	movs	r2, #1
 800288a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800288e:	4620      	mov	r0, r4
 8002890:	f002 fca2 	bl	80051d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 8002894:	2201      	movs	r2, #1
 8002896:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800289a:	4620      	mov	r0, r4
 800289c:	f002 fc9c 	bl	80051d8 <HAL_GPIO_WritePin>
  UTIL_TIMER_Stop(&TxTimer);
 80028a0:	4815      	ldr	r0, [pc, #84]	; (80028f8 <StopJoin+0x80>)
 80028a2:	f010 fc27 	bl	80130f4 <UTIL_TIMER_Stop>
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 80028a6:	f006 fc09 	bl	80090bc <LmHandlerStop>
 80028aa:	b148      	cbz	r0, 80028c0 <StopJoin+0x48>
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 80028ac:	4b13      	ldr	r3, [pc, #76]	; (80028fc <StopJoin+0x84>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	4611      	mov	r1, r2
 80028b2:	2002      	movs	r0, #2
 80028b4:	f010 f8ca 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Start(&StopJoinTimer);
 80028b8:	4811      	ldr	r0, [pc, #68]	; (8002900 <StopJoin+0x88>)
 80028ba:	f010 fc75 	bl	80131a8 <UTIL_TIMER_Start>
}
 80028be:	bd38      	pop	{r3, r4, r5, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 80028c0:	4b10      	ldr	r3, [pc, #64]	; (8002904 <StopJoin+0x8c>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	4611      	mov	r1, r2
 80028c6:	2002      	movs	r0, #2
 80028c8:	f010 f8c0 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_ABP;
 80028cc:	4c0e      	ldr	r4, [pc, #56]	; (8002908 <StopJoin+0x90>)
 80028ce:	2501      	movs	r5, #1
 80028d0:	7025      	strb	r5, [r4, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 80028d2:	4b0e      	ldr	r3, [pc, #56]	; (800290c <StopJoin+0x94>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	4611      	mov	r1, r2
 80028d8:	2002      	movs	r0, #2
 80028da:	f010 f8b7 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
    LmHandlerConfigure(&LmHandlerParams);
 80028de:	480c      	ldr	r0, [pc, #48]	; (8002910 <StopJoin+0x98>)
 80028e0:	f006 fa68 	bl	8008db4 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 80028e4:	4629      	mov	r1, r5
 80028e6:	7820      	ldrb	r0, [r4, #0]
 80028e8:	f005 fffa 	bl	80088e0 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 80028ec:	4802      	ldr	r0, [pc, #8]	; (80028f8 <StopJoin+0x80>)
 80028ee:	f010 fc5b 	bl	80131a8 <UTIL_TIMER_Start>
 80028f2:	e7e1      	b.n	80028b8 <StopJoin+0x40>
 80028f4:	48000400 	.word	0x48000400
 80028f8:	20000620 	.word	0x20000620
 80028fc:	08014454 	.word	0x08014454
 8002900:	200005f0 	.word	0x200005f0
 8002904:	08014474 	.word	0x08014474
 8002908:	20000000 	.word	0x20000000
 800290c:	08014488 	.word	0x08014488
 8002910:	20000058 	.word	0x20000058

08002914 <StoreContext>:
{
 8002914:	b508      	push	{r3, lr}
  status = LmHandlerNvmDataStore();
 8002916:	f006 fbe1 	bl	80090dc <LmHandlerNvmDataStore>
  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800291a:	f110 0f08 	cmn.w	r0, #8
 800291e:	d003      	beq.n	8002928 <StoreContext+0x14>
  else if (status == LORAMAC_HANDLER_ERROR)
 8002920:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002924:	d007      	beq.n	8002936 <StoreContext+0x22>
}
 8002926:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 8002928:	4b06      	ldr	r3, [pc, #24]	; (8002944 <StoreContext+0x30>)
 800292a:	2200      	movs	r2, #0
 800292c:	4611      	mov	r1, r2
 800292e:	2002      	movs	r0, #2
 8002930:	f010 f88c 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
 8002934:	e7f7      	b.n	8002926 <StoreContext+0x12>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 8002936:	4b04      	ldr	r3, [pc, #16]	; (8002948 <StoreContext+0x34>)
 8002938:	2200      	movs	r2, #0
 800293a:	4611      	mov	r1, r2
 800293c:	2002      	movs	r0, #2
 800293e:	f010 f885 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
}
 8002942:	e7f0      	b.n	8002926 <StoreContext+0x12>
 8002944:	080144a8 	.word	0x080144a8
 8002948:	080144c0 	.word	0x080144c0

0800294c <SendTxData>:
{
 800294c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800294e:	b089      	sub	sp, #36	; 0x24
  uint8_t batteryLevel = GetBatteryLevel();
 8002950:	f7ff f83a 	bl	80019c8 <GetBatteryLevel>
 8002954:	4604      	mov	r4, r0
  EnvSensors_Init();
 8002956:	f7ff f9c5 	bl	8001ce4 <EnvSensors_Init>
  EnvSensors_Read(&sensor_data);
 800295a:	a802      	add	r0, sp, #8
 800295c:	f7ff fa46 	bl	8001dec <EnvSensors_Read>
  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 8002960:	9400      	str	r4, [sp, #0]
 8002962:	4b63      	ldr	r3, [pc, #396]	; (8002af0 <SendTxData+0x1a4>)
 8002964:	2201      	movs	r2, #1
 8002966:	2100      	movs	r1, #0
 8002968:	2002      	movs	r0, #2
 800296a:	f010 f86f 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 800296e:	9803      	ldr	r0, [sp, #12]
 8002970:	f7fe f928 	bl	8000bc4 <__aeabi_f2iz>
 8002974:	b200      	sxth	r0, r0
 8002976:	9000      	str	r0, [sp, #0]
 8002978:	4b5e      	ldr	r3, [pc, #376]	; (8002af4 <SendTxData+0x1a8>)
 800297a:	2201      	movs	r2, #1
 800297c:	2100      	movs	r1, #0
 800297e:	2002      	movs	r0, #2
 8002980:	f010 f864 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "hum: %d\r\n", (int16_t)(sensor_data.humidity));
 8002984:	9804      	ldr	r0, [sp, #16]
 8002986:	f7fe f91d 	bl	8000bc4 <__aeabi_f2iz>
 800298a:	b200      	sxth	r0, r0
 800298c:	9000      	str	r0, [sp, #0]
 800298e:	4b5a      	ldr	r3, [pc, #360]	; (8002af8 <SendTxData+0x1ac>)
 8002990:	2201      	movs	r2, #1
 8002992:	2100      	movs	r1, #0
 8002994:	2002      	movs	r0, #2
 8002996:	f010 f859 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "pres: %d\r\n", (int16_t)(sensor_data.pressure));
 800299a:	9802      	ldr	r0, [sp, #8]
 800299c:	f7fe f912 	bl	8000bc4 <__aeabi_f2iz>
 80029a0:	b200      	sxth	r0, r0
 80029a2:	9000      	str	r0, [sp, #0]
 80029a4:	4b55      	ldr	r3, [pc, #340]	; (8002afc <SendTxData+0x1b0>)
 80029a6:	2201      	movs	r2, #1
 80029a8:	2100      	movs	r1, #0
 80029aa:	2002      	movs	r0, #2
 80029ac:	f010 f84e 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
  AppData.Port = LORAWAN_USER_APP_PORT;
 80029b0:	4c53      	ldr	r4, [pc, #332]	; (8002b00 <SendTxData+0x1b4>)
 80029b2:	2302      	movs	r3, #2
 80029b4:	7023      	strb	r3, [r4, #0]
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 80029b6:	4953      	ldr	r1, [pc, #332]	; (8002b04 <SendTxData+0x1b8>)
 80029b8:	9804      	ldr	r0, [sp, #16]
 80029ba:	f7fd ffb3 	bl	8000924 <__aeabi_fmul>
 80029be:	f7fe f927 	bl	8000c10 <__aeabi_f2uiz>
 80029c2:	b285      	uxth	r5, r0
  temperature = (int16_t)(sensor_data.temperature);
 80029c4:	9803      	ldr	r0, [sp, #12]
 80029c6:	f7fe f8fd 	bl	8000bc4 <__aeabi_f2iz>
 80029ca:	b206      	sxth	r6, r0
  pressure = (uint16_t)(sensor_data.pressure * 100 / 10); /* in hPa / 10 */
 80029cc:	494e      	ldr	r1, [pc, #312]	; (8002b08 <SendTxData+0x1bc>)
 80029ce:	9802      	ldr	r0, [sp, #8]
 80029d0:	f7fd ffa8 	bl	8000924 <__aeabi_fmul>
 80029d4:	494b      	ldr	r1, [pc, #300]	; (8002b04 <SendTxData+0x1b8>)
 80029d6:	f7fe f859 	bl	8000a8c <__aeabi_fdiv>
 80029da:	f7fe f919 	bl	8000c10 <__aeabi_f2uiz>
  AppData.Buffer[i++] = AppLedStateOn;
 80029de:	6863      	ldr	r3, [r4, #4]
 80029e0:	4a4a      	ldr	r2, [pc, #296]	; (8002b0c <SendTxData+0x1c0>)
 80029e2:	7812      	ldrb	r2, [r2, #0]
 80029e4:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 80029e6:	6863      	ldr	r3, [r4, #4]
 80029e8:	f3c0 2207 	ubfx	r2, r0, #8, #8
 80029ec:	705a      	strb	r2, [r3, #1]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 80029ee:	6863      	ldr	r3, [r4, #4]
 80029f0:	7098      	strb	r0, [r3, #2]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 80029f2:	6863      	ldr	r3, [r4, #4]
 80029f4:	70de      	strb	r6, [r3, #3]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 80029f6:	6863      	ldr	r3, [r4, #4]
 80029f8:	0a2a      	lsrs	r2, r5, #8
 80029fa:	711a      	strb	r2, [r3, #4]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 80029fc:	6863      	ldr	r3, [r4, #4]
 80029fe:	715d      	strb	r5, [r3, #5]
  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 8002a00:	4b43      	ldr	r3, [pc, #268]	; (8002b10 <SendTxData+0x1c4>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b08      	cmp	r3, #8
 8002a06:	d002      	beq.n	8002a0e <SendTxData+0xc2>
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d000      	beq.n	8002a0e <SendTxData+0xc2>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 8002a0c:	bb63      	cbnz	r3, 8002a68 <SendTxData+0x11c>
    AppData.Buffer[i++] = 0;
 8002a0e:	4a3c      	ldr	r2, [pc, #240]	; (8002b00 <SendTxData+0x1b4>)
 8002a10:	6851      	ldr	r1, [r2, #4]
 8002a12:	2300      	movs	r3, #0
 8002a14:	718b      	strb	r3, [r1, #6]
    AppData.Buffer[i++] = 0;
 8002a16:	6851      	ldr	r1, [r2, #4]
 8002a18:	71cb      	strb	r3, [r1, #7]
    AppData.Buffer[i++] = 0;
 8002a1a:	6852      	ldr	r2, [r2, #4]
 8002a1c:	7213      	strb	r3, [r2, #8]
    AppData.Buffer[i++] = 0;
 8002a1e:	7253      	strb	r3, [r2, #9]
 8002a20:	220a      	movs	r2, #10
  AppData.BufferSize = i;
 8002a22:	4b37      	ldr	r3, [pc, #220]	; (8002b00 <SendTxData+0x1b4>)
 8002a24:	705a      	strb	r2, [r3, #1]
  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002a26:	4b3b      	ldr	r3, [pc, #236]	; (8002b14 <SendTxData+0x1c8>)
 8002a28:	7a5b      	ldrb	r3, [r3, #9]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d138      	bne.n	8002aa0 <SendTxData+0x154>
  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 8002a2e:	2200      	movs	r2, #0
 8002a30:	4b37      	ldr	r3, [pc, #220]	; (8002b10 <SendTxData+0x1c4>)
 8002a32:	78d9      	ldrb	r1, [r3, #3]
 8002a34:	4832      	ldr	r0, [pc, #200]	; (8002b00 <SendTxData+0x1b4>)
 8002a36:	f005 ffdd 	bl	80089f4 <LmHandlerSend>
  if (LORAMAC_HANDLER_SUCCESS == status)
 8002a3a:	2800      	cmp	r0, #0
 8002a3c:	d03e      	beq.n	8002abc <SendTxData+0x170>
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 8002a3e:	f110 0f06 	cmn.w	r0, #6
 8002a42:	d043      	beq.n	8002acc <SendTxData+0x180>
  UTIL_TIMER_Time_t nextTxIn = 0;
 8002a44:	2500      	movs	r5, #0
    UTIL_TIMER_Stop(&TxTimer);
 8002a46:	4c34      	ldr	r4, [pc, #208]	; (8002b18 <SendTxData+0x1cc>)
 8002a48:	4620      	mov	r0, r4
 8002a4a:	f010 fb53 	bl	80130f4 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 8002a4e:	4b33      	ldr	r3, [pc, #204]	; (8002b1c <SendTxData+0x1d0>)
 8002a50:	6819      	ldr	r1, [r3, #0]
 8002a52:	42a9      	cmp	r1, r5
 8002a54:	bf38      	it	cc
 8002a56:	4629      	movcc	r1, r5
 8002a58:	4620      	mov	r0, r4
 8002a5a:	f010 fbeb 	bl	8013234 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 8002a5e:	4620      	mov	r0, r4
 8002a60:	f010 fba2 	bl	80131a8 <UTIL_TIMER_Start>
}
 8002a64:	b009      	add	sp, #36	; 0x24
 8002a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    latitude = sensor_data.latitude;
 8002a68:	9d05      	ldr	r5, [sp, #20]
    longitude = sensor_data.longitude;
 8002a6a:	9c06      	ldr	r4, [sp, #24]
    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 8002a6c:	4e24      	ldr	r6, [pc, #144]	; (8002b00 <SendTxData+0x1b4>)
 8002a6e:	6877      	ldr	r7, [r6, #4]
 8002a70:	f7fe ffaa 	bl	80019c8 <GetBatteryLevel>
 8002a74:	71b8      	strb	r0, [r7, #6]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 8002a76:	6873      	ldr	r3, [r6, #4]
 8002a78:	f3c5 4207 	ubfx	r2, r5, #16, #8
 8002a7c:	71da      	strb	r2, [r3, #7]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 8002a7e:	6873      	ldr	r3, [r6, #4]
 8002a80:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8002a84:	721a      	strb	r2, [r3, #8]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 8002a86:	725d      	strb	r5, [r3, #9]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 8002a88:	f3c4 4207 	ubfx	r2, r4, #16, #8
 8002a8c:	729a      	strb	r2, [r3, #10]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 8002a8e:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8002a92:	72da      	strb	r2, [r3, #11]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 8002a94:	731c      	strb	r4, [r3, #12]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 8002a96:	2200      	movs	r2, #0
 8002a98:	735a      	strb	r2, [r3, #13]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 8002a9a:	739a      	strb	r2, [r3, #14]
 8002a9c:	220f      	movs	r2, #15
 8002a9e:	e7c0      	b.n	8002a22 <SendTxData+0xd6>
  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002aa0:	f005 ff96 	bl	80089d0 <LmHandlerJoinStatus>
 8002aa4:	2801      	cmp	r0, #1
 8002aa6:	d1c2      	bne.n	8002a2e <SendTxData+0xe2>
    UTIL_TIMER_Stop(&JoinLedTimer);
 8002aa8:	481a      	ldr	r0, [pc, #104]	; (8002b14 <SendTxData+0x1c8>)
 8002aaa:	f010 fb23 	bl	80130f4 <UTIL_TIMER_Stop>
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ab4:	481a      	ldr	r0, [pc, #104]	; (8002b20 <SendTxData+0x1d4>)
 8002ab6:	f002 fb8f 	bl	80051d8 <HAL_GPIO_WritePin>
 8002aba:	e7b8      	b.n	8002a2e <SendTxData+0xe2>
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 8002abc:	4b19      	ldr	r3, [pc, #100]	; (8002b24 <SendTxData+0x1d8>)
 8002abe:	2201      	movs	r2, #1
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	4610      	mov	r0, r2
 8002ac4:	f00f ffc2 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Time_t nextTxIn = 0;
 8002ac8:	2500      	movs	r5, #0
 8002aca:	e7bc      	b.n	8002a46 <SendTxData+0xfa>
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 8002acc:	f005 ff7a 	bl	80089c4 <LmHandlerGetDutyCycleWaitTime>
    if (nextTxIn > 0)
 8002ad0:	4605      	mov	r5, r0
 8002ad2:	2800      	cmp	r0, #0
 8002ad4:	d0b7      	beq.n	8002a46 <SendTxData+0xfa>
      APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 8002ad6:	4b14      	ldr	r3, [pc, #80]	; (8002b28 <SendTxData+0x1dc>)
 8002ad8:	fba3 2300 	umull	r2, r3, r3, r0
 8002adc:	099b      	lsrs	r3, r3, #6
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	4b12      	ldr	r3, [pc, #72]	; (8002b2c <SendTxData+0x1e0>)
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	4610      	mov	r0, r2
 8002ae8:	f00f ffb0 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
 8002aec:	e7ab      	b.n	8002a46 <SendTxData+0xfa>
 8002aee:	bf00      	nop
 8002af0:	080144d8 	.word	0x080144d8
 8002af4:	080144e4 	.word	0x080144e4
 8002af8:	080144f0 	.word	0x080144f0
 8002afc:	080144fc 	.word	0x080144fc
 8002b00:	20000004 	.word	0x20000004
 8002b04:	41200000 	.word	0x41200000
 8002b08:	42c80000 	.word	0x42c80000
 8002b0c:	200005be 	.word	0x200005be
 8002b10:	20000058 	.word	0x20000058
 8002b14:	200005c0 	.word	0x200005c0
 8002b18:	20000620 	.word	0x20000620
 8002b1c:	2000006c 	.word	0x2000006c
 8002b20:	48000400 	.word	0x48000400
 8002b24:	08014508 	.word	0x08014508
 8002b28:	10624dd3 	.word	0x10624dd3
 8002b2c:	08014518 	.word	0x08014518

08002b30 <OnJoinTimerLedEvent>:
{
 8002b30:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
 8002b32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b36:	4802      	ldr	r0, [pc, #8]	; (8002b40 <OnJoinTimerLedEvent+0x10>)
 8002b38:	f002 fb53 	bl	80051e2 <HAL_GPIO_TogglePin>
}
 8002b3c:	bd08      	pop	{r3, pc}
 8002b3e:	bf00      	nop
 8002b40:	48000400 	.word	0x48000400

08002b44 <LoRaWAN_Init>:
{
 8002b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b48:	b086      	sub	sp, #24
  uint32_t feature_version = 0UL;
 8002b4a:	2400      	movs	r4, #0
 8002b4c:	9405      	str	r4, [sp, #20]
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 8002b4e:	9402      	str	r4, [sp, #8]
 8002b50:	2502      	movs	r5, #2
 8002b52:	9501      	str	r5, [sp, #4]
 8002b54:	2601      	movs	r6, #1
 8002b56:	9600      	str	r6, [sp, #0]
 8002b58:	4b4b      	ldr	r3, [pc, #300]	; (8002c88 <LoRaWAN_Init+0x144>)
 8002b5a:	4622      	mov	r2, r4
 8002b5c:	4621      	mov	r1, r4
 8002b5e:	4628      	mov	r0, r5
 8002b60:	f00f ff74 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 8002b64:	9402      	str	r4, [sp, #8]
 8002b66:	2704      	movs	r7, #4
 8002b68:	9701      	str	r7, [sp, #4]
 8002b6a:	9500      	str	r5, [sp, #0]
 8002b6c:	4b47      	ldr	r3, [pc, #284]	; (8002c8c <LoRaWAN_Init+0x148>)
 8002b6e:	4622      	mov	r2, r4
 8002b70:	4621      	mov	r1, r4
 8002b72:	4628      	mov	r0, r5
 8002b74:	f00f ff6a 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 8002b78:	9402      	str	r4, [sp, #8]
 8002b7a:	9501      	str	r5, [sp, #4]
 8002b7c:	9600      	str	r6, [sp, #0]
 8002b7e:	4b44      	ldr	r3, [pc, #272]	; (8002c90 <LoRaWAN_Init+0x14c>)
 8002b80:	4622      	mov	r2, r4
 8002b82:	4621      	mov	r1, r4
 8002b84:	4628      	mov	r0, r5
 8002b86:	f00f ff61 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 8002b8a:	a905      	add	r1, sp, #20
 8002b8c:	4620      	mov	r0, r4
 8002b8e:	f006 fa7f 	bl	8009090 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 8002b92:	9b05      	ldr	r3, [sp, #20]
 8002b94:	0e1a      	lsrs	r2, r3, #24
 8002b96:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002b9a:	9102      	str	r1, [sp, #8]
 8002b9c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002ba0:	9301      	str	r3, [sp, #4]
 8002ba2:	9200      	str	r2, [sp, #0]
 8002ba4:	4b3b      	ldr	r3, [pc, #236]	; (8002c94 <LoRaWAN_Init+0x150>)
 8002ba6:	4622      	mov	r2, r4
 8002ba8:	4621      	mov	r1, r4
 8002baa:	4628      	mov	r0, r5
 8002bac:	f00f ff4e 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 8002bb0:	a905      	add	r1, sp, #20
 8002bb2:	4630      	mov	r0, r6
 8002bb4:	f006 fa6c 	bl	8009090 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 8002bb8:	9b05      	ldr	r3, [sp, #20]
 8002bba:	0e1a      	lsrs	r2, r3, #24
 8002bbc:	b2d9      	uxtb	r1, r3
 8002bbe:	9103      	str	r1, [sp, #12]
 8002bc0:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002bc4:	9102      	str	r1, [sp, #8]
 8002bc6:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002bca:	9301      	str	r3, [sp, #4]
 8002bcc:	9200      	str	r2, [sp, #0]
 8002bce:	4b32      	ldr	r3, [pc, #200]	; (8002c98 <LoRaWAN_Init+0x154>)
 8002bd0:	4622      	mov	r2, r4
 8002bd2:	4621      	mov	r1, r4
 8002bd4:	4628      	mov	r0, r5
 8002bd6:	f00f ff39 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8002bda:	9400      	str	r4, [sp, #0]
 8002bdc:	4b2f      	ldr	r3, [pc, #188]	; (8002c9c <LoRaWAN_Init+0x158>)
 8002bde:	4622      	mov	r2, r4
 8002be0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002be4:	482e      	ldr	r0, [pc, #184]	; (8002ca0 <LoRaWAN_Init+0x15c>)
 8002be6:	f010 fa27 	bl	8013038 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8002bea:	9400      	str	r4, [sp, #0]
 8002bec:	4b2d      	ldr	r3, [pc, #180]	; (8002ca4 <LoRaWAN_Init+0x160>)
 8002bee:	4622      	mov	r2, r4
 8002bf0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002bf4:	482c      	ldr	r0, [pc, #176]	; (8002ca8 <LoRaWAN_Init+0x164>)
 8002bf6:	f010 fa1f 	bl	8013038 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8002bfa:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8002cac <LoRaWAN_Init+0x168>
 8002bfe:	9400      	str	r4, [sp, #0]
 8002c00:	4b2b      	ldr	r3, [pc, #172]	; (8002cb0 <LoRaWAN_Init+0x16c>)
 8002c02:	4632      	mov	r2, r6
 8002c04:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002c08:	4640      	mov	r0, r8
 8002c0a:	f010 fa15 	bl	8013038 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 8002c0e:	9400      	str	r4, [sp, #0]
 8002c10:	4b28      	ldr	r3, [pc, #160]	; (8002cb4 <LoRaWAN_Init+0x170>)
 8002c12:	4622      	mov	r2, r4
 8002c14:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002c18:	4827      	ldr	r0, [pc, #156]	; (8002cb8 <LoRaWAN_Init+0x174>)
 8002c1a:	f010 fa0d 	bl	8013038 <UTIL_TIMER_Create>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8002c1e:	4a27      	ldr	r2, [pc, #156]	; (8002cbc <LoRaWAN_Init+0x178>)
 8002c20:	4621      	mov	r1, r4
 8002c22:	4630      	mov	r0, r6
 8002c24:	f010 f908 	bl	8012e38 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 8002c28:	4a25      	ldr	r2, [pc, #148]	; (8002cc0 <LoRaWAN_Init+0x17c>)
 8002c2a:	4621      	mov	r1, r4
 8002c2c:	4628      	mov	r0, r5
 8002c2e:	f010 f903 	bl	8012e38 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 8002c32:	4a24      	ldr	r2, [pc, #144]	; (8002cc4 <LoRaWAN_Init+0x180>)
 8002c34:	4621      	mov	r1, r4
 8002c36:	4638      	mov	r0, r7
 8002c38:	f010 f8fe 	bl	8012e38 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 8002c3c:	4a22      	ldr	r2, [pc, #136]	; (8002cc8 <LoRaWAN_Init+0x184>)
 8002c3e:	4621      	mov	r1, r4
 8002c40:	2008      	movs	r0, #8
 8002c42:	f010 f8f9 	bl	8012e38 <UTIL_SEQ_RegTask>
  LoraInfo_Init();
 8002c46:	f000 f85d 	bl	8002d04 <LoraInfo_Init>
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 8002c4a:	f04f 7181 	mov.w	r1, #16908288	; 0x1020000
 8002c4e:	481f      	ldr	r0, [pc, #124]	; (8002ccc <LoRaWAN_Init+0x188>)
 8002c50:	f006 f9e4 	bl	800901c <LmHandlerInit>
  LmHandlerConfigure(&LmHandlerParams);
 8002c54:	481e      	ldr	r0, [pc, #120]	; (8002cd0 <LoRaWAN_Init+0x18c>)
 8002c56:	f006 f8ad 	bl	8008db4 <LmHandlerConfigure>
  UTIL_TIMER_Start(&JoinLedTimer);
 8002c5a:	4640      	mov	r0, r8
 8002c5c:	f010 faa4 	bl	80131a8 <UTIL_TIMER_Start>
  LmHandlerJoin(ActivationType, ForceRejoin);
 8002c60:	4621      	mov	r1, r4
 8002c62:	4b1c      	ldr	r3, [pc, #112]	; (8002cd4 <LoRaWAN_Init+0x190>)
 8002c64:	7818      	ldrb	r0, [r3, #0]
 8002c66:	f005 fe3b 	bl	80088e0 <LmHandlerJoin>
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8002c6a:	4d1b      	ldr	r5, [pc, #108]	; (8002cd8 <LoRaWAN_Init+0x194>)
 8002c6c:	9400      	str	r4, [sp, #0]
 8002c6e:	4b1b      	ldr	r3, [pc, #108]	; (8002cdc <LoRaWAN_Init+0x198>)
 8002c70:	4622      	mov	r2, r4
 8002c72:	491b      	ldr	r1, [pc, #108]	; (8002ce0 <LoRaWAN_Init+0x19c>)
 8002c74:	6809      	ldr	r1, [r1, #0]
 8002c76:	4628      	mov	r0, r5
 8002c78:	f010 f9de 	bl	8013038 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 8002c7c:	4628      	mov	r0, r5
 8002c7e:	f010 fa93 	bl	80131a8 <UTIL_TIMER_Start>
}
 8002c82:	b006      	add	sp, #24
 8002c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c88:	08014538 	.word	0x08014538
 8002c8c:	0801455c 	.word	0x0801455c
 8002c90:	08014580 	.word	0x08014580
 8002c94:	080145a4 	.word	0x080145a4
 8002c98:	080145c8 	.word	0x080145c8
 8002c9c:	080026fd 	.word	0x080026fd
 8002ca0:	20000608 	.word	0x20000608
 8002ca4:	080026e9 	.word	0x080026e9
 8002ca8:	200005d8 	.word	0x200005d8
 8002cac:	200005c0 	.word	0x200005c0
 8002cb0:	08002b31 	.word	0x08002b31
 8002cb4:	080026a5 	.word	0x080026a5
 8002cb8:	200005f0 	.word	0x200005f0
 8002cbc:	08008af1 	.word	0x08008af1
 8002cc0:	0800294d 	.word	0x0800294d
 8002cc4:	08002915 	.word	0x08002915
 8002cc8:	08002879 	.word	0x08002879
 8002ccc:	2000000c 	.word	0x2000000c
 8002cd0:	20000058 	.word	0x20000058
 8002cd4:	20000000 	.word	0x20000000
 8002cd8:	20000620 	.word	0x20000620
 8002cdc:	080024f9 	.word	0x080024f9
 8002ce0:	2000006c 	.word	0x2000006c

08002ce4 <HAL_GPIO_EXTI_Callback>:
{
 8002ce4:	b508      	push	{r3, lr}
  switch (GPIO_Pin)
 8002ce6:	2802      	cmp	r0, #2
 8002ce8:	d002      	beq.n	8002cf0 <HAL_GPIO_EXTI_Callback+0xc>
 8002cea:	2840      	cmp	r0, #64	; 0x40
 8002cec:	d005      	beq.n	8002cfa <HAL_GPIO_EXTI_Callback+0x16>
}
 8002cee:	bd08      	pop	{r3, pc}
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	2008      	movs	r0, #8
 8002cf4:	f00f ffd4 	bl	8012ca0 <UTIL_SEQ_SetTask>
      break;
 8002cf8:	e7f9      	b.n	8002cee <HAL_GPIO_EXTI_Callback+0xa>
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	2004      	movs	r0, #4
 8002cfe:	f00f ffcf 	bl	8012ca0 <UTIL_SEQ_SetTask>
}
 8002d02:	e7f4      	b.n	8002cee <HAL_GPIO_EXTI_Callback+0xa>

08002d04 <LoraInfo_Init>:
/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ActivationMode = 0;
 8002d04:	4b06      	ldr	r3, [pc, #24]	; (8002d20 <LoraInfo_Init+0x1c>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 8002d0a:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 8002d0c:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 8002d0e:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 8002d10:	2220      	movs	r2, #32
 8002d12:	605a      	str	r2, [r3, #4]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865);
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915);
 8002d14:	f44f 7290 	mov.w	r2, #288	; 0x120
 8002d18:	605a      	str	r2, [r3, #4]
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
  loraInfo.ActivationMode = 3;
 8002d1a:	2203      	movs	r2, #3
 8002d1c:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8002d1e:	4770      	bx	lr
 8002d20:	20000638 	.word	0x20000638

08002d24 <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 8002d24:	4800      	ldr	r0, [pc, #0]	; (8002d28 <LoraInfo_GetPtr+0x4>)
 8002d26:	4770      	bx	lr
 8002d28:	20000638 	.word	0x20000638

08002d2c <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8002d2c:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 8002d2e:	f000 fec3 	bl	8003ab8 <BSP_RADIO_Init>
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002d32:	bd08      	pop	{r3, pc}

08002d34 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8002d34:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8002d36:	f000 ff01 	bl	8003b3c <BSP_RADIO_ConfigRFSwitch>
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8002d3a:	bd08      	pop	{r3, pc}

08002d3c <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8002d3c:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 8002d3e:	f000 ff4b 	bl	8003bd8 <BSP_RADIO_GetTxConfig>
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8002d42:	bd08      	pop	{r3, pc}

08002d44 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8002d44:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 8002d46:	f000 ff49 	bl	8003bdc <BSP_RADIO_IsTCXO>
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002d4a:	bd08      	pop	{r3, pc}

08002d4c <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8002d4c:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 8002d4e:	f000 ff47 	bl	8003be0 <BSP_RADIO_IsDCDC>
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002d52:	bd08      	pop	{r3, pc}

08002d54 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8002d54:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 8002d56:	f000 ff45 	bl	8003be4 <BSP_RADIO_GetRFOMaxPowerConfig>
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 8002d5a:	bd08      	pop	{r3, pc}

08002d5c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d5c:	480d      	ldr	r0, [pc, #52]	; (8002d94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002d5e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d60:	f000 ff45 	bl	8003bee <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d64:	480c      	ldr	r0, [pc, #48]	; (8002d98 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d66:	490d      	ldr	r1, [pc, #52]	; (8002d9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d68:	4a0d      	ldr	r2, [pc, #52]	; (8002da0 <LoopForever+0xe>)
  movs r3, #0
 8002d6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d6c:	e002      	b.n	8002d74 <LoopCopyDataInit>

08002d6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d72:	3304      	adds	r3, #4

08002d74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d78:	d3f9      	bcc.n	8002d6e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d7a:	4a0a      	ldr	r2, [pc, #40]	; (8002da4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d7c:	4c0a      	ldr	r4, [pc, #40]	; (8002da8 <LoopForever+0x16>)
  movs r3, #0
 8002d7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d80:	e001      	b.n	8002d86 <LoopFillZerobss>

08002d82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d84:	3204      	adds	r2, #4

08002d86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d88:	d3fb      	bcc.n	8002d82 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002d8a:	f010 fc19 	bl	80135c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d8e:	f7fe fcb0 	bl	80016f2 <main>

08002d92 <LoopForever>:

LoopForever:
    b LoopForever
 8002d92:	e7fe      	b.n	8002d92 <LoopForever>
  ldr   r0, =_estack
 8002d94:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002d98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d9c:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8002da0:	08015040 	.word	0x08015040
  ldr r2, =_sbss
 8002da4:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8002da8:	20001820 	.word	0x20001820

08002dac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002dac:	e7fe      	b.n	8002dac <ADC_IRQHandler>

08002dae <calc_temperature>:

/*!
 * @brief This internal API is used to calculate the temperature value.
 */
static int16_t calc_temperature(uint32_t temp_adc, struct bme680_dev *dev)
{
 8002dae:	b500      	push	{lr}
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 8002db0:	8acb      	ldrh	r3, [r1, #22]
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	ebc3 00e0 	rsb	r0, r3, r0, asr #3
 8002db8:	17c2      	asrs	r2, r0, #31
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 8002dba:	f9b1 c018 	ldrsh.w	ip, [r1, #24]
 8002dbe:	ea4f 7eec 	mov.w	lr, ip, asr #31
 8002dc2:	fb0c f302 	mul.w	r3, ip, r2
 8002dc6:	fb00 330e 	mla	r3, r0, lr, r3
 8002dca:	fbac ce00 	umull	ip, lr, ip, r0
 8002dce:	4473      	add	r3, lr
 8002dd0:	ea4f 2cdc 	mov.w	ip, ip, lsr #11
 8002dd4:	ea4c 5c43 	orr.w	ip, ip, r3, lsl #21
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 8002dd8:	0840      	lsrs	r0, r0, #1
 8002dda:	ea40 70c2 	orr.w	r0, r0, r2, lsl #31
 8002dde:	fb00 f302 	mul.w	r3, r0, r2
 8002de2:	fba0 0200 	umull	r0, r2, r0, r0
 8002de6:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8002dea:	0b03      	lsrs	r3, r0, #12
 8002dec:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8002df0:	1312      	asrs	r2, r2, #12
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8002df2:	f991 e01a 	ldrsb.w	lr, [r1, #26]
 8002df6:	ea4f 100e 	mov.w	r0, lr, lsl #4
 8002dfa:	ea4f 7eee 	mov.w	lr, lr, asr #31
 8002dfe:	fb00 f202 	mul.w	r2, r0, r2
 8002e02:	fb03 220e 	mla	r2, r3, lr, r2
 8002e06:	fba0 0303 	umull	r0, r3, r0, r3
 8002e0a:	4413      	add	r3, r2
 8002e0c:	0b80      	lsrs	r0, r0, #14
 8002e0e:	ea40 4083 	orr.w	r0, r0, r3, lsl #18
	dev->calib.t_fine = (int32_t) (var2 + var3);
 8002e12:	4460      	add	r0, ip
 8002e14:	6308      	str	r0, [r1, #48]	; 0x30
	calc_temp = (int16_t) (((dev->calib.t_fine * 5) + 128) >> 8);
 8002e16:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002e1a:	3080      	adds	r0, #128	; 0x80

	return calc_temp;
}
 8002e1c:	f340 200f 	sbfx	r0, r0, #8, #16
 8002e20:	f85d fb04 	ldr.w	pc, [sp], #4

08002e24 <calc_pressure>:

/*!
 * @brief This internal API is used to calculate the pressure value.
 */
static uint32_t calc_pressure(uint32_t pres_adc, const struct bme680_dev *dev)
{
 8002e24:	b510      	push	{r4, lr}
	int32_t var1;
	int32_t var2;
	int32_t var3;
	int32_t pressure_comp;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 8002e26:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8002e28:	105b      	asrs	r3, r3, #1
 8002e2a:	f5a3 4e7a 	sub.w	lr, r3, #64000	; 0xfa00
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8002e2e:	ea4f 02ae 	mov.w	r2, lr, asr #2
 8002e32:	fb02 f202 	mul.w	r2, r2, r2
 8002e36:	12d4      	asrs	r4, r2, #11
		(int32_t)dev->calib.par_p6) >> 2;
 8002e38:	f991 c026 	ldrsb.w	ip, [r1, #38]	; 0x26
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8002e3c:	fb0c f404 	mul.w	r4, ip, r4
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
 8002e40:	f9b1 c024 	ldrsh.w	ip, [r1, #36]	; 0x24
 8002e44:	fb0e fc0c 	mul.w	ip, lr, ip
 8002e48:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8002e4c:	eb0c 04a4 	add.w	r4, ip, r4, asr #2
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 8002e50:	f9b1 3022 	ldrsh.w	r3, [r1, #34]	; 0x22
 8002e54:	041b      	lsls	r3, r3, #16
 8002e56:	eb03 0ca4 	add.w	ip, r3, r4, asr #2
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8002e5a:	1352      	asrs	r2, r2, #13
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 8002e5c:	f991 3020 	ldrsb.w	r3, [r1, #32]
 8002e60:	015b      	lsls	r3, r3, #5
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8002e62:	fb03 f202 	mul.w	r2, r3, r2
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 8002e66:	f9b1 301e 	ldrsh.w	r3, [r1, #30]
 8002e6a:	fb0e f303 	mul.w	r3, lr, r3
 8002e6e:	105b      	asrs	r3, r3, #1
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8002e70:	eb03 03e2 	add.w	r3, r3, r2, asr #3
	var1 = var1 >> 18;
 8002e74:	149b      	asrs	r3, r3, #18
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 8002e76:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002e7a:	8b8a      	ldrh	r2, [r1, #28]
 8002e7c:	fb02 f303 	mul.w	r3, r2, r3
 8002e80:	13da      	asrs	r2, r3, #15
	pressure_comp = 1048576 - pres_adc;
 8002e82:	f5c0 1380 	rsb	r3, r0, #1048576	; 0x100000
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
 8002e86:	eba3 332c 	sub.w	r3, r3, ip, asr #12
 8002e8a:	f640 4035 	movw	r0, #3125	; 0xc35
 8002e8e:	fb00 f303 	mul.w	r3, r0, r3
	if (pressure_comp >= BME680_MAX_OVERFLOW_VAL)
 8002e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e96:	db24      	blt.n	8002ee2 <calc_pressure+0xbe>
		pressure_comp = ((pressure_comp / var1) << 1);
 8002e98:	fb93 f3f2 	sdiv	r3, r3, r2
 8002e9c:	005b      	lsls	r3, r3, #1
	else
		pressure_comp = ((pressure_comp << 1) / var1);
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 8002e9e:	f9b1 002a 	ldrsh.w	r0, [r1, #42]	; 0x2a
 8002ea2:	10da      	asrs	r2, r3, #3
 8002ea4:	fb02 f202 	mul.w	r2, r2, r2
		(pressure_comp >> 3)) >> 13)) >> 12;
 8002ea8:	1352      	asrs	r2, r2, #13
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 8002eaa:	fb02 f400 	mul.w	r4, r2, r0
	var2 = ((int32_t)(pressure_comp >> 2) *
 8002eae:	1098      	asrs	r0, r3, #2
		(int32_t)dev->calib.par_p8) >> 13;
 8002eb0:	f9b1 2028 	ldrsh.w	r2, [r1, #40]	; 0x28
	var2 = ((int32_t)(pressure_comp >> 2) *
 8002eb4:	fb02 f000 	mul.w	r0, r2, r0
 8002eb8:	1340      	asrs	r0, r0, #13
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8002eba:	121a      	asrs	r2, r3, #8
 8002ebc:	fb02 fc02 	mul.w	ip, r2, r2
 8002ec0:	fb0c f202 	mul.w	r2, ip, r2
		(int32_t)(pressure_comp >> 8) *
		(int32_t)dev->calib.par_p10) >> 17;
 8002ec4:	f891 c02c 	ldrb.w	ip, [r1, #44]	; 0x2c
		(int32_t)(pressure_comp >> 8) *
 8002ec8:	fb0c f202 	mul.w	r2, ip, r2

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8002ecc:	eb00 3024 	add.w	r0, r0, r4, asr #12
 8002ed0:	eb00 4062 	add.w	r0, r0, r2, asr #17
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 8002ed4:	f991 2027 	ldrsb.w	r2, [r1, #39]	; 0x27
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8002ed8:	eb00 10c2 	add.w	r0, r0, r2, lsl #7

	return (uint32_t)pressure_comp;

}
 8002edc:	eb03 1020 	add.w	r0, r3, r0, asr #4
 8002ee0:	bd10      	pop	{r4, pc}
		pressure_comp = ((pressure_comp << 1) / var1);
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	fb93 f3f2 	sdiv	r3, r3, r2
 8002ee8:	e7d9      	b.n	8002e9e <calc_pressure+0x7a>
	...

08002eec <calc_humidity>:

/*!
 * @brief This internal API is used to calculate the humidity value.
 */
static uint32_t calc_humidity(uint16_t hum_adc, const struct bme680_dev *dev)
{
 8002eec:	b570      	push	{r4, r5, r6, lr}
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 8002eee:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8002ef0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002ef4:	3380      	adds	r3, #128	; 0x80
 8002ef6:	ea4f 2c23 	mov.w	ip, r3, asr #8
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 8002efa:	890a      	ldrh	r2, [r1, #8]
 8002efc:	eba0 1002 	sub.w	r0, r0, r2, lsl #4
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
 8002f00:	f991 200c 	ldrsb.w	r2, [r1, #12]
 8002f04:	fb0c f202 	mul.w	r2, ip, r2
 8002f08:	4c28      	ldr	r4, [pc, #160]	; (8002fac <calc_humidity+0xc0>)
 8002f0a:	fb84 5302 	smull	r5, r3, r4, r2
 8002f0e:	17d2      	asrs	r2, r2, #31
 8002f10:	ebc2 1263 	rsb	r2, r2, r3, asr #5
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 8002f14:	eba0 0062 	sub.w	r0, r0, r2, asr #1
	var2 = ((int32_t) dev->calib.par_h2
 8002f18:	894d      	ldrh	r5, [r1, #10]
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8002f1a:	f991 e00d 	ldrsb.w	lr, [r1, #13]
 8002f1e:	fb0c fe0e 	mul.w	lr, ip, lr
 8002f22:	fb84 230e 	smull	r2, r3, r4, lr
 8002f26:	ea4f 7eee 	mov.w	lr, lr, asr #31
 8002f2a:	ebce 1e63 	rsb	lr, lr, r3, asr #5
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8002f2e:	f991 200e 	ldrsb.w	r2, [r1, #14]
 8002f32:	fb0c f202 	mul.w	r2, ip, r2
 8002f36:	fb84 3602 	smull	r3, r6, r4, r2
 8002f3a:	17d3      	asrs	r3, r2, #31
 8002f3c:	ebc3 1366 	rsb	r3, r3, r6, asr #5
 8002f40:	fb0c f303 	mul.w	r3, ip, r3
 8002f44:	119a      	asrs	r2, r3, #6
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 8002f46:	fb84 6202 	smull	r6, r2, r4, r2
 8002f4a:	17db      	asrs	r3, r3, #31
 8002f4c:	ebc3 1362 	rsb	r3, r3, r2, asr #5
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8002f50:	4473      	add	r3, lr
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 8002f52:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8002f56:	fb03 f505 	mul.w	r5, r3, r5
	var2 = ((int32_t) dev->calib.par_h2
 8002f5a:	12ad      	asrs	r5, r5, #10
	var3 = var1 * var2;
 8002f5c:	fb05 f000 	mul.w	r0, r5, r0
	var4 = (int32_t) dev->calib.par_h6 << 7;
 8002f60:	7bcd      	ldrb	r5, [r1, #15]
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8002f62:	f991 2010 	ldrsb.w	r2, [r1, #16]
 8002f66:	fb0c f302 	mul.w	r3, ip, r2
 8002f6a:	fb84 2403 	smull	r2, r4, r4, r3
 8002f6e:	17db      	asrs	r3, r3, #31
 8002f70:	ebc3 1364 	rsb	r3, r3, r4, asr #5
 8002f74:	eb03 13c5 	add.w	r3, r3, r5, lsl #7
 8002f78:	111b      	asrs	r3, r3, #4
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8002f7a:	1382      	asrs	r2, r0, #14
 8002f7c:	fb02 f202 	mul.w	r2, r2, r2
 8002f80:	1292      	asrs	r2, r2, #10
	var6 = (var4 * var5) >> 1;
 8002f82:	fb02 f303 	mul.w	r3, r2, r3
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 8002f86:	eb00 0363 	add.w	r3, r0, r3, asr #1
 8002f8a:	129b      	asrs	r3, r3, #10
 8002f8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f90:	fb02 f303 	mul.w	r3, r2, r3

	if (calc_hum > 100000) /* Cap at 100%rH */
 8002f94:	4a06      	ldr	r2, [pc, #24]	; (8002fb0 <calc_humidity+0xc4>)
 8002f96:	ebb2 3f23 	cmp.w	r2, r3, asr #12
 8002f9a:	db04      	blt.n	8002fa6 <calc_humidity+0xba>
 8002f9c:	1318      	asrs	r0, r3, #12
		calc_hum = 100000;
	else if (calc_hum < 0)
 8002f9e:	2800      	cmp	r0, #0
 8002fa0:	da02      	bge.n	8002fa8 <calc_humidity+0xbc>
		calc_hum = 0;
 8002fa2:	2000      	movs	r0, #0
 8002fa4:	e000      	b.n	8002fa8 <calc_humidity+0xbc>
		calc_hum = 100000;
 8002fa6:	4802      	ldr	r0, [pc, #8]	; (8002fb0 <calc_humidity+0xc4>)

	return (uint32_t) calc_hum;
}
 8002fa8:	bd70      	pop	{r4, r5, r6, pc}
 8002faa:	bf00      	nop
 8002fac:	51eb851f 	.word	0x51eb851f
 8002fb0:	000186a0 	.word	0x000186a0

08002fb4 <calc_gas_resistance>:

/*!
 * @brief This internal API is used to calculate the Gas Resistance value.
 */
static uint32_t calc_gas_resistance(uint16_t gas_res_adc, uint8_t gas_range, const struct bme680_dev *dev)
{
 8002fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fb6:	b0a1      	sub	sp, #132	; 0x84
 8002fb8:	4605      	mov	r5, r0
 8002fba:	460e      	mov	r6, r1
 8002fbc:	4617      	mov	r7, r2
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;
	/**Look up table 1 for the possible gas range values */
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
 8002fbe:	4c32      	ldr	r4, [pc, #200]	; (8003088 <calc_gas_resistance+0xd4>)
 8002fc0:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 8002fc4:	46a6      	mov	lr, r4
 8002fc6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8002fca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002fce:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8002fd2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002fd6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8002fda:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002fde:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8002fe2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2130303777),
		UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2143188679), UINT32_C(2136746228),
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2147483647) };
	/**Look up table 2 for the possible gas range values */
	uint32_t lookupTable2[16] = { UINT32_C(4096000000), UINT32_C(2048000000), UINT32_C(1024000000), UINT32_C(512000000),
 8002fe6:	46ee      	mov	lr, sp
 8002fe8:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 8002fec:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002ff0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8002ff4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002ff8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8002ffc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003000:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003004:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8003008:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
		UINT32_C(255744255), UINT32_C(127110228), UINT32_C(64000000), UINT32_C(32258064), UINT32_C(16016016),
		UINT32_C(8000000), UINT32_C(4000000), UINT32_C(2000000), UINT32_C(1000000), UINT32_C(500000),
		UINT32_C(250000), UINT32_C(125000) };

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 800300c:	f997 2036 	ldrsb.w	r2, [r7, #54]	; 0x36
 8003010:	17d3      	asrs	r3, r2, #31
 8003012:	0099      	lsls	r1, r3, #2
 8003014:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8003018:	ea4f 0c82 	mov.w	ip, r2, lsl #2
 800301c:	eb1c 0c02 	adds.w	ip, ip, r2
 8003020:	eb43 0301 	adc.w	r3, r3, r1
 8003024:	f240 523c 	movw	r2, #1340	; 0x53c
 8003028:	eb1c 0c02 	adds.w	ip, ip, r2
 800302c:	f143 0300 	adc.w	r3, r3, #0
		((int64_t) lookupTable1[gas_range])) >> 16;
 8003030:	aa20      	add	r2, sp, #128	; 0x80
 8003032:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8003036:	f856 2c40 	ldr.w	r2, [r6, #-64]
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 800303a:	fbac c002 	umull	ip, r0, ip, r2
 800303e:	fb02 0003 	mla	r0, r2, r3, r0
 8003042:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8003046:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
 800304a:	1404      	asrs	r4, r0, #16
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 800304c:	03ea      	lsls	r2, r5, #15
 800304e:	f112 427f 	adds.w	r2, r2, #4278190080	; 0xff000000
 8003052:	eb63 0303 	sbc.w	r3, r3, r3
 8003056:	eb12 020c 	adds.w	r2, r2, ip
 800305a:	eb43 4320 	adc.w	r3, r3, r0, asr #16
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 800305e:	f856 1c80 	ldr.w	r1, [r6, #-128]
 8003062:	fba1 0c0c 	umull	r0, ip, r1, ip
 8003066:	fb01 cc04 	mla	ip, r1, r4, ip
 800306a:	0a40      	lsrs	r0, r0, #9
 800306c:	ea40 50cc 	orr.w	r0, r0, ip, lsl #23
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
 8003070:	0854      	lsrs	r4, r2, #1
 8003072:	ea44 74c3 	orr.w	r4, r4, r3, lsl #31
 8003076:	1059      	asrs	r1, r3, #1
 8003078:	1820      	adds	r0, r4, r0
 800307a:	eb41 216c 	adc.w	r1, r1, ip, asr #9
 800307e:	f7fd fde7 	bl	8000c50 <__aeabi_ldivmod>

	return calc_gas_res;
}
 8003082:	b021      	add	sp, #132	; 0x84
 8003084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003086:	bf00      	nop
 8003088:	08014028 	.word	0x08014028

0800308c <calc_heater_res>:

/*!
 * @brief This internal API is used to calculate the Heat Resistance value.
 */
static uint8_t calc_heater_res(uint16_t temp, const struct bme680_dev *dev)
{
 800308c:	b510      	push	{r4, lr}
	int32_t var3;
	int32_t var4;
	int32_t var5;
	int32_t heatr_res_x100;

	if (temp > 400) /* Cap temperature */
 800308e:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
 8003092:	d901      	bls.n	8003098 <calc_heater_res+0xc>
		temp = 400;
 8003094:	f44f 70c8 	mov.w	r0, #400	; 0x190

	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 8003098:	f991 3004 	ldrsb.w	r3, [r1, #4]
 800309c:	f991 2014 	ldrsb.w	r2, [r1, #20]
 80030a0:	fb02 f303 	mul.w	r3, r2, r3
 80030a4:	4a20      	ldr	r2, [pc, #128]	; (8003128 <calc_heater_res+0x9c>)
 80030a6:	fb82 2c03 	smull	r2, ip, r2, r3
 80030aa:	17db      	asrs	r3, r3, #31
 80030ac:	ebc3 1cac 	rsb	ip, r3, ip, asr #6
	var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 80030b0:	f991 3011 	ldrsb.w	r3, [r1, #17]
 80030b4:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80030b8:	f9b1 2012 	ldrsh.w	r2, [r1, #18]
 80030bc:	f502 3216 	add.w	r2, r2, #153600	; 0x25800
 80030c0:	f202 1299 	addw	r2, r2, #409	; 0x199
 80030c4:	fb02 f000 	mul.w	r0, r2, r0
 80030c8:	4c18      	ldr	r4, [pc, #96]	; (800312c <calc_heater_res+0xa0>)
 80030ca:	fb84 e200 	smull	lr, r2, r4, r0
 80030ce:	17c0      	asrs	r0, r0, #31
 80030d0:	ebc0 02e2 	rsb	r2, r0, r2, asr #3
 80030d4:	f502 1248 	add.w	r2, r2, #3276800	; 0x320000
 80030d8:	fb84 0402 	smull	r0, r4, r4, r2
 80030dc:	17d2      	asrs	r2, r2, #31
 80030de:	ebc2 02a4 	rsb	r2, r2, r4, asr #2
 80030e2:	fb02 f303 	mul.w	r3, r2, r3
	var3 = var1 + (var2 / 2);
 80030e6:	eb03 70d3 	add.w	r0, r3, r3, lsr #31
 80030ea:	1040      	asrs	r0, r0, #1
 80030ec:	eb00 200c 	add.w	r0, r0, ip, lsl #8
	var4 = (var3 / (dev->calib.res_heat_range + 4));
 80030f0:	f891 3034 	ldrb.w	r3, [r1, #52]	; 0x34
 80030f4:	3304      	adds	r3, #4
 80030f6:	fb90 f0f3 	sdiv	r0, r0, r3
	var5 = (131 * dev->calib.res_heat_val) + 65536;
 80030fa:	f991 3035 	ldrsb.w	r3, [r1, #53]	; 0x35
 80030fe:	eb03 1283 	add.w	r2, r3, r3, lsl #6
 8003102:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8003106:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	heatr_res_x100 = (int32_t) (((var4 / var5) - 250) * 34);
 800310a:	fb90 f0f3 	sdiv	r0, r0, r3
 800310e:	38fa      	subs	r0, #250	; 0xfa
 8003110:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8003114:	0040      	lsls	r0, r0, #1
	heatr_res = (uint8_t) ((heatr_res_x100 + 50) / 100);
 8003116:	3032      	adds	r0, #50	; 0x32
 8003118:	4b05      	ldr	r3, [pc, #20]	; (8003130 <calc_heater_res+0xa4>)
 800311a:	fb83 2300 	smull	r2, r3, r3, r0
 800311e:	17c0      	asrs	r0, r0, #31
 8003120:	ebc0 1063 	rsb	r0, r0, r3, asr #5

	return heatr_res;
}
 8003124:	b2c0      	uxtb	r0, r0
 8003126:	bd10      	pop	{r4, pc}
 8003128:	10624dd3 	.word	0x10624dd3
 800312c:	66666667 	.word	0x66666667
 8003130:	51eb851f 	.word	0x51eb851f

08003134 <calc_heater_dur>:
static uint8_t calc_heater_dur(uint16_t dur)
{
	uint8_t factor = 0;
	uint8_t durval;

	if (dur >= 0xfc0) {
 8003134:	f5b0 6f7c 	cmp.w	r0, #4032	; 0xfc0
 8003138:	d20c      	bcs.n	8003154 <calc_heater_dur+0x20>
	uint8_t factor = 0;
 800313a:	2300      	movs	r3, #0
 800313c:	e002      	b.n	8003144 <calc_heater_dur+0x10>
		durval = 0xff; /* Max duration*/
	} else {
		while (dur > 0x3F) {
			dur = dur / 4;
 800313e:	0880      	lsrs	r0, r0, #2
			factor += 1;
 8003140:	3301      	adds	r3, #1
 8003142:	b2db      	uxtb	r3, r3
		while (dur > 0x3F) {
 8003144:	283f      	cmp	r0, #63	; 0x3f
 8003146:	d8fa      	bhi.n	800313e <calc_heater_dur+0xa>
		}
		durval = (uint8_t) (dur + (factor * 64));
 8003148:	019b      	lsls	r3, r3, #6
 800314a:	b2db      	uxtb	r3, r3
 800314c:	fa53 f080 	uxtab	r0, r3, r0
 8003150:	b2c0      	uxtb	r0, r0
 8003152:	4770      	bx	lr
		durval = 0xff; /* Max duration*/
 8003154:	20ff      	movs	r0, #255	; 0xff
	}

	return durval;
}
 8003156:	4770      	bx	lr

08003158 <boundary_check>:
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
	int8_t rslt = BME680_OK;

	if (value != NULL) {
 8003158:	4684      	mov	ip, r0
 800315a:	b1c0      	cbz	r0, 800318e <boundary_check+0x36>
		/* Check if value is below minimum value */
		if (*value < min) {
 800315c:	7800      	ldrb	r0, [r0, #0]
 800315e:	4288      	cmp	r0, r1
 8003160:	d207      	bcs.n	8003172 <boundary_check+0x1a>
			/* Auto correct the invalid value to minimum value */
			*value = min;
 8003162:	f88c 1000 	strb.w	r1, [ip]
			dev->info_msg |= BME680_I_MIN_CORRECTION;
 8003166:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
 800316a:	f041 0101 	orr.w	r1, r1, #1
 800316e:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
		}
		/* Check if value is above maximum value */
		if (*value > max) {
 8003172:	f89c 1000 	ldrb.w	r1, [ip]
 8003176:	4291      	cmp	r1, r2
 8003178:	d90c      	bls.n	8003194 <boundary_check+0x3c>
			/* Auto correct the invalid value to maximum value */
			*value = max;
 800317a:	f88c 2000 	strb.w	r2, [ip]
			dev->info_msg |= BME680_I_MAX_CORRECTION;
 800317e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8003182:	f042 0202 	orr.w	r2, r2, #2
 8003186:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	int8_t rslt = BME680_OK;
 800318a:	2000      	movs	r0, #0
 800318c:	4770      	bx	lr
		}
	} else {
		rslt = BME680_E_NULL_PTR;
 800318e:	f04f 30ff 	mov.w	r0, #4294967295
 8003192:	4770      	bx	lr
	int8_t rslt = BME680_OK;
 8003194:	2000      	movs	r0, #0
	}

	return rslt;
}
 8003196:	4770      	bx	lr

08003198 <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8003198:	b150      	cbz	r0, 80031b0 <null_ptr_check+0x18>
 800319a:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800319c:	b15a      	cbz	r2, 80031b6 <null_ptr_check+0x1e>
 800319e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80031a0:	b162      	cbz	r2, 80031bc <null_ptr_check+0x24>
 80031a2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80031a4:	b10b      	cbz	r3, 80031aa <null_ptr_check+0x12>
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
	} else {
		/* Device structure is fine */
		rslt = BME680_OK;
 80031a6:	2000      	movs	r0, #0
	}

	return rslt;
}
 80031a8:	4770      	bx	lr
		rslt = BME680_E_NULL_PTR;
 80031aa:	f04f 30ff 	mov.w	r0, #4294967295
 80031ae:	4770      	bx	lr
 80031b0:	f04f 30ff 	mov.w	r0, #4294967295
 80031b4:	4770      	bx	lr
 80031b6:	f04f 30ff 	mov.w	r0, #4294967295
 80031ba:	4770      	bx	lr
 80031bc:	f04f 30ff 	mov.w	r0, #4294967295
 80031c0:	4770      	bx	lr

080031c2 <set_mem_page>:
{
 80031c2:	b570      	push	{r4, r5, r6, lr}
 80031c4:	b082      	sub	sp, #8
 80031c6:	4605      	mov	r5, r0
 80031c8:	460c      	mov	r4, r1
	rslt = null_ptr_check(dev);
 80031ca:	4608      	mov	r0, r1
 80031cc:	f7ff ffe4 	bl	8003198 <null_ptr_check>
	if (rslt == BME680_OK) {
 80031d0:	4606      	mov	r6, r0
 80031d2:	bb40      	cbnz	r0, 8003226 <set_mem_page+0x64>
		if (reg_addr > 0x7f)
 80031d4:	f015 0f80 	tst.w	r5, #128	; 0x80
 80031d8:	d128      	bne.n	800322c <set_mem_page+0x6a>
			mem_page = BME680_MEM_PAGE0;
 80031da:	2310      	movs	r3, #16
		if (mem_page != dev->mem_page) {
 80031dc:	78e2      	ldrb	r2, [r4, #3]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d021      	beq.n	8003226 <set_mem_page+0x64>
			dev->mem_page = mem_page;
 80031e2:	70e3      	strb	r3, [r4, #3]
			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 80031e4:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80031e6:	2301      	movs	r3, #1
 80031e8:	f10d 0207 	add.w	r2, sp, #7
 80031ec:	21f3      	movs	r1, #243	; 0xf3
 80031ee:	7860      	ldrb	r0, [r4, #1]
 80031f0:	47a8      	blx	r5
 80031f2:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
			if (dev->com_rslt != 0)
 80031f6:	b9d8      	cbnz	r0, 8003230 <set_mem_page+0x6e>
				reg = reg & (~BME680_MEM_PAGE_MSK);
 80031f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80031fc:	f003 02ef 	and.w	r2, r3, #239	; 0xef
 8003200:	f88d 2007 	strb.w	r2, [sp, #7]
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 8003204:	f994 3003 	ldrsb.w	r3, [r4, #3]
 8003208:	f003 0310 	and.w	r3, r3, #16
 800320c:	4313      	orrs	r3, r2
 800320e:	f88d 3007 	strb.w	r3, [sp, #7]
				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 8003212:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8003214:	2301      	movs	r3, #1
 8003216:	f10d 0207 	add.w	r2, sp, #7
 800321a:	2173      	movs	r1, #115	; 0x73
 800321c:	7860      	ldrb	r0, [r4, #1]
 800321e:	47a8      	blx	r5
 8003220:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
				if (dev->com_rslt != 0)
 8003224:	b938      	cbnz	r0, 8003236 <set_mem_page+0x74>
}
 8003226:	4630      	mov	r0, r6
 8003228:	b002      	add	sp, #8
 800322a:	bd70      	pop	{r4, r5, r6, pc}
			mem_page = BME680_MEM_PAGE1;
 800322c:	2300      	movs	r3, #0
 800322e:	e7d5      	b.n	80031dc <set_mem_page+0x1a>
				rslt = BME680_E_COM_FAIL;
 8003230:	f06f 0601 	mvn.w	r6, #1
 8003234:	e7f7      	b.n	8003226 <set_mem_page+0x64>
					rslt = BME680_E_COM_FAIL;
 8003236:	f06f 0601 	mvn.w	r6, #1
 800323a:	e7f4      	b.n	8003226 <set_mem_page+0x64>

0800323c <get_mem_page>:
{
 800323c:	b530      	push	{r4, r5, lr}
 800323e:	b083      	sub	sp, #12
 8003240:	4604      	mov	r4, r0
	rslt = null_ptr_check(dev);
 8003242:	f7ff ffa9 	bl	8003198 <null_ptr_check>
	if (rslt == BME680_OK) {
 8003246:	4605      	mov	r5, r0
 8003248:	b978      	cbnz	r0, 800326a <get_mem_page+0x2e>
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 800324a:	2301      	movs	r3, #1
 800324c:	f10d 0207 	add.w	r2, sp, #7
 8003250:	21f3      	movs	r1, #243	; 0xf3
 8003252:	7860      	ldrb	r0, [r4, #1]
 8003254:	f8d4 c048 	ldr.w	ip, [r4, #72]	; 0x48
 8003258:	47e0      	blx	ip
 800325a:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
		if (dev->com_rslt != 0)
 800325e:	b938      	cbnz	r0, 8003270 <get_mem_page+0x34>
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
 8003260:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003264:	f003 0310 	and.w	r3, r3, #16
 8003268:	70e3      	strb	r3, [r4, #3]
}
 800326a:	4628      	mov	r0, r5
 800326c:	b003      	add	sp, #12
 800326e:	bd30      	pop	{r4, r5, pc}
			rslt = BME680_E_COM_FAIL;
 8003270:	f06f 0501 	mvn.w	r5, #1
 8003274:	e7f9      	b.n	800326a <get_mem_page+0x2e>

08003276 <bme680_get_regs>:
{
 8003276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800327a:	4605      	mov	r5, r0
 800327c:	460e      	mov	r6, r1
 800327e:	4690      	mov	r8, r2
 8003280:	461c      	mov	r4, r3
	rslt = null_ptr_check(dev);
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff ff88 	bl	8003198 <null_ptr_check>
	if (rslt == BME680_OK) {
 8003288:	4607      	mov	r7, r0
 800328a:	b950      	cbnz	r0, 80032a2 <bme680_get_regs+0x2c>
		if (dev->intf == BME680_SPI_INTF) {
 800328c:	78a3      	ldrb	r3, [r4, #2]
 800328e:	b15b      	cbz	r3, 80032a8 <bme680_get_regs+0x32>
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8003290:	4643      	mov	r3, r8
 8003292:	4632      	mov	r2, r6
 8003294:	4629      	mov	r1, r5
 8003296:	7860      	ldrb	r0, [r4, #1]
 8003298:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800329a:	47a8      	blx	r5
 800329c:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
		if (dev->com_rslt != 0)
 80032a0:	b960      	cbnz	r0, 80032bc <bme680_get_regs+0x46>
}
 80032a2:	4638      	mov	r0, r7
 80032a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			rslt = set_mem_page(reg_addr, dev);
 80032a8:	4621      	mov	r1, r4
 80032aa:	4628      	mov	r0, r5
 80032ac:	f7ff ff89 	bl	80031c2 <set_mem_page>
			if (rslt == BME680_OK)
 80032b0:	4607      	mov	r7, r0
 80032b2:	2800      	cmp	r0, #0
 80032b4:	d1ec      	bne.n	8003290 <bme680_get_regs+0x1a>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
 80032b6:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80032ba:	e7e9      	b.n	8003290 <bme680_get_regs+0x1a>
			rslt = BME680_E_COM_FAIL;
 80032bc:	f06f 0701 	mvn.w	r7, #1
 80032c0:	e7ef      	b.n	80032a2 <bme680_get_regs+0x2c>

080032c2 <get_calib_data>:
{
 80032c2:	b530      	push	{r4, r5, lr}
 80032c4:	b08d      	sub	sp, #52	; 0x34
 80032c6:	4604      	mov	r4, r0
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
 80032c8:	2500      	movs	r5, #0
 80032ca:	9501      	str	r5, [sp, #4]
 80032cc:	2225      	movs	r2, #37	; 0x25
 80032ce:	4629      	mov	r1, r5
 80032d0:	a802      	add	r0, sp, #8
 80032d2:	f010 f9b7 	bl	8013644 <memset>
	uint8_t temp_var = 0; /* Temporary variable */
 80032d6:	f88d 5003 	strb.w	r5, [sp, #3]
	rslt = null_ptr_check(dev);
 80032da:	4620      	mov	r0, r4
 80032dc:	f7ff ff5c 	bl	8003198 <null_ptr_check>
	if (rslt == BME680_OK) {
 80032e0:	4603      	mov	r3, r0
 80032e2:	b110      	cbz	r0, 80032ea <get_calib_data+0x28>
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	b00d      	add	sp, #52	; 0x34
 80032e8:	bd30      	pop	{r4, r5, pc}
		rslt = bme680_get_regs(BME680_COEFF_ADDR1, coeff_array, BME680_COEFF_ADDR1_LEN, dev);
 80032ea:	4623      	mov	r3, r4
 80032ec:	2219      	movs	r2, #25
 80032ee:	a901      	add	r1, sp, #4
 80032f0:	2089      	movs	r0, #137	; 0x89
 80032f2:	f7ff ffc0 	bl	8003276 <bme680_get_regs>
		if (rslt == BME680_OK)
 80032f6:	4603      	mov	r3, r0
 80032f8:	2800      	cmp	r0, #0
 80032fa:	d07c      	beq.n	80033f6 <get_calib_data+0x134>
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
 80032fc:	f89d 1026 	ldrb.w	r1, [sp, #38]	; 0x26
 8003300:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 8003304:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003308:	82e2      	strh	r2, [r4, #22]
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
 800330a:	f89d 1006 	ldrb.w	r1, [sp, #6]
 800330e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8003312:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003316:	8322      	strh	r2, [r4, #24]
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
 8003318:	f99d 2007 	ldrsb.w	r2, [sp, #7]
 800331c:	76a2      	strb	r2, [r4, #26]
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
 800331e:	f89d 100a 	ldrb.w	r1, [sp, #10]
 8003322:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8003326:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800332a:	83a2      	strh	r2, [r4, #28]
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
 800332c:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8003330:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8003334:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003338:	83e2      	strh	r2, [r4, #30]
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
 800333a:	f99d 200d 	ldrsb.w	r2, [sp, #13]
 800333e:	f884 2020 	strb.w	r2, [r4, #32]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
 8003342:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8003346:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800334a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800334e:	8462      	strh	r2, [r4, #34]	; 0x22
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
 8003350:	f89d 1012 	ldrb.w	r1, [sp, #18]
 8003354:	f89d 2011 	ldrb.w	r2, [sp, #17]
 8003358:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800335c:	84a2      	strh	r2, [r4, #36]	; 0x24
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
 800335e:	f99d 2014 	ldrsb.w	r2, [sp, #20]
 8003362:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
 8003366:	f99d 2013 	ldrsb.w	r2, [sp, #19]
 800336a:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
 800336e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8003372:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8003376:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800337a:	8522      	strh	r2, [r4, #40]	; 0x28
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
 800337c:	f89d 101a 	ldrb.w	r1, [sp, #26]
 8003380:	f89d 2019 	ldrb.w	r2, [sp, #25]
 8003384:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003388:	8562      	strh	r2, [r4, #42]	; 0x2a
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
 800338a:	f89d 201b 	ldrb.w	r2, [sp, #27]
 800338e:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 8003392:	f89d 001f 	ldrb.w	r0, [sp, #31]
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
 8003396:	f89d 201e 	ldrb.w	r2, [sp, #30]
 800339a:	f002 010f 	and.w	r1, r2, #15
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 800339e:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80033a2:	8121      	strh	r1, [r4, #8]
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80033a4:	f89d 101d 	ldrb.w	r1, [sp, #29]
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
 80033a8:	0912      	lsrs	r2, r2, #4
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80033aa:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 80033ae:	8162      	strh	r2, [r4, #10]
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
 80033b0:	f99d 2020 	ldrsb.w	r2, [sp, #32]
 80033b4:	7322      	strb	r2, [r4, #12]
		dev->calib.par_h4 = (int8_t) coeff_array[BME680_H4_REG];
 80033b6:	f99d 2021 	ldrsb.w	r2, [sp, #33]	; 0x21
 80033ba:	7362      	strb	r2, [r4, #13]
		dev->calib.par_h5 = (int8_t) coeff_array[BME680_H5_REG];
 80033bc:	f99d 2022 	ldrsb.w	r2, [sp, #34]	; 0x22
 80033c0:	73a2      	strb	r2, [r4, #14]
		dev->calib.par_h6 = (uint8_t) coeff_array[BME680_H6_REG];
 80033c2:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
 80033c6:	73e2      	strb	r2, [r4, #15]
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];
 80033c8:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
 80033cc:	7422      	strb	r2, [r4, #16]
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
 80033ce:	f99d 2029 	ldrsb.w	r2, [sp, #41]	; 0x29
 80033d2:	7462      	strb	r2, [r4, #17]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
 80033d4:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
 80033d8:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 80033dc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80033e0:	8262      	strh	r2, [r4, #18]
		dev->calib.par_gh3 = (int8_t) coeff_array[BME680_GH3_REG];
 80033e2:	f99d 202a 	ldrsb.w	r2, [sp, #42]	; 0x2a
 80033e6:	7522      	strb	r2, [r4, #20]
		if (rslt == BME680_OK) {
 80033e8:	b173      	cbz	r3, 8003408 <get_calib_data+0x146>
		dev->calib.range_sw_err = ((int8_t) temp_var & (int8_t) BME680_RSERROR_MSK) / 16;
 80033ea:	f99d 2003 	ldrsb.w	r2, [sp, #3]
 80033ee:	1112      	asrs	r2, r2, #4
 80033f0:	f884 2036 	strb.w	r2, [r4, #54]	; 0x36
 80033f4:	e776      	b.n	80032e4 <get_calib_data+0x22>
			rslt = bme680_get_regs(BME680_COEFF_ADDR2, &coeff_array[BME680_COEFF_ADDR1_LEN]
 80033f6:	4623      	mov	r3, r4
 80033f8:	2210      	movs	r2, #16
 80033fa:	f10d 011d 	add.w	r1, sp, #29
 80033fe:	20e1      	movs	r0, #225	; 0xe1
 8003400:	f7ff ff39 	bl	8003276 <bme680_get_regs>
 8003404:	4603      	mov	r3, r0
 8003406:	e779      	b.n	80032fc <get_calib_data+0x3a>
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);
 8003408:	4623      	mov	r3, r4
 800340a:	2201      	movs	r2, #1
 800340c:	f10d 0103 	add.w	r1, sp, #3
 8003410:	2002      	movs	r0, #2
 8003412:	f7ff ff30 	bl	8003276 <bme680_get_regs>
			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
 8003416:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800341a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800341e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			if (rslt == BME680_OK) {
 8003422:	4603      	mov	r3, r0
 8003424:	2800      	cmp	r0, #0
 8003426:	d1e0      	bne.n	80033ea <get_calib_data+0x128>
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);
 8003428:	4623      	mov	r3, r4
 800342a:	2201      	movs	r2, #1
 800342c:	f10d 0103 	add.w	r1, sp, #3
 8003430:	f7ff ff21 	bl	8003276 <bme680_get_regs>
				dev->calib.res_heat_val = (int8_t) temp_var;
 8003434:	f99d 3003 	ldrsb.w	r3, [sp, #3]
 8003438:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
				if (rslt == BME680_OK)
 800343c:	4603      	mov	r3, r0
 800343e:	2800      	cmp	r0, #0
 8003440:	d1d3      	bne.n	80033ea <get_calib_data+0x128>
					rslt = bme680_get_regs(BME680_ADDR_RANGE_SW_ERR_ADDR, &temp_var, 1, dev);
 8003442:	4623      	mov	r3, r4
 8003444:	2201      	movs	r2, #1
 8003446:	f10d 0103 	add.w	r1, sp, #3
 800344a:	2004      	movs	r0, #4
 800344c:	f7ff ff13 	bl	8003276 <bme680_get_regs>
 8003450:	4603      	mov	r3, r0
 8003452:	e7ca      	b.n	80033ea <get_calib_data+0x128>

08003454 <read_field_data>:
{
 8003454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003458:	b085      	sub	sp, #20
 800345a:	4607      	mov	r7, r0
 800345c:	4688      	mov	r8, r1
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
 800345e:	2300      	movs	r3, #0
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	9301      	str	r3, [sp, #4]
 8003464:	9302      	str	r3, [sp, #8]
 8003466:	f8cd 300b 	str.w	r3, [sp, #11]
	rslt = null_ptr_check(dev);
 800346a:	4608      	mov	r0, r1
 800346c:	f7ff fe94 	bl	8003198 <null_ptr_check>
 8003470:	4605      	mov	r5, r0
	uint8_t tries = 10;
 8003472:	240a      	movs	r4, #10
 8003474:	e01d      	b.n	80034b2 <read_field_data+0x5e>
				data->temperature = calc_temperature(adc_temp, dev);
 8003476:	4641      	mov	r1, r8
 8003478:	f7ff fc99 	bl	8002dae <calc_temperature>
 800347c:	80b8      	strh	r0, [r7, #4]
				data->pressure = calc_pressure(adc_pres, dev);
 800347e:	4641      	mov	r1, r8
 8003480:	4630      	mov	r0, r6
 8003482:	f7ff fccf 	bl	8002e24 <calc_pressure>
 8003486:	60b8      	str	r0, [r7, #8]
				data->humidity = calc_humidity(adc_hum, dev);
 8003488:	4641      	mov	r1, r8
 800348a:	4650      	mov	r0, sl
 800348c:	f7ff fd2e 	bl	8002eec <calc_humidity>
 8003490:	60f8      	str	r0, [r7, #12]
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 8003492:	4642      	mov	r2, r8
 8003494:	4659      	mov	r1, fp
 8003496:	4648      	mov	r0, r9
 8003498:	f7ff fd8c 	bl	8002fb4 <calc_gas_resistance>
 800349c:	6138      	str	r0, [r7, #16]
	if (!tries)
 800349e:	2c00      	cmp	r4, #0
 80034a0:	d053      	beq.n	800354a <read_field_data+0xf6>
}
 80034a2:	4628      	mov	r0, r5
 80034a4:	b005      	add	sp, #20
 80034a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		tries--;
 80034aa:	3c01      	subs	r4, #1
	} while (tries);
 80034ac:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80034b0:	d0f5      	beq.n	800349e <read_field_data+0x4a>
		if (rslt == BME680_OK) {
 80034b2:	2d00      	cmp	r5, #0
 80034b4:	d1f9      	bne.n	80034aa <read_field_data+0x56>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 80034b6:	4643      	mov	r3, r8
 80034b8:	220f      	movs	r2, #15
 80034ba:	4669      	mov	r1, sp
 80034bc:	201d      	movs	r0, #29
 80034be:	f7ff feda 	bl	8003276 <bme680_get_regs>
 80034c2:	4605      	mov	r5, r0
			data->status = buff[0] & BME680_NEW_DATA_MSK;
 80034c4:	f89d 3000 	ldrb.w	r3, [sp]
 80034c8:	f003 0280 	and.w	r2, r3, #128	; 0x80
 80034cc:	703a      	strb	r2, [r7, #0]
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 80034ce:	f003 030f 	and.w	r3, r3, #15
 80034d2:	707b      	strb	r3, [r7, #1]
			data->meas_index = buff[1];
 80034d4:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80034d8:	70bb      	strb	r3, [r7, #2]
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 80034da:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80034de:	f89d 6003 	ldrb.w	r6, [sp, #3]
 80034e2:	0136      	lsls	r6, r6, #4
 80034e4:	ea46 3603 	orr.w	r6, r6, r3, lsl #12
				| ((uint32_t) buff[4] / 16));
 80034e8:	f89d 3004 	ldrb.w	r3, [sp, #4]
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 80034ec:	ea46 1613 	orr.w	r6, r6, r3, lsr #4
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 80034f0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80034f4:	f89d 0006 	ldrb.w	r0, [sp, #6]
 80034f8:	0100      	lsls	r0, r0, #4
 80034fa:	ea40 3003 	orr.w	r0, r0, r3, lsl #12
				| ((uint32_t) buff[7] / 16));
 80034fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 8003502:	ea40 1013 	orr.w	r0, r0, r3, lsr #4
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 8003506:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800350a:	f89d a009 	ldrb.w	sl, [sp, #9]
 800350e:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 8003512:	f89d 100d 	ldrb.w	r1, [sp, #13]
 8003516:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800351a:	ea4f 1993 	mov.w	r9, r3, lsr #6
 800351e:	ea49 0981 	orr.w	r9, r9, r1, lsl #2
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;
 8003522:	f003 0b0f 	and.w	fp, r3, #15
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 8003526:	f003 0320 	and.w	r3, r3, #32
 800352a:	4313      	orrs	r3, r2
 800352c:	b25b      	sxtb	r3, r3
 800352e:	703b      	strb	r3, [r7, #0]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 8003530:	f99d 200e 	ldrsb.w	r2, [sp, #14]
 8003534:	f002 0210 	and.w	r2, r2, #16
 8003538:	4313      	orrs	r3, r2
 800353a:	703b      	strb	r3, [r7, #0]
			if (data->status & BME680_NEW_DATA_MSK) {
 800353c:	2b00      	cmp	r3, #0
 800353e:	db9a      	blt.n	8003476 <read_field_data+0x22>
			dev->delay_ms(BME680_POLL_PERIOD_MS);
 8003540:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
 8003544:	200a      	movs	r0, #10
 8003546:	4798      	blx	r3
 8003548:	e7af      	b.n	80034aa <read_field_data+0x56>
		rslt = BME680_W_NO_NEW_DATA;
 800354a:	2502      	movs	r5, #2
 800354c:	e7a9      	b.n	80034a2 <read_field_data+0x4e>

0800354e <bme680_set_regs>:
{
 800354e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003552:	b08b      	sub	sp, #44	; 0x2c
 8003554:	4606      	mov	r6, r0
 8003556:	4688      	mov	r8, r1
 8003558:	4617      	mov	r7, r2
 800355a:	461d      	mov	r5, r3
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 800355c:	2100      	movs	r1, #0
 800355e:	9100      	str	r1, [sp, #0]
 8003560:	2224      	movs	r2, #36	; 0x24
 8003562:	a801      	add	r0, sp, #4
 8003564:	f010 f86e 	bl	8013644 <memset>
	rslt = null_ptr_check(dev);
 8003568:	4628      	mov	r0, r5
 800356a:	f7ff fe15 	bl	8003198 <null_ptr_check>
	if (rslt == BME680_OK) {
 800356e:	4681      	mov	r9, r0
 8003570:	2800      	cmp	r0, #0
 8003572:	d13e      	bne.n	80035f2 <bme680_set_regs+0xa4>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
 8003574:	1e7b      	subs	r3, r7, #1
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b12      	cmp	r3, #18
 800357a:	d801      	bhi.n	8003580 <bme680_set_regs+0x32>
			for (index = 0; index < len; index++) {
 800357c:	2400      	movs	r4, #0
 800357e:	e01b      	b.n	80035b8 <bme680_set_regs+0x6a>
			rslt = BME680_E_INVALID_LENGTH;
 8003580:	f06f 0903 	mvn.w	r9, #3
 8003584:	e035      	b.n	80035f2 <bme680_set_regs+0xa4>
					rslt = set_mem_page(reg_addr[index], dev);
 8003586:	4629      	mov	r1, r5
 8003588:	5d30      	ldrb	r0, [r6, r4]
 800358a:	f7ff fe1a 	bl	80031c2 <set_mem_page>
 800358e:	4681      	mov	r9, r0
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 8003590:	5d33      	ldrb	r3, [r6, r4]
 8003592:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003596:	aa0a      	add	r2, sp, #40	; 0x28
 8003598:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 800359c:	f802 3c28 	strb.w	r3, [r2, #-40]
				tmp_buff[(2 * index) + 1] = reg_data[index];
 80035a0:	ea4f 0c44 	mov.w	ip, r4, lsl #1
 80035a4:	f818 3004 	ldrb.w	r3, [r8, r4]
 80035a8:	f10c 0229 	add.w	r2, ip, #41	; 0x29
 80035ac:	eb0d 0c02 	add.w	ip, sp, r2
 80035b0:	f80c 3c28 	strb.w	r3, [ip, #-40]
			for (index = 0; index < len; index++) {
 80035b4:	3401      	adds	r4, #1
 80035b6:	b2a4      	uxth	r4, r4
 80035b8:	b2bb      	uxth	r3, r7
 80035ba:	42a3      	cmp	r3, r4
 80035bc:	d909      	bls.n	80035d2 <bme680_set_regs+0x84>
				if (dev->intf == BME680_SPI_INTF) {
 80035be:	78ab      	ldrb	r3, [r5, #2]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d0e0      	beq.n	8003586 <bme680_set_regs+0x38>
					tmp_buff[(2 * index)] = reg_addr[index];
 80035c4:	5d32      	ldrb	r2, [r6, r4]
 80035c6:	ab0a      	add	r3, sp, #40	; 0x28
 80035c8:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80035cc:	f803 2c28 	strb.w	r2, [r3, #-40]
 80035d0:	e7e6      	b.n	80035a0 <bme680_set_regs+0x52>
			if (rslt == BME680_OK) {
 80035d2:	f1b9 0f00 	cmp.w	r9, #0
 80035d6:	d10c      	bne.n	80035f2 <bme680_set_regs+0xa4>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 80035d8:	6cec      	ldr	r4, [r5, #76]	; 0x4c
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	3b01      	subs	r3, #1
 80035de:	b29b      	uxth	r3, r3
 80035e0:	f10d 0201 	add.w	r2, sp, #1
 80035e4:	f89d 1000 	ldrb.w	r1, [sp]
 80035e8:	7868      	ldrb	r0, [r5, #1]
 80035ea:	47a0      	blx	r4
 80035ec:	f885 0054 	strb.w	r0, [r5, #84]	; 0x54
				if (dev->com_rslt != 0)
 80035f0:	b918      	cbnz	r0, 80035fa <bme680_set_regs+0xac>
}
 80035f2:	4648      	mov	r0, r9
 80035f4:	b00b      	add	sp, #44	; 0x2c
 80035f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					rslt = BME680_E_COM_FAIL;
 80035fa:	f06f 0901 	mvn.w	r9, #1
 80035fe:	e7f8      	b.n	80035f2 <bme680_set_regs+0xa4>

08003600 <set_gas_config>:
{
 8003600:	b510      	push	{r4, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	4604      	mov	r4, r0
	rslt = null_ptr_check(dev);
 8003606:	f7ff fdc7 	bl	8003198 <null_ptr_check>
	if (rslt == BME680_OK) {
 800360a:	b940      	cbnz	r0, 800361e <set_gas_config+0x1e>
		uint8_t reg_addr[2] = {0};
 800360c:	f8ad 0000 	strh.w	r0, [sp]
		uint8_t reg_data[2] = {0};
 8003610:	f8ad 0004 	strh.w	r0, [sp, #4]
		if (dev->power_mode == BME680_FORCED_MODE) {
 8003614:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003618:	2b01      	cmp	r3, #1
 800361a:	d002      	beq.n	8003622 <set_gas_config+0x22>
			rslt = BME680_W_DEFINE_PWR_MODE;
 800361c:	2001      	movs	r0, #1
}
 800361e:	b002      	add	sp, #8
 8003620:	bd10      	pop	{r4, pc}
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
 8003622:	235a      	movs	r3, #90	; 0x5a
 8003624:	f88d 3000 	strb.w	r3, [sp]
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
 8003628:	4621      	mov	r1, r4
 800362a:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
 800362e:	f7ff fd2d 	bl	800308c <calc_heater_res>
 8003632:	f88d 0004 	strb.w	r0, [sp, #4]
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
 8003636:	2364      	movs	r3, #100	; 0x64
 8003638:	f88d 3001 	strb.w	r3, [sp, #1]
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 800363c:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
 8003640:	f7ff fd78 	bl	8003134 <calc_heater_dur>
 8003644:	f88d 0005 	strb.w	r0, [sp, #5]
			dev->gas_sett.nb_conv = 0;
 8003648:	2300      	movs	r3, #0
 800364a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 800364e:	4623      	mov	r3, r4
 8003650:	2202      	movs	r2, #2
 8003652:	a901      	add	r1, sp, #4
 8003654:	4668      	mov	r0, sp
 8003656:	f7ff ff7a 	bl	800354e <bme680_set_regs>
 800365a:	e7e0      	b.n	800361e <set_gas_config+0x1e>

0800365c <bme680_soft_reset>:
{
 800365c:	b530      	push	{r4, r5, lr}
 800365e:	b083      	sub	sp, #12
 8003660:	4604      	mov	r4, r0
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
 8003662:	23e0      	movs	r3, #224	; 0xe0
 8003664:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
 8003668:	23b6      	movs	r3, #182	; 0xb6
 800366a:	f88d 3006 	strb.w	r3, [sp, #6]
	rslt = null_ptr_check(dev);
 800366e:	f7ff fd93 	bl	8003198 <null_ptr_check>
	if (rslt == BME680_OK) {
 8003672:	4605      	mov	r5, r0
 8003674:	b910      	cbnz	r0, 800367c <bme680_soft_reset+0x20>
		if (dev->intf == BME680_SPI_INTF)
 8003676:	78a3      	ldrb	r3, [r4, #2]
 8003678:	b11b      	cbz	r3, 8003682 <bme680_soft_reset+0x26>
		if (rslt == BME680_OK) {
 800367a:	b13d      	cbz	r5, 800368c <bme680_soft_reset+0x30>
}
 800367c:	4628      	mov	r0, r5
 800367e:	b003      	add	sp, #12
 8003680:	bd30      	pop	{r4, r5, pc}
			rslt = get_mem_page(dev);
 8003682:	4620      	mov	r0, r4
 8003684:	f7ff fdda 	bl	800323c <get_mem_page>
 8003688:	4605      	mov	r5, r0
 800368a:	e7f6      	b.n	800367a <bme680_soft_reset+0x1e>
			rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 800368c:	4623      	mov	r3, r4
 800368e:	2201      	movs	r2, #1
 8003690:	f10d 0106 	add.w	r1, sp, #6
 8003694:	f10d 0007 	add.w	r0, sp, #7
 8003698:	f7ff ff59 	bl	800354e <bme680_set_regs>
 800369c:	4605      	mov	r5, r0
			dev->delay_ms(BME680_RESET_PERIOD);
 800369e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80036a0:	200a      	movs	r0, #10
 80036a2:	4798      	blx	r3
			if (rslt == BME680_OK) {
 80036a4:	2d00      	cmp	r5, #0
 80036a6:	d1e9      	bne.n	800367c <bme680_soft_reset+0x20>
				if (dev->intf == BME680_SPI_INTF)
 80036a8:	78a3      	ldrb	r3, [r4, #2]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1e6      	bne.n	800367c <bme680_soft_reset+0x20>
					rslt = get_mem_page(dev);
 80036ae:	4620      	mov	r0, r4
 80036b0:	f7ff fdc4 	bl	800323c <get_mem_page>
 80036b4:	4605      	mov	r5, r0
 80036b6:	e7e1      	b.n	800367c <bme680_soft_reset+0x20>

080036b8 <bme680_init>:
{
 80036b8:	b510      	push	{r4, lr}
 80036ba:	4604      	mov	r4, r0
	rslt = null_ptr_check(dev);
 80036bc:	f7ff fd6c 	bl	8003198 <null_ptr_check>
	if (rslt == BME680_OK) {
 80036c0:	b100      	cbz	r0, 80036c4 <bme680_init+0xc>
}
 80036c2:	bd10      	pop	{r4, pc}
		rslt = bme680_soft_reset(dev);
 80036c4:	4620      	mov	r0, r4
 80036c6:	f7ff ffc9 	bl	800365c <bme680_soft_reset>
		if (rslt == BME680_OK) {
 80036ca:	2800      	cmp	r0, #0
 80036cc:	d1f9      	bne.n	80036c2 <bme680_init+0xa>
			rslt = bme680_get_regs(BME680_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 80036ce:	4623      	mov	r3, r4
 80036d0:	2201      	movs	r2, #1
 80036d2:	4621      	mov	r1, r4
 80036d4:	20d0      	movs	r0, #208	; 0xd0
 80036d6:	f7ff fdce 	bl	8003276 <bme680_get_regs>
			if (rslt == BME680_OK) {
 80036da:	2800      	cmp	r0, #0
 80036dc:	d1f1      	bne.n	80036c2 <bme680_init+0xa>
				if (dev->chip_id == BME680_CHIP_ID) {
 80036de:	7823      	ldrb	r3, [r4, #0]
 80036e0:	2b61      	cmp	r3, #97	; 0x61
 80036e2:	d103      	bne.n	80036ec <bme680_init+0x34>
					rslt = get_calib_data(dev);
 80036e4:	4620      	mov	r0, r4
 80036e6:	f7ff fdec 	bl	80032c2 <get_calib_data>
 80036ea:	e7ea      	b.n	80036c2 <bme680_init+0xa>
					rslt = BME680_E_DEV_NOT_FOUND;
 80036ec:	f06f 0002 	mvn.w	r0, #2
 80036f0:	e7e7      	b.n	80036c2 <bme680_init+0xa>

080036f2 <bme680_set_sensor_mode>:
{
 80036f2:	b570      	push	{r4, r5, r6, lr}
 80036f4:	b082      	sub	sp, #8
 80036f6:	4604      	mov	r4, r0
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 80036f8:	2374      	movs	r3, #116	; 0x74
 80036fa:	f88d 3006 	strb.w	r3, [sp, #6]
	rslt = null_ptr_check(dev);
 80036fe:	f7ff fd4b 	bl	8003198 <null_ptr_check>
	if (rslt == BME680_OK) {
 8003702:	4605      	mov	r5, r0
 8003704:	bb80      	cbnz	r0, 8003768 <bme680_set_sensor_mode+0x76>
	uint8_t pow_mode = 0;
 8003706:	2600      	movs	r6, #0
 8003708:	e000      	b.n	800370c <bme680_set_sensor_mode+0x1a>
		} while (pow_mode != BME680_SLEEP_MODE);
 800370a:	b1fe      	cbz	r6, 800374c <bme680_set_sensor_mode+0x5a>
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
 800370c:	4623      	mov	r3, r4
 800370e:	2201      	movs	r2, #1
 8003710:	f10d 0107 	add.w	r1, sp, #7
 8003714:	2074      	movs	r0, #116	; 0x74
 8003716:	f7ff fdae 	bl	8003276 <bme680_get_regs>
			if (rslt == BME680_OK) {
 800371a:	4605      	mov	r5, r0
 800371c:	2800      	cmp	r0, #0
 800371e:	d1f4      	bne.n	800370a <bme680_set_sensor_mode+0x18>
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
 8003720:	f89d 3007 	ldrb.w	r3, [sp, #7]
				if (pow_mode != BME680_SLEEP_MODE) {
 8003724:	f013 0603 	ands.w	r6, r3, #3
 8003728:	d0ef      	beq.n	800370a <bme680_set_sensor_mode+0x18>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
 800372a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 800372e:	f88d 3007 	strb.w	r3, [sp, #7]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8003732:	4623      	mov	r3, r4
 8003734:	2201      	movs	r2, #1
 8003736:	f10d 0107 	add.w	r1, sp, #7
 800373a:	f10d 0006 	add.w	r0, sp, #6
 800373e:	f7ff ff06 	bl	800354e <bme680_set_regs>
 8003742:	4605      	mov	r5, r0
					dev->delay_ms(BME680_POLL_PERIOD_MS);
 8003744:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003746:	200a      	movs	r0, #10
 8003748:	4798      	blx	r3
 800374a:	e7de      	b.n	800370a <bme680_set_sensor_mode+0x18>
		if (dev->power_mode != BME680_SLEEP_MODE) {
 800374c:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8003750:	b152      	cbz	r2, 8003768 <bme680_set_sensor_mode+0x76>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
 8003752:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003756:	f023 0303 	bic.w	r3, r3, #3
 800375a:	b25b      	sxtb	r3, r3
 800375c:	f002 0203 	and.w	r2, r2, #3
 8003760:	4313      	orrs	r3, r2
 8003762:	f88d 3007 	strb.w	r3, [sp, #7]
			if (rslt == BME680_OK)
 8003766:	b115      	cbz	r5, 800376e <bme680_set_sensor_mode+0x7c>
}
 8003768:	4628      	mov	r0, r5
 800376a:	b002      	add	sp, #8
 800376c:	bd70      	pop	{r4, r5, r6, pc}
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 800376e:	4623      	mov	r3, r4
 8003770:	2201      	movs	r2, #1
 8003772:	f10d 0107 	add.w	r1, sp, #7
 8003776:	f10d 0006 	add.w	r0, sp, #6
 800377a:	f7ff fee8 	bl	800354e <bme680_set_regs>
 800377e:	4605      	mov	r5, r0
 8003780:	e7f2      	b.n	8003768 <bme680_set_sensor_mode+0x76>

08003782 <bme680_set_sensor_settings>:
{
 8003782:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003784:	b085      	sub	sp, #20
 8003786:	4606      	mov	r6, r0
 8003788:	460c      	mov	r4, r1
	uint8_t data = 0;
 800378a:	2300      	movs	r3, #0
 800378c:	f88d 300f 	strb.w	r3, [sp, #15]
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 8003790:	9302      	str	r3, [sp, #8]
 8003792:	f8ad 300c 	strh.w	r3, [sp, #12]
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 8003796:	9300      	str	r3, [sp, #0]
 8003798:	f8ad 3004 	strh.w	r3, [sp, #4]
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
 800379c:	f891 7044 	ldrb.w	r7, [r1, #68]	; 0x44
	rslt = null_ptr_check(dev);
 80037a0:	4608      	mov	r0, r1
 80037a2:	f7ff fcf9 	bl	8003198 <null_ptr_check>
	if (rslt == BME680_OK) {
 80037a6:	4603      	mov	r3, r0
 80037a8:	b9e8      	cbnz	r0, 80037e6 <bme680_set_sensor_settings+0x64>
		if (desired_settings & BME680_GAS_MEAS_SEL)
 80037aa:	f016 0f08 	tst.w	r6, #8
 80037ae:	d11d      	bne.n	80037ec <bme680_set_sensor_settings+0x6a>
		dev->power_mode = BME680_SLEEP_MODE;
 80037b0:	2200      	movs	r2, #0
 80037b2:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
		if (rslt == BME680_OK)
 80037b6:	b1f3      	cbz	r3, 80037f6 <bme680_set_sensor_settings+0x74>
		if (desired_settings & BME680_FILTER_SEL) {
 80037b8:	f016 0f10 	tst.w	r6, #16
 80037bc:	d120      	bne.n	8003800 <bme680_set_sensor_settings+0x7e>
	uint8_t count = 0;
 80037be:	2500      	movs	r5, #0
		if (desired_settings & BME680_HCNTRL_SEL) {
 80037c0:	f016 0f20 	tst.w	r6, #32
 80037c4:	d143      	bne.n	800384e <bme680_set_sensor_settings+0xcc>
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
 80037c6:	f016 0f03 	tst.w	r6, #3
 80037ca:	d16a      	bne.n	80038a2 <bme680_set_sensor_settings+0x120>
		if (desired_settings & BME680_OSH_SEL) {
 80037cc:	f016 0f04 	tst.w	r6, #4
 80037d0:	f040 80a3 	bne.w	800391a <bme680_set_sensor_settings+0x198>
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
 80037d4:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 80037d8:	f040 80c9 	bne.w	800396e <bme680_set_sensor_settings+0x1ec>
		if (rslt == BME680_OK)
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f000 810e 	beq.w	80039fe <bme680_set_sensor_settings+0x27c>
		dev->power_mode = intended_power_mode;
 80037e2:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	b005      	add	sp, #20
 80037ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
			rslt = set_gas_config(dev);
 80037ec:	4620      	mov	r0, r4
 80037ee:	f7ff ff07 	bl	8003600 <set_gas_config>
 80037f2:	4603      	mov	r3, r0
 80037f4:	e7dc      	b.n	80037b0 <bme680_set_sensor_settings+0x2e>
			rslt = bme680_set_sensor_mode(dev);
 80037f6:	4620      	mov	r0, r4
 80037f8:	f7ff ff7b 	bl	80036f2 <bme680_set_sensor_mode>
 80037fc:	4603      	mov	r3, r0
 80037fe:	e7db      	b.n	80037b8 <bme680_set_sensor_settings+0x36>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
 8003800:	4623      	mov	r3, r4
 8003802:	2207      	movs	r2, #7
 8003804:	2100      	movs	r1, #0
 8003806:	f104 003b 	add.w	r0, r4, #59	; 0x3b
 800380a:	f7ff fca5 	bl	8003158 <boundary_check>
			if (rslt == BME680_OK)
 800380e:	4603      	mov	r3, r0
 8003810:	b1a0      	cbz	r0, 800383c <bme680_set_sensor_settings+0xba>
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 8003812:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8003816:	f022 021c 	bic.w	r2, r2, #28
 800381a:	b252      	sxtb	r2, r2
 800381c:	f894 103b 	ldrb.w	r1, [r4, #59]	; 0x3b
 8003820:	0089      	lsls	r1, r1, #2
 8003822:	f001 011c 	and.w	r1, r1, #28
 8003826:	430a      	orrs	r2, r1
 8003828:	b2d2      	uxtb	r2, r2
 800382a:	f88d 200f 	strb.w	r2, [sp, #15]
			reg_array[count] = reg_addr; /* Append configuration */
 800382e:	2175      	movs	r1, #117	; 0x75
 8003830:	f88d 1008 	strb.w	r1, [sp, #8]
			data_array[count] = data;
 8003834:	f88d 2000 	strb.w	r2, [sp]
			count++;
 8003838:	2501      	movs	r5, #1
 800383a:	e7c1      	b.n	80037c0 <bme680_set_sensor_settings+0x3e>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 800383c:	4623      	mov	r3, r4
 800383e:	2201      	movs	r2, #1
 8003840:	f10d 010f 	add.w	r1, sp, #15
 8003844:	2075      	movs	r0, #117	; 0x75
 8003846:	f7ff fd16 	bl	8003276 <bme680_get_regs>
 800384a:	4603      	mov	r3, r0
 800384c:	e7e1      	b.n	8003812 <bme680_set_sensor_settings+0x90>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
 800384e:	4623      	mov	r3, r4
 8003850:	2208      	movs	r2, #8
 8003852:	2100      	movs	r1, #0
 8003854:	f104 003d 	add.w	r0, r4, #61	; 0x3d
 8003858:	f7ff fc7e 	bl	8003158 <boundary_check>
			if (rslt == BME680_OK)
 800385c:	4603      	mov	r3, r0
 800385e:	b1b8      	cbz	r0, 8003890 <bme680_set_sensor_settings+0x10e>
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 8003860:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8003864:	f022 0208 	bic.w	r2, r2, #8
 8003868:	b252      	sxtb	r2, r2
 800386a:	f994 103d 	ldrsb.w	r1, [r4, #61]	; 0x3d
 800386e:	f001 0108 	and.w	r1, r1, #8
 8003872:	430a      	orrs	r2, r1
 8003874:	b2d2      	uxtb	r2, r2
 8003876:	f88d 200f 	strb.w	r2, [sp, #15]
			reg_array[count] = reg_addr; /* Append configuration */
 800387a:	f105 0110 	add.w	r1, r5, #16
 800387e:	4469      	add	r1, sp
 8003880:	2070      	movs	r0, #112	; 0x70
 8003882:	f801 0c08 	strb.w	r0, [r1, #-8]
			data_array[count] = data;
 8003886:	f801 2c10 	strb.w	r2, [r1, #-16]
			count++;
 800388a:	3501      	adds	r5, #1
 800388c:	b2ed      	uxtb	r5, r5
 800388e:	e79a      	b.n	80037c6 <bme680_set_sensor_settings+0x44>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8003890:	4623      	mov	r3, r4
 8003892:	2201      	movs	r2, #1
 8003894:	f10d 010f 	add.w	r1, sp, #15
 8003898:	2070      	movs	r0, #112	; 0x70
 800389a:	f7ff fcec 	bl	8003276 <bme680_get_regs>
 800389e:	4603      	mov	r3, r0
 80038a0:	e7de      	b.n	8003860 <bme680_set_sensor_settings+0xde>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
 80038a2:	4623      	mov	r3, r4
 80038a4:	2205      	movs	r2, #5
 80038a6:	2100      	movs	r1, #0
 80038a8:	f104 0039 	add.w	r0, r4, #57	; 0x39
 80038ac:	f7ff fc54 	bl	8003158 <boundary_check>
			if (rslt == BME680_OK)
 80038b0:	4603      	mov	r3, r0
 80038b2:	b348      	cbz	r0, 8003908 <bme680_set_sensor_settings+0x186>
			if (desired_settings & BME680_OST_SEL)
 80038b4:	f016 0f01 	tst.w	r6, #1
 80038b8:	d009      	beq.n	80038ce <bme680_set_sensor_settings+0x14c>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
 80038ba:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80038be:	f002 021f 	and.w	r2, r2, #31
 80038c2:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 80038c6:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
 80038ca:	f88d 200f 	strb.w	r2, [sp, #15]
			if (desired_settings & BME680_OSP_SEL)
 80038ce:	f016 0f02 	tst.w	r6, #2
 80038d2:	d00c      	beq.n	80038ee <bme680_set_sensor_settings+0x16c>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
 80038d4:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80038d8:	f022 021c 	bic.w	r2, r2, #28
 80038dc:	b252      	sxtb	r2, r2
 80038de:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
 80038e2:	0089      	lsls	r1, r1, #2
 80038e4:	f001 011c 	and.w	r1, r1, #28
 80038e8:	430a      	orrs	r2, r1
 80038ea:	f88d 200f 	strb.w	r2, [sp, #15]
			reg_array[count] = reg_addr;
 80038ee:	f105 0210 	add.w	r2, r5, #16
 80038f2:	446a      	add	r2, sp
 80038f4:	2174      	movs	r1, #116	; 0x74
 80038f6:	f802 1c08 	strb.w	r1, [r2, #-8]
			data_array[count] = data;
 80038fa:	f89d 100f 	ldrb.w	r1, [sp, #15]
 80038fe:	f802 1c10 	strb.w	r1, [r2, #-16]
			count++;
 8003902:	3501      	adds	r5, #1
 8003904:	b2ed      	uxtb	r5, r5
 8003906:	e761      	b.n	80037cc <bme680_set_sensor_settings+0x4a>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8003908:	4623      	mov	r3, r4
 800390a:	2201      	movs	r2, #1
 800390c:	f10d 010f 	add.w	r1, sp, #15
 8003910:	2074      	movs	r0, #116	; 0x74
 8003912:	f7ff fcb0 	bl	8003276 <bme680_get_regs>
 8003916:	4603      	mov	r3, r0
 8003918:	e7cc      	b.n	80038b4 <bme680_set_sensor_settings+0x132>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
 800391a:	4623      	mov	r3, r4
 800391c:	2205      	movs	r2, #5
 800391e:	2100      	movs	r1, #0
 8003920:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8003924:	f7ff fc18 	bl	8003158 <boundary_check>
			if (rslt == BME680_OK)
 8003928:	4603      	mov	r3, r0
 800392a:	b1b8      	cbz	r0, 800395c <bme680_set_sensor_settings+0x1da>
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 800392c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8003930:	f022 0207 	bic.w	r2, r2, #7
 8003934:	b252      	sxtb	r2, r2
 8003936:	f994 1038 	ldrsb.w	r1, [r4, #56]	; 0x38
 800393a:	f001 0107 	and.w	r1, r1, #7
 800393e:	430a      	orrs	r2, r1
 8003940:	b2d2      	uxtb	r2, r2
 8003942:	f88d 200f 	strb.w	r2, [sp, #15]
			reg_array[count] = reg_addr; /* Append configuration */
 8003946:	f105 0110 	add.w	r1, r5, #16
 800394a:	4469      	add	r1, sp
 800394c:	2072      	movs	r0, #114	; 0x72
 800394e:	f801 0c08 	strb.w	r0, [r1, #-8]
			data_array[count] = data;
 8003952:	f801 2c10 	strb.w	r2, [r1, #-16]
			count++;
 8003956:	3501      	adds	r5, #1
 8003958:	b2ed      	uxtb	r5, r5
 800395a:	e73b      	b.n	80037d4 <bme680_set_sensor_settings+0x52>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 800395c:	4623      	mov	r3, r4
 800395e:	2201      	movs	r2, #1
 8003960:	f10d 010f 	add.w	r1, sp, #15
 8003964:	2072      	movs	r0, #114	; 0x72
 8003966:	f7ff fc86 	bl	8003276 <bme680_get_regs>
 800396a:	4603      	mov	r3, r0
 800396c:	e7de      	b.n	800392c <bme680_set_sensor_settings+0x1aa>
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
 800396e:	4623      	mov	r3, r4
 8003970:	2201      	movs	r2, #1
 8003972:	2100      	movs	r1, #0
 8003974:	f104 003e 	add.w	r0, r4, #62	; 0x3e
 8003978:	f7ff fbee 	bl	8003158 <boundary_check>
			if (rslt == BME680_OK) {
 800397c:	4603      	mov	r3, r0
 800397e:	b360      	cbz	r0, 80039da <bme680_set_sensor_settings+0x258>
			if (rslt == BME680_OK)
 8003980:	b3a3      	cbz	r3, 80039ec <bme680_set_sensor_settings+0x26a>
			if (desired_settings & BME680_RUN_GAS_SEL)
 8003982:	f016 0f40 	tst.w	r6, #64	; 0x40
 8003986:	d00c      	beq.n	80039a2 <bme680_set_sensor_settings+0x220>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
 8003988:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800398c:	f022 0210 	bic.w	r2, r2, #16
 8003990:	b252      	sxtb	r2, r2
 8003992:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8003996:	0109      	lsls	r1, r1, #4
 8003998:	f001 0110 	and.w	r1, r1, #16
 800399c:	430a      	orrs	r2, r1
 800399e:	f88d 200f 	strb.w	r2, [sp, #15]
			if (desired_settings & BME680_NBCONV_SEL)
 80039a2:	f016 0f80 	tst.w	r6, #128	; 0x80
 80039a6:	d00b      	beq.n	80039c0 <bme680_set_sensor_settings+0x23e>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
 80039a8:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80039ac:	f022 020f 	bic.w	r2, r2, #15
 80039b0:	b252      	sxtb	r2, r2
 80039b2:	f994 103c 	ldrsb.w	r1, [r4, #60]	; 0x3c
 80039b6:	f001 010f 	and.w	r1, r1, #15
 80039ba:	430a      	orrs	r2, r1
 80039bc:	f88d 200f 	strb.w	r2, [sp, #15]
			reg_array[count] = reg_addr; /* Append configuration */
 80039c0:	f105 0210 	add.w	r2, r5, #16
 80039c4:	446a      	add	r2, sp
 80039c6:	2171      	movs	r1, #113	; 0x71
 80039c8:	f802 1c08 	strb.w	r1, [r2, #-8]
			data_array[count] = data;
 80039cc:	f89d 100f 	ldrb.w	r1, [sp, #15]
 80039d0:	f802 1c10 	strb.w	r1, [r2, #-16]
			count++;
 80039d4:	3501      	adds	r5, #1
 80039d6:	b2ed      	uxtb	r5, r5
 80039d8:	e700      	b.n	80037dc <bme680_set_sensor_settings+0x5a>
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
 80039da:	4623      	mov	r3, r4
 80039dc:	220a      	movs	r2, #10
 80039de:	2100      	movs	r1, #0
 80039e0:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80039e4:	f7ff fbb8 	bl	8003158 <boundary_check>
 80039e8:	4603      	mov	r3, r0
 80039ea:	e7c9      	b.n	8003980 <bme680_set_sensor_settings+0x1fe>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80039ec:	4623      	mov	r3, r4
 80039ee:	2201      	movs	r2, #1
 80039f0:	f10d 010f 	add.w	r1, sp, #15
 80039f4:	2071      	movs	r0, #113	; 0x71
 80039f6:	f7ff fc3e 	bl	8003276 <bme680_get_regs>
 80039fa:	4603      	mov	r3, r0
 80039fc:	e7c1      	b.n	8003982 <bme680_set_sensor_settings+0x200>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
 80039fe:	4623      	mov	r3, r4
 8003a00:	462a      	mov	r2, r5
 8003a02:	4669      	mov	r1, sp
 8003a04:	a802      	add	r0, sp, #8
 8003a06:	f7ff fda2 	bl	800354e <bme680_set_regs>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	e6e9      	b.n	80037e2 <bme680_set_sensor_settings+0x60>
	...

08003a10 <bme680_get_profile_dur>:
{
 8003a10:	b082      	sub	sp, #8
 8003a12:	4684      	mov	ip, r0
 8003a14:	460a      	mov	r2, r1
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 8003a16:	4b19      	ldr	r3, [pc, #100]	; (8003a7c <bme680_get_profile_dur+0x6c>)
 8003a18:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003a1c:	9000      	str	r0, [sp, #0]
 8003a1e:	f8ad 1004 	strh.w	r1, [sp, #4]
	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 8003a22:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
 8003a26:	3308      	adds	r3, #8
 8003a28:	446b      	add	r3, sp
 8003a2a:	f813 3c08 	ldrb.w	r3, [r3, #-8]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 8003a2e:	f892 003a 	ldrb.w	r0, [r2, #58]	; 0x3a
 8003a32:	f100 0108 	add.w	r1, r0, #8
 8003a36:	eb0d 0001 	add.w	r0, sp, r1
 8003a3a:	f810 1c08 	ldrb.w	r1, [r0, #-8]
 8003a3e:	4419      	add	r1, r3
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 8003a40:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8003a44:	3308      	adds	r3, #8
 8003a46:	446b      	add	r3, sp
 8003a48:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8003a4c:	4419      	add	r1, r3
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 8003a4e:	f240 70ab 	movw	r0, #1963	; 0x7ab
 8003a52:	f241 23b9 	movw	r3, #4793	; 0x12b9
 8003a56:	fb00 3301 	mla	r3, r0, r1, r3
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 8003a5a:	4909      	ldr	r1, [pc, #36]	; (8003a80 <bme680_get_profile_dur+0x70>)
 8003a5c:	fba1 1303 	umull	r1, r3, r1, r3
 8003a60:	099b      	lsrs	r3, r3, #6
	*duration = (uint16_t) tph_dur;
 8003a62:	3301      	adds	r3, #1
 8003a64:	f8ac 3000 	strh.w	r3, [ip]
	if (dev->gas_sett.run_gas) {
 8003a68:	f892 103e 	ldrb.w	r1, [r2, #62]	; 0x3e
 8003a6c:	b121      	cbz	r1, 8003a78 <bme680_get_profile_dur+0x68>
		*duration += dev->gas_sett.heatr_dur;
 8003a6e:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 8003a72:	4413      	add	r3, r2
 8003a74:	f8ac 3000 	strh.w	r3, [ip]
}
 8003a78:	b002      	add	sp, #8
 8003a7a:	4770      	bx	lr
 8003a7c:	080140a8 	.word	0x080140a8
 8003a80:	10624dd3 	.word	0x10624dd3

08003a84 <bme680_get_sensor_data>:
{
 8003a84:	b538      	push	{r3, r4, r5, lr}
 8003a86:	4605      	mov	r5, r0
 8003a88:	460c      	mov	r4, r1
	rslt = null_ptr_check(dev);
 8003a8a:	4608      	mov	r0, r1
 8003a8c:	f7ff fb84 	bl	8003198 <null_ptr_check>
	if (rslt == BME680_OK) {
 8003a90:	b100      	cbz	r0, 8003a94 <bme680_get_sensor_data+0x10>
}
 8003a92:	bd38      	pop	{r3, r4, r5, pc}
		rslt = read_field_data(data, dev);
 8003a94:	4621      	mov	r1, r4
 8003a96:	4628      	mov	r0, r5
 8003a98:	f7ff fcdc 	bl	8003454 <read_field_data>
		if (rslt == BME680_OK) {
 8003a9c:	2800      	cmp	r0, #0
 8003a9e:	d1f8      	bne.n	8003a92 <bme680_get_sensor_data+0xe>
			if (data->status & BME680_NEW_DATA_MSK)
 8003aa0:	f995 3000 	ldrsb.w	r3, [r5]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	db03      	blt.n	8003ab0 <bme680_get_sensor_data+0x2c>
				dev->new_fields = 0;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003aae:	e7f0      	b.n	8003a92 <bme680_get_sensor_data+0xe>
				dev->new_fields = 1;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ab6:	e7ec      	b.n	8003a92 <bme680_get_sensor_data+0xe>

08003ab8 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8003ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003abc:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8003abe:	2400      	movs	r4, #0
 8003ac0:	9401      	str	r4, [sp, #4]
 8003ac2:	9402      	str	r4, [sp, #8]
 8003ac4:	9403      	str	r4, [sp, #12]
 8003ac6:	9404      	str	r4, [sp, #16]
 8003ac8:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ace:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ad0:	f042 0204 	orr.w	r2, r2, #4
 8003ad4:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad8:	f003 0304 	and.w	r3, r3, #4
 8003adc:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8003ade:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8003ae0:	2710      	movs	r7, #16
 8003ae2:	9701      	str	r7, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8003aec:	4d12      	ldr	r5, [pc, #72]	; (8003b38 <BSP_RADIO_Init+0x80>)
 8003aee:	a901      	add	r1, sp, #4
 8003af0:	4628      	mov	r0, r5
 8003af2:	f001 fa21 	bl	8004f38 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8003af6:	f04f 0820 	mov.w	r8, #32
 8003afa:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8003afe:	a901      	add	r1, sp, #4
 8003b00:	4628      	mov	r0, r5
 8003b02:	f001 fa19 	bl	8004f38 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8003b06:	2608      	movs	r6, #8
 8003b08:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8003b0a:	a901      	add	r1, sp, #4
 8003b0c:	4628      	mov	r0, r5
 8003b0e:	f001 fa13 	bl	8004f38 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003b12:	4622      	mov	r2, r4
 8003b14:	4641      	mov	r1, r8
 8003b16:	4628      	mov	r0, r5
 8003b18:	f001 fb5e 	bl	80051d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8003b1c:	4622      	mov	r2, r4
 8003b1e:	4639      	mov	r1, r7
 8003b20:	4628      	mov	r0, r5
 8003b22:	f001 fb59 	bl	80051d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8003b26:	4622      	mov	r2, r4
 8003b28:	4631      	mov	r1, r6
 8003b2a:	4628      	mov	r0, r5
 8003b2c:	f001 fb54 	bl	80051d8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 8003b30:	4620      	mov	r0, r4
 8003b32:	b006      	add	sp, #24
 8003b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b38:	48000800 	.word	0x48000800

08003b3c <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8003b3c:	b510      	push	{r4, lr}
  switch (Config)
 8003b3e:	2803      	cmp	r0, #3
 8003b40:	d813      	bhi.n	8003b6a <BSP_RADIO_ConfigRFSwitch+0x2e>
 8003b42:	e8df f000 	tbb	[pc, r0]
 8003b46:	1402      	.short	0x1402
 8003b48:	3625      	.short	0x3625
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8003b4a:	4c22      	ldr	r4, [pc, #136]	; (8003bd4 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	2108      	movs	r1, #8
 8003b50:	4620      	mov	r0, r4
 8003b52:	f001 fb41 	bl	80051d8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8003b56:	2200      	movs	r2, #0
 8003b58:	2110      	movs	r1, #16
 8003b5a:	4620      	mov	r0, r4
 8003b5c:	f001 fb3c 	bl	80051d8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8003b60:	2200      	movs	r2, #0
 8003b62:	2120      	movs	r1, #32
 8003b64:	4620      	mov	r0, r4
 8003b66:	f001 fb37 	bl	80051d8 <HAL_GPIO_WritePin>
    default:
      break;    
  }  

  return BSP_ERROR_NONE;
}
 8003b6a:	2000      	movs	r0, #0
 8003b6c:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8003b6e:	4c19      	ldr	r4, [pc, #100]	; (8003bd4 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8003b70:	2201      	movs	r2, #1
 8003b72:	2108      	movs	r1, #8
 8003b74:	4620      	mov	r0, r4
 8003b76:	f001 fb2f 	bl	80051d8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	2110      	movs	r1, #16
 8003b7e:	4620      	mov	r0, r4
 8003b80:	f001 fb2a 	bl	80051d8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003b84:	2200      	movs	r2, #0
 8003b86:	2120      	movs	r1, #32
 8003b88:	4620      	mov	r0, r4
 8003b8a:	f001 fb25 	bl	80051d8 <HAL_GPIO_WritePin>
      break;
 8003b8e:	e7ec      	b.n	8003b6a <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8003b90:	4c10      	ldr	r4, [pc, #64]	; (8003bd4 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8003b92:	2201      	movs	r2, #1
 8003b94:	2108      	movs	r1, #8
 8003b96:	4620      	mov	r0, r4
 8003b98:	f001 fb1e 	bl	80051d8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	2110      	movs	r1, #16
 8003ba0:	4620      	mov	r0, r4
 8003ba2:	f001 fb19 	bl	80051d8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	2120      	movs	r1, #32
 8003baa:	4620      	mov	r0, r4
 8003bac:	f001 fb14 	bl	80051d8 <HAL_GPIO_WritePin>
      break;
 8003bb0:	e7db      	b.n	8003b6a <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8003bb2:	4c08      	ldr	r4, [pc, #32]	; (8003bd4 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	2108      	movs	r1, #8
 8003bb8:	4620      	mov	r0, r4
 8003bba:	f001 fb0d 	bl	80051d8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	2110      	movs	r1, #16
 8003bc2:	4620      	mov	r0, r4
 8003bc4:	f001 fb08 	bl	80051d8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8003bc8:	2201      	movs	r2, #1
 8003bca:	2120      	movs	r1, #32
 8003bcc:	4620      	mov	r0, r4
 8003bce:	f001 fb03 	bl	80051d8 <HAL_GPIO_WritePin>
      break;
 8003bd2:	e7ca      	b.n	8003b6a <BSP_RADIO_ConfigRFSwitch+0x2e>
 8003bd4:	48000800 	.word	0x48000800

08003bd8 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
  return RADIO_CONF_RFO_LP_HP;
}
 8003bd8:	2000      	movs	r0, #0
 8003bda:	4770      	bx	lr

08003bdc <BSP_RADIO_IsTCXO>:
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
  return RADIO_CONF_TCXO_SUPPORTED;
}
 8003bdc:	2001      	movs	r0, #1
 8003bde:	4770      	bx	lr

08003be0 <BSP_RADIO_IsDCDC>:
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
  return RADIO_CONF_DCDC_SUPPORTED;
}
 8003be0:	2001      	movs	r0, #1
 8003be2:	4770      	bx	lr

08003be4 <BSP_RADIO_GetRFOMaxPowerConfig>:
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8003be4:	b908      	cbnz	r0, 8003bea <BSP_RADIO_GetRFOMaxPowerConfig+0x6>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8003be6:	200f      	movs	r0, #15
 8003be8:	4770      	bx	lr
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8003bea:	2016      	movs	r0, #22
  }

  return ret;
}
 8003bec:	4770      	bx	lr

08003bee <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8003bee:	4770      	bx	lr

08003bf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bf0:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bf2:	2003      	movs	r0, #3
 8003bf4:	f000 fd2e 	bl	8004654 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003bf8:	f002 f864 	bl	8005cc4 <HAL_RCC_GetHCLKFreq>
 8003bfc:	4b06      	ldr	r3, [pc, #24]	; (8003c18 <HAL_Init+0x28>)
 8003bfe:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c00:	200f      	movs	r0, #15
 8003c02:	f7fd ff5f 	bl	8001ac4 <HAL_InitTick>
 8003c06:	b110      	cbz	r0, 8003c0e <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8003c08:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8003c0a:	4620      	mov	r0, r4
 8003c0c:	bd10      	pop	{r4, pc}
 8003c0e:	4604      	mov	r4, r0
    HAL_MspInit();
 8003c10:	f7fd fe1c 	bl	800184c <HAL_MspInit>
 8003c14:	e7f9      	b.n	8003c0a <HAL_Init+0x1a>
 8003c16:	bf00      	nop
 8003c18:	20000070 	.word	0x20000070

08003c1c <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003c1c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8003c20:	6913      	ldr	r3, [r2, #16]
 8003c22:	f023 0302 	bic.w	r3, r3, #2
 8003c26:	6113      	str	r3, [r2, #16]
}
 8003c28:	4770      	bx	lr

08003c2a <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003c2a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8003c2e:	6913      	ldr	r3, [r2, #16]
 8003c30:	f043 0302 	orr.w	r3, r3, #2
 8003c34:	6113      	str	r3, [r2, #16]
}
 8003c36:	4770      	bx	lr

08003c38 <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return (READ_REG(*((uint32_t *)UID_BASE)));
}
 8003c38:	4b01      	ldr	r3, [pc, #4]	; (8003c40 <HAL_GetUIDw0+0x8>)
 8003c3a:	f8d3 0590 	ldr.w	r0, [r3, #1424]	; 0x590
 8003c3e:	4770      	bx	lr
 8003c40:	1fff7000 	.word	0x1fff7000

08003c44 <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 8003c44:	4b01      	ldr	r3, [pc, #4]	; (8003c4c <HAL_GetUIDw1+0x8>)
 8003c46:	f8d3 0594 	ldr.w	r0, [r3, #1428]	; 0x594
 8003c4a:	4770      	bx	lr
 8003c4c:	1fff7000 	.word	0x1fff7000

08003c50 <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 8003c50:	4b01      	ldr	r3, [pc, #4]	; (8003c58 <HAL_GetUIDw2+0x8>)
 8003c52:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8003c56:	4770      	bx	lr
 8003c58:	1fff7000 	.word	0x1fff7000

08003c5c <HAL_DBGMCU_EnableDBGSleepMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003c5c:	4a02      	ldr	r2, [pc, #8]	; (8003c68 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 8003c5e:	6853      	ldr	r3, [r2, #4]
 8003c60:	f043 0301 	orr.w	r3, r3, #1
 8003c64:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  LL_DBGMCU_EnableDBGSleepMode();
}
 8003c66:	4770      	bx	lr
 8003c68:	e0042000 	.word	0xe0042000

08003c6c <HAL_DBGMCU_EnableDBGStopMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003c6c:	4a02      	ldr	r2, [pc, #8]	; (8003c78 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 8003c6e:	6853      	ldr	r3, [r2, #4]
 8003c70:	f043 0302 	orr.w	r3, r3, #2
 8003c74:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  LL_DBGMCU_EnableDBGStopMode();
}
 8003c76:	4770      	bx	lr
 8003c78:	e0042000 	.word	0xe0042000

08003c7c <HAL_DBGMCU_EnableDBGStandbyMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8003c7c:	4a02      	ldr	r2, [pc, #8]	; (8003c88 <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 8003c7e:	6853      	ldr	r3, [r2, #4]
 8003c80:	f043 0304 	orr.w	r3, r3, #4
 8003c84:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  LL_DBGMCU_EnableDBGStandbyMode();
}
 8003c86:	4770      	bx	lr
 8003c88:	e0042000 	.word	0xe0042000

08003c8c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003c8c:	b570      	push	{r4, r5, r6, lr}
 8003c8e:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003c90:	2300      	movs	r3, #0
 8003c92:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8003c94:	2800      	cmp	r0, #0
 8003c96:	f000 811b 	beq.w	8003ed0 <HAL_ADC_Init+0x244>
 8003c9a:	4604      	mov	r4, r0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003c9c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003c9e:	b1bb      	cbz	r3, 8003cd0 <HAL_ADC_Init+0x44>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ca0:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003ca2:	6893      	ldr	r3, [r2, #8]
 8003ca4:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003ca8:	d11f      	bne.n	8003cea <HAL_ADC_Init+0x5e>
  MODIFY_REG(ADCx->CR,
 8003caa:	6893      	ldr	r3, [r2, #8]
 8003cac:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003cb0:	f023 0317 	bic.w	r3, r3, #23
 8003cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb8:	6093      	str	r3, [r2, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003cba:	4b86      	ldr	r3, [pc, #536]	; (8003ed4 <HAL_ADC_Init+0x248>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	099b      	lsrs	r3, r3, #6
 8003cc0:	4a85      	ldr	r2, [pc, #532]	; (8003ed8 <HAL_ADC_Init+0x24c>)
 8003cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc6:	099b      	lsrs	r3, r3, #6
 8003cc8:	3301      	adds	r3, #1
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003cce:	e009      	b.n	8003ce4 <HAL_ADC_Init+0x58>
    HAL_ADC_MspInit(hadc);
 8003cd0:	f7fd f9bc 	bl	800104c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8003cd8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8003cdc:	e7e0      	b.n	8003ca0 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 8003cde:	9b01      	ldr	r3, [sp, #4]
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003ce4:	9b01      	ldr	r3, [sp, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1f9      	bne.n	8003cde <HAL_ADC_Init+0x52>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003cea:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003cec:	6893      	ldr	r3, [r2, #8]
 8003cee:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003cf2:	f040 809c 	bne.w	8003e2e <HAL_ADC_Init+0x1a2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cf6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003cf8:	f043 0310 	orr.w	r3, r3, #16
 8003cfc:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cfe:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003d00:	f043 0301 	orr.w	r3, r3, #1
 8003d04:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003d06:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d08:	6893      	ldr	r3, [r2, #8]
 8003d0a:	f013 0304 	ands.w	r3, r3, #4
 8003d0e:	d000      	beq.n	8003d12 <HAL_ADC_Init+0x86>
 8003d10:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d12:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003d14:	f011 0f10 	tst.w	r1, #16
 8003d18:	f040 80d3 	bne.w	8003ec2 <HAL_ADC_Init+0x236>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f040 80d0 	bne.w	8003ec2 <HAL_ADC_Init+0x236>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d22:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003d24:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8003d28:	f041 0102 	orr.w	r1, r1, #2
 8003d2c:	65a1      	str	r1, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d2e:	6891      	ldr	r1, [r2, #8]
 8003d30:	f011 0f01 	tst.w	r1, #1
 8003d34:	d151      	bne.n	8003dda <HAL_ADC_Init+0x14e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003d36:	68a1      	ldr	r1, [r4, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003d38:	7e25      	ldrb	r5, [r4, #24]
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003d3a:	ea41 3185 	orr.w	r1, r1, r5, lsl #14
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003d3e:	7e65      	ldrb	r5, [r4, #25]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003d40:	ea41 31c5 	orr.w	r1, r1, r5, lsl #15
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003d44:	7ea6      	ldrb	r6, [r4, #26]
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003d46:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003d4a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8003d4c:	b10d      	cbz	r5, 8003d52 <HAL_ADC_Init+0xc6>
 8003d4e:	f44f 5580 	mov.w	r5, #4096	; 0x1000
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003d52:	4329      	orrs	r1, r5
                   hadc->Init.DataAlign                                           |
 8003d54:	68e5      	ldr	r5, [r4, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003d56:	4329      	orrs	r1, r5
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003d58:	6925      	ldr	r5, [r4, #16]
 8003d5a:	2d00      	cmp	r5, #0
 8003d5c:	db69      	blt.n	8003e32 <HAL_ADC_Init+0x1a6>
 8003d5e:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8003d62:	4329      	orrs	r1, r5
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003d64:	f894 502c 	ldrb.w	r5, [r4, #44]	; 0x2c
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003d68:	ea41 0145 	orr.w	r1, r1, r5, lsl #1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003d6c:	f894 5020 	ldrb.w	r5, [r4, #32]
 8003d70:	2d01      	cmp	r5, #1
 8003d72:	d061      	beq.n	8003e38 <HAL_ADC_Init+0x1ac>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d74:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003d76:	b125      	cbz	r5, 8003d82 <HAL_ADC_Init+0xf6>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003d78:	f405 75e0 	and.w	r5, r5, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8003d7c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003d7e:	4335      	orrs	r5, r6
 8003d80:	4329      	orrs	r1, r5
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003d82:	68d5      	ldr	r5, [r2, #12]
 8003d84:	f425 3cfe 	bic.w	ip, r5, #130048	; 0x1fc00
 8003d88:	f42c 7cff 	bic.w	ip, ip, #510	; 0x1fe
 8003d8c:	ea4c 0101 	orr.w	r1, ip, r1
 8003d90:	60d1      	str	r1, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003d92:	6862      	ldr	r2, [r4, #4]
 8003d94:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8003d98:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003d9a:	ea42 0501 	orr.w	r5, r2, r1
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003d9e:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 8003da2:	2901      	cmp	r1, #1
 8003da4:	d055      	beq.n	8003e52 <HAL_ADC_Init+0x1c6>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003da6:	6822      	ldr	r2, [r4, #0]
 8003da8:	6916      	ldr	r6, [r2, #16]
 8003daa:	494c      	ldr	r1, [pc, #304]	; (8003edc <HAL_ADC_Init+0x250>)
 8003dac:	4031      	ands	r1, r6
 8003dae:	4329      	orrs	r1, r5
 8003db0:	6111      	str	r1, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003db2:	6862      	ldr	r2, [r4, #4]
 8003db4:	f1b2 4f40 	cmp.w	r2, #3221225472	; 0xc0000000
 8003db8:	d00f      	beq.n	8003dda <HAL_ADC_Init+0x14e>
 8003dba:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003dbe:	d00c      	beq.n	8003dda <HAL_ADC_Init+0x14e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003dc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8003dc4:	d009      	beq.n	8003dda <HAL_ADC_Init+0x14e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8003dc6:	4d46      	ldr	r5, [pc, #280]	; (8003ee0 <HAL_ADC_Init+0x254>)
 8003dc8:	f8d5 1708 	ldr.w	r1, [r5, #1800]	; 0x708
 8003dcc:	f421 1170 	bic.w	r1, r1, #3932160	; 0x3c0000
 8003dd0:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	f8c5 2708 	str.w	r2, [r5, #1800]	; 0x708
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003dda:	6825      	ldr	r5, [r4, #0]
 8003ddc:	6b62      	ldr	r2, [r4, #52]	; 0x34
  MODIFY_REG(ADCx->SMPR,
 8003dde:	6969      	ldr	r1, [r5, #20]
 8003de0:	f021 0107 	bic.w	r1, r1, #7
 8003de4:	430a      	orrs	r2, r1
 8003de6:	616a      	str	r2, [r5, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003de8:	6821      	ldr	r1, [r4, #0]
 8003dea:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8003dec:	694a      	ldr	r2, [r1, #20]
 8003dee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003df2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8003df6:	614a      	str	r2, [r1, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003df8:	6922      	ldr	r2, [r4, #16]
 8003dfa:	2a00      	cmp	r2, #0
 8003dfc:	d133      	bne.n	8003e66 <HAL_ADC_Init+0x1da>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003dfe:	6822      	ldr	r2, [r4, #0]
 8003e00:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003e02:	f063 030f 	orn	r3, r3, #15
 8003e06:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003e08:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	f003 0307 	and.w	r3, r3, #7
      == hadc->Init.SamplingTimeCommon1)
 8003e10:	6b62      	ldr	r2, [r4, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d04c      	beq.n	8003eb0 <HAL_ADC_Init+0x224>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003e16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003e18:	f023 0312 	bic.w	r3, r3, #18
 8003e1c:	f043 0310 	orr.w	r3, r3, #16
 8003e20:	65a3      	str	r3, [r4, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e22:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003e24:	f043 0301 	orr.w	r3, r3, #1
 8003e28:	65e3      	str	r3, [r4, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003e2a:	2001      	movs	r0, #1
 8003e2c:	e04e      	b.n	8003ecc <HAL_ADC_Init+0x240>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e2e:	2000      	movs	r0, #0
 8003e30:	e76a      	b.n	8003d08 <HAL_ADC_Init+0x7c>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003e32:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 8003e36:	e794      	b.n	8003d62 <HAL_ADC_Init+0xd6>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003e38:	b916      	cbnz	r6, 8003e40 <HAL_ADC_Init+0x1b4>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003e3a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8003e3e:	e799      	b.n	8003d74 <HAL_ADC_Init+0xe8>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e40:	6da5      	ldr	r5, [r4, #88]	; 0x58
 8003e42:	f045 0520 	orr.w	r5, r5, #32
 8003e46:	65a5      	str	r5, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e48:	6de5      	ldr	r5, [r4, #92]	; 0x5c
 8003e4a:	f045 0501 	orr.w	r5, r5, #1
 8003e4e:	65e5      	str	r5, [r4, #92]	; 0x5c
 8003e50:	e790      	b.n	8003d74 <HAL_ADC_Init+0xe8>
                     hadc->Init.Oversampling.Ratio         |
 8003e52:	6c21      	ldr	r1, [r4, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003e54:	430a      	orrs	r2, r1
                     hadc->Init.Oversampling.RightBitShift |
 8003e56:	6c61      	ldr	r1, [r4, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003e58:	430a      	orrs	r2, r1
                     hadc->Init.Oversampling.TriggeredMode
 8003e5a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003e5c:	430a      	orrs	r2, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003e5e:	432a      	orrs	r2, r5
 8003e60:	f042 0501 	orr.w	r5, r2, #1
 8003e64:	e79f      	b.n	8003da6 <HAL_ADC_Init+0x11a>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003e66:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8003e6a:	d1cd      	bne.n	8003e08 <HAL_ADC_Init+0x17c>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003e6c:	2b07      	cmp	r3, #7
 8003e6e:	d808      	bhi.n	8003e82 <HAL_ADC_Init+0x1f6>
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8003e70:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003e72:	0099      	lsls	r1, r3, #2
 8003e74:	40ca      	lsrs	r2, r1
 8003e76:	f002 020f 	and.w	r2, r2, #15
 8003e7a:	2a0f      	cmp	r2, #15
 8003e7c:	d001      	beq.n	8003e82 <HAL_ADC_Init+0x1f6>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003e7e:	3301      	adds	r3, #1
 8003e80:	e7f4      	b.n	8003e6c <HAL_ADC_Init+0x1e0>
      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d00e      	beq.n	8003ea4 <HAL_ADC_Init+0x218>
        MODIFY_REG(hadc->Instance->CHSELR,
 8003e86:	6821      	ldr	r1, [r4, #0]
 8003e88:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8003e8a:	69e3      	ldr	r3, [r4, #28]
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	f003 031c 	and.w	r3, r3, #28
 8003e94:	f06f 020f 	mvn.w	r2, #15
 8003e98:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	628b      	str	r3, [r1, #40]	; 0x28
 8003ea2:	e7b1      	b.n	8003e08 <HAL_ADC_Init+0x17c>
        SET_BIT(hadc->Instance->CHSELR,
 8003ea4:	6822      	ldr	r2, [r4, #0]
 8003ea6:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003ea8:	f063 030f 	orn	r3, r3, #15
 8003eac:	6293      	str	r3, [r2, #40]	; 0x28
 8003eae:	e7ab      	b.n	8003e08 <HAL_ADC_Init+0x17c>
      ADC_CLEAR_ERRORCODE(hadc);
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8003eb4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003eb6:	f023 0303 	bic.w	r3, r3, #3
 8003eba:	f043 0301 	orr.w	r3, r3, #1
 8003ebe:	65a3      	str	r3, [r4, #88]	; 0x58
 8003ec0:	e004      	b.n	8003ecc <HAL_ADC_Init+0x240>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ec2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003ec4:	f043 0310 	orr.w	r3, r3, #16
 8003ec8:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003eca:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 8003ecc:	b002      	add	sp, #8
 8003ece:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003ed0:	2001      	movs	r0, #1
 8003ed2:	e7fb      	b.n	8003ecc <HAL_ADC_Init+0x240>
 8003ed4:	20000070 	.word	0x20000070
 8003ed8:	053e2d63 	.word	0x053e2d63
 8003edc:	1ffffc02 	.word	0x1ffffc02
 8003ee0:	40012000 	.word	0x40012000

08003ee4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ee6:	4604      	mov	r4, r0
 8003ee8:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003eea:	6946      	ldr	r6, [r0, #20]
 8003eec:	2e08      	cmp	r6, #8
 8003eee:	d005      	beq.n	8003efc <HAL_ADC_PollForConversion+0x18>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003ef0:	6803      	ldr	r3, [r0, #0]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	f013 0f01 	tst.w	r3, #1
 8003ef8:	d11e      	bne.n	8003f38 <HAL_ADC_PollForConversion+0x54>

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003efa:	2604      	movs	r6, #4
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003efc:	f7fd fde4 	bl	8001ac8 <HAL_GetTick>
 8003f00:	4607      	mov	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003f02:	6823      	ldr	r3, [r4, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	4232      	tst	r2, r6
 8003f08:	d11c      	bne.n	8003f44 <HAL_ADC_PollForConversion+0x60>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003f0a:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003f0e:	d0f8      	beq.n	8003f02 <HAL_ADC_PollForConversion+0x1e>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003f10:	f7fd fdda 	bl	8001ac8 <HAL_GetTick>
 8003f14:	1bc3      	subs	r3, r0, r7
 8003f16:	42ab      	cmp	r3, r5
 8003f18:	d801      	bhi.n	8003f1e <HAL_ADC_PollForConversion+0x3a>
 8003f1a:	2d00      	cmp	r5, #0
 8003f1c:	d1f1      	bne.n	8003f02 <HAL_ADC_PollForConversion+0x1e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003f1e:	6823      	ldr	r3, [r4, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4233      	tst	r3, r6
 8003f24:	d1ed      	bne.n	8003f02 <HAL_ADC_PollForConversion+0x1e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003f26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f28:	f043 0304 	orr.w	r3, r3, #4
 8003f2c:	65a3      	str	r3, [r4, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8003f2e:	2300      	movs	r3, #0
 8003f30:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

          return HAL_TIMEOUT;
 8003f34:	2003      	movs	r0, #3
 8003f36:	e028      	b.n	8003f8a <HAL_ADC_PollForConversion+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f38:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003f3a:	f043 0320 	orr.w	r3, r3, #32
 8003f3e:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 8003f40:	2001      	movs	r0, #1
 8003f42:	e022      	b.n	8003f8a <HAL_ADC_PollForConversion+0xa6>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003f44:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003f46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f4a:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003f4c:	68da      	ldr	r2, [r3, #12]
 8003f4e:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8003f52:	d115      	bne.n	8003f80 <HAL_ADC_PollForConversion+0x9c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003f54:	7ea2      	ldrb	r2, [r4, #26]
 8003f56:	b99a      	cbnz	r2, 8003f80 <HAL_ADC_PollForConversion+0x9c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	f012 0f08 	tst.w	r2, #8
 8003f5e:	d00f      	beq.n	8003f80 <HAL_ADC_PollForConversion+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f60:	689a      	ldr	r2, [r3, #8]
 8003f62:	f012 0f04 	tst.w	r2, #4
 8003f66:	d111      	bne.n	8003f8c <HAL_ADC_PollForConversion+0xa8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	f022 020c 	bic.w	r2, r2, #12
 8003f6e:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003f70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f76:	f023 0301 	bic.w	r3, r3, #1
 8003f7a:	f043 0301 	orr.w	r3, r3, #1
 8003f7e:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003f80:	7e20      	ldrb	r0, [r4, #24]
 8003f82:	b960      	cbnz	r0, 8003f9e <HAL_ADC_PollForConversion+0xba>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003f84:	6823      	ldr	r3, [r4, #0]
 8003f86:	220c      	movs	r2, #12
 8003f88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8003f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f8c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f8e:	f043 0320 	orr.w	r3, r3, #32
 8003f92:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f94:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003f96:	f043 0301 	orr.w	r3, r3, #1
 8003f9a:	65e3      	str	r3, [r4, #92]	; 0x5c
 8003f9c:	e7f0      	b.n	8003f80 <HAL_ADC_PollForConversion+0x9c>
  return HAL_OK;
 8003f9e:	2000      	movs	r0, #0
 8003fa0:	e7f3      	b.n	8003f8a <HAL_ADC_PollForConversion+0xa6>

08003fa2 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003fa2:	6803      	ldr	r3, [r0, #0]
 8003fa4:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8003fa6:	4770      	bx	lr

08003fa8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003fa8:	b470      	push	{r4, r5, r6}
 8003faa:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003fac:	2200      	movs	r2, #0
 8003fae:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003fb0:	6904      	ldr	r4, [r0, #16]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003fb2:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 8003fb6:	2a01      	cmp	r2, #1
 8003fb8:	f000 8105 	beq.w	80041c6 <HAL_ADC_ConfigChannel+0x21e>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003fc4:	6802      	ldr	r2, [r0, #0]
 8003fc6:	6890      	ldr	r0, [r2, #8]
 8003fc8:	f010 0f04 	tst.w	r0, #4
 8003fcc:	d00a      	beq.n	8003fe4 <HAL_ADC_ConfigChannel+0x3c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003fd0:	f042 0220 	orr.w	r2, r2, #32
 8003fd4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003fd6:	2001      	movs	r0, #1
  }

  __HAL_UNLOCK(hadc);
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
}
 8003fde:	b003      	add	sp, #12
 8003fe0:	bc70      	pop	{r4, r5, r6}
 8003fe2:	4770      	bx	lr
    if (pConfig->Rank != ADC_RANK_NONE)
 8003fe4:	6848      	ldr	r0, [r1, #4]
 8003fe6:	2802      	cmp	r0, #2
 8003fe8:	f000 809e 	beq.w	8004128 <HAL_ADC_ConfigChannel+0x180>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003fec:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8003ff0:	d029      	beq.n	8004046 <HAL_ADC_ConfigChannel+0x9e>
 8003ff2:	4d76      	ldr	r5, [pc, #472]	; (80041cc <HAL_ADC_ConfigChannel+0x224>)
 8003ff4:	42ac      	cmp	r4, r5
 8003ff6:	d026      	beq.n	8004046 <HAL_ADC_ConfigChannel+0x9e>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003ff8:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8003ffa:	f000 001f 	and.w	r0, r0, #31
 8003ffe:	250f      	movs	r5, #15
 8004000:	4085      	lsls	r5, r0
 8004002:	ea24 0505 	bic.w	r5, r4, r5
 8004006:	680c      	ldr	r4, [r1, #0]
 8004008:	f3c4 0611 	ubfx	r6, r4, #0, #18
 800400c:	2e00      	cmp	r6, #0
 800400e:	d133      	bne.n	8004078 <HAL_ADC_ConfigChannel+0xd0>
 8004010:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8004014:	fa04 f000 	lsl.w	r0, r4, r0
 8004018:	4328      	orrs	r0, r5
 800401a:	6618      	str	r0, [r3, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800401c:	684c      	ldr	r4, [r1, #4]
 800401e:	08a0      	lsrs	r0, r4, #2
 8004020:	3001      	adds	r0, #1
 8004022:	69dd      	ldr	r5, [r3, #28]
 8004024:	42a8      	cmp	r0, r5
 8004026:	d814      	bhi.n	8004052 <HAL_ADC_ConfigChannel+0xaa>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004028:	680d      	ldr	r5, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 800402a:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800402c:	f004 041f 	and.w	r4, r4, #31
 8004030:	260f      	movs	r6, #15
 8004032:	40a6      	lsls	r6, r4
 8004034:	ea20 0006 	bic.w	r0, r0, r6
 8004038:	f3c5 6583 	ubfx	r5, r5, #26, #4
 800403c:	fa05 f404 	lsl.w	r4, r5, r4
 8004040:	4304      	orrs	r4, r0
 8004042:	6294      	str	r4, [r2, #40]	; 0x28
}
 8004044:	e005      	b.n	8004052 <HAL_ADC_ConfigChannel+0xaa>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004046:	680c      	ldr	r4, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004048:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800404a:	f3c4 0411 	ubfx	r4, r4, #0, #18
 800404e:	4320      	orrs	r0, r4
 8004050:	6290      	str	r0, [r2, #40]	; 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004052:	681c      	ldr	r4, [r3, #0]
 8004054:	680d      	ldr	r5, [r1, #0]
 8004056:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 8004058:	6960      	ldr	r0, [r4, #20]
 800405a:	ea20 2005 	bic.w	r0, r0, r5, lsl #8
 800405e:	ea02 2205 	and.w	r2, r2, r5, lsl #8
 8004062:	f022 427c 	bic.w	r2, r2, #4227858432	; 0xfc000000
 8004066:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800406a:	4302      	orrs	r2, r0
 800406c:	6162      	str	r2, [r4, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800406e:	680a      	ldr	r2, [r1, #0]
 8004070:	2a00      	cmp	r2, #0
 8004072:	db09      	blt.n	8004088 <HAL_ADC_ConfigChannel+0xe0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004074:	2000      	movs	r0, #0
 8004076:	e7af      	b.n	8003fd8 <HAL_ADC_ConfigChannel+0x30>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004078:	fa94 f4a4 	rbit	r4, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800407c:	b114      	cbz	r4, 8004084 <HAL_ADC_ConfigChannel+0xdc>
  {
    return 32U;
  }
  return __builtin_clz(value);
 800407e:	fab4 f484 	clz	r4, r4
 8004082:	e7c7      	b.n	8004014 <HAL_ADC_ConfigChannel+0x6c>
    return 32U;
 8004084:	2420      	movs	r4, #32
 8004086:	e7c5      	b.n	8004014 <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004088:	4951      	ldr	r1, [pc, #324]	; (80041d0 <HAL_ADC_ConfigChannel+0x228>)
 800408a:	f8d1 0708 	ldr.w	r0, [r1, #1800]	; 0x708
 800408e:	f000 71e0 	and.w	r1, r0, #29360128	; 0x1c00000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004092:	4c50      	ldr	r4, [pc, #320]	; (80041d4 <HAL_ADC_ConfigChannel+0x22c>)
 8004094:	42a2      	cmp	r2, r4
 8004096:	d007      	beq.n	80040a8 <HAL_ADC_ConfigChannel+0x100>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004098:	4c4f      	ldr	r4, [pc, #316]	; (80041d8 <HAL_ADC_ConfigChannel+0x230>)
 800409a:	42a2      	cmp	r2, r4
 800409c:	d026      	beq.n	80040ec <HAL_ADC_ConfigChannel+0x144>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800409e:	4c4f      	ldr	r4, [pc, #316]	; (80041dc <HAL_ADC_ConfigChannel+0x234>)
 80040a0:	42a2      	cmp	r2, r4
 80040a2:	d032      	beq.n	800410a <HAL_ADC_ConfigChannel+0x162>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040a4:	2000      	movs	r0, #0
 80040a6:	e797      	b.n	8003fd8 <HAL_ADC_ConfigChannel+0x30>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80040a8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80040ac:	d1f4      	bne.n	8004098 <HAL_ADC_ConfigChannel+0xf0>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80040ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80040b2:	4847      	ldr	r0, [pc, #284]	; (80041d0 <HAL_ADC_ConfigChannel+0x228>)
 80040b4:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 80040b8:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80040bc:	4311      	orrs	r1, r2
 80040be:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80040c2:	4a47      	ldr	r2, [pc, #284]	; (80041e0 <HAL_ADC_ConfigChannel+0x238>)
 80040c4:	6812      	ldr	r2, [r2, #0]
 80040c6:	0992      	lsrs	r2, r2, #6
 80040c8:	4946      	ldr	r1, [pc, #280]	; (80041e4 <HAL_ADC_ConfigChannel+0x23c>)
 80040ca:	fba1 1202 	umull	r1, r2, r1, r2
 80040ce:	0992      	lsrs	r2, r2, #6
 80040d0:	3201      	adds	r2, #1
 80040d2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80040d6:	0092      	lsls	r2, r2, #2
 80040d8:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80040da:	e002      	b.n	80040e2 <HAL_ADC_ConfigChannel+0x13a>
            wait_loop_index--;
 80040dc:	9a01      	ldr	r2, [sp, #4]
 80040de:	3a01      	subs	r2, #1
 80040e0:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80040e2:	9a01      	ldr	r2, [sp, #4]
 80040e4:	2a00      	cmp	r2, #0
 80040e6:	d1f9      	bne.n	80040dc <HAL_ADC_ConfigChannel+0x134>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040e8:	2000      	movs	r0, #0
 80040ea:	e775      	b.n	8003fd8 <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80040ec:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 80040f0:	d1d5      	bne.n	800409e <HAL_ADC_ConfigChannel+0xf6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80040f2:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 80040f6:	4836      	ldr	r0, [pc, #216]	; (80041d0 <HAL_ADC_ConfigChannel+0x228>)
 80040f8:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 80040fc:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8004100:	4311      	orrs	r1, r2
 8004102:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004106:	2000      	movs	r0, #0
}
 8004108:	e766      	b.n	8003fd8 <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800410a:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 800410e:	d158      	bne.n	80041c2 <HAL_ADC_ConfigChannel+0x21a>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004110:	f441 0280 	orr.w	r2, r1, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004114:	482e      	ldr	r0, [pc, #184]	; (80041d0 <HAL_ADC_ConfigChannel+0x228>)
 8004116:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 800411a:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 800411e:	430a      	orrs	r2, r1
 8004120:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004124:	2000      	movs	r0, #0
}
 8004126:	e757      	b.n	8003fd8 <HAL_ADC_ConfigChannel+0x30>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004128:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 800412c:	d002      	beq.n	8004134 <HAL_ADC_ConfigChannel+0x18c>
 800412e:	4827      	ldr	r0, [pc, #156]	; (80041cc <HAL_ADC_ConfigChannel+0x224>)
 8004130:	4284      	cmp	r4, r0
 8004132:	d106      	bne.n	8004142 <HAL_ADC_ConfigChannel+0x19a>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8004134:	680c      	ldr	r4, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004136:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8004138:	f3c4 0411 	ubfx	r4, r4, #0, #18
 800413c:	ea20 0004 	bic.w	r0, r0, r4
 8004140:	6290      	str	r0, [r2, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004142:	680a      	ldr	r2, [r1, #0]
 8004144:	2a00      	cmp	r2, #0
 8004146:	db01      	blt.n	800414c <HAL_ADC_ConfigChannel+0x1a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004148:	2000      	movs	r0, #0
 800414a:	e745      	b.n	8003fd8 <HAL_ADC_ConfigChannel+0x30>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800414c:	4920      	ldr	r1, [pc, #128]	; (80041d0 <HAL_ADC_ConfigChannel+0x228>)
 800414e:	f8d1 1708 	ldr.w	r1, [r1, #1800]	; 0x708
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004152:	4820      	ldr	r0, [pc, #128]	; (80041d4 <HAL_ADC_ConfigChannel+0x22c>)
 8004154:	4282      	cmp	r2, r0
 8004156:	d007      	beq.n	8004168 <HAL_ADC_ConfigChannel+0x1c0>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004158:	481f      	ldr	r0, [pc, #124]	; (80041d8 <HAL_ADC_ConfigChannel+0x230>)
 800415a:	4282      	cmp	r2, r0
 800415c:	d013      	beq.n	8004186 <HAL_ADC_ConfigChannel+0x1de>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800415e:	481f      	ldr	r0, [pc, #124]	; (80041dc <HAL_ADC_ConfigChannel+0x234>)
 8004160:	4282      	cmp	r2, r0
 8004162:	d01f      	beq.n	80041a4 <HAL_ADC_ConfigChannel+0x1fc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004164:	2000      	movs	r0, #0
 8004166:	e737      	b.n	8003fd8 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004168:	f001 71a0 	and.w	r1, r1, #20971520	; 0x1400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800416c:	f100 4010 	add.w	r0, r0, #2415919104	; 0x90000000
 8004170:	f500 3088 	add.w	r0, r0, #69632	; 0x11000
 8004174:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8004178:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800417c:	4311      	orrs	r1, r2
 800417e:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004182:	2000      	movs	r0, #0
}
 8004184:	e728      	b.n	8003fd8 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004186:	f401 0240 	and.w	r2, r1, #12582912	; 0xc00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800418a:	f100 4008 	add.w	r0, r0, #2281701376	; 0x88000000
 800418e:	f500 4060 	add.w	r0, r0, #57344	; 0xe000
 8004192:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 8004196:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 800419a:	430a      	orrs	r2, r1
 800419c:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041a0:	2000      	movs	r0, #0
}
 80041a2:	e719      	b.n	8003fd8 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041a4:	f001 72c0 	and.w	r2, r1, #25165824	; 0x1800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80041a8:	f100 400c 	add.w	r0, r0, #2348810240	; 0x8c000000
 80041ac:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 80041b0:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 80041b4:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80041b8:	430a      	orrs	r2, r1
 80041ba:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041be:	2000      	movs	r0, #0
}
 80041c0:	e70a      	b.n	8003fd8 <HAL_ADC_ConfigChannel+0x30>
 80041c2:	2000      	movs	r0, #0
 80041c4:	e708      	b.n	8003fd8 <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 80041c6:	2002      	movs	r0, #2
 80041c8:	e709      	b.n	8003fde <HAL_ADC_ConfigChannel+0x36>
 80041ca:	bf00      	nop
 80041cc:	80000004 	.word	0x80000004
 80041d0:	40012000 	.word	0x40012000
 80041d4:	b0001000 	.word	0xb0001000
 80041d8:	b8004000 	.word	0xb8004000
 80041dc:	b4002000 	.word	0xb4002000
 80041e0:	20000070 	.word	0x20000070
 80041e4:	053e2d63 	.word	0x053e2d63

080041e8 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80041e8:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80041ea:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80041ec:	689a      	ldr	r2, [r3, #8]
 80041ee:	f012 0f04 	tst.w	r2, #4
 80041f2:	d02a      	beq.n	800424a <ADC_ConversionStop+0x62>
 80041f4:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80041f6:	689a      	ldr	r2, [r3, #8]
 80041f8:	f012 0f02 	tst.w	r2, #2
 80041fc:	d107      	bne.n	800420e <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 80041fe:	689a      	ldr	r2, [r3, #8]
 8004200:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004204:	f022 0217 	bic.w	r2, r2, #23
 8004208:	f042 0210 	orr.w	r2, r2, #16
 800420c:	609a      	str	r2, [r3, #8]
      LL_ADC_REG_StopConversion(hadc->Instance);
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800420e:	f7fd fc5b 	bl	8001ac8 <HAL_GetTick>
 8004212:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004214:	6823      	ldr	r3, [r4, #0]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f013 0f04 	tst.w	r3, #4
 800421c:	d013      	beq.n	8004246 <ADC_ConversionStop+0x5e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800421e:	f7fd fc53 	bl	8001ac8 <HAL_GetTick>
 8004222:	1b43      	subs	r3, r0, r5
 8004224:	2b02      	cmp	r3, #2
 8004226:	d9f5      	bls.n	8004214 <ADC_ConversionStop+0x2c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004228:	6823      	ldr	r3, [r4, #0]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f013 0f04 	tst.w	r3, #4
 8004230:	d0f0      	beq.n	8004214 <ADC_ConversionStop+0x2c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004232:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004234:	f043 0310 	orr.w	r3, r3, #16
 8004238:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800423a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800423c:	f043 0301 	orr.w	r3, r3, #1
 8004240:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 8004242:	2001      	movs	r0, #1
 8004244:	e002      	b.n	800424c <ADC_ConversionStop+0x64>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004246:	2000      	movs	r0, #0
 8004248:	e000      	b.n	800424c <ADC_ConversionStop+0x64>
 800424a:	2000      	movs	r0, #0
}
 800424c:	bd38      	pop	{r3, r4, r5, pc}
	...

08004250 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004250:	b530      	push	{r4, r5, lr}
 8004252:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004254:	2300      	movs	r3, #0
 8004256:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004258:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800425a:	689a      	ldr	r2, [r3, #8]
 800425c:	f012 0f01 	tst.w	r2, #1
 8004260:	d15b      	bne.n	800431a <ADC_Enable+0xca>
 8004262:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004264:	6899      	ldr	r1, [r3, #8]
 8004266:	4a2e      	ldr	r2, [pc, #184]	; (8004320 <ADC_Enable+0xd0>)
 8004268:	4211      	tst	r1, r2
 800426a:	d117      	bne.n	800429c <ADC_Enable+0x4c>
  MODIFY_REG(ADCx->CR,
 800426c:	689a      	ldr	r2, [r3, #8]
 800426e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004272:	f022 0217 	bic.w	r2, r2, #23
 8004276:	f042 0201 	orr.w	r2, r2, #1
 800427a:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800427c:	4b29      	ldr	r3, [pc, #164]	; (8004324 <ADC_Enable+0xd4>)
 800427e:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004282:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8004286:	d019      	beq.n	80042bc <ADC_Enable+0x6c>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004288:	4b27      	ldr	r3, [pc, #156]	; (8004328 <ADC_Enable+0xd8>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	099b      	lsrs	r3, r3, #6
 800428e:	4a27      	ldr	r2, [pc, #156]	; (800432c <ADC_Enable+0xdc>)
 8004290:	fba2 2303 	umull	r2, r3, r2, r3
 8004294:	099b      	lsrs	r3, r3, #6
 8004296:	3301      	adds	r3, #1
 8004298:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800429a:	e00c      	b.n	80042b6 <ADC_Enable+0x66>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800429c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800429e:	f043 0310 	orr.w	r3, r3, #16
 80042a2:	6583      	str	r3, [r0, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042a4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80042a6:	f043 0301 	orr.w	r3, r3, #1
 80042aa:	65c3      	str	r3, [r0, #92]	; 0x5c
      return HAL_ERROR;
 80042ac:	2001      	movs	r0, #1
 80042ae:	e035      	b.n	800431c <ADC_Enable+0xcc>
      {
        wait_loop_index--;
 80042b0:	9b01      	ldr	r3, [sp, #4]
 80042b2:	3b01      	subs	r3, #1
 80042b4:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80042b6:	9b01      	ldr	r3, [sp, #4]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d1f9      	bne.n	80042b0 <ADC_Enable+0x60>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80042bc:	7e63      	ldrb	r3, [r4, #25]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d101      	bne.n	80042c6 <ADC_Enable+0x76>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80042c2:	2000      	movs	r0, #0
 80042c4:	e02a      	b.n	800431c <ADC_Enable+0xcc>
      tickstart = HAL_GetTick();
 80042c6:	f7fd fbff 	bl	8001ac8 <HAL_GetTick>
 80042ca:	4605      	mov	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80042cc:	6823      	ldr	r3, [r4, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	f012 0f01 	tst.w	r2, #1
 80042d4:	d11f      	bne.n	8004316 <ADC_Enable+0xc6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80042d6:	689a      	ldr	r2, [r3, #8]
 80042d8:	f012 0f01 	tst.w	r2, #1
 80042dc:	d107      	bne.n	80042ee <ADC_Enable+0x9e>
  MODIFY_REG(ADCx->CR,
 80042de:	689a      	ldr	r2, [r3, #8]
 80042e0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80042e4:	f022 0217 	bic.w	r2, r2, #23
 80042e8:	f042 0201 	orr.w	r2, r2, #1
 80042ec:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80042ee:	f7fd fbeb 	bl	8001ac8 <HAL_GetTick>
 80042f2:	1b40      	subs	r0, r0, r5
 80042f4:	2802      	cmp	r0, #2
 80042f6:	d9e9      	bls.n	80042cc <ADC_Enable+0x7c>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80042f8:	6823      	ldr	r3, [r4, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f013 0f01 	tst.w	r3, #1
 8004300:	d1e4      	bne.n	80042cc <ADC_Enable+0x7c>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004302:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004304:	f043 0310 	orr.w	r3, r3, #16
 8004308:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800430a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800430c:	f043 0301 	orr.w	r3, r3, #1
 8004310:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 8004312:	2001      	movs	r0, #1
 8004314:	e002      	b.n	800431c <ADC_Enable+0xcc>
  return HAL_OK;
 8004316:	2000      	movs	r0, #0
 8004318:	e000      	b.n	800431c <ADC_Enable+0xcc>
 800431a:	2000      	movs	r0, #0
}
 800431c:	b003      	add	sp, #12
 800431e:	bd30      	pop	{r4, r5, pc}
 8004320:	80000017 	.word	0x80000017
 8004324:	40012000 	.word	0x40012000
 8004328:	20000070 	.word	0x20000070
 800432c:	053e2d63 	.word	0x053e2d63

08004330 <HAL_ADC_Start>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004330:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f013 0f04 	tst.w	r3, #4
 8004338:	d128      	bne.n	800438c <HAL_ADC_Start+0x5c>
{
 800433a:	b510      	push	{r4, lr}
 800433c:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 800433e:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8004342:	2b01      	cmp	r3, #1
 8004344:	d024      	beq.n	8004390 <HAL_ADC_Start+0x60>
 8004346:	2301      	movs	r3, #1
 8004348:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    tmp_hal_status = ADC_Enable(hadc);
 800434c:	f7ff ff80 	bl	8004250 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8004350:	b9c0      	cbnz	r0, 8004384 <HAL_ADC_Start+0x54>
      ADC_STATE_CLR_SET(hadc->State,
 8004352:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004354:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004358:	f023 0301 	bic.w	r3, r3, #1
 800435c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004360:	65a3      	str	r3, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 8004362:	2300      	movs	r3, #0
 8004364:	65e3      	str	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004366:	6822      	ldr	r2, [r4, #0]
 8004368:	211c      	movs	r1, #28
 800436a:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 800436c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004370:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8004372:	6893      	ldr	r3, [r2, #8]
 8004374:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004378:	f023 0317 	bic.w	r3, r3, #23
 800437c:	f043 0304 	orr.w	r3, r3, #4
 8004380:	6093      	str	r3, [r2, #8]
}
 8004382:	bd10      	pop	{r4, pc}
      __HAL_UNLOCK(hadc);
 8004384:	2300      	movs	r3, #0
 8004386:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800438a:	e7fa      	b.n	8004382 <HAL_ADC_Start+0x52>
    tmp_hal_status = HAL_BUSY;
 800438c:	2002      	movs	r0, #2
}
 800438e:	4770      	bx	lr
    __HAL_LOCK(hadc);
 8004390:	2002      	movs	r0, #2
 8004392:	e7f6      	b.n	8004382 <HAL_ADC_Start+0x52>

08004394 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004394:	b538      	push	{r3, r4, r5, lr}
 8004396:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004398:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800439a:	6893      	ldr	r3, [r2, #8]
 800439c:	f013 0302 	ands.w	r3, r3, #2
 80043a0:	d000      	beq.n	80043a4 <ADC_Disable+0x10>
 80043a2:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80043a4:	6891      	ldr	r1, [r2, #8]
 80043a6:	f011 0f01 	tst.w	r1, #1
 80043aa:	d039      	beq.n	8004420 <ADC_Disable+0x8c>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d139      	bne.n	8004424 <ADC_Disable+0x90>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80043b0:	6893      	ldr	r3, [r2, #8]
 80043b2:	f003 0305 	and.w	r3, r3, #5
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d009      	beq.n	80043ce <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80043bc:	f043 0310 	orr.w	r3, r3, #16
 80043c0:	65a3      	str	r3, [r4, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043c2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80043c4:	f043 0301 	orr.w	r3, r3, #1
 80043c8:	65e3      	str	r3, [r4, #92]	; 0x5c

      return HAL_ERROR;
 80043ca:	2001      	movs	r0, #1
 80043cc:	e029      	b.n	8004422 <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 80043ce:	6893      	ldr	r3, [r2, #8]
 80043d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80043d4:	f023 0317 	bic.w	r3, r3, #23
 80043d8:	f043 0302 	orr.w	r3, r3, #2
 80043dc:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80043de:	6823      	ldr	r3, [r4, #0]
 80043e0:	2203      	movs	r2, #3
 80043e2:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80043e4:	f7fd fb70 	bl	8001ac8 <HAL_GetTick>
 80043e8:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80043ea:	6823      	ldr	r3, [r4, #0]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f013 0f01 	tst.w	r3, #1
 80043f2:	d013      	beq.n	800441c <ADC_Disable+0x88>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80043f4:	f7fd fb68 	bl	8001ac8 <HAL_GetTick>
 80043f8:	1b40      	subs	r0, r0, r5
 80043fa:	2802      	cmp	r0, #2
 80043fc:	d9f5      	bls.n	80043ea <ADC_Disable+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80043fe:	6823      	ldr	r3, [r4, #0]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f013 0f01 	tst.w	r3, #1
 8004406:	d0f0      	beq.n	80043ea <ADC_Disable+0x56>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004408:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800440a:	f043 0310 	orr.w	r3, r3, #16
 800440e:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004410:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004412:	f043 0301 	orr.w	r3, r3, #1
 8004416:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 8004418:	2001      	movs	r0, #1
 800441a:	e002      	b.n	8004422 <ADC_Disable+0x8e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800441c:	2000      	movs	r0, #0
 800441e:	e000      	b.n	8004422 <ADC_Disable+0x8e>
 8004420:	2000      	movs	r0, #0
}
 8004422:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8004424:	2000      	movs	r0, #0
 8004426:	e7fc      	b.n	8004422 <ADC_Disable+0x8e>

08004428 <HAL_ADC_DeInit>:
{
 8004428:	b570      	push	{r4, r5, r6, lr}
  if (hadc == NULL)
 800442a:	2800      	cmp	r0, #0
 800442c:	d04c      	beq.n	80044c8 <HAL_ADC_DeInit+0xa0>
 800442e:	4604      	mov	r4, r0
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8004430:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8004432:	f043 0302 	orr.w	r3, r3, #2
 8004436:	6583      	str	r3, [r0, #88]	; 0x58
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004438:	f7ff fed6 	bl	80041e8 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800443c:	4606      	mov	r6, r0
 800443e:	2800      	cmp	r0, #0
 8004440:	d033      	beq.n	80044aa <HAL_ADC_DeInit+0x82>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8004442:	6822      	ldr	r2, [r4, #0]
 8004444:	6853      	ldr	r3, [r2, #4]
 8004446:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 800444a:	f023 0303 	bic.w	r3, r3, #3
 800444e:	6053      	str	r3, [r2, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8004450:	6823      	ldr	r3, [r4, #0]
 8004452:	f240 329f 	movw	r2, #927	; 0x39f
 8004456:	601a      	str	r2, [r3, #0]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8004458:	6822      	ldr	r2, [r4, #0]
 800445a:	68d1      	ldr	r1, [r2, #12]
 800445c:	4b1b      	ldr	r3, [pc, #108]	; (80044cc <HAL_ADC_DeInit+0xa4>)
 800445e:	400b      	ands	r3, r1
 8004460:	60d3      	str	r3, [r2, #12]
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8004462:	6822      	ldr	r2, [r4, #0]
 8004464:	6913      	ldr	r3, [r2, #16]
 8004466:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800446a:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 800446c:	6822      	ldr	r2, [r4, #0]
 800446e:	6953      	ldr	r3, [r2, #20]
 8004470:	f023 0307 	bic.w	r3, r3, #7
 8004474:	6153      	str	r3, [r2, #20]
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 8004476:	6822      	ldr	r2, [r4, #0]
 8004478:	6a13      	ldr	r3, [r2, #32]
 800447a:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 800447e:	6213      	str	r3, [r2, #32]
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8004480:	6823      	ldr	r3, [r4, #0]
 8004482:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004484:	2500      	movs	r5, #0
 8004486:	629d      	str	r5, [r3, #40]	; 0x28
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8004488:	4a11      	ldr	r2, [pc, #68]	; (80044d0 <HAL_ADC_DeInit+0xa8>)
 800448a:	f8d2 3708 	ldr.w	r3, [r2, #1800]	; 0x708
 800448e:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8004492:	f8c2 3708 	str.w	r3, [r2, #1800]	; 0x708
  HAL_ADC_MspDeInit(hadc);
 8004496:	4620      	mov	r0, r4
 8004498:	f7fc fdee 	bl	8001078 <HAL_ADC_MspDeInit>
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 800449c:	6625      	str	r5, [r4, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(hadc);
 800449e:	65e5      	str	r5, [r4, #92]	; 0x5c
  hadc->State = HAL_ADC_STATE_RESET;
 80044a0:	65a5      	str	r5, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 80044a2:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
}
 80044a6:	4630      	mov	r0, r6
 80044a8:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 80044aa:	4620      	mov	r0, r4
 80044ac:	f7ff ff72 	bl	8004394 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80044b0:	4606      	mov	r6, r0
 80044b2:	b908      	cbnz	r0, 80044b8 <HAL_ADC_DeInit+0x90>
      hadc->State = HAL_ADC_STATE_READY;
 80044b4:	2301      	movs	r3, #1
 80044b6:	65a3      	str	r3, [r4, #88]	; 0x58
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 80044b8:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 80044ba:	6893      	ldr	r3, [r2, #8]
 80044bc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80044c0:	f023 0317 	bic.w	r3, r3, #23
 80044c4:	6093      	str	r3, [r2, #8]
}
 80044c6:	e7bc      	b.n	8004442 <HAL_ADC_DeInit+0x1a>
    return HAL_ERROR;
 80044c8:	2601      	movs	r6, #1
 80044ca:	e7ec      	b.n	80044a6 <HAL_ADC_DeInit+0x7e>
 80044cc:	833e0200 	.word	0x833e0200
 80044d0:	40012000 	.word	0x40012000

080044d4 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 80044d4:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d019      	beq.n	8004510 <HAL_ADC_Stop+0x3c>
{
 80044dc:	b510      	push	{r4, lr}
 80044de:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80044e0:	2301      	movs	r3, #1
 80044e2:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 80044e6:	f7ff fe7f 	bl	80041e8 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80044ea:	b118      	cbz	r0, 80044f4 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 80044ec:	2300      	movs	r3, #0
 80044ee:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
 80044f2:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 80044f4:	4620      	mov	r0, r4
 80044f6:	f7ff ff4d 	bl	8004394 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80044fa:	2800      	cmp	r0, #0
 80044fc:	d1f6      	bne.n	80044ec <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 80044fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004500:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004504:	f023 0301 	bic.w	r3, r3, #1
 8004508:	f043 0301 	orr.w	r3, r3, #1
 800450c:	65a3      	str	r3, [r4, #88]	; 0x58
 800450e:	e7ed      	b.n	80044ec <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 8004510:	2002      	movs	r0, #2
}
 8004512:	4770      	bx	lr

08004514 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8004514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004516:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004518:	2300      	movs	r3, #0
 800451a:	9301      	str	r3, [sp, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800451c:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8004520:	2b01      	cmp	r3, #1
 8004522:	f000 8094 	beq.w	800464e <HAL_ADCEx_Calibration_Start+0x13a>
 8004526:	4604      	mov	r4, r0
 8004528:	2301      	movs	r3, #1
 800452a:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800452e:	f7ff ff31 	bl	8004394 <ADC_Disable>
 8004532:	4605      	mov	r5, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004534:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004536:	689a      	ldr	r2, [r3, #8]
 8004538:	f012 0201 	ands.w	r2, r2, #1
 800453c:	d009      	beq.n	8004552 <HAL_ADCEx_Calibration_Start+0x3e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800453e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004540:	f043 0310 	orr.w	r3, r3, #16
 8004544:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8004546:	2300      	movs	r3, #0
 8004548:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

  return tmp_hal_status;
}
 800454c:	4628      	mov	r0, r5
 800454e:	b003      	add	sp, #12
 8004550:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8004552:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004554:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8004558:	f041 0102 	orr.w	r1, r1, #2
 800455c:	65a1      	str	r1, [r4, #88]	; 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800455e:	68de      	ldr	r6, [r3, #12]
 8004560:	f426 46ff 	bic.w	r6, r6, #32640	; 0x7f80
 8004564:	f026 067c 	bic.w	r6, r6, #124	; 0x7c
 8004568:	0436      	lsls	r6, r6, #16
 800456a:	0c36      	lsrs	r6, r6, #16
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800456c:	68d9      	ldr	r1, [r3, #12]
 800456e:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8004572:	f021 0103 	bic.w	r1, r1, #3
 8004576:	60d9      	str	r1, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 8004578:	4610      	mov	r0, r2
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800457a:	e005      	b.n	8004588 <HAL_ADCEx_Calibration_Start+0x74>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800457c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004580:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8004584:	4418      	add	r0, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004586:	3201      	adds	r2, #1
 8004588:	2a07      	cmp	r2, #7
 800458a:	d81e      	bhi.n	80045ca <HAL_ADCEx_Calibration_Start+0xb6>
      LL_ADC_StartCalibration(hadc->Instance);
 800458c:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800458e:	688b      	ldr	r3, [r1, #8]
 8004590:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004594:	f023 0317 	bic.w	r3, r3, #23
 8004598:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800459c:	608b      	str	r3, [r1, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800459e:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80045a0:	6899      	ldr	r1, [r3, #8]
 80045a2:	2900      	cmp	r1, #0
 80045a4:	daea      	bge.n	800457c <HAL_ADCEx_Calibration_Start+0x68>
        wait_loop_index++;
 80045a6:	9b01      	ldr	r3, [sp, #4]
 80045a8:	3301      	adds	r3, #1
 80045aa:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80045ac:	9b01      	ldr	r3, [sp, #4]
 80045ae:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 80045b2:	d3f4      	bcc.n	800459e <HAL_ADCEx_Calibration_Start+0x8a>
          ADC_STATE_CLR_SET(hadc->State,
 80045b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80045b6:	f023 0312 	bic.w	r3, r3, #18
 80045ba:	f043 0310 	orr.w	r3, r3, #16
 80045be:	65a3      	str	r3, [r4, #88]	; 0x58
          __HAL_UNLOCK(hadc);
 80045c0:	2300      	movs	r3, #0
 80045c2:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 80045c6:	2501      	movs	r5, #1
 80045c8:	e7c0      	b.n	800454c <HAL_ADCEx_Calibration_Start+0x38>
    calibration_factor_accumulated /= calibration_index;
 80045ca:	fbb0 f2f2 	udiv	r2, r0, r2
    LL_ADC_Enable(hadc->Instance);
 80045ce:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80045d0:	688b      	ldr	r3, [r1, #8]
 80045d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80045d6:	f023 0317 	bic.w	r3, r3, #23
 80045da:	f043 0301 	orr.w	r3, r3, #1
 80045de:	608b      	str	r3, [r1, #8]
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80045e0:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->CALFACT,
 80045e2:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 80045e6:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
 80045ea:	4302      	orrs	r2, r0
 80045ec:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    LL_ADC_Disable(hadc->Instance);
 80045f0:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80045f2:	6893      	ldr	r3, [r2, #8]
 80045f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80045f8:	f023 0317 	bic.w	r3, r3, #23
 80045fc:	f043 0302 	orr.w	r3, r3, #2
 8004600:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8004602:	f7fd fa61 	bl	8001ac8 <HAL_GetTick>
 8004606:	4607      	mov	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004608:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	f012 0f01 	tst.w	r2, #1
 8004610:	d109      	bne.n	8004626 <HAL_ADCEx_Calibration_Start+0x112>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8004612:	68da      	ldr	r2, [r3, #12]
 8004614:	4316      	orrs	r6, r2
 8004616:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8004618:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800461a:	f023 0303 	bic.w	r3, r3, #3
 800461e:	f043 0301 	orr.w	r3, r3, #1
 8004622:	65a3      	str	r3, [r4, #88]	; 0x58
 8004624:	e78f      	b.n	8004546 <HAL_ADCEx_Calibration_Start+0x32>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004626:	f7fd fa4f 	bl	8001ac8 <HAL_GetTick>
 800462a:	1bc3      	subs	r3, r0, r7
 800462c:	2b02      	cmp	r3, #2
 800462e:	d9eb      	bls.n	8004608 <HAL_ADCEx_Calibration_Start+0xf4>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004630:	6823      	ldr	r3, [r4, #0]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f013 0f01 	tst.w	r3, #1
 8004638:	d0e6      	beq.n	8004608 <HAL_ADCEx_Calibration_Start+0xf4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800463a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800463c:	f043 0310 	orr.w	r3, r3, #16
 8004640:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004642:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004644:	f043 0301 	orr.w	r3, r3, #1
 8004648:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 800464a:	2501      	movs	r5, #1
 800464c:	e77e      	b.n	800454c <HAL_ADCEx_Calibration_Start+0x38>
  __HAL_LOCK(hadc);
 800464e:	2502      	movs	r5, #2
 8004650:	e77c      	b.n	800454c <HAL_ADCEx_Calibration_Start+0x38>
	...

08004654 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004654:	4a07      	ldr	r2, [pc, #28]	; (8004674 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004656:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004658:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800465c:	041b      	lsls	r3, r3, #16
 800465e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004660:	0200      	lsls	r0, r0, #8
 8004662:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004666:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8004668:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800466c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8004670:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004672:	4770      	bx	lr
 8004674:	e000ed00 	.word	0xe000ed00

08004678 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004678:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800467a:	4b19      	ldr	r3, [pc, #100]	; (80046e0 <HAL_NVIC_SetPriority+0x68>)
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004682:	f1c3 0c07 	rsb	ip, r3, #7
 8004686:	f1bc 0f04 	cmp.w	ip, #4
 800468a:	bf28      	it	cs
 800468c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004690:	f103 0e04 	add.w	lr, r3, #4
 8004694:	f1be 0f06 	cmp.w	lr, #6
 8004698:	d918      	bls.n	80046cc <HAL_NVIC_SetPriority+0x54>
 800469a:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800469c:	f04f 3eff 	mov.w	lr, #4294967295
 80046a0:	fa0e fc0c 	lsl.w	ip, lr, ip
 80046a4:	ea21 010c 	bic.w	r1, r1, ip
 80046a8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046aa:	fa0e f303 	lsl.w	r3, lr, r3
 80046ae:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046b2:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80046b4:	2800      	cmp	r0, #0
 80046b6:	db0b      	blt.n	80046d0 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046b8:	0109      	lsls	r1, r1, #4
 80046ba:	b2c9      	uxtb	r1, r1
 80046bc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80046c0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80046c4:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80046c8:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046cc:	2300      	movs	r3, #0
 80046ce:	e7e5      	b.n	800469c <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046d0:	f000 000f 	and.w	r0, r0, #15
 80046d4:	0109      	lsls	r1, r1, #4
 80046d6:	b2c9      	uxtb	r1, r1
 80046d8:	4b02      	ldr	r3, [pc, #8]	; (80046e4 <HAL_NVIC_SetPriority+0x6c>)
 80046da:	5419      	strb	r1, [r3, r0]
 80046dc:	e7f4      	b.n	80046c8 <HAL_NVIC_SetPriority+0x50>
 80046de:	bf00      	nop
 80046e0:	e000ed00 	.word	0xe000ed00
 80046e4:	e000ed14 	.word	0xe000ed14

080046e8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80046e8:	2800      	cmp	r0, #0
 80046ea:	db07      	blt.n	80046fc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046ec:	f000 021f 	and.w	r2, r0, #31
 80046f0:	0940      	lsrs	r0, r0, #5
 80046f2:	2301      	movs	r3, #1
 80046f4:	4093      	lsls	r3, r2
 80046f6:	4a02      	ldr	r2, [pc, #8]	; (8004700 <HAL_NVIC_EnableIRQ+0x18>)
 80046f8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	e000e100 	.word	0xe000e100

08004704 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004704:	2800      	cmp	r0, #0
 8004706:	db0c      	blt.n	8004722 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004708:	f000 021f 	and.w	r2, r0, #31
 800470c:	0940      	lsrs	r0, r0, #5
 800470e:	2301      	movs	r3, #1
 8004710:	4093      	lsls	r3, r2
 8004712:	3020      	adds	r0, #32
 8004714:	4a03      	ldr	r2, [pc, #12]	; (8004724 <HAL_NVIC_DisableIRQ+0x20>)
 8004716:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800471a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800471e:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8004722:	4770      	bx	lr
 8004724:	e000e100 	.word	0xe000e100

08004728 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004728:	b410      	push	{r4}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800472a:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 800472c:	f8d0 c050 	ldr.w	ip, [r0, #80]	; 0x50
 8004730:	f8c4 c004 	str.w	ip, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004734:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8004736:	b124      	cbz	r4, 8004742 <DMA_SetConfig+0x1a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004738:	6d84      	ldr	r4, [r0, #88]	; 0x58
 800473a:	f8d0 c05c 	ldr.w	ip, [r0, #92]	; 0x5c
 800473e:	f8c4 c004 	str.w	ip, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004742:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004744:	f004 0c1c 	and.w	ip, r4, #28
 8004748:	2401      	movs	r4, #1
 800474a:	fa04 f40c 	lsl.w	r4, r4, ip
 800474e:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
 8004752:	f8cc 4004 	str.w	r4, [ip, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004756:	6804      	ldr	r4, [r0, #0]
 8004758:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800475a:	6883      	ldr	r3, [r0, #8]
 800475c:	2b10      	cmp	r3, #16
 800475e:	d005      	beq.n	800476c <DMA_SetConfig+0x44>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8004760:	6803      	ldr	r3, [r0, #0]
 8004762:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8004764:	6803      	ldr	r3, [r0, #0]
 8004766:	60da      	str	r2, [r3, #12]
  }
}
 8004768:	bc10      	pop	{r4}
 800476a:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 800476c:	6803      	ldr	r3, [r0, #0]
 800476e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8004770:	6803      	ldr	r3, [r0, #0]
 8004772:	60d9      	str	r1, [r3, #12]
 8004774:	e7f8      	b.n	8004768 <DMA_SetConfig+0x40>
	...

08004778 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004778:	6803      	ldr	r3, [r0, #0]
 800477a:	4a14      	ldr	r2, [pc, #80]	; (80047cc <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d816      	bhi.n	80047ae <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004780:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004782:	f022 0203 	bic.w	r2, r2, #3
 8004786:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800478a:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 800478e:	6482      	str	r2, [r0, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004790:	b2db      	uxtb	r3, r3
 8004792:	3b08      	subs	r3, #8
 8004794:	4a0e      	ldr	r2, [pc, #56]	; (80047d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8004796:	fba2 2303 	umull	r2, r3, r2, r3
 800479a:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800479c:	4a0d      	ldr	r2, [pc, #52]	; (80047d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 800479e:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80047a0:	f003 031f 	and.w	r3, r3, #31
 80047a4:	2201      	movs	r2, #1
 80047a6:	fa02 f303 	lsl.w	r3, r2, r3
 80047aa:	6503      	str	r3, [r0, #80]	; 0x50
}
 80047ac:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80047ae:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80047b0:	f022 0103 	bic.w	r1, r2, #3
 80047b4:	4a08      	ldr	r2, [pc, #32]	; (80047d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 80047b6:	440a      	add	r2, r1
 80047b8:	6482      	str	r2, [r0, #72]	; 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	3b08      	subs	r3, #8
 80047be:	4a04      	ldr	r2, [pc, #16]	; (80047d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 80047c0:	fba2 2303 	umull	r2, r3, r2, r3
 80047c4:	091b      	lsrs	r3, r3, #4
 80047c6:	3307      	adds	r3, #7
 80047c8:	e7e8      	b.n	800479c <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 80047ca:	bf00      	nop
 80047cc:	40020407 	.word	0x40020407
 80047d0:	cccccccd 	.word	0xcccccccd
 80047d4:	40020880 	.word	0x40020880
 80047d8:	4002081c 	.word	0x4002081c

080047dc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80047dc:	6843      	ldr	r3, [r0, #4]
 80047de:	f003 037f 	and.w	r3, r3, #127	; 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80047e2:	4a07      	ldr	r2, [pc, #28]	; (8004800 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 80047e4:	441a      	add	r2, r3
 80047e6:	0092      	lsls	r2, r2, #2
 80047e8:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80047ea:	4a06      	ldr	r2, [pc, #24]	; (8004804 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 80047ec:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80047ee:	3b01      	subs	r3, #1
 80047f0:	f003 0303 	and.w	r3, r3, #3
 80047f4:	2201      	movs	r2, #1
 80047f6:	fa02 f303 	lsl.w	r3, r2, r3
 80047fa:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	1000823f 	.word	0x1000823f
 8004804:	40020940 	.word	0x40020940

08004808 <HAL_DMA_Init>:
  if (hdma == NULL)
 8004808:	2800      	cmp	r0, #0
 800480a:	d060      	beq.n	80048ce <HAL_DMA_Init+0xc6>
{
 800480c:	b510      	push	{r4, lr}
 800480e:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004810:	6802      	ldr	r2, [r0, #0]
 8004812:	4b30      	ldr	r3, [pc, #192]	; (80048d4 <HAL_DMA_Init+0xcc>)
 8004814:	429a      	cmp	r2, r3
 8004816:	d842      	bhi.n	800489e <HAL_DMA_Init+0x96>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004818:	4b2f      	ldr	r3, [pc, #188]	; (80048d8 <HAL_DMA_Init+0xd0>)
 800481a:	4413      	add	r3, r2
 800481c:	492f      	ldr	r1, [pc, #188]	; (80048dc <HAL_DMA_Init+0xd4>)
 800481e:	fba1 1303 	umull	r1, r3, r1, r3
 8004822:	091b      	lsrs	r3, r3, #4
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004828:	4b2d      	ldr	r3, [pc, #180]	; (80048e0 <HAL_DMA_Init+0xd8>)
 800482a:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 800482c:	2302      	movs	r3, #2
 800482e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004832:	6813      	ldr	r3, [r2, #0]
 8004834:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800483c:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800483e:	6821      	ldr	r1, [r4, #0]
 8004840:	680a      	ldr	r2, [r1, #0]
 8004842:	68a3      	ldr	r3, [r4, #8]
 8004844:	68e0      	ldr	r0, [r4, #12]
 8004846:	4303      	orrs	r3, r0
 8004848:	6920      	ldr	r0, [r4, #16]
 800484a:	4303      	orrs	r3, r0
 800484c:	6960      	ldr	r0, [r4, #20]
 800484e:	4303      	orrs	r3, r0
 8004850:	69a0      	ldr	r0, [r4, #24]
 8004852:	4303      	orrs	r3, r0
 8004854:	69e0      	ldr	r0, [r4, #28]
 8004856:	4303      	orrs	r3, r0
 8004858:	6a20      	ldr	r0, [r4, #32]
 800485a:	4303      	orrs	r3, r0
 800485c:	4313      	orrs	r3, r2
 800485e:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004860:	4620      	mov	r0, r4
 8004862:	f7ff ff89 	bl	8004778 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004866:	68a3      	ldr	r3, [r4, #8]
 8004868:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800486c:	d022      	beq.n	80048b4 <HAL_DMA_Init+0xac>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800486e:	6863      	ldr	r3, [r4, #4]
 8004870:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004872:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004876:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004878:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800487a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800487c:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800487e:	6863      	ldr	r3, [r4, #4]
 8004880:	3b01      	subs	r3, #1
 8004882:	2b03      	cmp	r3, #3
 8004884:	d919      	bls.n	80048ba <HAL_DMA_Init+0xb2>
    hdma->DMAmuxRequestGen = 0U;
 8004886:	2300      	movs	r3, #0
 8004888:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800488a:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800488c:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800488e:	2000      	movs	r0, #0
 8004890:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8004892:	2301      	movs	r3, #1
 8004894:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8004898:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 800489c:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800489e:	4b11      	ldr	r3, [pc, #68]	; (80048e4 <HAL_DMA_Init+0xdc>)
 80048a0:	4413      	add	r3, r2
 80048a2:	490e      	ldr	r1, [pc, #56]	; (80048dc <HAL_DMA_Init+0xd4>)
 80048a4:	fba1 1303 	umull	r1, r3, r1, r3
 80048a8:	091b      	lsrs	r3, r3, #4
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80048ae:	4b0e      	ldr	r3, [pc, #56]	; (80048e8 <HAL_DMA_Init+0xe0>)
 80048b0:	6403      	str	r3, [r0, #64]	; 0x40
 80048b2:	e7bb      	b.n	800482c <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80048b4:	2300      	movs	r3, #0
 80048b6:	6063      	str	r3, [r4, #4]
 80048b8:	e7d9      	b.n	800486e <HAL_DMA_Init+0x66>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80048ba:	4620      	mov	r0, r4
 80048bc:	f7ff ff8e 	bl	80047dc <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80048c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80048c2:	2200      	movs	r2, #0
 80048c4:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80048c8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80048ca:	605a      	str	r2, [r3, #4]
 80048cc:	e7df      	b.n	800488e <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 80048ce:	2001      	movs	r0, #1
}
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	40020407 	.word	0x40020407
 80048d8:	bffdfff8 	.word	0xbffdfff8
 80048dc:	cccccccd 	.word	0xcccccccd
 80048e0:	40020000 	.word	0x40020000
 80048e4:	bffdfbf8 	.word	0xbffdfbf8
 80048e8:	40020400 	.word	0x40020400

080048ec <HAL_DMA_DeInit>:
  if (NULL == hdma)
 80048ec:	2800      	cmp	r0, #0
 80048ee:	d04b      	beq.n	8004988 <HAL_DMA_DeInit+0x9c>
{
 80048f0:	b538      	push	{r3, r4, r5, lr}
 80048f2:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 80048f4:	6802      	ldr	r2, [r0, #0]
 80048f6:	6813      	ldr	r3, [r2, #0]
 80048f8:	f023 0301 	bic.w	r3, r3, #1
 80048fc:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80048fe:	6802      	ldr	r2, [r0, #0]
 8004900:	4b22      	ldr	r3, [pc, #136]	; (800498c <HAL_DMA_DeInit+0xa0>)
 8004902:	429a      	cmp	r2, r3
 8004904:	d82c      	bhi.n	8004960 <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004906:	4b22      	ldr	r3, [pc, #136]	; (8004990 <HAL_DMA_DeInit+0xa4>)
 8004908:	4413      	add	r3, r2
 800490a:	4922      	ldr	r1, [pc, #136]	; (8004994 <HAL_DMA_DeInit+0xa8>)
 800490c:	fba1 1303 	umull	r1, r3, r1, r3
 8004910:	091b      	lsrs	r3, r3, #4
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004916:	4b20      	ldr	r3, [pc, #128]	; (8004998 <HAL_DMA_DeInit+0xac>)
 8004918:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->Instance->CCR = 0U;
 800491a:	2500      	movs	r5, #0
 800491c:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800491e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004920:	f003 021c 	and.w	r2, r3, #28
 8004924:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004926:	2301      	movs	r3, #1
 8004928:	4093      	lsls	r3, r2
 800492a:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800492c:	4620      	mov	r0, r4
 800492e:	f7ff ff23 	bl	8004778 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 8004932:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004934:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004936:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004938:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800493a:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800493c:	6863      	ldr	r3, [r4, #4]
 800493e:	3b01      	subs	r3, #1
 8004940:	2b03      	cmp	r3, #3
 8004942:	d918      	bls.n	8004976 <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = 0U;
 8004944:	2000      	movs	r0, #0
 8004946:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8004948:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800494a:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 800494c:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800494e:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8004950:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8004952:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004954:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 8004956:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 800495a:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 800495e:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004960:	4b0e      	ldr	r3, [pc, #56]	; (800499c <HAL_DMA_DeInit+0xb0>)
 8004962:	4413      	add	r3, r2
 8004964:	490b      	ldr	r1, [pc, #44]	; (8004994 <HAL_DMA_DeInit+0xa8>)
 8004966:	fba1 1303 	umull	r1, r3, r1, r3
 800496a:	091b      	lsrs	r3, r3, #4
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004970:	4b0b      	ldr	r3, [pc, #44]	; (80049a0 <HAL_DMA_DeInit+0xb4>)
 8004972:	6403      	str	r3, [r0, #64]	; 0x40
 8004974:	e7d1      	b.n	800491a <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004976:	4620      	mov	r0, r4
 8004978:	f7ff ff30 	bl	80047dc <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800497c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800497e:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004980:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004982:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004984:	605a      	str	r2, [r3, #4]
 8004986:	e7dd      	b.n	8004944 <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 8004988:	2001      	movs	r0, #1
}
 800498a:	4770      	bx	lr
 800498c:	40020407 	.word	0x40020407
 8004990:	bffdfff8 	.word	0xbffdfff8
 8004994:	cccccccd 	.word	0xcccccccd
 8004998:	40020000 	.word	0x40020000
 800499c:	bffdfbf8 	.word	0xbffdfbf8
 80049a0:	40020400 	.word	0x40020400

080049a4 <HAL_DMA_Start_IT>:
{
 80049a4:	b538      	push	{r3, r4, r5, lr}
 80049a6:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 80049a8:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 80049ac:	2801      	cmp	r0, #1
 80049ae:	d043      	beq.n	8004a38 <HAL_DMA_Start_IT+0x94>
 80049b0:	2001      	movs	r0, #1
 80049b2:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 80049b6:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 80049ba:	b2c0      	uxtb	r0, r0
 80049bc:	2801      	cmp	r0, #1
 80049be:	d006      	beq.n	80049ce <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80049c0:	2380      	movs	r3, #128	; 0x80
 80049c2:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80049c4:	2300      	movs	r3, #0
 80049c6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_ERROR;
 80049ca:	2001      	movs	r0, #1
}
 80049cc:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80049ce:	2002      	movs	r0, #2
 80049d0:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049d4:	2000      	movs	r0, #0
 80049d6:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80049d8:	6825      	ldr	r5, [r4, #0]
 80049da:	6828      	ldr	r0, [r5, #0]
 80049dc:	f020 0001 	bic.w	r0, r0, #1
 80049e0:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80049e2:	4620      	mov	r0, r4
 80049e4:	f7ff fea0 	bl	8004728 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 80049e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80049ea:	b1d3      	cbz	r3, 8004a22 <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049ec:	6822      	ldr	r2, [r4, #0]
 80049ee:	6813      	ldr	r3, [r2, #0]
 80049f0:	f043 030e 	orr.w	r3, r3, #14
 80049f4:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80049f6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80049fe:	d003      	beq.n	8004a08 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a06:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8004a08:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004a0a:	b11b      	cbz	r3, 8004a14 <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a12:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8004a14:	6822      	ldr	r2, [r4, #0]
 8004a16:	6813      	ldr	r3, [r2, #0]
 8004a18:	f043 0301 	orr.w	r3, r3, #1
 8004a1c:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a1e:	2000      	movs	r0, #0
 8004a20:	e7d4      	b.n	80049cc <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a22:	6822      	ldr	r2, [r4, #0]
 8004a24:	6813      	ldr	r3, [r2, #0]
 8004a26:	f023 0304 	bic.w	r3, r3, #4
 8004a2a:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004a2c:	6822      	ldr	r2, [r4, #0]
 8004a2e:	6813      	ldr	r3, [r2, #0]
 8004a30:	f043 030a 	orr.w	r3, r3, #10
 8004a34:	6013      	str	r3, [r2, #0]
 8004a36:	e7de      	b.n	80049f6 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8004a38:	2002      	movs	r0, #2
 8004a3a:	e7c7      	b.n	80049cc <HAL_DMA_Start_IT+0x28>

08004a3c <HAL_DMA_Abort>:
  if (NULL == hdma)
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2800      	cmp	r0, #0
 8004a40:	d034      	beq.n	8004aac <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004a42:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8004a46:	b2d2      	uxtb	r2, r2
 8004a48:	2a02      	cmp	r2, #2
 8004a4a:	d006      	beq.n	8004a5a <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a4c:	2204      	movs	r2, #4
 8004a4e:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8004a50:	2200      	movs	r2, #0
 8004a52:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    return HAL_ERROR;
 8004a56:	2001      	movs	r0, #1
 8004a58:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a5a:	6801      	ldr	r1, [r0, #0]
 8004a5c:	680a      	ldr	r2, [r1, #0]
 8004a5e:	f022 020e 	bic.w	r2, r2, #14
 8004a62:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004a64:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004a66:	680a      	ldr	r2, [r1, #0]
 8004a68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a6c:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8004a6e:	6801      	ldr	r1, [r0, #0]
 8004a70:	680a      	ldr	r2, [r1, #0]
 8004a72:	f022 0201 	bic.w	r2, r2, #1
 8004a76:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004a78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004a7a:	f002 011c 	and.w	r1, r2, #28
 8004a7e:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8004a80:	2201      	movs	r2, #1
 8004a82:	408a      	lsls	r2, r1
 8004a84:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a88:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004a8a:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8004a8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a8e:	b132      	cbz	r2, 8004a9e <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004a90:	6811      	ldr	r1, [r2, #0]
 8004a92:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8004a96:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a98:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004a9a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004a9c:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8004aa4:	2000      	movs	r0, #0
 8004aa6:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return HAL_OK;
 8004aaa:	4770      	bx	lr
    return HAL_ERROR;
 8004aac:	2001      	movs	r0, #1
}
 8004aae:	4770      	bx	lr

08004ab0 <HAL_DMA_Abort_IT>:
{
 8004ab0:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004ab2:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d003      	beq.n	8004ac4 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004abc:	2304      	movs	r3, #4
 8004abe:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8004ac0:	2001      	movs	r0, #1
}
 8004ac2:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ac4:	6802      	ldr	r2, [r0, #0]
 8004ac6:	6813      	ldr	r3, [r2, #0]
 8004ac8:	f023 030e 	bic.w	r3, r3, #14
 8004acc:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8004ace:	6802      	ldr	r2, [r0, #0]
 8004ad0:	6813      	ldr	r3, [r2, #0]
 8004ad2:	f023 0301 	bic.w	r3, r3, #1
 8004ad6:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004ad8:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8004ada:	6813      	ldr	r3, [r2, #0]
 8004adc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ae0:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004ae2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004ae4:	f003 021c 	and.w	r2, r3, #28
 8004ae8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004aea:	2301      	movs	r3, #1
 8004aec:	4093      	lsls	r3, r2
 8004aee:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004af0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004af2:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004af4:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8004af6:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004af8:	b133      	cbz	r3, 8004b08 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b00:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b02:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8004b04:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8004b06:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8004b0e:	2300      	movs	r3, #0
 8004b10:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8004b14:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004b16:	b113      	cbz	r3, 8004b1e <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8004b18:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8004b1a:	2000      	movs	r0, #0
 8004b1c:	e7d1      	b.n	8004ac2 <HAL_DMA_Abort_IT+0x12>
 8004b1e:	2000      	movs	r0, #0
 8004b20:	e7cf      	b.n	8004ac2 <HAL_DMA_Abort_IT+0x12>
	...

08004b24 <HAL_DMA_IRQHandler>:
{
 8004b24:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004b26:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004b28:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8004b2a:	6804      	ldr	r4, [r0, #0]
 8004b2c:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004b2e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004b30:	f003 031c 	and.w	r3, r3, #28
 8004b34:	2204      	movs	r2, #4
 8004b36:	409a      	lsls	r2, r3
 8004b38:	420a      	tst	r2, r1
 8004b3a:	d015      	beq.n	8004b68 <HAL_DMA_IRQHandler+0x44>
 8004b3c:	f015 0f04 	tst.w	r5, #4
 8004b40:	d012      	beq.n	8004b68 <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b42:	6823      	ldr	r3, [r4, #0]
 8004b44:	f013 0f20 	tst.w	r3, #32
 8004b48:	d103      	bne.n	8004b52 <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b4a:	6823      	ldr	r3, [r4, #0]
 8004b4c:	f023 0304 	bic.w	r3, r3, #4
 8004b50:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004b52:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004b54:	f003 021c 	and.w	r2, r3, #28
 8004b58:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004b5a:	2304      	movs	r3, #4
 8004b5c:	4093      	lsls	r3, r2
 8004b5e:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8004b60:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004b62:	b103      	cbz	r3, 8004b66 <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 8004b64:	4798      	blx	r3
}
 8004b66:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004b68:	2202      	movs	r2, #2
 8004b6a:	409a      	lsls	r2, r3
 8004b6c:	420a      	tst	r2, r1
 8004b6e:	d028      	beq.n	8004bc2 <HAL_DMA_IRQHandler+0x9e>
 8004b70:	f015 0f02 	tst.w	r5, #2
 8004b74:	d025      	beq.n	8004bc2 <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b76:	6823      	ldr	r3, [r4, #0]
 8004b78:	f013 0f20 	tst.w	r3, #32
 8004b7c:	d106      	bne.n	8004b8c <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004b7e:	6823      	ldr	r3, [r4, #0]
 8004b80:	f023 030a 	bic.w	r3, r3, #10
 8004b84:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8004b86:	2301      	movs	r3, #1
 8004b88:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004b8c:	6802      	ldr	r2, [r0, #0]
 8004b8e:	4b1c      	ldr	r3, [pc, #112]	; (8004c00 <HAL_DMA_IRQHandler+0xdc>)
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d90e      	bls.n	8004bb2 <HAL_DMA_IRQHandler+0x8e>
 8004b94:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004b96:	f003 021c 	and.w	r2, r3, #28
 8004b9a:	2302      	movs	r3, #2
 8004b9c:	4093      	lsls	r3, r2
 8004b9e:	4a19      	ldr	r2, [pc, #100]	; (8004c04 <HAL_DMA_IRQHandler+0xe0>)
 8004ba0:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      if (hdma->XferCpltCallback != NULL)
 8004ba8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d0db      	beq.n	8004b66 <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 8004bae:	4798      	blx	r3
 8004bb0:	e7d9      	b.n	8004b66 <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004bb2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004bb4:	f003 021c 	and.w	r2, r3, #28
 8004bb8:	2302      	movs	r3, #2
 8004bba:	4093      	lsls	r3, r2
 8004bbc:	4a12      	ldr	r2, [pc, #72]	; (8004c08 <HAL_DMA_IRQHandler+0xe4>)
 8004bbe:	6053      	str	r3, [r2, #4]
 8004bc0:	e7ef      	b.n	8004ba2 <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004bc2:	2208      	movs	r2, #8
 8004bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc8:	420b      	tst	r3, r1
 8004bca:	d0cc      	beq.n	8004b66 <HAL_DMA_IRQHandler+0x42>
 8004bcc:	f015 0f08 	tst.w	r5, #8
 8004bd0:	d0c9      	beq.n	8004b66 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bd2:	6823      	ldr	r3, [r4, #0]
 8004bd4:	f023 030e 	bic.w	r3, r3, #14
 8004bd8:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004bda:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004bdc:	f003 031c 	and.w	r3, r3, #28
 8004be0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004be2:	2201      	movs	r2, #1
 8004be4:	fa02 f303 	lsl.w	r3, r2, r3
 8004be8:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004bea:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8004bec:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8004bf6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d0b4      	beq.n	8004b66 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8004bfc:	4798      	blx	r3
  return;
 8004bfe:	e7b2      	b.n	8004b66 <HAL_DMA_IRQHandler+0x42>
 8004c00:	40020080 	.word	0x40020080
 8004c04:	40020400 	.word	0x40020400
 8004c08:	40020000 	.word	0x40020000

08004c0c <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 8004c0c:	b178      	cbz	r0, 8004c2e <HAL_DMA_ConfigChannelAttributes+0x22>
  ccr = READ_REG(hdma->Instance->CCR);
 8004c0e:	6803      	ldr	r3, [r0, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8004c12:	f011 0f10 	tst.w	r1, #16
 8004c16:	d004      	beq.n	8004c22 <HAL_DMA_ConfigChannelAttributes+0x16>
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8004c18:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004c1c:	d004      	beq.n	8004c28 <HAL_DMA_ConfigChannelAttributes+0x1c>
      SET_BIT(ccr, DMA_CCR_PRIV);
 8004c1e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  WRITE_REG(hdma->Instance->CCR, ccr);
 8004c22:	601a      	str	r2, [r3, #0]
  return status;
 8004c24:	2000      	movs	r0, #0
 8004c26:	4770      	bx	lr
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8004c28:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8004c2c:	e7f9      	b.n	8004c22 <HAL_DMA_ConfigChannelAttributes+0x16>
    return status;
 8004c2e:	2001      	movs	r0, #1
}
 8004c30:	4770      	bx	lr
	...

08004c34 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004c34:	b410      	push	{r4}
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004c36:	4c05      	ldr	r4, [pc, #20]	; (8004c4c <FLASH_Program_DoubleWord+0x18>)
 8004c38:	6961      	ldr	r1, [r4, #20]
 8004c3a:	f041 0101 	orr.w	r1, r1, #1
 8004c3e:	6161      	str	r1, [r4, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8004c40:	6002      	str	r2, [r0, #0]
 8004c42:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8004c46:	6043      	str	r3, [r0, #4]
}
 8004c48:	bc10      	pop	{r4}
 8004c4a:	4770      	bx	lr
 8004c4c:	58004000 	.word	0x58004000

08004c50 <FLASH_Program_Fast>:

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8004c50:	4a0c      	ldr	r2, [pc, #48]	; (8004c84 <FLASH_Program_Fast+0x34>)
 8004c52:	6953      	ldr	r3, [r2, #20]
 8004c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c58:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c5a:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004c5e:	b672      	cpsid	i
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8004c60:	2340      	movs	r3, #64	; 0x40
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8004c62:	f851 2b04 	ldr.w	r2, [r1], #4
 8004c66:	f840 2b04 	str.w	r2, [r0], #4
    dest_addr++;
    src_addr++;
    row_index--;
 8004c6a:	3b01      	subs	r3, #1
  }
  while (row_index != 0U);
 8004c6c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8004c70:	d1f7      	bne.n	8004c62 <FLASH_Program_Fast+0x12>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8004c72:	4b04      	ldr	r3, [pc, #16]	; (8004c84 <FLASH_Program_Fast+0x34>)
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004c7a:	d1fa      	bne.n	8004c72 <FLASH_Program_Fast+0x22>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c7c:	f38c 8810 	msr	PRIMASK, ip
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	58004000 	.word	0x58004000

08004c88 <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004c88:	4b09      	ldr	r3, [pc, #36]	; (8004cb0 <HAL_FLASH_Unlock+0x28>)
 8004c8a:	695b      	ldr	r3, [r3, #20]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	db01      	blt.n	8004c94 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8004c90:	2000      	movs	r0, #0
 8004c92:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004c94:	4b06      	ldr	r3, [pc, #24]	; (8004cb0 <HAL_FLASH_Unlock+0x28>)
 8004c96:	4a07      	ldr	r2, [pc, #28]	; (8004cb4 <HAL_FLASH_Unlock+0x2c>)
 8004c98:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004c9a:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8004c9e:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	db01      	blt.n	8004caa <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8004ca6:	2000      	movs	r0, #0
 8004ca8:	4770      	bx	lr
      status = HAL_ERROR;
 8004caa:	2001      	movs	r0, #1
}
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	58004000 	.word	0x58004000
 8004cb4:	45670123 	.word	0x45670123

08004cb8 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004cb8:	4b05      	ldr	r3, [pc, #20]	; (8004cd0 <HAL_FLASH_Lock+0x18>)
 8004cba:	695a      	ldr	r2, [r3, #20]
 8004cbc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004cc0:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8004cc2:	695b      	ldr	r3, [r3, #20]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	db01      	blt.n	8004ccc <HAL_FLASH_Lock+0x14>
    status = HAL_ERROR;
 8004cc8:	2001      	movs	r0, #1
}
 8004cca:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8004ccc:	2000      	movs	r0, #0
 8004cce:	4770      	bx	lr
 8004cd0:	58004000 	.word	0x58004000

08004cd4 <FLASH_WaitForLastOperation>:
{
 8004cd4:	b538      	push	{r3, r4, r5, lr}
 8004cd6:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8004cd8:	f7fc fef6 	bl	8001ac8 <HAL_GetTick>
 8004cdc:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004cde:	4b16      	ldr	r3, [pc, #88]	; (8004d38 <FLASH_WaitForLastOperation+0x64>)
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004ce6:	d006      	beq.n	8004cf6 <FLASH_WaitForLastOperation+0x22>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004ce8:	f7fc feee 	bl	8001ac8 <HAL_GetTick>
 8004cec:	1b00      	subs	r0, r0, r4
 8004cee:	42a8      	cmp	r0, r5
 8004cf0:	d3f5      	bcc.n	8004cde <FLASH_WaitForLastOperation+0xa>
      return HAL_TIMEOUT;
 8004cf2:	2003      	movs	r0, #3
}
 8004cf4:	bd38      	pop	{r3, r4, r5, pc}
  error = FLASH->SR;
 8004cf6:	4b10      	ldr	r3, [pc, #64]	; (8004d38 <FLASH_WaitForLastOperation+0x64>)
 8004cf8:	691b      	ldr	r3, [r3, #16]
  if ((error & FLASH_FLAG_EOP) != 0U)
 8004cfa:	f013 0f01 	tst.w	r3, #1
 8004cfe:	d002      	beq.n	8004d06 <FLASH_WaitForLastOperation+0x32>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004d00:	4a0d      	ldr	r2, [pc, #52]	; (8004d38 <FLASH_WaitForLastOperation+0x64>)
 8004d02:	2101      	movs	r1, #1
 8004d04:	6111      	str	r1, [r2, #16]
  error &= FLASH_FLAG_SR_ERRORS;
 8004d06:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  __HAL_FLASH_CLEAR_FLAG(error);
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	d001      	beq.n	8004d12 <FLASH_WaitForLastOperation+0x3e>
 8004d0e:	4a0a      	ldr	r2, [pc, #40]	; (8004d38 <FLASH_WaitForLastOperation+0x64>)
 8004d10:	6113      	str	r3, [r2, #16]
  if (error != 0U)
 8004d12:	b95b      	cbnz	r3, 8004d2c <FLASH_WaitForLastOperation+0x58>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8004d14:	4b08      	ldr	r3, [pc, #32]	; (8004d38 <FLASH_WaitForLastOperation+0x64>)
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004d1c:	d00a      	beq.n	8004d34 <FLASH_WaitForLastOperation+0x60>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004d1e:	f7fc fed3 	bl	8001ac8 <HAL_GetTick>
 8004d22:	1b00      	subs	r0, r0, r4
 8004d24:	42a8      	cmp	r0, r5
 8004d26:	d3f5      	bcc.n	8004d14 <FLASH_WaitForLastOperation+0x40>
      return HAL_TIMEOUT;
 8004d28:	2003      	movs	r0, #3
 8004d2a:	e7e3      	b.n	8004cf4 <FLASH_WaitForLastOperation+0x20>
    pFlash.ErrorCode = error;
 8004d2c:	4a03      	ldr	r2, [pc, #12]	; (8004d3c <FLASH_WaitForLastOperation+0x68>)
 8004d2e:	6053      	str	r3, [r2, #4]
    return HAL_ERROR;
 8004d30:	2001      	movs	r0, #1
 8004d32:	e7df      	b.n	8004cf4 <FLASH_WaitForLastOperation+0x20>
  return HAL_OK;
 8004d34:	2000      	movs	r0, #0
 8004d36:	e7dd      	b.n	8004cf4 <FLASH_WaitForLastOperation+0x20>
 8004d38:	58004000 	.word	0x58004000
 8004d3c:	20000648 	.word	0x20000648

08004d40 <HAL_FLASH_Program>:
{
 8004d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d42:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 8004d44:	4b15      	ldr	r3, [pc, #84]	; (8004d9c <HAL_FLASH_Program+0x5c>)
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d025      	beq.n	8004d98 <HAL_FLASH_Program+0x58>
 8004d4c:	4604      	mov	r4, r0
 8004d4e:	460d      	mov	r5, r1
 8004d50:	4616      	mov	r6, r2
 8004d52:	4b12      	ldr	r3, [pc, #72]	; (8004d9c <HAL_FLASH_Program+0x5c>)
 8004d54:	2201      	movs	r2, #1
 8004d56:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004d58:	2200      	movs	r2, #0
 8004d5a:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004d5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004d60:	f7ff ffb8 	bl	8004cd4 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8004d64:	b970      	cbnz	r0, 8004d84 <HAL_FLASH_Program+0x44>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004d66:	2c01      	cmp	r4, #1
 8004d68:	d010      	beq.n	8004d8c <HAL_FLASH_Program+0x4c>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8004d6a:	4631      	mov	r1, r6
 8004d6c:	4628      	mov	r0, r5
 8004d6e:	f7ff ff6f 	bl	8004c50 <FLASH_Program_Fast>
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004d72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004d76:	f7ff ffad 	bl	8004cd4 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8004d7a:	4a09      	ldr	r2, [pc, #36]	; (8004da0 <HAL_FLASH_Program+0x60>)
 8004d7c:	6953      	ldr	r3, [r2, #20]
 8004d7e:	ea23 0404 	bic.w	r4, r3, r4
 8004d82:	6154      	str	r4, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 8004d84:	4b05      	ldr	r3, [pc, #20]	; (8004d9c <HAL_FLASH_Program+0x5c>)
 8004d86:	2200      	movs	r2, #0
 8004d88:	701a      	strb	r2, [r3, #0]
}
 8004d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_DoubleWord(Address, Data);
 8004d8c:	4632      	mov	r2, r6
 8004d8e:	463b      	mov	r3, r7
 8004d90:	4628      	mov	r0, r5
 8004d92:	f7ff ff4f 	bl	8004c34 <FLASH_Program_DoubleWord>
 8004d96:	e7ec      	b.n	8004d72 <HAL_FLASH_Program+0x32>
  __HAL_LOCK(&pFlash);
 8004d98:	2002      	movs	r0, #2
 8004d9a:	e7f6      	b.n	8004d8a <HAL_FLASH_Program+0x4a>
 8004d9c:	20000648 	.word	0x20000648
 8004da0:	58004000 	.word	0x58004000

08004da4 <FLASH_MassErase>:
{
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8004da4:	4a03      	ldr	r2, [pc, #12]	; (8004db4 <FLASH_MassErase+0x10>)
 8004da6:	6953      	ldr	r3, [r2, #20]
 8004da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dac:	f043 0304 	orr.w	r3, r3, #4
 8004db0:	6153      	str	r3, [r2, #20]
#endif
}
 8004db2:	4770      	bx	lr
 8004db4:	58004000 	.word	0x58004000

08004db8 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8004db8:	4b18      	ldr	r3, [pc, #96]	; (8004e1c <FLASH_FlushCaches+0x64>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d006      	beq.n	8004dd2 <FLASH_FlushCaches+0x1a>
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8004dc4:	4b15      	ldr	r3, [pc, #84]	; (8004e1c <FLASH_FlushCaches+0x64>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d012      	beq.n	8004df6 <FLASH_FlushCaches+0x3e>
    __HAL_FLASH_DATA_CACHE_RESET();
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }
#endif
}
 8004dd0:	4770      	bx	lr
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004dd2:	4b12      	ldr	r3, [pc, #72]	; (8004e1c <FLASH_FlushCaches+0x64>)
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004dda:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004de2:	601a      	str	r2, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dea:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	e7e6      	b.n	8004dc4 <FLASH_FlushCaches+0xc>
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004df6:	4b09      	ldr	r3, [pc, #36]	; (8004e1c <FLASH_FlushCaches+0x64>)
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dfe:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_RESET();
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e06:	601a      	str	r2, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e0e:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e16:	601a      	str	r2, [r3, #0]
}
 8004e18:	e7da      	b.n	8004dd0 <FLASH_FlushCaches+0x18>
 8004e1a:	bf00      	nop
 8004e1c:	58004000 	.word	0x58004000

08004e20 <FLASH_AcknowledgePageErase>:
static void FLASH_AcknowledgePageErase(void)
{
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8004e20:	4a03      	ldr	r2, [pc, #12]	; (8004e30 <FLASH_AcknowledgePageErase+0x10>)
 8004e22:	6953      	ldr	r3, [r2, #20]
 8004e24:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8004e28:	f023 0302 	bic.w	r3, r3, #2
 8004e2c:	6153      	str	r3, [r2, #20]
#endif
}
 8004e2e:	4770      	bx	lr
 8004e30:	58004000 	.word	0x58004000

08004e34 <FLASH_PageErase>:
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8004e34:	4a05      	ldr	r2, [pc, #20]	; (8004e4c <FLASH_PageErase+0x18>)
 8004e36:	6953      	ldr	r3, [r2, #20]
 8004e38:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8004e3c:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
 8004e40:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8004e44:	f040 0002 	orr.w	r0, r0, #2
 8004e48:	6150      	str	r0, [r2, #20]
}
 8004e4a:	4770      	bx	lr
 8004e4c:	58004000 	.word	0x58004000

08004e50 <HAL_FLASHEx_Erase>:
{
 8004e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8004e52:	4b1e      	ldr	r3, [pc, #120]	; (8004ecc <HAL_FLASHEx_Erase+0x7c>)
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d035      	beq.n	8004ec6 <HAL_FLASHEx_Erase+0x76>
 8004e5a:	4605      	mov	r5, r0
 8004e5c:	460f      	mov	r7, r1
 8004e5e:	4b1b      	ldr	r3, [pc, #108]	; (8004ecc <HAL_FLASHEx_Erase+0x7c>)
 8004e60:	2201      	movs	r2, #1
 8004e62:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004e64:	2200      	movs	r2, #0
 8004e66:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004e68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e6c:	f7ff ff32 	bl	8004cd4 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8004e70:	4606      	mov	r6, r0
 8004e72:	bb18      	cbnz	r0, 8004ebc <HAL_FLASHEx_Erase+0x6c>
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004e74:	682b      	ldr	r3, [r5, #0]
 8004e76:	2b04      	cmp	r3, #4
 8004e78:	d013      	beq.n	8004ea2 <HAL_FLASHEx_Erase+0x52>
      *PageError = 0xFFFFFFFFU;
 8004e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e7e:	603b      	str	r3, [r7, #0]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004e80:	686c      	ldr	r4, [r5, #4]
 8004e82:	686b      	ldr	r3, [r5, #4]
 8004e84:	68aa      	ldr	r2, [r5, #8]
 8004e86:	4413      	add	r3, r2
 8004e88:	42a3      	cmp	r3, r4
 8004e8a:	d913      	bls.n	8004eb4 <HAL_FLASHEx_Erase+0x64>
        FLASH_PageErase(index);
 8004e8c:	4620      	mov	r0, r4
 8004e8e:	f7ff ffd1 	bl	8004e34 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004e92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e96:	f7ff ff1d 	bl	8004cd4 <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 8004e9a:	4606      	mov	r6, r0
 8004e9c:	b948      	cbnz	r0, 8004eb2 <HAL_FLASHEx_Erase+0x62>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004e9e:	3401      	adds	r4, #1
 8004ea0:	e7ef      	b.n	8004e82 <HAL_FLASHEx_Erase+0x32>
      FLASH_MassErase();
 8004ea2:	f7ff ff7f 	bl	8004da4 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004ea6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004eaa:	f7ff ff13 	bl	8004cd4 <FLASH_WaitForLastOperation>
 8004eae:	4606      	mov	r6, r0
 8004eb0:	e002      	b.n	8004eb8 <HAL_FLASHEx_Erase+0x68>
          *PageError = index;
 8004eb2:	603c      	str	r4, [r7, #0]
      FLASH_AcknowledgePageErase();
 8004eb4:	f7ff ffb4 	bl	8004e20 <FLASH_AcknowledgePageErase>
    FLASH_FlushCaches();
 8004eb8:	f7ff ff7e 	bl	8004db8 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8004ebc:	4b03      	ldr	r3, [pc, #12]	; (8004ecc <HAL_FLASHEx_Erase+0x7c>)
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	701a      	strb	r2, [r3, #0]
}
 8004ec2:	4630      	mov	r0, r6
 8004ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8004ec6:	2602      	movs	r6, #2
 8004ec8:	e7fb      	b.n	8004ec2 <HAL_FLASHEx_Erase+0x72>
 8004eca:	bf00      	nop
 8004ecc:	20000648 	.word	0x20000648

08004ed0 <HAL_FLASHEx_Erase_IT>:
{
 8004ed0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(&pFlash);
 8004ed2:	4b17      	ldr	r3, [pc, #92]	; (8004f30 <HAL_FLASHEx_Erase_IT+0x60>)
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d028      	beq.n	8004f2c <HAL_FLASHEx_Erase_IT+0x5c>
 8004eda:	4604      	mov	r4, r0
 8004edc:	4b14      	ldr	r3, [pc, #80]	; (8004f30 <HAL_FLASHEx_Erase_IT+0x60>)
 8004ede:	2201      	movs	r2, #1
 8004ee0:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	605a      	str	r2, [r3, #4]
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8004ee6:	6802      	ldr	r2, [r0, #0]
 8004ee8:	609a      	str	r2, [r3, #8]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004eea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004eee:	f7ff fef1 	bl	8004cd4 <FLASH_WaitForLastOperation>
  if (status != HAL_OK)
 8004ef2:	4605      	mov	r5, r0
 8004ef4:	b120      	cbz	r0, 8004f00 <HAL_FLASHEx_Erase_IT+0x30>
    __HAL_UNLOCK(&pFlash);
 8004ef6:	4b0e      	ldr	r3, [pc, #56]	; (8004f30 <HAL_FLASHEx_Erase_IT+0x60>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	701a      	strb	r2, [r3, #0]
}
 8004efc:	4628      	mov	r0, r5
 8004efe:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8004f00:	4a0c      	ldr	r2, [pc, #48]	; (8004f34 <HAL_FLASHEx_Erase_IT+0x64>)
 8004f02:	6953      	ldr	r3, [r2, #20]
 8004f04:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8004f08:	6153      	str	r3, [r2, #20]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004f0a:	6823      	ldr	r3, [r4, #0]
 8004f0c:	2b04      	cmp	r3, #4
 8004f0e:	d007      	beq.n	8004f20 <HAL_FLASHEx_Erase_IT+0x50>
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 8004f10:	68a2      	ldr	r2, [r4, #8]
 8004f12:	4b07      	ldr	r3, [pc, #28]	; (8004f30 <HAL_FLASHEx_Erase_IT+0x60>)
 8004f14:	615a      	str	r2, [r3, #20]
      pFlash.Page = pEraseInit->Page;
 8004f16:	6860      	ldr	r0, [r4, #4]
 8004f18:	6118      	str	r0, [r3, #16]
      FLASH_PageErase(pEraseInit->Page);
 8004f1a:	f7ff ff8b 	bl	8004e34 <FLASH_PageErase>
 8004f1e:	e7ed      	b.n	8004efc <HAL_FLASHEx_Erase_IT+0x2c>
      pFlash.Page = 0;
 8004f20:	4b03      	ldr	r3, [pc, #12]	; (8004f30 <HAL_FLASHEx_Erase_IT+0x60>)
 8004f22:	2200      	movs	r2, #0
 8004f24:	611a      	str	r2, [r3, #16]
      FLASH_MassErase();
 8004f26:	f7ff ff3d 	bl	8004da4 <FLASH_MassErase>
 8004f2a:	e7e7      	b.n	8004efc <HAL_FLASHEx_Erase_IT+0x2c>
  __HAL_LOCK(&pFlash);
 8004f2c:	2502      	movs	r5, #2
 8004f2e:	e7e5      	b.n	8004efc <HAL_FLASHEx_Erase_IT+0x2c>
 8004f30:	20000648 	.word	0x20000648
 8004f34:	58004000 	.word	0x58004000

08004f38 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f38:	b570      	push	{r4, r5, r6, lr}
  uint32_t position = 0x00u;
 8004f3a:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f3c:	e069      	b.n	8005012 <HAL_GPIO_Init+0xda>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f3e:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004f40:	005e      	lsls	r6, r3, #1
 8004f42:	2403      	movs	r4, #3
 8004f44:	40b4      	lsls	r4, r6
 8004f46:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f4a:	68cc      	ldr	r4, [r1, #12]
 8004f4c:	40b4      	lsls	r4, r6
 8004f4e:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8004f50:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f52:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004f54:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f58:	684c      	ldr	r4, [r1, #4]
 8004f5a:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8004f5e:	409c      	lsls	r4, r3
 8004f60:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 8004f64:	6044      	str	r4, [r0, #4]
 8004f66:	e065      	b.n	8005034 <HAL_GPIO_Init+0xfc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f68:	08dd      	lsrs	r5, r3, #3
 8004f6a:	3508      	adds	r5, #8
 8004f6c:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004f70:	f003 0407 	and.w	r4, r3, #7
 8004f74:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004f78:	240f      	movs	r4, #15
 8004f7a:	fa04 f40c 	lsl.w	r4, r4, ip
 8004f7e:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004f82:	690c      	ldr	r4, [r1, #16]
 8004f84:	fa04 f40c 	lsl.w	r4, r4, ip
 8004f88:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8004f8c:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8004f90:	e067      	b.n	8005062 <HAL_GPIO_Init+0x12a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004f92:	2402      	movs	r4, #2
 8004f94:	e000      	b.n	8004f98 <HAL_GPIO_Init+0x60>
 8004f96:	2400      	movs	r4, #0
 8004f98:	fa04 f40e 	lsl.w	r4, r4, lr
 8004f9c:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004f9e:	f10c 0c02 	add.w	ip, ip, #2
 8004fa2:	4d4b      	ldr	r5, [pc, #300]	; (80050d0 <HAL_GPIO_Init+0x198>)
 8004fa4:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004fa8:	4c4a      	ldr	r4, [pc, #296]	; (80050d4 <HAL_GPIO_Init+0x19c>)
 8004faa:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8004fac:	43d4      	mvns	r4, r2
 8004fae:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004fb2:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8004fb6:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
 8004fba:	d001      	beq.n	8004fc0 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8004fbc:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8004fc0:	4d44      	ldr	r5, [pc, #272]	; (80050d4 <HAL_GPIO_Init+0x19c>)
 8004fc2:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8004fc4:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8004fc6:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004fca:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8004fce:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
 8004fd2:	d001      	beq.n	8004fd8 <HAL_GPIO_Init+0xa0>
        {
          temp |= iocurrent;
 8004fd4:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8004fd8:	4d3e      	ldr	r5, [pc, #248]	; (80050d4 <HAL_GPIO_Init+0x19c>)
 8004fda:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8004fdc:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004fe0:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004fe4:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8004fe8:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
 8004fec:	d001      	beq.n	8004ff2 <HAL_GPIO_Init+0xba>
        {
          temp |= iocurrent;
 8004fee:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8004ff2:	4d38      	ldr	r5, [pc, #224]	; (80050d4 <HAL_GPIO_Init+0x19c>)
 8004ff4:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8004ff8:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004ffc:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004ffe:	684e      	ldr	r6, [r1, #4]
 8005000:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8005004:	d001      	beq.n	800500a <HAL_GPIO_Init+0xd2>
        {
          temp |= iocurrent;
 8005006:	ea42 0405 	orr.w	r4, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 800500a:	4a32      	ldr	r2, [pc, #200]	; (80050d4 <HAL_GPIO_Init+0x19c>)
 800500c:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8005010:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005012:	680a      	ldr	r2, [r1, #0]
 8005014:	fa32 f403 	lsrs.w	r4, r2, r3
 8005018:	d058      	beq.n	80050cc <HAL_GPIO_Init+0x194>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800501a:	f04f 0c01 	mov.w	ip, #1
 800501e:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8005022:	ea1c 0202 	ands.w	r2, ip, r2
 8005026:	d0f3      	beq.n	8005010 <HAL_GPIO_Init+0xd8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005028:	684c      	ldr	r4, [r1, #4]
 800502a:	f004 0403 	and.w	r4, r4, #3
 800502e:	3c01      	subs	r4, #1
 8005030:	2c01      	cmp	r4, #1
 8005032:	d984      	bls.n	8004f3e <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005034:	684c      	ldr	r4, [r1, #4]
 8005036:	f004 0403 	and.w	r4, r4, #3
 800503a:	2c03      	cmp	r4, #3
 800503c:	d00c      	beq.n	8005058 <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 800503e:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005040:	005d      	lsls	r5, r3, #1
 8005042:	f04f 0c03 	mov.w	ip, #3
 8005046:	fa0c fc05 	lsl.w	ip, ip, r5
 800504a:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800504e:	688c      	ldr	r4, [r1, #8]
 8005050:	40ac      	lsls	r4, r5
 8005052:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8005056:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005058:	684c      	ldr	r4, [r1, #4]
 800505a:	f004 0403 	and.w	r4, r4, #3
 800505e:	2c02      	cmp	r4, #2
 8005060:	d082      	beq.n	8004f68 <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 8005062:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005064:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8005068:	f04f 0c03 	mov.w	ip, #3
 800506c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8005070:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005074:	684c      	ldr	r4, [r1, #4]
 8005076:	f004 0403 	and.w	r4, r4, #3
 800507a:	fa04 f40e 	lsl.w	r4, r4, lr
 800507e:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8005082:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005084:	684c      	ldr	r4, [r1, #4]
 8005086:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 800508a:	d0c1      	beq.n	8005010 <HAL_GPIO_Init+0xd8>
        temp = SYSCFG->EXTICR[position >> 2u];
 800508c:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8005090:	f10c 0502 	add.w	r5, ip, #2
 8005094:	4c0e      	ldr	r4, [pc, #56]	; (80050d0 <HAL_GPIO_Init+0x198>)
 8005096:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800509a:	f003 0403 	and.w	r4, r3, #3
 800509e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80050a2:	2407      	movs	r4, #7
 80050a4:	fa04 f40e 	lsl.w	r4, r4, lr
 80050a8:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80050ac:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 80050b0:	f43f af71 	beq.w	8004f96 <HAL_GPIO_Init+0x5e>
 80050b4:	4c08      	ldr	r4, [pc, #32]	; (80050d8 <HAL_GPIO_Init+0x1a0>)
 80050b6:	42a0      	cmp	r0, r4
 80050b8:	d006      	beq.n	80050c8 <HAL_GPIO_Init+0x190>
 80050ba:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80050be:	42a0      	cmp	r0, r4
 80050c0:	f43f af67 	beq.w	8004f92 <HAL_GPIO_Init+0x5a>
 80050c4:	2407      	movs	r4, #7
 80050c6:	e767      	b.n	8004f98 <HAL_GPIO_Init+0x60>
 80050c8:	2401      	movs	r4, #1
 80050ca:	e765      	b.n	8004f98 <HAL_GPIO_Init+0x60>
  }
}
 80050cc:	bd70      	pop	{r4, r5, r6, pc}
 80050ce:	bf00      	nop
 80050d0:	40010000 	.word	0x40010000
 80050d4:	58000800 	.word	0x58000800
 80050d8:	48000400 	.word	0x48000400

080050dc <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 80050dc:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80050de:	fa31 f203 	lsrs.w	r2, r1, r3
 80050e2:	d071      	beq.n	80051c8 <HAL_GPIO_DeInit+0xec>
{
 80050e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050e6:	e02e      	b.n	8005146 <HAL_GPIO_DeInit+0x6a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80050e8:	2502      	movs	r5, #2
 80050ea:	e000      	b.n	80050ee <HAL_GPIO_DeInit+0x12>
 80050ec:	2500      	movs	r5, #0
 80050ee:	fa05 fc0c 	lsl.w	ip, r5, ip
 80050f2:	45a4      	cmp	ip, r4
 80050f4:	d049      	beq.n	800518a <HAL_GPIO_DeInit+0xae>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80050f6:	6804      	ldr	r4, [r0, #0]
 80050f8:	005d      	lsls	r5, r3, #1
 80050fa:	f04f 0c03 	mov.w	ip, #3
 80050fe:	fa0c fc05 	lsl.w	ip, ip, r5
 8005102:	ea44 040c 	orr.w	r4, r4, ip
 8005106:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005108:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 800510c:	f10e 0e08 	add.w	lr, lr, #8
 8005110:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 8005114:	f003 0507 	and.w	r5, r3, #7
 8005118:	00ae      	lsls	r6, r5, #2
 800511a:	250f      	movs	r5, #15
 800511c:	40b5      	lsls	r5, r6
 800511e:	ea24 0405 	bic.w	r4, r4, r5
 8005122:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005126:	6884      	ldr	r4, [r0, #8]
 8005128:	ea24 040c 	bic.w	r4, r4, ip
 800512c:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800512e:	6844      	ldr	r4, [r0, #4]
 8005130:	ea24 0202 	bic.w	r2, r4, r2
 8005134:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005136:	68c2      	ldr	r2, [r0, #12]
 8005138:	ea22 020c 	bic.w	r2, r2, ip
 800513c:	60c2      	str	r2, [r0, #12]
    }

    position++;
 800513e:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8005140:	fa31 f203 	lsrs.w	r2, r1, r3
 8005144:	d03f      	beq.n	80051c6 <HAL_GPIO_DeInit+0xea>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005146:	2201      	movs	r2, #1
 8005148:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 800514a:	ea12 0701 	ands.w	r7, r2, r1
 800514e:	d0f6      	beq.n	800513e <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8005150:	089e      	lsrs	r6, r3, #2
 8005152:	1cb5      	adds	r5, r6, #2
 8005154:	4c1d      	ldr	r4, [pc, #116]	; (80051cc <HAL_GPIO_DeInit+0xf0>)
 8005156:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 800515a:	f003 0c03 	and.w	ip, r3, #3
 800515e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005162:	f04f 0e07 	mov.w	lr, #7
 8005166:	fa0e fe0c 	lsl.w	lr, lr, ip
 800516a:	ea0e 0404 	and.w	r4, lr, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800516e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8005172:	d0bb      	beq.n	80050ec <HAL_GPIO_DeInit+0x10>
 8005174:	4d16      	ldr	r5, [pc, #88]	; (80051d0 <HAL_GPIO_DeInit+0xf4>)
 8005176:	42a8      	cmp	r0, r5
 8005178:	d005      	beq.n	8005186 <HAL_GPIO_DeInit+0xaa>
 800517a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800517e:	42a8      	cmp	r0, r5
 8005180:	d0b2      	beq.n	80050e8 <HAL_GPIO_DeInit+0xc>
 8005182:	2507      	movs	r5, #7
 8005184:	e7b3      	b.n	80050ee <HAL_GPIO_DeInit+0x12>
 8005186:	2501      	movs	r5, #1
 8005188:	e7b1      	b.n	80050ee <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 800518a:	4c12      	ldr	r4, [pc, #72]	; (80051d4 <HAL_GPIO_DeInit+0xf8>)
 800518c:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8005190:	ea25 0507 	bic.w	r5, r5, r7
 8005194:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8005198:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 800519c:	ea25 0507 	bic.w	r5, r5, r7
 80051a0:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 80051a4:	6825      	ldr	r5, [r4, #0]
 80051a6:	ea25 0507 	bic.w	r5, r5, r7
 80051aa:	6025      	str	r5, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80051ac:	6865      	ldr	r5, [r4, #4]
 80051ae:	ea25 0707 	bic.w	r7, r5, r7
 80051b2:	6067      	str	r7, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80051b4:	4d05      	ldr	r5, [pc, #20]	; (80051cc <HAL_GPIO_DeInit+0xf0>)
 80051b6:	3602      	adds	r6, #2
 80051b8:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 80051bc:	ea24 040e 	bic.w	r4, r4, lr
 80051c0:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
 80051c4:	e797      	b.n	80050f6 <HAL_GPIO_DeInit+0x1a>
  }
}
 80051c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	40010000 	.word	0x40010000
 80051d0:	48000400 	.word	0x48000400
 80051d4:	58000800 	.word	0x58000800

080051d8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80051d8:	b10a      	cbz	r2, 80051de <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80051da:	6181      	str	r1, [r0, #24]
 80051dc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80051de:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80051e0:	4770      	bx	lr

080051e2 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80051e2:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80051e4:	ea01 0203 	and.w	r2, r1, r3
 80051e8:	ea21 0103 	bic.w	r1, r1, r3
 80051ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80051f0:	6181      	str	r1, [r0, #24]
}
 80051f2:	4770      	bx	lr

080051f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80051f4:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80051f6:	4b05      	ldr	r3, [pc, #20]	; (800520c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	4203      	tst	r3, r0
 80051fc:	d100      	bne.n	8005200 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 80051fe:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005200:	4b02      	ldr	r3, [pc, #8]	; (800520c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8005202:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005204:	f7fd fd6e 	bl	8002ce4 <HAL_GPIO_EXTI_Callback>
}
 8005208:	e7f9      	b.n	80051fe <HAL_GPIO_EXTI_IRQHandler+0xa>
 800520a:	bf00      	nop
 800520c:	58000800 	.word	0x58000800

08005210 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005210:	6803      	ldr	r3, [r0, #0]
 8005212:	699a      	ldr	r2, [r3, #24]
 8005214:	f012 0f02 	tst.w	r2, #2
 8005218:	d001      	beq.n	800521e <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 800521a:	2200      	movs	r2, #0
 800521c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800521e:	6803      	ldr	r3, [r0, #0]
 8005220:	699a      	ldr	r2, [r3, #24]
 8005222:	f012 0f01 	tst.w	r2, #1
 8005226:	d103      	bne.n	8005230 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005228:	699a      	ldr	r2, [r3, #24]
 800522a:	f042 0201 	orr.w	r2, r2, #1
 800522e:	619a      	str	r2, [r3, #24]
  }
}
 8005230:	4770      	bx	lr

08005232 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005232:	b410      	push	{r4}
 8005234:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005236:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800523a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800523e:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005240:	4321      	orrs	r1, r4
 8005242:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005246:	6802      	ldr	r2, [r0, #0]
 8005248:	6853      	ldr	r3, [r2, #4]
 800524a:	0d64      	lsrs	r4, r4, #21
 800524c:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8005250:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8005254:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8005258:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 800525c:	f044 0403 	orr.w	r4, r4, #3
 8005260:	ea23 0404 	bic.w	r4, r3, r4
 8005264:	4321      	orrs	r1, r4
 8005266:	6051      	str	r1, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005268:	bc10      	pop	{r4}
 800526a:	4770      	bx	lr

0800526c <I2C_IsErrorOccurred>:
{
 800526c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005270:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 8005272:	6803      	ldr	r3, [r0, #0]
 8005274:	699f      	ldr	r7, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005276:	f017 0710 	ands.w	r7, r7, #16
 800527a:	d04c      	beq.n	8005316 <I2C_IsErrorOccurred+0xaa>
 800527c:	460e      	mov	r6, r1
 800527e:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005280:	2210      	movs	r2, #16
 8005282:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8005284:	2500      	movs	r5, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005286:	6823      	ldr	r3, [r4, #0]
 8005288:	6998      	ldr	r0, [r3, #24]
 800528a:	f010 0f20 	tst.w	r0, #32
 800528e:	d13b      	bne.n	8005308 <I2C_IsErrorOccurred+0x9c>
 8005290:	2d00      	cmp	r5, #0
 8005292:	d139      	bne.n	8005308 <I2C_IsErrorOccurred+0x9c>
      if (Timeout != HAL_MAX_DELAY)
 8005294:	f1b6 3fff 	cmp.w	r6, #4294967295
 8005298:	d0f5      	beq.n	8005286 <I2C_IsErrorOccurred+0x1a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800529a:	f7fc fc15 	bl	8001ac8 <HAL_GetTick>
 800529e:	eba0 0008 	sub.w	r0, r0, r8
 80052a2:	42b0      	cmp	r0, r6
 80052a4:	d801      	bhi.n	80052aa <I2C_IsErrorOccurred+0x3e>
 80052a6:	2e00      	cmp	r6, #0
 80052a8:	d1ed      	bne.n	8005286 <I2C_IsErrorOccurred+0x1a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80052aa:	6821      	ldr	r1, [r4, #0]
 80052ac:	684b      	ldr	r3, [r1, #4]
 80052ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          tmp2 = hi2c->Mode;
 80052b2:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 80052b6:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80052b8:	6988      	ldr	r0, [r1, #24]
 80052ba:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80052be:	d002      	beq.n	80052c6 <I2C_IsErrorOccurred+0x5a>
 80052c0:	b90b      	cbnz	r3, 80052c6 <I2C_IsErrorOccurred+0x5a>
              (tmp1 != I2C_CR2_STOP) && \
 80052c2:	2a20      	cmp	r2, #32
 80052c4:	d118      	bne.n	80052f8 <I2C_IsErrorOccurred+0x8c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052c6:	6823      	ldr	r3, [r4, #0]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	f013 0f20 	tst.w	r3, #32
 80052ce:	d1da      	bne.n	8005286 <I2C_IsErrorOccurred+0x1a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80052d0:	f7fc fbfa 	bl	8001ac8 <HAL_GetTick>
 80052d4:	eba0 0008 	sub.w	r0, r0, r8
 80052d8:	2819      	cmp	r0, #25
 80052da:	d9f4      	bls.n	80052c6 <I2C_IsErrorOccurred+0x5a>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80052de:	f043 0320 	orr.w	r3, r3, #32
 80052e2:	6463      	str	r3, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80052e4:	2320      	movs	r3, #32
 80052e6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80052ea:	2300      	movs	r3, #0
 80052ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
              __HAL_UNLOCK(hi2c);
 80052f0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
              status = HAL_ERROR;
 80052f4:	2501      	movs	r5, #1
 80052f6:	e7e6      	b.n	80052c6 <I2C_IsErrorOccurred+0x5a>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80052f8:	684b      	ldr	r3, [r1, #4]
 80052fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052fe:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 8005300:	f7fc fbe2 	bl	8001ac8 <HAL_GetTick>
 8005304:	4680      	mov	r8, r0
 8005306:	e7de      	b.n	80052c6 <I2C_IsErrorOccurred+0x5a>
    if (status == HAL_OK)
 8005308:	2d00      	cmp	r5, #0
 800530a:	d140      	bne.n	800538e <I2C_IsErrorOccurred+0x122>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800530c:	2220      	movs	r2, #32
 800530e:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8005310:	2704      	movs	r7, #4
    status = HAL_ERROR;
 8005312:	2501      	movs	r5, #1
 8005314:	e000      	b.n	8005318 <I2C_IsErrorOccurred+0xac>
  HAL_StatusTypeDef status = HAL_OK;
 8005316:	2500      	movs	r5, #0
  itflag = hi2c->Instance->ISR;
 8005318:	6822      	ldr	r2, [r4, #0]
 800531a:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800531c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005320:	d005      	beq.n	800532e <I2C_IsErrorOccurred+0xc2>
    error_code |= HAL_I2C_ERROR_BERR;
 8005322:	f047 0701 	orr.w	r7, r7, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005326:	f44f 7180 	mov.w	r1, #256	; 0x100
 800532a:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 800532c:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800532e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005332:	d006      	beq.n	8005342 <I2C_IsErrorOccurred+0xd6>
    error_code |= HAL_I2C_ERROR_OVR;
 8005334:	f047 0708 	orr.w	r7, r7, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005338:	6822      	ldr	r2, [r4, #0]
 800533a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800533e:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8005340:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005342:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005346:	d024      	beq.n	8005392 <I2C_IsErrorOccurred+0x126>
    error_code |= HAL_I2C_ERROR_ARLO;
 8005348:	f047 0702 	orr.w	r7, r7, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800534c:	6823      	ldr	r3, [r4, #0]
 800534e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005352:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 8005354:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 8005356:	4620      	mov	r0, r4
 8005358:	f7ff ff5a 	bl	8005210 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800535c:	6822      	ldr	r2, [r4, #0]
 800535e:	6853      	ldr	r3, [r2, #4]
 8005360:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005364:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005368:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800536c:	f023 0301 	bic.w	r3, r3, #1
 8005370:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8005372:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005374:	431f      	orrs	r7, r3
 8005376:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005378:	2320      	movs	r3, #32
 800537a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800537e:	2300      	movs	r3, #0
 8005380:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8005384:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005388:	4628      	mov	r0, r5
 800538a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    error_code |= HAL_I2C_ERROR_AF;
 800538e:	2704      	movs	r7, #4
 8005390:	e7c2      	b.n	8005318 <I2C_IsErrorOccurred+0xac>
  if (status != HAL_OK)
 8005392:	2d00      	cmp	r5, #0
 8005394:	d0f8      	beq.n	8005388 <I2C_IsErrorOccurred+0x11c>
 8005396:	e7de      	b.n	8005356 <I2C_IsErrorOccurred+0xea>

08005398 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8005398:	b570      	push	{r4, r5, r6, lr}
 800539a:	4604      	mov	r4, r0
 800539c:	460d      	mov	r5, r1
 800539e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80053a0:	6823      	ldr	r3, [r4, #0]
 80053a2:	699b      	ldr	r3, [r3, #24]
 80053a4:	f013 0f02 	tst.w	r3, #2
 80053a8:	d11d      	bne.n	80053e6 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80053aa:	4632      	mov	r2, r6
 80053ac:	4629      	mov	r1, r5
 80053ae:	4620      	mov	r0, r4
 80053b0:	f7ff ff5c 	bl	800526c <I2C_IsErrorOccurred>
 80053b4:	b9c8      	cbnz	r0, 80053ea <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 80053b6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80053ba:	d0f1      	beq.n	80053a0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053bc:	f7fc fb84 	bl	8001ac8 <HAL_GetTick>
 80053c0:	1b80      	subs	r0, r0, r6
 80053c2:	42a8      	cmp	r0, r5
 80053c4:	d801      	bhi.n	80053ca <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80053c6:	2d00      	cmp	r5, #0
 80053c8:	d1ea      	bne.n	80053a0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80053cc:	f043 0320 	orr.w	r3, r3, #32
 80053d0:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80053d2:	2320      	movs	r3, #32
 80053d4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053d8:	2300      	movs	r3, #0
 80053da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80053de:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80053e2:	2001      	movs	r0, #1
 80053e4:	e000      	b.n	80053e8 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 80053e6:	2000      	movs	r0, #0
}
 80053e8:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80053ea:	2001      	movs	r0, #1
 80053ec:	e7fc      	b.n	80053e8 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

080053ee <I2C_WaitOnFlagUntilTimeout>:
{
 80053ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053f2:	4606      	mov	r6, r0
 80053f4:	4688      	mov	r8, r1
 80053f6:	4617      	mov	r7, r2
 80053f8:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053fa:	6834      	ldr	r4, [r6, #0]
 80053fc:	69a4      	ldr	r4, [r4, #24]
 80053fe:	ea38 0304 	bics.w	r3, r8, r4
 8005402:	bf0c      	ite	eq
 8005404:	f04f 0c01 	moveq.w	ip, #1
 8005408:	f04f 0c00 	movne.w	ip, #0
 800540c:	45bc      	cmp	ip, r7
 800540e:	d118      	bne.n	8005442 <I2C_WaitOnFlagUntilTimeout+0x54>
    if (Timeout != HAL_MAX_DELAY)
 8005410:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005414:	d0f1      	beq.n	80053fa <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005416:	f7fc fb57 	bl	8001ac8 <HAL_GetTick>
 800541a:	9b06      	ldr	r3, [sp, #24]
 800541c:	1ac0      	subs	r0, r0, r3
 800541e:	42a8      	cmp	r0, r5
 8005420:	d801      	bhi.n	8005426 <I2C_WaitOnFlagUntilTimeout+0x38>
 8005422:	2d00      	cmp	r5, #0
 8005424:	d1e9      	bne.n	80053fa <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005426:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8005428:	f043 0320 	orr.w	r3, r3, #32
 800542c:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800542e:	2320      	movs	r3, #32
 8005430:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005434:	2300      	movs	r3, #0
 8005436:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800543a:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 800543e:	2001      	movs	r0, #1
 8005440:	e000      	b.n	8005444 <I2C_WaitOnFlagUntilTimeout+0x56>
  return HAL_OK;
 8005442:	2000      	movs	r0, #0
}
 8005444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005448 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8005448:	b570      	push	{r4, r5, r6, lr}
 800544a:	4605      	mov	r5, r0
 800544c:	460c      	mov	r4, r1
 800544e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005450:	682b      	ldr	r3, [r5, #0]
 8005452:	699b      	ldr	r3, [r3, #24]
 8005454:	f013 0f20 	tst.w	r3, #32
 8005458:	d11a      	bne.n	8005490 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800545a:	4632      	mov	r2, r6
 800545c:	4621      	mov	r1, r4
 800545e:	4628      	mov	r0, r5
 8005460:	f7ff ff04 	bl	800526c <I2C_IsErrorOccurred>
 8005464:	b9b0      	cbnz	r0, 8005494 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005466:	f7fc fb2f 	bl	8001ac8 <HAL_GetTick>
 800546a:	1b80      	subs	r0, r0, r6
 800546c:	42a0      	cmp	r0, r4
 800546e:	d801      	bhi.n	8005474 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8005470:	2c00      	cmp	r4, #0
 8005472:	d1ed      	bne.n	8005450 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005474:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8005476:	f043 0320 	orr.w	r3, r3, #32
 800547a:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800547c:	2320      	movs	r3, #32
 800547e:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005482:	2300      	movs	r3, #0
 8005484:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005488:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 800548c:	2001      	movs	r0, #1
}
 800548e:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8005490:	2000      	movs	r0, #0
 8005492:	e7fc      	b.n	800548e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8005494:	2001      	movs	r0, #1
 8005496:	e7fa      	b.n	800548e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08005498 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8005498:	b570      	push	{r4, r5, r6, lr}
 800549a:	4604      	mov	r4, r0
 800549c:	460d      	mov	r5, r1
 800549e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80054a0:	6823      	ldr	r3, [r4, #0]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	f013 0f04 	tst.w	r3, #4
 80054a8:	d149      	bne.n	800553e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80054aa:	4632      	mov	r2, r6
 80054ac:	4629      	mov	r1, r5
 80054ae:	4620      	mov	r0, r4
 80054b0:	f7ff fedc 	bl	800526c <I2C_IsErrorOccurred>
 80054b4:	4601      	mov	r1, r0
 80054b6:	2800      	cmp	r0, #0
 80054b8:	d143      	bne.n	8005542 <I2C_WaitOnRXNEFlagUntilTimeout+0xaa>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80054ba:	6823      	ldr	r3, [r4, #0]
 80054bc:	699a      	ldr	r2, [r3, #24]
 80054be:	f012 0f20 	tst.w	r2, #32
 80054c2:	d113      	bne.n	80054ec <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054c4:	f7fc fb00 	bl	8001ac8 <HAL_GetTick>
 80054c8:	1b80      	subs	r0, r0, r6
 80054ca:	42a8      	cmp	r0, r5
 80054cc:	d801      	bhi.n	80054d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 80054ce:	2d00      	cmp	r5, #0
 80054d0:	d1e6      	bne.n	80054a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80054d4:	f043 0320 	orr.w	r3, r3, #32
 80054d8:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80054da:	2320      	movs	r3, #32
 80054dc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 80054e0:	2300      	movs	r3, #0
 80054e2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80054e6:	2101      	movs	r1, #1
}
 80054e8:	4608      	mov	r0, r1
 80054ea:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80054ec:	699a      	ldr	r2, [r3, #24]
 80054ee:	f012 0f04 	tst.w	r2, #4
 80054f2:	d002      	beq.n	80054fa <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 80054f4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80054f6:	2a00      	cmp	r2, #0
 80054f8:	d1f6      	bne.n	80054e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054fa:	699a      	ldr	r2, [r3, #24]
 80054fc:	f012 0f10 	tst.w	r2, #16
 8005500:	d01a      	beq.n	8005538 <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005502:	2210      	movs	r2, #16
 8005504:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005506:	2304      	movs	r3, #4
 8005508:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800550a:	6823      	ldr	r3, [r4, #0]
 800550c:	2220      	movs	r2, #32
 800550e:	61da      	str	r2, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8005510:	6821      	ldr	r1, [r4, #0]
 8005512:	684b      	ldr	r3, [r1, #4]
 8005514:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005518:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800551c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005520:	f023 0301 	bic.w	r3, r3, #1
 8005524:	604b      	str	r3, [r1, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 8005526:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800552a:	2300      	movs	r3, #0
 800552c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8005530:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8005534:	2101      	movs	r1, #1
 8005536:	e7d7      	b.n	80054e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005538:	2300      	movs	r3, #0
 800553a:	6463      	str	r3, [r4, #68]	; 0x44
 800553c:	e7e5      	b.n	800550a <I2C_WaitOnRXNEFlagUntilTimeout+0x72>
  return HAL_OK;
 800553e:	2100      	movs	r1, #0
 8005540:	e7d2      	b.n	80054e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
      return HAL_ERROR;
 8005542:	2101      	movs	r1, #1
 8005544:	e7d0      	b.n	80054e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>

08005546 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8005546:	2800      	cmp	r0, #0
 8005548:	d059      	beq.n	80055fe <HAL_I2C_Init+0xb8>
{
 800554a:	b510      	push	{r4, lr}
 800554c:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800554e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005552:	2b00      	cmp	r3, #0
 8005554:	d043      	beq.n	80055de <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005556:	2324      	movs	r3, #36	; 0x24
 8005558:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800555c:	6822      	ldr	r2, [r4, #0]
 800555e:	6813      	ldr	r3, [r2, #0]
 8005560:	f023 0301 	bic.w	r3, r3, #1
 8005564:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005566:	6863      	ldr	r3, [r4, #4]
 8005568:	6822      	ldr	r2, [r4, #0]
 800556a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800556e:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005570:	6822      	ldr	r2, [r4, #0]
 8005572:	6893      	ldr	r3, [r2, #8]
 8005574:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005578:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800557a:	68e3      	ldr	r3, [r4, #12]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d033      	beq.n	80055e8 <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005580:	68a3      	ldr	r3, [r4, #8]
 8005582:	6822      	ldr	r2, [r4, #0]
 8005584:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8005588:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800558a:	68e3      	ldr	r3, [r4, #12]
 800558c:	2b02      	cmp	r3, #2
 800558e:	d031      	beq.n	80055f4 <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005590:	6822      	ldr	r2, [r4, #0]
 8005592:	6853      	ldr	r3, [r2, #4]
 8005594:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005598:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800559c:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800559e:	6822      	ldr	r2, [r4, #0]
 80055a0:	68d3      	ldr	r3, [r2, #12]
 80055a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80055a6:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80055a8:	6923      	ldr	r3, [r4, #16]
 80055aa:	6962      	ldr	r2, [r4, #20]
 80055ac:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80055ae:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80055b0:	6822      	ldr	r2, [r4, #0]
 80055b2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80055b6:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80055b8:	69e3      	ldr	r3, [r4, #28]
 80055ba:	6a21      	ldr	r1, [r4, #32]
 80055bc:	6822      	ldr	r2, [r4, #0]
 80055be:	430b      	orrs	r3, r1
 80055c0:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 80055c2:	6822      	ldr	r2, [r4, #0]
 80055c4:	6813      	ldr	r3, [r2, #0]
 80055c6:	f043 0301 	orr.w	r3, r3, #1
 80055ca:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055cc:	2000      	movs	r0, #0
 80055ce:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80055d0:	2320      	movs	r3, #32
 80055d2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80055d6:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055d8:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80055dc:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80055de:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80055e2:	f7fb fff7 	bl	80015d4 <HAL_I2C_MspInit>
 80055e6:	e7b6      	b.n	8005556 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80055e8:	68a3      	ldr	r3, [r4, #8]
 80055ea:	6822      	ldr	r2, [r4, #0]
 80055ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055f0:	6093      	str	r3, [r2, #8]
 80055f2:	e7ca      	b.n	800558a <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80055f4:	6823      	ldr	r3, [r4, #0]
 80055f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055fa:	605a      	str	r2, [r3, #4]
 80055fc:	e7c8      	b.n	8005590 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 80055fe:	2001      	movs	r0, #1
}
 8005600:	4770      	bx	lr
	...

08005604 <HAL_I2C_Master_Transmit>:
{
 8005604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005608:	b082      	sub	sp, #8
 800560a:	460f      	mov	r7, r1
 800560c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800560e:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8005612:	b2c9      	uxtb	r1, r1
 8005614:	2920      	cmp	r1, #32
 8005616:	f040 80a3 	bne.w	8005760 <HAL_I2C_Master_Transmit+0x15c>
 800561a:	4604      	mov	r4, r0
 800561c:	4690      	mov	r8, r2
 800561e:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 8005620:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005624:	2b01      	cmp	r3, #1
 8005626:	f000 809f 	beq.w	8005768 <HAL_I2C_Master_Transmit+0x164>
 800562a:	f04f 0a01 	mov.w	sl, #1
 800562e:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8005632:	f7fc fa49 	bl	8001ac8 <HAL_GetTick>
 8005636:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005638:	9000      	str	r0, [sp, #0]
 800563a:	2319      	movs	r3, #25
 800563c:	4652      	mov	r2, sl
 800563e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005642:	4620      	mov	r0, r4
 8005644:	f7ff fed3 	bl	80053ee <I2C_WaitOnFlagUntilTimeout>
 8005648:	2800      	cmp	r0, #0
 800564a:	f040 808f 	bne.w	800576c <HAL_I2C_Master_Transmit+0x168>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800564e:	2321      	movs	r3, #33	; 0x21
 8005650:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005654:	2310      	movs	r3, #16
 8005656:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800565a:	2300      	movs	r3, #0
 800565c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800565e:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8005662:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005666:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005668:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800566a:	b29b      	uxth	r3, r3
 800566c:	2bff      	cmp	r3, #255	; 0xff
 800566e:	d90a      	bls.n	8005686 <HAL_I2C_Master_Transmit+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005670:	22ff      	movs	r2, #255	; 0xff
 8005672:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005674:	4b41      	ldr	r3, [pc, #260]	; (800577c <HAL_I2C_Master_Transmit+0x178>)
 8005676:	9300      	str	r3, [sp, #0]
 8005678:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800567c:	4639      	mov	r1, r7
 800567e:	4620      	mov	r0, r4
 8005680:	f7ff fdd7 	bl	8005232 <I2C_TransferConfig>
 8005684:	e018      	b.n	80056b8 <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = hi2c->XferCount;
 8005686:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005688:	b292      	uxth	r2, r2
 800568a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800568c:	4b3b      	ldr	r3, [pc, #236]	; (800577c <HAL_I2C_Master_Transmit+0x178>)
 800568e:	9300      	str	r3, [sp, #0]
 8005690:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005694:	b2d2      	uxtb	r2, r2
 8005696:	4639      	mov	r1, r7
 8005698:	4620      	mov	r0, r4
 800569a:	f7ff fdca 	bl	8005232 <I2C_TransferConfig>
 800569e:	e00b      	b.n	80056b8 <HAL_I2C_Master_Transmit+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 80056a0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80056a2:	b292      	uxth	r2, r2
 80056a4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80056a6:	2300      	movs	r3, #0
 80056a8:	9300      	str	r3, [sp, #0]
 80056aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80056ae:	b2d2      	uxtb	r2, r2
 80056b0:	4639      	mov	r1, r7
 80056b2:	4620      	mov	r0, r4
 80056b4:	f7ff fdbd 	bl	8005232 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80056b8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d033      	beq.n	8005728 <HAL_I2C_Master_Transmit+0x124>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056c0:	462a      	mov	r2, r5
 80056c2:	4631      	mov	r1, r6
 80056c4:	4620      	mov	r0, r4
 80056c6:	f7ff fe67 	bl	8005398 <I2C_WaitOnTXISFlagUntilTimeout>
 80056ca:	2800      	cmp	r0, #0
 80056cc:	d150      	bne.n	8005770 <HAL_I2C_Master_Transmit+0x16c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80056ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80056d0:	6823      	ldr	r3, [r4, #0]
 80056d2:	7812      	ldrb	r2, [r2, #0]
 80056d4:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80056d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056d8:	3301      	adds	r3, #1
 80056da:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80056dc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80056de:	b29b      	uxth	r3, r3
 80056e0:	3b01      	subs	r3, #1
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80056e6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80056e8:	3b01      	subs	r3, #1
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80056ee:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80056f0:	b292      	uxth	r2, r2
 80056f2:	2a00      	cmp	r2, #0
 80056f4:	d0e0      	beq.n	80056b8 <HAL_I2C_Master_Transmit+0xb4>
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1de      	bne.n	80056b8 <HAL_I2C_Master_Transmit+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80056fa:	9500      	str	r5, [sp, #0]
 80056fc:	4633      	mov	r3, r6
 80056fe:	2200      	movs	r2, #0
 8005700:	2180      	movs	r1, #128	; 0x80
 8005702:	4620      	mov	r0, r4
 8005704:	f7ff fe73 	bl	80053ee <I2C_WaitOnFlagUntilTimeout>
 8005708:	bba0      	cbnz	r0, 8005774 <HAL_I2C_Master_Transmit+0x170>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800570a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800570c:	b29b      	uxth	r3, r3
 800570e:	2bff      	cmp	r3, #255	; 0xff
 8005710:	d9c6      	bls.n	80056a0 <HAL_I2C_Master_Transmit+0x9c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005712:	22ff      	movs	r2, #255	; 0xff
 8005714:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005716:	2300      	movs	r3, #0
 8005718:	9300      	str	r3, [sp, #0]
 800571a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800571e:	4639      	mov	r1, r7
 8005720:	4620      	mov	r0, r4
 8005722:	f7ff fd86 	bl	8005232 <I2C_TransferConfig>
 8005726:	e7c7      	b.n	80056b8 <HAL_I2C_Master_Transmit+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005728:	462a      	mov	r2, r5
 800572a:	4631      	mov	r1, r6
 800572c:	4620      	mov	r0, r4
 800572e:	f7ff fe8b 	bl	8005448 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005732:	bb08      	cbnz	r0, 8005778 <HAL_I2C_Master_Transmit+0x174>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005734:	6823      	ldr	r3, [r4, #0]
 8005736:	2220      	movs	r2, #32
 8005738:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800573a:	6821      	ldr	r1, [r4, #0]
 800573c:	684b      	ldr	r3, [r1, #4]
 800573e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005742:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005746:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800574a:	f023 0301 	bic.w	r3, r3, #1
 800574e:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005750:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005754:	2300      	movs	r3, #0
 8005756:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800575a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 800575e:	e000      	b.n	8005762 <HAL_I2C_Master_Transmit+0x15e>
    return HAL_BUSY;
 8005760:	2002      	movs	r0, #2
}
 8005762:	b002      	add	sp, #8
 8005764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8005768:	2002      	movs	r0, #2
 800576a:	e7fa      	b.n	8005762 <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 800576c:	2001      	movs	r0, #1
 800576e:	e7f8      	b.n	8005762 <HAL_I2C_Master_Transmit+0x15e>
        return HAL_ERROR;
 8005770:	2001      	movs	r0, #1
 8005772:	e7f6      	b.n	8005762 <HAL_I2C_Master_Transmit+0x15e>
          return HAL_ERROR;
 8005774:	2001      	movs	r0, #1
 8005776:	e7f4      	b.n	8005762 <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 8005778:	2001      	movs	r0, #1
 800577a:	e7f2      	b.n	8005762 <HAL_I2C_Master_Transmit+0x15e>
 800577c:	80002000 	.word	0x80002000

08005780 <HAL_I2C_Master_Receive>:
{
 8005780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005784:	b082      	sub	sp, #8
 8005786:	460f      	mov	r7, r1
 8005788:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800578a:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 800578e:	b2c9      	uxtb	r1, r1
 8005790:	2920      	cmp	r1, #32
 8005792:	f040 80a2 	bne.w	80058da <HAL_I2C_Master_Receive+0x15a>
 8005796:	4604      	mov	r4, r0
 8005798:	4690      	mov	r8, r2
 800579a:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 800579c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	f000 809e 	beq.w	80058e2 <HAL_I2C_Master_Receive+0x162>
 80057a6:	f04f 0a01 	mov.w	sl, #1
 80057aa:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80057ae:	f7fc f98b 	bl	8001ac8 <HAL_GetTick>
 80057b2:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80057b4:	9000      	str	r0, [sp, #0]
 80057b6:	2319      	movs	r3, #25
 80057b8:	4652      	mov	r2, sl
 80057ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80057be:	4620      	mov	r0, r4
 80057c0:	f7ff fe15 	bl	80053ee <I2C_WaitOnFlagUntilTimeout>
 80057c4:	2800      	cmp	r0, #0
 80057c6:	f040 808e 	bne.w	80058e6 <HAL_I2C_Master_Receive+0x166>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80057ca:	2322      	movs	r3, #34	; 0x22
 80057cc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80057d0:	2310      	movs	r3, #16
 80057d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057d6:	2300      	movs	r3, #0
 80057d8:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80057da:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80057de:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80057e2:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	2bff      	cmp	r3, #255	; 0xff
 80057ea:	d90a      	bls.n	8005802 <HAL_I2C_Master_Receive+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80057ec:	22ff      	movs	r2, #255	; 0xff
 80057ee:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80057f0:	4b41      	ldr	r3, [pc, #260]	; (80058f8 <HAL_I2C_Master_Receive+0x178>)
 80057f2:	9300      	str	r3, [sp, #0]
 80057f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80057f8:	4639      	mov	r1, r7
 80057fa:	4620      	mov	r0, r4
 80057fc:	f7ff fd19 	bl	8005232 <I2C_TransferConfig>
 8005800:	e018      	b.n	8005834 <HAL_I2C_Master_Receive+0xb4>
      hi2c->XferSize = hi2c->XferCount;
 8005802:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005804:	b292      	uxth	r2, r2
 8005806:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005808:	4b3b      	ldr	r3, [pc, #236]	; (80058f8 <HAL_I2C_Master_Receive+0x178>)
 800580a:	9300      	str	r3, [sp, #0]
 800580c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005810:	b2d2      	uxtb	r2, r2
 8005812:	4639      	mov	r1, r7
 8005814:	4620      	mov	r0, r4
 8005816:	f7ff fd0c 	bl	8005232 <I2C_TransferConfig>
 800581a:	e00b      	b.n	8005834 <HAL_I2C_Master_Receive+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 800581c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800581e:	b292      	uxth	r2, r2
 8005820:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005822:	2300      	movs	r3, #0
 8005824:	9300      	str	r3, [sp, #0]
 8005826:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800582a:	b2d2      	uxtb	r2, r2
 800582c:	4639      	mov	r1, r7
 800582e:	4620      	mov	r0, r4
 8005830:	f7ff fcff 	bl	8005232 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005834:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005836:	b29b      	uxth	r3, r3
 8005838:	2b00      	cmp	r3, #0
 800583a:	d032      	beq.n	80058a2 <HAL_I2C_Master_Receive+0x122>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800583c:	462a      	mov	r2, r5
 800583e:	4631      	mov	r1, r6
 8005840:	4620      	mov	r0, r4
 8005842:	f7ff fe29 	bl	8005498 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005846:	2800      	cmp	r0, #0
 8005848:	d14f      	bne.n	80058ea <HAL_I2C_Master_Receive+0x16a>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800584a:	6823      	ldr	r3, [r4, #0]
 800584c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800584e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005850:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8005852:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005854:	3301      	adds	r3, #1
 8005856:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8005858:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800585a:	3a01      	subs	r2, #1
 800585c:	b292      	uxth	r2, r2
 800585e:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005860:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005862:	b29b      	uxth	r3, r3
 8005864:	3b01      	subs	r3, #1
 8005866:	b29b      	uxth	r3, r3
 8005868:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800586a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800586c:	b29b      	uxth	r3, r3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d0e0      	beq.n	8005834 <HAL_I2C_Master_Receive+0xb4>
 8005872:	2a00      	cmp	r2, #0
 8005874:	d1de      	bne.n	8005834 <HAL_I2C_Master_Receive+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005876:	9500      	str	r5, [sp, #0]
 8005878:	4633      	mov	r3, r6
 800587a:	2180      	movs	r1, #128	; 0x80
 800587c:	4620      	mov	r0, r4
 800587e:	f7ff fdb6 	bl	80053ee <I2C_WaitOnFlagUntilTimeout>
 8005882:	bba0      	cbnz	r0, 80058ee <HAL_I2C_Master_Receive+0x16e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005884:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005886:	b29b      	uxth	r3, r3
 8005888:	2bff      	cmp	r3, #255	; 0xff
 800588a:	d9c7      	bls.n	800581c <HAL_I2C_Master_Receive+0x9c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800588c:	22ff      	movs	r2, #255	; 0xff
 800588e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005890:	2300      	movs	r3, #0
 8005892:	9300      	str	r3, [sp, #0]
 8005894:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005898:	4639      	mov	r1, r7
 800589a:	4620      	mov	r0, r4
 800589c:	f7ff fcc9 	bl	8005232 <I2C_TransferConfig>
 80058a0:	e7c8      	b.n	8005834 <HAL_I2C_Master_Receive+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058a2:	462a      	mov	r2, r5
 80058a4:	4631      	mov	r1, r6
 80058a6:	4620      	mov	r0, r4
 80058a8:	f7ff fdce 	bl	8005448 <I2C_WaitOnSTOPFlagUntilTimeout>
 80058ac:	bb08      	cbnz	r0, 80058f2 <HAL_I2C_Master_Receive+0x172>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058ae:	6823      	ldr	r3, [r4, #0]
 80058b0:	2220      	movs	r2, #32
 80058b2:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80058b4:	6821      	ldr	r1, [r4, #0]
 80058b6:	684b      	ldr	r3, [r1, #4]
 80058b8:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80058bc:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80058c0:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80058c4:	f023 0301 	bic.w	r3, r3, #1
 80058c8:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80058ca:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80058ce:	2300      	movs	r3, #0
 80058d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80058d4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 80058d8:	e000      	b.n	80058dc <HAL_I2C_Master_Receive+0x15c>
    return HAL_BUSY;
 80058da:	2002      	movs	r0, #2
}
 80058dc:	b002      	add	sp, #8
 80058de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 80058e2:	2002      	movs	r0, #2
 80058e4:	e7fa      	b.n	80058dc <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 80058e6:	2001      	movs	r0, #1
 80058e8:	e7f8      	b.n	80058dc <HAL_I2C_Master_Receive+0x15c>
        return HAL_ERROR;
 80058ea:	2001      	movs	r0, #1
 80058ec:	e7f6      	b.n	80058dc <HAL_I2C_Master_Receive+0x15c>
          return HAL_ERROR;
 80058ee:	2001      	movs	r0, #1
 80058f0:	e7f4      	b.n	80058dc <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 80058f2:	2001      	movs	r0, #1
 80058f4:	e7f2      	b.n	80058dc <HAL_I2C_Master_Receive+0x15c>
 80058f6:	bf00      	nop
 80058f8:	80002400 	.word	0x80002400

080058fc <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058fc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005900:	b2db      	uxtb	r3, r3
 8005902:	2b20      	cmp	r3, #32
 8005904:	d124      	bne.n	8005950 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005906:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800590a:	2b01      	cmp	r3, #1
 800590c:	d022      	beq.n	8005954 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 800590e:	2301      	movs	r3, #1
 8005910:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005914:	2324      	movs	r3, #36	; 0x24
 8005916:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800591a:	6802      	ldr	r2, [r0, #0]
 800591c:	6813      	ldr	r3, [r2, #0]
 800591e:	f023 0301 	bic.w	r3, r3, #1
 8005922:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005924:	6802      	ldr	r2, [r0, #0]
 8005926:	6813      	ldr	r3, [r2, #0]
 8005928:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800592c:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800592e:	6802      	ldr	r2, [r0, #0]
 8005930:	6813      	ldr	r3, [r2, #0]
 8005932:	4319      	orrs	r1, r3
 8005934:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005936:	6802      	ldr	r2, [r0, #0]
 8005938:	6813      	ldr	r3, [r2, #0]
 800593a:	f043 0301 	orr.w	r3, r3, #1
 800593e:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005940:	2320      	movs	r3, #32
 8005942:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005946:	2300      	movs	r3, #0
 8005948:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800594c:	4618      	mov	r0, r3
 800594e:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8005950:	2002      	movs	r0, #2
 8005952:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8005954:	2002      	movs	r0, #2
  }
}
 8005956:	4770      	bx	lr

08005958 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005958:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800595c:	b2db      	uxtb	r3, r3
 800595e:	2b20      	cmp	r3, #32
 8005960:	d122      	bne.n	80059a8 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005962:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005966:	2b01      	cmp	r3, #1
 8005968:	d020      	beq.n	80059ac <HAL_I2CEx_ConfigDigitalFilter+0x54>
 800596a:	2301      	movs	r3, #1
 800596c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005970:	2324      	movs	r3, #36	; 0x24
 8005972:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005976:	6802      	ldr	r2, [r0, #0]
 8005978:	6813      	ldr	r3, [r2, #0]
 800597a:	f023 0301 	bic.w	r3, r3, #1
 800597e:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005980:	6802      	ldr	r2, [r0, #0]
 8005982:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005984:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005988:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800598c:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800598e:	6802      	ldr	r2, [r0, #0]
 8005990:	6813      	ldr	r3, [r2, #0]
 8005992:	f043 0301 	orr.w	r3, r3, #1
 8005996:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005998:	2320      	movs	r3, #32
 800599a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800599e:	2300      	movs	r3, #0
 80059a0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80059a4:	4618      	mov	r0, r3
 80059a6:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80059a8:	2002      	movs	r0, #2
 80059aa:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80059ac:	2002      	movs	r0, #2
  }
}
 80059ae:	4770      	bx	lr

080059b0 <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059b0:	4a02      	ldr	r2, [pc, #8]	; (80059bc <HAL_PWR_EnableBkUpAccess+0xc>)
 80059b2:	6813      	ldr	r3, [r2, #0]
 80059b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059b8:	6013      	str	r3, [r2, #0]
}
 80059ba:	4770      	bx	lr
 80059bc:	58000400 	.word	0x58000400

080059c0 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80059c0:	b510      	push	{r4, lr}
 80059c2:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80059c4:	b9a0      	cbnz	r0, 80059f0 <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80059c6:	4b0f      	ldr	r3, [pc, #60]	; (8005a04 <HAL_PWR_EnterSLEEPMode+0x44>)
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	f413 7f00 	tst.w	r3, #512	; 0x200
 80059ce:	d10a      	bne.n	80059e6 <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80059d0:	4a0d      	ldr	r2, [pc, #52]	; (8005a08 <HAL_PWR_EnterSLEEPMode+0x48>)
 80059d2:	6913      	ldr	r3, [r2, #16]
 80059d4:	f023 0304 	bic.w	r3, r3, #4
 80059d8:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80059da:	2c01      	cmp	r4, #1
 80059dc:	d010      	beq.n	8005a00 <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80059de:	bf40      	sev
    __WFE();
 80059e0:	bf20      	wfe
    __WFE();
 80059e2:	bf20      	wfe
  }
}
 80059e4:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80059e6:	f000 f821 	bl	8005a2c <HAL_PWREx_DisableLowPowerRunMode>
 80059ea:	2800      	cmp	r0, #0
 80059ec:	d0f0      	beq.n	80059d0 <HAL_PWR_EnterSLEEPMode+0x10>
 80059ee:	e7f9      	b.n	80059e4 <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 80059f0:	4b04      	ldr	r3, [pc, #16]	; (8005a04 <HAL_PWR_EnterSLEEPMode+0x44>)
 80059f2:	695b      	ldr	r3, [r3, #20]
 80059f4:	f413 7f00 	tst.w	r3, #512	; 0x200
 80059f8:	d1ea      	bne.n	80059d0 <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 80059fa:	f000 f80f 	bl	8005a1c <HAL_PWREx_EnableLowPowerRunMode>
 80059fe:	e7e7      	b.n	80059d0 <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 8005a00:	bf30      	wfi
 8005a02:	e7ef      	b.n	80059e4 <HAL_PWR_EnterSLEEPMode+0x24>
 8005a04:	58000400 	.word	0x58000400
 8005a08:	e000ed00 	.word	0xe000ed00

08005a0c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8005a0c:	4b02      	ldr	r3, [pc, #8]	; (8005a18 <HAL_PWREx_GetVoltageRange+0xc>)
 8005a0e:	6818      	ldr	r0, [r3, #0]
}
 8005a10:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8005a14:	4770      	bx	lr
 8005a16:	bf00      	nop
 8005a18:	58000400 	.word	0x58000400

08005a1c <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8005a1c:	4a02      	ldr	r2, [pc, #8]	; (8005a28 <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 8005a1e:	6813      	ldr	r3, [r2, #0]
 8005a20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a24:	6013      	str	r3, [r2, #0]
}
 8005a26:	4770      	bx	lr
 8005a28:	58000400 	.word	0x58000400

08005a2c <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8005a2c:	4a0f      	ldr	r2, [pc, #60]	; (8005a6c <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8005a2e:	6813      	ldr	r3, [r2, #0]
 8005a30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a34:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8005a36:	4b0e      	ldr	r3, [pc, #56]	; (8005a70 <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2232      	movs	r2, #50	; 0x32
 8005a3c:	fb02 f303 	mul.w	r3, r2, r3
 8005a40:	4a0c      	ldr	r2, [pc, #48]	; (8005a74 <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 8005a42:	fba2 2303 	umull	r2, r3, r2, r3
 8005a46:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005a48:	e000      	b.n	8005a4c <HAL_PWREx_DisableLowPowerRunMode+0x20>
  {
    wait_loop_index--;
 8005a4a:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005a4c:	4a07      	ldr	r2, [pc, #28]	; (8005a6c <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8005a4e:	6952      	ldr	r2, [r2, #20]
 8005a50:	f412 7f00 	tst.w	r2, #512	; 0x200
 8005a54:	d001      	beq.n	8005a5a <HAL_PWREx_DisableLowPowerRunMode+0x2e>
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1f7      	bne.n	8005a4a <HAL_PWREx_DisableLowPowerRunMode+0x1e>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8005a5a:	4b04      	ldr	r3, [pc, #16]	; (8005a6c <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8005a5c:	695b      	ldr	r3, [r3, #20]
 8005a5e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005a62:	d101      	bne.n	8005a68 <HAL_PWREx_DisableLowPowerRunMode+0x3c>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 8005a64:	2000      	movs	r0, #0
 8005a66:	4770      	bx	lr
    return HAL_TIMEOUT;
 8005a68:	2003      	movs	r0, #3
}
 8005a6a:	4770      	bx	lr
 8005a6c:	58000400 	.word	0x58000400
 8005a70:	20000070 	.word	0x20000070
 8005a74:	431bde83 	.word	0x431bde83

08005a78 <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8005a78:	4a0c      	ldr	r2, [pc, #48]	; (8005aac <HAL_PWREx_EnterSTOP2Mode+0x34>)
 8005a7a:	6813      	ldr	r3, [r2, #0]
 8005a7c:	f023 0307 	bic.w	r3, r3, #7
 8005a80:	f043 0302 	orr.w	r3, r3, #2
 8005a84:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005a86:	4a0a      	ldr	r2, [pc, #40]	; (8005ab0 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8005a88:	6913      	ldr	r3, [r2, #16]
 8005a8a:	f043 0304 	orr.w	r3, r3, #4
 8005a8e:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8005a90:	2801      	cmp	r0, #1
 8005a92:	d008      	beq.n	8005aa6 <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005a94:	bf40      	sev
    __WFE();
 8005a96:	bf20      	wfe
    __WFE();
 8005a98:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005a9a:	4a05      	ldr	r2, [pc, #20]	; (8005ab0 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8005a9c:	6913      	ldr	r3, [r2, #16]
 8005a9e:	f023 0304 	bic.w	r3, r3, #4
 8005aa2:	6113      	str	r3, [r2, #16]
}
 8005aa4:	4770      	bx	lr
    __WFI();
 8005aa6:	bf30      	wfi
 8005aa8:	e7f7      	b.n	8005a9a <HAL_PWREx_EnterSTOP2Mode+0x22>
 8005aaa:	bf00      	nop
 8005aac:	58000400 	.word	0x58000400
 8005ab0:	e000ed00 	.word	0xe000ed00

08005ab4 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005ab4:	b530      	push	{r4, r5, lr}
 8005ab6:	b089      	sub	sp, #36	; 0x24
 8005ab8:	4604      	mov	r4, r0
 8005aba:	468c      	mov	ip, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8005abc:	4b2a      	ldr	r3, [pc, #168]	; (8005b68 <RCC_SetFlashLatency+0xb4>)
 8005abe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005ac2:	9006      	str	r0, [sp, #24]
 8005ac4:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8005ac8:	f103 0208 	add.w	r2, r3, #8
 8005acc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005ad0:	9004      	str	r0, [sp, #16]
 8005ad2:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8005ad6:	ad01      	add	r5, sp, #4
 8005ad8:	3310      	adds	r3, #16
 8005ada:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005ade:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005ae2:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8005ae6:	d007      	beq.n	8005af8 <RCC_SetFlashLatency+0x44>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005ae8:	2300      	movs	r3, #0
 8005aea:	e014      	b.n	8005b16 <RCC_SetFlashLatency+0x62>
        latency = FLASH_LATENCY_RANGE[index];
 8005aec:	aa08      	add	r2, sp, #32
 8005aee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005af2:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8005af6:	e01e      	b.n	8005b36 <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005af8:	2300      	movs	r3, #0
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d808      	bhi.n	8005b10 <RCC_SetFlashLatency+0x5c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005afe:	aa08      	add	r2, sp, #32
 8005b00:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8005b04:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 8005b08:	42a2      	cmp	r2, r4
 8005b0a:	d2ef      	bcs.n	8005aec <RCC_SetFlashLatency+0x38>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005b0c:	3301      	adds	r3, #1
 8005b0e:	e7f4      	b.n	8005afa <RCC_SetFlashLatency+0x46>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005b10:	2500      	movs	r5, #0
 8005b12:	e010      	b.n	8005b36 <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005b14:	3301      	adds	r3, #1
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d80c      	bhi.n	8005b34 <RCC_SetFlashLatency+0x80>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005b1a:	aa08      	add	r2, sp, #32
 8005b1c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8005b20:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 8005b24:	42a2      	cmp	r2, r4
 8005b26:	d3f5      	bcc.n	8005b14 <RCC_SetFlashLatency+0x60>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005b28:	aa08      	add	r2, sp, #32
 8005b2a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005b2e:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8005b32:	e000      	b.n	8005b36 <RCC_SetFlashLatency+0x82>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005b34:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005b36:	4a0d      	ldr	r2, [pc, #52]	; (8005b6c <RCC_SetFlashLatency+0xb8>)
 8005b38:	6813      	ldr	r3, [r2, #0]
 8005b3a:	f023 0307 	bic.w	r3, r3, #7
 8005b3e:	432b      	orrs	r3, r5
 8005b40:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005b42:	f7fb ffc1 	bl	8001ac8 <HAL_GetTick>
 8005b46:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005b48:	4b08      	ldr	r3, [pc, #32]	; (8005b6c <RCC_SetFlashLatency+0xb8>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0307 	and.w	r3, r3, #7
 8005b50:	42ab      	cmp	r3, r5
 8005b52:	d006      	beq.n	8005b62 <RCC_SetFlashLatency+0xae>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005b54:	f7fb ffb8 	bl	8001ac8 <HAL_GetTick>
 8005b58:	1b00      	subs	r0, r0, r4
 8005b5a:	2802      	cmp	r0, #2
 8005b5c:	d9f4      	bls.n	8005b48 <RCC_SetFlashLatency+0x94>
    {
      return HAL_TIMEOUT;
 8005b5e:	2003      	movs	r0, #3
 8005b60:	e000      	b.n	8005b64 <RCC_SetFlashLatency+0xb0>
    }
  }
  return HAL_OK;
 8005b62:	2000      	movs	r0, #0
}
 8005b64:	b009      	add	sp, #36	; 0x24
 8005b66:	bd30      	pop	{r4, r5, pc}
 8005b68:	080140b0 	.word	0x080140b0
 8005b6c:	58004000 	.word	0x58004000

08005b70 <RCC_SetFlashLatencyFromMSIRange>:
{
 8005b70:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8005b72:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8005b76:	4b0c      	ldr	r3, [pc, #48]	; (8005ba8 <RCC_SetFlashLatencyFromMSIRange+0x38>)
 8005b78:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005b7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b80:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8005b84:	f003 030f 	and.w	r3, r3, #15
 8005b88:	4a08      	ldr	r2, [pc, #32]	; (8005bac <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 8005b8a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005b8e:	fbb4 f4f0 	udiv	r4, r4, r0
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005b92:	f7ff ff3b 	bl	8005a0c <HAL_PWREx_GetVoltageRange>
 8005b96:	4601      	mov	r1, r0
 8005b98:	4805      	ldr	r0, [pc, #20]	; (8005bb0 <RCC_SetFlashLatencyFromMSIRange+0x40>)
 8005b9a:	fba0 3004 	umull	r3, r0, r0, r4
 8005b9e:	0c80      	lsrs	r0, r0, #18
 8005ba0:	f7ff ff88 	bl	8005ab4 <RCC_SetFlashLatency>
}
 8005ba4:	bd10      	pop	{r4, pc}
 8005ba6:	bf00      	nop
 8005ba8:	08014684 	.word	0x08014684
 8005bac:	08014624 	.word	0x08014624
 8005bb0:	431bde83 	.word	0x431bde83

08005bb4 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005bb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bb8:	6899      	ldr	r1, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005bc0:	f011 010c 	ands.w	r1, r1, #12
 8005bc4:	d00a      	beq.n	8005bdc <HAL_RCC_GetSysClockFreq+0x28>
 8005bc6:	290c      	cmp	r1, #12
 8005bc8:	d006      	beq.n	8005bd8 <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005bca:	2904      	cmp	r1, #4
 8005bcc:	d047      	beq.n	8005c5e <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005bce:	2908      	cmp	r1, #8
 8005bd0:	d03b      	beq.n	8005c4a <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 8005bd2:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 8005bd4:	4610      	mov	r0, r2
 8005bd6:	e026      	b.n	8005c26 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d1f6      	bne.n	8005bca <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f013 0308 	ands.w	r3, r3, #8
 8005be6:	d00d      	beq.n	8005c04 <HAL_RCC_GetSysClockFreq+0x50>
 8005be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f013 0308 	ands.w	r3, r3, #8
 8005bf2:	d124      	bne.n	8005c3e <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005bf4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bf8:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005bfc:	4a2e      	ldr	r2, [pc, #184]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0x104>)
 8005bfe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005c02:	e00e      	b.n	8005c22 <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005c04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c08:	6812      	ldr	r2, [r2, #0]
 8005c0a:	f012 0f08 	tst.w	r2, #8
 8005c0e:	d112      	bne.n	8005c36 <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c18:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8005c1c:	4a26      	ldr	r2, [pc, #152]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0x104>)
 8005c1e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005c22:	b1d1      	cbz	r1, 8005c5a <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 8005c24:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005c26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c30:	2b0c      	cmp	r3, #12
 8005c32:	d01a      	beq.n	8005c6a <HAL_RCC_GetSysClockFreq+0xb6>
}
 8005c34:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005c36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c3a:	6812      	ldr	r2, [r2, #0]
 8005c3c:	e7ee      	b.n	8005c1c <HAL_RCC_GetSysClockFreq+0x68>
 8005c3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c42:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005c44:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005c48:	e7d8      	b.n	8005bfc <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	f412 1280 	ands.w	r2, r2, #1048576	; 0x100000
 8005c54:	d106      	bne.n	8005c64 <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 8005c56:	4819      	ldr	r0, [pc, #100]	; (8005cbc <HAL_RCC_GetSysClockFreq+0x108>)
 8005c58:	e7e5      	b.n	8005c26 <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 8005c5a:	4610      	mov	r0, r2
 8005c5c:	e7e3      	b.n	8005c26 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8005c5e:	2200      	movs	r2, #0
    sysclockfreq = HSI_VALUE;
 8005c60:	4817      	ldr	r0, [pc, #92]	; (8005cc0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005c62:	e7e0      	b.n	8005c26 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8005c64:	2200      	movs	r2, #0
      sysclockfreq = HSE_VALUE / 2U;
 8005c66:	4816      	ldr	r0, [pc, #88]	; (8005cc0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005c68:	e7dd      	b.n	8005c26 <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005c6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d009      	beq.n	8005c8c <HAL_RCC_GetSysClockFreq+0xd8>
 8005c78:	2b03      	cmp	r3, #3
 8005c7a:	d108      	bne.n	8005c8e <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005c86:	d115      	bne.n	8005cb4 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8005c88:	4a0c      	ldr	r2, [pc, #48]	; (8005cbc <HAL_RCC_GetSysClockFreq+0x108>)
 8005c8a:	e000      	b.n	8005c8e <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 8005c8c:	4a0c      	ldr	r2, [pc, #48]	; (8005cc0 <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c92:	68d8      	ldr	r0, [r3, #12]
 8005c94:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005c98:	fb00 f202 	mul.w	r2, r0, r2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005c9c:	68d8      	ldr	r0, [r3, #12]
 8005c9e:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8005ca2:	3001      	adds	r0, #1
 8005ca4:	fbb2 f2f0 	udiv	r2, r2, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005ca8:	68d8      	ldr	r0, [r3, #12]
 8005caa:	0f40      	lsrs	r0, r0, #29
 8005cac:	3001      	adds	r0, #1
 8005cae:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 8005cb2:	e7bf      	b.n	8005c34 <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 8005cb4:	4a02      	ldr	r2, [pc, #8]	; (8005cc0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005cb6:	e7ea      	b.n	8005c8e <HAL_RCC_GetSysClockFreq+0xda>
 8005cb8:	08014684 	.word	0x08014684
 8005cbc:	01e84800 	.word	0x01e84800
 8005cc0:	00f42400 	.word	0x00f42400

08005cc4 <HAL_RCC_GetHCLKFreq>:
{
 8005cc4:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005cc6:	f7ff ff75 	bl	8005bb4 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005cca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005cd4:	4a02      	ldr	r2, [pc, #8]	; (8005ce0 <HAL_RCC_GetHCLKFreq+0x1c>)
 8005cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8005cda:	fbb0 f0f3 	udiv	r0, r0, r3
 8005cde:	bd08      	pop	{r3, pc}
 8005ce0:	08014624 	.word	0x08014624

08005ce4 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8005ce4:	2800      	cmp	r0, #0
 8005ce6:	f000 8319 	beq.w	800631c <HAL_RCC_OscConfig+0x638>
{
 8005cea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cec:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cf2:	689d      	ldr	r5, [r3, #8]
 8005cf4:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005cf8:	68de      	ldr	r6, [r3, #12]
 8005cfa:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005cfe:	6803      	ldr	r3, [r0, #0]
 8005d00:	f013 0f20 	tst.w	r3, #32
 8005d04:	f000 808f 	beq.w	8005e26 <HAL_RCC_OscConfig+0x142>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005d08:	b1ed      	cbz	r5, 8005d46 <HAL_RCC_OscConfig+0x62>
 8005d0a:	2d0c      	cmp	r5, #12
 8005d0c:	d019      	beq.n	8005d42 <HAL_RCC_OscConfig+0x5e>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005d0e:	6a23      	ldr	r3, [r4, #32]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	f000 80bc 	beq.w	8005e8e <HAL_RCC_OscConfig+0x1aa>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005d16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d1a:	6813      	ldr	r3, [r2, #0]
 8005d1c:	f043 0301 	orr.w	r3, r3, #1
 8005d20:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005d22:	f7fb fed1 	bl	8001ac8 <HAL_GetTick>
 8005d26:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f013 0f02 	tst.w	r3, #2
 8005d32:	d165      	bne.n	8005e00 <HAL_RCC_OscConfig+0x11c>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005d34:	f7fb fec8 	bl	8001ac8 <HAL_GetTick>
 8005d38:	1bc0      	subs	r0, r0, r7
 8005d3a:	2802      	cmp	r0, #2
 8005d3c:	d9f4      	bls.n	8005d28 <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 8005d3e:	2003      	movs	r0, #3
 8005d40:	e2f9      	b.n	8006336 <HAL_RCC_OscConfig+0x652>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005d42:	2e01      	cmp	r6, #1
 8005d44:	d1e3      	bne.n	8005d0e <HAL_RCC_OscConfig+0x2a>
 8005d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f013 0f02 	tst.w	r3, #2
 8005d50:	d003      	beq.n	8005d5a <HAL_RCC_OscConfig+0x76>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005d52:	6a23      	ldr	r3, [r4, #32]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	f000 82e3 	beq.w	8006320 <HAL_RCC_OscConfig+0x63c>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005d5a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f013 0f08 	tst.w	r3, #8
 8005d66:	d029      	beq.n	8005dbc <HAL_RCC_OscConfig+0xd8>
 8005d68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d72:	4298      	cmp	r0, r3
 8005d74:	d92a      	bls.n	8005dcc <HAL_RCC_OscConfig+0xe8>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005d76:	f7ff fefb 	bl	8005b70 <RCC_SetFlashLatencyFromMSIRange>
 8005d7a:	2800      	cmp	r0, #0
 8005d7c:	f040 82d2 	bne.w	8006324 <HAL_RCC_OscConfig+0x640>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	f042 0208 	orr.w	r2, r2, #8
 8005d8a:	601a      	str	r2, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005d92:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005d94:	430a      	orrs	r2, r1
 8005d96:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d98:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005d9a:	685a      	ldr	r2, [r3, #4]
 8005d9c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005da0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005da4:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005da6:	f7ff ff8d 	bl	8005cc4 <HAL_RCC_GetHCLKFreq>
 8005daa:	4bb0      	ldr	r3, [pc, #704]	; (800606c <HAL_RCC_OscConfig+0x388>)
 8005dac:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8005dae:	4bb0      	ldr	r3, [pc, #704]	; (8006070 <HAL_RCC_OscConfig+0x38c>)
 8005db0:	6818      	ldr	r0, [r3, #0]
 8005db2:	f7fb fe87 	bl	8001ac4 <HAL_InitTick>
        if (status != HAL_OK)
 8005db6:	2800      	cmp	r0, #0
 8005db8:	d035      	beq.n	8005e26 <HAL_RCC_OscConfig+0x142>
 8005dba:	e2bc      	b.n	8006336 <HAL_RCC_OscConfig+0x652>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dc4:	091b      	lsrs	r3, r3, #4
 8005dc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005dca:	e7d2      	b.n	8005d72 <HAL_RCC_OscConfig+0x8e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	f042 0208 	orr.w	r2, r2, #8
 8005dd6:	601a      	str	r2, [r3, #0]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005dde:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005de0:	430a      	orrs	r2, r1
 8005de2:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005de4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005de6:	685a      	ldr	r2, [r3, #4]
 8005de8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005dec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005df0:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005df2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005df4:	f7ff febc 	bl	8005b70 <RCC_SetFlashLatencyFromMSIRange>
 8005df8:	2800      	cmp	r0, #0
 8005dfa:	d0d4      	beq.n	8005da6 <HAL_RCC_OscConfig+0xc2>
            return HAL_ERROR;
 8005dfc:	2001      	movs	r0, #1
 8005dfe:	e29a      	b.n	8006336 <HAL_RCC_OscConfig+0x652>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	f042 0208 	orr.w	r2, r2, #8
 8005e0a:	601a      	str	r2, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005e12:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005e14:	430a      	orrs	r2, r1
 8005e16:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e18:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005e1a:	685a      	ldr	r2, [r3, #4]
 8005e1c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005e20:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005e24:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e26:	6823      	ldr	r3, [r4, #0]
 8005e28:	f013 0f01 	tst.w	r3, #1
 8005e2c:	d051      	beq.n	8005ed2 <HAL_RCC_OscConfig+0x1ee>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005e2e:	2d08      	cmp	r5, #8
 8005e30:	d045      	beq.n	8005ebe <HAL_RCC_OscConfig+0x1da>
 8005e32:	2d0c      	cmp	r5, #12
 8005e34:	d041      	beq.n	8005eba <HAL_RCC_OscConfig+0x1d6>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8005e36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e3a:	6813      	ldr	r3, [r2, #0]
 8005e3c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005e40:	68a1      	ldr	r1, [r4, #8]
 8005e42:	430b      	orrs	r3, r1
 8005e44:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e46:	6863      	ldr	r3, [r4, #4]
 8005e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e4c:	d063      	beq.n	8005f16 <HAL_RCC_OscConfig+0x232>
 8005e4e:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8005e52:	d065      	beq.n	8005f20 <HAL_RCC_OscConfig+0x23c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005e5e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8005e66:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e68:	6863      	ldr	r3, [r4, #4]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d063      	beq.n	8005f36 <HAL_RCC_OscConfig+0x252>
        tickstart = HAL_GetTick();
 8005e6e:	f7fb fe2b 	bl	8001ac8 <HAL_GetTick>
 8005e72:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005e7e:	d128      	bne.n	8005ed2 <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e80:	f7fb fe22 	bl	8001ac8 <HAL_GetTick>
 8005e84:	1bc0      	subs	r0, r0, r7
 8005e86:	2864      	cmp	r0, #100	; 0x64
 8005e88:	d9f4      	bls.n	8005e74 <HAL_RCC_OscConfig+0x190>
            return HAL_TIMEOUT;
 8005e8a:	2003      	movs	r0, #3
 8005e8c:	e253      	b.n	8006336 <HAL_RCC_OscConfig+0x652>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005e8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e92:	6813      	ldr	r3, [r2, #0]
 8005e94:	f023 0301 	bic.w	r3, r3, #1
 8005e98:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005e9a:	f7fb fe15 	bl	8001ac8 <HAL_GetTick>
 8005e9e:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f013 0f02 	tst.w	r3, #2
 8005eaa:	d0bc      	beq.n	8005e26 <HAL_RCC_OscConfig+0x142>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005eac:	f7fb fe0c 	bl	8001ac8 <HAL_GetTick>
 8005eb0:	1bc0      	subs	r0, r0, r7
 8005eb2:	2802      	cmp	r0, #2
 8005eb4:	d9f4      	bls.n	8005ea0 <HAL_RCC_OscConfig+0x1bc>
            return HAL_TIMEOUT;
 8005eb6:	2003      	movs	r0, #3
 8005eb8:	e23d      	b.n	8006336 <HAL_RCC_OscConfig+0x652>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005eba:	2e03      	cmp	r6, #3
 8005ebc:	d1bb      	bne.n	8005e36 <HAL_RCC_OscConfig+0x152>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005ebe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005ec8:	d003      	beq.n	8005ed2 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005eca:	6863      	ldr	r3, [r4, #4]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f000 822b 	beq.w	8006328 <HAL_RCC_OscConfig+0x644>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ed2:	6823      	ldr	r3, [r4, #0]
 8005ed4:	f013 0f02 	tst.w	r3, #2
 8005ed8:	d052      	beq.n	8005f80 <HAL_RCC_OscConfig+0x29c>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005eda:	2d04      	cmp	r5, #4
 8005edc:	d03d      	beq.n	8005f5a <HAL_RCC_OscConfig+0x276>
 8005ede:	2d0c      	cmp	r5, #12
 8005ee0:	d039      	beq.n	8005f56 <HAL_RCC_OscConfig+0x272>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005ee2:	6923      	ldr	r3, [r4, #16]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f000 8091 	beq.w	800600c <HAL_RCC_OscConfig+0x328>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005eea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005eee:	6813      	ldr	r3, [r2, #0]
 8005ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ef4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005ef6:	f7fb fde7 	bl	8001ac8 <HAL_GetTick>
 8005efa:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005f06:	d177      	bne.n	8005ff8 <HAL_RCC_OscConfig+0x314>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f08:	f7fb fdde 	bl	8001ac8 <HAL_GetTick>
 8005f0c:	1b80      	subs	r0, r0, r6
 8005f0e:	2802      	cmp	r0, #2
 8005f10:	d9f4      	bls.n	8005efc <HAL_RCC_OscConfig+0x218>
            return HAL_TIMEOUT;
 8005f12:	2003      	movs	r0, #3
 8005f14:	e20f      	b.n	8006336 <HAL_RCC_OscConfig+0x652>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005f16:	6813      	ldr	r3, [r2, #0]
 8005f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f1c:	6013      	str	r3, [r2, #0]
}
 8005f1e:	e7a3      	b.n	8005e68 <HAL_RCC_OscConfig+0x184>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8005f2a:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005f32:	601a      	str	r2, [r3, #0]
}
 8005f34:	e798      	b.n	8005e68 <HAL_RCC_OscConfig+0x184>
        tickstart = HAL_GetTick();
 8005f36:	f7fb fdc7 	bl	8001ac8 <HAL_GetTick>
 8005f3a:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005f46:	d0c4      	beq.n	8005ed2 <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f48:	f7fb fdbe 	bl	8001ac8 <HAL_GetTick>
 8005f4c:	1bc0      	subs	r0, r0, r7
 8005f4e:	2864      	cmp	r0, #100	; 0x64
 8005f50:	d9f4      	bls.n	8005f3c <HAL_RCC_OscConfig+0x258>
            return HAL_TIMEOUT;
 8005f52:	2003      	movs	r0, #3
 8005f54:	e1ef      	b.n	8006336 <HAL_RCC_OscConfig+0x652>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005f56:	2e02      	cmp	r6, #2
 8005f58:	d1c3      	bne.n	8005ee2 <HAL_RCC_OscConfig+0x1fe>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005f64:	d003      	beq.n	8005f6e <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f66:	6923      	ldr	r3, [r4, #16]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f000 81df 	beq.w	800632c <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f6e:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005f70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f74:	6853      	ldr	r3, [r2, #4]
 8005f76:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005f7a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005f7e:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f80:	6823      	ldr	r3, [r4, #0]
 8005f82:	f013 0f08 	tst.w	r3, #8
 8005f86:	f000 808e 	beq.w	80060a6 <HAL_RCC_OscConfig+0x3c2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f8a:	69a3      	ldr	r3, [r4, #24]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d071      	beq.n	8006074 <HAL_RCC_OscConfig+0x390>
      uint32_t csr_temp = RCC->CSR;
 8005f90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8005f98:	69e1      	ldr	r1, [r4, #28]
 8005f9a:	f003 0210 	and.w	r2, r3, #16
 8005f9e:	4291      	cmp	r1, r2
 8005fa0:	d011      	beq.n	8005fc6 <HAL_RCC_OscConfig+0x2e2>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005fa2:	f003 0203 	and.w	r2, r3, #3
 8005fa6:	2a02      	cmp	r2, #2
 8005fa8:	f000 81c2 	beq.w	8006330 <HAL_RCC_OscConfig+0x64c>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8005fac:	f013 0f01 	tst.w	r3, #1
 8005fb0:	d142      	bne.n	8006038 <HAL_RCC_OscConfig+0x354>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8005fb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fb6:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005fba:	f023 0310 	bic.w	r3, r3, #16
 8005fbe:	69e1      	ldr	r1, [r4, #28]
 8005fc0:	430b      	orrs	r3, r1
 8005fc2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8005fc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fca:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005fce:	f043 0301 	orr.w	r3, r3, #1
 8005fd2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8005fd6:	f7fb fd77 	bl	8001ac8 <HAL_GetTick>
 8005fda:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005fdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fe0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fe4:	f013 0f02 	tst.w	r3, #2
 8005fe8:	d15d      	bne.n	80060a6 <HAL_RCC_OscConfig+0x3c2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fea:	f7fb fd6d 	bl	8001ac8 <HAL_GetTick>
 8005fee:	1b80      	subs	r0, r0, r6
 8005ff0:	2811      	cmp	r0, #17
 8005ff2:	d9f3      	bls.n	8005fdc <HAL_RCC_OscConfig+0x2f8>
          return HAL_TIMEOUT;
 8005ff4:	2003      	movs	r0, #3
 8005ff6:	e19e      	b.n	8006336 <HAL_RCC_OscConfig+0x652>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ff8:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005ffa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ffe:	6853      	ldr	r3, [r2, #4]
 8006000:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006004:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006008:	6053      	str	r3, [r2, #4]
}
 800600a:	e7b9      	b.n	8005f80 <HAL_RCC_OscConfig+0x29c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800600c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006010:	6813      	ldr	r3, [r2, #0]
 8006012:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006016:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006018:	f7fb fd56 	bl	8001ac8 <HAL_GetTick>
 800601c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800601e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006028:	d0aa      	beq.n	8005f80 <HAL_RCC_OscConfig+0x29c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800602a:	f7fb fd4d 	bl	8001ac8 <HAL_GetTick>
 800602e:	1b80      	subs	r0, r0, r6
 8006030:	2802      	cmp	r0, #2
 8006032:	d9f4      	bls.n	800601e <HAL_RCC_OscConfig+0x33a>
            return HAL_TIMEOUT;
 8006034:	2003      	movs	r0, #3
 8006036:	e17e      	b.n	8006336 <HAL_RCC_OscConfig+0x652>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8006038:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800603c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8006040:	f023 0301 	bic.w	r3, r3, #1
 8006044:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 8006048:	f7fb fd3e 	bl	8001ac8 <HAL_GetTick>
 800604c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800604e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006052:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006056:	f013 0f02 	tst.w	r3, #2
 800605a:	d0aa      	beq.n	8005fb2 <HAL_RCC_OscConfig+0x2ce>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800605c:	f7fb fd34 	bl	8001ac8 <HAL_GetTick>
 8006060:	1b80      	subs	r0, r0, r6
 8006062:	2811      	cmp	r0, #17
 8006064:	d9f3      	bls.n	800604e <HAL_RCC_OscConfig+0x36a>
              return HAL_TIMEOUT;
 8006066:	2003      	movs	r0, #3
 8006068:	e165      	b.n	8006336 <HAL_RCC_OscConfig+0x652>
 800606a:	bf00      	nop
 800606c:	20000070 	.word	0x20000070
 8006070:	20000074 	.word	0x20000074
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8006074:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006078:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800607c:	f023 0301 	bic.w	r3, r3, #1
 8006080:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8006084:	f7fb fd20 	bl	8001ac8 <HAL_GetTick>
 8006088:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800608a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800608e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006092:	f013 0f02 	tst.w	r3, #2
 8006096:	d006      	beq.n	80060a6 <HAL_RCC_OscConfig+0x3c2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006098:	f7fb fd16 	bl	8001ac8 <HAL_GetTick>
 800609c:	1b80      	subs	r0, r0, r6
 800609e:	2811      	cmp	r0, #17
 80060a0:	d9f3      	bls.n	800608a <HAL_RCC_OscConfig+0x3a6>
          return HAL_TIMEOUT;
 80060a2:	2003      	movs	r0, #3
 80060a4:	e147      	b.n	8006336 <HAL_RCC_OscConfig+0x652>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060a6:	6823      	ldr	r3, [r4, #0]
 80060a8:	f013 0f04 	tst.w	r3, #4
 80060ac:	f000 80b1 	beq.w	8006212 <HAL_RCC_OscConfig+0x52e>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80060b0:	4ba8      	ldr	r3, [pc, #672]	; (8006354 <HAL_RCC_OscConfig+0x670>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80060b8:	d110      	bne.n	80060dc <HAL_RCC_OscConfig+0x3f8>
      HAL_PWR_EnableBkUpAccess();
 80060ba:	f7ff fc79 	bl	80059b0 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 80060be:	f7fb fd03 	bl	8001ac8 <HAL_GetTick>
 80060c2:	4606      	mov	r6, r0
 80060c4:	4ba3      	ldr	r3, [pc, #652]	; (8006354 <HAL_RCC_OscConfig+0x670>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80060cc:	d106      	bne.n	80060dc <HAL_RCC_OscConfig+0x3f8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060ce:	f7fb fcfb 	bl	8001ac8 <HAL_GetTick>
 80060d2:	1b80      	subs	r0, r0, r6
 80060d4:	2802      	cmp	r0, #2
 80060d6:	d9f5      	bls.n	80060c4 <HAL_RCC_OscConfig+0x3e0>
          return HAL_TIMEOUT;
 80060d8:	2003      	movs	r0, #3
 80060da:	e12c      	b.n	8006336 <HAL_RCC_OscConfig+0x652>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80060dc:	68e3      	ldr	r3, [r4, #12]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d061      	beq.n	80061a6 <HAL_RCC_OscConfig+0x4c2>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80060e2:	2b85      	cmp	r3, #133	; 0x85
 80060e4:	d001      	beq.n	80060ea <HAL_RCC_OscConfig+0x406>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80060e6:	2b05      	cmp	r3, #5
 80060e8:	d107      	bne.n	80060fa <HAL_RCC_OscConfig+0x416>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80060ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060ee:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80060f2:	f043 0304 	orr.w	r3, r3, #4
 80060f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 80060fa:	f7fb fce5 	bl	8001ac8 <HAL_GetTick>
 80060fe:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006100:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006104:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006108:	f043 0301 	orr.w	r3, r3, #1
 800610c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006110:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006118:	f013 0f02 	tst.w	r3, #2
 800611c:	d108      	bne.n	8006130 <HAL_RCC_OscConfig+0x44c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800611e:	f7fb fcd3 	bl	8001ac8 <HAL_GetTick>
 8006122:	1b80      	subs	r0, r0, r6
 8006124:	f241 3388 	movw	r3, #5000	; 0x1388
 8006128:	4298      	cmp	r0, r3
 800612a:	d9f1      	bls.n	8006110 <HAL_RCC_OscConfig+0x42c>
          return HAL_TIMEOUT;
 800612c:	2003      	movs	r0, #3
 800612e:	e102      	b.n	8006336 <HAL_RCC_OscConfig+0x652>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8006130:	68e3      	ldr	r3, [r4, #12]
 8006132:	2b81      	cmp	r3, #129	; 0x81
 8006134:	d001      	beq.n	800613a <HAL_RCC_OscConfig+0x456>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8006136:	2b85      	cmp	r3, #133	; 0x85
 8006138:	d11a      	bne.n	8006170 <HAL_RCC_OscConfig+0x48c>
        tickstart = HAL_GetTick();
 800613a:	f7fb fcc5 	bl	8001ac8 <HAL_GetTick>
 800613e:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006140:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006144:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800614c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006158:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800615c:	d159      	bne.n	8006212 <HAL_RCC_OscConfig+0x52e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800615e:	f7fb fcb3 	bl	8001ac8 <HAL_GetTick>
 8006162:	1b80      	subs	r0, r0, r6
 8006164:	f241 3388 	movw	r3, #5000	; 0x1388
 8006168:	4298      	cmp	r0, r3
 800616a:	d9f1      	bls.n	8006150 <HAL_RCC_OscConfig+0x46c>
            return HAL_TIMEOUT;
 800616c:	2003      	movs	r0, #3
 800616e:	e0e2      	b.n	8006336 <HAL_RCC_OscConfig+0x652>
        tickstart = HAL_GetTick();
 8006170:	f7fb fcaa 	bl	8001ac8 <HAL_GetTick>
 8006174:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006176:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800617a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800617e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006182:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800618a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800618e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8006192:	d03e      	beq.n	8006212 <HAL_RCC_OscConfig+0x52e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006194:	f7fb fc98 	bl	8001ac8 <HAL_GetTick>
 8006198:	1b80      	subs	r0, r0, r6
 800619a:	f241 3388 	movw	r3, #5000	; 0x1388
 800619e:	4298      	cmp	r0, r3
 80061a0:	d9f1      	bls.n	8006186 <HAL_RCC_OscConfig+0x4a2>
            return HAL_TIMEOUT;
 80061a2:	2003      	movs	r0, #3
 80061a4:	e0c7      	b.n	8006336 <HAL_RCC_OscConfig+0x652>
      tickstart = HAL_GetTick();
 80061a6:	f7fb fc8f 	bl	8001ac8 <HAL_GetTick>
 80061aa:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80061ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061b0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80061b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80061bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061c4:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80061c8:	d008      	beq.n	80061dc <HAL_RCC_OscConfig+0x4f8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061ca:	f7fb fc7d 	bl	8001ac8 <HAL_GetTick>
 80061ce:	1b80      	subs	r0, r0, r6
 80061d0:	f241 3388 	movw	r3, #5000	; 0x1388
 80061d4:	4298      	cmp	r0, r3
 80061d6:	d9f1      	bls.n	80061bc <HAL_RCC_OscConfig+0x4d8>
          return HAL_TIMEOUT;
 80061d8:	2003      	movs	r0, #3
 80061da:	e0ac      	b.n	8006336 <HAL_RCC_OscConfig+0x652>
      tickstart = HAL_GetTick();
 80061dc:	f7fb fc74 	bl	8001ac8 <HAL_GetTick>
 80061e0:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80061e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061e6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80061ea:	f023 0301 	bic.w	r3, r3, #1
 80061ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80061f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061fa:	f013 0f02 	tst.w	r3, #2
 80061fe:	d008      	beq.n	8006212 <HAL_RCC_OscConfig+0x52e>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006200:	f7fb fc62 	bl	8001ac8 <HAL_GetTick>
 8006204:	1b80      	subs	r0, r0, r6
 8006206:	f241 3388 	movw	r3, #5000	; 0x1388
 800620a:	4298      	cmp	r0, r3
 800620c:	d9f1      	bls.n	80061f2 <HAL_RCC_OscConfig+0x50e>
          return HAL_TIMEOUT;
 800620e:	2003      	movs	r0, #3
 8006210:	e091      	b.n	8006336 <HAL_RCC_OscConfig+0x652>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006212:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006214:	2b00      	cmp	r3, #0
 8006216:	f000 808d 	beq.w	8006334 <HAL_RCC_OscConfig+0x650>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800621a:	2d0c      	cmp	r5, #12
 800621c:	d062      	beq.n	80062e4 <HAL_RCC_OscConfig+0x600>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800621e:	2b02      	cmp	r3, #2
 8006220:	d01f      	beq.n	8006262 <HAL_RCC_OscConfig+0x57e>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006222:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800622c:	601a      	str	r2, [r3, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800622e:	68da      	ldr	r2, [r3, #12]
 8006230:	f022 0203 	bic.w	r2, r2, #3
 8006234:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8006236:	68da      	ldr	r2, [r3, #12]
 8006238:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 800623c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006240:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 8006242:	f7fb fc41 	bl	8001ac8 <HAL_GetTick>
 8006246:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006248:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006252:	d073      	beq.n	800633c <HAL_RCC_OscConfig+0x658>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006254:	f7fb fc38 	bl	8001ac8 <HAL_GetTick>
 8006258:	1b00      	subs	r0, r0, r4
 800625a:	280a      	cmp	r0, #10
 800625c:	d9f4      	bls.n	8006248 <HAL_RCC_OscConfig+0x564>
            return HAL_TIMEOUT;
 800625e:	2003      	movs	r0, #3
 8006260:	e069      	b.n	8006336 <HAL_RCC_OscConfig+0x652>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006262:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006266:	6813      	ldr	r3, [r2, #0]
 8006268:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800626c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800626e:	f7fb fc2b 	bl	8001ac8 <HAL_GetTick>
 8006272:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006274:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800627e:	d12a      	bne.n	80062d6 <HAL_RCC_OscConfig+0x5f2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006280:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006284:	68d3      	ldr	r3, [r2, #12]
 8006286:	4934      	ldr	r1, [pc, #208]	; (8006358 <HAL_RCC_OscConfig+0x674>)
 8006288:	4019      	ands	r1, r3
 800628a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800628c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800628e:	4303      	orrs	r3, r0
 8006290:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006292:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8006296:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006298:	4303      	orrs	r3, r0
 800629a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800629c:	4303      	orrs	r3, r0
 800629e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80062a0:	4303      	orrs	r3, r0
 80062a2:	430b      	orrs	r3, r1
 80062a4:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80062a6:	6813      	ldr	r3, [r2, #0]
 80062a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80062ac:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80062ae:	68d3      	ldr	r3, [r2, #12]
 80062b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062b4:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 80062b6:	f7fb fc07 	bl	8001ac8 <HAL_GetTick>
 80062ba:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80062bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80062c6:	d137      	bne.n	8006338 <HAL_RCC_OscConfig+0x654>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062c8:	f7fb fbfe 	bl	8001ac8 <HAL_GetTick>
 80062cc:	1b00      	subs	r0, r0, r4
 80062ce:	280a      	cmp	r0, #10
 80062d0:	d9f4      	bls.n	80062bc <HAL_RCC_OscConfig+0x5d8>
            return HAL_TIMEOUT;
 80062d2:	2003      	movs	r0, #3
 80062d4:	e02f      	b.n	8006336 <HAL_RCC_OscConfig+0x652>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062d6:	f7fb fbf7 	bl	8001ac8 <HAL_GetTick>
 80062da:	1b40      	subs	r0, r0, r5
 80062dc:	280a      	cmp	r0, #10
 80062de:	d9c9      	bls.n	8006274 <HAL_RCC_OscConfig+0x590>
            return HAL_TIMEOUT;
 80062e0:	2003      	movs	r0, #3
 80062e2:	e028      	b.n	8006336 <HAL_RCC_OscConfig+0x652>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d02b      	beq.n	8006340 <HAL_RCC_OscConfig+0x65c>
        pll_config = RCC->PLLCFGR;
 80062e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062ec:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80062ee:	f003 0103 	and.w	r1, r3, #3
 80062f2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80062f4:	4291      	cmp	r1, r2
 80062f6:	d125      	bne.n	8006344 <HAL_RCC_OscConfig+0x660>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80062f8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80062fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062fe:	428a      	cmp	r2, r1
 8006300:	d122      	bne.n	8006348 <HAL_RCC_OscConfig+0x664>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8006302:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006306:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006308:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800630c:	d11e      	bne.n	800634c <HAL_RCC_OscConfig+0x668>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800630e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8006312:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006314:	4293      	cmp	r3, r2
 8006316:	d11b      	bne.n	8006350 <HAL_RCC_OscConfig+0x66c>
  return HAL_OK;
 8006318:	2000      	movs	r0, #0
 800631a:	e00c      	b.n	8006336 <HAL_RCC_OscConfig+0x652>
    return HAL_ERROR;
 800631c:	2001      	movs	r0, #1
}
 800631e:	4770      	bx	lr
        return HAL_ERROR;
 8006320:	2001      	movs	r0, #1
 8006322:	e008      	b.n	8006336 <HAL_RCC_OscConfig+0x652>
            return HAL_ERROR;
 8006324:	2001      	movs	r0, #1
 8006326:	e006      	b.n	8006336 <HAL_RCC_OscConfig+0x652>
        return HAL_ERROR;
 8006328:	2001      	movs	r0, #1
 800632a:	e004      	b.n	8006336 <HAL_RCC_OscConfig+0x652>
        return HAL_ERROR;
 800632c:	2001      	movs	r0, #1
 800632e:	e002      	b.n	8006336 <HAL_RCC_OscConfig+0x652>
          return HAL_ERROR;
 8006330:	2001      	movs	r0, #1
 8006332:	e000      	b.n	8006336 <HAL_RCC_OscConfig+0x652>
  return HAL_OK;
 8006334:	2000      	movs	r0, #0
}
 8006336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8006338:	2000      	movs	r0, #0
 800633a:	e7fc      	b.n	8006336 <HAL_RCC_OscConfig+0x652>
 800633c:	2000      	movs	r0, #0
 800633e:	e7fa      	b.n	8006336 <HAL_RCC_OscConfig+0x652>
        return HAL_ERROR;
 8006340:	2001      	movs	r0, #1
 8006342:	e7f8      	b.n	8006336 <HAL_RCC_OscConfig+0x652>
          return HAL_ERROR;
 8006344:	2001      	movs	r0, #1
 8006346:	e7f6      	b.n	8006336 <HAL_RCC_OscConfig+0x652>
 8006348:	2001      	movs	r0, #1
 800634a:	e7f4      	b.n	8006336 <HAL_RCC_OscConfig+0x652>
 800634c:	2001      	movs	r0, #1
 800634e:	e7f2      	b.n	8006336 <HAL_RCC_OscConfig+0x652>
 8006350:	2001      	movs	r0, #1
 8006352:	e7f0      	b.n	8006336 <HAL_RCC_OscConfig+0x652>
 8006354:	58000400 	.word	0x58000400
 8006358:	11c1808c 	.word	0x11c1808c

0800635c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800635c:	2800      	cmp	r0, #0
 800635e:	f000 8127 	beq.w	80065b0 <HAL_RCC_ClockConfig+0x254>
{
 8006362:	b570      	push	{r4, r5, r6, lr}
 8006364:	460c      	mov	r4, r1
 8006366:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006368:	4b93      	ldr	r3, [pc, #588]	; (80065b8 <HAL_RCC_ClockConfig+0x25c>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 0307 	and.w	r3, r3, #7
 8006370:	428b      	cmp	r3, r1
 8006372:	d32d      	bcc.n	80063d0 <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006374:	682b      	ldr	r3, [r5, #0]
 8006376:	f013 0f02 	tst.w	r3, #2
 800637a:	d13f      	bne.n	80063fc <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800637c:	682b      	ldr	r3, [r5, #0]
 800637e:	f013 0f20 	tst.w	r3, #32
 8006382:	d153      	bne.n	800642c <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8006384:	682b      	ldr	r3, [r5, #0]
 8006386:	f013 0f40 	tst.w	r3, #64	; 0x40
 800638a:	d16a      	bne.n	8006462 <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800638c:	682b      	ldr	r3, [r5, #0]
 800638e:	f013 0f04 	tst.w	r3, #4
 8006392:	f040 8083 	bne.w	800649c <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006396:	682b      	ldr	r3, [r5, #0]
 8006398:	f013 0f08 	tst.w	r3, #8
 800639c:	f040 8097 	bne.w	80064ce <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063a0:	682b      	ldr	r3, [r5, #0]
 80063a2:	f013 0f01 	tst.w	r3, #1
 80063a6:	f000 80de 	beq.w	8006566 <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063aa:	686b      	ldr	r3, [r5, #4]
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	f000 80a8 	beq.w	8006502 <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80063b2:	2b03      	cmp	r3, #3
 80063b4:	f000 80ad 	beq.w	8006512 <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f040 80b2 	bne.w	8006522 <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80063be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063c2:	6812      	ldr	r2, [r2, #0]
 80063c4:	f012 0f02 	tst.w	r2, #2
 80063c8:	f040 80b1 	bne.w	800652e <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 80063cc:	2001      	movs	r0, #1
 80063ce:	e0ee      	b.n	80065ae <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063d0:	4a79      	ldr	r2, [pc, #484]	; (80065b8 <HAL_RCC_ClockConfig+0x25c>)
 80063d2:	6813      	ldr	r3, [r2, #0]
 80063d4:	f023 0307 	bic.w	r3, r3, #7
 80063d8:	430b      	orrs	r3, r1
 80063da:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80063dc:	f7fb fb74 	bl	8001ac8 <HAL_GetTick>
 80063e0:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063e2:	4b75      	ldr	r3, [pc, #468]	; (80065b8 <HAL_RCC_ClockConfig+0x25c>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 0307 	and.w	r3, r3, #7
 80063ea:	42a3      	cmp	r3, r4
 80063ec:	d0c2      	beq.n	8006374 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80063ee:	f7fb fb6b 	bl	8001ac8 <HAL_GetTick>
 80063f2:	1b80      	subs	r0, r0, r6
 80063f4:	2802      	cmp	r0, #2
 80063f6:	d9f4      	bls.n	80063e2 <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 80063f8:	2003      	movs	r0, #3
 80063fa:	e0d8      	b.n	80065ae <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80063fc:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80063fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006402:	688a      	ldr	r2, [r1, #8]
 8006404:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006408:	4313      	orrs	r3, r2
 800640a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800640c:	f7fb fb5c 	bl	8001ac8 <HAL_GetTick>
 8006410:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8006412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800641c:	d1ae      	bne.n	800637c <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800641e:	f7fb fb53 	bl	8001ac8 <HAL_GetTick>
 8006422:	1b80      	subs	r0, r0, r6
 8006424:	2802      	cmp	r0, #2
 8006426:	d9f4      	bls.n	8006412 <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 8006428:	2003      	movs	r0, #3
 800642a:	e0c0      	b.n	80065ae <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800642c:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800642e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006432:	f8d1 2108 	ldr.w	r2, [r1, #264]	; 0x108
 8006436:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800643a:	4313      	orrs	r3, r2
 800643c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
    tickstart = HAL_GetTick();
 8006440:	f7fb fb42 	bl	8001ac8 <HAL_GetTick>
 8006444:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8006446:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800644a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800644e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006452:	d197      	bne.n	8006384 <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006454:	f7fb fb38 	bl	8001ac8 <HAL_GetTick>
 8006458:	1b80      	subs	r0, r0, r6
 800645a:	2802      	cmp	r0, #2
 800645c:	d9f3      	bls.n	8006446 <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 800645e:	2003      	movs	r0, #3
 8006460:	e0a5      	b.n	80065ae <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8006462:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006464:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006468:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 800646c:	f023 030f 	bic.w	r3, r3, #15
 8006470:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 8006474:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 8006478:	f7fb fb26 	bl	8001ac8 <HAL_GetTick>
 800647c:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800647e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006482:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006486:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800648a:	f47f af7f 	bne.w	800638c <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800648e:	f7fb fb1b 	bl	8001ac8 <HAL_GetTick>
 8006492:	1b80      	subs	r0, r0, r6
 8006494:	2802      	cmp	r0, #2
 8006496:	d9f2      	bls.n	800647e <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 8006498:	2003      	movs	r0, #3
 800649a:	e088      	b.n	80065ae <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800649c:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800649e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064a2:	688a      	ldr	r2, [r1, #8]
 80064a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80064a8:	4313      	orrs	r3, r2
 80064aa:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80064ac:	f7fb fb0c 	bl	8001ac8 <HAL_GetTick>
 80064b0:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80064b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80064bc:	f47f af6b 	bne.w	8006396 <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80064c0:	f7fb fb02 	bl	8001ac8 <HAL_GetTick>
 80064c4:	1b80      	subs	r0, r0, r6
 80064c6:	2802      	cmp	r0, #2
 80064c8:	d9f3      	bls.n	80064b2 <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 80064ca:	2003      	movs	r0, #3
 80064cc:	e06f      	b.n	80065ae <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80064ce:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80064d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064d4:	6893      	ldr	r3, [r2, #8]
 80064d6:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80064da:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80064de:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80064e0:	f7fb faf2 	bl	8001ac8 <HAL_GetTick>
 80064e4:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80064e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80064f0:	f47f af56 	bne.w	80063a0 <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80064f4:	f7fb fae8 	bl	8001ac8 <HAL_GetTick>
 80064f8:	1b80      	subs	r0, r0, r6
 80064fa:	2802      	cmp	r0, #2
 80064fc:	d9f3      	bls.n	80064e6 <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 80064fe:	2003      	movs	r0, #3
 8006500:	e055      	b.n	80065ae <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006502:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006506:	6812      	ldr	r2, [r2, #0]
 8006508:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800650c:	d10f      	bne.n	800652e <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 800650e:	2001      	movs	r0, #1
 8006510:	e04d      	b.n	80065ae <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006512:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006516:	6812      	ldr	r2, [r2, #0]
 8006518:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800651c:	d107      	bne.n	800652e <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 800651e:	2001      	movs	r0, #1
 8006520:	e045      	b.n	80065ae <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006522:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006526:	6812      	ldr	r2, [r2, #0]
 8006528:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800652c:	d042      	beq.n	80065b4 <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800652e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006532:	688a      	ldr	r2, [r1, #8]
 8006534:	f022 0203 	bic.w	r2, r2, #3
 8006538:	4313      	orrs	r3, r2
 800653a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800653c:	f7fb fac4 	bl	8001ac8 <HAL_GetTick>
 8006540:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800654c:	686a      	ldr	r2, [r5, #4]
 800654e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006552:	d008      	beq.n	8006566 <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006554:	f7fb fab8 	bl	8001ac8 <HAL_GetTick>
 8006558:	1b80      	subs	r0, r0, r6
 800655a:	f241 3388 	movw	r3, #5000	; 0x1388
 800655e:	4298      	cmp	r0, r3
 8006560:	d9ef      	bls.n	8006542 <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 8006562:	2003      	movs	r0, #3
 8006564:	e023      	b.n	80065ae <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006566:	4b14      	ldr	r3, [pc, #80]	; (80065b8 <HAL_RCC_ClockConfig+0x25c>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 0307 	and.w	r3, r3, #7
 800656e:	42a3      	cmp	r3, r4
 8006570:	d915      	bls.n	800659e <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006572:	4a11      	ldr	r2, [pc, #68]	; (80065b8 <HAL_RCC_ClockConfig+0x25c>)
 8006574:	6813      	ldr	r3, [r2, #0]
 8006576:	f023 0307 	bic.w	r3, r3, #7
 800657a:	4323      	orrs	r3, r4
 800657c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800657e:	f7fb faa3 	bl	8001ac8 <HAL_GetTick>
 8006582:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006584:	4b0c      	ldr	r3, [pc, #48]	; (80065b8 <HAL_RCC_ClockConfig+0x25c>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 0307 	and.w	r3, r3, #7
 800658c:	42a3      	cmp	r3, r4
 800658e:	d006      	beq.n	800659e <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006590:	f7fb fa9a 	bl	8001ac8 <HAL_GetTick>
 8006594:	1b40      	subs	r0, r0, r5
 8006596:	2802      	cmp	r0, #2
 8006598:	d9f4      	bls.n	8006584 <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 800659a:	2003      	movs	r0, #3
 800659c:	e007      	b.n	80065ae <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800659e:	f7ff fb91 	bl	8005cc4 <HAL_RCC_GetHCLKFreq>
 80065a2:	4b06      	ldr	r3, [pc, #24]	; (80065bc <HAL_RCC_ClockConfig+0x260>)
 80065a4:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 80065a6:	4b06      	ldr	r3, [pc, #24]	; (80065c0 <HAL_RCC_ClockConfig+0x264>)
 80065a8:	6818      	ldr	r0, [r3, #0]
 80065aa:	f7fb fa8b 	bl	8001ac4 <HAL_InitTick>
}
 80065ae:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80065b0:	2001      	movs	r0, #1
}
 80065b2:	4770      	bx	lr
        return HAL_ERROR;
 80065b4:	2001      	movs	r0, #1
 80065b6:	e7fa      	b.n	80065ae <HAL_RCC_ClockConfig+0x252>
 80065b8:	58004000 	.word	0x58004000
 80065bc:	20000070 	.word	0x20000070
 80065c0:	20000074 	.word	0x20000074

080065c4 <HAL_RCC_GetPCLK1Freq>:
{
 80065c4:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80065c6:	f7ff fb7d 	bl	8005cc4 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80065ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80065d4:	4a02      	ldr	r2, [pc, #8]	; (80065e0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80065d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80065da:	40d8      	lsrs	r0, r3
 80065dc:	bd08      	pop	{r3, pc}
 80065de:	bf00      	nop
 80065e0:	08014664 	.word	0x08014664

080065e4 <HAL_RCC_GetPCLK2Freq>:
{
 80065e4:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80065e6:	f7ff fb6d 	bl	8005cc4 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80065ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80065f4:	4a02      	ldr	r2, [pc, #8]	; (8006600 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80065f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80065fa:	40d8      	lsrs	r0, r3
 80065fc:	bd08      	pop	{r3, pc}
 80065fe:	bf00      	nop
 8006600:	08014664 	.word	0x08014664

08006604 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006604:	b570      	push	{r4, r5, r6, lr}
 8006606:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006608:	6803      	ldr	r3, [r0, #0]
 800660a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800660e:	f040 80ab 	bne.w	8006768 <HAL_RCCEx_PeriphCLKConfig+0x164>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006612:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006614:	6823      	ldr	r3, [r4, #0]
 8006616:	f013 0f01 	tst.w	r3, #1
 800661a:	d00a      	beq.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800661c:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800661e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006622:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8006626:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 800662a:	b292      	uxth	r2, r2
 800662c:	4313      	orrs	r3, r2
 800662e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006632:	6823      	ldr	r3, [r4, #0]
 8006634:	f013 0f02 	tst.w	r3, #2
 8006638:	d00a      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800663a:	68a2      	ldr	r2, [r4, #8]
 800663c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006640:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8006644:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8006648:	b292      	uxth	r2, r2
 800664a:	4313      	orrs	r3, r2
 800664c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006650:	6823      	ldr	r3, [r4, #0]
 8006652:	f013 0f20 	tst.w	r3, #32
 8006656:	d009      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006658:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800665a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800665e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006662:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006666:	4313      	orrs	r3, r2
 8006668:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800666c:	6823      	ldr	r3, [r4, #0]
 800666e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006672:	d00c      	beq.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006674:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006676:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800667a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800667e:	0c02      	lsrs	r2, r0, #16
 8006680:	0412      	lsls	r2, r2, #16
 8006682:	ea23 0302 	bic.w	r3, r3, r2
 8006686:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800668a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800668e:	6823      	ldr	r3, [r4, #0]
 8006690:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006694:	d00c      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006696:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006698:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800669c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80066a0:	0c02      	lsrs	r2, r0, #16
 80066a2:	0412      	lsls	r2, r2, #16
 80066a4:	ea23 0302 	bic.w	r3, r3, r2
 80066a8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80066ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80066b0:	6823      	ldr	r3, [r4, #0]
 80066b2:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80066b6:	d00c      	beq.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80066b8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80066ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066be:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80066c2:	0c02      	lsrs	r2, r0, #16
 80066c4:	0412      	lsls	r2, r2, #16
 80066c6:	ea23 0302 	bic.w	r3, r3, r2
 80066ca:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80066ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80066d2:	6823      	ldr	r3, [r4, #0]
 80066d4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80066d8:	f040 809e 	bne.w	8006818 <HAL_RCCEx_PeriphCLKConfig+0x214>
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80066dc:	6823      	ldr	r3, [r4, #0]
 80066de:	f013 0f80 	tst.w	r3, #128	; 0x80
 80066e2:	f040 80aa 	bne.w	800683a <HAL_RCCEx_PeriphCLKConfig+0x236>
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80066e6:	6823      	ldr	r3, [r4, #0]
 80066e8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80066ec:	f040 80b6 	bne.w	800685c <HAL_RCCEx_PeriphCLKConfig+0x258>
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80066f0:	6823      	ldr	r3, [r4, #0]
 80066f2:	f013 0f10 	tst.w	r3, #16
 80066f6:	d00e      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80066f8:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80066fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066fe:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006702:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006706:	4313      	orrs	r3, r2
 8006708:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800670c:	68e3      	ldr	r3, [r4, #12]
 800670e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006712:	f000 80b4 	beq.w	800687e <HAL_RCCEx_PeriphCLKConfig+0x27a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006716:	6823      	ldr	r3, [r4, #0]
 8006718:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800671c:	d00f      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800671e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006720:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006724:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006728:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 800672c:	4313      	orrs	r3, r2
 800672e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006732:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006734:	b91b      	cbnz	r3, 800673e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006736:	68cb      	ldr	r3, [r1, #12]
 8006738:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800673c:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800673e:	6823      	ldr	r3, [r4, #0]
 8006740:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006744:	d00e      	beq.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006746:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006748:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800674c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006750:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006754:	4313      	orrs	r3, r2
 8006756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800675a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800675c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006760:	f000 8092 	beq.w	8006888 <HAL_RCCEx_PeriphCLKConfig+0x284>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 8006764:	4628      	mov	r0, r5
 8006766:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 8006768:	f7ff f922 	bl	80059b0 <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 800676c:	f7fb f9ac 	bl	8001ac8 <HAL_GetTick>
 8006770:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006772:	4b48      	ldr	r3, [pc, #288]	; (8006894 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f413 7f80 	tst.w	r3, #256	; 0x100
 800677a:	d106      	bne.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x186>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800677c:	f7fb f9a4 	bl	8001ac8 <HAL_GetTick>
 8006780:	1b40      	subs	r0, r0, r5
 8006782:	2802      	cmp	r0, #2
 8006784:	d9f5      	bls.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x16e>
        ret = HAL_TIMEOUT;
 8006786:	2503      	movs	r5, #3
 8006788:	e000      	b.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x188>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 800678a:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 800678c:	2d00      	cmp	r5, #0
 800678e:	f47f af41 	bne.w	8006614 <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800679a:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800679e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d024      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80067a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067a8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80067ac:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80067b0:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80067b4:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80067b8:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80067bc:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80067c0:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80067c4:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80067c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80067cc:	f012 0f02 	tst.w	r2, #2
 80067d0:	d10f      	bne.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
      if (ret == HAL_OK)
 80067d2:	2d00      	cmp	r5, #0
 80067d4:	f47f af1e 	bne.w	8006614 <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80067da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067de:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80067e2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80067e6:	4313      	orrs	r3, r2
 80067e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80067ec:	e712      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x10>
  uint32_t tmpregister = 0;
 80067ee:	2200      	movs	r2, #0
 80067f0:	e7ec      	b.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        tickstart = HAL_GetTick();
 80067f2:	f7fb f969 	bl	8001ac8 <HAL_GetTick>
 80067f6:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80067f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006800:	f013 0f02 	tst.w	r3, #2
 8006804:	d1e5      	bne.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006806:	f7fb f95f 	bl	8001ac8 <HAL_GetTick>
 800680a:	1b80      	subs	r0, r0, r6
 800680c:	f241 3388 	movw	r3, #5000	; 0x1388
 8006810:	4298      	cmp	r0, r3
 8006812:	d9f1      	bls.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
            ret = HAL_TIMEOUT;
 8006814:	2503      	movs	r5, #3
 8006816:	e7dc      	b.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006818:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800681a:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800681e:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8006822:	0919      	lsrs	r1, r3, #4
 8006824:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8006828:	ea22 0201 	bic.w	r2, r2, r1
 800682c:	011b      	lsls	r3, r3, #4
 800682e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006832:	4313      	orrs	r3, r2
 8006834:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8006838:	e750      	b.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800683a:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800683c:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8006840:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8006844:	0919      	lsrs	r1, r3, #4
 8006846:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 800684a:	ea22 0201 	bic.w	r2, r2, r1
 800684e:	011b      	lsls	r3, r3, #4
 8006850:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006854:	4313      	orrs	r3, r2
 8006856:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 800685a:	e744      	b.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800685c:	69e3      	ldr	r3, [r4, #28]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800685e:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8006862:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8006866:	0919      	lsrs	r1, r3, #4
 8006868:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 800686c:	ea22 0201 	bic.w	r2, r2, r1
 8006870:	011b      	lsls	r3, r3, #4
 8006872:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006876:	4313      	orrs	r3, r2
 8006878:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 800687c:	e738      	b.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 800687e:	68cb      	ldr	r3, [r1, #12]
 8006880:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006884:	60cb      	str	r3, [r1, #12]
 8006886:	e746      	b.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006888:	68cb      	ldr	r3, [r1, #12]
 800688a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800688e:	60cb      	str	r3, [r1, #12]
 8006890:	e768      	b.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006892:	bf00      	nop
 8006894:	58000400 	.word	0x58000400

08006898 <HAL_RTC_DeactivateAlarm>:
{
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006898:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800689c:	2b01      	cmp	r3, #1
 800689e:	d036      	beq.n	800690e <HAL_RTC_DeactivateAlarm+0x76>
 80068a0:	2301      	movs	r3, #1
 80068a2:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80068a6:	2302      	movs	r3, #2
 80068a8:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068ac:	4b19      	ldr	r3, [pc, #100]	; (8006914 <HAL_RTC_DeactivateAlarm+0x7c>)
 80068ae:	22ca      	movs	r2, #202	; 0xca
 80068b0:	625a      	str	r2, [r3, #36]	; 0x24
 80068b2:	2253      	movs	r2, #83	; 0x53
 80068b4:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 80068b6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80068ba:	d019      	beq.n	80068f0 <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80068bc:	4b15      	ldr	r3, [pc, #84]	; (8006914 <HAL_RTC_DeactivateAlarm+0x7c>)
 80068be:	699a      	ldr	r2, [r3, #24]
 80068c0:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 80068c4:	619a      	str	r2, [r3, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 80068c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80068c8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80068cc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80068ce:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80068d0:	f022 0202 	bic.w	r2, r2, #2
 80068d4:	6302      	str	r2, [r0, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80068d6:	2202      	movs	r2, #2
 80068d8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068da:	4b0e      	ldr	r3, [pc, #56]	; (8006914 <HAL_RTC_DeactivateAlarm+0x7c>)
 80068dc:	22ff      	movs	r2, #255	; 0xff
 80068de:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80068e0:	2301      	movs	r3, #1
 80068e2:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80068e6:	2300      	movs	r3, #0
 80068e8:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 80068ec:	4618      	mov	r0, r3
 80068ee:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80068f0:	699a      	ldr	r2, [r3, #24]
 80068f2:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80068f6:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 80068f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068fa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80068fe:	645a      	str	r2, [r3, #68]	; 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006900:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8006902:	f022 0201 	bic.w	r2, r2, #1
 8006906:	6302      	str	r2, [r0, #48]	; 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006908:	2201      	movs	r2, #1
 800690a:	65da      	str	r2, [r3, #92]	; 0x5c
 800690c:	e7e5      	b.n	80068da <HAL_RTC_DeactivateAlarm+0x42>
  __HAL_LOCK(hrtc);
 800690e:	2002      	movs	r0, #2
}
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	40002800 	.word	0x40002800

08006918 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006918:	b538      	push	{r3, r4, r5, lr}
 800691a:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 800691c:	4b0d      	ldr	r3, [pc, #52]	; (8006954 <HAL_RTC_AlarmIRQHandler+0x3c>)
 800691e:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8006920:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006922:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8006924:	f015 0f01 	tst.w	r5, #1
 8006928:	d106      	bne.n	8006938 <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 800692a:	f015 0f02 	tst.w	r5, #2
 800692e:	d109      	bne.n	8006944 <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006930:	2301      	movs	r3, #1
 8006932:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8006936:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006938:	4b06      	ldr	r3, [pc, #24]	; (8006954 <HAL_RTC_AlarmIRQHandler+0x3c>)
 800693a:	2201      	movs	r2, #1
 800693c:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 800693e:	f7fb fbe1 	bl	8002104 <HAL_RTC_AlarmAEventCallback>
 8006942:	e7f2      	b.n	800692a <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006944:	4b03      	ldr	r3, [pc, #12]	; (8006954 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8006946:	2202      	movs	r2, #2
 8006948:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 800694a:	4620      	mov	r0, r4
 800694c:	f000 f9e6 	bl	8006d1c <HAL_RTCEx_AlarmBEventCallback>
 8006950:	e7ee      	b.n	8006930 <HAL_RTC_AlarmIRQHandler+0x18>
 8006952:	bf00      	nop
 8006954:	40002800 	.word	0x40002800

08006958 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006958:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800695a:	4a0b      	ldr	r2, [pc, #44]	; (8006988 <HAL_RTC_WaitForSynchro+0x30>)
 800695c:	68d3      	ldr	r3, [r2, #12]
 800695e:	f023 0320 	bic.w	r3, r3, #32
 8006962:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8006964:	f7fb f8b0 	bl	8001ac8 <HAL_GetTick>
 8006968:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800696a:	4b07      	ldr	r3, [pc, #28]	; (8006988 <HAL_RTC_WaitForSynchro+0x30>)
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	f013 0f20 	tst.w	r3, #32
 8006972:	d107      	bne.n	8006984 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006974:	f7fb f8a8 	bl	8001ac8 <HAL_GetTick>
 8006978:	1b00      	subs	r0, r0, r4
 800697a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800697e:	d9f4      	bls.n	800696a <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 8006980:	2003      	movs	r0, #3
 8006982:	e000      	b.n	8006986 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8006984:	2000      	movs	r0, #0
}
 8006986:	bd10      	pop	{r4, pc}
 8006988:	40002800 	.word	0x40002800

0800698c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800698c:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800698e:	4b11      	ldr	r3, [pc, #68]	; (80069d4 <RTC_EnterInitMode+0x48>)
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006996:	d002      	beq.n	800699e <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8006998:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 800699a:	4620      	mov	r0, r4
 800699c:	bd70      	pop	{r4, r5, r6, pc}
 800699e:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80069a0:	4a0c      	ldr	r2, [pc, #48]	; (80069d4 <RTC_EnterInitMode+0x48>)
 80069a2:	68d3      	ldr	r3, [r2, #12]
 80069a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069a8:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 80069aa:	f7fb f88d 	bl	8001ac8 <HAL_GetTick>
 80069ae:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 80069b0:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80069b2:	4b08      	ldr	r3, [pc, #32]	; (80069d4 <RTC_EnterInitMode+0x48>)
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80069ba:	d1ee      	bne.n	800699a <RTC_EnterInitMode+0xe>
 80069bc:	2c03      	cmp	r4, #3
 80069be:	d0ec      	beq.n	800699a <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80069c0:	f7fb f882 	bl	8001ac8 <HAL_GetTick>
 80069c4:	1b43      	subs	r3, r0, r5
 80069c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069ca:	d9f2      	bls.n	80069b2 <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80069cc:	2403      	movs	r4, #3
 80069ce:	f886 402d 	strb.w	r4, [r6, #45]	; 0x2d
 80069d2:	e7ee      	b.n	80069b2 <RTC_EnterInitMode+0x26>
 80069d4:	40002800 	.word	0x40002800

080069d8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80069d8:	b510      	push	{r4, lr}
 80069da:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80069dc:	4b11      	ldr	r3, [pc, #68]	; (8006a24 <RTC_ExitInitMode+0x4c>)
 80069de:	68da      	ldr	r2, [r3, #12]
 80069e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069e4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80069e6:	699b      	ldr	r3, [r3, #24]
 80069e8:	f013 0f20 	tst.w	r3, #32
 80069ec:	d107      	bne.n	80069fe <RTC_ExitInitMode+0x26>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80069ee:	f7ff ffb3 	bl	8006958 <HAL_RTC_WaitForSynchro>
 80069f2:	4603      	mov	r3, r0
 80069f4:	b1a0      	cbz	r0, 8006a20 <RTC_ExitInitMode+0x48>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80069f6:	2303      	movs	r3, #3
 80069f8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80069fc:	e010      	b.n	8006a20 <RTC_ExitInitMode+0x48>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80069fe:	4a09      	ldr	r2, [pc, #36]	; (8006a24 <RTC_ExitInitMode+0x4c>)
 8006a00:	6993      	ldr	r3, [r2, #24]
 8006a02:	f023 0320 	bic.w	r3, r3, #32
 8006a06:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006a08:	f7ff ffa6 	bl	8006958 <HAL_RTC_WaitForSynchro>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	b110      	cbz	r0, 8006a16 <RTC_ExitInitMode+0x3e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006a10:	2303      	movs	r3, #3
 8006a12:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006a16:	4903      	ldr	r1, [pc, #12]	; (8006a24 <RTC_ExitInitMode+0x4c>)
 8006a18:	698a      	ldr	r2, [r1, #24]
 8006a1a:	f042 0220 	orr.w	r2, r2, #32
 8006a1e:	618a      	str	r2, [r1, #24]
  }

  return status;
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	bd10      	pop	{r4, pc}
 8006a24:	40002800 	.word	0x40002800

08006a28 <HAL_RTC_Init>:
  if (hrtc != NULL)
 8006a28:	2800      	cmp	r0, #0
 8006a2a:	d04a      	beq.n	8006ac2 <HAL_RTC_Init+0x9a>
{
 8006a2c:	b538      	push	{r3, r4, r5, lr}
 8006a2e:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006a30:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8006a34:	b19b      	cbz	r3, 8006a5e <HAL_RTC_Init+0x36>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006a36:	2302      	movs	r3, #2
 8006a38:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a3c:	4b22      	ldr	r3, [pc, #136]	; (8006ac8 <HAL_RTC_Init+0xa0>)
 8006a3e:	22ca      	movs	r2, #202	; 0xca
 8006a40:	625a      	str	r2, [r3, #36]	; 0x24
 8006a42:	2253      	movs	r2, #83	; 0x53
 8006a44:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 8006a46:	4620      	mov	r0, r4
 8006a48:	f7ff ffa0 	bl	800698c <RTC_EnterInitMode>
    if (status == HAL_OK)
 8006a4c:	b160      	cbz	r0, 8006a68 <HAL_RTC_Init+0x40>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a4e:	4b1e      	ldr	r3, [pc, #120]	; (8006ac8 <HAL_RTC_Init+0xa0>)
 8006a50:	22ff      	movs	r2, #255	; 0xff
 8006a52:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8006a54:	b910      	cbnz	r0, 8006a5c <HAL_RTC_Init+0x34>
      hrtc->State = HAL_RTC_STATE_READY;
 8006a56:	2301      	movs	r3, #1
 8006a58:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8006a5c:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 8006a5e:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
      HAL_RTC_MspInit(hrtc);
 8006a62:	f7fa fe93 	bl	800178c <HAL_RTC_MspInit>
 8006a66:	e7e6      	b.n	8006a36 <HAL_RTC_Init+0xe>
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006a68:	4b17      	ldr	r3, [pc, #92]	; (8006ac8 <HAL_RTC_Init+0xa0>)
 8006a6a:	699a      	ldr	r2, [r3, #24]
 8006a6c:	f022 628e 	bic.w	r2, r2, #74448896	; 0x4700000
 8006a70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a74:	619a      	str	r2, [r3, #24]
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006a76:	6999      	ldr	r1, [r3, #24]
 8006a78:	6862      	ldr	r2, [r4, #4]
 8006a7a:	6920      	ldr	r0, [r4, #16]
 8006a7c:	4302      	orrs	r2, r0
 8006a7e:	69a0      	ldr	r0, [r4, #24]
 8006a80:	4302      	orrs	r2, r0
 8006a82:	430a      	orrs	r2, r1
 8006a84:	619a      	str	r2, [r3, #24]
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006a86:	68e2      	ldr	r2, [r4, #12]
 8006a88:	68a1      	ldr	r1, [r4, #8]
 8006a8a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006a8e:	611a      	str	r2, [r3, #16]
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8006a90:	68da      	ldr	r2, [r3, #12]
 8006a92:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8006a96:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006a98:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006a9a:	4301      	orrs	r1, r0
 8006a9c:	430a      	orrs	r2, r1
 8006a9e:	60da      	str	r2, [r3, #12]
      status = RTC_ExitInitMode(hrtc);
 8006aa0:	4620      	mov	r0, r4
 8006aa2:	f7ff ff99 	bl	80069d8 <RTC_ExitInitMode>
      if (status == HAL_OK)
 8006aa6:	2800      	cmp	r0, #0
 8006aa8:	d1d1      	bne.n	8006a4e <HAL_RTC_Init+0x26>
        MODIFY_REG(RTC->CR, \
 8006aaa:	4907      	ldr	r1, [pc, #28]	; (8006ac8 <HAL_RTC_Init+0xa0>)
 8006aac:	698b      	ldr	r3, [r1, #24]
 8006aae:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8006ab2:	6a22      	ldr	r2, [r4, #32]
 8006ab4:	69e5      	ldr	r5, [r4, #28]
 8006ab6:	432a      	orrs	r2, r5
 8006ab8:	6965      	ldr	r5, [r4, #20]
 8006aba:	432a      	orrs	r2, r5
 8006abc:	4313      	orrs	r3, r2
 8006abe:	618b      	str	r3, [r1, #24]
 8006ac0:	e7c5      	b.n	8006a4e <HAL_RTC_Init+0x26>
  HAL_StatusTypeDef status = HAL_ERROR;
 8006ac2:	2001      	movs	r0, #1
}
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop
 8006ac8:	40002800 	.word	0x40002800

08006acc <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8006acc:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 8006ace:	e002      	b.n	8006ad6 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8006ad0:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 8006ad2:	380a      	subs	r0, #10
 8006ad4:	b2c0      	uxtb	r0, r0
  while (tmp_Value >= 10U)
 8006ad6:	2809      	cmp	r0, #9
 8006ad8:	d8fa      	bhi.n	8006ad0 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8006ada:	011b      	lsls	r3, r3, #4
 8006adc:	b2db      	uxtb	r3, r3
}
 8006ade:	4318      	orrs	r0, r3
 8006ae0:	4770      	bx	lr
	...

08006ae4 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 8006ae4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	f000 80b0 	beq.w	8006c4e <HAL_RTC_SetAlarm_IT+0x16a>
{
 8006aee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006af2:	4605      	mov	r5, r0
 8006af4:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 8006af6:	2301      	movs	r3, #1
 8006af8:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006afc:	2302      	movs	r3, #2
 8006afe:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8006b02:	4b54      	ldr	r3, [pc, #336]	; (8006c54 <HAL_RTC_SetAlarm_IT+0x170>)
 8006b04:	68de      	ldr	r6, [r3, #12]
 8006b06:	f406 7640 	and.w	r6, r6, #768	; 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 8006b0a:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8006b0e:	d043      	beq.n	8006b98 <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 8006b10:	bb12      	cbnz	r2, 8006b58 <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006b12:	699b      	ldr	r3, [r3, #24]
 8006b14:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006b18:	d101      	bne.n	8006b1e <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8006b1e:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006b22:	7820      	ldrb	r0, [r4, #0]
 8006b24:	f7ff ffd2 	bl	8006acc <RTC_ByteToBcd2>
 8006b28:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006b2a:	7860      	ldrb	r0, [r4, #1]
 8006b2c:	f7ff ffce 	bl	8006acc <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006b30:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006b34:	78a0      	ldrb	r0, [r4, #2]
 8006b36:	f7ff ffc9 	bl	8006acc <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006b3a:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006b3c:	78e0      	ldrb	r0, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006b3e:	ea47 5780 	orr.w	r7, r7, r0, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006b42:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 8006b46:	f7ff ffc1 	bl	8006acc <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006b4a:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006b4e:	6a27      	ldr	r7, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006b50:	4338      	orrs	r0, r7
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006b52:	ea48 0000 	orr.w	r0, r8, r0
 8006b56:	e020      	b.n	8006b9a <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8006b58:	6948      	ldr	r0, [r1, #20]
 8006b5a:	f1b0 3f80 	cmp.w	r0, #2155905152	; 0x80808080
 8006b5e:	d009      	beq.n	8006b74 <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8006b60:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8006b64:	d006      	beq.n	8006b74 <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006b66:	4b3b      	ldr	r3, [pc, #236]	; (8006c54 <HAL_RTC_SetAlarm_IT+0x170>)
 8006b68:	699b      	ldr	r3, [r3, #24]
 8006b6a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006b6e:	d101      	bne.n	8006b74 <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006b70:	2300      	movs	r3, #0
 8006b72:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006b74:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006b76:	7863      	ldrb	r3, [r4, #1]
 8006b78:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006b7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006b7e:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006b80:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006b82:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006b84:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006b88:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006b8c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006b90:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006b92:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006b94:	4318      	orrs	r0, r3
 8006b96:	e000      	b.n	8006b9a <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 8006b98:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b9a:	4b2e      	ldr	r3, [pc, #184]	; (8006c54 <HAL_RTC_SetAlarm_IT+0x170>)
 8006b9c:	22ca      	movs	r2, #202	; 0xca
 8006b9e:	625a      	str	r2, [r3, #36]	; 0x24
 8006ba0:	2253      	movs	r2, #83	; 0x53
 8006ba2:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006ba4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006ba6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006baa:	d02a      	beq.n	8006c02 <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006bac:	4b29      	ldr	r3, [pc, #164]	; (8006c54 <HAL_RTC_SetAlarm_IT+0x170>)
 8006bae:	699a      	ldr	r2, [r3, #24]
 8006bb0:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 8006bb4:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006bb6:	2202      	movs	r2, #2
 8006bb8:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8006bba:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8006bbe:	d040      	beq.n	8006c42 <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8006bc0:	4b24      	ldr	r3, [pc, #144]	; (8006c54 <HAL_RTC_SetAlarm_IT+0x170>)
 8006bc2:	6498      	str	r0, [r3, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8006bc4:	69a2      	ldr	r2, [r4, #24]
 8006bc6:	64da      	str	r2, [r3, #76]	; 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8006bc8:	6862      	ldr	r2, [r4, #4]
 8006bca:	4b22      	ldr	r3, [pc, #136]	; (8006c54 <HAL_RTC_SetAlarm_IT+0x170>)
 8006bcc:	675a      	str	r2, [r3, #116]	; 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006bce:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8006bd0:	f042 0202 	orr.w	r2, r2, #2
 8006bd4:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006bd6:	699a      	ldr	r2, [r3, #24]
 8006bd8:	f442 5208 	orr.w	r2, r2, #8704	; 0x2200
 8006bdc:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006bde:	4a1e      	ldr	r2, [pc, #120]	; (8006c58 <HAL_RTC_SetAlarm_IT+0x174>)
 8006be0:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8006be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006be8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006bec:	4b19      	ldr	r3, [pc, #100]	; (8006c54 <HAL_RTC_SetAlarm_IT+0x170>)
 8006bee:	22ff      	movs	r2, #255	; 0xff
 8006bf0:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  __HAL_UNLOCK(hrtc);
 8006bf8:	2000      	movs	r0, #0
 8006bfa:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
}
 8006bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006c02:	4b14      	ldr	r3, [pc, #80]	; (8006c54 <HAL_RTC_SetAlarm_IT+0x170>)
 8006c04:	699a      	ldr	r2, [r3, #24]
 8006c06:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8006c0a:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8006c10:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8006c14:	d00f      	beq.n	8006c36 <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8006c16:	4b0f      	ldr	r3, [pc, #60]	; (8006c54 <HAL_RTC_SetAlarm_IT+0x170>)
 8006c18:	6418      	str	r0, [r3, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8006c1a:	69a2      	ldr	r2, [r4, #24]
 8006c1c:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8006c1e:	6862      	ldr	r2, [r4, #4]
 8006c20:	4b0c      	ldr	r3, [pc, #48]	; (8006c54 <HAL_RTC_SetAlarm_IT+0x170>)
 8006c22:	671a      	str	r2, [r3, #112]	; 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006c24:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8006c26:	f042 0201 	orr.w	r2, r2, #1
 8006c2a:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006c2c:	699a      	ldr	r2, [r3, #24]
 8006c2e:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
 8006c32:	619a      	str	r2, [r3, #24]
 8006c34:	e7d3      	b.n	8006bde <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8006c36:	69a3      	ldr	r3, [r4, #24]
 8006c38:	69e2      	ldr	r2, [r4, #28]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	4a05      	ldr	r2, [pc, #20]	; (8006c54 <HAL_RTC_SetAlarm_IT+0x170>)
 8006c3e:	6453      	str	r3, [r2, #68]	; 0x44
 8006c40:	e7ed      	b.n	8006c1e <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8006c42:	69a3      	ldr	r3, [r4, #24]
 8006c44:	69e2      	ldr	r2, [r4, #28]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	4a02      	ldr	r2, [pc, #8]	; (8006c54 <HAL_RTC_SetAlarm_IT+0x170>)
 8006c4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c4c:	e7bc      	b.n	8006bc8 <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 8006c4e:	2002      	movs	r0, #2
}
 8006c50:	4770      	bx	lr
 8006c52:	bf00      	nop
 8006c54:	40002800 	.word	0x40002800
 8006c58:	58000800 	.word	0x58000800

08006c5c <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006c5c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d017      	beq.n	8006c94 <HAL_RTCEx_EnableBypassShadow+0x38>
 8006c64:	2101      	movs	r1, #1
 8006c66:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c6a:	2302      	movs	r3, #2
 8006c6c:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c70:	4b09      	ldr	r3, [pc, #36]	; (8006c98 <HAL_RTCEx_EnableBypassShadow+0x3c>)
 8006c72:	22ca      	movs	r2, #202	; 0xca
 8006c74:	625a      	str	r2, [r3, #36]	; 0x24
 8006c76:	2253      	movs	r2, #83	; 0x53
 8006c78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006c7a:	699a      	ldr	r2, [r3, #24]
 8006c7c:	f042 0220 	orr.w	r2, r2, #32
 8006c80:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c82:	22ff      	movs	r2, #255	; 0xff
 8006c84:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006c86:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8006c90:	4618      	mov	r0, r3
 8006c92:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8006c94:	2002      	movs	r0, #2
}
 8006c96:	4770      	bx	lr
 8006c98:	40002800 	.word	0x40002800

08006c9c <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006c9c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d020      	beq.n	8006ce6 <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 8006ca4:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 8006ca6:	2101      	movs	r1, #1
 8006ca8:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006cac:	2302      	movs	r3, #2
 8006cae:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006cb2:	4b0e      	ldr	r3, [pc, #56]	; (8006cec <HAL_RTCEx_SetSSRU_IT+0x50>)
 8006cb4:	22ca      	movs	r2, #202	; 0xca
 8006cb6:	625a      	str	r2, [r3, #36]	; 0x24
 8006cb8:	2253      	movs	r2, #83	; 0x53
 8006cba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8006cbc:	699a      	ldr	r2, [r3, #24]
 8006cbe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006cc2:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8006cc4:	4c0a      	ldr	r4, [pc, #40]	; (8006cf0 <HAL_RTCEx_SetSSRU_IT+0x54>)
 8006cc6:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8006cca:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006cce:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006cd2:	22ff      	movs	r2, #255	; 0xff
 8006cd4:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006cd6:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006cda:	2300      	movs	r3, #0
 8006cdc:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8006ce0:	4618      	mov	r0, r3
}
 8006ce2:	bc10      	pop	{r4}
 8006ce4:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8006ce6:	2002      	movs	r0, #2
}
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	40002800 	.word	0x40002800
 8006cf0:	58000800 	.word	0x58000800

08006cf4 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006cf4:	b510      	push	{r4, lr}
 8006cf6:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8006cf8:	4b07      	ldr	r3, [pc, #28]	; (8006d18 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8006cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cfc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006d00:	d103      	bne.n	8006d0a <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006d02:	2301      	movs	r3, #1
 8006d04:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8006d08:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 8006d0a:	4b03      	ldr	r3, [pc, #12]	; (8006d18 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8006d0c:	2240      	movs	r2, #64	; 0x40
 8006d0e:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8006d10:	f7fb f9fc 	bl	800210c <HAL_RTCEx_SSRUEventCallback>
 8006d14:	e7f5      	b.n	8006d02 <HAL_RTCEx_SSRUIRQHandler+0xe>
 8006d16:	bf00      	nop
 8006d18:	40002800 	.word	0x40002800

08006d1c <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006d1c:	4770      	bx	lr

08006d1e <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8006d1e:	0089      	lsls	r1, r1, #2
 8006d20:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8006d24:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006d28:	600a      	str	r2, [r1, #0]
}
 8006d2a:	4770      	bx	lr

08006d2c <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8006d2c:	0089      	lsls	r1, r1, #2
 8006d2e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8006d32:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006d36:	6808      	ldr	r0, [r1, #0]
}
 8006d38:	4770      	bx	lr
	...

08006d3c <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8006d3c:	4b07      	ldr	r3, [pc, #28]	; (8006d5c <SUBGHZSPI_Init+0x20>)
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d44:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8006d46:	f440 7041 	orr.w	r0, r0, #772	; 0x304
 8006d4a:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8006d4c:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8006d50:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d58:	601a      	str	r2, [r3, #0]
}
 8006d5a:	4770      	bx	lr
 8006d5c:	58010000 	.word	0x58010000

08006d60 <HAL_SUBGHZ_Init>:
{
 8006d60:	b530      	push	{r4, r5, lr}
 8006d62:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 8006d64:	2800      	cmp	r0, #0
 8006d66:	d04e      	beq.n	8006e06 <HAL_SUBGHZ_Init+0xa6>
 8006d68:	4604      	mov	r4, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8006d6a:	7983      	ldrb	r3, [r0, #6]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d03b      	beq.n	8006de8 <HAL_SUBGHZ_Init+0x88>
  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006d70:	2302      	movs	r3, #2
 8006d72:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8006d74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d78:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8006d7c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d80:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006d84:	4b21      	ldr	r3, [pc, #132]	; (8006e0c <HAL_SUBGHZ_Init+0xac>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006d8c:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006d90:	2264      	movs	r2, #100	; 0x64
 8006d92:	fb02 f303 	mul.w	r3, r2, r3
 8006d96:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 8006d98:	9b01      	ldr	r3, [sp, #4]
 8006d9a:	b34b      	cbz	r3, 8006df0 <HAL_SUBGHZ_Init+0x90>
    count--;
 8006d9c:	9b01      	ldr	r3, [sp, #4]
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8006da2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006da6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006daa:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006dae:	d1f3      	bne.n	8006d98 <HAL_SUBGHZ_Init+0x38>
    status = HAL_OK;
 8006db0:	2500      	movs	r5, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006db2:	4b17      	ldr	r3, [pc, #92]	; (8006e10 <HAL_SUBGHZ_Init+0xb0>)
 8006db4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006db8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006dbc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006dc0:	4914      	ldr	r1, [pc, #80]	; (8006e14 <HAL_SUBGHZ_Init+0xb4>)
 8006dc2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006dc6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006dca:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8006dce:	689a      	ldr	r2, [r3, #8]
 8006dd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006dd4:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8006dd6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006dda:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 8006ddc:	b15d      	cbz	r5, 8006df6 <HAL_SUBGHZ_Init+0x96>
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8006dde:	2301      	movs	r3, #1
 8006de0:	71a3      	strb	r3, [r4, #6]
}
 8006de2:	4628      	mov	r0, r5
 8006de4:	b003      	add	sp, #12
 8006de6:	bd30      	pop	{r4, r5, pc}
    hsubghz->Lock = HAL_UNLOCKED;
 8006de8:	7143      	strb	r3, [r0, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 8006dea:	f7fa fd7f 	bl	80018ec <HAL_SUBGHZ_MspInit>
 8006dee:	e7bf      	b.n	8006d70 <HAL_SUBGHZ_Init+0x10>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006df0:	2501      	movs	r5, #1
 8006df2:	60a5      	str	r5, [r4, #8]
      break;
 8006df4:	e7dd      	b.n	8006db2 <HAL_SUBGHZ_Init+0x52>
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8006df6:	6820      	ldr	r0, [r4, #0]
 8006df8:	f7ff ffa0 	bl	8006d3c <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8006e00:	2300      	movs	r3, #0
 8006e02:	60a3      	str	r3, [r4, #8]
 8006e04:	e7eb      	b.n	8006dde <HAL_SUBGHZ_Init+0x7e>
    return status;
 8006e06:	2501      	movs	r5, #1
 8006e08:	e7eb      	b.n	8006de2 <HAL_SUBGHZ_Init+0x82>
 8006e0a:	bf00      	nop
 8006e0c:	20000070 	.word	0x20000070
 8006e10:	58000400 	.word	0x58000400
 8006e14:	58000800 	.word	0x58000800

08006e18 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8006e18:	b082      	sub	sp, #8
 8006e1a:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006e1c:	4b1a      	ldr	r3, [pc, #104]	; (8006e88 <SUBGHZSPI_Transmit+0x70>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006e24:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006e28:	2064      	movs	r0, #100	; 0x64
 8006e2a:	fb00 f303 	mul.w	r3, r0, r3
 8006e2e:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006e30:	9b01      	ldr	r3, [sp, #4]
 8006e32:	b14b      	cbz	r3, 8006e48 <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8006e34:	9b01      	ldr	r3, [sp, #4]
 8006e36:	3b01      	subs	r3, #1
 8006e38:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006e3a:	4b14      	ldr	r3, [pc, #80]	; (8006e8c <SUBGHZSPI_Transmit+0x74>)
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	f013 0f02 	tst.w	r3, #2
 8006e42:	d0f5      	beq.n	8006e30 <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8006e44:	2000      	movs	r0, #0
 8006e46:	e001      	b.n	8006e4c <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006e48:	2001      	movs	r0, #1
 8006e4a:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 8006e4c:	4b0f      	ldr	r3, [pc, #60]	; (8006e8c <SUBGHZSPI_Transmit+0x74>)
 8006e4e:	7319      	strb	r1, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006e50:	4b0d      	ldr	r3, [pc, #52]	; (8006e88 <SUBGHZSPI_Transmit+0x70>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006e58:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006e5c:	2164      	movs	r1, #100	; 0x64
 8006e5e:	fb01 f303 	mul.w	r3, r1, r3
 8006e62:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8006e64:	9b01      	ldr	r3, [sp, #4]
 8006e66:	b143      	cbz	r3, 8006e7a <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8006e68:	9b01      	ldr	r3, [sp, #4]
 8006e6a:	3b01      	subs	r3, #1
 8006e6c:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8006e6e:	4b07      	ldr	r3, [pc, #28]	; (8006e8c <SUBGHZSPI_Transmit+0x74>)
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	f013 0f01 	tst.w	r3, #1
 8006e76:	d0f5      	beq.n	8006e64 <SUBGHZSPI_Transmit+0x4c>
 8006e78:	e001      	b.n	8006e7e <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006e7a:	2001      	movs	r0, #1
 8006e7c:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8006e7e:	4b03      	ldr	r3, [pc, #12]	; (8006e8c <SUBGHZSPI_Transmit+0x74>)
 8006e80:	68db      	ldr	r3, [r3, #12]

  return status;
}
 8006e82:	b002      	add	sp, #8
 8006e84:	4770      	bx	lr
 8006e86:	bf00      	nop
 8006e88:	20000070 	.word	0x20000070
 8006e8c:	58010000 	.word	0x58010000

08006e90 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8006e90:	b082      	sub	sp, #8
 8006e92:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006e94:	4b1c      	ldr	r3, [pc, #112]	; (8006f08 <SUBGHZSPI_Receive+0x78>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006e9c:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006ea0:	2064      	movs	r0, #100	; 0x64
 8006ea2:	fb00 f303 	mul.w	r3, r0, r3
 8006ea6:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006ea8:	9b01      	ldr	r3, [sp, #4]
 8006eaa:	b14b      	cbz	r3, 8006ec0 <SUBGHZSPI_Receive+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8006eac:	9b01      	ldr	r3, [sp, #4]
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006eb2:	4b16      	ldr	r3, [pc, #88]	; (8006f0c <SUBGHZSPI_Receive+0x7c>)
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	f013 0f02 	tst.w	r3, #2
 8006eba:	d0f5      	beq.n	8006ea8 <SUBGHZSPI_Receive+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8006ebc:	2000      	movs	r0, #0
 8006ebe:	e001      	b.n	8006ec4 <SUBGHZSPI_Receive+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006ec0:	2001      	movs	r0, #1
 8006ec2:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 8006ec4:	4b11      	ldr	r3, [pc, #68]	; (8006f0c <SUBGHZSPI_Receive+0x7c>)
 8006ec6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006eca:	f883 c00c 	strb.w	ip, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006ece:	4b0e      	ldr	r3, [pc, #56]	; (8006f08 <SUBGHZSPI_Receive+0x78>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006ed6:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006eda:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8006ede:	fb0c f303 	mul.w	r3, ip, r3
 8006ee2:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8006ee4:	9b01      	ldr	r3, [sp, #4]
 8006ee6:	b143      	cbz	r3, 8006efa <SUBGHZSPI_Receive+0x6a>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8006ee8:	9b01      	ldr	r3, [sp, #4]
 8006eea:	3b01      	subs	r3, #1
 8006eec:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8006eee:	4b07      	ldr	r3, [pc, #28]	; (8006f0c <SUBGHZSPI_Receive+0x7c>)
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	f013 0f01 	tst.w	r3, #1
 8006ef6:	d0f5      	beq.n	8006ee4 <SUBGHZSPI_Receive+0x54>
 8006ef8:	e001      	b.n	8006efe <SUBGHZSPI_Receive+0x6e>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006efa:	2001      	movs	r0, #1
 8006efc:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8006efe:	4b03      	ldr	r3, [pc, #12]	; (8006f0c <SUBGHZSPI_Receive+0x7c>)
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	700b      	strb	r3, [r1, #0]

  return status;
}
 8006f04:	b002      	add	sp, #8
 8006f06:	4770      	bx	lr
 8006f08:	20000070 	.word	0x20000070
 8006f0c:	58010000 	.word	0x58010000

08006f10 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006f10:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8006f12:	4b13      	ldr	r3, [pc, #76]	; (8006f60 <SUBGHZ_WaitOnBusy+0x50>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006f1a:	f3c3 434b 	ubfx	r3, r3, #17, #12
 8006f1e:	2264      	movs	r2, #100	; 0x64
 8006f20:	fb02 f303 	mul.w	r3, r2, r3
 8006f24:	9301      	str	r3, [sp, #4]
 8006f26:	e006      	b.n	8006f36 <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8006f28:	2302      	movs	r3, #2
 8006f2a:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 8006f2c:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 8006f2e:	b002      	add	sp, #8
 8006f30:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8006f32:	4213      	tst	r3, r2
 8006f34:	d012      	beq.n	8006f5c <SUBGHZ_WaitOnBusy+0x4c>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8006f36:	4b0b      	ldr	r3, [pc, #44]	; (8006f64 <SUBGHZ_WaitOnBusy+0x54>)
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	f013 0304 	ands.w	r3, r3, #4
 8006f3e:	d000      	beq.n	8006f42 <SUBGHZ_WaitOnBusy+0x32>
 8006f40:	2301      	movs	r3, #1
    if (count == 0U)
 8006f42:	9a01      	ldr	r2, [sp, #4]
 8006f44:	2a00      	cmp	r2, #0
 8006f46:	d0ef      	beq.n	8006f28 <SUBGHZ_WaitOnBusy+0x18>
    count--;
 8006f48:	9a01      	ldr	r2, [sp, #4]
 8006f4a:	3a01      	subs	r2, #1
 8006f4c:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8006f4e:	4a05      	ldr	r2, [pc, #20]	; (8006f64 <SUBGHZ_WaitOnBusy+0x54>)
 8006f50:	6952      	ldr	r2, [r2, #20]
 8006f52:	f012 0202 	ands.w	r2, r2, #2
 8006f56:	d0ec      	beq.n	8006f32 <SUBGHZ_WaitOnBusy+0x22>
 8006f58:	2201      	movs	r2, #1
 8006f5a:	e7ea      	b.n	8006f32 <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 8006f5c:	2000      	movs	r0, #0
 8006f5e:	e7e6      	b.n	8006f2e <SUBGHZ_WaitOnBusy+0x1e>
 8006f60:	20000070 	.word	0x20000070
 8006f64:	58000400 	.word	0x58000400

08006f68 <SUBGHZ_CheckDeviceReady>:
{
 8006f68:	b500      	push	{lr}
 8006f6a:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8006f6c:	7903      	ldrb	r3, [r0, #4]
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d004      	beq.n	8006f7c <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8006f72:	f7ff ffcd 	bl	8006f10 <SUBGHZ_WaitOnBusy>
}
 8006f76:	b003      	add	sp, #12
 8006f78:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 8006f7c:	4b0d      	ldr	r3, [pc, #52]	; (8006fb4 <SUBGHZ_CheckDeviceReady+0x4c>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006f84:	f3c3 334f 	ubfx	r3, r3, #13, #16
 8006f88:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006f8a:	4a0b      	ldr	r2, [pc, #44]	; (8006fb8 <SUBGHZ_CheckDeviceReady+0x50>)
 8006f8c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006f90:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      count--;
 8006f98:	9b01      	ldr	r3, [sp, #4]
 8006f9a:	3b01      	subs	r3, #1
 8006f9c:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 8006f9e:	9b01      	ldr	r3, [sp, #4]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d1f9      	bne.n	8006f98 <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006fa4:	4a04      	ldr	r2, [pc, #16]	; (8006fb8 <SUBGHZ_CheckDeviceReady+0x50>)
 8006fa6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006faa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006fb2:	e7de      	b.n	8006f72 <SUBGHZ_CheckDeviceReady+0xa>
 8006fb4:	20000070 	.word	0x20000070
 8006fb8:	58000400 	.word	0x58000400

08006fbc <HAL_SUBGHZ_WriteRegisters>:
{
 8006fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fc0:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006fc2:	7980      	ldrb	r0, [r0, #6]
 8006fc4:	fa5f f880 	uxtb.w	r8, r0
 8006fc8:	f1b8 0f01 	cmp.w	r8, #1
 8006fcc:	d13e      	bne.n	800704c <HAL_SUBGHZ_WriteRegisters+0x90>
 8006fce:	460c      	mov	r4, r1
 8006fd0:	4617      	mov	r7, r2
 8006fd2:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8006fd4:	796b      	ldrb	r3, [r5, #5]
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d03b      	beq.n	8007052 <HAL_SUBGHZ_WriteRegisters+0x96>
 8006fda:	2301      	movs	r3, #1
 8006fdc:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006fde:	2302      	movs	r3, #2
 8006fe0:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006fe2:	4628      	mov	r0, r5
 8006fe4:	f7ff ffc0 	bl	8006f68 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006fe8:	4a1b      	ldr	r2, [pc, #108]	; (8007058 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8006fea:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006fee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ff2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8006ff6:	210d      	movs	r1, #13
 8006ff8:	4628      	mov	r0, r5
 8006ffa:	f7ff ff0d 	bl	8006e18 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006ffe:	0a21      	lsrs	r1, r4, #8
 8007000:	4628      	mov	r0, r5
 8007002:	f7ff ff09 	bl	8006e18 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007006:	b2e1      	uxtb	r1, r4
 8007008:	4628      	mov	r0, r5
 800700a:	f7ff ff05 	bl	8006e18 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800700e:	2400      	movs	r4, #0
 8007010:	e005      	b.n	800701e <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007012:	5d39      	ldrb	r1, [r7, r4]
 8007014:	4628      	mov	r0, r5
 8007016:	f7ff feff 	bl	8006e18 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800701a:	3401      	adds	r4, #1
 800701c:	b2a4      	uxth	r4, r4
 800701e:	42b4      	cmp	r4, r6
 8007020:	d3f7      	bcc.n	8007012 <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007022:	4a0d      	ldr	r2, [pc, #52]	; (8007058 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8007024:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007028:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800702c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007030:	4628      	mov	r0, r5
 8007032:	f7ff ff6d 	bl	8006f10 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007036:	68ab      	ldr	r3, [r5, #8]
 8007038:	b90b      	cbnz	r3, 800703e <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 800703a:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800703e:	2301      	movs	r3, #1
 8007040:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8007042:	2300      	movs	r3, #0
 8007044:	716b      	strb	r3, [r5, #5]
}
 8007046:	4640      	mov	r0, r8
 8007048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800704c:	f04f 0802 	mov.w	r8, #2
 8007050:	e7f9      	b.n	8007046 <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 8007052:	f04f 0802 	mov.w	r8, #2
 8007056:	e7f6      	b.n	8007046 <HAL_SUBGHZ_WriteRegisters+0x8a>
 8007058:	58000400 	.word	0x58000400

0800705c <HAL_SUBGHZ_ReadRegisters>:
{
 800705c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007060:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007062:	7980      	ldrb	r0, [r0, #6]
 8007064:	fa5f f880 	uxtb.w	r8, r0
 8007068:	f1b8 0f01 	cmp.w	r8, #1
 800706c:	d141      	bne.n	80070f2 <HAL_SUBGHZ_ReadRegisters+0x96>
 800706e:	460c      	mov	r4, r1
 8007070:	4615      	mov	r5, r2
 8007072:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8007074:	7973      	ldrb	r3, [r6, #5]
 8007076:	2b01      	cmp	r3, #1
 8007078:	d03e      	beq.n	80070f8 <HAL_SUBGHZ_ReadRegisters+0x9c>
 800707a:	2301      	movs	r3, #1
 800707c:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800707e:	4630      	mov	r0, r6
 8007080:	f7ff ff72 	bl	8006f68 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007084:	4a1e      	ldr	r2, [pc, #120]	; (8007100 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8007086:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800708a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800708e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8007092:	211d      	movs	r1, #29
 8007094:	4630      	mov	r0, r6
 8007096:	f7ff febf 	bl	8006e18 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800709a:	0a21      	lsrs	r1, r4, #8
 800709c:	4630      	mov	r0, r6
 800709e:	f7ff febb 	bl	8006e18 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80070a2:	b2e1      	uxtb	r1, r4
 80070a4:	4630      	mov	r0, r6
 80070a6:	f7ff feb7 	bl	8006e18 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80070aa:	2100      	movs	r1, #0
 80070ac:	4630      	mov	r0, r6
 80070ae:	f7ff feb3 	bl	8006e18 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80070b2:	2400      	movs	r4, #0
 80070b4:	e006      	b.n	80070c4 <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80070b6:	4629      	mov	r1, r5
 80070b8:	4630      	mov	r0, r6
 80070ba:	f7ff fee9 	bl	8006e90 <SUBGHZSPI_Receive>
      pData++;
 80070be:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 80070c0:	3401      	adds	r4, #1
 80070c2:	b2a4      	uxth	r4, r4
 80070c4:	42bc      	cmp	r4, r7
 80070c6:	d3f6      	bcc.n	80070b6 <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80070c8:	4a0d      	ldr	r2, [pc, #52]	; (8007100 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 80070ca:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80070ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80070d6:	4630      	mov	r0, r6
 80070d8:	f7ff ff1a 	bl	8006f10 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80070dc:	68b3      	ldr	r3, [r6, #8]
 80070de:	b90b      	cbnz	r3, 80070e4 <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 80070e0:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80070e4:	2301      	movs	r3, #1
 80070e6:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 80070e8:	2300      	movs	r3, #0
 80070ea:	7173      	strb	r3, [r6, #5]
}
 80070ec:	4640      	mov	r0, r8
 80070ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80070f2:	f04f 0802 	mov.w	r8, #2
 80070f6:	e7f9      	b.n	80070ec <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 80070f8:	f04f 0802 	mov.w	r8, #2
 80070fc:	e7f6      	b.n	80070ec <HAL_SUBGHZ_ReadRegisters+0x90>
 80070fe:	bf00      	nop
 8007100:	58000400 	.word	0x58000400

08007104 <HAL_SUBGHZ_ExecSetCmd>:
{
 8007104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007108:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800710a:	7980      	ldrb	r0, [r0, #6]
 800710c:	fa5f f980 	uxtb.w	r9, r0
 8007110:	f1b9 0f01 	cmp.w	r9, #1
 8007114:	d143      	bne.n	800719e <HAL_SUBGHZ_ExecSetCmd+0x9a>
 8007116:	4688      	mov	r8, r1
 8007118:	4617      	mov	r7, r2
 800711a:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 800711c:	796b      	ldrb	r3, [r5, #5]
 800711e:	2b01      	cmp	r3, #1
 8007120:	d040      	beq.n	80071a4 <HAL_SUBGHZ_ExecSetCmd+0xa0>
 8007122:	2301      	movs	r3, #1
 8007124:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007126:	4628      	mov	r0, r5
 8007128:	f7ff ff1e 	bl	8006f68 <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800712c:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 8007130:	d005      	beq.n	800713e <HAL_SUBGHZ_ExecSetCmd+0x3a>
 8007132:	f1b8 0f94 	cmp.w	r8, #148	; 0x94
 8007136:	d002      	beq.n	800713e <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8007138:	2300      	movs	r3, #0
 800713a:	712b      	strb	r3, [r5, #4]
 800713c:	e001      	b.n	8007142 <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800713e:	2301      	movs	r3, #1
 8007140:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007142:	4a1a      	ldr	r2, [pc, #104]	; (80071ac <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8007144:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007148:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800714c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007150:	4641      	mov	r1, r8
 8007152:	4628      	mov	r0, r5
 8007154:	f7ff fe60 	bl	8006e18 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007158:	2400      	movs	r4, #0
 800715a:	e005      	b.n	8007168 <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800715c:	5d39      	ldrb	r1, [r7, r4]
 800715e:	4628      	mov	r0, r5
 8007160:	f7ff fe5a 	bl	8006e18 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007164:	3401      	adds	r4, #1
 8007166:	b2a4      	uxth	r4, r4
 8007168:	42b4      	cmp	r4, r6
 800716a:	d3f7      	bcc.n	800715c <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800716c:	4a0f      	ldr	r2, [pc, #60]	; (80071ac <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 800716e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007176:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if (Command != RADIO_SET_SLEEP)
 800717a:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 800717e:	d10a      	bne.n	8007196 <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007180:	68ab      	ldr	r3, [r5, #8]
 8007182:	b90b      	cbnz	r3, 8007188 <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 8007184:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007188:	2301      	movs	r3, #1
 800718a:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 800718c:	2300      	movs	r3, #0
 800718e:	716b      	strb	r3, [r5, #5]
}
 8007190:	4648      	mov	r0, r9
 8007192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007196:	4628      	mov	r0, r5
 8007198:	f7ff feba 	bl	8006f10 <SUBGHZ_WaitOnBusy>
 800719c:	e7f0      	b.n	8007180 <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 800719e:	f04f 0902 	mov.w	r9, #2
 80071a2:	e7f5      	b.n	8007190 <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 80071a4:	f04f 0902 	mov.w	r9, #2
 80071a8:	e7f2      	b.n	8007190 <HAL_SUBGHZ_ExecSetCmd+0x8c>
 80071aa:	bf00      	nop
 80071ac:	58000400 	.word	0x58000400

080071b0 <HAL_SUBGHZ_ExecGetCmd>:
{
 80071b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071b4:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80071b6:	7980      	ldrb	r0, [r0, #6]
 80071b8:	fa5f f880 	uxtb.w	r8, r0
 80071bc:	f1b8 0f01 	cmp.w	r8, #1
 80071c0:	d139      	bne.n	8007236 <HAL_SUBGHZ_ExecGetCmd+0x86>
 80071c2:	460c      	mov	r4, r1
 80071c4:	4615      	mov	r5, r2
 80071c6:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 80071c8:	7973      	ldrb	r3, [r6, #5]
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d036      	beq.n	800723c <HAL_SUBGHZ_ExecGetCmd+0x8c>
 80071ce:	2301      	movs	r3, #1
 80071d0:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80071d2:	4630      	mov	r0, r6
 80071d4:	f7ff fec8 	bl	8006f68 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80071d8:	4a1a      	ldr	r2, [pc, #104]	; (8007244 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 80071da:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80071de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80071e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80071e6:	4621      	mov	r1, r4
 80071e8:	4630      	mov	r0, r6
 80071ea:	f7ff fe15 	bl	8006e18 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80071ee:	2100      	movs	r1, #0
 80071f0:	4630      	mov	r0, r6
 80071f2:	f7ff fe11 	bl	8006e18 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80071f6:	2400      	movs	r4, #0
 80071f8:	e006      	b.n	8007208 <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80071fa:	4629      	mov	r1, r5
 80071fc:	4630      	mov	r0, r6
 80071fe:	f7ff fe47 	bl	8006e90 <SUBGHZSPI_Receive>
      pData++;
 8007202:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8007204:	3401      	adds	r4, #1
 8007206:	b2a4      	uxth	r4, r4
 8007208:	42bc      	cmp	r4, r7
 800720a:	d3f6      	bcc.n	80071fa <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800720c:	4a0d      	ldr	r2, [pc, #52]	; (8007244 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 800720e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007212:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007216:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800721a:	4630      	mov	r0, r6
 800721c:	f7ff fe78 	bl	8006f10 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007220:	68b3      	ldr	r3, [r6, #8]
 8007222:	b90b      	cbnz	r3, 8007228 <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 8007224:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007228:	2301      	movs	r3, #1
 800722a:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 800722c:	2300      	movs	r3, #0
 800722e:	7173      	strb	r3, [r6, #5]
}
 8007230:	4640      	mov	r0, r8
 8007232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8007236:	f04f 0802 	mov.w	r8, #2
 800723a:	e7f9      	b.n	8007230 <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 800723c:	f04f 0802 	mov.w	r8, #2
 8007240:	e7f6      	b.n	8007230 <HAL_SUBGHZ_ExecGetCmd+0x80>
 8007242:	bf00      	nop
 8007244:	58000400 	.word	0x58000400

08007248 <HAL_SUBGHZ_IRQHandler>:
{
 8007248:	b530      	push	{r4, r5, lr}
 800724a:	b083      	sub	sp, #12
 800724c:	4605      	mov	r5, r0
  uint8_t tmpisr[2U] = {0U};
 800724e:	2300      	movs	r3, #0
 8007250:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8007254:	2302      	movs	r3, #2
 8007256:	aa01      	add	r2, sp, #4
 8007258:	2112      	movs	r1, #18
 800725a:	f7ff ffa9 	bl	80071b0 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800725e:	f89d 4004 	ldrb.w	r4, [sp, #4]
  itsource = (itsource << 8U) | tmpisr[1U];
 8007262:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007266:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800726a:	f013 0f01 	tst.w	r3, #1
 800726e:	d126      	bne.n	80072be <HAL_SUBGHZ_IRQHandler+0x76>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8007270:	f014 0f02 	tst.w	r4, #2
 8007274:	d127      	bne.n	80072c6 <HAL_SUBGHZ_IRQHandler+0x7e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8007276:	f014 0f04 	tst.w	r4, #4
 800727a:	d128      	bne.n	80072ce <HAL_SUBGHZ_IRQHandler+0x86>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800727c:	f014 0f08 	tst.w	r4, #8
 8007280:	d129      	bne.n	80072d6 <HAL_SUBGHZ_IRQHandler+0x8e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8007282:	f014 0f10 	tst.w	r4, #16
 8007286:	d12a      	bne.n	80072de <HAL_SUBGHZ_IRQHandler+0x96>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8007288:	f014 0f20 	tst.w	r4, #32
 800728c:	d12b      	bne.n	80072e6 <HAL_SUBGHZ_IRQHandler+0x9e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 800728e:	f014 0f40 	tst.w	r4, #64	; 0x40
 8007292:	d12c      	bne.n	80072ee <HAL_SUBGHZ_IRQHandler+0xa6>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8007294:	f014 0f80 	tst.w	r4, #128	; 0x80
 8007298:	d006      	beq.n	80072a8 <HAL_SUBGHZ_IRQHandler+0x60>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800729a:	f414 7f80 	tst.w	r4, #256	; 0x100
 800729e:	d02a      	beq.n	80072f6 <HAL_SUBGHZ_IRQHandler+0xae>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 80072a0:	2101      	movs	r1, #1
 80072a2:	4628      	mov	r0, r5
 80072a4:	f00b fa4c 	bl	8012740 <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80072a8:	f414 7f00 	tst.w	r4, #512	; 0x200
 80072ac:	d128      	bne.n	8007300 <HAL_SUBGHZ_IRQHandler+0xb8>
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 80072ae:	2302      	movs	r3, #2
 80072b0:	aa01      	add	r2, sp, #4
 80072b2:	4619      	mov	r1, r3
 80072b4:	4628      	mov	r0, r5
 80072b6:	f7ff ff25 	bl	8007104 <HAL_SUBGHZ_ExecSetCmd>
}
 80072ba:	b003      	add	sp, #12
 80072bc:	bd30      	pop	{r4, r5, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80072be:	4628      	mov	r0, r5
 80072c0:	f00b fa26 	bl	8012710 <HAL_SUBGHZ_TxCpltCallback>
 80072c4:	e7d4      	b.n	8007270 <HAL_SUBGHZ_IRQHandler+0x28>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 80072c6:	4628      	mov	r0, r5
 80072c8:	f00b fa2a 	bl	8012720 <HAL_SUBGHZ_RxCpltCallback>
 80072cc:	e7d3      	b.n	8007276 <HAL_SUBGHZ_IRQHandler+0x2e>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 80072ce:	4628      	mov	r0, r5
 80072d0:	f00b fa5a 	bl	8012788 <HAL_SUBGHZ_PreambleDetectedCallback>
 80072d4:	e7d2      	b.n	800727c <HAL_SUBGHZ_IRQHandler+0x34>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 80072d6:	4628      	mov	r0, r5
 80072d8:	f00b fa5e 	bl	8012798 <HAL_SUBGHZ_SyncWordValidCallback>
 80072dc:	e7d1      	b.n	8007282 <HAL_SUBGHZ_IRQHandler+0x3a>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 80072de:	4628      	mov	r0, r5
 80072e0:	f00b fa62 	bl	80127a8 <HAL_SUBGHZ_HeaderValidCallback>
 80072e4:	e7d0      	b.n	8007288 <HAL_SUBGHZ_IRQHandler+0x40>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 80072e6:	4628      	mov	r0, r5
 80072e8:	f00b fa46 	bl	8012778 <HAL_SUBGHZ_HeaderErrorCallback>
 80072ec:	e7cf      	b.n	800728e <HAL_SUBGHZ_IRQHandler+0x46>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 80072ee:	4628      	mov	r0, r5
 80072f0:	f00b fa1e 	bl	8012730 <HAL_SUBGHZ_CRCErrorCallback>
 80072f4:	e7ce      	b.n	8007294 <HAL_SUBGHZ_IRQHandler+0x4c>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 80072f6:	2100      	movs	r1, #0
 80072f8:	4628      	mov	r0, r5
 80072fa:	f00b fa21 	bl	8012740 <HAL_SUBGHZ_CADStatusCallback>
 80072fe:	e7d3      	b.n	80072a8 <HAL_SUBGHZ_IRQHandler+0x60>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8007300:	4628      	mov	r0, r5
 8007302:	f00b fa2f 	bl	8012764 <HAL_SUBGHZ_RxTxTimeoutCallback>
 8007306:	e7d2      	b.n	80072ae <HAL_SUBGHZ_IRQHandler+0x66>

08007308 <HAL_SUBGHZ_WriteBuffer>:
{
 8007308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800730c:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800730e:	7980      	ldrb	r0, [r0, #6]
 8007310:	fa5f f880 	uxtb.w	r8, r0
 8007314:	f1b8 0f01 	cmp.w	r8, #1
 8007318:	d138      	bne.n	800738c <HAL_SUBGHZ_WriteBuffer+0x84>
 800731a:	460c      	mov	r4, r1
 800731c:	4617      	mov	r7, r2
 800731e:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8007320:	796b      	ldrb	r3, [r5, #5]
 8007322:	2b01      	cmp	r3, #1
 8007324:	d035      	beq.n	8007392 <HAL_SUBGHZ_WriteBuffer+0x8a>
 8007326:	2301      	movs	r3, #1
 8007328:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800732a:	4628      	mov	r0, r5
 800732c:	f7ff fe1c 	bl	8006f68 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007330:	4a19      	ldr	r2, [pc, #100]	; (8007398 <HAL_SUBGHZ_WriteBuffer+0x90>)
 8007332:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007336:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800733a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 800733e:	210e      	movs	r1, #14
 8007340:	4628      	mov	r0, r5
 8007342:	f7ff fd69 	bl	8006e18 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007346:	4621      	mov	r1, r4
 8007348:	4628      	mov	r0, r5
 800734a:	f7ff fd65 	bl	8006e18 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800734e:	2400      	movs	r4, #0
 8007350:	e005      	b.n	800735e <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007352:	5d39      	ldrb	r1, [r7, r4]
 8007354:	4628      	mov	r0, r5
 8007356:	f7ff fd5f 	bl	8006e18 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800735a:	3401      	adds	r4, #1
 800735c:	b2a4      	uxth	r4, r4
 800735e:	42b4      	cmp	r4, r6
 8007360:	d3f7      	bcc.n	8007352 <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007362:	4a0d      	ldr	r2, [pc, #52]	; (8007398 <HAL_SUBGHZ_WriteBuffer+0x90>)
 8007364:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007368:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800736c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007370:	4628      	mov	r0, r5
 8007372:	f7ff fdcd 	bl	8006f10 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007376:	68ab      	ldr	r3, [r5, #8]
 8007378:	b90b      	cbnz	r3, 800737e <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 800737a:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800737e:	2301      	movs	r3, #1
 8007380:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8007382:	2300      	movs	r3, #0
 8007384:	716b      	strb	r3, [r5, #5]
}
 8007386:	4640      	mov	r0, r8
 8007388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800738c:	f04f 0802 	mov.w	r8, #2
 8007390:	e7f9      	b.n	8007386 <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 8007392:	f04f 0802 	mov.w	r8, #2
 8007396:	e7f6      	b.n	8007386 <HAL_SUBGHZ_WriteBuffer+0x7e>
 8007398:	58000400 	.word	0x58000400

0800739c <HAL_SUBGHZ_ReadBuffer>:
{
 800739c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073a0:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80073a2:	7980      	ldrb	r0, [r0, #6]
 80073a4:	fa5f f880 	uxtb.w	r8, r0
 80073a8:	f1b8 0f01 	cmp.w	r8, #1
 80073ac:	d13d      	bne.n	800742a <HAL_SUBGHZ_ReadBuffer+0x8e>
 80073ae:	460c      	mov	r4, r1
 80073b0:	4615      	mov	r5, r2
 80073b2:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 80073b4:	7973      	ldrb	r3, [r6, #5]
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d03a      	beq.n	8007430 <HAL_SUBGHZ_ReadBuffer+0x94>
 80073ba:	2301      	movs	r3, #1
 80073bc:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80073be:	4630      	mov	r0, r6
 80073c0:	f7ff fdd2 	bl	8006f68 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80073c4:	4a1c      	ldr	r2, [pc, #112]	; (8007438 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 80073c6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80073ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80073ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 80073d2:	211e      	movs	r1, #30
 80073d4:	4630      	mov	r0, r6
 80073d6:	f7ff fd1f 	bl	8006e18 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80073da:	4621      	mov	r1, r4
 80073dc:	4630      	mov	r0, r6
 80073de:	f7ff fd1b 	bl	8006e18 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80073e2:	2100      	movs	r1, #0
 80073e4:	4630      	mov	r0, r6
 80073e6:	f7ff fd17 	bl	8006e18 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80073ea:	2400      	movs	r4, #0
 80073ec:	e006      	b.n	80073fc <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80073ee:	4629      	mov	r1, r5
 80073f0:	4630      	mov	r0, r6
 80073f2:	f7ff fd4d 	bl	8006e90 <SUBGHZSPI_Receive>
      pData++;
 80073f6:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 80073f8:	3401      	adds	r4, #1
 80073fa:	b2a4      	uxth	r4, r4
 80073fc:	42bc      	cmp	r4, r7
 80073fe:	d3f6      	bcc.n	80073ee <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007400:	4a0d      	ldr	r2, [pc, #52]	; (8007438 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8007402:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007406:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800740a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800740e:	4630      	mov	r0, r6
 8007410:	f7ff fd7e 	bl	8006f10 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007414:	68b3      	ldr	r3, [r6, #8]
 8007416:	b90b      	cbnz	r3, 800741c <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 8007418:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800741c:	2301      	movs	r3, #1
 800741e:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8007420:	2300      	movs	r3, #0
 8007422:	7173      	strb	r3, [r6, #5]
}
 8007424:	4640      	mov	r0, r8
 8007426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800742a:	f04f 0802 	mov.w	r8, #2
 800742e:	e7f9      	b.n	8007424 <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 8007430:	f04f 0802 	mov.w	r8, #2
 8007434:	e7f6      	b.n	8007424 <HAL_SUBGHZ_ReadBuffer+0x88>
 8007436:	bf00      	nop
 8007438:	58000400 	.word	0x58000400

0800743c <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800743c:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743e:	e852 3f00 	ldrex	r3, [r2]
 8007442:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007446:	e842 3100 	strex	r1, r3, [r2]
 800744a:	2900      	cmp	r1, #0
 800744c:	d1f6      	bne.n	800743c <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800744e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007450:	f102 0308 	add.w	r3, r2, #8
 8007454:	e853 3f00 	ldrex	r3, [r3]
 8007458:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745c:	3208      	adds	r2, #8
 800745e:	e842 3100 	strex	r1, r3, [r2]
 8007462:	2900      	cmp	r1, #0
 8007464:	d1f3      	bne.n	800744e <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007466:	2320      	movs	r3, #32
 8007468:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
}
 800746c:	4770      	bx	lr

0800746e <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800746e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007470:	e852 3f00 	ldrex	r3, [r2]
 8007474:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007478:	e842 3100 	strex	r1, r3, [r2]
 800747c:	2900      	cmp	r1, #0
 800747e:	d1f6      	bne.n	800746e <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007480:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007482:	f102 0308 	add.w	r3, r2, #8
 8007486:	e853 3f00 	ldrex	r3, [r3]
 800748a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800748e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007492:	3208      	adds	r2, #8
 8007494:	e842 3100 	strex	r1, r3, [r2]
 8007498:	2900      	cmp	r1, #0
 800749a:	d1f1      	bne.n	8007480 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800749c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d006      	beq.n	80074b0 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074a2:	2320      	movs	r3, #32
 80074a4:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074a8:	2300      	movs	r3, #0
 80074aa:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80074ac:	6703      	str	r3, [r0, #112]	; 0x70
}
 80074ae:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074b0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b2:	e852 3f00 	ldrex	r3, [r2]
 80074b6:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ba:	e842 3100 	strex	r1, r3, [r2]
 80074be:	2900      	cmp	r1, #0
 80074c0:	d1f6      	bne.n	80074b0 <UART_EndRxTransfer+0x42>
 80074c2:	e7ee      	b.n	80074a2 <UART_EndRxTransfer+0x34>

080074c4 <HAL_UART_Transmit_DMA>:
  if (huart->gState == HAL_UART_STATE_READY)
 80074c4:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80074c8:	2b20      	cmp	r3, #32
 80074ca:	d14c      	bne.n	8007566 <HAL_UART_Transmit_DMA+0xa2>
{
 80074cc:	b510      	push	{r4, lr}
 80074ce:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 80074d0:	2900      	cmp	r1, #0
 80074d2:	d04a      	beq.n	800756a <HAL_UART_Transmit_DMA+0xa6>
 80074d4:	2a00      	cmp	r2, #0
 80074d6:	d04a      	beq.n	800756e <HAL_UART_Transmit_DMA+0xaa>
    __HAL_LOCK(huart);
 80074d8:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d048      	beq.n	8007572 <HAL_UART_Transmit_DMA+0xae>
 80074e0:	2301      	movs	r3, #1
 80074e2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->pTxBuffPtr  = pData;
 80074e6:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 80074e8:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 80074ec:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074f0:	2300      	movs	r3, #0
 80074f2:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074f6:	2321      	movs	r3, #33	; 0x21
 80074f8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    if (huart->hdmatx != NULL)
 80074fc:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80074fe:	b1f3      	cbz	r3, 800753e <HAL_UART_Transmit_DMA+0x7a>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007500:	491d      	ldr	r1, [pc, #116]	; (8007578 <HAL_UART_Transmit_DMA+0xb4>)
 8007502:	62d9      	str	r1, [r3, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007504:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8007506:	491d      	ldr	r1, [pc, #116]	; (800757c <HAL_UART_Transmit_DMA+0xb8>)
 8007508:	6319      	str	r1, [r3, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800750a:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800750c:	491c      	ldr	r1, [pc, #112]	; (8007580 <HAL_UART_Transmit_DMA+0xbc>)
 800750e:	6359      	str	r1, [r3, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 8007510:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8007512:	2100      	movs	r1, #0
 8007514:	6399      	str	r1, [r3, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007516:	6801      	ldr	r1, [r0, #0]
 8007518:	4613      	mov	r3, r2
 800751a:	f101 0228 	add.w	r2, r1, #40	; 0x28
 800751e:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8007520:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8007522:	f7fd fa3f 	bl	80049a4 <HAL_DMA_Start_IT>
 8007526:	b150      	cbz	r0, 800753e <HAL_UART_Transmit_DMA+0x7a>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007528:	2310      	movs	r3, #16
 800752a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 800752e:	2300      	movs	r3, #0
 8007530:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 8007534:	2320      	movs	r3, #32
 8007536:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        return HAL_ERROR;
 800753a:	2001      	movs	r0, #1
 800753c:	e012      	b.n	8007564 <HAL_UART_Transmit_DMA+0xa0>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800753e:	6823      	ldr	r3, [r4, #0]
 8007540:	2240      	movs	r2, #64	; 0x40
 8007542:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8007544:	2300      	movs	r3, #0
 8007546:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800754a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754c:	f102 0308 	add.w	r3, r2, #8
 8007550:	e853 3f00 	ldrex	r3, [r3]
 8007554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007558:	3208      	adds	r2, #8
 800755a:	e842 3100 	strex	r1, r3, [r2]
 800755e:	2900      	cmp	r1, #0
 8007560:	d1f3      	bne.n	800754a <HAL_UART_Transmit_DMA+0x86>
    return HAL_OK;
 8007562:	2000      	movs	r0, #0
}
 8007564:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8007566:	2002      	movs	r0, #2
}
 8007568:	4770      	bx	lr
      return HAL_ERROR;
 800756a:	2001      	movs	r0, #1
 800756c:	e7fa      	b.n	8007564 <HAL_UART_Transmit_DMA+0xa0>
 800756e:	2001      	movs	r0, #1
 8007570:	e7f8      	b.n	8007564 <HAL_UART_Transmit_DMA+0xa0>
    __HAL_LOCK(huart);
 8007572:	2002      	movs	r0, #2
 8007574:	e7f6      	b.n	8007564 <HAL_UART_Transmit_DMA+0xa0>
 8007576:	bf00      	nop
 8007578:	08007585 	.word	0x08007585
 800757c:	080075f3 	.word	0x080075f3
 8007580:	080075ff 	.word	0x080075ff

08007584 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007584:	b508      	push	{r3, lr}
 8007586:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007588:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f013 0f20 	tst.w	r3, #32
 8007592:	d118      	bne.n	80075c6 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8007594:	2300      	movs	r3, #0
 8007596:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800759a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800759c:	f102 0308 	add.w	r3, r2, #8
 80075a0:	e853 3f00 	ldrex	r3, [r3]
 80075a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a8:	3208      	adds	r2, #8
 80075aa:	e842 3100 	strex	r1, r3, [r2]
 80075ae:	2900      	cmp	r1, #0
 80075b0:	d1f3      	bne.n	800759a <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80075b2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b4:	e852 3f00 	ldrex	r3, [r2]
 80075b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075bc:	e842 3100 	strex	r1, r3, [r2]
 80075c0:	2900      	cmp	r1, #0
 80075c2:	d1f6      	bne.n	80075b2 <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80075c4:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80075c6:	f7fa fee1 	bl	800238c <HAL_UART_TxCpltCallback>
}
 80075ca:	e7fb      	b.n	80075c4 <UART_DMATransmitCplt+0x40>

080075cc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80075cc:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80075ce:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d0:	e852 3f00 	ldrex	r3, [r2]
 80075d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d8:	e842 3100 	strex	r1, r3, [r2]
 80075dc:	2900      	cmp	r1, #0
 80075de:	d1f6      	bne.n	80075ce <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075e0:	2320      	movs	r3, #32
 80075e2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80075e6:	2300      	movs	r3, #0
 80075e8:	6743      	str	r3, [r0, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80075ea:	f7fa fecf 	bl	800238c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075ee:	bd08      	pop	{r3, pc}

080075f0 <HAL_UART_TxHalfCpltCallback>:
}
 80075f0:	4770      	bx	lr

080075f2 <UART_DMATxHalfCplt>:
{
 80075f2:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 80075f4:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80075f6:	f7ff fffb 	bl	80075f0 <HAL_UART_TxHalfCpltCallback>
}
 80075fa:	bd08      	pop	{r3, pc}

080075fc <HAL_UART_ErrorCallback>:
}
 80075fc:	4770      	bx	lr

080075fe <UART_DMAError>:
{
 80075fe:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007600:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007602:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007606:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800760a:	6823      	ldr	r3, [r4, #0]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007612:	d001      	beq.n	8007618 <UART_DMAError+0x1a>
 8007614:	2a21      	cmp	r2, #33	; 0x21
 8007616:	d010      	beq.n	800763a <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007618:	6823      	ldr	r3, [r4, #0]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007620:	d001      	beq.n	8007626 <UART_DMAError+0x28>
 8007622:	2d22      	cmp	r5, #34	; 0x22
 8007624:	d010      	beq.n	8007648 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007626:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800762a:	f043 0310 	orr.w	r3, r3, #16
 800762e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  HAL_UART_ErrorCallback(huart);
 8007632:	4620      	mov	r0, r4
 8007634:	f7ff ffe2 	bl	80075fc <HAL_UART_ErrorCallback>
}
 8007638:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 800763a:	2300      	movs	r3, #0
 800763c:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8007640:	4620      	mov	r0, r4
 8007642:	f7ff fefb 	bl	800743c <UART_EndTxTransfer>
 8007646:	e7e7      	b.n	8007618 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 8007648:	2300      	movs	r3, #0
 800764a:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800764e:	4620      	mov	r0, r4
 8007650:	f7ff ff0d 	bl	800746e <UART_EndRxTransfer>
 8007654:	e7e7      	b.n	8007626 <UART_DMAError+0x28>

08007656 <UART_DMAAbortOnError>:
{
 8007656:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007658:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 800765a:	2300      	movs	r3, #0
 800765c:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007660:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8007664:	f7ff ffca 	bl	80075fc <HAL_UART_ErrorCallback>
}
 8007668:	bd08      	pop	{r3, pc}

0800766a <HAL_UARTEx_RxEventCallback>:
}
 800766a:	4770      	bx	lr

0800766c <HAL_UART_IRQHandler>:
{
 800766c:	b570      	push	{r4, r5, r6, lr}
 800766e:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007670:	6801      	ldr	r1, [r0, #0]
 8007672:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007674:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007676:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007678:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 800767c:	401a      	ands	r2, r3
 800767e:	d108      	bne.n	8007692 <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007680:	f013 0f20 	tst.w	r3, #32
 8007684:	d005      	beq.n	8007692 <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007686:	f010 0f20 	tst.w	r0, #32
 800768a:	d134      	bne.n	80076f6 <HAL_UART_IRQHandler+0x8a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800768c:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8007690:	d131      	bne.n	80076f6 <HAL_UART_IRQHandler+0x8a>
  if ((errorflags != 0U)
 8007692:	b12a      	cbz	r2, 80076a0 <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007694:	4a95      	ldr	r2, [pc, #596]	; (80078ec <HAL_UART_IRQHandler+0x280>)
 8007696:	402a      	ands	r2, r5
 8007698:	d133      	bne.n	8007702 <HAL_UART_IRQHandler+0x96>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800769a:	4e95      	ldr	r6, [pc, #596]	; (80078f0 <HAL_UART_IRQHandler+0x284>)
 800769c:	4230      	tst	r0, r6
 800769e:	d130      	bne.n	8007702 <HAL_UART_IRQHandler+0x96>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076a0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80076a2:	2a01      	cmp	r2, #1
 80076a4:	f000 80c3 	beq.w	800782e <HAL_UART_IRQHandler+0x1c2>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80076a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80076ac:	d003      	beq.n	80076b6 <HAL_UART_IRQHandler+0x4a>
 80076ae:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 80076b2:	f040 815b 	bne.w	800796c <HAL_UART_IRQHandler+0x300>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80076b6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80076ba:	d007      	beq.n	80076cc <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80076bc:	f010 0f80 	tst.w	r0, #128	; 0x80
 80076c0:	f040 815b 	bne.w	800797a <HAL_UART_IRQHandler+0x30e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80076c4:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 80076c8:	f040 8157 	bne.w	800797a <HAL_UART_IRQHandler+0x30e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80076cc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80076d0:	d003      	beq.n	80076da <HAL_UART_IRQHandler+0x6e>
 80076d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80076d6:	f040 8157 	bne.w	8007988 <HAL_UART_IRQHandler+0x31c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80076da:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80076de:	d003      	beq.n	80076e8 <HAL_UART_IRQHandler+0x7c>
 80076e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80076e4:	f040 8154 	bne.w	8007990 <HAL_UART_IRQHandler+0x324>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80076e8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80076ec:	d002      	beq.n	80076f4 <HAL_UART_IRQHandler+0x88>
 80076ee:	2800      	cmp	r0, #0
 80076f0:	f2c0 8152 	blt.w	8007998 <HAL_UART_IRQHandler+0x32c>
}
 80076f4:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 80076f6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d0fb      	beq.n	80076f4 <HAL_UART_IRQHandler+0x88>
        huart->RxISR(huart);
 80076fc:	4620      	mov	r0, r4
 80076fe:	4798      	blx	r3
      return;
 8007700:	e7f8      	b.n	80076f4 <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007702:	f013 0f01 	tst.w	r3, #1
 8007706:	d009      	beq.n	800771c <HAL_UART_IRQHandler+0xb0>
 8007708:	f410 7f80 	tst.w	r0, #256	; 0x100
 800770c:	d006      	beq.n	800771c <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800770e:	2601      	movs	r6, #1
 8007710:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007712:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8007716:	4331      	orrs	r1, r6
 8007718:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800771c:	f013 0f02 	tst.w	r3, #2
 8007720:	d00b      	beq.n	800773a <HAL_UART_IRQHandler+0xce>
 8007722:	f015 0f01 	tst.w	r5, #1
 8007726:	d008      	beq.n	800773a <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007728:	6821      	ldr	r1, [r4, #0]
 800772a:	2602      	movs	r6, #2
 800772c:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800772e:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8007732:	f041 0104 	orr.w	r1, r1, #4
 8007736:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800773a:	f013 0f04 	tst.w	r3, #4
 800773e:	d00b      	beq.n	8007758 <HAL_UART_IRQHandler+0xec>
 8007740:	f015 0f01 	tst.w	r5, #1
 8007744:	d008      	beq.n	8007758 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007746:	6821      	ldr	r1, [r4, #0]
 8007748:	2604      	movs	r6, #4
 800774a:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800774c:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8007750:	f041 0102 	orr.w	r1, r1, #2
 8007754:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007758:	f013 0f08 	tst.w	r3, #8
 800775c:	d00b      	beq.n	8007776 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800775e:	f010 0f20 	tst.w	r0, #32
 8007762:	d100      	bne.n	8007766 <HAL_UART_IRQHandler+0xfa>
 8007764:	b13a      	cbz	r2, 8007776 <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007766:	6822      	ldr	r2, [r4, #0]
 8007768:	2108      	movs	r1, #8
 800776a:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800776c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8007770:	430a      	orrs	r2, r1
 8007772:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007776:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800777a:	d00c      	beq.n	8007796 <HAL_UART_IRQHandler+0x12a>
 800777c:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8007780:	d009      	beq.n	8007796 <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007782:	6822      	ldr	r2, [r4, #0]
 8007784:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007788:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800778a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800778e:	f042 0220 	orr.w	r2, r2, #32
 8007792:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007796:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800779a:	2a00      	cmp	r2, #0
 800779c:	d0aa      	beq.n	80076f4 <HAL_UART_IRQHandler+0x88>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800779e:	f013 0f20 	tst.w	r3, #32
 80077a2:	d009      	beq.n	80077b8 <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80077a4:	f010 0f20 	tst.w	r0, #32
 80077a8:	d102      	bne.n	80077b0 <HAL_UART_IRQHandler+0x144>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80077aa:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 80077ae:	d003      	beq.n	80077b8 <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 80077b0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80077b2:	b10b      	cbz	r3, 80077b8 <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 80077b4:	4620      	mov	r0, r4
 80077b6:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 80077b8:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80077bc:	6823      	ldr	r3, [r4, #0]
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80077c4:	d102      	bne.n	80077cc <HAL_UART_IRQHandler+0x160>
 80077c6:	f012 0f28 	tst.w	r2, #40	; 0x28
 80077ca:	d029      	beq.n	8007820 <HAL_UART_IRQHandler+0x1b4>
        UART_EndRxTransfer(huart);
 80077cc:	4620      	mov	r0, r4
 80077ce:	f7ff fe4e 	bl	800746e <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077d2:	6823      	ldr	r3, [r4, #0]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80077da:	d01d      	beq.n	8007818 <HAL_UART_IRQHandler+0x1ac>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077dc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077de:	f102 0308 	add.w	r3, r2, #8
 80077e2:	e853 3f00 	ldrex	r3, [r3]
 80077e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ea:	3208      	adds	r2, #8
 80077ec:	e842 3100 	strex	r1, r3, [r2]
 80077f0:	2900      	cmp	r1, #0
 80077f2:	d1f3      	bne.n	80077dc <HAL_UART_IRQHandler+0x170>
          if (huart->hdmarx != NULL)
 80077f4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80077f6:	b15b      	cbz	r3, 8007810 <HAL_UART_IRQHandler+0x1a4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80077f8:	4a3e      	ldr	r2, [pc, #248]	; (80078f4 <HAL_UART_IRQHandler+0x288>)
 80077fa:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80077fc:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80077fe:	f7fd f957 	bl	8004ab0 <HAL_DMA_Abort_IT>
 8007802:	2800      	cmp	r0, #0
 8007804:	f43f af76 	beq.w	80076f4 <HAL_UART_IRQHandler+0x88>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007808:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800780a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800780c:	4798      	blx	r3
 800780e:	e771      	b.n	80076f4 <HAL_UART_IRQHandler+0x88>
            HAL_UART_ErrorCallback(huart);
 8007810:	4620      	mov	r0, r4
 8007812:	f7ff fef3 	bl	80075fc <HAL_UART_ErrorCallback>
 8007816:	e76d      	b.n	80076f4 <HAL_UART_IRQHandler+0x88>
          HAL_UART_ErrorCallback(huart);
 8007818:	4620      	mov	r0, r4
 800781a:	f7ff feef 	bl	80075fc <HAL_UART_ErrorCallback>
 800781e:	e769      	b.n	80076f4 <HAL_UART_IRQHandler+0x88>
        HAL_UART_ErrorCallback(huart);
 8007820:	4620      	mov	r0, r4
 8007822:	f7ff feeb 	bl	80075fc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007826:	2300      	movs	r3, #0
 8007828:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    return;
 800782c:	e762      	b.n	80076f4 <HAL_UART_IRQHandler+0x88>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800782e:	f013 0f10 	tst.w	r3, #16
 8007832:	f43f af39 	beq.w	80076a8 <HAL_UART_IRQHandler+0x3c>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8007836:	f010 0f10 	tst.w	r0, #16
 800783a:	f43f af35 	beq.w	80076a8 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800783e:	2310      	movs	r3, #16
 8007840:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007842:	6823      	ldr	r3, [r4, #0]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	f013 0f40 	tst.w	r3, #64	; 0x40
 800784a:	d055      	beq.n	80078f8 <HAL_UART_IRQHandler+0x28c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800784c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800784e:	6813      	ldr	r3, [r2, #0]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 8007854:	2b00      	cmp	r3, #0
 8007856:	f43f af4d 	beq.w	80076f4 <HAL_UART_IRQHandler+0x88>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800785a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800785e:	4299      	cmp	r1, r3
 8007860:	f67f af48 	bls.w	80076f4 <HAL_UART_IRQHandler+0x88>
        huart->RxXferCount = nb_remaining_rx_data;
 8007864:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007868:	6813      	ldr	r3, [r2, #0]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f013 0f20 	tst.w	r3, #32
 8007870:	d131      	bne.n	80078d6 <HAL_UART_IRQHandler+0x26a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007872:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007874:	e852 3f00 	ldrex	r3, [r2]
 8007878:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787c:	e842 3100 	strex	r1, r3, [r2]
 8007880:	2900      	cmp	r1, #0
 8007882:	d1f6      	bne.n	8007872 <HAL_UART_IRQHandler+0x206>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007884:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007886:	f102 0308 	add.w	r3, r2, #8
 800788a:	e853 3f00 	ldrex	r3, [r3]
 800788e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007892:	3208      	adds	r2, #8
 8007894:	e842 3100 	strex	r1, r3, [r2]
 8007898:	2900      	cmp	r1, #0
 800789a:	d1f3      	bne.n	8007884 <HAL_UART_IRQHandler+0x218>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800789c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800789e:	f102 0308 	add.w	r3, r2, #8
 80078a2:	e853 3f00 	ldrex	r3, [r3]
 80078a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078aa:	3208      	adds	r2, #8
 80078ac:	e842 3100 	strex	r1, r3, [r2]
 80078b0:	2900      	cmp	r1, #0
 80078b2:	d1f3      	bne.n	800789c <HAL_UART_IRQHandler+0x230>
          huart->RxState = HAL_UART_STATE_READY;
 80078b4:	2320      	movs	r3, #32
 80078b6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078ba:	2300      	movs	r3, #0
 80078bc:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078be:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c0:	e852 3f00 	ldrex	r3, [r2]
 80078c4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c8:	e842 3100 	strex	r1, r3, [r2]
 80078cc:	2900      	cmp	r1, #0
 80078ce:	d1f6      	bne.n	80078be <HAL_UART_IRQHandler+0x252>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80078d0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80078d2:	f7fd f8b3 	bl	8004a3c <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80078d6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80078da:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80078de:	b29b      	uxth	r3, r3
 80078e0:	1ac9      	subs	r1, r1, r3
 80078e2:	b289      	uxth	r1, r1
 80078e4:	4620      	mov	r0, r4
 80078e6:	f7ff fec0 	bl	800766a <HAL_UARTEx_RxEventCallback>
      return;
 80078ea:	e703      	b.n	80076f4 <HAL_UART_IRQHandler+0x88>
 80078ec:	10000001 	.word	0x10000001
 80078f0:	04000120 	.word	0x04000120
 80078f4:	08007657 	.word	0x08007657
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80078f8:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80078fc:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007900:	b29b      	uxth	r3, r3
 8007902:	1ac9      	subs	r1, r1, r3
 8007904:	b289      	uxth	r1, r1
      if (  (huart->RxXferCount > 0U)
 8007906:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800790a:	b29b      	uxth	r3, r3
 800790c:	2b00      	cmp	r3, #0
 800790e:	f43f aef1 	beq.w	80076f4 <HAL_UART_IRQHandler+0x88>
          &&(nb_rx_data > 0U) )
 8007912:	2900      	cmp	r1, #0
 8007914:	f43f aeee 	beq.w	80076f4 <HAL_UART_IRQHandler+0x88>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007918:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791a:	e852 3f00 	ldrex	r3, [r2]
 800791e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007922:	e842 3000 	strex	r0, r3, [r2]
 8007926:	2800      	cmp	r0, #0
 8007928:	d1f6      	bne.n	8007918 <HAL_UART_IRQHandler+0x2ac>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800792a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800792c:	f102 0308 	add.w	r3, r2, #8
 8007930:	e853 3f00 	ldrex	r3, [r3]
 8007934:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007938:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793c:	3208      	adds	r2, #8
 800793e:	e842 3000 	strex	r0, r3, [r2]
 8007942:	2800      	cmp	r0, #0
 8007944:	d1f1      	bne.n	800792a <HAL_UART_IRQHandler+0x2be>
        huart->RxState = HAL_UART_STATE_READY;
 8007946:	2320      	movs	r3, #32
 8007948:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800794c:	2300      	movs	r3, #0
 800794e:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8007950:	6723      	str	r3, [r4, #112]	; 0x70
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007952:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007954:	e852 3f00 	ldrex	r3, [r2]
 8007958:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795c:	e842 3000 	strex	r0, r3, [r2]
 8007960:	2800      	cmp	r0, #0
 8007962:	d1f6      	bne.n	8007952 <HAL_UART_IRQHandler+0x2e6>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007964:	4620      	mov	r0, r4
 8007966:	f7ff fe80 	bl	800766a <HAL_UARTEx_RxEventCallback>
      return;
 800796a:	e6c3      	b.n	80076f4 <HAL_UART_IRQHandler+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800796c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007970:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8007972:	4620      	mov	r0, r4
 8007974:	f000 fe1c 	bl	80085b0 <HAL_UARTEx_WakeupCallback>
    return;
 8007978:	e6bc      	b.n	80076f4 <HAL_UART_IRQHandler+0x88>
    if (huart->TxISR != NULL)
 800797a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800797c:	2b00      	cmp	r3, #0
 800797e:	f43f aeb9 	beq.w	80076f4 <HAL_UART_IRQHandler+0x88>
      huart->TxISR(huart);
 8007982:	4620      	mov	r0, r4
 8007984:	4798      	blx	r3
    return;
 8007986:	e6b5      	b.n	80076f4 <HAL_UART_IRQHandler+0x88>
    UART_EndTransmit_IT(huart);
 8007988:	4620      	mov	r0, r4
 800798a:	f7ff fe1f 	bl	80075cc <UART_EndTransmit_IT>
    return;
 800798e:	e6b1      	b.n	80076f4 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007990:	4620      	mov	r0, r4
 8007992:	f000 fe0f 	bl	80085b4 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8007996:	e6ad      	b.n	80076f4 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007998:	4620      	mov	r0, r4
 800799a:	f000 fe0a 	bl	80085b2 <HAL_UARTEx_RxFifoFullCallback>
    return;
 800799e:	e6a9      	b.n	80076f4 <HAL_UART_IRQHandler+0x88>

080079a0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80079a0:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 80079a2:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80079a6:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80079aa:	2a22      	cmp	r2, #34	; 0x22
 80079ac:	d005      	beq.n	80079ba <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80079ae:	6802      	ldr	r2, [r0, #0]
 80079b0:	6993      	ldr	r3, [r2, #24]
 80079b2:	f043 0308 	orr.w	r3, r3, #8
 80079b6:	6193      	str	r3, [r2, #24]
  }
}
 80079b8:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80079ba:	6802      	ldr	r2, [r0, #0]
 80079bc:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80079c2:	400b      	ands	r3, r1
 80079c4:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 80079c6:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80079c8:	3301      	adds	r3, #1
 80079ca:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 80079cc:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	3b01      	subs	r3, #1
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 80079da:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80079de:	b29b      	uxth	r3, r3
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d1e9      	bne.n	80079b8 <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80079e4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e6:	e852 3f00 	ldrex	r3, [r2]
 80079ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ee:	e842 3100 	strex	r1, r3, [r2]
 80079f2:	2900      	cmp	r1, #0
 80079f4:	d1f6      	bne.n	80079e4 <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079f6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f8:	f102 0308 	add.w	r3, r2, #8
 80079fc:	e853 3f00 	ldrex	r3, [r3]
 8007a00:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a04:	3208      	adds	r2, #8
 8007a06:	e842 3100 	strex	r1, r3, [r2]
 8007a0a:	2900      	cmp	r1, #0
 8007a0c:	d1f3      	bne.n	80079f6 <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 8007a0e:	2320      	movs	r3, #32
 8007a10:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 8007a14:	2300      	movs	r3, #0
 8007a16:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a18:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d116      	bne.n	8007a4c <UART_RxISR_8BIT+0xac>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a22:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a24:	e852 3f00 	ldrex	r3, [r2]
 8007a28:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a2c:	e842 3100 	strex	r1, r3, [r2]
 8007a30:	2900      	cmp	r1, #0
 8007a32:	d1f6      	bne.n	8007a22 <UART_RxISR_8BIT+0x82>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a34:	6803      	ldr	r3, [r0, #0]
 8007a36:	69da      	ldr	r2, [r3, #28]
 8007a38:	f012 0f10 	tst.w	r2, #16
 8007a3c:	d001      	beq.n	8007a42 <UART_RxISR_8BIT+0xa2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a3e:	2210      	movs	r2, #16
 8007a40:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a42:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8007a46:	f7ff fe10 	bl	800766a <HAL_UARTEx_RxEventCallback>
 8007a4a:	e7b5      	b.n	80079b8 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8007a4c:	f7fa fcae 	bl	80023ac <HAL_UART_RxCpltCallback>
 8007a50:	e7b2      	b.n	80079b8 <UART_RxISR_8BIT+0x18>

08007a52 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007a52:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007a54:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a58:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8007a5c:	2b22      	cmp	r3, #34	; 0x22
 8007a5e:	d005      	beq.n	8007a6c <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a60:	6802      	ldr	r2, [r0, #0]
 8007a62:	6993      	ldr	r3, [r2, #24]
 8007a64:	f043 0308 	orr.w	r3, r3, #8
 8007a68:	6193      	str	r3, [r2, #24]
  }
}
 8007a6a:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a6c:	6803      	ldr	r3, [r0, #0]
 8007a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007a70:	6d81      	ldr	r1, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 8007a72:	4013      	ands	r3, r2
 8007a74:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 8007a76:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8007a78:	3302      	adds	r3, #2
 8007a7a:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8007a7c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	3b01      	subs	r3, #1
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8007a8a:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d1ea      	bne.n	8007a6a <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a94:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a96:	e852 3f00 	ldrex	r3, [r2]
 8007a9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a9e:	e842 3100 	strex	r1, r3, [r2]
 8007aa2:	2900      	cmp	r1, #0
 8007aa4:	d1f6      	bne.n	8007a94 <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aa6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa8:	f102 0308 	add.w	r3, r2, #8
 8007aac:	e853 3f00 	ldrex	r3, [r3]
 8007ab0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab4:	3208      	adds	r2, #8
 8007ab6:	e842 3100 	strex	r1, r3, [r2]
 8007aba:	2900      	cmp	r1, #0
 8007abc:	d1f3      	bne.n	8007aa6 <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 8007abe:	2320      	movs	r3, #32
 8007ac0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ac8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d116      	bne.n	8007afc <UART_RxISR_16BIT+0xaa>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ad2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad4:	e852 3f00 	ldrex	r3, [r2]
 8007ad8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007adc:	e842 3100 	strex	r1, r3, [r2]
 8007ae0:	2900      	cmp	r1, #0
 8007ae2:	d1f6      	bne.n	8007ad2 <UART_RxISR_16BIT+0x80>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ae4:	6803      	ldr	r3, [r0, #0]
 8007ae6:	69da      	ldr	r2, [r3, #28]
 8007ae8:	f012 0f10 	tst.w	r2, #16
 8007aec:	d001      	beq.n	8007af2 <UART_RxISR_16BIT+0xa0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007aee:	2210      	movs	r2, #16
 8007af0:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007af2:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8007af6:	f7ff fdb8 	bl	800766a <HAL_UARTEx_RxEventCallback>
 8007afa:	e7b6      	b.n	8007a6a <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8007afc:	f7fa fc56 	bl	80023ac <HAL_UART_RxCpltCallback>
 8007b00:	e7b3      	b.n	8007a6a <UART_RxISR_16BIT+0x18>
	...

08007b04 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007b04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 8007b08:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007b0c:	6803      	ldr	r3, [r0, #0]
 8007b0e:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007b10:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007b14:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b18:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8007b1c:	2a22      	cmp	r2, #34	; 0x22
 8007b1e:	d005      	beq.n	8007b2c <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b20:	699a      	ldr	r2, [r3, #24]
 8007b22:	f042 0208 	orr.w	r2, r2, #8
 8007b26:	619a      	str	r2, [r3, #24]
  }
}
 8007b28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b2c:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 8007b2e:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007b32:	e008      	b.n	8007b46 <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b34:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d14c      	bne.n	8007bd6 <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 8007b3c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d04e      	beq.n	8007be4 <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007b46:	2f00      	cmp	r7, #0
 8007b48:	f000 8087 	beq.w	8007c5a <UART_RxISR_8BIT_FIFOEN+0x156>
 8007b4c:	f015 0f20 	tst.w	r5, #32
 8007b50:	f000 8083 	beq.w	8007c5a <UART_RxISR_8BIT_FIFOEN+0x156>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b54:	6823      	ldr	r3, [r4, #0]
 8007b56:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007b58:	b2f3      	uxtb	r3, r6
 8007b5a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8007b5c:	400b      	ands	r3, r1
 8007b5e:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8007b60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b62:	3301      	adds	r3, #1
 8007b64:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8007b66:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	3b01      	subs	r3, #1
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007b74:	6823      	ldr	r3, [r4, #0]
 8007b76:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007b78:	f015 0f07 	tst.w	r5, #7
 8007b7c:	d0de      	beq.n	8007b3c <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007b7e:	f015 0f01 	tst.w	r5, #1
 8007b82:	d009      	beq.n	8007b98 <UART_RxISR_8BIT_FIFOEN+0x94>
 8007b84:	f419 7f80 	tst.w	r9, #256	; 0x100
 8007b88:	d006      	beq.n	8007b98 <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b8e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007b92:	4313      	orrs	r3, r2
 8007b94:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b98:	f015 0f02 	tst.w	r5, #2
 8007b9c:	d00b      	beq.n	8007bb6 <UART_RxISR_8BIT_FIFOEN+0xb2>
 8007b9e:	f018 0f01 	tst.w	r8, #1
 8007ba2:	d008      	beq.n	8007bb6 <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007ba4:	6823      	ldr	r3, [r4, #0]
 8007ba6:	2202      	movs	r2, #2
 8007ba8:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007baa:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007bae:	f043 0304 	orr.w	r3, r3, #4
 8007bb2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007bb6:	f015 0f04 	tst.w	r5, #4
 8007bba:	d0bb      	beq.n	8007b34 <UART_RxISR_8BIT_FIFOEN+0x30>
 8007bbc:	f018 0f01 	tst.w	r8, #1
 8007bc0:	d0b8      	beq.n	8007b34 <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007bc2:	6823      	ldr	r3, [r4, #0]
 8007bc4:	2204      	movs	r2, #4
 8007bc6:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007bc8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007bcc:	f043 0302 	orr.w	r3, r3, #2
 8007bd0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8007bd4:	e7ae      	b.n	8007b34 <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8007bd6:	4620      	mov	r0, r4
 8007bd8:	f7ff fd10 	bl	80075fc <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8007be2:	e7ab      	b.n	8007b3c <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007be4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be6:	e852 3f00 	ldrex	r3, [r2]
 8007bea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bee:	e842 3100 	strex	r1, r3, [r2]
 8007bf2:	2900      	cmp	r1, #0
 8007bf4:	d1f6      	bne.n	8007be4 <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007bf6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf8:	f102 0308 	add.w	r3, r2, #8
 8007bfc:	e853 3f00 	ldrex	r3, [r3]
 8007c00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c04:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c08:	3208      	adds	r2, #8
 8007c0a:	e842 3100 	strex	r1, r3, [r2]
 8007c0e:	2900      	cmp	r1, #0
 8007c10:	d1f1      	bne.n	8007bf6 <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 8007c12:	2320      	movs	r3, #32
 8007c14:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c1c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d003      	beq.n	8007c2a <UART_RxISR_8BIT_FIFOEN+0x126>
          HAL_UART_RxCpltCallback(huart);
 8007c22:	4620      	mov	r0, r4
 8007c24:	f7fa fbc2 	bl	80023ac <HAL_UART_RxCpltCallback>
 8007c28:	e78d      	b.n	8007b46 <UART_RxISR_8BIT_FIFOEN+0x42>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c2e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c30:	e852 3f00 	ldrex	r3, [r2]
 8007c34:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c38:	e842 3100 	strex	r1, r3, [r2]
 8007c3c:	2900      	cmp	r1, #0
 8007c3e:	d1f6      	bne.n	8007c2e <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007c40:	6823      	ldr	r3, [r4, #0]
 8007c42:	69da      	ldr	r2, [r3, #28]
 8007c44:	f012 0f10 	tst.w	r2, #16
 8007c48:	d001      	beq.n	8007c4e <UART_RxISR_8BIT_FIFOEN+0x14a>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c4a:	2210      	movs	r2, #16
 8007c4c:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c4e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8007c52:	4620      	mov	r0, r4
 8007c54:	f7ff fd09 	bl	800766a <HAL_UARTEx_RxEventCallback>
 8007c58:	e775      	b.n	8007b46 <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8007c5a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007c5e:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	f43f af61 	beq.w	8007b28 <UART_RxISR_8BIT_FIFOEN+0x24>
 8007c66:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	f67f af5c 	bls.w	8007b28 <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007c70:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c72:	f102 0308 	add.w	r3, r2, #8
 8007c76:	e853 3f00 	ldrex	r3, [r3]
 8007c7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7e:	3208      	adds	r2, #8
 8007c80:	e842 3100 	strex	r1, r3, [r2]
 8007c84:	2900      	cmp	r1, #0
 8007c86:	d1f3      	bne.n	8007c70 <UART_RxISR_8BIT_FIFOEN+0x16c>
      huart->RxISR = UART_RxISR_8BIT;
 8007c88:	4b05      	ldr	r3, [pc, #20]	; (8007ca0 <UART_RxISR_8BIT_FIFOEN+0x19c>)
 8007c8a:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007c8c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8e:	e852 3f00 	ldrex	r3, [r2]
 8007c92:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c96:	e842 3100 	strex	r1, r3, [r2]
 8007c9a:	2900      	cmp	r1, #0
 8007c9c:	d1f6      	bne.n	8007c8c <UART_RxISR_8BIT_FIFOEN+0x188>
 8007c9e:	e743      	b.n	8007b28 <UART_RxISR_8BIT_FIFOEN+0x24>
 8007ca0:	080079a1 	.word	0x080079a1

08007ca4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007ca8:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007cac:	6803      	ldr	r3, [r0, #0]
 8007cae:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007cb0:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007cb4:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007cb8:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8007cbc:	2a22      	cmp	r2, #34	; 0x22
 8007cbe:	d005      	beq.n	8007ccc <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007cc0:	699a      	ldr	r2, [r3, #24]
 8007cc2:	f042 0208 	orr.w	r2, r2, #8
 8007cc6:	619a      	str	r2, [r3, #24]
  }
}
 8007cc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ccc:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 8007cce:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007cd2:	e008      	b.n	8007ce6 <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007cd4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d14b      	bne.n	8007d74 <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 8007cdc:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d04d      	beq.n	8007d82 <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007ce6:	2f00      	cmp	r7, #0
 8007ce8:	f000 8086 	beq.w	8007df8 <UART_RxISR_16BIT_FIFOEN+0x154>
 8007cec:	f015 0f20 	tst.w	r5, #32
 8007cf0:	f000 8082 	beq.w	8007df8 <UART_RxISR_16BIT_FIFOEN+0x154>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007cf4:	6823      	ldr	r3, [r4, #0]
 8007cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007cf8:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 8007cfa:	4033      	ands	r3, r6
 8007cfc:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8007cfe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d00:	3302      	adds	r3, #2
 8007d02:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8007d04:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	3b01      	subs	r3, #1
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007d12:	6823      	ldr	r3, [r4, #0]
 8007d14:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007d16:	f015 0f07 	tst.w	r5, #7
 8007d1a:	d0df      	beq.n	8007cdc <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007d1c:	f015 0f01 	tst.w	r5, #1
 8007d20:	d009      	beq.n	8007d36 <UART_RxISR_16BIT_FIFOEN+0x92>
 8007d22:	f419 7f80 	tst.w	r9, #256	; 0x100
 8007d26:	d006      	beq.n	8007d36 <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007d28:	2201      	movs	r2, #1
 8007d2a:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d2c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007d30:	4313      	orrs	r3, r2
 8007d32:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d36:	f015 0f02 	tst.w	r5, #2
 8007d3a:	d00b      	beq.n	8007d54 <UART_RxISR_16BIT_FIFOEN+0xb0>
 8007d3c:	f018 0f01 	tst.w	r8, #1
 8007d40:	d008      	beq.n	8007d54 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007d42:	6823      	ldr	r3, [r4, #0]
 8007d44:	2202      	movs	r2, #2
 8007d46:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d48:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007d4c:	f043 0304 	orr.w	r3, r3, #4
 8007d50:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d54:	f015 0f04 	tst.w	r5, #4
 8007d58:	d0bc      	beq.n	8007cd4 <UART_RxISR_16BIT_FIFOEN+0x30>
 8007d5a:	f018 0f01 	tst.w	r8, #1
 8007d5e:	d0b9      	beq.n	8007cd4 <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007d60:	6823      	ldr	r3, [r4, #0]
 8007d62:	2204      	movs	r2, #4
 8007d64:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d66:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007d6a:	f043 0302 	orr.w	r3, r3, #2
 8007d6e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8007d72:	e7af      	b.n	8007cd4 <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8007d74:	4620      	mov	r0, r4
 8007d76:	f7ff fc41 	bl	80075fc <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8007d80:	e7ac      	b.n	8007cdc <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d82:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d84:	e852 3f00 	ldrex	r3, [r2]
 8007d88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d8c:	e842 3100 	strex	r1, r3, [r2]
 8007d90:	2900      	cmp	r1, #0
 8007d92:	d1f6      	bne.n	8007d82 <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d94:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d96:	f102 0308 	add.w	r3, r2, #8
 8007d9a:	e853 3f00 	ldrex	r3, [r3]
 8007d9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007da2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da6:	3208      	adds	r2, #8
 8007da8:	e842 3100 	strex	r1, r3, [r2]
 8007dac:	2900      	cmp	r1, #0
 8007dae:	d1f1      	bne.n	8007d94 <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 8007db0:	2320      	movs	r3, #32
 8007db2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 8007db6:	2300      	movs	r3, #0
 8007db8:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dba:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d003      	beq.n	8007dc8 <UART_RxISR_16BIT_FIFOEN+0x124>
          HAL_UART_RxCpltCallback(huart);
 8007dc0:	4620      	mov	r0, r4
 8007dc2:	f7fa faf3 	bl	80023ac <HAL_UART_RxCpltCallback>
 8007dc6:	e78e      	b.n	8007ce6 <UART_RxISR_16BIT_FIFOEN+0x42>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dcc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dce:	e852 3f00 	ldrex	r3, [r2]
 8007dd2:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd6:	e842 3100 	strex	r1, r3, [r2]
 8007dda:	2900      	cmp	r1, #0
 8007ddc:	d1f6      	bne.n	8007dcc <UART_RxISR_16BIT_FIFOEN+0x128>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007dde:	6823      	ldr	r3, [r4, #0]
 8007de0:	69da      	ldr	r2, [r3, #28]
 8007de2:	f012 0f10 	tst.w	r2, #16
 8007de6:	d001      	beq.n	8007dec <UART_RxISR_16BIT_FIFOEN+0x148>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007de8:	2210      	movs	r2, #16
 8007dea:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007dec:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8007df0:	4620      	mov	r0, r4
 8007df2:	f7ff fc3a 	bl	800766a <HAL_UARTEx_RxEventCallback>
 8007df6:	e776      	b.n	8007ce6 <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8007df8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007dfc:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	f43f af62 	beq.w	8007cc8 <UART_RxISR_16BIT_FIFOEN+0x24>
 8007e04:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	f67f af5d 	bls.w	8007cc8 <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007e0e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e10:	f102 0308 	add.w	r3, r2, #8
 8007e14:	e853 3f00 	ldrex	r3, [r3]
 8007e18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e1c:	3208      	adds	r2, #8
 8007e1e:	e842 3100 	strex	r1, r3, [r2]
 8007e22:	2900      	cmp	r1, #0
 8007e24:	d1f3      	bne.n	8007e0e <UART_RxISR_16BIT_FIFOEN+0x16a>
      huart->RxISR = UART_RxISR_16BIT;
 8007e26:	4b06      	ldr	r3, [pc, #24]	; (8007e40 <UART_RxISR_16BIT_FIFOEN+0x19c>)
 8007e28:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007e2a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e2c:	e852 3f00 	ldrex	r3, [r2]
 8007e30:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e34:	e842 3100 	strex	r1, r3, [r2]
 8007e38:	2900      	cmp	r1, #0
 8007e3a:	d1f6      	bne.n	8007e2a <UART_RxISR_16BIT_FIFOEN+0x186>
 8007e3c:	e744      	b.n	8007cc8 <UART_RxISR_16BIT_FIFOEN+0x24>
 8007e3e:	bf00      	nop
 8007e40:	08007a53 	.word	0x08007a53

08007e44 <UART_SetConfig>:
{
 8007e44:	b570      	push	{r4, r5, r6, lr}
 8007e46:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e48:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e4a:	6883      	ldr	r3, [r0, #8]
 8007e4c:	6902      	ldr	r2, [r0, #16]
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	6942      	ldr	r2, [r0, #20]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	69c2      	ldr	r2, [r0, #28]
 8007e56:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e58:	6808      	ldr	r0, [r1, #0]
 8007e5a:	4a9d      	ldr	r2, [pc, #628]	; (80080d0 <UART_SetConfig+0x28c>)
 8007e5c:	4002      	ands	r2, r0
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e62:	6822      	ldr	r2, [r4, #0]
 8007e64:	6853      	ldr	r3, [r2, #4]
 8007e66:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007e6a:	68e1      	ldr	r1, [r4, #12]
 8007e6c:	430b      	orrs	r3, r1
 8007e6e:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e70:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007e72:	6822      	ldr	r2, [r4, #0]
 8007e74:	4b97      	ldr	r3, [pc, #604]	; (80080d4 <UART_SetConfig+0x290>)
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d001      	beq.n	8007e7e <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 8007e7a:	6a23      	ldr	r3, [r4, #32]
 8007e7c:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e7e:	6893      	ldr	r3, [r2, #8]
 8007e80:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007e84:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007e88:	430b      	orrs	r3, r1
 8007e8a:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007e8c:	6822      	ldr	r2, [r4, #0]
 8007e8e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007e90:	f023 030f 	bic.w	r3, r3, #15
 8007e94:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007e96:	430b      	orrs	r3, r1
 8007e98:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e9a:	6823      	ldr	r3, [r4, #0]
 8007e9c:	4a8e      	ldr	r2, [pc, #568]	; (80080d8 <UART_SetConfig+0x294>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d01c      	beq.n	8007edc <UART_SetConfig+0x98>
 8007ea2:	4a8e      	ldr	r2, [pc, #568]	; (80080dc <UART_SetConfig+0x298>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d031      	beq.n	8007f0c <UART_SetConfig+0xc8>
 8007ea8:	4a8a      	ldr	r2, [pc, #552]	; (80080d4 <UART_SetConfig+0x290>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d04b      	beq.n	8007f46 <UART_SetConfig+0x102>
 8007eae:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8007eb0:	4988      	ldr	r1, [pc, #544]	; (80080d4 <UART_SetConfig+0x290>)
 8007eb2:	428b      	cmp	r3, r1
 8007eb4:	d068      	beq.n	8007f88 <UART_SetConfig+0x144>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007eb6:	69e0      	ldr	r0, [r4, #28]
 8007eb8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8007ebc:	f000 80a5 	beq.w	800800a <UART_SetConfig+0x1c6>
    switch (clocksource)
 8007ec0:	2a08      	cmp	r2, #8
 8007ec2:	f200 811f 	bhi.w	8008104 <UART_SetConfig+0x2c0>
 8007ec6:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007eca:	00d3      	.short	0x00d3
 8007ecc:	00d100f5 	.word	0x00d100f5
 8007ed0:	00f8011d 	.word	0x00f8011d
 8007ed4:	011d011d 	.word	0x011d011d
 8007ed8:	00fb011d 	.word	0x00fb011d
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8007edc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ee0:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007ee4:	f002 0203 	and.w	r2, r2, #3
 8007ee8:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007eec:	f5a2 3240 	sub.w	r2, r2, #196608	; 0x30000
 8007ef0:	2a03      	cmp	r2, #3
 8007ef2:	d809      	bhi.n	8007f08 <UART_SetConfig+0xc4>
 8007ef4:	e8df f002 	tbb	[pc, r2]
 8007ef8:	063c0402 	.word	0x063c0402
 8007efc:	2201      	movs	r2, #1
 8007efe:	e7d7      	b.n	8007eb0 <UART_SetConfig+0x6c>
 8007f00:	2204      	movs	r2, #4
 8007f02:	e7d5      	b.n	8007eb0 <UART_SetConfig+0x6c>
 8007f04:	2208      	movs	r2, #8
 8007f06:	e7d3      	b.n	8007eb0 <UART_SetConfig+0x6c>
 8007f08:	2210      	movs	r2, #16
 8007f0a:	e7d1      	b.n	8007eb0 <UART_SetConfig+0x6c>
 8007f0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f10:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007f14:	f002 020c 	and.w	r2, r2, #12
 8007f18:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 8007f1c:	f5a2 2240 	sub.w	r2, r2, #786432	; 0xc0000
 8007f20:	2a0c      	cmp	r2, #12
 8007f22:	d80e      	bhi.n	8007f42 <UART_SetConfig+0xfe>
 8007f24:	e8df f002 	tbb	[pc, r2]
 8007f28:	0d0d0d07 	.word	0x0d0d0d07
 8007f2c:	0d0d0d09 	.word	0x0d0d0d09
 8007f30:	0d0d0d26 	.word	0x0d0d0d26
 8007f34:	0b          	.byte	0x0b
 8007f35:	00          	.byte	0x00
 8007f36:	2200      	movs	r2, #0
 8007f38:	e7ba      	b.n	8007eb0 <UART_SetConfig+0x6c>
 8007f3a:	2204      	movs	r2, #4
 8007f3c:	e7b8      	b.n	8007eb0 <UART_SetConfig+0x6c>
 8007f3e:	2208      	movs	r2, #8
 8007f40:	e7b6      	b.n	8007eb0 <UART_SetConfig+0x6c>
 8007f42:	2210      	movs	r2, #16
 8007f44:	e7b4      	b.n	8007eb0 <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007f46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f4a:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007f4e:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8007f52:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8007f56:	d00f      	beq.n	8007f78 <UART_SetConfig+0x134>
 8007f58:	d805      	bhi.n	8007f66 <UART_SetConfig+0x122>
 8007f5a:	b17a      	cbz	r2, 8007f7c <UART_SetConfig+0x138>
 8007f5c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8007f60:	d10e      	bne.n	8007f80 <UART_SetConfig+0x13c>
 8007f62:	2204      	movs	r2, #4
 8007f64:	e7a4      	b.n	8007eb0 <UART_SetConfig+0x6c>
 8007f66:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8007f6a:	d10b      	bne.n	8007f84 <UART_SetConfig+0x140>
 8007f6c:	2208      	movs	r2, #8
 8007f6e:	e79f      	b.n	8007eb0 <UART_SetConfig+0x6c>
 8007f70:	2202      	movs	r2, #2
 8007f72:	e79d      	b.n	8007eb0 <UART_SetConfig+0x6c>
 8007f74:	2202      	movs	r2, #2
 8007f76:	e79b      	b.n	8007eb0 <UART_SetConfig+0x6c>
 8007f78:	2202      	movs	r2, #2
 8007f7a:	e799      	b.n	8007eb0 <UART_SetConfig+0x6c>
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	e797      	b.n	8007eb0 <UART_SetConfig+0x6c>
 8007f80:	2210      	movs	r2, #16
 8007f82:	e795      	b.n	8007eb0 <UART_SetConfig+0x6c>
 8007f84:	2210      	movs	r2, #16
 8007f86:	e793      	b.n	8007eb0 <UART_SetConfig+0x6c>
    switch (clocksource)
 8007f88:	2a08      	cmp	r2, #8
 8007f8a:	f200 809c 	bhi.w	80080c6 <UART_SetConfig+0x282>
 8007f8e:	e8df f002 	tbb	[pc, r2]
 8007f92:	9a08      	.short	0x9a08
 8007f94:	9a379a3a 	.word	0x9a379a3a
 8007f98:	9a9a      	.short	0x9a9a
 8007f9a:	05          	.byte	0x05
 8007f9b:	00          	.byte	0x00
 8007f9c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007fa0:	e004      	b.n	8007fac <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fa2:	f7fe fb0f 	bl	80065c4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007fa6:	2800      	cmp	r0, #0
 8007fa8:	f000 808f 	beq.w	80080ca <UART_SetConfig+0x286>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007fac:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007fae:	4b4c      	ldr	r3, [pc, #304]	; (80080e0 <UART_SetConfig+0x29c>)
 8007fb0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8007fb4:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007fb8:	6865      	ldr	r5, [r4, #4]
 8007fba:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8007fbe:	4299      	cmp	r1, r3
 8007fc0:	f200 8094 	bhi.w	80080ec <UART_SetConfig+0x2a8>
 8007fc4:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8007fc8:	f200 8092 	bhi.w	80080f0 <UART_SetConfig+0x2ac>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fcc:	2600      	movs	r6, #0
 8007fce:	4633      	mov	r3, r6
 8007fd0:	4631      	mov	r1, r6
 8007fd2:	f7f8 fe8d 	bl	8000cf0 <__aeabi_uldivmod>
 8007fd6:	0209      	lsls	r1, r1, #8
 8007fd8:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8007fdc:	0200      	lsls	r0, r0, #8
 8007fde:	086b      	lsrs	r3, r5, #1
 8007fe0:	18c0      	adds	r0, r0, r3
 8007fe2:	462a      	mov	r2, r5
 8007fe4:	4633      	mov	r3, r6
 8007fe6:	f141 0100 	adc.w	r1, r1, #0
 8007fea:	f7f8 fe81 	bl	8000cf0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007fee:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8007ff2:	4b3c      	ldr	r3, [pc, #240]	; (80080e4 <UART_SetConfig+0x2a0>)
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d87d      	bhi.n	80080f4 <UART_SetConfig+0x2b0>
          huart->Instance->BRR = usartdiv;
 8007ff8:	6823      	ldr	r3, [r4, #0]
 8007ffa:	60d8      	str	r0, [r3, #12]
 8007ffc:	4630      	mov	r0, r6
 8007ffe:	e050      	b.n	80080a2 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetSysClockFreq();
 8008000:	f7fd fdd8 	bl	8005bb4 <HAL_RCC_GetSysClockFreq>
        break;
 8008004:	e7cf      	b.n	8007fa6 <UART_SetConfig+0x162>
        pclk = (uint32_t) HSI_VALUE;
 8008006:	4838      	ldr	r0, [pc, #224]	; (80080e8 <UART_SetConfig+0x2a4>)
 8008008:	e7d0      	b.n	8007fac <UART_SetConfig+0x168>
    switch (clocksource)
 800800a:	2a08      	cmp	r2, #8
 800800c:	d874      	bhi.n	80080f8 <UART_SetConfig+0x2b4>
 800800e:	e8df f002 	tbb	[pc, r2]
 8008012:	2707      	.short	0x2707
 8008014:	732a7305 	.word	0x732a7305
 8008018:	7373      	.short	0x7373
 800801a:	0b          	.byte	0x0b
 800801b:	00          	.byte	0x00
 800801c:	4832      	ldr	r0, [pc, #200]	; (80080e8 <UART_SetConfig+0x2a4>)
 800801e:	e003      	b.n	8008028 <UART_SetConfig+0x1e4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008020:	f7fe fad0 	bl	80065c4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8008024:	2800      	cmp	r0, #0
 8008026:	d069      	beq.n	80080fc <UART_SetConfig+0x2b8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008028:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800802a:	4b2d      	ldr	r3, [pc, #180]	; (80080e0 <UART_SetConfig+0x29c>)
 800802c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008030:	fbb0 f0f3 	udiv	r0, r0, r3
 8008034:	6862      	ldr	r2, [r4, #4]
 8008036:	0853      	lsrs	r3, r2, #1
 8008038:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800803c:	fbb0 f0f2 	udiv	r0, r0, r2
 8008040:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008042:	f1a0 0210 	sub.w	r2, r0, #16
 8008046:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800804a:	429a      	cmp	r2, r3
 800804c:	d858      	bhi.n	8008100 <UART_SetConfig+0x2bc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800804e:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008052:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8008056:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 8008058:	6823      	ldr	r3, [r4, #0]
 800805a:	60d8      	str	r0, [r3, #12]
 800805c:	2000      	movs	r0, #0
 800805e:	e020      	b.n	80080a2 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8008060:	f7fe fac0 	bl	80065e4 <HAL_RCC_GetPCLK2Freq>
        break;
 8008064:	e7de      	b.n	8008024 <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 8008066:	f7fd fda5 	bl	8005bb4 <HAL_RCC_GetSysClockFreq>
        break;
 800806a:	e7db      	b.n	8008024 <UART_SetConfig+0x1e0>
    switch (clocksource)
 800806c:	481e      	ldr	r0, [pc, #120]	; (80080e8 <UART_SetConfig+0x2a4>)
 800806e:	e003      	b.n	8008078 <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008070:	f7fe faa8 	bl	80065c4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8008074:	2800      	cmp	r0, #0
 8008076:	d047      	beq.n	8008108 <UART_SetConfig+0x2c4>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008078:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800807a:	4b19      	ldr	r3, [pc, #100]	; (80080e0 <UART_SetConfig+0x29c>)
 800807c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008080:	fbb0 f0f3 	udiv	r0, r0, r3
 8008084:	6863      	ldr	r3, [r4, #4]
 8008086:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800808a:	fbb0 f0f3 	udiv	r0, r0, r3
 800808e:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008090:	f1a0 0210 	sub.w	r2, r0, #16
 8008094:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8008098:	429a      	cmp	r2, r3
 800809a:	d837      	bhi.n	800810c <UART_SetConfig+0x2c8>
        huart->Instance->BRR = usartdiv;
 800809c:	6823      	ldr	r3, [r4, #0]
 800809e:	60d8      	str	r0, [r3, #12]
 80080a0:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 80080a2:	2301      	movs	r3, #1
 80080a4:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80080a8:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 80080ac:	2300      	movs	r3, #0
 80080ae:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 80080b0:	6763      	str	r3, [r4, #116]	; 0x74
}
 80080b2:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 80080b4:	f7fe fa96 	bl	80065e4 <HAL_RCC_GetPCLK2Freq>
        break;
 80080b8:	e7dc      	b.n	8008074 <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetSysClockFreq();
 80080ba:	f7fd fd7b 	bl	8005bb4 <HAL_RCC_GetSysClockFreq>
        break;
 80080be:	e7d9      	b.n	8008074 <UART_SetConfig+0x230>
        pclk = (uint32_t) LSE_VALUE;
 80080c0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80080c4:	e7d8      	b.n	8008078 <UART_SetConfig+0x234>
    switch (clocksource)
 80080c6:	2001      	movs	r0, #1
 80080c8:	e7eb      	b.n	80080a2 <UART_SetConfig+0x25e>
 80080ca:	2000      	movs	r0, #0
 80080cc:	e7e9      	b.n	80080a2 <UART_SetConfig+0x25e>
 80080ce:	bf00      	nop
 80080d0:	cfff69f3 	.word	0xcfff69f3
 80080d4:	40008000 	.word	0x40008000
 80080d8:	40013800 	.word	0x40013800
 80080dc:	40004400 	.word	0x40004400
 80080e0:	080146c4 	.word	0x080146c4
 80080e4:	000ffcff 	.word	0x000ffcff
 80080e8:	00f42400 	.word	0x00f42400
        ret = HAL_ERROR;
 80080ec:	2001      	movs	r0, #1
 80080ee:	e7d8      	b.n	80080a2 <UART_SetConfig+0x25e>
 80080f0:	2001      	movs	r0, #1
 80080f2:	e7d6      	b.n	80080a2 <UART_SetConfig+0x25e>
          ret = HAL_ERROR;
 80080f4:	2001      	movs	r0, #1
 80080f6:	e7d4      	b.n	80080a2 <UART_SetConfig+0x25e>
    switch (clocksource)
 80080f8:	2001      	movs	r0, #1
 80080fa:	e7d2      	b.n	80080a2 <UART_SetConfig+0x25e>
 80080fc:	2000      	movs	r0, #0
 80080fe:	e7d0      	b.n	80080a2 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8008100:	2001      	movs	r0, #1
 8008102:	e7ce      	b.n	80080a2 <UART_SetConfig+0x25e>
    switch (clocksource)
 8008104:	2001      	movs	r0, #1
 8008106:	e7cc      	b.n	80080a2 <UART_SetConfig+0x25e>
 8008108:	2000      	movs	r0, #0
 800810a:	e7ca      	b.n	80080a2 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 800810c:	2001      	movs	r0, #1
 800810e:	e7c8      	b.n	80080a2 <UART_SetConfig+0x25e>

08008110 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008110:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008112:	f013 0f01 	tst.w	r3, #1
 8008116:	d006      	beq.n	8008126 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008118:	6802      	ldr	r2, [r0, #0]
 800811a:	6853      	ldr	r3, [r2, #4]
 800811c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008120:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8008122:	430b      	orrs	r3, r1
 8008124:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008126:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008128:	f013 0f02 	tst.w	r3, #2
 800812c:	d006      	beq.n	800813c <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800812e:	6802      	ldr	r2, [r0, #0]
 8008130:	6853      	ldr	r3, [r2, #4]
 8008132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008136:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8008138:	430b      	orrs	r3, r1
 800813a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800813c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800813e:	f013 0f04 	tst.w	r3, #4
 8008142:	d006      	beq.n	8008152 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008144:	6802      	ldr	r2, [r0, #0]
 8008146:	6853      	ldr	r3, [r2, #4]
 8008148:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800814c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800814e:	430b      	orrs	r3, r1
 8008150:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008152:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008154:	f013 0f08 	tst.w	r3, #8
 8008158:	d006      	beq.n	8008168 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800815a:	6802      	ldr	r2, [r0, #0]
 800815c:	6853      	ldr	r3, [r2, #4]
 800815e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008162:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8008164:	430b      	orrs	r3, r1
 8008166:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008168:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800816a:	f013 0f10 	tst.w	r3, #16
 800816e:	d006      	beq.n	800817e <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008170:	6802      	ldr	r2, [r0, #0]
 8008172:	6893      	ldr	r3, [r2, #8]
 8008174:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008178:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800817a:	430b      	orrs	r3, r1
 800817c:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800817e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008180:	f013 0f20 	tst.w	r3, #32
 8008184:	d006      	beq.n	8008194 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008186:	6802      	ldr	r2, [r0, #0]
 8008188:	6893      	ldr	r3, [r2, #8]
 800818a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800818e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8008190:	430b      	orrs	r3, r1
 8008192:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008194:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008196:	f013 0f40 	tst.w	r3, #64	; 0x40
 800819a:	d00a      	beq.n	80081b2 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800819c:	6802      	ldr	r2, [r0, #0]
 800819e:	6853      	ldr	r3, [r2, #4]
 80081a0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80081a4:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80081a6:	430b      	orrs	r3, r1
 80081a8:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80081aa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80081ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081b0:	d00b      	beq.n	80081ca <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80081b2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80081b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80081b8:	d006      	beq.n	80081c8 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80081ba:	6802      	ldr	r2, [r0, #0]
 80081bc:	6853      	ldr	r3, [r2, #4]
 80081be:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80081c2:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80081c4:	430b      	orrs	r3, r1
 80081c6:	6053      	str	r3, [r2, #4]
}
 80081c8:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80081ca:	6802      	ldr	r2, [r0, #0]
 80081cc:	6853      	ldr	r3, [r2, #4]
 80081ce:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80081d2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80081d4:	430b      	orrs	r3, r1
 80081d6:	6053      	str	r3, [r2, #4]
 80081d8:	e7eb      	b.n	80081b2 <UART_AdvFeatureConfig+0xa2>

080081da <UART_WaitOnFlagUntilTimeout>:
{
 80081da:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081de:	4605      	mov	r5, r0
 80081e0:	460f      	mov	r7, r1
 80081e2:	4616      	mov	r6, r2
 80081e4:	4699      	mov	r9, r3
 80081e6:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081ea:	682c      	ldr	r4, [r5, #0]
 80081ec:	69e4      	ldr	r4, [r4, #28]
 80081ee:	ea37 0304 	bics.w	r3, r7, r4
 80081f2:	bf0c      	ite	eq
 80081f4:	f04f 0c01 	moveq.w	ip, #1
 80081f8:	f04f 0c00 	movne.w	ip, #0
 80081fc:	45b4      	cmp	ip, r6
 80081fe:	d157      	bne.n	80082b0 <UART_WaitOnFlagUntilTimeout+0xd6>
    if (Timeout != HAL_MAX_DELAY)
 8008200:	f1b8 3fff 	cmp.w	r8, #4294967295
 8008204:	d0f1      	beq.n	80081ea <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008206:	f7f9 fc5f 	bl	8001ac8 <HAL_GetTick>
 800820a:	eba0 0009 	sub.w	r0, r0, r9
 800820e:	4540      	cmp	r0, r8
 8008210:	d82f      	bhi.n	8008272 <UART_WaitOnFlagUntilTimeout+0x98>
 8008212:	f1b8 0f00 	cmp.w	r8, #0
 8008216:	d02c      	beq.n	8008272 <UART_WaitOnFlagUntilTimeout+0x98>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008218:	682b      	ldr	r3, [r5, #0]
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	f012 0f04 	tst.w	r2, #4
 8008220:	d0e3      	beq.n	80081ea <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008222:	69da      	ldr	r2, [r3, #28]
 8008224:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8008228:	d0df      	beq.n	80081ea <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800822a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800822e:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008230:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008232:	e852 3f00 	ldrex	r3, [r2]
 8008236:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800823a:	e842 3100 	strex	r1, r3, [r2]
 800823e:	2900      	cmp	r1, #0
 8008240:	d1f6      	bne.n	8008230 <UART_WaitOnFlagUntilTimeout+0x56>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008242:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008244:	f102 0308 	add.w	r3, r2, #8
 8008248:	e853 3f00 	ldrex	r3, [r3]
 800824c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008250:	3208      	adds	r2, #8
 8008252:	e842 3100 	strex	r1, r3, [r2]
 8008256:	2900      	cmp	r1, #0
 8008258:	d1f3      	bne.n	8008242 <UART_WaitOnFlagUntilTimeout+0x68>
          huart->gState = HAL_UART_STATE_READY;
 800825a:	2320      	movs	r3, #32
 800825c:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008260:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008264:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 8008268:	2300      	movs	r3, #0
 800826a:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
          return HAL_TIMEOUT;
 800826e:	2003      	movs	r0, #3
 8008270:	e01f      	b.n	80082b2 <UART_WaitOnFlagUntilTimeout+0xd8>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008272:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008274:	e852 3f00 	ldrex	r3, [r2]
 8008278:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800827c:	e842 3100 	strex	r1, r3, [r2]
 8008280:	2900      	cmp	r1, #0
 8008282:	d1f6      	bne.n	8008272 <UART_WaitOnFlagUntilTimeout+0x98>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008284:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008286:	f102 0308 	add.w	r3, r2, #8
 800828a:	e853 3f00 	ldrex	r3, [r3]
 800828e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008292:	3208      	adds	r2, #8
 8008294:	e842 3100 	strex	r1, r3, [r2]
 8008298:	2900      	cmp	r1, #0
 800829a:	d1f3      	bne.n	8008284 <UART_WaitOnFlagUntilTimeout+0xaa>
        huart->gState = HAL_UART_STATE_READY;
 800829c:	2320      	movs	r3, #32
 800829e:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80082a2:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 80082a6:	2300      	movs	r3, #0
 80082a8:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 80082ac:	2003      	movs	r0, #3
 80082ae:	e000      	b.n	80082b2 <UART_WaitOnFlagUntilTimeout+0xd8>
  return HAL_OK;
 80082b0:	2000      	movs	r0, #0
}
 80082b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080082b6 <UART_CheckIdleState>:
{
 80082b6:	b530      	push	{r4, r5, lr}
 80082b8:	b083      	sub	sp, #12
 80082ba:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082bc:	2300      	movs	r3, #0
 80082be:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 80082c2:	f7f9 fc01 	bl	8001ac8 <HAL_GetTick>
 80082c6:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80082c8:	6822      	ldr	r2, [r4, #0]
 80082ca:	6812      	ldr	r2, [r2, #0]
 80082cc:	f012 0f08 	tst.w	r2, #8
 80082d0:	d10f      	bne.n	80082f2 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80082d2:	6823      	ldr	r3, [r4, #0]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f013 0f04 	tst.w	r3, #4
 80082da:	d118      	bne.n	800830e <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 80082dc:	2320      	movs	r3, #32
 80082de:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80082e2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082e6:	2000      	movs	r0, #0
 80082e8:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 80082ea:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 80082ee:	b003      	add	sp, #12
 80082f0:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80082f6:	9300      	str	r3, [sp, #0]
 80082f8:	4603      	mov	r3, r0
 80082fa:	2200      	movs	r2, #0
 80082fc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008300:	4620      	mov	r0, r4
 8008302:	f7ff ff6a 	bl	80081da <UART_WaitOnFlagUntilTimeout>
 8008306:	2800      	cmp	r0, #0
 8008308:	d0e3      	beq.n	80082d2 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 800830a:	2003      	movs	r0, #3
 800830c:	e7ef      	b.n	80082ee <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800830e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008312:	9300      	str	r3, [sp, #0]
 8008314:	462b      	mov	r3, r5
 8008316:	2200      	movs	r2, #0
 8008318:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800831c:	4620      	mov	r0, r4
 800831e:	f7ff ff5c 	bl	80081da <UART_WaitOnFlagUntilTimeout>
 8008322:	2800      	cmp	r0, #0
 8008324:	d0da      	beq.n	80082dc <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8008326:	2003      	movs	r0, #3
 8008328:	e7e1      	b.n	80082ee <UART_CheckIdleState+0x38>

0800832a <HAL_UART_Init>:
  if (huart == NULL)
 800832a:	b378      	cbz	r0, 800838c <HAL_UART_Init+0x62>
{
 800832c:	b510      	push	{r4, lr}
 800832e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8008330:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8008334:	b30b      	cbz	r3, 800837a <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8008336:	2324      	movs	r3, #36	; 0x24
 8008338:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800833c:	6822      	ldr	r2, [r4, #0]
 800833e:	6813      	ldr	r3, [r2, #0]
 8008340:	f023 0301 	bic.w	r3, r3, #1
 8008344:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008346:	4620      	mov	r0, r4
 8008348:	f7ff fd7c 	bl	8007e44 <UART_SetConfig>
 800834c:	2801      	cmp	r0, #1
 800834e:	d013      	beq.n	8008378 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008350:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008352:	b9bb      	cbnz	r3, 8008384 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008354:	6822      	ldr	r2, [r4, #0]
 8008356:	6853      	ldr	r3, [r2, #4]
 8008358:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800835c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800835e:	6822      	ldr	r2, [r4, #0]
 8008360:	6893      	ldr	r3, [r2, #8]
 8008362:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8008366:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8008368:	6822      	ldr	r2, [r4, #0]
 800836a:	6813      	ldr	r3, [r2, #0]
 800836c:	f043 0301 	orr.w	r3, r3, #1
 8008370:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8008372:	4620      	mov	r0, r4
 8008374:	f7ff ff9f 	bl	80082b6 <UART_CheckIdleState>
}
 8008378:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800837a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 800837e:	f7f9 ff01 	bl	8002184 <HAL_UART_MspInit>
 8008382:	e7d8      	b.n	8008336 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8008384:	4620      	mov	r0, r4
 8008386:	f7ff fec3 	bl	8008110 <UART_AdvFeatureConfig>
 800838a:	e7e3      	b.n	8008354 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 800838c:	2001      	movs	r0, #1
}
 800838e:	4770      	bx	lr

08008390 <UART_Start_Receive_IT>:
{
 8008390:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 8008392:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008394:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008398:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 800839c:	2300      	movs	r3, #0
 800839e:	6703      	str	r3, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 80083a0:	6883      	ldr	r3, [r0, #8]
 80083a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083a6:	d006      	beq.n	80083b6 <UART_Start_Receive_IT+0x26>
 80083a8:	b9a3      	cbnz	r3, 80083d4 <UART_Start_Receive_IT+0x44>
 80083aa:	6903      	ldr	r3, [r0, #16]
 80083ac:	b973      	cbnz	r3, 80083cc <UART_Start_Receive_IT+0x3c>
 80083ae:	23ff      	movs	r3, #255	; 0xff
 80083b0:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80083b4:	e014      	b.n	80083e0 <UART_Start_Receive_IT+0x50>
 80083b6:	6903      	ldr	r3, [r0, #16]
 80083b8:	b923      	cbnz	r3, 80083c4 <UART_Start_Receive_IT+0x34>
 80083ba:	f240 13ff 	movw	r3, #511	; 0x1ff
 80083be:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80083c2:	e00d      	b.n	80083e0 <UART_Start_Receive_IT+0x50>
 80083c4:	23ff      	movs	r3, #255	; 0xff
 80083c6:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80083ca:	e009      	b.n	80083e0 <UART_Start_Receive_IT+0x50>
 80083cc:	237f      	movs	r3, #127	; 0x7f
 80083ce:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80083d2:	e005      	b.n	80083e0 <UART_Start_Receive_IT+0x50>
 80083d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083d8:	d030      	beq.n	800843c <UART_Start_Receive_IT+0xac>
 80083da:	2300      	movs	r3, #0
 80083dc:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083e0:	2300      	movs	r3, #0
 80083e2:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80083e6:	2322      	movs	r3, #34	; 0x22
 80083e8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083ec:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ee:	f101 0308 	add.w	r3, r1, #8
 80083f2:	e853 3f00 	ldrex	r3, [r3]
 80083f6:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083fa:	3108      	adds	r1, #8
 80083fc:	e841 3400 	strex	r4, r3, [r1]
 8008400:	2c00      	cmp	r4, #0
 8008402:	d1f3      	bne.n	80083ec <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008404:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8008406:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800840a:	d021      	beq.n	8008450 <UART_Start_Receive_IT+0xc0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800840c:	6883      	ldr	r3, [r0, #8]
 800840e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008412:	d048      	beq.n	80084a6 <UART_Start_Receive_IT+0x116>
      huart->RxISR = UART_RxISR_8BIT;
 8008414:	4b2c      	ldr	r3, [pc, #176]	; (80084c8 <UART_Start_Receive_IT+0x138>)
 8008416:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8008418:	2300      	movs	r3, #0
 800841a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 800841e:	6903      	ldr	r3, [r0, #16]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d046      	beq.n	80084b2 <UART_Start_Receive_IT+0x122>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008424:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008426:	e852 3f00 	ldrex	r3, [r2]
 800842a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800842e:	e842 3100 	strex	r1, r3, [r2]
 8008432:	2900      	cmp	r1, #0
 8008434:	d1f6      	bne.n	8008424 <UART_Start_Receive_IT+0x94>
}
 8008436:	2000      	movs	r0, #0
 8008438:	bc10      	pop	{r4}
 800843a:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 800843c:	6903      	ldr	r3, [r0, #16]
 800843e:	b91b      	cbnz	r3, 8008448 <UART_Start_Receive_IT+0xb8>
 8008440:	237f      	movs	r3, #127	; 0x7f
 8008442:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8008446:	e7cb      	b.n	80083e0 <UART_Start_Receive_IT+0x50>
 8008448:	233f      	movs	r3, #63	; 0x3f
 800844a:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800844e:	e7c7      	b.n	80083e0 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008450:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8008454:	4293      	cmp	r3, r2
 8008456:	d8d9      	bhi.n	800840c <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008458:	6883      	ldr	r3, [r0, #8]
 800845a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800845e:	d01c      	beq.n	800849a <UART_Start_Receive_IT+0x10a>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008460:	4b1a      	ldr	r3, [pc, #104]	; (80084cc <UART_Start_Receive_IT+0x13c>)
 8008462:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8008464:	2300      	movs	r3, #0
 8008466:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 800846a:	6903      	ldr	r3, [r0, #16]
 800846c:	b143      	cbz	r3, 8008480 <UART_Start_Receive_IT+0xf0>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800846e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008470:	e852 3f00 	ldrex	r3, [r2]
 8008474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008478:	e842 3100 	strex	r1, r3, [r2]
 800847c:	2900      	cmp	r1, #0
 800847e:	d1f6      	bne.n	800846e <UART_Start_Receive_IT+0xde>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008480:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008482:	f102 0308 	add.w	r3, r2, #8
 8008486:	e853 3f00 	ldrex	r3, [r3]
 800848a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800848e:	3208      	adds	r2, #8
 8008490:	e842 3100 	strex	r1, r3, [r2]
 8008494:	2900      	cmp	r1, #0
 8008496:	d1f3      	bne.n	8008480 <UART_Start_Receive_IT+0xf0>
 8008498:	e7cd      	b.n	8008436 <UART_Start_Receive_IT+0xa6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800849a:	6903      	ldr	r3, [r0, #16]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d1df      	bne.n	8008460 <UART_Start_Receive_IT+0xd0>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80084a0:	4b0b      	ldr	r3, [pc, #44]	; (80084d0 <UART_Start_Receive_IT+0x140>)
 80084a2:	6703      	str	r3, [r0, #112]	; 0x70
 80084a4:	e7de      	b.n	8008464 <UART_Start_Receive_IT+0xd4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084a6:	6903      	ldr	r3, [r0, #16]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d1b3      	bne.n	8008414 <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 80084ac:	4b09      	ldr	r3, [pc, #36]	; (80084d4 <UART_Start_Receive_IT+0x144>)
 80084ae:	6703      	str	r3, [r0, #112]	; 0x70
 80084b0:	e7b2      	b.n	8008418 <UART_Start_Receive_IT+0x88>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80084b2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b4:	e852 3f00 	ldrex	r3, [r2]
 80084b8:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084bc:	e842 3100 	strex	r1, r3, [r2]
 80084c0:	2900      	cmp	r1, #0
 80084c2:	d1f6      	bne.n	80084b2 <UART_Start_Receive_IT+0x122>
 80084c4:	e7b7      	b.n	8008436 <UART_Start_Receive_IT+0xa6>
 80084c6:	bf00      	nop
 80084c8:	080079a1 	.word	0x080079a1
 80084cc:	08007b05 	.word	0x08007b05
 80084d0:	08007ca5 	.word	0x08007ca5
 80084d4:	08007a53 	.word	0x08007a53

080084d8 <HAL_UART_Receive_IT>:
{
 80084d8:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80084da:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80084de:	2b20      	cmp	r3, #32
 80084e0:	d11e      	bne.n	8008520 <HAL_UART_Receive_IT+0x48>
    if ((pData == NULL) || (Size == 0U))
 80084e2:	b1f9      	cbz	r1, 8008524 <HAL_UART_Receive_IT+0x4c>
 80084e4:	b302      	cbz	r2, 8008528 <HAL_UART_Receive_IT+0x50>
    __HAL_LOCK(huart);
 80084e6:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d01e      	beq.n	800852c <HAL_UART_Receive_IT+0x54>
 80084ee:	2301      	movs	r3, #1
 80084f0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084f4:	2300      	movs	r3, #0
 80084f6:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80084f8:	6803      	ldr	r3, [r0, #0]
 80084fa:	4c0d      	ldr	r4, [pc, #52]	; (8008530 <HAL_UART_Receive_IT+0x58>)
 80084fc:	42a3      	cmp	r3, r4
 80084fe:	d00c      	beq.n	800851a <HAL_UART_Receive_IT+0x42>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8008506:	d008      	beq.n	800851a <HAL_UART_Receive_IT+0x42>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008508:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800850a:	e854 3f00 	ldrex	r3, [r4]
 800850e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008512:	e844 3500 	strex	r5, r3, [r4]
 8008516:	2d00      	cmp	r5, #0
 8008518:	d1f6      	bne.n	8008508 <HAL_UART_Receive_IT+0x30>
    return(UART_Start_Receive_IT(huart, pData, Size));
 800851a:	f7ff ff39 	bl	8008390 <UART_Start_Receive_IT>
 800851e:	e000      	b.n	8008522 <HAL_UART_Receive_IT+0x4a>
    return HAL_BUSY;
 8008520:	2002      	movs	r0, #2
}
 8008522:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8008524:	2001      	movs	r0, #1
 8008526:	e7fc      	b.n	8008522 <HAL_UART_Receive_IT+0x4a>
 8008528:	2001      	movs	r0, #1
 800852a:	e7fa      	b.n	8008522 <HAL_UART_Receive_IT+0x4a>
    __HAL_LOCK(huart);
 800852c:	2002      	movs	r0, #2
 800852e:	e7f8      	b.n	8008522 <HAL_UART_Receive_IT+0x4a>
 8008530:	40008000 	.word	0x40008000

08008534 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8008534:	b082      	sub	sp, #8
 8008536:	ab02      	add	r3, sp, #8
 8008538:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800853c:	6802      	ldr	r2, [r0, #0]
 800853e:	6853      	ldr	r3, [r2, #4]
 8008540:	f023 0310 	bic.w	r3, r3, #16
 8008544:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8008548:	430b      	orrs	r3, r1
 800854a:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800854c:	6802      	ldr	r2, [r0, #0]
 800854e:	6853      	ldr	r3, [r2, #4]
 8008550:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008554:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8008558:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800855c:	6053      	str	r3, [r2, #4]
}
 800855e:	b002      	add	sp, #8
 8008560:	4770      	bx	lr
	...

08008564 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008564:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8008566:	b92b      	cbnz	r3, 8008574 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8008568:	2301      	movs	r3, #1
 800856a:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800856e:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8008572:	4770      	bx	lr
{
 8008574:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008576:	6803      	ldr	r3, [r0, #0]
 8008578:	689a      	ldr	r2, [r3, #8]
 800857a:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800857e:	6899      	ldr	r1, [r3, #8]
 8008580:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008582:	4d09      	ldr	r5, [pc, #36]	; (80085a8 <UARTEx_SetNbDataToProcess+0x44>)
 8008584:	5c6b      	ldrb	r3, [r5, r1]
 8008586:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008588:	4c08      	ldr	r4, [pc, #32]	; (80085ac <UARTEx_SetNbDataToProcess+0x48>)
 800858a:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800858c:	fb93 f3f1 	sdiv	r3, r3, r1
 8008590:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008594:	5cab      	ldrb	r3, [r5, r2]
 8008596:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008598:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800859a:	fb93 f3f2 	sdiv	r3, r3, r2
 800859e:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 80085a2:	bc30      	pop	{r4, r5}
 80085a4:	4770      	bx	lr
 80085a6:	bf00      	nop
 80085a8:	080146e4 	.word	0x080146e4
 80085ac:	080146dc 	.word	0x080146dc

080085b0 <HAL_UARTEx_WakeupCallback>:
}
 80085b0:	4770      	bx	lr

080085b2 <HAL_UARTEx_RxFifoFullCallback>:
}
 80085b2:	4770      	bx	lr

080085b4 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 80085b4:	4770      	bx	lr

080085b6 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 80085b6:	b510      	push	{r4, lr}
 80085b8:	b084      	sub	sp, #16
 80085ba:	ab04      	add	r3, sp, #16
 80085bc:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 80085c0:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d035      	beq.n	8008634 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 80085c8:	4604      	mov	r4, r0
 80085ca:	2301      	movs	r3, #1
 80085cc:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 80085d0:	2324      	movs	r3, #36	; 0x24
 80085d2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 80085d6:	6802      	ldr	r2, [r0, #0]
 80085d8:	6813      	ldr	r3, [r2, #0]
 80085da:	f023 0301 	bic.w	r3, r3, #1
 80085de:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 80085e0:	6801      	ldr	r1, [r0, #0]
 80085e2:	688b      	ldr	r3, [r1, #8]
 80085e4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80085e8:	9a02      	ldr	r2, [sp, #8]
 80085ea:	4313      	orrs	r3, r2
 80085ec:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 80085ee:	b1aa      	cbz	r2, 800861c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 80085f0:	6822      	ldr	r2, [r4, #0]
 80085f2:	6813      	ldr	r3, [r2, #0]
 80085f4:	f043 0301 	orr.w	r3, r3, #1
 80085f8:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80085fa:	f7f9 fa65 	bl	8001ac8 <HAL_GetTick>
 80085fe:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008600:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8008604:	9200      	str	r2, [sp, #0]
 8008606:	2200      	movs	r2, #0
 8008608:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800860c:	4620      	mov	r0, r4
 800860e:	f7ff fde4 	bl	80081da <UART_WaitOnFlagUntilTimeout>
 8008612:	b948      	cbnz	r0, 8008628 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 8008614:	2320      	movs	r3, #32
 8008616:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800861a:	e006      	b.n	800862a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800861c:	ab04      	add	r3, sp, #16
 800861e:	e913 0006 	ldmdb	r3, {r1, r2}
 8008622:	f7ff ff87 	bl	8008534 <UARTEx_Wakeup_AddressConfig>
 8008626:	e7e3      	b.n	80085f0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 8008628:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 800862a:	2300      	movs	r3, #0
 800862c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8008630:	b004      	add	sp, #16
 8008632:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8008634:	2002      	movs	r0, #2
 8008636:	e7fb      	b.n	8008630 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

08008638 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 8008638:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800863c:	2b01      	cmp	r3, #1
 800863e:	d010      	beq.n	8008662 <HAL_UARTEx_EnableStopMode+0x2a>
 8008640:	2301      	movs	r3, #1
 8008642:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8008646:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008648:	e852 3f00 	ldrex	r3, [r2]
 800864c:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008650:	e842 3100 	strex	r1, r3, [r2]
 8008654:	2900      	cmp	r1, #0
 8008656:	d1f6      	bne.n	8008646 <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 8008658:	2300      	movs	r3, #0
 800865a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 800865e:	4618      	mov	r0, r3
 8008660:	4770      	bx	lr
  __HAL_LOCK(huart);
 8008662:	2002      	movs	r0, #2
}
 8008664:	4770      	bx	lr

08008666 <HAL_UARTEx_EnableFifoMode>:
  __HAL_LOCK(huart);
 8008666:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800866a:	2b01      	cmp	r3, #1
 800866c:	d01d      	beq.n	80086aa <HAL_UARTEx_EnableFifoMode+0x44>
{
 800866e:	b510      	push	{r4, lr}
 8008670:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8008672:	2301      	movs	r3, #1
 8008674:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8008678:	2324      	movs	r3, #36	; 0x24
 800867a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800867e:	6802      	ldr	r2, [r0, #0]
 8008680:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8008682:	6811      	ldr	r1, [r2, #0]
 8008684:	f021 0101 	bic.w	r1, r1, #1
 8008688:	6011      	str	r1, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800868a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800868e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8008692:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008694:	6802      	ldr	r2, [r0, #0]
 8008696:	6013      	str	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 8008698:	f7ff ff64 	bl	8008564 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 800869c:	2320      	movs	r3, #32
 800869e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80086a2:	2000      	movs	r0, #0
 80086a4:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 80086a8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 80086aa:	2002      	movs	r0, #2
}
 80086ac:	4770      	bx	lr

080086ae <HAL_UARTEx_SetTxFifoThreshold>:
{
 80086ae:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80086b0:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d01d      	beq.n	80086f4 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 80086b8:	4604      	mov	r4, r0
 80086ba:	2301      	movs	r3, #1
 80086bc:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 80086c0:	2324      	movs	r3, #36	; 0x24
 80086c2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80086c6:	6803      	ldr	r3, [r0, #0]
 80086c8:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80086ca:	681a      	ldr	r2, [r3, #0]
 80086cc:	f022 0201 	bic.w	r2, r2, #1
 80086d0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80086d2:	6802      	ldr	r2, [r0, #0]
 80086d4:	6893      	ldr	r3, [r2, #8]
 80086d6:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80086da:	4319      	orrs	r1, r3
 80086dc:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80086de:	f7ff ff41 	bl	8008564 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086e2:	6823      	ldr	r3, [r4, #0]
 80086e4:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80086e6:	2320      	movs	r3, #32
 80086e8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80086ec:	2000      	movs	r0, #0
 80086ee:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 80086f2:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80086f4:	2002      	movs	r0, #2
 80086f6:	e7fc      	b.n	80086f2 <HAL_UARTEx_SetTxFifoThreshold+0x44>

080086f8 <HAL_UARTEx_SetRxFifoThreshold>:
{
 80086f8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80086fa:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d01d      	beq.n	800873e <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8008702:	4604      	mov	r4, r0
 8008704:	2301      	movs	r3, #1
 8008706:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800870a:	2324      	movs	r3, #36	; 0x24
 800870c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008710:	6803      	ldr	r3, [r0, #0]
 8008712:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8008714:	681a      	ldr	r2, [r3, #0]
 8008716:	f022 0201 	bic.w	r2, r2, #1
 800871a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800871c:	6802      	ldr	r2, [r0, #0]
 800871e:	6893      	ldr	r3, [r2, #8]
 8008720:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8008724:	4319      	orrs	r1, r3
 8008726:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8008728:	f7ff ff1c 	bl	8008564 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800872c:	6823      	ldr	r3, [r4, #0]
 800872e:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8008730:	2320      	movs	r3, #32
 8008732:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8008736:	2000      	movs	r0, #0
 8008738:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800873c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800873e:	2002      	movs	r0, #2
 8008740:	e7fc      	b.n	800873c <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

08008744 <LmHandlerPackageIsInitialized>:
    }
}

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 8008744:	2804      	cmp	r0, #4
 8008746:	d807      	bhi.n	8008758 <LmHandlerPackageIsInitialized+0x14>
{
 8008748:	b508      	push	{r3, lr}
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800874a:	4b05      	ldr	r3, [pc, #20]	; (8008760 <LmHandlerPackageIsInitialized+0x1c>)
 800874c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	b11b      	cbz	r3, 800875c <LmHandlerPackageIsInitialized+0x18>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 8008754:	4798      	blx	r3
    }
    else
    {
        return false;
    }
}
 8008756:	bd08      	pop	{r3, pc}
        return false;
 8008758:	2000      	movs	r0, #0
}
 800875a:	4770      	bx	lr
        return false;
 800875c:	2000      	movs	r0, #0
 800875e:	e7fa      	b.n	8008756 <LmHandlerPackageIsInitialized+0x12>
 8008760:	20000760 	.word	0x20000760

08008764 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 8008764:	b570      	push	{r4, r5, r6, lr}
 8008766:	4605      	mov	r5, r0
 8008768:	460e      	mov	r6, r1
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800876a:	2400      	movs	r4, #0
 800876c:	e005      	b.n	800877a <LmHandlerPackagesNotify+0x16>
        {
            switch( notifyType )
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800876e:	699b      	ldr	r3, [r3, #24]
 8008770:	b10b      	cbz	r3, 8008776 <LmHandlerPackagesNotify+0x12>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 8008772:	4630      	mov	r0, r6
 8008774:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8008776:	3401      	adds	r4, #1
 8008778:	b264      	sxtb	r4, r4
 800877a:	2c04      	cmp	r4, #4
 800877c:	dc24      	bgt.n	80087c8 <LmHandlerPackagesNotify+0x64>
        if( LmHandlerPackages[i] != NULL )
 800877e:	4b13      	ldr	r3, [pc, #76]	; (80087cc <LmHandlerPackagesNotify+0x68>)
 8008780:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d0f6      	beq.n	8008776 <LmHandlerPackagesNotify+0x12>
            switch( notifyType )
 8008788:	2d03      	cmp	r5, #3
 800878a:	d8f4      	bhi.n	8008776 <LmHandlerPackagesNotify+0x12>
 800878c:	a201      	add	r2, pc, #4	; (adr r2, 8008794 <LmHandlerPackagesNotify+0x30>)
 800878e:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 8008792:	bf00      	nop
 8008794:	0800876f 	.word	0x0800876f
 8008798:	080087a5 	.word	0x080087a5
 800879c:	080087b1 	.word	0x080087b1
 80087a0:	080087bd 	.word	0x080087bd
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 80087a4:	69db      	ldr	r3, [r3, #28]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d0e5      	beq.n	8008776 <LmHandlerPackagesNotify+0x12>
#endif /* LORAMAC_VERSION */
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 80087aa:	4630      	mov	r0, r6
 80087ac:	4798      	blx	r3
 80087ae:	e7e2      	b.n	8008776 <LmHandlerPackagesNotify+0x12>
                    }
                    break;
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 80087b0:	6a1b      	ldr	r3, [r3, #32]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d0df      	beq.n	8008776 <LmHandlerPackagesNotify+0x12>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 80087b6:	4630      	mov	r0, r6
 80087b8:	4798      	blx	r3
 80087ba:	e7dc      	b.n	8008776 <LmHandlerPackagesNotify+0x12>
                    }
                    break;
                }
                case PACKAGE_MLME_INDICATION:
                {
                    if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 80087bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d0d9      	beq.n	8008776 <LmHandlerPackagesNotify+0x12>
                    {
                        LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 80087c2:	4630      	mov	r0, r6
 80087c4:	4798      	blx	r3
 80087c6:	e7d6      	b.n	8008776 <LmHandlerPackagesNotify+0x12>
                    break;
                }
            }
        }
    }
}
 80087c8:	bd70      	pop	{r4, r5, r6, pc}
 80087ca:	bf00      	nop
 80087cc:	20000760 	.word	0x20000760

080087d0 <MlmeIndication>:
{
 80087d0:	b510      	push	{r4, lr}
 80087d2:	4604      	mov	r4, r0
    RxParams.IsMcpsIndication = 0;
 80087d4:	4b14      	ldr	r3, [pc, #80]	; (8008828 <MlmeIndication+0x58>)
 80087d6:	2200      	movs	r2, #0
 80087d8:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 80087da:	7842      	ldrb	r2, [r0, #1]
 80087dc:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 80087de:	f990 2002 	ldrsb.w	r2, [r0, #2]
 80087e2:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 80087e4:	f9b1 2000 	ldrsh.w	r2, [r1]
 80087e8:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 80087ea:	f991 2002 	ldrsb.w	r2, [r1, #2]
 80087ee:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 80087f0:	78ca      	ldrb	r2, [r1, #3]
 80087f2:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 80087f4:	6842      	ldr	r2, [r0, #4]
 80087f6:	60da      	str	r2, [r3, #12]
    if ((mlmeIndication->MlmeIndication != MLME_BEACON) && (mlmeIndication->MlmeIndication != MLME_BEACON_LOST))
 80087f8:	7803      	ldrb	r3, [r0, #0]
 80087fa:	2b0a      	cmp	r3, #10
 80087fc:	d007      	beq.n	800880e <MlmeIndication+0x3e>
 80087fe:	2b0e      	cmp	r3, #14
 8008800:	d005      	beq.n	800880e <MlmeIndication+0x3e>
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 8008802:	4b0a      	ldr	r3, [pc, #40]	; (800882c <MlmeIndication+0x5c>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008808:	4907      	ldr	r1, [pc, #28]	; (8008828 <MlmeIndication+0x58>)
 800880a:	2000      	movs	r0, #0
 800880c:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800880e:	4621      	mov	r1, r4
 8008810:	2003      	movs	r0, #3
 8008812:	f7ff ffa7 	bl	8008764 <LmHandlerPackagesNotify>
    switch( mlmeIndication->MlmeIndication )
 8008816:	7823      	ldrb	r3, [r4, #0]
 8008818:	2b06      	cmp	r3, #6
 800881a:	d000      	beq.n	800881e <MlmeIndication+0x4e>
}
 800881c:	bd10      	pop	{r4, pc}
            IsUplinkTxPending = true;
 800881e:	4b04      	ldr	r3, [pc, #16]	; (8008830 <MlmeIndication+0x60>)
 8008820:	2201      	movs	r2, #1
 8008822:	701a      	strb	r2, [r3, #0]
}
 8008824:	e7fa      	b.n	800881c <MlmeIndication+0x4c>
 8008826:	bf00      	nop
 8008828:	20000098 	.word	0x20000098
 800882c:	2000075c 	.word	0x2000075c
 8008830:	20000758 	.word	0x20000758

08008834 <McpsConfirm>:
{
 8008834:	b510      	push	{r4, lr}
 8008836:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 1;
 8008838:	480c      	ldr	r0, [pc, #48]	; (800886c <McpsConfirm+0x38>)
 800883a:	2301      	movs	r3, #1
 800883c:	7003      	strb	r3, [r0, #0]
    TxParams.Status = mcpsConfirm->Status;
 800883e:	7863      	ldrb	r3, [r4, #1]
 8008840:	7043      	strb	r3, [r0, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 8008842:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8008846:	7283      	strb	r3, [r0, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 8008848:	68e3      	ldr	r3, [r4, #12]
 800884a:	60c3      	str	r3, [r0, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800884c:	f994 3003 	ldrsb.w	r3, [r4, #3]
 8008850:	7603      	strb	r3, [r0, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 8008852:	6923      	ldr	r3, [r4, #16]
 8008854:	7643      	strb	r3, [r0, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 8008856:	7923      	ldrb	r3, [r4, #4]
 8008858:	7243      	strb	r3, [r0, #9]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800885a:	4b05      	ldr	r3, [pc, #20]	; (8008870 <McpsConfirm+0x3c>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008860:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 8008862:	4621      	mov	r1, r4
 8008864:	2000      	movs	r0, #0
 8008866:	f7ff ff7d 	bl	8008764 <LmHandlerPackagesNotify>
}
 800886a:	bd10      	pop	{r4, pc}
 800886c:	200000ac 	.word	0x200000ac
 8008870:	2000075c 	.word	0x2000075c

08008874 <LmHandlerPackageIsTxPending>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool LmHandlerPackageIsTxPending( void )
{
 8008874:	b510      	push	{r4, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8008876:	2400      	movs	r4, #0
 8008878:	e001      	b.n	800887e <LmHandlerPackageIsTxPending+0xa>
 800887a:	3401      	adds	r4, #1
 800887c:	b264      	sxtb	r4, r4
 800887e:	2c04      	cmp	r4, #4
 8008880:	dc0a      	bgt.n	8008898 <LmHandlerPackageIsTxPending+0x24>
    {
        if( LmHandlerPackages[i] != NULL )
 8008882:	4b07      	ldr	r3, [pc, #28]	; (80088a0 <LmHandlerPackageIsTxPending+0x2c>)
 8008884:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d0f6      	beq.n	800887a <LmHandlerPackageIsTxPending+0x6>
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800888c:	68db      	ldr	r3, [r3, #12]
 800888e:	4798      	blx	r3
 8008890:	4603      	mov	r3, r0
 8008892:	2800      	cmp	r0, #0
 8008894:	d0f1      	beq.n	800887a <LmHandlerPackageIsTxPending+0x6>
 8008896:	e000      	b.n	800889a <LmHandlerPackageIsTxPending+0x26>
            {
                return true;
            }
        }
    }
    return false;
 8008898:	2300      	movs	r3, #0
}
 800889a:	4618      	mov	r0, r3
 800889c:	bd10      	pop	{r4, pc}
 800889e:	bf00      	nop
 80088a0:	20000760 	.word	0x20000760

080088a4 <LmHandlerPackagesProcess>:
#endif /* LORAMAC_VERSION */

static void LmHandlerPackagesProcess( void )
{
 80088a4:	b538      	push	{r3, r4, r5, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80088a6:	2400      	movs	r4, #0
 80088a8:	e001      	b.n	80088ae <LmHandlerPackagesProcess+0xa>
 80088aa:	3401      	adds	r4, #1
 80088ac:	b264      	sxtb	r4, r4
 80088ae:	2c04      	cmp	r4, #4
 80088b0:	dc12      	bgt.n	80088d8 <LmHandlerPackagesProcess+0x34>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 80088b2:	4b0a      	ldr	r3, [pc, #40]	; (80088dc <LmHandlerPackagesProcess+0x38>)
 80088b4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d0f6      	beq.n	80088aa <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 80088bc:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d0f3      	beq.n	80088aa <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 80088c2:	b2e0      	uxtb	r0, r4
 80088c4:	f7ff ff3e 	bl	8008744 <LmHandlerPackageIsInitialized>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 80088c8:	2800      	cmp	r0, #0
 80088ca:	d0ee      	beq.n	80088aa <LmHandlerPackagesProcess+0x6>
        {
            LmHandlerPackages[i]->Process( );
 80088cc:	4b03      	ldr	r3, [pc, #12]	; (80088dc <LmHandlerPackagesProcess+0x38>)
 80088ce:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80088d2:	691b      	ldr	r3, [r3, #16]
 80088d4:	4798      	blx	r3
 80088d6:	e7e8      	b.n	80088aa <LmHandlerPackagesProcess+0x6>
        }
    }
}
 80088d8:	bd38      	pop	{r3, r4, r5, pc}
 80088da:	bf00      	nop
 80088dc:	20000760 	.word	0x20000760

080088e0 <LmHandlerJoin>:
{
 80088e0:	b510      	push	{r4, lr}
 80088e2:	b08e      	sub	sp, #56	; 0x38
 80088e4:	460c      	mov	r4, r1
    mlmeReq.Type = MLME_JOIN;
 80088e6:	2301      	movs	r3, #1
 80088e8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 80088ec:	4b26      	ldr	r3, [pc, #152]	; (8008988 <LmHandlerJoin+0xa8>)
 80088ee:	f993 2004 	ldrsb.w	r2, [r3, #4]
 80088f2:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
    if ( mode == ACTIVATION_TYPE_OTAA )
 80088f6:	2802      	cmp	r0, #2
 80088f8:	d021      	beq.n	800893e <LmHandlerJoin+0x5e>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 80088fa:	2101      	movs	r1, #1
 80088fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 8008900:	4b22      	ldr	r3, [pc, #136]	; (800898c <LmHandlerJoin+0xac>)
 8008902:	7199      	strb	r1, [r3, #6]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 8008904:	711a      	strb	r2, [r3, #4]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8008906:	2100      	movs	r1, #0
 8008908:	7159      	strb	r1, [r3, #5]
        JoinParams.forceRejoin = forceRejoin;
 800890a:	71dc      	strb	r4, [r3, #7]
        if (CtxRestoreDone == false)
 800890c:	4b20      	ldr	r3, [pc, #128]	; (8008990 <LmHandlerJoin+0xb0>)
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	b1f3      	cbz	r3, 8008950 <LmHandlerJoin+0x70>
        LoRaMacStart();
 8008912:	f003 fa4d 	bl	800bdb0 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 8008916:	2301      	movs	r3, #1
 8008918:	f88d 3000 	strb.w	r3, [sp]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800891c:	f88d 3004 	strb.w	r3, [sp, #4]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8008920:	4668      	mov	r0, sp
 8008922:	f003 fc4d 	bl	800c1c0 <LoRaMacMibSetRequestConfirm>
    if ((CtxRestoreDone == false) || (forceRejoin == true))
 8008926:	4b1a      	ldr	r3, [pc, #104]	; (8008990 <LmHandlerJoin+0xb0>)
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	b103      	cbz	r3, 800892e <LmHandlerJoin+0x4e>
 800892c:	b114      	cbz	r4, 8008934 <LmHandlerJoin+0x54>
        LoRaMacMlmeRequest( &mlmeReq );
 800892e:	a809      	add	r0, sp, #36	; 0x24
 8008930:	f003 fecc 	bl	800c6cc <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 8008934:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008936:	4b17      	ldr	r3, [pc, #92]	; (8008994 <LmHandlerJoin+0xb4>)
 8008938:	601a      	str	r2, [r3, #0]
}
 800893a:	b00e      	add	sp, #56	; 0x38
 800893c:	bd10      	pop	{r4, pc}
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800893e:	2202      	movs	r2, #2
 8008940:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 8008944:	4b11      	ldr	r3, [pc, #68]	; (800898c <LmHandlerJoin+0xac>)
 8008946:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 8008948:	71d9      	strb	r1, [r3, #7]
        LoRaMacStart();
 800894a:	f003 fa31 	bl	800bdb0 <LoRaMacStart>
 800894e:	e7ea      	b.n	8008926 <LmHandlerJoin+0x46>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 8008950:	231f      	movs	r3, #31
 8008952:	f88d 3000 	strb.w	r3, [sp]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 8008956:	f88d 2004 	strb.w	r2, [sp, #4]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800895a:	4668      	mov	r0, sp
 800895c:	f003 fc30 	bl	800c1c0 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 8008960:	2320      	movs	r3, #32
 8008962:	f88d 3000 	strb.w	r3, [sp]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 8008966:	4b08      	ldr	r3, [pc, #32]	; (8008988 <LmHandlerJoin+0xa8>)
 8008968:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800896c:	f88d 3004 	strb.w	r3, [sp, #4]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8008970:	4668      	mov	r0, sp
 8008972:	f003 fc25 	bl	800c1c0 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 8008976:	2329      	movs	r3, #41	; 0x29
 8008978:	f88d 3000 	strb.w	r3, [sp]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800897c:	4b06      	ldr	r3, [pc, #24]	; (8008998 <LmHandlerJoin+0xb8>)
 800897e:	9301      	str	r3, [sp, #4]
            LoRaMacMibSetRequestConfirm(&mibReq);
 8008980:	4668      	mov	r0, sp
 8008982:	f003 fc1d 	bl	800c1c0 <LoRaMacMibSetRequestConfirm>
 8008986:	e7c4      	b.n	8008912 <LmHandlerJoin+0x32>
 8008988:	20000774 	.word	0x20000774
 800898c:	20000090 	.word	0x20000090
 8008990:	20000752 	.word	0x20000752
 8008994:	20000754 	.word	0x20000754
 8008998:	01000400 	.word	0x01000400

0800899c <LmHandlerDeviceTimeReq>:
{
 800899c:	b500      	push	{lr}
 800899e:	b087      	sub	sp, #28
    mlmeReq.Type = MLME_DEVICE_TIME;
 80089a0:	2309      	movs	r3, #9
 80089a2:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMlmeRequest( &mlmeReq );
 80089a6:	a801      	add	r0, sp, #4
 80089a8:	f003 fe90 	bl	800c6cc <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 80089ac:	9a05      	ldr	r2, [sp, #20]
 80089ae:	4b04      	ldr	r3, [pc, #16]	; (80089c0 <LmHandlerDeviceTimeReq+0x24>)
 80089b0:	601a      	str	r2, [r3, #0]
    if( status == LORAMAC_STATUS_OK )
 80089b2:	b910      	cbnz	r0, 80089ba <LmHandlerDeviceTimeReq+0x1e>
}
 80089b4:	b007      	add	sp, #28
 80089b6:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 80089ba:	f04f 30ff 	mov.w	r0, #4294967295
 80089be:	e7f9      	b.n	80089b4 <LmHandlerDeviceTimeReq+0x18>
 80089c0:	20000754 	.word	0x20000754

080089c4 <LmHandlerGetDutyCycleWaitTime>:
}
 80089c4:	4b01      	ldr	r3, [pc, #4]	; (80089cc <LmHandlerGetDutyCycleWaitTime+0x8>)
 80089c6:	6818      	ldr	r0, [r3, #0]
 80089c8:	4770      	bx	lr
 80089ca:	bf00      	nop
 80089cc:	20000754 	.word	0x20000754

080089d0 <LmHandlerJoinStatus>:
{
 80089d0:	b500      	push	{lr}
 80089d2:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 80089d4:	2301      	movs	r3, #1
 80089d6:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 80089da:	a801      	add	r0, sp, #4
 80089dc:	f003 faa2 	bl	800bf24 <LoRaMacMibGetRequestConfirm>
    if( status == LORAMAC_STATUS_OK )
 80089e0:	b920      	cbnz	r0, 80089ec <LmHandlerJoinStatus+0x1c>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 80089e2:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80089e6:	b110      	cbz	r0, 80089ee <LmHandlerJoinStatus+0x1e>
            return LORAMAC_HANDLER_SET;
 80089e8:	2001      	movs	r0, #1
 80089ea:	e000      	b.n	80089ee <LmHandlerJoinStatus+0x1e>
        return LORAMAC_HANDLER_RESET;
 80089ec:	2000      	movs	r0, #0
}
 80089ee:	b00b      	add	sp, #44	; 0x2c
 80089f0:	f85d fb04 	ldr.w	pc, [sp], #4

080089f4 <LmHandlerSend>:
{
 80089f4:	b570      	push	{r4, r5, r6, lr}
 80089f6:	b086      	sub	sp, #24
 80089f8:	4604      	mov	r4, r0
 80089fa:	460d      	mov	r5, r1
 80089fc:	4616      	mov	r6, r2
    if (LoRaMacIsBusy() == true)
 80089fe:	f002 ff91 	bl	800b924 <LoRaMacIsBusy>
 8008a02:	2800      	cmp	r0, #0
 8008a04:	d164      	bne.n	8008ad0 <LmHandlerSend+0xdc>
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 8008a06:	f7ff ffe3 	bl	80089d0 <LmHandlerJoinStatus>
 8008a0a:	2801      	cmp	r0, #1
 8008a0c:	d137      	bne.n	8008a7e <LmHandlerSend+0x8a>
    TxParams.MsgType = isTxConfirmed;
 8008a0e:	4b33      	ldr	r3, [pc, #204]	; (8008adc <LmHandlerSend+0xe8>)
 8008a10:	721d      	strb	r5, [r3, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 8008a12:	3d00      	subs	r5, #0
 8008a14:	bf18      	it	ne
 8008a16:	2501      	movne	r5, #1
 8008a18:	f88d 5004 	strb.w	r5, [sp, #4]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 8008a1c:	4b30      	ldr	r3, [pc, #192]	; (8008ae0 <LmHandlerSend+0xec>)
 8008a1e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008a22:	f88d 3012 	strb.w	r3, [sp, #18]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 8008a26:	4669      	mov	r1, sp
 8008a28:	7860      	ldrb	r0, [r4, #1]
 8008a2a:	f003 fa0f 	bl	800be4c <LoRaMacQueryTxPossible>
 8008a2e:	b370      	cbz	r0, 8008a8e <LmHandlerSend+0x9a>
        mcpsReq.Type = MCPS_UNCONFIRMED;
 8008a30:	2300      	movs	r3, #0
 8008a32:	f88d 3004 	strb.w	r3, [sp, #4]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 8008a36:	9303      	str	r3, [sp, #12]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 8008a38:	f8ad 3010 	strh.w	r3, [sp, #16]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 8008a3c:	f06f 0506 	mvn.w	r5, #6
    TxParams.AppData = *appData;
 8008a40:	4b26      	ldr	r3, [pc, #152]	; (8008adc <LmHandlerSend+0xe8>)
 8008a42:	f103 0c10 	add.w	ip, r3, #16
 8008a46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008a4a:	e88c 0003 	stmia.w	ip, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 8008a4e:	4a24      	ldr	r2, [pc, #144]	; (8008ae0 <LmHandlerSend+0xec>)
 8008a50:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8008a54:	729a      	strb	r2, [r3, #10]
    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 8008a56:	4631      	mov	r1, r6
 8008a58:	a801      	add	r0, sp, #4
 8008a5a:	f003 ff31 	bl	800c8c0 <LoRaMacMcpsRequest>
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 8008a5e:	9a05      	ldr	r2, [sp, #20]
 8008a60:	4b20      	ldr	r3, [pc, #128]	; (8008ae4 <LmHandlerSend+0xf0>)
 8008a62:	601a      	str	r2, [r3, #0]
    switch (status)
 8008a64:	2811      	cmp	r0, #17
 8008a66:	d830      	bhi.n	8008aca <LmHandlerSend+0xd6>
 8008a68:	e8df f000 	tbb	[pc, r0]
 8008a6c:	2f2f1c21 	.word	0x2f2f1c21
 8008a70:	352f2f2f 	.word	0x352f2f2f
 8008a74:	2c2f2f2f 	.word	0x2c2f2f2f
 8008a78:	1c1c2f2f 	.word	0x1c1c2f2f
 8008a7c:	291c      	.short	0x291c
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 8008a7e:	4b1a      	ldr	r3, [pc, #104]	; (8008ae8 <LmHandlerSend+0xf4>)
 8008a80:	79d9      	ldrb	r1, [r3, #7]
 8008a82:	7998      	ldrb	r0, [r3, #6]
 8008a84:	f7ff ff2c 	bl	80088e0 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8008a88:	f06f 0502 	mvn.w	r5, #2
 8008a8c:	e00c      	b.n	8008aa8 <LmHandlerSend+0xb4>
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 8008a8e:	7823      	ldrb	r3, [r4, #0]
 8008a90:	f88d 3008 	strb.w	r3, [sp, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 8008a94:	7863      	ldrb	r3, [r4, #1]
 8008a96:	f8ad 3010 	strh.w	r3, [sp, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 8008a9a:	6863      	ldr	r3, [r4, #4]
 8008a9c:	9303      	str	r3, [sp, #12]
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 8008a9e:	f04f 35ff 	mov.w	r5, #4294967295
 8008aa2:	e7cd      	b.n	8008a40 <LmHandlerSend+0x4c>
    switch (status)
 8008aa4:	f06f 0501 	mvn.w	r5, #1
}
 8008aa8:	4628      	mov	r0, r5
 8008aaa:	b006      	add	sp, #24
 8008aac:	bd70      	pop	{r4, r5, r6, pc}
            IsUplinkTxPending = false;
 8008aae:	4b0f      	ldr	r3, [pc, #60]	; (8008aec <LmHandlerSend+0xf8>)
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	701a      	strb	r2, [r3, #0]
            if (lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED)
 8008ab4:	f115 0f07 	cmn.w	r5, #7
 8008ab8:	d0f6      	beq.n	8008aa8 <LmHandlerSend+0xb4>
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 8008aba:	2500      	movs	r5, #0
 8008abc:	e7f4      	b.n	8008aa8 <LmHandlerSend+0xb4>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 8008abe:	f06f 0504 	mvn.w	r5, #4
            break;
 8008ac2:	e7f1      	b.n	8008aa8 <LmHandlerSend+0xb4>
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 8008ac4:	f06f 0505 	mvn.w	r5, #5
            break;
 8008ac8:	e7ee      	b.n	8008aa8 <LmHandlerSend+0xb4>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8008aca:	f04f 35ff 	mov.w	r5, #4294967295
            break;
 8008ace:	e7eb      	b.n	8008aa8 <LmHandlerSend+0xb4>
        return LORAMAC_HANDLER_BUSY_ERROR;
 8008ad0:	f06f 0501 	mvn.w	r5, #1
 8008ad4:	e7e8      	b.n	8008aa8 <LmHandlerSend+0xb4>
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8008ad6:	f06f 0502 	mvn.w	r5, #2
 8008ada:	e7e5      	b.n	8008aa8 <LmHandlerSend+0xb4>
 8008adc:	200000ac 	.word	0x200000ac
 8008ae0:	20000774 	.word	0x20000774
 8008ae4:	20000754 	.word	0x20000754
 8008ae8:	20000090 	.word	0x20000090
 8008aec:	20000758 	.word	0x20000758

08008af0 <LmHandlerProcess>:
{
 8008af0:	b500      	push	{lr}
 8008af2:	b083      	sub	sp, #12
    LoRaMacProcess( );
 8008af4:	f002 ff30 	bl	800b958 <LoRaMacProcess>
    LmHandlerPackagesProcess( );
 8008af8:	f7ff fed4 	bl	80088a4 <LmHandlerPackagesProcess>
    if( LmHandlerPackageIsTxPending( ) == true )
 8008afc:	f7ff feba 	bl	8008874 <LmHandlerPackageIsTxPending>
 8008b00:	b910      	cbnz	r0, 8008b08 <LmHandlerProcess+0x18>
    if( IsUplinkTxPending == true )
 8008b02:	4b0b      	ldr	r3, [pc, #44]	; (8008b30 <LmHandlerProcess+0x40>)
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	b913      	cbnz	r3, 8008b0e <LmHandlerProcess+0x1e>
}
 8008b08:	b003      	add	sp, #12
 8008b0a:	f85d fb04 	ldr.w	pc, [sp], #4
        LmHandlerAppData_t appData =
 8008b0e:	2200      	movs	r2, #0
 8008b10:	f88d 2000 	strb.w	r2, [sp]
 8008b14:	f88d 2001 	strb.w	r2, [sp, #1]
 8008b18:	9201      	str	r2, [sp, #4]
        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 8008b1a:	4b06      	ldr	r3, [pc, #24]	; (8008b34 <LmHandlerProcess+0x44>)
 8008b1c:	78d9      	ldrb	r1, [r3, #3]
 8008b1e:	4668      	mov	r0, sp
 8008b20:	f7ff ff68 	bl	80089f4 <LmHandlerSend>
 8008b24:	2800      	cmp	r0, #0
 8008b26:	d1ef      	bne.n	8008b08 <LmHandlerProcess+0x18>
            IsUplinkTxPending = false;
 8008b28:	4b01      	ldr	r3, [pc, #4]	; (8008b30 <LmHandlerProcess+0x40>)
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	701a      	strb	r2, [r3, #0]
 8008b2e:	e7eb      	b.n	8008b08 <LmHandlerProcess+0x18>
 8008b30:	20000758 	.word	0x20000758
 8008b34:	20000774 	.word	0x20000774

08008b38 <LmHandlerRequestClass>:
{
 8008b38:	b510      	push	{r4, lr}
 8008b3a:	b08a      	sub	sp, #40	; 0x28
 8008b3c:	4604      	mov	r4, r0
    if (LoRaMacIsBusy() == true)
 8008b3e:	f002 fef1 	bl	800b924 <LoRaMacIsBusy>
 8008b42:	2800      	cmp	r0, #0
 8008b44:	d136      	bne.n	8008bb4 <LmHandlerRequestClass+0x7c>
    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 8008b46:	f7ff ff43 	bl	80089d0 <LmHandlerJoinStatus>
 8008b4a:	2801      	cmp	r0, #1
 8008b4c:	d135      	bne.n	8008bba <LmHandlerRequestClass+0x82>
    mibReq.Type = MIB_DEVICE_CLASS;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	f88d 3004 	strb.w	r3, [sp, #4]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8008b54:	a801      	add	r0, sp, #4
 8008b56:	f003 f9e5 	bl	800bf24 <LoRaMacMibGetRequestConfirm>
 8008b5a:	bb88      	cbnz	r0, 8008bc0 <LmHandlerRequestClass+0x88>
    currentClass = mibReq.Param.Class;
 8008b5c:	f89d 3008 	ldrb.w	r3, [sp, #8]
    if( currentClass != newClass )
 8008b60:	42a3      	cmp	r3, r4
 8008b62:	d030      	beq.n	8008bc6 <LmHandlerRequestClass+0x8e>
        switch( newClass )
 8008b64:	2c01      	cmp	r4, #1
 8008b66:	d030      	beq.n	8008bca <LmHandlerRequestClass+0x92>
 8008b68:	2c02      	cmp	r4, #2
 8008b6a:	d014      	beq.n	8008b96 <LmHandlerRequestClass+0x5e>
 8008b6c:	b114      	cbz	r4, 8008b74 <LmHandlerRequestClass+0x3c>
 8008b6e:	2000      	movs	r0, #0
}
 8008b70:	b00a      	add	sp, #40	; 0x28
 8008b72:	bd10      	pop	{r4, pc}
                if( currentClass != CLASS_A )
 8008b74:	b90b      	cbnz	r3, 8008b7a <LmHandlerRequestClass+0x42>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8008b76:	2000      	movs	r0, #0
 8008b78:	e7fa      	b.n	8008b70 <LmHandlerRequestClass+0x38>
                    mibReq.Param.Class = newClass;
 8008b7a:	f88d 4008 	strb.w	r4, [sp, #8]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8008b7e:	a801      	add	r0, sp, #4
 8008b80:	f003 fb1e 	bl	800c1c0 <LoRaMacMibSetRequestConfirm>
 8008b84:	bb20      	cbnz	r0, 8008bd0 <LmHandlerRequestClass+0x98>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 8008b86:	4b19      	ldr	r3, [pc, #100]	; (8008bec <LmHandlerRequestClass+0xb4>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b8c:	b31b      	cbz	r3, 8008bd6 <LmHandlerRequestClass+0x9e>
                            LmHandlerCallbacks->OnClassChange( newClass );
 8008b8e:	4620      	mov	r0, r4
 8008b90:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8008b92:	2000      	movs	r0, #0
 8008b94:	e7ec      	b.n	8008b70 <LmHandlerRequestClass+0x38>
                if( currentClass != CLASS_A )
 8008b96:	bb03      	cbnz	r3, 8008bda <LmHandlerRequestClass+0xa2>
                    mibReq.Param.Class = newClass;
 8008b98:	f88d 4008 	strb.w	r4, [sp, #8]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 8008b9c:	a801      	add	r0, sp, #4
 8008b9e:	f003 fb0f 	bl	800c1c0 <LoRaMacMibSetRequestConfirm>
 8008ba2:	b9e8      	cbnz	r0, 8008be0 <LmHandlerRequestClass+0xa8>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 8008ba4:	4b11      	ldr	r3, [pc, #68]	; (8008bec <LmHandlerRequestClass+0xb4>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008baa:	b1e3      	cbz	r3, 8008be6 <LmHandlerRequestClass+0xae>
                            LmHandlerCallbacks->OnClassChange( newClass );
 8008bac:	4620      	mov	r0, r4
 8008bae:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8008bb0:	2000      	movs	r0, #0
 8008bb2:	e7dd      	b.n	8008b70 <LmHandlerRequestClass+0x38>
        return LORAMAC_HANDLER_BUSY_ERROR;
 8008bb4:	f06f 0001 	mvn.w	r0, #1
 8008bb8:	e7da      	b.n	8008b70 <LmHandlerRequestClass+0x38>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8008bba:	f06f 0002 	mvn.w	r0, #2
 8008bbe:	e7d7      	b.n	8008b70 <LmHandlerRequestClass+0x38>
        return LORAMAC_HANDLER_ERROR;
 8008bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8008bc4:	e7d4      	b.n	8008b70 <LmHandlerRequestClass+0x38>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8008bc6:	2000      	movs	r0, #0
 8008bc8:	e7d2      	b.n	8008b70 <LmHandlerRequestClass+0x38>
                errorStatus = LORAMAC_HANDLER_ERROR;
 8008bca:	f04f 30ff 	mov.w	r0, #4294967295
 8008bce:	e7cf      	b.n	8008b70 <LmHandlerRequestClass+0x38>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 8008bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8008bd4:	e7cc      	b.n	8008b70 <LmHandlerRequestClass+0x38>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8008bd6:	2000      	movs	r0, #0
 8008bd8:	e7ca      	b.n	8008b70 <LmHandlerRequestClass+0x38>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 8008bda:	f04f 30ff 	mov.w	r0, #4294967295
 8008bde:	e7c7      	b.n	8008b70 <LmHandlerRequestClass+0x38>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 8008be0:	f04f 30ff 	mov.w	r0, #4294967295
 8008be4:	e7c4      	b.n	8008b70 <LmHandlerRequestClass+0x38>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8008be6:	2000      	movs	r0, #0
 8008be8:	e7c2      	b.n	8008b70 <LmHandlerRequestClass+0x38>
 8008bea:	bf00      	nop
 8008bec:	2000075c 	.word	0x2000075c

08008bf0 <LmHandlerGetCurrentClass>:
    if (deviceClass == NULL)
 8008bf0:	b170      	cbz	r0, 8008c10 <LmHandlerGetCurrentClass+0x20>
{
 8008bf2:	b510      	push	{r4, lr}
 8008bf4:	b08a      	sub	sp, #40	; 0x28
 8008bf6:	4604      	mov	r4, r0
    mibReq.Type = MIB_DEVICE_CLASS;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 8008bfe:	a801      	add	r0, sp, #4
 8008c00:	f003 f990 	bl	800bf24 <LoRaMacMibGetRequestConfirm>
 8008c04:	b938      	cbnz	r0, 8008c16 <LmHandlerGetCurrentClass+0x26>
    *deviceClass = mibReq.Param.Class;
 8008c06:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8008c0a:	7023      	strb	r3, [r4, #0]
}
 8008c0c:	b00a      	add	sp, #40	; 0x28
 8008c0e:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8008c10:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008c14:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8008c16:	f04f 30ff 	mov.w	r0, #4294967295
 8008c1a:	e7f7      	b.n	8008c0c <LmHandlerGetCurrentClass+0x1c>

08008c1c <McpsIndication>:
{
 8008c1c:	b530      	push	{r4, r5, lr}
 8008c1e:	b085      	sub	sp, #20
 8008c20:	460b      	mov	r3, r1
    DeviceClass_t deviceClass = CLASS_A;
 8008c22:	2200      	movs	r2, #0
 8008c24:	f88d 2007 	strb.w	r2, [sp, #7]
    RxParams.IsMcpsIndication = 1;
 8008c28:	491d      	ldr	r1, [pc, #116]	; (8008ca0 <McpsIndication+0x84>)
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	700a      	strb	r2, [r1, #0]
    RxParams.Status = mcpsIndication->Status;
 8008c2e:	7842      	ldrb	r2, [r0, #1]
 8008c30:	704a      	strb	r2, [r1, #1]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 8008c32:	bb5a      	cbnz	r2, 8008c8c <McpsIndication+0x70>
 8008c34:	4604      	mov	r4, r0
    RxParams.Datarate = mcpsIndication->RxDatarate;
 8008c36:	f990 2004 	ldrsb.w	r2, [r0, #4]
 8008c3a:	720a      	strb	r2, [r1, #8]
    RxParams.Rssi = rxStatus->Rssi;
 8008c3c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008c40:	724a      	strb	r2, [r1, #9]
    RxParams.Snr = rxStatus->Snr;
 8008c42:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8008c46:	728a      	strb	r2, [r1, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 8008c48:	78db      	ldrb	r3, [r3, #3]
 8008c4a:	740b      	strb	r3, [r1, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 8008c4c:	6903      	ldr	r3, [r0, #16]
 8008c4e:	60cb      	str	r3, [r1, #12]
    appData.Port = mcpsIndication->Port;
 8008c50:	78c3      	ldrb	r3, [r0, #3]
 8008c52:	f88d 3008 	strb.w	r3, [sp, #8]
    appData.BufferSize = mcpsIndication->BufferSize;
 8008c56:	7b03      	ldrb	r3, [r0, #12]
 8008c58:	f88d 3009 	strb.w	r3, [sp, #9]
    appData.Buffer = mcpsIndication->Buffer;
 8008c5c:	6883      	ldr	r3, [r0, #8]
 8008c5e:	9303      	str	r3, [sp, #12]
    LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 8008c60:	4d10      	ldr	r5, [pc, #64]	; (8008ca4 <McpsIndication+0x88>)
 8008c62:	682b      	ldr	r3, [r5, #0]
 8008c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c66:	a802      	add	r0, sp, #8
 8008c68:	4798      	blx	r3
    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 8008c6a:	682b      	ldr	r3, [r5, #0]
 8008c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c6e:	b113      	cbz	r3, 8008c76 <McpsIndication+0x5a>
 8008c70:	7e22      	ldrb	r2, [r4, #24]
 8008c72:	b102      	cbz	r2, 8008c76 <McpsIndication+0x5a>
        LmHandlerCallbacks->OnSysTimeUpdate( );
 8008c74:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 8008c76:	4621      	mov	r1, r4
 8008c78:	2001      	movs	r0, #1
 8008c7a:	f7ff fd73 	bl	8008764 <LmHandlerPackagesNotify>
    LmHandlerGetCurrentClass( &deviceClass );
 8008c7e:	f10d 0007 	add.w	r0, sp, #7
 8008c82:	f7ff ffb5 	bl	8008bf0 <LmHandlerGetCurrentClass>
    if ( ( mcpsIndication->FramePending == true ) && ( deviceClass == CLASS_A ) )
 8008c86:	7963      	ldrb	r3, [r4, #5]
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d001      	beq.n	8008c90 <McpsIndication+0x74>
}
 8008c8c:	b005      	add	sp, #20
 8008c8e:	bd30      	pop	{r4, r5, pc}
    if ( ( mcpsIndication->FramePending == true ) && ( deviceClass == CLASS_A ) )
 8008c90:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d1f9      	bne.n	8008c8c <McpsIndication+0x70>
        IsUplinkTxPending = true;
 8008c98:	4b03      	ldr	r3, [pc, #12]	; (8008ca8 <McpsIndication+0x8c>)
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	701a      	strb	r2, [r3, #0]
 8008c9e:	e7f5      	b.n	8008c8c <McpsIndication+0x70>
 8008ca0:	20000098 	.word	0x20000098
 8008ca4:	2000075c 	.word	0x2000075c
 8008ca8:	20000758 	.word	0x20000758

08008cac <LmHandlerGetTxDatarate>:
    if (txDatarate == NULL)
 8008cac:	b180      	cbz	r0, 8008cd0 <LmHandlerGetTxDatarate+0x24>
{
 8008cae:	b510      	push	{r4, lr}
 8008cb0:	b08a      	sub	sp, #40	; 0x28
 8008cb2:	4604      	mov	r4, r0
    mibGet.Type = MIB_CHANNELS_DATARATE;
 8008cb4:	2320      	movs	r3, #32
 8008cb6:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 8008cba:	a801      	add	r0, sp, #4
 8008cbc:	f003 f932 	bl	800bf24 <LoRaMacMibGetRequestConfirm>
 8008cc0:	b948      	cbnz	r0, 8008cd6 <LmHandlerGetTxDatarate+0x2a>
    *txDatarate = mibGet.Param.ChannelsDatarate;
 8008cc2:	f99d 3008 	ldrsb.w	r3, [sp, #8]
 8008cc6:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 8008cc8:	4a04      	ldr	r2, [pc, #16]	; (8008cdc <LmHandlerGetTxDatarate+0x30>)
 8008cca:	7113      	strb	r3, [r2, #4]
}
 8008ccc:	b00a      	add	sp, #40	; 0x28
 8008cce:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8008cd0:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008cd4:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8008cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8008cda:	e7f7      	b.n	8008ccc <LmHandlerGetTxDatarate+0x20>
 8008cdc:	20000774 	.word	0x20000774

08008ce0 <MlmeConfirm>:
{
 8008ce0:	b510      	push	{r4, lr}
 8008ce2:	b08a      	sub	sp, #40	; 0x28
 8008ce4:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 0;
 8008ce6:	4824      	ldr	r0, [pc, #144]	; (8008d78 <MlmeConfirm+0x98>)
 8008ce8:	2300      	movs	r3, #0
 8008cea:	7003      	strb	r3, [r0, #0]
    TxParams.Status = mlmeConfirm->Status;
 8008cec:	7863      	ldrb	r3, [r4, #1]
 8008cee:	7043      	strb	r3, [r0, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 8008cf0:	4b22      	ldr	r3, [pc, #136]	; (8008d7c <MlmeConfirm+0x9c>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cf6:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 8008cf8:	4621      	mov	r1, r4
 8008cfa:	2002      	movs	r0, #2
 8008cfc:	f7ff fd32 	bl	8008764 <LmHandlerPackagesNotify>
    switch( mlmeConfirm->MlmeRequest )
 8008d00:	7823      	ldrb	r3, [r4, #0]
 8008d02:	2b04      	cmp	r3, #4
 8008d04:	d029      	beq.n	8008d5a <MlmeConfirm+0x7a>
 8008d06:	2b0b      	cmp	r3, #11
 8008d08:	d02f      	beq.n	8008d6a <MlmeConfirm+0x8a>
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	d001      	beq.n	8008d12 <MlmeConfirm+0x32>
}
 8008d0e:	b00a      	add	sp, #40	; 0x28
 8008d10:	bd10      	pop	{r4, pc}
            mibReq.Type = MIB_DEV_ADDR;
 8008d12:	2306      	movs	r3, #6
 8008d14:	f88d 3004 	strb.w	r3, [sp, #4]
            LoRaMacMibGetRequestConfirm( &mibReq );
 8008d18:	a801      	add	r0, sp, #4
 8008d1a:	f003 f903 	bl	800bf24 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8008d1e:	9a02      	ldr	r2, [sp, #8]
 8008d20:	4b17      	ldr	r3, [pc, #92]	; (8008d80 <MlmeConfirm+0xa0>)
 8008d22:	615a      	str	r2, [r3, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 8008d24:	4817      	ldr	r0, [pc, #92]	; (8008d84 <MlmeConfirm+0xa4>)
 8008d26:	f7ff ffc1 	bl	8008cac <LmHandlerGetTxDatarate>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8008d2a:	7863      	ldrb	r3, [r4, #1]
 8008d2c:	b16b      	cbz	r3, 8008d4a <MlmeConfirm+0x6a>
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 8008d2e:	4b16      	ldr	r3, [pc, #88]	; (8008d88 <MlmeConfirm+0xa8>)
 8008d30:	22ff      	movs	r2, #255	; 0xff
 8008d32:	715a      	strb	r2, [r3, #5]
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 8008d34:	4b11      	ldr	r3, [pc, #68]	; (8008d7c <MlmeConfirm+0x9c>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d3a:	4813      	ldr	r0, [pc, #76]	; (8008d88 <MlmeConfirm+0xa8>)
 8008d3c:	4798      	blx	r3
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8008d3e:	7863      	ldrb	r3, [r4, #1]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d1e4      	bne.n	8008d0e <MlmeConfirm+0x2e>
                SecureElementPrintSessionKeys();
 8008d44:	f007 fe72 	bl	8010a2c <SecureElementPrintSessionKeys>
        break;
 8008d48:	e7e1      	b.n	8008d0e <MlmeConfirm+0x2e>
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8008d4a:	4b0f      	ldr	r3, [pc, #60]	; (8008d88 <MlmeConfirm+0xa8>)
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	715a      	strb	r2, [r3, #5]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 8008d50:	4b0e      	ldr	r3, [pc, #56]	; (8008d8c <MlmeConfirm+0xac>)
 8008d52:	7858      	ldrb	r0, [r3, #1]
 8008d54:	f7ff fef0 	bl	8008b38 <LmHandlerRequestClass>
 8008d58:	e7ec      	b.n	8008d34 <MlmeConfirm+0x54>
            RxParams.LinkCheck = true;
 8008d5a:	4b0d      	ldr	r3, [pc, #52]	; (8008d90 <MlmeConfirm+0xb0>)
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	745a      	strb	r2, [r3, #17]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 8008d60:	7a22      	ldrb	r2, [r4, #8]
 8008d62:	749a      	strb	r2, [r3, #18]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 8008d64:	7a62      	ldrb	r2, [r4, #9]
 8008d66:	74da      	strb	r2, [r3, #19]
        break;
 8008d68:	e7d1      	b.n	8008d0e <MlmeConfirm+0x2e>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8008d6a:	7863      	ldrb	r3, [r4, #1]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d0ce      	beq.n	8008d0e <MlmeConfirm+0x2e>
                LmHandlerDeviceTimeReq( );
 8008d70:	f7ff fe14 	bl	800899c <LmHandlerDeviceTimeReq>
}
 8008d74:	e7cb      	b.n	8008d0e <MlmeConfirm+0x2e>
 8008d76:	bf00      	nop
 8008d78:	200000ac 	.word	0x200000ac
 8008d7c:	2000075c 	.word	0x2000075c
 8008d80:	20000078 	.word	0x20000078
 8008d84:	20000094 	.word	0x20000094
 8008d88:	20000090 	.word	0x20000090
 8008d8c:	20000774 	.word	0x20000774
 8008d90:	20000098 	.word	0x20000098

08008d94 <LmHandlerSetSystemMaxRxError>:
{
 8008d94:	b500      	push	{lr}
 8008d96:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8008d98:	2323      	movs	r3, #35	; 0x23
 8008d9a:	f88d 3004 	strb.w	r3, [sp, #4]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 8008d9e:	9002      	str	r0, [sp, #8]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8008da0:	a801      	add	r0, sp, #4
 8008da2:	f003 fa0d 	bl	800c1c0 <LoRaMacMibSetRequestConfirm>
 8008da6:	b910      	cbnz	r0, 8008dae <LmHandlerSetSystemMaxRxError+0x1a>
}
 8008da8:	b00b      	add	sp, #44	; 0x2c
 8008daa:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 8008dae:	f04f 30ff 	mov.w	r0, #4294967295
 8008db2:	e7f9      	b.n	8008da8 <LmHandlerSetSystemMaxRxError+0x14>

08008db4 <LmHandlerConfigure>:
{
 8008db4:	b570      	push	{r4, r5, r6, lr}
 8008db6:	b090      	sub	sp, #64	; 0x40
 8008db8:	4601      	mov	r1, r0
    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 8008dba:	4c78      	ldr	r4, [pc, #480]	; (8008f9c <LmHandlerConfigure+0x1e8>)
 8008dbc:	2214      	movs	r2, #20
 8008dbe:	4620      	mov	r0, r4
 8008dc0:	f009 ff5a 	bl	8012c78 <UTIL_MEM_cpy_8>
    IsUplinkTxPending = false;
 8008dc4:	4b76      	ldr	r3, [pc, #472]	; (8008fa0 <LmHandlerConfigure+0x1ec>)
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	701a      	strb	r2, [r3, #0]
    loraInfo = LoraInfo_GetPtr();
 8008dca:	f7f9 ffab 	bl	8002d24 <LoraInfo_GetPtr>
    if (0U == ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 8008dce:	7822      	ldrb	r2, [r4, #0]
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	4093      	lsls	r3, r2
 8008dd4:	6841      	ldr	r1, [r0, #4]
 8008dd6:	420b      	tst	r3, r1
 8008dd8:	d106      	bne.n	8008de8 <LmHandlerConfigure+0x34>
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 8008dda:	4b72      	ldr	r3, [pc, #456]	; (8008fa4 <LmHandlerConfigure+0x1f0>)
 8008ddc:	2201      	movs	r2, #1
 8008dde:	2100      	movs	r1, #0
 8008de0:	4608      	mov	r0, r1
 8008de2:	f009 fe33 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 8008de6:	e7fe      	b.n	8008de6 <LmHandlerConfigure+0x32>
    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 8008de8:	496f      	ldr	r1, [pc, #444]	; (8008fa8 <LmHandlerConfigure+0x1f4>)
 8008dea:	4870      	ldr	r0, [pc, #448]	; (8008fac <LmHandlerConfigure+0x1f8>)
 8008dec:	f002 fdfe 	bl	800b9ec <LoRaMacInitialization>
 8008df0:	2800      	cmp	r0, #0
 8008df2:	f040 80cf 	bne.w	8008f94 <LmHandlerConfigure+0x1e0>
    mibReq.Type = MIB_NVM_CTXS;
 8008df6:	2327      	movs	r3, #39	; 0x27
 8008df8:	f88d 301c 	strb.w	r3, [sp, #28]
    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 8008dfc:	a807      	add	r0, sp, #28
 8008dfe:	f003 f9df 	bl	800c1c0 <LoRaMacMibSetRequestConfirm>
 8008e02:	2800      	cmp	r0, #0
 8008e04:	f040 8087 	bne.w	8008f16 <LmHandlerConfigure+0x162>
        CtxRestoreDone = true;
 8008e08:	4b69      	ldr	r3, [pc, #420]	; (8008fb0 <LmHandlerConfigure+0x1fc>)
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	701a      	strb	r2, [r3, #0]
    if (CtxRestoreDone == true)
 8008e0e:	4b68      	ldr	r3, [pc, #416]	; (8008fb0 <LmHandlerConfigure+0x1fc>)
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	f000 80a8 	beq.w	8008f68 <LmHandlerConfigure+0x1b4>
        if ( LmHandlerCallbacks->OnNvmDataChange != NULL )
 8008e18:	4b66      	ldr	r3, [pc, #408]	; (8008fb4 <LmHandlerConfigure+0x200>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	69db      	ldr	r3, [r3, #28]
 8008e1e:	b10b      	cbz	r3, 8008e24 <LmHandlerConfigure+0x70>
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 8008e20:	2000      	movs	r0, #0
 8008e22:	4798      	blx	r3
        mibReq.Type = MIB_DEV_ADDR;
 8008e24:	2306      	movs	r3, #6
 8008e26:	f88d 301c 	strb.w	r3, [sp, #28]
        LoRaMacMibGetRequestConfirm( &mibReq );
 8008e2a:	a807      	add	r0, sp, #28
 8008e2c:	f003 f87a 	bl	800bf24 <LoRaMacMibGetRequestConfirm>
        CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8008e30:	9a08      	ldr	r2, [sp, #32]
 8008e32:	4b61      	ldr	r3, [pc, #388]	; (8008fb8 <LmHandlerConfigure+0x204>)
 8008e34:	615a      	str	r2, [r3, #20]
        mibReq.Type = MIB_NVM_CTXS;
 8008e36:	2327      	movs	r3, #39	; 0x27
 8008e38:	f88d 301c 	strb.w	r3, [sp, #28]
        LoRaMacMibGetRequestConfirm( &mibReq );
 8008e3c:	a807      	add	r0, sp, #28
 8008e3e:	f003 f871 	bl	800bf24 <LoRaMacMibGetRequestConfirm>
        LmHandlerParams.ActiveRegion = mibReq.Param.Contexts->MacGroup2.Region;
 8008e42:	9a08      	ldr	r2, [sp, #32]
 8008e44:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
 8008e48:	4b54      	ldr	r3, [pc, #336]	; (8008f9c <LmHandlerConfigure+0x1e8>)
 8008e4a:	7019      	strb	r1, [r3, #0]
        LmHandlerParams.DefaultClass = mibReq.Param.Contexts->MacGroup2.DeviceClass;
 8008e4c:	f892 1104 	ldrb.w	r1, [r2, #260]	; 0x104
 8008e50:	7059      	strb	r1, [r3, #1]
        LmHandlerParams.AdrEnable = mibReq.Param.Contexts->MacGroup2.AdrCtrlOn;
 8008e52:	f892 2106 	ldrb.w	r2, [r2, #262]	; 0x106
 8008e56:	709a      	strb	r2, [r3, #2]
    mibReq.Type = MIB_DEV_EUI;
 8008e58:	2502      	movs	r5, #2
 8008e5a:	f88d 501c 	strb.w	r5, [sp, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8008e5e:	a807      	add	r0, sp, #28
 8008e60:	f003 f860 	bl	800bf24 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 8008e64:	4c54      	ldr	r4, [pc, #336]	; (8008fb8 <LmHandlerConfigure+0x204>)
 8008e66:	2208      	movs	r2, #8
 8008e68:	9908      	ldr	r1, [sp, #32]
 8008e6a:	4620      	mov	r0, r4
 8008e6c:	f007 ff45 	bl	8010cfa <memcpy1>
    mibReq.Type = MIB_JOIN_EUI;
 8008e70:	2303      	movs	r3, #3
 8008e72:	f88d 301c 	strb.w	r3, [sp, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8008e76:	a807      	add	r0, sp, #28
 8008e78:	f003 f854 	bl	800bf24 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 8008e7c:	2208      	movs	r2, #8
 8008e7e:	9908      	ldr	r1, [sp, #32]
 8008e80:	18a0      	adds	r0, r4, r2
 8008e82:	f007 ff3a 	bl	8010cfa <memcpy1>
    SecureElementPrintKeys();
 8008e86:	f007 fd71 	bl	801096c <SecureElementPrintKeys>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 8008e8a:	7de3      	ldrb	r3, [r4, #23]
 8008e8c:	7da2      	ldrb	r2, [r4, #22]
 8008e8e:	7d61      	ldrb	r1, [r4, #21]
 8008e90:	7d20      	ldrb	r0, [r4, #20]
 8008e92:	9003      	str	r0, [sp, #12]
 8008e94:	9102      	str	r1, [sp, #8]
 8008e96:	9201      	str	r2, [sp, #4]
 8008e98:	9300      	str	r3, [sp, #0]
 8008e9a:	4b48      	ldr	r3, [pc, #288]	; (8008fbc <LmHandlerConfigure+0x208>)
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	4611      	mov	r1, r2
 8008ea0:	4628      	mov	r0, r5
 8008ea2:	f009 fdd3 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
    mibReq.Type = MIB_PUBLIC_NETWORK;
 8008ea6:	260f      	movs	r6, #15
 8008ea8:	f88d 601c 	strb.w	r6, [sp, #28]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 8008eac:	2301      	movs	r3, #1
 8008eae:	f88d 3020 	strb.w	r3, [sp, #32]
    LoRaMacMibSetRequestConfirm(&mibReq);
 8008eb2:	a807      	add	r0, sp, #28
 8008eb4:	f003 f984 	bl	800c1c0 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_REPEATER_SUPPORT;
 8008eb8:	2310      	movs	r3, #16
 8008eba:	f88d 301c 	strb.w	r3, [sp, #28]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 8008ebe:	2500      	movs	r5, #0
 8008ec0:	f88d 5020 	strb.w	r5, [sp, #32]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8008ec4:	a807      	add	r0, sp, #28
 8008ec6:	f003 f97b 	bl	800c1c0 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ADR;
 8008eca:	2304      	movs	r3, #4
 8008ecc:	f88d 301c 	strb.w	r3, [sp, #28]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 8008ed0:	4c32      	ldr	r4, [pc, #200]	; (8008f9c <LmHandlerConfigure+0x1e8>)
 8008ed2:	78a3      	ldrb	r3, [r4, #2]
 8008ed4:	f88d 3020 	strb.w	r3, [sp, #32]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8008ed8:	a807      	add	r0, sp, #28
 8008eda:	f003 f971 	bl	800c1c0 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_RXB_C_TIMEOUT;
 8008ede:	2338      	movs	r3, #56	; 0x38
 8008ee0:	f88d 301c 	strb.w	r3, [sp, #28]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 8008ee4:	6923      	ldr	r3, [r4, #16]
 8008ee6:	9308      	str	r3, [sp, #32]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8008ee8:	a807      	add	r0, sp, #28
 8008eea:	f003 f969 	bl	800c1c0 <LoRaMacMibSetRequestConfirm>
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8008eee:	f88d 6014 	strb.w	r6, [sp, #20]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 8008ef2:	a905      	add	r1, sp, #20
 8008ef4:	7820      	ldrb	r0, [r4, #0]
 8008ef6:	f004 fe6d 	bl	800dbd4 <RegionGetPhyParam>
 8008efa:	9004      	str	r0, [sp, #16]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 8008efc:	1b43      	subs	r3, r0, r5
 8008efe:	bf18      	it	ne
 8008f00:	2301      	movne	r3, #1
 8008f02:	71a3      	strb	r3, [r4, #6]
    LmHandlerSetSystemMaxRxError( 20 );
 8008f04:	2014      	movs	r0, #20
 8008f06:	f7ff ff45 	bl	8008d94 <LmHandlerSetSystemMaxRxError>
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 8008f0a:	79a0      	ldrb	r0, [r4, #6]
 8008f0c:	f003 fdc6 	bl	800ca9c <LoRaMacTestSetDutyCycleOn>
    return LORAMAC_HANDLER_SUCCESS;
 8008f10:	4628      	mov	r0, r5
}
 8008f12:	b010      	add	sp, #64	; 0x40
 8008f14:	bd70      	pop	{r4, r5, r6, pc}
        mibReq.Type = MIB_NVM_BKP_CTXS;
 8008f16:	2328      	movs	r3, #40	; 0x28
 8008f18:	f88d 301c 	strb.w	r3, [sp, #28]
        if (LmHandlerCallbacks->OnRestoreContextRequest != NULL)
 8008f1c:	4b25      	ldr	r3, [pc, #148]	; (8008fb4 <LmHandlerConfigure+0x200>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	691b      	ldr	r3, [r3, #16]
 8008f22:	b14b      	cbz	r3, 8008f38 <LmHandlerConfigure+0x184>
            LoRaMacMibGetRequestConfirm( &mibReq );
 8008f24:	a807      	add	r0, sp, #28
 8008f26:	f002 fffd 	bl	800bf24 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest(mibReq.Param.BackupContexts, sizeof(LoRaMacNvmData_t));
 8008f2a:	4b22      	ldr	r3, [pc, #136]	; (8008fb4 <LmHandlerConfigure+0x200>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	691b      	ldr	r3, [r3, #16]
 8008f30:	f240 518c 	movw	r1, #1420	; 0x58c
 8008f34:	9808      	ldr	r0, [sp, #32]
 8008f36:	4798      	blx	r3
        mibReq.Type = MIB_NVM_CTXS;
 8008f38:	2327      	movs	r3, #39	; 0x27
 8008f3a:	f88d 301c 	strb.w	r3, [sp, #28]
        if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 8008f3e:	a807      	add	r0, sp, #28
 8008f40:	f003 f93e 	bl	800c1c0 <LoRaMacMibSetRequestConfirm>
 8008f44:	2800      	cmp	r0, #0
 8008f46:	f47f af62 	bne.w	8008e0e <LmHandlerConfigure+0x5a>
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	f88d 301c 	strb.w	r3, [sp, #28]
            LoRaMacMibGetRequestConfirm( &mibReq );
 8008f50:	a807      	add	r0, sp, #28
 8008f52:	f002 ffe7 	bl	800bf24 <LoRaMacMibGetRequestConfirm>
            if (mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE)
 8008f56:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	f43f af57 	beq.w	8008e0e <LmHandlerConfigure+0x5a>
                CtxRestoreDone = true;
 8008f60:	4b13      	ldr	r3, [pc, #76]	; (8008fb0 <LmHandlerConfigure+0x1fc>)
 8008f62:	2201      	movs	r2, #1
 8008f64:	701a      	strb	r2, [r3, #0]
 8008f66:	e752      	b.n	8008e0e <LmHandlerConfigure+0x5a>
        mibReq.Type = MIB_NET_ID;
 8008f68:	2305      	movs	r3, #5
 8008f6a:	f88d 301c 	strb.w	r3, [sp, #28]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	9308      	str	r3, [sp, #32]
        LoRaMacMibSetRequestConfirm(&mibReq);
 8008f72:	a807      	add	r0, sp, #28
 8008f74:	f003 f924 	bl	800c1c0 <LoRaMacMibSetRequestConfirm>
        CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 8008f78:	4b0e      	ldr	r3, [pc, #56]	; (8008fb4 <LmHandlerConfigure+0x200>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	68db      	ldr	r3, [r3, #12]
 8008f7e:	4798      	blx	r3
 8008f80:	4b0d      	ldr	r3, [pc, #52]	; (8008fb8 <LmHandlerConfigure+0x204>)
 8008f82:	6158      	str	r0, [r3, #20]
        mibReq.Type = MIB_DEV_ADDR;
 8008f84:	2306      	movs	r3, #6
 8008f86:	f88d 301c 	strb.w	r3, [sp, #28]
        mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 8008f8a:	9008      	str	r0, [sp, #32]
        LoRaMacMibSetRequestConfirm(&mibReq);
 8008f8c:	a807      	add	r0, sp, #28
 8008f8e:	f003 f917 	bl	800c1c0 <LoRaMacMibSetRequestConfirm>
 8008f92:	e761      	b.n	8008e58 <LmHandlerConfigure+0xa4>
        return LORAMAC_HANDLER_ERROR;
 8008f94:	f04f 30ff 	mov.w	r0, #4294967295
 8008f98:	e7bb      	b.n	8008f12 <LmHandlerConfigure+0x15e>
 8008f9a:	bf00      	nop
 8008f9c:	20000774 	.word	0x20000774
 8008fa0:	20000758 	.word	0x20000758
 8008fa4:	080146ec 	.word	0x080146ec
 8008fa8:	20000798 	.word	0x20000798
 8008fac:	200007ac 	.word	0x200007ac
 8008fb0:	20000752 	.word	0x20000752
 8008fb4:	2000075c 	.word	0x2000075c
 8008fb8:	20000078 	.word	0x20000078
 8008fbc:	08014738 	.word	0x08014738

08008fc0 <LmHandlerPackageRegister>:
    switch( id )
 8008fc0:	b9f0      	cbnz	r0, 8009000 <LmHandlerPackageRegister+0x40>
{
 8008fc2:	b538      	push	{r3, r4, r5, lr}
 8008fc4:	460c      	mov	r4, r1
 8008fc6:	4605      	mov	r5, r0
            package = LmhpCompliancePackageFactory( );
 8008fc8:	f000 fb76 	bl	80096b8 <LmhpCompliancePackageFactory>
    if( package != NULL )
 8008fcc:	b1a8      	cbz	r0, 8008ffa <LmHandlerPackageRegister+0x3a>
        LmHandlerPackages[id] = package;
 8008fce:	4a0e      	ldr	r2, [pc, #56]	; (8009008 <LmHandlerPackageRegister+0x48>)
 8008fd0:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 8008fd4:	4a0d      	ldr	r2, [pc, #52]	; (800900c <LmHandlerPackageRegister+0x4c>)
 8008fd6:	6282      	str	r2, [r0, #40]	; 0x28
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 8008fd8:	4a0d      	ldr	r2, [pc, #52]	; (8009010 <LmHandlerPackageRegister+0x50>)
 8008fda:	6812      	ldr	r2, [r2, #0]
 8008fdc:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8008fde:	6301      	str	r1, [r0, #48]	; 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 8008fe0:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8008fe2:	6341      	str	r1, [r0, #52]	; 0x34
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 8008fe4:	490b      	ldr	r1, [pc, #44]	; (8009014 <LmHandlerPackageRegister+0x54>)
 8008fe6:	62c1      	str	r1, [r0, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 8008fe8:	6992      	ldr	r2, [r2, #24]
 8008fea:	6142      	str	r2, [r0, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 8008fec:	6843      	ldr	r3, [r0, #4]
 8008fee:	22f2      	movs	r2, #242	; 0xf2
 8008ff0:	4909      	ldr	r1, [pc, #36]	; (8009018 <LmHandlerPackageRegister+0x58>)
 8008ff2:	4620      	mov	r0, r4
 8008ff4:	4798      	blx	r3
        return LORAMAC_HANDLER_SUCCESS;
 8008ff6:	2000      	movs	r0, #0
}
 8008ff8:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_HANDLER_ERROR;
 8008ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8008ffe:	e7fb      	b.n	8008ff8 <LmHandlerPackageRegister+0x38>
 8009000:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009004:	4770      	bx	lr
 8009006:	bf00      	nop
 8009008:	20000760 	.word	0x20000760
 800900c:	080088e1 	.word	0x080088e1
 8009010:	2000075c 	.word	0x2000075c
 8009014:	0800899d 	.word	0x0800899d
 8009018:	20000660 	.word	0x20000660

0800901c <LmHandlerInit>:
{
 800901c:	b508      	push	{r3, lr}
    LmHandlerCallbacks = handlerCallbacks;
 800901e:	4b13      	ldr	r3, [pc, #76]	; (800906c <LmHandlerInit+0x50>)
 8009020:	6018      	str	r0, [r3, #0]
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 8009022:	4b13      	ldr	r3, [pc, #76]	; (8009070 <LmHandlerInit+0x54>)
 8009024:	4a13      	ldr	r2, [pc, #76]	; (8009074 <LmHandlerInit+0x58>)
 8009026:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 8009028:	4a13      	ldr	r2, [pc, #76]	; (8009078 <LmHandlerInit+0x5c>)
 800902a:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800902c:	4a13      	ldr	r2, [pc, #76]	; (800907c <LmHandlerInit+0x60>)
 800902e:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 8009030:	4a13      	ldr	r2, [pc, #76]	; (8009080 <LmHandlerInit+0x64>)
 8009032:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 8009034:	6802      	ldr	r2, [r0, #0]
 8009036:	4b13      	ldr	r3, [pc, #76]	; (8009084 <LmHandlerInit+0x68>)
 8009038:	601a      	str	r2, [r3, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800903a:	6842      	ldr	r2, [r0, #4]
 800903c:	605a      	str	r2, [r3, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800903e:	6882      	ldr	r2, [r0, #8]
 8009040:	609a      	str	r2, [r3, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 8009042:	4a11      	ldr	r2, [pc, #68]	; (8009088 <LmHandlerInit+0x6c>)
 8009044:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 8009046:	6982      	ldr	r2, [r0, #24]
 8009048:	611a      	str	r2, [r3, #16]
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800904a:	4b10      	ldr	r3, [pc, #64]	; (800908c <LmHandlerInit+0x70>)
 800904c:	6019      	str	r1, [r3, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 800904e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009050:	605a      	str	r2, [r3, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerCallbacks->OnTxFrameCtrlChanged;
 8009052:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8009054:	609a      	str	r2, [r3, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerCallbacks->OnPingSlotPeriodicityChanged;
 8009056:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009058:	60da      	str	r2, [r3, #12]
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800905a:	4619      	mov	r1, r3
 800905c:	2000      	movs	r0, #0
 800905e:	f7ff ffaf 	bl	8008fc0 <LmHandlerPackageRegister>
 8009062:	b900      	cbnz	r0, 8009066 <LmHandlerInit+0x4a>
}
 8009064:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_ERROR;
 8009066:	f04f 30ff 	mov.w	r0, #4294967295
 800906a:	e7fb      	b.n	8009064 <LmHandlerInit+0x48>
 800906c:	2000075c 	.word	0x2000075c
 8009070:	200007ac 	.word	0x200007ac
 8009074:	08008835 	.word	0x08008835
 8009078:	08008c1d 	.word	0x08008c1d
 800907c:	08008ce1 	.word	0x08008ce1
 8009080:	080087d1 	.word	0x080087d1
 8009084:	20000798 	.word	0x20000798
 8009088:	0800db7d 	.word	0x0800db7d
 800908c:	20000788 	.word	0x20000788

08009090 <LmHandlerGetVersion>:
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion(LmHandlerVersionType_t lmhType, uint32_t *featureVersion)
{
    if (featureVersion == NULL)
 8009090:	b161      	cbz	r1, 80090ac <LmHandlerGetVersion+0x1c>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    switch(lmhType)
 8009092:	b118      	cbz	r0, 800909c <LmHandlerGetVersion+0xc>
 8009094:	2801      	cmp	r0, #1
 8009096:	d005      	beq.n	80090a4 <LmHandlerGetVersion+0x14>
 8009098:	2000      	movs	r0, #0
 800909a:	4770      	bx	lr
    {
        case LORAMAC_HANDLER_L2_VERSION:
            *featureVersion = LORAMAC_VERSION;
 800909c:	4a05      	ldr	r2, [pc, #20]	; (80090b4 <LmHandlerGetVersion+0x24>)
 800909e:	600a      	str	r2, [r1, #0]
            break;
        default:
          break;
    }

    return LORAMAC_HANDLER_SUCCESS;
 80090a0:	2000      	movs	r0, #0
            break;
 80090a2:	4770      	bx	lr
            *featureVersion = REGION_VERSION;
 80090a4:	4a04      	ldr	r2, [pc, #16]	; (80090b8 <LmHandlerGetVersion+0x28>)
 80090a6:	600a      	str	r2, [r1, #0]
    return LORAMAC_HANDLER_SUCCESS;
 80090a8:	2000      	movs	r0, #0
            break;
 80090aa:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 80090ac:	f04f 30ff 	mov.w	r0, #4294967295
}
 80090b0:	4770      	bx	lr
 80090b2:	bf00      	nop
 80090b4:	01000400 	.word	0x01000400
 80090b8:	02010001 	.word	0x02010001

080090bc <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop(void)
{
 80090bc:	b508      	push	{r3, lr}
    if (LoRaMacDeInitialization() == LORAMAC_STATUS_OK)
 80090be:	f003 fd01 	bl	800cac4 <LoRaMacDeInitialization>
 80090c2:	b900      	cbnz	r0, 80090c6 <LmHandlerStop+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 80090c4:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 80090c6:	f06f 0001 	mvn.w	r0, #1
 80090ca:	e7fb      	b.n	80090c4 <LmHandlerStop+0x8>

080090cc <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt(void)
{
 80090cc:	b508      	push	{r3, lr}
    if (LoRaMacHalt() == LORAMAC_STATUS_OK)
 80090ce:	f002 fe8b 	bl	800bde8 <LoRaMacHalt>
 80090d2:	b900      	cbnz	r0, 80090d6 <LmHandlerHalt+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 80090d4:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 80090d6:	f06f 0001 	mvn.w	r0, #1
 80090da:	e7fb      	b.n	80090d4 <LmHandlerHalt+0x8>

080090dc <LmHandlerNvmDataStore>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 80090dc:	b510      	push	{r4, lr}
 80090de:	b08a      	sub	sp, #40	; 0x28
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
    int32_t status = NVM_DATA_OK;

    lmhStatus = LmHandlerHalt();
 80090e0:	f7ff fff4 	bl	80090cc <LmHandlerHalt>

    if (lmhStatus == LORAMAC_HANDLER_SUCCESS)
 80090e4:	4604      	mov	r4, r0
 80090e6:	b148      	cbz	r0, 80090fc <LmHandlerNvmDataStore+0x20>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
        }
    }

    if ((lmhStatus == LORAMAC_HANDLER_SUCCESS) && (LmHandlerCallbacks->OnNvmDataChange != NULL ))
 80090e8:	b92c      	cbnz	r4, 80090f6 <LmHandlerNvmDataStore+0x1a>
 80090ea:	4b18      	ldr	r3, [pc, #96]	; (800914c <LmHandlerNvmDataStore+0x70>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	69db      	ldr	r3, [r3, #28]
 80090f0:	b10b      	cbz	r3, 80090f6 <LmHandlerNvmDataStore+0x1a>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 80090f2:	2001      	movs	r0, #1
 80090f4:	4798      	blx	r3
    }

    return lmhStatus;
}
 80090f6:	4620      	mov	r0, r4
 80090f8:	b00a      	add	sp, #40	; 0x28
 80090fa:	bd10      	pop	{r4, pc}
        status = NvmDataMgmtStoreBegin();
 80090fc:	f004 fd46 	bl	800db8c <NvmDataMgmtStoreBegin>
        if (status == NVM_DATA_NO_UPDATED_DATA)
 8009100:	f110 0f02 	cmn.w	r0, #2
 8009104:	d012      	beq.n	800912c <LmHandlerNvmDataStore+0x50>
        else if (( status != NVM_DATA_OK ) || (LmHandlerCallbacks->OnStoreContextRequest == NULL))
 8009106:	b9d0      	cbnz	r0, 800913e <LmHandlerNvmDataStore+0x62>
 8009108:	4b10      	ldr	r3, [pc, #64]	; (800914c <LmHandlerNvmDataStore+0x70>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	695b      	ldr	r3, [r3, #20]
 800910e:	b1cb      	cbz	r3, 8009144 <LmHandlerNvmDataStore+0x68>
          mibReq.Type = MIB_NVM_CTXS;
 8009110:	2327      	movs	r3, #39	; 0x27
 8009112:	f88d 3004 	strb.w	r3, [sp, #4]
          LoRaMacMibGetRequestConfirm( &mibReq );
 8009116:	a801      	add	r0, sp, #4
 8009118:	f002 ff04 	bl	800bf24 <LoRaMacMibGetRequestConfirm>
          LmHandlerCallbacks->OnStoreContextRequest(nvm, nvm_size);
 800911c:	4b0b      	ldr	r3, [pc, #44]	; (800914c <LmHandlerNvmDataStore+0x70>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	695b      	ldr	r3, [r3, #20]
 8009122:	f44f 61b2 	mov.w	r1, #1424	; 0x590
 8009126:	9802      	ldr	r0, [sp, #8]
 8009128:	4798      	blx	r3
 800912a:	e001      	b.n	8009130 <LmHandlerNvmDataStore+0x54>
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800912c:	f06f 0407 	mvn.w	r4, #7
        if ( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 8009130:	f004 fd3c 	bl	800dbac <NvmDataMgmtStoreEnd>
 8009134:	2800      	cmp	r0, #0
 8009136:	d0d7      	beq.n	80090e8 <LmHandlerNvmDataStore+0xc>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8009138:	f04f 34ff 	mov.w	r4, #4294967295
 800913c:	e7db      	b.n	80090f6 <LmHandlerNvmDataStore+0x1a>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800913e:	f04f 34ff 	mov.w	r4, #4294967295
 8009142:	e7f5      	b.n	8009130 <LmHandlerNvmDataStore+0x54>
 8009144:	f04f 34ff 	mov.w	r4, #4294967295
 8009148:	e7f2      	b.n	8009130 <LmHandlerNvmDataStore+0x54>
 800914a:	bf00      	nop
 800914c:	2000075c 	.word	0x2000075c

08009150 <LmhpComplianceIsInitialized>:
}

static bool LmhpComplianceIsInitialized( void )
{
    return ComplianceTestState.Initialized;
}
 8009150:	4b01      	ldr	r3, [pc, #4]	; (8009158 <LmhpComplianceIsInitialized+0x8>)
 8009152:	7818      	ldrb	r0, [r3, #0]
 8009154:	4770      	bx	lr
 8009156:	bf00      	nop
 8009158:	200007c0 	.word	0x200007c0

0800915c <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
    return ComplianceTestState.IsTxPending;
}
 800915c:	4b01      	ldr	r3, [pc, #4]	; (8009164 <LmhpComplianceIsTxPending+0x8>)
 800915e:	7858      	ldrb	r0, [r3, #1]
 8009160:	4770      	bx	lr
 8009162:	bf00      	nop
 8009164:	200007c0 	.word	0x200007c0

08009168 <LmhpComplianceOnMlmeConfirm>:
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
    }
}
 8009168:	4770      	bx	lr

0800916a <LmhpComplianceOnMlmeIndication>:
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
    }
}
 800916a:	4770      	bx	lr

0800916c <OnProcessTimer>:
}
#endif
/* ST_WORKAROUND_END */

static void OnProcessTimer( void *context )
{
 800916c:	b508      	push	{r3, lr}
    ComplianceTestState.IsTxPending = true;
 800916e:	4b03      	ldr	r3, [pc, #12]	; (800917c <OnProcessTimer+0x10>)
 8009170:	2201      	movs	r2, #1
 8009172:	705a      	strb	r2, [r3, #1]
    CompliancePackage.OnPackageProcessEvent();
 8009174:	4b02      	ldr	r3, [pc, #8]	; (8009180 <OnProcessTimer+0x14>)
 8009176:	695b      	ldr	r3, [r3, #20]
 8009178:	4798      	blx	r3
}
 800917a:	bd08      	pop	{r3, pc}
 800917c:	200007c0 	.word	0x200007c0
 8009180:	200000c8 	.word	0x200000c8

08009184 <LmhpComplianceOnMcpsIndication>:
    if( ComplianceTestState.Initialized == false )
 8009184:	4b8d      	ldr	r3, [pc, #564]	; (80093bc <LmhpComplianceOnMcpsIndication+0x238>)
 8009186:	781b      	ldrb	r3, [r3, #0]
 8009188:	2b00      	cmp	r3, #0
 800918a:	f000 81fd 	beq.w	8009588 <LmhpComplianceOnMcpsIndication+0x404>
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 800918e:	78c3      	ldrb	r3, [r0, #3]
 8009190:	b90b      	cbnz	r3, 8009196 <LmhpComplianceOnMcpsIndication+0x12>
 8009192:	7b83      	ldrb	r3, [r0, #14]
 8009194:	b11b      	cbz	r3, 800919e <LmhpComplianceOnMcpsIndication+0x1a>
        ComplianceTestState.RxAppCnt++;
 8009196:	4a89      	ldr	r2, [pc, #548]	; (80093bc <LmhpComplianceOnMcpsIndication+0x238>)
 8009198:	8a13      	ldrh	r3, [r2, #16]
 800919a:	3301      	adds	r3, #1
 800919c:	8213      	strh	r3, [r2, #16]
    if( mcpsIndication->RxData == false )
 800919e:	7b43      	ldrb	r3, [r0, #13]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	f000 81f1 	beq.w	8009588 <LmhpComplianceOnMcpsIndication+0x404>
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 80091a6:	78c3      	ldrb	r3, [r0, #3]
 80091a8:	2be0      	cmp	r3, #224	; 0xe0
 80091aa:	f040 81ed 	bne.w	8009588 <LmhpComplianceOnMcpsIndication+0x404>
{
 80091ae:	b570      	push	{r4, r5, r6, lr}
 80091b0:	b094      	sub	sp, #80	; 0x50
    ComplianceTestState.DataBufferSize = 0;
 80091b2:	4b82      	ldr	r3, [pc, #520]	; (80093bc <LmhpComplianceOnMcpsIndication+0x238>)
 80091b4:	2200      	movs	r2, #0
 80091b6:	729a      	strb	r2, [r3, #10]
    switch( mcpsIndication->Buffer[cmdIndex++] )
 80091b8:	6884      	ldr	r4, [r0, #8]
 80091ba:	7823      	ldrb	r3, [r4, #0]
 80091bc:	2b7f      	cmp	r3, #127	; 0x7f
 80091be:	f200 8093 	bhi.w	80092e8 <LmhpComplianceOnMcpsIndication+0x164>
 80091c2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80091c6:	0080      	.short	0x0080
 80091c8:	00a600a1 	.word	0x00a600a1
 80091cc:	00b400ac 	.word	0x00b400ac
 80091d0:	00c800c1 	.word	0x00c800c1
 80091d4:	00f200e1 	.word	0x00f200e1
 80091d8:	0133011f 	.word	0x0133011f
 80091dc:	00910091 	.word	0x00910091
 80091e0:	00910091 	.word	0x00910091
 80091e4:	00910091 	.word	0x00910091
 80091e8:	00910091 	.word	0x00910091
 80091ec:	00910091 	.word	0x00910091
 80091f0:	00910091 	.word	0x00910091
 80091f4:	00910091 	.word	0x00910091
 80091f8:	00910091 	.word	0x00910091
 80091fc:	00910091 	.word	0x00910091
 8009200:	00910091 	.word	0x00910091
 8009204:	01370091 	.word	0x01370091
 8009208:	0142013e 	.word	0x0142013e
 800920c:	00910091 	.word	0x00910091
 8009210:	00910091 	.word	0x00910091
 8009214:	00910091 	.word	0x00910091
 8009218:	00910091 	.word	0x00910091
 800921c:	00910091 	.word	0x00910091
 8009220:	00910091 	.word	0x00910091
 8009224:	00910091 	.word	0x00910091
 8009228:	00910091 	.word	0x00910091
 800922c:	00910091 	.word	0x00910091
 8009230:	00910091 	.word	0x00910091
 8009234:	00910091 	.word	0x00910091
 8009238:	00910091 	.word	0x00910091
 800923c:	00910091 	.word	0x00910091
 8009240:	00910091 	.word	0x00910091
 8009244:	00910091 	.word	0x00910091
 8009248:	00910091 	.word	0x00910091
 800924c:	00910091 	.word	0x00910091
 8009250:	00910091 	.word	0x00910091
 8009254:	00910091 	.word	0x00910091
 8009258:	00910091 	.word	0x00910091
 800925c:	00910091 	.word	0x00910091
 8009260:	00910091 	.word	0x00910091
 8009264:	00910091 	.word	0x00910091
 8009268:	00910091 	.word	0x00910091
 800926c:	00910091 	.word	0x00910091
 8009270:	00910091 	.word	0x00910091
 8009274:	00910091 	.word	0x00910091
 8009278:	00910091 	.word	0x00910091
 800927c:	00910091 	.word	0x00910091
 8009280:	00910091 	.word	0x00910091
 8009284:	00910091 	.word	0x00910091
 8009288:	00910091 	.word	0x00910091
 800928c:	00910091 	.word	0x00910091
 8009290:	00910091 	.word	0x00910091
 8009294:	00910091 	.word	0x00910091
 8009298:	00910091 	.word	0x00910091
 800929c:	00910091 	.word	0x00910091
 80092a0:	00910091 	.word	0x00910091
 80092a4:	00910091 	.word	0x00910091
 80092a8:	00910091 	.word	0x00910091
 80092ac:	00910091 	.word	0x00910091
 80092b0:	00910091 	.word	0x00910091
 80092b4:	00910091 	.word	0x00910091
 80092b8:	00910091 	.word	0x00910091
 80092bc:	00910091 	.word	0x00910091
 80092c0:	016e014d 	.word	0x016e014d
 80092c4:	017c      	.short	0x017c
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 80092c6:	4b3d      	ldr	r3, [pc, #244]	; (80093bc <LmhpComplianceOnMcpsIndication+0x238>)
 80092c8:	68da      	ldr	r2, [r3, #12]
 80092ca:	2101      	movs	r1, #1
 80092cc:	7299      	strb	r1, [r3, #10]
 80092ce:	2000      	movs	r0, #0
 80092d0:	7010      	strb	r0, [r2, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 80092d2:	68d8      	ldr	r0, [r3, #12]
 80092d4:	7a9a      	ldrb	r2, [r3, #10]
 80092d6:	1854      	adds	r4, r2, r1
 80092d8:	729c      	strb	r4, [r3, #10]
 80092da:	2406      	movs	r4, #6
 80092dc:	5484      	strb	r4, [r0, r2]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 80092de:	68d8      	ldr	r0, [r3, #12]
 80092e0:	7a9a      	ldrb	r2, [r3, #10]
 80092e2:	1854      	adds	r4, r2, r1
 80092e4:	729c      	strb	r4, [r3, #10]
 80092e6:	5481      	strb	r1, [r0, r2]
    if( ComplianceTestState.DataBufferSize != 0 )
 80092e8:	4b34      	ldr	r3, [pc, #208]	; (80093bc <LmhpComplianceOnMcpsIndication+0x238>)
 80092ea:	7a9b      	ldrb	r3, [r3, #10]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	f000 8144 	beq.w	800957a <LmhpComplianceOnMcpsIndication+0x3f6>
        TimerSetValue( &ProcessTimer, 1000 );
 80092f2:	4c33      	ldr	r4, [pc, #204]	; (80093c0 <LmhpComplianceOnMcpsIndication+0x23c>)
 80092f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80092f8:	4620      	mov	r0, r4
 80092fa:	f009 ff9b 	bl	8013234 <UTIL_TIMER_SetPeriod>
        TimerStart(&ProcessTimer);
 80092fe:	4620      	mov	r0, r4
 8009300:	f009 ff52 	bl	80131a8 <UTIL_TIMER_Start>
}
 8009304:	b014      	add	sp, #80	; 0x50
 8009306:	bd70      	pop	{r4, r5, r6, pc}
        ComplianceTestState.IsResetCmdPending = true;
 8009308:	4b2c      	ldr	r3, [pc, #176]	; (80093bc <LmhpComplianceOnMcpsIndication+0x238>)
 800930a:	2201      	movs	r2, #1
 800930c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        break;
 8009310:	e7ea      	b.n	80092e8 <LmhpComplianceOnMcpsIndication+0x164>
        CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 8009312:	4b2c      	ldr	r3, [pc, #176]	; (80093c4 <LmhpComplianceOnMcpsIndication+0x240>)
 8009314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009316:	2101      	movs	r1, #1
 8009318:	2002      	movs	r0, #2
 800931a:	4798      	blx	r3
        break;
 800931c:	e7e4      	b.n	80092e8 <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 800931e:	7862      	ldrb	r2, [r4, #1]
 8009320:	4b26      	ldr	r3, [pc, #152]	; (80093bc <LmhpComplianceOnMcpsIndication+0x238>)
 8009322:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
        ComplianceTestState.IsClassReqCmdPending = true;
 8009326:	2201      	movs	r2, #1
 8009328:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        break;
 800932c:	e7dc      	b.n	80092e8 <LmhpComplianceOnMcpsIndication+0x164>
        mibReq.Type            = MIB_ADR;
 800932e:	2304      	movs	r3, #4
 8009330:	f88d 3000 	strb.w	r3, [sp]
        mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 8009334:	7863      	ldrb	r3, [r4, #1]
 8009336:	3b00      	subs	r3, #0
 8009338:	bf18      	it	ne
 800933a:	2301      	movne	r3, #1
 800933c:	f88d 3004 	strb.w	r3, [sp, #4]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8009340:	4668      	mov	r0, sp
 8009342:	f002 ff3d 	bl	800c1c0 <LoRaMacMibSetRequestConfirm>
        break;
 8009346:	e7cf      	b.n	80092e8 <LmhpComplianceOnMcpsIndication+0x164>
        LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 8009348:	7860      	ldrb	r0, [r4, #1]
 800934a:	3800      	subs	r0, #0
 800934c:	bf18      	it	ne
 800934e:	2001      	movne	r0, #1
 8009350:	f003 fba4 	bl	800ca9c <LoRaMacTestSetDutyCycleOn>
        break;
 8009354:	e7c8      	b.n	80092e8 <LmhpComplianceOnMcpsIndication+0x164>
        uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 8009356:	466d      	mov	r5, sp
 8009358:	4e1b      	ldr	r6, [pc, #108]	; (80093c8 <LmhpComplianceOnMcpsIndication+0x244>)
 800935a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800935c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800935e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009360:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009362:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8009366:	e885 0007 	stmia.w	r5, {r0, r1, r2}
        uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 800936a:	7863      	ldrb	r3, [r4, #1]
        if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 800936c:	2b0a      	cmp	r3, #10
 800936e:	d8bb      	bhi.n	80092e8 <LmhpComplianceOnMcpsIndication+0x164>
            if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 8009370:	4a16      	ldr	r2, [pc, #88]	; (80093cc <LmhpComplianceOnMcpsIndication+0x248>)
 8009372:	6812      	ldr	r2, [r2, #0]
 8009374:	6852      	ldr	r2, [r2, #4]
 8009376:	2a00      	cmp	r2, #0
 8009378:	d0b6      	beq.n	80092e8 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 800937a:	a914      	add	r1, sp, #80	; 0x50
 800937c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8009380:	f853 0c50 	ldr.w	r0, [r3, #-80]
 8009384:	4790      	blx	r2
        break;
 8009386:	e7af      	b.n	80092e8 <LmhpComplianceOnMcpsIndication+0x164>
        uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 8009388:	7862      	ldrb	r2, [r4, #1]
        if( ( frameType == 1 ) || ( frameType == 2 ) )
 800938a:	1e53      	subs	r3, r2, #1
 800938c:	b2db      	uxtb	r3, r3
 800938e:	2b01      	cmp	r3, #1
 8009390:	d8aa      	bhi.n	80092e8 <LmhpComplianceOnMcpsIndication+0x164>
            ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 8009392:	1e50      	subs	r0, r2, #1
 8009394:	bf18      	it	ne
 8009396:	2001      	movne	r0, #1
 8009398:	4b08      	ldr	r3, [pc, #32]	; (80093bc <LmhpComplianceOnMcpsIndication+0x238>)
 800939a:	7218      	strb	r0, [r3, #8]
            if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 800939c:	4b0b      	ldr	r3, [pc, #44]	; (80093cc <LmhpComplianceOnMcpsIndication+0x248>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	689b      	ldr	r3, [r3, #8]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d0a0      	beq.n	80092e8 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 80093a6:	4798      	blx	r3
 80093a8:	e79e      	b.n	80092e8 <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 80093aa:	4b04      	ldr	r3, [pc, #16]	; (80093bc <LmhpComplianceOnMcpsIndication+0x238>)
 80093ac:	68da      	ldr	r2, [r3, #12]
 80093ae:	2101      	movs	r1, #1
 80093b0:	7299      	strb	r1, [r3, #10]
 80093b2:	2308      	movs	r3, #8
 80093b4:	7013      	strb	r3, [r2, #0]
        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 80093b6:	460b      	mov	r3, r1
 80093b8:	e01b      	b.n	80093f2 <LmhpComplianceOnMcpsIndication+0x26e>
 80093ba:	bf00      	nop
 80093bc:	200007c0 	.word	0x200007c0
 80093c0:	200007f8 	.word	0x200007f8
 80093c4:	200000c8 	.word	0x200000c8
 80093c8:	080140cc 	.word	0x080140cc
 80093cc:	200007bc 	.word	0x200007bc
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 80093d0:	6882      	ldr	r2, [r0, #8]
 80093d2:	f101 0c01 	add.w	ip, r1, #1
 80093d6:	5c52      	ldrb	r2, [r2, r1]
 80093d8:	496c      	ldr	r1, [pc, #432]	; (800958c <LmhpComplianceOnMcpsIndication+0x408>)
 80093da:	68cd      	ldr	r5, [r1, #12]
 80093dc:	7a8c      	ldrb	r4, [r1, #10]
 80093de:	f104 0e01 	add.w	lr, r4, #1
 80093e2:	f881 e00a 	strb.w	lr, [r1, #10]
 80093e6:	3201      	adds	r2, #1
 80093e8:	552a      	strb	r2, [r5, r4]
             i++ )
 80093ea:	3301      	adds	r3, #1
 80093ec:	b2db      	uxtb	r3, r3
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 80093ee:	fa5f f18c 	uxtb.w	r1, ip
        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 80093f2:	4a66      	ldr	r2, [pc, #408]	; (800958c <LmhpComplianceOnMcpsIndication+0x408>)
 80093f4:	7a52      	ldrb	r2, [r2, #9]
 80093f6:	7b04      	ldrb	r4, [r0, #12]
 80093f8:	42a2      	cmp	r2, r4
 80093fa:	bf28      	it	cs
 80093fc:	4622      	movcs	r2, r4
 80093fe:	429a      	cmp	r2, r3
 8009400:	d8e6      	bhi.n	80093d0 <LmhpComplianceOnMcpsIndication+0x24c>
 8009402:	e771      	b.n	80092e8 <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 8009404:	4b61      	ldr	r3, [pc, #388]	; (800958c <LmhpComplianceOnMcpsIndication+0x408>)
 8009406:	68da      	ldr	r2, [r3, #12]
 8009408:	2101      	movs	r1, #1
 800940a:	7299      	strb	r1, [r3, #10]
 800940c:	2109      	movs	r1, #9
 800940e:	7011      	strb	r1, [r2, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 8009410:	8a18      	ldrh	r0, [r3, #16]
 8009412:	68d9      	ldr	r1, [r3, #12]
 8009414:	7a9a      	ldrb	r2, [r3, #10]
 8009416:	1c54      	adds	r4, r2, #1
 8009418:	729c      	strb	r4, [r3, #10]
 800941a:	5488      	strb	r0, [r1, r2]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 800941c:	8a1a      	ldrh	r2, [r3, #16]
 800941e:	68d8      	ldr	r0, [r3, #12]
 8009420:	7a99      	ldrb	r1, [r3, #10]
 8009422:	1c4c      	adds	r4, r1, #1
 8009424:	729c      	strb	r4, [r3, #10]
 8009426:	0a13      	lsrs	r3, r2, #8
 8009428:	5443      	strb	r3, [r0, r1]
        break;
 800942a:	e75d      	b.n	80092e8 <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.RxAppCnt = 0;
 800942c:	4b57      	ldr	r3, [pc, #348]	; (800958c <LmhpComplianceOnMcpsIndication+0x408>)
 800942e:	2200      	movs	r2, #0
 8009430:	821a      	strh	r2, [r3, #16]
        break;
 8009432:	e759      	b.n	80092e8 <LmhpComplianceOnMcpsIndication+0x164>
        mlmeReq.Type = MLME_LINK_CHECK;
 8009434:	2304      	movs	r3, #4
 8009436:	f88d 3000 	strb.w	r3, [sp]
        LoRaMacMlmeRequest( &mlmeReq );
 800943a:	4668      	mov	r0, sp
 800943c:	f003 f946 	bl	800c6cc <LoRaMacMlmeRequest>
        break;
 8009440:	e752      	b.n	80092e8 <LmhpComplianceOnMcpsIndication+0x164>
        CompliancePackage.OnDeviceTimeRequest( );
 8009442:	4b53      	ldr	r3, [pc, #332]	; (8009590 <LmhpComplianceOnMcpsIndication+0x40c>)
 8009444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009446:	4798      	blx	r3
        break;
 8009448:	e74e      	b.n	80092e8 <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 800944a:	7860      	ldrb	r0, [r4, #1]
 800944c:	4b4f      	ldr	r3, [pc, #316]	; (800958c <LmhpComplianceOnMcpsIndication+0x408>)
 800944e:	7558      	strb	r0, [r3, #21]
        if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 8009450:	4b50      	ldr	r3, [pc, #320]	; (8009594 <LmhpComplianceOnMcpsIndication+0x410>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	68db      	ldr	r3, [r3, #12]
 8009456:	2b00      	cmp	r3, #0
 8009458:	f43f af46 	beq.w	80092e8 <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 800945c:	4798      	blx	r3
 800945e:	e743      	b.n	80092e8 <LmhpComplianceOnMcpsIndication+0x164>
        if( mcpsIndication->BufferSize == 7 )
 8009460:	7b03      	ldrb	r3, [r0, #12]
 8009462:	2b07      	cmp	r3, #7
 8009464:	f47f af40 	bne.w	80092e8 <LmhpComplianceOnMcpsIndication+0x164>
            mlmeReq.Type = MLME_TXCW;
 8009468:	2305      	movs	r3, #5
 800946a:	f88d 3000 	strb.w	r3, [sp]
                ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 800946e:	7863      	ldrb	r3, [r4, #1]
 8009470:	78a2      	ldrb	r2, [r4, #2]
 8009472:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            mlmeReq.Req.TxCw.Timeout =
 8009476:	f8ad 3004 	strh.w	r3, [sp, #4]
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800947a:	78e3      	ldrb	r3, [r4, #3]
 800947c:	7922      	ldrb	r2, [r4, #4]
 800947e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 8009482:	7962      	ldrb	r2, [r4, #5]
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 8009484:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 8009488:	2264      	movs	r2, #100	; 0x64
 800948a:	fb02 f303 	mul.w	r3, r2, r3
            mlmeReq.Req.TxCw.Frequency =
 800948e:	9302      	str	r3, [sp, #8]
            mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 8009490:	6883      	ldr	r3, [r0, #8]
 8009492:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8009496:	f88d 300c 	strb.w	r3, [sp, #12]
            LoRaMacMlmeRequest( &mlmeReq );
 800949a:	4668      	mov	r0, sp
 800949c:	f003 f916 	bl	800c6cc <LoRaMacMlmeRequest>
        break;
 80094a0:	e722      	b.n	80092e8 <LmhpComplianceOnMcpsIndication+0x164>
        mibReq.Type = MIB_IS_CERT_FPORT_ON;
 80094a2:	2339      	movs	r3, #57	; 0x39
 80094a4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
        mibReq.Param.IsCertPortOn = false;
 80094a8:	2300      	movs	r3, #0
 80094aa:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        LoRaMacMibSetRequestConfirm( &mibReq );
 80094ae:	a80b      	add	r0, sp, #44	; 0x2c
 80094b0:	f002 fe86 	bl	800c1c0 <LoRaMacMibSetRequestConfirm>
        ComplianceTestState.IsResetCmdPending = true;
 80094b4:	4b35      	ldr	r3, [pc, #212]	; (800958c <LmhpComplianceOnMcpsIndication+0x408>)
 80094b6:	2201      	movs	r2, #1
 80094b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        break;
 80094bc:	e714      	b.n	80092e8 <LmhpComplianceOnMcpsIndication+0x164>
        mibReq.Type = MIB_LORAWAN_VERSION;
 80094be:	232a      	movs	r3, #42	; 0x2a
 80094c0:	f88d 3000 	strb.w	r3, [sp]
        LoRaMacMibGetRequestConfirm( &mibReq );
 80094c4:	4668      	mov	r0, sp
 80094c6:	f002 fd2d 	bl	800bf24 <LoRaMacMibGetRequestConfirm>
        lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 80094ca:	9901      	ldr	r1, [sp, #4]
        lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 80094cc:	9a02      	ldr	r2, [sp, #8]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 80094ce:	4b2f      	ldr	r3, [pc, #188]	; (800958c <LmhpComplianceOnMcpsIndication+0x408>)
 80094d0:	68dc      	ldr	r4, [r3, #12]
 80094d2:	7a98      	ldrb	r0, [r3, #10]
 80094d4:	1c45      	adds	r5, r0, #1
 80094d6:	729d      	strb	r5, [r3, #10]
 80094d8:	257f      	movs	r5, #127	; 0x7f
 80094da:	5425      	strb	r5, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 80094dc:	482d      	ldr	r0, [pc, #180]	; (8009594 <LmhpComplianceOnMcpsIndication+0x410>)
 80094de:	6800      	ldr	r0, [r0, #0]
 80094e0:	68dd      	ldr	r5, [r3, #12]
 80094e2:	7a9c      	ldrb	r4, [r3, #10]
 80094e4:	1c66      	adds	r6, r4, #1
 80094e6:	729e      	strb	r6, [r3, #10]
 80094e8:	78c6      	ldrb	r6, [r0, #3]
 80094ea:	552e      	strb	r6, [r5, r4]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 80094ec:	68dd      	ldr	r5, [r3, #12]
 80094ee:	7a9c      	ldrb	r4, [r3, #10]
 80094f0:	1c66      	adds	r6, r4, #1
 80094f2:	729e      	strb	r6, [r3, #10]
 80094f4:	7886      	ldrb	r6, [r0, #2]
 80094f6:	552e      	strb	r6, [r5, r4]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 80094f8:	68dd      	ldr	r5, [r3, #12]
 80094fa:	7a9c      	ldrb	r4, [r3, #10]
 80094fc:	1c66      	adds	r6, r4, #1
 80094fe:	729e      	strb	r6, [r3, #10]
 8009500:	7846      	ldrb	r6, [r0, #1]
 8009502:	552e      	strb	r6, [r5, r4]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 8009504:	68dd      	ldr	r5, [r3, #12]
 8009506:	7a9c      	ldrb	r4, [r3, #10]
 8009508:	1c66      	adds	r6, r4, #1
 800950a:	729e      	strb	r6, [r3, #10]
 800950c:	7800      	ldrb	r0, [r0, #0]
 800950e:	5528      	strb	r0, [r5, r4]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 8009510:	68dc      	ldr	r4, [r3, #12]
 8009512:	7a98      	ldrb	r0, [r3, #10]
 8009514:	1c45      	adds	r5, r0, #1
 8009516:	729d      	strb	r5, [r3, #10]
 8009518:	f3c1 6507 	ubfx	r5, r1, #24, #8
 800951c:	5425      	strb	r5, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 800951e:	68dc      	ldr	r4, [r3, #12]
 8009520:	7a98      	ldrb	r0, [r3, #10]
 8009522:	1c45      	adds	r5, r0, #1
 8009524:	729d      	strb	r5, [r3, #10]
 8009526:	f3c1 4507 	ubfx	r5, r1, #16, #8
 800952a:	5425      	strb	r5, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 800952c:	68dc      	ldr	r4, [r3, #12]
 800952e:	7a98      	ldrb	r0, [r3, #10]
 8009530:	1c45      	adds	r5, r0, #1
 8009532:	729d      	strb	r5, [r3, #10]
 8009534:	f3c1 2507 	ubfx	r5, r1, #8, #8
 8009538:	5425      	strb	r5, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 800953a:	68dc      	ldr	r4, [r3, #12]
 800953c:	7a98      	ldrb	r0, [r3, #10]
 800953e:	1c45      	adds	r5, r0, #1
 8009540:	729d      	strb	r5, [r3, #10]
 8009542:	5421      	strb	r1, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 8009544:	68d8      	ldr	r0, [r3, #12]
 8009546:	7a99      	ldrb	r1, [r3, #10]
 8009548:	1c4c      	adds	r4, r1, #1
 800954a:	729c      	strb	r4, [r3, #10]
 800954c:	f3c2 6407 	ubfx	r4, r2, #24, #8
 8009550:	5444      	strb	r4, [r0, r1]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 8009552:	68d8      	ldr	r0, [r3, #12]
 8009554:	7a99      	ldrb	r1, [r3, #10]
 8009556:	1c4c      	adds	r4, r1, #1
 8009558:	729c      	strb	r4, [r3, #10]
 800955a:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800955e:	5444      	strb	r4, [r0, r1]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 8009560:	68d8      	ldr	r0, [r3, #12]
 8009562:	7a99      	ldrb	r1, [r3, #10]
 8009564:	1c4c      	adds	r4, r1, #1
 8009566:	729c      	strb	r4, [r3, #10]
 8009568:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800956c:	5444      	strb	r4, [r0, r1]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 800956e:	68d8      	ldr	r0, [r3, #12]
 8009570:	7a99      	ldrb	r1, [r3, #10]
 8009572:	1c4c      	adds	r4, r1, #1
 8009574:	729c      	strb	r4, [r3, #10]
 8009576:	5442      	strb	r2, [r0, r1]
        break;
 8009578:	e6b6      	b.n	80092e8 <LmhpComplianceOnMcpsIndication+0x164>
        TimerStop(&ProcessTimer);
 800957a:	4807      	ldr	r0, [pc, #28]	; (8009598 <LmhpComplianceOnMcpsIndication+0x414>)
 800957c:	f009 fdba 	bl	80130f4 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 8009580:	4b02      	ldr	r3, [pc, #8]	; (800958c <LmhpComplianceOnMcpsIndication+0x408>)
 8009582:	2200      	movs	r2, #0
 8009584:	705a      	strb	r2, [r3, #1]
 8009586:	e6bd      	b.n	8009304 <LmhpComplianceOnMcpsIndication+0x180>
 8009588:	4770      	bx	lr
 800958a:	bf00      	nop
 800958c:	200007c0 	.word	0x200007c0
 8009590:	200000c8 	.word	0x200000c8
 8009594:	200007bc 	.word	0x200007bc
 8009598:	200007f8 	.word	0x200007f8

0800959c <LmhpComplianceProcess>:
{
 800959c:	b530      	push	{r4, r5, lr}
 800959e:	b083      	sub	sp, #12
    if( ComplianceTestState.IsTxPending == true )
 80095a0:	4b28      	ldr	r3, [pc, #160]	; (8009644 <LmhpComplianceProcess+0xa8>)
 80095a2:	785b      	ldrb	r3, [r3, #1]
 80095a4:	b993      	cbnz	r3, 80095cc <LmhpComplianceProcess+0x30>
        if( ComplianceTestState.IsClassReqCmdPending == true )
 80095a6:	4b27      	ldr	r3, [pc, #156]	; (8009644 <LmhpComplianceProcess+0xa8>)
 80095a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d13f      	bne.n	8009630 <LmhpComplianceProcess+0x94>
    if( ComplianceTestState.IsResetCmdPending == true )
 80095b0:	4b24      	ldr	r3, [pc, #144]	; (8009644 <LmhpComplianceProcess+0xa8>)
 80095b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80095b6:	b13b      	cbz	r3, 80095c8 <LmhpComplianceProcess+0x2c>
        ComplianceTestState.IsResetCmdPending = false;
 80095b8:	4b22      	ldr	r3, [pc, #136]	; (8009644 <LmhpComplianceProcess+0xa8>)
 80095ba:	2200      	movs	r2, #0
 80095bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        if (CompliancePackage.OnSystemReset != NULL)
 80095c0:	4b21      	ldr	r3, [pc, #132]	; (8009648 <LmhpComplianceProcess+0xac>)
 80095c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095c4:	b103      	cbz	r3, 80095c8 <LmhpComplianceProcess+0x2c>
            CompliancePackage.OnSystemReset( );
 80095c6:	4798      	blx	r3
}
 80095c8:	b003      	add	sp, #12
 80095ca:	bd30      	pop	{r4, r5, pc}
        TimerTime_t now = TimerGetCurrentTime( );
 80095cc:	f009 fd52 	bl	8013074 <UTIL_TIMER_GetCurrentTime>
 80095d0:	4604      	mov	r4, r0
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 80095d2:	4b1c      	ldr	r3, [pc, #112]	; (8009644 <LmhpComplianceProcess+0xa8>)
 80095d4:	685d      	ldr	r5, [r3, #4]
 80095d6:	f7ff f9f5 	bl	80089c4 <LmHandlerGetDutyCycleWaitTime>
 80095da:	4405      	add	r5, r0
 80095dc:	42a5      	cmp	r5, r4
 80095de:	d2e7      	bcs.n	80095b0 <LmhpComplianceProcess+0x14>
            if( ComplianceTestState.DataBufferSize != 0 )
 80095e0:	4b18      	ldr	r3, [pc, #96]	; (8009644 <LmhpComplianceProcess+0xa8>)
 80095e2:	7a9b      	ldrb	r3, [r3, #10]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d0e3      	beq.n	80095b0 <LmhpComplianceProcess+0x14>
                LmHandlerAppData_t appData = {
 80095e8:	22e0      	movs	r2, #224	; 0xe0
 80095ea:	f88d 2000 	strb.w	r2, [sp]
 80095ee:	f88d 3001 	strb.w	r3, [sp, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 80095f2:	4b14      	ldr	r3, [pc, #80]	; (8009644 <LmhpComplianceProcess+0xa8>)
 80095f4:	68da      	ldr	r2, [r3, #12]
                LmHandlerAppData_t appData = {
 80095f6:	9201      	str	r2, [sp, #4]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 80095f8:	2201      	movs	r2, #1
 80095fa:	7a19      	ldrb	r1, [r3, #8]
 80095fc:	4668      	mov	r0, sp
 80095fe:	f7ff f9f9 	bl	80089f4 <LmHandlerSend>
                if ((lmhStatus == LORAMAC_HANDLER_BUSY_ERROR) || (lmhStatus == LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED))
 8009602:	f110 0f02 	cmn.w	r0, #2
 8009606:	d009      	beq.n	800961c <LmhpComplianceProcess+0x80>
 8009608:	f110 0f06 	cmn.w	r0, #6
 800960c:	d006      	beq.n	800961c <LmhpComplianceProcess+0x80>
                    ComplianceTestState.IsTxPending = false;
 800960e:	4b0d      	ldr	r3, [pc, #52]	; (8009644 <LmhpComplianceProcess+0xa8>)
 8009610:	2200      	movs	r2, #0
 8009612:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 8009614:	729a      	strb	r2, [r3, #10]
                ComplianceTestState.TxPendingTimestamp = now;
 8009616:	4b0b      	ldr	r3, [pc, #44]	; (8009644 <LmhpComplianceProcess+0xa8>)
 8009618:	605c      	str	r4, [r3, #4]
 800961a:	e7c9      	b.n	80095b0 <LmhpComplianceProcess+0x14>
                    TimerSetValue( &ProcessTimer, 1000 );
 800961c:	4d0b      	ldr	r5, [pc, #44]	; (800964c <LmhpComplianceProcess+0xb0>)
 800961e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009622:	4628      	mov	r0, r5
 8009624:	f009 fe06 	bl	8013234 <UTIL_TIMER_SetPeriod>
                    TimerStart(&ProcessTimer);
 8009628:	4628      	mov	r0, r5
 800962a:	f009 fdbd 	bl	80131a8 <UTIL_TIMER_Start>
 800962e:	e7f2      	b.n	8009616 <LmhpComplianceProcess+0x7a>
            ComplianceTestState.IsClassReqCmdPending = false;
 8009630:	4b04      	ldr	r3, [pc, #16]	; (8009644 <LmhpComplianceProcess+0xa8>)
 8009632:	2200      	movs	r2, #0
 8009634:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 8009638:	f893 0036 	ldrb.w	r0, [r3, #54]	; 0x36
 800963c:	f7ff fa7c 	bl	8008b38 <LmHandlerRequestClass>
 8009640:	e7b6      	b.n	80095b0 <LmhpComplianceProcess+0x14>
 8009642:	bf00      	nop
 8009644:	200007c0 	.word	0x200007c0
 8009648:	200000c8 	.word	0x200000c8
 800964c:	200007f8 	.word	0x200007f8

08009650 <LmhpComplianceInit>:
{
 8009650:	b530      	push	{r4, r5, lr}
 8009652:	b083      	sub	sp, #12
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 8009654:	b188      	cbz	r0, 800967a <LmhpComplianceInit+0x2a>
 8009656:	4603      	mov	r3, r0
 8009658:	b179      	cbz	r1, 800967a <LmhpComplianceInit+0x2a>
        ComplianceParams                      = ( LmhpComplianceParams_t* ) params;
 800965a:	4813      	ldr	r0, [pc, #76]	; (80096a8 <LmhpComplianceInit+0x58>)
 800965c:	6003      	str	r3, [r0, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 800965e:	4b13      	ldr	r3, [pc, #76]	; (80096ac <LmhpComplianceInit+0x5c>)
 8009660:	60d9      	str	r1, [r3, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 8009662:	725a      	strb	r2, [r3, #9]
        ComplianceTestState.Initialized       = true;
 8009664:	2201      	movs	r2, #1
 8009666:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 8009668:	2200      	movs	r2, #0
 800966a:	9200      	str	r2, [sp, #0]
 800966c:	4b10      	ldr	r3, [pc, #64]	; (80096b0 <LmhpComplianceInit+0x60>)
 800966e:	f04f 31ff 	mov.w	r1, #4294967295
 8009672:	4810      	ldr	r0, [pc, #64]	; (80096b4 <LmhpComplianceInit+0x64>)
 8009674:	f009 fce0 	bl	8013038 <UTIL_TIMER_Create>
 8009678:	e004      	b.n	8009684 <LmhpComplianceInit+0x34>
        ComplianceParams                = NULL;
 800967a:	2300      	movs	r3, #0
 800967c:	4a0a      	ldr	r2, [pc, #40]	; (80096a8 <LmhpComplianceInit+0x58>)
 800967e:	6013      	str	r3, [r2, #0]
        ComplianceTestState.Initialized = false;
 8009680:	4a0a      	ldr	r2, [pc, #40]	; (80096ac <LmhpComplianceInit+0x5c>)
 8009682:	7013      	strb	r3, [r2, #0]
    ComplianceTestState.RxAppCnt = 0;
 8009684:	4c09      	ldr	r4, [pc, #36]	; (80096ac <LmhpComplianceInit+0x5c>)
 8009686:	2500      	movs	r5, #0
 8009688:	8225      	strh	r5, [r4, #16]
    memset1( ( uint8_t* ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 800968a:	2220      	movs	r2, #32
 800968c:	4629      	mov	r1, r5
 800968e:	f104 0014 	add.w	r0, r4, #20
 8009692:	f007 fb4a 	bl	8010d2a <memset1>
    ComplianceTestState.IsTxPending = false;
 8009696:	7065      	strb	r5, [r4, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 8009698:	74a5      	strb	r5, [r4, #18]
    ComplianceTestState.IsResetCmdPending = false;
 800969a:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 800969e:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 80096a2:	b003      	add	sp, #12
 80096a4:	bd30      	pop	{r4, r5, pc}
 80096a6:	bf00      	nop
 80096a8:	200007bc 	.word	0x200007bc
 80096ac:	200007c0 	.word	0x200007c0
 80096b0:	0800916d 	.word	0x0800916d
 80096b4:	200007f8 	.word	0x200007f8

080096b8 <LmhpCompliancePackageFactory>:
}
 80096b8:	4800      	ldr	r0, [pc, #0]	; (80096bc <LmhpCompliancePackageFactory+0x4>)
 80096ba:	4770      	bx	lr
 80096bc:	200000c8 	.word	0x200000c8

080096c0 <OnRadioRxError>:
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
}

static void OnRadioRxError( void )
{
 80096c0:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 80096c2:	4a06      	ldr	r2, [pc, #24]	; (80096dc <OnRadioRxError+0x1c>)
 80096c4:	7813      	ldrb	r3, [r2, #0]
 80096c6:	f043 0304 	orr.w	r3, r3, #4
 80096ca:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80096cc:	4b04      	ldr	r3, [pc, #16]	; (80096e0 <OnRadioRxError+0x20>)
 80096ce:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80096d2:	b113      	cbz	r3, 80096da <OnRadioRxError+0x1a>
 80096d4:	691b      	ldr	r3, [r3, #16]
 80096d6:	b103      	cbz	r3, 80096da <OnRadioRxError+0x1a>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 80096d8:	4798      	blx	r3
    }
}
 80096da:	bd08      	pop	{r3, pc}
 80096dc:	20000810 	.word	0x20000810
 80096e0:	20000814 	.word	0x20000814

080096e4 <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80096e4:	4b07      	ldr	r3, [pc, #28]	; (8009704 <UpdateRxSlotIdleState+0x20>)
 80096e6:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80096ea:	2b02      	cmp	r3, #2
 80096ec:	d004      	beq.n	80096f8 <UpdateRxSlotIdleState+0x14>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 80096ee:	4b06      	ldr	r3, [pc, #24]	; (8009708 <UpdateRxSlotIdleState+0x24>)
 80096f0:	2206      	movs	r2, #6
 80096f2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
 80096f6:	4770      	bx	lr
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 80096f8:	4b03      	ldr	r3, [pc, #12]	; (8009708 <UpdateRxSlotIdleState+0x24>)
 80096fa:	2202      	movs	r2, #2
 80096fc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
    }
}
 8009700:	4770      	bx	lr
 8009702:	bf00      	nop
 8009704:	20008000 	.word	0x20008000
 8009708:	20000814 	.word	0x20000814

0800970c <LoRaMacEnableRequests>:
    return true;
}

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
    MacCtx.AllowRequests = requestState;
 800970c:	4b01      	ldr	r3, [pc, #4]	; (8009714 <LoRaMacEnableRequests+0x8>)
 800970e:	f883 0496 	strb.w	r0, [r3, #1174]	; 0x496
}
 8009712:	4770      	bx	lr
 8009714:	20000814 	.word	0x20000814

08009718 <LoRaMacHandleIndicationEvents>:
        }
    }
}

static void LoRaMacHandleIndicationEvents( void )
{
 8009718:	b508      	push	{r3, lr}
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800971a:	4b15      	ldr	r3, [pc, #84]	; (8009770 <LoRaMacHandleIndicationEvents+0x58>)
 800971c:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8009720:	f013 0f08 	tst.w	r3, #8
 8009724:	d00e      	beq.n	8009744 <LoRaMacHandleIndicationEvents+0x2c>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8009726:	4812      	ldr	r0, [pc, #72]	; (8009770 <LoRaMacHandleIndicationEvents+0x58>)
 8009728:	f890 3495 	ldrb.w	r3, [r0, #1173]	; 0x495
 800972c:	f36f 03c3 	bfc	r3, #3, #1
 8009730:	f880 3495 	strb.w	r3, [r0, #1173]	; 0x495
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 8009734:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8009738:	68db      	ldr	r3, [r3, #12]
 800973a:	f500 6192 	add.w	r1, r0, #1168	; 0x490
 800973e:	f200 406c 	addw	r0, r0, #1132	; 0x46c
 8009742:	4798      	blx	r3
    }
    */
    /*ST_WORKAROUND_END */

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8009744:	4b0a      	ldr	r3, [pc, #40]	; (8009770 <LoRaMacHandleIndicationEvents+0x58>)
 8009746:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800974a:	f013 0f02 	tst.w	r3, #2
 800974e:	d00e      	beq.n	800976e <LoRaMacHandleIndicationEvents+0x56>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8009750:	4807      	ldr	r0, [pc, #28]	; (8009770 <LoRaMacHandleIndicationEvents+0x58>)
 8009752:	f890 3495 	ldrb.w	r3, [r0, #1173]	; 0x495
 8009756:	f36f 0341 	bfc	r3, #1, #1
 800975a:	f880 3495 	strb.w	r3, [r0, #1173]	; 0x495
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800975e:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	f500 6192 	add.w	r1, r0, #1168	; 0x490
 8009768:	f200 4024 	addw	r0, r0, #1060	; 0x424
 800976c:	4798      	blx	r3
    }
}
 800976e:	bd08      	pop	{r3, pc}
 8009770:	20000814 	.word	0x20000814

08009774 <CheckForMinimumAbpDatarate>:
}

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
    if( ( adr == true ) &&
 8009774:	b110      	cbz	r0, 800977c <CheckForMinimumAbpDatarate+0x8>
 8009776:	2901      	cmp	r1, #1
 8009778:	d001      	beq.n	800977e <CheckForMinimumAbpDatarate+0xa>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
    {
        return true;
    }
    return false;
 800977a:	2000      	movs	r0, #0
}
 800977c:	4770      	bx	lr
        ( activation == ACTIVATION_TYPE_ABP ) &&
 800977e:	2a00      	cmp	r2, #0
 8009780:	d0fc      	beq.n	800977c <CheckForMinimumAbpDatarate+0x8>
    return false;
 8009782:	2000      	movs	r0, #0
 8009784:	4770      	bx	lr
	...

08009788 <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8009788:	4b07      	ldr	r3, [pc, #28]	; (80097a8 <LoRaMacCheckForRxAbort+0x20>)
 800978a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800978e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009792:	d008      	beq.n	80097a6 <LoRaMacCheckForRxAbort+0x1e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 8009794:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8009798:	4a03      	ldr	r2, [pc, #12]	; (80097a8 <LoRaMacCheckForRxAbort+0x20>)
 800979a:	f8c2 1340 	str.w	r1, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800979e:	f023 0382 	bic.w	r3, r3, #130	; 0x82
 80097a2:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 80097a6:	4770      	bx	lr
 80097a8:	20000814 	.word	0x20000814

080097ac <CalculateBackOff>:

static void CalculateBackOff( void )
{
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 80097ac:	4b06      	ldr	r3, [pc, #24]	; (80097c8 <CalculateBackOff+0x1c>)
 80097ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097b0:	b94b      	cbnz	r3, 80097c6 <CalculateBackOff+0x1a>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 80097b2:	4a05      	ldr	r2, [pc, #20]	; (80097c8 <CalculateBackOff+0x1c>)
 80097b4:	f8b2 310c 	ldrh.w	r3, [r2, #268]	; 0x10c
 80097b8:	4904      	ldr	r1, [pc, #16]	; (80097cc <CalculateBackOff+0x20>)
 80097ba:	f8d1 1420 	ldr.w	r1, [r1, #1056]	; 0x420
 80097be:	3b01      	subs	r3, #1
 80097c0:	fb01 f303 	mul.w	r3, r1, r3
 80097c4:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 80097c6:	4770      	bx	lr
 80097c8:	20008000 	.word	0x20008000
 80097cc:	20000814 	.word	0x20000814

080097d0 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 80097d0:	b508      	push	{r3, lr}
 80097d2:	4684      	mov	ip, r0
 80097d4:	4608      	mov	r0, r1
 80097d6:	4611      	mov	r1, r2
    Radio.SetTxContinuousWave( frequency, power, timeout );
 80097d8:	4b06      	ldr	r3, [pc, #24]	; (80097f4 <SetTxContinuousWave+0x24>)
 80097da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097dc:	4662      	mov	r2, ip
 80097de:	b249      	sxtb	r1, r1
 80097e0:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80097e2:	4a05      	ldr	r2, [pc, #20]	; (80097f8 <SetTxContinuousWave+0x28>)
 80097e4:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 80097e8:	f043 0302 	orr.w	r3, r3, #2
 80097ec:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 80097f0:	2000      	movs	r0, #0
 80097f2:	bd08      	pop	{r3, pc}
 80097f4:	08014e54 	.word	0x08014e54
 80097f8:	20000814 	.word	0x20000814

080097fc <DetermineFrameType>:
    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 80097fc:	4602      	mov	r2, r0
 80097fe:	b1f8      	cbz	r0, 8009840 <DetermineFrameType+0x44>
 8009800:	b301      	cbz	r1, 8009844 <DetermineFrameType+0x48>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8009802:	7b03      	ldrb	r3, [r0, #12]
 8009804:	f013 030f 	ands.w	r3, r3, #15
 8009808:	d005      	beq.n	8009816 <DetermineFrameType+0x1a>
 800980a:	f890 0020 	ldrb.w	r0, [r0, #32]
 800980e:	b110      	cbz	r0, 8009816 <DetermineFrameType+0x1a>
    {
        *fType = FRAME_TYPE_A;
 8009810:	2000      	movs	r0, #0
 8009812:	7008      	strb	r0, [r1, #0]
 8009814:	4770      	bx	lr
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8009816:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
 800981a:	b910      	cbnz	r0, 8009822 <DetermineFrameType+0x26>
    {
        *fType = FRAME_TYPE_B;
 800981c:	2301      	movs	r3, #1
 800981e:	700b      	strb	r3, [r1, #0]
 8009820:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8009822:	b92b      	cbnz	r3, 8009830 <DetermineFrameType+0x34>
 8009824:	f892 0020 	ldrb.w	r0, [r2, #32]
 8009828:	b910      	cbnz	r0, 8009830 <DetermineFrameType+0x34>
    {
        *fType = FRAME_TYPE_C;
 800982a:	2302      	movs	r3, #2
 800982c:	700b      	strb	r3, [r1, #0]
 800982e:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8009830:	b953      	cbnz	r3, 8009848 <DetermineFrameType+0x4c>
 8009832:	f892 2020 	ldrb.w	r2, [r2, #32]
 8009836:	b14a      	cbz	r2, 800984c <DetermineFrameType+0x50>
    {
        *fType = FRAME_TYPE_D;
 8009838:	2203      	movs	r2, #3
 800983a:	700a      	strb	r2, [r1, #0]
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
    }

    return LORAMAC_STATUS_OK;
 800983c:	4618      	mov	r0, r3
        *fType = FRAME_TYPE_D;
 800983e:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009840:	2003      	movs	r0, #3
 8009842:	4770      	bx	lr
 8009844:	2003      	movs	r0, #3
 8009846:	4770      	bx	lr
        return LORAMAC_STATUS_ERROR;
 8009848:	2018      	movs	r0, #24
 800984a:	4770      	bx	lr
 800984c:	2018      	movs	r0, #24
}
 800984e:	4770      	bx	lr

08009850 <CheckRetrans>:
    return false;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
    if( counter >= limit )
 8009850:	4288      	cmp	r0, r1
 8009852:	d201      	bcs.n	8009858 <CheckRetrans+0x8>
    {
        return true;
    }
    return false;
 8009854:	2000      	movs	r0, #0
 8009856:	4770      	bx	lr
        return true;
 8009858:	2001      	movs	r0, #1
}
 800985a:	4770      	bx	lr

0800985c <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 800985c:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 800985e:	4b0b      	ldr	r3, [pc, #44]	; (800988c <CheckRetransUnconfirmedUplink+0x30>)
 8009860:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
 8009864:	4b0a      	ldr	r3, [pc, #40]	; (8009890 <CheckRetransUnconfirmedUplink+0x34>)
 8009866:	f893 041c 	ldrb.w	r0, [r3, #1052]	; 0x41c
 800986a:	f7ff fff1 	bl	8009850 <CheckRetrans>
 800986e:	b950      	cbnz	r0, 8009886 <CheckRetransUnconfirmedUplink+0x2a>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8009870:	4b07      	ldr	r3, [pc, #28]	; (8009890 <CheckRetransUnconfirmedUplink+0x34>)
 8009872:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8009876:	f013 0f02 	tst.w	r3, #2
 800987a:	d004      	beq.n	8009886 <CheckRetransUnconfirmedUplink+0x2a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800987c:	4b04      	ldr	r3, [pc, #16]	; (8009890 <CheckRetransUnconfirmedUplink+0x34>)
 800987e:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 8009882:	2b01      	cmp	r3, #1
 8009884:	d900      	bls.n	8009888 <CheckRetransUnconfirmedUplink+0x2c>
        {
            return true;
        }
    }
    return false;
}
 8009886:	bd08      	pop	{r3, pc}
            return true;
 8009888:	2001      	movs	r0, #1
 800988a:	e7fc      	b.n	8009886 <CheckRetransUnconfirmedUplink+0x2a>
 800988c:	20008000 	.word	0x20008000
 8009890:	20000814 	.word	0x20000814

08009894 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8009894:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8009896:	4b09      	ldr	r3, [pc, #36]	; (80098bc <CheckRetransConfirmedUplink+0x28>)
 8009898:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
 800989c:	4b08      	ldr	r3, [pc, #32]	; (80098c0 <CheckRetransConfirmedUplink+0x2c>)
 800989e:	f893 041c 	ldrb.w	r0, [r3, #1052]	; 0x41c
 80098a2:	f7ff ffd5 	bl	8009850 <CheckRetrans>
 80098a6:	b940      	cbnz	r0, 80098ba <CheckRetransConfirmedUplink+0x26>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80098a8:	4b05      	ldr	r3, [pc, #20]	; (80098c0 <CheckRetransConfirmedUplink+0x2c>)
 80098aa:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80098ae:	f013 0f02 	tst.w	r3, #2
 80098b2:	d002      	beq.n	80098ba <CheckRetransConfirmedUplink+0x26>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 80098b4:	4b02      	ldr	r3, [pc, #8]	; (80098c0 <CheckRetransConfirmedUplink+0x2c>)
 80098b6:	f893 0448 	ldrb.w	r0, [r3, #1096]	; 0x448
        {
            return true;
        }
    }
    return false;
}
 80098ba:	bd08      	pop	{r3, pc}
 80098bc:	20008000 	.word	0x20008000
 80098c0:	20000814 	.word	0x20000814

080098c4 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
    if( counter < ADR_ACK_COUNTER_MAX )
 80098c4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80098c8:	d000      	beq.n	80098cc <IncreaseAdrAckCounter+0x8>
    {
        counter++;
 80098ca:	3001      	adds	r0, #1
    }
    return counter;
}
 80098cc:	4770      	bx	lr
	...

080098d0 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 80098d0:	b510      	push	{r4, lr}
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80098d2:	4b12      	ldr	r3, [pc, #72]	; (800991c <StopRetransmission+0x4c>)
 80098d4:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80098d8:	f013 0f02 	tst.w	r3, #2
 80098dc:	d004      	beq.n	80098e8 <StopRetransmission+0x18>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80098de:	4b0f      	ldr	r3, [pc, #60]	; (800991c <StopRetransmission+0x4c>)
 80098e0:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d908      	bls.n	80098fa <StopRetransmission+0x2a>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 80098e8:	4b0d      	ldr	r3, [pc, #52]	; (8009920 <StopRetransmission+0x50>)
 80098ea:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80098ee:	b123      	cbz	r3, 80098fa <StopRetransmission+0x2a>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 80098f0:	4c0b      	ldr	r4, [pc, #44]	; (8009920 <StopRetransmission+0x50>)
 80098f2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80098f4:	f7ff ffe6 	bl	80098c4 <IncreaseAdrAckCounter>
 80098f8:	62a0      	str	r0, [r4, #40]	; 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 80098fa:	4b08      	ldr	r3, [pc, #32]	; (800991c <StopRetransmission+0x4c>)
 80098fc:	2200      	movs	r2, #0
 80098fe:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.NodeAckRequested = false;
 8009902:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
 8009906:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800990a:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800990e:	f022 0202 	bic.w	r2, r2, #2
 8009912:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return true;
}
 8009916:	2001      	movs	r0, #1
 8009918:	bd10      	pop	{r4, pc}
 800991a:	bf00      	nop
 800991c:	20000814 	.word	0x20000814
 8009920:	20008000 	.word	0x20008000

08009924 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8009924:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8009926:	4b04      	ldr	r3, [pc, #16]	; (8009938 <CallNvmDataChangeCallback+0x14>)
 8009928:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800992c:	b113      	cbz	r3, 8009934 <CallNvmDataChangeCallback+0x10>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 800992e:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8009930:	b103      	cbz	r3, 8009934 <CallNvmDataChangeCallback+0x10>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8009932:	4798      	blx	r3
    }
}
 8009934:	bd08      	pop	{r3, pc}
 8009936:	bf00      	nop
 8009938:	20000814 	.word	0x20000814

0800993c <IsRequestPending>:
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800993c:	4b04      	ldr	r3, [pc, #16]	; (8009950 <IsRequestPending+0x14>)
 800993e:	f893 0495 	ldrb.w	r0, [r3, #1173]	; 0x495
 8009942:	f010 0005 	ands.w	r0, r0, #5
 8009946:	d100      	bne.n	800994a <IsRequestPending+0xe>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
    {
        return 1;
    }
    return 0;
}
 8009948:	4770      	bx	lr
        return 1;
 800994a:	2001      	movs	r0, #1
 800994c:	e7fc      	b.n	8009948 <IsRequestPending+0xc>
 800994e:	bf00      	nop
 8009950:	20000814 	.word	0x20000814

08009954 <GetMaxAppPayloadWithoutFOptsLength>:
{
 8009954:	b500      	push	{lr}
 8009956:	b085      	sub	sp, #20
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009958:	4b0d      	ldr	r3, [pc, #52]	; (8009990 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 800995a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800995e:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Datarate = datarate;
 8009962:	f88d 0009 	strb.w	r0, [sp, #9]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8009966:	220d      	movs	r2, #13
 8009968:	f88d 2008 	strb.w	r2, [sp, #8]
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800996c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009970:	b113      	cbz	r3, 8009978 <GetMaxAppPayloadWithoutFOptsLength+0x24>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8009972:	230e      	movs	r3, #14
 8009974:	f88d 3008 	strb.w	r3, [sp, #8]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009978:	a902      	add	r1, sp, #8
 800997a:	4b05      	ldr	r3, [pc, #20]	; (8009990 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 800997c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009980:	f004 f928 	bl	800dbd4 <RegionGetPhyParam>
 8009984:	9001      	str	r0, [sp, #4]
}
 8009986:	b2c0      	uxtb	r0, r0
 8009988:	b005      	add	sp, #20
 800998a:	f85d fb04 	ldr.w	pc, [sp], #4
 800998e:	bf00      	nop
 8009990:	20008000 	.word	0x20008000

08009994 <ValidatePayloadLength>:
{
 8009994:	b538      	push	{r3, r4, r5, lr}
 8009996:	4605      	mov	r5, r0
 8009998:	4614      	mov	r4, r2
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800999a:	4608      	mov	r0, r1
 800999c:	f7ff ffda 	bl	8009954 <GetMaxAppPayloadWithoutFOptsLength>
 80099a0:	b283      	uxth	r3, r0
    payloadSize = ( lenN + fOptsLen );
 80099a2:	1962      	adds	r2, r4, r5
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d303      	bcc.n	80099b0 <ValidatePayloadLength+0x1c>
 80099a8:	2aff      	cmp	r2, #255	; 0xff
 80099aa:	d903      	bls.n	80099b4 <ValidatePayloadLength+0x20>
    return false;
 80099ac:	2000      	movs	r0, #0
 80099ae:	e000      	b.n	80099b2 <ValidatePayloadLength+0x1e>
 80099b0:	2000      	movs	r0, #0
}
 80099b2:	bd38      	pop	{r3, r4, r5, pc}
        return true;
 80099b4:	2001      	movs	r0, #1
 80099b6:	e7fc      	b.n	80099b2 <ValidatePayloadLength+0x1e>

080099b8 <ProcessRadioTxDone>:
{
 80099b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099ba:	b08f      	sub	sp, #60	; 0x3c
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80099bc:	4b35      	ldr	r3, [pc, #212]	; (8009a94 <ProcessRadioTxDone+0xdc>)
 80099be:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80099c2:	2b02      	cmp	r3, #2
 80099c4:	d002      	beq.n	80099cc <ProcessRadioTxDone+0x14>
        Radio.Sleep( );
 80099c6:	4b34      	ldr	r3, [pc, #208]	; (8009a98 <ProcessRadioTxDone+0xe0>)
 80099c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ca:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 80099cc:	4c33      	ldr	r4, [pc, #204]	; (8009a9c <ProcessRadioTxDone+0xe4>)
 80099ce:	f504 7560 	add.w	r5, r4, #896	; 0x380
 80099d2:	f8d4 13b0 	ldr.w	r1, [r4, #944]	; 0x3b0
 80099d6:	4628      	mov	r0, r5
 80099d8:	f009 fc2c 	bl	8013234 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 80099dc:	4628      	mov	r0, r5
 80099de:	f009 fbe3 	bl	80131a8 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 80099e2:	f504 7566 	add.w	r5, r4, #920	; 0x398
 80099e6:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 80099ea:	4628      	mov	r0, r5
 80099ec:	f009 fc22 	bl	8013234 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 80099f0:	4628      	mov	r0, r5
 80099f2:	f009 fbd9 	bl	80131a8 <UTIL_TIMER_Start>
    if( MacCtx.NodeAckRequested == true )
 80099f6:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d134      	bne.n	8009a68 <ProcessRadioTxDone+0xb0>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80099fe:	4b27      	ldr	r3, [pc, #156]	; (8009a9c <ProcessRadioTxDone+0xe4>)
 8009a00:	2200      	movs	r2, #0
 8009a02:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8009a06:	4b26      	ldr	r3, [pc, #152]	; (8009aa0 <ProcessRadioTxDone+0xe8>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4c22      	ldr	r4, [pc, #136]	; (8009a94 <ProcessRadioTxDone+0xdc>)
 8009a0c:	62e3      	str	r3, [r4, #44]	; 0x2c
    txDone.Channel = MacCtx.Channel;
 8009a0e:	4f23      	ldr	r7, [pc, #140]	; (8009a9c <ProcessRadioTxDone+0xe4>)
 8009a10:	f897 241f 	ldrb.w	r2, [r7, #1055]	; 0x41f
 8009a14:	f88d 2010 	strb.w	r2, [sp, #16]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8009a18:	9305      	str	r3, [sp, #20]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8009a1a:	ae0c      	add	r6, sp, #48	; 0x30
 8009a1c:	4630      	mov	r0, r6
 8009a1e:	f009 fa9d 	bl	8012f5c <SysTimeGetMcuTime>
 8009a22:	ad02      	add	r5, sp, #8
 8009a24:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8009a28:	9300      	str	r3, [sp, #0]
 8009a2a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8009a2e:	e896 0006 	ldmia.w	r6, {r1, r2}
 8009a32:	4628      	mov	r0, r5
 8009a34:	f009 fa2f 	bl	8012e96 <SysTimeSub>
 8009a38:	ab07      	add	r3, sp, #28
 8009a3a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009a3e:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8009a42:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8009a46:	9306      	str	r3, [sp, #24]
    txDone.Joined  = true;
 8009a48:	2301      	movs	r3, #1
 8009a4a:	f88d 3011 	strb.w	r3, [sp, #17]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8009a4e:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 8009a52:	b90b      	cbnz	r3, 8009a58 <ProcessRadioTxDone+0xa0>
        txDone.Joined  = false;
 8009a54:	f88d 3011 	strb.w	r3, [sp, #17]
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8009a58:	a904      	add	r1, sp, #16
 8009a5a:	4b0e      	ldr	r3, [pc, #56]	; (8009a94 <ProcessRadioTxDone+0xdc>)
 8009a5c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009a60:	f004 f8d0 	bl	800dc04 <RegionSetBandTxDone>
}
 8009a64:	b00f      	add	sp, #60	; 0x3c
 8009a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 8009a68:	2315      	movs	r3, #21
 8009a6a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009a6e:	a90a      	add	r1, sp, #40	; 0x28
 8009a70:	4b08      	ldr	r3, [pc, #32]	; (8009a94 <ProcessRadioTxDone+0xdc>)
 8009a72:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009a76:	f004 f8ad 	bl	800dbd4 <RegionGetPhyParam>
 8009a7a:	9009      	str	r0, [sp, #36]	; 0x24
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8009a7c:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 8009a80:	f204 4404 	addw	r4, r4, #1028	; 0x404
 8009a84:	4401      	add	r1, r0
 8009a86:	4620      	mov	r0, r4
 8009a88:	f009 fbd4 	bl	8013234 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 8009a8c:	4620      	mov	r0, r4
 8009a8e:	f009 fb8b 	bl	80131a8 <UTIL_TIMER_Start>
 8009a92:	e7b8      	b.n	8009a06 <ProcessRadioTxDone+0x4e>
 8009a94:	20008000 	.word	0x20008000
 8009a98:	08014e54 	.word	0x08014e54
 8009a9c:	20000814 	.word	0x20000814
 8009aa0:	20000dd4 	.word	0x20000dd4

08009aa4 <OnRetransmitTimeoutTimerEvent>:
{
 8009aa4:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 8009aa6:	4c09      	ldr	r4, [pc, #36]	; (8009acc <OnRetransmitTimeoutTimerEvent+0x28>)
 8009aa8:	f204 4004 	addw	r0, r4, #1028	; 0x404
 8009aac:	f009 fb22 	bl	80130f4 <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 8009ab0:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
 8009ab4:	b113      	cbz	r3, 8009abc <OnRetransmitTimeoutTimerEvent+0x18>
        MacCtx.RetransmitTimeoutRetry = true;
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	f884 241d 	strb.w	r2, [r4, #1053]	; 0x41d
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8009abc:	4b03      	ldr	r3, [pc, #12]	; (8009acc <OnRetransmitTimeoutTimerEvent+0x28>)
 8009abe:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8009ac2:	b113      	cbz	r3, 8009aca <OnRetransmitTimeoutTimerEvent+0x26>
 8009ac4:	691b      	ldr	r3, [r3, #16]
 8009ac6:	b103      	cbz	r3, 8009aca <OnRetransmitTimeoutTimerEvent+0x26>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8009ac8:	4798      	blx	r3
}
 8009aca:	bd10      	pop	{r4, pc}
 8009acc:	20000814 	.word	0x20000814

08009ad0 <PrepareRxDoneAbort>:
{
 8009ad0:	b508      	push	{r3, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8009ad2:	4b0e      	ldr	r3, [pc, #56]	; (8009b0c <PrepareRxDoneAbort+0x3c>)
 8009ad4:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 8009ad8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009adc:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == true )
 8009ae0:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 8009ae4:	b973      	cbnz	r3, 8009b04 <PrepareRxDoneAbort+0x34>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 8009ae6:	4b09      	ldr	r3, [pc, #36]	; (8009b0c <PrepareRxDoneAbort+0x3c>)
 8009ae8:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 8009aec:	f042 0202 	orr.w	r2, r2, #2
 8009af0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    MacCtx.MacFlags.Bits.MacDone = 1;
 8009af4:	b2d2      	uxtb	r2, r2
 8009af6:	f042 0220 	orr.w	r2, r2, #32
 8009afa:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    UpdateRxSlotIdleState( );
 8009afe:	f7ff fdf1 	bl	80096e4 <UpdateRxSlotIdleState>
}
 8009b02:	bd08      	pop	{r3, pc}
        OnRetransmitTimeoutTimerEvent( NULL );
 8009b04:	2000      	movs	r0, #0
 8009b06:	f7ff ffcd 	bl	8009aa4 <OnRetransmitTimeoutTimerEvent>
 8009b0a:	e7ec      	b.n	8009ae6 <PrepareRxDoneAbort+0x16>
 8009b0c:	20000814 	.word	0x20000814

08009b10 <LoRaMacCheckForBeaconAcquisition>:
{
 8009b10:	b508      	push	{r3, lr}
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8009b12:	200b      	movs	r0, #11
 8009b14:	f003 faf2 	bl	800d0fc <LoRaMacConfirmQueueIsCmdActive>
 8009b18:	b188      	cbz	r0, 8009b3e <LoRaMacCheckForBeaconAcquisition+0x2e>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8009b1a:	4b0b      	ldr	r3, [pc, #44]	; (8009b48 <LoRaMacCheckForBeaconAcquisition+0x38>)
 8009b1c:	f893 0495 	ldrb.w	r0, [r3, #1173]	; 0x495
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8009b20:	f010 0f01 	tst.w	r0, #1
 8009b24:	d10d      	bne.n	8009b42 <LoRaMacCheckForBeaconAcquisition+0x32>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8009b26:	f010 0004 	ands.w	r0, r0, #4
 8009b2a:	d009      	beq.n	8009b40 <LoRaMacCheckForBeaconAcquisition+0x30>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009b32:	f023 0302 	bic.w	r3, r3, #2
 8009b36:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 8009b3a:	2001      	movs	r0, #1
 8009b3c:	e000      	b.n	8009b40 <LoRaMacCheckForBeaconAcquisition+0x30>
    return 0x00;
 8009b3e:	2000      	movs	r0, #0
}
 8009b40:	bd08      	pop	{r3, pc}
    return 0x00;
 8009b42:	2000      	movs	r0, #0
 8009b44:	e7fc      	b.n	8009b40 <LoRaMacCheckForBeaconAcquisition+0x30>
 8009b46:	bf00      	nop
 8009b48:	20000814 	.word	0x20000814

08009b4c <GetFCntDown>:
{
 8009b4c:	b538      	push	{r3, r4, r5, lr}
 8009b4e:	9c04      	ldr	r4, [sp, #16]
 8009b50:	9d05      	ldr	r5, [sp, #20]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8009b52:	b1f2      	cbz	r2, 8009b92 <GetFCntDown+0x46>
 8009b54:	4694      	mov	ip, r2
 8009b56:	b1f4      	cbz	r4, 8009b96 <GetFCntDown+0x4a>
 8009b58:	b1fd      	cbz	r5, 8009b9a <GetFCntDown+0x4e>
    switch( addrID )
 8009b5a:	b188      	cbz	r0, 8009b80 <GetFCntDown+0x34>
 8009b5c:	2801      	cmp	r0, #1
 8009b5e:	d11e      	bne.n	8009b9e <GetFCntDown+0x52>
            if( lrWanVersion.Fields.Minor == 1 )
 8009b60:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8009b64:	2b01      	cmp	r3, #1
 8009b66:	d002      	beq.n	8009b6e <GetFCntDown+0x22>
                *fCntID = FCNT_DOWN;
 8009b68:	2303      	movs	r3, #3
 8009b6a:	7023      	strb	r3, [r4, #0]
 8009b6c:	e00a      	b.n	8009b84 <GetFCntDown+0x38>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8009b6e:	b121      	cbz	r1, 8009b7a <GetFCntDown+0x2e>
 8009b70:	2903      	cmp	r1, #3
 8009b72:	d002      	beq.n	8009b7a <GetFCntDown+0x2e>
                    *fCntID = N_FCNT_DOWN;
 8009b74:	2301      	movs	r3, #1
 8009b76:	7023      	strb	r3, [r4, #0]
 8009b78:	e004      	b.n	8009b84 <GetFCntDown+0x38>
                    *fCntID = A_FCNT_DOWN;
 8009b7a:	2302      	movs	r3, #2
 8009b7c:	7023      	strb	r3, [r4, #0]
 8009b7e:	e001      	b.n	8009b84 <GetFCntDown+0x38>
            *fCntID = MC_FCNT_DOWN_0;
 8009b80:	2304      	movs	r3, #4
 8009b82:	7023      	strb	r3, [r4, #0]
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 8009b84:	462a      	mov	r2, r5
 8009b86:	f8bc 100e 	ldrh.w	r1, [ip, #14]
 8009b8a:	7820      	ldrb	r0, [r4, #0]
 8009b8c:	f003 fcd8 	bl	800d540 <LoRaMacCryptoGetFCntDown>
}
 8009b90:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 8009b92:	2009      	movs	r0, #9
 8009b94:	e7fc      	b.n	8009b90 <GetFCntDown+0x44>
 8009b96:	2009      	movs	r0, #9
 8009b98:	e7fa      	b.n	8009b90 <GetFCntDown+0x44>
 8009b9a:	2009      	movs	r0, #9
 8009b9c:	e7f8      	b.n	8009b90 <GetFCntDown+0x44>
    switch( addrID )
 8009b9e:	2005      	movs	r0, #5
 8009ba0:	e7f6      	b.n	8009b90 <GetFCntDown+0x44>

08009ba2 <RemoveMacCommands>:
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8009ba2:	2801      	cmp	r0, #1
 8009ba4:	d900      	bls.n	8009ba8 <RemoveMacCommands+0x6>
 8009ba6:	4770      	bx	lr
{
 8009ba8:	b508      	push	{r3, lr}
        if( request == MCPS_CONFIRMED )
 8009baa:	2a01      	cmp	r2, #1
 8009bac:	d105      	bne.n	8009bba <RemoveMacCommands+0x18>
            if( fCtrl.Bits.Ack == 1 )
 8009bae:	f011 0f20 	tst.w	r1, #32
 8009bb2:	d004      	beq.n	8009bbe <RemoveMacCommands+0x1c>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8009bb4:	f003 f93e 	bl	800ce34 <LoRaMacCommandsRemoveStickyAnsCmds>
 8009bb8:	e001      	b.n	8009bbe <RemoveMacCommands+0x1c>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8009bba:	f003 f93b 	bl	800ce34 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8009bbe:	bd08      	pop	{r3, pc}

08009bc0 <ProcessMacCommands>:
{
 8009bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bc4:	b08f      	sub	sp, #60	; 0x3c
 8009bc6:	4698      	mov	r8, r3
    uint8_t status = 0;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8009bce:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 8009bd2:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	f200 82d9 	bhi.w	800a18e <ProcessMacCommands+0x5ce>
 8009bdc:	4605      	mov	r5, r0
 8009bde:	460c      	mov	r4, r1
 8009be0:	4617      	mov	r7, r2
    bool adrBlockFound = false;
 8009be2:	f04f 0900 	mov.w	r9, #0
    while( macIndex < commandsSize )
 8009be6:	42bc      	cmp	r4, r7
 8009be8:	f080 82d1 	bcs.w	800a18e <ProcessMacCommands+0x5ce>
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8009bec:	5d28      	ldrb	r0, [r5, r4]
 8009bee:	f003 f989 	bl	800cf04 <LoRaMacCommandsGetCmdSize>
 8009bf2:	4420      	add	r0, r4
 8009bf4:	42b8      	cmp	r0, r7
 8009bf6:	f300 82ca 	bgt.w	800a18e <ProcessMacCommands+0x5ce>
        switch( payload[macIndex++] )
 8009bfa:	1c66      	adds	r6, r4, #1
 8009bfc:	b2f6      	uxtb	r6, r6
 8009bfe:	5d2b      	ldrb	r3, [r5, r4]
 8009c00:	3b02      	subs	r3, #2
 8009c02:	2b11      	cmp	r3, #17
 8009c04:	f200 82c3 	bhi.w	800a18e <ProcessMacCommands+0x5ce>
 8009c08:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009c0c:	00280012 	.word	0x00280012
 8009c10:	00c000ad 	.word	0x00c000ad
 8009c14:	011e0106 	.word	0x011e0106
 8009c18:	01740157 	.word	0x01740157
 8009c1c:	02c101bf 	.word	0x02c101bf
 8009c20:	01ef02c1 	.word	0x01ef02c1
 8009c24:	02c102c1 	.word	0x02c102c1
 8009c28:	02680251 	.word	0x02680251
 8009c2c:	02a10287 	.word	0x02a10287
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8009c30:	2004      	movs	r0, #4
 8009c32:	f003 fa63 	bl	800d0fc <LoRaMacConfirmQueueIsCmdActive>
 8009c36:	b908      	cbnz	r0, 8009c3c <ProcessMacCommands+0x7c>
        switch( payload[macIndex++] )
 8009c38:	4634      	mov	r4, r6
 8009c3a:	e7d4      	b.n	8009be6 <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8009c3c:	2104      	movs	r1, #4
 8009c3e:	2000      	movs	r0, #0
 8009c40:	f003 fa10 	bl	800d064 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8009c44:	1ca3      	adds	r3, r4, #2
 8009c46:	b2db      	uxtb	r3, r3
 8009c48:	5da9      	ldrb	r1, [r5, r6]
 8009c4a:	4aa7      	ldr	r2, [pc, #668]	; (8009ee8 <ProcessMacCommands+0x328>)
 8009c4c:	f882 1460 	strb.w	r1, [r2, #1120]	; 0x460
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8009c50:	3403      	adds	r4, #3
 8009c52:	b2e4      	uxtb	r4, r4
 8009c54:	5ceb      	ldrb	r3, [r5, r3]
 8009c56:	f882 3461 	strb.w	r3, [r2, #1121]	; 0x461
 8009c5a:	e7c4      	b.n	8009be6 <ProcessMacCommands+0x26>
                int8_t linkAdrDatarate = DR_0;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	f88d 300a 	strb.w	r3, [sp, #10]
                int8_t linkAdrTxPower = TX_POWER_0;
 8009c62:	f88d 300b 	strb.w	r3, [sp, #11]
                uint8_t linkAdrNbRep = 0;
 8009c66:	f88d 300c 	strb.w	r3, [sp, #12]
                uint8_t linkAdrNbBytesParsed = 0;
 8009c6a:	f88d 3014 	strb.w	r3, [sp, #20]
                if( adrBlockFound == false )
 8009c6e:	f1b9 0f00 	cmp.w	r9, #0
 8009c72:	d036      	beq.n	8009ce2 <ProcessMacCommands+0x122>
                    macIndex += 4;
 8009c74:	3405      	adds	r4, #5
 8009c76:	b2e4      	uxtb	r4, r4
 8009c78:	e7b5      	b.n	8009be6 <ProcessMacCommands+0x26>
                            linkAdrReq.PayloadSize = 5;
 8009c7a:	2305      	movs	r3, #5
 8009c7c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8009c80:	e050      	b.n	8009d24 <ProcessMacCommands+0x164>
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 8009c82:	4b9a      	ldr	r3, [pc, #616]	; (8009eec <ProcessMacCommands+0x32c>)
 8009c84:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8009c88:	f99d 200a 	ldrsb.w	r2, [sp, #10]
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	da03      	bge.n	8009c98 <ProcessMacCommands+0xd8>
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 8009c90:	4b96      	ldr	r3, [pc, #600]	; (8009eec <ProcessMacCommands+0x32c>)
 8009c92:	2101      	movs	r1, #1
 8009c94:	f883 1109 	strb.w	r1, [r3, #265]	; 0x109
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8009c98:	4b94      	ldr	r3, [pc, #592]	; (8009eec <ProcessMacCommands+0x32c>)
 8009c9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 8009c9e:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8009ca2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 8009ca6:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8009caa:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8009cae:	e04d      	b.n	8009d4c <ProcessMacCommands+0x18c>
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 8009cb6:	2003      	movs	r0, #3
 8009cb8:	f003 f85c 	bl	800cd74 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8009cbc:	3401      	adds	r4, #1
 8009cbe:	b2e4      	uxtb	r4, r4
 8009cc0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8009cc4:	498a      	ldr	r1, [pc, #552]	; (8009ef0 <ProcessMacCommands+0x330>)
 8009cc6:	fba1 2103 	umull	r2, r1, r1, r3
 8009cca:	ebb4 0f91 	cmp.w	r4, r1, lsr #2
 8009cce:	d3ef      	bcc.n	8009cb0 <ProcessMacCommands+0xf0>
                        macIndex += linkAdrNbBytesParsed - 1;
 8009cd0:	441e      	add	r6, r3
 8009cd2:	b2f6      	uxtb	r6, r6
 8009cd4:	1e74      	subs	r4, r6, #1
 8009cd6:	b2e4      	uxtb	r4, r4
                        if( macIndex >= commandsSize )
 8009cd8:	42a7      	cmp	r7, r4
 8009cda:	d93a      	bls.n	8009d52 <ProcessMacCommands+0x192>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 8009cdc:	5d2b      	ldrb	r3, [r5, r4]
 8009cde:	2b03      	cmp	r3, #3
 8009ce0:	d136      	bne.n	8009d50 <ProcessMacCommands+0x190>
                        linkAdrReq.Payload = &payload[macIndex - 1];
 8009ce2:	1e73      	subs	r3, r6, #1
 8009ce4:	442b      	add	r3, r5
 8009ce6:	9308      	str	r3, [sp, #32]
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8009ce8:	4b80      	ldr	r3, [pc, #512]	; (8009eec <ProcessMacCommands+0x32c>)
 8009cea:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 8009cee:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009cf2:	f893 1074 	ldrb.w	r1, [r3, #116]	; 0x74
 8009cf6:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8009cfa:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 8009cfe:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8009d02:	f993 1038 	ldrsb.w	r1, [r3, #56]	; 0x38
 8009d06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8009d0a:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
 8009d0e:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 8009d12:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8009d16:	9307      	str	r3, [sp, #28]
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8009d18:	2a00      	cmp	r2, #0
 8009d1a:	d0ae      	beq.n	8009c7a <ProcessMacCommands+0xba>
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8009d1c:	1bbb      	subs	r3, r7, r6
 8009d1e:	3301      	adds	r3, #1
 8009d20:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 8009d24:	ab05      	add	r3, sp, #20
 8009d26:	9301      	str	r3, [sp, #4]
 8009d28:	ab03      	add	r3, sp, #12
 8009d2a:	9300      	str	r3, [sp, #0]
 8009d2c:	f10d 030b 	add.w	r3, sp, #11
 8009d30:	f10d 020a 	add.w	r2, sp, #10
 8009d34:	a907      	add	r1, sp, #28
 8009d36:	486d      	ldr	r0, [pc, #436]	; (8009eec <ProcessMacCommands+0x32c>)
 8009d38:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8009d3c:	f003 ffe2 	bl	800dd04 <RegionLinkAdrReq>
 8009d40:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                        if( ( status & 0x07 ) == 0x07 )
 8009d44:	f000 0007 	and.w	r0, r0, #7
 8009d48:	2807      	cmp	r0, #7
 8009d4a:	d09a      	beq.n	8009c82 <ProcessMacCommands+0xc2>
{
 8009d4c:	2400      	movs	r4, #0
 8009d4e:	e7b7      	b.n	8009cc0 <ProcessMacCommands+0x100>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 8009d50:	4634      	mov	r4, r6
                    if( macIndex < commandsSize )
 8009d52:	42bc      	cmp	r4, r7
 8009d54:	d204      	bcs.n	8009d60 <ProcessMacCommands+0x1a0>
                        macIndex--;
 8009d56:	3c01      	subs	r4, #1
 8009d58:	b2e4      	uxtb	r4, r4
                    adrBlockFound = true;
 8009d5a:	f04f 0901 	mov.w	r9, #1
 8009d5e:	e742      	b.n	8009be6 <ProcessMacCommands+0x26>
 8009d60:	f04f 0901 	mov.w	r9, #1
                break;
 8009d64:	e73f      	b.n	8009be6 <ProcessMacCommands+0x26>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 8009d66:	3402      	adds	r4, #2
 8009d68:	b2e4      	uxtb	r4, r4
 8009d6a:	5dab      	ldrb	r3, [r5, r6]
 8009d6c:	f003 030f 	and.w	r3, r3, #15
 8009d70:	495e      	ldr	r1, [pc, #376]	; (8009eec <ProcessMacCommands+0x32c>)
 8009d72:	f881 3107 	strb.w	r3, [r1, #263]	; 0x107
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8009d76:	2201      	movs	r2, #1
 8009d78:	fa02 f303 	lsl.w	r3, r2, r3
 8009d7c:	f8a1 310c 	strh.w	r3, [r1, #268]	; 0x10c
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8009d80:	2200      	movs	r2, #0
 8009d82:	a90b      	add	r1, sp, #44	; 0x2c
 8009d84:	2004      	movs	r0, #4
 8009d86:	f002 fff5 	bl	800cd74 <LoRaMacCommandsAddCmd>
                break;
 8009d8a:	e72c      	b.n	8009be6 <ProcessMacCommands+0x26>
                status = 0x07;
 8009d8c:	2307      	movs	r3, #7
 8009d8e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8009d92:	5dab      	ldrb	r3, [r5, r6]
 8009d94:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8009d98:	f88d 301d 	strb.w	r3, [sp, #29]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8009d9c:	57ab      	ldrsb	r3, [r5, r6]
 8009d9e:	f003 030f 	and.w	r3, r3, #15
 8009da2:	f88d 301c 	strb.w	r3, [sp, #28]
                macIndex++;
 8009da6:	1ca3      	adds	r3, r4, #2
 8009da8:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8009daa:	1ce1      	adds	r1, r4, #3
 8009dac:	b2c9      	uxtb	r1, r1
 8009dae:	5ceb      	ldrb	r3, [r5, r3]
 8009db0:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009db2:	1d22      	adds	r2, r4, #4
 8009db4:	b2d2      	uxtb	r2, r2
 8009db6:	5c69      	ldrb	r1, [r5, r1]
 8009db8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009dbc:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009dbe:	3405      	adds	r4, #5
 8009dc0:	b2e4      	uxtb	r4, r4
 8009dc2:	5caa      	ldrb	r2, [r5, r2]
 8009dc4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009dc8:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency *= 100;
 8009dca:	2264      	movs	r2, #100	; 0x64
 8009dcc:	fb02 f303 	mul.w	r3, r2, r3
 8009dd0:	9308      	str	r3, [sp, #32]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8009dd2:	a907      	add	r1, sp, #28
 8009dd4:	4b45      	ldr	r3, [pc, #276]	; (8009eec <ProcessMacCommands+0x32c>)
 8009dd6:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009dda:	f003 ffaf 	bl	800dd3c <RegionRxParamSetupReq>
 8009dde:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                if( ( status & 0x07 ) == 0x07 )
 8009de2:	f000 0307 	and.w	r3, r0, #7
 8009de6:	2b07      	cmp	r3, #7
 8009de8:	d007      	beq.n	8009dfa <ProcessMacCommands+0x23a>
                macCmdPayload[0] = status;
 8009dea:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8009dee:	2201      	movs	r2, #1
 8009df0:	a90b      	add	r1, sp, #44	; 0x2c
 8009df2:	2005      	movs	r0, #5
 8009df4:	f002 ffbe 	bl	800cd74 <LoRaMacCommandsAddCmd>
                break;
 8009df8:	e6f5      	b.n	8009be6 <ProcessMacCommands+0x26>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8009dfa:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8009dfe:	4b3b      	ldr	r3, [pc, #236]	; (8009eec <ProcessMacCommands+0x32c>)
 8009e00:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8009e04:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8009e08:	9a08      	ldr	r2, [sp, #32]
 8009e0a:	665a      	str	r2, [r3, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8009e0c:	66da      	str	r2, [r3, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8009e0e:	f89d 201d 	ldrb.w	r2, [sp, #29]
 8009e12:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8009e16:	e7e8      	b.n	8009dea <ProcessMacCommands+0x22a>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8009e18:	4b33      	ldr	r3, [pc, #204]	; (8009ee8 <ProcessMacCommands+0x328>)
 8009e1a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8009e1e:	b17b      	cbz	r3, 8009e40 <ProcessMacCommands+0x280>
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	b17b      	cbz	r3, 8009e44 <ProcessMacCommands+0x284>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8009e24:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 8009e26:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8009e2a:	f008 033f 	and.w	r3, r8, #63	; 0x3f
 8009e2e:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8009e32:	2202      	movs	r2, #2
 8009e34:	a90b      	add	r1, sp, #44	; 0x2c
 8009e36:	2006      	movs	r0, #6
 8009e38:	f002 ff9c 	bl	800cd74 <LoRaMacCommandsAddCmd>
        switch( payload[macIndex++] )
 8009e3c:	4634      	mov	r4, r6
                break;
 8009e3e:	e6d2      	b.n	8009be6 <ProcessMacCommands+0x26>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8009e40:	20ff      	movs	r0, #255	; 0xff
 8009e42:	e7f0      	b.n	8009e26 <ProcessMacCommands+0x266>
 8009e44:	20ff      	movs	r0, #255	; 0xff
 8009e46:	e7ee      	b.n	8009e26 <ProcessMacCommands+0x266>
                status = 0x03;
 8009e48:	2303      	movs	r3, #3
 8009e4a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                newChannelReq.ChannelId = payload[macIndex++];
 8009e4e:	1ca3      	adds	r3, r4, #2
 8009e50:	b2db      	uxtb	r3, r3
 8009e52:	57aa      	ldrsb	r2, [r5, r6]
 8009e54:	f88d 2018 	strb.w	r2, [sp, #24]
                newChannelReq.NewChannel = &chParam;
 8009e58:	aa07      	add	r2, sp, #28
 8009e5a:	9205      	str	r2, [sp, #20]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8009e5c:	1ce2      	adds	r2, r4, #3
 8009e5e:	b2d2      	uxtb	r2, r2
 8009e60:	5ceb      	ldrb	r3, [r5, r3]
 8009e62:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009e64:	1d21      	adds	r1, r4, #4
 8009e66:	b2c9      	uxtb	r1, r1
 8009e68:	5caa      	ldrb	r2, [r5, r2]
 8009e6a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009e6e:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009e70:	1d62      	adds	r2, r4, #5
 8009e72:	b2d2      	uxtb	r2, r2
 8009e74:	5c69      	ldrb	r1, [r5, r1]
 8009e76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8009e7a:	9307      	str	r3, [sp, #28]
                chParam.Frequency *= 100;
 8009e7c:	2164      	movs	r1, #100	; 0x64
 8009e7e:	fb01 f303 	mul.w	r3, r1, r3
 8009e82:	9307      	str	r3, [sp, #28]
                chParam.Rx1Frequency = 0;
 8009e84:	2300      	movs	r3, #0
 8009e86:	9308      	str	r3, [sp, #32]
                chParam.DrRange.Value = payload[macIndex++];
 8009e88:	3406      	adds	r4, #6
 8009e8a:	b2e4      	uxtb	r4, r4
 8009e8c:	56ab      	ldrsb	r3, [r5, r2]
 8009e8e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8009e92:	a905      	add	r1, sp, #20
 8009e94:	4b15      	ldr	r3, [pc, #84]	; (8009eec <ProcessMacCommands+0x32c>)
 8009e96:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009e9a:	f003 ff5e 	bl	800dd5a <RegionNewChannelReq>
 8009e9e:	b2c3      	uxtb	r3, r0
 8009ea0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 8009ea4:	2800      	cmp	r0, #0
 8009ea6:	f6ff ae9e 	blt.w	8009be6 <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 8009eaa:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8009eae:	2201      	movs	r2, #1
 8009eb0:	a90b      	add	r1, sp, #44	; 0x2c
 8009eb2:	2007      	movs	r0, #7
 8009eb4:	f002 ff5e 	bl	800cd74 <LoRaMacCommandsAddCmd>
                break;
 8009eb8:	e695      	b.n	8009be6 <ProcessMacCommands+0x26>
                uint8_t delay = payload[macIndex++] & 0x0F;
 8009eba:	3402      	adds	r4, #2
 8009ebc:	b2e4      	uxtb	r4, r4
 8009ebe:	5dab      	ldrb	r3, [r5, r6]
                if( delay == 0 )
 8009ec0:	f013 030f 	ands.w	r3, r3, #15
 8009ec4:	d100      	bne.n	8009ec8 <ProcessMacCommands+0x308>
                    delay++;
 8009ec6:	3301      	adds	r3, #1
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8009ec8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009ecc:	fb02 f303 	mul.w	r3, r2, r3
 8009ed0:	4a06      	ldr	r2, [pc, #24]	; (8009eec <ProcessMacCommands+0x32c>)
 8009ed2:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8009ed4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8009ed8:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8009eda:	2200      	movs	r2, #0
 8009edc:	a90b      	add	r1, sp, #44	; 0x2c
 8009ede:	2008      	movs	r0, #8
 8009ee0:	f002 ff48 	bl	800cd74 <LoRaMacCommandsAddCmd>
                break;
 8009ee4:	e67f      	b.n	8009be6 <ProcessMacCommands+0x26>
 8009ee6:	bf00      	nop
 8009ee8:	20000814 	.word	0x20000814
 8009eec:	20008000 	.word	0x20008000
 8009ef0:	cccccccd 	.word	0xcccccccd
                uint8_t eirpDwellTime = payload[macIndex++];
 8009ef4:	3402      	adds	r4, #2
 8009ef6:	b2e4      	uxtb	r4, r4
 8009ef8:	5dab      	ldrb	r3, [r5, r6]
                txParamSetupReq.UplinkDwellTime = 0;
 8009efa:	2200      	movs	r2, #0
 8009efc:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.DownlinkDwellTime = 0;
 8009f00:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8009f04:	f013 0f20 	tst.w	r3, #32
 8009f08:	d002      	beq.n	8009f10 <ProcessMacCommands+0x350>
                    txParamSetupReq.DownlinkDwellTime = 1;
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8009f10:	f013 0f10 	tst.w	r3, #16
 8009f14:	d002      	beq.n	8009f1c <ProcessMacCommands+0x35c>
                    txParamSetupReq.UplinkDwellTime = 1;
 8009f16:	2201      	movs	r2, #1
 8009f18:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8009f1c:	f003 030f 	and.w	r3, r3, #15
 8009f20:	f88d 300e 	strb.w	r3, [sp, #14]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8009f24:	a903      	add	r1, sp, #12
 8009f26:	4b9b      	ldr	r3, [pc, #620]	; (800a194 <ProcessMacCommands+0x5d4>)
 8009f28:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009f2c:	f003 ff24 	bl	800dd78 <RegionTxParamSetupReq>
 8009f30:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009f34:	f43f ae57 	beq.w	8009be6 <ProcessMacCommands+0x26>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8009f38:	f89d a00c 	ldrb.w	sl, [sp, #12]
 8009f3c:	4e95      	ldr	r6, [pc, #596]	; (800a194 <ProcessMacCommands+0x5d4>)
 8009f3e:	f886 a074 	strb.w	sl, [r6, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8009f42:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8009f46:	f886 3075 	strb.w	r3, [r6, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8009f4a:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8009f4e:	4a92      	ldr	r2, [pc, #584]	; (800a198 <ProcessMacCommands+0x5d8>)
 8009f50:	5cd0      	ldrb	r0, [r2, r3]
 8009f52:	f7f6 fc8f 	bl	8000874 <__aeabi_ui2f>
 8009f56:	67b0      	str	r0, [r6, #120]	; 0x78
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8009f58:	2302      	movs	r3, #2
 8009f5a:	f88d 301c 	strb.w	r3, [sp, #28]
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009f5e:	f88d a01e 	strb.w	sl, [sp, #30]
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009f62:	a907      	add	r1, sp, #28
 8009f64:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 8009f68:	f003 fe34 	bl	800dbd4 <RegionGetPhyParam>
 8009f6c:	9005      	str	r0, [sp, #20]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8009f6e:	b240      	sxtb	r0, r0
 8009f70:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 8009f74:	4298      	cmp	r0, r3
 8009f76:	bfb8      	it	lt
 8009f78:	4618      	movlt	r0, r3
 8009f7a:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8009f7e:	2200      	movs	r2, #0
 8009f80:	a90b      	add	r1, sp, #44	; 0x2c
 8009f82:	2009      	movs	r0, #9
 8009f84:	f002 fef6 	bl	800cd74 <LoRaMacCommandsAddCmd>
                break;
 8009f88:	e62d      	b.n	8009be6 <ProcessMacCommands+0x26>
                status = 0x03;
 8009f8a:	2303      	movs	r3, #3
 8009f8c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                dlChannelReq.ChannelId = payload[macIndex++];
 8009f90:	1ca3      	adds	r3, r4, #2
 8009f92:	b2db      	uxtb	r3, r3
 8009f94:	5daa      	ldrb	r2, [r5, r6]
 8009f96:	f88d 201c 	strb.w	r2, [sp, #28]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8009f9a:	1ce1      	adds	r1, r4, #3
 8009f9c:	b2c9      	uxtb	r1, r1
 8009f9e:	5ceb      	ldrb	r3, [r5, r3]
 8009fa0:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009fa2:	1d22      	adds	r2, r4, #4
 8009fa4:	b2d2      	uxtb	r2, r2
 8009fa6:	5c69      	ldrb	r1, [r5, r1]
 8009fa8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009fac:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009fae:	3405      	adds	r4, #5
 8009fb0:	b2e4      	uxtb	r4, r4
 8009fb2:	5caa      	ldrb	r2, [r5, r2]
 8009fb4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009fb8:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency *= 100;
 8009fba:	2264      	movs	r2, #100	; 0x64
 8009fbc:	fb02 f303 	mul.w	r3, r2, r3
 8009fc0:	9308      	str	r3, [sp, #32]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8009fc2:	a907      	add	r1, sp, #28
 8009fc4:	4b73      	ldr	r3, [pc, #460]	; (800a194 <ProcessMacCommands+0x5d4>)
 8009fc6:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009fca:	f003 fee4 	bl	800dd96 <RegionDlChannelReq>
 8009fce:	b2c3      	uxtb	r3, r0
 8009fd0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 8009fd4:	2800      	cmp	r0, #0
 8009fd6:	f6ff ae06 	blt.w	8009be6 <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 8009fda:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8009fde:	2201      	movs	r2, #1
 8009fe0:	a90b      	add	r1, sp, #44	; 0x2c
 8009fe2:	200a      	movs	r0, #10
 8009fe4:	f002 fec6 	bl	800cd74 <LoRaMacCommandsAddCmd>
                break;
 8009fe8:	e5fd      	b.n	8009be6 <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8009fea:	2009      	movs	r0, #9
 8009fec:	f003 f886 	bl	800d0fc <LoRaMacConfirmQueueIsCmdActive>
 8009ff0:	b928      	cbnz	r0, 8009ffe <ProcessMacCommands+0x43e>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8009ff2:	4b6a      	ldr	r3, [pc, #424]	; (800a19c <ProcessMacCommands+0x5dc>)
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
        switch( payload[macIndex++] )
 8009ffa:	4634      	mov	r4, r6
 8009ffc:	e5f3      	b.n	8009be6 <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8009ffe:	2109      	movs	r1, #9
 800a000:	2000      	movs	r0, #0
 800a002:	f003 f82f 	bl	800d064 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 800a006:	a803      	add	r0, sp, #12
 800a008:	2300      	movs	r3, #0
 800a00a:	9303      	str	r3, [sp, #12]
 800a00c:	9304      	str	r3, [sp, #16]
                    SysTime_t sysTime = { 0 };
 800a00e:	f10d 0a14 	add.w	sl, sp, #20
 800a012:	9305      	str	r3, [sp, #20]
 800a014:	9306      	str	r3, [sp, #24]
                    SysTime_t sysTimeCurrent = { 0 };
 800a016:	f10d 0b1c 	add.w	fp, sp, #28
 800a01a:	9307      	str	r3, [sp, #28]
 800a01c:	9308      	str	r3, [sp, #32]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800a01e:	1ca1      	adds	r1, r4, #2
 800a020:	b2c9      	uxtb	r1, r1
 800a022:	5dab      	ldrb	r3, [r5, r6]
 800a024:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800a026:	1ce2      	adds	r2, r4, #3
 800a028:	b2d2      	uxtb	r2, r2
 800a02a:	5c69      	ldrb	r1, [r5, r1]
 800a02c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800a030:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800a032:	1d21      	adds	r1, r4, #4
 800a034:	b2c9      	uxtb	r1, r1
 800a036:	5caa      	ldrb	r2, [r5, r2]
 800a038:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a03c:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800a03e:	1d62      	adds	r2, r4, #5
 800a040:	b2d2      	uxtb	r2, r2
 800a042:	5c69      	ldrb	r1, [r5, r1]
 800a044:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800a048:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800a04a:	3406      	adds	r4, #6
 800a04c:	b2e4      	uxtb	r4, r4
 800a04e:	5caa      	ldrb	r2, [r5, r2]
 800a050:	f8ad 2010 	strh.w	r2, [sp, #16]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800a054:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800a058:	fb01 f202 	mul.w	r2, r1, r2
 800a05c:	0a12      	lsrs	r2, r2, #8
 800a05e:	f8ad 2010 	strh.w	r2, [sp, #16]
                    sysTime = gpsEpochTime;
 800a062:	c803      	ldmia	r0, {r0, r1}
 800a064:	e88a 0003 	stmia.w	sl, {r0, r1}
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800a068:	4a4d      	ldr	r2, [pc, #308]	; (800a1a0 <ProcessMacCommands+0x5e0>)
 800a06a:	441a      	add	r2, r3
 800a06c:	9205      	str	r2, [sp, #20]
                    sysTimeCurrent = SysTimeGet( );
 800a06e:	4658      	mov	r0, fp
 800a070:	f008 ff52 	bl	8012f18 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800a074:	4e49      	ldr	r6, [pc, #292]	; (800a19c <ProcessMacCommands+0x5dc>)
 800a076:	f8d6 333c 	ldr.w	r3, [r6, #828]	; 0x33c
 800a07a:	9300      	str	r3, [sp, #0]
 800a07c:	f8d6 3338 	ldr.w	r3, [r6, #824]	; 0x338
 800a080:	e89a 0006 	ldmia.w	sl, {r1, r2}
 800a084:	a80c      	add	r0, sp, #48	; 0x30
 800a086:	f008 ff06 	bl	8012e96 <SysTimeSub>
 800a08a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a08c:	9300      	str	r3, [sp, #0]
 800a08e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a090:	e89b 0006 	ldmia.w	fp, {r1, r2}
 800a094:	4650      	mov	r0, sl
 800a096:	f008 fedf 	bl	8012e58 <SysTimeAdd>
                    SysTimeSet( sysTime );
 800a09a:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800a09e:	f008 ff19 	bl	8012ed4 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800a0a2:	f002 fdcb 	bl	800cc3c <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	f886 343c 	strb.w	r3, [r6, #1084]	; 0x43c
 800a0ac:	e59b      	b.n	8009be6 <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800a0ae:	200c      	movs	r0, #12
 800a0b0:	f003 f824 	bl	800d0fc <LoRaMacConfirmQueueIsCmdActive>
 800a0b4:	b908      	cbnz	r0, 800a0ba <ProcessMacCommands+0x4fa>
        switch( payload[macIndex++] )
 800a0b6:	4634      	mov	r4, r6
 800a0b8:	e595      	b.n	8009be6 <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800a0ba:	210c      	movs	r1, #12
 800a0bc:	2000      	movs	r0, #0
 800a0be:	f002 ffd1 	bl	800d064 <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800a0c2:	4b36      	ldr	r3, [pc, #216]	; (800a19c <ProcessMacCommands+0x5dc>)
 800a0c4:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800a0c8:	3b04      	subs	r3, #4
 800a0ca:	b2db      	uxtb	r3, r3
 800a0cc:	2b01      	cmp	r3, #1
 800a0ce:	d801      	bhi.n	800a0d4 <ProcessMacCommands+0x514>
        switch( payload[macIndex++] )
 800a0d0:	4634      	mov	r4, r6
 800a0d2:	e588      	b.n	8009be6 <ProcessMacCommands+0x26>
                        LoRaMacClassBPingSlotInfoAns( );
 800a0d4:	f002 fdae 	bl	800cc34 <LoRaMacClassBPingSlotInfoAns>
        switch( payload[macIndex++] )
 800a0d8:	4634      	mov	r4, r6
 800a0da:	e584      	b.n	8009be6 <ProcessMacCommands+0x26>
                frequency = ( uint32_t )payload[macIndex++];
 800a0dc:	1ca2      	adds	r2, r4, #2
 800a0de:	b2d2      	uxtb	r2, r2
 800a0e0:	5dab      	ldrb	r3, [r5, r6]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800a0e2:	1ce1      	adds	r1, r4, #3
 800a0e4:	b2c9      	uxtb	r1, r1
 800a0e6:	5caa      	ldrb	r2, [r5, r2]
 800a0e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800a0ec:	1d22      	adds	r2, r4, #4
 800a0ee:	b2d2      	uxtb	r2, r2
 800a0f0:	5c69      	ldrb	r1, [r5, r1]
 800a0f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                datarate = payload[macIndex++] & 0x0F;
 800a0f6:	3405      	adds	r4, #5
 800a0f8:	b2e4      	uxtb	r4, r4
 800a0fa:	5ca8      	ldrb	r0, [r5, r2]
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800a0fc:	2164      	movs	r1, #100	; 0x64
 800a0fe:	fb03 f101 	mul.w	r1, r3, r1
 800a102:	f000 000f 	and.w	r0, r0, #15
 800a106:	f002 fd96 	bl	800cc36 <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 800a10a:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 800a10e:	2201      	movs	r2, #1
 800a110:	a90b      	add	r1, sp, #44	; 0x2c
 800a112:	2011      	movs	r0, #17
 800a114:	f002 fe2e 	bl	800cd74 <LoRaMacCommandsAddCmd>
                break;
 800a118:	e565      	b.n	8009be6 <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800a11a:	200d      	movs	r0, #13
 800a11c:	f002 ffee 	bl	800d0fc <LoRaMacConfirmQueueIsCmdActive>
 800a120:	b908      	cbnz	r0, 800a126 <ProcessMacCommands+0x566>
        switch( payload[macIndex++] )
 800a122:	4634      	mov	r4, r6
 800a124:	e55f      	b.n	8009be6 <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800a126:	210d      	movs	r1, #13
 800a128:	2000      	movs	r0, #0
 800a12a:	f002 ff9b 	bl	800d064 <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800a12e:	1ca2      	adds	r2, r4, #2
 800a130:	b2d2      	uxtb	r2, r2
 800a132:	5da8      	ldrb	r0, [r5, r6]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800a134:	1ce3      	adds	r3, r4, #3
 800a136:	b2db      	uxtb	r3, r3
 800a138:	5cae      	ldrb	r6, [r5, r2]
                    beaconTimingChannel = payload[macIndex++];
 800a13a:	3404      	adds	r4, #4
 800a13c:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800a13e:	4a19      	ldr	r2, [pc, #100]	; (800a1a4 <ProcessMacCommands+0x5e4>)
 800a140:	6812      	ldr	r2, [r2, #0]
 800a142:	5ce9      	ldrb	r1, [r5, r3]
 800a144:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 800a148:	f002 fd77 	bl	800cc3a <LoRaMacClassBBeaconTimingAns>
 800a14c:	e54b      	b.n	8009be6 <ProcessMacCommands+0x26>
                    frequency = ( uint32_t )payload[macIndex++];
 800a14e:	1ca1      	adds	r1, r4, #2
 800a150:	b2c9      	uxtb	r1, r1
 800a152:	5dab      	ldrb	r3, [r5, r6]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800a154:	1ce2      	adds	r2, r4, #3
 800a156:	b2d2      	uxtb	r2, r2
 800a158:	5c68      	ldrb	r0, [r5, r1]
 800a15a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800a15e:	3404      	adds	r4, #4
 800a160:	b2e4      	uxtb	r4, r4
 800a162:	5ca8      	ldrb	r0, [r5, r2]
 800a164:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800a168:	2064      	movs	r0, #100	; 0x64
 800a16a:	fb03 f000 	mul.w	r0, r3, r0
 800a16e:	f002 fd66 	bl	800cc3e <LoRaMacClassBBeaconFreqReq>
 800a172:	b140      	cbz	r0, 800a186 <ProcessMacCommands+0x5c6>
                        macCmdPayload[0] = 1;
 800a174:	2301      	movs	r3, #1
 800a176:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800a17a:	2201      	movs	r2, #1
 800a17c:	a90b      	add	r1, sp, #44	; 0x2c
 800a17e:	2013      	movs	r0, #19
 800a180:	f002 fdf8 	bl	800cd74 <LoRaMacCommandsAddCmd>
                break;
 800a184:	e52f      	b.n	8009be6 <ProcessMacCommands+0x26>
                        macCmdPayload[0] = 0;
 800a186:	2300      	movs	r3, #0
 800a188:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800a18c:	e7f5      	b.n	800a17a <ProcessMacCommands+0x5ba>
}
 800a18e:	b00f      	add	sp, #60	; 0x3c
 800a190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a194:	20008000 	.word	0x20008000
 800a198:	080147a4 	.word	0x080147a4
 800a19c:	20000814 	.word	0x20000814
 800a1a0:	12d53d80 	.word	0x12d53d80
 800a1a4:	20000dc4 	.word	0x20000dc4

0800a1a8 <ProcessRadioRxDone>:
{
 800a1a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a1ac:	b0a1      	sub	sp, #132	; 0x84
    uint8_t *payload = RxDoneParams.Payload;
 800a1ae:	4b96      	ldr	r3, [pc, #600]	; (800a408 <ProcessRadioRxDone+0x260>)
 800a1b0:	685e      	ldr	r6, [r3, #4]
    uint16_t size = RxDoneParams.Size;
 800a1b2:	891d      	ldrh	r5, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 800a1b4:	f9b3 900a 	ldrsh.w	r9, [r3, #10]
    int8_t snr = RxDoneParams.Snr;
 800a1b8:	f993 700c 	ldrsb.w	r7, [r3, #12]
    uint32_t downLinkCounter = 0;
 800a1bc:	2300      	movs	r3, #0
 800a1be:	9303      	str	r3, [sp, #12]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800a1c0:	4a92      	ldr	r2, [pc, #584]	; (800a40c <ProcessRadioRxDone+0x264>)
 800a1c2:	f8d2 80d4 	ldr.w	r8, [r2, #212]	; 0xd4
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800a1c6:	4a92      	ldr	r2, [pc, #584]	; (800a410 <ProcessRadioRxDone+0x268>)
 800a1c8:	7811      	ldrb	r1, [r2, #0]
 800a1ca:	f363 0100 	bfi	r1, r3, #0, #1
 800a1ce:	7011      	strb	r1, [r2, #0]
    MacCtx.McpsConfirm.AckReceived = false;
 800a1d0:	4c90      	ldr	r4, [pc, #576]	; (800a414 <ProcessRadioRxDone+0x26c>)
 800a1d2:	f884 3448 	strb.w	r3, [r4, #1096]	; 0x448
    MacCtx.RxStatus.Rssi = rssi;
 800a1d6:	f8a4 9490 	strh.w	r9, [r4, #1168]	; 0x490
    MacCtx.RxStatus.Snr = snr;
 800a1da:	f884 7492 	strb.w	r7, [r4, #1170]	; 0x492
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800a1de:	f894 2494 	ldrb.w	r2, [r4, #1172]	; 0x494
 800a1e2:	f884 2493 	strb.w	r2, [r4, #1171]	; 0x493
    MacCtx.McpsIndication.Port = 0;
 800a1e6:	f884 3427 	strb.w	r3, [r4, #1063]	; 0x427
    MacCtx.McpsIndication.Multicast = 0;
 800a1ea:	f884 3426 	strb.w	r3, [r4, #1062]	; 0x426
    MacCtx.McpsIndication.FramePending = 0;
 800a1ee:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
    MacCtx.McpsIndication.Buffer = NULL;
 800a1f2:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    MacCtx.McpsIndication.BufferSize = 0;
 800a1f6:	f884 3430 	strb.w	r3, [r4, #1072]	; 0x430
    MacCtx.McpsIndication.RxData = false;
 800a1fa:	f884 3431 	strb.w	r3, [r4, #1073]	; 0x431
    MacCtx.McpsIndication.AckReceived = false;
 800a1fe:	f884 3432 	strb.w	r3, [r4, #1074]	; 0x432
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800a202:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800a206:	f884 3424 	strb.w	r3, [r4, #1060]	; 0x424
    MacCtx.McpsIndication.DevAddress = 0;
 800a20a:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800a20e:	f884 343c 	strb.w	r3, [r4, #1084]	; 0x43c
    MacCtx.McpsIndication.ResponseTimeout = 0;
 800a212:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
    Radio.Sleep( );
 800a216:	4b80      	ldr	r3, [pc, #512]	; (800a418 <ProcessRadioRxDone+0x270>)
 800a218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a21a:	4798      	blx	r3
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800a21c:	f894 3493 	ldrb.w	r3, [r4, #1171]	; 0x493
 800a220:	b1c3      	cbz	r3, 800a254 <ProcessRadioRxDone+0xac>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800a222:	4629      	mov	r1, r5
 800a224:	4630      	mov	r0, r6
 800a226:	f002 fcf2 	bl	800cc0e <LoRaMacClassBRxBeacon>
 800a22a:	b9c0      	cbnz	r0, 800a25e <ProcessRadioRxDone+0xb6>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800a22c:	4b77      	ldr	r3, [pc, #476]	; (800a40c <ProcessRadioRxDone+0x264>)
 800a22e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800a232:	2b01      	cmp	r3, #1
 800a234:	d019      	beq.n	800a26a <ProcessRadioRxDone+0xc2>
    macHdr.Value = payload[pktHeaderLen++];
 800a236:	7834      	ldrb	r4, [r6, #0]
    switch( macHdr.Bits.MType )
 800a238:	0963      	lsrs	r3, r4, #5
 800a23a:	3b01      	subs	r3, #1
 800a23c:	2b06      	cmp	r3, #6
 800a23e:	f200 82d4 	bhi.w	800a7ea <ProcessRadioRxDone+0x642>
 800a242:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a246:	002f      	.short	0x002f
 800a248:	00b502d2 	.word	0x00b502d2
 800a24c:	00b102d2 	.word	0x00b102d2
 800a250:	02a202d2 	.word	0x02a202d2
        TimerStop( &MacCtx.RxWindowTimer2 );
 800a254:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800a258:	f008 ff4c 	bl	80130f4 <UTIL_TIMER_Stop>
 800a25c:	e7e1      	b.n	800a222 <ProcessRadioRxDone+0x7a>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800a25e:	4b6d      	ldr	r3, [pc, #436]	; (800a414 <ProcessRadioRxDone+0x26c>)
 800a260:	f8a3 9482 	strh.w	r9, [r3, #1154]	; 0x482
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800a264:	f883 7484 	strb.w	r7, [r3, #1156]	; 0x484
        return;
 800a268:	e2bc      	b.n	800a7e4 <ProcessRadioRxDone+0x63c>
        if( LoRaMacClassBIsPingExpected( ) == true )
 800a26a:	f002 fcd4 	bl	800cc16 <LoRaMacClassBIsPingExpected>
 800a26e:	b150      	cbz	r0, 800a286 <ProcessRadioRxDone+0xde>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a270:	2000      	movs	r0, #0
 800a272:	f002 fcc5 	bl	800cc00 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800a276:	2000      	movs	r0, #0
 800a278:	f002 fcc7 	bl	800cc0a <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800a27c:	4b65      	ldr	r3, [pc, #404]	; (800a414 <ProcessRadioRxDone+0x26c>)
 800a27e:	2204      	movs	r2, #4
 800a280:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
 800a284:	e7d7      	b.n	800a236 <ProcessRadioRxDone+0x8e>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800a286:	f002 fcc8 	bl	800cc1a <LoRaMacClassBIsMulticastExpected>
 800a28a:	2800      	cmp	r0, #0
 800a28c:	d0d3      	beq.n	800a236 <ProcessRadioRxDone+0x8e>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a28e:	2000      	movs	r0, #0
 800a290:	f002 fcb7 	bl	800cc02 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800a294:	2000      	movs	r0, #0
 800a296:	f002 fcb9 	bl	800cc0c <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800a29a:	4b5e      	ldr	r3, [pc, #376]	; (800a414 <ProcessRadioRxDone+0x26c>)
 800a29c:	2205      	movs	r2, #5
 800a29e:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
 800a2a2:	e7c8      	b.n	800a236 <ProcessRadioRxDone+0x8e>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800a2a4:	2d10      	cmp	r5, #16
 800a2a6:	d962      	bls.n	800a36e <ProcessRadioRxDone+0x1c6>
            macMsgJoinAccept.Buffer = payload;
 800a2a8:	9604      	str	r6, [sp, #16]
            macMsgJoinAccept.BufSize = size;
 800a2aa:	b2ed      	uxtb	r5, r5
 800a2ac:	f88d 5014 	strb.w	r5, [sp, #20]
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800a2b0:	4b56      	ldr	r3, [pc, #344]	; (800a40c <ProcessRadioRxDone+0x264>)
 800a2b2:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d160      	bne.n	800a37c <ProcessRadioRxDone+0x1d4>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800a2ba:	f006 fced 	bl	8010c98 <SecureElementGetJoinEui>
 800a2be:	4601      	mov	r1, r0
 800a2c0:	aa04      	add	r2, sp, #16
 800a2c2:	20ff      	movs	r0, #255	; 0xff
 800a2c4:	f003 fa90 	bl	800d7e8 <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800a2c8:	2800      	cmp	r0, #0
 800a2ca:	d163      	bne.n	800a394 <ProcessRadioRxDone+0x1ec>
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800a2cc:	f89d 2019 	ldrb.w	r2, [sp, #25]
 800a2d0:	4b4e      	ldr	r3, [pc, #312]	; (800a40c <ProcessRadioRxDone+0x264>)
 800a2d2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800a2d6:	f89d 101a 	ldrb.w	r1, [sp, #26]
 800a2da:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800a2de:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800a2e2:	f89d 101b 	ldrb.w	r1, [sp, #27]
 800a2e6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800a2ea:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800a2ee:	9a07      	ldr	r2, [sp, #28]
 800a2f0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800a2f4:	f89d 2020 	ldrb.w	r2, [sp, #32]
 800a2f8:	f3c2 1102 	ubfx	r1, r2, #4, #3
 800a2fc:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800a300:	f3c2 0203 	ubfx	r2, r2, #0, #4
 800a304:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800a308:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800a30c:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 800a310:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800a312:	b90a      	cbnz	r2, 800a318 <ProcessRadioRxDone+0x170>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800a314:	2201      	movs	r2, #1
 800a316:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800a318:	4c3c      	ldr	r4, [pc, #240]	; (800a40c <ProcessRadioRxDone+0x264>)
 800a31a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a31c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a320:	fb02 f303 	mul.w	r3, r2, r3
 800a324:	6523      	str	r3, [r4, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800a326:	4413      	add	r3, r2
 800a328:	6563      	str	r3, [r4, #84]	; 0x54
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800a32a:	2300      	movs	r3, #0
 800a32c:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800a330:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 800a334:	931e      	str	r3, [sp, #120]	; 0x78
                applyCFList.Size = size - 17;
 800a336:	3d11      	subs	r5, #17
 800a338:	f88d 507c 	strb.w	r5, [sp, #124]	; 0x7c
                applyCFList.JoinChannel = MacCtx.Channel;
 800a33c:	4b35      	ldr	r3, [pc, #212]	; (800a414 <ProcessRadioRxDone+0x26c>)
 800a33e:	f893 341f 	ldrb.w	r3, [r3, #1055]	; 0x41f
 800a342:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800a346:	a91d      	add	r1, sp, #116	; 0x74
 800a348:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a34c:	f003 fc86 	bl	800dc5c <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800a350:	2302      	movs	r3, #2
 800a352:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800a356:	2001      	movs	r0, #1
 800a358:	f002 fed0 	bl	800d0fc <LoRaMacConfirmQueueIsCmdActive>
 800a35c:	b9a8      	cbnz	r0, 800a38a <ProcessRadioRxDone+0x1e2>
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800a35e:	4a2d      	ldr	r2, [pc, #180]	; (800a414 <ProcessRadioRxDone+0x26c>)
 800a360:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800a364:	f043 0308 	orr.w	r3, r3, #8
 800a368:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
            break;
 800a36c:	e227      	b.n	800a7be <ProcessRadioRxDone+0x616>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a36e:	4b29      	ldr	r3, [pc, #164]	; (800a414 <ProcessRadioRxDone+0x26c>)
 800a370:	2201      	movs	r2, #1
 800a372:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800a376:	f7ff fbab 	bl	8009ad0 <PrepareRxDoneAbort>
                return;
 800a37a:	e233      	b.n	800a7e4 <ProcessRadioRxDone+0x63c>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a37c:	4b25      	ldr	r3, [pc, #148]	; (800a414 <ProcessRadioRxDone+0x26c>)
 800a37e:	2201      	movs	r2, #1
 800a380:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800a384:	f7ff fba4 	bl	8009ad0 <PrepareRxDoneAbort>
                return;
 800a388:	e22c      	b.n	800a7e4 <ProcessRadioRxDone+0x63c>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800a38a:	2101      	movs	r1, #1
 800a38c:	2000      	movs	r0, #0
 800a38e:	f002 fe69 	bl	800d064 <LoRaMacConfirmQueueSetStatus>
 800a392:	e7e4      	b.n	800a35e <ProcessRadioRxDone+0x1b6>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800a394:	2001      	movs	r0, #1
 800a396:	f002 feb1 	bl	800d0fc <LoRaMacConfirmQueueIsCmdActive>
 800a39a:	2800      	cmp	r0, #0
 800a39c:	d0df      	beq.n	800a35e <ProcessRadioRxDone+0x1b6>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800a39e:	2101      	movs	r1, #1
 800a3a0:	2007      	movs	r0, #7
 800a3a2:	f002 fe5f 	bl	800d064 <LoRaMacConfirmQueueSetStatus>
 800a3a6:	e7da      	b.n	800a35e <ProcessRadioRxDone+0x1b6>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800a3a8:	4b1a      	ldr	r3, [pc, #104]	; (800a414 <ProcessRadioRxDone+0x26c>)
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a3b0:	4b16      	ldr	r3, [pc, #88]	; (800a40c <ProcessRadioRxDone+0x264>)
 800a3b2:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800a3b6:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800a3ba:	4a16      	ldr	r2, [pc, #88]	; (800a414 <ProcessRadioRxDone+0x26c>)
 800a3bc:	f992 2428 	ldrsb.w	r2, [r2, #1064]	; 0x428
 800a3c0:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800a3c4:	220d      	movs	r2, #13
 800a3c6:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800a3ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a3ce:	b113      	cbz	r3, 800a3d6 <ProcessRadioRxDone+0x22e>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800a3d0:	230e      	movs	r3, #14
 800a3d2:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a3d6:	a91b      	add	r1, sp, #108	; 0x6c
 800a3d8:	4b0c      	ldr	r3, [pc, #48]	; (800a40c <ProcessRadioRxDone+0x264>)
 800a3da:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a3de:	f003 fbf9 	bl	800dbd4 <RegionGetPhyParam>
 800a3e2:	901a      	str	r0, [sp, #104]	; 0x68
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800a3e4:	f1a5 030d 	sub.w	r3, r5, #13
 800a3e8:	b21b      	sxth	r3, r3
 800a3ea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a3ee:	b200      	sxth	r0, r0
 800a3f0:	4283      	cmp	r3, r0
 800a3f2:	dc01      	bgt.n	800a3f8 <ProcessRadioRxDone+0x250>
 800a3f4:	2d0b      	cmp	r5, #11
 800a3f6:	d811      	bhi.n	800a41c <ProcessRadioRxDone+0x274>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a3f8:	4b06      	ldr	r3, [pc, #24]	; (800a414 <ProcessRadioRxDone+0x26c>)
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800a400:	f7ff fb66 	bl	8009ad0 <PrepareRxDoneAbort>
                return;
 800a404:	e1ee      	b.n	800a7e4 <ProcessRadioRxDone+0x63c>
 800a406:	bf00      	nop
 800a408:	20000dc4 	.word	0x20000dc4
 800a40c:	20008000 	.word	0x20008000
 800a410:	20000810 	.word	0x20000810
 800a414:	20000814 	.word	0x20000814
 800a418:	08014e54 	.word	0x08014e54
            macMsgData.Buffer = payload;
 800a41c:	960e      	str	r6, [sp, #56]	; 0x38
            macMsgData.BufSize = size;
 800a41e:	f88d 503c 	strb.w	r5, [sp, #60]	; 0x3c
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800a422:	4bba      	ldr	r3, [pc, #744]	; (800a70c <ProcessRadioRxDone+0x564>)
 800a424:	9317      	str	r3, [sp, #92]	; 0x5c
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800a426:	23ff      	movs	r3, #255	; 0xff
 800a428:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800a42c:	a80e      	add	r0, sp, #56	; 0x38
 800a42e:	f003 faa1 	bl	800d974 <LoRaMacParserData>
 800a432:	2800      	cmp	r0, #0
 800a434:	d142      	bne.n	800a4bc <ProcessRadioRxDone+0x314>
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800a436:	4bb6      	ldr	r3, [pc, #728]	; (800a710 <ProcessRadioRxDone+0x568>)
 800a438:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800a43c:	2b01      	cmp	r3, #1
 800a43e:	d044      	beq.n	800a4ca <ProcessRadioRxDone+0x322>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800a440:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a442:	4bb4      	ldr	r3, [pc, #720]	; (800a714 <ProcessRadioRxDone+0x56c>)
 800a444:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800a448:	f10d 010a 	add.w	r1, sp, #10
 800a44c:	a80e      	add	r0, sp, #56	; 0x38
 800a44e:	f7ff f9d5 	bl	80097fc <DetermineFrameType>
 800a452:	4605      	mov	r5, r0
 800a454:	2800      	cmp	r0, #0
 800a456:	d163      	bne.n	800a520 <ProcessRadioRxDone+0x378>
            downLinkCounter = 0;
 800a458:	2300      	movs	r3, #0
 800a45a:	9303      	str	r3, [sp, #12]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800a45c:	4603      	mov	r3, r0
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d065      	beq.n	800a52e <ProcessRadioRxDone+0x386>
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800a462:	2601      	movs	r6, #1
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800a464:	2d01      	cmp	r5, #1
 800a466:	d10a      	bne.n	800a47e <ProcessRadioRxDone+0x2d6>
 800a468:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800a46c:	2b03      	cmp	r3, #3
 800a46e:	f040 808a 	bne.w	800a586 <ProcessRadioRxDone+0x3de>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800a472:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800a476:	f013 0f60 	tst.w	r3, #96	; 0x60
 800a47a:	f040 8084 	bne.w	800a586 <ProcessRadioRxDone+0x3de>
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 800a47e:	ab03      	add	r3, sp, #12
 800a480:	9301      	str	r3, [sp, #4]
 800a482:	f10d 030b 	add.w	r3, sp, #11
 800a486:	9300      	str	r3, [sp, #0]
 800a488:	4ba1      	ldr	r3, [pc, #644]	; (800a710 <ProcessRadioRxDone+0x568>)
 800a48a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800a48e:	aa0e      	add	r2, sp, #56	; 0x38
 800a490:	f89d 100a 	ldrb.w	r1, [sp, #10]
 800a494:	4630      	mov	r0, r6
 800a496:	f7ff fb59 	bl	8009b4c <GetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800a49a:	2800      	cmp	r0, #0
 800a49c:	d07f      	beq.n	800a59e <ProcessRadioRxDone+0x3f6>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800a49e:	2807      	cmp	r0, #7
 800a4a0:	d078      	beq.n	800a594 <ProcessRadioRxDone+0x3ec>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a4a2:	4b9c      	ldr	r3, [pc, #624]	; (800a714 <ProcessRadioRxDone+0x56c>)
 800a4a4:	2201      	movs	r2, #1
 800a4a6:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800a4aa:	9a03      	ldr	r2, [sp, #12]
 800a4ac:	4b99      	ldr	r3, [pc, #612]	; (800a714 <ProcessRadioRxDone+0x56c>)
 800a4ae:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800a4b2:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
                PrepareRxDoneAbort( );
 800a4b6:	f7ff fb0b 	bl	8009ad0 <PrepareRxDoneAbort>
                return;
 800a4ba:	e193      	b.n	800a7e4 <ProcessRadioRxDone+0x63c>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a4bc:	4b95      	ldr	r3, [pc, #596]	; (800a714 <ProcessRadioRxDone+0x56c>)
 800a4be:	2201      	movs	r2, #1
 800a4c0:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800a4c4:	f7ff fb04 	bl	8009ad0 <PrepareRxDoneAbort>
                return;
 800a4c8:	e18c      	b.n	800a7e4 <ProcessRadioRxDone+0x63c>
                if( LoRaMacClassBIsPingExpected( ) == true )
 800a4ca:	f002 fba4 	bl	800cc16 <LoRaMacClassBIsPingExpected>
 800a4ce:	b188      	cbz	r0, 800a4f4 <ProcessRadioRxDone+0x34c>
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a4d0:	2000      	movs	r0, #0
 800a4d2:	f002 fb95 	bl	800cc00 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 800a4d6:	2000      	movs	r0, #0
 800a4d8:	f002 fb97 	bl	800cc0a <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800a4dc:	4b8d      	ldr	r3, [pc, #564]	; (800a714 <ProcessRadioRxDone+0x56c>)
 800a4de:	2204      	movs	r2, #4
 800a4e0:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800a4e4:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 800a4e8:	f3c1 1100 	ubfx	r1, r1, #4, #1
 800a4ec:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a4ee:	f002 fbab 	bl	800cc48 <LoRaMacClassBSetFPendingBit>
 800a4f2:	e7a5      	b.n	800a440 <ProcessRadioRxDone+0x298>
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800a4f4:	f002 fb91 	bl	800cc1a <LoRaMacClassBIsMulticastExpected>
 800a4f8:	2800      	cmp	r0, #0
 800a4fa:	d0a1      	beq.n	800a440 <ProcessRadioRxDone+0x298>
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a4fc:	2000      	movs	r0, #0
 800a4fe:	f002 fb80 	bl	800cc02 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800a502:	2000      	movs	r0, #0
 800a504:	f002 fb82 	bl	800cc0c <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800a508:	4b82      	ldr	r3, [pc, #520]	; (800a714 <ProcessRadioRxDone+0x56c>)
 800a50a:	2205      	movs	r2, #5
 800a50c:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800a510:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 800a514:	f3c1 1100 	ubfx	r1, r1, #4, #1
 800a518:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a51a:	f002 fb95 	bl	800cc48 <LoRaMacClassBSetFPendingBit>
 800a51e:	e78f      	b.n	800a440 <ProcessRadioRxDone+0x298>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a520:	4b7c      	ldr	r3, [pc, #496]	; (800a714 <ProcessRadioRxDone+0x56c>)
 800a522:	2201      	movs	r2, #1
 800a524:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800a528:	f7ff fad2 	bl	8009ad0 <PrepareRxDoneAbort>
                return;
 800a52c:	e15a      	b.n	800a7e4 <ProcessRadioRxDone+0x63c>
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800a52e:	4618      	mov	r0, r3
 800a530:	4a77      	ldr	r2, [pc, #476]	; (800a710 <ProcessRadioRxDone+0x568>)
 800a532:	212c      	movs	r1, #44	; 0x2c
 800a534:	fb01 2203 	mla	r2, r1, r3, r2
 800a538:	f8d2 20dc 	ldr.w	r2, [r2, #220]	; 0xdc
 800a53c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a53e:	428a      	cmp	r2, r1
 800a540:	d002      	beq.n	800a548 <ProcessRadioRxDone+0x3a0>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800a542:	3301      	adds	r3, #1
 800a544:	b2db      	uxtb	r3, r3
 800a546:	e78a      	b.n	800a45e <ProcessRadioRxDone+0x2b6>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800a548:	4971      	ldr	r1, [pc, #452]	; (800a710 <ProcessRadioRxDone+0x568>)
 800a54a:	262c      	movs	r6, #44	; 0x2c
 800a54c:	fb06 1103 	mla	r1, r6, r3, r1
 800a550:	f891 10da 	ldrb.w	r1, [r1, #218]	; 0xda
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800a554:	2900      	cmp	r1, #0
 800a556:	d0f4      	beq.n	800a542 <ProcessRadioRxDone+0x39a>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800a558:	4b6d      	ldr	r3, [pc, #436]	; (800a710 <ProcessRadioRxDone+0x568>)
 800a55a:	fb06 3000 	mla	r0, r6, r0, r3
 800a55e:	f890 60db 	ldrb.w	r6, [r0, #219]	; 0xdb
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800a562:	f8d0 10f8 	ldr.w	r1, [r0, #248]	; 0xf8
 800a566:	6809      	ldr	r1, [r1, #0]
 800a568:	9103      	str	r1, [sp, #12]
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800a56a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800a56e:	2b02      	cmp	r3, #2
 800a570:	d002      	beq.n	800a578 <ProcessRadioRxDone+0x3d0>
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800a572:	4690      	mov	r8, r2
                    multicast = 1;
 800a574:	2501      	movs	r5, #1
 800a576:	e775      	b.n	800a464 <ProcessRadioRxDone+0x2bc>
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800a578:	4b66      	ldr	r3, [pc, #408]	; (800a714 <ProcessRadioRxDone+0x56c>)
 800a57a:	2103      	movs	r1, #3
 800a57c:	f883 1493 	strb.w	r1, [r3, #1171]	; 0x493
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800a580:	4690      	mov	r8, r2
                    multicast = 1;
 800a582:	2501      	movs	r5, #1
 800a584:	e76e      	b.n	800a464 <ProcessRadioRxDone+0x2bc>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a586:	4b63      	ldr	r3, [pc, #396]	; (800a714 <ProcessRadioRxDone+0x56c>)
 800a588:	2201      	movs	r2, #1
 800a58a:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800a58e:	f7ff fa9f 	bl	8009ad0 <PrepareRxDoneAbort>
                return;
 800a592:	e127      	b.n	800a7e4 <ProcessRadioRxDone+0x63c>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800a594:	4b5f      	ldr	r3, [pc, #380]	; (800a714 <ProcessRadioRxDone+0x56c>)
 800a596:	2208      	movs	r2, #8
 800a598:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 800a59c:	e785      	b.n	800a4aa <ProcessRadioRxDone+0x302>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800a59e:	ab0e      	add	r3, sp, #56	; 0x38
 800a5a0:	9300      	str	r3, [sp, #0]
 800a5a2:	9b03      	ldr	r3, [sp, #12]
 800a5a4:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800a5a8:	4641      	mov	r1, r8
 800a5aa:	4630      	mov	r0, r6
 800a5ac:	f003 f870 	bl	800d690 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800a5b0:	2800      	cmp	r0, #0
 800a5b2:	d13d      	bne.n	800a630 <ProcessRadioRxDone+0x488>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800a5b4:	4b57      	ldr	r3, [pc, #348]	; (800a714 <ProcessRadioRxDone+0x56c>)
 800a5b6:	2100      	movs	r1, #0
 800a5b8:	f883 1425 	strb.w	r1, [r3, #1061]	; 0x425
            MacCtx.McpsIndication.Multicast = multicast;
 800a5bc:	f883 5426 	strb.w	r5, [r3, #1062]	; 0x426
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800a5c0:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800a5c4:	f3c2 1000 	ubfx	r0, r2, #4, #1
 800a5c8:	f883 0429 	strb.w	r0, [r3, #1065]	; 0x429
            MacCtx.McpsIndication.Buffer = NULL;
 800a5cc:	f8c3 142c 	str.w	r1, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.BufferSize = 0;
 800a5d0:	f883 1430 	strb.w	r1, [r3, #1072]	; 0x430
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800a5d4:	9803      	ldr	r0, [sp, #12]
 800a5d6:	f8c3 0434 	str.w	r0, [r3, #1076]	; 0x434
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800a5da:	f8c3 0470 	str.w	r0, [r3, #1136]	; 0x470
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800a5de:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800a5e2:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800a5e6:	f883 1445 	strb.w	r1, [r3, #1093]	; 0x445
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800a5ea:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800a5ee:	f893 0493 	ldrb.w	r0, [r3, #1171]	; 0x493
 800a5f2:	2801      	cmp	r0, #1
 800a5f4:	d92a      	bls.n	800a64c <ProcessRadioRxDone+0x4a4>
            if( multicast == 1 )
 800a5f6:	2d01      	cmp	r5, #1
 800a5f8:	d02e      	beq.n	800a658 <ProcessRadioRxDone+0x4b0>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800a5fa:	f004 04e0 	and.w	r4, r4, #224	; 0xe0
 800a5fe:	2ca0      	cmp	r4, #160	; 0xa0
 800a600:	d02f      	beq.n	800a662 <ProcessRadioRxDone+0x4ba>
                    Nvm.MacGroup1.SrvAckRequested = false;
 800a602:	2300      	movs	r3, #0
 800a604:	4a42      	ldr	r2, [pc, #264]	; (800a710 <ProcessRadioRxDone+0x568>)
 800a606:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800a60a:	4a42      	ldr	r2, [pc, #264]	; (800a714 <ProcessRadioRxDone+0x56c>)
 800a60c:	f882 3424 	strb.w	r3, [r2, #1060]	; 0x424
            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800a610:	4b40      	ldr	r3, [pc, #256]	; (800a714 <ProcessRadioRxDone+0x56c>)
 800a612:	f893 2444 	ldrb.w	r2, [r3, #1092]	; 0x444
 800a616:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 800a61a:	f7ff fac2 	bl	8009ba2 <RemoveMacCommands>
            switch( fType )
 800a61e:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800a622:	2b03      	cmp	r3, #3
 800a624:	f200 809a 	bhi.w	800a75c <ProcessRadioRxDone+0x5b4>
 800a628:	e8df f003 	tbb	[pc, r3]
 800a62c:	88785d36 	.word	0x88785d36
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800a630:	2802      	cmp	r0, #2
 800a632:	d006      	beq.n	800a642 <ProcessRadioRxDone+0x49a>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800a634:	4b37      	ldr	r3, [pc, #220]	; (800a714 <ProcessRadioRxDone+0x56c>)
 800a636:	220b      	movs	r2, #11
 800a638:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800a63c:	f7ff fa48 	bl	8009ad0 <PrepareRxDoneAbort>
                return;
 800a640:	e0d0      	b.n	800a7e4 <ProcessRadioRxDone+0x63c>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800a642:	4b34      	ldr	r3, [pc, #208]	; (800a714 <ProcessRadioRxDone+0x56c>)
 800a644:	220a      	movs	r2, #10
 800a646:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 800a64a:	e7f7      	b.n	800a63c <ProcessRadioRxDone+0x494>
                Nvm.MacGroup1.AdrAckCounter = 0;
 800a64c:	4b30      	ldr	r3, [pc, #192]	; (800a710 <ProcessRadioRxDone+0x568>)
 800a64e:	6299      	str	r1, [r3, #40]	; 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
 800a650:	2201      	movs	r2, #1
 800a652:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
 800a656:	e7ce      	b.n	800a5f6 <ProcessRadioRxDone+0x44e>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800a658:	4b2e      	ldr	r3, [pc, #184]	; (800a714 <ProcessRadioRxDone+0x56c>)
 800a65a:	2202      	movs	r2, #2
 800a65c:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
 800a660:	e7d6      	b.n	800a610 <ProcessRadioRxDone+0x468>
                    Nvm.MacGroup1.SrvAckRequested = true;
 800a662:	4b2b      	ldr	r3, [pc, #172]	; (800a710 <ProcessRadioRxDone+0x568>)
 800a664:	2201      	movs	r2, #1
 800a666:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800a66a:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800a66e:	b913      	cbnz	r3, 800a676 <ProcessRadioRxDone+0x4ce>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800a670:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a672:	4b27      	ldr	r3, [pc, #156]	; (800a710 <ProcessRadioRxDone+0x568>)
 800a674:	635a      	str	r2, [r3, #52]	; 0x34
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800a676:	4b27      	ldr	r3, [pc, #156]	; (800a714 <ProcessRadioRxDone+0x56c>)
 800a678:	2201      	movs	r2, #1
 800a67a:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800a67e:	4290      	cmp	r0, r2
 800a680:	d9c6      	bls.n	800a610 <ProcessRadioRxDone+0x468>
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800a682:	4b23      	ldr	r3, [pc, #140]	; (800a710 <ProcessRadioRxDone+0x568>)
 800a684:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800a688:	4b22      	ldr	r3, [pc, #136]	; (800a714 <ProcessRadioRxDone+0x56c>)
 800a68a:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 800a68e:	4a22      	ldr	r2, [pc, #136]	; (800a718 <ProcessRadioRxDone+0x570>)
 800a690:	6812      	ldr	r2, [r2, #0]
 800a692:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
 800a696:	e7bb      	b.n	800a610 <ProcessRadioRxDone+0x468>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800a698:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800a69c:	4c1d      	ldr	r4, [pc, #116]	; (800a714 <ProcessRadioRxDone+0x56c>)
 800a69e:	f894 3493 	ldrb.w	r3, [r4, #1171]	; 0x493
 800a6a2:	9300      	str	r3, [sp, #0]
 800a6a4:	463b      	mov	r3, r7
 800a6a6:	f002 020f 	and.w	r2, r2, #15
 800a6aa:	2100      	movs	r1, #0
 800a6ac:	a812      	add	r0, sp, #72	; 0x48
 800a6ae:	f7ff fa87 	bl	8009bc0 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800a6b2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800a6b6:	f884 3427 	strb.w	r3, [r4, #1063]	; 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800a6ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a6bc:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800a6c0:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 800a6c4:	f884 3430 	strb.w	r3, [r4, #1072]	; 0x430
                    MacCtx.McpsIndication.RxData = true;
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	f884 3431 	strb.w	r3, [r4, #1073]	; 0x431
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800a6ce:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800a6d2:	2be0      	cmp	r3, #224	; 0xe0
 800a6d4:	d049      	beq.n	800a76a <ProcessRadioRxDone+0x5c2>
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800a6d6:	4a0f      	ldr	r2, [pc, #60]	; (800a714 <ProcessRadioRxDone+0x56c>)
 800a6d8:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800a6dc:	f043 0302 	orr.w	r3, r3, #2
 800a6e0:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
            break;
 800a6e4:	e06b      	b.n	800a7be <ProcessRadioRxDone+0x616>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800a6e6:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800a6ea:	4c0a      	ldr	r4, [pc, #40]	; (800a714 <ProcessRadioRxDone+0x56c>)
 800a6ec:	f894 3493 	ldrb.w	r3, [r4, #1171]	; 0x493
 800a6f0:	9300      	str	r3, [sp, #0]
 800a6f2:	463b      	mov	r3, r7
 800a6f4:	f002 020f 	and.w	r2, r2, #15
 800a6f8:	2100      	movs	r1, #0
 800a6fa:	a812      	add	r0, sp, #72	; 0x48
 800a6fc:	f7ff fa60 	bl	8009bc0 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800a700:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800a704:	f884 3427 	strb.w	r3, [r4, #1063]	; 0x427
                    break;
 800a708:	e7e1      	b.n	800a6ce <ProcessRadioRxDone+0x526>
 800a70a:	bf00      	nop
 800a70c:	20000a4c 	.word	0x20000a4c
 800a710:	20008000 	.word	0x20008000
 800a714:	20000814 	.word	0x20000814
 800a718:	20000dc4 	.word	0x20000dc4
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800a71c:	4c3d      	ldr	r4, [pc, #244]	; (800a814 <ProcessRadioRxDone+0x66c>)
 800a71e:	f894 3493 	ldrb.w	r3, [r4, #1171]	; 0x493
 800a722:	9300      	str	r3, [sp, #0]
 800a724:	463b      	mov	r3, r7
 800a726:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
 800a72a:	2100      	movs	r1, #0
 800a72c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a72e:	f7ff fa47 	bl	8009bc0 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800a732:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800a736:	f884 3427 	strb.w	r3, [r4, #1063]	; 0x427
                    break;
 800a73a:	e7c8      	b.n	800a6ce <ProcessRadioRxDone+0x526>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800a73c:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 800a740:	4b34      	ldr	r3, [pc, #208]	; (800a814 <ProcessRadioRxDone+0x66c>)
 800a742:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800a746:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a748:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800a74c:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
 800a750:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
                    MacCtx.McpsIndication.RxData = true;
 800a754:	2201      	movs	r2, #1
 800a756:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
                    break;
 800a75a:	e7b8      	b.n	800a6ce <ProcessRadioRxDone+0x526>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a75c:	4b2d      	ldr	r3, [pc, #180]	; (800a814 <ProcessRadioRxDone+0x66c>)
 800a75e:	2201      	movs	r2, #1
 800a760:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                    PrepareRxDoneAbort( );
 800a764:	f7ff f9b4 	bl	8009ad0 <PrepareRxDoneAbort>
                    break;
 800a768:	e7b1      	b.n	800a6ce <ProcessRadioRxDone+0x526>
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800a76a:	4a2b      	ldr	r2, [pc, #172]	; (800a818 <ProcessRadioRxDone+0x670>)
 800a76c:	f892 210b 	ldrb.w	r2, [r2, #267]	; 0x10b
 800a770:	2a00      	cmp	r2, #0
 800a772:	d1b0      	bne.n	800a6d6 <ProcessRadioRxDone+0x52e>
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 800a774:	4a27      	ldr	r2, [pc, #156]	; (800a814 <ProcessRadioRxDone+0x66c>)
 800a776:	f882 3427 	strb.w	r3, [r2, #1063]	; 0x427
                MacCtx.McpsIndication.Buffer = NULL;
 800a77a:	2300      	movs	r3, #0
 800a77c:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                MacCtx.McpsIndication.BufferSize = 0;
 800a780:	f882 3430 	strb.w	r3, [r2, #1072]	; 0x430
                MacCtx.McpsIndication.RxData = false;
 800a784:	f882 3431 	strb.w	r3, [r2, #1073]	; 0x431
 800a788:	e7a5      	b.n	800a6d6 <ProcessRadioRxDone+0x52e>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800a78a:	1e6a      	subs	r2, r5, #1
 800a78c:	4c21      	ldr	r4, [pc, #132]	; (800a814 <ProcessRadioRxDone+0x66c>)
 800a78e:	f504 770e 	add.w	r7, r4, #568	; 0x238
 800a792:	b292      	uxth	r2, r2
 800a794:	1c71      	adds	r1, r6, #1
 800a796:	4638      	mov	r0, r7
 800a798:	f006 faaf 	bl	8010cfa <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800a79c:	2303      	movs	r3, #3
 800a79e:	f884 3424 	strb.w	r3, [r4, #1060]	; 0x424
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	f884 3425 	strb.w	r3, [r4, #1061]	; 0x425
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800a7a8:	f8c4 742c 	str.w	r7, [r4, #1068]	; 0x42c
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800a7ac:	3d01      	subs	r5, #1
 800a7ae:	f884 5430 	strb.w	r5, [r4, #1072]	; 0x430
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800a7b2:	f894 3495 	ldrb.w	r3, [r4, #1173]	; 0x495
 800a7b6:	f043 0302 	orr.w	r3, r3, #2
 800a7ba:	f884 3495 	strb.w	r3, [r4, #1173]	; 0x495
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800a7be:	4b15      	ldr	r3, [pc, #84]	; (800a814 <ProcessRadioRxDone+0x66c>)
 800a7c0:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800a7c4:	2b01      	cmp	r3, #1
 800a7c6:	d917      	bls.n	800a7f8 <ProcessRadioRxDone+0x650>
    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 800a7c8:	4b12      	ldr	r3, [pc, #72]	; (800a814 <ProcessRadioRxDone+0x66c>)
 800a7ca:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800a7ce:	2b02      	cmp	r3, #2
 800a7d0:	d006      	beq.n	800a7e0 <ProcessRadioRxDone+0x638>
        MacCtx.MacFlags.Bits.MacDone = 1;
 800a7d2:	4a10      	ldr	r2, [pc, #64]	; (800a814 <ProcessRadioRxDone+0x66c>)
 800a7d4:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800a7d8:	f043 0320 	orr.w	r3, r3, #32
 800a7dc:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    UpdateRxSlotIdleState( );
 800a7e0:	f7fe ff80 	bl	80096e4 <UpdateRxSlotIdleState>
}
 800a7e4:	b021      	add	sp, #132	; 0x84
 800a7e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a7ea:	4b0a      	ldr	r3, [pc, #40]	; (800a814 <ProcessRadioRxDone+0x66c>)
 800a7ec:	2201      	movs	r2, #1
 800a7ee:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            PrepareRxDoneAbort( );
 800a7f2:	f7ff f96d 	bl	8009ad0 <PrepareRxDoneAbort>
            break;
 800a7f6:	e7e2      	b.n	800a7be <ProcessRadioRxDone+0x616>
        if( MacCtx.NodeAckRequested == true )
 800a7f8:	4b06      	ldr	r3, [pc, #24]	; (800a814 <ProcessRadioRxDone+0x66c>)
 800a7fa:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d0e2      	beq.n	800a7c8 <ProcessRadioRxDone+0x620>
            if( MacCtx.McpsConfirm.AckReceived == true )
 800a802:	4b04      	ldr	r3, [pc, #16]	; (800a814 <ProcessRadioRxDone+0x66c>)
 800a804:	f893 3448 	ldrb.w	r3, [r3, #1096]	; 0x448
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d0dd      	beq.n	800a7c8 <ProcessRadioRxDone+0x620>
                OnRetransmitTimeoutTimerEvent( NULL );
 800a80c:	2000      	movs	r0, #0
 800a80e:	f7ff f949 	bl	8009aa4 <OnRetransmitTimeoutTimerEvent>
 800a812:	e7d9      	b.n	800a7c8 <ProcessRadioRxDone+0x620>
 800a814:	20000814 	.word	0x20000814
 800a818:	20008000 	.word	0x20008000

0800a81c <ProcessRadioTxTimeout>:
{
 800a81c:	b510      	push	{r4, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800a81e:	4b0f      	ldr	r3, [pc, #60]	; (800a85c <ProcessRadioTxTimeout+0x40>)
 800a820:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800a824:	2b02      	cmp	r3, #2
 800a826:	d002      	beq.n	800a82e <ProcessRadioTxTimeout+0x12>
        Radio.Sleep( );
 800a828:	4b0d      	ldr	r3, [pc, #52]	; (800a860 <ProcessRadioTxTimeout+0x44>)
 800a82a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a82c:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 800a82e:	f7fe ff59 	bl	80096e4 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800a832:	4c0c      	ldr	r4, [pc, #48]	; (800a864 <ProcessRadioTxTimeout+0x48>)
 800a834:	2002      	movs	r0, #2
 800a836:	f884 0445 	strb.w	r0, [r4, #1093]	; 0x445
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800a83a:	f002 fc41 	bl	800d0c0 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800a83e:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
 800a842:	b113      	cbz	r3, 800a84a <ProcessRadioTxTimeout+0x2e>
        MacCtx.RetransmitTimeoutRetry = true;
 800a844:	2201      	movs	r2, #1
 800a846:	f884 241d 	strb.w	r2, [r4, #1053]	; 0x41d
    MacCtx.MacFlags.Bits.MacDone = 1;
 800a84a:	4a06      	ldr	r2, [pc, #24]	; (800a864 <ProcessRadioTxTimeout+0x48>)
 800a84c:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800a850:	f043 0320 	orr.w	r3, r3, #32
 800a854:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
}
 800a858:	bd10      	pop	{r4, pc}
 800a85a:	bf00      	nop
 800a85c:	20008000 	.word	0x20008000
 800a860:	08014e54 	.word	0x08014e54
 800a864:	20000814 	.word	0x20000814

0800a868 <CheckForClassBCollision>:
{
 800a868:	b508      	push	{r3, lr}
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800a86a:	f002 f9d2 	bl	800cc12 <LoRaMacClassBIsBeaconExpected>
 800a86e:	b978      	cbnz	r0, 800a890 <CheckForClassBCollision+0x28>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800a870:	4b09      	ldr	r3, [pc, #36]	; (800a898 <CheckForClassBCollision+0x30>)
 800a872:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800a876:	2b01      	cmp	r3, #1
 800a878:	d001      	beq.n	800a87e <CheckForClassBCollision+0x16>
    return LORAMAC_STATUS_OK;
 800a87a:	2000      	movs	r0, #0
}
 800a87c:	bd08      	pop	{r3, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 800a87e:	f002 f9ca 	bl	800cc16 <LoRaMacClassBIsPingExpected>
 800a882:	b938      	cbnz	r0, 800a894 <CheckForClassBCollision+0x2c>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800a884:	f002 f9c9 	bl	800cc1a <LoRaMacClassBIsMulticastExpected>
 800a888:	2800      	cmp	r0, #0
 800a88a:	d0f7      	beq.n	800a87c <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800a88c:	200f      	movs	r0, #15
 800a88e:	e7f5      	b.n	800a87c <CheckForClassBCollision+0x14>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800a890:	200e      	movs	r0, #14
 800a892:	e7f3      	b.n	800a87c <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800a894:	200f      	movs	r0, #15
 800a896:	e7f1      	b.n	800a87c <CheckForClassBCollision+0x14>
 800a898:	20008000 	.word	0x20008000

0800a89c <HandleRadioRxErrorTimeout>:
{
 800a89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a89e:	4605      	mov	r5, r0
 800a8a0:	460c      	mov	r4, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800a8a2:	4b34      	ldr	r3, [pc, #208]	; (800a974 <HandleRadioRxErrorTimeout+0xd8>)
 800a8a4:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800a8a8:	2b02      	cmp	r3, #2
 800a8aa:	d002      	beq.n	800a8b2 <HandleRadioRxErrorTimeout+0x16>
        Radio.Sleep( );
 800a8ac:	4b32      	ldr	r3, [pc, #200]	; (800a978 <HandleRadioRxErrorTimeout+0xdc>)
 800a8ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8b0:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800a8b2:	f002 f9ae 	bl	800cc12 <LoRaMacClassBIsBeaconExpected>
 800a8b6:	4606      	mov	r6, r0
 800a8b8:	bb50      	cbnz	r0, 800a910 <HandleRadioRxErrorTimeout+0x74>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800a8ba:	4b2e      	ldr	r3, [pc, #184]	; (800a974 <HandleRadioRxErrorTimeout+0xd8>)
 800a8bc:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800a8c0:	2b01      	cmp	r3, #1
 800a8c2:	d02c      	beq.n	800a91e <HandleRadioRxErrorTimeout+0x82>
    if( classBRx == false )
 800a8c4:	2e00      	cmp	r6, #0
 800a8c6:	d152      	bne.n	800a96e <HandleRadioRxErrorTimeout+0xd2>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800a8c8:	4b2c      	ldr	r3, [pc, #176]	; (800a97c <HandleRadioRxErrorTimeout+0xe0>)
 800a8ca:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d13c      	bne.n	800a94c <HandleRadioRxErrorTimeout+0xb0>
            if( MacCtx.NodeAckRequested == true )
 800a8d2:	4b2a      	ldr	r3, [pc, #168]	; (800a97c <HandleRadioRxErrorTimeout+0xe0>)
 800a8d4:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800a8d8:	b113      	cbz	r3, 800a8e0 <HandleRadioRxErrorTimeout+0x44>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800a8da:	4b28      	ldr	r3, [pc, #160]	; (800a97c <HandleRadioRxErrorTimeout+0xe0>)
 800a8dc:	f883 5445 	strb.w	r5, [r3, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800a8e0:	4628      	mov	r0, r5
 800a8e2:	f002 fbed 	bl	800d0c0 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800a8e6:	4b23      	ldr	r3, [pc, #140]	; (800a974 <HandleRadioRxErrorTimeout+0xd8>)
 800a8e8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800a8ea:	f008 fbcd 	bl	8013088 <UTIL_TIMER_GetElapsedTime>
 800a8ee:	4b23      	ldr	r3, [pc, #140]	; (800a97c <HandleRadioRxErrorTimeout+0xe0>)
 800a8f0:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800a8f4:	4298      	cmp	r0, r3
 800a8f6:	d33a      	bcc.n	800a96e <HandleRadioRxErrorTimeout+0xd2>
                TimerStop( &MacCtx.RxWindowTimer2 );
 800a8f8:	4c20      	ldr	r4, [pc, #128]	; (800a97c <HandleRadioRxErrorTimeout+0xe0>)
 800a8fa:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800a8fe:	f008 fbf9 	bl	80130f4 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800a902:	f894 3495 	ldrb.w	r3, [r4, #1173]	; 0x495
 800a906:	f043 0320 	orr.w	r3, r3, #32
 800a90a:	f884 3495 	strb.w	r3, [r4, #1173]	; 0x495
 800a90e:	e02e      	b.n	800a96e <HandleRadioRxErrorTimeout+0xd2>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800a910:	2002      	movs	r0, #2
 800a912:	f002 f974 	bl	800cbfe <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800a916:	2000      	movs	r0, #0
 800a918:	f002 f976 	bl	800cc08 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800a91c:	e7cd      	b.n	800a8ba <HandleRadioRxErrorTimeout+0x1e>
        if( LoRaMacClassBIsPingExpected( ) == true )
 800a91e:	f002 f97a 	bl	800cc16 <LoRaMacClassBIsPingExpected>
 800a922:	4607      	mov	r7, r0
 800a924:	b950      	cbnz	r0, 800a93c <HandleRadioRxErrorTimeout+0xa0>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800a926:	f002 f978 	bl	800cc1a <LoRaMacClassBIsMulticastExpected>
 800a92a:	2800      	cmp	r0, #0
 800a92c:	d0ca      	beq.n	800a8c4 <HandleRadioRxErrorTimeout+0x28>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a92e:	2000      	movs	r0, #0
 800a930:	f002 f967 	bl	800cc02 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800a934:	2000      	movs	r0, #0
 800a936:	f002 f969 	bl	800cc0c <LoRaMacClassBMulticastSlotTimerEvent>
    if( classBRx == false )
 800a93a:	e018      	b.n	800a96e <HandleRadioRxErrorTimeout+0xd2>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a93c:	2000      	movs	r0, #0
 800a93e:	f002 f95f 	bl	800cc00 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800a942:	2000      	movs	r0, #0
 800a944:	f002 f961 	bl	800cc0a <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800a948:	463e      	mov	r6, r7
 800a94a:	e7ec      	b.n	800a926 <HandleRadioRxErrorTimeout+0x8a>
            if( MacCtx.NodeAckRequested == true )
 800a94c:	4b0b      	ldr	r3, [pc, #44]	; (800a97c <HandleRadioRxErrorTimeout+0xe0>)
 800a94e:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800a952:	b113      	cbz	r3, 800a95a <HandleRadioRxErrorTimeout+0xbe>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800a954:	4b09      	ldr	r3, [pc, #36]	; (800a97c <HandleRadioRxErrorTimeout+0xe0>)
 800a956:	f883 4445 	strb.w	r4, [r3, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800a95a:	4620      	mov	r0, r4
 800a95c:	f002 fbb0 	bl	800d0c0 <LoRaMacConfirmQueueSetStatusCmn>
            MacCtx.MacFlags.Bits.MacDone = 1;
 800a960:	4a06      	ldr	r2, [pc, #24]	; (800a97c <HandleRadioRxErrorTimeout+0xe0>)
 800a962:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800a966:	f043 0320 	orr.w	r3, r3, #32
 800a96a:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    UpdateRxSlotIdleState( );
 800a96e:	f7fe feb9 	bl	80096e4 <UpdateRxSlotIdleState>
}
 800a972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a974:	20008000 	.word	0x20008000
 800a978:	08014e54 	.word	0x08014e54
 800a97c:	20000814 	.word	0x20000814

0800a980 <ProcessRadioRxError>:
{
 800a980:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800a982:	2106      	movs	r1, #6
 800a984:	2005      	movs	r0, #5
 800a986:	f7ff ff89 	bl	800a89c <HandleRadioRxErrorTimeout>
}
 800a98a:	bd08      	pop	{r3, pc}

0800a98c <ProcessRadioRxTimeout>:
{
 800a98c:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800a98e:	2104      	movs	r1, #4
 800a990:	2003      	movs	r0, #3
 800a992:	f7ff ff83 	bl	800a89c <HandleRadioRxErrorTimeout>
}
 800a996:	bd08      	pop	{r3, pc}

0800a998 <LoRaMacHandleIrqEvents>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a998:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800a99c:	b672      	cpsid	i
    events = LoRaMacRadioEvents;
 800a99e:	4a14      	ldr	r2, [pc, #80]	; (800a9f0 <LoRaMacHandleIrqEvents+0x58>)
 800a9a0:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 800a9a2:	2000      	movs	r0, #0
 800a9a4:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9a6:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 800a9aa:	b303      	cbz	r3, 800a9ee <LoRaMacHandleIrqEvents+0x56>
{
 800a9ac:	b510      	push	{r4, lr}
        if( events.Events.TxDone == 1 )
 800a9ae:	b2dc      	uxtb	r4, r3
 800a9b0:	f013 0f20 	tst.w	r3, #32
 800a9b4:	d10c      	bne.n	800a9d0 <LoRaMacHandleIrqEvents+0x38>
        if( events.Events.RxDone == 1 )
 800a9b6:	f014 0f10 	tst.w	r4, #16
 800a9ba:	d10c      	bne.n	800a9d6 <LoRaMacHandleIrqEvents+0x3e>
        if( events.Events.TxTimeout == 1 )
 800a9bc:	f014 0f08 	tst.w	r4, #8
 800a9c0:	d10c      	bne.n	800a9dc <LoRaMacHandleIrqEvents+0x44>
        if( events.Events.RxError == 1 )
 800a9c2:	f014 0f04 	tst.w	r4, #4
 800a9c6:	d10c      	bne.n	800a9e2 <LoRaMacHandleIrqEvents+0x4a>
        if( events.Events.RxTimeout == 1 )
 800a9c8:	f014 0f02 	tst.w	r4, #2
 800a9cc:	d10c      	bne.n	800a9e8 <LoRaMacHandleIrqEvents+0x50>
}
 800a9ce:	bd10      	pop	{r4, pc}
            ProcessRadioTxDone( );
 800a9d0:	f7fe fff2 	bl	80099b8 <ProcessRadioTxDone>
 800a9d4:	e7ef      	b.n	800a9b6 <LoRaMacHandleIrqEvents+0x1e>
            ProcessRadioRxDone( );
 800a9d6:	f7ff fbe7 	bl	800a1a8 <ProcessRadioRxDone>
 800a9da:	e7ef      	b.n	800a9bc <LoRaMacHandleIrqEvents+0x24>
            ProcessRadioTxTimeout( );
 800a9dc:	f7ff ff1e 	bl	800a81c <ProcessRadioTxTimeout>
 800a9e0:	e7ef      	b.n	800a9c2 <LoRaMacHandleIrqEvents+0x2a>
            ProcessRadioRxError( );
 800a9e2:	f7ff ffcd 	bl	800a980 <ProcessRadioRxError>
 800a9e6:	e7ef      	b.n	800a9c8 <LoRaMacHandleIrqEvents+0x30>
            ProcessRadioRxTimeout( );
 800a9e8:	f7ff ffd0 	bl	800a98c <ProcessRadioRxTimeout>
}
 800a9ec:	e7ef      	b.n	800a9ce <LoRaMacHandleIrqEvents+0x36>
 800a9ee:	4770      	bx	lr
 800a9f0:	20000810 	.word	0x20000810

0800a9f4 <LoRaMacHandleResponseTimeout>:
    if( startTimeInMs != 0 )
 800a9f4:	b909      	cbnz	r1, 800a9fa <LoRaMacHandleResponseTimeout+0x6>
    return false;
 800a9f6:	2000      	movs	r0, #0
}
 800a9f8:	4770      	bx	lr
{
 800a9fa:	b510      	push	{r4, lr}
 800a9fc:	4604      	mov	r4, r0
 800a9fe:	4608      	mov	r0, r1
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 800aa00:	f008 fb42 	bl	8013088 <UTIL_TIMER_GetElapsedTime>
        if( elapsedTime > timeoutInMs )
 800aa04:	42a0      	cmp	r0, r4
 800aa06:	d801      	bhi.n	800aa0c <LoRaMacHandleResponseTimeout+0x18>
    return false;
 800aa08:	2000      	movs	r0, #0
}
 800aa0a:	bd10      	pop	{r4, pc}
            Nvm.MacGroup1.SrvAckRequested = false;
 800aa0c:	4b02      	ldr	r3, [pc, #8]	; (800aa18 <LoRaMacHandleResponseTimeout+0x24>)
 800aa0e:	2200      	movs	r2, #0
 800aa10:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
            return true;
 800aa14:	2001      	movs	r0, #1
 800aa16:	e7f8      	b.n	800aa0a <LoRaMacHandleResponseTimeout+0x16>
 800aa18:	20008000 	.word	0x20008000

0800aa1c <LoRaMacHandleMlmeRequest>:
{
 800aa1c:	b508      	push	{r3, lr}
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800aa1e:	4b14      	ldr	r3, [pc, #80]	; (800aa70 <LoRaMacHandleMlmeRequest+0x54>)
 800aa20:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800aa24:	f013 0f04 	tst.w	r3, #4
 800aa28:	d100      	bne.n	800aa2c <LoRaMacHandleMlmeRequest+0x10>
}
 800aa2a:	bd08      	pop	{r3, pc}
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800aa2c:	2001      	movs	r0, #1
 800aa2e:	f002 fb65 	bl	800d0fc <LoRaMacConfirmQueueIsCmdActive>
 800aa32:	b178      	cbz	r0, 800aa54 <LoRaMacHandleMlmeRequest+0x38>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800aa34:	2001      	movs	r0, #1
 800aa36:	f002 fb2b 	bl	800d090 <LoRaMacConfirmQueueGetStatus>
 800aa3a:	b918      	cbnz	r0, 800aa44 <LoRaMacHandleMlmeRequest+0x28>
                MacCtx.ChannelsNbTransCounter = 0;
 800aa3c:	4b0c      	ldr	r3, [pc, #48]	; (800aa70 <LoRaMacHandleMlmeRequest+0x54>)
 800aa3e:	2200      	movs	r2, #0
 800aa40:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800aa44:	4a0a      	ldr	r2, [pc, #40]	; (800aa70 <LoRaMacHandleMlmeRequest+0x54>)
 800aa46:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800aa4a:	f023 0302 	bic.w	r3, r3, #2
 800aa4e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
 800aa52:	e7ea      	b.n	800aa2a <LoRaMacHandleMlmeRequest+0xe>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 800aa54:	2005      	movs	r0, #5
 800aa56:	f002 fb51 	bl	800d0fc <LoRaMacConfirmQueueIsCmdActive>
 800aa5a:	2800      	cmp	r0, #0
 800aa5c:	d0e5      	beq.n	800aa2a <LoRaMacHandleMlmeRequest+0xe>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800aa5e:	4a04      	ldr	r2, [pc, #16]	; (800aa70 <LoRaMacHandleMlmeRequest+0x54>)
 800aa60:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800aa64:	f023 0302 	bic.w	r3, r3, #2
 800aa68:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800aa6c:	e7dd      	b.n	800aa2a <LoRaMacHandleMlmeRequest+0xe>
 800aa6e:	bf00      	nop
 800aa70:	20000814 	.word	0x20000814

0800aa74 <SerializeTxFrame>:
{
 800aa74:	b508      	push	{r3, lr}
    switch( MacCtx.TxMsg.Type )
 800aa76:	4b0f      	ldr	r3, [pc, #60]	; (800aab4 <SerializeTxFrame+0x40>)
 800aa78:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800aa7c:	b11b      	cbz	r3, 800aa86 <SerializeTxFrame+0x12>
 800aa7e:	2b04      	cmp	r3, #4
 800aa80:	d00a      	beq.n	800aa98 <SerializeTxFrame+0x24>
 800aa82:	2003      	movs	r0, #3
}
 800aa84:	bd08      	pop	{r3, pc}
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800aa86:	480c      	ldr	r0, [pc, #48]	; (800aab8 <SerializeTxFrame+0x44>)
 800aa88:	f002 ffd3 	bl	800da32 <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800aa8c:	b968      	cbnz	r0, 800aaaa <SerializeTxFrame+0x36>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800aa8e:	4b09      	ldr	r3, [pc, #36]	; (800aab4 <SerializeTxFrame+0x40>)
 800aa90:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800aa94:	801a      	strh	r2, [r3, #0]
            break;
 800aa96:	e7f5      	b.n	800aa84 <SerializeTxFrame+0x10>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800aa98:	4807      	ldr	r0, [pc, #28]	; (800aab8 <SerializeTxFrame+0x44>)
 800aa9a:	f003 f800 	bl	800da9e <LoRaMacSerializerData>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800aa9e:	b930      	cbnz	r0, 800aaae <SerializeTxFrame+0x3a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800aaa0:	4b04      	ldr	r3, [pc, #16]	; (800aab4 <SerializeTxFrame+0x40>)
 800aaa2:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800aaa6:	801a      	strh	r2, [r3, #0]
            break;
 800aaa8:	e7ec      	b.n	800aa84 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800aaaa:	2011      	movs	r0, #17
 800aaac:	e7ea      	b.n	800aa84 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800aaae:	2011      	movs	r0, #17
 800aab0:	e7e8      	b.n	800aa84 <SerializeTxFrame+0x10>
 800aab2:	bf00      	nop
 800aab4:	20000814 	.word	0x20000814
 800aab8:	2000091c 	.word	0x2000091c

0800aabc <ComputeRxWindowParameters>:
{
 800aabc:	b570      	push	{r4, r5, r6, lr}
 800aabe:	b082      	sub	sp, #8
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800aac0:	4c1d      	ldr	r4, [pc, #116]	; (800ab38 <ComputeRxWindowParameters+0x7c>)
 800aac2:	f894 6040 	ldrb.w	r6, [r4, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800aac6:	f994 3061 	ldrsb.w	r3, [r4, #97]	; 0x61
 800aaca:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
 800aace:	f894 1075 	ldrb.w	r1, [r4, #117]	; 0x75
 800aad2:	4630      	mov	r0, r6
 800aad4:	f003 f993 	bl	800ddfe <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800aad8:	4d18      	ldr	r5, [pc, #96]	; (800ab3c <ComputeRxWindowParameters+0x80>)
 800aada:	f505 736e 	add.w	r3, r5, #952	; 0x3b8
 800aade:	9300      	str	r3, [sp, #0]
 800aae0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800aae2:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800aae6:	b241      	sxtb	r1, r0
 800aae8:	4630      	mov	r0, r6
 800aaea:	f003 f8d4 	bl	800dc96 <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800aaee:	f505 7374 	add.w	r3, r5, #976	; 0x3d0
 800aaf2:	9300      	str	r3, [sp, #0]
 800aaf4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800aaf6:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800aafa:	f994 1068 	ldrsb.w	r1, [r4, #104]	; 0x68
 800aafe:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800ab02:	f003 f8c8 	bl	800dc96 <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800ab06:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ab08:	f8d5 13c4 	ldr.w	r1, [r5, #964]	; 0x3c4
 800ab0c:	440b      	add	r3, r1
 800ab0e:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800ab12:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ab14:	f8d5 23dc 	ldr.w	r2, [r5, #988]	; 0x3dc
 800ab18:	4413      	add	r3, r2
 800ab1a:	f8c5 33b4 	str.w	r3, [r5, #948]	; 0x3b4
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800ab1e:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 800ab22:	b93b      	cbnz	r3, 800ab34 <ComputeRxWindowParameters+0x78>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800ab24:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ab26:	4419      	add	r1, r3
 800ab28:	f8c5 13b0 	str.w	r1, [r5, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800ab2c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ab2e:	440a      	add	r2, r1
 800ab30:	f8c5 23b4 	str.w	r2, [r5, #948]	; 0x3b4
}
 800ab34:	b002      	add	sp, #8
 800ab36:	bd70      	pop	{r4, r5, r6, pc}
 800ab38:	20008000 	.word	0x20008000
 800ab3c:	20000814 	.word	0x20000814

0800ab40 <VerifyTxFrame>:
{
 800ab40:	b510      	push	{r4, lr}
 800ab42:	b082      	sub	sp, #8
    size_t macCmdsSize = 0;
 800ab44:	2300      	movs	r3, #0
 800ab46:	9301      	str	r3, [sp, #4]
    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800ab48:	4b0d      	ldr	r3, [pc, #52]	; (800ab80 <VerifyTxFrame+0x40>)
 800ab4a:	f893 411c 	ldrb.w	r4, [r3, #284]	; 0x11c
 800ab4e:	b914      	cbnz	r4, 800ab56 <VerifyTxFrame+0x16>
}
 800ab50:	4620      	mov	r0, r4
 800ab52:	b002      	add	sp, #8
 800ab54:	bd10      	pop	{r4, pc}
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800ab56:	a801      	add	r0, sp, #4
 800ab58:	f002 f980 	bl	800ce5c <LoRaMacCommandsGetSizeSerializedCmds>
 800ab5c:	4604      	mov	r4, r0
 800ab5e:	b968      	cbnz	r0, 800ab7c <VerifyTxFrame+0x3c>
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800ab60:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ab64:	4b06      	ldr	r3, [pc, #24]	; (800ab80 <VerifyTxFrame+0x40>)
 800ab66:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800ab6a:	4b06      	ldr	r3, [pc, #24]	; (800ab84 <VerifyTxFrame+0x44>)
 800ab6c:	f893 0237 	ldrb.w	r0, [r3, #567]	; 0x237
 800ab70:	f7fe ff10 	bl	8009994 <ValidatePayloadLength>
 800ab74:	2800      	cmp	r0, #0
 800ab76:	d1eb      	bne.n	800ab50 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_LENGTH_ERROR;
 800ab78:	2408      	movs	r4, #8
 800ab7a:	e7e9      	b.n	800ab50 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ab7c:	2413      	movs	r4, #19
 800ab7e:	e7e7      	b.n	800ab50 <VerifyTxFrame+0x10>
 800ab80:	20008000 	.word	0x20008000
 800ab84:	20000814 	.word	0x20000814

0800ab88 <SecureFrame>:
{
 800ab88:	b530      	push	{r4, r5, lr}
 800ab8a:	b083      	sub	sp, #12
    uint32_t fCntUp = 0;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	9301      	str	r3, [sp, #4]
    switch( MacCtx.TxMsg.Type )
 800ab90:	4b18      	ldr	r3, [pc, #96]	; (800abf4 <SecureFrame+0x6c>)
 800ab92:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800ab96:	b133      	cbz	r3, 800aba6 <SecureFrame+0x1e>
 800ab98:	4605      	mov	r5, r0
 800ab9a:	460c      	mov	r4, r1
 800ab9c:	2b04      	cmp	r3, #4
 800ab9e:	d00b      	beq.n	800abb8 <SecureFrame+0x30>
 800aba0:	2003      	movs	r0, #3
}
 800aba2:	b003      	add	sp, #12
 800aba4:	bd30      	pop	{r4, r5, pc}
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800aba6:	4814      	ldr	r0, [pc, #80]	; (800abf8 <SecureFrame+0x70>)
 800aba8:	f002 fd08 	bl	800d5bc <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800abac:	b9d8      	cbnz	r0, 800abe6 <SecureFrame+0x5e>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800abae:	4b11      	ldr	r3, [pc, #68]	; (800abf4 <SecureFrame+0x6c>)
 800abb0:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800abb4:	801a      	strh	r2, [r3, #0]
            break;
 800abb6:	e7f4      	b.n	800aba2 <SecureFrame+0x1a>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800abb8:	a801      	add	r0, sp, #4
 800abba:	f002 fcb5 	bl	800d528 <LoRaMacCryptoGetFCntUp>
 800abbe:	b9a0      	cbnz	r0, 800abea <SecureFrame+0x62>
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 800abc0:	4b0c      	ldr	r3, [pc, #48]	; (800abf4 <SecureFrame+0x6c>)
 800abc2:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800abc6:	b113      	cbz	r3, 800abce <SecureFrame+0x46>
                fCntUp -= 1;
 800abc8:	9b01      	ldr	r3, [sp, #4]
 800abca:	3b01      	subs	r3, #1
 800abcc:	9301      	str	r3, [sp, #4]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800abce:	4b0a      	ldr	r3, [pc, #40]	; (800abf8 <SecureFrame+0x70>)
 800abd0:	4622      	mov	r2, r4
 800abd2:	4629      	mov	r1, r5
 800abd4:	9801      	ldr	r0, [sp, #4]
 800abd6:	f002 fd17 	bl	800d608 <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800abda:	b940      	cbnz	r0, 800abee <SecureFrame+0x66>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800abdc:	4b05      	ldr	r3, [pc, #20]	; (800abf4 <SecureFrame+0x6c>)
 800abde:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800abe2:	801a      	strh	r2, [r3, #0]
            break;
 800abe4:	e7dd      	b.n	800aba2 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800abe6:	2011      	movs	r0, #17
 800abe8:	e7db      	b.n	800aba2 <SecureFrame+0x1a>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800abea:	2012      	movs	r0, #18
 800abec:	e7d9      	b.n	800aba2 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800abee:	2011      	movs	r0, #17
 800abf0:	e7d7      	b.n	800aba2 <SecureFrame+0x1a>
 800abf2:	bf00      	nop
 800abf4:	20000814 	.word	0x20000814
 800abf8:	2000091c 	.word	0x2000091c

0800abfc <SendFrameOnChannel>:
{
 800abfc:	b570      	push	{r4, r5, r6, lr}
 800abfe:	b086      	sub	sp, #24
 800ac00:	4606      	mov	r6, r0
    int8_t txPower = 0;
 800ac02:	2300      	movs	r3, #0
 800ac04:	f88d 3007 	strb.w	r3, [sp, #7]
    txConfig.Channel = channel;
 800ac08:	f88d 0008 	strb.w	r0, [sp, #8]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800ac0c:	4d35      	ldr	r5, [pc, #212]	; (800ace4 <SendFrameOnChannel+0xe8>)
 800ac0e:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
 800ac12:	f88d 3009 	strb.w	r3, [sp, #9]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800ac16:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
 800ac1a:	f88d 300a 	strb.w	r3, [sp, #10]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800ac1e:	6fab      	ldr	r3, [r5, #120]	; 0x78
 800ac20:	9303      	str	r3, [sp, #12]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800ac22:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800ac24:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800ac26:	4c30      	ldr	r4, [pc, #192]	; (800ace8 <SendFrameOnChannel+0xec>)
 800ac28:	8823      	ldrh	r3, [r4, #0]
 800ac2a:	f8ad 3014 	strh.w	r3, [sp, #20]
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800ac2e:	f895 311c 	ldrb.w	r3, [r5, #284]	; 0x11c
 800ac32:	f88d 3016 	strb.w	r3, [sp, #22]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800ac36:	f504 6384 	add.w	r3, r4, #1056	; 0x420
 800ac3a:	f10d 0207 	add.w	r2, sp, #7
 800ac3e:	a902      	add	r1, sp, #8
 800ac40:	f895 0040 	ldrb.w	r0, [r5, #64]	; 0x40
 800ac44:	f003 f84b 	bl	800dcde <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ac48:	2301      	movs	r3, #1
 800ac4a:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800ac4e:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
 800ac52:	f884 3446 	strb.w	r3, [r4, #1094]	; 0x446
    MacCtx.McpsConfirm.TxPower = txPower;
 800ac56:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ac5a:	f884 3447 	strb.w	r3, [r4, #1095]	; 0x447
    MacCtx.McpsConfirm.Channel = channel;
 800ac5e:	f8c4 6454 	str.w	r6, [r4, #1108]	; 0x454
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800ac62:	f8d4 3420 	ldr.w	r3, [r4, #1056]	; 0x420
 800ac66:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800ac6a:	f8c4 345c 	str.w	r3, [r4, #1116]	; 0x45c
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800ac6e:	f001 ffd6 	bl	800cc1e <LoRaMacClassBIsBeaconModeActive>
 800ac72:	bb60      	cbnz	r0, 800acce <SendFrameOnChannel+0xd2>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800ac74:	4b1b      	ldr	r3, [pc, #108]	; (800ace4 <SendFrameOnChannel+0xe8>)
 800ac76:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800ac7a:	2b01      	cmp	r3, #1
 800ac7c:	d02f      	beq.n	800acde <SendFrameOnChannel+0xe2>
    LoRaMacClassBHaltBeaconing( );
 800ac7e:	f001 ffd1 	bl	800cc24 <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 800ac82:	4b18      	ldr	r3, [pc, #96]	; (800ace4 <SendFrameOnChannel+0xe8>)
 800ac84:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 800ac88:	4b17      	ldr	r3, [pc, #92]	; (800ace8 <SendFrameOnChannel+0xec>)
 800ac8a:	f893 141f 	ldrb.w	r1, [r3, #1055]	; 0x41f
 800ac8e:	b2c0      	uxtb	r0, r0
 800ac90:	f7ff ff7a 	bl	800ab88 <SecureFrame>
    if( status != LORAMAC_STATUS_OK )
 800ac94:	4604      	mov	r4, r0
 800ac96:	b9b8      	cbnz	r0, 800acc8 <SendFrameOnChannel+0xcc>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800ac98:	4813      	ldr	r0, [pc, #76]	; (800ace8 <SendFrameOnChannel+0xec>)
 800ac9a:	f8d0 3340 	ldr.w	r3, [r0, #832]	; 0x340
 800ac9e:	f043 0302 	orr.w	r3, r3, #2
 800aca2:	f8c0 3340 	str.w	r3, [r0, #832]	; 0x340
    MacCtx.ChannelsNbTransCounter++;
 800aca6:	f890 341c 	ldrb.w	r3, [r0, #1052]	; 0x41c
 800acaa:	3301      	adds	r3, #1
 800acac:	b2db      	uxtb	r3, r3
 800acae:	f880 341c 	strb.w	r3, [r0, #1052]	; 0x41c
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800acb2:	f880 3449 	strb.w	r3, [r0, #1097]	; 0x449
    MacCtx.ResponseTimeoutStartTime = 0;
 800acb6:	2300      	movs	r3, #0
 800acb8:	f8c0 349c 	str.w	r3, [r0, #1180]	; 0x49c
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800acbc:	4b0b      	ldr	r3, [pc, #44]	; (800acec <SendFrameOnChannel+0xf0>)
 800acbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acc0:	f830 1b02 	ldrh.w	r1, [r0], #2
 800acc4:	b2c9      	uxtb	r1, r1
 800acc6:	4798      	blx	r3
}
 800acc8:	4620      	mov	r0, r4
 800acca:	b006      	add	sp, #24
 800accc:	bd70      	pop	{r4, r5, r6, pc}
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800acce:	f8d4 0420 	ldr.w	r0, [r4, #1056]	; 0x420
 800acd2:	f001 ffb6 	bl	800cc42 <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 800acd6:	2800      	cmp	r0, #0
 800acd8:	d0cc      	beq.n	800ac74 <SendFrameOnChannel+0x78>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800acda:	2410      	movs	r4, #16
 800acdc:	e7f4      	b.n	800acc8 <SendFrameOnChannel+0xcc>
        LoRaMacClassBStopRxSlots( );
 800acde:	f001 ffb2 	bl	800cc46 <LoRaMacClassBStopRxSlots>
 800ace2:	e7cc      	b.n	800ac7e <SendFrameOnChannel+0x82>
 800ace4:	20008000 	.word	0x20008000
 800ace8:	20000814 	.word	0x20000814
 800acec:	08014e54 	.word	0x08014e54

0800acf0 <ScheduleTx>:
{
 800acf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acf4:	b08c      	sub	sp, #48	; 0x30
 800acf6:	4605      	mov	r5, r0
    status = CheckForClassBCollision( );
 800acf8:	f7ff fdb6 	bl	800a868 <CheckForClassBCollision>
    if( status != LORAMAC_STATUS_OK )
 800acfc:	4604      	mov	r4, r0
 800acfe:	b118      	cbz	r0, 800ad08 <ScheduleTx+0x18>
}
 800ad00:	4620      	mov	r0, r4
 800ad02:	b00c      	add	sp, #48	; 0x30
 800ad04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CalculateBackOff( );
 800ad08:	f7fe fd50 	bl	80097ac <CalculateBackOff>
    status = SerializeTxFrame( );
 800ad0c:	f7ff feb2 	bl	800aa74 <SerializeTxFrame>
    if( status != LORAMAC_STATUS_OK )
 800ad10:	4604      	mov	r4, r0
 800ad12:	2800      	cmp	r0, #0
 800ad14:	d1f4      	bne.n	800ad00 <ScheduleTx+0x10>
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800ad16:	4e36      	ldr	r6, [pc, #216]	; (800adf0 <ScheduleTx+0x100>)
 800ad18:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800ad1a:	9304      	str	r3, [sp, #16]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800ad1c:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 800ad20:	f88d 3018 	strb.w	r3, [sp, #24]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800ad24:	f896 3108 	ldrb.w	r3, [r6, #264]	; 0x108
 800ad28:	f88d 301a 	strb.w	r3, [sp, #26]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800ad2c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800ad30:	4640      	mov	r0, r8
 800ad32:	f008 f913 	bl	8012f5c <SysTimeGetMcuTime>
 800ad36:	af02      	add	r7, sp, #8
 800ad38:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
 800ad3c:	9300      	str	r3, [sp, #0]
 800ad3e:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
 800ad42:	e898 0006 	ldmia.w	r8, {r1, r2}
 800ad46:	4638      	mov	r0, r7
 800ad48:	f008 f8a5 	bl	8012e96 <SysTimeSub>
 800ad4c:	ab07      	add	r3, sp, #28
 800ad4e:	e897 0003 	ldmia.w	r7, {r0, r1}
 800ad52:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800ad56:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800ad58:	9305      	str	r3, [sp, #20]
    nextChan.LastTxIsJoinRequest = false;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    nextChan.Joined = true;
 800ad60:	2301      	movs	r3, #1
 800ad62:	f88d 3019 	strb.w	r3, [sp, #25]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800ad66:	4b23      	ldr	r3, [pc, #140]	; (800adf4 <ScheduleTx+0x104>)
 800ad68:	881b      	ldrh	r3, [r3, #0]
 800ad6a:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800ad6e:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
 800ad72:	b92b      	cbnz	r3, 800ad80 <ScheduleTx+0x90>
        nextChan.LastTxIsJoinRequest = true;
 800ad74:	2301      	movs	r3, #1
 800ad76:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        nextChan.Joined = false;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	f88d 3019 	strb.w	r3, [sp, #25]
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800ad80:	4a1c      	ldr	r2, [pc, #112]	; (800adf4 <ScheduleTx+0x104>)
 800ad82:	481b      	ldr	r0, [pc, #108]	; (800adf0 <ScheduleTx+0x100>)
 800ad84:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ad88:	9300      	str	r3, [sp, #0]
 800ad8a:	f502 6393 	add.w	r3, r2, #1176	; 0x498
 800ad8e:	f202 421f 	addw	r2, r2, #1055	; 0x41f
 800ad92:	a904      	add	r1, sp, #16
 800ad94:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 800ad98:	f003 f81c 	bl	800ddd4 <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 800ad9c:	b1b0      	cbz	r0, 800adcc <ScheduleTx+0xdc>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 800ad9e:	280b      	cmp	r0, #11
 800ada0:	d122      	bne.n	800ade8 <ScheduleTx+0xf8>
 800ada2:	b31d      	cbz	r5, 800adec <ScheduleTx+0xfc>
            if( MacCtx.DutyCycleWaitTime != 0 )
 800ada4:	4b13      	ldr	r3, [pc, #76]	; (800adf4 <ScheduleTx+0x104>)
 800ada6:	f8d3 1498 	ldr.w	r1, [r3, #1176]	; 0x498
 800adaa:	2900      	cmp	r1, #0
 800adac:	d0a8      	beq.n	800ad00 <ScheduleTx+0x10>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800adae:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800adb2:	f042 0220 	orr.w	r2, r2, #32
 800adb6:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800adba:	f503 755a 	add.w	r5, r3, #872	; 0x368
 800adbe:	4628      	mov	r0, r5
 800adc0:	f008 fa38 	bl	8013234 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 800adc4:	4628      	mov	r0, r5
 800adc6:	f008 f9ef 	bl	80131a8 <UTIL_TIMER_Start>
            return LORAMAC_STATUS_OK;
 800adca:	e799      	b.n	800ad00 <ScheduleTx+0x10>
    ComputeRxWindowParameters( );
 800adcc:	f7ff fe76 	bl	800aabc <ComputeRxWindowParameters>
    status = VerifyTxFrame( );
 800add0:	f7ff feb6 	bl	800ab40 <VerifyTxFrame>
    if( status != LORAMAC_STATUS_OK )
 800add4:	4604      	mov	r4, r0
 800add6:	2800      	cmp	r0, #0
 800add8:	d192      	bne.n	800ad00 <ScheduleTx+0x10>
    return SendFrameOnChannel( MacCtx.Channel );
 800adda:	4b06      	ldr	r3, [pc, #24]	; (800adf4 <ScheduleTx+0x104>)
 800addc:	f893 041f 	ldrb.w	r0, [r3, #1055]	; 0x41f
 800ade0:	f7ff ff0c 	bl	800abfc <SendFrameOnChannel>
 800ade4:	4604      	mov	r4, r0
 800ade6:	e78b      	b.n	800ad00 <ScheduleTx+0x10>
            return status;
 800ade8:	4604      	mov	r4, r0
 800adea:	e789      	b.n	800ad00 <ScheduleTx+0x10>
 800adec:	4604      	mov	r4, r0
 800adee:	e787      	b.n	800ad00 <ScheduleTx+0x10>
 800adf0:	20008000 	.word	0x20008000
 800adf4:	20000814 	.word	0x20000814

0800adf8 <OnTxDelayedTimerEvent>:
{
 800adf8:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 800adfa:	4c16      	ldr	r4, [pc, #88]	; (800ae54 <OnTxDelayedTimerEvent+0x5c>)
 800adfc:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800ae00:	f008 f978 	bl	80130f4 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800ae04:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800ae08:	f023 0320 	bic.w	r3, r3, #32
 800ae0c:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800ae10:	f8d4 149c 	ldr.w	r1, [r4, #1180]	; 0x49c
 800ae14:	4b10      	ldr	r3, [pc, #64]	; (800ae58 <OnTxDelayedTimerEvent+0x60>)
 800ae16:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800ae1a:	f7ff fdeb 	bl	800a9f4 <LoRaMacHandleResponseTimeout>
 800ae1e:	b100      	cbz	r0, 800ae22 <OnTxDelayedTimerEvent+0x2a>
}
 800ae20:	bd10      	pop	{r4, pc}
    switch( ScheduleTx( true ) )
 800ae22:	2001      	movs	r0, #1
 800ae24:	f7ff ff64 	bl	800acf0 <ScheduleTx>
 800ae28:	2800      	cmp	r0, #0
 800ae2a:	d0f9      	beq.n	800ae20 <OnTxDelayedTimerEvent+0x28>
 800ae2c:	280b      	cmp	r0, #11
 800ae2e:	d0f7      	beq.n	800ae20 <OnTxDelayedTimerEvent+0x28>
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800ae30:	4b09      	ldr	r3, [pc, #36]	; (800ae58 <OnTxDelayedTimerEvent+0x60>)
 800ae32:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800ae36:	f884 2446 	strb.w	r2, [r4, #1094]	; 0x446
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800ae3a:	f894 241c 	ldrb.w	r2, [r4, #1052]	; 0x41c
 800ae3e:	f884 2449 	strb.w	r2, [r4, #1097]	; 0x449
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800ae42:	2009      	movs	r0, #9
 800ae44:	f884 0445 	strb.w	r0, [r4, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800ae48:	f002 f93a 	bl	800d0c0 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800ae4c:	f7fe fd40 	bl	80098d0 <StopRetransmission>
            break;
 800ae50:	e7e6      	b.n	800ae20 <OnTxDelayedTimerEvent+0x28>
 800ae52:	bf00      	nop
 800ae54:	20000814 	.word	0x20000814
 800ae58:	20008000 	.word	0x20008000

0800ae5c <LoRaMacHandleMcpsRequest>:
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800ae5c:	4b1c      	ldr	r3, [pc, #112]	; (800aed0 <LoRaMacHandleMcpsRequest+0x74>)
 800ae5e:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800ae62:	f013 0f01 	tst.w	r3, #1
 800ae66:	d032      	beq.n	800aece <LoRaMacHandleMcpsRequest+0x72>
{
 800ae68:	b510      	push	{r4, lr}
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800ae6a:	4b19      	ldr	r3, [pc, #100]	; (800aed0 <LoRaMacHandleMcpsRequest+0x74>)
 800ae6c:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 800ae70:	b12b      	cbz	r3, 800ae7e <LoRaMacHandleMcpsRequest+0x22>
 800ae72:	2b03      	cmp	r3, #3
 800ae74:	d003      	beq.n	800ae7e <LoRaMacHandleMcpsRequest+0x22>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800ae76:	2b01      	cmp	r3, #1
 800ae78:	d006      	beq.n	800ae88 <LoRaMacHandleMcpsRequest+0x2c>
        bool waitForRetransmission = false;
 800ae7a:	2000      	movs	r0, #0
 800ae7c:	e002      	b.n	800ae84 <LoRaMacHandleMcpsRequest+0x28>
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800ae7e:	f7fe fced 	bl	800985c <CheckRetransUnconfirmedUplink>
        if( stopRetransmission == true )
 800ae82:	b940      	cbnz	r0, 800ae96 <LoRaMacHandleMcpsRequest+0x3a>
        else if( waitForRetransmission == false )
 800ae84:	b1b8      	cbz	r0, 800aeb6 <LoRaMacHandleMcpsRequest+0x5a>
}
 800ae86:	bd10      	pop	{r4, pc}
            if( MacCtx.RetransmitTimeoutRetry == true )
 800ae88:	4b11      	ldr	r3, [pc, #68]	; (800aed0 <LoRaMacHandleMcpsRequest+0x74>)
 800ae8a:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
 800ae8e:	b183      	cbz	r3, 800aeb2 <LoRaMacHandleMcpsRequest+0x56>
                stopRetransmission = CheckRetransConfirmedUplink( );
 800ae90:	f7fe fd00 	bl	8009894 <CheckRetransConfirmedUplink>
 800ae94:	e7f5      	b.n	800ae82 <LoRaMacHandleMcpsRequest+0x26>
            TimerStop( &MacCtx.TxDelayedTimer );
 800ae96:	4c0e      	ldr	r4, [pc, #56]	; (800aed0 <LoRaMacHandleMcpsRequest+0x74>)
 800ae98:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800ae9c:	f008 f92a 	bl	80130f4 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800aea0:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800aea4:	f023 0320 	bic.w	r3, r3, #32
 800aea8:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
            StopRetransmission( );
 800aeac:	f7fe fd10 	bl	80098d0 <StopRetransmission>
 800aeb0:	e7e9      	b.n	800ae86 <LoRaMacHandleMcpsRequest+0x2a>
                waitForRetransmission = true;
 800aeb2:	2001      	movs	r0, #1
 800aeb4:	e7e6      	b.n	800ae84 <LoRaMacHandleMcpsRequest+0x28>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800aeb6:	4b06      	ldr	r3, [pc, #24]	; (800aed0 <LoRaMacHandleMcpsRequest+0x74>)
 800aeb8:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800aebc:	f36f 1245 	bfc	r2, #5, #1
 800aec0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
            MacCtx.RetransmitTimeoutRetry = false;
 800aec4:	f883 041d 	strb.w	r0, [r3, #1053]	; 0x41d
            OnTxDelayedTimerEvent( NULL );
 800aec8:	f7ff ff96 	bl	800adf8 <OnTxDelayedTimerEvent>
}
 800aecc:	e7db      	b.n	800ae86 <LoRaMacHandleMcpsRequest+0x2a>
 800aece:	4770      	bx	lr
 800aed0:	20000814 	.word	0x20000814

0800aed4 <LoRaMacHandleRequestEvents>:
{
 800aed4:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState == LORAMAC_IDLE )
 800aed6:	4b22      	ldr	r3, [pc, #136]	; (800af60 <LoRaMacHandleRequestEvents+0x8c>)
 800aed8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800aedc:	bb7b      	cbnz	r3, 800af3e <LoRaMacHandleRequestEvents+0x6a>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800aede:	4b20      	ldr	r3, [pc, #128]	; (800af60 <LoRaMacHandleRequestEvents+0x8c>)
 800aee0:	f893 4495 	ldrb.w	r4, [r3, #1173]	; 0x495
 800aee4:	f014 0501 	ands.w	r5, r4, #1
 800aee8:	d005      	beq.n	800aef6 <LoRaMacHandleRequestEvents+0x22>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800aeea:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800aeee:	f36f 0200 	bfc	r2, #0, #1
 800aef2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800aef6:	4b1a      	ldr	r3, [pc, #104]	; (800af60 <LoRaMacHandleRequestEvents+0x8c>)
 800aef8:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800aefc:	f013 0f04 	tst.w	r3, #4
 800af00:	d006      	beq.n	800af10 <LoRaMacHandleRequestEvents+0x3c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800af02:	4b17      	ldr	r3, [pc, #92]	; (800af60 <LoRaMacHandleRequestEvents+0x8c>)
 800af04:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800af08:	f36f 0282 	bfc	r2, #2, #1
 800af0c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800af10:	2001      	movs	r0, #1
 800af12:	f7fe fbfb 	bl	800970c <LoRaMacEnableRequests>
        if( reqEvents.Bits.McpsReq == 1 )
 800af16:	b135      	cbz	r5, 800af26 <LoRaMacHandleRequestEvents+0x52>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800af18:	4811      	ldr	r0, [pc, #68]	; (800af60 <LoRaMacHandleRequestEvents+0x8c>)
 800af1a:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f200 4044 	addw	r0, r0, #1092	; 0x444
 800af24:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 800af26:	f014 0f04 	tst.w	r4, #4
 800af2a:	d109      	bne.n	800af40 <LoRaMacHandleRequestEvents+0x6c>
        LoRaMacClassBResumeBeaconing( );
 800af2c:	f001 fe7b 	bl	800cc26 <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 800af30:	4b0b      	ldr	r3, [pc, #44]	; (800af60 <LoRaMacHandleRequestEvents+0x8c>)
 800af32:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800af36:	f36f 1245 	bfc	r2, #5, #1
 800af3a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
}
 800af3e:	bd38      	pop	{r3, r4, r5, pc}
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800af40:	4808      	ldr	r0, [pc, #32]	; (800af64 <LoRaMacHandleRequestEvents+0x90>)
 800af42:	f002 f8e7 	bl	800d114 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800af46:	f002 f917 	bl	800d178 <LoRaMacConfirmQueueGetCnt>
 800af4a:	2800      	cmp	r0, #0
 800af4c:	d0ee      	beq.n	800af2c <LoRaMacHandleRequestEvents+0x58>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800af4e:	4a04      	ldr	r2, [pc, #16]	; (800af60 <LoRaMacHandleRequestEvents+0x8c>)
 800af50:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800af54:	f043 0304 	orr.w	r3, r3, #4
 800af58:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
 800af5c:	e7e6      	b.n	800af2c <LoRaMacHandleRequestEvents+0x58>
 800af5e:	bf00      	nop
 800af60:	20000814 	.word	0x20000814
 800af64:	20000c6c 	.word	0x20000c6c

0800af68 <LoRaMacHandleScheduleUplinkEvent>:
    if( MacCtx.MacState == LORAMAC_IDLE )
 800af68:	4b07      	ldr	r3, [pc, #28]	; (800af88 <LoRaMacHandleScheduleUplinkEvent+0x20>)
 800af6a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800af6e:	b103      	cbz	r3, 800af72 <LoRaMacHandleScheduleUplinkEvent+0xa>
 800af70:	4770      	bx	lr
{
 800af72:	b500      	push	{lr}
 800af74:	b083      	sub	sp, #12
        bool isStickyMacCommandPending = false;
 800af76:	f88d 3007 	strb.w	r3, [sp, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800af7a:	f10d 0007 	add.w	r0, sp, #7
 800af7e:	f001 ffab 	bl	800ced8 <LoRaMacCommandsStickyCmdsPending>
}
 800af82:	b003      	add	sp, #12
 800af84:	f85d fb04 	ldr.w	pc, [sp], #4
 800af88:	20000814 	.word	0x20000814

0800af8c <OpenContinuousRxCWindow>:
{
 800af8c:	b570      	push	{r4, r5, r6, lr}
 800af8e:	b082      	sub	sp, #8
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 800af90:	4c16      	ldr	r4, [pc, #88]	; (800afec <OpenContinuousRxCWindow+0x60>)
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800af92:	4d17      	ldr	r5, [pc, #92]	; (800aff0 <OpenContinuousRxCWindow+0x64>)
 800af94:	f505 767a 	add.w	r6, r5, #1000	; 0x3e8
 800af98:	9600      	str	r6, [sp, #0]
 800af9a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800af9c:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800afa0:	f994 1070 	ldrsb.w	r1, [r4, #112]	; 0x70
 800afa4:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800afa8:	f002 fe75 	bl	800dc96 <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800afac:	2302      	movs	r3, #2
 800afae:	f885 33fb 	strb.w	r3, [r5, #1019]	; 0x3fb
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800afb2:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 800afb6:	f885 33fc 	strb.w	r3, [r5, #1020]	; 0x3fc
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800afba:	2301      	movs	r3, #1
 800afbc:	f885 33fa 	strb.w	r3, [r5, #1018]	; 0x3fa
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800afc0:	f505 6285 	add.w	r2, r5, #1064	; 0x428
 800afc4:	4631      	mov	r1, r6
 800afc6:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800afca:	f002 fe78 	bl	800dcbe <RegionRxConfig>
 800afce:	b158      	cbz	r0, 800afe8 <OpenContinuousRxCWindow+0x5c>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800afd0:	f895 3428 	ldrb.w	r3, [r5, #1064]	; 0x428
 800afd4:	f885 346e 	strb.w	r3, [r5, #1134]	; 0x46e
        Radio.Rx( 0 ); // Continuous mode
 800afd8:	4b06      	ldr	r3, [pc, #24]	; (800aff4 <OpenContinuousRxCWindow+0x68>)
 800afda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afdc:	2000      	movs	r0, #0
 800afde:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800afe0:	f895 33fb 	ldrb.w	r3, [r5, #1019]	; 0x3fb
 800afe4:	f885 3494 	strb.w	r3, [r5, #1172]	; 0x494
}
 800afe8:	b002      	add	sp, #8
 800afea:	bd70      	pop	{r4, r5, r6, pc}
 800afec:	20008000 	.word	0x20008000
 800aff0:	20000814 	.word	0x20000814
 800aff4:	08014e54 	.word	0x08014e54

0800aff8 <RxWindowSetup>:
{
 800aff8:	b538      	push	{r3, r4, r5, lr}
 800affa:	460c      	mov	r4, r1
    TimerStop( rxTimer );
 800affc:	f008 f87a 	bl	80130f4 <UTIL_TIMER_Stop>
    Radio.Standby( );
 800b000:	4b0c      	ldr	r3, [pc, #48]	; (800b034 <RxWindowSetup+0x3c>)
 800b002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b004:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800b006:	4a0c      	ldr	r2, [pc, #48]	; (800b038 <RxWindowSetup+0x40>)
 800b008:	4621      	mov	r1, r4
 800b00a:	4b0c      	ldr	r3, [pc, #48]	; (800b03c <RxWindowSetup+0x44>)
 800b00c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b010:	f002 fe55 	bl	800dcbe <RegionRxConfig>
 800b014:	b160      	cbz	r0, 800b030 <RxWindowSetup+0x38>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800b016:	4d0a      	ldr	r5, [pc, #40]	; (800b040 <RxWindowSetup+0x48>)
 800b018:	f895 3428 	ldrb.w	r3, [r5, #1064]	; 0x428
 800b01c:	f885 346e 	strb.w	r3, [r5, #1134]	; 0x46e
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 800b020:	4b04      	ldr	r3, [pc, #16]	; (800b034 <RxWindowSetup+0x3c>)
 800b022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b024:	4a05      	ldr	r2, [pc, #20]	; (800b03c <RxWindowSetup+0x44>)
 800b026:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 800b028:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800b02a:	7ce3      	ldrb	r3, [r4, #19]
 800b02c:	f885 3494 	strb.w	r3, [r5, #1172]	; 0x494
}
 800b030:	bd38      	pop	{r3, r4, r5, pc}
 800b032:	bf00      	nop
 800b034:	08014e54 	.word	0x08014e54
 800b038:	20000c3c 	.word	0x20000c3c
 800b03c:	20008000 	.word	0x20008000
 800b040:	20000814 	.word	0x20000814

0800b044 <OnRxWindow2TimerEvent>:
{
 800b044:	b508      	push	{r3, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800b046:	4b13      	ldr	r3, [pc, #76]	; (800b094 <OnRxWindow2TimerEvent+0x50>)
 800b048:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800b04c:	b903      	cbnz	r3, 800b050 <OnRxWindow2TimerEvent+0xc>
}
 800b04e:	bd08      	pop	{r3, pc}
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800b050:	4810      	ldr	r0, [pc, #64]	; (800b094 <OnRxWindow2TimerEvent+0x50>)
 800b052:	f890 341f 	ldrb.w	r3, [r0, #1055]	; 0x41f
 800b056:	f880 33d0 	strb.w	r3, [r0, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800b05a:	4b0f      	ldr	r3, [pc, #60]	; (800b098 <OnRxWindow2TimerEvent+0x54>)
 800b05c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b05e:	f8c0 23d4 	str.w	r2, [r0, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b062:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800b066:	f880 23e0 	strb.w	r2, [r0, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800b06a:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800b06e:	f880 23e1 	strb.w	r2, [r0, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800b072:	2200      	movs	r2, #0
 800b074:	f880 23e2 	strb.w	r2, [r0, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800b078:	2201      	movs	r2, #1
 800b07a:	f880 23e3 	strb.w	r2, [r0, #995]	; 0x3e3
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800b07e:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800b082:	f880 33e4 	strb.w	r3, [r0, #996]	; 0x3e4
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800b086:	f500 7174 	add.w	r1, r0, #976	; 0x3d0
 800b08a:	f500 7066 	add.w	r0, r0, #920	; 0x398
 800b08e:	f7ff ffb3 	bl	800aff8 <RxWindowSetup>
 800b092:	e7dc      	b.n	800b04e <OnRxWindow2TimerEvent+0xa>
 800b094:	20000814 	.word	0x20000814
 800b098:	20008000 	.word	0x20008000

0800b09c <OnRxWindow1TimerEvent>:
{
 800b09c:	b508      	push	{r3, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800b09e:	4811      	ldr	r0, [pc, #68]	; (800b0e4 <OnRxWindow1TimerEvent+0x48>)
 800b0a0:	f890 341f 	ldrb.w	r3, [r0, #1055]	; 0x41f
 800b0a4:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800b0a8:	4b0f      	ldr	r3, [pc, #60]	; (800b0e8 <OnRxWindow1TimerEvent+0x4c>)
 800b0aa:	f993 2061 	ldrsb.w	r2, [r3, #97]	; 0x61
 800b0ae:	f880 23bb 	strb.w	r2, [r0, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b0b2:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800b0b6:	f880 23c8 	strb.w	r2, [r0, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800b0ba:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800b0be:	f880 23c9 	strb.w	r2, [r0, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	f880 23ca 	strb.w	r2, [r0, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800b0c8:	f880 23cb 	strb.w	r2, [r0, #971]	; 0x3cb
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800b0cc:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800b0d0:	f880 33cc 	strb.w	r3, [r0, #972]	; 0x3cc
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800b0d4:	f500 716e 	add.w	r1, r0, #952	; 0x3b8
 800b0d8:	f500 7060 	add.w	r0, r0, #896	; 0x380
 800b0dc:	f7ff ff8c 	bl	800aff8 <RxWindowSetup>
}
 800b0e0:	bd08      	pop	{r3, pc}
 800b0e2:	bf00      	nop
 800b0e4:	20000814 	.word	0x20000814
 800b0e8:	20008000 	.word	0x20008000

0800b0ec <LoRaMacHandleNvm>:
{
 800b0ec:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_IDLE )
 800b0ee:	4b30      	ldr	r3, [pc, #192]	; (800b1b0 <LoRaMacHandleNvm+0xc4>)
 800b0f0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800b0f4:	b103      	cbz	r3, 800b0f8 <LoRaMacHandleNvm+0xc>
}
 800b0f6:	bd38      	pop	{r3, r4, r5, pc}
 800b0f8:	4604      	mov	r4, r0
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800b0fa:	2124      	movs	r1, #36	; 0x24
 800b0fc:	f005 fe1e 	bl	8010d3c <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 800b100:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b102:	4283      	cmp	r3, r0
 800b104:	d052      	beq.n	800b1ac <LoRaMacHandleNvm+0xc0>
        nvmData->Crypto.Crc32 = crc;
 800b106:	6260      	str	r0, [r4, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800b108:	2501      	movs	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800b10a:	2114      	movs	r1, #20
 800b10c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b110:	f005 fe14 	bl	8010d3c <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 800b114:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b116:	4283      	cmp	r3, r0
 800b118:	d002      	beq.n	800b120 <LoRaMacHandleNvm+0x34>
        nvmData->MacGroup1.Crc32 = crc;
 800b11a:	63e0      	str	r0, [r4, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800b11c:	f045 0502 	orr.w	r5, r5, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800b120:	21e0      	movs	r1, #224	; 0xe0
 800b122:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800b126:	f005 fe09 	bl	8010d3c <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 800b12a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800b12e:	4283      	cmp	r3, r0
 800b130:	d003      	beq.n	800b13a <LoRaMacHandleNvm+0x4e>
        nvmData->MacGroup2.Crc32 = crc;
 800b132:	f8c4 0120 	str.w	r0, [r4, #288]	; 0x120
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800b136:	f045 0504 	orr.w	r5, r5, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800b13a:	21bc      	movs	r1, #188	; 0xbc
 800b13c:	f504 7092 	add.w	r0, r4, #292	; 0x124
 800b140:	f005 fdfc 	bl	8010d3c <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 800b144:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800b148:	4283      	cmp	r3, r0
 800b14a:	d003      	beq.n	800b154 <LoRaMacHandleNvm+0x68>
        nvmData->SecureElement.Crc32 = crc;
 800b14c:	f8c4 01e0 	str.w	r0, [r4, #480]	; 0x1e0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800b150:	f045 0508 	orr.w	r5, r5, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800b154:	2110      	movs	r1, #16
 800b156:	f504 70f2 	add.w	r0, r4, #484	; 0x1e4
 800b15a:	f005 fdef 	bl	8010d3c <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 800b15e:	f8d4 31f4 	ldr.w	r3, [r4, #500]	; 0x1f4
 800b162:	4283      	cmp	r3, r0
 800b164:	d003      	beq.n	800b16e <LoRaMacHandleNvm+0x82>
        nvmData->RegionGroup1.Crc32 = crc;
 800b166:	f8c4 01f4 	str.w	r0, [r4, #500]	; 0x1f4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800b16a:	f045 0510 	orr.w	r5, r5, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800b16e:	f44f 715e 	mov.w	r1, #888	; 0x378
 800b172:	f504 70fc 	add.w	r0, r4, #504	; 0x1f8
 800b176:	f005 fde1 	bl	8010d3c <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 800b17a:	f8d4 3570 	ldr.w	r3, [r4, #1392]	; 0x570
 800b17e:	4283      	cmp	r3, r0
 800b180:	d003      	beq.n	800b18a <LoRaMacHandleNvm+0x9e>
        nvmData->RegionGroup2.Crc32 = crc;
 800b182:	f8c4 0570 	str.w	r0, [r4, #1392]	; 0x570
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800b186:	f045 0520 	orr.w	r5, r5, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800b18a:	2114      	movs	r1, #20
 800b18c:	f204 5074 	addw	r0, r4, #1396	; 0x574
 800b190:	f005 fdd4 	bl	8010d3c <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 800b194:	f8d4 3588 	ldr.w	r3, [r4, #1416]	; 0x588
 800b198:	4283      	cmp	r3, r0
 800b19a:	d003      	beq.n	800b1a4 <LoRaMacHandleNvm+0xb8>
        nvmData->ClassB.Crc32 = crc;
 800b19c:	f8c4 0588 	str.w	r0, [r4, #1416]	; 0x588
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800b1a0:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    CallNvmDataChangeCallback( notifyFlags );
 800b1a4:	4628      	mov	r0, r5
 800b1a6:	f7fe fbbd 	bl	8009924 <CallNvmDataChangeCallback>
 800b1aa:	e7a4      	b.n	800b0f6 <LoRaMacHandleNvm+0xa>
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800b1ac:	2500      	movs	r5, #0
 800b1ae:	e7ac      	b.n	800b10a <LoRaMacHandleNvm+0x1e>
 800b1b0:	20000814 	.word	0x20000814

0800b1b4 <RestoreNvmData>:
{
 800b1b4:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800b1b6:	4b34      	ldr	r3, [pc, #208]	; (800b288 <RestoreNvmData+0xd4>)
 800b1b8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800b1bc:	2b01      	cmp	r3, #1
 800b1be:	d001      	beq.n	800b1c4 <RestoreNvmData+0x10>
        return LORAMAC_STATUS_BUSY;
 800b1c0:	2001      	movs	r0, #1
}
 800b1c2:	bd38      	pop	{r3, r4, r5, pc}
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 800b1c4:	4c31      	ldr	r4, [pc, #196]	; (800b28c <RestoreNvmData+0xd8>)
 800b1c6:	2124      	movs	r1, #36	; 0x24
 800b1c8:	4620      	mov	r0, r4
 800b1ca:	f005 fdb7 	bl	8010d3c <Crc32>
    if( crc != NvmBackup.Crypto.Crc32 )
 800b1ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1d0:	4283      	cmp	r3, r0
 800b1d2:	d001      	beq.n	800b1d8 <RestoreNvmData+0x24>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800b1d4:	2017      	movs	r0, #23
 800b1d6:	e7f4      	b.n	800b1c2 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 800b1d8:	2114      	movs	r1, #20
 800b1da:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b1de:	f005 fdad 	bl	8010d3c <Crc32>
    if( crc != NvmBackup.MacGroup1.Crc32 )
 800b1e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b1e4:	4283      	cmp	r3, r0
 800b1e6:	d001      	beq.n	800b1ec <RestoreNvmData+0x38>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800b1e8:	2017      	movs	r0, #23
 800b1ea:	e7ea      	b.n	800b1c2 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 800b1ec:	21e0      	movs	r1, #224	; 0xe0
 800b1ee:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800b1f2:	f005 fda3 	bl	8010d3c <Crc32>
    if( crc != NvmBackup.MacGroup2.Crc32 )
 800b1f6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800b1fa:	4283      	cmp	r3, r0
 800b1fc:	d001      	beq.n	800b202 <RestoreNvmData+0x4e>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800b1fe:	2017      	movs	r0, #23
 800b200:	e7df      	b.n	800b1c2 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 800b202:	21bc      	movs	r1, #188	; 0xbc
 800b204:	f504 7092 	add.w	r0, r4, #292	; 0x124
 800b208:	f005 fd98 	bl	8010d3c <Crc32>
    if( crc != NvmBackup.SecureElement.Crc32 )
 800b20c:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800b210:	4283      	cmp	r3, r0
 800b212:	d001      	beq.n	800b218 <RestoreNvmData+0x64>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800b214:	2017      	movs	r0, #23
 800b216:	e7d4      	b.n	800b1c2 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 800b218:	2110      	movs	r1, #16
 800b21a:	f504 70f2 	add.w	r0, r4, #484	; 0x1e4
 800b21e:	f005 fd8d 	bl	8010d3c <Crc32>
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 800b222:	f8d4 31f4 	ldr.w	r3, [r4, #500]	; 0x1f4
 800b226:	4283      	cmp	r3, r0
 800b228:	d001      	beq.n	800b22e <RestoreNvmData+0x7a>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800b22a:	2017      	movs	r0, #23
 800b22c:	e7c9      	b.n	800b1c2 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 800b22e:	2114      	movs	r1, #20
 800b230:	f204 5074 	addw	r0, r4, #1396	; 0x574
 800b234:	f005 fd82 	bl	8010d3c <Crc32>
    if( crc != NvmBackup.ClassB.Crc32 )
 800b238:	f8d4 3588 	ldr.w	r3, [r4, #1416]	; 0x588
 800b23c:	4283      	cmp	r3, r0
 800b23e:	d001      	beq.n	800b244 <RestoreNvmData+0x90>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800b240:	2017      	movs	r0, #23
 800b242:	e7be      	b.n	800b1c2 <RestoreNvmData+0xe>
    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 800b244:	4625      	mov	r5, r4
 800b246:	4c12      	ldr	r4, [pc, #72]	; (800b290 <RestoreNvmData+0xdc>)
 800b248:	f240 528c 	movw	r2, #1420	; 0x58c
 800b24c:	4629      	mov	r1, r5
 800b24e:	4620      	mov	r0, r4
 800b250:	f005 fd53 	bl	8010cfa <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 800b254:	f240 528c 	movw	r2, #1420	; 0x58c
 800b258:	2100      	movs	r1, #0
 800b25a:	4628      	mov	r0, r5
 800b25c:	f005 fd65 	bl	8010d2a <memset1>
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800b260:	4b09      	ldr	r3, [pc, #36]	; (800b288 <RestoreNvmData+0xd4>)
 800b262:	f893 241f 	ldrb.w	r2, [r3, #1055]	; 0x41f
 800b266:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800b26a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800b26c:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b270:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
 800b274:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800b278:	2201      	movs	r2, #1
 800b27a:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800b27e:	2202      	movs	r2, #2
 800b280:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
    return LORAMAC_STATUS_OK;
 800b284:	2000      	movs	r0, #0
 800b286:	e79c      	b.n	800b1c2 <RestoreNvmData+0xe>
 800b288:	20000814 	.word	0x20000814
 800b28c:	2000858c 	.word	0x2000858c
 800b290:	20008000 	.word	0x20008000

0800b294 <OnRadioRxTimeout>:
{
 800b294:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800b296:	4a09      	ldr	r2, [pc, #36]	; (800b2bc <OnRadioRxTimeout+0x28>)
 800b298:	7813      	ldrb	r3, [r2, #0]
 800b29a:	f043 0302 	orr.w	r3, r3, #2
 800b29e:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800b2a0:	4b07      	ldr	r3, [pc, #28]	; (800b2c0 <OnRadioRxTimeout+0x2c>)
 800b2a2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800b2a6:	b113      	cbz	r3, 800b2ae <OnRadioRxTimeout+0x1a>
 800b2a8:	691b      	ldr	r3, [r3, #16]
 800b2aa:	b103      	cbz	r3, 800b2ae <OnRadioRxTimeout+0x1a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800b2ac:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800b2ae:	4b05      	ldr	r3, [pc, #20]	; (800b2c4 <OnRadioRxTimeout+0x30>)
 800b2b0:	2201      	movs	r2, #1
 800b2b2:	2100      	movs	r1, #0
 800b2b4:	2002      	movs	r0, #2
 800b2b6:	f007 fbc9 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
}
 800b2ba:	bd08      	pop	{r3, pc}
 800b2bc:	20000810 	.word	0x20000810
 800b2c0:	20000814 	.word	0x20000814
 800b2c4:	08014764 	.word	0x08014764

0800b2c8 <OnRadioTxTimeout>:
{
 800b2c8:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800b2ca:	4a09      	ldr	r2, [pc, #36]	; (800b2f0 <OnRadioTxTimeout+0x28>)
 800b2cc:	7813      	ldrb	r3, [r2, #0]
 800b2ce:	f043 0308 	orr.w	r3, r3, #8
 800b2d2:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800b2d4:	4b07      	ldr	r3, [pc, #28]	; (800b2f4 <OnRadioTxTimeout+0x2c>)
 800b2d6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800b2da:	b113      	cbz	r3, 800b2e2 <OnRadioTxTimeout+0x1a>
 800b2dc:	691b      	ldr	r3, [r3, #16]
 800b2de:	b103      	cbz	r3, 800b2e2 <OnRadioTxTimeout+0x1a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800b2e0:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800b2e2:	4b05      	ldr	r3, [pc, #20]	; (800b2f8 <OnRadioTxTimeout+0x30>)
 800b2e4:	2201      	movs	r2, #1
 800b2e6:	2100      	movs	r1, #0
 800b2e8:	2002      	movs	r0, #2
 800b2ea:	f007 fbaf 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
}
 800b2ee:	bd08      	pop	{r3, pc}
 800b2f0:	20000810 	.word	0x20000810
 800b2f4:	20000814 	.word	0x20000814
 800b2f8:	08014774 	.word	0x08014774

0800b2fc <OnRadioRxDone>:
{
 800b2fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b300:	4680      	mov	r8, r0
 800b302:	460f      	mov	r7, r1
 800b304:	4616      	mov	r6, r2
 800b306:	461d      	mov	r5, r3
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800b308:	f007 feb4 	bl	8013074 <UTIL_TIMER_GetCurrentTime>
 800b30c:	4c0f      	ldr	r4, [pc, #60]	; (800b34c <OnRadioRxDone+0x50>)
 800b30e:	6020      	str	r0, [r4, #0]
    RxDoneParams.Payload = payload;
 800b310:	f8c4 8004 	str.w	r8, [r4, #4]
    RxDoneParams.Size = size;
 800b314:	8127      	strh	r7, [r4, #8]
    RxDoneParams.Rssi = rssi;
 800b316:	8166      	strh	r6, [r4, #10]
    RxDoneParams.Snr = snr;
 800b318:	7325      	strb	r5, [r4, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 800b31a:	4b0d      	ldr	r3, [pc, #52]	; (800b350 <OnRadioRxDone+0x54>)
 800b31c:	781a      	ldrb	r2, [r3, #0]
 800b31e:	f042 0210 	orr.w	r2, r2, #16
 800b322:	701a      	strb	r2, [r3, #0]
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800b324:	b2d2      	uxtb	r2, r2
 800b326:	f042 0201 	orr.w	r2, r2, #1
 800b32a:	701a      	strb	r2, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800b32c:	4b09      	ldr	r3, [pc, #36]	; (800b354 <OnRadioRxDone+0x58>)
 800b32e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800b332:	b113      	cbz	r3, 800b33a <OnRadioRxDone+0x3e>
 800b334:	691b      	ldr	r3, [r3, #16]
 800b336:	b103      	cbz	r3, 800b33a <OnRadioRxDone+0x3e>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800b338:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800b33a:	4b07      	ldr	r3, [pc, #28]	; (800b358 <OnRadioRxDone+0x5c>)
 800b33c:	2201      	movs	r2, #1
 800b33e:	2100      	movs	r1, #0
 800b340:	2002      	movs	r0, #2
 800b342:	f007 fb83 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
}
 800b346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b34a:	bf00      	nop
 800b34c:	20000dc4 	.word	0x20000dc4
 800b350:	20000810 	.word	0x20000810
 800b354:	20000814 	.word	0x20000814
 800b358:	08014784 	.word	0x08014784

0800b35c <OnRadioTxDone>:
{
 800b35c:	b530      	push	{r4, r5, lr}
 800b35e:	b083      	sub	sp, #12
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800b360:	f007 fe88 	bl	8013074 <UTIL_TIMER_GetCurrentTime>
 800b364:	4b0f      	ldr	r3, [pc, #60]	; (800b3a4 <OnRadioTxDone+0x48>)
 800b366:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800b368:	4d0f      	ldr	r5, [pc, #60]	; (800b3a8 <OnRadioTxDone+0x4c>)
 800b36a:	466c      	mov	r4, sp
 800b36c:	4620      	mov	r0, r4
 800b36e:	f007 fdd3 	bl	8012f18 <SysTimeGet>
 800b372:	f505 734e 	add.w	r3, r5, #824	; 0x338
 800b376:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b37a:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 800b37e:	4a0b      	ldr	r2, [pc, #44]	; (800b3ac <OnRadioTxDone+0x50>)
 800b380:	7813      	ldrb	r3, [r2, #0]
 800b382:	f043 0320 	orr.w	r3, r3, #32
 800b386:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800b388:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
 800b38c:	b113      	cbz	r3, 800b394 <OnRadioTxDone+0x38>
 800b38e:	691b      	ldr	r3, [r3, #16]
 800b390:	b103      	cbz	r3, 800b394 <OnRadioTxDone+0x38>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800b392:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800b394:	4b06      	ldr	r3, [pc, #24]	; (800b3b0 <OnRadioTxDone+0x54>)
 800b396:	2201      	movs	r2, #1
 800b398:	2100      	movs	r1, #0
 800b39a:	2002      	movs	r0, #2
 800b39c:	f007 fb56 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
}
 800b3a0:	b003      	add	sp, #12
 800b3a2:	bd30      	pop	{r4, r5, pc}
 800b3a4:	20000dd4 	.word	0x20000dd4
 800b3a8:	20000814 	.word	0x20000814
 800b3ac:	20000810 	.word	0x20000810
 800b3b0:	08014794 	.word	0x08014794

0800b3b4 <ResetMacParameters>:
{
 800b3b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3b6:	b091      	sub	sp, #68	; 0x44
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800b3b8:	4c53      	ldr	r4, [pc, #332]	; (800b508 <ResetMacParameters+0x154>)
 800b3ba:	2600      	movs	r6, #0
 800b3bc:	f884 611c 	strb.w	r6, [r4, #284]	; 0x11c
    Nvm.MacGroup1.AdrAckCounter = 0;
 800b3c0:	62a6      	str	r6, [r4, #40]	; 0x28
    MacCtx.ChannelsNbTransCounter = 0;
 800b3c2:	4d52      	ldr	r5, [pc, #328]	; (800b50c <ResetMacParameters+0x158>)
 800b3c4:	f885 641c 	strb.w	r6, [r5, #1052]	; 0x41c
    MacCtx.RetransmitTimeoutRetry = false;
 800b3c8:	f885 641d 	strb.w	r6, [r5, #1053]	; 0x41d
    MacCtx.ResponseTimeoutStartTime = 0;
 800b3cc:	f8c5 649c 	str.w	r6, [r5, #1180]	; 0x49c
    Nvm.MacGroup2.MaxDCycle = 0;
 800b3d0:	f884 6107 	strb.w	r6, [r4, #263]	; 0x107
    Nvm.MacGroup2.AggregatedDCycle = 1;
 800b3d4:	2701      	movs	r7, #1
 800b3d6:	f8a4 710c 	strh.w	r7, [r4, #268]	; 0x10c
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800b3da:	f994 30cc 	ldrsb.w	r3, [r4, #204]	; 0xcc
 800b3de:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800b3e2:	f994 30cd 	ldrsb.w	r3, [r4, #205]	; 0xcd
 800b3e6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800b3ea:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 800b3ee:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800b3f2:	f104 0364 	add.w	r3, r4, #100	; 0x64
 800b3f6:	f104 02a8 	add.w	r2, r4, #168	; 0xa8
 800b3fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b3fe:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800b402:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 800b406:	f104 02b0 	add.w	r2, r4, #176	; 0xb0
 800b40a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b40e:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800b412:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
 800b416:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800b41a:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 800b41e:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800b422:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 800b426:	67a3      	str	r3, [r4, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800b428:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 800b42c:	67e3      	str	r3, [r4, #124]	; 0x7c
    MacCtx.NodeAckRequested = false;
 800b42e:	f885 641e 	strb.w	r6, [r5, #1054]	; 0x41e
    Nvm.MacGroup1.SrvAckRequested = false;
 800b432:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800b436:	f884 6109 	strb.w	r6, [r4, #265]	; 0x109
    Nvm.MacGroup2.DownlinkReceived = false;
 800b43a:	f884 610a 	strb.w	r6, [r4, #266]	; 0x10a
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800b43e:	f88d 7010 	strb.w	r7, [sp, #16]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800b442:	f504 73f2 	add.w	r3, r4, #484	; 0x1e4
 800b446:	9301      	str	r3, [sp, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800b448:	f504 73fc 	add.w	r3, r4, #504	; 0x1f8
 800b44c:	9302      	str	r3, [sp, #8]
    params.Bands = &RegionBands;
 800b44e:	4b30      	ldr	r3, [pc, #192]	; (800b510 <ResetMacParameters+0x15c>)
 800b450:	9303      	str	r3, [sp, #12]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800b452:	a901      	add	r1, sp, #4
 800b454:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b458:	f002 fbe2 	bl	800dc20 <RegionInitDefaults>
    MacCtx.Channel = 0;
 800b45c:	f885 641f 	strb.w	r6, [r5, #1055]	; 0x41f
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800b460:	f885 63d0 	strb.w	r6, [r5, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800b464:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b466:	f8c5 33d4 	str.w	r3, [r5, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b46a:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800b46e:	f885 33e0 	strb.w	r3, [r5, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800b472:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 800b476:	f885 33e1 	strb.w	r3, [r5, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800b47a:	f885 63e2 	strb.w	r6, [r5, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800b47e:	f885 73e3 	strb.w	r7, [r5, #995]	; 0x3e3
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800b482:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 800b486:	f885 33e4 	strb.w	r3, [r5, #996]	; 0x3e4
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800b48a:	f505 747a 	add.w	r4, r5, #1000	; 0x3e8
 800b48e:	f505 7c74 	add.w	ip, r5, #976	; 0x3d0
 800b492:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b496:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b498:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800b49c:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800b4a0:	f885 73fa 	strb.w	r7, [r5, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800b4a4:	2302      	movs	r3, #2
 800b4a6:	f885 33fb 	strb.w	r3, [r5, #1019]	; 0x3fb
    classBCallbacks.GetTemperatureLevel = NULL;
 800b4aa:	960e      	str	r6, [sp, #56]	; 0x38
    classBCallbacks.MacProcessNotify = NULL;
 800b4ac:	960f      	str	r6, [sp, #60]	; 0x3c
    if( MacCtx.MacCallbacks != NULL )
 800b4ae:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
 800b4b2:	b11b      	cbz	r3, 800b4bc <ResetMacParameters+0x108>
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800b4b4:	685a      	ldr	r2, [r3, #4]
 800b4b6:	920e      	str	r2, [sp, #56]	; 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800b4b8:	691b      	ldr	r3, [r3, #16]
 800b4ba:	930f      	str	r3, [sp, #60]	; 0x3c
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800b4bc:	4b13      	ldr	r3, [pc, #76]	; (800b50c <ResetMacParameters+0x158>)
 800b4be:	f203 426c 	addw	r2, r3, #1132	; 0x46c
 800b4c2:	9205      	str	r2, [sp, #20]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800b4c4:	f203 4224 	addw	r2, r3, #1060	; 0x424
 800b4c8:	9206      	str	r2, [sp, #24]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800b4ca:	f503 628b 	add.w	r2, r3, #1112	; 0x458
 800b4ce:	9207      	str	r2, [sp, #28]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800b4d0:	f203 4395 	addw	r3, r3, #1173	; 0x495
 800b4d4:	9308      	str	r3, [sp, #32]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800b4d6:	4a0c      	ldr	r2, [pc, #48]	; (800b508 <ResetMacParameters+0x154>)
 800b4d8:	f102 03d4 	add.w	r3, r2, #212	; 0xd4
 800b4dc:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800b4de:	f102 0340 	add.w	r3, r2, #64	; 0x40
 800b4e2:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800b4e4:	f102 0344 	add.w	r3, r2, #68	; 0x44
 800b4e8:	930b      	str	r3, [sp, #44]	; 0x2c
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800b4ea:	f102 03d8 	add.w	r3, r2, #216	; 0xd8
 800b4ee:	930c      	str	r3, [sp, #48]	; 0x30
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 800b4f0:	f502 738e 	add.w	r3, r2, #284	; 0x11c
 800b4f4:	930d      	str	r3, [sp, #52]	; 0x34
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800b4f6:	f202 5274 	addw	r2, r2, #1396	; 0x574
 800b4fa:	a90e      	add	r1, sp, #56	; 0x38
 800b4fc:	a805      	add	r0, sp, #20
 800b4fe:	f001 fb7d 	bl	800cbfc <LoRaMacClassBInit>
}
 800b502:	b011      	add	sp, #68	; 0x44
 800b504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b506:	bf00      	nop
 800b508:	20008000 	.word	0x20008000
 800b50c:	20000814 	.word	0x20000814
 800b510:	20000d34 	.word	0x20000d34

0800b514 <SwitchClass>:
{
 800b514:	b570      	push	{r4, r5, r6, lr}
 800b516:	4604      	mov	r4, r0
    switch( Nvm.MacGroup2.DeviceClass )
 800b518:	4b3e      	ldr	r3, [pc, #248]	; (800b614 <SwitchClass+0x100>)
 800b51a:	f893 5104 	ldrb.w	r5, [r3, #260]	; 0x104
 800b51e:	2d01      	cmp	r5, #1
 800b520:	d065      	beq.n	800b5ee <SwitchClass+0xda>
 800b522:	2d02      	cmp	r5, #2
 800b524:	d06b      	beq.n	800b5fe <SwitchClass+0xea>
 800b526:	b10d      	cbz	r5, 800b52c <SwitchClass+0x18>
 800b528:	2003      	movs	r0, #3
}
 800b52a:	bd70      	pop	{r4, r5, r6, pc}
            if( deviceClass == CLASS_A )
 800b52c:	b930      	cbnz	r0, 800b53c <SwitchClass+0x28>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800b52e:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800b532:	3364      	adds	r3, #100	; 0x64
 800b534:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b538:	e882 0003 	stmia.w	r2, {r0, r1}
            if( deviceClass == CLASS_B )
 800b53c:	2c01      	cmp	r4, #1
 800b53e:	d022      	beq.n	800b586 <SwitchClass+0x72>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b540:	2003      	movs	r0, #3
            if( deviceClass == CLASS_C )
 800b542:	2c02      	cmp	r4, #2
 800b544:	d1f1      	bne.n	800b52a <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800b546:	4b33      	ldr	r3, [pc, #204]	; (800b614 <SwitchClass+0x100>)
 800b548:	f883 4104 	strb.w	r4, [r3, #260]	; 0x104
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800b54c:	4e32      	ldr	r6, [pc, #200]	; (800b618 <SwitchClass+0x104>)
 800b54e:	f506 747a 	add.w	r4, r6, #1000	; 0x3e8
 800b552:	f506 7c74 	add.w	ip, r6, #976	; 0x3d0
 800b556:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b55a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b55c:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800b560:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800b564:	2302      	movs	r3, #2
 800b566:	f886 33fb 	strb.w	r3, [r6, #1019]	; 0x3fb
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800b56a:	2300      	movs	r3, #0
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	dd13      	ble.n	800b598 <SwitchClass+0x84>
                MacCtx.NodeAckRequested = false;
 800b570:	4b29      	ldr	r3, [pc, #164]	; (800b618 <SwitchClass+0x104>)
 800b572:	2200      	movs	r2, #0
 800b574:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
                Radio.Sleep( );
 800b578:	4b28      	ldr	r3, [pc, #160]	; (800b61c <SwitchClass+0x108>)
 800b57a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b57c:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 800b57e:	f7ff fd05 	bl	800af8c <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 800b582:	4628      	mov	r0, r5
 800b584:	e7d1      	b.n	800b52a <SwitchClass+0x16>
                status = LoRaMacClassBSwitchClass( deviceClass );
 800b586:	4620      	mov	r0, r4
 800b588:	f001 fb4e 	bl	800cc28 <LoRaMacClassBSwitchClass>
                if( status == LORAMAC_STATUS_OK )
 800b58c:	2800      	cmp	r0, #0
 800b58e:	d1d8      	bne.n	800b542 <SwitchClass+0x2e>
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800b590:	4b20      	ldr	r3, [pc, #128]	; (800b614 <SwitchClass+0x100>)
 800b592:	f883 4104 	strb.w	r4, [r3, #260]	; 0x104
 800b596:	e7d4      	b.n	800b542 <SwitchClass+0x2e>
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800b598:	4618      	mov	r0, r3
 800b59a:	4a1e      	ldr	r2, [pc, #120]	; (800b614 <SwitchClass+0x100>)
 800b59c:	212c      	movs	r1, #44	; 0x2c
 800b59e:	fb01 2203 	mla	r2, r1, r3, r2
 800b5a2:	f892 20da 	ldrb.w	r2, [r2, #218]	; 0xda
 800b5a6:	b912      	cbnz	r2, 800b5ae <SwitchClass+0x9a>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800b5a8:	3301      	adds	r3, #1
 800b5aa:	b25b      	sxtb	r3, r3
 800b5ac:	e7de      	b.n	800b56c <SwitchClass+0x58>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800b5ae:	4a19      	ldr	r2, [pc, #100]	; (800b614 <SwitchClass+0x100>)
 800b5b0:	fb01 2000 	mla	r0, r1, r0, r2
 800b5b4:	f8d0 10f0 	ldr.w	r1, [r0, #240]	; 0xf0
 800b5b8:	66d1      	str	r1, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800b5ba:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
 800b5be:	f882 3070 	strb.w	r3, [r2, #112]	; 0x70
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800b5c2:	4b15      	ldr	r3, [pc, #84]	; (800b618 <SwitchClass+0x104>)
 800b5c4:	f893 041f 	ldrb.w	r0, [r3, #1055]	; 0x41f
 800b5c8:	f883 03e8 	strb.w	r0, [r3, #1000]	; 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800b5cc:	f8c3 13ec 	str.w	r1, [r3, #1004]	; 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b5d0:	f892 1075 	ldrb.w	r1, [r2, #117]	; 0x75
 800b5d4:	f883 13f8 	strb.w	r1, [r3, #1016]	; 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800b5d8:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 800b5dc:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800b5e0:	2203      	movs	r2, #3
 800b5e2:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800b5e6:	2201      	movs	r2, #1
 800b5e8:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
                        break;
 800b5ec:	e7c0      	b.n	800b570 <SwitchClass+0x5c>
            status = LoRaMacClassBSwitchClass( deviceClass );
 800b5ee:	f001 fb1b 	bl	800cc28 <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 800b5f2:	2800      	cmp	r0, #0
 800b5f4:	d199      	bne.n	800b52a <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800b5f6:	4b07      	ldr	r3, [pc, #28]	; (800b614 <SwitchClass+0x100>)
 800b5f8:	f883 4104 	strb.w	r4, [r3, #260]	; 0x104
 800b5fc:	e795      	b.n	800b52a <SwitchClass+0x16>
            if( deviceClass == CLASS_A )
 800b5fe:	b938      	cbnz	r0, 800b610 <SwitchClass+0xfc>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800b600:	4b04      	ldr	r3, [pc, #16]	; (800b614 <SwitchClass+0x100>)
 800b602:	f883 0104 	strb.w	r0, [r3, #260]	; 0x104
                Radio.Sleep( );
 800b606:	4b05      	ldr	r3, [pc, #20]	; (800b61c <SwitchClass+0x108>)
 800b608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b60a:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 800b60c:	4620      	mov	r0, r4
 800b60e:	e78c      	b.n	800b52a <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b610:	2003      	movs	r0, #3
 800b612:	e78a      	b.n	800b52a <SwitchClass+0x16>
 800b614:	20008000 	.word	0x20008000
 800b618:	20000814 	.word	0x20000814
 800b61c:	08014e54 	.word	0x08014e54

0800b620 <SendReJoinReq>:
{
 800b620:	b538      	push	{r3, r4, r5, lr}
    switch( joinReqType )
 800b622:	28ff      	cmp	r0, #255	; 0xff
 800b624:	d003      	beq.n	800b62e <SendReJoinReq+0xe>
    bool allowDelayedTx = true;
 800b626:	2001      	movs	r0, #1
    status = ScheduleTx( allowDelayedTx );
 800b628:	f7ff fb62 	bl	800acf0 <ScheduleTx>
}
 800b62c:	bd38      	pop	{r3, r4, r5, pc}
            SwitchClass( CLASS_A );
 800b62e:	2000      	movs	r0, #0
 800b630:	f7ff ff70 	bl	800b514 <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800b634:	4d0e      	ldr	r5, [pc, #56]	; (800b670 <SendReJoinReq+0x50>)
 800b636:	2400      	movs	r4, #0
 800b638:	f885 4104 	strb.w	r4, [r5, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800b63c:	1cab      	adds	r3, r5, #2
 800b63e:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800b642:	23ff      	movs	r3, #255	; 0xff
 800b644:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800b648:	f885 410d 	strb.w	r4, [r5, #269]	; 0x10d
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 800b64c:	f005 fb24 	bl	8010c98 <SecureElementGetJoinEui>
 800b650:	4601      	mov	r1, r0
 800b652:	2208      	movs	r2, #8
 800b654:	f505 7087 	add.w	r0, r5, #270	; 0x10e
 800b658:	f005 fb4f 	bl	8010cfa <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 800b65c:	f005 fb06 	bl	8010c6c <SecureElementGetDevEui>
 800b660:	4601      	mov	r1, r0
 800b662:	2208      	movs	r2, #8
 800b664:	f505 708b 	add.w	r0, r5, #278	; 0x116
 800b668:	f005 fb47 	bl	8010cfa <memcpy1>
            allowDelayedTx = false;
 800b66c:	4620      	mov	r0, r4
            break;
 800b66e:	e7db      	b.n	800b628 <SendReJoinReq+0x8>
 800b670:	20000814 	.word	0x20000814

0800b674 <PrepareFrame>:
{
 800b674:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b678:	b083      	sub	sp, #12
 800b67a:	4605      	mov	r5, r0
 800b67c:	460e      	mov	r6, r1
 800b67e:	4617      	mov	r7, r2
 800b680:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    MacCtx.PktBufferLen = 0;
 800b684:	4959      	ldr	r1, [pc, #356]	; (800b7ec <PrepareFrame+0x178>)
 800b686:	2200      	movs	r2, #0
 800b688:	800a      	strh	r2, [r1, #0]
    MacCtx.NodeAckRequested = false;
 800b68a:	f881 241e 	strb.w	r2, [r1, #1054]	; 0x41e
    uint32_t fCntUp = 0;
 800b68e:	9201      	str	r2, [sp, #4]
    size_t macCmdsSize = 0;
 800b690:	9200      	str	r2, [sp, #0]
    if( fBuffer == NULL )
 800b692:	4698      	mov	r8, r3
 800b694:	b1cb      	cbz	r3, 800b6ca <PrepareFrame+0x56>
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800b696:	f8df 9154 	ldr.w	r9, [pc, #340]	; 800b7ec <PrepareFrame+0x178>
 800b69a:	4622      	mov	r2, r4
 800b69c:	4641      	mov	r1, r8
 800b69e:	f509 709c 	add.w	r0, r9, #312	; 0x138
 800b6a2:	f005 fb2a 	bl	8010cfa <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800b6a6:	b2e0      	uxtb	r0, r4
 800b6a8:	f889 0237 	strb.w	r0, [r9, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 800b6ac:	782b      	ldrb	r3, [r5, #0]
 800b6ae:	f889 3002 	strb.w	r3, [r9, #2]
    switch( macHdr->Bits.MType )
 800b6b2:	782b      	ldrb	r3, [r5, #0]
 800b6b4:	095b      	lsrs	r3, r3, #5
 800b6b6:	2b04      	cmp	r3, #4
 800b6b8:	d009      	beq.n	800b6ce <PrepareFrame+0x5a>
 800b6ba:	2b07      	cmp	r3, #7
 800b6bc:	d079      	beq.n	800b7b2 <PrepareFrame+0x13e>
 800b6be:	2b02      	cmp	r3, #2
 800b6c0:	d009      	beq.n	800b6d6 <PrepareFrame+0x62>
 800b6c2:	2002      	movs	r0, #2
}
 800b6c4:	b003      	add	sp, #12
 800b6c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        fBufferSize = 0;
 800b6ca:	4614      	mov	r4, r2
 800b6cc:	e7e3      	b.n	800b696 <PrepareFrame+0x22>
            MacCtx.NodeAckRequested = true;
 800b6ce:	4b47      	ldr	r3, [pc, #284]	; (800b7ec <PrepareFrame+0x178>)
 800b6d0:	2201      	movs	r2, #1
 800b6d2:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800b6d6:	4b45      	ldr	r3, [pc, #276]	; (800b7ec <PrepareFrame+0x178>)
 800b6d8:	2204      	movs	r2, #4
 800b6da:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800b6de:	1c9a      	adds	r2, r3, #2
 800b6e0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800b6e4:	22ff      	movs	r2, #255	; 0xff
 800b6e6:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800b6ea:	782a      	ldrb	r2, [r5, #0]
 800b6ec:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800b6f0:	f883 7128 	strb.w	r7, [r3, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800b6f4:	4a3e      	ldr	r2, [pc, #248]	; (800b7f0 <PrepareFrame+0x17c>)
 800b6f6:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
 800b6fa:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800b6fe:	7832      	ldrb	r2, [r6, #0]
 800b700:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800b704:	f883 0130 	strb.w	r0, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800b708:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800b70c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800b710:	a801      	add	r0, sp, #4
 800b712:	f001 ff09 	bl	800d528 <LoRaMacCryptoGetFCntUp>
 800b716:	2800      	cmp	r0, #0
 800b718:	d15c      	bne.n	800b7d4 <PrepareFrame+0x160>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800b71a:	9a01      	ldr	r2, [sp, #4]
 800b71c:	4b33      	ldr	r3, [pc, #204]	; (800b7ec <PrepareFrame+0x178>)
 800b71e:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
            MacCtx.McpsConfirm.NbTrans = 0;
 800b722:	2100      	movs	r1, #0
 800b724:	f883 1449 	strb.w	r1, [r3, #1097]	; 0x449
            MacCtx.McpsConfirm.AckReceived = false;
 800b728:	f883 1448 	strb.w	r1, [r3, #1096]	; 0x448
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800b72c:	f8c3 2450 	str.w	r2, [r3, #1104]	; 0x450
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800b730:	4668      	mov	r0, sp
 800b732:	f001 fb93 	bl	800ce5c <LoRaMacCommandsGetSizeSerializedCmds>
 800b736:	2800      	cmp	r0, #0
 800b738:	d14e      	bne.n	800b7d8 <PrepareFrame+0x164>
            if( macCmdsSize > 0 )
 800b73a:	9b00      	ldr	r3, [sp, #0]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d0c1      	beq.n	800b6c4 <PrepareFrame+0x50>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 800b740:	4b2b      	ldr	r3, [pc, #172]	; (800b7f0 <PrepareFrame+0x17c>)
 800b742:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 800b746:	f7fe f905 	bl	8009954 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800b74a:	4b28      	ldr	r3, [pc, #160]	; (800b7ec <PrepareFrame+0x178>)
 800b74c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800b750:	b113      	cbz	r3, 800b758 <PrepareFrame+0xe4>
 800b752:	9a00      	ldr	r2, [sp, #0]
 800b754:	2a0f      	cmp	r2, #15
 800b756:	d915      	bls.n	800b784 <PrepareFrame+0x110>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800b758:	b113      	cbz	r3, 800b760 <PrepareFrame+0xec>
 800b75a:	9b00      	ldr	r3, [sp, #0]
 800b75c:	2b0f      	cmp	r3, #15
 800b75e:	d821      	bhi.n	800b7a4 <PrepareFrame+0x130>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800b760:	4a24      	ldr	r2, [pc, #144]	; (800b7f4 <PrepareFrame+0x180>)
 800b762:	4669      	mov	r1, sp
 800b764:	f001 fb86 	bl	800ce74 <LoRaMacCommandsSerializeCmds>
 800b768:	2800      	cmp	r0, #0
 800b76a:	d13b      	bne.n	800b7e4 <PrepareFrame+0x170>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800b76c:	4b1f      	ldr	r3, [pc, #124]	; (800b7ec <PrepareFrame+0x178>)
 800b76e:	2200      	movs	r2, #0
 800b770:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 800b774:	f503 6294 	add.w	r2, r3, #1184	; 0x4a0
 800b778:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800b77c:	9a00      	ldr	r2, [sp, #0]
 800b77e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 800b782:	e79f      	b.n	800b6c4 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800b784:	4a1c      	ldr	r2, [pc, #112]	; (800b7f8 <PrepareFrame+0x184>)
 800b786:	4669      	mov	r1, sp
 800b788:	200f      	movs	r0, #15
 800b78a:	f001 fb73 	bl	800ce74 <LoRaMacCommandsSerializeCmds>
 800b78e:	bb28      	cbnz	r0, 800b7dc <PrepareFrame+0x168>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800b790:	7833      	ldrb	r3, [r6, #0]
 800b792:	9a00      	ldr	r2, [sp, #0]
 800b794:	f362 0303 	bfi	r3, r2, #0, #4
 800b798:	7033      	strb	r3, [r6, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800b79a:	b2da      	uxtb	r2, r3
 800b79c:	4b13      	ldr	r3, [pc, #76]	; (800b7ec <PrepareFrame+0x178>)
 800b79e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 800b7a2:	e78f      	b.n	800b6c4 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800b7a4:	4a13      	ldr	r2, [pc, #76]	; (800b7f4 <PrepareFrame+0x180>)
 800b7a6:	4669      	mov	r1, sp
 800b7a8:	f001 fb64 	bl	800ce74 <LoRaMacCommandsSerializeCmds>
 800b7ac:	b1c0      	cbz	r0, 800b7e0 <PrepareFrame+0x16c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b7ae:	2013      	movs	r0, #19
 800b7b0:	e788      	b.n	800b6c4 <PrepareFrame+0x50>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800b7b2:	f1b8 0f00 	cmp.w	r8, #0
 800b7b6:	d017      	beq.n	800b7e8 <PrepareFrame+0x174>
 800b7b8:	2800      	cmp	r0, #0
 800b7ba:	d083      	beq.n	800b6c4 <PrepareFrame+0x50>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800b7bc:	4c0b      	ldr	r4, [pc, #44]	; (800b7ec <PrepareFrame+0x178>)
 800b7be:	b282      	uxth	r2, r0
 800b7c0:	4641      	mov	r1, r8
 800b7c2:	1ce0      	adds	r0, r4, #3
 800b7c4:	f005 fa99 	bl	8010cfa <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800b7c8:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
 800b7cc:	3301      	adds	r3, #1
 800b7ce:	8023      	strh	r3, [r4, #0]
    return LORAMAC_STATUS_OK;
 800b7d0:	2000      	movs	r0, #0
 800b7d2:	e777      	b.n	800b6c4 <PrepareFrame+0x50>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800b7d4:	2012      	movs	r0, #18
 800b7d6:	e775      	b.n	800b6c4 <PrepareFrame+0x50>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b7d8:	2013      	movs	r0, #19
 800b7da:	e773      	b.n	800b6c4 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b7dc:	2013      	movs	r0, #19
 800b7de:	e771      	b.n	800b6c4 <PrepareFrame+0x50>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800b7e0:	200a      	movs	r0, #10
 800b7e2:	e76f      	b.n	800b6c4 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b7e4:	2013      	movs	r0, #19
 800b7e6:	e76d      	b.n	800b6c4 <PrepareFrame+0x50>
    return LORAMAC_STATUS_OK;
 800b7e8:	2000      	movs	r0, #0
 800b7ea:	e76b      	b.n	800b6c4 <PrepareFrame+0x50>
 800b7ec:	20000814 	.word	0x20000814
 800b7f0:	20008000 	.word	0x20008000
 800b7f4:	20000cb4 	.word	0x20000cb4
 800b7f8:	2000092c 	.word	0x2000092c

0800b7fc <Send>:
{
 800b7fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b800:	b08a      	sub	sp, #40	; 0x28
 800b802:	4617      	mov	r7, r2
 800b804:	4698      	mov	r8, r3
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800b806:	4c45      	ldr	r4, [pc, #276]	; (800b91c <Send+0x120>)
 800b808:	f994 a039 	ldrsb.w	sl, [r4, #57]	; 0x39
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800b80c:	f994 9038 	ldrsb.w	r9, [r4, #56]	; 0x38
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800b810:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b812:	9208      	str	r2, [sp, #32]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800b814:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d07c      	beq.n	800b916 <Send+0x11a>
 800b81c:	4605      	mov	r5, r0
 800b81e:	460e      	mov	r6, r1
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800b820:	f894 3107 	ldrb.w	r3, [r4, #263]	; 0x107
 800b824:	b90b      	cbnz	r3, 800b82a <Send+0x2e>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800b826:	2100      	movs	r1, #0
 800b828:	6321      	str	r1, [r4, #48]	; 0x30
    fCtrl.Value = 0;
 800b82a:	2300      	movs	r3, #0
 800b82c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800b830:	483a      	ldr	r0, [pc, #232]	; (800b91c <Send+0x120>)
 800b832:	f890 1106 	ldrb.w	r1, [r0, #262]	; 0x106
 800b836:	f361 13c7 	bfi	r3, r1, #7, #1
 800b83a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800b83e:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
 800b842:	2b01      	cmp	r3, #1
 800b844:	d054      	beq.n	800b8f0 <Send+0xf4>
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800b846:	4b35      	ldr	r3, [pc, #212]	; (800b91c <Send+0x120>)
 800b848:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b84c:	b12b      	cbz	r3, 800b85a <Send+0x5e>
        fCtrl.Bits.Ack = 1;
 800b84e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800b852:	f043 0320 	orr.w	r3, r3, #32
 800b856:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    adrNext.UpdateChanMask = true;
 800b85a:	2301      	movs	r3, #1
 800b85c:	f88d 300c 	strb.w	r3, [sp, #12]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800b860:	f88d 100d 	strb.w	r1, [sp, #13]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800b864:	9204      	str	r2, [sp, #16]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800b866:	4b2e      	ldr	r3, [pc, #184]	; (800b920 <Send+0x124>)
 800b868:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
 800b86c:	f8ad 2014 	strh.w	r2, [sp, #20]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800b870:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 800b874:	f8ad 3016 	strh.w	r3, [sp, #22]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800b878:	f88d a018 	strb.w	sl, [sp, #24]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800b87c:	f88d 9019 	strb.w	r9, [sp, #25]
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800b880:	4926      	ldr	r1, [pc, #152]	; (800b91c <Send+0x120>)
 800b882:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
 800b886:	f88d 301a 	strb.w	r3, [sp, #26]
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b88a:	f891 3074 	ldrb.w	r3, [r1, #116]	; 0x74
 800b88e:	f88d 301b 	strb.w	r3, [sp, #27]
    adrNext.Region = Nvm.MacGroup2.Region;
 800b892:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
 800b896:	f88d 301c 	strb.w	r3, [sp, #28]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800b89a:	ab08      	add	r3, sp, #32
 800b89c:	9300      	str	r3, [sp, #0]
 800b89e:	f101 0360 	add.w	r3, r1, #96	; 0x60
 800b8a2:	f101 0238 	add.w	r2, r1, #56	; 0x38
 800b8a6:	3139      	adds	r1, #57	; 0x39
 800b8a8:	a803      	add	r0, sp, #12
 800b8aa:	f001 f92d 	bl	800cb08 <LoRaMacAdrCalcNext>
 800b8ae:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800b8b2:	f360 1386 	bfi	r3, r0, #6, #1
 800b8b6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800b8ba:	f8cd 8000 	str.w	r8, [sp]
 800b8be:	463b      	mov	r3, r7
 800b8c0:	4632      	mov	r2, r6
 800b8c2:	a909      	add	r1, sp, #36	; 0x24
 800b8c4:	4628      	mov	r0, r5
 800b8c6:	f7ff fed5 	bl	800b674 <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800b8ca:	4604      	mov	r4, r0
 800b8cc:	b108      	cbz	r0, 800b8d2 <Send+0xd6>
 800b8ce:	280a      	cmp	r0, #10
 800b8d0:	d104      	bne.n	800b8dc <Send+0xe0>
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800b8d2:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 800b8d6:	f7ff fa0b 	bl	800acf0 <ScheduleTx>
 800b8da:	4604      	mov	r4, r0
    if( status != LORAMAC_STATUS_OK )
 800b8dc:	b17c      	cbz	r4, 800b8fe <Send+0x102>
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800b8de:	4b0f      	ldr	r3, [pc, #60]	; (800b91c <Send+0x120>)
 800b8e0:	f883 a039 	strb.w	sl, [r3, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800b8e4:	f883 9038 	strb.w	r9, [r3, #56]	; 0x38
}
 800b8e8:	4620      	mov	r0, r4
 800b8ea:	b00a      	add	sp, #40	; 0x28
 800b8ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        fCtrl.Bits.FPending      = 1;
 800b8f0:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800b8f4:	f043 0310 	orr.w	r3, r3, #16
 800b8f8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800b8fc:	e7a3      	b.n	800b846 <Send+0x4a>
        Nvm.MacGroup1.SrvAckRequested = false;
 800b8fe:	4b07      	ldr	r3, [pc, #28]	; (800b91c <Send+0x120>)
 800b900:	2200      	movs	r2, #0
 800b902:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800b906:	9a08      	ldr	r2, [sp, #32]
 800b908:	629a      	str	r2, [r3, #40]	; 0x28
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800b90a:	f001 fa7b 	bl	800ce04 <LoRaMacCommandsRemoveNoneStickyCmds>
 800b90e:	2800      	cmp	r0, #0
 800b910:	d0ea      	beq.n	800b8e8 <Send+0xec>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b912:	2413      	movs	r4, #19
 800b914:	e7e8      	b.n	800b8e8 <Send+0xec>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800b916:	2407      	movs	r4, #7
 800b918:	e7e6      	b.n	800b8e8 <Send+0xec>
 800b91a:	bf00      	nop
 800b91c:	20008000 	.word	0x20008000
 800b920:	20000814 	.word	0x20000814

0800b924 <LoRaMacIsBusy>:
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800b924:	4b0a      	ldr	r3, [pc, #40]	; (800b950 <LoRaMacIsBusy+0x2c>)
 800b926:	781b      	ldrb	r3, [r3, #0]
 800b928:	f013 0f01 	tst.w	r3, #1
 800b92c:	d10a      	bne.n	800b944 <LoRaMacIsBusy+0x20>
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800b92e:	4b09      	ldr	r3, [pc, #36]	; (800b954 <LoRaMacIsBusy+0x30>)
 800b930:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800b934:	b943      	cbnz	r3, 800b948 <LoRaMacIsBusy+0x24>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800b936:	4b07      	ldr	r3, [pc, #28]	; (800b954 <LoRaMacIsBusy+0x30>)
 800b938:	f893 3496 	ldrb.w	r3, [r3, #1174]	; 0x496
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800b93c:	2b01      	cmp	r3, #1
 800b93e:	d005      	beq.n	800b94c <LoRaMacIsBusy+0x28>
    return true;
 800b940:	2001      	movs	r0, #1
 800b942:	4770      	bx	lr
        return true;
 800b944:	2001      	movs	r0, #1
 800b946:	4770      	bx	lr
    return true;
 800b948:	2001      	movs	r0, #1
 800b94a:	4770      	bx	lr
        return false;
 800b94c:	2000      	movs	r0, #0
}
 800b94e:	4770      	bx	lr
 800b950:	20000810 	.word	0x20000810
 800b954:	20000814 	.word	0x20000814

0800b958 <LoRaMacProcess>:
{
 800b958:	b508      	push	{r3, lr}
    LoRaMacHandleIrqEvents( );
 800b95a:	f7ff f81d 	bl	800a998 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800b95e:	f001 f974 	bl	800cc4a <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800b962:	4b20      	ldr	r3, [pc, #128]	; (800b9e4 <LoRaMacProcess+0x8c>)
 800b964:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800b968:	f013 0f20 	tst.w	r3, #32
 800b96c:	d10d      	bne.n	800b98a <LoRaMacProcess+0x32>
    LoRaMacHandleIndicationEvents( );
 800b96e:	f7fd fed3 	bl	8009718 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800b972:	4b1c      	ldr	r3, [pc, #112]	; (800b9e4 <LoRaMacProcess+0x8c>)
 800b974:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800b978:	2b02      	cmp	r3, #2
 800b97a:	d024      	beq.n	800b9c6 <LoRaMacProcess+0x6e>
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800b97c:	4b19      	ldr	r3, [pc, #100]	; (800b9e4 <LoRaMacProcess+0x8c>)
 800b97e:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800b982:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b986:	d121      	bne.n	800b9cc <LoRaMacProcess+0x74>
}
 800b988:	bd08      	pop	{r3, pc}
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800b98a:	2000      	movs	r0, #0
 800b98c:	f7fd febe 	bl	800970c <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800b990:	f7fd fefa 	bl	8009788 <LoRaMacCheckForRxAbort>
        if( IsRequestPending( ) > 0 )
 800b994:	f7fd ffd2 	bl	800993c <IsRequestPending>
 800b998:	b110      	cbz	r0, 800b9a0 <LoRaMacProcess+0x48>
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800b99a:	f7fe f8b9 	bl	8009b10 <LoRaMacCheckForBeaconAcquisition>
        if( noTx == 0x00 )
 800b99e:	b918      	cbnz	r0, 800b9a8 <LoRaMacProcess+0x50>
            LoRaMacHandleMlmeRequest( );
 800b9a0:	f7ff f83c 	bl	800aa1c <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800b9a4:	f7ff fa5a 	bl	800ae5c <LoRaMacHandleMcpsRequest>
        LoRaMacHandleRequestEvents( );
 800b9a8:	f7ff fa94 	bl	800aed4 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800b9ac:	f7ff fadc 	bl	800af68 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800b9b0:	2001      	movs	r0, #1
 800b9b2:	f7fd feab 	bl	800970c <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800b9b6:	4a0b      	ldr	r2, [pc, #44]	; (800b9e4 <LoRaMacProcess+0x8c>)
 800b9b8:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800b9bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9c0:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
 800b9c4:	e7d3      	b.n	800b96e <LoRaMacProcess+0x16>
        OpenContinuousRxCWindow( );
 800b9c6:	f7ff fae1 	bl	800af8c <OpenContinuousRxCWindow>
 800b9ca:	e7d7      	b.n	800b97c <LoRaMacProcess+0x24>
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800b9cc:	4b05      	ldr	r3, [pc, #20]	; (800b9e4 <LoRaMacProcess+0x8c>)
 800b9ce:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800b9d2:	f36f 1286 	bfc	r2, #6, #1
 800b9d6:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
        LoRaMacHandleNvm( &Nvm );
 800b9da:	4803      	ldr	r0, [pc, #12]	; (800b9e8 <LoRaMacProcess+0x90>)
 800b9dc:	f7ff fb86 	bl	800b0ec <LoRaMacHandleNvm>
}
 800b9e0:	e7d2      	b.n	800b988 <LoRaMacProcess+0x30>
 800b9e2:	bf00      	nop
 800b9e4:	20000814 	.word	0x20000814
 800b9e8:	20008000 	.word	0x20008000

0800b9ec <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800b9ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9f0:	b08d      	sub	sp, #52	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 800b9f2:	2800      	cmp	r0, #0
 800b9f4:	f000 81a4 	beq.w	800bd40 <LoRaMacInitialization+0x354>
 800b9f8:	460f      	mov	r7, r1
 800b9fa:	4691      	mov	r9, r2
 800b9fc:	4680      	mov	r8, r0
 800b9fe:	2900      	cmp	r1, #0
 800ba00:	f000 81a0 	beq.w	800bd44 <LoRaMacInitialization+0x358>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800ba04:	6803      	ldr	r3, [r0, #0]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	f000 819e 	beq.w	800bd48 <LoRaMacInitialization+0x35c>
        ( primitives->MacMcpsIndication == NULL ) ||
 800ba0c:	6843      	ldr	r3, [r0, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	f000 819c 	beq.w	800bd4c <LoRaMacInitialization+0x360>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800ba14:	6883      	ldr	r3, [r0, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	f000 819a 	beq.w	800bd50 <LoRaMacInitialization+0x364>
        ( primitives->MacMlmeIndication == NULL ) )
 800ba1c:	68c3      	ldr	r3, [r0, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	f000 8198 	beq.w	800bd54 <LoRaMacInitialization+0x368>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800ba24:	4610      	mov	r0, r2
 800ba26:	f002 f8cb 	bl	800dbc0 <RegionIsActive>
 800ba2a:	2800      	cmp	r0, #0
 800ba2c:	f000 8194 	beq.w	800bd58 <LoRaMacInitialization+0x36c>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 800ba30:	4640      	mov	r0, r8
 800ba32:	f001 fac9 	bl	800cfc8 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 800ba36:	4ccc      	ldr	r4, [pc, #816]	; (800bd68 <LoRaMacInitialization+0x37c>)
 800ba38:	f240 528c 	movw	r2, #1420	; 0x58c
 800ba3c:	2100      	movs	r1, #0
 800ba3e:	4620      	mov	r0, r4
 800ba40:	f005 f973 	bl	8010d2a <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800ba44:	4dc9      	ldr	r5, [pc, #804]	; (800bd6c <LoRaMacInitialization+0x380>)
 800ba46:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 800ba4a:	2100      	movs	r1, #0
 800ba4c:	4628      	mov	r0, r5
 800ba4e:	f005 f96c 	bl	8010d2a <memset1>
    // Set non zero variables to its default value
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 800ba52:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800ba56:	2600      	movs	r6, #0
 800ba58:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 800ba5c:	f884 6080 	strb.w	r6, [r4, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 800ba60:	4bc3      	ldr	r3, [pc, #780]	; (800bd70 <LoRaMacInitialization+0x384>)
 800ba62:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 800ba66:	f88d 6020 	strb.w	r6, [sp, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800ba6a:	f504 73f2 	add.w	r3, r4, #484	; 0x1e4
 800ba6e:	9305      	str	r3, [sp, #20]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800ba70:	f504 73fc 	add.w	r3, r4, #504	; 0x1f8
 800ba74:	9306      	str	r3, [sp, #24]
    params.Bands = &RegionBands;
 800ba76:	4bbf      	ldr	r3, [pc, #764]	; (800bd74 <LoRaMacInitialization+0x388>)
 800ba78:	9307      	str	r3, [sp, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800ba7a:	a905      	add	r1, sp, #20
 800ba7c:	4648      	mov	r0, r9
 800ba7e:	f002 f8cf 	bl	800dc20 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800ba82:	230f      	movs	r3, #15
 800ba84:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ba88:	a90a      	add	r1, sp, #40	; 0x28
 800ba8a:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800ba8e:	f002 f8a1 	bl	800dbd4 <RegionGetPhyParam>
 800ba92:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800ba94:	1b80      	subs	r0, r0, r6
 800ba96:	bf18      	it	ne
 800ba98:	2001      	movne	r0, #1
 800ba9a:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800ba9e:	f04f 0a0a 	mov.w	sl, #10
 800baa2:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800baa6:	a90a      	add	r1, sp, #40	; 0x28
 800baa8:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800baac:	f002 f892 	bl	800dbd4 <RegionGetPhyParam>
 800bab0:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 800bab2:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_TX_DR;
 800bab6:	f04f 0906 	mov.w	r9, #6
 800baba:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800babe:	a90a      	add	r1, sp, #40	; 0x28
 800bac0:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800bac4:	f002 f886 	bl	800dbd4 <RegionGetPhyParam>
 800bac8:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 800baca:	f884 00cd 	strb.w	r0, [r4, #205]	; 0xcd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800bace:	2310      	movs	r3, #16
 800bad0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bad4:	a90a      	add	r1, sp, #40	; 0x28
 800bad6:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800bada:	f002 f87b 	bl	800dbd4 <RegionGetPhyParam>
 800bade:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800bae0:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800bae4:	2311      	movs	r3, #17
 800bae6:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800baea:	a90a      	add	r1, sp, #40	; 0x28
 800baec:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800baf0:	f002 f870 	bl	800dbd4 <RegionGetPhyParam>
 800baf4:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800baf6:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800bafa:	2312      	movs	r3, #18
 800bafc:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bb00:	a90a      	add	r1, sp, #40	; 0x28
 800bb02:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800bb06:	f002 f865 	bl	800dbd4 <RegionGetPhyParam>
 800bb0a:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800bb0c:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800bb10:	2313      	movs	r3, #19
 800bb12:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bb16:	a90a      	add	r1, sp, #40	; 0x28
 800bb18:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800bb1c:	f002 f85a 	bl	800dbd4 <RegionGetPhyParam>
 800bb20:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800bb22:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800bb26:	2314      	movs	r3, #20
 800bb28:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bb2c:	a90a      	add	r1, sp, #40	; 0x28
 800bb2e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800bb32:	f002 f84f 	bl	800dbd4 <RegionGetPhyParam>
 800bb36:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800bb38:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800bb3c:	2316      	movs	r3, #22
 800bb3e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bb42:	a90a      	add	r1, sp, #40	; 0x28
 800bb44:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800bb48:	f002 f844 	bl	800dbd4 <RegionGetPhyParam>
 800bb4c:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800bb4e:	f884 00a5 	strb.w	r0, [r4, #165]	; 0xa5

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800bb52:	2317      	movs	r3, #23
 800bb54:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bb58:	a90a      	add	r1, sp, #40	; 0x28
 800bb5a:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800bb5e:	f002 f839 	bl	800dbd4 <RegionGetPhyParam>
 800bb62:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800bb64:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800bb68:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800bb6c:	2318      	movs	r3, #24
 800bb6e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bb72:	a90a      	add	r1, sp, #40	; 0x28
 800bb74:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800bb78:	f002 f82c 	bl	800dbd4 <RegionGetPhyParam>
 800bb7c:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800bb7e:	b2c0      	uxtb	r0, r0
 800bb80:	f884 00ac 	strb.w	r0, [r4, #172]	; 0xac
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800bb84:	f884 00b4 	strb.w	r0, [r4, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800bb88:	231d      	movs	r3, #29
 800bb8a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bb8e:	a90a      	add	r1, sp, #40	; 0x28
 800bb90:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800bb94:	f002 f81e 	bl	800dbd4 <RegionGetPhyParam>
 800bb98:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800bb9a:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800bb9e:	231e      	movs	r3, #30
 800bba0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bba4:	a90a      	add	r1, sp, #40	; 0x28
 800bba6:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800bbaa:	f002 f813 	bl	800dbd4 <RegionGetPhyParam>
 800bbae:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800bbb0:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800bbb4:	231f      	movs	r3, #31
 800bbb6:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bbba:	a90a      	add	r1, sp, #40	; 0x28
 800bbbc:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800bbc0:	f002 f808 	bl	800dbd4 <RegionGetPhyParam>
 800bbc4:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 800bbc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbc8:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800bbcc:	2320      	movs	r3, #32
 800bbce:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bbd2:	a90a      	add	r1, sp, #40	; 0x28
 800bbd4:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800bbd8:	f001 fffc 	bl	800dbd4 <RegionGetPhyParam>
 800bbdc:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 800bbde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbe0:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800bbe4:	230b      	movs	r3, #11
 800bbe6:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bbea:	a90a      	add	r1, sp, #40	; 0x28
 800bbec:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800bbf0:	f001 fff0 	bl	800dbd4 <RegionGetPhyParam>
 800bbf4:	9009      	str	r0, [sp, #36]	; 0x24
    MacCtx.AdrAckLimit = phyParam.Value;
 800bbf6:	f8a5 0400 	strh.w	r0, [r5, #1024]	; 0x400

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800bbfa:	230c      	movs	r3, #12
 800bbfc:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bc00:	a90a      	add	r1, sp, #40	; 0x28
 800bc02:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800bc06:	f001 ffe5 	bl	800dbd4 <RegionGetPhyParam>
 800bc0a:	9009      	str	r0, [sp, #36]	; 0x24
    MacCtx.AdrAckDelay = phyParam.Value;
 800bc0c:	f8a5 0402 	strh.w	r0, [r5, #1026]	; 0x402

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800bc10:	f04f 0b01 	mov.w	fp, #1
 800bc14:	f884 b0a4 	strb.w	fp, [r4, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800bc18:	f8c4 a088 	str.w	sl, [r4, #136]	; 0x88
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 800bc1c:	f884 908c 	strb.w	r9, [r4, #140]	; 0x8c

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 800bc20:	f8c4 a044 	str.w	sl, [r4, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 800bc24:	f884 9048 	strb.w	r9, [r4, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800bc28:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800bc2c:	64e3      	str	r3, [r4, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 800bc2e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800bc32:	6523      	str	r3, [r4, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 800bc34:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800bc38:	6563      	str	r3, [r4, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 800bc3a:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800bc3e:	65a3      	str	r3, [r4, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 800bc40:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800bc44:	65e3      	str	r3, [r4, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 800bc46:	f884 b060 	strb.w	fp, [r4, #96]	; 0x60
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 800bc4a:	f884 b10b 	strb.w	fp, [r4, #267]	; 0x10b
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 800bc4e:	f8c5 7348 	str.w	r7, [r5, #840]	; 0x348
    ResetMacParameters( );
 800bc52:	f7ff fbaf 	bl	800b3b4 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 800bc56:	f884 b105 	strb.w	fp, [r4, #261]	; 0x105

    MacCtx.MacPrimitives = primitives;
 800bc5a:	f8c5 8344 	str.w	r8, [r5, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 800bc5e:	f885 6495 	strb.w	r6, [r5, #1173]	; 0x495
    MacCtx.MacState = LORAMAC_STOPPED;
 800bc62:	f8c5 b340 	str.w	fp, [r5, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 800bc66:	62e6      	str	r6, [r4, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 800bc68:	6326      	str	r6, [r4, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800bc6a:	9600      	str	r6, [sp, #0]
 800bc6c:	4b42      	ldr	r3, [pc, #264]	; (800bd78 <LoRaMacInitialization+0x38c>)
 800bc6e:	4632      	mov	r2, r6
 800bc70:	f04f 31ff 	mov.w	r1, #4294967295
 800bc74:	f505 705a 	add.w	r0, r5, #872	; 0x368
 800bc78:	f007 f9de 	bl	8013038 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800bc7c:	9600      	str	r6, [sp, #0]
 800bc7e:	4b3f      	ldr	r3, [pc, #252]	; (800bd7c <LoRaMacInitialization+0x390>)
 800bc80:	4632      	mov	r2, r6
 800bc82:	f04f 31ff 	mov.w	r1, #4294967295
 800bc86:	f505 7060 	add.w	r0, r5, #896	; 0x380
 800bc8a:	f007 f9d5 	bl	8013038 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800bc8e:	9600      	str	r6, [sp, #0]
 800bc90:	4b3b      	ldr	r3, [pc, #236]	; (800bd80 <LoRaMacInitialization+0x394>)
 800bc92:	4632      	mov	r2, r6
 800bc94:	f04f 31ff 	mov.w	r1, #4294967295
 800bc98:	f505 7066 	add.w	r0, r5, #920	; 0x398
 800bc9c:	f007 f9cc 	bl	8013038 <UTIL_TIMER_Create>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 800bca0:	9600      	str	r6, [sp, #0]
 800bca2:	4b38      	ldr	r3, [pc, #224]	; (800bd84 <LoRaMacInitialization+0x398>)
 800bca4:	4632      	mov	r2, r6
 800bca6:	f04f 31ff 	mov.w	r1, #4294967295
 800bcaa:	f205 4004 	addw	r0, r5, #1028	; 0x404
 800bcae:	f007 f9c3 	bl	8013038 <UTIL_TIMER_Create>
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800bcb2:	f10d 0808 	add.w	r8, sp, #8
 800bcb6:	4640      	mov	r0, r8
 800bcb8:	f007 f950 	bl	8012f5c <SysTimeGetMcuTime>
 800bcbc:	f504 7388 	add.w	r3, r4, #272	; 0x110
 800bcc0:	e898 0003 	ldmia.w	r8, {r0, r1}
 800bcc4:	e883 0003 	stmia.w	r3, {r0, r1}

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 800bcc8:	4b2f      	ldr	r3, [pc, #188]	; (800bd88 <LoRaMacInitialization+0x39c>)
 800bcca:	601e      	str	r6, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800bccc:	4b2f      	ldr	r3, [pc, #188]	; (800bd8c <LoRaMacInitialization+0x3a0>)
 800bcce:	f8c5 334c 	str.w	r3, [r5, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800bcd2:	4b2f      	ldr	r3, [pc, #188]	; (800bd90 <LoRaMacInitialization+0x3a4>)
 800bcd4:	f8c5 3354 	str.w	r3, [r5, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800bcd8:	4b2e      	ldr	r3, [pc, #184]	; (800bd94 <LoRaMacInitialization+0x3a8>)
 800bcda:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800bcde:	4b2e      	ldr	r3, [pc, #184]	; (800bd98 <LoRaMacInitialization+0x3ac>)
 800bce0:	f8c5 3350 	str.w	r3, [r5, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800bce4:	4b2d      	ldr	r3, [pc, #180]	; (800bd9c <LoRaMacInitialization+0x3b0>)
 800bce6:	f8c5 3358 	str.w	r3, [r5, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 800bcea:	4b2d      	ldr	r3, [pc, #180]	; (800bda0 <LoRaMacInitialization+0x3b4>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	f505 7053 	add.w	r0, r5, #844	; 0x34c
 800bcf2:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 800bcf4:	68b9      	ldr	r1, [r7, #8]
 800bcf6:	f504 7092 	add.w	r0, r4, #292	; 0x124
 800bcfa:	f004 fd59 	bl	80107b0 <SecureElementInit>
 800bcfe:	bb80      	cbnz	r0, 800bd62 <LoRaMacInitialization+0x376>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 800bd00:	4620      	mov	r0, r4
 800bd02:	f001 fbf1 	bl	800d4e8 <LoRaMacCryptoInit>
 800bd06:	2800      	cmp	r0, #0
 800bd08:	d14c      	bne.n	800bda4 <LoRaMacInitialization+0x3b8>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 800bd0a:	f001 f823 	bl	800cd54 <LoRaMacCommandsInit>
 800bd0e:	2800      	cmp	r0, #0
 800bd10:	d14a      	bne.n	800bda8 <LoRaMacInitialization+0x3bc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800bd12:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
 800bd16:	f001 fc39 	bl	800d58c <LoRaMacCryptoSetMulticastReference>
 800bd1a:	4604      	mov	r4, r0
 800bd1c:	2800      	cmp	r0, #0
 800bd1e:	d145      	bne.n	800bdac <LoRaMacInitialization+0x3c0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 800bd20:	4d1f      	ldr	r5, [pc, #124]	; (800bda0 <LoRaMacInitialization+0x3b4>)
 800bd22:	696b      	ldr	r3, [r5, #20]
 800bd24:	4798      	blx	r3
 800bd26:	f004 ffd5 	bl	8010cd4 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800bd2a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800bd2c:	4a0e      	ldr	r2, [pc, #56]	; (800bd68 <LoRaMacInitialization+0x37c>)
 800bd2e:	f892 0105 	ldrb.w	r0, [r2, #261]	; 0x105
 800bd32:	4798      	blx	r3
    Radio.Sleep( );
 800bd34:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800bd36:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800bd38:	4658      	mov	r0, fp
 800bd3a:	f7fd fce7 	bl	800970c <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 800bd3e:	e00c      	b.n	800bd5a <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800bd40:	2403      	movs	r4, #3
 800bd42:	e00a      	b.n	800bd5a <LoRaMacInitialization+0x36e>
 800bd44:	2403      	movs	r4, #3
 800bd46:	e008      	b.n	800bd5a <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800bd48:	2403      	movs	r4, #3
 800bd4a:	e006      	b.n	800bd5a <LoRaMacInitialization+0x36e>
 800bd4c:	2403      	movs	r4, #3
 800bd4e:	e004      	b.n	800bd5a <LoRaMacInitialization+0x36e>
 800bd50:	2403      	movs	r4, #3
 800bd52:	e002      	b.n	800bd5a <LoRaMacInitialization+0x36e>
 800bd54:	2403      	movs	r4, #3
 800bd56:	e000      	b.n	800bd5a <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800bd58:	2409      	movs	r4, #9
}
 800bd5a:	4620      	mov	r0, r4
 800bd5c:	b00d      	add	sp, #52	; 0x34
 800bd5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800bd62:	2411      	movs	r4, #17
 800bd64:	e7f9      	b.n	800bd5a <LoRaMacInitialization+0x36e>
 800bd66:	bf00      	nop
 800bd68:	20008000 	.word	0x20008000
 800bd6c:	20000814 	.word	0x20000814
 800bd70:	01000400 	.word	0x01000400
 800bd74:	20000d34 	.word	0x20000d34
 800bd78:	0800adf9 	.word	0x0800adf9
 800bd7c:	0800b09d 	.word	0x0800b09d
 800bd80:	0800b045 	.word	0x0800b045
 800bd84:	08009aa5 	.word	0x08009aa5
 800bd88:	20000810 	.word	0x20000810
 800bd8c:	0800b35d 	.word	0x0800b35d
 800bd90:	0800b2fd 	.word	0x0800b2fd
 800bd94:	080096c1 	.word	0x080096c1
 800bd98:	0800b2c9 	.word	0x0800b2c9
 800bd9c:	0800b295 	.word	0x0800b295
 800bda0:	08014e54 	.word	0x08014e54
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800bda4:	2411      	movs	r4, #17
 800bda6:	e7d8      	b.n	800bd5a <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800bda8:	2413      	movs	r4, #19
 800bdaa:	e7d6      	b.n	800bd5a <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800bdac:	2411      	movs	r4, #17
 800bdae:	e7d4      	b.n	800bd5a <LoRaMacInitialization+0x36e>

0800bdb0 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
    MacCtx.MacState = LORAMAC_IDLE;
 800bdb0:	2000      	movs	r0, #0
 800bdb2:	4b02      	ldr	r3, [pc, #8]	; (800bdbc <LoRaMacStart+0xc>)
 800bdb4:	f8c3 0340 	str.w	r0, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
}
 800bdb8:	4770      	bx	lr
 800bdba:	bf00      	nop
 800bdbc:	20000814 	.word	0x20000814

0800bdc0 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 800bdc0:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == false )
 800bdc2:	f7ff fdaf 	bl	800b924 <LoRaMacIsBusy>
 800bdc6:	b130      	cbz	r0, 800bdd6 <LoRaMacStop+0x16>
    {
        MacCtx.MacState = LORAMAC_STOPPED;
        return LORAMAC_STATUS_OK;
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 800bdc8:	4b06      	ldr	r3, [pc, #24]	; (800bde4 <LoRaMacStop+0x24>)
 800bdca:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800bdce:	2b01      	cmp	r3, #1
 800bdd0:	d006      	beq.n	800bde0 <LoRaMacStop+0x20>
    {
        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_BUSY;
 800bdd2:	2001      	movs	r0, #1
}
 800bdd4:	bd08      	pop	{r3, pc}
        MacCtx.MacState = LORAMAC_STOPPED;
 800bdd6:	4b03      	ldr	r3, [pc, #12]	; (800bde4 <LoRaMacStop+0x24>)
 800bdd8:	2201      	movs	r2, #1
 800bdda:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 800bdde:	e7f9      	b.n	800bdd4 <LoRaMacStop+0x14>
        return LORAMAC_STATUS_OK;
 800bde0:	2000      	movs	r0, #0
 800bde2:	e7f7      	b.n	800bdd4 <LoRaMacStop+0x14>
 800bde4:	20000814 	.word	0x20000814

0800bde8 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 800bde8:	b570      	push	{r4, r5, r6, lr}
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 800bdea:	4c14      	ldr	r4, [pc, #80]	; (800be3c <LoRaMacHalt+0x54>)
 800bdec:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800bdf0:	f007 f980 	bl	80130f4 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 800bdf4:	f504 7060 	add.w	r0, r4, #896	; 0x380
 800bdf8:	f007 f97c 	bl	80130f4 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 800bdfc:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800be00:	f007 f978 	bl	80130f4 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800be04:	f204 4004 	addw	r0, r4, #1028	; 0x404
 800be08:	f007 f974 	bl	80130f4 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 800be0c:	f000 ff0a 	bl	800cc24 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 800be10:	4b0b      	ldr	r3, [pc, #44]	; (800be40 <LoRaMacHalt+0x58>)
 800be12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be14:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 800be16:	2500      	movs	r5, #0
 800be18:	f8c4 5340 	str.w	r5, [r4, #832]	; 0x340

    LoRaMacHandleNvm( &Nvm );
 800be1c:	4e09      	ldr	r6, [pc, #36]	; (800be44 <LoRaMacHalt+0x5c>)
 800be1e:	4630      	mov	r0, r6
 800be20:	f7ff f964 	bl	800b0ec <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 800be24:	f240 528c 	movw	r2, #1420	; 0x58c
 800be28:	4631      	mov	r1, r6
 800be2a:	4807      	ldr	r0, [pc, #28]	; (800be48 <LoRaMacHalt+0x60>)
 800be2c:	f004 ff65 	bl	8010cfa <memcpy1>

    MacCtx.MacState = LORAMAC_STOPPED;
 800be30:	2301      	movs	r3, #1
 800be32:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 800be36:	4628      	mov	r0, r5
 800be38:	bd70      	pop	{r4, r5, r6, pc}
 800be3a:	bf00      	nop
 800be3c:	20000814 	.word	0x20000814
 800be40:	08014e54 	.word	0x08014e54
 800be44:	20008000 	.word	0x20008000
 800be48:	2000858c 	.word	0x2000858c

0800be4c <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800be4c:	b530      	push	{r4, r5, lr}
 800be4e:	b08b      	sub	sp, #44	; 0x2c
 800be50:	4604      	mov	r4, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800be52:	4b32      	ldr	r3, [pc, #200]	; (800bf1c <LoRaMacQueryTxPossible+0xd0>)
 800be54:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800be56:	9004      	str	r0, [sp, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800be58:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 800be5c:	f88d 200f 	strb.w	r2, [sp, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800be60:	f993 30cc 	ldrsb.w	r3, [r3, #204]	; 0xcc
 800be64:	f88d 300e 	strb.w	r3, [sp, #14]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 800be68:	4b2d      	ldr	r3, [pc, #180]	; (800bf20 <LoRaMacQueryTxPossible+0xd4>)
 800be6a:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800be6e:	f88d 200d 	strb.w	r2, [sp, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 800be72:	2300      	movs	r3, #0
 800be74:	9302      	str	r3, [sp, #8]

    if( txInfo == NULL )
 800be76:	2900      	cmp	r1, #0
 800be78:	d049      	beq.n	800bf0e <LoRaMacQueryTxPossible+0xc2>
 800be7a:	460d      	mov	r5, r1

    // Setup ADR request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 800be7c:	f88d 3014 	strb.w	r3, [sp, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800be80:	4b26      	ldr	r3, [pc, #152]	; (800bf1c <LoRaMacQueryTxPossible+0xd0>)
 800be82:	f893 1106 	ldrb.w	r1, [r3, #262]	; 0x106
 800be86:	f88d 1015 	strb.w	r1, [sp, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800be8a:	9006      	str	r0, [sp, #24]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800be8c:	4924      	ldr	r1, [pc, #144]	; (800bf20 <LoRaMacQueryTxPossible+0xd4>)
 800be8e:	f8b1 0400 	ldrh.w	r0, [r1, #1024]	; 0x400
 800be92:	f8ad 001c 	strh.w	r0, [sp, #28]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800be96:	f8b1 1402 	ldrh.w	r1, [r1, #1026]	; 0x402
 800be9a:	f8ad 101e 	strh.w	r1, [sp, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800be9e:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800bea2:	f88d 1020 	strb.w	r1, [sp, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800bea6:	f993 1038 	ldrsb.w	r1, [r3, #56]	; 0x38
 800beaa:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 800beae:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800beb2:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800beb6:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 800beba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bebe:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 800bec2:	ab04      	add	r3, sp, #16
 800bec4:	9300      	str	r3, [sp, #0]
 800bec6:	f10d 030d 	add.w	r3, sp, #13
 800beca:	f10d 020e 	add.w	r2, sp, #14
 800bece:	f10d 010f 	add.w	r1, sp, #15
 800bed2:	a805      	add	r0, sp, #20
 800bed4:	f000 fe18 	bl	800cb08 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800bed8:	f99d 000f 	ldrsb.w	r0, [sp, #15]
 800bedc:	f7fd fd3a 	bl	8009954 <GetMaxAppPayloadWithoutFOptsLength>
 800bee0:	7068      	strb	r0, [r5, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800bee2:	a802      	add	r0, sp, #8
 800bee4:	f000 ffba 	bl	800ce5c <LoRaMacCommandsGetSizeSerializedCmds>
 800bee8:	b998      	cbnz	r0, 800bf12 <LoRaMacQueryTxPossible+0xc6>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800beea:	9b02      	ldr	r3, [sp, #8]
 800beec:	2b0f      	cmp	r3, #15
 800beee:	d80a      	bhi.n	800bf06 <LoRaMacQueryTxPossible+0xba>
 800bef0:	786a      	ldrb	r2, [r5, #1]
 800bef2:	4293      	cmp	r3, r2
 800bef4:	d807      	bhi.n	800bf06 <LoRaMacQueryTxPossible+0xba>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800bef6:	1ad3      	subs	r3, r2, r3
 800bef8:	702b      	strb	r3, [r5, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800befa:	9b02      	ldr	r3, [sp, #8]
 800befc:	441c      	add	r4, r3
 800befe:	42a2      	cmp	r2, r4
 800bf00:	d309      	bcc.n	800bf16 <LoRaMacQueryTxPossible+0xca>
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 800bf02:	b00b      	add	sp, #44	; 0x2c
 800bf04:	bd30      	pop	{r4, r5, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 800bf06:	2300      	movs	r3, #0
 800bf08:	702b      	strb	r3, [r5, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800bf0a:	2008      	movs	r0, #8
 800bf0c:	e7f9      	b.n	800bf02 <LoRaMacQueryTxPossible+0xb6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800bf0e:	2003      	movs	r0, #3
 800bf10:	e7f7      	b.n	800bf02 <LoRaMacQueryTxPossible+0xb6>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800bf12:	2013      	movs	r0, #19
 800bf14:	e7f5      	b.n	800bf02 <LoRaMacQueryTxPossible+0xb6>
           return LORAMAC_STATUS_LENGTH_ERROR;
 800bf16:	2008      	movs	r0, #8
 800bf18:	e7f3      	b.n	800bf02 <LoRaMacQueryTxPossible+0xb6>
 800bf1a:	bf00      	nop
 800bf1c:	20008000 	.word	0x20008000
 800bf20:	20000814 	.word	0x20000814

0800bf24 <LoRaMacMibGetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800bf24:	2800      	cmp	r0, #0
 800bf26:	f000 813d 	beq.w	800c1a4 <LoRaMacMibGetRequestConfirm+0x280>
{
 800bf2a:	b510      	push	{r4, lr}
 800bf2c:	b084      	sub	sp, #16
 800bf2e:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 800bf30:	7800      	ldrb	r0, [r0, #0]
 800bf32:	2839      	cmp	r0, #57	; 0x39
 800bf34:	f200 8132 	bhi.w	800c19c <LoRaMacMibGetRequestConfirm+0x278>
 800bf38:	e8df f010 	tbh	[pc, r0, lsl #1]
 800bf3c:	0040003a 	.word	0x0040003a
 800bf40:	004b0046 	.word	0x004b0046
 800bf44:	00560050 	.word	0x00560050
 800bf48:	0130005c 	.word	0x0130005c
 800bf4c:	01300130 	.word	0x01300130
 800bf50:	01300130 	.word	0x01300130
 800bf54:	01300130 	.word	0x01300130
 800bf58:	00620130 	.word	0x00620130
 800bf5c:	006e0068 	.word	0x006e0068
 800bf60:	0083007b 	.word	0x0083007b
 800bf64:	0093008b 	.word	0x0093008b
 800bf68:	009b00a8 	.word	0x009b00a8
 800bf6c:	00bb00b5 	.word	0x00bb00b5
 800bf70:	00c500c0 	.word	0x00c500c0
 800bf74:	00cf00ca 	.word	0x00cf00ca
 800bf78:	00e500d4 	.word	0x00e500d4
 800bf7c:	00f700eb 	.word	0x00f700eb
 800bf80:	00fd00f1 	.word	0x00fd00f1
 800bf84:	01080102 	.word	0x01080102
 800bf88:	010d0115 	.word	0x010d0115
 800bf8c:	01300111 	.word	0x01300111
 800bf90:	0130011b 	.word	0x0130011b
 800bf94:	01300130 	.word	0x01300130
 800bf98:	01300130 	.word	0x01300130
 800bf9c:	01300130 	.word	0x01300130
 800bfa0:	01300130 	.word	0x01300130
 800bfa4:	01300130 	.word	0x01300130
 800bfa8:	01300130 	.word	0x01300130
 800bfac:	012a0124 	.word	0x012a0124
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 800bfb0:	4b7d      	ldr	r3, [pc, #500]	; (800c1a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800bfb2:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800bfb6:	7123      	strb	r3, [r4, #4]
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 800bfb8:	b004      	add	sp, #16
 800bfba:	bd10      	pop	{r4, pc}
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800bfbc:	4b7a      	ldr	r3, [pc, #488]	; (800c1a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800bfbe:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800bfc2:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bfc4:	2000      	movs	r0, #0
            break;
 800bfc6:	e7f7      	b.n	800bfb8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 800bfc8:	f004 fe50 	bl	8010c6c <SecureElementGetDevEui>
 800bfcc:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bfce:	2000      	movs	r0, #0
            break;
 800bfd0:	e7f2      	b.n	800bfb8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 800bfd2:	f004 fe61 	bl	8010c98 <SecureElementGetJoinEui>
 800bfd6:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bfd8:	2000      	movs	r0, #0
            break;
 800bfda:	e7ed      	b.n	800bfb8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 800bfdc:	4b72      	ldr	r3, [pc, #456]	; (800c1a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800bfde:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800bfe2:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bfe4:	2000      	movs	r0, #0
            break;
 800bfe6:	e7e7      	b.n	800bfb8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 800bfe8:	4b6f      	ldr	r3, [pc, #444]	; (800c1a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800bfea:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800bfee:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bff0:	2000      	movs	r0, #0
            break;
 800bff2:	e7e1      	b.n	800bfb8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 800bff4:	4b6c      	ldr	r3, [pc, #432]	; (800c1a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800bff6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800bffa:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bffc:	2000      	movs	r0, #0
            break;
 800bffe:	e7db      	b.n	800bfb8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 800c000:	4b69      	ldr	r3, [pc, #420]	; (800c1a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800c002:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 800c006:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c008:	2000      	movs	r0, #0
            break;
 800c00a:	e7d5      	b.n	800bfb8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800c00c:	4b66      	ldr	r3, [pc, #408]	; (800c1a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800c00e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c012:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c014:	2000      	movs	r0, #0
            break;
 800c016:	e7cf      	b.n	800bfb8 <LoRaMacMibGetRequestConfirm+0x94>
            getPhy.Attribute = PHY_CHANNELS;
 800c018:	231c      	movs	r3, #28
 800c01a:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c01e:	a902      	add	r1, sp, #8
 800c020:	4b61      	ldr	r3, [pc, #388]	; (800c1a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800c022:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c026:	f001 fdd5 	bl	800dbd4 <RegionGetPhyParam>
 800c02a:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelList = phyParam.Channels;
 800c02c:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c02e:	2000      	movs	r0, #0
            break;
 800c030:	e7c2      	b.n	800bfb8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800c032:	3404      	adds	r4, #4
 800c034:	4b5d      	ldr	r3, [pc, #372]	; (800c1ac <LoRaMacMibGetRequestConfirm+0x288>)
 800c036:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c03a:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c03e:	2000      	movs	r0, #0
            break;
 800c040:	e7ba      	b.n	800bfb8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800c042:	3404      	adds	r4, #4
 800c044:	4b5a      	ldr	r3, [pc, #360]	; (800c1b0 <LoRaMacMibGetRequestConfirm+0x28c>)
 800c046:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c04a:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c04e:	2000      	movs	r0, #0
            break;
 800c050:	e7b2      	b.n	800bfb8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 800c052:	3404      	adds	r4, #4
 800c054:	4b57      	ldr	r3, [pc, #348]	; (800c1b4 <LoRaMacMibGetRequestConfirm+0x290>)
 800c056:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c05a:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c05e:	2000      	movs	r0, #0
            break;
 800c060:	e7aa      	b.n	800bfb8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800c062:	3404      	adds	r4, #4
 800c064:	4b54      	ldr	r3, [pc, #336]	; (800c1b8 <LoRaMacMibGetRequestConfirm+0x294>)
 800c066:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c06a:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c06e:	2000      	movs	r0, #0
            break;
 800c070:	e7a2      	b.n	800bfb8 <LoRaMacMibGetRequestConfirm+0x94>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800c072:	231a      	movs	r3, #26
 800c074:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c078:	a902      	add	r1, sp, #8
 800c07a:	4b4b      	ldr	r3, [pc, #300]	; (800c1a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800c07c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c080:	f001 fda8 	bl	800dbd4 <RegionGetPhyParam>
 800c084:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800c086:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c088:	2000      	movs	r0, #0
            break;
 800c08a:	e795      	b.n	800bfb8 <LoRaMacMibGetRequestConfirm+0x94>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800c08c:	2319      	movs	r3, #25
 800c08e:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c092:	a902      	add	r1, sp, #8
 800c094:	4b44      	ldr	r3, [pc, #272]	; (800c1a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800c096:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c09a:	f001 fd9b 	bl	800dbd4 <RegionGetPhyParam>
 800c09e:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800c0a0:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c0a2:	2000      	movs	r0, #0
            break;
 800c0a4:	e788      	b.n	800bfb8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800c0a6:	4b40      	ldr	r3, [pc, #256]	; (800c1a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800c0a8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800c0ac:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c0ae:	2000      	movs	r0, #0
            break;
 800c0b0:	e782      	b.n	800bfb8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 800c0b2:	4b3d      	ldr	r3, [pc, #244]	; (800c1a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800c0b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0b6:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c0b8:	2000      	movs	r0, #0
            break;
 800c0ba:	e77d      	b.n	800bfb8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 800c0bc:	4b3a      	ldr	r3, [pc, #232]	; (800c1a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800c0be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0c0:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c0c2:	2000      	movs	r0, #0
            break;
 800c0c4:	e778      	b.n	800bfb8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 800c0c6:	4b38      	ldr	r3, [pc, #224]	; (800c1a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800c0c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0ca:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c0cc:	2000      	movs	r0, #0
            break;
 800c0ce:	e773      	b.n	800bfb8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 800c0d0:	4b35      	ldr	r3, [pc, #212]	; (800c1a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800c0d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0d4:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c0d6:	2000      	movs	r0, #0
            break;
 800c0d8:	e76e      	b.n	800bfb8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 800c0da:	4b33      	ldr	r3, [pc, #204]	; (800c1a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800c0dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c0de:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c0e0:	2000      	movs	r0, #0
            break;
 800c0e2:	e769      	b.n	800bfb8 <LoRaMacMibGetRequestConfirm+0x94>
            getPhy.Attribute = PHY_MIN_TX_DR;
 800c0e4:	2302      	movs	r3, #2
 800c0e6:	f88d 3008 	strb.w	r3, [sp, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800c0ea:	4b2f      	ldr	r3, [pc, #188]	; (800c1a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800c0ec:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800c0f0:	f88d 200a 	strb.w	r2, [sp, #10]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c0f4:	a902      	add	r1, sp, #8
 800c0f6:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c0fa:	f001 fd6b 	bl	800dbd4 <RegionGetPhyParam>
 800c0fe:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 800c100:	7120      	strb	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c102:	2000      	movs	r0, #0
            break;
 800c104:	e758      	b.n	800bfb8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800c106:	4b28      	ldr	r3, [pc, #160]	; (800c1a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800c108:	f993 30cd 	ldrsb.w	r3, [r3, #205]	; 0xcd
 800c10c:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c10e:	2000      	movs	r0, #0
            break;
 800c110:	e752      	b.n	800bfb8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800c112:	4b25      	ldr	r3, [pc, #148]	; (800c1a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800c114:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800c118:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c11a:	2000      	movs	r0, #0
            break;
 800c11c:	e74c      	b.n	800bfb8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800c11e:	4b22      	ldr	r3, [pc, #136]	; (800c1a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800c120:	f993 30cc 	ldrsb.w	r3, [r3, #204]	; 0xcc
 800c124:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c126:	2000      	movs	r0, #0
            break;
 800c128:	e746      	b.n	800bfb8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800c12a:	4b1f      	ldr	r3, [pc, #124]	; (800c1a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800c12c:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800c130:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c132:	2000      	movs	r0, #0
            break;
 800c134:	e740      	b.n	800bfb8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 800c136:	4b1c      	ldr	r3, [pc, #112]	; (800c1a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800c138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c13a:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c13c:	2000      	movs	r0, #0
            break;
 800c13e:	e73b      	b.n	800bfb8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 800c140:	4b19      	ldr	r3, [pc, #100]	; (800c1a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800c142:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800c146:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c148:	2000      	movs	r0, #0
            break;
 800c14a:	e735      	b.n	800bfb8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800c14c:	4b16      	ldr	r3, [pc, #88]	; (800c1a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800c14e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c150:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c152:	2000      	movs	r0, #0
            break;
 800c154:	e730      	b.n	800bfb8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.Contexts = &Nvm;
 800c156:	4b14      	ldr	r3, [pc, #80]	; (800c1a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800c158:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c15a:	2000      	movs	r0, #0
            break;
 800c15c:	e72c      	b.n	800bfb8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.BackupContexts = &NvmBackup;
 800c15e:	4b17      	ldr	r3, [pc, #92]	; (800c1bc <LoRaMacMibGetRequestConfirm+0x298>)
 800c160:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c162:	2000      	movs	r0, #0
            break;
 800c164:	e728      	b.n	800bfb8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800c166:	4b10      	ldr	r3, [pc, #64]	; (800c1a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800c168:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800c16c:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c16e:	2000      	movs	r0, #0
            break;
 800c170:	e722      	b.n	800bfb8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 800c172:	4b0d      	ldr	r3, [pc, #52]	; (800c1a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800c174:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800c178:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800c17a:	f001 fe53 	bl	800de24 <RegionGetVersion>
 800c17e:	60a0      	str	r0, [r4, #8]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c180:	2000      	movs	r0, #0
            break;
 800c182:	e719      	b.n	800bfb8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800c184:	4b08      	ldr	r3, [pc, #32]	; (800c1a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800c186:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c18a:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c18c:	2000      	movs	r0, #0
            break;
 800c18e:	e713      	b.n	800bfb8 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 800c190:	4b05      	ldr	r3, [pc, #20]	; (800c1a8 <LoRaMacMibGetRequestConfirm+0x284>)
 800c192:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 800c196:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c198:	2000      	movs	r0, #0
            break;
 800c19a:	e70d      	b.n	800bfb8 <LoRaMacMibGetRequestConfirm+0x94>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800c19c:	4620      	mov	r0, r4
 800c19e:	f000 fd45 	bl	800cc2c <LoRaMacClassBMibGetRequestConfirm>
            break;
 800c1a2:	e709      	b.n	800bfb8 <LoRaMacMibGetRequestConfirm+0x94>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c1a4:	2003      	movs	r0, #3
}
 800c1a6:	4770      	bx	lr
 800c1a8:	20008000 	.word	0x20008000
 800c1ac:	20008064 	.word	0x20008064
 800c1b0:	200080a8 	.word	0x200080a8
 800c1b4:	2000806c 	.word	0x2000806c
 800c1b8:	200080b0 	.word	0x200080b0
 800c1bc:	2000858c 	.word	0x2000858c

0800c1c0 <LoRaMacMibSetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800c1c0:	2800      	cmp	r0, #0
 800c1c2:	f000 8254 	beq.w	800c66e <LoRaMacMibSetRequestConfirm+0x4ae>
{
 800c1c6:	b530      	push	{r4, r5, lr}
 800c1c8:	b085      	sub	sp, #20
 800c1ca:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800c1cc:	4ba3      	ldr	r3, [pc, #652]	; (800c45c <LoRaMacMibSetRequestConfirm+0x29c>)
 800c1ce:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800c1d2:	f013 0f02 	tst.w	r3, #2
 800c1d6:	f040 824c 	bne.w	800c672 <LoRaMacMibSetRequestConfirm+0x4b2>
    {
        return LORAMAC_STATUS_BUSY;
    }

    switch( mibSet->Type )
 800c1da:	7805      	ldrb	r5, [r0, #0]
 800c1dc:	2d39      	cmp	r5, #57	; 0x39
 800c1de:	f200 8243 	bhi.w	800c668 <LoRaMacMibSetRequestConfirm+0x4a8>
 800c1e2:	e8df f015 	tbh	[pc, r5, lsl #1]
 800c1e6:	003a      	.short	0x003a
 800c1e8:	00500047 	.word	0x00500047
 800c1ec:	005e0057 	.word	0x005e0057
 800c1f0:	006a0064 	.word	0x006a0064
 800c1f4:	007b0070 	.word	0x007b0070
 800c1f8:	00910086 	.word	0x00910086
 800c1fc:	00a7009c 	.word	0x00a7009c
 800c200:	00bd00b2 	.word	0x00bd00b2
 800c204:	00d400c9 	.word	0x00d400c9
 800c208:	00da0241 	.word	0x00da0241
 800c20c:	011a0100 	.word	0x011a0100
 800c210:	017d0153 	.word	0x017d0153
 800c214:	018d016d 	.word	0x018d016d
 800c218:	019d0198 	.word	0x019d0198
 800c21c:	01a701a2 	.word	0x01a701a2
 800c220:	024101ac 	.word	0x024101ac
 800c224:	01c601b1 	.word	0x01c601b1
 800c228:	01df01f3 	.word	0x01df01f3
 800c22c:	020e0207 	.word	0x020e0207
 800c230:	021b0216 	.word	0x021b0216
 800c234:	02410221 	.word	0x02410221
 800c238:	02410224 	.word	0x02410224
 800c23c:	02410241 	.word	0x02410241
 800c240:	02410241 	.word	0x02410241
 800c244:	02410241 	.word	0x02410241
 800c248:	02410241 	.word	0x02410241
 800c24c:	02410241 	.word	0x02410241
 800c250:	02410241 	.word	0x02410241
 800c254:	02350241 	.word	0x02350241
 800c258:	023b      	.short	0x023b
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800c25a:	7900      	ldrb	r0, [r0, #4]
 800c25c:	f7ff f95a 	bl	800b514 <SwitchClass>
            break;
        }
    }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( status == LORAMAC_STATUS_OK )
 800c260:	b930      	cbnz	r0, 800c270 <LoRaMacMibSetRequestConfirm+0xb0>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800c262:	4a7e      	ldr	r2, [pc, #504]	; (800c45c <LoRaMacMibSetRequestConfirm+0x29c>)
 800c264:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800c268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c26c:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    }
#endif /* LORAMAC_VERSION */
    return status;
}
 800c270:	b005      	add	sp, #20
 800c272:	bd30      	pop	{r4, r5, pc}
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800c274:	7903      	ldrb	r3, [r0, #4]
 800c276:	2b02      	cmp	r3, #2
 800c278:	f000 81fd 	beq.w	800c676 <LoRaMacMibSetRequestConfirm+0x4b6>
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 800c27c:	4a78      	ldr	r2, [pc, #480]	; (800c460 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800c27e:	f882 311c 	strb.w	r3, [r2, #284]	; 0x11c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c282:	2000      	movs	r0, #0
 800c284:	e7ed      	b.n	800c262 <LoRaMacMibSetRequestConfirm+0xa2>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800c286:	6840      	ldr	r0, [r0, #4]
 800c288:	f004 fce2 	bl	8010c50 <SecureElementSetDevEui>
 800c28c:	2800      	cmp	r0, #0
 800c28e:	d0e8      	beq.n	800c262 <LoRaMacMibSetRequestConfirm+0xa2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c290:	2003      	movs	r0, #3
 800c292:	e7ed      	b.n	800c270 <LoRaMacMibSetRequestConfirm+0xb0>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800c294:	6840      	ldr	r0, [r0, #4]
 800c296:	f004 fcef 	bl	8010c78 <SecureElementSetJoinEui>
 800c29a:	2800      	cmp	r0, #0
 800c29c:	d0e1      	beq.n	800c262 <LoRaMacMibSetRequestConfirm+0xa2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c29e:	4628      	mov	r0, r5
 800c2a0:	e7e6      	b.n	800c270 <LoRaMacMibSetRequestConfirm+0xb0>
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 800c2a2:	7902      	ldrb	r2, [r0, #4]
 800c2a4:	4b6e      	ldr	r3, [pc, #440]	; (800c460 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800c2a6:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c2aa:	2000      	movs	r0, #0
 800c2ac:	e7d9      	b.n	800c262 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 800c2ae:	6842      	ldr	r2, [r0, #4]
 800c2b0:	4b6b      	ldr	r3, [pc, #428]	; (800c460 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800c2b2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c2b6:	2000      	movs	r0, #0
 800c2b8:	e7d3      	b.n	800c262 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 800c2ba:	6842      	ldr	r2, [r0, #4]
 800c2bc:	4b68      	ldr	r3, [pc, #416]	; (800c460 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800c2be:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c2c2:	2000      	movs	r0, #0
 800c2c4:	e7cd      	b.n	800c262 <LoRaMacMibSetRequestConfirm+0xa2>
            if( mibSet->Param.AppKey != NULL )
 800c2c6:	6841      	ldr	r1, [r0, #4]
 800c2c8:	2900      	cmp	r1, #0
 800c2ca:	f000 81d6 	beq.w	800c67a <LoRaMacMibSetRequestConfirm+0x4ba>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800c2ce:	2000      	movs	r0, #0
 800c2d0:	f001 fa6e 	bl	800d7b0 <LoRaMacCryptoSetKey>
 800c2d4:	2800      	cmp	r0, #0
 800c2d6:	d0c4      	beq.n	800c262 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c2d8:	2011      	movs	r0, #17
 800c2da:	e7c9      	b.n	800c270 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.NwkKey != NULL )
 800c2dc:	6841      	ldr	r1, [r0, #4]
 800c2de:	2900      	cmp	r1, #0
 800c2e0:	f000 81cd 	beq.w	800c67e <LoRaMacMibSetRequestConfirm+0x4be>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800c2e4:	2001      	movs	r0, #1
 800c2e6:	f001 fa63 	bl	800d7b0 <LoRaMacCryptoSetKey>
 800c2ea:	2800      	cmp	r0, #0
 800c2ec:	d0b9      	beq.n	800c262 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c2ee:	2011      	movs	r0, #17
 800c2f0:	e7be      	b.n	800c270 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.NwkSKey != NULL )
 800c2f2:	6841      	ldr	r1, [r0, #4]
 800c2f4:	2900      	cmp	r1, #0
 800c2f6:	f000 81c4 	beq.w	800c682 <LoRaMacMibSetRequestConfirm+0x4c2>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800c2fa:	2002      	movs	r0, #2
 800c2fc:	f001 fa58 	bl	800d7b0 <LoRaMacCryptoSetKey>
 800c300:	2800      	cmp	r0, #0
 800c302:	d0ae      	beq.n	800c262 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c304:	2011      	movs	r0, #17
 800c306:	e7b3      	b.n	800c270 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.AppSKey != NULL )
 800c308:	6841      	ldr	r1, [r0, #4]
 800c30a:	2900      	cmp	r1, #0
 800c30c:	f000 81bb 	beq.w	800c686 <LoRaMacMibSetRequestConfirm+0x4c6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800c310:	2003      	movs	r0, #3
 800c312:	f001 fa4d 	bl	800d7b0 <LoRaMacCryptoSetKey>
 800c316:	2800      	cmp	r0, #0
 800c318:	d0a3      	beq.n	800c262 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c31a:	2011      	movs	r0, #17
 800c31c:	e7a8      	b.n	800c270 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.McKEKey != NULL )
 800c31e:	6841      	ldr	r1, [r0, #4]
 800c320:	2900      	cmp	r1, #0
 800c322:	f000 81b2 	beq.w	800c68a <LoRaMacMibSetRequestConfirm+0x4ca>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800c326:	207f      	movs	r0, #127	; 0x7f
 800c328:	f001 fa42 	bl	800d7b0 <LoRaMacCryptoSetKey>
 800c32c:	2800      	cmp	r0, #0
 800c32e:	d098      	beq.n	800c262 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c330:	2011      	movs	r0, #17
 800c332:	e79d      	b.n	800c270 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.McKey0 != NULL )
 800c334:	6841      	ldr	r1, [r0, #4]
 800c336:	2900      	cmp	r1, #0
 800c338:	f000 81a9 	beq.w	800c68e <LoRaMacMibSetRequestConfirm+0x4ce>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800c33c:	2080      	movs	r0, #128	; 0x80
 800c33e:	f001 fa37 	bl	800d7b0 <LoRaMacCryptoSetKey>
 800c342:	2800      	cmp	r0, #0
 800c344:	d08d      	beq.n	800c262 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c346:	2011      	movs	r0, #17
 800c348:	e792      	b.n	800c270 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.McAppSKey0 != NULL )
 800c34a:	6841      	ldr	r1, [r0, #4]
 800c34c:	2900      	cmp	r1, #0
 800c34e:	f000 81a0 	beq.w	800c692 <LoRaMacMibSetRequestConfirm+0x4d2>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800c352:	2081      	movs	r0, #129	; 0x81
 800c354:	f001 fa2c 	bl	800d7b0 <LoRaMacCryptoSetKey>
 800c358:	2800      	cmp	r0, #0
 800c35a:	d082      	beq.n	800c262 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c35c:	2011      	movs	r0, #17
 800c35e:	e787      	b.n	800c270 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.McNwkSKey0 != NULL )
 800c360:	6841      	ldr	r1, [r0, #4]
 800c362:	2900      	cmp	r1, #0
 800c364:	f000 8197 	beq.w	800c696 <LoRaMacMibSetRequestConfirm+0x4d6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800c368:	2082      	movs	r0, #130	; 0x82
 800c36a:	f001 fa21 	bl	800d7b0 <LoRaMacCryptoSetKey>
 800c36e:	2800      	cmp	r0, #0
 800c370:	f43f af77 	beq.w	800c262 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c374:	2011      	movs	r0, #17
 800c376:	e77b      	b.n	800c270 <LoRaMacMibSetRequestConfirm+0xb0>
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800c378:	7900      	ldrb	r0, [r0, #4]
 800c37a:	4b39      	ldr	r3, [pc, #228]	; (800c460 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800c37c:	f883 0105 	strb.w	r0, [r3, #261]	; 0x105
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800c380:	4c38      	ldr	r4, [pc, #224]	; (800c464 <LoRaMacMibSetRequestConfirm+0x2a4>)
 800c382:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c384:	4798      	blx	r3
            Radio.Sleep( );
 800c386:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c388:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c38a:	2000      	movs	r0, #0
 800c38c:	e769      	b.n	800c262 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800c38e:	7902      	ldrb	r2, [r0, #4]
 800c390:	4b33      	ldr	r3, [pc, #204]	; (800c460 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800c392:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c396:	2000      	movs	r0, #0
 800c398:	e763      	b.n	800c262 <LoRaMacMibSetRequestConfirm+0xa2>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800c39a:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800c39e:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800c3a2:	4b2f      	ldr	r3, [pc, #188]	; (800c460 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800c3a4:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800c3a8:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800c3ac:	2207      	movs	r2, #7
 800c3ae:	a901      	add	r1, sp, #4
 800c3b0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c3b4:	f001 fc42 	bl	800dc3c <RegionVerify>
 800c3b8:	b908      	cbnz	r0, 800c3be <LoRaMacMibSetRequestConfirm+0x1fe>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c3ba:	2003      	movs	r0, #3
 800c3bc:	e750      	b.n	800c260 <LoRaMacMibSetRequestConfirm+0xa0>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800c3be:	6863      	ldr	r3, [r4, #4]
 800c3c0:	9301      	str	r3, [sp, #4]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	a901      	add	r1, sp, #4
 800c3c6:	4b26      	ldr	r3, [pc, #152]	; (800c460 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800c3c8:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c3cc:	f001 fc36 	bl	800dc3c <RegionVerify>
 800c3d0:	2800      	cmp	r0, #0
 800c3d2:	f000 8162 	beq.w	800c69a <LoRaMacMibSetRequestConfirm+0x4da>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800c3d6:	4b24      	ldr	r3, [pc, #144]	; (800c468 <LoRaMacMibSetRequestConfirm+0x2a8>)
 800c3d8:	3404      	adds	r4, #4
 800c3da:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c3de:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c3e2:	2000      	movs	r0, #0
 800c3e4:	e73c      	b.n	800c260 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800c3e6:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800c3ea:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800c3ee:	4b1c      	ldr	r3, [pc, #112]	; (800c460 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800c3f0:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800c3f4:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800c3f8:	2207      	movs	r2, #7
 800c3fa:	a901      	add	r1, sp, #4
 800c3fc:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c400:	f001 fc1c 	bl	800dc3c <RegionVerify>
 800c404:	2800      	cmp	r0, #0
 800c406:	f000 814a 	beq.w	800c69e <LoRaMacMibSetRequestConfirm+0x4de>
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800c40a:	4b18      	ldr	r3, [pc, #96]	; (800c46c <LoRaMacMibSetRequestConfirm+0x2ac>)
 800c40c:	3404      	adds	r4, #4
 800c40e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c412:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c416:	2000      	movs	r0, #0
 800c418:	e722      	b.n	800c260 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800c41a:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800c41e:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800c422:	4b0f      	ldr	r3, [pc, #60]	; (800c460 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800c424:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800c428:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800c42c:	2207      	movs	r2, #7
 800c42e:	a901      	add	r1, sp, #4
 800c430:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c434:	f001 fc02 	bl	800dc3c <RegionVerify>
 800c438:	2800      	cmp	r0, #0
 800c43a:	f000 8132 	beq.w	800c6a2 <LoRaMacMibSetRequestConfirm+0x4e2>
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800c43e:	4b08      	ldr	r3, [pc, #32]	; (800c460 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800c440:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800c444:	3404      	adds	r4, #4
 800c446:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c44a:	e882 0003 	stmia.w	r2, {r0, r1}
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800c44e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800c452:	2b02      	cmp	r3, #2
 800c454:	d00c      	beq.n	800c470 <LoRaMacMibSetRequestConfirm+0x2b0>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c456:	2000      	movs	r0, #0
 800c458:	e702      	b.n	800c260 <LoRaMacMibSetRequestConfirm+0xa0>
 800c45a:	bf00      	nop
 800c45c:	20000814 	.word	0x20000814
 800c460:	20008000 	.word	0x20008000
 800c464:	08014e54 	.word	0x08014e54
 800c468:	20008064 	.word	0x20008064
 800c46c:	200080a8 	.word	0x200080a8
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800c470:	f1a2 036c 	sub.w	r3, r2, #108	; 0x6c
 800c474:	f893 011c 	ldrb.w	r0, [r3, #284]	; 0x11c
 800c478:	2800      	cmp	r0, #0
 800c47a:	f43f aef1 	beq.w	800c260 <LoRaMacMibSetRequestConfirm+0xa0>
                    Radio.Sleep( );
 800c47e:	4b90      	ldr	r3, [pc, #576]	; (800c6c0 <LoRaMacMibSetRequestConfirm+0x500>)
 800c480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c482:	4798      	blx	r3
                    OpenContinuousRxCWindow( );
 800c484:	f7fe fd82 	bl	800af8c <OpenContinuousRxCWindow>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c488:	2000      	movs	r0, #0
 800c48a:	e6e9      	b.n	800c260 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800c48c:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800c490:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800c494:	4b8b      	ldr	r3, [pc, #556]	; (800c6c4 <LoRaMacMibSetRequestConfirm+0x504>)
 800c496:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800c49a:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800c49e:	2207      	movs	r2, #7
 800c4a0:	a901      	add	r1, sp, #4
 800c4a2:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c4a6:	f001 fbc9 	bl	800dc3c <RegionVerify>
 800c4aa:	2800      	cmp	r0, #0
 800c4ac:	f000 80fb 	beq.w	800c6a6 <LoRaMacMibSetRequestConfirm+0x4e6>
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800c4b0:	4b85      	ldr	r3, [pc, #532]	; (800c6c8 <LoRaMacMibSetRequestConfirm+0x508>)
 800c4b2:	3404      	adds	r4, #4
 800c4b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c4b8:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c4bc:	2000      	movs	r0, #0
 800c4be:	e6cf      	b.n	800c260 <LoRaMacMibSetRequestConfirm+0xa0>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800c4c0:	6843      	ldr	r3, [r0, #4]
 800c4c2:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800c4c4:	2301      	movs	r3, #1
 800c4c6:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800c4ca:	a902      	add	r1, sp, #8
 800c4cc:	4b7d      	ldr	r3, [pc, #500]	; (800c6c4 <LoRaMacMibSetRequestConfirm+0x504>)
 800c4ce:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c4d2:	f001 fbd1 	bl	800dc78 <RegionChanMaskSet>
 800c4d6:	b108      	cbz	r0, 800c4dc <LoRaMacMibSetRequestConfirm+0x31c>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c4d8:	2000      	movs	r0, #0
 800c4da:	e6c1      	b.n	800c260 <LoRaMacMibSetRequestConfirm+0xa0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c4dc:	2003      	movs	r0, #3
 800c4de:	e6c7      	b.n	800c270 <LoRaMacMibSetRequestConfirm+0xb0>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800c4e0:	6843      	ldr	r3, [r0, #4]
 800c4e2:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800c4ea:	a902      	add	r1, sp, #8
 800c4ec:	4b75      	ldr	r3, [pc, #468]	; (800c6c4 <LoRaMacMibSetRequestConfirm+0x504>)
 800c4ee:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c4f2:	f001 fbc1 	bl	800dc78 <RegionChanMaskSet>
 800c4f6:	b108      	cbz	r0, 800c4fc <LoRaMacMibSetRequestConfirm+0x33c>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c4f8:	2000      	movs	r0, #0
 800c4fa:	e6b1      	b.n	800c260 <LoRaMacMibSetRequestConfirm+0xa0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c4fc:	2003      	movs	r0, #3
 800c4fe:	e6b7      	b.n	800c270 <LoRaMacMibSetRequestConfirm+0xb0>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800c500:	7902      	ldrb	r2, [r0, #4]
 800c502:	1e53      	subs	r3, r2, #1
 800c504:	b2db      	uxtb	r3, r3
 800c506:	2b0e      	cmp	r3, #14
 800c508:	f200 80cf 	bhi.w	800c6aa <LoRaMacMibSetRequestConfirm+0x4ea>
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800c50c:	4b6d      	ldr	r3, [pc, #436]	; (800c6c4 <LoRaMacMibSetRequestConfirm+0x504>)
 800c50e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c512:	2000      	movs	r0, #0
 800c514:	e6a4      	b.n	800c260 <LoRaMacMibSetRequestConfirm+0xa0>
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800c516:	6842      	ldr	r2, [r0, #4]
 800c518:	4b6a      	ldr	r3, [pc, #424]	; (800c6c4 <LoRaMacMibSetRequestConfirm+0x504>)
 800c51a:	64da      	str	r2, [r3, #76]	; 0x4c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c51c:	2000      	movs	r0, #0
 800c51e:	e6a0      	b.n	800c262 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800c520:	6842      	ldr	r2, [r0, #4]
 800c522:	4b68      	ldr	r3, [pc, #416]	; (800c6c4 <LoRaMacMibSetRequestConfirm+0x504>)
 800c524:	651a      	str	r2, [r3, #80]	; 0x50
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c526:	2000      	movs	r0, #0
 800c528:	e69b      	b.n	800c262 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800c52a:	6842      	ldr	r2, [r0, #4]
 800c52c:	4b65      	ldr	r3, [pc, #404]	; (800c6c4 <LoRaMacMibSetRequestConfirm+0x504>)
 800c52e:	655a      	str	r2, [r3, #84]	; 0x54
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c530:	2000      	movs	r0, #0
 800c532:	e696      	b.n	800c262 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800c534:	6842      	ldr	r2, [r0, #4]
 800c536:	4b63      	ldr	r3, [pc, #396]	; (800c6c4 <LoRaMacMibSetRequestConfirm+0x504>)
 800c538:	659a      	str	r2, [r3, #88]	; 0x58
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c53a:	2000      	movs	r0, #0
 800c53c:	e691      	b.n	800c262 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800c53e:	6842      	ldr	r2, [r0, #4]
 800c540:	4b60      	ldr	r3, [pc, #384]	; (800c6c4 <LoRaMacMibSetRequestConfirm+0x504>)
 800c542:	65da      	str	r2, [r3, #92]	; 0x5c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c544:	2000      	movs	r0, #0
 800c546:	e68c      	b.n	800c262 <LoRaMacMibSetRequestConfirm+0xa2>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800c548:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800c54c:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800c550:	2206      	movs	r2, #6
 800c552:	a901      	add	r1, sp, #4
 800c554:	4b5b      	ldr	r3, [pc, #364]	; (800c6c4 <LoRaMacMibSetRequestConfirm+0x504>)
 800c556:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c55a:	f001 fb6f 	bl	800dc3c <RegionVerify>
 800c55e:	2800      	cmp	r0, #0
 800c560:	f000 80a5 	beq.w	800c6ae <LoRaMacMibSetRequestConfirm+0x4ee>
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 800c564:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800c568:	4b56      	ldr	r3, [pc, #344]	; (800c6c4 <LoRaMacMibSetRequestConfirm+0x504>)
 800c56a:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c56e:	2000      	movs	r0, #0
 800c570:	e676      	b.n	800c260 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800c572:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800c576:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800c57a:	4b52      	ldr	r3, [pc, #328]	; (800c6c4 <LoRaMacMibSetRequestConfirm+0x504>)
 800c57c:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800c580:	f88d 2006 	strb.w	r2, [sp, #6]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800c584:	2205      	movs	r2, #5
 800c586:	a901      	add	r1, sp, #4
 800c588:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c58c:	f001 fb56 	bl	800dc3c <RegionVerify>
 800c590:	2800      	cmp	r0, #0
 800c592:	f000 808e 	beq.w	800c6b2 <LoRaMacMibSetRequestConfirm+0x4f2>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800c596:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800c59a:	4b4a      	ldr	r3, [pc, #296]	; (800c6c4 <LoRaMacMibSetRequestConfirm+0x504>)
 800c59c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c5a0:	2000      	movs	r0, #0
 800c5a2:	e65d      	b.n	800c260 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800c5a4:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800c5a8:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800c5ac:	220a      	movs	r2, #10
 800c5ae:	a901      	add	r1, sp, #4
 800c5b0:	4b44      	ldr	r3, [pc, #272]	; (800c6c4 <LoRaMacMibSetRequestConfirm+0x504>)
 800c5b2:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c5b6:	f001 fb41 	bl	800dc3c <RegionVerify>
 800c5ba:	2800      	cmp	r0, #0
 800c5bc:	d07b      	beq.n	800c6b6 <LoRaMacMibSetRequestConfirm+0x4f6>
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 800c5be:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800c5c2:	4b40      	ldr	r3, [pc, #256]	; (800c6c4 <LoRaMacMibSetRequestConfirm+0x504>)
 800c5c4:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c5c8:	2000      	movs	r0, #0
 800c5ca:	e649      	b.n	800c260 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800c5cc:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800c5d0:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 800c5d4:	2209      	movs	r2, #9
 800c5d6:	a901      	add	r1, sp, #4
 800c5d8:	4b3a      	ldr	r3, [pc, #232]	; (800c6c4 <LoRaMacMibSetRequestConfirm+0x504>)
 800c5da:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c5de:	f001 fb2d 	bl	800dc3c <RegionVerify>
 800c5e2:	2800      	cmp	r0, #0
 800c5e4:	d069      	beq.n	800c6ba <LoRaMacMibSetRequestConfirm+0x4fa>
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 800c5e6:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800c5ea:	4b36      	ldr	r3, [pc, #216]	; (800c6c4 <LoRaMacMibSetRequestConfirm+0x504>)
 800c5ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c5f0:	2000      	movs	r0, #0
 800c5f2:	e635      	b.n	800c260 <LoRaMacMibSetRequestConfirm+0xa0>
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800c5f4:	6842      	ldr	r2, [r0, #4]
 800c5f6:	4b33      	ldr	r3, [pc, #204]	; (800c6c4 <LoRaMacMibSetRequestConfirm+0x504>)
 800c5f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800c5fc:	645a      	str	r2, [r3, #68]	; 0x44
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c5fe:	2000      	movs	r0, #0
 800c600:	e62f      	b.n	800c262 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800c602:	7902      	ldrb	r2, [r0, #4]
 800c604:	4b2f      	ldr	r3, [pc, #188]	; (800c6c4 <LoRaMacMibSetRequestConfirm+0x504>)
 800c606:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 800c60a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c60e:	2000      	movs	r0, #0
 800c610:	e627      	b.n	800c262 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800c612:	6842      	ldr	r2, [r0, #4]
 800c614:	4b2b      	ldr	r3, [pc, #172]	; (800c6c4 <LoRaMacMibSetRequestConfirm+0x504>)
 800c616:	67da      	str	r2, [r3, #124]	; 0x7c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c618:	2000      	movs	r0, #0
 800c61a:	e622      	b.n	800c262 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800c61c:	6842      	ldr	r2, [r0, #4]
 800c61e:	4b29      	ldr	r3, [pc, #164]	; (800c6c4 <LoRaMacMibSetRequestConfirm+0x504>)
 800c620:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c624:	2000      	movs	r0, #0
 800c626:	e61c      	b.n	800c262 <LoRaMacMibSetRequestConfirm+0xa2>
            status = RestoreNvmData( );
 800c628:	f7fe fdc4 	bl	800b1b4 <RestoreNvmData>
            break;
 800c62c:	e618      	b.n	800c260 <LoRaMacMibSetRequestConfirm+0xa0>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800c62e:	7983      	ldrb	r3, [r0, #6]
 800c630:	2b01      	cmp	r3, #1
 800c632:	d901      	bls.n	800c638 <LoRaMacMibSetRequestConfirm+0x478>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c634:	2003      	movs	r0, #3
 800c636:	e61b      	b.n	800c270 <LoRaMacMibSetRequestConfirm+0xb0>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800c638:	6842      	ldr	r2, [r0, #4]
 800c63a:	4b22      	ldr	r3, [pc, #136]	; (800c6c4 <LoRaMacMibSetRequestConfirm+0x504>)
 800c63c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800c640:	6840      	ldr	r0, [r0, #4]
 800c642:	f000 ff69 	bl	800d518 <LoRaMacCryptoSetLrWanVersion>
 800c646:	2800      	cmp	r0, #0
 800c648:	f43f ae0a 	beq.w	800c260 <LoRaMacMibSetRequestConfirm+0xa0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c64c:	2011      	movs	r0, #17
 800c64e:	e60f      	b.n	800c270 <LoRaMacMibSetRequestConfirm+0xb0>
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 800c650:	6842      	ldr	r2, [r0, #4]
 800c652:	4b1c      	ldr	r3, [pc, #112]	; (800c6c4 <LoRaMacMibSetRequestConfirm+0x504>)
 800c654:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c658:	2000      	movs	r0, #0
 800c65a:	e602      	b.n	800c262 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 800c65c:	7902      	ldrb	r2, [r0, #4]
 800c65e:	4b19      	ldr	r3, [pc, #100]	; (800c6c4 <LoRaMacMibSetRequestConfirm+0x504>)
 800c660:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c664:	2000      	movs	r0, #0
 800c666:	e5fc      	b.n	800c262 <LoRaMacMibSetRequestConfirm+0xa2>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800c668:	f000 fae2 	bl	800cc30 <LoRaMacMibClassBSetRequestConfirm>
            break;
 800c66c:	e5f8      	b.n	800c260 <LoRaMacMibSetRequestConfirm+0xa0>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c66e:	2003      	movs	r0, #3
}
 800c670:	4770      	bx	lr
        return LORAMAC_STATUS_BUSY;
 800c672:	2001      	movs	r0, #1
 800c674:	e5fc      	b.n	800c270 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c676:	2003      	movs	r0, #3
 800c678:	e5fa      	b.n	800c270 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c67a:	2003      	movs	r0, #3
 800c67c:	e5f8      	b.n	800c270 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c67e:	2003      	movs	r0, #3
 800c680:	e5f6      	b.n	800c270 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c682:	2003      	movs	r0, #3
 800c684:	e5f4      	b.n	800c270 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c686:	2003      	movs	r0, #3
 800c688:	e5f2      	b.n	800c270 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c68a:	2003      	movs	r0, #3
 800c68c:	e5f0      	b.n	800c270 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c68e:	2003      	movs	r0, #3
 800c690:	e5ee      	b.n	800c270 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c692:	2003      	movs	r0, #3
 800c694:	e5ec      	b.n	800c270 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c696:	2003      	movs	r0, #3
 800c698:	e5ea      	b.n	800c270 <LoRaMacMibSetRequestConfirm+0xb0>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c69a:	2003      	movs	r0, #3
 800c69c:	e5e8      	b.n	800c270 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c69e:	2003      	movs	r0, #3
 800c6a0:	e5e6      	b.n	800c270 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c6a2:	2003      	movs	r0, #3
 800c6a4:	e5e4      	b.n	800c270 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c6a6:	2003      	movs	r0, #3
 800c6a8:	e5e2      	b.n	800c270 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c6aa:	2003      	movs	r0, #3
 800c6ac:	e5e0      	b.n	800c270 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c6ae:	2003      	movs	r0, #3
 800c6b0:	e5de      	b.n	800c270 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c6b2:	2003      	movs	r0, #3
 800c6b4:	e5dc      	b.n	800c270 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c6b6:	2003      	movs	r0, #3
 800c6b8:	e5da      	b.n	800c270 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c6ba:	2003      	movs	r0, #3
 800c6bc:	e5d8      	b.n	800c270 <LoRaMacMibSetRequestConfirm+0xb0>
 800c6be:	bf00      	nop
 800c6c0:	08014e54 	.word	0x08014e54
 800c6c4:	20008000 	.word	0x20008000
 800c6c8:	200080b0 	.word	0x200080b0

0800c6cc <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800c6cc:	b570      	push	{r4, r5, r6, lr}
 800c6ce:	b086      	sub	sp, #24
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	f8ad 3010 	strh.w	r3, [sp, #16]

    if( mlmeRequest == NULL )
 800c6d6:	2800      	cmp	r0, #0
 800c6d8:	f000 80ea 	beq.w	800c8b0 <LoRaMacMlmeRequest+0x1e4>
 800c6dc:	4605      	mov	r5, r0
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 800c6de:	6103      	str	r3, [r0, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 800c6e0:	f7ff f920 	bl	800b924 <LoRaMacIsBusy>
 800c6e4:	b118      	cbz	r0, 800c6ee <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 800c6e6:	2401      	movs	r4, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 800c6e8:	4620      	mov	r0, r4
 800c6ea:	b006      	add	sp, #24
 800c6ec:	bd70      	pop	{r4, r5, r6, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800c6ee:	f000 fd49 	bl	800d184 <LoRaMacConfirmQueueIsFull>
 800c6f2:	b108      	cbz	r0, 800c6f8 <LoRaMacMlmeRequest+0x2c>
        return LORAMAC_STATUS_BUSY;
 800c6f4:	2401      	movs	r4, #1
 800c6f6:	e7f7      	b.n	800c6e8 <LoRaMacMlmeRequest+0x1c>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800c6f8:	f000 fd3e 	bl	800d178 <LoRaMacConfirmQueueGetCnt>
 800c6fc:	b308      	cbz	r0, 800c742 <LoRaMacMlmeRequest+0x76>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c6fe:	4b6d      	ldr	r3, [pc, #436]	; (800c8b4 <LoRaMacMlmeRequest+0x1e8>)
 800c700:	2101      	movs	r1, #1
 800c702:	f883 1459 	strb.w	r1, [r3, #1113]	; 0x459
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800c706:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800c70a:	f042 0204 	orr.w	r2, r2, #4
 800c70e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    queueElement.Request = mlmeRequest->Type;
 800c712:	782b      	ldrb	r3, [r5, #0]
 800c714:	f88d 3014 	strb.w	r3, [sp, #20]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c718:	f88d 1015 	strb.w	r1, [sp, #21]
    queueElement.RestrictCommonReadyToHandle = false;
 800c71c:	2200      	movs	r2, #0
 800c71e:	f88d 2017 	strb.w	r2, [sp, #23]
    queueElement.ReadyToHandle = false;
 800c722:	f88d 2016 	strb.w	r2, [sp, #22]
    switch( mlmeRequest->Type )
 800c726:	461c      	mov	r4, r3
 800c728:	3b01      	subs	r3, #1
 800c72a:	2b0c      	cmp	r3, #12
 800c72c:	f200 80a6 	bhi.w	800c87c <LoRaMacMlmeRequest+0x1b0>
 800c730:	e8df f003 	tbb	[pc, r3]
 800c734:	5aa4a40d 	.word	0x5aa4a40d
 800c738:	a4a4a464 	.word	0xa4a4a464
 800c73c:	7695a46d 	.word	0x7695a46d
 800c740:	8c          	.byte	0x8c
 800c741:	00          	.byte	0x00
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800c742:	2214      	movs	r2, #20
 800c744:	2100      	movs	r1, #0
 800c746:	485c      	ldr	r0, [pc, #368]	; (800c8b8 <LoRaMacMlmeRequest+0x1ec>)
 800c748:	f004 faef 	bl	8010d2a <memset1>
 800c74c:	e7d7      	b.n	800c6fe <LoRaMacMlmeRequest+0x32>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800c74e:	4b59      	ldr	r3, [pc, #356]	; (800c8b4 <LoRaMacMlmeRequest+0x1e8>)
 800c750:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800c754:	f013 0f20 	tst.w	r3, #32
 800c758:	d1c6      	bne.n	800c6e8 <LoRaMacMlmeRequest+0x1c>
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 800c75a:	792b      	ldrb	r3, [r5, #4]
 800c75c:	2b02      	cmp	r3, #2
 800c75e:	d003      	beq.n	800c768 <LoRaMacMlmeRequest+0x9c>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 800c760:	2b01      	cmp	r3, #1
 800c762:	d021      	beq.n	800c7a8 <LoRaMacMlmeRequest+0xdc>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800c764:	2402      	movs	r4, #2
 800c766:	e08a      	b.n	800c87e <LoRaMacMlmeRequest+0x1b2>
                ResetMacParameters( );
 800c768:	f7fe fe24 	bl	800b3b4 <ResetMacParameters>
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800c76c:	4c53      	ldr	r4, [pc, #332]	; (800c8bc <LoRaMacMlmeRequest+0x1f0>)
 800c76e:	2200      	movs	r2, #0
 800c770:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800c774:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800c778:	f001 fb1c 	bl	800ddb4 <RegionAlternateDr>
 800c77c:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800c780:	2307      	movs	r3, #7
 800c782:	f88d 3015 	strb.w	r3, [sp, #21]
                status = SendReJoinReq( JOIN_REQ );
 800c786:	20ff      	movs	r0, #255	; 0xff
 800c788:	f7fe ff4a 	bl	800b620 <SendReJoinReq>
                if( status != LORAMAC_STATUS_OK )
 800c78c:	4604      	mov	r4, r0
 800c78e:	2800      	cmp	r0, #0
 800c790:	d075      	beq.n	800c87e <LoRaMacMlmeRequest+0x1b2>
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800c792:	4e4a      	ldr	r6, [pc, #296]	; (800c8bc <LoRaMacMlmeRequest+0x1f0>)
 800c794:	2201      	movs	r2, #1
 800c796:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800c79a:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 800c79e:	f001 fb09 	bl	800ddb4 <RegionAlternateDr>
 800c7a2:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
 800c7a6:	e06a      	b.n	800c87e <LoRaMacMlmeRequest+0x1b2>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800c7a8:	4e44      	ldr	r6, [pc, #272]	; (800c8bc <LoRaMacMlmeRequest+0x1f0>)
 800c7aa:	2400      	movs	r4, #0
 800c7ac:	f886 4109 	strb.w	r4, [r6, #265]	; 0x109
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800c7b0:	2302      	movs	r3, #2
 800c7b2:	f88d 300c 	strb.w	r3, [sp, #12]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800c7b6:	4669      	mov	r1, sp
 800c7b8:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 800c7bc:	f001 fa30 	bl	800dc20 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 800c7c0:	792b      	ldrb	r3, [r5, #4]
 800c7c2:	f886 311c 	strb.w	r3, [r6, #284]	; 0x11c
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800c7c6:	f88d 4015 	strb.w	r4, [sp, #21]
                queueElement.ReadyToHandle = true;
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	f88d 3016 	strb.w	r3, [sp, #22]
                MacCtx.MacCallbacks->MacProcessNotify( );
 800c7d0:	4e38      	ldr	r6, [pc, #224]	; (800c8b4 <LoRaMacMlmeRequest+0x1e8>)
 800c7d2:	f8d6 3348 	ldr.w	r3, [r6, #840]	; 0x348
 800c7d6:	691b      	ldr	r3, [r3, #16]
 800c7d8:	4798      	blx	r3
                MacCtx.MacFlags.Bits.MacDone = 1;
 800c7da:	f896 3495 	ldrb.w	r3, [r6, #1173]	; 0x495
 800c7de:	f043 0320 	orr.w	r3, r3, #32
 800c7e2:	f886 3495 	strb.w	r3, [r6, #1173]	; 0x495
                status = LORAMAC_STATUS_OK;
 800c7e6:	e04a      	b.n	800c87e <LoRaMacMlmeRequest+0x1b2>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	a904      	add	r1, sp, #16
 800c7ec:	2002      	movs	r0, #2
 800c7ee:	f000 fac1 	bl	800cd74 <LoRaMacCommandsAddCmd>
 800c7f2:	4604      	mov	r4, r0
 800c7f4:	2800      	cmp	r0, #0
 800c7f6:	d042      	beq.n	800c87e <LoRaMacMlmeRequest+0x1b2>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800c7f8:	2413      	movs	r4, #19
 800c7fa:	e040      	b.n	800c87e <LoRaMacMlmeRequest+0x1b2>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800c7fc:	f995 200c 	ldrsb.w	r2, [r5, #12]
 800c800:	b2d2      	uxtb	r2, r2
 800c802:	68a9      	ldr	r1, [r5, #8]
 800c804:	88a8      	ldrh	r0, [r5, #4]
 800c806:	f7fc ffe3 	bl	80097d0 <SetTxContinuousWave>
 800c80a:	4604      	mov	r4, r0
            break;
 800c80c:	e037      	b.n	800c87e <LoRaMacMlmeRequest+0x1b2>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800c80e:	2200      	movs	r2, #0
 800c810:	a904      	add	r1, sp, #16
 800c812:	200d      	movs	r0, #13
 800c814:	f000 faae 	bl	800cd74 <LoRaMacCommandsAddCmd>
 800c818:	4604      	mov	r4, r0
 800c81a:	b380      	cbz	r0, 800c87e <LoRaMacMlmeRequest+0x1b2>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800c81c:	2413      	movs	r4, #19
 800c81e:	e02e      	b.n	800c87e <LoRaMacMlmeRequest+0x1b2>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800c820:	4b26      	ldr	r3, [pc, #152]	; (800c8bc <LoRaMacMlmeRequest+0x1f0>)
 800c822:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800c826:	b10b      	cbz	r3, 800c82c <LoRaMacMlmeRequest+0x160>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800c828:	2402      	movs	r4, #2
 800c82a:	e028      	b.n	800c87e <LoRaMacMlmeRequest+0x1b2>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800c82c:	792c      	ldrb	r4, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800c82e:	f004 0007 	and.w	r0, r4, #7
 800c832:	f000 f9f6 	bl	800cc22 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800c836:	f88d 4010 	strb.w	r4, [sp, #16]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800c83a:	2201      	movs	r2, #1
 800c83c:	a904      	add	r1, sp, #16
 800c83e:	2010      	movs	r0, #16
 800c840:	f000 fa98 	bl	800cd74 <LoRaMacCommandsAddCmd>
 800c844:	4604      	mov	r4, r0
 800c846:	b1d0      	cbz	r0, 800c87e <LoRaMacMlmeRequest+0x1b2>
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800c848:	2413      	movs	r4, #19
 800c84a:	e018      	b.n	800c87e <LoRaMacMlmeRequest+0x1b2>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800c84c:	2200      	movs	r2, #0
 800c84e:	a904      	add	r1, sp, #16
 800c850:	2012      	movs	r0, #18
 800c852:	f000 fa8f 	bl	800cd74 <LoRaMacCommandsAddCmd>
 800c856:	4604      	mov	r4, r0
 800c858:	b188      	cbz	r0, 800c87e <LoRaMacMlmeRequest+0x1b2>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800c85a:	2413      	movs	r4, #19
 800c85c:	e00f      	b.n	800c87e <LoRaMacMlmeRequest+0x1b2>
            queueElement.RestrictCommonReadyToHandle = true;
 800c85e:	2301      	movs	r3, #1
 800c860:	f88d 3017 	strb.w	r3, [sp, #23]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800c864:	f000 f9ce 	bl	800cc04 <LoRaMacClassBIsAcquisitionInProgress>
 800c868:	b108      	cbz	r0, 800c86e <LoRaMacMlmeRequest+0x1a2>
                status = LORAMAC_STATUS_BUSY;
 800c86a:	2401      	movs	r4, #1
 800c86c:	e007      	b.n	800c87e <LoRaMacMlmeRequest+0x1b2>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800c86e:	f000 f9c6 	bl	800cbfe <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800c872:	2000      	movs	r0, #0
 800c874:	f000 f9c8 	bl	800cc08 <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 800c878:	2400      	movs	r4, #0
 800c87a:	e000      	b.n	800c87e <LoRaMacMlmeRequest+0x1b2>
    switch( mlmeRequest->Type )
 800c87c:	2402      	movs	r4, #2
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800c87e:	4b0d      	ldr	r3, [pc, #52]	; (800c8b4 <LoRaMacMlmeRequest+0x1e8>)
 800c880:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 800c884:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 800c886:	b17c      	cbz	r4, 800c8a8 <LoRaMacMlmeRequest+0x1dc>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800c888:	f000 fc76 	bl	800d178 <LoRaMacConfirmQueueGetCnt>
 800c88c:	2800      	cmp	r0, #0
 800c88e:	f47f af2b 	bne.w	800c6e8 <LoRaMacMlmeRequest+0x1c>
            MacCtx.NodeAckRequested = false;
 800c892:	4b08      	ldr	r3, [pc, #32]	; (800c8b4 <LoRaMacMlmeRequest+0x1e8>)
 800c894:	2100      	movs	r1, #0
 800c896:	f883 141e 	strb.w	r1, [r3, #1054]	; 0x41e
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800c89a:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800c89e:	f361 0282 	bfi	r2, r1, #2, #1
 800c8a2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
 800c8a6:	e71f      	b.n	800c6e8 <LoRaMacMlmeRequest+0x1c>
        LoRaMacConfirmQueueAdd( &queueElement );
 800c8a8:	a805      	add	r0, sp, #20
 800c8aa:	f000 fba1 	bl	800cff0 <LoRaMacConfirmQueueAdd>
 800c8ae:	e71b      	b.n	800c6e8 <LoRaMacMlmeRequest+0x1c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c8b0:	2403      	movs	r4, #3
 800c8b2:	e719      	b.n	800c6e8 <LoRaMacMlmeRequest+0x1c>
 800c8b4:	20000814 	.word	0x20000814
 800c8b8:	20000c6c 	.word	0x20000c6c
 800c8bc:	20008000 	.word	0x20008000

0800c8c0 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 800c8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8c4:	b091      	sub	sp, #68	; 0x44
 800c8c6:	9103      	str	r1, [sp, #12]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 800c8c8:	2800      	cmp	r0, #0
 800c8ca:	f000 80de 	beq.w	800ca8a <LoRaMacMcpsRequest+0x1ca>
 800c8ce:	f04f 0a00 	mov.w	sl, #0
 800c8d2:	4605      	mov	r5, r0
        }
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 800c8d4:	f8c0 a010 	str.w	sl, [r0, #16]

    if( LoRaMacIsBusy( ) == true )
 800c8d8:	f7ff f824 	bl	800b924 <LoRaMacIsBusy>
 800c8dc:	4680      	mov	r8, r0
 800c8de:	b118      	cbz	r0, 800c8e8 <LoRaMacMcpsRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 800c8e0:	2001      	movs	r0, #1

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 800c8e2:	b011      	add	sp, #68	; 0x44
 800c8e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    McpsReq_t request = *mcpsRequest;
 800c8e8:	ac06      	add	r4, sp, #24
 800c8ea:	462e      	mov	r6, r5
 800c8ec:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c8ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c8f0:	f8c4 a000 	str.w	sl, [r4]
    macHdr.Value = 0;
 800c8f4:	4651      	mov	r1, sl
 800c8f6:	f88d a030 	strb.w	sl, [sp, #48]	; 0x30
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800c8fa:	4c66      	ldr	r4, [pc, #408]	; (800ca94 <LoRaMacMcpsRequest+0x1d4>)
 800c8fc:	2214      	movs	r2, #20
 800c8fe:	f204 4044 	addw	r0, r4, #1092	; 0x444
 800c902:	f004 fa12 	bl	8010d2a <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c906:	2301      	movs	r3, #1
 800c908:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800c90c:	4b62      	ldr	r3, [pc, #392]	; (800ca98 <LoRaMacMcpsRequest+0x1d8>)
 800c90e:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800c912:	2b02      	cmp	r3, #2
 800c914:	d065      	beq.n	800c9e2 <LoRaMacMcpsRequest+0x122>
    switch( request.Type )
 800c916:	f89d 7018 	ldrb.w	r7, [sp, #24]
 800c91a:	2f01      	cmp	r7, #1
 800c91c:	f000 8086 	beq.w	800ca2c <LoRaMacMcpsRequest+0x16c>
 800c920:	2f03      	cmp	r7, #3
 800c922:	f000 8096 	beq.w	800ca52 <LoRaMacMcpsRequest+0x192>
 800c926:	2f00      	cmp	r7, #0
 800c928:	d06d      	beq.n	800ca06 <LoRaMacMcpsRequest+0x146>
 800c92a:	f04f 0b00 	mov.w	fp, #0
 800c92e:	f8cd b014 	str.w	fp, [sp, #20]
 800c932:	f8cd b010 	str.w	fp, [sp, #16]
    getPhy.Attribute = PHY_MIN_TX_DR;
 800c936:	2302      	movs	r3, #2
 800c938:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800c93c:	4e56      	ldr	r6, [pc, #344]	; (800ca98 <LoRaMacMcpsRequest+0x1d8>)
 800c93e:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
 800c942:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c946:	a90e      	add	r1, sp, #56	; 0x38
 800c948:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 800c94c:	f001 f942 	bl	800dbd4 <RegionGetPhyParam>
 800c950:	900d      	str	r0, [sp, #52]	; 0x34
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800c952:	b244      	sxtb	r4, r0
 800c954:	45a3      	cmp	fp, r4
 800c956:	bfb8      	it	lt
 800c958:	46a3      	movlt	fp, r4
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 800c95a:	f896 9106 	ldrb.w	r9, [r6, #262]	; 0x106
 800c95e:	f896 2109 	ldrb.w	r2, [r6, #265]	; 0x109
 800c962:	f896 111c 	ldrb.w	r1, [r6, #284]	; 0x11c
 800c966:	4648      	mov	r0, r9
 800c968:	f7fc ff04 	bl	8009774 <CheckForMinimumAbpDatarate>
 800c96c:	4603      	mov	r3, r0
 800c96e:	b900      	cbnz	r0, 800c972 <LoRaMacMcpsRequest+0xb2>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800c970:	465c      	mov	r4, fp
    if( readyToSend == true )
 800c972:	f1b8 0f00 	cmp.w	r8, #0
 800c976:	f000 8082 	beq.w	800ca7e <LoRaMacMcpsRequest+0x1be>
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 800c97a:	f1b9 0f00 	cmp.w	r9, #0
 800c97e:	d000      	beq.n	800c982 <LoRaMacMcpsRequest+0xc2>
 800c980:	b19b      	cbz	r3, 800c9aa <LoRaMacMcpsRequest+0xea>
            verify.DatarateParams.Datarate = datarate;
 800c982:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800c986:	4b44      	ldr	r3, [pc, #272]	; (800ca98 <LoRaMacMcpsRequest+0x1d8>)
 800c988:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800c98c:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800c990:	2205      	movs	r2, #5
 800c992:	a90b      	add	r1, sp, #44	; 0x2c
 800c994:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c998:	f001 f950 	bl	800dc3c <RegionVerify>
 800c99c:	2800      	cmp	r0, #0
 800c99e:	d076      	beq.n	800ca8e <LoRaMacMcpsRequest+0x1ce>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800c9a0:	f99d 202c 	ldrsb.w	r2, [sp, #44]	; 0x2c
 800c9a4:	4b3c      	ldr	r3, [pc, #240]	; (800ca98 <LoRaMacMcpsRequest+0x1d8>)
 800c9a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800c9aa:	4b3a      	ldr	r3, [pc, #232]	; (800ca94 <LoRaMacMcpsRequest+0x1d4>)
 800c9ac:	f8d3 149c 	ldr.w	r1, [r3, #1180]	; 0x49c
 800c9b0:	4b39      	ldr	r3, [pc, #228]	; (800ca98 <LoRaMacMcpsRequest+0x1d8>)
 800c9b2:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800c9b6:	f7fe f81d 	bl	800a9f4 <LoRaMacHandleResponseTimeout>
        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800c9ba:	9b03      	ldr	r3, [sp, #12]
 800c9bc:	9300      	str	r3, [sp, #0]
 800c9be:	4653      	mov	r3, sl
 800c9c0:	9a05      	ldr	r2, [sp, #20]
 800c9c2:	9904      	ldr	r1, [sp, #16]
 800c9c4:	a80c      	add	r0, sp, #48	; 0x30
 800c9c6:	f7fe ff19 	bl	800b7fc <Send>
        if( status == LORAMAC_STATUS_OK )
 800c9ca:	2800      	cmp	r0, #0
 800c9cc:	d152      	bne.n	800ca74 <LoRaMacMcpsRequest+0x1b4>
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 800c9ce:	4b31      	ldr	r3, [pc, #196]	; (800ca94 <LoRaMacMcpsRequest+0x1d4>)
 800c9d0:	f883 7444 	strb.w	r7, [r3, #1092]	; 0x444
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800c9d4:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800c9d8:	f042 0201 	orr.w	r2, r2, #1
 800c9dc:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
 800c9e0:	e04e      	b.n	800ca80 <LoRaMacMcpsRequest+0x1c0>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800c9e2:	4b2d      	ldr	r3, [pc, #180]	; (800ca98 <LoRaMacMcpsRequest+0x1d8>)
 800c9e4:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800c9e8:	2b02      	cmp	r3, #2
 800c9ea:	d194      	bne.n	800c916 <LoRaMacMcpsRequest+0x56>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800c9ec:	4b2a      	ldr	r3, [pc, #168]	; (800ca98 <LoRaMacMcpsRequest+0x1d8>)
 800c9ee:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d18f      	bne.n	800c916 <LoRaMacMcpsRequest+0x56>
        ( request.Type == MCPS_UNCONFIRMED ) )
 800c9f6:	f89d 3018 	ldrb.w	r3, [sp, #24]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d18b      	bne.n	800c916 <LoRaMacMcpsRequest+0x56>
        request.Type = MCPS_CONFIRMED;
 800c9fe:	2301      	movs	r3, #1
 800ca00:	f88d 3018 	strb.w	r3, [sp, #24]
 800ca04:	e787      	b.n	800c916 <LoRaMacMcpsRequest+0x56>
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800ca06:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800ca0a:	2202      	movs	r2, #2
 800ca0c:	f362 1347 	bfi	r3, r2, #5, #3
 800ca10:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fPort = request.Req.Unconfirmed.fPort;
 800ca14:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800ca18:	9304      	str	r3, [sp, #16]
            fBuffer = request.Req.Unconfirmed.fBuffer;
 800ca1a:	9b08      	ldr	r3, [sp, #32]
 800ca1c:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 800ca1e:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
            datarate = request.Req.Unconfirmed.Datarate;
 800ca22:	f99d b026 	ldrsb.w	fp, [sp, #38]	; 0x26
            readyToSend = true;
 800ca26:	f04f 0801 	mov.w	r8, #1
            break;
 800ca2a:	e784      	b.n	800c936 <LoRaMacMcpsRequest+0x76>
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800ca2c:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800ca30:	2204      	movs	r2, #4
 800ca32:	f362 1347 	bfi	r3, r2, #5, #3
 800ca36:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fPort = request.Req.Confirmed.fPort;
 800ca3a:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800ca3e:	9304      	str	r3, [sp, #16]
            fBuffer = request.Req.Confirmed.fBuffer;
 800ca40:	9b08      	ldr	r3, [sp, #32]
 800ca42:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Confirmed.fBufferSize;
 800ca44:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
            datarate = request.Req.Confirmed.Datarate;
 800ca48:	f99d b026 	ldrsb.w	fp, [sp, #38]	; 0x26
            readyToSend = true;
 800ca4c:	f04f 0801 	mov.w	r8, #1
            break;
 800ca50:	e771      	b.n	800c936 <LoRaMacMcpsRequest+0x76>
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800ca52:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800ca56:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800ca5a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fBuffer = request.Req.Proprietary.fBuffer;
 800ca5e:	9b07      	ldr	r3, [sp, #28]
 800ca60:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Proprietary.fBufferSize;
 800ca62:	f8bd a020 	ldrh.w	sl, [sp, #32]
            datarate = request.Req.Proprietary.Datarate;
 800ca66:	f99d b022 	ldrsb.w	fp, [sp, #34]	; 0x22
            readyToSend = true;
 800ca6a:	f04f 0801 	mov.w	r8, #1
    uint8_t fPort = 0;
 800ca6e:	2300      	movs	r3, #0
 800ca70:	9304      	str	r3, [sp, #16]
            break;
 800ca72:	e760      	b.n	800c936 <LoRaMacMcpsRequest+0x76>
            MacCtx.NodeAckRequested = false;
 800ca74:	4b07      	ldr	r3, [pc, #28]	; (800ca94 <LoRaMacMcpsRequest+0x1d4>)
 800ca76:	2200      	movs	r2, #0
 800ca78:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
 800ca7c:	e000      	b.n	800ca80 <LoRaMacMcpsRequest+0x1c0>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800ca7e:	2002      	movs	r0, #2
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800ca80:	4b04      	ldr	r3, [pc, #16]	; (800ca94 <LoRaMacMcpsRequest+0x1d4>)
 800ca82:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 800ca86:	612b      	str	r3, [r5, #16]
    return status;
 800ca88:	e72b      	b.n	800c8e2 <LoRaMacMcpsRequest+0x22>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ca8a:	2003      	movs	r0, #3
 800ca8c:	e729      	b.n	800c8e2 <LoRaMacMcpsRequest+0x22>
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800ca8e:	2003      	movs	r0, #3
 800ca90:	e727      	b.n	800c8e2 <LoRaMacMcpsRequest+0x22>
 800ca92:	bf00      	nop
 800ca94:	20000814 	.word	0x20000814
 800ca98:	20008000 	.word	0x20008000

0800ca9c <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800ca9c:	b510      	push	{r4, lr}
 800ca9e:	b082      	sub	sp, #8
 800caa0:	4604      	mov	r4, r0
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 800caa2:	f88d 0004 	strb.w	r0, [sp, #4]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800caa6:	220f      	movs	r2, #15
 800caa8:	a901      	add	r1, sp, #4
 800caaa:	4b05      	ldr	r3, [pc, #20]	; (800cac0 <LoRaMacTestSetDutyCycleOn+0x24>)
 800caac:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800cab0:	f001 f8c4 	bl	800dc3c <RegionVerify>
 800cab4:	b110      	cbz	r0, 800cabc <LoRaMacTestSetDutyCycleOn+0x20>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 800cab6:	4b02      	ldr	r3, [pc, #8]	; (800cac0 <LoRaMacTestSetDutyCycleOn+0x24>)
 800cab8:	f883 4108 	strb.w	r4, [r3, #264]	; 0x108
    }
}
 800cabc:	b002      	add	sp, #8
 800cabe:	bd10      	pop	{r4, pc}
 800cac0:	20008000 	.word	0x20008000

0800cac4 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 800cac4:	b538      	push	{r3, r4, r5, lr}
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 800cac6:	f7ff f97b 	bl	800bdc0 <LoRaMacStop>
 800caca:	b110      	cbz	r0, 800cad2 <LoRaMacDeInitialization+0xe>
        // Return success
        return LORAMAC_STATUS_OK;
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 800cacc:	2401      	movs	r4, #1
    }
}
 800cace:	4620      	mov	r0, r4
 800cad0:	bd38      	pop	{r3, r4, r5, pc}
 800cad2:	4604      	mov	r4, r0
        TimerStop( &MacCtx.TxDelayedTimer );
 800cad4:	4d0a      	ldr	r5, [pc, #40]	; (800cb00 <LoRaMacDeInitialization+0x3c>)
 800cad6:	f505 705a 	add.w	r0, r5, #872	; 0x368
 800cada:	f006 fb0b 	bl	80130f4 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 800cade:	f505 7060 	add.w	r0, r5, #896	; 0x380
 800cae2:	f006 fb07 	bl	80130f4 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 800cae6:	f505 7066 	add.w	r0, r5, #920	; 0x398
 800caea:	f006 fb03 	bl	80130f4 <UTIL_TIMER_Stop>
        LoRaMacClassBHaltBeaconing( );
 800caee:	f000 f899 	bl	800cc24 <LoRaMacClassBHaltBeaconing>
        ResetMacParameters( );
 800caf2:	f7fe fc5f 	bl	800b3b4 <ResetMacParameters>
        Radio.Sleep( );
 800caf6:	4b03      	ldr	r3, [pc, #12]	; (800cb04 <LoRaMacDeInitialization+0x40>)
 800caf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cafa:	4798      	blx	r3
        return LORAMAC_STATUS_OK;
 800cafc:	e7e7      	b.n	800cace <LoRaMacDeInitialization+0xa>
 800cafe:	bf00      	nop
 800cb00:	20000814 	.word	0x20000814
 800cb04:	08014e54 	.word	0x08014e54

0800cb08 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 800cb08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb0c:	b08b      	sub	sp, #44	; 0x2c
 800cb0e:	460f      	mov	r7, r1
 800cb10:	4616      	mov	r6, r2
 800cb12:	461d      	mov	r5, r3
    bool adrAckReq = false;
    int8_t datarate = adrNext->Datarate;
 800cb14:	f990 900c 	ldrsb.w	r9, [r0, #12]
    int8_t txPower = adrNext->TxPower;
 800cb18:	f990 a00d 	ldrsb.w	sl, [r0, #13]
    uint8_t nbTrans = adrNext->NbTrans;
 800cb1c:	f890 b00e 	ldrb.w	fp, [r0, #14]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 800cb20:	6842      	ldr	r2, [r0, #4]
 800cb22:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cb24:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 800cb26:	f890 8001 	ldrb.w	r8, [r0, #1]
 800cb2a:	f1b8 0f00 	cmp.w	r8, #0
 800cb2e:	d109      	bne.n	800cb44 <LoRaMacAdrCalcNext+0x3c>
                datarate = phyParam.Value;
            }
        }
    }

    *drOut = datarate;
 800cb30:	f887 9000 	strb.w	r9, [r7]
    *txPowOut = txPower;
 800cb34:	f886 a000 	strb.w	sl, [r6]
    *nbTransOut = nbTrans;
 800cb38:	f885 b000 	strb.w	fp, [r5]
    return adrAckReq;
}
 800cb3c:	4640      	mov	r0, r8
 800cb3e:	b00b      	add	sp, #44	; 0x2c
 800cb40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb44:	4604      	mov	r4, r0
        getPhy.Attribute = PHY_MIN_TX_DR;
 800cb46:	2302      	movs	r3, #2
 800cb48:	f88d 3020 	strb.w	r3, [sp, #32]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800cb4c:	7bc3      	ldrb	r3, [r0, #15]
 800cb4e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800cb52:	a908      	add	r1, sp, #32
 800cb54:	7c00      	ldrb	r0, [r0, #16]
 800cb56:	f001 f83d 	bl	800dbd4 <RegionGetPhyParam>
 800cb5a:	9007      	str	r0, [sp, #28]
        minTxDatarate = phyParam.Value;
 800cb5c:	b243      	sxtb	r3, r0
 800cb5e:	9301      	str	r3, [sp, #4]
        datarate = MAX( datarate, minTxDatarate );
 800cb60:	454b      	cmp	r3, r9
 800cb62:	bfb8      	it	lt
 800cb64:	464b      	movlt	r3, r9
 800cb66:	9300      	str	r3, [sp, #0]
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 800cb68:	6862      	ldr	r2, [r4, #4]
 800cb6a:	8923      	ldrh	r3, [r4, #8]
 800cb6c:	429a      	cmp	r2, r3
 800cb6e:	d201      	bcs.n	800cb74 <LoRaMacAdrCalcNext+0x6c>
    bool adrAckReq = false;
 800cb70:	f04f 0800 	mov.w	r8, #0
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800cb74:	8961      	ldrh	r1, [r4, #10]
 800cb76:	440b      	add	r3, r1
 800cb78:	429a      	cmp	r2, r3
 800cb7a:	d224      	bcs.n	800cbc6 <LoRaMacAdrCalcNext+0xbe>
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 800cb7c:	6863      	ldr	r3, [r4, #4]
 800cb7e:	8921      	ldrh	r1, [r4, #8]
 800cb80:	8962      	ldrh	r2, [r4, #10]
 800cb82:	eb01 0042 	add.w	r0, r1, r2, lsl #1
 800cb86:	4283      	cmp	r3, r0
 800cb88:	d332      	bcc.n	800cbf0 <LoRaMacAdrCalcNext+0xe8>
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 800cb8a:	1a5b      	subs	r3, r3, r1
 800cb8c:	fbb3 f1f2 	udiv	r1, r3, r2
 800cb90:	fb02 3311 	mls	r3, r2, r1, r3
 800cb94:	bb7b      	cbnz	r3, 800cbf6 <LoRaMacAdrCalcNext+0xee>
                if( datarate == minTxDatarate )
 800cb96:	9b01      	ldr	r3, [sp, #4]
 800cb98:	4599      	cmp	r9, r3
 800cb9a:	dc03      	bgt.n	800cba4 <LoRaMacAdrCalcNext+0x9c>
                    if( adrNext->UpdateChanMask == true )
 800cb9c:	7823      	ldrb	r3, [r4, #0]
 800cb9e:	b9eb      	cbnz	r3, 800cbdc <LoRaMacAdrCalcNext+0xd4>
                    nbTrans = 1;
 800cba0:	f04f 0b01 	mov.w	fp, #1
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800cba4:	2321      	movs	r3, #33	; 0x21
 800cba6:	f88d 3020 	strb.w	r3, [sp, #32]
                getPhy.Datarate = datarate;
 800cbaa:	9b00      	ldr	r3, [sp, #0]
 800cbac:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800cbb0:	7be3      	ldrb	r3, [r4, #15]
 800cbb2:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800cbb6:	a908      	add	r1, sp, #32
 800cbb8:	7c20      	ldrb	r0, [r4, #16]
 800cbba:	f001 f80b 	bl	800dbd4 <RegionGetPhyParam>
 800cbbe:	9007      	str	r0, [sp, #28]
                datarate = phyParam.Value;
 800cbc0:	fa4f f980 	sxtb.w	r9, r0
 800cbc4:	e7b4      	b.n	800cb30 <LoRaMacAdrCalcNext+0x28>
            getPhy.Attribute = PHY_DEF_TX_POWER;
 800cbc6:	230a      	movs	r3, #10
 800cbc8:	f88d 3020 	strb.w	r3, [sp, #32]
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800cbcc:	a908      	add	r1, sp, #32
 800cbce:	7c20      	ldrb	r0, [r4, #16]
 800cbd0:	f001 f800 	bl	800dbd4 <RegionGetPhyParam>
 800cbd4:	9007      	str	r0, [sp, #28]
            txPower = phyParam.Value;
 800cbd6:	fa4f fa80 	sxtb.w	sl, r0
 800cbda:	e7cf      	b.n	800cb7c <LoRaMacAdrCalcNext+0x74>
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800cbdc:	2302      	movs	r3, #2
 800cbde:	f88d 3018 	strb.w	r3, [sp, #24]
                        RegionInitDefaults( adrNext->Region, &params );
 800cbe2:	a903      	add	r1, sp, #12
 800cbe4:	7c20      	ldrb	r0, [r4, #16]
 800cbe6:	f001 f81b 	bl	800dc20 <RegionInitDefaults>
                    nbTrans = 1;
 800cbea:	f04f 0b01 	mov.w	fp, #1
 800cbee:	e7d9      	b.n	800cba4 <LoRaMacAdrCalcNext+0x9c>
        datarate = MAX( datarate, minTxDatarate );
 800cbf0:	f8dd 9000 	ldr.w	r9, [sp]
 800cbf4:	e79c      	b.n	800cb30 <LoRaMacAdrCalcNext+0x28>
 800cbf6:	f8dd 9000 	ldr.w	r9, [sp]
 800cbfa:	e799      	b.n	800cb30 <LoRaMacAdrCalcNext+0x28>

0800cbfc <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cbfc:	4770      	bx	lr

0800cbfe <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cbfe:	4770      	bx	lr

0800cc00 <LoRaMacClassBSetPingSlotState>:
void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cc00:	4770      	bx	lr

0800cc02 <LoRaMacClassBSetMulticastSlotState>:
void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cc02:	4770      	bx	lr

0800cc04 <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cc04:	2000      	movs	r0, #0
 800cc06:	4770      	bx	lr

0800cc08 <LoRaMacClassBBeaconTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cc08:	4770      	bx	lr

0800cc0a <LoRaMacClassBPingSlotTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cc0a:	4770      	bx	lr

0800cc0c <LoRaMacClassBMulticastSlotTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cc0c:	4770      	bx	lr

0800cc0e <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cc0e:	2000      	movs	r0, #0
 800cc10:	4770      	bx	lr

0800cc12 <LoRaMacClassBIsBeaconExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cc12:	2000      	movs	r0, #0
 800cc14:	4770      	bx	lr

0800cc16 <LoRaMacClassBIsPingExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cc16:	2000      	movs	r0, #0
 800cc18:	4770      	bx	lr

0800cc1a <LoRaMacClassBIsMulticastExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cc1a:	2000      	movs	r0, #0
 800cc1c:	4770      	bx	lr

0800cc1e <LoRaMacClassBIsBeaconModeActive>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cc1e:	2000      	movs	r0, #0
 800cc20:	4770      	bx	lr

0800cc22 <LoRaMacClassBSetPingSlotInfo>:
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cc22:	4770      	bx	lr

0800cc24 <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cc24:	4770      	bx	lr

0800cc26 <LoRaMacClassBResumeBeaconing>:
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cc26:	4770      	bx	lr

0800cc28 <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cc28:	2002      	movs	r0, #2
 800cc2a:	4770      	bx	lr

0800cc2c <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cc2c:	2002      	movs	r0, #2
 800cc2e:	4770      	bx	lr

0800cc30 <LoRaMacMibClassBSetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cc30:	2002      	movs	r0, #2
 800cc32:	4770      	bx	lr

0800cc34 <LoRaMacClassBPingSlotInfoAns>:
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cc34:	4770      	bx	lr

0800cc36 <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cc36:	2000      	movs	r0, #0
 800cc38:	4770      	bx	lr

0800cc3a <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cc3a:	4770      	bx	lr

0800cc3c <LoRaMacClassBDeviceTimeAns>:
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cc3c:	4770      	bx	lr

0800cc3e <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cc3e:	2000      	movs	r0, #0
 800cc40:	4770      	bx	lr

0800cc42 <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cc42:	2000      	movs	r0, #0
 800cc44:	4770      	bx	lr

0800cc46 <LoRaMacClassBStopRxSlots>:
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cc46:	4770      	bx	lr

0800cc48 <LoRaMacClassBSetFPendingBit>:
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cc48:	4770      	bx	lr

0800cc4a <LoRaMacClassBProcess>:
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cc4a:	4770      	bx	lr

0800cc4c <IsSlotFree>:
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
    uint8_t* mem = ( uint8_t* )slot;

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	2b0f      	cmp	r3, #15
 800cc50:	d804      	bhi.n	800cc5c <IsSlotFree+0x10>
    {
        if( mem[size] != 0x00 )
 800cc52:	5cc2      	ldrb	r2, [r0, r3]
 800cc54:	b922      	cbnz	r2, 800cc60 <IsSlotFree+0x14>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800cc56:	3301      	adds	r3, #1
 800cc58:	b29b      	uxth	r3, r3
 800cc5a:	e7f8      	b.n	800cc4e <IsSlotFree+0x2>
        {
            return false;
        }
    }
    return true;
 800cc5c:	2001      	movs	r0, #1
 800cc5e:	4770      	bx	lr
            return false;
 800cc60:	2000      	movs	r0, #0
}
 800cc62:	4770      	bx	lr

0800cc64 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 800cc64:	b538      	push	{r3, r4, r5, lr}
    uint8_t itr = 0;
 800cc66:	2400      	movs	r4, #0

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800cc68:	0125      	lsls	r5, r4, #4
 800cc6a:	f105 0308 	add.w	r3, r5, #8
 800cc6e:	4d06      	ldr	r5, [pc, #24]	; (800cc88 <MallocNewMacCommandSlot+0x24>)
 800cc70:	441d      	add	r5, r3
 800cc72:	4628      	mov	r0, r5
 800cc74:	f7ff ffea 	bl	800cc4c <IsSlotFree>
 800cc78:	b920      	cbnz	r0, 800cc84 <MallocNewMacCommandSlot+0x20>
    {
        itr++;
 800cc7a:	3401      	adds	r4, #1
 800cc7c:	b2e4      	uxtb	r4, r4
        if( itr == NUM_OF_MAC_COMMANDS )
 800cc7e:	2c20      	cmp	r4, #32
 800cc80:	d1f2      	bne.n	800cc68 <MallocNewMacCommandSlot+0x4>
        {
            return NULL;
 800cc82:	2500      	movs	r5, #0
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
}
 800cc84:	4628      	mov	r0, r5
 800cc86:	bd38      	pop	{r3, r4, r5, pc}
 800cc88:	20000dd8 	.word	0x20000dd8

0800cc8c <LinkedListInit>:
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
    if( list == NULL )
 800cc8c:	b120      	cbz	r0, 800cc98 <LinkedListInit+0xc>
    {
        return false;
    }

    list->First = NULL;
 800cc8e:	2200      	movs	r2, #0
 800cc90:	6002      	str	r2, [r0, #0]
    list->Last = NULL;
 800cc92:	6042      	str	r2, [r0, #4]

    return true;
 800cc94:	2001      	movs	r0, #1
 800cc96:	4770      	bx	lr
        return false;
 800cc98:	2000      	movs	r0, #0
}
 800cc9a:	4770      	bx	lr

0800cc9c <LinkedListAdd>:
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800cc9c:	4603      	mov	r3, r0
 800cc9e:	b160      	cbz	r0, 800ccba <LinkedListAdd+0x1e>
 800cca0:	b169      	cbz	r1, 800ccbe <LinkedListAdd+0x22>
    {
        return false;
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 800cca2:	6802      	ldr	r2, [r0, #0]
 800cca4:	b13a      	cbz	r2, 800ccb6 <LinkedListAdd+0x1a>
    {
        list->First = element;
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 800cca6:	685a      	ldr	r2, [r3, #4]
 800cca8:	b102      	cbz	r2, 800ccac <LinkedListAdd+0x10>
    {
        list->Last->Next = element;
 800ccaa:	6011      	str	r1, [r2, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 800ccac:	2200      	movs	r2, #0
 800ccae:	600a      	str	r2, [r1, #0]

    // Update the last entry of the list.
    list->Last = element;
 800ccb0:	6059      	str	r1, [r3, #4]

    return true;
 800ccb2:	2001      	movs	r0, #1
 800ccb4:	4770      	bx	lr
        list->First = element;
 800ccb6:	6001      	str	r1, [r0, #0]
 800ccb8:	e7f5      	b.n	800cca6 <LinkedListAdd+0xa>
        return false;
 800ccba:	2000      	movs	r0, #0
 800ccbc:	4770      	bx	lr
 800ccbe:	2000      	movs	r0, #0
}
 800ccc0:	4770      	bx	lr

0800ccc2 <LinkedListGetPrevious>:
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800ccc2:	b160      	cbz	r0, 800ccde <LinkedListGetPrevious+0x1c>
 800ccc4:	b161      	cbz	r1, 800cce0 <LinkedListGetPrevious+0x1e>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 800ccc6:	6800      	ldr	r0, [r0, #0]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 800ccc8:	4281      	cmp	r1, r0
 800ccca:	d102      	bne.n	800ccd2 <LinkedListGetPrevious+0x10>
            curElement = curElement->Next;
        }
    }
    else
    {
        curElement = NULL;
 800cccc:	2000      	movs	r0, #0
    }

    return curElement;
}
 800ccce:	4770      	bx	lr
            curElement = curElement->Next;
 800ccd0:	4618      	mov	r0, r3
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800ccd2:	2800      	cmp	r0, #0
 800ccd4:	d0fb      	beq.n	800ccce <LinkedListGetPrevious+0xc>
 800ccd6:	6803      	ldr	r3, [r0, #0]
 800ccd8:	428b      	cmp	r3, r1
 800ccda:	d1f9      	bne.n	800ccd0 <LinkedListGetPrevious+0xe>
 800ccdc:	4770      	bx	lr
 800ccde:	4770      	bx	lr
        return NULL;
 800cce0:	4608      	mov	r0, r1
 800cce2:	4770      	bx	lr

0800cce4 <LinkedListRemove>:
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800cce4:	b1b8      	cbz	r0, 800cd16 <LinkedListRemove+0x32>
{
 800cce6:	b538      	push	{r3, r4, r5, lr}
 800cce8:	460c      	mov	r4, r1
 800ccea:	4605      	mov	r5, r0
    if( ( list == NULL ) || ( element == NULL ) )
 800ccec:	b1a9      	cbz	r1, 800cd1a <LinkedListRemove+0x36>
    {
        return false;
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 800ccee:	f7ff ffe8 	bl	800ccc2 <LinkedListGetPrevious>

    if( list->First == element )
 800ccf2:	682b      	ldr	r3, [r5, #0]
 800ccf4:	42a3      	cmp	r3, r4
 800ccf6:	d009      	beq.n	800cd0c <LinkedListRemove+0x28>
    {
        list->First = element->Next;
    }

    if( list->Last == element )
 800ccf8:	686b      	ldr	r3, [r5, #4]
 800ccfa:	42a3      	cmp	r3, r4
 800ccfc:	d009      	beq.n	800cd12 <LinkedListRemove+0x2e>
    {
        list->Last = PrevElement;
    }

    if( PrevElement != NULL )
 800ccfe:	b108      	cbz	r0, 800cd04 <LinkedListRemove+0x20>
    {
        PrevElement->Next = element->Next;
 800cd00:	6823      	ldr	r3, [r4, #0]
 800cd02:	6003      	str	r3, [r0, #0]
    }

    element->Next = NULL;
 800cd04:	2300      	movs	r3, #0
 800cd06:	6023      	str	r3, [r4, #0]

    return true;
 800cd08:	2001      	movs	r0, #1
}
 800cd0a:	bd38      	pop	{r3, r4, r5, pc}
        list->First = element->Next;
 800cd0c:	6823      	ldr	r3, [r4, #0]
 800cd0e:	602b      	str	r3, [r5, #0]
 800cd10:	e7f2      	b.n	800ccf8 <LinkedListRemove+0x14>
        list->Last = PrevElement;
 800cd12:	6068      	str	r0, [r5, #4]
 800cd14:	e7f3      	b.n	800ccfe <LinkedListRemove+0x1a>
        return false;
 800cd16:	2000      	movs	r0, #0
}
 800cd18:	4770      	bx	lr
        return false;
 800cd1a:	2000      	movs	r0, #0
 800cd1c:	e7f5      	b.n	800cd0a <LinkedListRemove+0x26>
	...

0800cd20 <IsSticky>:
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
    switch( cid )
 800cd20:	2811      	cmp	r0, #17
 800cd22:	d808      	bhi.n	800cd36 <IsSticky+0x16>
 800cd24:	2301      	movs	r3, #1
 800cd26:	fa03 f000 	lsl.w	r0, r3, r0
 800cd2a:	4b04      	ldr	r3, [pc, #16]	; (800cd3c <IsSticky+0x1c>)
 800cd2c:	4218      	tst	r0, r3
 800cd2e:	bf14      	ite	ne
 800cd30:	2001      	movne	r0, #1
 800cd32:	2000      	moveq	r0, #0
 800cd34:	4770      	bx	lr
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
        default:
            return false;
 800cd36:	2000      	movs	r0, #0
    }
}
 800cd38:	4770      	bx	lr
 800cd3a:	bf00      	nop
 800cd3c:	00020720 	.word	0x00020720

0800cd40 <FreeMacCommandSlot>:
    if( slot == NULL )
 800cd40:	b130      	cbz	r0, 800cd50 <FreeMacCommandSlot+0x10>
{
 800cd42:	b508      	push	{r3, lr}
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800cd44:	2210      	movs	r2, #16
 800cd46:	2100      	movs	r1, #0
 800cd48:	f003 ffef 	bl	8010d2a <memset1>
    return true;
 800cd4c:	2001      	movs	r0, #1
}
 800cd4e:	bd08      	pop	{r3, pc}
        return false;
 800cd50:	2000      	movs	r0, #0
}
 800cd52:	4770      	bx	lr

0800cd54 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800cd54:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800cd56:	4c06      	ldr	r4, [pc, #24]	; (800cd70 <LoRaMacCommandsInit+0x1c>)
 800cd58:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800cd5c:	2100      	movs	r1, #0
 800cd5e:	4620      	mov	r0, r4
 800cd60:	f003 ffe3 	bl	8010d2a <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 800cd64:	4620      	mov	r0, r4
 800cd66:	f7ff ff91 	bl	800cc8c <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800cd6a:	2000      	movs	r0, #0
 800cd6c:	bd10      	pop	{r4, pc}
 800cd6e:	bf00      	nop
 800cd70:	20000dd8 	.word	0x20000dd8

0800cd74 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
    if( payload == NULL )
 800cd74:	b301      	cbz	r1, 800cdb8 <LoRaMacCommandsAddCmd+0x44>
{
 800cd76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd78:	4605      	mov	r5, r0
 800cd7a:	4614      	mov	r4, r2
 800cd7c:	460f      	mov	r7, r1
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 800cd7e:	f7ff ff71 	bl	800cc64 <MallocNewMacCommandSlot>

    if( newCmd == NULL )
 800cd82:	4606      	mov	r6, r0
 800cd84:	b1d0      	cbz	r0, 800cdbc <LoRaMacCommandsAddCmd+0x48>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 800cd86:	4601      	mov	r1, r0
 800cd88:	480e      	ldr	r0, [pc, #56]	; (800cdc4 <LoRaMacCommandsAddCmd+0x50>)
 800cd8a:	f7ff ff87 	bl	800cc9c <LinkedListAdd>
 800cd8e:	b1b8      	cbz	r0, 800cdc0 <LoRaMacCommandsAddCmd+0x4c>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 800cd90:	7135      	strb	r5, [r6, #4]
    newCmd->PayloadSize = payloadSize;
 800cd92:	60b4      	str	r4, [r6, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800cd94:	b2a2      	uxth	r2, r4
 800cd96:	4639      	mov	r1, r7
 800cd98:	1d70      	adds	r0, r6, #5
 800cd9a:	f003 ffae 	bl	8010cfa <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 800cd9e:	4628      	mov	r0, r5
 800cda0:	f7ff ffbe 	bl	800cd20 <IsSticky>
 800cda4:	7330      	strb	r0, [r6, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800cda6:	4b07      	ldr	r3, [pc, #28]	; (800cdc4 <LoRaMacCommandsAddCmd+0x50>)
 800cda8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800cdac:	4414      	add	r4, r2
 800cdae:	3401      	adds	r4, #1
 800cdb0:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 800cdb4:	2000      	movs	r0, #0
}
 800cdb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800cdb8:	2001      	movs	r0, #1
}
 800cdba:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800cdbc:	2002      	movs	r0, #2
 800cdbe:	e7fa      	b.n	800cdb6 <LoRaMacCommandsAddCmd+0x42>
        return LORAMAC_COMMANDS_ERROR;
 800cdc0:	2005      	movs	r0, #5
 800cdc2:	e7f8      	b.n	800cdb6 <LoRaMacCommandsAddCmd+0x42>
 800cdc4:	20000dd8 	.word	0x20000dd8

0800cdc8 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
    if( macCmd == NULL )
 800cdc8:	b1a0      	cbz	r0, 800cdf4 <LoRaMacCommandsRemoveCmd+0x2c>
{
 800cdca:	b510      	push	{r4, lr}
 800cdcc:	4604      	mov	r4, r0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 800cdce:	4601      	mov	r1, r0
 800cdd0:	480b      	ldr	r0, [pc, #44]	; (800ce00 <LoRaMacCommandsRemoveCmd+0x38>)
 800cdd2:	f7ff ff87 	bl	800cce4 <LinkedListRemove>
 800cdd6:	b178      	cbz	r0, 800cdf8 <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800cdd8:	68a1      	ldr	r1, [r4, #8]
 800cdda:	4a09      	ldr	r2, [pc, #36]	; (800ce00 <LoRaMacCommandsRemoveCmd+0x38>)
 800cddc:	f8d2 3208 	ldr.w	r3, [r2, #520]	; 0x208
 800cde0:	1a5b      	subs	r3, r3, r1
 800cde2:	3b01      	subs	r3, #1
 800cde4:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 800cde8:	4620      	mov	r0, r4
 800cdea:	f7ff ffa9 	bl	800cd40 <FreeMacCommandSlot>
 800cdee:	b128      	cbz	r0, 800cdfc <LoRaMacCommandsRemoveCmd+0x34>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800cdf0:	2000      	movs	r0, #0
}
 800cdf2:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800cdf4:	2001      	movs	r0, #1
}
 800cdf6:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800cdf8:	2003      	movs	r0, #3
 800cdfa:	e7fa      	b.n	800cdf2 <LoRaMacCommandsRemoveCmd+0x2a>
        return LORAMAC_COMMANDS_ERROR;
 800cdfc:	2005      	movs	r0, #5
 800cdfe:	e7f8      	b.n	800cdf2 <LoRaMacCommandsRemoveCmd+0x2a>
 800ce00:	20000dd8 	.word	0x20000dd8

0800ce04 <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800ce04:	4b0a      	ldr	r3, [pc, #40]	; (800ce30 <LoRaMacCommandsRemoveNoneStickyCmds+0x2c>)
 800ce06:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800ce08:	b120      	cbz	r0, 800ce14 <LoRaMacCommandsRemoveNoneStickyCmds+0x10>
    {
        if( curElement->IsSticky == false )
 800ce0a:	7b03      	ldrb	r3, [r0, #12]
 800ce0c:	b11b      	cbz	r3, 800ce16 <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
            curElement = nexElement;
        }
        else
        {
            curElement = curElement->Next;
 800ce0e:	6800      	ldr	r0, [r0, #0]
 800ce10:	e7fa      	b.n	800ce08 <LoRaMacCommandsRemoveNoneStickyCmds+0x4>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800ce12:	bd10      	pop	{r4, pc}
 800ce14:	4770      	bx	lr
{
 800ce16:	b510      	push	{r4, lr}
            nexElement = curElement->Next;
 800ce18:	6804      	ldr	r4, [r0, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 800ce1a:	f7ff ffd5 	bl	800cdc8 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 800ce1e:	4620      	mov	r0, r4
    while( curElement != NULL )
 800ce20:	2800      	cmp	r0, #0
 800ce22:	d0f6      	beq.n	800ce12 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        if( curElement->IsSticky == false )
 800ce24:	7b03      	ldrb	r3, [r0, #12]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d0f6      	beq.n	800ce18 <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
            curElement = curElement->Next;
 800ce2a:	6800      	ldr	r0, [r0, #0]
 800ce2c:	e7f8      	b.n	800ce20 <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>
 800ce2e:	bf00      	nop
 800ce30:	20000dd8 	.word	0x20000dd8

0800ce34 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800ce34:	b538      	push	{r3, r4, r5, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800ce36:	4b08      	ldr	r3, [pc, #32]	; (800ce58 <LoRaMacCommandsRemoveStickyAnsCmds+0x24>)
 800ce38:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800ce3a:	e000      	b.n	800ce3e <LoRaMacCommandsRemoveStickyAnsCmds+0xa>
{
 800ce3c:	462c      	mov	r4, r5
    while( curElement != NULL )
 800ce3e:	b14c      	cbz	r4, 800ce54 <LoRaMacCommandsRemoveStickyAnsCmds+0x20>
    {
        nexElement = curElement->Next;
 800ce40:	6825      	ldr	r5, [r4, #0]
        if( IsSticky( curElement->CID ) == true )
 800ce42:	7920      	ldrb	r0, [r4, #4]
 800ce44:	f7ff ff6c 	bl	800cd20 <IsSticky>
 800ce48:	2800      	cmp	r0, #0
 800ce4a:	d0f7      	beq.n	800ce3c <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 800ce4c:	4620      	mov	r0, r4
 800ce4e:	f7ff ffbb 	bl	800cdc8 <LoRaMacCommandsRemoveCmd>
 800ce52:	e7f3      	b.n	800ce3c <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800ce54:	2000      	movs	r0, #0
 800ce56:	bd38      	pop	{r3, r4, r5, pc}
 800ce58:	20000dd8 	.word	0x20000dd8

0800ce5c <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 800ce5c:	b128      	cbz	r0, 800ce6a <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
 800ce5e:	4a04      	ldr	r2, [pc, #16]	; (800ce70 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800ce60:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 800ce64:	6002      	str	r2, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800ce66:	2000      	movs	r0, #0
 800ce68:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800ce6a:	2001      	movs	r0, #1
}
 800ce6c:	4770      	bx	lr
 800ce6e:	bf00      	nop
 800ce70:	20000dd8 	.word	0x20000dd8

0800ce74 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800ce74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800ce78:	4b16      	ldr	r3, [pc, #88]	; (800ced4 <LoRaMacCommandsSerializeCmds+0x60>)
 800ce7a:	681c      	ldr	r4, [r3, #0]
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800ce7c:	b32a      	cbz	r2, 800ceca <LoRaMacCommandsSerializeCmds+0x56>
 800ce7e:	4607      	mov	r7, r0
 800ce80:	4688      	mov	r8, r1
 800ce82:	4616      	mov	r6, r2
 800ce84:	b319      	cbz	r1, 800cece <LoRaMacCommandsSerializeCmds+0x5a>
    uint8_t itr = 0;
 800ce86:	2100      	movs	r1, #0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800ce88:	b194      	cbz	r4, 800ceb0 <LoRaMacCommandsSerializeCmds+0x3c>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800ce8a:	1a7a      	subs	r2, r7, r1
 800ce8c:	68a3      	ldr	r3, [r4, #8]
 800ce8e:	3301      	adds	r3, #1
 800ce90:	429a      	cmp	r2, r3
 800ce92:	d30d      	bcc.n	800ceb0 <LoRaMacCommandsSerializeCmds+0x3c>
        {
            buffer[itr++] = curElement->CID;
 800ce94:	1c4d      	adds	r5, r1, #1
 800ce96:	b2ed      	uxtb	r5, r5
 800ce98:	7923      	ldrb	r3, [r4, #4]
 800ce9a:	5473      	strb	r3, [r6, r1]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800ce9c:	8922      	ldrh	r2, [r4, #8]
 800ce9e:	1d61      	adds	r1, r4, #5
 800cea0:	1970      	adds	r0, r6, r5
 800cea2:	f003 ff2a 	bl	8010cfa <memcpy1>
            itr += curElement->PayloadSize;
 800cea6:	68a3      	ldr	r3, [r4, #8]
 800cea8:	441d      	add	r5, r3
 800ceaa:	b2e9      	uxtb	r1, r5
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 800ceac:	6824      	ldr	r4, [r4, #0]
 800ceae:	e7eb      	b.n	800ce88 <LoRaMacCommandsSerializeCmds+0x14>
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 800ceb0:	b12c      	cbz	r4, 800cebe <LoRaMacCommandsSerializeCmds+0x4a>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 800ceb2:	6825      	ldr	r5, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800ceb4:	4620      	mov	r0, r4
 800ceb6:	f7ff ff87 	bl	800cdc8 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 800ceba:	462c      	mov	r4, r5
 800cebc:	e7f8      	b.n	800ceb0 <LoRaMacCommandsSerializeCmds+0x3c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800cebe:	4640      	mov	r0, r8
 800cec0:	f7ff ffcc 	bl	800ce5c <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800cec4:	2000      	movs	r0, #0
}
 800cec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800ceca:	2001      	movs	r0, #1
 800cecc:	e7fb      	b.n	800cec6 <LoRaMacCommandsSerializeCmds+0x52>
 800cece:	2001      	movs	r0, #1
 800ced0:	e7f9      	b.n	800cec6 <LoRaMacCommandsSerializeCmds+0x52>
 800ced2:	bf00      	nop
 800ced4:	20000dd8 	.word	0x20000dd8

0800ced8 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
    if( cmdsPending == NULL )
 800ced8:	4601      	mov	r1, r0
 800ceda:	b170      	cbz	r0, 800cefa <LoRaMacCommandsStickyCmdsPending+0x22>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 800cedc:	4b08      	ldr	r3, [pc, #32]	; (800cf00 <LoRaMacCommandsStickyCmdsPending+0x28>)
 800cede:	681b      	ldr	r3, [r3, #0]

    *cmdsPending = false;
 800cee0:	2200      	movs	r2, #0
 800cee2:	7002      	strb	r2, [r0, #0]

    // Loop through all elements
    while( curElement != NULL )
 800cee4:	b13b      	cbz	r3, 800cef6 <LoRaMacCommandsStickyCmdsPending+0x1e>
    {
        if( curElement->IsSticky == true )
 800cee6:	7b1a      	ldrb	r2, [r3, #12]
 800cee8:	b90a      	cbnz	r2, 800ceee <LoRaMacCommandsStickyCmdsPending+0x16>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
            return LORAMAC_COMMANDS_SUCCESS;
        }
        curElement = curElement->Next;
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	e7fa      	b.n	800cee4 <LoRaMacCommandsStickyCmdsPending+0xc>
            *cmdsPending = true;
 800ceee:	2301      	movs	r3, #1
 800cef0:	700b      	strb	r3, [r1, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 800cef2:	2000      	movs	r0, #0
 800cef4:	4770      	bx	lr
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800cef6:	2000      	movs	r0, #0
 800cef8:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800cefa:	2001      	movs	r0, #1
}
 800cefc:	4770      	bx	lr
 800cefe:	bf00      	nop
 800cf00:	20000dd8 	.word	0x20000dd8

0800cf04 <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800cf04:	1e83      	subs	r3, r0, #2
 800cf06:	2b11      	cmp	r3, #17
 800cf08:	d80a      	bhi.n	800cf20 <LoRaMacCommandsGetCmdSize+0x1c>
 800cf0a:	e8df f003 	tbb	[pc, r3]
 800cf0e:	0b23      	.short	0x0b23
 800cf10:	110f240d 	.word	0x110f240d
 800cf14:	09171513 	.word	0x09171513
 800cf18:	09091909 	.word	0x09091909
 800cf1c:	211f1d1b 	.word	0x211f1d1b
 800cf20:	2000      	movs	r0, #0
 800cf22:	4770      	bx	lr
            break;
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 800cf24:	2005      	movs	r0, #5
            break;
 800cf26:	4770      	bx	lr
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 800cf28:	2002      	movs	r0, #2
            break;
 800cf2a:	4770      	bx	lr
            break;
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 800cf2c:	2001      	movs	r0, #1
            break;
 800cf2e:	4770      	bx	lr
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 800cf30:	2006      	movs	r0, #6
            break;
 800cf32:	4770      	bx	lr
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 800cf34:	2002      	movs	r0, #2
            break;
 800cf36:	4770      	bx	lr
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 800cf38:	2002      	movs	r0, #2
            break;
 800cf3a:	4770      	bx	lr
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 800cf3c:	2005      	movs	r0, #5
            break;
 800cf3e:	4770      	bx	lr
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 800cf40:	2006      	movs	r0, #6
            break;
 800cf42:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 800cf44:	2001      	movs	r0, #1
            break;
 800cf46:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 800cf48:	2005      	movs	r0, #5
            break;
 800cf4a:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 800cf4c:	2004      	movs	r0, #4
            break;
 800cf4e:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 800cf50:	2004      	movs	r0, #4
            break;
 800cf52:	4770      	bx	lr
            cidSize = 3;
 800cf54:	2003      	movs	r0, #3
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800cf56:	4770      	bx	lr

0800cf58 <IncreaseBufferPointer>:
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800cf58:	4b03      	ldr	r3, [pc, #12]	; (800cf68 <IncreaseBufferPointer+0x10>)
 800cf5a:	4298      	cmp	r0, r3
 800cf5c:	d001      	beq.n	800cf62 <IncreaseBufferPointer+0xa>
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
    }
    else
    {
        // Increase
        bufferPointer++;
 800cf5e:	3004      	adds	r0, #4
 800cf60:	4770      	bx	lr
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800cf62:	4802      	ldr	r0, [pc, #8]	; (800cf6c <IncreaseBufferPointer+0x14>)
    }
    return bufferPointer;
}
 800cf64:	4770      	bx	lr
 800cf66:	bf00      	nop
 800cf68:	20001000 	.word	0x20001000
 800cf6c:	20000ff0 	.word	0x20000ff0

0800cf70 <IsListEmpty>:
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
    if( count == 0 )
 800cf70:	b108      	cbz	r0, 800cf76 <IsListEmpty+0x6>
    {
        return true;
    }
    return false;
 800cf72:	2000      	movs	r0, #0
 800cf74:	4770      	bx	lr
        return true;
 800cf76:	2001      	movs	r0, #1
}
 800cf78:	4770      	bx	lr

0800cf7a <IsListFull>:

static bool IsListFull( uint8_t count )
{
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800cf7a:	2804      	cmp	r0, #4
 800cf7c:	d801      	bhi.n	800cf82 <IsListFull+0x8>
    {
        return true;
    }
    return false;
 800cf7e:	2000      	movs	r0, #0
 800cf80:	4770      	bx	lr
        return true;
 800cf82:	2001      	movs	r0, #1
}
 800cf84:	4770      	bx	lr
	...

0800cf88 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 800cf88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf8a:	4606      	mov	r6, r0
 800cf8c:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800cf8e:	4b0d      	ldr	r3, [pc, #52]	; (800cfc4 <GetElement+0x3c>)
 800cf90:	f893 7020 	ldrb.w	r7, [r3, #32]
 800cf94:	4638      	mov	r0, r7
 800cf96:	f7ff ffeb 	bl	800cf70 <IsListEmpty>
 800cf9a:	b970      	cbnz	r0, 800cfba <GetElement+0x32>
    {
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800cf9c:	2500      	movs	r5, #0
 800cf9e:	42af      	cmp	r7, r5
 800cfa0:	d909      	bls.n	800cfb6 <GetElement+0x2e>
    {
        if( element->Request == request )
 800cfa2:	7823      	ldrb	r3, [r4, #0]
 800cfa4:	42b3      	cmp	r3, r6
 800cfa6:	d00a      	beq.n	800cfbe <GetElement+0x36>
        {
            // We have found the element
            return element;
        }
        element = IncreaseBufferPointer( element );
 800cfa8:	4620      	mov	r0, r4
 800cfaa:	f7ff ffd5 	bl	800cf58 <IncreaseBufferPointer>
 800cfae:	4604      	mov	r4, r0
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800cfb0:	3501      	adds	r5, #1
 800cfb2:	b2ed      	uxtb	r5, r5
 800cfb4:	e7f3      	b.n	800cf9e <GetElement+0x16>
    }

    return NULL;
 800cfb6:	2000      	movs	r0, #0
}
 800cfb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
 800cfba:	2000      	movs	r0, #0
 800cfbc:	e7fc      	b.n	800cfb8 <GetElement+0x30>
            return element;
 800cfbe:	4620      	mov	r0, r4
 800cfc0:	e7fa      	b.n	800cfb8 <GetElement+0x30>
 800cfc2:	bf00      	nop
 800cfc4:	20000fe4 	.word	0x20000fe4

0800cfc8 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 800cfc8:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800cfca:	4c08      	ldr	r4, [pc, #32]	; (800cfec <LoRaMacConfirmQueueInit+0x24>)
 800cfcc:	6020      	str	r0, [r4, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800cfce:	2300      	movs	r3, #0
 800cfd0:	f884 3020 	strb.w	r3, [r4, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800cfd4:	f104 000c 	add.w	r0, r4, #12
 800cfd8:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800cfda:	60a0      	str	r0, [r4, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800cfdc:	2214      	movs	r2, #20
 800cfde:	21ff      	movs	r1, #255	; 0xff
 800cfe0:	f003 fea3 	bl	8010d2a <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800cfe4:	2301      	movs	r3, #1
 800cfe6:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800cfea:	bd10      	pop	{r4, pc}
 800cfec:	20000fe4 	.word	0x20000fe4

0800cff0 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800cff0:	b538      	push	{r3, r4, r5, lr}
 800cff2:	4605      	mov	r5, r0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800cff4:	4b0f      	ldr	r3, [pc, #60]	; (800d034 <LoRaMacConfirmQueueAdd+0x44>)
 800cff6:	f893 0020 	ldrb.w	r0, [r3, #32]
 800cffa:	f7ff ffbe 	bl	800cf7a <IsListFull>
 800cffe:	b9b8      	cbnz	r0, 800d030 <LoRaMacConfirmQueueAdd+0x40>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800d000:	4c0c      	ldr	r4, [pc, #48]	; (800d034 <LoRaMacConfirmQueueAdd+0x44>)
 800d002:	68a3      	ldr	r3, [r4, #8]
 800d004:	782a      	ldrb	r2, [r5, #0]
 800d006:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800d008:	68a3      	ldr	r3, [r4, #8]
 800d00a:	786a      	ldrb	r2, [r5, #1]
 800d00c:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800d00e:	68a3      	ldr	r3, [r4, #8]
 800d010:	78ea      	ldrb	r2, [r5, #3]
 800d012:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 800d014:	68a3      	ldr	r3, [r4, #8]
 800d016:	78aa      	ldrb	r2, [r5, #2]
 800d018:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800d01a:	f894 3020 	ldrb.w	r3, [r4, #32]
 800d01e:	3301      	adds	r3, #1
 800d020:	f884 3020 	strb.w	r3, [r4, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800d024:	68a0      	ldr	r0, [r4, #8]
 800d026:	f7ff ff97 	bl	800cf58 <IncreaseBufferPointer>
 800d02a:	60a0      	str	r0, [r4, #8]

    return true;
 800d02c:	2001      	movs	r0, #1
}
 800d02e:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800d030:	2000      	movs	r0, #0
 800d032:	e7fc      	b.n	800d02e <LoRaMacConfirmQueueAdd+0x3e>
 800d034:	20000fe4 	.word	0x20000fe4

0800d038 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800d038:	b538      	push	{r3, r4, r5, lr}
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800d03a:	4b09      	ldr	r3, [pc, #36]	; (800d060 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800d03c:	f893 4020 	ldrb.w	r4, [r3, #32]
 800d040:	4620      	mov	r0, r4
 800d042:	f7ff ff95 	bl	800cf70 <IsListEmpty>
 800d046:	b948      	cbnz	r0, 800d05c <LoRaMacConfirmQueueRemoveFirst+0x24>
    {
        return false;
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800d048:	4d05      	ldr	r5, [pc, #20]	; (800d060 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800d04a:	3c01      	subs	r4, #1
 800d04c:	f885 4020 	strb.w	r4, [r5, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800d050:	6868      	ldr	r0, [r5, #4]
 800d052:	f7ff ff81 	bl	800cf58 <IncreaseBufferPointer>
 800d056:	6068      	str	r0, [r5, #4]

    return true;
 800d058:	2001      	movs	r0, #1
}
 800d05a:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800d05c:	2000      	movs	r0, #0
 800d05e:	e7fc      	b.n	800d05a <LoRaMacConfirmQueueRemoveFirst+0x22>
 800d060:	20000fe4 	.word	0x20000fe4

0800d064 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800d064:	b538      	push	{r3, r4, r5, lr}
 800d066:	4605      	mov	r5, r0
 800d068:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800d06a:	4b08      	ldr	r3, [pc, #32]	; (800d08c <LoRaMacConfirmQueueSetStatus+0x28>)
 800d06c:	f893 0020 	ldrb.w	r0, [r3, #32]
 800d070:	f7ff ff7e 	bl	800cf70 <IsListEmpty>
 800d074:	b948      	cbnz	r0, 800d08a <LoRaMacConfirmQueueSetStatus+0x26>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800d076:	4b05      	ldr	r3, [pc, #20]	; (800d08c <LoRaMacConfirmQueueSetStatus+0x28>)
 800d078:	689a      	ldr	r2, [r3, #8]
 800d07a:	6859      	ldr	r1, [r3, #4]
 800d07c:	4620      	mov	r0, r4
 800d07e:	f7ff ff83 	bl	800cf88 <GetElement>
        if( element != NULL )
 800d082:	b110      	cbz	r0, 800d08a <LoRaMacConfirmQueueSetStatus+0x26>
        {
            element->Status = status;
 800d084:	7045      	strb	r5, [r0, #1]
            element->ReadyToHandle = true;
 800d086:	2201      	movs	r2, #1
 800d088:	7082      	strb	r2, [r0, #2]
        }
    }
}
 800d08a:	bd38      	pop	{r3, r4, r5, pc}
 800d08c:	20000fe4 	.word	0x20000fe4

0800d090 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800d090:	b510      	push	{r4, lr}
 800d092:	4604      	mov	r4, r0
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800d094:	4b09      	ldr	r3, [pc, #36]	; (800d0bc <LoRaMacConfirmQueueGetStatus+0x2c>)
 800d096:	f893 0020 	ldrb.w	r0, [r3, #32]
 800d09a:	f7ff ff69 	bl	800cf70 <IsListEmpty>
 800d09e:	b940      	cbnz	r0, 800d0b2 <LoRaMacConfirmQueueGetStatus+0x22>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800d0a0:	4b06      	ldr	r3, [pc, #24]	; (800d0bc <LoRaMacConfirmQueueGetStatus+0x2c>)
 800d0a2:	689a      	ldr	r2, [r3, #8]
 800d0a4:	6859      	ldr	r1, [r3, #4]
 800d0a6:	4620      	mov	r0, r4
 800d0a8:	f7ff ff6e 	bl	800cf88 <GetElement>
        if( element != NULL )
 800d0ac:	b118      	cbz	r0, 800d0b6 <LoRaMacConfirmQueueGetStatus+0x26>
        {
            return element->Status;
 800d0ae:	7840      	ldrb	r0, [r0, #1]
 800d0b0:	e000      	b.n	800d0b4 <LoRaMacConfirmQueueGetStatus+0x24>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d0b2:	2001      	movs	r0, #1
}
 800d0b4:	bd10      	pop	{r4, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d0b6:	2001      	movs	r0, #1
 800d0b8:	e7fc      	b.n	800d0b4 <LoRaMacConfirmQueueGetStatus+0x24>
 800d0ba:	bf00      	nop
 800d0bc:	20000fe4 	.word	0x20000fe4

0800d0c0 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800d0c0:	b538      	push	{r3, r4, r5, lr}
 800d0c2:	4605      	mov	r5, r0
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800d0c4:	4b0c      	ldr	r3, [pc, #48]	; (800d0f8 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800d0c6:	685c      	ldr	r4, [r3, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 800d0c8:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800d0cc:	f893 0020 	ldrb.w	r0, [r3, #32]
 800d0d0:	f7ff ff4e 	bl	800cf70 <IsListEmpty>
 800d0d4:	b150      	cbz	r0, 800d0ec <LoRaMacConfirmQueueSetStatusCmn+0x2c>
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
    }
}
 800d0d6:	bd38      	pop	{r3, r4, r5, pc}
                element->ReadyToHandle = true;
 800d0d8:	2301      	movs	r3, #1
 800d0da:	70a3      	strb	r3, [r4, #2]
            element = IncreaseBufferPointer( element );
 800d0dc:	4620      	mov	r0, r4
 800d0de:	f7ff ff3b 	bl	800cf58 <IncreaseBufferPointer>
 800d0e2:	4604      	mov	r4, r0
        }while( element != ConfirmQueueCtx.BufferEnd );
 800d0e4:	4b04      	ldr	r3, [pc, #16]	; (800d0f8 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800d0e6:	689b      	ldr	r3, [r3, #8]
 800d0e8:	4283      	cmp	r3, r0
 800d0ea:	d0f4      	beq.n	800d0d6 <LoRaMacConfirmQueueSetStatusCmn+0x16>
            element->Status = status;
 800d0ec:	7065      	strb	r5, [r4, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800d0ee:	78e3      	ldrb	r3, [r4, #3]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d1f3      	bne.n	800d0dc <LoRaMacConfirmQueueSetStatusCmn+0x1c>
 800d0f4:	e7f0      	b.n	800d0d8 <LoRaMacConfirmQueueSetStatusCmn+0x18>
 800d0f6:	bf00      	nop
 800d0f8:	20000fe4 	.word	0x20000fe4

0800d0fc <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 800d0fc:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800d0fe:	4b04      	ldr	r3, [pc, #16]	; (800d110 <LoRaMacConfirmQueueIsCmdActive+0x14>)
 800d100:	689a      	ldr	r2, [r3, #8]
 800d102:	6859      	ldr	r1, [r3, #4]
 800d104:	f7ff ff40 	bl	800cf88 <GetElement>
 800d108:	b100      	cbz	r0, 800d10c <LoRaMacConfirmQueueIsCmdActive+0x10>
    {
        return true;
 800d10a:	2001      	movs	r0, #1
    }
    return false;
}
 800d10c:	bd08      	pop	{r3, pc}
 800d10e:	bf00      	nop
 800d110:	20000fe4 	.word	0x20000fe4

0800d114 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800d114:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d116:	b083      	sub	sp, #12
 800d118:	4606      	mov	r6, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800d11a:	4b16      	ldr	r3, [pc, #88]	; (800d174 <LoRaMacConfirmQueueHandleCb+0x60>)
 800d11c:	f893 7020 	ldrb.w	r7, [r3, #32]
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 800d120:	2400      	movs	r4, #0
 800d122:	e00d      	b.n	800d140 <LoRaMacConfirmQueueHandleCb+0x2c>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800d124:	781a      	ldrb	r2, [r3, #0]
 800d126:	f88d 2004 	strb.w	r2, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800d12a:	785a      	ldrb	r2, [r3, #1]
 800d12c:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800d130:	78db      	ldrb	r3, [r3, #3]
 800d132:	f88d 3007 	strb.w	r3, [sp, #7]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 800d136:	f7ff ff7f 	bl	800d038 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 800d13a:	b1a5      	cbz	r5, 800d166 <LoRaMacConfirmQueueHandleCb+0x52>
    for( uint8_t i = 0; i < nbElements; i++ )
 800d13c:	3401      	adds	r4, #1
 800d13e:	b2e4      	uxtb	r4, r4
 800d140:	42bc      	cmp	r4, r7
 800d142:	d214      	bcs.n	800d16e <LoRaMacConfirmQueueHandleCb+0x5a>
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800d144:	4b0b      	ldr	r3, [pc, #44]	; (800d174 <LoRaMacConfirmQueueHandleCb+0x60>)
 800d146:	685a      	ldr	r2, [r3, #4]
 800d148:	7812      	ldrb	r2, [r2, #0]
 800d14a:	7032      	strb	r2, [r6, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800d14c:	685a      	ldr	r2, [r3, #4]
 800d14e:	7852      	ldrb	r2, [r2, #1]
 800d150:	7072      	strb	r2, [r6, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800d152:	685b      	ldr	r3, [r3, #4]
 800d154:	789d      	ldrb	r5, [r3, #2]
        if( readyToHandle == true )
 800d156:	2d00      	cmp	r5, #0
 800d158:	d0e4      	beq.n	800d124 <LoRaMacConfirmQueueHandleCb+0x10>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800d15a:	4b06      	ldr	r3, [pc, #24]	; (800d174 <LoRaMacConfirmQueueHandleCb+0x60>)
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	689b      	ldr	r3, [r3, #8]
 800d160:	4630      	mov	r0, r6
 800d162:	4798      	blx	r3
 800d164:	e7e7      	b.n	800d136 <LoRaMacConfirmQueueHandleCb+0x22>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800d166:	a801      	add	r0, sp, #4
 800d168:	f7ff ff42 	bl	800cff0 <LoRaMacConfirmQueueAdd>
 800d16c:	e7e6      	b.n	800d13c <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 800d16e:	b003      	add	sp, #12
 800d170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d172:	bf00      	nop
 800d174:	20000fe4 	.word	0x20000fe4

0800d178 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
}
 800d178:	4b01      	ldr	r3, [pc, #4]	; (800d180 <LoRaMacConfirmQueueGetCnt+0x8>)
 800d17a:	f893 0020 	ldrb.w	r0, [r3, #32]
 800d17e:	4770      	bx	lr
 800d180:	20000fe4 	.word	0x20000fe4

0800d184 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 800d184:	b508      	push	{r3, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800d186:	4b03      	ldr	r3, [pc, #12]	; (800d194 <LoRaMacConfirmQueueIsFull+0x10>)
 800d188:	f893 0020 	ldrb.w	r0, [r3, #32]
 800d18c:	f7ff fef5 	bl	800cf7a <IsListFull>
    }
    else
    {
        return false;
    }
}
 800d190:	bd08      	pop	{r3, pc}
 800d192:	bf00      	nop
 800d194:	20000fe4 	.word	0x20000fe4

0800d198 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 800d198:	b410      	push	{r4}
 800d19a:	9c01      	ldr	r4, [sp, #4]
 800d19c:	9902      	ldr	r1, [sp, #8]
 800d19e:	9a03      	ldr	r2, [sp, #12]
    if( b0 == 0 )
 800d1a0:	b1da      	cbz	r2, 800d1da <PrepareB0+0x42>
 800d1a2:	4684      	mov	ip, r0
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    b0[0] = 0x49;
 800d1a4:	2049      	movs	r0, #73	; 0x49
 800d1a6:	7010      	strb	r0, [r2, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 800d1a8:	2000      	movs	r0, #0
 800d1aa:	7050      	strb	r0, [r2, #1]
        b0[2] = 0x00;
 800d1ac:	7090      	strb	r0, [r2, #2]
    }

    b0[3] = 0x00;
 800d1ae:	70d0      	strb	r0, [r2, #3]
    b0[4] = 0x00;
 800d1b0:	7110      	strb	r0, [r2, #4]

    b0[5] = dir;
 800d1b2:	7153      	strb	r3, [r2, #5]

    b0[6] = devAddr & 0xFF;
 800d1b4:	7194      	strb	r4, [r2, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800d1b6:	0a23      	lsrs	r3, r4, #8
 800d1b8:	71d3      	strb	r3, [r2, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800d1ba:	0c23      	lsrs	r3, r4, #16
 800d1bc:	7213      	strb	r3, [r2, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800d1be:	0e24      	lsrs	r4, r4, #24
 800d1c0:	7254      	strb	r4, [r2, #9]

    b0[10] = fCnt & 0xFF;
 800d1c2:	7291      	strb	r1, [r2, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800d1c4:	0a0b      	lsrs	r3, r1, #8
 800d1c6:	72d3      	strb	r3, [r2, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800d1c8:	0c0b      	lsrs	r3, r1, #16
 800d1ca:	7313      	strb	r3, [r2, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800d1cc:	0e09      	lsrs	r1, r1, #24
 800d1ce:	7351      	strb	r1, [r2, #13]

    b0[14] = 0x00;
 800d1d0:	7390      	strb	r0, [r2, #14]

    b0[15] = msgLen & 0xFF;
 800d1d2:	f882 c00f 	strb.w	ip, [r2, #15]

    return LORAMAC_CRYPTO_SUCCESS;
}
 800d1d6:	bc10      	pop	{r4}
 800d1d8:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d1da:	2009      	movs	r0, #9
 800d1dc:	e7fb      	b.n	800d1d6 <PrepareB0+0x3e>
	...

0800d1e0 <GetKeyAddrItem>:
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	2b01      	cmp	r3, #1
 800d1e4:	d80e      	bhi.n	800d204 <GetKeyAddrItem+0x24>
    {
        if( KeyAddrList[i].AddrID == addrID )
 800d1e6:	469c      	mov	ip, r3
 800d1e8:	4a07      	ldr	r2, [pc, #28]	; (800d208 <GetKeyAddrItem+0x28>)
 800d1ea:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 800d1ee:	4282      	cmp	r2, r0
 800d1f0:	d002      	beq.n	800d1f8 <GetKeyAddrItem+0x18>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800d1f2:	3301      	adds	r3, #1
 800d1f4:	b2db      	uxtb	r3, r3
 800d1f6:	e7f4      	b.n	800d1e2 <GetKeyAddrItem+0x2>
        {
            *item = &( KeyAddrList[i] );
 800d1f8:	4b03      	ldr	r3, [pc, #12]	; (800d208 <GetKeyAddrItem+0x28>)
 800d1fa:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 800d1fe:	600b      	str	r3, [r1, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 800d200:	2000      	movs	r0, #0
 800d202:	4770      	bx	lr
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800d204:	200b      	movs	r0, #11
}
 800d206:	4770      	bx	lr
 800d208:	20000100 	.word	0x20000100

0800d20c <GetLastFcntDown>:
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
    if( lastDown == NULL )
 800d20c:	460b      	mov	r3, r1
 800d20e:	2900      	cmp	r1, #0
 800d210:	d024      	beq.n	800d25c <GetLastFcntDown+0x50>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 800d212:	3801      	subs	r0, #1
 800d214:	2803      	cmp	r0, #3
 800d216:	d823      	bhi.n	800d260 <GetLastFcntDown+0x54>
 800d218:	e8df f000 	tbb	[pc, r0]
 800d21c:	1a120a02 	.word	0x1a120a02
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 800d220:	4a10      	ldr	r2, [pc, #64]	; (800d264 <GetLastFcntDown+0x58>)
 800d222:	6812      	ldr	r2, [r2, #0]
 800d224:	6911      	ldr	r1, [r2, #16]
 800d226:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 800d228:	6913      	ldr	r3, [r2, #16]
 800d22a:	6213      	str	r3, [r2, #32]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800d22c:	2000      	movs	r0, #0
            break;
 800d22e:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 800d230:	4a0c      	ldr	r2, [pc, #48]	; (800d264 <GetLastFcntDown+0x58>)
 800d232:	6812      	ldr	r2, [r2, #0]
 800d234:	6951      	ldr	r1, [r2, #20]
 800d236:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 800d238:	6953      	ldr	r3, [r2, #20]
 800d23a:	6213      	str	r3, [r2, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800d23c:	2000      	movs	r0, #0
            break;
 800d23e:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.FCntDown;
 800d240:	4a08      	ldr	r2, [pc, #32]	; (800d264 <GetLastFcntDown+0x58>)
 800d242:	6812      	ldr	r2, [r2, #0]
 800d244:	6991      	ldr	r1, [r2, #24]
 800d246:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800d248:	6993      	ldr	r3, [r2, #24]
 800d24a:	6213      	str	r3, [r2, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800d24c:	2000      	movs	r0, #0
            break;
 800d24e:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800d250:	4a04      	ldr	r2, [pc, #16]	; (800d264 <GetLastFcntDown+0x58>)
 800d252:	6812      	ldr	r2, [r2, #0]
 800d254:	69d2      	ldr	r2, [r2, #28]
 800d256:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800d258:	2000      	movs	r0, #0
            break;
 800d25a:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d25c:	2009      	movs	r0, #9
 800d25e:	4770      	bx	lr
    switch( fCntID )
 800d260:	2005      	movs	r0, #5
}
 800d262:	4770      	bx	lr
 800d264:	20001008 	.word	0x20001008

0800d268 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 800d268:	b510      	push	{r4, lr}
 800d26a:	b082      	sub	sp, #8
 800d26c:	460c      	mov	r4, r1
    uint32_t lastDown = 0;
 800d26e:	2300      	movs	r3, #0
 800d270:	9301      	str	r3, [sp, #4]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800d272:	a901      	add	r1, sp, #4
 800d274:	f7ff ffca 	bl	800d20c <GetLastFcntDown>
 800d278:	b948      	cbnz	r0, 800d28e <CheckFCntDown+0x26>
    {
        return false;
    }
    if( ( currentDown > lastDown ) ||
 800d27a:	9b01      	ldr	r3, [sp, #4]
 800d27c:	42a3      	cmp	r3, r4
 800d27e:	d309      	bcc.n	800d294 <CheckFCntDown+0x2c>
 800d280:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d284:	d001      	beq.n	800d28a <CheckFCntDown+0x22>
    {
        return true;
    }
    else
    {
        return false;
 800d286:	2000      	movs	r0, #0
 800d288:	e002      	b.n	800d290 <CheckFCntDown+0x28>
        return true;
 800d28a:	2001      	movs	r0, #1
 800d28c:	e000      	b.n	800d290 <CheckFCntDown+0x28>
        return false;
 800d28e:	2000      	movs	r0, #0
    }
}
 800d290:	b002      	add	sp, #8
 800d292:	bd10      	pop	{r4, pc}
        return true;
 800d294:	2001      	movs	r0, #1
 800d296:	e7fb      	b.n	800d290 <CheckFCntDown+0x28>

0800d298 <UpdateFCntDown>:
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
    switch( fCntID )
 800d298:	3801      	subs	r0, #1
 800d29a:	2803      	cmp	r0, #3
 800d29c:	d812      	bhi.n	800d2c4 <UpdateFCntDown+0x2c>
 800d29e:	e8df f000 	tbb	[pc, r0]
 800d2a2:	0602      	.short	0x0602
 800d2a4:	0e0a      	.short	0x0e0a
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 800d2a6:	4b08      	ldr	r3, [pc, #32]	; (800d2c8 <UpdateFCntDown+0x30>)
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	6119      	str	r1, [r3, #16]
            break;
 800d2ac:	4770      	bx	lr
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 800d2ae:	4b06      	ldr	r3, [pc, #24]	; (800d2c8 <UpdateFCntDown+0x30>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	6159      	str	r1, [r3, #20]
            break;
 800d2b4:	4770      	bx	lr
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 800d2b6:	4b04      	ldr	r3, [pc, #16]	; (800d2c8 <UpdateFCntDown+0x30>)
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	6199      	str	r1, [r3, #24]
            break;
 800d2bc:	4770      	bx	lr
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800d2be:	4b02      	ldr	r3, [pc, #8]	; (800d2c8 <UpdateFCntDown+0x30>)
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	61d9      	str	r1, [r3, #28]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
    }
}
 800d2c4:	4770      	bx	lr
 800d2c6:	bf00      	nop
 800d2c8:	20001008 	.word	0x20001008

0800d2cc <ResetFCnts>:
/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
    CryptoNvm->FCntList.FCntUp = 0;
 800d2cc:	4b0a      	ldr	r3, [pc, #40]	; (800d2f8 <ResetFCnts+0x2c>)
 800d2ce:	681a      	ldr	r2, [r3, #0]
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	60d3      	str	r3, [r2, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800d2d4:	f04f 31ff 	mov.w	r1, #4294967295
 800d2d8:	6111      	str	r1, [r2, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800d2da:	6151      	str	r1, [r2, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800d2dc:	6191      	str	r1, [r2, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800d2de:	6211      	str	r1, [r2, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	dd00      	ble.n	800d2e6 <ResetFCnts+0x1a>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
    }
}
 800d2e4:	4770      	bx	lr
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 800d2e6:	1d99      	adds	r1, r3, #6
 800d2e8:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800d2ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d2f0:	6048      	str	r0, [r1, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d2f2:	3301      	adds	r3, #1
 800d2f4:	e7f4      	b.n	800d2e0 <ResetFCnts+0x14>
 800d2f6:	bf00      	nop
 800d2f8:	20001008 	.word	0x20001008

0800d2fc <ComputeCmacB0>:
{
 800d2fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d300:	b088      	sub	sp, #32
 800d302:	9e11      	ldr	r6, [sp, #68]	; 0x44
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800d304:	b1f0      	cbz	r0, 800d344 <ComputeCmacB0+0x48>
 800d306:	460c      	mov	r4, r1
 800d308:	4615      	mov	r5, r2
 800d30a:	461a      	mov	r2, r3
 800d30c:	4680      	mov	r8, r0
 800d30e:	b1de      	cbz	r6, 800d348 <ComputeCmacB0+0x4c>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800d310:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800d314:	d81a      	bhi.n	800d34c <ComputeCmacB0+0x50>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800d316:	af04      	add	r7, sp, #16
 800d318:	9702      	str	r7, [sp, #8]
 800d31a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d31c:	9301      	str	r3, [sp, #4]
 800d31e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d320:	9300      	str	r3, [sp, #0]
 800d322:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800d326:	4629      	mov	r1, r5
 800d328:	4620      	mov	r0, r4
 800d32a:	f7ff ff35 	bl	800d198 <PrepareB0>
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800d32e:	9600      	str	r6, [sp, #0]
 800d330:	462b      	mov	r3, r5
 800d332:	4622      	mov	r2, r4
 800d334:	4641      	mov	r1, r8
 800d336:	4638      	mov	r0, r7
 800d338:	f003 fb87 	bl	8010a4a <SecureElementComputeAesCmac>
 800d33c:	b940      	cbnz	r0, 800d350 <ComputeCmacB0+0x54>
}
 800d33e:	b008      	add	sp, #32
 800d340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d344:	2009      	movs	r0, #9
 800d346:	e7fa      	b.n	800d33e <ComputeCmacB0+0x42>
 800d348:	2009      	movs	r0, #9
 800d34a:	e7f8      	b.n	800d33e <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800d34c:	200d      	movs	r0, #13
 800d34e:	e7f6      	b.n	800d33e <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d350:	200e      	movs	r0, #14
 800d352:	e7f4      	b.n	800d33e <ComputeCmacB0+0x42>

0800d354 <DeriveSessionKey10x>:
{
 800d354:	b510      	push	{r4, lr}
 800d356:	b084      	sub	sp, #16
    uint8_t compBase[16] = { 0 };
 800d358:	2400      	movs	r4, #0
 800d35a:	9400      	str	r4, [sp, #0]
 800d35c:	9401      	str	r4, [sp, #4]
 800d35e:	9402      	str	r4, [sp, #8]
 800d360:	9403      	str	r4, [sp, #12]
    switch( keyID )
 800d362:	2802      	cmp	r0, #2
 800d364:	d003      	beq.n	800d36e <DeriveSessionKey10x+0x1a>
 800d366:	2803      	cmp	r0, #3
 800d368:	d025      	beq.n	800d3b6 <DeriveSessionKey10x+0x62>
 800d36a:	200a      	movs	r0, #10
 800d36c:	e021      	b.n	800d3b2 <DeriveSessionKey10x+0x5e>
            compBase[0] = 0x01;
 800d36e:	2401      	movs	r4, #1
 800d370:	f88d 4000 	strb.w	r4, [sp]
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 800d374:	f88d 1001 	strb.w	r1, [sp, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800d378:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800d37c:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 800d380:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800d384:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 800d388:	f88d 2004 	strb.w	r2, [sp, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 800d38c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800d390:	f88d 1005 	strb.w	r1, [sp, #5]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 800d394:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800d398:	f88d 2006 	strb.w	r2, [sp, #6]
    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 800d39c:	f88d 3007 	strb.w	r3, [sp, #7]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 800d3a0:	0a1b      	lsrs	r3, r3, #8
 800d3a2:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800d3a6:	4602      	mov	r2, r0
 800d3a8:	2101      	movs	r1, #1
 800d3aa:	4668      	mov	r0, sp
 800d3ac:	f003 fbec 	bl	8010b88 <SecureElementDeriveAndStoreKey>
 800d3b0:	b928      	cbnz	r0, 800d3be <DeriveSessionKey10x+0x6a>
}
 800d3b2:	b004      	add	sp, #16
 800d3b4:	bd10      	pop	{r4, pc}
            compBase[0] = 0x02;
 800d3b6:	2402      	movs	r4, #2
 800d3b8:	f88d 4000 	strb.w	r4, [sp]
            break;
 800d3bc:	e7da      	b.n	800d374 <DeriveSessionKey10x+0x20>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d3be:	200e      	movs	r0, #14
 800d3c0:	e7f7      	b.n	800d3b2 <DeriveSessionKey10x+0x5e>

0800d3c2 <PayloadEncrypt>:
{
 800d3c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3c6:	b088      	sub	sp, #32
 800d3c8:	4690      	mov	r8, r2
 800d3ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    if( buffer == 0 )
 800d3cc:	2800      	cmp	r0, #0
 800d3ce:	d052      	beq.n	800d476 <PayloadEncrypt+0xb4>
 800d3d0:	460d      	mov	r5, r1
 800d3d2:	4604      	mov	r4, r0
    uint8_t sBlock[16] = { 0 };
 800d3d4:	2600      	movs	r6, #0
 800d3d6:	9604      	str	r6, [sp, #16]
 800d3d8:	9605      	str	r6, [sp, #20]
 800d3da:	9606      	str	r6, [sp, #24]
 800d3dc:	9607      	str	r6, [sp, #28]
    uint8_t aBlock[16] = { 0 };
 800d3de:	9600      	str	r6, [sp, #0]
 800d3e0:	9601      	str	r6, [sp, #4]
 800d3e2:	9602      	str	r6, [sp, #8]
 800d3e4:	9603      	str	r6, [sp, #12]
    aBlock[0] = 0x01;
 800d3e6:	2701      	movs	r7, #1
 800d3e8:	f88d 7000 	strb.w	r7, [sp]
    aBlock[5] = dir;
 800d3ec:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800d3f0:	f88d 1005 	strb.w	r1, [sp, #5]
    aBlock[6] = address & 0xFF;
 800d3f4:	f88d 3006 	strb.w	r3, [sp, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800d3f8:	0a19      	lsrs	r1, r3, #8
 800d3fa:	f88d 1007 	strb.w	r1, [sp, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800d3fe:	0c19      	lsrs	r1, r3, #16
 800d400:	f88d 1008 	strb.w	r1, [sp, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800d404:	0e1b      	lsrs	r3, r3, #24
 800d406:	f88d 3009 	strb.w	r3, [sp, #9]
    aBlock[10] = frameCounter & 0xFF;
 800d40a:	f88d 200a 	strb.w	r2, [sp, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800d40e:	0a13      	lsrs	r3, r2, #8
 800d410:	f88d 300b 	strb.w	r3, [sp, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800d414:	0c13      	lsrs	r3, r2, #16
 800d416:	f88d 300c 	strb.w	r3, [sp, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800d41a:	0e12      	lsrs	r2, r2, #24
 800d41c:	f88d 200d 	strb.w	r2, [sp, #13]
    while( size > 0 )
 800d420:	e014      	b.n	800d44c <PayloadEncrypt+0x8a>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800d422:	18f2      	adds	r2, r6, r3
 800d424:	5ca0      	ldrb	r0, [r4, r2]
 800d426:	f103 0120 	add.w	r1, r3, #32
 800d42a:	4469      	add	r1, sp
 800d42c:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 800d430:	4048      	eors	r0, r1
 800d432:	54a0      	strb	r0, [r4, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800d434:	3301      	adds	r3, #1
 800d436:	b2db      	uxtb	r3, r3
 800d438:	462a      	mov	r2, r5
 800d43a:	2d10      	cmp	r5, #16
 800d43c:	bfa8      	it	ge
 800d43e:	2210      	movge	r2, #16
 800d440:	4293      	cmp	r3, r2
 800d442:	dbee      	blt.n	800d422 <PayloadEncrypt+0x60>
        size -= 16;
 800d444:	3d10      	subs	r5, #16
 800d446:	b22d      	sxth	r5, r5
        bufferIndex += 16;
 800d448:	3610      	adds	r6, #16
 800d44a:	b2f6      	uxtb	r6, r6
    while( size > 0 )
 800d44c:	2d00      	cmp	r5, #0
 800d44e:	dd0e      	ble.n	800d46e <PayloadEncrypt+0xac>
        aBlock[15] = ctr & 0xFF;
 800d450:	f88d 700f 	strb.w	r7, [sp, #15]
        ctr++;
 800d454:	3701      	adds	r7, #1
 800d456:	b2bf      	uxth	r7, r7
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800d458:	ab04      	add	r3, sp, #16
 800d45a:	4642      	mov	r2, r8
 800d45c:	2110      	movs	r1, #16
 800d45e:	4668      	mov	r0, sp
 800d460:	f003 fb18 	bl	8010a94 <SecureElementAesEncrypt>
 800d464:	4603      	mov	r3, r0
 800d466:	2800      	cmp	r0, #0
 800d468:	d0e6      	beq.n	800d438 <PayloadEncrypt+0x76>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d46a:	200e      	movs	r0, #14
 800d46c:	e000      	b.n	800d470 <PayloadEncrypt+0xae>
    return LORAMAC_CRYPTO_SUCCESS;
 800d46e:	2000      	movs	r0, #0
}
 800d470:	b008      	add	sp, #32
 800d472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d476:	2009      	movs	r0, #9
 800d478:	e7fa      	b.n	800d470 <PayloadEncrypt+0xae>

0800d47a <VerifyCmacB0>:
    if( msg == 0 )
 800d47a:	b370      	cbz	r0, 800d4da <VerifyCmacB0+0x60>
{
 800d47c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d480:	b0c8      	sub	sp, #288	; 0x120
 800d482:	460c      	mov	r4, r1
 800d484:	4615      	mov	r5, r2
 800d486:	461e      	mov	r6, r3
 800d488:	4680      	mov	r8, r0
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800d48a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800d48e:	d826      	bhi.n	800d4de <VerifyCmacB0+0x64>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800d490:	af04      	add	r7, sp, #16
 800d492:	f44f 7288 	mov.w	r2, #272	; 0x110
 800d496:	2100      	movs	r1, #0
 800d498:	4638      	mov	r0, r7
 800d49a:	f003 fc46 	bl	8010d2a <memset1>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800d49e:	9702      	str	r7, [sp, #8]
 800d4a0:	9b50      	ldr	r3, [sp, #320]	; 0x140
 800d4a2:	9301      	str	r3, [sp, #4]
 800d4a4:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 800d4a6:	9300      	str	r3, [sp, #0]
 800d4a8:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
 800d4ac:	4632      	mov	r2, r6
 800d4ae:	4629      	mov	r1, r5
 800d4b0:	4620      	mov	r0, r4
 800d4b2:	f7ff fe71 	bl	800d198 <PrepareB0>
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800d4b6:	4622      	mov	r2, r4
 800d4b8:	4641      	mov	r1, r8
 800d4ba:	a808      	add	r0, sp, #32
 800d4bc:	f003 fc1d 	bl	8010cfa <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800d4c0:	f104 0110 	add.w	r1, r4, #16
 800d4c4:	462b      	mov	r3, r5
 800d4c6:	9a51      	ldr	r2, [sp, #324]	; 0x144
 800d4c8:	b289      	uxth	r1, r1
 800d4ca:	4638      	mov	r0, r7
 800d4cc:	f003 facc 	bl	8010a68 <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800d4d0:	b130      	cbz	r0, 800d4e0 <VerifyCmacB0+0x66>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800d4d2:	2801      	cmp	r0, #1
 800d4d4:	d004      	beq.n	800d4e0 <VerifyCmacB0+0x66>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d4d6:	200e      	movs	r0, #14
 800d4d8:	e002      	b.n	800d4e0 <VerifyCmacB0+0x66>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d4da:	2009      	movs	r0, #9
}
 800d4dc:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800d4de:	200d      	movs	r0, #13
}
 800d4e0:	b048      	add	sp, #288	; 0x120
 800d4e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800d4e8 <LoRaMacCryptoInit>:
/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
    if( nvm == NULL )
 800d4e8:	b188      	cbz	r0, 800d50e <LoRaMacCryptoInit+0x26>
{
 800d4ea:	b510      	push	{r4, lr}
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 800d4ec:	4c09      	ldr	r4, [pc, #36]	; (800d514 <LoRaMacCryptoInit+0x2c>)
 800d4ee:	6020      	str	r0, [r4, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800d4f0:	2228      	movs	r2, #40	; 0x28
 800d4f2:	2100      	movs	r1, #0
 800d4f4:	f003 fc19 	bl	8010d2a <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 800d4f8:	6823      	ldr	r3, [r4, #0]
 800d4fa:	2201      	movs	r2, #1
 800d4fc:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 800d4fe:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 800d500:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800d502:	2400      	movs	r4, #0
 800d504:	701c      	strb	r4, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 800d506:	f7ff fee1 	bl	800d2cc <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 800d50a:	4620      	mov	r0, r4
}
 800d50c:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
 800d50e:	2008      	movs	r0, #8
}
 800d510:	4770      	bx	lr
 800d512:	bf00      	nop
 800d514:	20001008 	.word	0x20001008

0800d518 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoNvm->LrWanVersion = version;
 800d518:	4b02      	ldr	r3, [pc, #8]	; (800d524 <LoRaMacCryptoSetLrWanVersion+0xc>)
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
 800d51e:	2000      	movs	r0, #0
 800d520:	4770      	bx	lr
 800d522:	bf00      	nop
 800d524:	20001008 	.word	0x20001008

0800d528 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
 800d528:	b130      	cbz	r0, 800d538 <LoRaMacCryptoGetFCntUp+0x10>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 800d52a:	4b04      	ldr	r3, [pc, #16]	; (800d53c <LoRaMacCryptoGetFCntUp+0x14>)
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	68db      	ldr	r3, [r3, #12]
 800d530:	3301      	adds	r3, #1
 800d532:	6003      	str	r3, [r0, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800d534:	2000      	movs	r0, #0
 800d536:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d538:	2009      	movs	r0, #9
}
 800d53a:	4770      	bx	lr
 800d53c:	20001008 	.word	0x20001008

0800d540 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 800d540:	b530      	push	{r4, r5, lr}
 800d542:	b083      	sub	sp, #12
    uint32_t lastDown = 0;
 800d544:	2300      	movs	r3, #0
 800d546:	9301      	str	r3, [sp, #4]
    int32_t fCntDiff = 0;
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;

    if( currentDown == NULL )
 800d548:	b1f2      	cbz	r2, 800d588 <LoRaMacCryptoGetFCntDown+0x48>
 800d54a:	460c      	mov	r4, r1
 800d54c:	4615      	mov	r5, r2
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800d54e:	a901      	add	r1, sp, #4
 800d550:	f7ff fe5c 	bl	800d20c <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800d554:	b948      	cbnz	r0, 800d56a <LoRaMacCryptoGetFCntDown+0x2a>
    {
        return cryptoStatus;
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 800d556:	9b01      	ldr	r3, [sp, #4]
 800d558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d55c:	d007      	beq.n	800d56e <LoRaMacCryptoGetFCntDown+0x2e>
        *currentDown = frameFcnt;
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 800d55e:	b29a      	uxth	r2, r3
 800d560:	1aa2      	subs	r2, r4, r2

        if( fCntDiff > 0 )
 800d562:	2a00      	cmp	r2, #0
 800d564:	dd05      	ble.n	800d572 <LoRaMacCryptoGetFCntDown+0x32>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 800d566:	4413      	add	r3, r2
 800d568:	602b      	str	r3, [r5, #0]
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800d56a:	b003      	add	sp, #12
 800d56c:	bd30      	pop	{r4, r5, pc}
        *currentDown = frameFcnt;
 800d56e:	602c      	str	r4, [r5, #0]
 800d570:	e7fb      	b.n	800d56a <LoRaMacCryptoGetFCntDown+0x2a>
        else if( fCntDiff == 0 )
 800d572:	b132      	cbz	r2, 800d582 <LoRaMacCryptoGetFCntDown+0x42>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800d574:	0c1b      	lsrs	r3, r3, #16
 800d576:	041b      	lsls	r3, r3, #16
 800d578:	4423      	add	r3, r4
 800d57a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800d57e:	602b      	str	r3, [r5, #0]
 800d580:	e7f3      	b.n	800d56a <LoRaMacCryptoGetFCntDown+0x2a>
            *currentDown = lastDown;
 800d582:	602b      	str	r3, [r5, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 800d584:	2007      	movs	r0, #7
 800d586:	e7f0      	b.n	800d56a <LoRaMacCryptoGetFCntDown+0x2a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d588:	2009      	movs	r0, #9
 800d58a:	e7ee      	b.n	800d56a <LoRaMacCryptoGetFCntDown+0x2a>

0800d58c <LoRaMacCryptoSetMulticastReference>:
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
 800d58c:	4601      	mov	r1, r0
 800d58e:	b908      	cbnz	r0, 800d594 <LoRaMacCryptoSetMulticastReference+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d590:	2009      	movs	r0, #9
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800d592:	4770      	bx	lr
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d594:	2300      	movs	r3, #0
 800d596:	2b00      	cmp	r3, #0
 800d598:	dd01      	ble.n	800d59e <LoRaMacCryptoSetMulticastReference+0x12>
    return LORAMAC_CRYPTO_SUCCESS;
 800d59a:	2000      	movs	r0, #0
 800d59c:	4770      	bx	lr
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 800d59e:	4a06      	ldr	r2, [pc, #24]	; (800d5b8 <LoRaMacCryptoSetMulticastReference+0x2c>)
 800d5a0:	6812      	ldr	r2, [r2, #0]
 800d5a2:	202c      	movs	r0, #44	; 0x2c
 800d5a4:	fb00 1003 	mla	r0, r0, r3, r1
 800d5a8:	f103 0c06 	add.w	ip, r3, #6
 800d5ac:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 800d5b0:	3204      	adds	r2, #4
 800d5b2:	6202      	str	r2, [r0, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d5b4:	3301      	adds	r3, #1
 800d5b6:	e7ee      	b.n	800d596 <LoRaMacCryptoSetMulticastReference+0xa>
 800d5b8:	20001008 	.word	0x20001008

0800d5bc <LoRaMacCryptoPrepareJoinRequest>:
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( macMsg == 0 )
 800d5bc:	b1d8      	cbz	r0, 800d5f6 <LoRaMacCryptoPrepareJoinRequest+0x3a>
{
 800d5be:	b510      	push	{r4, lr}
 800d5c0:	b082      	sub	sp, #8
 800d5c2:	4604      	mov	r4, r0
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 800d5c4:	4b0f      	ldr	r3, [pc, #60]	; (800d604 <LoRaMacCryptoPrepareJoinRequest+0x48>)
 800d5c6:	681a      	ldr	r2, [r3, #0]
 800d5c8:	8893      	ldrh	r3, [r2, #4]
 800d5ca:	3301      	adds	r3, #1
 800d5cc:	b29b      	uxth	r3, r3
 800d5ce:	8093      	strh	r3, [r2, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 800d5d0:	82c3      	strh	r3, [r0, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800d5d2:	f000 fa2e 	bl	800da32 <LoRaMacSerializerJoinRequest>
 800d5d6:	b980      	cbnz	r0, 800d5fa <LoRaMacCryptoPrepareJoinRequest+0x3e>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800d5d8:	4623      	mov	r3, r4
 800d5da:	f853 1b18 	ldr.w	r1, [r3], #24
 800d5de:	9300      	str	r3, [sp, #0]
 800d5e0:	2301      	movs	r3, #1
 800d5e2:	2213      	movs	r2, #19
 800d5e4:	f003 fa31 	bl	8010a4a <SecureElementComputeAesCmac>
 800d5e8:	b950      	cbnz	r0, 800d600 <LoRaMacCryptoPrepareJoinRequest+0x44>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800d5ea:	4620      	mov	r0, r4
 800d5ec:	f000 fa21 	bl	800da32 <LoRaMacSerializerJoinRequest>
 800d5f0:	b120      	cbz	r0, 800d5fc <LoRaMacCryptoPrepareJoinRequest+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800d5f2:	2010      	movs	r0, #16
 800d5f4:	e002      	b.n	800d5fc <LoRaMacCryptoPrepareJoinRequest+0x40>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d5f6:	2009      	movs	r0, #9
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800d5f8:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800d5fa:	2010      	movs	r0, #16
}
 800d5fc:	b002      	add	sp, #8
 800d5fe:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d600:	200e      	movs	r0, #14
 800d602:	e7fb      	b.n	800d5fc <LoRaMacCryptoPrepareJoinRequest+0x40>
 800d604:	20001008 	.word	0x20001008

0800d608 <LoRaMacCryptoSecureMessage>:
LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d036      	beq.n	800d67a <LoRaMacCryptoSecureMessage+0x72>
{
 800d60c:	b530      	push	{r4, r5, lr}
 800d60e:	b085      	sub	sp, #20
 800d610:	4604      	mov	r4, r0
 800d612:	461d      	mov	r5, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800d614:	4b1d      	ldr	r3, [pc, #116]	; (800d68c <LoRaMacCryptoSecureMessage+0x84>)
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	68db      	ldr	r3, [r3, #12]
 800d61a:	4283      	cmp	r3, r0
 800d61c:	d82f      	bhi.n	800d67e <LoRaMacCryptoSecureMessage+0x76>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 800d61e:	f895 2020 	ldrb.w	r2, [r5, #32]
 800d622:	b342      	cbz	r2, 800d676 <LoRaMacCryptoSecureMessage+0x6e>
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 800d624:	2203      	movs	r2, #3
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 800d626:	42a3      	cmp	r3, r4
 800d628:	d209      	bcs.n	800d63e <LoRaMacCryptoSecureMessage+0x36>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800d62a:	9401      	str	r4, [sp, #4]
 800d62c:	2300      	movs	r3, #0
 800d62e:	9300      	str	r3, [sp, #0]
 800d630:	68ab      	ldr	r3, [r5, #8]
 800d632:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800d636:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800d638:	f7ff fec3 	bl	800d3c2 <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d63c:	bb10      	cbnz	r0, 800d684 <LoRaMacCryptoSecureMessage+0x7c>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800d63e:	4628      	mov	r0, r5
 800d640:	f000 fa2d 	bl	800da9e <LoRaMacSerializerData>
 800d644:	b9e8      	cbnz	r0, 800d682 <LoRaMacCryptoSecureMessage+0x7a>
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800d646:	7929      	ldrb	r1, [r5, #4]
 800d648:	3904      	subs	r1, #4
 800d64a:	462b      	mov	r3, r5
 800d64c:	f853 0b2c 	ldr.w	r0, [r3], #44
 800d650:	9303      	str	r3, [sp, #12]
 800d652:	9402      	str	r4, [sp, #8]
 800d654:	68ab      	ldr	r3, [r5, #8]
 800d656:	9301      	str	r3, [sp, #4]
 800d658:	2300      	movs	r3, #0
 800d65a:	9300      	str	r3, [sp, #0]
 800d65c:	2202      	movs	r2, #2
 800d65e:	b289      	uxth	r1, r1
 800d660:	f7ff fe4c 	bl	800d2fc <ComputeCmacB0>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d664:	b970      	cbnz	r0, 800d684 <LoRaMacCryptoSecureMessage+0x7c>
            return retval;
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800d666:	4628      	mov	r0, r5
 800d668:	f000 fa19 	bl	800da9e <LoRaMacSerializerData>
 800d66c:	b960      	cbnz	r0, 800d688 <LoRaMacCryptoSecureMessage+0x80>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 800d66e:	4b07      	ldr	r3, [pc, #28]	; (800d68c <LoRaMacCryptoSecureMessage+0x84>)
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	60dc      	str	r4, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 800d674:	e006      	b.n	800d684 <LoRaMacCryptoSecureMessage+0x7c>
        payloadDecryptionKeyID = NWK_S_KEY;
 800d676:	2202      	movs	r2, #2
 800d678:	e7d5      	b.n	800d626 <LoRaMacCryptoSecureMessage+0x1e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d67a:	2009      	movs	r0, #9
}
 800d67c:	4770      	bx	lr
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800d67e:	2006      	movs	r0, #6
 800d680:	e000      	b.n	800d684 <LoRaMacCryptoSecureMessage+0x7c>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800d682:	2010      	movs	r0, #16
}
 800d684:	b005      	add	sp, #20
 800d686:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800d688:	2010      	movs	r0, #16
 800d68a:	e7fb      	b.n	800d684 <LoRaMacCryptoSecureMessage+0x7c>
 800d68c:	20001008 	.word	0x20001008

0800d690 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 800d690:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d694:	b087      	sub	sp, #28
 800d696:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    if( macMsg == 0 )
 800d698:	2e00      	cmp	r6, #0
 800d69a:	d049      	beq.n	800d730 <LoRaMacCryptoUnsecureMessage+0xa0>
 800d69c:	4605      	mov	r5, r0
 800d69e:	4688      	mov	r8, r1
 800d6a0:	4617      	mov	r7, r2
 800d6a2:	461c      	mov	r4, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 800d6a4:	4619      	mov	r1, r3
 800d6a6:	4610      	mov	r0, r2
 800d6a8:	f7ff fdde 	bl	800d268 <CheckFCntDown>
 800d6ac:	2800      	cmp	r0, #0
 800d6ae:	d041      	beq.n	800d734 <LoRaMacCryptoUnsecureMessage+0xa4>
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800d6b0:	4630      	mov	r0, r6
 800d6b2:	f000 f95f 	bl	800d974 <LoRaMacParserData>
 800d6b6:	2800      	cmp	r0, #0
 800d6b8:	d141      	bne.n	800d73e <LoRaMacCryptoUnsecureMessage+0xae>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 800d6ba:	a905      	add	r1, sp, #20
 800d6bc:	4628      	mov	r0, r5
 800d6be:	f7ff fd8f 	bl	800d1e0 <GetKeyAddrItem>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d6c2:	4605      	mov	r5, r0
 800d6c4:	2800      	cmp	r0, #0
 800d6c6:	d136      	bne.n	800d736 <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 800d6c8:	9b05      	ldr	r3, [sp, #20]
 800d6ca:	f893 9001 	ldrb.w	r9, [r3, #1]
    micComputationKeyID = curItem->NwkSkey;
 800d6ce:	789a      	ldrb	r2, [r3, #2]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 800d6d0:	68b3      	ldr	r3, [r6, #8]
 800d6d2:	4543      	cmp	r3, r8
 800d6d4:	d135      	bne.n	800d742 <LoRaMacCryptoUnsecureMessage+0xb2>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800d6d6:	7b33      	ldrb	r3, [r6, #12]
 800d6d8:	f3c3 1340 	ubfx	r3, r3, #5, #1
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800d6dc:	491a      	ldr	r1, [pc, #104]	; (800d748 <LoRaMacCryptoUnsecureMessage+0xb8>)
 800d6de:	6809      	ldr	r1, [r1, #0]
 800d6e0:	7889      	ldrb	r1, [r1, #2]
 800d6e2:	b901      	cbnz	r1, 800d6e6 <LoRaMacCryptoUnsecureMessage+0x56>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 800d6e4:	2300      	movs	r3, #0
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800d6e6:	7931      	ldrb	r1, [r6, #4]
 800d6e8:	3904      	subs	r1, #4
 800d6ea:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800d6ec:	9003      	str	r0, [sp, #12]
 800d6ee:	9402      	str	r4, [sp, #8]
 800d6f0:	f8cd 8004 	str.w	r8, [sp, #4]
 800d6f4:	2001      	movs	r0, #1
 800d6f6:	9000      	str	r0, [sp, #0]
 800d6f8:	b289      	uxth	r1, r1
 800d6fa:	6830      	ldr	r0, [r6, #0]
 800d6fc:	f7ff febd 	bl	800d47a <VerifyCmacB0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d700:	4605      	mov	r5, r0
 800d702:	b9c0      	cbnz	r0, 800d736 <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 800d704:	f896 3020 	ldrb.w	r3, [r6, #32]
 800d708:	b90b      	cbnz	r3, 800d70e <LoRaMacCryptoUnsecureMessage+0x7e>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 800d70a:	f04f 0902 	mov.w	r9, #2
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800d70e:	9401      	str	r4, [sp, #4]
 800d710:	2301      	movs	r3, #1
 800d712:	9300      	str	r3, [sp, #0]
 800d714:	4643      	mov	r3, r8
 800d716:	464a      	mov	r2, r9
 800d718:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800d71c:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800d71e:	f7ff fe50 	bl	800d3c2 <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d722:	4605      	mov	r5, r0
 800d724:	b938      	cbnz	r0, 800d736 <LoRaMacCryptoUnsecureMessage+0xa6>
            }
        }
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 800d726:	4621      	mov	r1, r4
 800d728:	4638      	mov	r0, r7
 800d72a:	f7ff fdb5 	bl	800d298 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 800d72e:	e002      	b.n	800d736 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d730:	2509      	movs	r5, #9
 800d732:	e000      	b.n	800d736 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800d734:	2506      	movs	r5, #6
}
 800d736:	4628      	mov	r0, r5
 800d738:	b007      	add	sp, #28
 800d73a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800d73e:	250f      	movs	r5, #15
 800d740:	e7f9      	b.n	800d736 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800d742:	2502      	movs	r5, #2
 800d744:	e7f7      	b.n	800d736 <LoRaMacCryptoUnsecureMessage+0xa6>
 800d746:	bf00      	nop
 800d748:	20001008 	.word	0x20001008

0800d74c <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 800d74c:	b9b1      	cbnz	r1, 800d77c <LoRaMacCryptoDeriveMcRootKey+0x30>
{
 800d74e:	b500      	push	{lr}
 800d750:	b085      	sub	sp, #20
 800d752:	468c      	mov	ip, r1
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 800d754:	2300      	movs	r3, #0
 800d756:	9300      	str	r3, [sp, #0]
 800d758:	9301      	str	r3, [sp, #4]
 800d75a:	9302      	str	r3, [sp, #8]
 800d75c:	9303      	str	r3, [sp, #12]

    if( versionMinor == 1 )
 800d75e:	2801      	cmp	r0, #1
 800d760:	d008      	beq.n	800d774 <LoRaMacCryptoDeriveMcRootKey+0x28>
    {
        compBase[0] = 0x20;
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 800d762:	2204      	movs	r2, #4
 800d764:	4661      	mov	r1, ip
 800d766:	4668      	mov	r0, sp
 800d768:	f003 fa0e 	bl	8010b88 <SecureElementDeriveAndStoreKey>
 800d76c:	b940      	cbnz	r0, 800d780 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800d76e:	b005      	add	sp, #20
 800d770:	f85d fb04 	ldr.w	pc, [sp], #4
        compBase[0] = 0x20;
 800d774:	2320      	movs	r3, #32
 800d776:	f88d 3000 	strb.w	r3, [sp]
 800d77a:	e7f2      	b.n	800d762 <LoRaMacCryptoDeriveMcRootKey+0x16>
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800d77c:	200a      	movs	r0, #10
}
 800d77e:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d780:	200e      	movs	r0, #14
 800d782:	e7f4      	b.n	800d76e <LoRaMacCryptoDeriveMcRootKey+0x22>

0800d784 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 800d784:	2804      	cmp	r0, #4
 800d786:	d001      	beq.n	800d78c <LoRaMacCryptoDeriveMcKEKey+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800d788:	200a      	movs	r0, #10
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800d78a:	4770      	bx	lr
{
 800d78c:	b500      	push	{lr}
 800d78e:	b085      	sub	sp, #20
    uint8_t compBase[16] = { 0 };
 800d790:	2300      	movs	r3, #0
 800d792:	9300      	str	r3, [sp, #0]
 800d794:	9301      	str	r3, [sp, #4]
 800d796:	9302      	str	r3, [sp, #8]
 800d798:	9303      	str	r3, [sp, #12]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 800d79a:	227f      	movs	r2, #127	; 0x7f
 800d79c:	4601      	mov	r1, r0
 800d79e:	4668      	mov	r0, sp
 800d7a0:	f003 f9f2 	bl	8010b88 <SecureElementDeriveAndStoreKey>
 800d7a4:	b910      	cbnz	r0, 800d7ac <LoRaMacCryptoDeriveMcKEKey+0x28>
}
 800d7a6:	b005      	add	sp, #20
 800d7a8:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d7ac:	200e      	movs	r0, #14
 800d7ae:	e7fa      	b.n	800d7a6 <LoRaMacCryptoDeriveMcKEKey+0x22>

0800d7b0 <LoRaMacCryptoSetKey>:
{
 800d7b0:	b510      	push	{r4, lr}
 800d7b2:	4604      	mov	r4, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800d7b4:	f003 f9a6 	bl	8010b04 <SecureElementSetKey>
 800d7b8:	b978      	cbnz	r0, 800d7da <LoRaMacCryptoSetKey+0x2a>
    if( keyID == APP_KEY )
 800d7ba:	b104      	cbz	r4, 800d7be <LoRaMacCryptoSetKey+0xe>
}
 800d7bc:	bd10      	pop	{r4, pc}
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 800d7be:	4b09      	ldr	r3, [pc, #36]	; (800d7e4 <LoRaMacCryptoSetKey+0x34>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	4621      	mov	r1, r4
 800d7c4:	7898      	ldrb	r0, [r3, #2]
 800d7c6:	f7ff ffc1 	bl	800d74c <LoRaMacCryptoDeriveMcRootKey>
 800d7ca:	b940      	cbnz	r0, 800d7de <LoRaMacCryptoSetKey+0x2e>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800d7cc:	2004      	movs	r0, #4
 800d7ce:	f7ff ffd9 	bl	800d784 <LoRaMacCryptoDeriveMcKEKey>
 800d7d2:	2800      	cmp	r0, #0
 800d7d4:	d0f2      	beq.n	800d7bc <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d7d6:	200e      	movs	r0, #14
 800d7d8:	e7f0      	b.n	800d7bc <LoRaMacCryptoSetKey+0xc>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d7da:	200e      	movs	r0, #14
 800d7dc:	e7ee      	b.n	800d7bc <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d7de:	200e      	movs	r0, #14
 800d7e0:	e7ec      	b.n	800d7bc <LoRaMacCryptoSetKey+0xc>
 800d7e2:	bf00      	nop
 800d7e4:	20001008 	.word	0x20001008

0800d7e8 <LoRaMacCryptoHandleJoinAccept>:
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800d7e8:	2a00      	cmp	r2, #0
 800d7ea:	d064      	beq.n	800d8b6 <LoRaMacCryptoHandleJoinAccept+0xce>
{
 800d7ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7ee:	b08f      	sub	sp, #60	; 0x3c
 800d7f0:	4607      	mov	r7, r0
 800d7f2:	460d      	mov	r5, r1
 800d7f4:	4614      	mov	r4, r2
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800d7f6:	2900      	cmp	r1, #0
 800d7f8:	d05f      	beq.n	800d8ba <LoRaMacCryptoHandleJoinAccept+0xd2>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800d7fa:	2600      	movs	r6, #0
 800d7fc:	9605      	str	r6, [sp, #20]
 800d7fe:	221d      	movs	r2, #29
 800d800:	4631      	mov	r1, r6
 800d802:	a806      	add	r0, sp, #24
 800d804:	f005 ff1e 	bl	8013644 <memset>
    uint8_t versionMinor         = 0;
 800d808:	f88d 6013 	strb.w	r6, [sp, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 800d80c:	4b2f      	ldr	r3, [pc, #188]	; (800d8cc <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	889e      	ldrh	r6, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800d812:	f10d 0313 	add.w	r3, sp, #19
 800d816:	9302      	str	r3, [sp, #8]
 800d818:	ab05      	add	r3, sp, #20
 800d81a:	9301      	str	r3, [sp, #4]
 800d81c:	7923      	ldrb	r3, [r4, #4]
 800d81e:	9300      	str	r3, [sp, #0]
 800d820:	6823      	ldr	r3, [r4, #0]
 800d822:	4632      	mov	r2, r6
 800d824:	4629      	mov	r1, r5
 800d826:	4638      	mov	r0, r7
 800d828:	f003 f9ce 	bl	8010bc8 <SecureElementProcessJoinAccept>
 800d82c:	2800      	cmp	r0, #0
 800d82e:	d146      	bne.n	800d8be <LoRaMacCryptoHandleJoinAccept+0xd6>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 800d830:	7922      	ldrb	r2, [r4, #4]
 800d832:	a905      	add	r1, sp, #20
 800d834:	6820      	ldr	r0, [r4, #0]
 800d836:	f003 fa60 	bl	8010cfa <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800d83a:	4620      	mov	r0, r4
 800d83c:	f000 f848 	bl	800d8d0 <LoRaMacParserJoinAccept>
 800d840:	2800      	cmp	r0, #0
 800d842:	d13f      	bne.n	800d8c4 <LoRaMacCryptoHandleJoinAccept+0xdc>
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 800d844:	79a5      	ldrb	r5, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 800d846:	79e3      	ldrb	r3, [r4, #7]
 800d848:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800d84c:	7a23      	ldrb	r3, [r4, #8]
 800d84e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 800d852:	4b1e      	ldr	r3, [pc, #120]	; (800d8cc <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	689a      	ldr	r2, [r3, #8]
 800d858:	42aa      	cmp	r2, r5
 800d85a:	d035      	beq.n	800d8c8 <LoRaMacCryptoHandleJoinAccept+0xe0>
        CryptoNvm->JoinNonce = currentJoinNonce;
 800d85c:	609d      	str	r5, [r3, #8]
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 800d85e:	2100      	movs	r1, #0
 800d860:	f89d 0013 	ldrb.w	r0, [sp, #19]
 800d864:	f7ff ff72 	bl	800d74c <LoRaMacCryptoDeriveMcRootKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d868:	bb50      	cbnz	r0, 800d8c0 <LoRaMacCryptoHandleJoinAccept+0xd8>
    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 800d86a:	2004      	movs	r0, #4
 800d86c:	f7ff ff8a 	bl	800d784 <LoRaMacCryptoDeriveMcKEKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d870:	bb30      	cbnz	r0, 800d8c0 <LoRaMacCryptoHandleJoinAccept+0xd8>
        netID = ( uint32_t )macMsg->NetID[0];
 800d872:	7a63      	ldrb	r3, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800d874:	7aa2      	ldrb	r2, [r4, #10]
 800d876:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800d87a:	7ae4      	ldrb	r4, [r4, #11]
 800d87c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 800d880:	4633      	mov	r3, r6
 800d882:	4622      	mov	r2, r4
 800d884:	4629      	mov	r1, r5
 800d886:	2003      	movs	r0, #3
 800d888:	f7ff fd64 	bl	800d354 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d88c:	b9c0      	cbnz	r0, 800d8c0 <LoRaMacCryptoHandleJoinAccept+0xd8>
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 800d88e:	4633      	mov	r3, r6
 800d890:	4622      	mov	r2, r4
 800d892:	4629      	mov	r1, r5
 800d894:	2002      	movs	r0, #2
 800d896:	f7ff fd5d 	bl	800d354 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d89a:	b988      	cbnz	r0, 800d8c0 <LoRaMacCryptoHandleJoinAccept+0xd8>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 800d89c:	4b0b      	ldr	r3, [pc, #44]	; (800d8cc <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800d8a4:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntUp = 0;
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800d8aa:	f04f 32ff 	mov.w	r2, #4294967295
 800d8ae:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800d8b0:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800d8b2:	615a      	str	r2, [r3, #20]
    return LORAMAC_CRYPTO_SUCCESS;
 800d8b4:	e004      	b.n	800d8c0 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d8b6:	2009      	movs	r0, #9
}
 800d8b8:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d8ba:	2009      	movs	r0, #9
 800d8bc:	e000      	b.n	800d8c0 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d8be:	200e      	movs	r0, #14
}
 800d8c0:	b00f      	add	sp, #60	; 0x3c
 800d8c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800d8c4:	200f      	movs	r0, #15
 800d8c6:	e7fb      	b.n	800d8c0 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800d8c8:	2003      	movs	r0, #3
 800d8ca:	e7f9      	b.n	800d8c0 <LoRaMacCryptoHandleJoinAccept+0xd8>
 800d8cc:	20001008 	.word	0x20001008

0800d8d0 <LoRaMacParserJoinAccept>:
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800d8d0:	2800      	cmp	r0, #0
 800d8d2:	d049      	beq.n	800d968 <LoRaMacParserJoinAccept+0x98>
{
 800d8d4:	b510      	push	{r4, lr}
 800d8d6:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800d8d8:	6801      	ldr	r1, [r0, #0]
 800d8da:	2900      	cmp	r1, #0
 800d8dc:	d046      	beq.n	800d96c <LoRaMacParserJoinAccept+0x9c>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800d8de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d8e2:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800d8e4:	2203      	movs	r2, #3
 800d8e6:	3006      	adds	r0, #6
 800d8e8:	f003 fa07 	bl	8010cfa <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800d8ec:	4620      	mov	r0, r4
 800d8ee:	f850 1b09 	ldr.w	r1, [r0], #9
 800d8f2:	2203      	movs	r2, #3
 800d8f4:	3104      	adds	r1, #4
 800d8f6:	f003 fa00 	bl	8010cfa <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800d8fa:	6821      	ldr	r1, [r4, #0]
 800d8fc:	79cb      	ldrb	r3, [r1, #7]
 800d8fe:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800d900:	7a0a      	ldrb	r2, [r1, #8]
 800d902:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d906:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800d908:	7a4a      	ldrb	r2, [r1, #9]
 800d90a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d90e:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800d910:	7a8a      	ldrb	r2, [r1, #10]
 800d912:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d916:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800d918:	7acb      	ldrb	r3, [r1, #11]
 800d91a:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800d91c:	7b0b      	ldrb	r3, [r1, #12]
 800d91e:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 800d920:	7923      	ldrb	r3, [r4, #4]
 800d922:	2b21      	cmp	r3, #33	; 0x21
 800d924:	d018      	beq.n	800d958 <LoRaMacParserJoinAccept+0x88>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800d926:	2b11      	cmp	r3, #17
 800d928:	dc22      	bgt.n	800d970 <LoRaMacParserJoinAccept+0xa0>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800d92a:	220d      	movs	r2, #13
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800d92c:	6821      	ldr	r1, [r4, #0]
 800d92e:	f102 0c01 	add.w	ip, r2, #1
 800d932:	5c8b      	ldrb	r3, [r1, r2]
 800d934:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800d936:	1c90      	adds	r0, r2, #2
 800d938:	f811 c00c 	ldrb.w	ip, [r1, ip]
 800d93c:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800d940:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800d942:	3203      	adds	r2, #3
 800d944:	5c08      	ldrb	r0, [r1, r0]
 800d946:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d94a:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800d94c:	5c8a      	ldrb	r2, [r1, r2]
 800d94e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d952:	6263      	str	r3, [r4, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 800d954:	2000      	movs	r0, #0
}
 800d956:	bd10      	pop	{r4, pc}
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 800d958:	2210      	movs	r2, #16
 800d95a:	310d      	adds	r1, #13
 800d95c:	f104 0012 	add.w	r0, r4, #18
 800d960:	f003 f9cb 	bl	8010cfa <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 800d964:	221d      	movs	r2, #29
 800d966:	e7e1      	b.n	800d92c <LoRaMacParserJoinAccept+0x5c>
        return LORAMAC_PARSER_ERROR_NPE;
 800d968:	2002      	movs	r0, #2
}
 800d96a:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800d96c:	2002      	movs	r0, #2
 800d96e:	e7f2      	b.n	800d956 <LoRaMacParserJoinAccept+0x86>
        return LORAMAC_PARSER_FAIL;
 800d970:	2001      	movs	r0, #1
 800d972:	e7f0      	b.n	800d956 <LoRaMacParserJoinAccept+0x86>

0800d974 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800d974:	2800      	cmp	r0, #0
 800d976:	d058      	beq.n	800da2a <LoRaMacParserData+0xb6>
{
 800d978:	b510      	push	{r4, lr}
 800d97a:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800d97c:	6801      	ldr	r1, [r0, #0]
 800d97e:	2900      	cmp	r1, #0
 800d980:	d055      	beq.n	800da2e <LoRaMacParserData+0xba>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800d982:	780b      	ldrb	r3, [r1, #0]
 800d984:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800d986:	784b      	ldrb	r3, [r1, #1]
 800d988:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800d98a:	788a      	ldrb	r2, [r1, #2]
 800d98c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d990:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800d992:	78ca      	ldrb	r2, [r1, #3]
 800d994:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d998:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800d99a:	790a      	ldrb	r2, [r1, #4]
 800d99c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d9a0:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800d9a2:	794b      	ldrb	r3, [r1, #5]
 800d9a4:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800d9a6:	798b      	ldrb	r3, [r1, #6]
 800d9a8:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800d9aa:	79ca      	ldrb	r2, [r1, #7]
 800d9ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d9b0:	81c3      	strh	r3, [r0, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800d9b2:	7b02      	ldrb	r2, [r0, #12]
 800d9b4:	f002 020f 	and.w	r2, r2, #15
 800d9b8:	3108      	adds	r1, #8
 800d9ba:	3010      	adds	r0, #16
 800d9bc:	f003 f99d 	bl	8010cfa <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800d9c0:	7b23      	ldrb	r3, [r4, #12]
 800d9c2:	f003 030f 	and.w	r3, r3, #15
 800d9c6:	f103 0008 	add.w	r0, r3, #8
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 800d9d0:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800d9d4:	7922      	ldrb	r2, [r4, #4]
 800d9d6:	1a11      	subs	r1, r2, r0
 800d9d8:	2904      	cmp	r1, #4
 800d9da:	dc16      	bgt.n	800da0a <LoRaMacParserData+0x96>
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800d9dc:	6822      	ldr	r2, [r4, #0]
 800d9de:	7923      	ldrb	r3, [r4, #4]
 800d9e0:	441a      	add	r2, r3
 800d9e2:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 800d9e6:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800d9e8:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 800d9ec:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800d9f0:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800d9f2:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800d9f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800d9fa:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800d9fc:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800da00:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800da04:	62e3      	str	r3, [r4, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 800da06:	2000      	movs	r0, #0
}
 800da08:	bd10      	pop	{r4, pc}
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800da0a:	6821      	ldr	r1, [r4, #0]
 800da0c:	3309      	adds	r3, #9
 800da0e:	5c08      	ldrb	r0, [r1, r0]
 800da10:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800da14:	1ad2      	subs	r2, r2, r3
 800da16:	b2d2      	uxtb	r2, r2
 800da18:	3a04      	subs	r2, #4
 800da1a:	b2d2      	uxtb	r2, r2
 800da1c:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800da20:	4419      	add	r1, r3
 800da22:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800da24:	f003 f969 	bl	8010cfa <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 800da28:	e7d8      	b.n	800d9dc <LoRaMacParserData+0x68>
        return LORAMAC_PARSER_ERROR_NPE;
 800da2a:	2002      	movs	r0, #2
}
 800da2c:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800da2e:	2002      	movs	r0, #2
 800da30:	e7ea      	b.n	800da08 <LoRaMacParserData+0x94>

0800da32 <LoRaMacSerializerJoinRequest>:
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800da32:	b370      	cbz	r0, 800da92 <LoRaMacSerializerJoinRequest+0x60>
{
 800da34:	b510      	push	{r4, lr}
 800da36:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800da38:	6803      	ldr	r3, [r0, #0]
 800da3a:	b363      	cbz	r3, 800da96 <LoRaMacSerializerJoinRequest+0x64>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800da3c:	7902      	ldrb	r2, [r0, #4]
 800da3e:	2a16      	cmp	r2, #22
 800da40:	d92b      	bls.n	800da9a <LoRaMacSerializerJoinRequest+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800da42:	7942      	ldrb	r2, [r0, #5]
 800da44:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800da46:	4601      	mov	r1, r0
 800da48:	f851 0b06 	ldr.w	r0, [r1], #6
 800da4c:	2208      	movs	r2, #8
 800da4e:	3001      	adds	r0, #1
 800da50:	f003 f95e 	bl	8010d10 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800da54:	4621      	mov	r1, r4
 800da56:	f851 0b0e 	ldr.w	r0, [r1], #14
 800da5a:	2208      	movs	r2, #8
 800da5c:	3009      	adds	r0, #9
 800da5e:	f003 f957 	bl	8010d10 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800da62:	8ae2      	ldrh	r2, [r4, #22]
 800da64:	6823      	ldr	r3, [r4, #0]
 800da66:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800da68:	8ae3      	ldrh	r3, [r4, #22]
 800da6a:	6822      	ldr	r2, [r4, #0]
 800da6c:	0a1b      	lsrs	r3, r3, #8
 800da6e:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800da70:	69a2      	ldr	r2, [r4, #24]
 800da72:	6823      	ldr	r3, [r4, #0]
 800da74:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800da76:	69a3      	ldr	r3, [r4, #24]
 800da78:	0a1b      	lsrs	r3, r3, #8
 800da7a:	6822      	ldr	r2, [r4, #0]
 800da7c:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800da7e:	8b62      	ldrh	r2, [r4, #26]
 800da80:	6823      	ldr	r3, [r4, #0]
 800da82:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800da84:	7ee2      	ldrb	r2, [r4, #27]
 800da86:	6823      	ldr	r3, [r4, #0]
 800da88:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 800da8a:	2317      	movs	r3, #23
 800da8c:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800da8e:	2000      	movs	r0, #0
}
 800da90:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800da92:	2001      	movs	r0, #1
}
 800da94:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800da96:	2001      	movs	r0, #1
 800da98:	e7fa      	b.n	800da90 <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800da9a:	2002      	movs	r0, #2
 800da9c:	e7f8      	b.n	800da90 <LoRaMacSerializerJoinRequest+0x5e>

0800da9e <LoRaMacSerializerData>:
    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800da9e:	2800      	cmp	r0, #0
 800daa0:	d066      	beq.n	800db70 <LoRaMacSerializerData+0xd2>
{
 800daa2:	b538      	push	{r3, r4, r5, lr}
 800daa4:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800daa6:	6801      	ldr	r1, [r0, #0]
 800daa8:	2900      	cmp	r1, #0
 800daaa:	d063      	beq.n	800db74 <LoRaMacSerializerData+0xd6>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800daac:	7b02      	ldrb	r2, [r0, #12]
 800daae:	f002 020f 	and.w	r2, r2, #15
 800dab2:	f102 0008 	add.w	r0, r2, #8

    if( macMsg->FRMPayloadSize > 0 )
 800dab6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800daba:	b10b      	cbz	r3, 800dac0 <LoRaMacSerializerData+0x22>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 800dabc:	f102 0009 	add.w	r0, r2, #9
    }

    computedBufSize += macMsg->FRMPayloadSize;
 800dac0:	4403      	add	r3, r0
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800dac2:	3304      	adds	r3, #4
 800dac4:	b29b      	uxth	r3, r3

    if( macMsg->BufSize < computedBufSize )
 800dac6:	7922      	ldrb	r2, [r4, #4]
 800dac8:	429a      	cmp	r2, r3
 800daca:	d355      	bcc.n	800db78 <LoRaMacSerializerData+0xda>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800dacc:	7963      	ldrb	r3, [r4, #5]
 800dace:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800dad0:	68a2      	ldr	r2, [r4, #8]
 800dad2:	6823      	ldr	r3, [r4, #0]
 800dad4:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800dad6:	68a3      	ldr	r3, [r4, #8]
 800dad8:	0a1b      	lsrs	r3, r3, #8
 800dada:	6822      	ldr	r2, [r4, #0]
 800dadc:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800dade:	8962      	ldrh	r2, [r4, #10]
 800dae0:	6823      	ldr	r3, [r4, #0]
 800dae2:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800dae4:	7ae2      	ldrb	r2, [r4, #11]
 800dae6:	6823      	ldr	r3, [r4, #0]
 800dae8:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800daea:	6823      	ldr	r3, [r4, #0]
 800daec:	7b22      	ldrb	r2, [r4, #12]
 800daee:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800daf0:	89e2      	ldrh	r2, [r4, #14]
 800daf2:	6823      	ldr	r3, [r4, #0]
 800daf4:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800daf6:	89e3      	ldrh	r3, [r4, #14]
 800daf8:	6822      	ldr	r2, [r4, #0]
 800dafa:	0a1b      	lsrs	r3, r3, #8
 800dafc:	71d3      	strb	r3, [r2, #7]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800dafe:	4621      	mov	r1, r4
 800db00:	f851 0b10 	ldr.w	r0, [r1], #16
 800db04:	7b22      	ldrb	r2, [r4, #12]
 800db06:	f002 020f 	and.w	r2, r2, #15
 800db0a:	3008      	adds	r0, #8
 800db0c:	f003 f8f5 	bl	8010cfa <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800db10:	7b23      	ldrb	r3, [r4, #12]
 800db12:	f003 030f 	and.w	r3, r3, #15
 800db16:	f103 0508 	add.w	r5, r3, #8

    if( macMsg->FRMPayloadSize > 0 )
 800db1a:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800db1e:	b12a      	cbz	r2, 800db2c <LoRaMacSerializerData+0x8e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800db20:	6822      	ldr	r2, [r4, #0]
 800db22:	f894 1020 	ldrb.w	r1, [r4, #32]
 800db26:	5551      	strb	r1, [r2, r5]
 800db28:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800db2c:	6820      	ldr	r0, [r4, #0]
 800db2e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800db32:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800db34:	4428      	add	r0, r5
 800db36:	f003 f8e0 	bl	8010cfa <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800db3a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800db3e:	442b      	add	r3, r5

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800db40:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800db42:	6821      	ldr	r1, [r4, #0]
 800db44:	1c5a      	adds	r2, r3, #1
 800db46:	b292      	uxth	r2, r2
 800db48:	54c8      	strb	r0, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800db4a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800db4c:	0a08      	lsrs	r0, r1, #8
 800db4e:	6825      	ldr	r5, [r4, #0]
 800db50:	1c99      	adds	r1, r3, #2
 800db52:	b289      	uxth	r1, r1
 800db54:	54a8      	strb	r0, [r5, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800db56:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 800db58:	6820      	ldr	r0, [r4, #0]
 800db5a:	1cda      	adds	r2, r3, #3
 800db5c:	b292      	uxth	r2, r2
 800db5e:	5445      	strb	r5, [r0, r1]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800db60:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 800db64:	6821      	ldr	r1, [r4, #0]
 800db66:	3304      	adds	r3, #4
 800db68:	5488      	strb	r0, [r1, r2]

    macMsg->BufSize = bufItr;
 800db6a:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800db6c:	2000      	movs	r0, #0
}
 800db6e:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800db70:	2001      	movs	r0, #1
}
 800db72:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800db74:	2001      	movs	r0, #1
 800db76:	e7fa      	b.n	800db6e <LoRaMacSerializerData+0xd0>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800db78:	2002      	movs	r0, #2
 800db7a:	e7f8      	b.n	800db6e <LoRaMacSerializerData+0xd0>

0800db7c <NvmDataMgmtEvent>:
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800db7c:	4b02      	ldr	r3, [pc, #8]	; (800db88 <NvmDataMgmtEvent+0xc>)
 800db7e:	881a      	ldrh	r2, [r3, #0]
 800db80:	4310      	orrs	r0, r2
 800db82:	8018      	strh	r0, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800db84:	4770      	bx	lr
 800db86:	bf00      	nop
 800db88:	2000100c 	.word	0x2000100c

0800db8c <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800db8c:	b508      	push	{r3, lr}
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Input checks
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800db8e:	4b06      	ldr	r3, [pc, #24]	; (800dba8 <NvmDataMgmtStoreBegin+0x1c>)
 800db90:	881b      	ldrh	r3, [r3, #0]
 800db92:	b11b      	cbz	r3, 800db9c <NvmDataMgmtStoreBegin+0x10>
    {
        // There was no update.
        return NVM_DATA_NO_UPDATED_DATA;
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800db94:	f7fe f914 	bl	800bdc0 <LoRaMacStop>
 800db98:	b918      	cbnz	r0, 800dba2 <NvmDataMgmtStoreBegin+0x16>
    }
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800db9a:	bd08      	pop	{r3, pc}
        return NVM_DATA_NO_UPDATED_DATA;
 800db9c:	f06f 0001 	mvn.w	r0, #1
 800dba0:	e7fb      	b.n	800db9a <NvmDataMgmtStoreBegin+0xe>
        return NVM_DATA_NOT_AVAILABLE;
 800dba2:	f06f 0002 	mvn.w	r0, #2
 800dba6:	e7f8      	b.n	800db9a <NvmDataMgmtStoreBegin+0xe>
 800dba8:	2000100c 	.word	0x2000100c

0800dbac <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800dbac:	b510      	push	{r4, lr}
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Reset notification flags
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800dbae:	2400      	movs	r4, #0
 800dbb0:	4b02      	ldr	r3, [pc, #8]	; (800dbbc <NvmDataMgmtStoreEnd+0x10>)
 800dbb2:	801c      	strh	r4, [r3, #0]

    // Resume LoRaMac
    LoRaMacStart( );
 800dbb4:	f7fe f8fc 	bl	800bdb0 <LoRaMacStart>
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800dbb8:	4620      	mov	r0, r4
 800dbba:	bd10      	pop	{r4, pc}
 800dbbc:	2000100c 	.word	0x2000100c

0800dbc0 <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 800dbc0:	2805      	cmp	r0, #5
 800dbc2:	d005      	beq.n	800dbd0 <RegionIsActive+0x10>
 800dbc4:	2808      	cmp	r0, #8
 800dbc6:	d001      	beq.n	800dbcc <RegionIsActive+0xc>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 800dbc8:	2000      	movs	r0, #0
        }
    }
}
 800dbca:	4770      	bx	lr
    switch( region )
 800dbcc:	2001      	movs	r0, #1
 800dbce:	4770      	bx	lr
 800dbd0:	2001      	movs	r0, #1
 800dbd2:	4770      	bx	lr

0800dbd4 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800dbd4:	b500      	push	{lr}
 800dbd6:	b083      	sub	sp, #12
 800dbd8:	4603      	mov	r3, r0
 800dbda:	4608      	mov	r0, r1
    PhyParam_t phyParam = { 0 };
 800dbdc:	2200      	movs	r2, #0
 800dbde:	9200      	str	r2, [sp, #0]
    switch( region )
 800dbe0:	2b05      	cmp	r3, #5
 800dbe2:	d004      	beq.n	800dbee <RegionGetPhyParam+0x1a>
 800dbe4:	2b08      	cmp	r3, #8
 800dbe6:	d009      	beq.n	800dbfc <RegionGetPhyParam+0x28>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 800dbe8:	9b00      	ldr	r3, [sp, #0]
 800dbea:	9301      	str	r3, [sp, #4]
 800dbec:	e002      	b.n	800dbf4 <RegionGetPhyParam+0x20>
        EU868_GET_PHY_PARAM( );
 800dbee:	f000 fdeb 	bl	800e7c8 <RegionEU868GetPhyParam>
 800dbf2:	9001      	str	r0, [sp, #4]
        }
    }
}
 800dbf4:	9801      	ldr	r0, [sp, #4]
 800dbf6:	b003      	add	sp, #12
 800dbf8:	f85d fb04 	ldr.w	pc, [sp], #4
        US915_GET_PHY_PARAM( );
 800dbfc:	f001 fbd6 	bl	800f3ac <RegionUS915GetPhyParam>
 800dc00:	9001      	str	r0, [sp, #4]
 800dc02:	e7f7      	b.n	800dbf4 <RegionGetPhyParam+0x20>

0800dc04 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 800dc04:	b508      	push	{r3, lr}
 800dc06:	4603      	mov	r3, r0
 800dc08:	4608      	mov	r0, r1
    switch( region )
 800dc0a:	2b05      	cmp	r3, #5
 800dc0c:	d002      	beq.n	800dc14 <RegionSetBandTxDone+0x10>
 800dc0e:	2b08      	cmp	r3, #8
 800dc10:	d003      	beq.n	800dc1a <RegionSetBandTxDone+0x16>
        default:
        {
            return;
        }
    }
}
 800dc12:	bd08      	pop	{r3, pc}
        EU868_SET_BAND_TX_DONE( );
 800dc14:	f000 fe94 	bl	800e940 <RegionEU868SetBandTxDone>
 800dc18:	e7fb      	b.n	800dc12 <RegionSetBandTxDone+0xe>
        US915_SET_BAND_TX_DONE( );
 800dc1a:	f001 fc9d 	bl	800f558 <RegionUS915SetBandTxDone>
 800dc1e:	e7f8      	b.n	800dc12 <RegionSetBandTxDone+0xe>

0800dc20 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 800dc20:	b508      	push	{r3, lr}
 800dc22:	4603      	mov	r3, r0
 800dc24:	4608      	mov	r0, r1
    switch( region )
 800dc26:	2b05      	cmp	r3, #5
 800dc28:	d002      	beq.n	800dc30 <RegionInitDefaults+0x10>
 800dc2a:	2b08      	cmp	r3, #8
 800dc2c:	d003      	beq.n	800dc36 <RegionInitDefaults+0x16>
        default:
        {
            break;
        }
    }
}
 800dc2e:	bd08      	pop	{r3, pc}
        EU868_INIT_DEFAULTS( );
 800dc30:	f000 fea4 	bl	800e97c <RegionEU868InitDefaults>
 800dc34:	e7fb      	b.n	800dc2e <RegionInitDefaults+0xe>
        US915_INIT_DEFAULTS( );
 800dc36:	f001 fcad 	bl	800f594 <RegionUS915InitDefaults>
}
 800dc3a:	e7f8      	b.n	800dc2e <RegionInitDefaults+0xe>

0800dc3c <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800dc3c:	b508      	push	{r3, lr}
 800dc3e:	4603      	mov	r3, r0
 800dc40:	4608      	mov	r0, r1
 800dc42:	4611      	mov	r1, r2
    switch( region )
 800dc44:	2b05      	cmp	r3, #5
 800dc46:	d003      	beq.n	800dc50 <RegionVerify+0x14>
 800dc48:	2b08      	cmp	r3, #8
 800dc4a:	d004      	beq.n	800dc56 <RegionVerify+0x1a>
 800dc4c:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800dc4e:	bd08      	pop	{r3, pc}
        EU868_VERIFY( );
 800dc50:	f000 ff00 	bl	800ea54 <RegionEU868Verify>
 800dc54:	e7fb      	b.n	800dc4e <RegionVerify+0x12>
        US915_VERIFY( );
 800dc56:	f001 fd41 	bl	800f6dc <RegionUS915Verify>
 800dc5a:	e7f8      	b.n	800dc4e <RegionVerify+0x12>

0800dc5c <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 800dc5c:	b508      	push	{r3, lr}
 800dc5e:	4603      	mov	r3, r0
 800dc60:	4608      	mov	r0, r1
    switch( region )
 800dc62:	2b05      	cmp	r3, #5
 800dc64:	d002      	beq.n	800dc6c <RegionApplyCFList+0x10>
 800dc66:	2b08      	cmp	r3, #8
 800dc68:	d003      	beq.n	800dc72 <RegionApplyCFList+0x16>
        default:
        {
            break;
        }
    }
}
 800dc6a:	bd08      	pop	{r3, pc}
        EU868_APPLY_CF_LIST( );
 800dc6c:	f001 fac0 	bl	800f1f0 <RegionEU868ApplyCFList>
 800dc70:	e7fb      	b.n	800dc6a <RegionApplyCFList+0xe>
        US915_APPLY_CF_LIST( );
 800dc72:	f001 fd6d 	bl	800f750 <RegionUS915ApplyCFList>
}
 800dc76:	e7f8      	b.n	800dc6a <RegionApplyCFList+0xe>

0800dc78 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 800dc78:	b508      	push	{r3, lr}
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	4608      	mov	r0, r1
    switch( region )
 800dc7e:	2b05      	cmp	r3, #5
 800dc80:	d003      	beq.n	800dc8a <RegionChanMaskSet+0x12>
 800dc82:	2b08      	cmp	r3, #8
 800dc84:	d004      	beq.n	800dc90 <RegionChanMaskSet+0x18>
 800dc86:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800dc88:	bd08      	pop	{r3, pc}
        EU868_CHAN_MASK_SET( );
 800dc8a:	f000 ff29 	bl	800eae0 <RegionEU868ChanMaskSet>
 800dc8e:	e7fb      	b.n	800dc88 <RegionChanMaskSet+0x10>
        US915_CHAN_MASK_SET( );
 800dc90:	f001 fd9c 	bl	800f7cc <RegionUS915ChanMaskSet>
 800dc94:	e7f8      	b.n	800dc88 <RegionChanMaskSet+0x10>

0800dc96 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800dc96:	b508      	push	{r3, lr}
 800dc98:	4684      	mov	ip, r0
 800dc9a:	4608      	mov	r0, r1
 800dc9c:	4611      	mov	r1, r2
 800dc9e:	461a      	mov	r2, r3
    switch( region )
 800dca0:	f1bc 0f05 	cmp.w	ip, #5
 800dca4:	d003      	beq.n	800dcae <RegionComputeRxWindowParameters+0x18>
 800dca6:	f1bc 0f08 	cmp.w	ip, #8
 800dcaa:	d004      	beq.n	800dcb6 <RegionComputeRxWindowParameters+0x20>
        default:
        {
            break;
        }
    }
}
 800dcac:	bd08      	pop	{r3, pc}
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 800dcae:	9b02      	ldr	r3, [sp, #8]
 800dcb0:	f000 ff34 	bl	800eb1c <RegionEU868ComputeRxWindowParameters>
 800dcb4:	e7fa      	b.n	800dcac <RegionComputeRxWindowParameters+0x16>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 800dcb6:	9b02      	ldr	r3, [sp, #8]
 800dcb8:	f001 fdca 	bl	800f850 <RegionUS915ComputeRxWindowParameters>
}
 800dcbc:	e7f6      	b.n	800dcac <RegionComputeRxWindowParameters+0x16>

0800dcbe <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800dcbe:	b508      	push	{r3, lr}
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	4608      	mov	r0, r1
 800dcc4:	4611      	mov	r1, r2
    switch( region )
 800dcc6:	2b05      	cmp	r3, #5
 800dcc8:	d003      	beq.n	800dcd2 <RegionRxConfig+0x14>
 800dcca:	2b08      	cmp	r3, #8
 800dccc:	d004      	beq.n	800dcd8 <RegionRxConfig+0x1a>
 800dcce:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800dcd0:	bd08      	pop	{r3, pc}
        EU868_RX_CONFIG( );
 800dcd2:	f000 ff59 	bl	800eb88 <RegionEU868RxConfig>
 800dcd6:	e7fb      	b.n	800dcd0 <RegionRxConfig+0x12>
        US915_RX_CONFIG( );
 800dcd8:	f001 fde8 	bl	800f8ac <RegionUS915RxConfig>
 800dcdc:	e7f8      	b.n	800dcd0 <RegionRxConfig+0x12>

0800dcde <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800dcde:	b508      	push	{r3, lr}
 800dce0:	4684      	mov	ip, r0
 800dce2:	4608      	mov	r0, r1
 800dce4:	4611      	mov	r1, r2
 800dce6:	461a      	mov	r2, r3
    switch( region )
 800dce8:	f1bc 0f05 	cmp.w	ip, #5
 800dcec:	d004      	beq.n	800dcf8 <RegionTxConfig+0x1a>
 800dcee:	f1bc 0f08 	cmp.w	ip, #8
 800dcf2:	d004      	beq.n	800dcfe <RegionTxConfig+0x20>
 800dcf4:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800dcf6:	bd08      	pop	{r3, pc}
        EU868_TX_CONFIG( );
 800dcf8:	f000 ffca 	bl	800ec90 <RegionEU868TxConfig>
 800dcfc:	e7fb      	b.n	800dcf6 <RegionTxConfig+0x18>
        US915_TX_CONFIG( );
 800dcfe:	f001 fe2f 	bl	800f960 <RegionUS915TxConfig>
 800dd02:	e7f8      	b.n	800dcf6 <RegionTxConfig+0x18>

0800dd04 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800dd04:	b500      	push	{lr}
 800dd06:	b083      	sub	sp, #12
 800dd08:	4684      	mov	ip, r0
 800dd0a:	4608      	mov	r0, r1
 800dd0c:	4611      	mov	r1, r2
 800dd0e:	461a      	mov	r2, r3
    switch( region )
 800dd10:	f1bc 0f05 	cmp.w	ip, #5
 800dd14:	d006      	beq.n	800dd24 <RegionLinkAdrReq+0x20>
 800dd16:	f1bc 0f08 	cmp.w	ip, #8
 800dd1a:	d009      	beq.n	800dd30 <RegionLinkAdrReq+0x2c>
 800dd1c:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800dd1e:	b003      	add	sp, #12
 800dd20:	f85d fb04 	ldr.w	pc, [sp], #4
        EU868_LINK_ADR_REQ( );
 800dd24:	9b05      	ldr	r3, [sp, #20]
 800dd26:	9300      	str	r3, [sp, #0]
 800dd28:	9b04      	ldr	r3, [sp, #16]
 800dd2a:	f001 f849 	bl	800edc0 <RegionEU868LinkAdrReq>
 800dd2e:	e7f6      	b.n	800dd1e <RegionLinkAdrReq+0x1a>
        US915_LINK_ADR_REQ( );
 800dd30:	9b05      	ldr	r3, [sp, #20]
 800dd32:	9300      	str	r3, [sp, #0]
 800dd34:	9b04      	ldr	r3, [sp, #16]
 800dd36:	f001 fe8d 	bl	800fa54 <RegionUS915LinkAdrReq>
 800dd3a:	e7f0      	b.n	800dd1e <RegionLinkAdrReq+0x1a>

0800dd3c <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 800dd3c:	b508      	push	{r3, lr}
 800dd3e:	4603      	mov	r3, r0
 800dd40:	4608      	mov	r0, r1
    switch( region )
 800dd42:	2b05      	cmp	r3, #5
 800dd44:	d003      	beq.n	800dd4e <RegionRxParamSetupReq+0x12>
 800dd46:	2b08      	cmp	r3, #8
 800dd48:	d004      	beq.n	800dd54 <RegionRxParamSetupReq+0x18>
 800dd4a:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800dd4c:	bd08      	pop	{r3, pc}
        EU868_RX_PARAM_SETUP_REQ( );
 800dd4e:	f001 f8fb 	bl	800ef48 <RegionEU868RxParamSetupReq>
 800dd52:	e7fb      	b.n	800dd4c <RegionRxParamSetupReq+0x10>
        US915_RX_PARAM_SETUP_REQ( );
 800dd54:	f001 ffc0 	bl	800fcd8 <RegionUS915RxParamSetupReq>
 800dd58:	e7f8      	b.n	800dd4c <RegionRxParamSetupReq+0x10>

0800dd5a <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 800dd5a:	b508      	push	{r3, lr}
 800dd5c:	4603      	mov	r3, r0
 800dd5e:	4608      	mov	r0, r1
    switch( region )
 800dd60:	2b05      	cmp	r3, #5
 800dd62:	d003      	beq.n	800dd6c <RegionNewChannelReq+0x12>
 800dd64:	2b08      	cmp	r3, #8
 800dd66:	d004      	beq.n	800dd72 <RegionNewChannelReq+0x18>
 800dd68:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800dd6a:	bd08      	pop	{r3, pc}
        EU868_NEW_CHANNEL_REQ( );
 800dd6c:	f001 fa81 	bl	800f272 <RegionEU868NewChannelReq>
 800dd70:	e7fb      	b.n	800dd6a <RegionNewChannelReq+0x10>
        US915_NEW_CHANNEL_REQ( );
 800dd72:	f001 ffdc 	bl	800fd2e <RegionUS915NewChannelReq>
 800dd76:	e7f8      	b.n	800dd6a <RegionNewChannelReq+0x10>

0800dd78 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 800dd78:	b508      	push	{r3, lr}
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	4608      	mov	r0, r1
    switch( region )
 800dd7e:	2b05      	cmp	r3, #5
 800dd80:	d003      	beq.n	800dd8a <RegionTxParamSetupReq+0x12>
 800dd82:	2b08      	cmp	r3, #8
 800dd84:	d004      	beq.n	800dd90 <RegionTxParamSetupReq+0x18>
 800dd86:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800dd88:	bd08      	pop	{r3, pc}
        EU868_TX_PARAM_SETUP_REQ( );
 800dd8a:	f001 f901 	bl	800ef90 <RegionEU868TxParamSetupReq>
 800dd8e:	e7fb      	b.n	800dd88 <RegionTxParamSetupReq+0x10>
        US915_TX_PARAM_SETUP_REQ( );
 800dd90:	f001 ffd0 	bl	800fd34 <RegionUS915TxParamSetupReq>
 800dd94:	e7f8      	b.n	800dd88 <RegionTxParamSetupReq+0x10>

0800dd96 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 800dd96:	b508      	push	{r3, lr}
 800dd98:	4603      	mov	r3, r0
 800dd9a:	4608      	mov	r0, r1
    switch( region )
 800dd9c:	2b05      	cmp	r3, #5
 800dd9e:	d003      	beq.n	800dda8 <RegionDlChannelReq+0x12>
 800dda0:	2b08      	cmp	r3, #8
 800dda2:	d004      	beq.n	800ddae <RegionDlChannelReq+0x18>
 800dda4:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800dda6:	bd08      	pop	{r3, pc}
        EU868_DL_CHANNEL_REQ( );
 800dda8:	f001 f8f6 	bl	800ef98 <RegionEU868DlChannelReq>
 800ddac:	e7fb      	b.n	800dda6 <RegionDlChannelReq+0x10>
        US915_DL_CHANNEL_REQ( );
 800ddae:	f001 ffc4 	bl	800fd3a <RegionUS915DlChannelReq>
 800ddb2:	e7f8      	b.n	800dda6 <RegionDlChannelReq+0x10>

0800ddb4 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 800ddb4:	b508      	push	{r3, lr}
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	4608      	mov	r0, r1
 800ddba:	4611      	mov	r1, r2
    switch( region )
 800ddbc:	2b05      	cmp	r3, #5
 800ddbe:	d003      	beq.n	800ddc8 <RegionAlternateDr+0x14>
 800ddc0:	2b08      	cmp	r3, #8
 800ddc2:	d004      	beq.n	800ddce <RegionAlternateDr+0x1a>
 800ddc4:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800ddc6:	bd08      	pop	{r3, pc}
        EU868_ALTERNATE_DR( );
 800ddc8:	f001 f90e 	bl	800efe8 <RegionEU868AlternateDr>
 800ddcc:	e7fb      	b.n	800ddc6 <RegionAlternateDr+0x12>
        US915_ALTERNATE_DR( );
 800ddce:	f001 ffb7 	bl	800fd40 <RegionUS915AlternateDr>
 800ddd2:	e7f8      	b.n	800ddc6 <RegionAlternateDr+0x12>

0800ddd4 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800ddd4:	b508      	push	{r3, lr}
 800ddd6:	4684      	mov	ip, r0
 800ddd8:	4608      	mov	r0, r1
 800ddda:	4611      	mov	r1, r2
 800dddc:	461a      	mov	r2, r3
    switch( region )
 800ddde:	f1bc 0f05 	cmp.w	ip, #5
 800dde2:	d004      	beq.n	800ddee <RegionNextChannel+0x1a>
 800dde4:	f1bc 0f08 	cmp.w	ip, #8
 800dde8:	d005      	beq.n	800ddf6 <RegionNextChannel+0x22>
 800ddea:	2009      	movs	r0, #9
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
        }
    }
}
 800ddec:	bd08      	pop	{r3, pc}
        EU868_NEXT_CHANNEL( );
 800ddee:	9b02      	ldr	r3, [sp, #8]
 800ddf0:	f001 f8fc 	bl	800efec <RegionEU868NextChannel>
 800ddf4:	e7fa      	b.n	800ddec <RegionNextChannel+0x18>
        US915_NEXT_CHANNEL( );
 800ddf6:	9b02      	ldr	r3, [sp, #8]
 800ddf8:	f001 ffc4 	bl	800fd84 <RegionUS915NextChannel>
 800ddfc:	e7f6      	b.n	800ddec <RegionNextChannel+0x18>

0800ddfe <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800ddfe:	b508      	push	{r3, lr}
 800de00:	4684      	mov	ip, r0
 800de02:	4608      	mov	r0, r1
 800de04:	4611      	mov	r1, r2
 800de06:	461a      	mov	r2, r3
    switch( region )
 800de08:	f1bc 0f05 	cmp.w	ip, #5
 800de0c:	d004      	beq.n	800de18 <RegionApplyDrOffset+0x1a>
 800de0e:	f1bc 0f08 	cmp.w	ip, #8
 800de12:	d004      	beq.n	800de1e <RegionApplyDrOffset+0x20>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 800de14:	b2c8      	uxtb	r0, r1
 800de16:	e001      	b.n	800de1c <RegionApplyDrOffset+0x1e>
        EU868_APPLY_DR_OFFSET( );
 800de18:	f001 fa56 	bl	800f2c8 <RegionEU868ApplyDrOffset>
        }
    }
}
 800de1c:	bd08      	pop	{r3, pc}
        US915_APPLY_DR_OFFSET( );
 800de1e:	f002 f85f 	bl	800fee0 <RegionUS915ApplyDrOffset>
 800de22:	e7fb      	b.n	800de1c <RegionApplyDrOffset+0x1e>

0800de24 <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 800de24:	4800      	ldr	r0, [pc, #0]	; (800de28 <RegionGetVersion+0x4>)
 800de26:	4770      	bx	lr
 800de28:	02010001 	.word	0x02010001

0800de2c <FindAvailable125kHzChannels>:
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 800de2c:	468c      	mov	ip, r1
 800de2e:	b1a9      	cbz	r1, 800de5c <FindAvailable125kHzChannels+0x30>
 800de30:	b1b2      	cbz	r2, 800de60 <FindAvailable125kHzChannels+0x34>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Initialize counter
    *availableChannels = 0;
 800de32:	2300      	movs	r3, #0
 800de34:	7013      	strb	r3, [r2, #0]
    for( uint8_t i = 0; i < 8; i++ )
 800de36:	e001      	b.n	800de3c <FindAvailable125kHzChannels+0x10>
 800de38:	3301      	adds	r3, #1
 800de3a:	b2db      	uxtb	r3, r3
 800de3c:	2b07      	cmp	r3, #7
 800de3e:	d80b      	bhi.n	800de58 <FindAvailable125kHzChannels+0x2c>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 800de40:	fa40 f103 	asr.w	r1, r0, r3
 800de44:	f011 0f01 	tst.w	r1, #1
 800de48:	d0f6      	beq.n	800de38 <FindAvailable125kHzChannels+0xc>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 800de4a:	7811      	ldrb	r1, [r2, #0]
 800de4c:	f80c 3001 	strb.w	r3, [ip, r1]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 800de50:	7811      	ldrb	r1, [r2, #0]
 800de52:	3101      	adds	r1, #1
 800de54:	7011      	strb	r1, [r2, #0]
 800de56:	e7ef      	b.n	800de38 <FindAvailable125kHzChannels+0xc>
        }
    }

    return LORAMAC_STATUS_OK;
 800de58:	2000      	movs	r0, #0
 800de5a:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800de5c:	2003      	movs	r0, #3
 800de5e:	4770      	bx	lr
 800de60:	2003      	movs	r0, #3
}
 800de62:	4770      	bx	lr

0800de64 <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 800de64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de66:	b085      	sub	sp, #20
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 800de68:	2300      	movs	r3, #0
 800de6a:	9302      	str	r3, [sp, #8]
 800de6c:	9303      	str	r3, [sp, #12]
    uint8_t availableChannels = 0;
 800de6e:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 800de72:	2800      	cmp	r0, #0
 800de74:	d03e      	beq.n	800def4 <RegionBaseUSComputeNext125kHzJoinChannel+0x90>
 800de76:	460d      	mov	r5, r1
 800de78:	4617      	mov	r7, r2
 800de7a:	4606      	mov	r6, r0
 800de7c:	2900      	cmp	r1, #0
 800de7e:	d03b      	beq.n	800def8 <RegionBaseUSComputeNext125kHzJoinChannel+0x94>
 800de80:	2a00      	cmp	r2, #0
 800de82:	d03b      	beq.n	800defc <RegionBaseUSComputeNext125kHzJoinChannel+0x98>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 800de84:	780c      	ldrb	r4, [r1, #0]
 800de86:	e017      	b.n	800deb8 <RegionBaseUSComputeNext125kHzJoinChannel+0x54>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 800de88:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
 800de8c:	0a00      	lsrs	r0, r0, #8
 800de8e:	e019      	b.n	800dec4 <RegionBaseUSComputeNext125kHzJoinChannel+0x60>
        }

        if ( availableChannels > 0 )
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 800de90:	3901      	subs	r1, #1
 800de92:	2000      	movs	r0, #0
 800de94:	f002 ff24 	bl	8010ce0 <randr>
 800de98:	f100 0310 	add.w	r3, r0, #16
 800de9c:	eb0d 0003 	add.w	r0, sp, r3
 800dea0:	f810 3c08 	ldrb.w	r3, [r0, #-8]
 800dea4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dea8:	703b      	strb	r3, [r7, #0]
 800deaa:	e016      	b.n	800deda <RegionBaseUSComputeNext125kHzJoinChannel+0x76>
        startIndex++;
        if ( startIndex > 7 )
        {
            startIndex = 0;
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 800deac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800deb0:	b9cb      	cbnz	r3, 800dee6 <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
 800deb2:	782a      	ldrb	r2, [r5, #0]
 800deb4:	42a2      	cmp	r2, r4
 800deb6:	d016      	beq.n	800dee6 <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 800deb8:	0863      	lsrs	r3, r4, #1
        if( ( startIndex % 2 ) == 0 )
 800deba:	f014 0f01 	tst.w	r4, #1
 800debe:	d1e3      	bne.n	800de88 <RegionBaseUSComputeNext125kHzJoinChannel+0x24>
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 800dec0:	f816 0013 	ldrb.w	r0, [r6, r3, lsl #1]
        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 800dec4:	f10d 0207 	add.w	r2, sp, #7
 800dec8:	a902      	add	r1, sp, #8
 800deca:	f7ff ffaf 	bl	800de2c <FindAvailable125kHzChannels>
 800dece:	2803      	cmp	r0, #3
 800ded0:	d00b      	beq.n	800deea <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        if ( availableChannels > 0 )
 800ded2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800ded6:	2900      	cmp	r1, #0
 800ded8:	d1da      	bne.n	800de90 <RegionBaseUSComputeNext125kHzJoinChannel+0x2c>
        startIndex++;
 800deda:	3401      	adds	r4, #1
 800dedc:	b2e4      	uxtb	r4, r4
        if ( startIndex > 7 )
 800dede:	2c07      	cmp	r4, #7
 800dee0:	d9e4      	bls.n	800deac <RegionBaseUSComputeNext125kHzJoinChannel+0x48>
            startIndex = 0;
 800dee2:	2400      	movs	r4, #0
 800dee4:	e7e2      	b.n	800deac <RegionBaseUSComputeNext125kHzJoinChannel+0x48>

    if ( availableChannels > 0 )
 800dee6:	b913      	cbnz	r3, 800deee <RegionBaseUSComputeNext125kHzJoinChannel+0x8a>
    {
        *groupsCurrentIndex = startIndex;
        return LORAMAC_STATUS_OK;
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 800dee8:	2003      	movs	r0, #3
}
 800deea:	b005      	add	sp, #20
 800deec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *groupsCurrentIndex = startIndex;
 800deee:	702c      	strb	r4, [r5, #0]
        return LORAMAC_STATUS_OK;
 800def0:	2000      	movs	r0, #0
 800def2:	e7fa      	b.n	800deea <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800def4:	2003      	movs	r0, #3
 800def6:	e7f8      	b.n	800deea <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 800def8:	2003      	movs	r0, #3
 800defa:	e7f6      	b.n	800deea <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 800defc:	2003      	movs	r0, #3
 800defe:	e7f4      	b.n	800deea <RegionBaseUSComputeNext125kHzJoinChannel+0x86>

0800df00 <RegionBaseUSCalcDownlinkFrequency>:
uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
}
 800df00:	fb02 1000 	mla	r0, r2, r0, r1
 800df04:	4770      	bx	lr

0800df06 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800df06:	b082      	sub	sp, #8
 800df08:	f10d 0c08 	add.w	ip, sp, #8
 800df0c:	e90c 000c 	stmdb	ip, {r2, r3}
    uint16_t dutyCycle = band->DCycle;
 800df10:	8800      	ldrh	r0, [r0, #0]

    if( joined == false )
 800df12:	b971      	cbnz	r1, 800df32 <GetDutyCycle+0x2c>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800df14:	4613      	mov	r3, r2
 800df16:	f5b2 6f61 	cmp.w	r2, #3600	; 0xe10
 800df1a:	d306      	bcc.n	800df2a <GetDutyCycle+0x24>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 800df1c:	f649 22af 	movw	r2, #39599	; 0x9aaf
 800df20:	4293      	cmp	r3, r2
 800df22:	d80a      	bhi.n	800df3a <GetDutyCycle+0x34>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 800df24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800df28:	e000      	b.n	800df2c <GetDutyCycle+0x26>
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 800df2a:	2364      	movs	r3, #100	; 0x64
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800df2c:	4298      	cmp	r0, r3
 800df2e:	bf38      	it	cc
 800df30:	4618      	movcc	r0, r3
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 800df32:	b900      	cbnz	r0, 800df36 <GetDutyCycle+0x30>
    {
        dutyCycle = 1;
 800df34:	2001      	movs	r0, #1
    }

    return dutyCycle;
}
 800df36:	b002      	add	sp, #8
 800df38:	4770      	bx	lr
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 800df3a:	f242 7310 	movw	r3, #10000	; 0x2710
 800df3e:	e7f5      	b.n	800df2c <GetDutyCycle+0x26>

0800df40 <CountChannels>:

    return dutyCycle;
}

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 800df40:	4684      	mov	ip, r0
    uint8_t nbActiveBits = 0;

    for( uint8_t j = 0; j < nbBits; j++ )
 800df42:	2300      	movs	r3, #0
    uint8_t nbActiveBits = 0;
 800df44:	4618      	mov	r0, r3
    for( uint8_t j = 0; j < nbBits; j++ )
 800df46:	e001      	b.n	800df4c <CountChannels+0xc>
 800df48:	3301      	adds	r3, #1
 800df4a:	b2db      	uxtb	r3, r3
 800df4c:	428b      	cmp	r3, r1
 800df4e:	d207      	bcs.n	800df60 <CountChannels+0x20>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800df50:	2201      	movs	r2, #1
 800df52:	409a      	lsls	r2, r3
 800df54:	ea32 020c 	bics.w	r2, r2, ip
 800df58:	d1f6      	bne.n	800df48 <CountChannels+0x8>
        {
            nbActiveBits++;
 800df5a:	3001      	adds	r0, #1
 800df5c:	b2c0      	uxtb	r0, r0
 800df5e:	e7f3      	b.n	800df48 <CountChannels+0x8>
        }
    }
    return nbActiveBits;
}
 800df60:	4770      	bx	lr
	...

0800df64 <SetMaxTimeCredits>:
{
 800df64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800df68:	b089      	sub	sp, #36	; 0x24
 800df6a:	4604      	mov	r4, r0
 800df6c:	460e      	mov	r6, r1
 800df6e:	ad02      	add	r5, sp, #8
 800df70:	e885 000c 	stmia.w	r5, {r2, r3}
 800df74:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
 800df78:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 800df7c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800df80:	f005 f802 	bl	8012f88 <SysTimeToMs>
 800df84:	4607      	mov	r7, r0
    SysTime_t timeDiff = { 0 };
 800df86:	2300      	movs	r3, #0
 800df88:	9304      	str	r3, [sp, #16]
 800df8a:	9305      	str	r3, [sp, #20]
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800df8c:	e895 000c 	ldmia.w	r5, {r2, r3}
 800df90:	4631      	mov	r1, r6
 800df92:	4620      	mov	r0, r4
 800df94:	f7ff ffb7 	bl	800df06 <GetDutyCycle>
 800df98:	4605      	mov	r5, r0
    if( joined == false )
 800df9a:	2e00      	cmp	r6, #0
 800df9c:	d14c      	bne.n	800e038 <SetMaxTimeCredits+0xd4>
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 800df9e:	2864      	cmp	r0, #100	; 0x64
 800dfa0:	d025      	beq.n	800dfee <SetMaxTimeCredits+0x8a>
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800dfa2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800dfa6:	d025      	beq.n	800dff4 <SetMaxTimeCredits+0x90>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 800dfa8:	4e27      	ldr	r6, [pc, #156]	; (800e048 <SetMaxTimeCredits+0xe4>)
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 800dfaa:	68a1      	ldr	r1, [r4, #8]
 800dfac:	a806      	add	r0, sp, #24
 800dfae:	f005 f80b 	bl	8012fc8 <SysTimeFromMs>
 800dfb2:	9b07      	ldr	r3, [sp, #28]
 800dfb4:	9300      	str	r3, [sp, #0]
 800dfb6:	9b06      	ldr	r3, [sp, #24]
 800dfb8:	aa02      	add	r2, sp, #8
 800dfba:	ca06      	ldmia	r2, {r1, r2}
 800dfbc:	a804      	add	r0, sp, #16
 800dfbe:	f004 ff6a 	bl	8012e96 <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800dfc2:	f1b8 0f00 	cmp.w	r8, #0
 800dfc6:	d102      	bne.n	800dfce <SetMaxTimeCredits+0x6a>
 800dfc8:	f1b9 0f00 	cmp.w	r9, #0
 800dfcc:	d002      	beq.n	800dfd4 <SetMaxTimeCredits+0x70>
            ( band->MaxTimeCredits != maxCredits ) ||
 800dfce:	6923      	ldr	r3, [r4, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800dfd0:	42b3      	cmp	r3, r6
 800dfd2:	d012      	beq.n	800dffa <SetMaxTimeCredits+0x96>
            band->TimeCredits = maxCredits;
 800dfd4:	60e6      	str	r6, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800dfd6:	9b02      	ldr	r3, [sp, #8]
 800dfd8:	4a1c      	ldr	r2, [pc, #112]	; (800e04c <SetMaxTimeCredits+0xe8>)
 800dfda:	4293      	cmp	r3, r2
 800dfdc:	d812      	bhi.n	800e004 <SetMaxTimeCredits+0xa0>
    if( band->LastBandUpdateTime == 0 )
 800dfde:	6863      	ldr	r3, [r4, #4]
 800dfe0:	b903      	cbnz	r3, 800dfe4 <SetMaxTimeCredits+0x80>
        band->TimeCredits = maxCredits;
 800dfe2:	60e6      	str	r6, [r4, #12]
    band->MaxTimeCredits = maxCredits;
 800dfe4:	6126      	str	r6, [r4, #16]
}
 800dfe6:	4628      	mov	r0, r5
 800dfe8:	b009      	add	sp, #36	; 0x24
 800dfea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            band->LastMaxCreditAssignTime = elapsedTime;
 800dfee:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800dff0:	4e17      	ldr	r6, [pc, #92]	; (800e050 <SetMaxTimeCredits+0xec>)
 800dff2:	e7da      	b.n	800dfaa <SetMaxTimeCredits+0x46>
            band->LastMaxCreditAssignTime = elapsedTime;
 800dff4:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 800dff6:	4e17      	ldr	r6, [pc, #92]	; (800e054 <SetMaxTimeCredits+0xf0>)
 800dff8:	e7d7      	b.n	800dfaa <SetMaxTimeCredits+0x46>
            ( band->MaxTimeCredits != maxCredits ) ||
 800dffa:	9a04      	ldr	r2, [sp, #16]
 800dffc:	4b16      	ldr	r3, [pc, #88]	; (800e058 <SetMaxTimeCredits+0xf4>)
 800dffe:	429a      	cmp	r2, r3
 800e000:	d9ed      	bls.n	800dfde <SetMaxTimeCredits+0x7a>
 800e002:	e7e7      	b.n	800dfd4 <SetMaxTimeCredits+0x70>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800e004:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800e008:	3b30      	subs	r3, #48	; 0x30
 800e00a:	4a14      	ldr	r2, [pc, #80]	; (800e05c <SetMaxTimeCredits+0xf8>)
 800e00c:	fba2 2303 	umull	r2, r3, r2, r3
 800e010:	0c1b      	lsrs	r3, r3, #16
 800e012:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 800e014:	4a12      	ldr	r2, [pc, #72]	; (800e060 <SetMaxTimeCredits+0xfc>)
 800e016:	fb02 f303 	mul.w	r3, r2, r3
 800e01a:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800e01c:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 800e020:	3330      	adds	r3, #48	; 0x30
 800e022:	9304      	str	r3, [sp, #16]
                timeDiff.SubSeconds = 0;
 800e024:	2300      	movs	r3, #0
 800e026:	f8ad 3014 	strh.w	r3, [sp, #20]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 800e02a:	ab04      	add	r3, sp, #16
 800e02c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e030:	f004 ffaa 	bl	8012f88 <SysTimeToMs>
 800e034:	60a0      	str	r0, [r4, #8]
 800e036:	e7d2      	b.n	800dfde <SetMaxTimeCredits+0x7a>
        if( dutyCycleEnabled == false )
 800e038:	f1b8 0f00 	cmp.w	r8, #0
 800e03c:	d102      	bne.n	800e044 <SetMaxTimeCredits+0xe0>
            band->TimeCredits = maxCredits;
 800e03e:	4e04      	ldr	r6, [pc, #16]	; (800e050 <SetMaxTimeCredits+0xec>)
 800e040:	60e6      	str	r6, [r4, #12]
 800e042:	e7cc      	b.n	800dfde <SetMaxTimeCredits+0x7a>
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800e044:	4e02      	ldr	r6, [pc, #8]	; (800e050 <SetMaxTimeCredits+0xec>)
 800e046:	e7ca      	b.n	800dfde <SetMaxTimeCredits+0x7a>
 800e048:	02932e00 	.word	0x02932e00
 800e04c:	0001ec2f 	.word	0x0001ec2f
 800e050:	001b7740 	.word	0x001b7740
 800e054:	0112a880 	.word	0x0112a880
 800e058:	0001517f 	.word	0x0001517f
 800e05c:	c22e4507 	.word	0xc22e4507
 800e060:	00015180 	.word	0x00015180

0800e064 <UpdateTimeCredits>:
{
 800e064:	b570      	push	{r4, r5, r6, lr}
 800e066:	b082      	sub	sp, #8
 800e068:	4604      	mov	r4, r0
 800e06a:	460e      	mov	r6, r1
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 800e06c:	9301      	str	r3, [sp, #4]
 800e06e:	9200      	str	r2, [sp, #0]
 800e070:	ab06      	add	r3, sp, #24
 800e072:	cb0c      	ldmia	r3, {r2, r3}
 800e074:	f7ff ff76 	bl	800df64 <SetMaxTimeCredits>
 800e078:	4605      	mov	r5, r0
    if( joined == true )
 800e07a:	b94e      	cbnz	r6, 800e090 <UpdateTimeCredits+0x2c>
    if( band->TimeCredits > band->MaxTimeCredits )
 800e07c:	68e2      	ldr	r2, [r4, #12]
 800e07e:	6923      	ldr	r3, [r4, #16]
 800e080:	429a      	cmp	r2, r3
 800e082:	d900      	bls.n	800e086 <UpdateTimeCredits+0x22>
        band->TimeCredits = band->MaxTimeCredits;
 800e084:	60e3      	str	r3, [r4, #12]
    band->LastBandUpdateTime = currentTime;
 800e086:	9b08      	ldr	r3, [sp, #32]
 800e088:	6063      	str	r3, [r4, #4]
}
 800e08a:	4628      	mov	r0, r5
 800e08c:	b002      	add	sp, #8
 800e08e:	bd70      	pop	{r4, r5, r6, pc}
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800e090:	6860      	ldr	r0, [r4, #4]
 800e092:	f004 fff9 	bl	8013088 <UTIL_TIMER_GetElapsedTime>
 800e096:	68e3      	ldr	r3, [r4, #12]
 800e098:	4403      	add	r3, r0
 800e09a:	60e3      	str	r3, [r4, #12]
 800e09c:	e7ee      	b.n	800e07c <UpdateTimeCredits+0x18>

0800e09e <RegionCommonValueInRange>:
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 800e09e:	4288      	cmp	r0, r1
 800e0a0:	db03      	blt.n	800e0aa <RegionCommonValueInRange+0xc>
 800e0a2:	4290      	cmp	r0, r2
 800e0a4:	dd03      	ble.n	800e0ae <RegionCommonValueInRange+0x10>
    {
        return 1;
    }
    return 0;
 800e0a6:	2000      	movs	r0, #0
 800e0a8:	4770      	bx	lr
 800e0aa:	2000      	movs	r0, #0
 800e0ac:	4770      	bx	lr
        return 1;
 800e0ae:	2001      	movs	r0, #1
}
 800e0b0:	4770      	bx	lr

0800e0b2 <RegionCommonChanVerifyDr>:
{
 800e0b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0b6:	4682      	mov	sl, r0
 800e0b8:	460e      	mov	r6, r1
 800e0ba:	4690      	mov	r8, r2
 800e0bc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 800e0c0:	f99d 2020 	ldrsb.w	r2, [sp, #32]
 800e0c4:	4619      	mov	r1, r3
 800e0c6:	4640      	mov	r0, r8
 800e0c8:	f7ff ffe9 	bl	800e09e <RegionCommonValueInRange>
 800e0cc:	b338      	cbz	r0, 800e11e <RegionCommonChanVerifyDr+0x6c>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800e0ce:	2500      	movs	r5, #0
 800e0d0:	462f      	mov	r7, r5
 800e0d2:	e01e      	b.n	800e112 <RegionCommonChanVerifyDr+0x60>
        for( uint8_t j = 0; j < 16; j++ )
 800e0d4:	3401      	adds	r4, #1
 800e0d6:	b2e4      	uxtb	r4, r4
 800e0d8:	2c0f      	cmp	r4, #15
 800e0da:	d816      	bhi.n	800e10a <RegionCommonChanVerifyDr+0x58>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800e0dc:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
 800e0e0:	4123      	asrs	r3, r4
 800e0e2:	f013 0f01 	tst.w	r3, #1
 800e0e6:	d0f5      	beq.n	800e0d4 <RegionCommonChanVerifyDr+0x22>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800e0e8:	193b      	adds	r3, r7, r4
 800e0ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e0ee:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800e0f2:	7a19      	ldrb	r1, [r3, #8]
 800e0f4:	090a      	lsrs	r2, r1, #4
 800e0f6:	f001 010f 	and.w	r1, r1, #15
 800e0fa:	4640      	mov	r0, r8
 800e0fc:	f7ff ffcf 	bl	800e09e <RegionCommonValueInRange>
 800e100:	2801      	cmp	r0, #1
 800e102:	d1e7      	bne.n	800e0d4 <RegionCommonChanVerifyDr+0x22>
                    return true;
 800e104:	2001      	movs	r0, #1
}
 800e106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800e10a:	3710      	adds	r7, #16
 800e10c:	b2ff      	uxtb	r7, r7
 800e10e:	3501      	adds	r5, #1
 800e110:	b2ed      	uxtb	r5, r5
 800e112:	4557      	cmp	r7, sl
 800e114:	d201      	bcs.n	800e11a <RegionCommonChanVerifyDr+0x68>
        for( uint8_t j = 0; j < 16; j++ )
 800e116:	2400      	movs	r4, #0
 800e118:	e7de      	b.n	800e0d8 <RegionCommonChanVerifyDr+0x26>
    return false;
 800e11a:	2000      	movs	r0, #0
 800e11c:	e7f3      	b.n	800e106 <RegionCommonChanVerifyDr+0x54>
        return false;
 800e11e:	2000      	movs	r0, #0
 800e120:	e7f1      	b.n	800e106 <RegionCommonChanVerifyDr+0x54>

0800e122 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
    uint8_t index = id / 16;
 800e122:	ea4f 1c11 	mov.w	ip, r1, lsr #4

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800e126:	0913      	lsrs	r3, r2, #4
 800e128:	ebb3 1f11 	cmp.w	r3, r1, lsr #4
 800e12c:	d30e      	bcc.n	800e14c <RegionCommonChanDisable+0x2a>
 800e12e:	4291      	cmp	r1, r2
 800e130:	d20e      	bcs.n	800e150 <RegionCommonChanDisable+0x2e>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800e132:	f001 010f 	and.w	r1, r1, #15
 800e136:	2301      	movs	r3, #1
 800e138:	fa03 f101 	lsl.w	r1, r3, r1
 800e13c:	f830 201c 	ldrh.w	r2, [r0, ip, lsl #1]
 800e140:	ea22 0101 	bic.w	r1, r2, r1
 800e144:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]

    return true;
 800e148:	4618      	mov	r0, r3
 800e14a:	4770      	bx	lr
        return false;
 800e14c:	2000      	movs	r0, #0
 800e14e:	4770      	bx	lr
 800e150:	2000      	movs	r0, #0
}
 800e152:	4770      	bx	lr

0800e154 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800e154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 800e156:	b188      	cbz	r0, 800e17c <RegionCommonCountChannels+0x28>
 800e158:	460c      	mov	r4, r1
 800e15a:	4616      	mov	r6, r2
 800e15c:	4607      	mov	r7, r0
    uint8_t nbChannels = 0;
 800e15e:	2500      	movs	r5, #0
 800e160:	e008      	b.n	800e174 <RegionCommonCountChannels+0x20>
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 800e162:	2110      	movs	r1, #16
 800e164:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 800e168:	f7ff feea 	bl	800df40 <CountChannels>
 800e16c:	4405      	add	r5, r0
 800e16e:	b2ed      	uxtb	r5, r5
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800e170:	3401      	adds	r4, #1
 800e172:	b2e4      	uxtb	r4, r4
 800e174:	42b4      	cmp	r4, r6
 800e176:	d3f4      	bcc.n	800e162 <RegionCommonCountChannels+0xe>
    }

    return nbChannels;
}
 800e178:	4628      	mov	r0, r5
 800e17a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 800e17c:	2500      	movs	r5, #0
 800e17e:	e7fb      	b.n	800e178 <RegionCommonCountChannels+0x24>

0800e180 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800e180:	4684      	mov	ip, r0
 800e182:	b158      	cbz	r0, 800e19c <RegionCommonChanMaskCopy+0x1c>
 800e184:	b109      	cbz	r1, 800e18a <RegionCommonChanMaskCopy+0xa>
    {
        for( uint8_t i = 0; i < len; i++ )
 800e186:	2300      	movs	r3, #0
 800e188:	e006      	b.n	800e198 <RegionCommonChanMaskCopy+0x18>
 800e18a:	4770      	bx	lr
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 800e18c:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800e190:	f82c 0013 	strh.w	r0, [ip, r3, lsl #1]
        for( uint8_t i = 0; i < len; i++ )
 800e194:	3301      	adds	r3, #1
 800e196:	b2db      	uxtb	r3, r3
 800e198:	4293      	cmp	r3, r2
 800e19a:	d3f7      	bcc.n	800e18c <RegionCommonChanMaskCopy+0xc>
        }
    }
}
 800e19c:	4770      	bx	lr

0800e19e <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800e19e:	b082      	sub	sp, #8
 800e1a0:	b538      	push	{r3, r4, r5, lr}
 800e1a2:	4604      	mov	r4, r0
 800e1a4:	460d      	mov	r5, r1
 800e1a6:	4611      	mov	r1, r2
 800e1a8:	aa04      	add	r2, sp, #16
 800e1aa:	f842 3f04 	str.w	r3, [r2, #4]!
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800e1ae:	ca0c      	ldmia	r2, {r2, r3}
 800e1b0:	f7ff fea9 	bl	800df06 <GetDutyCycle>

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800e1b4:	68e3      	ldr	r3, [r4, #12]
 800e1b6:	fb05 f000 	mul.w	r0, r5, r0
 800e1ba:	4283      	cmp	r3, r0
 800e1bc:	d905      	bls.n	800e1ca <RegionCommonSetBandTxDone+0x2c>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 800e1be:	1a18      	subs	r0, r3, r0
 800e1c0:	60e0      	str	r0, [r4, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 800e1c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e1c6:	b002      	add	sp, #8
 800e1c8:	4770      	bx	lr
        band->TimeCredits = 0;
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	60e3      	str	r3, [r4, #12]
}
 800e1ce:	e7f8      	b.n	800e1c2 <RegionCommonSetBandTxDone+0x24>

0800e1d0 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800e1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1d4:	b089      	sub	sp, #36	; 0x24
 800e1d6:	4607      	mov	r7, r0
 800e1d8:	468b      	mov	fp, r1
 800e1da:	4691      	mov	r9, r2
 800e1dc:	4698      	mov	r8, r3
 800e1de:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800e1e2:	f004 ff47 	bl	8013074 <UTIL_TIMER_GetCurrentTime>
 800e1e6:	9004      	str	r0, [sp, #16]
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;

    for( uint8_t i = 0; i < nbBands; i++ )
 800e1e8:	2400      	movs	r4, #0
    uint8_t validBands = 0;
 800e1ea:	4626      	mov	r6, r4
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800e1ec:	f04f 33ff 	mov.w	r3, #4294967295
 800e1f0:	9305      	str	r3, [sp, #20]
    for( uint8_t i = 0; i < nbBands; i++ )
 800e1f2:	e005      	b.n	800e200 <RegionCommonUpdateBandTimeOff+0x30>
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
        {
            bands[i].ReadyForTransmission = true;
 800e1f4:	2301      	movs	r3, #1
 800e1f6:	752b      	strb	r3, [r5, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 800e1f8:	441e      	add	r6, r3
 800e1fa:	b2f6      	uxtb	r6, r6
    for( uint8_t i = 0; i < nbBands; i++ )
 800e1fc:	3401      	adds	r4, #1
 800e1fe:	b2e4      	uxtb	r4, r4
 800e200:	454c      	cmp	r4, r9
 800e202:	d25d      	bcs.n	800e2c0 <RegionCommonUpdateBandTimeOff+0xf0>
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800e204:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800e208:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 800e20c:	9b04      	ldr	r3, [sp, #16]
 800e20e:	9302      	str	r3, [sp, #8]
 800e210:	ab13      	add	r3, sp, #76	; 0x4c
 800e212:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e216:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e21a:	4653      	mov	r3, sl
 800e21c:	4642      	mov	r2, r8
 800e21e:	4639      	mov	r1, r7
 800e220:	4628      	mov	r0, r5
 800e222:	f7ff ff1f 	bl	800e064 <UpdateTimeCredits>
        creditCosts = expectedTimeOnAir * dutyCycle;
 800e226:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e228:	fb03 f300 	mul.w	r3, r3, r0
        if( ( bands[i].TimeCredits > creditCosts ) ||
 800e22c:	68ea      	ldr	r2, [r5, #12]
 800e22e:	429a      	cmp	r2, r3
 800e230:	d8e0      	bhi.n	800e1f4 <RegionCommonUpdateBandTimeOff+0x24>
 800e232:	f1b8 0f00 	cmp.w	r8, #0
 800e236:	d101      	bne.n	800e23c <RegionCommonUpdateBandTimeOff+0x6c>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800e238:	2f00      	cmp	r7, #0
 800e23a:	d1db      	bne.n	800e1f4 <RegionCommonUpdateBandTimeOff+0x24>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 800e23c:	2100      	movs	r1, #0
 800e23e:	7529      	strb	r1, [r5, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 800e240:	6929      	ldr	r1, [r5, #16]
 800e242:	4299      	cmp	r1, r3
 800e244:	d907      	bls.n	800e256 <RegionCommonUpdateBandTimeOff+0x86>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800e246:	1a9b      	subs	r3, r3, r2
 800e248:	9a05      	ldr	r2, [sp, #20]
 800e24a:	429a      	cmp	r2, r3
 800e24c:	bf28      	it	cs
 800e24e:	461a      	movcs	r2, r3
 800e250:	9205      	str	r2, [sp, #20]
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 800e252:	3601      	adds	r6, #1
 800e254:	b2f6      	uxtb	r6, r6
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 800e256:	2f00      	cmp	r7, #0
 800e258:	d1d0      	bne.n	800e1fc <RegionCommonUpdateBandTimeOff+0x2c>
            {
                SysTime_t backoffTimeRange = {
 800e25a:	2300      	movs	r3, #0
 800e25c:	9306      	str	r3, [sp, #24]
 800e25e:	f8ad 301c 	strh.w	r3, [sp, #28]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 800e262:	2864      	cmp	r0, #100	; 0x64
 800e264:	d024      	beq.n	800e2b0 <RegionCommonUpdateBandTimeOff+0xe0>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800e266:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800e26a:	d025      	beq.n	800e2b8 <RegionCommonUpdateBandTimeOff+0xe8>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800e26c:	4b19      	ldr	r3, [pc, #100]	; (800e2d4 <RegionCommonUpdateBandTimeOff+0x104>)
 800e26e:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800e270:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e272:	4a18      	ldr	r2, [pc, #96]	; (800e2d4 <RegionCommonUpdateBandTimeOff+0x104>)
 800e274:	4293      	cmp	r3, r2
 800e276:	d90c      	bls.n	800e292 <RegionCommonUpdateBandTimeOff+0xc2>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800e278:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800e27c:	3b30      	subs	r3, #48	; 0x30
 800e27e:	4a16      	ldr	r2, [pc, #88]	; (800e2d8 <RegionCommonUpdateBandTimeOff+0x108>)
 800e280:	fba2 2303 	umull	r2, r3, r2, r3
 800e284:	0c1b      	lsrs	r3, r3, #16
 800e286:	4a15      	ldr	r2, [pc, #84]	; (800e2dc <RegionCommonUpdateBandTimeOff+0x10c>)
 800e288:	fb03 2202 	mla	r2, r3, r2, r2
 800e28c:	9b06      	ldr	r3, [sp, #24]
 800e28e:	4413      	add	r3, r2
 800e290:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 800e292:	ad06      	add	r5, sp, #24
 800e294:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e296:	9300      	str	r3, [sp, #0]
 800e298:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e29a:	e895 0006 	ldmia.w	r5, {r1, r2}
 800e29e:	4628      	mov	r0, r5
 800e2a0:	f004 fdf9 	bl	8012e96 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 800e2a4:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e2a8:	f004 fe6e 	bl	8012f88 <SysTimeToMs>
 800e2ac:	9005      	str	r0, [sp, #20]
 800e2ae:	e7a5      	b.n	800e1fc <RegionCommonUpdateBandTimeOff+0x2c>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 800e2b0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800e2b4:	9306      	str	r3, [sp, #24]
 800e2b6:	e7db      	b.n	800e270 <RegionCommonUpdateBandTimeOff+0xa0>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 800e2b8:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 800e2bc:	9306      	str	r3, [sp, #24]
 800e2be:	e7d7      	b.n	800e270 <RegionCommonUpdateBandTimeOff+0xa0>
            }
        }
    }

    if( validBands == 0 )
 800e2c0:	b11e      	cbz	r6, 800e2ca <RegionCommonUpdateBandTimeOff+0xfa>
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
    }
    return minTimeToWait;
}
 800e2c2:	9805      	ldr	r0, [sp, #20]
 800e2c4:	b009      	add	sp, #36	; 0x24
 800e2c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return TIMERTIME_T_MAX;
 800e2ca:	f04f 33ff 	mov.w	r3, #4294967295
 800e2ce:	9305      	str	r3, [sp, #20]
 800e2d0:	e7f7      	b.n	800e2c2 <RegionCommonUpdateBandTimeOff+0xf2>
 800e2d2:	bf00      	nop
 800e2d4:	0001ec30 	.word	0x0001ec30
 800e2d8:	c22e4507 	.word	0xc22e4507
 800e2dc:	00015180 	.word	0x00015180

0800e2e0 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800e2e0:	7803      	ldrb	r3, [r0, #0]
 800e2e2:	2b03      	cmp	r3, #3
 800e2e4:	d001      	beq.n	800e2ea <RegionCommonParseLinkAdrReq+0xa>
    uint8_t retIndex = 0;
 800e2e6:	2000      	movs	r0, #0

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
    }
    return retIndex;
}
 800e2e8:	4770      	bx	lr
        linkAdrParams->Datarate = payload[1];
 800e2ea:	7842      	ldrb	r2, [r0, #1]
 800e2ec:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e2f0:	704b      	strb	r3, [r1, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800e2f2:	f003 030f 	and.w	r3, r3, #15
 800e2f6:	708b      	strb	r3, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800e2f8:	0913      	lsrs	r3, r2, #4
 800e2fa:	704b      	strb	r3, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800e2fc:	7883      	ldrb	r3, [r0, #2]
 800e2fe:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800e300:	78c2      	ldrb	r2, [r0, #3]
 800e302:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e306:	808b      	strh	r3, [r1, #4]
        linkAdrParams->NbRep = payload[4];
 800e308:	7903      	ldrb	r3, [r0, #4]
 800e30a:	700b      	strb	r3, [r1, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800e30c:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800e310:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800e312:	f003 030f 	and.w	r3, r3, #15
 800e316:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
 800e318:	2005      	movs	r0, #5
 800e31a:	4770      	bx	lr

0800e31c <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800e31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e320:	b085      	sub	sp, #20
 800e322:	4604      	mov	r4, r0
 800e324:	4688      	mov	r8, r1
 800e326:	4617      	mov	r7, r2
 800e328:	461e      	mov	r6, r3
    uint8_t status = verifyParams->Status;
 800e32a:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 800e32c:	f990 a006 	ldrsb.w	sl, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
 800e330:	f990 9007 	ldrsb.w	r9, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 800e334:	f990 b008 	ldrsb.w	fp, [r0, #8]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800e338:	7943      	ldrb	r3, [r0, #5]
 800e33a:	b92b      	cbnz	r3, 800e348 <RegionCommonLinkAdrReqVerifyParams+0x2c>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 800e33c:	f990 b00b 	ldrsb.w	fp, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 800e340:	f990 a009 	ldrsb.w	sl, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 800e344:	f990 900a 	ldrsb.w	r9, [r0, #10]
    }

    if( status != 0 )
 800e348:	b355      	cbz	r5, 800e3a0 <RegionCommonLinkAdrReqVerifyParams+0x84>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 800e34a:	f1ba 0f0f 	cmp.w	sl, #15
 800e34e:	d114      	bne.n	800e37a <RegionCommonLinkAdrReqVerifyParams+0x5e>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 800e350:	f994 a009 	ldrsb.w	sl, [r4, #9]
        {
            status &= 0xFD; // Datarate KO
        }

        // Verify tx power
        if( txPower == 0x0F )
 800e354:	f1b9 0f0f 	cmp.w	r9, #15
 800e358:	d020      	beq.n	800e39c <RegionCommonLinkAdrReqVerifyParams+0x80>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800e35a:	f994 301d 	ldrsb.w	r3, [r4, #29]
 800e35e:	9303      	str	r3, [sp, #12]
 800e360:	f994 201c 	ldrsb.w	r2, [r4, #28]
 800e364:	461c      	mov	r4, r3
 800e366:	4619      	mov	r1, r3
 800e368:	4648      	mov	r0, r9
 800e36a:	f7ff fe98 	bl	800e09e <RegionCommonValueInRange>
 800e36e:	b9b8      	cbnz	r0, 800e3a0 <RegionCommonLinkAdrReqVerifyParams+0x84>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 800e370:	454c      	cmp	r4, r9
 800e372:	dc21      	bgt.n	800e3b8 <RegionCommonLinkAdrReqVerifyParams+0x9c>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 800e374:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
 800e378:	e012      	b.n	800e3a0 <RegionCommonLinkAdrReqVerifyParams+0x84>
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800e37a:	69a3      	ldr	r3, [r4, #24]
 800e37c:	9301      	str	r3, [sp, #4]
 800e37e:	f994 3015 	ldrsb.w	r3, [r4, #21]
 800e382:	9300      	str	r3, [sp, #0]
 800e384:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800e388:	4652      	mov	r2, sl
 800e38a:	6921      	ldr	r1, [r4, #16]
 800e38c:	7b20      	ldrb	r0, [r4, #12]
 800e38e:	f7ff fe90 	bl	800e0b2 <RegionCommonChanVerifyDr>
 800e392:	2800      	cmp	r0, #0
 800e394:	d1de      	bne.n	800e354 <RegionCommonLinkAdrReqVerifyParams+0x38>
            status &= 0xFD; // Datarate KO
 800e396:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
 800e39a:	e7db      	b.n	800e354 <RegionCommonLinkAdrReqVerifyParams+0x38>
            txPower =  verifyParams->CurrentTxPower;
 800e39c:	f994 900a 	ldrsb.w	r9, [r4, #10]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 800e3a0:	2d07      	cmp	r5, #7
 800e3a2:	d00c      	beq.n	800e3be <RegionCommonLinkAdrReqVerifyParams+0xa2>
            nbRepetitions = 1;
        }
    }

    // Apply changes
    *dr = datarate;
 800e3a4:	f888 a000 	strb.w	sl, [r8]
    *txPow = txPower;
 800e3a8:	f887 9000 	strb.w	r9, [r7]
    *nbRep = nbRepetitions;
 800e3ac:	f886 b000 	strb.w	fp, [r6]

    return status;
}
 800e3b0:	4628      	mov	r0, r5
 800e3b2:	b005      	add	sp, #20
 800e3b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                txPower = verifyParams->MaxTxPower;
 800e3b8:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800e3bc:	e7f0      	b.n	800e3a0 <RegionCommonLinkAdrReqVerifyParams+0x84>
        if( nbRepetitions == 0 )
 800e3be:	f1bb 0f00 	cmp.w	fp, #0
 800e3c2:	d1ef      	bne.n	800e3a4 <RegionCommonLinkAdrReqVerifyParams+0x88>
            nbRepetitions = 1;
 800e3c4:	f04f 0b01 	mov.w	fp, #1
 800e3c8:	e7ec      	b.n	800e3a4 <RegionCommonLinkAdrReqVerifyParams+0x88>
	...

0800e3cc <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 800e3cc:	4b02      	ldr	r3, [pc, #8]	; (800e3d8 <RegionCommonComputeSymbolTimeLoRa+0xc>)
 800e3ce:	fa03 f000 	lsl.w	r0, r3, r0
}
 800e3d2:	fbb0 f0f1 	udiv	r0, r0, r1
 800e3d6:	4770      	bx	lr
 800e3d8:	000f4240 	.word	0x000f4240

0800e3dc <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}
 800e3dc:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800e3e0:	fbb3 f0f0 	udiv	r0, r3, r0
 800e3e4:	4770      	bx	lr
	...

0800e3e8 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 800e3e8:	b500      	push	{lr}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800e3ea:	f1a1 0c04 	sub.w	ip, r1, #4
 800e3ee:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
 800e3f2:	fb0e f202 	mul.w	r2, lr, r2
 800e3f6:	fb00 220c 	mla	r2, r0, ip, r2
 800e3fa:	0052      	lsls	r2, r2, #1
 800e3fc:	d021      	beq.n	800e442 <RegionCommonComputeRxWindowParameters+0x5a>
 800e3fe:	4402      	add	r2, r0
 800e400:	3a01      	subs	r2, #1
 800e402:	fbb2 f2f0 	udiv	r2, r2, r0
 800e406:	4291      	cmp	r1, r2
 800e408:	bf38      	it	cc
 800e40a:	4611      	movcc	r1, r2
 800e40c:	9a01      	ldr	r2, [sp, #4]
 800e40e:	6011      	str	r1, [r2, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800e410:	0082      	lsls	r2, r0, #2
 800e412:	fb00 f101 	mul.w	r1, r0, r1
 800e416:	b1b9      	cbz	r1, 800e448 <RegionCommonComputeRxWindowParameters+0x60>
 800e418:	3101      	adds	r1, #1
 800e41a:	0849      	lsrs	r1, r1, #1
 800e41c:	1a51      	subs	r1, r2, r1
 800e41e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e422:	fb02 1313 	mls	r3, r2, r3, r1
 800e426:	2b00      	cmp	r3, #0
 800e428:	dd10      	ble.n	800e44c <RegionCommonComputeRxWindowParameters+0x64>
 800e42a:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 800e42e:	4a0b      	ldr	r2, [pc, #44]	; (800e45c <RegionCommonComputeRxWindowParameters+0x74>)
 800e430:	fb82 1203 	smull	r1, r2, r2, r3
 800e434:	17db      	asrs	r3, r3, #31
 800e436:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800e43a:	9a02      	ldr	r2, [sp, #8]
 800e43c:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 800e43e:	f85d fb04 	ldr.w	pc, [sp], #4
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800e442:	fbb2 f2f0 	udiv	r2, r2, r0
 800e446:	e7de      	b.n	800e406 <RegionCommonComputeRxWindowParameters+0x1e>
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800e448:	0849      	lsrs	r1, r1, #1
 800e44a:	e7e7      	b.n	800e41c <RegionCommonComputeRxWindowParameters+0x34>
 800e44c:	4a03      	ldr	r2, [pc, #12]	; (800e45c <RegionCommonComputeRxWindowParameters+0x74>)
 800e44e:	fb82 1203 	smull	r1, r2, r2, r3
 800e452:	17db      	asrs	r3, r3, #31
 800e454:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800e458:	e7ef      	b.n	800e43a <RegionCommonComputeRxWindowParameters+0x52>
 800e45a:	bf00      	nop
 800e45c:	10624dd3 	.word	0x10624dd3

0800e460 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800e460:	b538      	push	{r3, r4, r5, lr}
 800e462:	460d      	mov	r5, r1
 800e464:	4614      	mov	r4, r2
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800e466:	0040      	lsls	r0, r0, #1
 800e468:	f7f2 fa04 	bl	8000874 <__aeabi_ui2f>
 800e46c:	4601      	mov	r1, r0
 800e46e:	4628      	mov	r0, r5
 800e470:	f7f2 f94e 	bl	8000710 <__aeabi_fsub>
 800e474:	4621      	mov	r1, r4
 800e476:	f7f2 f94b 	bl	8000710 <__aeabi_fsub>
 800e47a:	f7f2 f83d 	bl	80004f8 <__aeabi_f2d>
 800e47e:	f005 fd47 	bl	8013f10 <floor>
 800e482:	f7f2 f919 	bl	80006b8 <__aeabi_d2iz>

    return phyTxPower;
}
 800e486:	b240      	sxtb	r0, r0
 800e488:	bd38      	pop	{r3, r4, r5, pc}

0800e48a <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 800e48a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e48e:	b083      	sub	sp, #12
 800e490:	4605      	mov	r5, r0
 800e492:	468b      	mov	fp, r1
 800e494:	9200      	str	r2, [sp, #0]
 800e496:	9301      	str	r3, [sp, #4]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800e498:	2600      	movs	r6, #0
 800e49a:	46b0      	mov	r8, r6
    uint8_t nbRestrictedChannelsCount = 0;
 800e49c:	46b2      	mov	sl, r6
    uint8_t nbChannelCount = 0;
 800e49e:	46b1      	mov	r9, r6
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800e4a0:	e04a      	b.n	800e538 <RegionCommonCountNbOfEnabledChannels+0xae>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800e4a2:	7a3a      	ldrb	r2, [r7, #8]
 800e4a4:	f342 0103 	sbfx	r1, r2, #0, #4
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800e4a8:	f342 1203 	sbfx	r2, r2, #4, #4
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800e4ac:	b252      	sxtb	r2, r2
 800e4ae:	b249      	sxtb	r1, r1
 800e4b0:	f995 0001 	ldrsb.w	r0, [r5, #1]
 800e4b4:	f7ff fdf3 	bl	800e09e <RegionCommonValueInRange>
 800e4b8:	b178      	cbz	r0, 800e4da <RegionCommonCountNbOfEnabledChannels+0x50>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 800e4ba:	68ea      	ldr	r2, [r5, #12]
 800e4bc:	7a7b      	ldrb	r3, [r7, #9]
 800e4be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e4c2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e4c6:	7d1b      	ldrb	r3, [r3, #20]
 800e4c8:	b35b      	cbz	r3, 800e522 <RegionCommonCountNbOfEnabledChannels+0x98>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
                    continue;
                }
                enabledChannels[nbChannelCount++] = i + j;
 800e4ca:	f109 0301 	add.w	r3, r9, #1
 800e4ce:	eb08 0204 	add.w	r2, r8, r4
 800e4d2:	f80b 2009 	strb.w	r2, [fp, r9]
 800e4d6:	fa5f f983 	uxtb.w	r9, r3
        for( uint8_t j = 0; j < 16; j++ )
 800e4da:	3401      	adds	r4, #1
 800e4dc:	b2e4      	uxtb	r4, r4
 800e4de:	2c0f      	cmp	r4, #15
 800e4e0:	d824      	bhi.n	800e52c <RegionCommonCountNbOfEnabledChannels+0xa2>
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 800e4e2:	686b      	ldr	r3, [r5, #4]
 800e4e4:	0072      	lsls	r2, r6, #1
 800e4e6:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 800e4ea:	4123      	asrs	r3, r4
 800e4ec:	f013 0f01 	tst.w	r3, #1
 800e4f0:	d0f3      	beq.n	800e4da <RegionCommonCountNbOfEnabledChannels+0x50>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 800e4f2:	68a8      	ldr	r0, [r5, #8]
 800e4f4:	eb08 0304 	add.w	r3, r8, r4
 800e4f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e4fc:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 800e500:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d0e8      	beq.n	800e4da <RegionCommonCountNbOfEnabledChannels+0x50>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800e508:	782b      	ldrb	r3, [r5, #0]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d1c9      	bne.n	800e4a2 <RegionCommonCountNbOfEnabledChannels+0x18>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 800e50e:	696b      	ldr	r3, [r5, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800e510:	2b00      	cmp	r3, #0
 800e512:	d0c6      	beq.n	800e4a2 <RegionCommonCountNbOfEnabledChannels+0x18>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 800e514:	5a9b      	ldrh	r3, [r3, r2]
 800e516:	fa43 f104 	asr.w	r1, r3, r4
 800e51a:	f011 0f01 	tst.w	r1, #1
 800e51e:	d1c0      	bne.n	800e4a2 <RegionCommonCountNbOfEnabledChannels+0x18>
 800e520:	e7db      	b.n	800e4da <RegionCommonCountNbOfEnabledChannels+0x50>
                    nbRestrictedChannelsCount++;
 800e522:	f10a 0a01 	add.w	sl, sl, #1
 800e526:	fa5f fa8a 	uxtb.w	sl, sl
                    continue;
 800e52a:	e7d6      	b.n	800e4da <RegionCommonCountNbOfEnabledChannels+0x50>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800e52c:	f108 0810 	add.w	r8, r8, #16
 800e530:	fa5f f888 	uxtb.w	r8, r8
 800e534:	3601      	adds	r6, #1
 800e536:	b2f6      	uxtb	r6, r6
 800e538:	fa1f f388 	uxth.w	r3, r8
 800e53c:	8a2a      	ldrh	r2, [r5, #16]
 800e53e:	4293      	cmp	r3, r2
 800e540:	d201      	bcs.n	800e546 <RegionCommonCountNbOfEnabledChannels+0xbc>
        for( uint8_t j = 0; j < 16; j++ )
 800e542:	2400      	movs	r4, #0
 800e544:	e7cb      	b.n	800e4de <RegionCommonCountNbOfEnabledChannels+0x54>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 800e546:	9b00      	ldr	r3, [sp, #0]
 800e548:	f883 9000 	strb.w	r9, [r3]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800e54c:	9b01      	ldr	r3, [sp, #4]
 800e54e:	f883 a000 	strb.w	sl, [r3]
}
 800e552:	b003      	add	sp, #12
 800e554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e558 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 800e558:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e55c:	b085      	sub	sp, #20
 800e55e:	4604      	mov	r4, r0
 800e560:	460f      	mov	r7, r1
 800e562:	4616      	mov	r6, r2
 800e564:	461d      	mov	r5, r3
 800e566:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800e56a:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800e56e:	6840      	ldr	r0, [r0, #4]
 800e570:	f004 fd8a 	bl	8013088 <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800e574:	6823      	ldr	r3, [r4, #0]
 800e576:	1a1b      	subs	r3, r3, r0
 800e578:	f8c9 3000 	str.w	r3, [r9]
    *nbRestrictedChannels = 1;
 800e57c:	2301      	movs	r3, #1
 800e57e:	f888 3000 	strb.w	r3, [r8]
    *nbEnabledChannels = 0;
 800e582:	2300      	movs	r3, #0
 800e584:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800e586:	6863      	ldr	r3, [r4, #4]
 800e588:	b113      	cbz	r3, 800e590 <RegionCommonIdentifyChannels+0x38>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 800e58a:	6823      	ldr	r3, [r4, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800e58c:	4283      	cmp	r3, r0
 800e58e:	d81e      	bhi.n	800e5ce <RegionCommonIdentifyChannels+0x76>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800e590:	2300      	movs	r3, #0
 800e592:	603b      	str	r3, [r7, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800e594:	69e3      	ldr	r3, [r4, #28]
 800e596:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800e59a:	781f      	ldrb	r7, [r3, #0]
 800e59c:	69a3      	ldr	r3, [r4, #24]
 800e59e:	9303      	str	r3, [sp, #12]
 800e5a0:	ab01      	add	r3, sp, #4
 800e5a2:	f104 020c 	add.w	r2, r4, #12
 800e5a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e5aa:	e883 0003 	stmia.w	r3, {r0, r1}
 800e5ae:	7d23      	ldrb	r3, [r4, #20]
 800e5b0:	9300      	str	r3, [sp, #0]
 800e5b2:	7a23      	ldrb	r3, [r4, #8]
 800e5b4:	7a62      	ldrb	r2, [r4, #9]
 800e5b6:	4661      	mov	r1, ip
 800e5b8:	4638      	mov	r0, r7
 800e5ba:	f7ff fe09 	bl	800e1d0 <RegionCommonUpdateBandTimeOff>
 800e5be:	f8c9 0000 	str.w	r0, [r9]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800e5c2:	4643      	mov	r3, r8
 800e5c4:	462a      	mov	r2, r5
 800e5c6:	4631      	mov	r1, r6
 800e5c8:	69e0      	ldr	r0, [r4, #28]
 800e5ca:	f7ff ff5e 	bl	800e48a <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 800e5ce:	782b      	ldrb	r3, [r5, #0]
 800e5d0:	b923      	cbnz	r3, 800e5dc <RegionCommonIdentifyChannels+0x84>
    {
        *nextTxDelay = 0;
        return LORAMAC_STATUS_OK;
    }
    else if( *nbRestrictedChannels > 0 )
 800e5d2:	f898 3000 	ldrb.w	r3, [r8]
 800e5d6:	b13b      	cbz	r3, 800e5e8 <RegionCommonIdentifyChannels+0x90>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 800e5d8:	200b      	movs	r0, #11
 800e5da:	e002      	b.n	800e5e2 <RegionCommonIdentifyChannels+0x8a>
        *nextTxDelay = 0;
 800e5dc:	2000      	movs	r0, #0
 800e5de:	f8c9 0000 	str.w	r0, [r9]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 800e5e2:	b005      	add	sp, #20
 800e5e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800e5e8:	200c      	movs	r0, #12
 800e5ea:	e7fa      	b.n	800e5e2 <RegionCommonIdentifyChannels+0x8a>

0800e5ec <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 800e5ec:	b570      	push	{r4, r5, r6, lr}
 800e5ee:	b082      	sub	sp, #8
 800e5f0:	4605      	mov	r5, r0
    int8_t drLocal = params->CurrentDr;
 800e5f2:	f990 4000 	ldrsb.w	r4, [r0]

    if( params->CurrentDr == params->MinDr )
 800e5f6:	f990 6002 	ldrsb.w	r6, [r0, #2]
 800e5fa:	42a6      	cmp	r6, r4
 800e5fc:	d011      	beq.n	800e622 <RegionCommonGetNextLowerTxDr+0x36>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 800e5fe:	3c01      	subs	r4, #1
 800e600:	b264      	sxtb	r4, r4
        } while( ( drLocal != params->MinDr ) &&
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 800e602:	42a6      	cmp	r6, r4
 800e604:	d00e      	beq.n	800e624 <RegionCommonGetNextLowerTxDr+0x38>
 800e606:	68ab      	ldr	r3, [r5, #8]
 800e608:	9301      	str	r3, [sp, #4]
 800e60a:	f995 3001 	ldrsb.w	r3, [r5, #1]
 800e60e:	9300      	str	r3, [sp, #0]
 800e610:	4633      	mov	r3, r6
 800e612:	4622      	mov	r2, r4
 800e614:	6869      	ldr	r1, [r5, #4]
 800e616:	78e8      	ldrb	r0, [r5, #3]
 800e618:	f7ff fd4b 	bl	800e0b2 <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 800e61c:	2800      	cmp	r0, #0
 800e61e:	d0ee      	beq.n	800e5fe <RegionCommonGetNextLowerTxDr+0x12>
 800e620:	e000      	b.n	800e624 <RegionCommonGetNextLowerTxDr+0x38>
        return params->MinDr;
 800e622:	4634      	mov	r4, r6

        return drLocal;
    }
}
 800e624:	4620      	mov	r0, r4
 800e626:	b002      	add	sp, #8
 800e628:	bd70      	pop	{r4, r5, r6, pc}

0800e62a <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
}
 800e62a:	4288      	cmp	r0, r1
 800e62c:	bfb8      	it	lt
 800e62e:	4608      	movlt	r0, r1
 800e630:	4770      	bx	lr
	...

0800e634 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 800e634:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 800e638:	4a05      	ldr	r2, [pc, #20]	; (800e650 <RegionCommonGetBandwidth+0x1c>)
 800e63a:	4293      	cmp	r3, r2
 800e63c:	d004      	beq.n	800e648 <RegionCommonGetBandwidth+0x14>
 800e63e:	4a05      	ldr	r2, [pc, #20]	; (800e654 <RegionCommonGetBandwidth+0x20>)
 800e640:	4293      	cmp	r3, r2
 800e642:	d103      	bne.n	800e64c <RegionCommonGetBandwidth+0x18>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 800e644:	2002      	movs	r0, #2
 800e646:	4770      	bx	lr
            return 1;
 800e648:	2001      	movs	r0, #1
 800e64a:	4770      	bx	lr
    switch( bandwidths[drIndex] )
 800e64c:	2000      	movs	r0, #0
    }
}
 800e64e:	4770      	bx	lr
 800e650:	0003d090 	.word	0x0003d090
 800e654:	0007a120 	.word	0x0007a120

0800e658 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 800e658:	b500      	push	{lr}
 800e65a:	b085      	sub	sp, #20
    if ( rxSlot < RX_SLOT_NONE )
 800e65c:	2805      	cmp	r0, #5
 800e65e:	d80e      	bhi.n	800e67e <RegionCommonRxConfigPrint+0x26>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 800e660:	9202      	str	r2, [sp, #8]
 800e662:	9101      	str	r1, [sp, #4]
 800e664:	4b0a      	ldr	r3, [pc, #40]	; (800e690 <RegionCommonRxConfigPrint+0x38>)
 800e666:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800e66a:	9300      	str	r3, [sp, #0]
 800e66c:	4b09      	ldr	r3, [pc, #36]	; (800e694 <RegionCommonRxConfigPrint+0x3c>)
 800e66e:	2201      	movs	r2, #1
 800e670:	2100      	movs	r1, #0
 800e672:	2002      	movs	r0, #2
 800e674:	f004 f9ea 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 800e678:	b005      	add	sp, #20
 800e67a:	f85d fb04 	ldr.w	pc, [sp], #4
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 800e67e:	9201      	str	r2, [sp, #4]
 800e680:	9100      	str	r1, [sp, #0]
 800e682:	4b05      	ldr	r3, [pc, #20]	; (800e698 <RegionCommonRxConfigPrint+0x40>)
 800e684:	2201      	movs	r2, #1
 800e686:	2100      	movs	r1, #0
 800e688:	2002      	movs	r0, #2
 800e68a:	f004 f9df 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
}
 800e68e:	e7f3      	b.n	800e678 <RegionCommonRxConfigPrint+0x20>
 800e690:	0801481c 	.word	0x0801481c
 800e694:	080147b4 	.word	0x080147b4
 800e698:	080147d4 	.word	0x080147d4

0800e69c <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 800e69c:	b500      	push	{lr}
 800e69e:	b083      	sub	sp, #12
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 800e6a0:	9101      	str	r1, [sp, #4]
 800e6a2:	9000      	str	r0, [sp, #0]
 800e6a4:	4b04      	ldr	r3, [pc, #16]	; (800e6b8 <RegionCommonTxConfigPrint+0x1c>)
 800e6a6:	2201      	movs	r2, #1
 800e6a8:	2100      	movs	r1, #0
 800e6aa:	2002      	movs	r0, #2
 800e6ac:	f004 f9ce 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
}
 800e6b0:	b003      	add	sp, #12
 800e6b2:	f85d fb04 	ldr.w	pc, [sp], #4
 800e6b6:	bf00      	nop
 800e6b8:	080147f0 	.word	0x080147f0

0800e6bc <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 800e6bc:	b538      	push	{r3, r4, r5, lr}
 800e6be:	4604      	mov	r4, r0
 800e6c0:	460d      	mov	r5, r1
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800e6c2:	4b1b      	ldr	r3, [pc, #108]	; (800e730 <VerifyRfFreq+0x74>)
 800e6c4:	6a1b      	ldr	r3, [r3, #32]
 800e6c6:	4798      	blx	r3
 800e6c8:	b130      	cbz	r0, 800e6d8 <VerifyRfFreq+0x1c>
    {
        return false;
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 800e6ca:	4b1a      	ldr	r3, [pc, #104]	; (800e734 <VerifyRfFreq+0x78>)
 800e6cc:	4423      	add	r3, r4
 800e6ce:	4a1a      	ldr	r2, [pc, #104]	; (800e738 <VerifyRfFreq+0x7c>)
 800e6d0:	4293      	cmp	r3, r2
 800e6d2:	d802      	bhi.n	800e6da <VerifyRfFreq+0x1e>
    {
        *band = 2;
 800e6d4:	2302      	movs	r3, #2
 800e6d6:	702b      	strb	r3, [r5, #0]
    else
    {
        return false;
    }
    return true;
}
 800e6d8:	bd38      	pop	{r3, r4, r5, pc}
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 800e6da:	4b18      	ldr	r3, [pc, #96]	; (800e73c <VerifyRfFreq+0x80>)
 800e6dc:	4423      	add	r3, r4
 800e6de:	4a18      	ldr	r2, [pc, #96]	; (800e740 <VerifyRfFreq+0x84>)
 800e6e0:	4293      	cmp	r3, r2
 800e6e2:	d802      	bhi.n	800e6ea <VerifyRfFreq+0x2e>
        *band = 0;
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	702b      	strb	r3, [r5, #0]
 800e6e8:	e7f6      	b.n	800e6d8 <VerifyRfFreq+0x1c>
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 800e6ea:	4b16      	ldr	r3, [pc, #88]	; (800e744 <VerifyRfFreq+0x88>)
 800e6ec:	4423      	add	r3, r4
 800e6ee:	4a16      	ldr	r2, [pc, #88]	; (800e748 <VerifyRfFreq+0x8c>)
 800e6f0:	4293      	cmp	r3, r2
 800e6f2:	d802      	bhi.n	800e6fa <VerifyRfFreq+0x3e>
        *band = 1;
 800e6f4:	2301      	movs	r3, #1
 800e6f6:	702b      	strb	r3, [r5, #0]
 800e6f8:	e7ee      	b.n	800e6d8 <VerifyRfFreq+0x1c>
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 800e6fa:	4b14      	ldr	r3, [pc, #80]	; (800e74c <VerifyRfFreq+0x90>)
 800e6fc:	4423      	add	r3, r4
 800e6fe:	4a14      	ldr	r2, [pc, #80]	; (800e750 <VerifyRfFreq+0x94>)
 800e700:	4293      	cmp	r3, r2
 800e702:	d802      	bhi.n	800e70a <VerifyRfFreq+0x4e>
        *band = 5;
 800e704:	2305      	movs	r3, #5
 800e706:	702b      	strb	r3, [r5, #0]
 800e708:	e7e6      	b.n	800e6d8 <VerifyRfFreq+0x1c>
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 800e70a:	4b12      	ldr	r3, [pc, #72]	; (800e754 <VerifyRfFreq+0x98>)
 800e70c:	4423      	add	r3, r4
 800e70e:	4a12      	ldr	r2, [pc, #72]	; (800e758 <VerifyRfFreq+0x9c>)
 800e710:	4293      	cmp	r3, r2
 800e712:	d802      	bhi.n	800e71a <VerifyRfFreq+0x5e>
        *band = 3;
 800e714:	2303      	movs	r3, #3
 800e716:	702b      	strb	r3, [r5, #0]
 800e718:	e7de      	b.n	800e6d8 <VerifyRfFreq+0x1c>
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 800e71a:	4b10      	ldr	r3, [pc, #64]	; (800e75c <VerifyRfFreq+0xa0>)
 800e71c:	4423      	add	r3, r4
 800e71e:	4a10      	ldr	r2, [pc, #64]	; (800e760 <VerifyRfFreq+0xa4>)
 800e720:	4293      	cmp	r3, r2
 800e722:	d802      	bhi.n	800e72a <VerifyRfFreq+0x6e>
        *band = 4;
 800e724:	2304      	movs	r3, #4
 800e726:	702b      	strb	r3, [r5, #0]
 800e728:	e7d6      	b.n	800e6d8 <VerifyRfFreq+0x1c>
        return false;
 800e72a:	2000      	movs	r0, #0
 800e72c:	e7d4      	b.n	800e6d8 <VerifyRfFreq+0x1c>
 800e72e:	bf00      	nop
 800e730:	08014e54 	.word	0x08014e54
 800e734:	cc8faa40 	.word	0xcc8faa40
 800e738:	001e847f 	.word	0x001e847f
 800e73c:	cc7125c0 	.word	0xcc7125c0
 800e740:	002dc6c0 	.word	0x002dc6c0
 800e744:	cc435eff 	.word	0xcc435eff
 800e748:	000927bf 	.word	0x000927bf
 800e74c:	cc38b0a0 	.word	0xcc38b0a0
 800e750:	0007a120 	.word	0x0007a120
 800e754:	cc2e0240 	.word	0xcc2e0240
 800e758:	0003d090 	.word	0x0003d090
 800e75c:	cc296e60 	.word	0xcc296e60
 800e760:	000493e0 	.word	0x000493e0

0800e764 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800e764:	b570      	push	{r4, r5, r6, lr}
 800e766:	b084      	sub	sp, #16
 800e768:	4605      	mov	r5, r0
 800e76a:	460c      	mov	r4, r1
    int8_t phyDr = DataratesEU868[datarate];
 800e76c:	4b13      	ldr	r3, [pc, #76]	; (800e7bc <GetTimeOnAir+0x58>)
 800e76e:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 800e770:	4913      	ldr	r1, [pc, #76]	; (800e7c0 <GetTimeOnAir+0x5c>)
 800e772:	f7ff ff5f 	bl	800e634 <RegionCommonGetBandwidth>
 800e776:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 800e778:	2d07      	cmp	r5, #7
 800e77a:	d00e      	beq.n	800e79a <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800e77c:	4b11      	ldr	r3, [pc, #68]	; (800e7c4 <GetTimeOnAir+0x60>)
 800e77e:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800e780:	2001      	movs	r0, #1
 800e782:	9003      	str	r0, [sp, #12]
 800e784:	b2e4      	uxtb	r4, r4
 800e786:	9402      	str	r4, [sp, #8]
 800e788:	2300      	movs	r3, #0
 800e78a:	9301      	str	r3, [sp, #4]
 800e78c:	2308      	movs	r3, #8
 800e78e:	9300      	str	r3, [sp, #0]
 800e790:	4603      	mov	r3, r0
 800e792:	4632      	mov	r2, r6
 800e794:	47a8      	blx	r5
    }
    return timeOnAir;
}
 800e796:	b004      	add	sp, #16
 800e798:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800e79a:	4b0a      	ldr	r3, [pc, #40]	; (800e7c4 <GetTimeOnAir+0x60>)
 800e79c:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800e79e:	2301      	movs	r3, #1
 800e7a0:	9303      	str	r3, [sp, #12]
 800e7a2:	b2e4      	uxtb	r4, r4
 800e7a4:	9402      	str	r4, [sp, #8]
 800e7a6:	2000      	movs	r0, #0
 800e7a8:	9001      	str	r0, [sp, #4]
 800e7aa:	2305      	movs	r3, #5
 800e7ac:	9300      	str	r3, [sp, #0]
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e7b4:	fb06 f202 	mul.w	r2, r6, r2
 800e7b8:	47a8      	blx	r5
 800e7ba:	e7ec      	b.n	800e796 <GetTimeOnAir+0x32>
 800e7bc:	08014854 	.word	0x08014854
 800e7c0:	08014834 	.word	0x08014834
 800e7c4:	08014e54 	.word	0x08014e54

0800e7c8 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 800e7c8:	b500      	push	{lr}
 800e7ca:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	9304      	str	r3, [sp, #16]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 800e7d0:	7803      	ldrb	r3, [r0, #0]
 800e7d2:	3b0b      	subs	r3, #11
 800e7d4:	2b2d      	cmp	r3, #45	; 0x2d
 800e7d6:	d82f      	bhi.n	800e838 <RegionEU868GetPhyParam+0x70>
 800e7d8:	e8df f003 	tbb	[pc, r3]
 800e7dc:	3f393633 	.word	0x3f393633
 800e7e0:	504c4845 	.word	0x504c4845
 800e7e4:	2e5c5854 	.word	0x2e5c5854
 800e7e8:	6e682e65 	.word	0x6e682e65
 800e7ec:	2e2e7774 	.word	0x2e2e7774
 800e7f0:	2e177f7b 	.word	0x2e177f7b
 800e7f4:	2e2e2e2e 	.word	0x2e2e2e2e
 800e7f8:	2e2e2e2e 	.word	0x2e2e2e2e
 800e7fc:	2e2e2e2e 	.word	0x2e2e2e2e
 800e800:	2e8c8582 	.word	0x2e8c8582
 800e804:	2e928f2e 	.word	0x2e928f2e
 800e808:	9b95      	.short	0x9b95
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 800e80a:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800e80e:	f88d 3004 	strb.w	r3, [sp, #4]
 800e812:	2307      	movs	r3, #7
 800e814:	f88d 3005 	strb.w	r3, [sp, #5]
 800e818:	2300      	movs	r3, #0
 800e81a:	f88d 3006 	strb.w	r3, [sp, #6]
 800e81e:	2310      	movs	r3, #16
 800e820:	f88d 3007 	strb.w	r3, [sp, #7]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800e824:	4b3e      	ldr	r3, [pc, #248]	; (800e920 <RegionEU868GetPhyParam+0x158>)
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800e82c:	9202      	str	r2, [sp, #8]
 800e82e:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800e830:	a801      	add	r0, sp, #4
 800e832:	f7ff fedb 	bl	800e5ec <RegionCommonGetNextLowerTxDr>
 800e836:	9004      	str	r0, [sp, #16]
            break;
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 800e838:	9804      	ldr	r0, [sp, #16]
 800e83a:	9005      	str	r0, [sp, #20]
}
 800e83c:	b007      	add	sp, #28
 800e83e:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800e842:	2340      	movs	r3, #64	; 0x40
 800e844:	9304      	str	r3, [sp, #16]
            break;
 800e846:	e7f7      	b.n	800e838 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800e848:	2320      	movs	r3, #32
 800e84a:	9304      	str	r3, [sp, #16]
            break;
 800e84c:	e7f4      	b.n	800e838 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 800e84e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e852:	4a34      	ldr	r2, [pc, #208]	; (800e924 <RegionEU868GetPhyParam+0x15c>)
 800e854:	5cd3      	ldrb	r3, [r2, r3]
 800e856:	9304      	str	r3, [sp, #16]
            break;
 800e858:	e7ee      	b.n	800e838 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 800e85a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e85e:	4a32      	ldr	r2, [pc, #200]	; (800e928 <RegionEU868GetPhyParam+0x160>)
 800e860:	5cd3      	ldrb	r3, [r2, r3]
 800e862:	9304      	str	r3, [sp, #16]
            break;
 800e864:	e7e8      	b.n	800e838 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 800e866:	2301      	movs	r3, #1
 800e868:	9304      	str	r3, [sp, #16]
            break;
 800e86a:	e7e5      	b.n	800e838 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_MAX_RX_WINDOW;
 800e86c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800e870:	9304      	str	r3, [sp, #16]
            break;
 800e872:	e7e1      	b.n	800e838 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800e874:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e878:	9304      	str	r3, [sp, #16]
            break;
 800e87a:	e7dd      	b.n	800e838 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800e87c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800e880:	9304      	str	r3, [sp, #16]
            break;
 800e882:	e7d9      	b.n	800e838 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800e884:	f241 3388 	movw	r3, #5000	; 0x1388
 800e888:	9304      	str	r3, [sp, #16]
            break;
 800e88a:	e7d5      	b.n	800e838 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800e88c:	f241 7370 	movw	r3, #6000	; 0x1770
 800e890:	9304      	str	r3, [sp, #16]
            break;
 800e892:	e7d1      	b.n	800e838 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 800e894:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800e898:	4824      	ldr	r0, [pc, #144]	; (800e92c <RegionEU868GetPhyParam+0x164>)
 800e89a:	f002 fa21 	bl	8010ce0 <randr>
 800e89e:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800e8a2:	9004      	str	r0, [sp, #16]
            break;
 800e8a4:	e7c8      	b.n	800e838 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_RX_WND_2_FREQ;
 800e8a6:	4b22      	ldr	r3, [pc, #136]	; (800e930 <RegionEU868GetPhyParam+0x168>)
 800e8a8:	9304      	str	r3, [sp, #16]
            break;
 800e8aa:	e7c5      	b.n	800e838 <RegionEU868GetPhyParam+0x70>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800e8ac:	4b1c      	ldr	r3, [pc, #112]	; (800e920 <RegionEU868GetPhyParam+0x158>)
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800e8b4:	9304      	str	r3, [sp, #16]
            break;
 800e8b6:	e7bf      	b.n	800e838 <RegionEU868GetPhyParam+0x70>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800e8b8:	4b19      	ldr	r3, [pc, #100]	; (800e920 <RegionEU868GetPhyParam+0x158>)
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 800e8c0:	9304      	str	r3, [sp, #16]
            break;
 800e8c2:	e7b9      	b.n	800e838 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 800e8c4:	2310      	movs	r3, #16
 800e8c6:	9304      	str	r3, [sp, #16]
            break;
 800e8c8:	e7b6      	b.n	800e838 <RegionEU868GetPhyParam+0x70>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800e8ca:	4b15      	ldr	r3, [pc, #84]	; (800e920 <RegionEU868GetPhyParam+0x158>)
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	9304      	str	r3, [sp, #16]
            break;
 800e8d0:	e7b2      	b.n	800e838 <RegionEU868GetPhyParam+0x70>
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 800e8d2:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 800e8d6:	9304      	str	r3, [sp, #16]
            break;
 800e8d8:	e7ae      	b.n	800e838 <RegionEU868GetPhyParam+0x70>
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 800e8da:	4b16      	ldr	r3, [pc, #88]	; (800e934 <RegionEU868GetPhyParam+0x16c>)
 800e8dc:	9304      	str	r3, [sp, #16]
            break;
 800e8de:	e7ab      	b.n	800e838 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 800e8e0:	4b13      	ldr	r3, [pc, #76]	; (800e930 <RegionEU868GetPhyParam+0x168>)
 800e8e2:	9304      	str	r3, [sp, #16]
            break;
 800e8e4:	e7a8      	b.n	800e838 <RegionEU868GetPhyParam+0x70>
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 800e8e6:	2311      	movs	r3, #17
 800e8e8:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 800e8ec:	2301      	movs	r3, #1
 800e8ee:	f88d 3011 	strb.w	r3, [sp, #17]
            break;
 800e8f2:	e7a1      	b.n	800e838 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 800e8f4:	2303      	movs	r3, #3
 800e8f6:	9304      	str	r3, [sp, #16]
            break;
 800e8f8:	e79e      	b.n	800e838 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 800e8fa:	4b0d      	ldr	r3, [pc, #52]	; (800e930 <RegionEU868GetPhyParam+0x168>)
 800e8fc:	9304      	str	r3, [sp, #16]
            break;
 800e8fe:	e79b      	b.n	800e838 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 800e900:	2303      	movs	r3, #3
 800e902:	9304      	str	r3, [sp, #16]
            break;
 800e904:	e798      	b.n	800e838 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 800e906:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e90a:	4a0b      	ldr	r2, [pc, #44]	; (800e938 <RegionEU868GetPhyParam+0x170>)
 800e90c:	5cd3      	ldrb	r3, [r2, r3]
 800e90e:	9304      	str	r3, [sp, #16]
            break;
 800e910:	e792      	b.n	800e838 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 800e912:	490a      	ldr	r1, [pc, #40]	; (800e93c <RegionEU868GetPhyParam+0x174>)
 800e914:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800e918:	f7ff fe8c 	bl	800e634 <RegionCommonGetBandwidth>
 800e91c:	9004      	str	r0, [sp, #16]
            break;
 800e91e:	e78b      	b.n	800e838 <RegionEU868GetPhyParam+0x70>
 800e920:	20001014 	.word	0x20001014
 800e924:	0801485c 	.word	0x0801485c
 800e928:	08014864 	.word	0x08014864
 800e92c:	fffffc18 	.word	0xfffffc18
 800e930:	33d3e608 	.word	0x33d3e608
 800e934:	4009999a 	.word	0x4009999a
 800e938:	08014854 	.word	0x08014854
 800e93c:	08014834 	.word	0x08014834

0800e940 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800e940:	b510      	push	{r4, lr}
 800e942:	b082      	sub	sp, #8
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800e944:	4b0b      	ldr	r3, [pc, #44]	; (800e974 <RegionEU868SetBandTxDone+0x34>)
 800e946:	681a      	ldr	r2, [r3, #0]
 800e948:	7803      	ldrb	r3, [r0, #0]
 800e94a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e94e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e952:	7a5b      	ldrb	r3, [r3, #9]
 800e954:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800e958:	4b07      	ldr	r3, [pc, #28]	; (800e978 <RegionEU868SetBandTxDone+0x38>)
 800e95a:	681c      	ldr	r4, [r3, #0]
 800e95c:	6903      	ldr	r3, [r0, #16]
 800e95e:	9300      	str	r3, [sp, #0]
 800e960:	68c3      	ldr	r3, [r0, #12]
 800e962:	7842      	ldrb	r2, [r0, #1]
 800e964:	6881      	ldr	r1, [r0, #8]
 800e966:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 800e96a:	f7ff fc18 	bl	800e19e <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 800e96e:	b002      	add	sp, #8
 800e970:	bd10      	pop	{r4, pc}
 800e972:	bf00      	nop
 800e974:	20001014 	.word	0x20001014
 800e978:	20001010 	.word	0x20001010

0800e97c <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 800e97c:	b530      	push	{r4, r5, lr}
 800e97e:	b0a5      	sub	sp, #148	; 0x94
 800e980:	4604      	mov	r4, r0
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 800e982:	2290      	movs	r2, #144	; 0x90
 800e984:	2100      	movs	r1, #0
 800e986:	4668      	mov	r0, sp
 800e988:	f004 fe5c 	bl	8013644 <memset>
 800e98c:	2364      	movs	r3, #100	; 0x64
 800e98e:	f8ad 3000 	strh.w	r3, [sp]
 800e992:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e996:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e99a:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 800e99e:	210a      	movs	r1, #10
 800e9a0:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
 800e9a4:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 800e9a8:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 800e9ac:	7b23      	ldrb	r3, [r4, #12]
 800e9ae:	2b01      	cmp	r3, #1
 800e9b0:	d032      	beq.n	800ea18 <RegionEU868InitDefaults+0x9c>
 800e9b2:	2b02      	cmp	r3, #2
 800e9b4:	d03e      	beq.n	800ea34 <RegionEU868InitDefaults+0xb8>
 800e9b6:	b10b      	cbz	r3, 800e9bc <RegionEU868InitDefaults+0x40>
        {
            break;
        }
    }
#endif /* REGION_EU868 */
}
 800e9b8:	b025      	add	sp, #148	; 0x94
 800e9ba:	bd30      	pop	{r4, r5, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800e9bc:	6823      	ldr	r3, [r4, #0]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d0fa      	beq.n	800e9b8 <RegionEU868InitDefaults+0x3c>
 800e9c2:	6863      	ldr	r3, [r4, #4]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d0f7      	beq.n	800e9b8 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800e9c8:	4d1f      	ldr	r5, [pc, #124]	; (800ea48 <RegionEU868InitDefaults+0xcc>)
 800e9ca:	602b      	str	r3, [r5, #0]
            RegionBands = (Band_t*) params->Bands;
 800e9cc:	68a0      	ldr	r0, [r4, #8]
 800e9ce:	4b1f      	ldr	r3, [pc, #124]	; (800ea4c <RegionEU868InitDefaults+0xd0>)
 800e9d0:	6018      	str	r0, [r3, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 800e9d2:	2290      	movs	r2, #144	; 0x90
 800e9d4:	4669      	mov	r1, sp
 800e9d6:	f002 f990 	bl	8010cfa <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 800e9da:	682c      	ldr	r4, [r5, #0]
 800e9dc:	4b1c      	ldr	r3, [pc, #112]	; (800ea50 <RegionEU868InitDefaults+0xd4>)
 800e9de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e9e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 800e9e6:	f104 0c0c 	add.w	ip, r4, #12
 800e9ea:	f103 020c 	add.w	r2, r3, #12
 800e9ee:	ca07      	ldmia	r2, {r0, r1, r2}
 800e9f0:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 800e9f4:	f104 0c18 	add.w	ip, r4, #24
 800e9f8:	3318      	adds	r3, #24
 800e9fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e9fe:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800ea02:	2307      	movs	r3, #7
 800ea04:	f8a4 336c 	strh.w	r3, [r4, #876]	; 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800ea08:	2201      	movs	r2, #1
 800ea0a:	f504 715b 	add.w	r1, r4, #876	; 0x36c
 800ea0e:	f504 7058 	add.w	r0, r4, #864	; 0x360
 800ea12:	f7ff fbb5 	bl	800e180 <RegionCommonChanMaskCopy>
            break;
 800ea16:	e7cf      	b.n	800e9b8 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 800ea18:	4b0b      	ldr	r3, [pc, #44]	; (800ea48 <RegionEU868InitDefaults+0xcc>)
 800ea1a:	6818      	ldr	r0, [r3, #0]
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 800ea20:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 800ea22:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800ea24:	2201      	movs	r2, #1
 800ea26:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 800ea2a:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800ea2e:	f7ff fba7 	bl	800e180 <RegionCommonChanMaskCopy>
            break;
 800ea32:	e7c1      	b.n	800e9b8 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 800ea34:	4b04      	ldr	r3, [pc, #16]	; (800ea48 <RegionEU868InitDefaults+0xcc>)
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	f8b3 236c 	ldrh.w	r2, [r3, #876]	; 0x36c
 800ea3c:	f8b3 1360 	ldrh.w	r1, [r3, #864]	; 0x360
 800ea40:	430a      	orrs	r2, r1
 800ea42:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
            break;
 800ea46:	e7b7      	b.n	800e9b8 <RegionEU868InitDefaults+0x3c>
 800ea48:	20001014 	.word	0x20001014
 800ea4c:	20001010 	.word	0x20001010
 800ea50:	080140f8 	.word	0x080140f8

0800ea54 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800ea54:	b500      	push	{lr}
 800ea56:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    switch( phyAttribute )
 800ea58:	290f      	cmp	r1, #15
 800ea5a:	d83c      	bhi.n	800ead6 <RegionEU868Verify+0x82>
 800ea5c:	e8df f001 	tbb	[pc, r1]
 800ea60:	3b3b3b0a 	.word	0x3b3b3b0a
 800ea64:	271d133b 	.word	0x271d133b
 800ea68:	3b31313b 	.word	0x3b31313b
 800ea6c:	083b3b3b 	.word	0x083b3b3b
 800ea70:	2001      	movs	r0, #1
 800ea72:	e031      	b.n	800ead8 <RegionEU868Verify+0x84>
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 800ea74:	2300      	movs	r3, #0
 800ea76:	f88d 3007 	strb.w	r3, [sp, #7]
            return VerifyRfFreq( verify->Frequency, &band );
 800ea7a:	f10d 0107 	add.w	r1, sp, #7
 800ea7e:	6800      	ldr	r0, [r0, #0]
 800ea80:	f7ff fe1c 	bl	800e6bc <VerifyRfFreq>
 800ea84:	e028      	b.n	800ead8 <RegionEU868Verify+0x84>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 800ea86:	2207      	movs	r2, #7
 800ea88:	2100      	movs	r1, #0
 800ea8a:	f990 0000 	ldrsb.w	r0, [r0]
 800ea8e:	f7ff fb06 	bl	800e09e <RegionCommonValueInRange>
 800ea92:	3800      	subs	r0, #0
 800ea94:	bf18      	it	ne
 800ea96:	2001      	movne	r0, #1
 800ea98:	e01e      	b.n	800ead8 <RegionEU868Verify+0x84>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800ea9a:	2205      	movs	r2, #5
 800ea9c:	2100      	movs	r1, #0
 800ea9e:	f990 0000 	ldrsb.w	r0, [r0]
 800eaa2:	f7ff fafc 	bl	800e09e <RegionCommonValueInRange>
 800eaa6:	3800      	subs	r0, #0
 800eaa8:	bf18      	it	ne
 800eaaa:	2001      	movne	r0, #1
 800eaac:	e014      	b.n	800ead8 <RegionEU868Verify+0x84>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 800eaae:	2207      	movs	r2, #7
 800eab0:	2100      	movs	r1, #0
 800eab2:	f990 0000 	ldrsb.w	r0, [r0]
 800eab6:	f7ff faf2 	bl	800e09e <RegionCommonValueInRange>
 800eaba:	3800      	subs	r0, #0
 800eabc:	bf18      	it	ne
 800eabe:	2001      	movne	r0, #1
 800eac0:	e00a      	b.n	800ead8 <RegionEU868Verify+0x84>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 800eac2:	2207      	movs	r2, #7
 800eac4:	2100      	movs	r1, #0
 800eac6:	f990 0000 	ldrsb.w	r0, [r0]
 800eaca:	f7ff fae8 	bl	800e09e <RegionCommonValueInRange>
 800eace:	3800      	subs	r0, #0
 800ead0:	bf18      	it	ne
 800ead2:	2001      	movne	r0, #1
 800ead4:	e000      	b.n	800ead8 <RegionEU868Verify+0x84>
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
 800ead6:	2000      	movs	r0, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 800ead8:	b003      	add	sp, #12
 800eada:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800eae0 <RegionEU868ChanMaskSet>:
    }
#endif /* REGION_EU868 */
}

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800eae0:	b508      	push	{r3, lr}
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 800eae2:	7903      	ldrb	r3, [r0, #4]
 800eae4:	b11b      	cbz	r3, 800eaee <RegionEU868ChanMaskSet+0xe>
 800eae6:	2b01      	cmp	r3, #1
 800eae8:	d00b      	beq.n	800eb02 <RegionEU868ChanMaskSet+0x22>
 800eaea:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 800eaec:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800eaee:	4b0a      	ldr	r3, [pc, #40]	; (800eb18 <RegionEU868ChanMaskSet+0x38>)
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	2201      	movs	r2, #1
 800eaf4:	6801      	ldr	r1, [r0, #0]
 800eaf6:	f503 7058 	add.w	r0, r3, #864	; 0x360
 800eafa:	f7ff fb41 	bl	800e180 <RegionCommonChanMaskCopy>
    return true;
 800eafe:	2001      	movs	r0, #1
            break;
 800eb00:	e7f4      	b.n	800eaec <RegionEU868ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800eb02:	4b05      	ldr	r3, [pc, #20]	; (800eb18 <RegionEU868ChanMaskSet+0x38>)
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	2201      	movs	r2, #1
 800eb08:	6801      	ldr	r1, [r0, #0]
 800eb0a:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 800eb0e:	f7ff fb37 	bl	800e180 <RegionCommonChanMaskCopy>
    return true;
 800eb12:	2001      	movs	r0, #1
            break;
 800eb14:	e7ea      	b.n	800eaec <RegionEU868ChanMaskSet+0xc>
 800eb16:	bf00      	nop
 800eb18:	20001014 	.word	0x20001014

0800eb1c <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800eb1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb1e:	b083      	sub	sp, #12
 800eb20:	460e      	mov	r6, r1
 800eb22:	4617      	mov	r7, r2
 800eb24:	461c      	mov	r4, r3
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 800eb26:	2807      	cmp	r0, #7
 800eb28:	bfa8      	it	ge
 800eb2a:	2007      	movge	r0, #7
 800eb2c:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 800eb2e:	4913      	ldr	r1, [pc, #76]	; (800eb7c <RegionEU868ComputeRxWindowParameters+0x60>)
 800eb30:	f7ff fd80 	bl	800e634 <RegionCommonGetBandwidth>
 800eb34:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 800eb36:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800eb3a:	2b07      	cmp	r3, #7
 800eb3c:	d017      	beq.n	800eb6e <RegionEU868ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 800eb3e:	4a0f      	ldr	r2, [pc, #60]	; (800eb7c <RegionEU868ComputeRxWindowParameters+0x60>)
 800eb40:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800eb44:	4a0e      	ldr	r2, [pc, #56]	; (800eb80 <RegionEU868ComputeRxWindowParameters+0x64>)
 800eb46:	5cd0      	ldrb	r0, [r2, r3]
 800eb48:	f7ff fc40 	bl	800e3cc <RegionCommonComputeSymbolTimeLoRa>
 800eb4c:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800eb4e:	4b0d      	ldr	r3, [pc, #52]	; (800eb84 <RegionEU868ComputeRxWindowParameters+0x68>)
 800eb50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eb52:	4798      	blx	r3
 800eb54:	4603      	mov	r3, r0
 800eb56:	f104 020c 	add.w	r2, r4, #12
 800eb5a:	9201      	str	r2, [sp, #4]
 800eb5c:	3408      	adds	r4, #8
 800eb5e:	9400      	str	r4, [sp, #0]
 800eb60:	463a      	mov	r2, r7
 800eb62:	4631      	mov	r1, r6
 800eb64:	4628      	mov	r0, r5
 800eb66:	f7ff fc3f 	bl	800e3e8 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 800eb6a:	b003      	add	sp, #12
 800eb6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 800eb6e:	4a04      	ldr	r2, [pc, #16]	; (800eb80 <RegionEU868ComputeRxWindowParameters+0x64>)
 800eb70:	5cd0      	ldrb	r0, [r2, r3]
 800eb72:	f7ff fc33 	bl	800e3dc <RegionCommonComputeSymbolTimeFsk>
 800eb76:	4605      	mov	r5, r0
 800eb78:	e7e9      	b.n	800eb4e <RegionEU868ComputeRxWindowParameters+0x32>
 800eb7a:	bf00      	nop
 800eb7c:	08014834 	.word	0x08014834
 800eb80:	08014854 	.word	0x08014854
 800eb84:	08014e54 	.word	0x08014e54

0800eb88 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800eb88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb8c:	b08a      	sub	sp, #40	; 0x28
 800eb8e:	4604      	mov	r4, r0
 800eb90:	460f      	mov	r7, r1
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800eb92:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800eb96:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800eb9a:	4b37      	ldr	r3, [pc, #220]	; (800ec78 <RegionEU868RxConfig+0xf0>)
 800eb9c:	685b      	ldr	r3, [r3, #4]
 800eb9e:	4798      	blx	r3
 800eba0:	2800      	cmp	r0, #0
 800eba2:	d167      	bne.n	800ec74 <RegionEU868RxConfig+0xec>
 800eba4:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800eba6:	7ce3      	ldrb	r3, [r4, #19]
 800eba8:	b983      	cbnz	r3, 800ebcc <RegionEU868RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800ebaa:	4b34      	ldr	r3, [pc, #208]	; (800ec7c <RegionEU868RxConfig+0xf4>)
 800ebac:	681a      	ldr	r2, [r3, #0]
 800ebae:	7823      	ldrb	r3, [r4, #0]
 800ebb0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800ebb4:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800ebb8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ebbc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ebc0:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800ebc4:	f1b8 0f00 	cmp.w	r8, #0
 800ebc8:	d100      	bne.n	800ebcc <RegionEU868RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800ebca:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 800ebcc:	4b2c      	ldr	r3, [pc, #176]	; (800ec80 <RegionEU868RxConfig+0xf8>)
 800ebce:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 800ebd2:	4b29      	ldr	r3, [pc, #164]	; (800ec78 <RegionEU868RxConfig+0xf0>)
 800ebd4:	68db      	ldr	r3, [r3, #12]
 800ebd6:	4640      	mov	r0, r8
 800ebd8:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 800ebda:	2d07      	cmp	r5, #7
 800ebdc:	d02b      	beq.n	800ec36 <RegionEU868RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800ebde:	4b26      	ldr	r3, [pc, #152]	; (800ec78 <RegionEU868RxConfig+0xf0>)
 800ebe0:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800ebe4:	7ca3      	ldrb	r3, [r4, #18]
 800ebe6:	9309      	str	r3, [sp, #36]	; 0x24
 800ebe8:	2601      	movs	r6, #1
 800ebea:	9608      	str	r6, [sp, #32]
 800ebec:	2300      	movs	r3, #0
 800ebee:	9307      	str	r3, [sp, #28]
 800ebf0:	9306      	str	r3, [sp, #24]
 800ebf2:	9305      	str	r3, [sp, #20]
 800ebf4:	9304      	str	r3, [sp, #16]
 800ebf6:	9303      	str	r3, [sp, #12]
 800ebf8:	8922      	ldrh	r2, [r4, #8]
 800ebfa:	9202      	str	r2, [sp, #8]
 800ebfc:	2208      	movs	r2, #8
 800ebfe:	9201      	str	r2, [sp, #4]
 800ec00:	9300      	str	r3, [sp, #0]
 800ec02:	4633      	mov	r3, r6
 800ec04:	464a      	mov	r2, r9
 800ec06:	78a1      	ldrb	r1, [r4, #2]
 800ec08:	4630      	mov	r0, r6
 800ec0a:	47d0      	blx	sl
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 800ec0c:	7c63      	ldrb	r3, [r4, #17]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d02d      	beq.n	800ec6e <RegionEU868RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 800ec12:	4b1c      	ldr	r3, [pc, #112]	; (800ec84 <RegionEU868RxConfig+0xfc>)
 800ec14:	5d59      	ldrb	r1, [r3, r5]
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800ec16:	4b18      	ldr	r3, [pc, #96]	; (800ec78 <RegionEU868RxConfig+0xf0>)
 800ec18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec1a:	310d      	adds	r1, #13
 800ec1c:	b2c9      	uxtb	r1, r1
 800ec1e:	4630      	mov	r0, r6
 800ec20:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800ec22:	462a      	mov	r2, r5
 800ec24:	4641      	mov	r1, r8
 800ec26:	7ce0      	ldrb	r0, [r4, #19]
 800ec28:	f7ff fd16 	bl	800e658 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 800ec2c:	703d      	strb	r5, [r7, #0]
    return true;
 800ec2e:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 800ec30:	b00a      	add	sp, #40	; 0x28
 800ec32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800ec36:	4b10      	ldr	r3, [pc, #64]	; (800ec78 <RegionEU868RxConfig+0xf0>)
 800ec38:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800ec3c:	7ca3      	ldrb	r3, [r4, #18]
 800ec3e:	9309      	str	r3, [sp, #36]	; 0x24
 800ec40:	2000      	movs	r0, #0
 800ec42:	9008      	str	r0, [sp, #32]
 800ec44:	9007      	str	r0, [sp, #28]
 800ec46:	9006      	str	r0, [sp, #24]
 800ec48:	2301      	movs	r3, #1
 800ec4a:	9305      	str	r3, [sp, #20]
 800ec4c:	9004      	str	r0, [sp, #16]
 800ec4e:	9003      	str	r0, [sp, #12]
 800ec50:	8923      	ldrh	r3, [r4, #8]
 800ec52:	9302      	str	r3, [sp, #8]
 800ec54:	2305      	movs	r3, #5
 800ec56:	9301      	str	r3, [sp, #4]
 800ec58:	4b0b      	ldr	r3, [pc, #44]	; (800ec88 <RegionEU868RxConfig+0x100>)
 800ec5a:	9300      	str	r3, [sp, #0]
 800ec5c:	4603      	mov	r3, r0
 800ec5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ec62:	fb02 f209 	mul.w	r2, r2, r9
 800ec66:	f24c 3150 	movw	r1, #50000	; 0xc350
 800ec6a:	47d0      	blx	sl
 800ec6c:	e7ce      	b.n	800ec0c <RegionEU868RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 800ec6e:	4b07      	ldr	r3, [pc, #28]	; (800ec8c <RegionEU868RxConfig+0x104>)
 800ec70:	5d59      	ldrb	r1, [r3, r5]
 800ec72:	e7d0      	b.n	800ec16 <RegionEU868RxConfig+0x8e>
        return false;
 800ec74:	2000      	movs	r0, #0
 800ec76:	e7db      	b.n	800ec30 <RegionEU868RxConfig+0xa8>
 800ec78:	08014e54 	.word	0x08014e54
 800ec7c:	20001014 	.word	0x20001014
 800ec80:	08014854 	.word	0x08014854
 800ec84:	08014864 	.word	0x08014864
 800ec88:	00014585 	.word	0x00014585
 800ec8c:	0801485c 	.word	0x0801485c

0800ec90 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800ec90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec94:	b08d      	sub	sp, #52	; 0x34
 800ec96:	4604      	mov	r4, r0
 800ec98:	460f      	mov	r7, r1
 800ec9a:	4690      	mov	r8, r2
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800ec9c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800eca0:	4a42      	ldr	r2, [pc, #264]	; (800edac <RegionEU868TxConfig+0x11c>)
 800eca2:	f912 a003 	ldrsb.w	sl, [r2, r3]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800eca6:	4d42      	ldr	r5, [pc, #264]	; (800edb0 <RegionEU868TxConfig+0x120>)
 800eca8:	682a      	ldr	r2, [r5, #0]
 800ecaa:	7803      	ldrb	r3, [r0, #0]
 800ecac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ecb0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ecb4:	7a5b      	ldrb	r3, [r3, #9]
 800ecb6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ecba:	4a3e      	ldr	r2, [pc, #248]	; (800edb4 <RegionEU868TxConfig+0x124>)
 800ecbc:	6812      	ldr	r2, [r2, #0]
 800ecbe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ecc2:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800ecc6:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800ecca:	f7ff fcae 	bl	800e62a <RegionCommonLimitTxPower>
 800ecce:	4606      	mov	r6, r0
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 800ecd0:	4939      	ldr	r1, [pc, #228]	; (800edb8 <RegionEU868TxConfig+0x128>)
 800ecd2:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800ecd6:	f7ff fcad 	bl	800e634 <RegionCommonGetBandwidth>
 800ecda:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800ecdc:	68a2      	ldr	r2, [r4, #8]
 800ecde:	6861      	ldr	r1, [r4, #4]
 800ece0:	4630      	mov	r0, r6
 800ece2:	f7ff fbbd 	bl	800e460 <RegionCommonComputeTxPower>
 800ece6:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800ece8:	4b34      	ldr	r3, [pc, #208]	; (800edbc <RegionEU868TxConfig+0x12c>)
 800ecea:	68da      	ldr	r2, [r3, #12]
 800ecec:	6829      	ldr	r1, [r5, #0]
 800ecee:	7823      	ldrb	r3, [r4, #0]
 800ecf0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ecf4:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800ecf8:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 800ecfa:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800ecfe:	2b07      	cmp	r3, #7
 800ed00:	d031      	beq.n	800ed66 <RegionEU868TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800ed02:	4b2e      	ldr	r3, [pc, #184]	; (800edbc <RegionEU868TxConfig+0x12c>)
 800ed04:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 800ed08:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800ed0c:	9308      	str	r3, [sp, #32]
 800ed0e:	2200      	movs	r2, #0
 800ed10:	9207      	str	r2, [sp, #28]
 800ed12:	9206      	str	r2, [sp, #24]
 800ed14:	9205      	str	r2, [sp, #20]
 800ed16:	2501      	movs	r5, #1
 800ed18:	9504      	str	r5, [sp, #16]
 800ed1a:	9203      	str	r2, [sp, #12]
 800ed1c:	2308      	movs	r3, #8
 800ed1e:	9302      	str	r3, [sp, #8]
 800ed20:	9501      	str	r5, [sp, #4]
 800ed22:	f8cd a000 	str.w	sl, [sp]
 800ed26:	464b      	mov	r3, r9
 800ed28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ed2a:	4628      	mov	r0, r5
 800ed2c:	47d8      	blx	fp
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800ed2e:	4b20      	ldr	r3, [pc, #128]	; (800edb0 <RegionEU868TxConfig+0x120>)
 800ed30:	681a      	ldr	r2, [r3, #0]
 800ed32:	7823      	ldrb	r3, [r4, #0]
 800ed34:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ed38:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800ed3c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ed40:	f7ff fcac 	bl	800e69c <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800ed44:	89a1      	ldrh	r1, [r4, #12]
 800ed46:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800ed4a:	f7ff fd0b 	bl	800e764 <GetTimeOnAir>
 800ed4e:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800ed52:	4b1a      	ldr	r3, [pc, #104]	; (800edbc <RegionEU868TxConfig+0x12c>)
 800ed54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed56:	7b21      	ldrb	r1, [r4, #12]
 800ed58:	4628      	mov	r0, r5
 800ed5a:	4798      	blx	r3

    *txPower = txPowerLimited;
 800ed5c:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 800ed5e:	2001      	movs	r0, #1
 800ed60:	b00d      	add	sp, #52	; 0x34
 800ed62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800ed66:	4b15      	ldr	r3, [pc, #84]	; (800edbc <RegionEU868TxConfig+0x12c>)
 800ed68:	69dd      	ldr	r5, [r3, #28]
 800ed6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ed6e:	fb03 f30a 	mul.w	r3, r3, sl
 800ed72:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800ed76:	9208      	str	r2, [sp, #32]
 800ed78:	f04f 0b00 	mov.w	fp, #0
 800ed7c:	f8cd b01c 	str.w	fp, [sp, #28]
 800ed80:	f8cd b018 	str.w	fp, [sp, #24]
 800ed84:	f8cd b014 	str.w	fp, [sp, #20]
 800ed88:	2201      	movs	r2, #1
 800ed8a:	9204      	str	r2, [sp, #16]
 800ed8c:	f8cd b00c 	str.w	fp, [sp, #12]
 800ed90:	2205      	movs	r2, #5
 800ed92:	9202      	str	r2, [sp, #8]
 800ed94:	f8cd b004 	str.w	fp, [sp, #4]
 800ed98:	9300      	str	r3, [sp, #0]
 800ed9a:	464b      	mov	r3, r9
 800ed9c:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800eda0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800eda2:	4658      	mov	r0, fp
 800eda4:	47a8      	blx	r5
        modem = MODEM_FSK;
 800eda6:	465d      	mov	r5, fp
 800eda8:	e7c1      	b.n	800ed2e <RegionEU868TxConfig+0x9e>
 800edaa:	bf00      	nop
 800edac:	08014854 	.word	0x08014854
 800edb0:	20001014 	.word	0x20001014
 800edb4:	20001010 	.word	0x20001010
 800edb8:	08014834 	.word	0x08014834
 800edbc:	08014e54 	.word	0x08014e54

0800edc0 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800edc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800edc4:	b08f      	sub	sp, #60	; 0x3c
 800edc6:	4605      	mov	r5, r0
 800edc8:	4689      	mov	r9, r1
 800edca:	4690      	mov	r8, r2
 800edcc:	461f      	mov	r7, r3
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800edce:	2400      	movs	r4, #0
 800edd0:	940c      	str	r4, [sp, #48]	; 0x30
 800edd2:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 800edd6:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
    uint8_t status = 0x07;
 800edda:	2607      	movs	r6, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800eddc:	e030      	b.n	800ee40 <RegionEU868LinkAdrReq+0x80>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800edde:	f04f 0c00 	mov.w	ip, #0
        status = 0x07;
 800ede2:	2607      	movs	r6, #7
 800ede4:	e012      	b.n	800ee0c <RegionEU868LinkAdrReq+0x4c>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 800ede6:	4a57      	ldr	r2, [pc, #348]	; (800ef44 <RegionEU868LinkAdrReq+0x184>)
 800ede8:	6812      	ldr	r2, [r2, #0]
 800edea:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800edee:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800edf2:	b13a      	cbz	r2, 800ee04 <RegionEU868LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 800edf4:	2201      	movs	r2, #1
 800edf6:	fa02 f20c 	lsl.w	r2, r2, ip
 800edfa:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 800edfe:	430a      	orrs	r2, r1
 800ee00:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800ee04:	f10c 0c01 	add.w	ip, ip, #1
 800ee08:	fa5f fc8c 	uxtb.w	ip, ip
 800ee0c:	f1bc 0f0f 	cmp.w	ip, #15
 800ee10:	d816      	bhi.n	800ee40 <RegionEU868LinkAdrReq+0x80>
                if( linkAdrParams.ChMaskCtrl == 6 )
 800ee12:	2b06      	cmp	r3, #6
 800ee14:	d0e7      	beq.n	800ede6 <RegionEU868LinkAdrReq+0x26>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800ee16:	f8bd e02e 	ldrh.w	lr, [sp, #46]	; 0x2e
 800ee1a:	fa4e fe0c 	asr.w	lr, lr, ip
 800ee1e:	f01e 0f01 	tst.w	lr, #1
 800ee22:	d0ef      	beq.n	800ee04 <RegionEU868LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 800ee24:	4a47      	ldr	r2, [pc, #284]	; (800ef44 <RegionEU868LinkAdrReq+0x184>)
 800ee26:	6812      	ldr	r2, [r2, #0]
 800ee28:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800ee2c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800ee30:	2a00      	cmp	r2, #0
 800ee32:	d1e7      	bne.n	800ee04 <RegionEU868LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 800ee34:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 800ee38:	e7e4      	b.n	800ee04 <RegionEU868LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 800ee3a:	2606      	movs	r6, #6
 800ee3c:	e000      	b.n	800ee40 <RegionEU868LinkAdrReq+0x80>
            status &= 0xFE; // Channel mask KO
 800ee3e:	2606      	movs	r6, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800ee40:	7a2b      	ldrb	r3, [r5, #8]
 800ee42:	42a3      	cmp	r3, r4
 800ee44:	d918      	bls.n	800ee78 <RegionEU868LinkAdrReq+0xb8>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800ee46:	6868      	ldr	r0, [r5, #4]
 800ee48:	a90c      	add	r1, sp, #48	; 0x30
 800ee4a:	4420      	add	r0, r4
 800ee4c:	f7ff fa48 	bl	800e2e0 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800ee50:	b190      	cbz	r0, 800ee78 <RegionEU868LinkAdrReq+0xb8>
        bytesProcessed += nextIndex;
 800ee52:	4404      	add	r4, r0
 800ee54:	b2e4      	uxtb	r4, r4
        chMask = linkAdrParams.ChMask;
 800ee56:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800ee5a:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800ee5e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800ee62:	b90b      	cbnz	r3, 800ee68 <RegionEU868LinkAdrReq+0xa8>
 800ee64:	2a00      	cmp	r2, #0
 800ee66:	d0e8      	beq.n	800ee3a <RegionEU868LinkAdrReq+0x7a>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800ee68:	1e5a      	subs	r2, r3, #1
 800ee6a:	b2d2      	uxtb	r2, r2
 800ee6c:	2a04      	cmp	r2, #4
 800ee6e:	d9e6      	bls.n	800ee3e <RegionEU868LinkAdrReq+0x7e>
 800ee70:	2b06      	cmp	r3, #6
 800ee72:	d9b4      	bls.n	800edde <RegionEU868LinkAdrReq+0x1e>
            status &= 0xFE; // Channel mask KO
 800ee74:	2606      	movs	r6, #6
 800ee76:	e7e3      	b.n	800ee40 <RegionEU868LinkAdrReq+0x80>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800ee78:	2302      	movs	r3, #2
 800ee7a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800ee7e:	7a6b      	ldrb	r3, [r5, #9]
 800ee80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    phyParam = RegionEU868GetPhyParam( &getPhy );
 800ee84:	a80a      	add	r0, sp, #40	; 0x28
 800ee86:	f7ff fc9f 	bl	800e7c8 <RegionEU868GetPhyParam>
 800ee8a:	9009      	str	r0, [sp, #36]	; 0x24

    linkAdrVerifyParams.Status = status;
 800ee8c:	f88d 6008 	strb.w	r6, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800ee90:	7aab      	ldrb	r3, [r5, #10]
 800ee92:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800ee96:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800ee9a:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800ee9e:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800eea2:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800eea6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800eeaa:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800eeae:	f995 300b 	ldrsb.w	r3, [r5, #11]
 800eeb2:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800eeb6:	f995 300c 	ldrsb.w	r3, [r5, #12]
 800eeba:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800eebe:	f995 300d 	ldrsb.w	r3, [r5, #13]
 800eec2:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 800eec6:	2310      	movs	r3, #16
 800eec8:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800eecc:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 800eed0:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800eed2:	f88d 0018 	strb.w	r0, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 800eed6:	2307      	movs	r3, #7
 800eed8:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800eedc:	4a19      	ldr	r2, [pc, #100]	; (800ef44 <RegionEU868LinkAdrReq+0x184>)
 800eede:	6812      	ldr	r2, [r2, #0]
 800eee0:	9207      	str	r2, [sp, #28]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 800eee2:	f88d 3020 	strb.w	r3, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 800eee6:	2300      	movs	r3, #0
 800eee8:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800eeec:	682b      	ldr	r3, [r5, #0]
 800eeee:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800eef0:	ab0c      	add	r3, sp, #48	; 0x30
 800eef2:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800eef6:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 800eefa:	a801      	add	r0, sp, #4
 800eefc:	f7ff fa0e 	bl	800e31c <RegionCommonLinkAdrReqVerifyParams>
 800ef00:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800ef02:	2807      	cmp	r0, #7
 800ef04:	d010      	beq.n	800ef28 <RegionEU868LinkAdrReq+0x168>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800ef06:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800ef0a:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
 800ef0e:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800ef12:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 800ef16:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800ef1a:	703b      	strb	r3, [r7, #0]
    *nbBytesParsed = bytesProcessed;
 800ef1c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ef1e:	701c      	strb	r4, [r3, #0]

#endif /* REGION_EU868 */
    return status;
}
 800ef20:	4628      	mov	r0, r5
 800ef22:	b00f      	add	sp, #60	; 0x3c
 800ef24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 800ef28:	4e06      	ldr	r6, [pc, #24]	; (800ef44 <RegionEU868LinkAdrReq+0x184>)
 800ef2a:	6830      	ldr	r0, [r6, #0]
 800ef2c:	220c      	movs	r2, #12
 800ef2e:	2100      	movs	r1, #0
 800ef30:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800ef34:	f001 fef9 	bl	8010d2a <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 800ef38:	6833      	ldr	r3, [r6, #0]
 800ef3a:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 800ef3e:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
 800ef42:	e7e0      	b.n	800ef06 <RegionEU868LinkAdrReq+0x146>
 800ef44:	20001014 	.word	0x20001014

0800ef48 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800ef48:	b530      	push	{r4, r5, lr}
 800ef4a:	b083      	sub	sp, #12
 800ef4c:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800ef4e:	2300      	movs	r3, #0
 800ef50:	f88d 3007 	strb.w	r3, [sp, #7]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 800ef54:	f10d 0107 	add.w	r1, sp, #7
 800ef58:	6840      	ldr	r0, [r0, #4]
 800ef5a:	f7ff fbaf 	bl	800e6bc <VerifyRfFreq>
 800ef5e:	b1a8      	cbz	r0, 800ef8c <RegionEU868RxParamSetupReq+0x44>
    uint8_t status = 0x07;
 800ef60:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 800ef62:	2207      	movs	r2, #7
 800ef64:	2100      	movs	r1, #0
 800ef66:	f994 0000 	ldrsb.w	r0, [r4]
 800ef6a:	f7ff f898 	bl	800e09e <RegionCommonValueInRange>
 800ef6e:	b908      	cbnz	r0, 800ef74 <RegionEU868RxParamSetupReq+0x2c>
    {
        status &= 0xFD; // Datarate KO
 800ef70:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 800ef74:	2205      	movs	r2, #5
 800ef76:	2100      	movs	r1, #0
 800ef78:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800ef7c:	f7ff f88f 	bl	800e09e <RegionCommonValueInRange>
 800ef80:	b908      	cbnz	r0, 800ef86 <RegionEU868RxParamSetupReq+0x3e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800ef82:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_EU868 */
    return status;
}
 800ef86:	4628      	mov	r0, r5
 800ef88:	b003      	add	sp, #12
 800ef8a:	bd30      	pop	{r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800ef8c:	2506      	movs	r5, #6
 800ef8e:	e7e8      	b.n	800ef62 <RegionEU868RxParamSetupReq+0x1a>

0800ef90 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 800ef90:	f04f 30ff 	mov.w	r0, #4294967295
 800ef94:	4770      	bx	lr
	...

0800ef98 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 800ef98:	b510      	push	{r4, lr}
 800ef9a:	b082      	sub	sp, #8
 800ef9c:	4604      	mov	r4, r0
    uint8_t status = 0x03;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800ef9e:	2300      	movs	r3, #0
 800efa0:	f88d 3007 	strb.w	r3, [sp, #7]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 800efa4:	f10d 0107 	add.w	r1, sp, #7
 800efa8:	6840      	ldr	r0, [r0, #4]
 800efaa:	f7ff fb87 	bl	800e6bc <VerifyRfFreq>
 800efae:	b178      	cbz	r0, 800efd0 <RegionEU868DlChannelReq+0x38>
    uint8_t status = 0x03;
 800efb0:	2003      	movs	r0, #3
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800efb2:	4b0c      	ldr	r3, [pc, #48]	; (800efe4 <RegionEU868DlChannelReq+0x4c>)
 800efb4:	681a      	ldr	r2, [r3, #0]
 800efb6:	7823      	ldrb	r3, [r4, #0]
 800efb8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800efbc:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800efc0:	b909      	cbnz	r1, 800efc6 <RegionEU868DlChannelReq+0x2e>
    {
        status &= 0xFD;
 800efc2:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 800efc6:	2803      	cmp	r0, #3
 800efc8:	d004      	beq.n	800efd4 <RegionEU868DlChannelReq+0x3c>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_EU868 */
    return status;
}
 800efca:	b240      	sxtb	r0, r0
 800efcc:	b002      	add	sp, #8
 800efce:	bd10      	pop	{r4, pc}
        status &= 0xFE;
 800efd0:	2002      	movs	r0, #2
 800efd2:	e7ee      	b.n	800efb2 <RegionEU868DlChannelReq+0x1a>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 800efd4:	6861      	ldr	r1, [r4, #4]
 800efd6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800efda:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800efde:	6059      	str	r1, [r3, #4]
 800efe0:	e7f3      	b.n	800efca <RegionEU868DlChannelReq+0x32>
 800efe2:	bf00      	nop
 800efe4:	20001014 	.word	0x20001014

0800efe8 <RegionEU868AlternateDr>:
#if defined( REGION_EU868 )
    return currentDr;
#else
    return -1;
#endif /* REGION_EU868 */
}
 800efe8:	4770      	bx	lr
	...

0800efec <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800efec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efee:	b097      	sub	sp, #92	; 0x5c
 800eff0:	4604      	mov	r4, r0
 800eff2:	460f      	mov	r7, r1
 800eff4:	4616      	mov	r6, r2
 800eff6:	461d      	mov	r5, r3
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 800eff8:	2100      	movs	r1, #0
 800effa:	f88d 1057 	strb.w	r1, [sp, #87]	; 0x57
    uint8_t nbRestrictedChannels = 0;
 800effe:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 800f002:	9111      	str	r1, [sp, #68]	; 0x44
 800f004:	9112      	str	r1, [sp, #72]	; 0x48
 800f006:	9113      	str	r1, [sp, #76]	; 0x4c
 800f008:	9114      	str	r1, [sp, #80]	; 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 800f00a:	2307      	movs	r3, #7
 800f00c:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800f010:	4b34      	ldr	r3, [pc, #208]	; (800f0e4 <RegionEU868NextChannel+0xf8>)
 800f012:	6818      	ldr	r0, [r3, #0]
 800f014:	2201      	movs	r2, #1
 800f016:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800f01a:	f7ff f89b 	bl	800e154 <RegionCommonCountChannels>
 800f01e:	b938      	cbnz	r0, 800f030 <RegionEU868NextChannel+0x44>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800f020:	4b30      	ldr	r3, [pc, #192]	; (800f0e4 <RegionEU868NextChannel+0xf8>)
 800f022:	681a      	ldr	r2, [r3, #0]
 800f024:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 800f028:	f043 0307 	orr.w	r3, r3, #7
 800f02c:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800f030:	7a63      	ldrb	r3, [r4, #9]
 800f032:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800f036:	7a23      	ldrb	r3, [r4, #8]
 800f038:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800f03c:	4b29      	ldr	r3, [pc, #164]	; (800f0e4 <RegionEU868NextChannel+0xf8>)
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	f503 7258 	add.w	r2, r3, #864	; 0x360
 800f044:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800f046:	9305      	str	r3, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 800f048:	4b27      	ldr	r3, [pc, #156]	; (800f0e8 <RegionEU868NextChannel+0xfc>)
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	9306      	str	r3, [sp, #24]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 800f04e:	2310      	movs	r3, #16
 800f050:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 800f054:	f10d 030a 	add.w	r3, sp, #10
 800f058:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800f05a:	6823      	ldr	r3, [r4, #0]
 800f05c:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800f05e:	6863      	ldr	r3, [r4, #4]
 800f060:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800f062:	7aa3      	ldrb	r3, [r4, #10]
 800f064:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 800f068:	2306      	movs	r3, #6
 800f06a:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800f06e:	ab0c      	add	r3, sp, #48	; 0x30
 800f070:	f104 020c 	add.w	r2, r4, #12
 800f074:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f078:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800f07c:	7d23      	ldrb	r3, [r4, #20]
 800f07e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800f082:	8ae1      	ldrh	r1, [r4, #22]
 800f084:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800f088:	f7ff fb6c 	bl	800e764 <GetTimeOnAir>
 800f08c:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800f08e:	ab03      	add	r3, sp, #12
 800f090:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800f092:	9601      	str	r6, [sp, #4]
 800f094:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 800f098:	9300      	str	r3, [sp, #0]
 800f09a:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 800f09e:	aa11      	add	r2, sp, #68	; 0x44
 800f0a0:	4629      	mov	r1, r5
 800f0a2:	a809      	add	r0, sp, #36	; 0x24
 800f0a4:	f7ff fa58 	bl	800e558 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800f0a8:	4604      	mov	r4, r0
 800f0aa:	b120      	cbz	r0, 800f0b6 <RegionEU868NextChannel+0xca>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 800f0ac:	280c      	cmp	r0, #12
 800f0ae:	d00f      	beq.n	800f0d0 <RegionEU868NextChannel+0xe4>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800f0b0:	4620      	mov	r0, r4
 800f0b2:	b017      	add	sp, #92	; 0x5c
 800f0b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800f0b6:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
 800f0ba:	3901      	subs	r1, #1
 800f0bc:	f001 fe10 	bl	8010ce0 <randr>
 800f0c0:	f100 0358 	add.w	r3, r0, #88	; 0x58
 800f0c4:	eb0d 0003 	add.w	r0, sp, r3
 800f0c8:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 800f0cc:	703b      	strb	r3, [r7, #0]
 800f0ce:	e7ef      	b.n	800f0b0 <RegionEU868NextChannel+0xc4>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800f0d0:	4b04      	ldr	r3, [pc, #16]	; (800f0e4 <RegionEU868NextChannel+0xf8>)
 800f0d2:	681a      	ldr	r2, [r3, #0]
 800f0d4:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 800f0d8:	f043 0307 	orr.w	r3, r3, #7
 800f0dc:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
 800f0e0:	e7e6      	b.n	800f0b0 <RegionEU868NextChannel+0xc4>
 800f0e2:	bf00      	nop
 800f0e4:	20001014 	.word	0x20001014
 800f0e8:	20001010 	.word	0x20001010

0800f0ec <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 800f0ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0ee:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	f88d 3007 	strb.w	r3, [sp, #7]
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 800f0f6:	7905      	ldrb	r5, [r0, #4]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800f0f8:	2d02      	cmp	r5, #2
 800f0fa:	d94f      	bls.n	800f19c <RegionEU868ChannelAdd+0xb0>
 800f0fc:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 800f0fe:	2d0f      	cmp	r5, #15
 800f100:	d84e      	bhi.n	800f1a0 <RegionEU868ChannelAdd+0xb4>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800f102:	6803      	ldr	r3, [r0, #0]
 800f104:	7a18      	ldrb	r0, [r3, #8]
 800f106:	f340 0003 	sbfx	r0, r0, #0, #4
 800f10a:	2207      	movs	r2, #7
 800f10c:	2100      	movs	r1, #0
 800f10e:	b240      	sxtb	r0, r0
 800f110:	f7fe ffc5 	bl	800e09e <RegionCommonValueInRange>
 800f114:	2800      	cmp	r0, #0
 800f116:	d03d      	beq.n	800f194 <RegionEU868ChannelAdd+0xa8>
    bool drInvalid = false;
 800f118:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800f11a:	6823      	ldr	r3, [r4, #0]
 800f11c:	7a18      	ldrb	r0, [r3, #8]
 800f11e:	f340 1003 	sbfx	r0, r0, #4, #4
 800f122:	2207      	movs	r2, #7
 800f124:	2100      	movs	r1, #0
 800f126:	b240      	sxtb	r0, r0
 800f128:	f7fe ffb9 	bl	800e09e <RegionCommonValueInRange>
 800f12c:	b900      	cbnz	r0, 800f130 <RegionEU868ChannelAdd+0x44>
    {
        drInvalid = true;
 800f12e:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800f130:	6820      	ldr	r0, [r4, #0]
 800f132:	7a03      	ldrb	r3, [r0, #8]
 800f134:	f343 0203 	sbfx	r2, r3, #0, #4
 800f138:	b252      	sxtb	r2, r2
 800f13a:	f343 1303 	sbfx	r3, r3, #4, #4
 800f13e:	b25b      	sxtb	r3, r3
 800f140:	429a      	cmp	r2, r3
 800f142:	dd00      	ble.n	800f146 <RegionEU868ChannelAdd+0x5a>
    {
        drInvalid = true;
 800f144:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 800f146:	f10d 0107 	add.w	r1, sp, #7
 800f14a:	6800      	ldr	r0, [r0, #0]
 800f14c:	f7ff fab6 	bl	800e6bc <VerifyRfFreq>
 800f150:	b310      	cbz	r0, 800f198 <RegionEU868ChannelAdd+0xac>
    bool freqInvalid = false;
 800f152:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800f154:	b106      	cbz	r6, 800f158 <RegionEU868ChannelAdd+0x6c>
 800f156:	bb33      	cbnz	r3, 800f1a6 <RegionEU868ChannelAdd+0xba>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }
    if( drInvalid == true )
 800f158:	bb3e      	cbnz	r6, 800f1aa <RegionEU868ChannelAdd+0xbe>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 800f15a:	bb43      	cbnz	r3, 800f1ae <RegionEU868ChannelAdd+0xc2>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 800f15c:	4f15      	ldr	r7, [pc, #84]	; (800f1b4 <RegionEU868ChannelAdd+0xc8>)
 800f15e:	683b      	ldr	r3, [r7, #0]
 800f160:	006e      	lsls	r6, r5, #1
 800f162:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 800f166:	220c      	movs	r2, #12
 800f168:	6821      	ldr	r1, [r4, #0]
 800f16a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f16e:	f001 fdc4 	bl	8010cfa <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 800f172:	683a      	ldr	r2, [r7, #0]
 800f174:	442e      	add	r6, r5
 800f176:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f17a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f17e:	7273      	strb	r3, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 800f180:	2301      	movs	r3, #1
 800f182:	fa03 f505 	lsl.w	r5, r3, r5
 800f186:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 800f18a:	431d      	orrs	r5, r3
 800f18c:	f8a2 5360 	strh.w	r5, [r2, #864]	; 0x360
    return LORAMAC_STATUS_OK;
 800f190:	2000      	movs	r0, #0
 800f192:	e006      	b.n	800f1a2 <RegionEU868ChannelAdd+0xb6>
        drInvalid = true;
 800f194:	2601      	movs	r6, #1
 800f196:	e7c0      	b.n	800f11a <RegionEU868ChannelAdd+0x2e>
            freqInvalid = true;
 800f198:	2301      	movs	r3, #1
 800f19a:	e7db      	b.n	800f154 <RegionEU868ChannelAdd+0x68>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800f19c:	2006      	movs	r0, #6
 800f19e:	e000      	b.n	800f1a2 <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f1a0:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800f1a2:	b003      	add	sp, #12
 800f1a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800f1a6:	2006      	movs	r0, #6
 800f1a8:	e7fb      	b.n	800f1a2 <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_DATARATE_INVALID;
 800f1aa:	2005      	movs	r0, #5
 800f1ac:	e7f9      	b.n	800f1a2 <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 800f1ae:	2004      	movs	r0, #4
 800f1b0:	e7f7      	b.n	800f1a2 <RegionEU868ChannelAdd+0xb6>
 800f1b2:	bf00      	nop
 800f1b4:	20001014 	.word	0x20001014

0800f1b8 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 800f1b8:	7801      	ldrb	r1, [r0, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800f1ba:	2902      	cmp	r1, #2
 800f1bc:	d801      	bhi.n	800f1c2 <RegionEU868ChannelsRemove+0xa>
    {
        return false;
 800f1be:	2000      	movs	r0, #0

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
#else
    return false;
#endif /* REGION_EU868 */
}
 800f1c0:	4770      	bx	lr
{
 800f1c2:	b508      	push	{r3, lr}
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 800f1c4:	4b09      	ldr	r3, [pc, #36]	; (800f1ec <RegionEU868ChannelsRemove+0x34>)
 800f1c6:	6818      	ldr	r0, [r3, #0]
 800f1c8:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800f1cc:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800f1d0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	f840 200c 	str.w	r2, [r0, ip]
 800f1da:	605a      	str	r2, [r3, #4]
 800f1dc:	609a      	str	r2, [r3, #8]
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 800f1de:	2210      	movs	r2, #16
 800f1e0:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800f1e4:	f7fe ff9d 	bl	800e122 <RegionCommonChanDisable>
}
 800f1e8:	bd08      	pop	{r3, pc}
 800f1ea:	bf00      	nop
 800f1ec:	20001014 	.word	0x20001014

0800f1f0 <RegionEU868ApplyCFList>:
{
 800f1f0:	b570      	push	{r4, r5, r6, lr}
 800f1f2:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800f1f4:	2350      	movs	r3, #80	; 0x50
 800f1f6:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 800f1fa:	7a03      	ldrb	r3, [r0, #8]
 800f1fc:	2b10      	cmp	r3, #16
 800f1fe:	d136      	bne.n	800f26e <RegionEU868ApplyCFList+0x7e>
 800f200:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 800f202:	6843      	ldr	r3, [r0, #4]
 800f204:	7bdd      	ldrb	r5, [r3, #15]
 800f206:	2d00      	cmp	r5, #0
 800f208:	d131      	bne.n	800f26e <RegionEU868ApplyCFList+0x7e>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800f20a:	2403      	movs	r4, #3
 800f20c:	e01b      	b.n	800f246 <RegionEU868ApplyCFList+0x56>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800f20e:	6872      	ldr	r2, [r6, #4]
 800f210:	5d53      	ldrb	r3, [r2, r5]
 800f212:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800f214:	442a      	add	r2, r5
 800f216:	7851      	ldrb	r1, [r2, #1]
 800f218:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800f21c:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800f21e:	7892      	ldrb	r2, [r2, #2]
 800f220:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f224:	9303      	str	r3, [sp, #12]
            newChannel.Frequency *= 100;
 800f226:	2264      	movs	r2, #100	; 0x64
 800f228:	fb02 f303 	mul.w	r3, r2, r3
 800f22c:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 800f22e:	2300      	movs	r3, #0
 800f230:	9304      	str	r3, [sp, #16]
 800f232:	e011      	b.n	800f258 <RegionEU868ApplyCFList+0x68>
            channelRemove.ChannelId = chanIdx;
 800f234:	f88d 4000 	strb.w	r4, [sp]
            RegionEU868ChannelsRemove( &channelRemove );
 800f238:	4668      	mov	r0, sp
 800f23a:	f7ff ffbd 	bl	800f1b8 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800f23e:	3503      	adds	r5, #3
 800f240:	b2ed      	uxtb	r5, r5
 800f242:	3401      	adds	r4, #1
 800f244:	b2e4      	uxtb	r4, r4
 800f246:	2c0f      	cmp	r4, #15
 800f248:	d811      	bhi.n	800f26e <RegionEU868ApplyCFList+0x7e>
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 800f24a:	2c07      	cmp	r4, #7
 800f24c:	d9df      	bls.n	800f20e <RegionEU868ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 800f24e:	2300      	movs	r3, #0
 800f250:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 800f252:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 800f256:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 800f258:	9b03      	ldr	r3, [sp, #12]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d0ea      	beq.n	800f234 <RegionEU868ApplyCFList+0x44>
            channelAdd.NewChannel = &newChannel;
 800f25e:	ab03      	add	r3, sp, #12
 800f260:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 800f262:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionEU868ChannelAdd( &channelAdd );
 800f266:	a801      	add	r0, sp, #4
 800f268:	f7ff ff40 	bl	800f0ec <RegionEU868ChannelAdd>
 800f26c:	e7e7      	b.n	800f23e <RegionEU868ApplyCFList+0x4e>
}
 800f26e:	b006      	add	sp, #24
 800f270:	bd70      	pop	{r4, r5, r6, pc}

0800f272 <RegionEU868NewChannelReq>:
{
 800f272:	b500      	push	{lr}
 800f274:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 800f276:	6803      	ldr	r3, [r0, #0]
 800f278:	681a      	ldr	r2, [r3, #0]
 800f27a:	b952      	cbnz	r2, 800f292 <RegionEU868NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800f27c:	7903      	ldrb	r3, [r0, #4]
 800f27e:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 800f282:	a801      	add	r0, sp, #4
 800f284:	f7ff ff98 	bl	800f1b8 <RegionEU868ChannelsRemove>
 800f288:	b1d0      	cbz	r0, 800f2c0 <RegionEU868NewChannelReq+0x4e>
    uint8_t status = 0x03;
 800f28a:	2003      	movs	r0, #3
}
 800f28c:	b005      	add	sp, #20
 800f28e:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 800f292:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800f294:	7903      	ldrb	r3, [r0, #4]
 800f296:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 800f29a:	a802      	add	r0, sp, #8
 800f29c:	f7ff ff26 	bl	800f0ec <RegionEU868ChannelAdd>
 800f2a0:	2806      	cmp	r0, #6
 800f2a2:	d80b      	bhi.n	800f2bc <RegionEU868NewChannelReq+0x4a>
 800f2a4:	e8df f000 	tbb	[pc, r0]
 800f2a8:	0a0a0a04 	.word	0x0a0a0a04
 800f2ac:	060e      	.short	0x060e
 800f2ae:	08          	.byte	0x08
 800f2af:	00          	.byte	0x00
 800f2b0:	2003      	movs	r0, #3
 800f2b2:	e7eb      	b.n	800f28c <RegionEU868NewChannelReq+0x1a>
                status &= 0xFD;
 800f2b4:	2001      	movs	r0, #1
                break;
 800f2b6:	e7e9      	b.n	800f28c <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 800f2b8:	2000      	movs	r0, #0
                break;
 800f2ba:	e7e7      	b.n	800f28c <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 800f2bc:	2000      	movs	r0, #0
                break;
 800f2be:	e7e5      	b.n	800f28c <RegionEU868NewChannelReq+0x1a>
            status &= 0xFC;
 800f2c0:	2000      	movs	r0, #0
 800f2c2:	e7e3      	b.n	800f28c <RegionEU868NewChannelReq+0x1a>
                status &= 0xFE;
 800f2c4:	2002      	movs	r0, #2
 800f2c6:	e7e1      	b.n	800f28c <RegionEU868NewChannelReq+0x1a>

0800f2c8 <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 800f2c8:	1a88      	subs	r0, r1, r2
 800f2ca:	b240      	sxtb	r0, r0

    if( datarate < 0 )
 800f2cc:	2800      	cmp	r0, #0
 800f2ce:	db01      	blt.n	800f2d4 <RegionEU868ApplyDrOffset+0xc>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_EU868 */
}
 800f2d0:	b2c0      	uxtb	r0, r0
 800f2d2:	4770      	bx	lr
        datarate = DR_0;
 800f2d4:	2000      	movs	r0, #0
 800f2d6:	e7fb      	b.n	800f2d0 <RegionEU868ApplyDrOffset+0x8>

0800f2d8 <VerifyRfFreq>:
    }
    return txPowerResult;
}

static bool VerifyRfFreq( uint32_t freq )
{
 800f2d8:	b510      	push	{r4, lr}
 800f2da:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800f2dc:	4b10      	ldr	r3, [pc, #64]	; (800f320 <VerifyRfFreq+0x48>)
 800f2de:	6a1b      	ldr	r3, [r3, #32]
 800f2e0:	4798      	blx	r3
 800f2e2:	b1c8      	cbz	r0, 800f318 <VerifyRfFreq+0x40>
    {
        return false;
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 800f2e4:	4b0f      	ldr	r3, [pc, #60]	; (800f324 <VerifyRfFreq+0x4c>)
 800f2e6:	4423      	add	r3, r4
 800f2e8:	4a0f      	ldr	r2, [pc, #60]	; (800f328 <VerifyRfFreq+0x50>)
 800f2ea:	4293      	cmp	r3, r2
 800f2ec:	d813      	bhi.n	800f316 <VerifyRfFreq+0x3e>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 800f2ee:	f102 42df 	add.w	r2, r2, #1870659584	; 0x6f800000
 800f2f2:	f502 12c8 	add.w	r2, r2, #1638400	; 0x190000
 800f2f6:	f202 7245 	addw	r2, r2, #1861	; 0x745
 800f2fa:	fba2 1203 	umull	r1, r2, r2, r3
 800f2fe:	0c92      	lsrs	r2, r2, #18
 800f300:	490a      	ldr	r1, [pc, #40]	; (800f32c <VerifyRfFreq+0x54>)
 800f302:	fb01 3212 	mls	r2, r1, r2, r3
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 800f306:	b942      	cbnz	r2, 800f31a <VerifyRfFreq+0x42>
    {
        return false;
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 800f308:	4b09      	ldr	r3, [pc, #36]	; (800f330 <VerifyRfFreq+0x58>)
 800f30a:	4423      	add	r3, r4
 800f30c:	4a09      	ldr	r2, [pc, #36]	; (800f334 <VerifyRfFreq+0x5c>)
 800f30e:	4293      	cmp	r3, r2
 800f310:	d902      	bls.n	800f318 <VerifyRfFreq+0x40>
    {
        return false;
 800f312:	2000      	movs	r0, #0
 800f314:	e000      	b.n	800f318 <VerifyRfFreq+0x40>
        return false;
 800f316:	2000      	movs	r0, #0
    }
    return true;
}
 800f318:	bd10      	pop	{r4, pc}
        return false;
 800f31a:	2000      	movs	r0, #0
 800f31c:	e7fc      	b.n	800f318 <VerifyRfFreq+0x40>
 800f31e:	bf00      	nop
 800f320:	08014e54 	.word	0x08014e54
 800f324:	c8f78f60 	.word	0xc8f78f60
 800f328:	00401640 	.word	0x00401640
 800f32c:	000927c0 	.word	0x000927c0
 800f330:	ca37fea0 	.word	0xca37fea0
 800f334:	01808580 	.word	0x01808580

0800f338 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800f338:	b570      	push	{r4, r5, r6, lr}
 800f33a:	b084      	sub	sp, #16
 800f33c:	460c      	mov	r4, r1
    int8_t phyDr = DataratesUS915[datarate];
 800f33e:	4b0a      	ldr	r3, [pc, #40]	; (800f368 <GetTimeOnAir+0x30>)
 800f340:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 800f342:	490a      	ldr	r1, [pc, #40]	; (800f36c <GetTimeOnAir+0x34>)
 800f344:	f7ff f976 	bl	800e634 <RegionCommonGetBandwidth>
 800f348:	4601      	mov	r1, r0

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800f34a:	4b09      	ldr	r3, [pc, #36]	; (800f370 <GetTimeOnAir+0x38>)
 800f34c:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800f34e:	2001      	movs	r0, #1
 800f350:	9003      	str	r0, [sp, #12]
 800f352:	b2e4      	uxtb	r4, r4
 800f354:	9402      	str	r4, [sp, #8]
 800f356:	2200      	movs	r2, #0
 800f358:	9201      	str	r2, [sp, #4]
 800f35a:	2208      	movs	r2, #8
 800f35c:	9200      	str	r2, [sp, #0]
 800f35e:	4603      	mov	r3, r0
 800f360:	4632      	mov	r2, r6
 800f362:	47a8      	blx	r5
}
 800f364:	b004      	add	sp, #16
 800f366:	bd70      	pop	{r4, r5, r6, pc}
 800f368:	080148c0 	.word	0x080148c0
 800f36c:	0801486c 	.word	0x0801486c
 800f370:	08014e54 	.word	0x08014e54

0800f374 <LimitTxPower>:
{
 800f374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f376:	4606      	mov	r6, r0
 800f378:	4615      	mov	r5, r2
 800f37a:	461f      	mov	r7, r3
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 800f37c:	f7ff f955 	bl	800e62a <RegionCommonLimitTxPower>
    if( datarate == DR_4 )
 800f380:	2d04      	cmp	r5, #4
 800f382:	d105      	bne.n	800f390 <LimitTxPower+0x1c>
        txPowerResult = MAX( txPower, TX_POWER_2 );
 800f384:	4634      	mov	r4, r6
 800f386:	2e02      	cmp	r6, #2
 800f388:	bfb8      	it	lt
 800f38a:	2402      	movlt	r4, #2
}
 800f38c:	4620      	mov	r0, r4
 800f38e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f390:	4604      	mov	r4, r0
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 800f392:	2204      	movs	r2, #4
 800f394:	2100      	movs	r1, #0
 800f396:	4638      	mov	r0, r7
 800f398:	f7fe fedc 	bl	800e154 <RegionCommonCountChannels>
 800f39c:	2831      	cmp	r0, #49	; 0x31
 800f39e:	d8f5      	bhi.n	800f38c <LimitTxPower+0x18>
            txPowerResult = MAX( txPower, TX_POWER_5 );
 800f3a0:	4634      	mov	r4, r6
 800f3a2:	2e05      	cmp	r6, #5
 800f3a4:	bfb8      	it	lt
 800f3a6:	2405      	movlt	r4, #5
 800f3a8:	e7f0      	b.n	800f38c <LimitTxPower+0x18>
	...

0800f3ac <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 800f3ac:	b500      	push	{lr}
 800f3ae:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800f3b0:	2300      	movs	r3, #0
 800f3b2:	9304      	str	r3, [sp, #16]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 800f3b4:	7803      	ldrb	r3, [r0, #0]
 800f3b6:	3b01      	subs	r3, #1
 800f3b8:	2b37      	cmp	r3, #55	; 0x37
 800f3ba:	d81f      	bhi.n	800f3fc <RegionUS915GetPhyParam+0x50>
 800f3bc:	e8df f003 	tbb	[pc, r3]
 800f3c0:	1e1e1e1c 	.word	0x1e1e1e1c
 800f3c4:	1e1e1e1e 	.word	0x1e1e1e1e
 800f3c8:	3e3b1e1e 	.word	0x3e3b1e1e
 800f3cc:	4d1e4741 	.word	0x4d1e4741
 800f3d0:	5d595551 	.word	0x5d595551
 800f3d4:	6d6a1e61 	.word	0x6d6a1e61
 800f3d8:	7f7c7670 	.word	0x7f7c7670
 800f3dc:	86831e1e 	.word	0x86831e1e
 800f3e0:	1e1e1e23 	.word	0x1e1e1e23
 800f3e4:	1e1e1e1e 	.word	0x1e1e1e1e
 800f3e8:	1e1e1e1e 	.word	0x1e1e1e1e
 800f3ec:	90891e1e 	.word	0x90891e1e
 800f3f0:	a01e9d9a 	.word	0xa01e9d9a
 800f3f4:	b3adaaa7 	.word	0xb3adaaa7
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 800f3f8:	2308      	movs	r3, #8
 800f3fa:	9304      	str	r3, [sp, #16]
            break;
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 800f3fc:	9804      	ldr	r0, [sp, #16]
 800f3fe:	9005      	str	r0, [sp, #20]
}
 800f400:	b007      	add	sp, #28
 800f402:	f85d fb04 	ldr.w	pc, [sp], #4
                .CurrentDr = getPhy->Datarate,
 800f406:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800f40a:	f88d 3004 	strb.w	r3, [sp, #4]
 800f40e:	2304      	movs	r3, #4
 800f410:	f88d 3005 	strb.w	r3, [sp, #5]
 800f414:	2300      	movs	r3, #0
 800f416:	f88d 3006 	strb.w	r3, [sp, #6]
 800f41a:	2348      	movs	r3, #72	; 0x48
 800f41c:	f88d 3007 	strb.w	r3, [sp, #7]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800f420:	4b44      	ldr	r3, [pc, #272]	; (800f534 <RegionUS915GetPhyParam+0x188>)
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800f428:	9202      	str	r2, [sp, #8]
 800f42a:	9303      	str	r3, [sp, #12]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800f42c:	a801      	add	r0, sp, #4
 800f42e:	f7ff f8dd 	bl	800e5ec <RegionCommonGetNextLowerTxDr>
 800f432:	9004      	str	r0, [sp, #16]
            break;
 800f434:	e7e2      	b.n	800f3fc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800f436:	2340      	movs	r3, #64	; 0x40
 800f438:	9304      	str	r3, [sp, #16]
            break;
 800f43a:	e7df      	b.n	800f3fc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800f43c:	2320      	movs	r3, #32
 800f43e:	9304      	str	r3, [sp, #16]
            break;
 800f440:	e7dc      	b.n	800f3fc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 800f442:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800f446:	4a3c      	ldr	r2, [pc, #240]	; (800f538 <RegionUS915GetPhyParam+0x18c>)
 800f448:	5cd3      	ldrb	r3, [r2, r3]
 800f44a:	9304      	str	r3, [sp, #16]
            break;
 800f44c:	e7d6      	b.n	800f3fc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 800f44e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800f452:	4a3a      	ldr	r2, [pc, #232]	; (800f53c <RegionUS915GetPhyParam+0x190>)
 800f454:	5cd3      	ldrb	r3, [r2, r3]
 800f456:	9304      	str	r3, [sp, #16]
            break;
 800f458:	e7d0      	b.n	800f3fc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_MAX_RX_WINDOW;
 800f45a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800f45e:	9304      	str	r3, [sp, #16]
            break;
 800f460:	e7cc      	b.n	800f3fc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800f462:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f466:	9304      	str	r3, [sp, #16]
            break;
 800f468:	e7c8      	b.n	800f3fc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800f46a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800f46e:	9304      	str	r3, [sp, #16]
            break;
 800f470:	e7c4      	b.n	800f3fc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800f472:	f241 3388 	movw	r3, #5000	; 0x1388
 800f476:	9304      	str	r3, [sp, #16]
            break;
 800f478:	e7c0      	b.n	800f3fc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800f47a:	f241 7370 	movw	r3, #6000	; 0x1770
 800f47e:	9304      	str	r3, [sp, #16]
            break;
 800f480:	e7bc      	b.n	800f3fc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 800f482:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800f486:	482e      	ldr	r0, [pc, #184]	; (800f540 <RegionUS915GetPhyParam+0x194>)
 800f488:	f001 fc2a 	bl	8010ce0 <randr>
 800f48c:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800f490:	9004      	str	r0, [sp, #16]
            break;
 800f492:	e7b3      	b.n	800f3fc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_RX_WND_2_FREQ;
 800f494:	4b2b      	ldr	r3, [pc, #172]	; (800f544 <RegionUS915GetPhyParam+0x198>)
 800f496:	9304      	str	r3, [sp, #16]
            break;
 800f498:	e7b0      	b.n	800f3fc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_RX_WND_2_DR;
 800f49a:	2308      	movs	r3, #8
 800f49c:	9304      	str	r3, [sp, #16]
            break;
 800f49e:	e7ad      	b.n	800f3fc <RegionUS915GetPhyParam+0x50>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800f4a0:	4b24      	ldr	r3, [pc, #144]	; (800f534 <RegionUS915GetPhyParam+0x188>)
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800f4a8:	9304      	str	r3, [sp, #16]
            break;
 800f4aa:	e7a7      	b.n	800f3fc <RegionUS915GetPhyParam+0x50>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800f4ac:	4b21      	ldr	r3, [pc, #132]	; (800f534 <RegionUS915GetPhyParam+0x188>)
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 800f4b4:	9304      	str	r3, [sp, #16]
            break;
 800f4b6:	e7a1      	b.n	800f3fc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_MAX_NB_CHANNELS;
 800f4b8:	2348      	movs	r3, #72	; 0x48
 800f4ba:	9304      	str	r3, [sp, #16]
            break;
 800f4bc:	e79e      	b.n	800f3fc <RegionUS915GetPhyParam+0x50>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800f4be:	4b1d      	ldr	r3, [pc, #116]	; (800f534 <RegionUS915GetPhyParam+0x188>)
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	9304      	str	r3, [sp, #16]
            break;
 800f4c4:	e79a      	b.n	800f3fc <RegionUS915GetPhyParam+0x50>
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 800f4c6:	4b20      	ldr	r3, [pc, #128]	; (800f548 <RegionUS915GetPhyParam+0x19c>)
 800f4c8:	9304      	str	r3, [sp, #16]
            break;
 800f4ca:	e797      	b.n	800f3fc <RegionUS915GetPhyParam+0x50>
            phyParam.fValue = 0;
 800f4cc:	2300      	movs	r3, #0
 800f4ce:	9304      	str	r3, [sp, #16]
            break;
 800f4d0:	e794      	b.n	800f3fc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800f4d2:	4a1e      	ldr	r2, [pc, #120]	; (800f54c <RegionUS915GetPhyParam+0x1a0>)
 800f4d4:	491b      	ldr	r1, [pc, #108]	; (800f544 <RegionUS915GetPhyParam+0x198>)
 800f4d6:	7900      	ldrb	r0, [r0, #4]
 800f4d8:	f7fe fd12 	bl	800df00 <RegionBaseUSCalcDownlinkFrequency>
 800f4dc:	9004      	str	r0, [sp, #16]
            break;
 800f4de:	e78d      	b.n	800f3fc <RegionUS915GetPhyParam+0x50>
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 800f4e0:	2317      	movs	r3, #23
 800f4e2:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 800f4e6:	2304      	movs	r3, #4
 800f4e8:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 800f4ec:	2303      	movs	r3, #3
 800f4ee:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 800f4f2:	e783      	b.n	800f3fc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 800f4f4:	2308      	movs	r3, #8
 800f4f6:	9304      	str	r3, [sp, #16]
            break;
 800f4f8:	e780      	b.n	800f3fc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 800f4fa:	2308      	movs	r3, #8
 800f4fc:	9304      	str	r3, [sp, #16]
            break;
 800f4fe:	e77d      	b.n	800f3fc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800f500:	4a12      	ldr	r2, [pc, #72]	; (800f54c <RegionUS915GetPhyParam+0x1a0>)
 800f502:	4910      	ldr	r1, [pc, #64]	; (800f544 <RegionUS915GetPhyParam+0x198>)
 800f504:	7900      	ldrb	r0, [r0, #4]
 800f506:	f7fe fcfb 	bl	800df00 <RegionBaseUSCalcDownlinkFrequency>
 800f50a:	9004      	str	r0, [sp, #16]
            break;
 800f50c:	e776      	b.n	800f3fc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 800f50e:	2308      	movs	r3, #8
 800f510:	9304      	str	r3, [sp, #16]
            break;
 800f512:	e773      	b.n	800f3fc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 800f514:	2308      	movs	r3, #8
 800f516:	9304      	str	r3, [sp, #16]
            break;
 800f518:	e770      	b.n	800f3fc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 800f51a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800f51e:	4a0c      	ldr	r2, [pc, #48]	; (800f550 <RegionUS915GetPhyParam+0x1a4>)
 800f520:	5cd3      	ldrb	r3, [r2, r3]
 800f522:	9304      	str	r3, [sp, #16]
            break;
 800f524:	e76a      	b.n	800f3fc <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 800f526:	490b      	ldr	r1, [pc, #44]	; (800f554 <RegionUS915GetPhyParam+0x1a8>)
 800f528:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800f52c:	f7ff f882 	bl	800e634 <RegionCommonGetBandwidth>
 800f530:	9004      	str	r0, [sp, #16]
            break;
 800f532:	e763      	b.n	800f3fc <RegionUS915GetPhyParam+0x50>
 800f534:	20001020 	.word	0x20001020
 800f538:	080148e0 	.word	0x080148e0
 800f53c:	080148d0 	.word	0x080148d0
 800f540:	fffffc18 	.word	0xfffffc18
 800f544:	370870a0 	.word	0x370870a0
 800f548:	4200999a 	.word	0x4200999a
 800f54c:	000927c0 	.word	0x000927c0
 800f550:	080148c0 	.word	0x080148c0
 800f554:	0801486c 	.word	0x0801486c

0800f558 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800f558:	b510      	push	{r4, lr}
 800f55a:	b082      	sub	sp, #8
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800f55c:	4b0b      	ldr	r3, [pc, #44]	; (800f58c <RegionUS915SetBandTxDone+0x34>)
 800f55e:	681a      	ldr	r2, [r3, #0]
 800f560:	7803      	ldrb	r3, [r0, #0]
 800f562:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f566:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f56a:	7a5b      	ldrb	r3, [r3, #9]
 800f56c:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800f570:	4b07      	ldr	r3, [pc, #28]	; (800f590 <RegionUS915SetBandTxDone+0x38>)
 800f572:	681c      	ldr	r4, [r3, #0]
 800f574:	6903      	ldr	r3, [r0, #16]
 800f576:	9300      	str	r3, [sp, #0]
 800f578:	68c3      	ldr	r3, [r0, #12]
 800f57a:	7842      	ldrb	r2, [r0, #1]
 800f57c:	6881      	ldr	r1, [r0, #8]
 800f57e:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 800f582:	f7fe fe0c 	bl	800e19e <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 800f586:	b002      	add	sp, #8
 800f588:	bd10      	pop	{r4, pc}
 800f58a:	bf00      	nop
 800f58c:	20001020 	.word	0x20001020
 800f590:	20001018 	.word	0x20001018

0800f594 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 800f594:	b510      	push	{r4, lr}
 800f596:	b086      	sub	sp, #24
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 800f598:	2301      	movs	r3, #1
 800f59a:	f8ad 3000 	strh.w	r3, [sp]
 800f59e:	2300      	movs	r3, #0
 800f5a0:	f88d 3002 	strb.w	r3, [sp, #2]
 800f5a4:	9301      	str	r3, [sp, #4]
 800f5a6:	9302      	str	r3, [sp, #8]
 800f5a8:	9303      	str	r3, [sp, #12]
 800f5aa:	9304      	str	r3, [sp, #16]
 800f5ac:	f88d 3014 	strb.w	r3, [sp, #20]
    {
       US915_BAND0
    };

    switch( params->Type )
 800f5b0:	7b04      	ldrb	r4, [r0, #12]
 800f5b2:	b174      	cbz	r4, 800f5d2 <RegionUS915InitDefaults+0x3e>
 800f5b4:	3c01      	subs	r4, #1
 800f5b6:	b2e4      	uxtb	r4, r4
 800f5b8:	2c01      	cmp	r4, #1
 800f5ba:	d87e      	bhi.n	800f6ba <RegionUS915InitDefaults+0x126>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800f5bc:	4b40      	ldr	r3, [pc, #256]	; (800f6c0 <RegionUS915InitDefaults+0x12c>)
 800f5be:	6818      	ldr	r0, [r3, #0]
 800f5c0:	2206      	movs	r2, #6
 800f5c2:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 800f5c6:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800f5ca:	f7fe fdd9 	bl	800e180 <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	e071      	b.n	800f6b6 <RegionUS915InitDefaults+0x122>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800f5d2:	6803      	ldr	r3, [r0, #0]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d070      	beq.n	800f6ba <RegionUS915InitDefaults+0x126>
 800f5d8:	6842      	ldr	r2, [r0, #4]
 800f5da:	2a00      	cmp	r2, #0
 800f5dc:	d06d      	beq.n	800f6ba <RegionUS915InitDefaults+0x126>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800f5de:	4939      	ldr	r1, [pc, #228]	; (800f6c4 <RegionUS915InitDefaults+0x130>)
 800f5e0:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800f5e2:	4937      	ldr	r1, [pc, #220]	; (800f6c0 <RegionUS915InitDefaults+0x12c>)
 800f5e4:	600a      	str	r2, [r1, #0]
            RegionBands = (Band_t*) params->Bands;
 800f5e6:	6880      	ldr	r0, [r0, #8]
 800f5e8:	4a37      	ldr	r2, [pc, #220]	; (800f6c8 <RegionUS915InitDefaults+0x134>)
 800f5ea:	6010      	str	r0, [r2, #0]
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800f5ec:	2200      	movs	r2, #0
 800f5ee:	731a      	strb	r2, [r3, #12]
            RegionNvmGroup1->JoinTrialsCounter = 0;
 800f5f0:	735a      	strb	r2, [r3, #13]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 800f5f2:	2218      	movs	r2, #24
 800f5f4:	4669      	mov	r1, sp
 800f5f6:	f001 fb80 	bl	8010cfa <memcpy1>
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800f5fa:	e011      	b.n	800f620 <RegionUS915InitDefaults+0x8c>
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 800f5fc:	4b30      	ldr	r3, [pc, #192]	; (800f6c0 <RegionUS915InitDefaults+0x12c>)
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	4932      	ldr	r1, [pc, #200]	; (800f6cc <RegionUS915InitDefaults+0x138>)
 800f602:	4a33      	ldr	r2, [pc, #204]	; (800f6d0 <RegionUS915InitDefaults+0x13c>)
 800f604:	fb01 2204 	mla	r2, r1, r4, r2
 800f608:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800f60c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 800f610:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 800f614:	2230      	movs	r2, #48	; 0x30
 800f616:	7202      	strb	r2, [r0, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800f618:	2200      	movs	r2, #0
 800f61a:	7242      	strb	r2, [r0, #9]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800f61c:	3401      	adds	r4, #1
 800f61e:	b2e4      	uxtb	r4, r4
 800f620:	2c3f      	cmp	r4, #63	; 0x3f
 800f622:	d9eb      	bls.n	800f5fc <RegionUS915InitDefaults+0x68>
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800f624:	2340      	movs	r3, #64	; 0x40
 800f626:	2b47      	cmp	r3, #71	; 0x47
 800f628:	d814      	bhi.n	800f654 <RegionUS915InitDefaults+0xc0>
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 800f62a:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
 800f62e:	4a24      	ldr	r2, [pc, #144]	; (800f6c0 <RegionUS915InitDefaults+0x12c>)
 800f630:	6812      	ldr	r2, [r2, #0]
 800f632:	4c28      	ldr	r4, [pc, #160]	; (800f6d4 <RegionUS915InitDefaults+0x140>)
 800f634:	4928      	ldr	r1, [pc, #160]	; (800f6d8 <RegionUS915InitDefaults+0x144>)
 800f636:	fb04 1100 	mla	r1, r4, r0, r1
 800f63a:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800f63e:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 800f642:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 800f646:	2144      	movs	r1, #68	; 0x44
 800f648:	7221      	strb	r1, [r4, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800f64a:	2100      	movs	r1, #0
 800f64c:	7261      	strb	r1, [r4, #9]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800f64e:	3301      	adds	r3, #1
 800f650:	b2db      	uxtb	r3, r3
 800f652:	e7e8      	b.n	800f626 <RegionUS915InitDefaults+0x92>
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 800f654:	4c1a      	ldr	r4, [pc, #104]	; (800f6c0 <RegionUS915InitDefaults+0x12c>)
 800f656:	6820      	ldr	r0, [r4, #0]
 800f658:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f65c:	f8a0 336c 	strh.w	r3, [r0, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 800f660:	f8a0 336e 	strh.w	r3, [r0, #878]	; 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 800f664:	f8a0 3370 	strh.w	r3, [r0, #880]	; 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 800f668:	f8a0 3372 	strh.w	r3, [r0, #882]	; 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 800f66c:	23ff      	movs	r3, #255	; 0xff
 800f66e:	f8a0 3374 	strh.w	r3, [r0, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800f672:	2300      	movs	r3, #0
 800f674:	f8a0 3376 	strh.w	r3, [r0, #886]	; 0x376
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800f678:	2206      	movs	r2, #6
 800f67a:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 800f67e:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800f682:	f7fe fd7d 	bl	800e180 <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800f686:	6821      	ldr	r1, [r4, #0]
 800f688:	2206      	movs	r2, #6
 800f68a:	f501 7158 	add.w	r1, r1, #864	; 0x360
 800f68e:	4b0d      	ldr	r3, [pc, #52]	; (800f6c4 <RegionUS915InitDefaults+0x130>)
 800f690:	6818      	ldr	r0, [r3, #0]
 800f692:	f7fe fd75 	bl	800e180 <RegionCommonChanMaskCopy>
            break;
 800f696:	e010      	b.n	800f6ba <RegionUS915InitDefaults+0x126>
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800f698:	4a0a      	ldr	r2, [pc, #40]	; (800f6c4 <RegionUS915InitDefaults+0x130>)
 800f69a:	6811      	ldr	r1, [r2, #0]
 800f69c:	4a08      	ldr	r2, [pc, #32]	; (800f6c0 <RegionUS915InitDefaults+0x12c>)
 800f69e:	6812      	ldr	r2, [r2, #0]
 800f6a0:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 800f6a4:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 800f6a8:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800f6ac:	4002      	ands	r2, r0
 800f6ae:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            for( uint8_t i = 0; i < 6; i++ )
 800f6b2:	3301      	adds	r3, #1
 800f6b4:	b2db      	uxtb	r3, r3
 800f6b6:	2b05      	cmp	r3, #5
 800f6b8:	d9ee      	bls.n	800f698 <RegionUS915InitDefaults+0x104>
        {
            break;
        }
    }
#endif /* REGION_US915 */
}
 800f6ba:	b006      	add	sp, #24
 800f6bc:	bd10      	pop	{r4, pc}
 800f6be:	bf00      	nop
 800f6c0:	20001020 	.word	0x20001020
 800f6c4:	2000101c 	.word	0x2000101c
 800f6c8:	20001018 	.word	0x20001018
 800f6cc:	00030d40 	.word	0x00030d40
 800f6d0:	35c80160 	.word	0x35c80160
 800f6d4:	00186a00 	.word	0x00186a00
 800f6d8:	35d2afc0 	.word	0x35d2afc0

0800f6dc <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800f6dc:	b508      	push	{r3, lr}
#if defined( REGION_US915 )
    switch( phyAttribute )
 800f6de:	290a      	cmp	r1, #10
 800f6e0:	d833      	bhi.n	800f74a <RegionUS915Verify+0x6e>
 800f6e2:	e8df f001 	tbb	[pc, r1]
 800f6e6:	3206      	.short	0x3206
 800f6e8:	0a323232 	.word	0x0a323232
 800f6ec:	28321e14 	.word	0x28321e14
 800f6f0:	28          	.byte	0x28
 800f6f1:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 800f6f2:	6800      	ldr	r0, [r0, #0]
 800f6f4:	f7ff fdf0 	bl	800f2d8 <VerifyRfFreq>
 800f6f8:	e028      	b.n	800f74c <RegionUS915Verify+0x70>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 800f6fa:	2204      	movs	r2, #4
 800f6fc:	2100      	movs	r1, #0
 800f6fe:	f990 0000 	ldrsb.w	r0, [r0]
 800f702:	f7fe fccc 	bl	800e09e <RegionCommonValueInRange>
 800f706:	3800      	subs	r0, #0
 800f708:	bf18      	it	ne
 800f70a:	2001      	movne	r0, #1
 800f70c:	e01e      	b.n	800f74c <RegionUS915Verify+0x70>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800f70e:	2205      	movs	r2, #5
 800f710:	2100      	movs	r1, #0
 800f712:	f990 0000 	ldrsb.w	r0, [r0]
 800f716:	f7fe fcc2 	bl	800e09e <RegionCommonValueInRange>
 800f71a:	3800      	subs	r0, #0
 800f71c:	bf18      	it	ne
 800f71e:	2001      	movne	r0, #1
 800f720:	e014      	b.n	800f74c <RegionUS915Verify+0x70>
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 800f722:	220d      	movs	r2, #13
 800f724:	2108      	movs	r1, #8
 800f726:	f990 0000 	ldrsb.w	r0, [r0]
 800f72a:	f7fe fcb8 	bl	800e09e <RegionCommonValueInRange>
 800f72e:	3800      	subs	r0, #0
 800f730:	bf18      	it	ne
 800f732:	2001      	movne	r0, #1
 800f734:	e00a      	b.n	800f74c <RegionUS915Verify+0x70>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 800f736:	220e      	movs	r2, #14
 800f738:	2100      	movs	r1, #0
 800f73a:	f990 0000 	ldrsb.w	r0, [r0]
 800f73e:	f7fe fcae 	bl	800e09e <RegionCommonValueInRange>
 800f742:	3800      	subs	r0, #0
 800f744:	bf18      	it	ne
 800f746:	2001      	movne	r0, #1
 800f748:	e000      	b.n	800f74c <RegionUS915Verify+0x70>
    switch( phyAttribute )
 800f74a:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_US915 */
}
 800f74c:	bd08      	pop	{r3, pc}
	...

0800f750 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 800f750:	7a03      	ldrb	r3, [r0, #8]
 800f752:	2b10      	cmp	r3, #16
 800f754:	d134      	bne.n	800f7c0 <RegionUS915ApplyCFList+0x70>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 800f756:	6843      	ldr	r3, [r0, #4]
 800f758:	7bdb      	ldrb	r3, [r3, #15]
 800f75a:	2b01      	cmp	r3, #1
 800f75c:	d130      	bne.n	800f7c0 <RegionUS915ApplyCFList+0x70>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800f75e:	2200      	movs	r2, #0
 800f760:	4613      	mov	r3, r2
 800f762:	2a04      	cmp	r2, #4
 800f764:	d82b      	bhi.n	800f7be <RegionUS915ApplyCFList+0x6e>
{
 800f766:	b530      	push	{r4, r5, lr}
 800f768:	e010      	b.n	800f78c <RegionUS915ApplyCFList+0x3c>
        if( chMaskItr == 4 )
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 800f76a:	4916      	ldr	r1, [pc, #88]	; (800f7c4 <RegionUS915ApplyCFList+0x74>)
 800f76c:	680d      	ldr	r5, [r1, #0]
 800f76e:	f50c 71d8 	add.w	r1, ip, #432	; 0x1b0
 800f772:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
 800f776:	f835 401c 	ldrh.w	r4, [r5, ip, lsl #1]
 800f77a:	4021      	ands	r1, r4
 800f77c:	f825 101c 	strh.w	r1, [r5, ip, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800f780:	3301      	adds	r3, #1
 800f782:	b2db      	uxtb	r3, r3
 800f784:	3202      	adds	r2, #2
 800f786:	b2d2      	uxtb	r2, r2
 800f788:	2b04      	cmp	r3, #4
 800f78a:	d817      	bhi.n	800f7bc <RegionUS915ApplyCFList+0x6c>
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 800f78c:	6841      	ldr	r1, [r0, #4]
 800f78e:	4c0e      	ldr	r4, [pc, #56]	; (800f7c8 <RegionUS915ApplyCFList+0x78>)
 800f790:	6824      	ldr	r4, [r4, #0]
 800f792:	469c      	mov	ip, r3
 800f794:	5c89      	ldrb	r1, [r1, r2]
 800f796:	f503 75d8 	add.w	r5, r3, #432	; 0x1b0
 800f79a:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 800f79e:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800f7a2:	4496      	add	lr, r2
 800f7a4:	f89e e001 	ldrb.w	lr, [lr, #1]
 800f7a8:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
 800f7ac:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
        if( chMaskItr == 4 )
 800f7b0:	2b04      	cmp	r3, #4
 800f7b2:	d1da      	bne.n	800f76a <RegionUS915ApplyCFList+0x1a>
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 800f7b4:	b2c9      	uxtb	r1, r1
 800f7b6:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
 800f7ba:	e7d6      	b.n	800f76a <RegionUS915ApplyCFList+0x1a>
    }
#endif /* REGION_US915 */
}
 800f7bc:	bd30      	pop	{r4, r5, pc}
 800f7be:	4770      	bx	lr
 800f7c0:	4770      	bx	lr
 800f7c2:	bf00      	nop
 800f7c4:	2000101c 	.word	0x2000101c
 800f7c8:	20001020 	.word	0x20001020

0800f7cc <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800f7cc:	b570      	push	{r4, r5, r6, lr}
 800f7ce:	4605      	mov	r5, r0
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 800f7d0:	2204      	movs	r2, #4
 800f7d2:	2100      	movs	r1, #0
 800f7d4:	6800      	ldr	r0, [r0, #0]
 800f7d6:	f7fe fcbd 	bl	800e154 <RegionCommonCountChannels>

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 800f7da:	2801      	cmp	r0, #1
 800f7dc:	d031      	beq.n	800f842 <RegionUS915ChanMaskSet+0x76>
        ( nbChannels > 0 ) )
    {
        return false;
    }

    switch( chanMaskSet->ChannelsMaskType )
 800f7de:	792c      	ldrb	r4, [r5, #4]
 800f7e0:	b11c      	cbz	r4, 800f7ea <RegionUS915ChanMaskSet+0x1e>
 800f7e2:	2c01      	cmp	r4, #1
 800f7e4:	d023      	beq.n	800f82e <RegionUS915ChanMaskSet+0x62>
 800f7e6:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 800f7e8:	bd70      	pop	{r4, r5, r6, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800f7ea:	4e17      	ldr	r6, [pc, #92]	; (800f848 <RegionUS915ChanMaskSet+0x7c>)
 800f7ec:	6830      	ldr	r0, [r6, #0]
 800f7ee:	2206      	movs	r2, #6
 800f7f0:	6829      	ldr	r1, [r5, #0]
 800f7f2:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800f7f6:	f7fe fcc3 	bl	800e180 <RegionCommonChanMaskCopy>
            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 800f7fa:	6830      	ldr	r0, [r6, #0]
 800f7fc:	f890 3374 	ldrb.w	r3, [r0, #884]	; 0x374
 800f800:	f8a0 3374 	strh.w	r3, [r0, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800f804:	2300      	movs	r3, #0
 800f806:	f8a0 3376 	strh.w	r3, [r0, #886]	; 0x376
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800f80a:	e00c      	b.n	800f826 <RegionUS915ChanMaskSet+0x5a>
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800f80c:	4b0f      	ldr	r3, [pc, #60]	; (800f84c <RegionUS915ChanMaskSet+0x80>)
 800f80e:	681a      	ldr	r2, [r3, #0]
 800f810:	f504 73d8 	add.w	r3, r4, #432	; 0x1b0
 800f814:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800f818:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
 800f81c:	400b      	ands	r3, r1
 800f81e:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800f822:	3401      	adds	r4, #1
 800f824:	b2e4      	uxtb	r4, r4
 800f826:	2c05      	cmp	r4, #5
 800f828:	d9f0      	bls.n	800f80c <RegionUS915ChanMaskSet+0x40>
    return true;
 800f82a:	2001      	movs	r0, #1
 800f82c:	e7dc      	b.n	800f7e8 <RegionUS915ChanMaskSet+0x1c>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800f82e:	4b06      	ldr	r3, [pc, #24]	; (800f848 <RegionUS915ChanMaskSet+0x7c>)
 800f830:	6818      	ldr	r0, [r3, #0]
 800f832:	2206      	movs	r2, #6
 800f834:	6829      	ldr	r1, [r5, #0]
 800f836:	f500 705b 	add.w	r0, r0, #876	; 0x36c
 800f83a:	f7fe fca1 	bl	800e180 <RegionCommonChanMaskCopy>
    return true;
 800f83e:	2001      	movs	r0, #1
            break;
 800f840:	e7d2      	b.n	800f7e8 <RegionUS915ChanMaskSet+0x1c>
        return false;
 800f842:	2000      	movs	r0, #0
 800f844:	e7d0      	b.n	800f7e8 <RegionUS915ChanMaskSet+0x1c>
 800f846:	bf00      	nop
 800f848:	20001020 	.word	0x20001020
 800f84c:	2000101c 	.word	0x2000101c

0800f850 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800f850:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f852:	b083      	sub	sp, #12
 800f854:	460e      	mov	r6, r1
 800f856:	4617      	mov	r7, r2
 800f858:	461c      	mov	r4, r3
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 800f85a:	280d      	cmp	r0, #13
 800f85c:	bfa8      	it	ge
 800f85e:	200d      	movge	r0, #13
 800f860:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 800f862:	4d0f      	ldr	r5, [pc, #60]	; (800f8a0 <RegionUS915ComputeRxWindowParameters+0x50>)
 800f864:	4629      	mov	r1, r5
 800f866:	f7fe fee5 	bl	800e634 <RegionCommonGetBandwidth>
 800f86a:	70a0      	strb	r0, [r4, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 800f86c:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800f870:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 800f874:	4a0b      	ldr	r2, [pc, #44]	; (800f8a4 <RegionUS915ComputeRxWindowParameters+0x54>)
 800f876:	5cd0      	ldrb	r0, [r2, r3]
 800f878:	f7fe fda8 	bl	800e3cc <RegionCommonComputeSymbolTimeLoRa>
 800f87c:	4605      	mov	r5, r0

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800f87e:	4b0a      	ldr	r3, [pc, #40]	; (800f8a8 <RegionUS915ComputeRxWindowParameters+0x58>)
 800f880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f882:	4798      	blx	r3
 800f884:	4603      	mov	r3, r0
 800f886:	f104 020c 	add.w	r2, r4, #12
 800f88a:	9201      	str	r2, [sp, #4]
 800f88c:	3408      	adds	r4, #8
 800f88e:	9400      	str	r4, [sp, #0]
 800f890:	463a      	mov	r2, r7
 800f892:	4631      	mov	r1, r6
 800f894:	4628      	mov	r0, r5
 800f896:	f7fe fda7 	bl	800e3e8 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 800f89a:	b003      	add	sp, #12
 800f89c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f89e:	bf00      	nop
 800f8a0:	0801486c 	.word	0x0801486c
 800f8a4:	080148c0 	.word	0x080148c0
 800f8a8:	08014e54 	.word	0x08014e54

0800f8ac <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800f8ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f8b0:	b08b      	sub	sp, #44	; 0x2c
 800f8b2:	4604      	mov	r4, r0
 800f8b4:	460d      	mov	r5, r1
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 800f8b6:	f990 6001 	ldrsb.w	r6, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800f8ba:	6847      	ldr	r7, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800f8bc:	4b22      	ldr	r3, [pc, #136]	; (800f948 <RegionUS915RxConfig+0x9c>)
 800f8be:	685b      	ldr	r3, [r3, #4]
 800f8c0:	4798      	blx	r3
 800f8c2:	2800      	cmp	r0, #0
 800f8c4:	d13d      	bne.n	800f942 <RegionUS915RxConfig+0x96>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800f8c6:	7ce3      	ldrb	r3, [r4, #19]
 800f8c8:	b933      	cbnz	r3, 800f8d8 <RegionUS915RxConfig+0x2c>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 800f8ca:	7827      	ldrb	r7, [r4, #0]
 800f8cc:	f007 0307 	and.w	r3, r7, #7
 800f8d0:	4a1e      	ldr	r2, [pc, #120]	; (800f94c <RegionUS915RxConfig+0xa0>)
 800f8d2:	4f1f      	ldr	r7, [pc, #124]	; (800f950 <RegionUS915RxConfig+0xa4>)
 800f8d4:	fb02 7703 	mla	r7, r2, r3, r7
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 800f8d8:	4b1e      	ldr	r3, [pc, #120]	; (800f954 <RegionUS915RxConfig+0xa8>)
 800f8da:	f913 9006 	ldrsb.w	r9, [r3, r6]

    Radio.SetChannel( frequency );
 800f8de:	f8df 8068 	ldr.w	r8, [pc, #104]	; 800f948 <RegionUS915RxConfig+0x9c>
 800f8e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f8e6:	4638      	mov	r0, r7
 800f8e8:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800f8ea:	f8d8 8018 	ldr.w	r8, [r8, #24]
 800f8ee:	7ca3      	ldrb	r3, [r4, #18]
 800f8f0:	9309      	str	r3, [sp, #36]	; 0x24
 800f8f2:	2001      	movs	r0, #1
 800f8f4:	9008      	str	r0, [sp, #32]
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	9207      	str	r2, [sp, #28]
 800f8fa:	9206      	str	r2, [sp, #24]
 800f8fc:	9205      	str	r2, [sp, #20]
 800f8fe:	9204      	str	r2, [sp, #16]
 800f900:	9203      	str	r2, [sp, #12]
 800f902:	8923      	ldrh	r3, [r4, #8]
 800f904:	9302      	str	r3, [sp, #8]
 800f906:	2308      	movs	r3, #8
 800f908:	9301      	str	r3, [sp, #4]
 800f90a:	9200      	str	r2, [sp, #0]
 800f90c:	4603      	mov	r3, r0
 800f90e:	464a      	mov	r2, r9
 800f910:	78a1      	ldrb	r1, [r4, #2]
 800f912:	47c0      	blx	r8

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 800f914:	7c63      	ldrb	r3, [r4, #17]
 800f916:	b18b      	cbz	r3, 800f93c <RegionUS915RxConfig+0x90>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 800f918:	4b0f      	ldr	r3, [pc, #60]	; (800f958 <RegionUS915RxConfig+0xac>)
 800f91a:	5d99      	ldrb	r1, [r3, r6]
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800f91c:	4b0a      	ldr	r3, [pc, #40]	; (800f948 <RegionUS915RxConfig+0x9c>)
 800f91e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f920:	310d      	adds	r1, #13
 800f922:	b2c9      	uxtb	r1, r1
 800f924:	2001      	movs	r0, #1
 800f926:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800f928:	4632      	mov	r2, r6
 800f92a:	4639      	mov	r1, r7
 800f92c:	7ce0      	ldrb	r0, [r4, #19]
 800f92e:	f7fe fe93 	bl	800e658 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 800f932:	702e      	strb	r6, [r5, #0]
    return true;
 800f934:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_US915 */
}
 800f936:	b00b      	add	sp, #44	; 0x2c
 800f938:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 800f93c:	4b07      	ldr	r3, [pc, #28]	; (800f95c <RegionUS915RxConfig+0xb0>)
 800f93e:	5d99      	ldrb	r1, [r3, r6]
 800f940:	e7ec      	b.n	800f91c <RegionUS915RxConfig+0x70>
        return false;
 800f942:	2000      	movs	r0, #0
 800f944:	e7f7      	b.n	800f936 <RegionUS915RxConfig+0x8a>
 800f946:	bf00      	nop
 800f948:	08014e54 	.word	0x08014e54
 800f94c:	000927c0 	.word	0x000927c0
 800f950:	370870a0 	.word	0x370870a0
 800f954:	080148c0 	.word	0x080148c0
 800f958:	080148d0 	.word	0x080148d0
 800f95c:	080148e0 	.word	0x080148e0

0800f960 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800f960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f964:	b08d      	sub	sp, #52	; 0x34
 800f966:	4604      	mov	r4, r0
 800f968:	468b      	mov	fp, r1
 800f96a:	4617      	mov	r7, r2
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 800f96c:	f990 2001 	ldrsb.w	r2, [r0, #1]
 800f970:	4b32      	ldr	r3, [pc, #200]	; (800fa3c <RegionUS915TxConfig+0xdc>)
 800f972:	f913 a002 	ldrsb.w	sl, [r3, r2]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 800f976:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 800fa40 <RegionUS915TxConfig+0xe0>
 800f97a:	f8d9 3000 	ldr.w	r3, [r9]
 800f97e:	7801      	ldrb	r1, [r0, #0]
 800f980:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800f984:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800f988:	7a49      	ldrb	r1, [r1, #9]
 800f98a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800f98e:	482d      	ldr	r0, [pc, #180]	; (800fa44 <RegionUS915TxConfig+0xe4>)
 800f990:	6800      	ldr	r0, [r0, #0]
 800f992:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800f996:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800f99a:	f991 1002 	ldrsb.w	r1, [r1, #2]
 800f99e:	f994 0002 	ldrsb.w	r0, [r4, #2]
 800f9a2:	f7ff fce7 	bl	800f374 <LimitTxPower>
 800f9a6:	4606      	mov	r6, r0
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 800f9a8:	4927      	ldr	r1, [pc, #156]	; (800fa48 <RegionUS915TxConfig+0xe8>)
 800f9aa:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800f9ae:	f7fe fe41 	bl	800e634 <RegionCommonGetBandwidth>
 800f9b2:	900a      	str	r0, [sp, #40]	; 0x28
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 800f9b4:	2200      	movs	r2, #0
 800f9b6:	4925      	ldr	r1, [pc, #148]	; (800fa4c <RegionUS915TxConfig+0xec>)
 800f9b8:	4630      	mov	r0, r6
 800f9ba:	f7fe fd51 	bl	800e460 <RegionCommonComputeTxPower>
 800f9be:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800f9c0:	f8df 808c 	ldr.w	r8, [pc, #140]	; 800fa50 <RegionUS915TxConfig+0xf0>
 800f9c4:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800f9c8:	f8d9 1000 	ldr.w	r1, [r9]
 800f9cc:	7823      	ldrb	r3, [r4, #0]
 800f9ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f9d2:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800f9d6:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800f9d8:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800f9dc:	9308      	str	r3, [sp, #32]
 800f9de:	2200      	movs	r2, #0
 800f9e0:	9207      	str	r2, [sp, #28]
 800f9e2:	9206      	str	r2, [sp, #24]
 800f9e4:	9205      	str	r2, [sp, #20]
 800f9e6:	2501      	movs	r5, #1
 800f9e8:	9504      	str	r5, [sp, #16]
 800f9ea:	9203      	str	r2, [sp, #12]
 800f9ec:	2308      	movs	r3, #8
 800f9ee:	9302      	str	r3, [sp, #8]
 800f9f0:	9501      	str	r5, [sp, #4]
 800f9f2:	f8cd a000 	str.w	sl, [sp]
 800f9f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f9fa:	4628      	mov	r0, r5
 800f9fc:	f8d8 c01c 	ldr.w	ip, [r8, #28]
 800fa00:	47e0      	blx	ip
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800fa02:	f8d9 2000 	ldr.w	r2, [r9]
 800fa06:	7823      	ldrb	r3, [r4, #0]
 800fa08:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800fa0c:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800fa10:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fa14:	f7fe fe42 	bl	800e69c <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 800fa18:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 800fa1c:	7b21      	ldrb	r1, [r4, #12]
 800fa1e:	4628      	mov	r0, r5
 800fa20:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800fa22:	89a1      	ldrh	r1, [r4, #12]
 800fa24:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800fa28:	f7ff fc86 	bl	800f338 <GetTimeOnAir>
 800fa2c:	6038      	str	r0, [r7, #0]

    *txPower = txPowerLimited;
 800fa2e:	f88b 6000 	strb.w	r6, [fp]
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 800fa32:	4628      	mov	r0, r5
 800fa34:	b00d      	add	sp, #52	; 0x34
 800fa36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa3a:	bf00      	nop
 800fa3c:	080148c0 	.word	0x080148c0
 800fa40:	20001020 	.word	0x20001020
 800fa44:	20001018 	.word	0x20001018
 800fa48:	0801486c 	.word	0x0801486c
 800fa4c:	41f00000 	.word	0x41f00000
 800fa50:	08014e54 	.word	0x08014e54

0800fa54 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800fa54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fa58:	b091      	sub	sp, #68	; 0x44
 800fa5a:	4605      	mov	r5, r0
 800fa5c:	4688      	mov	r8, r1
 800fa5e:	4617      	mov	r7, r2
 800fa60:	461e      	mov	r6, r3
    uint8_t status = 0x07;
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800fa62:	2400      	movs	r4, #0
 800fa64:	940e      	str	r4, [sp, #56]	; 0x38
 800fa66:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 800fa6a:	940b      	str	r4, [sp, #44]	; 0x2c
 800fa6c:	940c      	str	r4, [sp, #48]	; 0x30
 800fa6e:	940d      	str	r4, [sp, #52]	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800fa70:	4b97      	ldr	r3, [pc, #604]	; (800fcd0 <RegionUS915LinkAdrReq+0x27c>)
 800fa72:	6819      	ldr	r1, [r3, #0]
 800fa74:	2206      	movs	r2, #6
 800fa76:	f501 7158 	add.w	r1, r1, #864	; 0x360
 800fa7a:	a80b      	add	r0, sp, #44	; 0x2c
 800fa7c:	f7fe fb80 	bl	800e180 <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800fa80:	e00d      	b.n	800fa9e <RegionUS915LinkAdrReq+0x4a>
        status = 0x07;

        if( linkAdrParams.ChMaskCtrl == 6 )
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 800fa82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fa86:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0xFFFF;
 800fa8a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0xFFFF;
 800fa8e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0xFFFF;
 800fa92:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800fa96:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 800fa9a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800fa9e:	7a2b      	ldrb	r3, [r5, #8]
 800faa0:	42a3      	cmp	r3, r4
 800faa2:	f240 8081 	bls.w	800fba8 <RegionUS915LinkAdrReq+0x154>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800faa6:	6868      	ldr	r0, [r5, #4]
 800faa8:	a90e      	add	r1, sp, #56	; 0x38
 800faaa:	4420      	add	r0, r4
 800faac:	f7fe fc18 	bl	800e2e0 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800fab0:	2800      	cmp	r0, #0
 800fab2:	d079      	beq.n	800fba8 <RegionUS915LinkAdrReq+0x154>
        bytesProcessed += nextIndex;
 800fab4:	4404      	add	r4, r0
 800fab6:	b2e4      	uxtb	r4, r4
        if( linkAdrParams.ChMaskCtrl == 6 )
 800fab8:	f89d c03b 	ldrb.w	ip, [sp, #59]	; 0x3b
 800fabc:	f1bc 0f06 	cmp.w	ip, #6
 800fac0:	d0df      	beq.n	800fa82 <RegionUS915LinkAdrReq+0x2e>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 800fac2:	f1bc 0f07 	cmp.w	ip, #7
 800fac6:	d00a      	beq.n	800fade <RegionUS915LinkAdrReq+0x8a>
            channelsMask[2] = 0x0000;
            channelsMask[3] = 0x0000;
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 800fac8:	f1bc 0f05 	cmp.w	ip, #5
 800facc:	d068      	beq.n	800fba0 <RegionUS915LinkAdrReq+0x14c>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 800face:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800fad2:	aa10      	add	r2, sp, #64	; 0x40
 800fad4:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 800fad8:	f82c 3c14 	strh.w	r3, [ip, #-20]
 800fadc:	e7df      	b.n	800fa9e <RegionUS915LinkAdrReq+0x4a>
            channelsMask[0] = 0x0000;
 800fade:	2300      	movs	r3, #0
 800fae0:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0x0000;
 800fae4:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0x0000;
 800fae8:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0x0000;
 800faec:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800faf0:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 800faf4:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800faf8:	e7d1      	b.n	800fa9e <RegionUS915LinkAdrReq+0x4a>
                        channelsMask[cntChannelMask] |= 0xFF00;
 800fafa:	aa10      	add	r2, sp, #64	; 0x40
 800fafc:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800fb00:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800fb04:	f062 02ff 	orn	r2, r2, #255	; 0xff
 800fb08:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 800fb0c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800fb10:	4313      	orrs	r3, r2
 800fb12:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                        cntChannelMask++;
 800fb16:	3101      	adds	r1, #1
 800fb18:	b2c9      	uxtb	r1, r1
            for( uint8_t i = 0; i <= 7; i++ )
 800fb1a:	f10c 0c01 	add.w	ip, ip, #1
 800fb1e:	fa5f fc8c 	uxtb.w	ip, ip
 800fb22:	f1bc 0f07 	cmp.w	ip, #7
 800fb26:	d8ba      	bhi.n	800fa9e <RegionUS915LinkAdrReq+0x4a>
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 800fb28:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 800fb2c:	2301      	movs	r3, #1
 800fb2e:	fa03 f30c 	lsl.w	r3, r3, ip
 800fb32:	421a      	tst	r2, r3
 800fb34:	d011      	beq.n	800fb5a <RegionUS915LinkAdrReq+0x106>
                    if( ( i % 2 ) == 0 )
 800fb36:	f01c 0f01 	tst.w	ip, #1
 800fb3a:	d1de      	bne.n	800fafa <RegionUS915LinkAdrReq+0xa6>
                        channelsMask[cntChannelMask] |= 0x00FF;
 800fb3c:	aa10      	add	r2, sp, #64	; 0x40
 800fb3e:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800fb42:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800fb46:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 800fb4a:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 800fb4e:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800fb52:	4313      	orrs	r3, r2
 800fb54:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800fb58:	e7df      	b.n	800fb1a <RegionUS915LinkAdrReq+0xc6>
                    if( ( i % 2 ) == 0 )
 800fb5a:	f01c 0f01 	tst.w	ip, #1
 800fb5e:	d10f      	bne.n	800fb80 <RegionUS915LinkAdrReq+0x12c>
                        channelsMask[cntChannelMask] &= 0xFF00;
 800fb60:	aa10      	add	r2, sp, #64	; 0x40
 800fb62:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800fb66:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800fb6a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800fb6e:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 800fb72:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800fb76:	ea22 0303 	bic.w	r3, r2, r3
 800fb7a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800fb7e:	e7cc      	b.n	800fb1a <RegionUS915LinkAdrReq+0xc6>
                        channelsMask[cntChannelMask] &= 0x00FF;
 800fb80:	aa10      	add	r2, sp, #64	; 0x40
 800fb82:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 800fb86:	f812 0c14 	ldrb.w	r0, [r2, #-20]
 800fb8a:	f822 0c14 	strh.w	r0, [r2, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 800fb8e:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800fb92:	ea22 0303 	bic.w	r3, r2, r3
 800fb96:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                        cntChannelMask++;
 800fb9a:	3101      	adds	r1, #1
 800fb9c:	b2c9      	uxtb	r1, r1
 800fb9e:	e7bc      	b.n	800fb1a <RegionUS915LinkAdrReq+0xc6>
            for( uint8_t i = 0; i <= 7; i++ )
 800fba0:	f04f 0c00 	mov.w	ip, #0
            uint8_t cntChannelMask = 0;
 800fba4:	4661      	mov	r1, ip
 800fba6:	e7bc      	b.n	800fb22 <RegionUS915LinkAdrReq+0xce>
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 800fba8:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800fbac:	2b03      	cmp	r3, #3
 800fbae:	dd58      	ble.n	800fc62 <RegionUS915LinkAdrReq+0x20e>
 800fbb0:	f04f 0907 	mov.w	r9, #7
    {
        status &= 0xFE; // Channel mask KO
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800fbb4:	2302      	movs	r3, #2
 800fbb6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800fbba:	7a6b      	ldrb	r3, [r5, #9]
 800fbbc:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    phyParam = RegionUS915GetPhyParam( &getPhy );
 800fbc0:	a809      	add	r0, sp, #36	; 0x24
 800fbc2:	f7ff fbf3 	bl	800f3ac <RegionUS915GetPhyParam>
 800fbc6:	9008      	str	r0, [sp, #32]

    linkAdrVerifyParams.Status = status;
 800fbc8:	f88d 9004 	strb.w	r9, [sp, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800fbcc:	7aab      	ldrb	r3, [r5, #10]
 800fbce:	f88d 3005 	strb.w	r3, [sp, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800fbd2:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800fbd6:	f88d 3006 	strb.w	r3, [sp, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800fbda:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 800fbde:	f88d 3007 	strb.w	r3, [sp, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800fbe2:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800fbe6:	f88d 3008 	strb.w	r3, [sp, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800fbea:	f995 300b 	ldrsb.w	r3, [r5, #11]
 800fbee:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800fbf2:	f995 300c 	ldrsb.w	r3, [r5, #12]
 800fbf6:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800fbfa:	f995 300d 	ldrsb.w	r3, [r5, #13]
 800fbfe:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 800fc02:	2348      	movs	r3, #72	; 0x48
 800fc04:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 800fc08:	ab0b      	add	r3, sp, #44	; 0x2c
 800fc0a:	9304      	str	r3, [sp, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800fc0c:	f88d 0014 	strb.w	r0, [sp, #20]
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 800fc10:	2304      	movs	r3, #4
 800fc12:	f88d 3015 	strb.w	r3, [sp, #21]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800fc16:	4b2e      	ldr	r3, [pc, #184]	; (800fcd0 <RegionUS915LinkAdrReq+0x27c>)
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	9306      	str	r3, [sp, #24]
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 800fc1c:	230e      	movs	r3, #14
 800fc1e:	f88d 301c 	strb.w	r3, [sp, #28]
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 800fc22:	2300      	movs	r3, #0
 800fc24:	f88d 301d 	strb.w	r3, [sp, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800fc28:	682b      	ldr	r3, [r5, #0]
 800fc2a:	9300      	str	r3, [sp, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800fc2c:	ab0e      	add	r3, sp, #56	; 0x38
 800fc2e:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 800fc32:	f10d 0139 	add.w	r1, sp, #57	; 0x39
 800fc36:	4668      	mov	r0, sp
 800fc38:	f7fe fb70 	bl	800e31c <RegionCommonLinkAdrReqVerifyParams>
 800fc3c:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800fc3e:	2807      	cmp	r0, #7
 800fc40:	d01c      	beq.n	800fc7c <RegionUS915LinkAdrReq+0x228>
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800fc42:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800fc46:	f888 3000 	strb.w	r3, [r8]
    *txPowOut = linkAdrParams.TxPower;
 800fc4a:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 800fc4e:	703b      	strb	r3, [r7, #0]
    *nbRepOut = linkAdrParams.NbRep;
 800fc50:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800fc54:	7033      	strb	r3, [r6, #0]
    *nbBytesParsed = bytesProcessed;
 800fc56:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800fc58:	701c      	strb	r4, [r3, #0]

#endif /* REGION_US915 */
    return status;
}
 800fc5a:	4628      	mov	r0, r5
 800fc5c:	b011      	add	sp, #68	; 0x44
 800fc5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 800fc62:	2204      	movs	r2, #4
 800fc64:	2100      	movs	r1, #0
 800fc66:	a80b      	add	r0, sp, #44	; 0x2c
 800fc68:	f7fe fa74 	bl	800e154 <RegionCommonCountChannels>
 800fc6c:	2801      	cmp	r0, #1
 800fc6e:	d902      	bls.n	800fc76 <RegionUS915LinkAdrReq+0x222>
 800fc70:	f04f 0907 	mov.w	r9, #7
 800fc74:	e79e      	b.n	800fbb4 <RegionUS915LinkAdrReq+0x160>
        status &= 0xFE; // Channel mask KO
 800fc76:	f04f 0906 	mov.w	r9, #6
 800fc7a:	e79b      	b.n	800fbb4 <RegionUS915LinkAdrReq+0x160>
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 800fc7c:	f8df 9050 	ldr.w	r9, [pc, #80]	; 800fcd0 <RegionUS915LinkAdrReq+0x27c>
 800fc80:	f8d9 0000 	ldr.w	r0, [r9]
 800fc84:	2206      	movs	r2, #6
 800fc86:	a90b      	add	r1, sp, #44	; 0x2c
 800fc88:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800fc8c:	f7fe fa78 	bl	800e180 <RegionCommonChanMaskCopy>
        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 800fc90:	4b10      	ldr	r3, [pc, #64]	; (800fcd4 <RegionUS915LinkAdrReq+0x280>)
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	f8d9 2000 	ldr.w	r2, [r9]
 800fc98:	f8b2 1360 	ldrh.w	r1, [r2, #864]	; 0x360
 800fc9c:	8818      	ldrh	r0, [r3, #0]
 800fc9e:	4001      	ands	r1, r0
 800fca0:	8019      	strh	r1, [r3, #0]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 800fca2:	f8b2 1362 	ldrh.w	r1, [r2, #866]	; 0x362
 800fca6:	8858      	ldrh	r0, [r3, #2]
 800fca8:	4001      	ands	r1, r0
 800fcaa:	8059      	strh	r1, [r3, #2]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 800fcac:	f8b2 1364 	ldrh.w	r1, [r2, #868]	; 0x364
 800fcb0:	8898      	ldrh	r0, [r3, #4]
 800fcb2:	4001      	ands	r1, r0
 800fcb4:	8099      	strh	r1, [r3, #4]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 800fcb6:	f8b2 1366 	ldrh.w	r1, [r2, #870]	; 0x366
 800fcba:	88d8      	ldrh	r0, [r3, #6]
 800fcbc:	4001      	ands	r1, r0
 800fcbe:	80d9      	strh	r1, [r3, #6]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800fcc0:	f8b2 1368 	ldrh.w	r1, [r2, #872]	; 0x368
 800fcc4:	8119      	strh	r1, [r3, #8]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 800fcc6:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
 800fcca:	815a      	strh	r2, [r3, #10]
 800fccc:	e7b9      	b.n	800fc42 <RegionUS915LinkAdrReq+0x1ee>
 800fcce:	bf00      	nop
 800fcd0:	20001020 	.word	0x20001020
 800fcd4:	2000101c 	.word	0x2000101c

0800fcd8 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800fcd8:	b538      	push	{r3, r4, r5, lr}
 800fcda:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 800fcdc:	6840      	ldr	r0, [r0, #4]
 800fcde:	f7ff fafb 	bl	800f2d8 <VerifyRfFreq>
 800fce2:	b310      	cbz	r0, 800fd2a <RegionUS915RxParamSetupReq+0x52>
    uint8_t status = 0x07;
 800fce4:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 800fce6:	220d      	movs	r2, #13
 800fce8:	2108      	movs	r1, #8
 800fcea:	f994 0000 	ldrsb.w	r0, [r4]
 800fcee:	f7fe f9d6 	bl	800e09e <RegionCommonValueInRange>
 800fcf2:	b908      	cbnz	r0, 800fcf8 <RegionUS915RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 800fcf4:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 800fcf8:	2207      	movs	r2, #7
 800fcfa:	2105      	movs	r1, #5
 800fcfc:	f994 0000 	ldrsb.w	r0, [r4]
 800fd00:	f7fe f9cd 	bl	800e09e <RegionCommonValueInRange>
 800fd04:	2801      	cmp	r0, #1
 800fd06:	d003      	beq.n	800fd10 <RegionUS915RxParamSetupReq+0x38>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 800fd08:	f994 3000 	ldrsb.w	r3, [r4]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 800fd0c:	2b0d      	cmp	r3, #13
 800fd0e:	dd01      	ble.n	800fd14 <RegionUS915RxParamSetupReq+0x3c>
    {
        status &= 0xFD; // Datarate KO
 800fd10:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 800fd14:	2203      	movs	r2, #3
 800fd16:	2100      	movs	r1, #0
 800fd18:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800fd1c:	f7fe f9bf 	bl	800e09e <RegionCommonValueInRange>
 800fd20:	b908      	cbnz	r0, 800fd26 <RegionUS915RxParamSetupReq+0x4e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800fd22:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_US915 */
    return status;
}
 800fd26:	4628      	mov	r0, r5
 800fd28:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800fd2a:	2506      	movs	r5, #6
 800fd2c:	e7db      	b.n	800fce6 <RegionUS915RxParamSetupReq+0xe>

0800fd2e <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
    // Do not accept the request
    return -1;
}
 800fd2e:	f04f 30ff 	mov.w	r0, #4294967295
 800fd32:	4770      	bx	lr

0800fd34 <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 800fd34:	f04f 30ff 	mov.w	r0, #4294967295
 800fd38:	4770      	bx	lr

0800fd3a <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
    // Do not accept the request
    return -1;
}
 800fd3a:	f04f 30ff 	mov.w	r0, #4294967295
 800fd3e:	4770      	bx	lr

0800fd40 <RegionUS915AlternateDr>:
int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 800fd40:	b999      	cbnz	r1, 800fd6a <RegionUS915AlternateDr+0x2a>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 800fd42:	4b0e      	ldr	r3, [pc, #56]	; (800fd7c <RegionUS915AlternateDr+0x3c>)
 800fd44:	681a      	ldr	r2, [r3, #0]
 800fd46:	7b53      	ldrb	r3, [r2, #13]
 800fd48:	3301      	adds	r3, #1
 800fd4a:	7353      	strb	r3, [r2, #13]
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 800fd4c:	4b0b      	ldr	r3, [pc, #44]	; (800fd7c <RegionUS915AlternateDr+0x3c>)
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	7b5a      	ldrb	r2, [r3, #13]
 800fd52:	4b0b      	ldr	r3, [pc, #44]	; (800fd80 <RegionUS915AlternateDr+0x40>)
 800fd54:	fba3 1302 	umull	r1, r3, r3, r2
 800fd58:	085b      	lsrs	r3, r3, #1
 800fd5a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800fd5e:	1ad3      	subs	r3, r2, r3
 800fd60:	f013 0fff 	tst.w	r3, #255	; 0xff
 800fd64:	d007      	beq.n	800fd76 <RegionUS915AlternateDr+0x36>
        // Use DR_4 every 9th times.
        currentDr = DR_4;
    }
    else
    {
        currentDr = DR_0;
 800fd66:	2000      	movs	r0, #0
    }
    return currentDr;
#else
    return -1;
#endif /* REGION_US915 */
}
 800fd68:	4770      	bx	lr
        RegionNvmGroup1->JoinTrialsCounter--;
 800fd6a:	4b04      	ldr	r3, [pc, #16]	; (800fd7c <RegionUS915AlternateDr+0x3c>)
 800fd6c:	681a      	ldr	r2, [r3, #0]
 800fd6e:	7b53      	ldrb	r3, [r2, #13]
 800fd70:	3b01      	subs	r3, #1
 800fd72:	7353      	strb	r3, [r2, #13]
 800fd74:	e7ea      	b.n	800fd4c <RegionUS915AlternateDr+0xc>
        currentDr = DR_4;
 800fd76:	2004      	movs	r0, #4
 800fd78:	4770      	bx	lr
 800fd7a:	bf00      	nop
 800fd7c:	2000101c 	.word	0x2000101c
 800fd80:	38e38e39 	.word	0x38e38e39

0800fd84 <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800fd84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd88:	b0a4      	sub	sp, #144	; 0x90
 800fd8a:	4604      	mov	r4, r0
 800fd8c:	460e      	mov	r6, r1
 800fd8e:	4690      	mov	r8, r2
 800fd90:	461f      	mov	r7, r3
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 800fd92:	2500      	movs	r5, #0
 800fd94:	f88d 508f 	strb.w	r5, [sp, #143]	; 0x8f
    uint8_t nbRestrictedChannels = 0;
 800fd98:	f88d 508e 	strb.w	r5, [sp, #142]	; 0x8e
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 800fd9c:	9511      	str	r5, [sp, #68]	; 0x44
 800fd9e:	2244      	movs	r2, #68	; 0x44
 800fda0:	4629      	mov	r1, r5
 800fda2:	a812      	add	r0, sp, #72	; 0x48
 800fda4:	f003 fc4e 	bl	8013644 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 800fda8:	2204      	movs	r2, #4
 800fdaa:	4629      	mov	r1, r5
 800fdac:	4b49      	ldr	r3, [pc, #292]	; (800fed4 <RegionUS915NextChannel+0x150>)
 800fdae:	6818      	ldr	r0, [r3, #0]
 800fdb0:	f7fe f9d0 	bl	800e154 <RegionCommonCountChannels>
 800fdb4:	2800      	cmp	r0, #0
 800fdb6:	d052      	beq.n	800fe5e <RegionUS915NextChannel+0xda>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 800fdb8:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800fdbc:	2b03      	cmp	r3, #3
 800fdbe:	dd08      	ble.n	800fdd2 <RegionUS915NextChannel+0x4e>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 800fdc0:	4b44      	ldr	r3, [pc, #272]	; (800fed4 <RegionUS915NextChannel+0x150>)
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	7a1a      	ldrb	r2, [r3, #8]
 800fdc6:	b922      	cbnz	r2, 800fdd2 <RegionUS915NextChannel+0x4e>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800fdc8:	4a43      	ldr	r2, [pc, #268]	; (800fed8 <RegionUS915NextChannel+0x154>)
 800fdca:	6812      	ldr	r2, [r2, #0]
 800fdcc:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 800fdd0:	811a      	strh	r2, [r3, #8]
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800fdd2:	7a63      	ldrb	r3, [r4, #9]
 800fdd4:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800fdd8:	7a23      	ldrb	r3, [r4, #8]
 800fdda:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 800fdde:	4b3d      	ldr	r3, [pc, #244]	; (800fed4 <RegionUS915NextChannel+0x150>)
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	9304      	str	r3, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800fde4:	4b3c      	ldr	r3, [pc, #240]	; (800fed8 <RegionUS915NextChannel+0x154>)
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	9305      	str	r3, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 800fdea:	4b3c      	ldr	r3, [pc, #240]	; (800fedc <RegionUS915NextChannel+0x158>)
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	9306      	str	r3, [sp, #24]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 800fdf0:	2348      	movs	r3, #72	; 0x48
 800fdf2:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = NULL;
 800fdf6:	2300      	movs	r3, #0
 800fdf8:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800fdfa:	6823      	ldr	r3, [r4, #0]
 800fdfc:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800fdfe:	6863      	ldr	r3, [r4, #4]
 800fe00:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800fe02:	7aa3      	ldrb	r3, [r4, #10]
 800fe04:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 800fe08:	2301      	movs	r3, #1
 800fe0a:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800fe0e:	ab03      	add	r3, sp, #12
 800fe10:	9310      	str	r3, [sp, #64]	; 0x40

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800fe12:	ab0c      	add	r3, sp, #48	; 0x30
 800fe14:	f104 020c 	add.w	r2, r4, #12
 800fe18:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fe1c:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800fe20:	7d23      	ldrb	r3, [r4, #20]
 800fe22:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800fe26:	8ae1      	ldrh	r1, [r4, #22]
 800fe28:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800fe2c:	f7ff fa84 	bl	800f338 <GetTimeOnAir>
 800fe30:	900f      	str	r0, [sp, #60]	; 0x3c
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800fe32:	f8cd 8004 	str.w	r8, [sp, #4]
 800fe36:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 800fe3a:	9300      	str	r3, [sp, #0]
 800fe3c:	f10d 038f 	add.w	r3, sp, #143	; 0x8f
 800fe40:	aa11      	add	r2, sp, #68	; 0x44
 800fe42:	4639      	mov	r1, r7
 800fe44:	a809      	add	r0, sp, #36	; 0x24
 800fe46:	f7fe fb87 	bl	800e558 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800fe4a:	4605      	mov	r5, r0
 800fe4c:	2800      	cmp	r0, #0
 800fe4e:	d13c      	bne.n	800feca <RegionUS915NextChannel+0x146>
    {
        if( nextChanParams->Joined == true )
 800fe50:	7a63      	ldrb	r3, [r4, #9]
 800fe52:	b98b      	cbnz	r3, 800fe78 <RegionUS915NextChannel+0xf4>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 800fe54:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800fe58:	b1db      	cbz	r3, 800fe92 <RegionUS915NextChannel+0x10e>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 800fe5a:	4603      	mov	r3, r0
 800fe5c:	e026      	b.n	800feac <RegionUS915NextChannel+0x128>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 800fe5e:	4d1d      	ldr	r5, [pc, #116]	; (800fed4 <RegionUS915NextChannel+0x150>)
 800fe60:	4b1d      	ldr	r3, [pc, #116]	; (800fed8 <RegionUS915NextChannel+0x154>)
 800fe62:	6819      	ldr	r1, [r3, #0]
 800fe64:	2204      	movs	r2, #4
 800fe66:	f501 7158 	add.w	r1, r1, #864	; 0x360
 800fe6a:	6828      	ldr	r0, [r5, #0]
 800fe6c:	f7fe f988 	bl	800e180 <RegionCommonChanMaskCopy>
        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800fe70:	682b      	ldr	r3, [r5, #0]
 800fe72:	2200      	movs	r2, #0
 800fe74:	731a      	strb	r2, [r3, #12]
 800fe76:	e79f      	b.n	800fdb8 <RegionUS915NextChannel+0x34>
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800fe78:	f89d 108f 	ldrb.w	r1, [sp, #143]	; 0x8f
 800fe7c:	3901      	subs	r1, #1
 800fe7e:	f000 ff2f 	bl	8010ce0 <randr>
 800fe82:	f100 0390 	add.w	r3, r0, #144	; 0x90
 800fe86:	eb0d 0003 	add.w	r0, sp, r3
 800fe8a:	f810 3c4c 	ldrb.w	r3, [r0, #-76]
 800fe8e:	7033      	strb	r3, [r6, #0]
 800fe90:	e015      	b.n	800febe <RegionUS915NextChannel+0x13a>
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 800fe92:	4b10      	ldr	r3, [pc, #64]	; (800fed4 <RegionUS915NextChannel+0x150>)
 800fe94:	6818      	ldr	r0, [r3, #0]
 800fe96:	4632      	mov	r2, r6
 800fe98:	f100 010c 	add.w	r1, r0, #12
 800fe9c:	f7fd ffe2 	bl	800de64 <RegionBaseUSComputeNext125kHzJoinChannel>
 800fea0:	2803      	cmp	r0, #3
 800fea2:	d10c      	bne.n	800febe <RegionUS915NextChannel+0x13a>
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 800fea4:	4605      	mov	r5, r0
 800fea6:	e010      	b.n	800feca <RegionUS915NextChannel+0x146>
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
                {
                    i++;
 800fea8:	3301      	adds	r3, #1
 800feaa:	b2db      	uxtb	r3, r3
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 800feac:	4a09      	ldr	r2, [pc, #36]	; (800fed4 <RegionUS915NextChannel+0x150>)
 800feae:	6812      	ldr	r2, [r2, #0]
 800feb0:	7a10      	ldrb	r0, [r2, #8]
 800feb2:	4118      	asrs	r0, r3
 800feb4:	f010 0f01 	tst.w	r0, #1
 800feb8:	d0f6      	beq.n	800fea8 <RegionUS915NextChannel+0x124>
                }
                *channel = 64 + i;
 800feba:	3340      	adds	r3, #64	; 0x40
 800febc:	7033      	strb	r3, [r6, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 800febe:	2248      	movs	r2, #72	; 0x48
 800fec0:	7831      	ldrb	r1, [r6, #0]
 800fec2:	4b04      	ldr	r3, [pc, #16]	; (800fed4 <RegionUS915NextChannel+0x150>)
 800fec4:	6818      	ldr	r0, [r3, #0]
 800fec6:	f7fe f92c 	bl	800e122 <RegionCommonChanDisable>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 800feca:	4628      	mov	r0, r5
 800fecc:	b024      	add	sp, #144	; 0x90
 800fece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fed2:	bf00      	nop
 800fed4:	2000101c 	.word	0x2000101c
 800fed8:	20001020 	.word	0x20001020
 800fedc:	20001018 	.word	0x20001018

0800fee0 <RegionUS915ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 800fee0:	4b04      	ldr	r3, [pc, #16]	; (800fef4 <RegionUS915ApplyDrOffset+0x14>)
 800fee2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800fee6:	5698      	ldrsb	r0, [r3, r2]

    if( datarate < 0 )
 800fee8:	2800      	cmp	r0, #0
 800feea:	db01      	blt.n	800fef0 <RegionUS915ApplyDrOffset+0x10>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_US915 */
}
 800feec:	b2c0      	uxtb	r0, r0
 800feee:	4770      	bx	lr
        datarate = DR_0;
 800fef0:	2000      	movs	r0, #0
 800fef2:	e7fb      	b.n	800feec <RegionUS915ApplyDrOffset+0xc>
 800fef4:	080148ac 	.word	0x080148ac

0800fef8 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800fef8:	b510      	push	{r4, lr}
 800fefa:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 800fefc:	2210      	movs	r2, #16
 800fefe:	2100      	movs	r1, #0
 800ff00:	30f1      	adds	r0, #241	; 0xf1
 800ff02:	f000 ff12 	bl	8010d2a <memset1>
    ctx->M_n = 0;
 800ff06:	2100      	movs	r1, #0
 800ff08:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800ff0c:	22f0      	movs	r2, #240	; 0xf0
 800ff0e:	4620      	mov	r0, r4
 800ff10:	f000 ff0b 	bl	8010d2a <memset1>
}
 800ff14:	bd10      	pop	{r4, pc}

0800ff16 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800ff16:	b508      	push	{r3, lr}
 800ff18:	4602      	mov	r2, r0
 800ff1a:	4608      	mov	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800ff1c:	2110      	movs	r1, #16
 800ff1e:	f000 fb3b 	bl	8010598 <lorawan_aes_set_key>
}
 800ff22:	bd08      	pop	{r3, pc}

0800ff24 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800ff24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff28:	b084      	sub	sp, #16
 800ff2a:	4604      	mov	r4, r0
 800ff2c:	460d      	mov	r5, r1
 800ff2e:	4616      	mov	r6, r2
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800ff30:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d054      	beq.n	800ffe2 <AES_CMAC_Update+0xbe>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800ff38:	f1c3 0810 	rsb	r8, r3, #16
 800ff3c:	4647      	mov	r7, r8
 800ff3e:	4590      	cmp	r8, r2
 800ff40:	bf28      	it	cs
 800ff42:	4617      	movcs	r7, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800ff44:	f200 1001 	addw	r0, r0, #257	; 0x101
 800ff48:	b2ba      	uxth	r2, r7
 800ff4a:	4418      	add	r0, r3
 800ff4c:	f000 fed5 	bl	8010cfa <memcpy1>
        ctx->M_n += mlen;
 800ff50:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800ff54:	443b      	add	r3, r7
 800ff56:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800ff5a:	2b0f      	cmp	r3, #15
 800ff5c:	d94d      	bls.n	800fffa <AES_CMAC_Update+0xd6>
 800ff5e:	45b0      	cmp	r8, r6
 800ff60:	d24b      	bcs.n	800fffa <AES_CMAC_Update+0xd6>
            return;
        XOR( ctx->M_last, ctx->X );
 800ff62:	2300      	movs	r3, #0
 800ff64:	e008      	b.n	800ff78 <AES_CMAC_Update+0x54>
 800ff66:	18e2      	adds	r2, r4, r3
 800ff68:	f892 10f1 	ldrb.w	r1, [r2, #241]	; 0xf1
 800ff6c:	f892 0101 	ldrb.w	r0, [r2, #257]	; 0x101
 800ff70:	4041      	eors	r1, r0
 800ff72:	f882 10f1 	strb.w	r1, [r2, #241]	; 0xf1
 800ff76:	3301      	adds	r3, #1
 800ff78:	2b0f      	cmp	r3, #15
 800ff7a:	ddf4      	ble.n	800ff66 <AES_CMAC_Update+0x42>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800ff7c:	f104 08f1 	add.w	r8, r4, #241	; 0xf1
 800ff80:	2210      	movs	r2, #16
 800ff82:	4641      	mov	r1, r8
 800ff84:	4668      	mov	r0, sp
 800ff86:	f000 feb8 	bl	8010cfa <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800ff8a:	4622      	mov	r2, r4
 800ff8c:	4669      	mov	r1, sp
 800ff8e:	4668      	mov	r0, sp
 800ff90:	f000 fb84 	bl	801069c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800ff94:	2210      	movs	r2, #16
 800ff96:	4669      	mov	r1, sp
 800ff98:	4640      	mov	r0, r8
 800ff9a:	f000 feae 	bl	8010cfa <memcpy1>

        data += mlen;
 800ff9e:	443d      	add	r5, r7
        len -= mlen;
 800ffa0:	1bf6      	subs	r6, r6, r7
 800ffa2:	e01e      	b.n	800ffe2 <AES_CMAC_Update+0xbe>
    }
    while( len > 16 )
    { /* not last block */

        XOR( data, ctx->X );
 800ffa4:	eb04 0e03 	add.w	lr, r4, r3
 800ffa8:	f89e c0f1 	ldrb.w	ip, [lr, #241]	; 0xf1
 800ffac:	5cea      	ldrb	r2, [r5, r3]
 800ffae:	ea8c 0c02 	eor.w	ip, ip, r2
 800ffb2:	f88e c0f1 	strb.w	ip, [lr, #241]	; 0xf1
 800ffb6:	3301      	adds	r3, #1
 800ffb8:	2b0f      	cmp	r3, #15
 800ffba:	ddf3      	ble.n	800ffa4 <AES_CMAC_Update+0x80>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800ffbc:	f104 07f1 	add.w	r7, r4, #241	; 0xf1
 800ffc0:	2210      	movs	r2, #16
 800ffc2:	4639      	mov	r1, r7
 800ffc4:	4668      	mov	r0, sp
 800ffc6:	f000 fe98 	bl	8010cfa <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800ffca:	4622      	mov	r2, r4
 800ffcc:	4669      	mov	r1, sp
 800ffce:	4668      	mov	r0, sp
 800ffd0:	f000 fb64 	bl	801069c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800ffd4:	2210      	movs	r2, #16
 800ffd6:	4669      	mov	r1, sp
 800ffd8:	4638      	mov	r0, r7
 800ffda:	f000 fe8e 	bl	8010cfa <memcpy1>

        data += 16;
 800ffde:	3510      	adds	r5, #16
        len -= 16;
 800ffe0:	3e10      	subs	r6, #16
    while( len > 16 )
 800ffe2:	2e10      	cmp	r6, #16
 800ffe4:	d901      	bls.n	800ffea <AES_CMAC_Update+0xc6>
        XOR( data, ctx->X );
 800ffe6:	2300      	movs	r3, #0
 800ffe8:	e7e6      	b.n	800ffb8 <AES_CMAC_Update+0x94>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800ffea:	b2b2      	uxth	r2, r6
 800ffec:	4629      	mov	r1, r5
 800ffee:	f204 1001 	addw	r0, r4, #257	; 0x101
 800fff2:	f000 fe82 	bl	8010cfa <memcpy1>
    ctx->M_n = len;
 800fff6:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
}
 800fffa:	b004      	add	sp, #16
 800fffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010000 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 8010000:	b530      	push	{r4, r5, lr}
 8010002:	b089      	sub	sp, #36	; 0x24
 8010004:	4605      	mov	r5, r0
 8010006:	460c      	mov	r4, r1
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 8010008:	2210      	movs	r2, #16
 801000a:	2100      	movs	r1, #0
 801000c:	eb0d 0002 	add.w	r0, sp, r2
 8010010:	f000 fe8b 	bl	8010d2a <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 8010014:	4622      	mov	r2, r4
 8010016:	a904      	add	r1, sp, #16
 8010018:	4608      	mov	r0, r1
 801001a:	f000 fb3f 	bl	801069c <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 801001e:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 8010022:	2b00      	cmp	r3, #0
 8010024:	db01      	blt.n	801002a <AES_CMAC_Final+0x2a>
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 8010026:	2300      	movs	r3, #0
 8010028:	e030      	b.n	801008c <AES_CMAC_Final+0x8c>
        LSHIFT( K, K );
 801002a:	2300      	movs	r3, #0
 801002c:	2b0e      	cmp	r3, #14
 801002e:	dc11      	bgt.n	8010054 <AES_CMAC_Final+0x54>
 8010030:	f103 0220 	add.w	r2, r3, #32
 8010034:	eb0d 0102 	add.w	r1, sp, r2
 8010038:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 801003c:	3301      	adds	r3, #1
 801003e:	f103 0220 	add.w	r2, r3, #32
 8010042:	446a      	add	r2, sp
 8010044:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8010048:	09d2      	lsrs	r2, r2, #7
 801004a:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 801004e:	f801 2c10 	strb.w	r2, [r1, #-16]
 8010052:	e7eb      	b.n	801002c <AES_CMAC_Final+0x2c>
 8010054:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8010058:	005b      	lsls	r3, r3, #1
 801005a:	b2db      	uxtb	r3, r3
 801005c:	f88d 301f 	strb.w	r3, [sp, #31]
        K[15] ^= 0x87;
 8010060:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 8010064:	f88d 301f 	strb.w	r3, [sp, #31]
 8010068:	e017      	b.n	801009a <AES_CMAC_Final+0x9a>
        LSHIFT( K, K );
 801006a:	f103 0220 	add.w	r2, r3, #32
 801006e:	eb0d 0102 	add.w	r1, sp, r2
 8010072:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 8010076:	3301      	adds	r3, #1
 8010078:	f103 0220 	add.w	r2, r3, #32
 801007c:	446a      	add	r2, sp
 801007e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8010082:	09d2      	lsrs	r2, r2, #7
 8010084:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8010088:	f801 2c10 	strb.w	r2, [r1, #-16]
 801008c:	2b0e      	cmp	r3, #14
 801008e:	ddec      	ble.n	801006a <AES_CMAC_Final+0x6a>
 8010090:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8010094:	005b      	lsls	r3, r3, #1
 8010096:	f88d 301f 	strb.w	r3, [sp, #31]

    if( ctx->M_n == 16 )
 801009a:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 801009e:	2810      	cmp	r0, #16
 80100a0:	d014      	beq.n	80100cc <AES_CMAC_Final+0xcc>
        XOR( K, ctx->M_last );
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 80100a2:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	db30      	blt.n	801010c <AES_CMAC_Final+0x10c>
        {
            LSHIFT( K, K );
            K[15] ^= 0x87;
        }
        else
            LSHIFT( K, K );
 80100aa:	2300      	movs	r3, #0
 80100ac:	e041      	b.n	8010132 <AES_CMAC_Final+0x132>
        XOR( K, ctx->M_last );
 80100ae:	18e1      	adds	r1, r4, r3
 80100b0:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 80100b4:	f103 0020 	add.w	r0, r3, #32
 80100b8:	4468      	add	r0, sp
 80100ba:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 80100be:	4042      	eors	r2, r0
 80100c0:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 80100c4:	3301      	adds	r3, #1
 80100c6:	2b0f      	cmp	r3, #15
 80100c8:	ddf1      	ble.n	80100ae <AES_CMAC_Final+0xae>
 80100ca:	e059      	b.n	8010180 <AES_CMAC_Final+0x180>
 80100cc:	2300      	movs	r3, #0
 80100ce:	e7fa      	b.n	80100c6 <AES_CMAC_Final+0xc6>
            LSHIFT( K, K );
 80100d0:	f103 0220 	add.w	r2, r3, #32
 80100d4:	eb0d 0102 	add.w	r1, sp, r2
 80100d8:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 80100dc:	3301      	adds	r3, #1
 80100de:	f103 0220 	add.w	r2, r3, #32
 80100e2:	446a      	add	r2, sp
 80100e4:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80100e8:	09d2      	lsrs	r2, r2, #7
 80100ea:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 80100ee:	f801 2c10 	strb.w	r2, [r1, #-16]
 80100f2:	2b0e      	cmp	r3, #14
 80100f4:	ddec      	ble.n	80100d0 <AES_CMAC_Final+0xd0>
 80100f6:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80100fa:	005b      	lsls	r3, r3, #1
 80100fc:	b2db      	uxtb	r3, r3
 80100fe:	f88d 301f 	strb.w	r3, [sp, #31]
            K[15] ^= 0x87;
 8010102:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 8010106:	f88d 301f 	strb.w	r3, [sp, #31]
 801010a:	e019      	b.n	8010140 <AES_CMAC_Final+0x140>
            LSHIFT( K, K );
 801010c:	2300      	movs	r3, #0
 801010e:	e7f0      	b.n	80100f2 <AES_CMAC_Final+0xf2>
            LSHIFT( K, K );
 8010110:	f103 0220 	add.w	r2, r3, #32
 8010114:	eb0d 0102 	add.w	r1, sp, r2
 8010118:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 801011c:	3301      	adds	r3, #1
 801011e:	f103 0220 	add.w	r2, r3, #32
 8010122:	446a      	add	r2, sp
 8010124:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8010128:	09d2      	lsrs	r2, r2, #7
 801012a:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 801012e:	f801 2c10 	strb.w	r2, [r1, #-16]
 8010132:	2b0e      	cmp	r3, #14
 8010134:	ddec      	ble.n	8010110 <AES_CMAC_Final+0x110>
 8010136:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801013a:	005b      	lsls	r3, r3, #1
 801013c:	f88d 301f 	strb.w	r3, [sp, #31]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 8010140:	4420      	add	r0, r4
 8010142:	2380      	movs	r3, #128	; 0x80
 8010144:	f880 3101 	strb.w	r3, [r0, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 8010148:	e003      	b.n	8010152 <AES_CMAC_Final+0x152>
            ctx->M_last[ctx->M_n] = 0;
 801014a:	4423      	add	r3, r4
 801014c:	2200      	movs	r2, #0
 801014e:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 8010152:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8010156:	3301      	adds	r3, #1
 8010158:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 801015c:	2b0f      	cmp	r3, #15
 801015e:	d9f4      	bls.n	801014a <AES_CMAC_Final+0x14a>

        XOR( K, ctx->M_last );
 8010160:	2300      	movs	r3, #0
 8010162:	e00b      	b.n	801017c <AES_CMAC_Final+0x17c>
 8010164:	18e1      	adds	r1, r4, r3
 8010166:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 801016a:	f103 0020 	add.w	r0, r3, #32
 801016e:	4468      	add	r0, sp
 8010170:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 8010174:	4042      	eors	r2, r0
 8010176:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 801017a:	3301      	adds	r3, #1
 801017c:	2b0f      	cmp	r3, #15
 801017e:	ddf1      	ble.n	8010164 <AES_CMAC_Final+0x164>
 8010180:	2300      	movs	r3, #0
 8010182:	e009      	b.n	8010198 <AES_CMAC_Final+0x198>
    }
    XOR( ctx->M_last, ctx->X );
 8010184:	18e2      	adds	r2, r4, r3
 8010186:	f892 c0f1 	ldrb.w	ip, [r2, #241]	; 0xf1
 801018a:	f892 1101 	ldrb.w	r1, [r2, #257]	; 0x101
 801018e:	ea8c 0c01 	eor.w	ip, ip, r1
 8010192:	f882 c0f1 	strb.w	ip, [r2, #241]	; 0xf1
 8010196:	3301      	adds	r3, #1
 8010198:	2b0f      	cmp	r3, #15
 801019a:	ddf3      	ble.n	8010184 <AES_CMAC_Final+0x184>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 801019c:	2210      	movs	r2, #16
 801019e:	f104 01f1 	add.w	r1, r4, #241	; 0xf1
 80101a2:	4668      	mov	r0, sp
 80101a4:	f000 fda9 	bl	8010cfa <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 80101a8:	4622      	mov	r2, r4
 80101aa:	4629      	mov	r1, r5
 80101ac:	4668      	mov	r0, sp
 80101ae:	f000 fa75 	bl	801069c <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 80101b2:	2210      	movs	r2, #16
 80101b4:	2100      	movs	r1, #0
 80101b6:	eb0d 0002 	add.w	r0, sp, r2
 80101ba:	f000 fdb6 	bl	8010d2a <memset1>
}
 80101be:	b009      	add	sp, #36	; 0x24
 80101c0:	bd30      	pop	{r4, r5, pc}

080101c2 <copy_block>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 80101c2:	780b      	ldrb	r3, [r1, #0]
 80101c4:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 80101c6:	784b      	ldrb	r3, [r1, #1]
 80101c8:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 80101ca:	788b      	ldrb	r3, [r1, #2]
 80101cc:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 80101ce:	78cb      	ldrb	r3, [r1, #3]
 80101d0:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 80101d2:	790b      	ldrb	r3, [r1, #4]
 80101d4:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 80101d6:	794b      	ldrb	r3, [r1, #5]
 80101d8:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 80101da:	798b      	ldrb	r3, [r1, #6]
 80101dc:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 80101de:	79cb      	ldrb	r3, [r1, #7]
 80101e0:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 80101e2:	7a0b      	ldrb	r3, [r1, #8]
 80101e4:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 80101e6:	7a4b      	ldrb	r3, [r1, #9]
 80101e8:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 80101ea:	7a8b      	ldrb	r3, [r1, #10]
 80101ec:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 80101ee:	7acb      	ldrb	r3, [r1, #11]
 80101f0:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 80101f2:	7b0b      	ldrb	r3, [r1, #12]
 80101f4:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 80101f6:	7b4b      	ldrb	r3, [r1, #13]
 80101f8:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 80101fa:	7b8b      	ldrb	r3, [r1, #14]
 80101fc:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 80101fe:	7bcb      	ldrb	r3, [r1, #15]
 8010200:	73c3      	strb	r3, [r0, #15]
#endif
}
 8010202:	4770      	bx	lr

08010204 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
    while( nn-- )
 8010204:	e004      	b.n	8010210 <copy_block_nn+0xc>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 8010206:	f811 2b01 	ldrb.w	r2, [r1], #1
 801020a:	f800 2b01 	strb.w	r2, [r0], #1
    while( nn-- )
 801020e:	461a      	mov	r2, r3
 8010210:	1e53      	subs	r3, r2, #1
 8010212:	b2db      	uxtb	r3, r3
 8010214:	2a00      	cmp	r2, #0
 8010216:	d1f6      	bne.n	8010206 <copy_block_nn+0x2>
}
 8010218:	4770      	bx	lr

0801021a <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 801021a:	780b      	ldrb	r3, [r1, #0]
 801021c:	7802      	ldrb	r2, [r0, #0]
 801021e:	4053      	eors	r3, r2
 8010220:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 8010222:	784b      	ldrb	r3, [r1, #1]
 8010224:	7842      	ldrb	r2, [r0, #1]
 8010226:	4053      	eors	r3, r2
 8010228:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 801022a:	788b      	ldrb	r3, [r1, #2]
 801022c:	7882      	ldrb	r2, [r0, #2]
 801022e:	4053      	eors	r3, r2
 8010230:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 8010232:	78cb      	ldrb	r3, [r1, #3]
 8010234:	78c2      	ldrb	r2, [r0, #3]
 8010236:	4053      	eors	r3, r2
 8010238:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 801023a:	790b      	ldrb	r3, [r1, #4]
 801023c:	7902      	ldrb	r2, [r0, #4]
 801023e:	4053      	eors	r3, r2
 8010240:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 8010242:	794b      	ldrb	r3, [r1, #5]
 8010244:	7942      	ldrb	r2, [r0, #5]
 8010246:	4053      	eors	r3, r2
 8010248:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 801024a:	798b      	ldrb	r3, [r1, #6]
 801024c:	7982      	ldrb	r2, [r0, #6]
 801024e:	4053      	eors	r3, r2
 8010250:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 8010252:	79cb      	ldrb	r3, [r1, #7]
 8010254:	79c2      	ldrb	r2, [r0, #7]
 8010256:	4053      	eors	r3, r2
 8010258:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 801025a:	7a0b      	ldrb	r3, [r1, #8]
 801025c:	7a02      	ldrb	r2, [r0, #8]
 801025e:	4053      	eors	r3, r2
 8010260:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 8010262:	7a4b      	ldrb	r3, [r1, #9]
 8010264:	7a42      	ldrb	r2, [r0, #9]
 8010266:	4053      	eors	r3, r2
 8010268:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 801026a:	7a8b      	ldrb	r3, [r1, #10]
 801026c:	7a82      	ldrb	r2, [r0, #10]
 801026e:	4053      	eors	r3, r2
 8010270:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 8010272:	7acb      	ldrb	r3, [r1, #11]
 8010274:	7ac2      	ldrb	r2, [r0, #11]
 8010276:	4053      	eors	r3, r2
 8010278:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 801027a:	7b0b      	ldrb	r3, [r1, #12]
 801027c:	7b02      	ldrb	r2, [r0, #12]
 801027e:	4053      	eors	r3, r2
 8010280:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 8010282:	7b4b      	ldrb	r3, [r1, #13]
 8010284:	7b42      	ldrb	r2, [r0, #13]
 8010286:	4053      	eors	r3, r2
 8010288:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 801028a:	7b8b      	ldrb	r3, [r1, #14]
 801028c:	7b82      	ldrb	r2, [r0, #14]
 801028e:	4053      	eors	r3, r2
 8010290:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 8010292:	7bcb      	ldrb	r3, [r1, #15]
 8010294:	7bc2      	ldrb	r2, [r0, #15]
 8010296:	4053      	eors	r3, r2
 8010298:	73c3      	strb	r3, [r0, #15]
#endif
}
 801029a:	4770      	bx	lr

0801029c <copy_and_key>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 801029c:	780b      	ldrb	r3, [r1, #0]
 801029e:	f892 c000 	ldrb.w	ip, [r2]
 80102a2:	ea83 030c 	eor.w	r3, r3, ip
 80102a6:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 80102a8:	784b      	ldrb	r3, [r1, #1]
 80102aa:	f892 c001 	ldrb.w	ip, [r2, #1]
 80102ae:	ea83 030c 	eor.w	r3, r3, ip
 80102b2:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 80102b4:	788b      	ldrb	r3, [r1, #2]
 80102b6:	f892 c002 	ldrb.w	ip, [r2, #2]
 80102ba:	ea83 030c 	eor.w	r3, r3, ip
 80102be:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 80102c0:	78cb      	ldrb	r3, [r1, #3]
 80102c2:	f892 c003 	ldrb.w	ip, [r2, #3]
 80102c6:	ea83 030c 	eor.w	r3, r3, ip
 80102ca:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 80102cc:	790b      	ldrb	r3, [r1, #4]
 80102ce:	f892 c004 	ldrb.w	ip, [r2, #4]
 80102d2:	ea83 030c 	eor.w	r3, r3, ip
 80102d6:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 80102d8:	794b      	ldrb	r3, [r1, #5]
 80102da:	f892 c005 	ldrb.w	ip, [r2, #5]
 80102de:	ea83 030c 	eor.w	r3, r3, ip
 80102e2:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 80102e4:	798b      	ldrb	r3, [r1, #6]
 80102e6:	f892 c006 	ldrb.w	ip, [r2, #6]
 80102ea:	ea83 030c 	eor.w	r3, r3, ip
 80102ee:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 80102f0:	79cb      	ldrb	r3, [r1, #7]
 80102f2:	f892 c007 	ldrb.w	ip, [r2, #7]
 80102f6:	ea83 030c 	eor.w	r3, r3, ip
 80102fa:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 80102fc:	7a0b      	ldrb	r3, [r1, #8]
 80102fe:	f892 c008 	ldrb.w	ip, [r2, #8]
 8010302:	ea83 030c 	eor.w	r3, r3, ip
 8010306:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 8010308:	7a4b      	ldrb	r3, [r1, #9]
 801030a:	f892 c009 	ldrb.w	ip, [r2, #9]
 801030e:	ea83 030c 	eor.w	r3, r3, ip
 8010312:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 8010314:	7a8b      	ldrb	r3, [r1, #10]
 8010316:	f892 c00a 	ldrb.w	ip, [r2, #10]
 801031a:	ea83 030c 	eor.w	r3, r3, ip
 801031e:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 8010320:	7acb      	ldrb	r3, [r1, #11]
 8010322:	f892 c00b 	ldrb.w	ip, [r2, #11]
 8010326:	ea83 030c 	eor.w	r3, r3, ip
 801032a:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 801032c:	7b0b      	ldrb	r3, [r1, #12]
 801032e:	f892 c00c 	ldrb.w	ip, [r2, #12]
 8010332:	ea83 030c 	eor.w	r3, r3, ip
 8010336:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 8010338:	7b4b      	ldrb	r3, [r1, #13]
 801033a:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801033e:	ea83 030c 	eor.w	r3, r3, ip
 8010342:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 8010344:	7b8b      	ldrb	r3, [r1, #14]
 8010346:	f892 c00e 	ldrb.w	ip, [r2, #14]
 801034a:	ea83 030c 	eor.w	r3, r3, ip
 801034e:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 8010350:	7bcb      	ldrb	r3, [r1, #15]
 8010352:	7bd2      	ldrb	r2, [r2, #15]
 8010354:	4053      	eors	r3, r2
 8010356:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 8010358:	4770      	bx	lr

0801035a <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 801035a:	b508      	push	{r3, lr}
    xor_block(d, k);
 801035c:	f7ff ff5d 	bl	801021a <xor_block>
}
 8010360:	bd08      	pop	{r3, pc}
	...

08010364 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8010364:	7802      	ldrb	r2, [r0, #0]
 8010366:	4b18      	ldr	r3, [pc, #96]	; (80103c8 <shift_sub_rows+0x64>)
 8010368:	5c9a      	ldrb	r2, [r3, r2]
 801036a:	7002      	strb	r2, [r0, #0]
 801036c:	7902      	ldrb	r2, [r0, #4]
 801036e:	5c9a      	ldrb	r2, [r3, r2]
 8010370:	7102      	strb	r2, [r0, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8010372:	7a02      	ldrb	r2, [r0, #8]
 8010374:	5c9a      	ldrb	r2, [r3, r2]
 8010376:	7202      	strb	r2, [r0, #8]
 8010378:	7b02      	ldrb	r2, [r0, #12]
 801037a:	5c9a      	ldrb	r2, [r3, r2]
 801037c:	7302      	strb	r2, [r0, #12]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 801037e:	7842      	ldrb	r2, [r0, #1]
 8010380:	7941      	ldrb	r1, [r0, #5]
 8010382:	5c59      	ldrb	r1, [r3, r1]
 8010384:	7041      	strb	r1, [r0, #1]
 8010386:	7a41      	ldrb	r1, [r0, #9]
 8010388:	5c59      	ldrb	r1, [r3, r1]
 801038a:	7141      	strb	r1, [r0, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 801038c:	7b41      	ldrb	r1, [r0, #13]
 801038e:	5c59      	ldrb	r1, [r3, r1]
 8010390:	7241      	strb	r1, [r0, #9]
 8010392:	5c9a      	ldrb	r2, [r3, r2]
 8010394:	7342      	strb	r2, [r0, #13]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 8010396:	7882      	ldrb	r2, [r0, #2]
 8010398:	7a81      	ldrb	r1, [r0, #10]
 801039a:	5c59      	ldrb	r1, [r3, r1]
 801039c:	7081      	strb	r1, [r0, #2]
 801039e:	5c9a      	ldrb	r2, [r3, r2]
 80103a0:	7282      	strb	r2, [r0, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 80103a2:	7982      	ldrb	r2, [r0, #6]
 80103a4:	7b81      	ldrb	r1, [r0, #14]
 80103a6:	5c59      	ldrb	r1, [r3, r1]
 80103a8:	7181      	strb	r1, [r0, #6]
 80103aa:	5c9a      	ldrb	r2, [r3, r2]
 80103ac:	7382      	strb	r2, [r0, #14]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 80103ae:	7bc2      	ldrb	r2, [r0, #15]
 80103b0:	7ac1      	ldrb	r1, [r0, #11]
 80103b2:	5c59      	ldrb	r1, [r3, r1]
 80103b4:	73c1      	strb	r1, [r0, #15]
 80103b6:	79c1      	ldrb	r1, [r0, #7]
 80103b8:	5c59      	ldrb	r1, [r3, r1]
 80103ba:	72c1      	strb	r1, [r0, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 80103bc:	78c1      	ldrb	r1, [r0, #3]
 80103be:	5c59      	ldrb	r1, [r3, r1]
 80103c0:	71c1      	strb	r1, [r0, #7]
 80103c2:	5c9b      	ldrb	r3, [r3, r2]
 80103c4:	70c3      	strb	r3, [r0, #3]
}
 80103c6:	4770      	bx	lr
 80103c8:	08014af0 	.word	0x08014af0

080103cc <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 80103cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103d0:	b084      	sub	sp, #16
 80103d2:	4604      	mov	r4, r0
    block_copy(st, dt);
 80103d4:	4601      	mov	r1, r0
 80103d6:	4668      	mov	r0, sp
 80103d8:	f7ff fef3 	bl	80101c2 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 80103dc:	f89d c000 	ldrb.w	ip, [sp]
 80103e0:	4b6a      	ldr	r3, [pc, #424]	; (801058c <mix_sub_columns+0x1c0>)
 80103e2:	f813 000c 	ldrb.w	r0, [r3, ip]
 80103e6:	f89d 8005 	ldrb.w	r8, [sp, #5]
 80103ea:	4a69      	ldr	r2, [pc, #420]	; (8010590 <mix_sub_columns+0x1c4>)
 80103ec:	f812 9008 	ldrb.w	r9, [r2, r8]
 80103f0:	f89d e00a 	ldrb.w	lr, [sp, #10]
 80103f4:	4967      	ldr	r1, [pc, #412]	; (8010594 <mix_sub_columns+0x1c8>)
 80103f6:	f811 500e 	ldrb.w	r5, [r1, lr]
 80103fa:	f89d 700f 	ldrb.w	r7, [sp, #15]
 80103fe:	5dce      	ldrb	r6, [r1, r7]
 8010400:	ea80 0009 	eor.w	r0, r0, r9
 8010404:	4068      	eors	r0, r5
 8010406:	4070      	eors	r0, r6
 8010408:	7020      	strb	r0, [r4, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 801040a:	f811 000c 	ldrb.w	r0, [r1, ip]
 801040e:	f813 a008 	ldrb.w	sl, [r3, r8]
 8010412:	f812 900e 	ldrb.w	r9, [r2, lr]
 8010416:	ea80 0a0a 	eor.w	sl, r0, sl
 801041a:	ea89 090a 	eor.w	r9, r9, sl
 801041e:	ea86 0609 	eor.w	r6, r6, r9
 8010422:	7066      	strb	r6, [r4, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8010424:	f811 8008 	ldrb.w	r8, [r1, r8]
 8010428:	f813 e00e 	ldrb.w	lr, [r3, lr]
 801042c:	5dd6      	ldrb	r6, [r2, r7]
 801042e:	ea80 0008 	eor.w	r0, r0, r8
 8010432:	ea8e 0000 	eor.w	r0, lr, r0
 8010436:	4070      	eors	r0, r6
 8010438:	70a0      	strb	r0, [r4, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 801043a:	f812 600c 	ldrb.w	r6, [r2, ip]
 801043e:	5dd8      	ldrb	r0, [r3, r7]
 8010440:	ea86 0608 	eor.w	r6, r6, r8
 8010444:	4075      	eors	r5, r6
 8010446:	4045      	eors	r5, r0
 8010448:	70e5      	strb	r5, [r4, #3]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 801044a:	f89d c004 	ldrb.w	ip, [sp, #4]
 801044e:	f813 000c 	ldrb.w	r0, [r3, ip]
 8010452:	f89d 8009 	ldrb.w	r8, [sp, #9]
 8010456:	f812 9008 	ldrb.w	r9, [r2, r8]
 801045a:	f89d e00e 	ldrb.w	lr, [sp, #14]
 801045e:	f811 500e 	ldrb.w	r5, [r1, lr]
 8010462:	f89d 7003 	ldrb.w	r7, [sp, #3]
 8010466:	5dce      	ldrb	r6, [r1, r7]
 8010468:	ea80 0009 	eor.w	r0, r0, r9
 801046c:	4068      	eors	r0, r5
 801046e:	4070      	eors	r0, r6
 8010470:	7120      	strb	r0, [r4, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8010472:	f811 000c 	ldrb.w	r0, [r1, ip]
 8010476:	f813 a008 	ldrb.w	sl, [r3, r8]
 801047a:	f812 900e 	ldrb.w	r9, [r2, lr]
 801047e:	ea80 0a0a 	eor.w	sl, r0, sl
 8010482:	ea89 090a 	eor.w	r9, r9, sl
 8010486:	ea86 0609 	eor.w	r6, r6, r9
 801048a:	7166      	strb	r6, [r4, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 801048c:	f811 8008 	ldrb.w	r8, [r1, r8]
 8010490:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8010494:	5dd6      	ldrb	r6, [r2, r7]
 8010496:	ea80 0008 	eor.w	r0, r0, r8
 801049a:	ea8e 0000 	eor.w	r0, lr, r0
 801049e:	4070      	eors	r0, r6
 80104a0:	71a0      	strb	r0, [r4, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 80104a2:	f812 600c 	ldrb.w	r6, [r2, ip]
 80104a6:	5dd8      	ldrb	r0, [r3, r7]
 80104a8:	ea86 0608 	eor.w	r6, r6, r8
 80104ac:	4075      	eors	r5, r6
 80104ae:	4045      	eors	r5, r0
 80104b0:	71e5      	strb	r5, [r4, #7]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 80104b2:	f89d c008 	ldrb.w	ip, [sp, #8]
 80104b6:	f813 000c 	ldrb.w	r0, [r3, ip]
 80104ba:	f89d 800d 	ldrb.w	r8, [sp, #13]
 80104be:	f812 9008 	ldrb.w	r9, [r2, r8]
 80104c2:	f89d e002 	ldrb.w	lr, [sp, #2]
 80104c6:	f811 500e 	ldrb.w	r5, [r1, lr]
 80104ca:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80104ce:	5dce      	ldrb	r6, [r1, r7]
 80104d0:	ea80 0009 	eor.w	r0, r0, r9
 80104d4:	4068      	eors	r0, r5
 80104d6:	4070      	eors	r0, r6
 80104d8:	7220      	strb	r0, [r4, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 80104da:	f811 000c 	ldrb.w	r0, [r1, ip]
 80104de:	f813 a008 	ldrb.w	sl, [r3, r8]
 80104e2:	f812 900e 	ldrb.w	r9, [r2, lr]
 80104e6:	ea80 0a0a 	eor.w	sl, r0, sl
 80104ea:	ea89 090a 	eor.w	r9, r9, sl
 80104ee:	ea86 0609 	eor.w	r6, r6, r9
 80104f2:	7266      	strb	r6, [r4, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 80104f4:	f811 8008 	ldrb.w	r8, [r1, r8]
 80104f8:	f813 e00e 	ldrb.w	lr, [r3, lr]
 80104fc:	5dd6      	ldrb	r6, [r2, r7]
 80104fe:	ea80 0008 	eor.w	r0, r0, r8
 8010502:	ea8e 0000 	eor.w	r0, lr, r0
 8010506:	4070      	eors	r0, r6
 8010508:	72a0      	strb	r0, [r4, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 801050a:	f812 600c 	ldrb.w	r6, [r2, ip]
 801050e:	5dd8      	ldrb	r0, [r3, r7]
 8010510:	ea86 0608 	eor.w	r6, r6, r8
 8010514:	4075      	eors	r5, r6
 8010516:	4045      	eors	r5, r0
 8010518:	72e5      	strb	r5, [r4, #11]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 801051a:	f89d 600c 	ldrb.w	r6, [sp, #12]
 801051e:	5d98      	ldrb	r0, [r3, r6]
 8010520:	f89d 8001 	ldrb.w	r8, [sp, #1]
 8010524:	f812 9008 	ldrb.w	r9, [r2, r8]
 8010528:	f89d 7006 	ldrb.w	r7, [sp, #6]
 801052c:	f811 c007 	ldrb.w	ip, [r1, r7]
 8010530:	f89d 500b 	ldrb.w	r5, [sp, #11]
 8010534:	f811 e005 	ldrb.w	lr, [r1, r5]
 8010538:	ea80 0009 	eor.w	r0, r0, r9
 801053c:	ea8c 0000 	eor.w	r0, ip, r0
 8010540:	ea8e 0000 	eor.w	r0, lr, r0
 8010544:	7320      	strb	r0, [r4, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8010546:	5d88      	ldrb	r0, [r1, r6]
 8010548:	f813 a008 	ldrb.w	sl, [r3, r8]
 801054c:	f812 9007 	ldrb.w	r9, [r2, r7]
 8010550:	ea80 0a0a 	eor.w	sl, r0, sl
 8010554:	ea89 090a 	eor.w	r9, r9, sl
 8010558:	ea8e 0e09 	eor.w	lr, lr, r9
 801055c:	f884 e00d 	strb.w	lr, [r4, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8010560:	f811 1008 	ldrb.w	r1, [r1, r8]
 8010564:	f813 e007 	ldrb.w	lr, [r3, r7]
 8010568:	5d57      	ldrb	r7, [r2, r5]
 801056a:	4048      	eors	r0, r1
 801056c:	ea8e 0000 	eor.w	r0, lr, r0
 8010570:	4078      	eors	r0, r7
 8010572:	73a0      	strb	r0, [r4, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8010574:	5d92      	ldrb	r2, [r2, r6]
 8010576:	5d5b      	ldrb	r3, [r3, r5]
 8010578:	4051      	eors	r1, r2
 801057a:	ea8c 0c01 	eor.w	ip, ip, r1
 801057e:	ea83 0c0c 	eor.w	ip, r3, ip
 8010582:	f884 c00f 	strb.w	ip, [r4, #15]
  }
 8010586:	b004      	add	sp, #16
 8010588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801058c:	080148f0 	.word	0x080148f0
 8010590:	080149f0 	.word	0x080149f0
 8010594:	08014af0 	.word	0x08014af0

08010598 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 8010598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801059c:	4614      	mov	r4, r2
    uint8_t cc, rc, hi;

    switch( keylen )
 801059e:	f1a1 0310 	sub.w	r3, r1, #16
 80105a2:	b2da      	uxtb	r2, r3
 80105a4:	2a10      	cmp	r2, #16
 80105a6:	d807      	bhi.n	80105b8 <lorawan_aes_set_key+0x20>
 80105a8:	460d      	mov	r5, r1
 80105aa:	2301      	movs	r3, #1
 80105ac:	4093      	lsls	r3, r2
 80105ae:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80105b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80105b6:	b92b      	cbnz	r3, 80105c4 <lorawan_aes_set_key+0x2c>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 80105b8:	2300      	movs	r3, #0
 80105ba:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
        return ( uint8_t )-1;
 80105be:	20ff      	movs	r0, #255	; 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 80105c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    block_copy_nn(ctx->ksch, key, keylen);
 80105c4:	460a      	mov	r2, r1
 80105c6:	4601      	mov	r1, r0
 80105c8:	4620      	mov	r0, r4
 80105ca:	f7ff fe1b 	bl	8010204 <copy_block_nn>
    hi = (keylen + 28) << 2;
 80105ce:	f105 031c 	add.w	r3, r5, #28
 80105d2:	b2db      	uxtb	r3, r3
 80105d4:	009b      	lsls	r3, r3, #2
 80105d6:	fa5f fe83 	uxtb.w	lr, r3
    ctx->rnd = (hi >> 4) - 1;
 80105da:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80105de:	3b01      	subs	r3, #1
 80105e0:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80105e4:	462b      	mov	r3, r5
 80105e6:	f04f 0c01 	mov.w	ip, #1
 80105ea:	e023      	b.n	8010634 <lorawan_aes_set_key+0x9c>
        else if( keylen > 24 && cc % keylen == 16 )
 80105ec:	2d18      	cmp	r5, #24
 80105ee:	d901      	bls.n	80105f4 <lorawan_aes_set_key+0x5c>
 80105f0:	2a10      	cmp	r2, #16
 80105f2:	d047      	beq.n	8010684 <lorawan_aes_set_key+0xec>
        tt = cc - keylen;
 80105f4:	1b5a      	subs	r2, r3, r5
 80105f6:	b2d2      	uxtb	r2, r2
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 80105f8:	f814 9002 	ldrb.w	r9, [r4, r2]
 80105fc:	ea89 0808 	eor.w	r8, r9, r8
 8010600:	f804 8000 	strb.w	r8, [r4, r0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8010604:	f102 0801 	add.w	r8, r2, #1
 8010608:	f814 8008 	ldrb.w	r8, [r4, r8]
 801060c:	f100 0901 	add.w	r9, r0, #1
 8010610:	ea88 0707 	eor.w	r7, r8, r7
 8010614:	f804 7009 	strb.w	r7, [r4, r9]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 8010618:	1c97      	adds	r7, r2, #2
 801061a:	5de7      	ldrb	r7, [r4, r7]
 801061c:	f100 0802 	add.w	r8, r0, #2
 8010620:	407e      	eors	r6, r7
 8010622:	f804 6008 	strb.w	r6, [r4, r8]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8010626:	3203      	adds	r2, #3
 8010628:	5ca6      	ldrb	r6, [r4, r2]
 801062a:	1cc2      	adds	r2, r0, #3
 801062c:	4071      	eors	r1, r6
 801062e:	54a1      	strb	r1, [r4, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8010630:	3304      	adds	r3, #4
 8010632:	b2db      	uxtb	r3, r3
 8010634:	4573      	cmp	r3, lr
 8010636:	d22c      	bcs.n	8010692 <lorawan_aes_set_key+0xfa>
        t0 = ctx->ksch[cc - 4];
 8010638:	4618      	mov	r0, r3
 801063a:	1f1a      	subs	r2, r3, #4
 801063c:	f814 8002 	ldrb.w	r8, [r4, r2]
        t1 = ctx->ksch[cc - 3];
 8010640:	1eda      	subs	r2, r3, #3
 8010642:	5ca7      	ldrb	r7, [r4, r2]
        t2 = ctx->ksch[cc - 2];
 8010644:	1e9a      	subs	r2, r3, #2
 8010646:	5ca6      	ldrb	r6, [r4, r2]
        t3 = ctx->ksch[cc - 1];
 8010648:	1e5a      	subs	r2, r3, #1
 801064a:	5ca1      	ldrb	r1, [r4, r2]
        if( cc % keylen == 0 )
 801064c:	fbb3 f2f5 	udiv	r2, r3, r5
 8010650:	fb05 3212 	mls	r2, r5, r2, r3
 8010654:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8010658:	d1c8      	bne.n	80105ec <lorawan_aes_set_key+0x54>
            t0 = s_box(t1) ^ rc;
 801065a:	4a0f      	ldr	r2, [pc, #60]	; (8010698 <lorawan_aes_set_key+0x100>)
 801065c:	f812 9007 	ldrb.w	r9, [r2, r7]
 8010660:	ea89 090c 	eor.w	r9, r9, ip
            t1 = s_box(t2);
 8010664:	5d97      	ldrb	r7, [r2, r6]
            t2 = s_box(t3);
 8010666:	5c56      	ldrb	r6, [r2, r1]
            t3 = s_box(tt);
 8010668:	f812 1008 	ldrb.w	r1, [r2, r8]
            rc = f2(rc);
 801066c:	ea4f 12dc 	mov.w	r2, ip, lsr #7
 8010670:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8010674:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8010678:	ea82 0c4c 	eor.w	ip, r2, ip, lsl #1
 801067c:	fa5f fc8c 	uxtb.w	ip, ip
            t0 = s_box(t1) ^ rc;
 8010680:	46c8      	mov	r8, r9
 8010682:	e7b7      	b.n	80105f4 <lorawan_aes_set_key+0x5c>
            t0 = s_box(t0);
 8010684:	4a04      	ldr	r2, [pc, #16]	; (8010698 <lorawan_aes_set_key+0x100>)
 8010686:	f812 8008 	ldrb.w	r8, [r2, r8]
            t1 = s_box(t1);
 801068a:	5dd7      	ldrb	r7, [r2, r7]
            t2 = s_box(t2);
 801068c:	5d96      	ldrb	r6, [r2, r6]
            t3 = s_box(t3);
 801068e:	5c51      	ldrb	r1, [r2, r1]
 8010690:	e7b0      	b.n	80105f4 <lorawan_aes_set_key+0x5c>
    return 0;
 8010692:	2000      	movs	r0, #0
 8010694:	e794      	b.n	80105c0 <lorawan_aes_set_key+0x28>
 8010696:	bf00      	nop
 8010698:	08014af0 	.word	0x08014af0

0801069c <lorawan_aes_encrypt>:

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
    if( ctx->rnd )
 801069c:	f892 30f0 	ldrb.w	r3, [r2, #240]	; 0xf0
 80106a0:	b31b      	cbz	r3, 80106ea <lorawan_aes_encrypt+0x4e>
{
 80106a2:	b570      	push	{r4, r5, r6, lr}
 80106a4:	b084      	sub	sp, #16
 80106a6:	460e      	mov	r6, r1
 80106a8:	4615      	mov	r5, r2
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 80106aa:	4601      	mov	r1, r0
 80106ac:	4668      	mov	r0, sp
 80106ae:	f7ff fdf5 	bl	801029c <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 80106b2:	2401      	movs	r4, #1
 80106b4:	e009      	b.n	80106ca <lorawan_aes_encrypt+0x2e>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 80106b6:	4668      	mov	r0, sp
 80106b8:	f7ff fe88 	bl	80103cc <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 80106bc:	eb05 1104 	add.w	r1, r5, r4, lsl #4
 80106c0:	4668      	mov	r0, sp
 80106c2:	f7ff fe4a 	bl	801035a <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 80106c6:	3401      	adds	r4, #1
 80106c8:	b2e4      	uxtb	r4, r4
 80106ca:	f895 30f0 	ldrb.w	r3, [r5, #240]	; 0xf0
 80106ce:	42a3      	cmp	r3, r4
 80106d0:	d8f1      	bhi.n	80106b6 <lorawan_aes_encrypt+0x1a>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 80106d2:	4668      	mov	r0, sp
 80106d4:	f7ff fe46 	bl	8010364 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 80106d8:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 80106dc:	4669      	mov	r1, sp
 80106de:	4630      	mov	r0, r6
 80106e0:	f7ff fddc 	bl	801029c <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 80106e4:	2000      	movs	r0, #0
}
 80106e6:	b004      	add	sp, #16
 80106e8:	bd70      	pop	{r4, r5, r6, pc}
        return ( uint8_t )-1;
 80106ea:	20ff      	movs	r0, #255	; 0xff
}
 80106ec:	4770      	bx	lr
	...

080106f0 <GetKeyByID>:
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80106f0:	2300      	movs	r3, #0
 80106f2:	2b09      	cmp	r3, #9
 80106f4:	d817      	bhi.n	8010726 <GetKeyByID+0x36>
{
 80106f6:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 80106f8:	4a0c      	ldr	r2, [pc, #48]	; (801072c <GetKeyByID+0x3c>)
 80106fa:	6814      	ldr	r4, [r2, #0]
 80106fc:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8010700:	4422      	add	r2, r4
 8010702:	7c12      	ldrb	r2, [r2, #16]
 8010704:	4282      	cmp	r2, r0
 8010706:	d006      	beq.n	8010716 <GetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8010708:	3301      	adds	r3, #1
 801070a:	b2db      	uxtb	r3, r3
 801070c:	2b09      	cmp	r3, #9
 801070e:	d9f3      	bls.n	80106f8 <GetKeyByID+0x8>
        {
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8010710:	2003      	movs	r0, #3
}
 8010712:	bc10      	pop	{r4}
 8010714:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 8010716:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 801071a:	f10c 0c10 	add.w	ip, ip, #16
 801071e:	4464      	add	r4, ip
 8010720:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 8010722:	2000      	movs	r0, #0
 8010724:	e7f5      	b.n	8010712 <GetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8010726:	2003      	movs	r0, #3
}
 8010728:	4770      	bx	lr
 801072a:	bf00      	nop
 801072c:	20001024 	.word	0x20001024

08010730 <ComputeCmac>:
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 8010730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010734:	b0cc      	sub	sp, #304	; 0x130
 8010736:	9e52      	ldr	r6, [sp, #328]	; 0x148
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 8010738:	b3a9      	cbz	r1, 80107a6 <ComputeCmac+0x76>
 801073a:	4605      	mov	r5, r0
 801073c:	4617      	mov	r7, r2
 801073e:	461c      	mov	r4, r3
 8010740:	4688      	mov	r8, r1
 8010742:	b396      	cbz	r6, 80107aa <ComputeCmac+0x7a>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 8010744:	a802      	add	r0, sp, #8
 8010746:	f7ff fbd7 	bl	800fef8 <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 801074a:	a901      	add	r1, sp, #4
 801074c:	4620      	mov	r0, r4
 801074e:	f7ff ffcf 	bl	80106f0 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 8010752:	4604      	mov	r4, r0
 8010754:	b118      	cbz	r0, 801075e <ComputeCmac+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
}
 8010756:	4620      	mov	r0, r4
 8010758:	b04c      	add	sp, #304	; 0x130
 801075a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 801075e:	9901      	ldr	r1, [sp, #4]
 8010760:	3101      	adds	r1, #1
 8010762:	a802      	add	r0, sp, #8
 8010764:	f7ff fbd7 	bl	800ff16 <AES_CMAC_SetKey>
        if( micBxBuffer != NULL )
 8010768:	b125      	cbz	r5, 8010774 <ComputeCmac+0x44>
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 801076a:	2210      	movs	r2, #16
 801076c:	4629      	mov	r1, r5
 801076e:	a802      	add	r0, sp, #8
 8010770:	f7ff fbd8 	bl	800ff24 <AES_CMAC_Update>
        AES_CMAC_Update( aesCmacCtx, buffer, size );
 8010774:	463a      	mov	r2, r7
 8010776:	4641      	mov	r1, r8
 8010778:	a802      	add	r0, sp, #8
 801077a:	f7ff fbd3 	bl	800ff24 <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, aesCmacCtx );
 801077e:	a902      	add	r1, sp, #8
 8010780:	a848      	add	r0, sp, #288	; 0x120
 8010782:	f7ff fc3d 	bl	8010000 <AES_CMAC_Final>
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 8010786:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
 801078a:	f89d 3122 	ldrb.w	r3, [sp, #290]	; 0x122
 801078e:	041b      	lsls	r3, r3, #16
 8010790:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8010794:	f89d 2121 	ldrb.w	r2, [sp, #289]	; 0x121
 8010798:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                              ( uint32_t ) Cmac[0] );
 801079c:	f89d 2120 	ldrb.w	r2, [sp, #288]	; 0x120
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 80107a0:	4313      	orrs	r3, r2
 80107a2:	6033      	str	r3, [r6, #0]
 80107a4:	e7d7      	b.n	8010756 <ComputeCmac+0x26>
        return SECURE_ELEMENT_ERROR_NPE;
 80107a6:	2402      	movs	r4, #2
 80107a8:	e7d5      	b.n	8010756 <ComputeCmac+0x26>
 80107aa:	2402      	movs	r4, #2
 80107ac:	e7d3      	b.n	8010756 <ComputeCmac+0x26>
	...

080107b0 <SecureElementInit>:
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    if( nvm == NULL )
 80107b0:	b168      	cbz	r0, 80107ce <SecureElementInit+0x1e>
{
 80107b2:	b510      	push	{r4, lr}
 80107b4:	460c      	mov	r4, r1
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 80107b6:	4a08      	ldr	r2, [pc, #32]	; (80107d8 <SecureElementInit+0x28>)
 80107b8:	6010      	str	r0, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 80107ba:	22c0      	movs	r2, #192	; 0xc0
 80107bc:	4907      	ldr	r1, [pc, #28]	; (80107dc <SecureElementInit+0x2c>)
 80107be:	f000 fa9c 	bl	8010cfa <memcpy1>
#endif /* LORAMAC_CLASSB_ENABLED */
#endif /* LORAWAN_KMS */

#if !defined( SECURE_ELEMENT_PRE_PROVISIONED )
#if( STATIC_DEVICE_EUI == 0 )
    if (seGetUniqueId != NULL)
 80107c2:	b134      	cbz	r4, 80107d2 <SecureElementInit+0x22>
    {
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
 80107c4:	4b04      	ldr	r3, [pc, #16]	; (80107d8 <SecureElementInit+0x28>)
 80107c6:	6818      	ldr	r0, [r3, #0]
 80107c8:	47a0      	blx	r4
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 80107ca:	2000      	movs	r0, #0
}
 80107cc:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80107ce:	2002      	movs	r0, #2
}
 80107d0:	4770      	bx	lr
    return SECURE_ELEMENT_SUCCESS;
 80107d2:	2000      	movs	r0, #0
 80107d4:	e7fa      	b.n	80107cc <SecureElementInit+0x1c>
 80107d6:	bf00      	nop
 80107d8:	20001024 	.word	0x20001024
 80107dc:	0803e500 	.word	0x0803e500

080107e0 <SecureElementGetKeyByID>:
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, uint8_t* extractable_key )
#endif /* LORAWAN_KMS */
{
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 80107e0:	2300      	movs	r3, #0
 80107e2:	2b09      	cmp	r3, #9
 80107e4:	d817      	bhi.n	8010816 <SecureElementGetKeyByID+0x36>
{
 80107e6:	b410      	push	{r4}
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 80107e8:	4a0c      	ldr	r2, [pc, #48]	; (801081c <SecureElementGetKeyByID+0x3c>)
 80107ea:	6814      	ldr	r4, [r2, #0]
 80107ec:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 80107f0:	4422      	add	r2, r4
 80107f2:	7c12      	ldrb	r2, [r2, #16]
 80107f4:	4282      	cmp	r2, r0
 80107f6:	d006      	beq.n	8010806 <SecureElementGetKeyByID+0x26>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 80107f8:	3301      	adds	r3, #1
 80107fa:	b2db      	uxtb	r3, r3
 80107fc:	2b09      	cmp	r3, #9
 80107fe:	d9f3      	bls.n	80107e8 <SecureElementGetKeyByID+0x8>
            *keyItem = &(SeNvm->KeyList[i]);
            return SECURE_ELEMENT_SUCCESS;
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8010800:	2003      	movs	r0, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 8010802:	bc10      	pop	{r4}
 8010804:	4770      	bx	lr
            *keyItem = &(SeNvm->KeyList[i]);
 8010806:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 801080a:	f10c 0c10 	add.w	ip, ip, #16
 801080e:	4464      	add	r4, ip
 8010810:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 8010812:	2000      	movs	r0, #0
 8010814:	e7f5      	b.n	8010802 <SecureElementGetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8010816:	2003      	movs	r0, #3
}
 8010818:	4770      	bx	lr
 801081a:	bf00      	nop
 801081c:	20001024 	.word	0x20001024

08010820 <PrintKey>:
{
 8010820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010824:	b095      	sub	sp, #84	; 0x54
 8010826:	4604      	mov	r4, r0
    retval = SecureElementGetKeyByID(key, &keyItem);
 8010828:	a913      	add	r1, sp, #76	; 0x4c
 801082a:	f7ff ffd9 	bl	80107e0 <SecureElementGetKeyByID>
    if (retval == SECURE_ELEMENT_SUCCESS)
 801082e:	2800      	cmp	r0, #0
 8010830:	d154      	bne.n	80108dc <PrintKey+0xbc>
        if (key == APP_KEY)
 8010832:	b1b4      	cbz	r4, 8010862 <PrintKey+0x42>
        else if (key == NWK_KEY)
 8010834:	2c01      	cmp	r4, #1
 8010836:	d054      	beq.n	80108e2 <PrintKey+0xc2>
        else if (key == APP_S_KEY)
 8010838:	2c03      	cmp	r4, #3
 801083a:	d059      	beq.n	80108f0 <PrintKey+0xd0>
        else if (key == NWK_S_KEY)
 801083c:	2c02      	cmp	r4, #2
 801083e:	d05e      	beq.n	80108fe <PrintKey+0xde>
        else if (key == MC_ROOT_KEY)
 8010840:	2c04      	cmp	r4, #4
 8010842:	d063      	beq.n	801090c <PrintKey+0xec>
        else if (key == MC_KE_KEY)
 8010844:	2c7f      	cmp	r4, #127	; 0x7f
 8010846:	d068      	beq.n	801091a <PrintKey+0xfa>
        else if (key == MC_KEY_0)
 8010848:	2c80      	cmp	r4, #128	; 0x80
 801084a:	d06d      	beq.n	8010928 <PrintKey+0x108>
        else if (key == MC_APP_S_KEY_0)
 801084c:	2c81      	cmp	r4, #129	; 0x81
 801084e:	d072      	beq.n	8010936 <PrintKey+0x116>
        else if (key == MC_NWK_S_KEY_0)
 8010850:	2c82      	cmp	r4, #130	; 0x82
 8010852:	d10c      	bne.n	801086e <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 8010854:	4b3b      	ldr	r3, [pc, #236]	; (8010944 <PrintKey+0x124>)
 8010856:	2200      	movs	r2, #0
 8010858:	4611      	mov	r1, r2
 801085a:	2002      	movs	r0, #2
 801085c:	f002 f8f6 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
 8010860:	e005      	b.n	801086e <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 8010862:	4b39      	ldr	r3, [pc, #228]	; (8010948 <PrintKey+0x128>)
 8010864:	2200      	movs	r2, #0
 8010866:	4611      	mov	r1, r2
 8010868:	2002      	movs	r0, #2
 801086a:	f002 f8ef 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 801086e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010870:	785a      	ldrb	r2, [r3, #1]
 8010872:	9210      	str	r2, [sp, #64]	; 0x40
 8010874:	7899      	ldrb	r1, [r3, #2]
 8010876:	9111      	str	r1, [sp, #68]	; 0x44
 8010878:	78da      	ldrb	r2, [r3, #3]
 801087a:	7919      	ldrb	r1, [r3, #4]
 801087c:	7958      	ldrb	r0, [r3, #5]
 801087e:	799c      	ldrb	r4, [r3, #6]
 8010880:	79dd      	ldrb	r5, [r3, #7]
 8010882:	7a1e      	ldrb	r6, [r3, #8]
 8010884:	7a5f      	ldrb	r7, [r3, #9]
 8010886:	f893 c00a 	ldrb.w	ip, [r3, #10]
 801088a:	f893 e00b 	ldrb.w	lr, [r3, #11]
 801088e:	f893 800c 	ldrb.w	r8, [r3, #12]
 8010892:	f893 900d 	ldrb.w	r9, [r3, #13]
 8010896:	f893 a00e 	ldrb.w	sl, [r3, #14]
 801089a:	f893 b00f 	ldrb.w	fp, [r3, #15]
 801089e:	7c1b      	ldrb	r3, [r3, #16]
 80108a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80108a2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80108a6:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80108aa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80108ae:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 80108b2:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 80108b6:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 80108ba:	9708      	str	r7, [sp, #32]
 80108bc:	9607      	str	r6, [sp, #28]
 80108be:	9506      	str	r5, [sp, #24]
 80108c0:	9405      	str	r4, [sp, #20]
 80108c2:	9004      	str	r0, [sp, #16]
 80108c4:	9103      	str	r1, [sp, #12]
 80108c6:	9202      	str	r2, [sp, #8]
 80108c8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80108ca:	9101      	str	r1, [sp, #4]
 80108cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80108ce:	9200      	str	r2, [sp, #0]
 80108d0:	4b1e      	ldr	r3, [pc, #120]	; (801094c <PrintKey+0x12c>)
 80108d2:	2200      	movs	r2, #0
 80108d4:	4611      	mov	r1, r2
 80108d6:	2002      	movs	r0, #2
 80108d8:	f002 f8b8 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
}
 80108dc:	b015      	add	sp, #84	; 0x54
 80108de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 80108e2:	4b1b      	ldr	r3, [pc, #108]	; (8010950 <PrintKey+0x130>)
 80108e4:	2200      	movs	r2, #0
 80108e6:	4611      	mov	r1, r2
 80108e8:	2002      	movs	r0, #2
 80108ea:	f002 f8af 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
 80108ee:	e7be      	b.n	801086e <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 80108f0:	4b18      	ldr	r3, [pc, #96]	; (8010954 <PrintKey+0x134>)
 80108f2:	2200      	movs	r2, #0
 80108f4:	4611      	mov	r1, r2
 80108f6:	2002      	movs	r0, #2
 80108f8:	f002 f8a8 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
 80108fc:	e7b7      	b.n	801086e <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 80108fe:	4b16      	ldr	r3, [pc, #88]	; (8010958 <PrintKey+0x138>)
 8010900:	2200      	movs	r2, #0
 8010902:	4611      	mov	r1, r2
 8010904:	2002      	movs	r0, #2
 8010906:	f002 f8a1 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
 801090a:	e7b0      	b.n	801086e <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 801090c:	4b13      	ldr	r3, [pc, #76]	; (801095c <PrintKey+0x13c>)
 801090e:	2200      	movs	r2, #0
 8010910:	4611      	mov	r1, r2
 8010912:	2002      	movs	r0, #2
 8010914:	f002 f89a 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
 8010918:	e7a9      	b.n	801086e <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 801091a:	4b11      	ldr	r3, [pc, #68]	; (8010960 <PrintKey+0x140>)
 801091c:	2200      	movs	r2, #0
 801091e:	4611      	mov	r1, r2
 8010920:	2002      	movs	r0, #2
 8010922:	f002 f893 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
 8010926:	e7a2      	b.n	801086e <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 8010928:	4b0e      	ldr	r3, [pc, #56]	; (8010964 <PrintKey+0x144>)
 801092a:	2200      	movs	r2, #0
 801092c:	4611      	mov	r1, r2
 801092e:	2002      	movs	r0, #2
 8010930:	f002 f88c 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
 8010934:	e79b      	b.n	801086e <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 8010936:	4b0c      	ldr	r3, [pc, #48]	; (8010968 <PrintKey+0x148>)
 8010938:	2200      	movs	r2, #0
 801093a:	4611      	mov	r1, r2
 801093c:	2002      	movs	r0, #2
 801093e:	f002 f885 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
 8010942:	e794      	b.n	801086e <PrintKey+0x4e>
 8010944:	08014cb0 	.word	0x08014cb0
 8010948:	08014bf0 	.word	0x08014bf0
 801094c:	08014cc8 	.word	0x08014cc8
 8010950:	08014c08 	.word	0x08014c08
 8010954:	08014c20 	.word	0x08014c20
 8010958:	08014c38 	.word	0x08014c38
 801095c:	08014c50 	.word	0x08014c50
 8010960:	08014c68 	.word	0x08014c68
 8010964:	08014c80 	.word	0x08014c80
 8010968:	08014c98 	.word	0x08014c98

0801096c <SecureElementPrintKeys>:

SecureElementStatus_t SecureElementPrintKeys( void )
{
 801096c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801096e:	b089      	sub	sp, #36	; 0x24
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 8010970:	4b28      	ldr	r3, [pc, #160]	; (8010a14 <SecureElementPrintKeys+0xa8>)
 8010972:	2200      	movs	r2, #0
 8010974:	4611      	mov	r1, r2
 8010976:	2002      	movs	r0, #2
 8010978:	f002 f868 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 801097c:	2000      	movs	r0, #0
 801097e:	f7ff ff4f 	bl	8010820 <PrintKey>
    PrintKey(NWK_KEY);
 8010982:	2001      	movs	r0, #1
 8010984:	f7ff ff4c 	bl	8010820 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 8010988:	4b23      	ldr	r3, [pc, #140]	; (8010a18 <SecureElementPrintKeys+0xac>)
 801098a:	2200      	movs	r2, #0
 801098c:	4611      	mov	r1, r2
 801098e:	2002      	movs	r0, #2
 8010990:	f002 f85c 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 8010994:	2003      	movs	r0, #3
 8010996:	f7ff ff43 	bl	8010820 <PrintKey>
    PrintKey(NWK_S_KEY);
 801099a:	2002      	movs	r0, #2
 801099c:	f7ff ff40 	bl	8010820 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    MW_LOG(TS_OFF, VLEVEL_M, "###### IDs  ######\r\n");
 80109a0:	4b1e      	ldr	r3, [pc, #120]	; (8010a1c <SecureElementPrintKeys+0xb0>)
 80109a2:	2200      	movs	r2, #0
 80109a4:	4611      	mov	r1, r2
 80109a6:	2002      	movs	r0, #2
 80109a8:	f002 f850 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80109ac:	4c1c      	ldr	r4, [pc, #112]	; (8010a20 <SecureElementPrintKeys+0xb4>)
 80109ae:	6823      	ldr	r3, [r4, #0]
 80109b0:	781a      	ldrb	r2, [r3, #0]
 80109b2:	7859      	ldrb	r1, [r3, #1]
 80109b4:	7898      	ldrb	r0, [r3, #2]
 80109b6:	78dd      	ldrb	r5, [r3, #3]
 80109b8:	791e      	ldrb	r6, [r3, #4]
 80109ba:	795f      	ldrb	r7, [r3, #5]
 80109bc:	f893 c006 	ldrb.w	ip, [r3, #6]
 80109c0:	79db      	ldrb	r3, [r3, #7]
 80109c2:	9307      	str	r3, [sp, #28]
 80109c4:	f8cd c018 	str.w	ip, [sp, #24]
 80109c8:	9705      	str	r7, [sp, #20]
 80109ca:	9604      	str	r6, [sp, #16]
 80109cc:	9503      	str	r5, [sp, #12]
 80109ce:	9002      	str	r0, [sp, #8]
 80109d0:	9101      	str	r1, [sp, #4]
 80109d2:	9200      	str	r2, [sp, #0]
 80109d4:	4b13      	ldr	r3, [pc, #76]	; (8010a24 <SecureElementPrintKeys+0xb8>)
 80109d6:	2200      	movs	r2, #0
 80109d8:	4611      	mov	r1, r2
 80109da:	2002      	movs	r0, #2
 80109dc:	f002 f836 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80109e0:	6823      	ldr	r3, [r4, #0]
 80109e2:	7a1a      	ldrb	r2, [r3, #8]
 80109e4:	7a59      	ldrb	r1, [r3, #9]
 80109e6:	7a98      	ldrb	r0, [r3, #10]
 80109e8:	7adc      	ldrb	r4, [r3, #11]
 80109ea:	7b1d      	ldrb	r5, [r3, #12]
 80109ec:	7b5e      	ldrb	r6, [r3, #13]
 80109ee:	7b9f      	ldrb	r7, [r3, #14]
 80109f0:	7bdb      	ldrb	r3, [r3, #15]
 80109f2:	9307      	str	r3, [sp, #28]
 80109f4:	9706      	str	r7, [sp, #24]
 80109f6:	9605      	str	r6, [sp, #20]
 80109f8:	9504      	str	r5, [sp, #16]
 80109fa:	9403      	str	r4, [sp, #12]
 80109fc:	9002      	str	r0, [sp, #8]
 80109fe:	9101      	str	r1, [sp, #4]
 8010a00:	9200      	str	r2, [sp, #0]
 8010a02:	4b09      	ldr	r3, [pc, #36]	; (8010a28 <SecureElementPrintKeys+0xbc>)
 8010a04:	2200      	movs	r2, #0
 8010a06:	4611      	mov	r1, r2
 8010a08:	2002      	movs	r0, #2
 8010a0a:	f002 f81f 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->JoinEui));
    return SECURE_ELEMENT_SUCCESS;
}
 8010a0e:	2000      	movs	r0, #0
 8010a10:	b009      	add	sp, #36	; 0x24
 8010a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a14:	08014d1c 	.word	0x08014d1c
 8010a18:	08014d34 	.word	0x08014d34
 8010a1c:	08014d4c 	.word	0x08014d4c
 8010a20:	20001024 	.word	0x20001024
 8010a24:	08014d64 	.word	0x08014d64
 8010a28:	08014da4 	.word	0x08014da4

08010a2c <SecureElementPrintSessionKeys>:
    
SecureElementStatus_t SecureElementPrintSessionKeys( void )
{
 8010a2c:	b508      	push	{r3, lr}
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    PrintKey(MC_ROOT_KEY);
 8010a2e:	2004      	movs	r0, #4
 8010a30:	f7ff fef6 	bl	8010820 <PrintKey>
    PrintKey(MC_KE_KEY);
 8010a34:	207f      	movs	r0, #127	; 0x7f
 8010a36:	f7ff fef3 	bl	8010820 <PrintKey>
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    PrintKey(F_NWK_S_INT_KEY);
    PrintKey(S_NWK_S_INT_KEY);
    PrintKey(NWK_S_ENC_KEY);
#else
    PrintKey(NWK_S_KEY);
 8010a3a:	2002      	movs	r0, #2
 8010a3c:	f7ff fef0 	bl	8010820 <PrintKey>
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    PrintKey(APP_S_KEY);
 8010a40:	2003      	movs	r0, #3
 8010a42:	f7ff feed 	bl	8010820 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_SUCCESS;
}
 8010a46:	2000      	movs	r0, #0
 8010a48:	bd08      	pop	{r3, pc}

08010a4a <SecureElementComputeAesCmac>:
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 8010a4a:	2b7e      	cmp	r3, #126	; 0x7e
 8010a4c:	d80a      	bhi.n	8010a64 <SecureElementComputeAesCmac+0x1a>
{
 8010a4e:	b500      	push	{lr}
 8010a50:	b083      	sub	sp, #12
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 8010a52:	f8dd c010 	ldr.w	ip, [sp, #16]
 8010a56:	f8cd c000 	str.w	ip, [sp]
 8010a5a:	f7ff fe69 	bl	8010730 <ComputeCmac>
}
 8010a5e:	b003      	add	sp, #12
 8010a60:	f85d fb04 	ldr.w	pc, [sp], #4
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8010a64:	2003      	movs	r0, #3
}
 8010a66:	4770      	bx	lr

08010a68 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
    if( buffer == NULL )
 8010a68:	b190      	cbz	r0, 8010a90 <SecureElementVerifyAesCmac+0x28>
{
 8010a6a:	b510      	push	{r4, lr}
 8010a6c:	b084      	sub	sp, #16
 8010a6e:	468c      	mov	ip, r1
 8010a70:	4614      	mov	r4, r2
 8010a72:	4601      	mov	r1, r0
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 8010a74:	2000      	movs	r0, #0
 8010a76:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 8010a78:	aa03      	add	r2, sp, #12
 8010a7a:	9200      	str	r2, [sp, #0]
 8010a7c:	4662      	mov	r2, ip
 8010a7e:	f7ff fe57 	bl	8010730 <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8010a82:	b918      	cbnz	r0, 8010a8c <SecureElementVerifyAesCmac+0x24>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 8010a84:	9b03      	ldr	r3, [sp, #12]
 8010a86:	42a3      	cmp	r3, r4
 8010a88:	d000      	beq.n	8010a8c <SecureElementVerifyAesCmac+0x24>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 8010a8a:	2001      	movs	r0, #1
    }

#endif /* LORAWAN_KMS */

    return retval;
}
 8010a8c:	b004      	add	sp, #16
 8010a8e:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8010a90:	2002      	movs	r0, #2
}
 8010a92:	4770      	bx	lr

08010a94 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 8010a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a98:	b0be      	sub	sp, #248	; 0xf8
    if( buffer == NULL || encBuffer == NULL )
 8010a9a:	b350      	cbz	r0, 8010af2 <SecureElementAesEncrypt+0x5e>
 8010a9c:	460c      	mov	r4, r1
 8010a9e:	4615      	mov	r5, r2
 8010aa0:	461e      	mov	r6, r3
 8010aa2:	4607      	mov	r7, r0
 8010aa4:	b343      	cbz	r3, 8010af8 <SecureElementAesEncrypt+0x64>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 8010aa6:	f011 0f0f 	tst.w	r1, #15
 8010aaa:	d128      	bne.n	8010afe <SecureElementAesEncrypt+0x6a>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 8010aac:	22f0      	movs	r2, #240	; 0xf0
 8010aae:	2100      	movs	r1, #0
 8010ab0:	a801      	add	r0, sp, #4
 8010ab2:	f000 f93a 	bl	8010d2a <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 8010ab6:	4669      	mov	r1, sp
 8010ab8:	4628      	mov	r0, r5
 8010aba:	f7ff fe19 	bl	80106f0 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 8010abe:	4680      	mov	r8, r0
 8010ac0:	b118      	cbz	r0, 8010aca <SecureElementAesEncrypt+0x36>
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
}
 8010ac2:	4640      	mov	r0, r8
 8010ac4:	b03e      	add	sp, #248	; 0xf8
 8010ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 8010aca:	aa01      	add	r2, sp, #4
 8010acc:	2110      	movs	r1, #16
 8010ace:	9800      	ldr	r0, [sp, #0]
 8010ad0:	3001      	adds	r0, #1
 8010ad2:	f7ff fd61 	bl	8010598 <lorawan_aes_set_key>
        uint8_t block = 0;
 8010ad6:	4645      	mov	r5, r8
        while( size != 0 )
 8010ad8:	e008      	b.n	8010aec <SecureElementAesEncrypt+0x58>
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 8010ada:	aa01      	add	r2, sp, #4
 8010adc:	1971      	adds	r1, r6, r5
 8010ade:	1978      	adds	r0, r7, r5
 8010ae0:	f7ff fddc 	bl	801069c <lorawan_aes_encrypt>
            block = block + 16;
 8010ae4:	3510      	adds	r5, #16
 8010ae6:	b2ed      	uxtb	r5, r5
            size  = size - 16;
 8010ae8:	3c10      	subs	r4, #16
 8010aea:	b2a4      	uxth	r4, r4
        while( size != 0 )
 8010aec:	2c00      	cmp	r4, #0
 8010aee:	d1f4      	bne.n	8010ada <SecureElementAesEncrypt+0x46>
 8010af0:	e7e7      	b.n	8010ac2 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_NPE;
 8010af2:	f04f 0802 	mov.w	r8, #2
 8010af6:	e7e4      	b.n	8010ac2 <SecureElementAesEncrypt+0x2e>
 8010af8:	f04f 0802 	mov.w	r8, #2
 8010afc:	e7e1      	b.n	8010ac2 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8010afe:	f04f 0805 	mov.w	r8, #5
 8010b02:	e7de      	b.n	8010ac2 <SecureElementAesEncrypt+0x2e>

08010b04 <SecureElementSetKey>:
{
 8010b04:	b530      	push	{r4, r5, lr}
 8010b06:	b085      	sub	sp, #20
    if( key == NULL )
 8010b08:	2900      	cmp	r1, #0
 8010b0a:	d038      	beq.n	8010b7e <SecureElementSetKey+0x7a>
 8010b0c:	468c      	mov	ip, r1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8010b0e:	2300      	movs	r3, #0
 8010b10:	2b09      	cmp	r3, #9
 8010b12:	d830      	bhi.n	8010b76 <SecureElementSetKey+0x72>
        if( SeNvm->KeyList[i].KeyID == keyID )
 8010b14:	4a1b      	ldr	r2, [pc, #108]	; (8010b84 <SecureElementSetKey+0x80>)
 8010b16:	6811      	ldr	r1, [r2, #0]
 8010b18:	461c      	mov	r4, r3
 8010b1a:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8010b1e:	440a      	add	r2, r1
 8010b20:	7c12      	ldrb	r2, [r2, #16]
 8010b22:	4282      	cmp	r2, r0
 8010b24:	d002      	beq.n	8010b2c <SecureElementSetKey+0x28>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8010b26:	3301      	adds	r3, #1
 8010b28:	b2db      	uxtb	r3, r3
 8010b2a:	e7f1      	b.n	8010b10 <SecureElementSetKey+0xc>
            if ( keyID == MC_KEY_0 )
 8010b2c:	2880      	cmp	r0, #128	; 0x80
 8010b2e:	d00a      	beq.n	8010b46 <SecureElementSetKey+0x42>
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 8010b30:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8010b34:	3310      	adds	r3, #16
 8010b36:	440b      	add	r3, r1
 8010b38:	2210      	movs	r2, #16
 8010b3a:	4661      	mov	r1, ip
 8010b3c:	1c58      	adds	r0, r3, #1
 8010b3e:	f000 f8dc 	bl	8010cfa <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 8010b42:	2500      	movs	r5, #0
 8010b44:	e018      	b.n	8010b78 <SecureElementSetKey+0x74>
                uint8_t               decryptedKey[16] = { 0 };
 8010b46:	2300      	movs	r3, #0
 8010b48:	9300      	str	r3, [sp, #0]
 8010b4a:	9301      	str	r3, [sp, #4]
 8010b4c:	9302      	str	r3, [sp, #8]
 8010b4e:	9303      	str	r3, [sp, #12]
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 8010b50:	466b      	mov	r3, sp
 8010b52:	227f      	movs	r2, #127	; 0x7f
 8010b54:	2110      	movs	r1, #16
 8010b56:	4660      	mov	r0, ip
 8010b58:	f7ff ff9c 	bl	8010a94 <SecureElementAesEncrypt>
 8010b5c:	4605      	mov	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 8010b5e:	4b09      	ldr	r3, [pc, #36]	; (8010b84 <SecureElementSetKey+0x80>)
 8010b60:	6818      	ldr	r0, [r3, #0]
 8010b62:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8010b66:	3410      	adds	r4, #16
 8010b68:	4420      	add	r0, r4
 8010b6a:	2210      	movs	r2, #16
 8010b6c:	4669      	mov	r1, sp
 8010b6e:	3001      	adds	r0, #1
 8010b70:	f000 f8c3 	bl	8010cfa <memcpy1>
                return retval;
 8010b74:	e000      	b.n	8010b78 <SecureElementSetKey+0x74>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8010b76:	2503      	movs	r5, #3
}
 8010b78:	4628      	mov	r0, r5
 8010b7a:	b005      	add	sp, #20
 8010b7c:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8010b7e:	2502      	movs	r5, #2
 8010b80:	e7fa      	b.n	8010b78 <SecureElementSetKey+0x74>
 8010b82:	bf00      	nop
 8010b84:	20001024 	.word	0x20001024

08010b88 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
    if( input == NULL )
 8010b88:	b1d0      	cbz	r0, 8010bc0 <SecureElementDeriveAndStoreKey+0x38>
{
 8010b8a:	b510      	push	{r4, lr}
 8010b8c:	b084      	sub	sp, #16
 8010b8e:	4614      	mov	r4, r2
 8010b90:	4684      	mov	ip, r0
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 8010b92:	2a7f      	cmp	r2, #127	; 0x7f
 8010b94:	d101      	bne.n	8010b9a <SecureElementDeriveAndStoreKey+0x12>
    {
        if( rootKeyID != MC_ROOT_KEY )
 8010b96:	2904      	cmp	r1, #4
 8010b98:	d114      	bne.n	8010bc4 <SecureElementDeriveAndStoreKey+0x3c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 8010b9a:	2300      	movs	r3, #0
 8010b9c:	9300      	str	r3, [sp, #0]
 8010b9e:	9301      	str	r3, [sp, #4]
 8010ba0:	9302      	str	r3, [sp, #8]
 8010ba2:	9303      	str	r3, [sp, #12]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 8010ba4:	466b      	mov	r3, sp
 8010ba6:	460a      	mov	r2, r1
 8010ba8:	2110      	movs	r1, #16
 8010baa:	4660      	mov	r0, ip
 8010bac:	f7ff ff72 	bl	8010a94 <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8010bb0:	b108      	cbz	r0, 8010bb6 <SecureElementDeriveAndStoreKey+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 8010bb2:	b004      	add	sp, #16
 8010bb4:	bd10      	pop	{r4, pc}
    retval = SecureElementSetKey( targetKeyID, key );
 8010bb6:	4669      	mov	r1, sp
 8010bb8:	4620      	mov	r0, r4
 8010bba:	f7ff ffa3 	bl	8010b04 <SecureElementSetKey>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8010bbe:	e7f8      	b.n	8010bb2 <SecureElementDeriveAndStoreKey+0x2a>
        return SECURE_ELEMENT_ERROR_NPE;
 8010bc0:	2002      	movs	r0, #2
}
 8010bc2:	4770      	bx	lr
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8010bc4:	2003      	movs	r0, #3
 8010bc6:	e7f4      	b.n	8010bb2 <SecureElementDeriveAndStoreKey+0x2a>

08010bc8 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 8010bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bcc:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8010bd0:	9d07      	ldr	r5, [sp, #28]
 8010bd2:	9e08      	ldr	r6, [sp, #32]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 8010bd4:	b37b      	cbz	r3, 8010c36 <SecureElementProcessJoinAccept+0x6e>
 8010bd6:	4698      	mov	r8, r3
 8010bd8:	b37d      	cbz	r5, 8010c3a <SecureElementProcessJoinAccept+0x72>
 8010bda:	b386      	cbz	r6, 8010c3e <SecureElementProcessJoinAccept+0x76>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 8010bdc:	2c21      	cmp	r4, #33	; 0x21
 8010bde:	d830      	bhi.n	8010c42 <SecureElementProcessJoinAccept+0x7a>
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 8010be0:	b2a7      	uxth	r7, r4
 8010be2:	463a      	mov	r2, r7
 8010be4:	4619      	mov	r1, r3
 8010be6:	4628      	mov	r0, r5
 8010be8:	f000 f887 	bl	8010cfa <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 8010bec:	1e79      	subs	r1, r7, #1
 8010bee:	1c6b      	adds	r3, r5, #1
 8010bf0:	2201      	movs	r2, #1
 8010bf2:	b289      	uxth	r1, r1
 8010bf4:	eb08 0002 	add.w	r0, r8, r2
 8010bf8:	f7ff ff4c 	bl	8010a94 <SecureElementAesEncrypt>
 8010bfc:	bb20      	cbnz	r0, 8010c48 <SecureElementProcessJoinAccept+0x80>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 8010bfe:	7aeb      	ldrb	r3, [r5, #11]
 8010c00:	09db      	lsrs	r3, r3, #7
 8010c02:	7033      	strb	r3, [r6, #0]

    uint32_t mic = 0;

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 8010c04:	442c      	add	r4, r5
 8010c06:	f814 2c04 	ldrb.w	r2, [r4, #-4]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 8010c0a:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8010c0e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 8010c12:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 8010c16:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 8010c1a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8010c1e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 8010c22:	b99b      	cbnz	r3, 8010c4c <SecureElementProcessJoinAccept+0x84>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 8010c24:	1f39      	subs	r1, r7, #4
 8010c26:	2301      	movs	r3, #1
 8010c28:	b289      	uxth	r1, r1
 8010c2a:	4628      	mov	r0, r5
 8010c2c:	f7ff ff1c 	bl	8010a68 <SecureElementVerifyAesCmac>
 8010c30:	b140      	cbz	r0, 8010c44 <SecureElementProcessJoinAccept+0x7c>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 8010c32:	2001      	movs	r0, #1
 8010c34:	e006      	b.n	8010c44 <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_NPE;
 8010c36:	2002      	movs	r0, #2
 8010c38:	e004      	b.n	8010c44 <SecureElementProcessJoinAccept+0x7c>
 8010c3a:	2002      	movs	r0, #2
 8010c3c:	e002      	b.n	8010c44 <SecureElementProcessJoinAccept+0x7c>
 8010c3e:	2002      	movs	r0, #2
 8010c40:	e000      	b.n	8010c44 <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8010c42:	2005      	movs	r0, #5
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 8010c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 8010c48:	2007      	movs	r0, #7
 8010c4a:	e7fb      	b.n	8010c44 <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 8010c4c:	2004      	movs	r0, #4
 8010c4e:	e7f9      	b.n	8010c44 <SecureElementProcessJoinAccept+0x7c>

08010c50 <SecureElementSetDevEui>:
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
    if( devEui == NULL )
 8010c50:	b140      	cbz	r0, 8010c64 <SecureElementSetDevEui+0x14>
{
 8010c52:	b508      	push	{r3, lr}
 8010c54:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 8010c56:	2208      	movs	r2, #8
 8010c58:	4b03      	ldr	r3, [pc, #12]	; (8010c68 <SecureElementSetDevEui+0x18>)
 8010c5a:	6818      	ldr	r0, [r3, #0]
 8010c5c:	f000 f84d 	bl	8010cfa <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8010c60:	2000      	movs	r0, #0
}
 8010c62:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8010c64:	2002      	movs	r0, #2
}
 8010c66:	4770      	bx	lr
 8010c68:	20001024 	.word	0x20001024

08010c6c <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
    return SeNvm->DevEui;
}
 8010c6c:	4b01      	ldr	r3, [pc, #4]	; (8010c74 <SecureElementGetDevEui+0x8>)
 8010c6e:	6818      	ldr	r0, [r3, #0]
 8010c70:	4770      	bx	lr
 8010c72:	bf00      	nop
 8010c74:	20001024 	.word	0x20001024

08010c78 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
    if( joinEui == NULL )
 8010c78:	b148      	cbz	r0, 8010c8e <SecureElementSetJoinEui+0x16>
{
 8010c7a:	b508      	push	{r3, lr}
 8010c7c:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 8010c7e:	4b05      	ldr	r3, [pc, #20]	; (8010c94 <SecureElementSetJoinEui+0x1c>)
 8010c80:	6818      	ldr	r0, [r3, #0]
 8010c82:	2208      	movs	r2, #8
 8010c84:	4410      	add	r0, r2
 8010c86:	f000 f838 	bl	8010cfa <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8010c8a:	2000      	movs	r0, #0
}
 8010c8c:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8010c8e:	2002      	movs	r0, #2
}
 8010c90:	4770      	bx	lr
 8010c92:	bf00      	nop
 8010c94:	20001024 	.word	0x20001024

08010c98 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
    return SeNvm->JoinEui;
 8010c98:	4b01      	ldr	r3, [pc, #4]	; (8010ca0 <SecureElementGetJoinEui+0x8>)
 8010c9a:	6818      	ldr	r0, [r3, #0]
}
 8010c9c:	3008      	adds	r0, #8
 8010c9e:	4770      	bx	lr
 8010ca0:	20001024 	.word	0x20001024

08010ca4 <rand1>:

static int32_t rand1( void );

static int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8010ca4:	4b09      	ldr	r3, [pc, #36]	; (8010ccc <rand1+0x28>)
 8010ca6:	681a      	ldr	r2, [r3, #0]
 8010ca8:	4909      	ldr	r1, [pc, #36]	; (8010cd0 <rand1+0x2c>)
 8010caa:	f243 0039 	movw	r0, #12345	; 0x3039
 8010cae:	fb01 0002 	mla	r0, r1, r2, r0
 8010cb2:	6018      	str	r0, [r3, #0]
 8010cb4:	2303      	movs	r3, #3
 8010cb6:	fba3 2300 	umull	r2, r3, r3, r0
 8010cba:	1ac2      	subs	r2, r0, r3
 8010cbc:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8010cc0:	0f9b      	lsrs	r3, r3, #30
 8010cc2:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
 8010cc6:	1ac0      	subs	r0, r0, r3
 8010cc8:	4770      	bx	lr
 8010cca:	bf00      	nop
 8010ccc:	20000108 	.word	0x20000108
 8010cd0:	41c64e6d 	.word	0x41c64e6d

08010cd4 <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 8010cd4:	4b01      	ldr	r3, [pc, #4]	; (8010cdc <srand1+0x8>)
 8010cd6:	6018      	str	r0, [r3, #0]
}
 8010cd8:	4770      	bx	lr
 8010cda:	bf00      	nop
 8010cdc:	20000108 	.word	0x20000108

08010ce0 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8010ce0:	b538      	push	{r3, r4, r5, lr}
 8010ce2:	4605      	mov	r5, r0
 8010ce4:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8010ce6:	f7ff ffdd 	bl	8010ca4 <rand1>
 8010cea:	1b61      	subs	r1, r4, r5
 8010cec:	3101      	adds	r1, #1
 8010cee:	fb90 f3f1 	sdiv	r3, r0, r1
 8010cf2:	fb01 0013 	mls	r0, r1, r3, r0
}
 8010cf6:	4428      	add	r0, r5
 8010cf8:	bd38      	pop	{r3, r4, r5, pc}

08010cfa <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 8010cfa:	e004      	b.n	8010d06 <memcpy1+0xc>
    {
        *dst++ = *src++;
 8010cfc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010d00:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 8010d04:	461a      	mov	r2, r3
 8010d06:	1e53      	subs	r3, r2, #1
 8010d08:	b29b      	uxth	r3, r3
 8010d0a:	2a00      	cmp	r2, #0
 8010d0c:	d1f6      	bne.n	8010cfc <memcpy1+0x2>
    }
}
 8010d0e:	4770      	bx	lr

08010d10 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 8010d10:	1e53      	subs	r3, r2, #1
 8010d12:	4418      	add	r0, r3
    while( size-- )
 8010d14:	e004      	b.n	8010d20 <memcpyr+0x10>
    {
        *dst-- = *src++;
 8010d16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010d1a:	f800 2901 	strb.w	r2, [r0], #-1
    while( size-- )
 8010d1e:	461a      	mov	r2, r3
 8010d20:	1e53      	subs	r3, r2, #1
 8010d22:	b29b      	uxth	r3, r3
 8010d24:	2a00      	cmp	r2, #0
 8010d26:	d1f6      	bne.n	8010d16 <memcpyr+0x6>
    }
}
 8010d28:	4770      	bx	lr

08010d2a <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 8010d2a:	e002      	b.n	8010d32 <memset1+0x8>
    {
        *dst++ = value;
 8010d2c:	f800 1b01 	strb.w	r1, [r0], #1
    while( size-- )
 8010d30:	461a      	mov	r2, r3
 8010d32:	1e53      	subs	r3, r2, #1
 8010d34:	b29b      	uxth	r3, r3
 8010d36:	2a00      	cmp	r2, #0
 8010d38:	d1f8      	bne.n	8010d2c <memset1+0x2>
    }
}
 8010d3a:	4770      	bx	lr

08010d3c <Crc32>:
uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 8010d3c:	b1f0      	cbz	r0, 8010d7c <Crc32+0x40>
{
 8010d3e:	b510      	push	{r4, lr}
 8010d40:	4604      	mov	r4, r0
    {
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
 8010d42:	f04f 0e00 	mov.w	lr, #0
    uint32_t crc = 0xFFFFFFFF;
 8010d46:	f04f 30ff 	mov.w	r0, #4294967295
 8010d4a:	e00e      	b.n	8010d6a <Crc32+0x2e>
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8010d4c:	f340 0c00 	sbfx	ip, r0, #0, #1
 8010d50:	4a0b      	ldr	r2, [pc, #44]	; (8010d80 <Crc32+0x44>)
 8010d52:	ea0c 0202 	and.w	r2, ip, r2
 8010d56:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
 8010d5a:	3301      	adds	r3, #1
 8010d5c:	b29b      	uxth	r3, r3
 8010d5e:	2b07      	cmp	r3, #7
 8010d60:	d9f4      	bls.n	8010d4c <Crc32+0x10>
    for( uint16_t i = 0; i < length; ++i )
 8010d62:	f10e 0e01 	add.w	lr, lr, #1
 8010d66:	fa1f fe8e 	uxth.w	lr, lr
 8010d6a:	458e      	cmp	lr, r1
 8010d6c:	d204      	bcs.n	8010d78 <Crc32+0x3c>
        crc ^= ( uint32_t )buffer[i];
 8010d6e:	f814 300e 	ldrb.w	r3, [r4, lr]
 8010d72:	4058      	eors	r0, r3
        for( uint16_t i = 0; i < 8; i++ )
 8010d74:	2300      	movs	r3, #0
 8010d76:	e7f2      	b.n	8010d5e <Crc32+0x22>
        }
    }

    return ~crc;
 8010d78:	43c0      	mvns	r0, r0
}
 8010d7a:	bd10      	pop	{r4, pc}
        return 0;
 8010d7c:	2000      	movs	r0, #0
}
 8010d7e:	4770      	bx	lr
 8010d80:	edb88320 	.word	0xedb88320

08010d84 <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 8010d84:	2001      	movs	r0, #1
 8010d86:	4770      	bx	lr

08010d88 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 8010d88:	280a      	cmp	r0, #10
 8010d8a:	d807      	bhi.n	8010d9c <RadioGetLoRaBandwidthInHz+0x14>
 8010d8c:	e8df f000 	tbb	[pc, r0]
 8010d90:	17110b20 	.word	0x17110b20
 8010d94:	061e1c1a 	.word	0x061e1c1a
 8010d98:	0e08      	.short	0x0e08
 8010d9a:	14          	.byte	0x14
 8010d9b:	00          	.byte	0x00
 8010d9c:	2000      	movs	r0, #0
 8010d9e:	4770      	bx	lr
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
        break;
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8010da0:	f642 00b1 	movw	r0, #10417	; 0x28b1
        break;
 8010da4:	4770      	bx	lr
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8010da6:	f643 5009 	movw	r0, #15625	; 0x3d09
        break;
 8010daa:	4770      	bx	lr
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8010dac:	f245 1061 	movw	r0, #20833	; 0x5161
        break;
 8010db0:	4770      	bx	lr
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8010db2:	f647 2012 	movw	r0, #31250	; 0x7a12
        break;
 8010db6:	4770      	bx	lr
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8010db8:	f24a 20c3 	movw	r0, #41667	; 0xa2c3
        break;
 8010dbc:	4770      	bx	lr
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8010dbe:	f24f 4024 	movw	r0, #62500	; 0xf424
        break;
 8010dc2:	4770      	bx	lr
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8010dc4:	4804      	ldr	r0, [pc, #16]	; (8010dd8 <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 8010dc6:	4770      	bx	lr
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8010dc8:	4804      	ldr	r0, [pc, #16]	; (8010ddc <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 8010dca:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8010dcc:	4804      	ldr	r0, [pc, #16]	; (8010de0 <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 8010dce:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 8010dd0:	f641 6084 	movw	r0, #7812	; 0x1e84
    }

    return bandwidthInHz;
}
 8010dd4:	4770      	bx	lr
 8010dd6:	bf00      	nop
 8010dd8:	0001e848 	.word	0x0001e848
 8010ddc:	0003d090 	.word	0x0003d090
 8010de0:	0007a120 	.word	0x0007a120

08010de4 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8010de4:	f89d 1004 	ldrb.w	r1, [sp, #4]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 8010de8:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8010dea:	b953      	cbnz	r3, 8010e02 <RadioGetGfskTimeOnAirNumerator+0x1e>
 8010dec:	2008      	movs	r0, #8
    return ( preambleLen << 3 ) +
 8010dee:	4402      	add	r2, r0
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8010df0:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8010df2:	b141      	cbz	r1, 8010e06 <RadioGetGfskTimeOnAirNumerator+0x22>
 8010df4:	2302      	movs	r3, #2
 8010df6:	f89d 0000 	ldrb.w	r0, [sp]
 8010dfa:	4418      	add	r0, r3
    /* ST_WORKAROUND_END */
}
 8010dfc:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8010e00:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8010e02:	2000      	movs	r0, #0
 8010e04:	e7f3      	b.n	8010dee <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8010e06:	2300      	movs	r3, #0
 8010e08:	e7f5      	b.n	8010df6 <RadioGetGfskTimeOnAirNumerator+0x12>

08010e0a <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8010e0a:	b570      	push	{r4, r5, r6, lr}
 8010e0c:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8010e10:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 8010e14:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8010e16:	f1a1 0c05 	sub.w	ip, r1, #5
 8010e1a:	f1bc 0f01 	cmp.w	ip, #1
 8010e1e:	d932      	bls.n	8010e86 <RadioGetLoRaTimeOnAirNumerator+0x7c>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8010e20:	b918      	cbnz	r0, 8010e2a <RadioGetLoRaTimeOnAirNumerator+0x20>
 8010e22:	f1a1 060b 	sub.w	r6, r1, #11
 8010e26:	2e01      	cmp	r6, #1
 8010e28:	d935      	bls.n	8010e96 <RadioGetLoRaTimeOnAirNumerator+0x8c>
 8010e2a:	2801      	cmp	r0, #1
 8010e2c:	d02f      	beq.n	8010e8e <RadioGetLoRaTimeOnAirNumerator+0x84>
    bool    lowDatareOptimize = false;
 8010e2e:	2600      	movs	r6, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8010e30:	f89d e014 	ldrb.w	lr, [sp, #20]
 8010e34:	ea4f 0ece 	mov.w	lr, lr, lsl #3
                            ( crcOn ? 16 : 0 ) -
 8010e38:	b38d      	cbz	r5, 8010e9e <RadioGetLoRaTimeOnAirNumerator+0x94>
 8010e3a:	f04f 0c10 	mov.w	ip, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8010e3e:	44e6      	add	lr, ip
                            ( 4 * datarate ) +
 8010e40:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 8010e42:	ebae 0e81 	sub.w	lr, lr, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 8010e46:	b36c      	cbz	r4, 8010ea4 <RadioGetLoRaTimeOnAirNumerator+0x9a>
 8010e48:	f04f 0c00 	mov.w	ip, #0
                            ( 4 * datarate ) +
 8010e4c:	44f4      	add	ip, lr

    if( datarate <= 6 )
 8010e4e:	2906      	cmp	r1, #6
 8010e50:	d904      	bls.n	8010e5c <RadioGetLoRaTimeOnAirNumerator+0x52>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 8010e52:	f10c 0c08 	add.w	ip, ip, #8

        if( lowDatareOptimize == true )
 8010e56:	b10e      	cbz	r6, 8010e5c <RadioGetLoRaTimeOnAirNumerator+0x52>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8010e58:	1e88      	subs	r0, r1, #2
 8010e5a:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 8010e5c:	f1bc 0f00 	cmp.w	ip, #0
 8010e60:	db23      	blt.n	8010eaa <RadioGetLoRaTimeOnAirNumerator+0xa0>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8010e62:	4484      	add	ip, r0
 8010e64:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010e68:	fb9c fcf0 	sdiv	ip, ip, r0
 8010e6c:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 8010e70:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 8010e74:	2906      	cmp	r1, #6
 8010e76:	d801      	bhi.n	8010e7c <RadioGetLoRaTimeOnAirNumerator+0x72>
    {
        intermediate += 2;
 8010e78:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8010e7c:	0080      	lsls	r0, r0, #2
 8010e7e:	3001      	adds	r0, #1
 8010e80:	3902      	subs	r1, #2
}
 8010e82:	4088      	lsls	r0, r1
 8010e84:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 8010e86:	2b0b      	cmp	r3, #11
 8010e88:	d8ca      	bhi.n	8010e20 <RadioGetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 8010e8a:	230c      	movs	r3, #12
 8010e8c:	e7c8      	b.n	8010e20 <RadioGetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8010e8e:	290c      	cmp	r1, #12
 8010e90:	d003      	beq.n	8010e9a <RadioGetLoRaTimeOnAirNumerator+0x90>
    bool    lowDatareOptimize = false;
 8010e92:	2600      	movs	r6, #0
 8010e94:	e7cc      	b.n	8010e30 <RadioGetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 8010e96:	2601      	movs	r6, #1
 8010e98:	e7ca      	b.n	8010e30 <RadioGetLoRaTimeOnAirNumerator+0x26>
 8010e9a:	2601      	movs	r6, #1
 8010e9c:	e7c8      	b.n	8010e30 <RadioGetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 8010e9e:	f04f 0c00 	mov.w	ip, #0
 8010ea2:	e7cc      	b.n	8010e3e <RadioGetLoRaTimeOnAirNumerator+0x34>
                            ( fixLen ? 0 : 20 );
 8010ea4:	f04f 0c14 	mov.w	ip, #20
 8010ea8:	e7d0      	b.n	8010e4c <RadioGetLoRaTimeOnAirNumerator+0x42>
        ceilNumerator = 0;
 8010eaa:	f04f 0c00 	mov.w	ip, #0
 8010eae:	e7d8      	b.n	8010e62 <RadioGetLoRaTimeOnAirNumerator+0x58>

08010eb0 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8010eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010eb2:	b085      	sub	sp, #20
 8010eb4:	460e      	mov	r6, r1
 8010eb6:	4615      	mov	r5, r2
 8010eb8:	4619      	mov	r1, r3
 8010eba:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8010ebe:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8010ec2:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8010ec6:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 8010eca:	b148      	cbz	r0, 8010ee0 <RadioTimeOnAir+0x30>
 8010ecc:	2801      	cmp	r0, #1
 8010ece:	d012      	beq.n	8010ef6 <RadioTimeOnAir+0x46>
 8010ed0:	2501      	movs	r5, #1
 8010ed2:	2400      	movs	r4, #0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 8010ed4:	442c      	add	r4, r5
 8010ed6:	1e60      	subs	r0, r4, #1
}
 8010ed8:	fbb0 f0f5 	udiv	r0, r0, r5
 8010edc:	b005      	add	sp, #20
 8010ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8010ee0:	f8cd c004 	str.w	ip, [sp, #4]
 8010ee4:	9700      	str	r7, [sp, #0]
 8010ee6:	4628      	mov	r0, r5
 8010ee8:	f7ff ff7c 	bl	8010de4 <RadioGetGfskTimeOnAirNumerator>
 8010eec:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8010ef0:	fb00 f404 	mul.w	r4, r0, r4
        break;
 8010ef4:	e7ee      	b.n	8010ed4 <RadioTimeOnAir+0x24>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8010ef6:	f8cd c008 	str.w	ip, [sp, #8]
 8010efa:	9701      	str	r7, [sp, #4]
 8010efc:	9300      	str	r3, [sp, #0]
 8010efe:	4613      	mov	r3, r2
 8010f00:	460a      	mov	r2, r1
 8010f02:	4629      	mov	r1, r5
 8010f04:	4630      	mov	r0, r6
 8010f06:	f7ff ff80 	bl	8010e0a <RadioGetLoRaTimeOnAirNumerator>
 8010f0a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8010f0e:	fb00 f404 	mul.w	r4, r0, r4
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8010f12:	4b03      	ldr	r3, [pc, #12]	; (8010f20 <RadioTimeOnAir+0x70>)
 8010f14:	5d98      	ldrb	r0, [r3, r6]
 8010f16:	f7ff ff37 	bl	8010d88 <RadioGetLoRaBandwidthInHz>
 8010f1a:	4605      	mov	r5, r0
        break;
 8010f1c:	e7da      	b.n	8010ed4 <RadioTimeOnAir+0x24>
 8010f1e:	bf00      	nop
 8010f20:	08014e50 	.word	0x08014e50

08010f24 <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 8010f24:	b508      	push	{r3, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8010f26:	4b05      	ldr	r3, [pc, #20]	; (8010f3c <RadioOnTxTimeoutProcess+0x18>)
 8010f28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8010f2c:	629a      	str	r2, [r3, #40]	; 0x28
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8010f2e:	4b04      	ldr	r3, [pc, #16]	; (8010f40 <RadioOnTxTimeoutProcess+0x1c>)
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	b113      	cbz	r3, 8010f3a <RadioOnTxTimeoutProcess+0x16>
 8010f34:	685b      	ldr	r3, [r3, #4]
 8010f36:	b103      	cbz	r3, 8010f3a <RadioOnTxTimeoutProcess+0x16>
    {
        RadioEvents->TxTimeout( );
 8010f38:	4798      	blx	r3
    }
}
 8010f3a:	bd08      	pop	{r3, pc}
 8010f3c:	48000400 	.word	0x48000400
 8010f40:	20001128 	.word	0x20001128

08010f44 <RadioOnTxTimeoutIrq>:
{
 8010f44:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 8010f46:	f7ff ffed 	bl	8010f24 <RadioOnTxTimeoutProcess>
}
 8010f4a:	bd08      	pop	{r3, pc}

08010f4c <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8010f4c:	b508      	push	{r3, lr}
 8010f4e:	4b05      	ldr	r3, [pc, #20]	; (8010f64 <RadioOnRxTimeoutProcess+0x18>)
 8010f50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010f54:	629a      	str	r2, [r3, #40]	; 0x28
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8010f56:	4b04      	ldr	r3, [pc, #16]	; (8010f68 <RadioOnRxTimeoutProcess+0x1c>)
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	b113      	cbz	r3, 8010f62 <RadioOnRxTimeoutProcess+0x16>
 8010f5c:	68db      	ldr	r3, [r3, #12]
 8010f5e:	b103      	cbz	r3, 8010f62 <RadioOnRxTimeoutProcess+0x16>
    {
        RadioEvents->RxTimeout( );
 8010f60:	4798      	blx	r3
    }
}
 8010f62:	bd08      	pop	{r3, pc}
 8010f64:	48000400 	.word	0x48000400
 8010f68:	20001128 	.word	0x20001128

08010f6c <RadioOnRxTimeoutIrq>:
{
 8010f6c:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 8010f6e:	f7ff ffed 	bl	8010f4c <RadioOnRxTimeoutProcess>
}
 8010f72:	bd08      	pop	{r3, pc}

08010f74 <RadioSetRxGenericConfig>:
    }
    return status;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8010f74:	f04f 30ff 	mov.w	r0, #4294967295
 8010f78:	4770      	bx	lr

08010f7a <RadioSetTxGenericConfig>:
    SubgRf.TxTimeout = timeout;
    return 0;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8010f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8010f7e:	4770      	bx	lr

08010f80 <RadioTxCw>:
{
 8010f80:	b508      	push	{r3, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8010f82:	f001 fbab 	bl	80126dc <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8010f86:	2101      	movs	r1, #1
 8010f88:	f001 fb94 	bl	80126b4 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8010f8c:	f000 feac 	bl	8011ce8 <SUBGRF_SetTxContinuousWave>
}
 8010f90:	bd08      	pop	{r3, pc}
	...

08010f94 <RadioSetRxDutyCycle>:
{
 8010f94:	b570      	push	{r4, r5, r6, lr}
 8010f96:	4604      	mov	r4, r0
 8010f98:	460d      	mov	r5, r1
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8010f9a:	eb01 0340 	add.w	r3, r1, r0, lsl #1
 8010f9e:	4e09      	ldr	r6, [pc, #36]	; (8010fc4 <RadioSetRxDutyCycle+0x30>)
 8010fa0:	65b3      	str	r3, [r6, #88]	; 0x58
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8010fa2:	2300      	movs	r3, #0
 8010fa4:	461a      	mov	r2, r3
 8010fa6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010faa:	4608      	mov	r0, r1
 8010fac:	f000 ff47 	bl	8011e3e <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8010fb0:	2100      	movs	r1, #0
 8010fb2:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 8010fb6:	f001 fb7d 	bl	80126b4 <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8010fba:	4629      	mov	r1, r5
 8010fbc:	4620      	mov	r0, r4
 8010fbe:	f000 fe63 	bl	8011c88 <SUBGRF_SetRxDutyCycle>
}
 8010fc2:	bd70      	pop	{r4, r5, r6, pc}
 8010fc4:	20001144 	.word	0x20001144

08010fc8 <RadioRxBoosted>:
{
 8010fc8:	b538      	push	{r3, r4, r5, lr}
 8010fca:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init() )
 8010fcc:	f001 fc57 	bl	801287e <RFW_Is_Init>
 8010fd0:	2801      	cmp	r0, #1
 8010fd2:	d019      	beq.n	8011008 <RadioRxBoosted+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8010fd4:	2300      	movs	r3, #0
 8010fd6:	461a      	mov	r2, r3
 8010fd8:	f240 2162 	movw	r1, #610	; 0x262
 8010fdc:	4608      	mov	r0, r1
 8010fde:	f000 ff2e 	bl	8011e3e <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 8010fe2:	b9a4      	cbnz	r4, 801100e <RadioRxBoosted+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8010fe4:	4c11      	ldr	r4, [pc, #68]	; (801102c <RadioRxBoosted+0x64>)
 8010fe6:	2100      	movs	r1, #0
 8010fe8:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 8010fea:	4b11      	ldr	r3, [pc, #68]	; (8011030 <RadioRxBoosted+0x68>)
 8010fec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010ff0:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8010ff2:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 8010ff6:	f001 fb5d 	bl	80126b4 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 8010ffa:	7863      	ldrb	r3, [r4, #1]
 8010ffc:	b183      	cbz	r3, 8011020 <RadioRxBoosted+0x58>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8010ffe:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8011002:	f000 ffef 	bl	8011fe4 <SUBGRF_SetRxBoosted>
}
 8011006:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit();
 8011008:	f001 fc41 	bl	801288e <RFW_ReceiveInit>
 801100c:	e7e9      	b.n	8010fe2 <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 801100e:	4d09      	ldr	r5, [pc, #36]	; (8011034 <RadioRxBoosted+0x6c>)
 8011010:	4621      	mov	r1, r4
 8011012:	4628      	mov	r0, r5
 8011014:	f002 f90e 	bl	8013234 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8011018:	4628      	mov	r0, r5
 801101a:	f002 f8c5 	bl	80131a8 <UTIL_TIMER_Start>
 801101e:	e7e1      	b.n	8010fe4 <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8011020:	4b02      	ldr	r3, [pc, #8]	; (801102c <RadioRxBoosted+0x64>)
 8011022:	6898      	ldr	r0, [r3, #8]
 8011024:	0180      	lsls	r0, r0, #6
 8011026:	f000 ffdd 	bl	8011fe4 <SUBGRF_SetRxBoosted>
}
 801102a:	e7ec      	b.n	8011006 <RadioRxBoosted+0x3e>
 801102c:	20001144 	.word	0x20001144
 8011030:	48000400 	.word	0x48000400
 8011034:	2000112c 	.word	0x2000112c

08011038 <RadioStandby>:
{
 8011038:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 801103a:	2000      	movs	r0, #0
 801103c:	f000 fdd6 	bl	8011bec <SUBGRF_SetStandby>
}
 8011040:	bd08      	pop	{r3, pc}

08011042 <RadioWrite>:
{
 8011042:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister( addr, data );
 8011044:	f000 ffbe 	bl	8011fc4 <SUBGRF_WriteRegister>
}
 8011048:	bd08      	pop	{r3, pc}
	...

0801104c <RadioTxPrbs>:
{
 801104c:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801104e:	2101      	movs	r1, #1
 8011050:	4b07      	ldr	r3, [pc, #28]	; (8011070 <RadioTxPrbs+0x24>)
 8011052:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 8011056:	f001 fb2d 	bl	80126b4 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 801105a:	212d      	movs	r1, #45	; 0x2d
 801105c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8011060:	f7ff ffef 	bl	8011042 <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 8011064:	f000 fe47 	bl	8011cf6 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8011068:	4802      	ldr	r0, [pc, #8]	; (8011074 <RadioTxPrbs+0x28>)
 801106a:	f000 fdd9 	bl	8011c20 <SUBGRF_SetTx>
}
 801106e:	bd08      	pop	{r3, pc}
 8011070:	20001144 	.word	0x20001144
 8011074:	000fffff 	.word	0x000fffff

08011078 <RadioRead>:
{
 8011078:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister( addr );
 801107a:	f001 f895 	bl	80121a8 <SUBGRF_ReadRegister>
}
 801107e:	bd08      	pop	{r3, pc}

08011080 <RadioGetStatus>:
{
 8011080:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 8011082:	f000 fdad 	bl	8011be0 <SUBGRF_GetOperatingMode>
 8011086:	2805      	cmp	r0, #5
 8011088:	d007      	beq.n	801109a <RadioGetStatus+0x1a>
 801108a:	2807      	cmp	r0, #7
 801108c:	d007      	beq.n	801109e <RadioGetStatus+0x1e>
 801108e:	2804      	cmp	r0, #4
 8011090:	d001      	beq.n	8011096 <RadioGetStatus+0x16>
            return RF_IDLE;
 8011092:	2000      	movs	r0, #0
}
 8011094:	bd08      	pop	{r3, pc}
    switch( SUBGRF_GetOperatingMode( ) )
 8011096:	2002      	movs	r0, #2
 8011098:	e7fc      	b.n	8011094 <RadioGetStatus+0x14>
            return RF_RX_RUNNING;
 801109a:	2001      	movs	r0, #1
 801109c:	e7fa      	b.n	8011094 <RadioGetStatus+0x14>
            return RF_CAD;
 801109e:	2003      	movs	r0, #3
 80110a0:	e7f8      	b.n	8011094 <RadioGetStatus+0x14>
	...

080110a4 <RadioIrqProcess>:
{
 80110a4:	b530      	push	{r4, r5, lr}
 80110a6:	b083      	sub	sp, #12
    uint8_t size = 0;
 80110a8:	2300      	movs	r3, #0
 80110aa:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 80110ae:	9300      	str	r3, [sp, #0]
    switch( SubgRf.RadioIrq )
 80110b0:	4ba5      	ldr	r3, [pc, #660]	; (8011348 <RadioIrqProcess+0x2a4>)
 80110b2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80110b6:	2b20      	cmp	r3, #32
 80110b8:	d829      	bhi.n	801110e <RadioIrqProcess+0x6a>
 80110ba:	b21a      	sxth	r2, r3
 80110bc:	2a00      	cmp	r2, #0
 80110be:	f000 8140 	beq.w	8011342 <RadioIrqProcess+0x29e>
 80110c2:	3b01      	subs	r3, #1
 80110c4:	2b1f      	cmp	r3, #31
 80110c6:	f200 813c 	bhi.w	8011342 <RadioIrqProcess+0x29e>
 80110ca:	e8df f013 	tbh	[pc, r3, lsl #1]
 80110ce:	0063      	.short	0x0063
 80110d0:	013a007f 	.word	0x013a007f
 80110d4:	013a00f7 	.word	0x013a00f7
 80110d8:	013a013a 	.word	0x013a013a
 80110dc:	013a0127 	.word	0x013a0127
 80110e0:	013a013a 	.word	0x013a013a
 80110e4:	013a013a 	.word	0x013a013a
 80110e8:	013a013a 	.word	0x013a013a
 80110ec:	013a0134 	.word	0x013a0134
 80110f0:	013a013a 	.word	0x013a013a
 80110f4:	013a013a 	.word	0x013a013a
 80110f8:	013a013a 	.word	0x013a013a
 80110fc:	013a013a 	.word	0x013a013a
 8011100:	013a013a 	.word	0x013a013a
 8011104:	013a013a 	.word	0x013a013a
 8011108:	013a013a 	.word	0x013a013a
 801110c:	0155      	.short	0x0155
 801110e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011112:	f000 80b3 	beq.w	801127c <RadioIrqProcess+0x1d8>
 8011116:	d928      	bls.n	801116a <RadioIrqProcess+0xc6>
 8011118:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801111c:	f040 8111 	bne.w	8011342 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8011120:	4b8a      	ldr	r3, [pc, #552]	; (801134c <RadioIrqProcess+0x2a8>)
 8011122:	2201      	movs	r2, #1
 8011124:	2100      	movs	r1, #0
 8011126:	2002      	movs	r0, #2
 8011128:	f001 fc90 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 801112c:	f000 fd58 	bl	8011be0 <SUBGRF_GetOperatingMode>
 8011130:	2804      	cmp	r0, #4
 8011132:	f000 80b0 	beq.w	8011296 <RadioIrqProcess+0x1f2>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8011136:	f000 fd53 	bl	8011be0 <SUBGRF_GetOperatingMode>
 801113a:	2805      	cmp	r0, #5
 801113c:	f040 8101 	bne.w	8011342 <RadioIrqProcess+0x29e>
  WRITE_REG(GPIOx->BRR, PinMask);
 8011140:	4b83      	ldr	r3, [pc, #524]	; (8011350 <RadioIrqProcess+0x2ac>)
 8011142:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011146:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &RxTimeoutTimer );
 8011148:	4882      	ldr	r0, [pc, #520]	; (8011354 <RadioIrqProcess+0x2b0>)
 801114a:	f001 ffd3 	bl	80130f4 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801114e:	2000      	movs	r0, #0
 8011150:	f000 fd4c 	bl	8011bec <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8011154:	4b80      	ldr	r3, [pc, #512]	; (8011358 <RadioIrqProcess+0x2b4>)
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	2b00      	cmp	r3, #0
 801115a:	f000 80f2 	beq.w	8011342 <RadioIrqProcess+0x29e>
 801115e:	68db      	ldr	r3, [r3, #12]
 8011160:	2b00      	cmp	r3, #0
 8011162:	f000 80ee 	beq.w	8011342 <RadioIrqProcess+0x29e>
                RadioEvents->RxTimeout( );
 8011166:	4798      	blx	r3
 8011168:	e0eb      	b.n	8011342 <RadioIrqProcess+0x29e>
    switch( SubgRf.RadioIrq )
 801116a:	2b40      	cmp	r3, #64	; 0x40
 801116c:	f000 811d 	beq.w	80113aa <RadioIrqProcess+0x306>
 8011170:	2b80      	cmp	r3, #128	; 0x80
 8011172:	f040 80e6 	bne.w	8011342 <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 8011176:	2000      	movs	r0, #0
 8011178:	f000 fd38 	bl	8011bec <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801117c:	4b76      	ldr	r3, [pc, #472]	; (8011358 <RadioIrqProcess+0x2b4>)
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	2b00      	cmp	r3, #0
 8011182:	f000 80de 	beq.w	8011342 <RadioIrqProcess+0x29e>
 8011186:	699b      	ldr	r3, [r3, #24]
 8011188:	2b00      	cmp	r3, #0
 801118a:	f000 80da 	beq.w	8011342 <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( false );
 801118e:	2000      	movs	r0, #0
 8011190:	4798      	blx	r3
 8011192:	e0d6      	b.n	8011342 <RadioIrqProcess+0x29e>
 8011194:	4b6e      	ldr	r3, [pc, #440]	; (8011350 <RadioIrqProcess+0x2ac>)
 8011196:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801119a:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &TxTimeoutTimer );
 801119c:	486f      	ldr	r0, [pc, #444]	; (801135c <RadioIrqProcess+0x2b8>)
 801119e:	f001 ffa9 	bl	80130f4 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 80111a2:	2000      	movs	r0, #0
 80111a4:	f000 fd22 	bl	8011bec <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 80111a8:	f001 fb6b 	bl	8012882 <RFW_Is_LongPacketModeEnabled>
 80111ac:	2801      	cmp	r0, #1
 80111ae:	d00a      	beq.n	80111c6 <RadioIrqProcess+0x122>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80111b0:	4b69      	ldr	r3, [pc, #420]	; (8011358 <RadioIrqProcess+0x2b4>)
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	f000 80c4 	beq.w	8011342 <RadioIrqProcess+0x29e>
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	2b00      	cmp	r3, #0
 80111be:	f000 80c0 	beq.w	8011342 <RadioIrqProcess+0x29e>
            RadioEvents->TxDone( );
 80111c2:	4798      	blx	r3
 80111c4:	e0bd      	b.n	8011342 <RadioIrqProcess+0x29e>
            RFW_DeInit_TxLongPacket( );
 80111c6:	f001 fb65 	bl	8012894 <RFW_DeInit_TxLongPacket>
 80111ca:	e7f1      	b.n	80111b0 <RadioIrqProcess+0x10c>
 80111cc:	4b60      	ldr	r3, [pc, #384]	; (8011350 <RadioIrqProcess+0x2ac>)
 80111ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80111d2:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &RxTimeoutTimer );
 80111d4:	485f      	ldr	r0, [pc, #380]	; (8011354 <RadioIrqProcess+0x2b0>)
 80111d6:	f001 ff8d 	bl	80130f4 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80111da:	4b5b      	ldr	r3, [pc, #364]	; (8011348 <RadioIrqProcess+0x2a4>)
 80111dc:	785b      	ldrb	r3, [r3, #1]
 80111de:	b303      	cbz	r3, 8011222 <RadioIrqProcess+0x17e>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 80111e0:	22ff      	movs	r2, #255	; 0xff
 80111e2:	f10d 0107 	add.w	r1, sp, #7
 80111e6:	485e      	ldr	r0, [pc, #376]	; (8011360 <RadioIrqProcess+0x2bc>)
 80111e8:	f001 fa4a 	bl	8012680 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 80111ec:	485d      	ldr	r0, [pc, #372]	; (8011364 <RadioIrqProcess+0x2c0>)
 80111ee:	f000 fead 	bl	8011f4c <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80111f2:	4b59      	ldr	r3, [pc, #356]	; (8011358 <RadioIrqProcess+0x2b4>)
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	f000 80a3 	beq.w	8011342 <RadioIrqProcess+0x29e>
 80111fc:	689c      	ldr	r4, [r3, #8]
 80111fe:	2c00      	cmp	r4, #0
 8011200:	f000 809f 	beq.w	8011342 <RadioIrqProcess+0x29e>
            switch( SubgRf.PacketStatus.packetType )
 8011204:	4b50      	ldr	r3, [pc, #320]	; (8011348 <RadioIrqProcess+0x2a4>)
 8011206:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801120a:	2b01      	cmp	r3, #1
 801120c:	d11d      	bne.n	801124a <RadioIrqProcess+0x1a6>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 801120e:	4a4e      	ldr	r2, [pc, #312]	; (8011348 <RadioIrqProcess+0x2a4>)
 8011210:	f992 3031 	ldrsb.w	r3, [r2, #49]	; 0x31
 8011214:	f992 2030 	ldrsb.w	r2, [r2, #48]	; 0x30
 8011218:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801121c:	4850      	ldr	r0, [pc, #320]	; (8011360 <RadioIrqProcess+0x2bc>)
 801121e:	47a0      	blx	r4
                break;
 8011220:	e08f      	b.n	8011342 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 8011222:	2000      	movs	r0, #0
 8011224:	f000 fce2 	bl	8011bec <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8011228:	2100      	movs	r1, #0
 801122a:	f640 1002 	movw	r0, #2306	; 0x902
 801122e:	f000 fec9 	bl	8011fc4 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8011232:	f640 1044 	movw	r0, #2372	; 0x944
 8011236:	f000 ffb7 	bl	80121a8 <SUBGRF_ReadRegister>
 801123a:	f040 0102 	orr.w	r1, r0, #2
 801123e:	b2c9      	uxtb	r1, r1
 8011240:	f640 1044 	movw	r0, #2372	; 0x944
 8011244:	f000 febe 	bl	8011fc4 <SUBGRF_WriteRegister>
 8011248:	e7ca      	b.n	80111e0 <RadioIrqProcess+0x13c>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 801124a:	4c3f      	ldr	r4, [pc, #252]	; (8011348 <RadioIrqProcess+0x2a4>)
 801124c:	4669      	mov	r1, sp
 801124e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8011250:	f001 faca 	bl	80127e8 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 8011254:	4b40      	ldr	r3, [pc, #256]	; (8011358 <RadioIrqProcess+0x2b4>)
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	689d      	ldr	r5, [r3, #8]
 801125a:	9b00      	ldr	r3, [sp, #0]
 801125c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8011260:	4a41      	ldr	r2, [pc, #260]	; (8011368 <RadioIrqProcess+0x2c4>)
 8011262:	fb82 1203 	smull	r1, r2, r2, r3
 8011266:	17db      	asrs	r3, r3, #31
 8011268:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 801126c:	b25b      	sxtb	r3, r3
 801126e:	f994 2029 	ldrsb.w	r2, [r4, #41]	; 0x29
 8011272:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8011276:	483a      	ldr	r0, [pc, #232]	; (8011360 <RadioIrqProcess+0x2bc>)
 8011278:	47a8      	blx	r5
                break;
 801127a:	e062      	b.n	8011342 <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 801127c:	2000      	movs	r0, #0
 801127e:	f000 fcb5 	bl	8011bec <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8011282:	4b35      	ldr	r3, [pc, #212]	; (8011358 <RadioIrqProcess+0x2b4>)
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d05b      	beq.n	8011342 <RadioIrqProcess+0x29e>
 801128a:	699b      	ldr	r3, [r3, #24]
 801128c:	2b00      	cmp	r3, #0
 801128e:	d058      	beq.n	8011342 <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( true );
 8011290:	2001      	movs	r0, #1
 8011292:	4798      	blx	r3
 8011294:	e055      	b.n	8011342 <RadioIrqProcess+0x29e>
 8011296:	4b2e      	ldr	r3, [pc, #184]	; (8011350 <RadioIrqProcess+0x2ac>)
 8011298:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801129c:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &TxTimeoutTimer );
 801129e:	482f      	ldr	r0, [pc, #188]	; (801135c <RadioIrqProcess+0x2b8>)
 80112a0:	f001 ff28 	bl	80130f4 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80112a4:	2000      	movs	r0, #0
 80112a6:	f000 fca1 	bl	8011bec <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80112aa:	4b2b      	ldr	r3, [pc, #172]	; (8011358 <RadioIrqProcess+0x2b4>)
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d047      	beq.n	8011342 <RadioIrqProcess+0x29e>
 80112b2:	685b      	ldr	r3, [r3, #4]
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d044      	beq.n	8011342 <RadioIrqProcess+0x29e>
                RadioEvents->TxTimeout( );
 80112b8:	4798      	blx	r3
 80112ba:	e042      	b.n	8011342 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 80112bc:	4b2b      	ldr	r3, [pc, #172]	; (801136c <RadioIrqProcess+0x2c8>)
 80112be:	2201      	movs	r2, #1
 80112c0:	2100      	movs	r1, #0
 80112c2:	2002      	movs	r0, #2
 80112c4:	f001 fbc2 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 80112c8:	4b1f      	ldr	r3, [pc, #124]	; (8011348 <RadioIrqProcess+0x2a4>)
 80112ca:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80112cc:	b3c9      	cbz	r1, 8011342 <RadioIrqProcess+0x29e>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 80112ce:	f3c1 4107 	ubfx	r1, r1, #16, #8
 80112d2:	f640 1003 	movw	r0, #2307	; 0x903
 80112d6:	f7ff feb4 	bl	8011042 <RadioWrite>
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 80112da:	4c1b      	ldr	r4, [pc, #108]	; (8011348 <RadioIrqProcess+0x2a4>)
 80112dc:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80112e0:	f640 1004 	movw	r0, #2308	; 0x904
 80112e4:	f7ff fead 	bl	8011042 <RadioWrite>
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 80112e8:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
 80112ec:	f640 1005 	movw	r0, #2309	; 0x905
 80112f0:	f7ff fea7 	bl	8011042 <RadioWrite>
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 80112f4:	f640 1002 	movw	r0, #2306	; 0x902
 80112f8:	f7ff febe 	bl	8011078 <RadioRead>
 80112fc:	f040 0101 	orr.w	r1, r0, #1
 8011300:	b2c9      	uxtb	r1, r1
 8011302:	f640 1002 	movw	r0, #2306	; 0x902
 8011306:	f7ff fe9c 	bl	8011042 <RadioWrite>
          SubgRf.RxDcPreambleDetectTimeout = 0;
 801130a:	2200      	movs	r2, #0
 801130c:	65a2      	str	r2, [r4, #88]	; 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801130e:	4613      	mov	r3, r2
 8011310:	f240 2162 	movw	r1, #610	; 0x262
 8011314:	4608      	mov	r0, r1
 8011316:	f000 fd92 	bl	8011e3e <SUBGRF_SetDioIrqParams>
 801131a:	e012      	b.n	8011342 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 801131c:	4b14      	ldr	r3, [pc, #80]	; (8011370 <RadioIrqProcess+0x2cc>)
 801131e:	2201      	movs	r2, #1
 8011320:	2100      	movs	r1, #0
 8011322:	2002      	movs	r0, #2
 8011324:	f001 fb92 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8011328:	f001 faa9 	bl	801287e <RFW_Is_Init>
 801132c:	2801      	cmp	r0, #1
 801132e:	d108      	bne.n	8011342 <RadioIrqProcess+0x29e>
            RFW_ReceivePayload( );
 8011330:	f001 fab1 	bl	8012896 <RFW_ReceivePayload>
 8011334:	e005      	b.n	8011342 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8011336:	4b0f      	ldr	r3, [pc, #60]	; (8011374 <RadioIrqProcess+0x2d0>)
 8011338:	2201      	movs	r2, #1
 801133a:	2100      	movs	r1, #0
 801133c:	2002      	movs	r0, #2
 801133e:	f001 fb85 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
}
 8011342:	b003      	add	sp, #12
 8011344:	bd30      	pop	{r4, r5, pc}
 8011346:	bf00      	nop
 8011348:	20001144 	.word	0x20001144
 801134c:	08014de4 	.word	0x08014de4
 8011350:	48000400 	.word	0x48000400
 8011354:	2000112c 	.word	0x2000112c
 8011358:	20001128 	.word	0x20001128
 801135c:	200011a0 	.word	0x200011a0
 8011360:	20001028 	.word	0x20001028
 8011364:	20001168 	.word	0x20001168
 8011368:	10624dd3 	.word	0x10624dd3
 801136c:	08014df8 	.word	0x08014df8
 8011370:	08014e04 	.word	0x08014e04
 8011374:	08014e10 	.word	0x08014e10
        TimerStop( &RxTimeoutTimer );
 8011378:	4817      	ldr	r0, [pc, #92]	; (80113d8 <RadioIrqProcess+0x334>)
 801137a:	f001 febb 	bl	80130f4 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801137e:	4b17      	ldr	r3, [pc, #92]	; (80113dc <RadioIrqProcess+0x338>)
 8011380:	785b      	ldrb	r3, [r3, #1]
 8011382:	b173      	cbz	r3, 80113a2 <RadioIrqProcess+0x2fe>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8011384:	4b16      	ldr	r3, [pc, #88]	; (80113e0 <RadioIrqProcess+0x33c>)
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	2b00      	cmp	r3, #0
 801138a:	d0da      	beq.n	8011342 <RadioIrqProcess+0x29e>
 801138c:	68db      	ldr	r3, [r3, #12]
 801138e:	2b00      	cmp	r3, #0
 8011390:	d0d7      	beq.n	8011342 <RadioIrqProcess+0x29e>
            RadioEvents->RxTimeout( );
 8011392:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8011394:	4b13      	ldr	r3, [pc, #76]	; (80113e4 <RadioIrqProcess+0x340>)
 8011396:	2201      	movs	r2, #1
 8011398:	2100      	movs	r1, #0
 801139a:	2002      	movs	r0, #2
 801139c:	f001 fb56 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
 80113a0:	e7cf      	b.n	8011342 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 80113a2:	2000      	movs	r0, #0
 80113a4:	f000 fc22 	bl	8011bec <SUBGRF_SetStandby>
 80113a8:	e7ec      	b.n	8011384 <RadioIrqProcess+0x2e0>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 80113aa:	4b0f      	ldr	r3, [pc, #60]	; (80113e8 <RadioIrqProcess+0x344>)
 80113ac:	2201      	movs	r2, #1
 80113ae:	2100      	movs	r1, #0
 80113b0:	2002      	movs	r0, #2
 80113b2:	f001 fb4b 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 80113b6:	4b09      	ldr	r3, [pc, #36]	; (80113dc <RadioIrqProcess+0x338>)
 80113b8:	785b      	ldrb	r3, [r3, #1]
 80113ba:	b143      	cbz	r3, 80113ce <RadioIrqProcess+0x32a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 80113bc:	4b08      	ldr	r3, [pc, #32]	; (80113e0 <RadioIrqProcess+0x33c>)
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d0be      	beq.n	8011342 <RadioIrqProcess+0x29e>
 80113c4:	691b      	ldr	r3, [r3, #16]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d0bb      	beq.n	8011342 <RadioIrqProcess+0x29e>
            RadioEvents->RxError( );
 80113ca:	4798      	blx	r3
}
 80113cc:	e7b9      	b.n	8011342 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 80113ce:	2000      	movs	r0, #0
 80113d0:	f000 fc0c 	bl	8011bec <SUBGRF_SetStandby>
 80113d4:	e7f2      	b.n	80113bc <RadioIrqProcess+0x318>
 80113d6:	bf00      	nop
 80113d8:	2000112c 	.word	0x2000112c
 80113dc:	20001144 	.word	0x20001144
 80113e0:	20001128 	.word	0x20001128
 80113e4:	08014e1c 	.word	0x08014e1c
 80113e8:	08014e28 	.word	0x08014e28

080113ec <RadioOnDioIrq>:
{
 80113ec:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 80113ee:	4b03      	ldr	r3, [pc, #12]	; (80113fc <RadioOnDioIrq+0x10>)
 80113f0:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
    RADIO_IRQ_PROCESS();
 80113f4:	f7ff fe56 	bl	80110a4 <RadioIrqProcess>
}
 80113f8:	bd08      	pop	{r3, pc}
 80113fa:	bf00      	nop
 80113fc:	20001144 	.word	0x20001144

08011400 <RadioGetWakeupTime>:
{
 8011400:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8011402:	f001 f982 	bl	801270a <SUBGRF_GetRadioWakeUpTime>
}
 8011406:	3003      	adds	r0, #3
 8011408:	bd08      	pop	{r3, pc}
	...

0801140c <RadioSetMaxPayloadLength>:
{
 801140c:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 801140e:	2801      	cmp	r0, #1
 8011410:	d004      	beq.n	801141c <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8011412:	4b0a      	ldr	r3, [pc, #40]	; (801143c <RadioSetMaxPayloadLength+0x30>)
 8011414:	7d5b      	ldrb	r3, [r3, #21]
 8011416:	2b01      	cmp	r3, #1
 8011418:	d008      	beq.n	801142c <RadioSetMaxPayloadLength+0x20>
}
 801141a:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801141c:	4b08      	ldr	r3, [pc, #32]	; (8011440 <RadioSetMaxPayloadLength+0x34>)
 801141e:	7019      	strb	r1, [r3, #0]
 8011420:	4806      	ldr	r0, [pc, #24]	; (801143c <RadioSetMaxPayloadLength+0x30>)
 8011422:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011424:	300e      	adds	r0, #14
 8011426:	f001 f843 	bl	80124b0 <SUBGRF_SetPacketParams>
 801142a:	e7f6      	b.n	801141a <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 801142c:	4b04      	ldr	r3, [pc, #16]	; (8011440 <RadioSetMaxPayloadLength+0x34>)
 801142e:	7019      	strb	r1, [r3, #0]
 8011430:	4802      	ldr	r0, [pc, #8]	; (801143c <RadioSetMaxPayloadLength+0x30>)
 8011432:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011434:	300e      	adds	r0, #14
 8011436:	f001 f83b 	bl	80124b0 <SUBGRF_SetPacketParams>
}
 801143a:	e7ee      	b.n	801141a <RadioSetMaxPayloadLength+0xe>
 801143c:	20001144 	.word	0x20001144
 8011440:	2000010c 	.word	0x2000010c

08011444 <RadioReadRegisters>:
{
 8011444:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 8011446:	f001 f8a5 	bl	8012594 <SUBGRF_ReadRegisters>
}
 801144a:	bd08      	pop	{r3, pc}

0801144c <RadioWriteRegisters>:
{
 801144c:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 801144e:	f000 ffed 	bl	801242c <SUBGRF_WriteRegisters>
}
 8011452:	bd08      	pop	{r3, pc}

08011454 <RadioRssi>:
{
 8011454:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 8011456:	f000 fd6b 	bl	8011f30 <SUBGRF_GetRssiInst>
}
 801145a:	b200      	sxth	r0, r0
 801145c:	bd08      	pop	{r3, pc}
	...

08011460 <RadioSetTxContinuousWave>:
{
 8011460:	b538      	push	{r3, r4, r5, lr}
 8011462:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 8011464:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8011468:	fb02 f404 	mul.w	r4, r2, r4
    SUBGRF_SetRfFrequency( freq );
 801146c:	f000 fd20 	bl	8011eb0 <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 8011470:	4628      	mov	r0, r5
 8011472:	f001 f933 	bl	80126dc <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8011476:	2101      	movs	r1, #1
 8011478:	f001 f91c 	bl	80126b4 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801147c:	f000 fc34 	bl	8011ce8 <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8011480:	4d04      	ldr	r5, [pc, #16]	; (8011494 <RadioSetTxContinuousWave+0x34>)
 8011482:	4621      	mov	r1, r4
 8011484:	4628      	mov	r0, r5
 8011486:	f001 fed5 	bl	8013234 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801148a:	4628      	mov	r0, r5
 801148c:	f001 fe8c 	bl	80131a8 <UTIL_TIMER_Start>
}
 8011490:	bd38      	pop	{r3, r4, r5, pc}
 8011492:	bf00      	nop
 8011494:	200011a0 	.word	0x200011a0

08011498 <RadioSetChannel>:
{
 8011498:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 801149a:	f000 fd09 	bl	8011eb0 <SUBGRF_SetRfFrequency>
}
 801149e:	bd08      	pop	{r3, pc}

080114a0 <RadioStartCad>:
{
 80114a0:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80114a2:	2100      	movs	r1, #0
 80114a4:	4b07      	ldr	r3, [pc, #28]	; (80114c4 <RadioStartCad+0x24>)
 80114a6:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 80114aa:	f001 f903 	bl	80126b4 <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 80114ae:	2300      	movs	r3, #0
 80114b0:	461a      	mov	r2, r3
 80114b2:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80114b6:	4608      	mov	r0, r1
 80114b8:	f000 fcc1 	bl	8011e3e <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 80114bc:	f000 fc08 	bl	8011cd0 <SUBGRF_SetCad>
}
 80114c0:	bd08      	pop	{r3, pc}
 80114c2:	bf00      	nop
 80114c4:	20001144 	.word	0x20001144

080114c8 <RadioRx>:
{
 80114c8:	b538      	push	{r3, r4, r5, lr}
 80114ca:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init( ) )
 80114cc:	f001 f9d7 	bl	801287e <RFW_Is_Init>
 80114d0:	2801      	cmp	r0, #1
 80114d2:	d019      	beq.n	8011508 <RadioRx+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80114d4:	2300      	movs	r3, #0
 80114d6:	461a      	mov	r2, r3
 80114d8:	f240 2162 	movw	r1, #610	; 0x262
 80114dc:	4608      	mov	r0, r1
 80114de:	f000 fcae 	bl	8011e3e <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 80114e2:	b9a4      	cbnz	r4, 801150e <RadioRx+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80114e4:	4c11      	ldr	r4, [pc, #68]	; (801152c <RadioRx+0x64>)
 80114e6:	2100      	movs	r1, #0
 80114e8:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 80114ea:	4b11      	ldr	r3, [pc, #68]	; (8011530 <RadioRx+0x68>)
 80114ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80114f0:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80114f2:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 80114f6:	f001 f8dd 	bl	80126b4 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 80114fa:	7863      	ldrb	r3, [r4, #1]
 80114fc:	b183      	cbz	r3, 8011520 <RadioRx+0x58>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80114fe:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8011502:	f000 fba7 	bl	8011c54 <SUBGRF_SetRx>
}
 8011506:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit( );
 8011508:	f001 f9c1 	bl	801288e <RFW_ReceiveInit>
 801150c:	e7e9      	b.n	80114e2 <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 801150e:	4d09      	ldr	r5, [pc, #36]	; (8011534 <RadioRx+0x6c>)
 8011510:	4621      	mov	r1, r4
 8011512:	4628      	mov	r0, r5
 8011514:	f001 fe8e 	bl	8013234 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8011518:	4628      	mov	r0, r5
 801151a:	f001 fe45 	bl	80131a8 <UTIL_TIMER_Start>
 801151e:	e7e1      	b.n	80114e4 <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8011520:	4b02      	ldr	r3, [pc, #8]	; (801152c <RadioRx+0x64>)
 8011522:	6898      	ldr	r0, [r3, #8]
 8011524:	0180      	lsls	r0, r0, #6
 8011526:	f000 fb95 	bl	8011c54 <SUBGRF_SetRx>
}
 801152a:	e7ec      	b.n	8011506 <RadioRx+0x3e>
 801152c:	20001144 	.word	0x20001144
 8011530:	48000400 	.word	0x48000400
 8011534:	2000112c 	.word	0x2000112c

08011538 <RadioSleep>:
{
 8011538:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 801153a:	f04f 0004 	mov.w	r0, #4
 801153e:	f000 fe8d 	bl	801225c <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 8011542:	2002      	movs	r0, #2
 8011544:	f7f0 facc 	bl	8001ae0 <HAL_Delay>
}
 8011548:	bd08      	pop	{r3, pc}
	...

0801154c <RadioSend>:
{
 801154c:	b570      	push	{r4, r5, r6, lr}
 801154e:	b082      	sub	sp, #8
 8011550:	4605      	mov	r5, r0
 8011552:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8011554:	2300      	movs	r3, #0
 8011556:	461a      	mov	r2, r3
 8011558:	f240 2101 	movw	r1, #513	; 0x201
 801155c:	4608      	mov	r0, r1
 801155e:	f000 fc6e 	bl	8011e3e <SUBGRF_SetDioIrqParams>
 8011562:	4b3e      	ldr	r3, [pc, #248]	; (801165c <RadioSend+0x110>)
 8011564:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8011568:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801156a:	4e3d      	ldr	r6, [pc, #244]	; (8011660 <RadioSend+0x114>)
 801156c:	2101      	movs	r1, #1
 801156e:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 8011572:	f001 f89f 	bl	80126b4 <SUBGRF_SetSwitch>
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8011576:	7833      	ldrb	r3, [r6, #0]
 8011578:	2b01      	cmp	r3, #1
 801157a:	d103      	bne.n	8011584 <RadioSend+0x38>
 801157c:	f896 3051 	ldrb.w	r3, [r6, #81]	; 0x51
 8011580:	2b06      	cmp	r3, #6
 8011582:	d012      	beq.n	80115aa <RadioSend+0x5e>
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8011584:	f640 0089 	movw	r0, #2185	; 0x889
 8011588:	f000 fe0e 	bl	80121a8 <SUBGRF_ReadRegister>
 801158c:	f040 0104 	orr.w	r1, r0, #4
 8011590:	b2c9      	uxtb	r1, r1
 8011592:	f640 0089 	movw	r0, #2185	; 0x889
 8011596:	f000 fd15 	bl	8011fc4 <SUBGRF_WriteRegister>
    switch( SubgRf.Modem )
 801159a:	4b31      	ldr	r3, [pc, #196]	; (8011660 <RadioSend+0x114>)
 801159c:	781b      	ldrb	r3, [r3, #0]
 801159e:	2b03      	cmp	r3, #3
 80115a0:	d818      	bhi.n	80115d4 <RadioSend+0x88>
 80115a2:	e8df f003 	tbb	[pc, r3]
 80115a6:	0d22      	.short	0x0d22
 80115a8:	4d22      	.short	0x4d22
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 80115aa:	f640 0089 	movw	r0, #2185	; 0x889
 80115ae:	f000 fdfb 	bl	80121a8 <SUBGRF_ReadRegister>
 80115b2:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 80115b6:	f640 0089 	movw	r0, #2185	; 0x889
 80115ba:	f000 fd03 	bl	8011fc4 <SUBGRF_WriteRegister>
 80115be:	e7ec      	b.n	801159a <RadioSend+0x4e>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 80115c0:	4827      	ldr	r0, [pc, #156]	; (8011660 <RadioSend+0x114>)
 80115c2:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80115c4:	300e      	adds	r0, #14
 80115c6:	f000 ff73 	bl	80124b0 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80115ca:	2200      	movs	r2, #0
 80115cc:	4621      	mov	r1, r4
 80115ce:	4628      	mov	r0, r5
 80115d0:	f001 f83d 	bl	801264e <SUBGRF_SendPayload>
    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 80115d4:	4c23      	ldr	r4, [pc, #140]	; (8011664 <RadioSend+0x118>)
 80115d6:	4b22      	ldr	r3, [pc, #136]	; (8011660 <RadioSend+0x114>)
 80115d8:	6859      	ldr	r1, [r3, #4]
 80115da:	4620      	mov	r0, r4
 80115dc:	f001 fe2a 	bl	8013234 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80115e0:	4620      	mov	r0, r4
 80115e2:	f001 fde1 	bl	80131a8 <UTIL_TIMER_Start>
}
 80115e6:	b002      	add	sp, #8
 80115e8:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 80115ea:	f001 f948 	bl	801287e <RFW_Is_Init>
 80115ee:	2801      	cmp	r0, #1
 80115f0:	d00a      	beq.n	8011608 <RadioSend+0xbc>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 80115f2:	481b      	ldr	r0, [pc, #108]	; (8011660 <RadioSend+0x114>)
 80115f4:	7584      	strb	r4, [r0, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80115f6:	300e      	adds	r0, #14
 80115f8:	f000 ff5a 	bl	80124b0 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 80115fc:	2200      	movs	r2, #0
 80115fe:	4621      	mov	r1, r4
 8011600:	4628      	mov	r0, r5
 8011602:	f001 f824 	bl	801264e <SUBGRF_SendPayload>
 8011606:	e7e5      	b.n	80115d4 <RadioSend+0x88>
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8011608:	f10d 0207 	add.w	r2, sp, #7
 801160c:	4621      	mov	r1, r4
 801160e:	4628      	mov	r0, r5
 8011610:	f001 f93a 	bl	8012888 <RFW_TransmitInit>
 8011614:	b968      	cbnz	r0, 8011632 <RadioSend+0xe6>
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8011616:	4812      	ldr	r0, [pc, #72]	; (8011660 <RadioSend+0x114>)
 8011618:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801161c:	7583      	strb	r3, [r0, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801161e:	300e      	adds	r0, #14
 8011620:	f000 ff46 	bl	80124b0 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8011624:	2200      	movs	r2, #0
 8011626:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801162a:	4628      	mov	r0, r5
 801162c:	f001 f80f 	bl	801264e <SUBGRF_SendPayload>
 8011630:	e7d0      	b.n	80115d4 <RadioSend+0x88>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 8011632:	4b0d      	ldr	r3, [pc, #52]	; (8011668 <RadioSend+0x11c>)
 8011634:	2201      	movs	r2, #1
 8011636:	2100      	movs	r1, #0
 8011638:	2002      	movs	r0, #2
 801163a:	f001 fa07 	bl	8012a4c <UTIL_ADV_TRACE_COND_FSend>
                return;
 801163e:	e7d2      	b.n	80115e6 <RadioSend+0x9a>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8011640:	4807      	ldr	r0, [pc, #28]	; (8011660 <RadioSend+0x114>)
 8011642:	2302      	movs	r3, #2
 8011644:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8011646:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011648:	300e      	adds	r0, #14
 801164a:	f000 ff31 	bl	80124b0 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801164e:	2200      	movs	r2, #0
 8011650:	4621      	mov	r1, r4
 8011652:	4628      	mov	r0, r5
 8011654:	f000 fffb 	bl	801264e <SUBGRF_SendPayload>
            break;
 8011658:	e7bc      	b.n	80115d4 <RadioSend+0x88>
 801165a:	bf00      	nop
 801165c:	48000400 	.word	0x48000400
 8011660:	20001144 	.word	0x20001144
 8011664:	200011a0 	.word	0x200011a0
 8011668:	08014e38 	.word	0x08014e38

0801166c <RadioRandom>:
{
 801166c:	b508      	push	{r3, lr}
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801166e:	2300      	movs	r3, #0
 8011670:	461a      	mov	r2, r3
 8011672:	4619      	mov	r1, r3
 8011674:	4618      	mov	r0, r3
 8011676:	f000 fbe2 	bl	8011e3e <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 801167a:	f000 ff9b 	bl	80125b4 <SUBGRF_GetRandom>
}
 801167e:	bd08      	pop	{r3, pc}

08011680 <RadioSetModem>:
{
 8011680:	b510      	push	{r4, lr}
 8011682:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 8011684:	4b14      	ldr	r3, [pc, #80]	; (80116d8 <RadioSetModem+0x58>)
 8011686:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem( modem );
 8011688:	f001 f906 	bl	8012898 <RFW_SetRadioModem>
    switch( modem )
 801168c:	2c01      	cmp	r4, #1
 801168e:	d010      	beq.n	80116b2 <RadioSetModem+0x32>
 8011690:	2c03      	cmp	r4, #3
 8011692:	d01a      	beq.n	80116ca <RadioSetModem+0x4a>
 8011694:	b134      	cbz	r4, 80116a4 <RadioSetModem+0x24>
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8011696:	2003      	movs	r0, #3
 8011698:	f000 fce4 	bl	8012064 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 801169c:	4b0e      	ldr	r3, [pc, #56]	; (80116d8 <RadioSetModem+0x58>)
 801169e:	2200      	movs	r2, #0
 80116a0:	735a      	strb	r2, [r3, #13]
}
 80116a2:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80116a4:	2000      	movs	r0, #0
 80116a6:	f000 fcdd 	bl	8012064 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 80116aa:	4b0b      	ldr	r3, [pc, #44]	; (80116d8 <RadioSetModem+0x58>)
 80116ac:	2200      	movs	r2, #0
 80116ae:	735a      	strb	r2, [r3, #13]
        break;
 80116b0:	e7f7      	b.n	80116a2 <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 80116b2:	2001      	movs	r0, #1
 80116b4:	f000 fcd6 	bl	8012064 <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 80116b8:	4b07      	ldr	r3, [pc, #28]	; (80116d8 <RadioSetModem+0x58>)
 80116ba:	7b5a      	ldrb	r2, [r3, #13]
 80116bc:	7b18      	ldrb	r0, [r3, #12]
 80116be:	4282      	cmp	r2, r0
 80116c0:	d0ef      	beq.n	80116a2 <RadioSetModem+0x22>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 80116c2:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 80116c4:	f000 f80a 	bl	80116dc <RadioSetPublicNetwork>
 80116c8:	e7eb      	b.n	80116a2 <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80116ca:	2002      	movs	r0, #2
 80116cc:	f000 fcca 	bl	8012064 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 80116d0:	4b01      	ldr	r3, [pc, #4]	; (80116d8 <RadioSetModem+0x58>)
 80116d2:	2200      	movs	r2, #0
 80116d4:	735a      	strb	r2, [r3, #13]
}
 80116d6:	e7e4      	b.n	80116a2 <RadioSetModem+0x22>
 80116d8:	20001144 	.word	0x20001144

080116dc <RadioSetPublicNetwork>:
{
 80116dc:	b510      	push	{r4, lr}
 80116de:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 80116e0:	4b0e      	ldr	r3, [pc, #56]	; (801171c <RadioSetPublicNetwork+0x40>)
 80116e2:	7318      	strb	r0, [r3, #12]
 80116e4:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 80116e6:	2001      	movs	r0, #1
 80116e8:	f7ff ffca 	bl	8011680 <RadioSetModem>
    if( enable == true )
 80116ec:	b154      	cbz	r4, 8011704 <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 80116ee:	2134      	movs	r1, #52	; 0x34
 80116f0:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80116f4:	f000 fc66 	bl	8011fc4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 80116f8:	2144      	movs	r1, #68	; 0x44
 80116fa:	f240 7041 	movw	r0, #1857	; 0x741
 80116fe:	f000 fc61 	bl	8011fc4 <SUBGRF_WriteRegister>
}
 8011702:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8011704:	2114      	movs	r1, #20
 8011706:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801170a:	f000 fc5b 	bl	8011fc4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 801170e:	2124      	movs	r1, #36	; 0x24
 8011710:	f240 7041 	movw	r0, #1857	; 0x741
 8011714:	f000 fc56 	bl	8011fc4 <SUBGRF_WriteRegister>
}
 8011718:	e7f3      	b.n	8011702 <RadioSetPublicNetwork+0x26>
 801171a:	bf00      	nop
 801171c:	20001144 	.word	0x20001144

08011720 <RadioSetTxConfig>:
{
 8011720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011724:	b083      	sub	sp, #12
 8011726:	4604      	mov	r4, r0
 8011728:	460e      	mov	r6, r1
 801172a:	4617      	mov	r7, r2
 801172c:	461d      	mov	r5, r3
 801172e:	f8bd 8038 	ldrh.w	r8, [sp, #56]	; 0x38
 8011732:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
 8011736:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 801173a:	f001 f89f 	bl	801287c <RFW_DeInit>
    switch( modem )
 801173e:	b174      	cbz	r4, 801175e <RadioSetTxConfig+0x3e>
 8011740:	2c01      	cmp	r4, #1
 8011742:	d053      	beq.n	80117ec <RadioSetTxConfig+0xcc>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8011744:	4630      	mov	r0, r6
 8011746:	f000 ffc9 	bl	80126dc <SUBGRF_SetRfTxPower>
 801174a:	4c51      	ldr	r4, [pc, #324]	; (8011890 <RadioSetTxConfig+0x170>)
 801174c:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 8011750:	f001 f899 	bl	8012886 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8011754:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011756:	6063      	str	r3, [r4, #4]
}
 8011758:	b003      	add	sp, #12
 801175a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801175e:	4c4c      	ldr	r4, [pc, #304]	; (8011890 <RadioSetTxConfig+0x170>)
 8011760:	f04f 0b00 	mov.w	fp, #0
 8011764:	f884 b038 	strb.w	fp, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8011768:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801176a:	63e3      	str	r3, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801176c:	230b      	movs	r3, #11
 801176e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8011772:	4628      	mov	r0, r5
 8011774:	f001 f820 	bl	80127b8 <SUBGRF_GetFskBandwidthRegValue>
 8011778:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 801177c:	6427      	str	r7, [r4, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801177e:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8011782:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8011786:	f8a4 8010 	strh.w	r8, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801178a:	2304      	movs	r3, #4
 801178c:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 801178e:	2318      	movs	r3, #24
 8011790:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8011792:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8011796:	f089 0901 	eor.w	r9, r9, #1
 801179a:	f884 9015 	strb.w	r9, [r4, #21]
            if( crcOn == true )
 801179e:	f1ba 0f00 	cmp.w	sl, #0
 80117a2:	d01f      	beq.n	80117e4 <RadioSetTxConfig+0xc4>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80117a4:	22f2      	movs	r2, #242	; 0xf2
 80117a6:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80117a8:	4c39      	ldr	r4, [pc, #228]	; (8011890 <RadioSetTxConfig+0x170>)
 80117aa:	2301      	movs	r3, #1
 80117ac:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 80117ae:	f7ff fc43 	bl	8011038 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 80117b2:	2000      	movs	r0, #0
 80117b4:	f7ff ff64 	bl	8011680 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80117b8:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80117bc:	f000 fc6c 	bl	8012098 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80117c0:	f104 000e 	add.w	r0, r4, #14
 80117c4:	f000 fe74 	bl	80124b0 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80117c8:	4a32      	ldr	r2, [pc, #200]	; (8011894 <RadioSetTxConfig+0x174>)
 80117ca:	466b      	mov	r3, sp
 80117cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80117d0:	e883 0003 	stmia.w	r3, {r0, r1}
 80117d4:	4618      	mov	r0, r3
 80117d6:	f000 fe39 	bl	801244c <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80117da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80117de:	f000 fd5d 	bl	801229c <SUBGRF_SetWhiteningSeed>
            break;
 80117e2:	e7af      	b.n	8011744 <RadioSetTxConfig+0x24>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80117e4:	4b2a      	ldr	r3, [pc, #168]	; (8011890 <RadioSetTxConfig+0x170>)
 80117e6:	2201      	movs	r2, #1
 80117e8:	75da      	strb	r2, [r3, #23]
 80117ea:	e7dd      	b.n	80117a8 <RadioSetTxConfig+0x88>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80117ec:	4a28      	ldr	r2, [pc, #160]	; (8011890 <RadioSetTxConfig+0x170>)
 80117ee:	2301      	movs	r3, #1
 80117f0:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80117f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80117f6:	b2db      	uxtb	r3, r3
 80117f8:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80117fc:	4926      	ldr	r1, [pc, #152]	; (8011898 <RadioSetTxConfig+0x178>)
 80117fe:	5d49      	ldrb	r1, [r1, r5]
 8011800:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8011804:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 8011808:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801180c:	b91d      	cbnz	r5, 8011816 <RadioSetTxConfig+0xf6>
 801180e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011810:	3a0b      	subs	r2, #11
 8011812:	2a01      	cmp	r2, #1
 8011814:	d92c      	bls.n	8011870 <RadioSetTxConfig+0x150>
 8011816:	2d01      	cmp	r5, #1
 8011818:	d027      	beq.n	801186a <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801181a:	4a1d      	ldr	r2, [pc, #116]	; (8011890 <RadioSetTxConfig+0x170>)
 801181c:	2100      	movs	r1, #0
 801181e:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8011822:	4a1b      	ldr	r2, [pc, #108]	; (8011890 <RadioSetTxConfig+0x170>)
 8011824:	2101      	movs	r1, #1
 8011826:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8011828:	3b05      	subs	r3, #5
 801182a:	b2db      	uxtb	r3, r3
 801182c:	428b      	cmp	r3, r1
 801182e:	d924      	bls.n	801187a <RadioSetTxConfig+0x15a>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8011830:	4b17      	ldr	r3, [pc, #92]	; (8011890 <RadioSetTxConfig+0x170>)
 8011832:	f8a3 801c 	strh.w	r8, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8011836:	4c16      	ldr	r4, [pc, #88]	; (8011890 <RadioSetTxConfig+0x170>)
 8011838:	f884 901e 	strb.w	r9, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801183c:	4b17      	ldr	r3, [pc, #92]	; (801189c <RadioSetTxConfig+0x17c>)
 801183e:	781b      	ldrb	r3, [r3, #0]
 8011840:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8011842:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8011846:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801184a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 801184e:	f7ff fbf3 	bl	8011038 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8011852:	2001      	movs	r0, #1
 8011854:	f7ff ff14 	bl	8011680 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8011858:	f104 0038 	add.w	r0, r4, #56	; 0x38
 801185c:	f000 fc1c 	bl	8012098 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011860:	f104 000e 	add.w	r0, r4, #14
 8011864:	f000 fe24 	bl	80124b0 <SUBGRF_SetPacketParams>
            break;
 8011868:	e76c      	b.n	8011744 <RadioSetTxConfig+0x24>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801186a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801186c:	2a0c      	cmp	r2, #12
 801186e:	d1d4      	bne.n	801181a <RadioSetTxConfig+0xfa>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8011870:	4a07      	ldr	r2, [pc, #28]	; (8011890 <RadioSetTxConfig+0x170>)
 8011872:	2101      	movs	r1, #1
 8011874:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 8011878:	e7d3      	b.n	8011822 <RadioSetTxConfig+0x102>
                if( preambleLen < 12 )
 801187a:	f1b8 0f0b 	cmp.w	r8, #11
 801187e:	d803      	bhi.n	8011888 <RadioSetTxConfig+0x168>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8011880:	4613      	mov	r3, r2
 8011882:	220c      	movs	r2, #12
 8011884:	839a      	strh	r2, [r3, #28]
 8011886:	e7d6      	b.n	8011836 <RadioSetTxConfig+0x116>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8011888:	4b01      	ldr	r3, [pc, #4]	; (8011890 <RadioSetTxConfig+0x170>)
 801188a:	f8a3 801c 	strh.w	r8, [r3, #28]
 801188e:	e7d2      	b.n	8011836 <RadioSetTxConfig+0x116>
 8011890:	20001144 	.word	0x20001144
 8011894:	0801411c 	.word	0x0801411c
 8011898:	08014e50 	.word	0x08014e50
 801189c:	2000010c 	.word	0x2000010c

080118a0 <RadioSetRxConfig>:
{
 80118a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118a4:	b085      	sub	sp, #20
 80118a6:	4604      	mov	r4, r0
 80118a8:	460d      	mov	r5, r1
 80118aa:	4616      	mov	r6, r2
 80118ac:	9301      	str	r3, [sp, #4]
 80118ae:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
 80118b2:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 80118b6:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 80118ba:	f89d b04c 	ldrb.w	fp, [sp, #76]	; 0x4c
 80118be:	f89d 805c 	ldrb.w	r8, [sp, #92]	; 0x5c
    SubgRf.RxContinuous = rxContinuous;
 80118c2:	4b6e      	ldr	r3, [pc, #440]	; (8011a7c <RadioSetRxConfig+0x1dc>)
 80118c4:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 80118c8:	f000 ffd8 	bl	801287c <RFW_DeInit>
    if( rxContinuous == true )
 80118cc:	f1b8 0f00 	cmp.w	r8, #0
 80118d0:	d001      	beq.n	80118d6 <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 80118d2:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 80118d6:	b14f      	cbz	r7, 80118ec <RadioSetRxConfig+0x4c>
        MaxPayloadLength = payloadLen;
 80118d8:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 80118dc:	4b68      	ldr	r3, [pc, #416]	; (8011a80 <RadioSetRxConfig+0x1e0>)
 80118de:	701a      	strb	r2, [r3, #0]
    switch( modem )
 80118e0:	b144      	cbz	r4, 80118f4 <RadioSetRxConfig+0x54>
 80118e2:	2c01      	cmp	r4, #1
 80118e4:	d057      	beq.n	8011996 <RadioSetRxConfig+0xf6>
}
 80118e6:	b005      	add	sp, #20
 80118e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MaxPayloadLength = 0xFF;
 80118ec:	4b64      	ldr	r3, [pc, #400]	; (8011a80 <RadioSetRxConfig+0x1e0>)
 80118ee:	22ff      	movs	r2, #255	; 0xff
 80118f0:	701a      	strb	r2, [r3, #0]
 80118f2:	e7f5      	b.n	80118e0 <RadioSetRxConfig+0x40>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80118f4:	2000      	movs	r0, #0
 80118f6:	f000 fa05 	bl	8011d04 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80118fa:	4c60      	ldr	r4, [pc, #384]	; (8011a7c <RadioSetRxConfig+0x1dc>)
 80118fc:	f04f 0800 	mov.w	r8, #0
 8011900:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8011904:	63e6      	str	r6, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8011906:	230b      	movs	r3, #11
 8011908:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801190c:	4628      	mov	r0, r5
 801190e:	f000 ff53 	bl	80127b8 <SUBGRF_GetFskBandwidthRegValue>
 8011912:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8011916:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801191a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801191e:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8011922:	2304      	movs	r3, #4
 8011924:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8011926:	2318      	movs	r3, #24
 8011928:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801192a:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801192e:	f087 0701 	eor.w	r7, r7, #1
 8011932:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8011934:	4b52      	ldr	r3, [pc, #328]	; (8011a80 <RadioSetRxConfig+0x1e0>)
 8011936:	781b      	ldrb	r3, [r3, #0]
 8011938:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 801193a:	f1bb 0f00 	cmp.w	fp, #0
 801193e:	d026      	beq.n	801198e <RadioSetRxConfig+0xee>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8011940:	22f2      	movs	r2, #242	; 0xf2
 8011942:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8011944:	4c4d      	ldr	r4, [pc, #308]	; (8011a7c <RadioSetRxConfig+0x1dc>)
 8011946:	2301      	movs	r3, #1
 8011948:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 801194a:	f7ff fb75 	bl	8011038 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 801194e:	2000      	movs	r0, #0
 8011950:	f7ff fe96 	bl	8011680 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8011954:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8011958:	f000 fb9e 	bl	8012098 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801195c:	f104 000e 	add.w	r0, r4, #14
 8011960:	f000 fda6 	bl	80124b0 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8011964:	4a47      	ldr	r2, [pc, #284]	; (8011a84 <RadioSetRxConfig+0x1e4>)
 8011966:	ab02      	add	r3, sp, #8
 8011968:	e892 0003 	ldmia.w	r2, {r0, r1}
 801196c:	e883 0003 	stmia.w	r3, {r0, r1}
 8011970:	4618      	mov	r0, r3
 8011972:	f000 fd6b 	bl	801244c <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8011976:	f240 10ff 	movw	r0, #511	; 0x1ff
 801197a:	f000 fc8f 	bl	801229c <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801197e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8011982:	fb02 fa0a 	mul.w	sl, r2, sl
 8011986:	fbba f6f6 	udiv	r6, sl, r6
 801198a:	60a6      	str	r6, [r4, #8]
            break;
 801198c:	e7ab      	b.n	80118e6 <RadioSetRxConfig+0x46>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801198e:	4b3b      	ldr	r3, [pc, #236]	; (8011a7c <RadioSetRxConfig+0x1dc>)
 8011990:	2201      	movs	r2, #1
 8011992:	75da      	strb	r2, [r3, #23]
 8011994:	e7d6      	b.n	8011944 <RadioSetRxConfig+0xa4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8011996:	2000      	movs	r0, #0
 8011998:	f000 f9b4 	bl	8011d04 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801199c:	4a37      	ldr	r2, [pc, #220]	; (8011a7c <RadioSetRxConfig+0x1dc>)
 801199e:	2301      	movs	r3, #1
 80119a0:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 80119a4:	b2f3      	uxtb	r3, r6
 80119a6:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 80119aa:	4937      	ldr	r1, [pc, #220]	; (8011a88 <RadioSetRxConfig+0x1e8>)
 80119ac:	5d49      	ldrb	r1, [r1, r5]
 80119ae:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 80119b2:	9901      	ldr	r1, [sp, #4]
 80119b4:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80119b8:	b91d      	cbnz	r5, 80119c2 <RadioSetRxConfig+0x122>
 80119ba:	f1a6 020b 	sub.w	r2, r6, #11
 80119be:	2a01      	cmp	r2, #1
 80119c0:	d941      	bls.n	8011a46 <RadioSetRxConfig+0x1a6>
 80119c2:	2d01      	cmp	r5, #1
 80119c4:	d03d      	beq.n	8011a42 <RadioSetRxConfig+0x1a2>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80119c6:	4a2d      	ldr	r2, [pc, #180]	; (8011a7c <RadioSetRxConfig+0x1dc>)
 80119c8:	2100      	movs	r1, #0
 80119ca:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80119ce:	4a2b      	ldr	r2, [pc, #172]	; (8011a7c <RadioSetRxConfig+0x1dc>)
 80119d0:	2101      	movs	r1, #1
 80119d2:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80119d4:	3b05      	subs	r3, #5
 80119d6:	b2db      	uxtb	r3, r3
 80119d8:	428b      	cmp	r3, r1
 80119da:	d939      	bls.n	8011a50 <RadioSetRxConfig+0x1b0>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80119dc:	4b27      	ldr	r3, [pc, #156]	; (8011a7c <RadioSetRxConfig+0x1dc>)
 80119de:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80119e2:	4c26      	ldr	r4, [pc, #152]	; (8011a7c <RadioSetRxConfig+0x1dc>)
 80119e4:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80119e6:	4b26      	ldr	r3, [pc, #152]	; (8011a80 <RadioSetRxConfig+0x1e0>)
 80119e8:	781b      	ldrb	r3, [r3, #0]
 80119ea:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80119ec:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80119f0:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80119f4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 80119f8:	f7ff fb1e 	bl	8011038 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80119fc:	2001      	movs	r0, #1
 80119fe:	f7ff fe3f 	bl	8011680 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8011a02:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8011a06:	f000 fb47 	bl	8012098 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011a0a:	f104 000e 	add.w	r0, r4, #14
 8011a0e:	f000 fd4f 	bl	80124b0 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8011a12:	fa5f f08a 	uxtb.w	r0, sl
 8011a16:	f000 fb03 	bl	8012020 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8011a1a:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8011a1e:	2b01      	cmp	r3, #1
 8011a20:	d021      	beq.n	8011a66 <RadioSetRxConfig+0x1c6>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8011a22:	f240 7036 	movw	r0, #1846	; 0x736
 8011a26:	f000 fbbf 	bl	80121a8 <SUBGRF_ReadRegister>
 8011a2a:	f040 0104 	orr.w	r1, r0, #4
 8011a2e:	b2c9      	uxtb	r1, r1
 8011a30:	f240 7036 	movw	r0, #1846	; 0x736
 8011a34:	f000 fac6 	bl	8011fc4 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8011a38:	4b10      	ldr	r3, [pc, #64]	; (8011a7c <RadioSetRxConfig+0x1dc>)
 8011a3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011a3e:	609a      	str	r2, [r3, #8]
}
 8011a40:	e751      	b.n	80118e6 <RadioSetRxConfig+0x46>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8011a42:	2e0c      	cmp	r6, #12
 8011a44:	d1bf      	bne.n	80119c6 <RadioSetRxConfig+0x126>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8011a46:	4a0d      	ldr	r2, [pc, #52]	; (8011a7c <RadioSetRxConfig+0x1dc>)
 8011a48:	2101      	movs	r1, #1
 8011a4a:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 8011a4e:	e7be      	b.n	80119ce <RadioSetRxConfig+0x12e>
                if( preambleLen < 12 )
 8011a50:	f1b9 0f0b 	cmp.w	r9, #11
 8011a54:	d803      	bhi.n	8011a5e <RadioSetRxConfig+0x1be>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8011a56:	4613      	mov	r3, r2
 8011a58:	220c      	movs	r2, #12
 8011a5a:	839a      	strh	r2, [r3, #28]
 8011a5c:	e7c1      	b.n	80119e2 <RadioSetRxConfig+0x142>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8011a5e:	4b07      	ldr	r3, [pc, #28]	; (8011a7c <RadioSetRxConfig+0x1dc>)
 8011a60:	f8a3 901c 	strh.w	r9, [r3, #28]
 8011a64:	e7bd      	b.n	80119e2 <RadioSetRxConfig+0x142>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8011a66:	f240 7036 	movw	r0, #1846	; 0x736
 8011a6a:	f000 fb9d 	bl	80121a8 <SUBGRF_ReadRegister>
 8011a6e:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8011a72:	f240 7036 	movw	r0, #1846	; 0x736
 8011a76:	f000 faa5 	bl	8011fc4 <SUBGRF_WriteRegister>
 8011a7a:	e7dd      	b.n	8011a38 <RadioSetRxConfig+0x198>
 8011a7c:	20001144 	.word	0x20001144
 8011a80:	2000010c 	.word	0x2000010c
 8011a84:	0801411c 	.word	0x0801411c
 8011a88:	08014e50 	.word	0x08014e50

08011a8c <RadioIsChannelFree>:
{
 8011a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a8e:	b08b      	sub	sp, #44	; 0x2c
 8011a90:	4604      	mov	r4, r0
 8011a92:	460f      	mov	r7, r1
 8011a94:	4616      	mov	r6, r2
 8011a96:	461d      	mov	r5, r3
    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8011a98:	f7ff face 	bl	8011038 <RadioStandby>
    RadioSetModem( MODEM_FSK );
 8011a9c:	2000      	movs	r0, #0
 8011a9e:	f7ff fdef 	bl	8011680 <RadioSetModem>
    RadioSetChannel( freq );
 8011aa2:	4620      	mov	r0, r4
 8011aa4:	f7ff fcf8 	bl	8011498 <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8011aa8:	2301      	movs	r3, #1
 8011aaa:	9309      	str	r3, [sp, #36]	; 0x24
 8011aac:	2400      	movs	r4, #0
 8011aae:	9408      	str	r4, [sp, #32]
 8011ab0:	9407      	str	r4, [sp, #28]
 8011ab2:	9406      	str	r4, [sp, #24]
 8011ab4:	9405      	str	r4, [sp, #20]
 8011ab6:	9404      	str	r4, [sp, #16]
 8011ab8:	9403      	str	r4, [sp, #12]
 8011aba:	9402      	str	r4, [sp, #8]
 8011abc:	2303      	movs	r3, #3
 8011abe:	9301      	str	r3, [sp, #4]
 8011ac0:	9700      	str	r7, [sp, #0]
 8011ac2:	4623      	mov	r3, r4
 8011ac4:	f44f 7216 	mov.w	r2, #600	; 0x258
 8011ac8:	4639      	mov	r1, r7
 8011aca:	4620      	mov	r0, r4
 8011acc:	f7ff fee8 	bl	80118a0 <RadioSetRxConfig>
    RadioRx( 0 );
 8011ad0:	4620      	mov	r0, r4
 8011ad2:	f7ff fcf9 	bl	80114c8 <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8011ad6:	f7ff fc93 	bl	8011400 <RadioGetWakeupTime>
 8011ada:	f7f0 f801 	bl	8001ae0 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 8011ade:	f001 fac9 	bl	8013074 <UTIL_TIMER_GetCurrentTime>
 8011ae2:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8011ae4:	4620      	mov	r0, r4
 8011ae6:	f001 facf 	bl	8013088 <UTIL_TIMER_GetElapsedTime>
 8011aea:	42a8      	cmp	r0, r5
 8011aec:	d206      	bcs.n	8011afc <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 8011aee:	2000      	movs	r0, #0
 8011af0:	f7ff fcb0 	bl	8011454 <RadioRssi>
        if( rssi > rssiThresh )
 8011af4:	42b0      	cmp	r0, r6
 8011af6:	ddf5      	ble.n	8011ae4 <RadioIsChannelFree+0x58>
            status = false;
 8011af8:	2400      	movs	r4, #0
 8011afa:	e000      	b.n	8011afe <RadioIsChannelFree+0x72>
    bool status = true;
 8011afc:	2401      	movs	r4, #1
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8011afe:	f7ff fa9b 	bl	8011038 <RadioStandby>
}
 8011b02:	4620      	mov	r0, r4
 8011b04:	b00b      	add	sp, #44	; 0x2c
 8011b06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011b08 <RadioInit>:
{
 8011b08:	b570      	push	{r4, r5, r6, lr}
 8011b0a:	b082      	sub	sp, #8
    RadioEvents = events;
 8011b0c:	4b1d      	ldr	r3, [pc, #116]	; (8011b84 <RadioInit+0x7c>)
 8011b0e:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 8011b10:	4d1d      	ldr	r5, [pc, #116]	; (8011b88 <RadioInit+0x80>)
 8011b12:	2400      	movs	r4, #0
 8011b14:	706c      	strb	r4, [r5, #1]
    SubgRf.TxTimeout = 0;
 8011b16:	606c      	str	r4, [r5, #4]
    SubgRf.RxTimeout = 0;
 8011b18:	60ac      	str	r4, [r5, #8]
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8011b1a:	65ac      	str	r4, [r5, #88]	; 0x58
    SUBGRF_Init( RadioOnDioIrq );
 8011b1c:	481b      	ldr	r0, [pc, #108]	; (8011b8c <RadioInit+0x84>)
 8011b1e:	f000 fb67 	bl	80121f0 <SUBGRF_Init>
    SubgRf.PublicNetwork.Current = false;
 8011b22:	736c      	strb	r4, [r5, #13]
    SubgRf.PublicNetwork.Previous = false;
 8011b24:	732c      	strb	r4, [r5, #12]
    SUBGRF_SetRegulatorMode( );
 8011b26:	f000 f8fa 	bl	8011d1e <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8011b2a:	4621      	mov	r1, r4
 8011b2c:	4620      	mov	r0, r4
 8011b2e:	f000 f9f1 	bl	8011f14 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8011b32:	2204      	movs	r2, #4
 8011b34:	4621      	mov	r1, r4
 8011b36:	2001      	movs	r0, #1
 8011b38:	f000 fbc9 	bl	80122ce <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8011b3c:	4623      	mov	r3, r4
 8011b3e:	4622      	mov	r2, r4
 8011b40:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011b44:	4608      	mov	r0, r1
 8011b46:	f000 f97a 	bl	8011e3e <SUBGRF_SetDioIrqParams>
    RadioSleep();
 8011b4a:	f7ff fcf5 	bl	8011538 <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8011b4e:	4e10      	ldr	r6, [pc, #64]	; (8011b90 <RadioInit+0x88>)
 8011b50:	9400      	str	r4, [sp, #0]
 8011b52:	4b10      	ldr	r3, [pc, #64]	; (8011b94 <RadioInit+0x8c>)
 8011b54:	4622      	mov	r2, r4
 8011b56:	f04f 31ff 	mov.w	r1, #4294967295
 8011b5a:	4630      	mov	r0, r6
 8011b5c:	f001 fa6c 	bl	8013038 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8011b60:	4d0d      	ldr	r5, [pc, #52]	; (8011b98 <RadioInit+0x90>)
 8011b62:	9400      	str	r4, [sp, #0]
 8011b64:	4b0d      	ldr	r3, [pc, #52]	; (8011b9c <RadioInit+0x94>)
 8011b66:	4622      	mov	r2, r4
 8011b68:	f04f 31ff 	mov.w	r1, #4294967295
 8011b6c:	4628      	mov	r0, r5
 8011b6e:	f001 fa63 	bl	8013038 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8011b72:	4630      	mov	r0, r6
 8011b74:	f001 fabe 	bl	80130f4 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8011b78:	4628      	mov	r0, r5
 8011b7a:	f001 fabb 	bl	80130f4 <UTIL_TIMER_Stop>
}
 8011b7e:	b002      	add	sp, #8
 8011b80:	bd70      	pop	{r4, r5, r6, pc}
 8011b82:	bf00      	nop
 8011b84:	20001128 	.word	0x20001128
 8011b88:	20001144 	.word	0x20001144
 8011b8c:	080113ed 	.word	0x080113ed
 8011b90:	200011a0 	.word	0x200011a0
 8011b94:	08010f45 	.word	0x08010f45
 8011b98:	2000112c 	.word	0x2000112c
 8011b9c:	08010f6d 	.word	0x08010f6d

08011ba0 <SUBGRF_WriteCommand>:
    CRITICAL_SECTION_END();
}

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8011ba0:	b510      	push	{r4, lr}
 8011ba2:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011ba4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011ba8:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8011baa:	460a      	mov	r2, r1
 8011bac:	4601      	mov	r1, r0
 8011bae:	4803      	ldr	r0, [pc, #12]	; (8011bbc <SUBGRF_WriteCommand+0x1c>)
 8011bb0:	f7f5 faa8 	bl	8007104 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011bb4:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 8011bb8:	bd10      	pop	{r4, pc}
 8011bba:	bf00      	nop
 8011bbc:	20000284 	.word	0x20000284

08011bc0 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8011bc0:	b510      	push	{r4, lr}
 8011bc2:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011bc4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011bc8:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8011bca:	460a      	mov	r2, r1
 8011bcc:	4601      	mov	r1, r0
 8011bce:	4803      	ldr	r0, [pc, #12]	; (8011bdc <SUBGRF_ReadCommand+0x1c>)
 8011bd0:	f7f5 faee 	bl	80071b0 <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011bd4:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 8011bd8:	bd10      	pop	{r4, pc}
 8011bda:	bf00      	nop
 8011bdc:	20000284 	.word	0x20000284

08011be0 <SUBGRF_GetOperatingMode>:
}
 8011be0:	4b01      	ldr	r3, [pc, #4]	; (8011be8 <SUBGRF_GetOperatingMode+0x8>)
 8011be2:	7818      	ldrb	r0, [r3, #0]
 8011be4:	4770      	bx	lr
 8011be6:	bf00      	nop
 8011be8:	200011be 	.word	0x200011be

08011bec <SUBGRF_SetStandby>:
{
 8011bec:	b500      	push	{lr}
 8011bee:	b083      	sub	sp, #12
 8011bf0:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8011bf4:	2201      	movs	r2, #1
 8011bf6:	f10d 0107 	add.w	r1, sp, #7
 8011bfa:	2080      	movs	r0, #128	; 0x80
 8011bfc:	f7ff ffd0 	bl	8011ba0 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8011c00:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011c04:	b92b      	cbnz	r3, 8011c12 <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 8011c06:	4b05      	ldr	r3, [pc, #20]	; (8011c1c <SUBGRF_SetStandby+0x30>)
 8011c08:	2201      	movs	r2, #1
 8011c0a:	701a      	strb	r2, [r3, #0]
}
 8011c0c:	b003      	add	sp, #12
 8011c0e:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 8011c12:	4b02      	ldr	r3, [pc, #8]	; (8011c1c <SUBGRF_SetStandby+0x30>)
 8011c14:	2202      	movs	r2, #2
 8011c16:	701a      	strb	r2, [r3, #0]
}
 8011c18:	e7f8      	b.n	8011c0c <SUBGRF_SetStandby+0x20>
 8011c1a:	bf00      	nop
 8011c1c:	200011be 	.word	0x200011be

08011c20 <SUBGRF_SetTx>:
{
 8011c20:	b500      	push	{lr}
 8011c22:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 8011c24:	4b0a      	ldr	r3, [pc, #40]	; (8011c50 <SUBGRF_SetTx+0x30>)
 8011c26:	2204      	movs	r2, #4
 8011c28:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8011c2a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8011c2e:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8011c32:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8011c36:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8011c3a:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8011c3e:	2203      	movs	r2, #3
 8011c40:	a901      	add	r1, sp, #4
 8011c42:	2083      	movs	r0, #131	; 0x83
 8011c44:	f7ff ffac 	bl	8011ba0 <SUBGRF_WriteCommand>
}
 8011c48:	b003      	add	sp, #12
 8011c4a:	f85d fb04 	ldr.w	pc, [sp], #4
 8011c4e:	bf00      	nop
 8011c50:	200011be 	.word	0x200011be

08011c54 <SUBGRF_SetRx>:
{
 8011c54:	b500      	push	{lr}
 8011c56:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 8011c58:	4b0a      	ldr	r3, [pc, #40]	; (8011c84 <SUBGRF_SetRx+0x30>)
 8011c5a:	2205      	movs	r2, #5
 8011c5c:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8011c5e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8011c62:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8011c66:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8011c6a:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8011c6e:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8011c72:	2203      	movs	r2, #3
 8011c74:	a901      	add	r1, sp, #4
 8011c76:	2082      	movs	r0, #130	; 0x82
 8011c78:	f7ff ff92 	bl	8011ba0 <SUBGRF_WriteCommand>
}
 8011c7c:	b003      	add	sp, #12
 8011c7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011c82:	bf00      	nop
 8011c84:	200011be 	.word	0x200011be

08011c88 <SUBGRF_SetRxDutyCycle>:
{
 8011c88:	b500      	push	{lr}
 8011c8a:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8011c8c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8011c90:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8011c94:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8011c98:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8011c9c:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8011ca0:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8011ca4:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8011ca8:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8011cac:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8011cb0:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8011cb4:	2206      	movs	r2, #6
 8011cb6:	4669      	mov	r1, sp
 8011cb8:	2094      	movs	r0, #148	; 0x94
 8011cba:	f7ff ff71 	bl	8011ba0 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8011cbe:	4b03      	ldr	r3, [pc, #12]	; (8011ccc <SUBGRF_SetRxDutyCycle+0x44>)
 8011cc0:	2206      	movs	r2, #6
 8011cc2:	701a      	strb	r2, [r3, #0]
}
 8011cc4:	b003      	add	sp, #12
 8011cc6:	f85d fb04 	ldr.w	pc, [sp], #4
 8011cca:	bf00      	nop
 8011ccc:	200011be 	.word	0x200011be

08011cd0 <SUBGRF_SetCad>:
{
 8011cd0:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8011cd2:	2200      	movs	r2, #0
 8011cd4:	4611      	mov	r1, r2
 8011cd6:	20c5      	movs	r0, #197	; 0xc5
 8011cd8:	f7ff ff62 	bl	8011ba0 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8011cdc:	4b01      	ldr	r3, [pc, #4]	; (8011ce4 <SUBGRF_SetCad+0x14>)
 8011cde:	2207      	movs	r2, #7
 8011ce0:	701a      	strb	r2, [r3, #0]
}
 8011ce2:	bd08      	pop	{r3, pc}
 8011ce4:	200011be 	.word	0x200011be

08011ce8 <SUBGRF_SetTxContinuousWave>:
{
 8011ce8:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8011cea:	2200      	movs	r2, #0
 8011cec:	4611      	mov	r1, r2
 8011cee:	20d1      	movs	r0, #209	; 0xd1
 8011cf0:	f7ff ff56 	bl	8011ba0 <SUBGRF_WriteCommand>
}
 8011cf4:	bd08      	pop	{r3, pc}

08011cf6 <SUBGRF_SetTxInfinitePreamble>:
{
 8011cf6:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8011cf8:	2200      	movs	r2, #0
 8011cfa:	4611      	mov	r1, r2
 8011cfc:	20d2      	movs	r0, #210	; 0xd2
 8011cfe:	f7ff ff4f 	bl	8011ba0 <SUBGRF_WriteCommand>
}
 8011d02:	bd08      	pop	{r3, pc}

08011d04 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 8011d04:	b500      	push	{lr}
 8011d06:	b083      	sub	sp, #12
 8011d08:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8011d0c:	2201      	movs	r2, #1
 8011d0e:	f10d 0107 	add.w	r1, sp, #7
 8011d12:	209f      	movs	r0, #159	; 0x9f
 8011d14:	f7ff ff44 	bl	8011ba0 <SUBGRF_WriteCommand>
}
 8011d18:	b003      	add	sp, #12
 8011d1a:	f85d fb04 	ldr.w	pc, [sp], #4

08011d1e <SUBGRF_SetRegulatorMode>:
{
 8011d1e:	b500      	push	{lr}
 8011d20:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8011d22:	f7f1 f813 	bl	8002d4c <RBI_IsDCDC>
 8011d26:	2801      	cmp	r0, #1
 8011d28:	d00b      	beq.n	8011d42 <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 8011d2a:	2300      	movs	r3, #0
 8011d2c:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8011d30:	2201      	movs	r2, #1
 8011d32:	f10d 0107 	add.w	r1, sp, #7
 8011d36:	2096      	movs	r0, #150	; 0x96
 8011d38:	f7ff ff32 	bl	8011ba0 <SUBGRF_WriteCommand>
}
 8011d3c:	b003      	add	sp, #12
 8011d3e:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 8011d42:	2301      	movs	r3, #1
 8011d44:	f88d 3007 	strb.w	r3, [sp, #7]
 8011d48:	e7f2      	b.n	8011d30 <SUBGRF_SetRegulatorMode+0x12>

08011d4a <SUBGRF_Calibrate>:
{
 8011d4a:	b500      	push	{lr}
 8011d4c:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8011d4e:	f000 0340 	and.w	r3, r0, #64	; 0x40
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8011d52:	f000 0220 	and.w	r2, r0, #32
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8011d56:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8011d58:	f000 0210 	and.w	r2, r0, #16
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8011d5c:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8011d5e:	f000 0208 	and.w	r2, r0, #8
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8011d62:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8011d64:	f000 0204 	and.w	r2, r0, #4
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8011d68:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8011d6a:	f000 0202 	and.w	r2, r0, #2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8011d6e:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8011d70:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8011d74:	4318      	orrs	r0, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8011d76:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8011d7a:	2201      	movs	r2, #1
 8011d7c:	f10d 0107 	add.w	r1, sp, #7
 8011d80:	2089      	movs	r0, #137	; 0x89
 8011d82:	f7ff ff0d 	bl	8011ba0 <SUBGRF_WriteCommand>
}
 8011d86:	b003      	add	sp, #12
 8011d88:	f85d fb04 	ldr.w	pc, [sp], #4

08011d8c <SUBGRF_CalibrateImage>:
{
 8011d8c:	b500      	push	{lr}
 8011d8e:	b083      	sub	sp, #12
    if( freq > 900000000 )
 8011d90:	4b1c      	ldr	r3, [pc, #112]	; (8011e04 <SUBGRF_CalibrateImage+0x78>)
 8011d92:	4298      	cmp	r0, r3
 8011d94:	d90d      	bls.n	8011db2 <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 8011d96:	23e1      	movs	r3, #225	; 0xe1
 8011d98:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 8011d9c:	23e9      	movs	r3, #233	; 0xe9
 8011d9e:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8011da2:	2202      	movs	r2, #2
 8011da4:	a901      	add	r1, sp, #4
 8011da6:	2098      	movs	r0, #152	; 0x98
 8011da8:	f7ff fefa 	bl	8011ba0 <SUBGRF_WriteCommand>
}
 8011dac:	b003      	add	sp, #12
 8011dae:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 8011db2:	4b15      	ldr	r3, [pc, #84]	; (8011e08 <SUBGRF_CalibrateImage+0x7c>)
 8011db4:	4298      	cmp	r0, r3
 8011db6:	d906      	bls.n	8011dc6 <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 8011db8:	23d7      	movs	r3, #215	; 0xd7
 8011dba:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 8011dbe:	23db      	movs	r3, #219	; 0xdb
 8011dc0:	f88d 3005 	strb.w	r3, [sp, #5]
 8011dc4:	e7ed      	b.n	8011da2 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 8011dc6:	4b11      	ldr	r3, [pc, #68]	; (8011e0c <SUBGRF_CalibrateImage+0x80>)
 8011dc8:	4298      	cmp	r0, r3
 8011dca:	d906      	bls.n	8011dda <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 8011dcc:	23c1      	movs	r3, #193	; 0xc1
 8011dce:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 8011dd2:	23c5      	movs	r3, #197	; 0xc5
 8011dd4:	f88d 3005 	strb.w	r3, [sp, #5]
 8011dd8:	e7e3      	b.n	8011da2 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 8011dda:	4b0d      	ldr	r3, [pc, #52]	; (8011e10 <SUBGRF_CalibrateImage+0x84>)
 8011ddc:	4298      	cmp	r0, r3
 8011dde:	d906      	bls.n	8011dee <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 8011de0:	2375      	movs	r3, #117	; 0x75
 8011de2:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 8011de6:	2381      	movs	r3, #129	; 0x81
 8011de8:	f88d 3005 	strb.w	r3, [sp, #5]
 8011dec:	e7d9      	b.n	8011da2 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 8011dee:	4b09      	ldr	r3, [pc, #36]	; (8011e14 <SUBGRF_CalibrateImage+0x88>)
 8011df0:	4298      	cmp	r0, r3
 8011df2:	d9d6      	bls.n	8011da2 <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x6B;
 8011df4:	236b      	movs	r3, #107	; 0x6b
 8011df6:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 8011dfa:	236f      	movs	r3, #111	; 0x6f
 8011dfc:	f88d 3005 	strb.w	r3, [sp, #5]
 8011e00:	e7cf      	b.n	8011da2 <SUBGRF_CalibrateImage+0x16>
 8011e02:	bf00      	nop
 8011e04:	35a4e900 	.word	0x35a4e900
 8011e08:	32a9f880 	.word	0x32a9f880
 8011e0c:	2de54480 	.word	0x2de54480
 8011e10:	1b6b0b00 	.word	0x1b6b0b00
 8011e14:	1954fc40 	.word	0x1954fc40

08011e18 <SUBGRF_SetPaConfig>:
{
 8011e18:	b500      	push	{lr}
 8011e1a:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 8011e1c:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 8011e20:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 8011e24:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 8011e28:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8011e2c:	2204      	movs	r2, #4
 8011e2e:	eb0d 0102 	add.w	r1, sp, r2
 8011e32:	2095      	movs	r0, #149	; 0x95
 8011e34:	f7ff feb4 	bl	8011ba0 <SUBGRF_WriteCommand>
}
 8011e38:	b003      	add	sp, #12
 8011e3a:	f85d fb04 	ldr.w	pc, [sp], #4

08011e3e <SUBGRF_SetDioIrqParams>:
{
 8011e3e:	b500      	push	{lr}
 8011e40:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8011e42:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 8011e46:	f88d c000 	strb.w	ip, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8011e4a:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8011e4e:	0a08      	lsrs	r0, r1, #8
 8011e50:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8011e54:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8011e58:	0a11      	lsrs	r1, r2, #8
 8011e5a:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8011e5e:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8011e62:	0a1a      	lsrs	r2, r3, #8
 8011e64:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8011e68:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8011e6c:	2208      	movs	r2, #8
 8011e6e:	4669      	mov	r1, sp
 8011e70:	4610      	mov	r0, r2
 8011e72:	f7ff fe95 	bl	8011ba0 <SUBGRF_WriteCommand>
}
 8011e76:	b003      	add	sp, #12
 8011e78:	f85d fb04 	ldr.w	pc, [sp], #4

08011e7c <SUBGRF_SetTcxoMode>:
{
 8011e7c:	b500      	push	{lr}
 8011e7e:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 8011e80:	f000 0007 	and.w	r0, r0, #7
 8011e84:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8011e88:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8011e8c:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8011e90:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8011e94:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8011e98:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8011e9c:	2204      	movs	r2, #4
 8011e9e:	eb0d 0102 	add.w	r1, sp, r2
 8011ea2:	2097      	movs	r0, #151	; 0x97
 8011ea4:	f7ff fe7c 	bl	8011ba0 <SUBGRF_WriteCommand>
}
 8011ea8:	b003      	add	sp, #12
 8011eaa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08011eb0 <SUBGRF_SetRfFrequency>:
{
 8011eb0:	b510      	push	{r4, lr}
 8011eb2:	b082      	sub	sp, #8
 8011eb4:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 8011eb6:	4b12      	ldr	r3, [pc, #72]	; (8011f00 <SUBGRF_SetRfFrequency+0x50>)
 8011eb8:	781b      	ldrb	r3, [r3, #0]
 8011eba:	b1d3      	cbz	r3, 8011ef2 <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8011ebc:	4a11      	ldr	r2, [pc, #68]	; (8011f04 <SUBGRF_SetRfFrequency+0x54>)
 8011ebe:	2300      	movs	r3, #0
 8011ec0:	0660      	lsls	r0, r4, #25
 8011ec2:	09e1      	lsrs	r1, r4, #7
 8011ec4:	f7ee ff14 	bl	8000cf0 <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8011ec8:	0e03      	lsrs	r3, r0, #24
 8011eca:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8011ece:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8011ed2:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8011ed6:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8011eda:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8011ede:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8011ee2:	2204      	movs	r2, #4
 8011ee4:	eb0d 0102 	add.w	r1, sp, r2
 8011ee8:	2086      	movs	r0, #134	; 0x86
 8011eea:	f7ff fe59 	bl	8011ba0 <SUBGRF_WriteCommand>
}
 8011eee:	b002      	add	sp, #8
 8011ef0:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 8011ef2:	f7ff ff4b 	bl	8011d8c <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8011ef6:	4b02      	ldr	r3, [pc, #8]	; (8011f00 <SUBGRF_SetRfFrequency+0x50>)
 8011ef8:	2201      	movs	r2, #1
 8011efa:	701a      	strb	r2, [r3, #0]
 8011efc:	e7de      	b.n	8011ebc <SUBGRF_SetRfFrequency+0xc>
 8011efe:	bf00      	nop
 8011f00:	200011bc 	.word	0x200011bc
 8011f04:	01e84800 	.word	0x01e84800

08011f08 <SUBGRF_GetPacketType>:
}
 8011f08:	4b01      	ldr	r3, [pc, #4]	; (8011f10 <SUBGRF_GetPacketType+0x8>)
 8011f0a:	7818      	ldrb	r0, [r3, #0]
 8011f0c:	4770      	bx	lr
 8011f0e:	bf00      	nop
 8011f10:	200011bf 	.word	0x200011bf

08011f14 <SUBGRF_SetBufferBaseAddress>:
{
 8011f14:	b500      	push	{lr}
 8011f16:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 8011f18:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 8011f1c:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8011f20:	2202      	movs	r2, #2
 8011f22:	a901      	add	r1, sp, #4
 8011f24:	208f      	movs	r0, #143	; 0x8f
 8011f26:	f7ff fe3b 	bl	8011ba0 <SUBGRF_WriteCommand>
}
 8011f2a:	b003      	add	sp, #12
 8011f2c:	f85d fb04 	ldr.w	pc, [sp], #4

08011f30 <SUBGRF_GetRssiInst>:
{
 8011f30:	b500      	push	{lr}
 8011f32:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8011f34:	2201      	movs	r2, #1
 8011f36:	a901      	add	r1, sp, #4
 8011f38:	2015      	movs	r0, #21
 8011f3a:	f7ff fe41 	bl	8011bc0 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8011f3e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8011f42:	4240      	negs	r0, r0
}
 8011f44:	1040      	asrs	r0, r0, #1
 8011f46:	b003      	add	sp, #12
 8011f48:	f85d fb04 	ldr.w	pc, [sp], #4

08011f4c <SUBGRF_GetPacketStatus>:
{
 8011f4c:	b510      	push	{r4, lr}
 8011f4e:	b082      	sub	sp, #8
 8011f50:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8011f52:	2203      	movs	r2, #3
 8011f54:	a901      	add	r1, sp, #4
 8011f56:	2014      	movs	r0, #20
 8011f58:	f7ff fe32 	bl	8011bc0 <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 8011f5c:	f7ff ffd4 	bl	8011f08 <SUBGRF_GetPacketType>
 8011f60:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 8011f62:	b148      	cbz	r0, 8011f78 <SUBGRF_GetPacketStatus+0x2c>
 8011f64:	2801      	cmp	r0, #1
 8011f66:	d018      	beq.n	8011f9a <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8011f68:	2214      	movs	r2, #20
 8011f6a:	2100      	movs	r1, #0
 8011f6c:	4620      	mov	r0, r4
 8011f6e:	f000 fe8e 	bl	8012c8e <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8011f72:	230f      	movs	r3, #15
 8011f74:	7023      	strb	r3, [r4, #0]
}
 8011f76:	e00e      	b.n	8011f96 <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8011f78:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011f7c:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8011f7e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011f82:	425b      	negs	r3, r3
 8011f84:	105b      	asrs	r3, r3, #1
 8011f86:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8011f88:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011f8c:	425b      	negs	r3, r3
 8011f8e:	105b      	asrs	r3, r3, #1
 8011f90:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8011f92:	2300      	movs	r3, #0
 8011f94:	60a3      	str	r3, [r4, #8]
}
 8011f96:	b002      	add	sp, #8
 8011f98:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8011f9a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011f9e:	425b      	negs	r3, r3
 8011fa0:	105b      	asrs	r3, r3, #1
 8011fa2:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8011fa4:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 8011fa8:	3302      	adds	r3, #2
 8011faa:	109b      	asrs	r3, r3, #2
 8011fac:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8011fae:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011fb2:	425b      	negs	r3, r3
 8011fb4:	105b      	asrs	r3, r3, #1
 8011fb6:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8011fb8:	4b01      	ldr	r3, [pc, #4]	; (8011fc0 <SUBGRF_GetPacketStatus+0x74>)
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	6123      	str	r3, [r4, #16]
            break;
 8011fbe:	e7ea      	b.n	8011f96 <SUBGRF_GetPacketStatus+0x4a>
 8011fc0:	200011b8 	.word	0x200011b8

08011fc4 <SUBGRF_WriteRegister>:
{
 8011fc4:	b500      	push	{lr}
 8011fc6:	b083      	sub	sp, #12
 8011fc8:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8011fcc:	2301      	movs	r3, #1
 8011fce:	f10d 0207 	add.w	r2, sp, #7
 8011fd2:	4601      	mov	r1, r0
 8011fd4:	4802      	ldr	r0, [pc, #8]	; (8011fe0 <SUBGRF_WriteRegister+0x1c>)
 8011fd6:	f7f4 fff1 	bl	8006fbc <HAL_SUBGHZ_WriteRegisters>
}
 8011fda:	b003      	add	sp, #12
 8011fdc:	f85d fb04 	ldr.w	pc, [sp], #4
 8011fe0:	20000284 	.word	0x20000284

08011fe4 <SUBGRF_SetRxBoosted>:
{
 8011fe4:	b510      	push	{r4, lr}
 8011fe6:	b082      	sub	sp, #8
 8011fe8:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 8011fea:	4b0c      	ldr	r3, [pc, #48]	; (801201c <SUBGRF_SetRxBoosted+0x38>)
 8011fec:	2205      	movs	r2, #5
 8011fee:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8011ff0:	2197      	movs	r1, #151	; 0x97
 8011ff2:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8011ff6:	f7ff ffe5 	bl	8011fc4 <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8011ffa:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8011ffe:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8012002:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8012006:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801200a:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801200e:	2203      	movs	r2, #3
 8012010:	a901      	add	r1, sp, #4
 8012012:	2082      	movs	r0, #130	; 0x82
 8012014:	f7ff fdc4 	bl	8011ba0 <SUBGRF_WriteCommand>
}
 8012018:	b002      	add	sp, #8
 801201a:	bd10      	pop	{r4, pc}
 801201c:	200011be 	.word	0x200011be

08012020 <SUBGRF_SetLoRaSymbNumTimeout>:
{
 8012020:	b500      	push	{lr}
 8012022:	b083      	sub	sp, #12
 8012024:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8012028:	2201      	movs	r2, #1
 801202a:	f10d 0107 	add.w	r1, sp, #7
 801202e:	20a0      	movs	r0, #160	; 0xa0
 8012030:	f7ff fdb6 	bl	8011ba0 <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 8012034:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012038:	2b3f      	cmp	r3, #63	; 0x3f
 801203a:	d90f      	bls.n	801205c <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 801203c:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 801203e:	2200      	movs	r2, #0
        while( mant > 31 )
 8012040:	e002      	b.n	8012048 <SUBGRF_SetLoRaSymbNumTimeout+0x28>
            mant >>= 2;
 8012042:	089b      	lsrs	r3, r3, #2
            exp++;
 8012044:	1c51      	adds	r1, r2, #1
 8012046:	b2ca      	uxtb	r2, r1
        while( mant > 31 )
 8012048:	2b1f      	cmp	r3, #31
 801204a:	d8fa      	bhi.n	8012042 <SUBGRF_SetLoRaSymbNumTimeout+0x22>
        reg = exp + ( mant << 3 );
 801204c:	00d9      	lsls	r1, r3, #3
 801204e:	b2c9      	uxtb	r1, r1
 8012050:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8012052:	b2c9      	uxtb	r1, r1
 8012054:	f240 7006 	movw	r0, #1798	; 0x706
 8012058:	f7ff ffb4 	bl	8011fc4 <SUBGRF_WriteRegister>
}
 801205c:	b003      	add	sp, #12
 801205e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08012064 <SUBGRF_SetPacketType>:
{
 8012064:	b500      	push	{lr}
 8012066:	b083      	sub	sp, #12
 8012068:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 801206c:	b2c3      	uxtb	r3, r0
 801206e:	4a09      	ldr	r2, [pc, #36]	; (8012094 <SUBGRF_SetPacketType+0x30>)
 8012070:	7013      	strb	r3, [r2, #0]
    if( packetType == PACKET_TYPE_GFSK )
 8012072:	b143      	cbz	r3, 8012086 <SUBGRF_SetPacketType+0x22>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8012074:	2201      	movs	r2, #1
 8012076:	f10d 0107 	add.w	r1, sp, #7
 801207a:	208a      	movs	r0, #138	; 0x8a
 801207c:	f7ff fd90 	bl	8011ba0 <SUBGRF_WriteCommand>
}
 8012080:	b003      	add	sp, #12
 8012082:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8012086:	2100      	movs	r1, #0
 8012088:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801208c:	f7ff ff9a 	bl	8011fc4 <SUBGRF_WriteRegister>
 8012090:	e7f0      	b.n	8012074 <SUBGRF_SetPacketType+0x10>
 8012092:	bf00      	nop
 8012094:	200011bf 	.word	0x200011bf

08012098 <SUBGRF_SetModulationParams>:
{
 8012098:	b510      	push	{r4, lr}
 801209a:	b082      	sub	sp, #8
 801209c:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801209e:	4b3e      	ldr	r3, [pc, #248]	; (8012198 <SUBGRF_SetModulationParams+0x100>)
 80120a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80120a4:	ab02      	add	r3, sp, #8
 80120a6:	e903 0003 	stmdb	r3, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 80120aa:	7820      	ldrb	r0, [r4, #0]
 80120ac:	4b3b      	ldr	r3, [pc, #236]	; (801219c <SUBGRF_SetModulationParams+0x104>)
 80120ae:	781b      	ldrb	r3, [r3, #0]
 80120b0:	4298      	cmp	r0, r3
 80120b2:	d106      	bne.n	80120c2 <SUBGRF_SetModulationParams+0x2a>
    switch( modulationParams->PacketType )
 80120b4:	7823      	ldrb	r3, [r4, #0]
 80120b6:	2b03      	cmp	r3, #3
 80120b8:	d82c      	bhi.n	8012114 <SUBGRF_SetModulationParams+0x7c>
 80120ba:	e8df f003 	tbb	[pc, r3]
 80120be:	4205      	.short	0x4205
 80120c0:	542d      	.short	0x542d
        SUBGRF_SetPacketType( modulationParams->PacketType );
 80120c2:	f7ff ffcf 	bl	8012064 <SUBGRF_SetPacketType>
 80120c6:	e7f5      	b.n	80120b4 <SUBGRF_SetModulationParams+0x1c>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 80120c8:	6862      	ldr	r2, [r4, #4]
 80120ca:	4b35      	ldr	r3, [pc, #212]	; (80121a0 <SUBGRF_SetModulationParams+0x108>)
 80120cc:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80120d0:	0c1a      	lsrs	r2, r3, #16
 80120d2:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80120d6:	0a1a      	lsrs	r2, r3, #8
 80120d8:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 80120dc:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80120e0:	7b23      	ldrb	r3, [r4, #12]
 80120e2:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80120e6:	7b63      	ldrb	r3, [r4, #13]
 80120e8:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 80120ec:	68a1      	ldr	r1, [r4, #8]
 80120ee:	4a2d      	ldr	r2, [pc, #180]	; (80121a4 <SUBGRF_SetModulationParams+0x10c>)
 80120f0:	2300      	movs	r3, #0
 80120f2:	0648      	lsls	r0, r1, #25
 80120f4:	09c9      	lsrs	r1, r1, #7
 80120f6:	f7ee fdfb 	bl	8000cf0 <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 80120fa:	0c03      	lsrs	r3, r0, #16
 80120fc:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8012100:	0a03      	lsrs	r3, r0, #8
 8012102:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 8012106:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801210a:	2208      	movs	r2, #8
 801210c:	4669      	mov	r1, sp
 801210e:	208b      	movs	r0, #139	; 0x8b
 8012110:	f7ff fd46 	bl	8011ba0 <SUBGRF_WriteCommand>
}
 8012114:	b002      	add	sp, #8
 8012116:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8012118:	6922      	ldr	r2, [r4, #16]
 801211a:	4b21      	ldr	r3, [pc, #132]	; (80121a0 <SUBGRF_SetModulationParams+0x108>)
 801211c:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8012120:	0c1a      	lsrs	r2, r3, #16
 8012122:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8012126:	0a1a      	lsrs	r2, r3, #8
 8012128:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 801212c:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8012130:	7d23      	ldrb	r3, [r4, #20]
 8012132:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8012136:	2204      	movs	r2, #4
 8012138:	4669      	mov	r1, sp
 801213a:	208b      	movs	r0, #139	; 0x8b
 801213c:	f7ff fd30 	bl	8011ba0 <SUBGRF_WriteCommand>
        break;
 8012140:	e7e8      	b.n	8012114 <SUBGRF_SetModulationParams+0x7c>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8012142:	7e23      	ldrb	r3, [r4, #24]
 8012144:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8012148:	7e63      	ldrb	r3, [r4, #25]
 801214a:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801214e:	7ea3      	ldrb	r3, [r4, #26]
 8012150:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8012154:	7ee3      	ldrb	r3, [r4, #27]
 8012156:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801215a:	2204      	movs	r2, #4
 801215c:	4669      	mov	r1, sp
 801215e:	208b      	movs	r0, #139	; 0x8b
 8012160:	f7ff fd1e 	bl	8011ba0 <SUBGRF_WriteCommand>
        break;
 8012164:	e7d6      	b.n	8012114 <SUBGRF_SetModulationParams+0x7c>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8012166:	6862      	ldr	r2, [r4, #4]
 8012168:	4b0d      	ldr	r3, [pc, #52]	; (80121a0 <SUBGRF_SetModulationParams+0x108>)
 801216a:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801216e:	0c1a      	lsrs	r2, r3, #16
 8012170:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8012174:	0a1a      	lsrs	r2, r3, #8
 8012176:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 801217a:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801217e:	7b23      	ldrb	r3, [r4, #12]
 8012180:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8012184:	7b63      	ldrb	r3, [r4, #13]
 8012186:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801218a:	2205      	movs	r2, #5
 801218c:	4669      	mov	r1, sp
 801218e:	208b      	movs	r0, #139	; 0x8b
 8012190:	f7ff fd06 	bl	8011ba0 <SUBGRF_WriteCommand>
}
 8012194:	e7be      	b.n	8012114 <SUBGRF_SetModulationParams+0x7c>
 8012196:	bf00      	nop
 8012198:	08014124 	.word	0x08014124
 801219c:	200011bf 	.word	0x200011bf
 80121a0:	3d090000 	.word	0x3d090000
 80121a4:	01e84800 	.word	0x01e84800

080121a8 <SUBGRF_ReadRegister>:
{
 80121a8:	b500      	push	{lr}
 80121aa:	b083      	sub	sp, #12
 80121ac:	4601      	mov	r1, r0
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 80121ae:	2301      	movs	r3, #1
 80121b0:	f10d 0207 	add.w	r2, sp, #7
 80121b4:	4803      	ldr	r0, [pc, #12]	; (80121c4 <SUBGRF_ReadRegister+0x1c>)
 80121b6:	f7f4 ff51 	bl	800705c <HAL_SUBGHZ_ReadRegisters>
}
 80121ba:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80121be:	b003      	add	sp, #12
 80121c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80121c4:	20000284 	.word	0x20000284

080121c8 <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
}

static void Radio_SMPS_Set(uint8_t level)
{
 80121c8:	b510      	push	{r4, lr}
 80121ca:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 80121cc:	f7f0 fdbe 	bl	8002d4c <RBI_IsDCDC>
 80121d0:	2801      	cmp	r0, #1
 80121d2:	d000      	beq.n	80121d6 <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 80121d4:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 80121d6:	f640 1023 	movw	r0, #2339	; 0x923
 80121da:	f7ff ffe5 	bl	80121a8 <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 80121de:	f000 01f9 	and.w	r1, r0, #249	; 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 80121e2:	4321      	orrs	r1, r4
 80121e4:	f640 1023 	movw	r0, #2339	; 0x923
 80121e8:	f7ff feec 	bl	8011fc4 <SUBGRF_WriteRegister>
}
 80121ec:	e7f2      	b.n	80121d4 <Radio_SMPS_Set+0xc>
	...

080121f0 <SUBGRF_Init>:
{
 80121f0:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 80121f2:	b108      	cbz	r0, 80121f8 <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 80121f4:	4a16      	ldr	r2, [pc, #88]	; (8012250 <SUBGRF_Init+0x60>)
 80121f6:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 80121f8:	f7ef fb6a 	bl	80018d0 <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80121fc:	2002      	movs	r0, #2
 80121fe:	f7ff ffe3 	bl	80121c8 <Radio_SMPS_Set>
    ImageCalibrated = false;
 8012202:	2000      	movs	r0, #0
 8012204:	4b13      	ldr	r3, [pc, #76]	; (8012254 <SUBGRF_Init+0x64>)
 8012206:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 8012208:	f7ff fcf0 	bl	8011bec <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 801220c:	f7f0 fd9a 	bl	8002d44 <RBI_IsTCXO>
 8012210:	2801      	cmp	r0, #1
 8012212:	d00f      	beq.n	8012234 <SUBGRF_Init+0x44>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8012214:	2120      	movs	r1, #32
 8012216:	f640 1011 	movw	r0, #2321	; 0x911
 801221a:	f7ff fed3 	bl	8011fc4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801221e:	2120      	movs	r1, #32
 8012220:	f640 1012 	movw	r0, #2322	; 0x912
 8012224:	f7ff fece 	bl	8011fc4 <SUBGRF_WriteRegister>
    RBI_Init();
 8012228:	f7f0 fd80 	bl	8002d2c <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 801222c:	4b0a      	ldr	r3, [pc, #40]	; (8012258 <SUBGRF_Init+0x68>)
 801222e:	2201      	movs	r2, #1
 8012230:	701a      	strb	r2, [r3, #0]
}
 8012232:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8012234:	2140      	movs	r1, #64	; 0x40
 8012236:	f7ff fe21 	bl	8011e7c <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801223a:	2100      	movs	r1, #0
 801223c:	f640 1011 	movw	r0, #2321	; 0x911
 8012240:	f7ff fec0 	bl	8011fc4 <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 8012244:	f04f 007f 	mov.w	r0, #127	; 0x7f
 8012248:	f7ff fd7f 	bl	8011d4a <SUBGRF_Calibrate>
 801224c:	e7ec      	b.n	8012228 <SUBGRF_Init+0x38>
 801224e:	bf00      	nop
 8012250:	200011c0 	.word	0x200011c0
 8012254:	200011bc 	.word	0x200011bc
 8012258:	200011be 	.word	0x200011be

0801225c <SUBGRF_SetSleep>:
{
 801225c:	b510      	push	{r4, lr}
 801225e:	b082      	sub	sp, #8
 8012260:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8012262:	2000      	movs	r0, #0
 8012264:	f7f0 fd66 	bl	8002d34 <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8012268:	2002      	movs	r0, #2
 801226a:	f7ff ffad 	bl	80121c8 <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801226e:	f004 0004 	and.w	r0, r4, #4
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8012272:	f004 0302 	and.w	r3, r4, #2
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8012276:	4318      	orrs	r0, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8012278:	f004 0401 	and.w	r4, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801227c:	4304      	orrs	r4, r0
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801227e:	f88d 4007 	strb.w	r4, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8012282:	2201      	movs	r2, #1
 8012284:	f10d 0107 	add.w	r1, sp, #7
 8012288:	2084      	movs	r0, #132	; 0x84
 801228a:	f7ff fc89 	bl	8011ba0 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801228e:	4b02      	ldr	r3, [pc, #8]	; (8012298 <SUBGRF_SetSleep+0x3c>)
 8012290:	2200      	movs	r2, #0
 8012292:	701a      	strb	r2, [r3, #0]
}
 8012294:	b002      	add	sp, #8
 8012296:	bd10      	pop	{r4, pc}
 8012298:	200011be 	.word	0x200011be

0801229c <SUBGRF_SetWhiteningSeed>:
{
 801229c:	b510      	push	{r4, lr}
 801229e:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 80122a0:	f7ff fe32 	bl	8011f08 <SUBGRF_GetPacketType>
 80122a4:	b100      	cbz	r0, 80122a8 <SUBGRF_SetWhiteningSeed+0xc>
}
 80122a6:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 80122a8:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80122ac:	f7ff ff7c 	bl	80121a8 <SUBGRF_ReadRegister>
 80122b0:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 80122b4:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 80122b8:	4301      	orrs	r1, r0
 80122ba:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80122be:	f7ff fe81 	bl	8011fc4 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 80122c2:	b2e1      	uxtb	r1, r4
 80122c4:	f240 60b9 	movw	r0, #1721	; 0x6b9
 80122c8:	f7ff fe7c 	bl	8011fc4 <SUBGRF_WriteRegister>
}
 80122cc:	e7eb      	b.n	80122a6 <SUBGRF_SetWhiteningSeed+0xa>

080122ce <SUBGRF_SetTxParams>:
{
 80122ce:	b570      	push	{r4, r5, r6, lr}
 80122d0:	b082      	sub	sp, #8
 80122d2:	460c      	mov	r4, r1
 80122d4:	4616      	mov	r6, r2
    if (paSelect == RFO_LP)
 80122d6:	2801      	cmp	r0, #1
 80122d8:	d035      	beq.n	8012346 <SUBGRF_SetTxParams+0x78>
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 80122da:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80122de:	f7ff ff63 	bl	80121a8 <SUBGRF_ReadRegister>
 80122e2:	f040 011e 	orr.w	r1, r0, #30
 80122e6:	b2c9      	uxtb	r1, r1
 80122e8:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80122ec:	f7ff fe6a 	bl	8011fc4 <SUBGRF_WriteRegister>
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 80122f0:	2001      	movs	r0, #1
 80122f2:	f7f0 fd2f 	bl	8002d54 <RBI_GetRFOMaxPowerConfig>
 80122f6:	4605      	mov	r5, r0
        if (power > max_power)
 80122f8:	4284      	cmp	r4, r0
 80122fa:	dd00      	ble.n	80122fe <SUBGRF_SetTxParams+0x30>
            power = max_power;
 80122fc:	b244      	sxtb	r4, r0
        if (max_power == 20)
 80122fe:	2d14      	cmp	r5, #20
 8012300:	d054      	beq.n	80123ac <SUBGRF_SetTxParams+0xde>
        else if (max_power == 17)
 8012302:	2d11      	cmp	r5, #17
 8012304:	d05c      	beq.n	80123c0 <SUBGRF_SetTxParams+0xf2>
        else if (max_power == 14)
 8012306:	2d0e      	cmp	r5, #14
 8012308:	d064      	beq.n	80123d4 <SUBGRF_SetTxParams+0x106>
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801230a:	2301      	movs	r3, #1
 801230c:	2200      	movs	r2, #0
 801230e:	2107      	movs	r1, #7
 8012310:	2004      	movs	r0, #4
 8012312:	f7ff fd81 	bl	8011e18 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8012316:	1b64      	subs	r4, r4, r5
 8012318:	3416      	adds	r4, #22
 801231a:	b264      	sxtb	r4, r4
        if (power < -9)
 801231c:	f114 0f09 	cmn.w	r4, #9
 8012320:	da01      	bge.n	8012326 <SUBGRF_SetTxParams+0x58>
            power = -9;
 8012322:	f06f 0408 	mvn.w	r4, #8
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8012326:	2138      	movs	r1, #56	; 0x38
 8012328:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801232c:	f7ff fe4a 	bl	8011fc4 <SUBGRF_WriteRegister>
    buf[0] = power;
 8012330:	f88d 4004 	strb.w	r4, [sp, #4]
    buf[1] = (uint8_t)rampTime;
 8012334:	f88d 6005 	strb.w	r6, [sp, #5]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8012338:	2202      	movs	r2, #2
 801233a:	a901      	add	r1, sp, #4
 801233c:	208e      	movs	r0, #142	; 0x8e
 801233e:	f7ff fc2f 	bl	8011ba0 <SUBGRF_WriteCommand>
}
 8012342:	b002      	add	sp, #8
 8012344:	bd70      	pop	{r4, r5, r6, pc}
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8012346:	2000      	movs	r0, #0
 8012348:	f7f0 fd04 	bl	8002d54 <RBI_GetRFOMaxPowerConfig>
 801234c:	4605      	mov	r5, r0
        if (power >  max_power)
 801234e:	4284      	cmp	r4, r0
 8012350:	dd00      	ble.n	8012354 <SUBGRF_SetTxParams+0x86>
          power = max_power;
 8012352:	b244      	sxtb	r4, r0
        if (max_power == 14)
 8012354:	2d0e      	cmp	r5, #14
 8012356:	d015      	beq.n	8012384 <SUBGRF_SetTxParams+0xb6>
        else if (max_power == 10)
 8012358:	2d0a      	cmp	r5, #10
 801235a:	d01d      	beq.n	8012398 <SUBGRF_SetTxParams+0xca>
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 801235c:	2301      	movs	r3, #1
 801235e:	461a      	mov	r2, r3
 8012360:	2100      	movs	r1, #0
 8012362:	2006      	movs	r0, #6
 8012364:	f7ff fd58 	bl	8011e18 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8012368:	1b64      	subs	r4, r4, r5
 801236a:	340e      	adds	r4, #14
 801236c:	b264      	sxtb	r4, r4
        if (power < -17)
 801236e:	f114 0f11 	cmn.w	r4, #17
 8012372:	da01      	bge.n	8012378 <SUBGRF_SetTxParams+0xaa>
            power = -17;
 8012374:	f06f 0410 	mvn.w	r4, #16
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8012378:	2118      	movs	r1, #24
 801237a:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801237e:	f7ff fe21 	bl	8011fc4 <SUBGRF_WriteRegister>
 8012382:	e7d5      	b.n	8012330 <SUBGRF_SetTxParams+0x62>
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8012384:	2301      	movs	r3, #1
 8012386:	461a      	mov	r2, r3
 8012388:	2100      	movs	r1, #0
 801238a:	2004      	movs	r0, #4
 801238c:	f7ff fd44 	bl	8011e18 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8012390:	1b64      	subs	r4, r4, r5
 8012392:	340e      	adds	r4, #14
 8012394:	b264      	sxtb	r4, r4
 8012396:	e7ea      	b.n	801236e <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8012398:	2301      	movs	r3, #1
 801239a:	461a      	mov	r2, r3
 801239c:	2100      	movs	r1, #0
 801239e:	4618      	mov	r0, r3
 80123a0:	f7ff fd3a 	bl	8011e18 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 80123a4:	1b64      	subs	r4, r4, r5
 80123a6:	340d      	adds	r4, #13
 80123a8:	b264      	sxtb	r4, r4
 80123aa:	e7e0      	b.n	801236e <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 80123ac:	2301      	movs	r3, #1
 80123ae:	2200      	movs	r2, #0
 80123b0:	2105      	movs	r1, #5
 80123b2:	2003      	movs	r0, #3
 80123b4:	f7ff fd30 	bl	8011e18 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80123b8:	1b64      	subs	r4, r4, r5
 80123ba:	3416      	adds	r4, #22
 80123bc:	b264      	sxtb	r4, r4
 80123be:	e7ad      	b.n	801231c <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 80123c0:	2301      	movs	r3, #1
 80123c2:	2200      	movs	r2, #0
 80123c4:	2103      	movs	r1, #3
 80123c6:	2002      	movs	r0, #2
 80123c8:	f7ff fd26 	bl	8011e18 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80123cc:	1b64      	subs	r4, r4, r5
 80123ce:	3416      	adds	r4, #22
 80123d0:	b264      	sxtb	r4, r4
 80123d2:	e7a3      	b.n	801231c <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 80123d4:	2301      	movs	r3, #1
 80123d6:	2200      	movs	r2, #0
 80123d8:	2102      	movs	r1, #2
 80123da:	4608      	mov	r0, r1
 80123dc:	f7ff fd1c 	bl	8011e18 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80123e0:	1b64      	subs	r4, r4, r5
 80123e2:	340e      	adds	r4, #14
 80123e4:	b264      	sxtb	r4, r4
 80123e6:	e799      	b.n	801231c <SUBGRF_SetTxParams+0x4e>

080123e8 <SUBGRF_GetRxBufferStatus>:
{
 80123e8:	b530      	push	{r4, r5, lr}
 80123ea:	b083      	sub	sp, #12
 80123ec:	4605      	mov	r5, r0
 80123ee:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 80123f0:	2202      	movs	r2, #2
 80123f2:	a901      	add	r1, sp, #4
 80123f4:	2013      	movs	r0, #19
 80123f6:	f7ff fbe3 	bl	8011bc0 <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 80123fa:	f7ff fd85 	bl	8011f08 <SUBGRF_GetPacketType>
 80123fe:	2801      	cmp	r0, #1
 8012400:	d007      	beq.n	8012412 <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 8012402:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012406:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 8012408:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801240c:	7023      	strb	r3, [r4, #0]
}
 801240e:	b003      	add	sp, #12
 8012410:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8012412:	4b05      	ldr	r3, [pc, #20]	; (8012428 <SUBGRF_GetRxBufferStatus+0x40>)
 8012414:	781b      	ldrb	r3, [r3, #0]
 8012416:	b2db      	uxtb	r3, r3
 8012418:	2b01      	cmp	r3, #1
 801241a:	d1f2      	bne.n	8012402 <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801241c:	f240 7002 	movw	r0, #1794	; 0x702
 8012420:	f7ff fec2 	bl	80121a8 <SUBGRF_ReadRegister>
 8012424:	7028      	strb	r0, [r5, #0]
 8012426:	e7ef      	b.n	8012408 <SUBGRF_GetRxBufferStatus+0x20>
 8012428:	200011bd 	.word	0x200011bd

0801242c <SUBGRF_WriteRegisters>:
{
 801242c:	b510      	push	{r4, lr}
 801242e:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012430:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012434:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8012436:	460a      	mov	r2, r1
 8012438:	4601      	mov	r1, r0
 801243a:	4803      	ldr	r0, [pc, #12]	; (8012448 <SUBGRF_WriteRegisters+0x1c>)
 801243c:	f7f4 fdbe 	bl	8006fbc <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012440:	f384 8810 	msr	PRIMASK, r4
}
 8012444:	bd10      	pop	{r4, pc}
 8012446:	bf00      	nop
 8012448:	20000284 	.word	0x20000284

0801244c <SUBGRF_SetSyncWord>:
{
 801244c:	b508      	push	{r3, lr}
 801244e:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8012450:	2208      	movs	r2, #8
 8012452:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8012456:	f7ff ffe9 	bl	801242c <SUBGRF_WriteRegisters>
}
 801245a:	2000      	movs	r0, #0
 801245c:	bd08      	pop	{r3, pc}

0801245e <SUBGRF_SetCrcSeed>:
{
 801245e:	b500      	push	{lr}
 8012460:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8012462:	0a03      	lsrs	r3, r0, #8
 8012464:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8012468:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 801246c:	f7ff fd4c 	bl	8011f08 <SUBGRF_GetPacketType>
 8012470:	b110      	cbz	r0, 8012478 <SUBGRF_SetCrcSeed+0x1a>
}
 8012472:	b003      	add	sp, #12
 8012474:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8012478:	2202      	movs	r2, #2
 801247a:	a901      	add	r1, sp, #4
 801247c:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8012480:	f7ff ffd4 	bl	801242c <SUBGRF_WriteRegisters>
}
 8012484:	e7f5      	b.n	8012472 <SUBGRF_SetCrcSeed+0x14>

08012486 <SUBGRF_SetCrcPolynomial>:
{
 8012486:	b500      	push	{lr}
 8012488:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801248a:	0a03      	lsrs	r3, r0, #8
 801248c:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8012490:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8012494:	f7ff fd38 	bl	8011f08 <SUBGRF_GetPacketType>
 8012498:	b110      	cbz	r0, 80124a0 <SUBGRF_SetCrcPolynomial+0x1a>
}
 801249a:	b003      	add	sp, #12
 801249c:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 80124a0:	2202      	movs	r2, #2
 80124a2:	a901      	add	r1, sp, #4
 80124a4:	f240 60be 	movw	r0, #1726	; 0x6be
 80124a8:	f7ff ffc0 	bl	801242c <SUBGRF_WriteRegisters>
}
 80124ac:	e7f5      	b.n	801249a <SUBGRF_SetCrcPolynomial+0x14>
	...

080124b0 <SUBGRF_SetPacketParams>:
{
 80124b0:	b510      	push	{r4, lr}
 80124b2:	b084      	sub	sp, #16
 80124b4:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80124b6:	ab01      	add	r3, sp, #4
 80124b8:	4a33      	ldr	r2, [pc, #204]	; (8012588 <SUBGRF_SetPacketParams+0xd8>)
 80124ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80124bc:	c303      	stmia	r3!, {r0, r1}
 80124be:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 80124c0:	7820      	ldrb	r0, [r4, #0]
 80124c2:	4b32      	ldr	r3, [pc, #200]	; (801258c <SUBGRF_SetPacketParams+0xdc>)
 80124c4:	781b      	ldrb	r3, [r3, #0]
 80124c6:	4298      	cmp	r0, r3
 80124c8:	d106      	bne.n	80124d8 <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 80124ca:	7823      	ldrb	r3, [r4, #0]
 80124cc:	2b03      	cmp	r3, #3
 80124ce:	d82a      	bhi.n	8012526 <SUBGRF_SetPacketParams+0x76>
 80124d0:	e8df f003 	tbb	[pc, r3]
 80124d4:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 80124d8:	f7ff fdc4 	bl	8012064 <SUBGRF_SetPacketType>
 80124dc:	e7f5      	b.n	80124ca <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 80124de:	7a63      	ldrb	r3, [r4, #9]
 80124e0:	2bf1      	cmp	r3, #241	; 0xf1
 80124e2:	d022      	beq.n	801252a <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 80124e4:	2bf2      	cmp	r3, #242	; 0xf2
 80124e6:	d02a      	beq.n	801253e <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 80124e8:	8862      	ldrh	r2, [r4, #2]
 80124ea:	0a11      	lsrs	r1, r2, #8
 80124ec:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 80124f0:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 80124f4:	7922      	ldrb	r2, [r4, #4]
 80124f6:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 80124fa:	7962      	ldrb	r2, [r4, #5]
 80124fc:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8012500:	79a2      	ldrb	r2, [r4, #6]
 8012502:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8012506:	79e2      	ldrb	r2, [r4, #7]
 8012508:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801250c:	7a22      	ldrb	r2, [r4, #8]
 801250e:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 8012512:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8012516:	7aa3      	ldrb	r3, [r4, #10]
 8012518:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 801251c:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801251e:	a901      	add	r1, sp, #4
 8012520:	208c      	movs	r0, #140	; 0x8c
 8012522:	f7ff fb3d 	bl	8011ba0 <SUBGRF_WriteCommand>
}
 8012526:	b004      	add	sp, #16
 8012528:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801252a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801252e:	f7ff ff96 	bl	801245e <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8012532:	f248 0005 	movw	r0, #32773	; 0x8005
 8012536:	f7ff ffa6 	bl	8012486 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801253a:	2302      	movs	r3, #2
 801253c:	e7d4      	b.n	80124e8 <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801253e:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8012542:	f7ff ff8c 	bl	801245e <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8012546:	f241 0021 	movw	r0, #4129	; 0x1021
 801254a:	f7ff ff9c 	bl	8012486 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801254e:	2306      	movs	r3, #6
 8012550:	e7ca      	b.n	80124e8 <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8012552:	7b23      	ldrb	r3, [r4, #12]
 8012554:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 8012558:	2201      	movs	r2, #1
        break;
 801255a:	e7e0      	b.n	801251e <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801255c:	89e3      	ldrh	r3, [r4, #14]
 801255e:	0a1a      	lsrs	r2, r3, #8
 8012560:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8012564:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8012568:	7c23      	ldrb	r3, [r4, #16]
 801256a:	4a09      	ldr	r2, [pc, #36]	; (8012590 <SUBGRF_SetPacketParams+0xe0>)
 801256c:	7013      	strb	r3, [r2, #0]
 801256e:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8012572:	7c63      	ldrb	r3, [r4, #17]
 8012574:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8012578:	7ca3      	ldrb	r3, [r4, #18]
 801257a:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801257e:	7ce3      	ldrb	r3, [r4, #19]
 8012580:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 8012584:	2206      	movs	r2, #6
        break;
 8012586:	e7ca      	b.n	801251e <SUBGRF_SetPacketParams+0x6e>
 8012588:	0801412c 	.word	0x0801412c
 801258c:	200011bf 	.word	0x200011bf
 8012590:	200011bd 	.word	0x200011bd

08012594 <SUBGRF_ReadRegisters>:
{
 8012594:	b510      	push	{r4, lr}
 8012596:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012598:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801259c:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801259e:	460a      	mov	r2, r1
 80125a0:	4601      	mov	r1, r0
 80125a2:	4803      	ldr	r0, [pc, #12]	; (80125b0 <SUBGRF_ReadRegisters+0x1c>)
 80125a4:	f7f4 fd5a 	bl	800705c <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80125a8:	f384 8810 	msr	PRIMASK, r4
}
 80125ac:	bd10      	pop	{r4, pc}
 80125ae:	bf00      	nop
 80125b0:	20000284 	.word	0x20000284

080125b4 <SUBGRF_GetRandom>:
{
 80125b4:	b570      	push	{r4, r5, r6, lr}
 80125b6:	b082      	sub	sp, #8
    uint32_t number = 0;
 80125b8:	2600      	movs	r6, #0
 80125ba:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 80125bc:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80125c0:	f7ff fdf2 	bl	80121a8 <SUBGRF_ReadRegister>
 80125c4:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 80125c6:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 80125ca:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80125ce:	f7ff fcf9 	bl	8011fc4 <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 80125d2:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80125d6:	f7ff fde7 	bl	80121a8 <SUBGRF_ReadRegister>
 80125da:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 80125dc:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 80125e0:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80125e4:	f7ff fcee 	bl	8011fc4 <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80125e8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80125ec:	f7ff fb32 	bl	8011c54 <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 80125f0:	2204      	movs	r2, #4
 80125f2:	eb0d 0102 	add.w	r1, sp, r2
 80125f6:	f640 0019 	movw	r0, #2073	; 0x819
 80125fa:	f7ff ffcb 	bl	8012594 <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 80125fe:	4630      	mov	r0, r6
 8012600:	f7ff faf4 	bl	8011bec <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8012604:	4629      	mov	r1, r5
 8012606:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801260a:	f7ff fcdb 	bl	8011fc4 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801260e:	4621      	mov	r1, r4
 8012610:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8012614:	f7ff fcd6 	bl	8011fc4 <SUBGRF_WriteRegister>
}
 8012618:	9801      	ldr	r0, [sp, #4]
 801261a:	b002      	add	sp, #8
 801261c:	bd70      	pop	{r4, r5, r6, pc}
	...

08012620 <SUBGRF_WriteBuffer>:
{
 8012620:	b510      	push	{r4, lr}
 8012622:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012624:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012628:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801262a:	460a      	mov	r2, r1
 801262c:	4601      	mov	r1, r0
 801262e:	4803      	ldr	r0, [pc, #12]	; (801263c <SUBGRF_WriteBuffer+0x1c>)
 8012630:	f7f4 fe6a 	bl	8007308 <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012634:	f384 8810 	msr	PRIMASK, r4
}
 8012638:	bd10      	pop	{r4, pc}
 801263a:	bf00      	nop
 801263c:	20000284 	.word	0x20000284

08012640 <SUBGRF_SetPayload>:
{
 8012640:	b508      	push	{r3, lr}
 8012642:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8012644:	4601      	mov	r1, r0
 8012646:	2000      	movs	r0, #0
 8012648:	f7ff ffea 	bl	8012620 <SUBGRF_WriteBuffer>
}
 801264c:	bd08      	pop	{r3, pc}

0801264e <SUBGRF_SendPayload>:
{
 801264e:	b510      	push	{r4, lr}
 8012650:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 8012652:	f7ff fff5 	bl	8012640 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8012656:	4620      	mov	r0, r4
 8012658:	f7ff fae2 	bl	8011c20 <SUBGRF_SetTx>
}
 801265c:	bd10      	pop	{r4, pc}
	...

08012660 <SUBGRF_ReadBuffer>:
{
 8012660:	b510      	push	{r4, lr}
 8012662:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012664:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012668:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801266a:	460a      	mov	r2, r1
 801266c:	4601      	mov	r1, r0
 801266e:	4803      	ldr	r0, [pc, #12]	; (801267c <SUBGRF_ReadBuffer+0x1c>)
 8012670:	f7f4 fe94 	bl	800739c <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012674:	f384 8810 	msr	PRIMASK, r4
}
 8012678:	bd10      	pop	{r4, pc}
 801267a:	bf00      	nop
 801267c:	20000284 	.word	0x20000284

08012680 <SUBGRF_GetPayload>:
{
 8012680:	b570      	push	{r4, r5, r6, lr}
 8012682:	b082      	sub	sp, #8
 8012684:	4606      	mov	r6, r0
 8012686:	460c      	mov	r4, r1
 8012688:	4615      	mov	r5, r2
    uint8_t offset = 0;
 801268a:	2300      	movs	r3, #0
 801268c:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 8012690:	f10d 0107 	add.w	r1, sp, #7
 8012694:	4620      	mov	r0, r4
 8012696:	f7ff fea7 	bl	80123e8 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801269a:	7822      	ldrb	r2, [r4, #0]
 801269c:	42aa      	cmp	r2, r5
 801269e:	d902      	bls.n	80126a6 <SUBGRF_GetPayload+0x26>
        return 1;
 80126a0:	2001      	movs	r0, #1
}
 80126a2:	b002      	add	sp, #8
 80126a4:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 80126a6:	4631      	mov	r1, r6
 80126a8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80126ac:	f7ff ffd8 	bl	8012660 <SUBGRF_ReadBuffer>
    return 0;
 80126b0:	2000      	movs	r0, #0
 80126b2:	e7f6      	b.n	80126a2 <SUBGRF_GetPayload+0x22>

080126b4 <SUBGRF_SetSwitch>:
{
 80126b4:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 80126b6:	2901      	cmp	r1, #1
 80126b8:	d003      	beq.n	80126c2 <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 80126ba:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 80126bc:	f7f0 fb3a 	bl	8002d34 <RBI_ConfigRFSwitch>
}
 80126c0:	bd10      	pop	{r4, pc}
 80126c2:	4604      	mov	r4, r0
 80126c4:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 80126c6:	2c01      	cmp	r4, #1
 80126c8:	d003      	beq.n	80126d2 <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 80126ca:	2c02      	cmp	r4, #2
 80126cc:	d1f6      	bne.n	80126bc <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 80126ce:	2003      	movs	r0, #3
 80126d0:	e7f4      	b.n	80126bc <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 80126d2:	2004      	movs	r0, #4
 80126d4:	f7ff fd78 	bl	80121c8 <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 80126d8:	2002      	movs	r0, #2
 80126da:	e7f6      	b.n	80126ca <SUBGRF_SetSwitch+0x16>

080126dc <SUBGRF_SetRfTxPower>:
{
 80126dc:	b538      	push	{r3, r4, r5, lr}
 80126de:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 80126e0:	f7f0 fb2c 	bl	8002d3c <RBI_GetTxConfig>
    switch (TxConfig)
 80126e4:	b148      	cbz	r0, 80126fa <SUBGRF_SetRfTxPower+0x1e>
 80126e6:	2802      	cmp	r0, #2
 80126e8:	d10d      	bne.n	8012706 <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 80126ea:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 80126ec:	2202      	movs	r2, #2
 80126ee:	4621      	mov	r1, r4
 80126f0:	4628      	mov	r0, r5
 80126f2:	f7ff fdec 	bl	80122ce <SUBGRF_SetTxParams>
}
 80126f6:	4628      	mov	r0, r5
 80126f8:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 80126fa:	2c0f      	cmp	r4, #15
 80126fc:	dc01      	bgt.n	8012702 <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 80126fe:	2501      	movs	r5, #1
 8012700:	e7f4      	b.n	80126ec <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 8012702:	2502      	movs	r5, #2
 8012704:	e7f2      	b.n	80126ec <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 8012706:	2501      	movs	r5, #1
 8012708:	e7f0      	b.n	80126ec <SUBGRF_SetRfTxPower+0x10>

0801270a <SUBGRF_GetRadioWakeUpTime>:
}
 801270a:	2001      	movs	r0, #1
 801270c:	4770      	bx	lr
	...

08012710 <HAL_SUBGHZ_TxCpltCallback>:
{
 8012710:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8012712:	4b02      	ldr	r3, [pc, #8]	; (801271c <HAL_SUBGHZ_TxCpltCallback+0xc>)
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	2001      	movs	r0, #1
 8012718:	4798      	blx	r3
}
 801271a:	bd08      	pop	{r3, pc}
 801271c:	200011c0 	.word	0x200011c0

08012720 <HAL_SUBGHZ_RxCpltCallback>:
{
 8012720:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8012722:	4b02      	ldr	r3, [pc, #8]	; (801272c <HAL_SUBGHZ_RxCpltCallback+0xc>)
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	2002      	movs	r0, #2
 8012728:	4798      	blx	r3
}
 801272a:	bd08      	pop	{r3, pc}
 801272c:	200011c0 	.word	0x200011c0

08012730 <HAL_SUBGHZ_CRCErrorCallback>:
{
 8012730:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8012732:	4b02      	ldr	r3, [pc, #8]	; (801273c <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	2040      	movs	r0, #64	; 0x40
 8012738:	4798      	blx	r3
}
 801273a:	bd08      	pop	{r3, pc}
 801273c:	200011c0 	.word	0x200011c0

08012740 <HAL_SUBGHZ_CADStatusCallback>:
{
 8012740:	b508      	push	{r3, lr}
    switch (cadstatus)
 8012742:	b111      	cbz	r1, 801274a <HAL_SUBGHZ_CADStatusCallback+0xa>
 8012744:	2901      	cmp	r1, #1
 8012746:	d005      	beq.n	8012754 <HAL_SUBGHZ_CADStatusCallback+0x14>
}
 8012748:	bd08      	pop	{r3, pc}
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801274a:	4b05      	ldr	r3, [pc, #20]	; (8012760 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	2080      	movs	r0, #128	; 0x80
 8012750:	4798      	blx	r3
            break;
 8012752:	e7f9      	b.n	8012748 <HAL_SUBGHZ_CADStatusCallback+0x8>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8012754:	4b02      	ldr	r3, [pc, #8]	; (8012760 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	f44f 7080 	mov.w	r0, #256	; 0x100
 801275c:	4798      	blx	r3
}
 801275e:	e7f3      	b.n	8012748 <HAL_SUBGHZ_CADStatusCallback+0x8>
 8012760:	200011c0 	.word	0x200011c0

08012764 <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 8012764:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8012766:	4b03      	ldr	r3, [pc, #12]	; (8012774 <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	f44f 7000 	mov.w	r0, #512	; 0x200
 801276e:	4798      	blx	r3
}
 8012770:	bd08      	pop	{r3, pc}
 8012772:	bf00      	nop
 8012774:	200011c0 	.word	0x200011c0

08012778 <HAL_SUBGHZ_HeaderErrorCallback>:
{
 8012778:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801277a:	4b02      	ldr	r3, [pc, #8]	; (8012784 <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	2020      	movs	r0, #32
 8012780:	4798      	blx	r3
}
 8012782:	bd08      	pop	{r3, pc}
 8012784:	200011c0 	.word	0x200011c0

08012788 <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 8012788:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801278a:	4b02      	ldr	r3, [pc, #8]	; (8012794 <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	2004      	movs	r0, #4
 8012790:	4798      	blx	r3
}
 8012792:	bd08      	pop	{r3, pc}
 8012794:	200011c0 	.word	0x200011c0

08012798 <HAL_SUBGHZ_SyncWordValidCallback>:
{
 8012798:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801279a:	4b02      	ldr	r3, [pc, #8]	; (80127a4 <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	2008      	movs	r0, #8
 80127a0:	4798      	blx	r3
}
 80127a2:	bd08      	pop	{r3, pc}
 80127a4:	200011c0 	.word	0x200011c0

080127a8 <HAL_SUBGHZ_HeaderValidCallback>:
{
 80127a8:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 80127aa:	4b02      	ldr	r3, [pc, #8]	; (80127b4 <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	2010      	movs	r0, #16
 80127b0:	4798      	blx	r3
}
 80127b2:	bd08      	pop	{r3, pc}
 80127b4:	200011c0 	.word	0x200011c0

080127b8 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 80127b8:	4601      	mov	r1, r0
 80127ba:	b188      	cbz	r0, 80127e0 <SUBGRF_GetFskBandwidthRegValue+0x28>
    {
        return( 0x1F );
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 80127bc:	2300      	movs	r3, #0
 80127be:	2b15      	cmp	r3, #21
 80127c0:	d80d      	bhi.n	80127de <SUBGRF_GetFskBandwidthRegValue+0x26>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 80127c2:	4618      	mov	r0, r3
 80127c4:	4a07      	ldr	r2, [pc, #28]	; (80127e4 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 80127c6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80127ca:	428a      	cmp	r2, r1
 80127cc:	d802      	bhi.n	80127d4 <SUBGRF_GetFskBandwidthRegValue+0x1c>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 80127ce:	3301      	adds	r3, #1
 80127d0:	b2db      	uxtb	r3, r3
 80127d2:	e7f4      	b.n	80127be <SUBGRF_GetFskBandwidthRegValue+0x6>
        {
            return FskBandwidths[i].RegValue;
 80127d4:	4b03      	ldr	r3, [pc, #12]	; (80127e4 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 80127d6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80127da:	7900      	ldrb	r0, [r0, #4]
 80127dc:	4770      	bx	lr
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 80127de:	e7fe      	b.n	80127de <SUBGRF_GetFskBandwidthRegValue+0x26>
        return( 0x1F );
 80127e0:	201f      	movs	r0, #31
}
 80127e2:	4770      	bx	lr
 80127e4:	08014ed8 	.word	0x08014ed8

080127e8 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 80127e8:	b570      	push	{r4, r5, r6, lr}
 80127ea:	b082      	sub	sp, #8
 80127ec:	4606      	mov	r6, r0
 80127ee:	460c      	mov	r4, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 80127f0:	4b1d      	ldr	r3, [pc, #116]	; (8012868 <SUBGRF_GetCFO+0x80>)
 80127f2:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 80127f4:	f640 0007 	movw	r0, #2055	; 0x807
 80127f8:	f7ff fcd6 	bl	80121a8 <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 80127fc:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 8012800:	3308      	adds	r3, #8
 8012802:	446b      	add	r3, sp
 8012804:	f813 5c04 	ldrb.w	r5, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 8012808:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 801280c:	3b01      	subs	r3, #1
 801280e:	fa05 f303 	lsl.w	r3, r5, r3
 8012812:	4d16      	ldr	r5, [pc, #88]	; (801286c <SUBGRF_GetCFO+0x84>)
 8012814:	fbb5 f5f3 	udiv	r5, r5, r3
  uint32_t cf_osr = cf_fs / bitRate;
 8012818:	fbb5 f2f6 	udiv	r2, r5, r6
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801281c:	2a07      	cmp	r2, #7
 801281e:	d921      	bls.n	8012864 <SUBGRF_GetCFO+0x7c>
  uint8_t interp = 1;
 8012820:	2001      	movs	r0, #1
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 8012822:	fb00 f202 	mul.w	r2, r0, r2
 8012826:	2a03      	cmp	r2, #3
 8012828:	d800      	bhi.n	801282c <SUBGRF_GetCFO+0x44>
  {
    interp = 4;
 801282a:	2004      	movs	r0, #4
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801282c:	fb00 f505 	mul.w	r5, r0, r5
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8012830:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8012834:	f7ff fcb8 	bl	80121a8 <SUBGRF_ReadRegister>
 8012838:	0200      	lsls	r0, r0, #8
 801283a:	f400 6670 	and.w	r6, r0, #3840	; 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801283e:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8012842:	f7ff fcb1 	bl	80121a8 <SUBGRF_ReadRegister>
 8012846:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8012848:	f410 6f00 	tst.w	r0, #2048	; 0x800
 801284c:	d003      	beq.n	8012856 <SUBGRF_GetCFO+0x6e>
  {
    cfo_bin |= 0xFFFFF000;
 801284e:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 8012852:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8012856:	096d      	lsrs	r5, r5, #5
 8012858:	fb05 f000 	mul.w	r0, r5, r0
 801285c:	11c0      	asrs	r0, r0, #7
 801285e:	6020      	str	r0, [r4, #0]
}
 8012860:	b002      	add	sp, #8
 8012862:	bd70      	pop	{r4, r5, r6, pc}
    interp = 2;
 8012864:	2002      	movs	r0, #2
 8012866:	e7dc      	b.n	8012822 <SUBGRF_GetCFO+0x3a>
 8012868:	0c0a0804 	.word	0x0c0a0804
 801286c:	01e84800 	.word	0x01e84800

08012870 <RFW_TransmitLongPacket>:
  }
#else
  status= -1;
#endif
  return status;
}
 8012870:	f04f 30ff 	mov.w	r0, #4294967295
 8012874:	4770      	bx	lr

08012876 <RFW_ReceiveLongPacket>:
  }
#else
  status= -1;
#endif
  return status;
}
 8012876:	f04f 30ff 	mov.w	r0, #4294967295
 801287a:	4770      	bx	lr

0801287c <RFW_DeInit>:
void RFW_DeInit( void)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 801287c:	4770      	bx	lr

0801287e <RFW_Is_Init>:
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
#endif
}
 801287e:	2000      	movs	r0, #0
 8012880:	4770      	bx	lr

08012882 <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
#endif
}
 8012882:	2000      	movs	r0, #0
 8012884:	4770      	bx	lr

08012886 <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 8012886:	4770      	bx	lr

08012888 <RFW_TransmitInit>:

    status= 0;
  }
#endif
  return status;
}
 8012888:	f04f 30ff 	mov.w	r0, #4294967295
 801288c:	4770      	bx	lr

0801288e <RFW_ReceiveInit>:
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
#endif
}
 801288e:	f04f 30ff 	mov.w	r0, #4294967295
 8012892:	4770      	bx	lr

08012894 <RFW_DeInit_TxLongPacket>:
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 8012894:	4770      	bx	lr

08012896 <RFW_ReceivePayload>:
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 8012896:	4770      	bx	lr

08012898 <RFW_SetRadioModem>:
void RFW_SetRadioModem(RadioModems_t Modem)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 8012898:	4770      	bx	lr
	...

0801289c <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801289c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801289e:	f3ef 8e10 	mrs	lr, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80128a2:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 80128a4:	4b1e      	ldr	r3, [pc, #120]	; (8012920 <TRACE_AllocateBufer+0x84>)
 80128a6:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 80128aa:	8a1a      	ldrh	r2, [r3, #16]
 80128ac:	4594      	cmp	ip, r2
 80128ae:	d011      	beq.n	80128d4 <TRACE_AllocateBufer+0x38>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80128b0:	4594      	cmp	ip, r2
 80128b2:	d921      	bls.n	80128f8 <TRACE_AllocateBufer+0x5c>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 80128b4:	f5cc 6380 	rsb	r3, ip, #1024	; 0x400
 80128b8:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 80128ba:	4283      	cmp	r3, r0
 80128bc:	d81f      	bhi.n	80128fe <TRACE_AllocateBufer+0x62>
 80128be:	4282      	cmp	r2, r0
 80128c0:	d91d      	bls.n	80128fe <TRACE_AllocateBufer+0x62>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 80128c2:	4b17      	ldr	r3, [pc, #92]	; (8012920 <TRACE_AllocateBufer+0x84>)
 80128c4:	2401      	movs	r4, #1
 80128c6:	709c      	strb	r4, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 80128c8:	f8a3 c000 	strh.w	ip, [r3]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 80128cc:	2400      	movs	r4, #0
 80128ce:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 80128d0:	4613      	mov	r3, r2
 80128d2:	e014      	b.n	80128fe <TRACE_AllocateBufer+0x62>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 80128d4:	f5cc 6380 	rsb	r3, ip, #1024	; 0x400
 80128d8:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 80128da:	4298      	cmp	r0, r3
 80128dc:	d30f      	bcc.n	80128fe <TRACE_AllocateBufer+0x62>
 80128de:	4282      	cmp	r2, r0
 80128e0:	d90d      	bls.n	80128fe <TRACE_AllocateBufer+0x62>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 80128e2:	4b0f      	ldr	r3, [pc, #60]	; (8012920 <TRACE_AllocateBufer+0x84>)
 80128e4:	2401      	movs	r4, #1
 80128e6:	709c      	strb	r4, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 80128e8:	f8a3 c000 	strh.w	ip, [r3]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 80128ec:	f04f 0c00 	mov.w	ip, #0
 80128f0:	f8a3 c012 	strh.w	ip, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 80128f4:	4613      	mov	r3, r2
 80128f6:	e002      	b.n	80128fe <TRACE_AllocateBufer+0x62>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 80128f8:	eba2 030c 	sub.w	r3, r2, ip
 80128fc:	b29b      	uxth	r3, r3
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 80128fe:	4283      	cmp	r3, r0
 8012900:	d90a      	bls.n	8012918 <TRACE_AllocateBufer+0x7c>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 8012902:	4a07      	ldr	r2, [pc, #28]	; (8012920 <TRACE_AllocateBufer+0x84>)
 8012904:	8a53      	ldrh	r3, [r2, #18]
 8012906:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 8012908:	4403      	add	r3, r0
 801290a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801290e:	8253      	strh	r3, [r2, #18]
    ret = 0;
 8012910:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012912:	f38e 8810 	msr	PRIMASK, lr
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 8012916:	bd10      	pop	{r4, pc}
  int16_t ret = -1;
 8012918:	f04f 30ff 	mov.w	r0, #4294967295
 801291c:	e7f9      	b.n	8012912 <TRACE_AllocateBufer+0x76>
 801291e:	bf00      	nop
 8012920:	200015c4 	.word	0x200015c4

08012924 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012924:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012928:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 801292a:	4a03      	ldr	r2, [pc, #12]	; (8012938 <TRACE_Lock+0x14>)
 801292c:	8ad3      	ldrh	r3, [r2, #22]
 801292e:	3301      	adds	r3, #1
 8012930:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012932:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8012936:	4770      	bx	lr
 8012938:	200015c4 	.word	0x200015c4

0801293c <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801293c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012940:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 8012942:	4a03      	ldr	r2, [pc, #12]	; (8012950 <TRACE_UnLock+0x14>)
 8012944:	8ad3      	ldrh	r3, [r2, #22]
 8012946:	3b01      	subs	r3, #1
 8012948:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801294a:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801294e:	4770      	bx	lr
 8012950:	200015c4 	.word	0x200015c4

08012954 <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 8012954:	4b02      	ldr	r3, [pc, #8]	; (8012960 <TRACE_IsLocked+0xc>)
 8012956:	8ad8      	ldrh	r0, [r3, #22]
}
 8012958:	3800      	subs	r0, #0
 801295a:	bf18      	it	ne
 801295c:	2001      	movne	r0, #1
 801295e:	4770      	bx	lr
 8012960:	200015c4 	.word	0x200015c4

08012964 <UTIL_ADV_TRACE_Init>:
{
 8012964:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 8012966:	2218      	movs	r2, #24
 8012968:	2100      	movs	r1, #0
 801296a:	4807      	ldr	r0, [pc, #28]	; (8012988 <UTIL_ADV_TRACE_Init+0x24>)
 801296c:	f000 f98f 	bl	8012c8e <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 8012970:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012974:	2100      	movs	r1, #0
 8012976:	4805      	ldr	r0, [pc, #20]	; (801298c <UTIL_ADV_TRACE_Init+0x28>)
 8012978:	f000 f989 	bl	8012c8e <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801297c:	4b04      	ldr	r3, [pc, #16]	; (8012990 <UTIL_ADV_TRACE_Init+0x2c>)
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	4804      	ldr	r0, [pc, #16]	; (8012994 <UTIL_ADV_TRACE_Init+0x30>)
 8012982:	4798      	blx	r3
}
 8012984:	bd08      	pop	{r3, pc}
 8012986:	bf00      	nop
 8012988:	200015c4 	.word	0x200015c4
 801298c:	200011c4 	.word	0x200011c4
 8012990:	080141d4 	.word	0x080141d4
 8012994:	08012b19 	.word	0x08012b19

08012998 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 8012998:	4b01      	ldr	r3, [pc, #4]	; (80129a0 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 801299a:	6058      	str	r0, [r3, #4]
}
 801299c:	4770      	bx	lr
 801299e:	bf00      	nop
 80129a0:	200015c4 	.word	0x200015c4

080129a4 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 80129a4:	4b01      	ldr	r3, [pc, #4]	; (80129ac <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 80129a6:	7218      	strb	r0, [r3, #8]
}
 80129a8:	4770      	bx	lr
 80129aa:	bf00      	nop
 80129ac:	200015c4 	.word	0x200015c4

080129b0 <TRACE_Send>:
{
 80129b0:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80129b2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80129b6:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 80129b8:	f7ff ffcc 	bl	8012954 <TRACE_IsLocked>
 80129bc:	b118      	cbz	r0, 80129c6 <TRACE_Send+0x16>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80129be:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 80129c2:	2000      	movs	r0, #0
}
 80129c4:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 80129c6:	f7ff ffad 	bl	8012924 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 80129ca:	4b1d      	ldr	r3, [pc, #116]	; (8012a40 <TRACE_Send+0x90>)
 80129cc:	8a1a      	ldrh	r2, [r3, #16]
 80129ce:	8a5b      	ldrh	r3, [r3, #18]
 80129d0:	429a      	cmp	r2, r3
 80129d2:	d02e      	beq.n	8012a32 <TRACE_Send+0x82>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 80129d4:	491a      	ldr	r1, [pc, #104]	; (8012a40 <TRACE_Send+0x90>)
 80129d6:	7889      	ldrb	r1, [r1, #2]
 80129d8:	2901      	cmp	r1, #1
 80129da:	d017      	beq.n	8012a0c <TRACE_Send+0x5c>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 80129dc:	4a18      	ldr	r2, [pc, #96]	; (8012a40 <TRACE_Send+0x90>)
 80129de:	7892      	ldrb	r2, [r2, #2]
 80129e0:	b932      	cbnz	r2, 80129f0 <TRACE_Send+0x40>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80129e2:	4a17      	ldr	r2, [pc, #92]	; (8012a40 <TRACE_Send+0x90>)
 80129e4:	8a12      	ldrh	r2, [r2, #16]
 80129e6:	4293      	cmp	r3, r2
 80129e8:	d91e      	bls.n	8012a28 <TRACE_Send+0x78>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 80129ea:	1a9b      	subs	r3, r3, r2
 80129ec:	4a14      	ldr	r2, [pc, #80]	; (8012a40 <TRACE_Send+0x90>)
 80129ee:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 80129f0:	4e13      	ldr	r6, [pc, #76]	; (8012a40 <TRACE_Send+0x90>)
 80129f2:	8a33      	ldrh	r3, [r6, #16]
 80129f4:	4d13      	ldr	r5, [pc, #76]	; (8012a44 <TRACE_Send+0x94>)
 80129f6:	441d      	add	r5, r3
 80129f8:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 80129fc:	f7ef f856 	bl	8001aac <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8012a00:	4b11      	ldr	r3, [pc, #68]	; (8012a48 <TRACE_Send+0x98>)
 8012a02:	68db      	ldr	r3, [r3, #12]
 8012a04:	8ab1      	ldrh	r1, [r6, #20]
 8012a06:	4628      	mov	r0, r5
 8012a08:	4798      	blx	r3
 8012a0a:	e7db      	b.n	80129c4 <TRACE_Send+0x14>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8012a0c:	480c      	ldr	r0, [pc, #48]	; (8012a40 <TRACE_Send+0x90>)
 8012a0e:	8801      	ldrh	r1, [r0, #0]
 8012a10:	1a8a      	subs	r2, r1, r2
 8012a12:	b292      	uxth	r2, r2
 8012a14:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8012a16:	2102      	movs	r1, #2
 8012a18:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 8012a1a:	2100      	movs	r1, #0
 8012a1c:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8012a1e:	2a00      	cmp	r2, #0
 8012a20:	d1dc      	bne.n	80129dc <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8012a22:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 8012a24:	8201      	strh	r1, [r0, #16]
 8012a26:	e7d9      	b.n	80129dc <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8012a28:	f5c2 6380 	rsb	r3, r2, #1024	; 0x400
 8012a2c:	4a04      	ldr	r2, [pc, #16]	; (8012a40 <TRACE_Send+0x90>)
 8012a2e:	8293      	strh	r3, [r2, #20]
 8012a30:	e7de      	b.n	80129f0 <TRACE_Send+0x40>
      TRACE_UnLock();
 8012a32:	f7ff ff83 	bl	801293c <TRACE_UnLock>
 8012a36:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8012a3a:	2000      	movs	r0, #0
}
 8012a3c:	e7c2      	b.n	80129c4 <TRACE_Send+0x14>
 8012a3e:	bf00      	nop
 8012a40:	200015c4 	.word	0x200015c4
 8012a44:	200011c4 	.word	0x200011c4
 8012a48:	080141d4 	.word	0x080141d4

08012a4c <UTIL_ADV_TRACE_COND_FSend>:
{
 8012a4c:	b408      	push	{r3}
 8012a4e:	b530      	push	{r4, r5, lr}
 8012a50:	b086      	sub	sp, #24
 8012a52:	9c09      	ldr	r4, [sp, #36]	; 0x24
  uint16_t timestamp_size = 0u;
 8012a54:	2300      	movs	r3, #0
 8012a56:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 8012a5a:	4b2c      	ldr	r3, [pc, #176]	; (8012b0c <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8012a5c:	7a1b      	ldrb	r3, [r3, #8]
 8012a5e:	4283      	cmp	r3, r0
 8012a60:	d34d      	bcc.n	8012afe <UTIL_ADV_TRACE_COND_FSend+0xb2>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 8012a62:	4b2a      	ldr	r3, [pc, #168]	; (8012b0c <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8012a64:	68db      	ldr	r3, [r3, #12]
 8012a66:	ea31 0303 	bics.w	r3, r1, r3
 8012a6a:	d14b      	bne.n	8012b04 <UTIL_ADV_TRACE_COND_FSend+0xb8>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 8012a6c:	4b27      	ldr	r3, [pc, #156]	; (8012b0c <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8012a6e:	685b      	ldr	r3, [r3, #4]
 8012a70:	b123      	cbz	r3, 8012a7c <UTIL_ADV_TRACE_COND_FSend+0x30>
 8012a72:	b11a      	cbz	r2, 8012a7c <UTIL_ADV_TRACE_COND_FSend+0x30>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 8012a74:	f10d 0102 	add.w	r1, sp, #2
 8012a78:	a801      	add	r0, sp, #4
 8012a7a:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 8012a7c:	ab0a      	add	r3, sp, #40	; 0x28
 8012a7e:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8012a80:	4622      	mov	r2, r4
 8012a82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8012a86:	4822      	ldr	r0, [pc, #136]	; (8012b10 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8012a88:	f000 fcd0 	bl	801342c <tiny_vsnprintf_like>
 8012a8c:	b285      	uxth	r5, r0
  TRACE_Lock();
 8012a8e:	f7ff ff49 	bl	8012924 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 8012a92:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8012a96:	4428      	add	r0, r5
 8012a98:	4669      	mov	r1, sp
 8012a9a:	b280      	uxth	r0, r0
 8012a9c:	f7ff fefe 	bl	801289c <TRACE_AllocateBufer>
 8012aa0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012aa4:	d026      	beq.n	8012af4 <UTIL_ADV_TRACE_COND_FSend+0xa8>
    for (idx = 0u; idx < timestamp_size; idx++)
 8012aa6:	2300      	movs	r3, #0
 8012aa8:	e00d      	b.n	8012ac6 <UTIL_ADV_TRACE_COND_FSend+0x7a>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 8012aaa:	f8bd 2000 	ldrh.w	r2, [sp]
 8012aae:	f103 0118 	add.w	r1, r3, #24
 8012ab2:	4469      	add	r1, sp
 8012ab4:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 8012ab8:	4916      	ldr	r1, [pc, #88]	; (8012b14 <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 8012aba:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 8012abc:	3201      	adds	r2, #1
 8012abe:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 8012ac2:	3301      	adds	r3, #1
 8012ac4:	b29b      	uxth	r3, r3
 8012ac6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8012aca:	429a      	cmp	r2, r3
 8012acc:	d8ed      	bhi.n	8012aaa <UTIL_ADV_TRACE_COND_FSend+0x5e>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8012ace:	f8bd 0000 	ldrh.w	r0, [sp]
 8012ad2:	9b05      	ldr	r3, [sp, #20]
 8012ad4:	4622      	mov	r2, r4
 8012ad6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8012ada:	4c0e      	ldr	r4, [pc, #56]	; (8012b14 <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 8012adc:	4420      	add	r0, r4
 8012ade:	f000 fca5 	bl	801342c <tiny_vsnprintf_like>
    TRACE_UnLock();
 8012ae2:	f7ff ff2b 	bl	801293c <TRACE_UnLock>
    return TRACE_Send();
 8012ae6:	f7ff ff63 	bl	80129b0 <TRACE_Send>
}
 8012aea:	b006      	add	sp, #24
 8012aec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012af0:	b001      	add	sp, #4
 8012af2:	4770      	bx	lr
  TRACE_UnLock();
 8012af4:	f7ff ff22 	bl	801293c <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 8012af8:	f06f 0002 	mvn.w	r0, #2
 8012afc:	e7f5      	b.n	8012aea <UTIL_ADV_TRACE_COND_FSend+0x9e>
    return UTIL_ADV_TRACE_GIVEUP;
 8012afe:	f06f 0004 	mvn.w	r0, #4
 8012b02:	e7f2      	b.n	8012aea <UTIL_ADV_TRACE_COND_FSend+0x9e>
    return UTIL_ADV_TRACE_REGIONMASKED;
 8012b04:	f06f 0005 	mvn.w	r0, #5
 8012b08:	e7ef      	b.n	8012aea <UTIL_ADV_TRACE_COND_FSend+0x9e>
 8012b0a:	bf00      	nop
 8012b0c:	200015c4 	.word	0x200015c4
 8012b10:	200015dc 	.word	0x200015dc
 8012b14:	200011c4 	.word	0x200011c4

08012b18 <TRACE_TxCpltCallback>:
{
 8012b18:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012b1a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012b1e:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 8012b20:	4b25      	ldr	r3, [pc, #148]	; (8012bb8 <TRACE_TxCpltCallback+0xa0>)
 8012b22:	789b      	ldrb	r3, [r3, #2]
 8012b24:	2b02      	cmp	r3, #2
 8012b26:	d016      	beq.n	8012b56 <TRACE_TxCpltCallback+0x3e>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8012b28:	4a23      	ldr	r2, [pc, #140]	; (8012bb8 <TRACE_TxCpltCallback+0xa0>)
 8012b2a:	8a13      	ldrh	r3, [r2, #16]
 8012b2c:	8a90      	ldrh	r0, [r2, #20]
 8012b2e:	4403      	add	r3, r0
 8012b30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012b34:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 8012b36:	4b20      	ldr	r3, [pc, #128]	; (8012bb8 <TRACE_TxCpltCallback+0xa0>)
 8012b38:	8a1a      	ldrh	r2, [r3, #16]
 8012b3a:	8a5b      	ldrh	r3, [r3, #18]
 8012b3c:	429a      	cmp	r2, r3
 8012b3e:	d003      	beq.n	8012b48 <TRACE_TxCpltCallback+0x30>
 8012b40:	481d      	ldr	r0, [pc, #116]	; (8012bb8 <TRACE_TxCpltCallback+0xa0>)
 8012b42:	8ac0      	ldrh	r0, [r0, #22]
 8012b44:	2801      	cmp	r0, #1
 8012b46:	d00b      	beq.n	8012b60 <TRACE_TxCpltCallback+0x48>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012b48:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 8012b4c:	f7ee ffb4 	bl	8001ab8 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 8012b50:	f7ff fef4 	bl	801293c <TRACE_UnLock>
}
 8012b54:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8012b56:	4b18      	ldr	r3, [pc, #96]	; (8012bb8 <TRACE_TxCpltCallback+0xa0>)
 8012b58:	2200      	movs	r2, #0
 8012b5a:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 8012b5c:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 8012b5e:	e7ea      	b.n	8012b36 <TRACE_TxCpltCallback+0x1e>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8012b60:	4815      	ldr	r0, [pc, #84]	; (8012bb8 <TRACE_TxCpltCallback+0xa0>)
 8012b62:	7880      	ldrb	r0, [r0, #2]
 8012b64:	2801      	cmp	r0, #1
 8012b66:	d014      	beq.n	8012b92 <TRACE_TxCpltCallback+0x7a>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8012b68:	4a13      	ldr	r2, [pc, #76]	; (8012bb8 <TRACE_TxCpltCallback+0xa0>)
 8012b6a:	7892      	ldrb	r2, [r2, #2]
 8012b6c:	b932      	cbnz	r2, 8012b7c <TRACE_TxCpltCallback+0x64>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8012b6e:	4a12      	ldr	r2, [pc, #72]	; (8012bb8 <TRACE_TxCpltCallback+0xa0>)
 8012b70:	8a12      	ldrh	r2, [r2, #16]
 8012b72:	4293      	cmp	r3, r2
 8012b74:	d91b      	bls.n	8012bae <TRACE_TxCpltCallback+0x96>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8012b76:	1a9b      	subs	r3, r3, r2
 8012b78:	4a0f      	ldr	r2, [pc, #60]	; (8012bb8 <TRACE_TxCpltCallback+0xa0>)
 8012b7a:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8012b7c:	4b0e      	ldr	r3, [pc, #56]	; (8012bb8 <TRACE_TxCpltCallback+0xa0>)
 8012b7e:	8a1a      	ldrh	r2, [r3, #16]
 8012b80:	480e      	ldr	r0, [pc, #56]	; (8012bbc <TRACE_TxCpltCallback+0xa4>)
 8012b82:	4410      	add	r0, r2
 8012b84:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8012b88:	4a0d      	ldr	r2, [pc, #52]	; (8012bc0 <TRACE_TxCpltCallback+0xa8>)
 8012b8a:	68d2      	ldr	r2, [r2, #12]
 8012b8c:	8a99      	ldrh	r1, [r3, #20]
 8012b8e:	4790      	blx	r2
 8012b90:	e7e0      	b.n	8012b54 <TRACE_TxCpltCallback+0x3c>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 8012b92:	4c09      	ldr	r4, [pc, #36]	; (8012bb8 <TRACE_TxCpltCallback+0xa0>)
 8012b94:	8820      	ldrh	r0, [r4, #0]
 8012b96:	1a82      	subs	r2, r0, r2
 8012b98:	b292      	uxth	r2, r2
 8012b9a:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8012b9c:	2002      	movs	r0, #2
 8012b9e:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 8012ba0:	2000      	movs	r0, #0
 8012ba2:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8012ba4:	2a00      	cmp	r2, #0
 8012ba6:	d1df      	bne.n	8012b68 <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8012ba8:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 8012baa:	8220      	strh	r0, [r4, #16]
 8012bac:	e7dc      	b.n	8012b68 <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8012bae:	f5c2 6380 	rsb	r3, r2, #1024	; 0x400
 8012bb2:	4a01      	ldr	r2, [pc, #4]	; (8012bb8 <TRACE_TxCpltCallback+0xa0>)
 8012bb4:	8293      	strh	r3, [r2, #20]
 8012bb6:	e7e1      	b.n	8012b7c <TRACE_TxCpltCallback+0x64>
 8012bb8:	200015c4 	.word	0x200015c4
 8012bbc:	200011c4 	.word	0x200011c4
 8012bc0:	080141d4 	.word	0x080141d4

08012bc4 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8012bc4:	2300      	movs	r3, #0
 8012bc6:	4a02      	ldr	r2, [pc, #8]	; (8012bd0 <UTIL_LPM_Init+0xc>)
 8012bc8:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8012bca:	4a02      	ldr	r2, [pc, #8]	; (8012bd4 <UTIL_LPM_Init+0x10>)
 8012bcc:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8012bce:	4770      	bx	lr
 8012bd0:	200017e0 	.word	0x200017e0
 8012bd4:	200017dc 	.word	0x200017dc

08012bd8 <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012bd8:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012bdc:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 8012bde:	b141      	cbz	r1, 8012bf2 <UTIL_LPM_SetStopMode+0x1a>
 8012be0:	2901      	cmp	r1, #1
 8012be2:	d103      	bne.n	8012bec <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8012be4:	4906      	ldr	r1, [pc, #24]	; (8012c00 <UTIL_LPM_SetStopMode+0x28>)
 8012be6:	680a      	ldr	r2, [r1, #0]
 8012be8:	4310      	orrs	r0, r2
 8012bea:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012bec:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8012bf0:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 8012bf2:	4903      	ldr	r1, [pc, #12]	; (8012c00 <UTIL_LPM_SetStopMode+0x28>)
 8012bf4:	680a      	ldr	r2, [r1, #0]
 8012bf6:	ea22 0000 	bic.w	r0, r2, r0
 8012bfa:	6008      	str	r0, [r1, #0]
      break;
 8012bfc:	e7f6      	b.n	8012bec <UTIL_LPM_SetStopMode+0x14>
 8012bfe:	bf00      	nop
 8012c00:	200017e0 	.word	0x200017e0

08012c04 <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012c04:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012c08:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 8012c0a:	b141      	cbz	r1, 8012c1e <UTIL_LPM_SetOffMode+0x1a>
 8012c0c:	2901      	cmp	r1, #1
 8012c0e:	d103      	bne.n	8012c18 <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8012c10:	4906      	ldr	r1, [pc, #24]	; (8012c2c <UTIL_LPM_SetOffMode+0x28>)
 8012c12:	680a      	ldr	r2, [r1, #0]
 8012c14:	4310      	orrs	r0, r2
 8012c16:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012c18:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8012c1c:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 8012c1e:	4903      	ldr	r1, [pc, #12]	; (8012c2c <UTIL_LPM_SetOffMode+0x28>)
 8012c20:	680a      	ldr	r2, [r1, #0]
 8012c22:	ea22 0000 	bic.w	r0, r2, r0
 8012c26:	6008      	str	r0, [r1, #0]
      break;
 8012c28:	e7f6      	b.n	8012c18 <UTIL_LPM_SetOffMode+0x14>
 8012c2a:	bf00      	nop
 8012c2c:	200017dc 	.word	0x200017dc

08012c30 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8012c30:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012c32:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012c36:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8012c38:	4b0c      	ldr	r3, [pc, #48]	; (8012c6c <UTIL_LPM_EnterLowPower+0x3c>)
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	b13b      	cbz	r3, 8012c4e <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8012c3e:	4d0c      	ldr	r5, [pc, #48]	; (8012c70 <UTIL_LPM_EnterLowPower+0x40>)
 8012c40:	682b      	ldr	r3, [r5, #0]
 8012c42:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8012c44:	686b      	ldr	r3, [r5, #4]
 8012c46:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012c48:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8012c4c:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8012c4e:	4b09      	ldr	r3, [pc, #36]	; (8012c74 <UTIL_LPM_EnterLowPower+0x44>)
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	b12b      	cbz	r3, 8012c60 <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 8012c54:	4d06      	ldr	r5, [pc, #24]	; (8012c70 <UTIL_LPM_EnterLowPower+0x40>)
 8012c56:	68ab      	ldr	r3, [r5, #8]
 8012c58:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8012c5a:	68eb      	ldr	r3, [r5, #12]
 8012c5c:	4798      	blx	r3
 8012c5e:	e7f3      	b.n	8012c48 <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 8012c60:	4d03      	ldr	r5, [pc, #12]	; (8012c70 <UTIL_LPM_EnterLowPower+0x40>)
 8012c62:	692b      	ldr	r3, [r5, #16]
 8012c64:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8012c66:	696b      	ldr	r3, [r5, #20]
 8012c68:	4798      	blx	r3
 8012c6a:	e7ed      	b.n	8012c48 <UTIL_LPM_EnterLowPower+0x18>
 8012c6c:	200017e0 	.word	0x200017e0
 8012c70:	08014138 	.word	0x08014138
 8012c74:	200017dc 	.word	0x200017dc

08012c78 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 8012c78:	e004      	b.n	8012c84 <UTIL_MEM_cpy_8+0xc>
    {
        *dst8++ = *src8++;
 8012c7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012c7e:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 8012c82:	461a      	mov	r2, r3
 8012c84:	1e53      	subs	r3, r2, #1
 8012c86:	b29b      	uxth	r3, r3
 8012c88:	2a00      	cmp	r2, #0
 8012c8a:	d1f6      	bne.n	8012c7a <UTIL_MEM_cpy_8+0x2>
    }
}
 8012c8c:	4770      	bx	lr

08012c8e <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 8012c8e:	e002      	b.n	8012c96 <UTIL_MEM_set_8+0x8>
  {
    *dst8++ = value;
 8012c90:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 8012c94:	461a      	mov	r2, r3
 8012c96:	1e53      	subs	r3, r2, #1
 8012c98:	b29b      	uxth	r3, r3
 8012c9a:	2a00      	cmp	r2, #0
 8012c9c:	d1f8      	bne.n	8012c90 <UTIL_MEM_set_8+0x2>
  }
}
 8012c9e:	4770      	bx	lr

08012ca0 <UTIL_SEQ_SetTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012ca0:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012ca4:	b672      	cpsid	i

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 8012ca6:	4a06      	ldr	r2, [pc, #24]	; (8012cc0 <UTIL_SEQ_SetTask+0x20>)
 8012ca8:	6813      	ldr	r3, [r2, #0]
 8012caa:	4303      	orrs	r3, r0
 8012cac:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8012cae:	4a05      	ldr	r2, [pc, #20]	; (8012cc4 <UTIL_SEQ_SetTask+0x24>)
 8012cb0:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 8012cb4:	4318      	orrs	r0, r3
 8012cb6:	f842 0031 	str.w	r0, [r2, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012cba:	f38c 8810 	msr	PRIMASK, ip

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 8012cbe:	4770      	bx	lr
 8012cc0:	20001808 	.word	0x20001808
 8012cc4:	20001800 	.word	0x20001800

08012cc8 <UTIL_SEQ_PreIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8012cc8:	4770      	bx	lr

08012cca <UTIL_SEQ_PostIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8012cca:	4770      	bx	lr

08012ccc <SEQ_BitPosition>:
uint8_t SEQ_BitPosition(uint32_t Value)
{
uint8_t n = 0U;
uint32_t lvalue = Value;

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8012ccc:	0c03      	lsrs	r3, r0, #16
 8012cce:	041b      	lsls	r3, r3, #16
 8012cd0:	b9b3      	cbnz	r3, 8012d00 <SEQ_BitPosition+0x34>
 8012cd2:	0400      	lsls	r0, r0, #16
 8012cd4:	2310      	movs	r3, #16
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8012cd6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012cda:	d102      	bne.n	8012ce2 <SEQ_BitPosition+0x16>
 8012cdc:	3308      	adds	r3, #8
 8012cde:	b2db      	uxtb	r3, r3
 8012ce0:	0200      	lsls	r0, r0, #8
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8012ce2:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012ce6:	d102      	bne.n	8012cee <SEQ_BitPosition+0x22>
 8012ce8:	3304      	adds	r3, #4
 8012cea:	b2db      	uxtb	r3, r3
 8012cec:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8012cee:	0f00      	lsrs	r0, r0, #28
 8012cf0:	4a04      	ldr	r2, [pc, #16]	; (8012d04 <SEQ_BitPosition+0x38>)
 8012cf2:	5c10      	ldrb	r0, [r2, r0]
 8012cf4:	4418      	add	r0, r3
 8012cf6:	b2c0      	uxtb	r0, r0

  return (uint8_t)(31U-n);
 8012cf8:	f1c0 001f 	rsb	r0, r0, #31
}
 8012cfc:	b2c0      	uxtb	r0, r0
 8012cfe:	4770      	bx	lr
uint8_t n = 0U;
 8012d00:	2300      	movs	r3, #0
 8012d02:	e7e8      	b.n	8012cd6 <SEQ_BitPosition+0xa>
 8012d04:	08014f88 	.word	0x08014f88

08012d08 <UTIL_SEQ_Run>:
{
 8012d08:	b538      	push	{r3, r4, r5, lr}
  super_mask_backup = SuperMask;
 8012d0a:	4b43      	ldr	r3, [pc, #268]	; (8012e18 <UTIL_SEQ_Run+0x110>)
 8012d0c:	681c      	ldr	r4, [r3, #0]
  SuperMask &= Mask_bm;
 8012d0e:	4020      	ands	r0, r4
 8012d10:	6018      	str	r0, [r3, #0]
  local_taskset = TaskSet;
 8012d12:	4b42      	ldr	r3, [pc, #264]	; (8012e1c <UTIL_SEQ_Run+0x114>)
 8012d14:	6819      	ldr	r1, [r3, #0]
  local_evtset = EvtSet;
 8012d16:	4b42      	ldr	r3, [pc, #264]	; (8012e20 <UTIL_SEQ_Run+0x118>)
 8012d18:	681b      	ldr	r3, [r3, #0]
  local_taskmask = TaskMask;
 8012d1a:	4a42      	ldr	r2, [pc, #264]	; (8012e24 <UTIL_SEQ_Run+0x11c>)
 8012d1c:	6810      	ldr	r0, [r2, #0]
  local_evtwaited =  EvtWaited;
 8012d1e:	4a42      	ldr	r2, [pc, #264]	; (8012e28 <UTIL_SEQ_Run+0x120>)
 8012d20:	6812      	ldr	r2, [r2, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8012d22:	e030      	b.n	8012d86 <UTIL_SEQ_Run+0x7e>
      counter++;
 8012d24:	3301      	adds	r3, #1
 8012d26:	e035      	b.n	8012d94 <UTIL_SEQ_Run+0x8c>
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8012d28:	4d40      	ldr	r5, [pc, #256]	; (8012e2c <UTIL_SEQ_Run+0x124>)
 8012d2a:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8012d2e:	6868      	ldr	r0, [r5, #4]
 8012d30:	4010      	ands	r0, r2
 8012d32:	f7ff ffcb 	bl	8012ccc <SEQ_BitPosition>
 8012d36:	493e      	ldr	r1, [pc, #248]	; (8012e30 <UTIL_SEQ_Run+0x128>)
 8012d38:	6008      	str	r0, [r1, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8012d3a:	686a      	ldr	r2, [r5, #4]
 8012d3c:	2301      	movs	r3, #1
 8012d3e:	fa03 f000 	lsl.w	r0, r3, r0
 8012d42:	ea22 0000 	bic.w	r0, r2, r0
 8012d46:	6068      	str	r0, [r5, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012d48:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012d4c:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 8012d4e:	680a      	ldr	r2, [r1, #0]
 8012d50:	fa03 f202 	lsl.w	r2, r3, r2
 8012d54:	ea6f 0c02 	mvn.w	ip, r2
 8012d58:	4830      	ldr	r0, [pc, #192]	; (8012e1c <UTIL_SEQ_Run+0x114>)
 8012d5a:	6801      	ldr	r1, [r0, #0]
 8012d5c:	ea21 0202 	bic.w	r2, r1, r2
 8012d60:	6002      	str	r2, [r0, #0]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d12d      	bne.n	8012dc2 <UTIL_SEQ_Run+0xba>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012d66:	f385 8810 	msr	PRIMASK, r5
    TaskCb[CurrentTaskIdx]( );
 8012d6a:	4b31      	ldr	r3, [pc, #196]	; (8012e30 <UTIL_SEQ_Run+0x128>)
 8012d6c:	681a      	ldr	r2, [r3, #0]
 8012d6e:	4b31      	ldr	r3, [pc, #196]	; (8012e34 <UTIL_SEQ_Run+0x12c>)
 8012d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d74:	4798      	blx	r3
    local_taskset = TaskSet;
 8012d76:	4b29      	ldr	r3, [pc, #164]	; (8012e1c <UTIL_SEQ_Run+0x114>)
 8012d78:	6819      	ldr	r1, [r3, #0]
    local_evtset = EvtSet;
 8012d7a:	4b29      	ldr	r3, [pc, #164]	; (8012e20 <UTIL_SEQ_Run+0x118>)
 8012d7c:	681b      	ldr	r3, [r3, #0]
    local_taskmask = TaskMask;
 8012d7e:	4a29      	ldr	r2, [pc, #164]	; (8012e24 <UTIL_SEQ_Run+0x11c>)
 8012d80:	6810      	ldr	r0, [r2, #0]
    local_evtwaited = EvtWaited;
 8012d82:	4a29      	ldr	r2, [pc, #164]	; (8012e28 <UTIL_SEQ_Run+0x120>)
 8012d84:	6812      	ldr	r2, [r2, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8012d86:	4001      	ands	r1, r0
 8012d88:	4d23      	ldr	r5, [pc, #140]	; (8012e18 <UTIL_SEQ_Run+0x110>)
 8012d8a:	682d      	ldr	r5, [r5, #0]
 8012d8c:	4229      	tst	r1, r5
 8012d8e:	d021      	beq.n	8012dd4 <UTIL_SEQ_Run+0xcc>
 8012d90:	4013      	ands	r3, r2
 8012d92:	d11f      	bne.n	8012dd4 <UTIL_SEQ_Run+0xcc>
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8012d94:	4a25      	ldr	r2, [pc, #148]	; (8012e2c <UTIL_SEQ_Run+0x124>)
 8012d96:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8012d9a:	4002      	ands	r2, r0
 8012d9c:	422a      	tst	r2, r5
 8012d9e:	d0c1      	beq.n	8012d24 <UTIL_SEQ_Run+0x1c>
    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8012da0:	4922      	ldr	r1, [pc, #136]	; (8012e2c <UTIL_SEQ_Run+0x124>)
 8012da2:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8012da6:	4002      	ands	r2, r0
 8012da8:	402a      	ands	r2, r5
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8012daa:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012dae:	6849      	ldr	r1, [r1, #4]
 8012db0:	4211      	tst	r1, r2
 8012db2:	d1b9      	bne.n	8012d28 <UTIL_SEQ_Run+0x20>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8012db4:	491d      	ldr	r1, [pc, #116]	; (8012e2c <UTIL_SEQ_Run+0x124>)
 8012db6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012dba:	f04f 30ff 	mov.w	r0, #4294967295
 8012dbe:	6048      	str	r0, [r1, #4]
 8012dc0:	e7b2      	b.n	8012d28 <UTIL_SEQ_Run+0x20>
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8012dc2:	3b01      	subs	r3, #1
 8012dc4:	4919      	ldr	r1, [pc, #100]	; (8012e2c <UTIL_SEQ_Run+0x124>)
 8012dc6:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8012dca:	ea0c 0202 	and.w	r2, ip, r2
 8012dce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8012dd2:	e7c6      	b.n	8012d62 <UTIL_SEQ_Run+0x5a>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8012dd4:	4b16      	ldr	r3, [pc, #88]	; (8012e30 <UTIL_SEQ_Run+0x128>)
 8012dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8012dda:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8012ddc:	f7ff ff74 	bl	8012cc8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012de0:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012de4:	b672      	cpsid	i
  local_taskset = TaskSet;
 8012de6:	4b0d      	ldr	r3, [pc, #52]	; (8012e1c <UTIL_SEQ_Run+0x114>)
 8012de8:	681b      	ldr	r3, [r3, #0]
  local_evtset = EvtSet;
 8012dea:	4a0d      	ldr	r2, [pc, #52]	; (8012e20 <UTIL_SEQ_Run+0x118>)
 8012dec:	6811      	ldr	r1, [r2, #0]
  local_taskmask = TaskMask;
 8012dee:	4a0d      	ldr	r2, [pc, #52]	; (8012e24 <UTIL_SEQ_Run+0x11c>)
 8012df0:	6812      	ldr	r2, [r2, #0]
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8012df2:	4013      	ands	r3, r2
 8012df4:	4a08      	ldr	r2, [pc, #32]	; (8012e18 <UTIL_SEQ_Run+0x110>)
 8012df6:	6812      	ldr	r2, [r2, #0]
 8012df8:	4213      	tst	r3, r2
 8012dfa:	d103      	bne.n	8012e04 <UTIL_SEQ_Run+0xfc>
    if ((local_evtset & EvtWaited)== 0U)
 8012dfc:	4b0a      	ldr	r3, [pc, #40]	; (8012e28 <UTIL_SEQ_Run+0x120>)
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	420b      	tst	r3, r1
 8012e02:	d006      	beq.n	8012e12 <UTIL_SEQ_Run+0x10a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012e04:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 8012e08:	f7ff ff5f 	bl	8012cca <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 8012e0c:	4b02      	ldr	r3, [pc, #8]	; (8012e18 <UTIL_SEQ_Run+0x110>)
 8012e0e:	601c      	str	r4, [r3, #0]
}
 8012e10:	bd38      	pop	{r3, r4, r5, pc}
      UTIL_SEQ_Idle( );
 8012e12:	f7ee fdd5 	bl	80019c0 <UTIL_SEQ_Idle>
 8012e16:	e7f5      	b.n	8012e04 <UTIL_SEQ_Run+0xfc>
 8012e18:	20000110 	.word	0x20000110
 8012e1c:	20001808 	.word	0x20001808
 8012e20:	200017e8 	.word	0x200017e8
 8012e24:	20000114 	.word	0x20000114
 8012e28:	200017ec 	.word	0x200017ec
 8012e2c:	20001800 	.word	0x20001800
 8012e30:	200017e4 	.word	0x200017e4
 8012e34:	200017f0 	.word	0x200017f0

08012e38 <UTIL_SEQ_RegTask>:
{
 8012e38:	b538      	push	{r3, r4, r5, lr}
 8012e3a:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012e3c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012e40:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8012e42:	f7ff ff43 	bl	8012ccc <SEQ_BitPosition>
 8012e46:	4b03      	ldr	r3, [pc, #12]	; (8012e54 <UTIL_SEQ_RegTask+0x1c>)
 8012e48:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012e4c:	f385 8810 	msr	PRIMASK, r5
}
 8012e50:	bd38      	pop	{r3, r4, r5, pc}
 8012e52:	bf00      	nop
 8012e54:	200017f0 	.word	0x200017f0

08012e58 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8012e58:	b082      	sub	sp, #8
 8012e5a:	b082      	sub	sp, #8
 8012e5c:	f10d 0c08 	add.w	ip, sp, #8
 8012e60:	e90c 0006 	stmdb	ip, {r1, r2}
 8012e64:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 8012e66:	2200      	movs	r2, #0
 8012e68:	6002      	str	r2, [r0, #0]
 8012e6a:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds + b.Seconds;
 8012e6c:	440b      	add	r3, r1
 8012e6e:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8012e70:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8012e74:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8012e78:	440a      	add	r2, r1
 8012e7a:	b291      	uxth	r1, r2
 8012e7c:	b212      	sxth	r2, r2
 8012e7e:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 8012e80:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8012e84:	db04      	blt.n	8012e90 <SysTimeAdd+0x38>
  {
    c.Seconds++;
 8012e86:	3301      	adds	r3, #1
 8012e88:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 8012e8a:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 8012e8e:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 8012e90:	b002      	add	sp, #8
 8012e92:	b002      	add	sp, #8
 8012e94:	4770      	bx	lr

08012e96 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 8012e96:	b082      	sub	sp, #8
 8012e98:	b082      	sub	sp, #8
 8012e9a:	f10d 0c08 	add.w	ip, sp, #8
 8012e9e:	e90c 0006 	stmdb	ip, {r1, r2}
 8012ea2:	9303      	str	r3, [sp, #12]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 8012ea4:	2200      	movs	r2, #0
 8012ea6:	6002      	str	r2, [r0, #0]
 8012ea8:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds - b.Seconds;
 8012eaa:	1acb      	subs	r3, r1, r3
 8012eac:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8012eae:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8012eb2:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8012eb6:	1a52      	subs	r2, r2, r1
 8012eb8:	b291      	uxth	r1, r2
 8012eba:	b212      	sxth	r2, r2
 8012ebc:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds < 0 )
 8012ebe:	2a00      	cmp	r2, #0
 8012ec0:	db02      	blt.n	8012ec8 <SysTimeSub+0x32>
  {
    c.Seconds--;
    c.SubSeconds += 1000;
  }
  return c;
}
 8012ec2:	b002      	add	sp, #8
 8012ec4:	b002      	add	sp, #8
 8012ec6:	4770      	bx	lr
    c.Seconds--;
 8012ec8:	3b01      	subs	r3, #1
 8012eca:	6003      	str	r3, [r0, #0]
    c.SubSeconds += 1000;
 8012ecc:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 8012ed0:	8081      	strh	r1, [r0, #4]
  return c;
 8012ed2:	e7f6      	b.n	8012ec2 <SysTimeSub+0x2c>

08012ed4 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8012ed4:	b530      	push	{r4, r5, lr}
 8012ed6:	b089      	sub	sp, #36	; 0x24
 8012ed8:	ac02      	add	r4, sp, #8
 8012eda:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8012ede:	2300      	movs	r3, #0
 8012ee0:	9304      	str	r3, [sp, #16]
 8012ee2:	f8ad 3014 	strh.w	r3, [sp, #20]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8012ee6:	4d0b      	ldr	r5, [pc, #44]	; (8012f14 <SysTimeSet+0x40>)
 8012ee8:	692b      	ldr	r3, [r5, #16]
 8012eea:	a805      	add	r0, sp, #20
 8012eec:	4798      	blx	r3
 8012eee:	4603      	mov	r3, r0
 8012ef0:	9004      	str	r0, [sp, #16]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 8012ef2:	9a05      	ldr	r2, [sp, #20]
 8012ef4:	9200      	str	r2, [sp, #0]
 8012ef6:	e894 0006 	ldmia.w	r4, {r1, r2}
 8012efa:	a806      	add	r0, sp, #24
 8012efc:	f7ff ffcb 	bl	8012e96 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 8012f00:	682b      	ldr	r3, [r5, #0]
 8012f02:	9806      	ldr	r0, [sp, #24]
 8012f04:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 8012f06:	68ab      	ldr	r3, [r5, #8]
 8012f08:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8012f0c:	4798      	blx	r3
}
 8012f0e:	b009      	add	sp, #36	; 0x24
 8012f10:	bd30      	pop	{r4, r5, pc}
 8012f12:	bf00      	nop
 8012f14:	08014194 	.word	0x08014194

08012f18 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8012f18:	b530      	push	{r4, r5, lr}
 8012f1a:	b087      	sub	sp, #28
 8012f1c:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8012f1e:	2300      	movs	r3, #0
 8012f20:	9304      	str	r3, [sp, #16]
 8012f22:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 8012f26:	6003      	str	r3, [r0, #0]
 8012f28:	8083      	strh	r3, [r0, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8012f2a:	4d0b      	ldr	r5, [pc, #44]	; (8012f58 <SysTimeGet+0x40>)
 8012f2c:	692b      	ldr	r3, [r5, #16]
 8012f2e:	a805      	add	r0, sp, #20
 8012f30:	4798      	blx	r3
 8012f32:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8012f34:	68eb      	ldr	r3, [r5, #12]
 8012f36:	4798      	blx	r3
 8012f38:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8012f3c:	686b      	ldr	r3, [r5, #4]
 8012f3e:	4798      	blx	r3
 8012f40:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 8012f42:	9b05      	ldr	r3, [sp, #20]
 8012f44:	9300      	str	r3, [sp, #0]
 8012f46:	9b04      	ldr	r3, [sp, #16]
 8012f48:	aa02      	add	r2, sp, #8
 8012f4a:	ca06      	ldmia	r2, {r1, r2}
 8012f4c:	4620      	mov	r0, r4
 8012f4e:	f7ff ff83 	bl	8012e58 <SysTimeAdd>

  return sysTime;
}
 8012f52:	4620      	mov	r0, r4
 8012f54:	b007      	add	sp, #28
 8012f56:	bd30      	pop	{r4, r5, pc}
 8012f58:	08014194 	.word	0x08014194

08012f5c <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 8012f5c:	b530      	push	{r4, r5, lr}
 8012f5e:	b083      	sub	sp, #12
 8012f60:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8012f62:	2300      	movs	r3, #0
 8012f64:	9300      	str	r3, [sp, #0]
 8012f66:	f8ad 3004 	strh.w	r3, [sp, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8012f6a:	4b06      	ldr	r3, [pc, #24]	; (8012f84 <SysTimeGetMcuTime+0x28>)
 8012f6c:	691b      	ldr	r3, [r3, #16]
 8012f6e:	466d      	mov	r5, sp
 8012f70:	a801      	add	r0, sp, #4
 8012f72:	4798      	blx	r3
 8012f74:	9000      	str	r0, [sp, #0]

  return calendarTime;
 8012f76:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012f7a:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8012f7e:	4620      	mov	r0, r4
 8012f80:	b003      	add	sp, #12
 8012f82:	bd30      	pop	{r4, r5, pc}
 8012f84:	08014194 	.word	0x08014194

08012f88 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 8012f88:	b530      	push	{r4, r5, lr}
 8012f8a:	b089      	sub	sp, #36	; 0x24
 8012f8c:	ac02      	add	r4, sp, #8
 8012f8e:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8012f92:	4d0c      	ldr	r5, [pc, #48]	; (8012fc4 <SysTimeToMs+0x3c>)
 8012f94:	68eb      	ldr	r3, [r5, #12]
 8012f96:	4798      	blx	r3
 8012f98:	f8ad 001c 	strh.w	r0, [sp, #28]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8012f9c:	686b      	ldr	r3, [r5, #4]
 8012f9e:	4798      	blx	r3
 8012fa0:	4603      	mov	r3, r0
 8012fa2:	9006      	str	r0, [sp, #24]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 8012fa4:	9a07      	ldr	r2, [sp, #28]
 8012fa6:	9200      	str	r2, [sp, #0]
 8012fa8:	e894 0006 	ldmia.w	r4, {r1, r2}
 8012fac:	a804      	add	r0, sp, #16
 8012fae:	f7ff ff72 	bl	8012e96 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 8012fb2:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
}
 8012fb6:	9a04      	ldr	r2, [sp, #16]
 8012fb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012fbc:	fb00 3002 	mla	r0, r0, r2, r3
 8012fc0:	b009      	add	sp, #36	; 0x24
 8012fc2:	bd30      	pop	{r4, r5, pc}
 8012fc4:	08014194 	.word	0x08014194

08012fc8 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 8012fc8:	b530      	push	{r4, r5, lr}
 8012fca:	b087      	sub	sp, #28
 8012fcc:	4604      	mov	r4, r0
  uint32_t seconds = timeMs / 1000;
 8012fce:	4b12      	ldr	r3, [pc, #72]	; (8013018 <SysTimeFromMs+0x50>)
 8012fd0:	fba3 2301 	umull	r2, r3, r3, r1
 8012fd4:	099b      	lsrs	r3, r3, #6
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8012fd6:	9304      	str	r3, [sp, #16]
 8012fd8:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8012fdc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8012fe0:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
 8012fe4:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t DeltaTime = { 0 };
 8012fe8:	2300      	movs	r3, #0
 8012fea:	9302      	str	r3, [sp, #8]
 8012fec:	9303      	str	r3, [sp, #12]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8012fee:	4d0b      	ldr	r5, [pc, #44]	; (801301c <SysTimeFromMs+0x54>)
 8012ff0:	68eb      	ldr	r3, [r5, #12]
 8012ff2:	4798      	blx	r3
 8012ff4:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8012ff8:	686b      	ldr	r3, [r5, #4]
 8012ffa:	4798      	blx	r3
 8012ffc:	4603      	mov	r3, r0
 8012ffe:	9002      	str	r0, [sp, #8]
  return SysTimeAdd( sysTime, DeltaTime );
 8013000:	9a03      	ldr	r2, [sp, #12]
 8013002:	9200      	str	r2, [sp, #0]
 8013004:	aa06      	add	r2, sp, #24
 8013006:	e912 0006 	ldmdb	r2, {r1, r2}
 801300a:	4620      	mov	r0, r4
 801300c:	f7ff ff24 	bl	8012e58 <SysTimeAdd>
}
 8013010:	4620      	mov	r0, r4
 8013012:	b007      	add	sp, #28
 8013014:	bd30      	pop	{r4, r5, pc}
 8013016:	bf00      	nop
 8013018:	10624dd3 	.word	0x10624dd3
 801301c:	08014194 	.word	0x08014194

08013020 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 8013020:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 8013022:	4b03      	ldr	r3, [pc, #12]	; (8013030 <UTIL_TIMER_Init+0x10>)
 8013024:	2200      	movs	r2, #0
 8013026:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 8013028:	4b02      	ldr	r3, [pc, #8]	; (8013034 <UTIL_TIMER_Init+0x14>)
 801302a:	681b      	ldr	r3, [r3, #0]
 801302c:	4798      	blx	r3
}
 801302e:	bd08      	pop	{r3, pc}
 8013030:	2000180c 	.word	0x2000180c
 8013034:	080141a8 	.word	0x080141a8

08013038 <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 8013038:	b1a8      	cbz	r0, 8013066 <UTIL_TIMER_Create+0x2e>
{
 801303a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801303c:	4617      	mov	r7, r2
 801303e:	461e      	mov	r6, r3
 8013040:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 8013042:	b193      	cbz	r3, 801306a <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 8013044:	2500      	movs	r5, #0
 8013046:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8013048:	4b09      	ldr	r3, [pc, #36]	; (8013070 <UTIL_TIMER_Create+0x38>)
 801304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801304c:	4608      	mov	r0, r1
 801304e:	4798      	blx	r3
 8013050:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 8013052:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 8013054:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8013056:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 8013058:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 801305a:	9b06      	ldr	r3, [sp, #24]
 801305c:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 801305e:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 8013060:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 8013062:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 8013064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 8013066:	2001      	movs	r0, #1
}
 8013068:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 801306a:	2001      	movs	r0, #1
 801306c:	e7fa      	b.n	8013064 <UTIL_TIMER_Create+0x2c>
 801306e:	bf00      	nop
 8013070:	080141a8 	.word	0x080141a8

08013074 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8013074:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 8013076:	4c03      	ldr	r4, [pc, #12]	; (8013084 <UTIL_TIMER_GetCurrentTime+0x10>)
 8013078:	69e3      	ldr	r3, [r4, #28]
 801307a:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 801307c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801307e:	4798      	blx	r3
}
 8013080:	bd10      	pop	{r4, pc}
 8013082:	bf00      	nop
 8013084:	080141a8 	.word	0x080141a8

08013088 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8013088:	b570      	push	{r4, r5, r6, lr}
 801308a:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801308c:	4d05      	ldr	r5, [pc, #20]	; (80130a4 <UTIL_TIMER_GetElapsedTime+0x1c>)
 801308e:	69eb      	ldr	r3, [r5, #28]
 8013090:	4798      	blx	r3
 8013092:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8013094:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013096:	4630      	mov	r0, r6
 8013098:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801309a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 801309c:	1a20      	subs	r0, r4, r0
 801309e:	4798      	blx	r3
}
 80130a0:	bd70      	pop	{r4, r5, r6, pc}
 80130a2:	bf00      	nop
 80130a4:	080141a8 	.word	0x080141a8

080130a8 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80130a8:	4b05      	ldr	r3, [pc, #20]	; (80130c0 <TimerExists+0x18>)
 80130aa:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 80130ac:	e000      	b.n	80130b0 <TimerExists+0x8>
  {
    if( cur == TimerObject )
    {
      return true;
    }
    cur = cur->Next;
 80130ae:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 80130b0:	b11b      	cbz	r3, 80130ba <TimerExists+0x12>
    if( cur == TimerObject )
 80130b2:	4283      	cmp	r3, r0
 80130b4:	d1fb      	bne.n	80130ae <TimerExists+0x6>
      return true;
 80130b6:	2001      	movs	r0, #1
  }
  return false;
}
 80130b8:	4770      	bx	lr
  return false;
 80130ba:	2000      	movs	r0, #0
 80130bc:	4770      	bx	lr
 80130be:	bf00      	nop
 80130c0:	2000180c 	.word	0x2000180c

080130c4 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 80130c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130c6:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 80130c8:	4e09      	ldr	r6, [pc, #36]	; (80130f0 <TimerSetTimeout+0x2c>)
 80130ca:	6a33      	ldr	r3, [r6, #32]
 80130cc:	4798      	blx	r3
 80130ce:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 80130d0:	2301      	movs	r3, #1
 80130d2:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 80130d4:	6827      	ldr	r7, [r4, #0]
 80130d6:	69b6      	ldr	r6, [r6, #24]
 80130d8:	47b0      	blx	r6
 80130da:	4428      	add	r0, r5
 80130dc:	4287      	cmp	r7, r0
 80130de:	d202      	bcs.n	80130e6 <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 80130e0:	47b0      	blx	r6
 80130e2:	4405      	add	r5, r0
 80130e4:	6025      	str	r5, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 80130e6:	4b02      	ldr	r3, [pc, #8]	; (80130f0 <TimerSetTimeout+0x2c>)
 80130e8:	689b      	ldr	r3, [r3, #8]
 80130ea:	6820      	ldr	r0, [r4, #0]
 80130ec:	4798      	blx	r3
}
 80130ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80130f0:	080141a8 	.word	0x080141a8

080130f4 <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 80130f4:	b368      	cbz	r0, 8013152 <UTIL_TIMER_Stop+0x5e>
{
 80130f6:	b510      	push	{r4, lr}
 80130f8:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80130fa:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80130fe:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8013100:	4b15      	ldr	r3, [pc, #84]	; (8013158 <UTIL_TIMER_Stop+0x64>)
 8013102:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 8013104:	2301      	movs	r3, #1
 8013106:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 8013108:	b1e1      	cbz	r1, 8013144 <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 801310a:	2300      	movs	r3, #0
 801310c:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801310e:	4288      	cmp	r0, r1
 8013110:	d006      	beq.n	8013120 <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 8013112:	460b      	mov	r3, r1
        while( cur != NULL )
 8013114:	b1b3      	cbz	r3, 8013144 <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 8013116:	4293      	cmp	r3, r2
 8013118:	d011      	beq.n	801313e <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 801311a:	4619      	mov	r1, r3
            cur = cur->Next;
 801311c:	695b      	ldr	r3, [r3, #20]
 801311e:	e7f9      	b.n	8013114 <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 8013120:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 8013122:	6948      	ldr	r0, [r1, #20]
 8013124:	b120      	cbz	r0, 8013130 <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 8013126:	4b0c      	ldr	r3, [pc, #48]	; (8013158 <UTIL_TIMER_Stop+0x64>)
 8013128:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 801312a:	f7ff ffcb 	bl	80130c4 <TimerSetTimeout>
 801312e:	e009      	b.n	8013144 <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 8013130:	4b0a      	ldr	r3, [pc, #40]	; (801315c <UTIL_TIMER_Stop+0x68>)
 8013132:	68db      	ldr	r3, [r3, #12]
 8013134:	4798      	blx	r3
            TimerListHead = NULL;
 8013136:	4b08      	ldr	r3, [pc, #32]	; (8013158 <UTIL_TIMER_Stop+0x64>)
 8013138:	2200      	movs	r2, #0
 801313a:	601a      	str	r2, [r3, #0]
 801313c:	e002      	b.n	8013144 <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 801313e:	695b      	ldr	r3, [r3, #20]
 8013140:	b123      	cbz	r3, 801314c <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 8013142:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013144:	f384 8810 	msr	PRIMASK, r4
}
 8013148:	2000      	movs	r0, #0
}
 801314a:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 801314c:	2300      	movs	r3, #0
 801314e:	614b      	str	r3, [r1, #20]
 8013150:	e7f8      	b.n	8013144 <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 8013152:	2001      	movs	r0, #1
}
 8013154:	4770      	bx	lr
 8013156:	bf00      	nop
 8013158:	2000180c 	.word	0x2000180c
 801315c:	080141a8 	.word	0x080141a8

08013160 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8013160:	4b09      	ldr	r3, [pc, #36]	; (8013188 <TimerInsertTimer+0x28>)
 8013162:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8013164:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 8013166:	e001      	b.n	801316c <TimerInsertTimer+0xc>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
    {
        cur = next;
 8013168:	461a      	mov	r2, r3
        next = next->Next;
 801316a:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 801316c:	6951      	ldr	r1, [r2, #20]
 801316e:	b139      	cbz	r1, 8013180 <TimerInsertTimer+0x20>
    if( TimerObject->Timestamp  > next->Timestamp )
 8013170:	6819      	ldr	r1, [r3, #0]
 8013172:	f8d0 c000 	ldr.w	ip, [r0]
 8013176:	458c      	cmp	ip, r1
 8013178:	d8f6      	bhi.n	8013168 <TimerInsertTimer+0x8>
    }
    else
    {
        cur->Next = TimerObject;
 801317a:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 801317c:	6143      	str	r3, [r0, #20]
        return;
 801317e:	4770      	bx	lr

    }
  }
  cur->Next = TimerObject;
 8013180:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 8013182:	2300      	movs	r3, #0
 8013184:	6143      	str	r3, [r0, #20]
}
 8013186:	4770      	bx	lr
 8013188:	2000180c 	.word	0x2000180c

0801318c <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801318c:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801318e:	4b05      	ldr	r3, [pc, #20]	; (80131a4 <TimerInsertNewHeadTimer+0x18>)
 8013190:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 8013192:	b10b      	cbz	r3, 8013198 <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 8013194:	2200      	movs	r2, #0
 8013196:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 8013198:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 801319a:	4b02      	ldr	r3, [pc, #8]	; (80131a4 <TimerInsertNewHeadTimer+0x18>)
 801319c:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 801319e:	f7ff ff91 	bl	80130c4 <TimerSetTimeout>
}
 80131a2:	bd08      	pop	{r3, pc}
 80131a4:	2000180c 	.word	0x2000180c

080131a8 <UTIL_TIMER_Start>:
{
 80131a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 80131aa:	2800      	cmp	r0, #0
 80131ac:	d036      	beq.n	801321c <UTIL_TIMER_Start+0x74>
 80131ae:	4604      	mov	r4, r0
 80131b0:	f7ff ff7a 	bl	80130a8 <TimerExists>
 80131b4:	2800      	cmp	r0, #0
 80131b6:	d134      	bne.n	8013222 <UTIL_TIMER_Start+0x7a>
 80131b8:	7a65      	ldrb	r5, [r4, #9]
 80131ba:	2d00      	cmp	r5, #0
 80131bc:	d133      	bne.n	8013226 <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80131be:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80131c2:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 80131c4:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 80131c6:	4b19      	ldr	r3, [pc, #100]	; (801322c <UTIL_TIMER_Start+0x84>)
 80131c8:	6a1b      	ldr	r3, [r3, #32]
 80131ca:	4798      	blx	r3
    if( ticks < minValue )
 80131cc:	4287      	cmp	r7, r0
 80131ce:	d300      	bcc.n	80131d2 <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 80131d0:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 80131d2:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 80131d4:	2300      	movs	r3, #0
 80131d6:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 80131d8:	2201      	movs	r2, #1
 80131da:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 80131dc:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 80131de:	4b14      	ldr	r3, [pc, #80]	; (8013230 <UTIL_TIMER_Start+0x88>)
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	b183      	cbz	r3, 8013206 <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 80131e4:	4b11      	ldr	r3, [pc, #68]	; (801322c <UTIL_TIMER_Start+0x84>)
 80131e6:	699b      	ldr	r3, [r3, #24]
 80131e8:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 80131ea:	6823      	ldr	r3, [r4, #0]
 80131ec:	4418      	add	r0, r3
 80131ee:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 80131f0:	4b0f      	ldr	r3, [pc, #60]	; (8013230 <UTIL_TIMER_Start+0x88>)
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	4298      	cmp	r0, r3
 80131f8:	d20c      	bcs.n	8013214 <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 80131fa:	4620      	mov	r0, r4
 80131fc:	f7ff ffc6 	bl	801318c <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013200:	f386 8810 	msr	PRIMASK, r6
}
 8013204:	e00b      	b.n	801321e <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 8013206:	4b09      	ldr	r3, [pc, #36]	; (801322c <UTIL_TIMER_Start+0x84>)
 8013208:	691b      	ldr	r3, [r3, #16]
 801320a:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801320c:	4620      	mov	r0, r4
 801320e:	f7ff ffbd 	bl	801318c <TimerInsertNewHeadTimer>
 8013212:	e7f5      	b.n	8013200 <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 8013214:	4620      	mov	r0, r4
 8013216:	f7ff ffa3 	bl	8013160 <TimerInsertTimer>
 801321a:	e7f1      	b.n	8013200 <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 801321c:	2501      	movs	r5, #1
}
 801321e:	4628      	mov	r0, r5
 8013220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 8013222:	2501      	movs	r5, #1
 8013224:	e7fb      	b.n	801321e <UTIL_TIMER_Start+0x76>
 8013226:	2501      	movs	r5, #1
 8013228:	e7f9      	b.n	801321e <UTIL_TIMER_Start+0x76>
 801322a:	bf00      	nop
 801322c:	080141a8 	.word	0x080141a8
 8013230:	2000180c 	.word	0x2000180c

08013234 <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 8013234:	b198      	cbz	r0, 801325e <UTIL_TIMER_SetPeriod+0x2a>
{
 8013236:	b510      	push	{r4, lr}
 8013238:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801323a:	4b0a      	ldr	r3, [pc, #40]	; (8013264 <UTIL_TIMER_SetPeriod+0x30>)
 801323c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801323e:	4608      	mov	r0, r1
 8013240:	4798      	blx	r3
 8013242:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 8013244:	4620      	mov	r0, r4
 8013246:	f7ff ff2f 	bl	80130a8 <TimerExists>
 801324a:	b908      	cbnz	r0, 8013250 <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801324c:	2000      	movs	r0, #0
}
 801324e:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 8013250:	4620      	mov	r0, r4
 8013252:	f7ff ff4f 	bl	80130f4 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 8013256:	4620      	mov	r0, r4
 8013258:	f7ff ffa6 	bl	80131a8 <UTIL_TIMER_Start>
 801325c:	e7f7      	b.n	801324e <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 801325e:	2001      	movs	r0, #1
}
 8013260:	4770      	bx	lr
 8013262:	bf00      	nop
 8013264:	080141a8 	.word	0x080141a8

08013268 <UTIL_TIMER_IRQ_Handler>:
{
 8013268:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801326a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801326e:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 8013270:	4c1e      	ldr	r4, [pc, #120]	; (80132ec <UTIL_TIMER_IRQ_Handler+0x84>)
 8013272:	6963      	ldr	r3, [r4, #20]
 8013274:	4798      	blx	r3
 8013276:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8013278:	6923      	ldr	r3, [r4, #16]
 801327a:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 801327c:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 801327e:	4b1c      	ldr	r3, [pc, #112]	; (80132f0 <UTIL_TIMER_IRQ_Handler+0x88>)
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	b923      	cbnz	r3, 801328e <UTIL_TIMER_IRQ_Handler+0x26>
 8013284:	e018      	b.n	80132b8 <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 8013286:	2200      	movs	r2, #0
 8013288:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 801328a:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 801328c:	b1a3      	cbz	r3, 80132b8 <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 801328e:	681a      	ldr	r2, [r3, #0]
 8013290:	42a2      	cmp	r2, r4
 8013292:	d9f8      	bls.n	8013286 <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 8013294:	1a31      	subs	r1, r6, r0
 8013296:	440a      	add	r2, r1
 8013298:	601a      	str	r2, [r3, #0]
 801329a:	e7f6      	b.n	801328a <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 801329c:	4b14      	ldr	r3, [pc, #80]	; (80132f0 <UTIL_TIMER_IRQ_Handler+0x88>)
 801329e:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 80132a0:	6962      	ldr	r2, [r4, #20]
 80132a2:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 80132a4:	2300      	movs	r3, #0
 80132a6:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 80132a8:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 80132aa:	68e3      	ldr	r3, [r4, #12]
 80132ac:	6920      	ldr	r0, [r4, #16]
 80132ae:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 80132b0:	8963      	ldrh	r3, [r4, #10]
 80132b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80132b6:	d012      	beq.n	80132de <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 80132b8:	4b0d      	ldr	r3, [pc, #52]	; (80132f0 <UTIL_TIMER_IRQ_Handler+0x88>)
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	b13b      	cbz	r3, 80132ce <UTIL_TIMER_IRQ_Handler+0x66>
 80132be:	681c      	ldr	r4, [r3, #0]
 80132c0:	2c00      	cmp	r4, #0
 80132c2:	d0eb      	beq.n	801329c <UTIL_TIMER_IRQ_Handler+0x34>
 80132c4:	4b09      	ldr	r3, [pc, #36]	; (80132ec <UTIL_TIMER_IRQ_Handler+0x84>)
 80132c6:	699b      	ldr	r3, [r3, #24]
 80132c8:	4798      	blx	r3
 80132ca:	4284      	cmp	r4, r0
 80132cc:	d3e6      	bcc.n	801329c <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 80132ce:	4b08      	ldr	r3, [pc, #32]	; (80132f0 <UTIL_TIMER_IRQ_Handler+0x88>)
 80132d0:	6818      	ldr	r0, [r3, #0]
 80132d2:	b108      	cbz	r0, 80132d8 <UTIL_TIMER_IRQ_Handler+0x70>
 80132d4:	7a03      	ldrb	r3, [r0, #8]
 80132d6:	b133      	cbz	r3, 80132e6 <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80132d8:	f385 8810 	msr	PRIMASK, r5
}
 80132dc:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 80132de:	4620      	mov	r0, r4
 80132e0:	f7ff ff62 	bl	80131a8 <UTIL_TIMER_Start>
 80132e4:	e7e8      	b.n	80132b8 <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 80132e6:	f7ff feed 	bl	80130c4 <TimerSetTimeout>
 80132ea:	e7f5      	b.n	80132d8 <UTIL_TIMER_IRQ_Handler+0x70>
 80132ec:	080141a8 	.word	0x080141a8
 80132f0:	2000180c 	.word	0x2000180c

080132f4 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 80132f4:	4601      	mov	r1, r0
  int i = 0;
 80132f6:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 80132f8:	e007      	b.n	801330a <ee_skip_atoi+0x16>
 80132fa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80132fe:	1c53      	adds	r3, r2, #1
 8013300:	600b      	str	r3, [r1, #0]
 8013302:	7813      	ldrb	r3, [r2, #0]
 8013304:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8013308:	3830      	subs	r0, #48	; 0x30
 801330a:	680a      	ldr	r2, [r1, #0]
 801330c:	7813      	ldrb	r3, [r2, #0]
 801330e:	3b30      	subs	r3, #48	; 0x30
 8013310:	b2db      	uxtb	r3, r3
 8013312:	2b09      	cmp	r3, #9
 8013314:	d9f1      	bls.n	80132fa <ee_skip_atoi+0x6>
  return i;
}
 8013316:	4770      	bx	lr

08013318 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 8013318:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 801331c:	b093      	sub	sp, #76	; 0x4c
 801331e:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8013320:	9e1c      	ldr	r6, [sp, #112]	; 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 8013322:	f016 0f40 	tst.w	r6, #64	; 0x40
 8013326:	d110      	bne.n	801334a <ee_number+0x32>
  char *dig = lower_digits;
 8013328:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 8013424 <ee_number+0x10c>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801332c:	1e9f      	subs	r7, r3, #2
 801332e:	2f22      	cmp	r7, #34	; 0x22
 8013330:	d875      	bhi.n	801341e <ee_number+0x106>

  c = (type & ZEROPAD) ? '0' : ' ';
 8013332:	f016 0401 	ands.w	r4, r6, #1
 8013336:	d00b      	beq.n	8013350 <ee_number+0x38>
 8013338:	f04f 0e30 	mov.w	lr, #48	; 0x30
  sign = 0;
  if (type & SIGN)
 801333c:	f016 0f02 	tst.w	r6, #2
 8013340:	d00f      	beq.n	8013362 <ee_number+0x4a>
  {
    if (num < 0)
 8013342:	2a00      	cmp	r2, #0
 8013344:	db07      	blt.n	8013356 <ee_number+0x3e>
  sign = 0;
 8013346:	2700      	movs	r7, #0
 8013348:	e00c      	b.n	8013364 <ee_number+0x4c>
  if (type & UPPERCASE)  dig = upper_digits;
 801334a:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8013428 <ee_number+0x110>
 801334e:	e7ed      	b.n	801332c <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 8013350:	f04f 0e20 	mov.w	lr, #32
 8013354:	e7f2      	b.n	801333c <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 8013356:	4252      	negs	r2, r2
      size--;
 8013358:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801335a:	3e01      	subs	r6, #1
 801335c:	961a      	str	r6, [sp, #104]	; 0x68
      sign = '-';
 801335e:	272d      	movs	r7, #45	; 0x2d
 8013360:	e000      	b.n	8013364 <ee_number+0x4c>
  sign = 0;
 8013362:	2700      	movs	r7, #0
  }
#endif

  i = 0;

  if (num == 0)
 8013364:	bb5a      	cbnz	r2, 80133be <ee_number+0xa6>
    tmp[i++] = '0';
 8013366:	2330      	movs	r3, #48	; 0x30
 8013368:	f88d 3004 	strb.w	r3, [sp, #4]
 801336c:	f04f 0c01 	mov.w	ip, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 8013370:	45ac      	cmp	ip, r5
 8013372:	dd00      	ble.n	8013376 <ee_number+0x5e>
 8013374:	4665      	mov	r5, ip
  size -= precision;
 8013376:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8013378:	1b5b      	subs	r3, r3, r5
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801337a:	b31c      	cbz	r4, 80133c4 <ee_number+0xac>
  if (sign) ASSIGN_STR(sign);
 801337c:	b11f      	cbz	r7, 8013386 <ee_number+0x6e>
 801337e:	f800 7b01 	strb.w	r7, [r0], #1
 8013382:	3901      	subs	r1, #1
 8013384:	d007      	beq.n	8013396 <ee_number+0x7e>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 8013386:	2b00      	cmp	r3, #0
 8013388:	f103 33ff 	add.w	r3, r3, #4294967295
 801338c:	dd24      	ble.n	80133d8 <ee_number+0xc0>
 801338e:	f800 eb01 	strb.w	lr, [r0], #1
 8013392:	3901      	subs	r1, #1
 8013394:	d1f7      	bne.n	8013386 <ee_number+0x6e>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 8013396:	b013      	add	sp, #76	; 0x4c
 8013398:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801339c:	fbb2 f6f3 	udiv	r6, r2, r3
 80133a0:	fb03 2216 	mls	r2, r3, r6, r2
 80133a4:	f81a 8002 	ldrb.w	r8, [sl, r2]
 80133a8:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 80133ac:	446a      	add	r2, sp
 80133ae:	f802 8c44 	strb.w	r8, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 80133b2:	4632      	mov	r2, r6
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 80133b4:	f10c 0c01 	add.w	ip, ip, #1
    while (num != 0)
 80133b8:	2a00      	cmp	r2, #0
 80133ba:	d1ef      	bne.n	801339c <ee_number+0x84>
 80133bc:	e7d8      	b.n	8013370 <ee_number+0x58>
  i = 0;
 80133be:	f04f 0c00 	mov.w	ip, #0
 80133c2:	e7f9      	b.n	80133b8 <ee_number+0xa0>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	f103 33ff 	add.w	r3, r3, #4294967295
 80133ca:	ddd7      	ble.n	801337c <ee_number+0x64>
 80133cc:	2220      	movs	r2, #32
 80133ce:	f800 2b01 	strb.w	r2, [r0], #1
 80133d2:	3901      	subs	r1, #1
 80133d4:	d1f6      	bne.n	80133c4 <ee_number+0xac>
 80133d6:	e7de      	b.n	8013396 <ee_number+0x7e>
  while (i < precision--) ASSIGN_STR('0');
 80133d8:	4565      	cmp	r5, ip
 80133da:	f105 35ff 	add.w	r5, r5, #4294967295
 80133de:	dd05      	ble.n	80133ec <ee_number+0xd4>
 80133e0:	2230      	movs	r2, #48	; 0x30
 80133e2:	f800 2b01 	strb.w	r2, [r0], #1
 80133e6:	3901      	subs	r1, #1
 80133e8:	d1f6      	bne.n	80133d8 <ee_number+0xc0>
 80133ea:	e7d4      	b.n	8013396 <ee_number+0x7e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 80133ec:	4662      	mov	r2, ip
 80133ee:	2a00      	cmp	r2, #0
 80133f0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80133f4:	dd09      	ble.n	801340a <ee_number+0xf2>
 80133f6:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 80133fa:	446a      	add	r2, sp
 80133fc:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 8013400:	f800 2b01 	strb.w	r2, [r0], #1
 8013404:	3901      	subs	r1, #1
 8013406:	d1f1      	bne.n	80133ec <ee_number+0xd4>
 8013408:	e7c5      	b.n	8013396 <ee_number+0x7e>
  while (size-- > 0) ASSIGN_STR(' ');
 801340a:	2b00      	cmp	r3, #0
 801340c:	f103 33ff 	add.w	r3, r3, #4294967295
 8013410:	ddc1      	ble.n	8013396 <ee_number+0x7e>
 8013412:	2220      	movs	r2, #32
 8013414:	f800 2b01 	strb.w	r2, [r0], #1
 8013418:	3901      	subs	r1, #1
 801341a:	d1f6      	bne.n	801340a <ee_number+0xf2>
 801341c:	e7bb      	b.n	8013396 <ee_number+0x7e>
  if (base < 2 || base > 36) return 0;
 801341e:	2000      	movs	r0, #0
 8013420:	e7b9      	b.n	8013396 <ee_number+0x7e>
 8013422:	bf00      	nop
 8013424:	08014fc0 	.word	0x08014fc0
 8013428:	08014f98 	.word	0x08014f98

0801342c <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801342c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013430:	b087      	sub	sp, #28
 8013432:	9205      	str	r2, [sp, #20]
 8013434:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 8013436:	1e0f      	subs	r7, r1, #0
 8013438:	f340 80b8 	ble.w	80135ac <tiny_vsnprintf_like+0x180>
 801343c:	4606      	mov	r6, r0
  {
    return 0;
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801343e:	4604      	mov	r4, r0
 8013440:	e004      	b.n	801344c <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);

    if (*fmt != '%')
    {
      *str++ = *fmt;
 8013442:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8013446:	9b05      	ldr	r3, [sp, #20]
 8013448:	3301      	adds	r3, #1
 801344a:	9305      	str	r3, [sp, #20]
 801344c:	9905      	ldr	r1, [sp, #20]
 801344e:	780a      	ldrb	r2, [r1, #0]
 8013450:	b922      	cbnz	r2, 801345c <tiny_vsnprintf_like+0x30>
 8013452:	1ba3      	subs	r3, r4, r6
 8013454:	1e78      	subs	r0, r7, #1
 8013456:	4283      	cmp	r3, r0
 8013458:	f2c0 80a2 	blt.w	80135a0 <tiny_vsnprintf_like+0x174>
    CHECK_STR_SIZE(buf, str, size);
 801345c:	1ba3      	subs	r3, r4, r6
 801345e:	f107 38ff 	add.w	r8, r7, #4294967295
 8013462:	4543      	cmp	r3, r8
 8013464:	f280 809c 	bge.w	80135a0 <tiny_vsnprintf_like+0x174>
    if (*fmt != '%')
 8013468:	2a25      	cmp	r2, #37	; 0x25
 801346a:	d1ea      	bne.n	8013442 <tiny_vsnprintf_like+0x16>

    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801346c:	1c4b      	adds	r3, r1, #1
 801346e:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 8013470:	784b      	ldrb	r3, [r1, #1]
 8013472:	2b30      	cmp	r3, #48	; 0x30
 8013474:	d020      	beq.n	80134b8 <tiny_vsnprintf_like+0x8c>
    flags = 0;
 8013476:	f04f 0900 	mov.w	r9, #0
    }
#endif

    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 801347a:	3b30      	subs	r3, #48	; 0x30
 801347c:	b2db      	uxtb	r3, r3
 801347e:	2b09      	cmp	r3, #9
 8013480:	d91d      	bls.n	80134be <tiny_vsnprintf_like+0x92>
    field_width = -1;
 8013482:	f04f 35ff 	mov.w	r5, #4294967295
#endif

    // Default base
    base = 10;

    switch (*fmt)
 8013486:	9b05      	ldr	r3, [sp, #20]
 8013488:	781a      	ldrb	r2, [r3, #0]
 801348a:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 801348e:	2b20      	cmp	r3, #32
 8013490:	d867      	bhi.n	8013562 <tiny_vsnprintf_like+0x136>
 8013492:	e8df f003 	tbb	[pc, r3]
 8013496:	664a      	.short	0x664a
 8013498:	66666666 	.word	0x66666666
 801349c:	66666666 	.word	0x66666666
 80134a0:	66621e66 	.word	0x66621e66
 80134a4:	62666666 	.word	0x62666666
 80134a8:	66666666 	.word	0x66666666
 80134ac:	66666666 	.word	0x66666666
 80134b0:	19662866 	.word	0x19662866
 80134b4:	6666      	.short	0x6666
 80134b6:	7c          	.byte	0x7c
 80134b7:	00          	.byte	0x00
      flags |= ZEROPAD;
 80134b8:	f04f 0901 	mov.w	r9, #1
 80134bc:	e7dd      	b.n	801347a <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 80134be:	a805      	add	r0, sp, #20
 80134c0:	f7ff ff18 	bl	80132f4 <ee_skip_atoi>
 80134c4:	4605      	mov	r5, r0
 80134c6:	e7de      	b.n	8013486 <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 80134c8:	230a      	movs	r3, #10
 80134ca:	e031      	b.n	8013530 <tiny_vsnprintf_like+0x104>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 80134cc:	2320      	movs	r3, #32
 80134ce:	f804 3b01 	strb.w	r3, [r4], #1
 80134d2:	3d01      	subs	r5, #1
 80134d4:	2d00      	cmp	r5, #0
 80134d6:	dcf9      	bgt.n	80134cc <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 80134d8:	9b04      	ldr	r3, [sp, #16]
 80134da:	1d1a      	adds	r2, r3, #4
 80134dc:	9204      	str	r2, [sp, #16]
 80134de:	781b      	ldrb	r3, [r3, #0]
 80134e0:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 80134e4:	e7af      	b.n	8013446 <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 80134e6:	9b04      	ldr	r3, [sp, #16]
 80134e8:	1d1a      	adds	r2, r3, #4
 80134ea:	9204      	str	r2, [sp, #16]
 80134ec:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 80134f0:	f1b8 0f00 	cmp.w	r8, #0
 80134f4:	d003      	beq.n	80134fe <tiny_vsnprintf_like+0xd2>
#ifdef TINY_PRINTF
        len = strlen(s);
 80134f6:	4640      	mov	r0, r8
 80134f8:	f7ec fe42 	bl	8000180 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 80134fc:	e006      	b.n	801350c <tiny_vsnprintf_like+0xe0>
        if (!s) s = "<NULL>";
 80134fe:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80135b0 <tiny_vsnprintf_like+0x184>
 8013502:	e7f8      	b.n	80134f6 <tiny_vsnprintf_like+0xca>
          while (len < field_width--) *str++ = ' ';
 8013504:	2220      	movs	r2, #32
 8013506:	f804 2b01 	strb.w	r2, [r4], #1
 801350a:	461d      	mov	r5, r3
 801350c:	1e6b      	subs	r3, r5, #1
 801350e:	4285      	cmp	r5, r0
 8013510:	dcf8      	bgt.n	8013504 <tiny_vsnprintf_like+0xd8>
        for (i = 0; i < len; ++i) *str++ = *s++;
 8013512:	2200      	movs	r2, #0
 8013514:	e006      	b.n	8013524 <tiny_vsnprintf_like+0xf8>
 8013516:	4643      	mov	r3, r8
 8013518:	f813 1b01 	ldrb.w	r1, [r3], #1
 801351c:	f804 1b01 	strb.w	r1, [r4], #1
 8013520:	3201      	adds	r2, #1
 8013522:	4698      	mov	r8, r3
 8013524:	4282      	cmp	r2, r0
 8013526:	dbf6      	blt.n	8013516 <tiny_vsnprintf_like+0xea>
 8013528:	e78d      	b.n	8013446 <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801352a:	f049 0940 	orr.w	r9, r9, #64	; 0x40

      case 'x':
        base = 16;
 801352e:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 8013530:	f019 0f02 	tst.w	r9, #2
 8013534:	d02f      	beq.n	8013596 <tiny_vsnprintf_like+0x16a>
      num = va_arg(args, int);
 8013536:	9a04      	ldr	r2, [sp, #16]
 8013538:	1d11      	adds	r1, r2, #4
 801353a:	9104      	str	r1, [sp, #16]
 801353c:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801353e:	1ba1      	subs	r1, r4, r6
 8013540:	f8cd 9008 	str.w	r9, [sp, #8]
 8013544:	f04f 30ff 	mov.w	r0, #4294967295
 8013548:	9001      	str	r0, [sp, #4]
 801354a:	9500      	str	r5, [sp, #0]
 801354c:	eba8 0101 	sub.w	r1, r8, r1
 8013550:	4620      	mov	r0, r4
 8013552:	f7ff fee1 	bl	8013318 <ee_number>
 8013556:	4604      	mov	r4, r0
 8013558:	e775      	b.n	8013446 <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 801355a:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 801355e:	230a      	movs	r3, #10
 8013560:	e7e6      	b.n	8013530 <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 8013562:	2a25      	cmp	r2, #37	; 0x25
 8013564:	d002      	beq.n	801356c <tiny_vsnprintf_like+0x140>
 8013566:	2325      	movs	r3, #37	; 0x25
 8013568:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 801356c:	1ba3      	subs	r3, r4, r6
 801356e:	4598      	cmp	r8, r3
 8013570:	dd0f      	ble.n	8013592 <tiny_vsnprintf_like+0x166>
        if (*fmt)
 8013572:	9b05      	ldr	r3, [sp, #20]
 8013574:	781a      	ldrb	r2, [r3, #0]
 8013576:	b13a      	cbz	r2, 8013588 <tiny_vsnprintf_like+0x15c>
          *str++ = *fmt;
 8013578:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 801357c:	1ba3      	subs	r3, r4, r6
 801357e:	4598      	cmp	r8, r3
 8013580:	f73f af61 	bgt.w	8013446 <tiny_vsnprintf_like+0x1a>
    base = 10;
 8013584:	230a      	movs	r3, #10
    if (qualifier == 'l')
 8013586:	e7d3      	b.n	8013530 <tiny_vsnprintf_like+0x104>
          --fmt;
 8013588:	3b01      	subs	r3, #1
 801358a:	9305      	str	r3, [sp, #20]
 801358c:	e7f6      	b.n	801357c <tiny_vsnprintf_like+0x150>
        base = 16;
 801358e:	2310      	movs	r3, #16
 8013590:	e7ce      	b.n	8013530 <tiny_vsnprintf_like+0x104>
    base = 10;
 8013592:	230a      	movs	r3, #10
 8013594:	e7cc      	b.n	8013530 <tiny_vsnprintf_like+0x104>
      num = va_arg(args, unsigned int);
 8013596:	9a04      	ldr	r2, [sp, #16]
 8013598:	1d11      	adds	r1, r2, #4
 801359a:	9104      	str	r1, [sp, #16]
 801359c:	6812      	ldr	r2, [r2, #0]
 801359e:	e7ce      	b.n	801353e <tiny_vsnprintf_like+0x112>
  }

  *str = '\0';
 80135a0:	2300      	movs	r3, #0
 80135a2:	7023      	strb	r3, [r4, #0]
  return str - buf;
 80135a4:	1ba0      	subs	r0, r4, r6
}
 80135a6:	b007      	add	sp, #28
 80135a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 80135ac:	2000      	movs	r0, #0
 80135ae:	e7fa      	b.n	80135a6 <tiny_vsnprintf_like+0x17a>
 80135b0:	08014fe8 	.word	0x08014fe8

080135b4 <__errno>:
 80135b4:	4b01      	ldr	r3, [pc, #4]	; (80135bc <__errno+0x8>)
 80135b6:	6818      	ldr	r0, [r3, #0]
 80135b8:	4770      	bx	lr
 80135ba:	bf00      	nop
 80135bc:	20000118 	.word	0x20000118

080135c0 <__libc_init_array>:
 80135c0:	b570      	push	{r4, r5, r6, lr}
 80135c2:	4d0d      	ldr	r5, [pc, #52]	; (80135f8 <__libc_init_array+0x38>)
 80135c4:	4c0d      	ldr	r4, [pc, #52]	; (80135fc <__libc_init_array+0x3c>)
 80135c6:	1b64      	subs	r4, r4, r5
 80135c8:	10a4      	asrs	r4, r4, #2
 80135ca:	2600      	movs	r6, #0
 80135cc:	42a6      	cmp	r6, r4
 80135ce:	d109      	bne.n	80135e4 <__libc_init_array+0x24>
 80135d0:	4d0b      	ldr	r5, [pc, #44]	; (8013600 <__libc_init_array+0x40>)
 80135d2:	4c0c      	ldr	r4, [pc, #48]	; (8013604 <__libc_init_array+0x44>)
 80135d4:	f000 fd1c 	bl	8014010 <_init>
 80135d8:	1b64      	subs	r4, r4, r5
 80135da:	10a4      	asrs	r4, r4, #2
 80135dc:	2600      	movs	r6, #0
 80135de:	42a6      	cmp	r6, r4
 80135e0:	d105      	bne.n	80135ee <__libc_init_array+0x2e>
 80135e2:	bd70      	pop	{r4, r5, r6, pc}
 80135e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80135e8:	4798      	blx	r3
 80135ea:	3601      	adds	r6, #1
 80135ec:	e7ee      	b.n	80135cc <__libc_init_array+0xc>
 80135ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80135f2:	4798      	blx	r3
 80135f4:	3601      	adds	r6, #1
 80135f6:	e7f2      	b.n	80135de <__libc_init_array+0x1e>
 80135f8:	08015030 	.word	0x08015030
 80135fc:	08015030 	.word	0x08015030
 8013600:	08015030 	.word	0x08015030
 8013604:	08015034 	.word	0x08015034

08013608 <malloc>:
 8013608:	4b02      	ldr	r3, [pc, #8]	; (8013614 <malloc+0xc>)
 801360a:	4601      	mov	r1, r0
 801360c:	6818      	ldr	r0, [r3, #0]
 801360e:	f000 b88b 	b.w	8013728 <_malloc_r>
 8013612:	bf00      	nop
 8013614:	20000118 	.word	0x20000118

08013618 <free>:
 8013618:	4b02      	ldr	r3, [pc, #8]	; (8013624 <free+0xc>)
 801361a:	4601      	mov	r1, r0
 801361c:	6818      	ldr	r0, [r3, #0]
 801361e:	f000 b819 	b.w	8013654 <_free_r>
 8013622:	bf00      	nop
 8013624:	20000118 	.word	0x20000118

08013628 <memcpy>:
 8013628:	440a      	add	r2, r1
 801362a:	4291      	cmp	r1, r2
 801362c:	f100 33ff 	add.w	r3, r0, #4294967295
 8013630:	d100      	bne.n	8013634 <memcpy+0xc>
 8013632:	4770      	bx	lr
 8013634:	b510      	push	{r4, lr}
 8013636:	f811 4b01 	ldrb.w	r4, [r1], #1
 801363a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801363e:	4291      	cmp	r1, r2
 8013640:	d1f9      	bne.n	8013636 <memcpy+0xe>
 8013642:	bd10      	pop	{r4, pc}

08013644 <memset>:
 8013644:	4402      	add	r2, r0
 8013646:	4603      	mov	r3, r0
 8013648:	4293      	cmp	r3, r2
 801364a:	d100      	bne.n	801364e <memset+0xa>
 801364c:	4770      	bx	lr
 801364e:	f803 1b01 	strb.w	r1, [r3], #1
 8013652:	e7f9      	b.n	8013648 <memset+0x4>

08013654 <_free_r>:
 8013654:	b538      	push	{r3, r4, r5, lr}
 8013656:	4605      	mov	r5, r0
 8013658:	2900      	cmp	r1, #0
 801365a:	d041      	beq.n	80136e0 <_free_r+0x8c>
 801365c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013660:	1f0c      	subs	r4, r1, #4
 8013662:	2b00      	cmp	r3, #0
 8013664:	bfb8      	it	lt
 8013666:	18e4      	addlt	r4, r4, r3
 8013668:	f000 f902 	bl	8013870 <__malloc_lock>
 801366c:	4a1d      	ldr	r2, [pc, #116]	; (80136e4 <_free_r+0x90>)
 801366e:	6813      	ldr	r3, [r2, #0]
 8013670:	b933      	cbnz	r3, 8013680 <_free_r+0x2c>
 8013672:	6063      	str	r3, [r4, #4]
 8013674:	6014      	str	r4, [r2, #0]
 8013676:	4628      	mov	r0, r5
 8013678:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801367c:	f000 b8fe 	b.w	801387c <__malloc_unlock>
 8013680:	42a3      	cmp	r3, r4
 8013682:	d908      	bls.n	8013696 <_free_r+0x42>
 8013684:	6820      	ldr	r0, [r4, #0]
 8013686:	1821      	adds	r1, r4, r0
 8013688:	428b      	cmp	r3, r1
 801368a:	bf01      	itttt	eq
 801368c:	6819      	ldreq	r1, [r3, #0]
 801368e:	685b      	ldreq	r3, [r3, #4]
 8013690:	1809      	addeq	r1, r1, r0
 8013692:	6021      	streq	r1, [r4, #0]
 8013694:	e7ed      	b.n	8013672 <_free_r+0x1e>
 8013696:	461a      	mov	r2, r3
 8013698:	685b      	ldr	r3, [r3, #4]
 801369a:	b10b      	cbz	r3, 80136a0 <_free_r+0x4c>
 801369c:	42a3      	cmp	r3, r4
 801369e:	d9fa      	bls.n	8013696 <_free_r+0x42>
 80136a0:	6811      	ldr	r1, [r2, #0]
 80136a2:	1850      	adds	r0, r2, r1
 80136a4:	42a0      	cmp	r0, r4
 80136a6:	d10b      	bne.n	80136c0 <_free_r+0x6c>
 80136a8:	6820      	ldr	r0, [r4, #0]
 80136aa:	4401      	add	r1, r0
 80136ac:	1850      	adds	r0, r2, r1
 80136ae:	4283      	cmp	r3, r0
 80136b0:	6011      	str	r1, [r2, #0]
 80136b2:	d1e0      	bne.n	8013676 <_free_r+0x22>
 80136b4:	6818      	ldr	r0, [r3, #0]
 80136b6:	685b      	ldr	r3, [r3, #4]
 80136b8:	6053      	str	r3, [r2, #4]
 80136ba:	4401      	add	r1, r0
 80136bc:	6011      	str	r1, [r2, #0]
 80136be:	e7da      	b.n	8013676 <_free_r+0x22>
 80136c0:	d902      	bls.n	80136c8 <_free_r+0x74>
 80136c2:	230c      	movs	r3, #12
 80136c4:	602b      	str	r3, [r5, #0]
 80136c6:	e7d6      	b.n	8013676 <_free_r+0x22>
 80136c8:	6820      	ldr	r0, [r4, #0]
 80136ca:	1821      	adds	r1, r4, r0
 80136cc:	428b      	cmp	r3, r1
 80136ce:	bf04      	itt	eq
 80136d0:	6819      	ldreq	r1, [r3, #0]
 80136d2:	685b      	ldreq	r3, [r3, #4]
 80136d4:	6063      	str	r3, [r4, #4]
 80136d6:	bf04      	itt	eq
 80136d8:	1809      	addeq	r1, r1, r0
 80136da:	6021      	streq	r1, [r4, #0]
 80136dc:	6054      	str	r4, [r2, #4]
 80136de:	e7ca      	b.n	8013676 <_free_r+0x22>
 80136e0:	bd38      	pop	{r3, r4, r5, pc}
 80136e2:	bf00      	nop
 80136e4:	20001810 	.word	0x20001810

080136e8 <sbrk_aligned>:
 80136e8:	b570      	push	{r4, r5, r6, lr}
 80136ea:	4e0e      	ldr	r6, [pc, #56]	; (8013724 <sbrk_aligned+0x3c>)
 80136ec:	460c      	mov	r4, r1
 80136ee:	6831      	ldr	r1, [r6, #0]
 80136f0:	4605      	mov	r5, r0
 80136f2:	b911      	cbnz	r1, 80136fa <sbrk_aligned+0x12>
 80136f4:	f000 f88c 	bl	8013810 <_sbrk_r>
 80136f8:	6030      	str	r0, [r6, #0]
 80136fa:	4621      	mov	r1, r4
 80136fc:	4628      	mov	r0, r5
 80136fe:	f000 f887 	bl	8013810 <_sbrk_r>
 8013702:	1c43      	adds	r3, r0, #1
 8013704:	d00a      	beq.n	801371c <sbrk_aligned+0x34>
 8013706:	1cc4      	adds	r4, r0, #3
 8013708:	f024 0403 	bic.w	r4, r4, #3
 801370c:	42a0      	cmp	r0, r4
 801370e:	d007      	beq.n	8013720 <sbrk_aligned+0x38>
 8013710:	1a21      	subs	r1, r4, r0
 8013712:	4628      	mov	r0, r5
 8013714:	f000 f87c 	bl	8013810 <_sbrk_r>
 8013718:	3001      	adds	r0, #1
 801371a:	d101      	bne.n	8013720 <sbrk_aligned+0x38>
 801371c:	f04f 34ff 	mov.w	r4, #4294967295
 8013720:	4620      	mov	r0, r4
 8013722:	bd70      	pop	{r4, r5, r6, pc}
 8013724:	20001814 	.word	0x20001814

08013728 <_malloc_r>:
 8013728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801372c:	1ccd      	adds	r5, r1, #3
 801372e:	f025 0503 	bic.w	r5, r5, #3
 8013732:	3508      	adds	r5, #8
 8013734:	2d0c      	cmp	r5, #12
 8013736:	bf38      	it	cc
 8013738:	250c      	movcc	r5, #12
 801373a:	2d00      	cmp	r5, #0
 801373c:	4607      	mov	r7, r0
 801373e:	db01      	blt.n	8013744 <_malloc_r+0x1c>
 8013740:	42a9      	cmp	r1, r5
 8013742:	d905      	bls.n	8013750 <_malloc_r+0x28>
 8013744:	230c      	movs	r3, #12
 8013746:	603b      	str	r3, [r7, #0]
 8013748:	2600      	movs	r6, #0
 801374a:	4630      	mov	r0, r6
 801374c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013750:	4e2e      	ldr	r6, [pc, #184]	; (801380c <_malloc_r+0xe4>)
 8013752:	f000 f88d 	bl	8013870 <__malloc_lock>
 8013756:	6833      	ldr	r3, [r6, #0]
 8013758:	461c      	mov	r4, r3
 801375a:	bb34      	cbnz	r4, 80137aa <_malloc_r+0x82>
 801375c:	4629      	mov	r1, r5
 801375e:	4638      	mov	r0, r7
 8013760:	f7ff ffc2 	bl	80136e8 <sbrk_aligned>
 8013764:	1c43      	adds	r3, r0, #1
 8013766:	4604      	mov	r4, r0
 8013768:	d14d      	bne.n	8013806 <_malloc_r+0xde>
 801376a:	6834      	ldr	r4, [r6, #0]
 801376c:	4626      	mov	r6, r4
 801376e:	2e00      	cmp	r6, #0
 8013770:	d140      	bne.n	80137f4 <_malloc_r+0xcc>
 8013772:	6823      	ldr	r3, [r4, #0]
 8013774:	4631      	mov	r1, r6
 8013776:	4638      	mov	r0, r7
 8013778:	eb04 0803 	add.w	r8, r4, r3
 801377c:	f000 f848 	bl	8013810 <_sbrk_r>
 8013780:	4580      	cmp	r8, r0
 8013782:	d13a      	bne.n	80137fa <_malloc_r+0xd2>
 8013784:	6821      	ldr	r1, [r4, #0]
 8013786:	3503      	adds	r5, #3
 8013788:	1a6d      	subs	r5, r5, r1
 801378a:	f025 0503 	bic.w	r5, r5, #3
 801378e:	3508      	adds	r5, #8
 8013790:	2d0c      	cmp	r5, #12
 8013792:	bf38      	it	cc
 8013794:	250c      	movcc	r5, #12
 8013796:	4629      	mov	r1, r5
 8013798:	4638      	mov	r0, r7
 801379a:	f7ff ffa5 	bl	80136e8 <sbrk_aligned>
 801379e:	3001      	adds	r0, #1
 80137a0:	d02b      	beq.n	80137fa <_malloc_r+0xd2>
 80137a2:	6823      	ldr	r3, [r4, #0]
 80137a4:	442b      	add	r3, r5
 80137a6:	6023      	str	r3, [r4, #0]
 80137a8:	e00e      	b.n	80137c8 <_malloc_r+0xa0>
 80137aa:	6822      	ldr	r2, [r4, #0]
 80137ac:	1b52      	subs	r2, r2, r5
 80137ae:	d41e      	bmi.n	80137ee <_malloc_r+0xc6>
 80137b0:	2a0b      	cmp	r2, #11
 80137b2:	d916      	bls.n	80137e2 <_malloc_r+0xba>
 80137b4:	1961      	adds	r1, r4, r5
 80137b6:	42a3      	cmp	r3, r4
 80137b8:	6025      	str	r5, [r4, #0]
 80137ba:	bf18      	it	ne
 80137bc:	6059      	strne	r1, [r3, #4]
 80137be:	6863      	ldr	r3, [r4, #4]
 80137c0:	bf08      	it	eq
 80137c2:	6031      	streq	r1, [r6, #0]
 80137c4:	5162      	str	r2, [r4, r5]
 80137c6:	604b      	str	r3, [r1, #4]
 80137c8:	4638      	mov	r0, r7
 80137ca:	f104 060b 	add.w	r6, r4, #11
 80137ce:	f000 f855 	bl	801387c <__malloc_unlock>
 80137d2:	f026 0607 	bic.w	r6, r6, #7
 80137d6:	1d23      	adds	r3, r4, #4
 80137d8:	1af2      	subs	r2, r6, r3
 80137da:	d0b6      	beq.n	801374a <_malloc_r+0x22>
 80137dc:	1b9b      	subs	r3, r3, r6
 80137de:	50a3      	str	r3, [r4, r2]
 80137e0:	e7b3      	b.n	801374a <_malloc_r+0x22>
 80137e2:	6862      	ldr	r2, [r4, #4]
 80137e4:	42a3      	cmp	r3, r4
 80137e6:	bf0c      	ite	eq
 80137e8:	6032      	streq	r2, [r6, #0]
 80137ea:	605a      	strne	r2, [r3, #4]
 80137ec:	e7ec      	b.n	80137c8 <_malloc_r+0xa0>
 80137ee:	4623      	mov	r3, r4
 80137f0:	6864      	ldr	r4, [r4, #4]
 80137f2:	e7b2      	b.n	801375a <_malloc_r+0x32>
 80137f4:	4634      	mov	r4, r6
 80137f6:	6876      	ldr	r6, [r6, #4]
 80137f8:	e7b9      	b.n	801376e <_malloc_r+0x46>
 80137fa:	230c      	movs	r3, #12
 80137fc:	603b      	str	r3, [r7, #0]
 80137fe:	4638      	mov	r0, r7
 8013800:	f000 f83c 	bl	801387c <__malloc_unlock>
 8013804:	e7a1      	b.n	801374a <_malloc_r+0x22>
 8013806:	6025      	str	r5, [r4, #0]
 8013808:	e7de      	b.n	80137c8 <_malloc_r+0xa0>
 801380a:	bf00      	nop
 801380c:	20001810 	.word	0x20001810

08013810 <_sbrk_r>:
 8013810:	b538      	push	{r3, r4, r5, lr}
 8013812:	4d06      	ldr	r5, [pc, #24]	; (801382c <_sbrk_r+0x1c>)
 8013814:	2300      	movs	r3, #0
 8013816:	4604      	mov	r4, r0
 8013818:	4608      	mov	r0, r1
 801381a:	602b      	str	r3, [r5, #0]
 801381c:	f7ee fb1e 	bl	8001e5c <_sbrk>
 8013820:	1c43      	adds	r3, r0, #1
 8013822:	d102      	bne.n	801382a <_sbrk_r+0x1a>
 8013824:	682b      	ldr	r3, [r5, #0]
 8013826:	b103      	cbz	r3, 801382a <_sbrk_r+0x1a>
 8013828:	6023      	str	r3, [r4, #0]
 801382a:	bd38      	pop	{r3, r4, r5, pc}
 801382c:	20001818 	.word	0x20001818

08013830 <siprintf>:
 8013830:	b40e      	push	{r1, r2, r3}
 8013832:	b500      	push	{lr}
 8013834:	b09c      	sub	sp, #112	; 0x70
 8013836:	ab1d      	add	r3, sp, #116	; 0x74
 8013838:	9002      	str	r0, [sp, #8]
 801383a:	9006      	str	r0, [sp, #24]
 801383c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013840:	4809      	ldr	r0, [pc, #36]	; (8013868 <siprintf+0x38>)
 8013842:	9107      	str	r1, [sp, #28]
 8013844:	9104      	str	r1, [sp, #16]
 8013846:	4909      	ldr	r1, [pc, #36]	; (801386c <siprintf+0x3c>)
 8013848:	f853 2b04 	ldr.w	r2, [r3], #4
 801384c:	9105      	str	r1, [sp, #20]
 801384e:	6800      	ldr	r0, [r0, #0]
 8013850:	9301      	str	r3, [sp, #4]
 8013852:	a902      	add	r1, sp, #8
 8013854:	f000 f874 	bl	8013940 <_svfiprintf_r>
 8013858:	9b02      	ldr	r3, [sp, #8]
 801385a:	2200      	movs	r2, #0
 801385c:	701a      	strb	r2, [r3, #0]
 801385e:	b01c      	add	sp, #112	; 0x70
 8013860:	f85d eb04 	ldr.w	lr, [sp], #4
 8013864:	b003      	add	sp, #12
 8013866:	4770      	bx	lr
 8013868:	20000118 	.word	0x20000118
 801386c:	ffff0208 	.word	0xffff0208

08013870 <__malloc_lock>:
 8013870:	4801      	ldr	r0, [pc, #4]	; (8013878 <__malloc_lock+0x8>)
 8013872:	f000 baf9 	b.w	8013e68 <__retarget_lock_acquire_recursive>
 8013876:	bf00      	nop
 8013878:	2000181c 	.word	0x2000181c

0801387c <__malloc_unlock>:
 801387c:	4801      	ldr	r0, [pc, #4]	; (8013884 <__malloc_unlock+0x8>)
 801387e:	f000 baf4 	b.w	8013e6a <__retarget_lock_release_recursive>
 8013882:	bf00      	nop
 8013884:	2000181c 	.word	0x2000181c

08013888 <__ssputs_r>:
 8013888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801388c:	688e      	ldr	r6, [r1, #8]
 801388e:	429e      	cmp	r6, r3
 8013890:	4682      	mov	sl, r0
 8013892:	460c      	mov	r4, r1
 8013894:	4690      	mov	r8, r2
 8013896:	461f      	mov	r7, r3
 8013898:	d838      	bhi.n	801390c <__ssputs_r+0x84>
 801389a:	898a      	ldrh	r2, [r1, #12]
 801389c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80138a0:	d032      	beq.n	8013908 <__ssputs_r+0x80>
 80138a2:	6825      	ldr	r5, [r4, #0]
 80138a4:	6909      	ldr	r1, [r1, #16]
 80138a6:	eba5 0901 	sub.w	r9, r5, r1
 80138aa:	6965      	ldr	r5, [r4, #20]
 80138ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80138b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80138b4:	3301      	adds	r3, #1
 80138b6:	444b      	add	r3, r9
 80138b8:	106d      	asrs	r5, r5, #1
 80138ba:	429d      	cmp	r5, r3
 80138bc:	bf38      	it	cc
 80138be:	461d      	movcc	r5, r3
 80138c0:	0553      	lsls	r3, r2, #21
 80138c2:	d531      	bpl.n	8013928 <__ssputs_r+0xa0>
 80138c4:	4629      	mov	r1, r5
 80138c6:	f7ff ff2f 	bl	8013728 <_malloc_r>
 80138ca:	4606      	mov	r6, r0
 80138cc:	b950      	cbnz	r0, 80138e4 <__ssputs_r+0x5c>
 80138ce:	230c      	movs	r3, #12
 80138d0:	f8ca 3000 	str.w	r3, [sl]
 80138d4:	89a3      	ldrh	r3, [r4, #12]
 80138d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80138da:	81a3      	strh	r3, [r4, #12]
 80138dc:	f04f 30ff 	mov.w	r0, #4294967295
 80138e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138e4:	6921      	ldr	r1, [r4, #16]
 80138e6:	464a      	mov	r2, r9
 80138e8:	f7ff fe9e 	bl	8013628 <memcpy>
 80138ec:	89a3      	ldrh	r3, [r4, #12]
 80138ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80138f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80138f6:	81a3      	strh	r3, [r4, #12]
 80138f8:	6126      	str	r6, [r4, #16]
 80138fa:	6165      	str	r5, [r4, #20]
 80138fc:	444e      	add	r6, r9
 80138fe:	eba5 0509 	sub.w	r5, r5, r9
 8013902:	6026      	str	r6, [r4, #0]
 8013904:	60a5      	str	r5, [r4, #8]
 8013906:	463e      	mov	r6, r7
 8013908:	42be      	cmp	r6, r7
 801390a:	d900      	bls.n	801390e <__ssputs_r+0x86>
 801390c:	463e      	mov	r6, r7
 801390e:	6820      	ldr	r0, [r4, #0]
 8013910:	4632      	mov	r2, r6
 8013912:	4641      	mov	r1, r8
 8013914:	f000 faaa 	bl	8013e6c <memmove>
 8013918:	68a3      	ldr	r3, [r4, #8]
 801391a:	1b9b      	subs	r3, r3, r6
 801391c:	60a3      	str	r3, [r4, #8]
 801391e:	6823      	ldr	r3, [r4, #0]
 8013920:	4433      	add	r3, r6
 8013922:	6023      	str	r3, [r4, #0]
 8013924:	2000      	movs	r0, #0
 8013926:	e7db      	b.n	80138e0 <__ssputs_r+0x58>
 8013928:	462a      	mov	r2, r5
 801392a:	f000 fab9 	bl	8013ea0 <_realloc_r>
 801392e:	4606      	mov	r6, r0
 8013930:	2800      	cmp	r0, #0
 8013932:	d1e1      	bne.n	80138f8 <__ssputs_r+0x70>
 8013934:	6921      	ldr	r1, [r4, #16]
 8013936:	4650      	mov	r0, sl
 8013938:	f7ff fe8c 	bl	8013654 <_free_r>
 801393c:	e7c7      	b.n	80138ce <__ssputs_r+0x46>
	...

08013940 <_svfiprintf_r>:
 8013940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013944:	4698      	mov	r8, r3
 8013946:	898b      	ldrh	r3, [r1, #12]
 8013948:	061b      	lsls	r3, r3, #24
 801394a:	b09d      	sub	sp, #116	; 0x74
 801394c:	4607      	mov	r7, r0
 801394e:	460d      	mov	r5, r1
 8013950:	4614      	mov	r4, r2
 8013952:	d50e      	bpl.n	8013972 <_svfiprintf_r+0x32>
 8013954:	690b      	ldr	r3, [r1, #16]
 8013956:	b963      	cbnz	r3, 8013972 <_svfiprintf_r+0x32>
 8013958:	2140      	movs	r1, #64	; 0x40
 801395a:	f7ff fee5 	bl	8013728 <_malloc_r>
 801395e:	6028      	str	r0, [r5, #0]
 8013960:	6128      	str	r0, [r5, #16]
 8013962:	b920      	cbnz	r0, 801396e <_svfiprintf_r+0x2e>
 8013964:	230c      	movs	r3, #12
 8013966:	603b      	str	r3, [r7, #0]
 8013968:	f04f 30ff 	mov.w	r0, #4294967295
 801396c:	e0d1      	b.n	8013b12 <_svfiprintf_r+0x1d2>
 801396e:	2340      	movs	r3, #64	; 0x40
 8013970:	616b      	str	r3, [r5, #20]
 8013972:	2300      	movs	r3, #0
 8013974:	9309      	str	r3, [sp, #36]	; 0x24
 8013976:	2320      	movs	r3, #32
 8013978:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801397c:	f8cd 800c 	str.w	r8, [sp, #12]
 8013980:	2330      	movs	r3, #48	; 0x30
 8013982:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013b2c <_svfiprintf_r+0x1ec>
 8013986:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801398a:	f04f 0901 	mov.w	r9, #1
 801398e:	4623      	mov	r3, r4
 8013990:	469a      	mov	sl, r3
 8013992:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013996:	b10a      	cbz	r2, 801399c <_svfiprintf_r+0x5c>
 8013998:	2a25      	cmp	r2, #37	; 0x25
 801399a:	d1f9      	bne.n	8013990 <_svfiprintf_r+0x50>
 801399c:	ebba 0b04 	subs.w	fp, sl, r4
 80139a0:	d00b      	beq.n	80139ba <_svfiprintf_r+0x7a>
 80139a2:	465b      	mov	r3, fp
 80139a4:	4622      	mov	r2, r4
 80139a6:	4629      	mov	r1, r5
 80139a8:	4638      	mov	r0, r7
 80139aa:	f7ff ff6d 	bl	8013888 <__ssputs_r>
 80139ae:	3001      	adds	r0, #1
 80139b0:	f000 80aa 	beq.w	8013b08 <_svfiprintf_r+0x1c8>
 80139b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80139b6:	445a      	add	r2, fp
 80139b8:	9209      	str	r2, [sp, #36]	; 0x24
 80139ba:	f89a 3000 	ldrb.w	r3, [sl]
 80139be:	2b00      	cmp	r3, #0
 80139c0:	f000 80a2 	beq.w	8013b08 <_svfiprintf_r+0x1c8>
 80139c4:	2300      	movs	r3, #0
 80139c6:	f04f 32ff 	mov.w	r2, #4294967295
 80139ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80139ce:	f10a 0a01 	add.w	sl, sl, #1
 80139d2:	9304      	str	r3, [sp, #16]
 80139d4:	9307      	str	r3, [sp, #28]
 80139d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80139da:	931a      	str	r3, [sp, #104]	; 0x68
 80139dc:	4654      	mov	r4, sl
 80139de:	2205      	movs	r2, #5
 80139e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80139e4:	4851      	ldr	r0, [pc, #324]	; (8013b2c <_svfiprintf_r+0x1ec>)
 80139e6:	f7ec fbd3 	bl	8000190 <memchr>
 80139ea:	9a04      	ldr	r2, [sp, #16]
 80139ec:	b9d8      	cbnz	r0, 8013a26 <_svfiprintf_r+0xe6>
 80139ee:	06d0      	lsls	r0, r2, #27
 80139f0:	bf44      	itt	mi
 80139f2:	2320      	movmi	r3, #32
 80139f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80139f8:	0711      	lsls	r1, r2, #28
 80139fa:	bf44      	itt	mi
 80139fc:	232b      	movmi	r3, #43	; 0x2b
 80139fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013a02:	f89a 3000 	ldrb.w	r3, [sl]
 8013a06:	2b2a      	cmp	r3, #42	; 0x2a
 8013a08:	d015      	beq.n	8013a36 <_svfiprintf_r+0xf6>
 8013a0a:	9a07      	ldr	r2, [sp, #28]
 8013a0c:	4654      	mov	r4, sl
 8013a0e:	2000      	movs	r0, #0
 8013a10:	f04f 0c0a 	mov.w	ip, #10
 8013a14:	4621      	mov	r1, r4
 8013a16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013a1a:	3b30      	subs	r3, #48	; 0x30
 8013a1c:	2b09      	cmp	r3, #9
 8013a1e:	d94e      	bls.n	8013abe <_svfiprintf_r+0x17e>
 8013a20:	b1b0      	cbz	r0, 8013a50 <_svfiprintf_r+0x110>
 8013a22:	9207      	str	r2, [sp, #28]
 8013a24:	e014      	b.n	8013a50 <_svfiprintf_r+0x110>
 8013a26:	eba0 0308 	sub.w	r3, r0, r8
 8013a2a:	fa09 f303 	lsl.w	r3, r9, r3
 8013a2e:	4313      	orrs	r3, r2
 8013a30:	9304      	str	r3, [sp, #16]
 8013a32:	46a2      	mov	sl, r4
 8013a34:	e7d2      	b.n	80139dc <_svfiprintf_r+0x9c>
 8013a36:	9b03      	ldr	r3, [sp, #12]
 8013a38:	1d19      	adds	r1, r3, #4
 8013a3a:	681b      	ldr	r3, [r3, #0]
 8013a3c:	9103      	str	r1, [sp, #12]
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	bfbb      	ittet	lt
 8013a42:	425b      	neglt	r3, r3
 8013a44:	f042 0202 	orrlt.w	r2, r2, #2
 8013a48:	9307      	strge	r3, [sp, #28]
 8013a4a:	9307      	strlt	r3, [sp, #28]
 8013a4c:	bfb8      	it	lt
 8013a4e:	9204      	strlt	r2, [sp, #16]
 8013a50:	7823      	ldrb	r3, [r4, #0]
 8013a52:	2b2e      	cmp	r3, #46	; 0x2e
 8013a54:	d10c      	bne.n	8013a70 <_svfiprintf_r+0x130>
 8013a56:	7863      	ldrb	r3, [r4, #1]
 8013a58:	2b2a      	cmp	r3, #42	; 0x2a
 8013a5a:	d135      	bne.n	8013ac8 <_svfiprintf_r+0x188>
 8013a5c:	9b03      	ldr	r3, [sp, #12]
 8013a5e:	1d1a      	adds	r2, r3, #4
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	9203      	str	r2, [sp, #12]
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	bfb8      	it	lt
 8013a68:	f04f 33ff 	movlt.w	r3, #4294967295
 8013a6c:	3402      	adds	r4, #2
 8013a6e:	9305      	str	r3, [sp, #20]
 8013a70:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8013b30 <_svfiprintf_r+0x1f0>
 8013a74:	7821      	ldrb	r1, [r4, #0]
 8013a76:	2203      	movs	r2, #3
 8013a78:	4650      	mov	r0, sl
 8013a7a:	f7ec fb89 	bl	8000190 <memchr>
 8013a7e:	b140      	cbz	r0, 8013a92 <_svfiprintf_r+0x152>
 8013a80:	2340      	movs	r3, #64	; 0x40
 8013a82:	eba0 000a 	sub.w	r0, r0, sl
 8013a86:	fa03 f000 	lsl.w	r0, r3, r0
 8013a8a:	9b04      	ldr	r3, [sp, #16]
 8013a8c:	4303      	orrs	r3, r0
 8013a8e:	3401      	adds	r4, #1
 8013a90:	9304      	str	r3, [sp, #16]
 8013a92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a96:	4827      	ldr	r0, [pc, #156]	; (8013b34 <_svfiprintf_r+0x1f4>)
 8013a98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013a9c:	2206      	movs	r2, #6
 8013a9e:	f7ec fb77 	bl	8000190 <memchr>
 8013aa2:	2800      	cmp	r0, #0
 8013aa4:	d038      	beq.n	8013b18 <_svfiprintf_r+0x1d8>
 8013aa6:	4b24      	ldr	r3, [pc, #144]	; (8013b38 <_svfiprintf_r+0x1f8>)
 8013aa8:	bb1b      	cbnz	r3, 8013af2 <_svfiprintf_r+0x1b2>
 8013aaa:	9b03      	ldr	r3, [sp, #12]
 8013aac:	3307      	adds	r3, #7
 8013aae:	f023 0307 	bic.w	r3, r3, #7
 8013ab2:	3308      	adds	r3, #8
 8013ab4:	9303      	str	r3, [sp, #12]
 8013ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ab8:	4433      	add	r3, r6
 8013aba:	9309      	str	r3, [sp, #36]	; 0x24
 8013abc:	e767      	b.n	801398e <_svfiprintf_r+0x4e>
 8013abe:	fb0c 3202 	mla	r2, ip, r2, r3
 8013ac2:	460c      	mov	r4, r1
 8013ac4:	2001      	movs	r0, #1
 8013ac6:	e7a5      	b.n	8013a14 <_svfiprintf_r+0xd4>
 8013ac8:	2300      	movs	r3, #0
 8013aca:	3401      	adds	r4, #1
 8013acc:	9305      	str	r3, [sp, #20]
 8013ace:	4619      	mov	r1, r3
 8013ad0:	f04f 0c0a 	mov.w	ip, #10
 8013ad4:	4620      	mov	r0, r4
 8013ad6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013ada:	3a30      	subs	r2, #48	; 0x30
 8013adc:	2a09      	cmp	r2, #9
 8013ade:	d903      	bls.n	8013ae8 <_svfiprintf_r+0x1a8>
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d0c5      	beq.n	8013a70 <_svfiprintf_r+0x130>
 8013ae4:	9105      	str	r1, [sp, #20]
 8013ae6:	e7c3      	b.n	8013a70 <_svfiprintf_r+0x130>
 8013ae8:	fb0c 2101 	mla	r1, ip, r1, r2
 8013aec:	4604      	mov	r4, r0
 8013aee:	2301      	movs	r3, #1
 8013af0:	e7f0      	b.n	8013ad4 <_svfiprintf_r+0x194>
 8013af2:	ab03      	add	r3, sp, #12
 8013af4:	9300      	str	r3, [sp, #0]
 8013af6:	462a      	mov	r2, r5
 8013af8:	4b10      	ldr	r3, [pc, #64]	; (8013b3c <_svfiprintf_r+0x1fc>)
 8013afa:	a904      	add	r1, sp, #16
 8013afc:	4638      	mov	r0, r7
 8013afe:	f3af 8000 	nop.w
 8013b02:	1c42      	adds	r2, r0, #1
 8013b04:	4606      	mov	r6, r0
 8013b06:	d1d6      	bne.n	8013ab6 <_svfiprintf_r+0x176>
 8013b08:	89ab      	ldrh	r3, [r5, #12]
 8013b0a:	065b      	lsls	r3, r3, #25
 8013b0c:	f53f af2c 	bmi.w	8013968 <_svfiprintf_r+0x28>
 8013b10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013b12:	b01d      	add	sp, #116	; 0x74
 8013b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b18:	ab03      	add	r3, sp, #12
 8013b1a:	9300      	str	r3, [sp, #0]
 8013b1c:	462a      	mov	r2, r5
 8013b1e:	4b07      	ldr	r3, [pc, #28]	; (8013b3c <_svfiprintf_r+0x1fc>)
 8013b20:	a904      	add	r1, sp, #16
 8013b22:	4638      	mov	r0, r7
 8013b24:	f000 f87a 	bl	8013c1c <_printf_i>
 8013b28:	e7eb      	b.n	8013b02 <_svfiprintf_r+0x1c2>
 8013b2a:	bf00      	nop
 8013b2c:	08014fef 	.word	0x08014fef
 8013b30:	08014ff5 	.word	0x08014ff5
 8013b34:	08014ff9 	.word	0x08014ff9
 8013b38:	00000000 	.word	0x00000000
 8013b3c:	08013889 	.word	0x08013889

08013b40 <_printf_common>:
 8013b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b44:	4616      	mov	r6, r2
 8013b46:	4699      	mov	r9, r3
 8013b48:	688a      	ldr	r2, [r1, #8]
 8013b4a:	690b      	ldr	r3, [r1, #16]
 8013b4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013b50:	4293      	cmp	r3, r2
 8013b52:	bfb8      	it	lt
 8013b54:	4613      	movlt	r3, r2
 8013b56:	6033      	str	r3, [r6, #0]
 8013b58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013b5c:	4607      	mov	r7, r0
 8013b5e:	460c      	mov	r4, r1
 8013b60:	b10a      	cbz	r2, 8013b66 <_printf_common+0x26>
 8013b62:	3301      	adds	r3, #1
 8013b64:	6033      	str	r3, [r6, #0]
 8013b66:	6823      	ldr	r3, [r4, #0]
 8013b68:	0699      	lsls	r1, r3, #26
 8013b6a:	bf42      	ittt	mi
 8013b6c:	6833      	ldrmi	r3, [r6, #0]
 8013b6e:	3302      	addmi	r3, #2
 8013b70:	6033      	strmi	r3, [r6, #0]
 8013b72:	6825      	ldr	r5, [r4, #0]
 8013b74:	f015 0506 	ands.w	r5, r5, #6
 8013b78:	d106      	bne.n	8013b88 <_printf_common+0x48>
 8013b7a:	f104 0a19 	add.w	sl, r4, #25
 8013b7e:	68e3      	ldr	r3, [r4, #12]
 8013b80:	6832      	ldr	r2, [r6, #0]
 8013b82:	1a9b      	subs	r3, r3, r2
 8013b84:	42ab      	cmp	r3, r5
 8013b86:	dc26      	bgt.n	8013bd6 <_printf_common+0x96>
 8013b88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013b8c:	1e13      	subs	r3, r2, #0
 8013b8e:	6822      	ldr	r2, [r4, #0]
 8013b90:	bf18      	it	ne
 8013b92:	2301      	movne	r3, #1
 8013b94:	0692      	lsls	r2, r2, #26
 8013b96:	d42b      	bmi.n	8013bf0 <_printf_common+0xb0>
 8013b98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013b9c:	4649      	mov	r1, r9
 8013b9e:	4638      	mov	r0, r7
 8013ba0:	47c0      	blx	r8
 8013ba2:	3001      	adds	r0, #1
 8013ba4:	d01e      	beq.n	8013be4 <_printf_common+0xa4>
 8013ba6:	6823      	ldr	r3, [r4, #0]
 8013ba8:	68e5      	ldr	r5, [r4, #12]
 8013baa:	6832      	ldr	r2, [r6, #0]
 8013bac:	f003 0306 	and.w	r3, r3, #6
 8013bb0:	2b04      	cmp	r3, #4
 8013bb2:	bf08      	it	eq
 8013bb4:	1aad      	subeq	r5, r5, r2
 8013bb6:	68a3      	ldr	r3, [r4, #8]
 8013bb8:	6922      	ldr	r2, [r4, #16]
 8013bba:	bf0c      	ite	eq
 8013bbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013bc0:	2500      	movne	r5, #0
 8013bc2:	4293      	cmp	r3, r2
 8013bc4:	bfc4      	itt	gt
 8013bc6:	1a9b      	subgt	r3, r3, r2
 8013bc8:	18ed      	addgt	r5, r5, r3
 8013bca:	2600      	movs	r6, #0
 8013bcc:	341a      	adds	r4, #26
 8013bce:	42b5      	cmp	r5, r6
 8013bd0:	d11a      	bne.n	8013c08 <_printf_common+0xc8>
 8013bd2:	2000      	movs	r0, #0
 8013bd4:	e008      	b.n	8013be8 <_printf_common+0xa8>
 8013bd6:	2301      	movs	r3, #1
 8013bd8:	4652      	mov	r2, sl
 8013bda:	4649      	mov	r1, r9
 8013bdc:	4638      	mov	r0, r7
 8013bde:	47c0      	blx	r8
 8013be0:	3001      	adds	r0, #1
 8013be2:	d103      	bne.n	8013bec <_printf_common+0xac>
 8013be4:	f04f 30ff 	mov.w	r0, #4294967295
 8013be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013bec:	3501      	adds	r5, #1
 8013bee:	e7c6      	b.n	8013b7e <_printf_common+0x3e>
 8013bf0:	18e1      	adds	r1, r4, r3
 8013bf2:	1c5a      	adds	r2, r3, #1
 8013bf4:	2030      	movs	r0, #48	; 0x30
 8013bf6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013bfa:	4422      	add	r2, r4
 8013bfc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013c00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013c04:	3302      	adds	r3, #2
 8013c06:	e7c7      	b.n	8013b98 <_printf_common+0x58>
 8013c08:	2301      	movs	r3, #1
 8013c0a:	4622      	mov	r2, r4
 8013c0c:	4649      	mov	r1, r9
 8013c0e:	4638      	mov	r0, r7
 8013c10:	47c0      	blx	r8
 8013c12:	3001      	adds	r0, #1
 8013c14:	d0e6      	beq.n	8013be4 <_printf_common+0xa4>
 8013c16:	3601      	adds	r6, #1
 8013c18:	e7d9      	b.n	8013bce <_printf_common+0x8e>
	...

08013c1c <_printf_i>:
 8013c1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013c20:	7e0f      	ldrb	r7, [r1, #24]
 8013c22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013c24:	2f78      	cmp	r7, #120	; 0x78
 8013c26:	4691      	mov	r9, r2
 8013c28:	4680      	mov	r8, r0
 8013c2a:	460c      	mov	r4, r1
 8013c2c:	469a      	mov	sl, r3
 8013c2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013c32:	d807      	bhi.n	8013c44 <_printf_i+0x28>
 8013c34:	2f62      	cmp	r7, #98	; 0x62
 8013c36:	d80a      	bhi.n	8013c4e <_printf_i+0x32>
 8013c38:	2f00      	cmp	r7, #0
 8013c3a:	f000 80d8 	beq.w	8013dee <_printf_i+0x1d2>
 8013c3e:	2f58      	cmp	r7, #88	; 0x58
 8013c40:	f000 80a3 	beq.w	8013d8a <_printf_i+0x16e>
 8013c44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013c48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013c4c:	e03a      	b.n	8013cc4 <_printf_i+0xa8>
 8013c4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013c52:	2b15      	cmp	r3, #21
 8013c54:	d8f6      	bhi.n	8013c44 <_printf_i+0x28>
 8013c56:	a101      	add	r1, pc, #4	; (adr r1, 8013c5c <_printf_i+0x40>)
 8013c58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013c5c:	08013cb5 	.word	0x08013cb5
 8013c60:	08013cc9 	.word	0x08013cc9
 8013c64:	08013c45 	.word	0x08013c45
 8013c68:	08013c45 	.word	0x08013c45
 8013c6c:	08013c45 	.word	0x08013c45
 8013c70:	08013c45 	.word	0x08013c45
 8013c74:	08013cc9 	.word	0x08013cc9
 8013c78:	08013c45 	.word	0x08013c45
 8013c7c:	08013c45 	.word	0x08013c45
 8013c80:	08013c45 	.word	0x08013c45
 8013c84:	08013c45 	.word	0x08013c45
 8013c88:	08013dd5 	.word	0x08013dd5
 8013c8c:	08013cf9 	.word	0x08013cf9
 8013c90:	08013db7 	.word	0x08013db7
 8013c94:	08013c45 	.word	0x08013c45
 8013c98:	08013c45 	.word	0x08013c45
 8013c9c:	08013df7 	.word	0x08013df7
 8013ca0:	08013c45 	.word	0x08013c45
 8013ca4:	08013cf9 	.word	0x08013cf9
 8013ca8:	08013c45 	.word	0x08013c45
 8013cac:	08013c45 	.word	0x08013c45
 8013cb0:	08013dbf 	.word	0x08013dbf
 8013cb4:	682b      	ldr	r3, [r5, #0]
 8013cb6:	1d1a      	adds	r2, r3, #4
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	602a      	str	r2, [r5, #0]
 8013cbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013cc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013cc4:	2301      	movs	r3, #1
 8013cc6:	e0a3      	b.n	8013e10 <_printf_i+0x1f4>
 8013cc8:	6820      	ldr	r0, [r4, #0]
 8013cca:	6829      	ldr	r1, [r5, #0]
 8013ccc:	0606      	lsls	r6, r0, #24
 8013cce:	f101 0304 	add.w	r3, r1, #4
 8013cd2:	d50a      	bpl.n	8013cea <_printf_i+0xce>
 8013cd4:	680e      	ldr	r6, [r1, #0]
 8013cd6:	602b      	str	r3, [r5, #0]
 8013cd8:	2e00      	cmp	r6, #0
 8013cda:	da03      	bge.n	8013ce4 <_printf_i+0xc8>
 8013cdc:	232d      	movs	r3, #45	; 0x2d
 8013cde:	4276      	negs	r6, r6
 8013ce0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013ce4:	485e      	ldr	r0, [pc, #376]	; (8013e60 <_printf_i+0x244>)
 8013ce6:	230a      	movs	r3, #10
 8013ce8:	e019      	b.n	8013d1e <_printf_i+0x102>
 8013cea:	680e      	ldr	r6, [r1, #0]
 8013cec:	602b      	str	r3, [r5, #0]
 8013cee:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013cf2:	bf18      	it	ne
 8013cf4:	b236      	sxthne	r6, r6
 8013cf6:	e7ef      	b.n	8013cd8 <_printf_i+0xbc>
 8013cf8:	682b      	ldr	r3, [r5, #0]
 8013cfa:	6820      	ldr	r0, [r4, #0]
 8013cfc:	1d19      	adds	r1, r3, #4
 8013cfe:	6029      	str	r1, [r5, #0]
 8013d00:	0601      	lsls	r1, r0, #24
 8013d02:	d501      	bpl.n	8013d08 <_printf_i+0xec>
 8013d04:	681e      	ldr	r6, [r3, #0]
 8013d06:	e002      	b.n	8013d0e <_printf_i+0xf2>
 8013d08:	0646      	lsls	r6, r0, #25
 8013d0a:	d5fb      	bpl.n	8013d04 <_printf_i+0xe8>
 8013d0c:	881e      	ldrh	r6, [r3, #0]
 8013d0e:	4854      	ldr	r0, [pc, #336]	; (8013e60 <_printf_i+0x244>)
 8013d10:	2f6f      	cmp	r7, #111	; 0x6f
 8013d12:	bf0c      	ite	eq
 8013d14:	2308      	moveq	r3, #8
 8013d16:	230a      	movne	r3, #10
 8013d18:	2100      	movs	r1, #0
 8013d1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013d1e:	6865      	ldr	r5, [r4, #4]
 8013d20:	60a5      	str	r5, [r4, #8]
 8013d22:	2d00      	cmp	r5, #0
 8013d24:	bfa2      	ittt	ge
 8013d26:	6821      	ldrge	r1, [r4, #0]
 8013d28:	f021 0104 	bicge.w	r1, r1, #4
 8013d2c:	6021      	strge	r1, [r4, #0]
 8013d2e:	b90e      	cbnz	r6, 8013d34 <_printf_i+0x118>
 8013d30:	2d00      	cmp	r5, #0
 8013d32:	d04d      	beq.n	8013dd0 <_printf_i+0x1b4>
 8013d34:	4615      	mov	r5, r2
 8013d36:	fbb6 f1f3 	udiv	r1, r6, r3
 8013d3a:	fb03 6711 	mls	r7, r3, r1, r6
 8013d3e:	5dc7      	ldrb	r7, [r0, r7]
 8013d40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013d44:	4637      	mov	r7, r6
 8013d46:	42bb      	cmp	r3, r7
 8013d48:	460e      	mov	r6, r1
 8013d4a:	d9f4      	bls.n	8013d36 <_printf_i+0x11a>
 8013d4c:	2b08      	cmp	r3, #8
 8013d4e:	d10b      	bne.n	8013d68 <_printf_i+0x14c>
 8013d50:	6823      	ldr	r3, [r4, #0]
 8013d52:	07de      	lsls	r6, r3, #31
 8013d54:	d508      	bpl.n	8013d68 <_printf_i+0x14c>
 8013d56:	6923      	ldr	r3, [r4, #16]
 8013d58:	6861      	ldr	r1, [r4, #4]
 8013d5a:	4299      	cmp	r1, r3
 8013d5c:	bfde      	ittt	le
 8013d5e:	2330      	movle	r3, #48	; 0x30
 8013d60:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013d64:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013d68:	1b52      	subs	r2, r2, r5
 8013d6a:	6122      	str	r2, [r4, #16]
 8013d6c:	f8cd a000 	str.w	sl, [sp]
 8013d70:	464b      	mov	r3, r9
 8013d72:	aa03      	add	r2, sp, #12
 8013d74:	4621      	mov	r1, r4
 8013d76:	4640      	mov	r0, r8
 8013d78:	f7ff fee2 	bl	8013b40 <_printf_common>
 8013d7c:	3001      	adds	r0, #1
 8013d7e:	d14c      	bne.n	8013e1a <_printf_i+0x1fe>
 8013d80:	f04f 30ff 	mov.w	r0, #4294967295
 8013d84:	b004      	add	sp, #16
 8013d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d8a:	4835      	ldr	r0, [pc, #212]	; (8013e60 <_printf_i+0x244>)
 8013d8c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013d90:	6829      	ldr	r1, [r5, #0]
 8013d92:	6823      	ldr	r3, [r4, #0]
 8013d94:	f851 6b04 	ldr.w	r6, [r1], #4
 8013d98:	6029      	str	r1, [r5, #0]
 8013d9a:	061d      	lsls	r5, r3, #24
 8013d9c:	d514      	bpl.n	8013dc8 <_printf_i+0x1ac>
 8013d9e:	07df      	lsls	r7, r3, #31
 8013da0:	bf44      	itt	mi
 8013da2:	f043 0320 	orrmi.w	r3, r3, #32
 8013da6:	6023      	strmi	r3, [r4, #0]
 8013da8:	b91e      	cbnz	r6, 8013db2 <_printf_i+0x196>
 8013daa:	6823      	ldr	r3, [r4, #0]
 8013dac:	f023 0320 	bic.w	r3, r3, #32
 8013db0:	6023      	str	r3, [r4, #0]
 8013db2:	2310      	movs	r3, #16
 8013db4:	e7b0      	b.n	8013d18 <_printf_i+0xfc>
 8013db6:	6823      	ldr	r3, [r4, #0]
 8013db8:	f043 0320 	orr.w	r3, r3, #32
 8013dbc:	6023      	str	r3, [r4, #0]
 8013dbe:	2378      	movs	r3, #120	; 0x78
 8013dc0:	4828      	ldr	r0, [pc, #160]	; (8013e64 <_printf_i+0x248>)
 8013dc2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013dc6:	e7e3      	b.n	8013d90 <_printf_i+0x174>
 8013dc8:	0659      	lsls	r1, r3, #25
 8013dca:	bf48      	it	mi
 8013dcc:	b2b6      	uxthmi	r6, r6
 8013dce:	e7e6      	b.n	8013d9e <_printf_i+0x182>
 8013dd0:	4615      	mov	r5, r2
 8013dd2:	e7bb      	b.n	8013d4c <_printf_i+0x130>
 8013dd4:	682b      	ldr	r3, [r5, #0]
 8013dd6:	6826      	ldr	r6, [r4, #0]
 8013dd8:	6961      	ldr	r1, [r4, #20]
 8013dda:	1d18      	adds	r0, r3, #4
 8013ddc:	6028      	str	r0, [r5, #0]
 8013dde:	0635      	lsls	r5, r6, #24
 8013de0:	681b      	ldr	r3, [r3, #0]
 8013de2:	d501      	bpl.n	8013de8 <_printf_i+0x1cc>
 8013de4:	6019      	str	r1, [r3, #0]
 8013de6:	e002      	b.n	8013dee <_printf_i+0x1d2>
 8013de8:	0670      	lsls	r0, r6, #25
 8013dea:	d5fb      	bpl.n	8013de4 <_printf_i+0x1c8>
 8013dec:	8019      	strh	r1, [r3, #0]
 8013dee:	2300      	movs	r3, #0
 8013df0:	6123      	str	r3, [r4, #16]
 8013df2:	4615      	mov	r5, r2
 8013df4:	e7ba      	b.n	8013d6c <_printf_i+0x150>
 8013df6:	682b      	ldr	r3, [r5, #0]
 8013df8:	1d1a      	adds	r2, r3, #4
 8013dfa:	602a      	str	r2, [r5, #0]
 8013dfc:	681d      	ldr	r5, [r3, #0]
 8013dfe:	6862      	ldr	r2, [r4, #4]
 8013e00:	2100      	movs	r1, #0
 8013e02:	4628      	mov	r0, r5
 8013e04:	f7ec f9c4 	bl	8000190 <memchr>
 8013e08:	b108      	cbz	r0, 8013e0e <_printf_i+0x1f2>
 8013e0a:	1b40      	subs	r0, r0, r5
 8013e0c:	6060      	str	r0, [r4, #4]
 8013e0e:	6863      	ldr	r3, [r4, #4]
 8013e10:	6123      	str	r3, [r4, #16]
 8013e12:	2300      	movs	r3, #0
 8013e14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013e18:	e7a8      	b.n	8013d6c <_printf_i+0x150>
 8013e1a:	6923      	ldr	r3, [r4, #16]
 8013e1c:	462a      	mov	r2, r5
 8013e1e:	4649      	mov	r1, r9
 8013e20:	4640      	mov	r0, r8
 8013e22:	47d0      	blx	sl
 8013e24:	3001      	adds	r0, #1
 8013e26:	d0ab      	beq.n	8013d80 <_printf_i+0x164>
 8013e28:	6823      	ldr	r3, [r4, #0]
 8013e2a:	079b      	lsls	r3, r3, #30
 8013e2c:	d413      	bmi.n	8013e56 <_printf_i+0x23a>
 8013e2e:	68e0      	ldr	r0, [r4, #12]
 8013e30:	9b03      	ldr	r3, [sp, #12]
 8013e32:	4298      	cmp	r0, r3
 8013e34:	bfb8      	it	lt
 8013e36:	4618      	movlt	r0, r3
 8013e38:	e7a4      	b.n	8013d84 <_printf_i+0x168>
 8013e3a:	2301      	movs	r3, #1
 8013e3c:	4632      	mov	r2, r6
 8013e3e:	4649      	mov	r1, r9
 8013e40:	4640      	mov	r0, r8
 8013e42:	47d0      	blx	sl
 8013e44:	3001      	adds	r0, #1
 8013e46:	d09b      	beq.n	8013d80 <_printf_i+0x164>
 8013e48:	3501      	adds	r5, #1
 8013e4a:	68e3      	ldr	r3, [r4, #12]
 8013e4c:	9903      	ldr	r1, [sp, #12]
 8013e4e:	1a5b      	subs	r3, r3, r1
 8013e50:	42ab      	cmp	r3, r5
 8013e52:	dcf2      	bgt.n	8013e3a <_printf_i+0x21e>
 8013e54:	e7eb      	b.n	8013e2e <_printf_i+0x212>
 8013e56:	2500      	movs	r5, #0
 8013e58:	f104 0619 	add.w	r6, r4, #25
 8013e5c:	e7f5      	b.n	8013e4a <_printf_i+0x22e>
 8013e5e:	bf00      	nop
 8013e60:	08015000 	.word	0x08015000
 8013e64:	08015011 	.word	0x08015011

08013e68 <__retarget_lock_acquire_recursive>:
 8013e68:	4770      	bx	lr

08013e6a <__retarget_lock_release_recursive>:
 8013e6a:	4770      	bx	lr

08013e6c <memmove>:
 8013e6c:	4288      	cmp	r0, r1
 8013e6e:	b510      	push	{r4, lr}
 8013e70:	eb01 0402 	add.w	r4, r1, r2
 8013e74:	d902      	bls.n	8013e7c <memmove+0x10>
 8013e76:	4284      	cmp	r4, r0
 8013e78:	4623      	mov	r3, r4
 8013e7a:	d807      	bhi.n	8013e8c <memmove+0x20>
 8013e7c:	1e43      	subs	r3, r0, #1
 8013e7e:	42a1      	cmp	r1, r4
 8013e80:	d008      	beq.n	8013e94 <memmove+0x28>
 8013e82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013e86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013e8a:	e7f8      	b.n	8013e7e <memmove+0x12>
 8013e8c:	4402      	add	r2, r0
 8013e8e:	4601      	mov	r1, r0
 8013e90:	428a      	cmp	r2, r1
 8013e92:	d100      	bne.n	8013e96 <memmove+0x2a>
 8013e94:	bd10      	pop	{r4, pc}
 8013e96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013e9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013e9e:	e7f7      	b.n	8013e90 <memmove+0x24>

08013ea0 <_realloc_r>:
 8013ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ea4:	4680      	mov	r8, r0
 8013ea6:	4614      	mov	r4, r2
 8013ea8:	460e      	mov	r6, r1
 8013eaa:	b921      	cbnz	r1, 8013eb6 <_realloc_r+0x16>
 8013eac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013eb0:	4611      	mov	r1, r2
 8013eb2:	f7ff bc39 	b.w	8013728 <_malloc_r>
 8013eb6:	b92a      	cbnz	r2, 8013ec4 <_realloc_r+0x24>
 8013eb8:	f7ff fbcc 	bl	8013654 <_free_r>
 8013ebc:	4625      	mov	r5, r4
 8013ebe:	4628      	mov	r0, r5
 8013ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ec4:	f000 f81b 	bl	8013efe <_malloc_usable_size_r>
 8013ec8:	4284      	cmp	r4, r0
 8013eca:	4607      	mov	r7, r0
 8013ecc:	d802      	bhi.n	8013ed4 <_realloc_r+0x34>
 8013ece:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013ed2:	d812      	bhi.n	8013efa <_realloc_r+0x5a>
 8013ed4:	4621      	mov	r1, r4
 8013ed6:	4640      	mov	r0, r8
 8013ed8:	f7ff fc26 	bl	8013728 <_malloc_r>
 8013edc:	4605      	mov	r5, r0
 8013ede:	2800      	cmp	r0, #0
 8013ee0:	d0ed      	beq.n	8013ebe <_realloc_r+0x1e>
 8013ee2:	42bc      	cmp	r4, r7
 8013ee4:	4622      	mov	r2, r4
 8013ee6:	4631      	mov	r1, r6
 8013ee8:	bf28      	it	cs
 8013eea:	463a      	movcs	r2, r7
 8013eec:	f7ff fb9c 	bl	8013628 <memcpy>
 8013ef0:	4631      	mov	r1, r6
 8013ef2:	4640      	mov	r0, r8
 8013ef4:	f7ff fbae 	bl	8013654 <_free_r>
 8013ef8:	e7e1      	b.n	8013ebe <_realloc_r+0x1e>
 8013efa:	4635      	mov	r5, r6
 8013efc:	e7df      	b.n	8013ebe <_realloc_r+0x1e>

08013efe <_malloc_usable_size_r>:
 8013efe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013f02:	1f18      	subs	r0, r3, #4
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	bfbc      	itt	lt
 8013f08:	580b      	ldrlt	r3, [r1, r0]
 8013f0a:	18c0      	addlt	r0, r0, r3
 8013f0c:	4770      	bx	lr
	...

08013f10 <floor>:
 8013f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f14:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8013f18:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8013f1c:	2e13      	cmp	r6, #19
 8013f1e:	4602      	mov	r2, r0
 8013f20:	460b      	mov	r3, r1
 8013f22:	4607      	mov	r7, r0
 8013f24:	460c      	mov	r4, r1
 8013f26:	4605      	mov	r5, r0
 8013f28:	dc33      	bgt.n	8013f92 <floor+0x82>
 8013f2a:	2e00      	cmp	r6, #0
 8013f2c:	da14      	bge.n	8013f58 <floor+0x48>
 8013f2e:	a334      	add	r3, pc, #208	; (adr r3, 8014000 <floor+0xf0>)
 8013f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f34:	f7ec f982 	bl	800023c <__adddf3>
 8013f38:	2200      	movs	r2, #0
 8013f3a:	2300      	movs	r3, #0
 8013f3c:	f7ec fbb2 	bl	80006a4 <__aeabi_dcmpgt>
 8013f40:	b138      	cbz	r0, 8013f52 <floor+0x42>
 8013f42:	2c00      	cmp	r4, #0
 8013f44:	da58      	bge.n	8013ff8 <floor+0xe8>
 8013f46:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8013f4a:	431d      	orrs	r5, r3
 8013f4c:	d001      	beq.n	8013f52 <floor+0x42>
 8013f4e:	4c2e      	ldr	r4, [pc, #184]	; (8014008 <floor+0xf8>)
 8013f50:	2500      	movs	r5, #0
 8013f52:	4623      	mov	r3, r4
 8013f54:	462f      	mov	r7, r5
 8013f56:	e025      	b.n	8013fa4 <floor+0x94>
 8013f58:	4a2c      	ldr	r2, [pc, #176]	; (801400c <floor+0xfc>)
 8013f5a:	fa42 f806 	asr.w	r8, r2, r6
 8013f5e:	ea01 0208 	and.w	r2, r1, r8
 8013f62:	4302      	orrs	r2, r0
 8013f64:	d01e      	beq.n	8013fa4 <floor+0x94>
 8013f66:	a326      	add	r3, pc, #152	; (adr r3, 8014000 <floor+0xf0>)
 8013f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f6c:	f7ec f966 	bl	800023c <__adddf3>
 8013f70:	2200      	movs	r2, #0
 8013f72:	2300      	movs	r3, #0
 8013f74:	f7ec fb96 	bl	80006a4 <__aeabi_dcmpgt>
 8013f78:	2800      	cmp	r0, #0
 8013f7a:	d0ea      	beq.n	8013f52 <floor+0x42>
 8013f7c:	2c00      	cmp	r4, #0
 8013f7e:	bfbe      	ittt	lt
 8013f80:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8013f84:	fa43 f606 	asrlt.w	r6, r3, r6
 8013f88:	19a4      	addlt	r4, r4, r6
 8013f8a:	ea24 0408 	bic.w	r4, r4, r8
 8013f8e:	2500      	movs	r5, #0
 8013f90:	e7df      	b.n	8013f52 <floor+0x42>
 8013f92:	2e33      	cmp	r6, #51	; 0x33
 8013f94:	dd0a      	ble.n	8013fac <floor+0x9c>
 8013f96:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8013f9a:	d103      	bne.n	8013fa4 <floor+0x94>
 8013f9c:	f7ec f94e 	bl	800023c <__adddf3>
 8013fa0:	4607      	mov	r7, r0
 8013fa2:	460b      	mov	r3, r1
 8013fa4:	4638      	mov	r0, r7
 8013fa6:	4619      	mov	r1, r3
 8013fa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013fac:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8013fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8013fb4:	fa22 f808 	lsr.w	r8, r2, r8
 8013fb8:	ea18 0f00 	tst.w	r8, r0
 8013fbc:	d0f2      	beq.n	8013fa4 <floor+0x94>
 8013fbe:	a310      	add	r3, pc, #64	; (adr r3, 8014000 <floor+0xf0>)
 8013fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fc4:	f7ec f93a 	bl	800023c <__adddf3>
 8013fc8:	2200      	movs	r2, #0
 8013fca:	2300      	movs	r3, #0
 8013fcc:	f7ec fb6a 	bl	80006a4 <__aeabi_dcmpgt>
 8013fd0:	2800      	cmp	r0, #0
 8013fd2:	d0be      	beq.n	8013f52 <floor+0x42>
 8013fd4:	2c00      	cmp	r4, #0
 8013fd6:	da02      	bge.n	8013fde <floor+0xce>
 8013fd8:	2e14      	cmp	r6, #20
 8013fda:	d103      	bne.n	8013fe4 <floor+0xd4>
 8013fdc:	3401      	adds	r4, #1
 8013fde:	ea25 0508 	bic.w	r5, r5, r8
 8013fe2:	e7b6      	b.n	8013f52 <floor+0x42>
 8013fe4:	2301      	movs	r3, #1
 8013fe6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8013fea:	fa03 f606 	lsl.w	r6, r3, r6
 8013fee:	4435      	add	r5, r6
 8013ff0:	42bd      	cmp	r5, r7
 8013ff2:	bf38      	it	cc
 8013ff4:	18e4      	addcc	r4, r4, r3
 8013ff6:	e7f2      	b.n	8013fde <floor+0xce>
 8013ff8:	2500      	movs	r5, #0
 8013ffa:	462c      	mov	r4, r5
 8013ffc:	e7a9      	b.n	8013f52 <floor+0x42>
 8013ffe:	bf00      	nop
 8014000:	8800759c 	.word	0x8800759c
 8014004:	7e37e43c 	.word	0x7e37e43c
 8014008:	bff00000 	.word	0xbff00000
 801400c:	000fffff 	.word	0x000fffff

08014010 <_init>:
 8014010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014012:	bf00      	nop
 8014014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014016:	bc08      	pop	{r3}
 8014018:	469e      	mov	lr, r3
 801401a:	4770      	bx	lr

0801401c <_fini>:
 801401c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801401e:	bf00      	nop
 8014020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014022:	bc08      	pop	{r3}
 8014024:	469e      	mov	lr, r3
 8014026:	4770      	bx	lr
