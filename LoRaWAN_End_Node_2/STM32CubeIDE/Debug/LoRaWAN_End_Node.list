
LoRaWAN_End_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013f80  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001020  080140c0  080140c0  000240c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080150e0  080150e0  0003e5c0  2**0
                  CONTENTS
  4 .ARM          00000008  080150e0  080150e0  000250e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080150e8  080150e8  0003e5c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080150e8  080150e8  000250e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080150f0  080150f0  000250f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .USER_embedded_Keys 000000c0  0803e500  0803e500  0003e500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000180  20000000  080150f8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 LW_NVM_RAM    00000b18  20008000  20008000  00048000  2**2
                  ALLOC
 11 .bss          000016b0  20000180  20000180  00040180  2**2
                  ALLOC
 12 RAM1_region   00000000  20001830  20001830  0003e5c0  2**0
                  CONTENTS
 13 RAM2_region   00000000  20009000  20009000  0003e5c0  2**0
                  CONTENTS
 14 ._user_heap_stack 00000a00  20001830  20001830  00040180  2**0
                  ALLOC
 15 .ARM.attributes 0000002a  00000000  00000000  0003e5c0  2**0
                  CONTENTS, READONLY
 16 .debug_info   0006037d  00000000  00000000  0003e5ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000c4d1  00000000  00000000  0009e967  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    0002ac46  00000000  00000000  000aae38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003028  00000000  00000000  000d5a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00003218  00000000  00000000  000d8aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002c8f6  00000000  00000000  000dbcc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0005205e  00000000  00000000  001085b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000e272d  00000000  00000000  0015a614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000050  00000000  00000000  0023cd41  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00008cac  00000000  00000000  0023cd94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000180 	.word	0x20000180
 800015c:	00000000 	.word	0x00000000
 8000160:	080140a8 	.word	0x080140a8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000184 	.word	0x20000184
 800017c:	080140a8 	.word	0x080140a8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__gedf2>:
 80005a8:	f04f 3cff 	mov.w	ip, #4294967295
 80005ac:	e006      	b.n	80005bc <__cmpdf2+0x4>
 80005ae:	bf00      	nop

080005b0 <__ledf2>:
 80005b0:	f04f 0c01 	mov.w	ip, #1
 80005b4:	e002      	b.n	80005bc <__cmpdf2+0x4>
 80005b6:	bf00      	nop

080005b8 <__cmpdf2>:
 80005b8:	f04f 0c01 	mov.w	ip, #1
 80005bc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80005c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005cc:	bf18      	it	ne
 80005ce:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80005d2:	d01b      	beq.n	800060c <__cmpdf2+0x54>
 80005d4:	b001      	add	sp, #4
 80005d6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80005da:	bf0c      	ite	eq
 80005dc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80005e0:	ea91 0f03 	teqne	r1, r3
 80005e4:	bf02      	ittt	eq
 80005e6:	ea90 0f02 	teqeq	r0, r2
 80005ea:	2000      	moveq	r0, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	f110 0f00 	cmn.w	r0, #0
 80005f2:	ea91 0f03 	teq	r1, r3
 80005f6:	bf58      	it	pl
 80005f8:	4299      	cmppl	r1, r3
 80005fa:	bf08      	it	eq
 80005fc:	4290      	cmpeq	r0, r2
 80005fe:	bf2c      	ite	cs
 8000600:	17d8      	asrcs	r0, r3, #31
 8000602:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000606:	f040 0001 	orr.w	r0, r0, #1
 800060a:	4770      	bx	lr
 800060c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000610:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000614:	d102      	bne.n	800061c <__cmpdf2+0x64>
 8000616:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800061a:	d107      	bne.n	800062c <__cmpdf2+0x74>
 800061c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000620:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000624:	d1d6      	bne.n	80005d4 <__cmpdf2+0x1c>
 8000626:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800062a:	d0d3      	beq.n	80005d4 <__cmpdf2+0x1c>
 800062c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop

08000634 <__aeabi_cdrcmple>:
 8000634:	4684      	mov	ip, r0
 8000636:	4610      	mov	r0, r2
 8000638:	4662      	mov	r2, ip
 800063a:	468c      	mov	ip, r1
 800063c:	4619      	mov	r1, r3
 800063e:	4663      	mov	r3, ip
 8000640:	e000      	b.n	8000644 <__aeabi_cdcmpeq>
 8000642:	bf00      	nop

08000644 <__aeabi_cdcmpeq>:
 8000644:	b501      	push	{r0, lr}
 8000646:	f7ff ffb7 	bl	80005b8 <__cmpdf2>
 800064a:	2800      	cmp	r0, #0
 800064c:	bf48      	it	mi
 800064e:	f110 0f00 	cmnmi.w	r0, #0
 8000652:	bd01      	pop	{r0, pc}

08000654 <__aeabi_dcmpeq>:
 8000654:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000658:	f7ff fff4 	bl	8000644 <__aeabi_cdcmpeq>
 800065c:	bf0c      	ite	eq
 800065e:	2001      	moveq	r0, #1
 8000660:	2000      	movne	r0, #0
 8000662:	f85d fb08 	ldr.w	pc, [sp], #8
 8000666:	bf00      	nop

08000668 <__aeabi_dcmplt>:
 8000668:	f84d ed08 	str.w	lr, [sp, #-8]!
 800066c:	f7ff ffea 	bl	8000644 <__aeabi_cdcmpeq>
 8000670:	bf34      	ite	cc
 8000672:	2001      	movcc	r0, #1
 8000674:	2000      	movcs	r0, #0
 8000676:	f85d fb08 	ldr.w	pc, [sp], #8
 800067a:	bf00      	nop

0800067c <__aeabi_dcmple>:
 800067c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000680:	f7ff ffe0 	bl	8000644 <__aeabi_cdcmpeq>
 8000684:	bf94      	ite	ls
 8000686:	2001      	movls	r0, #1
 8000688:	2000      	movhi	r0, #0
 800068a:	f85d fb08 	ldr.w	pc, [sp], #8
 800068e:	bf00      	nop

08000690 <__aeabi_dcmpge>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff ffce 	bl	8000634 <__aeabi_cdrcmple>
 8000698:	bf94      	ite	ls
 800069a:	2001      	movls	r0, #1
 800069c:	2000      	movhi	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_dcmpgt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffc4 	bl	8000634 <__aeabi_cdrcmple>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_d2iz>:
 80006b8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80006bc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80006c0:	d215      	bcs.n	80006ee <__aeabi_d2iz+0x36>
 80006c2:	d511      	bpl.n	80006e8 <__aeabi_d2iz+0x30>
 80006c4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80006c8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80006cc:	d912      	bls.n	80006f4 <__aeabi_d2iz+0x3c>
 80006ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80006d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80006d6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80006da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006de:	fa23 f002 	lsr.w	r0, r3, r2
 80006e2:	bf18      	it	ne
 80006e4:	4240      	negne	r0, r0
 80006e6:	4770      	bx	lr
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	4770      	bx	lr
 80006ee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80006f2:	d105      	bne.n	8000700 <__aeabi_d2iz+0x48>
 80006f4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80006f8:	bf08      	it	eq
 80006fa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80006fe:	4770      	bx	lr
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop

08000708 <__aeabi_frsub>:
 8000708:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800070c:	e002      	b.n	8000714 <__addsf3>
 800070e:	bf00      	nop

08000710 <__aeabi_fsub>:
 8000710:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000714 <__addsf3>:
 8000714:	0042      	lsls	r2, r0, #1
 8000716:	bf1f      	itttt	ne
 8000718:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800071c:	ea92 0f03 	teqne	r2, r3
 8000720:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000724:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000728:	d06a      	beq.n	8000800 <__addsf3+0xec>
 800072a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800072e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000732:	bfc1      	itttt	gt
 8000734:	18d2      	addgt	r2, r2, r3
 8000736:	4041      	eorgt	r1, r0
 8000738:	4048      	eorgt	r0, r1
 800073a:	4041      	eorgt	r1, r0
 800073c:	bfb8      	it	lt
 800073e:	425b      	neglt	r3, r3
 8000740:	2b19      	cmp	r3, #25
 8000742:	bf88      	it	hi
 8000744:	4770      	bxhi	lr
 8000746:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800074a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800074e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000752:	bf18      	it	ne
 8000754:	4240      	negne	r0, r0
 8000756:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800075a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800075e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000762:	bf18      	it	ne
 8000764:	4249      	negne	r1, r1
 8000766:	ea92 0f03 	teq	r2, r3
 800076a:	d03f      	beq.n	80007ec <__addsf3+0xd8>
 800076c:	f1a2 0201 	sub.w	r2, r2, #1
 8000770:	fa41 fc03 	asr.w	ip, r1, r3
 8000774:	eb10 000c 	adds.w	r0, r0, ip
 8000778:	f1c3 0320 	rsb	r3, r3, #32
 800077c:	fa01 f103 	lsl.w	r1, r1, r3
 8000780:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000784:	d502      	bpl.n	800078c <__addsf3+0x78>
 8000786:	4249      	negs	r1, r1
 8000788:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800078c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000790:	d313      	bcc.n	80007ba <__addsf3+0xa6>
 8000792:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000796:	d306      	bcc.n	80007a6 <__addsf3+0x92>
 8000798:	0840      	lsrs	r0, r0, #1
 800079a:	ea4f 0131 	mov.w	r1, r1, rrx
 800079e:	f102 0201 	add.w	r2, r2, #1
 80007a2:	2afe      	cmp	r2, #254	; 0xfe
 80007a4:	d251      	bcs.n	800084a <__addsf3+0x136>
 80007a6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80007aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007ae:	bf08      	it	eq
 80007b0:	f020 0001 	biceq.w	r0, r0, #1
 80007b4:	ea40 0003 	orr.w	r0, r0, r3
 80007b8:	4770      	bx	lr
 80007ba:	0049      	lsls	r1, r1, #1
 80007bc:	eb40 0000 	adc.w	r0, r0, r0
 80007c0:	3a01      	subs	r2, #1
 80007c2:	bf28      	it	cs
 80007c4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80007c8:	d2ed      	bcs.n	80007a6 <__addsf3+0x92>
 80007ca:	fab0 fc80 	clz	ip, r0
 80007ce:	f1ac 0c08 	sub.w	ip, ip, #8
 80007d2:	ebb2 020c 	subs.w	r2, r2, ip
 80007d6:	fa00 f00c 	lsl.w	r0, r0, ip
 80007da:	bfaa      	itet	ge
 80007dc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80007e0:	4252      	neglt	r2, r2
 80007e2:	4318      	orrge	r0, r3
 80007e4:	bfbc      	itt	lt
 80007e6:	40d0      	lsrlt	r0, r2
 80007e8:	4318      	orrlt	r0, r3
 80007ea:	4770      	bx	lr
 80007ec:	f092 0f00 	teq	r2, #0
 80007f0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80007f4:	bf06      	itte	eq
 80007f6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80007fa:	3201      	addeq	r2, #1
 80007fc:	3b01      	subne	r3, #1
 80007fe:	e7b5      	b.n	800076c <__addsf3+0x58>
 8000800:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000804:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000808:	bf18      	it	ne
 800080a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800080e:	d021      	beq.n	8000854 <__addsf3+0x140>
 8000810:	ea92 0f03 	teq	r2, r3
 8000814:	d004      	beq.n	8000820 <__addsf3+0x10c>
 8000816:	f092 0f00 	teq	r2, #0
 800081a:	bf08      	it	eq
 800081c:	4608      	moveq	r0, r1
 800081e:	4770      	bx	lr
 8000820:	ea90 0f01 	teq	r0, r1
 8000824:	bf1c      	itt	ne
 8000826:	2000      	movne	r0, #0
 8000828:	4770      	bxne	lr
 800082a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800082e:	d104      	bne.n	800083a <__addsf3+0x126>
 8000830:	0040      	lsls	r0, r0, #1
 8000832:	bf28      	it	cs
 8000834:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000838:	4770      	bx	lr
 800083a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800083e:	bf3c      	itt	cc
 8000840:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000844:	4770      	bxcc	lr
 8000846:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800084a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800084e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000852:	4770      	bx	lr
 8000854:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000858:	bf16      	itet	ne
 800085a:	4608      	movne	r0, r1
 800085c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000860:	4601      	movne	r1, r0
 8000862:	0242      	lsls	r2, r0, #9
 8000864:	bf06      	itte	eq
 8000866:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800086a:	ea90 0f01 	teqeq	r0, r1
 800086e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000872:	4770      	bx	lr

08000874 <__aeabi_ui2f>:
 8000874:	f04f 0300 	mov.w	r3, #0
 8000878:	e004      	b.n	8000884 <__aeabi_i2f+0x8>
 800087a:	bf00      	nop

0800087c <__aeabi_i2f>:
 800087c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000880:	bf48      	it	mi
 8000882:	4240      	negmi	r0, r0
 8000884:	ea5f 0c00 	movs.w	ip, r0
 8000888:	bf08      	it	eq
 800088a:	4770      	bxeq	lr
 800088c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000890:	4601      	mov	r1, r0
 8000892:	f04f 0000 	mov.w	r0, #0
 8000896:	e01c      	b.n	80008d2 <__aeabi_l2f+0x2a>

08000898 <__aeabi_ul2f>:
 8000898:	ea50 0201 	orrs.w	r2, r0, r1
 800089c:	bf08      	it	eq
 800089e:	4770      	bxeq	lr
 80008a0:	f04f 0300 	mov.w	r3, #0
 80008a4:	e00a      	b.n	80008bc <__aeabi_l2f+0x14>
 80008a6:	bf00      	nop

080008a8 <__aeabi_l2f>:
 80008a8:	ea50 0201 	orrs.w	r2, r0, r1
 80008ac:	bf08      	it	eq
 80008ae:	4770      	bxeq	lr
 80008b0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80008b4:	d502      	bpl.n	80008bc <__aeabi_l2f+0x14>
 80008b6:	4240      	negs	r0, r0
 80008b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008bc:	ea5f 0c01 	movs.w	ip, r1
 80008c0:	bf02      	ittt	eq
 80008c2:	4684      	moveq	ip, r0
 80008c4:	4601      	moveq	r1, r0
 80008c6:	2000      	moveq	r0, #0
 80008c8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80008cc:	bf08      	it	eq
 80008ce:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80008d2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80008d6:	fabc f28c 	clz	r2, ip
 80008da:	3a08      	subs	r2, #8
 80008dc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80008e0:	db10      	blt.n	8000904 <__aeabi_l2f+0x5c>
 80008e2:	fa01 fc02 	lsl.w	ip, r1, r2
 80008e6:	4463      	add	r3, ip
 80008e8:	fa00 fc02 	lsl.w	ip, r0, r2
 80008ec:	f1c2 0220 	rsb	r2, r2, #32
 80008f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80008f4:	fa20 f202 	lsr.w	r2, r0, r2
 80008f8:	eb43 0002 	adc.w	r0, r3, r2
 80008fc:	bf08      	it	eq
 80008fe:	f020 0001 	biceq.w	r0, r0, #1
 8000902:	4770      	bx	lr
 8000904:	f102 0220 	add.w	r2, r2, #32
 8000908:	fa01 fc02 	lsl.w	ip, r1, r2
 800090c:	f1c2 0220 	rsb	r2, r2, #32
 8000910:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000914:	fa21 f202 	lsr.w	r2, r1, r2
 8000918:	eb43 0002 	adc.w	r0, r3, r2
 800091c:	bf08      	it	eq
 800091e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000922:	4770      	bx	lr

08000924 <__aeabi_fmul>:
 8000924:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000928:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800092c:	bf1e      	ittt	ne
 800092e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000932:	ea92 0f0c 	teqne	r2, ip
 8000936:	ea93 0f0c 	teqne	r3, ip
 800093a:	d06f      	beq.n	8000a1c <__aeabi_fmul+0xf8>
 800093c:	441a      	add	r2, r3
 800093e:	ea80 0c01 	eor.w	ip, r0, r1
 8000942:	0240      	lsls	r0, r0, #9
 8000944:	bf18      	it	ne
 8000946:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800094a:	d01e      	beq.n	800098a <__aeabi_fmul+0x66>
 800094c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000950:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000954:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000958:	fba0 3101 	umull	r3, r1, r0, r1
 800095c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000960:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000964:	bf3e      	ittt	cc
 8000966:	0049      	lslcc	r1, r1, #1
 8000968:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800096c:	005b      	lslcc	r3, r3, #1
 800096e:	ea40 0001 	orr.w	r0, r0, r1
 8000972:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000976:	2afd      	cmp	r2, #253	; 0xfd
 8000978:	d81d      	bhi.n	80009b6 <__aeabi_fmul+0x92>
 800097a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800097e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000982:	bf08      	it	eq
 8000984:	f020 0001 	biceq.w	r0, r0, #1
 8000988:	4770      	bx	lr
 800098a:	f090 0f00 	teq	r0, #0
 800098e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000992:	bf08      	it	eq
 8000994:	0249      	lsleq	r1, r1, #9
 8000996:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800099a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800099e:	3a7f      	subs	r2, #127	; 0x7f
 80009a0:	bfc2      	ittt	gt
 80009a2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80009a6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80009aa:	4770      	bxgt	lr
 80009ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009b0:	f04f 0300 	mov.w	r3, #0
 80009b4:	3a01      	subs	r2, #1
 80009b6:	dc5d      	bgt.n	8000a74 <__aeabi_fmul+0x150>
 80009b8:	f112 0f19 	cmn.w	r2, #25
 80009bc:	bfdc      	itt	le
 80009be:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80009c2:	4770      	bxle	lr
 80009c4:	f1c2 0200 	rsb	r2, r2, #0
 80009c8:	0041      	lsls	r1, r0, #1
 80009ca:	fa21 f102 	lsr.w	r1, r1, r2
 80009ce:	f1c2 0220 	rsb	r2, r2, #32
 80009d2:	fa00 fc02 	lsl.w	ip, r0, r2
 80009d6:	ea5f 0031 	movs.w	r0, r1, rrx
 80009da:	f140 0000 	adc.w	r0, r0, #0
 80009de:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80009e2:	bf08      	it	eq
 80009e4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80009e8:	4770      	bx	lr
 80009ea:	f092 0f00 	teq	r2, #0
 80009ee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80009f2:	bf02      	ittt	eq
 80009f4:	0040      	lsleq	r0, r0, #1
 80009f6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80009fa:	3a01      	subeq	r2, #1
 80009fc:	d0f9      	beq.n	80009f2 <__aeabi_fmul+0xce>
 80009fe:	ea40 000c 	orr.w	r0, r0, ip
 8000a02:	f093 0f00 	teq	r3, #0
 8000a06:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a0a:	bf02      	ittt	eq
 8000a0c:	0049      	lsleq	r1, r1, #1
 8000a0e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a12:	3b01      	subeq	r3, #1
 8000a14:	d0f9      	beq.n	8000a0a <__aeabi_fmul+0xe6>
 8000a16:	ea41 010c 	orr.w	r1, r1, ip
 8000a1a:	e78f      	b.n	800093c <__aeabi_fmul+0x18>
 8000a1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a20:	ea92 0f0c 	teq	r2, ip
 8000a24:	bf18      	it	ne
 8000a26:	ea93 0f0c 	teqne	r3, ip
 8000a2a:	d00a      	beq.n	8000a42 <__aeabi_fmul+0x11e>
 8000a2c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000a30:	bf18      	it	ne
 8000a32:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a36:	d1d8      	bne.n	80009ea <__aeabi_fmul+0xc6>
 8000a38:	ea80 0001 	eor.w	r0, r0, r1
 8000a3c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000a40:	4770      	bx	lr
 8000a42:	f090 0f00 	teq	r0, #0
 8000a46:	bf17      	itett	ne
 8000a48:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000a4c:	4608      	moveq	r0, r1
 8000a4e:	f091 0f00 	teqne	r1, #0
 8000a52:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000a56:	d014      	beq.n	8000a82 <__aeabi_fmul+0x15e>
 8000a58:	ea92 0f0c 	teq	r2, ip
 8000a5c:	d101      	bne.n	8000a62 <__aeabi_fmul+0x13e>
 8000a5e:	0242      	lsls	r2, r0, #9
 8000a60:	d10f      	bne.n	8000a82 <__aeabi_fmul+0x15e>
 8000a62:	ea93 0f0c 	teq	r3, ip
 8000a66:	d103      	bne.n	8000a70 <__aeabi_fmul+0x14c>
 8000a68:	024b      	lsls	r3, r1, #9
 8000a6a:	bf18      	it	ne
 8000a6c:	4608      	movne	r0, r1
 8000a6e:	d108      	bne.n	8000a82 <__aeabi_fmul+0x15e>
 8000a70:	ea80 0001 	eor.w	r0, r0, r1
 8000a74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000a78:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a80:	4770      	bx	lr
 8000a82:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a86:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_fdiv>:
 8000a8c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000a90:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000a94:	bf1e      	ittt	ne
 8000a96:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000a9a:	ea92 0f0c 	teqne	r2, ip
 8000a9e:	ea93 0f0c 	teqne	r3, ip
 8000aa2:	d069      	beq.n	8000b78 <__aeabi_fdiv+0xec>
 8000aa4:	eba2 0203 	sub.w	r2, r2, r3
 8000aa8:	ea80 0c01 	eor.w	ip, r0, r1
 8000aac:	0249      	lsls	r1, r1, #9
 8000aae:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ab2:	d037      	beq.n	8000b24 <__aeabi_fdiv+0x98>
 8000ab4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ab8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000abc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ac0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ac4:	428b      	cmp	r3, r1
 8000ac6:	bf38      	it	cc
 8000ac8:	005b      	lslcc	r3, r3, #1
 8000aca:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ace:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ad2:	428b      	cmp	r3, r1
 8000ad4:	bf24      	itt	cs
 8000ad6:	1a5b      	subcs	r3, r3, r1
 8000ad8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000adc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ae0:	bf24      	itt	cs
 8000ae2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ae6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000aea:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000aee:	bf24      	itt	cs
 8000af0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000af4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000af8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000afc:	bf24      	itt	cs
 8000afe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000b02:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b06:	011b      	lsls	r3, r3, #4
 8000b08:	bf18      	it	ne
 8000b0a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000b0e:	d1e0      	bne.n	8000ad2 <__aeabi_fdiv+0x46>
 8000b10:	2afd      	cmp	r2, #253	; 0xfd
 8000b12:	f63f af50 	bhi.w	80009b6 <__aeabi_fmul+0x92>
 8000b16:	428b      	cmp	r3, r1
 8000b18:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b1c:	bf08      	it	eq
 8000b1e:	f020 0001 	biceq.w	r0, r0, #1
 8000b22:	4770      	bx	lr
 8000b24:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000b28:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b2c:	327f      	adds	r2, #127	; 0x7f
 8000b2e:	bfc2      	ittt	gt
 8000b30:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000b34:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b38:	4770      	bxgt	lr
 8000b3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3e:	f04f 0300 	mov.w	r3, #0
 8000b42:	3a01      	subs	r2, #1
 8000b44:	e737      	b.n	80009b6 <__aeabi_fmul+0x92>
 8000b46:	f092 0f00 	teq	r2, #0
 8000b4a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000b4e:	bf02      	ittt	eq
 8000b50:	0040      	lsleq	r0, r0, #1
 8000b52:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000b56:	3a01      	subeq	r2, #1
 8000b58:	d0f9      	beq.n	8000b4e <__aeabi_fdiv+0xc2>
 8000b5a:	ea40 000c 	orr.w	r0, r0, ip
 8000b5e:	f093 0f00 	teq	r3, #0
 8000b62:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b66:	bf02      	ittt	eq
 8000b68:	0049      	lsleq	r1, r1, #1
 8000b6a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000b6e:	3b01      	subeq	r3, #1
 8000b70:	d0f9      	beq.n	8000b66 <__aeabi_fdiv+0xda>
 8000b72:	ea41 010c 	orr.w	r1, r1, ip
 8000b76:	e795      	b.n	8000aa4 <__aeabi_fdiv+0x18>
 8000b78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000b7c:	ea92 0f0c 	teq	r2, ip
 8000b80:	d108      	bne.n	8000b94 <__aeabi_fdiv+0x108>
 8000b82:	0242      	lsls	r2, r0, #9
 8000b84:	f47f af7d 	bne.w	8000a82 <__aeabi_fmul+0x15e>
 8000b88:	ea93 0f0c 	teq	r3, ip
 8000b8c:	f47f af70 	bne.w	8000a70 <__aeabi_fmul+0x14c>
 8000b90:	4608      	mov	r0, r1
 8000b92:	e776      	b.n	8000a82 <__aeabi_fmul+0x15e>
 8000b94:	ea93 0f0c 	teq	r3, ip
 8000b98:	d104      	bne.n	8000ba4 <__aeabi_fdiv+0x118>
 8000b9a:	024b      	lsls	r3, r1, #9
 8000b9c:	f43f af4c 	beq.w	8000a38 <__aeabi_fmul+0x114>
 8000ba0:	4608      	mov	r0, r1
 8000ba2:	e76e      	b.n	8000a82 <__aeabi_fmul+0x15e>
 8000ba4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ba8:	bf18      	it	ne
 8000baa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000bae:	d1ca      	bne.n	8000b46 <__aeabi_fdiv+0xba>
 8000bb0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000bb4:	f47f af5c 	bne.w	8000a70 <__aeabi_fmul+0x14c>
 8000bb8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000bbc:	f47f af3c 	bne.w	8000a38 <__aeabi_fmul+0x114>
 8000bc0:	e75f      	b.n	8000a82 <__aeabi_fmul+0x15e>
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_f2iz>:
 8000bc4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000bc8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000bcc:	d30f      	bcc.n	8000bee <__aeabi_f2iz+0x2a>
 8000bce:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000bd2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000bd6:	d90d      	bls.n	8000bf4 <__aeabi_f2iz+0x30>
 8000bd8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000bdc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000be4:	fa23 f002 	lsr.w	r0, r3, r2
 8000be8:	bf18      	it	ne
 8000bea:	4240      	negne	r0, r0
 8000bec:	4770      	bx	lr
 8000bee:	f04f 0000 	mov.w	r0, #0
 8000bf2:	4770      	bx	lr
 8000bf4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000bf8:	d101      	bne.n	8000bfe <__aeabi_f2iz+0x3a>
 8000bfa:	0242      	lsls	r2, r0, #9
 8000bfc:	d105      	bne.n	8000c0a <__aeabi_f2iz+0x46>
 8000bfe:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000c02:	bf08      	it	eq
 8000c04:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c08:	4770      	bx	lr
 8000c0a:	f04f 0000 	mov.w	r0, #0
 8000c0e:	4770      	bx	lr

08000c10 <__aeabi_f2uiz>:
 8000c10:	0042      	lsls	r2, r0, #1
 8000c12:	d20e      	bcs.n	8000c32 <__aeabi_f2uiz+0x22>
 8000c14:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000c18:	d30b      	bcc.n	8000c32 <__aeabi_f2uiz+0x22>
 8000c1a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000c1e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c22:	d409      	bmi.n	8000c38 <__aeabi_f2uiz+0x28>
 8000c24:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c2c:	fa23 f002 	lsr.w	r0, r3, r2
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr
 8000c38:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c3c:	d101      	bne.n	8000c42 <__aeabi_f2uiz+0x32>
 8000c3e:	0242      	lsls	r2, r0, #9
 8000c40:	d102      	bne.n	8000c48 <__aeabi_f2uiz+0x38>
 8000c42:	f04f 30ff 	mov.w	r0, #4294967295
 8000c46:	4770      	bx	lr
 8000c48:	f04f 0000 	mov.w	r0, #0
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop

08000c50 <__aeabi_ldivmod>:
 8000c50:	b97b      	cbnz	r3, 8000c72 <__aeabi_ldivmod+0x22>
 8000c52:	b972      	cbnz	r2, 8000c72 <__aeabi_ldivmod+0x22>
 8000c54:	2900      	cmp	r1, #0
 8000c56:	bfbe      	ittt	lt
 8000c58:	2000      	movlt	r0, #0
 8000c5a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c5e:	e006      	blt.n	8000c6e <__aeabi_ldivmod+0x1e>
 8000c60:	bf08      	it	eq
 8000c62:	2800      	cmpeq	r0, #0
 8000c64:	bf1c      	itt	ne
 8000c66:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c6a:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6e:	f000 b9bf 	b.w	8000ff0 <__aeabi_idiv0>
 8000c72:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c76:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7a:	2900      	cmp	r1, #0
 8000c7c:	db09      	blt.n	8000c92 <__aeabi_ldivmod+0x42>
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	db1a      	blt.n	8000cb8 <__aeabi_ldivmod+0x68>
 8000c82:	f000 f84d 	bl	8000d20 <__udivmoddi4>
 8000c86:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c8e:	b004      	add	sp, #16
 8000c90:	4770      	bx	lr
 8000c92:	4240      	negs	r0, r0
 8000c94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	db1b      	blt.n	8000cd4 <__aeabi_ldivmod+0x84>
 8000c9c:	f000 f840 	bl	8000d20 <__udivmoddi4>
 8000ca0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca8:	b004      	add	sp, #16
 8000caa:	4240      	negs	r0, r0
 8000cac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb0:	4252      	negs	r2, r2
 8000cb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cb6:	4770      	bx	lr
 8000cb8:	4252      	negs	r2, r2
 8000cba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cbe:	f000 f82f 	bl	8000d20 <__udivmoddi4>
 8000cc2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cca:	b004      	add	sp, #16
 8000ccc:	4240      	negs	r0, r0
 8000cce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd2:	4770      	bx	lr
 8000cd4:	4252      	negs	r2, r2
 8000cd6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cda:	f000 f821 	bl	8000d20 <__udivmoddi4>
 8000cde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce6:	b004      	add	sp, #16
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr

08000cf0 <__aeabi_uldivmod>:
 8000cf0:	b953      	cbnz	r3, 8000d08 <__aeabi_uldivmod+0x18>
 8000cf2:	b94a      	cbnz	r2, 8000d08 <__aeabi_uldivmod+0x18>
 8000cf4:	2900      	cmp	r1, #0
 8000cf6:	bf08      	it	eq
 8000cf8:	2800      	cmpeq	r0, #0
 8000cfa:	bf1c      	itt	ne
 8000cfc:	f04f 31ff 	movne.w	r1, #4294967295
 8000d00:	f04f 30ff 	movne.w	r0, #4294967295
 8000d04:	f000 b974 	b.w	8000ff0 <__aeabi_idiv0>
 8000d08:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d10:	f000 f806 	bl	8000d20 <__udivmoddi4>
 8000d14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1c:	b004      	add	sp, #16
 8000d1e:	4770      	bx	lr

08000d20 <__udivmoddi4>:
 8000d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d24:	9e08      	ldr	r6, [sp, #32]
 8000d26:	460d      	mov	r5, r1
 8000d28:	4604      	mov	r4, r0
 8000d2a:	4688      	mov	r8, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14d      	bne.n	8000dcc <__udivmoddi4+0xac>
 8000d30:	428a      	cmp	r2, r1
 8000d32:	4694      	mov	ip, r2
 8000d34:	d968      	bls.n	8000e08 <__udivmoddi4+0xe8>
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	b152      	cbz	r2, 8000d52 <__udivmoddi4+0x32>
 8000d3c:	fa01 f302 	lsl.w	r3, r1, r2
 8000d40:	f1c2 0120 	rsb	r1, r2, #32
 8000d44:	fa20 f101 	lsr.w	r1, r0, r1
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	ea41 0803 	orr.w	r8, r1, r3
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000d56:	0c21      	lsrs	r1, r4, #16
 8000d58:	fbb8 fef5 	udiv	lr, r8, r5
 8000d5c:	fa1f f78c 	uxth.w	r7, ip
 8000d60:	fb05 831e 	mls	r3, r5, lr, r8
 8000d64:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d68:	fb0e f107 	mul.w	r1, lr, r7
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x68>
 8000d70:	eb1c 0303 	adds.w	r3, ip, r3
 8000d74:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000d78:	f080 811e 	bcs.w	8000fb8 <__udivmoddi4+0x298>
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	f240 811b 	bls.w	8000fb8 <__udivmoddi4+0x298>
 8000d82:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f5 	udiv	r0, r3, r5
 8000d90:	fb05 3310 	mls	r3, r5, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x96>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 8108 	bcs.w	8000fbc <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8105 	bls.w	8000fbc <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	1be4      	subs	r4, r4, r7
 8000db8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	b11e      	cbz	r6, 8000dc8 <__udivmoddi4+0xa8>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dcc:	428b      	cmp	r3, r1
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0xc2>
 8000dd0:	2e00      	cmp	r6, #0
 8000dd2:	f000 80ee 	beq.w	8000fb2 <__udivmoddi4+0x292>
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e9c6 0500 	strd	r0, r5, [r6]
 8000ddc:	4608      	mov	r0, r1
 8000dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de2:	fab3 f183 	clz	r1, r3
 8000de6:	2900      	cmp	r1, #0
 8000de8:	d14a      	bne.n	8000e80 <__udivmoddi4+0x160>
 8000dea:	42ab      	cmp	r3, r5
 8000dec:	d302      	bcc.n	8000df4 <__udivmoddi4+0xd4>
 8000dee:	4282      	cmp	r2, r0
 8000df0:	f200 80f9 	bhi.w	8000fe6 <__udivmoddi4+0x2c6>
 8000df4:	1a84      	subs	r4, r0, r2
 8000df6:	eb65 0303 	sbc.w	r3, r5, r3
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	4698      	mov	r8, r3
 8000dfe:	2e00      	cmp	r6, #0
 8000e00:	d0e2      	beq.n	8000dc8 <__udivmoddi4+0xa8>
 8000e02:	e9c6 4800 	strd	r4, r8, [r6]
 8000e06:	e7df      	b.n	8000dc8 <__udivmoddi4+0xa8>
 8000e08:	b902      	cbnz	r2, 8000e0c <__udivmoddi4+0xec>
 8000e0a:	deff      	udf	#255	; 0xff
 8000e0c:	fab2 f282 	clz	r2, r2
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	f040 8091 	bne.w	8000f38 <__udivmoddi4+0x218>
 8000e16:	eba1 050c 	sub.w	r5, r1, ip
 8000e1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1e:	fa1f fe8c 	uxth.w	lr, ip
 8000e22:	2101      	movs	r1, #1
 8000e24:	fbb5 f3f7 	udiv	r3, r5, r7
 8000e28:	fb07 5013 	mls	r0, r7, r3, r5
 8000e2c:	0c25      	lsrs	r5, r4, #16
 8000e2e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000e32:	fb0e f003 	mul.w	r0, lr, r3
 8000e36:	42a8      	cmp	r0, r5
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x12c>
 8000e3a:	eb1c 0505 	adds.w	r5, ip, r5
 8000e3e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e42:	d202      	bcs.n	8000e4a <__udivmoddi4+0x12a>
 8000e44:	42a8      	cmp	r0, r5
 8000e46:	f200 80cb 	bhi.w	8000fe0 <__udivmoddi4+0x2c0>
 8000e4a:	4643      	mov	r3, r8
 8000e4c:	1a2d      	subs	r5, r5, r0
 8000e4e:	b2a4      	uxth	r4, r4
 8000e50:	fbb5 f0f7 	udiv	r0, r5, r7
 8000e54:	fb07 5510 	mls	r5, r7, r0, r5
 8000e58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e60:	45a6      	cmp	lr, r4
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x156>
 8000e64:	eb1c 0404 	adds.w	r4, ip, r4
 8000e68:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e6c:	d202      	bcs.n	8000e74 <__udivmoddi4+0x154>
 8000e6e:	45a6      	cmp	lr, r4
 8000e70:	f200 80bb 	bhi.w	8000fea <__udivmoddi4+0x2ca>
 8000e74:	4628      	mov	r0, r5
 8000e76:	eba4 040e 	sub.w	r4, r4, lr
 8000e7a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e7e:	e79e      	b.n	8000dbe <__udivmoddi4+0x9e>
 8000e80:	f1c1 0720 	rsb	r7, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8e:	fa20 f407 	lsr.w	r4, r0, r7
 8000e92:	fa05 f301 	lsl.w	r3, r5, r1
 8000e96:	431c      	orrs	r4, r3
 8000e98:	40fd      	lsrs	r5, r7
 8000e9a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e9e:	fa00 f301 	lsl.w	r3, r0, r1
 8000ea2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ea6:	0c20      	lsrs	r0, r4, #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb0:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000eb4:	fb08 f00e 	mul.w	r0, r8, lr
 8000eb8:	42a8      	cmp	r0, r5
 8000eba:	fa02 f201 	lsl.w	r2, r2, r1
 8000ebe:	d90b      	bls.n	8000ed8 <__udivmoddi4+0x1b8>
 8000ec0:	eb1c 0505 	adds.w	r5, ip, r5
 8000ec4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec8:	f080 8088 	bcs.w	8000fdc <__udivmoddi4+0x2bc>
 8000ecc:	42a8      	cmp	r0, r5
 8000ece:	f240 8085 	bls.w	8000fdc <__udivmoddi4+0x2bc>
 8000ed2:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed6:	4465      	add	r5, ip
 8000ed8:	1a2d      	subs	r5, r5, r0
 8000eda:	b2a4      	uxth	r4, r4
 8000edc:	fbb5 f0f9 	udiv	r0, r5, r9
 8000ee0:	fb09 5510 	mls	r5, r9, r0, r5
 8000ee4:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000ee8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000eec:	45ae      	cmp	lr, r5
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1e2>
 8000ef0:	eb1c 0505 	adds.w	r5, ip, r5
 8000ef4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ef8:	d26c      	bcs.n	8000fd4 <__udivmoddi4+0x2b4>
 8000efa:	45ae      	cmp	lr, r5
 8000efc:	d96a      	bls.n	8000fd4 <__udivmoddi4+0x2b4>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4465      	add	r5, ip
 8000f02:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f06:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0a:	eba5 050e 	sub.w	r5, r5, lr
 8000f0e:	42a5      	cmp	r5, r4
 8000f10:	46c8      	mov	r8, r9
 8000f12:	46a6      	mov	lr, r4
 8000f14:	d356      	bcc.n	8000fc4 <__udivmoddi4+0x2a4>
 8000f16:	d053      	beq.n	8000fc0 <__udivmoddi4+0x2a0>
 8000f18:	b15e      	cbz	r6, 8000f32 <__udivmoddi4+0x212>
 8000f1a:	ebb3 0208 	subs.w	r2, r3, r8
 8000f1e:	eb65 050e 	sbc.w	r5, r5, lr
 8000f22:	fa05 f707 	lsl.w	r7, r5, r7
 8000f26:	fa22 f301 	lsr.w	r3, r2, r1
 8000f2a:	40cd      	lsrs	r5, r1
 8000f2c:	431f      	orrs	r7, r3
 8000f2e:	e9c6 7500 	strd	r7, r5, [r6]
 8000f32:	2100      	movs	r1, #0
 8000f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa25 f303 	lsr.w	r3, r5, r3
 8000f48:	4095      	lsls	r5, r2
 8000f4a:	430d      	orrs	r5, r1
 8000f4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f50:	fa1f fe8c 	uxth.w	lr, ip
 8000f54:	fbb3 f1f7 	udiv	r1, r3, r7
 8000f58:	fb07 3011 	mls	r0, r7, r1, r3
 8000f5c:	0c2b      	lsrs	r3, r5, #16
 8000f5e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000f62:	fb01 f00e 	mul.w	r0, r1, lr
 8000f66:	4298      	cmp	r0, r3
 8000f68:	fa04 f402 	lsl.w	r4, r4, r2
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x260>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f101 38ff 	add.w	r8, r1, #4294967295
 8000f76:	d22f      	bcs.n	8000fd8 <__udivmoddi4+0x2b8>
 8000f78:	4298      	cmp	r0, r3
 8000f7a:	d92d      	bls.n	8000fd8 <__udivmoddi4+0x2b8>
 8000f7c:	3902      	subs	r1, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a1b      	subs	r3, r3, r0
 8000f82:	b2ad      	uxth	r5, r5
 8000f84:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f88:	fb07 3310 	mls	r3, r7, r0, r3
 8000f8c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000f90:	fb00 f30e 	mul.w	r3, r0, lr
 8000f94:	42ab      	cmp	r3, r5
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x28a>
 8000f98:	eb1c 0505 	adds.w	r5, ip, r5
 8000f9c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fa0:	d216      	bcs.n	8000fd0 <__udivmoddi4+0x2b0>
 8000fa2:	42ab      	cmp	r3, r5
 8000fa4:	d914      	bls.n	8000fd0 <__udivmoddi4+0x2b0>
 8000fa6:	3802      	subs	r0, #2
 8000fa8:	4465      	add	r5, ip
 8000faa:	1aed      	subs	r5, r5, r3
 8000fac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000fb0:	e738      	b.n	8000e24 <__udivmoddi4+0x104>
 8000fb2:	4631      	mov	r1, r6
 8000fb4:	4630      	mov	r0, r6
 8000fb6:	e707      	b.n	8000dc8 <__udivmoddi4+0xa8>
 8000fb8:	4686      	mov	lr, r0
 8000fba:	e6e5      	b.n	8000d88 <__udivmoddi4+0x68>
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	e6fa      	b.n	8000db6 <__udivmoddi4+0x96>
 8000fc0:	454b      	cmp	r3, r9
 8000fc2:	d2a9      	bcs.n	8000f18 <__udivmoddi4+0x1f8>
 8000fc4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fcc:	3801      	subs	r0, #1
 8000fce:	e7a3      	b.n	8000f18 <__udivmoddi4+0x1f8>
 8000fd0:	4640      	mov	r0, r8
 8000fd2:	e7ea      	b.n	8000faa <__udivmoddi4+0x28a>
 8000fd4:	4620      	mov	r0, r4
 8000fd6:	e794      	b.n	8000f02 <__udivmoddi4+0x1e2>
 8000fd8:	4641      	mov	r1, r8
 8000fda:	e7d1      	b.n	8000f80 <__udivmoddi4+0x260>
 8000fdc:	46d0      	mov	r8, sl
 8000fde:	e77b      	b.n	8000ed8 <__udivmoddi4+0x1b8>
 8000fe0:	3b02      	subs	r3, #2
 8000fe2:	4465      	add	r5, ip
 8000fe4:	e732      	b.n	8000e4c <__udivmoddi4+0x12c>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e709      	b.n	8000dfe <__udivmoddi4+0xde>
 8000fea:	4464      	add	r4, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e742      	b.n	8000e76 <__udivmoddi4+0x156>

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000ff4:	b508      	push	{r3, lr}

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000ff6:	4813      	ldr	r0, [pc, #76]	; (8001044 <MX_ADC_Init+0x50>)
 8000ff8:	4b13      	ldr	r3, [pc, #76]	; (8001048 <MX_ADC_Init+0x54>)
 8000ffa:	6003      	str	r3, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ffc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001000:	6043      	str	r3, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001002:	2300      	movs	r3, #0
 8001004:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001006:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001008:	6103      	str	r3, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800100a:	2204      	movs	r2, #4
 800100c:	6142      	str	r2, [r0, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800100e:	7603      	strb	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001010:	7643      	strb	r3, [r0, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001012:	7683      	strb	r3, [r0, #26]
  hadc.Init.NbrOfConversion = 1;
 8001014:	2201      	movs	r2, #1
 8001016:	61c2      	str	r2, [r0, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001018:	f880 3020 	strb.w	r3, [r0, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800101c:	6243      	str	r3, [r0, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800101e:	6283      	str	r3, [r0, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001020:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001024:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001028:	6302      	str	r2, [r0, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 800102a:	2207      	movs	r2, #7
 800102c:	6342      	str	r2, [r0, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 800102e:	6382      	str	r2, [r0, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8001030:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001034:	64c3      	str	r3, [r0, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001036:	f002 fe73 	bl	8003d20 <HAL_ADC_Init>
 800103a:	b900      	cbnz	r0, 800103e <MX_ADC_Init+0x4a>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800103c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800103e:	f000 fb0f 	bl	8001660 <Error_Handler>
}
 8001042:	e7fb      	b.n	800103c <MX_ADC_Init+0x48>
 8001044:	2000019c 	.word	0x2000019c
 8001048:	40012400 	.word	0x40012400

0800104c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 800104c:	6802      	ldr	r2, [r0, #0]
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <HAL_ADC_MspInit+0x28>)
 8001050:	429a      	cmp	r2, r3
 8001052:	d000      	beq.n	8001056 <HAL_ADC_MspInit+0xa>
 8001054:	4770      	bx	lr
{
 8001056:	b082      	sub	sp, #8
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800105c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800105e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001062:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001066:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800106a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800106c:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_ADC_CLK_ENABLE();
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 800106e:	b002      	add	sp, #8
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	40012400 	.word	0x40012400

08001078 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8001078:	6802      	ldr	r2, [r0, #0]
 800107a:	4b05      	ldr	r3, [pc, #20]	; (8001090 <HAL_ADC_MspDeInit+0x18>)
 800107c:	429a      	cmp	r2, r3
 800107e:	d000      	beq.n	8001082 <HAL_ADC_MspDeInit+0xa>
    __HAL_RCC_ADC_CLK_DISABLE();
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8001080:	4770      	bx	lr
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8001082:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001086:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8001088:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800108c:	6613      	str	r3, [r2, #96]	; 0x60
 800108e:	e7f7      	b.n	8001080 <HAL_ADC_MspDeInit+0x8>
 8001090:	40012400 	.word	0x40012400

08001094 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001094:	b530      	push	{r4, r5, lr}
 8001096:	b085      	sub	sp, #20
 8001098:	4604      	mov	r4, r0
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 800109a:	2300      	movs	r3, #0
 800109c:	9301      	str	r3, [sp, #4]
 800109e:	9302      	str	r3, [sp, #8]
 80010a0:	9303      	str	r3, [sp, #12]

  MX_ADC_Init();
 80010a2:	f7ff ffa7 	bl	8000ff4 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 80010a6:	4816      	ldr	r0, [pc, #88]	; (8001100 <ADC_ReadChannels+0x6c>)
 80010a8:	f003 fa7e 	bl	80045a8 <HAL_ADCEx_Calibration_Start>
 80010ac:	b9f8      	cbnz	r0, 80010ee <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 80010ae:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010b0:	2300      	movs	r3, #0
 80010b2:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80010b4:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80010b6:	a901      	add	r1, sp, #4
 80010b8:	4811      	ldr	r0, [pc, #68]	; (8001100 <ADC_ReadChannels+0x6c>)
 80010ba:	f002 ffbf 	bl	800403c <HAL_ADC_ConfigChannel>
 80010be:	b9c8      	cbnz	r0, 80010f4 <ADC_ReadChannels+0x60>
  {
    Error_Handler();
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 80010c0:	480f      	ldr	r0, [pc, #60]	; (8001100 <ADC_ReadChannels+0x6c>)
 80010c2:	f003 f97f 	bl	80043c4 <HAL_ADC_Start>
 80010c6:	b9c0      	cbnz	r0, 80010fa <ADC_ReadChannels+0x66>
  {
    /* Start Error */
    Error_Handler();
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80010c8:	4c0d      	ldr	r4, [pc, #52]	; (8001100 <ADC_ReadChannels+0x6c>)
 80010ca:	f04f 31ff 	mov.w	r1, #4294967295
 80010ce:	4620      	mov	r0, r4
 80010d0:	f002 ff52 	bl	8003f78 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 80010d4:	4620      	mov	r0, r4
 80010d6:	f003 fa47 	bl	8004568 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 80010da:	4620      	mov	r0, r4
 80010dc:	f002 ffab 	bl	8004036 <HAL_ADC_GetValue>
 80010e0:	4605      	mov	r5, r0

  HAL_ADC_DeInit(&hadc);
 80010e2:	4620      	mov	r0, r4
 80010e4:	f003 f9ea 	bl	80044bc <HAL_ADC_DeInit>

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 80010e8:	4628      	mov	r0, r5
 80010ea:	b005      	add	sp, #20
 80010ec:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 80010ee:	f000 fab7 	bl	8001660 <Error_Handler>
 80010f2:	e7dc      	b.n	80010ae <ADC_ReadChannels+0x1a>
    Error_Handler();
 80010f4:	f000 fab4 	bl	8001660 <Error_Handler>
 80010f8:	e7e2      	b.n	80010c0 <ADC_ReadChannels+0x2c>
    Error_Handler();
 80010fa:	f000 fab1 	bl	8001660 <Error_Handler>
 80010fe:	e7e3      	b.n	80010c8 <ADC_ReadChannels+0x34>
 8001100:	2000019c 	.word	0x2000019c

08001104 <SYS_InitMeasurement>:
  hadc.Instance = ADC;
 8001104:	4b01      	ldr	r3, [pc, #4]	; (800110c <SYS_InitMeasurement+0x8>)
 8001106:	4a02      	ldr	r2, [pc, #8]	; (8001110 <SYS_InitMeasurement+0xc>)
 8001108:	601a      	str	r2, [r3, #0]
}
 800110a:	4770      	bx	lr
 800110c:	2000019c 	.word	0x2000019c
 8001110:	40012400 	.word	0x40012400

08001114 <SYS_GetBatteryLevel>:
{
 8001114:	b508      	push	{r3, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8001116:	480d      	ldr	r0, [pc, #52]	; (800114c <SYS_GetBatteryLevel+0x38>)
 8001118:	f7ff ffbc 	bl	8001094 <ADC_ReadChannels>
  if (measuredLevel == 0)
 800111c:	b1a0      	cbz	r0, 8001148 <SYS_GetBatteryLevel+0x34>
 800111e:	4602      	mov	r2, r0
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8001120:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <SYS_GetBatteryLevel+0x3c>)
 8001122:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8001126:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800112a:	428b      	cmp	r3, r1
 800112c:	d007      	beq.n	800113e <SYS_GetBatteryLevel+0x2a>
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 800112e:	f640 40e4 	movw	r0, #3300	; 0xce4
 8001132:	fb03 f000 	mul.w	r0, r3, r0
 8001136:	fbb0 f0f2 	udiv	r0, r0, r2
 800113a:	b280      	uxth	r0, r0
 800113c:	e005      	b.n	800114a <SYS_GetBatteryLevel+0x36>
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 800113e:	4805      	ldr	r0, [pc, #20]	; (8001154 <SYS_GetBatteryLevel+0x40>)
 8001140:	fbb0 f0f2 	udiv	r0, r0, r2
 8001144:	b280      	uxth	r0, r0
 8001146:	e000      	b.n	800114a <SYS_GetBatteryLevel+0x36>
    batteryLevelmV = 0;
 8001148:	2000      	movs	r0, #0
}
 800114a:	bd08      	pop	{r3, pc}
 800114c:	b4002000 	.word	0xb4002000
 8001150:	1fff7500 	.word	0x1fff7500
 8001154:	004c08d8 	.word	0x004c08d8

08001158 <SYS_GetTemperatureLevel>:
{
 8001158:	b510      	push	{r4, lr}
 800115a:	b082      	sub	sp, #8
  __IO int16_t temperatureDegreeC = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 8001162:	f7ff ffd7 	bl	8001114 <SYS_GetBatteryLevel>
 8001166:	4604      	mov	r4, r0
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8001168:	4821      	ldr	r0, [pc, #132]	; (80011f0 <SYS_GetTemperatureLevel+0x98>)
 800116a:	f7ff ff93 	bl	8001094 <ADC_ReadChannels>
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 800116e:	4b21      	ldr	r3, [pc, #132]	; (80011f4 <SYS_GetTemperatureLevel+0x9c>)
 8001170:	f8b3 20c8 	ldrh.w	r2, [r3, #200]	; 0xc8
 8001174:	f8b3 10a8 	ldrh.w	r1, [r3, #168]	; 0xa8
 8001178:	428a      	cmp	r2, r1
 800117a:	d01d      	beq.n	80011b8 <SYS_GetTemperatureLevel+0x60>
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 800117c:	fb00 f304 	mul.w	r3, r0, r4
 8001180:	089b      	lsrs	r3, r3, #2
 8001182:	4c1d      	ldr	r4, [pc, #116]	; (80011f8 <SYS_GetTemperatureLevel+0xa0>)
 8001184:	fba4 0303 	umull	r0, r3, r4, r3
 8001188:	ebc1 1353 	rsb	r3, r1, r3, lsr #5
 800118c:	2064      	movs	r0, #100	; 0x64
 800118e:	fb00 f303 	mul.w	r3, r0, r3
 8001192:	1a52      	subs	r2, r2, r1
 8001194:	fb93 f3f2 	sdiv	r3, r3, r2
 8001198:	331e      	adds	r3, #30
 800119a:	b21b      	sxth	r3, r3
 800119c:	f8ad 3006 	strh.w	r3, [sp, #6]
  temperatureDegreeC <<= 8;
 80011a0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80011a4:	b21b      	sxth	r3, r3
 80011a6:	021b      	lsls	r3, r3, #8
 80011a8:	b21b      	sxth	r3, r3
 80011aa:	f8ad 3006 	strh.w	r3, [sp, #6]
  return (int16_t) temperatureDegreeC;
 80011ae:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}
 80011b2:	b200      	sxth	r0, r0
 80011b4:	b002      	add	sp, #8
 80011b6:	bd10      	pop	{r4, pc}
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 80011b8:	fb00 f404 	mul.w	r4, r0, r4
 80011bc:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <SYS_GetTemperatureLevel+0xa4>)
 80011be:	fba3 2304 	umull	r2, r3, r3, r4
 80011c2:	1ae4      	subs	r4, r4, r3
 80011c4:	eb03 0454 	add.w	r4, r3, r4, lsr #1
 80011c8:	0ae4      	lsrs	r4, r4, #11
 80011ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ce:	fb03 f404 	mul.w	r4, r3, r4
 80011d2:	f5a4 2439 	sub.w	r4, r4, #757760	; 0xb9000
 80011d6:	f5a4 640c 	sub.w	r4, r4, #2240	; 0x8c0
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <SYS_GetTemperatureLevel+0xa8>)
 80011dc:	fb83 2304 	smull	r2, r3, r3, r4
 80011e0:	17e4      	asrs	r4, r4, #31
 80011e2:	ebc4 24a3 	rsb	r4, r4, r3, asr #10
 80011e6:	341e      	adds	r4, #30
 80011e8:	b224      	sxth	r4, r4
 80011ea:	f8ad 4006 	strh.w	r4, [sp, #6]
 80011ee:	e7d7      	b.n	80011a0 <SYS_GetTemperatureLevel+0x48>
 80011f0:	b0001000 	.word	0xb0001000
 80011f4:	1fff7500 	.word	0x1fff7500
 80011f8:	09ee009f 	.word	0x09ee009f
 80011fc:	00100101 	.word	0x00100101
 8001200:	68db8bad 	.word	0x68db8bad

08001204 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001204:	b500      	push	{lr}
 8001206:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800120c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800120e:	f042 0204 	orr.w	r2, r2, #4
 8001212:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001214:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001216:	f002 0204 	and.w	r2, r2, #4
 800121a:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800121c:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800121e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001220:	f042 0201 	orr.w	r2, r2, #1
 8001224:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800122e:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 8001230:	2200      	movs	r2, #0
 8001232:	2102      	movs	r1, #2
 8001234:	200f      	movs	r0, #15
 8001236:	f003 fa69 	bl	800470c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800123a:	200f      	movs	r0, #15
 800123c:	f003 fa9e 	bl	800477c <HAL_NVIC_EnableIRQ>

}
 8001240:	b003      	add	sp, #12
 8001242:	f85d fb04 	ldr.w	pc, [sp], #4

08001246 <FLASH_IF_IsEmpty>:
  /* USER CODE END FLASH_IF_IsEmpty_1 */
  uint64_t *addr64;
  uint32_t i;

  /* start memory NOT 64bits aligned */
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001246:	e000      	b.n	800124a <FLASH_IF_IsEmpty+0x4>
  {
    if (*addr++ != UINT8_MAX)
    {
      return FLASH_NOT_EMPTY;
    }
    size--;
 8001248:	3901      	subs	r1, #1
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 800124a:	f010 0307 	ands.w	r3, r0, #7
 800124e:	d012      	beq.n	8001276 <FLASH_IF_IsEmpty+0x30>
    if (*addr++ != UINT8_MAX)
 8001250:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001254:	2bff      	cmp	r3, #255	; 0xff
 8001256:	d0f7      	beq.n	8001248 <FLASH_IF_IsEmpty+0x2>
      return FLASH_NOT_EMPTY;
 8001258:	2001      	movs	r0, #1
 800125a:	4770      	bx	lr
  {
    if (*addr++ != UINT8_MAX)
    {
      return FLASH_NOT_EMPTY;
    }
    size--;
 800125c:	3901      	subs	r1, #1
  while (size != 0)
 800125e:	b129      	cbz	r1, 800126c <FLASH_IF_IsEmpty+0x26>
    if (*addr++ != UINT8_MAX)
 8001260:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001264:	2bff      	cmp	r3, #255	; 0xff
 8001266:	d0f9      	beq.n	800125c <FLASH_IF_IsEmpty+0x16>
      return FLASH_NOT_EMPTY;
 8001268:	2001      	movs	r0, #1
 800126a:	e002      	b.n	8001272 <FLASH_IF_IsEmpty+0x2c>
  }
  return FLASH_EMPTY;
 800126c:	2000      	movs	r0, #0
 800126e:	e000      	b.n	8001272 <FLASH_IF_IsEmpty+0x2c>
      return FLASH_NOT_EMPTY;
 8001270:	2001      	movs	r0, #1
  /* USER CODE BEGIN FLASH_IF_IsEmpty_2 */

  /* USER CODE END FLASH_IF_IsEmpty_2 */
}
 8001272:	bc10      	pop	{r4}
 8001274:	4770      	bx	lr
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001276:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800127a:	d212      	bcs.n	80012a2 <FLASH_IF_IsEmpty+0x5c>
{
 800127c:	b410      	push	{r4}
    if (*addr64++ != UINT64_MAX)
 800127e:	4602      	mov	r2, r0
 8001280:	f852 4b08 	ldr.w	r4, [r2], #8
 8001284:	6840      	ldr	r0, [r0, #4]
 8001286:	f1b0 3fff 	cmp.w	r0, #4294967295
 800128a:	bf08      	it	eq
 800128c:	f1b4 3fff 	cmpeq.w	r4, #4294967295
 8001290:	d1ee      	bne.n	8001270 <FLASH_IF_IsEmpty+0x2a>
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001292:	3301      	adds	r3, #1
    if (*addr64++ != UINT64_MAX)
 8001294:	4610      	mov	r0, r2
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001296:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800129a:	d3f0      	bcc.n	800127e <FLASH_IF_IsEmpty+0x38>
  size -= sizeof(uint64_t) * i;
 800129c:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
  while (size != 0)
 80012a0:	e7dd      	b.n	800125e <FLASH_IF_IsEmpty+0x18>
  size -= sizeof(uint64_t) * i;
 80012a2:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
  while (size != 0)
 80012a6:	b129      	cbz	r1, 80012b4 <FLASH_IF_IsEmpty+0x6e>
    if (*addr++ != UINT8_MAX)
 80012a8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80012ac:	2bff      	cmp	r3, #255	; 0xff
 80012ae:	d103      	bne.n	80012b8 <FLASH_IF_IsEmpty+0x72>
    size--;
 80012b0:	3901      	subs	r1, #1
 80012b2:	e7f8      	b.n	80012a6 <FLASH_IF_IsEmpty+0x60>
  return FLASH_EMPTY;
 80012b4:	2000      	movs	r0, #0
 80012b6:	4770      	bx	lr
      return FLASH_NOT_EMPTY;
 80012b8:	2001      	movs	r0, #1
}
 80012ba:	4770      	bx	lr

080012bc <FLASH_IF_Write64>:
{
 80012bc:	b570      	push	{r4, r5, r6, lr}
 80012be:	4604      	mov	r4, r0
 80012c0:	4616      	mov	r6, r2
 80012c2:	461d      	mov	r5, r3
  while (*(uint64_t *)address != data)
 80012c4:	e005      	b.n	80012d2 <FLASH_IF_Write64+0x16>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data);
 80012c6:	4632      	mov	r2, r6
 80012c8:	462b      	mov	r3, r5
 80012ca:	4621      	mov	r1, r4
 80012cc:	2001      	movs	r0, #1
 80012ce:	f003 fd81 	bl	8004dd4 <HAL_FLASH_Program>
  while (*(uint64_t *)address != data)
 80012d2:	6822      	ldr	r2, [r4, #0]
 80012d4:	6863      	ldr	r3, [r4, #4]
 80012d6:	42ab      	cmp	r3, r5
 80012d8:	bf08      	it	eq
 80012da:	42b2      	cmpeq	r2, r6
 80012dc:	d005      	beq.n	80012ea <FLASH_IF_Write64+0x2e>
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
#if defined(CORE_CM0PLUS)
  return ((READ_BIT(FLASH->C2SR, FLASH_C2SR_PESD) == (FLASH_C2SR_PESD)) ? 1UL : 0UL);
#else
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 80012de:	4904      	ldr	r1, [pc, #16]	; (80012f0 <FLASH_IF_Write64+0x34>)
 80012e0:	6909      	ldr	r1, [r1, #16]
 80012e2:	f411 2f00 	tst.w	r1, #524288	; 0x80000
 80012e6:	d1fa      	bne.n	80012de <FLASH_IF_Write64+0x22>
 80012e8:	e7ed      	b.n	80012c6 <FLASH_IF_Write64+0xa>
}
 80012ea:	2000      	movs	r0, #0
 80012ec:	bd70      	pop	{r4, r5, r6, pc}
 80012ee:	bf00      	nop
 80012f0:	58004000 	.word	0x58004000

080012f4 <FLASH_IF_Write_Buffer>:
{
 80012f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	4606      	mov	r6, r0
 80012fc:	460c      	mov	r4, r1
 80012fe:	4690      	mov	r8, r2
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 8001300:	2500      	movs	r5, #0
  int32_t status = FLASH_OK;
 8001302:	462f      	mov	r7, r5
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 8001304:	e003      	b.n	800130e <FLASH_IF_Write_Buffer+0x1a>
    pDestination += sizeof(uint64_t);
 8001306:	3608      	adds	r6, #8
    pSrc += sizeof(uint64_t);
 8001308:	3408      	adds	r4, #8
    if (status != FLASH_OK)
 800130a:	b9af      	cbnz	r7, 8001338 <FLASH_IF_Write_Buffer+0x44>
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 800130c:	3501      	adds	r5, #1
 800130e:	ebb5 0fd8 	cmp.w	r5, r8, lsr #3
 8001312:	d211      	bcs.n	8001338 <FLASH_IF_Write_Buffer+0x44>
    UTIL_MEM_cpy_8(&src_value, pSrc, sizeof(uint64_t));
 8001314:	2208      	movs	r2, #8
 8001316:	4621      	mov	r1, r4
 8001318:	4668      	mov	r0, sp
 800131a:	f011 fcf7 	bl	8012d0c <UTIL_MEM_cpy_8>
    if (src_value != UINT64_MAX)
 800131e:	9a00      	ldr	r2, [sp, #0]
 8001320:	9b01      	ldr	r3, [sp, #4]
 8001322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001326:	bf08      	it	eq
 8001328:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800132c:	d0eb      	beq.n	8001306 <FLASH_IF_Write_Buffer+0x12>
      status = FLASH_IF_Write64(pDestination, src_value);
 800132e:	4630      	mov	r0, r6
 8001330:	f7ff ffc4 	bl	80012bc <FLASH_IF_Write64>
 8001334:	4607      	mov	r7, r0
 8001336:	e7e6      	b.n	8001306 <FLASH_IF_Write_Buffer+0x12>
}
 8001338:	4638      	mov	r0, r7
 800133a:	b002      	add	sp, #8
 800133c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001340 <FLASH_IF_EraseByPages>:
{
 8001340:	b500      	push	{lr}
 8001342:	b085      	sub	sp, #20
  erase_str.TypeErase = FLASH_TYPEERASE_PAGES;
 8001344:	2302      	movs	r3, #2
 8001346:	9301      	str	r3, [sp, #4]
  erase_str.Page = page;
 8001348:	9002      	str	r0, [sp, #8]
  erase_str.NbPages = n;
 800134a:	9103      	str	r1, [sp, #12]
  if (interrupt)
 800134c:	b13a      	cbz	r2, 800135e <FLASH_IF_EraseByPages+0x1e>
    hal_status = HAL_FLASHEx_Erase_IT(&erase_str);
 800134e:	a801      	add	r0, sp, #4
 8001350:	f003 fe08 	bl	8004f64 <HAL_FLASHEx_Erase_IT>
  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 8001354:	b140      	cbz	r0, 8001368 <FLASH_IF_EraseByPages+0x28>
 8001356:	2802      	cmp	r0, #2
 8001358:	d10a      	bne.n	8001370 <FLASH_IF_EraseByPages+0x30>
 800135a:	2001      	movs	r0, #1
 800135c:	e005      	b.n	800136a <FLASH_IF_EraseByPages+0x2a>
    hal_status = HAL_FLASHEx_Erase(&erase_str, &page_error);
 800135e:	4669      	mov	r1, sp
 8001360:	a801      	add	r0, sp, #4
 8001362:	f003 fdbf 	bl	8004ee4 <HAL_FLASHEx_Erase>
 8001366:	e7f5      	b.n	8001354 <FLASH_IF_EraseByPages+0x14>
  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 8001368:	2000      	movs	r0, #0
}
 800136a:	b005      	add	sp, #20
 800136c:	f85d fb04 	ldr.w	pc, [sp], #4
  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 8001370:	f06f 0001 	mvn.w	r0, #1
 8001374:	e7f9      	b.n	800136a <FLASH_IF_EraseByPages+0x2a>
	...

08001378 <FLASH_IF_Write>:
{
 8001378:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800137c:	4693      	mov	fp, r2
 800137e:	4699      	mov	r9, r3
  uint32_t page_start_index = PAGE(address);
 8001380:	f100 4578 	add.w	r5, r0, #4160749568	; 0xf8000000
 8001384:	4b3e      	ldr	r3, [pc, #248]	; (8001480 <FLASH_IF_Write+0x108>)
 8001386:	f8d3 25e0 	ldr.w	r2, [r3, #1504]	; 0x5e0
 800138a:	4b3e      	ldr	r3, [pc, #248]	; (8001484 <FLASH_IF_Write+0x10c>)
 800138c:	ea03 2382 	and.w	r3, r3, r2, lsl #10
 8001390:	fbb5 f2f3 	udiv	r2, r5, r3
 8001394:	fb03 5512 	mls	r5, r3, r2, r5
  uint32_t page_end_index = PAGE(address + size - 1);
 8001398:	eb00 0a0b 	add.w	sl, r0, fp
 800139c:	f10a 4a78 	add.w	sl, sl, #4160749568	; 0xf8000000
 80013a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80013a4:	fbba f2f3 	udiv	r2, sl, r3
 80013a8:	fb03 aa12 	mls	sl, r3, r2, sl
  if ((data == NULL) || ((size % sizeof(uint64_t)) != 0) || ((address % sizeof(uint64_t)) != 0))
 80013ac:	2900      	cmp	r1, #0
 80013ae:	d052      	beq.n	8001456 <FLASH_IF_Write+0xde>
 80013b0:	4606      	mov	r6, r0
 80013b2:	0aed      	lsrs	r5, r5, #11
 80013b4:	ea4f 2ada 	mov.w	sl, sl, lsr #11
 80013b8:	4688      	mov	r8, r1
 80013ba:	f01b 0f07 	tst.w	fp, #7
 80013be:	d14d      	bne.n	800145c <FLASH_IF_Write+0xe4>
 80013c0:	f010 0f07 	tst.w	r0, #7
 80013c4:	d14d      	bne.n	8001462 <FLASH_IF_Write+0xea>
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80013c6:	4b30      	ldr	r3, [pc, #192]	; (8001488 <FLASH_IF_Write+0x110>)
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	db4c      	blt.n	8001468 <FLASH_IF_Write+0xf0>
  if (page_start_index != page_end_index)
 80013ce:	4555      	cmp	r5, sl
 80013d0:	d004      	beq.n	80013dc <FLASH_IF_Write+0x64>
    curr_size = FLASH_PAGE_SIZE - (address % FLASH_PAGE_SIZE);
 80013d2:	f3c0 040a 	ubfx	r4, r0, #0, #11
 80013d6:	f5c4 6400 	rsb	r4, r4, #2048	; 0x800
 80013da:	e00d      	b.n	80013f8 <FLASH_IF_Write+0x80>
  uint32_t curr_size = size;
 80013dc:	465c      	mov	r4, fp
 80013de:	e00b      	b.n	80013f8 <FLASH_IF_Write+0x80>
      if (FLASH_IF_Write_Buffer(curr_dest_addr, (uint8_t *)curr_src_addr, curr_size) != FLASH_OK)
 80013e0:	4622      	mov	r2, r4
 80013e2:	4641      	mov	r1, r8
 80013e4:	4630      	mov	r0, r6
 80013e6:	f7ff ff85 	bl	80012f4 <FLASH_IF_Write_Buffer>
 80013ea:	2800      	cmp	r0, #0
 80013ec:	d145      	bne.n	800147a <FLASH_IF_Write+0x102>
    curr_dest_addr += curr_size;
 80013ee:	4426      	add	r6, r4
    curr_src_addr += curr_size;
 80013f0:	44a0      	add	r8, r4
    curr_size = size - curr_size;
 80013f2:	ebab 0404 	sub.w	r4, fp, r4
  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 80013f6:	3501      	adds	r5, #1
 80013f8:	4555      	cmp	r5, sl
 80013fa:	d829      	bhi.n	8001450 <FLASH_IF_Write+0xd8>
    if (FLASH_IF_IsEmpty((uint8_t *)curr_dest_addr, curr_size) != FLASH_EMPTY)
 80013fc:	4621      	mov	r1, r4
 80013fe:	4630      	mov	r0, r6
 8001400:	f7ff ff21 	bl	8001246 <FLASH_IF_IsEmpty>
 8001404:	2800      	cmp	r0, #0
 8001406:	d0eb      	beq.n	80013e0 <FLASH_IF_Write+0x68>
      if (dataTempPage == NULL)
 8001408:	f1b9 0f00 	cmp.w	r9, #0
 800140c:	d02f      	beq.n	800146e <FLASH_IF_Write+0xf6>
      UTIL_MEM_cpy_8(dataTempPage, (uint8_t *)(idx * FLASH_PAGE_SIZE + FLASH_BASE), FLASH_PAGE_SIZE);
 800140e:	f505 3780 	add.w	r7, r5, #65536	; 0x10000
 8001412:	02ff      	lsls	r7, r7, #11
 8001414:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001418:	4639      	mov	r1, r7
 800141a:	4648      	mov	r0, r9
 800141c:	f011 fc76 	bl	8012d0c <UTIL_MEM_cpy_8>
      UTIL_MEM_cpy_8(&dataTempPage[((uint32_t)curr_dest_addr) % FLASH_PAGE_SIZE], (uint8_t *)curr_src_addr, curr_size);
 8001420:	f3c6 000a 	ubfx	r0, r6, #0, #11
 8001424:	b2a2      	uxth	r2, r4
 8001426:	4641      	mov	r1, r8
 8001428:	4448      	add	r0, r9
 800142a:	f011 fc6f 	bl	8012d0c <UTIL_MEM_cpy_8>
      if (FLASH_IF_EraseByPages(idx, 1, 0) != FLASH_OK)
 800142e:	2200      	movs	r2, #0
 8001430:	2101      	movs	r1, #1
 8001432:	4628      	mov	r0, r5
 8001434:	f7ff ff84 	bl	8001340 <FLASH_IF_EraseByPages>
 8001438:	b9e0      	cbnz	r0, 8001474 <FLASH_IF_Write+0xfc>
        if (FLASH_IF_Write_Buffer(idx * FLASH_PAGE_SIZE + FLASH_BASE, dataTempPage, FLASH_PAGE_SIZE) != FLASH_OK)
 800143a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800143e:	4649      	mov	r1, r9
 8001440:	4638      	mov	r0, r7
 8001442:	f7ff ff57 	bl	80012f4 <FLASH_IF_Write_Buffer>
 8001446:	2800      	cmp	r0, #0
 8001448:	d0d1      	beq.n	80013ee <FLASH_IF_Write+0x76>
          status = FLASH_WRITE_ERROR;
 800144a:	f06f 0002 	mvn.w	r0, #2
 800144e:	e000      	b.n	8001452 <FLASH_IF_Write+0xda>
  int32_t status = FLASH_OK;
 8001450:	2000      	movs	r0, #0
}
 8001452:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return FLASH_PARAM_ERROR;
 8001456:	f06f 0004 	mvn.w	r0, #4
 800145a:	e7fa      	b.n	8001452 <FLASH_IF_Write+0xda>
 800145c:	f06f 0004 	mvn.w	r0, #4
 8001460:	e7f7      	b.n	8001452 <FLASH_IF_Write+0xda>
 8001462:	f06f 0004 	mvn.w	r0, #4
 8001466:	e7f4      	b.n	8001452 <FLASH_IF_Write+0xda>
    return FLASH_LOCK_ERROR;
 8001468:	f06f 0003 	mvn.w	r0, #3
 800146c:	e7f1      	b.n	8001452 <FLASH_IF_Write+0xda>
        return FLASH_PARAM_ERROR;
 800146e:	f06f 0004 	mvn.w	r0, #4
 8001472:	e7ee      	b.n	8001452 <FLASH_IF_Write+0xda>
        status = FLASH_ERASE_ERROR;
 8001474:	f06f 0001 	mvn.w	r0, #1
 8001478:	e7eb      	b.n	8001452 <FLASH_IF_Write+0xda>
        status = FLASH_WRITE_ERROR;
 800147a:	f06f 0002 	mvn.w	r0, #2
 800147e:	e7e8      	b.n	8001452 <FLASH_IF_Write+0xda>
 8001480:	1fff7000 	.word	0x1fff7000
 8001484:	03fffc00 	.word	0x03fffc00
 8001488:	58004000 	.word	0x58004000

0800148c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800148c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001490:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001492:	2400      	movs	r4, #0
 8001494:	9403      	str	r4, [sp, #12]
 8001496:	9404      	str	r4, [sp, #16]
 8001498:	9405      	str	r4, [sp, #20]
 800149a:	9406      	str	r4, [sp, #24]
 800149c:	9407      	str	r4, [sp, #28]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800149e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014a4:	f042 0202 	orr.w	r2, r2, #2
 80014a8:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80014aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014ac:	f002 0202 	and.w	r2, r2, #2
 80014b0:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80014b2:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80014b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014b6:	f042 0204 	orr.w	r2, r2, #4
 80014ba:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80014bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014be:	f002 0204 	and.w	r2, r2, #4
 80014c2:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80014c4:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80014c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014c8:	f042 0201 	orr.w	r2, r2, #1
 80014cc:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80014ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80014d6:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|PROB2_Pin|PROB1_Pin
 80014d8:	4e26      	ldr	r6, [pc, #152]	; (8001574 <MX_GPIO_Init+0xe8>)
 80014da:	4622      	mov	r2, r4
 80014dc:	f44f 413a 	mov.w	r1, #47616	; 0xba00
 80014e0:	4630      	mov	r0, r6
 80014e2:	f003 fec3 	bl	800526c <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80014e6:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 80014ea:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ec:	2501      	movs	r5, #1
 80014ee:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014f2:	2302      	movs	r3, #2
 80014f4:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f6:	a903      	add	r1, sp, #12
 80014f8:	4630      	mov	r0, r6
 80014fa:	f003 fd67 	bl	8004fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin;
 80014fe:	f04f 0803 	mov.w	r8, #3
 8001502:	f8cd 800c 	str.w	r8, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001506:	f44f 1704 	mov.w	r7, #2162688	; 0x210000
 800150a:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800150c:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150e:	a903      	add	r1, sp, #12
 8001510:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001514:	f003 fd5a 	bl	8004fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PROB2_Pin|PROB1_Pin;
 8001518:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800151c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001522:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001526:	a903      	add	r1, sp, #12
 8001528:	4630      	mov	r0, r6
 800152a:	f003 fd4f 	bl	8004fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT3_Pin;
 800152e:	2340      	movs	r3, #64	; 0x40
 8001530:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001532:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001534:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(BUT3_GPIO_Port, &GPIO_InitStruct);
 8001536:	a903      	add	r1, sp, #12
 8001538:	480f      	ldr	r0, [pc, #60]	; (8001578 <MX_GPIO_Init+0xec>)
 800153a:	f003 fd47 	bl	8004fcc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800153e:	4622      	mov	r2, r4
 8001540:	4621      	mov	r1, r4
 8001542:	2006      	movs	r0, #6
 8001544:	f003 f8e2 	bl	800470c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001548:	2006      	movs	r0, #6
 800154a:	f003 f917 	bl	800477c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800154e:	4622      	mov	r2, r4
 8001550:	4621      	mov	r1, r4
 8001552:	2007      	movs	r0, #7
 8001554:	f003 f8da 	bl	800470c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001558:	2007      	movs	r0, #7
 800155a:	f003 f90f 	bl	800477c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800155e:	4622      	mov	r2, r4
 8001560:	4621      	mov	r1, r4
 8001562:	2016      	movs	r0, #22
 8001564:	f003 f8d2 	bl	800470c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001568:	2016      	movs	r0, #22
 800156a:	f003 f907 	bl	800477c <HAL_NVIC_EnableIRQ>

}
 800156e:	b008      	add	sp, #32
 8001570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001574:	48000400 	.word	0x48000400
 8001578:	48000800 	.word	0x48000800

0800157c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800157c:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800157e:	4812      	ldr	r0, [pc, #72]	; (80015c8 <MX_I2C1_Init+0x4c>)
 8001580:	4b12      	ldr	r3, [pc, #72]	; (80015cc <MX_I2C1_Init+0x50>)
 8001582:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8001584:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <MX_I2C1_Init+0x54>)
 8001586:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800158c:	2201      	movs	r2, #1
 800158e:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001590:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001592:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001594:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001596:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001598:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800159a:	f004 f81e 	bl	80055da <HAL_I2C_Init>
 800159e:	b950      	cbnz	r0, 80015b6 <MX_I2C1_Init+0x3a>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015a0:	2100      	movs	r1, #0
 80015a2:	4809      	ldr	r0, [pc, #36]	; (80015c8 <MX_I2C1_Init+0x4c>)
 80015a4:	f004 f9f4 	bl	8005990 <HAL_I2CEx_ConfigAnalogFilter>
 80015a8:	b940      	cbnz	r0, 80015bc <MX_I2C1_Init+0x40>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015aa:	2100      	movs	r1, #0
 80015ac:	4806      	ldr	r0, [pc, #24]	; (80015c8 <MX_I2C1_Init+0x4c>)
 80015ae:	f004 fa1d 	bl	80059ec <HAL_I2CEx_ConfigDigitalFilter>
 80015b2:	b930      	cbnz	r0, 80015c2 <MX_I2C1_Init+0x46>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015b4:	bd08      	pop	{r3, pc}
    Error_Handler();
 80015b6:	f000 f853 	bl	8001660 <Error_Handler>
 80015ba:	e7f1      	b.n	80015a0 <MX_I2C1_Init+0x24>
    Error_Handler();
 80015bc:	f000 f850 	bl	8001660 <Error_Handler>
 80015c0:	e7f3      	b.n	80015aa <MX_I2C1_Init+0x2e>
    Error_Handler();
 80015c2:	f000 f84d 	bl	8001660 <Error_Handler>
}
 80015c6:	e7f5      	b.n	80015b4 <MX_I2C1_Init+0x38>
 80015c8:	20000200 	.word	0x20000200
 80015cc:	40005400 	.word	0x40005400
 80015d0:	20303e5d 	.word	0x20303e5d

080015d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015d4:	b510      	push	{r4, lr}
 80015d6:	b096      	sub	sp, #88	; 0x58
 80015d8:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015da:	2100      	movs	r1, #0
 80015dc:	9111      	str	r1, [sp, #68]	; 0x44
 80015de:	9112      	str	r1, [sp, #72]	; 0x48
 80015e0:	9113      	str	r1, [sp, #76]	; 0x4c
 80015e2:	9114      	str	r1, [sp, #80]	; 0x50
 80015e4:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015e6:	2238      	movs	r2, #56	; 0x38
 80015e8:	a803      	add	r0, sp, #12
 80015ea:	f012 f875 	bl	80136d8 <memset>
  if(i2cHandle->Instance==I2C1)
 80015ee:	6822      	ldr	r2, [r4, #0]
 80015f0:	4b19      	ldr	r3, [pc, #100]	; (8001658 <HAL_I2C_MspInit+0x84>)
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d001      	beq.n	80015fa <HAL_I2C_MspInit+0x26>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80015f6:	b016      	add	sp, #88	; 0x58
 80015f8:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015fa:	2340      	movs	r3, #64	; 0x40
 80015fc:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015fe:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001602:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001604:	a803      	add	r0, sp, #12
 8001606:	f005 f847 	bl	8006698 <HAL_RCCEx_PeriphCLKConfig>
 800160a:	bb10      	cbnz	r0, 8001652 <HAL_I2C_MspInit+0x7e>
  SET_BIT(RCC->AHB2ENR, Periphs);
 800160c:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8001610:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001612:	f043 0302 	orr.w	r3, r3, #2
 8001616:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001618:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8001620:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001622:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001626:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001628:	2312      	movs	r3, #18
 800162a:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001630:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001632:	2304      	movs	r3, #4
 8001634:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001636:	a911      	add	r1, sp, #68	; 0x44
 8001638:	4808      	ldr	r0, [pc, #32]	; (800165c <HAL_I2C_MspInit+0x88>)
 800163a:	f003 fcc7 	bl	8004fcc <HAL_GPIO_Init>
  SET_BIT(RCC->APB1ENR1, Periphs);
 800163e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001640:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001644:	65a3      	str	r3, [r4, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001646:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001648:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800164c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800164e:	9b01      	ldr	r3, [sp, #4]
}
 8001650:	e7d1      	b.n	80015f6 <HAL_I2C_MspInit+0x22>
      Error_Handler();
 8001652:	f000 f805 	bl	8001660 <Error_Handler>
 8001656:	e7d9      	b.n	800160c <HAL_I2C_MspInit+0x38>
 8001658:	40005400 	.word	0x40005400
 800165c:	48000400 	.word	0x48000400

08001660 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001660:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001662:	e7fe      	b.n	8001662 <Error_Handler+0x2>

08001664 <SystemClock_Config>:
{
 8001664:	b510      	push	{r4, lr}
 8001666:	b09a      	sub	sp, #104	; 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001668:	2248      	movs	r2, #72	; 0x48
 800166a:	2100      	movs	r1, #0
 800166c:	a808      	add	r0, sp, #32
 800166e:	f012 f833 	bl	80136d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001672:	2400      	movs	r4, #0
 8001674:	9401      	str	r4, [sp, #4]
 8001676:	9402      	str	r4, [sp, #8]
 8001678:	9403      	str	r4, [sp, #12]
 800167a:	9404      	str	r4, [sp, #16]
 800167c:	9405      	str	r4, [sp, #20]
 800167e:	9406      	str	r4, [sp, #24]
 8001680:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 8001682:	f004 f9df 	bl	8005a44 <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001686:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800168a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800168e:	f023 0318 	bic.w	r3, r3, #24
 8001692:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001696:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800169a:	6813      	ldr	r3, [r2, #0]
 800169c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016a4:	6013      	str	r3, [r2, #0]
 80016a6:	6813      	ldr	r3, [r2, #0]
 80016a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80016b0:	2324      	movs	r3, #36	; 0x24
 80016b2:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80016b4:	2381      	movs	r3, #129	; 0x81
 80016b6:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80016b8:	2301      	movs	r3, #1
 80016ba:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80016bc:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80016be:	23b0      	movs	r3, #176	; 0xb0
 80016c0:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016c2:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016c4:	a808      	add	r0, sp, #32
 80016c6:	f004 fb57 	bl	8005d78 <HAL_RCC_OscConfig>
 80016ca:	b970      	cbnz	r0, 80016ea <SystemClock_Config+0x86>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80016cc:	234f      	movs	r3, #79	; 0x4f
 80016ce:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80016d0:	2300      	movs	r3, #0
 80016d2:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d4:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016d6:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016d8:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80016da:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016dc:	2102      	movs	r1, #2
 80016de:	a801      	add	r0, sp, #4
 80016e0:	f004 fe86 	bl	80063f0 <HAL_RCC_ClockConfig>
 80016e4:	b918      	cbnz	r0, 80016ee <SystemClock_Config+0x8a>
}
 80016e6:	b01a      	add	sp, #104	; 0x68
 80016e8:	bd10      	pop	{r4, pc}
    Error_Handler();
 80016ea:	f7ff ffb9 	bl	8001660 <Error_Handler>
    Error_Handler();
 80016ee:	f7ff ffb7 	bl	8001660 <Error_Handler>

080016f2 <main>:
{
 80016f2:	b508      	push	{r3, lr}
  HAL_Init();
 80016f4:	f002 fac6 	bl	8003c84 <HAL_Init>
  SystemClock_Config();
 80016f8:	f7ff ffb4 	bl	8001664 <SystemClock_Config>
  MX_GPIO_Init();
 80016fc:	f7ff fec6 	bl	800148c <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8001700:	f000 fe70 	bl	80023e4 <MX_LoRaWAN_Init>
  MX_I2C1_Init();
 8001704:	f7ff ff3a 	bl	800157c <MX_I2C1_Init>
    MX_LoRaWAN_Process();
 8001708:	f000 fe72 	bl	80023f0 <MX_LoRaWAN_Process>
  while (1)
 800170c:	e7fc      	b.n	8001708 <main+0x16>
	...

08001710 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001710:	b500      	push	{lr}
 8001712:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001714:	222c      	movs	r2, #44	; 0x2c
 8001716:	2100      	movs	r1, #0
 8001718:	a801      	add	r0, sp, #4
 800171a:	f011 ffdd 	bl	80136d8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800171e:	4819      	ldr	r0, [pc, #100]	; (8001784 <MX_RTC_Init+0x74>)
 8001720:	4b19      	ldr	r3, [pc, #100]	; (8001788 <MX_RTC_Init+0x78>)
 8001722:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001724:	231f      	movs	r3, #31
 8001726:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001728:	2300      	movs	r3, #0
 800172a:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800172c:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800172e:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001730:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001734:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001736:	6203      	str	r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001738:	f44f 7380 	mov.w	r3, #256	; 0x100
 800173c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800173e:	f005 f9bd 	bl	8006abc <HAL_RTC_Init>
 8001742:	b9a8      	cbnz	r0, 8001770 <MX_RTC_Init+0x60>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001744:	480f      	ldr	r0, [pc, #60]	; (8001784 <MX_RTC_Init+0x74>)
 8001746:	f005 faf3 	bl	8006d30 <HAL_RTCEx_SetSSRU_IT>
 800174a:	b9a0      	cbnz	r0, 8001776 <MX_RTC_Init+0x66>
    Error_Handler();
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800174c:	2200      	movs	r2, #0
 800174e:	9208      	str	r2, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001750:	9202      	str	r2, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001752:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001754:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001758:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800175a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800175e:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001760:	a901      	add	r1, sp, #4
 8001762:	4808      	ldr	r0, [pc, #32]	; (8001784 <MX_RTC_Init+0x74>)
 8001764:	f005 fa08 	bl	8006b78 <HAL_RTC_SetAlarm_IT>
 8001768:	b940      	cbnz	r0, 800177c <MX_RTC_Init+0x6c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800176a:	b00d      	add	sp, #52	; 0x34
 800176c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001770:	f7ff ff76 	bl	8001660 <Error_Handler>
 8001774:	e7e6      	b.n	8001744 <MX_RTC_Init+0x34>
    Error_Handler();
 8001776:	f7ff ff73 	bl	8001660 <Error_Handler>
 800177a:	e7e7      	b.n	800174c <MX_RTC_Init+0x3c>
    Error_Handler();
 800177c:	f7ff ff70 	bl	8001660 <Error_Handler>
}
 8001780:	e7f3      	b.n	800176a <MX_RTC_Init+0x5a>
 8001782:	bf00      	nop
 8001784:	2000024c 	.word	0x2000024c
 8001788:	40002800 	.word	0x40002800

0800178c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800178c:	b510      	push	{r4, lr}
 800178e:	b090      	sub	sp, #64	; 0x40
 8001790:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001792:	2238      	movs	r2, #56	; 0x38
 8001794:	2100      	movs	r1, #0
 8001796:	a802      	add	r0, sp, #8
 8001798:	f011 ff9e 	bl	80136d8 <memset>
  if(rtcHandle->Instance==RTC)
 800179c:	6822      	ldr	r2, [r4, #0]
 800179e:	4b1a      	ldr	r3, [pc, #104]	; (8001808 <HAL_RTC_MspInit+0x7c>)
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d001      	beq.n	80017a8 <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80017a4:	b010      	add	sp, #64	; 0x40
 80017a6:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80017a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017ac:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80017ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017b2:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017b4:	a802      	add	r0, sp, #8
 80017b6:	f004 ff6f 	bl	8006698 <HAL_RCCEx_PeriphCLKConfig>
 80017ba:	bb08      	cbnz	r0, 8001800 <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80017bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017c0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80017c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 80017cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80017ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80017d2:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80017d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017da:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80017dc:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80017de:	2200      	movs	r2, #0
 80017e0:	4611      	mov	r1, r2
 80017e2:	2002      	movs	r0, #2
 80017e4:	f002 ff92 	bl	800470c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 80017e8:	2002      	movs	r0, #2
 80017ea:	f002 ffc7 	bl	800477c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80017ee:	2200      	movs	r2, #0
 80017f0:	4611      	mov	r1, r2
 80017f2:	202a      	movs	r0, #42	; 0x2a
 80017f4:	f002 ff8a 	bl	800470c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80017f8:	202a      	movs	r0, #42	; 0x2a
 80017fa:	f002 ffbf 	bl	800477c <HAL_NVIC_EnableIRQ>
}
 80017fe:	e7d1      	b.n	80017a4 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 8001800:	f7ff ff2e 	bl	8001660 <Error_Handler>
 8001804:	e7da      	b.n	80017bc <HAL_RTC_MspInit+0x30>
 8001806:	bf00      	nop
 8001808:	40002800 	.word	0x40002800

0800180c <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 800180c:	4770      	bx	lr

0800180e <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 800180e:	4770      	bx	lr

08001810 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001810:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001812:	f002 fa4d 	bl	8003cb0 <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001816:	2001      	movs	r0, #1
 8001818:	4b02      	ldr	r3, [pc, #8]	; (8001824 <PWR_EnterStopMode+0x14>)
 800181a:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 800181e:	f004 f975 	bl	8005b0c <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001822:	bd08      	pop	{r3, pc}
 8001824:	58000400 	.word	0x58000400

08001828 <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 8001828:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 800182a:	f002 fa48 	bl	8003cbe <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 800182e:	bd08      	pop	{r3, pc}

08001830 <PWR_ExitStopMode>:
{
 8001830:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 8001832:	f002 fa44 	bl	8003cbe <HAL_ResumeTick>
  vcom_Resume();
 8001836:	f000 fd95 	bl	8002364 <vcom_Resume>
}
 800183a:	bd08      	pop	{r3, pc}

0800183c <PWR_EnterSleepMode>:
{
 800183c:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 800183e:	f002 fa37 	bl	8003cb0 <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001842:	2101      	movs	r1, #1
 8001844:	2000      	movs	r0, #0
 8001846:	f004 f905 	bl	8005a54 <HAL_PWR_EnterSLEEPMode>
}
 800184a:	bd08      	pop	{r3, pc}

0800184c <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800184c:	4770      	bx	lr

0800184e <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800184e:	e7fe      	b.n	800184e <NMI_Handler>

08001850 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001850:	e7fe      	b.n	8001850 <HardFault_Handler>

08001852 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001852:	e7fe      	b.n	8001852 <MemManage_Handler>

08001854 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001854:	e7fe      	b.n	8001854 <BusFault_Handler>

08001856 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001856:	e7fe      	b.n	8001856 <UsageFault_Handler>

08001858 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001858:	4770      	bx	lr

0800185a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800185a:	4770      	bx	lr

0800185c <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800185c:	4770      	bx	lr

0800185e <SysTick_Handler>:

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800185e:	4770      	bx	lr

08001860 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001860:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001862:	4802      	ldr	r0, [pc, #8]	; (800186c <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 8001864:	f005 fa90 	bl	8006d88 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001868:	bd08      	pop	{r3, pc}
 800186a:	bf00      	nop
 800186c:	2000024c 	.word	0x2000024c

08001870 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001870:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8001872:	2001      	movs	r0, #1
 8001874:	f003 fd08 	bl	8005288 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001878:	bd08      	pop	{r3, pc}

0800187a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800187a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT2_Pin);
 800187c:	2002      	movs	r0, #2
 800187e:	f003 fd03 	bl	8005288 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001882:	bd08      	pop	{r3, pc}

08001884 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001884:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001886:	4802      	ldr	r0, [pc, #8]	; (8001890 <DMA1_Channel5_IRQHandler+0xc>)
 8001888:	f003 f996 	bl	8004bb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800188c:	bd08      	pop	{r3, pc}
 800188e:	bf00      	nop
 8001890:	200003d0 	.word	0x200003d0

08001894 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 8001894:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT3_Pin);
 8001896:	2040      	movs	r0, #64	; 0x40
 8001898:	f003 fcf6 	bl	8005288 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800189c:	bd08      	pop	{r3, pc}
	...

080018a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 80018a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018a2:	4802      	ldr	r0, [pc, #8]	; (80018ac <USART2_IRQHandler+0xc>)
 80018a4:	f005 ff2c 	bl	8007700 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018a8:	bd08      	pop	{r3, pc}
 80018aa:	bf00      	nop
 80018ac:	20000430 	.word	0x20000430

080018b0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 80018b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80018b2:	4802      	ldr	r0, [pc, #8]	; (80018bc <RTC_Alarm_IRQHandler+0xc>)
 80018b4:	f005 f87a 	bl	80069ac <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80018b8:	bd08      	pop	{r3, pc}
 80018ba:	bf00      	nop
 80018bc:	2000024c 	.word	0x2000024c

080018c0 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80018c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80018c2:	4802      	ldr	r0, [pc, #8]	; (80018cc <SUBGHZ_Radio_IRQHandler+0xc>)
 80018c4:	f005 fd0a 	bl	80072dc <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80018c8:	bd08      	pop	{r3, pc}
 80018ca:	bf00      	nop
 80018cc:	20000284 	.word	0x20000284

080018d0 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80018d0:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80018d2:	4805      	ldr	r0, [pc, #20]	; (80018e8 <MX_SUBGHZ_Init+0x18>)
 80018d4:	2308      	movs	r3, #8
 80018d6:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80018d8:	f005 fa8c 	bl	8006df4 <HAL_SUBGHZ_Init>
 80018dc:	b900      	cbnz	r0, 80018e0 <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80018de:	bd08      	pop	{r3, pc}
    Error_Handler();
 80018e0:	f7ff febe 	bl	8001660 <Error_Handler>
}
 80018e4:	e7fb      	b.n	80018de <MX_SUBGHZ_Init+0xe>
 80018e6:	bf00      	nop
 80018e8:	20000284 	.word	0x20000284

080018ec <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80018ec:	b500      	push	{lr}
 80018ee:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80018f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018f4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80018f6:	f042 0201 	orr.w	r2, r2, #1
 80018fa:	665a      	str	r2, [r3, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80018fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001904:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001906:	2200      	movs	r2, #0
 8001908:	4611      	mov	r1, r2
 800190a:	2032      	movs	r0, #50	; 0x32
 800190c:	f002 fefe 	bl	800470c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001910:	2032      	movs	r0, #50	; 0x32
 8001912:	f002 ff33 	bl	800477c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001916:	b003      	add	sp, #12
 8001918:	f85d fb04 	ldr.w	pc, [sp], #4

0800191c <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 800191c:	b40c      	push	{r2, r3}
 800191e:	b500      	push	{lr}
 8001920:	b083      	sub	sp, #12
 8001922:	ab04      	add	r3, sp, #16
 8001924:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001928:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 800192a:	f011 fdc9 	bl	80134c0 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 800192e:	b003      	add	sp, #12
 8001930:	f85d eb04 	ldr.w	lr, [sp], #4
 8001934:	b002      	add	sp, #8
 8001936:	4770      	bx	lr

08001938 <TimestampNow>:
{
 8001938:	b530      	push	{r4, r5, lr}
 800193a:	b085      	sub	sp, #20
 800193c:	4604      	mov	r4, r0
 800193e:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 8001940:	a802      	add	r0, sp, #8
 8001942:	f011 fb33 	bl	8012fac <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001946:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800194a:	9300      	str	r3, [sp, #0]
 800194c:	9b02      	ldr	r3, [sp, #8]
 800194e:	4a05      	ldr	r2, [pc, #20]	; (8001964 <TimestampNow+0x2c>)
 8001950:	2110      	movs	r1, #16
 8001952:	4620      	mov	r0, r4
 8001954:	f7ff ffe2 	bl	800191c <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001958:	4620      	mov	r0, r4
 800195a:	f7fe fc11 	bl	8000180 <strlen>
 800195e:	8028      	strh	r0, [r5, #0]
}
 8001960:	b005      	add	sp, #20
 8001962:	bd30      	pop	{r4, r5, pc}
 8001964:	080141e8 	.word	0x080141e8

08001968 <SystemApp_Init>:
{
 8001968:	b510      	push	{r4, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800196a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800196e:	6893      	ldr	r3, [r2, #8]
 8001970:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001974:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 8001976:	f011 fb9d 	bl	80130b4 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 800197a:	2401      	movs	r4, #1
 800197c:	4b0d      	ldr	r3, [pc, #52]	; (80019b4 <SystemApp_Init+0x4c>)
 800197e:	701c      	strb	r4, [r3, #0]
  DBG_Init();
 8001980:	f000 f8b8 	bl	8001af4 <DBG_Init>
  UTIL_ADV_TRACE_Init();
 8001984:	f011 f838 	bl	80129f8 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001988:	480b      	ldr	r0, [pc, #44]	; (80019b8 <SystemApp_Init+0x50>)
 800198a:	f011 f84f 	bl	8012a2c <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800198e:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <SystemApp_Init+0x54>)
 8001990:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001994:	611a      	str	r2, [r3, #16]
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001996:	2002      	movs	r0, #2
 8001998:	f011 f84e 	bl	8012a38 <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 800199c:	f7ff fbb2 	bl	8001104 <SYS_InitMeasurement>
  EnvSensors_Init();
 80019a0:	f000 f9a0 	bl	8001ce4 <EnvSensors_Init>
  UTIL_LPM_Init();
 80019a4:	f011 f958 	bl	8012c58 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80019a8:	4621      	mov	r1, r4
 80019aa:	4620      	mov	r0, r4
 80019ac:	f011 f974 	bl	8012c98 <UTIL_LPM_SetOffMode>
}
 80019b0:	bd10      	pop	{r4, pc}
 80019b2:	bf00      	nop
 80019b4:	20000290 	.word	0x20000290
 80019b8:	08001939 	.word	0x08001939
 80019bc:	58004000 	.word	0x58004000

080019c0 <UTIL_SEQ_Idle>:
{
 80019c0:	b508      	push	{r3, lr}
  UTIL_LPM_EnterLowPower();
 80019c2:	f011 f97f 	bl	8012cc4 <UTIL_LPM_EnterLowPower>
}
 80019c6:	bd08      	pop	{r3, pc}

080019c8 <GetBatteryLevel>:
{
 80019c8:	b508      	push	{r3, lr}
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 80019ca:	f7ff fba3 	bl	8001114 <SYS_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 80019ce:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80019d2:	4298      	cmp	r0, r3
 80019d4:	d80d      	bhi.n	80019f2 <GetBatteryLevel+0x2a>
  else if (batteryLevelmV < VDD_MIN)
 80019d6:	f5b0 6fe1 	cmp.w	r0, #1800	; 0x708
 80019da:	d30c      	bcc.n	80019f6 <GetBatteryLevel+0x2e>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80019dc:	f5a0 60e1 	sub.w	r0, r0, #1800	; 0x708
 80019e0:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
 80019e4:	0040      	lsls	r0, r0, #1
 80019e6:	4b05      	ldr	r3, [pc, #20]	; (80019fc <GetBatteryLevel+0x34>)
 80019e8:	fba3 3000 	umull	r3, r0, r3, r0
 80019ec:	f3c0 10c7 	ubfx	r0, r0, #7, #8
 80019f0:	e000      	b.n	80019f4 <GetBatteryLevel+0x2c>
    batteryLevel = LORAWAN_MAX_BAT;
 80019f2:	20fe      	movs	r0, #254	; 0xfe
}
 80019f4:	bd08      	pop	{r3, pc}
    batteryLevel = 0;
 80019f6:	2000      	movs	r0, #0
 80019f8:	e7fc      	b.n	80019f4 <GetBatteryLevel+0x2c>
 80019fa:	bf00      	nop
 80019fc:	1b4e81b5 	.word	0x1b4e81b5

08001a00 <GetTemperatureLevel>:
{
 8001a00:	b500      	push	{lr}
 8001a02:	b087      	sub	sp, #28
  EnvSensors_Read(&sensor_data);
 8001a04:	4668      	mov	r0, sp
 8001a06:	f000 f9f1 	bl	8001dec <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8001a0a:	9801      	ldr	r0, [sp, #4]
 8001a0c:	f7ff f8da 	bl	8000bc4 <__aeabi_f2iz>
}
 8001a10:	b200      	sxth	r0, r0
 8001a12:	b007      	add	sp, #28
 8001a14:	f85d fb04 	ldr.w	pc, [sp], #4

08001a18 <GetUniqueId>:
{
 8001a18:	b538      	push	{r3, r4, r5, lr}
 8001a1a:	4604      	mov	r4, r0
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001a1c:	4b18      	ldr	r3, [pc, #96]	; (8001a80 <GetUniqueId+0x68>)
 8001a1e:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a26:	d013      	beq.n	8001a50 <GetUniqueId+0x38>
    id[7] = val & 0xFF;
 8001a28:	71c3      	strb	r3, [r0, #7]
    id[6] = (val >> 8) & 0xFF;
 8001a2a:	0a1a      	lsrs	r2, r3, #8
 8001a2c:	7182      	strb	r2, [r0, #6]
    id[5] = (val >> 16) & 0xFF;
 8001a2e:	0c1a      	lsrs	r2, r3, #16
 8001a30:	7142      	strb	r2, [r0, #5]
    id[4] = (val >> 24) & 0xFF;
 8001a32:	0e1b      	lsrs	r3, r3, #24
 8001a34:	7103      	strb	r3, [r0, #4]
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001a36:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <GetUniqueId+0x68>)
 8001a38:	f8d3 2584 	ldr.w	r2, [r3, #1412]	; 0x584
    id[3] = val & 0xFF;
 8001a3c:	70c2      	strb	r2, [r0, #3]
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001a3e:	f8d3 3584 	ldr.w	r3, [r3, #1412]	; 0x584
 8001a42:	0a1a      	lsrs	r2, r3, #8
    id[2] = val & 0xFF;
 8001a44:	7082      	strb	r2, [r0, #2]
    id[1] = (val >> 8) & 0xFF;
 8001a46:	0c1a      	lsrs	r2, r3, #16
 8001a48:	7042      	strb	r2, [r0, #1]
    id[0] = (val >> 16) & 0xFF;
 8001a4a:	0e1b      	lsrs	r3, r3, #24
 8001a4c:	7003      	strb	r3, [r0, #0]
}
 8001a4e:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001a50:	f002 f93c 	bl	8003ccc <HAL_GetUIDw0>
 8001a54:	4605      	mov	r5, r0
 8001a56:	f002 f945 	bl	8003ce4 <HAL_GetUIDw2>
 8001a5a:	4405      	add	r5, r0
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001a5c:	f002 f93c 	bl	8003cd8 <HAL_GetUIDw1>
    id[7] = (ID_1_3_val) >> 24;
 8001a60:	0e2b      	lsrs	r3, r5, #24
 8001a62:	71e3      	strb	r3, [r4, #7]
    id[6] = (ID_1_3_val) >> 16;
 8001a64:	0c2b      	lsrs	r3, r5, #16
 8001a66:	71a3      	strb	r3, [r4, #6]
    id[5] = (ID_1_3_val) >> 8;
 8001a68:	0a2b      	lsrs	r3, r5, #8
 8001a6a:	7163      	strb	r3, [r4, #5]
    id[4] = (ID_1_3_val);
 8001a6c:	7125      	strb	r5, [r4, #4]
    id[3] = (ID_2_val) >> 24;
 8001a6e:	0e03      	lsrs	r3, r0, #24
 8001a70:	70e3      	strb	r3, [r4, #3]
    id[2] = (ID_2_val) >> 16;
 8001a72:	0c03      	lsrs	r3, r0, #16
 8001a74:	70a3      	strb	r3, [r4, #2]
    id[1] = (ID_2_val) >> 8;
 8001a76:	0a03      	lsrs	r3, r0, #8
 8001a78:	7063      	strb	r3, [r4, #1]
    id[0] = (ID_2_val);
 8001a7a:	7020      	strb	r0, [r4, #0]
 8001a7c:	e7e7      	b.n	8001a4e <GetUniqueId+0x36>
 8001a7e:	bf00      	nop
 8001a80:	1fff7000 	.word	0x1fff7000

08001a84 <GetDevAddr>:
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001a84:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <GetDevAddr+0x24>)
 8001a86:	f8d3 0580 	ldr.w	r0, [r3, #1408]	; 0x580
  if (val == 0xFFFFFFFF)
 8001a8a:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001a8e:	d000      	beq.n	8001a92 <GetDevAddr+0xe>
}
 8001a90:	4770      	bx	lr
{
 8001a92:	b510      	push	{r4, lr}
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001a94:	f002 f91a 	bl	8003ccc <HAL_GetUIDw0>
 8001a98:	4604      	mov	r4, r0
 8001a9a:	f002 f91d 	bl	8003cd8 <HAL_GetUIDw1>
 8001a9e:	4044      	eors	r4, r0
 8001aa0:	f002 f920 	bl	8003ce4 <HAL_GetUIDw2>
 8001aa4:	4060      	eors	r0, r4
}
 8001aa6:	bd10      	pop	{r4, pc}
 8001aa8:	1fff7000 	.word	0x1fff7000

08001aac <UTIL_ADV_TRACE_PreSendHook>:
{
 8001aac:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001aae:	2101      	movs	r1, #1
 8001ab0:	2002      	movs	r0, #2
 8001ab2:	f011 f8db 	bl	8012c6c <UTIL_LPM_SetStopMode>
}
 8001ab6:	bd08      	pop	{r3, pc}

08001ab8 <UTIL_ADV_TRACE_PostSendHook>:
{
 8001ab8:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001aba:	2100      	movs	r1, #0
 8001abc:	2002      	movs	r0, #2
 8001abe:	f011 f8d5 	bl	8012c6c <UTIL_LPM_SetStopMode>
}
 8001ac2:	bd08      	pop	{r3, pc}

08001ac4 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	4770      	bx	lr

08001ac8 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001ac8:	b508      	push	{r3, lr}
  uint32_t ret = 0;
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8001aca:	4b04      	ldr	r3, [pc, #16]	; (8001adc <HAL_GetTick+0x14>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	b90b      	cbnz	r3, 8001ad4 <HAL_GetTick+0xc>
  uint32_t ret = 0;
 8001ad0:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
}
 8001ad2:	bd08      	pop	{r3, pc}
    ret = TIMER_IF_GetTimerValue();
 8001ad4:	f000 fa10 	bl	8001ef8 <TIMER_IF_GetTimerValue>
 8001ad8:	e7fb      	b.n	8001ad2 <HAL_GetTick+0xa>
 8001ada:	bf00      	nop
 8001adc:	20000290 	.word	0x20000290

08001ae0 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001ae0:	b500      	push	{lr}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001ae6:	9801      	ldr	r0, [sp, #4]
 8001ae8:	f000 faec 	bl	80020c4 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001aec:	b003      	add	sp, #12
 8001aee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001af4 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8001af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001af6:	b089      	sub	sp, #36	; 0x24
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001af8:	4a22      	ldr	r2, [pc, #136]	; (8001b84 <DBG_Init+0x90>)
 8001afa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001afe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8001b06:	f002 f8f3 	bl	8003cf0 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8001b0a:	f002 f8f9 	bl	8003d00 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8001b0e:	f002 f8ff 	bl	8003d10 <HAL_DBGMCU_EnableDBGStandbyMode>
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8001b12:	2400      	movs	r4, #0
 8001b14:	9403      	str	r4, [sp, #12]
 8001b16:	9404      	str	r4, [sp, #16]
 8001b18:	9405      	str	r4, [sp, #20]
 8001b1a:	9406      	str	r4, [sp, #24]
 8001b1c:	9407      	str	r4, [sp, #28]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b22:	2303      	movs	r3, #3
 8001b24:	9306      	str	r3, [sp, #24]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b2c:	f042 0202 	orr.w	r2, r2, #2
 8001b30:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b34:	f002 0202 	and.w	r2, r2, #2
 8001b38:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001b3a:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b3e:	f042 0202 	orr.w	r2, r2, #2
 8001b42:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001b4c:	9b01      	ldr	r3, [sp, #4]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
  PROBE_LINE2_CLK_ENABLE();

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8001b4e:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8001b52:	9703      	str	r7, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8001b54:	4d0c      	ldr	r5, [pc, #48]	; (8001b88 <DBG_Init+0x94>)
 8001b56:	a903      	add	r1, sp, #12
 8001b58:	4628      	mov	r0, r5
 8001b5a:	f003 fa37 	bl	8004fcc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8001b5e:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 8001b62:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8001b64:	a903      	add	r1, sp, #12
 8001b66:	4628      	mov	r0, r5
 8001b68:	f003 fa30 	bl	8004fcc <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8001b6c:	4622      	mov	r2, r4
 8001b6e:	4639      	mov	r1, r7
 8001b70:	4628      	mov	r0, r5
 8001b72:	f003 fb7b 	bl	800526c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8001b76:	4622      	mov	r2, r4
 8001b78:	4631      	mov	r1, r6
 8001b7a:	4628      	mov	r0, r5
 8001b7c:	f003 fb76 	bl	800526c <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8001b80:	b009      	add	sp, #36	; 0x24
 8001b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b84:	58000800 	.word	0x58000800
 8001b88:	48000400 	.word	0x48000400

08001b8c <bme680I2cRead>:
/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
/* USER CODE BEGIN PrFD */

int8_t bme680I2cRead(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8001b8c:	b570      	push	{r4, r5, r6, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	4604      	mov	r4, r0
 8001b92:	4616      	mov	r6, r2
 8001b94:	461d      	mov	r5, r3
 8001b96:	f88d 100f 	strb.w	r1, [sp, #15]
	// read I2C line

	int8_t result;
	static const size_t I2C_READ_TIMEOUT = 250;

	if (HAL_I2C_Master_Transmit(&hi2c1, (dev_id << 1), &reg_addr, 1, I2C_READ_TIMEOUT) != HAL_OK) {
 8001b9a:	23fa      	movs	r3, #250	; 0xfa
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	f10d 020f 	add.w	r2, sp, #15
 8001ba4:	fa00 f103 	lsl.w	r1, r0, r3
 8001ba8:	480b      	ldr	r0, [pc, #44]	; (8001bd8 <bme680I2cRead+0x4c>)
 8001baa:	f003 fd75 	bl	8005698 <HAL_I2C_Master_Transmit>
 8001bae:	b980      	cbnz	r0, 8001bd2 <bme680I2cRead+0x46>
		result = -1;
	} else if (HAL_I2C_Master_Receive (&hi2c1, (dev_id << 1) | 0x01, reg_data, len, I2C_READ_TIMEOUT) != HAL_OK) {
 8001bb0:	0061      	lsls	r1, r4, #1
 8001bb2:	23fa      	movs	r3, #250	; 0xfa
 8001bb4:	9300      	str	r3, [sp, #0]
 8001bb6:	462b      	mov	r3, r5
 8001bb8:	4632      	mov	r2, r6
 8001bba:	f041 0101 	orr.w	r1, r1, #1
 8001bbe:	4806      	ldr	r0, [pc, #24]	; (8001bd8 <bme680I2cRead+0x4c>)
 8001bc0:	f003 fe28 	bl	8005814 <HAL_I2C_Master_Receive>
 8001bc4:	b910      	cbnz	r0, 8001bcc <bme680I2cRead+0x40>
		result = -1;
	} else {
		result = 0;
 8001bc6:	2000      	movs	r0, #0
	}

	return result;

}
 8001bc8:	b004      	add	sp, #16
 8001bca:	bd70      	pop	{r4, r5, r6, pc}
		result = -1;
 8001bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd0:	e7fa      	b.n	8001bc8 <bme680I2cRead+0x3c>
		result = -1;
 8001bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd6:	e7f7      	b.n	8001bc8 <bme680I2cRead+0x3c>
 8001bd8:	20000200 	.word	0x20000200

08001bdc <bme680I2cWrite>:

int8_t bme680I2cWrite(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8001bdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001be0:	b083      	sub	sp, #12
 8001be2:	4606      	mov	r6, r0
 8001be4:	4688      	mov	r8, r1
 8001be6:	4617      	mov	r7, r2
 8001be8:	461d      	mov	r5, r3
  // write to I2C line
  int8_t result;
  int8_t *buf;

  // Allocate and load I2C transmit buffer
  buf = malloc(len + 1);
 8001bea:	f103 0901 	add.w	r9, r3, #1
 8001bee:	4648      	mov	r0, r9
 8001bf0:	f011 fd54 	bl	801369c <malloc>
 8001bf4:	4604      	mov	r4, r0
  buf[0] = reg_addr;
 8001bf6:	f800 8b01 	strb.w	r8, [r0], #1
  memcpy(buf + 1, reg_data, len);
 8001bfa:	462a      	mov	r2, r5
 8001bfc:	4639      	mov	r1, r7
 8001bfe:	f011 fd5d 	bl	80136bc <memcpy>

  if (HAL_I2C_Master_Transmit(&hi2c1, (dev_id << 1), (uint8_t *) buf, len + 1, HAL_MAX_DELAY) != HAL_OK) {
 8001c02:	f04f 33ff 	mov.w	r3, #4294967295
 8001c06:	9300      	str	r3, [sp, #0]
 8001c08:	fa1f f389 	uxth.w	r3, r9
 8001c0c:	4622      	mov	r2, r4
 8001c0e:	0071      	lsls	r1, r6, #1
 8001c10:	4807      	ldr	r0, [pc, #28]	; (8001c30 <bme680I2cWrite+0x54>)
 8001c12:	f003 fd41 	bl	8005698 <HAL_I2C_Master_Transmit>
 8001c16:	b938      	cbnz	r0, 8001c28 <bme680I2cWrite+0x4c>
    result = -1;
  } else {
    result = 0;
 8001c18:	2500      	movs	r5, #0
  }

  free(buf);
 8001c1a:	4620      	mov	r0, r4
 8001c1c:	f011 fd46 	bl	80136ac <free>
  return result;
}
 8001c20:	4628      	mov	r0, r5
 8001c22:	b003      	add	sp, #12
 8001c24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    result = -1;
 8001c28:	f04f 35ff 	mov.w	r5, #4294967295
 8001c2c:	e7f5      	b.n	8001c1a <bme680I2cWrite+0x3e>
 8001c2e:	bf00      	nop
 8001c30:	20000200 	.word	0x20000200

08001c34 <bme680Init>:

bme bme680Init(struct bme680_dev gas_sensor, int8_t rslt, bme bmes) {
 8001c34:	b084      	sub	sp, #16
 8001c36:	b570      	push	{r4, r5, r6, lr}
 8001c38:	b082      	sub	sp, #8
 8001c3a:	4605      	mov	r5, r0
 8001c3c:	ac07      	add	r4, sp, #28
 8001c3e:	e884 000e 	stmia.w	r4, {r1, r2, r3}

  // ----------------------Configure the BME680 driver-----------------------------

  gas_sensor.dev_id = BME680_I2C_ADDR_PRIMARY;
 8001c42:	2376      	movs	r3, #118	; 0x76
 8001c44:	f88d 301d 	strb.w	r3, [sp, #29]
  gas_sensor.intf = BME680_I2C_INTF;
 8001c48:	2601      	movs	r6, #1
 8001c4a:	f88d 601e 	strb.w	r6, [sp, #30]
  gas_sensor.read = bme680I2cRead;
 8001c4e:	4b22      	ldr	r3, [pc, #136]	; (8001cd8 <bme680Init+0xa4>)
 8001c50:	9319      	str	r3, [sp, #100]	; 0x64
  gas_sensor.write = bme680I2cWrite;
 8001c52:	4b22      	ldr	r3, [pc, #136]	; (8001cdc <bme680Init+0xa8>)
 8001c54:	931a      	str	r3, [sp, #104]	; 0x68
  gas_sensor.delay_ms = HAL_Delay;
 8001c56:	4b22      	ldr	r3, [pc, #136]	; (8001ce0 <bme680Init+0xac>)
 8001c58:	931b      	str	r3, [sp, #108]	; 0x6c
  gas_sensor.amb_temp = 25;
 8001c5a:	2319      	movs	r3, #25
 8001c5c:	f88d 3020 	strb.w	r3, [sp, #32]

  // Initialize the driver
  if (bme680_init(&gas_sensor) != BME680_OK) {
 8001c60:	4620      	mov	r0, r4
 8001c62:	f001 fd73 	bl	800374c <bme680_init>
	//char bme_msg[] = "BME680 Initialized and Ready\r\n";
	//DebugSerialOutput(bme_msg);
  }

  // Select desired over sampling rates
  gas_sensor.tph_sett.os_hum = BME680_OS_2X;
 8001c66:	2302      	movs	r3, #2
 8001c68:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
  gas_sensor.tph_sett.os_pres = BME680_OS_4X;
 8001c6c:	2203      	movs	r2, #3
 8001c6e:	f88d 2056 	strb.w	r2, [sp, #86]	; 0x56
  gas_sensor.tph_sett.os_temp = BME680_OS_8X;
 8001c72:	2204      	movs	r2, #4
 8001c74:	f88d 2055 	strb.w	r2, [sp, #85]	; 0x55
  gas_sensor.tph_sett.filter = BME680_FILTER_SIZE_3;
 8001c78:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57

  /* Set the remaining gas sensor settings and link the heating profile */
  gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
 8001c7c:	f88d 605a 	strb.w	r6, [sp, #90]	; 0x5a
  /* Create a ramp heat waveform in 3 steps */
  gas_sensor.gas_sett.heatr_temp = 320; /* degree Celsius */
 8001c80:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001c84:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
  gas_sensor.gas_sett.heatr_dur = 150; /* milliseconds */
 8001c88:	2396      	movs	r3, #150	; 0x96
 8001c8a:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e

  // Set sensor to "always on"
  gas_sensor.power_mode = BME680_FORCED_MODE;
 8001c8e:	f88d 6060 	strb.w	r6, [sp, #96]	; 0x60

  // Set over sampling settings
  uint8_t required_settings = (BME680_OST_SEL | BME680_OSP_SEL | BME680_OSH_SEL | BME680_FILTER_SEL | BME680_GAS_SENSOR_SEL);
  rslt = bme680_set_sensor_settings(required_settings, &gas_sensor);
 8001c92:	4621      	mov	r1, r4
 8001c94:	20df      	movs	r0, #223	; 0xdf
 8001c96:	f001 fdbe 	bl	8003816 <bme680_set_sensor_settings>

  // Set sensor mode
  rslt = bme680_set_sensor_mode(&gas_sensor);
 8001c9a:	4620      	mov	r0, r4
 8001c9c:	f001 fd73 	bl	8003786 <bme680_set_sensor_mode>
 8001ca0:	4606      	mov	r6, r0

  // Query minimum sampling period
  uint16_t min_sampling_period;
  bme680_get_profile_dur(&min_sampling_period, &gas_sensor);
 8001ca2:	4621      	mov	r1, r4
 8001ca4:	f10d 0006 	add.w	r0, sp, #6
 8001ca8:	f001 fefc 	bl	8003aa4 <bme680_get_profile_dur>

  bmes.result = rslt;
 8001cac:	f88d 6078 	strb.w	r6, [sp, #120]	; 0x78
  bmes.min_period = min_sampling_period;
 8001cb0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001cb4:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
  bmes.gs = gas_sensor;
 8001cb8:	2258      	movs	r2, #88	; 0x58
 8001cba:	4621      	mov	r1, r4
 8001cbc:	a81f      	add	r0, sp, #124	; 0x7c
 8001cbe:	f011 fcfd 	bl	80136bc <memcpy>

  return bmes;
 8001cc2:	225c      	movs	r2, #92	; 0x5c
 8001cc4:	a91e      	add	r1, sp, #120	; 0x78
 8001cc6:	4628      	mov	r0, r5
 8001cc8:	f011 fcf8 	bl	80136bc <memcpy>

}//bme680 init
 8001ccc:	4628      	mov	r0, r5
 8001cce:	b002      	add	sp, #8
 8001cd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001cd4:	b004      	add	sp, #16
 8001cd6:	4770      	bx	lr
 8001cd8:	08001b8d 	.word	0x08001b8d
 8001cdc:	08001bdd 	.word	0x08001bdd
 8001ce0:	08001ae1 	.word	0x08001ae1

08001ce4 <EnvSensors_Init>:
{
 8001ce4:	b570      	push	{r4, r5, r6, lr}
 8001ce6:	b0c4      	sub	sp, #272	; 0x110
  bmes = bme680Init(gas_sensor, rslt, bmes);
 8001ce8:	4d0f      	ldr	r5, [pc, #60]	; (8001d28 <EnvSensors_Init+0x44>)
 8001cea:	4c10      	ldr	r4, [pc, #64]	; (8001d2c <EnvSensors_Init+0x48>)
 8001cec:	265c      	movs	r6, #92	; 0x5c
 8001cee:	4632      	mov	r2, r6
 8001cf0:	4629      	mov	r1, r5
 8001cf2:	a814      	add	r0, sp, #80	; 0x50
 8001cf4:	f011 fce2 	bl	80136bc <memcpy>
 8001cf8:	4b0d      	ldr	r3, [pc, #52]	; (8001d30 <EnvSensors_Init+0x4c>)
 8001cfa:	f993 3000 	ldrsb.w	r3, [r3]
 8001cfe:	9313      	str	r3, [sp, #76]	; 0x4c
 8001d00:	224c      	movs	r2, #76	; 0x4c
 8001d02:	f104 010c 	add.w	r1, r4, #12
 8001d06:	4668      	mov	r0, sp
 8001d08:	f011 fcd8 	bl	80136bc <memcpy>
 8001d0c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001d10:	a82c      	add	r0, sp, #176	; 0xb0
 8001d12:	f7ff ff8f 	bl	8001c34 <bme680Init>
 8001d16:	4632      	mov	r2, r6
 8001d18:	a92c      	add	r1, sp, #176	; 0xb0
 8001d1a:	4628      	mov	r0, r5
 8001d1c:	f011 fcce 	bl	80136bc <memcpy>
}
 8001d20:	2000      	movs	r0, #0
 8001d22:	b044      	add	sp, #272	; 0x110
 8001d24:	bd70      	pop	{r4, r5, r6, pc}
 8001d26:	bf00      	nop
 8001d28:	20000294 	.word	0x20000294
 8001d2c:	20000304 	.word	0x20000304
 8001d30:	200003c0 	.word	0x200003c0

08001d34 <bme680TakeSample>:

void bme680TakeSample(sensor_t *sensor_data, char i2c_reading_buf[100], int8_t rslt, struct bme680_field_data data, uint16_t min_sampling_period, struct bme680_dev gas_sensor) {
 8001d34:	b082      	sub	sp, #8
 8001d36:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	4604      	mov	r4, r0
 8001d3e:	4688      	mov	r8, r1
 8001d40:	930d      	str	r3, [sp, #52]	; 0x34

	//------------------------Take sample using BME-----------------------------------

	// Allow BME680 to sample environment
	HAL_Delay(min_sampling_period);
 8001d42:	f8bd 0048 	ldrh.w	r0, [sp, #72]	; 0x48
 8001d46:	f7ff fecb 	bl	8001ae0 <HAL_Delay>

	// Query the sample data
	rslt = bme680_get_sensor_data(&data, &gas_sensor);
 8001d4a:	a913      	add	r1, sp, #76	; 0x4c
 8001d4c:	a80d      	add	r0, sp, #52	; 0x34
 8001d4e:	f001 fee3 	bl	8003b18 <bme680_get_sensor_data>

	// Format results into a readable string
	sprintf(i2c_reading_buf,
	  "Temp: %u.%u degC, Pres: %u.%u hPa, Humi: %u.%u %%rH\r\n",
	  (unsigned int)data.temperature / 100,
 8001d52:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
	  (unsigned int)data.temperature % 100,
	  (unsigned int)data.pressure / 100,
 8001d56:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
	  (unsigned int)data.pressure % 100,
	  (unsigned int)data.humidity / 1000,
 8001d58:	9810      	ldr	r0, [sp, #64]	; 0x40
	sprintf(i2c_reading_buf,
 8001d5a:	4d21      	ldr	r5, [pc, #132]	; (8001de0 <bme680TakeSample+0xac>)
 8001d5c:	fba5 320c 	umull	r3, r2, r5, ip
 8001d60:	0952      	lsrs	r2, r2, #5
 8001d62:	2364      	movs	r3, #100	; 0x64
 8001d64:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8001de4 <bme680TakeSample+0xb0>
 8001d68:	fba9 6100 	umull	r6, r1, r9, r0
 8001d6c:	0989      	lsrs	r1, r1, #6
 8001d6e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8001d72:	fb06 0011 	mls	r0, r6, r1, r0
 8001d76:	9003      	str	r0, [sp, #12]
 8001d78:	9102      	str	r1, [sp, #8]
 8001d7a:	fba5 1607 	umull	r1, r6, r5, r7
 8001d7e:	0976      	lsrs	r6, r6, #5
 8001d80:	fb03 7716 	mls	r7, r3, r6, r7
 8001d84:	9701      	str	r7, [sp, #4]
 8001d86:	9600      	str	r6, [sp, #0]
 8001d88:	fb03 c312 	mls	r3, r3, r2, ip
 8001d8c:	4916      	ldr	r1, [pc, #88]	; (8001de8 <bme680TakeSample+0xb4>)
 8001d8e:	4640      	mov	r0, r8
 8001d90:	f011 fd98 	bl	80138c4 <siprintf>
	  (unsigned int)data.humidity % 1000);

	sensor_data->humidity    = data.humidity / 1000;
 8001d94:	9810      	ldr	r0, [sp, #64]	; 0x40
 8001d96:	fba9 3000 	umull	r3, r0, r9, r0
 8001d9a:	0980      	lsrs	r0, r0, #6
 8001d9c:	f7fe fd6a 	bl	8000874 <__aeabi_ui2f>
 8001da0:	60a0      	str	r0, [r4, #8]
	sensor_data->temperature = data.temperature / 100;
 8001da2:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 8001da6:	fb85 2003 	smull	r2, r0, r5, r3
 8001daa:	17db      	asrs	r3, r3, #31
 8001dac:	ebc3 1060 	rsb	r0, r3, r0, asr #5
 8001db0:	b200      	sxth	r0, r0
 8001db2:	f7fe fd63 	bl	800087c <__aeabi_i2f>
 8001db6:	6060      	str	r0, [r4, #4]
	sensor_data->pressure    = data.pressure / 100;
 8001db8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8001dba:	fba5 3000 	umull	r3, r0, r5, r0
 8001dbe:	0940      	lsrs	r0, r0, #5
 8001dc0:	f7fe fd58 	bl	8000874 <__aeabi_ui2f>
 8001dc4:	6020      	str	r0, [r4, #0]

	// Publish result to connected PC
	//DebugSerialOutput(i2c_reading_buf);

	// Request the next sample
	if (gas_sensor.power_mode == BME680_FORCED_MODE) {
 8001dc6:	f89d 3090 	ldrb.w	r3, [sp, #144]	; 0x90
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d004      	beq.n	8001dd8 <bme680TakeSample+0xa4>
	  rslt = bme680_set_sensor_mode(&gas_sensor);
	}

	//------------------------Finish BME sample--------------------------------

} // bme680TakeSample function
 8001dce:	b005      	add	sp, #20
 8001dd0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001dd4:	b002      	add	sp, #8
 8001dd6:	4770      	bx	lr
	  rslt = bme680_set_sensor_mode(&gas_sensor);
 8001dd8:	a813      	add	r0, sp, #76	; 0x4c
 8001dda:	f001 fcd4 	bl	8003786 <bme680_set_sensor_mode>
} // bme680TakeSample function
 8001dde:	e7f6      	b.n	8001dce <bme680TakeSample+0x9a>
 8001de0:	51eb851f 	.word	0x51eb851f
 8001de4:	10624dd3 	.word	0x10624dd3
 8001de8:	080141f4 	.word	0x080141f4

08001dec <EnvSensors_Read>:
{
 8001dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dee:	b09d      	sub	sp, #116	; 0x74
 8001df0:	4604      	mov	r4, r0
  TEMPERATURE_Value = (SYS_GetTemperatureLevel() >> 8);
 8001df2:	f7ff f9b1 	bl	8001158 <SYS_GetTemperatureLevel>
 8001df6:	f340 200f 	sbfx	r0, r0, #8, #16
 8001dfa:	f7fe fd3f 	bl	800087c <__aeabi_i2f>
  sensor_data->humidity    = HUMIDITY_Value;
 8001dfe:	4b10      	ldr	r3, [pc, #64]	; (8001e40 <EnvSensors_Read+0x54>)
 8001e00:	60a3      	str	r3, [r4, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8001e02:	6060      	str	r0, [r4, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8001e04:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <EnvSensors_Read+0x58>)
 8001e06:	6023      	str	r3, [r4, #0]
  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8001e08:	4b0f      	ldr	r3, [pc, #60]	; (8001e48 <EnvSensors_Read+0x5c>)
 8001e0a:	60e3      	str	r3, [r4, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8001e0c:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <EnvSensors_Read+0x60>)
 8001e0e:	6123      	str	r3, [r4, #16]
  bme680TakeSample(sensor_data, i2c_reading_buf, bmes.result, data, bmes.min_period, bmes.gs);
 8001e10:	4d0f      	ldr	r5, [pc, #60]	; (8001e50 <EnvSensors_Read+0x64>)
 8001e12:	4e10      	ldr	r6, [pc, #64]	; (8001e54 <EnvSensors_Read+0x68>)
 8001e14:	4631      	mov	r1, r6
 8001e16:	f911 7b04 	ldrsb.w	r7, [r1], #4
 8001e1a:	2258      	movs	r2, #88	; 0x58
 8001e1c:	a805      	add	r0, sp, #20
 8001e1e:	f011 fc4d 	bl	80136bc <memcpy>
 8001e22:	8873      	ldrh	r3, [r6, #2]
 8001e24:	9304      	str	r3, [sp, #16]
 8001e26:	1d2b      	adds	r3, r5, #4
 8001e28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e2a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8001e2e:	682b      	ldr	r3, [r5, #0]
 8001e30:	463a      	mov	r2, r7
 8001e32:	4909      	ldr	r1, [pc, #36]	; (8001e58 <EnvSensors_Read+0x6c>)
 8001e34:	4620      	mov	r0, r4
 8001e36:	f7ff ff7d 	bl	8001d34 <bme680TakeSample>
}
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	b01d      	add	sp, #116	; 0x74
 8001e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e40:	42480000 	.word	0x42480000
 8001e44:	447a0000 	.word	0x447a0000
 8001e48:	003e090d 	.word	0x003e090d
 8001e4c:	000503ab 	.word	0x000503ab
 8001e50:	200002f0 	.word	0x200002f0
 8001e54:	20000294 	.word	0x20000294
 8001e58:	2000035c 	.word	0x2000035c

08001e5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e5c:	b510      	push	{r4, lr}
 8001e5e:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e60:	4a0c      	ldr	r2, [pc, #48]	; (8001e94 <_sbrk+0x38>)
 8001e62:	490d      	ldr	r1, [pc, #52]	; (8001e98 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e64:	480d      	ldr	r0, [pc, #52]	; (8001e9c <_sbrk+0x40>)
 8001e66:	6800      	ldr	r0, [r0, #0]
 8001e68:	b140      	cbz	r0, 8001e7c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e6a:	480c      	ldr	r0, [pc, #48]	; (8001e9c <_sbrk+0x40>)
 8001e6c:	6800      	ldr	r0, [r0, #0]
 8001e6e:	4403      	add	r3, r0
 8001e70:	1a52      	subs	r2, r2, r1
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d806      	bhi.n	8001e84 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001e76:	4a09      	ldr	r2, [pc, #36]	; (8001e9c <_sbrk+0x40>)
 8001e78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001e7a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001e7c:	4807      	ldr	r0, [pc, #28]	; (8001e9c <_sbrk+0x40>)
 8001e7e:	4c08      	ldr	r4, [pc, #32]	; (8001ea0 <_sbrk+0x44>)
 8001e80:	6004      	str	r4, [r0, #0]
 8001e82:	e7f2      	b.n	8001e6a <_sbrk+0xe>
    errno = ENOMEM;
 8001e84:	f011 fbe0 	bl	8013648 <__errno>
 8001e88:	230c      	movs	r3, #12
 8001e8a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e90:	e7f3      	b.n	8001e7a <_sbrk+0x1e>
 8001e92:	bf00      	nop
 8001e94:	20008000 	.word	0x20008000
 8001e98:	00000800 	.word	0x00000800
 8001e9c:	200003c4 	.word	0x200003c4
 8001ea0:	20001830 	.word	0x20001830

08001ea4 <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001ea4:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <TIMER_IF_SetTimerContext+0x1c>)
 8001ea6:	6898      	ldr	r0, [r3, #8]
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001ea8:	e001      	b.n	8001eae <TIMER_IF_SetTimerContext+0xa>
 8001eaa:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <TIMER_IF_SetTimerContext+0x1c>)
 8001eac:	6898      	ldr	r0, [r3, #8]
 8001eae:	4b04      	ldr	r3, [pc, #16]	; (8001ec0 <TIMER_IF_SetTimerContext+0x1c>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	4283      	cmp	r3, r0
 8001eb4:	d1f9      	bne.n	8001eaa <TIMER_IF_SetTimerContext+0x6>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
  }
  return UINT32_MAX - ssr;
 8001eb6:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 8001eb8:	4b02      	ldr	r3, [pc, #8]	; (8001ec4 <TIMER_IF_SetTimerContext+0x20>)
 8001eba:	6018      	str	r0, [r3, #0]
}
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	40002800 	.word	0x40002800
 8001ec4:	200003cc 	.word	0x200003cc

08001ec8 <TIMER_IF_GetTimerContext>:
}
 8001ec8:	4b01      	ldr	r3, [pc, #4]	; (8001ed0 <TIMER_IF_GetTimerContext+0x8>)
 8001eca:	6818      	ldr	r0, [r3, #0]
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	200003cc 	.word	0x200003cc

08001ed4 <TIMER_IF_GetTimerElapsedTime>:
 8001ed4:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001ed6:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001ed8:	e001      	b.n	8001ede <TIMER_IF_GetTimerElapsedTime+0xa>
 8001eda:	4b05      	ldr	r3, [pc, #20]	; (8001ef0 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001edc:	6898      	ldr	r0, [r3, #8]
 8001ede:	4b04      	ldr	r3, [pc, #16]	; (8001ef0 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	4283      	cmp	r3, r0
 8001ee4:	d1f9      	bne.n	8001eda <TIMER_IF_GetTimerElapsedTime+0x6>
  return UINT32_MAX - ssr;
 8001ee6:	43c0      	mvns	r0, r0
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001ee8:	4b02      	ldr	r3, [pc, #8]	; (8001ef4 <TIMER_IF_GetTimerElapsedTime+0x20>)
 8001eea:	681b      	ldr	r3, [r3, #0]
}
 8001eec:	1ac0      	subs	r0, r0, r3
 8001eee:	4770      	bx	lr
 8001ef0:	40002800 	.word	0x40002800
 8001ef4:	200003cc 	.word	0x200003cc

08001ef8 <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 8001ef8:	4b07      	ldr	r3, [pc, #28]	; (8001f18 <TIMER_IF_GetTimerValue+0x20>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	b153      	cbz	r3, 8001f14 <TIMER_IF_GetTimerValue+0x1c>
 8001efe:	4b07      	ldr	r3, [pc, #28]	; (8001f1c <TIMER_IF_GetTimerValue+0x24>)
 8001f00:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001f02:	e001      	b.n	8001f08 <TIMER_IF_GetTimerValue+0x10>
 8001f04:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <TIMER_IF_GetTimerValue+0x24>)
 8001f06:	6898      	ldr	r0, [r3, #8]
 8001f08:	4b04      	ldr	r3, [pc, #16]	; (8001f1c <TIMER_IF_GetTimerValue+0x24>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	4283      	cmp	r3, r0
 8001f0e:	d1f9      	bne.n	8001f04 <TIMER_IF_GetTimerValue+0xc>
  return UINT32_MAX - ssr;
 8001f10:	43c0      	mvns	r0, r0
 8001f12:	4770      	bx	lr
  uint32_t ret = 0;
 8001f14:	2000      	movs	r0, #0
}
 8001f16:	4770      	bx	lr
 8001f18:	200003c8 	.word	0x200003c8
 8001f1c:	40002800 	.word	0x40002800

08001f20 <TIMER_IF_GetMinimumTimeout>:
}
 8001f20:	2003      	movs	r0, #3
 8001f22:	4770      	bx	lr

08001f24 <TIMER_IF_Convert_ms2Tick>:
{
 8001f24:	b508      	push	{r3, lr}
 8001f26:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8001f28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	0280      	lsls	r0, r0, #10
 8001f30:	0d89      	lsrs	r1, r1, #22
 8001f32:	f7fe fedd 	bl	8000cf0 <__aeabi_uldivmod>
}
 8001f36:	bd08      	pop	{r3, pc}

08001f38 <TIMER_IF_Convert_Tick2ms>:
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8001f38:	0ec2      	lsrs	r2, r0, #27
 8001f3a:	0143      	lsls	r3, r0, #5
 8001f3c:	1a1b      	subs	r3, r3, r0
 8001f3e:	f162 0200 	sbc.w	r2, r2, #0
 8001f42:	0092      	lsls	r2, r2, #2
 8001f44:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	181b      	adds	r3, r3, r0
 8001f4c:	f142 0000 	adc.w	r0, r2, #0
 8001f50:	00c0      	lsls	r0, r0, #3
 8001f52:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8001f56:	f3c3 13d5 	ubfx	r3, r3, #7, #22
}
 8001f5a:	ea43 5080 	orr.w	r0, r3, r0, lsl #22
 8001f5e:	4770      	bx	lr

08001f60 <TIMER_IF_StopTimer>:
{
 8001f60:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001f62:	4b07      	ldr	r3, [pc, #28]	; (8001f80 <TIMER_IF_StopTimer+0x20>)
 8001f64:	2201      	movs	r2, #1
 8001f66:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001f68:	4c06      	ldr	r4, [pc, #24]	; (8001f84 <TIMER_IF_StopTimer+0x24>)
 8001f6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f6e:	4620      	mov	r0, r4
 8001f70:	f004 fcdc 	bl	800692c <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001f74:	f04f 33ff 	mov.w	r3, #4294967295
 8001f78:	6323      	str	r3, [r4, #48]	; 0x30
}
 8001f7a:	2000      	movs	r0, #0
 8001f7c:	bd10      	pop	{r4, pc}
 8001f7e:	bf00      	nop
 8001f80:	40002800 	.word	0x40002800
 8001f84:	2000024c 	.word	0x2000024c

08001f88 <TIMER_IF_BkUp_Write_MSBticks>:
{
 8001f88:	b508      	push	{r3, lr}
 8001f8a:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8001f8c:	2102      	movs	r1, #2
 8001f8e:	4802      	ldr	r0, [pc, #8]	; (8001f98 <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 8001f90:	f004 ff0f 	bl	8006db2 <HAL_RTCEx_BKUPWrite>
}
 8001f94:	bd08      	pop	{r3, pc}
 8001f96:	bf00      	nop
 8001f98:	2000024c 	.word	0x2000024c

08001f9c <TIMER_IF_Init>:
{
 8001f9c:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 8001f9e:	4b0f      	ldr	r3, [pc, #60]	; (8001fdc <TIMER_IF_Init+0x40>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	b10b      	cbz	r3, 8001fa8 <TIMER_IF_Init+0xc>
}
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001fa8:	4c0d      	ldr	r4, [pc, #52]	; (8001fe0 <TIMER_IF_Init+0x44>)
 8001faa:	f04f 35ff 	mov.w	r5, #4294967295
 8001fae:	6325      	str	r5, [r4, #48]	; 0x30
    MX_RTC_Init();
 8001fb0:	f7ff fbae 	bl	8001710 <MX_RTC_Init>
    TIMER_IF_StopTimer();
 8001fb4:	f7ff ffd4 	bl	8001f60 <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001fb8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fbc:	4620      	mov	r0, r4
 8001fbe:	f004 fcb5 	bl	800692c <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001fc2:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001fc4:	4620      	mov	r0, r4
 8001fc6:	f004 fe93 	bl	8006cf0 <HAL_RTCEx_EnableBypassShadow>
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001fca:	2000      	movs	r0, #0
 8001fcc:	f7ff ffdc 	bl	8001f88 <TIMER_IF_BkUp_Write_MSBticks>
    TIMER_IF_SetTimerContext();
 8001fd0:	f7ff ff68 	bl	8001ea4 <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 8001fd4:	4b01      	ldr	r3, [pc, #4]	; (8001fdc <TIMER_IF_Init+0x40>)
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	701a      	strb	r2, [r3, #0]
 8001fda:	e7e3      	b.n	8001fa4 <TIMER_IF_Init+0x8>
 8001fdc:	200003c8 	.word	0x200003c8
 8001fe0:	2000024c 	.word	0x2000024c

08001fe4 <TIMER_IF_BkUp_Write_Seconds>:
{
 8001fe4:	b508      	push	{r3, lr}
 8001fe6:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8001fe8:	2100      	movs	r1, #0
 8001fea:	4802      	ldr	r0, [pc, #8]	; (8001ff4 <TIMER_IF_BkUp_Write_Seconds+0x10>)
 8001fec:	f004 fee1 	bl	8006db2 <HAL_RTCEx_BKUPWrite>
}
 8001ff0:	bd08      	pop	{r3, pc}
 8001ff2:	bf00      	nop
 8001ff4:	2000024c 	.word	0x2000024c

08001ff8 <TIMER_IF_BkUp_Write_SubSeconds>:
{
 8001ff8:	b508      	push	{r3, lr}
 8001ffa:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	4802      	ldr	r0, [pc, #8]	; (8002008 <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 8002000:	f004 fed7 	bl	8006db2 <HAL_RTCEx_BKUPWrite>
}
 8002004:	bd08      	pop	{r3, pc}
 8002006:	bf00      	nop
 8002008:	2000024c 	.word	0x2000024c

0800200c <TIMER_IF_StartTimer>:
{
 800200c:	b510      	push	{r4, lr}
 800200e:	b08c      	sub	sp, #48	; 0x30
 8002010:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 8002012:	222c      	movs	r2, #44	; 0x2c
 8002014:	2100      	movs	r1, #0
 8002016:	a801      	add	r0, sp, #4
 8002018:	f011 fb5e 	bl	80136d8 <memset>
  TIMER_IF_StopTimer();
 800201c:	f7ff ffa0 	bl	8001f60 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002020:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <TIMER_IF_StartTimer+0x48>)
 8002022:	6818      	ldr	r0, [r3, #0]
 8002024:	4404      	add	r4, r0
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002026:	2300      	movs	r3, #0
 8002028:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 800202a:	43e4      	mvns	r4, r4
 800202c:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800202e:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002030:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002034:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8002036:	f44f 7380 	mov.w	r3, #256	; 0x100
 800203a:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800203c:	2201      	movs	r2, #1
 800203e:	a901      	add	r1, sp, #4
 8002040:	4805      	ldr	r0, [pc, #20]	; (8002058 <TIMER_IF_StartTimer+0x4c>)
 8002042:	f004 fd99 	bl	8006b78 <HAL_RTC_SetAlarm_IT>
 8002046:	b910      	cbnz	r0, 800204e <TIMER_IF_StartTimer+0x42>
}
 8002048:	2000      	movs	r0, #0
 800204a:	b00c      	add	sp, #48	; 0x30
 800204c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800204e:	f7ff fb07 	bl	8001660 <Error_Handler>
 8002052:	e7f9      	b.n	8002048 <TIMER_IF_StartTimer+0x3c>
 8002054:	200003cc 	.word	0x200003cc
 8002058:	2000024c 	.word	0x2000024c

0800205c <TIMER_IF_BkUp_Read_MSBticks>:
{
 800205c:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 800205e:	2102      	movs	r1, #2
 8002060:	4801      	ldr	r0, [pc, #4]	; (8002068 <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 8002062:	f004 fead 	bl	8006dc0 <HAL_RTCEx_BKUPRead>
}
 8002066:	bd08      	pop	{r3, pc}
 8002068:	2000024c 	.word	0x2000024c

0800206c <TIMER_IF_GetTime>:
{
 800206c:	b538      	push	{r3, r4, r5, lr}
 800206e:	4605      	mov	r5, r0
 8002070:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <TIMER_IF_GetTime+0x34>)
 8002072:	689c      	ldr	r4, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002074:	e001      	b.n	800207a <TIMER_IF_GetTime+0xe>
 8002076:	4b0a      	ldr	r3, [pc, #40]	; (80020a0 <TIMER_IF_GetTime+0x34>)
 8002078:	689c      	ldr	r4, [r3, #8]
 800207a:	4a09      	ldr	r2, [pc, #36]	; (80020a0 <TIMER_IF_GetTime+0x34>)
 800207c:	6892      	ldr	r2, [r2, #8]
 800207e:	42a2      	cmp	r2, r4
 8002080:	d1f9      	bne.n	8002076 <TIMER_IF_GetTime+0xa>
  return UINT32_MAX - ssr;
 8002082:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002084:	f7ff ffea 	bl	800205c <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002088:	4623      	mov	r3, r4
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 800208a:	0aa4      	lsrs	r4, r4, #10
 800208c:	ea44 5480 	orr.w	r4, r4, r0, lsl #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002090:	f3c3 0009 	ubfx	r0, r3, #0, #10
 8002094:	f7ff ff50 	bl	8001f38 <TIMER_IF_Convert_Tick2ms>
 8002098:	8028      	strh	r0, [r5, #0]
}
 800209a:	4620      	mov	r0, r4
 800209c:	bd38      	pop	{r3, r4, r5, pc}
 800209e:	bf00      	nop
 80020a0:	40002800 	.word	0x40002800

080020a4 <TIMER_IF_BkUp_Read_Seconds>:
{
 80020a4:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 80020a6:	2100      	movs	r1, #0
 80020a8:	4801      	ldr	r0, [pc, #4]	; (80020b0 <TIMER_IF_BkUp_Read_Seconds+0xc>)
 80020aa:	f004 fe89 	bl	8006dc0 <HAL_RTCEx_BKUPRead>
}
 80020ae:	bd08      	pop	{r3, pc}
 80020b0:	2000024c 	.word	0x2000024c

080020b4 <TIMER_IF_BkUp_Read_SubSeconds>:
{
 80020b4:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 80020b6:	2101      	movs	r1, #1
 80020b8:	4801      	ldr	r0, [pc, #4]	; (80020c0 <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 80020ba:	f004 fe81 	bl	8006dc0 <HAL_RTCEx_BKUPRead>
}
 80020be:	bd08      	pop	{r3, pc}
 80020c0:	2000024c 	.word	0x2000024c

080020c4 <TIMER_IF_DelayMs>:
{
 80020c4:	b508      	push	{r3, lr}
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 80020c6:	f7ff ff2d 	bl	8001f24 <TIMER_IF_Convert_ms2Tick>
 80020ca:	4b0d      	ldr	r3, [pc, #52]	; (8002100 <TIMER_IF_DelayMs+0x3c>)
 80020cc:	6899      	ldr	r1, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80020ce:	e001      	b.n	80020d4 <TIMER_IF_DelayMs+0x10>
 80020d0:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <TIMER_IF_DelayMs+0x3c>)
 80020d2:	6899      	ldr	r1, [r3, #8]
 80020d4:	4a0a      	ldr	r2, [pc, #40]	; (8002100 <TIMER_IF_DelayMs+0x3c>)
 80020d6:	6892      	ldr	r2, [r2, #8]
 80020d8:	428a      	cmp	r2, r1
 80020da:	d1f9      	bne.n	80020d0 <TIMER_IF_DelayMs+0xc>
  return UINT32_MAX - ssr;
 80020dc:	43c9      	mvns	r1, r1
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80020de:	e00a      	b.n	80020f6 <TIMER_IF_DelayMs+0x32>
 80020e0:	4b07      	ldr	r3, [pc, #28]	; (8002100 <TIMER_IF_DelayMs+0x3c>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	4a06      	ldr	r2, [pc, #24]	; (8002100 <TIMER_IF_DelayMs+0x3c>)
 80020e6:	6892      	ldr	r2, [r2, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d1f9      	bne.n	80020e0 <TIMER_IF_DelayMs+0x1c>
  return UINT32_MAX - ssr;
 80020ec:	43db      	mvns	r3, r3
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80020ee:	1a5b      	subs	r3, r3, r1
 80020f0:	4283      	cmp	r3, r0
 80020f2:	d203      	bcs.n	80020fc <TIMER_IF_DelayMs+0x38>
    __NOP();
 80020f4:	bf00      	nop
 80020f6:	4b02      	ldr	r3, [pc, #8]	; (8002100 <TIMER_IF_DelayMs+0x3c>)
 80020f8:	689b      	ldr	r3, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80020fa:	e7f3      	b.n	80020e4 <TIMER_IF_DelayMs+0x20>
}
 80020fc:	bd08      	pop	{r3, pc}
 80020fe:	bf00      	nop
 8002100:	40002800 	.word	0x40002800

08002104 <HAL_RTC_AlarmAEventCallback>:
{
 8002104:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8002106:	f011 f8f9 	bl	80132fc <UTIL_TIMER_IRQ_Handler>
}
 800210a:	bd08      	pop	{r3, pc}

0800210c <HAL_RTCEx_SSRUEventCallback>:
{
 800210c:	b508      	push	{r3, lr}
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 800210e:	f7ff ffa5 	bl	800205c <TIMER_IF_BkUp_Read_MSBticks>
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002112:	3001      	adds	r0, #1
 8002114:	f7ff ff38 	bl	8001f88 <TIMER_IF_BkUp_Write_MSBticks>
}
 8002118:	bd08      	pop	{r3, pc}
	...

0800211c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800211c:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800211e:	4817      	ldr	r0, [pc, #92]	; (800217c <MX_USART2_UART_Init+0x60>)
 8002120:	4b17      	ldr	r3, [pc, #92]	; (8002180 <MX_USART2_UART_Init+0x64>)
 8002122:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8002124:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002128:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800212a:	2300      	movs	r3, #0
 800212c:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800212e:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002130:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002132:	220c      	movs	r2, #12
 8002134:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002136:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002138:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800213a:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800213c:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800213e:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002140:	f006 f93d 	bl	80083be <HAL_UART_Init>
 8002144:	b970      	cbnz	r0, 8002164 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002146:	2100      	movs	r1, #0
 8002148:	480c      	ldr	r0, [pc, #48]	; (800217c <MX_USART2_UART_Init+0x60>)
 800214a:	f006 fafa 	bl	8008742 <HAL_UARTEx_SetTxFifoThreshold>
 800214e:	b960      	cbnz	r0, 800216a <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002150:	2100      	movs	r1, #0
 8002152:	480a      	ldr	r0, [pc, #40]	; (800217c <MX_USART2_UART_Init+0x60>)
 8002154:	f006 fb1a 	bl	800878c <HAL_UARTEx_SetRxFifoThreshold>
 8002158:	b950      	cbnz	r0, 8002170 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 800215a:	4808      	ldr	r0, [pc, #32]	; (800217c <MX_USART2_UART_Init+0x60>)
 800215c:	f006 facd 	bl	80086fa <HAL_UARTEx_EnableFifoMode>
 8002160:	b948      	cbnz	r0, 8002176 <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002162:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002164:	f7ff fa7c 	bl	8001660 <Error_Handler>
 8002168:	e7ed      	b.n	8002146 <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 800216a:	f7ff fa79 	bl	8001660 <Error_Handler>
 800216e:	e7ef      	b.n	8002150 <MX_USART2_UART_Init+0x34>
    Error_Handler();
 8002170:	f7ff fa76 	bl	8001660 <Error_Handler>
 8002174:	e7f1      	b.n	800215a <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 8002176:	f7ff fa73 	bl	8001660 <Error_Handler>
}
 800217a:	e7f2      	b.n	8002162 <MX_USART2_UART_Init+0x46>
 800217c:	20000430 	.word	0x20000430
 8002180:	40004400 	.word	0x40004400

08002184 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002184:	b530      	push	{r4, r5, lr}
 8002186:	b097      	sub	sp, #92	; 0x5c
 8002188:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218a:	2100      	movs	r1, #0
 800218c:	9111      	str	r1, [sp, #68]	; 0x44
 800218e:	9112      	str	r1, [sp, #72]	; 0x48
 8002190:	9113      	str	r1, [sp, #76]	; 0x4c
 8002192:	9114      	str	r1, [sp, #80]	; 0x50
 8002194:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002196:	2238      	movs	r2, #56	; 0x38
 8002198:	a803      	add	r0, sp, #12
 800219a:	f011 fa9d 	bl	80136d8 <memset>
  if(uartHandle->Instance==USART2)
 800219e:	6822      	ldr	r2, [r4, #0]
 80021a0:	4b2d      	ldr	r3, [pc, #180]	; (8002258 <HAL_UART_MspInit+0xd4>)
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d001      	beq.n	80021aa <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80021a6:	b017      	add	sp, #92	; 0x5c
 80021a8:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80021aa:	2302      	movs	r3, #2
 80021ac:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80021ae:	4b2b      	ldr	r3, [pc, #172]	; (800225c <HAL_UART_MspInit+0xd8>)
 80021b0:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021b2:	a803      	add	r0, sp, #12
 80021b4:	f004 fa70 	bl	8006698 <HAL_RCCEx_PeriphCLKConfig>
 80021b8:	2800      	cmp	r0, #0
 80021ba:	d144      	bne.n	8002246 <HAL_UART_MspInit+0xc2>
  SET_BIT(RCC->APB1ENR1, Periphs);
 80021bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80021c2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80021c6:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80021c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80021ca:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80021ce:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80021d0:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80021d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021d4:	f042 0201 	orr.w	r2, r2, #1
 80021d8:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80021da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80021e2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 80021e4:	230c      	movs	r3, #12
 80021e6:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e8:	2302      	movs	r3, #2
 80021ea:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2500      	movs	r5, #0
 80021ee:	9513      	str	r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f0:	2303      	movs	r3, #3
 80021f2:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021f4:	2307      	movs	r3, #7
 80021f6:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f8:	a911      	add	r1, sp, #68	; 0x44
 80021fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021fe:	f002 fee5 	bl	8004fcc <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel5;
 8002202:	4817      	ldr	r0, [pc, #92]	; (8002260 <HAL_UART_MspInit+0xdc>)
 8002204:	4b17      	ldr	r3, [pc, #92]	; (8002264 <HAL_UART_MspInit+0xe0>)
 8002206:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002208:	2314      	movs	r3, #20
 800220a:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800220c:	2310      	movs	r3, #16
 800220e:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002210:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002212:	2380      	movs	r3, #128	; 0x80
 8002214:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002216:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002218:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800221a:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800221c:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800221e:	f002 fb3d 	bl	800489c <HAL_DMA_Init>
 8002222:	b998      	cbnz	r0, 800224c <HAL_UART_MspInit+0xc8>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002224:	2110      	movs	r1, #16
 8002226:	480e      	ldr	r0, [pc, #56]	; (8002260 <HAL_UART_MspInit+0xdc>)
 8002228:	f002 fd3a 	bl	8004ca0 <HAL_DMA_ConfigChannelAttributes>
 800222c:	b988      	cbnz	r0, 8002252 <HAL_UART_MspInit+0xce>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800222e:	4b0c      	ldr	r3, [pc, #48]	; (8002260 <HAL_UART_MspInit+0xdc>)
 8002230:	67a3      	str	r3, [r4, #120]	; 0x78
 8002232:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8002234:	2200      	movs	r2, #0
 8002236:	2102      	movs	r1, #2
 8002238:	2025      	movs	r0, #37	; 0x25
 800223a:	f002 fa67 	bl	800470c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800223e:	2025      	movs	r0, #37	; 0x25
 8002240:	f002 fa9c 	bl	800477c <HAL_NVIC_EnableIRQ>
}
 8002244:	e7af      	b.n	80021a6 <HAL_UART_MspInit+0x22>
      Error_Handler();
 8002246:	f7ff fa0b 	bl	8001660 <Error_Handler>
 800224a:	e7b7      	b.n	80021bc <HAL_UART_MspInit+0x38>
      Error_Handler();
 800224c:	f7ff fa08 	bl	8001660 <Error_Handler>
 8002250:	e7e8      	b.n	8002224 <HAL_UART_MspInit+0xa0>
      Error_Handler();
 8002252:	f7ff fa05 	bl	8001660 <Error_Handler>
 8002256:	e7ea      	b.n	800222e <HAL_UART_MspInit+0xaa>
 8002258:	40004400 	.word	0x40004400
 800225c:	000c0004 	.word	0x000c0004
 8002260:	200003d0 	.word	0x200003d0
 8002264:	40020058 	.word	0x40020058

08002268 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART2)
 8002268:	6802      	ldr	r2, [r0, #0]
 800226a:	4b0c      	ldr	r3, [pc, #48]	; (800229c <HAL_UART_MspDeInit+0x34>)
 800226c:	429a      	cmp	r2, r3
 800226e:	d000      	beq.n	8002272 <HAL_UART_MspDeInit+0xa>
 8002270:	4770      	bx	lr
{
 8002272:	b510      	push	{r4, lr}
 8002274:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8002276:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800227a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800227c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002280:	6593      	str	r3, [r2, #88]	; 0x58

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 8002282:	210c      	movs	r1, #12
 8002284:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002288:	f002 ff72 	bl	8005170 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800228c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800228e:	f002 fb77 	bl	8004980 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002292:	2025      	movs	r0, #37	; 0x25
 8002294:	f002 fa80 	bl	8004798 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8002298:	bd10      	pop	{r4, pc}
 800229a:	bf00      	nop
 800229c:	40004400 	.word	0x40004400

080022a0 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 80022a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80022a2:	4b07      	ldr	r3, [pc, #28]	; (80022c0 <vcom_Init+0x20>)
 80022a4:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 80022a6:	f7fe ffad 	bl	8001204 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80022aa:	f7ff ff37 	bl	800211c <MX_USART2_UART_Init>
  SET_BIT(EXTI->IMR1, ExtiLine);
 80022ae:	4a05      	ldr	r2, [pc, #20]	; (80022c4 <vcom_Init+0x24>)
 80022b0:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80022b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80022b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 80022bc:	2000      	movs	r0, #0
 80022be:	bd08      	pop	{r3, pc}
 80022c0:	200004c4 	.word	0x200004c4
 80022c4:	58000800 	.word	0x58000800

080022c8 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80022c8:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB1RSTR1, Periphs);
 80022ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022d0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80022d4:	639a      	str	r2, [r3, #56]	; 0x38
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 80022d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022d8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80022dc:	639a      	str	r2, [r3, #56]	; 0x38
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
  __HAL_RCC_USART2_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 80022de:	4804      	ldr	r0, [pc, #16]	; (80022f0 <vcom_DeInit+0x28>)
 80022e0:	f7ff ffc2 	bl	8002268 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 80022e4:	200f      	movs	r0, #15
 80022e6:	f002 fa57 	bl	8004798 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80022ea:	2000      	movs	r0, #0
 80022ec:	bd08      	pop	{r3, pc}
 80022ee:	bf00      	nop
 80022f0:	20000430 	.word	0x20000430

080022f4 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80022f4:	b508      	push	{r3, lr}
 80022f6:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 80022f8:	4601      	mov	r1, r0
 80022fa:	4802      	ldr	r0, [pc, #8]	; (8002304 <vcom_Trace_DMA+0x10>)
 80022fc:	f005 f92c 	bl	8007558 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002300:	2000      	movs	r0, #0
 8002302:	bd08      	pop	{r3, pc}
 8002304:	20000430 	.word	0x20000430

08002308 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002308:	b510      	push	{r4, lr}
 800230a:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 800230c:	4b12      	ldr	r3, [pc, #72]	; (8002358 <vcom_ReceiveInit+0x50>)
 800230e:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002310:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002314:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 8002316:	ab02      	add	r3, sp, #8
 8002318:	e913 0006 	ldmdb	r3, {r1, r2}
 800231c:	480f      	ldr	r0, [pc, #60]	; (800235c <vcom_ReceiveInit+0x54>)
 800231e:	f006 f994 	bl	800864a <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 8002322:	4b0e      	ldr	r3, [pc, #56]	; (800235c <vcom_ReceiveInit+0x54>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	69da      	ldr	r2, [r3, #28]
 8002328:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800232c:	d1f9      	bne.n	8002322 <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 800232e:	69da      	ldr	r2, [r3, #28]
 8002330:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8002334:	d0fb      	beq.n	800232e <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800233c:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 800233e:	4c07      	ldr	r4, [pc, #28]	; (800235c <vcom_ReceiveInit+0x54>)
 8002340:	4620      	mov	r0, r4
 8002342:	f006 f9c3 	bl	80086cc <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 8002346:	2201      	movs	r2, #1
 8002348:	4905      	ldr	r1, [pc, #20]	; (8002360 <vcom_ReceiveInit+0x58>)
 800234a:	4620      	mov	r0, r4
 800234c:	f006 f90e 	bl	800856c <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002350:	2000      	movs	r0, #0
 8002352:	b002      	add	sp, #8
 8002354:	bd10      	pop	{r4, pc}
 8002356:	bf00      	nop
 8002358:	200004c0 	.word	0x200004c0
 800235c:	20000430 	.word	0x20000430
 8002360:	200004c8 	.word	0x200004c8

08002364 <vcom_Resume>:

void vcom_Resume(void)
{
 8002364:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002366:	4807      	ldr	r0, [pc, #28]	; (8002384 <vcom_Resume+0x20>)
 8002368:	f006 f829 	bl	80083be <HAL_UART_Init>
 800236c:	b920      	cbnz	r0, 8002378 <vcom_Resume+0x14>
  {
    Error_Handler();
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800236e:	4806      	ldr	r0, [pc, #24]	; (8002388 <vcom_Resume+0x24>)
 8002370:	f002 fa94 	bl	800489c <HAL_DMA_Init>
 8002374:	b918      	cbnz	r0, 800237e <vcom_Resume+0x1a>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8002376:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002378:	f7ff f972 	bl	8001660 <Error_Handler>
 800237c:	e7f7      	b.n	800236e <vcom_Resume+0xa>
    Error_Handler();
 800237e:	f7ff f96f 	bl	8001660 <Error_Handler>
}
 8002382:	e7f8      	b.n	8002376 <vcom_Resume+0x12>
 8002384:	20000430 	.word	0x20000430
 8002388:	200003d0 	.word	0x200003d0

0800238c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800238c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 800238e:	6802      	ldr	r2, [r0, #0]
 8002390:	4b04      	ldr	r3, [pc, #16]	; (80023a4 <HAL_UART_TxCpltCallback+0x18>)
 8002392:	429a      	cmp	r2, r3
 8002394:	d000      	beq.n	8002398 <HAL_UART_TxCpltCallback+0xc>
    TxCpltCallback(NULL);
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002396:	bd08      	pop	{r3, pc}
    TxCpltCallback(NULL);
 8002398:	4b03      	ldr	r3, [pc, #12]	; (80023a8 <HAL_UART_TxCpltCallback+0x1c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2000      	movs	r0, #0
 800239e:	4798      	blx	r3
}
 80023a0:	e7f9      	b.n	8002396 <HAL_UART_TxCpltCallback+0xa>
 80023a2:	bf00      	nop
 80023a4:	40004400 	.word	0x40004400
 80023a8:	200004c4 	.word	0x200004c4

080023ac <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 80023ac:	6802      	ldr	r2, [r0, #0]
 80023ae:	4b0a      	ldr	r3, [pc, #40]	; (80023d8 <HAL_UART_RxCpltCallback+0x2c>)
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d000      	beq.n	80023b6 <HAL_UART_RxCpltCallback+0xa>
 80023b4:	4770      	bx	lr
{
 80023b6:	b510      	push	{r4, lr}
 80023b8:	4604      	mov	r4, r0
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 80023ba:	4b08      	ldr	r3, [pc, #32]	; (80023dc <HAL_UART_RxCpltCallback+0x30>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	b12b      	cbz	r3, 80023cc <HAL_UART_RxCpltCallback+0x20>
 80023c0:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 80023c4:	b912      	cbnz	r2, 80023cc <HAL_UART_RxCpltCallback+0x20>
    {
      RxCpltCallback(&charRx, 1, 0);
 80023c6:	2101      	movs	r1, #1
 80023c8:	4805      	ldr	r0, [pc, #20]	; (80023e0 <HAL_UART_RxCpltCallback+0x34>)
 80023ca:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 80023cc:	2201      	movs	r2, #1
 80023ce:	4904      	ldr	r1, [pc, #16]	; (80023e0 <HAL_UART_RxCpltCallback+0x34>)
 80023d0:	4620      	mov	r0, r4
 80023d2:	f006 f8cb 	bl	800856c <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80023d6:	bd10      	pop	{r4, pc}
 80023d8:	40004400 	.word	0x40004400
 80023dc:	200004c0 	.word	0x200004c0
 80023e0:	200004c8 	.word	0x200004c8

080023e4 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 80023e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 80023e6:	f7ff fabf 	bl	8001968 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 80023ea:	f000 fbc9 	bl	8002b80 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 80023ee:	bd08      	pop	{r3, pc}

080023f0 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 80023f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80023f2:	f04f 30ff 	mov.w	r0, #4294967295
 80023f6:	f010 fcd1 	bl	8012d9c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 80023fa:	bd08      	pop	{r3, pc}

080023fc <OnTxFrameCtrlChanged>:
static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 80023fc:	4b01      	ldr	r3, [pc, #4]	; (8002404 <OnTxFrameCtrlChanged+0x8>)
 80023fe:	70d8      	strb	r0, [r3, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	20000058 	.word	0x20000058

08002408 <OnPingSlotPeriodicityChanged>:
static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 8002408:	4b01      	ldr	r3, [pc, #4]	; (8002410 <OnPingSlotPeriodicityChanged+0x8>)
 800240a:	7318      	strb	r0, [r3, #12]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	20000058 	.word	0x20000058

08002414 <OnBeaconStatusChange>:
  if (params != NULL)
 8002414:	2800      	cmp	r0, #0
 8002416:	d03f      	beq.n	8002498 <OnBeaconStatusChange+0x84>
{
 8002418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800241c:	b08c      	sub	sp, #48	; 0x30
 800241e:	4603      	mov	r3, r0
    switch (params->State)
 8002420:	7842      	ldrb	r2, [r0, #1]
 8002422:	2a02      	cmp	r2, #2
 8002424:	d00a      	beq.n	800243c <OnBeaconStatusChange+0x28>
 8002426:	2a03      	cmp	r2, #3
 8002428:	d02f      	beq.n	800248a <OnBeaconStatusChange+0x76>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800242a:	4b1c      	ldr	r3, [pc, #112]	; (800249c <OnBeaconStatusChange+0x88>)
 800242c:	2200      	movs	r2, #0
 800242e:	4611      	mov	r1, r2
 8002430:	2002      	movs	r0, #2
 8002432:	f010 fb55 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
}
 8002436:	b00c      	add	sp, #48	; 0x30
 8002438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        APP_LOG(TS_OFF, VLEVEL_M,
 800243c:	7c02      	ldrb	r2, [r0, #16]
 800243e:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
 8002442:	f990 0014 	ldrsb.w	r0, [r0, #20]
 8002446:	7d9c      	ldrb	r4, [r3, #22]
 8002448:	7ddd      	ldrb	r5, [r3, #23]
 800244a:	7e1e      	ldrb	r6, [r3, #24]
 800244c:	7e5f      	ldrb	r7, [r3, #25]
 800244e:	f893 c01a 	ldrb.w	ip, [r3, #26]
 8002452:	f893 e01b 	ldrb.w	lr, [r3, #27]
 8002456:	f893 801c 	ldrb.w	r8, [r3, #28]
 800245a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800245e:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 8002462:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8002466:	9708      	str	r7, [sp, #32]
 8002468:	9607      	str	r6, [sp, #28]
 800246a:	9506      	str	r5, [sp, #24]
 800246c:	9405      	str	r4, [sp, #20]
 800246e:	685c      	ldr	r4, [r3, #4]
 8002470:	9404      	str	r4, [sp, #16]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	9303      	str	r3, [sp, #12]
 8002476:	9002      	str	r0, [sp, #8]
 8002478:	9101      	str	r1, [sp, #4]
 800247a:	9200      	str	r2, [sp, #0]
 800247c:	4b08      	ldr	r3, [pc, #32]	; (80024a0 <OnBeaconStatusChange+0x8c>)
 800247e:	2200      	movs	r2, #0
 8002480:	4611      	mov	r1, r2
 8002482:	2002      	movs	r0, #2
 8002484:	f010 fb2c 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8002488:	e7d5      	b.n	8002436 <OnBeaconStatusChange+0x22>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800248a:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <OnBeaconStatusChange+0x90>)
 800248c:	2200      	movs	r2, #0
 800248e:	4611      	mov	r1, r2
 8002490:	2002      	movs	r0, #2
 8002492:	f010 fb25 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
}
 8002496:	e7ce      	b.n	8002436 <OnBeaconStatusChange+0x22>
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	0801427c 	.word	0x0801427c
 80024a0:	08014294 	.word	0x08014294
 80024a4:	08014308 	.word	0x08014308

080024a8 <OnClassChange>:
{
 80024a8:	b500      	push	{lr}
 80024aa:	b083      	sub	sp, #12
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 80024ac:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <OnClassChange+0x1c>)
 80024ae:	5c1b      	ldrb	r3, [r3, r0]
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <OnClassChange+0x20>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	4611      	mov	r1, r2
 80024b8:	2002      	movs	r0, #2
 80024ba:	f010 fb11 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
}
 80024be:	b003      	add	sp, #12
 80024c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80024c4:	08014344 	.word	0x08014344
 80024c8:	08014328 	.word	0x08014328

080024cc <OnNvmDataChange>:

  /* USER CODE END StoreContext_Last */
}

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 80024cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 80024ce:	2801      	cmp	r0, #1
 80024d0:	d006      	beq.n	80024e0 <OnNvmDataChange+0x14>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 80024d2:	4b07      	ldr	r3, [pc, #28]	; (80024f0 <OnNvmDataChange+0x24>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	4611      	mov	r1, r2
 80024d8:	2002      	movs	r0, #2
 80024da:	f010 fb01 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 80024de:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 80024e0:	4b04      	ldr	r3, [pc, #16]	; (80024f4 <OnNvmDataChange+0x28>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	4611      	mov	r1, r2
 80024e6:	2002      	movs	r0, #2
 80024e8:	f010 fafa 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
 80024ec:	e7f7      	b.n	80024de <OnNvmDataChange+0x12>
 80024ee:	bf00      	nop
 80024f0:	0801435c 	.word	0x0801435c
 80024f4:	08014348 	.word	0x08014348

080024f8 <OnTxTimerEvent>:
{
 80024f8:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 80024fa:	2100      	movs	r1, #0
 80024fc:	2002      	movs	r0, #2
 80024fe:	f010 fc19 	bl	8012d34 <UTIL_SEQ_SetTask>
  UTIL_TIMER_Start(&TxTimer);
 8002502:	4802      	ldr	r0, [pc, #8]	; (800250c <OnTxTimerEvent+0x14>)
 8002504:	f010 fe9a 	bl	801323c <UTIL_TIMER_Start>
}
 8002508:	bd08      	pop	{r3, pc}
 800250a:	bf00      	nop
 800250c:	20000620 	.word	0x20000620

08002510 <OnMacProcessNotify>:
{
 8002510:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 8002512:	2100      	movs	r1, #0
 8002514:	2001      	movs	r0, #1
 8002516:	f010 fc0d 	bl	8012d34 <UTIL_SEQ_SetTask>
}
 800251a:	bd08      	pop	{r3, pc}

0800251c <OnSystemReset>:
{
 800251c:	b508      	push	{r3, lr}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800251e:	f006 fe1f 	bl	8009160 <LmHandlerHalt>
 8002522:	b100      	cbz	r0, 8002526 <OnSystemReset+0xa>
}
 8002524:	bd08      	pop	{r3, pc}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002526:	f006 fa9d 	bl	8008a64 <LmHandlerJoinStatus>
 800252a:	2801      	cmp	r0, #1
 800252c:	d1fa      	bne.n	8002524 <OnSystemReset+0x8>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800252e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002532:	4905      	ldr	r1, [pc, #20]	; (8002548 <OnSystemReset+0x2c>)
 8002534:	68ca      	ldr	r2, [r1, #12]
 8002536:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800253a:	4b04      	ldr	r3, [pc, #16]	; (800254c <OnSystemReset+0x30>)
 800253c:	4313      	orrs	r3, r2
 800253e:	60cb      	str	r3, [r1, #12]
 8002540:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002544:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8002546:	e7fd      	b.n	8002544 <OnSystemReset+0x28>
 8002548:	e000ed00 	.word	0xe000ed00
 800254c:	05fa0004 	.word	0x05fa0004

08002550 <OnTxPeriodicityChanged>:
{
 8002550:	b510      	push	{r4, lr}
  TxPeriodicity = periodicity;
 8002552:	4b09      	ldr	r3, [pc, #36]	; (8002578 <OnTxPeriodicityChanged+0x28>)
 8002554:	6018      	str	r0, [r3, #0]
  if (TxPeriodicity == 0)
 8002556:	b910      	cbnz	r0, 800255e <OnTxPeriodicityChanged+0xe>
    TxPeriodicity = APP_TX_DUTYCYCLE;
 8002558:	f242 7210 	movw	r2, #10000	; 0x2710
 800255c:	601a      	str	r2, [r3, #0]
  UTIL_TIMER_Stop(&TxTimer);
 800255e:	4c07      	ldr	r4, [pc, #28]	; (800257c <OnTxPeriodicityChanged+0x2c>)
 8002560:	4620      	mov	r0, r4
 8002562:	f010 fe11 	bl	8013188 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 8002566:	4b04      	ldr	r3, [pc, #16]	; (8002578 <OnTxPeriodicityChanged+0x28>)
 8002568:	6819      	ldr	r1, [r3, #0]
 800256a:	4620      	mov	r0, r4
 800256c:	f010 feac 	bl	80132c8 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 8002570:	4620      	mov	r0, r4
 8002572:	f010 fe63 	bl	801323c <UTIL_TIMER_Start>
}
 8002576:	bd10      	pop	{r4, pc}
 8002578:	2000006c 	.word	0x2000006c
 800257c:	20000620 	.word	0x20000620

08002580 <OnTxData>:
  if ((params != NULL))
 8002580:	2800      	cmp	r0, #0
 8002582:	d042      	beq.n	800260a <OnTxData+0x8a>
{
 8002584:	b510      	push	{r4, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	4604      	mov	r4, r0
    if (params->IsMcpsConfirm != 0)
 800258a:	7803      	ldrb	r3, [r0, #0]
 800258c:	b90b      	cbnz	r3, 8002592 <OnTxData+0x12>
}
 800258e:	b004      	add	sp, #16
 8002590:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 8002592:	2201      	movs	r2, #1
 8002594:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002598:	481c      	ldr	r0, [pc, #112]	; (800260c <OnTxData+0x8c>)
 800259a:	f002 fe67 	bl	800526c <HAL_GPIO_WritePin>
      UTIL_TIMER_Start(&TxLedTimer);
 800259e:	481c      	ldr	r0, [pc, #112]	; (8002610 <OnTxData+0x90>)
 80025a0:	f010 fe4c 	bl	801323c <UTIL_TIMER_Start>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 80025a4:	4b1b      	ldr	r3, [pc, #108]	; (8002614 <OnTxData+0x94>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	4611      	mov	r1, r2
 80025aa:	2002      	movs	r0, #2
 80025ac:	f010 fa98 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 80025b0:	7c23      	ldrb	r3, [r4, #16]
 80025b2:	f994 200a 	ldrsb.w	r2, [r4, #10]
 80025b6:	f994 1018 	ldrsb.w	r1, [r4, #24]
 80025ba:	9103      	str	r1, [sp, #12]
 80025bc:	9202      	str	r2, [sp, #8]
 80025be:	9301      	str	r3, [sp, #4]
 80025c0:	68e3      	ldr	r3, [r4, #12]
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	4b14      	ldr	r3, [pc, #80]	; (8002618 <OnTxData+0x98>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	4611      	mov	r1, r2
 80025ca:	2003      	movs	r0, #3
 80025cc:	f010 fa88 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 80025d0:	4b12      	ldr	r3, [pc, #72]	; (800261c <OnTxData+0x9c>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	4611      	mov	r1, r2
 80025d6:	2003      	movs	r0, #3
 80025d8:	f010 fa82 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 80025dc:	7a23      	ldrb	r3, [r4, #8]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d10c      	bne.n	80025fc <OnTxData+0x7c>
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 80025e2:	7a63      	ldrb	r3, [r4, #9]
 80025e4:	b143      	cbz	r3, 80025f8 <OnTxData+0x78>
 80025e6:	4b0e      	ldr	r3, [pc, #56]	; (8002620 <OnTxData+0xa0>)
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	4b0e      	ldr	r3, [pc, #56]	; (8002624 <OnTxData+0xa4>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	4611      	mov	r1, r2
 80025f0:	2003      	movs	r0, #3
 80025f2:	f010 fa75 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
 80025f6:	e7ca      	b.n	800258e <OnTxData+0xe>
 80025f8:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <OnTxData+0xa8>)
 80025fa:	e7f5      	b.n	80025e8 <OnTxData+0x68>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 80025fc:	4b0b      	ldr	r3, [pc, #44]	; (800262c <OnTxData+0xac>)
 80025fe:	2200      	movs	r2, #0
 8002600:	4611      	mov	r1, r2
 8002602:	2003      	movs	r0, #3
 8002604:	f010 fa6c 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
}
 8002608:	e7c1      	b.n	800258e <OnTxData+0xe>
 800260a:	4770      	bx	lr
 800260c:	48000400 	.word	0x48000400
 8002610:	20000608 	.word	0x20000608
 8002614:	0801437c 	.word	0x0801437c
 8002618:	080143b0 	.word	0x080143b0
 800261c:	080143e4 	.word	0x080143e4
 8002620:	08014378 	.word	0x08014378
 8002624:	080143f4 	.word	0x080143f4
 8002628:	08014370 	.word	0x08014370
 800262c:	08014408 	.word	0x08014408

08002630 <OnJoinRequest>:
  if (joinParams != NULL)
 8002630:	b358      	cbz	r0, 800268a <OnJoinRequest+0x5a>
{
 8002632:	b510      	push	{r4, lr}
 8002634:	4604      	mov	r4, r0
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 8002636:	f990 3005 	ldrsb.w	r3, [r0, #5]
 800263a:	b9fb      	cbnz	r3, 800267c <OnJoinRequest+0x4c>
      UTIL_TIMER_Stop(&JoinLedTimer);
 800263c:	4813      	ldr	r0, [pc, #76]	; (800268c <OnJoinRequest+0x5c>)
 800263e:	f010 fda3 	bl	8013188 <UTIL_TIMER_Stop>
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002642:	2200      	movs	r2, #0
 8002644:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002648:	4811      	ldr	r0, [pc, #68]	; (8002690 <OnJoinRequest+0x60>)
 800264a:	f002 fe0f 	bl	800526c <HAL_GPIO_WritePin>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800264e:	4b11      	ldr	r3, [pc, #68]	; (8002694 <OnJoinRequest+0x64>)
 8002650:	2200      	movs	r2, #0
 8002652:	4611      	mov	r1, r2
 8002654:	2002      	movs	r0, #2
 8002656:	f010 fa43 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800265a:	79a3      	ldrb	r3, [r4, #6]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d006      	beq.n	800266e <OnJoinRequest+0x3e>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 8002660:	4b0d      	ldr	r3, [pc, #52]	; (8002698 <OnJoinRequest+0x68>)
 8002662:	2200      	movs	r2, #0
 8002664:	4611      	mov	r1, r2
 8002666:	2002      	movs	r0, #2
 8002668:	f010 fa3a 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
 800266c:	e00c      	b.n	8002688 <OnJoinRequest+0x58>
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800266e:	4b0b      	ldr	r3, [pc, #44]	; (800269c <OnJoinRequest+0x6c>)
 8002670:	2200      	movs	r2, #0
 8002672:	4611      	mov	r1, r2
 8002674:	2002      	movs	r0, #2
 8002676:	f010 fa33 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
 800267a:	e005      	b.n	8002688 <OnJoinRequest+0x58>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800267c:	4b08      	ldr	r3, [pc, #32]	; (80026a0 <OnJoinRequest+0x70>)
 800267e:	2200      	movs	r2, #0
 8002680:	4611      	mov	r1, r2
 8002682:	2002      	movs	r0, #2
 8002684:	f010 fa2c 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
}
 8002688:	bd10      	pop	{r4, pc}
 800268a:	4770      	bx	lr
 800268c:	200005c0 	.word	0x200005c0
 8002690:	48000400 	.word	0x48000400
 8002694:	08014418 	.word	0x08014418
 8002698:	08014450 	.word	0x08014450
 800269c:	08014430 	.word	0x08014430
 80026a0:	08014470 	.word	0x08014470

080026a4 <OnStopJoinTimerEvent>:
{
 80026a4:	b510      	push	{r4, lr}
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 80026a6:	4b0e      	ldr	r3, [pc, #56]	; (80026e0 <OnStopJoinTimerEvent+0x3c>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d013      	beq.n	80026d6 <OnStopJoinTimerEvent+0x32>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 80026ae:	4c0d      	ldr	r4, [pc, #52]	; (80026e4 <OnStopJoinTimerEvent+0x40>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026b6:	4620      	mov	r0, r4
 80026b8:	f002 fdd8 	bl	800526c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 80026bc:	2200      	movs	r2, #0
 80026be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026c2:	4620      	mov	r0, r4
 80026c4:	f002 fdd2 	bl	800526c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 80026c8:	2200      	movs	r2, #0
 80026ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026ce:	4620      	mov	r0, r4
 80026d0:	f002 fdcc 	bl	800526c <HAL_GPIO_WritePin>
}
 80026d4:	bd10      	pop	{r4, pc}
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 80026d6:	2100      	movs	r1, #0
 80026d8:	2008      	movs	r0, #8
 80026da:	f010 fb2b 	bl	8012d34 <UTIL_SEQ_SetTask>
 80026de:	e7e6      	b.n	80026ae <OnStopJoinTimerEvent+0xa>
 80026e0:	20000000 	.word	0x20000000
 80026e4:	48000400 	.word	0x48000400

080026e8 <OnRxTimerLedEvent>:
{
 80026e8:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 80026ea:	2200      	movs	r2, #0
 80026ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026f0:	4801      	ldr	r0, [pc, #4]	; (80026f8 <OnRxTimerLedEvent+0x10>)
 80026f2:	f002 fdbb 	bl	800526c <HAL_GPIO_WritePin>
}
 80026f6:	bd08      	pop	{r3, pc}
 80026f8:	48000400 	.word	0x48000400

080026fc <OnTxTimerLedEvent>:
{
 80026fc:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 80026fe:	2200      	movs	r2, #0
 8002700:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002704:	4801      	ldr	r0, [pc, #4]	; (800270c <OnTxTimerLedEvent+0x10>)
 8002706:	f002 fdb1 	bl	800526c <HAL_GPIO_WritePin>
}
 800270a:	bd08      	pop	{r3, pc}
 800270c:	48000400 	.word	0x48000400

08002710 <OnRxData>:
  if (params != NULL)
 8002710:	2900      	cmp	r1, #0
 8002712:	d06e      	beq.n	80027f2 <OnRxData+0xe2>
{
 8002714:	b570      	push	{r4, r5, r6, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	4604      	mov	r4, r0
 800271a:	460d      	mov	r5, r1
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 800271c:	2201      	movs	r2, #1
 800271e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002722:	4834      	ldr	r0, [pc, #208]	; (80027f4 <OnRxData+0xe4>)
 8002724:	f002 fda2 	bl	800526c <HAL_GPIO_WritePin>
    UTIL_TIMER_Start(&RxLedTimer);
 8002728:	4833      	ldr	r0, [pc, #204]	; (80027f8 <OnRxData+0xe8>)
 800272a:	f010 fd87 	bl	801323c <UTIL_TIMER_Start>
    if (params->IsMcpsIndication)
 800272e:	782e      	ldrb	r6, [r5, #0]
 8002730:	2e00      	cmp	r6, #0
 8002732:	d042      	beq.n	80027ba <OnRxData+0xaa>
      if (appData != NULL)
 8002734:	2c00      	cmp	r4, #0
 8002736:	d03f      	beq.n	80027b8 <OnRxData+0xa8>
        RxPort = appData->Port;
 8002738:	7826      	ldrb	r6, [r4, #0]
        if (appData->Buffer != NULL)
 800273a:	6863      	ldr	r3, [r4, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d03c      	beq.n	80027ba <OnRxData+0xaa>
          switch (appData->Port)
 8002740:	2e02      	cmp	r6, #2
 8002742:	d016      	beq.n	8002772 <OnRxData+0x62>
 8002744:	2e03      	cmp	r6, #3
 8002746:	d138      	bne.n	80027ba <OnRxData+0xaa>
              if (appData->BufferSize == 1)
 8002748:	7862      	ldrb	r2, [r4, #1]
 800274a:	2a01      	cmp	r2, #1
 800274c:	d135      	bne.n	80027ba <OnRxData+0xaa>
                switch (appData->Buffer[0])
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d006      	beq.n	8002762 <OnRxData+0x52>
 8002754:	2b02      	cmp	r3, #2
 8002756:	d008      	beq.n	800276a <OnRxData+0x5a>
 8002758:	bb7b      	cbnz	r3, 80027ba <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_A);
 800275a:	2000      	movs	r0, #0
 800275c:	f006 fa36 	bl	8008bcc <LmHandlerRequestClass>
                    break;
 8002760:	e02b      	b.n	80027ba <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_B);
 8002762:	2001      	movs	r0, #1
 8002764:	f006 fa32 	bl	8008bcc <LmHandlerRequestClass>
                    break;
 8002768:	e027      	b.n	80027ba <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_C);
 800276a:	2002      	movs	r0, #2
 800276c:	f006 fa2e 	bl	8008bcc <LmHandlerRequestClass>
                    break;
 8002770:	e023      	b.n	80027ba <OnRxData+0xaa>
              if (appData->BufferSize == 1)
 8002772:	7862      	ldrb	r2, [r4, #1]
 8002774:	2a01      	cmp	r2, #1
 8002776:	d120      	bne.n	80027ba <OnRxData+0xaa>
                AppLedStateOn = appData->Buffer[0] & 0x01;
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	4a1f      	ldr	r2, [pc, #124]	; (80027fc <OnRxData+0xec>)
 8002780:	7013      	strb	r3, [r2, #0]
                if (AppLedStateOn == RESET)
 8002782:	b963      	cbnz	r3, 800279e <OnRxData+0x8e>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 8002784:	4b1e      	ldr	r3, [pc, #120]	; (8002800 <OnRxData+0xf0>)
 8002786:	2200      	movs	r2, #0
 8002788:	4611      	mov	r1, r2
 800278a:	2003      	movs	r0, #3
 800278c:	f010 f9a8 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002790:	2200      	movs	r2, #0
 8002792:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002796:	4817      	ldr	r0, [pc, #92]	; (80027f4 <OnRxData+0xe4>)
 8002798:	f002 fd68 	bl	800526c <HAL_GPIO_WritePin>
 800279c:	e00d      	b.n	80027ba <OnRxData+0xaa>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800279e:	4b19      	ldr	r3, [pc, #100]	; (8002804 <OnRxData+0xf4>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	4611      	mov	r1, r2
 80027a4:	2003      	movs	r0, #3
 80027a6:	f010 f99b 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 80027aa:	2201      	movs	r2, #1
 80027ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80027b0:	4810      	ldr	r0, [pc, #64]	; (80027f4 <OnRxData+0xe4>)
 80027b2:	f002 fd5b 	bl	800526c <HAL_GPIO_WritePin>
 80027b6:	e000      	b.n	80027ba <OnRxData+0xaa>
  uint8_t RxPort = 0;
 80027b8:	2600      	movs	r6, #0
    if (params->RxSlot < RX_SLOT_NONE)
 80027ba:	7c2b      	ldrb	r3, [r5, #16]
 80027bc:	2b05      	cmp	r3, #5
 80027be:	d901      	bls.n	80027c4 <OnRxData+0xb4>
}
 80027c0:	b006      	add	sp, #24
 80027c2:	bd70      	pop	{r4, r5, r6, pc}
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 80027c4:	f995 2008 	ldrsb.w	r2, [r5, #8]
 80027c8:	f995 1009 	ldrsb.w	r1, [r5, #9]
 80027cc:	f995 000a 	ldrsb.w	r0, [r5, #10]
 80027d0:	9005      	str	r0, [sp, #20]
 80027d2:	9104      	str	r1, [sp, #16]
 80027d4:	490c      	ldr	r1, [pc, #48]	; (8002808 <OnRxData+0xf8>)
 80027d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80027da:	9303      	str	r3, [sp, #12]
 80027dc:	9202      	str	r2, [sp, #8]
 80027de:	9601      	str	r6, [sp, #4]
 80027e0:	68eb      	ldr	r3, [r5, #12]
 80027e2:	9300      	str	r3, [sp, #0]
 80027e4:	4b09      	ldr	r3, [pc, #36]	; (800280c <OnRxData+0xfc>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	4611      	mov	r1, r2
 80027ea:	2003      	movs	r0, #3
 80027ec:	f010 f978 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
}
 80027f0:	e7e6      	b.n	80027c0 <OnRxData+0xb0>
 80027f2:	4770      	bx	lr
 80027f4:	48000400 	.word	0x48000400
 80027f8:	200005d8 	.word	0x200005d8
 80027fc:	200005be 	.word	0x200005be
 8002800:	0801448c 	.word	0x0801448c
 8002804:	08014498 	.word	0x08014498
 8002808:	080146c4 	.word	0x080146c4
 800280c:	080144a4 	.word	0x080144a4

08002810 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8002810:	b538      	push	{r3, r4, r5, lr}
 8002812:	4605      	mov	r5, r0
 8002814:	460c      	mov	r4, r1
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (HAL_FLASH_Unlock() == HAL_OK)
 8002816:	f002 fa81 	bl	8004d1c <HAL_FLASH_Unlock>
 800281a:	b100      	cbz	r0, 800281e <OnStoreContextRequest+0xe>
    HAL_FLASH_Lock();
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800281c:	bd38      	pop	{r3, r4, r5, pc}
    if (FLASH_IF_EraseByPages(PAGE(LORAWAN_NVM_BASE_ADDRESS), 1, 0U) == FLASH_OK)
 800281e:	4b0f      	ldr	r3, [pc, #60]	; (800285c <OnStoreContextRequest+0x4c>)
 8002820:	f8d3 05e0 	ldr.w	r0, [r3, #1504]	; 0x5e0
 8002824:	4b0e      	ldr	r3, [pc, #56]	; (8002860 <OnStoreContextRequest+0x50>)
 8002826:	ea03 2080 	and.w	r0, r3, r0, lsl #10
 800282a:	f44f 337c 	mov.w	r3, #258048	; 0x3f000
 800282e:	fbb3 f3f0 	udiv	r3, r3, r0
 8002832:	fb00 f303 	mul.w	r3, r0, r3
 8002836:	f5c3 337c 	rsb	r3, r3, #258048	; 0x3f000
 800283a:	2200      	movs	r2, #0
 800283c:	2101      	movs	r1, #1
 800283e:	0ad8      	lsrs	r0, r3, #11
 8002840:	f7fe fd7e 	bl	8001340 <FLASH_IF_EraseByPages>
 8002844:	b110      	cbz	r0, 800284c <OnStoreContextRequest+0x3c>
    HAL_FLASH_Lock();
 8002846:	f002 fa81 	bl	8004d4c <HAL_FLASH_Lock>
}
 800284a:	e7e7      	b.n	800281c <OnStoreContextRequest+0xc>
      FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (uint8_t *)nvm, nvm_size, NULL);
 800284c:	2300      	movs	r3, #0
 800284e:	4622      	mov	r2, r4
 8002850:	4629      	mov	r1, r5
 8002852:	4804      	ldr	r0, [pc, #16]	; (8002864 <OnStoreContextRequest+0x54>)
 8002854:	f7fe fd90 	bl	8001378 <FLASH_IF_Write>
 8002858:	e7f5      	b.n	8002846 <OnStoreContextRequest+0x36>
 800285a:	bf00      	nop
 800285c:	1fff7000 	.word	0x1fff7000
 8002860:	03fffc00 	.word	0x03fffc00
 8002864:	0803f000 	.word	0x0803f000

08002868 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8002868:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  UTIL_MEM_cpy_8(nvm, (void *)LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800286a:	b28a      	uxth	r2, r1
 800286c:	4901      	ldr	r1, [pc, #4]	; (8002874 <OnRestoreContextRequest+0xc>)
 800286e:	f010 fa4d 	bl	8012d0c <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 8002872:	bd08      	pop	{r3, pc}
 8002874:	0803f000 	.word	0x0803f000

08002878 <StopJoin>:
{
 8002878:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 800287a:	4c1e      	ldr	r4, [pc, #120]	; (80028f4 <StopJoin+0x7c>)
 800287c:	2201      	movs	r2, #1
 800287e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002882:	4620      	mov	r0, r4
 8002884:	f002 fcf2 	bl	800526c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 8002888:	2201      	movs	r2, #1
 800288a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800288e:	4620      	mov	r0, r4
 8002890:	f002 fcec 	bl	800526c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 8002894:	2201      	movs	r2, #1
 8002896:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800289a:	4620      	mov	r0, r4
 800289c:	f002 fce6 	bl	800526c <HAL_GPIO_WritePin>
  UTIL_TIMER_Stop(&TxTimer);
 80028a0:	4815      	ldr	r0, [pc, #84]	; (80028f8 <StopJoin+0x80>)
 80028a2:	f010 fc71 	bl	8013188 <UTIL_TIMER_Stop>
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 80028a6:	f006 fc53 	bl	8009150 <LmHandlerStop>
 80028aa:	b148      	cbz	r0, 80028c0 <StopJoin+0x48>
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 80028ac:	4b13      	ldr	r3, [pc, #76]	; (80028fc <StopJoin+0x84>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	4611      	mov	r1, r2
 80028b2:	2002      	movs	r0, #2
 80028b4:	f010 f914 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Start(&StopJoinTimer);
 80028b8:	4811      	ldr	r0, [pc, #68]	; (8002900 <StopJoin+0x88>)
 80028ba:	f010 fcbf 	bl	801323c <UTIL_TIMER_Start>
}
 80028be:	bd38      	pop	{r3, r4, r5, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 80028c0:	4b10      	ldr	r3, [pc, #64]	; (8002904 <StopJoin+0x8c>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	4611      	mov	r1, r2
 80028c6:	2002      	movs	r0, #2
 80028c8:	f010 f90a 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_ABP;
 80028cc:	4c0e      	ldr	r4, [pc, #56]	; (8002908 <StopJoin+0x90>)
 80028ce:	2501      	movs	r5, #1
 80028d0:	7025      	strb	r5, [r4, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 80028d2:	4b0e      	ldr	r3, [pc, #56]	; (800290c <StopJoin+0x94>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	4611      	mov	r1, r2
 80028d8:	2002      	movs	r0, #2
 80028da:	f010 f901 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
    LmHandlerConfigure(&LmHandlerParams);
 80028de:	480c      	ldr	r0, [pc, #48]	; (8002910 <StopJoin+0x98>)
 80028e0:	f006 fab2 	bl	8008e48 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 80028e4:	4629      	mov	r1, r5
 80028e6:	7820      	ldrb	r0, [r4, #0]
 80028e8:	f006 f844 	bl	8008974 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 80028ec:	4802      	ldr	r0, [pc, #8]	; (80028f8 <StopJoin+0x80>)
 80028ee:	f010 fca5 	bl	801323c <UTIL_TIMER_Start>
 80028f2:	e7e1      	b.n	80028b8 <StopJoin+0x40>
 80028f4:	48000400 	.word	0x48000400
 80028f8:	20000620 	.word	0x20000620
 80028fc:	080144ec 	.word	0x080144ec
 8002900:	200005f0 	.word	0x200005f0
 8002904:	0801450c 	.word	0x0801450c
 8002908:	20000000 	.word	0x20000000
 800290c:	08014520 	.word	0x08014520
 8002910:	20000058 	.word	0x20000058

08002914 <StoreContext>:
{
 8002914:	b508      	push	{r3, lr}
  status = LmHandlerNvmDataStore();
 8002916:	f006 fc2b 	bl	8009170 <LmHandlerNvmDataStore>
  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800291a:	f110 0f08 	cmn.w	r0, #8
 800291e:	d003      	beq.n	8002928 <StoreContext+0x14>
  else if (status == LORAMAC_HANDLER_ERROR)
 8002920:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002924:	d007      	beq.n	8002936 <StoreContext+0x22>
}
 8002926:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 8002928:	4b06      	ldr	r3, [pc, #24]	; (8002944 <StoreContext+0x30>)
 800292a:	2200      	movs	r2, #0
 800292c:	4611      	mov	r1, r2
 800292e:	2002      	movs	r0, #2
 8002930:	f010 f8d6 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
 8002934:	e7f7      	b.n	8002926 <StoreContext+0x12>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 8002936:	4b04      	ldr	r3, [pc, #16]	; (8002948 <StoreContext+0x34>)
 8002938:	2200      	movs	r2, #0
 800293a:	4611      	mov	r1, r2
 800293c:	2002      	movs	r0, #2
 800293e:	f010 f8cf 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
}
 8002942:	e7f0      	b.n	8002926 <StoreContext+0x12>
 8002944:	08014540 	.word	0x08014540
 8002948:	08014558 	.word	0x08014558

0800294c <SendTxData>:
{
 800294c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800294e:	b089      	sub	sp, #36	; 0x24
  uint8_t batteryLevel = GetBatteryLevel();
 8002950:	f7ff f83a 	bl	80019c8 <GetBatteryLevel>
 8002954:	4604      	mov	r4, r0
  EnvSensors_Init();
 8002956:	f7ff f9c5 	bl	8001ce4 <EnvSensors_Init>
  EnvSensors_Read(&sensor_data);
 800295a:	a802      	add	r0, sp, #8
 800295c:	f7ff fa46 	bl	8001dec <EnvSensors_Read>
  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 8002960:	9400      	str	r4, [sp, #0]
 8002962:	4b6e      	ldr	r3, [pc, #440]	; (8002b1c <SendTxData+0x1d0>)
 8002964:	2201      	movs	r2, #1
 8002966:	2100      	movs	r1, #0
 8002968:	2002      	movs	r0, #2
 800296a:	f010 f8b9 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 800296e:	9803      	ldr	r0, [sp, #12]
 8002970:	f7fe f928 	bl	8000bc4 <__aeabi_f2iz>
 8002974:	b200      	sxth	r0, r0
 8002976:	9000      	str	r0, [sp, #0]
 8002978:	4b69      	ldr	r3, [pc, #420]	; (8002b20 <SendTxData+0x1d4>)
 800297a:	2201      	movs	r2, #1
 800297c:	2100      	movs	r1, #0
 800297e:	2002      	movs	r0, #2
 8002980:	f010 f8ae 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "hum: %d\r\n", (int16_t)(sensor_data.humidity));
 8002984:	9804      	ldr	r0, [sp, #16]
 8002986:	f7fe f91d 	bl	8000bc4 <__aeabi_f2iz>
 800298a:	b200      	sxth	r0, r0
 800298c:	9000      	str	r0, [sp, #0]
 800298e:	4b65      	ldr	r3, [pc, #404]	; (8002b24 <SendTxData+0x1d8>)
 8002990:	2201      	movs	r2, #1
 8002992:	2100      	movs	r1, #0
 8002994:	2002      	movs	r0, #2
 8002996:	f010 f8a3 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "pres: %d\r\n", (int16_t)(sensor_data.pressure));
 800299a:	9802      	ldr	r0, [sp, #8]
 800299c:	f7fe f912 	bl	8000bc4 <__aeabi_f2iz>
 80029a0:	b200      	sxth	r0, r0
 80029a2:	9000      	str	r0, [sp, #0]
 80029a4:	4b60      	ldr	r3, [pc, #384]	; (8002b28 <SendTxData+0x1dc>)
 80029a6:	2201      	movs	r2, #1
 80029a8:	2100      	movs	r1, #0
 80029aa:	2002      	movs	r0, #2
 80029ac:	f010 f898 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "rainfall: %d\r\n", (int16_t)rainFallInMM);
 80029b0:	4b5e      	ldr	r3, [pc, #376]	; (8002b2c <SendTxData+0x1e0>)
 80029b2:	6818      	ldr	r0, [r3, #0]
 80029b4:	f7fe f906 	bl	8000bc4 <__aeabi_f2iz>
 80029b8:	b200      	sxth	r0, r0
 80029ba:	9000      	str	r0, [sp, #0]
 80029bc:	4b5c      	ldr	r3, [pc, #368]	; (8002b30 <SendTxData+0x1e4>)
 80029be:	2201      	movs	r2, #1
 80029c0:	2100      	movs	r1, #0
 80029c2:	2002      	movs	r0, #2
 80029c4:	f010 f88c 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "wndpsd: %d\r\n", (int16_t)windTips);
 80029c8:	4b5a      	ldr	r3, [pc, #360]	; (8002b34 <SendTxData+0x1e8>)
 80029ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029ce:	9300      	str	r3, [sp, #0]
 80029d0:	4b59      	ldr	r3, [pc, #356]	; (8002b38 <SendTxData+0x1ec>)
 80029d2:	2201      	movs	r2, #1
 80029d4:	2100      	movs	r1, #0
 80029d6:	2002      	movs	r0, #2
 80029d8:	f010 f882 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
  AppData.Port = LORAWAN_USER_APP_PORT;
 80029dc:	4c57      	ldr	r4, [pc, #348]	; (8002b3c <SendTxData+0x1f0>)
 80029de:	2302      	movs	r3, #2
 80029e0:	7023      	strb	r3, [r4, #0]
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 80029e2:	4957      	ldr	r1, [pc, #348]	; (8002b40 <SendTxData+0x1f4>)
 80029e4:	9804      	ldr	r0, [sp, #16]
 80029e6:	f7fd ff9d 	bl	8000924 <__aeabi_fmul>
 80029ea:	f7fe f911 	bl	8000c10 <__aeabi_f2uiz>
 80029ee:	b285      	uxth	r5, r0
  temperature = (int16_t)(sensor_data.temperature);
 80029f0:	9803      	ldr	r0, [sp, #12]
 80029f2:	f7fe f8e7 	bl	8000bc4 <__aeabi_f2iz>
 80029f6:	b206      	sxth	r6, r0
  pressure = (uint16_t)(sensor_data.pressure * 100 / 10); /* in hPa / 10 */
 80029f8:	4952      	ldr	r1, [pc, #328]	; (8002b44 <SendTxData+0x1f8>)
 80029fa:	9802      	ldr	r0, [sp, #8]
 80029fc:	f7fd ff92 	bl	8000924 <__aeabi_fmul>
 8002a00:	494f      	ldr	r1, [pc, #316]	; (8002b40 <SendTxData+0x1f4>)
 8002a02:	f7fe f843 	bl	8000a8c <__aeabi_fdiv>
 8002a06:	f7fe f903 	bl	8000c10 <__aeabi_f2uiz>
  AppData.Buffer[i++] = AppLedStateOn;
 8002a0a:	6863      	ldr	r3, [r4, #4]
 8002a0c:	4a4e      	ldr	r2, [pc, #312]	; (8002b48 <SendTxData+0x1fc>)
 8002a0e:	7812      	ldrb	r2, [r2, #0]
 8002a10:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 8002a12:	6863      	ldr	r3, [r4, #4]
 8002a14:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8002a18:	705a      	strb	r2, [r3, #1]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 8002a1a:	6863      	ldr	r3, [r4, #4]
 8002a1c:	7098      	strb	r0, [r3, #2]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 8002a1e:	6863      	ldr	r3, [r4, #4]
 8002a20:	70de      	strb	r6, [r3, #3]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 8002a22:	6863      	ldr	r3, [r4, #4]
 8002a24:	0a2a      	lsrs	r2, r5, #8
 8002a26:	711a      	strb	r2, [r3, #4]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 8002a28:	6863      	ldr	r3, [r4, #4]
 8002a2a:	715d      	strb	r5, [r3, #5]
  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 8002a2c:	4b47      	ldr	r3, [pc, #284]	; (8002b4c <SendTxData+0x200>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b08      	cmp	r3, #8
 8002a32:	d002      	beq.n	8002a3a <SendTxData+0xee>
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d000      	beq.n	8002a3a <SendTxData+0xee>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 8002a38:	bb63      	cbnz	r3, 8002a94 <SendTxData+0x148>
    AppData.Buffer[i++] = 0;
 8002a3a:	4a40      	ldr	r2, [pc, #256]	; (8002b3c <SendTxData+0x1f0>)
 8002a3c:	6851      	ldr	r1, [r2, #4]
 8002a3e:	2300      	movs	r3, #0
 8002a40:	718b      	strb	r3, [r1, #6]
    AppData.Buffer[i++] = 0;
 8002a42:	6851      	ldr	r1, [r2, #4]
 8002a44:	71cb      	strb	r3, [r1, #7]
    AppData.Buffer[i++] = 0;
 8002a46:	6852      	ldr	r2, [r2, #4]
 8002a48:	7213      	strb	r3, [r2, #8]
    AppData.Buffer[i++] = 0;
 8002a4a:	7253      	strb	r3, [r2, #9]
 8002a4c:	220a      	movs	r2, #10
  AppData.BufferSize = i;
 8002a4e:	4b3b      	ldr	r3, [pc, #236]	; (8002b3c <SendTxData+0x1f0>)
 8002a50:	705a      	strb	r2, [r3, #1]
  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002a52:	4b3f      	ldr	r3, [pc, #252]	; (8002b50 <SendTxData+0x204>)
 8002a54:	7a5b      	ldrb	r3, [r3, #9]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d138      	bne.n	8002acc <SendTxData+0x180>
  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	4b3b      	ldr	r3, [pc, #236]	; (8002b4c <SendTxData+0x200>)
 8002a5e:	78d9      	ldrb	r1, [r3, #3]
 8002a60:	4836      	ldr	r0, [pc, #216]	; (8002b3c <SendTxData+0x1f0>)
 8002a62:	f006 f811 	bl	8008a88 <LmHandlerSend>
  if (LORAMAC_HANDLER_SUCCESS == status)
 8002a66:	2800      	cmp	r0, #0
 8002a68:	d03e      	beq.n	8002ae8 <SendTxData+0x19c>
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 8002a6a:	f110 0f06 	cmn.w	r0, #6
 8002a6e:	d043      	beq.n	8002af8 <SendTxData+0x1ac>
  UTIL_TIMER_Time_t nextTxIn = 0;
 8002a70:	2500      	movs	r5, #0
    UTIL_TIMER_Stop(&TxTimer);
 8002a72:	4c38      	ldr	r4, [pc, #224]	; (8002b54 <SendTxData+0x208>)
 8002a74:	4620      	mov	r0, r4
 8002a76:	f010 fb87 	bl	8013188 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 8002a7a:	4b37      	ldr	r3, [pc, #220]	; (8002b58 <SendTxData+0x20c>)
 8002a7c:	6819      	ldr	r1, [r3, #0]
 8002a7e:	42a9      	cmp	r1, r5
 8002a80:	bf38      	it	cc
 8002a82:	4629      	movcc	r1, r5
 8002a84:	4620      	mov	r0, r4
 8002a86:	f010 fc1f 	bl	80132c8 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 8002a8a:	4620      	mov	r0, r4
 8002a8c:	f010 fbd6 	bl	801323c <UTIL_TIMER_Start>
}
 8002a90:	b009      	add	sp, #36	; 0x24
 8002a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    latitude = sensor_data.latitude;
 8002a94:	9d05      	ldr	r5, [sp, #20]
    longitude = sensor_data.longitude;
 8002a96:	9c06      	ldr	r4, [sp, #24]
    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 8002a98:	4e28      	ldr	r6, [pc, #160]	; (8002b3c <SendTxData+0x1f0>)
 8002a9a:	6877      	ldr	r7, [r6, #4]
 8002a9c:	f7fe ff94 	bl	80019c8 <GetBatteryLevel>
 8002aa0:	71b8      	strb	r0, [r7, #6]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 8002aa2:	6873      	ldr	r3, [r6, #4]
 8002aa4:	f3c5 4207 	ubfx	r2, r5, #16, #8
 8002aa8:	71da      	strb	r2, [r3, #7]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 8002aaa:	6873      	ldr	r3, [r6, #4]
 8002aac:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8002ab0:	721a      	strb	r2, [r3, #8]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 8002ab2:	725d      	strb	r5, [r3, #9]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 8002ab4:	f3c4 4207 	ubfx	r2, r4, #16, #8
 8002ab8:	729a      	strb	r2, [r3, #10]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 8002aba:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8002abe:	72da      	strb	r2, [r3, #11]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 8002ac0:	731c      	strb	r4, [r3, #12]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	735a      	strb	r2, [r3, #13]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 8002ac6:	739a      	strb	r2, [r3, #14]
 8002ac8:	220f      	movs	r2, #15
 8002aca:	e7c0      	b.n	8002a4e <SendTxData+0x102>
  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002acc:	f005 ffca 	bl	8008a64 <LmHandlerJoinStatus>
 8002ad0:	2801      	cmp	r0, #1
 8002ad2:	d1c2      	bne.n	8002a5a <SendTxData+0x10e>
    UTIL_TIMER_Stop(&JoinLedTimer);
 8002ad4:	481e      	ldr	r0, [pc, #120]	; (8002b50 <SendTxData+0x204>)
 8002ad6:	f010 fb57 	bl	8013188 <UTIL_TIMER_Stop>
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002ada:	2200      	movs	r2, #0
 8002adc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ae0:	481e      	ldr	r0, [pc, #120]	; (8002b5c <SendTxData+0x210>)
 8002ae2:	f002 fbc3 	bl	800526c <HAL_GPIO_WritePin>
 8002ae6:	e7b8      	b.n	8002a5a <SendTxData+0x10e>
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 8002ae8:	4b1d      	ldr	r3, [pc, #116]	; (8002b60 <SendTxData+0x214>)
 8002aea:	2201      	movs	r2, #1
 8002aec:	2100      	movs	r1, #0
 8002aee:	4610      	mov	r0, r2
 8002af0:	f00f fff6 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Time_t nextTxIn = 0;
 8002af4:	2500      	movs	r5, #0
 8002af6:	e7bc      	b.n	8002a72 <SendTxData+0x126>
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 8002af8:	f005 ffae 	bl	8008a58 <LmHandlerGetDutyCycleWaitTime>
    if (nextTxIn > 0)
 8002afc:	4605      	mov	r5, r0
 8002afe:	2800      	cmp	r0, #0
 8002b00:	d0b7      	beq.n	8002a72 <SendTxData+0x126>
      APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 8002b02:	4b18      	ldr	r3, [pc, #96]	; (8002b64 <SendTxData+0x218>)
 8002b04:	fba3 2300 	umull	r2, r3, r3, r0
 8002b08:	099b      	lsrs	r3, r3, #6
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	4b16      	ldr	r3, [pc, #88]	; (8002b68 <SendTxData+0x21c>)
 8002b0e:	2201      	movs	r2, #1
 8002b10:	2100      	movs	r1, #0
 8002b12:	4610      	mov	r0, r2
 8002b14:	f00f ffe4 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
 8002b18:	e7ab      	b.n	8002a72 <SendTxData+0x126>
 8002b1a:	bf00      	nop
 8002b1c:	08014570 	.word	0x08014570
 8002b20:	0801457c 	.word	0x0801457c
 8002b24:	08014588 	.word	0x08014588
 8002b28:	08014594 	.word	0x08014594
 8002b2c:	20000638 	.word	0x20000638
 8002b30:	080145a0 	.word	0x080145a0
 8002b34:	20000640 	.word	0x20000640
 8002b38:	080145b0 	.word	0x080145b0
 8002b3c:	20000004 	.word	0x20000004
 8002b40:	41200000 	.word	0x41200000
 8002b44:	42c80000 	.word	0x42c80000
 8002b48:	200005be 	.word	0x200005be
 8002b4c:	20000058 	.word	0x20000058
 8002b50:	200005c0 	.word	0x200005c0
 8002b54:	20000620 	.word	0x20000620
 8002b58:	2000006c 	.word	0x2000006c
 8002b5c:	48000400 	.word	0x48000400
 8002b60:	080145c0 	.word	0x080145c0
 8002b64:	10624dd3 	.word	0x10624dd3
 8002b68:	080145d0 	.word	0x080145d0

08002b6c <OnJoinTimerLedEvent>:
{
 8002b6c:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
 8002b6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b72:	4802      	ldr	r0, [pc, #8]	; (8002b7c <OnJoinTimerLedEvent+0x10>)
 8002b74:	f002 fb7f 	bl	8005276 <HAL_GPIO_TogglePin>
}
 8002b78:	bd08      	pop	{r3, pc}
 8002b7a:	bf00      	nop
 8002b7c:	48000400 	.word	0x48000400

08002b80 <LoRaWAN_Init>:
{
 8002b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b84:	b086      	sub	sp, #24
  uint32_t feature_version = 0UL;
 8002b86:	2400      	movs	r4, #0
 8002b88:	9405      	str	r4, [sp, #20]
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 8002b8a:	9402      	str	r4, [sp, #8]
 8002b8c:	2502      	movs	r5, #2
 8002b8e:	9501      	str	r5, [sp, #4]
 8002b90:	2601      	movs	r6, #1
 8002b92:	9600      	str	r6, [sp, #0]
 8002b94:	4b4b      	ldr	r3, [pc, #300]	; (8002cc4 <LoRaWAN_Init+0x144>)
 8002b96:	4622      	mov	r2, r4
 8002b98:	4621      	mov	r1, r4
 8002b9a:	4628      	mov	r0, r5
 8002b9c:	f00f ffa0 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 8002ba0:	9402      	str	r4, [sp, #8]
 8002ba2:	2704      	movs	r7, #4
 8002ba4:	9701      	str	r7, [sp, #4]
 8002ba6:	9500      	str	r5, [sp, #0]
 8002ba8:	4b47      	ldr	r3, [pc, #284]	; (8002cc8 <LoRaWAN_Init+0x148>)
 8002baa:	4622      	mov	r2, r4
 8002bac:	4621      	mov	r1, r4
 8002bae:	4628      	mov	r0, r5
 8002bb0:	f00f ff96 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 8002bb4:	9402      	str	r4, [sp, #8]
 8002bb6:	9501      	str	r5, [sp, #4]
 8002bb8:	9600      	str	r6, [sp, #0]
 8002bba:	4b44      	ldr	r3, [pc, #272]	; (8002ccc <LoRaWAN_Init+0x14c>)
 8002bbc:	4622      	mov	r2, r4
 8002bbe:	4621      	mov	r1, r4
 8002bc0:	4628      	mov	r0, r5
 8002bc2:	f00f ff8d 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 8002bc6:	a905      	add	r1, sp, #20
 8002bc8:	4620      	mov	r0, r4
 8002bca:	f006 faab 	bl	8009124 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 8002bce:	9b05      	ldr	r3, [sp, #20]
 8002bd0:	0e1a      	lsrs	r2, r3, #24
 8002bd2:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002bd6:	9102      	str	r1, [sp, #8]
 8002bd8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002bdc:	9301      	str	r3, [sp, #4]
 8002bde:	9200      	str	r2, [sp, #0]
 8002be0:	4b3b      	ldr	r3, [pc, #236]	; (8002cd0 <LoRaWAN_Init+0x150>)
 8002be2:	4622      	mov	r2, r4
 8002be4:	4621      	mov	r1, r4
 8002be6:	4628      	mov	r0, r5
 8002be8:	f00f ff7a 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 8002bec:	a905      	add	r1, sp, #20
 8002bee:	4630      	mov	r0, r6
 8002bf0:	f006 fa98 	bl	8009124 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 8002bf4:	9b05      	ldr	r3, [sp, #20]
 8002bf6:	0e1a      	lsrs	r2, r3, #24
 8002bf8:	b2d9      	uxtb	r1, r3
 8002bfa:	9103      	str	r1, [sp, #12]
 8002bfc:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002c00:	9102      	str	r1, [sp, #8]
 8002c02:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002c06:	9301      	str	r3, [sp, #4]
 8002c08:	9200      	str	r2, [sp, #0]
 8002c0a:	4b32      	ldr	r3, [pc, #200]	; (8002cd4 <LoRaWAN_Init+0x154>)
 8002c0c:	4622      	mov	r2, r4
 8002c0e:	4621      	mov	r1, r4
 8002c10:	4628      	mov	r0, r5
 8002c12:	f00f ff65 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8002c16:	9400      	str	r4, [sp, #0]
 8002c18:	4b2f      	ldr	r3, [pc, #188]	; (8002cd8 <LoRaWAN_Init+0x158>)
 8002c1a:	4622      	mov	r2, r4
 8002c1c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002c20:	482e      	ldr	r0, [pc, #184]	; (8002cdc <LoRaWAN_Init+0x15c>)
 8002c22:	f010 fa53 	bl	80130cc <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8002c26:	9400      	str	r4, [sp, #0]
 8002c28:	4b2d      	ldr	r3, [pc, #180]	; (8002ce0 <LoRaWAN_Init+0x160>)
 8002c2a:	4622      	mov	r2, r4
 8002c2c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002c30:	482c      	ldr	r0, [pc, #176]	; (8002ce4 <LoRaWAN_Init+0x164>)
 8002c32:	f010 fa4b 	bl	80130cc <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8002c36:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8002ce8 <LoRaWAN_Init+0x168>
 8002c3a:	9400      	str	r4, [sp, #0]
 8002c3c:	4b2b      	ldr	r3, [pc, #172]	; (8002cec <LoRaWAN_Init+0x16c>)
 8002c3e:	4632      	mov	r2, r6
 8002c40:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002c44:	4640      	mov	r0, r8
 8002c46:	f010 fa41 	bl	80130cc <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 8002c4a:	9400      	str	r4, [sp, #0]
 8002c4c:	4b28      	ldr	r3, [pc, #160]	; (8002cf0 <LoRaWAN_Init+0x170>)
 8002c4e:	4622      	mov	r2, r4
 8002c50:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002c54:	4827      	ldr	r0, [pc, #156]	; (8002cf4 <LoRaWAN_Init+0x174>)
 8002c56:	f010 fa39 	bl	80130cc <UTIL_TIMER_Create>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8002c5a:	4a27      	ldr	r2, [pc, #156]	; (8002cf8 <LoRaWAN_Init+0x178>)
 8002c5c:	4621      	mov	r1, r4
 8002c5e:	4630      	mov	r0, r6
 8002c60:	f010 f934 	bl	8012ecc <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 8002c64:	4a25      	ldr	r2, [pc, #148]	; (8002cfc <LoRaWAN_Init+0x17c>)
 8002c66:	4621      	mov	r1, r4
 8002c68:	4628      	mov	r0, r5
 8002c6a:	f010 f92f 	bl	8012ecc <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 8002c6e:	4a24      	ldr	r2, [pc, #144]	; (8002d00 <LoRaWAN_Init+0x180>)
 8002c70:	4621      	mov	r1, r4
 8002c72:	4638      	mov	r0, r7
 8002c74:	f010 f92a 	bl	8012ecc <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 8002c78:	4a22      	ldr	r2, [pc, #136]	; (8002d04 <LoRaWAN_Init+0x184>)
 8002c7a:	4621      	mov	r1, r4
 8002c7c:	2008      	movs	r0, #8
 8002c7e:	f010 f925 	bl	8012ecc <UTIL_SEQ_RegTask>
  LoraInfo_Init();
 8002c82:	f000 f889 	bl	8002d98 <LoraInfo_Init>
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 8002c86:	f04f 7181 	mov.w	r1, #16908288	; 0x1020000
 8002c8a:	481f      	ldr	r0, [pc, #124]	; (8002d08 <LoRaWAN_Init+0x188>)
 8002c8c:	f006 fa10 	bl	80090b0 <LmHandlerInit>
  LmHandlerConfigure(&LmHandlerParams);
 8002c90:	481e      	ldr	r0, [pc, #120]	; (8002d0c <LoRaWAN_Init+0x18c>)
 8002c92:	f006 f8d9 	bl	8008e48 <LmHandlerConfigure>
  UTIL_TIMER_Start(&JoinLedTimer);
 8002c96:	4640      	mov	r0, r8
 8002c98:	f010 fad0 	bl	801323c <UTIL_TIMER_Start>
  LmHandlerJoin(ActivationType, ForceRejoin);
 8002c9c:	4621      	mov	r1, r4
 8002c9e:	4b1c      	ldr	r3, [pc, #112]	; (8002d10 <LoRaWAN_Init+0x190>)
 8002ca0:	7818      	ldrb	r0, [r3, #0]
 8002ca2:	f005 fe67 	bl	8008974 <LmHandlerJoin>
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8002ca6:	4d1b      	ldr	r5, [pc, #108]	; (8002d14 <LoRaWAN_Init+0x194>)
 8002ca8:	9400      	str	r4, [sp, #0]
 8002caa:	4b1b      	ldr	r3, [pc, #108]	; (8002d18 <LoRaWAN_Init+0x198>)
 8002cac:	4622      	mov	r2, r4
 8002cae:	491b      	ldr	r1, [pc, #108]	; (8002d1c <LoRaWAN_Init+0x19c>)
 8002cb0:	6809      	ldr	r1, [r1, #0]
 8002cb2:	4628      	mov	r0, r5
 8002cb4:	f010 fa0a 	bl	80130cc <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 8002cb8:	4628      	mov	r0, r5
 8002cba:	f010 fabf 	bl	801323c <UTIL_TIMER_Start>
}
 8002cbe:	b006      	add	sp, #24
 8002cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002cc4:	080145f0 	.word	0x080145f0
 8002cc8:	08014614 	.word	0x08014614
 8002ccc:	08014638 	.word	0x08014638
 8002cd0:	0801465c 	.word	0x0801465c
 8002cd4:	08014680 	.word	0x08014680
 8002cd8:	080026fd 	.word	0x080026fd
 8002cdc:	20000608 	.word	0x20000608
 8002ce0:	080026e9 	.word	0x080026e9
 8002ce4:	200005d8 	.word	0x200005d8
 8002ce8:	200005c0 	.word	0x200005c0
 8002cec:	08002b6d 	.word	0x08002b6d
 8002cf0:	080026a5 	.word	0x080026a5
 8002cf4:	200005f0 	.word	0x200005f0
 8002cf8:	08008b85 	.word	0x08008b85
 8002cfc:	0800294d 	.word	0x0800294d
 8002d00:	08002915 	.word	0x08002915
 8002d04:	08002879 	.word	0x08002879
 8002d08:	2000000c 	.word	0x2000000c
 8002d0c:	20000058 	.word	0x20000058
 8002d10:	20000000 	.word	0x20000000
 8002d14:	20000620 	.word	0x20000620
 8002d18:	080024f9 	.word	0x080024f9
 8002d1c:	2000006c 	.word	0x2000006c

08002d20 <getRainfall>:
} // getRainfall function
 8002d20:	3001      	adds	r0, #1
 8002d22:	4770      	bx	lr

08002d24 <getWindSpeed>:
  windTips++;
 8002d24:	4a02      	ldr	r2, [pc, #8]	; (8002d30 <getWindSpeed+0xc>)
 8002d26:	6813      	ldr	r3, [r2, #0]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	6013      	str	r3, [r2, #0]
} // getWindSpeed function
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	20000640 	.word	0x20000640

08002d34 <HAL_GPIO_EXTI_Callback>:
{
 8002d34:	b510      	push	{r4, lr}
  switch (GPIO_Pin)
 8002d36:	2810      	cmp	r0, #16
 8002d38:	d023      	beq.n	8002d82 <HAL_GPIO_EXTI_Callback+0x4e>
 8002d3a:	d914      	bls.n	8002d66 <HAL_GPIO_EXTI_Callback+0x32>
 8002d3c:	2840      	cmp	r0, #64	; 0x40
 8002d3e:	d01b      	beq.n	8002d78 <HAL_GPIO_EXTI_Callback+0x44>
 8002d40:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8002d44:	d117      	bne.n	8002d76 <HAL_GPIO_EXTI_Callback+0x42>
        rainTips = getRainfall(rainTips);
 8002d46:	4c10      	ldr	r4, [pc, #64]	; (8002d88 <HAL_GPIO_EXTI_Callback+0x54>)
 8002d48:	6820      	ldr	r0, [r4, #0]
 8002d4a:	f7ff ffe9 	bl	8002d20 <getRainfall>
 8002d4e:	6020      	str	r0, [r4, #0]
        rainFallInMM = rainTips*rainConvert*10000;
 8002d50:	f7fd fd94 	bl	800087c <__aeabi_i2f>
 8002d54:	490d      	ldr	r1, [pc, #52]	; (8002d8c <HAL_GPIO_EXTI_Callback+0x58>)
 8002d56:	f7fd fde5 	bl	8000924 <__aeabi_fmul>
 8002d5a:	490d      	ldr	r1, [pc, #52]	; (8002d90 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002d5c:	f7fd fde2 	bl	8000924 <__aeabi_fmul>
 8002d60:	4b0c      	ldr	r3, [pc, #48]	; (8002d94 <HAL_GPIO_EXTI_Callback+0x60>)
 8002d62:	6018      	str	r0, [r3, #0]
        break;
 8002d64:	e007      	b.n	8002d76 <HAL_GPIO_EXTI_Callback+0x42>
  switch (GPIO_Pin)
 8002d66:	2801      	cmp	r0, #1
 8002d68:	d005      	beq.n	8002d76 <HAL_GPIO_EXTI_Callback+0x42>
 8002d6a:	2802      	cmp	r0, #2
 8002d6c:	d103      	bne.n	8002d76 <HAL_GPIO_EXTI_Callback+0x42>
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 8002d6e:	2100      	movs	r1, #0
 8002d70:	2008      	movs	r0, #8
 8002d72:	f00f ffdf 	bl	8012d34 <UTIL_SEQ_SetTask>
}
 8002d76:	bd10      	pop	{r4, pc}
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 8002d78:	2100      	movs	r1, #0
 8002d7a:	2004      	movs	r0, #4
 8002d7c:	f00f ffda 	bl	8012d34 <UTIL_SEQ_SetTask>
      break;
 8002d80:	e7f9      	b.n	8002d76 <HAL_GPIO_EXTI_Callback+0x42>
        getWindSpeed();
 8002d82:	f7ff ffcf 	bl	8002d24 <getWindSpeed>
}
 8002d86:	e7f6      	b.n	8002d76 <HAL_GPIO_EXTI_Callback+0x42>
 8002d88:	2000063c 	.word	0x2000063c
 8002d8c:	3dbeb5b3 	.word	0x3dbeb5b3
 8002d90:	461c4000 	.word	0x461c4000
 8002d94:	20000638 	.word	0x20000638

08002d98 <LoraInfo_Init>:
/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ActivationMode = 0;
 8002d98:	4b06      	ldr	r3, [pc, #24]	; (8002db4 <LoraInfo_Init+0x1c>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 8002d9e:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 8002da0:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 8002da2:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 8002da4:	2220      	movs	r2, #32
 8002da6:	605a      	str	r2, [r3, #4]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865);
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915);
 8002da8:	f44f 7290 	mov.w	r2, #288	; 0x120
 8002dac:	605a      	str	r2, [r3, #4]
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
  loraInfo.ActivationMode = 3;
 8002dae:	2203      	movs	r2, #3
 8002db0:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8002db2:	4770      	bx	lr
 8002db4:	20000644 	.word	0x20000644

08002db8 <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 8002db8:	4800      	ldr	r0, [pc, #0]	; (8002dbc <LoraInfo_GetPtr+0x4>)
 8002dba:	4770      	bx	lr
 8002dbc:	20000644 	.word	0x20000644

08002dc0 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8002dc0:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 8002dc2:	f000 fec3 	bl	8003b4c <BSP_RADIO_Init>
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002dc6:	bd08      	pop	{r3, pc}

08002dc8 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8002dc8:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8002dca:	f000 ff01 	bl	8003bd0 <BSP_RADIO_ConfigRFSwitch>
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8002dce:	bd08      	pop	{r3, pc}

08002dd0 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8002dd0:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 8002dd2:	f000 ff4b 	bl	8003c6c <BSP_RADIO_GetTxConfig>
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8002dd6:	bd08      	pop	{r3, pc}

08002dd8 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8002dd8:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 8002dda:	f000 ff49 	bl	8003c70 <BSP_RADIO_IsTCXO>
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002dde:	bd08      	pop	{r3, pc}

08002de0 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8002de0:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 8002de2:	f000 ff47 	bl	8003c74 <BSP_RADIO_IsDCDC>
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002de6:	bd08      	pop	{r3, pc}

08002de8 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8002de8:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 8002dea:	f000 ff45 	bl	8003c78 <BSP_RADIO_GetRFOMaxPowerConfig>
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 8002dee:	bd08      	pop	{r3, pc}

08002df0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002df0:	480d      	ldr	r0, [pc, #52]	; (8002e28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002df2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002df4:	f000 ff45 	bl	8003c82 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002df8:	480c      	ldr	r0, [pc, #48]	; (8002e2c <LoopForever+0x6>)
  ldr r1, =_edata
 8002dfa:	490d      	ldr	r1, [pc, #52]	; (8002e30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002dfc:	4a0d      	ldr	r2, [pc, #52]	; (8002e34 <LoopForever+0xe>)
  movs r3, #0
 8002dfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e00:	e002      	b.n	8002e08 <LoopCopyDataInit>

08002e02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e06:	3304      	adds	r3, #4

08002e08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e0c:	d3f9      	bcc.n	8002e02 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e0e:	4a0a      	ldr	r2, [pc, #40]	; (8002e38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e10:	4c0a      	ldr	r4, [pc, #40]	; (8002e3c <LoopForever+0x16>)
  movs r3, #0
 8002e12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e14:	e001      	b.n	8002e1a <LoopFillZerobss>

08002e16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e18:	3204      	adds	r2, #4

08002e1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e1c:	d3fb      	bcc.n	8002e16 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002e1e:	f010 fc19 	bl	8013654 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e22:	f7fe fc66 	bl	80016f2 <main>

08002e26 <LoopForever>:

LoopForever:
    b LoopForever
 8002e26:	e7fe      	b.n	8002e26 <LoopForever>
  ldr   r0, =_estack
 8002e28:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002e2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e30:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8002e34:	080150f8 	.word	0x080150f8
  ldr r2, =_sbss
 8002e38:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8002e3c:	20001830 	.word	0x20001830

08002e40 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e40:	e7fe      	b.n	8002e40 <ADC_IRQHandler>

08002e42 <calc_temperature>:

/*!
 * @brief This internal API is used to calculate the temperature value.
 */
static int16_t calc_temperature(uint32_t temp_adc, struct bme680_dev *dev)
{
 8002e42:	b500      	push	{lr}
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 8002e44:	8acb      	ldrh	r3, [r1, #22]
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	ebc3 00e0 	rsb	r0, r3, r0, asr #3
 8002e4c:	17c2      	asrs	r2, r0, #31
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 8002e4e:	f9b1 c018 	ldrsh.w	ip, [r1, #24]
 8002e52:	ea4f 7eec 	mov.w	lr, ip, asr #31
 8002e56:	fb0c f302 	mul.w	r3, ip, r2
 8002e5a:	fb00 330e 	mla	r3, r0, lr, r3
 8002e5e:	fbac ce00 	umull	ip, lr, ip, r0
 8002e62:	4473      	add	r3, lr
 8002e64:	ea4f 2cdc 	mov.w	ip, ip, lsr #11
 8002e68:	ea4c 5c43 	orr.w	ip, ip, r3, lsl #21
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 8002e6c:	0840      	lsrs	r0, r0, #1
 8002e6e:	ea40 70c2 	orr.w	r0, r0, r2, lsl #31
 8002e72:	fb00 f302 	mul.w	r3, r0, r2
 8002e76:	fba0 0200 	umull	r0, r2, r0, r0
 8002e7a:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8002e7e:	0b03      	lsrs	r3, r0, #12
 8002e80:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8002e84:	1312      	asrs	r2, r2, #12
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8002e86:	f991 e01a 	ldrsb.w	lr, [r1, #26]
 8002e8a:	ea4f 100e 	mov.w	r0, lr, lsl #4
 8002e8e:	ea4f 7eee 	mov.w	lr, lr, asr #31
 8002e92:	fb00 f202 	mul.w	r2, r0, r2
 8002e96:	fb03 220e 	mla	r2, r3, lr, r2
 8002e9a:	fba0 0303 	umull	r0, r3, r0, r3
 8002e9e:	4413      	add	r3, r2
 8002ea0:	0b80      	lsrs	r0, r0, #14
 8002ea2:	ea40 4083 	orr.w	r0, r0, r3, lsl #18
	dev->calib.t_fine = (int32_t) (var2 + var3);
 8002ea6:	4460      	add	r0, ip
 8002ea8:	6308      	str	r0, [r1, #48]	; 0x30
	calc_temp = (int16_t) (((dev->calib.t_fine * 5) + 128) >> 8);
 8002eaa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002eae:	3080      	adds	r0, #128	; 0x80

	return calc_temp;
}
 8002eb0:	f340 200f 	sbfx	r0, r0, #8, #16
 8002eb4:	f85d fb04 	ldr.w	pc, [sp], #4

08002eb8 <calc_pressure>:

/*!
 * @brief This internal API is used to calculate the pressure value.
 */
static uint32_t calc_pressure(uint32_t pres_adc, const struct bme680_dev *dev)
{
 8002eb8:	b510      	push	{r4, lr}
	int32_t var1;
	int32_t var2;
	int32_t var3;
	int32_t pressure_comp;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 8002eba:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8002ebc:	105b      	asrs	r3, r3, #1
 8002ebe:	f5a3 4e7a 	sub.w	lr, r3, #64000	; 0xfa00
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8002ec2:	ea4f 02ae 	mov.w	r2, lr, asr #2
 8002ec6:	fb02 f202 	mul.w	r2, r2, r2
 8002eca:	12d4      	asrs	r4, r2, #11
		(int32_t)dev->calib.par_p6) >> 2;
 8002ecc:	f991 c026 	ldrsb.w	ip, [r1, #38]	; 0x26
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8002ed0:	fb0c f404 	mul.w	r4, ip, r4
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
 8002ed4:	f9b1 c024 	ldrsh.w	ip, [r1, #36]	; 0x24
 8002ed8:	fb0e fc0c 	mul.w	ip, lr, ip
 8002edc:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8002ee0:	eb0c 04a4 	add.w	r4, ip, r4, asr #2
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 8002ee4:	f9b1 3022 	ldrsh.w	r3, [r1, #34]	; 0x22
 8002ee8:	041b      	lsls	r3, r3, #16
 8002eea:	eb03 0ca4 	add.w	ip, r3, r4, asr #2
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8002eee:	1352      	asrs	r2, r2, #13
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 8002ef0:	f991 3020 	ldrsb.w	r3, [r1, #32]
 8002ef4:	015b      	lsls	r3, r3, #5
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8002ef6:	fb03 f202 	mul.w	r2, r3, r2
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 8002efa:	f9b1 301e 	ldrsh.w	r3, [r1, #30]
 8002efe:	fb0e f303 	mul.w	r3, lr, r3
 8002f02:	105b      	asrs	r3, r3, #1
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8002f04:	eb03 03e2 	add.w	r3, r3, r2, asr #3
	var1 = var1 >> 18;
 8002f08:	149b      	asrs	r3, r3, #18
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 8002f0a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002f0e:	8b8a      	ldrh	r2, [r1, #28]
 8002f10:	fb02 f303 	mul.w	r3, r2, r3
 8002f14:	13da      	asrs	r2, r3, #15
	pressure_comp = 1048576 - pres_adc;
 8002f16:	f5c0 1380 	rsb	r3, r0, #1048576	; 0x100000
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
 8002f1a:	eba3 332c 	sub.w	r3, r3, ip, asr #12
 8002f1e:	f640 4035 	movw	r0, #3125	; 0xc35
 8002f22:	fb00 f303 	mul.w	r3, r0, r3
	if (pressure_comp >= BME680_MAX_OVERFLOW_VAL)
 8002f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f2a:	db24      	blt.n	8002f76 <calc_pressure+0xbe>
		pressure_comp = ((pressure_comp / var1) << 1);
 8002f2c:	fb93 f3f2 	sdiv	r3, r3, r2
 8002f30:	005b      	lsls	r3, r3, #1
	else
		pressure_comp = ((pressure_comp << 1) / var1);
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 8002f32:	f9b1 002a 	ldrsh.w	r0, [r1, #42]	; 0x2a
 8002f36:	10da      	asrs	r2, r3, #3
 8002f38:	fb02 f202 	mul.w	r2, r2, r2
		(pressure_comp >> 3)) >> 13)) >> 12;
 8002f3c:	1352      	asrs	r2, r2, #13
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 8002f3e:	fb02 f400 	mul.w	r4, r2, r0
	var2 = ((int32_t)(pressure_comp >> 2) *
 8002f42:	1098      	asrs	r0, r3, #2
		(int32_t)dev->calib.par_p8) >> 13;
 8002f44:	f9b1 2028 	ldrsh.w	r2, [r1, #40]	; 0x28
	var2 = ((int32_t)(pressure_comp >> 2) *
 8002f48:	fb02 f000 	mul.w	r0, r2, r0
 8002f4c:	1340      	asrs	r0, r0, #13
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8002f4e:	121a      	asrs	r2, r3, #8
 8002f50:	fb02 fc02 	mul.w	ip, r2, r2
 8002f54:	fb0c f202 	mul.w	r2, ip, r2
		(int32_t)(pressure_comp >> 8) *
		(int32_t)dev->calib.par_p10) >> 17;
 8002f58:	f891 c02c 	ldrb.w	ip, [r1, #44]	; 0x2c
		(int32_t)(pressure_comp >> 8) *
 8002f5c:	fb0c f202 	mul.w	r2, ip, r2

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8002f60:	eb00 3024 	add.w	r0, r0, r4, asr #12
 8002f64:	eb00 4062 	add.w	r0, r0, r2, asr #17
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 8002f68:	f991 2027 	ldrsb.w	r2, [r1, #39]	; 0x27
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8002f6c:	eb00 10c2 	add.w	r0, r0, r2, lsl #7

	return (uint32_t)pressure_comp;

}
 8002f70:	eb03 1020 	add.w	r0, r3, r0, asr #4
 8002f74:	bd10      	pop	{r4, pc}
		pressure_comp = ((pressure_comp << 1) / var1);
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	fb93 f3f2 	sdiv	r3, r3, r2
 8002f7c:	e7d9      	b.n	8002f32 <calc_pressure+0x7a>
	...

08002f80 <calc_humidity>:

/*!
 * @brief This internal API is used to calculate the humidity value.
 */
static uint32_t calc_humidity(uint16_t hum_adc, const struct bme680_dev *dev)
{
 8002f80:	b570      	push	{r4, r5, r6, lr}
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 8002f82:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8002f84:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002f88:	3380      	adds	r3, #128	; 0x80
 8002f8a:	ea4f 2c23 	mov.w	ip, r3, asr #8
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 8002f8e:	890a      	ldrh	r2, [r1, #8]
 8002f90:	eba0 1002 	sub.w	r0, r0, r2, lsl #4
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
 8002f94:	f991 200c 	ldrsb.w	r2, [r1, #12]
 8002f98:	fb0c f202 	mul.w	r2, ip, r2
 8002f9c:	4c28      	ldr	r4, [pc, #160]	; (8003040 <calc_humidity+0xc0>)
 8002f9e:	fb84 5302 	smull	r5, r3, r4, r2
 8002fa2:	17d2      	asrs	r2, r2, #31
 8002fa4:	ebc2 1263 	rsb	r2, r2, r3, asr #5
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 8002fa8:	eba0 0062 	sub.w	r0, r0, r2, asr #1
	var2 = ((int32_t) dev->calib.par_h2
 8002fac:	894d      	ldrh	r5, [r1, #10]
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8002fae:	f991 e00d 	ldrsb.w	lr, [r1, #13]
 8002fb2:	fb0c fe0e 	mul.w	lr, ip, lr
 8002fb6:	fb84 230e 	smull	r2, r3, r4, lr
 8002fba:	ea4f 7eee 	mov.w	lr, lr, asr #31
 8002fbe:	ebce 1e63 	rsb	lr, lr, r3, asr #5
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8002fc2:	f991 200e 	ldrsb.w	r2, [r1, #14]
 8002fc6:	fb0c f202 	mul.w	r2, ip, r2
 8002fca:	fb84 3602 	smull	r3, r6, r4, r2
 8002fce:	17d3      	asrs	r3, r2, #31
 8002fd0:	ebc3 1366 	rsb	r3, r3, r6, asr #5
 8002fd4:	fb0c f303 	mul.w	r3, ip, r3
 8002fd8:	119a      	asrs	r2, r3, #6
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 8002fda:	fb84 6202 	smull	r6, r2, r4, r2
 8002fde:	17db      	asrs	r3, r3, #31
 8002fe0:	ebc3 1362 	rsb	r3, r3, r2, asr #5
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8002fe4:	4473      	add	r3, lr
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 8002fe6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8002fea:	fb03 f505 	mul.w	r5, r3, r5
	var2 = ((int32_t) dev->calib.par_h2
 8002fee:	12ad      	asrs	r5, r5, #10
	var3 = var1 * var2;
 8002ff0:	fb05 f000 	mul.w	r0, r5, r0
	var4 = (int32_t) dev->calib.par_h6 << 7;
 8002ff4:	7bcd      	ldrb	r5, [r1, #15]
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8002ff6:	f991 2010 	ldrsb.w	r2, [r1, #16]
 8002ffa:	fb0c f302 	mul.w	r3, ip, r2
 8002ffe:	fb84 2403 	smull	r2, r4, r4, r3
 8003002:	17db      	asrs	r3, r3, #31
 8003004:	ebc3 1364 	rsb	r3, r3, r4, asr #5
 8003008:	eb03 13c5 	add.w	r3, r3, r5, lsl #7
 800300c:	111b      	asrs	r3, r3, #4
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 800300e:	1382      	asrs	r2, r0, #14
 8003010:	fb02 f202 	mul.w	r2, r2, r2
 8003014:	1292      	asrs	r2, r2, #10
	var6 = (var4 * var5) >> 1;
 8003016:	fb02 f303 	mul.w	r3, r2, r3
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 800301a:	eb00 0363 	add.w	r3, r0, r3, asr #1
 800301e:	129b      	asrs	r3, r3, #10
 8003020:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003024:	fb02 f303 	mul.w	r3, r2, r3

	if (calc_hum > 100000) /* Cap at 100%rH */
 8003028:	4a06      	ldr	r2, [pc, #24]	; (8003044 <calc_humidity+0xc4>)
 800302a:	ebb2 3f23 	cmp.w	r2, r3, asr #12
 800302e:	db04      	blt.n	800303a <calc_humidity+0xba>
 8003030:	1318      	asrs	r0, r3, #12
		calc_hum = 100000;
	else if (calc_hum < 0)
 8003032:	2800      	cmp	r0, #0
 8003034:	da02      	bge.n	800303c <calc_humidity+0xbc>
		calc_hum = 0;
 8003036:	2000      	movs	r0, #0
 8003038:	e000      	b.n	800303c <calc_humidity+0xbc>
		calc_hum = 100000;
 800303a:	4802      	ldr	r0, [pc, #8]	; (8003044 <calc_humidity+0xc4>)

	return (uint32_t) calc_hum;
}
 800303c:	bd70      	pop	{r4, r5, r6, pc}
 800303e:	bf00      	nop
 8003040:	51eb851f 	.word	0x51eb851f
 8003044:	000186a0 	.word	0x000186a0

08003048 <calc_gas_resistance>:

/*!
 * @brief This internal API is used to calculate the Gas Resistance value.
 */
static uint32_t calc_gas_resistance(uint16_t gas_res_adc, uint8_t gas_range, const struct bme680_dev *dev)
{
 8003048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800304a:	b0a1      	sub	sp, #132	; 0x84
 800304c:	4605      	mov	r5, r0
 800304e:	460e      	mov	r6, r1
 8003050:	4617      	mov	r7, r2
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;
	/**Look up table 1 for the possible gas range values */
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
 8003052:	4c32      	ldr	r4, [pc, #200]	; (800311c <calc_gas_resistance+0xd4>)
 8003054:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 8003058:	46a6      	mov	lr, r4
 800305a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800305e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003062:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8003066:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800306a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800306e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003072:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8003076:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2130303777),
		UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2143188679), UINT32_C(2136746228),
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2147483647) };
	/**Look up table 2 for the possible gas range values */
	uint32_t lookupTable2[16] = { UINT32_C(4096000000), UINT32_C(2048000000), UINT32_C(1024000000), UINT32_C(512000000),
 800307a:	46ee      	mov	lr, sp
 800307c:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 8003080:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003084:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003088:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800308c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003090:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003094:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003098:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800309c:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
		UINT32_C(255744255), UINT32_C(127110228), UINT32_C(64000000), UINT32_C(32258064), UINT32_C(16016016),
		UINT32_C(8000000), UINT32_C(4000000), UINT32_C(2000000), UINT32_C(1000000), UINT32_C(500000),
		UINT32_C(250000), UINT32_C(125000) };

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 80030a0:	f997 2036 	ldrsb.w	r2, [r7, #54]	; 0x36
 80030a4:	17d3      	asrs	r3, r2, #31
 80030a6:	0099      	lsls	r1, r3, #2
 80030a8:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80030ac:	ea4f 0c82 	mov.w	ip, r2, lsl #2
 80030b0:	eb1c 0c02 	adds.w	ip, ip, r2
 80030b4:	eb43 0301 	adc.w	r3, r3, r1
 80030b8:	f240 523c 	movw	r2, #1340	; 0x53c
 80030bc:	eb1c 0c02 	adds.w	ip, ip, r2
 80030c0:	f143 0300 	adc.w	r3, r3, #0
		((int64_t) lookupTable1[gas_range])) >> 16;
 80030c4:	aa20      	add	r2, sp, #128	; 0x80
 80030c6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80030ca:	f856 2c40 	ldr.w	r2, [r6, #-64]
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 80030ce:	fbac c002 	umull	ip, r0, ip, r2
 80030d2:	fb02 0003 	mla	r0, r2, r3, r0
 80030d6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80030da:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
 80030de:	1404      	asrs	r4, r0, #16
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 80030e0:	03ea      	lsls	r2, r5, #15
 80030e2:	f112 427f 	adds.w	r2, r2, #4278190080	; 0xff000000
 80030e6:	eb63 0303 	sbc.w	r3, r3, r3
 80030ea:	eb12 020c 	adds.w	r2, r2, ip
 80030ee:	eb43 4320 	adc.w	r3, r3, r0, asr #16
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 80030f2:	f856 1c80 	ldr.w	r1, [r6, #-128]
 80030f6:	fba1 0c0c 	umull	r0, ip, r1, ip
 80030fa:	fb01 cc04 	mla	ip, r1, r4, ip
 80030fe:	0a40      	lsrs	r0, r0, #9
 8003100:	ea40 50cc 	orr.w	r0, r0, ip, lsl #23
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
 8003104:	0854      	lsrs	r4, r2, #1
 8003106:	ea44 74c3 	orr.w	r4, r4, r3, lsl #31
 800310a:	1059      	asrs	r1, r3, #1
 800310c:	1820      	adds	r0, r4, r0
 800310e:	eb41 216c 	adc.w	r1, r1, ip, asr #9
 8003112:	f7fd fd9d 	bl	8000c50 <__aeabi_ldivmod>

	return calc_gas_res;
}
 8003116:	b021      	add	sp, #132	; 0x84
 8003118:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800311a:	bf00      	nop
 800311c:	080140c0 	.word	0x080140c0

08003120 <calc_heater_res>:

/*!
 * @brief This internal API is used to calculate the Heat Resistance value.
 */
static uint8_t calc_heater_res(uint16_t temp, const struct bme680_dev *dev)
{
 8003120:	b510      	push	{r4, lr}
	int32_t var3;
	int32_t var4;
	int32_t var5;
	int32_t heatr_res_x100;

	if (temp > 400) /* Cap temperature */
 8003122:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
 8003126:	d901      	bls.n	800312c <calc_heater_res+0xc>
		temp = 400;
 8003128:	f44f 70c8 	mov.w	r0, #400	; 0x190

	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 800312c:	f991 3004 	ldrsb.w	r3, [r1, #4]
 8003130:	f991 2014 	ldrsb.w	r2, [r1, #20]
 8003134:	fb02 f303 	mul.w	r3, r2, r3
 8003138:	4a20      	ldr	r2, [pc, #128]	; (80031bc <calc_heater_res+0x9c>)
 800313a:	fb82 2c03 	smull	r2, ip, r2, r3
 800313e:	17db      	asrs	r3, r3, #31
 8003140:	ebc3 1cac 	rsb	ip, r3, ip, asr #6
	var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 8003144:	f991 3011 	ldrsb.w	r3, [r1, #17]
 8003148:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800314c:	f9b1 2012 	ldrsh.w	r2, [r1, #18]
 8003150:	f502 3216 	add.w	r2, r2, #153600	; 0x25800
 8003154:	f202 1299 	addw	r2, r2, #409	; 0x199
 8003158:	fb02 f000 	mul.w	r0, r2, r0
 800315c:	4c18      	ldr	r4, [pc, #96]	; (80031c0 <calc_heater_res+0xa0>)
 800315e:	fb84 e200 	smull	lr, r2, r4, r0
 8003162:	17c0      	asrs	r0, r0, #31
 8003164:	ebc0 02e2 	rsb	r2, r0, r2, asr #3
 8003168:	f502 1248 	add.w	r2, r2, #3276800	; 0x320000
 800316c:	fb84 0402 	smull	r0, r4, r4, r2
 8003170:	17d2      	asrs	r2, r2, #31
 8003172:	ebc2 02a4 	rsb	r2, r2, r4, asr #2
 8003176:	fb02 f303 	mul.w	r3, r2, r3
	var3 = var1 + (var2 / 2);
 800317a:	eb03 70d3 	add.w	r0, r3, r3, lsr #31
 800317e:	1040      	asrs	r0, r0, #1
 8003180:	eb00 200c 	add.w	r0, r0, ip, lsl #8
	var4 = (var3 / (dev->calib.res_heat_range + 4));
 8003184:	f891 3034 	ldrb.w	r3, [r1, #52]	; 0x34
 8003188:	3304      	adds	r3, #4
 800318a:	fb90 f0f3 	sdiv	r0, r0, r3
	var5 = (131 * dev->calib.res_heat_val) + 65536;
 800318e:	f991 3035 	ldrsb.w	r3, [r1, #53]	; 0x35
 8003192:	eb03 1283 	add.w	r2, r3, r3, lsl #6
 8003196:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800319a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	heatr_res_x100 = (int32_t) (((var4 / var5) - 250) * 34);
 800319e:	fb90 f0f3 	sdiv	r0, r0, r3
 80031a2:	38fa      	subs	r0, #250	; 0xfa
 80031a4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80031a8:	0040      	lsls	r0, r0, #1
	heatr_res = (uint8_t) ((heatr_res_x100 + 50) / 100);
 80031aa:	3032      	adds	r0, #50	; 0x32
 80031ac:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <calc_heater_res+0xa4>)
 80031ae:	fb83 2300 	smull	r2, r3, r3, r0
 80031b2:	17c0      	asrs	r0, r0, #31
 80031b4:	ebc0 1063 	rsb	r0, r0, r3, asr #5

	return heatr_res;
}
 80031b8:	b2c0      	uxtb	r0, r0
 80031ba:	bd10      	pop	{r4, pc}
 80031bc:	10624dd3 	.word	0x10624dd3
 80031c0:	66666667 	.word	0x66666667
 80031c4:	51eb851f 	.word	0x51eb851f

080031c8 <calc_heater_dur>:
static uint8_t calc_heater_dur(uint16_t dur)
{
	uint8_t factor = 0;
	uint8_t durval;

	if (dur >= 0xfc0) {
 80031c8:	f5b0 6f7c 	cmp.w	r0, #4032	; 0xfc0
 80031cc:	d20c      	bcs.n	80031e8 <calc_heater_dur+0x20>
	uint8_t factor = 0;
 80031ce:	2300      	movs	r3, #0
 80031d0:	e002      	b.n	80031d8 <calc_heater_dur+0x10>
		durval = 0xff; /* Max duration*/
	} else {
		while (dur > 0x3F) {
			dur = dur / 4;
 80031d2:	0880      	lsrs	r0, r0, #2
			factor += 1;
 80031d4:	3301      	adds	r3, #1
 80031d6:	b2db      	uxtb	r3, r3
		while (dur > 0x3F) {
 80031d8:	283f      	cmp	r0, #63	; 0x3f
 80031da:	d8fa      	bhi.n	80031d2 <calc_heater_dur+0xa>
		}
		durval = (uint8_t) (dur + (factor * 64));
 80031dc:	019b      	lsls	r3, r3, #6
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	fa53 f080 	uxtab	r0, r3, r0
 80031e4:	b2c0      	uxtb	r0, r0
 80031e6:	4770      	bx	lr
		durval = 0xff; /* Max duration*/
 80031e8:	20ff      	movs	r0, #255	; 0xff
	}

	return durval;
}
 80031ea:	4770      	bx	lr

080031ec <boundary_check>:
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
	int8_t rslt = BME680_OK;

	if (value != NULL) {
 80031ec:	4684      	mov	ip, r0
 80031ee:	b1c0      	cbz	r0, 8003222 <boundary_check+0x36>
		/* Check if value is below minimum value */
		if (*value < min) {
 80031f0:	7800      	ldrb	r0, [r0, #0]
 80031f2:	4288      	cmp	r0, r1
 80031f4:	d207      	bcs.n	8003206 <boundary_check+0x1a>
			/* Auto correct the invalid value to minimum value */
			*value = min;
 80031f6:	f88c 1000 	strb.w	r1, [ip]
			dev->info_msg |= BME680_I_MIN_CORRECTION;
 80031fa:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
 80031fe:	f041 0101 	orr.w	r1, r1, #1
 8003202:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
		}
		/* Check if value is above maximum value */
		if (*value > max) {
 8003206:	f89c 1000 	ldrb.w	r1, [ip]
 800320a:	4291      	cmp	r1, r2
 800320c:	d90c      	bls.n	8003228 <boundary_check+0x3c>
			/* Auto correct the invalid value to maximum value */
			*value = max;
 800320e:	f88c 2000 	strb.w	r2, [ip]
			dev->info_msg |= BME680_I_MAX_CORRECTION;
 8003212:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8003216:	f042 0202 	orr.w	r2, r2, #2
 800321a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	int8_t rslt = BME680_OK;
 800321e:	2000      	movs	r0, #0
 8003220:	4770      	bx	lr
		}
	} else {
		rslt = BME680_E_NULL_PTR;
 8003222:	f04f 30ff 	mov.w	r0, #4294967295
 8003226:	4770      	bx	lr
	int8_t rslt = BME680_OK;
 8003228:	2000      	movs	r0, #0
	}

	return rslt;
}
 800322a:	4770      	bx	lr

0800322c <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 800322c:	b150      	cbz	r0, 8003244 <null_ptr_check+0x18>
 800322e:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8003230:	b15a      	cbz	r2, 800324a <null_ptr_check+0x1e>
 8003232:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8003234:	b162      	cbz	r2, 8003250 <null_ptr_check+0x24>
 8003236:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003238:	b10b      	cbz	r3, 800323e <null_ptr_check+0x12>
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
	} else {
		/* Device structure is fine */
		rslt = BME680_OK;
 800323a:	2000      	movs	r0, #0
	}

	return rslt;
}
 800323c:	4770      	bx	lr
		rslt = BME680_E_NULL_PTR;
 800323e:	f04f 30ff 	mov.w	r0, #4294967295
 8003242:	4770      	bx	lr
 8003244:	f04f 30ff 	mov.w	r0, #4294967295
 8003248:	4770      	bx	lr
 800324a:	f04f 30ff 	mov.w	r0, #4294967295
 800324e:	4770      	bx	lr
 8003250:	f04f 30ff 	mov.w	r0, #4294967295
 8003254:	4770      	bx	lr

08003256 <set_mem_page>:
{
 8003256:	b570      	push	{r4, r5, r6, lr}
 8003258:	b082      	sub	sp, #8
 800325a:	4605      	mov	r5, r0
 800325c:	460c      	mov	r4, r1
	rslt = null_ptr_check(dev);
 800325e:	4608      	mov	r0, r1
 8003260:	f7ff ffe4 	bl	800322c <null_ptr_check>
	if (rslt == BME680_OK) {
 8003264:	4606      	mov	r6, r0
 8003266:	bb40      	cbnz	r0, 80032ba <set_mem_page+0x64>
		if (reg_addr > 0x7f)
 8003268:	f015 0f80 	tst.w	r5, #128	; 0x80
 800326c:	d128      	bne.n	80032c0 <set_mem_page+0x6a>
			mem_page = BME680_MEM_PAGE0;
 800326e:	2310      	movs	r3, #16
		if (mem_page != dev->mem_page) {
 8003270:	78e2      	ldrb	r2, [r4, #3]
 8003272:	429a      	cmp	r2, r3
 8003274:	d021      	beq.n	80032ba <set_mem_page+0x64>
			dev->mem_page = mem_page;
 8003276:	70e3      	strb	r3, [r4, #3]
			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 8003278:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800327a:	2301      	movs	r3, #1
 800327c:	f10d 0207 	add.w	r2, sp, #7
 8003280:	21f3      	movs	r1, #243	; 0xf3
 8003282:	7860      	ldrb	r0, [r4, #1]
 8003284:	47a8      	blx	r5
 8003286:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
			if (dev->com_rslt != 0)
 800328a:	b9d8      	cbnz	r0, 80032c4 <set_mem_page+0x6e>
				reg = reg & (~BME680_MEM_PAGE_MSK);
 800328c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003290:	f003 02ef 	and.w	r2, r3, #239	; 0xef
 8003294:	f88d 2007 	strb.w	r2, [sp, #7]
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 8003298:	f994 3003 	ldrsb.w	r3, [r4, #3]
 800329c:	f003 0310 	and.w	r3, r3, #16
 80032a0:	4313      	orrs	r3, r2
 80032a2:	f88d 3007 	strb.w	r3, [sp, #7]
				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 80032a6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80032a8:	2301      	movs	r3, #1
 80032aa:	f10d 0207 	add.w	r2, sp, #7
 80032ae:	2173      	movs	r1, #115	; 0x73
 80032b0:	7860      	ldrb	r0, [r4, #1]
 80032b2:	47a8      	blx	r5
 80032b4:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
				if (dev->com_rslt != 0)
 80032b8:	b938      	cbnz	r0, 80032ca <set_mem_page+0x74>
}
 80032ba:	4630      	mov	r0, r6
 80032bc:	b002      	add	sp, #8
 80032be:	bd70      	pop	{r4, r5, r6, pc}
			mem_page = BME680_MEM_PAGE1;
 80032c0:	2300      	movs	r3, #0
 80032c2:	e7d5      	b.n	8003270 <set_mem_page+0x1a>
				rslt = BME680_E_COM_FAIL;
 80032c4:	f06f 0601 	mvn.w	r6, #1
 80032c8:	e7f7      	b.n	80032ba <set_mem_page+0x64>
					rslt = BME680_E_COM_FAIL;
 80032ca:	f06f 0601 	mvn.w	r6, #1
 80032ce:	e7f4      	b.n	80032ba <set_mem_page+0x64>

080032d0 <get_mem_page>:
{
 80032d0:	b530      	push	{r4, r5, lr}
 80032d2:	b083      	sub	sp, #12
 80032d4:	4604      	mov	r4, r0
	rslt = null_ptr_check(dev);
 80032d6:	f7ff ffa9 	bl	800322c <null_ptr_check>
	if (rslt == BME680_OK) {
 80032da:	4605      	mov	r5, r0
 80032dc:	b978      	cbnz	r0, 80032fe <get_mem_page+0x2e>
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 80032de:	2301      	movs	r3, #1
 80032e0:	f10d 0207 	add.w	r2, sp, #7
 80032e4:	21f3      	movs	r1, #243	; 0xf3
 80032e6:	7860      	ldrb	r0, [r4, #1]
 80032e8:	f8d4 c048 	ldr.w	ip, [r4, #72]	; 0x48
 80032ec:	47e0      	blx	ip
 80032ee:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
		if (dev->com_rslt != 0)
 80032f2:	b938      	cbnz	r0, 8003304 <get_mem_page+0x34>
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
 80032f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80032f8:	f003 0310 	and.w	r3, r3, #16
 80032fc:	70e3      	strb	r3, [r4, #3]
}
 80032fe:	4628      	mov	r0, r5
 8003300:	b003      	add	sp, #12
 8003302:	bd30      	pop	{r4, r5, pc}
			rslt = BME680_E_COM_FAIL;
 8003304:	f06f 0501 	mvn.w	r5, #1
 8003308:	e7f9      	b.n	80032fe <get_mem_page+0x2e>

0800330a <bme680_get_regs>:
{
 800330a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800330e:	4605      	mov	r5, r0
 8003310:	460e      	mov	r6, r1
 8003312:	4690      	mov	r8, r2
 8003314:	461c      	mov	r4, r3
	rslt = null_ptr_check(dev);
 8003316:	4618      	mov	r0, r3
 8003318:	f7ff ff88 	bl	800322c <null_ptr_check>
	if (rslt == BME680_OK) {
 800331c:	4607      	mov	r7, r0
 800331e:	b950      	cbnz	r0, 8003336 <bme680_get_regs+0x2c>
		if (dev->intf == BME680_SPI_INTF) {
 8003320:	78a3      	ldrb	r3, [r4, #2]
 8003322:	b15b      	cbz	r3, 800333c <bme680_get_regs+0x32>
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8003324:	4643      	mov	r3, r8
 8003326:	4632      	mov	r2, r6
 8003328:	4629      	mov	r1, r5
 800332a:	7860      	ldrb	r0, [r4, #1]
 800332c:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800332e:	47a8      	blx	r5
 8003330:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
		if (dev->com_rslt != 0)
 8003334:	b960      	cbnz	r0, 8003350 <bme680_get_regs+0x46>
}
 8003336:	4638      	mov	r0, r7
 8003338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			rslt = set_mem_page(reg_addr, dev);
 800333c:	4621      	mov	r1, r4
 800333e:	4628      	mov	r0, r5
 8003340:	f7ff ff89 	bl	8003256 <set_mem_page>
			if (rslt == BME680_OK)
 8003344:	4607      	mov	r7, r0
 8003346:	2800      	cmp	r0, #0
 8003348:	d1ec      	bne.n	8003324 <bme680_get_regs+0x1a>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
 800334a:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800334e:	e7e9      	b.n	8003324 <bme680_get_regs+0x1a>
			rslt = BME680_E_COM_FAIL;
 8003350:	f06f 0701 	mvn.w	r7, #1
 8003354:	e7ef      	b.n	8003336 <bme680_get_regs+0x2c>

08003356 <get_calib_data>:
{
 8003356:	b530      	push	{r4, r5, lr}
 8003358:	b08d      	sub	sp, #52	; 0x34
 800335a:	4604      	mov	r4, r0
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
 800335c:	2500      	movs	r5, #0
 800335e:	9501      	str	r5, [sp, #4]
 8003360:	2225      	movs	r2, #37	; 0x25
 8003362:	4629      	mov	r1, r5
 8003364:	a802      	add	r0, sp, #8
 8003366:	f010 f9b7 	bl	80136d8 <memset>
	uint8_t temp_var = 0; /* Temporary variable */
 800336a:	f88d 5003 	strb.w	r5, [sp, #3]
	rslt = null_ptr_check(dev);
 800336e:	4620      	mov	r0, r4
 8003370:	f7ff ff5c 	bl	800322c <null_ptr_check>
	if (rslt == BME680_OK) {
 8003374:	4603      	mov	r3, r0
 8003376:	b110      	cbz	r0, 800337e <get_calib_data+0x28>
}
 8003378:	4618      	mov	r0, r3
 800337a:	b00d      	add	sp, #52	; 0x34
 800337c:	bd30      	pop	{r4, r5, pc}
		rslt = bme680_get_regs(BME680_COEFF_ADDR1, coeff_array, BME680_COEFF_ADDR1_LEN, dev);
 800337e:	4623      	mov	r3, r4
 8003380:	2219      	movs	r2, #25
 8003382:	a901      	add	r1, sp, #4
 8003384:	2089      	movs	r0, #137	; 0x89
 8003386:	f7ff ffc0 	bl	800330a <bme680_get_regs>
		if (rslt == BME680_OK)
 800338a:	4603      	mov	r3, r0
 800338c:	2800      	cmp	r0, #0
 800338e:	d07c      	beq.n	800348a <get_calib_data+0x134>
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
 8003390:	f89d 1026 	ldrb.w	r1, [sp, #38]	; 0x26
 8003394:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 8003398:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800339c:	82e2      	strh	r2, [r4, #22]
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
 800339e:	f89d 1006 	ldrb.w	r1, [sp, #6]
 80033a2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80033a6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80033aa:	8322      	strh	r2, [r4, #24]
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
 80033ac:	f99d 2007 	ldrsb.w	r2, [sp, #7]
 80033b0:	76a2      	strb	r2, [r4, #26]
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
 80033b2:	f89d 100a 	ldrb.w	r1, [sp, #10]
 80033b6:	f89d 2009 	ldrb.w	r2, [sp, #9]
 80033ba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80033be:	83a2      	strh	r2, [r4, #28]
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
 80033c0:	f89d 100c 	ldrb.w	r1, [sp, #12]
 80033c4:	f89d 200b 	ldrb.w	r2, [sp, #11]
 80033c8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80033cc:	83e2      	strh	r2, [r4, #30]
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
 80033ce:	f99d 200d 	ldrsb.w	r2, [sp, #13]
 80033d2:	f884 2020 	strb.w	r2, [r4, #32]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
 80033d6:	f89d 1010 	ldrb.w	r1, [sp, #16]
 80033da:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80033de:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80033e2:	8462      	strh	r2, [r4, #34]	; 0x22
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
 80033e4:	f89d 1012 	ldrb.w	r1, [sp, #18]
 80033e8:	f89d 2011 	ldrb.w	r2, [sp, #17]
 80033ec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80033f0:	84a2      	strh	r2, [r4, #36]	; 0x24
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
 80033f2:	f99d 2014 	ldrsb.w	r2, [sp, #20]
 80033f6:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
 80033fa:	f99d 2013 	ldrsb.w	r2, [sp, #19]
 80033fe:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
 8003402:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8003406:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800340a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800340e:	8522      	strh	r2, [r4, #40]	; 0x28
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
 8003410:	f89d 101a 	ldrb.w	r1, [sp, #26]
 8003414:	f89d 2019 	ldrb.w	r2, [sp, #25]
 8003418:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800341c:	8562      	strh	r2, [r4, #42]	; 0x2a
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
 800341e:	f89d 201b 	ldrb.w	r2, [sp, #27]
 8003422:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 8003426:	f89d 001f 	ldrb.w	r0, [sp, #31]
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
 800342a:	f89d 201e 	ldrb.w	r2, [sp, #30]
 800342e:	f002 010f 	and.w	r1, r2, #15
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 8003432:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8003436:	8121      	strh	r1, [r4, #8]
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 8003438:	f89d 101d 	ldrb.w	r1, [sp, #29]
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
 800343c:	0912      	lsrs	r2, r2, #4
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 800343e:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8003442:	8162      	strh	r2, [r4, #10]
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
 8003444:	f99d 2020 	ldrsb.w	r2, [sp, #32]
 8003448:	7322      	strb	r2, [r4, #12]
		dev->calib.par_h4 = (int8_t) coeff_array[BME680_H4_REG];
 800344a:	f99d 2021 	ldrsb.w	r2, [sp, #33]	; 0x21
 800344e:	7362      	strb	r2, [r4, #13]
		dev->calib.par_h5 = (int8_t) coeff_array[BME680_H5_REG];
 8003450:	f99d 2022 	ldrsb.w	r2, [sp, #34]	; 0x22
 8003454:	73a2      	strb	r2, [r4, #14]
		dev->calib.par_h6 = (uint8_t) coeff_array[BME680_H6_REG];
 8003456:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
 800345a:	73e2      	strb	r2, [r4, #15]
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];
 800345c:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
 8003460:	7422      	strb	r2, [r4, #16]
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
 8003462:	f99d 2029 	ldrsb.w	r2, [sp, #41]	; 0x29
 8003466:	7462      	strb	r2, [r4, #17]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
 8003468:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
 800346c:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 8003470:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003474:	8262      	strh	r2, [r4, #18]
		dev->calib.par_gh3 = (int8_t) coeff_array[BME680_GH3_REG];
 8003476:	f99d 202a 	ldrsb.w	r2, [sp, #42]	; 0x2a
 800347a:	7522      	strb	r2, [r4, #20]
		if (rslt == BME680_OK) {
 800347c:	b173      	cbz	r3, 800349c <get_calib_data+0x146>
		dev->calib.range_sw_err = ((int8_t) temp_var & (int8_t) BME680_RSERROR_MSK) / 16;
 800347e:	f99d 2003 	ldrsb.w	r2, [sp, #3]
 8003482:	1112      	asrs	r2, r2, #4
 8003484:	f884 2036 	strb.w	r2, [r4, #54]	; 0x36
 8003488:	e776      	b.n	8003378 <get_calib_data+0x22>
			rslt = bme680_get_regs(BME680_COEFF_ADDR2, &coeff_array[BME680_COEFF_ADDR1_LEN]
 800348a:	4623      	mov	r3, r4
 800348c:	2210      	movs	r2, #16
 800348e:	f10d 011d 	add.w	r1, sp, #29
 8003492:	20e1      	movs	r0, #225	; 0xe1
 8003494:	f7ff ff39 	bl	800330a <bme680_get_regs>
 8003498:	4603      	mov	r3, r0
 800349a:	e779      	b.n	8003390 <get_calib_data+0x3a>
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);
 800349c:	4623      	mov	r3, r4
 800349e:	2201      	movs	r2, #1
 80034a0:	f10d 0103 	add.w	r1, sp, #3
 80034a4:	2002      	movs	r0, #2
 80034a6:	f7ff ff30 	bl	800330a <bme680_get_regs>
			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
 80034aa:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80034ae:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80034b2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			if (rslt == BME680_OK) {
 80034b6:	4603      	mov	r3, r0
 80034b8:	2800      	cmp	r0, #0
 80034ba:	d1e0      	bne.n	800347e <get_calib_data+0x128>
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);
 80034bc:	4623      	mov	r3, r4
 80034be:	2201      	movs	r2, #1
 80034c0:	f10d 0103 	add.w	r1, sp, #3
 80034c4:	f7ff ff21 	bl	800330a <bme680_get_regs>
				dev->calib.res_heat_val = (int8_t) temp_var;
 80034c8:	f99d 3003 	ldrsb.w	r3, [sp, #3]
 80034cc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
				if (rslt == BME680_OK)
 80034d0:	4603      	mov	r3, r0
 80034d2:	2800      	cmp	r0, #0
 80034d4:	d1d3      	bne.n	800347e <get_calib_data+0x128>
					rslt = bme680_get_regs(BME680_ADDR_RANGE_SW_ERR_ADDR, &temp_var, 1, dev);
 80034d6:	4623      	mov	r3, r4
 80034d8:	2201      	movs	r2, #1
 80034da:	f10d 0103 	add.w	r1, sp, #3
 80034de:	2004      	movs	r0, #4
 80034e0:	f7ff ff13 	bl	800330a <bme680_get_regs>
 80034e4:	4603      	mov	r3, r0
 80034e6:	e7ca      	b.n	800347e <get_calib_data+0x128>

080034e8 <read_field_data>:
{
 80034e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034ec:	b085      	sub	sp, #20
 80034ee:	4607      	mov	r7, r0
 80034f0:	4688      	mov	r8, r1
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
 80034f2:	2300      	movs	r3, #0
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	9301      	str	r3, [sp, #4]
 80034f8:	9302      	str	r3, [sp, #8]
 80034fa:	f8cd 300b 	str.w	r3, [sp, #11]
	rslt = null_ptr_check(dev);
 80034fe:	4608      	mov	r0, r1
 8003500:	f7ff fe94 	bl	800322c <null_ptr_check>
 8003504:	4605      	mov	r5, r0
	uint8_t tries = 10;
 8003506:	240a      	movs	r4, #10
 8003508:	e01d      	b.n	8003546 <read_field_data+0x5e>
				data->temperature = calc_temperature(adc_temp, dev);
 800350a:	4641      	mov	r1, r8
 800350c:	f7ff fc99 	bl	8002e42 <calc_temperature>
 8003510:	80b8      	strh	r0, [r7, #4]
				data->pressure = calc_pressure(adc_pres, dev);
 8003512:	4641      	mov	r1, r8
 8003514:	4630      	mov	r0, r6
 8003516:	f7ff fccf 	bl	8002eb8 <calc_pressure>
 800351a:	60b8      	str	r0, [r7, #8]
				data->humidity = calc_humidity(adc_hum, dev);
 800351c:	4641      	mov	r1, r8
 800351e:	4650      	mov	r0, sl
 8003520:	f7ff fd2e 	bl	8002f80 <calc_humidity>
 8003524:	60f8      	str	r0, [r7, #12]
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 8003526:	4642      	mov	r2, r8
 8003528:	4659      	mov	r1, fp
 800352a:	4648      	mov	r0, r9
 800352c:	f7ff fd8c 	bl	8003048 <calc_gas_resistance>
 8003530:	6138      	str	r0, [r7, #16]
	if (!tries)
 8003532:	2c00      	cmp	r4, #0
 8003534:	d053      	beq.n	80035de <read_field_data+0xf6>
}
 8003536:	4628      	mov	r0, r5
 8003538:	b005      	add	sp, #20
 800353a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		tries--;
 800353e:	3c01      	subs	r4, #1
	} while (tries);
 8003540:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8003544:	d0f5      	beq.n	8003532 <read_field_data+0x4a>
		if (rslt == BME680_OK) {
 8003546:	2d00      	cmp	r5, #0
 8003548:	d1f9      	bne.n	800353e <read_field_data+0x56>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 800354a:	4643      	mov	r3, r8
 800354c:	220f      	movs	r2, #15
 800354e:	4669      	mov	r1, sp
 8003550:	201d      	movs	r0, #29
 8003552:	f7ff feda 	bl	800330a <bme680_get_regs>
 8003556:	4605      	mov	r5, r0
			data->status = buff[0] & BME680_NEW_DATA_MSK;
 8003558:	f89d 3000 	ldrb.w	r3, [sp]
 800355c:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8003560:	703a      	strb	r2, [r7, #0]
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 8003562:	f003 030f 	and.w	r3, r3, #15
 8003566:	707b      	strb	r3, [r7, #1]
			data->meas_index = buff[1];
 8003568:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800356c:	70bb      	strb	r3, [r7, #2]
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 800356e:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8003572:	f89d 6003 	ldrb.w	r6, [sp, #3]
 8003576:	0136      	lsls	r6, r6, #4
 8003578:	ea46 3603 	orr.w	r6, r6, r3, lsl #12
				| ((uint32_t) buff[4] / 16));
 800357c:	f89d 3004 	ldrb.w	r3, [sp, #4]
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 8003580:	ea46 1613 	orr.w	r6, r6, r3, lsr #4
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 8003584:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003588:	f89d 0006 	ldrb.w	r0, [sp, #6]
 800358c:	0100      	lsls	r0, r0, #4
 800358e:	ea40 3003 	orr.w	r0, r0, r3, lsl #12
				| ((uint32_t) buff[7] / 16));
 8003592:	f89d 3007 	ldrb.w	r3, [sp, #7]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 8003596:	ea40 1013 	orr.w	r0, r0, r3, lsr #4
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 800359a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800359e:	f89d a009 	ldrb.w	sl, [sp, #9]
 80035a2:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80035a6:	f89d 100d 	ldrb.w	r1, [sp, #13]
 80035aa:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80035ae:	ea4f 1993 	mov.w	r9, r3, lsr #6
 80035b2:	ea49 0981 	orr.w	r9, r9, r1, lsl #2
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;
 80035b6:	f003 0b0f 	and.w	fp, r3, #15
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 80035ba:	f003 0320 	and.w	r3, r3, #32
 80035be:	4313      	orrs	r3, r2
 80035c0:	b25b      	sxtb	r3, r3
 80035c2:	703b      	strb	r3, [r7, #0]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 80035c4:	f99d 200e 	ldrsb.w	r2, [sp, #14]
 80035c8:	f002 0210 	and.w	r2, r2, #16
 80035cc:	4313      	orrs	r3, r2
 80035ce:	703b      	strb	r3, [r7, #0]
			if (data->status & BME680_NEW_DATA_MSK) {
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	db9a      	blt.n	800350a <read_field_data+0x22>
			dev->delay_ms(BME680_POLL_PERIOD_MS);
 80035d4:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
 80035d8:	200a      	movs	r0, #10
 80035da:	4798      	blx	r3
 80035dc:	e7af      	b.n	800353e <read_field_data+0x56>
		rslt = BME680_W_NO_NEW_DATA;
 80035de:	2502      	movs	r5, #2
 80035e0:	e7a9      	b.n	8003536 <read_field_data+0x4e>

080035e2 <bme680_set_regs>:
{
 80035e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80035e6:	b08b      	sub	sp, #44	; 0x2c
 80035e8:	4606      	mov	r6, r0
 80035ea:	4688      	mov	r8, r1
 80035ec:	4617      	mov	r7, r2
 80035ee:	461d      	mov	r5, r3
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 80035f0:	2100      	movs	r1, #0
 80035f2:	9100      	str	r1, [sp, #0]
 80035f4:	2224      	movs	r2, #36	; 0x24
 80035f6:	a801      	add	r0, sp, #4
 80035f8:	f010 f86e 	bl	80136d8 <memset>
	rslt = null_ptr_check(dev);
 80035fc:	4628      	mov	r0, r5
 80035fe:	f7ff fe15 	bl	800322c <null_ptr_check>
	if (rslt == BME680_OK) {
 8003602:	4681      	mov	r9, r0
 8003604:	2800      	cmp	r0, #0
 8003606:	d13e      	bne.n	8003686 <bme680_set_regs+0xa4>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
 8003608:	1e7b      	subs	r3, r7, #1
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b12      	cmp	r3, #18
 800360e:	d801      	bhi.n	8003614 <bme680_set_regs+0x32>
			for (index = 0; index < len; index++) {
 8003610:	2400      	movs	r4, #0
 8003612:	e01b      	b.n	800364c <bme680_set_regs+0x6a>
			rslt = BME680_E_INVALID_LENGTH;
 8003614:	f06f 0903 	mvn.w	r9, #3
 8003618:	e035      	b.n	8003686 <bme680_set_regs+0xa4>
					rslt = set_mem_page(reg_addr[index], dev);
 800361a:	4629      	mov	r1, r5
 800361c:	5d30      	ldrb	r0, [r6, r4]
 800361e:	f7ff fe1a 	bl	8003256 <set_mem_page>
 8003622:	4681      	mov	r9, r0
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 8003624:	5d33      	ldrb	r3, [r6, r4]
 8003626:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800362a:	aa0a      	add	r2, sp, #40	; 0x28
 800362c:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 8003630:	f802 3c28 	strb.w	r3, [r2, #-40]
				tmp_buff[(2 * index) + 1] = reg_data[index];
 8003634:	ea4f 0c44 	mov.w	ip, r4, lsl #1
 8003638:	f818 3004 	ldrb.w	r3, [r8, r4]
 800363c:	f10c 0229 	add.w	r2, ip, #41	; 0x29
 8003640:	eb0d 0c02 	add.w	ip, sp, r2
 8003644:	f80c 3c28 	strb.w	r3, [ip, #-40]
			for (index = 0; index < len; index++) {
 8003648:	3401      	adds	r4, #1
 800364a:	b2a4      	uxth	r4, r4
 800364c:	b2bb      	uxth	r3, r7
 800364e:	42a3      	cmp	r3, r4
 8003650:	d909      	bls.n	8003666 <bme680_set_regs+0x84>
				if (dev->intf == BME680_SPI_INTF) {
 8003652:	78ab      	ldrb	r3, [r5, #2]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d0e0      	beq.n	800361a <bme680_set_regs+0x38>
					tmp_buff[(2 * index)] = reg_addr[index];
 8003658:	5d32      	ldrb	r2, [r6, r4]
 800365a:	ab0a      	add	r3, sp, #40	; 0x28
 800365c:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8003660:	f803 2c28 	strb.w	r2, [r3, #-40]
 8003664:	e7e6      	b.n	8003634 <bme680_set_regs+0x52>
			if (rslt == BME680_OK) {
 8003666:	f1b9 0f00 	cmp.w	r9, #0
 800366a:	d10c      	bne.n	8003686 <bme680_set_regs+0xa4>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 800366c:	6cec      	ldr	r4, [r5, #76]	; 0x4c
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	3b01      	subs	r3, #1
 8003672:	b29b      	uxth	r3, r3
 8003674:	f10d 0201 	add.w	r2, sp, #1
 8003678:	f89d 1000 	ldrb.w	r1, [sp]
 800367c:	7868      	ldrb	r0, [r5, #1]
 800367e:	47a0      	blx	r4
 8003680:	f885 0054 	strb.w	r0, [r5, #84]	; 0x54
				if (dev->com_rslt != 0)
 8003684:	b918      	cbnz	r0, 800368e <bme680_set_regs+0xac>
}
 8003686:	4648      	mov	r0, r9
 8003688:	b00b      	add	sp, #44	; 0x2c
 800368a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					rslt = BME680_E_COM_FAIL;
 800368e:	f06f 0901 	mvn.w	r9, #1
 8003692:	e7f8      	b.n	8003686 <bme680_set_regs+0xa4>

08003694 <set_gas_config>:
{
 8003694:	b510      	push	{r4, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	4604      	mov	r4, r0
	rslt = null_ptr_check(dev);
 800369a:	f7ff fdc7 	bl	800322c <null_ptr_check>
	if (rslt == BME680_OK) {
 800369e:	b940      	cbnz	r0, 80036b2 <set_gas_config+0x1e>
		uint8_t reg_addr[2] = {0};
 80036a0:	f8ad 0000 	strh.w	r0, [sp]
		uint8_t reg_data[2] = {0};
 80036a4:	f8ad 0004 	strh.w	r0, [sp, #4]
		if (dev->power_mode == BME680_FORCED_MODE) {
 80036a8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d002      	beq.n	80036b6 <set_gas_config+0x22>
			rslt = BME680_W_DEFINE_PWR_MODE;
 80036b0:	2001      	movs	r0, #1
}
 80036b2:	b002      	add	sp, #8
 80036b4:	bd10      	pop	{r4, pc}
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
 80036b6:	235a      	movs	r3, #90	; 0x5a
 80036b8:	f88d 3000 	strb.w	r3, [sp]
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
 80036bc:	4621      	mov	r1, r4
 80036be:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
 80036c2:	f7ff fd2d 	bl	8003120 <calc_heater_res>
 80036c6:	f88d 0004 	strb.w	r0, [sp, #4]
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
 80036ca:	2364      	movs	r3, #100	; 0x64
 80036cc:	f88d 3001 	strb.w	r3, [sp, #1]
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 80036d0:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
 80036d4:	f7ff fd78 	bl	80031c8 <calc_heater_dur>
 80036d8:	f88d 0005 	strb.w	r0, [sp, #5]
			dev->gas_sett.nb_conv = 0;
 80036dc:	2300      	movs	r3, #0
 80036de:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 80036e2:	4623      	mov	r3, r4
 80036e4:	2202      	movs	r2, #2
 80036e6:	a901      	add	r1, sp, #4
 80036e8:	4668      	mov	r0, sp
 80036ea:	f7ff ff7a 	bl	80035e2 <bme680_set_regs>
 80036ee:	e7e0      	b.n	80036b2 <set_gas_config+0x1e>

080036f0 <bme680_soft_reset>:
{
 80036f0:	b530      	push	{r4, r5, lr}
 80036f2:	b083      	sub	sp, #12
 80036f4:	4604      	mov	r4, r0
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
 80036f6:	23e0      	movs	r3, #224	; 0xe0
 80036f8:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
 80036fc:	23b6      	movs	r3, #182	; 0xb6
 80036fe:	f88d 3006 	strb.w	r3, [sp, #6]
	rslt = null_ptr_check(dev);
 8003702:	f7ff fd93 	bl	800322c <null_ptr_check>
	if (rslt == BME680_OK) {
 8003706:	4605      	mov	r5, r0
 8003708:	b910      	cbnz	r0, 8003710 <bme680_soft_reset+0x20>
		if (dev->intf == BME680_SPI_INTF)
 800370a:	78a3      	ldrb	r3, [r4, #2]
 800370c:	b11b      	cbz	r3, 8003716 <bme680_soft_reset+0x26>
		if (rslt == BME680_OK) {
 800370e:	b13d      	cbz	r5, 8003720 <bme680_soft_reset+0x30>
}
 8003710:	4628      	mov	r0, r5
 8003712:	b003      	add	sp, #12
 8003714:	bd30      	pop	{r4, r5, pc}
			rslt = get_mem_page(dev);
 8003716:	4620      	mov	r0, r4
 8003718:	f7ff fdda 	bl	80032d0 <get_mem_page>
 800371c:	4605      	mov	r5, r0
 800371e:	e7f6      	b.n	800370e <bme680_soft_reset+0x1e>
			rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8003720:	4623      	mov	r3, r4
 8003722:	2201      	movs	r2, #1
 8003724:	f10d 0106 	add.w	r1, sp, #6
 8003728:	f10d 0007 	add.w	r0, sp, #7
 800372c:	f7ff ff59 	bl	80035e2 <bme680_set_regs>
 8003730:	4605      	mov	r5, r0
			dev->delay_ms(BME680_RESET_PERIOD);
 8003732:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003734:	200a      	movs	r0, #10
 8003736:	4798      	blx	r3
			if (rslt == BME680_OK) {
 8003738:	2d00      	cmp	r5, #0
 800373a:	d1e9      	bne.n	8003710 <bme680_soft_reset+0x20>
				if (dev->intf == BME680_SPI_INTF)
 800373c:	78a3      	ldrb	r3, [r4, #2]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1e6      	bne.n	8003710 <bme680_soft_reset+0x20>
					rslt = get_mem_page(dev);
 8003742:	4620      	mov	r0, r4
 8003744:	f7ff fdc4 	bl	80032d0 <get_mem_page>
 8003748:	4605      	mov	r5, r0
 800374a:	e7e1      	b.n	8003710 <bme680_soft_reset+0x20>

0800374c <bme680_init>:
{
 800374c:	b510      	push	{r4, lr}
 800374e:	4604      	mov	r4, r0
	rslt = null_ptr_check(dev);
 8003750:	f7ff fd6c 	bl	800322c <null_ptr_check>
	if (rslt == BME680_OK) {
 8003754:	b100      	cbz	r0, 8003758 <bme680_init+0xc>
}
 8003756:	bd10      	pop	{r4, pc}
		rslt = bme680_soft_reset(dev);
 8003758:	4620      	mov	r0, r4
 800375a:	f7ff ffc9 	bl	80036f0 <bme680_soft_reset>
		if (rslt == BME680_OK) {
 800375e:	2800      	cmp	r0, #0
 8003760:	d1f9      	bne.n	8003756 <bme680_init+0xa>
			rslt = bme680_get_regs(BME680_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 8003762:	4623      	mov	r3, r4
 8003764:	2201      	movs	r2, #1
 8003766:	4621      	mov	r1, r4
 8003768:	20d0      	movs	r0, #208	; 0xd0
 800376a:	f7ff fdce 	bl	800330a <bme680_get_regs>
			if (rslt == BME680_OK) {
 800376e:	2800      	cmp	r0, #0
 8003770:	d1f1      	bne.n	8003756 <bme680_init+0xa>
				if (dev->chip_id == BME680_CHIP_ID) {
 8003772:	7823      	ldrb	r3, [r4, #0]
 8003774:	2b61      	cmp	r3, #97	; 0x61
 8003776:	d103      	bne.n	8003780 <bme680_init+0x34>
					rslt = get_calib_data(dev);
 8003778:	4620      	mov	r0, r4
 800377a:	f7ff fdec 	bl	8003356 <get_calib_data>
 800377e:	e7ea      	b.n	8003756 <bme680_init+0xa>
					rslt = BME680_E_DEV_NOT_FOUND;
 8003780:	f06f 0002 	mvn.w	r0, #2
 8003784:	e7e7      	b.n	8003756 <bme680_init+0xa>

08003786 <bme680_set_sensor_mode>:
{
 8003786:	b570      	push	{r4, r5, r6, lr}
 8003788:	b082      	sub	sp, #8
 800378a:	4604      	mov	r4, r0
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 800378c:	2374      	movs	r3, #116	; 0x74
 800378e:	f88d 3006 	strb.w	r3, [sp, #6]
	rslt = null_ptr_check(dev);
 8003792:	f7ff fd4b 	bl	800322c <null_ptr_check>
	if (rslt == BME680_OK) {
 8003796:	4605      	mov	r5, r0
 8003798:	bb80      	cbnz	r0, 80037fc <bme680_set_sensor_mode+0x76>
	uint8_t pow_mode = 0;
 800379a:	2600      	movs	r6, #0
 800379c:	e000      	b.n	80037a0 <bme680_set_sensor_mode+0x1a>
		} while (pow_mode != BME680_SLEEP_MODE);
 800379e:	b1fe      	cbz	r6, 80037e0 <bme680_set_sensor_mode+0x5a>
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
 80037a0:	4623      	mov	r3, r4
 80037a2:	2201      	movs	r2, #1
 80037a4:	f10d 0107 	add.w	r1, sp, #7
 80037a8:	2074      	movs	r0, #116	; 0x74
 80037aa:	f7ff fdae 	bl	800330a <bme680_get_regs>
			if (rslt == BME680_OK) {
 80037ae:	4605      	mov	r5, r0
 80037b0:	2800      	cmp	r0, #0
 80037b2:	d1f4      	bne.n	800379e <bme680_set_sensor_mode+0x18>
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
 80037b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
				if (pow_mode != BME680_SLEEP_MODE) {
 80037b8:	f013 0603 	ands.w	r6, r3, #3
 80037bc:	d0ef      	beq.n	800379e <bme680_set_sensor_mode+0x18>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
 80037be:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80037c2:	f88d 3007 	strb.w	r3, [sp, #7]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80037c6:	4623      	mov	r3, r4
 80037c8:	2201      	movs	r2, #1
 80037ca:	f10d 0107 	add.w	r1, sp, #7
 80037ce:	f10d 0006 	add.w	r0, sp, #6
 80037d2:	f7ff ff06 	bl	80035e2 <bme680_set_regs>
 80037d6:	4605      	mov	r5, r0
					dev->delay_ms(BME680_POLL_PERIOD_MS);
 80037d8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80037da:	200a      	movs	r0, #10
 80037dc:	4798      	blx	r3
 80037de:	e7de      	b.n	800379e <bme680_set_sensor_mode+0x18>
		if (dev->power_mode != BME680_SLEEP_MODE) {
 80037e0:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 80037e4:	b152      	cbz	r2, 80037fc <bme680_set_sensor_mode+0x76>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
 80037e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80037ea:	f023 0303 	bic.w	r3, r3, #3
 80037ee:	b25b      	sxtb	r3, r3
 80037f0:	f002 0203 	and.w	r2, r2, #3
 80037f4:	4313      	orrs	r3, r2
 80037f6:	f88d 3007 	strb.w	r3, [sp, #7]
			if (rslt == BME680_OK)
 80037fa:	b115      	cbz	r5, 8003802 <bme680_set_sensor_mode+0x7c>
}
 80037fc:	4628      	mov	r0, r5
 80037fe:	b002      	add	sp, #8
 8003800:	bd70      	pop	{r4, r5, r6, pc}
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8003802:	4623      	mov	r3, r4
 8003804:	2201      	movs	r2, #1
 8003806:	f10d 0107 	add.w	r1, sp, #7
 800380a:	f10d 0006 	add.w	r0, sp, #6
 800380e:	f7ff fee8 	bl	80035e2 <bme680_set_regs>
 8003812:	4605      	mov	r5, r0
 8003814:	e7f2      	b.n	80037fc <bme680_set_sensor_mode+0x76>

08003816 <bme680_set_sensor_settings>:
{
 8003816:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003818:	b085      	sub	sp, #20
 800381a:	4606      	mov	r6, r0
 800381c:	460c      	mov	r4, r1
	uint8_t data = 0;
 800381e:	2300      	movs	r3, #0
 8003820:	f88d 300f 	strb.w	r3, [sp, #15]
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 8003824:	9302      	str	r3, [sp, #8]
 8003826:	f8ad 300c 	strh.w	r3, [sp, #12]
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	f8ad 3004 	strh.w	r3, [sp, #4]
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
 8003830:	f891 7044 	ldrb.w	r7, [r1, #68]	; 0x44
	rslt = null_ptr_check(dev);
 8003834:	4608      	mov	r0, r1
 8003836:	f7ff fcf9 	bl	800322c <null_ptr_check>
	if (rslt == BME680_OK) {
 800383a:	4603      	mov	r3, r0
 800383c:	b9e8      	cbnz	r0, 800387a <bme680_set_sensor_settings+0x64>
		if (desired_settings & BME680_GAS_MEAS_SEL)
 800383e:	f016 0f08 	tst.w	r6, #8
 8003842:	d11d      	bne.n	8003880 <bme680_set_sensor_settings+0x6a>
		dev->power_mode = BME680_SLEEP_MODE;
 8003844:	2200      	movs	r2, #0
 8003846:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
		if (rslt == BME680_OK)
 800384a:	b1f3      	cbz	r3, 800388a <bme680_set_sensor_settings+0x74>
		if (desired_settings & BME680_FILTER_SEL) {
 800384c:	f016 0f10 	tst.w	r6, #16
 8003850:	d120      	bne.n	8003894 <bme680_set_sensor_settings+0x7e>
	uint8_t count = 0;
 8003852:	2500      	movs	r5, #0
		if (desired_settings & BME680_HCNTRL_SEL) {
 8003854:	f016 0f20 	tst.w	r6, #32
 8003858:	d143      	bne.n	80038e2 <bme680_set_sensor_settings+0xcc>
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
 800385a:	f016 0f03 	tst.w	r6, #3
 800385e:	d16a      	bne.n	8003936 <bme680_set_sensor_settings+0x120>
		if (desired_settings & BME680_OSH_SEL) {
 8003860:	f016 0f04 	tst.w	r6, #4
 8003864:	f040 80a3 	bne.w	80039ae <bme680_set_sensor_settings+0x198>
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
 8003868:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 800386c:	f040 80c9 	bne.w	8003a02 <bme680_set_sensor_settings+0x1ec>
		if (rslt == BME680_OK)
 8003870:	2b00      	cmp	r3, #0
 8003872:	f000 810e 	beq.w	8003a92 <bme680_set_sensor_settings+0x27c>
		dev->power_mode = intended_power_mode;
 8003876:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
}
 800387a:	4618      	mov	r0, r3
 800387c:	b005      	add	sp, #20
 800387e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			rslt = set_gas_config(dev);
 8003880:	4620      	mov	r0, r4
 8003882:	f7ff ff07 	bl	8003694 <set_gas_config>
 8003886:	4603      	mov	r3, r0
 8003888:	e7dc      	b.n	8003844 <bme680_set_sensor_settings+0x2e>
			rslt = bme680_set_sensor_mode(dev);
 800388a:	4620      	mov	r0, r4
 800388c:	f7ff ff7b 	bl	8003786 <bme680_set_sensor_mode>
 8003890:	4603      	mov	r3, r0
 8003892:	e7db      	b.n	800384c <bme680_set_sensor_settings+0x36>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
 8003894:	4623      	mov	r3, r4
 8003896:	2207      	movs	r2, #7
 8003898:	2100      	movs	r1, #0
 800389a:	f104 003b 	add.w	r0, r4, #59	; 0x3b
 800389e:	f7ff fca5 	bl	80031ec <boundary_check>
			if (rslt == BME680_OK)
 80038a2:	4603      	mov	r3, r0
 80038a4:	b1a0      	cbz	r0, 80038d0 <bme680_set_sensor_settings+0xba>
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 80038a6:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80038aa:	f022 021c 	bic.w	r2, r2, #28
 80038ae:	b252      	sxtb	r2, r2
 80038b0:	f894 103b 	ldrb.w	r1, [r4, #59]	; 0x3b
 80038b4:	0089      	lsls	r1, r1, #2
 80038b6:	f001 011c 	and.w	r1, r1, #28
 80038ba:	430a      	orrs	r2, r1
 80038bc:	b2d2      	uxtb	r2, r2
 80038be:	f88d 200f 	strb.w	r2, [sp, #15]
			reg_array[count] = reg_addr; /* Append configuration */
 80038c2:	2175      	movs	r1, #117	; 0x75
 80038c4:	f88d 1008 	strb.w	r1, [sp, #8]
			data_array[count] = data;
 80038c8:	f88d 2000 	strb.w	r2, [sp]
			count++;
 80038cc:	2501      	movs	r5, #1
 80038ce:	e7c1      	b.n	8003854 <bme680_set_sensor_settings+0x3e>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80038d0:	4623      	mov	r3, r4
 80038d2:	2201      	movs	r2, #1
 80038d4:	f10d 010f 	add.w	r1, sp, #15
 80038d8:	2075      	movs	r0, #117	; 0x75
 80038da:	f7ff fd16 	bl	800330a <bme680_get_regs>
 80038de:	4603      	mov	r3, r0
 80038e0:	e7e1      	b.n	80038a6 <bme680_set_sensor_settings+0x90>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
 80038e2:	4623      	mov	r3, r4
 80038e4:	2208      	movs	r2, #8
 80038e6:	2100      	movs	r1, #0
 80038e8:	f104 003d 	add.w	r0, r4, #61	; 0x3d
 80038ec:	f7ff fc7e 	bl	80031ec <boundary_check>
			if (rslt == BME680_OK)
 80038f0:	4603      	mov	r3, r0
 80038f2:	b1b8      	cbz	r0, 8003924 <bme680_set_sensor_settings+0x10e>
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 80038f4:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80038f8:	f022 0208 	bic.w	r2, r2, #8
 80038fc:	b252      	sxtb	r2, r2
 80038fe:	f994 103d 	ldrsb.w	r1, [r4, #61]	; 0x3d
 8003902:	f001 0108 	and.w	r1, r1, #8
 8003906:	430a      	orrs	r2, r1
 8003908:	b2d2      	uxtb	r2, r2
 800390a:	f88d 200f 	strb.w	r2, [sp, #15]
			reg_array[count] = reg_addr; /* Append configuration */
 800390e:	f105 0110 	add.w	r1, r5, #16
 8003912:	4469      	add	r1, sp
 8003914:	2070      	movs	r0, #112	; 0x70
 8003916:	f801 0c08 	strb.w	r0, [r1, #-8]
			data_array[count] = data;
 800391a:	f801 2c10 	strb.w	r2, [r1, #-16]
			count++;
 800391e:	3501      	adds	r5, #1
 8003920:	b2ed      	uxtb	r5, r5
 8003922:	e79a      	b.n	800385a <bme680_set_sensor_settings+0x44>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8003924:	4623      	mov	r3, r4
 8003926:	2201      	movs	r2, #1
 8003928:	f10d 010f 	add.w	r1, sp, #15
 800392c:	2070      	movs	r0, #112	; 0x70
 800392e:	f7ff fcec 	bl	800330a <bme680_get_regs>
 8003932:	4603      	mov	r3, r0
 8003934:	e7de      	b.n	80038f4 <bme680_set_sensor_settings+0xde>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
 8003936:	4623      	mov	r3, r4
 8003938:	2205      	movs	r2, #5
 800393a:	2100      	movs	r1, #0
 800393c:	f104 0039 	add.w	r0, r4, #57	; 0x39
 8003940:	f7ff fc54 	bl	80031ec <boundary_check>
			if (rslt == BME680_OK)
 8003944:	4603      	mov	r3, r0
 8003946:	b348      	cbz	r0, 800399c <bme680_set_sensor_settings+0x186>
			if (desired_settings & BME680_OST_SEL)
 8003948:	f016 0f01 	tst.w	r6, #1
 800394c:	d009      	beq.n	8003962 <bme680_set_sensor_settings+0x14c>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
 800394e:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8003952:	f002 021f 	and.w	r2, r2, #31
 8003956:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 800395a:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
 800395e:	f88d 200f 	strb.w	r2, [sp, #15]
			if (desired_settings & BME680_OSP_SEL)
 8003962:	f016 0f02 	tst.w	r6, #2
 8003966:	d00c      	beq.n	8003982 <bme680_set_sensor_settings+0x16c>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
 8003968:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800396c:	f022 021c 	bic.w	r2, r2, #28
 8003970:	b252      	sxtb	r2, r2
 8003972:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
 8003976:	0089      	lsls	r1, r1, #2
 8003978:	f001 011c 	and.w	r1, r1, #28
 800397c:	430a      	orrs	r2, r1
 800397e:	f88d 200f 	strb.w	r2, [sp, #15]
			reg_array[count] = reg_addr;
 8003982:	f105 0210 	add.w	r2, r5, #16
 8003986:	446a      	add	r2, sp
 8003988:	2174      	movs	r1, #116	; 0x74
 800398a:	f802 1c08 	strb.w	r1, [r2, #-8]
			data_array[count] = data;
 800398e:	f89d 100f 	ldrb.w	r1, [sp, #15]
 8003992:	f802 1c10 	strb.w	r1, [r2, #-16]
			count++;
 8003996:	3501      	adds	r5, #1
 8003998:	b2ed      	uxtb	r5, r5
 800399a:	e761      	b.n	8003860 <bme680_set_sensor_settings+0x4a>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 800399c:	4623      	mov	r3, r4
 800399e:	2201      	movs	r2, #1
 80039a0:	f10d 010f 	add.w	r1, sp, #15
 80039a4:	2074      	movs	r0, #116	; 0x74
 80039a6:	f7ff fcb0 	bl	800330a <bme680_get_regs>
 80039aa:	4603      	mov	r3, r0
 80039ac:	e7cc      	b.n	8003948 <bme680_set_sensor_settings+0x132>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
 80039ae:	4623      	mov	r3, r4
 80039b0:	2205      	movs	r2, #5
 80039b2:	2100      	movs	r1, #0
 80039b4:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80039b8:	f7ff fc18 	bl	80031ec <boundary_check>
			if (rslt == BME680_OK)
 80039bc:	4603      	mov	r3, r0
 80039be:	b1b8      	cbz	r0, 80039f0 <bme680_set_sensor_settings+0x1da>
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 80039c0:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80039c4:	f022 0207 	bic.w	r2, r2, #7
 80039c8:	b252      	sxtb	r2, r2
 80039ca:	f994 1038 	ldrsb.w	r1, [r4, #56]	; 0x38
 80039ce:	f001 0107 	and.w	r1, r1, #7
 80039d2:	430a      	orrs	r2, r1
 80039d4:	b2d2      	uxtb	r2, r2
 80039d6:	f88d 200f 	strb.w	r2, [sp, #15]
			reg_array[count] = reg_addr; /* Append configuration */
 80039da:	f105 0110 	add.w	r1, r5, #16
 80039de:	4469      	add	r1, sp
 80039e0:	2072      	movs	r0, #114	; 0x72
 80039e2:	f801 0c08 	strb.w	r0, [r1, #-8]
			data_array[count] = data;
 80039e6:	f801 2c10 	strb.w	r2, [r1, #-16]
			count++;
 80039ea:	3501      	adds	r5, #1
 80039ec:	b2ed      	uxtb	r5, r5
 80039ee:	e73b      	b.n	8003868 <bme680_set_sensor_settings+0x52>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80039f0:	4623      	mov	r3, r4
 80039f2:	2201      	movs	r2, #1
 80039f4:	f10d 010f 	add.w	r1, sp, #15
 80039f8:	2072      	movs	r0, #114	; 0x72
 80039fa:	f7ff fc86 	bl	800330a <bme680_get_regs>
 80039fe:	4603      	mov	r3, r0
 8003a00:	e7de      	b.n	80039c0 <bme680_set_sensor_settings+0x1aa>
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
 8003a02:	4623      	mov	r3, r4
 8003a04:	2201      	movs	r2, #1
 8003a06:	2100      	movs	r1, #0
 8003a08:	f104 003e 	add.w	r0, r4, #62	; 0x3e
 8003a0c:	f7ff fbee 	bl	80031ec <boundary_check>
			if (rslt == BME680_OK) {
 8003a10:	4603      	mov	r3, r0
 8003a12:	b360      	cbz	r0, 8003a6e <bme680_set_sensor_settings+0x258>
			if (rslt == BME680_OK)
 8003a14:	b3a3      	cbz	r3, 8003a80 <bme680_set_sensor_settings+0x26a>
			if (desired_settings & BME680_RUN_GAS_SEL)
 8003a16:	f016 0f40 	tst.w	r6, #64	; 0x40
 8003a1a:	d00c      	beq.n	8003a36 <bme680_set_sensor_settings+0x220>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
 8003a1c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8003a20:	f022 0210 	bic.w	r2, r2, #16
 8003a24:	b252      	sxtb	r2, r2
 8003a26:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8003a2a:	0109      	lsls	r1, r1, #4
 8003a2c:	f001 0110 	and.w	r1, r1, #16
 8003a30:	430a      	orrs	r2, r1
 8003a32:	f88d 200f 	strb.w	r2, [sp, #15]
			if (desired_settings & BME680_NBCONV_SEL)
 8003a36:	f016 0f80 	tst.w	r6, #128	; 0x80
 8003a3a:	d00b      	beq.n	8003a54 <bme680_set_sensor_settings+0x23e>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
 8003a3c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8003a40:	f022 020f 	bic.w	r2, r2, #15
 8003a44:	b252      	sxtb	r2, r2
 8003a46:	f994 103c 	ldrsb.w	r1, [r4, #60]	; 0x3c
 8003a4a:	f001 010f 	and.w	r1, r1, #15
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	f88d 200f 	strb.w	r2, [sp, #15]
			reg_array[count] = reg_addr; /* Append configuration */
 8003a54:	f105 0210 	add.w	r2, r5, #16
 8003a58:	446a      	add	r2, sp
 8003a5a:	2171      	movs	r1, #113	; 0x71
 8003a5c:	f802 1c08 	strb.w	r1, [r2, #-8]
			data_array[count] = data;
 8003a60:	f89d 100f 	ldrb.w	r1, [sp, #15]
 8003a64:	f802 1c10 	strb.w	r1, [r2, #-16]
			count++;
 8003a68:	3501      	adds	r5, #1
 8003a6a:	b2ed      	uxtb	r5, r5
 8003a6c:	e700      	b.n	8003870 <bme680_set_sensor_settings+0x5a>
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
 8003a6e:	4623      	mov	r3, r4
 8003a70:	220a      	movs	r2, #10
 8003a72:	2100      	movs	r1, #0
 8003a74:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8003a78:	f7ff fbb8 	bl	80031ec <boundary_check>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	e7c9      	b.n	8003a14 <bme680_set_sensor_settings+0x1fe>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8003a80:	4623      	mov	r3, r4
 8003a82:	2201      	movs	r2, #1
 8003a84:	f10d 010f 	add.w	r1, sp, #15
 8003a88:	2071      	movs	r0, #113	; 0x71
 8003a8a:	f7ff fc3e 	bl	800330a <bme680_get_regs>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	e7c1      	b.n	8003a16 <bme680_set_sensor_settings+0x200>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
 8003a92:	4623      	mov	r3, r4
 8003a94:	462a      	mov	r2, r5
 8003a96:	4669      	mov	r1, sp
 8003a98:	a802      	add	r0, sp, #8
 8003a9a:	f7ff fda2 	bl	80035e2 <bme680_set_regs>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	e6e9      	b.n	8003876 <bme680_set_sensor_settings+0x60>
	...

08003aa4 <bme680_get_profile_dur>:
{
 8003aa4:	b082      	sub	sp, #8
 8003aa6:	4684      	mov	ip, r0
 8003aa8:	460a      	mov	r2, r1
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 8003aaa:	4b19      	ldr	r3, [pc, #100]	; (8003b10 <bme680_get_profile_dur+0x6c>)
 8003aac:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003ab0:	9000      	str	r0, [sp, #0]
 8003ab2:	f8ad 1004 	strh.w	r1, [sp, #4]
	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 8003ab6:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
 8003aba:	3308      	adds	r3, #8
 8003abc:	446b      	add	r3, sp
 8003abe:	f813 3c08 	ldrb.w	r3, [r3, #-8]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 8003ac2:	f892 003a 	ldrb.w	r0, [r2, #58]	; 0x3a
 8003ac6:	f100 0108 	add.w	r1, r0, #8
 8003aca:	eb0d 0001 	add.w	r0, sp, r1
 8003ace:	f810 1c08 	ldrb.w	r1, [r0, #-8]
 8003ad2:	4419      	add	r1, r3
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 8003ad4:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8003ad8:	3308      	adds	r3, #8
 8003ada:	446b      	add	r3, sp
 8003adc:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8003ae0:	4419      	add	r1, r3
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 8003ae2:	f240 70ab 	movw	r0, #1963	; 0x7ab
 8003ae6:	f241 23b9 	movw	r3, #4793	; 0x12b9
 8003aea:	fb00 3301 	mla	r3, r0, r1, r3
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 8003aee:	4909      	ldr	r1, [pc, #36]	; (8003b14 <bme680_get_profile_dur+0x70>)
 8003af0:	fba1 1303 	umull	r1, r3, r1, r3
 8003af4:	099b      	lsrs	r3, r3, #6
	*duration = (uint16_t) tph_dur;
 8003af6:	3301      	adds	r3, #1
 8003af8:	f8ac 3000 	strh.w	r3, [ip]
	if (dev->gas_sett.run_gas) {
 8003afc:	f892 103e 	ldrb.w	r1, [r2, #62]	; 0x3e
 8003b00:	b121      	cbz	r1, 8003b0c <bme680_get_profile_dur+0x68>
		*duration += dev->gas_sett.heatr_dur;
 8003b02:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 8003b06:	4413      	add	r3, r2
 8003b08:	f8ac 3000 	strh.w	r3, [ip]
}
 8003b0c:	b002      	add	sp, #8
 8003b0e:	4770      	bx	lr
 8003b10:	08014140 	.word	0x08014140
 8003b14:	10624dd3 	.word	0x10624dd3

08003b18 <bme680_get_sensor_data>:
{
 8003b18:	b538      	push	{r3, r4, r5, lr}
 8003b1a:	4605      	mov	r5, r0
 8003b1c:	460c      	mov	r4, r1
	rslt = null_ptr_check(dev);
 8003b1e:	4608      	mov	r0, r1
 8003b20:	f7ff fb84 	bl	800322c <null_ptr_check>
	if (rslt == BME680_OK) {
 8003b24:	b100      	cbz	r0, 8003b28 <bme680_get_sensor_data+0x10>
}
 8003b26:	bd38      	pop	{r3, r4, r5, pc}
		rslt = read_field_data(data, dev);
 8003b28:	4621      	mov	r1, r4
 8003b2a:	4628      	mov	r0, r5
 8003b2c:	f7ff fcdc 	bl	80034e8 <read_field_data>
		if (rslt == BME680_OK) {
 8003b30:	2800      	cmp	r0, #0
 8003b32:	d1f8      	bne.n	8003b26 <bme680_get_sensor_data+0xe>
			if (data->status & BME680_NEW_DATA_MSK)
 8003b34:	f995 3000 	ldrsb.w	r3, [r5]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	db03      	blt.n	8003b44 <bme680_get_sensor_data+0x2c>
				dev->new_fields = 0;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b42:	e7f0      	b.n	8003b26 <bme680_get_sensor_data+0xe>
				dev->new_fields = 1;
 8003b44:	2301      	movs	r3, #1
 8003b46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b4a:	e7ec      	b.n	8003b26 <bme680_get_sensor_data+0xe>

08003b4c <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8003b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b50:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8003b52:	2400      	movs	r4, #0
 8003b54:	9401      	str	r4, [sp, #4]
 8003b56:	9402      	str	r4, [sp, #8]
 8003b58:	9403      	str	r4, [sp, #12]
 8003b5a:	9404      	str	r4, [sp, #16]
 8003b5c:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003b5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b64:	f042 0204 	orr.w	r2, r2, #4
 8003b68:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8003b72:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8003b74:	2710      	movs	r7, #16
 8003b76:	9701      	str	r7, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8003b80:	4d12      	ldr	r5, [pc, #72]	; (8003bcc <BSP_RADIO_Init+0x80>)
 8003b82:	a901      	add	r1, sp, #4
 8003b84:	4628      	mov	r0, r5
 8003b86:	f001 fa21 	bl	8004fcc <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8003b8a:	f04f 0820 	mov.w	r8, #32
 8003b8e:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8003b92:	a901      	add	r1, sp, #4
 8003b94:	4628      	mov	r0, r5
 8003b96:	f001 fa19 	bl	8004fcc <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8003b9a:	2608      	movs	r6, #8
 8003b9c:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8003b9e:	a901      	add	r1, sp, #4
 8003ba0:	4628      	mov	r0, r5
 8003ba2:	f001 fa13 	bl	8004fcc <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003ba6:	4622      	mov	r2, r4
 8003ba8:	4641      	mov	r1, r8
 8003baa:	4628      	mov	r0, r5
 8003bac:	f001 fb5e 	bl	800526c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8003bb0:	4622      	mov	r2, r4
 8003bb2:	4639      	mov	r1, r7
 8003bb4:	4628      	mov	r0, r5
 8003bb6:	f001 fb59 	bl	800526c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8003bba:	4622      	mov	r2, r4
 8003bbc:	4631      	mov	r1, r6
 8003bbe:	4628      	mov	r0, r5
 8003bc0:	f001 fb54 	bl	800526c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 8003bc4:	4620      	mov	r0, r4
 8003bc6:	b006      	add	sp, #24
 8003bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bcc:	48000800 	.word	0x48000800

08003bd0 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8003bd0:	b510      	push	{r4, lr}
  switch (Config)
 8003bd2:	2803      	cmp	r0, #3
 8003bd4:	d813      	bhi.n	8003bfe <BSP_RADIO_ConfigRFSwitch+0x2e>
 8003bd6:	e8df f000 	tbb	[pc, r0]
 8003bda:	1402      	.short	0x1402
 8003bdc:	3625      	.short	0x3625
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8003bde:	4c22      	ldr	r4, [pc, #136]	; (8003c68 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	2108      	movs	r1, #8
 8003be4:	4620      	mov	r0, r4
 8003be6:	f001 fb41 	bl	800526c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8003bea:	2200      	movs	r2, #0
 8003bec:	2110      	movs	r1, #16
 8003bee:	4620      	mov	r0, r4
 8003bf0:	f001 fb3c 	bl	800526c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	2120      	movs	r1, #32
 8003bf8:	4620      	mov	r0, r4
 8003bfa:	f001 fb37 	bl	800526c <HAL_GPIO_WritePin>
    default:
      break;    
  }  

  return BSP_ERROR_NONE;
}
 8003bfe:	2000      	movs	r0, #0
 8003c00:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8003c02:	4c19      	ldr	r4, [pc, #100]	; (8003c68 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8003c04:	2201      	movs	r2, #1
 8003c06:	2108      	movs	r1, #8
 8003c08:	4620      	mov	r0, r4
 8003c0a:	f001 fb2f 	bl	800526c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003c0e:	2201      	movs	r2, #1
 8003c10:	2110      	movs	r1, #16
 8003c12:	4620      	mov	r0, r4
 8003c14:	f001 fb2a 	bl	800526c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003c18:	2200      	movs	r2, #0
 8003c1a:	2120      	movs	r1, #32
 8003c1c:	4620      	mov	r0, r4
 8003c1e:	f001 fb25 	bl	800526c <HAL_GPIO_WritePin>
      break;
 8003c22:	e7ec      	b.n	8003bfe <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8003c24:	4c10      	ldr	r4, [pc, #64]	; (8003c68 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8003c26:	2201      	movs	r2, #1
 8003c28:	2108      	movs	r1, #8
 8003c2a:	4620      	mov	r0, r4
 8003c2c:	f001 fb1e 	bl	800526c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003c30:	2201      	movs	r2, #1
 8003c32:	2110      	movs	r1, #16
 8003c34:	4620      	mov	r0, r4
 8003c36:	f001 fb19 	bl	800526c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	2120      	movs	r1, #32
 8003c3e:	4620      	mov	r0, r4
 8003c40:	f001 fb14 	bl	800526c <HAL_GPIO_WritePin>
      break;
 8003c44:	e7db      	b.n	8003bfe <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8003c46:	4c08      	ldr	r4, [pc, #32]	; (8003c68 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8003c48:	2201      	movs	r2, #1
 8003c4a:	2108      	movs	r1, #8
 8003c4c:	4620      	mov	r0, r4
 8003c4e:	f001 fb0d 	bl	800526c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8003c52:	2200      	movs	r2, #0
 8003c54:	2110      	movs	r1, #16
 8003c56:	4620      	mov	r0, r4
 8003c58:	f001 fb08 	bl	800526c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	2120      	movs	r1, #32
 8003c60:	4620      	mov	r0, r4
 8003c62:	f001 fb03 	bl	800526c <HAL_GPIO_WritePin>
      break;
 8003c66:	e7ca      	b.n	8003bfe <BSP_RADIO_ConfigRFSwitch+0x2e>
 8003c68:	48000800 	.word	0x48000800

08003c6c <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
  return RADIO_CONF_RFO_LP_HP;
}
 8003c6c:	2000      	movs	r0, #0
 8003c6e:	4770      	bx	lr

08003c70 <BSP_RADIO_IsTCXO>:
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
  return RADIO_CONF_TCXO_SUPPORTED;
}
 8003c70:	2001      	movs	r0, #1
 8003c72:	4770      	bx	lr

08003c74 <BSP_RADIO_IsDCDC>:
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
  return RADIO_CONF_DCDC_SUPPORTED;
}
 8003c74:	2001      	movs	r0, #1
 8003c76:	4770      	bx	lr

08003c78 <BSP_RADIO_GetRFOMaxPowerConfig>:
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8003c78:	b908      	cbnz	r0, 8003c7e <BSP_RADIO_GetRFOMaxPowerConfig+0x6>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8003c7a:	200f      	movs	r0, #15
 8003c7c:	4770      	bx	lr
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8003c7e:	2016      	movs	r0, #22
  }

  return ret;
}
 8003c80:	4770      	bx	lr

08003c82 <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8003c82:	4770      	bx	lr

08003c84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c84:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c86:	2003      	movs	r0, #3
 8003c88:	f000 fd2e 	bl	80046e8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003c8c:	f002 f864 	bl	8005d58 <HAL_RCC_GetHCLKFreq>
 8003c90:	4b06      	ldr	r3, [pc, #24]	; (8003cac <HAL_Init+0x28>)
 8003c92:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c94:	200f      	movs	r0, #15
 8003c96:	f7fd ff15 	bl	8001ac4 <HAL_InitTick>
 8003c9a:	b110      	cbz	r0, 8003ca2 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8003c9c:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8003c9e:	4620      	mov	r0, r4
 8003ca0:	bd10      	pop	{r4, pc}
 8003ca2:	4604      	mov	r4, r0
    HAL_MspInit();
 8003ca4:	f7fd fdd2 	bl	800184c <HAL_MspInit>
 8003ca8:	e7f9      	b.n	8003c9e <HAL_Init+0x1a>
 8003caa:	bf00      	nop
 8003cac:	20000070 	.word	0x20000070

08003cb0 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003cb0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8003cb4:	6913      	ldr	r3, [r2, #16]
 8003cb6:	f023 0302 	bic.w	r3, r3, #2
 8003cba:	6113      	str	r3, [r2, #16]
}
 8003cbc:	4770      	bx	lr

08003cbe <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003cbe:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8003cc2:	6913      	ldr	r3, [r2, #16]
 8003cc4:	f043 0302 	orr.w	r3, r3, #2
 8003cc8:	6113      	str	r3, [r2, #16]
}
 8003cca:	4770      	bx	lr

08003ccc <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return (READ_REG(*((uint32_t *)UID_BASE)));
}
 8003ccc:	4b01      	ldr	r3, [pc, #4]	; (8003cd4 <HAL_GetUIDw0+0x8>)
 8003cce:	f8d3 0590 	ldr.w	r0, [r3, #1424]	; 0x590
 8003cd2:	4770      	bx	lr
 8003cd4:	1fff7000 	.word	0x1fff7000

08003cd8 <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 8003cd8:	4b01      	ldr	r3, [pc, #4]	; (8003ce0 <HAL_GetUIDw1+0x8>)
 8003cda:	f8d3 0594 	ldr.w	r0, [r3, #1428]	; 0x594
 8003cde:	4770      	bx	lr
 8003ce0:	1fff7000 	.word	0x1fff7000

08003ce4 <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 8003ce4:	4b01      	ldr	r3, [pc, #4]	; (8003cec <HAL_GetUIDw2+0x8>)
 8003ce6:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8003cea:	4770      	bx	lr
 8003cec:	1fff7000 	.word	0x1fff7000

08003cf0 <HAL_DBGMCU_EnableDBGSleepMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003cf0:	4a02      	ldr	r2, [pc, #8]	; (8003cfc <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 8003cf2:	6853      	ldr	r3, [r2, #4]
 8003cf4:	f043 0301 	orr.w	r3, r3, #1
 8003cf8:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  LL_DBGMCU_EnableDBGSleepMode();
}
 8003cfa:	4770      	bx	lr
 8003cfc:	e0042000 	.word	0xe0042000

08003d00 <HAL_DBGMCU_EnableDBGStopMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003d00:	4a02      	ldr	r2, [pc, #8]	; (8003d0c <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 8003d02:	6853      	ldr	r3, [r2, #4]
 8003d04:	f043 0302 	orr.w	r3, r3, #2
 8003d08:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  LL_DBGMCU_EnableDBGStopMode();
}
 8003d0a:	4770      	bx	lr
 8003d0c:	e0042000 	.word	0xe0042000

08003d10 <HAL_DBGMCU_EnableDBGStandbyMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8003d10:	4a02      	ldr	r2, [pc, #8]	; (8003d1c <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 8003d12:	6853      	ldr	r3, [r2, #4]
 8003d14:	f043 0304 	orr.w	r3, r3, #4
 8003d18:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  LL_DBGMCU_EnableDBGStandbyMode();
}
 8003d1a:	4770      	bx	lr
 8003d1c:	e0042000 	.word	0xe0042000

08003d20 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003d20:	b570      	push	{r4, r5, r6, lr}
 8003d22:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003d24:	2300      	movs	r3, #0
 8003d26:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8003d28:	2800      	cmp	r0, #0
 8003d2a:	f000 811b 	beq.w	8003f64 <HAL_ADC_Init+0x244>
 8003d2e:	4604      	mov	r4, r0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003d30:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003d32:	b1bb      	cbz	r3, 8003d64 <HAL_ADC_Init+0x44>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d34:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003d36:	6893      	ldr	r3, [r2, #8]
 8003d38:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003d3c:	d11f      	bne.n	8003d7e <HAL_ADC_Init+0x5e>
  MODIFY_REG(ADCx->CR,
 8003d3e:	6893      	ldr	r3, [r2, #8]
 8003d40:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003d44:	f023 0317 	bic.w	r3, r3, #23
 8003d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d4c:	6093      	str	r3, [r2, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d4e:	4b86      	ldr	r3, [pc, #536]	; (8003f68 <HAL_ADC_Init+0x248>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	099b      	lsrs	r3, r3, #6
 8003d54:	4a85      	ldr	r2, [pc, #532]	; (8003f6c <HAL_ADC_Init+0x24c>)
 8003d56:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5a:	099b      	lsrs	r3, r3, #6
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003d62:	e009      	b.n	8003d78 <HAL_ADC_Init+0x58>
    HAL_ADC_MspInit(hadc);
 8003d64:	f7fd f972 	bl	800104c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003d68:	2300      	movs	r3, #0
 8003d6a:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8003d6c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8003d70:	e7e0      	b.n	8003d34 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 8003d72:	9b01      	ldr	r3, [sp, #4]
 8003d74:	3b01      	subs	r3, #1
 8003d76:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003d78:	9b01      	ldr	r3, [sp, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1f9      	bne.n	8003d72 <HAL_ADC_Init+0x52>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d7e:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003d80:	6893      	ldr	r3, [r2, #8]
 8003d82:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003d86:	f040 809c 	bne.w	8003ec2 <HAL_ADC_Init+0x1a2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d8c:	f043 0310 	orr.w	r3, r3, #16
 8003d90:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d92:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003d94:	f043 0301 	orr.w	r3, r3, #1
 8003d98:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003d9a:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d9c:	6893      	ldr	r3, [r2, #8]
 8003d9e:	f013 0304 	ands.w	r3, r3, #4
 8003da2:	d000      	beq.n	8003da6 <HAL_ADC_Init+0x86>
 8003da4:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003da6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003da8:	f011 0f10 	tst.w	r1, #16
 8003dac:	f040 80d3 	bne.w	8003f56 <HAL_ADC_Init+0x236>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f040 80d0 	bne.w	8003f56 <HAL_ADC_Init+0x236>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003db6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003db8:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8003dbc:	f041 0102 	orr.w	r1, r1, #2
 8003dc0:	65a1      	str	r1, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003dc2:	6891      	ldr	r1, [r2, #8]
 8003dc4:	f011 0f01 	tst.w	r1, #1
 8003dc8:	d151      	bne.n	8003e6e <HAL_ADC_Init+0x14e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003dca:	68a1      	ldr	r1, [r4, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003dcc:	7e25      	ldrb	r5, [r4, #24]
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003dce:	ea41 3185 	orr.w	r1, r1, r5, lsl #14
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003dd2:	7e65      	ldrb	r5, [r4, #25]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003dd4:	ea41 31c5 	orr.w	r1, r1, r5, lsl #15
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003dd8:	7ea6      	ldrb	r6, [r4, #26]
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003dda:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003dde:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8003de0:	b10d      	cbz	r5, 8003de6 <HAL_ADC_Init+0xc6>
 8003de2:	f44f 5580 	mov.w	r5, #4096	; 0x1000
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003de6:	4329      	orrs	r1, r5
                   hadc->Init.DataAlign                                           |
 8003de8:	68e5      	ldr	r5, [r4, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003dea:	4329      	orrs	r1, r5
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003dec:	6925      	ldr	r5, [r4, #16]
 8003dee:	2d00      	cmp	r5, #0
 8003df0:	db69      	blt.n	8003ec6 <HAL_ADC_Init+0x1a6>
 8003df2:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8003df6:	4329      	orrs	r1, r5
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003df8:	f894 502c 	ldrb.w	r5, [r4, #44]	; 0x2c
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003dfc:	ea41 0145 	orr.w	r1, r1, r5, lsl #1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003e00:	f894 5020 	ldrb.w	r5, [r4, #32]
 8003e04:	2d01      	cmp	r5, #1
 8003e06:	d061      	beq.n	8003ecc <HAL_ADC_Init+0x1ac>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e08:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003e0a:	b125      	cbz	r5, 8003e16 <HAL_ADC_Init+0xf6>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003e0c:	f405 75e0 	and.w	r5, r5, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8003e10:	6aa6      	ldr	r6, [r4, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003e12:	4335      	orrs	r5, r6
 8003e14:	4329      	orrs	r1, r5
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003e16:	68d5      	ldr	r5, [r2, #12]
 8003e18:	f425 3cfe 	bic.w	ip, r5, #130048	; 0x1fc00
 8003e1c:	f42c 7cff 	bic.w	ip, ip, #510	; 0x1fe
 8003e20:	ea4c 0101 	orr.w	r1, ip, r1
 8003e24:	60d1      	str	r1, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003e26:	6862      	ldr	r2, [r4, #4]
 8003e28:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8003e2c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003e2e:	ea42 0501 	orr.w	r5, r2, r1
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003e32:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 8003e36:	2901      	cmp	r1, #1
 8003e38:	d055      	beq.n	8003ee6 <HAL_ADC_Init+0x1c6>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003e3a:	6822      	ldr	r2, [r4, #0]
 8003e3c:	6916      	ldr	r6, [r2, #16]
 8003e3e:	494c      	ldr	r1, [pc, #304]	; (8003f70 <HAL_ADC_Init+0x250>)
 8003e40:	4031      	ands	r1, r6
 8003e42:	4329      	orrs	r1, r5
 8003e44:	6111      	str	r1, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003e46:	6862      	ldr	r2, [r4, #4]
 8003e48:	f1b2 4f40 	cmp.w	r2, #3221225472	; 0xc0000000
 8003e4c:	d00f      	beq.n	8003e6e <HAL_ADC_Init+0x14e>
 8003e4e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003e52:	d00c      	beq.n	8003e6e <HAL_ADC_Init+0x14e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003e54:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8003e58:	d009      	beq.n	8003e6e <HAL_ADC_Init+0x14e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8003e5a:	4d46      	ldr	r5, [pc, #280]	; (8003f74 <HAL_ADC_Init+0x254>)
 8003e5c:	f8d5 1708 	ldr.w	r1, [r5, #1800]	; 0x708
 8003e60:	f421 1170 	bic.w	r1, r1, #3932160	; 0x3c0000
 8003e64:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	f8c5 2708 	str.w	r2, [r5, #1800]	; 0x708
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003e6e:	6825      	ldr	r5, [r4, #0]
 8003e70:	6b62      	ldr	r2, [r4, #52]	; 0x34
  MODIFY_REG(ADCx->SMPR,
 8003e72:	6969      	ldr	r1, [r5, #20]
 8003e74:	f021 0107 	bic.w	r1, r1, #7
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	616a      	str	r2, [r5, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003e7c:	6821      	ldr	r1, [r4, #0]
 8003e7e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8003e80:	694a      	ldr	r2, [r1, #20]
 8003e82:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003e86:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8003e8a:	614a      	str	r2, [r1, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003e8c:	6922      	ldr	r2, [r4, #16]
 8003e8e:	2a00      	cmp	r2, #0
 8003e90:	d133      	bne.n	8003efa <HAL_ADC_Init+0x1da>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003e92:	6822      	ldr	r2, [r4, #0]
 8003e94:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003e96:	f063 030f 	orn	r3, r3, #15
 8003e9a:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003e9c:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	f003 0307 	and.w	r3, r3, #7
      == hadc->Init.SamplingTimeCommon1)
 8003ea4:	6b62      	ldr	r2, [r4, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d04c      	beq.n	8003f44 <HAL_ADC_Init+0x224>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003eaa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003eac:	f023 0312 	bic.w	r3, r3, #18
 8003eb0:	f043 0310 	orr.w	r3, r3, #16
 8003eb4:	65a3      	str	r3, [r4, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003eb6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003eb8:	f043 0301 	orr.w	r3, r3, #1
 8003ebc:	65e3      	str	r3, [r4, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003ebe:	2001      	movs	r0, #1
 8003ec0:	e04e      	b.n	8003f60 <HAL_ADC_Init+0x240>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ec2:	2000      	movs	r0, #0
 8003ec4:	e76a      	b.n	8003d9c <HAL_ADC_Init+0x7c>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003ec6:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 8003eca:	e794      	b.n	8003df6 <HAL_ADC_Init+0xd6>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003ecc:	b916      	cbnz	r6, 8003ed4 <HAL_ADC_Init+0x1b4>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003ece:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8003ed2:	e799      	b.n	8003e08 <HAL_ADC_Init+0xe8>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ed4:	6da5      	ldr	r5, [r4, #88]	; 0x58
 8003ed6:	f045 0520 	orr.w	r5, r5, #32
 8003eda:	65a5      	str	r5, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003edc:	6de5      	ldr	r5, [r4, #92]	; 0x5c
 8003ede:	f045 0501 	orr.w	r5, r5, #1
 8003ee2:	65e5      	str	r5, [r4, #92]	; 0x5c
 8003ee4:	e790      	b.n	8003e08 <HAL_ADC_Init+0xe8>
                     hadc->Init.Oversampling.Ratio         |
 8003ee6:	6c21      	ldr	r1, [r4, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003ee8:	430a      	orrs	r2, r1
                     hadc->Init.Oversampling.RightBitShift |
 8003eea:	6c61      	ldr	r1, [r4, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003eec:	430a      	orrs	r2, r1
                     hadc->Init.Oversampling.TriggeredMode
 8003eee:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003ef0:	430a      	orrs	r2, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003ef2:	432a      	orrs	r2, r5
 8003ef4:	f042 0501 	orr.w	r5, r2, #1
 8003ef8:	e79f      	b.n	8003e3a <HAL_ADC_Init+0x11a>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003efa:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8003efe:	d1cd      	bne.n	8003e9c <HAL_ADC_Init+0x17c>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003f00:	2b07      	cmp	r3, #7
 8003f02:	d808      	bhi.n	8003f16 <HAL_ADC_Init+0x1f6>
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8003f04:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003f06:	0099      	lsls	r1, r3, #2
 8003f08:	40ca      	lsrs	r2, r1
 8003f0a:	f002 020f 	and.w	r2, r2, #15
 8003f0e:	2a0f      	cmp	r2, #15
 8003f10:	d001      	beq.n	8003f16 <HAL_ADC_Init+0x1f6>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003f12:	3301      	adds	r3, #1
 8003f14:	e7f4      	b.n	8003f00 <HAL_ADC_Init+0x1e0>
      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d00e      	beq.n	8003f38 <HAL_ADC_Init+0x218>
        MODIFY_REG(hadc->Instance->CHSELR,
 8003f1a:	6821      	ldr	r1, [r4, #0]
 8003f1c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8003f1e:	69e3      	ldr	r3, [r4, #28]
 8003f20:	3b01      	subs	r3, #1
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	f003 031c 	and.w	r3, r3, #28
 8003f28:	f06f 020f 	mvn.w	r2, #15
 8003f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f30:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003f32:	4313      	orrs	r3, r2
 8003f34:	628b      	str	r3, [r1, #40]	; 0x28
 8003f36:	e7b1      	b.n	8003e9c <HAL_ADC_Init+0x17c>
        SET_BIT(hadc->Instance->CHSELR,
 8003f38:	6822      	ldr	r2, [r4, #0]
 8003f3a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003f3c:	f063 030f 	orn	r3, r3, #15
 8003f40:	6293      	str	r3, [r2, #40]	; 0x28
 8003f42:	e7ab      	b.n	8003e9c <HAL_ADC_Init+0x17c>
      ADC_CLEAR_ERRORCODE(hadc);
 8003f44:	2300      	movs	r3, #0
 8003f46:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8003f48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f4a:	f023 0303 	bic.w	r3, r3, #3
 8003f4e:	f043 0301 	orr.w	r3, r3, #1
 8003f52:	65a3      	str	r3, [r4, #88]	; 0x58
 8003f54:	e004      	b.n	8003f60 <HAL_ADC_Init+0x240>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f58:	f043 0310 	orr.w	r3, r3, #16
 8003f5c:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003f5e:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 8003f60:	b002      	add	sp, #8
 8003f62:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003f64:	2001      	movs	r0, #1
 8003f66:	e7fb      	b.n	8003f60 <HAL_ADC_Init+0x240>
 8003f68:	20000070 	.word	0x20000070
 8003f6c:	053e2d63 	.word	0x053e2d63
 8003f70:	1ffffc02 	.word	0x1ffffc02
 8003f74:	40012000 	.word	0x40012000

08003f78 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f7a:	4604      	mov	r4, r0
 8003f7c:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003f7e:	6946      	ldr	r6, [r0, #20]
 8003f80:	2e08      	cmp	r6, #8
 8003f82:	d005      	beq.n	8003f90 <HAL_ADC_PollForConversion+0x18>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003f84:	6803      	ldr	r3, [r0, #0]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	f013 0f01 	tst.w	r3, #1
 8003f8c:	d11e      	bne.n	8003fcc <HAL_ADC_PollForConversion+0x54>

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003f8e:	2604      	movs	r6, #4
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003f90:	f7fd fd9a 	bl	8001ac8 <HAL_GetTick>
 8003f94:	4607      	mov	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003f96:	6823      	ldr	r3, [r4, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	4232      	tst	r2, r6
 8003f9c:	d11c      	bne.n	8003fd8 <HAL_ADC_PollForConversion+0x60>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003f9e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003fa2:	d0f8      	beq.n	8003f96 <HAL_ADC_PollForConversion+0x1e>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003fa4:	f7fd fd90 	bl	8001ac8 <HAL_GetTick>
 8003fa8:	1bc3      	subs	r3, r0, r7
 8003faa:	42ab      	cmp	r3, r5
 8003fac:	d801      	bhi.n	8003fb2 <HAL_ADC_PollForConversion+0x3a>
 8003fae:	2d00      	cmp	r5, #0
 8003fb0:	d1f1      	bne.n	8003f96 <HAL_ADC_PollForConversion+0x1e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003fb2:	6823      	ldr	r3, [r4, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4233      	tst	r3, r6
 8003fb8:	d1ed      	bne.n	8003f96 <HAL_ADC_PollForConversion+0x1e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003fba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003fbc:	f043 0304 	orr.w	r3, r3, #4
 8003fc0:	65a3      	str	r3, [r4, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

          return HAL_TIMEOUT;
 8003fc8:	2003      	movs	r0, #3
 8003fca:	e028      	b.n	800401e <HAL_ADC_PollForConversion+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fcc:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003fce:	f043 0320 	orr.w	r3, r3, #32
 8003fd2:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 8003fd4:	2001      	movs	r0, #1
 8003fd6:	e022      	b.n	800401e <HAL_ADC_PollForConversion+0xa6>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003fd8:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003fda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fde:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003fe0:	68da      	ldr	r2, [r3, #12]
 8003fe2:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8003fe6:	d115      	bne.n	8004014 <HAL_ADC_PollForConversion+0x9c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003fe8:	7ea2      	ldrb	r2, [r4, #26]
 8003fea:	b99a      	cbnz	r2, 8004014 <HAL_ADC_PollForConversion+0x9c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	f012 0f08 	tst.w	r2, #8
 8003ff2:	d00f      	beq.n	8004014 <HAL_ADC_PollForConversion+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ff4:	689a      	ldr	r2, [r3, #8]
 8003ff6:	f012 0f04 	tst.w	r2, #4
 8003ffa:	d111      	bne.n	8004020 <HAL_ADC_PollForConversion+0xa8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	f022 020c 	bic.w	r2, r2, #12
 8004002:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8004004:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004006:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800400a:	f023 0301 	bic.w	r3, r3, #1
 800400e:	f043 0301 	orr.w	r3, r3, #1
 8004012:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8004014:	7e20      	ldrb	r0, [r4, #24]
 8004016:	b960      	cbnz	r0, 8004032 <HAL_ADC_PollForConversion+0xba>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004018:	6823      	ldr	r3, [r4, #0]
 800401a:	220c      	movs	r2, #12
 800401c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 800401e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004020:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004022:	f043 0320 	orr.w	r3, r3, #32
 8004026:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004028:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800402a:	f043 0301 	orr.w	r3, r3, #1
 800402e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8004030:	e7f0      	b.n	8004014 <HAL_ADC_PollForConversion+0x9c>
  return HAL_OK;
 8004032:	2000      	movs	r0, #0
 8004034:	e7f3      	b.n	800401e <HAL_ADC_PollForConversion+0xa6>

08004036 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004036:	6803      	ldr	r3, [r0, #0]
 8004038:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 800403a:	4770      	bx	lr

0800403c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 800403c:	b470      	push	{r4, r5, r6}
 800403e:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004040:	2200      	movs	r2, #0
 8004042:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004044:	6904      	ldr	r4, [r0, #16]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8004046:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 800404a:	2a01      	cmp	r2, #1
 800404c:	f000 8105 	beq.w	800425a <HAL_ADC_ConfigChannel+0x21e>
 8004050:	4603      	mov	r3, r0
 8004052:	2201      	movs	r2, #1
 8004054:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004058:	6802      	ldr	r2, [r0, #0]
 800405a:	6890      	ldr	r0, [r2, #8]
 800405c:	f010 0f04 	tst.w	r0, #4
 8004060:	d00a      	beq.n	8004078 <HAL_ADC_ConfigChannel+0x3c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004062:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004064:	f042 0220 	orr.w	r2, r2, #32
 8004068:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800406a:	2001      	movs	r0, #1
  }

  __HAL_UNLOCK(hadc);
 800406c:	2200      	movs	r2, #0
 800406e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
}
 8004072:	b003      	add	sp, #12
 8004074:	bc70      	pop	{r4, r5, r6}
 8004076:	4770      	bx	lr
    if (pConfig->Rank != ADC_RANK_NONE)
 8004078:	6848      	ldr	r0, [r1, #4]
 800407a:	2802      	cmp	r0, #2
 800407c:	f000 809e 	beq.w	80041bc <HAL_ADC_ConfigChannel+0x180>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004080:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8004084:	d029      	beq.n	80040da <HAL_ADC_ConfigChannel+0x9e>
 8004086:	4d76      	ldr	r5, [pc, #472]	; (8004260 <HAL_ADC_ConfigChannel+0x224>)
 8004088:	42ac      	cmp	r4, r5
 800408a:	d026      	beq.n	80040da <HAL_ADC_ConfigChannel+0x9e>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800408c:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800408e:	f000 001f 	and.w	r0, r0, #31
 8004092:	250f      	movs	r5, #15
 8004094:	4085      	lsls	r5, r0
 8004096:	ea24 0505 	bic.w	r5, r4, r5
 800409a:	680c      	ldr	r4, [r1, #0]
 800409c:	f3c4 0611 	ubfx	r6, r4, #0, #18
 80040a0:	2e00      	cmp	r6, #0
 80040a2:	d133      	bne.n	800410c <HAL_ADC_ConfigChannel+0xd0>
 80040a4:	f3c4 6484 	ubfx	r4, r4, #26, #5
 80040a8:	fa04 f000 	lsl.w	r0, r4, r0
 80040ac:	4328      	orrs	r0, r5
 80040ae:	6618      	str	r0, [r3, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80040b0:	684c      	ldr	r4, [r1, #4]
 80040b2:	08a0      	lsrs	r0, r4, #2
 80040b4:	3001      	adds	r0, #1
 80040b6:	69dd      	ldr	r5, [r3, #28]
 80040b8:	42a8      	cmp	r0, r5
 80040ba:	d814      	bhi.n	80040e6 <HAL_ADC_ConfigChannel+0xaa>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80040bc:	680d      	ldr	r5, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 80040be:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80040c0:	f004 041f 	and.w	r4, r4, #31
 80040c4:	260f      	movs	r6, #15
 80040c6:	40a6      	lsls	r6, r4
 80040c8:	ea20 0006 	bic.w	r0, r0, r6
 80040cc:	f3c5 6583 	ubfx	r5, r5, #26, #4
 80040d0:	fa05 f404 	lsl.w	r4, r5, r4
 80040d4:	4304      	orrs	r4, r0
 80040d6:	6294      	str	r4, [r2, #40]	; 0x28
}
 80040d8:	e005      	b.n	80040e6 <HAL_ADC_ConfigChannel+0xaa>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80040da:	680c      	ldr	r4, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80040dc:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80040de:	f3c4 0411 	ubfx	r4, r4, #0, #18
 80040e2:	4320      	orrs	r0, r4
 80040e4:	6290      	str	r0, [r2, #40]	; 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80040e6:	681c      	ldr	r4, [r3, #0]
 80040e8:	680d      	ldr	r5, [r1, #0]
 80040ea:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 80040ec:	6960      	ldr	r0, [r4, #20]
 80040ee:	ea20 2005 	bic.w	r0, r0, r5, lsl #8
 80040f2:	ea02 2205 	and.w	r2, r2, r5, lsl #8
 80040f6:	f022 427c 	bic.w	r2, r2, #4227858432	; 0xfc000000
 80040fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80040fe:	4302      	orrs	r2, r0
 8004100:	6162      	str	r2, [r4, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004102:	680a      	ldr	r2, [r1, #0]
 8004104:	2a00      	cmp	r2, #0
 8004106:	db09      	blt.n	800411c <HAL_ADC_ConfigChannel+0xe0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004108:	2000      	movs	r0, #0
 800410a:	e7af      	b.n	800406c <HAL_ADC_ConfigChannel+0x30>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800410c:	fa94 f4a4 	rbit	r4, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004110:	b114      	cbz	r4, 8004118 <HAL_ADC_ConfigChannel+0xdc>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8004112:	fab4 f484 	clz	r4, r4
 8004116:	e7c7      	b.n	80040a8 <HAL_ADC_ConfigChannel+0x6c>
    return 32U;
 8004118:	2420      	movs	r4, #32
 800411a:	e7c5      	b.n	80040a8 <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800411c:	4951      	ldr	r1, [pc, #324]	; (8004264 <HAL_ADC_ConfigChannel+0x228>)
 800411e:	f8d1 0708 	ldr.w	r0, [r1, #1800]	; 0x708
 8004122:	f000 71e0 	and.w	r1, r0, #29360128	; 0x1c00000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004126:	4c50      	ldr	r4, [pc, #320]	; (8004268 <HAL_ADC_ConfigChannel+0x22c>)
 8004128:	42a2      	cmp	r2, r4
 800412a:	d007      	beq.n	800413c <HAL_ADC_ConfigChannel+0x100>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800412c:	4c4f      	ldr	r4, [pc, #316]	; (800426c <HAL_ADC_ConfigChannel+0x230>)
 800412e:	42a2      	cmp	r2, r4
 8004130:	d026      	beq.n	8004180 <HAL_ADC_ConfigChannel+0x144>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004132:	4c4f      	ldr	r4, [pc, #316]	; (8004270 <HAL_ADC_ConfigChannel+0x234>)
 8004134:	42a2      	cmp	r2, r4
 8004136:	d032      	beq.n	800419e <HAL_ADC_ConfigChannel+0x162>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004138:	2000      	movs	r0, #0
 800413a:	e797      	b.n	800406c <HAL_ADC_ConfigChannel+0x30>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800413c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8004140:	d1f4      	bne.n	800412c <HAL_ADC_ConfigChannel+0xf0>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004142:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004146:	4847      	ldr	r0, [pc, #284]	; (8004264 <HAL_ADC_ConfigChannel+0x228>)
 8004148:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 800414c:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8004150:	4311      	orrs	r1, r2
 8004152:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004156:	4a47      	ldr	r2, [pc, #284]	; (8004274 <HAL_ADC_ConfigChannel+0x238>)
 8004158:	6812      	ldr	r2, [r2, #0]
 800415a:	0992      	lsrs	r2, r2, #6
 800415c:	4946      	ldr	r1, [pc, #280]	; (8004278 <HAL_ADC_ConfigChannel+0x23c>)
 800415e:	fba1 1202 	umull	r1, r2, r1, r2
 8004162:	0992      	lsrs	r2, r2, #6
 8004164:	3201      	adds	r2, #1
 8004166:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800416a:	0092      	lsls	r2, r2, #2
 800416c:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800416e:	e002      	b.n	8004176 <HAL_ADC_ConfigChannel+0x13a>
            wait_loop_index--;
 8004170:	9a01      	ldr	r2, [sp, #4]
 8004172:	3a01      	subs	r2, #1
 8004174:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8004176:	9a01      	ldr	r2, [sp, #4]
 8004178:	2a00      	cmp	r2, #0
 800417a:	d1f9      	bne.n	8004170 <HAL_ADC_ConfigChannel+0x134>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800417c:	2000      	movs	r0, #0
 800417e:	e775      	b.n	800406c <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004180:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8004184:	d1d5      	bne.n	8004132 <HAL_ADC_ConfigChannel+0xf6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004186:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 800418a:	4836      	ldr	r0, [pc, #216]	; (8004264 <HAL_ADC_ConfigChannel+0x228>)
 800418c:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8004190:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8004194:	4311      	orrs	r1, r2
 8004196:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800419a:	2000      	movs	r0, #0
}
 800419c:	e766      	b.n	800406c <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800419e:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 80041a2:	d158      	bne.n	8004256 <HAL_ADC_ConfigChannel+0x21a>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041a4:	f441 0280 	orr.w	r2, r1, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80041a8:	482e      	ldr	r0, [pc, #184]	; (8004264 <HAL_ADC_ConfigChannel+0x228>)
 80041aa:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 80041ae:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80041b2:	430a      	orrs	r2, r1
 80041b4:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041b8:	2000      	movs	r0, #0
}
 80041ba:	e757      	b.n	800406c <HAL_ADC_ConfigChannel+0x30>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80041bc:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 80041c0:	d002      	beq.n	80041c8 <HAL_ADC_ConfigChannel+0x18c>
 80041c2:	4827      	ldr	r0, [pc, #156]	; (8004260 <HAL_ADC_ConfigChannel+0x224>)
 80041c4:	4284      	cmp	r4, r0
 80041c6:	d106      	bne.n	80041d6 <HAL_ADC_ConfigChannel+0x19a>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80041c8:	680c      	ldr	r4, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80041ca:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80041cc:	f3c4 0411 	ubfx	r4, r4, #0, #18
 80041d0:	ea20 0004 	bic.w	r0, r0, r4
 80041d4:	6290      	str	r0, [r2, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80041d6:	680a      	ldr	r2, [r1, #0]
 80041d8:	2a00      	cmp	r2, #0
 80041da:	db01      	blt.n	80041e0 <HAL_ADC_ConfigChannel+0x1a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041dc:	2000      	movs	r0, #0
 80041de:	e745      	b.n	800406c <HAL_ADC_ConfigChannel+0x30>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80041e0:	4920      	ldr	r1, [pc, #128]	; (8004264 <HAL_ADC_ConfigChannel+0x228>)
 80041e2:	f8d1 1708 	ldr.w	r1, [r1, #1800]	; 0x708
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80041e6:	4820      	ldr	r0, [pc, #128]	; (8004268 <HAL_ADC_ConfigChannel+0x22c>)
 80041e8:	4282      	cmp	r2, r0
 80041ea:	d007      	beq.n	80041fc <HAL_ADC_ConfigChannel+0x1c0>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80041ec:	481f      	ldr	r0, [pc, #124]	; (800426c <HAL_ADC_ConfigChannel+0x230>)
 80041ee:	4282      	cmp	r2, r0
 80041f0:	d013      	beq.n	800421a <HAL_ADC_ConfigChannel+0x1de>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80041f2:	481f      	ldr	r0, [pc, #124]	; (8004270 <HAL_ADC_ConfigChannel+0x234>)
 80041f4:	4282      	cmp	r2, r0
 80041f6:	d01f      	beq.n	8004238 <HAL_ADC_ConfigChannel+0x1fc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041f8:	2000      	movs	r0, #0
 80041fa:	e737      	b.n	800406c <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041fc:	f001 71a0 	and.w	r1, r1, #20971520	; 0x1400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004200:	f100 4010 	add.w	r0, r0, #2415919104	; 0x90000000
 8004204:	f500 3088 	add.w	r0, r0, #69632	; 0x11000
 8004208:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 800420c:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8004210:	4311      	orrs	r1, r2
 8004212:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004216:	2000      	movs	r0, #0
}
 8004218:	e728      	b.n	800406c <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800421a:	f401 0240 	and.w	r2, r1, #12582912	; 0xc00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800421e:	f100 4008 	add.w	r0, r0, #2281701376	; 0x88000000
 8004222:	f500 4060 	add.w	r0, r0, #57344	; 0xe000
 8004226:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 800422a:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 800422e:	430a      	orrs	r2, r1
 8004230:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004234:	2000      	movs	r0, #0
}
 8004236:	e719      	b.n	800406c <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004238:	f001 72c0 	and.w	r2, r1, #25165824	; 0x1800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800423c:	f100 400c 	add.w	r0, r0, #2348810240	; 0x8c000000
 8004240:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8004244:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 8004248:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 800424c:	430a      	orrs	r2, r1
 800424e:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004252:	2000      	movs	r0, #0
}
 8004254:	e70a      	b.n	800406c <HAL_ADC_ConfigChannel+0x30>
 8004256:	2000      	movs	r0, #0
 8004258:	e708      	b.n	800406c <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 800425a:	2002      	movs	r0, #2
 800425c:	e709      	b.n	8004072 <HAL_ADC_ConfigChannel+0x36>
 800425e:	bf00      	nop
 8004260:	80000004 	.word	0x80000004
 8004264:	40012000 	.word	0x40012000
 8004268:	b0001000 	.word	0xb0001000
 800426c:	b8004000 	.word	0xb8004000
 8004270:	b4002000 	.word	0xb4002000
 8004274:	20000070 	.word	0x20000070
 8004278:	053e2d63 	.word	0x053e2d63

0800427c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 800427c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800427e:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004280:	689a      	ldr	r2, [r3, #8]
 8004282:	f012 0f04 	tst.w	r2, #4
 8004286:	d02a      	beq.n	80042de <ADC_ConversionStop+0x62>
 8004288:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800428a:	689a      	ldr	r2, [r3, #8]
 800428c:	f012 0f02 	tst.w	r2, #2
 8004290:	d107      	bne.n	80042a2 <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 8004292:	689a      	ldr	r2, [r3, #8]
 8004294:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004298:	f022 0217 	bic.w	r2, r2, #23
 800429c:	f042 0210 	orr.w	r2, r2, #16
 80042a0:	609a      	str	r2, [r3, #8]
      LL_ADC_REG_StopConversion(hadc->Instance);
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80042a2:	f7fd fc11 	bl	8001ac8 <HAL_GetTick>
 80042a6:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80042a8:	6823      	ldr	r3, [r4, #0]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f013 0f04 	tst.w	r3, #4
 80042b0:	d013      	beq.n	80042da <ADC_ConversionStop+0x5e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80042b2:	f7fd fc09 	bl	8001ac8 <HAL_GetTick>
 80042b6:	1b43      	subs	r3, r0, r5
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d9f5      	bls.n	80042a8 <ADC_ConversionStop+0x2c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80042bc:	6823      	ldr	r3, [r4, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f013 0f04 	tst.w	r3, #4
 80042c4:	d0f0      	beq.n	80042a8 <ADC_ConversionStop+0x2c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80042c8:	f043 0310 	orr.w	r3, r3, #16
 80042cc:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042ce:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80042d0:	f043 0301 	orr.w	r3, r3, #1
 80042d4:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 80042d6:	2001      	movs	r0, #1
 80042d8:	e002      	b.n	80042e0 <ADC_ConversionStop+0x64>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80042da:	2000      	movs	r0, #0
 80042dc:	e000      	b.n	80042e0 <ADC_ConversionStop+0x64>
 80042de:	2000      	movs	r0, #0
}
 80042e0:	bd38      	pop	{r3, r4, r5, pc}
	...

080042e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80042e4:	b530      	push	{r4, r5, lr}
 80042e6:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80042e8:	2300      	movs	r3, #0
 80042ea:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80042ec:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80042ee:	689a      	ldr	r2, [r3, #8]
 80042f0:	f012 0f01 	tst.w	r2, #1
 80042f4:	d15b      	bne.n	80043ae <ADC_Enable+0xca>
 80042f6:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80042f8:	6899      	ldr	r1, [r3, #8]
 80042fa:	4a2e      	ldr	r2, [pc, #184]	; (80043b4 <ADC_Enable+0xd0>)
 80042fc:	4211      	tst	r1, r2
 80042fe:	d117      	bne.n	8004330 <ADC_Enable+0x4c>
  MODIFY_REG(ADCx->CR,
 8004300:	689a      	ldr	r2, [r3, #8]
 8004302:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004306:	f022 0217 	bic.w	r2, r2, #23
 800430a:	f042 0201 	orr.w	r2, r2, #1
 800430e:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004310:	4b29      	ldr	r3, [pc, #164]	; (80043b8 <ADC_Enable+0xd4>)
 8004312:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004316:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800431a:	d019      	beq.n	8004350 <ADC_Enable+0x6c>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800431c:	4b27      	ldr	r3, [pc, #156]	; (80043bc <ADC_Enable+0xd8>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	099b      	lsrs	r3, r3, #6
 8004322:	4a27      	ldr	r2, [pc, #156]	; (80043c0 <ADC_Enable+0xdc>)
 8004324:	fba2 2303 	umull	r2, r3, r2, r3
 8004328:	099b      	lsrs	r3, r3, #6
 800432a:	3301      	adds	r3, #1
 800432c:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800432e:	e00c      	b.n	800434a <ADC_Enable+0x66>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004330:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8004332:	f043 0310 	orr.w	r3, r3, #16
 8004336:	6583      	str	r3, [r0, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004338:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800433a:	f043 0301 	orr.w	r3, r3, #1
 800433e:	65c3      	str	r3, [r0, #92]	; 0x5c
      return HAL_ERROR;
 8004340:	2001      	movs	r0, #1
 8004342:	e035      	b.n	80043b0 <ADC_Enable+0xcc>
      {
        wait_loop_index--;
 8004344:	9b01      	ldr	r3, [sp, #4]
 8004346:	3b01      	subs	r3, #1
 8004348:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800434a:	9b01      	ldr	r3, [sp, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1f9      	bne.n	8004344 <ADC_Enable+0x60>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004350:	7e63      	ldrb	r3, [r4, #25]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d101      	bne.n	800435a <ADC_Enable+0x76>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004356:	2000      	movs	r0, #0
 8004358:	e02a      	b.n	80043b0 <ADC_Enable+0xcc>
      tickstart = HAL_GetTick();
 800435a:	f7fd fbb5 	bl	8001ac8 <HAL_GetTick>
 800435e:	4605      	mov	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004360:	6823      	ldr	r3, [r4, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	f012 0f01 	tst.w	r2, #1
 8004368:	d11f      	bne.n	80043aa <ADC_Enable+0xc6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800436a:	689a      	ldr	r2, [r3, #8]
 800436c:	f012 0f01 	tst.w	r2, #1
 8004370:	d107      	bne.n	8004382 <ADC_Enable+0x9e>
  MODIFY_REG(ADCx->CR,
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004378:	f022 0217 	bic.w	r2, r2, #23
 800437c:	f042 0201 	orr.w	r2, r2, #1
 8004380:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004382:	f7fd fba1 	bl	8001ac8 <HAL_GetTick>
 8004386:	1b40      	subs	r0, r0, r5
 8004388:	2802      	cmp	r0, #2
 800438a:	d9e9      	bls.n	8004360 <ADC_Enable+0x7c>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800438c:	6823      	ldr	r3, [r4, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f013 0f01 	tst.w	r3, #1
 8004394:	d1e4      	bne.n	8004360 <ADC_Enable+0x7c>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004396:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004398:	f043 0310 	orr.w	r3, r3, #16
 800439c:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800439e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80043a0:	f043 0301 	orr.w	r3, r3, #1
 80043a4:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 80043a6:	2001      	movs	r0, #1
 80043a8:	e002      	b.n	80043b0 <ADC_Enable+0xcc>
  return HAL_OK;
 80043aa:	2000      	movs	r0, #0
 80043ac:	e000      	b.n	80043b0 <ADC_Enable+0xcc>
 80043ae:	2000      	movs	r0, #0
}
 80043b0:	b003      	add	sp, #12
 80043b2:	bd30      	pop	{r4, r5, pc}
 80043b4:	80000017 	.word	0x80000017
 80043b8:	40012000 	.word	0x40012000
 80043bc:	20000070 	.word	0x20000070
 80043c0:	053e2d63 	.word	0x053e2d63

080043c4 <HAL_ADC_Start>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80043c4:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f013 0f04 	tst.w	r3, #4
 80043cc:	d128      	bne.n	8004420 <HAL_ADC_Start+0x5c>
{
 80043ce:	b510      	push	{r4, lr}
 80043d0:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 80043d2:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d024      	beq.n	8004424 <HAL_ADC_Start+0x60>
 80043da:	2301      	movs	r3, #1
 80043dc:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    tmp_hal_status = ADC_Enable(hadc);
 80043e0:	f7ff ff80 	bl	80042e4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80043e4:	b9c0      	cbnz	r0, 8004418 <HAL_ADC_Start+0x54>
      ADC_STATE_CLR_SET(hadc->State,
 80043e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80043e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80043ec:	f023 0301 	bic.w	r3, r3, #1
 80043f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043f4:	65a3      	str	r3, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 80043f6:	2300      	movs	r3, #0
 80043f8:	65e3      	str	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80043fa:	6822      	ldr	r2, [r4, #0]
 80043fc:	211c      	movs	r1, #28
 80043fe:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8004400:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004404:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8004406:	6893      	ldr	r3, [r2, #8]
 8004408:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800440c:	f023 0317 	bic.w	r3, r3, #23
 8004410:	f043 0304 	orr.w	r3, r3, #4
 8004414:	6093      	str	r3, [r2, #8]
}
 8004416:	bd10      	pop	{r4, pc}
      __HAL_UNLOCK(hadc);
 8004418:	2300      	movs	r3, #0
 800441a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800441e:	e7fa      	b.n	8004416 <HAL_ADC_Start+0x52>
    tmp_hal_status = HAL_BUSY;
 8004420:	2002      	movs	r0, #2
}
 8004422:	4770      	bx	lr
    __HAL_LOCK(hadc);
 8004424:	2002      	movs	r0, #2
 8004426:	e7f6      	b.n	8004416 <HAL_ADC_Start+0x52>

08004428 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004428:	b538      	push	{r3, r4, r5, lr}
 800442a:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800442c:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800442e:	6893      	ldr	r3, [r2, #8]
 8004430:	f013 0302 	ands.w	r3, r3, #2
 8004434:	d000      	beq.n	8004438 <ADC_Disable+0x10>
 8004436:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004438:	6891      	ldr	r1, [r2, #8]
 800443a:	f011 0f01 	tst.w	r1, #1
 800443e:	d039      	beq.n	80044b4 <ADC_Disable+0x8c>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 8004440:	2b00      	cmp	r3, #0
 8004442:	d139      	bne.n	80044b8 <ADC_Disable+0x90>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004444:	6893      	ldr	r3, [r2, #8]
 8004446:	f003 0305 	and.w	r3, r3, #5
 800444a:	2b01      	cmp	r3, #1
 800444c:	d009      	beq.n	8004462 <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800444e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004450:	f043 0310 	orr.w	r3, r3, #16
 8004454:	65a3      	str	r3, [r4, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004456:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004458:	f043 0301 	orr.w	r3, r3, #1
 800445c:	65e3      	str	r3, [r4, #92]	; 0x5c

      return HAL_ERROR;
 800445e:	2001      	movs	r0, #1
 8004460:	e029      	b.n	80044b6 <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 8004462:	6893      	ldr	r3, [r2, #8]
 8004464:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004468:	f023 0317 	bic.w	r3, r3, #23
 800446c:	f043 0302 	orr.w	r3, r3, #2
 8004470:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004472:	6823      	ldr	r3, [r4, #0]
 8004474:	2203      	movs	r2, #3
 8004476:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004478:	f7fd fb26 	bl	8001ac8 <HAL_GetTick>
 800447c:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800447e:	6823      	ldr	r3, [r4, #0]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f013 0f01 	tst.w	r3, #1
 8004486:	d013      	beq.n	80044b0 <ADC_Disable+0x88>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004488:	f7fd fb1e 	bl	8001ac8 <HAL_GetTick>
 800448c:	1b40      	subs	r0, r0, r5
 800448e:	2802      	cmp	r0, #2
 8004490:	d9f5      	bls.n	800447e <ADC_Disable+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004492:	6823      	ldr	r3, [r4, #0]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f013 0f01 	tst.w	r3, #1
 800449a:	d0f0      	beq.n	800447e <ADC_Disable+0x56>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800449c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800449e:	f043 0310 	orr.w	r3, r3, #16
 80044a2:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044a4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80044a6:	f043 0301 	orr.w	r3, r3, #1
 80044aa:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 80044ac:	2001      	movs	r0, #1
 80044ae:	e002      	b.n	80044b6 <ADC_Disable+0x8e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80044b0:	2000      	movs	r0, #0
 80044b2:	e000      	b.n	80044b6 <ADC_Disable+0x8e>
 80044b4:	2000      	movs	r0, #0
}
 80044b6:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 80044b8:	2000      	movs	r0, #0
 80044ba:	e7fc      	b.n	80044b6 <ADC_Disable+0x8e>

080044bc <HAL_ADC_DeInit>:
{
 80044bc:	b570      	push	{r4, r5, r6, lr}
  if (hadc == NULL)
 80044be:	2800      	cmp	r0, #0
 80044c0:	d04c      	beq.n	800455c <HAL_ADC_DeInit+0xa0>
 80044c2:	4604      	mov	r4, r0
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80044c4:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80044c6:	f043 0302 	orr.w	r3, r3, #2
 80044ca:	6583      	str	r3, [r0, #88]	; 0x58
  tmp_hal_status = ADC_ConversionStop(hadc);
 80044cc:	f7ff fed6 	bl	800427c <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80044d0:	4606      	mov	r6, r0
 80044d2:	2800      	cmp	r0, #0
 80044d4:	d033      	beq.n	800453e <HAL_ADC_DeInit+0x82>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 80044d6:	6822      	ldr	r2, [r4, #0]
 80044d8:	6853      	ldr	r3, [r2, #4]
 80044da:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 80044de:	f023 0303 	bic.w	r3, r3, #3
 80044e2:	6053      	str	r3, [r2, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 80044e4:	6823      	ldr	r3, [r4, #0]
 80044e6:	f240 329f 	movw	r2, #927	; 0x39f
 80044ea:	601a      	str	r2, [r3, #0]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 80044ec:	6822      	ldr	r2, [r4, #0]
 80044ee:	68d1      	ldr	r1, [r2, #12]
 80044f0:	4b1b      	ldr	r3, [pc, #108]	; (8004560 <HAL_ADC_DeInit+0xa4>)
 80044f2:	400b      	ands	r3, r1
 80044f4:	60d3      	str	r3, [r2, #12]
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 80044f6:	6822      	ldr	r2, [r4, #0]
 80044f8:	6913      	ldr	r3, [r2, #16]
 80044fa:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80044fe:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8004500:	6822      	ldr	r2, [r4, #0]
 8004502:	6953      	ldr	r3, [r2, #20]
 8004504:	f023 0307 	bic.w	r3, r3, #7
 8004508:	6153      	str	r3, [r2, #20]
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 800450a:	6822      	ldr	r2, [r4, #0]
 800450c:	6a13      	ldr	r3, [r2, #32]
 800450e:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8004512:	6213      	str	r3, [r2, #32]
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8004514:	6823      	ldr	r3, [r4, #0]
 8004516:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004518:	2500      	movs	r5, #0
 800451a:	629d      	str	r5, [r3, #40]	; 0x28
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 800451c:	4a11      	ldr	r2, [pc, #68]	; (8004564 <HAL_ADC_DeInit+0xa8>)
 800451e:	f8d2 3708 	ldr.w	r3, [r2, #1800]	; 0x708
 8004522:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8004526:	f8c2 3708 	str.w	r3, [r2, #1800]	; 0x708
  HAL_ADC_MspDeInit(hadc);
 800452a:	4620      	mov	r0, r4
 800452c:	f7fc fda4 	bl	8001078 <HAL_ADC_MspDeInit>
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8004530:	6625      	str	r5, [r4, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(hadc);
 8004532:	65e5      	str	r5, [r4, #92]	; 0x5c
  hadc->State = HAL_ADC_STATE_RESET;
 8004534:	65a5      	str	r5, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 8004536:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
}
 800453a:	4630      	mov	r0, r6
 800453c:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 800453e:	4620      	mov	r0, r4
 8004540:	f7ff ff72 	bl	8004428 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8004544:	4606      	mov	r6, r0
 8004546:	b908      	cbnz	r0, 800454c <HAL_ADC_DeInit+0x90>
      hadc->State = HAL_ADC_STATE_READY;
 8004548:	2301      	movs	r3, #1
 800454a:	65a3      	str	r3, [r4, #88]	; 0x58
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 800454c:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 800454e:	6893      	ldr	r3, [r2, #8]
 8004550:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004554:	f023 0317 	bic.w	r3, r3, #23
 8004558:	6093      	str	r3, [r2, #8]
}
 800455a:	e7bc      	b.n	80044d6 <HAL_ADC_DeInit+0x1a>
    return HAL_ERROR;
 800455c:	2601      	movs	r6, #1
 800455e:	e7ec      	b.n	800453a <HAL_ADC_DeInit+0x7e>
 8004560:	833e0200 	.word	0x833e0200
 8004564:	40012000 	.word	0x40012000

08004568 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8004568:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 800456c:	2b01      	cmp	r3, #1
 800456e:	d019      	beq.n	80045a4 <HAL_ADC_Stop+0x3c>
{
 8004570:	b510      	push	{r4, lr}
 8004572:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8004574:	2301      	movs	r3, #1
 8004576:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 800457a:	f7ff fe7f 	bl	800427c <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800457e:	b118      	cbz	r0, 8004588 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 8004580:	2300      	movs	r3, #0
 8004582:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
 8004586:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8004588:	4620      	mov	r0, r4
 800458a:	f7ff ff4d 	bl	8004428 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800458e:	2800      	cmp	r0, #0
 8004590:	d1f6      	bne.n	8004580 <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 8004592:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004594:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004598:	f023 0301 	bic.w	r3, r3, #1
 800459c:	f043 0301 	orr.w	r3, r3, #1
 80045a0:	65a3      	str	r3, [r4, #88]	; 0x58
 80045a2:	e7ed      	b.n	8004580 <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 80045a4:	2002      	movs	r0, #2
}
 80045a6:	4770      	bx	lr

080045a8 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80045a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045aa:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80045ac:	2300      	movs	r3, #0
 80045ae:	9301      	str	r3, [sp, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80045b0:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	f000 8094 	beq.w	80046e2 <HAL_ADCEx_Calibration_Start+0x13a>
 80045ba:	4604      	mov	r4, r0
 80045bc:	2301      	movs	r3, #1
 80045be:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80045c2:	f7ff ff31 	bl	8004428 <ADC_Disable>
 80045c6:	4605      	mov	r5, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045c8:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80045ca:	689a      	ldr	r2, [r3, #8]
 80045cc:	f012 0201 	ands.w	r2, r2, #1
 80045d0:	d009      	beq.n	80045e6 <HAL_ADCEx_Calibration_Start+0x3e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80045d4:	f043 0310 	orr.w	r3, r3, #16
 80045d8:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80045da:	2300      	movs	r3, #0
 80045dc:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

  return tmp_hal_status;
}
 80045e0:	4628      	mov	r0, r5
 80045e2:	b003      	add	sp, #12
 80045e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 80045e6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80045e8:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 80045ec:	f041 0102 	orr.w	r1, r1, #2
 80045f0:	65a1      	str	r1, [r4, #88]	; 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80045f2:	68de      	ldr	r6, [r3, #12]
 80045f4:	f426 46ff 	bic.w	r6, r6, #32640	; 0x7f80
 80045f8:	f026 067c 	bic.w	r6, r6, #124	; 0x7c
 80045fc:	0436      	lsls	r6, r6, #16
 80045fe:	0c36      	lsrs	r6, r6, #16
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004600:	68d9      	ldr	r1, [r3, #12]
 8004602:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8004606:	f021 0103 	bic.w	r1, r1, #3
 800460a:	60d9      	str	r1, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 800460c:	4610      	mov	r0, r2
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800460e:	e005      	b.n	800461c <HAL_ADCEx_Calibration_Start+0x74>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8004610:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004614:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8004618:	4418      	add	r0, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800461a:	3201      	adds	r2, #1
 800461c:	2a07      	cmp	r2, #7
 800461e:	d81e      	bhi.n	800465e <HAL_ADCEx_Calibration_Start+0xb6>
      LL_ADC_StartCalibration(hadc->Instance);
 8004620:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8004622:	688b      	ldr	r3, [r1, #8]
 8004624:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004628:	f023 0317 	bic.w	r3, r3, #23
 800462c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004630:	608b      	str	r3, [r1, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004632:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004634:	6899      	ldr	r1, [r3, #8]
 8004636:	2900      	cmp	r1, #0
 8004638:	daea      	bge.n	8004610 <HAL_ADCEx_Calibration_Start+0x68>
        wait_loop_index++;
 800463a:	9b01      	ldr	r3, [sp, #4]
 800463c:	3301      	adds	r3, #1
 800463e:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004640:	9b01      	ldr	r3, [sp, #4]
 8004642:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8004646:	d3f4      	bcc.n	8004632 <HAL_ADCEx_Calibration_Start+0x8a>
          ADC_STATE_CLR_SET(hadc->State,
 8004648:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800464a:	f023 0312 	bic.w	r3, r3, #18
 800464e:	f043 0310 	orr.w	r3, r3, #16
 8004652:	65a3      	str	r3, [r4, #88]	; 0x58
          __HAL_UNLOCK(hadc);
 8004654:	2300      	movs	r3, #0
 8004656:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 800465a:	2501      	movs	r5, #1
 800465c:	e7c0      	b.n	80045e0 <HAL_ADCEx_Calibration_Start+0x38>
    calibration_factor_accumulated /= calibration_index;
 800465e:	fbb0 f2f2 	udiv	r2, r0, r2
    LL_ADC_Enable(hadc->Instance);
 8004662:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8004664:	688b      	ldr	r3, [r1, #8]
 8004666:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800466a:	f023 0317 	bic.w	r3, r3, #23
 800466e:	f043 0301 	orr.w	r3, r3, #1
 8004672:	608b      	str	r3, [r1, #8]
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8004674:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->CALFACT,
 8004676:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 800467a:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
 800467e:	4302      	orrs	r2, r0
 8004680:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    LL_ADC_Disable(hadc->Instance);
 8004684:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8004686:	6893      	ldr	r3, [r2, #8]
 8004688:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800468c:	f023 0317 	bic.w	r3, r3, #23
 8004690:	f043 0302 	orr.w	r3, r3, #2
 8004694:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8004696:	f7fd fa17 	bl	8001ac8 <HAL_GetTick>
 800469a:	4607      	mov	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800469c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800469e:	689a      	ldr	r2, [r3, #8]
 80046a0:	f012 0f01 	tst.w	r2, #1
 80046a4:	d109      	bne.n	80046ba <HAL_ADCEx_Calibration_Start+0x112>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80046a6:	68da      	ldr	r2, [r3, #12]
 80046a8:	4316      	orrs	r6, r2
 80046aa:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 80046ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80046ae:	f023 0303 	bic.w	r3, r3, #3
 80046b2:	f043 0301 	orr.w	r3, r3, #1
 80046b6:	65a3      	str	r3, [r4, #88]	; 0x58
 80046b8:	e78f      	b.n	80045da <HAL_ADCEx_Calibration_Start+0x32>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80046ba:	f7fd fa05 	bl	8001ac8 <HAL_GetTick>
 80046be:	1bc3      	subs	r3, r0, r7
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d9eb      	bls.n	800469c <HAL_ADCEx_Calibration_Start+0xf4>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80046c4:	6823      	ldr	r3, [r4, #0]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f013 0f01 	tst.w	r3, #1
 80046cc:	d0e6      	beq.n	800469c <HAL_ADCEx_Calibration_Start+0xf4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80046d0:	f043 0310 	orr.w	r3, r3, #16
 80046d4:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046d6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80046d8:	f043 0301 	orr.w	r3, r3, #1
 80046dc:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 80046de:	2501      	movs	r5, #1
 80046e0:	e77e      	b.n	80045e0 <HAL_ADCEx_Calibration_Start+0x38>
  __HAL_LOCK(hadc);
 80046e2:	2502      	movs	r5, #2
 80046e4:	e77c      	b.n	80045e0 <HAL_ADCEx_Calibration_Start+0x38>
	...

080046e8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046e8:	4a07      	ldr	r2, [pc, #28]	; (8004708 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80046ea:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046ec:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80046f0:	041b      	lsls	r3, r3, #16
 80046f2:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80046f4:	0200      	lsls	r0, r0, #8
 80046f6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046fa:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80046fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8004704:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004706:	4770      	bx	lr
 8004708:	e000ed00 	.word	0xe000ed00

0800470c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800470c:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800470e:	4b19      	ldr	r3, [pc, #100]	; (8004774 <HAL_NVIC_SetPriority+0x68>)
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004716:	f1c3 0c07 	rsb	ip, r3, #7
 800471a:	f1bc 0f04 	cmp.w	ip, #4
 800471e:	bf28      	it	cs
 8004720:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004724:	f103 0e04 	add.w	lr, r3, #4
 8004728:	f1be 0f06 	cmp.w	lr, #6
 800472c:	d918      	bls.n	8004760 <HAL_NVIC_SetPriority+0x54>
 800472e:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004730:	f04f 3eff 	mov.w	lr, #4294967295
 8004734:	fa0e fc0c 	lsl.w	ip, lr, ip
 8004738:	ea21 010c 	bic.w	r1, r1, ip
 800473c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800473e:	fa0e f303 	lsl.w	r3, lr, r3
 8004742:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004746:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8004748:	2800      	cmp	r0, #0
 800474a:	db0b      	blt.n	8004764 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800474c:	0109      	lsls	r1, r1, #4
 800474e:	b2c9      	uxtb	r1, r1
 8004750:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004754:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004758:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800475c:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004760:	2300      	movs	r3, #0
 8004762:	e7e5      	b.n	8004730 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004764:	f000 000f 	and.w	r0, r0, #15
 8004768:	0109      	lsls	r1, r1, #4
 800476a:	b2c9      	uxtb	r1, r1
 800476c:	4b02      	ldr	r3, [pc, #8]	; (8004778 <HAL_NVIC_SetPriority+0x6c>)
 800476e:	5419      	strb	r1, [r3, r0]
 8004770:	e7f4      	b.n	800475c <HAL_NVIC_SetPriority+0x50>
 8004772:	bf00      	nop
 8004774:	e000ed00 	.word	0xe000ed00
 8004778:	e000ed14 	.word	0xe000ed14

0800477c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800477c:	2800      	cmp	r0, #0
 800477e:	db07      	blt.n	8004790 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004780:	f000 021f 	and.w	r2, r0, #31
 8004784:	0940      	lsrs	r0, r0, #5
 8004786:	2301      	movs	r3, #1
 8004788:	4093      	lsls	r3, r2
 800478a:	4a02      	ldr	r2, [pc, #8]	; (8004794 <HAL_NVIC_EnableIRQ+0x18>)
 800478c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	e000e100 	.word	0xe000e100

08004798 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004798:	2800      	cmp	r0, #0
 800479a:	db0c      	blt.n	80047b6 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800479c:	f000 021f 	and.w	r2, r0, #31
 80047a0:	0940      	lsrs	r0, r0, #5
 80047a2:	2301      	movs	r3, #1
 80047a4:	4093      	lsls	r3, r2
 80047a6:	3020      	adds	r0, #32
 80047a8:	4a03      	ldr	r2, [pc, #12]	; (80047b8 <HAL_NVIC_DisableIRQ+0x20>)
 80047aa:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80047ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80047b2:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80047b6:	4770      	bx	lr
 80047b8:	e000e100 	.word	0xe000e100

080047bc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047bc:	b410      	push	{r4}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047be:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 80047c0:	f8d0 c050 	ldr.w	ip, [r0, #80]	; 0x50
 80047c4:	f8c4 c004 	str.w	ip, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80047c8:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80047ca:	b124      	cbz	r4, 80047d6 <DMA_SetConfig+0x1a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047cc:	6d84      	ldr	r4, [r0, #88]	; 0x58
 80047ce:	f8d0 c05c 	ldr.w	ip, [r0, #92]	; 0x5c
 80047d2:	f8c4 c004 	str.w	ip, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80047d6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80047d8:	f004 0c1c 	and.w	ip, r4, #28
 80047dc:	2401      	movs	r4, #1
 80047de:	fa04 f40c 	lsl.w	r4, r4, ip
 80047e2:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
 80047e6:	f8cc 4004 	str.w	r4, [ip, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80047ea:	6804      	ldr	r4, [r0, #0]
 80047ec:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047ee:	6883      	ldr	r3, [r0, #8]
 80047f0:	2b10      	cmp	r3, #16
 80047f2:	d005      	beq.n	8004800 <DMA_SetConfig+0x44>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80047f4:	6803      	ldr	r3, [r0, #0]
 80047f6:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80047f8:	6803      	ldr	r3, [r0, #0]
 80047fa:	60da      	str	r2, [r3, #12]
  }
}
 80047fc:	bc10      	pop	{r4}
 80047fe:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8004800:	6803      	ldr	r3, [r0, #0]
 8004802:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8004804:	6803      	ldr	r3, [r0, #0]
 8004806:	60d9      	str	r1, [r3, #12]
 8004808:	e7f8      	b.n	80047fc <DMA_SetConfig+0x40>
	...

0800480c <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800480c:	6803      	ldr	r3, [r0, #0]
 800480e:	4a14      	ldr	r2, [pc, #80]	; (8004860 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d816      	bhi.n	8004842 <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004814:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004816:	f022 0203 	bic.w	r2, r2, #3
 800481a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800481e:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 8004822:	6482      	str	r2, [r0, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004824:	b2db      	uxtb	r3, r3
 8004826:	3b08      	subs	r3, #8
 8004828:	4a0e      	ldr	r2, [pc, #56]	; (8004864 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 800482a:	fba2 2303 	umull	r2, r3, r2, r3
 800482e:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004830:	4a0d      	ldr	r2, [pc, #52]	; (8004868 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 8004832:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004834:	f003 031f 	and.w	r3, r3, #31
 8004838:	2201      	movs	r2, #1
 800483a:	fa02 f303 	lsl.w	r3, r2, r3
 800483e:	6503      	str	r3, [r0, #80]	; 0x50
}
 8004840:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004842:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004844:	f022 0103 	bic.w	r1, r2, #3
 8004848:	4a08      	ldr	r2, [pc, #32]	; (800486c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 800484a:	440a      	add	r2, r1
 800484c:	6482      	str	r2, [r0, #72]	; 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 800484e:	b2db      	uxtb	r3, r3
 8004850:	3b08      	subs	r3, #8
 8004852:	4a04      	ldr	r2, [pc, #16]	; (8004864 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8004854:	fba2 2303 	umull	r2, r3, r2, r3
 8004858:	091b      	lsrs	r3, r3, #4
 800485a:	3307      	adds	r3, #7
 800485c:	e7e8      	b.n	8004830 <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 800485e:	bf00      	nop
 8004860:	40020407 	.word	0x40020407
 8004864:	cccccccd 	.word	0xcccccccd
 8004868:	40020880 	.word	0x40020880
 800486c:	4002081c 	.word	0x4002081c

08004870 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004870:	6843      	ldr	r3, [r0, #4]
 8004872:	f003 037f 	and.w	r3, r3, #127	; 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004876:	4a07      	ldr	r2, [pc, #28]	; (8004894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8004878:	441a      	add	r2, r3
 800487a:	0092      	lsls	r2, r2, #2
 800487c:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800487e:	4a06      	ldr	r2, [pc, #24]	; (8004898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 8004880:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004882:	3b01      	subs	r3, #1
 8004884:	f003 0303 	and.w	r3, r3, #3
 8004888:	2201      	movs	r2, #1
 800488a:	fa02 f303 	lsl.w	r3, r2, r3
 800488e:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	1000823f 	.word	0x1000823f
 8004898:	40020940 	.word	0x40020940

0800489c <HAL_DMA_Init>:
  if (hdma == NULL)
 800489c:	2800      	cmp	r0, #0
 800489e:	d060      	beq.n	8004962 <HAL_DMA_Init+0xc6>
{
 80048a0:	b510      	push	{r4, lr}
 80048a2:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80048a4:	6802      	ldr	r2, [r0, #0]
 80048a6:	4b30      	ldr	r3, [pc, #192]	; (8004968 <HAL_DMA_Init+0xcc>)
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d842      	bhi.n	8004932 <HAL_DMA_Init+0x96>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80048ac:	4b2f      	ldr	r3, [pc, #188]	; (800496c <HAL_DMA_Init+0xd0>)
 80048ae:	4413      	add	r3, r2
 80048b0:	492f      	ldr	r1, [pc, #188]	; (8004970 <HAL_DMA_Init+0xd4>)
 80048b2:	fba1 1303 	umull	r1, r3, r1, r3
 80048b6:	091b      	lsrs	r3, r3, #4
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80048bc:	4b2d      	ldr	r3, [pc, #180]	; (8004974 <HAL_DMA_Init+0xd8>)
 80048be:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80048c0:	2302      	movs	r3, #2
 80048c2:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80048c6:	6813      	ldr	r3, [r2, #0]
 80048c8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80048cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d0:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80048d2:	6821      	ldr	r1, [r4, #0]
 80048d4:	680a      	ldr	r2, [r1, #0]
 80048d6:	68a3      	ldr	r3, [r4, #8]
 80048d8:	68e0      	ldr	r0, [r4, #12]
 80048da:	4303      	orrs	r3, r0
 80048dc:	6920      	ldr	r0, [r4, #16]
 80048de:	4303      	orrs	r3, r0
 80048e0:	6960      	ldr	r0, [r4, #20]
 80048e2:	4303      	orrs	r3, r0
 80048e4:	69a0      	ldr	r0, [r4, #24]
 80048e6:	4303      	orrs	r3, r0
 80048e8:	69e0      	ldr	r0, [r4, #28]
 80048ea:	4303      	orrs	r3, r0
 80048ec:	6a20      	ldr	r0, [r4, #32]
 80048ee:	4303      	orrs	r3, r0
 80048f0:	4313      	orrs	r3, r2
 80048f2:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80048f4:	4620      	mov	r0, r4
 80048f6:	f7ff ff89 	bl	800480c <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80048fa:	68a3      	ldr	r3, [r4, #8]
 80048fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004900:	d022      	beq.n	8004948 <HAL_DMA_Init+0xac>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004902:	6863      	ldr	r3, [r4, #4]
 8004904:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004906:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800490a:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800490c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800490e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004910:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004912:	6863      	ldr	r3, [r4, #4]
 8004914:	3b01      	subs	r3, #1
 8004916:	2b03      	cmp	r3, #3
 8004918:	d919      	bls.n	800494e <HAL_DMA_Init+0xb2>
    hdma->DMAmuxRequestGen = 0U;
 800491a:	2300      	movs	r3, #0
 800491c:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800491e:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004920:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004922:	2000      	movs	r0, #0
 8004924:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8004926:	2301      	movs	r3, #1
 8004928:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 800492c:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8004930:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004932:	4b11      	ldr	r3, [pc, #68]	; (8004978 <HAL_DMA_Init+0xdc>)
 8004934:	4413      	add	r3, r2
 8004936:	490e      	ldr	r1, [pc, #56]	; (8004970 <HAL_DMA_Init+0xd4>)
 8004938:	fba1 1303 	umull	r1, r3, r1, r3
 800493c:	091b      	lsrs	r3, r3, #4
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004942:	4b0e      	ldr	r3, [pc, #56]	; (800497c <HAL_DMA_Init+0xe0>)
 8004944:	6403      	str	r3, [r0, #64]	; 0x40
 8004946:	e7bb      	b.n	80048c0 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004948:	2300      	movs	r3, #0
 800494a:	6063      	str	r3, [r4, #4]
 800494c:	e7d9      	b.n	8004902 <HAL_DMA_Init+0x66>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800494e:	4620      	mov	r0, r4
 8004950:	f7ff ff8e 	bl	8004870 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004954:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004956:	2200      	movs	r2, #0
 8004958:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800495a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800495c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800495e:	605a      	str	r2, [r3, #4]
 8004960:	e7df      	b.n	8004922 <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 8004962:	2001      	movs	r0, #1
}
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	40020407 	.word	0x40020407
 800496c:	bffdfff8 	.word	0xbffdfff8
 8004970:	cccccccd 	.word	0xcccccccd
 8004974:	40020000 	.word	0x40020000
 8004978:	bffdfbf8 	.word	0xbffdfbf8
 800497c:	40020400 	.word	0x40020400

08004980 <HAL_DMA_DeInit>:
  if (NULL == hdma)
 8004980:	2800      	cmp	r0, #0
 8004982:	d04b      	beq.n	8004a1c <HAL_DMA_DeInit+0x9c>
{
 8004984:	b538      	push	{r3, r4, r5, lr}
 8004986:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8004988:	6802      	ldr	r2, [r0, #0]
 800498a:	6813      	ldr	r3, [r2, #0]
 800498c:	f023 0301 	bic.w	r3, r3, #1
 8004990:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004992:	6802      	ldr	r2, [r0, #0]
 8004994:	4b22      	ldr	r3, [pc, #136]	; (8004a20 <HAL_DMA_DeInit+0xa0>)
 8004996:	429a      	cmp	r2, r3
 8004998:	d82c      	bhi.n	80049f4 <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800499a:	4b22      	ldr	r3, [pc, #136]	; (8004a24 <HAL_DMA_DeInit+0xa4>)
 800499c:	4413      	add	r3, r2
 800499e:	4922      	ldr	r1, [pc, #136]	; (8004a28 <HAL_DMA_DeInit+0xa8>)
 80049a0:	fba1 1303 	umull	r1, r3, r1, r3
 80049a4:	091b      	lsrs	r3, r3, #4
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80049aa:	4b20      	ldr	r3, [pc, #128]	; (8004a2c <HAL_DMA_DeInit+0xac>)
 80049ac:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->Instance->CCR = 0U;
 80049ae:	2500      	movs	r5, #0
 80049b0:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80049b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80049b4:	f003 021c 	and.w	r2, r3, #28
 80049b8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80049ba:	2301      	movs	r3, #1
 80049bc:	4093      	lsls	r3, r2
 80049be:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80049c0:	4620      	mov	r0, r4
 80049c2:	f7ff ff23 	bl	800480c <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 80049c6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80049c8:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049ca:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80049cc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80049ce:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80049d0:	6863      	ldr	r3, [r4, #4]
 80049d2:	3b01      	subs	r3, #1
 80049d4:	2b03      	cmp	r3, #3
 80049d6:	d918      	bls.n	8004a0a <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = 0U;
 80049d8:	2000      	movs	r0, #0
 80049da:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 80049dc:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80049de:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 80049e0:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80049e2:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80049e4:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80049e6:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049e8:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 80049ea:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 80049ee:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 80049f2:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80049f4:	4b0e      	ldr	r3, [pc, #56]	; (8004a30 <HAL_DMA_DeInit+0xb0>)
 80049f6:	4413      	add	r3, r2
 80049f8:	490b      	ldr	r1, [pc, #44]	; (8004a28 <HAL_DMA_DeInit+0xa8>)
 80049fa:	fba1 1303 	umull	r1, r3, r1, r3
 80049fe:	091b      	lsrs	r3, r3, #4
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004a04:	4b0b      	ldr	r3, [pc, #44]	; (8004a34 <HAL_DMA_DeInit+0xb4>)
 8004a06:	6403      	str	r3, [r0, #64]	; 0x40
 8004a08:	e7d1      	b.n	80049ae <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004a0a:	4620      	mov	r0, r4
 8004a0c:	f7ff ff30 	bl	8004870 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004a10:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004a12:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a14:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004a16:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004a18:	605a      	str	r2, [r3, #4]
 8004a1a:	e7dd      	b.n	80049d8 <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 8004a1c:	2001      	movs	r0, #1
}
 8004a1e:	4770      	bx	lr
 8004a20:	40020407 	.word	0x40020407
 8004a24:	bffdfff8 	.word	0xbffdfff8
 8004a28:	cccccccd 	.word	0xcccccccd
 8004a2c:	40020000 	.word	0x40020000
 8004a30:	bffdfbf8 	.word	0xbffdfbf8
 8004a34:	40020400 	.word	0x40020400

08004a38 <HAL_DMA_Start_IT>:
{
 8004a38:	b538      	push	{r3, r4, r5, lr}
 8004a3a:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8004a3c:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 8004a40:	2801      	cmp	r0, #1
 8004a42:	d043      	beq.n	8004acc <HAL_DMA_Start_IT+0x94>
 8004a44:	2001      	movs	r0, #1
 8004a46:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 8004a4a:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 8004a4e:	b2c0      	uxtb	r0, r0
 8004a50:	2801      	cmp	r0, #1
 8004a52:	d006      	beq.n	8004a62 <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004a54:	2380      	movs	r3, #128	; 0x80
 8004a56:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8004a58:	2300      	movs	r3, #0
 8004a5a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_ERROR;
 8004a5e:	2001      	movs	r0, #1
}
 8004a60:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a62:	2002      	movs	r0, #2
 8004a64:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a68:	2000      	movs	r0, #0
 8004a6a:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8004a6c:	6825      	ldr	r5, [r4, #0]
 8004a6e:	6828      	ldr	r0, [r5, #0]
 8004a70:	f020 0001 	bic.w	r0, r0, #1
 8004a74:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a76:	4620      	mov	r0, r4
 8004a78:	f7ff fea0 	bl	80047bc <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8004a7c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004a7e:	b1d3      	cbz	r3, 8004ab6 <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a80:	6822      	ldr	r2, [r4, #0]
 8004a82:	6813      	ldr	r3, [r2, #0]
 8004a84:	f043 030e 	orr.w	r3, r3, #14
 8004a88:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004a8a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8004a92:	d003      	beq.n	8004a9c <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a9a:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8004a9c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004a9e:	b11b      	cbz	r3, 8004aa8 <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004aa6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8004aa8:	6822      	ldr	r2, [r4, #0]
 8004aaa:	6813      	ldr	r3, [r2, #0]
 8004aac:	f043 0301 	orr.w	r3, r3, #1
 8004ab0:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ab2:	2000      	movs	r0, #0
 8004ab4:	e7d4      	b.n	8004a60 <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ab6:	6822      	ldr	r2, [r4, #0]
 8004ab8:	6813      	ldr	r3, [r2, #0]
 8004aba:	f023 0304 	bic.w	r3, r3, #4
 8004abe:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004ac0:	6822      	ldr	r2, [r4, #0]
 8004ac2:	6813      	ldr	r3, [r2, #0]
 8004ac4:	f043 030a 	orr.w	r3, r3, #10
 8004ac8:	6013      	str	r3, [r2, #0]
 8004aca:	e7de      	b.n	8004a8a <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8004acc:	2002      	movs	r0, #2
 8004ace:	e7c7      	b.n	8004a60 <HAL_DMA_Start_IT+0x28>

08004ad0 <HAL_DMA_Abort>:
  if (NULL == hdma)
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2800      	cmp	r0, #0
 8004ad4:	d034      	beq.n	8004b40 <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004ad6:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8004ada:	b2d2      	uxtb	r2, r2
 8004adc:	2a02      	cmp	r2, #2
 8004ade:	d006      	beq.n	8004aee <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ae0:	2204      	movs	r2, #4
 8004ae2:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    return HAL_ERROR;
 8004aea:	2001      	movs	r0, #1
 8004aec:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004aee:	6801      	ldr	r1, [r0, #0]
 8004af0:	680a      	ldr	r2, [r1, #0]
 8004af2:	f022 020e 	bic.w	r2, r2, #14
 8004af6:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004af8:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004afa:	680a      	ldr	r2, [r1, #0]
 8004afc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b00:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8004b02:	6801      	ldr	r1, [r0, #0]
 8004b04:	680a      	ldr	r2, [r1, #0]
 8004b06:	f022 0201 	bic.w	r2, r2, #1
 8004b0a:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004b0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004b0e:	f002 011c 	and.w	r1, r2, #28
 8004b12:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8004b14:	2201      	movs	r2, #1
 8004b16:	408a      	lsls	r2, r1
 8004b18:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b1c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004b1e:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8004b20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b22:	b132      	cbz	r2, 8004b32 <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004b24:	6811      	ldr	r1, [r2, #0]
 8004b26:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8004b2a:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004b2e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004b30:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8004b38:	2000      	movs	r0, #0
 8004b3a:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return HAL_OK;
 8004b3e:	4770      	bx	lr
    return HAL_ERROR;
 8004b40:	2001      	movs	r0, #1
}
 8004b42:	4770      	bx	lr

08004b44 <HAL_DMA_Abort_IT>:
{
 8004b44:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004b46:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d003      	beq.n	8004b58 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b50:	2304      	movs	r3, #4
 8004b52:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8004b54:	2001      	movs	r0, #1
}
 8004b56:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b58:	6802      	ldr	r2, [r0, #0]
 8004b5a:	6813      	ldr	r3, [r2, #0]
 8004b5c:	f023 030e 	bic.w	r3, r3, #14
 8004b60:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8004b62:	6802      	ldr	r2, [r0, #0]
 8004b64:	6813      	ldr	r3, [r2, #0]
 8004b66:	f023 0301 	bic.w	r3, r3, #1
 8004b6a:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004b6c:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8004b6e:	6813      	ldr	r3, [r2, #0]
 8004b70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b74:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004b76:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004b78:	f003 021c 	and.w	r2, r3, #28
 8004b7c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004b7e:	2301      	movs	r3, #1
 8004b80:	4093      	lsls	r3, r2
 8004b82:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b84:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004b86:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004b88:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8004b8a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004b8c:	b133      	cbz	r3, 8004b9c <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b94:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b96:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8004b98:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8004b9a:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8004ba8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004baa:	b113      	cbz	r3, 8004bb2 <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8004bac:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8004bae:	2000      	movs	r0, #0
 8004bb0:	e7d1      	b.n	8004b56 <HAL_DMA_Abort_IT+0x12>
 8004bb2:	2000      	movs	r0, #0
 8004bb4:	e7cf      	b.n	8004b56 <HAL_DMA_Abort_IT+0x12>
	...

08004bb8 <HAL_DMA_IRQHandler>:
{
 8004bb8:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004bba:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004bbc:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8004bbe:	6804      	ldr	r4, [r0, #0]
 8004bc0:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004bc2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004bc4:	f003 031c 	and.w	r3, r3, #28
 8004bc8:	2204      	movs	r2, #4
 8004bca:	409a      	lsls	r2, r3
 8004bcc:	420a      	tst	r2, r1
 8004bce:	d015      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x44>
 8004bd0:	f015 0f04 	tst.w	r5, #4
 8004bd4:	d012      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004bd6:	6823      	ldr	r3, [r4, #0]
 8004bd8:	f013 0f20 	tst.w	r3, #32
 8004bdc:	d103      	bne.n	8004be6 <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004bde:	6823      	ldr	r3, [r4, #0]
 8004be0:	f023 0304 	bic.w	r3, r3, #4
 8004be4:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004be6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004be8:	f003 021c 	and.w	r2, r3, #28
 8004bec:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004bee:	2304      	movs	r3, #4
 8004bf0:	4093      	lsls	r3, r2
 8004bf2:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8004bf4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004bf6:	b103      	cbz	r3, 8004bfa <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 8004bf8:	4798      	blx	r3
}
 8004bfa:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004bfc:	2202      	movs	r2, #2
 8004bfe:	409a      	lsls	r2, r3
 8004c00:	420a      	tst	r2, r1
 8004c02:	d028      	beq.n	8004c56 <HAL_DMA_IRQHandler+0x9e>
 8004c04:	f015 0f02 	tst.w	r5, #2
 8004c08:	d025      	beq.n	8004c56 <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c0a:	6823      	ldr	r3, [r4, #0]
 8004c0c:	f013 0f20 	tst.w	r3, #32
 8004c10:	d106      	bne.n	8004c20 <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004c12:	6823      	ldr	r3, [r4, #0]
 8004c14:	f023 030a 	bic.w	r3, r3, #10
 8004c18:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004c20:	6802      	ldr	r2, [r0, #0]
 8004c22:	4b1c      	ldr	r3, [pc, #112]	; (8004c94 <HAL_DMA_IRQHandler+0xdc>)
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d90e      	bls.n	8004c46 <HAL_DMA_IRQHandler+0x8e>
 8004c28:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004c2a:	f003 021c 	and.w	r2, r3, #28
 8004c2e:	2302      	movs	r3, #2
 8004c30:	4093      	lsls	r3, r2
 8004c32:	4a19      	ldr	r2, [pc, #100]	; (8004c98 <HAL_DMA_IRQHandler+0xe0>)
 8004c34:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 8004c36:	2300      	movs	r3, #0
 8004c38:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      if (hdma->XferCpltCallback != NULL)
 8004c3c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d0db      	beq.n	8004bfa <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 8004c42:	4798      	blx	r3
 8004c44:	e7d9      	b.n	8004bfa <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004c46:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004c48:	f003 021c 	and.w	r2, r3, #28
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	4093      	lsls	r3, r2
 8004c50:	4a12      	ldr	r2, [pc, #72]	; (8004c9c <HAL_DMA_IRQHandler+0xe4>)
 8004c52:	6053      	str	r3, [r2, #4]
 8004c54:	e7ef      	b.n	8004c36 <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004c56:	2208      	movs	r2, #8
 8004c58:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5c:	420b      	tst	r3, r1
 8004c5e:	d0cc      	beq.n	8004bfa <HAL_DMA_IRQHandler+0x42>
 8004c60:	f015 0f08 	tst.w	r5, #8
 8004c64:	d0c9      	beq.n	8004bfa <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c66:	6823      	ldr	r3, [r4, #0]
 8004c68:	f023 030e 	bic.w	r3, r3, #14
 8004c6c:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004c6e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004c70:	f003 031c 	and.w	r3, r3, #28
 8004c74:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004c76:	2201      	movs	r2, #1
 8004c78:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7c:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c7e:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8004c80:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8004c84:	2300      	movs	r3, #0
 8004c86:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8004c8a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d0b4      	beq.n	8004bfa <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8004c90:	4798      	blx	r3
  return;
 8004c92:	e7b2      	b.n	8004bfa <HAL_DMA_IRQHandler+0x42>
 8004c94:	40020080 	.word	0x40020080
 8004c98:	40020400 	.word	0x40020400
 8004c9c:	40020000 	.word	0x40020000

08004ca0 <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 8004ca0:	b178      	cbz	r0, 8004cc2 <HAL_DMA_ConfigChannelAttributes+0x22>
  ccr = READ_REG(hdma->Instance->CCR);
 8004ca2:	6803      	ldr	r3, [r0, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8004ca6:	f011 0f10 	tst.w	r1, #16
 8004caa:	d004      	beq.n	8004cb6 <HAL_DMA_ConfigChannelAttributes+0x16>
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8004cac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004cb0:	d004      	beq.n	8004cbc <HAL_DMA_ConfigChannelAttributes+0x1c>
      SET_BIT(ccr, DMA_CCR_PRIV);
 8004cb2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  WRITE_REG(hdma->Instance->CCR, ccr);
 8004cb6:	601a      	str	r2, [r3, #0]
  return status;
 8004cb8:	2000      	movs	r0, #0
 8004cba:	4770      	bx	lr
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8004cbc:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8004cc0:	e7f9      	b.n	8004cb6 <HAL_DMA_ConfigChannelAttributes+0x16>
    return status;
 8004cc2:	2001      	movs	r0, #1
}
 8004cc4:	4770      	bx	lr
	...

08004cc8 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004cc8:	b410      	push	{r4}
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004cca:	4c05      	ldr	r4, [pc, #20]	; (8004ce0 <FLASH_Program_DoubleWord+0x18>)
 8004ccc:	6961      	ldr	r1, [r4, #20]
 8004cce:	f041 0101 	orr.w	r1, r1, #1
 8004cd2:	6161      	str	r1, [r4, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8004cd4:	6002      	str	r2, [r0, #0]
 8004cd6:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8004cda:	6043      	str	r3, [r0, #4]
}
 8004cdc:	bc10      	pop	{r4}
 8004cde:	4770      	bx	lr
 8004ce0:	58004000 	.word	0x58004000

08004ce4 <FLASH_Program_Fast>:

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8004ce4:	4a0c      	ldr	r2, [pc, #48]	; (8004d18 <FLASH_Program_Fast+0x34>)
 8004ce6:	6953      	ldr	r3, [r2, #20]
 8004ce8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cec:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cee:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004cf2:	b672      	cpsid	i
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8004cf4:	2340      	movs	r3, #64	; 0x40
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8004cf6:	f851 2b04 	ldr.w	r2, [r1], #4
 8004cfa:	f840 2b04 	str.w	r2, [r0], #4
    dest_addr++;
    src_addr++;
    row_index--;
 8004cfe:	3b01      	subs	r3, #1
  }
  while (row_index != 0U);
 8004d00:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8004d04:	d1f7      	bne.n	8004cf6 <FLASH_Program_Fast+0x12>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8004d06:	4b04      	ldr	r3, [pc, #16]	; (8004d18 <FLASH_Program_Fast+0x34>)
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004d0e:	d1fa      	bne.n	8004d06 <FLASH_Program_Fast+0x22>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d10:	f38c 8810 	msr	PRIMASK, ip
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	58004000 	.word	0x58004000

08004d1c <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004d1c:	4b09      	ldr	r3, [pc, #36]	; (8004d44 <HAL_FLASH_Unlock+0x28>)
 8004d1e:	695b      	ldr	r3, [r3, #20]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	db01      	blt.n	8004d28 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8004d24:	2000      	movs	r0, #0
 8004d26:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004d28:	4b06      	ldr	r3, [pc, #24]	; (8004d44 <HAL_FLASH_Unlock+0x28>)
 8004d2a:	4a07      	ldr	r2, [pc, #28]	; (8004d48 <HAL_FLASH_Unlock+0x2c>)
 8004d2c:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004d2e:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8004d32:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	db01      	blt.n	8004d3e <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8004d3a:	2000      	movs	r0, #0
 8004d3c:	4770      	bx	lr
      status = HAL_ERROR;
 8004d3e:	2001      	movs	r0, #1
}
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	58004000 	.word	0x58004000
 8004d48:	45670123 	.word	0x45670123

08004d4c <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004d4c:	4b05      	ldr	r3, [pc, #20]	; (8004d64 <HAL_FLASH_Lock+0x18>)
 8004d4e:	695a      	ldr	r2, [r3, #20]
 8004d50:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004d54:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8004d56:	695b      	ldr	r3, [r3, #20]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	db01      	blt.n	8004d60 <HAL_FLASH_Lock+0x14>
    status = HAL_ERROR;
 8004d5c:	2001      	movs	r0, #1
}
 8004d5e:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8004d60:	2000      	movs	r0, #0
 8004d62:	4770      	bx	lr
 8004d64:	58004000 	.word	0x58004000

08004d68 <FLASH_WaitForLastOperation>:
{
 8004d68:	b538      	push	{r3, r4, r5, lr}
 8004d6a:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8004d6c:	f7fc feac 	bl	8001ac8 <HAL_GetTick>
 8004d70:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004d72:	4b16      	ldr	r3, [pc, #88]	; (8004dcc <FLASH_WaitForLastOperation+0x64>)
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004d7a:	d006      	beq.n	8004d8a <FLASH_WaitForLastOperation+0x22>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004d7c:	f7fc fea4 	bl	8001ac8 <HAL_GetTick>
 8004d80:	1b00      	subs	r0, r0, r4
 8004d82:	42a8      	cmp	r0, r5
 8004d84:	d3f5      	bcc.n	8004d72 <FLASH_WaitForLastOperation+0xa>
      return HAL_TIMEOUT;
 8004d86:	2003      	movs	r0, #3
}
 8004d88:	bd38      	pop	{r3, r4, r5, pc}
  error = FLASH->SR;
 8004d8a:	4b10      	ldr	r3, [pc, #64]	; (8004dcc <FLASH_WaitForLastOperation+0x64>)
 8004d8c:	691b      	ldr	r3, [r3, #16]
  if ((error & FLASH_FLAG_EOP) != 0U)
 8004d8e:	f013 0f01 	tst.w	r3, #1
 8004d92:	d002      	beq.n	8004d9a <FLASH_WaitForLastOperation+0x32>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004d94:	4a0d      	ldr	r2, [pc, #52]	; (8004dcc <FLASH_WaitForLastOperation+0x64>)
 8004d96:	2101      	movs	r1, #1
 8004d98:	6111      	str	r1, [r2, #16]
  error &= FLASH_FLAG_SR_ERRORS;
 8004d9a:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  __HAL_FLASH_CLEAR_FLAG(error);
 8004d9e:	4013      	ands	r3, r2
 8004da0:	d001      	beq.n	8004da6 <FLASH_WaitForLastOperation+0x3e>
 8004da2:	4a0a      	ldr	r2, [pc, #40]	; (8004dcc <FLASH_WaitForLastOperation+0x64>)
 8004da4:	6113      	str	r3, [r2, #16]
  if (error != 0U)
 8004da6:	b95b      	cbnz	r3, 8004dc0 <FLASH_WaitForLastOperation+0x58>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8004da8:	4b08      	ldr	r3, [pc, #32]	; (8004dcc <FLASH_WaitForLastOperation+0x64>)
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004db0:	d00a      	beq.n	8004dc8 <FLASH_WaitForLastOperation+0x60>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004db2:	f7fc fe89 	bl	8001ac8 <HAL_GetTick>
 8004db6:	1b00      	subs	r0, r0, r4
 8004db8:	42a8      	cmp	r0, r5
 8004dba:	d3f5      	bcc.n	8004da8 <FLASH_WaitForLastOperation+0x40>
      return HAL_TIMEOUT;
 8004dbc:	2003      	movs	r0, #3
 8004dbe:	e7e3      	b.n	8004d88 <FLASH_WaitForLastOperation+0x20>
    pFlash.ErrorCode = error;
 8004dc0:	4a03      	ldr	r2, [pc, #12]	; (8004dd0 <FLASH_WaitForLastOperation+0x68>)
 8004dc2:	6053      	str	r3, [r2, #4]
    return HAL_ERROR;
 8004dc4:	2001      	movs	r0, #1
 8004dc6:	e7df      	b.n	8004d88 <FLASH_WaitForLastOperation+0x20>
  return HAL_OK;
 8004dc8:	2000      	movs	r0, #0
 8004dca:	e7dd      	b.n	8004d88 <FLASH_WaitForLastOperation+0x20>
 8004dcc:	58004000 	.word	0x58004000
 8004dd0:	20000654 	.word	0x20000654

08004dd4 <HAL_FLASH_Program>:
{
 8004dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dd6:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 8004dd8:	4b15      	ldr	r3, [pc, #84]	; (8004e30 <HAL_FLASH_Program+0x5c>)
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d025      	beq.n	8004e2c <HAL_FLASH_Program+0x58>
 8004de0:	4604      	mov	r4, r0
 8004de2:	460d      	mov	r5, r1
 8004de4:	4616      	mov	r6, r2
 8004de6:	4b12      	ldr	r3, [pc, #72]	; (8004e30 <HAL_FLASH_Program+0x5c>)
 8004de8:	2201      	movs	r2, #1
 8004dea:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004dec:	2200      	movs	r2, #0
 8004dee:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004df0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004df4:	f7ff ffb8 	bl	8004d68 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8004df8:	b970      	cbnz	r0, 8004e18 <HAL_FLASH_Program+0x44>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004dfa:	2c01      	cmp	r4, #1
 8004dfc:	d010      	beq.n	8004e20 <HAL_FLASH_Program+0x4c>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8004dfe:	4631      	mov	r1, r6
 8004e00:	4628      	mov	r0, r5
 8004e02:	f7ff ff6f 	bl	8004ce4 <FLASH_Program_Fast>
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004e06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e0a:	f7ff ffad 	bl	8004d68 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8004e0e:	4a09      	ldr	r2, [pc, #36]	; (8004e34 <HAL_FLASH_Program+0x60>)
 8004e10:	6953      	ldr	r3, [r2, #20]
 8004e12:	ea23 0404 	bic.w	r4, r3, r4
 8004e16:	6154      	str	r4, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 8004e18:	4b05      	ldr	r3, [pc, #20]	; (8004e30 <HAL_FLASH_Program+0x5c>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	701a      	strb	r2, [r3, #0]
}
 8004e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_DoubleWord(Address, Data);
 8004e20:	4632      	mov	r2, r6
 8004e22:	463b      	mov	r3, r7
 8004e24:	4628      	mov	r0, r5
 8004e26:	f7ff ff4f 	bl	8004cc8 <FLASH_Program_DoubleWord>
 8004e2a:	e7ec      	b.n	8004e06 <HAL_FLASH_Program+0x32>
  __HAL_LOCK(&pFlash);
 8004e2c:	2002      	movs	r0, #2
 8004e2e:	e7f6      	b.n	8004e1e <HAL_FLASH_Program+0x4a>
 8004e30:	20000654 	.word	0x20000654
 8004e34:	58004000 	.word	0x58004000

08004e38 <FLASH_MassErase>:
{
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8004e38:	4a03      	ldr	r2, [pc, #12]	; (8004e48 <FLASH_MassErase+0x10>)
 8004e3a:	6953      	ldr	r3, [r2, #20]
 8004e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e40:	f043 0304 	orr.w	r3, r3, #4
 8004e44:	6153      	str	r3, [r2, #20]
#endif
}
 8004e46:	4770      	bx	lr
 8004e48:	58004000 	.word	0x58004000

08004e4c <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8004e4c:	4b18      	ldr	r3, [pc, #96]	; (8004eb0 <FLASH_FlushCaches+0x64>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d006      	beq.n	8004e66 <FLASH_FlushCaches+0x1a>
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8004e58:	4b15      	ldr	r3, [pc, #84]	; (8004eb0 <FLASH_FlushCaches+0x64>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d012      	beq.n	8004e8a <FLASH_FlushCaches+0x3e>
    __HAL_FLASH_DATA_CACHE_RESET();
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }
#endif
}
 8004e64:	4770      	bx	lr
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004e66:	4b12      	ldr	r3, [pc, #72]	; (8004eb0 <FLASH_FlushCaches+0x64>)
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004e6e:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e76:	601a      	str	r2, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e7e:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e86:	601a      	str	r2, [r3, #0]
 8004e88:	e7e6      	b.n	8004e58 <FLASH_FlushCaches+0xc>
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004e8a:	4b09      	ldr	r3, [pc, #36]	; (8004eb0 <FLASH_FlushCaches+0x64>)
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e92:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_RESET();
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e9a:	601a      	str	r2, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ea2:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004eaa:	601a      	str	r2, [r3, #0]
}
 8004eac:	e7da      	b.n	8004e64 <FLASH_FlushCaches+0x18>
 8004eae:	bf00      	nop
 8004eb0:	58004000 	.word	0x58004000

08004eb4 <FLASH_AcknowledgePageErase>:
static void FLASH_AcknowledgePageErase(void)
{
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8004eb4:	4a03      	ldr	r2, [pc, #12]	; (8004ec4 <FLASH_AcknowledgePageErase+0x10>)
 8004eb6:	6953      	ldr	r3, [r2, #20]
 8004eb8:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8004ebc:	f023 0302 	bic.w	r3, r3, #2
 8004ec0:	6153      	str	r3, [r2, #20]
#endif
}
 8004ec2:	4770      	bx	lr
 8004ec4:	58004000 	.word	0x58004000

08004ec8 <FLASH_PageErase>:
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8004ec8:	4a05      	ldr	r2, [pc, #20]	; (8004ee0 <FLASH_PageErase+0x18>)
 8004eca:	6953      	ldr	r3, [r2, #20]
 8004ecc:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8004ed0:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
 8004ed4:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8004ed8:	f040 0002 	orr.w	r0, r0, #2
 8004edc:	6150      	str	r0, [r2, #20]
}
 8004ede:	4770      	bx	lr
 8004ee0:	58004000 	.word	0x58004000

08004ee4 <HAL_FLASHEx_Erase>:
{
 8004ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8004ee6:	4b1e      	ldr	r3, [pc, #120]	; (8004f60 <HAL_FLASHEx_Erase+0x7c>)
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d035      	beq.n	8004f5a <HAL_FLASHEx_Erase+0x76>
 8004eee:	4605      	mov	r5, r0
 8004ef0:	460f      	mov	r7, r1
 8004ef2:	4b1b      	ldr	r3, [pc, #108]	; (8004f60 <HAL_FLASHEx_Erase+0x7c>)
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004ef8:	2200      	movs	r2, #0
 8004efa:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004efc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f00:	f7ff ff32 	bl	8004d68 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8004f04:	4606      	mov	r6, r0
 8004f06:	bb18      	cbnz	r0, 8004f50 <HAL_FLASHEx_Erase+0x6c>
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004f08:	682b      	ldr	r3, [r5, #0]
 8004f0a:	2b04      	cmp	r3, #4
 8004f0c:	d013      	beq.n	8004f36 <HAL_FLASHEx_Erase+0x52>
      *PageError = 0xFFFFFFFFU;
 8004f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f12:	603b      	str	r3, [r7, #0]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004f14:	686c      	ldr	r4, [r5, #4]
 8004f16:	686b      	ldr	r3, [r5, #4]
 8004f18:	68aa      	ldr	r2, [r5, #8]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	42a3      	cmp	r3, r4
 8004f1e:	d913      	bls.n	8004f48 <HAL_FLASHEx_Erase+0x64>
        FLASH_PageErase(index);
 8004f20:	4620      	mov	r0, r4
 8004f22:	f7ff ffd1 	bl	8004ec8 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004f26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f2a:	f7ff ff1d 	bl	8004d68 <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 8004f2e:	4606      	mov	r6, r0
 8004f30:	b948      	cbnz	r0, 8004f46 <HAL_FLASHEx_Erase+0x62>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004f32:	3401      	adds	r4, #1
 8004f34:	e7ef      	b.n	8004f16 <HAL_FLASHEx_Erase+0x32>
      FLASH_MassErase();
 8004f36:	f7ff ff7f 	bl	8004e38 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004f3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f3e:	f7ff ff13 	bl	8004d68 <FLASH_WaitForLastOperation>
 8004f42:	4606      	mov	r6, r0
 8004f44:	e002      	b.n	8004f4c <HAL_FLASHEx_Erase+0x68>
          *PageError = index;
 8004f46:	603c      	str	r4, [r7, #0]
      FLASH_AcknowledgePageErase();
 8004f48:	f7ff ffb4 	bl	8004eb4 <FLASH_AcknowledgePageErase>
    FLASH_FlushCaches();
 8004f4c:	f7ff ff7e 	bl	8004e4c <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8004f50:	4b03      	ldr	r3, [pc, #12]	; (8004f60 <HAL_FLASHEx_Erase+0x7c>)
 8004f52:	2200      	movs	r2, #0
 8004f54:	701a      	strb	r2, [r3, #0]
}
 8004f56:	4630      	mov	r0, r6
 8004f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8004f5a:	2602      	movs	r6, #2
 8004f5c:	e7fb      	b.n	8004f56 <HAL_FLASHEx_Erase+0x72>
 8004f5e:	bf00      	nop
 8004f60:	20000654 	.word	0x20000654

08004f64 <HAL_FLASHEx_Erase_IT>:
{
 8004f64:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(&pFlash);
 8004f66:	4b17      	ldr	r3, [pc, #92]	; (8004fc4 <HAL_FLASHEx_Erase_IT+0x60>)
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d028      	beq.n	8004fc0 <HAL_FLASHEx_Erase_IT+0x5c>
 8004f6e:	4604      	mov	r4, r0
 8004f70:	4b14      	ldr	r3, [pc, #80]	; (8004fc4 <HAL_FLASHEx_Erase_IT+0x60>)
 8004f72:	2201      	movs	r2, #1
 8004f74:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004f76:	2200      	movs	r2, #0
 8004f78:	605a      	str	r2, [r3, #4]
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8004f7a:	6802      	ldr	r2, [r0, #0]
 8004f7c:	609a      	str	r2, [r3, #8]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004f7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f82:	f7ff fef1 	bl	8004d68 <FLASH_WaitForLastOperation>
  if (status != HAL_OK)
 8004f86:	4605      	mov	r5, r0
 8004f88:	b120      	cbz	r0, 8004f94 <HAL_FLASHEx_Erase_IT+0x30>
    __HAL_UNLOCK(&pFlash);
 8004f8a:	4b0e      	ldr	r3, [pc, #56]	; (8004fc4 <HAL_FLASHEx_Erase_IT+0x60>)
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	701a      	strb	r2, [r3, #0]
}
 8004f90:	4628      	mov	r0, r5
 8004f92:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8004f94:	4a0c      	ldr	r2, [pc, #48]	; (8004fc8 <HAL_FLASHEx_Erase_IT+0x64>)
 8004f96:	6953      	ldr	r3, [r2, #20]
 8004f98:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8004f9c:	6153      	str	r3, [r2, #20]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004f9e:	6823      	ldr	r3, [r4, #0]
 8004fa0:	2b04      	cmp	r3, #4
 8004fa2:	d007      	beq.n	8004fb4 <HAL_FLASHEx_Erase_IT+0x50>
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 8004fa4:	68a2      	ldr	r2, [r4, #8]
 8004fa6:	4b07      	ldr	r3, [pc, #28]	; (8004fc4 <HAL_FLASHEx_Erase_IT+0x60>)
 8004fa8:	615a      	str	r2, [r3, #20]
      pFlash.Page = pEraseInit->Page;
 8004faa:	6860      	ldr	r0, [r4, #4]
 8004fac:	6118      	str	r0, [r3, #16]
      FLASH_PageErase(pEraseInit->Page);
 8004fae:	f7ff ff8b 	bl	8004ec8 <FLASH_PageErase>
 8004fb2:	e7ed      	b.n	8004f90 <HAL_FLASHEx_Erase_IT+0x2c>
      pFlash.Page = 0;
 8004fb4:	4b03      	ldr	r3, [pc, #12]	; (8004fc4 <HAL_FLASHEx_Erase_IT+0x60>)
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	611a      	str	r2, [r3, #16]
      FLASH_MassErase();
 8004fba:	f7ff ff3d 	bl	8004e38 <FLASH_MassErase>
 8004fbe:	e7e7      	b.n	8004f90 <HAL_FLASHEx_Erase_IT+0x2c>
  __HAL_LOCK(&pFlash);
 8004fc0:	2502      	movs	r5, #2
 8004fc2:	e7e5      	b.n	8004f90 <HAL_FLASHEx_Erase_IT+0x2c>
 8004fc4:	20000654 	.word	0x20000654
 8004fc8:	58004000 	.word	0x58004000

08004fcc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fcc:	b570      	push	{r4, r5, r6, lr}
  uint32_t position = 0x00u;
 8004fce:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004fd0:	e069      	b.n	80050a6 <HAL_GPIO_Init+0xda>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004fd2:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004fd4:	005e      	lsls	r6, r3, #1
 8004fd6:	2403      	movs	r4, #3
 8004fd8:	40b4      	lsls	r4, r6
 8004fda:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004fde:	68cc      	ldr	r4, [r1, #12]
 8004fe0:	40b4      	lsls	r4, r6
 8004fe2:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8004fe4:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fe6:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004fe8:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fec:	684c      	ldr	r4, [r1, #4]
 8004fee:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8004ff2:	409c      	lsls	r4, r3
 8004ff4:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 8004ff8:	6044      	str	r4, [r0, #4]
 8004ffa:	e065      	b.n	80050c8 <HAL_GPIO_Init+0xfc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ffc:	08dd      	lsrs	r5, r3, #3
 8004ffe:	3508      	adds	r5, #8
 8005000:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005004:	f003 0407 	and.w	r4, r3, #7
 8005008:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800500c:	240f      	movs	r4, #15
 800500e:	fa04 f40c 	lsl.w	r4, r4, ip
 8005012:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005016:	690c      	ldr	r4, [r1, #16]
 8005018:	fa04 f40c 	lsl.w	r4, r4, ip
 800501c:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8005020:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8005024:	e067      	b.n	80050f6 <HAL_GPIO_Init+0x12a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005026:	2402      	movs	r4, #2
 8005028:	e000      	b.n	800502c <HAL_GPIO_Init+0x60>
 800502a:	2400      	movs	r4, #0
 800502c:	fa04 f40e 	lsl.w	r4, r4, lr
 8005030:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005032:	f10c 0c02 	add.w	ip, ip, #2
 8005036:	4d4b      	ldr	r5, [pc, #300]	; (8005164 <HAL_GPIO_Init+0x198>)
 8005038:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800503c:	4c4a      	ldr	r4, [pc, #296]	; (8005168 <HAL_GPIO_Init+0x19c>)
 800503e:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8005040:	43d4      	mvns	r4, r2
 8005042:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005046:	f8d1 c004 	ldr.w	ip, [r1, #4]
 800504a:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
 800504e:	d001      	beq.n	8005054 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8005050:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8005054:	4d44      	ldr	r5, [pc, #272]	; (8005168 <HAL_GPIO_Init+0x19c>)
 8005056:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8005058:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 800505a:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800505e:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8005062:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
 8005066:	d001      	beq.n	800506c <HAL_GPIO_Init+0xa0>
        {
          temp |= iocurrent;
 8005068:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 800506c:	4d3e      	ldr	r5, [pc, #248]	; (8005168 <HAL_GPIO_Init+0x19c>)
 800506e:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8005070:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005074:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005078:	f8d1 c004 	ldr.w	ip, [r1, #4]
 800507c:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
 8005080:	d001      	beq.n	8005086 <HAL_GPIO_Init+0xba>
        {
          temp |= iocurrent;
 8005082:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8005086:	4d38      	ldr	r5, [pc, #224]	; (8005168 <HAL_GPIO_Init+0x19c>)
 8005088:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800508c:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005090:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005092:	684e      	ldr	r6, [r1, #4]
 8005094:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8005098:	d001      	beq.n	800509e <HAL_GPIO_Init+0xd2>
        {
          temp |= iocurrent;
 800509a:	ea42 0405 	orr.w	r4, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 800509e:	4a32      	ldr	r2, [pc, #200]	; (8005168 <HAL_GPIO_Init+0x19c>)
 80050a0:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80050a4:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050a6:	680a      	ldr	r2, [r1, #0]
 80050a8:	fa32 f403 	lsrs.w	r4, r2, r3
 80050ac:	d058      	beq.n	8005160 <HAL_GPIO_Init+0x194>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80050ae:	f04f 0c01 	mov.w	ip, #1
 80050b2:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 80050b6:	ea1c 0202 	ands.w	r2, ip, r2
 80050ba:	d0f3      	beq.n	80050a4 <HAL_GPIO_Init+0xd8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050bc:	684c      	ldr	r4, [r1, #4]
 80050be:	f004 0403 	and.w	r4, r4, #3
 80050c2:	3c01      	subs	r4, #1
 80050c4:	2c01      	cmp	r4, #1
 80050c6:	d984      	bls.n	8004fd2 <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80050c8:	684c      	ldr	r4, [r1, #4]
 80050ca:	f004 0403 	and.w	r4, r4, #3
 80050ce:	2c03      	cmp	r4, #3
 80050d0:	d00c      	beq.n	80050ec <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 80050d2:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80050d4:	005d      	lsls	r5, r3, #1
 80050d6:	f04f 0c03 	mov.w	ip, #3
 80050da:	fa0c fc05 	lsl.w	ip, ip, r5
 80050de:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80050e2:	688c      	ldr	r4, [r1, #8]
 80050e4:	40ac      	lsls	r4, r5
 80050e6:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 80050ea:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050ec:	684c      	ldr	r4, [r1, #4]
 80050ee:	f004 0403 	and.w	r4, r4, #3
 80050f2:	2c02      	cmp	r4, #2
 80050f4:	d082      	beq.n	8004ffc <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 80050f6:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80050f8:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80050fc:	f04f 0c03 	mov.w	ip, #3
 8005100:	fa0c fc0e 	lsl.w	ip, ip, lr
 8005104:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005108:	684c      	ldr	r4, [r1, #4]
 800510a:	f004 0403 	and.w	r4, r4, #3
 800510e:	fa04 f40e 	lsl.w	r4, r4, lr
 8005112:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8005116:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005118:	684c      	ldr	r4, [r1, #4]
 800511a:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 800511e:	d0c1      	beq.n	80050a4 <HAL_GPIO_Init+0xd8>
        temp = SYSCFG->EXTICR[position >> 2u];
 8005120:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8005124:	f10c 0502 	add.w	r5, ip, #2
 8005128:	4c0e      	ldr	r4, [pc, #56]	; (8005164 <HAL_GPIO_Init+0x198>)
 800512a:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800512e:	f003 0403 	and.w	r4, r3, #3
 8005132:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8005136:	2407      	movs	r4, #7
 8005138:	fa04 f40e 	lsl.w	r4, r4, lr
 800513c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005140:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8005144:	f43f af71 	beq.w	800502a <HAL_GPIO_Init+0x5e>
 8005148:	4c08      	ldr	r4, [pc, #32]	; (800516c <HAL_GPIO_Init+0x1a0>)
 800514a:	42a0      	cmp	r0, r4
 800514c:	d006      	beq.n	800515c <HAL_GPIO_Init+0x190>
 800514e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005152:	42a0      	cmp	r0, r4
 8005154:	f43f af67 	beq.w	8005026 <HAL_GPIO_Init+0x5a>
 8005158:	2407      	movs	r4, #7
 800515a:	e767      	b.n	800502c <HAL_GPIO_Init+0x60>
 800515c:	2401      	movs	r4, #1
 800515e:	e765      	b.n	800502c <HAL_GPIO_Init+0x60>
  }
}
 8005160:	bd70      	pop	{r4, r5, r6, pc}
 8005162:	bf00      	nop
 8005164:	40010000 	.word	0x40010000
 8005168:	58000800 	.word	0x58000800
 800516c:	48000400 	.word	0x48000400

08005170 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 8005170:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005172:	fa31 f203 	lsrs.w	r2, r1, r3
 8005176:	d071      	beq.n	800525c <HAL_GPIO_DeInit+0xec>
{
 8005178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800517a:	e02e      	b.n	80051da <HAL_GPIO_DeInit+0x6a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800517c:	2502      	movs	r5, #2
 800517e:	e000      	b.n	8005182 <HAL_GPIO_DeInit+0x12>
 8005180:	2500      	movs	r5, #0
 8005182:	fa05 fc0c 	lsl.w	ip, r5, ip
 8005186:	45a4      	cmp	ip, r4
 8005188:	d049      	beq.n	800521e <HAL_GPIO_DeInit+0xae>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800518a:	6804      	ldr	r4, [r0, #0]
 800518c:	005d      	lsls	r5, r3, #1
 800518e:	f04f 0c03 	mov.w	ip, #3
 8005192:	fa0c fc05 	lsl.w	ip, ip, r5
 8005196:	ea44 040c 	orr.w	r4, r4, ip
 800519a:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800519c:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80051a0:	f10e 0e08 	add.w	lr, lr, #8
 80051a4:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 80051a8:	f003 0507 	and.w	r5, r3, #7
 80051ac:	00ae      	lsls	r6, r5, #2
 80051ae:	250f      	movs	r5, #15
 80051b0:	40b5      	lsls	r5, r6
 80051b2:	ea24 0405 	bic.w	r4, r4, r5
 80051b6:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80051ba:	6884      	ldr	r4, [r0, #8]
 80051bc:	ea24 040c 	bic.w	r4, r4, ip
 80051c0:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80051c2:	6844      	ldr	r4, [r0, #4]
 80051c4:	ea24 0202 	bic.w	r2, r4, r2
 80051c8:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80051ca:	68c2      	ldr	r2, [r0, #12]
 80051cc:	ea22 020c 	bic.w	r2, r2, ip
 80051d0:	60c2      	str	r2, [r0, #12]
    }

    position++;
 80051d2:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 80051d4:	fa31 f203 	lsrs.w	r2, r1, r3
 80051d8:	d03f      	beq.n	800525a <HAL_GPIO_DeInit+0xea>
    iocurrent = (GPIO_Pin) & (1uL << position);
 80051da:	2201      	movs	r2, #1
 80051dc:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 80051de:	ea12 0701 	ands.w	r7, r2, r1
 80051e2:	d0f6      	beq.n	80051d2 <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2u];
 80051e4:	089e      	lsrs	r6, r3, #2
 80051e6:	1cb5      	adds	r5, r6, #2
 80051e8:	4c1d      	ldr	r4, [pc, #116]	; (8005260 <HAL_GPIO_DeInit+0xf0>)
 80051ea:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 80051ee:	f003 0c03 	and.w	ip, r3, #3
 80051f2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80051f6:	f04f 0e07 	mov.w	lr, #7
 80051fa:	fa0e fe0c 	lsl.w	lr, lr, ip
 80051fe:	ea0e 0404 	and.w	r4, lr, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005202:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8005206:	d0bb      	beq.n	8005180 <HAL_GPIO_DeInit+0x10>
 8005208:	4d16      	ldr	r5, [pc, #88]	; (8005264 <HAL_GPIO_DeInit+0xf4>)
 800520a:	42a8      	cmp	r0, r5
 800520c:	d005      	beq.n	800521a <HAL_GPIO_DeInit+0xaa>
 800520e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005212:	42a8      	cmp	r0, r5
 8005214:	d0b2      	beq.n	800517c <HAL_GPIO_DeInit+0xc>
 8005216:	2507      	movs	r5, #7
 8005218:	e7b3      	b.n	8005182 <HAL_GPIO_DeInit+0x12>
 800521a:	2501      	movs	r5, #1
 800521c:	e7b1      	b.n	8005182 <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 800521e:	4c12      	ldr	r4, [pc, #72]	; (8005268 <HAL_GPIO_DeInit+0xf8>)
 8005220:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8005224:	ea25 0507 	bic.w	r5, r5, r7
 8005228:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 800522c:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8005230:	ea25 0507 	bic.w	r5, r5, r7
 8005234:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 8005238:	6825      	ldr	r5, [r4, #0]
 800523a:	ea25 0507 	bic.w	r5, r5, r7
 800523e:	6025      	str	r5, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8005240:	6865      	ldr	r5, [r4, #4]
 8005242:	ea25 0707 	bic.w	r7, r5, r7
 8005246:	6067      	str	r7, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005248:	4d05      	ldr	r5, [pc, #20]	; (8005260 <HAL_GPIO_DeInit+0xf0>)
 800524a:	3602      	adds	r6, #2
 800524c:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 8005250:	ea24 040e 	bic.w	r4, r4, lr
 8005254:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
 8005258:	e797      	b.n	800518a <HAL_GPIO_DeInit+0x1a>
  }
}
 800525a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	40010000 	.word	0x40010000
 8005264:	48000400 	.word	0x48000400
 8005268:	58000800 	.word	0x58000800

0800526c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800526c:	b10a      	cbz	r2, 8005272 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800526e:	6181      	str	r1, [r0, #24]
 8005270:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005272:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8005274:	4770      	bx	lr

08005276 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005276:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005278:	ea01 0203 	and.w	r2, r1, r3
 800527c:	ea21 0103 	bic.w	r1, r1, r3
 8005280:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005284:	6181      	str	r1, [r0, #24]
}
 8005286:	4770      	bx	lr

08005288 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005288:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800528a:	4b05      	ldr	r3, [pc, #20]	; (80052a0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	4203      	tst	r3, r0
 8005290:	d100      	bne.n	8005294 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8005292:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005294:	4b02      	ldr	r3, [pc, #8]	; (80052a0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8005296:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005298:	f7fd fd4c 	bl	8002d34 <HAL_GPIO_EXTI_Callback>
}
 800529c:	e7f9      	b.n	8005292 <HAL_GPIO_EXTI_IRQHandler+0xa>
 800529e:	bf00      	nop
 80052a0:	58000800 	.word	0x58000800

080052a4 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80052a4:	6803      	ldr	r3, [r0, #0]
 80052a6:	699a      	ldr	r2, [r3, #24]
 80052a8:	f012 0f02 	tst.w	r2, #2
 80052ac:	d001      	beq.n	80052b2 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 80052ae:	2200      	movs	r2, #0
 80052b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052b2:	6803      	ldr	r3, [r0, #0]
 80052b4:	699a      	ldr	r2, [r3, #24]
 80052b6:	f012 0f01 	tst.w	r2, #1
 80052ba:	d103      	bne.n	80052c4 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80052bc:	699a      	ldr	r2, [r3, #24]
 80052be:	f042 0201 	orr.w	r2, r2, #1
 80052c2:	619a      	str	r2, [r3, #24]
  }
}
 80052c4:	4770      	bx	lr

080052c6 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80052c6:	b410      	push	{r4}
 80052c8:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052ca:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80052ce:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80052d2:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052d4:	4321      	orrs	r1, r4
 80052d6:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80052da:	6802      	ldr	r2, [r0, #0]
 80052dc:	6853      	ldr	r3, [r2, #4]
 80052de:	0d64      	lsrs	r4, r4, #21
 80052e0:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 80052e4:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 80052e8:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 80052ec:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 80052f0:	f044 0403 	orr.w	r4, r4, #3
 80052f4:	ea23 0404 	bic.w	r4, r3, r4
 80052f8:	4321      	orrs	r1, r4
 80052fa:	6051      	str	r1, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80052fc:	bc10      	pop	{r4}
 80052fe:	4770      	bx	lr

08005300 <I2C_IsErrorOccurred>:
{
 8005300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005304:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 8005306:	6803      	ldr	r3, [r0, #0]
 8005308:	699f      	ldr	r7, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800530a:	f017 0710 	ands.w	r7, r7, #16
 800530e:	d04c      	beq.n	80053aa <I2C_IsErrorOccurred+0xaa>
 8005310:	460e      	mov	r6, r1
 8005312:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005314:	2210      	movs	r2, #16
 8005316:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8005318:	2500      	movs	r5, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800531a:	6823      	ldr	r3, [r4, #0]
 800531c:	6998      	ldr	r0, [r3, #24]
 800531e:	f010 0f20 	tst.w	r0, #32
 8005322:	d13b      	bne.n	800539c <I2C_IsErrorOccurred+0x9c>
 8005324:	2d00      	cmp	r5, #0
 8005326:	d139      	bne.n	800539c <I2C_IsErrorOccurred+0x9c>
      if (Timeout != HAL_MAX_DELAY)
 8005328:	f1b6 3fff 	cmp.w	r6, #4294967295
 800532c:	d0f5      	beq.n	800531a <I2C_IsErrorOccurred+0x1a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800532e:	f7fc fbcb 	bl	8001ac8 <HAL_GetTick>
 8005332:	eba0 0008 	sub.w	r0, r0, r8
 8005336:	42b0      	cmp	r0, r6
 8005338:	d801      	bhi.n	800533e <I2C_IsErrorOccurred+0x3e>
 800533a:	2e00      	cmp	r6, #0
 800533c:	d1ed      	bne.n	800531a <I2C_IsErrorOccurred+0x1a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800533e:	6821      	ldr	r1, [r4, #0]
 8005340:	684b      	ldr	r3, [r1, #4]
 8005342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          tmp2 = hi2c->Mode;
 8005346:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 800534a:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800534c:	6988      	ldr	r0, [r1, #24]
 800534e:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8005352:	d002      	beq.n	800535a <I2C_IsErrorOccurred+0x5a>
 8005354:	b90b      	cbnz	r3, 800535a <I2C_IsErrorOccurred+0x5a>
              (tmp1 != I2C_CR2_STOP) && \
 8005356:	2a20      	cmp	r2, #32
 8005358:	d118      	bne.n	800538c <I2C_IsErrorOccurred+0x8c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800535a:	6823      	ldr	r3, [r4, #0]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	f013 0f20 	tst.w	r3, #32
 8005362:	d1da      	bne.n	800531a <I2C_IsErrorOccurred+0x1a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005364:	f7fc fbb0 	bl	8001ac8 <HAL_GetTick>
 8005368:	eba0 0008 	sub.w	r0, r0, r8
 800536c:	2819      	cmp	r0, #25
 800536e:	d9f4      	bls.n	800535a <I2C_IsErrorOccurred+0x5a>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005370:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005372:	f043 0320 	orr.w	r3, r3, #32
 8005376:	6463      	str	r3, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005378:	2320      	movs	r3, #32
 800537a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800537e:	2300      	movs	r3, #0
 8005380:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
              __HAL_UNLOCK(hi2c);
 8005384:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
              status = HAL_ERROR;
 8005388:	2501      	movs	r5, #1
 800538a:	e7e6      	b.n	800535a <I2C_IsErrorOccurred+0x5a>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800538c:	684b      	ldr	r3, [r1, #4]
 800538e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005392:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 8005394:	f7fc fb98 	bl	8001ac8 <HAL_GetTick>
 8005398:	4680      	mov	r8, r0
 800539a:	e7de      	b.n	800535a <I2C_IsErrorOccurred+0x5a>
    if (status == HAL_OK)
 800539c:	2d00      	cmp	r5, #0
 800539e:	d140      	bne.n	8005422 <I2C_IsErrorOccurred+0x122>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053a0:	2220      	movs	r2, #32
 80053a2:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 80053a4:	2704      	movs	r7, #4
    status = HAL_ERROR;
 80053a6:	2501      	movs	r5, #1
 80053a8:	e000      	b.n	80053ac <I2C_IsErrorOccurred+0xac>
  HAL_StatusTypeDef status = HAL_OK;
 80053aa:	2500      	movs	r5, #0
  itflag = hi2c->Instance->ISR;
 80053ac:	6822      	ldr	r2, [r4, #0]
 80053ae:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80053b0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80053b4:	d005      	beq.n	80053c2 <I2C_IsErrorOccurred+0xc2>
    error_code |= HAL_I2C_ERROR_BERR;
 80053b6:	f047 0701 	orr.w	r7, r7, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80053ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80053be:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 80053c0:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80053c2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80053c6:	d006      	beq.n	80053d6 <I2C_IsErrorOccurred+0xd6>
    error_code |= HAL_I2C_ERROR_OVR;
 80053c8:	f047 0708 	orr.w	r7, r7, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80053cc:	6822      	ldr	r2, [r4, #0]
 80053ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80053d2:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 80053d4:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80053d6:	f413 7f00 	tst.w	r3, #512	; 0x200
 80053da:	d024      	beq.n	8005426 <I2C_IsErrorOccurred+0x126>
    error_code |= HAL_I2C_ERROR_ARLO;
 80053dc:	f047 0702 	orr.w	r7, r7, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80053e0:	6823      	ldr	r3, [r4, #0]
 80053e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053e6:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 80053e8:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 80053ea:	4620      	mov	r0, r4
 80053ec:	f7ff ff5a 	bl	80052a4 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80053f0:	6822      	ldr	r2, [r4, #0]
 80053f2:	6853      	ldr	r3, [r2, #4]
 80053f4:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80053f8:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80053fc:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005400:	f023 0301 	bic.w	r3, r3, #1
 8005404:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8005406:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005408:	431f      	orrs	r7, r3
 800540a:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800540c:	2320      	movs	r3, #32
 800540e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005412:	2300      	movs	r3, #0
 8005414:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8005418:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800541c:	4628      	mov	r0, r5
 800541e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    error_code |= HAL_I2C_ERROR_AF;
 8005422:	2704      	movs	r7, #4
 8005424:	e7c2      	b.n	80053ac <I2C_IsErrorOccurred+0xac>
  if (status != HAL_OK)
 8005426:	2d00      	cmp	r5, #0
 8005428:	d0f8      	beq.n	800541c <I2C_IsErrorOccurred+0x11c>
 800542a:	e7de      	b.n	80053ea <I2C_IsErrorOccurred+0xea>

0800542c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800542c:	b570      	push	{r4, r5, r6, lr}
 800542e:	4604      	mov	r4, r0
 8005430:	460d      	mov	r5, r1
 8005432:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005434:	6823      	ldr	r3, [r4, #0]
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	f013 0f02 	tst.w	r3, #2
 800543c:	d11d      	bne.n	800547a <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800543e:	4632      	mov	r2, r6
 8005440:	4629      	mov	r1, r5
 8005442:	4620      	mov	r0, r4
 8005444:	f7ff ff5c 	bl	8005300 <I2C_IsErrorOccurred>
 8005448:	b9c8      	cbnz	r0, 800547e <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 800544a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800544e:	d0f1      	beq.n	8005434 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005450:	f7fc fb3a 	bl	8001ac8 <HAL_GetTick>
 8005454:	1b80      	subs	r0, r0, r6
 8005456:	42a8      	cmp	r0, r5
 8005458:	d801      	bhi.n	800545e <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800545a:	2d00      	cmp	r5, #0
 800545c:	d1ea      	bne.n	8005434 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800545e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005460:	f043 0320 	orr.w	r3, r3, #32
 8005464:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005466:	2320      	movs	r3, #32
 8005468:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800546c:	2300      	movs	r3, #0
 800546e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8005472:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8005476:	2001      	movs	r0, #1
 8005478:	e000      	b.n	800547c <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 800547a:	2000      	movs	r0, #0
}
 800547c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800547e:	2001      	movs	r0, #1
 8005480:	e7fc      	b.n	800547c <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08005482 <I2C_WaitOnFlagUntilTimeout>:
{
 8005482:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005486:	4606      	mov	r6, r0
 8005488:	4688      	mov	r8, r1
 800548a:	4617      	mov	r7, r2
 800548c:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800548e:	6834      	ldr	r4, [r6, #0]
 8005490:	69a4      	ldr	r4, [r4, #24]
 8005492:	ea38 0304 	bics.w	r3, r8, r4
 8005496:	bf0c      	ite	eq
 8005498:	f04f 0c01 	moveq.w	ip, #1
 800549c:	f04f 0c00 	movne.w	ip, #0
 80054a0:	45bc      	cmp	ip, r7
 80054a2:	d118      	bne.n	80054d6 <I2C_WaitOnFlagUntilTimeout+0x54>
    if (Timeout != HAL_MAX_DELAY)
 80054a4:	f1b5 3fff 	cmp.w	r5, #4294967295
 80054a8:	d0f1      	beq.n	800548e <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054aa:	f7fc fb0d 	bl	8001ac8 <HAL_GetTick>
 80054ae:	9b06      	ldr	r3, [sp, #24]
 80054b0:	1ac0      	subs	r0, r0, r3
 80054b2:	42a8      	cmp	r0, r5
 80054b4:	d801      	bhi.n	80054ba <I2C_WaitOnFlagUntilTimeout+0x38>
 80054b6:	2d00      	cmp	r5, #0
 80054b8:	d1e9      	bne.n	800548e <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054ba:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80054bc:	f043 0320 	orr.w	r3, r3, #32
 80054c0:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80054c2:	2320      	movs	r3, #32
 80054c4:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054c8:	2300      	movs	r3, #0
 80054ca:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80054ce:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 80054d2:	2001      	movs	r0, #1
 80054d4:	e000      	b.n	80054d8 <I2C_WaitOnFlagUntilTimeout+0x56>
  return HAL_OK;
 80054d6:	2000      	movs	r0, #0
}
 80054d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080054dc <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80054dc:	b570      	push	{r4, r5, r6, lr}
 80054de:	4605      	mov	r5, r0
 80054e0:	460c      	mov	r4, r1
 80054e2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054e4:	682b      	ldr	r3, [r5, #0]
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	f013 0f20 	tst.w	r3, #32
 80054ec:	d11a      	bne.n	8005524 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80054ee:	4632      	mov	r2, r6
 80054f0:	4621      	mov	r1, r4
 80054f2:	4628      	mov	r0, r5
 80054f4:	f7ff ff04 	bl	8005300 <I2C_IsErrorOccurred>
 80054f8:	b9b0      	cbnz	r0, 8005528 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054fa:	f7fc fae5 	bl	8001ac8 <HAL_GetTick>
 80054fe:	1b80      	subs	r0, r0, r6
 8005500:	42a0      	cmp	r0, r4
 8005502:	d801      	bhi.n	8005508 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8005504:	2c00      	cmp	r4, #0
 8005506:	d1ed      	bne.n	80054e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005508:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800550a:	f043 0320 	orr.w	r3, r3, #32
 800550e:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005510:	2320      	movs	r3, #32
 8005512:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005516:	2300      	movs	r3, #0
 8005518:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800551c:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8005520:	2001      	movs	r0, #1
}
 8005522:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8005524:	2000      	movs	r0, #0
 8005526:	e7fc      	b.n	8005522 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8005528:	2001      	movs	r0, #1
 800552a:	e7fa      	b.n	8005522 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

0800552c <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800552c:	b570      	push	{r4, r5, r6, lr}
 800552e:	4604      	mov	r4, r0
 8005530:	460d      	mov	r5, r1
 8005532:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005534:	6823      	ldr	r3, [r4, #0]
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	f013 0f04 	tst.w	r3, #4
 800553c:	d149      	bne.n	80055d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800553e:	4632      	mov	r2, r6
 8005540:	4629      	mov	r1, r5
 8005542:	4620      	mov	r0, r4
 8005544:	f7ff fedc 	bl	8005300 <I2C_IsErrorOccurred>
 8005548:	4601      	mov	r1, r0
 800554a:	2800      	cmp	r0, #0
 800554c:	d143      	bne.n	80055d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xaa>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800554e:	6823      	ldr	r3, [r4, #0]
 8005550:	699a      	ldr	r2, [r3, #24]
 8005552:	f012 0f20 	tst.w	r2, #32
 8005556:	d113      	bne.n	8005580 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005558:	f7fc fab6 	bl	8001ac8 <HAL_GetTick>
 800555c:	1b80      	subs	r0, r0, r6
 800555e:	42a8      	cmp	r0, r5
 8005560:	d801      	bhi.n	8005566 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 8005562:	2d00      	cmp	r5, #0
 8005564:	d1e6      	bne.n	8005534 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005566:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005568:	f043 0320 	orr.w	r3, r3, #32
 800556c:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800556e:	2320      	movs	r3, #32
 8005570:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8005574:	2300      	movs	r3, #0
 8005576:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800557a:	2101      	movs	r1, #1
}
 800557c:	4608      	mov	r0, r1
 800557e:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005580:	699a      	ldr	r2, [r3, #24]
 8005582:	f012 0f04 	tst.w	r2, #4
 8005586:	d002      	beq.n	800558e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8005588:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800558a:	2a00      	cmp	r2, #0
 800558c:	d1f6      	bne.n	800557c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800558e:	699a      	ldr	r2, [r3, #24]
 8005590:	f012 0f10 	tst.w	r2, #16
 8005594:	d01a      	beq.n	80055cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005596:	2210      	movs	r2, #16
 8005598:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800559a:	2304      	movs	r3, #4
 800559c:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800559e:	6823      	ldr	r3, [r4, #0]
 80055a0:	2220      	movs	r2, #32
 80055a2:	61da      	str	r2, [r3, #28]
        I2C_RESET_CR2(hi2c);
 80055a4:	6821      	ldr	r1, [r4, #0]
 80055a6:	684b      	ldr	r3, [r1, #4]
 80055a8:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80055ac:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80055b0:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80055b4:	f023 0301 	bic.w	r3, r3, #1
 80055b8:	604b      	str	r3, [r1, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 80055ba:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055be:	2300      	movs	r3, #0
 80055c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80055c4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80055c8:	2101      	movs	r1, #1
 80055ca:	e7d7      	b.n	800557c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055cc:	2300      	movs	r3, #0
 80055ce:	6463      	str	r3, [r4, #68]	; 0x44
 80055d0:	e7e5      	b.n	800559e <I2C_WaitOnRXNEFlagUntilTimeout+0x72>
  return HAL_OK;
 80055d2:	2100      	movs	r1, #0
 80055d4:	e7d2      	b.n	800557c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
      return HAL_ERROR;
 80055d6:	2101      	movs	r1, #1
 80055d8:	e7d0      	b.n	800557c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>

080055da <HAL_I2C_Init>:
  if (hi2c == NULL)
 80055da:	2800      	cmp	r0, #0
 80055dc:	d059      	beq.n	8005692 <HAL_I2C_Init+0xb8>
{
 80055de:	b510      	push	{r4, lr}
 80055e0:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80055e2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d043      	beq.n	8005672 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80055ea:	2324      	movs	r3, #36	; 0x24
 80055ec:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80055f0:	6822      	ldr	r2, [r4, #0]
 80055f2:	6813      	ldr	r3, [r2, #0]
 80055f4:	f023 0301 	bic.w	r3, r3, #1
 80055f8:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80055fa:	6863      	ldr	r3, [r4, #4]
 80055fc:	6822      	ldr	r2, [r4, #0]
 80055fe:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8005602:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005604:	6822      	ldr	r2, [r4, #0]
 8005606:	6893      	ldr	r3, [r2, #8]
 8005608:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800560c:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800560e:	68e3      	ldr	r3, [r4, #12]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d033      	beq.n	800567c <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005614:	68a3      	ldr	r3, [r4, #8]
 8005616:	6822      	ldr	r2, [r4, #0]
 8005618:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 800561c:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800561e:	68e3      	ldr	r3, [r4, #12]
 8005620:	2b02      	cmp	r3, #2
 8005622:	d031      	beq.n	8005688 <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005624:	6822      	ldr	r2, [r4, #0]
 8005626:	6853      	ldr	r3, [r2, #4]
 8005628:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800562c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005630:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005632:	6822      	ldr	r2, [r4, #0]
 8005634:	68d3      	ldr	r3, [r2, #12]
 8005636:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800563a:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800563c:	6923      	ldr	r3, [r4, #16]
 800563e:	6962      	ldr	r2, [r4, #20]
 8005640:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005642:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005644:	6822      	ldr	r2, [r4, #0]
 8005646:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800564a:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800564c:	69e3      	ldr	r3, [r4, #28]
 800564e:	6a21      	ldr	r1, [r4, #32]
 8005650:	6822      	ldr	r2, [r4, #0]
 8005652:	430b      	orrs	r3, r1
 8005654:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8005656:	6822      	ldr	r2, [r4, #0]
 8005658:	6813      	ldr	r3, [r2, #0]
 800565a:	f043 0301 	orr.w	r3, r3, #1
 800565e:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005660:	2000      	movs	r0, #0
 8005662:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005664:	2320      	movs	r3, #32
 8005666:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800566a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800566c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8005670:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8005672:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8005676:	f7fb ffad 	bl	80015d4 <HAL_I2C_MspInit>
 800567a:	e7b6      	b.n	80055ea <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800567c:	68a3      	ldr	r3, [r4, #8]
 800567e:	6822      	ldr	r2, [r4, #0]
 8005680:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005684:	6093      	str	r3, [r2, #8]
 8005686:	e7ca      	b.n	800561e <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005688:	6823      	ldr	r3, [r4, #0]
 800568a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800568e:	605a      	str	r2, [r3, #4]
 8005690:	e7c8      	b.n	8005624 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8005692:	2001      	movs	r0, #1
}
 8005694:	4770      	bx	lr
	...

08005698 <HAL_I2C_Master_Transmit>:
{
 8005698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800569c:	b082      	sub	sp, #8
 800569e:	460f      	mov	r7, r1
 80056a0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80056a2:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 80056a6:	b2c9      	uxtb	r1, r1
 80056a8:	2920      	cmp	r1, #32
 80056aa:	f040 80a3 	bne.w	80057f4 <HAL_I2C_Master_Transmit+0x15c>
 80056ae:	4604      	mov	r4, r0
 80056b0:	4690      	mov	r8, r2
 80056b2:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 80056b4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	f000 809f 	beq.w	80057fc <HAL_I2C_Master_Transmit+0x164>
 80056be:	f04f 0a01 	mov.w	sl, #1
 80056c2:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80056c6:	f7fc f9ff 	bl	8001ac8 <HAL_GetTick>
 80056ca:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80056cc:	9000      	str	r0, [sp, #0]
 80056ce:	2319      	movs	r3, #25
 80056d0:	4652      	mov	r2, sl
 80056d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80056d6:	4620      	mov	r0, r4
 80056d8:	f7ff fed3 	bl	8005482 <I2C_WaitOnFlagUntilTimeout>
 80056dc:	2800      	cmp	r0, #0
 80056de:	f040 808f 	bne.w	8005800 <HAL_I2C_Master_Transmit+0x168>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80056e2:	2321      	movs	r3, #33	; 0x21
 80056e4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80056e8:	2310      	movs	r3, #16
 80056ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056ee:	2300      	movs	r3, #0
 80056f0:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80056f2:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80056f6:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80056fa:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056fc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80056fe:	b29b      	uxth	r3, r3
 8005700:	2bff      	cmp	r3, #255	; 0xff
 8005702:	d90a      	bls.n	800571a <HAL_I2C_Master_Transmit+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005704:	22ff      	movs	r2, #255	; 0xff
 8005706:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005708:	4b41      	ldr	r3, [pc, #260]	; (8005810 <HAL_I2C_Master_Transmit+0x178>)
 800570a:	9300      	str	r3, [sp, #0]
 800570c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005710:	4639      	mov	r1, r7
 8005712:	4620      	mov	r0, r4
 8005714:	f7ff fdd7 	bl	80052c6 <I2C_TransferConfig>
 8005718:	e018      	b.n	800574c <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = hi2c->XferCount;
 800571a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800571c:	b292      	uxth	r2, r2
 800571e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005720:	4b3b      	ldr	r3, [pc, #236]	; (8005810 <HAL_I2C_Master_Transmit+0x178>)
 8005722:	9300      	str	r3, [sp, #0]
 8005724:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005728:	b2d2      	uxtb	r2, r2
 800572a:	4639      	mov	r1, r7
 800572c:	4620      	mov	r0, r4
 800572e:	f7ff fdca 	bl	80052c6 <I2C_TransferConfig>
 8005732:	e00b      	b.n	800574c <HAL_I2C_Master_Transmit+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 8005734:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005736:	b292      	uxth	r2, r2
 8005738:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800573a:	2300      	movs	r3, #0
 800573c:	9300      	str	r3, [sp, #0]
 800573e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005742:	b2d2      	uxtb	r2, r2
 8005744:	4639      	mov	r1, r7
 8005746:	4620      	mov	r0, r4
 8005748:	f7ff fdbd 	bl	80052c6 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800574c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800574e:	b29b      	uxth	r3, r3
 8005750:	2b00      	cmp	r3, #0
 8005752:	d033      	beq.n	80057bc <HAL_I2C_Master_Transmit+0x124>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005754:	462a      	mov	r2, r5
 8005756:	4631      	mov	r1, r6
 8005758:	4620      	mov	r0, r4
 800575a:	f7ff fe67 	bl	800542c <I2C_WaitOnTXISFlagUntilTimeout>
 800575e:	2800      	cmp	r0, #0
 8005760:	d150      	bne.n	8005804 <HAL_I2C_Master_Transmit+0x16c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005762:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005764:	6823      	ldr	r3, [r4, #0]
 8005766:	7812      	ldrb	r2, [r2, #0]
 8005768:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 800576a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800576c:	3301      	adds	r3, #1
 800576e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005770:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005772:	b29b      	uxth	r3, r3
 8005774:	3b01      	subs	r3, #1
 8005776:	b29b      	uxth	r3, r3
 8005778:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800577a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800577c:	3b01      	subs	r3, #1
 800577e:	b29b      	uxth	r3, r3
 8005780:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005782:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005784:	b292      	uxth	r2, r2
 8005786:	2a00      	cmp	r2, #0
 8005788:	d0e0      	beq.n	800574c <HAL_I2C_Master_Transmit+0xb4>
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1de      	bne.n	800574c <HAL_I2C_Master_Transmit+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800578e:	9500      	str	r5, [sp, #0]
 8005790:	4633      	mov	r3, r6
 8005792:	2200      	movs	r2, #0
 8005794:	2180      	movs	r1, #128	; 0x80
 8005796:	4620      	mov	r0, r4
 8005798:	f7ff fe73 	bl	8005482 <I2C_WaitOnFlagUntilTimeout>
 800579c:	bba0      	cbnz	r0, 8005808 <HAL_I2C_Master_Transmit+0x170>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800579e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	2bff      	cmp	r3, #255	; 0xff
 80057a4:	d9c6      	bls.n	8005734 <HAL_I2C_Master_Transmit+0x9c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80057a6:	22ff      	movs	r2, #255	; 0xff
 80057a8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80057aa:	2300      	movs	r3, #0
 80057ac:	9300      	str	r3, [sp, #0]
 80057ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80057b2:	4639      	mov	r1, r7
 80057b4:	4620      	mov	r0, r4
 80057b6:	f7ff fd86 	bl	80052c6 <I2C_TransferConfig>
 80057ba:	e7c7      	b.n	800574c <HAL_I2C_Master_Transmit+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057bc:	462a      	mov	r2, r5
 80057be:	4631      	mov	r1, r6
 80057c0:	4620      	mov	r0, r4
 80057c2:	f7ff fe8b 	bl	80054dc <I2C_WaitOnSTOPFlagUntilTimeout>
 80057c6:	bb08      	cbnz	r0, 800580c <HAL_I2C_Master_Transmit+0x174>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057c8:	6823      	ldr	r3, [r4, #0]
 80057ca:	2220      	movs	r2, #32
 80057cc:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80057ce:	6821      	ldr	r1, [r4, #0]
 80057d0:	684b      	ldr	r3, [r1, #4]
 80057d2:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80057d6:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80057da:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80057de:	f023 0301 	bic.w	r3, r3, #1
 80057e2:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80057e4:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80057e8:	2300      	movs	r3, #0
 80057ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80057ee:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 80057f2:	e000      	b.n	80057f6 <HAL_I2C_Master_Transmit+0x15e>
    return HAL_BUSY;
 80057f4:	2002      	movs	r0, #2
}
 80057f6:	b002      	add	sp, #8
 80057f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 80057fc:	2002      	movs	r0, #2
 80057fe:	e7fa      	b.n	80057f6 <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 8005800:	2001      	movs	r0, #1
 8005802:	e7f8      	b.n	80057f6 <HAL_I2C_Master_Transmit+0x15e>
        return HAL_ERROR;
 8005804:	2001      	movs	r0, #1
 8005806:	e7f6      	b.n	80057f6 <HAL_I2C_Master_Transmit+0x15e>
          return HAL_ERROR;
 8005808:	2001      	movs	r0, #1
 800580a:	e7f4      	b.n	80057f6 <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 800580c:	2001      	movs	r0, #1
 800580e:	e7f2      	b.n	80057f6 <HAL_I2C_Master_Transmit+0x15e>
 8005810:	80002000 	.word	0x80002000

08005814 <HAL_I2C_Master_Receive>:
{
 8005814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005818:	b082      	sub	sp, #8
 800581a:	460f      	mov	r7, r1
 800581c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800581e:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8005822:	b2c9      	uxtb	r1, r1
 8005824:	2920      	cmp	r1, #32
 8005826:	f040 80a2 	bne.w	800596e <HAL_I2C_Master_Receive+0x15a>
 800582a:	4604      	mov	r4, r0
 800582c:	4690      	mov	r8, r2
 800582e:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 8005830:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005834:	2b01      	cmp	r3, #1
 8005836:	f000 809e 	beq.w	8005976 <HAL_I2C_Master_Receive+0x162>
 800583a:	f04f 0a01 	mov.w	sl, #1
 800583e:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8005842:	f7fc f941 	bl	8001ac8 <HAL_GetTick>
 8005846:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005848:	9000      	str	r0, [sp, #0]
 800584a:	2319      	movs	r3, #25
 800584c:	4652      	mov	r2, sl
 800584e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005852:	4620      	mov	r0, r4
 8005854:	f7ff fe15 	bl	8005482 <I2C_WaitOnFlagUntilTimeout>
 8005858:	2800      	cmp	r0, #0
 800585a:	f040 808e 	bne.w	800597a <HAL_I2C_Master_Receive+0x166>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800585e:	2322      	movs	r3, #34	; 0x22
 8005860:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005864:	2310      	movs	r3, #16
 8005866:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800586a:	2300      	movs	r3, #0
 800586c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800586e:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8005872:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005876:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005878:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800587a:	b29b      	uxth	r3, r3
 800587c:	2bff      	cmp	r3, #255	; 0xff
 800587e:	d90a      	bls.n	8005896 <HAL_I2C_Master_Receive+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005880:	22ff      	movs	r2, #255	; 0xff
 8005882:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005884:	4b41      	ldr	r3, [pc, #260]	; (800598c <HAL_I2C_Master_Receive+0x178>)
 8005886:	9300      	str	r3, [sp, #0]
 8005888:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800588c:	4639      	mov	r1, r7
 800588e:	4620      	mov	r0, r4
 8005890:	f7ff fd19 	bl	80052c6 <I2C_TransferConfig>
 8005894:	e018      	b.n	80058c8 <HAL_I2C_Master_Receive+0xb4>
      hi2c->XferSize = hi2c->XferCount;
 8005896:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005898:	b292      	uxth	r2, r2
 800589a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800589c:	4b3b      	ldr	r3, [pc, #236]	; (800598c <HAL_I2C_Master_Receive+0x178>)
 800589e:	9300      	str	r3, [sp, #0]
 80058a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80058a4:	b2d2      	uxtb	r2, r2
 80058a6:	4639      	mov	r1, r7
 80058a8:	4620      	mov	r0, r4
 80058aa:	f7ff fd0c 	bl	80052c6 <I2C_TransferConfig>
 80058ae:	e00b      	b.n	80058c8 <HAL_I2C_Master_Receive+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 80058b0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80058b2:	b292      	uxth	r2, r2
 80058b4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80058b6:	2300      	movs	r3, #0
 80058b8:	9300      	str	r3, [sp, #0]
 80058ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80058be:	b2d2      	uxtb	r2, r2
 80058c0:	4639      	mov	r1, r7
 80058c2:	4620      	mov	r0, r4
 80058c4:	f7ff fcff 	bl	80052c6 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80058c8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d032      	beq.n	8005936 <HAL_I2C_Master_Receive+0x122>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058d0:	462a      	mov	r2, r5
 80058d2:	4631      	mov	r1, r6
 80058d4:	4620      	mov	r0, r4
 80058d6:	f7ff fe29 	bl	800552c <I2C_WaitOnRXNEFlagUntilTimeout>
 80058da:	2800      	cmp	r0, #0
 80058dc:	d14f      	bne.n	800597e <HAL_I2C_Master_Receive+0x16a>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80058de:	6823      	ldr	r3, [r4, #0]
 80058e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058e4:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80058e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058e8:	3301      	adds	r3, #1
 80058ea:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80058ec:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80058ee:	3a01      	subs	r2, #1
 80058f0:	b292      	uxth	r2, r2
 80058f2:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80058f4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	3b01      	subs	r3, #1
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80058fe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005900:	b29b      	uxth	r3, r3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d0e0      	beq.n	80058c8 <HAL_I2C_Master_Receive+0xb4>
 8005906:	2a00      	cmp	r2, #0
 8005908:	d1de      	bne.n	80058c8 <HAL_I2C_Master_Receive+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800590a:	9500      	str	r5, [sp, #0]
 800590c:	4633      	mov	r3, r6
 800590e:	2180      	movs	r1, #128	; 0x80
 8005910:	4620      	mov	r0, r4
 8005912:	f7ff fdb6 	bl	8005482 <I2C_WaitOnFlagUntilTimeout>
 8005916:	bba0      	cbnz	r0, 8005982 <HAL_I2C_Master_Receive+0x16e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005918:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800591a:	b29b      	uxth	r3, r3
 800591c:	2bff      	cmp	r3, #255	; 0xff
 800591e:	d9c7      	bls.n	80058b0 <HAL_I2C_Master_Receive+0x9c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005920:	22ff      	movs	r2, #255	; 0xff
 8005922:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005924:	2300      	movs	r3, #0
 8005926:	9300      	str	r3, [sp, #0]
 8005928:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800592c:	4639      	mov	r1, r7
 800592e:	4620      	mov	r0, r4
 8005930:	f7ff fcc9 	bl	80052c6 <I2C_TransferConfig>
 8005934:	e7c8      	b.n	80058c8 <HAL_I2C_Master_Receive+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005936:	462a      	mov	r2, r5
 8005938:	4631      	mov	r1, r6
 800593a:	4620      	mov	r0, r4
 800593c:	f7ff fdce 	bl	80054dc <I2C_WaitOnSTOPFlagUntilTimeout>
 8005940:	bb08      	cbnz	r0, 8005986 <HAL_I2C_Master_Receive+0x172>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005942:	6823      	ldr	r3, [r4, #0]
 8005944:	2220      	movs	r2, #32
 8005946:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005948:	6821      	ldr	r1, [r4, #0]
 800594a:	684b      	ldr	r3, [r1, #4]
 800594c:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005950:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005954:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005958:	f023 0301 	bic.w	r3, r3, #1
 800595c:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800595e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005962:	2300      	movs	r3, #0
 8005964:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8005968:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 800596c:	e000      	b.n	8005970 <HAL_I2C_Master_Receive+0x15c>
    return HAL_BUSY;
 800596e:	2002      	movs	r0, #2
}
 8005970:	b002      	add	sp, #8
 8005972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8005976:	2002      	movs	r0, #2
 8005978:	e7fa      	b.n	8005970 <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 800597a:	2001      	movs	r0, #1
 800597c:	e7f8      	b.n	8005970 <HAL_I2C_Master_Receive+0x15c>
        return HAL_ERROR;
 800597e:	2001      	movs	r0, #1
 8005980:	e7f6      	b.n	8005970 <HAL_I2C_Master_Receive+0x15c>
          return HAL_ERROR;
 8005982:	2001      	movs	r0, #1
 8005984:	e7f4      	b.n	8005970 <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 8005986:	2001      	movs	r0, #1
 8005988:	e7f2      	b.n	8005970 <HAL_I2C_Master_Receive+0x15c>
 800598a:	bf00      	nop
 800598c:	80002400 	.word	0x80002400

08005990 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005990:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2b20      	cmp	r3, #32
 8005998:	d124      	bne.n	80059e4 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800599a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d022      	beq.n	80059e8 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 80059a2:	2301      	movs	r3, #1
 80059a4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80059a8:	2324      	movs	r3, #36	; 0x24
 80059aa:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059ae:	6802      	ldr	r2, [r0, #0]
 80059b0:	6813      	ldr	r3, [r2, #0]
 80059b2:	f023 0301 	bic.w	r3, r3, #1
 80059b6:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80059b8:	6802      	ldr	r2, [r0, #0]
 80059ba:	6813      	ldr	r3, [r2, #0]
 80059bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059c0:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80059c2:	6802      	ldr	r2, [r0, #0]
 80059c4:	6813      	ldr	r3, [r2, #0]
 80059c6:	4319      	orrs	r1, r3
 80059c8:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80059ca:	6802      	ldr	r2, [r0, #0]
 80059cc:	6813      	ldr	r3, [r2, #0]
 80059ce:	f043 0301 	orr.w	r3, r3, #1
 80059d2:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059d4:	2320      	movs	r3, #32
 80059d6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059da:	2300      	movs	r3, #0
 80059dc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80059e0:	4618      	mov	r0, r3
 80059e2:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80059e4:	2002      	movs	r0, #2
 80059e6:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80059e8:	2002      	movs	r0, #2
  }
}
 80059ea:	4770      	bx	lr

080059ec <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059ec:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b20      	cmp	r3, #32
 80059f4:	d122      	bne.n	8005a3c <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059f6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d020      	beq.n	8005a40 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 80059fe:	2301      	movs	r3, #1
 8005a00:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a04:	2324      	movs	r3, #36	; 0x24
 8005a06:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a0a:	6802      	ldr	r2, [r0, #0]
 8005a0c:	6813      	ldr	r3, [r2, #0]
 8005a0e:	f023 0301 	bic.w	r3, r3, #1
 8005a12:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005a14:	6802      	ldr	r2, [r0, #0]
 8005a16:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005a18:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005a1c:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005a20:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a22:	6802      	ldr	r2, [r0, #0]
 8005a24:	6813      	ldr	r3, [r2, #0]
 8005a26:	f043 0301 	orr.w	r3, r3, #1
 8005a2a:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a2c:	2320      	movs	r3, #32
 8005a2e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a32:	2300      	movs	r3, #0
 8005a34:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8005a38:	4618      	mov	r0, r3
 8005a3a:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8005a3c:	2002      	movs	r0, #2
 8005a3e:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8005a40:	2002      	movs	r0, #2
  }
}
 8005a42:	4770      	bx	lr

08005a44 <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a44:	4a02      	ldr	r2, [pc, #8]	; (8005a50 <HAL_PWR_EnableBkUpAccess+0xc>)
 8005a46:	6813      	ldr	r3, [r2, #0]
 8005a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a4c:	6013      	str	r3, [r2, #0]
}
 8005a4e:	4770      	bx	lr
 8005a50:	58000400 	.word	0x58000400

08005a54 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8005a54:	b510      	push	{r4, lr}
 8005a56:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8005a58:	b9a0      	cbnz	r0, 8005a84 <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8005a5a:	4b0f      	ldr	r3, [pc, #60]	; (8005a98 <HAL_PWR_EnterSLEEPMode+0x44>)
 8005a5c:	695b      	ldr	r3, [r3, #20]
 8005a5e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005a62:	d10a      	bne.n	8005a7a <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005a64:	4a0d      	ldr	r2, [pc, #52]	; (8005a9c <HAL_PWR_EnterSLEEPMode+0x48>)
 8005a66:	6913      	ldr	r3, [r2, #16]
 8005a68:	f023 0304 	bic.w	r3, r3, #4
 8005a6c:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005a6e:	2c01      	cmp	r4, #1
 8005a70:	d010      	beq.n	8005a94 <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005a72:	bf40      	sev
    __WFE();
 8005a74:	bf20      	wfe
    __WFE();
 8005a76:	bf20      	wfe
  }
}
 8005a78:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8005a7a:	f000 f821 	bl	8005ac0 <HAL_PWREx_DisableLowPowerRunMode>
 8005a7e:	2800      	cmp	r0, #0
 8005a80:	d0f0      	beq.n	8005a64 <HAL_PWR_EnterSLEEPMode+0x10>
 8005a82:	e7f9      	b.n	8005a78 <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8005a84:	4b04      	ldr	r3, [pc, #16]	; (8005a98 <HAL_PWR_EnterSLEEPMode+0x44>)
 8005a86:	695b      	ldr	r3, [r3, #20]
 8005a88:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005a8c:	d1ea      	bne.n	8005a64 <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 8005a8e:	f000 f80f 	bl	8005ab0 <HAL_PWREx_EnableLowPowerRunMode>
 8005a92:	e7e7      	b.n	8005a64 <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 8005a94:	bf30      	wfi
 8005a96:	e7ef      	b.n	8005a78 <HAL_PWR_EnterSLEEPMode+0x24>
 8005a98:	58000400 	.word	0x58000400
 8005a9c:	e000ed00 	.word	0xe000ed00

08005aa0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8005aa0:	4b02      	ldr	r3, [pc, #8]	; (8005aac <HAL_PWREx_GetVoltageRange+0xc>)
 8005aa2:	6818      	ldr	r0, [r3, #0]
}
 8005aa4:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	58000400 	.word	0x58000400

08005ab0 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8005ab0:	4a02      	ldr	r2, [pc, #8]	; (8005abc <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 8005ab2:	6813      	ldr	r3, [r2, #0]
 8005ab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ab8:	6013      	str	r3, [r2, #0]
}
 8005aba:	4770      	bx	lr
 8005abc:	58000400 	.word	0x58000400

08005ac0 <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8005ac0:	4a0f      	ldr	r2, [pc, #60]	; (8005b00 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8005ac2:	6813      	ldr	r3, [r2, #0]
 8005ac4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ac8:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8005aca:	4b0e      	ldr	r3, [pc, #56]	; (8005b04 <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2232      	movs	r2, #50	; 0x32
 8005ad0:	fb02 f303 	mul.w	r3, r2, r3
 8005ad4:	4a0c      	ldr	r2, [pc, #48]	; (8005b08 <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 8005ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8005ada:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005adc:	e000      	b.n	8005ae0 <HAL_PWREx_DisableLowPowerRunMode+0x20>
  {
    wait_loop_index--;
 8005ade:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005ae0:	4a07      	ldr	r2, [pc, #28]	; (8005b00 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8005ae2:	6952      	ldr	r2, [r2, #20]
 8005ae4:	f412 7f00 	tst.w	r2, #512	; 0x200
 8005ae8:	d001      	beq.n	8005aee <HAL_PWREx_DisableLowPowerRunMode+0x2e>
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1f7      	bne.n	8005ade <HAL_PWREx_DisableLowPowerRunMode+0x1e>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8005aee:	4b04      	ldr	r3, [pc, #16]	; (8005b00 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005af6:	d101      	bne.n	8005afc <HAL_PWREx_DisableLowPowerRunMode+0x3c>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 8005af8:	2000      	movs	r0, #0
 8005afa:	4770      	bx	lr
    return HAL_TIMEOUT;
 8005afc:	2003      	movs	r0, #3
}
 8005afe:	4770      	bx	lr
 8005b00:	58000400 	.word	0x58000400
 8005b04:	20000070 	.word	0x20000070
 8005b08:	431bde83 	.word	0x431bde83

08005b0c <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8005b0c:	4a0c      	ldr	r2, [pc, #48]	; (8005b40 <HAL_PWREx_EnterSTOP2Mode+0x34>)
 8005b0e:	6813      	ldr	r3, [r2, #0]
 8005b10:	f023 0307 	bic.w	r3, r3, #7
 8005b14:	f043 0302 	orr.w	r3, r3, #2
 8005b18:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005b1a:	4a0a      	ldr	r2, [pc, #40]	; (8005b44 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8005b1c:	6913      	ldr	r3, [r2, #16]
 8005b1e:	f043 0304 	orr.w	r3, r3, #4
 8005b22:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8005b24:	2801      	cmp	r0, #1
 8005b26:	d008      	beq.n	8005b3a <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005b28:	bf40      	sev
    __WFE();
 8005b2a:	bf20      	wfe
    __WFE();
 8005b2c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005b2e:	4a05      	ldr	r2, [pc, #20]	; (8005b44 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8005b30:	6913      	ldr	r3, [r2, #16]
 8005b32:	f023 0304 	bic.w	r3, r3, #4
 8005b36:	6113      	str	r3, [r2, #16]
}
 8005b38:	4770      	bx	lr
    __WFI();
 8005b3a:	bf30      	wfi
 8005b3c:	e7f7      	b.n	8005b2e <HAL_PWREx_EnterSTOP2Mode+0x22>
 8005b3e:	bf00      	nop
 8005b40:	58000400 	.word	0x58000400
 8005b44:	e000ed00 	.word	0xe000ed00

08005b48 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005b48:	b530      	push	{r4, r5, lr}
 8005b4a:	b089      	sub	sp, #36	; 0x24
 8005b4c:	4604      	mov	r4, r0
 8005b4e:	468c      	mov	ip, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8005b50:	4b2a      	ldr	r3, [pc, #168]	; (8005bfc <RCC_SetFlashLatency+0xb4>)
 8005b52:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005b56:	9006      	str	r0, [sp, #24]
 8005b58:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8005b5c:	f103 0208 	add.w	r2, r3, #8
 8005b60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005b64:	9004      	str	r0, [sp, #16]
 8005b66:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8005b6a:	ad01      	add	r5, sp, #4
 8005b6c:	3310      	adds	r3, #16
 8005b6e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005b72:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005b76:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8005b7a:	d007      	beq.n	8005b8c <RCC_SetFlashLatency+0x44>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	e014      	b.n	8005baa <RCC_SetFlashLatency+0x62>
        latency = FLASH_LATENCY_RANGE[index];
 8005b80:	aa08      	add	r2, sp, #32
 8005b82:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005b86:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8005b8a:	e01e      	b.n	8005bca <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d808      	bhi.n	8005ba4 <RCC_SetFlashLatency+0x5c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005b92:	aa08      	add	r2, sp, #32
 8005b94:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8005b98:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 8005b9c:	42a2      	cmp	r2, r4
 8005b9e:	d2ef      	bcs.n	8005b80 <RCC_SetFlashLatency+0x38>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	e7f4      	b.n	8005b8e <RCC_SetFlashLatency+0x46>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005ba4:	2500      	movs	r5, #0
 8005ba6:	e010      	b.n	8005bca <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005ba8:	3301      	adds	r3, #1
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d80c      	bhi.n	8005bc8 <RCC_SetFlashLatency+0x80>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005bae:	aa08      	add	r2, sp, #32
 8005bb0:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8005bb4:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 8005bb8:	42a2      	cmp	r2, r4
 8005bba:	d3f5      	bcc.n	8005ba8 <RCC_SetFlashLatency+0x60>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005bbc:	aa08      	add	r2, sp, #32
 8005bbe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005bc2:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8005bc6:	e000      	b.n	8005bca <RCC_SetFlashLatency+0x82>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005bc8:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005bca:	4a0d      	ldr	r2, [pc, #52]	; (8005c00 <RCC_SetFlashLatency+0xb8>)
 8005bcc:	6813      	ldr	r3, [r2, #0]
 8005bce:	f023 0307 	bic.w	r3, r3, #7
 8005bd2:	432b      	orrs	r3, r5
 8005bd4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005bd6:	f7fb ff77 	bl	8001ac8 <HAL_GetTick>
 8005bda:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005bdc:	4b08      	ldr	r3, [pc, #32]	; (8005c00 <RCC_SetFlashLatency+0xb8>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0307 	and.w	r3, r3, #7
 8005be4:	42ab      	cmp	r3, r5
 8005be6:	d006      	beq.n	8005bf6 <RCC_SetFlashLatency+0xae>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005be8:	f7fb ff6e 	bl	8001ac8 <HAL_GetTick>
 8005bec:	1b00      	subs	r0, r0, r4
 8005bee:	2802      	cmp	r0, #2
 8005bf0:	d9f4      	bls.n	8005bdc <RCC_SetFlashLatency+0x94>
    {
      return HAL_TIMEOUT;
 8005bf2:	2003      	movs	r0, #3
 8005bf4:	e000      	b.n	8005bf8 <RCC_SetFlashLatency+0xb0>
    }
  }
  return HAL_OK;
 8005bf6:	2000      	movs	r0, #0
}
 8005bf8:	b009      	add	sp, #36	; 0x24
 8005bfa:	bd30      	pop	{r4, r5, pc}
 8005bfc:	08014148 	.word	0x08014148
 8005c00:	58004000 	.word	0x58004000

08005c04 <RCC_SetFlashLatencyFromMSIRange>:
{
 8005c04:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8005c06:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8005c0a:	4b0c      	ldr	r3, [pc, #48]	; (8005c3c <RCC_SetFlashLatencyFromMSIRange+0x38>)
 8005c0c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c14:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8005c18:	f003 030f 	and.w	r3, r3, #15
 8005c1c:	4a08      	ldr	r2, [pc, #32]	; (8005c40 <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 8005c1e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005c22:	fbb4 f4f0 	udiv	r4, r4, r0
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005c26:	f7ff ff3b 	bl	8005aa0 <HAL_PWREx_GetVoltageRange>
 8005c2a:	4601      	mov	r1, r0
 8005c2c:	4805      	ldr	r0, [pc, #20]	; (8005c44 <RCC_SetFlashLatencyFromMSIRange+0x40>)
 8005c2e:	fba0 3004 	umull	r3, r0, r0, r4
 8005c32:	0c80      	lsrs	r0, r0, #18
 8005c34:	f7ff ff88 	bl	8005b48 <RCC_SetFlashLatency>
}
 8005c38:	bd10      	pop	{r4, pc}
 8005c3a:	bf00      	nop
 8005c3c:	0801473c 	.word	0x0801473c
 8005c40:	080146dc 	.word	0x080146dc
 8005c44:	431bde83 	.word	0x431bde83

08005c48 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c4c:	6899      	ldr	r1, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005c54:	f011 010c 	ands.w	r1, r1, #12
 8005c58:	d00a      	beq.n	8005c70 <HAL_RCC_GetSysClockFreq+0x28>
 8005c5a:	290c      	cmp	r1, #12
 8005c5c:	d006      	beq.n	8005c6c <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c5e:	2904      	cmp	r1, #4
 8005c60:	d047      	beq.n	8005cf2 <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c62:	2908      	cmp	r1, #8
 8005c64:	d03b      	beq.n	8005cde <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 8005c66:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 8005c68:	4610      	mov	r0, r2
 8005c6a:	e026      	b.n	8005cba <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d1f6      	bne.n	8005c5e <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005c70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f013 0308 	ands.w	r3, r3, #8
 8005c7a:	d00d      	beq.n	8005c98 <HAL_RCC_GetSysClockFreq+0x50>
 8005c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f013 0308 	ands.w	r3, r3, #8
 8005c86:	d124      	bne.n	8005cd2 <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005c88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c8c:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005c90:	4a2e      	ldr	r2, [pc, #184]	; (8005d4c <HAL_RCC_GetSysClockFreq+0x104>)
 8005c92:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005c96:	e00e      	b.n	8005cb6 <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005c98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c9c:	6812      	ldr	r2, [r2, #0]
 8005c9e:	f012 0f08 	tst.w	r2, #8
 8005ca2:	d112      	bne.n	8005cca <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005ca4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ca8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cac:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8005cb0:	4a26      	ldr	r2, [pc, #152]	; (8005d4c <HAL_RCC_GetSysClockFreq+0x104>)
 8005cb2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005cb6:	b1d1      	cbz	r1, 8005cee <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 8005cb8:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005cba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005cc4:	2b0c      	cmp	r3, #12
 8005cc6:	d01a      	beq.n	8005cfe <HAL_RCC_GetSysClockFreq+0xb6>
}
 8005cc8:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005cca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cce:	6812      	ldr	r2, [r2, #0]
 8005cd0:	e7ee      	b.n	8005cb0 <HAL_RCC_GetSysClockFreq+0x68>
 8005cd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cd6:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005cd8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005cdc:	e7d8      	b.n	8005c90 <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005cde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	f412 1280 	ands.w	r2, r2, #1048576	; 0x100000
 8005ce8:	d106      	bne.n	8005cf8 <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 8005cea:	4819      	ldr	r0, [pc, #100]	; (8005d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8005cec:	e7e5      	b.n	8005cba <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 8005cee:	4610      	mov	r0, r2
 8005cf0:	e7e3      	b.n	8005cba <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8005cf2:	2200      	movs	r2, #0
    sysclockfreq = HSI_VALUE;
 8005cf4:	4817      	ldr	r0, [pc, #92]	; (8005d54 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005cf6:	e7e0      	b.n	8005cba <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8005cf8:	2200      	movs	r2, #0
      sysclockfreq = HSE_VALUE / 2U;
 8005cfa:	4816      	ldr	r0, [pc, #88]	; (8005d54 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005cfc:	e7dd      	b.n	8005cba <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d009      	beq.n	8005d20 <HAL_RCC_GetSysClockFreq+0xd8>
 8005d0c:	2b03      	cmp	r3, #3
 8005d0e:	d108      	bne.n	8005d22 <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005d1a:	d115      	bne.n	8005d48 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8005d1c:	4a0c      	ldr	r2, [pc, #48]	; (8005d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d1e:	e000      	b.n	8005d22 <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 8005d20:	4a0c      	ldr	r2, [pc, #48]	; (8005d54 <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d26:	68d8      	ldr	r0, [r3, #12]
 8005d28:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005d2c:	fb00 f202 	mul.w	r2, r0, r2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005d30:	68d8      	ldr	r0, [r3, #12]
 8005d32:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8005d36:	3001      	adds	r0, #1
 8005d38:	fbb2 f2f0 	udiv	r2, r2, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005d3c:	68d8      	ldr	r0, [r3, #12]
 8005d3e:	0f40      	lsrs	r0, r0, #29
 8005d40:	3001      	adds	r0, #1
 8005d42:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 8005d46:	e7bf      	b.n	8005cc8 <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 8005d48:	4a02      	ldr	r2, [pc, #8]	; (8005d54 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005d4a:	e7ea      	b.n	8005d22 <HAL_RCC_GetSysClockFreq+0xda>
 8005d4c:	0801473c 	.word	0x0801473c
 8005d50:	01e84800 	.word	0x01e84800
 8005d54:	00f42400 	.word	0x00f42400

08005d58 <HAL_RCC_GetHCLKFreq>:
{
 8005d58:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005d5a:	f7ff ff75 	bl	8005c48 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005d5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005d68:	4a02      	ldr	r2, [pc, #8]	; (8005d74 <HAL_RCC_GetHCLKFreq+0x1c>)
 8005d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8005d6e:	fbb0 f0f3 	udiv	r0, r0, r3
 8005d72:	bd08      	pop	{r3, pc}
 8005d74:	080146dc 	.word	0x080146dc

08005d78 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8005d78:	2800      	cmp	r0, #0
 8005d7a:	f000 8319 	beq.w	80063b0 <HAL_RCC_OscConfig+0x638>
{
 8005d7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d80:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005d82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d86:	689d      	ldr	r5, [r3, #8]
 8005d88:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005d8c:	68de      	ldr	r6, [r3, #12]
 8005d8e:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005d92:	6803      	ldr	r3, [r0, #0]
 8005d94:	f013 0f20 	tst.w	r3, #32
 8005d98:	f000 808f 	beq.w	8005eba <HAL_RCC_OscConfig+0x142>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005d9c:	b1ed      	cbz	r5, 8005dda <HAL_RCC_OscConfig+0x62>
 8005d9e:	2d0c      	cmp	r5, #12
 8005da0:	d019      	beq.n	8005dd6 <HAL_RCC_OscConfig+0x5e>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005da2:	6a23      	ldr	r3, [r4, #32]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f000 80bc 	beq.w	8005f22 <HAL_RCC_OscConfig+0x1aa>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005daa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dae:	6813      	ldr	r3, [r2, #0]
 8005db0:	f043 0301 	orr.w	r3, r3, #1
 8005db4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005db6:	f7fb fe87 	bl	8001ac8 <HAL_GetTick>
 8005dba:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f013 0f02 	tst.w	r3, #2
 8005dc6:	d165      	bne.n	8005e94 <HAL_RCC_OscConfig+0x11c>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005dc8:	f7fb fe7e 	bl	8001ac8 <HAL_GetTick>
 8005dcc:	1bc0      	subs	r0, r0, r7
 8005dce:	2802      	cmp	r0, #2
 8005dd0:	d9f4      	bls.n	8005dbc <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 8005dd2:	2003      	movs	r0, #3
 8005dd4:	e2f9      	b.n	80063ca <HAL_RCC_OscConfig+0x652>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005dd6:	2e01      	cmp	r6, #1
 8005dd8:	d1e3      	bne.n	8005da2 <HAL_RCC_OscConfig+0x2a>
 8005dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f013 0f02 	tst.w	r3, #2
 8005de4:	d003      	beq.n	8005dee <HAL_RCC_OscConfig+0x76>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005de6:	6a23      	ldr	r3, [r4, #32]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f000 82e3 	beq.w	80063b4 <HAL_RCC_OscConfig+0x63c>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005dee:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f013 0f08 	tst.w	r3, #8
 8005dfa:	d029      	beq.n	8005e50 <HAL_RCC_OscConfig+0xd8>
 8005dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e06:	4298      	cmp	r0, r3
 8005e08:	d92a      	bls.n	8005e60 <HAL_RCC_OscConfig+0xe8>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005e0a:	f7ff fefb 	bl	8005c04 <RCC_SetFlashLatencyFromMSIRange>
 8005e0e:	2800      	cmp	r0, #0
 8005e10:	f040 82d2 	bne.w	80063b8 <HAL_RCC_OscConfig+0x640>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	f042 0208 	orr.w	r2, r2, #8
 8005e1e:	601a      	str	r2, [r3, #0]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005e26:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005e28:	430a      	orrs	r2, r1
 8005e2a:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e2c:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005e2e:	685a      	ldr	r2, [r3, #4]
 8005e30:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005e34:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005e38:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005e3a:	f7ff ff8d 	bl	8005d58 <HAL_RCC_GetHCLKFreq>
 8005e3e:	4bb0      	ldr	r3, [pc, #704]	; (8006100 <HAL_RCC_OscConfig+0x388>)
 8005e40:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8005e42:	4bb0      	ldr	r3, [pc, #704]	; (8006104 <HAL_RCC_OscConfig+0x38c>)
 8005e44:	6818      	ldr	r0, [r3, #0]
 8005e46:	f7fb fe3d 	bl	8001ac4 <HAL_InitTick>
        if (status != HAL_OK)
 8005e4a:	2800      	cmp	r0, #0
 8005e4c:	d035      	beq.n	8005eba <HAL_RCC_OscConfig+0x142>
 8005e4e:	e2bc      	b.n	80063ca <HAL_RCC_OscConfig+0x652>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005e50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e58:	091b      	lsrs	r3, r3, #4
 8005e5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e5e:	e7d2      	b.n	8005e06 <HAL_RCC_OscConfig+0x8e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	f042 0208 	orr.w	r2, r2, #8
 8005e6a:	601a      	str	r2, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005e72:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005e74:	430a      	orrs	r2, r1
 8005e76:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e78:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005e7a:	685a      	ldr	r2, [r3, #4]
 8005e7c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005e80:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005e84:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005e86:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005e88:	f7ff febc 	bl	8005c04 <RCC_SetFlashLatencyFromMSIRange>
 8005e8c:	2800      	cmp	r0, #0
 8005e8e:	d0d4      	beq.n	8005e3a <HAL_RCC_OscConfig+0xc2>
            return HAL_ERROR;
 8005e90:	2001      	movs	r0, #1
 8005e92:	e29a      	b.n	80063ca <HAL_RCC_OscConfig+0x652>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	f042 0208 	orr.w	r2, r2, #8
 8005e9e:	601a      	str	r2, [r3, #0]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005ea6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005ea8:	430a      	orrs	r2, r1
 8005eaa:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005eac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005eae:	685a      	ldr	r2, [r3, #4]
 8005eb0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005eb4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005eb8:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005eba:	6823      	ldr	r3, [r4, #0]
 8005ebc:	f013 0f01 	tst.w	r3, #1
 8005ec0:	d051      	beq.n	8005f66 <HAL_RCC_OscConfig+0x1ee>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005ec2:	2d08      	cmp	r5, #8
 8005ec4:	d045      	beq.n	8005f52 <HAL_RCC_OscConfig+0x1da>
 8005ec6:	2d0c      	cmp	r5, #12
 8005ec8:	d041      	beq.n	8005f4e <HAL_RCC_OscConfig+0x1d6>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8005eca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ece:	6813      	ldr	r3, [r2, #0]
 8005ed0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005ed4:	68a1      	ldr	r1, [r4, #8]
 8005ed6:	430b      	orrs	r3, r1
 8005ed8:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005eda:	6863      	ldr	r3, [r4, #4]
 8005edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ee0:	d063      	beq.n	8005faa <HAL_RCC_OscConfig+0x232>
 8005ee2:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8005ee6:	d065      	beq.n	8005fb4 <HAL_RCC_OscConfig+0x23c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005ef2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8005efa:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005efc:	6863      	ldr	r3, [r4, #4]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d063      	beq.n	8005fca <HAL_RCC_OscConfig+0x252>
        tickstart = HAL_GetTick();
 8005f02:	f7fb fde1 	bl	8001ac8 <HAL_GetTick>
 8005f06:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005f12:	d128      	bne.n	8005f66 <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f14:	f7fb fdd8 	bl	8001ac8 <HAL_GetTick>
 8005f18:	1bc0      	subs	r0, r0, r7
 8005f1a:	2864      	cmp	r0, #100	; 0x64
 8005f1c:	d9f4      	bls.n	8005f08 <HAL_RCC_OscConfig+0x190>
            return HAL_TIMEOUT;
 8005f1e:	2003      	movs	r0, #3
 8005f20:	e253      	b.n	80063ca <HAL_RCC_OscConfig+0x652>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005f22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f26:	6813      	ldr	r3, [r2, #0]
 8005f28:	f023 0301 	bic.w	r3, r3, #1
 8005f2c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005f2e:	f7fb fdcb 	bl	8001ac8 <HAL_GetTick>
 8005f32:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f013 0f02 	tst.w	r3, #2
 8005f3e:	d0bc      	beq.n	8005eba <HAL_RCC_OscConfig+0x142>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005f40:	f7fb fdc2 	bl	8001ac8 <HAL_GetTick>
 8005f44:	1bc0      	subs	r0, r0, r7
 8005f46:	2802      	cmp	r0, #2
 8005f48:	d9f4      	bls.n	8005f34 <HAL_RCC_OscConfig+0x1bc>
            return HAL_TIMEOUT;
 8005f4a:	2003      	movs	r0, #3
 8005f4c:	e23d      	b.n	80063ca <HAL_RCC_OscConfig+0x652>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005f4e:	2e03      	cmp	r6, #3
 8005f50:	d1bb      	bne.n	8005eca <HAL_RCC_OscConfig+0x152>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005f5c:	d003      	beq.n	8005f66 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f5e:	6863      	ldr	r3, [r4, #4]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f000 822b 	beq.w	80063bc <HAL_RCC_OscConfig+0x644>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f66:	6823      	ldr	r3, [r4, #0]
 8005f68:	f013 0f02 	tst.w	r3, #2
 8005f6c:	d052      	beq.n	8006014 <HAL_RCC_OscConfig+0x29c>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005f6e:	2d04      	cmp	r5, #4
 8005f70:	d03d      	beq.n	8005fee <HAL_RCC_OscConfig+0x276>
 8005f72:	2d0c      	cmp	r5, #12
 8005f74:	d039      	beq.n	8005fea <HAL_RCC_OscConfig+0x272>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005f76:	6923      	ldr	r3, [r4, #16]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f000 8091 	beq.w	80060a0 <HAL_RCC_OscConfig+0x328>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005f7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f82:	6813      	ldr	r3, [r2, #0]
 8005f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f88:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005f8a:	f7fb fd9d 	bl	8001ac8 <HAL_GetTick>
 8005f8e:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005f90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005f9a:	d177      	bne.n	800608c <HAL_RCC_OscConfig+0x314>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f9c:	f7fb fd94 	bl	8001ac8 <HAL_GetTick>
 8005fa0:	1b80      	subs	r0, r0, r6
 8005fa2:	2802      	cmp	r0, #2
 8005fa4:	d9f4      	bls.n	8005f90 <HAL_RCC_OscConfig+0x218>
            return HAL_TIMEOUT;
 8005fa6:	2003      	movs	r0, #3
 8005fa8:	e20f      	b.n	80063ca <HAL_RCC_OscConfig+0x652>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005faa:	6813      	ldr	r3, [r2, #0]
 8005fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fb0:	6013      	str	r3, [r2, #0]
}
 8005fb2:	e7a3      	b.n	8005efc <HAL_RCC_OscConfig+0x184>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8005fbe:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005fc6:	601a      	str	r2, [r3, #0]
}
 8005fc8:	e798      	b.n	8005efc <HAL_RCC_OscConfig+0x184>
        tickstart = HAL_GetTick();
 8005fca:	f7fb fd7d 	bl	8001ac8 <HAL_GetTick>
 8005fce:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005fd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005fda:	d0c4      	beq.n	8005f66 <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fdc:	f7fb fd74 	bl	8001ac8 <HAL_GetTick>
 8005fe0:	1bc0      	subs	r0, r0, r7
 8005fe2:	2864      	cmp	r0, #100	; 0x64
 8005fe4:	d9f4      	bls.n	8005fd0 <HAL_RCC_OscConfig+0x258>
            return HAL_TIMEOUT;
 8005fe6:	2003      	movs	r0, #3
 8005fe8:	e1ef      	b.n	80063ca <HAL_RCC_OscConfig+0x652>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005fea:	2e02      	cmp	r6, #2
 8005fec:	d1c3      	bne.n	8005f76 <HAL_RCC_OscConfig+0x1fe>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005fee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005ff8:	d003      	beq.n	8006002 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ffa:	6923      	ldr	r3, [r4, #16]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f000 81df 	beq.w	80063c0 <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006002:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8006004:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006008:	6853      	ldr	r3, [r2, #4]
 800600a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800600e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006012:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006014:	6823      	ldr	r3, [r4, #0]
 8006016:	f013 0f08 	tst.w	r3, #8
 800601a:	f000 808e 	beq.w	800613a <HAL_RCC_OscConfig+0x3c2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800601e:	69a3      	ldr	r3, [r4, #24]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d071      	beq.n	8006108 <HAL_RCC_OscConfig+0x390>
      uint32_t csr_temp = RCC->CSR;
 8006024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006028:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800602c:	69e1      	ldr	r1, [r4, #28]
 800602e:	f003 0210 	and.w	r2, r3, #16
 8006032:	4291      	cmp	r1, r2
 8006034:	d011      	beq.n	800605a <HAL_RCC_OscConfig+0x2e2>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006036:	f003 0203 	and.w	r2, r3, #3
 800603a:	2a02      	cmp	r2, #2
 800603c:	f000 81c2 	beq.w	80063c4 <HAL_RCC_OscConfig+0x64c>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8006040:	f013 0f01 	tst.w	r3, #1
 8006044:	d142      	bne.n	80060cc <HAL_RCC_OscConfig+0x354>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8006046:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800604a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800604e:	f023 0310 	bic.w	r3, r3, #16
 8006052:	69e1      	ldr	r1, [r4, #28]
 8006054:	430b      	orrs	r3, r1
 8006056:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800605a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800605e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8006062:	f043 0301 	orr.w	r3, r3, #1
 8006066:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 800606a:	f7fb fd2d 	bl	8001ac8 <HAL_GetTick>
 800606e:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8006070:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006074:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006078:	f013 0f02 	tst.w	r3, #2
 800607c:	d15d      	bne.n	800613a <HAL_RCC_OscConfig+0x3c2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800607e:	f7fb fd23 	bl	8001ac8 <HAL_GetTick>
 8006082:	1b80      	subs	r0, r0, r6
 8006084:	2811      	cmp	r0, #17
 8006086:	d9f3      	bls.n	8006070 <HAL_RCC_OscConfig+0x2f8>
          return HAL_TIMEOUT;
 8006088:	2003      	movs	r0, #3
 800608a:	e19e      	b.n	80063ca <HAL_RCC_OscConfig+0x652>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800608c:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800608e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006092:	6853      	ldr	r3, [r2, #4]
 8006094:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006098:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800609c:	6053      	str	r3, [r2, #4]
}
 800609e:	e7b9      	b.n	8006014 <HAL_RCC_OscConfig+0x29c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80060a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060a4:	6813      	ldr	r3, [r2, #0]
 80060a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060aa:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80060ac:	f7fb fd0c 	bl	8001ac8 <HAL_GetTick>
 80060b0:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80060b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80060bc:	d0aa      	beq.n	8006014 <HAL_RCC_OscConfig+0x29c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060be:	f7fb fd03 	bl	8001ac8 <HAL_GetTick>
 80060c2:	1b80      	subs	r0, r0, r6
 80060c4:	2802      	cmp	r0, #2
 80060c6:	d9f4      	bls.n	80060b2 <HAL_RCC_OscConfig+0x33a>
            return HAL_TIMEOUT;
 80060c8:	2003      	movs	r0, #3
 80060ca:	e17e      	b.n	80063ca <HAL_RCC_OscConfig+0x652>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80060cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060d0:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80060d4:	f023 0301 	bic.w	r3, r3, #1
 80060d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 80060dc:	f7fb fcf4 	bl	8001ac8 <HAL_GetTick>
 80060e0:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80060e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060ea:	f013 0f02 	tst.w	r3, #2
 80060ee:	d0aa      	beq.n	8006046 <HAL_RCC_OscConfig+0x2ce>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060f0:	f7fb fcea 	bl	8001ac8 <HAL_GetTick>
 80060f4:	1b80      	subs	r0, r0, r6
 80060f6:	2811      	cmp	r0, #17
 80060f8:	d9f3      	bls.n	80060e2 <HAL_RCC_OscConfig+0x36a>
              return HAL_TIMEOUT;
 80060fa:	2003      	movs	r0, #3
 80060fc:	e165      	b.n	80063ca <HAL_RCC_OscConfig+0x652>
 80060fe:	bf00      	nop
 8006100:	20000070 	.word	0x20000070
 8006104:	20000074 	.word	0x20000074
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8006108:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800610c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8006110:	f023 0301 	bic.w	r3, r3, #1
 8006114:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8006118:	f7fb fcd6 	bl	8001ac8 <HAL_GetTick>
 800611c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800611e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006122:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006126:	f013 0f02 	tst.w	r3, #2
 800612a:	d006      	beq.n	800613a <HAL_RCC_OscConfig+0x3c2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800612c:	f7fb fccc 	bl	8001ac8 <HAL_GetTick>
 8006130:	1b80      	subs	r0, r0, r6
 8006132:	2811      	cmp	r0, #17
 8006134:	d9f3      	bls.n	800611e <HAL_RCC_OscConfig+0x3a6>
          return HAL_TIMEOUT;
 8006136:	2003      	movs	r0, #3
 8006138:	e147      	b.n	80063ca <HAL_RCC_OscConfig+0x652>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800613a:	6823      	ldr	r3, [r4, #0]
 800613c:	f013 0f04 	tst.w	r3, #4
 8006140:	f000 80b1 	beq.w	80062a6 <HAL_RCC_OscConfig+0x52e>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8006144:	4ba8      	ldr	r3, [pc, #672]	; (80063e8 <HAL_RCC_OscConfig+0x670>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f413 7f80 	tst.w	r3, #256	; 0x100
 800614c:	d110      	bne.n	8006170 <HAL_RCC_OscConfig+0x3f8>
      HAL_PWR_EnableBkUpAccess();
 800614e:	f7ff fc79 	bl	8005a44 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8006152:	f7fb fcb9 	bl	8001ac8 <HAL_GetTick>
 8006156:	4606      	mov	r6, r0
 8006158:	4ba3      	ldr	r3, [pc, #652]	; (80063e8 <HAL_RCC_OscConfig+0x670>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006160:	d106      	bne.n	8006170 <HAL_RCC_OscConfig+0x3f8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006162:	f7fb fcb1 	bl	8001ac8 <HAL_GetTick>
 8006166:	1b80      	subs	r0, r0, r6
 8006168:	2802      	cmp	r0, #2
 800616a:	d9f5      	bls.n	8006158 <HAL_RCC_OscConfig+0x3e0>
          return HAL_TIMEOUT;
 800616c:	2003      	movs	r0, #3
 800616e:	e12c      	b.n	80063ca <HAL_RCC_OscConfig+0x652>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006170:	68e3      	ldr	r3, [r4, #12]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d061      	beq.n	800623a <HAL_RCC_OscConfig+0x4c2>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8006176:	2b85      	cmp	r3, #133	; 0x85
 8006178:	d001      	beq.n	800617e <HAL_RCC_OscConfig+0x406>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800617a:	2b05      	cmp	r3, #5
 800617c:	d107      	bne.n	800618e <HAL_RCC_OscConfig+0x416>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800617e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006182:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006186:	f043 0304 	orr.w	r3, r3, #4
 800618a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 800618e:	f7fb fc9b 	bl	8001ac8 <HAL_GetTick>
 8006192:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006194:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006198:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800619c:	f043 0301 	orr.w	r3, r3, #1
 80061a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80061a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ac:	f013 0f02 	tst.w	r3, #2
 80061b0:	d108      	bne.n	80061c4 <HAL_RCC_OscConfig+0x44c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061b2:	f7fb fc89 	bl	8001ac8 <HAL_GetTick>
 80061b6:	1b80      	subs	r0, r0, r6
 80061b8:	f241 3388 	movw	r3, #5000	; 0x1388
 80061bc:	4298      	cmp	r0, r3
 80061be:	d9f1      	bls.n	80061a4 <HAL_RCC_OscConfig+0x42c>
          return HAL_TIMEOUT;
 80061c0:	2003      	movs	r0, #3
 80061c2:	e102      	b.n	80063ca <HAL_RCC_OscConfig+0x652>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80061c4:	68e3      	ldr	r3, [r4, #12]
 80061c6:	2b81      	cmp	r3, #129	; 0x81
 80061c8:	d001      	beq.n	80061ce <HAL_RCC_OscConfig+0x456>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80061ca:	2b85      	cmp	r3, #133	; 0x85
 80061cc:	d11a      	bne.n	8006204 <HAL_RCC_OscConfig+0x48c>
        tickstart = HAL_GetTick();
 80061ce:	f7fb fc7b 	bl	8001ac8 <HAL_GetTick>
 80061d2:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80061d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061d8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80061dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80061e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ec:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80061f0:	d159      	bne.n	80062a6 <HAL_RCC_OscConfig+0x52e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061f2:	f7fb fc69 	bl	8001ac8 <HAL_GetTick>
 80061f6:	1b80      	subs	r0, r0, r6
 80061f8:	f241 3388 	movw	r3, #5000	; 0x1388
 80061fc:	4298      	cmp	r0, r3
 80061fe:	d9f1      	bls.n	80061e4 <HAL_RCC_OscConfig+0x46c>
            return HAL_TIMEOUT;
 8006200:	2003      	movs	r0, #3
 8006202:	e0e2      	b.n	80063ca <HAL_RCC_OscConfig+0x652>
        tickstart = HAL_GetTick();
 8006204:	f7fb fc60 	bl	8001ac8 <HAL_GetTick>
 8006208:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800620a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800620e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006212:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006216:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800621a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800621e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006222:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8006226:	d03e      	beq.n	80062a6 <HAL_RCC_OscConfig+0x52e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006228:	f7fb fc4e 	bl	8001ac8 <HAL_GetTick>
 800622c:	1b80      	subs	r0, r0, r6
 800622e:	f241 3388 	movw	r3, #5000	; 0x1388
 8006232:	4298      	cmp	r0, r3
 8006234:	d9f1      	bls.n	800621a <HAL_RCC_OscConfig+0x4a2>
            return HAL_TIMEOUT;
 8006236:	2003      	movs	r0, #3
 8006238:	e0c7      	b.n	80063ca <HAL_RCC_OscConfig+0x652>
      tickstart = HAL_GetTick();
 800623a:	f7fb fc45 	bl	8001ac8 <HAL_GetTick>
 800623e:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006240:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006244:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006248:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800624c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006258:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800625c:	d008      	beq.n	8006270 <HAL_RCC_OscConfig+0x4f8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800625e:	f7fb fc33 	bl	8001ac8 <HAL_GetTick>
 8006262:	1b80      	subs	r0, r0, r6
 8006264:	f241 3388 	movw	r3, #5000	; 0x1388
 8006268:	4298      	cmp	r0, r3
 800626a:	d9f1      	bls.n	8006250 <HAL_RCC_OscConfig+0x4d8>
          return HAL_TIMEOUT;
 800626c:	2003      	movs	r0, #3
 800626e:	e0ac      	b.n	80063ca <HAL_RCC_OscConfig+0x652>
      tickstart = HAL_GetTick();
 8006270:	f7fb fc2a 	bl	8001ac8 <HAL_GetTick>
 8006274:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006276:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800627a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800627e:	f023 0301 	bic.w	r3, r3, #1
 8006282:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800628a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800628e:	f013 0f02 	tst.w	r3, #2
 8006292:	d008      	beq.n	80062a6 <HAL_RCC_OscConfig+0x52e>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006294:	f7fb fc18 	bl	8001ac8 <HAL_GetTick>
 8006298:	1b80      	subs	r0, r0, r6
 800629a:	f241 3388 	movw	r3, #5000	; 0x1388
 800629e:	4298      	cmp	r0, r3
 80062a0:	d9f1      	bls.n	8006286 <HAL_RCC_OscConfig+0x50e>
          return HAL_TIMEOUT;
 80062a2:	2003      	movs	r0, #3
 80062a4:	e091      	b.n	80063ca <HAL_RCC_OscConfig+0x652>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80062a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	f000 808d 	beq.w	80063c8 <HAL_RCC_OscConfig+0x650>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062ae:	2d0c      	cmp	r5, #12
 80062b0:	d062      	beq.n	8006378 <HAL_RCC_OscConfig+0x600>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80062b2:	2b02      	cmp	r3, #2
 80062b4:	d01f      	beq.n	80062f6 <HAL_RCC_OscConfig+0x57e>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80062b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80062c0:	601a      	str	r2, [r3, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80062c2:	68da      	ldr	r2, [r3, #12]
 80062c4:	f022 0203 	bic.w	r2, r2, #3
 80062c8:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 80062ca:	68da      	ldr	r2, [r3, #12]
 80062cc:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 80062d0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80062d4:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 80062d6:	f7fb fbf7 	bl	8001ac8 <HAL_GetTick>
 80062da:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80062dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80062e6:	d073      	beq.n	80063d0 <HAL_RCC_OscConfig+0x658>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062e8:	f7fb fbee 	bl	8001ac8 <HAL_GetTick>
 80062ec:	1b00      	subs	r0, r0, r4
 80062ee:	280a      	cmp	r0, #10
 80062f0:	d9f4      	bls.n	80062dc <HAL_RCC_OscConfig+0x564>
            return HAL_TIMEOUT;
 80062f2:	2003      	movs	r0, #3
 80062f4:	e069      	b.n	80063ca <HAL_RCC_OscConfig+0x652>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80062f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062fa:	6813      	ldr	r3, [r2, #0]
 80062fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006300:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006302:	f7fb fbe1 	bl	8001ac8 <HAL_GetTick>
 8006306:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006312:	d12a      	bne.n	800636a <HAL_RCC_OscConfig+0x5f2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006314:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006318:	68d3      	ldr	r3, [r2, #12]
 800631a:	4934      	ldr	r1, [pc, #208]	; (80063ec <HAL_RCC_OscConfig+0x674>)
 800631c:	4019      	ands	r1, r3
 800631e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006320:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8006322:	4303      	orrs	r3, r0
 8006324:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006326:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800632a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800632c:	4303      	orrs	r3, r0
 800632e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8006330:	4303      	orrs	r3, r0
 8006332:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8006334:	4303      	orrs	r3, r0
 8006336:	430b      	orrs	r3, r1
 8006338:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800633a:	6813      	ldr	r3, [r2, #0]
 800633c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006340:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006342:	68d3      	ldr	r3, [r2, #12]
 8006344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006348:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 800634a:	f7fb fbbd 	bl	8001ac8 <HAL_GetTick>
 800634e:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800635a:	d137      	bne.n	80063cc <HAL_RCC_OscConfig+0x654>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800635c:	f7fb fbb4 	bl	8001ac8 <HAL_GetTick>
 8006360:	1b00      	subs	r0, r0, r4
 8006362:	280a      	cmp	r0, #10
 8006364:	d9f4      	bls.n	8006350 <HAL_RCC_OscConfig+0x5d8>
            return HAL_TIMEOUT;
 8006366:	2003      	movs	r0, #3
 8006368:	e02f      	b.n	80063ca <HAL_RCC_OscConfig+0x652>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800636a:	f7fb fbad 	bl	8001ac8 <HAL_GetTick>
 800636e:	1b40      	subs	r0, r0, r5
 8006370:	280a      	cmp	r0, #10
 8006372:	d9c9      	bls.n	8006308 <HAL_RCC_OscConfig+0x590>
            return HAL_TIMEOUT;
 8006374:	2003      	movs	r0, #3
 8006376:	e028      	b.n	80063ca <HAL_RCC_OscConfig+0x652>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006378:	2b01      	cmp	r3, #1
 800637a:	d02b      	beq.n	80063d4 <HAL_RCC_OscConfig+0x65c>
        pll_config = RCC->PLLCFGR;
 800637c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006380:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8006382:	f003 0103 	and.w	r1, r3, #3
 8006386:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006388:	4291      	cmp	r1, r2
 800638a:	d125      	bne.n	80063d8 <HAL_RCC_OscConfig+0x660>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800638c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006390:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006392:	428a      	cmp	r2, r1
 8006394:	d122      	bne.n	80063dc <HAL_RCC_OscConfig+0x664>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8006396:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800639a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800639c:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80063a0:	d11e      	bne.n	80063e0 <HAL_RCC_OscConfig+0x668>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80063a2:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 80063a6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d11b      	bne.n	80063e4 <HAL_RCC_OscConfig+0x66c>
  return HAL_OK;
 80063ac:	2000      	movs	r0, #0
 80063ae:	e00c      	b.n	80063ca <HAL_RCC_OscConfig+0x652>
    return HAL_ERROR;
 80063b0:	2001      	movs	r0, #1
}
 80063b2:	4770      	bx	lr
        return HAL_ERROR;
 80063b4:	2001      	movs	r0, #1
 80063b6:	e008      	b.n	80063ca <HAL_RCC_OscConfig+0x652>
            return HAL_ERROR;
 80063b8:	2001      	movs	r0, #1
 80063ba:	e006      	b.n	80063ca <HAL_RCC_OscConfig+0x652>
        return HAL_ERROR;
 80063bc:	2001      	movs	r0, #1
 80063be:	e004      	b.n	80063ca <HAL_RCC_OscConfig+0x652>
        return HAL_ERROR;
 80063c0:	2001      	movs	r0, #1
 80063c2:	e002      	b.n	80063ca <HAL_RCC_OscConfig+0x652>
          return HAL_ERROR;
 80063c4:	2001      	movs	r0, #1
 80063c6:	e000      	b.n	80063ca <HAL_RCC_OscConfig+0x652>
  return HAL_OK;
 80063c8:	2000      	movs	r0, #0
}
 80063ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 80063cc:	2000      	movs	r0, #0
 80063ce:	e7fc      	b.n	80063ca <HAL_RCC_OscConfig+0x652>
 80063d0:	2000      	movs	r0, #0
 80063d2:	e7fa      	b.n	80063ca <HAL_RCC_OscConfig+0x652>
        return HAL_ERROR;
 80063d4:	2001      	movs	r0, #1
 80063d6:	e7f8      	b.n	80063ca <HAL_RCC_OscConfig+0x652>
          return HAL_ERROR;
 80063d8:	2001      	movs	r0, #1
 80063da:	e7f6      	b.n	80063ca <HAL_RCC_OscConfig+0x652>
 80063dc:	2001      	movs	r0, #1
 80063de:	e7f4      	b.n	80063ca <HAL_RCC_OscConfig+0x652>
 80063e0:	2001      	movs	r0, #1
 80063e2:	e7f2      	b.n	80063ca <HAL_RCC_OscConfig+0x652>
 80063e4:	2001      	movs	r0, #1
 80063e6:	e7f0      	b.n	80063ca <HAL_RCC_OscConfig+0x652>
 80063e8:	58000400 	.word	0x58000400
 80063ec:	11c1808c 	.word	0x11c1808c

080063f0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80063f0:	2800      	cmp	r0, #0
 80063f2:	f000 8127 	beq.w	8006644 <HAL_RCC_ClockConfig+0x254>
{
 80063f6:	b570      	push	{r4, r5, r6, lr}
 80063f8:	460c      	mov	r4, r1
 80063fa:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80063fc:	4b93      	ldr	r3, [pc, #588]	; (800664c <HAL_RCC_ClockConfig+0x25c>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 0307 	and.w	r3, r3, #7
 8006404:	428b      	cmp	r3, r1
 8006406:	d32d      	bcc.n	8006464 <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006408:	682b      	ldr	r3, [r5, #0]
 800640a:	f013 0f02 	tst.w	r3, #2
 800640e:	d13f      	bne.n	8006490 <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006410:	682b      	ldr	r3, [r5, #0]
 8006412:	f013 0f20 	tst.w	r3, #32
 8006416:	d153      	bne.n	80064c0 <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8006418:	682b      	ldr	r3, [r5, #0]
 800641a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800641e:	d16a      	bne.n	80064f6 <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006420:	682b      	ldr	r3, [r5, #0]
 8006422:	f013 0f04 	tst.w	r3, #4
 8006426:	f040 8083 	bne.w	8006530 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800642a:	682b      	ldr	r3, [r5, #0]
 800642c:	f013 0f08 	tst.w	r3, #8
 8006430:	f040 8097 	bne.w	8006562 <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006434:	682b      	ldr	r3, [r5, #0]
 8006436:	f013 0f01 	tst.w	r3, #1
 800643a:	f000 80de 	beq.w	80065fa <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800643e:	686b      	ldr	r3, [r5, #4]
 8006440:	2b02      	cmp	r3, #2
 8006442:	f000 80a8 	beq.w	8006596 <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006446:	2b03      	cmp	r3, #3
 8006448:	f000 80ad 	beq.w	80065a6 <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800644c:	2b00      	cmp	r3, #0
 800644e:	f040 80b2 	bne.w	80065b6 <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006452:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006456:	6812      	ldr	r2, [r2, #0]
 8006458:	f012 0f02 	tst.w	r2, #2
 800645c:	f040 80b1 	bne.w	80065c2 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8006460:	2001      	movs	r0, #1
 8006462:	e0ee      	b.n	8006642 <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006464:	4a79      	ldr	r2, [pc, #484]	; (800664c <HAL_RCC_ClockConfig+0x25c>)
 8006466:	6813      	ldr	r3, [r2, #0]
 8006468:	f023 0307 	bic.w	r3, r3, #7
 800646c:	430b      	orrs	r3, r1
 800646e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006470:	f7fb fb2a 	bl	8001ac8 <HAL_GetTick>
 8006474:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006476:	4b75      	ldr	r3, [pc, #468]	; (800664c <HAL_RCC_ClockConfig+0x25c>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 0307 	and.w	r3, r3, #7
 800647e:	42a3      	cmp	r3, r4
 8006480:	d0c2      	beq.n	8006408 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006482:	f7fb fb21 	bl	8001ac8 <HAL_GetTick>
 8006486:	1b80      	subs	r0, r0, r6
 8006488:	2802      	cmp	r0, #2
 800648a:	d9f4      	bls.n	8006476 <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 800648c:	2003      	movs	r0, #3
 800648e:	e0d8      	b.n	8006642 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006490:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006492:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006496:	688a      	ldr	r2, [r1, #8]
 8006498:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800649c:	4313      	orrs	r3, r2
 800649e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80064a0:	f7fb fb12 	bl	8001ac8 <HAL_GetTick>
 80064a4:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80064a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80064b0:	d1ae      	bne.n	8006410 <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80064b2:	f7fb fb09 	bl	8001ac8 <HAL_GetTick>
 80064b6:	1b80      	subs	r0, r0, r6
 80064b8:	2802      	cmp	r0, #2
 80064ba:	d9f4      	bls.n	80064a6 <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 80064bc:	2003      	movs	r0, #3
 80064be:	e0c0      	b.n	8006642 <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80064c0:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80064c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064c6:	f8d1 2108 	ldr.w	r2, [r1, #264]	; 0x108
 80064ca:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80064ce:	4313      	orrs	r3, r2
 80064d0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
    tickstart = HAL_GetTick();
 80064d4:	f7fb faf8 	bl	8001ac8 <HAL_GetTick>
 80064d8:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80064da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064de:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80064e2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80064e6:	d197      	bne.n	8006418 <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80064e8:	f7fb faee 	bl	8001ac8 <HAL_GetTick>
 80064ec:	1b80      	subs	r0, r0, r6
 80064ee:	2802      	cmp	r0, #2
 80064f0:	d9f3      	bls.n	80064da <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 80064f2:	2003      	movs	r0, #3
 80064f4:	e0a5      	b.n	8006642 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80064f6:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80064f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064fc:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 8006500:	f023 030f 	bic.w	r3, r3, #15
 8006504:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 8006508:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 800650c:	f7fb fadc 	bl	8001ac8 <HAL_GetTick>
 8006510:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006516:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800651a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800651e:	f47f af7f 	bne.w	8006420 <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006522:	f7fb fad1 	bl	8001ac8 <HAL_GetTick>
 8006526:	1b80      	subs	r0, r0, r6
 8006528:	2802      	cmp	r0, #2
 800652a:	d9f2      	bls.n	8006512 <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 800652c:	2003      	movs	r0, #3
 800652e:	e088      	b.n	8006642 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006530:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006532:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006536:	688a      	ldr	r2, [r1, #8]
 8006538:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800653c:	4313      	orrs	r3, r2
 800653e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8006540:	f7fb fac2 	bl	8001ac8 <HAL_GetTick>
 8006544:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006550:	f47f af6b 	bne.w	800642a <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006554:	f7fb fab8 	bl	8001ac8 <HAL_GetTick>
 8006558:	1b80      	subs	r0, r0, r6
 800655a:	2802      	cmp	r0, #2
 800655c:	d9f3      	bls.n	8006546 <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 800655e:	2003      	movs	r0, #3
 8006560:	e06f      	b.n	8006642 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006562:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006564:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006568:	6893      	ldr	r3, [r2, #8]
 800656a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800656e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006572:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8006574:	f7fb faa8 	bl	8001ac8 <HAL_GetTick>
 8006578:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800657a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8006584:	f47f af56 	bne.w	8006434 <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006588:	f7fb fa9e 	bl	8001ac8 <HAL_GetTick>
 800658c:	1b80      	subs	r0, r0, r6
 800658e:	2802      	cmp	r0, #2
 8006590:	d9f3      	bls.n	800657a <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 8006592:	2003      	movs	r0, #3
 8006594:	e055      	b.n	8006642 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006596:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800659a:	6812      	ldr	r2, [r2, #0]
 800659c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80065a0:	d10f      	bne.n	80065c2 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 80065a2:	2001      	movs	r0, #1
 80065a4:	e04d      	b.n	8006642 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80065a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065aa:	6812      	ldr	r2, [r2, #0]
 80065ac:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80065b0:	d107      	bne.n	80065c2 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 80065b2:	2001      	movs	r0, #1
 80065b4:	e045      	b.n	8006642 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80065b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065ba:	6812      	ldr	r2, [r2, #0]
 80065bc:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80065c0:	d042      	beq.n	8006648 <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80065c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065c6:	688a      	ldr	r2, [r1, #8]
 80065c8:	f022 0203 	bic.w	r2, r2, #3
 80065cc:	4313      	orrs	r3, r2
 80065ce:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80065d0:	f7fb fa7a 	bl	8001ac8 <HAL_GetTick>
 80065d4:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80065d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065e0:	686a      	ldr	r2, [r5, #4]
 80065e2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80065e6:	d008      	beq.n	80065fa <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065e8:	f7fb fa6e 	bl	8001ac8 <HAL_GetTick>
 80065ec:	1b80      	subs	r0, r0, r6
 80065ee:	f241 3388 	movw	r3, #5000	; 0x1388
 80065f2:	4298      	cmp	r0, r3
 80065f4:	d9ef      	bls.n	80065d6 <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 80065f6:	2003      	movs	r0, #3
 80065f8:	e023      	b.n	8006642 <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80065fa:	4b14      	ldr	r3, [pc, #80]	; (800664c <HAL_RCC_ClockConfig+0x25c>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 0307 	and.w	r3, r3, #7
 8006602:	42a3      	cmp	r3, r4
 8006604:	d915      	bls.n	8006632 <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006606:	4a11      	ldr	r2, [pc, #68]	; (800664c <HAL_RCC_ClockConfig+0x25c>)
 8006608:	6813      	ldr	r3, [r2, #0]
 800660a:	f023 0307 	bic.w	r3, r3, #7
 800660e:	4323      	orrs	r3, r4
 8006610:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006612:	f7fb fa59 	bl	8001ac8 <HAL_GetTick>
 8006616:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006618:	4b0c      	ldr	r3, [pc, #48]	; (800664c <HAL_RCC_ClockConfig+0x25c>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 0307 	and.w	r3, r3, #7
 8006620:	42a3      	cmp	r3, r4
 8006622:	d006      	beq.n	8006632 <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006624:	f7fb fa50 	bl	8001ac8 <HAL_GetTick>
 8006628:	1b40      	subs	r0, r0, r5
 800662a:	2802      	cmp	r0, #2
 800662c:	d9f4      	bls.n	8006618 <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 800662e:	2003      	movs	r0, #3
 8006630:	e007      	b.n	8006642 <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006632:	f7ff fb91 	bl	8005d58 <HAL_RCC_GetHCLKFreq>
 8006636:	4b06      	ldr	r3, [pc, #24]	; (8006650 <HAL_RCC_ClockConfig+0x260>)
 8006638:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 800663a:	4b06      	ldr	r3, [pc, #24]	; (8006654 <HAL_RCC_ClockConfig+0x264>)
 800663c:	6818      	ldr	r0, [r3, #0]
 800663e:	f7fb fa41 	bl	8001ac4 <HAL_InitTick>
}
 8006642:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8006644:	2001      	movs	r0, #1
}
 8006646:	4770      	bx	lr
        return HAL_ERROR;
 8006648:	2001      	movs	r0, #1
 800664a:	e7fa      	b.n	8006642 <HAL_RCC_ClockConfig+0x252>
 800664c:	58004000 	.word	0x58004000
 8006650:	20000070 	.word	0x20000070
 8006654:	20000074 	.word	0x20000074

08006658 <HAL_RCC_GetPCLK1Freq>:
{
 8006658:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800665a:	f7ff fb7d 	bl	8005d58 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800665e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8006668:	4a02      	ldr	r2, [pc, #8]	; (8006674 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800666a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800666e:	40d8      	lsrs	r0, r3
 8006670:	bd08      	pop	{r3, pc}
 8006672:	bf00      	nop
 8006674:	0801471c 	.word	0x0801471c

08006678 <HAL_RCC_GetPCLK2Freq>:
{
 8006678:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800667a:	f7ff fb6d 	bl	8005d58 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800667e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8006688:	4a02      	ldr	r2, [pc, #8]	; (8006694 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800668a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800668e:	40d8      	lsrs	r0, r3
 8006690:	bd08      	pop	{r3, pc}
 8006692:	bf00      	nop
 8006694:	0801471c 	.word	0x0801471c

08006698 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006698:	b570      	push	{r4, r5, r6, lr}
 800669a:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800669c:	6803      	ldr	r3, [r0, #0]
 800669e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80066a2:	f040 80ab 	bne.w	80067fc <HAL_RCCEx_PeriphCLKConfig+0x164>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80066a6:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80066a8:	6823      	ldr	r3, [r4, #0]
 80066aa:	f013 0f01 	tst.w	r3, #1
 80066ae:	d00a      	beq.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80066b0:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80066b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066b6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80066ba:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 80066be:	b292      	uxth	r2, r2
 80066c0:	4313      	orrs	r3, r2
 80066c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80066c6:	6823      	ldr	r3, [r4, #0]
 80066c8:	f013 0f02 	tst.w	r3, #2
 80066cc:	d00a      	beq.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80066ce:	68a2      	ldr	r2, [r4, #8]
 80066d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066d4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80066d8:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 80066dc:	b292      	uxth	r2, r2
 80066de:	4313      	orrs	r3, r2
 80066e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80066e4:	6823      	ldr	r3, [r4, #0]
 80066e6:	f013 0f20 	tst.w	r3, #32
 80066ea:	d009      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80066ec:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80066ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066f2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80066f6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80066fa:	4313      	orrs	r3, r2
 80066fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006700:	6823      	ldr	r3, [r4, #0]
 8006702:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006706:	d00c      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006708:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800670a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800670e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8006712:	0c02      	lsrs	r2, r0, #16
 8006714:	0412      	lsls	r2, r2, #16
 8006716:	ea23 0302 	bic.w	r3, r3, r2
 800671a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800671e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006722:	6823      	ldr	r3, [r4, #0]
 8006724:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006728:	d00c      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800672a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800672c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006730:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8006734:	0c02      	lsrs	r2, r0, #16
 8006736:	0412      	lsls	r2, r2, #16
 8006738:	ea23 0302 	bic.w	r3, r3, r2
 800673c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006740:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006744:	6823      	ldr	r3, [r4, #0]
 8006746:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800674a:	d00c      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800674c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800674e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006752:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8006756:	0c02      	lsrs	r2, r0, #16
 8006758:	0412      	lsls	r2, r2, #16
 800675a:	ea23 0302 	bic.w	r3, r3, r2
 800675e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006766:	6823      	ldr	r3, [r4, #0]
 8006768:	f013 0f40 	tst.w	r3, #64	; 0x40
 800676c:	f040 809e 	bne.w	80068ac <HAL_RCCEx_PeriphCLKConfig+0x214>
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006770:	6823      	ldr	r3, [r4, #0]
 8006772:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006776:	f040 80aa 	bne.w	80068ce <HAL_RCCEx_PeriphCLKConfig+0x236>
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800677a:	6823      	ldr	r3, [r4, #0]
 800677c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006780:	f040 80b6 	bne.w	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x258>
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8006784:	6823      	ldr	r3, [r4, #0]
 8006786:	f013 0f10 	tst.w	r3, #16
 800678a:	d00e      	beq.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800678c:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800678e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006792:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006796:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800679a:	4313      	orrs	r3, r2
 800679c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80067a0:	68e3      	ldr	r3, [r4, #12]
 80067a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067a6:	f000 80b4 	beq.w	8006912 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80067aa:	6823      	ldr	r3, [r4, #0]
 80067ac:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80067b0:	d00f      	beq.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80067b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80067b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067b8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80067bc:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 80067c0:	4313      	orrs	r3, r2
 80067c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80067c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80067c8:	b91b      	cbnz	r3, 80067d2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80067ca:	68cb      	ldr	r3, [r1, #12]
 80067cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80067d0:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80067d2:	6823      	ldr	r3, [r4, #0]
 80067d4:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80067d8:	d00e      	beq.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80067da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80067dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067e0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80067e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80067e8:	4313      	orrs	r3, r2
 80067ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80067ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80067f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067f4:	f000 8092 	beq.w	800691c <HAL_RCCEx_PeriphCLKConfig+0x284>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 80067f8:	4628      	mov	r0, r5
 80067fa:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 80067fc:	f7ff f922 	bl	8005a44 <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 8006800:	f7fb f962 	bl	8001ac8 <HAL_GetTick>
 8006804:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006806:	4b48      	ldr	r3, [pc, #288]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800680e:	d106      	bne.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x186>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006810:	f7fb f95a 	bl	8001ac8 <HAL_GetTick>
 8006814:	1b40      	subs	r0, r0, r5
 8006816:	2802      	cmp	r0, #2
 8006818:	d9f5      	bls.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x16e>
        ret = HAL_TIMEOUT;
 800681a:	2503      	movs	r5, #3
 800681c:	e000      	b.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x188>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 800681e:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 8006820:	2d00      	cmp	r5, #0
 8006822:	f47f af41 	bne.w	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006826:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800682a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800682e:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8006832:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006834:	429a      	cmp	r2, r3
 8006836:	d024      	beq.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006838:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800683c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006840:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006844:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8006848:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800684c:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006850:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8006854:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8006858:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800685c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8006860:	f012 0f02 	tst.w	r2, #2
 8006864:	d10f      	bne.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
      if (ret == HAL_OK)
 8006866:	2d00      	cmp	r5, #0
 8006868:	f47f af1e 	bne.w	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800686c:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800686e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006872:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006876:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800687a:	4313      	orrs	r3, r2
 800687c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006880:	e712      	b.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x10>
  uint32_t tmpregister = 0;
 8006882:	2200      	movs	r2, #0
 8006884:	e7ec      	b.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        tickstart = HAL_GetTick();
 8006886:	f7fb f91f 	bl	8001ac8 <HAL_GetTick>
 800688a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800688c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006894:	f013 0f02 	tst.w	r3, #2
 8006898:	d1e5      	bne.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800689a:	f7fb f915 	bl	8001ac8 <HAL_GetTick>
 800689e:	1b80      	subs	r0, r0, r6
 80068a0:	f241 3388 	movw	r3, #5000	; 0x1388
 80068a4:	4298      	cmp	r0, r3
 80068a6:	d9f1      	bls.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
            ret = HAL_TIMEOUT;
 80068a8:	2503      	movs	r5, #3
 80068aa:	e7dc      	b.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80068ac:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80068ae:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 80068b2:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80068b6:	0919      	lsrs	r1, r3, #4
 80068b8:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 80068bc:	ea22 0201 	bic.w	r2, r2, r1
 80068c0:	011b      	lsls	r3, r3, #4
 80068c2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80068c6:	4313      	orrs	r3, r2
 80068c8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 80068cc:	e750      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80068ce:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80068d0:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 80068d4:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80068d8:	0919      	lsrs	r1, r3, #4
 80068da:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 80068de:	ea22 0201 	bic.w	r2, r2, r1
 80068e2:	011b      	lsls	r3, r3, #4
 80068e4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80068e8:	4313      	orrs	r3, r2
 80068ea:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 80068ee:	e744      	b.n	800677a <HAL_RCCEx_PeriphCLKConfig+0xe2>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80068f0:	69e3      	ldr	r3, [r4, #28]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80068f2:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 80068f6:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80068fa:	0919      	lsrs	r1, r3, #4
 80068fc:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8006900:	ea22 0201 	bic.w	r2, r2, r1
 8006904:	011b      	lsls	r3, r3, #4
 8006906:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800690a:	4313      	orrs	r3, r2
 800690c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8006910:	e738      	b.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8006912:	68cb      	ldr	r3, [r1, #12]
 8006914:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006918:	60cb      	str	r3, [r1, #12]
 800691a:	e746      	b.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800691c:	68cb      	ldr	r3, [r1, #12]
 800691e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006922:	60cb      	str	r3, [r1, #12]
 8006924:	e768      	b.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006926:	bf00      	nop
 8006928:	58000400 	.word	0x58000400

0800692c <HAL_RTC_DeactivateAlarm>:
{
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800692c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006930:	2b01      	cmp	r3, #1
 8006932:	d036      	beq.n	80069a2 <HAL_RTC_DeactivateAlarm+0x76>
 8006934:	2301      	movs	r3, #1
 8006936:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800693a:	2302      	movs	r3, #2
 800693c:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006940:	4b19      	ldr	r3, [pc, #100]	; (80069a8 <HAL_RTC_DeactivateAlarm+0x7c>)
 8006942:	22ca      	movs	r2, #202	; 0xca
 8006944:	625a      	str	r2, [r3, #36]	; 0x24
 8006946:	2253      	movs	r2, #83	; 0x53
 8006948:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 800694a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800694e:	d019      	beq.n	8006984 <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006950:	4b15      	ldr	r3, [pc, #84]	; (80069a8 <HAL_RTC_DeactivateAlarm+0x7c>)
 8006952:	699a      	ldr	r2, [r3, #24]
 8006954:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 8006958:	619a      	str	r2, [r3, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 800695a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800695c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006960:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006962:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8006964:	f022 0202 	bic.w	r2, r2, #2
 8006968:	6302      	str	r2, [r0, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800696a:	2202      	movs	r2, #2
 800696c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800696e:	4b0e      	ldr	r3, [pc, #56]	; (80069a8 <HAL_RTC_DeactivateAlarm+0x7c>)
 8006970:	22ff      	movs	r2, #255	; 0xff
 8006972:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006974:	2301      	movs	r3, #1
 8006976:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800697a:	2300      	movs	r3, #0
 800697c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8006980:	4618      	mov	r0, r3
 8006982:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006984:	699a      	ldr	r2, [r3, #24]
 8006986:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800698a:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 800698c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800698e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006992:	645a      	str	r2, [r3, #68]	; 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006994:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8006996:	f022 0201 	bic.w	r2, r2, #1
 800699a:	6302      	str	r2, [r0, #48]	; 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800699c:	2201      	movs	r2, #1
 800699e:	65da      	str	r2, [r3, #92]	; 0x5c
 80069a0:	e7e5      	b.n	800696e <HAL_RTC_DeactivateAlarm+0x42>
  __HAL_LOCK(hrtc);
 80069a2:	2002      	movs	r0, #2
}
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop
 80069a8:	40002800 	.word	0x40002800

080069ac <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80069ac:	b538      	push	{r3, r4, r5, lr}
 80069ae:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80069b0:	4b0d      	ldr	r3, [pc, #52]	; (80069e8 <HAL_RTC_AlarmIRQHandler+0x3c>)
 80069b2:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 80069b4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80069b6:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80069b8:	f015 0f01 	tst.w	r5, #1
 80069bc:	d106      	bne.n	80069cc <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80069be:	f015 0f02 	tst.w	r5, #2
 80069c2:	d109      	bne.n	80069d8 <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80069c4:	2301      	movs	r3, #1
 80069c6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 80069ca:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80069cc:	4b06      	ldr	r3, [pc, #24]	; (80069e8 <HAL_RTC_AlarmIRQHandler+0x3c>)
 80069ce:	2201      	movs	r2, #1
 80069d0:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 80069d2:	f7fb fb97 	bl	8002104 <HAL_RTC_AlarmAEventCallback>
 80069d6:	e7f2      	b.n	80069be <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80069d8:	4b03      	ldr	r3, [pc, #12]	; (80069e8 <HAL_RTC_AlarmIRQHandler+0x3c>)
 80069da:	2202      	movs	r2, #2
 80069dc:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80069de:	4620      	mov	r0, r4
 80069e0:	f000 f9e6 	bl	8006db0 <HAL_RTCEx_AlarmBEventCallback>
 80069e4:	e7ee      	b.n	80069c4 <HAL_RTC_AlarmIRQHandler+0x18>
 80069e6:	bf00      	nop
 80069e8:	40002800 	.word	0x40002800

080069ec <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80069ec:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80069ee:	4a0b      	ldr	r2, [pc, #44]	; (8006a1c <HAL_RTC_WaitForSynchro+0x30>)
 80069f0:	68d3      	ldr	r3, [r2, #12]
 80069f2:	f023 0320 	bic.w	r3, r3, #32
 80069f6:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80069f8:	f7fb f866 	bl	8001ac8 <HAL_GetTick>
 80069fc:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80069fe:	4b07      	ldr	r3, [pc, #28]	; (8006a1c <HAL_RTC_WaitForSynchro+0x30>)
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	f013 0f20 	tst.w	r3, #32
 8006a06:	d107      	bne.n	8006a18 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006a08:	f7fb f85e 	bl	8001ac8 <HAL_GetTick>
 8006a0c:	1b00      	subs	r0, r0, r4
 8006a0e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006a12:	d9f4      	bls.n	80069fe <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 8006a14:	2003      	movs	r0, #3
 8006a16:	e000      	b.n	8006a1a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8006a18:	2000      	movs	r0, #0
}
 8006a1a:	bd10      	pop	{r4, pc}
 8006a1c:	40002800 	.word	0x40002800

08006a20 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006a20:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006a22:	4b11      	ldr	r3, [pc, #68]	; (8006a68 <RTC_EnterInitMode+0x48>)
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006a2a:	d002      	beq.n	8006a32 <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8006a2c:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 8006a2e:	4620      	mov	r0, r4
 8006a30:	bd70      	pop	{r4, r5, r6, pc}
 8006a32:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006a34:	4a0c      	ldr	r2, [pc, #48]	; (8006a68 <RTC_EnterInitMode+0x48>)
 8006a36:	68d3      	ldr	r3, [r2, #12]
 8006a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a3c:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8006a3e:	f7fb f843 	bl	8001ac8 <HAL_GetTick>
 8006a42:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 8006a44:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006a46:	4b08      	ldr	r3, [pc, #32]	; (8006a68 <RTC_EnterInitMode+0x48>)
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006a4e:	d1ee      	bne.n	8006a2e <RTC_EnterInitMode+0xe>
 8006a50:	2c03      	cmp	r4, #3
 8006a52:	d0ec      	beq.n	8006a2e <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006a54:	f7fb f838 	bl	8001ac8 <HAL_GetTick>
 8006a58:	1b43      	subs	r3, r0, r5
 8006a5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a5e:	d9f2      	bls.n	8006a46 <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006a60:	2403      	movs	r4, #3
 8006a62:	f886 402d 	strb.w	r4, [r6, #45]	; 0x2d
 8006a66:	e7ee      	b.n	8006a46 <RTC_EnterInitMode+0x26>
 8006a68:	40002800 	.word	0x40002800

08006a6c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006a6c:	b510      	push	{r4, lr}
 8006a6e:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006a70:	4b11      	ldr	r3, [pc, #68]	; (8006ab8 <RTC_ExitInitMode+0x4c>)
 8006a72:	68da      	ldr	r2, [r3, #12]
 8006a74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a78:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006a7a:	699b      	ldr	r3, [r3, #24]
 8006a7c:	f013 0f20 	tst.w	r3, #32
 8006a80:	d107      	bne.n	8006a92 <RTC_ExitInitMode+0x26>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006a82:	f7ff ffb3 	bl	80069ec <HAL_RTC_WaitForSynchro>
 8006a86:	4603      	mov	r3, r0
 8006a88:	b1a0      	cbz	r0, 8006ab4 <RTC_ExitInitMode+0x48>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8006a90:	e010      	b.n	8006ab4 <RTC_ExitInitMode+0x48>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006a92:	4a09      	ldr	r2, [pc, #36]	; (8006ab8 <RTC_ExitInitMode+0x4c>)
 8006a94:	6993      	ldr	r3, [r2, #24]
 8006a96:	f023 0320 	bic.w	r3, r3, #32
 8006a9a:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006a9c:	f7ff ffa6 	bl	80069ec <HAL_RTC_WaitForSynchro>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	b110      	cbz	r0, 8006aaa <RTC_ExitInitMode+0x3e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006aaa:	4903      	ldr	r1, [pc, #12]	; (8006ab8 <RTC_ExitInitMode+0x4c>)
 8006aac:	698a      	ldr	r2, [r1, #24]
 8006aae:	f042 0220 	orr.w	r2, r2, #32
 8006ab2:	618a      	str	r2, [r1, #24]
  }

  return status;
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	bd10      	pop	{r4, pc}
 8006ab8:	40002800 	.word	0x40002800

08006abc <HAL_RTC_Init>:
  if (hrtc != NULL)
 8006abc:	2800      	cmp	r0, #0
 8006abe:	d04a      	beq.n	8006b56 <HAL_RTC_Init+0x9a>
{
 8006ac0:	b538      	push	{r3, r4, r5, lr}
 8006ac2:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006ac4:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8006ac8:	b19b      	cbz	r3, 8006af2 <HAL_RTC_Init+0x36>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006aca:	2302      	movs	r3, #2
 8006acc:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ad0:	4b22      	ldr	r3, [pc, #136]	; (8006b5c <HAL_RTC_Init+0xa0>)
 8006ad2:	22ca      	movs	r2, #202	; 0xca
 8006ad4:	625a      	str	r2, [r3, #36]	; 0x24
 8006ad6:	2253      	movs	r2, #83	; 0x53
 8006ad8:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 8006ada:	4620      	mov	r0, r4
 8006adc:	f7ff ffa0 	bl	8006a20 <RTC_EnterInitMode>
    if (status == HAL_OK)
 8006ae0:	b160      	cbz	r0, 8006afc <HAL_RTC_Init+0x40>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ae2:	4b1e      	ldr	r3, [pc, #120]	; (8006b5c <HAL_RTC_Init+0xa0>)
 8006ae4:	22ff      	movs	r2, #255	; 0xff
 8006ae6:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8006ae8:	b910      	cbnz	r0, 8006af0 <HAL_RTC_Init+0x34>
      hrtc->State = HAL_RTC_STATE_READY;
 8006aea:	2301      	movs	r3, #1
 8006aec:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8006af0:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 8006af2:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
      HAL_RTC_MspInit(hrtc);
 8006af6:	f7fa fe49 	bl	800178c <HAL_RTC_MspInit>
 8006afa:	e7e6      	b.n	8006aca <HAL_RTC_Init+0xe>
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006afc:	4b17      	ldr	r3, [pc, #92]	; (8006b5c <HAL_RTC_Init+0xa0>)
 8006afe:	699a      	ldr	r2, [r3, #24]
 8006b00:	f022 628e 	bic.w	r2, r2, #74448896	; 0x4700000
 8006b04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b08:	619a      	str	r2, [r3, #24]
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006b0a:	6999      	ldr	r1, [r3, #24]
 8006b0c:	6862      	ldr	r2, [r4, #4]
 8006b0e:	6920      	ldr	r0, [r4, #16]
 8006b10:	4302      	orrs	r2, r0
 8006b12:	69a0      	ldr	r0, [r4, #24]
 8006b14:	4302      	orrs	r2, r0
 8006b16:	430a      	orrs	r2, r1
 8006b18:	619a      	str	r2, [r3, #24]
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006b1a:	68e2      	ldr	r2, [r4, #12]
 8006b1c:	68a1      	ldr	r1, [r4, #8]
 8006b1e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006b22:	611a      	str	r2, [r3, #16]
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8006b24:	68da      	ldr	r2, [r3, #12]
 8006b26:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8006b2a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006b2c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006b2e:	4301      	orrs	r1, r0
 8006b30:	430a      	orrs	r2, r1
 8006b32:	60da      	str	r2, [r3, #12]
      status = RTC_ExitInitMode(hrtc);
 8006b34:	4620      	mov	r0, r4
 8006b36:	f7ff ff99 	bl	8006a6c <RTC_ExitInitMode>
      if (status == HAL_OK)
 8006b3a:	2800      	cmp	r0, #0
 8006b3c:	d1d1      	bne.n	8006ae2 <HAL_RTC_Init+0x26>
        MODIFY_REG(RTC->CR, \
 8006b3e:	4907      	ldr	r1, [pc, #28]	; (8006b5c <HAL_RTC_Init+0xa0>)
 8006b40:	698b      	ldr	r3, [r1, #24]
 8006b42:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8006b46:	6a22      	ldr	r2, [r4, #32]
 8006b48:	69e5      	ldr	r5, [r4, #28]
 8006b4a:	432a      	orrs	r2, r5
 8006b4c:	6965      	ldr	r5, [r4, #20]
 8006b4e:	432a      	orrs	r2, r5
 8006b50:	4313      	orrs	r3, r2
 8006b52:	618b      	str	r3, [r1, #24]
 8006b54:	e7c5      	b.n	8006ae2 <HAL_RTC_Init+0x26>
  HAL_StatusTypeDef status = HAL_ERROR;
 8006b56:	2001      	movs	r0, #1
}
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop
 8006b5c:	40002800 	.word	0x40002800

08006b60 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8006b60:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 8006b62:	e002      	b.n	8006b6a <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8006b64:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 8006b66:	380a      	subs	r0, #10
 8006b68:	b2c0      	uxtb	r0, r0
  while (tmp_Value >= 10U)
 8006b6a:	2809      	cmp	r0, #9
 8006b6c:	d8fa      	bhi.n	8006b64 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8006b6e:	011b      	lsls	r3, r3, #4
 8006b70:	b2db      	uxtb	r3, r3
}
 8006b72:	4318      	orrs	r0, r3
 8006b74:	4770      	bx	lr
	...

08006b78 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 8006b78:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	f000 80b0 	beq.w	8006ce2 <HAL_RTC_SetAlarm_IT+0x16a>
{
 8006b82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b86:	4605      	mov	r5, r0
 8006b88:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b90:	2302      	movs	r3, #2
 8006b92:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8006b96:	4b54      	ldr	r3, [pc, #336]	; (8006ce8 <HAL_RTC_SetAlarm_IT+0x170>)
 8006b98:	68de      	ldr	r6, [r3, #12]
 8006b9a:	f406 7640 	and.w	r6, r6, #768	; 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 8006b9e:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8006ba2:	d043      	beq.n	8006c2c <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 8006ba4:	bb12      	cbnz	r2, 8006bec <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006ba6:	699b      	ldr	r3, [r3, #24]
 8006ba8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006bac:	d101      	bne.n	8006bb2 <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8006bb2:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006bb6:	7820      	ldrb	r0, [r4, #0]
 8006bb8:	f7ff ffd2 	bl	8006b60 <RTC_ByteToBcd2>
 8006bbc:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006bbe:	7860      	ldrb	r0, [r4, #1]
 8006bc0:	f7ff ffce 	bl	8006b60 <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006bc4:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006bc8:	78a0      	ldrb	r0, [r4, #2]
 8006bca:	f7ff ffc9 	bl	8006b60 <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006bce:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006bd0:	78e0      	ldrb	r0, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006bd2:	ea47 5780 	orr.w	r7, r7, r0, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006bd6:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 8006bda:	f7ff ffc1 	bl	8006b60 <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006bde:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006be2:	6a27      	ldr	r7, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006be4:	4338      	orrs	r0, r7
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006be6:	ea48 0000 	orr.w	r0, r8, r0
 8006bea:	e020      	b.n	8006c2e <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8006bec:	6948      	ldr	r0, [r1, #20]
 8006bee:	f1b0 3f80 	cmp.w	r0, #2155905152	; 0x80808080
 8006bf2:	d009      	beq.n	8006c08 <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8006bf4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8006bf8:	d006      	beq.n	8006c08 <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006bfa:	4b3b      	ldr	r3, [pc, #236]	; (8006ce8 <HAL_RTC_SetAlarm_IT+0x170>)
 8006bfc:	699b      	ldr	r3, [r3, #24]
 8006bfe:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006c02:	d101      	bne.n	8006c08 <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006c04:	2300      	movs	r3, #0
 8006c06:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006c08:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006c0a:	7863      	ldrb	r3, [r4, #1]
 8006c0c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006c0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006c12:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006c14:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006c16:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006c18:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006c1c:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006c20:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006c24:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006c26:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006c28:	4318      	orrs	r0, r3
 8006c2a:	e000      	b.n	8006c2e <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 8006c2c:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c2e:	4b2e      	ldr	r3, [pc, #184]	; (8006ce8 <HAL_RTC_SetAlarm_IT+0x170>)
 8006c30:	22ca      	movs	r2, #202	; 0xca
 8006c32:	625a      	str	r2, [r3, #36]	; 0x24
 8006c34:	2253      	movs	r2, #83	; 0x53
 8006c36:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006c38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006c3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c3e:	d02a      	beq.n	8006c96 <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006c40:	4b29      	ldr	r3, [pc, #164]	; (8006ce8 <HAL_RTC_SetAlarm_IT+0x170>)
 8006c42:	699a      	ldr	r2, [r3, #24]
 8006c44:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 8006c48:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8006c4e:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8006c52:	d040      	beq.n	8006cd6 <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8006c54:	4b24      	ldr	r3, [pc, #144]	; (8006ce8 <HAL_RTC_SetAlarm_IT+0x170>)
 8006c56:	6498      	str	r0, [r3, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8006c58:	69a2      	ldr	r2, [r4, #24]
 8006c5a:	64da      	str	r2, [r3, #76]	; 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8006c5c:	6862      	ldr	r2, [r4, #4]
 8006c5e:	4b22      	ldr	r3, [pc, #136]	; (8006ce8 <HAL_RTC_SetAlarm_IT+0x170>)
 8006c60:	675a      	str	r2, [r3, #116]	; 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006c62:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8006c64:	f042 0202 	orr.w	r2, r2, #2
 8006c68:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006c6a:	699a      	ldr	r2, [r3, #24]
 8006c6c:	f442 5208 	orr.w	r2, r2, #8704	; 0x2200
 8006c70:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006c72:	4a1e      	ldr	r2, [pc, #120]	; (8006cec <HAL_RTC_SetAlarm_IT+0x174>)
 8006c74:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8006c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c7c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c80:	4b19      	ldr	r3, [pc, #100]	; (8006ce8 <HAL_RTC_SetAlarm_IT+0x170>)
 8006c82:	22ff      	movs	r2, #255	; 0xff
 8006c84:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8006c86:	2301      	movs	r3, #1
 8006c88:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  __HAL_UNLOCK(hrtc);
 8006c8c:	2000      	movs	r0, #0
 8006c8e:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
}
 8006c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006c96:	4b14      	ldr	r3, [pc, #80]	; (8006ce8 <HAL_RTC_SetAlarm_IT+0x170>)
 8006c98:	699a      	ldr	r2, [r3, #24]
 8006c9a:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8006c9e:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8006ca4:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8006ca8:	d00f      	beq.n	8006cca <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8006caa:	4b0f      	ldr	r3, [pc, #60]	; (8006ce8 <HAL_RTC_SetAlarm_IT+0x170>)
 8006cac:	6418      	str	r0, [r3, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8006cae:	69a2      	ldr	r2, [r4, #24]
 8006cb0:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8006cb2:	6862      	ldr	r2, [r4, #4]
 8006cb4:	4b0c      	ldr	r3, [pc, #48]	; (8006ce8 <HAL_RTC_SetAlarm_IT+0x170>)
 8006cb6:	671a      	str	r2, [r3, #112]	; 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006cb8:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8006cba:	f042 0201 	orr.w	r2, r2, #1
 8006cbe:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006cc0:	699a      	ldr	r2, [r3, #24]
 8006cc2:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
 8006cc6:	619a      	str	r2, [r3, #24]
 8006cc8:	e7d3      	b.n	8006c72 <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8006cca:	69a3      	ldr	r3, [r4, #24]
 8006ccc:	69e2      	ldr	r2, [r4, #28]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	4a05      	ldr	r2, [pc, #20]	; (8006ce8 <HAL_RTC_SetAlarm_IT+0x170>)
 8006cd2:	6453      	str	r3, [r2, #68]	; 0x44
 8006cd4:	e7ed      	b.n	8006cb2 <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8006cd6:	69a3      	ldr	r3, [r4, #24]
 8006cd8:	69e2      	ldr	r2, [r4, #28]
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	4a02      	ldr	r2, [pc, #8]	; (8006ce8 <HAL_RTC_SetAlarm_IT+0x170>)
 8006cde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006ce0:	e7bc      	b.n	8006c5c <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 8006ce2:	2002      	movs	r0, #2
}
 8006ce4:	4770      	bx	lr
 8006ce6:	bf00      	nop
 8006ce8:	40002800 	.word	0x40002800
 8006cec:	58000800 	.word	0x58000800

08006cf0 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006cf0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d017      	beq.n	8006d28 <HAL_RTCEx_EnableBypassShadow+0x38>
 8006cf8:	2101      	movs	r1, #1
 8006cfa:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006cfe:	2302      	movs	r3, #2
 8006d00:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d04:	4b09      	ldr	r3, [pc, #36]	; (8006d2c <HAL_RTCEx_EnableBypassShadow+0x3c>)
 8006d06:	22ca      	movs	r2, #202	; 0xca
 8006d08:	625a      	str	r2, [r3, #36]	; 0x24
 8006d0a:	2253      	movs	r2, #83	; 0x53
 8006d0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006d0e:	699a      	ldr	r2, [r3, #24]
 8006d10:	f042 0220 	orr.w	r2, r2, #32
 8006d14:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d16:	22ff      	movs	r2, #255	; 0xff
 8006d18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006d1a:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006d1e:	2300      	movs	r3, #0
 8006d20:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8006d24:	4618      	mov	r0, r3
 8006d26:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8006d28:	2002      	movs	r0, #2
}
 8006d2a:	4770      	bx	lr
 8006d2c:	40002800 	.word	0x40002800

08006d30 <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006d30:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d020      	beq.n	8006d7a <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 8006d38:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 8006d3a:	2101      	movs	r1, #1
 8006d3c:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d40:	2302      	movs	r3, #2
 8006d42:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d46:	4b0e      	ldr	r3, [pc, #56]	; (8006d80 <HAL_RTCEx_SetSSRU_IT+0x50>)
 8006d48:	22ca      	movs	r2, #202	; 0xca
 8006d4a:	625a      	str	r2, [r3, #36]	; 0x24
 8006d4c:	2253      	movs	r2, #83	; 0x53
 8006d4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8006d50:	699a      	ldr	r2, [r3, #24]
 8006d52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006d56:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8006d58:	4c0a      	ldr	r4, [pc, #40]	; (8006d84 <HAL_RTCEx_SetSSRU_IT+0x54>)
 8006d5a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8006d5e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006d62:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d66:	22ff      	movs	r2, #255	; 0xff
 8006d68:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006d6a:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006d6e:	2300      	movs	r3, #0
 8006d70:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8006d74:	4618      	mov	r0, r3
}
 8006d76:	bc10      	pop	{r4}
 8006d78:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8006d7a:	2002      	movs	r0, #2
}
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop
 8006d80:	40002800 	.word	0x40002800
 8006d84:	58000800 	.word	0x58000800

08006d88 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006d88:	b510      	push	{r4, lr}
 8006d8a:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8006d8c:	4b07      	ldr	r3, [pc, #28]	; (8006dac <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8006d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d90:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006d94:	d103      	bne.n	8006d9e <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006d96:	2301      	movs	r3, #1
 8006d98:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8006d9c:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 8006d9e:	4b03      	ldr	r3, [pc, #12]	; (8006dac <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8006da0:	2240      	movs	r2, #64	; 0x40
 8006da2:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8006da4:	f7fb f9b2 	bl	800210c <HAL_RTCEx_SSRUEventCallback>
 8006da8:	e7f5      	b.n	8006d96 <HAL_RTCEx_SSRUIRQHandler+0xe>
 8006daa:	bf00      	nop
 8006dac:	40002800 	.word	0x40002800

08006db0 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006db0:	4770      	bx	lr

08006db2 <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8006db2:	0089      	lsls	r1, r1, #2
 8006db4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8006db8:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006dbc:	600a      	str	r2, [r1, #0]
}
 8006dbe:	4770      	bx	lr

08006dc0 <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8006dc0:	0089      	lsls	r1, r1, #2
 8006dc2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8006dc6:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006dca:	6808      	ldr	r0, [r1, #0]
}
 8006dcc:	4770      	bx	lr
	...

08006dd0 <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8006dd0:	4b07      	ldr	r3, [pc, #28]	; (8006df0 <SUBGHZSPI_Init+0x20>)
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dd8:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8006dda:	f440 7041 	orr.w	r0, r0, #772	; 0x304
 8006dde:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8006de0:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8006de4:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006dec:	601a      	str	r2, [r3, #0]
}
 8006dee:	4770      	bx	lr
 8006df0:	58010000 	.word	0x58010000

08006df4 <HAL_SUBGHZ_Init>:
{
 8006df4:	b530      	push	{r4, r5, lr}
 8006df6:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 8006df8:	2800      	cmp	r0, #0
 8006dfa:	d04e      	beq.n	8006e9a <HAL_SUBGHZ_Init+0xa6>
 8006dfc:	4604      	mov	r4, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8006dfe:	7983      	ldrb	r3, [r0, #6]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d03b      	beq.n	8006e7c <HAL_SUBGHZ_Init+0x88>
  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006e04:	2302      	movs	r3, #2
 8006e06:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8006e08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e0c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8006e10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006e18:	4b21      	ldr	r3, [pc, #132]	; (8006ea0 <HAL_SUBGHZ_Init+0xac>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006e20:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006e24:	2264      	movs	r2, #100	; 0x64
 8006e26:	fb02 f303 	mul.w	r3, r2, r3
 8006e2a:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 8006e2c:	9b01      	ldr	r3, [sp, #4]
 8006e2e:	b34b      	cbz	r3, 8006e84 <HAL_SUBGHZ_Init+0x90>
    count--;
 8006e30:	9b01      	ldr	r3, [sp, #4]
 8006e32:	3b01      	subs	r3, #1
 8006e34:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8006e36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e3e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006e42:	d1f3      	bne.n	8006e2c <HAL_SUBGHZ_Init+0x38>
    status = HAL_OK;
 8006e44:	2500      	movs	r5, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006e46:	4b17      	ldr	r3, [pc, #92]	; (8006ea4 <HAL_SUBGHZ_Init+0xb0>)
 8006e48:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006e4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006e54:	4914      	ldr	r1, [pc, #80]	; (8006ea8 <HAL_SUBGHZ_Init+0xb4>)
 8006e56:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006e5a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006e5e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8006e62:	689a      	ldr	r2, [r3, #8]
 8006e64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e68:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8006e6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e6e:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 8006e70:	b15d      	cbz	r5, 8006e8a <HAL_SUBGHZ_Init+0x96>
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8006e72:	2301      	movs	r3, #1
 8006e74:	71a3      	strb	r3, [r4, #6]
}
 8006e76:	4628      	mov	r0, r5
 8006e78:	b003      	add	sp, #12
 8006e7a:	bd30      	pop	{r4, r5, pc}
    hsubghz->Lock = HAL_UNLOCKED;
 8006e7c:	7143      	strb	r3, [r0, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 8006e7e:	f7fa fd35 	bl	80018ec <HAL_SUBGHZ_MspInit>
 8006e82:	e7bf      	b.n	8006e04 <HAL_SUBGHZ_Init+0x10>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006e84:	2501      	movs	r5, #1
 8006e86:	60a5      	str	r5, [r4, #8]
      break;
 8006e88:	e7dd      	b.n	8006e46 <HAL_SUBGHZ_Init+0x52>
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8006e8a:	6820      	ldr	r0, [r4, #0]
 8006e8c:	f7ff ffa0 	bl	8006dd0 <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006e90:	2301      	movs	r3, #1
 8006e92:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8006e94:	2300      	movs	r3, #0
 8006e96:	60a3      	str	r3, [r4, #8]
 8006e98:	e7eb      	b.n	8006e72 <HAL_SUBGHZ_Init+0x7e>
    return status;
 8006e9a:	2501      	movs	r5, #1
 8006e9c:	e7eb      	b.n	8006e76 <HAL_SUBGHZ_Init+0x82>
 8006e9e:	bf00      	nop
 8006ea0:	20000070 	.word	0x20000070
 8006ea4:	58000400 	.word	0x58000400
 8006ea8:	58000800 	.word	0x58000800

08006eac <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8006eac:	b082      	sub	sp, #8
 8006eae:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006eb0:	4b1a      	ldr	r3, [pc, #104]	; (8006f1c <SUBGHZSPI_Transmit+0x70>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006eb8:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006ebc:	2064      	movs	r0, #100	; 0x64
 8006ebe:	fb00 f303 	mul.w	r3, r0, r3
 8006ec2:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006ec4:	9b01      	ldr	r3, [sp, #4]
 8006ec6:	b14b      	cbz	r3, 8006edc <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8006ec8:	9b01      	ldr	r3, [sp, #4]
 8006eca:	3b01      	subs	r3, #1
 8006ecc:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006ece:	4b14      	ldr	r3, [pc, #80]	; (8006f20 <SUBGHZSPI_Transmit+0x74>)
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	f013 0f02 	tst.w	r3, #2
 8006ed6:	d0f5      	beq.n	8006ec4 <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8006ed8:	2000      	movs	r0, #0
 8006eda:	e001      	b.n	8006ee0 <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006edc:	2001      	movs	r0, #1
 8006ede:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 8006ee0:	4b0f      	ldr	r3, [pc, #60]	; (8006f20 <SUBGHZSPI_Transmit+0x74>)
 8006ee2:	7319      	strb	r1, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006ee4:	4b0d      	ldr	r3, [pc, #52]	; (8006f1c <SUBGHZSPI_Transmit+0x70>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006eec:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006ef0:	2164      	movs	r1, #100	; 0x64
 8006ef2:	fb01 f303 	mul.w	r3, r1, r3
 8006ef6:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8006ef8:	9b01      	ldr	r3, [sp, #4]
 8006efa:	b143      	cbz	r3, 8006f0e <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8006efc:	9b01      	ldr	r3, [sp, #4]
 8006efe:	3b01      	subs	r3, #1
 8006f00:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8006f02:	4b07      	ldr	r3, [pc, #28]	; (8006f20 <SUBGHZSPI_Transmit+0x74>)
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	f013 0f01 	tst.w	r3, #1
 8006f0a:	d0f5      	beq.n	8006ef8 <SUBGHZSPI_Transmit+0x4c>
 8006f0c:	e001      	b.n	8006f12 <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006f0e:	2001      	movs	r0, #1
 8006f10:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8006f12:	4b03      	ldr	r3, [pc, #12]	; (8006f20 <SUBGHZSPI_Transmit+0x74>)
 8006f14:	68db      	ldr	r3, [r3, #12]

  return status;
}
 8006f16:	b002      	add	sp, #8
 8006f18:	4770      	bx	lr
 8006f1a:	bf00      	nop
 8006f1c:	20000070 	.word	0x20000070
 8006f20:	58010000 	.word	0x58010000

08006f24 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8006f24:	b082      	sub	sp, #8
 8006f26:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006f28:	4b1c      	ldr	r3, [pc, #112]	; (8006f9c <SUBGHZSPI_Receive+0x78>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006f30:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006f34:	2064      	movs	r0, #100	; 0x64
 8006f36:	fb00 f303 	mul.w	r3, r0, r3
 8006f3a:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006f3c:	9b01      	ldr	r3, [sp, #4]
 8006f3e:	b14b      	cbz	r3, 8006f54 <SUBGHZSPI_Receive+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8006f40:	9b01      	ldr	r3, [sp, #4]
 8006f42:	3b01      	subs	r3, #1
 8006f44:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006f46:	4b16      	ldr	r3, [pc, #88]	; (8006fa0 <SUBGHZSPI_Receive+0x7c>)
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	f013 0f02 	tst.w	r3, #2
 8006f4e:	d0f5      	beq.n	8006f3c <SUBGHZSPI_Receive+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8006f50:	2000      	movs	r0, #0
 8006f52:	e001      	b.n	8006f58 <SUBGHZSPI_Receive+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006f54:	2001      	movs	r0, #1
 8006f56:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 8006f58:	4b11      	ldr	r3, [pc, #68]	; (8006fa0 <SUBGHZSPI_Receive+0x7c>)
 8006f5a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006f5e:	f883 c00c 	strb.w	ip, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006f62:	4b0e      	ldr	r3, [pc, #56]	; (8006f9c <SUBGHZSPI_Receive+0x78>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006f6a:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006f6e:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8006f72:	fb0c f303 	mul.w	r3, ip, r3
 8006f76:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8006f78:	9b01      	ldr	r3, [sp, #4]
 8006f7a:	b143      	cbz	r3, 8006f8e <SUBGHZSPI_Receive+0x6a>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8006f7c:	9b01      	ldr	r3, [sp, #4]
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8006f82:	4b07      	ldr	r3, [pc, #28]	; (8006fa0 <SUBGHZSPI_Receive+0x7c>)
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	f013 0f01 	tst.w	r3, #1
 8006f8a:	d0f5      	beq.n	8006f78 <SUBGHZSPI_Receive+0x54>
 8006f8c:	e001      	b.n	8006f92 <SUBGHZSPI_Receive+0x6e>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006f8e:	2001      	movs	r0, #1
 8006f90:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8006f92:	4b03      	ldr	r3, [pc, #12]	; (8006fa0 <SUBGHZSPI_Receive+0x7c>)
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	700b      	strb	r3, [r1, #0]

  return status;
}
 8006f98:	b002      	add	sp, #8
 8006f9a:	4770      	bx	lr
 8006f9c:	20000070 	.word	0x20000070
 8006fa0:	58010000 	.word	0x58010000

08006fa4 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006fa4:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8006fa6:	4b13      	ldr	r3, [pc, #76]	; (8006ff4 <SUBGHZ_WaitOnBusy+0x50>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006fae:	f3c3 434b 	ubfx	r3, r3, #17, #12
 8006fb2:	2264      	movs	r2, #100	; 0x64
 8006fb4:	fb02 f303 	mul.w	r3, r2, r3
 8006fb8:	9301      	str	r3, [sp, #4]
 8006fba:	e006      	b.n	8006fca <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8006fbc:	2302      	movs	r3, #2
 8006fbe:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 8006fc0:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 8006fc2:	b002      	add	sp, #8
 8006fc4:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8006fc6:	4213      	tst	r3, r2
 8006fc8:	d012      	beq.n	8006ff0 <SUBGHZ_WaitOnBusy+0x4c>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8006fca:	4b0b      	ldr	r3, [pc, #44]	; (8006ff8 <SUBGHZ_WaitOnBusy+0x54>)
 8006fcc:	695b      	ldr	r3, [r3, #20]
 8006fce:	f013 0304 	ands.w	r3, r3, #4
 8006fd2:	d000      	beq.n	8006fd6 <SUBGHZ_WaitOnBusy+0x32>
 8006fd4:	2301      	movs	r3, #1
    if (count == 0U)
 8006fd6:	9a01      	ldr	r2, [sp, #4]
 8006fd8:	2a00      	cmp	r2, #0
 8006fda:	d0ef      	beq.n	8006fbc <SUBGHZ_WaitOnBusy+0x18>
    count--;
 8006fdc:	9a01      	ldr	r2, [sp, #4]
 8006fde:	3a01      	subs	r2, #1
 8006fe0:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8006fe2:	4a05      	ldr	r2, [pc, #20]	; (8006ff8 <SUBGHZ_WaitOnBusy+0x54>)
 8006fe4:	6952      	ldr	r2, [r2, #20]
 8006fe6:	f012 0202 	ands.w	r2, r2, #2
 8006fea:	d0ec      	beq.n	8006fc6 <SUBGHZ_WaitOnBusy+0x22>
 8006fec:	2201      	movs	r2, #1
 8006fee:	e7ea      	b.n	8006fc6 <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 8006ff0:	2000      	movs	r0, #0
 8006ff2:	e7e6      	b.n	8006fc2 <SUBGHZ_WaitOnBusy+0x1e>
 8006ff4:	20000070 	.word	0x20000070
 8006ff8:	58000400 	.word	0x58000400

08006ffc <SUBGHZ_CheckDeviceReady>:
{
 8006ffc:	b500      	push	{lr}
 8006ffe:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8007000:	7903      	ldrb	r3, [r0, #4]
 8007002:	2b01      	cmp	r3, #1
 8007004:	d004      	beq.n	8007010 <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8007006:	f7ff ffcd 	bl	8006fa4 <SUBGHZ_WaitOnBusy>
}
 800700a:	b003      	add	sp, #12
 800700c:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 8007010:	4b0d      	ldr	r3, [pc, #52]	; (8007048 <SUBGHZ_CheckDeviceReady+0x4c>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007018:	f3c3 334f 	ubfx	r3, r3, #13, #16
 800701c:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800701e:	4a0b      	ldr	r2, [pc, #44]	; (800704c <SUBGHZ_CheckDeviceReady+0x50>)
 8007020:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007024:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007028:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      count--;
 800702c:	9b01      	ldr	r3, [sp, #4]
 800702e:	3b01      	subs	r3, #1
 8007030:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 8007032:	9b01      	ldr	r3, [sp, #4]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1f9      	bne.n	800702c <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007038:	4a04      	ldr	r2, [pc, #16]	; (800704c <SUBGHZ_CheckDeviceReady+0x50>)
 800703a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800703e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007042:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007046:	e7de      	b.n	8007006 <SUBGHZ_CheckDeviceReady+0xa>
 8007048:	20000070 	.word	0x20000070
 800704c:	58000400 	.word	0x58000400

08007050 <HAL_SUBGHZ_WriteRegisters>:
{
 8007050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007054:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007056:	7980      	ldrb	r0, [r0, #6]
 8007058:	fa5f f880 	uxtb.w	r8, r0
 800705c:	f1b8 0f01 	cmp.w	r8, #1
 8007060:	d13e      	bne.n	80070e0 <HAL_SUBGHZ_WriteRegisters+0x90>
 8007062:	460c      	mov	r4, r1
 8007064:	4617      	mov	r7, r2
 8007066:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8007068:	796b      	ldrb	r3, [r5, #5]
 800706a:	2b01      	cmp	r3, #1
 800706c:	d03b      	beq.n	80070e6 <HAL_SUBGHZ_WriteRegisters+0x96>
 800706e:	2301      	movs	r3, #1
 8007070:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8007072:	2302      	movs	r3, #2
 8007074:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007076:	4628      	mov	r0, r5
 8007078:	f7ff ffc0 	bl	8006ffc <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800707c:	4a1b      	ldr	r2, [pc, #108]	; (80070ec <HAL_SUBGHZ_WriteRegisters+0x9c>)
 800707e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007082:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007086:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 800708a:	210d      	movs	r1, #13
 800708c:	4628      	mov	r0, r5
 800708e:	f7ff ff0d 	bl	8006eac <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007092:	0a21      	lsrs	r1, r4, #8
 8007094:	4628      	mov	r0, r5
 8007096:	f7ff ff09 	bl	8006eac <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800709a:	b2e1      	uxtb	r1, r4
 800709c:	4628      	mov	r0, r5
 800709e:	f7ff ff05 	bl	8006eac <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80070a2:	2400      	movs	r4, #0
 80070a4:	e005      	b.n	80070b2 <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80070a6:	5d39      	ldrb	r1, [r7, r4]
 80070a8:	4628      	mov	r0, r5
 80070aa:	f7ff feff 	bl	8006eac <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80070ae:	3401      	adds	r4, #1
 80070b0:	b2a4      	uxth	r4, r4
 80070b2:	42b4      	cmp	r4, r6
 80070b4:	d3f7      	bcc.n	80070a6 <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80070b6:	4a0d      	ldr	r2, [pc, #52]	; (80070ec <HAL_SUBGHZ_WriteRegisters+0x9c>)
 80070b8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80070bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80070c4:	4628      	mov	r0, r5
 80070c6:	f7ff ff6d 	bl	8006fa4 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80070ca:	68ab      	ldr	r3, [r5, #8]
 80070cc:	b90b      	cbnz	r3, 80070d2 <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 80070ce:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80070d2:	2301      	movs	r3, #1
 80070d4:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 80070d6:	2300      	movs	r3, #0
 80070d8:	716b      	strb	r3, [r5, #5]
}
 80070da:	4640      	mov	r0, r8
 80070dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80070e0:	f04f 0802 	mov.w	r8, #2
 80070e4:	e7f9      	b.n	80070da <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 80070e6:	f04f 0802 	mov.w	r8, #2
 80070ea:	e7f6      	b.n	80070da <HAL_SUBGHZ_WriteRegisters+0x8a>
 80070ec:	58000400 	.word	0x58000400

080070f0 <HAL_SUBGHZ_ReadRegisters>:
{
 80070f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070f4:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80070f6:	7980      	ldrb	r0, [r0, #6]
 80070f8:	fa5f f880 	uxtb.w	r8, r0
 80070fc:	f1b8 0f01 	cmp.w	r8, #1
 8007100:	d141      	bne.n	8007186 <HAL_SUBGHZ_ReadRegisters+0x96>
 8007102:	460c      	mov	r4, r1
 8007104:	4615      	mov	r5, r2
 8007106:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8007108:	7973      	ldrb	r3, [r6, #5]
 800710a:	2b01      	cmp	r3, #1
 800710c:	d03e      	beq.n	800718c <HAL_SUBGHZ_ReadRegisters+0x9c>
 800710e:	2301      	movs	r3, #1
 8007110:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007112:	4630      	mov	r0, r6
 8007114:	f7ff ff72 	bl	8006ffc <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007118:	4a1e      	ldr	r2, [pc, #120]	; (8007194 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 800711a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800711e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007122:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8007126:	211d      	movs	r1, #29
 8007128:	4630      	mov	r0, r6
 800712a:	f7ff febf 	bl	8006eac <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800712e:	0a21      	lsrs	r1, r4, #8
 8007130:	4630      	mov	r0, r6
 8007132:	f7ff febb 	bl	8006eac <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007136:	b2e1      	uxtb	r1, r4
 8007138:	4630      	mov	r0, r6
 800713a:	f7ff feb7 	bl	8006eac <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 800713e:	2100      	movs	r1, #0
 8007140:	4630      	mov	r0, r6
 8007142:	f7ff feb3 	bl	8006eac <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007146:	2400      	movs	r4, #0
 8007148:	e006      	b.n	8007158 <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800714a:	4629      	mov	r1, r5
 800714c:	4630      	mov	r0, r6
 800714e:	f7ff fee9 	bl	8006f24 <SUBGHZSPI_Receive>
      pData++;
 8007152:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8007154:	3401      	adds	r4, #1
 8007156:	b2a4      	uxth	r4, r4
 8007158:	42bc      	cmp	r4, r7
 800715a:	d3f6      	bcc.n	800714a <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800715c:	4a0d      	ldr	r2, [pc, #52]	; (8007194 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 800715e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007162:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007166:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800716a:	4630      	mov	r0, r6
 800716c:	f7ff ff1a 	bl	8006fa4 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007170:	68b3      	ldr	r3, [r6, #8]
 8007172:	b90b      	cbnz	r3, 8007178 <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 8007174:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007178:	2301      	movs	r3, #1
 800717a:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 800717c:	2300      	movs	r3, #0
 800717e:	7173      	strb	r3, [r6, #5]
}
 8007180:	4640      	mov	r0, r8
 8007182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8007186:	f04f 0802 	mov.w	r8, #2
 800718a:	e7f9      	b.n	8007180 <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 800718c:	f04f 0802 	mov.w	r8, #2
 8007190:	e7f6      	b.n	8007180 <HAL_SUBGHZ_ReadRegisters+0x90>
 8007192:	bf00      	nop
 8007194:	58000400 	.word	0x58000400

08007198 <HAL_SUBGHZ_ExecSetCmd>:
{
 8007198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800719c:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800719e:	7980      	ldrb	r0, [r0, #6]
 80071a0:	fa5f f980 	uxtb.w	r9, r0
 80071a4:	f1b9 0f01 	cmp.w	r9, #1
 80071a8:	d143      	bne.n	8007232 <HAL_SUBGHZ_ExecSetCmd+0x9a>
 80071aa:	4688      	mov	r8, r1
 80071ac:	4617      	mov	r7, r2
 80071ae:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 80071b0:	796b      	ldrb	r3, [r5, #5]
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d040      	beq.n	8007238 <HAL_SUBGHZ_ExecSetCmd+0xa0>
 80071b6:	2301      	movs	r3, #1
 80071b8:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80071ba:	4628      	mov	r0, r5
 80071bc:	f7ff ff1e 	bl	8006ffc <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80071c0:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 80071c4:	d005      	beq.n	80071d2 <HAL_SUBGHZ_ExecSetCmd+0x3a>
 80071c6:	f1b8 0f94 	cmp.w	r8, #148	; 0x94
 80071ca:	d002      	beq.n	80071d2 <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80071cc:	2300      	movs	r3, #0
 80071ce:	712b      	strb	r3, [r5, #4]
 80071d0:	e001      	b.n	80071d6 <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80071d2:	2301      	movs	r3, #1
 80071d4:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80071d6:	4a1a      	ldr	r2, [pc, #104]	; (8007240 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 80071d8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80071dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80071e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80071e4:	4641      	mov	r1, r8
 80071e6:	4628      	mov	r0, r5
 80071e8:	f7ff fe60 	bl	8006eac <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80071ec:	2400      	movs	r4, #0
 80071ee:	e005      	b.n	80071fc <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80071f0:	5d39      	ldrb	r1, [r7, r4]
 80071f2:	4628      	mov	r0, r5
 80071f4:	f7ff fe5a 	bl	8006eac <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80071f8:	3401      	adds	r4, #1
 80071fa:	b2a4      	uxth	r4, r4
 80071fc:	42b4      	cmp	r4, r6
 80071fe:	d3f7      	bcc.n	80071f0 <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007200:	4a0f      	ldr	r2, [pc, #60]	; (8007240 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8007202:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800720a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if (Command != RADIO_SET_SLEEP)
 800720e:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 8007212:	d10a      	bne.n	800722a <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007214:	68ab      	ldr	r3, [r5, #8]
 8007216:	b90b      	cbnz	r3, 800721c <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 8007218:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800721c:	2301      	movs	r3, #1
 800721e:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8007220:	2300      	movs	r3, #0
 8007222:	716b      	strb	r3, [r5, #5]
}
 8007224:	4648      	mov	r0, r9
 8007226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 800722a:	4628      	mov	r0, r5
 800722c:	f7ff feba 	bl	8006fa4 <SUBGHZ_WaitOnBusy>
 8007230:	e7f0      	b.n	8007214 <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 8007232:	f04f 0902 	mov.w	r9, #2
 8007236:	e7f5      	b.n	8007224 <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 8007238:	f04f 0902 	mov.w	r9, #2
 800723c:	e7f2      	b.n	8007224 <HAL_SUBGHZ_ExecSetCmd+0x8c>
 800723e:	bf00      	nop
 8007240:	58000400 	.word	0x58000400

08007244 <HAL_SUBGHZ_ExecGetCmd>:
{
 8007244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007248:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800724a:	7980      	ldrb	r0, [r0, #6]
 800724c:	fa5f f880 	uxtb.w	r8, r0
 8007250:	f1b8 0f01 	cmp.w	r8, #1
 8007254:	d139      	bne.n	80072ca <HAL_SUBGHZ_ExecGetCmd+0x86>
 8007256:	460c      	mov	r4, r1
 8007258:	4615      	mov	r5, r2
 800725a:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 800725c:	7973      	ldrb	r3, [r6, #5]
 800725e:	2b01      	cmp	r3, #1
 8007260:	d036      	beq.n	80072d0 <HAL_SUBGHZ_ExecGetCmd+0x8c>
 8007262:	2301      	movs	r3, #1
 8007264:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007266:	4630      	mov	r0, r6
 8007268:	f7ff fec8 	bl	8006ffc <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800726c:	4a1a      	ldr	r2, [pc, #104]	; (80072d8 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 800726e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007272:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007276:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800727a:	4621      	mov	r1, r4
 800727c:	4630      	mov	r0, r6
 800727e:	f7ff fe15 	bl	8006eac <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007282:	2100      	movs	r1, #0
 8007284:	4630      	mov	r0, r6
 8007286:	f7ff fe11 	bl	8006eac <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800728a:	2400      	movs	r4, #0
 800728c:	e006      	b.n	800729c <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800728e:	4629      	mov	r1, r5
 8007290:	4630      	mov	r0, r6
 8007292:	f7ff fe47 	bl	8006f24 <SUBGHZSPI_Receive>
      pData++;
 8007296:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8007298:	3401      	adds	r4, #1
 800729a:	b2a4      	uxth	r4, r4
 800729c:	42bc      	cmp	r4, r7
 800729e:	d3f6      	bcc.n	800728e <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80072a0:	4a0d      	ldr	r2, [pc, #52]	; (80072d8 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 80072a2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80072a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80072ae:	4630      	mov	r0, r6
 80072b0:	f7ff fe78 	bl	8006fa4 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80072b4:	68b3      	ldr	r3, [r6, #8]
 80072b6:	b90b      	cbnz	r3, 80072bc <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 80072b8:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80072bc:	2301      	movs	r3, #1
 80072be:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 80072c0:	2300      	movs	r3, #0
 80072c2:	7173      	strb	r3, [r6, #5]
}
 80072c4:	4640      	mov	r0, r8
 80072c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80072ca:	f04f 0802 	mov.w	r8, #2
 80072ce:	e7f9      	b.n	80072c4 <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 80072d0:	f04f 0802 	mov.w	r8, #2
 80072d4:	e7f6      	b.n	80072c4 <HAL_SUBGHZ_ExecGetCmd+0x80>
 80072d6:	bf00      	nop
 80072d8:	58000400 	.word	0x58000400

080072dc <HAL_SUBGHZ_IRQHandler>:
{
 80072dc:	b530      	push	{r4, r5, lr}
 80072de:	b083      	sub	sp, #12
 80072e0:	4605      	mov	r5, r0
  uint8_t tmpisr[2U] = {0U};
 80072e2:	2300      	movs	r3, #0
 80072e4:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 80072e8:	2302      	movs	r3, #2
 80072ea:	aa01      	add	r2, sp, #4
 80072ec:	2112      	movs	r1, #18
 80072ee:	f7ff ffa9 	bl	8007244 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 80072f2:	f89d 4004 	ldrb.w	r4, [sp, #4]
  itsource = (itsource << 8U) | tmpisr[1U];
 80072f6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80072fa:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 80072fe:	f013 0f01 	tst.w	r3, #1
 8007302:	d126      	bne.n	8007352 <HAL_SUBGHZ_IRQHandler+0x76>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8007304:	f014 0f02 	tst.w	r4, #2
 8007308:	d127      	bne.n	800735a <HAL_SUBGHZ_IRQHandler+0x7e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800730a:	f014 0f04 	tst.w	r4, #4
 800730e:	d128      	bne.n	8007362 <HAL_SUBGHZ_IRQHandler+0x86>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8007310:	f014 0f08 	tst.w	r4, #8
 8007314:	d129      	bne.n	800736a <HAL_SUBGHZ_IRQHandler+0x8e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8007316:	f014 0f10 	tst.w	r4, #16
 800731a:	d12a      	bne.n	8007372 <HAL_SUBGHZ_IRQHandler+0x96>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800731c:	f014 0f20 	tst.w	r4, #32
 8007320:	d12b      	bne.n	800737a <HAL_SUBGHZ_IRQHandler+0x9e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8007322:	f014 0f40 	tst.w	r4, #64	; 0x40
 8007326:	d12c      	bne.n	8007382 <HAL_SUBGHZ_IRQHandler+0xa6>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8007328:	f014 0f80 	tst.w	r4, #128	; 0x80
 800732c:	d006      	beq.n	800733c <HAL_SUBGHZ_IRQHandler+0x60>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800732e:	f414 7f80 	tst.w	r4, #256	; 0x100
 8007332:	d02a      	beq.n	800738a <HAL_SUBGHZ_IRQHandler+0xae>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8007334:	2101      	movs	r1, #1
 8007336:	4628      	mov	r0, r5
 8007338:	f00b fa4c 	bl	80127d4 <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 800733c:	f414 7f00 	tst.w	r4, #512	; 0x200
 8007340:	d128      	bne.n	8007394 <HAL_SUBGHZ_IRQHandler+0xb8>
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8007342:	2302      	movs	r3, #2
 8007344:	aa01      	add	r2, sp, #4
 8007346:	4619      	mov	r1, r3
 8007348:	4628      	mov	r0, r5
 800734a:	f7ff ff25 	bl	8007198 <HAL_SUBGHZ_ExecSetCmd>
}
 800734e:	b003      	add	sp, #12
 8007350:	bd30      	pop	{r4, r5, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8007352:	4628      	mov	r0, r5
 8007354:	f00b fa26 	bl	80127a4 <HAL_SUBGHZ_TxCpltCallback>
 8007358:	e7d4      	b.n	8007304 <HAL_SUBGHZ_IRQHandler+0x28>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 800735a:	4628      	mov	r0, r5
 800735c:	f00b fa2a 	bl	80127b4 <HAL_SUBGHZ_RxCpltCallback>
 8007360:	e7d3      	b.n	800730a <HAL_SUBGHZ_IRQHandler+0x2e>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8007362:	4628      	mov	r0, r5
 8007364:	f00b fa5a 	bl	801281c <HAL_SUBGHZ_PreambleDetectedCallback>
 8007368:	e7d2      	b.n	8007310 <HAL_SUBGHZ_IRQHandler+0x34>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800736a:	4628      	mov	r0, r5
 800736c:	f00b fa5e 	bl	801282c <HAL_SUBGHZ_SyncWordValidCallback>
 8007370:	e7d1      	b.n	8007316 <HAL_SUBGHZ_IRQHandler+0x3a>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8007372:	4628      	mov	r0, r5
 8007374:	f00b fa62 	bl	801283c <HAL_SUBGHZ_HeaderValidCallback>
 8007378:	e7d0      	b.n	800731c <HAL_SUBGHZ_IRQHandler+0x40>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800737a:	4628      	mov	r0, r5
 800737c:	f00b fa46 	bl	801280c <HAL_SUBGHZ_HeaderErrorCallback>
 8007380:	e7cf      	b.n	8007322 <HAL_SUBGHZ_IRQHandler+0x46>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8007382:	4628      	mov	r0, r5
 8007384:	f00b fa1e 	bl	80127c4 <HAL_SUBGHZ_CRCErrorCallback>
 8007388:	e7ce      	b.n	8007328 <HAL_SUBGHZ_IRQHandler+0x4c>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800738a:	2100      	movs	r1, #0
 800738c:	4628      	mov	r0, r5
 800738e:	f00b fa21 	bl	80127d4 <HAL_SUBGHZ_CADStatusCallback>
 8007392:	e7d3      	b.n	800733c <HAL_SUBGHZ_IRQHandler+0x60>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8007394:	4628      	mov	r0, r5
 8007396:	f00b fa2f 	bl	80127f8 <HAL_SUBGHZ_RxTxTimeoutCallback>
 800739a:	e7d2      	b.n	8007342 <HAL_SUBGHZ_IRQHandler+0x66>

0800739c <HAL_SUBGHZ_WriteBuffer>:
{
 800739c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073a0:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80073a2:	7980      	ldrb	r0, [r0, #6]
 80073a4:	fa5f f880 	uxtb.w	r8, r0
 80073a8:	f1b8 0f01 	cmp.w	r8, #1
 80073ac:	d138      	bne.n	8007420 <HAL_SUBGHZ_WriteBuffer+0x84>
 80073ae:	460c      	mov	r4, r1
 80073b0:	4617      	mov	r7, r2
 80073b2:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 80073b4:	796b      	ldrb	r3, [r5, #5]
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d035      	beq.n	8007426 <HAL_SUBGHZ_WriteBuffer+0x8a>
 80073ba:	2301      	movs	r3, #1
 80073bc:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80073be:	4628      	mov	r0, r5
 80073c0:	f7ff fe1c 	bl	8006ffc <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80073c4:	4a19      	ldr	r2, [pc, #100]	; (800742c <HAL_SUBGHZ_WriteBuffer+0x90>)
 80073c6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80073ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80073ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80073d2:	210e      	movs	r1, #14
 80073d4:	4628      	mov	r0, r5
 80073d6:	f7ff fd69 	bl	8006eac <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80073da:	4621      	mov	r1, r4
 80073dc:	4628      	mov	r0, r5
 80073de:	f7ff fd65 	bl	8006eac <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80073e2:	2400      	movs	r4, #0
 80073e4:	e005      	b.n	80073f2 <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80073e6:	5d39      	ldrb	r1, [r7, r4]
 80073e8:	4628      	mov	r0, r5
 80073ea:	f7ff fd5f 	bl	8006eac <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80073ee:	3401      	adds	r4, #1
 80073f0:	b2a4      	uxth	r4, r4
 80073f2:	42b4      	cmp	r4, r6
 80073f4:	d3f7      	bcc.n	80073e6 <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80073f6:	4a0d      	ldr	r2, [pc, #52]	; (800742c <HAL_SUBGHZ_WriteBuffer+0x90>)
 80073f8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80073fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007400:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007404:	4628      	mov	r0, r5
 8007406:	f7ff fdcd 	bl	8006fa4 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800740a:	68ab      	ldr	r3, [r5, #8]
 800740c:	b90b      	cbnz	r3, 8007412 <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 800740e:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007412:	2301      	movs	r3, #1
 8007414:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8007416:	2300      	movs	r3, #0
 8007418:	716b      	strb	r3, [r5, #5]
}
 800741a:	4640      	mov	r0, r8
 800741c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8007420:	f04f 0802 	mov.w	r8, #2
 8007424:	e7f9      	b.n	800741a <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 8007426:	f04f 0802 	mov.w	r8, #2
 800742a:	e7f6      	b.n	800741a <HAL_SUBGHZ_WriteBuffer+0x7e>
 800742c:	58000400 	.word	0x58000400

08007430 <HAL_SUBGHZ_ReadBuffer>:
{
 8007430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007434:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007436:	7980      	ldrb	r0, [r0, #6]
 8007438:	fa5f f880 	uxtb.w	r8, r0
 800743c:	f1b8 0f01 	cmp.w	r8, #1
 8007440:	d13d      	bne.n	80074be <HAL_SUBGHZ_ReadBuffer+0x8e>
 8007442:	460c      	mov	r4, r1
 8007444:	4615      	mov	r5, r2
 8007446:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8007448:	7973      	ldrb	r3, [r6, #5]
 800744a:	2b01      	cmp	r3, #1
 800744c:	d03a      	beq.n	80074c4 <HAL_SUBGHZ_ReadBuffer+0x94>
 800744e:	2301      	movs	r3, #1
 8007450:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007452:	4630      	mov	r0, r6
 8007454:	f7ff fdd2 	bl	8006ffc <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007458:	4a1c      	ldr	r2, [pc, #112]	; (80074cc <HAL_SUBGHZ_ReadBuffer+0x9c>)
 800745a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800745e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007462:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8007466:	211e      	movs	r1, #30
 8007468:	4630      	mov	r0, r6
 800746a:	f7ff fd1f 	bl	8006eac <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800746e:	4621      	mov	r1, r4
 8007470:	4630      	mov	r0, r6
 8007472:	f7ff fd1b 	bl	8006eac <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007476:	2100      	movs	r1, #0
 8007478:	4630      	mov	r0, r6
 800747a:	f7ff fd17 	bl	8006eac <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800747e:	2400      	movs	r4, #0
 8007480:	e006      	b.n	8007490 <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007482:	4629      	mov	r1, r5
 8007484:	4630      	mov	r0, r6
 8007486:	f7ff fd4d 	bl	8006f24 <SUBGHZSPI_Receive>
      pData++;
 800748a:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 800748c:	3401      	adds	r4, #1
 800748e:	b2a4      	uxth	r4, r4
 8007490:	42bc      	cmp	r4, r7
 8007492:	d3f6      	bcc.n	8007482 <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007494:	4a0d      	ldr	r2, [pc, #52]	; (80074cc <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8007496:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800749a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800749e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80074a2:	4630      	mov	r0, r6
 80074a4:	f7ff fd7e 	bl	8006fa4 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80074a8:	68b3      	ldr	r3, [r6, #8]
 80074aa:	b90b      	cbnz	r3, 80074b0 <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 80074ac:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80074b0:	2301      	movs	r3, #1
 80074b2:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 80074b4:	2300      	movs	r3, #0
 80074b6:	7173      	strb	r3, [r6, #5]
}
 80074b8:	4640      	mov	r0, r8
 80074ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80074be:	f04f 0802 	mov.w	r8, #2
 80074c2:	e7f9      	b.n	80074b8 <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 80074c4:	f04f 0802 	mov.w	r8, #2
 80074c8:	e7f6      	b.n	80074b8 <HAL_SUBGHZ_ReadBuffer+0x88>
 80074ca:	bf00      	nop
 80074cc:	58000400 	.word	0x58000400

080074d0 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80074d0:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d2:	e852 3f00 	ldrex	r3, [r2]
 80074d6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074da:	e842 3100 	strex	r1, r3, [r2]
 80074de:	2900      	cmp	r1, #0
 80074e0:	d1f6      	bne.n	80074d0 <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80074e2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e4:	f102 0308 	add.w	r3, r2, #8
 80074e8:	e853 3f00 	ldrex	r3, [r3]
 80074ec:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f0:	3208      	adds	r2, #8
 80074f2:	e842 3100 	strex	r1, r3, [r2]
 80074f6:	2900      	cmp	r1, #0
 80074f8:	d1f3      	bne.n	80074e2 <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074fa:	2320      	movs	r3, #32
 80074fc:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
}
 8007500:	4770      	bx	lr

08007502 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007502:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007504:	e852 3f00 	ldrex	r3, [r2]
 8007508:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800750c:	e842 3100 	strex	r1, r3, [r2]
 8007510:	2900      	cmp	r1, #0
 8007512:	d1f6      	bne.n	8007502 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007514:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007516:	f102 0308 	add.w	r3, r2, #8
 800751a:	e853 3f00 	ldrex	r3, [r3]
 800751e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007522:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007526:	3208      	adds	r2, #8
 8007528:	e842 3100 	strex	r1, r3, [r2]
 800752c:	2900      	cmp	r1, #0
 800752e:	d1f1      	bne.n	8007514 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007530:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8007532:	2b01      	cmp	r3, #1
 8007534:	d006      	beq.n	8007544 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007536:	2320      	movs	r3, #32
 8007538:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800753c:	2300      	movs	r3, #0
 800753e:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007540:	6703      	str	r3, [r0, #112]	; 0x70
}
 8007542:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007544:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007546:	e852 3f00 	ldrex	r3, [r2]
 800754a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800754e:	e842 3100 	strex	r1, r3, [r2]
 8007552:	2900      	cmp	r1, #0
 8007554:	d1f6      	bne.n	8007544 <UART_EndRxTransfer+0x42>
 8007556:	e7ee      	b.n	8007536 <UART_EndRxTransfer+0x34>

08007558 <HAL_UART_Transmit_DMA>:
  if (huart->gState == HAL_UART_STATE_READY)
 8007558:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800755c:	2b20      	cmp	r3, #32
 800755e:	d14c      	bne.n	80075fa <HAL_UART_Transmit_DMA+0xa2>
{
 8007560:	b510      	push	{r4, lr}
 8007562:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8007564:	2900      	cmp	r1, #0
 8007566:	d04a      	beq.n	80075fe <HAL_UART_Transmit_DMA+0xa6>
 8007568:	2a00      	cmp	r2, #0
 800756a:	d04a      	beq.n	8007602 <HAL_UART_Transmit_DMA+0xaa>
    __HAL_LOCK(huart);
 800756c:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8007570:	2b01      	cmp	r3, #1
 8007572:	d048      	beq.n	8007606 <HAL_UART_Transmit_DMA+0xae>
 8007574:	2301      	movs	r3, #1
 8007576:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->pTxBuffPtr  = pData;
 800757a:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 800757c:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 8007580:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007584:	2300      	movs	r3, #0
 8007586:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800758a:	2321      	movs	r3, #33	; 0x21
 800758c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    if (huart->hdmatx != NULL)
 8007590:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8007592:	b1f3      	cbz	r3, 80075d2 <HAL_UART_Transmit_DMA+0x7a>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007594:	491d      	ldr	r1, [pc, #116]	; (800760c <HAL_UART_Transmit_DMA+0xb4>)
 8007596:	62d9      	str	r1, [r3, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007598:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800759a:	491d      	ldr	r1, [pc, #116]	; (8007610 <HAL_UART_Transmit_DMA+0xb8>)
 800759c:	6319      	str	r1, [r3, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800759e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80075a0:	491c      	ldr	r1, [pc, #112]	; (8007614 <HAL_UART_Transmit_DMA+0xbc>)
 80075a2:	6359      	str	r1, [r3, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 80075a4:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80075a6:	2100      	movs	r1, #0
 80075a8:	6399      	str	r1, [r3, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80075aa:	6801      	ldr	r1, [r0, #0]
 80075ac:	4613      	mov	r3, r2
 80075ae:	f101 0228 	add.w	r2, r1, #40	; 0x28
 80075b2:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80075b4:	6f80      	ldr	r0, [r0, #120]	; 0x78
 80075b6:	f7fd fa3f 	bl	8004a38 <HAL_DMA_Start_IT>
 80075ba:	b150      	cbz	r0, 80075d2 <HAL_UART_Transmit_DMA+0x7a>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80075bc:	2310      	movs	r3, #16
 80075be:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 80075c2:	2300      	movs	r3, #0
 80075c4:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 80075c8:	2320      	movs	r3, #32
 80075ca:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        return HAL_ERROR;
 80075ce:	2001      	movs	r0, #1
 80075d0:	e012      	b.n	80075f8 <HAL_UART_Transmit_DMA+0xa0>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80075d2:	6823      	ldr	r3, [r4, #0]
 80075d4:	2240      	movs	r2, #64	; 0x40
 80075d6:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 80075d8:	2300      	movs	r3, #0
 80075da:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80075de:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e0:	f102 0308 	add.w	r3, r2, #8
 80075e4:	e853 3f00 	ldrex	r3, [r3]
 80075e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ec:	3208      	adds	r2, #8
 80075ee:	e842 3100 	strex	r1, r3, [r2]
 80075f2:	2900      	cmp	r1, #0
 80075f4:	d1f3      	bne.n	80075de <HAL_UART_Transmit_DMA+0x86>
    return HAL_OK;
 80075f6:	2000      	movs	r0, #0
}
 80075f8:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80075fa:	2002      	movs	r0, #2
}
 80075fc:	4770      	bx	lr
      return HAL_ERROR;
 80075fe:	2001      	movs	r0, #1
 8007600:	e7fa      	b.n	80075f8 <HAL_UART_Transmit_DMA+0xa0>
 8007602:	2001      	movs	r0, #1
 8007604:	e7f8      	b.n	80075f8 <HAL_UART_Transmit_DMA+0xa0>
    __HAL_LOCK(huart);
 8007606:	2002      	movs	r0, #2
 8007608:	e7f6      	b.n	80075f8 <HAL_UART_Transmit_DMA+0xa0>
 800760a:	bf00      	nop
 800760c:	08007619 	.word	0x08007619
 8007610:	08007687 	.word	0x08007687
 8007614:	08007693 	.word	0x08007693

08007618 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007618:	b508      	push	{r3, lr}
 800761a:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800761c:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f013 0f20 	tst.w	r3, #32
 8007626:	d118      	bne.n	800765a <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8007628:	2300      	movs	r3, #0
 800762a:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800762e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007630:	f102 0308 	add.w	r3, r2, #8
 8007634:	e853 3f00 	ldrex	r3, [r3]
 8007638:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763c:	3208      	adds	r2, #8
 800763e:	e842 3100 	strex	r1, r3, [r2]
 8007642:	2900      	cmp	r1, #0
 8007644:	d1f3      	bne.n	800762e <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007646:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007648:	e852 3f00 	ldrex	r3, [r2]
 800764c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007650:	e842 3100 	strex	r1, r3, [r2]
 8007654:	2900      	cmp	r1, #0
 8007656:	d1f6      	bne.n	8007646 <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007658:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800765a:	f7fa fe97 	bl	800238c <HAL_UART_TxCpltCallback>
}
 800765e:	e7fb      	b.n	8007658 <UART_DMATransmitCplt+0x40>

08007660 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007660:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007662:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007664:	e852 3f00 	ldrex	r3, [r2]
 8007668:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766c:	e842 3100 	strex	r1, r3, [r2]
 8007670:	2900      	cmp	r1, #0
 8007672:	d1f6      	bne.n	8007662 <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007674:	2320      	movs	r3, #32
 8007676:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800767a:	2300      	movs	r3, #0
 800767c:	6743      	str	r3, [r0, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800767e:	f7fa fe85 	bl	800238c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007682:	bd08      	pop	{r3, pc}

08007684 <HAL_UART_TxHalfCpltCallback>:
}
 8007684:	4770      	bx	lr

08007686 <UART_DMATxHalfCplt>:
{
 8007686:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8007688:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800768a:	f7ff fffb 	bl	8007684 <HAL_UART_TxHalfCpltCallback>
}
 800768e:	bd08      	pop	{r3, pc}

08007690 <HAL_UART_ErrorCallback>:
}
 8007690:	4770      	bx	lr

08007692 <UART_DMAError>:
{
 8007692:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007694:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007696:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800769a:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800769e:	6823      	ldr	r3, [r4, #0]
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80076a6:	d001      	beq.n	80076ac <UART_DMAError+0x1a>
 80076a8:	2a21      	cmp	r2, #33	; 0x21
 80076aa:	d010      	beq.n	80076ce <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80076ac:	6823      	ldr	r3, [r4, #0]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80076b4:	d001      	beq.n	80076ba <UART_DMAError+0x28>
 80076b6:	2d22      	cmp	r5, #34	; 0x22
 80076b8:	d010      	beq.n	80076dc <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80076ba:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80076be:	f043 0310 	orr.w	r3, r3, #16
 80076c2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  HAL_UART_ErrorCallback(huart);
 80076c6:	4620      	mov	r0, r4
 80076c8:	f7ff ffe2 	bl	8007690 <HAL_UART_ErrorCallback>
}
 80076cc:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 80076ce:	2300      	movs	r3, #0
 80076d0:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80076d4:	4620      	mov	r0, r4
 80076d6:	f7ff fefb 	bl	80074d0 <UART_EndTxTransfer>
 80076da:	e7e7      	b.n	80076ac <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 80076dc:	2300      	movs	r3, #0
 80076de:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80076e2:	4620      	mov	r0, r4
 80076e4:	f7ff ff0d 	bl	8007502 <UART_EndRxTransfer>
 80076e8:	e7e7      	b.n	80076ba <UART_DMAError+0x28>

080076ea <UART_DMAAbortOnError>:
{
 80076ea:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80076ec:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80076ee:	2300      	movs	r3, #0
 80076f0:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80076f4:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 80076f8:	f7ff ffca 	bl	8007690 <HAL_UART_ErrorCallback>
}
 80076fc:	bd08      	pop	{r3, pc}

080076fe <HAL_UARTEx_RxEventCallback>:
}
 80076fe:	4770      	bx	lr

08007700 <HAL_UART_IRQHandler>:
{
 8007700:	b570      	push	{r4, r5, r6, lr}
 8007702:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007704:	6801      	ldr	r1, [r0, #0]
 8007706:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007708:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800770a:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800770c:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 8007710:	401a      	ands	r2, r3
 8007712:	d108      	bne.n	8007726 <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007714:	f013 0f20 	tst.w	r3, #32
 8007718:	d005      	beq.n	8007726 <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800771a:	f010 0f20 	tst.w	r0, #32
 800771e:	d134      	bne.n	800778a <HAL_UART_IRQHandler+0x8a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007720:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8007724:	d131      	bne.n	800778a <HAL_UART_IRQHandler+0x8a>
  if ((errorflags != 0U)
 8007726:	b12a      	cbz	r2, 8007734 <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007728:	4a95      	ldr	r2, [pc, #596]	; (8007980 <HAL_UART_IRQHandler+0x280>)
 800772a:	402a      	ands	r2, r5
 800772c:	d133      	bne.n	8007796 <HAL_UART_IRQHandler+0x96>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800772e:	4e95      	ldr	r6, [pc, #596]	; (8007984 <HAL_UART_IRQHandler+0x284>)
 8007730:	4230      	tst	r0, r6
 8007732:	d130      	bne.n	8007796 <HAL_UART_IRQHandler+0x96>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007734:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8007736:	2a01      	cmp	r2, #1
 8007738:	f000 80c3 	beq.w	80078c2 <HAL_UART_IRQHandler+0x1c2>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800773c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8007740:	d003      	beq.n	800774a <HAL_UART_IRQHandler+0x4a>
 8007742:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 8007746:	f040 815b 	bne.w	8007a00 <HAL_UART_IRQHandler+0x300>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800774a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800774e:	d007      	beq.n	8007760 <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007750:	f010 0f80 	tst.w	r0, #128	; 0x80
 8007754:	f040 815b 	bne.w	8007a0e <HAL_UART_IRQHandler+0x30e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007758:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 800775c:	f040 8157 	bne.w	8007a0e <HAL_UART_IRQHandler+0x30e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007760:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007764:	d003      	beq.n	800776e <HAL_UART_IRQHandler+0x6e>
 8007766:	f010 0f40 	tst.w	r0, #64	; 0x40
 800776a:	f040 8157 	bne.w	8007a1c <HAL_UART_IRQHandler+0x31c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800776e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8007772:	d003      	beq.n	800777c <HAL_UART_IRQHandler+0x7c>
 8007774:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007778:	f040 8154 	bne.w	8007a24 <HAL_UART_IRQHandler+0x324>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800777c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8007780:	d002      	beq.n	8007788 <HAL_UART_IRQHandler+0x88>
 8007782:	2800      	cmp	r0, #0
 8007784:	f2c0 8152 	blt.w	8007a2c <HAL_UART_IRQHandler+0x32c>
}
 8007788:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 800778a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800778c:	2b00      	cmp	r3, #0
 800778e:	d0fb      	beq.n	8007788 <HAL_UART_IRQHandler+0x88>
        huart->RxISR(huart);
 8007790:	4620      	mov	r0, r4
 8007792:	4798      	blx	r3
      return;
 8007794:	e7f8      	b.n	8007788 <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007796:	f013 0f01 	tst.w	r3, #1
 800779a:	d009      	beq.n	80077b0 <HAL_UART_IRQHandler+0xb0>
 800779c:	f410 7f80 	tst.w	r0, #256	; 0x100
 80077a0:	d006      	beq.n	80077b0 <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80077a2:	2601      	movs	r6, #1
 80077a4:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80077a6:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80077aa:	4331      	orrs	r1, r6
 80077ac:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80077b0:	f013 0f02 	tst.w	r3, #2
 80077b4:	d00b      	beq.n	80077ce <HAL_UART_IRQHandler+0xce>
 80077b6:	f015 0f01 	tst.w	r5, #1
 80077ba:	d008      	beq.n	80077ce <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80077bc:	6821      	ldr	r1, [r4, #0]
 80077be:	2602      	movs	r6, #2
 80077c0:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80077c2:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80077c6:	f041 0104 	orr.w	r1, r1, #4
 80077ca:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80077ce:	f013 0f04 	tst.w	r3, #4
 80077d2:	d00b      	beq.n	80077ec <HAL_UART_IRQHandler+0xec>
 80077d4:	f015 0f01 	tst.w	r5, #1
 80077d8:	d008      	beq.n	80077ec <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80077da:	6821      	ldr	r1, [r4, #0]
 80077dc:	2604      	movs	r6, #4
 80077de:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80077e0:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80077e4:	f041 0102 	orr.w	r1, r1, #2
 80077e8:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 80077ec:	f013 0f08 	tst.w	r3, #8
 80077f0:	d00b      	beq.n	800780a <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80077f2:	f010 0f20 	tst.w	r0, #32
 80077f6:	d100      	bne.n	80077fa <HAL_UART_IRQHandler+0xfa>
 80077f8:	b13a      	cbz	r2, 800780a <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80077fa:	6822      	ldr	r2, [r4, #0]
 80077fc:	2108      	movs	r1, #8
 80077fe:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007800:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8007804:	430a      	orrs	r2, r1
 8007806:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800780a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800780e:	d00c      	beq.n	800782a <HAL_UART_IRQHandler+0x12a>
 8007810:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8007814:	d009      	beq.n	800782a <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007816:	6822      	ldr	r2, [r4, #0]
 8007818:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800781c:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800781e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8007822:	f042 0220 	orr.w	r2, r2, #32
 8007826:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800782a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800782e:	2a00      	cmp	r2, #0
 8007830:	d0aa      	beq.n	8007788 <HAL_UART_IRQHandler+0x88>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007832:	f013 0f20 	tst.w	r3, #32
 8007836:	d009      	beq.n	800784c <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007838:	f010 0f20 	tst.w	r0, #32
 800783c:	d102      	bne.n	8007844 <HAL_UART_IRQHandler+0x144>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800783e:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8007842:	d003      	beq.n	800784c <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 8007844:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8007846:	b10b      	cbz	r3, 800784c <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 8007848:	4620      	mov	r0, r4
 800784a:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 800784c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007850:	6823      	ldr	r3, [r4, #0]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007858:	d102      	bne.n	8007860 <HAL_UART_IRQHandler+0x160>
 800785a:	f012 0f28 	tst.w	r2, #40	; 0x28
 800785e:	d029      	beq.n	80078b4 <HAL_UART_IRQHandler+0x1b4>
        UART_EndRxTransfer(huart);
 8007860:	4620      	mov	r0, r4
 8007862:	f7ff fe4e 	bl	8007502 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007866:	6823      	ldr	r3, [r4, #0]
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800786e:	d01d      	beq.n	80078ac <HAL_UART_IRQHandler+0x1ac>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007870:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007872:	f102 0308 	add.w	r3, r2, #8
 8007876:	e853 3f00 	ldrex	r3, [r3]
 800787a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787e:	3208      	adds	r2, #8
 8007880:	e842 3100 	strex	r1, r3, [r2]
 8007884:	2900      	cmp	r1, #0
 8007886:	d1f3      	bne.n	8007870 <HAL_UART_IRQHandler+0x170>
          if (huart->hdmarx != NULL)
 8007888:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800788a:	b15b      	cbz	r3, 80078a4 <HAL_UART_IRQHandler+0x1a4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800788c:	4a3e      	ldr	r2, [pc, #248]	; (8007988 <HAL_UART_IRQHandler+0x288>)
 800788e:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007890:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8007892:	f7fd f957 	bl	8004b44 <HAL_DMA_Abort_IT>
 8007896:	2800      	cmp	r0, #0
 8007898:	f43f af76 	beq.w	8007788 <HAL_UART_IRQHandler+0x88>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800789c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800789e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80078a0:	4798      	blx	r3
 80078a2:	e771      	b.n	8007788 <HAL_UART_IRQHandler+0x88>
            HAL_UART_ErrorCallback(huart);
 80078a4:	4620      	mov	r0, r4
 80078a6:	f7ff fef3 	bl	8007690 <HAL_UART_ErrorCallback>
 80078aa:	e76d      	b.n	8007788 <HAL_UART_IRQHandler+0x88>
          HAL_UART_ErrorCallback(huart);
 80078ac:	4620      	mov	r0, r4
 80078ae:	f7ff feef 	bl	8007690 <HAL_UART_ErrorCallback>
 80078b2:	e769      	b.n	8007788 <HAL_UART_IRQHandler+0x88>
        HAL_UART_ErrorCallback(huart);
 80078b4:	4620      	mov	r0, r4
 80078b6:	f7ff feeb 	bl	8007690 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078ba:	2300      	movs	r3, #0
 80078bc:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    return;
 80078c0:	e762      	b.n	8007788 <HAL_UART_IRQHandler+0x88>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80078c2:	f013 0f10 	tst.w	r3, #16
 80078c6:	f43f af39 	beq.w	800773c <HAL_UART_IRQHandler+0x3c>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80078ca:	f010 0f10 	tst.w	r0, #16
 80078ce:	f43f af35 	beq.w	800773c <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80078d2:	2310      	movs	r3, #16
 80078d4:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078d6:	6823      	ldr	r3, [r4, #0]
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	f013 0f40 	tst.w	r3, #64	; 0x40
 80078de:	d055      	beq.n	800798c <HAL_UART_IRQHandler+0x28c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80078e0:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80078e2:	6813      	ldr	r3, [r2, #0]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	f43f af4d 	beq.w	8007788 <HAL_UART_IRQHandler+0x88>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80078ee:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80078f2:	4299      	cmp	r1, r3
 80078f4:	f67f af48 	bls.w	8007788 <HAL_UART_IRQHandler+0x88>
        huart->RxXferCount = nb_remaining_rx_data;
 80078f8:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80078fc:	6813      	ldr	r3, [r2, #0]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f013 0f20 	tst.w	r3, #32
 8007904:	d131      	bne.n	800796a <HAL_UART_IRQHandler+0x26a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007906:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007908:	e852 3f00 	ldrex	r3, [r2]
 800790c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007910:	e842 3100 	strex	r1, r3, [r2]
 8007914:	2900      	cmp	r1, #0
 8007916:	d1f6      	bne.n	8007906 <HAL_UART_IRQHandler+0x206>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007918:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791a:	f102 0308 	add.w	r3, r2, #8
 800791e:	e853 3f00 	ldrex	r3, [r3]
 8007922:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007926:	3208      	adds	r2, #8
 8007928:	e842 3100 	strex	r1, r3, [r2]
 800792c:	2900      	cmp	r1, #0
 800792e:	d1f3      	bne.n	8007918 <HAL_UART_IRQHandler+0x218>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007930:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007932:	f102 0308 	add.w	r3, r2, #8
 8007936:	e853 3f00 	ldrex	r3, [r3]
 800793a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793e:	3208      	adds	r2, #8
 8007940:	e842 3100 	strex	r1, r3, [r2]
 8007944:	2900      	cmp	r1, #0
 8007946:	d1f3      	bne.n	8007930 <HAL_UART_IRQHandler+0x230>
          huart->RxState = HAL_UART_STATE_READY;
 8007948:	2320      	movs	r3, #32
 800794a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800794e:	2300      	movs	r3, #0
 8007950:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007952:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007954:	e852 3f00 	ldrex	r3, [r2]
 8007958:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795c:	e842 3100 	strex	r1, r3, [r2]
 8007960:	2900      	cmp	r1, #0
 8007962:	d1f6      	bne.n	8007952 <HAL_UART_IRQHandler+0x252>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007964:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8007966:	f7fd f8b3 	bl	8004ad0 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800796a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800796e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007972:	b29b      	uxth	r3, r3
 8007974:	1ac9      	subs	r1, r1, r3
 8007976:	b289      	uxth	r1, r1
 8007978:	4620      	mov	r0, r4
 800797a:	f7ff fec0 	bl	80076fe <HAL_UARTEx_RxEventCallback>
      return;
 800797e:	e703      	b.n	8007788 <HAL_UART_IRQHandler+0x88>
 8007980:	10000001 	.word	0x10000001
 8007984:	04000120 	.word	0x04000120
 8007988:	080076eb 	.word	0x080076eb
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800798c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8007990:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007994:	b29b      	uxth	r3, r3
 8007996:	1ac9      	subs	r1, r1, r3
 8007998:	b289      	uxth	r1, r1
      if (  (huart->RxXferCount > 0U)
 800799a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800799e:	b29b      	uxth	r3, r3
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	f43f aef1 	beq.w	8007788 <HAL_UART_IRQHandler+0x88>
          &&(nb_rx_data > 0U) )
 80079a6:	2900      	cmp	r1, #0
 80079a8:	f43f aeee 	beq.w	8007788 <HAL_UART_IRQHandler+0x88>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80079ac:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ae:	e852 3f00 	ldrex	r3, [r2]
 80079b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b6:	e842 3000 	strex	r0, r3, [r2]
 80079ba:	2800      	cmp	r0, #0
 80079bc:	d1f6      	bne.n	80079ac <HAL_UART_IRQHandler+0x2ac>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80079be:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c0:	f102 0308 	add.w	r3, r2, #8
 80079c4:	e853 3f00 	ldrex	r3, [r3]
 80079c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079cc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d0:	3208      	adds	r2, #8
 80079d2:	e842 3000 	strex	r0, r3, [r2]
 80079d6:	2800      	cmp	r0, #0
 80079d8:	d1f1      	bne.n	80079be <HAL_UART_IRQHandler+0x2be>
        huart->RxState = HAL_UART_STATE_READY;
 80079da:	2320      	movs	r3, #32
 80079dc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079e0:	2300      	movs	r3, #0
 80079e2:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 80079e4:	6723      	str	r3, [r4, #112]	; 0x70
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079e6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e8:	e852 3f00 	ldrex	r3, [r2]
 80079ec:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f0:	e842 3000 	strex	r0, r3, [r2]
 80079f4:	2800      	cmp	r0, #0
 80079f6:	d1f6      	bne.n	80079e6 <HAL_UART_IRQHandler+0x2e6>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80079f8:	4620      	mov	r0, r4
 80079fa:	f7ff fe80 	bl	80076fe <HAL_UARTEx_RxEventCallback>
      return;
 80079fe:	e6c3      	b.n	8007788 <HAL_UART_IRQHandler+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007a00:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007a04:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8007a06:	4620      	mov	r0, r4
 8007a08:	f000 fe1c 	bl	8008644 <HAL_UARTEx_WakeupCallback>
    return;
 8007a0c:	e6bc      	b.n	8007788 <HAL_UART_IRQHandler+0x88>
    if (huart->TxISR != NULL)
 8007a0e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	f43f aeb9 	beq.w	8007788 <HAL_UART_IRQHandler+0x88>
      huart->TxISR(huart);
 8007a16:	4620      	mov	r0, r4
 8007a18:	4798      	blx	r3
    return;
 8007a1a:	e6b5      	b.n	8007788 <HAL_UART_IRQHandler+0x88>
    UART_EndTransmit_IT(huart);
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	f7ff fe1f 	bl	8007660 <UART_EndTransmit_IT>
    return;
 8007a22:	e6b1      	b.n	8007788 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007a24:	4620      	mov	r0, r4
 8007a26:	f000 fe0f 	bl	8008648 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8007a2a:	e6ad      	b.n	8007788 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007a2c:	4620      	mov	r0, r4
 8007a2e:	f000 fe0a 	bl	8008646 <HAL_UARTEx_RxFifoFullCallback>
    return;
 8007a32:	e6a9      	b.n	8007788 <HAL_UART_IRQHandler+0x88>

08007a34 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007a34:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 8007a36:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a3a:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8007a3e:	2a22      	cmp	r2, #34	; 0x22
 8007a40:	d005      	beq.n	8007a4e <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a42:	6802      	ldr	r2, [r0, #0]
 8007a44:	6993      	ldr	r3, [r2, #24]
 8007a46:	f043 0308 	orr.w	r3, r3, #8
 8007a4a:	6193      	str	r3, [r2, #24]
  }
}
 8007a4c:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a4e:	6802      	ldr	r2, [r0, #0]
 8007a50:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8007a56:	400b      	ands	r3, r1
 8007a58:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8007a5a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8007a5c:	3301      	adds	r3, #1
 8007a5e:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8007a60:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	3b01      	subs	r3, #1
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8007a6e:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d1e9      	bne.n	8007a4c <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a78:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7a:	e852 3f00 	ldrex	r3, [r2]
 8007a7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a82:	e842 3100 	strex	r1, r3, [r2]
 8007a86:	2900      	cmp	r1, #0
 8007a88:	d1f6      	bne.n	8007a78 <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a8a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a8c:	f102 0308 	add.w	r3, r2, #8
 8007a90:	e853 3f00 	ldrex	r3, [r3]
 8007a94:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a98:	3208      	adds	r2, #8
 8007a9a:	e842 3100 	strex	r1, r3, [r2]
 8007a9e:	2900      	cmp	r1, #0
 8007aa0:	d1f3      	bne.n	8007a8a <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 8007aa2:	2320      	movs	r3, #32
 8007aa4:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007aac:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d116      	bne.n	8007ae0 <UART_RxISR_8BIT+0xac>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ab6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab8:	e852 3f00 	ldrex	r3, [r2]
 8007abc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac0:	e842 3100 	strex	r1, r3, [r2]
 8007ac4:	2900      	cmp	r1, #0
 8007ac6:	d1f6      	bne.n	8007ab6 <UART_RxISR_8BIT+0x82>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ac8:	6803      	ldr	r3, [r0, #0]
 8007aca:	69da      	ldr	r2, [r3, #28]
 8007acc:	f012 0f10 	tst.w	r2, #16
 8007ad0:	d001      	beq.n	8007ad6 <UART_RxISR_8BIT+0xa2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ad2:	2210      	movs	r2, #16
 8007ad4:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ad6:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8007ada:	f7ff fe10 	bl	80076fe <HAL_UARTEx_RxEventCallback>
 8007ade:	e7b5      	b.n	8007a4c <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8007ae0:	f7fa fc64 	bl	80023ac <HAL_UART_RxCpltCallback>
 8007ae4:	e7b2      	b.n	8007a4c <UART_RxISR_8BIT+0x18>

08007ae6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007ae6:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007ae8:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007aec:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8007af0:	2b22      	cmp	r3, #34	; 0x22
 8007af2:	d005      	beq.n	8007b00 <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007af4:	6802      	ldr	r2, [r0, #0]
 8007af6:	6993      	ldr	r3, [r2, #24]
 8007af8:	f043 0308 	orr.w	r3, r3, #8
 8007afc:	6193      	str	r3, [r2, #24]
  }
}
 8007afe:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b00:	6803      	ldr	r3, [r0, #0]
 8007b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007b04:	6d81      	ldr	r1, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 8007b06:	4013      	ands	r3, r2
 8007b08:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 8007b0a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8007b0c:	3302      	adds	r3, #2
 8007b0e:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8007b10:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	3b01      	subs	r3, #1
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8007b1e:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d1ea      	bne.n	8007afe <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b28:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b2a:	e852 3f00 	ldrex	r3, [r2]
 8007b2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b32:	e842 3100 	strex	r1, r3, [r2]
 8007b36:	2900      	cmp	r1, #0
 8007b38:	d1f6      	bne.n	8007b28 <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b3a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b3c:	f102 0308 	add.w	r3, r2, #8
 8007b40:	e853 3f00 	ldrex	r3, [r3]
 8007b44:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b48:	3208      	adds	r2, #8
 8007b4a:	e842 3100 	strex	r1, r3, [r2]
 8007b4e:	2900      	cmp	r1, #0
 8007b50:	d1f3      	bne.n	8007b3a <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 8007b52:	2320      	movs	r3, #32
 8007b54:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b5c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d116      	bne.n	8007b90 <UART_RxISR_16BIT+0xaa>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b62:	2300      	movs	r3, #0
 8007b64:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b66:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b68:	e852 3f00 	ldrex	r3, [r2]
 8007b6c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b70:	e842 3100 	strex	r1, r3, [r2]
 8007b74:	2900      	cmp	r1, #0
 8007b76:	d1f6      	bne.n	8007b66 <UART_RxISR_16BIT+0x80>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007b78:	6803      	ldr	r3, [r0, #0]
 8007b7a:	69da      	ldr	r2, [r3, #28]
 8007b7c:	f012 0f10 	tst.w	r2, #16
 8007b80:	d001      	beq.n	8007b86 <UART_RxISR_16BIT+0xa0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b82:	2210      	movs	r2, #16
 8007b84:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b86:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8007b8a:	f7ff fdb8 	bl	80076fe <HAL_UARTEx_RxEventCallback>
 8007b8e:	e7b6      	b.n	8007afe <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8007b90:	f7fa fc0c 	bl	80023ac <HAL_UART_RxCpltCallback>
 8007b94:	e7b3      	b.n	8007afe <UART_RxISR_16BIT+0x18>
	...

08007b98 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 8007b9c:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007ba0:	6803      	ldr	r3, [r0, #0]
 8007ba2:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007ba4:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007ba8:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007bac:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8007bb0:	2a22      	cmp	r2, #34	; 0x22
 8007bb2:	d005      	beq.n	8007bc0 <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007bb4:	699a      	ldr	r2, [r3, #24]
 8007bb6:	f042 0208 	orr.w	r2, r2, #8
 8007bba:	619a      	str	r2, [r3, #24]
  }
}
 8007bbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bc0:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 8007bc2:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007bc6:	e008      	b.n	8007bda <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007bc8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d14c      	bne.n	8007c6a <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 8007bd0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d04e      	beq.n	8007c78 <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007bda:	2f00      	cmp	r7, #0
 8007bdc:	f000 8087 	beq.w	8007cee <UART_RxISR_8BIT_FIFOEN+0x156>
 8007be0:	f015 0f20 	tst.w	r5, #32
 8007be4:	f000 8083 	beq.w	8007cee <UART_RxISR_8BIT_FIFOEN+0x156>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007be8:	6823      	ldr	r3, [r4, #0]
 8007bea:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007bec:	b2f3      	uxtb	r3, r6
 8007bee:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8007bf0:	400b      	ands	r3, r1
 8007bf2:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8007bf4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8007bfa:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	3b01      	subs	r3, #1
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007c08:	6823      	ldr	r3, [r4, #0]
 8007c0a:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007c0c:	f015 0f07 	tst.w	r5, #7
 8007c10:	d0de      	beq.n	8007bd0 <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007c12:	f015 0f01 	tst.w	r5, #1
 8007c16:	d009      	beq.n	8007c2c <UART_RxISR_8BIT_FIFOEN+0x94>
 8007c18:	f419 7f80 	tst.w	r9, #256	; 0x100
 8007c1c:	d006      	beq.n	8007c2c <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007c1e:	2201      	movs	r2, #1
 8007c20:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c22:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007c26:	4313      	orrs	r3, r2
 8007c28:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c2c:	f015 0f02 	tst.w	r5, #2
 8007c30:	d00b      	beq.n	8007c4a <UART_RxISR_8BIT_FIFOEN+0xb2>
 8007c32:	f018 0f01 	tst.w	r8, #1
 8007c36:	d008      	beq.n	8007c4a <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007c38:	6823      	ldr	r3, [r4, #0]
 8007c3a:	2202      	movs	r2, #2
 8007c3c:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c3e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007c42:	f043 0304 	orr.w	r3, r3, #4
 8007c46:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c4a:	f015 0f04 	tst.w	r5, #4
 8007c4e:	d0bb      	beq.n	8007bc8 <UART_RxISR_8BIT_FIFOEN+0x30>
 8007c50:	f018 0f01 	tst.w	r8, #1
 8007c54:	d0b8      	beq.n	8007bc8 <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007c56:	6823      	ldr	r3, [r4, #0]
 8007c58:	2204      	movs	r2, #4
 8007c5a:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c5c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007c60:	f043 0302 	orr.w	r3, r3, #2
 8007c64:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8007c68:	e7ae      	b.n	8007bc8 <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8007c6a:	4620      	mov	r0, r4
 8007c6c:	f7ff fd10 	bl	8007690 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c70:	2300      	movs	r3, #0
 8007c72:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8007c76:	e7ab      	b.n	8007bd0 <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c78:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c7a:	e852 3f00 	ldrex	r3, [r2]
 8007c7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c82:	e842 3100 	strex	r1, r3, [r2]
 8007c86:	2900      	cmp	r1, #0
 8007c88:	d1f6      	bne.n	8007c78 <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c8a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8c:	f102 0308 	add.w	r3, r2, #8
 8007c90:	e853 3f00 	ldrex	r3, [r3]
 8007c94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c98:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c9c:	3208      	adds	r2, #8
 8007c9e:	e842 3100 	strex	r1, r3, [r2]
 8007ca2:	2900      	cmp	r1, #0
 8007ca4:	d1f1      	bne.n	8007c8a <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 8007ca6:	2320      	movs	r3, #32
 8007ca8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 8007cac:	2300      	movs	r3, #0
 8007cae:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cb0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d003      	beq.n	8007cbe <UART_RxISR_8BIT_FIFOEN+0x126>
          HAL_UART_RxCpltCallback(huart);
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	f7fa fb78 	bl	80023ac <HAL_UART_RxCpltCallback>
 8007cbc:	e78d      	b.n	8007bda <UART_RxISR_8BIT_FIFOEN+0x42>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cc2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc4:	e852 3f00 	ldrex	r3, [r2]
 8007cc8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ccc:	e842 3100 	strex	r1, r3, [r2]
 8007cd0:	2900      	cmp	r1, #0
 8007cd2:	d1f6      	bne.n	8007cc2 <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007cd4:	6823      	ldr	r3, [r4, #0]
 8007cd6:	69da      	ldr	r2, [r3, #28]
 8007cd8:	f012 0f10 	tst.w	r2, #16
 8007cdc:	d001      	beq.n	8007ce2 <UART_RxISR_8BIT_FIFOEN+0x14a>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007cde:	2210      	movs	r2, #16
 8007ce0:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ce2:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8007ce6:	4620      	mov	r0, r4
 8007ce8:	f7ff fd09 	bl	80076fe <HAL_UARTEx_RxEventCallback>
 8007cec:	e775      	b.n	8007bda <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8007cee:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007cf2:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	f43f af61 	beq.w	8007bbc <UART_RxISR_8BIT_FIFOEN+0x24>
 8007cfa:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	f67f af5c 	bls.w	8007bbc <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007d04:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d06:	f102 0308 	add.w	r3, r2, #8
 8007d0a:	e853 3f00 	ldrex	r3, [r3]
 8007d0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d12:	3208      	adds	r2, #8
 8007d14:	e842 3100 	strex	r1, r3, [r2]
 8007d18:	2900      	cmp	r1, #0
 8007d1a:	d1f3      	bne.n	8007d04 <UART_RxISR_8BIT_FIFOEN+0x16c>
      huart->RxISR = UART_RxISR_8BIT;
 8007d1c:	4b05      	ldr	r3, [pc, #20]	; (8007d34 <UART_RxISR_8BIT_FIFOEN+0x19c>)
 8007d1e:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007d20:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d22:	e852 3f00 	ldrex	r3, [r2]
 8007d26:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d2a:	e842 3100 	strex	r1, r3, [r2]
 8007d2e:	2900      	cmp	r1, #0
 8007d30:	d1f6      	bne.n	8007d20 <UART_RxISR_8BIT_FIFOEN+0x188>
 8007d32:	e743      	b.n	8007bbc <UART_RxISR_8BIT_FIFOEN+0x24>
 8007d34:	08007a35 	.word	0x08007a35

08007d38 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007d3c:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007d40:	6803      	ldr	r3, [r0, #0]
 8007d42:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007d44:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007d48:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d4c:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8007d50:	2a22      	cmp	r2, #34	; 0x22
 8007d52:	d005      	beq.n	8007d60 <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007d54:	699a      	ldr	r2, [r3, #24]
 8007d56:	f042 0208 	orr.w	r2, r2, #8
 8007d5a:	619a      	str	r2, [r3, #24]
  }
}
 8007d5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d60:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 8007d62:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007d66:	e008      	b.n	8007d7a <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d68:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d14b      	bne.n	8007e08 <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 8007d70:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d04d      	beq.n	8007e16 <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007d7a:	2f00      	cmp	r7, #0
 8007d7c:	f000 8086 	beq.w	8007e8c <UART_RxISR_16BIT_FIFOEN+0x154>
 8007d80:	f015 0f20 	tst.w	r5, #32
 8007d84:	f000 8082 	beq.w	8007e8c <UART_RxISR_16BIT_FIFOEN+0x154>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d88:	6823      	ldr	r3, [r4, #0]
 8007d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007d8c:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 8007d8e:	4033      	ands	r3, r6
 8007d90:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8007d92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d94:	3302      	adds	r3, #2
 8007d96:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8007d98:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007da6:	6823      	ldr	r3, [r4, #0]
 8007da8:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007daa:	f015 0f07 	tst.w	r5, #7
 8007dae:	d0df      	beq.n	8007d70 <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007db0:	f015 0f01 	tst.w	r5, #1
 8007db4:	d009      	beq.n	8007dca <UART_RxISR_16BIT_FIFOEN+0x92>
 8007db6:	f419 7f80 	tst.w	r9, #256	; 0x100
 8007dba:	d006      	beq.n	8007dca <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007dc0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007dca:	f015 0f02 	tst.w	r5, #2
 8007dce:	d00b      	beq.n	8007de8 <UART_RxISR_16BIT_FIFOEN+0xb0>
 8007dd0:	f018 0f01 	tst.w	r8, #1
 8007dd4:	d008      	beq.n	8007de8 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007dd6:	6823      	ldr	r3, [r4, #0]
 8007dd8:	2202      	movs	r2, #2
 8007dda:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ddc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007de0:	f043 0304 	orr.w	r3, r3, #4
 8007de4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007de8:	f015 0f04 	tst.w	r5, #4
 8007dec:	d0bc      	beq.n	8007d68 <UART_RxISR_16BIT_FIFOEN+0x30>
 8007dee:	f018 0f01 	tst.w	r8, #1
 8007df2:	d0b9      	beq.n	8007d68 <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007df4:	6823      	ldr	r3, [r4, #0]
 8007df6:	2204      	movs	r2, #4
 8007df8:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007dfa:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007dfe:	f043 0302 	orr.w	r3, r3, #2
 8007e02:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8007e06:	e7af      	b.n	8007d68 <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8007e08:	4620      	mov	r0, r4
 8007e0a:	f7ff fc41 	bl	8007690 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8007e14:	e7ac      	b.n	8007d70 <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e16:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e18:	e852 3f00 	ldrex	r3, [r2]
 8007e1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e20:	e842 3100 	strex	r1, r3, [r2]
 8007e24:	2900      	cmp	r1, #0
 8007e26:	d1f6      	bne.n	8007e16 <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e28:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e2a:	f102 0308 	add.w	r3, r2, #8
 8007e2e:	e853 3f00 	ldrex	r3, [r3]
 8007e32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e36:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3a:	3208      	adds	r2, #8
 8007e3c:	e842 3100 	strex	r1, r3, [r2]
 8007e40:	2900      	cmp	r1, #0
 8007e42:	d1f1      	bne.n	8007e28 <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 8007e44:	2320      	movs	r3, #32
 8007e46:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e4e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d003      	beq.n	8007e5c <UART_RxISR_16BIT_FIFOEN+0x124>
          HAL_UART_RxCpltCallback(huart);
 8007e54:	4620      	mov	r0, r4
 8007e56:	f7fa faa9 	bl	80023ac <HAL_UART_RxCpltCallback>
 8007e5a:	e78e      	b.n	8007d7a <UART_RxISR_16BIT_FIFOEN+0x42>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e60:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e62:	e852 3f00 	ldrex	r3, [r2]
 8007e66:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e6a:	e842 3100 	strex	r1, r3, [r2]
 8007e6e:	2900      	cmp	r1, #0
 8007e70:	d1f6      	bne.n	8007e60 <UART_RxISR_16BIT_FIFOEN+0x128>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007e72:	6823      	ldr	r3, [r4, #0]
 8007e74:	69da      	ldr	r2, [r3, #28]
 8007e76:	f012 0f10 	tst.w	r2, #16
 8007e7a:	d001      	beq.n	8007e80 <UART_RxISR_16BIT_FIFOEN+0x148>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e7c:	2210      	movs	r2, #16
 8007e7e:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e80:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8007e84:	4620      	mov	r0, r4
 8007e86:	f7ff fc3a 	bl	80076fe <HAL_UARTEx_RxEventCallback>
 8007e8a:	e776      	b.n	8007d7a <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8007e8c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007e90:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	f43f af62 	beq.w	8007d5c <UART_RxISR_16BIT_FIFOEN+0x24>
 8007e98:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	f67f af5d 	bls.w	8007d5c <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007ea2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea4:	f102 0308 	add.w	r3, r2, #8
 8007ea8:	e853 3f00 	ldrex	r3, [r3]
 8007eac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb0:	3208      	adds	r2, #8
 8007eb2:	e842 3100 	strex	r1, r3, [r2]
 8007eb6:	2900      	cmp	r1, #0
 8007eb8:	d1f3      	bne.n	8007ea2 <UART_RxISR_16BIT_FIFOEN+0x16a>
      huart->RxISR = UART_RxISR_16BIT;
 8007eba:	4b06      	ldr	r3, [pc, #24]	; (8007ed4 <UART_RxISR_16BIT_FIFOEN+0x19c>)
 8007ebc:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007ebe:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec0:	e852 3f00 	ldrex	r3, [r2]
 8007ec4:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec8:	e842 3100 	strex	r1, r3, [r2]
 8007ecc:	2900      	cmp	r1, #0
 8007ece:	d1f6      	bne.n	8007ebe <UART_RxISR_16BIT_FIFOEN+0x186>
 8007ed0:	e744      	b.n	8007d5c <UART_RxISR_16BIT_FIFOEN+0x24>
 8007ed2:	bf00      	nop
 8007ed4:	08007ae7 	.word	0x08007ae7

08007ed8 <UART_SetConfig>:
{
 8007ed8:	b570      	push	{r4, r5, r6, lr}
 8007eda:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8007edc:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ede:	6883      	ldr	r3, [r0, #8]
 8007ee0:	6902      	ldr	r2, [r0, #16]
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	6942      	ldr	r2, [r0, #20]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	69c2      	ldr	r2, [r0, #28]
 8007eea:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007eec:	6808      	ldr	r0, [r1, #0]
 8007eee:	4a9d      	ldr	r2, [pc, #628]	; (8008164 <UART_SetConfig+0x28c>)
 8007ef0:	4002      	ands	r2, r0
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ef6:	6822      	ldr	r2, [r4, #0]
 8007ef8:	6853      	ldr	r3, [r2, #4]
 8007efa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007efe:	68e1      	ldr	r1, [r4, #12]
 8007f00:	430b      	orrs	r3, r1
 8007f02:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f04:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007f06:	6822      	ldr	r2, [r4, #0]
 8007f08:	4b97      	ldr	r3, [pc, #604]	; (8008168 <UART_SetConfig+0x290>)
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d001      	beq.n	8007f12 <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 8007f0e:	6a23      	ldr	r3, [r4, #32]
 8007f10:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f12:	6893      	ldr	r3, [r2, #8]
 8007f14:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007f18:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007f1c:	430b      	orrs	r3, r1
 8007f1e:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007f20:	6822      	ldr	r2, [r4, #0]
 8007f22:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007f24:	f023 030f 	bic.w	r3, r3, #15
 8007f28:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007f2a:	430b      	orrs	r3, r1
 8007f2c:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f2e:	6823      	ldr	r3, [r4, #0]
 8007f30:	4a8e      	ldr	r2, [pc, #568]	; (800816c <UART_SetConfig+0x294>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d01c      	beq.n	8007f70 <UART_SetConfig+0x98>
 8007f36:	4a8e      	ldr	r2, [pc, #568]	; (8008170 <UART_SetConfig+0x298>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d031      	beq.n	8007fa0 <UART_SetConfig+0xc8>
 8007f3c:	4a8a      	ldr	r2, [pc, #552]	; (8008168 <UART_SetConfig+0x290>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d04b      	beq.n	8007fda <UART_SetConfig+0x102>
 8007f42:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8007f44:	4988      	ldr	r1, [pc, #544]	; (8008168 <UART_SetConfig+0x290>)
 8007f46:	428b      	cmp	r3, r1
 8007f48:	d068      	beq.n	800801c <UART_SetConfig+0x144>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f4a:	69e0      	ldr	r0, [r4, #28]
 8007f4c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8007f50:	f000 80a5 	beq.w	800809e <UART_SetConfig+0x1c6>
    switch (clocksource)
 8007f54:	2a08      	cmp	r2, #8
 8007f56:	f200 811f 	bhi.w	8008198 <UART_SetConfig+0x2c0>
 8007f5a:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007f5e:	00d3      	.short	0x00d3
 8007f60:	00d100f5 	.word	0x00d100f5
 8007f64:	00f8011d 	.word	0x00f8011d
 8007f68:	011d011d 	.word	0x011d011d
 8007f6c:	00fb011d 	.word	0x00fb011d
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8007f70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f74:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007f78:	f002 0203 	and.w	r2, r2, #3
 8007f7c:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f80:	f5a2 3240 	sub.w	r2, r2, #196608	; 0x30000
 8007f84:	2a03      	cmp	r2, #3
 8007f86:	d809      	bhi.n	8007f9c <UART_SetConfig+0xc4>
 8007f88:	e8df f002 	tbb	[pc, r2]
 8007f8c:	063c0402 	.word	0x063c0402
 8007f90:	2201      	movs	r2, #1
 8007f92:	e7d7      	b.n	8007f44 <UART_SetConfig+0x6c>
 8007f94:	2204      	movs	r2, #4
 8007f96:	e7d5      	b.n	8007f44 <UART_SetConfig+0x6c>
 8007f98:	2208      	movs	r2, #8
 8007f9a:	e7d3      	b.n	8007f44 <UART_SetConfig+0x6c>
 8007f9c:	2210      	movs	r2, #16
 8007f9e:	e7d1      	b.n	8007f44 <UART_SetConfig+0x6c>
 8007fa0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007fa4:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007fa8:	f002 020c 	and.w	r2, r2, #12
 8007fac:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 8007fb0:	f5a2 2240 	sub.w	r2, r2, #786432	; 0xc0000
 8007fb4:	2a0c      	cmp	r2, #12
 8007fb6:	d80e      	bhi.n	8007fd6 <UART_SetConfig+0xfe>
 8007fb8:	e8df f002 	tbb	[pc, r2]
 8007fbc:	0d0d0d07 	.word	0x0d0d0d07
 8007fc0:	0d0d0d09 	.word	0x0d0d0d09
 8007fc4:	0d0d0d26 	.word	0x0d0d0d26
 8007fc8:	0b          	.byte	0x0b
 8007fc9:	00          	.byte	0x00
 8007fca:	2200      	movs	r2, #0
 8007fcc:	e7ba      	b.n	8007f44 <UART_SetConfig+0x6c>
 8007fce:	2204      	movs	r2, #4
 8007fd0:	e7b8      	b.n	8007f44 <UART_SetConfig+0x6c>
 8007fd2:	2208      	movs	r2, #8
 8007fd4:	e7b6      	b.n	8007f44 <UART_SetConfig+0x6c>
 8007fd6:	2210      	movs	r2, #16
 8007fd8:	e7b4      	b.n	8007f44 <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007fda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007fde:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007fe2:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8007fe6:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8007fea:	d00f      	beq.n	800800c <UART_SetConfig+0x134>
 8007fec:	d805      	bhi.n	8007ffa <UART_SetConfig+0x122>
 8007fee:	b17a      	cbz	r2, 8008010 <UART_SetConfig+0x138>
 8007ff0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8007ff4:	d10e      	bne.n	8008014 <UART_SetConfig+0x13c>
 8007ff6:	2204      	movs	r2, #4
 8007ff8:	e7a4      	b.n	8007f44 <UART_SetConfig+0x6c>
 8007ffa:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8007ffe:	d10b      	bne.n	8008018 <UART_SetConfig+0x140>
 8008000:	2208      	movs	r2, #8
 8008002:	e79f      	b.n	8007f44 <UART_SetConfig+0x6c>
 8008004:	2202      	movs	r2, #2
 8008006:	e79d      	b.n	8007f44 <UART_SetConfig+0x6c>
 8008008:	2202      	movs	r2, #2
 800800a:	e79b      	b.n	8007f44 <UART_SetConfig+0x6c>
 800800c:	2202      	movs	r2, #2
 800800e:	e799      	b.n	8007f44 <UART_SetConfig+0x6c>
 8008010:	2200      	movs	r2, #0
 8008012:	e797      	b.n	8007f44 <UART_SetConfig+0x6c>
 8008014:	2210      	movs	r2, #16
 8008016:	e795      	b.n	8007f44 <UART_SetConfig+0x6c>
 8008018:	2210      	movs	r2, #16
 800801a:	e793      	b.n	8007f44 <UART_SetConfig+0x6c>
    switch (clocksource)
 800801c:	2a08      	cmp	r2, #8
 800801e:	f200 809c 	bhi.w	800815a <UART_SetConfig+0x282>
 8008022:	e8df f002 	tbb	[pc, r2]
 8008026:	9a08      	.short	0x9a08
 8008028:	9a379a3a 	.word	0x9a379a3a
 800802c:	9a9a      	.short	0x9a9a
 800802e:	05          	.byte	0x05
 800802f:	00          	.byte	0x00
 8008030:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008034:	e004      	b.n	8008040 <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008036:	f7fe fb0f 	bl	8006658 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800803a:	2800      	cmp	r0, #0
 800803c:	f000 808f 	beq.w	800815e <UART_SetConfig+0x286>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008040:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008042:	4b4c      	ldr	r3, [pc, #304]	; (8008174 <UART_SetConfig+0x29c>)
 8008044:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8008048:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800804c:	6865      	ldr	r5, [r4, #4]
 800804e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8008052:	4299      	cmp	r1, r3
 8008054:	f200 8094 	bhi.w	8008180 <UART_SetConfig+0x2a8>
 8008058:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800805c:	f200 8092 	bhi.w	8008184 <UART_SetConfig+0x2ac>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008060:	2600      	movs	r6, #0
 8008062:	4633      	mov	r3, r6
 8008064:	4631      	mov	r1, r6
 8008066:	f7f8 fe43 	bl	8000cf0 <__aeabi_uldivmod>
 800806a:	0209      	lsls	r1, r1, #8
 800806c:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8008070:	0200      	lsls	r0, r0, #8
 8008072:	086b      	lsrs	r3, r5, #1
 8008074:	18c0      	adds	r0, r0, r3
 8008076:	462a      	mov	r2, r5
 8008078:	4633      	mov	r3, r6
 800807a:	f141 0100 	adc.w	r1, r1, #0
 800807e:	f7f8 fe37 	bl	8000cf0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008082:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8008086:	4b3c      	ldr	r3, [pc, #240]	; (8008178 <UART_SetConfig+0x2a0>)
 8008088:	429a      	cmp	r2, r3
 800808a:	d87d      	bhi.n	8008188 <UART_SetConfig+0x2b0>
          huart->Instance->BRR = usartdiv;
 800808c:	6823      	ldr	r3, [r4, #0]
 800808e:	60d8      	str	r0, [r3, #12]
 8008090:	4630      	mov	r0, r6
 8008092:	e050      	b.n	8008136 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetSysClockFreq();
 8008094:	f7fd fdd8 	bl	8005c48 <HAL_RCC_GetSysClockFreq>
        break;
 8008098:	e7cf      	b.n	800803a <UART_SetConfig+0x162>
        pclk = (uint32_t) HSI_VALUE;
 800809a:	4838      	ldr	r0, [pc, #224]	; (800817c <UART_SetConfig+0x2a4>)
 800809c:	e7d0      	b.n	8008040 <UART_SetConfig+0x168>
    switch (clocksource)
 800809e:	2a08      	cmp	r2, #8
 80080a0:	d874      	bhi.n	800818c <UART_SetConfig+0x2b4>
 80080a2:	e8df f002 	tbb	[pc, r2]
 80080a6:	2707      	.short	0x2707
 80080a8:	732a7305 	.word	0x732a7305
 80080ac:	7373      	.short	0x7373
 80080ae:	0b          	.byte	0x0b
 80080af:	00          	.byte	0x00
 80080b0:	4832      	ldr	r0, [pc, #200]	; (800817c <UART_SetConfig+0x2a4>)
 80080b2:	e003      	b.n	80080bc <UART_SetConfig+0x1e4>
        pclk = HAL_RCC_GetPCLK1Freq();
 80080b4:	f7fe fad0 	bl	8006658 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80080b8:	2800      	cmp	r0, #0
 80080ba:	d069      	beq.n	8008190 <UART_SetConfig+0x2b8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80080be:	4b2d      	ldr	r3, [pc, #180]	; (8008174 <UART_SetConfig+0x29c>)
 80080c0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80080c4:	fbb0 f0f3 	udiv	r0, r0, r3
 80080c8:	6862      	ldr	r2, [r4, #4]
 80080ca:	0853      	lsrs	r3, r2, #1
 80080cc:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80080d0:	fbb0 f0f2 	udiv	r0, r0, r2
 80080d4:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080d6:	f1a0 0210 	sub.w	r2, r0, #16
 80080da:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80080de:	429a      	cmp	r2, r3
 80080e0:	d858      	bhi.n	8008194 <UART_SetConfig+0x2bc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80080e2:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80080e6:	f3c0 0042 	ubfx	r0, r0, #1, #3
 80080ea:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 80080ec:	6823      	ldr	r3, [r4, #0]
 80080ee:	60d8      	str	r0, [r3, #12]
 80080f0:	2000      	movs	r0, #0
 80080f2:	e020      	b.n	8008136 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetPCLK2Freq();
 80080f4:	f7fe fac0 	bl	8006678 <HAL_RCC_GetPCLK2Freq>
        break;
 80080f8:	e7de      	b.n	80080b8 <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 80080fa:	f7fd fda5 	bl	8005c48 <HAL_RCC_GetSysClockFreq>
        break;
 80080fe:	e7db      	b.n	80080b8 <UART_SetConfig+0x1e0>
    switch (clocksource)
 8008100:	481e      	ldr	r0, [pc, #120]	; (800817c <UART_SetConfig+0x2a4>)
 8008102:	e003      	b.n	800810c <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008104:	f7fe faa8 	bl	8006658 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8008108:	2800      	cmp	r0, #0
 800810a:	d047      	beq.n	800819c <UART_SetConfig+0x2c4>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800810c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800810e:	4b19      	ldr	r3, [pc, #100]	; (8008174 <UART_SetConfig+0x29c>)
 8008110:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008114:	fbb0 f0f3 	udiv	r0, r0, r3
 8008118:	6863      	ldr	r3, [r4, #4]
 800811a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800811e:	fbb0 f0f3 	udiv	r0, r0, r3
 8008122:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008124:	f1a0 0210 	sub.w	r2, r0, #16
 8008128:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800812c:	429a      	cmp	r2, r3
 800812e:	d837      	bhi.n	80081a0 <UART_SetConfig+0x2c8>
        huart->Instance->BRR = usartdiv;
 8008130:	6823      	ldr	r3, [r4, #0]
 8008132:	60d8      	str	r0, [r3, #12]
 8008134:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 8008136:	2301      	movs	r3, #1
 8008138:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800813c:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8008140:	2300      	movs	r3, #0
 8008142:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 8008144:	6763      	str	r3, [r4, #116]	; 0x74
}
 8008146:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8008148:	f7fe fa96 	bl	8006678 <HAL_RCC_GetPCLK2Freq>
        break;
 800814c:	e7dc      	b.n	8008108 <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetSysClockFreq();
 800814e:	f7fd fd7b 	bl	8005c48 <HAL_RCC_GetSysClockFreq>
        break;
 8008152:	e7d9      	b.n	8008108 <UART_SetConfig+0x230>
        pclk = (uint32_t) LSE_VALUE;
 8008154:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008158:	e7d8      	b.n	800810c <UART_SetConfig+0x234>
    switch (clocksource)
 800815a:	2001      	movs	r0, #1
 800815c:	e7eb      	b.n	8008136 <UART_SetConfig+0x25e>
 800815e:	2000      	movs	r0, #0
 8008160:	e7e9      	b.n	8008136 <UART_SetConfig+0x25e>
 8008162:	bf00      	nop
 8008164:	cfff69f3 	.word	0xcfff69f3
 8008168:	40008000 	.word	0x40008000
 800816c:	40013800 	.word	0x40013800
 8008170:	40004400 	.word	0x40004400
 8008174:	0801477c 	.word	0x0801477c
 8008178:	000ffcff 	.word	0x000ffcff
 800817c:	00f42400 	.word	0x00f42400
        ret = HAL_ERROR;
 8008180:	2001      	movs	r0, #1
 8008182:	e7d8      	b.n	8008136 <UART_SetConfig+0x25e>
 8008184:	2001      	movs	r0, #1
 8008186:	e7d6      	b.n	8008136 <UART_SetConfig+0x25e>
          ret = HAL_ERROR;
 8008188:	2001      	movs	r0, #1
 800818a:	e7d4      	b.n	8008136 <UART_SetConfig+0x25e>
    switch (clocksource)
 800818c:	2001      	movs	r0, #1
 800818e:	e7d2      	b.n	8008136 <UART_SetConfig+0x25e>
 8008190:	2000      	movs	r0, #0
 8008192:	e7d0      	b.n	8008136 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8008194:	2001      	movs	r0, #1
 8008196:	e7ce      	b.n	8008136 <UART_SetConfig+0x25e>
    switch (clocksource)
 8008198:	2001      	movs	r0, #1
 800819a:	e7cc      	b.n	8008136 <UART_SetConfig+0x25e>
 800819c:	2000      	movs	r0, #0
 800819e:	e7ca      	b.n	8008136 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 80081a0:	2001      	movs	r0, #1
 80081a2:	e7c8      	b.n	8008136 <UART_SetConfig+0x25e>

080081a4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80081a4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80081a6:	f013 0f01 	tst.w	r3, #1
 80081aa:	d006      	beq.n	80081ba <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80081ac:	6802      	ldr	r2, [r0, #0]
 80081ae:	6853      	ldr	r3, [r2, #4]
 80081b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80081b4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80081b6:	430b      	orrs	r3, r1
 80081b8:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80081ba:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80081bc:	f013 0f02 	tst.w	r3, #2
 80081c0:	d006      	beq.n	80081d0 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80081c2:	6802      	ldr	r2, [r0, #0]
 80081c4:	6853      	ldr	r3, [r2, #4]
 80081c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081ca:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80081cc:	430b      	orrs	r3, r1
 80081ce:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80081d0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80081d2:	f013 0f04 	tst.w	r3, #4
 80081d6:	d006      	beq.n	80081e6 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80081d8:	6802      	ldr	r2, [r0, #0]
 80081da:	6853      	ldr	r3, [r2, #4]
 80081dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80081e0:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80081e2:	430b      	orrs	r3, r1
 80081e4:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80081e6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80081e8:	f013 0f08 	tst.w	r3, #8
 80081ec:	d006      	beq.n	80081fc <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80081ee:	6802      	ldr	r2, [r0, #0]
 80081f0:	6853      	ldr	r3, [r2, #4]
 80081f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80081f6:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80081f8:	430b      	orrs	r3, r1
 80081fa:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80081fc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80081fe:	f013 0f10 	tst.w	r3, #16
 8008202:	d006      	beq.n	8008212 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008204:	6802      	ldr	r2, [r0, #0]
 8008206:	6893      	ldr	r3, [r2, #8]
 8008208:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800820c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800820e:	430b      	orrs	r3, r1
 8008210:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008212:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008214:	f013 0f20 	tst.w	r3, #32
 8008218:	d006      	beq.n	8008228 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800821a:	6802      	ldr	r2, [r0, #0]
 800821c:	6893      	ldr	r3, [r2, #8]
 800821e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008222:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8008224:	430b      	orrs	r3, r1
 8008226:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008228:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800822a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800822e:	d00a      	beq.n	8008246 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008230:	6802      	ldr	r2, [r0, #0]
 8008232:	6853      	ldr	r3, [r2, #4]
 8008234:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008238:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800823a:	430b      	orrs	r3, r1
 800823c:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800823e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008240:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008244:	d00b      	beq.n	800825e <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008246:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008248:	f013 0f80 	tst.w	r3, #128	; 0x80
 800824c:	d006      	beq.n	800825c <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800824e:	6802      	ldr	r2, [r0, #0]
 8008250:	6853      	ldr	r3, [r2, #4]
 8008252:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8008256:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8008258:	430b      	orrs	r3, r1
 800825a:	6053      	str	r3, [r2, #4]
}
 800825c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800825e:	6802      	ldr	r2, [r0, #0]
 8008260:	6853      	ldr	r3, [r2, #4]
 8008262:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008266:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8008268:	430b      	orrs	r3, r1
 800826a:	6053      	str	r3, [r2, #4]
 800826c:	e7eb      	b.n	8008246 <UART_AdvFeatureConfig+0xa2>

0800826e <UART_WaitOnFlagUntilTimeout>:
{
 800826e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008272:	4605      	mov	r5, r0
 8008274:	460f      	mov	r7, r1
 8008276:	4616      	mov	r6, r2
 8008278:	4699      	mov	r9, r3
 800827a:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800827e:	682c      	ldr	r4, [r5, #0]
 8008280:	69e4      	ldr	r4, [r4, #28]
 8008282:	ea37 0304 	bics.w	r3, r7, r4
 8008286:	bf0c      	ite	eq
 8008288:	f04f 0c01 	moveq.w	ip, #1
 800828c:	f04f 0c00 	movne.w	ip, #0
 8008290:	45b4      	cmp	ip, r6
 8008292:	d157      	bne.n	8008344 <UART_WaitOnFlagUntilTimeout+0xd6>
    if (Timeout != HAL_MAX_DELAY)
 8008294:	f1b8 3fff 	cmp.w	r8, #4294967295
 8008298:	d0f1      	beq.n	800827e <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800829a:	f7f9 fc15 	bl	8001ac8 <HAL_GetTick>
 800829e:	eba0 0009 	sub.w	r0, r0, r9
 80082a2:	4540      	cmp	r0, r8
 80082a4:	d82f      	bhi.n	8008306 <UART_WaitOnFlagUntilTimeout+0x98>
 80082a6:	f1b8 0f00 	cmp.w	r8, #0
 80082aa:	d02c      	beq.n	8008306 <UART_WaitOnFlagUntilTimeout+0x98>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80082ac:	682b      	ldr	r3, [r5, #0]
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	f012 0f04 	tst.w	r2, #4
 80082b4:	d0e3      	beq.n	800827e <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80082b6:	69da      	ldr	r2, [r3, #28]
 80082b8:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80082bc:	d0df      	beq.n	800827e <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082c2:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80082c4:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c6:	e852 3f00 	ldrex	r3, [r2]
 80082ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ce:	e842 3100 	strex	r1, r3, [r2]
 80082d2:	2900      	cmp	r1, #0
 80082d4:	d1f6      	bne.n	80082c4 <UART_WaitOnFlagUntilTimeout+0x56>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082d6:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d8:	f102 0308 	add.w	r3, r2, #8
 80082dc:	e853 3f00 	ldrex	r3, [r3]
 80082e0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e4:	3208      	adds	r2, #8
 80082e6:	e842 3100 	strex	r1, r3, [r2]
 80082ea:	2900      	cmp	r1, #0
 80082ec:	d1f3      	bne.n	80082d6 <UART_WaitOnFlagUntilTimeout+0x68>
          huart->gState = HAL_UART_STATE_READY;
 80082ee:	2320      	movs	r3, #32
 80082f0:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80082f4:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80082f8:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 80082fc:	2300      	movs	r3, #0
 80082fe:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
          return HAL_TIMEOUT;
 8008302:	2003      	movs	r0, #3
 8008304:	e01f      	b.n	8008346 <UART_WaitOnFlagUntilTimeout+0xd8>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008306:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008308:	e852 3f00 	ldrex	r3, [r2]
 800830c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008310:	e842 3100 	strex	r1, r3, [r2]
 8008314:	2900      	cmp	r1, #0
 8008316:	d1f6      	bne.n	8008306 <UART_WaitOnFlagUntilTimeout+0x98>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008318:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800831a:	f102 0308 	add.w	r3, r2, #8
 800831e:	e853 3f00 	ldrex	r3, [r3]
 8008322:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008326:	3208      	adds	r2, #8
 8008328:	e842 3100 	strex	r1, r3, [r2]
 800832c:	2900      	cmp	r1, #0
 800832e:	d1f3      	bne.n	8008318 <UART_WaitOnFlagUntilTimeout+0xaa>
        huart->gState = HAL_UART_STATE_READY;
 8008330:	2320      	movs	r3, #32
 8008332:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008336:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 800833a:	2300      	movs	r3, #0
 800833c:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 8008340:	2003      	movs	r0, #3
 8008342:	e000      	b.n	8008346 <UART_WaitOnFlagUntilTimeout+0xd8>
  return HAL_OK;
 8008344:	2000      	movs	r0, #0
}
 8008346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800834a <UART_CheckIdleState>:
{
 800834a:	b530      	push	{r4, r5, lr}
 800834c:	b083      	sub	sp, #12
 800834e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008350:	2300      	movs	r3, #0
 8008352:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8008356:	f7f9 fbb7 	bl	8001ac8 <HAL_GetTick>
 800835a:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800835c:	6822      	ldr	r2, [r4, #0]
 800835e:	6812      	ldr	r2, [r2, #0]
 8008360:	f012 0f08 	tst.w	r2, #8
 8008364:	d10f      	bne.n	8008386 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008366:	6823      	ldr	r3, [r4, #0]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f013 0f04 	tst.w	r3, #4
 800836e:	d118      	bne.n	80083a2 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8008370:	2320      	movs	r3, #32
 8008372:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008376:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800837a:	2000      	movs	r0, #0
 800837c:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 800837e:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8008382:	b003      	add	sp, #12
 8008384:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008386:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800838a:	9300      	str	r3, [sp, #0]
 800838c:	4603      	mov	r3, r0
 800838e:	2200      	movs	r2, #0
 8008390:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008394:	4620      	mov	r0, r4
 8008396:	f7ff ff6a 	bl	800826e <UART_WaitOnFlagUntilTimeout>
 800839a:	2800      	cmp	r0, #0
 800839c:	d0e3      	beq.n	8008366 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 800839e:	2003      	movs	r0, #3
 80083a0:	e7ef      	b.n	8008382 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80083a2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80083a6:	9300      	str	r3, [sp, #0]
 80083a8:	462b      	mov	r3, r5
 80083aa:	2200      	movs	r2, #0
 80083ac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80083b0:	4620      	mov	r0, r4
 80083b2:	f7ff ff5c 	bl	800826e <UART_WaitOnFlagUntilTimeout>
 80083b6:	2800      	cmp	r0, #0
 80083b8:	d0da      	beq.n	8008370 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 80083ba:	2003      	movs	r0, #3
 80083bc:	e7e1      	b.n	8008382 <UART_CheckIdleState+0x38>

080083be <HAL_UART_Init>:
  if (huart == NULL)
 80083be:	b378      	cbz	r0, 8008420 <HAL_UART_Init+0x62>
{
 80083c0:	b510      	push	{r4, lr}
 80083c2:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80083c4:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80083c8:	b30b      	cbz	r3, 800840e <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80083ca:	2324      	movs	r3, #36	; 0x24
 80083cc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 80083d0:	6822      	ldr	r2, [r4, #0]
 80083d2:	6813      	ldr	r3, [r2, #0]
 80083d4:	f023 0301 	bic.w	r3, r3, #1
 80083d8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80083da:	4620      	mov	r0, r4
 80083dc:	f7ff fd7c 	bl	8007ed8 <UART_SetConfig>
 80083e0:	2801      	cmp	r0, #1
 80083e2:	d013      	beq.n	800840c <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80083e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80083e6:	b9bb      	cbnz	r3, 8008418 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083e8:	6822      	ldr	r2, [r4, #0]
 80083ea:	6853      	ldr	r3, [r2, #4]
 80083ec:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80083f0:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083f2:	6822      	ldr	r2, [r4, #0]
 80083f4:	6893      	ldr	r3, [r2, #8]
 80083f6:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80083fa:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80083fc:	6822      	ldr	r2, [r4, #0]
 80083fe:	6813      	ldr	r3, [r2, #0]
 8008400:	f043 0301 	orr.w	r3, r3, #1
 8008404:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8008406:	4620      	mov	r0, r4
 8008408:	f7ff ff9f 	bl	800834a <UART_CheckIdleState>
}
 800840c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800840e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8008412:	f7f9 feb7 	bl	8002184 <HAL_UART_MspInit>
 8008416:	e7d8      	b.n	80083ca <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8008418:	4620      	mov	r0, r4
 800841a:	f7ff fec3 	bl	80081a4 <UART_AdvFeatureConfig>
 800841e:	e7e3      	b.n	80083e8 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8008420:	2001      	movs	r0, #1
}
 8008422:	4770      	bx	lr

08008424 <UART_Start_Receive_IT>:
{
 8008424:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 8008426:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008428:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 800842c:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008430:	2300      	movs	r3, #0
 8008432:	6703      	str	r3, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 8008434:	6883      	ldr	r3, [r0, #8]
 8008436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800843a:	d006      	beq.n	800844a <UART_Start_Receive_IT+0x26>
 800843c:	b9a3      	cbnz	r3, 8008468 <UART_Start_Receive_IT+0x44>
 800843e:	6903      	ldr	r3, [r0, #16]
 8008440:	b973      	cbnz	r3, 8008460 <UART_Start_Receive_IT+0x3c>
 8008442:	23ff      	movs	r3, #255	; 0xff
 8008444:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8008448:	e014      	b.n	8008474 <UART_Start_Receive_IT+0x50>
 800844a:	6903      	ldr	r3, [r0, #16]
 800844c:	b923      	cbnz	r3, 8008458 <UART_Start_Receive_IT+0x34>
 800844e:	f240 13ff 	movw	r3, #511	; 0x1ff
 8008452:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8008456:	e00d      	b.n	8008474 <UART_Start_Receive_IT+0x50>
 8008458:	23ff      	movs	r3, #255	; 0xff
 800845a:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800845e:	e009      	b.n	8008474 <UART_Start_Receive_IT+0x50>
 8008460:	237f      	movs	r3, #127	; 0x7f
 8008462:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8008466:	e005      	b.n	8008474 <UART_Start_Receive_IT+0x50>
 8008468:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800846c:	d030      	beq.n	80084d0 <UART_Start_Receive_IT+0xac>
 800846e:	2300      	movs	r3, #0
 8008470:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008474:	2300      	movs	r3, #0
 8008476:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800847a:	2322      	movs	r3, #34	; 0x22
 800847c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008480:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008482:	f101 0308 	add.w	r3, r1, #8
 8008486:	e853 3f00 	ldrex	r3, [r3]
 800848a:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800848e:	3108      	adds	r1, #8
 8008490:	e841 3400 	strex	r4, r3, [r1]
 8008494:	2c00      	cmp	r4, #0
 8008496:	d1f3      	bne.n	8008480 <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008498:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800849a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800849e:	d021      	beq.n	80084e4 <UART_Start_Receive_IT+0xc0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084a0:	6883      	ldr	r3, [r0, #8]
 80084a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084a6:	d048      	beq.n	800853a <UART_Start_Receive_IT+0x116>
      huart->RxISR = UART_RxISR_8BIT;
 80084a8:	4b2c      	ldr	r3, [pc, #176]	; (800855c <UART_Start_Receive_IT+0x138>)
 80084aa:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 80084ac:	2300      	movs	r3, #0
 80084ae:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 80084b2:	6903      	ldr	r3, [r0, #16]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d046      	beq.n	8008546 <UART_Start_Receive_IT+0x122>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80084b8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ba:	e852 3f00 	ldrex	r3, [r2]
 80084be:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c2:	e842 3100 	strex	r1, r3, [r2]
 80084c6:	2900      	cmp	r1, #0
 80084c8:	d1f6      	bne.n	80084b8 <UART_Start_Receive_IT+0x94>
}
 80084ca:	2000      	movs	r0, #0
 80084cc:	bc10      	pop	{r4}
 80084ce:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 80084d0:	6903      	ldr	r3, [r0, #16]
 80084d2:	b91b      	cbnz	r3, 80084dc <UART_Start_Receive_IT+0xb8>
 80084d4:	237f      	movs	r3, #127	; 0x7f
 80084d6:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80084da:	e7cb      	b.n	8008474 <UART_Start_Receive_IT+0x50>
 80084dc:	233f      	movs	r3, #63	; 0x3f
 80084de:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80084e2:	e7c7      	b.n	8008474 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80084e4:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d8d9      	bhi.n	80084a0 <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084ec:	6883      	ldr	r3, [r0, #8]
 80084ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084f2:	d01c      	beq.n	800852e <UART_Start_Receive_IT+0x10a>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80084f4:	4b1a      	ldr	r3, [pc, #104]	; (8008560 <UART_Start_Receive_IT+0x13c>)
 80084f6:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 80084f8:	2300      	movs	r3, #0
 80084fa:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 80084fe:	6903      	ldr	r3, [r0, #16]
 8008500:	b143      	cbz	r3, 8008514 <UART_Start_Receive_IT+0xf0>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008502:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008504:	e852 3f00 	ldrex	r3, [r2]
 8008508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800850c:	e842 3100 	strex	r1, r3, [r2]
 8008510:	2900      	cmp	r1, #0
 8008512:	d1f6      	bne.n	8008502 <UART_Start_Receive_IT+0xde>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008514:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008516:	f102 0308 	add.w	r3, r2, #8
 800851a:	e853 3f00 	ldrex	r3, [r3]
 800851e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008522:	3208      	adds	r2, #8
 8008524:	e842 3100 	strex	r1, r3, [r2]
 8008528:	2900      	cmp	r1, #0
 800852a:	d1f3      	bne.n	8008514 <UART_Start_Receive_IT+0xf0>
 800852c:	e7cd      	b.n	80084ca <UART_Start_Receive_IT+0xa6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800852e:	6903      	ldr	r3, [r0, #16]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d1df      	bne.n	80084f4 <UART_Start_Receive_IT+0xd0>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008534:	4b0b      	ldr	r3, [pc, #44]	; (8008564 <UART_Start_Receive_IT+0x140>)
 8008536:	6703      	str	r3, [r0, #112]	; 0x70
 8008538:	e7de      	b.n	80084f8 <UART_Start_Receive_IT+0xd4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800853a:	6903      	ldr	r3, [r0, #16]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d1b3      	bne.n	80084a8 <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 8008540:	4b09      	ldr	r3, [pc, #36]	; (8008568 <UART_Start_Receive_IT+0x144>)
 8008542:	6703      	str	r3, [r0, #112]	; 0x70
 8008544:	e7b2      	b.n	80084ac <UART_Start_Receive_IT+0x88>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008546:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008548:	e852 3f00 	ldrex	r3, [r2]
 800854c:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008550:	e842 3100 	strex	r1, r3, [r2]
 8008554:	2900      	cmp	r1, #0
 8008556:	d1f6      	bne.n	8008546 <UART_Start_Receive_IT+0x122>
 8008558:	e7b7      	b.n	80084ca <UART_Start_Receive_IT+0xa6>
 800855a:	bf00      	nop
 800855c:	08007a35 	.word	0x08007a35
 8008560:	08007b99 	.word	0x08007b99
 8008564:	08007d39 	.word	0x08007d39
 8008568:	08007ae7 	.word	0x08007ae7

0800856c <HAL_UART_Receive_IT>:
{
 800856c:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800856e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8008572:	2b20      	cmp	r3, #32
 8008574:	d11e      	bne.n	80085b4 <HAL_UART_Receive_IT+0x48>
    if ((pData == NULL) || (Size == 0U))
 8008576:	b1f9      	cbz	r1, 80085b8 <HAL_UART_Receive_IT+0x4c>
 8008578:	b302      	cbz	r2, 80085bc <HAL_UART_Receive_IT+0x50>
    __HAL_LOCK(huart);
 800857a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800857e:	2b01      	cmp	r3, #1
 8008580:	d01e      	beq.n	80085c0 <HAL_UART_Receive_IT+0x54>
 8008582:	2301      	movs	r3, #1
 8008584:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008588:	2300      	movs	r3, #0
 800858a:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800858c:	6803      	ldr	r3, [r0, #0]
 800858e:	4c0d      	ldr	r4, [pc, #52]	; (80085c4 <HAL_UART_Receive_IT+0x58>)
 8008590:	42a3      	cmp	r3, r4
 8008592:	d00c      	beq.n	80085ae <HAL_UART_Receive_IT+0x42>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800859a:	d008      	beq.n	80085ae <HAL_UART_Receive_IT+0x42>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800859c:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800859e:	e854 3f00 	ldrex	r3, [r4]
 80085a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a6:	e844 3500 	strex	r5, r3, [r4]
 80085aa:	2d00      	cmp	r5, #0
 80085ac:	d1f6      	bne.n	800859c <HAL_UART_Receive_IT+0x30>
    return(UART_Start_Receive_IT(huart, pData, Size));
 80085ae:	f7ff ff39 	bl	8008424 <UART_Start_Receive_IT>
 80085b2:	e000      	b.n	80085b6 <HAL_UART_Receive_IT+0x4a>
    return HAL_BUSY;
 80085b4:	2002      	movs	r0, #2
}
 80085b6:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80085b8:	2001      	movs	r0, #1
 80085ba:	e7fc      	b.n	80085b6 <HAL_UART_Receive_IT+0x4a>
 80085bc:	2001      	movs	r0, #1
 80085be:	e7fa      	b.n	80085b6 <HAL_UART_Receive_IT+0x4a>
    __HAL_LOCK(huart);
 80085c0:	2002      	movs	r0, #2
 80085c2:	e7f8      	b.n	80085b6 <HAL_UART_Receive_IT+0x4a>
 80085c4:	40008000 	.word	0x40008000

080085c8 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80085c8:	b082      	sub	sp, #8
 80085ca:	ab02      	add	r3, sp, #8
 80085cc:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 80085d0:	6802      	ldr	r2, [r0, #0]
 80085d2:	6853      	ldr	r3, [r2, #4]
 80085d4:	f023 0310 	bic.w	r3, r3, #16
 80085d8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80085dc:	430b      	orrs	r3, r1
 80085de:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 80085e0:	6802      	ldr	r2, [r0, #0]
 80085e2:	6853      	ldr	r3, [r2, #4]
 80085e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80085e8:	f89d 1006 	ldrb.w	r1, [sp, #6]
 80085ec:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80085f0:	6053      	str	r3, [r2, #4]
}
 80085f2:	b002      	add	sp, #8
 80085f4:	4770      	bx	lr
	...

080085f8 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80085f8:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80085fa:	b92b      	cbnz	r3, 8008608 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 80085fc:	2301      	movs	r3, #1
 80085fe:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008602:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8008606:	4770      	bx	lr
{
 8008608:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800860a:	6803      	ldr	r3, [r0, #0]
 800860c:	689a      	ldr	r2, [r3, #8]
 800860e:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008612:	6899      	ldr	r1, [r3, #8]
 8008614:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008616:	4d09      	ldr	r5, [pc, #36]	; (800863c <UARTEx_SetNbDataToProcess+0x44>)
 8008618:	5c6b      	ldrb	r3, [r5, r1]
 800861a:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800861c:	4c08      	ldr	r4, [pc, #32]	; (8008640 <UARTEx_SetNbDataToProcess+0x48>)
 800861e:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008620:	fb93 f3f1 	sdiv	r3, r3, r1
 8008624:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008628:	5cab      	ldrb	r3, [r5, r2]
 800862a:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 800862c:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800862e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008632:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8008636:	bc30      	pop	{r4, r5}
 8008638:	4770      	bx	lr
 800863a:	bf00      	nop
 800863c:	0801479c 	.word	0x0801479c
 8008640:	08014794 	.word	0x08014794

08008644 <HAL_UARTEx_WakeupCallback>:
}
 8008644:	4770      	bx	lr

08008646 <HAL_UARTEx_RxFifoFullCallback>:
}
 8008646:	4770      	bx	lr

08008648 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8008648:	4770      	bx	lr

0800864a <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 800864a:	b510      	push	{r4, lr}
 800864c:	b084      	sub	sp, #16
 800864e:	ab04      	add	r3, sp, #16
 8008650:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 8008654:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8008658:	2b01      	cmp	r3, #1
 800865a:	d035      	beq.n	80086c8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 800865c:	4604      	mov	r4, r0
 800865e:	2301      	movs	r3, #1
 8008660:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8008664:	2324      	movs	r3, #36	; 0x24
 8008666:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800866a:	6802      	ldr	r2, [r0, #0]
 800866c:	6813      	ldr	r3, [r2, #0]
 800866e:	f023 0301 	bic.w	r3, r3, #1
 8008672:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8008674:	6801      	ldr	r1, [r0, #0]
 8008676:	688b      	ldr	r3, [r1, #8]
 8008678:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800867c:	9a02      	ldr	r2, [sp, #8]
 800867e:	4313      	orrs	r3, r2
 8008680:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8008682:	b1aa      	cbz	r2, 80086b0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 8008684:	6822      	ldr	r2, [r4, #0]
 8008686:	6813      	ldr	r3, [r2, #0]
 8008688:	f043 0301 	orr.w	r3, r3, #1
 800868c:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800868e:	f7f9 fa1b 	bl	8001ac8 <HAL_GetTick>
 8008692:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008694:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8008698:	9200      	str	r2, [sp, #0]
 800869a:	2200      	movs	r2, #0
 800869c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80086a0:	4620      	mov	r0, r4
 80086a2:	f7ff fde4 	bl	800826e <UART_WaitOnFlagUntilTimeout>
 80086a6:	b948      	cbnz	r0, 80086bc <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 80086a8:	2320      	movs	r3, #32
 80086aa:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 80086ae:	e006      	b.n	80086be <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 80086b0:	ab04      	add	r3, sp, #16
 80086b2:	e913 0006 	ldmdb	r3, {r1, r2}
 80086b6:	f7ff ff87 	bl	80085c8 <UARTEx_Wakeup_AddressConfig>
 80086ba:	e7e3      	b.n	8008684 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 80086bc:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 80086be:	2300      	movs	r3, #0
 80086c0:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 80086c4:	b004      	add	sp, #16
 80086c6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 80086c8:	2002      	movs	r0, #2
 80086ca:	e7fb      	b.n	80086c4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

080086cc <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 80086cc:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d010      	beq.n	80086f6 <HAL_UARTEx_EnableStopMode+0x2a>
 80086d4:	2301      	movs	r3, #1
 80086d6:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 80086da:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086dc:	e852 3f00 	ldrex	r3, [r2]
 80086e0:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e4:	e842 3100 	strex	r1, r3, [r2]
 80086e8:	2900      	cmp	r1, #0
 80086ea:	d1f6      	bne.n	80086da <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 80086ec:	2300      	movs	r3, #0
 80086ee:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 80086f2:	4618      	mov	r0, r3
 80086f4:	4770      	bx	lr
  __HAL_LOCK(huart);
 80086f6:	2002      	movs	r0, #2
}
 80086f8:	4770      	bx	lr

080086fa <HAL_UARTEx_EnableFifoMode>:
  __HAL_LOCK(huart);
 80086fa:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d01d      	beq.n	800873e <HAL_UARTEx_EnableFifoMode+0x44>
{
 8008702:	b510      	push	{r4, lr}
 8008704:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8008706:	2301      	movs	r3, #1
 8008708:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800870c:	2324      	movs	r3, #36	; 0x24
 800870e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008712:	6802      	ldr	r2, [r0, #0]
 8008714:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8008716:	6811      	ldr	r1, [r2, #0]
 8008718:	f021 0101 	bic.w	r1, r1, #1
 800871c:	6011      	str	r1, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800871e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8008722:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8008726:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008728:	6802      	ldr	r2, [r0, #0]
 800872a:	6013      	str	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 800872c:	f7ff ff64 	bl	80085f8 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8008730:	2320      	movs	r3, #32
 8008732:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8008736:	2000      	movs	r0, #0
 8008738:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800873c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 800873e:	2002      	movs	r0, #2
}
 8008740:	4770      	bx	lr

08008742 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8008742:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8008744:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8008748:	2b01      	cmp	r3, #1
 800874a:	d01d      	beq.n	8008788 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800874c:	4604      	mov	r4, r0
 800874e:	2301      	movs	r3, #1
 8008750:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8008754:	2324      	movs	r3, #36	; 0x24
 8008756:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800875a:	6803      	ldr	r3, [r0, #0]
 800875c:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	f022 0201 	bic.w	r2, r2, #1
 8008764:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008766:	6802      	ldr	r2, [r0, #0]
 8008768:	6893      	ldr	r3, [r2, #8]
 800876a:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800876e:	4319      	orrs	r1, r3
 8008770:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8008772:	f7ff ff41 	bl	80085f8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008776:	6823      	ldr	r3, [r4, #0]
 8008778:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800877a:	2320      	movs	r3, #32
 800877c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8008780:	2000      	movs	r0, #0
 8008782:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8008786:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8008788:	2002      	movs	r0, #2
 800878a:	e7fc      	b.n	8008786 <HAL_UARTEx_SetTxFifoThreshold+0x44>

0800878c <HAL_UARTEx_SetRxFifoThreshold>:
{
 800878c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800878e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8008792:	2b01      	cmp	r3, #1
 8008794:	d01d      	beq.n	80087d2 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8008796:	4604      	mov	r4, r0
 8008798:	2301      	movs	r3, #1
 800879a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800879e:	2324      	movs	r3, #36	; 0x24
 80087a0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087a4:	6803      	ldr	r3, [r0, #0]
 80087a6:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80087a8:	681a      	ldr	r2, [r3, #0]
 80087aa:	f022 0201 	bic.w	r2, r2, #1
 80087ae:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80087b0:	6802      	ldr	r2, [r0, #0]
 80087b2:	6893      	ldr	r3, [r2, #8]
 80087b4:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 80087b8:	4319      	orrs	r1, r3
 80087ba:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80087bc:	f7ff ff1c 	bl	80085f8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087c0:	6823      	ldr	r3, [r4, #0]
 80087c2:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80087c4:	2320      	movs	r3, #32
 80087c6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80087ca:	2000      	movs	r0, #0
 80087cc:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 80087d0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80087d2:	2002      	movs	r0, #2
 80087d4:	e7fc      	b.n	80087d0 <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

080087d8 <LmHandlerPackageIsInitialized>:
    }
}

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 80087d8:	2804      	cmp	r0, #4
 80087da:	d807      	bhi.n	80087ec <LmHandlerPackageIsInitialized+0x14>
{
 80087dc:	b508      	push	{r3, lr}
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 80087de:	4b05      	ldr	r3, [pc, #20]	; (80087f4 <LmHandlerPackageIsInitialized+0x1c>)
 80087e0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80087e4:	689b      	ldr	r3, [r3, #8]
 80087e6:	b11b      	cbz	r3, 80087f0 <LmHandlerPackageIsInitialized+0x18>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 80087e8:	4798      	blx	r3
    }
    else
    {
        return false;
    }
}
 80087ea:	bd08      	pop	{r3, pc}
        return false;
 80087ec:	2000      	movs	r0, #0
}
 80087ee:	4770      	bx	lr
        return false;
 80087f0:	2000      	movs	r0, #0
 80087f2:	e7fa      	b.n	80087ea <LmHandlerPackageIsInitialized+0x12>
 80087f4:	2000076c 	.word	0x2000076c

080087f8 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 80087f8:	b570      	push	{r4, r5, r6, lr}
 80087fa:	4605      	mov	r5, r0
 80087fc:	460e      	mov	r6, r1
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80087fe:	2400      	movs	r4, #0
 8008800:	e005      	b.n	800880e <LmHandlerPackagesNotify+0x16>
        {
            switch( notifyType )
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 8008802:	699b      	ldr	r3, [r3, #24]
 8008804:	b10b      	cbz	r3, 800880a <LmHandlerPackagesNotify+0x12>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 8008806:	4630      	mov	r0, r6
 8008808:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800880a:	3401      	adds	r4, #1
 800880c:	b264      	sxtb	r4, r4
 800880e:	2c04      	cmp	r4, #4
 8008810:	dc24      	bgt.n	800885c <LmHandlerPackagesNotify+0x64>
        if( LmHandlerPackages[i] != NULL )
 8008812:	4b13      	ldr	r3, [pc, #76]	; (8008860 <LmHandlerPackagesNotify+0x68>)
 8008814:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d0f6      	beq.n	800880a <LmHandlerPackagesNotify+0x12>
            switch( notifyType )
 800881c:	2d03      	cmp	r5, #3
 800881e:	d8f4      	bhi.n	800880a <LmHandlerPackagesNotify+0x12>
 8008820:	a201      	add	r2, pc, #4	; (adr r2, 8008828 <LmHandlerPackagesNotify+0x30>)
 8008822:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 8008826:	bf00      	nop
 8008828:	08008803 	.word	0x08008803
 800882c:	08008839 	.word	0x08008839
 8008830:	08008845 	.word	0x08008845
 8008834:	08008851 	.word	0x08008851
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 8008838:	69db      	ldr	r3, [r3, #28]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d0e5      	beq.n	800880a <LmHandlerPackagesNotify+0x12>
#endif /* LORAMAC_VERSION */
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800883e:	4630      	mov	r0, r6
 8008840:	4798      	blx	r3
 8008842:	e7e2      	b.n	800880a <LmHandlerPackagesNotify+0x12>
                    }
                    break;
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 8008844:	6a1b      	ldr	r3, [r3, #32]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d0df      	beq.n	800880a <LmHandlerPackagesNotify+0x12>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800884a:	4630      	mov	r0, r6
 800884c:	4798      	blx	r3
 800884e:	e7dc      	b.n	800880a <LmHandlerPackagesNotify+0x12>
                    }
                    break;
                }
                case PACKAGE_MLME_INDICATION:
                {
                    if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 8008850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008852:	2b00      	cmp	r3, #0
 8008854:	d0d9      	beq.n	800880a <LmHandlerPackagesNotify+0x12>
                    {
                        LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 8008856:	4630      	mov	r0, r6
 8008858:	4798      	blx	r3
 800885a:	e7d6      	b.n	800880a <LmHandlerPackagesNotify+0x12>
                    break;
                }
            }
        }
    }
}
 800885c:	bd70      	pop	{r4, r5, r6, pc}
 800885e:	bf00      	nop
 8008860:	2000076c 	.word	0x2000076c

08008864 <MlmeIndication>:
{
 8008864:	b510      	push	{r4, lr}
 8008866:	4604      	mov	r4, r0
    RxParams.IsMcpsIndication = 0;
 8008868:	4b14      	ldr	r3, [pc, #80]	; (80088bc <MlmeIndication+0x58>)
 800886a:	2200      	movs	r2, #0
 800886c:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800886e:	7842      	ldrb	r2, [r0, #1]
 8008870:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 8008872:	f990 2002 	ldrsb.w	r2, [r0, #2]
 8008876:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 8008878:	f9b1 2000 	ldrsh.w	r2, [r1]
 800887c:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800887e:	f991 2002 	ldrsb.w	r2, [r1, #2]
 8008882:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 8008884:	78ca      	ldrb	r2, [r1, #3]
 8008886:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 8008888:	6842      	ldr	r2, [r0, #4]
 800888a:	60da      	str	r2, [r3, #12]
    if ((mlmeIndication->MlmeIndication != MLME_BEACON) && (mlmeIndication->MlmeIndication != MLME_BEACON_LOST))
 800888c:	7803      	ldrb	r3, [r0, #0]
 800888e:	2b0a      	cmp	r3, #10
 8008890:	d007      	beq.n	80088a2 <MlmeIndication+0x3e>
 8008892:	2b0e      	cmp	r3, #14
 8008894:	d005      	beq.n	80088a2 <MlmeIndication+0x3e>
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 8008896:	4b0a      	ldr	r3, [pc, #40]	; (80088c0 <MlmeIndication+0x5c>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800889c:	4907      	ldr	r1, [pc, #28]	; (80088bc <MlmeIndication+0x58>)
 800889e:	2000      	movs	r0, #0
 80088a0:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 80088a2:	4621      	mov	r1, r4
 80088a4:	2003      	movs	r0, #3
 80088a6:	f7ff ffa7 	bl	80087f8 <LmHandlerPackagesNotify>
    switch( mlmeIndication->MlmeIndication )
 80088aa:	7823      	ldrb	r3, [r4, #0]
 80088ac:	2b06      	cmp	r3, #6
 80088ae:	d000      	beq.n	80088b2 <MlmeIndication+0x4e>
}
 80088b0:	bd10      	pop	{r4, pc}
            IsUplinkTxPending = true;
 80088b2:	4b04      	ldr	r3, [pc, #16]	; (80088c4 <MlmeIndication+0x60>)
 80088b4:	2201      	movs	r2, #1
 80088b6:	701a      	strb	r2, [r3, #0]
}
 80088b8:	e7fa      	b.n	80088b0 <MlmeIndication+0x4c>
 80088ba:	bf00      	nop
 80088bc:	20000098 	.word	0x20000098
 80088c0:	20000768 	.word	0x20000768
 80088c4:	20000764 	.word	0x20000764

080088c8 <McpsConfirm>:
{
 80088c8:	b510      	push	{r4, lr}
 80088ca:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 1;
 80088cc:	480c      	ldr	r0, [pc, #48]	; (8008900 <McpsConfirm+0x38>)
 80088ce:	2301      	movs	r3, #1
 80088d0:	7003      	strb	r3, [r0, #0]
    TxParams.Status = mcpsConfirm->Status;
 80088d2:	7863      	ldrb	r3, [r4, #1]
 80088d4:	7043      	strb	r3, [r0, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 80088d6:	f994 3002 	ldrsb.w	r3, [r4, #2]
 80088da:	7283      	strb	r3, [r0, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 80088dc:	68e3      	ldr	r3, [r4, #12]
 80088de:	60c3      	str	r3, [r0, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 80088e0:	f994 3003 	ldrsb.w	r3, [r4, #3]
 80088e4:	7603      	strb	r3, [r0, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 80088e6:	6923      	ldr	r3, [r4, #16]
 80088e8:	7643      	strb	r3, [r0, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 80088ea:	7923      	ldrb	r3, [r4, #4]
 80088ec:	7243      	strb	r3, [r0, #9]
    LmHandlerCallbacks->OnTxData( &TxParams );
 80088ee:	4b05      	ldr	r3, [pc, #20]	; (8008904 <McpsConfirm+0x3c>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f4:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 80088f6:	4621      	mov	r1, r4
 80088f8:	2000      	movs	r0, #0
 80088fa:	f7ff ff7d 	bl	80087f8 <LmHandlerPackagesNotify>
}
 80088fe:	bd10      	pop	{r4, pc}
 8008900:	200000ac 	.word	0x200000ac
 8008904:	20000768 	.word	0x20000768

08008908 <LmHandlerPackageIsTxPending>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool LmHandlerPackageIsTxPending( void )
{
 8008908:	b510      	push	{r4, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800890a:	2400      	movs	r4, #0
 800890c:	e001      	b.n	8008912 <LmHandlerPackageIsTxPending+0xa>
 800890e:	3401      	adds	r4, #1
 8008910:	b264      	sxtb	r4, r4
 8008912:	2c04      	cmp	r4, #4
 8008914:	dc0a      	bgt.n	800892c <LmHandlerPackageIsTxPending+0x24>
    {
        if( LmHandlerPackages[i] != NULL )
 8008916:	4b07      	ldr	r3, [pc, #28]	; (8008934 <LmHandlerPackageIsTxPending+0x2c>)
 8008918:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d0f6      	beq.n	800890e <LmHandlerPackageIsTxPending+0x6>
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	4798      	blx	r3
 8008924:	4603      	mov	r3, r0
 8008926:	2800      	cmp	r0, #0
 8008928:	d0f1      	beq.n	800890e <LmHandlerPackageIsTxPending+0x6>
 800892a:	e000      	b.n	800892e <LmHandlerPackageIsTxPending+0x26>
            {
                return true;
            }
        }
    }
    return false;
 800892c:	2300      	movs	r3, #0
}
 800892e:	4618      	mov	r0, r3
 8008930:	bd10      	pop	{r4, pc}
 8008932:	bf00      	nop
 8008934:	2000076c 	.word	0x2000076c

08008938 <LmHandlerPackagesProcess>:
#endif /* LORAMAC_VERSION */

static void LmHandlerPackagesProcess( void )
{
 8008938:	b538      	push	{r3, r4, r5, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800893a:	2400      	movs	r4, #0
 800893c:	e001      	b.n	8008942 <LmHandlerPackagesProcess+0xa>
 800893e:	3401      	adds	r4, #1
 8008940:	b264      	sxtb	r4, r4
 8008942:	2c04      	cmp	r4, #4
 8008944:	dc12      	bgt.n	800896c <LmHandlerPackagesProcess+0x34>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 8008946:	4b0a      	ldr	r3, [pc, #40]	; (8008970 <LmHandlerPackagesProcess+0x38>)
 8008948:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d0f6      	beq.n	800893e <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8008950:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 8008952:	2b00      	cmp	r3, #0
 8008954:	d0f3      	beq.n	800893e <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 8008956:	b2e0      	uxtb	r0, r4
 8008958:	f7ff ff3e 	bl	80087d8 <LmHandlerPackageIsInitialized>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800895c:	2800      	cmp	r0, #0
 800895e:	d0ee      	beq.n	800893e <LmHandlerPackagesProcess+0x6>
        {
            LmHandlerPackages[i]->Process( );
 8008960:	4b03      	ldr	r3, [pc, #12]	; (8008970 <LmHandlerPackagesProcess+0x38>)
 8008962:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008966:	691b      	ldr	r3, [r3, #16]
 8008968:	4798      	blx	r3
 800896a:	e7e8      	b.n	800893e <LmHandlerPackagesProcess+0x6>
        }
    }
}
 800896c:	bd38      	pop	{r3, r4, r5, pc}
 800896e:	bf00      	nop
 8008970:	2000076c 	.word	0x2000076c

08008974 <LmHandlerJoin>:
{
 8008974:	b510      	push	{r4, lr}
 8008976:	b08e      	sub	sp, #56	; 0x38
 8008978:	460c      	mov	r4, r1
    mlmeReq.Type = MLME_JOIN;
 800897a:	2301      	movs	r3, #1
 800897c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 8008980:	4b26      	ldr	r3, [pc, #152]	; (8008a1c <LmHandlerJoin+0xa8>)
 8008982:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8008986:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
    if ( mode == ACTIVATION_TYPE_OTAA )
 800898a:	2802      	cmp	r0, #2
 800898c:	d021      	beq.n	80089d2 <LmHandlerJoin+0x5e>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800898e:	2101      	movs	r1, #1
 8008990:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 8008994:	4b22      	ldr	r3, [pc, #136]	; (8008a20 <LmHandlerJoin+0xac>)
 8008996:	7199      	strb	r1, [r3, #6]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 8008998:	711a      	strb	r2, [r3, #4]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800899a:	2100      	movs	r1, #0
 800899c:	7159      	strb	r1, [r3, #5]
        JoinParams.forceRejoin = forceRejoin;
 800899e:	71dc      	strb	r4, [r3, #7]
        if (CtxRestoreDone == false)
 80089a0:	4b20      	ldr	r3, [pc, #128]	; (8008a24 <LmHandlerJoin+0xb0>)
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	b1f3      	cbz	r3, 80089e4 <LmHandlerJoin+0x70>
        LoRaMacStart();
 80089a6:	f003 fa4d 	bl	800be44 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 80089aa:	2301      	movs	r3, #1
 80089ac:	f88d 3000 	strb.w	r3, [sp]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 80089b0:	f88d 3004 	strb.w	r3, [sp, #4]
        LoRaMacMibSetRequestConfirm( &mibReq );
 80089b4:	4668      	mov	r0, sp
 80089b6:	f003 fc4d 	bl	800c254 <LoRaMacMibSetRequestConfirm>
    if ((CtxRestoreDone == false) || (forceRejoin == true))
 80089ba:	4b1a      	ldr	r3, [pc, #104]	; (8008a24 <LmHandlerJoin+0xb0>)
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	b103      	cbz	r3, 80089c2 <LmHandlerJoin+0x4e>
 80089c0:	b114      	cbz	r4, 80089c8 <LmHandlerJoin+0x54>
        LoRaMacMlmeRequest( &mlmeReq );
 80089c2:	a809      	add	r0, sp, #36	; 0x24
 80089c4:	f003 fecc 	bl	800c760 <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 80089c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80089ca:	4b17      	ldr	r3, [pc, #92]	; (8008a28 <LmHandlerJoin+0xb4>)
 80089cc:	601a      	str	r2, [r3, #0]
}
 80089ce:	b00e      	add	sp, #56	; 0x38
 80089d0:	bd10      	pop	{r4, pc}
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 80089d2:	2202      	movs	r2, #2
 80089d4:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 80089d8:	4b11      	ldr	r3, [pc, #68]	; (8008a20 <LmHandlerJoin+0xac>)
 80089da:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 80089dc:	71d9      	strb	r1, [r3, #7]
        LoRaMacStart();
 80089de:	f003 fa31 	bl	800be44 <LoRaMacStart>
 80089e2:	e7ea      	b.n	80089ba <LmHandlerJoin+0x46>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 80089e4:	231f      	movs	r3, #31
 80089e6:	f88d 3000 	strb.w	r3, [sp]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 80089ea:	f88d 2004 	strb.w	r2, [sp, #4]
            LoRaMacMibSetRequestConfirm( &mibReq );
 80089ee:	4668      	mov	r0, sp
 80089f0:	f003 fc30 	bl	800c254 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 80089f4:	2320      	movs	r3, #32
 80089f6:	f88d 3000 	strb.w	r3, [sp]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 80089fa:	4b08      	ldr	r3, [pc, #32]	; (8008a1c <LmHandlerJoin+0xa8>)
 80089fc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008a00:	f88d 3004 	strb.w	r3, [sp, #4]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8008a04:	4668      	mov	r0, sp
 8008a06:	f003 fc25 	bl	800c254 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 8008a0a:	2329      	movs	r3, #41	; 0x29
 8008a0c:	f88d 3000 	strb.w	r3, [sp]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 8008a10:	4b06      	ldr	r3, [pc, #24]	; (8008a2c <LmHandlerJoin+0xb8>)
 8008a12:	9301      	str	r3, [sp, #4]
            LoRaMacMibSetRequestConfirm(&mibReq);
 8008a14:	4668      	mov	r0, sp
 8008a16:	f003 fc1d 	bl	800c254 <LoRaMacMibSetRequestConfirm>
 8008a1a:	e7c4      	b.n	80089a6 <LmHandlerJoin+0x32>
 8008a1c:	20000780 	.word	0x20000780
 8008a20:	20000090 	.word	0x20000090
 8008a24:	2000075e 	.word	0x2000075e
 8008a28:	20000760 	.word	0x20000760
 8008a2c:	01000400 	.word	0x01000400

08008a30 <LmHandlerDeviceTimeReq>:
{
 8008a30:	b500      	push	{lr}
 8008a32:	b087      	sub	sp, #28
    mlmeReq.Type = MLME_DEVICE_TIME;
 8008a34:	2309      	movs	r3, #9
 8008a36:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMlmeRequest( &mlmeReq );
 8008a3a:	a801      	add	r0, sp, #4
 8008a3c:	f003 fe90 	bl	800c760 <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 8008a40:	9a05      	ldr	r2, [sp, #20]
 8008a42:	4b04      	ldr	r3, [pc, #16]	; (8008a54 <LmHandlerDeviceTimeReq+0x24>)
 8008a44:	601a      	str	r2, [r3, #0]
    if( status == LORAMAC_STATUS_OK )
 8008a46:	b910      	cbnz	r0, 8008a4e <LmHandlerDeviceTimeReq+0x1e>
}
 8008a48:	b007      	add	sp, #28
 8008a4a:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 8008a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8008a52:	e7f9      	b.n	8008a48 <LmHandlerDeviceTimeReq+0x18>
 8008a54:	20000760 	.word	0x20000760

08008a58 <LmHandlerGetDutyCycleWaitTime>:
}
 8008a58:	4b01      	ldr	r3, [pc, #4]	; (8008a60 <LmHandlerGetDutyCycleWaitTime+0x8>)
 8008a5a:	6818      	ldr	r0, [r3, #0]
 8008a5c:	4770      	bx	lr
 8008a5e:	bf00      	nop
 8008a60:	20000760 	.word	0x20000760

08008a64 <LmHandlerJoinStatus>:
{
 8008a64:	b500      	push	{lr}
 8008a66:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 8008a6e:	a801      	add	r0, sp, #4
 8008a70:	f003 faa2 	bl	800bfb8 <LoRaMacMibGetRequestConfirm>
    if( status == LORAMAC_STATUS_OK )
 8008a74:	b920      	cbnz	r0, 8008a80 <LmHandlerJoinStatus+0x1c>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 8008a76:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8008a7a:	b110      	cbz	r0, 8008a82 <LmHandlerJoinStatus+0x1e>
            return LORAMAC_HANDLER_SET;
 8008a7c:	2001      	movs	r0, #1
 8008a7e:	e000      	b.n	8008a82 <LmHandlerJoinStatus+0x1e>
        return LORAMAC_HANDLER_RESET;
 8008a80:	2000      	movs	r0, #0
}
 8008a82:	b00b      	add	sp, #44	; 0x2c
 8008a84:	f85d fb04 	ldr.w	pc, [sp], #4

08008a88 <LmHandlerSend>:
{
 8008a88:	b570      	push	{r4, r5, r6, lr}
 8008a8a:	b086      	sub	sp, #24
 8008a8c:	4604      	mov	r4, r0
 8008a8e:	460d      	mov	r5, r1
 8008a90:	4616      	mov	r6, r2
    if (LoRaMacIsBusy() == true)
 8008a92:	f002 ff91 	bl	800b9b8 <LoRaMacIsBusy>
 8008a96:	2800      	cmp	r0, #0
 8008a98:	d164      	bne.n	8008b64 <LmHandlerSend+0xdc>
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 8008a9a:	f7ff ffe3 	bl	8008a64 <LmHandlerJoinStatus>
 8008a9e:	2801      	cmp	r0, #1
 8008aa0:	d137      	bne.n	8008b12 <LmHandlerSend+0x8a>
    TxParams.MsgType = isTxConfirmed;
 8008aa2:	4b33      	ldr	r3, [pc, #204]	; (8008b70 <LmHandlerSend+0xe8>)
 8008aa4:	721d      	strb	r5, [r3, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 8008aa6:	3d00      	subs	r5, #0
 8008aa8:	bf18      	it	ne
 8008aaa:	2501      	movne	r5, #1
 8008aac:	f88d 5004 	strb.w	r5, [sp, #4]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 8008ab0:	4b30      	ldr	r3, [pc, #192]	; (8008b74 <LmHandlerSend+0xec>)
 8008ab2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008ab6:	f88d 3012 	strb.w	r3, [sp, #18]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 8008aba:	4669      	mov	r1, sp
 8008abc:	7860      	ldrb	r0, [r4, #1]
 8008abe:	f003 fa0f 	bl	800bee0 <LoRaMacQueryTxPossible>
 8008ac2:	b370      	cbz	r0, 8008b22 <LmHandlerSend+0x9a>
        mcpsReq.Type = MCPS_UNCONFIRMED;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	f88d 3004 	strb.w	r3, [sp, #4]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 8008aca:	9303      	str	r3, [sp, #12]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 8008acc:	f8ad 3010 	strh.w	r3, [sp, #16]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 8008ad0:	f06f 0506 	mvn.w	r5, #6
    TxParams.AppData = *appData;
 8008ad4:	4b26      	ldr	r3, [pc, #152]	; (8008b70 <LmHandlerSend+0xe8>)
 8008ad6:	f103 0c10 	add.w	ip, r3, #16
 8008ada:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008ade:	e88c 0003 	stmia.w	ip, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 8008ae2:	4a24      	ldr	r2, [pc, #144]	; (8008b74 <LmHandlerSend+0xec>)
 8008ae4:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8008ae8:	729a      	strb	r2, [r3, #10]
    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 8008aea:	4631      	mov	r1, r6
 8008aec:	a801      	add	r0, sp, #4
 8008aee:	f003 ff31 	bl	800c954 <LoRaMacMcpsRequest>
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 8008af2:	9a05      	ldr	r2, [sp, #20]
 8008af4:	4b20      	ldr	r3, [pc, #128]	; (8008b78 <LmHandlerSend+0xf0>)
 8008af6:	601a      	str	r2, [r3, #0]
    switch (status)
 8008af8:	2811      	cmp	r0, #17
 8008afa:	d830      	bhi.n	8008b5e <LmHandlerSend+0xd6>
 8008afc:	e8df f000 	tbb	[pc, r0]
 8008b00:	2f2f1c21 	.word	0x2f2f1c21
 8008b04:	352f2f2f 	.word	0x352f2f2f
 8008b08:	2c2f2f2f 	.word	0x2c2f2f2f
 8008b0c:	1c1c2f2f 	.word	0x1c1c2f2f
 8008b10:	291c      	.short	0x291c
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 8008b12:	4b1a      	ldr	r3, [pc, #104]	; (8008b7c <LmHandlerSend+0xf4>)
 8008b14:	79d9      	ldrb	r1, [r3, #7]
 8008b16:	7998      	ldrb	r0, [r3, #6]
 8008b18:	f7ff ff2c 	bl	8008974 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8008b1c:	f06f 0502 	mvn.w	r5, #2
 8008b20:	e00c      	b.n	8008b3c <LmHandlerSend+0xb4>
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 8008b22:	7823      	ldrb	r3, [r4, #0]
 8008b24:	f88d 3008 	strb.w	r3, [sp, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 8008b28:	7863      	ldrb	r3, [r4, #1]
 8008b2a:	f8ad 3010 	strh.w	r3, [sp, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 8008b2e:	6863      	ldr	r3, [r4, #4]
 8008b30:	9303      	str	r3, [sp, #12]
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 8008b32:	f04f 35ff 	mov.w	r5, #4294967295
 8008b36:	e7cd      	b.n	8008ad4 <LmHandlerSend+0x4c>
    switch (status)
 8008b38:	f06f 0501 	mvn.w	r5, #1
}
 8008b3c:	4628      	mov	r0, r5
 8008b3e:	b006      	add	sp, #24
 8008b40:	bd70      	pop	{r4, r5, r6, pc}
            IsUplinkTxPending = false;
 8008b42:	4b0f      	ldr	r3, [pc, #60]	; (8008b80 <LmHandlerSend+0xf8>)
 8008b44:	2200      	movs	r2, #0
 8008b46:	701a      	strb	r2, [r3, #0]
            if (lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED)
 8008b48:	f115 0f07 	cmn.w	r5, #7
 8008b4c:	d0f6      	beq.n	8008b3c <LmHandlerSend+0xb4>
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 8008b4e:	2500      	movs	r5, #0
 8008b50:	e7f4      	b.n	8008b3c <LmHandlerSend+0xb4>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 8008b52:	f06f 0504 	mvn.w	r5, #4
            break;
 8008b56:	e7f1      	b.n	8008b3c <LmHandlerSend+0xb4>
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 8008b58:	f06f 0505 	mvn.w	r5, #5
            break;
 8008b5c:	e7ee      	b.n	8008b3c <LmHandlerSend+0xb4>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8008b5e:	f04f 35ff 	mov.w	r5, #4294967295
            break;
 8008b62:	e7eb      	b.n	8008b3c <LmHandlerSend+0xb4>
        return LORAMAC_HANDLER_BUSY_ERROR;
 8008b64:	f06f 0501 	mvn.w	r5, #1
 8008b68:	e7e8      	b.n	8008b3c <LmHandlerSend+0xb4>
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8008b6a:	f06f 0502 	mvn.w	r5, #2
 8008b6e:	e7e5      	b.n	8008b3c <LmHandlerSend+0xb4>
 8008b70:	200000ac 	.word	0x200000ac
 8008b74:	20000780 	.word	0x20000780
 8008b78:	20000760 	.word	0x20000760
 8008b7c:	20000090 	.word	0x20000090
 8008b80:	20000764 	.word	0x20000764

08008b84 <LmHandlerProcess>:
{
 8008b84:	b500      	push	{lr}
 8008b86:	b083      	sub	sp, #12
    LoRaMacProcess( );
 8008b88:	f002 ff30 	bl	800b9ec <LoRaMacProcess>
    LmHandlerPackagesProcess( );
 8008b8c:	f7ff fed4 	bl	8008938 <LmHandlerPackagesProcess>
    if( LmHandlerPackageIsTxPending( ) == true )
 8008b90:	f7ff feba 	bl	8008908 <LmHandlerPackageIsTxPending>
 8008b94:	b910      	cbnz	r0, 8008b9c <LmHandlerProcess+0x18>
    if( IsUplinkTxPending == true )
 8008b96:	4b0b      	ldr	r3, [pc, #44]	; (8008bc4 <LmHandlerProcess+0x40>)
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	b913      	cbnz	r3, 8008ba2 <LmHandlerProcess+0x1e>
}
 8008b9c:	b003      	add	sp, #12
 8008b9e:	f85d fb04 	ldr.w	pc, [sp], #4
        LmHandlerAppData_t appData =
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f88d 2000 	strb.w	r2, [sp]
 8008ba8:	f88d 2001 	strb.w	r2, [sp, #1]
 8008bac:	9201      	str	r2, [sp, #4]
        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 8008bae:	4b06      	ldr	r3, [pc, #24]	; (8008bc8 <LmHandlerProcess+0x44>)
 8008bb0:	78d9      	ldrb	r1, [r3, #3]
 8008bb2:	4668      	mov	r0, sp
 8008bb4:	f7ff ff68 	bl	8008a88 <LmHandlerSend>
 8008bb8:	2800      	cmp	r0, #0
 8008bba:	d1ef      	bne.n	8008b9c <LmHandlerProcess+0x18>
            IsUplinkTxPending = false;
 8008bbc:	4b01      	ldr	r3, [pc, #4]	; (8008bc4 <LmHandlerProcess+0x40>)
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	701a      	strb	r2, [r3, #0]
 8008bc2:	e7eb      	b.n	8008b9c <LmHandlerProcess+0x18>
 8008bc4:	20000764 	.word	0x20000764
 8008bc8:	20000780 	.word	0x20000780

08008bcc <LmHandlerRequestClass>:
{
 8008bcc:	b510      	push	{r4, lr}
 8008bce:	b08a      	sub	sp, #40	; 0x28
 8008bd0:	4604      	mov	r4, r0
    if (LoRaMacIsBusy() == true)
 8008bd2:	f002 fef1 	bl	800b9b8 <LoRaMacIsBusy>
 8008bd6:	2800      	cmp	r0, #0
 8008bd8:	d136      	bne.n	8008c48 <LmHandlerRequestClass+0x7c>
    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 8008bda:	f7ff ff43 	bl	8008a64 <LmHandlerJoinStatus>
 8008bde:	2801      	cmp	r0, #1
 8008be0:	d135      	bne.n	8008c4e <LmHandlerRequestClass+0x82>
    mibReq.Type = MIB_DEVICE_CLASS;
 8008be2:	2300      	movs	r3, #0
 8008be4:	f88d 3004 	strb.w	r3, [sp, #4]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8008be8:	a801      	add	r0, sp, #4
 8008bea:	f003 f9e5 	bl	800bfb8 <LoRaMacMibGetRequestConfirm>
 8008bee:	bb88      	cbnz	r0, 8008c54 <LmHandlerRequestClass+0x88>
    currentClass = mibReq.Param.Class;
 8008bf0:	f89d 3008 	ldrb.w	r3, [sp, #8]
    if( currentClass != newClass )
 8008bf4:	42a3      	cmp	r3, r4
 8008bf6:	d030      	beq.n	8008c5a <LmHandlerRequestClass+0x8e>
        switch( newClass )
 8008bf8:	2c01      	cmp	r4, #1
 8008bfa:	d030      	beq.n	8008c5e <LmHandlerRequestClass+0x92>
 8008bfc:	2c02      	cmp	r4, #2
 8008bfe:	d014      	beq.n	8008c2a <LmHandlerRequestClass+0x5e>
 8008c00:	b114      	cbz	r4, 8008c08 <LmHandlerRequestClass+0x3c>
 8008c02:	2000      	movs	r0, #0
}
 8008c04:	b00a      	add	sp, #40	; 0x28
 8008c06:	bd10      	pop	{r4, pc}
                if( currentClass != CLASS_A )
 8008c08:	b90b      	cbnz	r3, 8008c0e <LmHandlerRequestClass+0x42>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8008c0a:	2000      	movs	r0, #0
 8008c0c:	e7fa      	b.n	8008c04 <LmHandlerRequestClass+0x38>
                    mibReq.Param.Class = newClass;
 8008c0e:	f88d 4008 	strb.w	r4, [sp, #8]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8008c12:	a801      	add	r0, sp, #4
 8008c14:	f003 fb1e 	bl	800c254 <LoRaMacMibSetRequestConfirm>
 8008c18:	bb20      	cbnz	r0, 8008c64 <LmHandlerRequestClass+0x98>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 8008c1a:	4b19      	ldr	r3, [pc, #100]	; (8008c80 <LmHandlerRequestClass+0xb4>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c20:	b31b      	cbz	r3, 8008c6a <LmHandlerRequestClass+0x9e>
                            LmHandlerCallbacks->OnClassChange( newClass );
 8008c22:	4620      	mov	r0, r4
 8008c24:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8008c26:	2000      	movs	r0, #0
 8008c28:	e7ec      	b.n	8008c04 <LmHandlerRequestClass+0x38>
                if( currentClass != CLASS_A )
 8008c2a:	bb03      	cbnz	r3, 8008c6e <LmHandlerRequestClass+0xa2>
                    mibReq.Param.Class = newClass;
 8008c2c:	f88d 4008 	strb.w	r4, [sp, #8]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 8008c30:	a801      	add	r0, sp, #4
 8008c32:	f003 fb0f 	bl	800c254 <LoRaMacMibSetRequestConfirm>
 8008c36:	b9e8      	cbnz	r0, 8008c74 <LmHandlerRequestClass+0xa8>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 8008c38:	4b11      	ldr	r3, [pc, #68]	; (8008c80 <LmHandlerRequestClass+0xb4>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c3e:	b1e3      	cbz	r3, 8008c7a <LmHandlerRequestClass+0xae>
                            LmHandlerCallbacks->OnClassChange( newClass );
 8008c40:	4620      	mov	r0, r4
 8008c42:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8008c44:	2000      	movs	r0, #0
 8008c46:	e7dd      	b.n	8008c04 <LmHandlerRequestClass+0x38>
        return LORAMAC_HANDLER_BUSY_ERROR;
 8008c48:	f06f 0001 	mvn.w	r0, #1
 8008c4c:	e7da      	b.n	8008c04 <LmHandlerRequestClass+0x38>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8008c4e:	f06f 0002 	mvn.w	r0, #2
 8008c52:	e7d7      	b.n	8008c04 <LmHandlerRequestClass+0x38>
        return LORAMAC_HANDLER_ERROR;
 8008c54:	f04f 30ff 	mov.w	r0, #4294967295
 8008c58:	e7d4      	b.n	8008c04 <LmHandlerRequestClass+0x38>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8008c5a:	2000      	movs	r0, #0
 8008c5c:	e7d2      	b.n	8008c04 <LmHandlerRequestClass+0x38>
                errorStatus = LORAMAC_HANDLER_ERROR;
 8008c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8008c62:	e7cf      	b.n	8008c04 <LmHandlerRequestClass+0x38>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 8008c64:	f04f 30ff 	mov.w	r0, #4294967295
 8008c68:	e7cc      	b.n	8008c04 <LmHandlerRequestClass+0x38>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8008c6a:	2000      	movs	r0, #0
 8008c6c:	e7ca      	b.n	8008c04 <LmHandlerRequestClass+0x38>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 8008c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8008c72:	e7c7      	b.n	8008c04 <LmHandlerRequestClass+0x38>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 8008c74:	f04f 30ff 	mov.w	r0, #4294967295
 8008c78:	e7c4      	b.n	8008c04 <LmHandlerRequestClass+0x38>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8008c7a:	2000      	movs	r0, #0
 8008c7c:	e7c2      	b.n	8008c04 <LmHandlerRequestClass+0x38>
 8008c7e:	bf00      	nop
 8008c80:	20000768 	.word	0x20000768

08008c84 <LmHandlerGetCurrentClass>:
    if (deviceClass == NULL)
 8008c84:	b170      	cbz	r0, 8008ca4 <LmHandlerGetCurrentClass+0x20>
{
 8008c86:	b510      	push	{r4, lr}
 8008c88:	b08a      	sub	sp, #40	; 0x28
 8008c8a:	4604      	mov	r4, r0
    mibReq.Type = MIB_DEVICE_CLASS;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 8008c92:	a801      	add	r0, sp, #4
 8008c94:	f003 f990 	bl	800bfb8 <LoRaMacMibGetRequestConfirm>
 8008c98:	b938      	cbnz	r0, 8008caa <LmHandlerGetCurrentClass+0x26>
    *deviceClass = mibReq.Param.Class;
 8008c9a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8008c9e:	7023      	strb	r3, [r4, #0]
}
 8008ca0:	b00a      	add	sp, #40	; 0x28
 8008ca2:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8008ca4:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008ca8:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8008caa:	f04f 30ff 	mov.w	r0, #4294967295
 8008cae:	e7f7      	b.n	8008ca0 <LmHandlerGetCurrentClass+0x1c>

08008cb0 <McpsIndication>:
{
 8008cb0:	b530      	push	{r4, r5, lr}
 8008cb2:	b085      	sub	sp, #20
 8008cb4:	460b      	mov	r3, r1
    DeviceClass_t deviceClass = CLASS_A;
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f88d 2007 	strb.w	r2, [sp, #7]
    RxParams.IsMcpsIndication = 1;
 8008cbc:	491d      	ldr	r1, [pc, #116]	; (8008d34 <McpsIndication+0x84>)
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	700a      	strb	r2, [r1, #0]
    RxParams.Status = mcpsIndication->Status;
 8008cc2:	7842      	ldrb	r2, [r0, #1]
 8008cc4:	704a      	strb	r2, [r1, #1]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 8008cc6:	bb5a      	cbnz	r2, 8008d20 <McpsIndication+0x70>
 8008cc8:	4604      	mov	r4, r0
    RxParams.Datarate = mcpsIndication->RxDatarate;
 8008cca:	f990 2004 	ldrsb.w	r2, [r0, #4]
 8008cce:	720a      	strb	r2, [r1, #8]
    RxParams.Rssi = rxStatus->Rssi;
 8008cd0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008cd4:	724a      	strb	r2, [r1, #9]
    RxParams.Snr = rxStatus->Snr;
 8008cd6:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8008cda:	728a      	strb	r2, [r1, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 8008cdc:	78db      	ldrb	r3, [r3, #3]
 8008cde:	740b      	strb	r3, [r1, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 8008ce0:	6903      	ldr	r3, [r0, #16]
 8008ce2:	60cb      	str	r3, [r1, #12]
    appData.Port = mcpsIndication->Port;
 8008ce4:	78c3      	ldrb	r3, [r0, #3]
 8008ce6:	f88d 3008 	strb.w	r3, [sp, #8]
    appData.BufferSize = mcpsIndication->BufferSize;
 8008cea:	7b03      	ldrb	r3, [r0, #12]
 8008cec:	f88d 3009 	strb.w	r3, [sp, #9]
    appData.Buffer = mcpsIndication->Buffer;
 8008cf0:	6883      	ldr	r3, [r0, #8]
 8008cf2:	9303      	str	r3, [sp, #12]
    LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 8008cf4:	4d10      	ldr	r5, [pc, #64]	; (8008d38 <McpsIndication+0x88>)
 8008cf6:	682b      	ldr	r3, [r5, #0]
 8008cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cfa:	a802      	add	r0, sp, #8
 8008cfc:	4798      	blx	r3
    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 8008cfe:	682b      	ldr	r3, [r5, #0]
 8008d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d02:	b113      	cbz	r3, 8008d0a <McpsIndication+0x5a>
 8008d04:	7e22      	ldrb	r2, [r4, #24]
 8008d06:	b102      	cbz	r2, 8008d0a <McpsIndication+0x5a>
        LmHandlerCallbacks->OnSysTimeUpdate( );
 8008d08:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 8008d0a:	4621      	mov	r1, r4
 8008d0c:	2001      	movs	r0, #1
 8008d0e:	f7ff fd73 	bl	80087f8 <LmHandlerPackagesNotify>
    LmHandlerGetCurrentClass( &deviceClass );
 8008d12:	f10d 0007 	add.w	r0, sp, #7
 8008d16:	f7ff ffb5 	bl	8008c84 <LmHandlerGetCurrentClass>
    if ( ( mcpsIndication->FramePending == true ) && ( deviceClass == CLASS_A ) )
 8008d1a:	7963      	ldrb	r3, [r4, #5]
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d001      	beq.n	8008d24 <McpsIndication+0x74>
}
 8008d20:	b005      	add	sp, #20
 8008d22:	bd30      	pop	{r4, r5, pc}
    if ( ( mcpsIndication->FramePending == true ) && ( deviceClass == CLASS_A ) )
 8008d24:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d1f9      	bne.n	8008d20 <McpsIndication+0x70>
        IsUplinkTxPending = true;
 8008d2c:	4b03      	ldr	r3, [pc, #12]	; (8008d3c <McpsIndication+0x8c>)
 8008d2e:	2201      	movs	r2, #1
 8008d30:	701a      	strb	r2, [r3, #0]
 8008d32:	e7f5      	b.n	8008d20 <McpsIndication+0x70>
 8008d34:	20000098 	.word	0x20000098
 8008d38:	20000768 	.word	0x20000768
 8008d3c:	20000764 	.word	0x20000764

08008d40 <LmHandlerGetTxDatarate>:
    if (txDatarate == NULL)
 8008d40:	b180      	cbz	r0, 8008d64 <LmHandlerGetTxDatarate+0x24>
{
 8008d42:	b510      	push	{r4, lr}
 8008d44:	b08a      	sub	sp, #40	; 0x28
 8008d46:	4604      	mov	r4, r0
    mibGet.Type = MIB_CHANNELS_DATARATE;
 8008d48:	2320      	movs	r3, #32
 8008d4a:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 8008d4e:	a801      	add	r0, sp, #4
 8008d50:	f003 f932 	bl	800bfb8 <LoRaMacMibGetRequestConfirm>
 8008d54:	b948      	cbnz	r0, 8008d6a <LmHandlerGetTxDatarate+0x2a>
    *txDatarate = mibGet.Param.ChannelsDatarate;
 8008d56:	f99d 3008 	ldrsb.w	r3, [sp, #8]
 8008d5a:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 8008d5c:	4a04      	ldr	r2, [pc, #16]	; (8008d70 <LmHandlerGetTxDatarate+0x30>)
 8008d5e:	7113      	strb	r3, [r2, #4]
}
 8008d60:	b00a      	add	sp, #40	; 0x28
 8008d62:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8008d64:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008d68:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8008d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d6e:	e7f7      	b.n	8008d60 <LmHandlerGetTxDatarate+0x20>
 8008d70:	20000780 	.word	0x20000780

08008d74 <MlmeConfirm>:
{
 8008d74:	b510      	push	{r4, lr}
 8008d76:	b08a      	sub	sp, #40	; 0x28
 8008d78:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 0;
 8008d7a:	4824      	ldr	r0, [pc, #144]	; (8008e0c <MlmeConfirm+0x98>)
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	7003      	strb	r3, [r0, #0]
    TxParams.Status = mlmeConfirm->Status;
 8008d80:	7863      	ldrb	r3, [r4, #1]
 8008d82:	7043      	strb	r3, [r0, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 8008d84:	4b22      	ldr	r3, [pc, #136]	; (8008e10 <MlmeConfirm+0x9c>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d8a:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 8008d8c:	4621      	mov	r1, r4
 8008d8e:	2002      	movs	r0, #2
 8008d90:	f7ff fd32 	bl	80087f8 <LmHandlerPackagesNotify>
    switch( mlmeConfirm->MlmeRequest )
 8008d94:	7823      	ldrb	r3, [r4, #0]
 8008d96:	2b04      	cmp	r3, #4
 8008d98:	d029      	beq.n	8008dee <MlmeConfirm+0x7a>
 8008d9a:	2b0b      	cmp	r3, #11
 8008d9c:	d02f      	beq.n	8008dfe <MlmeConfirm+0x8a>
 8008d9e:	2b01      	cmp	r3, #1
 8008da0:	d001      	beq.n	8008da6 <MlmeConfirm+0x32>
}
 8008da2:	b00a      	add	sp, #40	; 0x28
 8008da4:	bd10      	pop	{r4, pc}
            mibReq.Type = MIB_DEV_ADDR;
 8008da6:	2306      	movs	r3, #6
 8008da8:	f88d 3004 	strb.w	r3, [sp, #4]
            LoRaMacMibGetRequestConfirm( &mibReq );
 8008dac:	a801      	add	r0, sp, #4
 8008dae:	f003 f903 	bl	800bfb8 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8008db2:	9a02      	ldr	r2, [sp, #8]
 8008db4:	4b17      	ldr	r3, [pc, #92]	; (8008e14 <MlmeConfirm+0xa0>)
 8008db6:	615a      	str	r2, [r3, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 8008db8:	4817      	ldr	r0, [pc, #92]	; (8008e18 <MlmeConfirm+0xa4>)
 8008dba:	f7ff ffc1 	bl	8008d40 <LmHandlerGetTxDatarate>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8008dbe:	7863      	ldrb	r3, [r4, #1]
 8008dc0:	b16b      	cbz	r3, 8008dde <MlmeConfirm+0x6a>
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 8008dc2:	4b16      	ldr	r3, [pc, #88]	; (8008e1c <MlmeConfirm+0xa8>)
 8008dc4:	22ff      	movs	r2, #255	; 0xff
 8008dc6:	715a      	strb	r2, [r3, #5]
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 8008dc8:	4b11      	ldr	r3, [pc, #68]	; (8008e10 <MlmeConfirm+0x9c>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dce:	4813      	ldr	r0, [pc, #76]	; (8008e1c <MlmeConfirm+0xa8>)
 8008dd0:	4798      	blx	r3
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8008dd2:	7863      	ldrb	r3, [r4, #1]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d1e4      	bne.n	8008da2 <MlmeConfirm+0x2e>
                SecureElementPrintSessionKeys();
 8008dd8:	f007 fe72 	bl	8010ac0 <SecureElementPrintSessionKeys>
        break;
 8008ddc:	e7e1      	b.n	8008da2 <MlmeConfirm+0x2e>
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8008dde:	4b0f      	ldr	r3, [pc, #60]	; (8008e1c <MlmeConfirm+0xa8>)
 8008de0:	2200      	movs	r2, #0
 8008de2:	715a      	strb	r2, [r3, #5]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 8008de4:	4b0e      	ldr	r3, [pc, #56]	; (8008e20 <MlmeConfirm+0xac>)
 8008de6:	7858      	ldrb	r0, [r3, #1]
 8008de8:	f7ff fef0 	bl	8008bcc <LmHandlerRequestClass>
 8008dec:	e7ec      	b.n	8008dc8 <MlmeConfirm+0x54>
            RxParams.LinkCheck = true;
 8008dee:	4b0d      	ldr	r3, [pc, #52]	; (8008e24 <MlmeConfirm+0xb0>)
 8008df0:	2201      	movs	r2, #1
 8008df2:	745a      	strb	r2, [r3, #17]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 8008df4:	7a22      	ldrb	r2, [r4, #8]
 8008df6:	749a      	strb	r2, [r3, #18]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 8008df8:	7a62      	ldrb	r2, [r4, #9]
 8008dfa:	74da      	strb	r2, [r3, #19]
        break;
 8008dfc:	e7d1      	b.n	8008da2 <MlmeConfirm+0x2e>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8008dfe:	7863      	ldrb	r3, [r4, #1]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d0ce      	beq.n	8008da2 <MlmeConfirm+0x2e>
                LmHandlerDeviceTimeReq( );
 8008e04:	f7ff fe14 	bl	8008a30 <LmHandlerDeviceTimeReq>
}
 8008e08:	e7cb      	b.n	8008da2 <MlmeConfirm+0x2e>
 8008e0a:	bf00      	nop
 8008e0c:	200000ac 	.word	0x200000ac
 8008e10:	20000768 	.word	0x20000768
 8008e14:	20000078 	.word	0x20000078
 8008e18:	20000094 	.word	0x20000094
 8008e1c:	20000090 	.word	0x20000090
 8008e20:	20000780 	.word	0x20000780
 8008e24:	20000098 	.word	0x20000098

08008e28 <LmHandlerSetSystemMaxRxError>:
{
 8008e28:	b500      	push	{lr}
 8008e2a:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8008e2c:	2323      	movs	r3, #35	; 0x23
 8008e2e:	f88d 3004 	strb.w	r3, [sp, #4]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 8008e32:	9002      	str	r0, [sp, #8]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8008e34:	a801      	add	r0, sp, #4
 8008e36:	f003 fa0d 	bl	800c254 <LoRaMacMibSetRequestConfirm>
 8008e3a:	b910      	cbnz	r0, 8008e42 <LmHandlerSetSystemMaxRxError+0x1a>
}
 8008e3c:	b00b      	add	sp, #44	; 0x2c
 8008e3e:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 8008e42:	f04f 30ff 	mov.w	r0, #4294967295
 8008e46:	e7f9      	b.n	8008e3c <LmHandlerSetSystemMaxRxError+0x14>

08008e48 <LmHandlerConfigure>:
{
 8008e48:	b570      	push	{r4, r5, r6, lr}
 8008e4a:	b090      	sub	sp, #64	; 0x40
 8008e4c:	4601      	mov	r1, r0
    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 8008e4e:	4c78      	ldr	r4, [pc, #480]	; (8009030 <LmHandlerConfigure+0x1e8>)
 8008e50:	2214      	movs	r2, #20
 8008e52:	4620      	mov	r0, r4
 8008e54:	f009 ff5a 	bl	8012d0c <UTIL_MEM_cpy_8>
    IsUplinkTxPending = false;
 8008e58:	4b76      	ldr	r3, [pc, #472]	; (8009034 <LmHandlerConfigure+0x1ec>)
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	701a      	strb	r2, [r3, #0]
    loraInfo = LoraInfo_GetPtr();
 8008e5e:	f7f9 ffab 	bl	8002db8 <LoraInfo_GetPtr>
    if (0U == ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 8008e62:	7822      	ldrb	r2, [r4, #0]
 8008e64:	2301      	movs	r3, #1
 8008e66:	4093      	lsls	r3, r2
 8008e68:	6841      	ldr	r1, [r0, #4]
 8008e6a:	420b      	tst	r3, r1
 8008e6c:	d106      	bne.n	8008e7c <LmHandlerConfigure+0x34>
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 8008e6e:	4b72      	ldr	r3, [pc, #456]	; (8009038 <LmHandlerConfigure+0x1f0>)
 8008e70:	2201      	movs	r2, #1
 8008e72:	2100      	movs	r1, #0
 8008e74:	4608      	mov	r0, r1
 8008e76:	f009 fe33 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 8008e7a:	e7fe      	b.n	8008e7a <LmHandlerConfigure+0x32>
    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 8008e7c:	496f      	ldr	r1, [pc, #444]	; (800903c <LmHandlerConfigure+0x1f4>)
 8008e7e:	4870      	ldr	r0, [pc, #448]	; (8009040 <LmHandlerConfigure+0x1f8>)
 8008e80:	f002 fdfe 	bl	800ba80 <LoRaMacInitialization>
 8008e84:	2800      	cmp	r0, #0
 8008e86:	f040 80cf 	bne.w	8009028 <LmHandlerConfigure+0x1e0>
    mibReq.Type = MIB_NVM_CTXS;
 8008e8a:	2327      	movs	r3, #39	; 0x27
 8008e8c:	f88d 301c 	strb.w	r3, [sp, #28]
    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 8008e90:	a807      	add	r0, sp, #28
 8008e92:	f003 f9df 	bl	800c254 <LoRaMacMibSetRequestConfirm>
 8008e96:	2800      	cmp	r0, #0
 8008e98:	f040 8087 	bne.w	8008faa <LmHandlerConfigure+0x162>
        CtxRestoreDone = true;
 8008e9c:	4b69      	ldr	r3, [pc, #420]	; (8009044 <LmHandlerConfigure+0x1fc>)
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	701a      	strb	r2, [r3, #0]
    if (CtxRestoreDone == true)
 8008ea2:	4b68      	ldr	r3, [pc, #416]	; (8009044 <LmHandlerConfigure+0x1fc>)
 8008ea4:	781b      	ldrb	r3, [r3, #0]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	f000 80a8 	beq.w	8008ffc <LmHandlerConfigure+0x1b4>
        if ( LmHandlerCallbacks->OnNvmDataChange != NULL )
 8008eac:	4b66      	ldr	r3, [pc, #408]	; (8009048 <LmHandlerConfigure+0x200>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	69db      	ldr	r3, [r3, #28]
 8008eb2:	b10b      	cbz	r3, 8008eb8 <LmHandlerConfigure+0x70>
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 8008eb4:	2000      	movs	r0, #0
 8008eb6:	4798      	blx	r3
        mibReq.Type = MIB_DEV_ADDR;
 8008eb8:	2306      	movs	r3, #6
 8008eba:	f88d 301c 	strb.w	r3, [sp, #28]
        LoRaMacMibGetRequestConfirm( &mibReq );
 8008ebe:	a807      	add	r0, sp, #28
 8008ec0:	f003 f87a 	bl	800bfb8 <LoRaMacMibGetRequestConfirm>
        CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8008ec4:	9a08      	ldr	r2, [sp, #32]
 8008ec6:	4b61      	ldr	r3, [pc, #388]	; (800904c <LmHandlerConfigure+0x204>)
 8008ec8:	615a      	str	r2, [r3, #20]
        mibReq.Type = MIB_NVM_CTXS;
 8008eca:	2327      	movs	r3, #39	; 0x27
 8008ecc:	f88d 301c 	strb.w	r3, [sp, #28]
        LoRaMacMibGetRequestConfirm( &mibReq );
 8008ed0:	a807      	add	r0, sp, #28
 8008ed2:	f003 f871 	bl	800bfb8 <LoRaMacMibGetRequestConfirm>
        LmHandlerParams.ActiveRegion = mibReq.Param.Contexts->MacGroup2.Region;
 8008ed6:	9a08      	ldr	r2, [sp, #32]
 8008ed8:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
 8008edc:	4b54      	ldr	r3, [pc, #336]	; (8009030 <LmHandlerConfigure+0x1e8>)
 8008ede:	7019      	strb	r1, [r3, #0]
        LmHandlerParams.DefaultClass = mibReq.Param.Contexts->MacGroup2.DeviceClass;
 8008ee0:	f892 1104 	ldrb.w	r1, [r2, #260]	; 0x104
 8008ee4:	7059      	strb	r1, [r3, #1]
        LmHandlerParams.AdrEnable = mibReq.Param.Contexts->MacGroup2.AdrCtrlOn;
 8008ee6:	f892 2106 	ldrb.w	r2, [r2, #262]	; 0x106
 8008eea:	709a      	strb	r2, [r3, #2]
    mibReq.Type = MIB_DEV_EUI;
 8008eec:	2502      	movs	r5, #2
 8008eee:	f88d 501c 	strb.w	r5, [sp, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8008ef2:	a807      	add	r0, sp, #28
 8008ef4:	f003 f860 	bl	800bfb8 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 8008ef8:	4c54      	ldr	r4, [pc, #336]	; (800904c <LmHandlerConfigure+0x204>)
 8008efa:	2208      	movs	r2, #8
 8008efc:	9908      	ldr	r1, [sp, #32]
 8008efe:	4620      	mov	r0, r4
 8008f00:	f007 ff45 	bl	8010d8e <memcpy1>
    mibReq.Type = MIB_JOIN_EUI;
 8008f04:	2303      	movs	r3, #3
 8008f06:	f88d 301c 	strb.w	r3, [sp, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8008f0a:	a807      	add	r0, sp, #28
 8008f0c:	f003 f854 	bl	800bfb8 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 8008f10:	2208      	movs	r2, #8
 8008f12:	9908      	ldr	r1, [sp, #32]
 8008f14:	18a0      	adds	r0, r4, r2
 8008f16:	f007 ff3a 	bl	8010d8e <memcpy1>
    SecureElementPrintKeys();
 8008f1a:	f007 fd71 	bl	8010a00 <SecureElementPrintKeys>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 8008f1e:	7de3      	ldrb	r3, [r4, #23]
 8008f20:	7da2      	ldrb	r2, [r4, #22]
 8008f22:	7d61      	ldrb	r1, [r4, #21]
 8008f24:	7d20      	ldrb	r0, [r4, #20]
 8008f26:	9003      	str	r0, [sp, #12]
 8008f28:	9102      	str	r1, [sp, #8]
 8008f2a:	9201      	str	r2, [sp, #4]
 8008f2c:	9300      	str	r3, [sp, #0]
 8008f2e:	4b48      	ldr	r3, [pc, #288]	; (8009050 <LmHandlerConfigure+0x208>)
 8008f30:	2200      	movs	r2, #0
 8008f32:	4611      	mov	r1, r2
 8008f34:	4628      	mov	r0, r5
 8008f36:	f009 fdd3 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
    mibReq.Type = MIB_PUBLIC_NETWORK;
 8008f3a:	260f      	movs	r6, #15
 8008f3c:	f88d 601c 	strb.w	r6, [sp, #28]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 8008f40:	2301      	movs	r3, #1
 8008f42:	f88d 3020 	strb.w	r3, [sp, #32]
    LoRaMacMibSetRequestConfirm(&mibReq);
 8008f46:	a807      	add	r0, sp, #28
 8008f48:	f003 f984 	bl	800c254 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_REPEATER_SUPPORT;
 8008f4c:	2310      	movs	r3, #16
 8008f4e:	f88d 301c 	strb.w	r3, [sp, #28]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 8008f52:	2500      	movs	r5, #0
 8008f54:	f88d 5020 	strb.w	r5, [sp, #32]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8008f58:	a807      	add	r0, sp, #28
 8008f5a:	f003 f97b 	bl	800c254 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ADR;
 8008f5e:	2304      	movs	r3, #4
 8008f60:	f88d 301c 	strb.w	r3, [sp, #28]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 8008f64:	4c32      	ldr	r4, [pc, #200]	; (8009030 <LmHandlerConfigure+0x1e8>)
 8008f66:	78a3      	ldrb	r3, [r4, #2]
 8008f68:	f88d 3020 	strb.w	r3, [sp, #32]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8008f6c:	a807      	add	r0, sp, #28
 8008f6e:	f003 f971 	bl	800c254 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_RXB_C_TIMEOUT;
 8008f72:	2338      	movs	r3, #56	; 0x38
 8008f74:	f88d 301c 	strb.w	r3, [sp, #28]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 8008f78:	6923      	ldr	r3, [r4, #16]
 8008f7a:	9308      	str	r3, [sp, #32]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8008f7c:	a807      	add	r0, sp, #28
 8008f7e:	f003 f969 	bl	800c254 <LoRaMacMibSetRequestConfirm>
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8008f82:	f88d 6014 	strb.w	r6, [sp, #20]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 8008f86:	a905      	add	r1, sp, #20
 8008f88:	7820      	ldrb	r0, [r4, #0]
 8008f8a:	f004 fe6d 	bl	800dc68 <RegionGetPhyParam>
 8008f8e:	9004      	str	r0, [sp, #16]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 8008f90:	1b43      	subs	r3, r0, r5
 8008f92:	bf18      	it	ne
 8008f94:	2301      	movne	r3, #1
 8008f96:	71a3      	strb	r3, [r4, #6]
    LmHandlerSetSystemMaxRxError( 20 );
 8008f98:	2014      	movs	r0, #20
 8008f9a:	f7ff ff45 	bl	8008e28 <LmHandlerSetSystemMaxRxError>
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 8008f9e:	79a0      	ldrb	r0, [r4, #6]
 8008fa0:	f003 fdc6 	bl	800cb30 <LoRaMacTestSetDutyCycleOn>
    return LORAMAC_HANDLER_SUCCESS;
 8008fa4:	4628      	mov	r0, r5
}
 8008fa6:	b010      	add	sp, #64	; 0x40
 8008fa8:	bd70      	pop	{r4, r5, r6, pc}
        mibReq.Type = MIB_NVM_BKP_CTXS;
 8008faa:	2328      	movs	r3, #40	; 0x28
 8008fac:	f88d 301c 	strb.w	r3, [sp, #28]
        if (LmHandlerCallbacks->OnRestoreContextRequest != NULL)
 8008fb0:	4b25      	ldr	r3, [pc, #148]	; (8009048 <LmHandlerConfigure+0x200>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	691b      	ldr	r3, [r3, #16]
 8008fb6:	b14b      	cbz	r3, 8008fcc <LmHandlerConfigure+0x184>
            LoRaMacMibGetRequestConfirm( &mibReq );
 8008fb8:	a807      	add	r0, sp, #28
 8008fba:	f002 fffd 	bl	800bfb8 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest(mibReq.Param.BackupContexts, sizeof(LoRaMacNvmData_t));
 8008fbe:	4b22      	ldr	r3, [pc, #136]	; (8009048 <LmHandlerConfigure+0x200>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	691b      	ldr	r3, [r3, #16]
 8008fc4:	f240 518c 	movw	r1, #1420	; 0x58c
 8008fc8:	9808      	ldr	r0, [sp, #32]
 8008fca:	4798      	blx	r3
        mibReq.Type = MIB_NVM_CTXS;
 8008fcc:	2327      	movs	r3, #39	; 0x27
 8008fce:	f88d 301c 	strb.w	r3, [sp, #28]
        if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 8008fd2:	a807      	add	r0, sp, #28
 8008fd4:	f003 f93e 	bl	800c254 <LoRaMacMibSetRequestConfirm>
 8008fd8:	2800      	cmp	r0, #0
 8008fda:	f47f af62 	bne.w	8008ea2 <LmHandlerConfigure+0x5a>
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	f88d 301c 	strb.w	r3, [sp, #28]
            LoRaMacMibGetRequestConfirm( &mibReq );
 8008fe4:	a807      	add	r0, sp, #28
 8008fe6:	f002 ffe7 	bl	800bfb8 <LoRaMacMibGetRequestConfirm>
            if (mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE)
 8008fea:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	f43f af57 	beq.w	8008ea2 <LmHandlerConfigure+0x5a>
                CtxRestoreDone = true;
 8008ff4:	4b13      	ldr	r3, [pc, #76]	; (8009044 <LmHandlerConfigure+0x1fc>)
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	701a      	strb	r2, [r3, #0]
 8008ffa:	e752      	b.n	8008ea2 <LmHandlerConfigure+0x5a>
        mibReq.Type = MIB_NET_ID;
 8008ffc:	2305      	movs	r3, #5
 8008ffe:	f88d 301c 	strb.w	r3, [sp, #28]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 8009002:	2300      	movs	r3, #0
 8009004:	9308      	str	r3, [sp, #32]
        LoRaMacMibSetRequestConfirm(&mibReq);
 8009006:	a807      	add	r0, sp, #28
 8009008:	f003 f924 	bl	800c254 <LoRaMacMibSetRequestConfirm>
        CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800900c:	4b0e      	ldr	r3, [pc, #56]	; (8009048 <LmHandlerConfigure+0x200>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	68db      	ldr	r3, [r3, #12]
 8009012:	4798      	blx	r3
 8009014:	4b0d      	ldr	r3, [pc, #52]	; (800904c <LmHandlerConfigure+0x204>)
 8009016:	6158      	str	r0, [r3, #20]
        mibReq.Type = MIB_DEV_ADDR;
 8009018:	2306      	movs	r3, #6
 800901a:	f88d 301c 	strb.w	r3, [sp, #28]
        mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800901e:	9008      	str	r0, [sp, #32]
        LoRaMacMibSetRequestConfirm(&mibReq);
 8009020:	a807      	add	r0, sp, #28
 8009022:	f003 f917 	bl	800c254 <LoRaMacMibSetRequestConfirm>
 8009026:	e761      	b.n	8008eec <LmHandlerConfigure+0xa4>
        return LORAMAC_HANDLER_ERROR;
 8009028:	f04f 30ff 	mov.w	r0, #4294967295
 800902c:	e7bb      	b.n	8008fa6 <LmHandlerConfigure+0x15e>
 800902e:	bf00      	nop
 8009030:	20000780 	.word	0x20000780
 8009034:	20000764 	.word	0x20000764
 8009038:	080147a4 	.word	0x080147a4
 800903c:	200007a4 	.word	0x200007a4
 8009040:	200007b8 	.word	0x200007b8
 8009044:	2000075e 	.word	0x2000075e
 8009048:	20000768 	.word	0x20000768
 800904c:	20000078 	.word	0x20000078
 8009050:	080147f0 	.word	0x080147f0

08009054 <LmHandlerPackageRegister>:
    switch( id )
 8009054:	b9f0      	cbnz	r0, 8009094 <LmHandlerPackageRegister+0x40>
{
 8009056:	b538      	push	{r3, r4, r5, lr}
 8009058:	460c      	mov	r4, r1
 800905a:	4605      	mov	r5, r0
            package = LmhpCompliancePackageFactory( );
 800905c:	f000 fb76 	bl	800974c <LmhpCompliancePackageFactory>
    if( package != NULL )
 8009060:	b1a8      	cbz	r0, 800908e <LmHandlerPackageRegister+0x3a>
        LmHandlerPackages[id] = package;
 8009062:	4a0e      	ldr	r2, [pc, #56]	; (800909c <LmHandlerPackageRegister+0x48>)
 8009064:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 8009068:	4a0d      	ldr	r2, [pc, #52]	; (80090a0 <LmHandlerPackageRegister+0x4c>)
 800906a:	6282      	str	r2, [r0, #40]	; 0x28
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 800906c:	4a0d      	ldr	r2, [pc, #52]	; (80090a4 <LmHandlerPackageRegister+0x50>)
 800906e:	6812      	ldr	r2, [r2, #0]
 8009070:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8009072:	6301      	str	r1, [r0, #48]	; 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 8009074:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8009076:	6341      	str	r1, [r0, #52]	; 0x34
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 8009078:	490b      	ldr	r1, [pc, #44]	; (80090a8 <LmHandlerPackageRegister+0x54>)
 800907a:	62c1      	str	r1, [r0, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800907c:	6992      	ldr	r2, [r2, #24]
 800907e:	6142      	str	r2, [r0, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 8009080:	6843      	ldr	r3, [r0, #4]
 8009082:	22f2      	movs	r2, #242	; 0xf2
 8009084:	4909      	ldr	r1, [pc, #36]	; (80090ac <LmHandlerPackageRegister+0x58>)
 8009086:	4620      	mov	r0, r4
 8009088:	4798      	blx	r3
        return LORAMAC_HANDLER_SUCCESS;
 800908a:	2000      	movs	r0, #0
}
 800908c:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_HANDLER_ERROR;
 800908e:	f04f 30ff 	mov.w	r0, #4294967295
 8009092:	e7fb      	b.n	800908c <LmHandlerPackageRegister+0x38>
 8009094:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009098:	4770      	bx	lr
 800909a:	bf00      	nop
 800909c:	2000076c 	.word	0x2000076c
 80090a0:	08008975 	.word	0x08008975
 80090a4:	20000768 	.word	0x20000768
 80090a8:	08008a31 	.word	0x08008a31
 80090ac:	2000066c 	.word	0x2000066c

080090b0 <LmHandlerInit>:
{
 80090b0:	b508      	push	{r3, lr}
    LmHandlerCallbacks = handlerCallbacks;
 80090b2:	4b13      	ldr	r3, [pc, #76]	; (8009100 <LmHandlerInit+0x50>)
 80090b4:	6018      	str	r0, [r3, #0]
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 80090b6:	4b13      	ldr	r3, [pc, #76]	; (8009104 <LmHandlerInit+0x54>)
 80090b8:	4a13      	ldr	r2, [pc, #76]	; (8009108 <LmHandlerInit+0x58>)
 80090ba:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 80090bc:	4a13      	ldr	r2, [pc, #76]	; (800910c <LmHandlerInit+0x5c>)
 80090be:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 80090c0:	4a13      	ldr	r2, [pc, #76]	; (8009110 <LmHandlerInit+0x60>)
 80090c2:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 80090c4:	4a13      	ldr	r2, [pc, #76]	; (8009114 <LmHandlerInit+0x64>)
 80090c6:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 80090c8:	6802      	ldr	r2, [r0, #0]
 80090ca:	4b13      	ldr	r3, [pc, #76]	; (8009118 <LmHandlerInit+0x68>)
 80090cc:	601a      	str	r2, [r3, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 80090ce:	6842      	ldr	r2, [r0, #4]
 80090d0:	605a      	str	r2, [r3, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 80090d2:	6882      	ldr	r2, [r0, #8]
 80090d4:	609a      	str	r2, [r3, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 80090d6:	4a11      	ldr	r2, [pc, #68]	; (800911c <LmHandlerInit+0x6c>)
 80090d8:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 80090da:	6982      	ldr	r2, [r0, #24]
 80090dc:	611a      	str	r2, [r3, #16]
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 80090de:	4b10      	ldr	r3, [pc, #64]	; (8009120 <LmHandlerInit+0x70>)
 80090e0:	6019      	str	r1, [r3, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 80090e2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80090e4:	605a      	str	r2, [r3, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerCallbacks->OnTxFrameCtrlChanged;
 80090e6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80090e8:	609a      	str	r2, [r3, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerCallbacks->OnPingSlotPeriodicityChanged;
 80090ea:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80090ec:	60da      	str	r2, [r3, #12]
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 80090ee:	4619      	mov	r1, r3
 80090f0:	2000      	movs	r0, #0
 80090f2:	f7ff ffaf 	bl	8009054 <LmHandlerPackageRegister>
 80090f6:	b900      	cbnz	r0, 80090fa <LmHandlerInit+0x4a>
}
 80090f8:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_ERROR;
 80090fa:	f04f 30ff 	mov.w	r0, #4294967295
 80090fe:	e7fb      	b.n	80090f8 <LmHandlerInit+0x48>
 8009100:	20000768 	.word	0x20000768
 8009104:	200007b8 	.word	0x200007b8
 8009108:	080088c9 	.word	0x080088c9
 800910c:	08008cb1 	.word	0x08008cb1
 8009110:	08008d75 	.word	0x08008d75
 8009114:	08008865 	.word	0x08008865
 8009118:	200007a4 	.word	0x200007a4
 800911c:	0800dc11 	.word	0x0800dc11
 8009120:	20000794 	.word	0x20000794

08009124 <LmHandlerGetVersion>:
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion(LmHandlerVersionType_t lmhType, uint32_t *featureVersion)
{
    if (featureVersion == NULL)
 8009124:	b161      	cbz	r1, 8009140 <LmHandlerGetVersion+0x1c>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    switch(lmhType)
 8009126:	b118      	cbz	r0, 8009130 <LmHandlerGetVersion+0xc>
 8009128:	2801      	cmp	r0, #1
 800912a:	d005      	beq.n	8009138 <LmHandlerGetVersion+0x14>
 800912c:	2000      	movs	r0, #0
 800912e:	4770      	bx	lr
    {
        case LORAMAC_HANDLER_L2_VERSION:
            *featureVersion = LORAMAC_VERSION;
 8009130:	4a05      	ldr	r2, [pc, #20]	; (8009148 <LmHandlerGetVersion+0x24>)
 8009132:	600a      	str	r2, [r1, #0]
            break;
        default:
          break;
    }

    return LORAMAC_HANDLER_SUCCESS;
 8009134:	2000      	movs	r0, #0
            break;
 8009136:	4770      	bx	lr
            *featureVersion = REGION_VERSION;
 8009138:	4a04      	ldr	r2, [pc, #16]	; (800914c <LmHandlerGetVersion+0x28>)
 800913a:	600a      	str	r2, [r1, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800913c:	2000      	movs	r0, #0
            break;
 800913e:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8009140:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009144:	4770      	bx	lr
 8009146:	bf00      	nop
 8009148:	01000400 	.word	0x01000400
 800914c:	02010001 	.word	0x02010001

08009150 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop(void)
{
 8009150:	b508      	push	{r3, lr}
    if (LoRaMacDeInitialization() == LORAMAC_STATUS_OK)
 8009152:	f003 fd01 	bl	800cb58 <LoRaMacDeInitialization>
 8009156:	b900      	cbnz	r0, 800915a <LmHandlerStop+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 8009158:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 800915a:	f06f 0001 	mvn.w	r0, #1
 800915e:	e7fb      	b.n	8009158 <LmHandlerStop+0x8>

08009160 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt(void)
{
 8009160:	b508      	push	{r3, lr}
    if (LoRaMacHalt() == LORAMAC_STATUS_OK)
 8009162:	f002 fe8b 	bl	800be7c <LoRaMacHalt>
 8009166:	b900      	cbnz	r0, 800916a <LmHandlerHalt+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 8009168:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 800916a:	f06f 0001 	mvn.w	r0, #1
 800916e:	e7fb      	b.n	8009168 <LmHandlerHalt+0x8>

08009170 <LmHandlerNvmDataStore>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 8009170:	b510      	push	{r4, lr}
 8009172:	b08a      	sub	sp, #40	; 0x28
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
    int32_t status = NVM_DATA_OK;

    lmhStatus = LmHandlerHalt();
 8009174:	f7ff fff4 	bl	8009160 <LmHandlerHalt>

    if (lmhStatus == LORAMAC_HANDLER_SUCCESS)
 8009178:	4604      	mov	r4, r0
 800917a:	b148      	cbz	r0, 8009190 <LmHandlerNvmDataStore+0x20>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
        }
    }

    if ((lmhStatus == LORAMAC_HANDLER_SUCCESS) && (LmHandlerCallbacks->OnNvmDataChange != NULL ))
 800917c:	b92c      	cbnz	r4, 800918a <LmHandlerNvmDataStore+0x1a>
 800917e:	4b18      	ldr	r3, [pc, #96]	; (80091e0 <LmHandlerNvmDataStore+0x70>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	69db      	ldr	r3, [r3, #28]
 8009184:	b10b      	cbz	r3, 800918a <LmHandlerNvmDataStore+0x1a>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 8009186:	2001      	movs	r0, #1
 8009188:	4798      	blx	r3
    }

    return lmhStatus;
}
 800918a:	4620      	mov	r0, r4
 800918c:	b00a      	add	sp, #40	; 0x28
 800918e:	bd10      	pop	{r4, pc}
        status = NvmDataMgmtStoreBegin();
 8009190:	f004 fd46 	bl	800dc20 <NvmDataMgmtStoreBegin>
        if (status == NVM_DATA_NO_UPDATED_DATA)
 8009194:	f110 0f02 	cmn.w	r0, #2
 8009198:	d012      	beq.n	80091c0 <LmHandlerNvmDataStore+0x50>
        else if (( status != NVM_DATA_OK ) || (LmHandlerCallbacks->OnStoreContextRequest == NULL))
 800919a:	b9d0      	cbnz	r0, 80091d2 <LmHandlerNvmDataStore+0x62>
 800919c:	4b10      	ldr	r3, [pc, #64]	; (80091e0 <LmHandlerNvmDataStore+0x70>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	695b      	ldr	r3, [r3, #20]
 80091a2:	b1cb      	cbz	r3, 80091d8 <LmHandlerNvmDataStore+0x68>
          mibReq.Type = MIB_NVM_CTXS;
 80091a4:	2327      	movs	r3, #39	; 0x27
 80091a6:	f88d 3004 	strb.w	r3, [sp, #4]
          LoRaMacMibGetRequestConfirm( &mibReq );
 80091aa:	a801      	add	r0, sp, #4
 80091ac:	f002 ff04 	bl	800bfb8 <LoRaMacMibGetRequestConfirm>
          LmHandlerCallbacks->OnStoreContextRequest(nvm, nvm_size);
 80091b0:	4b0b      	ldr	r3, [pc, #44]	; (80091e0 <LmHandlerNvmDataStore+0x70>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	695b      	ldr	r3, [r3, #20]
 80091b6:	f44f 61b2 	mov.w	r1, #1424	; 0x590
 80091ba:	9802      	ldr	r0, [sp, #8]
 80091bc:	4798      	blx	r3
 80091be:	e001      	b.n	80091c4 <LmHandlerNvmDataStore+0x54>
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 80091c0:	f06f 0407 	mvn.w	r4, #7
        if ( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 80091c4:	f004 fd3c 	bl	800dc40 <NvmDataMgmtStoreEnd>
 80091c8:	2800      	cmp	r0, #0
 80091ca:	d0d7      	beq.n	800917c <LmHandlerNvmDataStore+0xc>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 80091cc:	f04f 34ff 	mov.w	r4, #4294967295
 80091d0:	e7db      	b.n	800918a <LmHandlerNvmDataStore+0x1a>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 80091d2:	f04f 34ff 	mov.w	r4, #4294967295
 80091d6:	e7f5      	b.n	80091c4 <LmHandlerNvmDataStore+0x54>
 80091d8:	f04f 34ff 	mov.w	r4, #4294967295
 80091dc:	e7f2      	b.n	80091c4 <LmHandlerNvmDataStore+0x54>
 80091de:	bf00      	nop
 80091e0:	20000768 	.word	0x20000768

080091e4 <LmhpComplianceIsInitialized>:
}

static bool LmhpComplianceIsInitialized( void )
{
    return ComplianceTestState.Initialized;
}
 80091e4:	4b01      	ldr	r3, [pc, #4]	; (80091ec <LmhpComplianceIsInitialized+0x8>)
 80091e6:	7818      	ldrb	r0, [r3, #0]
 80091e8:	4770      	bx	lr
 80091ea:	bf00      	nop
 80091ec:	200007cc 	.word	0x200007cc

080091f0 <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
    return ComplianceTestState.IsTxPending;
}
 80091f0:	4b01      	ldr	r3, [pc, #4]	; (80091f8 <LmhpComplianceIsTxPending+0x8>)
 80091f2:	7858      	ldrb	r0, [r3, #1]
 80091f4:	4770      	bx	lr
 80091f6:	bf00      	nop
 80091f8:	200007cc 	.word	0x200007cc

080091fc <LmhpComplianceOnMlmeConfirm>:
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
    }
}
 80091fc:	4770      	bx	lr

080091fe <LmhpComplianceOnMlmeIndication>:
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
    }
}
 80091fe:	4770      	bx	lr

08009200 <OnProcessTimer>:
}
#endif
/* ST_WORKAROUND_END */

static void OnProcessTimer( void *context )
{
 8009200:	b508      	push	{r3, lr}
    ComplianceTestState.IsTxPending = true;
 8009202:	4b03      	ldr	r3, [pc, #12]	; (8009210 <OnProcessTimer+0x10>)
 8009204:	2201      	movs	r2, #1
 8009206:	705a      	strb	r2, [r3, #1]
    CompliancePackage.OnPackageProcessEvent();
 8009208:	4b02      	ldr	r3, [pc, #8]	; (8009214 <OnProcessTimer+0x14>)
 800920a:	695b      	ldr	r3, [r3, #20]
 800920c:	4798      	blx	r3
}
 800920e:	bd08      	pop	{r3, pc}
 8009210:	200007cc 	.word	0x200007cc
 8009214:	200000c8 	.word	0x200000c8

08009218 <LmhpComplianceOnMcpsIndication>:
    if( ComplianceTestState.Initialized == false )
 8009218:	4b8d      	ldr	r3, [pc, #564]	; (8009450 <LmhpComplianceOnMcpsIndication+0x238>)
 800921a:	781b      	ldrb	r3, [r3, #0]
 800921c:	2b00      	cmp	r3, #0
 800921e:	f000 81fd 	beq.w	800961c <LmhpComplianceOnMcpsIndication+0x404>
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 8009222:	78c3      	ldrb	r3, [r0, #3]
 8009224:	b90b      	cbnz	r3, 800922a <LmhpComplianceOnMcpsIndication+0x12>
 8009226:	7b83      	ldrb	r3, [r0, #14]
 8009228:	b11b      	cbz	r3, 8009232 <LmhpComplianceOnMcpsIndication+0x1a>
        ComplianceTestState.RxAppCnt++;
 800922a:	4a89      	ldr	r2, [pc, #548]	; (8009450 <LmhpComplianceOnMcpsIndication+0x238>)
 800922c:	8a13      	ldrh	r3, [r2, #16]
 800922e:	3301      	adds	r3, #1
 8009230:	8213      	strh	r3, [r2, #16]
    if( mcpsIndication->RxData == false )
 8009232:	7b43      	ldrb	r3, [r0, #13]
 8009234:	2b00      	cmp	r3, #0
 8009236:	f000 81f1 	beq.w	800961c <LmhpComplianceOnMcpsIndication+0x404>
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800923a:	78c3      	ldrb	r3, [r0, #3]
 800923c:	2be0      	cmp	r3, #224	; 0xe0
 800923e:	f040 81ed 	bne.w	800961c <LmhpComplianceOnMcpsIndication+0x404>
{
 8009242:	b570      	push	{r4, r5, r6, lr}
 8009244:	b094      	sub	sp, #80	; 0x50
    ComplianceTestState.DataBufferSize = 0;
 8009246:	4b82      	ldr	r3, [pc, #520]	; (8009450 <LmhpComplianceOnMcpsIndication+0x238>)
 8009248:	2200      	movs	r2, #0
 800924a:	729a      	strb	r2, [r3, #10]
    switch( mcpsIndication->Buffer[cmdIndex++] )
 800924c:	6884      	ldr	r4, [r0, #8]
 800924e:	7823      	ldrb	r3, [r4, #0]
 8009250:	2b7f      	cmp	r3, #127	; 0x7f
 8009252:	f200 8093 	bhi.w	800937c <LmhpComplianceOnMcpsIndication+0x164>
 8009256:	e8df f013 	tbh	[pc, r3, lsl #1]
 800925a:	0080      	.short	0x0080
 800925c:	00a600a1 	.word	0x00a600a1
 8009260:	00b400ac 	.word	0x00b400ac
 8009264:	00c800c1 	.word	0x00c800c1
 8009268:	00f200e1 	.word	0x00f200e1
 800926c:	0133011f 	.word	0x0133011f
 8009270:	00910091 	.word	0x00910091
 8009274:	00910091 	.word	0x00910091
 8009278:	00910091 	.word	0x00910091
 800927c:	00910091 	.word	0x00910091
 8009280:	00910091 	.word	0x00910091
 8009284:	00910091 	.word	0x00910091
 8009288:	00910091 	.word	0x00910091
 800928c:	00910091 	.word	0x00910091
 8009290:	00910091 	.word	0x00910091
 8009294:	00910091 	.word	0x00910091
 8009298:	01370091 	.word	0x01370091
 800929c:	0142013e 	.word	0x0142013e
 80092a0:	00910091 	.word	0x00910091
 80092a4:	00910091 	.word	0x00910091
 80092a8:	00910091 	.word	0x00910091
 80092ac:	00910091 	.word	0x00910091
 80092b0:	00910091 	.word	0x00910091
 80092b4:	00910091 	.word	0x00910091
 80092b8:	00910091 	.word	0x00910091
 80092bc:	00910091 	.word	0x00910091
 80092c0:	00910091 	.word	0x00910091
 80092c4:	00910091 	.word	0x00910091
 80092c8:	00910091 	.word	0x00910091
 80092cc:	00910091 	.word	0x00910091
 80092d0:	00910091 	.word	0x00910091
 80092d4:	00910091 	.word	0x00910091
 80092d8:	00910091 	.word	0x00910091
 80092dc:	00910091 	.word	0x00910091
 80092e0:	00910091 	.word	0x00910091
 80092e4:	00910091 	.word	0x00910091
 80092e8:	00910091 	.word	0x00910091
 80092ec:	00910091 	.word	0x00910091
 80092f0:	00910091 	.word	0x00910091
 80092f4:	00910091 	.word	0x00910091
 80092f8:	00910091 	.word	0x00910091
 80092fc:	00910091 	.word	0x00910091
 8009300:	00910091 	.word	0x00910091
 8009304:	00910091 	.word	0x00910091
 8009308:	00910091 	.word	0x00910091
 800930c:	00910091 	.word	0x00910091
 8009310:	00910091 	.word	0x00910091
 8009314:	00910091 	.word	0x00910091
 8009318:	00910091 	.word	0x00910091
 800931c:	00910091 	.word	0x00910091
 8009320:	00910091 	.word	0x00910091
 8009324:	00910091 	.word	0x00910091
 8009328:	00910091 	.word	0x00910091
 800932c:	00910091 	.word	0x00910091
 8009330:	00910091 	.word	0x00910091
 8009334:	00910091 	.word	0x00910091
 8009338:	00910091 	.word	0x00910091
 800933c:	00910091 	.word	0x00910091
 8009340:	00910091 	.word	0x00910091
 8009344:	00910091 	.word	0x00910091
 8009348:	00910091 	.word	0x00910091
 800934c:	00910091 	.word	0x00910091
 8009350:	00910091 	.word	0x00910091
 8009354:	016e014d 	.word	0x016e014d
 8009358:	017c      	.short	0x017c
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 800935a:	4b3d      	ldr	r3, [pc, #244]	; (8009450 <LmhpComplianceOnMcpsIndication+0x238>)
 800935c:	68da      	ldr	r2, [r3, #12]
 800935e:	2101      	movs	r1, #1
 8009360:	7299      	strb	r1, [r3, #10]
 8009362:	2000      	movs	r0, #0
 8009364:	7010      	strb	r0, [r2, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 8009366:	68d8      	ldr	r0, [r3, #12]
 8009368:	7a9a      	ldrb	r2, [r3, #10]
 800936a:	1854      	adds	r4, r2, r1
 800936c:	729c      	strb	r4, [r3, #10]
 800936e:	2406      	movs	r4, #6
 8009370:	5484      	strb	r4, [r0, r2]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 8009372:	68d8      	ldr	r0, [r3, #12]
 8009374:	7a9a      	ldrb	r2, [r3, #10]
 8009376:	1854      	adds	r4, r2, r1
 8009378:	729c      	strb	r4, [r3, #10]
 800937a:	5481      	strb	r1, [r0, r2]
    if( ComplianceTestState.DataBufferSize != 0 )
 800937c:	4b34      	ldr	r3, [pc, #208]	; (8009450 <LmhpComplianceOnMcpsIndication+0x238>)
 800937e:	7a9b      	ldrb	r3, [r3, #10]
 8009380:	2b00      	cmp	r3, #0
 8009382:	f000 8144 	beq.w	800960e <LmhpComplianceOnMcpsIndication+0x3f6>
        TimerSetValue( &ProcessTimer, 1000 );
 8009386:	4c33      	ldr	r4, [pc, #204]	; (8009454 <LmhpComplianceOnMcpsIndication+0x23c>)
 8009388:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800938c:	4620      	mov	r0, r4
 800938e:	f009 ff9b 	bl	80132c8 <UTIL_TIMER_SetPeriod>
        TimerStart(&ProcessTimer);
 8009392:	4620      	mov	r0, r4
 8009394:	f009 ff52 	bl	801323c <UTIL_TIMER_Start>
}
 8009398:	b014      	add	sp, #80	; 0x50
 800939a:	bd70      	pop	{r4, r5, r6, pc}
        ComplianceTestState.IsResetCmdPending = true;
 800939c:	4b2c      	ldr	r3, [pc, #176]	; (8009450 <LmhpComplianceOnMcpsIndication+0x238>)
 800939e:	2201      	movs	r2, #1
 80093a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        break;
 80093a4:	e7ea      	b.n	800937c <LmhpComplianceOnMcpsIndication+0x164>
        CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 80093a6:	4b2c      	ldr	r3, [pc, #176]	; (8009458 <LmhpComplianceOnMcpsIndication+0x240>)
 80093a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093aa:	2101      	movs	r1, #1
 80093ac:	2002      	movs	r0, #2
 80093ae:	4798      	blx	r3
        break;
 80093b0:	e7e4      	b.n	800937c <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 80093b2:	7862      	ldrb	r2, [r4, #1]
 80093b4:	4b26      	ldr	r3, [pc, #152]	; (8009450 <LmhpComplianceOnMcpsIndication+0x238>)
 80093b6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
        ComplianceTestState.IsClassReqCmdPending = true;
 80093ba:	2201      	movs	r2, #1
 80093bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        break;
 80093c0:	e7dc      	b.n	800937c <LmhpComplianceOnMcpsIndication+0x164>
        mibReq.Type            = MIB_ADR;
 80093c2:	2304      	movs	r3, #4
 80093c4:	f88d 3000 	strb.w	r3, [sp]
        mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 80093c8:	7863      	ldrb	r3, [r4, #1]
 80093ca:	3b00      	subs	r3, #0
 80093cc:	bf18      	it	ne
 80093ce:	2301      	movne	r3, #1
 80093d0:	f88d 3004 	strb.w	r3, [sp, #4]
        LoRaMacMibSetRequestConfirm( &mibReq );
 80093d4:	4668      	mov	r0, sp
 80093d6:	f002 ff3d 	bl	800c254 <LoRaMacMibSetRequestConfirm>
        break;
 80093da:	e7cf      	b.n	800937c <LmhpComplianceOnMcpsIndication+0x164>
        LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 80093dc:	7860      	ldrb	r0, [r4, #1]
 80093de:	3800      	subs	r0, #0
 80093e0:	bf18      	it	ne
 80093e2:	2001      	movne	r0, #1
 80093e4:	f003 fba4 	bl	800cb30 <LoRaMacTestSetDutyCycleOn>
        break;
 80093e8:	e7c8      	b.n	800937c <LmhpComplianceOnMcpsIndication+0x164>
        uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 80093ea:	466d      	mov	r5, sp
 80093ec:	4e1b      	ldr	r6, [pc, #108]	; (800945c <LmhpComplianceOnMcpsIndication+0x244>)
 80093ee:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80093f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80093f2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80093f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80093f6:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80093fa:	e885 0007 	stmia.w	r5, {r0, r1, r2}
        uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 80093fe:	7863      	ldrb	r3, [r4, #1]
        if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 8009400:	2b0a      	cmp	r3, #10
 8009402:	d8bb      	bhi.n	800937c <LmhpComplianceOnMcpsIndication+0x164>
            if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 8009404:	4a16      	ldr	r2, [pc, #88]	; (8009460 <LmhpComplianceOnMcpsIndication+0x248>)
 8009406:	6812      	ldr	r2, [r2, #0]
 8009408:	6852      	ldr	r2, [r2, #4]
 800940a:	2a00      	cmp	r2, #0
 800940c:	d0b6      	beq.n	800937c <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 800940e:	a914      	add	r1, sp, #80	; 0x50
 8009410:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8009414:	f853 0c50 	ldr.w	r0, [r3, #-80]
 8009418:	4790      	blx	r2
        break;
 800941a:	e7af      	b.n	800937c <LmhpComplianceOnMcpsIndication+0x164>
        uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 800941c:	7862      	ldrb	r2, [r4, #1]
        if( ( frameType == 1 ) || ( frameType == 2 ) )
 800941e:	1e53      	subs	r3, r2, #1
 8009420:	b2db      	uxtb	r3, r3
 8009422:	2b01      	cmp	r3, #1
 8009424:	d8aa      	bhi.n	800937c <LmhpComplianceOnMcpsIndication+0x164>
            ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 8009426:	1e50      	subs	r0, r2, #1
 8009428:	bf18      	it	ne
 800942a:	2001      	movne	r0, #1
 800942c:	4b08      	ldr	r3, [pc, #32]	; (8009450 <LmhpComplianceOnMcpsIndication+0x238>)
 800942e:	7218      	strb	r0, [r3, #8]
            if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 8009430:	4b0b      	ldr	r3, [pc, #44]	; (8009460 <LmhpComplianceOnMcpsIndication+0x248>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	689b      	ldr	r3, [r3, #8]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d0a0      	beq.n	800937c <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 800943a:	4798      	blx	r3
 800943c:	e79e      	b.n	800937c <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 800943e:	4b04      	ldr	r3, [pc, #16]	; (8009450 <LmhpComplianceOnMcpsIndication+0x238>)
 8009440:	68da      	ldr	r2, [r3, #12]
 8009442:	2101      	movs	r1, #1
 8009444:	7299      	strb	r1, [r3, #10]
 8009446:	2308      	movs	r3, #8
 8009448:	7013      	strb	r3, [r2, #0]
        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800944a:	460b      	mov	r3, r1
 800944c:	e01b      	b.n	8009486 <LmhpComplianceOnMcpsIndication+0x26e>
 800944e:	bf00      	nop
 8009450:	200007cc 	.word	0x200007cc
 8009454:	20000804 	.word	0x20000804
 8009458:	200000c8 	.word	0x200000c8
 800945c:	08014164 	.word	0x08014164
 8009460:	200007c8 	.word	0x200007c8
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 8009464:	6882      	ldr	r2, [r0, #8]
 8009466:	f101 0c01 	add.w	ip, r1, #1
 800946a:	5c52      	ldrb	r2, [r2, r1]
 800946c:	496c      	ldr	r1, [pc, #432]	; (8009620 <LmhpComplianceOnMcpsIndication+0x408>)
 800946e:	68cd      	ldr	r5, [r1, #12]
 8009470:	7a8c      	ldrb	r4, [r1, #10]
 8009472:	f104 0e01 	add.w	lr, r4, #1
 8009476:	f881 e00a 	strb.w	lr, [r1, #10]
 800947a:	3201      	adds	r2, #1
 800947c:	552a      	strb	r2, [r5, r4]
             i++ )
 800947e:	3301      	adds	r3, #1
 8009480:	b2db      	uxtb	r3, r3
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 8009482:	fa5f f18c 	uxtb.w	r1, ip
        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 8009486:	4a66      	ldr	r2, [pc, #408]	; (8009620 <LmhpComplianceOnMcpsIndication+0x408>)
 8009488:	7a52      	ldrb	r2, [r2, #9]
 800948a:	7b04      	ldrb	r4, [r0, #12]
 800948c:	42a2      	cmp	r2, r4
 800948e:	bf28      	it	cs
 8009490:	4622      	movcs	r2, r4
 8009492:	429a      	cmp	r2, r3
 8009494:	d8e6      	bhi.n	8009464 <LmhpComplianceOnMcpsIndication+0x24c>
 8009496:	e771      	b.n	800937c <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 8009498:	4b61      	ldr	r3, [pc, #388]	; (8009620 <LmhpComplianceOnMcpsIndication+0x408>)
 800949a:	68da      	ldr	r2, [r3, #12]
 800949c:	2101      	movs	r1, #1
 800949e:	7299      	strb	r1, [r3, #10]
 80094a0:	2109      	movs	r1, #9
 80094a2:	7011      	strb	r1, [r2, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 80094a4:	8a18      	ldrh	r0, [r3, #16]
 80094a6:	68d9      	ldr	r1, [r3, #12]
 80094a8:	7a9a      	ldrb	r2, [r3, #10]
 80094aa:	1c54      	adds	r4, r2, #1
 80094ac:	729c      	strb	r4, [r3, #10]
 80094ae:	5488      	strb	r0, [r1, r2]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 80094b0:	8a1a      	ldrh	r2, [r3, #16]
 80094b2:	68d8      	ldr	r0, [r3, #12]
 80094b4:	7a99      	ldrb	r1, [r3, #10]
 80094b6:	1c4c      	adds	r4, r1, #1
 80094b8:	729c      	strb	r4, [r3, #10]
 80094ba:	0a13      	lsrs	r3, r2, #8
 80094bc:	5443      	strb	r3, [r0, r1]
        break;
 80094be:	e75d      	b.n	800937c <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.RxAppCnt = 0;
 80094c0:	4b57      	ldr	r3, [pc, #348]	; (8009620 <LmhpComplianceOnMcpsIndication+0x408>)
 80094c2:	2200      	movs	r2, #0
 80094c4:	821a      	strh	r2, [r3, #16]
        break;
 80094c6:	e759      	b.n	800937c <LmhpComplianceOnMcpsIndication+0x164>
        mlmeReq.Type = MLME_LINK_CHECK;
 80094c8:	2304      	movs	r3, #4
 80094ca:	f88d 3000 	strb.w	r3, [sp]
        LoRaMacMlmeRequest( &mlmeReq );
 80094ce:	4668      	mov	r0, sp
 80094d0:	f003 f946 	bl	800c760 <LoRaMacMlmeRequest>
        break;
 80094d4:	e752      	b.n	800937c <LmhpComplianceOnMcpsIndication+0x164>
        CompliancePackage.OnDeviceTimeRequest( );
 80094d6:	4b53      	ldr	r3, [pc, #332]	; (8009624 <LmhpComplianceOnMcpsIndication+0x40c>)
 80094d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094da:	4798      	blx	r3
        break;
 80094dc:	e74e      	b.n	800937c <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 80094de:	7860      	ldrb	r0, [r4, #1]
 80094e0:	4b4f      	ldr	r3, [pc, #316]	; (8009620 <LmhpComplianceOnMcpsIndication+0x408>)
 80094e2:	7558      	strb	r0, [r3, #21]
        if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 80094e4:	4b50      	ldr	r3, [pc, #320]	; (8009628 <LmhpComplianceOnMcpsIndication+0x410>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	68db      	ldr	r3, [r3, #12]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	f43f af46 	beq.w	800937c <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 80094f0:	4798      	blx	r3
 80094f2:	e743      	b.n	800937c <LmhpComplianceOnMcpsIndication+0x164>
        if( mcpsIndication->BufferSize == 7 )
 80094f4:	7b03      	ldrb	r3, [r0, #12]
 80094f6:	2b07      	cmp	r3, #7
 80094f8:	f47f af40 	bne.w	800937c <LmhpComplianceOnMcpsIndication+0x164>
            mlmeReq.Type = MLME_TXCW;
 80094fc:	2305      	movs	r3, #5
 80094fe:	f88d 3000 	strb.w	r3, [sp]
                ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 8009502:	7863      	ldrb	r3, [r4, #1]
 8009504:	78a2      	ldrb	r2, [r4, #2]
 8009506:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            mlmeReq.Req.TxCw.Timeout =
 800950a:	f8ad 3004 	strh.w	r3, [sp, #4]
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800950e:	78e3      	ldrb	r3, [r4, #3]
 8009510:	7922      	ldrb	r2, [r4, #4]
 8009512:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 8009516:	7962      	ldrb	r2, [r4, #5]
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 8009518:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800951c:	2264      	movs	r2, #100	; 0x64
 800951e:	fb02 f303 	mul.w	r3, r2, r3
            mlmeReq.Req.TxCw.Frequency =
 8009522:	9302      	str	r3, [sp, #8]
            mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 8009524:	6883      	ldr	r3, [r0, #8]
 8009526:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800952a:	f88d 300c 	strb.w	r3, [sp, #12]
            LoRaMacMlmeRequest( &mlmeReq );
 800952e:	4668      	mov	r0, sp
 8009530:	f003 f916 	bl	800c760 <LoRaMacMlmeRequest>
        break;
 8009534:	e722      	b.n	800937c <LmhpComplianceOnMcpsIndication+0x164>
        mibReq.Type = MIB_IS_CERT_FPORT_ON;
 8009536:	2339      	movs	r3, #57	; 0x39
 8009538:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
        mibReq.Param.IsCertPortOn = false;
 800953c:	2300      	movs	r3, #0
 800953e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        LoRaMacMibSetRequestConfirm( &mibReq );
 8009542:	a80b      	add	r0, sp, #44	; 0x2c
 8009544:	f002 fe86 	bl	800c254 <LoRaMacMibSetRequestConfirm>
        ComplianceTestState.IsResetCmdPending = true;
 8009548:	4b35      	ldr	r3, [pc, #212]	; (8009620 <LmhpComplianceOnMcpsIndication+0x408>)
 800954a:	2201      	movs	r2, #1
 800954c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        break;
 8009550:	e714      	b.n	800937c <LmhpComplianceOnMcpsIndication+0x164>
        mibReq.Type = MIB_LORAWAN_VERSION;
 8009552:	232a      	movs	r3, #42	; 0x2a
 8009554:	f88d 3000 	strb.w	r3, [sp]
        LoRaMacMibGetRequestConfirm( &mibReq );
 8009558:	4668      	mov	r0, sp
 800955a:	f002 fd2d 	bl	800bfb8 <LoRaMacMibGetRequestConfirm>
        lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 800955e:	9901      	ldr	r1, [sp, #4]
        lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 8009560:	9a02      	ldr	r2, [sp, #8]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 8009562:	4b2f      	ldr	r3, [pc, #188]	; (8009620 <LmhpComplianceOnMcpsIndication+0x408>)
 8009564:	68dc      	ldr	r4, [r3, #12]
 8009566:	7a98      	ldrb	r0, [r3, #10]
 8009568:	1c45      	adds	r5, r0, #1
 800956a:	729d      	strb	r5, [r3, #10]
 800956c:	257f      	movs	r5, #127	; 0x7f
 800956e:	5425      	strb	r5, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 8009570:	482d      	ldr	r0, [pc, #180]	; (8009628 <LmhpComplianceOnMcpsIndication+0x410>)
 8009572:	6800      	ldr	r0, [r0, #0]
 8009574:	68dd      	ldr	r5, [r3, #12]
 8009576:	7a9c      	ldrb	r4, [r3, #10]
 8009578:	1c66      	adds	r6, r4, #1
 800957a:	729e      	strb	r6, [r3, #10]
 800957c:	78c6      	ldrb	r6, [r0, #3]
 800957e:	552e      	strb	r6, [r5, r4]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 8009580:	68dd      	ldr	r5, [r3, #12]
 8009582:	7a9c      	ldrb	r4, [r3, #10]
 8009584:	1c66      	adds	r6, r4, #1
 8009586:	729e      	strb	r6, [r3, #10]
 8009588:	7886      	ldrb	r6, [r0, #2]
 800958a:	552e      	strb	r6, [r5, r4]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 800958c:	68dd      	ldr	r5, [r3, #12]
 800958e:	7a9c      	ldrb	r4, [r3, #10]
 8009590:	1c66      	adds	r6, r4, #1
 8009592:	729e      	strb	r6, [r3, #10]
 8009594:	7846      	ldrb	r6, [r0, #1]
 8009596:	552e      	strb	r6, [r5, r4]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 8009598:	68dd      	ldr	r5, [r3, #12]
 800959a:	7a9c      	ldrb	r4, [r3, #10]
 800959c:	1c66      	adds	r6, r4, #1
 800959e:	729e      	strb	r6, [r3, #10]
 80095a0:	7800      	ldrb	r0, [r0, #0]
 80095a2:	5528      	strb	r0, [r5, r4]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 80095a4:	68dc      	ldr	r4, [r3, #12]
 80095a6:	7a98      	ldrb	r0, [r3, #10]
 80095a8:	1c45      	adds	r5, r0, #1
 80095aa:	729d      	strb	r5, [r3, #10]
 80095ac:	f3c1 6507 	ubfx	r5, r1, #24, #8
 80095b0:	5425      	strb	r5, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 80095b2:	68dc      	ldr	r4, [r3, #12]
 80095b4:	7a98      	ldrb	r0, [r3, #10]
 80095b6:	1c45      	adds	r5, r0, #1
 80095b8:	729d      	strb	r5, [r3, #10]
 80095ba:	f3c1 4507 	ubfx	r5, r1, #16, #8
 80095be:	5425      	strb	r5, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 80095c0:	68dc      	ldr	r4, [r3, #12]
 80095c2:	7a98      	ldrb	r0, [r3, #10]
 80095c4:	1c45      	adds	r5, r0, #1
 80095c6:	729d      	strb	r5, [r3, #10]
 80095c8:	f3c1 2507 	ubfx	r5, r1, #8, #8
 80095cc:	5425      	strb	r5, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 80095ce:	68dc      	ldr	r4, [r3, #12]
 80095d0:	7a98      	ldrb	r0, [r3, #10]
 80095d2:	1c45      	adds	r5, r0, #1
 80095d4:	729d      	strb	r5, [r3, #10]
 80095d6:	5421      	strb	r1, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 80095d8:	68d8      	ldr	r0, [r3, #12]
 80095da:	7a99      	ldrb	r1, [r3, #10]
 80095dc:	1c4c      	adds	r4, r1, #1
 80095de:	729c      	strb	r4, [r3, #10]
 80095e0:	f3c2 6407 	ubfx	r4, r2, #24, #8
 80095e4:	5444      	strb	r4, [r0, r1]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 80095e6:	68d8      	ldr	r0, [r3, #12]
 80095e8:	7a99      	ldrb	r1, [r3, #10]
 80095ea:	1c4c      	adds	r4, r1, #1
 80095ec:	729c      	strb	r4, [r3, #10]
 80095ee:	f3c2 4407 	ubfx	r4, r2, #16, #8
 80095f2:	5444      	strb	r4, [r0, r1]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 80095f4:	68d8      	ldr	r0, [r3, #12]
 80095f6:	7a99      	ldrb	r1, [r3, #10]
 80095f8:	1c4c      	adds	r4, r1, #1
 80095fa:	729c      	strb	r4, [r3, #10]
 80095fc:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8009600:	5444      	strb	r4, [r0, r1]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 8009602:	68d8      	ldr	r0, [r3, #12]
 8009604:	7a99      	ldrb	r1, [r3, #10]
 8009606:	1c4c      	adds	r4, r1, #1
 8009608:	729c      	strb	r4, [r3, #10]
 800960a:	5442      	strb	r2, [r0, r1]
        break;
 800960c:	e6b6      	b.n	800937c <LmhpComplianceOnMcpsIndication+0x164>
        TimerStop(&ProcessTimer);
 800960e:	4807      	ldr	r0, [pc, #28]	; (800962c <LmhpComplianceOnMcpsIndication+0x414>)
 8009610:	f009 fdba 	bl	8013188 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 8009614:	4b02      	ldr	r3, [pc, #8]	; (8009620 <LmhpComplianceOnMcpsIndication+0x408>)
 8009616:	2200      	movs	r2, #0
 8009618:	705a      	strb	r2, [r3, #1]
 800961a:	e6bd      	b.n	8009398 <LmhpComplianceOnMcpsIndication+0x180>
 800961c:	4770      	bx	lr
 800961e:	bf00      	nop
 8009620:	200007cc 	.word	0x200007cc
 8009624:	200000c8 	.word	0x200000c8
 8009628:	200007c8 	.word	0x200007c8
 800962c:	20000804 	.word	0x20000804

08009630 <LmhpComplianceProcess>:
{
 8009630:	b530      	push	{r4, r5, lr}
 8009632:	b083      	sub	sp, #12
    if( ComplianceTestState.IsTxPending == true )
 8009634:	4b28      	ldr	r3, [pc, #160]	; (80096d8 <LmhpComplianceProcess+0xa8>)
 8009636:	785b      	ldrb	r3, [r3, #1]
 8009638:	b993      	cbnz	r3, 8009660 <LmhpComplianceProcess+0x30>
        if( ComplianceTestState.IsClassReqCmdPending == true )
 800963a:	4b27      	ldr	r3, [pc, #156]	; (80096d8 <LmhpComplianceProcess+0xa8>)
 800963c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009640:	2b00      	cmp	r3, #0
 8009642:	d13f      	bne.n	80096c4 <LmhpComplianceProcess+0x94>
    if( ComplianceTestState.IsResetCmdPending == true )
 8009644:	4b24      	ldr	r3, [pc, #144]	; (80096d8 <LmhpComplianceProcess+0xa8>)
 8009646:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800964a:	b13b      	cbz	r3, 800965c <LmhpComplianceProcess+0x2c>
        ComplianceTestState.IsResetCmdPending = false;
 800964c:	4b22      	ldr	r3, [pc, #136]	; (80096d8 <LmhpComplianceProcess+0xa8>)
 800964e:	2200      	movs	r2, #0
 8009650:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        if (CompliancePackage.OnSystemReset != NULL)
 8009654:	4b21      	ldr	r3, [pc, #132]	; (80096dc <LmhpComplianceProcess+0xac>)
 8009656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009658:	b103      	cbz	r3, 800965c <LmhpComplianceProcess+0x2c>
            CompliancePackage.OnSystemReset( );
 800965a:	4798      	blx	r3
}
 800965c:	b003      	add	sp, #12
 800965e:	bd30      	pop	{r4, r5, pc}
        TimerTime_t now = TimerGetCurrentTime( );
 8009660:	f009 fd52 	bl	8013108 <UTIL_TIMER_GetCurrentTime>
 8009664:	4604      	mov	r4, r0
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 8009666:	4b1c      	ldr	r3, [pc, #112]	; (80096d8 <LmhpComplianceProcess+0xa8>)
 8009668:	685d      	ldr	r5, [r3, #4]
 800966a:	f7ff f9f5 	bl	8008a58 <LmHandlerGetDutyCycleWaitTime>
 800966e:	4405      	add	r5, r0
 8009670:	42a5      	cmp	r5, r4
 8009672:	d2e7      	bcs.n	8009644 <LmhpComplianceProcess+0x14>
            if( ComplianceTestState.DataBufferSize != 0 )
 8009674:	4b18      	ldr	r3, [pc, #96]	; (80096d8 <LmhpComplianceProcess+0xa8>)
 8009676:	7a9b      	ldrb	r3, [r3, #10]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d0e3      	beq.n	8009644 <LmhpComplianceProcess+0x14>
                LmHandlerAppData_t appData = {
 800967c:	22e0      	movs	r2, #224	; 0xe0
 800967e:	f88d 2000 	strb.w	r2, [sp]
 8009682:	f88d 3001 	strb.w	r3, [sp, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 8009686:	4b14      	ldr	r3, [pc, #80]	; (80096d8 <LmhpComplianceProcess+0xa8>)
 8009688:	68da      	ldr	r2, [r3, #12]
                LmHandlerAppData_t appData = {
 800968a:	9201      	str	r2, [sp, #4]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 800968c:	2201      	movs	r2, #1
 800968e:	7a19      	ldrb	r1, [r3, #8]
 8009690:	4668      	mov	r0, sp
 8009692:	f7ff f9f9 	bl	8008a88 <LmHandlerSend>
                if ((lmhStatus == LORAMAC_HANDLER_BUSY_ERROR) || (lmhStatus == LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED))
 8009696:	f110 0f02 	cmn.w	r0, #2
 800969a:	d009      	beq.n	80096b0 <LmhpComplianceProcess+0x80>
 800969c:	f110 0f06 	cmn.w	r0, #6
 80096a0:	d006      	beq.n	80096b0 <LmhpComplianceProcess+0x80>
                    ComplianceTestState.IsTxPending = false;
 80096a2:	4b0d      	ldr	r3, [pc, #52]	; (80096d8 <LmhpComplianceProcess+0xa8>)
 80096a4:	2200      	movs	r2, #0
 80096a6:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 80096a8:	729a      	strb	r2, [r3, #10]
                ComplianceTestState.TxPendingTimestamp = now;
 80096aa:	4b0b      	ldr	r3, [pc, #44]	; (80096d8 <LmhpComplianceProcess+0xa8>)
 80096ac:	605c      	str	r4, [r3, #4]
 80096ae:	e7c9      	b.n	8009644 <LmhpComplianceProcess+0x14>
                    TimerSetValue( &ProcessTimer, 1000 );
 80096b0:	4d0b      	ldr	r5, [pc, #44]	; (80096e0 <LmhpComplianceProcess+0xb0>)
 80096b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80096b6:	4628      	mov	r0, r5
 80096b8:	f009 fe06 	bl	80132c8 <UTIL_TIMER_SetPeriod>
                    TimerStart(&ProcessTimer);
 80096bc:	4628      	mov	r0, r5
 80096be:	f009 fdbd 	bl	801323c <UTIL_TIMER_Start>
 80096c2:	e7f2      	b.n	80096aa <LmhpComplianceProcess+0x7a>
            ComplianceTestState.IsClassReqCmdPending = false;
 80096c4:	4b04      	ldr	r3, [pc, #16]	; (80096d8 <LmhpComplianceProcess+0xa8>)
 80096c6:	2200      	movs	r2, #0
 80096c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 80096cc:	f893 0036 	ldrb.w	r0, [r3, #54]	; 0x36
 80096d0:	f7ff fa7c 	bl	8008bcc <LmHandlerRequestClass>
 80096d4:	e7b6      	b.n	8009644 <LmhpComplianceProcess+0x14>
 80096d6:	bf00      	nop
 80096d8:	200007cc 	.word	0x200007cc
 80096dc:	200000c8 	.word	0x200000c8
 80096e0:	20000804 	.word	0x20000804

080096e4 <LmhpComplianceInit>:
{
 80096e4:	b530      	push	{r4, r5, lr}
 80096e6:	b083      	sub	sp, #12
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 80096e8:	b188      	cbz	r0, 800970e <LmhpComplianceInit+0x2a>
 80096ea:	4603      	mov	r3, r0
 80096ec:	b179      	cbz	r1, 800970e <LmhpComplianceInit+0x2a>
        ComplianceParams                      = ( LmhpComplianceParams_t* ) params;
 80096ee:	4813      	ldr	r0, [pc, #76]	; (800973c <LmhpComplianceInit+0x58>)
 80096f0:	6003      	str	r3, [r0, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 80096f2:	4b13      	ldr	r3, [pc, #76]	; (8009740 <LmhpComplianceInit+0x5c>)
 80096f4:	60d9      	str	r1, [r3, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 80096f6:	725a      	strb	r2, [r3, #9]
        ComplianceTestState.Initialized       = true;
 80096f8:	2201      	movs	r2, #1
 80096fa:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 80096fc:	2200      	movs	r2, #0
 80096fe:	9200      	str	r2, [sp, #0]
 8009700:	4b10      	ldr	r3, [pc, #64]	; (8009744 <LmhpComplianceInit+0x60>)
 8009702:	f04f 31ff 	mov.w	r1, #4294967295
 8009706:	4810      	ldr	r0, [pc, #64]	; (8009748 <LmhpComplianceInit+0x64>)
 8009708:	f009 fce0 	bl	80130cc <UTIL_TIMER_Create>
 800970c:	e004      	b.n	8009718 <LmhpComplianceInit+0x34>
        ComplianceParams                = NULL;
 800970e:	2300      	movs	r3, #0
 8009710:	4a0a      	ldr	r2, [pc, #40]	; (800973c <LmhpComplianceInit+0x58>)
 8009712:	6013      	str	r3, [r2, #0]
        ComplianceTestState.Initialized = false;
 8009714:	4a0a      	ldr	r2, [pc, #40]	; (8009740 <LmhpComplianceInit+0x5c>)
 8009716:	7013      	strb	r3, [r2, #0]
    ComplianceTestState.RxAppCnt = 0;
 8009718:	4c09      	ldr	r4, [pc, #36]	; (8009740 <LmhpComplianceInit+0x5c>)
 800971a:	2500      	movs	r5, #0
 800971c:	8225      	strh	r5, [r4, #16]
    memset1( ( uint8_t* ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 800971e:	2220      	movs	r2, #32
 8009720:	4629      	mov	r1, r5
 8009722:	f104 0014 	add.w	r0, r4, #20
 8009726:	f007 fb4a 	bl	8010dbe <memset1>
    ComplianceTestState.IsTxPending = false;
 800972a:	7065      	strb	r5, [r4, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 800972c:	74a5      	strb	r5, [r4, #18]
    ComplianceTestState.IsResetCmdPending = false;
 800972e:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 8009732:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 8009736:	b003      	add	sp, #12
 8009738:	bd30      	pop	{r4, r5, pc}
 800973a:	bf00      	nop
 800973c:	200007c8 	.word	0x200007c8
 8009740:	200007cc 	.word	0x200007cc
 8009744:	08009201 	.word	0x08009201
 8009748:	20000804 	.word	0x20000804

0800974c <LmhpCompliancePackageFactory>:
}
 800974c:	4800      	ldr	r0, [pc, #0]	; (8009750 <LmhpCompliancePackageFactory+0x4>)
 800974e:	4770      	bx	lr
 8009750:	200000c8 	.word	0x200000c8

08009754 <OnRadioRxError>:
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
}

static void OnRadioRxError( void )
{
 8009754:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 8009756:	4a06      	ldr	r2, [pc, #24]	; (8009770 <OnRadioRxError+0x1c>)
 8009758:	7813      	ldrb	r3, [r2, #0]
 800975a:	f043 0304 	orr.w	r3, r3, #4
 800975e:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8009760:	4b04      	ldr	r3, [pc, #16]	; (8009774 <OnRadioRxError+0x20>)
 8009762:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8009766:	b113      	cbz	r3, 800976e <OnRadioRxError+0x1a>
 8009768:	691b      	ldr	r3, [r3, #16]
 800976a:	b103      	cbz	r3, 800976e <OnRadioRxError+0x1a>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800976c:	4798      	blx	r3
    }
}
 800976e:	bd08      	pop	{r3, pc}
 8009770:	2000081c 	.word	0x2000081c
 8009774:	20000820 	.word	0x20000820

08009778 <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8009778:	4b07      	ldr	r3, [pc, #28]	; (8009798 <UpdateRxSlotIdleState+0x20>)
 800977a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800977e:	2b02      	cmp	r3, #2
 8009780:	d004      	beq.n	800978c <UpdateRxSlotIdleState+0x14>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8009782:	4b06      	ldr	r3, [pc, #24]	; (800979c <UpdateRxSlotIdleState+0x24>)
 8009784:	2206      	movs	r2, #6
 8009786:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
 800978a:	4770      	bx	lr
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800978c:	4b03      	ldr	r3, [pc, #12]	; (800979c <UpdateRxSlotIdleState+0x24>)
 800978e:	2202      	movs	r2, #2
 8009790:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
    }
}
 8009794:	4770      	bx	lr
 8009796:	bf00      	nop
 8009798:	20008000 	.word	0x20008000
 800979c:	20000820 	.word	0x20000820

080097a0 <LoRaMacEnableRequests>:
    return true;
}

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
    MacCtx.AllowRequests = requestState;
 80097a0:	4b01      	ldr	r3, [pc, #4]	; (80097a8 <LoRaMacEnableRequests+0x8>)
 80097a2:	f883 0496 	strb.w	r0, [r3, #1174]	; 0x496
}
 80097a6:	4770      	bx	lr
 80097a8:	20000820 	.word	0x20000820

080097ac <LoRaMacHandleIndicationEvents>:
        }
    }
}

static void LoRaMacHandleIndicationEvents( void )
{
 80097ac:	b508      	push	{r3, lr}
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 80097ae:	4b15      	ldr	r3, [pc, #84]	; (8009804 <LoRaMacHandleIndicationEvents+0x58>)
 80097b0:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80097b4:	f013 0f08 	tst.w	r3, #8
 80097b8:	d00e      	beq.n	80097d8 <LoRaMacHandleIndicationEvents+0x2c>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 80097ba:	4812      	ldr	r0, [pc, #72]	; (8009804 <LoRaMacHandleIndicationEvents+0x58>)
 80097bc:	f890 3495 	ldrb.w	r3, [r0, #1173]	; 0x495
 80097c0:	f36f 03c3 	bfc	r3, #3, #1
 80097c4:	f880 3495 	strb.w	r3, [r0, #1173]	; 0x495
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 80097c8:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 80097cc:	68db      	ldr	r3, [r3, #12]
 80097ce:	f500 6192 	add.w	r1, r0, #1168	; 0x490
 80097d2:	f200 406c 	addw	r0, r0, #1132	; 0x46c
 80097d6:	4798      	blx	r3
    }
    */
    /*ST_WORKAROUND_END */

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80097d8:	4b0a      	ldr	r3, [pc, #40]	; (8009804 <LoRaMacHandleIndicationEvents+0x58>)
 80097da:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80097de:	f013 0f02 	tst.w	r3, #2
 80097e2:	d00e      	beq.n	8009802 <LoRaMacHandleIndicationEvents+0x56>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 80097e4:	4807      	ldr	r0, [pc, #28]	; (8009804 <LoRaMacHandleIndicationEvents+0x58>)
 80097e6:	f890 3495 	ldrb.w	r3, [r0, #1173]	; 0x495
 80097ea:	f36f 0341 	bfc	r3, #1, #1
 80097ee:	f880 3495 	strb.w	r3, [r0, #1173]	; 0x495
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 80097f2:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	f500 6192 	add.w	r1, r0, #1168	; 0x490
 80097fc:	f200 4024 	addw	r0, r0, #1060	; 0x424
 8009800:	4798      	blx	r3
    }
}
 8009802:	bd08      	pop	{r3, pc}
 8009804:	20000820 	.word	0x20000820

08009808 <CheckForMinimumAbpDatarate>:
}

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
    if( ( adr == true ) &&
 8009808:	b110      	cbz	r0, 8009810 <CheckForMinimumAbpDatarate+0x8>
 800980a:	2901      	cmp	r1, #1
 800980c:	d001      	beq.n	8009812 <CheckForMinimumAbpDatarate+0xa>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
    {
        return true;
    }
    return false;
 800980e:	2000      	movs	r0, #0
}
 8009810:	4770      	bx	lr
        ( activation == ACTIVATION_TYPE_ABP ) &&
 8009812:	2a00      	cmp	r2, #0
 8009814:	d0fc      	beq.n	8009810 <CheckForMinimumAbpDatarate+0x8>
    return false;
 8009816:	2000      	movs	r0, #0
 8009818:	4770      	bx	lr
	...

0800981c <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800981c:	4b07      	ldr	r3, [pc, #28]	; (800983c <LoRaMacCheckForRxAbort+0x20>)
 800981e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009822:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009826:	d008      	beq.n	800983a <LoRaMacCheckForRxAbort+0x1e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 8009828:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800982c:	4a03      	ldr	r2, [pc, #12]	; (800983c <LoRaMacCheckForRxAbort+0x20>)
 800982e:	f8c2 1340 	str.w	r1, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009832:	f023 0382 	bic.w	r3, r3, #130	; 0x82
 8009836:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 800983a:	4770      	bx	lr
 800983c:	20000820 	.word	0x20000820

08009840 <CalculateBackOff>:

static void CalculateBackOff( void )
{
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8009840:	4b06      	ldr	r3, [pc, #24]	; (800985c <CalculateBackOff+0x1c>)
 8009842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009844:	b94b      	cbnz	r3, 800985a <CalculateBackOff+0x1a>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8009846:	4a05      	ldr	r2, [pc, #20]	; (800985c <CalculateBackOff+0x1c>)
 8009848:	f8b2 310c 	ldrh.w	r3, [r2, #268]	; 0x10c
 800984c:	4904      	ldr	r1, [pc, #16]	; (8009860 <CalculateBackOff+0x20>)
 800984e:	f8d1 1420 	ldr.w	r1, [r1, #1056]	; 0x420
 8009852:	3b01      	subs	r3, #1
 8009854:	fb01 f303 	mul.w	r3, r1, r3
 8009858:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 800985a:	4770      	bx	lr
 800985c:	20008000 	.word	0x20008000
 8009860:	20000820 	.word	0x20000820

08009864 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8009864:	b508      	push	{r3, lr}
 8009866:	4684      	mov	ip, r0
 8009868:	4608      	mov	r0, r1
 800986a:	4611      	mov	r1, r2
    Radio.SetTxContinuousWave( frequency, power, timeout );
 800986c:	4b06      	ldr	r3, [pc, #24]	; (8009888 <SetTxContinuousWave+0x24>)
 800986e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009870:	4662      	mov	r2, ip
 8009872:	b249      	sxtb	r1, r1
 8009874:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8009876:	4a05      	ldr	r2, [pc, #20]	; (800988c <SetTxContinuousWave+0x28>)
 8009878:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800987c:	f043 0302 	orr.w	r3, r3, #2
 8009880:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 8009884:	2000      	movs	r0, #0
 8009886:	bd08      	pop	{r3, pc}
 8009888:	08014f0c 	.word	0x08014f0c
 800988c:	20000820 	.word	0x20000820

08009890 <DetermineFrameType>:
    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8009890:	4602      	mov	r2, r0
 8009892:	b1f8      	cbz	r0, 80098d4 <DetermineFrameType+0x44>
 8009894:	b301      	cbz	r1, 80098d8 <DetermineFrameType+0x48>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8009896:	7b03      	ldrb	r3, [r0, #12]
 8009898:	f013 030f 	ands.w	r3, r3, #15
 800989c:	d005      	beq.n	80098aa <DetermineFrameType+0x1a>
 800989e:	f890 0020 	ldrb.w	r0, [r0, #32]
 80098a2:	b110      	cbz	r0, 80098aa <DetermineFrameType+0x1a>
    {
        *fType = FRAME_TYPE_A;
 80098a4:	2000      	movs	r0, #0
 80098a6:	7008      	strb	r0, [r1, #0]
 80098a8:	4770      	bx	lr
    }
    else if( macMsg->FRMPayloadSize == 0 )
 80098aa:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
 80098ae:	b910      	cbnz	r0, 80098b6 <DetermineFrameType+0x26>
    {
        *fType = FRAME_TYPE_B;
 80098b0:	2301      	movs	r3, #1
 80098b2:	700b      	strb	r3, [r1, #0]
 80098b4:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 80098b6:	b92b      	cbnz	r3, 80098c4 <DetermineFrameType+0x34>
 80098b8:	f892 0020 	ldrb.w	r0, [r2, #32]
 80098bc:	b910      	cbnz	r0, 80098c4 <DetermineFrameType+0x34>
    {
        *fType = FRAME_TYPE_C;
 80098be:	2302      	movs	r3, #2
 80098c0:	700b      	strb	r3, [r1, #0]
 80098c2:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 80098c4:	b953      	cbnz	r3, 80098dc <DetermineFrameType+0x4c>
 80098c6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80098ca:	b14a      	cbz	r2, 80098e0 <DetermineFrameType+0x50>
    {
        *fType = FRAME_TYPE_D;
 80098cc:	2203      	movs	r2, #3
 80098ce:	700a      	strb	r2, [r1, #0]
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
    }

    return LORAMAC_STATUS_OK;
 80098d0:	4618      	mov	r0, r3
        *fType = FRAME_TYPE_D;
 80098d2:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80098d4:	2003      	movs	r0, #3
 80098d6:	4770      	bx	lr
 80098d8:	2003      	movs	r0, #3
 80098da:	4770      	bx	lr
        return LORAMAC_STATUS_ERROR;
 80098dc:	2018      	movs	r0, #24
 80098de:	4770      	bx	lr
 80098e0:	2018      	movs	r0, #24
}
 80098e2:	4770      	bx	lr

080098e4 <CheckRetrans>:
    return false;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
    if( counter >= limit )
 80098e4:	4288      	cmp	r0, r1
 80098e6:	d201      	bcs.n	80098ec <CheckRetrans+0x8>
    {
        return true;
    }
    return false;
 80098e8:	2000      	movs	r0, #0
 80098ea:	4770      	bx	lr
        return true;
 80098ec:	2001      	movs	r0, #1
}
 80098ee:	4770      	bx	lr

080098f0 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 80098f0:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 80098f2:	4b0b      	ldr	r3, [pc, #44]	; (8009920 <CheckRetransUnconfirmedUplink+0x30>)
 80098f4:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
 80098f8:	4b0a      	ldr	r3, [pc, #40]	; (8009924 <CheckRetransUnconfirmedUplink+0x34>)
 80098fa:	f893 041c 	ldrb.w	r0, [r3, #1052]	; 0x41c
 80098fe:	f7ff fff1 	bl	80098e4 <CheckRetrans>
 8009902:	b950      	cbnz	r0, 800991a <CheckRetransUnconfirmedUplink+0x2a>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8009904:	4b07      	ldr	r3, [pc, #28]	; (8009924 <CheckRetransUnconfirmedUplink+0x34>)
 8009906:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800990a:	f013 0f02 	tst.w	r3, #2
 800990e:	d004      	beq.n	800991a <CheckRetransUnconfirmedUplink+0x2a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8009910:	4b04      	ldr	r3, [pc, #16]	; (8009924 <CheckRetransUnconfirmedUplink+0x34>)
 8009912:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 8009916:	2b01      	cmp	r3, #1
 8009918:	d900      	bls.n	800991c <CheckRetransUnconfirmedUplink+0x2c>
        {
            return true;
        }
    }
    return false;
}
 800991a:	bd08      	pop	{r3, pc}
            return true;
 800991c:	2001      	movs	r0, #1
 800991e:	e7fc      	b.n	800991a <CheckRetransUnconfirmedUplink+0x2a>
 8009920:	20008000 	.word	0x20008000
 8009924:	20000820 	.word	0x20000820

08009928 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8009928:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 800992a:	4b09      	ldr	r3, [pc, #36]	; (8009950 <CheckRetransConfirmedUplink+0x28>)
 800992c:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
 8009930:	4b08      	ldr	r3, [pc, #32]	; (8009954 <CheckRetransConfirmedUplink+0x2c>)
 8009932:	f893 041c 	ldrb.w	r0, [r3, #1052]	; 0x41c
 8009936:	f7ff ffd5 	bl	80098e4 <CheckRetrans>
 800993a:	b940      	cbnz	r0, 800994e <CheckRetransConfirmedUplink+0x26>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800993c:	4b05      	ldr	r3, [pc, #20]	; (8009954 <CheckRetransConfirmedUplink+0x2c>)
 800993e:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8009942:	f013 0f02 	tst.w	r3, #2
 8009946:	d002      	beq.n	800994e <CheckRetransConfirmedUplink+0x26>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8009948:	4b02      	ldr	r3, [pc, #8]	; (8009954 <CheckRetransConfirmedUplink+0x2c>)
 800994a:	f893 0448 	ldrb.w	r0, [r3, #1096]	; 0x448
        {
            return true;
        }
    }
    return false;
}
 800994e:	bd08      	pop	{r3, pc}
 8009950:	20008000 	.word	0x20008000
 8009954:	20000820 	.word	0x20000820

08009958 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
    if( counter < ADR_ACK_COUNTER_MAX )
 8009958:	f1b0 3fff 	cmp.w	r0, #4294967295
 800995c:	d000      	beq.n	8009960 <IncreaseAdrAckCounter+0x8>
    {
        counter++;
 800995e:	3001      	adds	r0, #1
    }
    return counter;
}
 8009960:	4770      	bx	lr
	...

08009964 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8009964:	b510      	push	{r4, lr}
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8009966:	4b12      	ldr	r3, [pc, #72]	; (80099b0 <StopRetransmission+0x4c>)
 8009968:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800996c:	f013 0f02 	tst.w	r3, #2
 8009970:	d004      	beq.n	800997c <StopRetransmission+0x18>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8009972:	4b0f      	ldr	r3, [pc, #60]	; (80099b0 <StopRetransmission+0x4c>)
 8009974:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8009978:	2b01      	cmp	r3, #1
 800997a:	d908      	bls.n	800998e <StopRetransmission+0x2a>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800997c:	4b0d      	ldr	r3, [pc, #52]	; (80099b4 <StopRetransmission+0x50>)
 800997e:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8009982:	b123      	cbz	r3, 800998e <StopRetransmission+0x2a>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 8009984:	4c0b      	ldr	r4, [pc, #44]	; (80099b4 <StopRetransmission+0x50>)
 8009986:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8009988:	f7ff ffe6 	bl	8009958 <IncreaseAdrAckCounter>
 800998c:	62a0      	str	r0, [r4, #40]	; 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 800998e:	4b08      	ldr	r3, [pc, #32]	; (80099b0 <StopRetransmission+0x4c>)
 8009990:	2200      	movs	r2, #0
 8009992:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.NodeAckRequested = false;
 8009996:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
 800999a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800999e:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 80099a2:	f022 0202 	bic.w	r2, r2, #2
 80099a6:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return true;
}
 80099aa:	2001      	movs	r0, #1
 80099ac:	bd10      	pop	{r4, pc}
 80099ae:	bf00      	nop
 80099b0:	20000820 	.word	0x20000820
 80099b4:	20008000 	.word	0x20008000

080099b8 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 80099b8:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) &&
 80099ba:	4b04      	ldr	r3, [pc, #16]	; (80099cc <CallNvmDataChangeCallback+0x14>)
 80099bc:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80099c0:	b113      	cbz	r3, 80099c8 <CallNvmDataChangeCallback+0x10>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 80099c2:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 80099c4:	b103      	cbz	r3, 80099c8 <CallNvmDataChangeCallback+0x10>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 80099c6:	4798      	blx	r3
    }
}
 80099c8:	bd08      	pop	{r3, pc}
 80099ca:	bf00      	nop
 80099cc:	20000820 	.word	0x20000820

080099d0 <IsRequestPending>:
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80099d0:	4b04      	ldr	r3, [pc, #16]	; (80099e4 <IsRequestPending+0x14>)
 80099d2:	f893 0495 	ldrb.w	r0, [r3, #1173]	; 0x495
 80099d6:	f010 0005 	ands.w	r0, r0, #5
 80099da:	d100      	bne.n	80099de <IsRequestPending+0xe>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
    {
        return 1;
    }
    return 0;
}
 80099dc:	4770      	bx	lr
        return 1;
 80099de:	2001      	movs	r0, #1
 80099e0:	e7fc      	b.n	80099dc <IsRequestPending+0xc>
 80099e2:	bf00      	nop
 80099e4:	20000820 	.word	0x20000820

080099e8 <GetMaxAppPayloadWithoutFOptsLength>:
{
 80099e8:	b500      	push	{lr}
 80099ea:	b085      	sub	sp, #20
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80099ec:	4b0d      	ldr	r3, [pc, #52]	; (8009a24 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 80099ee:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 80099f2:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Datarate = datarate;
 80099f6:	f88d 0009 	strb.w	r0, [sp, #9]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 80099fa:	220d      	movs	r2, #13
 80099fc:	f88d 2008 	strb.w	r2, [sp, #8]
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8009a00:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009a04:	b113      	cbz	r3, 8009a0c <GetMaxAppPayloadWithoutFOptsLength+0x24>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8009a06:	230e      	movs	r3, #14
 8009a08:	f88d 3008 	strb.w	r3, [sp, #8]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009a0c:	a902      	add	r1, sp, #8
 8009a0e:	4b05      	ldr	r3, [pc, #20]	; (8009a24 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 8009a10:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009a14:	f004 f928 	bl	800dc68 <RegionGetPhyParam>
 8009a18:	9001      	str	r0, [sp, #4]
}
 8009a1a:	b2c0      	uxtb	r0, r0
 8009a1c:	b005      	add	sp, #20
 8009a1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009a22:	bf00      	nop
 8009a24:	20008000 	.word	0x20008000

08009a28 <ValidatePayloadLength>:
{
 8009a28:	b538      	push	{r3, r4, r5, lr}
 8009a2a:	4605      	mov	r5, r0
 8009a2c:	4614      	mov	r4, r2
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8009a2e:	4608      	mov	r0, r1
 8009a30:	f7ff ffda 	bl	80099e8 <GetMaxAppPayloadWithoutFOptsLength>
 8009a34:	b283      	uxth	r3, r0
    payloadSize = ( lenN + fOptsLen );
 8009a36:	1962      	adds	r2, r4, r5
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d303      	bcc.n	8009a44 <ValidatePayloadLength+0x1c>
 8009a3c:	2aff      	cmp	r2, #255	; 0xff
 8009a3e:	d903      	bls.n	8009a48 <ValidatePayloadLength+0x20>
    return false;
 8009a40:	2000      	movs	r0, #0
 8009a42:	e000      	b.n	8009a46 <ValidatePayloadLength+0x1e>
 8009a44:	2000      	movs	r0, #0
}
 8009a46:	bd38      	pop	{r3, r4, r5, pc}
        return true;
 8009a48:	2001      	movs	r0, #1
 8009a4a:	e7fc      	b.n	8009a46 <ValidatePayloadLength+0x1e>

08009a4c <ProcessRadioTxDone>:
{
 8009a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a4e:	b08f      	sub	sp, #60	; 0x3c
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8009a50:	4b35      	ldr	r3, [pc, #212]	; (8009b28 <ProcessRadioTxDone+0xdc>)
 8009a52:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8009a56:	2b02      	cmp	r3, #2
 8009a58:	d002      	beq.n	8009a60 <ProcessRadioTxDone+0x14>
        Radio.Sleep( );
 8009a5a:	4b34      	ldr	r3, [pc, #208]	; (8009b2c <ProcessRadioTxDone+0xe0>)
 8009a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a5e:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 8009a60:	4c33      	ldr	r4, [pc, #204]	; (8009b30 <ProcessRadioTxDone+0xe4>)
 8009a62:	f504 7560 	add.w	r5, r4, #896	; 0x380
 8009a66:	f8d4 13b0 	ldr.w	r1, [r4, #944]	; 0x3b0
 8009a6a:	4628      	mov	r0, r5
 8009a6c:	f009 fc2c 	bl	80132c8 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8009a70:	4628      	mov	r0, r5
 8009a72:	f009 fbe3 	bl	801323c <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 8009a76:	f504 7566 	add.w	r5, r4, #920	; 0x398
 8009a7a:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 8009a7e:	4628      	mov	r0, r5
 8009a80:	f009 fc22 	bl	80132c8 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 8009a84:	4628      	mov	r0, r5
 8009a86:	f009 fbd9 	bl	801323c <UTIL_TIMER_Start>
    if( MacCtx.NodeAckRequested == true )
 8009a8a:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d134      	bne.n	8009afc <ProcessRadioTxDone+0xb0>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8009a92:	4b27      	ldr	r3, [pc, #156]	; (8009b30 <ProcessRadioTxDone+0xe4>)
 8009a94:	2200      	movs	r2, #0
 8009a96:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8009a9a:	4b26      	ldr	r3, [pc, #152]	; (8009b34 <ProcessRadioTxDone+0xe8>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	4c22      	ldr	r4, [pc, #136]	; (8009b28 <ProcessRadioTxDone+0xdc>)
 8009aa0:	62e3      	str	r3, [r4, #44]	; 0x2c
    txDone.Channel = MacCtx.Channel;
 8009aa2:	4f23      	ldr	r7, [pc, #140]	; (8009b30 <ProcessRadioTxDone+0xe4>)
 8009aa4:	f897 241f 	ldrb.w	r2, [r7, #1055]	; 0x41f
 8009aa8:	f88d 2010 	strb.w	r2, [sp, #16]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8009aac:	9305      	str	r3, [sp, #20]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8009aae:	ae0c      	add	r6, sp, #48	; 0x30
 8009ab0:	4630      	mov	r0, r6
 8009ab2:	f009 fa9d 	bl	8012ff0 <SysTimeGetMcuTime>
 8009ab6:	ad02      	add	r5, sp, #8
 8009ab8:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8009abc:	9300      	str	r3, [sp, #0]
 8009abe:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8009ac2:	e896 0006 	ldmia.w	r6, {r1, r2}
 8009ac6:	4628      	mov	r0, r5
 8009ac8:	f009 fa2f 	bl	8012f2a <SysTimeSub>
 8009acc:	ab07      	add	r3, sp, #28
 8009ace:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009ad2:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8009ad6:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8009ada:	9306      	str	r3, [sp, #24]
    txDone.Joined  = true;
 8009adc:	2301      	movs	r3, #1
 8009ade:	f88d 3011 	strb.w	r3, [sp, #17]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8009ae2:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 8009ae6:	b90b      	cbnz	r3, 8009aec <ProcessRadioTxDone+0xa0>
        txDone.Joined  = false;
 8009ae8:	f88d 3011 	strb.w	r3, [sp, #17]
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8009aec:	a904      	add	r1, sp, #16
 8009aee:	4b0e      	ldr	r3, [pc, #56]	; (8009b28 <ProcessRadioTxDone+0xdc>)
 8009af0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009af4:	f004 f8d0 	bl	800dc98 <RegionSetBandTxDone>
}
 8009af8:	b00f      	add	sp, #60	; 0x3c
 8009afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 8009afc:	2315      	movs	r3, #21
 8009afe:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009b02:	a90a      	add	r1, sp, #40	; 0x28
 8009b04:	4b08      	ldr	r3, [pc, #32]	; (8009b28 <ProcessRadioTxDone+0xdc>)
 8009b06:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009b0a:	f004 f8ad 	bl	800dc68 <RegionGetPhyParam>
 8009b0e:	9009      	str	r0, [sp, #36]	; 0x24
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8009b10:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 8009b14:	f204 4404 	addw	r4, r4, #1028	; 0x404
 8009b18:	4401      	add	r1, r0
 8009b1a:	4620      	mov	r0, r4
 8009b1c:	f009 fbd4 	bl	80132c8 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 8009b20:	4620      	mov	r0, r4
 8009b22:	f009 fb8b 	bl	801323c <UTIL_TIMER_Start>
 8009b26:	e7b8      	b.n	8009a9a <ProcessRadioTxDone+0x4e>
 8009b28:	20008000 	.word	0x20008000
 8009b2c:	08014f0c 	.word	0x08014f0c
 8009b30:	20000820 	.word	0x20000820
 8009b34:	20000de0 	.word	0x20000de0

08009b38 <OnRetransmitTimeoutTimerEvent>:
{
 8009b38:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 8009b3a:	4c09      	ldr	r4, [pc, #36]	; (8009b60 <OnRetransmitTimeoutTimerEvent+0x28>)
 8009b3c:	f204 4004 	addw	r0, r4, #1028	; 0x404
 8009b40:	f009 fb22 	bl	8013188 <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 8009b44:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
 8009b48:	b113      	cbz	r3, 8009b50 <OnRetransmitTimeoutTimerEvent+0x18>
        MacCtx.RetransmitTimeoutRetry = true;
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	f884 241d 	strb.w	r2, [r4, #1053]	; 0x41d
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8009b50:	4b03      	ldr	r3, [pc, #12]	; (8009b60 <OnRetransmitTimeoutTimerEvent+0x28>)
 8009b52:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8009b56:	b113      	cbz	r3, 8009b5e <OnRetransmitTimeoutTimerEvent+0x26>
 8009b58:	691b      	ldr	r3, [r3, #16]
 8009b5a:	b103      	cbz	r3, 8009b5e <OnRetransmitTimeoutTimerEvent+0x26>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8009b5c:	4798      	blx	r3
}
 8009b5e:	bd10      	pop	{r4, pc}
 8009b60:	20000820 	.word	0x20000820

08009b64 <PrepareRxDoneAbort>:
{
 8009b64:	b508      	push	{r3, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8009b66:	4b0e      	ldr	r3, [pc, #56]	; (8009ba0 <PrepareRxDoneAbort+0x3c>)
 8009b68:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 8009b6c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009b70:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == true )
 8009b74:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 8009b78:	b973      	cbnz	r3, 8009b98 <PrepareRxDoneAbort+0x34>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 8009b7a:	4b09      	ldr	r3, [pc, #36]	; (8009ba0 <PrepareRxDoneAbort+0x3c>)
 8009b7c:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 8009b80:	f042 0202 	orr.w	r2, r2, #2
 8009b84:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    MacCtx.MacFlags.Bits.MacDone = 1;
 8009b88:	b2d2      	uxtb	r2, r2
 8009b8a:	f042 0220 	orr.w	r2, r2, #32
 8009b8e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    UpdateRxSlotIdleState( );
 8009b92:	f7ff fdf1 	bl	8009778 <UpdateRxSlotIdleState>
}
 8009b96:	bd08      	pop	{r3, pc}
        OnRetransmitTimeoutTimerEvent( NULL );
 8009b98:	2000      	movs	r0, #0
 8009b9a:	f7ff ffcd 	bl	8009b38 <OnRetransmitTimeoutTimerEvent>
 8009b9e:	e7ec      	b.n	8009b7a <PrepareRxDoneAbort+0x16>
 8009ba0:	20000820 	.word	0x20000820

08009ba4 <LoRaMacCheckForBeaconAcquisition>:
{
 8009ba4:	b508      	push	{r3, lr}
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8009ba6:	200b      	movs	r0, #11
 8009ba8:	f003 faf2 	bl	800d190 <LoRaMacConfirmQueueIsCmdActive>
 8009bac:	b188      	cbz	r0, 8009bd2 <LoRaMacCheckForBeaconAcquisition+0x2e>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8009bae:	4b0b      	ldr	r3, [pc, #44]	; (8009bdc <LoRaMacCheckForBeaconAcquisition+0x38>)
 8009bb0:	f893 0495 	ldrb.w	r0, [r3, #1173]	; 0x495
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8009bb4:	f010 0f01 	tst.w	r0, #1
 8009bb8:	d10d      	bne.n	8009bd6 <LoRaMacCheckForBeaconAcquisition+0x32>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8009bba:	f010 0004 	ands.w	r0, r0, #4
 8009bbe:	d009      	beq.n	8009bd4 <LoRaMacCheckForBeaconAcquisition+0x30>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009bc0:	461a      	mov	r2, r3
 8009bc2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009bc6:	f023 0302 	bic.w	r3, r3, #2
 8009bca:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 8009bce:	2001      	movs	r0, #1
 8009bd0:	e000      	b.n	8009bd4 <LoRaMacCheckForBeaconAcquisition+0x30>
    return 0x00;
 8009bd2:	2000      	movs	r0, #0
}
 8009bd4:	bd08      	pop	{r3, pc}
    return 0x00;
 8009bd6:	2000      	movs	r0, #0
 8009bd8:	e7fc      	b.n	8009bd4 <LoRaMacCheckForBeaconAcquisition+0x30>
 8009bda:	bf00      	nop
 8009bdc:	20000820 	.word	0x20000820

08009be0 <GetFCntDown>:
{
 8009be0:	b538      	push	{r3, r4, r5, lr}
 8009be2:	9c04      	ldr	r4, [sp, #16]
 8009be4:	9d05      	ldr	r5, [sp, #20]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8009be6:	b1f2      	cbz	r2, 8009c26 <GetFCntDown+0x46>
 8009be8:	4694      	mov	ip, r2
 8009bea:	b1f4      	cbz	r4, 8009c2a <GetFCntDown+0x4a>
 8009bec:	b1fd      	cbz	r5, 8009c2e <GetFCntDown+0x4e>
    switch( addrID )
 8009bee:	b188      	cbz	r0, 8009c14 <GetFCntDown+0x34>
 8009bf0:	2801      	cmp	r0, #1
 8009bf2:	d11e      	bne.n	8009c32 <GetFCntDown+0x52>
            if( lrWanVersion.Fields.Minor == 1 )
 8009bf4:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	d002      	beq.n	8009c02 <GetFCntDown+0x22>
                *fCntID = FCNT_DOWN;
 8009bfc:	2303      	movs	r3, #3
 8009bfe:	7023      	strb	r3, [r4, #0]
 8009c00:	e00a      	b.n	8009c18 <GetFCntDown+0x38>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8009c02:	b121      	cbz	r1, 8009c0e <GetFCntDown+0x2e>
 8009c04:	2903      	cmp	r1, #3
 8009c06:	d002      	beq.n	8009c0e <GetFCntDown+0x2e>
                    *fCntID = N_FCNT_DOWN;
 8009c08:	2301      	movs	r3, #1
 8009c0a:	7023      	strb	r3, [r4, #0]
 8009c0c:	e004      	b.n	8009c18 <GetFCntDown+0x38>
                    *fCntID = A_FCNT_DOWN;
 8009c0e:	2302      	movs	r3, #2
 8009c10:	7023      	strb	r3, [r4, #0]
 8009c12:	e001      	b.n	8009c18 <GetFCntDown+0x38>
            *fCntID = MC_FCNT_DOWN_0;
 8009c14:	2304      	movs	r3, #4
 8009c16:	7023      	strb	r3, [r4, #0]
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 8009c18:	462a      	mov	r2, r5
 8009c1a:	f8bc 100e 	ldrh.w	r1, [ip, #14]
 8009c1e:	7820      	ldrb	r0, [r4, #0]
 8009c20:	f003 fcd8 	bl	800d5d4 <LoRaMacCryptoGetFCntDown>
}
 8009c24:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 8009c26:	2009      	movs	r0, #9
 8009c28:	e7fc      	b.n	8009c24 <GetFCntDown+0x44>
 8009c2a:	2009      	movs	r0, #9
 8009c2c:	e7fa      	b.n	8009c24 <GetFCntDown+0x44>
 8009c2e:	2009      	movs	r0, #9
 8009c30:	e7f8      	b.n	8009c24 <GetFCntDown+0x44>
    switch( addrID )
 8009c32:	2005      	movs	r0, #5
 8009c34:	e7f6      	b.n	8009c24 <GetFCntDown+0x44>

08009c36 <RemoveMacCommands>:
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8009c36:	2801      	cmp	r0, #1
 8009c38:	d900      	bls.n	8009c3c <RemoveMacCommands+0x6>
 8009c3a:	4770      	bx	lr
{
 8009c3c:	b508      	push	{r3, lr}
        if( request == MCPS_CONFIRMED )
 8009c3e:	2a01      	cmp	r2, #1
 8009c40:	d105      	bne.n	8009c4e <RemoveMacCommands+0x18>
            if( fCtrl.Bits.Ack == 1 )
 8009c42:	f011 0f20 	tst.w	r1, #32
 8009c46:	d004      	beq.n	8009c52 <RemoveMacCommands+0x1c>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8009c48:	f003 f93e 	bl	800cec8 <LoRaMacCommandsRemoveStickyAnsCmds>
 8009c4c:	e001      	b.n	8009c52 <RemoveMacCommands+0x1c>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8009c4e:	f003 f93b 	bl	800cec8 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8009c52:	bd08      	pop	{r3, pc}

08009c54 <ProcessMacCommands>:
{
 8009c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c58:	b08f      	sub	sp, #60	; 0x3c
 8009c5a:	4698      	mov	r8, r3
    uint8_t status = 0;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8009c62:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 8009c66:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8009c6a:	2b01      	cmp	r3, #1
 8009c6c:	f200 82d9 	bhi.w	800a222 <ProcessMacCommands+0x5ce>
 8009c70:	4605      	mov	r5, r0
 8009c72:	460c      	mov	r4, r1
 8009c74:	4617      	mov	r7, r2
    bool adrBlockFound = false;
 8009c76:	f04f 0900 	mov.w	r9, #0
    while( macIndex < commandsSize )
 8009c7a:	42bc      	cmp	r4, r7
 8009c7c:	f080 82d1 	bcs.w	800a222 <ProcessMacCommands+0x5ce>
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8009c80:	5d28      	ldrb	r0, [r5, r4]
 8009c82:	f003 f989 	bl	800cf98 <LoRaMacCommandsGetCmdSize>
 8009c86:	4420      	add	r0, r4
 8009c88:	42b8      	cmp	r0, r7
 8009c8a:	f300 82ca 	bgt.w	800a222 <ProcessMacCommands+0x5ce>
        switch( payload[macIndex++] )
 8009c8e:	1c66      	adds	r6, r4, #1
 8009c90:	b2f6      	uxtb	r6, r6
 8009c92:	5d2b      	ldrb	r3, [r5, r4]
 8009c94:	3b02      	subs	r3, #2
 8009c96:	2b11      	cmp	r3, #17
 8009c98:	f200 82c3 	bhi.w	800a222 <ProcessMacCommands+0x5ce>
 8009c9c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009ca0:	00280012 	.word	0x00280012
 8009ca4:	00c000ad 	.word	0x00c000ad
 8009ca8:	011e0106 	.word	0x011e0106
 8009cac:	01740157 	.word	0x01740157
 8009cb0:	02c101bf 	.word	0x02c101bf
 8009cb4:	01ef02c1 	.word	0x01ef02c1
 8009cb8:	02c102c1 	.word	0x02c102c1
 8009cbc:	02680251 	.word	0x02680251
 8009cc0:	02a10287 	.word	0x02a10287
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8009cc4:	2004      	movs	r0, #4
 8009cc6:	f003 fa63 	bl	800d190 <LoRaMacConfirmQueueIsCmdActive>
 8009cca:	b908      	cbnz	r0, 8009cd0 <ProcessMacCommands+0x7c>
        switch( payload[macIndex++] )
 8009ccc:	4634      	mov	r4, r6
 8009cce:	e7d4      	b.n	8009c7a <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8009cd0:	2104      	movs	r1, #4
 8009cd2:	2000      	movs	r0, #0
 8009cd4:	f003 fa10 	bl	800d0f8 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8009cd8:	1ca3      	adds	r3, r4, #2
 8009cda:	b2db      	uxtb	r3, r3
 8009cdc:	5da9      	ldrb	r1, [r5, r6]
 8009cde:	4aa7      	ldr	r2, [pc, #668]	; (8009f7c <ProcessMacCommands+0x328>)
 8009ce0:	f882 1460 	strb.w	r1, [r2, #1120]	; 0x460
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8009ce4:	3403      	adds	r4, #3
 8009ce6:	b2e4      	uxtb	r4, r4
 8009ce8:	5ceb      	ldrb	r3, [r5, r3]
 8009cea:	f882 3461 	strb.w	r3, [r2, #1121]	; 0x461
 8009cee:	e7c4      	b.n	8009c7a <ProcessMacCommands+0x26>
                int8_t linkAdrDatarate = DR_0;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	f88d 300a 	strb.w	r3, [sp, #10]
                int8_t linkAdrTxPower = TX_POWER_0;
 8009cf6:	f88d 300b 	strb.w	r3, [sp, #11]
                uint8_t linkAdrNbRep = 0;
 8009cfa:	f88d 300c 	strb.w	r3, [sp, #12]
                uint8_t linkAdrNbBytesParsed = 0;
 8009cfe:	f88d 3014 	strb.w	r3, [sp, #20]
                if( adrBlockFound == false )
 8009d02:	f1b9 0f00 	cmp.w	r9, #0
 8009d06:	d036      	beq.n	8009d76 <ProcessMacCommands+0x122>
                    macIndex += 4;
 8009d08:	3405      	adds	r4, #5
 8009d0a:	b2e4      	uxtb	r4, r4
 8009d0c:	e7b5      	b.n	8009c7a <ProcessMacCommands+0x26>
                            linkAdrReq.PayloadSize = 5;
 8009d0e:	2305      	movs	r3, #5
 8009d10:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8009d14:	e050      	b.n	8009db8 <ProcessMacCommands+0x164>
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 8009d16:	4b9a      	ldr	r3, [pc, #616]	; (8009f80 <ProcessMacCommands+0x32c>)
 8009d18:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8009d1c:	f99d 200a 	ldrsb.w	r2, [sp, #10]
 8009d20:	4293      	cmp	r3, r2
 8009d22:	da03      	bge.n	8009d2c <ProcessMacCommands+0xd8>
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 8009d24:	4b96      	ldr	r3, [pc, #600]	; (8009f80 <ProcessMacCommands+0x32c>)
 8009d26:	2101      	movs	r1, #1
 8009d28:	f883 1109 	strb.w	r1, [r3, #265]	; 0x109
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8009d2c:	4b94      	ldr	r3, [pc, #592]	; (8009f80 <ProcessMacCommands+0x32c>)
 8009d2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 8009d32:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8009d36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 8009d3a:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8009d3e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8009d42:	e04d      	b.n	8009de0 <ProcessMacCommands+0x18c>
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8009d44:	2201      	movs	r2, #1
 8009d46:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 8009d4a:	2003      	movs	r0, #3
 8009d4c:	f003 f85c 	bl	800ce08 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8009d50:	3401      	adds	r4, #1
 8009d52:	b2e4      	uxtb	r4, r4
 8009d54:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8009d58:	498a      	ldr	r1, [pc, #552]	; (8009f84 <ProcessMacCommands+0x330>)
 8009d5a:	fba1 2103 	umull	r2, r1, r1, r3
 8009d5e:	ebb4 0f91 	cmp.w	r4, r1, lsr #2
 8009d62:	d3ef      	bcc.n	8009d44 <ProcessMacCommands+0xf0>
                        macIndex += linkAdrNbBytesParsed - 1;
 8009d64:	441e      	add	r6, r3
 8009d66:	b2f6      	uxtb	r6, r6
 8009d68:	1e74      	subs	r4, r6, #1
 8009d6a:	b2e4      	uxtb	r4, r4
                        if( macIndex >= commandsSize )
 8009d6c:	42a7      	cmp	r7, r4
 8009d6e:	d93a      	bls.n	8009de6 <ProcessMacCommands+0x192>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 8009d70:	5d2b      	ldrb	r3, [r5, r4]
 8009d72:	2b03      	cmp	r3, #3
 8009d74:	d136      	bne.n	8009de4 <ProcessMacCommands+0x190>
                        linkAdrReq.Payload = &payload[macIndex - 1];
 8009d76:	1e73      	subs	r3, r6, #1
 8009d78:	442b      	add	r3, r5
 8009d7a:	9308      	str	r3, [sp, #32]
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8009d7c:	4b80      	ldr	r3, [pc, #512]	; (8009f80 <ProcessMacCommands+0x32c>)
 8009d7e:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 8009d82:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009d86:	f893 1074 	ldrb.w	r1, [r3, #116]	; 0x74
 8009d8a:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8009d8e:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 8009d92:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8009d96:	f993 1038 	ldrsb.w	r1, [r3, #56]	; 0x38
 8009d9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8009d9e:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
 8009da2:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 8009da6:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8009daa:	9307      	str	r3, [sp, #28]
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8009dac:	2a00      	cmp	r2, #0
 8009dae:	d0ae      	beq.n	8009d0e <ProcessMacCommands+0xba>
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8009db0:	1bbb      	subs	r3, r7, r6
 8009db2:	3301      	adds	r3, #1
 8009db4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 8009db8:	ab05      	add	r3, sp, #20
 8009dba:	9301      	str	r3, [sp, #4]
 8009dbc:	ab03      	add	r3, sp, #12
 8009dbe:	9300      	str	r3, [sp, #0]
 8009dc0:	f10d 030b 	add.w	r3, sp, #11
 8009dc4:	f10d 020a 	add.w	r2, sp, #10
 8009dc8:	a907      	add	r1, sp, #28
 8009dca:	486d      	ldr	r0, [pc, #436]	; (8009f80 <ProcessMacCommands+0x32c>)
 8009dcc:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8009dd0:	f003 ffe2 	bl	800dd98 <RegionLinkAdrReq>
 8009dd4:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                        if( ( status & 0x07 ) == 0x07 )
 8009dd8:	f000 0007 	and.w	r0, r0, #7
 8009ddc:	2807      	cmp	r0, #7
 8009dde:	d09a      	beq.n	8009d16 <ProcessMacCommands+0xc2>
{
 8009de0:	2400      	movs	r4, #0
 8009de2:	e7b7      	b.n	8009d54 <ProcessMacCommands+0x100>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 8009de4:	4634      	mov	r4, r6
                    if( macIndex < commandsSize )
 8009de6:	42bc      	cmp	r4, r7
 8009de8:	d204      	bcs.n	8009df4 <ProcessMacCommands+0x1a0>
                        macIndex--;
 8009dea:	3c01      	subs	r4, #1
 8009dec:	b2e4      	uxtb	r4, r4
                    adrBlockFound = true;
 8009dee:	f04f 0901 	mov.w	r9, #1
 8009df2:	e742      	b.n	8009c7a <ProcessMacCommands+0x26>
 8009df4:	f04f 0901 	mov.w	r9, #1
                break;
 8009df8:	e73f      	b.n	8009c7a <ProcessMacCommands+0x26>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 8009dfa:	3402      	adds	r4, #2
 8009dfc:	b2e4      	uxtb	r4, r4
 8009dfe:	5dab      	ldrb	r3, [r5, r6]
 8009e00:	f003 030f 	and.w	r3, r3, #15
 8009e04:	495e      	ldr	r1, [pc, #376]	; (8009f80 <ProcessMacCommands+0x32c>)
 8009e06:	f881 3107 	strb.w	r3, [r1, #263]	; 0x107
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8009e10:	f8a1 310c 	strh.w	r3, [r1, #268]	; 0x10c
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8009e14:	2200      	movs	r2, #0
 8009e16:	a90b      	add	r1, sp, #44	; 0x2c
 8009e18:	2004      	movs	r0, #4
 8009e1a:	f002 fff5 	bl	800ce08 <LoRaMacCommandsAddCmd>
                break;
 8009e1e:	e72c      	b.n	8009c7a <ProcessMacCommands+0x26>
                status = 0x07;
 8009e20:	2307      	movs	r3, #7
 8009e22:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8009e26:	5dab      	ldrb	r3, [r5, r6]
 8009e28:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8009e2c:	f88d 301d 	strb.w	r3, [sp, #29]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8009e30:	57ab      	ldrsb	r3, [r5, r6]
 8009e32:	f003 030f 	and.w	r3, r3, #15
 8009e36:	f88d 301c 	strb.w	r3, [sp, #28]
                macIndex++;
 8009e3a:	1ca3      	adds	r3, r4, #2
 8009e3c:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8009e3e:	1ce1      	adds	r1, r4, #3
 8009e40:	b2c9      	uxtb	r1, r1
 8009e42:	5ceb      	ldrb	r3, [r5, r3]
 8009e44:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009e46:	1d22      	adds	r2, r4, #4
 8009e48:	b2d2      	uxtb	r2, r2
 8009e4a:	5c69      	ldrb	r1, [r5, r1]
 8009e4c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009e50:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009e52:	3405      	adds	r4, #5
 8009e54:	b2e4      	uxtb	r4, r4
 8009e56:	5caa      	ldrb	r2, [r5, r2]
 8009e58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e5c:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency *= 100;
 8009e5e:	2264      	movs	r2, #100	; 0x64
 8009e60:	fb02 f303 	mul.w	r3, r2, r3
 8009e64:	9308      	str	r3, [sp, #32]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8009e66:	a907      	add	r1, sp, #28
 8009e68:	4b45      	ldr	r3, [pc, #276]	; (8009f80 <ProcessMacCommands+0x32c>)
 8009e6a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009e6e:	f003 ffaf 	bl	800ddd0 <RegionRxParamSetupReq>
 8009e72:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                if( ( status & 0x07 ) == 0x07 )
 8009e76:	f000 0307 	and.w	r3, r0, #7
 8009e7a:	2b07      	cmp	r3, #7
 8009e7c:	d007      	beq.n	8009e8e <ProcessMacCommands+0x23a>
                macCmdPayload[0] = status;
 8009e7e:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8009e82:	2201      	movs	r2, #1
 8009e84:	a90b      	add	r1, sp, #44	; 0x2c
 8009e86:	2005      	movs	r0, #5
 8009e88:	f002 ffbe 	bl	800ce08 <LoRaMacCommandsAddCmd>
                break;
 8009e8c:	e6f5      	b.n	8009c7a <ProcessMacCommands+0x26>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8009e8e:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8009e92:	4b3b      	ldr	r3, [pc, #236]	; (8009f80 <ProcessMacCommands+0x32c>)
 8009e94:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8009e98:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8009e9c:	9a08      	ldr	r2, [sp, #32]
 8009e9e:	665a      	str	r2, [r3, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8009ea0:	66da      	str	r2, [r3, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8009ea2:	f89d 201d 	ldrb.w	r2, [sp, #29]
 8009ea6:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8009eaa:	e7e8      	b.n	8009e7e <ProcessMacCommands+0x22a>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8009eac:	4b33      	ldr	r3, [pc, #204]	; (8009f7c <ProcessMacCommands+0x328>)
 8009eae:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8009eb2:	b17b      	cbz	r3, 8009ed4 <ProcessMacCommands+0x280>
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	b17b      	cbz	r3, 8009ed8 <ProcessMacCommands+0x284>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8009eb8:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 8009eba:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8009ebe:	f008 033f 	and.w	r3, r8, #63	; 0x3f
 8009ec2:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8009ec6:	2202      	movs	r2, #2
 8009ec8:	a90b      	add	r1, sp, #44	; 0x2c
 8009eca:	2006      	movs	r0, #6
 8009ecc:	f002 ff9c 	bl	800ce08 <LoRaMacCommandsAddCmd>
        switch( payload[macIndex++] )
 8009ed0:	4634      	mov	r4, r6
                break;
 8009ed2:	e6d2      	b.n	8009c7a <ProcessMacCommands+0x26>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8009ed4:	20ff      	movs	r0, #255	; 0xff
 8009ed6:	e7f0      	b.n	8009eba <ProcessMacCommands+0x266>
 8009ed8:	20ff      	movs	r0, #255	; 0xff
 8009eda:	e7ee      	b.n	8009eba <ProcessMacCommands+0x266>
                status = 0x03;
 8009edc:	2303      	movs	r3, #3
 8009ede:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                newChannelReq.ChannelId = payload[macIndex++];
 8009ee2:	1ca3      	adds	r3, r4, #2
 8009ee4:	b2db      	uxtb	r3, r3
 8009ee6:	57aa      	ldrsb	r2, [r5, r6]
 8009ee8:	f88d 2018 	strb.w	r2, [sp, #24]
                newChannelReq.NewChannel = &chParam;
 8009eec:	aa07      	add	r2, sp, #28
 8009eee:	9205      	str	r2, [sp, #20]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8009ef0:	1ce2      	adds	r2, r4, #3
 8009ef2:	b2d2      	uxtb	r2, r2
 8009ef4:	5ceb      	ldrb	r3, [r5, r3]
 8009ef6:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009ef8:	1d21      	adds	r1, r4, #4
 8009efa:	b2c9      	uxtb	r1, r1
 8009efc:	5caa      	ldrb	r2, [r5, r2]
 8009efe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009f02:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009f04:	1d62      	adds	r2, r4, #5
 8009f06:	b2d2      	uxtb	r2, r2
 8009f08:	5c69      	ldrb	r1, [r5, r1]
 8009f0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8009f0e:	9307      	str	r3, [sp, #28]
                chParam.Frequency *= 100;
 8009f10:	2164      	movs	r1, #100	; 0x64
 8009f12:	fb01 f303 	mul.w	r3, r1, r3
 8009f16:	9307      	str	r3, [sp, #28]
                chParam.Rx1Frequency = 0;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	9308      	str	r3, [sp, #32]
                chParam.DrRange.Value = payload[macIndex++];
 8009f1c:	3406      	adds	r4, #6
 8009f1e:	b2e4      	uxtb	r4, r4
 8009f20:	56ab      	ldrsb	r3, [r5, r2]
 8009f22:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8009f26:	a905      	add	r1, sp, #20
 8009f28:	4b15      	ldr	r3, [pc, #84]	; (8009f80 <ProcessMacCommands+0x32c>)
 8009f2a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009f2e:	f003 ff5e 	bl	800ddee <RegionNewChannelReq>
 8009f32:	b2c3      	uxtb	r3, r0
 8009f34:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 8009f38:	2800      	cmp	r0, #0
 8009f3a:	f6ff ae9e 	blt.w	8009c7a <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 8009f3e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8009f42:	2201      	movs	r2, #1
 8009f44:	a90b      	add	r1, sp, #44	; 0x2c
 8009f46:	2007      	movs	r0, #7
 8009f48:	f002 ff5e 	bl	800ce08 <LoRaMacCommandsAddCmd>
                break;
 8009f4c:	e695      	b.n	8009c7a <ProcessMacCommands+0x26>
                uint8_t delay = payload[macIndex++] & 0x0F;
 8009f4e:	3402      	adds	r4, #2
 8009f50:	b2e4      	uxtb	r4, r4
 8009f52:	5dab      	ldrb	r3, [r5, r6]
                if( delay == 0 )
 8009f54:	f013 030f 	ands.w	r3, r3, #15
 8009f58:	d100      	bne.n	8009f5c <ProcessMacCommands+0x308>
                    delay++;
 8009f5a:	3301      	adds	r3, #1
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8009f5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009f60:	fb02 f303 	mul.w	r3, r2, r3
 8009f64:	4a06      	ldr	r2, [pc, #24]	; (8009f80 <ProcessMacCommands+0x32c>)
 8009f66:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8009f68:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8009f6c:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8009f6e:	2200      	movs	r2, #0
 8009f70:	a90b      	add	r1, sp, #44	; 0x2c
 8009f72:	2008      	movs	r0, #8
 8009f74:	f002 ff48 	bl	800ce08 <LoRaMacCommandsAddCmd>
                break;
 8009f78:	e67f      	b.n	8009c7a <ProcessMacCommands+0x26>
 8009f7a:	bf00      	nop
 8009f7c:	20000820 	.word	0x20000820
 8009f80:	20008000 	.word	0x20008000
 8009f84:	cccccccd 	.word	0xcccccccd
                uint8_t eirpDwellTime = payload[macIndex++];
 8009f88:	3402      	adds	r4, #2
 8009f8a:	b2e4      	uxtb	r4, r4
 8009f8c:	5dab      	ldrb	r3, [r5, r6]
                txParamSetupReq.UplinkDwellTime = 0;
 8009f8e:	2200      	movs	r2, #0
 8009f90:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.DownlinkDwellTime = 0;
 8009f94:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8009f98:	f013 0f20 	tst.w	r3, #32
 8009f9c:	d002      	beq.n	8009fa4 <ProcessMacCommands+0x350>
                    txParamSetupReq.DownlinkDwellTime = 1;
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8009fa4:	f013 0f10 	tst.w	r3, #16
 8009fa8:	d002      	beq.n	8009fb0 <ProcessMacCommands+0x35c>
                    txParamSetupReq.UplinkDwellTime = 1;
 8009faa:	2201      	movs	r2, #1
 8009fac:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8009fb0:	f003 030f 	and.w	r3, r3, #15
 8009fb4:	f88d 300e 	strb.w	r3, [sp, #14]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8009fb8:	a903      	add	r1, sp, #12
 8009fba:	4b9b      	ldr	r3, [pc, #620]	; (800a228 <ProcessMacCommands+0x5d4>)
 8009fbc:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009fc0:	f003 ff24 	bl	800de0c <RegionTxParamSetupReq>
 8009fc4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009fc8:	f43f ae57 	beq.w	8009c7a <ProcessMacCommands+0x26>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8009fcc:	f89d a00c 	ldrb.w	sl, [sp, #12]
 8009fd0:	4e95      	ldr	r6, [pc, #596]	; (800a228 <ProcessMacCommands+0x5d4>)
 8009fd2:	f886 a074 	strb.w	sl, [r6, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8009fd6:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8009fda:	f886 3075 	strb.w	r3, [r6, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8009fde:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8009fe2:	4a92      	ldr	r2, [pc, #584]	; (800a22c <ProcessMacCommands+0x5d8>)
 8009fe4:	5cd0      	ldrb	r0, [r2, r3]
 8009fe6:	f7f6 fc45 	bl	8000874 <__aeabi_ui2f>
 8009fea:	67b0      	str	r0, [r6, #120]	; 0x78
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8009fec:	2302      	movs	r3, #2
 8009fee:	f88d 301c 	strb.w	r3, [sp, #28]
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009ff2:	f88d a01e 	strb.w	sl, [sp, #30]
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009ff6:	a907      	add	r1, sp, #28
 8009ff8:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 8009ffc:	f003 fe34 	bl	800dc68 <RegionGetPhyParam>
 800a000:	9005      	str	r0, [sp, #20]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800a002:	b240      	sxtb	r0, r0
 800a004:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 800a008:	4298      	cmp	r0, r3
 800a00a:	bfb8      	it	lt
 800a00c:	4618      	movlt	r0, r3
 800a00e:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800a012:	2200      	movs	r2, #0
 800a014:	a90b      	add	r1, sp, #44	; 0x2c
 800a016:	2009      	movs	r0, #9
 800a018:	f002 fef6 	bl	800ce08 <LoRaMacCommandsAddCmd>
                break;
 800a01c:	e62d      	b.n	8009c7a <ProcessMacCommands+0x26>
                status = 0x03;
 800a01e:	2303      	movs	r3, #3
 800a020:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                dlChannelReq.ChannelId = payload[macIndex++];
 800a024:	1ca3      	adds	r3, r4, #2
 800a026:	b2db      	uxtb	r3, r3
 800a028:	5daa      	ldrb	r2, [r5, r6]
 800a02a:	f88d 201c 	strb.w	r2, [sp, #28]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800a02e:	1ce1      	adds	r1, r4, #3
 800a030:	b2c9      	uxtb	r1, r1
 800a032:	5ceb      	ldrb	r3, [r5, r3]
 800a034:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800a036:	1d22      	adds	r2, r4, #4
 800a038:	b2d2      	uxtb	r2, r2
 800a03a:	5c69      	ldrb	r1, [r5, r1]
 800a03c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800a040:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800a042:	3405      	adds	r4, #5
 800a044:	b2e4      	uxtb	r4, r4
 800a046:	5caa      	ldrb	r2, [r5, r2]
 800a048:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a04c:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency *= 100;
 800a04e:	2264      	movs	r2, #100	; 0x64
 800a050:	fb02 f303 	mul.w	r3, r2, r3
 800a054:	9308      	str	r3, [sp, #32]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800a056:	a907      	add	r1, sp, #28
 800a058:	4b73      	ldr	r3, [pc, #460]	; (800a228 <ProcessMacCommands+0x5d4>)
 800a05a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a05e:	f003 fee4 	bl	800de2a <RegionDlChannelReq>
 800a062:	b2c3      	uxtb	r3, r0
 800a064:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 800a068:	2800      	cmp	r0, #0
 800a06a:	f6ff ae06 	blt.w	8009c7a <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 800a06e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800a072:	2201      	movs	r2, #1
 800a074:	a90b      	add	r1, sp, #44	; 0x2c
 800a076:	200a      	movs	r0, #10
 800a078:	f002 fec6 	bl	800ce08 <LoRaMacCommandsAddCmd>
                break;
 800a07c:	e5fd      	b.n	8009c7a <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800a07e:	2009      	movs	r0, #9
 800a080:	f003 f886 	bl	800d190 <LoRaMacConfirmQueueIsCmdActive>
 800a084:	b928      	cbnz	r0, 800a092 <ProcessMacCommands+0x43e>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800a086:	4b6a      	ldr	r3, [pc, #424]	; (800a230 <ProcessMacCommands+0x5dc>)
 800a088:	2200      	movs	r2, #0
 800a08a:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
        switch( payload[macIndex++] )
 800a08e:	4634      	mov	r4, r6
 800a090:	e5f3      	b.n	8009c7a <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800a092:	2109      	movs	r1, #9
 800a094:	2000      	movs	r0, #0
 800a096:	f003 f82f 	bl	800d0f8 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 800a09a:	a803      	add	r0, sp, #12
 800a09c:	2300      	movs	r3, #0
 800a09e:	9303      	str	r3, [sp, #12]
 800a0a0:	9304      	str	r3, [sp, #16]
                    SysTime_t sysTime = { 0 };
 800a0a2:	f10d 0a14 	add.w	sl, sp, #20
 800a0a6:	9305      	str	r3, [sp, #20]
 800a0a8:	9306      	str	r3, [sp, #24]
                    SysTime_t sysTimeCurrent = { 0 };
 800a0aa:	f10d 0b1c 	add.w	fp, sp, #28
 800a0ae:	9307      	str	r3, [sp, #28]
 800a0b0:	9308      	str	r3, [sp, #32]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800a0b2:	1ca1      	adds	r1, r4, #2
 800a0b4:	b2c9      	uxtb	r1, r1
 800a0b6:	5dab      	ldrb	r3, [r5, r6]
 800a0b8:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800a0ba:	1ce2      	adds	r2, r4, #3
 800a0bc:	b2d2      	uxtb	r2, r2
 800a0be:	5c69      	ldrb	r1, [r5, r1]
 800a0c0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800a0c4:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800a0c6:	1d21      	adds	r1, r4, #4
 800a0c8:	b2c9      	uxtb	r1, r1
 800a0ca:	5caa      	ldrb	r2, [r5, r2]
 800a0cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a0d0:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800a0d2:	1d62      	adds	r2, r4, #5
 800a0d4:	b2d2      	uxtb	r2, r2
 800a0d6:	5c69      	ldrb	r1, [r5, r1]
 800a0d8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800a0dc:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800a0de:	3406      	adds	r4, #6
 800a0e0:	b2e4      	uxtb	r4, r4
 800a0e2:	5caa      	ldrb	r2, [r5, r2]
 800a0e4:	f8ad 2010 	strh.w	r2, [sp, #16]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800a0e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800a0ec:	fb01 f202 	mul.w	r2, r1, r2
 800a0f0:	0a12      	lsrs	r2, r2, #8
 800a0f2:	f8ad 2010 	strh.w	r2, [sp, #16]
                    sysTime = gpsEpochTime;
 800a0f6:	c803      	ldmia	r0, {r0, r1}
 800a0f8:	e88a 0003 	stmia.w	sl, {r0, r1}
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800a0fc:	4a4d      	ldr	r2, [pc, #308]	; (800a234 <ProcessMacCommands+0x5e0>)
 800a0fe:	441a      	add	r2, r3
 800a100:	9205      	str	r2, [sp, #20]
                    sysTimeCurrent = SysTimeGet( );
 800a102:	4658      	mov	r0, fp
 800a104:	f008 ff52 	bl	8012fac <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800a108:	4e49      	ldr	r6, [pc, #292]	; (800a230 <ProcessMacCommands+0x5dc>)
 800a10a:	f8d6 333c 	ldr.w	r3, [r6, #828]	; 0x33c
 800a10e:	9300      	str	r3, [sp, #0]
 800a110:	f8d6 3338 	ldr.w	r3, [r6, #824]	; 0x338
 800a114:	e89a 0006 	ldmia.w	sl, {r1, r2}
 800a118:	a80c      	add	r0, sp, #48	; 0x30
 800a11a:	f008 ff06 	bl	8012f2a <SysTimeSub>
 800a11e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a120:	9300      	str	r3, [sp, #0]
 800a122:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a124:	e89b 0006 	ldmia.w	fp, {r1, r2}
 800a128:	4650      	mov	r0, sl
 800a12a:	f008 fedf 	bl	8012eec <SysTimeAdd>
                    SysTimeSet( sysTime );
 800a12e:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800a132:	f008 ff19 	bl	8012f68 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800a136:	f002 fdcb 	bl	800ccd0 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800a13a:	2301      	movs	r3, #1
 800a13c:	f886 343c 	strb.w	r3, [r6, #1084]	; 0x43c
 800a140:	e59b      	b.n	8009c7a <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800a142:	200c      	movs	r0, #12
 800a144:	f003 f824 	bl	800d190 <LoRaMacConfirmQueueIsCmdActive>
 800a148:	b908      	cbnz	r0, 800a14e <ProcessMacCommands+0x4fa>
        switch( payload[macIndex++] )
 800a14a:	4634      	mov	r4, r6
 800a14c:	e595      	b.n	8009c7a <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800a14e:	210c      	movs	r1, #12
 800a150:	2000      	movs	r0, #0
 800a152:	f002 ffd1 	bl	800d0f8 <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800a156:	4b36      	ldr	r3, [pc, #216]	; (800a230 <ProcessMacCommands+0x5dc>)
 800a158:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800a15c:	3b04      	subs	r3, #4
 800a15e:	b2db      	uxtb	r3, r3
 800a160:	2b01      	cmp	r3, #1
 800a162:	d801      	bhi.n	800a168 <ProcessMacCommands+0x514>
        switch( payload[macIndex++] )
 800a164:	4634      	mov	r4, r6
 800a166:	e588      	b.n	8009c7a <ProcessMacCommands+0x26>
                        LoRaMacClassBPingSlotInfoAns( );
 800a168:	f002 fdae 	bl	800ccc8 <LoRaMacClassBPingSlotInfoAns>
        switch( payload[macIndex++] )
 800a16c:	4634      	mov	r4, r6
 800a16e:	e584      	b.n	8009c7a <ProcessMacCommands+0x26>
                frequency = ( uint32_t )payload[macIndex++];
 800a170:	1ca2      	adds	r2, r4, #2
 800a172:	b2d2      	uxtb	r2, r2
 800a174:	5dab      	ldrb	r3, [r5, r6]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800a176:	1ce1      	adds	r1, r4, #3
 800a178:	b2c9      	uxtb	r1, r1
 800a17a:	5caa      	ldrb	r2, [r5, r2]
 800a17c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800a180:	1d22      	adds	r2, r4, #4
 800a182:	b2d2      	uxtb	r2, r2
 800a184:	5c69      	ldrb	r1, [r5, r1]
 800a186:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                datarate = payload[macIndex++] & 0x0F;
 800a18a:	3405      	adds	r4, #5
 800a18c:	b2e4      	uxtb	r4, r4
 800a18e:	5ca8      	ldrb	r0, [r5, r2]
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800a190:	2164      	movs	r1, #100	; 0x64
 800a192:	fb03 f101 	mul.w	r1, r3, r1
 800a196:	f000 000f 	and.w	r0, r0, #15
 800a19a:	f002 fd96 	bl	800ccca <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 800a19e:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	a90b      	add	r1, sp, #44	; 0x2c
 800a1a6:	2011      	movs	r0, #17
 800a1a8:	f002 fe2e 	bl	800ce08 <LoRaMacCommandsAddCmd>
                break;
 800a1ac:	e565      	b.n	8009c7a <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800a1ae:	200d      	movs	r0, #13
 800a1b0:	f002 ffee 	bl	800d190 <LoRaMacConfirmQueueIsCmdActive>
 800a1b4:	b908      	cbnz	r0, 800a1ba <ProcessMacCommands+0x566>
        switch( payload[macIndex++] )
 800a1b6:	4634      	mov	r4, r6
 800a1b8:	e55f      	b.n	8009c7a <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800a1ba:	210d      	movs	r1, #13
 800a1bc:	2000      	movs	r0, #0
 800a1be:	f002 ff9b 	bl	800d0f8 <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800a1c2:	1ca2      	adds	r2, r4, #2
 800a1c4:	b2d2      	uxtb	r2, r2
 800a1c6:	5da8      	ldrb	r0, [r5, r6]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800a1c8:	1ce3      	adds	r3, r4, #3
 800a1ca:	b2db      	uxtb	r3, r3
 800a1cc:	5cae      	ldrb	r6, [r5, r2]
                    beaconTimingChannel = payload[macIndex++];
 800a1ce:	3404      	adds	r4, #4
 800a1d0:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800a1d2:	4a19      	ldr	r2, [pc, #100]	; (800a238 <ProcessMacCommands+0x5e4>)
 800a1d4:	6812      	ldr	r2, [r2, #0]
 800a1d6:	5ce9      	ldrb	r1, [r5, r3]
 800a1d8:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 800a1dc:	f002 fd77 	bl	800ccce <LoRaMacClassBBeaconTimingAns>
 800a1e0:	e54b      	b.n	8009c7a <ProcessMacCommands+0x26>
                    frequency = ( uint32_t )payload[macIndex++];
 800a1e2:	1ca1      	adds	r1, r4, #2
 800a1e4:	b2c9      	uxtb	r1, r1
 800a1e6:	5dab      	ldrb	r3, [r5, r6]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800a1e8:	1ce2      	adds	r2, r4, #3
 800a1ea:	b2d2      	uxtb	r2, r2
 800a1ec:	5c68      	ldrb	r0, [r5, r1]
 800a1ee:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800a1f2:	3404      	adds	r4, #4
 800a1f4:	b2e4      	uxtb	r4, r4
 800a1f6:	5ca8      	ldrb	r0, [r5, r2]
 800a1f8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800a1fc:	2064      	movs	r0, #100	; 0x64
 800a1fe:	fb03 f000 	mul.w	r0, r3, r0
 800a202:	f002 fd66 	bl	800ccd2 <LoRaMacClassBBeaconFreqReq>
 800a206:	b140      	cbz	r0, 800a21a <ProcessMacCommands+0x5c6>
                        macCmdPayload[0] = 1;
 800a208:	2301      	movs	r3, #1
 800a20a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800a20e:	2201      	movs	r2, #1
 800a210:	a90b      	add	r1, sp, #44	; 0x2c
 800a212:	2013      	movs	r0, #19
 800a214:	f002 fdf8 	bl	800ce08 <LoRaMacCommandsAddCmd>
                break;
 800a218:	e52f      	b.n	8009c7a <ProcessMacCommands+0x26>
                        macCmdPayload[0] = 0;
 800a21a:	2300      	movs	r3, #0
 800a21c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800a220:	e7f5      	b.n	800a20e <ProcessMacCommands+0x5ba>
}
 800a222:	b00f      	add	sp, #60	; 0x3c
 800a224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a228:	20008000 	.word	0x20008000
 800a22c:	0801485c 	.word	0x0801485c
 800a230:	20000820 	.word	0x20000820
 800a234:	12d53d80 	.word	0x12d53d80
 800a238:	20000dd0 	.word	0x20000dd0

0800a23c <ProcessRadioRxDone>:
{
 800a23c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a240:	b0a1      	sub	sp, #132	; 0x84
    uint8_t *payload = RxDoneParams.Payload;
 800a242:	4b96      	ldr	r3, [pc, #600]	; (800a49c <ProcessRadioRxDone+0x260>)
 800a244:	685e      	ldr	r6, [r3, #4]
    uint16_t size = RxDoneParams.Size;
 800a246:	891d      	ldrh	r5, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 800a248:	f9b3 900a 	ldrsh.w	r9, [r3, #10]
    int8_t snr = RxDoneParams.Snr;
 800a24c:	f993 700c 	ldrsb.w	r7, [r3, #12]
    uint32_t downLinkCounter = 0;
 800a250:	2300      	movs	r3, #0
 800a252:	9303      	str	r3, [sp, #12]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800a254:	4a92      	ldr	r2, [pc, #584]	; (800a4a0 <ProcessRadioRxDone+0x264>)
 800a256:	f8d2 80d4 	ldr.w	r8, [r2, #212]	; 0xd4
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800a25a:	4a92      	ldr	r2, [pc, #584]	; (800a4a4 <ProcessRadioRxDone+0x268>)
 800a25c:	7811      	ldrb	r1, [r2, #0]
 800a25e:	f363 0100 	bfi	r1, r3, #0, #1
 800a262:	7011      	strb	r1, [r2, #0]
    MacCtx.McpsConfirm.AckReceived = false;
 800a264:	4c90      	ldr	r4, [pc, #576]	; (800a4a8 <ProcessRadioRxDone+0x26c>)
 800a266:	f884 3448 	strb.w	r3, [r4, #1096]	; 0x448
    MacCtx.RxStatus.Rssi = rssi;
 800a26a:	f8a4 9490 	strh.w	r9, [r4, #1168]	; 0x490
    MacCtx.RxStatus.Snr = snr;
 800a26e:	f884 7492 	strb.w	r7, [r4, #1170]	; 0x492
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800a272:	f894 2494 	ldrb.w	r2, [r4, #1172]	; 0x494
 800a276:	f884 2493 	strb.w	r2, [r4, #1171]	; 0x493
    MacCtx.McpsIndication.Port = 0;
 800a27a:	f884 3427 	strb.w	r3, [r4, #1063]	; 0x427
    MacCtx.McpsIndication.Multicast = 0;
 800a27e:	f884 3426 	strb.w	r3, [r4, #1062]	; 0x426
    MacCtx.McpsIndication.FramePending = 0;
 800a282:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
    MacCtx.McpsIndication.Buffer = NULL;
 800a286:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    MacCtx.McpsIndication.BufferSize = 0;
 800a28a:	f884 3430 	strb.w	r3, [r4, #1072]	; 0x430
    MacCtx.McpsIndication.RxData = false;
 800a28e:	f884 3431 	strb.w	r3, [r4, #1073]	; 0x431
    MacCtx.McpsIndication.AckReceived = false;
 800a292:	f884 3432 	strb.w	r3, [r4, #1074]	; 0x432
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800a296:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800a29a:	f884 3424 	strb.w	r3, [r4, #1060]	; 0x424
    MacCtx.McpsIndication.DevAddress = 0;
 800a29e:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800a2a2:	f884 343c 	strb.w	r3, [r4, #1084]	; 0x43c
    MacCtx.McpsIndication.ResponseTimeout = 0;
 800a2a6:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
    Radio.Sleep( );
 800a2aa:	4b80      	ldr	r3, [pc, #512]	; (800a4ac <ProcessRadioRxDone+0x270>)
 800a2ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ae:	4798      	blx	r3
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800a2b0:	f894 3493 	ldrb.w	r3, [r4, #1171]	; 0x493
 800a2b4:	b1c3      	cbz	r3, 800a2e8 <ProcessRadioRxDone+0xac>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800a2b6:	4629      	mov	r1, r5
 800a2b8:	4630      	mov	r0, r6
 800a2ba:	f002 fcf2 	bl	800cca2 <LoRaMacClassBRxBeacon>
 800a2be:	b9c0      	cbnz	r0, 800a2f2 <ProcessRadioRxDone+0xb6>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800a2c0:	4b77      	ldr	r3, [pc, #476]	; (800a4a0 <ProcessRadioRxDone+0x264>)
 800a2c2:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800a2c6:	2b01      	cmp	r3, #1
 800a2c8:	d019      	beq.n	800a2fe <ProcessRadioRxDone+0xc2>
    macHdr.Value = payload[pktHeaderLen++];
 800a2ca:	7834      	ldrb	r4, [r6, #0]
    switch( macHdr.Bits.MType )
 800a2cc:	0963      	lsrs	r3, r4, #5
 800a2ce:	3b01      	subs	r3, #1
 800a2d0:	2b06      	cmp	r3, #6
 800a2d2:	f200 82d4 	bhi.w	800a87e <ProcessRadioRxDone+0x642>
 800a2d6:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a2da:	002f      	.short	0x002f
 800a2dc:	00b502d2 	.word	0x00b502d2
 800a2e0:	00b102d2 	.word	0x00b102d2
 800a2e4:	02a202d2 	.word	0x02a202d2
        TimerStop( &MacCtx.RxWindowTimer2 );
 800a2e8:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800a2ec:	f008 ff4c 	bl	8013188 <UTIL_TIMER_Stop>
 800a2f0:	e7e1      	b.n	800a2b6 <ProcessRadioRxDone+0x7a>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800a2f2:	4b6d      	ldr	r3, [pc, #436]	; (800a4a8 <ProcessRadioRxDone+0x26c>)
 800a2f4:	f8a3 9482 	strh.w	r9, [r3, #1154]	; 0x482
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800a2f8:	f883 7484 	strb.w	r7, [r3, #1156]	; 0x484
        return;
 800a2fc:	e2bc      	b.n	800a878 <ProcessRadioRxDone+0x63c>
        if( LoRaMacClassBIsPingExpected( ) == true )
 800a2fe:	f002 fcd4 	bl	800ccaa <LoRaMacClassBIsPingExpected>
 800a302:	b150      	cbz	r0, 800a31a <ProcessRadioRxDone+0xde>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a304:	2000      	movs	r0, #0
 800a306:	f002 fcc5 	bl	800cc94 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800a30a:	2000      	movs	r0, #0
 800a30c:	f002 fcc7 	bl	800cc9e <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800a310:	4b65      	ldr	r3, [pc, #404]	; (800a4a8 <ProcessRadioRxDone+0x26c>)
 800a312:	2204      	movs	r2, #4
 800a314:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
 800a318:	e7d7      	b.n	800a2ca <ProcessRadioRxDone+0x8e>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800a31a:	f002 fcc8 	bl	800ccae <LoRaMacClassBIsMulticastExpected>
 800a31e:	2800      	cmp	r0, #0
 800a320:	d0d3      	beq.n	800a2ca <ProcessRadioRxDone+0x8e>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a322:	2000      	movs	r0, #0
 800a324:	f002 fcb7 	bl	800cc96 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800a328:	2000      	movs	r0, #0
 800a32a:	f002 fcb9 	bl	800cca0 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800a32e:	4b5e      	ldr	r3, [pc, #376]	; (800a4a8 <ProcessRadioRxDone+0x26c>)
 800a330:	2205      	movs	r2, #5
 800a332:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
 800a336:	e7c8      	b.n	800a2ca <ProcessRadioRxDone+0x8e>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800a338:	2d10      	cmp	r5, #16
 800a33a:	d962      	bls.n	800a402 <ProcessRadioRxDone+0x1c6>
            macMsgJoinAccept.Buffer = payload;
 800a33c:	9604      	str	r6, [sp, #16]
            macMsgJoinAccept.BufSize = size;
 800a33e:	b2ed      	uxtb	r5, r5
 800a340:	f88d 5014 	strb.w	r5, [sp, #20]
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800a344:	4b56      	ldr	r3, [pc, #344]	; (800a4a0 <ProcessRadioRxDone+0x264>)
 800a346:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d160      	bne.n	800a410 <ProcessRadioRxDone+0x1d4>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800a34e:	f006 fced 	bl	8010d2c <SecureElementGetJoinEui>
 800a352:	4601      	mov	r1, r0
 800a354:	aa04      	add	r2, sp, #16
 800a356:	20ff      	movs	r0, #255	; 0xff
 800a358:	f003 fa90 	bl	800d87c <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800a35c:	2800      	cmp	r0, #0
 800a35e:	d163      	bne.n	800a428 <ProcessRadioRxDone+0x1ec>
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800a360:	f89d 2019 	ldrb.w	r2, [sp, #25]
 800a364:	4b4e      	ldr	r3, [pc, #312]	; (800a4a0 <ProcessRadioRxDone+0x264>)
 800a366:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800a36a:	f89d 101a 	ldrb.w	r1, [sp, #26]
 800a36e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800a372:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800a376:	f89d 101b 	ldrb.w	r1, [sp, #27]
 800a37a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800a37e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800a382:	9a07      	ldr	r2, [sp, #28]
 800a384:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800a388:	f89d 2020 	ldrb.w	r2, [sp, #32]
 800a38c:	f3c2 1102 	ubfx	r1, r2, #4, #3
 800a390:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800a394:	f3c2 0203 	ubfx	r2, r2, #0, #4
 800a398:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800a39c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800a3a0:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 800a3a4:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800a3a6:	b90a      	cbnz	r2, 800a3ac <ProcessRadioRxDone+0x170>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800a3a8:	2201      	movs	r2, #1
 800a3aa:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800a3ac:	4c3c      	ldr	r4, [pc, #240]	; (800a4a0 <ProcessRadioRxDone+0x264>)
 800a3ae:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a3b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a3b4:	fb02 f303 	mul.w	r3, r2, r3
 800a3b8:	6523      	str	r3, [r4, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800a3ba:	4413      	add	r3, r2
 800a3bc:	6563      	str	r3, [r4, #84]	; 0x54
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800a3c4:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 800a3c8:	931e      	str	r3, [sp, #120]	; 0x78
                applyCFList.Size = size - 17;
 800a3ca:	3d11      	subs	r5, #17
 800a3cc:	f88d 507c 	strb.w	r5, [sp, #124]	; 0x7c
                applyCFList.JoinChannel = MacCtx.Channel;
 800a3d0:	4b35      	ldr	r3, [pc, #212]	; (800a4a8 <ProcessRadioRxDone+0x26c>)
 800a3d2:	f893 341f 	ldrb.w	r3, [r3, #1055]	; 0x41f
 800a3d6:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800a3da:	a91d      	add	r1, sp, #116	; 0x74
 800a3dc:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a3e0:	f003 fc86 	bl	800dcf0 <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800a3e4:	2302      	movs	r3, #2
 800a3e6:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800a3ea:	2001      	movs	r0, #1
 800a3ec:	f002 fed0 	bl	800d190 <LoRaMacConfirmQueueIsCmdActive>
 800a3f0:	b9a8      	cbnz	r0, 800a41e <ProcessRadioRxDone+0x1e2>
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800a3f2:	4a2d      	ldr	r2, [pc, #180]	; (800a4a8 <ProcessRadioRxDone+0x26c>)
 800a3f4:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800a3f8:	f043 0308 	orr.w	r3, r3, #8
 800a3fc:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
            break;
 800a400:	e227      	b.n	800a852 <ProcessRadioRxDone+0x616>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a402:	4b29      	ldr	r3, [pc, #164]	; (800a4a8 <ProcessRadioRxDone+0x26c>)
 800a404:	2201      	movs	r2, #1
 800a406:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800a40a:	f7ff fbab 	bl	8009b64 <PrepareRxDoneAbort>
                return;
 800a40e:	e233      	b.n	800a878 <ProcessRadioRxDone+0x63c>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a410:	4b25      	ldr	r3, [pc, #148]	; (800a4a8 <ProcessRadioRxDone+0x26c>)
 800a412:	2201      	movs	r2, #1
 800a414:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800a418:	f7ff fba4 	bl	8009b64 <PrepareRxDoneAbort>
                return;
 800a41c:	e22c      	b.n	800a878 <ProcessRadioRxDone+0x63c>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800a41e:	2101      	movs	r1, #1
 800a420:	2000      	movs	r0, #0
 800a422:	f002 fe69 	bl	800d0f8 <LoRaMacConfirmQueueSetStatus>
 800a426:	e7e4      	b.n	800a3f2 <ProcessRadioRxDone+0x1b6>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800a428:	2001      	movs	r0, #1
 800a42a:	f002 feb1 	bl	800d190 <LoRaMacConfirmQueueIsCmdActive>
 800a42e:	2800      	cmp	r0, #0
 800a430:	d0df      	beq.n	800a3f2 <ProcessRadioRxDone+0x1b6>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800a432:	2101      	movs	r1, #1
 800a434:	2007      	movs	r0, #7
 800a436:	f002 fe5f 	bl	800d0f8 <LoRaMacConfirmQueueSetStatus>
 800a43a:	e7da      	b.n	800a3f2 <ProcessRadioRxDone+0x1b6>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800a43c:	4b1a      	ldr	r3, [pc, #104]	; (800a4a8 <ProcessRadioRxDone+0x26c>)
 800a43e:	2201      	movs	r2, #1
 800a440:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a444:	4b16      	ldr	r3, [pc, #88]	; (800a4a0 <ProcessRadioRxDone+0x264>)
 800a446:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800a44a:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800a44e:	4a16      	ldr	r2, [pc, #88]	; (800a4a8 <ProcessRadioRxDone+0x26c>)
 800a450:	f992 2428 	ldrsb.w	r2, [r2, #1064]	; 0x428
 800a454:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800a458:	220d      	movs	r2, #13
 800a45a:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800a45e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a462:	b113      	cbz	r3, 800a46a <ProcessRadioRxDone+0x22e>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800a464:	230e      	movs	r3, #14
 800a466:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a46a:	a91b      	add	r1, sp, #108	; 0x6c
 800a46c:	4b0c      	ldr	r3, [pc, #48]	; (800a4a0 <ProcessRadioRxDone+0x264>)
 800a46e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a472:	f003 fbf9 	bl	800dc68 <RegionGetPhyParam>
 800a476:	901a      	str	r0, [sp, #104]	; 0x68
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800a478:	f1a5 030d 	sub.w	r3, r5, #13
 800a47c:	b21b      	sxth	r3, r3
 800a47e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a482:	b200      	sxth	r0, r0
 800a484:	4283      	cmp	r3, r0
 800a486:	dc01      	bgt.n	800a48c <ProcessRadioRxDone+0x250>
 800a488:	2d0b      	cmp	r5, #11
 800a48a:	d811      	bhi.n	800a4b0 <ProcessRadioRxDone+0x274>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a48c:	4b06      	ldr	r3, [pc, #24]	; (800a4a8 <ProcessRadioRxDone+0x26c>)
 800a48e:	2201      	movs	r2, #1
 800a490:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800a494:	f7ff fb66 	bl	8009b64 <PrepareRxDoneAbort>
                return;
 800a498:	e1ee      	b.n	800a878 <ProcessRadioRxDone+0x63c>
 800a49a:	bf00      	nop
 800a49c:	20000dd0 	.word	0x20000dd0
 800a4a0:	20008000 	.word	0x20008000
 800a4a4:	2000081c 	.word	0x2000081c
 800a4a8:	20000820 	.word	0x20000820
 800a4ac:	08014f0c 	.word	0x08014f0c
            macMsgData.Buffer = payload;
 800a4b0:	960e      	str	r6, [sp, #56]	; 0x38
            macMsgData.BufSize = size;
 800a4b2:	f88d 503c 	strb.w	r5, [sp, #60]	; 0x3c
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800a4b6:	4bba      	ldr	r3, [pc, #744]	; (800a7a0 <ProcessRadioRxDone+0x564>)
 800a4b8:	9317      	str	r3, [sp, #92]	; 0x5c
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800a4ba:	23ff      	movs	r3, #255	; 0xff
 800a4bc:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800a4c0:	a80e      	add	r0, sp, #56	; 0x38
 800a4c2:	f003 faa1 	bl	800da08 <LoRaMacParserData>
 800a4c6:	2800      	cmp	r0, #0
 800a4c8:	d142      	bne.n	800a550 <ProcessRadioRxDone+0x314>
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800a4ca:	4bb6      	ldr	r3, [pc, #728]	; (800a7a4 <ProcessRadioRxDone+0x568>)
 800a4cc:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	d044      	beq.n	800a55e <ProcessRadioRxDone+0x322>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800a4d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a4d6:	4bb4      	ldr	r3, [pc, #720]	; (800a7a8 <ProcessRadioRxDone+0x56c>)
 800a4d8:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800a4dc:	f10d 010a 	add.w	r1, sp, #10
 800a4e0:	a80e      	add	r0, sp, #56	; 0x38
 800a4e2:	f7ff f9d5 	bl	8009890 <DetermineFrameType>
 800a4e6:	4605      	mov	r5, r0
 800a4e8:	2800      	cmp	r0, #0
 800a4ea:	d163      	bne.n	800a5b4 <ProcessRadioRxDone+0x378>
            downLinkCounter = 0;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	9303      	str	r3, [sp, #12]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d065      	beq.n	800a5c2 <ProcessRadioRxDone+0x386>
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800a4f6:	2601      	movs	r6, #1
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800a4f8:	2d01      	cmp	r5, #1
 800a4fa:	d10a      	bne.n	800a512 <ProcessRadioRxDone+0x2d6>
 800a4fc:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800a500:	2b03      	cmp	r3, #3
 800a502:	f040 808a 	bne.w	800a61a <ProcessRadioRxDone+0x3de>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800a506:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800a50a:	f013 0f60 	tst.w	r3, #96	; 0x60
 800a50e:	f040 8084 	bne.w	800a61a <ProcessRadioRxDone+0x3de>
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 800a512:	ab03      	add	r3, sp, #12
 800a514:	9301      	str	r3, [sp, #4]
 800a516:	f10d 030b 	add.w	r3, sp, #11
 800a51a:	9300      	str	r3, [sp, #0]
 800a51c:	4ba1      	ldr	r3, [pc, #644]	; (800a7a4 <ProcessRadioRxDone+0x568>)
 800a51e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800a522:	aa0e      	add	r2, sp, #56	; 0x38
 800a524:	f89d 100a 	ldrb.w	r1, [sp, #10]
 800a528:	4630      	mov	r0, r6
 800a52a:	f7ff fb59 	bl	8009be0 <GetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800a52e:	2800      	cmp	r0, #0
 800a530:	d07f      	beq.n	800a632 <ProcessRadioRxDone+0x3f6>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800a532:	2807      	cmp	r0, #7
 800a534:	d078      	beq.n	800a628 <ProcessRadioRxDone+0x3ec>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a536:	4b9c      	ldr	r3, [pc, #624]	; (800a7a8 <ProcessRadioRxDone+0x56c>)
 800a538:	2201      	movs	r2, #1
 800a53a:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800a53e:	9a03      	ldr	r2, [sp, #12]
 800a540:	4b99      	ldr	r3, [pc, #612]	; (800a7a8 <ProcessRadioRxDone+0x56c>)
 800a542:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800a546:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
                PrepareRxDoneAbort( );
 800a54a:	f7ff fb0b 	bl	8009b64 <PrepareRxDoneAbort>
                return;
 800a54e:	e193      	b.n	800a878 <ProcessRadioRxDone+0x63c>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a550:	4b95      	ldr	r3, [pc, #596]	; (800a7a8 <ProcessRadioRxDone+0x56c>)
 800a552:	2201      	movs	r2, #1
 800a554:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800a558:	f7ff fb04 	bl	8009b64 <PrepareRxDoneAbort>
                return;
 800a55c:	e18c      	b.n	800a878 <ProcessRadioRxDone+0x63c>
                if( LoRaMacClassBIsPingExpected( ) == true )
 800a55e:	f002 fba4 	bl	800ccaa <LoRaMacClassBIsPingExpected>
 800a562:	b188      	cbz	r0, 800a588 <ProcessRadioRxDone+0x34c>
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a564:	2000      	movs	r0, #0
 800a566:	f002 fb95 	bl	800cc94 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 800a56a:	2000      	movs	r0, #0
 800a56c:	f002 fb97 	bl	800cc9e <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800a570:	4b8d      	ldr	r3, [pc, #564]	; (800a7a8 <ProcessRadioRxDone+0x56c>)
 800a572:	2204      	movs	r2, #4
 800a574:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800a578:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 800a57c:	f3c1 1100 	ubfx	r1, r1, #4, #1
 800a580:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a582:	f002 fbab 	bl	800ccdc <LoRaMacClassBSetFPendingBit>
 800a586:	e7a5      	b.n	800a4d4 <ProcessRadioRxDone+0x298>
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800a588:	f002 fb91 	bl	800ccae <LoRaMacClassBIsMulticastExpected>
 800a58c:	2800      	cmp	r0, #0
 800a58e:	d0a1      	beq.n	800a4d4 <ProcessRadioRxDone+0x298>
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a590:	2000      	movs	r0, #0
 800a592:	f002 fb80 	bl	800cc96 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800a596:	2000      	movs	r0, #0
 800a598:	f002 fb82 	bl	800cca0 <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800a59c:	4b82      	ldr	r3, [pc, #520]	; (800a7a8 <ProcessRadioRxDone+0x56c>)
 800a59e:	2205      	movs	r2, #5
 800a5a0:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800a5a4:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 800a5a8:	f3c1 1100 	ubfx	r1, r1, #4, #1
 800a5ac:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a5ae:	f002 fb95 	bl	800ccdc <LoRaMacClassBSetFPendingBit>
 800a5b2:	e78f      	b.n	800a4d4 <ProcessRadioRxDone+0x298>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a5b4:	4b7c      	ldr	r3, [pc, #496]	; (800a7a8 <ProcessRadioRxDone+0x56c>)
 800a5b6:	2201      	movs	r2, #1
 800a5b8:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800a5bc:	f7ff fad2 	bl	8009b64 <PrepareRxDoneAbort>
                return;
 800a5c0:	e15a      	b.n	800a878 <ProcessRadioRxDone+0x63c>
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	4a77      	ldr	r2, [pc, #476]	; (800a7a4 <ProcessRadioRxDone+0x568>)
 800a5c6:	212c      	movs	r1, #44	; 0x2c
 800a5c8:	fb01 2203 	mla	r2, r1, r3, r2
 800a5cc:	f8d2 20dc 	ldr.w	r2, [r2, #220]	; 0xdc
 800a5d0:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a5d2:	428a      	cmp	r2, r1
 800a5d4:	d002      	beq.n	800a5dc <ProcessRadioRxDone+0x3a0>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800a5d6:	3301      	adds	r3, #1
 800a5d8:	b2db      	uxtb	r3, r3
 800a5da:	e78a      	b.n	800a4f2 <ProcessRadioRxDone+0x2b6>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800a5dc:	4971      	ldr	r1, [pc, #452]	; (800a7a4 <ProcessRadioRxDone+0x568>)
 800a5de:	262c      	movs	r6, #44	; 0x2c
 800a5e0:	fb06 1103 	mla	r1, r6, r3, r1
 800a5e4:	f891 10da 	ldrb.w	r1, [r1, #218]	; 0xda
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800a5e8:	2900      	cmp	r1, #0
 800a5ea:	d0f4      	beq.n	800a5d6 <ProcessRadioRxDone+0x39a>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800a5ec:	4b6d      	ldr	r3, [pc, #436]	; (800a7a4 <ProcessRadioRxDone+0x568>)
 800a5ee:	fb06 3000 	mla	r0, r6, r0, r3
 800a5f2:	f890 60db 	ldrb.w	r6, [r0, #219]	; 0xdb
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800a5f6:	f8d0 10f8 	ldr.w	r1, [r0, #248]	; 0xf8
 800a5fa:	6809      	ldr	r1, [r1, #0]
 800a5fc:	9103      	str	r1, [sp, #12]
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800a5fe:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800a602:	2b02      	cmp	r3, #2
 800a604:	d002      	beq.n	800a60c <ProcessRadioRxDone+0x3d0>
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800a606:	4690      	mov	r8, r2
                    multicast = 1;
 800a608:	2501      	movs	r5, #1
 800a60a:	e775      	b.n	800a4f8 <ProcessRadioRxDone+0x2bc>
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800a60c:	4b66      	ldr	r3, [pc, #408]	; (800a7a8 <ProcessRadioRxDone+0x56c>)
 800a60e:	2103      	movs	r1, #3
 800a610:	f883 1493 	strb.w	r1, [r3, #1171]	; 0x493
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800a614:	4690      	mov	r8, r2
                    multicast = 1;
 800a616:	2501      	movs	r5, #1
 800a618:	e76e      	b.n	800a4f8 <ProcessRadioRxDone+0x2bc>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a61a:	4b63      	ldr	r3, [pc, #396]	; (800a7a8 <ProcessRadioRxDone+0x56c>)
 800a61c:	2201      	movs	r2, #1
 800a61e:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800a622:	f7ff fa9f 	bl	8009b64 <PrepareRxDoneAbort>
                return;
 800a626:	e127      	b.n	800a878 <ProcessRadioRxDone+0x63c>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800a628:	4b5f      	ldr	r3, [pc, #380]	; (800a7a8 <ProcessRadioRxDone+0x56c>)
 800a62a:	2208      	movs	r2, #8
 800a62c:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 800a630:	e785      	b.n	800a53e <ProcessRadioRxDone+0x302>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800a632:	ab0e      	add	r3, sp, #56	; 0x38
 800a634:	9300      	str	r3, [sp, #0]
 800a636:	9b03      	ldr	r3, [sp, #12]
 800a638:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800a63c:	4641      	mov	r1, r8
 800a63e:	4630      	mov	r0, r6
 800a640:	f003 f870 	bl	800d724 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800a644:	2800      	cmp	r0, #0
 800a646:	d13d      	bne.n	800a6c4 <ProcessRadioRxDone+0x488>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800a648:	4b57      	ldr	r3, [pc, #348]	; (800a7a8 <ProcessRadioRxDone+0x56c>)
 800a64a:	2100      	movs	r1, #0
 800a64c:	f883 1425 	strb.w	r1, [r3, #1061]	; 0x425
            MacCtx.McpsIndication.Multicast = multicast;
 800a650:	f883 5426 	strb.w	r5, [r3, #1062]	; 0x426
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800a654:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800a658:	f3c2 1000 	ubfx	r0, r2, #4, #1
 800a65c:	f883 0429 	strb.w	r0, [r3, #1065]	; 0x429
            MacCtx.McpsIndication.Buffer = NULL;
 800a660:	f8c3 142c 	str.w	r1, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.BufferSize = 0;
 800a664:	f883 1430 	strb.w	r1, [r3, #1072]	; 0x430
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800a668:	9803      	ldr	r0, [sp, #12]
 800a66a:	f8c3 0434 	str.w	r0, [r3, #1076]	; 0x434
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800a66e:	f8c3 0470 	str.w	r0, [r3, #1136]	; 0x470
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800a672:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800a676:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800a67a:	f883 1445 	strb.w	r1, [r3, #1093]	; 0x445
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800a67e:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800a682:	f893 0493 	ldrb.w	r0, [r3, #1171]	; 0x493
 800a686:	2801      	cmp	r0, #1
 800a688:	d92a      	bls.n	800a6e0 <ProcessRadioRxDone+0x4a4>
            if( multicast == 1 )
 800a68a:	2d01      	cmp	r5, #1
 800a68c:	d02e      	beq.n	800a6ec <ProcessRadioRxDone+0x4b0>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800a68e:	f004 04e0 	and.w	r4, r4, #224	; 0xe0
 800a692:	2ca0      	cmp	r4, #160	; 0xa0
 800a694:	d02f      	beq.n	800a6f6 <ProcessRadioRxDone+0x4ba>
                    Nvm.MacGroup1.SrvAckRequested = false;
 800a696:	2300      	movs	r3, #0
 800a698:	4a42      	ldr	r2, [pc, #264]	; (800a7a4 <ProcessRadioRxDone+0x568>)
 800a69a:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800a69e:	4a42      	ldr	r2, [pc, #264]	; (800a7a8 <ProcessRadioRxDone+0x56c>)
 800a6a0:	f882 3424 	strb.w	r3, [r2, #1060]	; 0x424
            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800a6a4:	4b40      	ldr	r3, [pc, #256]	; (800a7a8 <ProcessRadioRxDone+0x56c>)
 800a6a6:	f893 2444 	ldrb.w	r2, [r3, #1092]	; 0x444
 800a6aa:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 800a6ae:	f7ff fac2 	bl	8009c36 <RemoveMacCommands>
            switch( fType )
 800a6b2:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800a6b6:	2b03      	cmp	r3, #3
 800a6b8:	f200 809a 	bhi.w	800a7f0 <ProcessRadioRxDone+0x5b4>
 800a6bc:	e8df f003 	tbb	[pc, r3]
 800a6c0:	88785d36 	.word	0x88785d36
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800a6c4:	2802      	cmp	r0, #2
 800a6c6:	d006      	beq.n	800a6d6 <ProcessRadioRxDone+0x49a>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800a6c8:	4b37      	ldr	r3, [pc, #220]	; (800a7a8 <ProcessRadioRxDone+0x56c>)
 800a6ca:	220b      	movs	r2, #11
 800a6cc:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800a6d0:	f7ff fa48 	bl	8009b64 <PrepareRxDoneAbort>
                return;
 800a6d4:	e0d0      	b.n	800a878 <ProcessRadioRxDone+0x63c>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800a6d6:	4b34      	ldr	r3, [pc, #208]	; (800a7a8 <ProcessRadioRxDone+0x56c>)
 800a6d8:	220a      	movs	r2, #10
 800a6da:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 800a6de:	e7f7      	b.n	800a6d0 <ProcessRadioRxDone+0x494>
                Nvm.MacGroup1.AdrAckCounter = 0;
 800a6e0:	4b30      	ldr	r3, [pc, #192]	; (800a7a4 <ProcessRadioRxDone+0x568>)
 800a6e2:	6299      	str	r1, [r3, #40]	; 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
 800a6e4:	2201      	movs	r2, #1
 800a6e6:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
 800a6ea:	e7ce      	b.n	800a68a <ProcessRadioRxDone+0x44e>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800a6ec:	4b2e      	ldr	r3, [pc, #184]	; (800a7a8 <ProcessRadioRxDone+0x56c>)
 800a6ee:	2202      	movs	r2, #2
 800a6f0:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
 800a6f4:	e7d6      	b.n	800a6a4 <ProcessRadioRxDone+0x468>
                    Nvm.MacGroup1.SrvAckRequested = true;
 800a6f6:	4b2b      	ldr	r3, [pc, #172]	; (800a7a4 <ProcessRadioRxDone+0x568>)
 800a6f8:	2201      	movs	r2, #1
 800a6fa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800a6fe:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800a702:	b913      	cbnz	r3, 800a70a <ProcessRadioRxDone+0x4ce>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800a704:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a706:	4b27      	ldr	r3, [pc, #156]	; (800a7a4 <ProcessRadioRxDone+0x568>)
 800a708:	635a      	str	r2, [r3, #52]	; 0x34
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800a70a:	4b27      	ldr	r3, [pc, #156]	; (800a7a8 <ProcessRadioRxDone+0x56c>)
 800a70c:	2201      	movs	r2, #1
 800a70e:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800a712:	4290      	cmp	r0, r2
 800a714:	d9c6      	bls.n	800a6a4 <ProcessRadioRxDone+0x468>
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800a716:	4b23      	ldr	r3, [pc, #140]	; (800a7a4 <ProcessRadioRxDone+0x568>)
 800a718:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800a71c:	4b22      	ldr	r3, [pc, #136]	; (800a7a8 <ProcessRadioRxDone+0x56c>)
 800a71e:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 800a722:	4a22      	ldr	r2, [pc, #136]	; (800a7ac <ProcessRadioRxDone+0x570>)
 800a724:	6812      	ldr	r2, [r2, #0]
 800a726:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
 800a72a:	e7bb      	b.n	800a6a4 <ProcessRadioRxDone+0x468>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800a72c:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800a730:	4c1d      	ldr	r4, [pc, #116]	; (800a7a8 <ProcessRadioRxDone+0x56c>)
 800a732:	f894 3493 	ldrb.w	r3, [r4, #1171]	; 0x493
 800a736:	9300      	str	r3, [sp, #0]
 800a738:	463b      	mov	r3, r7
 800a73a:	f002 020f 	and.w	r2, r2, #15
 800a73e:	2100      	movs	r1, #0
 800a740:	a812      	add	r0, sp, #72	; 0x48
 800a742:	f7ff fa87 	bl	8009c54 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800a746:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800a74a:	f884 3427 	strb.w	r3, [r4, #1063]	; 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800a74e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a750:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800a754:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 800a758:	f884 3430 	strb.w	r3, [r4, #1072]	; 0x430
                    MacCtx.McpsIndication.RxData = true;
 800a75c:	2301      	movs	r3, #1
 800a75e:	f884 3431 	strb.w	r3, [r4, #1073]	; 0x431
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800a762:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800a766:	2be0      	cmp	r3, #224	; 0xe0
 800a768:	d049      	beq.n	800a7fe <ProcessRadioRxDone+0x5c2>
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800a76a:	4a0f      	ldr	r2, [pc, #60]	; (800a7a8 <ProcessRadioRxDone+0x56c>)
 800a76c:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800a770:	f043 0302 	orr.w	r3, r3, #2
 800a774:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
            break;
 800a778:	e06b      	b.n	800a852 <ProcessRadioRxDone+0x616>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800a77a:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800a77e:	4c0a      	ldr	r4, [pc, #40]	; (800a7a8 <ProcessRadioRxDone+0x56c>)
 800a780:	f894 3493 	ldrb.w	r3, [r4, #1171]	; 0x493
 800a784:	9300      	str	r3, [sp, #0]
 800a786:	463b      	mov	r3, r7
 800a788:	f002 020f 	and.w	r2, r2, #15
 800a78c:	2100      	movs	r1, #0
 800a78e:	a812      	add	r0, sp, #72	; 0x48
 800a790:	f7ff fa60 	bl	8009c54 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800a794:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800a798:	f884 3427 	strb.w	r3, [r4, #1063]	; 0x427
                    break;
 800a79c:	e7e1      	b.n	800a762 <ProcessRadioRxDone+0x526>
 800a79e:	bf00      	nop
 800a7a0:	20000a58 	.word	0x20000a58
 800a7a4:	20008000 	.word	0x20008000
 800a7a8:	20000820 	.word	0x20000820
 800a7ac:	20000dd0 	.word	0x20000dd0
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800a7b0:	4c3d      	ldr	r4, [pc, #244]	; (800a8a8 <ProcessRadioRxDone+0x66c>)
 800a7b2:	f894 3493 	ldrb.w	r3, [r4, #1171]	; 0x493
 800a7b6:	9300      	str	r3, [sp, #0]
 800a7b8:	463b      	mov	r3, r7
 800a7ba:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
 800a7be:	2100      	movs	r1, #0
 800a7c0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a7c2:	f7ff fa47 	bl	8009c54 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800a7c6:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800a7ca:	f884 3427 	strb.w	r3, [r4, #1063]	; 0x427
                    break;
 800a7ce:	e7c8      	b.n	800a762 <ProcessRadioRxDone+0x526>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800a7d0:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 800a7d4:	4b34      	ldr	r3, [pc, #208]	; (800a8a8 <ProcessRadioRxDone+0x66c>)
 800a7d6:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800a7da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a7dc:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800a7e0:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
 800a7e4:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
                    MacCtx.McpsIndication.RxData = true;
 800a7e8:	2201      	movs	r2, #1
 800a7ea:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
                    break;
 800a7ee:	e7b8      	b.n	800a762 <ProcessRadioRxDone+0x526>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a7f0:	4b2d      	ldr	r3, [pc, #180]	; (800a8a8 <ProcessRadioRxDone+0x66c>)
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                    PrepareRxDoneAbort( );
 800a7f8:	f7ff f9b4 	bl	8009b64 <PrepareRxDoneAbort>
                    break;
 800a7fc:	e7b1      	b.n	800a762 <ProcessRadioRxDone+0x526>
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800a7fe:	4a2b      	ldr	r2, [pc, #172]	; (800a8ac <ProcessRadioRxDone+0x670>)
 800a800:	f892 210b 	ldrb.w	r2, [r2, #267]	; 0x10b
 800a804:	2a00      	cmp	r2, #0
 800a806:	d1b0      	bne.n	800a76a <ProcessRadioRxDone+0x52e>
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 800a808:	4a27      	ldr	r2, [pc, #156]	; (800a8a8 <ProcessRadioRxDone+0x66c>)
 800a80a:	f882 3427 	strb.w	r3, [r2, #1063]	; 0x427
                MacCtx.McpsIndication.Buffer = NULL;
 800a80e:	2300      	movs	r3, #0
 800a810:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                MacCtx.McpsIndication.BufferSize = 0;
 800a814:	f882 3430 	strb.w	r3, [r2, #1072]	; 0x430
                MacCtx.McpsIndication.RxData = false;
 800a818:	f882 3431 	strb.w	r3, [r2, #1073]	; 0x431
 800a81c:	e7a5      	b.n	800a76a <ProcessRadioRxDone+0x52e>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800a81e:	1e6a      	subs	r2, r5, #1
 800a820:	4c21      	ldr	r4, [pc, #132]	; (800a8a8 <ProcessRadioRxDone+0x66c>)
 800a822:	f504 770e 	add.w	r7, r4, #568	; 0x238
 800a826:	b292      	uxth	r2, r2
 800a828:	1c71      	adds	r1, r6, #1
 800a82a:	4638      	mov	r0, r7
 800a82c:	f006 faaf 	bl	8010d8e <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800a830:	2303      	movs	r3, #3
 800a832:	f884 3424 	strb.w	r3, [r4, #1060]	; 0x424
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800a836:	2300      	movs	r3, #0
 800a838:	f884 3425 	strb.w	r3, [r4, #1061]	; 0x425
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800a83c:	f8c4 742c 	str.w	r7, [r4, #1068]	; 0x42c
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800a840:	3d01      	subs	r5, #1
 800a842:	f884 5430 	strb.w	r5, [r4, #1072]	; 0x430
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800a846:	f894 3495 	ldrb.w	r3, [r4, #1173]	; 0x495
 800a84a:	f043 0302 	orr.w	r3, r3, #2
 800a84e:	f884 3495 	strb.w	r3, [r4, #1173]	; 0x495
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800a852:	4b15      	ldr	r3, [pc, #84]	; (800a8a8 <ProcessRadioRxDone+0x66c>)
 800a854:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800a858:	2b01      	cmp	r3, #1
 800a85a:	d917      	bls.n	800a88c <ProcessRadioRxDone+0x650>
    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 800a85c:	4b12      	ldr	r3, [pc, #72]	; (800a8a8 <ProcessRadioRxDone+0x66c>)
 800a85e:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800a862:	2b02      	cmp	r3, #2
 800a864:	d006      	beq.n	800a874 <ProcessRadioRxDone+0x638>
        MacCtx.MacFlags.Bits.MacDone = 1;
 800a866:	4a10      	ldr	r2, [pc, #64]	; (800a8a8 <ProcessRadioRxDone+0x66c>)
 800a868:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800a86c:	f043 0320 	orr.w	r3, r3, #32
 800a870:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    UpdateRxSlotIdleState( );
 800a874:	f7fe ff80 	bl	8009778 <UpdateRxSlotIdleState>
}
 800a878:	b021      	add	sp, #132	; 0x84
 800a87a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a87e:	4b0a      	ldr	r3, [pc, #40]	; (800a8a8 <ProcessRadioRxDone+0x66c>)
 800a880:	2201      	movs	r2, #1
 800a882:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            PrepareRxDoneAbort( );
 800a886:	f7ff f96d 	bl	8009b64 <PrepareRxDoneAbort>
            break;
 800a88a:	e7e2      	b.n	800a852 <ProcessRadioRxDone+0x616>
        if( MacCtx.NodeAckRequested == true )
 800a88c:	4b06      	ldr	r3, [pc, #24]	; (800a8a8 <ProcessRadioRxDone+0x66c>)
 800a88e:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800a892:	2b00      	cmp	r3, #0
 800a894:	d0e2      	beq.n	800a85c <ProcessRadioRxDone+0x620>
            if( MacCtx.McpsConfirm.AckReceived == true )
 800a896:	4b04      	ldr	r3, [pc, #16]	; (800a8a8 <ProcessRadioRxDone+0x66c>)
 800a898:	f893 3448 	ldrb.w	r3, [r3, #1096]	; 0x448
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d0dd      	beq.n	800a85c <ProcessRadioRxDone+0x620>
                OnRetransmitTimeoutTimerEvent( NULL );
 800a8a0:	2000      	movs	r0, #0
 800a8a2:	f7ff f949 	bl	8009b38 <OnRetransmitTimeoutTimerEvent>
 800a8a6:	e7d9      	b.n	800a85c <ProcessRadioRxDone+0x620>
 800a8a8:	20000820 	.word	0x20000820
 800a8ac:	20008000 	.word	0x20008000

0800a8b0 <ProcessRadioTxTimeout>:
{
 800a8b0:	b510      	push	{r4, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800a8b2:	4b0f      	ldr	r3, [pc, #60]	; (800a8f0 <ProcessRadioTxTimeout+0x40>)
 800a8b4:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800a8b8:	2b02      	cmp	r3, #2
 800a8ba:	d002      	beq.n	800a8c2 <ProcessRadioTxTimeout+0x12>
        Radio.Sleep( );
 800a8bc:	4b0d      	ldr	r3, [pc, #52]	; (800a8f4 <ProcessRadioTxTimeout+0x44>)
 800a8be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8c0:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 800a8c2:	f7fe ff59 	bl	8009778 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800a8c6:	4c0c      	ldr	r4, [pc, #48]	; (800a8f8 <ProcessRadioTxTimeout+0x48>)
 800a8c8:	2002      	movs	r0, #2
 800a8ca:	f884 0445 	strb.w	r0, [r4, #1093]	; 0x445
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800a8ce:	f002 fc41 	bl	800d154 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800a8d2:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
 800a8d6:	b113      	cbz	r3, 800a8de <ProcessRadioTxTimeout+0x2e>
        MacCtx.RetransmitTimeoutRetry = true;
 800a8d8:	2201      	movs	r2, #1
 800a8da:	f884 241d 	strb.w	r2, [r4, #1053]	; 0x41d
    MacCtx.MacFlags.Bits.MacDone = 1;
 800a8de:	4a06      	ldr	r2, [pc, #24]	; (800a8f8 <ProcessRadioTxTimeout+0x48>)
 800a8e0:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800a8e4:	f043 0320 	orr.w	r3, r3, #32
 800a8e8:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
}
 800a8ec:	bd10      	pop	{r4, pc}
 800a8ee:	bf00      	nop
 800a8f0:	20008000 	.word	0x20008000
 800a8f4:	08014f0c 	.word	0x08014f0c
 800a8f8:	20000820 	.word	0x20000820

0800a8fc <CheckForClassBCollision>:
{
 800a8fc:	b508      	push	{r3, lr}
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800a8fe:	f002 f9d2 	bl	800cca6 <LoRaMacClassBIsBeaconExpected>
 800a902:	b978      	cbnz	r0, 800a924 <CheckForClassBCollision+0x28>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800a904:	4b09      	ldr	r3, [pc, #36]	; (800a92c <CheckForClassBCollision+0x30>)
 800a906:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	d001      	beq.n	800a912 <CheckForClassBCollision+0x16>
    return LORAMAC_STATUS_OK;
 800a90e:	2000      	movs	r0, #0
}
 800a910:	bd08      	pop	{r3, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 800a912:	f002 f9ca 	bl	800ccaa <LoRaMacClassBIsPingExpected>
 800a916:	b938      	cbnz	r0, 800a928 <CheckForClassBCollision+0x2c>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800a918:	f002 f9c9 	bl	800ccae <LoRaMacClassBIsMulticastExpected>
 800a91c:	2800      	cmp	r0, #0
 800a91e:	d0f7      	beq.n	800a910 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800a920:	200f      	movs	r0, #15
 800a922:	e7f5      	b.n	800a910 <CheckForClassBCollision+0x14>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800a924:	200e      	movs	r0, #14
 800a926:	e7f3      	b.n	800a910 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800a928:	200f      	movs	r0, #15
 800a92a:	e7f1      	b.n	800a910 <CheckForClassBCollision+0x14>
 800a92c:	20008000 	.word	0x20008000

0800a930 <HandleRadioRxErrorTimeout>:
{
 800a930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a932:	4605      	mov	r5, r0
 800a934:	460c      	mov	r4, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800a936:	4b34      	ldr	r3, [pc, #208]	; (800aa08 <HandleRadioRxErrorTimeout+0xd8>)
 800a938:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800a93c:	2b02      	cmp	r3, #2
 800a93e:	d002      	beq.n	800a946 <HandleRadioRxErrorTimeout+0x16>
        Radio.Sleep( );
 800a940:	4b32      	ldr	r3, [pc, #200]	; (800aa0c <HandleRadioRxErrorTimeout+0xdc>)
 800a942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a944:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800a946:	f002 f9ae 	bl	800cca6 <LoRaMacClassBIsBeaconExpected>
 800a94a:	4606      	mov	r6, r0
 800a94c:	bb50      	cbnz	r0, 800a9a4 <HandleRadioRxErrorTimeout+0x74>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800a94e:	4b2e      	ldr	r3, [pc, #184]	; (800aa08 <HandleRadioRxErrorTimeout+0xd8>)
 800a950:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800a954:	2b01      	cmp	r3, #1
 800a956:	d02c      	beq.n	800a9b2 <HandleRadioRxErrorTimeout+0x82>
    if( classBRx == false )
 800a958:	2e00      	cmp	r6, #0
 800a95a:	d152      	bne.n	800aa02 <HandleRadioRxErrorTimeout+0xd2>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800a95c:	4b2c      	ldr	r3, [pc, #176]	; (800aa10 <HandleRadioRxErrorTimeout+0xe0>)
 800a95e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800a962:	2b00      	cmp	r3, #0
 800a964:	d13c      	bne.n	800a9e0 <HandleRadioRxErrorTimeout+0xb0>
            if( MacCtx.NodeAckRequested == true )
 800a966:	4b2a      	ldr	r3, [pc, #168]	; (800aa10 <HandleRadioRxErrorTimeout+0xe0>)
 800a968:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800a96c:	b113      	cbz	r3, 800a974 <HandleRadioRxErrorTimeout+0x44>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800a96e:	4b28      	ldr	r3, [pc, #160]	; (800aa10 <HandleRadioRxErrorTimeout+0xe0>)
 800a970:	f883 5445 	strb.w	r5, [r3, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800a974:	4628      	mov	r0, r5
 800a976:	f002 fbed 	bl	800d154 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800a97a:	4b23      	ldr	r3, [pc, #140]	; (800aa08 <HandleRadioRxErrorTimeout+0xd8>)
 800a97c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800a97e:	f008 fbcd 	bl	801311c <UTIL_TIMER_GetElapsedTime>
 800a982:	4b23      	ldr	r3, [pc, #140]	; (800aa10 <HandleRadioRxErrorTimeout+0xe0>)
 800a984:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800a988:	4298      	cmp	r0, r3
 800a98a:	d33a      	bcc.n	800aa02 <HandleRadioRxErrorTimeout+0xd2>
                TimerStop( &MacCtx.RxWindowTimer2 );
 800a98c:	4c20      	ldr	r4, [pc, #128]	; (800aa10 <HandleRadioRxErrorTimeout+0xe0>)
 800a98e:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800a992:	f008 fbf9 	bl	8013188 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800a996:	f894 3495 	ldrb.w	r3, [r4, #1173]	; 0x495
 800a99a:	f043 0320 	orr.w	r3, r3, #32
 800a99e:	f884 3495 	strb.w	r3, [r4, #1173]	; 0x495
 800a9a2:	e02e      	b.n	800aa02 <HandleRadioRxErrorTimeout+0xd2>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800a9a4:	2002      	movs	r0, #2
 800a9a6:	f002 f974 	bl	800cc92 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800a9aa:	2000      	movs	r0, #0
 800a9ac:	f002 f976 	bl	800cc9c <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800a9b0:	e7cd      	b.n	800a94e <HandleRadioRxErrorTimeout+0x1e>
        if( LoRaMacClassBIsPingExpected( ) == true )
 800a9b2:	f002 f97a 	bl	800ccaa <LoRaMacClassBIsPingExpected>
 800a9b6:	4607      	mov	r7, r0
 800a9b8:	b950      	cbnz	r0, 800a9d0 <HandleRadioRxErrorTimeout+0xa0>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800a9ba:	f002 f978 	bl	800ccae <LoRaMacClassBIsMulticastExpected>
 800a9be:	2800      	cmp	r0, #0
 800a9c0:	d0ca      	beq.n	800a958 <HandleRadioRxErrorTimeout+0x28>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a9c2:	2000      	movs	r0, #0
 800a9c4:	f002 f967 	bl	800cc96 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800a9c8:	2000      	movs	r0, #0
 800a9ca:	f002 f969 	bl	800cca0 <LoRaMacClassBMulticastSlotTimerEvent>
    if( classBRx == false )
 800a9ce:	e018      	b.n	800aa02 <HandleRadioRxErrorTimeout+0xd2>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a9d0:	2000      	movs	r0, #0
 800a9d2:	f002 f95f 	bl	800cc94 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800a9d6:	2000      	movs	r0, #0
 800a9d8:	f002 f961 	bl	800cc9e <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800a9dc:	463e      	mov	r6, r7
 800a9de:	e7ec      	b.n	800a9ba <HandleRadioRxErrorTimeout+0x8a>
            if( MacCtx.NodeAckRequested == true )
 800a9e0:	4b0b      	ldr	r3, [pc, #44]	; (800aa10 <HandleRadioRxErrorTimeout+0xe0>)
 800a9e2:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800a9e6:	b113      	cbz	r3, 800a9ee <HandleRadioRxErrorTimeout+0xbe>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800a9e8:	4b09      	ldr	r3, [pc, #36]	; (800aa10 <HandleRadioRxErrorTimeout+0xe0>)
 800a9ea:	f883 4445 	strb.w	r4, [r3, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800a9ee:	4620      	mov	r0, r4
 800a9f0:	f002 fbb0 	bl	800d154 <LoRaMacConfirmQueueSetStatusCmn>
            MacCtx.MacFlags.Bits.MacDone = 1;
 800a9f4:	4a06      	ldr	r2, [pc, #24]	; (800aa10 <HandleRadioRxErrorTimeout+0xe0>)
 800a9f6:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800a9fa:	f043 0320 	orr.w	r3, r3, #32
 800a9fe:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    UpdateRxSlotIdleState( );
 800aa02:	f7fe feb9 	bl	8009778 <UpdateRxSlotIdleState>
}
 800aa06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa08:	20008000 	.word	0x20008000
 800aa0c:	08014f0c 	.word	0x08014f0c
 800aa10:	20000820 	.word	0x20000820

0800aa14 <ProcessRadioRxError>:
{
 800aa14:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800aa16:	2106      	movs	r1, #6
 800aa18:	2005      	movs	r0, #5
 800aa1a:	f7ff ff89 	bl	800a930 <HandleRadioRxErrorTimeout>
}
 800aa1e:	bd08      	pop	{r3, pc}

0800aa20 <ProcessRadioRxTimeout>:
{
 800aa20:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800aa22:	2104      	movs	r1, #4
 800aa24:	2003      	movs	r0, #3
 800aa26:	f7ff ff83 	bl	800a930 <HandleRadioRxErrorTimeout>
}
 800aa2a:	bd08      	pop	{r3, pc}

0800aa2c <LoRaMacHandleIrqEvents>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa2c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800aa30:	b672      	cpsid	i
    events = LoRaMacRadioEvents;
 800aa32:	4a14      	ldr	r2, [pc, #80]	; (800aa84 <LoRaMacHandleIrqEvents+0x58>)
 800aa34:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 800aa36:	2000      	movs	r0, #0
 800aa38:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa3a:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 800aa3e:	b303      	cbz	r3, 800aa82 <LoRaMacHandleIrqEvents+0x56>
{
 800aa40:	b510      	push	{r4, lr}
        if( events.Events.TxDone == 1 )
 800aa42:	b2dc      	uxtb	r4, r3
 800aa44:	f013 0f20 	tst.w	r3, #32
 800aa48:	d10c      	bne.n	800aa64 <LoRaMacHandleIrqEvents+0x38>
        if( events.Events.RxDone == 1 )
 800aa4a:	f014 0f10 	tst.w	r4, #16
 800aa4e:	d10c      	bne.n	800aa6a <LoRaMacHandleIrqEvents+0x3e>
        if( events.Events.TxTimeout == 1 )
 800aa50:	f014 0f08 	tst.w	r4, #8
 800aa54:	d10c      	bne.n	800aa70 <LoRaMacHandleIrqEvents+0x44>
        if( events.Events.RxError == 1 )
 800aa56:	f014 0f04 	tst.w	r4, #4
 800aa5a:	d10c      	bne.n	800aa76 <LoRaMacHandleIrqEvents+0x4a>
        if( events.Events.RxTimeout == 1 )
 800aa5c:	f014 0f02 	tst.w	r4, #2
 800aa60:	d10c      	bne.n	800aa7c <LoRaMacHandleIrqEvents+0x50>
}
 800aa62:	bd10      	pop	{r4, pc}
            ProcessRadioTxDone( );
 800aa64:	f7fe fff2 	bl	8009a4c <ProcessRadioTxDone>
 800aa68:	e7ef      	b.n	800aa4a <LoRaMacHandleIrqEvents+0x1e>
            ProcessRadioRxDone( );
 800aa6a:	f7ff fbe7 	bl	800a23c <ProcessRadioRxDone>
 800aa6e:	e7ef      	b.n	800aa50 <LoRaMacHandleIrqEvents+0x24>
            ProcessRadioTxTimeout( );
 800aa70:	f7ff ff1e 	bl	800a8b0 <ProcessRadioTxTimeout>
 800aa74:	e7ef      	b.n	800aa56 <LoRaMacHandleIrqEvents+0x2a>
            ProcessRadioRxError( );
 800aa76:	f7ff ffcd 	bl	800aa14 <ProcessRadioRxError>
 800aa7a:	e7ef      	b.n	800aa5c <LoRaMacHandleIrqEvents+0x30>
            ProcessRadioRxTimeout( );
 800aa7c:	f7ff ffd0 	bl	800aa20 <ProcessRadioRxTimeout>
}
 800aa80:	e7ef      	b.n	800aa62 <LoRaMacHandleIrqEvents+0x36>
 800aa82:	4770      	bx	lr
 800aa84:	2000081c 	.word	0x2000081c

0800aa88 <LoRaMacHandleResponseTimeout>:
    if( startTimeInMs != 0 )
 800aa88:	b909      	cbnz	r1, 800aa8e <LoRaMacHandleResponseTimeout+0x6>
    return false;
 800aa8a:	2000      	movs	r0, #0
}
 800aa8c:	4770      	bx	lr
{
 800aa8e:	b510      	push	{r4, lr}
 800aa90:	4604      	mov	r4, r0
 800aa92:	4608      	mov	r0, r1
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 800aa94:	f008 fb42 	bl	801311c <UTIL_TIMER_GetElapsedTime>
        if( elapsedTime > timeoutInMs )
 800aa98:	42a0      	cmp	r0, r4
 800aa9a:	d801      	bhi.n	800aaa0 <LoRaMacHandleResponseTimeout+0x18>
    return false;
 800aa9c:	2000      	movs	r0, #0
}
 800aa9e:	bd10      	pop	{r4, pc}
            Nvm.MacGroup1.SrvAckRequested = false;
 800aaa0:	4b02      	ldr	r3, [pc, #8]	; (800aaac <LoRaMacHandleResponseTimeout+0x24>)
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
            return true;
 800aaa8:	2001      	movs	r0, #1
 800aaaa:	e7f8      	b.n	800aa9e <LoRaMacHandleResponseTimeout+0x16>
 800aaac:	20008000 	.word	0x20008000

0800aab0 <LoRaMacHandleMlmeRequest>:
{
 800aab0:	b508      	push	{r3, lr}
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800aab2:	4b14      	ldr	r3, [pc, #80]	; (800ab04 <LoRaMacHandleMlmeRequest+0x54>)
 800aab4:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800aab8:	f013 0f04 	tst.w	r3, #4
 800aabc:	d100      	bne.n	800aac0 <LoRaMacHandleMlmeRequest+0x10>
}
 800aabe:	bd08      	pop	{r3, pc}
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800aac0:	2001      	movs	r0, #1
 800aac2:	f002 fb65 	bl	800d190 <LoRaMacConfirmQueueIsCmdActive>
 800aac6:	b178      	cbz	r0, 800aae8 <LoRaMacHandleMlmeRequest+0x38>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800aac8:	2001      	movs	r0, #1
 800aaca:	f002 fb2b 	bl	800d124 <LoRaMacConfirmQueueGetStatus>
 800aace:	b918      	cbnz	r0, 800aad8 <LoRaMacHandleMlmeRequest+0x28>
                MacCtx.ChannelsNbTransCounter = 0;
 800aad0:	4b0c      	ldr	r3, [pc, #48]	; (800ab04 <LoRaMacHandleMlmeRequest+0x54>)
 800aad2:	2200      	movs	r2, #0
 800aad4:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800aad8:	4a0a      	ldr	r2, [pc, #40]	; (800ab04 <LoRaMacHandleMlmeRequest+0x54>)
 800aada:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800aade:	f023 0302 	bic.w	r3, r3, #2
 800aae2:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
 800aae6:	e7ea      	b.n	800aabe <LoRaMacHandleMlmeRequest+0xe>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 800aae8:	2005      	movs	r0, #5
 800aaea:	f002 fb51 	bl	800d190 <LoRaMacConfirmQueueIsCmdActive>
 800aaee:	2800      	cmp	r0, #0
 800aaf0:	d0e5      	beq.n	800aabe <LoRaMacHandleMlmeRequest+0xe>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800aaf2:	4a04      	ldr	r2, [pc, #16]	; (800ab04 <LoRaMacHandleMlmeRequest+0x54>)
 800aaf4:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800aaf8:	f023 0302 	bic.w	r3, r3, #2
 800aafc:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800ab00:	e7dd      	b.n	800aabe <LoRaMacHandleMlmeRequest+0xe>
 800ab02:	bf00      	nop
 800ab04:	20000820 	.word	0x20000820

0800ab08 <SerializeTxFrame>:
{
 800ab08:	b508      	push	{r3, lr}
    switch( MacCtx.TxMsg.Type )
 800ab0a:	4b0f      	ldr	r3, [pc, #60]	; (800ab48 <SerializeTxFrame+0x40>)
 800ab0c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800ab10:	b11b      	cbz	r3, 800ab1a <SerializeTxFrame+0x12>
 800ab12:	2b04      	cmp	r3, #4
 800ab14:	d00a      	beq.n	800ab2c <SerializeTxFrame+0x24>
 800ab16:	2003      	movs	r0, #3
}
 800ab18:	bd08      	pop	{r3, pc}
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800ab1a:	480c      	ldr	r0, [pc, #48]	; (800ab4c <SerializeTxFrame+0x44>)
 800ab1c:	f002 ffd3 	bl	800dac6 <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800ab20:	b968      	cbnz	r0, 800ab3e <SerializeTxFrame+0x36>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800ab22:	4b09      	ldr	r3, [pc, #36]	; (800ab48 <SerializeTxFrame+0x40>)
 800ab24:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800ab28:	801a      	strh	r2, [r3, #0]
            break;
 800ab2a:	e7f5      	b.n	800ab18 <SerializeTxFrame+0x10>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800ab2c:	4807      	ldr	r0, [pc, #28]	; (800ab4c <SerializeTxFrame+0x44>)
 800ab2e:	f003 f800 	bl	800db32 <LoRaMacSerializerData>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800ab32:	b930      	cbnz	r0, 800ab42 <SerializeTxFrame+0x3a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800ab34:	4b04      	ldr	r3, [pc, #16]	; (800ab48 <SerializeTxFrame+0x40>)
 800ab36:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800ab3a:	801a      	strh	r2, [r3, #0]
            break;
 800ab3c:	e7ec      	b.n	800ab18 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800ab3e:	2011      	movs	r0, #17
 800ab40:	e7ea      	b.n	800ab18 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800ab42:	2011      	movs	r0, #17
 800ab44:	e7e8      	b.n	800ab18 <SerializeTxFrame+0x10>
 800ab46:	bf00      	nop
 800ab48:	20000820 	.word	0x20000820
 800ab4c:	20000928 	.word	0x20000928

0800ab50 <ComputeRxWindowParameters>:
{
 800ab50:	b570      	push	{r4, r5, r6, lr}
 800ab52:	b082      	sub	sp, #8
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800ab54:	4c1d      	ldr	r4, [pc, #116]	; (800abcc <ComputeRxWindowParameters+0x7c>)
 800ab56:	f894 6040 	ldrb.w	r6, [r4, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800ab5a:	f994 3061 	ldrsb.w	r3, [r4, #97]	; 0x61
 800ab5e:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
 800ab62:	f894 1075 	ldrb.w	r1, [r4, #117]	; 0x75
 800ab66:	4630      	mov	r0, r6
 800ab68:	f003 f993 	bl	800de92 <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800ab6c:	4d18      	ldr	r5, [pc, #96]	; (800abd0 <ComputeRxWindowParameters+0x80>)
 800ab6e:	f505 736e 	add.w	r3, r5, #952	; 0x3b8
 800ab72:	9300      	str	r3, [sp, #0]
 800ab74:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ab76:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800ab7a:	b241      	sxtb	r1, r0
 800ab7c:	4630      	mov	r0, r6
 800ab7e:	f003 f8d4 	bl	800dd2a <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800ab82:	f505 7374 	add.w	r3, r5, #976	; 0x3d0
 800ab86:	9300      	str	r3, [sp, #0]
 800ab88:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ab8a:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800ab8e:	f994 1068 	ldrsb.w	r1, [r4, #104]	; 0x68
 800ab92:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800ab96:	f003 f8c8 	bl	800dd2a <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800ab9a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ab9c:	f8d5 13c4 	ldr.w	r1, [r5, #964]	; 0x3c4
 800aba0:	440b      	add	r3, r1
 800aba2:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800aba6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800aba8:	f8d5 23dc 	ldr.w	r2, [r5, #988]	; 0x3dc
 800abac:	4413      	add	r3, r2
 800abae:	f8c5 33b4 	str.w	r3, [r5, #948]	; 0x3b4
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800abb2:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 800abb6:	b93b      	cbnz	r3, 800abc8 <ComputeRxWindowParameters+0x78>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800abb8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800abba:	4419      	add	r1, r3
 800abbc:	f8c5 13b0 	str.w	r1, [r5, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800abc0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800abc2:	440a      	add	r2, r1
 800abc4:	f8c5 23b4 	str.w	r2, [r5, #948]	; 0x3b4
}
 800abc8:	b002      	add	sp, #8
 800abca:	bd70      	pop	{r4, r5, r6, pc}
 800abcc:	20008000 	.word	0x20008000
 800abd0:	20000820 	.word	0x20000820

0800abd4 <VerifyTxFrame>:
{
 800abd4:	b510      	push	{r4, lr}
 800abd6:	b082      	sub	sp, #8
    size_t macCmdsSize = 0;
 800abd8:	2300      	movs	r3, #0
 800abda:	9301      	str	r3, [sp, #4]
    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800abdc:	4b0d      	ldr	r3, [pc, #52]	; (800ac14 <VerifyTxFrame+0x40>)
 800abde:	f893 411c 	ldrb.w	r4, [r3, #284]	; 0x11c
 800abe2:	b914      	cbnz	r4, 800abea <VerifyTxFrame+0x16>
}
 800abe4:	4620      	mov	r0, r4
 800abe6:	b002      	add	sp, #8
 800abe8:	bd10      	pop	{r4, pc}
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800abea:	a801      	add	r0, sp, #4
 800abec:	f002 f980 	bl	800cef0 <LoRaMacCommandsGetSizeSerializedCmds>
 800abf0:	4604      	mov	r4, r0
 800abf2:	b968      	cbnz	r0, 800ac10 <VerifyTxFrame+0x3c>
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800abf4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800abf8:	4b06      	ldr	r3, [pc, #24]	; (800ac14 <VerifyTxFrame+0x40>)
 800abfa:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800abfe:	4b06      	ldr	r3, [pc, #24]	; (800ac18 <VerifyTxFrame+0x44>)
 800ac00:	f893 0237 	ldrb.w	r0, [r3, #567]	; 0x237
 800ac04:	f7fe ff10 	bl	8009a28 <ValidatePayloadLength>
 800ac08:	2800      	cmp	r0, #0
 800ac0a:	d1eb      	bne.n	800abe4 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_LENGTH_ERROR;
 800ac0c:	2408      	movs	r4, #8
 800ac0e:	e7e9      	b.n	800abe4 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ac10:	2413      	movs	r4, #19
 800ac12:	e7e7      	b.n	800abe4 <VerifyTxFrame+0x10>
 800ac14:	20008000 	.word	0x20008000
 800ac18:	20000820 	.word	0x20000820

0800ac1c <SecureFrame>:
{
 800ac1c:	b530      	push	{r4, r5, lr}
 800ac1e:	b083      	sub	sp, #12
    uint32_t fCntUp = 0;
 800ac20:	2300      	movs	r3, #0
 800ac22:	9301      	str	r3, [sp, #4]
    switch( MacCtx.TxMsg.Type )
 800ac24:	4b18      	ldr	r3, [pc, #96]	; (800ac88 <SecureFrame+0x6c>)
 800ac26:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800ac2a:	b133      	cbz	r3, 800ac3a <SecureFrame+0x1e>
 800ac2c:	4605      	mov	r5, r0
 800ac2e:	460c      	mov	r4, r1
 800ac30:	2b04      	cmp	r3, #4
 800ac32:	d00b      	beq.n	800ac4c <SecureFrame+0x30>
 800ac34:	2003      	movs	r0, #3
}
 800ac36:	b003      	add	sp, #12
 800ac38:	bd30      	pop	{r4, r5, pc}
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800ac3a:	4814      	ldr	r0, [pc, #80]	; (800ac8c <SecureFrame+0x70>)
 800ac3c:	f002 fd08 	bl	800d650 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800ac40:	b9d8      	cbnz	r0, 800ac7a <SecureFrame+0x5e>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800ac42:	4b11      	ldr	r3, [pc, #68]	; (800ac88 <SecureFrame+0x6c>)
 800ac44:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800ac48:	801a      	strh	r2, [r3, #0]
            break;
 800ac4a:	e7f4      	b.n	800ac36 <SecureFrame+0x1a>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800ac4c:	a801      	add	r0, sp, #4
 800ac4e:	f002 fcb5 	bl	800d5bc <LoRaMacCryptoGetFCntUp>
 800ac52:	b9a0      	cbnz	r0, 800ac7e <SecureFrame+0x62>
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 800ac54:	4b0c      	ldr	r3, [pc, #48]	; (800ac88 <SecureFrame+0x6c>)
 800ac56:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800ac5a:	b113      	cbz	r3, 800ac62 <SecureFrame+0x46>
                fCntUp -= 1;
 800ac5c:	9b01      	ldr	r3, [sp, #4]
 800ac5e:	3b01      	subs	r3, #1
 800ac60:	9301      	str	r3, [sp, #4]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800ac62:	4b0a      	ldr	r3, [pc, #40]	; (800ac8c <SecureFrame+0x70>)
 800ac64:	4622      	mov	r2, r4
 800ac66:	4629      	mov	r1, r5
 800ac68:	9801      	ldr	r0, [sp, #4]
 800ac6a:	f002 fd17 	bl	800d69c <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800ac6e:	b940      	cbnz	r0, 800ac82 <SecureFrame+0x66>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800ac70:	4b05      	ldr	r3, [pc, #20]	; (800ac88 <SecureFrame+0x6c>)
 800ac72:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800ac76:	801a      	strh	r2, [r3, #0]
            break;
 800ac78:	e7dd      	b.n	800ac36 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800ac7a:	2011      	movs	r0, #17
 800ac7c:	e7db      	b.n	800ac36 <SecureFrame+0x1a>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800ac7e:	2012      	movs	r0, #18
 800ac80:	e7d9      	b.n	800ac36 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800ac82:	2011      	movs	r0, #17
 800ac84:	e7d7      	b.n	800ac36 <SecureFrame+0x1a>
 800ac86:	bf00      	nop
 800ac88:	20000820 	.word	0x20000820
 800ac8c:	20000928 	.word	0x20000928

0800ac90 <SendFrameOnChannel>:
{
 800ac90:	b570      	push	{r4, r5, r6, lr}
 800ac92:	b086      	sub	sp, #24
 800ac94:	4606      	mov	r6, r0
    int8_t txPower = 0;
 800ac96:	2300      	movs	r3, #0
 800ac98:	f88d 3007 	strb.w	r3, [sp, #7]
    txConfig.Channel = channel;
 800ac9c:	f88d 0008 	strb.w	r0, [sp, #8]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800aca0:	4d35      	ldr	r5, [pc, #212]	; (800ad78 <SendFrameOnChannel+0xe8>)
 800aca2:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
 800aca6:	f88d 3009 	strb.w	r3, [sp, #9]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800acaa:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
 800acae:	f88d 300a 	strb.w	r3, [sp, #10]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800acb2:	6fab      	ldr	r3, [r5, #120]	; 0x78
 800acb4:	9303      	str	r3, [sp, #12]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800acb6:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800acb8:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800acba:	4c30      	ldr	r4, [pc, #192]	; (800ad7c <SendFrameOnChannel+0xec>)
 800acbc:	8823      	ldrh	r3, [r4, #0]
 800acbe:	f8ad 3014 	strh.w	r3, [sp, #20]
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800acc2:	f895 311c 	ldrb.w	r3, [r5, #284]	; 0x11c
 800acc6:	f88d 3016 	strb.w	r3, [sp, #22]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800acca:	f504 6384 	add.w	r3, r4, #1056	; 0x420
 800acce:	f10d 0207 	add.w	r2, sp, #7
 800acd2:	a902      	add	r1, sp, #8
 800acd4:	f895 0040 	ldrb.w	r0, [r5, #64]	; 0x40
 800acd8:	f003 f84b 	bl	800dd72 <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800acdc:	2301      	movs	r3, #1
 800acde:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800ace2:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
 800ace6:	f884 3446 	strb.w	r3, [r4, #1094]	; 0x446
    MacCtx.McpsConfirm.TxPower = txPower;
 800acea:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800acee:	f884 3447 	strb.w	r3, [r4, #1095]	; 0x447
    MacCtx.McpsConfirm.Channel = channel;
 800acf2:	f8c4 6454 	str.w	r6, [r4, #1108]	; 0x454
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800acf6:	f8d4 3420 	ldr.w	r3, [r4, #1056]	; 0x420
 800acfa:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800acfe:	f8c4 345c 	str.w	r3, [r4, #1116]	; 0x45c
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800ad02:	f001 ffd6 	bl	800ccb2 <LoRaMacClassBIsBeaconModeActive>
 800ad06:	bb60      	cbnz	r0, 800ad62 <SendFrameOnChannel+0xd2>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800ad08:	4b1b      	ldr	r3, [pc, #108]	; (800ad78 <SendFrameOnChannel+0xe8>)
 800ad0a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800ad0e:	2b01      	cmp	r3, #1
 800ad10:	d02f      	beq.n	800ad72 <SendFrameOnChannel+0xe2>
    LoRaMacClassBHaltBeaconing( );
 800ad12:	f001 ffd1 	bl	800ccb8 <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 800ad16:	4b18      	ldr	r3, [pc, #96]	; (800ad78 <SendFrameOnChannel+0xe8>)
 800ad18:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 800ad1c:	4b17      	ldr	r3, [pc, #92]	; (800ad7c <SendFrameOnChannel+0xec>)
 800ad1e:	f893 141f 	ldrb.w	r1, [r3, #1055]	; 0x41f
 800ad22:	b2c0      	uxtb	r0, r0
 800ad24:	f7ff ff7a 	bl	800ac1c <SecureFrame>
    if( status != LORAMAC_STATUS_OK )
 800ad28:	4604      	mov	r4, r0
 800ad2a:	b9b8      	cbnz	r0, 800ad5c <SendFrameOnChannel+0xcc>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800ad2c:	4813      	ldr	r0, [pc, #76]	; (800ad7c <SendFrameOnChannel+0xec>)
 800ad2e:	f8d0 3340 	ldr.w	r3, [r0, #832]	; 0x340
 800ad32:	f043 0302 	orr.w	r3, r3, #2
 800ad36:	f8c0 3340 	str.w	r3, [r0, #832]	; 0x340
    MacCtx.ChannelsNbTransCounter++;
 800ad3a:	f890 341c 	ldrb.w	r3, [r0, #1052]	; 0x41c
 800ad3e:	3301      	adds	r3, #1
 800ad40:	b2db      	uxtb	r3, r3
 800ad42:	f880 341c 	strb.w	r3, [r0, #1052]	; 0x41c
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800ad46:	f880 3449 	strb.w	r3, [r0, #1097]	; 0x449
    MacCtx.ResponseTimeoutStartTime = 0;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	f8c0 349c 	str.w	r3, [r0, #1180]	; 0x49c
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800ad50:	4b0b      	ldr	r3, [pc, #44]	; (800ad80 <SendFrameOnChannel+0xf0>)
 800ad52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad54:	f830 1b02 	ldrh.w	r1, [r0], #2
 800ad58:	b2c9      	uxtb	r1, r1
 800ad5a:	4798      	blx	r3
}
 800ad5c:	4620      	mov	r0, r4
 800ad5e:	b006      	add	sp, #24
 800ad60:	bd70      	pop	{r4, r5, r6, pc}
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800ad62:	f8d4 0420 	ldr.w	r0, [r4, #1056]	; 0x420
 800ad66:	f001 ffb6 	bl	800ccd6 <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 800ad6a:	2800      	cmp	r0, #0
 800ad6c:	d0cc      	beq.n	800ad08 <SendFrameOnChannel+0x78>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800ad6e:	2410      	movs	r4, #16
 800ad70:	e7f4      	b.n	800ad5c <SendFrameOnChannel+0xcc>
        LoRaMacClassBStopRxSlots( );
 800ad72:	f001 ffb2 	bl	800ccda <LoRaMacClassBStopRxSlots>
 800ad76:	e7cc      	b.n	800ad12 <SendFrameOnChannel+0x82>
 800ad78:	20008000 	.word	0x20008000
 800ad7c:	20000820 	.word	0x20000820
 800ad80:	08014f0c 	.word	0x08014f0c

0800ad84 <ScheduleTx>:
{
 800ad84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad88:	b08c      	sub	sp, #48	; 0x30
 800ad8a:	4605      	mov	r5, r0
    status = CheckForClassBCollision( );
 800ad8c:	f7ff fdb6 	bl	800a8fc <CheckForClassBCollision>
    if( status != LORAMAC_STATUS_OK )
 800ad90:	4604      	mov	r4, r0
 800ad92:	b118      	cbz	r0, 800ad9c <ScheduleTx+0x18>
}
 800ad94:	4620      	mov	r0, r4
 800ad96:	b00c      	add	sp, #48	; 0x30
 800ad98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CalculateBackOff( );
 800ad9c:	f7fe fd50 	bl	8009840 <CalculateBackOff>
    status = SerializeTxFrame( );
 800ada0:	f7ff feb2 	bl	800ab08 <SerializeTxFrame>
    if( status != LORAMAC_STATUS_OK )
 800ada4:	4604      	mov	r4, r0
 800ada6:	2800      	cmp	r0, #0
 800ada8:	d1f4      	bne.n	800ad94 <ScheduleTx+0x10>
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800adaa:	4e36      	ldr	r6, [pc, #216]	; (800ae84 <ScheduleTx+0x100>)
 800adac:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800adae:	9304      	str	r3, [sp, #16]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800adb0:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 800adb4:	f88d 3018 	strb.w	r3, [sp, #24]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800adb8:	f896 3108 	ldrb.w	r3, [r6, #264]	; 0x108
 800adbc:	f88d 301a 	strb.w	r3, [sp, #26]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800adc0:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800adc4:	4640      	mov	r0, r8
 800adc6:	f008 f913 	bl	8012ff0 <SysTimeGetMcuTime>
 800adca:	af02      	add	r7, sp, #8
 800adcc:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
 800add0:	9300      	str	r3, [sp, #0]
 800add2:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
 800add6:	e898 0006 	ldmia.w	r8, {r1, r2}
 800adda:	4638      	mov	r0, r7
 800addc:	f008 f8a5 	bl	8012f2a <SysTimeSub>
 800ade0:	ab07      	add	r3, sp, #28
 800ade2:	e897 0003 	ldmia.w	r7, {r0, r1}
 800ade6:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800adea:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800adec:	9305      	str	r3, [sp, #20]
    nextChan.LastTxIsJoinRequest = false;
 800adee:	2300      	movs	r3, #0
 800adf0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    nextChan.Joined = true;
 800adf4:	2301      	movs	r3, #1
 800adf6:	f88d 3019 	strb.w	r3, [sp, #25]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800adfa:	4b23      	ldr	r3, [pc, #140]	; (800ae88 <ScheduleTx+0x104>)
 800adfc:	881b      	ldrh	r3, [r3, #0]
 800adfe:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800ae02:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
 800ae06:	b92b      	cbnz	r3, 800ae14 <ScheduleTx+0x90>
        nextChan.LastTxIsJoinRequest = true;
 800ae08:	2301      	movs	r3, #1
 800ae0a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        nextChan.Joined = false;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	f88d 3019 	strb.w	r3, [sp, #25]
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800ae14:	4a1c      	ldr	r2, [pc, #112]	; (800ae88 <ScheduleTx+0x104>)
 800ae16:	481b      	ldr	r0, [pc, #108]	; (800ae84 <ScheduleTx+0x100>)
 800ae18:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ae1c:	9300      	str	r3, [sp, #0]
 800ae1e:	f502 6393 	add.w	r3, r2, #1176	; 0x498
 800ae22:	f202 421f 	addw	r2, r2, #1055	; 0x41f
 800ae26:	a904      	add	r1, sp, #16
 800ae28:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 800ae2c:	f003 f81c 	bl	800de68 <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 800ae30:	b1b0      	cbz	r0, 800ae60 <ScheduleTx+0xdc>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 800ae32:	280b      	cmp	r0, #11
 800ae34:	d122      	bne.n	800ae7c <ScheduleTx+0xf8>
 800ae36:	b31d      	cbz	r5, 800ae80 <ScheduleTx+0xfc>
            if( MacCtx.DutyCycleWaitTime != 0 )
 800ae38:	4b13      	ldr	r3, [pc, #76]	; (800ae88 <ScheduleTx+0x104>)
 800ae3a:	f8d3 1498 	ldr.w	r1, [r3, #1176]	; 0x498
 800ae3e:	2900      	cmp	r1, #0
 800ae40:	d0a8      	beq.n	800ad94 <ScheduleTx+0x10>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800ae42:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800ae46:	f042 0220 	orr.w	r2, r2, #32
 800ae4a:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800ae4e:	f503 755a 	add.w	r5, r3, #872	; 0x368
 800ae52:	4628      	mov	r0, r5
 800ae54:	f008 fa38 	bl	80132c8 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 800ae58:	4628      	mov	r0, r5
 800ae5a:	f008 f9ef 	bl	801323c <UTIL_TIMER_Start>
            return LORAMAC_STATUS_OK;
 800ae5e:	e799      	b.n	800ad94 <ScheduleTx+0x10>
    ComputeRxWindowParameters( );
 800ae60:	f7ff fe76 	bl	800ab50 <ComputeRxWindowParameters>
    status = VerifyTxFrame( );
 800ae64:	f7ff feb6 	bl	800abd4 <VerifyTxFrame>
    if( status != LORAMAC_STATUS_OK )
 800ae68:	4604      	mov	r4, r0
 800ae6a:	2800      	cmp	r0, #0
 800ae6c:	d192      	bne.n	800ad94 <ScheduleTx+0x10>
    return SendFrameOnChannel( MacCtx.Channel );
 800ae6e:	4b06      	ldr	r3, [pc, #24]	; (800ae88 <ScheduleTx+0x104>)
 800ae70:	f893 041f 	ldrb.w	r0, [r3, #1055]	; 0x41f
 800ae74:	f7ff ff0c 	bl	800ac90 <SendFrameOnChannel>
 800ae78:	4604      	mov	r4, r0
 800ae7a:	e78b      	b.n	800ad94 <ScheduleTx+0x10>
            return status;
 800ae7c:	4604      	mov	r4, r0
 800ae7e:	e789      	b.n	800ad94 <ScheduleTx+0x10>
 800ae80:	4604      	mov	r4, r0
 800ae82:	e787      	b.n	800ad94 <ScheduleTx+0x10>
 800ae84:	20008000 	.word	0x20008000
 800ae88:	20000820 	.word	0x20000820

0800ae8c <OnTxDelayedTimerEvent>:
{
 800ae8c:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 800ae8e:	4c16      	ldr	r4, [pc, #88]	; (800aee8 <OnTxDelayedTimerEvent+0x5c>)
 800ae90:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800ae94:	f008 f978 	bl	8013188 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800ae98:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800ae9c:	f023 0320 	bic.w	r3, r3, #32
 800aea0:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800aea4:	f8d4 149c 	ldr.w	r1, [r4, #1180]	; 0x49c
 800aea8:	4b10      	ldr	r3, [pc, #64]	; (800aeec <OnTxDelayedTimerEvent+0x60>)
 800aeaa:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800aeae:	f7ff fdeb 	bl	800aa88 <LoRaMacHandleResponseTimeout>
 800aeb2:	b100      	cbz	r0, 800aeb6 <OnTxDelayedTimerEvent+0x2a>
}
 800aeb4:	bd10      	pop	{r4, pc}
    switch( ScheduleTx( true ) )
 800aeb6:	2001      	movs	r0, #1
 800aeb8:	f7ff ff64 	bl	800ad84 <ScheduleTx>
 800aebc:	2800      	cmp	r0, #0
 800aebe:	d0f9      	beq.n	800aeb4 <OnTxDelayedTimerEvent+0x28>
 800aec0:	280b      	cmp	r0, #11
 800aec2:	d0f7      	beq.n	800aeb4 <OnTxDelayedTimerEvent+0x28>
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800aec4:	4b09      	ldr	r3, [pc, #36]	; (800aeec <OnTxDelayedTimerEvent+0x60>)
 800aec6:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800aeca:	f884 2446 	strb.w	r2, [r4, #1094]	; 0x446
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800aece:	f894 241c 	ldrb.w	r2, [r4, #1052]	; 0x41c
 800aed2:	f884 2449 	strb.w	r2, [r4, #1097]	; 0x449
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800aed6:	2009      	movs	r0, #9
 800aed8:	f884 0445 	strb.w	r0, [r4, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800aedc:	f002 f93a 	bl	800d154 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800aee0:	f7fe fd40 	bl	8009964 <StopRetransmission>
            break;
 800aee4:	e7e6      	b.n	800aeb4 <OnTxDelayedTimerEvent+0x28>
 800aee6:	bf00      	nop
 800aee8:	20000820 	.word	0x20000820
 800aeec:	20008000 	.word	0x20008000

0800aef0 <LoRaMacHandleMcpsRequest>:
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800aef0:	4b1c      	ldr	r3, [pc, #112]	; (800af64 <LoRaMacHandleMcpsRequest+0x74>)
 800aef2:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800aef6:	f013 0f01 	tst.w	r3, #1
 800aefa:	d032      	beq.n	800af62 <LoRaMacHandleMcpsRequest+0x72>
{
 800aefc:	b510      	push	{r4, lr}
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800aefe:	4b19      	ldr	r3, [pc, #100]	; (800af64 <LoRaMacHandleMcpsRequest+0x74>)
 800af00:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 800af04:	b12b      	cbz	r3, 800af12 <LoRaMacHandleMcpsRequest+0x22>
 800af06:	2b03      	cmp	r3, #3
 800af08:	d003      	beq.n	800af12 <LoRaMacHandleMcpsRequest+0x22>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800af0a:	2b01      	cmp	r3, #1
 800af0c:	d006      	beq.n	800af1c <LoRaMacHandleMcpsRequest+0x2c>
        bool waitForRetransmission = false;
 800af0e:	2000      	movs	r0, #0
 800af10:	e002      	b.n	800af18 <LoRaMacHandleMcpsRequest+0x28>
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800af12:	f7fe fced 	bl	80098f0 <CheckRetransUnconfirmedUplink>
        if( stopRetransmission == true )
 800af16:	b940      	cbnz	r0, 800af2a <LoRaMacHandleMcpsRequest+0x3a>
        else if( waitForRetransmission == false )
 800af18:	b1b8      	cbz	r0, 800af4a <LoRaMacHandleMcpsRequest+0x5a>
}
 800af1a:	bd10      	pop	{r4, pc}
            if( MacCtx.RetransmitTimeoutRetry == true )
 800af1c:	4b11      	ldr	r3, [pc, #68]	; (800af64 <LoRaMacHandleMcpsRequest+0x74>)
 800af1e:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
 800af22:	b183      	cbz	r3, 800af46 <LoRaMacHandleMcpsRequest+0x56>
                stopRetransmission = CheckRetransConfirmedUplink( );
 800af24:	f7fe fd00 	bl	8009928 <CheckRetransConfirmedUplink>
 800af28:	e7f5      	b.n	800af16 <LoRaMacHandleMcpsRequest+0x26>
            TimerStop( &MacCtx.TxDelayedTimer );
 800af2a:	4c0e      	ldr	r4, [pc, #56]	; (800af64 <LoRaMacHandleMcpsRequest+0x74>)
 800af2c:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800af30:	f008 f92a 	bl	8013188 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800af34:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800af38:	f023 0320 	bic.w	r3, r3, #32
 800af3c:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
            StopRetransmission( );
 800af40:	f7fe fd10 	bl	8009964 <StopRetransmission>
 800af44:	e7e9      	b.n	800af1a <LoRaMacHandleMcpsRequest+0x2a>
                waitForRetransmission = true;
 800af46:	2001      	movs	r0, #1
 800af48:	e7e6      	b.n	800af18 <LoRaMacHandleMcpsRequest+0x28>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800af4a:	4b06      	ldr	r3, [pc, #24]	; (800af64 <LoRaMacHandleMcpsRequest+0x74>)
 800af4c:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800af50:	f36f 1245 	bfc	r2, #5, #1
 800af54:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
            MacCtx.RetransmitTimeoutRetry = false;
 800af58:	f883 041d 	strb.w	r0, [r3, #1053]	; 0x41d
            OnTxDelayedTimerEvent( NULL );
 800af5c:	f7ff ff96 	bl	800ae8c <OnTxDelayedTimerEvent>
}
 800af60:	e7db      	b.n	800af1a <LoRaMacHandleMcpsRequest+0x2a>
 800af62:	4770      	bx	lr
 800af64:	20000820 	.word	0x20000820

0800af68 <LoRaMacHandleRequestEvents>:
{
 800af68:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState == LORAMAC_IDLE )
 800af6a:	4b22      	ldr	r3, [pc, #136]	; (800aff4 <LoRaMacHandleRequestEvents+0x8c>)
 800af6c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800af70:	bb7b      	cbnz	r3, 800afd2 <LoRaMacHandleRequestEvents+0x6a>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800af72:	4b20      	ldr	r3, [pc, #128]	; (800aff4 <LoRaMacHandleRequestEvents+0x8c>)
 800af74:	f893 4495 	ldrb.w	r4, [r3, #1173]	; 0x495
 800af78:	f014 0501 	ands.w	r5, r4, #1
 800af7c:	d005      	beq.n	800af8a <LoRaMacHandleRequestEvents+0x22>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800af7e:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800af82:	f36f 0200 	bfc	r2, #0, #1
 800af86:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800af8a:	4b1a      	ldr	r3, [pc, #104]	; (800aff4 <LoRaMacHandleRequestEvents+0x8c>)
 800af8c:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800af90:	f013 0f04 	tst.w	r3, #4
 800af94:	d006      	beq.n	800afa4 <LoRaMacHandleRequestEvents+0x3c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800af96:	4b17      	ldr	r3, [pc, #92]	; (800aff4 <LoRaMacHandleRequestEvents+0x8c>)
 800af98:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800af9c:	f36f 0282 	bfc	r2, #2, #1
 800afa0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800afa4:	2001      	movs	r0, #1
 800afa6:	f7fe fbfb 	bl	80097a0 <LoRaMacEnableRequests>
        if( reqEvents.Bits.McpsReq == 1 )
 800afaa:	b135      	cbz	r5, 800afba <LoRaMacHandleRequestEvents+0x52>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800afac:	4811      	ldr	r0, [pc, #68]	; (800aff4 <LoRaMacHandleRequestEvents+0x8c>)
 800afae:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	f200 4044 	addw	r0, r0, #1092	; 0x444
 800afb8:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 800afba:	f014 0f04 	tst.w	r4, #4
 800afbe:	d109      	bne.n	800afd4 <LoRaMacHandleRequestEvents+0x6c>
        LoRaMacClassBResumeBeaconing( );
 800afc0:	f001 fe7b 	bl	800ccba <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 800afc4:	4b0b      	ldr	r3, [pc, #44]	; (800aff4 <LoRaMacHandleRequestEvents+0x8c>)
 800afc6:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800afca:	f36f 1245 	bfc	r2, #5, #1
 800afce:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
}
 800afd2:	bd38      	pop	{r3, r4, r5, pc}
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800afd4:	4808      	ldr	r0, [pc, #32]	; (800aff8 <LoRaMacHandleRequestEvents+0x90>)
 800afd6:	f002 f8e7 	bl	800d1a8 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800afda:	f002 f917 	bl	800d20c <LoRaMacConfirmQueueGetCnt>
 800afde:	2800      	cmp	r0, #0
 800afe0:	d0ee      	beq.n	800afc0 <LoRaMacHandleRequestEvents+0x58>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800afe2:	4a04      	ldr	r2, [pc, #16]	; (800aff4 <LoRaMacHandleRequestEvents+0x8c>)
 800afe4:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800afe8:	f043 0304 	orr.w	r3, r3, #4
 800afec:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
 800aff0:	e7e6      	b.n	800afc0 <LoRaMacHandleRequestEvents+0x58>
 800aff2:	bf00      	nop
 800aff4:	20000820 	.word	0x20000820
 800aff8:	20000c78 	.word	0x20000c78

0800affc <LoRaMacHandleScheduleUplinkEvent>:
    if( MacCtx.MacState == LORAMAC_IDLE )
 800affc:	4b07      	ldr	r3, [pc, #28]	; (800b01c <LoRaMacHandleScheduleUplinkEvent+0x20>)
 800affe:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800b002:	b103      	cbz	r3, 800b006 <LoRaMacHandleScheduleUplinkEvent+0xa>
 800b004:	4770      	bx	lr
{
 800b006:	b500      	push	{lr}
 800b008:	b083      	sub	sp, #12
        bool isStickyMacCommandPending = false;
 800b00a:	f88d 3007 	strb.w	r3, [sp, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800b00e:	f10d 0007 	add.w	r0, sp, #7
 800b012:	f001 ffab 	bl	800cf6c <LoRaMacCommandsStickyCmdsPending>
}
 800b016:	b003      	add	sp, #12
 800b018:	f85d fb04 	ldr.w	pc, [sp], #4
 800b01c:	20000820 	.word	0x20000820

0800b020 <OpenContinuousRxCWindow>:
{
 800b020:	b570      	push	{r4, r5, r6, lr}
 800b022:	b082      	sub	sp, #8
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 800b024:	4c16      	ldr	r4, [pc, #88]	; (800b080 <OpenContinuousRxCWindow+0x60>)
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800b026:	4d17      	ldr	r5, [pc, #92]	; (800b084 <OpenContinuousRxCWindow+0x64>)
 800b028:	f505 767a 	add.w	r6, r5, #1000	; 0x3e8
 800b02c:	9600      	str	r6, [sp, #0]
 800b02e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b030:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800b034:	f994 1070 	ldrsb.w	r1, [r4, #112]	; 0x70
 800b038:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b03c:	f002 fe75 	bl	800dd2a <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800b040:	2302      	movs	r3, #2
 800b042:	f885 33fb 	strb.w	r3, [r5, #1019]	; 0x3fb
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800b046:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 800b04a:	f885 33fc 	strb.w	r3, [r5, #1020]	; 0x3fc
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800b04e:	2301      	movs	r3, #1
 800b050:	f885 33fa 	strb.w	r3, [r5, #1018]	; 0x3fa
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800b054:	f505 6285 	add.w	r2, r5, #1064	; 0x428
 800b058:	4631      	mov	r1, r6
 800b05a:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b05e:	f002 fe78 	bl	800dd52 <RegionRxConfig>
 800b062:	b158      	cbz	r0, 800b07c <OpenContinuousRxCWindow+0x5c>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800b064:	f895 3428 	ldrb.w	r3, [r5, #1064]	; 0x428
 800b068:	f885 346e 	strb.w	r3, [r5, #1134]	; 0x46e
        Radio.Rx( 0 ); // Continuous mode
 800b06c:	4b06      	ldr	r3, [pc, #24]	; (800b088 <OpenContinuousRxCWindow+0x68>)
 800b06e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b070:	2000      	movs	r0, #0
 800b072:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800b074:	f895 33fb 	ldrb.w	r3, [r5, #1019]	; 0x3fb
 800b078:	f885 3494 	strb.w	r3, [r5, #1172]	; 0x494
}
 800b07c:	b002      	add	sp, #8
 800b07e:	bd70      	pop	{r4, r5, r6, pc}
 800b080:	20008000 	.word	0x20008000
 800b084:	20000820 	.word	0x20000820
 800b088:	08014f0c 	.word	0x08014f0c

0800b08c <RxWindowSetup>:
{
 800b08c:	b538      	push	{r3, r4, r5, lr}
 800b08e:	460c      	mov	r4, r1
    TimerStop( rxTimer );
 800b090:	f008 f87a 	bl	8013188 <UTIL_TIMER_Stop>
    Radio.Standby( );
 800b094:	4b0c      	ldr	r3, [pc, #48]	; (800b0c8 <RxWindowSetup+0x3c>)
 800b096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b098:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800b09a:	4a0c      	ldr	r2, [pc, #48]	; (800b0cc <RxWindowSetup+0x40>)
 800b09c:	4621      	mov	r1, r4
 800b09e:	4b0c      	ldr	r3, [pc, #48]	; (800b0d0 <RxWindowSetup+0x44>)
 800b0a0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b0a4:	f002 fe55 	bl	800dd52 <RegionRxConfig>
 800b0a8:	b160      	cbz	r0, 800b0c4 <RxWindowSetup+0x38>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800b0aa:	4d0a      	ldr	r5, [pc, #40]	; (800b0d4 <RxWindowSetup+0x48>)
 800b0ac:	f895 3428 	ldrb.w	r3, [r5, #1064]	; 0x428
 800b0b0:	f885 346e 	strb.w	r3, [r5, #1134]	; 0x46e
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 800b0b4:	4b04      	ldr	r3, [pc, #16]	; (800b0c8 <RxWindowSetup+0x3c>)
 800b0b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0b8:	4a05      	ldr	r2, [pc, #20]	; (800b0d0 <RxWindowSetup+0x44>)
 800b0ba:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 800b0bc:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800b0be:	7ce3      	ldrb	r3, [r4, #19]
 800b0c0:	f885 3494 	strb.w	r3, [r5, #1172]	; 0x494
}
 800b0c4:	bd38      	pop	{r3, r4, r5, pc}
 800b0c6:	bf00      	nop
 800b0c8:	08014f0c 	.word	0x08014f0c
 800b0cc:	20000c48 	.word	0x20000c48
 800b0d0:	20008000 	.word	0x20008000
 800b0d4:	20000820 	.word	0x20000820

0800b0d8 <OnRxWindow2TimerEvent>:
{
 800b0d8:	b508      	push	{r3, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800b0da:	4b13      	ldr	r3, [pc, #76]	; (800b128 <OnRxWindow2TimerEvent+0x50>)
 800b0dc:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800b0e0:	b903      	cbnz	r3, 800b0e4 <OnRxWindow2TimerEvent+0xc>
}
 800b0e2:	bd08      	pop	{r3, pc}
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800b0e4:	4810      	ldr	r0, [pc, #64]	; (800b128 <OnRxWindow2TimerEvent+0x50>)
 800b0e6:	f890 341f 	ldrb.w	r3, [r0, #1055]	; 0x41f
 800b0ea:	f880 33d0 	strb.w	r3, [r0, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800b0ee:	4b0f      	ldr	r3, [pc, #60]	; (800b12c <OnRxWindow2TimerEvent+0x54>)
 800b0f0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b0f2:	f8c0 23d4 	str.w	r2, [r0, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b0f6:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800b0fa:	f880 23e0 	strb.w	r2, [r0, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800b0fe:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800b102:	f880 23e1 	strb.w	r2, [r0, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800b106:	2200      	movs	r2, #0
 800b108:	f880 23e2 	strb.w	r2, [r0, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800b10c:	2201      	movs	r2, #1
 800b10e:	f880 23e3 	strb.w	r2, [r0, #995]	; 0x3e3
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800b112:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800b116:	f880 33e4 	strb.w	r3, [r0, #996]	; 0x3e4
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800b11a:	f500 7174 	add.w	r1, r0, #976	; 0x3d0
 800b11e:	f500 7066 	add.w	r0, r0, #920	; 0x398
 800b122:	f7ff ffb3 	bl	800b08c <RxWindowSetup>
 800b126:	e7dc      	b.n	800b0e2 <OnRxWindow2TimerEvent+0xa>
 800b128:	20000820 	.word	0x20000820
 800b12c:	20008000 	.word	0x20008000

0800b130 <OnRxWindow1TimerEvent>:
{
 800b130:	b508      	push	{r3, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800b132:	4811      	ldr	r0, [pc, #68]	; (800b178 <OnRxWindow1TimerEvent+0x48>)
 800b134:	f890 341f 	ldrb.w	r3, [r0, #1055]	; 0x41f
 800b138:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800b13c:	4b0f      	ldr	r3, [pc, #60]	; (800b17c <OnRxWindow1TimerEvent+0x4c>)
 800b13e:	f993 2061 	ldrsb.w	r2, [r3, #97]	; 0x61
 800b142:	f880 23bb 	strb.w	r2, [r0, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b146:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800b14a:	f880 23c8 	strb.w	r2, [r0, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800b14e:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800b152:	f880 23c9 	strb.w	r2, [r0, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800b156:	2200      	movs	r2, #0
 800b158:	f880 23ca 	strb.w	r2, [r0, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800b15c:	f880 23cb 	strb.w	r2, [r0, #971]	; 0x3cb
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800b160:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800b164:	f880 33cc 	strb.w	r3, [r0, #972]	; 0x3cc
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800b168:	f500 716e 	add.w	r1, r0, #952	; 0x3b8
 800b16c:	f500 7060 	add.w	r0, r0, #896	; 0x380
 800b170:	f7ff ff8c 	bl	800b08c <RxWindowSetup>
}
 800b174:	bd08      	pop	{r3, pc}
 800b176:	bf00      	nop
 800b178:	20000820 	.word	0x20000820
 800b17c:	20008000 	.word	0x20008000

0800b180 <LoRaMacHandleNvm>:
{
 800b180:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_IDLE )
 800b182:	4b30      	ldr	r3, [pc, #192]	; (800b244 <LoRaMacHandleNvm+0xc4>)
 800b184:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800b188:	b103      	cbz	r3, 800b18c <LoRaMacHandleNvm+0xc>
}
 800b18a:	bd38      	pop	{r3, r4, r5, pc}
 800b18c:	4604      	mov	r4, r0
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800b18e:	2124      	movs	r1, #36	; 0x24
 800b190:	f005 fe1e 	bl	8010dd0 <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 800b194:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b196:	4283      	cmp	r3, r0
 800b198:	d052      	beq.n	800b240 <LoRaMacHandleNvm+0xc0>
        nvmData->Crypto.Crc32 = crc;
 800b19a:	6260      	str	r0, [r4, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800b19c:	2501      	movs	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800b19e:	2114      	movs	r1, #20
 800b1a0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b1a4:	f005 fe14 	bl	8010dd0 <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 800b1a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b1aa:	4283      	cmp	r3, r0
 800b1ac:	d002      	beq.n	800b1b4 <LoRaMacHandleNvm+0x34>
        nvmData->MacGroup1.Crc32 = crc;
 800b1ae:	63e0      	str	r0, [r4, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800b1b0:	f045 0502 	orr.w	r5, r5, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800b1b4:	21e0      	movs	r1, #224	; 0xe0
 800b1b6:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800b1ba:	f005 fe09 	bl	8010dd0 <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 800b1be:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800b1c2:	4283      	cmp	r3, r0
 800b1c4:	d003      	beq.n	800b1ce <LoRaMacHandleNvm+0x4e>
        nvmData->MacGroup2.Crc32 = crc;
 800b1c6:	f8c4 0120 	str.w	r0, [r4, #288]	; 0x120
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800b1ca:	f045 0504 	orr.w	r5, r5, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800b1ce:	21bc      	movs	r1, #188	; 0xbc
 800b1d0:	f504 7092 	add.w	r0, r4, #292	; 0x124
 800b1d4:	f005 fdfc 	bl	8010dd0 <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 800b1d8:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800b1dc:	4283      	cmp	r3, r0
 800b1de:	d003      	beq.n	800b1e8 <LoRaMacHandleNvm+0x68>
        nvmData->SecureElement.Crc32 = crc;
 800b1e0:	f8c4 01e0 	str.w	r0, [r4, #480]	; 0x1e0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800b1e4:	f045 0508 	orr.w	r5, r5, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800b1e8:	2110      	movs	r1, #16
 800b1ea:	f504 70f2 	add.w	r0, r4, #484	; 0x1e4
 800b1ee:	f005 fdef 	bl	8010dd0 <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 800b1f2:	f8d4 31f4 	ldr.w	r3, [r4, #500]	; 0x1f4
 800b1f6:	4283      	cmp	r3, r0
 800b1f8:	d003      	beq.n	800b202 <LoRaMacHandleNvm+0x82>
        nvmData->RegionGroup1.Crc32 = crc;
 800b1fa:	f8c4 01f4 	str.w	r0, [r4, #500]	; 0x1f4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800b1fe:	f045 0510 	orr.w	r5, r5, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800b202:	f44f 715e 	mov.w	r1, #888	; 0x378
 800b206:	f504 70fc 	add.w	r0, r4, #504	; 0x1f8
 800b20a:	f005 fde1 	bl	8010dd0 <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 800b20e:	f8d4 3570 	ldr.w	r3, [r4, #1392]	; 0x570
 800b212:	4283      	cmp	r3, r0
 800b214:	d003      	beq.n	800b21e <LoRaMacHandleNvm+0x9e>
        nvmData->RegionGroup2.Crc32 = crc;
 800b216:	f8c4 0570 	str.w	r0, [r4, #1392]	; 0x570
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800b21a:	f045 0520 	orr.w	r5, r5, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800b21e:	2114      	movs	r1, #20
 800b220:	f204 5074 	addw	r0, r4, #1396	; 0x574
 800b224:	f005 fdd4 	bl	8010dd0 <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 800b228:	f8d4 3588 	ldr.w	r3, [r4, #1416]	; 0x588
 800b22c:	4283      	cmp	r3, r0
 800b22e:	d003      	beq.n	800b238 <LoRaMacHandleNvm+0xb8>
        nvmData->ClassB.Crc32 = crc;
 800b230:	f8c4 0588 	str.w	r0, [r4, #1416]	; 0x588
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800b234:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    CallNvmDataChangeCallback( notifyFlags );
 800b238:	4628      	mov	r0, r5
 800b23a:	f7fe fbbd 	bl	80099b8 <CallNvmDataChangeCallback>
 800b23e:	e7a4      	b.n	800b18a <LoRaMacHandleNvm+0xa>
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800b240:	2500      	movs	r5, #0
 800b242:	e7ac      	b.n	800b19e <LoRaMacHandleNvm+0x1e>
 800b244:	20000820 	.word	0x20000820

0800b248 <RestoreNvmData>:
{
 800b248:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800b24a:	4b34      	ldr	r3, [pc, #208]	; (800b31c <RestoreNvmData+0xd4>)
 800b24c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800b250:	2b01      	cmp	r3, #1
 800b252:	d001      	beq.n	800b258 <RestoreNvmData+0x10>
        return LORAMAC_STATUS_BUSY;
 800b254:	2001      	movs	r0, #1
}
 800b256:	bd38      	pop	{r3, r4, r5, pc}
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 800b258:	4c31      	ldr	r4, [pc, #196]	; (800b320 <RestoreNvmData+0xd8>)
 800b25a:	2124      	movs	r1, #36	; 0x24
 800b25c:	4620      	mov	r0, r4
 800b25e:	f005 fdb7 	bl	8010dd0 <Crc32>
    if( crc != NvmBackup.Crypto.Crc32 )
 800b262:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b264:	4283      	cmp	r3, r0
 800b266:	d001      	beq.n	800b26c <RestoreNvmData+0x24>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800b268:	2017      	movs	r0, #23
 800b26a:	e7f4      	b.n	800b256 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 800b26c:	2114      	movs	r1, #20
 800b26e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b272:	f005 fdad 	bl	8010dd0 <Crc32>
    if( crc != NvmBackup.MacGroup1.Crc32 )
 800b276:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b278:	4283      	cmp	r3, r0
 800b27a:	d001      	beq.n	800b280 <RestoreNvmData+0x38>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800b27c:	2017      	movs	r0, #23
 800b27e:	e7ea      	b.n	800b256 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 800b280:	21e0      	movs	r1, #224	; 0xe0
 800b282:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800b286:	f005 fda3 	bl	8010dd0 <Crc32>
    if( crc != NvmBackup.MacGroup2.Crc32 )
 800b28a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800b28e:	4283      	cmp	r3, r0
 800b290:	d001      	beq.n	800b296 <RestoreNvmData+0x4e>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800b292:	2017      	movs	r0, #23
 800b294:	e7df      	b.n	800b256 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 800b296:	21bc      	movs	r1, #188	; 0xbc
 800b298:	f504 7092 	add.w	r0, r4, #292	; 0x124
 800b29c:	f005 fd98 	bl	8010dd0 <Crc32>
    if( crc != NvmBackup.SecureElement.Crc32 )
 800b2a0:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800b2a4:	4283      	cmp	r3, r0
 800b2a6:	d001      	beq.n	800b2ac <RestoreNvmData+0x64>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800b2a8:	2017      	movs	r0, #23
 800b2aa:	e7d4      	b.n	800b256 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 800b2ac:	2110      	movs	r1, #16
 800b2ae:	f504 70f2 	add.w	r0, r4, #484	; 0x1e4
 800b2b2:	f005 fd8d 	bl	8010dd0 <Crc32>
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 800b2b6:	f8d4 31f4 	ldr.w	r3, [r4, #500]	; 0x1f4
 800b2ba:	4283      	cmp	r3, r0
 800b2bc:	d001      	beq.n	800b2c2 <RestoreNvmData+0x7a>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800b2be:	2017      	movs	r0, #23
 800b2c0:	e7c9      	b.n	800b256 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 800b2c2:	2114      	movs	r1, #20
 800b2c4:	f204 5074 	addw	r0, r4, #1396	; 0x574
 800b2c8:	f005 fd82 	bl	8010dd0 <Crc32>
    if( crc != NvmBackup.ClassB.Crc32 )
 800b2cc:	f8d4 3588 	ldr.w	r3, [r4, #1416]	; 0x588
 800b2d0:	4283      	cmp	r3, r0
 800b2d2:	d001      	beq.n	800b2d8 <RestoreNvmData+0x90>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800b2d4:	2017      	movs	r0, #23
 800b2d6:	e7be      	b.n	800b256 <RestoreNvmData+0xe>
    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 800b2d8:	4625      	mov	r5, r4
 800b2da:	4c12      	ldr	r4, [pc, #72]	; (800b324 <RestoreNvmData+0xdc>)
 800b2dc:	f240 528c 	movw	r2, #1420	; 0x58c
 800b2e0:	4629      	mov	r1, r5
 800b2e2:	4620      	mov	r0, r4
 800b2e4:	f005 fd53 	bl	8010d8e <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 800b2e8:	f240 528c 	movw	r2, #1420	; 0x58c
 800b2ec:	2100      	movs	r1, #0
 800b2ee:	4628      	mov	r0, r5
 800b2f0:	f005 fd65 	bl	8010dbe <memset1>
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800b2f4:	4b09      	ldr	r3, [pc, #36]	; (800b31c <RestoreNvmData+0xd4>)
 800b2f6:	f893 241f 	ldrb.w	r2, [r3, #1055]	; 0x41f
 800b2fa:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800b2fe:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800b300:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b304:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
 800b308:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800b30c:	2201      	movs	r2, #1
 800b30e:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800b312:	2202      	movs	r2, #2
 800b314:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
    return LORAMAC_STATUS_OK;
 800b318:	2000      	movs	r0, #0
 800b31a:	e79c      	b.n	800b256 <RestoreNvmData+0xe>
 800b31c:	20000820 	.word	0x20000820
 800b320:	2000858c 	.word	0x2000858c
 800b324:	20008000 	.word	0x20008000

0800b328 <OnRadioRxTimeout>:
{
 800b328:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800b32a:	4a09      	ldr	r2, [pc, #36]	; (800b350 <OnRadioRxTimeout+0x28>)
 800b32c:	7813      	ldrb	r3, [r2, #0]
 800b32e:	f043 0302 	orr.w	r3, r3, #2
 800b332:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800b334:	4b07      	ldr	r3, [pc, #28]	; (800b354 <OnRadioRxTimeout+0x2c>)
 800b336:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800b33a:	b113      	cbz	r3, 800b342 <OnRadioRxTimeout+0x1a>
 800b33c:	691b      	ldr	r3, [r3, #16]
 800b33e:	b103      	cbz	r3, 800b342 <OnRadioRxTimeout+0x1a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800b340:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800b342:	4b05      	ldr	r3, [pc, #20]	; (800b358 <OnRadioRxTimeout+0x30>)
 800b344:	2201      	movs	r2, #1
 800b346:	2100      	movs	r1, #0
 800b348:	2002      	movs	r0, #2
 800b34a:	f007 fbc9 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
}
 800b34e:	bd08      	pop	{r3, pc}
 800b350:	2000081c 	.word	0x2000081c
 800b354:	20000820 	.word	0x20000820
 800b358:	0801481c 	.word	0x0801481c

0800b35c <OnRadioTxTimeout>:
{
 800b35c:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800b35e:	4a09      	ldr	r2, [pc, #36]	; (800b384 <OnRadioTxTimeout+0x28>)
 800b360:	7813      	ldrb	r3, [r2, #0]
 800b362:	f043 0308 	orr.w	r3, r3, #8
 800b366:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800b368:	4b07      	ldr	r3, [pc, #28]	; (800b388 <OnRadioTxTimeout+0x2c>)
 800b36a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800b36e:	b113      	cbz	r3, 800b376 <OnRadioTxTimeout+0x1a>
 800b370:	691b      	ldr	r3, [r3, #16]
 800b372:	b103      	cbz	r3, 800b376 <OnRadioTxTimeout+0x1a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800b374:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800b376:	4b05      	ldr	r3, [pc, #20]	; (800b38c <OnRadioTxTimeout+0x30>)
 800b378:	2201      	movs	r2, #1
 800b37a:	2100      	movs	r1, #0
 800b37c:	2002      	movs	r0, #2
 800b37e:	f007 fbaf 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
}
 800b382:	bd08      	pop	{r3, pc}
 800b384:	2000081c 	.word	0x2000081c
 800b388:	20000820 	.word	0x20000820
 800b38c:	0801482c 	.word	0x0801482c

0800b390 <OnRadioRxDone>:
{
 800b390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b394:	4680      	mov	r8, r0
 800b396:	460f      	mov	r7, r1
 800b398:	4616      	mov	r6, r2
 800b39a:	461d      	mov	r5, r3
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800b39c:	f007 feb4 	bl	8013108 <UTIL_TIMER_GetCurrentTime>
 800b3a0:	4c0f      	ldr	r4, [pc, #60]	; (800b3e0 <OnRadioRxDone+0x50>)
 800b3a2:	6020      	str	r0, [r4, #0]
    RxDoneParams.Payload = payload;
 800b3a4:	f8c4 8004 	str.w	r8, [r4, #4]
    RxDoneParams.Size = size;
 800b3a8:	8127      	strh	r7, [r4, #8]
    RxDoneParams.Rssi = rssi;
 800b3aa:	8166      	strh	r6, [r4, #10]
    RxDoneParams.Snr = snr;
 800b3ac:	7325      	strb	r5, [r4, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 800b3ae:	4b0d      	ldr	r3, [pc, #52]	; (800b3e4 <OnRadioRxDone+0x54>)
 800b3b0:	781a      	ldrb	r2, [r3, #0]
 800b3b2:	f042 0210 	orr.w	r2, r2, #16
 800b3b6:	701a      	strb	r2, [r3, #0]
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800b3b8:	b2d2      	uxtb	r2, r2
 800b3ba:	f042 0201 	orr.w	r2, r2, #1
 800b3be:	701a      	strb	r2, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800b3c0:	4b09      	ldr	r3, [pc, #36]	; (800b3e8 <OnRadioRxDone+0x58>)
 800b3c2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800b3c6:	b113      	cbz	r3, 800b3ce <OnRadioRxDone+0x3e>
 800b3c8:	691b      	ldr	r3, [r3, #16]
 800b3ca:	b103      	cbz	r3, 800b3ce <OnRadioRxDone+0x3e>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800b3cc:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800b3ce:	4b07      	ldr	r3, [pc, #28]	; (800b3ec <OnRadioRxDone+0x5c>)
 800b3d0:	2201      	movs	r2, #1
 800b3d2:	2100      	movs	r1, #0
 800b3d4:	2002      	movs	r0, #2
 800b3d6:	f007 fb83 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
}
 800b3da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3de:	bf00      	nop
 800b3e0:	20000dd0 	.word	0x20000dd0
 800b3e4:	2000081c 	.word	0x2000081c
 800b3e8:	20000820 	.word	0x20000820
 800b3ec:	0801483c 	.word	0x0801483c

0800b3f0 <OnRadioTxDone>:
{
 800b3f0:	b530      	push	{r4, r5, lr}
 800b3f2:	b083      	sub	sp, #12
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800b3f4:	f007 fe88 	bl	8013108 <UTIL_TIMER_GetCurrentTime>
 800b3f8:	4b0f      	ldr	r3, [pc, #60]	; (800b438 <OnRadioTxDone+0x48>)
 800b3fa:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800b3fc:	4d0f      	ldr	r5, [pc, #60]	; (800b43c <OnRadioTxDone+0x4c>)
 800b3fe:	466c      	mov	r4, sp
 800b400:	4620      	mov	r0, r4
 800b402:	f007 fdd3 	bl	8012fac <SysTimeGet>
 800b406:	f505 734e 	add.w	r3, r5, #824	; 0x338
 800b40a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b40e:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 800b412:	4a0b      	ldr	r2, [pc, #44]	; (800b440 <OnRadioTxDone+0x50>)
 800b414:	7813      	ldrb	r3, [r2, #0]
 800b416:	f043 0320 	orr.w	r3, r3, #32
 800b41a:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800b41c:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
 800b420:	b113      	cbz	r3, 800b428 <OnRadioTxDone+0x38>
 800b422:	691b      	ldr	r3, [r3, #16]
 800b424:	b103      	cbz	r3, 800b428 <OnRadioTxDone+0x38>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800b426:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800b428:	4b06      	ldr	r3, [pc, #24]	; (800b444 <OnRadioTxDone+0x54>)
 800b42a:	2201      	movs	r2, #1
 800b42c:	2100      	movs	r1, #0
 800b42e:	2002      	movs	r0, #2
 800b430:	f007 fb56 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
}
 800b434:	b003      	add	sp, #12
 800b436:	bd30      	pop	{r4, r5, pc}
 800b438:	20000de0 	.word	0x20000de0
 800b43c:	20000820 	.word	0x20000820
 800b440:	2000081c 	.word	0x2000081c
 800b444:	0801484c 	.word	0x0801484c

0800b448 <ResetMacParameters>:
{
 800b448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b44a:	b091      	sub	sp, #68	; 0x44
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800b44c:	4c53      	ldr	r4, [pc, #332]	; (800b59c <ResetMacParameters+0x154>)
 800b44e:	2600      	movs	r6, #0
 800b450:	f884 611c 	strb.w	r6, [r4, #284]	; 0x11c
    Nvm.MacGroup1.AdrAckCounter = 0;
 800b454:	62a6      	str	r6, [r4, #40]	; 0x28
    MacCtx.ChannelsNbTransCounter = 0;
 800b456:	4d52      	ldr	r5, [pc, #328]	; (800b5a0 <ResetMacParameters+0x158>)
 800b458:	f885 641c 	strb.w	r6, [r5, #1052]	; 0x41c
    MacCtx.RetransmitTimeoutRetry = false;
 800b45c:	f885 641d 	strb.w	r6, [r5, #1053]	; 0x41d
    MacCtx.ResponseTimeoutStartTime = 0;
 800b460:	f8c5 649c 	str.w	r6, [r5, #1180]	; 0x49c
    Nvm.MacGroup2.MaxDCycle = 0;
 800b464:	f884 6107 	strb.w	r6, [r4, #263]	; 0x107
    Nvm.MacGroup2.AggregatedDCycle = 1;
 800b468:	2701      	movs	r7, #1
 800b46a:	f8a4 710c 	strh.w	r7, [r4, #268]	; 0x10c
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800b46e:	f994 30cc 	ldrsb.w	r3, [r4, #204]	; 0xcc
 800b472:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800b476:	f994 30cd 	ldrsb.w	r3, [r4, #205]	; 0xcd
 800b47a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800b47e:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 800b482:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800b486:	f104 0364 	add.w	r3, r4, #100	; 0x64
 800b48a:	f104 02a8 	add.w	r2, r4, #168	; 0xa8
 800b48e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b492:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800b496:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 800b49a:	f104 02b0 	add.w	r2, r4, #176	; 0xb0
 800b49e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b4a2:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800b4a6:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
 800b4aa:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800b4ae:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 800b4b2:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800b4b6:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 800b4ba:	67a3      	str	r3, [r4, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800b4bc:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 800b4c0:	67e3      	str	r3, [r4, #124]	; 0x7c
    MacCtx.NodeAckRequested = false;
 800b4c2:	f885 641e 	strb.w	r6, [r5, #1054]	; 0x41e
    Nvm.MacGroup1.SrvAckRequested = false;
 800b4c6:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800b4ca:	f884 6109 	strb.w	r6, [r4, #265]	; 0x109
    Nvm.MacGroup2.DownlinkReceived = false;
 800b4ce:	f884 610a 	strb.w	r6, [r4, #266]	; 0x10a
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800b4d2:	f88d 7010 	strb.w	r7, [sp, #16]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800b4d6:	f504 73f2 	add.w	r3, r4, #484	; 0x1e4
 800b4da:	9301      	str	r3, [sp, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800b4dc:	f504 73fc 	add.w	r3, r4, #504	; 0x1f8
 800b4e0:	9302      	str	r3, [sp, #8]
    params.Bands = &RegionBands;
 800b4e2:	4b30      	ldr	r3, [pc, #192]	; (800b5a4 <ResetMacParameters+0x15c>)
 800b4e4:	9303      	str	r3, [sp, #12]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800b4e6:	a901      	add	r1, sp, #4
 800b4e8:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b4ec:	f002 fbe2 	bl	800dcb4 <RegionInitDefaults>
    MacCtx.Channel = 0;
 800b4f0:	f885 641f 	strb.w	r6, [r5, #1055]	; 0x41f
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800b4f4:	f885 63d0 	strb.w	r6, [r5, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800b4f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b4fa:	f8c5 33d4 	str.w	r3, [r5, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b4fe:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800b502:	f885 33e0 	strb.w	r3, [r5, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800b506:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 800b50a:	f885 33e1 	strb.w	r3, [r5, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800b50e:	f885 63e2 	strb.w	r6, [r5, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800b512:	f885 73e3 	strb.w	r7, [r5, #995]	; 0x3e3
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800b516:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 800b51a:	f885 33e4 	strb.w	r3, [r5, #996]	; 0x3e4
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800b51e:	f505 747a 	add.w	r4, r5, #1000	; 0x3e8
 800b522:	f505 7c74 	add.w	ip, r5, #976	; 0x3d0
 800b526:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b52a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b52c:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800b530:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800b534:	f885 73fa 	strb.w	r7, [r5, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800b538:	2302      	movs	r3, #2
 800b53a:	f885 33fb 	strb.w	r3, [r5, #1019]	; 0x3fb
    classBCallbacks.GetTemperatureLevel = NULL;
 800b53e:	960e      	str	r6, [sp, #56]	; 0x38
    classBCallbacks.MacProcessNotify = NULL;
 800b540:	960f      	str	r6, [sp, #60]	; 0x3c
    if( MacCtx.MacCallbacks != NULL )
 800b542:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
 800b546:	b11b      	cbz	r3, 800b550 <ResetMacParameters+0x108>
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800b548:	685a      	ldr	r2, [r3, #4]
 800b54a:	920e      	str	r2, [sp, #56]	; 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800b54c:	691b      	ldr	r3, [r3, #16]
 800b54e:	930f      	str	r3, [sp, #60]	; 0x3c
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800b550:	4b13      	ldr	r3, [pc, #76]	; (800b5a0 <ResetMacParameters+0x158>)
 800b552:	f203 426c 	addw	r2, r3, #1132	; 0x46c
 800b556:	9205      	str	r2, [sp, #20]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800b558:	f203 4224 	addw	r2, r3, #1060	; 0x424
 800b55c:	9206      	str	r2, [sp, #24]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800b55e:	f503 628b 	add.w	r2, r3, #1112	; 0x458
 800b562:	9207      	str	r2, [sp, #28]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800b564:	f203 4395 	addw	r3, r3, #1173	; 0x495
 800b568:	9308      	str	r3, [sp, #32]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800b56a:	4a0c      	ldr	r2, [pc, #48]	; (800b59c <ResetMacParameters+0x154>)
 800b56c:	f102 03d4 	add.w	r3, r2, #212	; 0xd4
 800b570:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800b572:	f102 0340 	add.w	r3, r2, #64	; 0x40
 800b576:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800b578:	f102 0344 	add.w	r3, r2, #68	; 0x44
 800b57c:	930b      	str	r3, [sp, #44]	; 0x2c
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800b57e:	f102 03d8 	add.w	r3, r2, #216	; 0xd8
 800b582:	930c      	str	r3, [sp, #48]	; 0x30
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 800b584:	f502 738e 	add.w	r3, r2, #284	; 0x11c
 800b588:	930d      	str	r3, [sp, #52]	; 0x34
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800b58a:	f202 5274 	addw	r2, r2, #1396	; 0x574
 800b58e:	a90e      	add	r1, sp, #56	; 0x38
 800b590:	a805      	add	r0, sp, #20
 800b592:	f001 fb7d 	bl	800cc90 <LoRaMacClassBInit>
}
 800b596:	b011      	add	sp, #68	; 0x44
 800b598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b59a:	bf00      	nop
 800b59c:	20008000 	.word	0x20008000
 800b5a0:	20000820 	.word	0x20000820
 800b5a4:	20000d40 	.word	0x20000d40

0800b5a8 <SwitchClass>:
{
 800b5a8:	b570      	push	{r4, r5, r6, lr}
 800b5aa:	4604      	mov	r4, r0
    switch( Nvm.MacGroup2.DeviceClass )
 800b5ac:	4b3e      	ldr	r3, [pc, #248]	; (800b6a8 <SwitchClass+0x100>)
 800b5ae:	f893 5104 	ldrb.w	r5, [r3, #260]	; 0x104
 800b5b2:	2d01      	cmp	r5, #1
 800b5b4:	d065      	beq.n	800b682 <SwitchClass+0xda>
 800b5b6:	2d02      	cmp	r5, #2
 800b5b8:	d06b      	beq.n	800b692 <SwitchClass+0xea>
 800b5ba:	b10d      	cbz	r5, 800b5c0 <SwitchClass+0x18>
 800b5bc:	2003      	movs	r0, #3
}
 800b5be:	bd70      	pop	{r4, r5, r6, pc}
            if( deviceClass == CLASS_A )
 800b5c0:	b930      	cbnz	r0, 800b5d0 <SwitchClass+0x28>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800b5c2:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800b5c6:	3364      	adds	r3, #100	; 0x64
 800b5c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b5cc:	e882 0003 	stmia.w	r2, {r0, r1}
            if( deviceClass == CLASS_B )
 800b5d0:	2c01      	cmp	r4, #1
 800b5d2:	d022      	beq.n	800b61a <SwitchClass+0x72>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b5d4:	2003      	movs	r0, #3
            if( deviceClass == CLASS_C )
 800b5d6:	2c02      	cmp	r4, #2
 800b5d8:	d1f1      	bne.n	800b5be <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800b5da:	4b33      	ldr	r3, [pc, #204]	; (800b6a8 <SwitchClass+0x100>)
 800b5dc:	f883 4104 	strb.w	r4, [r3, #260]	; 0x104
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800b5e0:	4e32      	ldr	r6, [pc, #200]	; (800b6ac <SwitchClass+0x104>)
 800b5e2:	f506 747a 	add.w	r4, r6, #1000	; 0x3e8
 800b5e6:	f506 7c74 	add.w	ip, r6, #976	; 0x3d0
 800b5ea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b5ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b5f0:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800b5f4:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800b5f8:	2302      	movs	r3, #2
 800b5fa:	f886 33fb 	strb.w	r3, [r6, #1019]	; 0x3fb
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800b5fe:	2300      	movs	r3, #0
 800b600:	2b00      	cmp	r3, #0
 800b602:	dd13      	ble.n	800b62c <SwitchClass+0x84>
                MacCtx.NodeAckRequested = false;
 800b604:	4b29      	ldr	r3, [pc, #164]	; (800b6ac <SwitchClass+0x104>)
 800b606:	2200      	movs	r2, #0
 800b608:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
                Radio.Sleep( );
 800b60c:	4b28      	ldr	r3, [pc, #160]	; (800b6b0 <SwitchClass+0x108>)
 800b60e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b610:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 800b612:	f7ff fd05 	bl	800b020 <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 800b616:	4628      	mov	r0, r5
 800b618:	e7d1      	b.n	800b5be <SwitchClass+0x16>
                status = LoRaMacClassBSwitchClass( deviceClass );
 800b61a:	4620      	mov	r0, r4
 800b61c:	f001 fb4e 	bl	800ccbc <LoRaMacClassBSwitchClass>
                if( status == LORAMAC_STATUS_OK )
 800b620:	2800      	cmp	r0, #0
 800b622:	d1d8      	bne.n	800b5d6 <SwitchClass+0x2e>
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800b624:	4b20      	ldr	r3, [pc, #128]	; (800b6a8 <SwitchClass+0x100>)
 800b626:	f883 4104 	strb.w	r4, [r3, #260]	; 0x104
 800b62a:	e7d4      	b.n	800b5d6 <SwitchClass+0x2e>
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800b62c:	4618      	mov	r0, r3
 800b62e:	4a1e      	ldr	r2, [pc, #120]	; (800b6a8 <SwitchClass+0x100>)
 800b630:	212c      	movs	r1, #44	; 0x2c
 800b632:	fb01 2203 	mla	r2, r1, r3, r2
 800b636:	f892 20da 	ldrb.w	r2, [r2, #218]	; 0xda
 800b63a:	b912      	cbnz	r2, 800b642 <SwitchClass+0x9a>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800b63c:	3301      	adds	r3, #1
 800b63e:	b25b      	sxtb	r3, r3
 800b640:	e7de      	b.n	800b600 <SwitchClass+0x58>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800b642:	4a19      	ldr	r2, [pc, #100]	; (800b6a8 <SwitchClass+0x100>)
 800b644:	fb01 2000 	mla	r0, r1, r0, r2
 800b648:	f8d0 10f0 	ldr.w	r1, [r0, #240]	; 0xf0
 800b64c:	66d1      	str	r1, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800b64e:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
 800b652:	f882 3070 	strb.w	r3, [r2, #112]	; 0x70
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800b656:	4b15      	ldr	r3, [pc, #84]	; (800b6ac <SwitchClass+0x104>)
 800b658:	f893 041f 	ldrb.w	r0, [r3, #1055]	; 0x41f
 800b65c:	f883 03e8 	strb.w	r0, [r3, #1000]	; 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800b660:	f8c3 13ec 	str.w	r1, [r3, #1004]	; 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b664:	f892 1075 	ldrb.w	r1, [r2, #117]	; 0x75
 800b668:	f883 13f8 	strb.w	r1, [r3, #1016]	; 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800b66c:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 800b670:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800b674:	2203      	movs	r2, #3
 800b676:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800b67a:	2201      	movs	r2, #1
 800b67c:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
                        break;
 800b680:	e7c0      	b.n	800b604 <SwitchClass+0x5c>
            status = LoRaMacClassBSwitchClass( deviceClass );
 800b682:	f001 fb1b 	bl	800ccbc <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 800b686:	2800      	cmp	r0, #0
 800b688:	d199      	bne.n	800b5be <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800b68a:	4b07      	ldr	r3, [pc, #28]	; (800b6a8 <SwitchClass+0x100>)
 800b68c:	f883 4104 	strb.w	r4, [r3, #260]	; 0x104
 800b690:	e795      	b.n	800b5be <SwitchClass+0x16>
            if( deviceClass == CLASS_A )
 800b692:	b938      	cbnz	r0, 800b6a4 <SwitchClass+0xfc>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800b694:	4b04      	ldr	r3, [pc, #16]	; (800b6a8 <SwitchClass+0x100>)
 800b696:	f883 0104 	strb.w	r0, [r3, #260]	; 0x104
                Radio.Sleep( );
 800b69a:	4b05      	ldr	r3, [pc, #20]	; (800b6b0 <SwitchClass+0x108>)
 800b69c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b69e:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 800b6a0:	4620      	mov	r0, r4
 800b6a2:	e78c      	b.n	800b5be <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b6a4:	2003      	movs	r0, #3
 800b6a6:	e78a      	b.n	800b5be <SwitchClass+0x16>
 800b6a8:	20008000 	.word	0x20008000
 800b6ac:	20000820 	.word	0x20000820
 800b6b0:	08014f0c 	.word	0x08014f0c

0800b6b4 <SendReJoinReq>:
{
 800b6b4:	b538      	push	{r3, r4, r5, lr}
    switch( joinReqType )
 800b6b6:	28ff      	cmp	r0, #255	; 0xff
 800b6b8:	d003      	beq.n	800b6c2 <SendReJoinReq+0xe>
    bool allowDelayedTx = true;
 800b6ba:	2001      	movs	r0, #1
    status = ScheduleTx( allowDelayedTx );
 800b6bc:	f7ff fb62 	bl	800ad84 <ScheduleTx>
}
 800b6c0:	bd38      	pop	{r3, r4, r5, pc}
            SwitchClass( CLASS_A );
 800b6c2:	2000      	movs	r0, #0
 800b6c4:	f7ff ff70 	bl	800b5a8 <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800b6c8:	4d0e      	ldr	r5, [pc, #56]	; (800b704 <SendReJoinReq+0x50>)
 800b6ca:	2400      	movs	r4, #0
 800b6cc:	f885 4104 	strb.w	r4, [r5, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800b6d0:	1cab      	adds	r3, r5, #2
 800b6d2:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800b6d6:	23ff      	movs	r3, #255	; 0xff
 800b6d8:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800b6dc:	f885 410d 	strb.w	r4, [r5, #269]	; 0x10d
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 800b6e0:	f005 fb24 	bl	8010d2c <SecureElementGetJoinEui>
 800b6e4:	4601      	mov	r1, r0
 800b6e6:	2208      	movs	r2, #8
 800b6e8:	f505 7087 	add.w	r0, r5, #270	; 0x10e
 800b6ec:	f005 fb4f 	bl	8010d8e <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 800b6f0:	f005 fb06 	bl	8010d00 <SecureElementGetDevEui>
 800b6f4:	4601      	mov	r1, r0
 800b6f6:	2208      	movs	r2, #8
 800b6f8:	f505 708b 	add.w	r0, r5, #278	; 0x116
 800b6fc:	f005 fb47 	bl	8010d8e <memcpy1>
            allowDelayedTx = false;
 800b700:	4620      	mov	r0, r4
            break;
 800b702:	e7db      	b.n	800b6bc <SendReJoinReq+0x8>
 800b704:	20000820 	.word	0x20000820

0800b708 <PrepareFrame>:
{
 800b708:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b70c:	b083      	sub	sp, #12
 800b70e:	4605      	mov	r5, r0
 800b710:	460e      	mov	r6, r1
 800b712:	4617      	mov	r7, r2
 800b714:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    MacCtx.PktBufferLen = 0;
 800b718:	4959      	ldr	r1, [pc, #356]	; (800b880 <PrepareFrame+0x178>)
 800b71a:	2200      	movs	r2, #0
 800b71c:	800a      	strh	r2, [r1, #0]
    MacCtx.NodeAckRequested = false;
 800b71e:	f881 241e 	strb.w	r2, [r1, #1054]	; 0x41e
    uint32_t fCntUp = 0;
 800b722:	9201      	str	r2, [sp, #4]
    size_t macCmdsSize = 0;
 800b724:	9200      	str	r2, [sp, #0]
    if( fBuffer == NULL )
 800b726:	4698      	mov	r8, r3
 800b728:	b1cb      	cbz	r3, 800b75e <PrepareFrame+0x56>
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800b72a:	f8df 9154 	ldr.w	r9, [pc, #340]	; 800b880 <PrepareFrame+0x178>
 800b72e:	4622      	mov	r2, r4
 800b730:	4641      	mov	r1, r8
 800b732:	f509 709c 	add.w	r0, r9, #312	; 0x138
 800b736:	f005 fb2a 	bl	8010d8e <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800b73a:	b2e0      	uxtb	r0, r4
 800b73c:	f889 0237 	strb.w	r0, [r9, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 800b740:	782b      	ldrb	r3, [r5, #0]
 800b742:	f889 3002 	strb.w	r3, [r9, #2]
    switch( macHdr->Bits.MType )
 800b746:	782b      	ldrb	r3, [r5, #0]
 800b748:	095b      	lsrs	r3, r3, #5
 800b74a:	2b04      	cmp	r3, #4
 800b74c:	d009      	beq.n	800b762 <PrepareFrame+0x5a>
 800b74e:	2b07      	cmp	r3, #7
 800b750:	d079      	beq.n	800b846 <PrepareFrame+0x13e>
 800b752:	2b02      	cmp	r3, #2
 800b754:	d009      	beq.n	800b76a <PrepareFrame+0x62>
 800b756:	2002      	movs	r0, #2
}
 800b758:	b003      	add	sp, #12
 800b75a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        fBufferSize = 0;
 800b75e:	4614      	mov	r4, r2
 800b760:	e7e3      	b.n	800b72a <PrepareFrame+0x22>
            MacCtx.NodeAckRequested = true;
 800b762:	4b47      	ldr	r3, [pc, #284]	; (800b880 <PrepareFrame+0x178>)
 800b764:	2201      	movs	r2, #1
 800b766:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800b76a:	4b45      	ldr	r3, [pc, #276]	; (800b880 <PrepareFrame+0x178>)
 800b76c:	2204      	movs	r2, #4
 800b76e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800b772:	1c9a      	adds	r2, r3, #2
 800b774:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800b778:	22ff      	movs	r2, #255	; 0xff
 800b77a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800b77e:	782a      	ldrb	r2, [r5, #0]
 800b780:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800b784:	f883 7128 	strb.w	r7, [r3, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800b788:	4a3e      	ldr	r2, [pc, #248]	; (800b884 <PrepareFrame+0x17c>)
 800b78a:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
 800b78e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800b792:	7832      	ldrb	r2, [r6, #0]
 800b794:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800b798:	f883 0130 	strb.w	r0, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800b79c:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800b7a0:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800b7a4:	a801      	add	r0, sp, #4
 800b7a6:	f001 ff09 	bl	800d5bc <LoRaMacCryptoGetFCntUp>
 800b7aa:	2800      	cmp	r0, #0
 800b7ac:	d15c      	bne.n	800b868 <PrepareFrame+0x160>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800b7ae:	9a01      	ldr	r2, [sp, #4]
 800b7b0:	4b33      	ldr	r3, [pc, #204]	; (800b880 <PrepareFrame+0x178>)
 800b7b2:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
            MacCtx.McpsConfirm.NbTrans = 0;
 800b7b6:	2100      	movs	r1, #0
 800b7b8:	f883 1449 	strb.w	r1, [r3, #1097]	; 0x449
            MacCtx.McpsConfirm.AckReceived = false;
 800b7bc:	f883 1448 	strb.w	r1, [r3, #1096]	; 0x448
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800b7c0:	f8c3 2450 	str.w	r2, [r3, #1104]	; 0x450
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800b7c4:	4668      	mov	r0, sp
 800b7c6:	f001 fb93 	bl	800cef0 <LoRaMacCommandsGetSizeSerializedCmds>
 800b7ca:	2800      	cmp	r0, #0
 800b7cc:	d14e      	bne.n	800b86c <PrepareFrame+0x164>
            if( macCmdsSize > 0 )
 800b7ce:	9b00      	ldr	r3, [sp, #0]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d0c1      	beq.n	800b758 <PrepareFrame+0x50>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 800b7d4:	4b2b      	ldr	r3, [pc, #172]	; (800b884 <PrepareFrame+0x17c>)
 800b7d6:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 800b7da:	f7fe f905 	bl	80099e8 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800b7de:	4b28      	ldr	r3, [pc, #160]	; (800b880 <PrepareFrame+0x178>)
 800b7e0:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800b7e4:	b113      	cbz	r3, 800b7ec <PrepareFrame+0xe4>
 800b7e6:	9a00      	ldr	r2, [sp, #0]
 800b7e8:	2a0f      	cmp	r2, #15
 800b7ea:	d915      	bls.n	800b818 <PrepareFrame+0x110>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800b7ec:	b113      	cbz	r3, 800b7f4 <PrepareFrame+0xec>
 800b7ee:	9b00      	ldr	r3, [sp, #0]
 800b7f0:	2b0f      	cmp	r3, #15
 800b7f2:	d821      	bhi.n	800b838 <PrepareFrame+0x130>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800b7f4:	4a24      	ldr	r2, [pc, #144]	; (800b888 <PrepareFrame+0x180>)
 800b7f6:	4669      	mov	r1, sp
 800b7f8:	f001 fb86 	bl	800cf08 <LoRaMacCommandsSerializeCmds>
 800b7fc:	2800      	cmp	r0, #0
 800b7fe:	d13b      	bne.n	800b878 <PrepareFrame+0x170>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800b800:	4b1f      	ldr	r3, [pc, #124]	; (800b880 <PrepareFrame+0x178>)
 800b802:	2200      	movs	r2, #0
 800b804:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 800b808:	f503 6294 	add.w	r2, r3, #1184	; 0x4a0
 800b80c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800b810:	9a00      	ldr	r2, [sp, #0]
 800b812:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 800b816:	e79f      	b.n	800b758 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800b818:	4a1c      	ldr	r2, [pc, #112]	; (800b88c <PrepareFrame+0x184>)
 800b81a:	4669      	mov	r1, sp
 800b81c:	200f      	movs	r0, #15
 800b81e:	f001 fb73 	bl	800cf08 <LoRaMacCommandsSerializeCmds>
 800b822:	bb28      	cbnz	r0, 800b870 <PrepareFrame+0x168>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800b824:	7833      	ldrb	r3, [r6, #0]
 800b826:	9a00      	ldr	r2, [sp, #0]
 800b828:	f362 0303 	bfi	r3, r2, #0, #4
 800b82c:	7033      	strb	r3, [r6, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800b82e:	b2da      	uxtb	r2, r3
 800b830:	4b13      	ldr	r3, [pc, #76]	; (800b880 <PrepareFrame+0x178>)
 800b832:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 800b836:	e78f      	b.n	800b758 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800b838:	4a13      	ldr	r2, [pc, #76]	; (800b888 <PrepareFrame+0x180>)
 800b83a:	4669      	mov	r1, sp
 800b83c:	f001 fb64 	bl	800cf08 <LoRaMacCommandsSerializeCmds>
 800b840:	b1c0      	cbz	r0, 800b874 <PrepareFrame+0x16c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b842:	2013      	movs	r0, #19
 800b844:	e788      	b.n	800b758 <PrepareFrame+0x50>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800b846:	f1b8 0f00 	cmp.w	r8, #0
 800b84a:	d017      	beq.n	800b87c <PrepareFrame+0x174>
 800b84c:	2800      	cmp	r0, #0
 800b84e:	d083      	beq.n	800b758 <PrepareFrame+0x50>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800b850:	4c0b      	ldr	r4, [pc, #44]	; (800b880 <PrepareFrame+0x178>)
 800b852:	b282      	uxth	r2, r0
 800b854:	4641      	mov	r1, r8
 800b856:	1ce0      	adds	r0, r4, #3
 800b858:	f005 fa99 	bl	8010d8e <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800b85c:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
 800b860:	3301      	adds	r3, #1
 800b862:	8023      	strh	r3, [r4, #0]
    return LORAMAC_STATUS_OK;
 800b864:	2000      	movs	r0, #0
 800b866:	e777      	b.n	800b758 <PrepareFrame+0x50>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800b868:	2012      	movs	r0, #18
 800b86a:	e775      	b.n	800b758 <PrepareFrame+0x50>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b86c:	2013      	movs	r0, #19
 800b86e:	e773      	b.n	800b758 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b870:	2013      	movs	r0, #19
 800b872:	e771      	b.n	800b758 <PrepareFrame+0x50>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800b874:	200a      	movs	r0, #10
 800b876:	e76f      	b.n	800b758 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b878:	2013      	movs	r0, #19
 800b87a:	e76d      	b.n	800b758 <PrepareFrame+0x50>
    return LORAMAC_STATUS_OK;
 800b87c:	2000      	movs	r0, #0
 800b87e:	e76b      	b.n	800b758 <PrepareFrame+0x50>
 800b880:	20000820 	.word	0x20000820
 800b884:	20008000 	.word	0x20008000
 800b888:	20000cc0 	.word	0x20000cc0
 800b88c:	20000938 	.word	0x20000938

0800b890 <Send>:
{
 800b890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b894:	b08a      	sub	sp, #40	; 0x28
 800b896:	4617      	mov	r7, r2
 800b898:	4698      	mov	r8, r3
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800b89a:	4c45      	ldr	r4, [pc, #276]	; (800b9b0 <Send+0x120>)
 800b89c:	f994 a039 	ldrsb.w	sl, [r4, #57]	; 0x39
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800b8a0:	f994 9038 	ldrsb.w	r9, [r4, #56]	; 0x38
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800b8a4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b8a6:	9208      	str	r2, [sp, #32]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800b8a8:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d07c      	beq.n	800b9aa <Send+0x11a>
 800b8b0:	4605      	mov	r5, r0
 800b8b2:	460e      	mov	r6, r1
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800b8b4:	f894 3107 	ldrb.w	r3, [r4, #263]	; 0x107
 800b8b8:	b90b      	cbnz	r3, 800b8be <Send+0x2e>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800b8ba:	2100      	movs	r1, #0
 800b8bc:	6321      	str	r1, [r4, #48]	; 0x30
    fCtrl.Value = 0;
 800b8be:	2300      	movs	r3, #0
 800b8c0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800b8c4:	483a      	ldr	r0, [pc, #232]	; (800b9b0 <Send+0x120>)
 800b8c6:	f890 1106 	ldrb.w	r1, [r0, #262]	; 0x106
 800b8ca:	f361 13c7 	bfi	r3, r1, #7, #1
 800b8ce:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800b8d2:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
 800b8d6:	2b01      	cmp	r3, #1
 800b8d8:	d054      	beq.n	800b984 <Send+0xf4>
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800b8da:	4b35      	ldr	r3, [pc, #212]	; (800b9b0 <Send+0x120>)
 800b8dc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b8e0:	b12b      	cbz	r3, 800b8ee <Send+0x5e>
        fCtrl.Bits.Ack = 1;
 800b8e2:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800b8e6:	f043 0320 	orr.w	r3, r3, #32
 800b8ea:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    adrNext.UpdateChanMask = true;
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	f88d 300c 	strb.w	r3, [sp, #12]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800b8f4:	f88d 100d 	strb.w	r1, [sp, #13]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800b8f8:	9204      	str	r2, [sp, #16]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800b8fa:	4b2e      	ldr	r3, [pc, #184]	; (800b9b4 <Send+0x124>)
 800b8fc:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
 800b900:	f8ad 2014 	strh.w	r2, [sp, #20]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800b904:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 800b908:	f8ad 3016 	strh.w	r3, [sp, #22]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800b90c:	f88d a018 	strb.w	sl, [sp, #24]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800b910:	f88d 9019 	strb.w	r9, [sp, #25]
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800b914:	4926      	ldr	r1, [pc, #152]	; (800b9b0 <Send+0x120>)
 800b916:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
 800b91a:	f88d 301a 	strb.w	r3, [sp, #26]
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b91e:	f891 3074 	ldrb.w	r3, [r1, #116]	; 0x74
 800b922:	f88d 301b 	strb.w	r3, [sp, #27]
    adrNext.Region = Nvm.MacGroup2.Region;
 800b926:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
 800b92a:	f88d 301c 	strb.w	r3, [sp, #28]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800b92e:	ab08      	add	r3, sp, #32
 800b930:	9300      	str	r3, [sp, #0]
 800b932:	f101 0360 	add.w	r3, r1, #96	; 0x60
 800b936:	f101 0238 	add.w	r2, r1, #56	; 0x38
 800b93a:	3139      	adds	r1, #57	; 0x39
 800b93c:	a803      	add	r0, sp, #12
 800b93e:	f001 f92d 	bl	800cb9c <LoRaMacAdrCalcNext>
 800b942:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800b946:	f360 1386 	bfi	r3, r0, #6, #1
 800b94a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800b94e:	f8cd 8000 	str.w	r8, [sp]
 800b952:	463b      	mov	r3, r7
 800b954:	4632      	mov	r2, r6
 800b956:	a909      	add	r1, sp, #36	; 0x24
 800b958:	4628      	mov	r0, r5
 800b95a:	f7ff fed5 	bl	800b708 <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800b95e:	4604      	mov	r4, r0
 800b960:	b108      	cbz	r0, 800b966 <Send+0xd6>
 800b962:	280a      	cmp	r0, #10
 800b964:	d104      	bne.n	800b970 <Send+0xe0>
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800b966:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 800b96a:	f7ff fa0b 	bl	800ad84 <ScheduleTx>
 800b96e:	4604      	mov	r4, r0
    if( status != LORAMAC_STATUS_OK )
 800b970:	b17c      	cbz	r4, 800b992 <Send+0x102>
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800b972:	4b0f      	ldr	r3, [pc, #60]	; (800b9b0 <Send+0x120>)
 800b974:	f883 a039 	strb.w	sl, [r3, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800b978:	f883 9038 	strb.w	r9, [r3, #56]	; 0x38
}
 800b97c:	4620      	mov	r0, r4
 800b97e:	b00a      	add	sp, #40	; 0x28
 800b980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        fCtrl.Bits.FPending      = 1;
 800b984:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800b988:	f043 0310 	orr.w	r3, r3, #16
 800b98c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800b990:	e7a3      	b.n	800b8da <Send+0x4a>
        Nvm.MacGroup1.SrvAckRequested = false;
 800b992:	4b07      	ldr	r3, [pc, #28]	; (800b9b0 <Send+0x120>)
 800b994:	2200      	movs	r2, #0
 800b996:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800b99a:	9a08      	ldr	r2, [sp, #32]
 800b99c:	629a      	str	r2, [r3, #40]	; 0x28
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800b99e:	f001 fa7b 	bl	800ce98 <LoRaMacCommandsRemoveNoneStickyCmds>
 800b9a2:	2800      	cmp	r0, #0
 800b9a4:	d0ea      	beq.n	800b97c <Send+0xec>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b9a6:	2413      	movs	r4, #19
 800b9a8:	e7e8      	b.n	800b97c <Send+0xec>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800b9aa:	2407      	movs	r4, #7
 800b9ac:	e7e6      	b.n	800b97c <Send+0xec>
 800b9ae:	bf00      	nop
 800b9b0:	20008000 	.word	0x20008000
 800b9b4:	20000820 	.word	0x20000820

0800b9b8 <LoRaMacIsBusy>:
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800b9b8:	4b0a      	ldr	r3, [pc, #40]	; (800b9e4 <LoRaMacIsBusy+0x2c>)
 800b9ba:	781b      	ldrb	r3, [r3, #0]
 800b9bc:	f013 0f01 	tst.w	r3, #1
 800b9c0:	d10a      	bne.n	800b9d8 <LoRaMacIsBusy+0x20>
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800b9c2:	4b09      	ldr	r3, [pc, #36]	; (800b9e8 <LoRaMacIsBusy+0x30>)
 800b9c4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800b9c8:	b943      	cbnz	r3, 800b9dc <LoRaMacIsBusy+0x24>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800b9ca:	4b07      	ldr	r3, [pc, #28]	; (800b9e8 <LoRaMacIsBusy+0x30>)
 800b9cc:	f893 3496 	ldrb.w	r3, [r3, #1174]	; 0x496
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800b9d0:	2b01      	cmp	r3, #1
 800b9d2:	d005      	beq.n	800b9e0 <LoRaMacIsBusy+0x28>
    return true;
 800b9d4:	2001      	movs	r0, #1
 800b9d6:	4770      	bx	lr
        return true;
 800b9d8:	2001      	movs	r0, #1
 800b9da:	4770      	bx	lr
    return true;
 800b9dc:	2001      	movs	r0, #1
 800b9de:	4770      	bx	lr
        return false;
 800b9e0:	2000      	movs	r0, #0
}
 800b9e2:	4770      	bx	lr
 800b9e4:	2000081c 	.word	0x2000081c
 800b9e8:	20000820 	.word	0x20000820

0800b9ec <LoRaMacProcess>:
{
 800b9ec:	b508      	push	{r3, lr}
    LoRaMacHandleIrqEvents( );
 800b9ee:	f7ff f81d 	bl	800aa2c <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800b9f2:	f001 f974 	bl	800ccde <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800b9f6:	4b20      	ldr	r3, [pc, #128]	; (800ba78 <LoRaMacProcess+0x8c>)
 800b9f8:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800b9fc:	f013 0f20 	tst.w	r3, #32
 800ba00:	d10d      	bne.n	800ba1e <LoRaMacProcess+0x32>
    LoRaMacHandleIndicationEvents( );
 800ba02:	f7fd fed3 	bl	80097ac <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800ba06:	4b1c      	ldr	r3, [pc, #112]	; (800ba78 <LoRaMacProcess+0x8c>)
 800ba08:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800ba0c:	2b02      	cmp	r3, #2
 800ba0e:	d024      	beq.n	800ba5a <LoRaMacProcess+0x6e>
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800ba10:	4b19      	ldr	r3, [pc, #100]	; (800ba78 <LoRaMacProcess+0x8c>)
 800ba12:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800ba16:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ba1a:	d121      	bne.n	800ba60 <LoRaMacProcess+0x74>
}
 800ba1c:	bd08      	pop	{r3, pc}
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800ba1e:	2000      	movs	r0, #0
 800ba20:	f7fd febe 	bl	80097a0 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800ba24:	f7fd fefa 	bl	800981c <LoRaMacCheckForRxAbort>
        if( IsRequestPending( ) > 0 )
 800ba28:	f7fd ffd2 	bl	80099d0 <IsRequestPending>
 800ba2c:	b110      	cbz	r0, 800ba34 <LoRaMacProcess+0x48>
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800ba2e:	f7fe f8b9 	bl	8009ba4 <LoRaMacCheckForBeaconAcquisition>
        if( noTx == 0x00 )
 800ba32:	b918      	cbnz	r0, 800ba3c <LoRaMacProcess+0x50>
            LoRaMacHandleMlmeRequest( );
 800ba34:	f7ff f83c 	bl	800aab0 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800ba38:	f7ff fa5a 	bl	800aef0 <LoRaMacHandleMcpsRequest>
        LoRaMacHandleRequestEvents( );
 800ba3c:	f7ff fa94 	bl	800af68 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800ba40:	f7ff fadc 	bl	800affc <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800ba44:	2001      	movs	r0, #1
 800ba46:	f7fd feab 	bl	80097a0 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800ba4a:	4a0b      	ldr	r2, [pc, #44]	; (800ba78 <LoRaMacProcess+0x8c>)
 800ba4c:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800ba50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba54:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
 800ba58:	e7d3      	b.n	800ba02 <LoRaMacProcess+0x16>
        OpenContinuousRxCWindow( );
 800ba5a:	f7ff fae1 	bl	800b020 <OpenContinuousRxCWindow>
 800ba5e:	e7d7      	b.n	800ba10 <LoRaMacProcess+0x24>
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800ba60:	4b05      	ldr	r3, [pc, #20]	; (800ba78 <LoRaMacProcess+0x8c>)
 800ba62:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800ba66:	f36f 1286 	bfc	r2, #6, #1
 800ba6a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
        LoRaMacHandleNvm( &Nvm );
 800ba6e:	4803      	ldr	r0, [pc, #12]	; (800ba7c <LoRaMacProcess+0x90>)
 800ba70:	f7ff fb86 	bl	800b180 <LoRaMacHandleNvm>
}
 800ba74:	e7d2      	b.n	800ba1c <LoRaMacProcess+0x30>
 800ba76:	bf00      	nop
 800ba78:	20000820 	.word	0x20000820
 800ba7c:	20008000 	.word	0x20008000

0800ba80 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800ba80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba84:	b08d      	sub	sp, #52	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 800ba86:	2800      	cmp	r0, #0
 800ba88:	f000 81a4 	beq.w	800bdd4 <LoRaMacInitialization+0x354>
 800ba8c:	460f      	mov	r7, r1
 800ba8e:	4691      	mov	r9, r2
 800ba90:	4680      	mov	r8, r0
 800ba92:	2900      	cmp	r1, #0
 800ba94:	f000 81a0 	beq.w	800bdd8 <LoRaMacInitialization+0x358>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800ba98:	6803      	ldr	r3, [r0, #0]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	f000 819e 	beq.w	800bddc <LoRaMacInitialization+0x35c>
        ( primitives->MacMcpsIndication == NULL ) ||
 800baa0:	6843      	ldr	r3, [r0, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	f000 819c 	beq.w	800bde0 <LoRaMacInitialization+0x360>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800baa8:	6883      	ldr	r3, [r0, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 800baaa:	2b00      	cmp	r3, #0
 800baac:	f000 819a 	beq.w	800bde4 <LoRaMacInitialization+0x364>
        ( primitives->MacMlmeIndication == NULL ) )
 800bab0:	68c3      	ldr	r3, [r0, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	f000 8198 	beq.w	800bde8 <LoRaMacInitialization+0x368>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800bab8:	4610      	mov	r0, r2
 800baba:	f002 f8cb 	bl	800dc54 <RegionIsActive>
 800babe:	2800      	cmp	r0, #0
 800bac0:	f000 8194 	beq.w	800bdec <LoRaMacInitialization+0x36c>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 800bac4:	4640      	mov	r0, r8
 800bac6:	f001 fac9 	bl	800d05c <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 800baca:	4ccc      	ldr	r4, [pc, #816]	; (800bdfc <LoRaMacInitialization+0x37c>)
 800bacc:	f240 528c 	movw	r2, #1420	; 0x58c
 800bad0:	2100      	movs	r1, #0
 800bad2:	4620      	mov	r0, r4
 800bad4:	f005 f973 	bl	8010dbe <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800bad8:	4dc9      	ldr	r5, [pc, #804]	; (800be00 <LoRaMacInitialization+0x380>)
 800bada:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 800bade:	2100      	movs	r1, #0
 800bae0:	4628      	mov	r0, r5
 800bae2:	f005 f96c 	bl	8010dbe <memset1>
    // Set non zero variables to its default value
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 800bae6:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800baea:	2600      	movs	r6, #0
 800baec:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 800baf0:	f884 6080 	strb.w	r6, [r4, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 800baf4:	4bc3      	ldr	r3, [pc, #780]	; (800be04 <LoRaMacInitialization+0x384>)
 800baf6:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 800bafa:	f88d 6020 	strb.w	r6, [sp, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800bafe:	f504 73f2 	add.w	r3, r4, #484	; 0x1e4
 800bb02:	9305      	str	r3, [sp, #20]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800bb04:	f504 73fc 	add.w	r3, r4, #504	; 0x1f8
 800bb08:	9306      	str	r3, [sp, #24]
    params.Bands = &RegionBands;
 800bb0a:	4bbf      	ldr	r3, [pc, #764]	; (800be08 <LoRaMacInitialization+0x388>)
 800bb0c:	9307      	str	r3, [sp, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800bb0e:	a905      	add	r1, sp, #20
 800bb10:	4648      	mov	r0, r9
 800bb12:	f002 f8cf 	bl	800dcb4 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800bb16:	230f      	movs	r3, #15
 800bb18:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bb1c:	a90a      	add	r1, sp, #40	; 0x28
 800bb1e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800bb22:	f002 f8a1 	bl	800dc68 <RegionGetPhyParam>
 800bb26:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800bb28:	1b80      	subs	r0, r0, r6
 800bb2a:	bf18      	it	ne
 800bb2c:	2001      	movne	r0, #1
 800bb2e:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800bb32:	f04f 0a0a 	mov.w	sl, #10
 800bb36:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bb3a:	a90a      	add	r1, sp, #40	; 0x28
 800bb3c:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800bb40:	f002 f892 	bl	800dc68 <RegionGetPhyParam>
 800bb44:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 800bb46:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_TX_DR;
 800bb4a:	f04f 0906 	mov.w	r9, #6
 800bb4e:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bb52:	a90a      	add	r1, sp, #40	; 0x28
 800bb54:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800bb58:	f002 f886 	bl	800dc68 <RegionGetPhyParam>
 800bb5c:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 800bb5e:	f884 00cd 	strb.w	r0, [r4, #205]	; 0xcd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800bb62:	2310      	movs	r3, #16
 800bb64:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bb68:	a90a      	add	r1, sp, #40	; 0x28
 800bb6a:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800bb6e:	f002 f87b 	bl	800dc68 <RegionGetPhyParam>
 800bb72:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800bb74:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800bb78:	2311      	movs	r3, #17
 800bb7a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bb7e:	a90a      	add	r1, sp, #40	; 0x28
 800bb80:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800bb84:	f002 f870 	bl	800dc68 <RegionGetPhyParam>
 800bb88:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800bb8a:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800bb8e:	2312      	movs	r3, #18
 800bb90:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bb94:	a90a      	add	r1, sp, #40	; 0x28
 800bb96:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800bb9a:	f002 f865 	bl	800dc68 <RegionGetPhyParam>
 800bb9e:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800bba0:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800bba4:	2313      	movs	r3, #19
 800bba6:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bbaa:	a90a      	add	r1, sp, #40	; 0x28
 800bbac:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800bbb0:	f002 f85a 	bl	800dc68 <RegionGetPhyParam>
 800bbb4:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800bbb6:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800bbba:	2314      	movs	r3, #20
 800bbbc:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bbc0:	a90a      	add	r1, sp, #40	; 0x28
 800bbc2:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800bbc6:	f002 f84f 	bl	800dc68 <RegionGetPhyParam>
 800bbca:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800bbcc:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800bbd0:	2316      	movs	r3, #22
 800bbd2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bbd6:	a90a      	add	r1, sp, #40	; 0x28
 800bbd8:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800bbdc:	f002 f844 	bl	800dc68 <RegionGetPhyParam>
 800bbe0:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800bbe2:	f884 00a5 	strb.w	r0, [r4, #165]	; 0xa5

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800bbe6:	2317      	movs	r3, #23
 800bbe8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bbec:	a90a      	add	r1, sp, #40	; 0x28
 800bbee:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800bbf2:	f002 f839 	bl	800dc68 <RegionGetPhyParam>
 800bbf6:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800bbf8:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800bbfc:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800bc00:	2318      	movs	r3, #24
 800bc02:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bc06:	a90a      	add	r1, sp, #40	; 0x28
 800bc08:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800bc0c:	f002 f82c 	bl	800dc68 <RegionGetPhyParam>
 800bc10:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800bc12:	b2c0      	uxtb	r0, r0
 800bc14:	f884 00ac 	strb.w	r0, [r4, #172]	; 0xac
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800bc18:	f884 00b4 	strb.w	r0, [r4, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800bc1c:	231d      	movs	r3, #29
 800bc1e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bc22:	a90a      	add	r1, sp, #40	; 0x28
 800bc24:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800bc28:	f002 f81e 	bl	800dc68 <RegionGetPhyParam>
 800bc2c:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800bc2e:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800bc32:	231e      	movs	r3, #30
 800bc34:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bc38:	a90a      	add	r1, sp, #40	; 0x28
 800bc3a:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800bc3e:	f002 f813 	bl	800dc68 <RegionGetPhyParam>
 800bc42:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800bc44:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800bc48:	231f      	movs	r3, #31
 800bc4a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bc4e:	a90a      	add	r1, sp, #40	; 0x28
 800bc50:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800bc54:	f002 f808 	bl	800dc68 <RegionGetPhyParam>
 800bc58:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 800bc5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc5c:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800bc60:	2320      	movs	r3, #32
 800bc62:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bc66:	a90a      	add	r1, sp, #40	; 0x28
 800bc68:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800bc6c:	f001 fffc 	bl	800dc68 <RegionGetPhyParam>
 800bc70:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 800bc72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc74:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800bc78:	230b      	movs	r3, #11
 800bc7a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bc7e:	a90a      	add	r1, sp, #40	; 0x28
 800bc80:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800bc84:	f001 fff0 	bl	800dc68 <RegionGetPhyParam>
 800bc88:	9009      	str	r0, [sp, #36]	; 0x24
    MacCtx.AdrAckLimit = phyParam.Value;
 800bc8a:	f8a5 0400 	strh.w	r0, [r5, #1024]	; 0x400

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800bc8e:	230c      	movs	r3, #12
 800bc90:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bc94:	a90a      	add	r1, sp, #40	; 0x28
 800bc96:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800bc9a:	f001 ffe5 	bl	800dc68 <RegionGetPhyParam>
 800bc9e:	9009      	str	r0, [sp, #36]	; 0x24
    MacCtx.AdrAckDelay = phyParam.Value;
 800bca0:	f8a5 0402 	strh.w	r0, [r5, #1026]	; 0x402

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800bca4:	f04f 0b01 	mov.w	fp, #1
 800bca8:	f884 b0a4 	strb.w	fp, [r4, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800bcac:	f8c4 a088 	str.w	sl, [r4, #136]	; 0x88
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 800bcb0:	f884 908c 	strb.w	r9, [r4, #140]	; 0x8c

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 800bcb4:	f8c4 a044 	str.w	sl, [r4, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 800bcb8:	f884 9048 	strb.w	r9, [r4, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800bcbc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800bcc0:	64e3      	str	r3, [r4, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 800bcc2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800bcc6:	6523      	str	r3, [r4, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 800bcc8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800bccc:	6563      	str	r3, [r4, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 800bcce:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800bcd2:	65a3      	str	r3, [r4, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 800bcd4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800bcd8:	65e3      	str	r3, [r4, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 800bcda:	f884 b060 	strb.w	fp, [r4, #96]	; 0x60
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 800bcde:	f884 b10b 	strb.w	fp, [r4, #267]	; 0x10b
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 800bce2:	f8c5 7348 	str.w	r7, [r5, #840]	; 0x348
    ResetMacParameters( );
 800bce6:	f7ff fbaf 	bl	800b448 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 800bcea:	f884 b105 	strb.w	fp, [r4, #261]	; 0x105

    MacCtx.MacPrimitives = primitives;
 800bcee:	f8c5 8344 	str.w	r8, [r5, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 800bcf2:	f885 6495 	strb.w	r6, [r5, #1173]	; 0x495
    MacCtx.MacState = LORAMAC_STOPPED;
 800bcf6:	f8c5 b340 	str.w	fp, [r5, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 800bcfa:	62e6      	str	r6, [r4, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 800bcfc:	6326      	str	r6, [r4, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800bcfe:	9600      	str	r6, [sp, #0]
 800bd00:	4b42      	ldr	r3, [pc, #264]	; (800be0c <LoRaMacInitialization+0x38c>)
 800bd02:	4632      	mov	r2, r6
 800bd04:	f04f 31ff 	mov.w	r1, #4294967295
 800bd08:	f505 705a 	add.w	r0, r5, #872	; 0x368
 800bd0c:	f007 f9de 	bl	80130cc <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800bd10:	9600      	str	r6, [sp, #0]
 800bd12:	4b3f      	ldr	r3, [pc, #252]	; (800be10 <LoRaMacInitialization+0x390>)
 800bd14:	4632      	mov	r2, r6
 800bd16:	f04f 31ff 	mov.w	r1, #4294967295
 800bd1a:	f505 7060 	add.w	r0, r5, #896	; 0x380
 800bd1e:	f007 f9d5 	bl	80130cc <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800bd22:	9600      	str	r6, [sp, #0]
 800bd24:	4b3b      	ldr	r3, [pc, #236]	; (800be14 <LoRaMacInitialization+0x394>)
 800bd26:	4632      	mov	r2, r6
 800bd28:	f04f 31ff 	mov.w	r1, #4294967295
 800bd2c:	f505 7066 	add.w	r0, r5, #920	; 0x398
 800bd30:	f007 f9cc 	bl	80130cc <UTIL_TIMER_Create>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 800bd34:	9600      	str	r6, [sp, #0]
 800bd36:	4b38      	ldr	r3, [pc, #224]	; (800be18 <LoRaMacInitialization+0x398>)
 800bd38:	4632      	mov	r2, r6
 800bd3a:	f04f 31ff 	mov.w	r1, #4294967295
 800bd3e:	f205 4004 	addw	r0, r5, #1028	; 0x404
 800bd42:	f007 f9c3 	bl	80130cc <UTIL_TIMER_Create>
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800bd46:	f10d 0808 	add.w	r8, sp, #8
 800bd4a:	4640      	mov	r0, r8
 800bd4c:	f007 f950 	bl	8012ff0 <SysTimeGetMcuTime>
 800bd50:	f504 7388 	add.w	r3, r4, #272	; 0x110
 800bd54:	e898 0003 	ldmia.w	r8, {r0, r1}
 800bd58:	e883 0003 	stmia.w	r3, {r0, r1}

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 800bd5c:	4b2f      	ldr	r3, [pc, #188]	; (800be1c <LoRaMacInitialization+0x39c>)
 800bd5e:	601e      	str	r6, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800bd60:	4b2f      	ldr	r3, [pc, #188]	; (800be20 <LoRaMacInitialization+0x3a0>)
 800bd62:	f8c5 334c 	str.w	r3, [r5, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800bd66:	4b2f      	ldr	r3, [pc, #188]	; (800be24 <LoRaMacInitialization+0x3a4>)
 800bd68:	f8c5 3354 	str.w	r3, [r5, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800bd6c:	4b2e      	ldr	r3, [pc, #184]	; (800be28 <LoRaMacInitialization+0x3a8>)
 800bd6e:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800bd72:	4b2e      	ldr	r3, [pc, #184]	; (800be2c <LoRaMacInitialization+0x3ac>)
 800bd74:	f8c5 3350 	str.w	r3, [r5, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800bd78:	4b2d      	ldr	r3, [pc, #180]	; (800be30 <LoRaMacInitialization+0x3b0>)
 800bd7a:	f8c5 3358 	str.w	r3, [r5, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 800bd7e:	4b2d      	ldr	r3, [pc, #180]	; (800be34 <LoRaMacInitialization+0x3b4>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	f505 7053 	add.w	r0, r5, #844	; 0x34c
 800bd86:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 800bd88:	68b9      	ldr	r1, [r7, #8]
 800bd8a:	f504 7092 	add.w	r0, r4, #292	; 0x124
 800bd8e:	f004 fd59 	bl	8010844 <SecureElementInit>
 800bd92:	bb80      	cbnz	r0, 800bdf6 <LoRaMacInitialization+0x376>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 800bd94:	4620      	mov	r0, r4
 800bd96:	f001 fbf1 	bl	800d57c <LoRaMacCryptoInit>
 800bd9a:	2800      	cmp	r0, #0
 800bd9c:	d14c      	bne.n	800be38 <LoRaMacInitialization+0x3b8>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 800bd9e:	f001 f823 	bl	800cde8 <LoRaMacCommandsInit>
 800bda2:	2800      	cmp	r0, #0
 800bda4:	d14a      	bne.n	800be3c <LoRaMacInitialization+0x3bc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800bda6:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
 800bdaa:	f001 fc39 	bl	800d620 <LoRaMacCryptoSetMulticastReference>
 800bdae:	4604      	mov	r4, r0
 800bdb0:	2800      	cmp	r0, #0
 800bdb2:	d145      	bne.n	800be40 <LoRaMacInitialization+0x3c0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 800bdb4:	4d1f      	ldr	r5, [pc, #124]	; (800be34 <LoRaMacInitialization+0x3b4>)
 800bdb6:	696b      	ldr	r3, [r5, #20]
 800bdb8:	4798      	blx	r3
 800bdba:	f004 ffd5 	bl	8010d68 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800bdbe:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800bdc0:	4a0e      	ldr	r2, [pc, #56]	; (800bdfc <LoRaMacInitialization+0x37c>)
 800bdc2:	f892 0105 	ldrb.w	r0, [r2, #261]	; 0x105
 800bdc6:	4798      	blx	r3
    Radio.Sleep( );
 800bdc8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800bdca:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800bdcc:	4658      	mov	r0, fp
 800bdce:	f7fd fce7 	bl	80097a0 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 800bdd2:	e00c      	b.n	800bdee <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800bdd4:	2403      	movs	r4, #3
 800bdd6:	e00a      	b.n	800bdee <LoRaMacInitialization+0x36e>
 800bdd8:	2403      	movs	r4, #3
 800bdda:	e008      	b.n	800bdee <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800bddc:	2403      	movs	r4, #3
 800bdde:	e006      	b.n	800bdee <LoRaMacInitialization+0x36e>
 800bde0:	2403      	movs	r4, #3
 800bde2:	e004      	b.n	800bdee <LoRaMacInitialization+0x36e>
 800bde4:	2403      	movs	r4, #3
 800bde6:	e002      	b.n	800bdee <LoRaMacInitialization+0x36e>
 800bde8:	2403      	movs	r4, #3
 800bdea:	e000      	b.n	800bdee <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800bdec:	2409      	movs	r4, #9
}
 800bdee:	4620      	mov	r0, r4
 800bdf0:	b00d      	add	sp, #52	; 0x34
 800bdf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800bdf6:	2411      	movs	r4, #17
 800bdf8:	e7f9      	b.n	800bdee <LoRaMacInitialization+0x36e>
 800bdfa:	bf00      	nop
 800bdfc:	20008000 	.word	0x20008000
 800be00:	20000820 	.word	0x20000820
 800be04:	01000400 	.word	0x01000400
 800be08:	20000d40 	.word	0x20000d40
 800be0c:	0800ae8d 	.word	0x0800ae8d
 800be10:	0800b131 	.word	0x0800b131
 800be14:	0800b0d9 	.word	0x0800b0d9
 800be18:	08009b39 	.word	0x08009b39
 800be1c:	2000081c 	.word	0x2000081c
 800be20:	0800b3f1 	.word	0x0800b3f1
 800be24:	0800b391 	.word	0x0800b391
 800be28:	08009755 	.word	0x08009755
 800be2c:	0800b35d 	.word	0x0800b35d
 800be30:	0800b329 	.word	0x0800b329
 800be34:	08014f0c 	.word	0x08014f0c
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800be38:	2411      	movs	r4, #17
 800be3a:	e7d8      	b.n	800bdee <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800be3c:	2413      	movs	r4, #19
 800be3e:	e7d6      	b.n	800bdee <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800be40:	2411      	movs	r4, #17
 800be42:	e7d4      	b.n	800bdee <LoRaMacInitialization+0x36e>

0800be44 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
    MacCtx.MacState = LORAMAC_IDLE;
 800be44:	2000      	movs	r0, #0
 800be46:	4b02      	ldr	r3, [pc, #8]	; (800be50 <LoRaMacStart+0xc>)
 800be48:	f8c3 0340 	str.w	r0, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
}
 800be4c:	4770      	bx	lr
 800be4e:	bf00      	nop
 800be50:	20000820 	.word	0x20000820

0800be54 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 800be54:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == false )
 800be56:	f7ff fdaf 	bl	800b9b8 <LoRaMacIsBusy>
 800be5a:	b130      	cbz	r0, 800be6a <LoRaMacStop+0x16>
    {
        MacCtx.MacState = LORAMAC_STOPPED;
        return LORAMAC_STATUS_OK;
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 800be5c:	4b06      	ldr	r3, [pc, #24]	; (800be78 <LoRaMacStop+0x24>)
 800be5e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800be62:	2b01      	cmp	r3, #1
 800be64:	d006      	beq.n	800be74 <LoRaMacStop+0x20>
    {
        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_BUSY;
 800be66:	2001      	movs	r0, #1
}
 800be68:	bd08      	pop	{r3, pc}
        MacCtx.MacState = LORAMAC_STOPPED;
 800be6a:	4b03      	ldr	r3, [pc, #12]	; (800be78 <LoRaMacStop+0x24>)
 800be6c:	2201      	movs	r2, #1
 800be6e:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 800be72:	e7f9      	b.n	800be68 <LoRaMacStop+0x14>
        return LORAMAC_STATUS_OK;
 800be74:	2000      	movs	r0, #0
 800be76:	e7f7      	b.n	800be68 <LoRaMacStop+0x14>
 800be78:	20000820 	.word	0x20000820

0800be7c <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 800be7c:	b570      	push	{r4, r5, r6, lr}
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 800be7e:	4c14      	ldr	r4, [pc, #80]	; (800bed0 <LoRaMacHalt+0x54>)
 800be80:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800be84:	f007 f980 	bl	8013188 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 800be88:	f504 7060 	add.w	r0, r4, #896	; 0x380
 800be8c:	f007 f97c 	bl	8013188 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 800be90:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800be94:	f007 f978 	bl	8013188 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800be98:	f204 4004 	addw	r0, r4, #1028	; 0x404
 800be9c:	f007 f974 	bl	8013188 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 800bea0:	f000 ff0a 	bl	800ccb8 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 800bea4:	4b0b      	ldr	r3, [pc, #44]	; (800bed4 <LoRaMacHalt+0x58>)
 800bea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bea8:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 800beaa:	2500      	movs	r5, #0
 800beac:	f8c4 5340 	str.w	r5, [r4, #832]	; 0x340

    LoRaMacHandleNvm( &Nvm );
 800beb0:	4e09      	ldr	r6, [pc, #36]	; (800bed8 <LoRaMacHalt+0x5c>)
 800beb2:	4630      	mov	r0, r6
 800beb4:	f7ff f964 	bl	800b180 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 800beb8:	f240 528c 	movw	r2, #1420	; 0x58c
 800bebc:	4631      	mov	r1, r6
 800bebe:	4807      	ldr	r0, [pc, #28]	; (800bedc <LoRaMacHalt+0x60>)
 800bec0:	f004 ff65 	bl	8010d8e <memcpy1>

    MacCtx.MacState = LORAMAC_STOPPED;
 800bec4:	2301      	movs	r3, #1
 800bec6:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 800beca:	4628      	mov	r0, r5
 800becc:	bd70      	pop	{r4, r5, r6, pc}
 800bece:	bf00      	nop
 800bed0:	20000820 	.word	0x20000820
 800bed4:	08014f0c 	.word	0x08014f0c
 800bed8:	20008000 	.word	0x20008000
 800bedc:	2000858c 	.word	0x2000858c

0800bee0 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800bee0:	b530      	push	{r4, r5, lr}
 800bee2:	b08b      	sub	sp, #44	; 0x2c
 800bee4:	4604      	mov	r4, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800bee6:	4b32      	ldr	r3, [pc, #200]	; (800bfb0 <LoRaMacQueryTxPossible+0xd0>)
 800bee8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800beea:	9004      	str	r0, [sp, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800beec:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 800bef0:	f88d 200f 	strb.w	r2, [sp, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800bef4:	f993 30cc 	ldrsb.w	r3, [r3, #204]	; 0xcc
 800bef8:	f88d 300e 	strb.w	r3, [sp, #14]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 800befc:	4b2d      	ldr	r3, [pc, #180]	; (800bfb4 <LoRaMacQueryTxPossible+0xd4>)
 800befe:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800bf02:	f88d 200d 	strb.w	r2, [sp, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 800bf06:	2300      	movs	r3, #0
 800bf08:	9302      	str	r3, [sp, #8]

    if( txInfo == NULL )
 800bf0a:	2900      	cmp	r1, #0
 800bf0c:	d049      	beq.n	800bfa2 <LoRaMacQueryTxPossible+0xc2>
 800bf0e:	460d      	mov	r5, r1

    // Setup ADR request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 800bf10:	f88d 3014 	strb.w	r3, [sp, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800bf14:	4b26      	ldr	r3, [pc, #152]	; (800bfb0 <LoRaMacQueryTxPossible+0xd0>)
 800bf16:	f893 1106 	ldrb.w	r1, [r3, #262]	; 0x106
 800bf1a:	f88d 1015 	strb.w	r1, [sp, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800bf1e:	9006      	str	r0, [sp, #24]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800bf20:	4924      	ldr	r1, [pc, #144]	; (800bfb4 <LoRaMacQueryTxPossible+0xd4>)
 800bf22:	f8b1 0400 	ldrh.w	r0, [r1, #1024]	; 0x400
 800bf26:	f8ad 001c 	strh.w	r0, [sp, #28]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800bf2a:	f8b1 1402 	ldrh.w	r1, [r1, #1026]	; 0x402
 800bf2e:	f8ad 101e 	strh.w	r1, [sp, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800bf32:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800bf36:	f88d 1020 	strb.w	r1, [sp, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800bf3a:	f993 1038 	ldrsb.w	r1, [r3, #56]	; 0x38
 800bf3e:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 800bf42:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800bf46:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800bf4a:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 800bf4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bf52:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 800bf56:	ab04      	add	r3, sp, #16
 800bf58:	9300      	str	r3, [sp, #0]
 800bf5a:	f10d 030d 	add.w	r3, sp, #13
 800bf5e:	f10d 020e 	add.w	r2, sp, #14
 800bf62:	f10d 010f 	add.w	r1, sp, #15
 800bf66:	a805      	add	r0, sp, #20
 800bf68:	f000 fe18 	bl	800cb9c <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800bf6c:	f99d 000f 	ldrsb.w	r0, [sp, #15]
 800bf70:	f7fd fd3a 	bl	80099e8 <GetMaxAppPayloadWithoutFOptsLength>
 800bf74:	7068      	strb	r0, [r5, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800bf76:	a802      	add	r0, sp, #8
 800bf78:	f000 ffba 	bl	800cef0 <LoRaMacCommandsGetSizeSerializedCmds>
 800bf7c:	b998      	cbnz	r0, 800bfa6 <LoRaMacQueryTxPossible+0xc6>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800bf7e:	9b02      	ldr	r3, [sp, #8]
 800bf80:	2b0f      	cmp	r3, #15
 800bf82:	d80a      	bhi.n	800bf9a <LoRaMacQueryTxPossible+0xba>
 800bf84:	786a      	ldrb	r2, [r5, #1]
 800bf86:	4293      	cmp	r3, r2
 800bf88:	d807      	bhi.n	800bf9a <LoRaMacQueryTxPossible+0xba>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800bf8a:	1ad3      	subs	r3, r2, r3
 800bf8c:	702b      	strb	r3, [r5, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800bf8e:	9b02      	ldr	r3, [sp, #8]
 800bf90:	441c      	add	r4, r3
 800bf92:	42a2      	cmp	r2, r4
 800bf94:	d309      	bcc.n	800bfaa <LoRaMacQueryTxPossible+0xca>
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 800bf96:	b00b      	add	sp, #44	; 0x2c
 800bf98:	bd30      	pop	{r4, r5, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	702b      	strb	r3, [r5, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800bf9e:	2008      	movs	r0, #8
 800bfa0:	e7f9      	b.n	800bf96 <LoRaMacQueryTxPossible+0xb6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800bfa2:	2003      	movs	r0, #3
 800bfa4:	e7f7      	b.n	800bf96 <LoRaMacQueryTxPossible+0xb6>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800bfa6:	2013      	movs	r0, #19
 800bfa8:	e7f5      	b.n	800bf96 <LoRaMacQueryTxPossible+0xb6>
           return LORAMAC_STATUS_LENGTH_ERROR;
 800bfaa:	2008      	movs	r0, #8
 800bfac:	e7f3      	b.n	800bf96 <LoRaMacQueryTxPossible+0xb6>
 800bfae:	bf00      	nop
 800bfb0:	20008000 	.word	0x20008000
 800bfb4:	20000820 	.word	0x20000820

0800bfb8 <LoRaMacMibGetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800bfb8:	2800      	cmp	r0, #0
 800bfba:	f000 813d 	beq.w	800c238 <LoRaMacMibGetRequestConfirm+0x280>
{
 800bfbe:	b510      	push	{r4, lr}
 800bfc0:	b084      	sub	sp, #16
 800bfc2:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 800bfc4:	7800      	ldrb	r0, [r0, #0]
 800bfc6:	2839      	cmp	r0, #57	; 0x39
 800bfc8:	f200 8132 	bhi.w	800c230 <LoRaMacMibGetRequestConfirm+0x278>
 800bfcc:	e8df f010 	tbh	[pc, r0, lsl #1]
 800bfd0:	0040003a 	.word	0x0040003a
 800bfd4:	004b0046 	.word	0x004b0046
 800bfd8:	00560050 	.word	0x00560050
 800bfdc:	0130005c 	.word	0x0130005c
 800bfe0:	01300130 	.word	0x01300130
 800bfe4:	01300130 	.word	0x01300130
 800bfe8:	01300130 	.word	0x01300130
 800bfec:	00620130 	.word	0x00620130
 800bff0:	006e0068 	.word	0x006e0068
 800bff4:	0083007b 	.word	0x0083007b
 800bff8:	0093008b 	.word	0x0093008b
 800bffc:	009b00a8 	.word	0x009b00a8
 800c000:	00bb00b5 	.word	0x00bb00b5
 800c004:	00c500c0 	.word	0x00c500c0
 800c008:	00cf00ca 	.word	0x00cf00ca
 800c00c:	00e500d4 	.word	0x00e500d4
 800c010:	00f700eb 	.word	0x00f700eb
 800c014:	00fd00f1 	.word	0x00fd00f1
 800c018:	01080102 	.word	0x01080102
 800c01c:	010d0115 	.word	0x010d0115
 800c020:	01300111 	.word	0x01300111
 800c024:	0130011b 	.word	0x0130011b
 800c028:	01300130 	.word	0x01300130
 800c02c:	01300130 	.word	0x01300130
 800c030:	01300130 	.word	0x01300130
 800c034:	01300130 	.word	0x01300130
 800c038:	01300130 	.word	0x01300130
 800c03c:	01300130 	.word	0x01300130
 800c040:	012a0124 	.word	0x012a0124
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 800c044:	4b7d      	ldr	r3, [pc, #500]	; (800c23c <LoRaMacMibGetRequestConfirm+0x284>)
 800c046:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800c04a:	7123      	strb	r3, [r4, #4]
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 800c04c:	b004      	add	sp, #16
 800c04e:	bd10      	pop	{r4, pc}
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800c050:	4b7a      	ldr	r3, [pc, #488]	; (800c23c <LoRaMacMibGetRequestConfirm+0x284>)
 800c052:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800c056:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c058:	2000      	movs	r0, #0
            break;
 800c05a:	e7f7      	b.n	800c04c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 800c05c:	f004 fe50 	bl	8010d00 <SecureElementGetDevEui>
 800c060:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c062:	2000      	movs	r0, #0
            break;
 800c064:	e7f2      	b.n	800c04c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 800c066:	f004 fe61 	bl	8010d2c <SecureElementGetJoinEui>
 800c06a:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c06c:	2000      	movs	r0, #0
            break;
 800c06e:	e7ed      	b.n	800c04c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 800c070:	4b72      	ldr	r3, [pc, #456]	; (800c23c <LoRaMacMibGetRequestConfirm+0x284>)
 800c072:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800c076:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c078:	2000      	movs	r0, #0
            break;
 800c07a:	e7e7      	b.n	800c04c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 800c07c:	4b6f      	ldr	r3, [pc, #444]	; (800c23c <LoRaMacMibGetRequestConfirm+0x284>)
 800c07e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800c082:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c084:	2000      	movs	r0, #0
            break;
 800c086:	e7e1      	b.n	800c04c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 800c088:	4b6c      	ldr	r3, [pc, #432]	; (800c23c <LoRaMacMibGetRequestConfirm+0x284>)
 800c08a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c08e:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c090:	2000      	movs	r0, #0
            break;
 800c092:	e7db      	b.n	800c04c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 800c094:	4b69      	ldr	r3, [pc, #420]	; (800c23c <LoRaMacMibGetRequestConfirm+0x284>)
 800c096:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 800c09a:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c09c:	2000      	movs	r0, #0
            break;
 800c09e:	e7d5      	b.n	800c04c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800c0a0:	4b66      	ldr	r3, [pc, #408]	; (800c23c <LoRaMacMibGetRequestConfirm+0x284>)
 800c0a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c0a6:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c0a8:	2000      	movs	r0, #0
            break;
 800c0aa:	e7cf      	b.n	800c04c <LoRaMacMibGetRequestConfirm+0x94>
            getPhy.Attribute = PHY_CHANNELS;
 800c0ac:	231c      	movs	r3, #28
 800c0ae:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c0b2:	a902      	add	r1, sp, #8
 800c0b4:	4b61      	ldr	r3, [pc, #388]	; (800c23c <LoRaMacMibGetRequestConfirm+0x284>)
 800c0b6:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c0ba:	f001 fdd5 	bl	800dc68 <RegionGetPhyParam>
 800c0be:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelList = phyParam.Channels;
 800c0c0:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c0c2:	2000      	movs	r0, #0
            break;
 800c0c4:	e7c2      	b.n	800c04c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800c0c6:	3404      	adds	r4, #4
 800c0c8:	4b5d      	ldr	r3, [pc, #372]	; (800c240 <LoRaMacMibGetRequestConfirm+0x288>)
 800c0ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c0ce:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c0d2:	2000      	movs	r0, #0
            break;
 800c0d4:	e7ba      	b.n	800c04c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800c0d6:	3404      	adds	r4, #4
 800c0d8:	4b5a      	ldr	r3, [pc, #360]	; (800c244 <LoRaMacMibGetRequestConfirm+0x28c>)
 800c0da:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c0de:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c0e2:	2000      	movs	r0, #0
            break;
 800c0e4:	e7b2      	b.n	800c04c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 800c0e6:	3404      	adds	r4, #4
 800c0e8:	4b57      	ldr	r3, [pc, #348]	; (800c248 <LoRaMacMibGetRequestConfirm+0x290>)
 800c0ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c0ee:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c0f2:	2000      	movs	r0, #0
            break;
 800c0f4:	e7aa      	b.n	800c04c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800c0f6:	3404      	adds	r4, #4
 800c0f8:	4b54      	ldr	r3, [pc, #336]	; (800c24c <LoRaMacMibGetRequestConfirm+0x294>)
 800c0fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c0fe:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c102:	2000      	movs	r0, #0
            break;
 800c104:	e7a2      	b.n	800c04c <LoRaMacMibGetRequestConfirm+0x94>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800c106:	231a      	movs	r3, #26
 800c108:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c10c:	a902      	add	r1, sp, #8
 800c10e:	4b4b      	ldr	r3, [pc, #300]	; (800c23c <LoRaMacMibGetRequestConfirm+0x284>)
 800c110:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c114:	f001 fda8 	bl	800dc68 <RegionGetPhyParam>
 800c118:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800c11a:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c11c:	2000      	movs	r0, #0
            break;
 800c11e:	e795      	b.n	800c04c <LoRaMacMibGetRequestConfirm+0x94>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800c120:	2319      	movs	r3, #25
 800c122:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c126:	a902      	add	r1, sp, #8
 800c128:	4b44      	ldr	r3, [pc, #272]	; (800c23c <LoRaMacMibGetRequestConfirm+0x284>)
 800c12a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c12e:	f001 fd9b 	bl	800dc68 <RegionGetPhyParam>
 800c132:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800c134:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c136:	2000      	movs	r0, #0
            break;
 800c138:	e788      	b.n	800c04c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800c13a:	4b40      	ldr	r3, [pc, #256]	; (800c23c <LoRaMacMibGetRequestConfirm+0x284>)
 800c13c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800c140:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c142:	2000      	movs	r0, #0
            break;
 800c144:	e782      	b.n	800c04c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 800c146:	4b3d      	ldr	r3, [pc, #244]	; (800c23c <LoRaMacMibGetRequestConfirm+0x284>)
 800c148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c14a:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c14c:	2000      	movs	r0, #0
            break;
 800c14e:	e77d      	b.n	800c04c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 800c150:	4b3a      	ldr	r3, [pc, #232]	; (800c23c <LoRaMacMibGetRequestConfirm+0x284>)
 800c152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c154:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c156:	2000      	movs	r0, #0
            break;
 800c158:	e778      	b.n	800c04c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 800c15a:	4b38      	ldr	r3, [pc, #224]	; (800c23c <LoRaMacMibGetRequestConfirm+0x284>)
 800c15c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c15e:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c160:	2000      	movs	r0, #0
            break;
 800c162:	e773      	b.n	800c04c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 800c164:	4b35      	ldr	r3, [pc, #212]	; (800c23c <LoRaMacMibGetRequestConfirm+0x284>)
 800c166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c168:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c16a:	2000      	movs	r0, #0
            break;
 800c16c:	e76e      	b.n	800c04c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 800c16e:	4b33      	ldr	r3, [pc, #204]	; (800c23c <LoRaMacMibGetRequestConfirm+0x284>)
 800c170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c172:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c174:	2000      	movs	r0, #0
            break;
 800c176:	e769      	b.n	800c04c <LoRaMacMibGetRequestConfirm+0x94>
            getPhy.Attribute = PHY_MIN_TX_DR;
 800c178:	2302      	movs	r3, #2
 800c17a:	f88d 3008 	strb.w	r3, [sp, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800c17e:	4b2f      	ldr	r3, [pc, #188]	; (800c23c <LoRaMacMibGetRequestConfirm+0x284>)
 800c180:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800c184:	f88d 200a 	strb.w	r2, [sp, #10]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c188:	a902      	add	r1, sp, #8
 800c18a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c18e:	f001 fd6b 	bl	800dc68 <RegionGetPhyParam>
 800c192:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 800c194:	7120      	strb	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c196:	2000      	movs	r0, #0
            break;
 800c198:	e758      	b.n	800c04c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800c19a:	4b28      	ldr	r3, [pc, #160]	; (800c23c <LoRaMacMibGetRequestConfirm+0x284>)
 800c19c:	f993 30cd 	ldrsb.w	r3, [r3, #205]	; 0xcd
 800c1a0:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c1a2:	2000      	movs	r0, #0
            break;
 800c1a4:	e752      	b.n	800c04c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800c1a6:	4b25      	ldr	r3, [pc, #148]	; (800c23c <LoRaMacMibGetRequestConfirm+0x284>)
 800c1a8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800c1ac:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c1ae:	2000      	movs	r0, #0
            break;
 800c1b0:	e74c      	b.n	800c04c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800c1b2:	4b22      	ldr	r3, [pc, #136]	; (800c23c <LoRaMacMibGetRequestConfirm+0x284>)
 800c1b4:	f993 30cc 	ldrsb.w	r3, [r3, #204]	; 0xcc
 800c1b8:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c1ba:	2000      	movs	r0, #0
            break;
 800c1bc:	e746      	b.n	800c04c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800c1be:	4b1f      	ldr	r3, [pc, #124]	; (800c23c <LoRaMacMibGetRequestConfirm+0x284>)
 800c1c0:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800c1c4:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c1c6:	2000      	movs	r0, #0
            break;
 800c1c8:	e740      	b.n	800c04c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 800c1ca:	4b1c      	ldr	r3, [pc, #112]	; (800c23c <LoRaMacMibGetRequestConfirm+0x284>)
 800c1cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1ce:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c1d0:	2000      	movs	r0, #0
            break;
 800c1d2:	e73b      	b.n	800c04c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 800c1d4:	4b19      	ldr	r3, [pc, #100]	; (800c23c <LoRaMacMibGetRequestConfirm+0x284>)
 800c1d6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800c1da:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c1dc:	2000      	movs	r0, #0
            break;
 800c1de:	e735      	b.n	800c04c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800c1e0:	4b16      	ldr	r3, [pc, #88]	; (800c23c <LoRaMacMibGetRequestConfirm+0x284>)
 800c1e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1e4:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c1e6:	2000      	movs	r0, #0
            break;
 800c1e8:	e730      	b.n	800c04c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.Contexts = &Nvm;
 800c1ea:	4b14      	ldr	r3, [pc, #80]	; (800c23c <LoRaMacMibGetRequestConfirm+0x284>)
 800c1ec:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c1ee:	2000      	movs	r0, #0
            break;
 800c1f0:	e72c      	b.n	800c04c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.BackupContexts = &NvmBackup;
 800c1f2:	4b17      	ldr	r3, [pc, #92]	; (800c250 <LoRaMacMibGetRequestConfirm+0x298>)
 800c1f4:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c1f6:	2000      	movs	r0, #0
            break;
 800c1f8:	e728      	b.n	800c04c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800c1fa:	4b10      	ldr	r3, [pc, #64]	; (800c23c <LoRaMacMibGetRequestConfirm+0x284>)
 800c1fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800c200:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c202:	2000      	movs	r0, #0
            break;
 800c204:	e722      	b.n	800c04c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 800c206:	4b0d      	ldr	r3, [pc, #52]	; (800c23c <LoRaMacMibGetRequestConfirm+0x284>)
 800c208:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800c20c:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800c20e:	f001 fe53 	bl	800deb8 <RegionGetVersion>
 800c212:	60a0      	str	r0, [r4, #8]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c214:	2000      	movs	r0, #0
            break;
 800c216:	e719      	b.n	800c04c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800c218:	4b08      	ldr	r3, [pc, #32]	; (800c23c <LoRaMacMibGetRequestConfirm+0x284>)
 800c21a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c21e:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c220:	2000      	movs	r0, #0
            break;
 800c222:	e713      	b.n	800c04c <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 800c224:	4b05      	ldr	r3, [pc, #20]	; (800c23c <LoRaMacMibGetRequestConfirm+0x284>)
 800c226:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 800c22a:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c22c:	2000      	movs	r0, #0
            break;
 800c22e:	e70d      	b.n	800c04c <LoRaMacMibGetRequestConfirm+0x94>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800c230:	4620      	mov	r0, r4
 800c232:	f000 fd45 	bl	800ccc0 <LoRaMacClassBMibGetRequestConfirm>
            break;
 800c236:	e709      	b.n	800c04c <LoRaMacMibGetRequestConfirm+0x94>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c238:	2003      	movs	r0, #3
}
 800c23a:	4770      	bx	lr
 800c23c:	20008000 	.word	0x20008000
 800c240:	20008064 	.word	0x20008064
 800c244:	200080a8 	.word	0x200080a8
 800c248:	2000806c 	.word	0x2000806c
 800c24c:	200080b0 	.word	0x200080b0
 800c250:	2000858c 	.word	0x2000858c

0800c254 <LoRaMacMibSetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800c254:	2800      	cmp	r0, #0
 800c256:	f000 8254 	beq.w	800c702 <LoRaMacMibSetRequestConfirm+0x4ae>
{
 800c25a:	b530      	push	{r4, r5, lr}
 800c25c:	b085      	sub	sp, #20
 800c25e:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800c260:	4ba3      	ldr	r3, [pc, #652]	; (800c4f0 <LoRaMacMibSetRequestConfirm+0x29c>)
 800c262:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800c266:	f013 0f02 	tst.w	r3, #2
 800c26a:	f040 824c 	bne.w	800c706 <LoRaMacMibSetRequestConfirm+0x4b2>
    {
        return LORAMAC_STATUS_BUSY;
    }

    switch( mibSet->Type )
 800c26e:	7805      	ldrb	r5, [r0, #0]
 800c270:	2d39      	cmp	r5, #57	; 0x39
 800c272:	f200 8243 	bhi.w	800c6fc <LoRaMacMibSetRequestConfirm+0x4a8>
 800c276:	e8df f015 	tbh	[pc, r5, lsl #1]
 800c27a:	003a      	.short	0x003a
 800c27c:	00500047 	.word	0x00500047
 800c280:	005e0057 	.word	0x005e0057
 800c284:	006a0064 	.word	0x006a0064
 800c288:	007b0070 	.word	0x007b0070
 800c28c:	00910086 	.word	0x00910086
 800c290:	00a7009c 	.word	0x00a7009c
 800c294:	00bd00b2 	.word	0x00bd00b2
 800c298:	00d400c9 	.word	0x00d400c9
 800c29c:	00da0241 	.word	0x00da0241
 800c2a0:	011a0100 	.word	0x011a0100
 800c2a4:	017d0153 	.word	0x017d0153
 800c2a8:	018d016d 	.word	0x018d016d
 800c2ac:	019d0198 	.word	0x019d0198
 800c2b0:	01a701a2 	.word	0x01a701a2
 800c2b4:	024101ac 	.word	0x024101ac
 800c2b8:	01c601b1 	.word	0x01c601b1
 800c2bc:	01df01f3 	.word	0x01df01f3
 800c2c0:	020e0207 	.word	0x020e0207
 800c2c4:	021b0216 	.word	0x021b0216
 800c2c8:	02410221 	.word	0x02410221
 800c2cc:	02410224 	.word	0x02410224
 800c2d0:	02410241 	.word	0x02410241
 800c2d4:	02410241 	.word	0x02410241
 800c2d8:	02410241 	.word	0x02410241
 800c2dc:	02410241 	.word	0x02410241
 800c2e0:	02410241 	.word	0x02410241
 800c2e4:	02410241 	.word	0x02410241
 800c2e8:	02350241 	.word	0x02350241
 800c2ec:	023b      	.short	0x023b
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800c2ee:	7900      	ldrb	r0, [r0, #4]
 800c2f0:	f7ff f95a 	bl	800b5a8 <SwitchClass>
            break;
        }
    }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( status == LORAMAC_STATUS_OK )
 800c2f4:	b930      	cbnz	r0, 800c304 <LoRaMacMibSetRequestConfirm+0xb0>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800c2f6:	4a7e      	ldr	r2, [pc, #504]	; (800c4f0 <LoRaMacMibSetRequestConfirm+0x29c>)
 800c2f8:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800c2fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c300:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    }
#endif /* LORAMAC_VERSION */
    return status;
}
 800c304:	b005      	add	sp, #20
 800c306:	bd30      	pop	{r4, r5, pc}
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800c308:	7903      	ldrb	r3, [r0, #4]
 800c30a:	2b02      	cmp	r3, #2
 800c30c:	f000 81fd 	beq.w	800c70a <LoRaMacMibSetRequestConfirm+0x4b6>
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 800c310:	4a78      	ldr	r2, [pc, #480]	; (800c4f4 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800c312:	f882 311c 	strb.w	r3, [r2, #284]	; 0x11c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c316:	2000      	movs	r0, #0
 800c318:	e7ed      	b.n	800c2f6 <LoRaMacMibSetRequestConfirm+0xa2>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800c31a:	6840      	ldr	r0, [r0, #4]
 800c31c:	f004 fce2 	bl	8010ce4 <SecureElementSetDevEui>
 800c320:	2800      	cmp	r0, #0
 800c322:	d0e8      	beq.n	800c2f6 <LoRaMacMibSetRequestConfirm+0xa2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c324:	2003      	movs	r0, #3
 800c326:	e7ed      	b.n	800c304 <LoRaMacMibSetRequestConfirm+0xb0>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800c328:	6840      	ldr	r0, [r0, #4]
 800c32a:	f004 fcef 	bl	8010d0c <SecureElementSetJoinEui>
 800c32e:	2800      	cmp	r0, #0
 800c330:	d0e1      	beq.n	800c2f6 <LoRaMacMibSetRequestConfirm+0xa2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c332:	4628      	mov	r0, r5
 800c334:	e7e6      	b.n	800c304 <LoRaMacMibSetRequestConfirm+0xb0>
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 800c336:	7902      	ldrb	r2, [r0, #4]
 800c338:	4b6e      	ldr	r3, [pc, #440]	; (800c4f4 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800c33a:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c33e:	2000      	movs	r0, #0
 800c340:	e7d9      	b.n	800c2f6 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 800c342:	6842      	ldr	r2, [r0, #4]
 800c344:	4b6b      	ldr	r3, [pc, #428]	; (800c4f4 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800c346:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c34a:	2000      	movs	r0, #0
 800c34c:	e7d3      	b.n	800c2f6 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 800c34e:	6842      	ldr	r2, [r0, #4]
 800c350:	4b68      	ldr	r3, [pc, #416]	; (800c4f4 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800c352:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c356:	2000      	movs	r0, #0
 800c358:	e7cd      	b.n	800c2f6 <LoRaMacMibSetRequestConfirm+0xa2>
            if( mibSet->Param.AppKey != NULL )
 800c35a:	6841      	ldr	r1, [r0, #4]
 800c35c:	2900      	cmp	r1, #0
 800c35e:	f000 81d6 	beq.w	800c70e <LoRaMacMibSetRequestConfirm+0x4ba>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800c362:	2000      	movs	r0, #0
 800c364:	f001 fa6e 	bl	800d844 <LoRaMacCryptoSetKey>
 800c368:	2800      	cmp	r0, #0
 800c36a:	d0c4      	beq.n	800c2f6 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c36c:	2011      	movs	r0, #17
 800c36e:	e7c9      	b.n	800c304 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.NwkKey != NULL )
 800c370:	6841      	ldr	r1, [r0, #4]
 800c372:	2900      	cmp	r1, #0
 800c374:	f000 81cd 	beq.w	800c712 <LoRaMacMibSetRequestConfirm+0x4be>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800c378:	2001      	movs	r0, #1
 800c37a:	f001 fa63 	bl	800d844 <LoRaMacCryptoSetKey>
 800c37e:	2800      	cmp	r0, #0
 800c380:	d0b9      	beq.n	800c2f6 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c382:	2011      	movs	r0, #17
 800c384:	e7be      	b.n	800c304 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.NwkSKey != NULL )
 800c386:	6841      	ldr	r1, [r0, #4]
 800c388:	2900      	cmp	r1, #0
 800c38a:	f000 81c4 	beq.w	800c716 <LoRaMacMibSetRequestConfirm+0x4c2>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800c38e:	2002      	movs	r0, #2
 800c390:	f001 fa58 	bl	800d844 <LoRaMacCryptoSetKey>
 800c394:	2800      	cmp	r0, #0
 800c396:	d0ae      	beq.n	800c2f6 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c398:	2011      	movs	r0, #17
 800c39a:	e7b3      	b.n	800c304 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.AppSKey != NULL )
 800c39c:	6841      	ldr	r1, [r0, #4]
 800c39e:	2900      	cmp	r1, #0
 800c3a0:	f000 81bb 	beq.w	800c71a <LoRaMacMibSetRequestConfirm+0x4c6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800c3a4:	2003      	movs	r0, #3
 800c3a6:	f001 fa4d 	bl	800d844 <LoRaMacCryptoSetKey>
 800c3aa:	2800      	cmp	r0, #0
 800c3ac:	d0a3      	beq.n	800c2f6 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c3ae:	2011      	movs	r0, #17
 800c3b0:	e7a8      	b.n	800c304 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.McKEKey != NULL )
 800c3b2:	6841      	ldr	r1, [r0, #4]
 800c3b4:	2900      	cmp	r1, #0
 800c3b6:	f000 81b2 	beq.w	800c71e <LoRaMacMibSetRequestConfirm+0x4ca>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800c3ba:	207f      	movs	r0, #127	; 0x7f
 800c3bc:	f001 fa42 	bl	800d844 <LoRaMacCryptoSetKey>
 800c3c0:	2800      	cmp	r0, #0
 800c3c2:	d098      	beq.n	800c2f6 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c3c4:	2011      	movs	r0, #17
 800c3c6:	e79d      	b.n	800c304 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.McKey0 != NULL )
 800c3c8:	6841      	ldr	r1, [r0, #4]
 800c3ca:	2900      	cmp	r1, #0
 800c3cc:	f000 81a9 	beq.w	800c722 <LoRaMacMibSetRequestConfirm+0x4ce>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800c3d0:	2080      	movs	r0, #128	; 0x80
 800c3d2:	f001 fa37 	bl	800d844 <LoRaMacCryptoSetKey>
 800c3d6:	2800      	cmp	r0, #0
 800c3d8:	d08d      	beq.n	800c2f6 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c3da:	2011      	movs	r0, #17
 800c3dc:	e792      	b.n	800c304 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.McAppSKey0 != NULL )
 800c3de:	6841      	ldr	r1, [r0, #4]
 800c3e0:	2900      	cmp	r1, #0
 800c3e2:	f000 81a0 	beq.w	800c726 <LoRaMacMibSetRequestConfirm+0x4d2>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800c3e6:	2081      	movs	r0, #129	; 0x81
 800c3e8:	f001 fa2c 	bl	800d844 <LoRaMacCryptoSetKey>
 800c3ec:	2800      	cmp	r0, #0
 800c3ee:	d082      	beq.n	800c2f6 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c3f0:	2011      	movs	r0, #17
 800c3f2:	e787      	b.n	800c304 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.McNwkSKey0 != NULL )
 800c3f4:	6841      	ldr	r1, [r0, #4]
 800c3f6:	2900      	cmp	r1, #0
 800c3f8:	f000 8197 	beq.w	800c72a <LoRaMacMibSetRequestConfirm+0x4d6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800c3fc:	2082      	movs	r0, #130	; 0x82
 800c3fe:	f001 fa21 	bl	800d844 <LoRaMacCryptoSetKey>
 800c402:	2800      	cmp	r0, #0
 800c404:	f43f af77 	beq.w	800c2f6 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c408:	2011      	movs	r0, #17
 800c40a:	e77b      	b.n	800c304 <LoRaMacMibSetRequestConfirm+0xb0>
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800c40c:	7900      	ldrb	r0, [r0, #4]
 800c40e:	4b39      	ldr	r3, [pc, #228]	; (800c4f4 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800c410:	f883 0105 	strb.w	r0, [r3, #261]	; 0x105
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800c414:	4c38      	ldr	r4, [pc, #224]	; (800c4f8 <LoRaMacMibSetRequestConfirm+0x2a4>)
 800c416:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c418:	4798      	blx	r3
            Radio.Sleep( );
 800c41a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c41c:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c41e:	2000      	movs	r0, #0
 800c420:	e769      	b.n	800c2f6 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800c422:	7902      	ldrb	r2, [r0, #4]
 800c424:	4b33      	ldr	r3, [pc, #204]	; (800c4f4 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800c426:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c42a:	2000      	movs	r0, #0
 800c42c:	e763      	b.n	800c2f6 <LoRaMacMibSetRequestConfirm+0xa2>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800c42e:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800c432:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800c436:	4b2f      	ldr	r3, [pc, #188]	; (800c4f4 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800c438:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800c43c:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800c440:	2207      	movs	r2, #7
 800c442:	a901      	add	r1, sp, #4
 800c444:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c448:	f001 fc42 	bl	800dcd0 <RegionVerify>
 800c44c:	b908      	cbnz	r0, 800c452 <LoRaMacMibSetRequestConfirm+0x1fe>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c44e:	2003      	movs	r0, #3
 800c450:	e750      	b.n	800c2f4 <LoRaMacMibSetRequestConfirm+0xa0>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800c452:	6863      	ldr	r3, [r4, #4]
 800c454:	9301      	str	r3, [sp, #4]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800c456:	2200      	movs	r2, #0
 800c458:	a901      	add	r1, sp, #4
 800c45a:	4b26      	ldr	r3, [pc, #152]	; (800c4f4 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800c45c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c460:	f001 fc36 	bl	800dcd0 <RegionVerify>
 800c464:	2800      	cmp	r0, #0
 800c466:	f000 8162 	beq.w	800c72e <LoRaMacMibSetRequestConfirm+0x4da>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800c46a:	4b24      	ldr	r3, [pc, #144]	; (800c4fc <LoRaMacMibSetRequestConfirm+0x2a8>)
 800c46c:	3404      	adds	r4, #4
 800c46e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c472:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c476:	2000      	movs	r0, #0
 800c478:	e73c      	b.n	800c2f4 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800c47a:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800c47e:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800c482:	4b1c      	ldr	r3, [pc, #112]	; (800c4f4 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800c484:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800c488:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800c48c:	2207      	movs	r2, #7
 800c48e:	a901      	add	r1, sp, #4
 800c490:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c494:	f001 fc1c 	bl	800dcd0 <RegionVerify>
 800c498:	2800      	cmp	r0, #0
 800c49a:	f000 814a 	beq.w	800c732 <LoRaMacMibSetRequestConfirm+0x4de>
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800c49e:	4b18      	ldr	r3, [pc, #96]	; (800c500 <LoRaMacMibSetRequestConfirm+0x2ac>)
 800c4a0:	3404      	adds	r4, #4
 800c4a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c4a6:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c4aa:	2000      	movs	r0, #0
 800c4ac:	e722      	b.n	800c2f4 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800c4ae:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800c4b2:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800c4b6:	4b0f      	ldr	r3, [pc, #60]	; (800c4f4 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800c4b8:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800c4bc:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800c4c0:	2207      	movs	r2, #7
 800c4c2:	a901      	add	r1, sp, #4
 800c4c4:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c4c8:	f001 fc02 	bl	800dcd0 <RegionVerify>
 800c4cc:	2800      	cmp	r0, #0
 800c4ce:	f000 8132 	beq.w	800c736 <LoRaMacMibSetRequestConfirm+0x4e2>
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800c4d2:	4b08      	ldr	r3, [pc, #32]	; (800c4f4 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800c4d4:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800c4d8:	3404      	adds	r4, #4
 800c4da:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c4de:	e882 0003 	stmia.w	r2, {r0, r1}
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800c4e2:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800c4e6:	2b02      	cmp	r3, #2
 800c4e8:	d00c      	beq.n	800c504 <LoRaMacMibSetRequestConfirm+0x2b0>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c4ea:	2000      	movs	r0, #0
 800c4ec:	e702      	b.n	800c2f4 <LoRaMacMibSetRequestConfirm+0xa0>
 800c4ee:	bf00      	nop
 800c4f0:	20000820 	.word	0x20000820
 800c4f4:	20008000 	.word	0x20008000
 800c4f8:	08014f0c 	.word	0x08014f0c
 800c4fc:	20008064 	.word	0x20008064
 800c500:	200080a8 	.word	0x200080a8
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800c504:	f1a2 036c 	sub.w	r3, r2, #108	; 0x6c
 800c508:	f893 011c 	ldrb.w	r0, [r3, #284]	; 0x11c
 800c50c:	2800      	cmp	r0, #0
 800c50e:	f43f aef1 	beq.w	800c2f4 <LoRaMacMibSetRequestConfirm+0xa0>
                    Radio.Sleep( );
 800c512:	4b90      	ldr	r3, [pc, #576]	; (800c754 <LoRaMacMibSetRequestConfirm+0x500>)
 800c514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c516:	4798      	blx	r3
                    OpenContinuousRxCWindow( );
 800c518:	f7fe fd82 	bl	800b020 <OpenContinuousRxCWindow>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c51c:	2000      	movs	r0, #0
 800c51e:	e6e9      	b.n	800c2f4 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800c520:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800c524:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800c528:	4b8b      	ldr	r3, [pc, #556]	; (800c758 <LoRaMacMibSetRequestConfirm+0x504>)
 800c52a:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800c52e:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800c532:	2207      	movs	r2, #7
 800c534:	a901      	add	r1, sp, #4
 800c536:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c53a:	f001 fbc9 	bl	800dcd0 <RegionVerify>
 800c53e:	2800      	cmp	r0, #0
 800c540:	f000 80fb 	beq.w	800c73a <LoRaMacMibSetRequestConfirm+0x4e6>
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800c544:	4b85      	ldr	r3, [pc, #532]	; (800c75c <LoRaMacMibSetRequestConfirm+0x508>)
 800c546:	3404      	adds	r4, #4
 800c548:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c54c:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c550:	2000      	movs	r0, #0
 800c552:	e6cf      	b.n	800c2f4 <LoRaMacMibSetRequestConfirm+0xa0>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800c554:	6843      	ldr	r3, [r0, #4]
 800c556:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800c558:	2301      	movs	r3, #1
 800c55a:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800c55e:	a902      	add	r1, sp, #8
 800c560:	4b7d      	ldr	r3, [pc, #500]	; (800c758 <LoRaMacMibSetRequestConfirm+0x504>)
 800c562:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c566:	f001 fbd1 	bl	800dd0c <RegionChanMaskSet>
 800c56a:	b108      	cbz	r0, 800c570 <LoRaMacMibSetRequestConfirm+0x31c>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c56c:	2000      	movs	r0, #0
 800c56e:	e6c1      	b.n	800c2f4 <LoRaMacMibSetRequestConfirm+0xa0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c570:	2003      	movs	r0, #3
 800c572:	e6c7      	b.n	800c304 <LoRaMacMibSetRequestConfirm+0xb0>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800c574:	6843      	ldr	r3, [r0, #4]
 800c576:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800c578:	2300      	movs	r3, #0
 800c57a:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800c57e:	a902      	add	r1, sp, #8
 800c580:	4b75      	ldr	r3, [pc, #468]	; (800c758 <LoRaMacMibSetRequestConfirm+0x504>)
 800c582:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c586:	f001 fbc1 	bl	800dd0c <RegionChanMaskSet>
 800c58a:	b108      	cbz	r0, 800c590 <LoRaMacMibSetRequestConfirm+0x33c>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c58c:	2000      	movs	r0, #0
 800c58e:	e6b1      	b.n	800c2f4 <LoRaMacMibSetRequestConfirm+0xa0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c590:	2003      	movs	r0, #3
 800c592:	e6b7      	b.n	800c304 <LoRaMacMibSetRequestConfirm+0xb0>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800c594:	7902      	ldrb	r2, [r0, #4]
 800c596:	1e53      	subs	r3, r2, #1
 800c598:	b2db      	uxtb	r3, r3
 800c59a:	2b0e      	cmp	r3, #14
 800c59c:	f200 80cf 	bhi.w	800c73e <LoRaMacMibSetRequestConfirm+0x4ea>
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800c5a0:	4b6d      	ldr	r3, [pc, #436]	; (800c758 <LoRaMacMibSetRequestConfirm+0x504>)
 800c5a2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c5a6:	2000      	movs	r0, #0
 800c5a8:	e6a4      	b.n	800c2f4 <LoRaMacMibSetRequestConfirm+0xa0>
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800c5aa:	6842      	ldr	r2, [r0, #4]
 800c5ac:	4b6a      	ldr	r3, [pc, #424]	; (800c758 <LoRaMacMibSetRequestConfirm+0x504>)
 800c5ae:	64da      	str	r2, [r3, #76]	; 0x4c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c5b0:	2000      	movs	r0, #0
 800c5b2:	e6a0      	b.n	800c2f6 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800c5b4:	6842      	ldr	r2, [r0, #4]
 800c5b6:	4b68      	ldr	r3, [pc, #416]	; (800c758 <LoRaMacMibSetRequestConfirm+0x504>)
 800c5b8:	651a      	str	r2, [r3, #80]	; 0x50
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c5ba:	2000      	movs	r0, #0
 800c5bc:	e69b      	b.n	800c2f6 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800c5be:	6842      	ldr	r2, [r0, #4]
 800c5c0:	4b65      	ldr	r3, [pc, #404]	; (800c758 <LoRaMacMibSetRequestConfirm+0x504>)
 800c5c2:	655a      	str	r2, [r3, #84]	; 0x54
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c5c4:	2000      	movs	r0, #0
 800c5c6:	e696      	b.n	800c2f6 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800c5c8:	6842      	ldr	r2, [r0, #4]
 800c5ca:	4b63      	ldr	r3, [pc, #396]	; (800c758 <LoRaMacMibSetRequestConfirm+0x504>)
 800c5cc:	659a      	str	r2, [r3, #88]	; 0x58
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c5ce:	2000      	movs	r0, #0
 800c5d0:	e691      	b.n	800c2f6 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800c5d2:	6842      	ldr	r2, [r0, #4]
 800c5d4:	4b60      	ldr	r3, [pc, #384]	; (800c758 <LoRaMacMibSetRequestConfirm+0x504>)
 800c5d6:	65da      	str	r2, [r3, #92]	; 0x5c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c5d8:	2000      	movs	r0, #0
 800c5da:	e68c      	b.n	800c2f6 <LoRaMacMibSetRequestConfirm+0xa2>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800c5dc:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800c5e0:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800c5e4:	2206      	movs	r2, #6
 800c5e6:	a901      	add	r1, sp, #4
 800c5e8:	4b5b      	ldr	r3, [pc, #364]	; (800c758 <LoRaMacMibSetRequestConfirm+0x504>)
 800c5ea:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c5ee:	f001 fb6f 	bl	800dcd0 <RegionVerify>
 800c5f2:	2800      	cmp	r0, #0
 800c5f4:	f000 80a5 	beq.w	800c742 <LoRaMacMibSetRequestConfirm+0x4ee>
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 800c5f8:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800c5fc:	4b56      	ldr	r3, [pc, #344]	; (800c758 <LoRaMacMibSetRequestConfirm+0x504>)
 800c5fe:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c602:	2000      	movs	r0, #0
 800c604:	e676      	b.n	800c2f4 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800c606:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800c60a:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800c60e:	4b52      	ldr	r3, [pc, #328]	; (800c758 <LoRaMacMibSetRequestConfirm+0x504>)
 800c610:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800c614:	f88d 2006 	strb.w	r2, [sp, #6]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800c618:	2205      	movs	r2, #5
 800c61a:	a901      	add	r1, sp, #4
 800c61c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c620:	f001 fb56 	bl	800dcd0 <RegionVerify>
 800c624:	2800      	cmp	r0, #0
 800c626:	f000 808e 	beq.w	800c746 <LoRaMacMibSetRequestConfirm+0x4f2>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800c62a:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800c62e:	4b4a      	ldr	r3, [pc, #296]	; (800c758 <LoRaMacMibSetRequestConfirm+0x504>)
 800c630:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c634:	2000      	movs	r0, #0
 800c636:	e65d      	b.n	800c2f4 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800c638:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800c63c:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800c640:	220a      	movs	r2, #10
 800c642:	a901      	add	r1, sp, #4
 800c644:	4b44      	ldr	r3, [pc, #272]	; (800c758 <LoRaMacMibSetRequestConfirm+0x504>)
 800c646:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c64a:	f001 fb41 	bl	800dcd0 <RegionVerify>
 800c64e:	2800      	cmp	r0, #0
 800c650:	d07b      	beq.n	800c74a <LoRaMacMibSetRequestConfirm+0x4f6>
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 800c652:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800c656:	4b40      	ldr	r3, [pc, #256]	; (800c758 <LoRaMacMibSetRequestConfirm+0x504>)
 800c658:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c65c:	2000      	movs	r0, #0
 800c65e:	e649      	b.n	800c2f4 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800c660:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800c664:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 800c668:	2209      	movs	r2, #9
 800c66a:	a901      	add	r1, sp, #4
 800c66c:	4b3a      	ldr	r3, [pc, #232]	; (800c758 <LoRaMacMibSetRequestConfirm+0x504>)
 800c66e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c672:	f001 fb2d 	bl	800dcd0 <RegionVerify>
 800c676:	2800      	cmp	r0, #0
 800c678:	d069      	beq.n	800c74e <LoRaMacMibSetRequestConfirm+0x4fa>
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 800c67a:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800c67e:	4b36      	ldr	r3, [pc, #216]	; (800c758 <LoRaMacMibSetRequestConfirm+0x504>)
 800c680:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c684:	2000      	movs	r0, #0
 800c686:	e635      	b.n	800c2f4 <LoRaMacMibSetRequestConfirm+0xa0>
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800c688:	6842      	ldr	r2, [r0, #4]
 800c68a:	4b33      	ldr	r3, [pc, #204]	; (800c758 <LoRaMacMibSetRequestConfirm+0x504>)
 800c68c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800c690:	645a      	str	r2, [r3, #68]	; 0x44
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c692:	2000      	movs	r0, #0
 800c694:	e62f      	b.n	800c2f6 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800c696:	7902      	ldrb	r2, [r0, #4]
 800c698:	4b2f      	ldr	r3, [pc, #188]	; (800c758 <LoRaMacMibSetRequestConfirm+0x504>)
 800c69a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 800c69e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c6a2:	2000      	movs	r0, #0
 800c6a4:	e627      	b.n	800c2f6 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800c6a6:	6842      	ldr	r2, [r0, #4]
 800c6a8:	4b2b      	ldr	r3, [pc, #172]	; (800c758 <LoRaMacMibSetRequestConfirm+0x504>)
 800c6aa:	67da      	str	r2, [r3, #124]	; 0x7c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c6ac:	2000      	movs	r0, #0
 800c6ae:	e622      	b.n	800c2f6 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800c6b0:	6842      	ldr	r2, [r0, #4]
 800c6b2:	4b29      	ldr	r3, [pc, #164]	; (800c758 <LoRaMacMibSetRequestConfirm+0x504>)
 800c6b4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c6b8:	2000      	movs	r0, #0
 800c6ba:	e61c      	b.n	800c2f6 <LoRaMacMibSetRequestConfirm+0xa2>
            status = RestoreNvmData( );
 800c6bc:	f7fe fdc4 	bl	800b248 <RestoreNvmData>
            break;
 800c6c0:	e618      	b.n	800c2f4 <LoRaMacMibSetRequestConfirm+0xa0>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800c6c2:	7983      	ldrb	r3, [r0, #6]
 800c6c4:	2b01      	cmp	r3, #1
 800c6c6:	d901      	bls.n	800c6cc <LoRaMacMibSetRequestConfirm+0x478>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c6c8:	2003      	movs	r0, #3
 800c6ca:	e61b      	b.n	800c304 <LoRaMacMibSetRequestConfirm+0xb0>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800c6cc:	6842      	ldr	r2, [r0, #4]
 800c6ce:	4b22      	ldr	r3, [pc, #136]	; (800c758 <LoRaMacMibSetRequestConfirm+0x504>)
 800c6d0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800c6d4:	6840      	ldr	r0, [r0, #4]
 800c6d6:	f000 ff69 	bl	800d5ac <LoRaMacCryptoSetLrWanVersion>
 800c6da:	2800      	cmp	r0, #0
 800c6dc:	f43f ae0a 	beq.w	800c2f4 <LoRaMacMibSetRequestConfirm+0xa0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c6e0:	2011      	movs	r0, #17
 800c6e2:	e60f      	b.n	800c304 <LoRaMacMibSetRequestConfirm+0xb0>
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 800c6e4:	6842      	ldr	r2, [r0, #4]
 800c6e6:	4b1c      	ldr	r3, [pc, #112]	; (800c758 <LoRaMacMibSetRequestConfirm+0x504>)
 800c6e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c6ec:	2000      	movs	r0, #0
 800c6ee:	e602      	b.n	800c2f6 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 800c6f0:	7902      	ldrb	r2, [r0, #4]
 800c6f2:	4b19      	ldr	r3, [pc, #100]	; (800c758 <LoRaMacMibSetRequestConfirm+0x504>)
 800c6f4:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c6f8:	2000      	movs	r0, #0
 800c6fa:	e5fc      	b.n	800c2f6 <LoRaMacMibSetRequestConfirm+0xa2>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800c6fc:	f000 fae2 	bl	800ccc4 <LoRaMacMibClassBSetRequestConfirm>
            break;
 800c700:	e5f8      	b.n	800c2f4 <LoRaMacMibSetRequestConfirm+0xa0>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c702:	2003      	movs	r0, #3
}
 800c704:	4770      	bx	lr
        return LORAMAC_STATUS_BUSY;
 800c706:	2001      	movs	r0, #1
 800c708:	e5fc      	b.n	800c304 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c70a:	2003      	movs	r0, #3
 800c70c:	e5fa      	b.n	800c304 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c70e:	2003      	movs	r0, #3
 800c710:	e5f8      	b.n	800c304 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c712:	2003      	movs	r0, #3
 800c714:	e5f6      	b.n	800c304 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c716:	2003      	movs	r0, #3
 800c718:	e5f4      	b.n	800c304 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c71a:	2003      	movs	r0, #3
 800c71c:	e5f2      	b.n	800c304 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c71e:	2003      	movs	r0, #3
 800c720:	e5f0      	b.n	800c304 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c722:	2003      	movs	r0, #3
 800c724:	e5ee      	b.n	800c304 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c726:	2003      	movs	r0, #3
 800c728:	e5ec      	b.n	800c304 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c72a:	2003      	movs	r0, #3
 800c72c:	e5ea      	b.n	800c304 <LoRaMacMibSetRequestConfirm+0xb0>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c72e:	2003      	movs	r0, #3
 800c730:	e5e8      	b.n	800c304 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c732:	2003      	movs	r0, #3
 800c734:	e5e6      	b.n	800c304 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c736:	2003      	movs	r0, #3
 800c738:	e5e4      	b.n	800c304 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c73a:	2003      	movs	r0, #3
 800c73c:	e5e2      	b.n	800c304 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c73e:	2003      	movs	r0, #3
 800c740:	e5e0      	b.n	800c304 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c742:	2003      	movs	r0, #3
 800c744:	e5de      	b.n	800c304 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c746:	2003      	movs	r0, #3
 800c748:	e5dc      	b.n	800c304 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c74a:	2003      	movs	r0, #3
 800c74c:	e5da      	b.n	800c304 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c74e:	2003      	movs	r0, #3
 800c750:	e5d8      	b.n	800c304 <LoRaMacMibSetRequestConfirm+0xb0>
 800c752:	bf00      	nop
 800c754:	08014f0c 	.word	0x08014f0c
 800c758:	20008000 	.word	0x20008000
 800c75c:	200080b0 	.word	0x200080b0

0800c760 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800c760:	b570      	push	{r4, r5, r6, lr}
 800c762:	b086      	sub	sp, #24
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800c764:	2300      	movs	r3, #0
 800c766:	f8ad 3010 	strh.w	r3, [sp, #16]

    if( mlmeRequest == NULL )
 800c76a:	2800      	cmp	r0, #0
 800c76c:	f000 80ea 	beq.w	800c944 <LoRaMacMlmeRequest+0x1e4>
 800c770:	4605      	mov	r5, r0
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 800c772:	6103      	str	r3, [r0, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 800c774:	f7ff f920 	bl	800b9b8 <LoRaMacIsBusy>
 800c778:	b118      	cbz	r0, 800c782 <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 800c77a:	2401      	movs	r4, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 800c77c:	4620      	mov	r0, r4
 800c77e:	b006      	add	sp, #24
 800c780:	bd70      	pop	{r4, r5, r6, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800c782:	f000 fd49 	bl	800d218 <LoRaMacConfirmQueueIsFull>
 800c786:	b108      	cbz	r0, 800c78c <LoRaMacMlmeRequest+0x2c>
        return LORAMAC_STATUS_BUSY;
 800c788:	2401      	movs	r4, #1
 800c78a:	e7f7      	b.n	800c77c <LoRaMacMlmeRequest+0x1c>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800c78c:	f000 fd3e 	bl	800d20c <LoRaMacConfirmQueueGetCnt>
 800c790:	b308      	cbz	r0, 800c7d6 <LoRaMacMlmeRequest+0x76>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c792:	4b6d      	ldr	r3, [pc, #436]	; (800c948 <LoRaMacMlmeRequest+0x1e8>)
 800c794:	2101      	movs	r1, #1
 800c796:	f883 1459 	strb.w	r1, [r3, #1113]	; 0x459
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800c79a:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800c79e:	f042 0204 	orr.w	r2, r2, #4
 800c7a2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    queueElement.Request = mlmeRequest->Type;
 800c7a6:	782b      	ldrb	r3, [r5, #0]
 800c7a8:	f88d 3014 	strb.w	r3, [sp, #20]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c7ac:	f88d 1015 	strb.w	r1, [sp, #21]
    queueElement.RestrictCommonReadyToHandle = false;
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	f88d 2017 	strb.w	r2, [sp, #23]
    queueElement.ReadyToHandle = false;
 800c7b6:	f88d 2016 	strb.w	r2, [sp, #22]
    switch( mlmeRequest->Type )
 800c7ba:	461c      	mov	r4, r3
 800c7bc:	3b01      	subs	r3, #1
 800c7be:	2b0c      	cmp	r3, #12
 800c7c0:	f200 80a6 	bhi.w	800c910 <LoRaMacMlmeRequest+0x1b0>
 800c7c4:	e8df f003 	tbb	[pc, r3]
 800c7c8:	5aa4a40d 	.word	0x5aa4a40d
 800c7cc:	a4a4a464 	.word	0xa4a4a464
 800c7d0:	7695a46d 	.word	0x7695a46d
 800c7d4:	8c          	.byte	0x8c
 800c7d5:	00          	.byte	0x00
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800c7d6:	2214      	movs	r2, #20
 800c7d8:	2100      	movs	r1, #0
 800c7da:	485c      	ldr	r0, [pc, #368]	; (800c94c <LoRaMacMlmeRequest+0x1ec>)
 800c7dc:	f004 faef 	bl	8010dbe <memset1>
 800c7e0:	e7d7      	b.n	800c792 <LoRaMacMlmeRequest+0x32>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800c7e2:	4b59      	ldr	r3, [pc, #356]	; (800c948 <LoRaMacMlmeRequest+0x1e8>)
 800c7e4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800c7e8:	f013 0f20 	tst.w	r3, #32
 800c7ec:	d1c6      	bne.n	800c77c <LoRaMacMlmeRequest+0x1c>
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 800c7ee:	792b      	ldrb	r3, [r5, #4]
 800c7f0:	2b02      	cmp	r3, #2
 800c7f2:	d003      	beq.n	800c7fc <LoRaMacMlmeRequest+0x9c>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 800c7f4:	2b01      	cmp	r3, #1
 800c7f6:	d021      	beq.n	800c83c <LoRaMacMlmeRequest+0xdc>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800c7f8:	2402      	movs	r4, #2
 800c7fa:	e08a      	b.n	800c912 <LoRaMacMlmeRequest+0x1b2>
                ResetMacParameters( );
 800c7fc:	f7fe fe24 	bl	800b448 <ResetMacParameters>
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800c800:	4c53      	ldr	r4, [pc, #332]	; (800c950 <LoRaMacMlmeRequest+0x1f0>)
 800c802:	2200      	movs	r2, #0
 800c804:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800c808:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800c80c:	f001 fb1c 	bl	800de48 <RegionAlternateDr>
 800c810:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800c814:	2307      	movs	r3, #7
 800c816:	f88d 3015 	strb.w	r3, [sp, #21]
                status = SendReJoinReq( JOIN_REQ );
 800c81a:	20ff      	movs	r0, #255	; 0xff
 800c81c:	f7fe ff4a 	bl	800b6b4 <SendReJoinReq>
                if( status != LORAMAC_STATUS_OK )
 800c820:	4604      	mov	r4, r0
 800c822:	2800      	cmp	r0, #0
 800c824:	d075      	beq.n	800c912 <LoRaMacMlmeRequest+0x1b2>
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800c826:	4e4a      	ldr	r6, [pc, #296]	; (800c950 <LoRaMacMlmeRequest+0x1f0>)
 800c828:	2201      	movs	r2, #1
 800c82a:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800c82e:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 800c832:	f001 fb09 	bl	800de48 <RegionAlternateDr>
 800c836:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
 800c83a:	e06a      	b.n	800c912 <LoRaMacMlmeRequest+0x1b2>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800c83c:	4e44      	ldr	r6, [pc, #272]	; (800c950 <LoRaMacMlmeRequest+0x1f0>)
 800c83e:	2400      	movs	r4, #0
 800c840:	f886 4109 	strb.w	r4, [r6, #265]	; 0x109
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800c844:	2302      	movs	r3, #2
 800c846:	f88d 300c 	strb.w	r3, [sp, #12]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800c84a:	4669      	mov	r1, sp
 800c84c:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 800c850:	f001 fa30 	bl	800dcb4 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 800c854:	792b      	ldrb	r3, [r5, #4]
 800c856:	f886 311c 	strb.w	r3, [r6, #284]	; 0x11c
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800c85a:	f88d 4015 	strb.w	r4, [sp, #21]
                queueElement.ReadyToHandle = true;
 800c85e:	2301      	movs	r3, #1
 800c860:	f88d 3016 	strb.w	r3, [sp, #22]
                MacCtx.MacCallbacks->MacProcessNotify( );
 800c864:	4e38      	ldr	r6, [pc, #224]	; (800c948 <LoRaMacMlmeRequest+0x1e8>)
 800c866:	f8d6 3348 	ldr.w	r3, [r6, #840]	; 0x348
 800c86a:	691b      	ldr	r3, [r3, #16]
 800c86c:	4798      	blx	r3
                MacCtx.MacFlags.Bits.MacDone = 1;
 800c86e:	f896 3495 	ldrb.w	r3, [r6, #1173]	; 0x495
 800c872:	f043 0320 	orr.w	r3, r3, #32
 800c876:	f886 3495 	strb.w	r3, [r6, #1173]	; 0x495
                status = LORAMAC_STATUS_OK;
 800c87a:	e04a      	b.n	800c912 <LoRaMacMlmeRequest+0x1b2>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800c87c:	2200      	movs	r2, #0
 800c87e:	a904      	add	r1, sp, #16
 800c880:	2002      	movs	r0, #2
 800c882:	f000 fac1 	bl	800ce08 <LoRaMacCommandsAddCmd>
 800c886:	4604      	mov	r4, r0
 800c888:	2800      	cmp	r0, #0
 800c88a:	d042      	beq.n	800c912 <LoRaMacMlmeRequest+0x1b2>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800c88c:	2413      	movs	r4, #19
 800c88e:	e040      	b.n	800c912 <LoRaMacMlmeRequest+0x1b2>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800c890:	f995 200c 	ldrsb.w	r2, [r5, #12]
 800c894:	b2d2      	uxtb	r2, r2
 800c896:	68a9      	ldr	r1, [r5, #8]
 800c898:	88a8      	ldrh	r0, [r5, #4]
 800c89a:	f7fc ffe3 	bl	8009864 <SetTxContinuousWave>
 800c89e:	4604      	mov	r4, r0
            break;
 800c8a0:	e037      	b.n	800c912 <LoRaMacMlmeRequest+0x1b2>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	a904      	add	r1, sp, #16
 800c8a6:	200d      	movs	r0, #13
 800c8a8:	f000 faae 	bl	800ce08 <LoRaMacCommandsAddCmd>
 800c8ac:	4604      	mov	r4, r0
 800c8ae:	b380      	cbz	r0, 800c912 <LoRaMacMlmeRequest+0x1b2>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800c8b0:	2413      	movs	r4, #19
 800c8b2:	e02e      	b.n	800c912 <LoRaMacMlmeRequest+0x1b2>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800c8b4:	4b26      	ldr	r3, [pc, #152]	; (800c950 <LoRaMacMlmeRequest+0x1f0>)
 800c8b6:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800c8ba:	b10b      	cbz	r3, 800c8c0 <LoRaMacMlmeRequest+0x160>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800c8bc:	2402      	movs	r4, #2
 800c8be:	e028      	b.n	800c912 <LoRaMacMlmeRequest+0x1b2>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800c8c0:	792c      	ldrb	r4, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800c8c2:	f004 0007 	and.w	r0, r4, #7
 800c8c6:	f000 f9f6 	bl	800ccb6 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800c8ca:	f88d 4010 	strb.w	r4, [sp, #16]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800c8ce:	2201      	movs	r2, #1
 800c8d0:	a904      	add	r1, sp, #16
 800c8d2:	2010      	movs	r0, #16
 800c8d4:	f000 fa98 	bl	800ce08 <LoRaMacCommandsAddCmd>
 800c8d8:	4604      	mov	r4, r0
 800c8da:	b1d0      	cbz	r0, 800c912 <LoRaMacMlmeRequest+0x1b2>
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800c8dc:	2413      	movs	r4, #19
 800c8de:	e018      	b.n	800c912 <LoRaMacMlmeRequest+0x1b2>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	a904      	add	r1, sp, #16
 800c8e4:	2012      	movs	r0, #18
 800c8e6:	f000 fa8f 	bl	800ce08 <LoRaMacCommandsAddCmd>
 800c8ea:	4604      	mov	r4, r0
 800c8ec:	b188      	cbz	r0, 800c912 <LoRaMacMlmeRequest+0x1b2>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800c8ee:	2413      	movs	r4, #19
 800c8f0:	e00f      	b.n	800c912 <LoRaMacMlmeRequest+0x1b2>
            queueElement.RestrictCommonReadyToHandle = true;
 800c8f2:	2301      	movs	r3, #1
 800c8f4:	f88d 3017 	strb.w	r3, [sp, #23]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800c8f8:	f000 f9ce 	bl	800cc98 <LoRaMacClassBIsAcquisitionInProgress>
 800c8fc:	b108      	cbz	r0, 800c902 <LoRaMacMlmeRequest+0x1a2>
                status = LORAMAC_STATUS_BUSY;
 800c8fe:	2401      	movs	r4, #1
 800c900:	e007      	b.n	800c912 <LoRaMacMlmeRequest+0x1b2>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800c902:	f000 f9c6 	bl	800cc92 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800c906:	2000      	movs	r0, #0
 800c908:	f000 f9c8 	bl	800cc9c <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 800c90c:	2400      	movs	r4, #0
 800c90e:	e000      	b.n	800c912 <LoRaMacMlmeRequest+0x1b2>
    switch( mlmeRequest->Type )
 800c910:	2402      	movs	r4, #2
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800c912:	4b0d      	ldr	r3, [pc, #52]	; (800c948 <LoRaMacMlmeRequest+0x1e8>)
 800c914:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 800c918:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 800c91a:	b17c      	cbz	r4, 800c93c <LoRaMacMlmeRequest+0x1dc>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800c91c:	f000 fc76 	bl	800d20c <LoRaMacConfirmQueueGetCnt>
 800c920:	2800      	cmp	r0, #0
 800c922:	f47f af2b 	bne.w	800c77c <LoRaMacMlmeRequest+0x1c>
            MacCtx.NodeAckRequested = false;
 800c926:	4b08      	ldr	r3, [pc, #32]	; (800c948 <LoRaMacMlmeRequest+0x1e8>)
 800c928:	2100      	movs	r1, #0
 800c92a:	f883 141e 	strb.w	r1, [r3, #1054]	; 0x41e
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800c92e:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800c932:	f361 0282 	bfi	r2, r1, #2, #1
 800c936:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
 800c93a:	e71f      	b.n	800c77c <LoRaMacMlmeRequest+0x1c>
        LoRaMacConfirmQueueAdd( &queueElement );
 800c93c:	a805      	add	r0, sp, #20
 800c93e:	f000 fba1 	bl	800d084 <LoRaMacConfirmQueueAdd>
 800c942:	e71b      	b.n	800c77c <LoRaMacMlmeRequest+0x1c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c944:	2403      	movs	r4, #3
 800c946:	e719      	b.n	800c77c <LoRaMacMlmeRequest+0x1c>
 800c948:	20000820 	.word	0x20000820
 800c94c:	20000c78 	.word	0x20000c78
 800c950:	20008000 	.word	0x20008000

0800c954 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 800c954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c958:	b091      	sub	sp, #68	; 0x44
 800c95a:	9103      	str	r1, [sp, #12]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 800c95c:	2800      	cmp	r0, #0
 800c95e:	f000 80de 	beq.w	800cb1e <LoRaMacMcpsRequest+0x1ca>
 800c962:	f04f 0a00 	mov.w	sl, #0
 800c966:	4605      	mov	r5, r0
        }
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 800c968:	f8c0 a010 	str.w	sl, [r0, #16]

    if( LoRaMacIsBusy( ) == true )
 800c96c:	f7ff f824 	bl	800b9b8 <LoRaMacIsBusy>
 800c970:	4680      	mov	r8, r0
 800c972:	b118      	cbz	r0, 800c97c <LoRaMacMcpsRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 800c974:	2001      	movs	r0, #1

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 800c976:	b011      	add	sp, #68	; 0x44
 800c978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    McpsReq_t request = *mcpsRequest;
 800c97c:	ac06      	add	r4, sp, #24
 800c97e:	462e      	mov	r6, r5
 800c980:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c982:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c984:	f8c4 a000 	str.w	sl, [r4]
    macHdr.Value = 0;
 800c988:	4651      	mov	r1, sl
 800c98a:	f88d a030 	strb.w	sl, [sp, #48]	; 0x30
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800c98e:	4c66      	ldr	r4, [pc, #408]	; (800cb28 <LoRaMacMcpsRequest+0x1d4>)
 800c990:	2214      	movs	r2, #20
 800c992:	f204 4044 	addw	r0, r4, #1092	; 0x444
 800c996:	f004 fa12 	bl	8010dbe <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c99a:	2301      	movs	r3, #1
 800c99c:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800c9a0:	4b62      	ldr	r3, [pc, #392]	; (800cb2c <LoRaMacMcpsRequest+0x1d8>)
 800c9a2:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800c9a6:	2b02      	cmp	r3, #2
 800c9a8:	d065      	beq.n	800ca76 <LoRaMacMcpsRequest+0x122>
    switch( request.Type )
 800c9aa:	f89d 7018 	ldrb.w	r7, [sp, #24]
 800c9ae:	2f01      	cmp	r7, #1
 800c9b0:	f000 8086 	beq.w	800cac0 <LoRaMacMcpsRequest+0x16c>
 800c9b4:	2f03      	cmp	r7, #3
 800c9b6:	f000 8096 	beq.w	800cae6 <LoRaMacMcpsRequest+0x192>
 800c9ba:	2f00      	cmp	r7, #0
 800c9bc:	d06d      	beq.n	800ca9a <LoRaMacMcpsRequest+0x146>
 800c9be:	f04f 0b00 	mov.w	fp, #0
 800c9c2:	f8cd b014 	str.w	fp, [sp, #20]
 800c9c6:	f8cd b010 	str.w	fp, [sp, #16]
    getPhy.Attribute = PHY_MIN_TX_DR;
 800c9ca:	2302      	movs	r3, #2
 800c9cc:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800c9d0:	4e56      	ldr	r6, [pc, #344]	; (800cb2c <LoRaMacMcpsRequest+0x1d8>)
 800c9d2:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
 800c9d6:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c9da:	a90e      	add	r1, sp, #56	; 0x38
 800c9dc:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 800c9e0:	f001 f942 	bl	800dc68 <RegionGetPhyParam>
 800c9e4:	900d      	str	r0, [sp, #52]	; 0x34
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800c9e6:	b244      	sxtb	r4, r0
 800c9e8:	45a3      	cmp	fp, r4
 800c9ea:	bfb8      	it	lt
 800c9ec:	46a3      	movlt	fp, r4
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 800c9ee:	f896 9106 	ldrb.w	r9, [r6, #262]	; 0x106
 800c9f2:	f896 2109 	ldrb.w	r2, [r6, #265]	; 0x109
 800c9f6:	f896 111c 	ldrb.w	r1, [r6, #284]	; 0x11c
 800c9fa:	4648      	mov	r0, r9
 800c9fc:	f7fc ff04 	bl	8009808 <CheckForMinimumAbpDatarate>
 800ca00:	4603      	mov	r3, r0
 800ca02:	b900      	cbnz	r0, 800ca06 <LoRaMacMcpsRequest+0xb2>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800ca04:	465c      	mov	r4, fp
    if( readyToSend == true )
 800ca06:	f1b8 0f00 	cmp.w	r8, #0
 800ca0a:	f000 8082 	beq.w	800cb12 <LoRaMacMcpsRequest+0x1be>
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 800ca0e:	f1b9 0f00 	cmp.w	r9, #0
 800ca12:	d000      	beq.n	800ca16 <LoRaMacMcpsRequest+0xc2>
 800ca14:	b19b      	cbz	r3, 800ca3e <LoRaMacMcpsRequest+0xea>
            verify.DatarateParams.Datarate = datarate;
 800ca16:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ca1a:	4b44      	ldr	r3, [pc, #272]	; (800cb2c <LoRaMacMcpsRequest+0x1d8>)
 800ca1c:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800ca20:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800ca24:	2205      	movs	r2, #5
 800ca26:	a90b      	add	r1, sp, #44	; 0x2c
 800ca28:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ca2c:	f001 f950 	bl	800dcd0 <RegionVerify>
 800ca30:	2800      	cmp	r0, #0
 800ca32:	d076      	beq.n	800cb22 <LoRaMacMcpsRequest+0x1ce>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800ca34:	f99d 202c 	ldrsb.w	r2, [sp, #44]	; 0x2c
 800ca38:	4b3c      	ldr	r3, [pc, #240]	; (800cb2c <LoRaMacMcpsRequest+0x1d8>)
 800ca3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800ca3e:	4b3a      	ldr	r3, [pc, #232]	; (800cb28 <LoRaMacMcpsRequest+0x1d4>)
 800ca40:	f8d3 149c 	ldr.w	r1, [r3, #1180]	; 0x49c
 800ca44:	4b39      	ldr	r3, [pc, #228]	; (800cb2c <LoRaMacMcpsRequest+0x1d8>)
 800ca46:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800ca4a:	f7fe f81d 	bl	800aa88 <LoRaMacHandleResponseTimeout>
        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800ca4e:	9b03      	ldr	r3, [sp, #12]
 800ca50:	9300      	str	r3, [sp, #0]
 800ca52:	4653      	mov	r3, sl
 800ca54:	9a05      	ldr	r2, [sp, #20]
 800ca56:	9904      	ldr	r1, [sp, #16]
 800ca58:	a80c      	add	r0, sp, #48	; 0x30
 800ca5a:	f7fe ff19 	bl	800b890 <Send>
        if( status == LORAMAC_STATUS_OK )
 800ca5e:	2800      	cmp	r0, #0
 800ca60:	d152      	bne.n	800cb08 <LoRaMacMcpsRequest+0x1b4>
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 800ca62:	4b31      	ldr	r3, [pc, #196]	; (800cb28 <LoRaMacMcpsRequest+0x1d4>)
 800ca64:	f883 7444 	strb.w	r7, [r3, #1092]	; 0x444
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800ca68:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800ca6c:	f042 0201 	orr.w	r2, r2, #1
 800ca70:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
 800ca74:	e04e      	b.n	800cb14 <LoRaMacMcpsRequest+0x1c0>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800ca76:	4b2d      	ldr	r3, [pc, #180]	; (800cb2c <LoRaMacMcpsRequest+0x1d8>)
 800ca78:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800ca7c:	2b02      	cmp	r3, #2
 800ca7e:	d194      	bne.n	800c9aa <LoRaMacMcpsRequest+0x56>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800ca80:	4b2a      	ldr	r3, [pc, #168]	; (800cb2c <LoRaMacMcpsRequest+0x1d8>)
 800ca82:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d18f      	bne.n	800c9aa <LoRaMacMcpsRequest+0x56>
        ( request.Type == MCPS_UNCONFIRMED ) )
 800ca8a:	f89d 3018 	ldrb.w	r3, [sp, #24]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d18b      	bne.n	800c9aa <LoRaMacMcpsRequest+0x56>
        request.Type = MCPS_CONFIRMED;
 800ca92:	2301      	movs	r3, #1
 800ca94:	f88d 3018 	strb.w	r3, [sp, #24]
 800ca98:	e787      	b.n	800c9aa <LoRaMacMcpsRequest+0x56>
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800ca9a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800ca9e:	2202      	movs	r2, #2
 800caa0:	f362 1347 	bfi	r3, r2, #5, #3
 800caa4:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fPort = request.Req.Unconfirmed.fPort;
 800caa8:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800caac:	9304      	str	r3, [sp, #16]
            fBuffer = request.Req.Unconfirmed.fBuffer;
 800caae:	9b08      	ldr	r3, [sp, #32]
 800cab0:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 800cab2:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
            datarate = request.Req.Unconfirmed.Datarate;
 800cab6:	f99d b026 	ldrsb.w	fp, [sp, #38]	; 0x26
            readyToSend = true;
 800caba:	f04f 0801 	mov.w	r8, #1
            break;
 800cabe:	e784      	b.n	800c9ca <LoRaMacMcpsRequest+0x76>
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800cac0:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800cac4:	2204      	movs	r2, #4
 800cac6:	f362 1347 	bfi	r3, r2, #5, #3
 800caca:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fPort = request.Req.Confirmed.fPort;
 800cace:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800cad2:	9304      	str	r3, [sp, #16]
            fBuffer = request.Req.Confirmed.fBuffer;
 800cad4:	9b08      	ldr	r3, [sp, #32]
 800cad6:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Confirmed.fBufferSize;
 800cad8:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
            datarate = request.Req.Confirmed.Datarate;
 800cadc:	f99d b026 	ldrsb.w	fp, [sp, #38]	; 0x26
            readyToSend = true;
 800cae0:	f04f 0801 	mov.w	r8, #1
            break;
 800cae4:	e771      	b.n	800c9ca <LoRaMacMcpsRequest+0x76>
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800cae6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800caea:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800caee:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fBuffer = request.Req.Proprietary.fBuffer;
 800caf2:	9b07      	ldr	r3, [sp, #28]
 800caf4:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Proprietary.fBufferSize;
 800caf6:	f8bd a020 	ldrh.w	sl, [sp, #32]
            datarate = request.Req.Proprietary.Datarate;
 800cafa:	f99d b022 	ldrsb.w	fp, [sp, #34]	; 0x22
            readyToSend = true;
 800cafe:	f04f 0801 	mov.w	r8, #1
    uint8_t fPort = 0;
 800cb02:	2300      	movs	r3, #0
 800cb04:	9304      	str	r3, [sp, #16]
            break;
 800cb06:	e760      	b.n	800c9ca <LoRaMacMcpsRequest+0x76>
            MacCtx.NodeAckRequested = false;
 800cb08:	4b07      	ldr	r3, [pc, #28]	; (800cb28 <LoRaMacMcpsRequest+0x1d4>)
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
 800cb10:	e000      	b.n	800cb14 <LoRaMacMcpsRequest+0x1c0>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800cb12:	2002      	movs	r0, #2
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800cb14:	4b04      	ldr	r3, [pc, #16]	; (800cb28 <LoRaMacMcpsRequest+0x1d4>)
 800cb16:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 800cb1a:	612b      	str	r3, [r5, #16]
    return status;
 800cb1c:	e72b      	b.n	800c976 <LoRaMacMcpsRequest+0x22>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800cb1e:	2003      	movs	r0, #3
 800cb20:	e729      	b.n	800c976 <LoRaMacMcpsRequest+0x22>
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800cb22:	2003      	movs	r0, #3
 800cb24:	e727      	b.n	800c976 <LoRaMacMcpsRequest+0x22>
 800cb26:	bf00      	nop
 800cb28:	20000820 	.word	0x20000820
 800cb2c:	20008000 	.word	0x20008000

0800cb30 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800cb30:	b510      	push	{r4, lr}
 800cb32:	b082      	sub	sp, #8
 800cb34:	4604      	mov	r4, r0
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 800cb36:	f88d 0004 	strb.w	r0, [sp, #4]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800cb3a:	220f      	movs	r2, #15
 800cb3c:	a901      	add	r1, sp, #4
 800cb3e:	4b05      	ldr	r3, [pc, #20]	; (800cb54 <LoRaMacTestSetDutyCycleOn+0x24>)
 800cb40:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800cb44:	f001 f8c4 	bl	800dcd0 <RegionVerify>
 800cb48:	b110      	cbz	r0, 800cb50 <LoRaMacTestSetDutyCycleOn+0x20>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 800cb4a:	4b02      	ldr	r3, [pc, #8]	; (800cb54 <LoRaMacTestSetDutyCycleOn+0x24>)
 800cb4c:	f883 4108 	strb.w	r4, [r3, #264]	; 0x108
    }
}
 800cb50:	b002      	add	sp, #8
 800cb52:	bd10      	pop	{r4, pc}
 800cb54:	20008000 	.word	0x20008000

0800cb58 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 800cb58:	b538      	push	{r3, r4, r5, lr}
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 800cb5a:	f7ff f97b 	bl	800be54 <LoRaMacStop>
 800cb5e:	b110      	cbz	r0, 800cb66 <LoRaMacDeInitialization+0xe>
        // Return success
        return LORAMAC_STATUS_OK;
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 800cb60:	2401      	movs	r4, #1
    }
}
 800cb62:	4620      	mov	r0, r4
 800cb64:	bd38      	pop	{r3, r4, r5, pc}
 800cb66:	4604      	mov	r4, r0
        TimerStop( &MacCtx.TxDelayedTimer );
 800cb68:	4d0a      	ldr	r5, [pc, #40]	; (800cb94 <LoRaMacDeInitialization+0x3c>)
 800cb6a:	f505 705a 	add.w	r0, r5, #872	; 0x368
 800cb6e:	f006 fb0b 	bl	8013188 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 800cb72:	f505 7060 	add.w	r0, r5, #896	; 0x380
 800cb76:	f006 fb07 	bl	8013188 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 800cb7a:	f505 7066 	add.w	r0, r5, #920	; 0x398
 800cb7e:	f006 fb03 	bl	8013188 <UTIL_TIMER_Stop>
        LoRaMacClassBHaltBeaconing( );
 800cb82:	f000 f899 	bl	800ccb8 <LoRaMacClassBHaltBeaconing>
        ResetMacParameters( );
 800cb86:	f7fe fc5f 	bl	800b448 <ResetMacParameters>
        Radio.Sleep( );
 800cb8a:	4b03      	ldr	r3, [pc, #12]	; (800cb98 <LoRaMacDeInitialization+0x40>)
 800cb8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb8e:	4798      	blx	r3
        return LORAMAC_STATUS_OK;
 800cb90:	e7e7      	b.n	800cb62 <LoRaMacDeInitialization+0xa>
 800cb92:	bf00      	nop
 800cb94:	20000820 	.word	0x20000820
 800cb98:	08014f0c 	.word	0x08014f0c

0800cb9c <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 800cb9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cba0:	b08b      	sub	sp, #44	; 0x2c
 800cba2:	460f      	mov	r7, r1
 800cba4:	4616      	mov	r6, r2
 800cba6:	461d      	mov	r5, r3
    bool adrAckReq = false;
    int8_t datarate = adrNext->Datarate;
 800cba8:	f990 900c 	ldrsb.w	r9, [r0, #12]
    int8_t txPower = adrNext->TxPower;
 800cbac:	f990 a00d 	ldrsb.w	sl, [r0, #13]
    uint8_t nbTrans = adrNext->NbTrans;
 800cbb0:	f890 b00e 	ldrb.w	fp, [r0, #14]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 800cbb4:	6842      	ldr	r2, [r0, #4]
 800cbb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cbb8:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 800cbba:	f890 8001 	ldrb.w	r8, [r0, #1]
 800cbbe:	f1b8 0f00 	cmp.w	r8, #0
 800cbc2:	d109      	bne.n	800cbd8 <LoRaMacAdrCalcNext+0x3c>
                datarate = phyParam.Value;
            }
        }
    }

    *drOut = datarate;
 800cbc4:	f887 9000 	strb.w	r9, [r7]
    *txPowOut = txPower;
 800cbc8:	f886 a000 	strb.w	sl, [r6]
    *nbTransOut = nbTrans;
 800cbcc:	f885 b000 	strb.w	fp, [r5]
    return adrAckReq;
}
 800cbd0:	4640      	mov	r0, r8
 800cbd2:	b00b      	add	sp, #44	; 0x2c
 800cbd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbd8:	4604      	mov	r4, r0
        getPhy.Attribute = PHY_MIN_TX_DR;
 800cbda:	2302      	movs	r3, #2
 800cbdc:	f88d 3020 	strb.w	r3, [sp, #32]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800cbe0:	7bc3      	ldrb	r3, [r0, #15]
 800cbe2:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800cbe6:	a908      	add	r1, sp, #32
 800cbe8:	7c00      	ldrb	r0, [r0, #16]
 800cbea:	f001 f83d 	bl	800dc68 <RegionGetPhyParam>
 800cbee:	9007      	str	r0, [sp, #28]
        minTxDatarate = phyParam.Value;
 800cbf0:	b243      	sxtb	r3, r0
 800cbf2:	9301      	str	r3, [sp, #4]
        datarate = MAX( datarate, minTxDatarate );
 800cbf4:	454b      	cmp	r3, r9
 800cbf6:	bfb8      	it	lt
 800cbf8:	464b      	movlt	r3, r9
 800cbfa:	9300      	str	r3, [sp, #0]
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 800cbfc:	6862      	ldr	r2, [r4, #4]
 800cbfe:	8923      	ldrh	r3, [r4, #8]
 800cc00:	429a      	cmp	r2, r3
 800cc02:	d201      	bcs.n	800cc08 <LoRaMacAdrCalcNext+0x6c>
    bool adrAckReq = false;
 800cc04:	f04f 0800 	mov.w	r8, #0
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800cc08:	8961      	ldrh	r1, [r4, #10]
 800cc0a:	440b      	add	r3, r1
 800cc0c:	429a      	cmp	r2, r3
 800cc0e:	d224      	bcs.n	800cc5a <LoRaMacAdrCalcNext+0xbe>
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 800cc10:	6863      	ldr	r3, [r4, #4]
 800cc12:	8921      	ldrh	r1, [r4, #8]
 800cc14:	8962      	ldrh	r2, [r4, #10]
 800cc16:	eb01 0042 	add.w	r0, r1, r2, lsl #1
 800cc1a:	4283      	cmp	r3, r0
 800cc1c:	d332      	bcc.n	800cc84 <LoRaMacAdrCalcNext+0xe8>
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 800cc1e:	1a5b      	subs	r3, r3, r1
 800cc20:	fbb3 f1f2 	udiv	r1, r3, r2
 800cc24:	fb02 3311 	mls	r3, r2, r1, r3
 800cc28:	bb7b      	cbnz	r3, 800cc8a <LoRaMacAdrCalcNext+0xee>
                if( datarate == minTxDatarate )
 800cc2a:	9b01      	ldr	r3, [sp, #4]
 800cc2c:	4599      	cmp	r9, r3
 800cc2e:	dc03      	bgt.n	800cc38 <LoRaMacAdrCalcNext+0x9c>
                    if( adrNext->UpdateChanMask == true )
 800cc30:	7823      	ldrb	r3, [r4, #0]
 800cc32:	b9eb      	cbnz	r3, 800cc70 <LoRaMacAdrCalcNext+0xd4>
                    nbTrans = 1;
 800cc34:	f04f 0b01 	mov.w	fp, #1
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800cc38:	2321      	movs	r3, #33	; 0x21
 800cc3a:	f88d 3020 	strb.w	r3, [sp, #32]
                getPhy.Datarate = datarate;
 800cc3e:	9b00      	ldr	r3, [sp, #0]
 800cc40:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800cc44:	7be3      	ldrb	r3, [r4, #15]
 800cc46:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800cc4a:	a908      	add	r1, sp, #32
 800cc4c:	7c20      	ldrb	r0, [r4, #16]
 800cc4e:	f001 f80b 	bl	800dc68 <RegionGetPhyParam>
 800cc52:	9007      	str	r0, [sp, #28]
                datarate = phyParam.Value;
 800cc54:	fa4f f980 	sxtb.w	r9, r0
 800cc58:	e7b4      	b.n	800cbc4 <LoRaMacAdrCalcNext+0x28>
            getPhy.Attribute = PHY_DEF_TX_POWER;
 800cc5a:	230a      	movs	r3, #10
 800cc5c:	f88d 3020 	strb.w	r3, [sp, #32]
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800cc60:	a908      	add	r1, sp, #32
 800cc62:	7c20      	ldrb	r0, [r4, #16]
 800cc64:	f001 f800 	bl	800dc68 <RegionGetPhyParam>
 800cc68:	9007      	str	r0, [sp, #28]
            txPower = phyParam.Value;
 800cc6a:	fa4f fa80 	sxtb.w	sl, r0
 800cc6e:	e7cf      	b.n	800cc10 <LoRaMacAdrCalcNext+0x74>
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800cc70:	2302      	movs	r3, #2
 800cc72:	f88d 3018 	strb.w	r3, [sp, #24]
                        RegionInitDefaults( adrNext->Region, &params );
 800cc76:	a903      	add	r1, sp, #12
 800cc78:	7c20      	ldrb	r0, [r4, #16]
 800cc7a:	f001 f81b 	bl	800dcb4 <RegionInitDefaults>
                    nbTrans = 1;
 800cc7e:	f04f 0b01 	mov.w	fp, #1
 800cc82:	e7d9      	b.n	800cc38 <LoRaMacAdrCalcNext+0x9c>
        datarate = MAX( datarate, minTxDatarate );
 800cc84:	f8dd 9000 	ldr.w	r9, [sp]
 800cc88:	e79c      	b.n	800cbc4 <LoRaMacAdrCalcNext+0x28>
 800cc8a:	f8dd 9000 	ldr.w	r9, [sp]
 800cc8e:	e799      	b.n	800cbc4 <LoRaMacAdrCalcNext+0x28>

0800cc90 <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cc90:	4770      	bx	lr

0800cc92 <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cc92:	4770      	bx	lr

0800cc94 <LoRaMacClassBSetPingSlotState>:
void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cc94:	4770      	bx	lr

0800cc96 <LoRaMacClassBSetMulticastSlotState>:
void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cc96:	4770      	bx	lr

0800cc98 <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cc98:	2000      	movs	r0, #0
 800cc9a:	4770      	bx	lr

0800cc9c <LoRaMacClassBBeaconTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cc9c:	4770      	bx	lr

0800cc9e <LoRaMacClassBPingSlotTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cc9e:	4770      	bx	lr

0800cca0 <LoRaMacClassBMulticastSlotTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cca0:	4770      	bx	lr

0800cca2 <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cca2:	2000      	movs	r0, #0
 800cca4:	4770      	bx	lr

0800cca6 <LoRaMacClassBIsBeaconExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cca6:	2000      	movs	r0, #0
 800cca8:	4770      	bx	lr

0800ccaa <LoRaMacClassBIsPingExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ccaa:	2000      	movs	r0, #0
 800ccac:	4770      	bx	lr

0800ccae <LoRaMacClassBIsMulticastExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ccae:	2000      	movs	r0, #0
 800ccb0:	4770      	bx	lr

0800ccb2 <LoRaMacClassBIsBeaconModeActive>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ccb2:	2000      	movs	r0, #0
 800ccb4:	4770      	bx	lr

0800ccb6 <LoRaMacClassBSetPingSlotInfo>:
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ccb6:	4770      	bx	lr

0800ccb8 <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ccb8:	4770      	bx	lr

0800ccba <LoRaMacClassBResumeBeaconing>:
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ccba:	4770      	bx	lr

0800ccbc <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ccbc:	2002      	movs	r0, #2
 800ccbe:	4770      	bx	lr

0800ccc0 <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ccc0:	2002      	movs	r0, #2
 800ccc2:	4770      	bx	lr

0800ccc4 <LoRaMacMibClassBSetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ccc4:	2002      	movs	r0, #2
 800ccc6:	4770      	bx	lr

0800ccc8 <LoRaMacClassBPingSlotInfoAns>:
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ccc8:	4770      	bx	lr

0800ccca <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ccca:	2000      	movs	r0, #0
 800cccc:	4770      	bx	lr

0800ccce <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ccce:	4770      	bx	lr

0800ccd0 <LoRaMacClassBDeviceTimeAns>:
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ccd0:	4770      	bx	lr

0800ccd2 <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ccd2:	2000      	movs	r0, #0
 800ccd4:	4770      	bx	lr

0800ccd6 <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ccd6:	2000      	movs	r0, #0
 800ccd8:	4770      	bx	lr

0800ccda <LoRaMacClassBStopRxSlots>:
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ccda:	4770      	bx	lr

0800ccdc <LoRaMacClassBSetFPendingBit>:
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ccdc:	4770      	bx	lr

0800ccde <LoRaMacClassBProcess>:
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ccde:	4770      	bx	lr

0800cce0 <IsSlotFree>:
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
    uint8_t* mem = ( uint8_t* )slot;

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800cce0:	2300      	movs	r3, #0
 800cce2:	2b0f      	cmp	r3, #15
 800cce4:	d804      	bhi.n	800ccf0 <IsSlotFree+0x10>
    {
        if( mem[size] != 0x00 )
 800cce6:	5cc2      	ldrb	r2, [r0, r3]
 800cce8:	b922      	cbnz	r2, 800ccf4 <IsSlotFree+0x14>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800ccea:	3301      	adds	r3, #1
 800ccec:	b29b      	uxth	r3, r3
 800ccee:	e7f8      	b.n	800cce2 <IsSlotFree+0x2>
        {
            return false;
        }
    }
    return true;
 800ccf0:	2001      	movs	r0, #1
 800ccf2:	4770      	bx	lr
            return false;
 800ccf4:	2000      	movs	r0, #0
}
 800ccf6:	4770      	bx	lr

0800ccf8 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 800ccf8:	b538      	push	{r3, r4, r5, lr}
    uint8_t itr = 0;
 800ccfa:	2400      	movs	r4, #0

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800ccfc:	0125      	lsls	r5, r4, #4
 800ccfe:	f105 0308 	add.w	r3, r5, #8
 800cd02:	4d06      	ldr	r5, [pc, #24]	; (800cd1c <MallocNewMacCommandSlot+0x24>)
 800cd04:	441d      	add	r5, r3
 800cd06:	4628      	mov	r0, r5
 800cd08:	f7ff ffea 	bl	800cce0 <IsSlotFree>
 800cd0c:	b920      	cbnz	r0, 800cd18 <MallocNewMacCommandSlot+0x20>
    {
        itr++;
 800cd0e:	3401      	adds	r4, #1
 800cd10:	b2e4      	uxtb	r4, r4
        if( itr == NUM_OF_MAC_COMMANDS )
 800cd12:	2c20      	cmp	r4, #32
 800cd14:	d1f2      	bne.n	800ccfc <MallocNewMacCommandSlot+0x4>
        {
            return NULL;
 800cd16:	2500      	movs	r5, #0
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
}
 800cd18:	4628      	mov	r0, r5
 800cd1a:	bd38      	pop	{r3, r4, r5, pc}
 800cd1c:	20000de4 	.word	0x20000de4

0800cd20 <LinkedListInit>:
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
    if( list == NULL )
 800cd20:	b120      	cbz	r0, 800cd2c <LinkedListInit+0xc>
    {
        return false;
    }

    list->First = NULL;
 800cd22:	2200      	movs	r2, #0
 800cd24:	6002      	str	r2, [r0, #0]
    list->Last = NULL;
 800cd26:	6042      	str	r2, [r0, #4]

    return true;
 800cd28:	2001      	movs	r0, #1
 800cd2a:	4770      	bx	lr
        return false;
 800cd2c:	2000      	movs	r0, #0
}
 800cd2e:	4770      	bx	lr

0800cd30 <LinkedListAdd>:
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800cd30:	4603      	mov	r3, r0
 800cd32:	b160      	cbz	r0, 800cd4e <LinkedListAdd+0x1e>
 800cd34:	b169      	cbz	r1, 800cd52 <LinkedListAdd+0x22>
    {
        return false;
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 800cd36:	6802      	ldr	r2, [r0, #0]
 800cd38:	b13a      	cbz	r2, 800cd4a <LinkedListAdd+0x1a>
    {
        list->First = element;
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 800cd3a:	685a      	ldr	r2, [r3, #4]
 800cd3c:	b102      	cbz	r2, 800cd40 <LinkedListAdd+0x10>
    {
        list->Last->Next = element;
 800cd3e:	6011      	str	r1, [r2, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 800cd40:	2200      	movs	r2, #0
 800cd42:	600a      	str	r2, [r1, #0]

    // Update the last entry of the list.
    list->Last = element;
 800cd44:	6059      	str	r1, [r3, #4]

    return true;
 800cd46:	2001      	movs	r0, #1
 800cd48:	4770      	bx	lr
        list->First = element;
 800cd4a:	6001      	str	r1, [r0, #0]
 800cd4c:	e7f5      	b.n	800cd3a <LinkedListAdd+0xa>
        return false;
 800cd4e:	2000      	movs	r0, #0
 800cd50:	4770      	bx	lr
 800cd52:	2000      	movs	r0, #0
}
 800cd54:	4770      	bx	lr

0800cd56 <LinkedListGetPrevious>:
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800cd56:	b160      	cbz	r0, 800cd72 <LinkedListGetPrevious+0x1c>
 800cd58:	b161      	cbz	r1, 800cd74 <LinkedListGetPrevious+0x1e>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 800cd5a:	6800      	ldr	r0, [r0, #0]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 800cd5c:	4281      	cmp	r1, r0
 800cd5e:	d102      	bne.n	800cd66 <LinkedListGetPrevious+0x10>
            curElement = curElement->Next;
        }
    }
    else
    {
        curElement = NULL;
 800cd60:	2000      	movs	r0, #0
    }

    return curElement;
}
 800cd62:	4770      	bx	lr
            curElement = curElement->Next;
 800cd64:	4618      	mov	r0, r3
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800cd66:	2800      	cmp	r0, #0
 800cd68:	d0fb      	beq.n	800cd62 <LinkedListGetPrevious+0xc>
 800cd6a:	6803      	ldr	r3, [r0, #0]
 800cd6c:	428b      	cmp	r3, r1
 800cd6e:	d1f9      	bne.n	800cd64 <LinkedListGetPrevious+0xe>
 800cd70:	4770      	bx	lr
 800cd72:	4770      	bx	lr
        return NULL;
 800cd74:	4608      	mov	r0, r1
 800cd76:	4770      	bx	lr

0800cd78 <LinkedListRemove>:
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800cd78:	b1b8      	cbz	r0, 800cdaa <LinkedListRemove+0x32>
{
 800cd7a:	b538      	push	{r3, r4, r5, lr}
 800cd7c:	460c      	mov	r4, r1
 800cd7e:	4605      	mov	r5, r0
    if( ( list == NULL ) || ( element == NULL ) )
 800cd80:	b1a9      	cbz	r1, 800cdae <LinkedListRemove+0x36>
    {
        return false;
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 800cd82:	f7ff ffe8 	bl	800cd56 <LinkedListGetPrevious>

    if( list->First == element )
 800cd86:	682b      	ldr	r3, [r5, #0]
 800cd88:	42a3      	cmp	r3, r4
 800cd8a:	d009      	beq.n	800cda0 <LinkedListRemove+0x28>
    {
        list->First = element->Next;
    }

    if( list->Last == element )
 800cd8c:	686b      	ldr	r3, [r5, #4]
 800cd8e:	42a3      	cmp	r3, r4
 800cd90:	d009      	beq.n	800cda6 <LinkedListRemove+0x2e>
    {
        list->Last = PrevElement;
    }

    if( PrevElement != NULL )
 800cd92:	b108      	cbz	r0, 800cd98 <LinkedListRemove+0x20>
    {
        PrevElement->Next = element->Next;
 800cd94:	6823      	ldr	r3, [r4, #0]
 800cd96:	6003      	str	r3, [r0, #0]
    }

    element->Next = NULL;
 800cd98:	2300      	movs	r3, #0
 800cd9a:	6023      	str	r3, [r4, #0]

    return true;
 800cd9c:	2001      	movs	r0, #1
}
 800cd9e:	bd38      	pop	{r3, r4, r5, pc}
        list->First = element->Next;
 800cda0:	6823      	ldr	r3, [r4, #0]
 800cda2:	602b      	str	r3, [r5, #0]
 800cda4:	e7f2      	b.n	800cd8c <LinkedListRemove+0x14>
        list->Last = PrevElement;
 800cda6:	6068      	str	r0, [r5, #4]
 800cda8:	e7f3      	b.n	800cd92 <LinkedListRemove+0x1a>
        return false;
 800cdaa:	2000      	movs	r0, #0
}
 800cdac:	4770      	bx	lr
        return false;
 800cdae:	2000      	movs	r0, #0
 800cdb0:	e7f5      	b.n	800cd9e <LinkedListRemove+0x26>
	...

0800cdb4 <IsSticky>:
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
    switch( cid )
 800cdb4:	2811      	cmp	r0, #17
 800cdb6:	d808      	bhi.n	800cdca <IsSticky+0x16>
 800cdb8:	2301      	movs	r3, #1
 800cdba:	fa03 f000 	lsl.w	r0, r3, r0
 800cdbe:	4b04      	ldr	r3, [pc, #16]	; (800cdd0 <IsSticky+0x1c>)
 800cdc0:	4218      	tst	r0, r3
 800cdc2:	bf14      	ite	ne
 800cdc4:	2001      	movne	r0, #1
 800cdc6:	2000      	moveq	r0, #0
 800cdc8:	4770      	bx	lr
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
        default:
            return false;
 800cdca:	2000      	movs	r0, #0
    }
}
 800cdcc:	4770      	bx	lr
 800cdce:	bf00      	nop
 800cdd0:	00020720 	.word	0x00020720

0800cdd4 <FreeMacCommandSlot>:
    if( slot == NULL )
 800cdd4:	b130      	cbz	r0, 800cde4 <FreeMacCommandSlot+0x10>
{
 800cdd6:	b508      	push	{r3, lr}
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800cdd8:	2210      	movs	r2, #16
 800cdda:	2100      	movs	r1, #0
 800cddc:	f003 ffef 	bl	8010dbe <memset1>
    return true;
 800cde0:	2001      	movs	r0, #1
}
 800cde2:	bd08      	pop	{r3, pc}
        return false;
 800cde4:	2000      	movs	r0, #0
}
 800cde6:	4770      	bx	lr

0800cde8 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800cde8:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800cdea:	4c06      	ldr	r4, [pc, #24]	; (800ce04 <LoRaMacCommandsInit+0x1c>)
 800cdec:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800cdf0:	2100      	movs	r1, #0
 800cdf2:	4620      	mov	r0, r4
 800cdf4:	f003 ffe3 	bl	8010dbe <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 800cdf8:	4620      	mov	r0, r4
 800cdfa:	f7ff ff91 	bl	800cd20 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800cdfe:	2000      	movs	r0, #0
 800ce00:	bd10      	pop	{r4, pc}
 800ce02:	bf00      	nop
 800ce04:	20000de4 	.word	0x20000de4

0800ce08 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
    if( payload == NULL )
 800ce08:	b301      	cbz	r1, 800ce4c <LoRaMacCommandsAddCmd+0x44>
{
 800ce0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce0c:	4605      	mov	r5, r0
 800ce0e:	4614      	mov	r4, r2
 800ce10:	460f      	mov	r7, r1
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 800ce12:	f7ff ff71 	bl	800ccf8 <MallocNewMacCommandSlot>

    if( newCmd == NULL )
 800ce16:	4606      	mov	r6, r0
 800ce18:	b1d0      	cbz	r0, 800ce50 <LoRaMacCommandsAddCmd+0x48>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 800ce1a:	4601      	mov	r1, r0
 800ce1c:	480e      	ldr	r0, [pc, #56]	; (800ce58 <LoRaMacCommandsAddCmd+0x50>)
 800ce1e:	f7ff ff87 	bl	800cd30 <LinkedListAdd>
 800ce22:	b1b8      	cbz	r0, 800ce54 <LoRaMacCommandsAddCmd+0x4c>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 800ce24:	7135      	strb	r5, [r6, #4]
    newCmd->PayloadSize = payloadSize;
 800ce26:	60b4      	str	r4, [r6, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800ce28:	b2a2      	uxth	r2, r4
 800ce2a:	4639      	mov	r1, r7
 800ce2c:	1d70      	adds	r0, r6, #5
 800ce2e:	f003 ffae 	bl	8010d8e <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 800ce32:	4628      	mov	r0, r5
 800ce34:	f7ff ffbe 	bl	800cdb4 <IsSticky>
 800ce38:	7330      	strb	r0, [r6, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800ce3a:	4b07      	ldr	r3, [pc, #28]	; (800ce58 <LoRaMacCommandsAddCmd+0x50>)
 800ce3c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800ce40:	4414      	add	r4, r2
 800ce42:	3401      	adds	r4, #1
 800ce44:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 800ce48:	2000      	movs	r0, #0
}
 800ce4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800ce4c:	2001      	movs	r0, #1
}
 800ce4e:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800ce50:	2002      	movs	r0, #2
 800ce52:	e7fa      	b.n	800ce4a <LoRaMacCommandsAddCmd+0x42>
        return LORAMAC_COMMANDS_ERROR;
 800ce54:	2005      	movs	r0, #5
 800ce56:	e7f8      	b.n	800ce4a <LoRaMacCommandsAddCmd+0x42>
 800ce58:	20000de4 	.word	0x20000de4

0800ce5c <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
    if( macCmd == NULL )
 800ce5c:	b1a0      	cbz	r0, 800ce88 <LoRaMacCommandsRemoveCmd+0x2c>
{
 800ce5e:	b510      	push	{r4, lr}
 800ce60:	4604      	mov	r4, r0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 800ce62:	4601      	mov	r1, r0
 800ce64:	480b      	ldr	r0, [pc, #44]	; (800ce94 <LoRaMacCommandsRemoveCmd+0x38>)
 800ce66:	f7ff ff87 	bl	800cd78 <LinkedListRemove>
 800ce6a:	b178      	cbz	r0, 800ce8c <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800ce6c:	68a1      	ldr	r1, [r4, #8]
 800ce6e:	4a09      	ldr	r2, [pc, #36]	; (800ce94 <LoRaMacCommandsRemoveCmd+0x38>)
 800ce70:	f8d2 3208 	ldr.w	r3, [r2, #520]	; 0x208
 800ce74:	1a5b      	subs	r3, r3, r1
 800ce76:	3b01      	subs	r3, #1
 800ce78:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 800ce7c:	4620      	mov	r0, r4
 800ce7e:	f7ff ffa9 	bl	800cdd4 <FreeMacCommandSlot>
 800ce82:	b128      	cbz	r0, 800ce90 <LoRaMacCommandsRemoveCmd+0x34>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800ce84:	2000      	movs	r0, #0
}
 800ce86:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800ce88:	2001      	movs	r0, #1
}
 800ce8a:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800ce8c:	2003      	movs	r0, #3
 800ce8e:	e7fa      	b.n	800ce86 <LoRaMacCommandsRemoveCmd+0x2a>
        return LORAMAC_COMMANDS_ERROR;
 800ce90:	2005      	movs	r0, #5
 800ce92:	e7f8      	b.n	800ce86 <LoRaMacCommandsRemoveCmd+0x2a>
 800ce94:	20000de4 	.word	0x20000de4

0800ce98 <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800ce98:	4b0a      	ldr	r3, [pc, #40]	; (800cec4 <LoRaMacCommandsRemoveNoneStickyCmds+0x2c>)
 800ce9a:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800ce9c:	b120      	cbz	r0, 800cea8 <LoRaMacCommandsRemoveNoneStickyCmds+0x10>
    {
        if( curElement->IsSticky == false )
 800ce9e:	7b03      	ldrb	r3, [r0, #12]
 800cea0:	b11b      	cbz	r3, 800ceaa <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
            curElement = nexElement;
        }
        else
        {
            curElement = curElement->Next;
 800cea2:	6800      	ldr	r0, [r0, #0]
 800cea4:	e7fa      	b.n	800ce9c <LoRaMacCommandsRemoveNoneStickyCmds+0x4>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800cea6:	bd10      	pop	{r4, pc}
 800cea8:	4770      	bx	lr
{
 800ceaa:	b510      	push	{r4, lr}
            nexElement = curElement->Next;
 800ceac:	6804      	ldr	r4, [r0, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 800ceae:	f7ff ffd5 	bl	800ce5c <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 800ceb2:	4620      	mov	r0, r4
    while( curElement != NULL )
 800ceb4:	2800      	cmp	r0, #0
 800ceb6:	d0f6      	beq.n	800cea6 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        if( curElement->IsSticky == false )
 800ceb8:	7b03      	ldrb	r3, [r0, #12]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d0f6      	beq.n	800ceac <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
            curElement = curElement->Next;
 800cebe:	6800      	ldr	r0, [r0, #0]
 800cec0:	e7f8      	b.n	800ceb4 <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>
 800cec2:	bf00      	nop
 800cec4:	20000de4 	.word	0x20000de4

0800cec8 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800cec8:	b538      	push	{r3, r4, r5, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800ceca:	4b08      	ldr	r3, [pc, #32]	; (800ceec <LoRaMacCommandsRemoveStickyAnsCmds+0x24>)
 800cecc:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800cece:	e000      	b.n	800ced2 <LoRaMacCommandsRemoveStickyAnsCmds+0xa>
{
 800ced0:	462c      	mov	r4, r5
    while( curElement != NULL )
 800ced2:	b14c      	cbz	r4, 800cee8 <LoRaMacCommandsRemoveStickyAnsCmds+0x20>
    {
        nexElement = curElement->Next;
 800ced4:	6825      	ldr	r5, [r4, #0]
        if( IsSticky( curElement->CID ) == true )
 800ced6:	7920      	ldrb	r0, [r4, #4]
 800ced8:	f7ff ff6c 	bl	800cdb4 <IsSticky>
 800cedc:	2800      	cmp	r0, #0
 800cede:	d0f7      	beq.n	800ced0 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 800cee0:	4620      	mov	r0, r4
 800cee2:	f7ff ffbb 	bl	800ce5c <LoRaMacCommandsRemoveCmd>
 800cee6:	e7f3      	b.n	800ced0 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800cee8:	2000      	movs	r0, #0
 800ceea:	bd38      	pop	{r3, r4, r5, pc}
 800ceec:	20000de4 	.word	0x20000de4

0800cef0 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 800cef0:	b128      	cbz	r0, 800cefe <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
 800cef2:	4a04      	ldr	r2, [pc, #16]	; (800cf04 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800cef4:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 800cef8:	6002      	str	r2, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800cefa:	2000      	movs	r0, #0
 800cefc:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800cefe:	2001      	movs	r0, #1
}
 800cf00:	4770      	bx	lr
 800cf02:	bf00      	nop
 800cf04:	20000de4 	.word	0x20000de4

0800cf08 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800cf08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800cf0c:	4b16      	ldr	r3, [pc, #88]	; (800cf68 <LoRaMacCommandsSerializeCmds+0x60>)
 800cf0e:	681c      	ldr	r4, [r3, #0]
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800cf10:	b32a      	cbz	r2, 800cf5e <LoRaMacCommandsSerializeCmds+0x56>
 800cf12:	4607      	mov	r7, r0
 800cf14:	4688      	mov	r8, r1
 800cf16:	4616      	mov	r6, r2
 800cf18:	b319      	cbz	r1, 800cf62 <LoRaMacCommandsSerializeCmds+0x5a>
    uint8_t itr = 0;
 800cf1a:	2100      	movs	r1, #0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800cf1c:	b194      	cbz	r4, 800cf44 <LoRaMacCommandsSerializeCmds+0x3c>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800cf1e:	1a7a      	subs	r2, r7, r1
 800cf20:	68a3      	ldr	r3, [r4, #8]
 800cf22:	3301      	adds	r3, #1
 800cf24:	429a      	cmp	r2, r3
 800cf26:	d30d      	bcc.n	800cf44 <LoRaMacCommandsSerializeCmds+0x3c>
        {
            buffer[itr++] = curElement->CID;
 800cf28:	1c4d      	adds	r5, r1, #1
 800cf2a:	b2ed      	uxtb	r5, r5
 800cf2c:	7923      	ldrb	r3, [r4, #4]
 800cf2e:	5473      	strb	r3, [r6, r1]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800cf30:	8922      	ldrh	r2, [r4, #8]
 800cf32:	1d61      	adds	r1, r4, #5
 800cf34:	1970      	adds	r0, r6, r5
 800cf36:	f003 ff2a 	bl	8010d8e <memcpy1>
            itr += curElement->PayloadSize;
 800cf3a:	68a3      	ldr	r3, [r4, #8]
 800cf3c:	441d      	add	r5, r3
 800cf3e:	b2e9      	uxtb	r1, r5
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 800cf40:	6824      	ldr	r4, [r4, #0]
 800cf42:	e7eb      	b.n	800cf1c <LoRaMacCommandsSerializeCmds+0x14>
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 800cf44:	b12c      	cbz	r4, 800cf52 <LoRaMacCommandsSerializeCmds+0x4a>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 800cf46:	6825      	ldr	r5, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800cf48:	4620      	mov	r0, r4
 800cf4a:	f7ff ff87 	bl	800ce5c <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 800cf4e:	462c      	mov	r4, r5
 800cf50:	e7f8      	b.n	800cf44 <LoRaMacCommandsSerializeCmds+0x3c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800cf52:	4640      	mov	r0, r8
 800cf54:	f7ff ffcc 	bl	800cef0 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800cf58:	2000      	movs	r0, #0
}
 800cf5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800cf5e:	2001      	movs	r0, #1
 800cf60:	e7fb      	b.n	800cf5a <LoRaMacCommandsSerializeCmds+0x52>
 800cf62:	2001      	movs	r0, #1
 800cf64:	e7f9      	b.n	800cf5a <LoRaMacCommandsSerializeCmds+0x52>
 800cf66:	bf00      	nop
 800cf68:	20000de4 	.word	0x20000de4

0800cf6c <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
    if( cmdsPending == NULL )
 800cf6c:	4601      	mov	r1, r0
 800cf6e:	b170      	cbz	r0, 800cf8e <LoRaMacCommandsStickyCmdsPending+0x22>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 800cf70:	4b08      	ldr	r3, [pc, #32]	; (800cf94 <LoRaMacCommandsStickyCmdsPending+0x28>)
 800cf72:	681b      	ldr	r3, [r3, #0]

    *cmdsPending = false;
 800cf74:	2200      	movs	r2, #0
 800cf76:	7002      	strb	r2, [r0, #0]

    // Loop through all elements
    while( curElement != NULL )
 800cf78:	b13b      	cbz	r3, 800cf8a <LoRaMacCommandsStickyCmdsPending+0x1e>
    {
        if( curElement->IsSticky == true )
 800cf7a:	7b1a      	ldrb	r2, [r3, #12]
 800cf7c:	b90a      	cbnz	r2, 800cf82 <LoRaMacCommandsStickyCmdsPending+0x16>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
            return LORAMAC_COMMANDS_SUCCESS;
        }
        curElement = curElement->Next;
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	e7fa      	b.n	800cf78 <LoRaMacCommandsStickyCmdsPending+0xc>
            *cmdsPending = true;
 800cf82:	2301      	movs	r3, #1
 800cf84:	700b      	strb	r3, [r1, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 800cf86:	2000      	movs	r0, #0
 800cf88:	4770      	bx	lr
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800cf8a:	2000      	movs	r0, #0
 800cf8c:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800cf8e:	2001      	movs	r0, #1
}
 800cf90:	4770      	bx	lr
 800cf92:	bf00      	nop
 800cf94:	20000de4 	.word	0x20000de4

0800cf98 <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800cf98:	1e83      	subs	r3, r0, #2
 800cf9a:	2b11      	cmp	r3, #17
 800cf9c:	d80a      	bhi.n	800cfb4 <LoRaMacCommandsGetCmdSize+0x1c>
 800cf9e:	e8df f003 	tbb	[pc, r3]
 800cfa2:	0b23      	.short	0x0b23
 800cfa4:	110f240d 	.word	0x110f240d
 800cfa8:	09171513 	.word	0x09171513
 800cfac:	09091909 	.word	0x09091909
 800cfb0:	211f1d1b 	.word	0x211f1d1b
 800cfb4:	2000      	movs	r0, #0
 800cfb6:	4770      	bx	lr
            break;
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 800cfb8:	2005      	movs	r0, #5
            break;
 800cfba:	4770      	bx	lr
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 800cfbc:	2002      	movs	r0, #2
            break;
 800cfbe:	4770      	bx	lr
            break;
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 800cfc0:	2001      	movs	r0, #1
            break;
 800cfc2:	4770      	bx	lr
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 800cfc4:	2006      	movs	r0, #6
            break;
 800cfc6:	4770      	bx	lr
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 800cfc8:	2002      	movs	r0, #2
            break;
 800cfca:	4770      	bx	lr
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 800cfcc:	2002      	movs	r0, #2
            break;
 800cfce:	4770      	bx	lr
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 800cfd0:	2005      	movs	r0, #5
            break;
 800cfd2:	4770      	bx	lr
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 800cfd4:	2006      	movs	r0, #6
            break;
 800cfd6:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 800cfd8:	2001      	movs	r0, #1
            break;
 800cfda:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 800cfdc:	2005      	movs	r0, #5
            break;
 800cfde:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 800cfe0:	2004      	movs	r0, #4
            break;
 800cfe2:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 800cfe4:	2004      	movs	r0, #4
            break;
 800cfe6:	4770      	bx	lr
            cidSize = 3;
 800cfe8:	2003      	movs	r0, #3
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800cfea:	4770      	bx	lr

0800cfec <IncreaseBufferPointer>:
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800cfec:	4b03      	ldr	r3, [pc, #12]	; (800cffc <IncreaseBufferPointer+0x10>)
 800cfee:	4298      	cmp	r0, r3
 800cff0:	d001      	beq.n	800cff6 <IncreaseBufferPointer+0xa>
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
    }
    else
    {
        // Increase
        bufferPointer++;
 800cff2:	3004      	adds	r0, #4
 800cff4:	4770      	bx	lr
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800cff6:	4802      	ldr	r0, [pc, #8]	; (800d000 <IncreaseBufferPointer+0x14>)
    }
    return bufferPointer;
}
 800cff8:	4770      	bx	lr
 800cffa:	bf00      	nop
 800cffc:	2000100c 	.word	0x2000100c
 800d000:	20000ffc 	.word	0x20000ffc

0800d004 <IsListEmpty>:
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
    if( count == 0 )
 800d004:	b108      	cbz	r0, 800d00a <IsListEmpty+0x6>
    {
        return true;
    }
    return false;
 800d006:	2000      	movs	r0, #0
 800d008:	4770      	bx	lr
        return true;
 800d00a:	2001      	movs	r0, #1
}
 800d00c:	4770      	bx	lr

0800d00e <IsListFull>:

static bool IsListFull( uint8_t count )
{
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800d00e:	2804      	cmp	r0, #4
 800d010:	d801      	bhi.n	800d016 <IsListFull+0x8>
    {
        return true;
    }
    return false;
 800d012:	2000      	movs	r0, #0
 800d014:	4770      	bx	lr
        return true;
 800d016:	2001      	movs	r0, #1
}
 800d018:	4770      	bx	lr
	...

0800d01c <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 800d01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d01e:	4606      	mov	r6, r0
 800d020:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800d022:	4b0d      	ldr	r3, [pc, #52]	; (800d058 <GetElement+0x3c>)
 800d024:	f893 7020 	ldrb.w	r7, [r3, #32]
 800d028:	4638      	mov	r0, r7
 800d02a:	f7ff ffeb 	bl	800d004 <IsListEmpty>
 800d02e:	b970      	cbnz	r0, 800d04e <GetElement+0x32>
    {
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800d030:	2500      	movs	r5, #0
 800d032:	42af      	cmp	r7, r5
 800d034:	d909      	bls.n	800d04a <GetElement+0x2e>
    {
        if( element->Request == request )
 800d036:	7823      	ldrb	r3, [r4, #0]
 800d038:	42b3      	cmp	r3, r6
 800d03a:	d00a      	beq.n	800d052 <GetElement+0x36>
        {
            // We have found the element
            return element;
        }
        element = IncreaseBufferPointer( element );
 800d03c:	4620      	mov	r0, r4
 800d03e:	f7ff ffd5 	bl	800cfec <IncreaseBufferPointer>
 800d042:	4604      	mov	r4, r0
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800d044:	3501      	adds	r5, #1
 800d046:	b2ed      	uxtb	r5, r5
 800d048:	e7f3      	b.n	800d032 <GetElement+0x16>
    }

    return NULL;
 800d04a:	2000      	movs	r0, #0
}
 800d04c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
 800d04e:	2000      	movs	r0, #0
 800d050:	e7fc      	b.n	800d04c <GetElement+0x30>
            return element;
 800d052:	4620      	mov	r0, r4
 800d054:	e7fa      	b.n	800d04c <GetElement+0x30>
 800d056:	bf00      	nop
 800d058:	20000ff0 	.word	0x20000ff0

0800d05c <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 800d05c:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800d05e:	4c08      	ldr	r4, [pc, #32]	; (800d080 <LoRaMacConfirmQueueInit+0x24>)
 800d060:	6020      	str	r0, [r4, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800d062:	2300      	movs	r3, #0
 800d064:	f884 3020 	strb.w	r3, [r4, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800d068:	f104 000c 	add.w	r0, r4, #12
 800d06c:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800d06e:	60a0      	str	r0, [r4, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800d070:	2214      	movs	r2, #20
 800d072:	21ff      	movs	r1, #255	; 0xff
 800d074:	f003 fea3 	bl	8010dbe <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d078:	2301      	movs	r3, #1
 800d07a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800d07e:	bd10      	pop	{r4, pc}
 800d080:	20000ff0 	.word	0x20000ff0

0800d084 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800d084:	b538      	push	{r3, r4, r5, lr}
 800d086:	4605      	mov	r5, r0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800d088:	4b0f      	ldr	r3, [pc, #60]	; (800d0c8 <LoRaMacConfirmQueueAdd+0x44>)
 800d08a:	f893 0020 	ldrb.w	r0, [r3, #32]
 800d08e:	f7ff ffbe 	bl	800d00e <IsListFull>
 800d092:	b9b8      	cbnz	r0, 800d0c4 <LoRaMacConfirmQueueAdd+0x40>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800d094:	4c0c      	ldr	r4, [pc, #48]	; (800d0c8 <LoRaMacConfirmQueueAdd+0x44>)
 800d096:	68a3      	ldr	r3, [r4, #8]
 800d098:	782a      	ldrb	r2, [r5, #0]
 800d09a:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800d09c:	68a3      	ldr	r3, [r4, #8]
 800d09e:	786a      	ldrb	r2, [r5, #1]
 800d0a0:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800d0a2:	68a3      	ldr	r3, [r4, #8]
 800d0a4:	78ea      	ldrb	r2, [r5, #3]
 800d0a6:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 800d0a8:	68a3      	ldr	r3, [r4, #8]
 800d0aa:	78aa      	ldrb	r2, [r5, #2]
 800d0ac:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800d0ae:	f894 3020 	ldrb.w	r3, [r4, #32]
 800d0b2:	3301      	adds	r3, #1
 800d0b4:	f884 3020 	strb.w	r3, [r4, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800d0b8:	68a0      	ldr	r0, [r4, #8]
 800d0ba:	f7ff ff97 	bl	800cfec <IncreaseBufferPointer>
 800d0be:	60a0      	str	r0, [r4, #8]

    return true;
 800d0c0:	2001      	movs	r0, #1
}
 800d0c2:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800d0c4:	2000      	movs	r0, #0
 800d0c6:	e7fc      	b.n	800d0c2 <LoRaMacConfirmQueueAdd+0x3e>
 800d0c8:	20000ff0 	.word	0x20000ff0

0800d0cc <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800d0cc:	b538      	push	{r3, r4, r5, lr}
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800d0ce:	4b09      	ldr	r3, [pc, #36]	; (800d0f4 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800d0d0:	f893 4020 	ldrb.w	r4, [r3, #32]
 800d0d4:	4620      	mov	r0, r4
 800d0d6:	f7ff ff95 	bl	800d004 <IsListEmpty>
 800d0da:	b948      	cbnz	r0, 800d0f0 <LoRaMacConfirmQueueRemoveFirst+0x24>
    {
        return false;
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800d0dc:	4d05      	ldr	r5, [pc, #20]	; (800d0f4 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800d0de:	3c01      	subs	r4, #1
 800d0e0:	f885 4020 	strb.w	r4, [r5, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800d0e4:	6868      	ldr	r0, [r5, #4]
 800d0e6:	f7ff ff81 	bl	800cfec <IncreaseBufferPointer>
 800d0ea:	6068      	str	r0, [r5, #4]

    return true;
 800d0ec:	2001      	movs	r0, #1
}
 800d0ee:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800d0f0:	2000      	movs	r0, #0
 800d0f2:	e7fc      	b.n	800d0ee <LoRaMacConfirmQueueRemoveFirst+0x22>
 800d0f4:	20000ff0 	.word	0x20000ff0

0800d0f8 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800d0f8:	b538      	push	{r3, r4, r5, lr}
 800d0fa:	4605      	mov	r5, r0
 800d0fc:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800d0fe:	4b08      	ldr	r3, [pc, #32]	; (800d120 <LoRaMacConfirmQueueSetStatus+0x28>)
 800d100:	f893 0020 	ldrb.w	r0, [r3, #32]
 800d104:	f7ff ff7e 	bl	800d004 <IsListEmpty>
 800d108:	b948      	cbnz	r0, 800d11e <LoRaMacConfirmQueueSetStatus+0x26>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800d10a:	4b05      	ldr	r3, [pc, #20]	; (800d120 <LoRaMacConfirmQueueSetStatus+0x28>)
 800d10c:	689a      	ldr	r2, [r3, #8]
 800d10e:	6859      	ldr	r1, [r3, #4]
 800d110:	4620      	mov	r0, r4
 800d112:	f7ff ff83 	bl	800d01c <GetElement>
        if( element != NULL )
 800d116:	b110      	cbz	r0, 800d11e <LoRaMacConfirmQueueSetStatus+0x26>
        {
            element->Status = status;
 800d118:	7045      	strb	r5, [r0, #1]
            element->ReadyToHandle = true;
 800d11a:	2201      	movs	r2, #1
 800d11c:	7082      	strb	r2, [r0, #2]
        }
    }
}
 800d11e:	bd38      	pop	{r3, r4, r5, pc}
 800d120:	20000ff0 	.word	0x20000ff0

0800d124 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800d124:	b510      	push	{r4, lr}
 800d126:	4604      	mov	r4, r0
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800d128:	4b09      	ldr	r3, [pc, #36]	; (800d150 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800d12a:	f893 0020 	ldrb.w	r0, [r3, #32]
 800d12e:	f7ff ff69 	bl	800d004 <IsListEmpty>
 800d132:	b940      	cbnz	r0, 800d146 <LoRaMacConfirmQueueGetStatus+0x22>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800d134:	4b06      	ldr	r3, [pc, #24]	; (800d150 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800d136:	689a      	ldr	r2, [r3, #8]
 800d138:	6859      	ldr	r1, [r3, #4]
 800d13a:	4620      	mov	r0, r4
 800d13c:	f7ff ff6e 	bl	800d01c <GetElement>
        if( element != NULL )
 800d140:	b118      	cbz	r0, 800d14a <LoRaMacConfirmQueueGetStatus+0x26>
        {
            return element->Status;
 800d142:	7840      	ldrb	r0, [r0, #1]
 800d144:	e000      	b.n	800d148 <LoRaMacConfirmQueueGetStatus+0x24>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d146:	2001      	movs	r0, #1
}
 800d148:	bd10      	pop	{r4, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d14a:	2001      	movs	r0, #1
 800d14c:	e7fc      	b.n	800d148 <LoRaMacConfirmQueueGetStatus+0x24>
 800d14e:	bf00      	nop
 800d150:	20000ff0 	.word	0x20000ff0

0800d154 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800d154:	b538      	push	{r3, r4, r5, lr}
 800d156:	4605      	mov	r5, r0
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800d158:	4b0c      	ldr	r3, [pc, #48]	; (800d18c <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800d15a:	685c      	ldr	r4, [r3, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 800d15c:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800d160:	f893 0020 	ldrb.w	r0, [r3, #32]
 800d164:	f7ff ff4e 	bl	800d004 <IsListEmpty>
 800d168:	b150      	cbz	r0, 800d180 <LoRaMacConfirmQueueSetStatusCmn+0x2c>
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
    }
}
 800d16a:	bd38      	pop	{r3, r4, r5, pc}
                element->ReadyToHandle = true;
 800d16c:	2301      	movs	r3, #1
 800d16e:	70a3      	strb	r3, [r4, #2]
            element = IncreaseBufferPointer( element );
 800d170:	4620      	mov	r0, r4
 800d172:	f7ff ff3b 	bl	800cfec <IncreaseBufferPointer>
 800d176:	4604      	mov	r4, r0
        }while( element != ConfirmQueueCtx.BufferEnd );
 800d178:	4b04      	ldr	r3, [pc, #16]	; (800d18c <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800d17a:	689b      	ldr	r3, [r3, #8]
 800d17c:	4283      	cmp	r3, r0
 800d17e:	d0f4      	beq.n	800d16a <LoRaMacConfirmQueueSetStatusCmn+0x16>
            element->Status = status;
 800d180:	7065      	strb	r5, [r4, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800d182:	78e3      	ldrb	r3, [r4, #3]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d1f3      	bne.n	800d170 <LoRaMacConfirmQueueSetStatusCmn+0x1c>
 800d188:	e7f0      	b.n	800d16c <LoRaMacConfirmQueueSetStatusCmn+0x18>
 800d18a:	bf00      	nop
 800d18c:	20000ff0 	.word	0x20000ff0

0800d190 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 800d190:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800d192:	4b04      	ldr	r3, [pc, #16]	; (800d1a4 <LoRaMacConfirmQueueIsCmdActive+0x14>)
 800d194:	689a      	ldr	r2, [r3, #8]
 800d196:	6859      	ldr	r1, [r3, #4]
 800d198:	f7ff ff40 	bl	800d01c <GetElement>
 800d19c:	b100      	cbz	r0, 800d1a0 <LoRaMacConfirmQueueIsCmdActive+0x10>
    {
        return true;
 800d19e:	2001      	movs	r0, #1
    }
    return false;
}
 800d1a0:	bd08      	pop	{r3, pc}
 800d1a2:	bf00      	nop
 800d1a4:	20000ff0 	.word	0x20000ff0

0800d1a8 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800d1a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1aa:	b083      	sub	sp, #12
 800d1ac:	4606      	mov	r6, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800d1ae:	4b16      	ldr	r3, [pc, #88]	; (800d208 <LoRaMacConfirmQueueHandleCb+0x60>)
 800d1b0:	f893 7020 	ldrb.w	r7, [r3, #32]
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 800d1b4:	2400      	movs	r4, #0
 800d1b6:	e00d      	b.n	800d1d4 <LoRaMacConfirmQueueHandleCb+0x2c>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800d1b8:	781a      	ldrb	r2, [r3, #0]
 800d1ba:	f88d 2004 	strb.w	r2, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800d1be:	785a      	ldrb	r2, [r3, #1]
 800d1c0:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800d1c4:	78db      	ldrb	r3, [r3, #3]
 800d1c6:	f88d 3007 	strb.w	r3, [sp, #7]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 800d1ca:	f7ff ff7f 	bl	800d0cc <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 800d1ce:	b1a5      	cbz	r5, 800d1fa <LoRaMacConfirmQueueHandleCb+0x52>
    for( uint8_t i = 0; i < nbElements; i++ )
 800d1d0:	3401      	adds	r4, #1
 800d1d2:	b2e4      	uxtb	r4, r4
 800d1d4:	42bc      	cmp	r4, r7
 800d1d6:	d214      	bcs.n	800d202 <LoRaMacConfirmQueueHandleCb+0x5a>
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800d1d8:	4b0b      	ldr	r3, [pc, #44]	; (800d208 <LoRaMacConfirmQueueHandleCb+0x60>)
 800d1da:	685a      	ldr	r2, [r3, #4]
 800d1dc:	7812      	ldrb	r2, [r2, #0]
 800d1de:	7032      	strb	r2, [r6, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800d1e0:	685a      	ldr	r2, [r3, #4]
 800d1e2:	7852      	ldrb	r2, [r2, #1]
 800d1e4:	7072      	strb	r2, [r6, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800d1e6:	685b      	ldr	r3, [r3, #4]
 800d1e8:	789d      	ldrb	r5, [r3, #2]
        if( readyToHandle == true )
 800d1ea:	2d00      	cmp	r5, #0
 800d1ec:	d0e4      	beq.n	800d1b8 <LoRaMacConfirmQueueHandleCb+0x10>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800d1ee:	4b06      	ldr	r3, [pc, #24]	; (800d208 <LoRaMacConfirmQueueHandleCb+0x60>)
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	689b      	ldr	r3, [r3, #8]
 800d1f4:	4630      	mov	r0, r6
 800d1f6:	4798      	blx	r3
 800d1f8:	e7e7      	b.n	800d1ca <LoRaMacConfirmQueueHandleCb+0x22>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800d1fa:	a801      	add	r0, sp, #4
 800d1fc:	f7ff ff42 	bl	800d084 <LoRaMacConfirmQueueAdd>
 800d200:	e7e6      	b.n	800d1d0 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 800d202:	b003      	add	sp, #12
 800d204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d206:	bf00      	nop
 800d208:	20000ff0 	.word	0x20000ff0

0800d20c <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
}
 800d20c:	4b01      	ldr	r3, [pc, #4]	; (800d214 <LoRaMacConfirmQueueGetCnt+0x8>)
 800d20e:	f893 0020 	ldrb.w	r0, [r3, #32]
 800d212:	4770      	bx	lr
 800d214:	20000ff0 	.word	0x20000ff0

0800d218 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 800d218:	b508      	push	{r3, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800d21a:	4b03      	ldr	r3, [pc, #12]	; (800d228 <LoRaMacConfirmQueueIsFull+0x10>)
 800d21c:	f893 0020 	ldrb.w	r0, [r3, #32]
 800d220:	f7ff fef5 	bl	800d00e <IsListFull>
    }
    else
    {
        return false;
    }
}
 800d224:	bd08      	pop	{r3, pc}
 800d226:	bf00      	nop
 800d228:	20000ff0 	.word	0x20000ff0

0800d22c <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 800d22c:	b410      	push	{r4}
 800d22e:	9c01      	ldr	r4, [sp, #4]
 800d230:	9902      	ldr	r1, [sp, #8]
 800d232:	9a03      	ldr	r2, [sp, #12]
    if( b0 == 0 )
 800d234:	b1da      	cbz	r2, 800d26e <PrepareB0+0x42>
 800d236:	4684      	mov	ip, r0
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    b0[0] = 0x49;
 800d238:	2049      	movs	r0, #73	; 0x49
 800d23a:	7010      	strb	r0, [r2, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 800d23c:	2000      	movs	r0, #0
 800d23e:	7050      	strb	r0, [r2, #1]
        b0[2] = 0x00;
 800d240:	7090      	strb	r0, [r2, #2]
    }

    b0[3] = 0x00;
 800d242:	70d0      	strb	r0, [r2, #3]
    b0[4] = 0x00;
 800d244:	7110      	strb	r0, [r2, #4]

    b0[5] = dir;
 800d246:	7153      	strb	r3, [r2, #5]

    b0[6] = devAddr & 0xFF;
 800d248:	7194      	strb	r4, [r2, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800d24a:	0a23      	lsrs	r3, r4, #8
 800d24c:	71d3      	strb	r3, [r2, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800d24e:	0c23      	lsrs	r3, r4, #16
 800d250:	7213      	strb	r3, [r2, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800d252:	0e24      	lsrs	r4, r4, #24
 800d254:	7254      	strb	r4, [r2, #9]

    b0[10] = fCnt & 0xFF;
 800d256:	7291      	strb	r1, [r2, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800d258:	0a0b      	lsrs	r3, r1, #8
 800d25a:	72d3      	strb	r3, [r2, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800d25c:	0c0b      	lsrs	r3, r1, #16
 800d25e:	7313      	strb	r3, [r2, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800d260:	0e09      	lsrs	r1, r1, #24
 800d262:	7351      	strb	r1, [r2, #13]

    b0[14] = 0x00;
 800d264:	7390      	strb	r0, [r2, #14]

    b0[15] = msgLen & 0xFF;
 800d266:	f882 c00f 	strb.w	ip, [r2, #15]

    return LORAMAC_CRYPTO_SUCCESS;
}
 800d26a:	bc10      	pop	{r4}
 800d26c:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d26e:	2009      	movs	r0, #9
 800d270:	e7fb      	b.n	800d26a <PrepareB0+0x3e>
	...

0800d274 <GetKeyAddrItem>:
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800d274:	2300      	movs	r3, #0
 800d276:	2b01      	cmp	r3, #1
 800d278:	d80e      	bhi.n	800d298 <GetKeyAddrItem+0x24>
    {
        if( KeyAddrList[i].AddrID == addrID )
 800d27a:	469c      	mov	ip, r3
 800d27c:	4a07      	ldr	r2, [pc, #28]	; (800d29c <GetKeyAddrItem+0x28>)
 800d27e:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 800d282:	4282      	cmp	r2, r0
 800d284:	d002      	beq.n	800d28c <GetKeyAddrItem+0x18>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800d286:	3301      	adds	r3, #1
 800d288:	b2db      	uxtb	r3, r3
 800d28a:	e7f4      	b.n	800d276 <GetKeyAddrItem+0x2>
        {
            *item = &( KeyAddrList[i] );
 800d28c:	4b03      	ldr	r3, [pc, #12]	; (800d29c <GetKeyAddrItem+0x28>)
 800d28e:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 800d292:	600b      	str	r3, [r1, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 800d294:	2000      	movs	r0, #0
 800d296:	4770      	bx	lr
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800d298:	200b      	movs	r0, #11
}
 800d29a:	4770      	bx	lr
 800d29c:	20000100 	.word	0x20000100

0800d2a0 <GetLastFcntDown>:
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
    if( lastDown == NULL )
 800d2a0:	460b      	mov	r3, r1
 800d2a2:	2900      	cmp	r1, #0
 800d2a4:	d024      	beq.n	800d2f0 <GetLastFcntDown+0x50>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 800d2a6:	3801      	subs	r0, #1
 800d2a8:	2803      	cmp	r0, #3
 800d2aa:	d823      	bhi.n	800d2f4 <GetLastFcntDown+0x54>
 800d2ac:	e8df f000 	tbb	[pc, r0]
 800d2b0:	1a120a02 	.word	0x1a120a02
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 800d2b4:	4a10      	ldr	r2, [pc, #64]	; (800d2f8 <GetLastFcntDown+0x58>)
 800d2b6:	6812      	ldr	r2, [r2, #0]
 800d2b8:	6911      	ldr	r1, [r2, #16]
 800d2ba:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 800d2bc:	6913      	ldr	r3, [r2, #16]
 800d2be:	6213      	str	r3, [r2, #32]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800d2c0:	2000      	movs	r0, #0
            break;
 800d2c2:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 800d2c4:	4a0c      	ldr	r2, [pc, #48]	; (800d2f8 <GetLastFcntDown+0x58>)
 800d2c6:	6812      	ldr	r2, [r2, #0]
 800d2c8:	6951      	ldr	r1, [r2, #20]
 800d2ca:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 800d2cc:	6953      	ldr	r3, [r2, #20]
 800d2ce:	6213      	str	r3, [r2, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800d2d0:	2000      	movs	r0, #0
            break;
 800d2d2:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.FCntDown;
 800d2d4:	4a08      	ldr	r2, [pc, #32]	; (800d2f8 <GetLastFcntDown+0x58>)
 800d2d6:	6812      	ldr	r2, [r2, #0]
 800d2d8:	6991      	ldr	r1, [r2, #24]
 800d2da:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800d2dc:	6993      	ldr	r3, [r2, #24]
 800d2de:	6213      	str	r3, [r2, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800d2e0:	2000      	movs	r0, #0
            break;
 800d2e2:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800d2e4:	4a04      	ldr	r2, [pc, #16]	; (800d2f8 <GetLastFcntDown+0x58>)
 800d2e6:	6812      	ldr	r2, [r2, #0]
 800d2e8:	69d2      	ldr	r2, [r2, #28]
 800d2ea:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800d2ec:	2000      	movs	r0, #0
            break;
 800d2ee:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d2f0:	2009      	movs	r0, #9
 800d2f2:	4770      	bx	lr
    switch( fCntID )
 800d2f4:	2005      	movs	r0, #5
}
 800d2f6:	4770      	bx	lr
 800d2f8:	20001014 	.word	0x20001014

0800d2fc <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 800d2fc:	b510      	push	{r4, lr}
 800d2fe:	b082      	sub	sp, #8
 800d300:	460c      	mov	r4, r1
    uint32_t lastDown = 0;
 800d302:	2300      	movs	r3, #0
 800d304:	9301      	str	r3, [sp, #4]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800d306:	a901      	add	r1, sp, #4
 800d308:	f7ff ffca 	bl	800d2a0 <GetLastFcntDown>
 800d30c:	b948      	cbnz	r0, 800d322 <CheckFCntDown+0x26>
    {
        return false;
    }
    if( ( currentDown > lastDown ) ||
 800d30e:	9b01      	ldr	r3, [sp, #4]
 800d310:	42a3      	cmp	r3, r4
 800d312:	d309      	bcc.n	800d328 <CheckFCntDown+0x2c>
 800d314:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d318:	d001      	beq.n	800d31e <CheckFCntDown+0x22>
    {
        return true;
    }
    else
    {
        return false;
 800d31a:	2000      	movs	r0, #0
 800d31c:	e002      	b.n	800d324 <CheckFCntDown+0x28>
        return true;
 800d31e:	2001      	movs	r0, #1
 800d320:	e000      	b.n	800d324 <CheckFCntDown+0x28>
        return false;
 800d322:	2000      	movs	r0, #0
    }
}
 800d324:	b002      	add	sp, #8
 800d326:	bd10      	pop	{r4, pc}
        return true;
 800d328:	2001      	movs	r0, #1
 800d32a:	e7fb      	b.n	800d324 <CheckFCntDown+0x28>

0800d32c <UpdateFCntDown>:
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
    switch( fCntID )
 800d32c:	3801      	subs	r0, #1
 800d32e:	2803      	cmp	r0, #3
 800d330:	d812      	bhi.n	800d358 <UpdateFCntDown+0x2c>
 800d332:	e8df f000 	tbb	[pc, r0]
 800d336:	0602      	.short	0x0602
 800d338:	0e0a      	.short	0x0e0a
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 800d33a:	4b08      	ldr	r3, [pc, #32]	; (800d35c <UpdateFCntDown+0x30>)
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	6119      	str	r1, [r3, #16]
            break;
 800d340:	4770      	bx	lr
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 800d342:	4b06      	ldr	r3, [pc, #24]	; (800d35c <UpdateFCntDown+0x30>)
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	6159      	str	r1, [r3, #20]
            break;
 800d348:	4770      	bx	lr
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 800d34a:	4b04      	ldr	r3, [pc, #16]	; (800d35c <UpdateFCntDown+0x30>)
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	6199      	str	r1, [r3, #24]
            break;
 800d350:	4770      	bx	lr
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800d352:	4b02      	ldr	r3, [pc, #8]	; (800d35c <UpdateFCntDown+0x30>)
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	61d9      	str	r1, [r3, #28]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
    }
}
 800d358:	4770      	bx	lr
 800d35a:	bf00      	nop
 800d35c:	20001014 	.word	0x20001014

0800d360 <ResetFCnts>:
/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
    CryptoNvm->FCntList.FCntUp = 0;
 800d360:	4b0a      	ldr	r3, [pc, #40]	; (800d38c <ResetFCnts+0x2c>)
 800d362:	681a      	ldr	r2, [r3, #0]
 800d364:	2300      	movs	r3, #0
 800d366:	60d3      	str	r3, [r2, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800d368:	f04f 31ff 	mov.w	r1, #4294967295
 800d36c:	6111      	str	r1, [r2, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800d36e:	6151      	str	r1, [r2, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800d370:	6191      	str	r1, [r2, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800d372:	6211      	str	r1, [r2, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d374:	2b00      	cmp	r3, #0
 800d376:	dd00      	ble.n	800d37a <ResetFCnts+0x1a>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
    }
}
 800d378:	4770      	bx	lr
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 800d37a:	1d99      	adds	r1, r3, #6
 800d37c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800d380:	f04f 30ff 	mov.w	r0, #4294967295
 800d384:	6048      	str	r0, [r1, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d386:	3301      	adds	r3, #1
 800d388:	e7f4      	b.n	800d374 <ResetFCnts+0x14>
 800d38a:	bf00      	nop
 800d38c:	20001014 	.word	0x20001014

0800d390 <ComputeCmacB0>:
{
 800d390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d394:	b088      	sub	sp, #32
 800d396:	9e11      	ldr	r6, [sp, #68]	; 0x44
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800d398:	b1f0      	cbz	r0, 800d3d8 <ComputeCmacB0+0x48>
 800d39a:	460c      	mov	r4, r1
 800d39c:	4615      	mov	r5, r2
 800d39e:	461a      	mov	r2, r3
 800d3a0:	4680      	mov	r8, r0
 800d3a2:	b1de      	cbz	r6, 800d3dc <ComputeCmacB0+0x4c>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800d3a4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800d3a8:	d81a      	bhi.n	800d3e0 <ComputeCmacB0+0x50>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800d3aa:	af04      	add	r7, sp, #16
 800d3ac:	9702      	str	r7, [sp, #8]
 800d3ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d3b0:	9301      	str	r3, [sp, #4]
 800d3b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d3b4:	9300      	str	r3, [sp, #0]
 800d3b6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800d3ba:	4629      	mov	r1, r5
 800d3bc:	4620      	mov	r0, r4
 800d3be:	f7ff ff35 	bl	800d22c <PrepareB0>
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800d3c2:	9600      	str	r6, [sp, #0]
 800d3c4:	462b      	mov	r3, r5
 800d3c6:	4622      	mov	r2, r4
 800d3c8:	4641      	mov	r1, r8
 800d3ca:	4638      	mov	r0, r7
 800d3cc:	f003 fb87 	bl	8010ade <SecureElementComputeAesCmac>
 800d3d0:	b940      	cbnz	r0, 800d3e4 <ComputeCmacB0+0x54>
}
 800d3d2:	b008      	add	sp, #32
 800d3d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d3d8:	2009      	movs	r0, #9
 800d3da:	e7fa      	b.n	800d3d2 <ComputeCmacB0+0x42>
 800d3dc:	2009      	movs	r0, #9
 800d3de:	e7f8      	b.n	800d3d2 <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800d3e0:	200d      	movs	r0, #13
 800d3e2:	e7f6      	b.n	800d3d2 <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d3e4:	200e      	movs	r0, #14
 800d3e6:	e7f4      	b.n	800d3d2 <ComputeCmacB0+0x42>

0800d3e8 <DeriveSessionKey10x>:
{
 800d3e8:	b510      	push	{r4, lr}
 800d3ea:	b084      	sub	sp, #16
    uint8_t compBase[16] = { 0 };
 800d3ec:	2400      	movs	r4, #0
 800d3ee:	9400      	str	r4, [sp, #0]
 800d3f0:	9401      	str	r4, [sp, #4]
 800d3f2:	9402      	str	r4, [sp, #8]
 800d3f4:	9403      	str	r4, [sp, #12]
    switch( keyID )
 800d3f6:	2802      	cmp	r0, #2
 800d3f8:	d003      	beq.n	800d402 <DeriveSessionKey10x+0x1a>
 800d3fa:	2803      	cmp	r0, #3
 800d3fc:	d025      	beq.n	800d44a <DeriveSessionKey10x+0x62>
 800d3fe:	200a      	movs	r0, #10
 800d400:	e021      	b.n	800d446 <DeriveSessionKey10x+0x5e>
            compBase[0] = 0x01;
 800d402:	2401      	movs	r4, #1
 800d404:	f88d 4000 	strb.w	r4, [sp]
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 800d408:	f88d 1001 	strb.w	r1, [sp, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800d40c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800d410:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 800d414:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800d418:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 800d41c:	f88d 2004 	strb.w	r2, [sp, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 800d420:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800d424:	f88d 1005 	strb.w	r1, [sp, #5]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 800d428:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800d42c:	f88d 2006 	strb.w	r2, [sp, #6]
    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 800d430:	f88d 3007 	strb.w	r3, [sp, #7]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 800d434:	0a1b      	lsrs	r3, r3, #8
 800d436:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800d43a:	4602      	mov	r2, r0
 800d43c:	2101      	movs	r1, #1
 800d43e:	4668      	mov	r0, sp
 800d440:	f003 fbec 	bl	8010c1c <SecureElementDeriveAndStoreKey>
 800d444:	b928      	cbnz	r0, 800d452 <DeriveSessionKey10x+0x6a>
}
 800d446:	b004      	add	sp, #16
 800d448:	bd10      	pop	{r4, pc}
            compBase[0] = 0x02;
 800d44a:	2402      	movs	r4, #2
 800d44c:	f88d 4000 	strb.w	r4, [sp]
            break;
 800d450:	e7da      	b.n	800d408 <DeriveSessionKey10x+0x20>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d452:	200e      	movs	r0, #14
 800d454:	e7f7      	b.n	800d446 <DeriveSessionKey10x+0x5e>

0800d456 <PayloadEncrypt>:
{
 800d456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d45a:	b088      	sub	sp, #32
 800d45c:	4690      	mov	r8, r2
 800d45e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    if( buffer == 0 )
 800d460:	2800      	cmp	r0, #0
 800d462:	d052      	beq.n	800d50a <PayloadEncrypt+0xb4>
 800d464:	460d      	mov	r5, r1
 800d466:	4604      	mov	r4, r0
    uint8_t sBlock[16] = { 0 };
 800d468:	2600      	movs	r6, #0
 800d46a:	9604      	str	r6, [sp, #16]
 800d46c:	9605      	str	r6, [sp, #20]
 800d46e:	9606      	str	r6, [sp, #24]
 800d470:	9607      	str	r6, [sp, #28]
    uint8_t aBlock[16] = { 0 };
 800d472:	9600      	str	r6, [sp, #0]
 800d474:	9601      	str	r6, [sp, #4]
 800d476:	9602      	str	r6, [sp, #8]
 800d478:	9603      	str	r6, [sp, #12]
    aBlock[0] = 0x01;
 800d47a:	2701      	movs	r7, #1
 800d47c:	f88d 7000 	strb.w	r7, [sp]
    aBlock[5] = dir;
 800d480:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800d484:	f88d 1005 	strb.w	r1, [sp, #5]
    aBlock[6] = address & 0xFF;
 800d488:	f88d 3006 	strb.w	r3, [sp, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800d48c:	0a19      	lsrs	r1, r3, #8
 800d48e:	f88d 1007 	strb.w	r1, [sp, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800d492:	0c19      	lsrs	r1, r3, #16
 800d494:	f88d 1008 	strb.w	r1, [sp, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800d498:	0e1b      	lsrs	r3, r3, #24
 800d49a:	f88d 3009 	strb.w	r3, [sp, #9]
    aBlock[10] = frameCounter & 0xFF;
 800d49e:	f88d 200a 	strb.w	r2, [sp, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800d4a2:	0a13      	lsrs	r3, r2, #8
 800d4a4:	f88d 300b 	strb.w	r3, [sp, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800d4a8:	0c13      	lsrs	r3, r2, #16
 800d4aa:	f88d 300c 	strb.w	r3, [sp, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800d4ae:	0e12      	lsrs	r2, r2, #24
 800d4b0:	f88d 200d 	strb.w	r2, [sp, #13]
    while( size > 0 )
 800d4b4:	e014      	b.n	800d4e0 <PayloadEncrypt+0x8a>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800d4b6:	18f2      	adds	r2, r6, r3
 800d4b8:	5ca0      	ldrb	r0, [r4, r2]
 800d4ba:	f103 0120 	add.w	r1, r3, #32
 800d4be:	4469      	add	r1, sp
 800d4c0:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 800d4c4:	4048      	eors	r0, r1
 800d4c6:	54a0      	strb	r0, [r4, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800d4c8:	3301      	adds	r3, #1
 800d4ca:	b2db      	uxtb	r3, r3
 800d4cc:	462a      	mov	r2, r5
 800d4ce:	2d10      	cmp	r5, #16
 800d4d0:	bfa8      	it	ge
 800d4d2:	2210      	movge	r2, #16
 800d4d4:	4293      	cmp	r3, r2
 800d4d6:	dbee      	blt.n	800d4b6 <PayloadEncrypt+0x60>
        size -= 16;
 800d4d8:	3d10      	subs	r5, #16
 800d4da:	b22d      	sxth	r5, r5
        bufferIndex += 16;
 800d4dc:	3610      	adds	r6, #16
 800d4de:	b2f6      	uxtb	r6, r6
    while( size > 0 )
 800d4e0:	2d00      	cmp	r5, #0
 800d4e2:	dd0e      	ble.n	800d502 <PayloadEncrypt+0xac>
        aBlock[15] = ctr & 0xFF;
 800d4e4:	f88d 700f 	strb.w	r7, [sp, #15]
        ctr++;
 800d4e8:	3701      	adds	r7, #1
 800d4ea:	b2bf      	uxth	r7, r7
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800d4ec:	ab04      	add	r3, sp, #16
 800d4ee:	4642      	mov	r2, r8
 800d4f0:	2110      	movs	r1, #16
 800d4f2:	4668      	mov	r0, sp
 800d4f4:	f003 fb18 	bl	8010b28 <SecureElementAesEncrypt>
 800d4f8:	4603      	mov	r3, r0
 800d4fa:	2800      	cmp	r0, #0
 800d4fc:	d0e6      	beq.n	800d4cc <PayloadEncrypt+0x76>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d4fe:	200e      	movs	r0, #14
 800d500:	e000      	b.n	800d504 <PayloadEncrypt+0xae>
    return LORAMAC_CRYPTO_SUCCESS;
 800d502:	2000      	movs	r0, #0
}
 800d504:	b008      	add	sp, #32
 800d506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d50a:	2009      	movs	r0, #9
 800d50c:	e7fa      	b.n	800d504 <PayloadEncrypt+0xae>

0800d50e <VerifyCmacB0>:
    if( msg == 0 )
 800d50e:	b370      	cbz	r0, 800d56e <VerifyCmacB0+0x60>
{
 800d510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d514:	b0c8      	sub	sp, #288	; 0x120
 800d516:	460c      	mov	r4, r1
 800d518:	4615      	mov	r5, r2
 800d51a:	461e      	mov	r6, r3
 800d51c:	4680      	mov	r8, r0
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800d51e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800d522:	d826      	bhi.n	800d572 <VerifyCmacB0+0x64>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800d524:	af04      	add	r7, sp, #16
 800d526:	f44f 7288 	mov.w	r2, #272	; 0x110
 800d52a:	2100      	movs	r1, #0
 800d52c:	4638      	mov	r0, r7
 800d52e:	f003 fc46 	bl	8010dbe <memset1>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800d532:	9702      	str	r7, [sp, #8]
 800d534:	9b50      	ldr	r3, [sp, #320]	; 0x140
 800d536:	9301      	str	r3, [sp, #4]
 800d538:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 800d53a:	9300      	str	r3, [sp, #0]
 800d53c:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
 800d540:	4632      	mov	r2, r6
 800d542:	4629      	mov	r1, r5
 800d544:	4620      	mov	r0, r4
 800d546:	f7ff fe71 	bl	800d22c <PrepareB0>
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800d54a:	4622      	mov	r2, r4
 800d54c:	4641      	mov	r1, r8
 800d54e:	a808      	add	r0, sp, #32
 800d550:	f003 fc1d 	bl	8010d8e <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800d554:	f104 0110 	add.w	r1, r4, #16
 800d558:	462b      	mov	r3, r5
 800d55a:	9a51      	ldr	r2, [sp, #324]	; 0x144
 800d55c:	b289      	uxth	r1, r1
 800d55e:	4638      	mov	r0, r7
 800d560:	f003 facc 	bl	8010afc <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800d564:	b130      	cbz	r0, 800d574 <VerifyCmacB0+0x66>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800d566:	2801      	cmp	r0, #1
 800d568:	d004      	beq.n	800d574 <VerifyCmacB0+0x66>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d56a:	200e      	movs	r0, #14
 800d56c:	e002      	b.n	800d574 <VerifyCmacB0+0x66>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d56e:	2009      	movs	r0, #9
}
 800d570:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800d572:	200d      	movs	r0, #13
}
 800d574:	b048      	add	sp, #288	; 0x120
 800d576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800d57c <LoRaMacCryptoInit>:
/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
    if( nvm == NULL )
 800d57c:	b188      	cbz	r0, 800d5a2 <LoRaMacCryptoInit+0x26>
{
 800d57e:	b510      	push	{r4, lr}
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 800d580:	4c09      	ldr	r4, [pc, #36]	; (800d5a8 <LoRaMacCryptoInit+0x2c>)
 800d582:	6020      	str	r0, [r4, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800d584:	2228      	movs	r2, #40	; 0x28
 800d586:	2100      	movs	r1, #0
 800d588:	f003 fc19 	bl	8010dbe <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 800d58c:	6823      	ldr	r3, [r4, #0]
 800d58e:	2201      	movs	r2, #1
 800d590:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 800d592:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 800d594:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800d596:	2400      	movs	r4, #0
 800d598:	701c      	strb	r4, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 800d59a:	f7ff fee1 	bl	800d360 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 800d59e:	4620      	mov	r0, r4
}
 800d5a0:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
 800d5a2:	2008      	movs	r0, #8
}
 800d5a4:	4770      	bx	lr
 800d5a6:	bf00      	nop
 800d5a8:	20001014 	.word	0x20001014

0800d5ac <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoNvm->LrWanVersion = version;
 800d5ac:	4b02      	ldr	r3, [pc, #8]	; (800d5b8 <LoRaMacCryptoSetLrWanVersion+0xc>)
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
 800d5b2:	2000      	movs	r0, #0
 800d5b4:	4770      	bx	lr
 800d5b6:	bf00      	nop
 800d5b8:	20001014 	.word	0x20001014

0800d5bc <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
 800d5bc:	b130      	cbz	r0, 800d5cc <LoRaMacCryptoGetFCntUp+0x10>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 800d5be:	4b04      	ldr	r3, [pc, #16]	; (800d5d0 <LoRaMacCryptoGetFCntUp+0x14>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	68db      	ldr	r3, [r3, #12]
 800d5c4:	3301      	adds	r3, #1
 800d5c6:	6003      	str	r3, [r0, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800d5c8:	2000      	movs	r0, #0
 800d5ca:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d5cc:	2009      	movs	r0, #9
}
 800d5ce:	4770      	bx	lr
 800d5d0:	20001014 	.word	0x20001014

0800d5d4 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 800d5d4:	b530      	push	{r4, r5, lr}
 800d5d6:	b083      	sub	sp, #12
    uint32_t lastDown = 0;
 800d5d8:	2300      	movs	r3, #0
 800d5da:	9301      	str	r3, [sp, #4]
    int32_t fCntDiff = 0;
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;

    if( currentDown == NULL )
 800d5dc:	b1f2      	cbz	r2, 800d61c <LoRaMacCryptoGetFCntDown+0x48>
 800d5de:	460c      	mov	r4, r1
 800d5e0:	4615      	mov	r5, r2
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800d5e2:	a901      	add	r1, sp, #4
 800d5e4:	f7ff fe5c 	bl	800d2a0 <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800d5e8:	b948      	cbnz	r0, 800d5fe <LoRaMacCryptoGetFCntDown+0x2a>
    {
        return cryptoStatus;
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 800d5ea:	9b01      	ldr	r3, [sp, #4]
 800d5ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5f0:	d007      	beq.n	800d602 <LoRaMacCryptoGetFCntDown+0x2e>
        *currentDown = frameFcnt;
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 800d5f2:	b29a      	uxth	r2, r3
 800d5f4:	1aa2      	subs	r2, r4, r2

        if( fCntDiff > 0 )
 800d5f6:	2a00      	cmp	r2, #0
 800d5f8:	dd05      	ble.n	800d606 <LoRaMacCryptoGetFCntDown+0x32>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 800d5fa:	4413      	add	r3, r2
 800d5fc:	602b      	str	r3, [r5, #0]
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800d5fe:	b003      	add	sp, #12
 800d600:	bd30      	pop	{r4, r5, pc}
        *currentDown = frameFcnt;
 800d602:	602c      	str	r4, [r5, #0]
 800d604:	e7fb      	b.n	800d5fe <LoRaMacCryptoGetFCntDown+0x2a>
        else if( fCntDiff == 0 )
 800d606:	b132      	cbz	r2, 800d616 <LoRaMacCryptoGetFCntDown+0x42>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800d608:	0c1b      	lsrs	r3, r3, #16
 800d60a:	041b      	lsls	r3, r3, #16
 800d60c:	4423      	add	r3, r4
 800d60e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800d612:	602b      	str	r3, [r5, #0]
 800d614:	e7f3      	b.n	800d5fe <LoRaMacCryptoGetFCntDown+0x2a>
            *currentDown = lastDown;
 800d616:	602b      	str	r3, [r5, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 800d618:	2007      	movs	r0, #7
 800d61a:	e7f0      	b.n	800d5fe <LoRaMacCryptoGetFCntDown+0x2a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d61c:	2009      	movs	r0, #9
 800d61e:	e7ee      	b.n	800d5fe <LoRaMacCryptoGetFCntDown+0x2a>

0800d620 <LoRaMacCryptoSetMulticastReference>:
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
 800d620:	4601      	mov	r1, r0
 800d622:	b908      	cbnz	r0, 800d628 <LoRaMacCryptoSetMulticastReference+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d624:	2009      	movs	r0, #9
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800d626:	4770      	bx	lr
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d628:	2300      	movs	r3, #0
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	dd01      	ble.n	800d632 <LoRaMacCryptoSetMulticastReference+0x12>
    return LORAMAC_CRYPTO_SUCCESS;
 800d62e:	2000      	movs	r0, #0
 800d630:	4770      	bx	lr
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 800d632:	4a06      	ldr	r2, [pc, #24]	; (800d64c <LoRaMacCryptoSetMulticastReference+0x2c>)
 800d634:	6812      	ldr	r2, [r2, #0]
 800d636:	202c      	movs	r0, #44	; 0x2c
 800d638:	fb00 1003 	mla	r0, r0, r3, r1
 800d63c:	f103 0c06 	add.w	ip, r3, #6
 800d640:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 800d644:	3204      	adds	r2, #4
 800d646:	6202      	str	r2, [r0, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d648:	3301      	adds	r3, #1
 800d64a:	e7ee      	b.n	800d62a <LoRaMacCryptoSetMulticastReference+0xa>
 800d64c:	20001014 	.word	0x20001014

0800d650 <LoRaMacCryptoPrepareJoinRequest>:
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( macMsg == 0 )
 800d650:	b1d8      	cbz	r0, 800d68a <LoRaMacCryptoPrepareJoinRequest+0x3a>
{
 800d652:	b510      	push	{r4, lr}
 800d654:	b082      	sub	sp, #8
 800d656:	4604      	mov	r4, r0
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 800d658:	4b0f      	ldr	r3, [pc, #60]	; (800d698 <LoRaMacCryptoPrepareJoinRequest+0x48>)
 800d65a:	681a      	ldr	r2, [r3, #0]
 800d65c:	8893      	ldrh	r3, [r2, #4]
 800d65e:	3301      	adds	r3, #1
 800d660:	b29b      	uxth	r3, r3
 800d662:	8093      	strh	r3, [r2, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 800d664:	82c3      	strh	r3, [r0, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800d666:	f000 fa2e 	bl	800dac6 <LoRaMacSerializerJoinRequest>
 800d66a:	b980      	cbnz	r0, 800d68e <LoRaMacCryptoPrepareJoinRequest+0x3e>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800d66c:	4623      	mov	r3, r4
 800d66e:	f853 1b18 	ldr.w	r1, [r3], #24
 800d672:	9300      	str	r3, [sp, #0]
 800d674:	2301      	movs	r3, #1
 800d676:	2213      	movs	r2, #19
 800d678:	f003 fa31 	bl	8010ade <SecureElementComputeAesCmac>
 800d67c:	b950      	cbnz	r0, 800d694 <LoRaMacCryptoPrepareJoinRequest+0x44>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800d67e:	4620      	mov	r0, r4
 800d680:	f000 fa21 	bl	800dac6 <LoRaMacSerializerJoinRequest>
 800d684:	b120      	cbz	r0, 800d690 <LoRaMacCryptoPrepareJoinRequest+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800d686:	2010      	movs	r0, #16
 800d688:	e002      	b.n	800d690 <LoRaMacCryptoPrepareJoinRequest+0x40>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d68a:	2009      	movs	r0, #9
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800d68c:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800d68e:	2010      	movs	r0, #16
}
 800d690:	b002      	add	sp, #8
 800d692:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d694:	200e      	movs	r0, #14
 800d696:	e7fb      	b.n	800d690 <LoRaMacCryptoPrepareJoinRequest+0x40>
 800d698:	20001014 	.word	0x20001014

0800d69c <LoRaMacCryptoSecureMessage>:
LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d036      	beq.n	800d70e <LoRaMacCryptoSecureMessage+0x72>
{
 800d6a0:	b530      	push	{r4, r5, lr}
 800d6a2:	b085      	sub	sp, #20
 800d6a4:	4604      	mov	r4, r0
 800d6a6:	461d      	mov	r5, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800d6a8:	4b1d      	ldr	r3, [pc, #116]	; (800d720 <LoRaMacCryptoSecureMessage+0x84>)
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	68db      	ldr	r3, [r3, #12]
 800d6ae:	4283      	cmp	r3, r0
 800d6b0:	d82f      	bhi.n	800d712 <LoRaMacCryptoSecureMessage+0x76>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 800d6b2:	f895 2020 	ldrb.w	r2, [r5, #32]
 800d6b6:	b342      	cbz	r2, 800d70a <LoRaMacCryptoSecureMessage+0x6e>
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 800d6b8:	2203      	movs	r2, #3
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 800d6ba:	42a3      	cmp	r3, r4
 800d6bc:	d209      	bcs.n	800d6d2 <LoRaMacCryptoSecureMessage+0x36>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800d6be:	9401      	str	r4, [sp, #4]
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	9300      	str	r3, [sp, #0]
 800d6c4:	68ab      	ldr	r3, [r5, #8]
 800d6c6:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800d6ca:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800d6cc:	f7ff fec3 	bl	800d456 <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d6d0:	bb10      	cbnz	r0, 800d718 <LoRaMacCryptoSecureMessage+0x7c>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800d6d2:	4628      	mov	r0, r5
 800d6d4:	f000 fa2d 	bl	800db32 <LoRaMacSerializerData>
 800d6d8:	b9e8      	cbnz	r0, 800d716 <LoRaMacCryptoSecureMessage+0x7a>
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800d6da:	7929      	ldrb	r1, [r5, #4]
 800d6dc:	3904      	subs	r1, #4
 800d6de:	462b      	mov	r3, r5
 800d6e0:	f853 0b2c 	ldr.w	r0, [r3], #44
 800d6e4:	9303      	str	r3, [sp, #12]
 800d6e6:	9402      	str	r4, [sp, #8]
 800d6e8:	68ab      	ldr	r3, [r5, #8]
 800d6ea:	9301      	str	r3, [sp, #4]
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	9300      	str	r3, [sp, #0]
 800d6f0:	2202      	movs	r2, #2
 800d6f2:	b289      	uxth	r1, r1
 800d6f4:	f7ff fe4c 	bl	800d390 <ComputeCmacB0>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d6f8:	b970      	cbnz	r0, 800d718 <LoRaMacCryptoSecureMessage+0x7c>
            return retval;
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800d6fa:	4628      	mov	r0, r5
 800d6fc:	f000 fa19 	bl	800db32 <LoRaMacSerializerData>
 800d700:	b960      	cbnz	r0, 800d71c <LoRaMacCryptoSecureMessage+0x80>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 800d702:	4b07      	ldr	r3, [pc, #28]	; (800d720 <LoRaMacCryptoSecureMessage+0x84>)
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	60dc      	str	r4, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 800d708:	e006      	b.n	800d718 <LoRaMacCryptoSecureMessage+0x7c>
        payloadDecryptionKeyID = NWK_S_KEY;
 800d70a:	2202      	movs	r2, #2
 800d70c:	e7d5      	b.n	800d6ba <LoRaMacCryptoSecureMessage+0x1e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d70e:	2009      	movs	r0, #9
}
 800d710:	4770      	bx	lr
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800d712:	2006      	movs	r0, #6
 800d714:	e000      	b.n	800d718 <LoRaMacCryptoSecureMessage+0x7c>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800d716:	2010      	movs	r0, #16
}
 800d718:	b005      	add	sp, #20
 800d71a:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800d71c:	2010      	movs	r0, #16
 800d71e:	e7fb      	b.n	800d718 <LoRaMacCryptoSecureMessage+0x7c>
 800d720:	20001014 	.word	0x20001014

0800d724 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 800d724:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d728:	b087      	sub	sp, #28
 800d72a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    if( macMsg == 0 )
 800d72c:	2e00      	cmp	r6, #0
 800d72e:	d049      	beq.n	800d7c4 <LoRaMacCryptoUnsecureMessage+0xa0>
 800d730:	4605      	mov	r5, r0
 800d732:	4688      	mov	r8, r1
 800d734:	4617      	mov	r7, r2
 800d736:	461c      	mov	r4, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 800d738:	4619      	mov	r1, r3
 800d73a:	4610      	mov	r0, r2
 800d73c:	f7ff fdde 	bl	800d2fc <CheckFCntDown>
 800d740:	2800      	cmp	r0, #0
 800d742:	d041      	beq.n	800d7c8 <LoRaMacCryptoUnsecureMessage+0xa4>
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800d744:	4630      	mov	r0, r6
 800d746:	f000 f95f 	bl	800da08 <LoRaMacParserData>
 800d74a:	2800      	cmp	r0, #0
 800d74c:	d141      	bne.n	800d7d2 <LoRaMacCryptoUnsecureMessage+0xae>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 800d74e:	a905      	add	r1, sp, #20
 800d750:	4628      	mov	r0, r5
 800d752:	f7ff fd8f 	bl	800d274 <GetKeyAddrItem>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d756:	4605      	mov	r5, r0
 800d758:	2800      	cmp	r0, #0
 800d75a:	d136      	bne.n	800d7ca <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 800d75c:	9b05      	ldr	r3, [sp, #20]
 800d75e:	f893 9001 	ldrb.w	r9, [r3, #1]
    micComputationKeyID = curItem->NwkSkey;
 800d762:	789a      	ldrb	r2, [r3, #2]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 800d764:	68b3      	ldr	r3, [r6, #8]
 800d766:	4543      	cmp	r3, r8
 800d768:	d135      	bne.n	800d7d6 <LoRaMacCryptoUnsecureMessage+0xb2>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800d76a:	7b33      	ldrb	r3, [r6, #12]
 800d76c:	f3c3 1340 	ubfx	r3, r3, #5, #1
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800d770:	491a      	ldr	r1, [pc, #104]	; (800d7dc <LoRaMacCryptoUnsecureMessage+0xb8>)
 800d772:	6809      	ldr	r1, [r1, #0]
 800d774:	7889      	ldrb	r1, [r1, #2]
 800d776:	b901      	cbnz	r1, 800d77a <LoRaMacCryptoUnsecureMessage+0x56>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 800d778:	2300      	movs	r3, #0
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800d77a:	7931      	ldrb	r1, [r6, #4]
 800d77c:	3904      	subs	r1, #4
 800d77e:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800d780:	9003      	str	r0, [sp, #12]
 800d782:	9402      	str	r4, [sp, #8]
 800d784:	f8cd 8004 	str.w	r8, [sp, #4]
 800d788:	2001      	movs	r0, #1
 800d78a:	9000      	str	r0, [sp, #0]
 800d78c:	b289      	uxth	r1, r1
 800d78e:	6830      	ldr	r0, [r6, #0]
 800d790:	f7ff febd 	bl	800d50e <VerifyCmacB0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d794:	4605      	mov	r5, r0
 800d796:	b9c0      	cbnz	r0, 800d7ca <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 800d798:	f896 3020 	ldrb.w	r3, [r6, #32]
 800d79c:	b90b      	cbnz	r3, 800d7a2 <LoRaMacCryptoUnsecureMessage+0x7e>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 800d79e:	f04f 0902 	mov.w	r9, #2
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800d7a2:	9401      	str	r4, [sp, #4]
 800d7a4:	2301      	movs	r3, #1
 800d7a6:	9300      	str	r3, [sp, #0]
 800d7a8:	4643      	mov	r3, r8
 800d7aa:	464a      	mov	r2, r9
 800d7ac:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800d7b0:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800d7b2:	f7ff fe50 	bl	800d456 <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d7b6:	4605      	mov	r5, r0
 800d7b8:	b938      	cbnz	r0, 800d7ca <LoRaMacCryptoUnsecureMessage+0xa6>
            }
        }
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 800d7ba:	4621      	mov	r1, r4
 800d7bc:	4638      	mov	r0, r7
 800d7be:	f7ff fdb5 	bl	800d32c <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 800d7c2:	e002      	b.n	800d7ca <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d7c4:	2509      	movs	r5, #9
 800d7c6:	e000      	b.n	800d7ca <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800d7c8:	2506      	movs	r5, #6
}
 800d7ca:	4628      	mov	r0, r5
 800d7cc:	b007      	add	sp, #28
 800d7ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800d7d2:	250f      	movs	r5, #15
 800d7d4:	e7f9      	b.n	800d7ca <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800d7d6:	2502      	movs	r5, #2
 800d7d8:	e7f7      	b.n	800d7ca <LoRaMacCryptoUnsecureMessage+0xa6>
 800d7da:	bf00      	nop
 800d7dc:	20001014 	.word	0x20001014

0800d7e0 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 800d7e0:	b9b1      	cbnz	r1, 800d810 <LoRaMacCryptoDeriveMcRootKey+0x30>
{
 800d7e2:	b500      	push	{lr}
 800d7e4:	b085      	sub	sp, #20
 800d7e6:	468c      	mov	ip, r1
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	9300      	str	r3, [sp, #0]
 800d7ec:	9301      	str	r3, [sp, #4]
 800d7ee:	9302      	str	r3, [sp, #8]
 800d7f0:	9303      	str	r3, [sp, #12]

    if( versionMinor == 1 )
 800d7f2:	2801      	cmp	r0, #1
 800d7f4:	d008      	beq.n	800d808 <LoRaMacCryptoDeriveMcRootKey+0x28>
    {
        compBase[0] = 0x20;
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 800d7f6:	2204      	movs	r2, #4
 800d7f8:	4661      	mov	r1, ip
 800d7fa:	4668      	mov	r0, sp
 800d7fc:	f003 fa0e 	bl	8010c1c <SecureElementDeriveAndStoreKey>
 800d800:	b940      	cbnz	r0, 800d814 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800d802:	b005      	add	sp, #20
 800d804:	f85d fb04 	ldr.w	pc, [sp], #4
        compBase[0] = 0x20;
 800d808:	2320      	movs	r3, #32
 800d80a:	f88d 3000 	strb.w	r3, [sp]
 800d80e:	e7f2      	b.n	800d7f6 <LoRaMacCryptoDeriveMcRootKey+0x16>
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800d810:	200a      	movs	r0, #10
}
 800d812:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d814:	200e      	movs	r0, #14
 800d816:	e7f4      	b.n	800d802 <LoRaMacCryptoDeriveMcRootKey+0x22>

0800d818 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 800d818:	2804      	cmp	r0, #4
 800d81a:	d001      	beq.n	800d820 <LoRaMacCryptoDeriveMcKEKey+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800d81c:	200a      	movs	r0, #10
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800d81e:	4770      	bx	lr
{
 800d820:	b500      	push	{lr}
 800d822:	b085      	sub	sp, #20
    uint8_t compBase[16] = { 0 };
 800d824:	2300      	movs	r3, #0
 800d826:	9300      	str	r3, [sp, #0]
 800d828:	9301      	str	r3, [sp, #4]
 800d82a:	9302      	str	r3, [sp, #8]
 800d82c:	9303      	str	r3, [sp, #12]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 800d82e:	227f      	movs	r2, #127	; 0x7f
 800d830:	4601      	mov	r1, r0
 800d832:	4668      	mov	r0, sp
 800d834:	f003 f9f2 	bl	8010c1c <SecureElementDeriveAndStoreKey>
 800d838:	b910      	cbnz	r0, 800d840 <LoRaMacCryptoDeriveMcKEKey+0x28>
}
 800d83a:	b005      	add	sp, #20
 800d83c:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d840:	200e      	movs	r0, #14
 800d842:	e7fa      	b.n	800d83a <LoRaMacCryptoDeriveMcKEKey+0x22>

0800d844 <LoRaMacCryptoSetKey>:
{
 800d844:	b510      	push	{r4, lr}
 800d846:	4604      	mov	r4, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800d848:	f003 f9a6 	bl	8010b98 <SecureElementSetKey>
 800d84c:	b978      	cbnz	r0, 800d86e <LoRaMacCryptoSetKey+0x2a>
    if( keyID == APP_KEY )
 800d84e:	b104      	cbz	r4, 800d852 <LoRaMacCryptoSetKey+0xe>
}
 800d850:	bd10      	pop	{r4, pc}
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 800d852:	4b09      	ldr	r3, [pc, #36]	; (800d878 <LoRaMacCryptoSetKey+0x34>)
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	4621      	mov	r1, r4
 800d858:	7898      	ldrb	r0, [r3, #2]
 800d85a:	f7ff ffc1 	bl	800d7e0 <LoRaMacCryptoDeriveMcRootKey>
 800d85e:	b940      	cbnz	r0, 800d872 <LoRaMacCryptoSetKey+0x2e>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800d860:	2004      	movs	r0, #4
 800d862:	f7ff ffd9 	bl	800d818 <LoRaMacCryptoDeriveMcKEKey>
 800d866:	2800      	cmp	r0, #0
 800d868:	d0f2      	beq.n	800d850 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d86a:	200e      	movs	r0, #14
 800d86c:	e7f0      	b.n	800d850 <LoRaMacCryptoSetKey+0xc>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d86e:	200e      	movs	r0, #14
 800d870:	e7ee      	b.n	800d850 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d872:	200e      	movs	r0, #14
 800d874:	e7ec      	b.n	800d850 <LoRaMacCryptoSetKey+0xc>
 800d876:	bf00      	nop
 800d878:	20001014 	.word	0x20001014

0800d87c <LoRaMacCryptoHandleJoinAccept>:
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800d87c:	2a00      	cmp	r2, #0
 800d87e:	d064      	beq.n	800d94a <LoRaMacCryptoHandleJoinAccept+0xce>
{
 800d880:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d882:	b08f      	sub	sp, #60	; 0x3c
 800d884:	4607      	mov	r7, r0
 800d886:	460d      	mov	r5, r1
 800d888:	4614      	mov	r4, r2
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800d88a:	2900      	cmp	r1, #0
 800d88c:	d05f      	beq.n	800d94e <LoRaMacCryptoHandleJoinAccept+0xd2>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800d88e:	2600      	movs	r6, #0
 800d890:	9605      	str	r6, [sp, #20]
 800d892:	221d      	movs	r2, #29
 800d894:	4631      	mov	r1, r6
 800d896:	a806      	add	r0, sp, #24
 800d898:	f005 ff1e 	bl	80136d8 <memset>
    uint8_t versionMinor         = 0;
 800d89c:	f88d 6013 	strb.w	r6, [sp, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 800d8a0:	4b2f      	ldr	r3, [pc, #188]	; (800d960 <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	889e      	ldrh	r6, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800d8a6:	f10d 0313 	add.w	r3, sp, #19
 800d8aa:	9302      	str	r3, [sp, #8]
 800d8ac:	ab05      	add	r3, sp, #20
 800d8ae:	9301      	str	r3, [sp, #4]
 800d8b0:	7923      	ldrb	r3, [r4, #4]
 800d8b2:	9300      	str	r3, [sp, #0]
 800d8b4:	6823      	ldr	r3, [r4, #0]
 800d8b6:	4632      	mov	r2, r6
 800d8b8:	4629      	mov	r1, r5
 800d8ba:	4638      	mov	r0, r7
 800d8bc:	f003 f9ce 	bl	8010c5c <SecureElementProcessJoinAccept>
 800d8c0:	2800      	cmp	r0, #0
 800d8c2:	d146      	bne.n	800d952 <LoRaMacCryptoHandleJoinAccept+0xd6>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 800d8c4:	7922      	ldrb	r2, [r4, #4]
 800d8c6:	a905      	add	r1, sp, #20
 800d8c8:	6820      	ldr	r0, [r4, #0]
 800d8ca:	f003 fa60 	bl	8010d8e <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800d8ce:	4620      	mov	r0, r4
 800d8d0:	f000 f848 	bl	800d964 <LoRaMacParserJoinAccept>
 800d8d4:	2800      	cmp	r0, #0
 800d8d6:	d13f      	bne.n	800d958 <LoRaMacCryptoHandleJoinAccept+0xdc>
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 800d8d8:	79a5      	ldrb	r5, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 800d8da:	79e3      	ldrb	r3, [r4, #7]
 800d8dc:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800d8e0:	7a23      	ldrb	r3, [r4, #8]
 800d8e2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 800d8e6:	4b1e      	ldr	r3, [pc, #120]	; (800d960 <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	689a      	ldr	r2, [r3, #8]
 800d8ec:	42aa      	cmp	r2, r5
 800d8ee:	d035      	beq.n	800d95c <LoRaMacCryptoHandleJoinAccept+0xe0>
        CryptoNvm->JoinNonce = currentJoinNonce;
 800d8f0:	609d      	str	r5, [r3, #8]
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 800d8f2:	2100      	movs	r1, #0
 800d8f4:	f89d 0013 	ldrb.w	r0, [sp, #19]
 800d8f8:	f7ff ff72 	bl	800d7e0 <LoRaMacCryptoDeriveMcRootKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d8fc:	bb50      	cbnz	r0, 800d954 <LoRaMacCryptoHandleJoinAccept+0xd8>
    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 800d8fe:	2004      	movs	r0, #4
 800d900:	f7ff ff8a 	bl	800d818 <LoRaMacCryptoDeriveMcKEKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d904:	bb30      	cbnz	r0, 800d954 <LoRaMacCryptoHandleJoinAccept+0xd8>
        netID = ( uint32_t )macMsg->NetID[0];
 800d906:	7a63      	ldrb	r3, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800d908:	7aa2      	ldrb	r2, [r4, #10]
 800d90a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800d90e:	7ae4      	ldrb	r4, [r4, #11]
 800d910:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 800d914:	4633      	mov	r3, r6
 800d916:	4622      	mov	r2, r4
 800d918:	4629      	mov	r1, r5
 800d91a:	2003      	movs	r0, #3
 800d91c:	f7ff fd64 	bl	800d3e8 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d920:	b9c0      	cbnz	r0, 800d954 <LoRaMacCryptoHandleJoinAccept+0xd8>
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 800d922:	4633      	mov	r3, r6
 800d924:	4622      	mov	r2, r4
 800d926:	4629      	mov	r1, r5
 800d928:	2002      	movs	r0, #2
 800d92a:	f7ff fd5d 	bl	800d3e8 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d92e:	b988      	cbnz	r0, 800d954 <LoRaMacCryptoHandleJoinAccept+0xd8>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 800d930:	4b0b      	ldr	r3, [pc, #44]	; (800d960 <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800d938:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntUp = 0;
 800d93a:	2200      	movs	r2, #0
 800d93c:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800d93e:	f04f 32ff 	mov.w	r2, #4294967295
 800d942:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800d944:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800d946:	615a      	str	r2, [r3, #20]
    return LORAMAC_CRYPTO_SUCCESS;
 800d948:	e004      	b.n	800d954 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d94a:	2009      	movs	r0, #9
}
 800d94c:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d94e:	2009      	movs	r0, #9
 800d950:	e000      	b.n	800d954 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d952:	200e      	movs	r0, #14
}
 800d954:	b00f      	add	sp, #60	; 0x3c
 800d956:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800d958:	200f      	movs	r0, #15
 800d95a:	e7fb      	b.n	800d954 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800d95c:	2003      	movs	r0, #3
 800d95e:	e7f9      	b.n	800d954 <LoRaMacCryptoHandleJoinAccept+0xd8>
 800d960:	20001014 	.word	0x20001014

0800d964 <LoRaMacParserJoinAccept>:
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800d964:	2800      	cmp	r0, #0
 800d966:	d049      	beq.n	800d9fc <LoRaMacParserJoinAccept+0x98>
{
 800d968:	b510      	push	{r4, lr}
 800d96a:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800d96c:	6801      	ldr	r1, [r0, #0]
 800d96e:	2900      	cmp	r1, #0
 800d970:	d046      	beq.n	800da00 <LoRaMacParserJoinAccept+0x9c>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800d972:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d976:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800d978:	2203      	movs	r2, #3
 800d97a:	3006      	adds	r0, #6
 800d97c:	f003 fa07 	bl	8010d8e <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800d980:	4620      	mov	r0, r4
 800d982:	f850 1b09 	ldr.w	r1, [r0], #9
 800d986:	2203      	movs	r2, #3
 800d988:	3104      	adds	r1, #4
 800d98a:	f003 fa00 	bl	8010d8e <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800d98e:	6821      	ldr	r1, [r4, #0]
 800d990:	79cb      	ldrb	r3, [r1, #7]
 800d992:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800d994:	7a0a      	ldrb	r2, [r1, #8]
 800d996:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d99a:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800d99c:	7a4a      	ldrb	r2, [r1, #9]
 800d99e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d9a2:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800d9a4:	7a8a      	ldrb	r2, [r1, #10]
 800d9a6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d9aa:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800d9ac:	7acb      	ldrb	r3, [r1, #11]
 800d9ae:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800d9b0:	7b0b      	ldrb	r3, [r1, #12]
 800d9b2:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 800d9b4:	7923      	ldrb	r3, [r4, #4]
 800d9b6:	2b21      	cmp	r3, #33	; 0x21
 800d9b8:	d018      	beq.n	800d9ec <LoRaMacParserJoinAccept+0x88>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800d9ba:	2b11      	cmp	r3, #17
 800d9bc:	dc22      	bgt.n	800da04 <LoRaMacParserJoinAccept+0xa0>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800d9be:	220d      	movs	r2, #13
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800d9c0:	6821      	ldr	r1, [r4, #0]
 800d9c2:	f102 0c01 	add.w	ip, r2, #1
 800d9c6:	5c8b      	ldrb	r3, [r1, r2]
 800d9c8:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800d9ca:	1c90      	adds	r0, r2, #2
 800d9cc:	f811 c00c 	ldrb.w	ip, [r1, ip]
 800d9d0:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800d9d4:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800d9d6:	3203      	adds	r2, #3
 800d9d8:	5c08      	ldrb	r0, [r1, r0]
 800d9da:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d9de:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800d9e0:	5c8a      	ldrb	r2, [r1, r2]
 800d9e2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d9e6:	6263      	str	r3, [r4, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 800d9e8:	2000      	movs	r0, #0
}
 800d9ea:	bd10      	pop	{r4, pc}
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 800d9ec:	2210      	movs	r2, #16
 800d9ee:	310d      	adds	r1, #13
 800d9f0:	f104 0012 	add.w	r0, r4, #18
 800d9f4:	f003 f9cb 	bl	8010d8e <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 800d9f8:	221d      	movs	r2, #29
 800d9fa:	e7e1      	b.n	800d9c0 <LoRaMacParserJoinAccept+0x5c>
        return LORAMAC_PARSER_ERROR_NPE;
 800d9fc:	2002      	movs	r0, #2
}
 800d9fe:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800da00:	2002      	movs	r0, #2
 800da02:	e7f2      	b.n	800d9ea <LoRaMacParserJoinAccept+0x86>
        return LORAMAC_PARSER_FAIL;
 800da04:	2001      	movs	r0, #1
 800da06:	e7f0      	b.n	800d9ea <LoRaMacParserJoinAccept+0x86>

0800da08 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800da08:	2800      	cmp	r0, #0
 800da0a:	d058      	beq.n	800dabe <LoRaMacParserData+0xb6>
{
 800da0c:	b510      	push	{r4, lr}
 800da0e:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800da10:	6801      	ldr	r1, [r0, #0]
 800da12:	2900      	cmp	r1, #0
 800da14:	d055      	beq.n	800dac2 <LoRaMacParserData+0xba>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800da16:	780b      	ldrb	r3, [r1, #0]
 800da18:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800da1a:	784b      	ldrb	r3, [r1, #1]
 800da1c:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800da1e:	788a      	ldrb	r2, [r1, #2]
 800da20:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800da24:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800da26:	78ca      	ldrb	r2, [r1, #3]
 800da28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800da2c:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800da2e:	790a      	ldrb	r2, [r1, #4]
 800da30:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800da34:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800da36:	794b      	ldrb	r3, [r1, #5]
 800da38:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800da3a:	798b      	ldrb	r3, [r1, #6]
 800da3c:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800da3e:	79ca      	ldrb	r2, [r1, #7]
 800da40:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800da44:	81c3      	strh	r3, [r0, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800da46:	7b02      	ldrb	r2, [r0, #12]
 800da48:	f002 020f 	and.w	r2, r2, #15
 800da4c:	3108      	adds	r1, #8
 800da4e:	3010      	adds	r0, #16
 800da50:	f003 f99d 	bl	8010d8e <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800da54:	7b23      	ldrb	r3, [r4, #12]
 800da56:	f003 030f 	and.w	r3, r3, #15
 800da5a:	f103 0008 	add.w	r0, r3, #8
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800da5e:	2200      	movs	r2, #0
 800da60:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 800da64:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800da68:	7922      	ldrb	r2, [r4, #4]
 800da6a:	1a11      	subs	r1, r2, r0
 800da6c:	2904      	cmp	r1, #4
 800da6e:	dc16      	bgt.n	800da9e <LoRaMacParserData+0x96>
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800da70:	6822      	ldr	r2, [r4, #0]
 800da72:	7923      	ldrb	r3, [r4, #4]
 800da74:	441a      	add	r2, r3
 800da76:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 800da7a:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800da7c:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 800da80:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800da84:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800da86:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800da8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800da8e:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800da90:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800da94:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800da98:	62e3      	str	r3, [r4, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 800da9a:	2000      	movs	r0, #0
}
 800da9c:	bd10      	pop	{r4, pc}
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800da9e:	6821      	ldr	r1, [r4, #0]
 800daa0:	3309      	adds	r3, #9
 800daa2:	5c08      	ldrb	r0, [r1, r0]
 800daa4:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800daa8:	1ad2      	subs	r2, r2, r3
 800daaa:	b2d2      	uxtb	r2, r2
 800daac:	3a04      	subs	r2, #4
 800daae:	b2d2      	uxtb	r2, r2
 800dab0:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800dab4:	4419      	add	r1, r3
 800dab6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800dab8:	f003 f969 	bl	8010d8e <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 800dabc:	e7d8      	b.n	800da70 <LoRaMacParserData+0x68>
        return LORAMAC_PARSER_ERROR_NPE;
 800dabe:	2002      	movs	r0, #2
}
 800dac0:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800dac2:	2002      	movs	r0, #2
 800dac4:	e7ea      	b.n	800da9c <LoRaMacParserData+0x94>

0800dac6 <LoRaMacSerializerJoinRequest>:
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800dac6:	b370      	cbz	r0, 800db26 <LoRaMacSerializerJoinRequest+0x60>
{
 800dac8:	b510      	push	{r4, lr}
 800daca:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800dacc:	6803      	ldr	r3, [r0, #0]
 800dace:	b363      	cbz	r3, 800db2a <LoRaMacSerializerJoinRequest+0x64>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800dad0:	7902      	ldrb	r2, [r0, #4]
 800dad2:	2a16      	cmp	r2, #22
 800dad4:	d92b      	bls.n	800db2e <LoRaMacSerializerJoinRequest+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800dad6:	7942      	ldrb	r2, [r0, #5]
 800dad8:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800dada:	4601      	mov	r1, r0
 800dadc:	f851 0b06 	ldr.w	r0, [r1], #6
 800dae0:	2208      	movs	r2, #8
 800dae2:	3001      	adds	r0, #1
 800dae4:	f003 f95e 	bl	8010da4 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800dae8:	4621      	mov	r1, r4
 800daea:	f851 0b0e 	ldr.w	r0, [r1], #14
 800daee:	2208      	movs	r2, #8
 800daf0:	3009      	adds	r0, #9
 800daf2:	f003 f957 	bl	8010da4 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800daf6:	8ae2      	ldrh	r2, [r4, #22]
 800daf8:	6823      	ldr	r3, [r4, #0]
 800dafa:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800dafc:	8ae3      	ldrh	r3, [r4, #22]
 800dafe:	6822      	ldr	r2, [r4, #0]
 800db00:	0a1b      	lsrs	r3, r3, #8
 800db02:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800db04:	69a2      	ldr	r2, [r4, #24]
 800db06:	6823      	ldr	r3, [r4, #0]
 800db08:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800db0a:	69a3      	ldr	r3, [r4, #24]
 800db0c:	0a1b      	lsrs	r3, r3, #8
 800db0e:	6822      	ldr	r2, [r4, #0]
 800db10:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800db12:	8b62      	ldrh	r2, [r4, #26]
 800db14:	6823      	ldr	r3, [r4, #0]
 800db16:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800db18:	7ee2      	ldrb	r2, [r4, #27]
 800db1a:	6823      	ldr	r3, [r4, #0]
 800db1c:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 800db1e:	2317      	movs	r3, #23
 800db20:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800db22:	2000      	movs	r0, #0
}
 800db24:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800db26:	2001      	movs	r0, #1
}
 800db28:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800db2a:	2001      	movs	r0, #1
 800db2c:	e7fa      	b.n	800db24 <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800db2e:	2002      	movs	r0, #2
 800db30:	e7f8      	b.n	800db24 <LoRaMacSerializerJoinRequest+0x5e>

0800db32 <LoRaMacSerializerData>:
    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800db32:	2800      	cmp	r0, #0
 800db34:	d066      	beq.n	800dc04 <LoRaMacSerializerData+0xd2>
{
 800db36:	b538      	push	{r3, r4, r5, lr}
 800db38:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800db3a:	6801      	ldr	r1, [r0, #0]
 800db3c:	2900      	cmp	r1, #0
 800db3e:	d063      	beq.n	800dc08 <LoRaMacSerializerData+0xd6>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800db40:	7b02      	ldrb	r2, [r0, #12]
 800db42:	f002 020f 	and.w	r2, r2, #15
 800db46:	f102 0008 	add.w	r0, r2, #8

    if( macMsg->FRMPayloadSize > 0 )
 800db4a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800db4e:	b10b      	cbz	r3, 800db54 <LoRaMacSerializerData+0x22>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 800db50:	f102 0009 	add.w	r0, r2, #9
    }

    computedBufSize += macMsg->FRMPayloadSize;
 800db54:	4403      	add	r3, r0
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800db56:	3304      	adds	r3, #4
 800db58:	b29b      	uxth	r3, r3

    if( macMsg->BufSize < computedBufSize )
 800db5a:	7922      	ldrb	r2, [r4, #4]
 800db5c:	429a      	cmp	r2, r3
 800db5e:	d355      	bcc.n	800dc0c <LoRaMacSerializerData+0xda>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800db60:	7963      	ldrb	r3, [r4, #5]
 800db62:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800db64:	68a2      	ldr	r2, [r4, #8]
 800db66:	6823      	ldr	r3, [r4, #0]
 800db68:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800db6a:	68a3      	ldr	r3, [r4, #8]
 800db6c:	0a1b      	lsrs	r3, r3, #8
 800db6e:	6822      	ldr	r2, [r4, #0]
 800db70:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800db72:	8962      	ldrh	r2, [r4, #10]
 800db74:	6823      	ldr	r3, [r4, #0]
 800db76:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800db78:	7ae2      	ldrb	r2, [r4, #11]
 800db7a:	6823      	ldr	r3, [r4, #0]
 800db7c:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800db7e:	6823      	ldr	r3, [r4, #0]
 800db80:	7b22      	ldrb	r2, [r4, #12]
 800db82:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800db84:	89e2      	ldrh	r2, [r4, #14]
 800db86:	6823      	ldr	r3, [r4, #0]
 800db88:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800db8a:	89e3      	ldrh	r3, [r4, #14]
 800db8c:	6822      	ldr	r2, [r4, #0]
 800db8e:	0a1b      	lsrs	r3, r3, #8
 800db90:	71d3      	strb	r3, [r2, #7]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800db92:	4621      	mov	r1, r4
 800db94:	f851 0b10 	ldr.w	r0, [r1], #16
 800db98:	7b22      	ldrb	r2, [r4, #12]
 800db9a:	f002 020f 	and.w	r2, r2, #15
 800db9e:	3008      	adds	r0, #8
 800dba0:	f003 f8f5 	bl	8010d8e <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800dba4:	7b23      	ldrb	r3, [r4, #12]
 800dba6:	f003 030f 	and.w	r3, r3, #15
 800dbaa:	f103 0508 	add.w	r5, r3, #8

    if( macMsg->FRMPayloadSize > 0 )
 800dbae:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800dbb2:	b12a      	cbz	r2, 800dbc0 <LoRaMacSerializerData+0x8e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800dbb4:	6822      	ldr	r2, [r4, #0]
 800dbb6:	f894 1020 	ldrb.w	r1, [r4, #32]
 800dbba:	5551      	strb	r1, [r2, r5]
 800dbbc:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800dbc0:	6820      	ldr	r0, [r4, #0]
 800dbc2:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800dbc6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800dbc8:	4428      	add	r0, r5
 800dbca:	f003 f8e0 	bl	8010d8e <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800dbce:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800dbd2:	442b      	add	r3, r5

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800dbd4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800dbd6:	6821      	ldr	r1, [r4, #0]
 800dbd8:	1c5a      	adds	r2, r3, #1
 800dbda:	b292      	uxth	r2, r2
 800dbdc:	54c8      	strb	r0, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800dbde:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800dbe0:	0a08      	lsrs	r0, r1, #8
 800dbe2:	6825      	ldr	r5, [r4, #0]
 800dbe4:	1c99      	adds	r1, r3, #2
 800dbe6:	b289      	uxth	r1, r1
 800dbe8:	54a8      	strb	r0, [r5, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800dbea:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 800dbec:	6820      	ldr	r0, [r4, #0]
 800dbee:	1cda      	adds	r2, r3, #3
 800dbf0:	b292      	uxth	r2, r2
 800dbf2:	5445      	strb	r5, [r0, r1]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800dbf4:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 800dbf8:	6821      	ldr	r1, [r4, #0]
 800dbfa:	3304      	adds	r3, #4
 800dbfc:	5488      	strb	r0, [r1, r2]

    macMsg->BufSize = bufItr;
 800dbfe:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800dc00:	2000      	movs	r0, #0
}
 800dc02:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800dc04:	2001      	movs	r0, #1
}
 800dc06:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800dc08:	2001      	movs	r0, #1
 800dc0a:	e7fa      	b.n	800dc02 <LoRaMacSerializerData+0xd0>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800dc0c:	2002      	movs	r0, #2
 800dc0e:	e7f8      	b.n	800dc02 <LoRaMacSerializerData+0xd0>

0800dc10 <NvmDataMgmtEvent>:
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800dc10:	4b02      	ldr	r3, [pc, #8]	; (800dc1c <NvmDataMgmtEvent+0xc>)
 800dc12:	881a      	ldrh	r2, [r3, #0]
 800dc14:	4310      	orrs	r0, r2
 800dc16:	8018      	strh	r0, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800dc18:	4770      	bx	lr
 800dc1a:	bf00      	nop
 800dc1c:	20001018 	.word	0x20001018

0800dc20 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800dc20:	b508      	push	{r3, lr}
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Input checks
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800dc22:	4b06      	ldr	r3, [pc, #24]	; (800dc3c <NvmDataMgmtStoreBegin+0x1c>)
 800dc24:	881b      	ldrh	r3, [r3, #0]
 800dc26:	b11b      	cbz	r3, 800dc30 <NvmDataMgmtStoreBegin+0x10>
    {
        // There was no update.
        return NVM_DATA_NO_UPDATED_DATA;
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800dc28:	f7fe f914 	bl	800be54 <LoRaMacStop>
 800dc2c:	b918      	cbnz	r0, 800dc36 <NvmDataMgmtStoreBegin+0x16>
    }
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800dc2e:	bd08      	pop	{r3, pc}
        return NVM_DATA_NO_UPDATED_DATA;
 800dc30:	f06f 0001 	mvn.w	r0, #1
 800dc34:	e7fb      	b.n	800dc2e <NvmDataMgmtStoreBegin+0xe>
        return NVM_DATA_NOT_AVAILABLE;
 800dc36:	f06f 0002 	mvn.w	r0, #2
 800dc3a:	e7f8      	b.n	800dc2e <NvmDataMgmtStoreBegin+0xe>
 800dc3c:	20001018 	.word	0x20001018

0800dc40 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800dc40:	b510      	push	{r4, lr}
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Reset notification flags
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800dc42:	2400      	movs	r4, #0
 800dc44:	4b02      	ldr	r3, [pc, #8]	; (800dc50 <NvmDataMgmtStoreEnd+0x10>)
 800dc46:	801c      	strh	r4, [r3, #0]

    // Resume LoRaMac
    LoRaMacStart( );
 800dc48:	f7fe f8fc 	bl	800be44 <LoRaMacStart>
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800dc4c:	4620      	mov	r0, r4
 800dc4e:	bd10      	pop	{r4, pc}
 800dc50:	20001018 	.word	0x20001018

0800dc54 <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 800dc54:	2805      	cmp	r0, #5
 800dc56:	d005      	beq.n	800dc64 <RegionIsActive+0x10>
 800dc58:	2808      	cmp	r0, #8
 800dc5a:	d001      	beq.n	800dc60 <RegionIsActive+0xc>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 800dc5c:	2000      	movs	r0, #0
        }
    }
}
 800dc5e:	4770      	bx	lr
    switch( region )
 800dc60:	2001      	movs	r0, #1
 800dc62:	4770      	bx	lr
 800dc64:	2001      	movs	r0, #1
 800dc66:	4770      	bx	lr

0800dc68 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800dc68:	b500      	push	{lr}
 800dc6a:	b083      	sub	sp, #12
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	4608      	mov	r0, r1
    PhyParam_t phyParam = { 0 };
 800dc70:	2200      	movs	r2, #0
 800dc72:	9200      	str	r2, [sp, #0]
    switch( region )
 800dc74:	2b05      	cmp	r3, #5
 800dc76:	d004      	beq.n	800dc82 <RegionGetPhyParam+0x1a>
 800dc78:	2b08      	cmp	r3, #8
 800dc7a:	d009      	beq.n	800dc90 <RegionGetPhyParam+0x28>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 800dc7c:	9b00      	ldr	r3, [sp, #0]
 800dc7e:	9301      	str	r3, [sp, #4]
 800dc80:	e002      	b.n	800dc88 <RegionGetPhyParam+0x20>
        EU868_GET_PHY_PARAM( );
 800dc82:	f000 fdeb 	bl	800e85c <RegionEU868GetPhyParam>
 800dc86:	9001      	str	r0, [sp, #4]
        }
    }
}
 800dc88:	9801      	ldr	r0, [sp, #4]
 800dc8a:	b003      	add	sp, #12
 800dc8c:	f85d fb04 	ldr.w	pc, [sp], #4
        US915_GET_PHY_PARAM( );
 800dc90:	f001 fbd6 	bl	800f440 <RegionUS915GetPhyParam>
 800dc94:	9001      	str	r0, [sp, #4]
 800dc96:	e7f7      	b.n	800dc88 <RegionGetPhyParam+0x20>

0800dc98 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 800dc98:	b508      	push	{r3, lr}
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	4608      	mov	r0, r1
    switch( region )
 800dc9e:	2b05      	cmp	r3, #5
 800dca0:	d002      	beq.n	800dca8 <RegionSetBandTxDone+0x10>
 800dca2:	2b08      	cmp	r3, #8
 800dca4:	d003      	beq.n	800dcae <RegionSetBandTxDone+0x16>
        default:
        {
            return;
        }
    }
}
 800dca6:	bd08      	pop	{r3, pc}
        EU868_SET_BAND_TX_DONE( );
 800dca8:	f000 fe94 	bl	800e9d4 <RegionEU868SetBandTxDone>
 800dcac:	e7fb      	b.n	800dca6 <RegionSetBandTxDone+0xe>
        US915_SET_BAND_TX_DONE( );
 800dcae:	f001 fc9d 	bl	800f5ec <RegionUS915SetBandTxDone>
 800dcb2:	e7f8      	b.n	800dca6 <RegionSetBandTxDone+0xe>

0800dcb4 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 800dcb4:	b508      	push	{r3, lr}
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	4608      	mov	r0, r1
    switch( region )
 800dcba:	2b05      	cmp	r3, #5
 800dcbc:	d002      	beq.n	800dcc4 <RegionInitDefaults+0x10>
 800dcbe:	2b08      	cmp	r3, #8
 800dcc0:	d003      	beq.n	800dcca <RegionInitDefaults+0x16>
        default:
        {
            break;
        }
    }
}
 800dcc2:	bd08      	pop	{r3, pc}
        EU868_INIT_DEFAULTS( );
 800dcc4:	f000 fea4 	bl	800ea10 <RegionEU868InitDefaults>
 800dcc8:	e7fb      	b.n	800dcc2 <RegionInitDefaults+0xe>
        US915_INIT_DEFAULTS( );
 800dcca:	f001 fcad 	bl	800f628 <RegionUS915InitDefaults>
}
 800dcce:	e7f8      	b.n	800dcc2 <RegionInitDefaults+0xe>

0800dcd0 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800dcd0:	b508      	push	{r3, lr}
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	4608      	mov	r0, r1
 800dcd6:	4611      	mov	r1, r2
    switch( region )
 800dcd8:	2b05      	cmp	r3, #5
 800dcda:	d003      	beq.n	800dce4 <RegionVerify+0x14>
 800dcdc:	2b08      	cmp	r3, #8
 800dcde:	d004      	beq.n	800dcea <RegionVerify+0x1a>
 800dce0:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800dce2:	bd08      	pop	{r3, pc}
        EU868_VERIFY( );
 800dce4:	f000 ff00 	bl	800eae8 <RegionEU868Verify>
 800dce8:	e7fb      	b.n	800dce2 <RegionVerify+0x12>
        US915_VERIFY( );
 800dcea:	f001 fd41 	bl	800f770 <RegionUS915Verify>
 800dcee:	e7f8      	b.n	800dce2 <RegionVerify+0x12>

0800dcf0 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 800dcf0:	b508      	push	{r3, lr}
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	4608      	mov	r0, r1
    switch( region )
 800dcf6:	2b05      	cmp	r3, #5
 800dcf8:	d002      	beq.n	800dd00 <RegionApplyCFList+0x10>
 800dcfa:	2b08      	cmp	r3, #8
 800dcfc:	d003      	beq.n	800dd06 <RegionApplyCFList+0x16>
        default:
        {
            break;
        }
    }
}
 800dcfe:	bd08      	pop	{r3, pc}
        EU868_APPLY_CF_LIST( );
 800dd00:	f001 fac0 	bl	800f284 <RegionEU868ApplyCFList>
 800dd04:	e7fb      	b.n	800dcfe <RegionApplyCFList+0xe>
        US915_APPLY_CF_LIST( );
 800dd06:	f001 fd6d 	bl	800f7e4 <RegionUS915ApplyCFList>
}
 800dd0a:	e7f8      	b.n	800dcfe <RegionApplyCFList+0xe>

0800dd0c <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 800dd0c:	b508      	push	{r3, lr}
 800dd0e:	4603      	mov	r3, r0
 800dd10:	4608      	mov	r0, r1
    switch( region )
 800dd12:	2b05      	cmp	r3, #5
 800dd14:	d003      	beq.n	800dd1e <RegionChanMaskSet+0x12>
 800dd16:	2b08      	cmp	r3, #8
 800dd18:	d004      	beq.n	800dd24 <RegionChanMaskSet+0x18>
 800dd1a:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800dd1c:	bd08      	pop	{r3, pc}
        EU868_CHAN_MASK_SET( );
 800dd1e:	f000 ff29 	bl	800eb74 <RegionEU868ChanMaskSet>
 800dd22:	e7fb      	b.n	800dd1c <RegionChanMaskSet+0x10>
        US915_CHAN_MASK_SET( );
 800dd24:	f001 fd9c 	bl	800f860 <RegionUS915ChanMaskSet>
 800dd28:	e7f8      	b.n	800dd1c <RegionChanMaskSet+0x10>

0800dd2a <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800dd2a:	b508      	push	{r3, lr}
 800dd2c:	4684      	mov	ip, r0
 800dd2e:	4608      	mov	r0, r1
 800dd30:	4611      	mov	r1, r2
 800dd32:	461a      	mov	r2, r3
    switch( region )
 800dd34:	f1bc 0f05 	cmp.w	ip, #5
 800dd38:	d003      	beq.n	800dd42 <RegionComputeRxWindowParameters+0x18>
 800dd3a:	f1bc 0f08 	cmp.w	ip, #8
 800dd3e:	d004      	beq.n	800dd4a <RegionComputeRxWindowParameters+0x20>
        default:
        {
            break;
        }
    }
}
 800dd40:	bd08      	pop	{r3, pc}
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 800dd42:	9b02      	ldr	r3, [sp, #8]
 800dd44:	f000 ff34 	bl	800ebb0 <RegionEU868ComputeRxWindowParameters>
 800dd48:	e7fa      	b.n	800dd40 <RegionComputeRxWindowParameters+0x16>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 800dd4a:	9b02      	ldr	r3, [sp, #8]
 800dd4c:	f001 fdca 	bl	800f8e4 <RegionUS915ComputeRxWindowParameters>
}
 800dd50:	e7f6      	b.n	800dd40 <RegionComputeRxWindowParameters+0x16>

0800dd52 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800dd52:	b508      	push	{r3, lr}
 800dd54:	4603      	mov	r3, r0
 800dd56:	4608      	mov	r0, r1
 800dd58:	4611      	mov	r1, r2
    switch( region )
 800dd5a:	2b05      	cmp	r3, #5
 800dd5c:	d003      	beq.n	800dd66 <RegionRxConfig+0x14>
 800dd5e:	2b08      	cmp	r3, #8
 800dd60:	d004      	beq.n	800dd6c <RegionRxConfig+0x1a>
 800dd62:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800dd64:	bd08      	pop	{r3, pc}
        EU868_RX_CONFIG( );
 800dd66:	f000 ff59 	bl	800ec1c <RegionEU868RxConfig>
 800dd6a:	e7fb      	b.n	800dd64 <RegionRxConfig+0x12>
        US915_RX_CONFIG( );
 800dd6c:	f001 fde8 	bl	800f940 <RegionUS915RxConfig>
 800dd70:	e7f8      	b.n	800dd64 <RegionRxConfig+0x12>

0800dd72 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800dd72:	b508      	push	{r3, lr}
 800dd74:	4684      	mov	ip, r0
 800dd76:	4608      	mov	r0, r1
 800dd78:	4611      	mov	r1, r2
 800dd7a:	461a      	mov	r2, r3
    switch( region )
 800dd7c:	f1bc 0f05 	cmp.w	ip, #5
 800dd80:	d004      	beq.n	800dd8c <RegionTxConfig+0x1a>
 800dd82:	f1bc 0f08 	cmp.w	ip, #8
 800dd86:	d004      	beq.n	800dd92 <RegionTxConfig+0x20>
 800dd88:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800dd8a:	bd08      	pop	{r3, pc}
        EU868_TX_CONFIG( );
 800dd8c:	f000 ffca 	bl	800ed24 <RegionEU868TxConfig>
 800dd90:	e7fb      	b.n	800dd8a <RegionTxConfig+0x18>
        US915_TX_CONFIG( );
 800dd92:	f001 fe2f 	bl	800f9f4 <RegionUS915TxConfig>
 800dd96:	e7f8      	b.n	800dd8a <RegionTxConfig+0x18>

0800dd98 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800dd98:	b500      	push	{lr}
 800dd9a:	b083      	sub	sp, #12
 800dd9c:	4684      	mov	ip, r0
 800dd9e:	4608      	mov	r0, r1
 800dda0:	4611      	mov	r1, r2
 800dda2:	461a      	mov	r2, r3
    switch( region )
 800dda4:	f1bc 0f05 	cmp.w	ip, #5
 800dda8:	d006      	beq.n	800ddb8 <RegionLinkAdrReq+0x20>
 800ddaa:	f1bc 0f08 	cmp.w	ip, #8
 800ddae:	d009      	beq.n	800ddc4 <RegionLinkAdrReq+0x2c>
 800ddb0:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800ddb2:	b003      	add	sp, #12
 800ddb4:	f85d fb04 	ldr.w	pc, [sp], #4
        EU868_LINK_ADR_REQ( );
 800ddb8:	9b05      	ldr	r3, [sp, #20]
 800ddba:	9300      	str	r3, [sp, #0]
 800ddbc:	9b04      	ldr	r3, [sp, #16]
 800ddbe:	f001 f849 	bl	800ee54 <RegionEU868LinkAdrReq>
 800ddc2:	e7f6      	b.n	800ddb2 <RegionLinkAdrReq+0x1a>
        US915_LINK_ADR_REQ( );
 800ddc4:	9b05      	ldr	r3, [sp, #20]
 800ddc6:	9300      	str	r3, [sp, #0]
 800ddc8:	9b04      	ldr	r3, [sp, #16]
 800ddca:	f001 fe8d 	bl	800fae8 <RegionUS915LinkAdrReq>
 800ddce:	e7f0      	b.n	800ddb2 <RegionLinkAdrReq+0x1a>

0800ddd0 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 800ddd0:	b508      	push	{r3, lr}
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	4608      	mov	r0, r1
    switch( region )
 800ddd6:	2b05      	cmp	r3, #5
 800ddd8:	d003      	beq.n	800dde2 <RegionRxParamSetupReq+0x12>
 800ddda:	2b08      	cmp	r3, #8
 800dddc:	d004      	beq.n	800dde8 <RegionRxParamSetupReq+0x18>
 800ddde:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800dde0:	bd08      	pop	{r3, pc}
        EU868_RX_PARAM_SETUP_REQ( );
 800dde2:	f001 f8fb 	bl	800efdc <RegionEU868RxParamSetupReq>
 800dde6:	e7fb      	b.n	800dde0 <RegionRxParamSetupReq+0x10>
        US915_RX_PARAM_SETUP_REQ( );
 800dde8:	f001 ffc0 	bl	800fd6c <RegionUS915RxParamSetupReq>
 800ddec:	e7f8      	b.n	800dde0 <RegionRxParamSetupReq+0x10>

0800ddee <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 800ddee:	b508      	push	{r3, lr}
 800ddf0:	4603      	mov	r3, r0
 800ddf2:	4608      	mov	r0, r1
    switch( region )
 800ddf4:	2b05      	cmp	r3, #5
 800ddf6:	d003      	beq.n	800de00 <RegionNewChannelReq+0x12>
 800ddf8:	2b08      	cmp	r3, #8
 800ddfa:	d004      	beq.n	800de06 <RegionNewChannelReq+0x18>
 800ddfc:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800ddfe:	bd08      	pop	{r3, pc}
        EU868_NEW_CHANNEL_REQ( );
 800de00:	f001 fa81 	bl	800f306 <RegionEU868NewChannelReq>
 800de04:	e7fb      	b.n	800ddfe <RegionNewChannelReq+0x10>
        US915_NEW_CHANNEL_REQ( );
 800de06:	f001 ffdc 	bl	800fdc2 <RegionUS915NewChannelReq>
 800de0a:	e7f8      	b.n	800ddfe <RegionNewChannelReq+0x10>

0800de0c <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 800de0c:	b508      	push	{r3, lr}
 800de0e:	4603      	mov	r3, r0
 800de10:	4608      	mov	r0, r1
    switch( region )
 800de12:	2b05      	cmp	r3, #5
 800de14:	d003      	beq.n	800de1e <RegionTxParamSetupReq+0x12>
 800de16:	2b08      	cmp	r3, #8
 800de18:	d004      	beq.n	800de24 <RegionTxParamSetupReq+0x18>
 800de1a:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800de1c:	bd08      	pop	{r3, pc}
        EU868_TX_PARAM_SETUP_REQ( );
 800de1e:	f001 f901 	bl	800f024 <RegionEU868TxParamSetupReq>
 800de22:	e7fb      	b.n	800de1c <RegionTxParamSetupReq+0x10>
        US915_TX_PARAM_SETUP_REQ( );
 800de24:	f001 ffd0 	bl	800fdc8 <RegionUS915TxParamSetupReq>
 800de28:	e7f8      	b.n	800de1c <RegionTxParamSetupReq+0x10>

0800de2a <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 800de2a:	b508      	push	{r3, lr}
 800de2c:	4603      	mov	r3, r0
 800de2e:	4608      	mov	r0, r1
    switch( region )
 800de30:	2b05      	cmp	r3, #5
 800de32:	d003      	beq.n	800de3c <RegionDlChannelReq+0x12>
 800de34:	2b08      	cmp	r3, #8
 800de36:	d004      	beq.n	800de42 <RegionDlChannelReq+0x18>
 800de38:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800de3a:	bd08      	pop	{r3, pc}
        EU868_DL_CHANNEL_REQ( );
 800de3c:	f001 f8f6 	bl	800f02c <RegionEU868DlChannelReq>
 800de40:	e7fb      	b.n	800de3a <RegionDlChannelReq+0x10>
        US915_DL_CHANNEL_REQ( );
 800de42:	f001 ffc4 	bl	800fdce <RegionUS915DlChannelReq>
 800de46:	e7f8      	b.n	800de3a <RegionDlChannelReq+0x10>

0800de48 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 800de48:	b508      	push	{r3, lr}
 800de4a:	4603      	mov	r3, r0
 800de4c:	4608      	mov	r0, r1
 800de4e:	4611      	mov	r1, r2
    switch( region )
 800de50:	2b05      	cmp	r3, #5
 800de52:	d003      	beq.n	800de5c <RegionAlternateDr+0x14>
 800de54:	2b08      	cmp	r3, #8
 800de56:	d004      	beq.n	800de62 <RegionAlternateDr+0x1a>
 800de58:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800de5a:	bd08      	pop	{r3, pc}
        EU868_ALTERNATE_DR( );
 800de5c:	f001 f90e 	bl	800f07c <RegionEU868AlternateDr>
 800de60:	e7fb      	b.n	800de5a <RegionAlternateDr+0x12>
        US915_ALTERNATE_DR( );
 800de62:	f001 ffb7 	bl	800fdd4 <RegionUS915AlternateDr>
 800de66:	e7f8      	b.n	800de5a <RegionAlternateDr+0x12>

0800de68 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800de68:	b508      	push	{r3, lr}
 800de6a:	4684      	mov	ip, r0
 800de6c:	4608      	mov	r0, r1
 800de6e:	4611      	mov	r1, r2
 800de70:	461a      	mov	r2, r3
    switch( region )
 800de72:	f1bc 0f05 	cmp.w	ip, #5
 800de76:	d004      	beq.n	800de82 <RegionNextChannel+0x1a>
 800de78:	f1bc 0f08 	cmp.w	ip, #8
 800de7c:	d005      	beq.n	800de8a <RegionNextChannel+0x22>
 800de7e:	2009      	movs	r0, #9
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
        }
    }
}
 800de80:	bd08      	pop	{r3, pc}
        EU868_NEXT_CHANNEL( );
 800de82:	9b02      	ldr	r3, [sp, #8]
 800de84:	f001 f8fc 	bl	800f080 <RegionEU868NextChannel>
 800de88:	e7fa      	b.n	800de80 <RegionNextChannel+0x18>
        US915_NEXT_CHANNEL( );
 800de8a:	9b02      	ldr	r3, [sp, #8]
 800de8c:	f001 ffc4 	bl	800fe18 <RegionUS915NextChannel>
 800de90:	e7f6      	b.n	800de80 <RegionNextChannel+0x18>

0800de92 <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800de92:	b508      	push	{r3, lr}
 800de94:	4684      	mov	ip, r0
 800de96:	4608      	mov	r0, r1
 800de98:	4611      	mov	r1, r2
 800de9a:	461a      	mov	r2, r3
    switch( region )
 800de9c:	f1bc 0f05 	cmp.w	ip, #5
 800dea0:	d004      	beq.n	800deac <RegionApplyDrOffset+0x1a>
 800dea2:	f1bc 0f08 	cmp.w	ip, #8
 800dea6:	d004      	beq.n	800deb2 <RegionApplyDrOffset+0x20>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 800dea8:	b2c8      	uxtb	r0, r1
 800deaa:	e001      	b.n	800deb0 <RegionApplyDrOffset+0x1e>
        EU868_APPLY_DR_OFFSET( );
 800deac:	f001 fa56 	bl	800f35c <RegionEU868ApplyDrOffset>
        }
    }
}
 800deb0:	bd08      	pop	{r3, pc}
        US915_APPLY_DR_OFFSET( );
 800deb2:	f002 f85f 	bl	800ff74 <RegionUS915ApplyDrOffset>
 800deb6:	e7fb      	b.n	800deb0 <RegionApplyDrOffset+0x1e>

0800deb8 <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 800deb8:	4800      	ldr	r0, [pc, #0]	; (800debc <RegionGetVersion+0x4>)
 800deba:	4770      	bx	lr
 800debc:	02010001 	.word	0x02010001

0800dec0 <FindAvailable125kHzChannels>:
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 800dec0:	468c      	mov	ip, r1
 800dec2:	b1a9      	cbz	r1, 800def0 <FindAvailable125kHzChannels+0x30>
 800dec4:	b1b2      	cbz	r2, 800def4 <FindAvailable125kHzChannels+0x34>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Initialize counter
    *availableChannels = 0;
 800dec6:	2300      	movs	r3, #0
 800dec8:	7013      	strb	r3, [r2, #0]
    for( uint8_t i = 0; i < 8; i++ )
 800deca:	e001      	b.n	800ded0 <FindAvailable125kHzChannels+0x10>
 800decc:	3301      	adds	r3, #1
 800dece:	b2db      	uxtb	r3, r3
 800ded0:	2b07      	cmp	r3, #7
 800ded2:	d80b      	bhi.n	800deec <FindAvailable125kHzChannels+0x2c>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 800ded4:	fa40 f103 	asr.w	r1, r0, r3
 800ded8:	f011 0f01 	tst.w	r1, #1
 800dedc:	d0f6      	beq.n	800decc <FindAvailable125kHzChannels+0xc>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 800dede:	7811      	ldrb	r1, [r2, #0]
 800dee0:	f80c 3001 	strb.w	r3, [ip, r1]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 800dee4:	7811      	ldrb	r1, [r2, #0]
 800dee6:	3101      	adds	r1, #1
 800dee8:	7011      	strb	r1, [r2, #0]
 800deea:	e7ef      	b.n	800decc <FindAvailable125kHzChannels+0xc>
        }
    }

    return LORAMAC_STATUS_OK;
 800deec:	2000      	movs	r0, #0
 800deee:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800def0:	2003      	movs	r0, #3
 800def2:	4770      	bx	lr
 800def4:	2003      	movs	r0, #3
}
 800def6:	4770      	bx	lr

0800def8 <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 800def8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800defa:	b085      	sub	sp, #20
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 800defc:	2300      	movs	r3, #0
 800defe:	9302      	str	r3, [sp, #8]
 800df00:	9303      	str	r3, [sp, #12]
    uint8_t availableChannels = 0;
 800df02:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 800df06:	2800      	cmp	r0, #0
 800df08:	d03e      	beq.n	800df88 <RegionBaseUSComputeNext125kHzJoinChannel+0x90>
 800df0a:	460d      	mov	r5, r1
 800df0c:	4617      	mov	r7, r2
 800df0e:	4606      	mov	r6, r0
 800df10:	2900      	cmp	r1, #0
 800df12:	d03b      	beq.n	800df8c <RegionBaseUSComputeNext125kHzJoinChannel+0x94>
 800df14:	2a00      	cmp	r2, #0
 800df16:	d03b      	beq.n	800df90 <RegionBaseUSComputeNext125kHzJoinChannel+0x98>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 800df18:	780c      	ldrb	r4, [r1, #0]
 800df1a:	e017      	b.n	800df4c <RegionBaseUSComputeNext125kHzJoinChannel+0x54>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 800df1c:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
 800df20:	0a00      	lsrs	r0, r0, #8
 800df22:	e019      	b.n	800df58 <RegionBaseUSComputeNext125kHzJoinChannel+0x60>
        }

        if ( availableChannels > 0 )
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 800df24:	3901      	subs	r1, #1
 800df26:	2000      	movs	r0, #0
 800df28:	f002 ff24 	bl	8010d74 <randr>
 800df2c:	f100 0310 	add.w	r3, r0, #16
 800df30:	eb0d 0003 	add.w	r0, sp, r3
 800df34:	f810 3c08 	ldrb.w	r3, [r0, #-8]
 800df38:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800df3c:	703b      	strb	r3, [r7, #0]
 800df3e:	e016      	b.n	800df6e <RegionBaseUSComputeNext125kHzJoinChannel+0x76>
        startIndex++;
        if ( startIndex > 7 )
        {
            startIndex = 0;
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 800df40:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800df44:	b9cb      	cbnz	r3, 800df7a <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
 800df46:	782a      	ldrb	r2, [r5, #0]
 800df48:	42a2      	cmp	r2, r4
 800df4a:	d016      	beq.n	800df7a <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 800df4c:	0863      	lsrs	r3, r4, #1
        if( ( startIndex % 2 ) == 0 )
 800df4e:	f014 0f01 	tst.w	r4, #1
 800df52:	d1e3      	bne.n	800df1c <RegionBaseUSComputeNext125kHzJoinChannel+0x24>
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 800df54:	f816 0013 	ldrb.w	r0, [r6, r3, lsl #1]
        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 800df58:	f10d 0207 	add.w	r2, sp, #7
 800df5c:	a902      	add	r1, sp, #8
 800df5e:	f7ff ffaf 	bl	800dec0 <FindAvailable125kHzChannels>
 800df62:	2803      	cmp	r0, #3
 800df64:	d00b      	beq.n	800df7e <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        if ( availableChannels > 0 )
 800df66:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800df6a:	2900      	cmp	r1, #0
 800df6c:	d1da      	bne.n	800df24 <RegionBaseUSComputeNext125kHzJoinChannel+0x2c>
        startIndex++;
 800df6e:	3401      	adds	r4, #1
 800df70:	b2e4      	uxtb	r4, r4
        if ( startIndex > 7 )
 800df72:	2c07      	cmp	r4, #7
 800df74:	d9e4      	bls.n	800df40 <RegionBaseUSComputeNext125kHzJoinChannel+0x48>
            startIndex = 0;
 800df76:	2400      	movs	r4, #0
 800df78:	e7e2      	b.n	800df40 <RegionBaseUSComputeNext125kHzJoinChannel+0x48>

    if ( availableChannels > 0 )
 800df7a:	b913      	cbnz	r3, 800df82 <RegionBaseUSComputeNext125kHzJoinChannel+0x8a>
    {
        *groupsCurrentIndex = startIndex;
        return LORAMAC_STATUS_OK;
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 800df7c:	2003      	movs	r0, #3
}
 800df7e:	b005      	add	sp, #20
 800df80:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *groupsCurrentIndex = startIndex;
 800df82:	702c      	strb	r4, [r5, #0]
        return LORAMAC_STATUS_OK;
 800df84:	2000      	movs	r0, #0
 800df86:	e7fa      	b.n	800df7e <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800df88:	2003      	movs	r0, #3
 800df8a:	e7f8      	b.n	800df7e <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 800df8c:	2003      	movs	r0, #3
 800df8e:	e7f6      	b.n	800df7e <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 800df90:	2003      	movs	r0, #3
 800df92:	e7f4      	b.n	800df7e <RegionBaseUSComputeNext125kHzJoinChannel+0x86>

0800df94 <RegionBaseUSCalcDownlinkFrequency>:
uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
}
 800df94:	fb02 1000 	mla	r0, r2, r0, r1
 800df98:	4770      	bx	lr

0800df9a <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800df9a:	b082      	sub	sp, #8
 800df9c:	f10d 0c08 	add.w	ip, sp, #8
 800dfa0:	e90c 000c 	stmdb	ip, {r2, r3}
    uint16_t dutyCycle = band->DCycle;
 800dfa4:	8800      	ldrh	r0, [r0, #0]

    if( joined == false )
 800dfa6:	b971      	cbnz	r1, 800dfc6 <GetDutyCycle+0x2c>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800dfa8:	4613      	mov	r3, r2
 800dfaa:	f5b2 6f61 	cmp.w	r2, #3600	; 0xe10
 800dfae:	d306      	bcc.n	800dfbe <GetDutyCycle+0x24>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 800dfb0:	f649 22af 	movw	r2, #39599	; 0x9aaf
 800dfb4:	4293      	cmp	r3, r2
 800dfb6:	d80a      	bhi.n	800dfce <GetDutyCycle+0x34>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 800dfb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dfbc:	e000      	b.n	800dfc0 <GetDutyCycle+0x26>
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 800dfbe:	2364      	movs	r3, #100	; 0x64
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800dfc0:	4298      	cmp	r0, r3
 800dfc2:	bf38      	it	cc
 800dfc4:	4618      	movcc	r0, r3
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 800dfc6:	b900      	cbnz	r0, 800dfca <GetDutyCycle+0x30>
    {
        dutyCycle = 1;
 800dfc8:	2001      	movs	r0, #1
    }

    return dutyCycle;
}
 800dfca:	b002      	add	sp, #8
 800dfcc:	4770      	bx	lr
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 800dfce:	f242 7310 	movw	r3, #10000	; 0x2710
 800dfd2:	e7f5      	b.n	800dfc0 <GetDutyCycle+0x26>

0800dfd4 <CountChannels>:

    return dutyCycle;
}

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 800dfd4:	4684      	mov	ip, r0
    uint8_t nbActiveBits = 0;

    for( uint8_t j = 0; j < nbBits; j++ )
 800dfd6:	2300      	movs	r3, #0
    uint8_t nbActiveBits = 0;
 800dfd8:	4618      	mov	r0, r3
    for( uint8_t j = 0; j < nbBits; j++ )
 800dfda:	e001      	b.n	800dfe0 <CountChannels+0xc>
 800dfdc:	3301      	adds	r3, #1
 800dfde:	b2db      	uxtb	r3, r3
 800dfe0:	428b      	cmp	r3, r1
 800dfe2:	d207      	bcs.n	800dff4 <CountChannels+0x20>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800dfe4:	2201      	movs	r2, #1
 800dfe6:	409a      	lsls	r2, r3
 800dfe8:	ea32 020c 	bics.w	r2, r2, ip
 800dfec:	d1f6      	bne.n	800dfdc <CountChannels+0x8>
        {
            nbActiveBits++;
 800dfee:	3001      	adds	r0, #1
 800dff0:	b2c0      	uxtb	r0, r0
 800dff2:	e7f3      	b.n	800dfdc <CountChannels+0x8>
        }
    }
    return nbActiveBits;
}
 800dff4:	4770      	bx	lr
	...

0800dff8 <SetMaxTimeCredits>:
{
 800dff8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dffc:	b089      	sub	sp, #36	; 0x24
 800dffe:	4604      	mov	r4, r0
 800e000:	460e      	mov	r6, r1
 800e002:	ad02      	add	r5, sp, #8
 800e004:	e885 000c 	stmia.w	r5, {r2, r3}
 800e008:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
 800e00c:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 800e010:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e014:	f005 f802 	bl	801301c <SysTimeToMs>
 800e018:	4607      	mov	r7, r0
    SysTime_t timeDiff = { 0 };
 800e01a:	2300      	movs	r3, #0
 800e01c:	9304      	str	r3, [sp, #16]
 800e01e:	9305      	str	r3, [sp, #20]
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800e020:	e895 000c 	ldmia.w	r5, {r2, r3}
 800e024:	4631      	mov	r1, r6
 800e026:	4620      	mov	r0, r4
 800e028:	f7ff ffb7 	bl	800df9a <GetDutyCycle>
 800e02c:	4605      	mov	r5, r0
    if( joined == false )
 800e02e:	2e00      	cmp	r6, #0
 800e030:	d14c      	bne.n	800e0cc <SetMaxTimeCredits+0xd4>
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 800e032:	2864      	cmp	r0, #100	; 0x64
 800e034:	d025      	beq.n	800e082 <SetMaxTimeCredits+0x8a>
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800e036:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800e03a:	d025      	beq.n	800e088 <SetMaxTimeCredits+0x90>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 800e03c:	4e27      	ldr	r6, [pc, #156]	; (800e0dc <SetMaxTimeCredits+0xe4>)
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 800e03e:	68a1      	ldr	r1, [r4, #8]
 800e040:	a806      	add	r0, sp, #24
 800e042:	f005 f80b 	bl	801305c <SysTimeFromMs>
 800e046:	9b07      	ldr	r3, [sp, #28]
 800e048:	9300      	str	r3, [sp, #0]
 800e04a:	9b06      	ldr	r3, [sp, #24]
 800e04c:	aa02      	add	r2, sp, #8
 800e04e:	ca06      	ldmia	r2, {r1, r2}
 800e050:	a804      	add	r0, sp, #16
 800e052:	f004 ff6a 	bl	8012f2a <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800e056:	f1b8 0f00 	cmp.w	r8, #0
 800e05a:	d102      	bne.n	800e062 <SetMaxTimeCredits+0x6a>
 800e05c:	f1b9 0f00 	cmp.w	r9, #0
 800e060:	d002      	beq.n	800e068 <SetMaxTimeCredits+0x70>
            ( band->MaxTimeCredits != maxCredits ) ||
 800e062:	6923      	ldr	r3, [r4, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800e064:	42b3      	cmp	r3, r6
 800e066:	d012      	beq.n	800e08e <SetMaxTimeCredits+0x96>
            band->TimeCredits = maxCredits;
 800e068:	60e6      	str	r6, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800e06a:	9b02      	ldr	r3, [sp, #8]
 800e06c:	4a1c      	ldr	r2, [pc, #112]	; (800e0e0 <SetMaxTimeCredits+0xe8>)
 800e06e:	4293      	cmp	r3, r2
 800e070:	d812      	bhi.n	800e098 <SetMaxTimeCredits+0xa0>
    if( band->LastBandUpdateTime == 0 )
 800e072:	6863      	ldr	r3, [r4, #4]
 800e074:	b903      	cbnz	r3, 800e078 <SetMaxTimeCredits+0x80>
        band->TimeCredits = maxCredits;
 800e076:	60e6      	str	r6, [r4, #12]
    band->MaxTimeCredits = maxCredits;
 800e078:	6126      	str	r6, [r4, #16]
}
 800e07a:	4628      	mov	r0, r5
 800e07c:	b009      	add	sp, #36	; 0x24
 800e07e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            band->LastMaxCreditAssignTime = elapsedTime;
 800e082:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800e084:	4e17      	ldr	r6, [pc, #92]	; (800e0e4 <SetMaxTimeCredits+0xec>)
 800e086:	e7da      	b.n	800e03e <SetMaxTimeCredits+0x46>
            band->LastMaxCreditAssignTime = elapsedTime;
 800e088:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 800e08a:	4e17      	ldr	r6, [pc, #92]	; (800e0e8 <SetMaxTimeCredits+0xf0>)
 800e08c:	e7d7      	b.n	800e03e <SetMaxTimeCredits+0x46>
            ( band->MaxTimeCredits != maxCredits ) ||
 800e08e:	9a04      	ldr	r2, [sp, #16]
 800e090:	4b16      	ldr	r3, [pc, #88]	; (800e0ec <SetMaxTimeCredits+0xf4>)
 800e092:	429a      	cmp	r2, r3
 800e094:	d9ed      	bls.n	800e072 <SetMaxTimeCredits+0x7a>
 800e096:	e7e7      	b.n	800e068 <SetMaxTimeCredits+0x70>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800e098:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800e09c:	3b30      	subs	r3, #48	; 0x30
 800e09e:	4a14      	ldr	r2, [pc, #80]	; (800e0f0 <SetMaxTimeCredits+0xf8>)
 800e0a0:	fba2 2303 	umull	r2, r3, r2, r3
 800e0a4:	0c1b      	lsrs	r3, r3, #16
 800e0a6:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 800e0a8:	4a12      	ldr	r2, [pc, #72]	; (800e0f4 <SetMaxTimeCredits+0xfc>)
 800e0aa:	fb02 f303 	mul.w	r3, r2, r3
 800e0ae:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800e0b0:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 800e0b4:	3330      	adds	r3, #48	; 0x30
 800e0b6:	9304      	str	r3, [sp, #16]
                timeDiff.SubSeconds = 0;
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	f8ad 3014 	strh.w	r3, [sp, #20]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 800e0be:	ab04      	add	r3, sp, #16
 800e0c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e0c4:	f004 ffaa 	bl	801301c <SysTimeToMs>
 800e0c8:	60a0      	str	r0, [r4, #8]
 800e0ca:	e7d2      	b.n	800e072 <SetMaxTimeCredits+0x7a>
        if( dutyCycleEnabled == false )
 800e0cc:	f1b8 0f00 	cmp.w	r8, #0
 800e0d0:	d102      	bne.n	800e0d8 <SetMaxTimeCredits+0xe0>
            band->TimeCredits = maxCredits;
 800e0d2:	4e04      	ldr	r6, [pc, #16]	; (800e0e4 <SetMaxTimeCredits+0xec>)
 800e0d4:	60e6      	str	r6, [r4, #12]
 800e0d6:	e7cc      	b.n	800e072 <SetMaxTimeCredits+0x7a>
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800e0d8:	4e02      	ldr	r6, [pc, #8]	; (800e0e4 <SetMaxTimeCredits+0xec>)
 800e0da:	e7ca      	b.n	800e072 <SetMaxTimeCredits+0x7a>
 800e0dc:	02932e00 	.word	0x02932e00
 800e0e0:	0001ec2f 	.word	0x0001ec2f
 800e0e4:	001b7740 	.word	0x001b7740
 800e0e8:	0112a880 	.word	0x0112a880
 800e0ec:	0001517f 	.word	0x0001517f
 800e0f0:	c22e4507 	.word	0xc22e4507
 800e0f4:	00015180 	.word	0x00015180

0800e0f8 <UpdateTimeCredits>:
{
 800e0f8:	b570      	push	{r4, r5, r6, lr}
 800e0fa:	b082      	sub	sp, #8
 800e0fc:	4604      	mov	r4, r0
 800e0fe:	460e      	mov	r6, r1
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 800e100:	9301      	str	r3, [sp, #4]
 800e102:	9200      	str	r2, [sp, #0]
 800e104:	ab06      	add	r3, sp, #24
 800e106:	cb0c      	ldmia	r3, {r2, r3}
 800e108:	f7ff ff76 	bl	800dff8 <SetMaxTimeCredits>
 800e10c:	4605      	mov	r5, r0
    if( joined == true )
 800e10e:	b94e      	cbnz	r6, 800e124 <UpdateTimeCredits+0x2c>
    if( band->TimeCredits > band->MaxTimeCredits )
 800e110:	68e2      	ldr	r2, [r4, #12]
 800e112:	6923      	ldr	r3, [r4, #16]
 800e114:	429a      	cmp	r2, r3
 800e116:	d900      	bls.n	800e11a <UpdateTimeCredits+0x22>
        band->TimeCredits = band->MaxTimeCredits;
 800e118:	60e3      	str	r3, [r4, #12]
    band->LastBandUpdateTime = currentTime;
 800e11a:	9b08      	ldr	r3, [sp, #32]
 800e11c:	6063      	str	r3, [r4, #4]
}
 800e11e:	4628      	mov	r0, r5
 800e120:	b002      	add	sp, #8
 800e122:	bd70      	pop	{r4, r5, r6, pc}
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800e124:	6860      	ldr	r0, [r4, #4]
 800e126:	f004 fff9 	bl	801311c <UTIL_TIMER_GetElapsedTime>
 800e12a:	68e3      	ldr	r3, [r4, #12]
 800e12c:	4403      	add	r3, r0
 800e12e:	60e3      	str	r3, [r4, #12]
 800e130:	e7ee      	b.n	800e110 <UpdateTimeCredits+0x18>

0800e132 <RegionCommonValueInRange>:
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 800e132:	4288      	cmp	r0, r1
 800e134:	db03      	blt.n	800e13e <RegionCommonValueInRange+0xc>
 800e136:	4290      	cmp	r0, r2
 800e138:	dd03      	ble.n	800e142 <RegionCommonValueInRange+0x10>
    {
        return 1;
    }
    return 0;
 800e13a:	2000      	movs	r0, #0
 800e13c:	4770      	bx	lr
 800e13e:	2000      	movs	r0, #0
 800e140:	4770      	bx	lr
        return 1;
 800e142:	2001      	movs	r0, #1
}
 800e144:	4770      	bx	lr

0800e146 <RegionCommonChanVerifyDr>:
{
 800e146:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e14a:	4682      	mov	sl, r0
 800e14c:	460e      	mov	r6, r1
 800e14e:	4690      	mov	r8, r2
 800e150:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 800e154:	f99d 2020 	ldrsb.w	r2, [sp, #32]
 800e158:	4619      	mov	r1, r3
 800e15a:	4640      	mov	r0, r8
 800e15c:	f7ff ffe9 	bl	800e132 <RegionCommonValueInRange>
 800e160:	b338      	cbz	r0, 800e1b2 <RegionCommonChanVerifyDr+0x6c>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800e162:	2500      	movs	r5, #0
 800e164:	462f      	mov	r7, r5
 800e166:	e01e      	b.n	800e1a6 <RegionCommonChanVerifyDr+0x60>
        for( uint8_t j = 0; j < 16; j++ )
 800e168:	3401      	adds	r4, #1
 800e16a:	b2e4      	uxtb	r4, r4
 800e16c:	2c0f      	cmp	r4, #15
 800e16e:	d816      	bhi.n	800e19e <RegionCommonChanVerifyDr+0x58>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800e170:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
 800e174:	4123      	asrs	r3, r4
 800e176:	f013 0f01 	tst.w	r3, #1
 800e17a:	d0f5      	beq.n	800e168 <RegionCommonChanVerifyDr+0x22>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800e17c:	193b      	adds	r3, r7, r4
 800e17e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e182:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800e186:	7a19      	ldrb	r1, [r3, #8]
 800e188:	090a      	lsrs	r2, r1, #4
 800e18a:	f001 010f 	and.w	r1, r1, #15
 800e18e:	4640      	mov	r0, r8
 800e190:	f7ff ffcf 	bl	800e132 <RegionCommonValueInRange>
 800e194:	2801      	cmp	r0, #1
 800e196:	d1e7      	bne.n	800e168 <RegionCommonChanVerifyDr+0x22>
                    return true;
 800e198:	2001      	movs	r0, #1
}
 800e19a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800e19e:	3710      	adds	r7, #16
 800e1a0:	b2ff      	uxtb	r7, r7
 800e1a2:	3501      	adds	r5, #1
 800e1a4:	b2ed      	uxtb	r5, r5
 800e1a6:	4557      	cmp	r7, sl
 800e1a8:	d201      	bcs.n	800e1ae <RegionCommonChanVerifyDr+0x68>
        for( uint8_t j = 0; j < 16; j++ )
 800e1aa:	2400      	movs	r4, #0
 800e1ac:	e7de      	b.n	800e16c <RegionCommonChanVerifyDr+0x26>
    return false;
 800e1ae:	2000      	movs	r0, #0
 800e1b0:	e7f3      	b.n	800e19a <RegionCommonChanVerifyDr+0x54>
        return false;
 800e1b2:	2000      	movs	r0, #0
 800e1b4:	e7f1      	b.n	800e19a <RegionCommonChanVerifyDr+0x54>

0800e1b6 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
    uint8_t index = id / 16;
 800e1b6:	ea4f 1c11 	mov.w	ip, r1, lsr #4

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800e1ba:	0913      	lsrs	r3, r2, #4
 800e1bc:	ebb3 1f11 	cmp.w	r3, r1, lsr #4
 800e1c0:	d30e      	bcc.n	800e1e0 <RegionCommonChanDisable+0x2a>
 800e1c2:	4291      	cmp	r1, r2
 800e1c4:	d20e      	bcs.n	800e1e4 <RegionCommonChanDisable+0x2e>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800e1c6:	f001 010f 	and.w	r1, r1, #15
 800e1ca:	2301      	movs	r3, #1
 800e1cc:	fa03 f101 	lsl.w	r1, r3, r1
 800e1d0:	f830 201c 	ldrh.w	r2, [r0, ip, lsl #1]
 800e1d4:	ea22 0101 	bic.w	r1, r2, r1
 800e1d8:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]

    return true;
 800e1dc:	4618      	mov	r0, r3
 800e1de:	4770      	bx	lr
        return false;
 800e1e0:	2000      	movs	r0, #0
 800e1e2:	4770      	bx	lr
 800e1e4:	2000      	movs	r0, #0
}
 800e1e6:	4770      	bx	lr

0800e1e8 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800e1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 800e1ea:	b188      	cbz	r0, 800e210 <RegionCommonCountChannels+0x28>
 800e1ec:	460c      	mov	r4, r1
 800e1ee:	4616      	mov	r6, r2
 800e1f0:	4607      	mov	r7, r0
    uint8_t nbChannels = 0;
 800e1f2:	2500      	movs	r5, #0
 800e1f4:	e008      	b.n	800e208 <RegionCommonCountChannels+0x20>
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 800e1f6:	2110      	movs	r1, #16
 800e1f8:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 800e1fc:	f7ff feea 	bl	800dfd4 <CountChannels>
 800e200:	4405      	add	r5, r0
 800e202:	b2ed      	uxtb	r5, r5
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800e204:	3401      	adds	r4, #1
 800e206:	b2e4      	uxtb	r4, r4
 800e208:	42b4      	cmp	r4, r6
 800e20a:	d3f4      	bcc.n	800e1f6 <RegionCommonCountChannels+0xe>
    }

    return nbChannels;
}
 800e20c:	4628      	mov	r0, r5
 800e20e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 800e210:	2500      	movs	r5, #0
 800e212:	e7fb      	b.n	800e20c <RegionCommonCountChannels+0x24>

0800e214 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800e214:	4684      	mov	ip, r0
 800e216:	b158      	cbz	r0, 800e230 <RegionCommonChanMaskCopy+0x1c>
 800e218:	b109      	cbz	r1, 800e21e <RegionCommonChanMaskCopy+0xa>
    {
        for( uint8_t i = 0; i < len; i++ )
 800e21a:	2300      	movs	r3, #0
 800e21c:	e006      	b.n	800e22c <RegionCommonChanMaskCopy+0x18>
 800e21e:	4770      	bx	lr
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 800e220:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800e224:	f82c 0013 	strh.w	r0, [ip, r3, lsl #1]
        for( uint8_t i = 0; i < len; i++ )
 800e228:	3301      	adds	r3, #1
 800e22a:	b2db      	uxtb	r3, r3
 800e22c:	4293      	cmp	r3, r2
 800e22e:	d3f7      	bcc.n	800e220 <RegionCommonChanMaskCopy+0xc>
        }
    }
}
 800e230:	4770      	bx	lr

0800e232 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800e232:	b082      	sub	sp, #8
 800e234:	b538      	push	{r3, r4, r5, lr}
 800e236:	4604      	mov	r4, r0
 800e238:	460d      	mov	r5, r1
 800e23a:	4611      	mov	r1, r2
 800e23c:	aa04      	add	r2, sp, #16
 800e23e:	f842 3f04 	str.w	r3, [r2, #4]!
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800e242:	ca0c      	ldmia	r2, {r2, r3}
 800e244:	f7ff fea9 	bl	800df9a <GetDutyCycle>

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800e248:	68e3      	ldr	r3, [r4, #12]
 800e24a:	fb05 f000 	mul.w	r0, r5, r0
 800e24e:	4283      	cmp	r3, r0
 800e250:	d905      	bls.n	800e25e <RegionCommonSetBandTxDone+0x2c>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 800e252:	1a18      	subs	r0, r3, r0
 800e254:	60e0      	str	r0, [r4, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 800e256:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e25a:	b002      	add	sp, #8
 800e25c:	4770      	bx	lr
        band->TimeCredits = 0;
 800e25e:	2300      	movs	r3, #0
 800e260:	60e3      	str	r3, [r4, #12]
}
 800e262:	e7f8      	b.n	800e256 <RegionCommonSetBandTxDone+0x24>

0800e264 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800e264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e268:	b089      	sub	sp, #36	; 0x24
 800e26a:	4607      	mov	r7, r0
 800e26c:	468b      	mov	fp, r1
 800e26e:	4691      	mov	r9, r2
 800e270:	4698      	mov	r8, r3
 800e272:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800e276:	f004 ff47 	bl	8013108 <UTIL_TIMER_GetCurrentTime>
 800e27a:	9004      	str	r0, [sp, #16]
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;

    for( uint8_t i = 0; i < nbBands; i++ )
 800e27c:	2400      	movs	r4, #0
    uint8_t validBands = 0;
 800e27e:	4626      	mov	r6, r4
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800e280:	f04f 33ff 	mov.w	r3, #4294967295
 800e284:	9305      	str	r3, [sp, #20]
    for( uint8_t i = 0; i < nbBands; i++ )
 800e286:	e005      	b.n	800e294 <RegionCommonUpdateBandTimeOff+0x30>
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
        {
            bands[i].ReadyForTransmission = true;
 800e288:	2301      	movs	r3, #1
 800e28a:	752b      	strb	r3, [r5, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 800e28c:	441e      	add	r6, r3
 800e28e:	b2f6      	uxtb	r6, r6
    for( uint8_t i = 0; i < nbBands; i++ )
 800e290:	3401      	adds	r4, #1
 800e292:	b2e4      	uxtb	r4, r4
 800e294:	454c      	cmp	r4, r9
 800e296:	d25d      	bcs.n	800e354 <RegionCommonUpdateBandTimeOff+0xf0>
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800e298:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800e29c:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 800e2a0:	9b04      	ldr	r3, [sp, #16]
 800e2a2:	9302      	str	r3, [sp, #8]
 800e2a4:	ab13      	add	r3, sp, #76	; 0x4c
 800e2a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e2aa:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e2ae:	4653      	mov	r3, sl
 800e2b0:	4642      	mov	r2, r8
 800e2b2:	4639      	mov	r1, r7
 800e2b4:	4628      	mov	r0, r5
 800e2b6:	f7ff ff1f 	bl	800e0f8 <UpdateTimeCredits>
        creditCosts = expectedTimeOnAir * dutyCycle;
 800e2ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e2bc:	fb03 f300 	mul.w	r3, r3, r0
        if( ( bands[i].TimeCredits > creditCosts ) ||
 800e2c0:	68ea      	ldr	r2, [r5, #12]
 800e2c2:	429a      	cmp	r2, r3
 800e2c4:	d8e0      	bhi.n	800e288 <RegionCommonUpdateBandTimeOff+0x24>
 800e2c6:	f1b8 0f00 	cmp.w	r8, #0
 800e2ca:	d101      	bne.n	800e2d0 <RegionCommonUpdateBandTimeOff+0x6c>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800e2cc:	2f00      	cmp	r7, #0
 800e2ce:	d1db      	bne.n	800e288 <RegionCommonUpdateBandTimeOff+0x24>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 800e2d0:	2100      	movs	r1, #0
 800e2d2:	7529      	strb	r1, [r5, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 800e2d4:	6929      	ldr	r1, [r5, #16]
 800e2d6:	4299      	cmp	r1, r3
 800e2d8:	d907      	bls.n	800e2ea <RegionCommonUpdateBandTimeOff+0x86>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800e2da:	1a9b      	subs	r3, r3, r2
 800e2dc:	9a05      	ldr	r2, [sp, #20]
 800e2de:	429a      	cmp	r2, r3
 800e2e0:	bf28      	it	cs
 800e2e2:	461a      	movcs	r2, r3
 800e2e4:	9205      	str	r2, [sp, #20]
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 800e2e6:	3601      	adds	r6, #1
 800e2e8:	b2f6      	uxtb	r6, r6
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 800e2ea:	2f00      	cmp	r7, #0
 800e2ec:	d1d0      	bne.n	800e290 <RegionCommonUpdateBandTimeOff+0x2c>
            {
                SysTime_t backoffTimeRange = {
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	9306      	str	r3, [sp, #24]
 800e2f2:	f8ad 301c 	strh.w	r3, [sp, #28]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 800e2f6:	2864      	cmp	r0, #100	; 0x64
 800e2f8:	d024      	beq.n	800e344 <RegionCommonUpdateBandTimeOff+0xe0>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800e2fa:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800e2fe:	d025      	beq.n	800e34c <RegionCommonUpdateBandTimeOff+0xe8>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800e300:	4b19      	ldr	r3, [pc, #100]	; (800e368 <RegionCommonUpdateBandTimeOff+0x104>)
 800e302:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800e304:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e306:	4a18      	ldr	r2, [pc, #96]	; (800e368 <RegionCommonUpdateBandTimeOff+0x104>)
 800e308:	4293      	cmp	r3, r2
 800e30a:	d90c      	bls.n	800e326 <RegionCommonUpdateBandTimeOff+0xc2>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800e30c:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800e310:	3b30      	subs	r3, #48	; 0x30
 800e312:	4a16      	ldr	r2, [pc, #88]	; (800e36c <RegionCommonUpdateBandTimeOff+0x108>)
 800e314:	fba2 2303 	umull	r2, r3, r2, r3
 800e318:	0c1b      	lsrs	r3, r3, #16
 800e31a:	4a15      	ldr	r2, [pc, #84]	; (800e370 <RegionCommonUpdateBandTimeOff+0x10c>)
 800e31c:	fb03 2202 	mla	r2, r3, r2, r2
 800e320:	9b06      	ldr	r3, [sp, #24]
 800e322:	4413      	add	r3, r2
 800e324:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 800e326:	ad06      	add	r5, sp, #24
 800e328:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e32a:	9300      	str	r3, [sp, #0]
 800e32c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e32e:	e895 0006 	ldmia.w	r5, {r1, r2}
 800e332:	4628      	mov	r0, r5
 800e334:	f004 fdf9 	bl	8012f2a <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 800e338:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e33c:	f004 fe6e 	bl	801301c <SysTimeToMs>
 800e340:	9005      	str	r0, [sp, #20]
 800e342:	e7a5      	b.n	800e290 <RegionCommonUpdateBandTimeOff+0x2c>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 800e344:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800e348:	9306      	str	r3, [sp, #24]
 800e34a:	e7db      	b.n	800e304 <RegionCommonUpdateBandTimeOff+0xa0>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 800e34c:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 800e350:	9306      	str	r3, [sp, #24]
 800e352:	e7d7      	b.n	800e304 <RegionCommonUpdateBandTimeOff+0xa0>
            }
        }
    }

    if( validBands == 0 )
 800e354:	b11e      	cbz	r6, 800e35e <RegionCommonUpdateBandTimeOff+0xfa>
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
    }
    return minTimeToWait;
}
 800e356:	9805      	ldr	r0, [sp, #20]
 800e358:	b009      	add	sp, #36	; 0x24
 800e35a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return TIMERTIME_T_MAX;
 800e35e:	f04f 33ff 	mov.w	r3, #4294967295
 800e362:	9305      	str	r3, [sp, #20]
 800e364:	e7f7      	b.n	800e356 <RegionCommonUpdateBandTimeOff+0xf2>
 800e366:	bf00      	nop
 800e368:	0001ec30 	.word	0x0001ec30
 800e36c:	c22e4507 	.word	0xc22e4507
 800e370:	00015180 	.word	0x00015180

0800e374 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800e374:	7803      	ldrb	r3, [r0, #0]
 800e376:	2b03      	cmp	r3, #3
 800e378:	d001      	beq.n	800e37e <RegionCommonParseLinkAdrReq+0xa>
    uint8_t retIndex = 0;
 800e37a:	2000      	movs	r0, #0

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
    }
    return retIndex;
}
 800e37c:	4770      	bx	lr
        linkAdrParams->Datarate = payload[1];
 800e37e:	7842      	ldrb	r2, [r0, #1]
 800e380:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e384:	704b      	strb	r3, [r1, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800e386:	f003 030f 	and.w	r3, r3, #15
 800e38a:	708b      	strb	r3, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800e38c:	0913      	lsrs	r3, r2, #4
 800e38e:	704b      	strb	r3, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800e390:	7883      	ldrb	r3, [r0, #2]
 800e392:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800e394:	78c2      	ldrb	r2, [r0, #3]
 800e396:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e39a:	808b      	strh	r3, [r1, #4]
        linkAdrParams->NbRep = payload[4];
 800e39c:	7903      	ldrb	r3, [r0, #4]
 800e39e:	700b      	strb	r3, [r1, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800e3a0:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800e3a4:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800e3a6:	f003 030f 	and.w	r3, r3, #15
 800e3aa:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
 800e3ac:	2005      	movs	r0, #5
 800e3ae:	4770      	bx	lr

0800e3b0 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800e3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3b4:	b085      	sub	sp, #20
 800e3b6:	4604      	mov	r4, r0
 800e3b8:	4688      	mov	r8, r1
 800e3ba:	4617      	mov	r7, r2
 800e3bc:	461e      	mov	r6, r3
    uint8_t status = verifyParams->Status;
 800e3be:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 800e3c0:	f990 a006 	ldrsb.w	sl, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
 800e3c4:	f990 9007 	ldrsb.w	r9, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 800e3c8:	f990 b008 	ldrsb.w	fp, [r0, #8]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800e3cc:	7943      	ldrb	r3, [r0, #5]
 800e3ce:	b92b      	cbnz	r3, 800e3dc <RegionCommonLinkAdrReqVerifyParams+0x2c>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 800e3d0:	f990 b00b 	ldrsb.w	fp, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 800e3d4:	f990 a009 	ldrsb.w	sl, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 800e3d8:	f990 900a 	ldrsb.w	r9, [r0, #10]
    }

    if( status != 0 )
 800e3dc:	b355      	cbz	r5, 800e434 <RegionCommonLinkAdrReqVerifyParams+0x84>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 800e3de:	f1ba 0f0f 	cmp.w	sl, #15
 800e3e2:	d114      	bne.n	800e40e <RegionCommonLinkAdrReqVerifyParams+0x5e>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 800e3e4:	f994 a009 	ldrsb.w	sl, [r4, #9]
        {
            status &= 0xFD; // Datarate KO
        }

        // Verify tx power
        if( txPower == 0x0F )
 800e3e8:	f1b9 0f0f 	cmp.w	r9, #15
 800e3ec:	d020      	beq.n	800e430 <RegionCommonLinkAdrReqVerifyParams+0x80>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800e3ee:	f994 301d 	ldrsb.w	r3, [r4, #29]
 800e3f2:	9303      	str	r3, [sp, #12]
 800e3f4:	f994 201c 	ldrsb.w	r2, [r4, #28]
 800e3f8:	461c      	mov	r4, r3
 800e3fa:	4619      	mov	r1, r3
 800e3fc:	4648      	mov	r0, r9
 800e3fe:	f7ff fe98 	bl	800e132 <RegionCommonValueInRange>
 800e402:	b9b8      	cbnz	r0, 800e434 <RegionCommonLinkAdrReqVerifyParams+0x84>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 800e404:	454c      	cmp	r4, r9
 800e406:	dc21      	bgt.n	800e44c <RegionCommonLinkAdrReqVerifyParams+0x9c>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 800e408:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
 800e40c:	e012      	b.n	800e434 <RegionCommonLinkAdrReqVerifyParams+0x84>
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800e40e:	69a3      	ldr	r3, [r4, #24]
 800e410:	9301      	str	r3, [sp, #4]
 800e412:	f994 3015 	ldrsb.w	r3, [r4, #21]
 800e416:	9300      	str	r3, [sp, #0]
 800e418:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800e41c:	4652      	mov	r2, sl
 800e41e:	6921      	ldr	r1, [r4, #16]
 800e420:	7b20      	ldrb	r0, [r4, #12]
 800e422:	f7ff fe90 	bl	800e146 <RegionCommonChanVerifyDr>
 800e426:	2800      	cmp	r0, #0
 800e428:	d1de      	bne.n	800e3e8 <RegionCommonLinkAdrReqVerifyParams+0x38>
            status &= 0xFD; // Datarate KO
 800e42a:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
 800e42e:	e7db      	b.n	800e3e8 <RegionCommonLinkAdrReqVerifyParams+0x38>
            txPower =  verifyParams->CurrentTxPower;
 800e430:	f994 900a 	ldrsb.w	r9, [r4, #10]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 800e434:	2d07      	cmp	r5, #7
 800e436:	d00c      	beq.n	800e452 <RegionCommonLinkAdrReqVerifyParams+0xa2>
            nbRepetitions = 1;
        }
    }

    // Apply changes
    *dr = datarate;
 800e438:	f888 a000 	strb.w	sl, [r8]
    *txPow = txPower;
 800e43c:	f887 9000 	strb.w	r9, [r7]
    *nbRep = nbRepetitions;
 800e440:	f886 b000 	strb.w	fp, [r6]

    return status;
}
 800e444:	4628      	mov	r0, r5
 800e446:	b005      	add	sp, #20
 800e448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                txPower = verifyParams->MaxTxPower;
 800e44c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800e450:	e7f0      	b.n	800e434 <RegionCommonLinkAdrReqVerifyParams+0x84>
        if( nbRepetitions == 0 )
 800e452:	f1bb 0f00 	cmp.w	fp, #0
 800e456:	d1ef      	bne.n	800e438 <RegionCommonLinkAdrReqVerifyParams+0x88>
            nbRepetitions = 1;
 800e458:	f04f 0b01 	mov.w	fp, #1
 800e45c:	e7ec      	b.n	800e438 <RegionCommonLinkAdrReqVerifyParams+0x88>
	...

0800e460 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 800e460:	4b02      	ldr	r3, [pc, #8]	; (800e46c <RegionCommonComputeSymbolTimeLoRa+0xc>)
 800e462:	fa03 f000 	lsl.w	r0, r3, r0
}
 800e466:	fbb0 f0f1 	udiv	r0, r0, r1
 800e46a:	4770      	bx	lr
 800e46c:	000f4240 	.word	0x000f4240

0800e470 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}
 800e470:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800e474:	fbb3 f0f0 	udiv	r0, r3, r0
 800e478:	4770      	bx	lr
	...

0800e47c <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 800e47c:	b500      	push	{lr}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800e47e:	f1a1 0c04 	sub.w	ip, r1, #4
 800e482:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
 800e486:	fb0e f202 	mul.w	r2, lr, r2
 800e48a:	fb00 220c 	mla	r2, r0, ip, r2
 800e48e:	0052      	lsls	r2, r2, #1
 800e490:	d021      	beq.n	800e4d6 <RegionCommonComputeRxWindowParameters+0x5a>
 800e492:	4402      	add	r2, r0
 800e494:	3a01      	subs	r2, #1
 800e496:	fbb2 f2f0 	udiv	r2, r2, r0
 800e49a:	4291      	cmp	r1, r2
 800e49c:	bf38      	it	cc
 800e49e:	4611      	movcc	r1, r2
 800e4a0:	9a01      	ldr	r2, [sp, #4]
 800e4a2:	6011      	str	r1, [r2, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800e4a4:	0082      	lsls	r2, r0, #2
 800e4a6:	fb00 f101 	mul.w	r1, r0, r1
 800e4aa:	b1b9      	cbz	r1, 800e4dc <RegionCommonComputeRxWindowParameters+0x60>
 800e4ac:	3101      	adds	r1, #1
 800e4ae:	0849      	lsrs	r1, r1, #1
 800e4b0:	1a51      	subs	r1, r2, r1
 800e4b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e4b6:	fb02 1313 	mls	r3, r2, r3, r1
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	dd10      	ble.n	800e4e0 <RegionCommonComputeRxWindowParameters+0x64>
 800e4be:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 800e4c2:	4a0b      	ldr	r2, [pc, #44]	; (800e4f0 <RegionCommonComputeRxWindowParameters+0x74>)
 800e4c4:	fb82 1203 	smull	r1, r2, r2, r3
 800e4c8:	17db      	asrs	r3, r3, #31
 800e4ca:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800e4ce:	9a02      	ldr	r2, [sp, #8]
 800e4d0:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 800e4d2:	f85d fb04 	ldr.w	pc, [sp], #4
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800e4d6:	fbb2 f2f0 	udiv	r2, r2, r0
 800e4da:	e7de      	b.n	800e49a <RegionCommonComputeRxWindowParameters+0x1e>
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800e4dc:	0849      	lsrs	r1, r1, #1
 800e4de:	e7e7      	b.n	800e4b0 <RegionCommonComputeRxWindowParameters+0x34>
 800e4e0:	4a03      	ldr	r2, [pc, #12]	; (800e4f0 <RegionCommonComputeRxWindowParameters+0x74>)
 800e4e2:	fb82 1203 	smull	r1, r2, r2, r3
 800e4e6:	17db      	asrs	r3, r3, #31
 800e4e8:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800e4ec:	e7ef      	b.n	800e4ce <RegionCommonComputeRxWindowParameters+0x52>
 800e4ee:	bf00      	nop
 800e4f0:	10624dd3 	.word	0x10624dd3

0800e4f4 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800e4f4:	b538      	push	{r3, r4, r5, lr}
 800e4f6:	460d      	mov	r5, r1
 800e4f8:	4614      	mov	r4, r2
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800e4fa:	0040      	lsls	r0, r0, #1
 800e4fc:	f7f2 f9ba 	bl	8000874 <__aeabi_ui2f>
 800e500:	4601      	mov	r1, r0
 800e502:	4628      	mov	r0, r5
 800e504:	f7f2 f904 	bl	8000710 <__aeabi_fsub>
 800e508:	4621      	mov	r1, r4
 800e50a:	f7f2 f901 	bl	8000710 <__aeabi_fsub>
 800e50e:	f7f1 fff3 	bl	80004f8 <__aeabi_f2d>
 800e512:	f005 fd49 	bl	8013fa8 <floor>
 800e516:	f7f2 f8cf 	bl	80006b8 <__aeabi_d2iz>

    return phyTxPower;
}
 800e51a:	b240      	sxtb	r0, r0
 800e51c:	bd38      	pop	{r3, r4, r5, pc}

0800e51e <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 800e51e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e522:	b083      	sub	sp, #12
 800e524:	4605      	mov	r5, r0
 800e526:	468b      	mov	fp, r1
 800e528:	9200      	str	r2, [sp, #0]
 800e52a:	9301      	str	r3, [sp, #4]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800e52c:	2600      	movs	r6, #0
 800e52e:	46b0      	mov	r8, r6
    uint8_t nbRestrictedChannelsCount = 0;
 800e530:	46b2      	mov	sl, r6
    uint8_t nbChannelCount = 0;
 800e532:	46b1      	mov	r9, r6
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800e534:	e04a      	b.n	800e5cc <RegionCommonCountNbOfEnabledChannels+0xae>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800e536:	7a3a      	ldrb	r2, [r7, #8]
 800e538:	f342 0103 	sbfx	r1, r2, #0, #4
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800e53c:	f342 1203 	sbfx	r2, r2, #4, #4
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800e540:	b252      	sxtb	r2, r2
 800e542:	b249      	sxtb	r1, r1
 800e544:	f995 0001 	ldrsb.w	r0, [r5, #1]
 800e548:	f7ff fdf3 	bl	800e132 <RegionCommonValueInRange>
 800e54c:	b178      	cbz	r0, 800e56e <RegionCommonCountNbOfEnabledChannels+0x50>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 800e54e:	68ea      	ldr	r2, [r5, #12]
 800e550:	7a7b      	ldrb	r3, [r7, #9]
 800e552:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e556:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e55a:	7d1b      	ldrb	r3, [r3, #20]
 800e55c:	b35b      	cbz	r3, 800e5b6 <RegionCommonCountNbOfEnabledChannels+0x98>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
                    continue;
                }
                enabledChannels[nbChannelCount++] = i + j;
 800e55e:	f109 0301 	add.w	r3, r9, #1
 800e562:	eb08 0204 	add.w	r2, r8, r4
 800e566:	f80b 2009 	strb.w	r2, [fp, r9]
 800e56a:	fa5f f983 	uxtb.w	r9, r3
        for( uint8_t j = 0; j < 16; j++ )
 800e56e:	3401      	adds	r4, #1
 800e570:	b2e4      	uxtb	r4, r4
 800e572:	2c0f      	cmp	r4, #15
 800e574:	d824      	bhi.n	800e5c0 <RegionCommonCountNbOfEnabledChannels+0xa2>
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 800e576:	686b      	ldr	r3, [r5, #4]
 800e578:	0072      	lsls	r2, r6, #1
 800e57a:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 800e57e:	4123      	asrs	r3, r4
 800e580:	f013 0f01 	tst.w	r3, #1
 800e584:	d0f3      	beq.n	800e56e <RegionCommonCountNbOfEnabledChannels+0x50>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 800e586:	68a8      	ldr	r0, [r5, #8]
 800e588:	eb08 0304 	add.w	r3, r8, r4
 800e58c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e590:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 800e594:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d0e8      	beq.n	800e56e <RegionCommonCountNbOfEnabledChannels+0x50>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800e59c:	782b      	ldrb	r3, [r5, #0]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d1c9      	bne.n	800e536 <RegionCommonCountNbOfEnabledChannels+0x18>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 800e5a2:	696b      	ldr	r3, [r5, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d0c6      	beq.n	800e536 <RegionCommonCountNbOfEnabledChannels+0x18>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 800e5a8:	5a9b      	ldrh	r3, [r3, r2]
 800e5aa:	fa43 f104 	asr.w	r1, r3, r4
 800e5ae:	f011 0f01 	tst.w	r1, #1
 800e5b2:	d1c0      	bne.n	800e536 <RegionCommonCountNbOfEnabledChannels+0x18>
 800e5b4:	e7db      	b.n	800e56e <RegionCommonCountNbOfEnabledChannels+0x50>
                    nbRestrictedChannelsCount++;
 800e5b6:	f10a 0a01 	add.w	sl, sl, #1
 800e5ba:	fa5f fa8a 	uxtb.w	sl, sl
                    continue;
 800e5be:	e7d6      	b.n	800e56e <RegionCommonCountNbOfEnabledChannels+0x50>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800e5c0:	f108 0810 	add.w	r8, r8, #16
 800e5c4:	fa5f f888 	uxtb.w	r8, r8
 800e5c8:	3601      	adds	r6, #1
 800e5ca:	b2f6      	uxtb	r6, r6
 800e5cc:	fa1f f388 	uxth.w	r3, r8
 800e5d0:	8a2a      	ldrh	r2, [r5, #16]
 800e5d2:	4293      	cmp	r3, r2
 800e5d4:	d201      	bcs.n	800e5da <RegionCommonCountNbOfEnabledChannels+0xbc>
        for( uint8_t j = 0; j < 16; j++ )
 800e5d6:	2400      	movs	r4, #0
 800e5d8:	e7cb      	b.n	800e572 <RegionCommonCountNbOfEnabledChannels+0x54>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 800e5da:	9b00      	ldr	r3, [sp, #0]
 800e5dc:	f883 9000 	strb.w	r9, [r3]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800e5e0:	9b01      	ldr	r3, [sp, #4]
 800e5e2:	f883 a000 	strb.w	sl, [r3]
}
 800e5e6:	b003      	add	sp, #12
 800e5e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e5ec <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 800e5ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e5f0:	b085      	sub	sp, #20
 800e5f2:	4604      	mov	r4, r0
 800e5f4:	460f      	mov	r7, r1
 800e5f6:	4616      	mov	r6, r2
 800e5f8:	461d      	mov	r5, r3
 800e5fa:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800e5fe:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800e602:	6840      	ldr	r0, [r0, #4]
 800e604:	f004 fd8a 	bl	801311c <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800e608:	6823      	ldr	r3, [r4, #0]
 800e60a:	1a1b      	subs	r3, r3, r0
 800e60c:	f8c9 3000 	str.w	r3, [r9]
    *nbRestrictedChannels = 1;
 800e610:	2301      	movs	r3, #1
 800e612:	f888 3000 	strb.w	r3, [r8]
    *nbEnabledChannels = 0;
 800e616:	2300      	movs	r3, #0
 800e618:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800e61a:	6863      	ldr	r3, [r4, #4]
 800e61c:	b113      	cbz	r3, 800e624 <RegionCommonIdentifyChannels+0x38>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 800e61e:	6823      	ldr	r3, [r4, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800e620:	4283      	cmp	r3, r0
 800e622:	d81e      	bhi.n	800e662 <RegionCommonIdentifyChannels+0x76>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800e624:	2300      	movs	r3, #0
 800e626:	603b      	str	r3, [r7, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800e628:	69e3      	ldr	r3, [r4, #28]
 800e62a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800e62e:	781f      	ldrb	r7, [r3, #0]
 800e630:	69a3      	ldr	r3, [r4, #24]
 800e632:	9303      	str	r3, [sp, #12]
 800e634:	ab01      	add	r3, sp, #4
 800e636:	f104 020c 	add.w	r2, r4, #12
 800e63a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e63e:	e883 0003 	stmia.w	r3, {r0, r1}
 800e642:	7d23      	ldrb	r3, [r4, #20]
 800e644:	9300      	str	r3, [sp, #0]
 800e646:	7a23      	ldrb	r3, [r4, #8]
 800e648:	7a62      	ldrb	r2, [r4, #9]
 800e64a:	4661      	mov	r1, ip
 800e64c:	4638      	mov	r0, r7
 800e64e:	f7ff fe09 	bl	800e264 <RegionCommonUpdateBandTimeOff>
 800e652:	f8c9 0000 	str.w	r0, [r9]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800e656:	4643      	mov	r3, r8
 800e658:	462a      	mov	r2, r5
 800e65a:	4631      	mov	r1, r6
 800e65c:	69e0      	ldr	r0, [r4, #28]
 800e65e:	f7ff ff5e 	bl	800e51e <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 800e662:	782b      	ldrb	r3, [r5, #0]
 800e664:	b923      	cbnz	r3, 800e670 <RegionCommonIdentifyChannels+0x84>
    {
        *nextTxDelay = 0;
        return LORAMAC_STATUS_OK;
    }
    else if( *nbRestrictedChannels > 0 )
 800e666:	f898 3000 	ldrb.w	r3, [r8]
 800e66a:	b13b      	cbz	r3, 800e67c <RegionCommonIdentifyChannels+0x90>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 800e66c:	200b      	movs	r0, #11
 800e66e:	e002      	b.n	800e676 <RegionCommonIdentifyChannels+0x8a>
        *nextTxDelay = 0;
 800e670:	2000      	movs	r0, #0
 800e672:	f8c9 0000 	str.w	r0, [r9]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 800e676:	b005      	add	sp, #20
 800e678:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800e67c:	200c      	movs	r0, #12
 800e67e:	e7fa      	b.n	800e676 <RegionCommonIdentifyChannels+0x8a>

0800e680 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 800e680:	b570      	push	{r4, r5, r6, lr}
 800e682:	b082      	sub	sp, #8
 800e684:	4605      	mov	r5, r0
    int8_t drLocal = params->CurrentDr;
 800e686:	f990 4000 	ldrsb.w	r4, [r0]

    if( params->CurrentDr == params->MinDr )
 800e68a:	f990 6002 	ldrsb.w	r6, [r0, #2]
 800e68e:	42a6      	cmp	r6, r4
 800e690:	d011      	beq.n	800e6b6 <RegionCommonGetNextLowerTxDr+0x36>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 800e692:	3c01      	subs	r4, #1
 800e694:	b264      	sxtb	r4, r4
        } while( ( drLocal != params->MinDr ) &&
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 800e696:	42a6      	cmp	r6, r4
 800e698:	d00e      	beq.n	800e6b8 <RegionCommonGetNextLowerTxDr+0x38>
 800e69a:	68ab      	ldr	r3, [r5, #8]
 800e69c:	9301      	str	r3, [sp, #4]
 800e69e:	f995 3001 	ldrsb.w	r3, [r5, #1]
 800e6a2:	9300      	str	r3, [sp, #0]
 800e6a4:	4633      	mov	r3, r6
 800e6a6:	4622      	mov	r2, r4
 800e6a8:	6869      	ldr	r1, [r5, #4]
 800e6aa:	78e8      	ldrb	r0, [r5, #3]
 800e6ac:	f7ff fd4b 	bl	800e146 <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 800e6b0:	2800      	cmp	r0, #0
 800e6b2:	d0ee      	beq.n	800e692 <RegionCommonGetNextLowerTxDr+0x12>
 800e6b4:	e000      	b.n	800e6b8 <RegionCommonGetNextLowerTxDr+0x38>
        return params->MinDr;
 800e6b6:	4634      	mov	r4, r6

        return drLocal;
    }
}
 800e6b8:	4620      	mov	r0, r4
 800e6ba:	b002      	add	sp, #8
 800e6bc:	bd70      	pop	{r4, r5, r6, pc}

0800e6be <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
}
 800e6be:	4288      	cmp	r0, r1
 800e6c0:	bfb8      	it	lt
 800e6c2:	4608      	movlt	r0, r1
 800e6c4:	4770      	bx	lr
	...

0800e6c8 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 800e6c8:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 800e6cc:	4a05      	ldr	r2, [pc, #20]	; (800e6e4 <RegionCommonGetBandwidth+0x1c>)
 800e6ce:	4293      	cmp	r3, r2
 800e6d0:	d004      	beq.n	800e6dc <RegionCommonGetBandwidth+0x14>
 800e6d2:	4a05      	ldr	r2, [pc, #20]	; (800e6e8 <RegionCommonGetBandwidth+0x20>)
 800e6d4:	4293      	cmp	r3, r2
 800e6d6:	d103      	bne.n	800e6e0 <RegionCommonGetBandwidth+0x18>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 800e6d8:	2002      	movs	r0, #2
 800e6da:	4770      	bx	lr
            return 1;
 800e6dc:	2001      	movs	r0, #1
 800e6de:	4770      	bx	lr
    switch( bandwidths[drIndex] )
 800e6e0:	2000      	movs	r0, #0
    }
}
 800e6e2:	4770      	bx	lr
 800e6e4:	0003d090 	.word	0x0003d090
 800e6e8:	0007a120 	.word	0x0007a120

0800e6ec <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 800e6ec:	b500      	push	{lr}
 800e6ee:	b085      	sub	sp, #20
    if ( rxSlot < RX_SLOT_NONE )
 800e6f0:	2805      	cmp	r0, #5
 800e6f2:	d80e      	bhi.n	800e712 <RegionCommonRxConfigPrint+0x26>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 800e6f4:	9202      	str	r2, [sp, #8]
 800e6f6:	9101      	str	r1, [sp, #4]
 800e6f8:	4b0a      	ldr	r3, [pc, #40]	; (800e724 <RegionCommonRxConfigPrint+0x38>)
 800e6fa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800e6fe:	9300      	str	r3, [sp, #0]
 800e700:	4b09      	ldr	r3, [pc, #36]	; (800e728 <RegionCommonRxConfigPrint+0x3c>)
 800e702:	2201      	movs	r2, #1
 800e704:	2100      	movs	r1, #0
 800e706:	2002      	movs	r0, #2
 800e708:	f004 f9ea 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 800e70c:	b005      	add	sp, #20
 800e70e:	f85d fb04 	ldr.w	pc, [sp], #4
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 800e712:	9201      	str	r2, [sp, #4]
 800e714:	9100      	str	r1, [sp, #0]
 800e716:	4b05      	ldr	r3, [pc, #20]	; (800e72c <RegionCommonRxConfigPrint+0x40>)
 800e718:	2201      	movs	r2, #1
 800e71a:	2100      	movs	r1, #0
 800e71c:	2002      	movs	r0, #2
 800e71e:	f004 f9df 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
}
 800e722:	e7f3      	b.n	800e70c <RegionCommonRxConfigPrint+0x20>
 800e724:	080148d4 	.word	0x080148d4
 800e728:	0801486c 	.word	0x0801486c
 800e72c:	0801488c 	.word	0x0801488c

0800e730 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 800e730:	b500      	push	{lr}
 800e732:	b083      	sub	sp, #12
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 800e734:	9101      	str	r1, [sp, #4]
 800e736:	9000      	str	r0, [sp, #0]
 800e738:	4b04      	ldr	r3, [pc, #16]	; (800e74c <RegionCommonTxConfigPrint+0x1c>)
 800e73a:	2201      	movs	r2, #1
 800e73c:	2100      	movs	r1, #0
 800e73e:	2002      	movs	r0, #2
 800e740:	f004 f9ce 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
}
 800e744:	b003      	add	sp, #12
 800e746:	f85d fb04 	ldr.w	pc, [sp], #4
 800e74a:	bf00      	nop
 800e74c:	080148a8 	.word	0x080148a8

0800e750 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 800e750:	b538      	push	{r3, r4, r5, lr}
 800e752:	4604      	mov	r4, r0
 800e754:	460d      	mov	r5, r1
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800e756:	4b1b      	ldr	r3, [pc, #108]	; (800e7c4 <VerifyRfFreq+0x74>)
 800e758:	6a1b      	ldr	r3, [r3, #32]
 800e75a:	4798      	blx	r3
 800e75c:	b130      	cbz	r0, 800e76c <VerifyRfFreq+0x1c>
    {
        return false;
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 800e75e:	4b1a      	ldr	r3, [pc, #104]	; (800e7c8 <VerifyRfFreq+0x78>)
 800e760:	4423      	add	r3, r4
 800e762:	4a1a      	ldr	r2, [pc, #104]	; (800e7cc <VerifyRfFreq+0x7c>)
 800e764:	4293      	cmp	r3, r2
 800e766:	d802      	bhi.n	800e76e <VerifyRfFreq+0x1e>
    {
        *band = 2;
 800e768:	2302      	movs	r3, #2
 800e76a:	702b      	strb	r3, [r5, #0]
    else
    {
        return false;
    }
    return true;
}
 800e76c:	bd38      	pop	{r3, r4, r5, pc}
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 800e76e:	4b18      	ldr	r3, [pc, #96]	; (800e7d0 <VerifyRfFreq+0x80>)
 800e770:	4423      	add	r3, r4
 800e772:	4a18      	ldr	r2, [pc, #96]	; (800e7d4 <VerifyRfFreq+0x84>)
 800e774:	4293      	cmp	r3, r2
 800e776:	d802      	bhi.n	800e77e <VerifyRfFreq+0x2e>
        *band = 0;
 800e778:	2300      	movs	r3, #0
 800e77a:	702b      	strb	r3, [r5, #0]
 800e77c:	e7f6      	b.n	800e76c <VerifyRfFreq+0x1c>
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 800e77e:	4b16      	ldr	r3, [pc, #88]	; (800e7d8 <VerifyRfFreq+0x88>)
 800e780:	4423      	add	r3, r4
 800e782:	4a16      	ldr	r2, [pc, #88]	; (800e7dc <VerifyRfFreq+0x8c>)
 800e784:	4293      	cmp	r3, r2
 800e786:	d802      	bhi.n	800e78e <VerifyRfFreq+0x3e>
        *band = 1;
 800e788:	2301      	movs	r3, #1
 800e78a:	702b      	strb	r3, [r5, #0]
 800e78c:	e7ee      	b.n	800e76c <VerifyRfFreq+0x1c>
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 800e78e:	4b14      	ldr	r3, [pc, #80]	; (800e7e0 <VerifyRfFreq+0x90>)
 800e790:	4423      	add	r3, r4
 800e792:	4a14      	ldr	r2, [pc, #80]	; (800e7e4 <VerifyRfFreq+0x94>)
 800e794:	4293      	cmp	r3, r2
 800e796:	d802      	bhi.n	800e79e <VerifyRfFreq+0x4e>
        *band = 5;
 800e798:	2305      	movs	r3, #5
 800e79a:	702b      	strb	r3, [r5, #0]
 800e79c:	e7e6      	b.n	800e76c <VerifyRfFreq+0x1c>
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 800e79e:	4b12      	ldr	r3, [pc, #72]	; (800e7e8 <VerifyRfFreq+0x98>)
 800e7a0:	4423      	add	r3, r4
 800e7a2:	4a12      	ldr	r2, [pc, #72]	; (800e7ec <VerifyRfFreq+0x9c>)
 800e7a4:	4293      	cmp	r3, r2
 800e7a6:	d802      	bhi.n	800e7ae <VerifyRfFreq+0x5e>
        *band = 3;
 800e7a8:	2303      	movs	r3, #3
 800e7aa:	702b      	strb	r3, [r5, #0]
 800e7ac:	e7de      	b.n	800e76c <VerifyRfFreq+0x1c>
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 800e7ae:	4b10      	ldr	r3, [pc, #64]	; (800e7f0 <VerifyRfFreq+0xa0>)
 800e7b0:	4423      	add	r3, r4
 800e7b2:	4a10      	ldr	r2, [pc, #64]	; (800e7f4 <VerifyRfFreq+0xa4>)
 800e7b4:	4293      	cmp	r3, r2
 800e7b6:	d802      	bhi.n	800e7be <VerifyRfFreq+0x6e>
        *band = 4;
 800e7b8:	2304      	movs	r3, #4
 800e7ba:	702b      	strb	r3, [r5, #0]
 800e7bc:	e7d6      	b.n	800e76c <VerifyRfFreq+0x1c>
        return false;
 800e7be:	2000      	movs	r0, #0
 800e7c0:	e7d4      	b.n	800e76c <VerifyRfFreq+0x1c>
 800e7c2:	bf00      	nop
 800e7c4:	08014f0c 	.word	0x08014f0c
 800e7c8:	cc8faa40 	.word	0xcc8faa40
 800e7cc:	001e847f 	.word	0x001e847f
 800e7d0:	cc7125c0 	.word	0xcc7125c0
 800e7d4:	002dc6c0 	.word	0x002dc6c0
 800e7d8:	cc435eff 	.word	0xcc435eff
 800e7dc:	000927bf 	.word	0x000927bf
 800e7e0:	cc38b0a0 	.word	0xcc38b0a0
 800e7e4:	0007a120 	.word	0x0007a120
 800e7e8:	cc2e0240 	.word	0xcc2e0240
 800e7ec:	0003d090 	.word	0x0003d090
 800e7f0:	cc296e60 	.word	0xcc296e60
 800e7f4:	000493e0 	.word	0x000493e0

0800e7f8 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800e7f8:	b570      	push	{r4, r5, r6, lr}
 800e7fa:	b084      	sub	sp, #16
 800e7fc:	4605      	mov	r5, r0
 800e7fe:	460c      	mov	r4, r1
    int8_t phyDr = DataratesEU868[datarate];
 800e800:	4b13      	ldr	r3, [pc, #76]	; (800e850 <GetTimeOnAir+0x58>)
 800e802:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 800e804:	4913      	ldr	r1, [pc, #76]	; (800e854 <GetTimeOnAir+0x5c>)
 800e806:	f7ff ff5f 	bl	800e6c8 <RegionCommonGetBandwidth>
 800e80a:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 800e80c:	2d07      	cmp	r5, #7
 800e80e:	d00e      	beq.n	800e82e <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800e810:	4b11      	ldr	r3, [pc, #68]	; (800e858 <GetTimeOnAir+0x60>)
 800e812:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800e814:	2001      	movs	r0, #1
 800e816:	9003      	str	r0, [sp, #12]
 800e818:	b2e4      	uxtb	r4, r4
 800e81a:	9402      	str	r4, [sp, #8]
 800e81c:	2300      	movs	r3, #0
 800e81e:	9301      	str	r3, [sp, #4]
 800e820:	2308      	movs	r3, #8
 800e822:	9300      	str	r3, [sp, #0]
 800e824:	4603      	mov	r3, r0
 800e826:	4632      	mov	r2, r6
 800e828:	47a8      	blx	r5
    }
    return timeOnAir;
}
 800e82a:	b004      	add	sp, #16
 800e82c:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800e82e:	4b0a      	ldr	r3, [pc, #40]	; (800e858 <GetTimeOnAir+0x60>)
 800e830:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800e832:	2301      	movs	r3, #1
 800e834:	9303      	str	r3, [sp, #12]
 800e836:	b2e4      	uxtb	r4, r4
 800e838:	9402      	str	r4, [sp, #8]
 800e83a:	2000      	movs	r0, #0
 800e83c:	9001      	str	r0, [sp, #4]
 800e83e:	2305      	movs	r3, #5
 800e840:	9300      	str	r3, [sp, #0]
 800e842:	4603      	mov	r3, r0
 800e844:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e848:	fb06 f202 	mul.w	r2, r6, r2
 800e84c:	47a8      	blx	r5
 800e84e:	e7ec      	b.n	800e82a <GetTimeOnAir+0x32>
 800e850:	0801490c 	.word	0x0801490c
 800e854:	080148ec 	.word	0x080148ec
 800e858:	08014f0c 	.word	0x08014f0c

0800e85c <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 800e85c:	b500      	push	{lr}
 800e85e:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800e860:	2300      	movs	r3, #0
 800e862:	9304      	str	r3, [sp, #16]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 800e864:	7803      	ldrb	r3, [r0, #0]
 800e866:	3b0b      	subs	r3, #11
 800e868:	2b2d      	cmp	r3, #45	; 0x2d
 800e86a:	d82f      	bhi.n	800e8cc <RegionEU868GetPhyParam+0x70>
 800e86c:	e8df f003 	tbb	[pc, r3]
 800e870:	3f393633 	.word	0x3f393633
 800e874:	504c4845 	.word	0x504c4845
 800e878:	2e5c5854 	.word	0x2e5c5854
 800e87c:	6e682e65 	.word	0x6e682e65
 800e880:	2e2e7774 	.word	0x2e2e7774
 800e884:	2e177f7b 	.word	0x2e177f7b
 800e888:	2e2e2e2e 	.word	0x2e2e2e2e
 800e88c:	2e2e2e2e 	.word	0x2e2e2e2e
 800e890:	2e2e2e2e 	.word	0x2e2e2e2e
 800e894:	2e8c8582 	.word	0x2e8c8582
 800e898:	2e928f2e 	.word	0x2e928f2e
 800e89c:	9b95      	.short	0x9b95
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 800e89e:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800e8a2:	f88d 3004 	strb.w	r3, [sp, #4]
 800e8a6:	2307      	movs	r3, #7
 800e8a8:	f88d 3005 	strb.w	r3, [sp, #5]
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	f88d 3006 	strb.w	r3, [sp, #6]
 800e8b2:	2310      	movs	r3, #16
 800e8b4:	f88d 3007 	strb.w	r3, [sp, #7]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800e8b8:	4b3e      	ldr	r3, [pc, #248]	; (800e9b4 <RegionEU868GetPhyParam+0x158>)
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800e8c0:	9202      	str	r2, [sp, #8]
 800e8c2:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800e8c4:	a801      	add	r0, sp, #4
 800e8c6:	f7ff fedb 	bl	800e680 <RegionCommonGetNextLowerTxDr>
 800e8ca:	9004      	str	r0, [sp, #16]
            break;
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 800e8cc:	9804      	ldr	r0, [sp, #16]
 800e8ce:	9005      	str	r0, [sp, #20]
}
 800e8d0:	b007      	add	sp, #28
 800e8d2:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800e8d6:	2340      	movs	r3, #64	; 0x40
 800e8d8:	9304      	str	r3, [sp, #16]
            break;
 800e8da:	e7f7      	b.n	800e8cc <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800e8dc:	2320      	movs	r3, #32
 800e8de:	9304      	str	r3, [sp, #16]
            break;
 800e8e0:	e7f4      	b.n	800e8cc <RegionEU868GetPhyParam+0x70>
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 800e8e2:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e8e6:	4a34      	ldr	r2, [pc, #208]	; (800e9b8 <RegionEU868GetPhyParam+0x15c>)
 800e8e8:	5cd3      	ldrb	r3, [r2, r3]
 800e8ea:	9304      	str	r3, [sp, #16]
            break;
 800e8ec:	e7ee      	b.n	800e8cc <RegionEU868GetPhyParam+0x70>
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 800e8ee:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e8f2:	4a32      	ldr	r2, [pc, #200]	; (800e9bc <RegionEU868GetPhyParam+0x160>)
 800e8f4:	5cd3      	ldrb	r3, [r2, r3]
 800e8f6:	9304      	str	r3, [sp, #16]
            break;
 800e8f8:	e7e8      	b.n	800e8cc <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 800e8fa:	2301      	movs	r3, #1
 800e8fc:	9304      	str	r3, [sp, #16]
            break;
 800e8fe:	e7e5      	b.n	800e8cc <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_MAX_RX_WINDOW;
 800e900:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800e904:	9304      	str	r3, [sp, #16]
            break;
 800e906:	e7e1      	b.n	800e8cc <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800e908:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e90c:	9304      	str	r3, [sp, #16]
            break;
 800e90e:	e7dd      	b.n	800e8cc <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800e910:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800e914:	9304      	str	r3, [sp, #16]
            break;
 800e916:	e7d9      	b.n	800e8cc <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800e918:	f241 3388 	movw	r3, #5000	; 0x1388
 800e91c:	9304      	str	r3, [sp, #16]
            break;
 800e91e:	e7d5      	b.n	800e8cc <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800e920:	f241 7370 	movw	r3, #6000	; 0x1770
 800e924:	9304      	str	r3, [sp, #16]
            break;
 800e926:	e7d1      	b.n	800e8cc <RegionEU868GetPhyParam+0x70>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 800e928:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800e92c:	4824      	ldr	r0, [pc, #144]	; (800e9c0 <RegionEU868GetPhyParam+0x164>)
 800e92e:	f002 fa21 	bl	8010d74 <randr>
 800e932:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800e936:	9004      	str	r0, [sp, #16]
            break;
 800e938:	e7c8      	b.n	800e8cc <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_RX_WND_2_FREQ;
 800e93a:	4b22      	ldr	r3, [pc, #136]	; (800e9c4 <RegionEU868GetPhyParam+0x168>)
 800e93c:	9304      	str	r3, [sp, #16]
            break;
 800e93e:	e7c5      	b.n	800e8cc <RegionEU868GetPhyParam+0x70>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800e940:	4b1c      	ldr	r3, [pc, #112]	; (800e9b4 <RegionEU868GetPhyParam+0x158>)
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800e948:	9304      	str	r3, [sp, #16]
            break;
 800e94a:	e7bf      	b.n	800e8cc <RegionEU868GetPhyParam+0x70>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800e94c:	4b19      	ldr	r3, [pc, #100]	; (800e9b4 <RegionEU868GetPhyParam+0x158>)
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 800e954:	9304      	str	r3, [sp, #16]
            break;
 800e956:	e7b9      	b.n	800e8cc <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 800e958:	2310      	movs	r3, #16
 800e95a:	9304      	str	r3, [sp, #16]
            break;
 800e95c:	e7b6      	b.n	800e8cc <RegionEU868GetPhyParam+0x70>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800e95e:	4b15      	ldr	r3, [pc, #84]	; (800e9b4 <RegionEU868GetPhyParam+0x158>)
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	9304      	str	r3, [sp, #16]
            break;
 800e964:	e7b2      	b.n	800e8cc <RegionEU868GetPhyParam+0x70>
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 800e966:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 800e96a:	9304      	str	r3, [sp, #16]
            break;
 800e96c:	e7ae      	b.n	800e8cc <RegionEU868GetPhyParam+0x70>
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 800e96e:	4b16      	ldr	r3, [pc, #88]	; (800e9c8 <RegionEU868GetPhyParam+0x16c>)
 800e970:	9304      	str	r3, [sp, #16]
            break;
 800e972:	e7ab      	b.n	800e8cc <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 800e974:	4b13      	ldr	r3, [pc, #76]	; (800e9c4 <RegionEU868GetPhyParam+0x168>)
 800e976:	9304      	str	r3, [sp, #16]
            break;
 800e978:	e7a8      	b.n	800e8cc <RegionEU868GetPhyParam+0x70>
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 800e97a:	2311      	movs	r3, #17
 800e97c:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 800e980:	2301      	movs	r3, #1
 800e982:	f88d 3011 	strb.w	r3, [sp, #17]
            break;
 800e986:	e7a1      	b.n	800e8cc <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 800e988:	2303      	movs	r3, #3
 800e98a:	9304      	str	r3, [sp, #16]
            break;
 800e98c:	e79e      	b.n	800e8cc <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 800e98e:	4b0d      	ldr	r3, [pc, #52]	; (800e9c4 <RegionEU868GetPhyParam+0x168>)
 800e990:	9304      	str	r3, [sp, #16]
            break;
 800e992:	e79b      	b.n	800e8cc <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 800e994:	2303      	movs	r3, #3
 800e996:	9304      	str	r3, [sp, #16]
            break;
 800e998:	e798      	b.n	800e8cc <RegionEU868GetPhyParam+0x70>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 800e99a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e99e:	4a0b      	ldr	r2, [pc, #44]	; (800e9cc <RegionEU868GetPhyParam+0x170>)
 800e9a0:	5cd3      	ldrb	r3, [r2, r3]
 800e9a2:	9304      	str	r3, [sp, #16]
            break;
 800e9a4:	e792      	b.n	800e8cc <RegionEU868GetPhyParam+0x70>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 800e9a6:	490a      	ldr	r1, [pc, #40]	; (800e9d0 <RegionEU868GetPhyParam+0x174>)
 800e9a8:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800e9ac:	f7ff fe8c 	bl	800e6c8 <RegionCommonGetBandwidth>
 800e9b0:	9004      	str	r0, [sp, #16]
            break;
 800e9b2:	e78b      	b.n	800e8cc <RegionEU868GetPhyParam+0x70>
 800e9b4:	20001020 	.word	0x20001020
 800e9b8:	08014914 	.word	0x08014914
 800e9bc:	0801491c 	.word	0x0801491c
 800e9c0:	fffffc18 	.word	0xfffffc18
 800e9c4:	33d3e608 	.word	0x33d3e608
 800e9c8:	4009999a 	.word	0x4009999a
 800e9cc:	0801490c 	.word	0x0801490c
 800e9d0:	080148ec 	.word	0x080148ec

0800e9d4 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800e9d4:	b510      	push	{r4, lr}
 800e9d6:	b082      	sub	sp, #8
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800e9d8:	4b0b      	ldr	r3, [pc, #44]	; (800ea08 <RegionEU868SetBandTxDone+0x34>)
 800e9da:	681a      	ldr	r2, [r3, #0]
 800e9dc:	7803      	ldrb	r3, [r0, #0]
 800e9de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e9e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e9e6:	7a5b      	ldrb	r3, [r3, #9]
 800e9e8:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800e9ec:	4b07      	ldr	r3, [pc, #28]	; (800ea0c <RegionEU868SetBandTxDone+0x38>)
 800e9ee:	681c      	ldr	r4, [r3, #0]
 800e9f0:	6903      	ldr	r3, [r0, #16]
 800e9f2:	9300      	str	r3, [sp, #0]
 800e9f4:	68c3      	ldr	r3, [r0, #12]
 800e9f6:	7842      	ldrb	r2, [r0, #1]
 800e9f8:	6881      	ldr	r1, [r0, #8]
 800e9fa:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 800e9fe:	f7ff fc18 	bl	800e232 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 800ea02:	b002      	add	sp, #8
 800ea04:	bd10      	pop	{r4, pc}
 800ea06:	bf00      	nop
 800ea08:	20001020 	.word	0x20001020
 800ea0c:	2000101c 	.word	0x2000101c

0800ea10 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 800ea10:	b530      	push	{r4, r5, lr}
 800ea12:	b0a5      	sub	sp, #148	; 0x94
 800ea14:	4604      	mov	r4, r0
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 800ea16:	2290      	movs	r2, #144	; 0x90
 800ea18:	2100      	movs	r1, #0
 800ea1a:	4668      	mov	r0, sp
 800ea1c:	f004 fe5c 	bl	80136d8 <memset>
 800ea20:	2364      	movs	r3, #100	; 0x64
 800ea22:	f8ad 3000 	strh.w	r3, [sp]
 800ea26:	f8ad 3018 	strh.w	r3, [sp, #24]
 800ea2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ea2e:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 800ea32:	210a      	movs	r1, #10
 800ea34:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
 800ea38:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 800ea3c:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 800ea40:	7b23      	ldrb	r3, [r4, #12]
 800ea42:	2b01      	cmp	r3, #1
 800ea44:	d032      	beq.n	800eaac <RegionEU868InitDefaults+0x9c>
 800ea46:	2b02      	cmp	r3, #2
 800ea48:	d03e      	beq.n	800eac8 <RegionEU868InitDefaults+0xb8>
 800ea4a:	b10b      	cbz	r3, 800ea50 <RegionEU868InitDefaults+0x40>
        {
            break;
        }
    }
#endif /* REGION_EU868 */
}
 800ea4c:	b025      	add	sp, #148	; 0x94
 800ea4e:	bd30      	pop	{r4, r5, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800ea50:	6823      	ldr	r3, [r4, #0]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d0fa      	beq.n	800ea4c <RegionEU868InitDefaults+0x3c>
 800ea56:	6863      	ldr	r3, [r4, #4]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d0f7      	beq.n	800ea4c <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800ea5c:	4d1f      	ldr	r5, [pc, #124]	; (800eadc <RegionEU868InitDefaults+0xcc>)
 800ea5e:	602b      	str	r3, [r5, #0]
            RegionBands = (Band_t*) params->Bands;
 800ea60:	68a0      	ldr	r0, [r4, #8]
 800ea62:	4b1f      	ldr	r3, [pc, #124]	; (800eae0 <RegionEU868InitDefaults+0xd0>)
 800ea64:	6018      	str	r0, [r3, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 800ea66:	2290      	movs	r2, #144	; 0x90
 800ea68:	4669      	mov	r1, sp
 800ea6a:	f002 f990 	bl	8010d8e <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 800ea6e:	682c      	ldr	r4, [r5, #0]
 800ea70:	4b1c      	ldr	r3, [pc, #112]	; (800eae4 <RegionEU868InitDefaults+0xd4>)
 800ea72:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ea76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 800ea7a:	f104 0c0c 	add.w	ip, r4, #12
 800ea7e:	f103 020c 	add.w	r2, r3, #12
 800ea82:	ca07      	ldmia	r2, {r0, r1, r2}
 800ea84:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 800ea88:	f104 0c18 	add.w	ip, r4, #24
 800ea8c:	3318      	adds	r3, #24
 800ea8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ea92:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800ea96:	2307      	movs	r3, #7
 800ea98:	f8a4 336c 	strh.w	r3, [r4, #876]	; 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800ea9c:	2201      	movs	r2, #1
 800ea9e:	f504 715b 	add.w	r1, r4, #876	; 0x36c
 800eaa2:	f504 7058 	add.w	r0, r4, #864	; 0x360
 800eaa6:	f7ff fbb5 	bl	800e214 <RegionCommonChanMaskCopy>
            break;
 800eaaa:	e7cf      	b.n	800ea4c <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 800eaac:	4b0b      	ldr	r3, [pc, #44]	; (800eadc <RegionEU868InitDefaults+0xcc>)
 800eaae:	6818      	ldr	r0, [r3, #0]
 800eab0:	2300      	movs	r3, #0
 800eab2:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 800eab4:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 800eab6:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800eab8:	2201      	movs	r2, #1
 800eaba:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 800eabe:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800eac2:	f7ff fba7 	bl	800e214 <RegionCommonChanMaskCopy>
            break;
 800eac6:	e7c1      	b.n	800ea4c <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 800eac8:	4b04      	ldr	r3, [pc, #16]	; (800eadc <RegionEU868InitDefaults+0xcc>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	f8b3 236c 	ldrh.w	r2, [r3, #876]	; 0x36c
 800ead0:	f8b3 1360 	ldrh.w	r1, [r3, #864]	; 0x360
 800ead4:	430a      	orrs	r2, r1
 800ead6:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
            break;
 800eada:	e7b7      	b.n	800ea4c <RegionEU868InitDefaults+0x3c>
 800eadc:	20001020 	.word	0x20001020
 800eae0:	2000101c 	.word	0x2000101c
 800eae4:	08014190 	.word	0x08014190

0800eae8 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800eae8:	b500      	push	{lr}
 800eaea:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    switch( phyAttribute )
 800eaec:	290f      	cmp	r1, #15
 800eaee:	d83c      	bhi.n	800eb6a <RegionEU868Verify+0x82>
 800eaf0:	e8df f001 	tbb	[pc, r1]
 800eaf4:	3b3b3b0a 	.word	0x3b3b3b0a
 800eaf8:	271d133b 	.word	0x271d133b
 800eafc:	3b31313b 	.word	0x3b31313b
 800eb00:	083b3b3b 	.word	0x083b3b3b
 800eb04:	2001      	movs	r0, #1
 800eb06:	e031      	b.n	800eb6c <RegionEU868Verify+0x84>
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 800eb08:	2300      	movs	r3, #0
 800eb0a:	f88d 3007 	strb.w	r3, [sp, #7]
            return VerifyRfFreq( verify->Frequency, &band );
 800eb0e:	f10d 0107 	add.w	r1, sp, #7
 800eb12:	6800      	ldr	r0, [r0, #0]
 800eb14:	f7ff fe1c 	bl	800e750 <VerifyRfFreq>
 800eb18:	e028      	b.n	800eb6c <RegionEU868Verify+0x84>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 800eb1a:	2207      	movs	r2, #7
 800eb1c:	2100      	movs	r1, #0
 800eb1e:	f990 0000 	ldrsb.w	r0, [r0]
 800eb22:	f7ff fb06 	bl	800e132 <RegionCommonValueInRange>
 800eb26:	3800      	subs	r0, #0
 800eb28:	bf18      	it	ne
 800eb2a:	2001      	movne	r0, #1
 800eb2c:	e01e      	b.n	800eb6c <RegionEU868Verify+0x84>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800eb2e:	2205      	movs	r2, #5
 800eb30:	2100      	movs	r1, #0
 800eb32:	f990 0000 	ldrsb.w	r0, [r0]
 800eb36:	f7ff fafc 	bl	800e132 <RegionCommonValueInRange>
 800eb3a:	3800      	subs	r0, #0
 800eb3c:	bf18      	it	ne
 800eb3e:	2001      	movne	r0, #1
 800eb40:	e014      	b.n	800eb6c <RegionEU868Verify+0x84>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 800eb42:	2207      	movs	r2, #7
 800eb44:	2100      	movs	r1, #0
 800eb46:	f990 0000 	ldrsb.w	r0, [r0]
 800eb4a:	f7ff faf2 	bl	800e132 <RegionCommonValueInRange>
 800eb4e:	3800      	subs	r0, #0
 800eb50:	bf18      	it	ne
 800eb52:	2001      	movne	r0, #1
 800eb54:	e00a      	b.n	800eb6c <RegionEU868Verify+0x84>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 800eb56:	2207      	movs	r2, #7
 800eb58:	2100      	movs	r1, #0
 800eb5a:	f990 0000 	ldrsb.w	r0, [r0]
 800eb5e:	f7ff fae8 	bl	800e132 <RegionCommonValueInRange>
 800eb62:	3800      	subs	r0, #0
 800eb64:	bf18      	it	ne
 800eb66:	2001      	movne	r0, #1
 800eb68:	e000      	b.n	800eb6c <RegionEU868Verify+0x84>
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
 800eb6a:	2000      	movs	r0, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 800eb6c:	b003      	add	sp, #12
 800eb6e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800eb74 <RegionEU868ChanMaskSet>:
    }
#endif /* REGION_EU868 */
}

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800eb74:	b508      	push	{r3, lr}
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 800eb76:	7903      	ldrb	r3, [r0, #4]
 800eb78:	b11b      	cbz	r3, 800eb82 <RegionEU868ChanMaskSet+0xe>
 800eb7a:	2b01      	cmp	r3, #1
 800eb7c:	d00b      	beq.n	800eb96 <RegionEU868ChanMaskSet+0x22>
 800eb7e:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 800eb80:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800eb82:	4b0a      	ldr	r3, [pc, #40]	; (800ebac <RegionEU868ChanMaskSet+0x38>)
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	2201      	movs	r2, #1
 800eb88:	6801      	ldr	r1, [r0, #0]
 800eb8a:	f503 7058 	add.w	r0, r3, #864	; 0x360
 800eb8e:	f7ff fb41 	bl	800e214 <RegionCommonChanMaskCopy>
    return true;
 800eb92:	2001      	movs	r0, #1
            break;
 800eb94:	e7f4      	b.n	800eb80 <RegionEU868ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800eb96:	4b05      	ldr	r3, [pc, #20]	; (800ebac <RegionEU868ChanMaskSet+0x38>)
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	2201      	movs	r2, #1
 800eb9c:	6801      	ldr	r1, [r0, #0]
 800eb9e:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 800eba2:	f7ff fb37 	bl	800e214 <RegionCommonChanMaskCopy>
    return true;
 800eba6:	2001      	movs	r0, #1
            break;
 800eba8:	e7ea      	b.n	800eb80 <RegionEU868ChanMaskSet+0xc>
 800ebaa:	bf00      	nop
 800ebac:	20001020 	.word	0x20001020

0800ebb0 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800ebb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ebb2:	b083      	sub	sp, #12
 800ebb4:	460e      	mov	r6, r1
 800ebb6:	4617      	mov	r7, r2
 800ebb8:	461c      	mov	r4, r3
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 800ebba:	2807      	cmp	r0, #7
 800ebbc:	bfa8      	it	ge
 800ebbe:	2007      	movge	r0, #7
 800ebc0:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 800ebc2:	4913      	ldr	r1, [pc, #76]	; (800ec10 <RegionEU868ComputeRxWindowParameters+0x60>)
 800ebc4:	f7ff fd80 	bl	800e6c8 <RegionCommonGetBandwidth>
 800ebc8:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 800ebca:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800ebce:	2b07      	cmp	r3, #7
 800ebd0:	d017      	beq.n	800ec02 <RegionEU868ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 800ebd2:	4a0f      	ldr	r2, [pc, #60]	; (800ec10 <RegionEU868ComputeRxWindowParameters+0x60>)
 800ebd4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ebd8:	4a0e      	ldr	r2, [pc, #56]	; (800ec14 <RegionEU868ComputeRxWindowParameters+0x64>)
 800ebda:	5cd0      	ldrb	r0, [r2, r3]
 800ebdc:	f7ff fc40 	bl	800e460 <RegionCommonComputeSymbolTimeLoRa>
 800ebe0:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800ebe2:	4b0d      	ldr	r3, [pc, #52]	; (800ec18 <RegionEU868ComputeRxWindowParameters+0x68>)
 800ebe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ebe6:	4798      	blx	r3
 800ebe8:	4603      	mov	r3, r0
 800ebea:	f104 020c 	add.w	r2, r4, #12
 800ebee:	9201      	str	r2, [sp, #4]
 800ebf0:	3408      	adds	r4, #8
 800ebf2:	9400      	str	r4, [sp, #0]
 800ebf4:	463a      	mov	r2, r7
 800ebf6:	4631      	mov	r1, r6
 800ebf8:	4628      	mov	r0, r5
 800ebfa:	f7ff fc3f 	bl	800e47c <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 800ebfe:	b003      	add	sp, #12
 800ec00:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 800ec02:	4a04      	ldr	r2, [pc, #16]	; (800ec14 <RegionEU868ComputeRxWindowParameters+0x64>)
 800ec04:	5cd0      	ldrb	r0, [r2, r3]
 800ec06:	f7ff fc33 	bl	800e470 <RegionCommonComputeSymbolTimeFsk>
 800ec0a:	4605      	mov	r5, r0
 800ec0c:	e7e9      	b.n	800ebe2 <RegionEU868ComputeRxWindowParameters+0x32>
 800ec0e:	bf00      	nop
 800ec10:	080148ec 	.word	0x080148ec
 800ec14:	0801490c 	.word	0x0801490c
 800ec18:	08014f0c 	.word	0x08014f0c

0800ec1c <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800ec1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec20:	b08a      	sub	sp, #40	; 0x28
 800ec22:	4604      	mov	r4, r0
 800ec24:	460f      	mov	r7, r1
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800ec26:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800ec2a:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800ec2e:	4b37      	ldr	r3, [pc, #220]	; (800ed0c <RegionEU868RxConfig+0xf0>)
 800ec30:	685b      	ldr	r3, [r3, #4]
 800ec32:	4798      	blx	r3
 800ec34:	2800      	cmp	r0, #0
 800ec36:	d167      	bne.n	800ed08 <RegionEU868RxConfig+0xec>
 800ec38:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800ec3a:	7ce3      	ldrb	r3, [r4, #19]
 800ec3c:	b983      	cbnz	r3, 800ec60 <RegionEU868RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800ec3e:	4b34      	ldr	r3, [pc, #208]	; (800ed10 <RegionEU868RxConfig+0xf4>)
 800ec40:	681a      	ldr	r2, [r3, #0]
 800ec42:	7823      	ldrb	r3, [r4, #0]
 800ec44:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800ec48:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800ec4c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ec50:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ec54:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800ec58:	f1b8 0f00 	cmp.w	r8, #0
 800ec5c:	d100      	bne.n	800ec60 <RegionEU868RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800ec5e:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 800ec60:	4b2c      	ldr	r3, [pc, #176]	; (800ed14 <RegionEU868RxConfig+0xf8>)
 800ec62:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 800ec66:	4b29      	ldr	r3, [pc, #164]	; (800ed0c <RegionEU868RxConfig+0xf0>)
 800ec68:	68db      	ldr	r3, [r3, #12]
 800ec6a:	4640      	mov	r0, r8
 800ec6c:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 800ec6e:	2d07      	cmp	r5, #7
 800ec70:	d02b      	beq.n	800ecca <RegionEU868RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800ec72:	4b26      	ldr	r3, [pc, #152]	; (800ed0c <RegionEU868RxConfig+0xf0>)
 800ec74:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800ec78:	7ca3      	ldrb	r3, [r4, #18]
 800ec7a:	9309      	str	r3, [sp, #36]	; 0x24
 800ec7c:	2601      	movs	r6, #1
 800ec7e:	9608      	str	r6, [sp, #32]
 800ec80:	2300      	movs	r3, #0
 800ec82:	9307      	str	r3, [sp, #28]
 800ec84:	9306      	str	r3, [sp, #24]
 800ec86:	9305      	str	r3, [sp, #20]
 800ec88:	9304      	str	r3, [sp, #16]
 800ec8a:	9303      	str	r3, [sp, #12]
 800ec8c:	8922      	ldrh	r2, [r4, #8]
 800ec8e:	9202      	str	r2, [sp, #8]
 800ec90:	2208      	movs	r2, #8
 800ec92:	9201      	str	r2, [sp, #4]
 800ec94:	9300      	str	r3, [sp, #0]
 800ec96:	4633      	mov	r3, r6
 800ec98:	464a      	mov	r2, r9
 800ec9a:	78a1      	ldrb	r1, [r4, #2]
 800ec9c:	4630      	mov	r0, r6
 800ec9e:	47d0      	blx	sl
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 800eca0:	7c63      	ldrb	r3, [r4, #17]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d02d      	beq.n	800ed02 <RegionEU868RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 800eca6:	4b1c      	ldr	r3, [pc, #112]	; (800ed18 <RegionEU868RxConfig+0xfc>)
 800eca8:	5d59      	ldrb	r1, [r3, r5]
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800ecaa:	4b18      	ldr	r3, [pc, #96]	; (800ed0c <RegionEU868RxConfig+0xf0>)
 800ecac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecae:	310d      	adds	r1, #13
 800ecb0:	b2c9      	uxtb	r1, r1
 800ecb2:	4630      	mov	r0, r6
 800ecb4:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800ecb6:	462a      	mov	r2, r5
 800ecb8:	4641      	mov	r1, r8
 800ecba:	7ce0      	ldrb	r0, [r4, #19]
 800ecbc:	f7ff fd16 	bl	800e6ec <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 800ecc0:	703d      	strb	r5, [r7, #0]
    return true;
 800ecc2:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 800ecc4:	b00a      	add	sp, #40	; 0x28
 800ecc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800ecca:	4b10      	ldr	r3, [pc, #64]	; (800ed0c <RegionEU868RxConfig+0xf0>)
 800eccc:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800ecd0:	7ca3      	ldrb	r3, [r4, #18]
 800ecd2:	9309      	str	r3, [sp, #36]	; 0x24
 800ecd4:	2000      	movs	r0, #0
 800ecd6:	9008      	str	r0, [sp, #32]
 800ecd8:	9007      	str	r0, [sp, #28]
 800ecda:	9006      	str	r0, [sp, #24]
 800ecdc:	2301      	movs	r3, #1
 800ecde:	9305      	str	r3, [sp, #20]
 800ece0:	9004      	str	r0, [sp, #16]
 800ece2:	9003      	str	r0, [sp, #12]
 800ece4:	8923      	ldrh	r3, [r4, #8]
 800ece6:	9302      	str	r3, [sp, #8]
 800ece8:	2305      	movs	r3, #5
 800ecea:	9301      	str	r3, [sp, #4]
 800ecec:	4b0b      	ldr	r3, [pc, #44]	; (800ed1c <RegionEU868RxConfig+0x100>)
 800ecee:	9300      	str	r3, [sp, #0]
 800ecf0:	4603      	mov	r3, r0
 800ecf2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ecf6:	fb02 f209 	mul.w	r2, r2, r9
 800ecfa:	f24c 3150 	movw	r1, #50000	; 0xc350
 800ecfe:	47d0      	blx	sl
 800ed00:	e7ce      	b.n	800eca0 <RegionEU868RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 800ed02:	4b07      	ldr	r3, [pc, #28]	; (800ed20 <RegionEU868RxConfig+0x104>)
 800ed04:	5d59      	ldrb	r1, [r3, r5]
 800ed06:	e7d0      	b.n	800ecaa <RegionEU868RxConfig+0x8e>
        return false;
 800ed08:	2000      	movs	r0, #0
 800ed0a:	e7db      	b.n	800ecc4 <RegionEU868RxConfig+0xa8>
 800ed0c:	08014f0c 	.word	0x08014f0c
 800ed10:	20001020 	.word	0x20001020
 800ed14:	0801490c 	.word	0x0801490c
 800ed18:	0801491c 	.word	0x0801491c
 800ed1c:	00014585 	.word	0x00014585
 800ed20:	08014914 	.word	0x08014914

0800ed24 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800ed24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed28:	b08d      	sub	sp, #52	; 0x34
 800ed2a:	4604      	mov	r4, r0
 800ed2c:	460f      	mov	r7, r1
 800ed2e:	4690      	mov	r8, r2
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800ed30:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800ed34:	4a42      	ldr	r2, [pc, #264]	; (800ee40 <RegionEU868TxConfig+0x11c>)
 800ed36:	f912 a003 	ldrsb.w	sl, [r2, r3]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800ed3a:	4d42      	ldr	r5, [pc, #264]	; (800ee44 <RegionEU868TxConfig+0x120>)
 800ed3c:	682a      	ldr	r2, [r5, #0]
 800ed3e:	7803      	ldrb	r3, [r0, #0]
 800ed40:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ed44:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ed48:	7a5b      	ldrb	r3, [r3, #9]
 800ed4a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ed4e:	4a3e      	ldr	r2, [pc, #248]	; (800ee48 <RegionEU868TxConfig+0x124>)
 800ed50:	6812      	ldr	r2, [r2, #0]
 800ed52:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ed56:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800ed5a:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800ed5e:	f7ff fcae 	bl	800e6be <RegionCommonLimitTxPower>
 800ed62:	4606      	mov	r6, r0
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 800ed64:	4939      	ldr	r1, [pc, #228]	; (800ee4c <RegionEU868TxConfig+0x128>)
 800ed66:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800ed6a:	f7ff fcad 	bl	800e6c8 <RegionCommonGetBandwidth>
 800ed6e:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800ed70:	68a2      	ldr	r2, [r4, #8]
 800ed72:	6861      	ldr	r1, [r4, #4]
 800ed74:	4630      	mov	r0, r6
 800ed76:	f7ff fbbd 	bl	800e4f4 <RegionCommonComputeTxPower>
 800ed7a:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800ed7c:	4b34      	ldr	r3, [pc, #208]	; (800ee50 <RegionEU868TxConfig+0x12c>)
 800ed7e:	68da      	ldr	r2, [r3, #12]
 800ed80:	6829      	ldr	r1, [r5, #0]
 800ed82:	7823      	ldrb	r3, [r4, #0]
 800ed84:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ed88:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800ed8c:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 800ed8e:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800ed92:	2b07      	cmp	r3, #7
 800ed94:	d031      	beq.n	800edfa <RegionEU868TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800ed96:	4b2e      	ldr	r3, [pc, #184]	; (800ee50 <RegionEU868TxConfig+0x12c>)
 800ed98:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 800ed9c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800eda0:	9308      	str	r3, [sp, #32]
 800eda2:	2200      	movs	r2, #0
 800eda4:	9207      	str	r2, [sp, #28]
 800eda6:	9206      	str	r2, [sp, #24]
 800eda8:	9205      	str	r2, [sp, #20]
 800edaa:	2501      	movs	r5, #1
 800edac:	9504      	str	r5, [sp, #16]
 800edae:	9203      	str	r2, [sp, #12]
 800edb0:	2308      	movs	r3, #8
 800edb2:	9302      	str	r3, [sp, #8]
 800edb4:	9501      	str	r5, [sp, #4]
 800edb6:	f8cd a000 	str.w	sl, [sp]
 800edba:	464b      	mov	r3, r9
 800edbc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800edbe:	4628      	mov	r0, r5
 800edc0:	47d8      	blx	fp
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800edc2:	4b20      	ldr	r3, [pc, #128]	; (800ee44 <RegionEU868TxConfig+0x120>)
 800edc4:	681a      	ldr	r2, [r3, #0]
 800edc6:	7823      	ldrb	r3, [r4, #0]
 800edc8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800edcc:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800edd0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800edd4:	f7ff fcac 	bl	800e730 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800edd8:	89a1      	ldrh	r1, [r4, #12]
 800edda:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800edde:	f7ff fd0b 	bl	800e7f8 <GetTimeOnAir>
 800ede2:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800ede6:	4b1a      	ldr	r3, [pc, #104]	; (800ee50 <RegionEU868TxConfig+0x12c>)
 800ede8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800edea:	7b21      	ldrb	r1, [r4, #12]
 800edec:	4628      	mov	r0, r5
 800edee:	4798      	blx	r3

    *txPower = txPowerLimited;
 800edf0:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 800edf2:	2001      	movs	r0, #1
 800edf4:	b00d      	add	sp, #52	; 0x34
 800edf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800edfa:	4b15      	ldr	r3, [pc, #84]	; (800ee50 <RegionEU868TxConfig+0x12c>)
 800edfc:	69dd      	ldr	r5, [r3, #28]
 800edfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ee02:	fb03 f30a 	mul.w	r3, r3, sl
 800ee06:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800ee0a:	9208      	str	r2, [sp, #32]
 800ee0c:	f04f 0b00 	mov.w	fp, #0
 800ee10:	f8cd b01c 	str.w	fp, [sp, #28]
 800ee14:	f8cd b018 	str.w	fp, [sp, #24]
 800ee18:	f8cd b014 	str.w	fp, [sp, #20]
 800ee1c:	2201      	movs	r2, #1
 800ee1e:	9204      	str	r2, [sp, #16]
 800ee20:	f8cd b00c 	str.w	fp, [sp, #12]
 800ee24:	2205      	movs	r2, #5
 800ee26:	9202      	str	r2, [sp, #8]
 800ee28:	f8cd b004 	str.w	fp, [sp, #4]
 800ee2c:	9300      	str	r3, [sp, #0]
 800ee2e:	464b      	mov	r3, r9
 800ee30:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800ee34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ee36:	4658      	mov	r0, fp
 800ee38:	47a8      	blx	r5
        modem = MODEM_FSK;
 800ee3a:	465d      	mov	r5, fp
 800ee3c:	e7c1      	b.n	800edc2 <RegionEU868TxConfig+0x9e>
 800ee3e:	bf00      	nop
 800ee40:	0801490c 	.word	0x0801490c
 800ee44:	20001020 	.word	0x20001020
 800ee48:	2000101c 	.word	0x2000101c
 800ee4c:	080148ec 	.word	0x080148ec
 800ee50:	08014f0c 	.word	0x08014f0c

0800ee54 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800ee54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ee58:	b08f      	sub	sp, #60	; 0x3c
 800ee5a:	4605      	mov	r5, r0
 800ee5c:	4689      	mov	r9, r1
 800ee5e:	4690      	mov	r8, r2
 800ee60:	461f      	mov	r7, r3
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800ee62:	2400      	movs	r4, #0
 800ee64:	940c      	str	r4, [sp, #48]	; 0x30
 800ee66:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 800ee6a:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
    uint8_t status = 0x07;
 800ee6e:	2607      	movs	r6, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800ee70:	e030      	b.n	800eed4 <RegionEU868LinkAdrReq+0x80>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800ee72:	f04f 0c00 	mov.w	ip, #0
        status = 0x07;
 800ee76:	2607      	movs	r6, #7
 800ee78:	e012      	b.n	800eea0 <RegionEU868LinkAdrReq+0x4c>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 800ee7a:	4a57      	ldr	r2, [pc, #348]	; (800efd8 <RegionEU868LinkAdrReq+0x184>)
 800ee7c:	6812      	ldr	r2, [r2, #0]
 800ee7e:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800ee82:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800ee86:	b13a      	cbz	r2, 800ee98 <RegionEU868LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 800ee88:	2201      	movs	r2, #1
 800ee8a:	fa02 f20c 	lsl.w	r2, r2, ip
 800ee8e:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 800ee92:	430a      	orrs	r2, r1
 800ee94:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800ee98:	f10c 0c01 	add.w	ip, ip, #1
 800ee9c:	fa5f fc8c 	uxtb.w	ip, ip
 800eea0:	f1bc 0f0f 	cmp.w	ip, #15
 800eea4:	d816      	bhi.n	800eed4 <RegionEU868LinkAdrReq+0x80>
                if( linkAdrParams.ChMaskCtrl == 6 )
 800eea6:	2b06      	cmp	r3, #6
 800eea8:	d0e7      	beq.n	800ee7a <RegionEU868LinkAdrReq+0x26>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800eeaa:	f8bd e02e 	ldrh.w	lr, [sp, #46]	; 0x2e
 800eeae:	fa4e fe0c 	asr.w	lr, lr, ip
 800eeb2:	f01e 0f01 	tst.w	lr, #1
 800eeb6:	d0ef      	beq.n	800ee98 <RegionEU868LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 800eeb8:	4a47      	ldr	r2, [pc, #284]	; (800efd8 <RegionEU868LinkAdrReq+0x184>)
 800eeba:	6812      	ldr	r2, [r2, #0]
 800eebc:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800eec0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800eec4:	2a00      	cmp	r2, #0
 800eec6:	d1e7      	bne.n	800ee98 <RegionEU868LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 800eec8:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 800eecc:	e7e4      	b.n	800ee98 <RegionEU868LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 800eece:	2606      	movs	r6, #6
 800eed0:	e000      	b.n	800eed4 <RegionEU868LinkAdrReq+0x80>
            status &= 0xFE; // Channel mask KO
 800eed2:	2606      	movs	r6, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800eed4:	7a2b      	ldrb	r3, [r5, #8]
 800eed6:	42a3      	cmp	r3, r4
 800eed8:	d918      	bls.n	800ef0c <RegionEU868LinkAdrReq+0xb8>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800eeda:	6868      	ldr	r0, [r5, #4]
 800eedc:	a90c      	add	r1, sp, #48	; 0x30
 800eede:	4420      	add	r0, r4
 800eee0:	f7ff fa48 	bl	800e374 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800eee4:	b190      	cbz	r0, 800ef0c <RegionEU868LinkAdrReq+0xb8>
        bytesProcessed += nextIndex;
 800eee6:	4404      	add	r4, r0
 800eee8:	b2e4      	uxtb	r4, r4
        chMask = linkAdrParams.ChMask;
 800eeea:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800eeee:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800eef2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800eef6:	b90b      	cbnz	r3, 800eefc <RegionEU868LinkAdrReq+0xa8>
 800eef8:	2a00      	cmp	r2, #0
 800eefa:	d0e8      	beq.n	800eece <RegionEU868LinkAdrReq+0x7a>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800eefc:	1e5a      	subs	r2, r3, #1
 800eefe:	b2d2      	uxtb	r2, r2
 800ef00:	2a04      	cmp	r2, #4
 800ef02:	d9e6      	bls.n	800eed2 <RegionEU868LinkAdrReq+0x7e>
 800ef04:	2b06      	cmp	r3, #6
 800ef06:	d9b4      	bls.n	800ee72 <RegionEU868LinkAdrReq+0x1e>
            status &= 0xFE; // Channel mask KO
 800ef08:	2606      	movs	r6, #6
 800ef0a:	e7e3      	b.n	800eed4 <RegionEU868LinkAdrReq+0x80>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800ef0c:	2302      	movs	r3, #2
 800ef0e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800ef12:	7a6b      	ldrb	r3, [r5, #9]
 800ef14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    phyParam = RegionEU868GetPhyParam( &getPhy );
 800ef18:	a80a      	add	r0, sp, #40	; 0x28
 800ef1a:	f7ff fc9f 	bl	800e85c <RegionEU868GetPhyParam>
 800ef1e:	9009      	str	r0, [sp, #36]	; 0x24

    linkAdrVerifyParams.Status = status;
 800ef20:	f88d 6008 	strb.w	r6, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800ef24:	7aab      	ldrb	r3, [r5, #10]
 800ef26:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800ef2a:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800ef2e:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800ef32:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800ef36:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800ef3a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800ef3e:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800ef42:	f995 300b 	ldrsb.w	r3, [r5, #11]
 800ef46:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800ef4a:	f995 300c 	ldrsb.w	r3, [r5, #12]
 800ef4e:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800ef52:	f995 300d 	ldrsb.w	r3, [r5, #13]
 800ef56:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 800ef5a:	2310      	movs	r3, #16
 800ef5c:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800ef60:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 800ef64:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800ef66:	f88d 0018 	strb.w	r0, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 800ef6a:	2307      	movs	r3, #7
 800ef6c:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800ef70:	4a19      	ldr	r2, [pc, #100]	; (800efd8 <RegionEU868LinkAdrReq+0x184>)
 800ef72:	6812      	ldr	r2, [r2, #0]
 800ef74:	9207      	str	r2, [sp, #28]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 800ef76:	f88d 3020 	strb.w	r3, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800ef80:	682b      	ldr	r3, [r5, #0]
 800ef82:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800ef84:	ab0c      	add	r3, sp, #48	; 0x30
 800ef86:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800ef8a:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 800ef8e:	a801      	add	r0, sp, #4
 800ef90:	f7ff fa0e 	bl	800e3b0 <RegionCommonLinkAdrReqVerifyParams>
 800ef94:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800ef96:	2807      	cmp	r0, #7
 800ef98:	d010      	beq.n	800efbc <RegionEU868LinkAdrReq+0x168>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800ef9a:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800ef9e:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
 800efa2:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800efa6:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 800efaa:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800efae:	703b      	strb	r3, [r7, #0]
    *nbBytesParsed = bytesProcessed;
 800efb0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800efb2:	701c      	strb	r4, [r3, #0]

#endif /* REGION_EU868 */
    return status;
}
 800efb4:	4628      	mov	r0, r5
 800efb6:	b00f      	add	sp, #60	; 0x3c
 800efb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 800efbc:	4e06      	ldr	r6, [pc, #24]	; (800efd8 <RegionEU868LinkAdrReq+0x184>)
 800efbe:	6830      	ldr	r0, [r6, #0]
 800efc0:	220c      	movs	r2, #12
 800efc2:	2100      	movs	r1, #0
 800efc4:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800efc8:	f001 fef9 	bl	8010dbe <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 800efcc:	6833      	ldr	r3, [r6, #0]
 800efce:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 800efd2:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
 800efd6:	e7e0      	b.n	800ef9a <RegionEU868LinkAdrReq+0x146>
 800efd8:	20001020 	.word	0x20001020

0800efdc <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800efdc:	b530      	push	{r4, r5, lr}
 800efde:	b083      	sub	sp, #12
 800efe0:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800efe2:	2300      	movs	r3, #0
 800efe4:	f88d 3007 	strb.w	r3, [sp, #7]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 800efe8:	f10d 0107 	add.w	r1, sp, #7
 800efec:	6840      	ldr	r0, [r0, #4]
 800efee:	f7ff fbaf 	bl	800e750 <VerifyRfFreq>
 800eff2:	b1a8      	cbz	r0, 800f020 <RegionEU868RxParamSetupReq+0x44>
    uint8_t status = 0x07;
 800eff4:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 800eff6:	2207      	movs	r2, #7
 800eff8:	2100      	movs	r1, #0
 800effa:	f994 0000 	ldrsb.w	r0, [r4]
 800effe:	f7ff f898 	bl	800e132 <RegionCommonValueInRange>
 800f002:	b908      	cbnz	r0, 800f008 <RegionEU868RxParamSetupReq+0x2c>
    {
        status &= 0xFD; // Datarate KO
 800f004:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 800f008:	2205      	movs	r2, #5
 800f00a:	2100      	movs	r1, #0
 800f00c:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800f010:	f7ff f88f 	bl	800e132 <RegionCommonValueInRange>
 800f014:	b908      	cbnz	r0, 800f01a <RegionEU868RxParamSetupReq+0x3e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800f016:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_EU868 */
    return status;
}
 800f01a:	4628      	mov	r0, r5
 800f01c:	b003      	add	sp, #12
 800f01e:	bd30      	pop	{r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800f020:	2506      	movs	r5, #6
 800f022:	e7e8      	b.n	800eff6 <RegionEU868RxParamSetupReq+0x1a>

0800f024 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 800f024:	f04f 30ff 	mov.w	r0, #4294967295
 800f028:	4770      	bx	lr
	...

0800f02c <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 800f02c:	b510      	push	{r4, lr}
 800f02e:	b082      	sub	sp, #8
 800f030:	4604      	mov	r4, r0
    uint8_t status = 0x03;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800f032:	2300      	movs	r3, #0
 800f034:	f88d 3007 	strb.w	r3, [sp, #7]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 800f038:	f10d 0107 	add.w	r1, sp, #7
 800f03c:	6840      	ldr	r0, [r0, #4]
 800f03e:	f7ff fb87 	bl	800e750 <VerifyRfFreq>
 800f042:	b178      	cbz	r0, 800f064 <RegionEU868DlChannelReq+0x38>
    uint8_t status = 0x03;
 800f044:	2003      	movs	r0, #3
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800f046:	4b0c      	ldr	r3, [pc, #48]	; (800f078 <RegionEU868DlChannelReq+0x4c>)
 800f048:	681a      	ldr	r2, [r3, #0]
 800f04a:	7823      	ldrb	r3, [r4, #0]
 800f04c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800f050:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800f054:	b909      	cbnz	r1, 800f05a <RegionEU868DlChannelReq+0x2e>
    {
        status &= 0xFD;
 800f056:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 800f05a:	2803      	cmp	r0, #3
 800f05c:	d004      	beq.n	800f068 <RegionEU868DlChannelReq+0x3c>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_EU868 */
    return status;
}
 800f05e:	b240      	sxtb	r0, r0
 800f060:	b002      	add	sp, #8
 800f062:	bd10      	pop	{r4, pc}
        status &= 0xFE;
 800f064:	2002      	movs	r0, #2
 800f066:	e7ee      	b.n	800f046 <RegionEU868DlChannelReq+0x1a>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 800f068:	6861      	ldr	r1, [r4, #4]
 800f06a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f06e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f072:	6059      	str	r1, [r3, #4]
 800f074:	e7f3      	b.n	800f05e <RegionEU868DlChannelReq+0x32>
 800f076:	bf00      	nop
 800f078:	20001020 	.word	0x20001020

0800f07c <RegionEU868AlternateDr>:
#if defined( REGION_EU868 )
    return currentDr;
#else
    return -1;
#endif /* REGION_EU868 */
}
 800f07c:	4770      	bx	lr
	...

0800f080 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800f080:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f082:	b097      	sub	sp, #92	; 0x5c
 800f084:	4604      	mov	r4, r0
 800f086:	460f      	mov	r7, r1
 800f088:	4616      	mov	r6, r2
 800f08a:	461d      	mov	r5, r3
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 800f08c:	2100      	movs	r1, #0
 800f08e:	f88d 1057 	strb.w	r1, [sp, #87]	; 0x57
    uint8_t nbRestrictedChannels = 0;
 800f092:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 800f096:	9111      	str	r1, [sp, #68]	; 0x44
 800f098:	9112      	str	r1, [sp, #72]	; 0x48
 800f09a:	9113      	str	r1, [sp, #76]	; 0x4c
 800f09c:	9114      	str	r1, [sp, #80]	; 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 800f09e:	2307      	movs	r3, #7
 800f0a0:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800f0a4:	4b34      	ldr	r3, [pc, #208]	; (800f178 <RegionEU868NextChannel+0xf8>)
 800f0a6:	6818      	ldr	r0, [r3, #0]
 800f0a8:	2201      	movs	r2, #1
 800f0aa:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800f0ae:	f7ff f89b 	bl	800e1e8 <RegionCommonCountChannels>
 800f0b2:	b938      	cbnz	r0, 800f0c4 <RegionEU868NextChannel+0x44>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800f0b4:	4b30      	ldr	r3, [pc, #192]	; (800f178 <RegionEU868NextChannel+0xf8>)
 800f0b6:	681a      	ldr	r2, [r3, #0]
 800f0b8:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 800f0bc:	f043 0307 	orr.w	r3, r3, #7
 800f0c0:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800f0c4:	7a63      	ldrb	r3, [r4, #9]
 800f0c6:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800f0ca:	7a23      	ldrb	r3, [r4, #8]
 800f0cc:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800f0d0:	4b29      	ldr	r3, [pc, #164]	; (800f178 <RegionEU868NextChannel+0xf8>)
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	f503 7258 	add.w	r2, r3, #864	; 0x360
 800f0d8:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800f0da:	9305      	str	r3, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 800f0dc:	4b27      	ldr	r3, [pc, #156]	; (800f17c <RegionEU868NextChannel+0xfc>)
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	9306      	str	r3, [sp, #24]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 800f0e2:	2310      	movs	r3, #16
 800f0e4:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 800f0e8:	f10d 030a 	add.w	r3, sp, #10
 800f0ec:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800f0ee:	6823      	ldr	r3, [r4, #0]
 800f0f0:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800f0f2:	6863      	ldr	r3, [r4, #4]
 800f0f4:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800f0f6:	7aa3      	ldrb	r3, [r4, #10]
 800f0f8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 800f0fc:	2306      	movs	r3, #6
 800f0fe:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800f102:	ab0c      	add	r3, sp, #48	; 0x30
 800f104:	f104 020c 	add.w	r2, r4, #12
 800f108:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f10c:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800f110:	7d23      	ldrb	r3, [r4, #20]
 800f112:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800f116:	8ae1      	ldrh	r1, [r4, #22]
 800f118:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800f11c:	f7ff fb6c 	bl	800e7f8 <GetTimeOnAir>
 800f120:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800f122:	ab03      	add	r3, sp, #12
 800f124:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800f126:	9601      	str	r6, [sp, #4]
 800f128:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 800f12c:	9300      	str	r3, [sp, #0]
 800f12e:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 800f132:	aa11      	add	r2, sp, #68	; 0x44
 800f134:	4629      	mov	r1, r5
 800f136:	a809      	add	r0, sp, #36	; 0x24
 800f138:	f7ff fa58 	bl	800e5ec <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800f13c:	4604      	mov	r4, r0
 800f13e:	b120      	cbz	r0, 800f14a <RegionEU868NextChannel+0xca>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 800f140:	280c      	cmp	r0, #12
 800f142:	d00f      	beq.n	800f164 <RegionEU868NextChannel+0xe4>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800f144:	4620      	mov	r0, r4
 800f146:	b017      	add	sp, #92	; 0x5c
 800f148:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800f14a:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
 800f14e:	3901      	subs	r1, #1
 800f150:	f001 fe10 	bl	8010d74 <randr>
 800f154:	f100 0358 	add.w	r3, r0, #88	; 0x58
 800f158:	eb0d 0003 	add.w	r0, sp, r3
 800f15c:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 800f160:	703b      	strb	r3, [r7, #0]
 800f162:	e7ef      	b.n	800f144 <RegionEU868NextChannel+0xc4>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800f164:	4b04      	ldr	r3, [pc, #16]	; (800f178 <RegionEU868NextChannel+0xf8>)
 800f166:	681a      	ldr	r2, [r3, #0]
 800f168:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 800f16c:	f043 0307 	orr.w	r3, r3, #7
 800f170:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
 800f174:	e7e6      	b.n	800f144 <RegionEU868NextChannel+0xc4>
 800f176:	bf00      	nop
 800f178:	20001020 	.word	0x20001020
 800f17c:	2000101c 	.word	0x2000101c

0800f180 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 800f180:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f182:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800f184:	2300      	movs	r3, #0
 800f186:	f88d 3007 	strb.w	r3, [sp, #7]
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 800f18a:	7905      	ldrb	r5, [r0, #4]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800f18c:	2d02      	cmp	r5, #2
 800f18e:	d94f      	bls.n	800f230 <RegionEU868ChannelAdd+0xb0>
 800f190:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 800f192:	2d0f      	cmp	r5, #15
 800f194:	d84e      	bhi.n	800f234 <RegionEU868ChannelAdd+0xb4>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800f196:	6803      	ldr	r3, [r0, #0]
 800f198:	7a18      	ldrb	r0, [r3, #8]
 800f19a:	f340 0003 	sbfx	r0, r0, #0, #4
 800f19e:	2207      	movs	r2, #7
 800f1a0:	2100      	movs	r1, #0
 800f1a2:	b240      	sxtb	r0, r0
 800f1a4:	f7fe ffc5 	bl	800e132 <RegionCommonValueInRange>
 800f1a8:	2800      	cmp	r0, #0
 800f1aa:	d03d      	beq.n	800f228 <RegionEU868ChannelAdd+0xa8>
    bool drInvalid = false;
 800f1ac:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800f1ae:	6823      	ldr	r3, [r4, #0]
 800f1b0:	7a18      	ldrb	r0, [r3, #8]
 800f1b2:	f340 1003 	sbfx	r0, r0, #4, #4
 800f1b6:	2207      	movs	r2, #7
 800f1b8:	2100      	movs	r1, #0
 800f1ba:	b240      	sxtb	r0, r0
 800f1bc:	f7fe ffb9 	bl	800e132 <RegionCommonValueInRange>
 800f1c0:	b900      	cbnz	r0, 800f1c4 <RegionEU868ChannelAdd+0x44>
    {
        drInvalid = true;
 800f1c2:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800f1c4:	6820      	ldr	r0, [r4, #0]
 800f1c6:	7a03      	ldrb	r3, [r0, #8]
 800f1c8:	f343 0203 	sbfx	r2, r3, #0, #4
 800f1cc:	b252      	sxtb	r2, r2
 800f1ce:	f343 1303 	sbfx	r3, r3, #4, #4
 800f1d2:	b25b      	sxtb	r3, r3
 800f1d4:	429a      	cmp	r2, r3
 800f1d6:	dd00      	ble.n	800f1da <RegionEU868ChannelAdd+0x5a>
    {
        drInvalid = true;
 800f1d8:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 800f1da:	f10d 0107 	add.w	r1, sp, #7
 800f1de:	6800      	ldr	r0, [r0, #0]
 800f1e0:	f7ff fab6 	bl	800e750 <VerifyRfFreq>
 800f1e4:	b310      	cbz	r0, 800f22c <RegionEU868ChannelAdd+0xac>
    bool freqInvalid = false;
 800f1e6:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800f1e8:	b106      	cbz	r6, 800f1ec <RegionEU868ChannelAdd+0x6c>
 800f1ea:	bb33      	cbnz	r3, 800f23a <RegionEU868ChannelAdd+0xba>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }
    if( drInvalid == true )
 800f1ec:	bb3e      	cbnz	r6, 800f23e <RegionEU868ChannelAdd+0xbe>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 800f1ee:	bb43      	cbnz	r3, 800f242 <RegionEU868ChannelAdd+0xc2>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 800f1f0:	4f15      	ldr	r7, [pc, #84]	; (800f248 <RegionEU868ChannelAdd+0xc8>)
 800f1f2:	683b      	ldr	r3, [r7, #0]
 800f1f4:	006e      	lsls	r6, r5, #1
 800f1f6:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 800f1fa:	220c      	movs	r2, #12
 800f1fc:	6821      	ldr	r1, [r4, #0]
 800f1fe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f202:	f001 fdc4 	bl	8010d8e <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 800f206:	683a      	ldr	r2, [r7, #0]
 800f208:	442e      	add	r6, r5
 800f20a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f20e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f212:	7273      	strb	r3, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 800f214:	2301      	movs	r3, #1
 800f216:	fa03 f505 	lsl.w	r5, r3, r5
 800f21a:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 800f21e:	431d      	orrs	r5, r3
 800f220:	f8a2 5360 	strh.w	r5, [r2, #864]	; 0x360
    return LORAMAC_STATUS_OK;
 800f224:	2000      	movs	r0, #0
 800f226:	e006      	b.n	800f236 <RegionEU868ChannelAdd+0xb6>
        drInvalid = true;
 800f228:	2601      	movs	r6, #1
 800f22a:	e7c0      	b.n	800f1ae <RegionEU868ChannelAdd+0x2e>
            freqInvalid = true;
 800f22c:	2301      	movs	r3, #1
 800f22e:	e7db      	b.n	800f1e8 <RegionEU868ChannelAdd+0x68>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800f230:	2006      	movs	r0, #6
 800f232:	e000      	b.n	800f236 <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f234:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800f236:	b003      	add	sp, #12
 800f238:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800f23a:	2006      	movs	r0, #6
 800f23c:	e7fb      	b.n	800f236 <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_DATARATE_INVALID;
 800f23e:	2005      	movs	r0, #5
 800f240:	e7f9      	b.n	800f236 <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 800f242:	2004      	movs	r0, #4
 800f244:	e7f7      	b.n	800f236 <RegionEU868ChannelAdd+0xb6>
 800f246:	bf00      	nop
 800f248:	20001020 	.word	0x20001020

0800f24c <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 800f24c:	7801      	ldrb	r1, [r0, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800f24e:	2902      	cmp	r1, #2
 800f250:	d801      	bhi.n	800f256 <RegionEU868ChannelsRemove+0xa>
    {
        return false;
 800f252:	2000      	movs	r0, #0

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
#else
    return false;
#endif /* REGION_EU868 */
}
 800f254:	4770      	bx	lr
{
 800f256:	b508      	push	{r3, lr}
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 800f258:	4b09      	ldr	r3, [pc, #36]	; (800f280 <RegionEU868ChannelsRemove+0x34>)
 800f25a:	6818      	ldr	r0, [r3, #0]
 800f25c:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800f260:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800f264:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800f268:	2200      	movs	r2, #0
 800f26a:	f840 200c 	str.w	r2, [r0, ip]
 800f26e:	605a      	str	r2, [r3, #4]
 800f270:	609a      	str	r2, [r3, #8]
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 800f272:	2210      	movs	r2, #16
 800f274:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800f278:	f7fe ff9d 	bl	800e1b6 <RegionCommonChanDisable>
}
 800f27c:	bd08      	pop	{r3, pc}
 800f27e:	bf00      	nop
 800f280:	20001020 	.word	0x20001020

0800f284 <RegionEU868ApplyCFList>:
{
 800f284:	b570      	push	{r4, r5, r6, lr}
 800f286:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800f288:	2350      	movs	r3, #80	; 0x50
 800f28a:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 800f28e:	7a03      	ldrb	r3, [r0, #8]
 800f290:	2b10      	cmp	r3, #16
 800f292:	d136      	bne.n	800f302 <RegionEU868ApplyCFList+0x7e>
 800f294:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 800f296:	6843      	ldr	r3, [r0, #4]
 800f298:	7bdd      	ldrb	r5, [r3, #15]
 800f29a:	2d00      	cmp	r5, #0
 800f29c:	d131      	bne.n	800f302 <RegionEU868ApplyCFList+0x7e>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800f29e:	2403      	movs	r4, #3
 800f2a0:	e01b      	b.n	800f2da <RegionEU868ApplyCFList+0x56>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800f2a2:	6872      	ldr	r2, [r6, #4]
 800f2a4:	5d53      	ldrb	r3, [r2, r5]
 800f2a6:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800f2a8:	442a      	add	r2, r5
 800f2aa:	7851      	ldrb	r1, [r2, #1]
 800f2ac:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800f2b0:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800f2b2:	7892      	ldrb	r2, [r2, #2]
 800f2b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f2b8:	9303      	str	r3, [sp, #12]
            newChannel.Frequency *= 100;
 800f2ba:	2264      	movs	r2, #100	; 0x64
 800f2bc:	fb02 f303 	mul.w	r3, r2, r3
 800f2c0:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	9304      	str	r3, [sp, #16]
 800f2c6:	e011      	b.n	800f2ec <RegionEU868ApplyCFList+0x68>
            channelRemove.ChannelId = chanIdx;
 800f2c8:	f88d 4000 	strb.w	r4, [sp]
            RegionEU868ChannelsRemove( &channelRemove );
 800f2cc:	4668      	mov	r0, sp
 800f2ce:	f7ff ffbd 	bl	800f24c <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800f2d2:	3503      	adds	r5, #3
 800f2d4:	b2ed      	uxtb	r5, r5
 800f2d6:	3401      	adds	r4, #1
 800f2d8:	b2e4      	uxtb	r4, r4
 800f2da:	2c0f      	cmp	r4, #15
 800f2dc:	d811      	bhi.n	800f302 <RegionEU868ApplyCFList+0x7e>
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 800f2de:	2c07      	cmp	r4, #7
 800f2e0:	d9df      	bls.n	800f2a2 <RegionEU868ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 800f2e6:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 800f2ea:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 800f2ec:	9b03      	ldr	r3, [sp, #12]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d0ea      	beq.n	800f2c8 <RegionEU868ApplyCFList+0x44>
            channelAdd.NewChannel = &newChannel;
 800f2f2:	ab03      	add	r3, sp, #12
 800f2f4:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 800f2f6:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionEU868ChannelAdd( &channelAdd );
 800f2fa:	a801      	add	r0, sp, #4
 800f2fc:	f7ff ff40 	bl	800f180 <RegionEU868ChannelAdd>
 800f300:	e7e7      	b.n	800f2d2 <RegionEU868ApplyCFList+0x4e>
}
 800f302:	b006      	add	sp, #24
 800f304:	bd70      	pop	{r4, r5, r6, pc}

0800f306 <RegionEU868NewChannelReq>:
{
 800f306:	b500      	push	{lr}
 800f308:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 800f30a:	6803      	ldr	r3, [r0, #0]
 800f30c:	681a      	ldr	r2, [r3, #0]
 800f30e:	b952      	cbnz	r2, 800f326 <RegionEU868NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800f310:	7903      	ldrb	r3, [r0, #4]
 800f312:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 800f316:	a801      	add	r0, sp, #4
 800f318:	f7ff ff98 	bl	800f24c <RegionEU868ChannelsRemove>
 800f31c:	b1d0      	cbz	r0, 800f354 <RegionEU868NewChannelReq+0x4e>
    uint8_t status = 0x03;
 800f31e:	2003      	movs	r0, #3
}
 800f320:	b005      	add	sp, #20
 800f322:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 800f326:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800f328:	7903      	ldrb	r3, [r0, #4]
 800f32a:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 800f32e:	a802      	add	r0, sp, #8
 800f330:	f7ff ff26 	bl	800f180 <RegionEU868ChannelAdd>
 800f334:	2806      	cmp	r0, #6
 800f336:	d80b      	bhi.n	800f350 <RegionEU868NewChannelReq+0x4a>
 800f338:	e8df f000 	tbb	[pc, r0]
 800f33c:	0a0a0a04 	.word	0x0a0a0a04
 800f340:	060e      	.short	0x060e
 800f342:	08          	.byte	0x08
 800f343:	00          	.byte	0x00
 800f344:	2003      	movs	r0, #3
 800f346:	e7eb      	b.n	800f320 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFD;
 800f348:	2001      	movs	r0, #1
                break;
 800f34a:	e7e9      	b.n	800f320 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 800f34c:	2000      	movs	r0, #0
                break;
 800f34e:	e7e7      	b.n	800f320 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 800f350:	2000      	movs	r0, #0
                break;
 800f352:	e7e5      	b.n	800f320 <RegionEU868NewChannelReq+0x1a>
            status &= 0xFC;
 800f354:	2000      	movs	r0, #0
 800f356:	e7e3      	b.n	800f320 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFE;
 800f358:	2002      	movs	r0, #2
 800f35a:	e7e1      	b.n	800f320 <RegionEU868NewChannelReq+0x1a>

0800f35c <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 800f35c:	1a88      	subs	r0, r1, r2
 800f35e:	b240      	sxtb	r0, r0

    if( datarate < 0 )
 800f360:	2800      	cmp	r0, #0
 800f362:	db01      	blt.n	800f368 <RegionEU868ApplyDrOffset+0xc>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_EU868 */
}
 800f364:	b2c0      	uxtb	r0, r0
 800f366:	4770      	bx	lr
        datarate = DR_0;
 800f368:	2000      	movs	r0, #0
 800f36a:	e7fb      	b.n	800f364 <RegionEU868ApplyDrOffset+0x8>

0800f36c <VerifyRfFreq>:
    }
    return txPowerResult;
}

static bool VerifyRfFreq( uint32_t freq )
{
 800f36c:	b510      	push	{r4, lr}
 800f36e:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800f370:	4b10      	ldr	r3, [pc, #64]	; (800f3b4 <VerifyRfFreq+0x48>)
 800f372:	6a1b      	ldr	r3, [r3, #32]
 800f374:	4798      	blx	r3
 800f376:	b1c8      	cbz	r0, 800f3ac <VerifyRfFreq+0x40>
    {
        return false;
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 800f378:	4b0f      	ldr	r3, [pc, #60]	; (800f3b8 <VerifyRfFreq+0x4c>)
 800f37a:	4423      	add	r3, r4
 800f37c:	4a0f      	ldr	r2, [pc, #60]	; (800f3bc <VerifyRfFreq+0x50>)
 800f37e:	4293      	cmp	r3, r2
 800f380:	d813      	bhi.n	800f3aa <VerifyRfFreq+0x3e>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 800f382:	f102 42df 	add.w	r2, r2, #1870659584	; 0x6f800000
 800f386:	f502 12c8 	add.w	r2, r2, #1638400	; 0x190000
 800f38a:	f202 7245 	addw	r2, r2, #1861	; 0x745
 800f38e:	fba2 1203 	umull	r1, r2, r2, r3
 800f392:	0c92      	lsrs	r2, r2, #18
 800f394:	490a      	ldr	r1, [pc, #40]	; (800f3c0 <VerifyRfFreq+0x54>)
 800f396:	fb01 3212 	mls	r2, r1, r2, r3
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 800f39a:	b942      	cbnz	r2, 800f3ae <VerifyRfFreq+0x42>
    {
        return false;
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 800f39c:	4b09      	ldr	r3, [pc, #36]	; (800f3c4 <VerifyRfFreq+0x58>)
 800f39e:	4423      	add	r3, r4
 800f3a0:	4a09      	ldr	r2, [pc, #36]	; (800f3c8 <VerifyRfFreq+0x5c>)
 800f3a2:	4293      	cmp	r3, r2
 800f3a4:	d902      	bls.n	800f3ac <VerifyRfFreq+0x40>
    {
        return false;
 800f3a6:	2000      	movs	r0, #0
 800f3a8:	e000      	b.n	800f3ac <VerifyRfFreq+0x40>
        return false;
 800f3aa:	2000      	movs	r0, #0
    }
    return true;
}
 800f3ac:	bd10      	pop	{r4, pc}
        return false;
 800f3ae:	2000      	movs	r0, #0
 800f3b0:	e7fc      	b.n	800f3ac <VerifyRfFreq+0x40>
 800f3b2:	bf00      	nop
 800f3b4:	08014f0c 	.word	0x08014f0c
 800f3b8:	c8f78f60 	.word	0xc8f78f60
 800f3bc:	00401640 	.word	0x00401640
 800f3c0:	000927c0 	.word	0x000927c0
 800f3c4:	ca37fea0 	.word	0xca37fea0
 800f3c8:	01808580 	.word	0x01808580

0800f3cc <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800f3cc:	b570      	push	{r4, r5, r6, lr}
 800f3ce:	b084      	sub	sp, #16
 800f3d0:	460c      	mov	r4, r1
    int8_t phyDr = DataratesUS915[datarate];
 800f3d2:	4b0a      	ldr	r3, [pc, #40]	; (800f3fc <GetTimeOnAir+0x30>)
 800f3d4:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 800f3d6:	490a      	ldr	r1, [pc, #40]	; (800f400 <GetTimeOnAir+0x34>)
 800f3d8:	f7ff f976 	bl	800e6c8 <RegionCommonGetBandwidth>
 800f3dc:	4601      	mov	r1, r0

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800f3de:	4b09      	ldr	r3, [pc, #36]	; (800f404 <GetTimeOnAir+0x38>)
 800f3e0:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800f3e2:	2001      	movs	r0, #1
 800f3e4:	9003      	str	r0, [sp, #12]
 800f3e6:	b2e4      	uxtb	r4, r4
 800f3e8:	9402      	str	r4, [sp, #8]
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	9201      	str	r2, [sp, #4]
 800f3ee:	2208      	movs	r2, #8
 800f3f0:	9200      	str	r2, [sp, #0]
 800f3f2:	4603      	mov	r3, r0
 800f3f4:	4632      	mov	r2, r6
 800f3f6:	47a8      	blx	r5
}
 800f3f8:	b004      	add	sp, #16
 800f3fa:	bd70      	pop	{r4, r5, r6, pc}
 800f3fc:	08014978 	.word	0x08014978
 800f400:	08014924 	.word	0x08014924
 800f404:	08014f0c 	.word	0x08014f0c

0800f408 <LimitTxPower>:
{
 800f408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f40a:	4606      	mov	r6, r0
 800f40c:	4615      	mov	r5, r2
 800f40e:	461f      	mov	r7, r3
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 800f410:	f7ff f955 	bl	800e6be <RegionCommonLimitTxPower>
    if( datarate == DR_4 )
 800f414:	2d04      	cmp	r5, #4
 800f416:	d105      	bne.n	800f424 <LimitTxPower+0x1c>
        txPowerResult = MAX( txPower, TX_POWER_2 );
 800f418:	4634      	mov	r4, r6
 800f41a:	2e02      	cmp	r6, #2
 800f41c:	bfb8      	it	lt
 800f41e:	2402      	movlt	r4, #2
}
 800f420:	4620      	mov	r0, r4
 800f422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f424:	4604      	mov	r4, r0
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 800f426:	2204      	movs	r2, #4
 800f428:	2100      	movs	r1, #0
 800f42a:	4638      	mov	r0, r7
 800f42c:	f7fe fedc 	bl	800e1e8 <RegionCommonCountChannels>
 800f430:	2831      	cmp	r0, #49	; 0x31
 800f432:	d8f5      	bhi.n	800f420 <LimitTxPower+0x18>
            txPowerResult = MAX( txPower, TX_POWER_5 );
 800f434:	4634      	mov	r4, r6
 800f436:	2e05      	cmp	r6, #5
 800f438:	bfb8      	it	lt
 800f43a:	2405      	movlt	r4, #5
 800f43c:	e7f0      	b.n	800f420 <LimitTxPower+0x18>
	...

0800f440 <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 800f440:	b500      	push	{lr}
 800f442:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800f444:	2300      	movs	r3, #0
 800f446:	9304      	str	r3, [sp, #16]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 800f448:	7803      	ldrb	r3, [r0, #0]
 800f44a:	3b01      	subs	r3, #1
 800f44c:	2b37      	cmp	r3, #55	; 0x37
 800f44e:	d81f      	bhi.n	800f490 <RegionUS915GetPhyParam+0x50>
 800f450:	e8df f003 	tbb	[pc, r3]
 800f454:	1e1e1e1c 	.word	0x1e1e1e1c
 800f458:	1e1e1e1e 	.word	0x1e1e1e1e
 800f45c:	3e3b1e1e 	.word	0x3e3b1e1e
 800f460:	4d1e4741 	.word	0x4d1e4741
 800f464:	5d595551 	.word	0x5d595551
 800f468:	6d6a1e61 	.word	0x6d6a1e61
 800f46c:	7f7c7670 	.word	0x7f7c7670
 800f470:	86831e1e 	.word	0x86831e1e
 800f474:	1e1e1e23 	.word	0x1e1e1e23
 800f478:	1e1e1e1e 	.word	0x1e1e1e1e
 800f47c:	1e1e1e1e 	.word	0x1e1e1e1e
 800f480:	90891e1e 	.word	0x90891e1e
 800f484:	a01e9d9a 	.word	0xa01e9d9a
 800f488:	b3adaaa7 	.word	0xb3adaaa7
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 800f48c:	2308      	movs	r3, #8
 800f48e:	9304      	str	r3, [sp, #16]
            break;
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 800f490:	9804      	ldr	r0, [sp, #16]
 800f492:	9005      	str	r0, [sp, #20]
}
 800f494:	b007      	add	sp, #28
 800f496:	f85d fb04 	ldr.w	pc, [sp], #4
                .CurrentDr = getPhy->Datarate,
 800f49a:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800f49e:	f88d 3004 	strb.w	r3, [sp, #4]
 800f4a2:	2304      	movs	r3, #4
 800f4a4:	f88d 3005 	strb.w	r3, [sp, #5]
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	f88d 3006 	strb.w	r3, [sp, #6]
 800f4ae:	2348      	movs	r3, #72	; 0x48
 800f4b0:	f88d 3007 	strb.w	r3, [sp, #7]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800f4b4:	4b44      	ldr	r3, [pc, #272]	; (800f5c8 <RegionUS915GetPhyParam+0x188>)
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800f4bc:	9202      	str	r2, [sp, #8]
 800f4be:	9303      	str	r3, [sp, #12]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800f4c0:	a801      	add	r0, sp, #4
 800f4c2:	f7ff f8dd 	bl	800e680 <RegionCommonGetNextLowerTxDr>
 800f4c6:	9004      	str	r0, [sp, #16]
            break;
 800f4c8:	e7e2      	b.n	800f490 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800f4ca:	2340      	movs	r3, #64	; 0x40
 800f4cc:	9304      	str	r3, [sp, #16]
            break;
 800f4ce:	e7df      	b.n	800f490 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800f4d0:	2320      	movs	r3, #32
 800f4d2:	9304      	str	r3, [sp, #16]
            break;
 800f4d4:	e7dc      	b.n	800f490 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 800f4d6:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800f4da:	4a3c      	ldr	r2, [pc, #240]	; (800f5cc <RegionUS915GetPhyParam+0x18c>)
 800f4dc:	5cd3      	ldrb	r3, [r2, r3]
 800f4de:	9304      	str	r3, [sp, #16]
            break;
 800f4e0:	e7d6      	b.n	800f490 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 800f4e2:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800f4e6:	4a3a      	ldr	r2, [pc, #232]	; (800f5d0 <RegionUS915GetPhyParam+0x190>)
 800f4e8:	5cd3      	ldrb	r3, [r2, r3]
 800f4ea:	9304      	str	r3, [sp, #16]
            break;
 800f4ec:	e7d0      	b.n	800f490 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_MAX_RX_WINDOW;
 800f4ee:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800f4f2:	9304      	str	r3, [sp, #16]
            break;
 800f4f4:	e7cc      	b.n	800f490 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800f4f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f4fa:	9304      	str	r3, [sp, #16]
            break;
 800f4fc:	e7c8      	b.n	800f490 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800f4fe:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800f502:	9304      	str	r3, [sp, #16]
            break;
 800f504:	e7c4      	b.n	800f490 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800f506:	f241 3388 	movw	r3, #5000	; 0x1388
 800f50a:	9304      	str	r3, [sp, #16]
            break;
 800f50c:	e7c0      	b.n	800f490 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800f50e:	f241 7370 	movw	r3, #6000	; 0x1770
 800f512:	9304      	str	r3, [sp, #16]
            break;
 800f514:	e7bc      	b.n	800f490 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 800f516:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800f51a:	482e      	ldr	r0, [pc, #184]	; (800f5d4 <RegionUS915GetPhyParam+0x194>)
 800f51c:	f001 fc2a 	bl	8010d74 <randr>
 800f520:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800f524:	9004      	str	r0, [sp, #16]
            break;
 800f526:	e7b3      	b.n	800f490 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_RX_WND_2_FREQ;
 800f528:	4b2b      	ldr	r3, [pc, #172]	; (800f5d8 <RegionUS915GetPhyParam+0x198>)
 800f52a:	9304      	str	r3, [sp, #16]
            break;
 800f52c:	e7b0      	b.n	800f490 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_RX_WND_2_DR;
 800f52e:	2308      	movs	r3, #8
 800f530:	9304      	str	r3, [sp, #16]
            break;
 800f532:	e7ad      	b.n	800f490 <RegionUS915GetPhyParam+0x50>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800f534:	4b24      	ldr	r3, [pc, #144]	; (800f5c8 <RegionUS915GetPhyParam+0x188>)
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800f53c:	9304      	str	r3, [sp, #16]
            break;
 800f53e:	e7a7      	b.n	800f490 <RegionUS915GetPhyParam+0x50>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800f540:	4b21      	ldr	r3, [pc, #132]	; (800f5c8 <RegionUS915GetPhyParam+0x188>)
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 800f548:	9304      	str	r3, [sp, #16]
            break;
 800f54a:	e7a1      	b.n	800f490 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_MAX_NB_CHANNELS;
 800f54c:	2348      	movs	r3, #72	; 0x48
 800f54e:	9304      	str	r3, [sp, #16]
            break;
 800f550:	e79e      	b.n	800f490 <RegionUS915GetPhyParam+0x50>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800f552:	4b1d      	ldr	r3, [pc, #116]	; (800f5c8 <RegionUS915GetPhyParam+0x188>)
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	9304      	str	r3, [sp, #16]
            break;
 800f558:	e79a      	b.n	800f490 <RegionUS915GetPhyParam+0x50>
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 800f55a:	4b20      	ldr	r3, [pc, #128]	; (800f5dc <RegionUS915GetPhyParam+0x19c>)
 800f55c:	9304      	str	r3, [sp, #16]
            break;
 800f55e:	e797      	b.n	800f490 <RegionUS915GetPhyParam+0x50>
            phyParam.fValue = 0;
 800f560:	2300      	movs	r3, #0
 800f562:	9304      	str	r3, [sp, #16]
            break;
 800f564:	e794      	b.n	800f490 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800f566:	4a1e      	ldr	r2, [pc, #120]	; (800f5e0 <RegionUS915GetPhyParam+0x1a0>)
 800f568:	491b      	ldr	r1, [pc, #108]	; (800f5d8 <RegionUS915GetPhyParam+0x198>)
 800f56a:	7900      	ldrb	r0, [r0, #4]
 800f56c:	f7fe fd12 	bl	800df94 <RegionBaseUSCalcDownlinkFrequency>
 800f570:	9004      	str	r0, [sp, #16]
            break;
 800f572:	e78d      	b.n	800f490 <RegionUS915GetPhyParam+0x50>
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 800f574:	2317      	movs	r3, #23
 800f576:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 800f57a:	2304      	movs	r3, #4
 800f57c:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 800f580:	2303      	movs	r3, #3
 800f582:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 800f586:	e783      	b.n	800f490 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 800f588:	2308      	movs	r3, #8
 800f58a:	9304      	str	r3, [sp, #16]
            break;
 800f58c:	e780      	b.n	800f490 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 800f58e:	2308      	movs	r3, #8
 800f590:	9304      	str	r3, [sp, #16]
            break;
 800f592:	e77d      	b.n	800f490 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800f594:	4a12      	ldr	r2, [pc, #72]	; (800f5e0 <RegionUS915GetPhyParam+0x1a0>)
 800f596:	4910      	ldr	r1, [pc, #64]	; (800f5d8 <RegionUS915GetPhyParam+0x198>)
 800f598:	7900      	ldrb	r0, [r0, #4]
 800f59a:	f7fe fcfb 	bl	800df94 <RegionBaseUSCalcDownlinkFrequency>
 800f59e:	9004      	str	r0, [sp, #16]
            break;
 800f5a0:	e776      	b.n	800f490 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 800f5a2:	2308      	movs	r3, #8
 800f5a4:	9304      	str	r3, [sp, #16]
            break;
 800f5a6:	e773      	b.n	800f490 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 800f5a8:	2308      	movs	r3, #8
 800f5aa:	9304      	str	r3, [sp, #16]
            break;
 800f5ac:	e770      	b.n	800f490 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 800f5ae:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800f5b2:	4a0c      	ldr	r2, [pc, #48]	; (800f5e4 <RegionUS915GetPhyParam+0x1a4>)
 800f5b4:	5cd3      	ldrb	r3, [r2, r3]
 800f5b6:	9304      	str	r3, [sp, #16]
            break;
 800f5b8:	e76a      	b.n	800f490 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 800f5ba:	490b      	ldr	r1, [pc, #44]	; (800f5e8 <RegionUS915GetPhyParam+0x1a8>)
 800f5bc:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800f5c0:	f7ff f882 	bl	800e6c8 <RegionCommonGetBandwidth>
 800f5c4:	9004      	str	r0, [sp, #16]
            break;
 800f5c6:	e763      	b.n	800f490 <RegionUS915GetPhyParam+0x50>
 800f5c8:	2000102c 	.word	0x2000102c
 800f5cc:	08014998 	.word	0x08014998
 800f5d0:	08014988 	.word	0x08014988
 800f5d4:	fffffc18 	.word	0xfffffc18
 800f5d8:	370870a0 	.word	0x370870a0
 800f5dc:	4200999a 	.word	0x4200999a
 800f5e0:	000927c0 	.word	0x000927c0
 800f5e4:	08014978 	.word	0x08014978
 800f5e8:	08014924 	.word	0x08014924

0800f5ec <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800f5ec:	b510      	push	{r4, lr}
 800f5ee:	b082      	sub	sp, #8
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800f5f0:	4b0b      	ldr	r3, [pc, #44]	; (800f620 <RegionUS915SetBandTxDone+0x34>)
 800f5f2:	681a      	ldr	r2, [r3, #0]
 800f5f4:	7803      	ldrb	r3, [r0, #0]
 800f5f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f5fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f5fe:	7a5b      	ldrb	r3, [r3, #9]
 800f600:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800f604:	4b07      	ldr	r3, [pc, #28]	; (800f624 <RegionUS915SetBandTxDone+0x38>)
 800f606:	681c      	ldr	r4, [r3, #0]
 800f608:	6903      	ldr	r3, [r0, #16]
 800f60a:	9300      	str	r3, [sp, #0]
 800f60c:	68c3      	ldr	r3, [r0, #12]
 800f60e:	7842      	ldrb	r2, [r0, #1]
 800f610:	6881      	ldr	r1, [r0, #8]
 800f612:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 800f616:	f7fe fe0c 	bl	800e232 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 800f61a:	b002      	add	sp, #8
 800f61c:	bd10      	pop	{r4, pc}
 800f61e:	bf00      	nop
 800f620:	2000102c 	.word	0x2000102c
 800f624:	20001024 	.word	0x20001024

0800f628 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 800f628:	b510      	push	{r4, lr}
 800f62a:	b086      	sub	sp, #24
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 800f62c:	2301      	movs	r3, #1
 800f62e:	f8ad 3000 	strh.w	r3, [sp]
 800f632:	2300      	movs	r3, #0
 800f634:	f88d 3002 	strb.w	r3, [sp, #2]
 800f638:	9301      	str	r3, [sp, #4]
 800f63a:	9302      	str	r3, [sp, #8]
 800f63c:	9303      	str	r3, [sp, #12]
 800f63e:	9304      	str	r3, [sp, #16]
 800f640:	f88d 3014 	strb.w	r3, [sp, #20]
    {
       US915_BAND0
    };

    switch( params->Type )
 800f644:	7b04      	ldrb	r4, [r0, #12]
 800f646:	b174      	cbz	r4, 800f666 <RegionUS915InitDefaults+0x3e>
 800f648:	3c01      	subs	r4, #1
 800f64a:	b2e4      	uxtb	r4, r4
 800f64c:	2c01      	cmp	r4, #1
 800f64e:	d87e      	bhi.n	800f74e <RegionUS915InitDefaults+0x126>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800f650:	4b40      	ldr	r3, [pc, #256]	; (800f754 <RegionUS915InitDefaults+0x12c>)
 800f652:	6818      	ldr	r0, [r3, #0]
 800f654:	2206      	movs	r2, #6
 800f656:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 800f65a:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800f65e:	f7fe fdd9 	bl	800e214 <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
 800f662:	2300      	movs	r3, #0
 800f664:	e071      	b.n	800f74a <RegionUS915InitDefaults+0x122>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800f666:	6803      	ldr	r3, [r0, #0]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d070      	beq.n	800f74e <RegionUS915InitDefaults+0x126>
 800f66c:	6842      	ldr	r2, [r0, #4]
 800f66e:	2a00      	cmp	r2, #0
 800f670:	d06d      	beq.n	800f74e <RegionUS915InitDefaults+0x126>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800f672:	4939      	ldr	r1, [pc, #228]	; (800f758 <RegionUS915InitDefaults+0x130>)
 800f674:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800f676:	4937      	ldr	r1, [pc, #220]	; (800f754 <RegionUS915InitDefaults+0x12c>)
 800f678:	600a      	str	r2, [r1, #0]
            RegionBands = (Band_t*) params->Bands;
 800f67a:	6880      	ldr	r0, [r0, #8]
 800f67c:	4a37      	ldr	r2, [pc, #220]	; (800f75c <RegionUS915InitDefaults+0x134>)
 800f67e:	6010      	str	r0, [r2, #0]
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800f680:	2200      	movs	r2, #0
 800f682:	731a      	strb	r2, [r3, #12]
            RegionNvmGroup1->JoinTrialsCounter = 0;
 800f684:	735a      	strb	r2, [r3, #13]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 800f686:	2218      	movs	r2, #24
 800f688:	4669      	mov	r1, sp
 800f68a:	f001 fb80 	bl	8010d8e <memcpy1>
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800f68e:	e011      	b.n	800f6b4 <RegionUS915InitDefaults+0x8c>
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 800f690:	4b30      	ldr	r3, [pc, #192]	; (800f754 <RegionUS915InitDefaults+0x12c>)
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	4932      	ldr	r1, [pc, #200]	; (800f760 <RegionUS915InitDefaults+0x138>)
 800f696:	4a33      	ldr	r2, [pc, #204]	; (800f764 <RegionUS915InitDefaults+0x13c>)
 800f698:	fb01 2204 	mla	r2, r1, r4, r2
 800f69c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800f6a0:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 800f6a4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 800f6a8:	2230      	movs	r2, #48	; 0x30
 800f6aa:	7202      	strb	r2, [r0, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800f6ac:	2200      	movs	r2, #0
 800f6ae:	7242      	strb	r2, [r0, #9]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800f6b0:	3401      	adds	r4, #1
 800f6b2:	b2e4      	uxtb	r4, r4
 800f6b4:	2c3f      	cmp	r4, #63	; 0x3f
 800f6b6:	d9eb      	bls.n	800f690 <RegionUS915InitDefaults+0x68>
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800f6b8:	2340      	movs	r3, #64	; 0x40
 800f6ba:	2b47      	cmp	r3, #71	; 0x47
 800f6bc:	d814      	bhi.n	800f6e8 <RegionUS915InitDefaults+0xc0>
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 800f6be:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
 800f6c2:	4a24      	ldr	r2, [pc, #144]	; (800f754 <RegionUS915InitDefaults+0x12c>)
 800f6c4:	6812      	ldr	r2, [r2, #0]
 800f6c6:	4c28      	ldr	r4, [pc, #160]	; (800f768 <RegionUS915InitDefaults+0x140>)
 800f6c8:	4928      	ldr	r1, [pc, #160]	; (800f76c <RegionUS915InitDefaults+0x144>)
 800f6ca:	fb04 1100 	mla	r1, r4, r0, r1
 800f6ce:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800f6d2:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 800f6d6:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 800f6da:	2144      	movs	r1, #68	; 0x44
 800f6dc:	7221      	strb	r1, [r4, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800f6de:	2100      	movs	r1, #0
 800f6e0:	7261      	strb	r1, [r4, #9]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800f6e2:	3301      	adds	r3, #1
 800f6e4:	b2db      	uxtb	r3, r3
 800f6e6:	e7e8      	b.n	800f6ba <RegionUS915InitDefaults+0x92>
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 800f6e8:	4c1a      	ldr	r4, [pc, #104]	; (800f754 <RegionUS915InitDefaults+0x12c>)
 800f6ea:	6820      	ldr	r0, [r4, #0]
 800f6ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f6f0:	f8a0 336c 	strh.w	r3, [r0, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 800f6f4:	f8a0 336e 	strh.w	r3, [r0, #878]	; 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 800f6f8:	f8a0 3370 	strh.w	r3, [r0, #880]	; 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 800f6fc:	f8a0 3372 	strh.w	r3, [r0, #882]	; 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 800f700:	23ff      	movs	r3, #255	; 0xff
 800f702:	f8a0 3374 	strh.w	r3, [r0, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800f706:	2300      	movs	r3, #0
 800f708:	f8a0 3376 	strh.w	r3, [r0, #886]	; 0x376
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800f70c:	2206      	movs	r2, #6
 800f70e:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 800f712:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800f716:	f7fe fd7d 	bl	800e214 <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800f71a:	6821      	ldr	r1, [r4, #0]
 800f71c:	2206      	movs	r2, #6
 800f71e:	f501 7158 	add.w	r1, r1, #864	; 0x360
 800f722:	4b0d      	ldr	r3, [pc, #52]	; (800f758 <RegionUS915InitDefaults+0x130>)
 800f724:	6818      	ldr	r0, [r3, #0]
 800f726:	f7fe fd75 	bl	800e214 <RegionCommonChanMaskCopy>
            break;
 800f72a:	e010      	b.n	800f74e <RegionUS915InitDefaults+0x126>
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800f72c:	4a0a      	ldr	r2, [pc, #40]	; (800f758 <RegionUS915InitDefaults+0x130>)
 800f72e:	6811      	ldr	r1, [r2, #0]
 800f730:	4a08      	ldr	r2, [pc, #32]	; (800f754 <RegionUS915InitDefaults+0x12c>)
 800f732:	6812      	ldr	r2, [r2, #0]
 800f734:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 800f738:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 800f73c:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800f740:	4002      	ands	r2, r0
 800f742:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            for( uint8_t i = 0; i < 6; i++ )
 800f746:	3301      	adds	r3, #1
 800f748:	b2db      	uxtb	r3, r3
 800f74a:	2b05      	cmp	r3, #5
 800f74c:	d9ee      	bls.n	800f72c <RegionUS915InitDefaults+0x104>
        {
            break;
        }
    }
#endif /* REGION_US915 */
}
 800f74e:	b006      	add	sp, #24
 800f750:	bd10      	pop	{r4, pc}
 800f752:	bf00      	nop
 800f754:	2000102c 	.word	0x2000102c
 800f758:	20001028 	.word	0x20001028
 800f75c:	20001024 	.word	0x20001024
 800f760:	00030d40 	.word	0x00030d40
 800f764:	35c80160 	.word	0x35c80160
 800f768:	00186a00 	.word	0x00186a00
 800f76c:	35d2afc0 	.word	0x35d2afc0

0800f770 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800f770:	b508      	push	{r3, lr}
#if defined( REGION_US915 )
    switch( phyAttribute )
 800f772:	290a      	cmp	r1, #10
 800f774:	d833      	bhi.n	800f7de <RegionUS915Verify+0x6e>
 800f776:	e8df f001 	tbb	[pc, r1]
 800f77a:	3206      	.short	0x3206
 800f77c:	0a323232 	.word	0x0a323232
 800f780:	28321e14 	.word	0x28321e14
 800f784:	28          	.byte	0x28
 800f785:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 800f786:	6800      	ldr	r0, [r0, #0]
 800f788:	f7ff fdf0 	bl	800f36c <VerifyRfFreq>
 800f78c:	e028      	b.n	800f7e0 <RegionUS915Verify+0x70>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 800f78e:	2204      	movs	r2, #4
 800f790:	2100      	movs	r1, #0
 800f792:	f990 0000 	ldrsb.w	r0, [r0]
 800f796:	f7fe fccc 	bl	800e132 <RegionCommonValueInRange>
 800f79a:	3800      	subs	r0, #0
 800f79c:	bf18      	it	ne
 800f79e:	2001      	movne	r0, #1
 800f7a0:	e01e      	b.n	800f7e0 <RegionUS915Verify+0x70>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800f7a2:	2205      	movs	r2, #5
 800f7a4:	2100      	movs	r1, #0
 800f7a6:	f990 0000 	ldrsb.w	r0, [r0]
 800f7aa:	f7fe fcc2 	bl	800e132 <RegionCommonValueInRange>
 800f7ae:	3800      	subs	r0, #0
 800f7b0:	bf18      	it	ne
 800f7b2:	2001      	movne	r0, #1
 800f7b4:	e014      	b.n	800f7e0 <RegionUS915Verify+0x70>
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 800f7b6:	220d      	movs	r2, #13
 800f7b8:	2108      	movs	r1, #8
 800f7ba:	f990 0000 	ldrsb.w	r0, [r0]
 800f7be:	f7fe fcb8 	bl	800e132 <RegionCommonValueInRange>
 800f7c2:	3800      	subs	r0, #0
 800f7c4:	bf18      	it	ne
 800f7c6:	2001      	movne	r0, #1
 800f7c8:	e00a      	b.n	800f7e0 <RegionUS915Verify+0x70>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 800f7ca:	220e      	movs	r2, #14
 800f7cc:	2100      	movs	r1, #0
 800f7ce:	f990 0000 	ldrsb.w	r0, [r0]
 800f7d2:	f7fe fcae 	bl	800e132 <RegionCommonValueInRange>
 800f7d6:	3800      	subs	r0, #0
 800f7d8:	bf18      	it	ne
 800f7da:	2001      	movne	r0, #1
 800f7dc:	e000      	b.n	800f7e0 <RegionUS915Verify+0x70>
    switch( phyAttribute )
 800f7de:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_US915 */
}
 800f7e0:	bd08      	pop	{r3, pc}
	...

0800f7e4 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 800f7e4:	7a03      	ldrb	r3, [r0, #8]
 800f7e6:	2b10      	cmp	r3, #16
 800f7e8:	d134      	bne.n	800f854 <RegionUS915ApplyCFList+0x70>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 800f7ea:	6843      	ldr	r3, [r0, #4]
 800f7ec:	7bdb      	ldrb	r3, [r3, #15]
 800f7ee:	2b01      	cmp	r3, #1
 800f7f0:	d130      	bne.n	800f854 <RegionUS915ApplyCFList+0x70>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800f7f2:	2200      	movs	r2, #0
 800f7f4:	4613      	mov	r3, r2
 800f7f6:	2a04      	cmp	r2, #4
 800f7f8:	d82b      	bhi.n	800f852 <RegionUS915ApplyCFList+0x6e>
{
 800f7fa:	b530      	push	{r4, r5, lr}
 800f7fc:	e010      	b.n	800f820 <RegionUS915ApplyCFList+0x3c>
        if( chMaskItr == 4 )
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 800f7fe:	4916      	ldr	r1, [pc, #88]	; (800f858 <RegionUS915ApplyCFList+0x74>)
 800f800:	680d      	ldr	r5, [r1, #0]
 800f802:	f50c 71d8 	add.w	r1, ip, #432	; 0x1b0
 800f806:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
 800f80a:	f835 401c 	ldrh.w	r4, [r5, ip, lsl #1]
 800f80e:	4021      	ands	r1, r4
 800f810:	f825 101c 	strh.w	r1, [r5, ip, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800f814:	3301      	adds	r3, #1
 800f816:	b2db      	uxtb	r3, r3
 800f818:	3202      	adds	r2, #2
 800f81a:	b2d2      	uxtb	r2, r2
 800f81c:	2b04      	cmp	r3, #4
 800f81e:	d817      	bhi.n	800f850 <RegionUS915ApplyCFList+0x6c>
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 800f820:	6841      	ldr	r1, [r0, #4]
 800f822:	4c0e      	ldr	r4, [pc, #56]	; (800f85c <RegionUS915ApplyCFList+0x78>)
 800f824:	6824      	ldr	r4, [r4, #0]
 800f826:	469c      	mov	ip, r3
 800f828:	5c89      	ldrb	r1, [r1, r2]
 800f82a:	f503 75d8 	add.w	r5, r3, #432	; 0x1b0
 800f82e:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 800f832:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800f836:	4496      	add	lr, r2
 800f838:	f89e e001 	ldrb.w	lr, [lr, #1]
 800f83c:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
 800f840:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
        if( chMaskItr == 4 )
 800f844:	2b04      	cmp	r3, #4
 800f846:	d1da      	bne.n	800f7fe <RegionUS915ApplyCFList+0x1a>
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 800f848:	b2c9      	uxtb	r1, r1
 800f84a:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
 800f84e:	e7d6      	b.n	800f7fe <RegionUS915ApplyCFList+0x1a>
    }
#endif /* REGION_US915 */
}
 800f850:	bd30      	pop	{r4, r5, pc}
 800f852:	4770      	bx	lr
 800f854:	4770      	bx	lr
 800f856:	bf00      	nop
 800f858:	20001028 	.word	0x20001028
 800f85c:	2000102c 	.word	0x2000102c

0800f860 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800f860:	b570      	push	{r4, r5, r6, lr}
 800f862:	4605      	mov	r5, r0
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 800f864:	2204      	movs	r2, #4
 800f866:	2100      	movs	r1, #0
 800f868:	6800      	ldr	r0, [r0, #0]
 800f86a:	f7fe fcbd 	bl	800e1e8 <RegionCommonCountChannels>

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 800f86e:	2801      	cmp	r0, #1
 800f870:	d031      	beq.n	800f8d6 <RegionUS915ChanMaskSet+0x76>
        ( nbChannels > 0 ) )
    {
        return false;
    }

    switch( chanMaskSet->ChannelsMaskType )
 800f872:	792c      	ldrb	r4, [r5, #4]
 800f874:	b11c      	cbz	r4, 800f87e <RegionUS915ChanMaskSet+0x1e>
 800f876:	2c01      	cmp	r4, #1
 800f878:	d023      	beq.n	800f8c2 <RegionUS915ChanMaskSet+0x62>
 800f87a:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 800f87c:	bd70      	pop	{r4, r5, r6, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800f87e:	4e17      	ldr	r6, [pc, #92]	; (800f8dc <RegionUS915ChanMaskSet+0x7c>)
 800f880:	6830      	ldr	r0, [r6, #0]
 800f882:	2206      	movs	r2, #6
 800f884:	6829      	ldr	r1, [r5, #0]
 800f886:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800f88a:	f7fe fcc3 	bl	800e214 <RegionCommonChanMaskCopy>
            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 800f88e:	6830      	ldr	r0, [r6, #0]
 800f890:	f890 3374 	ldrb.w	r3, [r0, #884]	; 0x374
 800f894:	f8a0 3374 	strh.w	r3, [r0, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800f898:	2300      	movs	r3, #0
 800f89a:	f8a0 3376 	strh.w	r3, [r0, #886]	; 0x376
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800f89e:	e00c      	b.n	800f8ba <RegionUS915ChanMaskSet+0x5a>
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800f8a0:	4b0f      	ldr	r3, [pc, #60]	; (800f8e0 <RegionUS915ChanMaskSet+0x80>)
 800f8a2:	681a      	ldr	r2, [r3, #0]
 800f8a4:	f504 73d8 	add.w	r3, r4, #432	; 0x1b0
 800f8a8:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800f8ac:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
 800f8b0:	400b      	ands	r3, r1
 800f8b2:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800f8b6:	3401      	adds	r4, #1
 800f8b8:	b2e4      	uxtb	r4, r4
 800f8ba:	2c05      	cmp	r4, #5
 800f8bc:	d9f0      	bls.n	800f8a0 <RegionUS915ChanMaskSet+0x40>
    return true;
 800f8be:	2001      	movs	r0, #1
 800f8c0:	e7dc      	b.n	800f87c <RegionUS915ChanMaskSet+0x1c>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800f8c2:	4b06      	ldr	r3, [pc, #24]	; (800f8dc <RegionUS915ChanMaskSet+0x7c>)
 800f8c4:	6818      	ldr	r0, [r3, #0]
 800f8c6:	2206      	movs	r2, #6
 800f8c8:	6829      	ldr	r1, [r5, #0]
 800f8ca:	f500 705b 	add.w	r0, r0, #876	; 0x36c
 800f8ce:	f7fe fca1 	bl	800e214 <RegionCommonChanMaskCopy>
    return true;
 800f8d2:	2001      	movs	r0, #1
            break;
 800f8d4:	e7d2      	b.n	800f87c <RegionUS915ChanMaskSet+0x1c>
        return false;
 800f8d6:	2000      	movs	r0, #0
 800f8d8:	e7d0      	b.n	800f87c <RegionUS915ChanMaskSet+0x1c>
 800f8da:	bf00      	nop
 800f8dc:	2000102c 	.word	0x2000102c
 800f8e0:	20001028 	.word	0x20001028

0800f8e4 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800f8e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8e6:	b083      	sub	sp, #12
 800f8e8:	460e      	mov	r6, r1
 800f8ea:	4617      	mov	r7, r2
 800f8ec:	461c      	mov	r4, r3
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 800f8ee:	280d      	cmp	r0, #13
 800f8f0:	bfa8      	it	ge
 800f8f2:	200d      	movge	r0, #13
 800f8f4:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 800f8f6:	4d0f      	ldr	r5, [pc, #60]	; (800f934 <RegionUS915ComputeRxWindowParameters+0x50>)
 800f8f8:	4629      	mov	r1, r5
 800f8fa:	f7fe fee5 	bl	800e6c8 <RegionCommonGetBandwidth>
 800f8fe:	70a0      	strb	r0, [r4, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 800f900:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800f904:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 800f908:	4a0b      	ldr	r2, [pc, #44]	; (800f938 <RegionUS915ComputeRxWindowParameters+0x54>)
 800f90a:	5cd0      	ldrb	r0, [r2, r3]
 800f90c:	f7fe fda8 	bl	800e460 <RegionCommonComputeSymbolTimeLoRa>
 800f910:	4605      	mov	r5, r0

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800f912:	4b0a      	ldr	r3, [pc, #40]	; (800f93c <RegionUS915ComputeRxWindowParameters+0x58>)
 800f914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f916:	4798      	blx	r3
 800f918:	4603      	mov	r3, r0
 800f91a:	f104 020c 	add.w	r2, r4, #12
 800f91e:	9201      	str	r2, [sp, #4]
 800f920:	3408      	adds	r4, #8
 800f922:	9400      	str	r4, [sp, #0]
 800f924:	463a      	mov	r2, r7
 800f926:	4631      	mov	r1, r6
 800f928:	4628      	mov	r0, r5
 800f92a:	f7fe fda7 	bl	800e47c <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 800f92e:	b003      	add	sp, #12
 800f930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f932:	bf00      	nop
 800f934:	08014924 	.word	0x08014924
 800f938:	08014978 	.word	0x08014978
 800f93c:	08014f0c 	.word	0x08014f0c

0800f940 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800f940:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f944:	b08b      	sub	sp, #44	; 0x2c
 800f946:	4604      	mov	r4, r0
 800f948:	460d      	mov	r5, r1
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 800f94a:	f990 6001 	ldrsb.w	r6, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800f94e:	6847      	ldr	r7, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800f950:	4b22      	ldr	r3, [pc, #136]	; (800f9dc <RegionUS915RxConfig+0x9c>)
 800f952:	685b      	ldr	r3, [r3, #4]
 800f954:	4798      	blx	r3
 800f956:	2800      	cmp	r0, #0
 800f958:	d13d      	bne.n	800f9d6 <RegionUS915RxConfig+0x96>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800f95a:	7ce3      	ldrb	r3, [r4, #19]
 800f95c:	b933      	cbnz	r3, 800f96c <RegionUS915RxConfig+0x2c>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 800f95e:	7827      	ldrb	r7, [r4, #0]
 800f960:	f007 0307 	and.w	r3, r7, #7
 800f964:	4a1e      	ldr	r2, [pc, #120]	; (800f9e0 <RegionUS915RxConfig+0xa0>)
 800f966:	4f1f      	ldr	r7, [pc, #124]	; (800f9e4 <RegionUS915RxConfig+0xa4>)
 800f968:	fb02 7703 	mla	r7, r2, r3, r7
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 800f96c:	4b1e      	ldr	r3, [pc, #120]	; (800f9e8 <RegionUS915RxConfig+0xa8>)
 800f96e:	f913 9006 	ldrsb.w	r9, [r3, r6]

    Radio.SetChannel( frequency );
 800f972:	f8df 8068 	ldr.w	r8, [pc, #104]	; 800f9dc <RegionUS915RxConfig+0x9c>
 800f976:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f97a:	4638      	mov	r0, r7
 800f97c:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800f97e:	f8d8 8018 	ldr.w	r8, [r8, #24]
 800f982:	7ca3      	ldrb	r3, [r4, #18]
 800f984:	9309      	str	r3, [sp, #36]	; 0x24
 800f986:	2001      	movs	r0, #1
 800f988:	9008      	str	r0, [sp, #32]
 800f98a:	2200      	movs	r2, #0
 800f98c:	9207      	str	r2, [sp, #28]
 800f98e:	9206      	str	r2, [sp, #24]
 800f990:	9205      	str	r2, [sp, #20]
 800f992:	9204      	str	r2, [sp, #16]
 800f994:	9203      	str	r2, [sp, #12]
 800f996:	8923      	ldrh	r3, [r4, #8]
 800f998:	9302      	str	r3, [sp, #8]
 800f99a:	2308      	movs	r3, #8
 800f99c:	9301      	str	r3, [sp, #4]
 800f99e:	9200      	str	r2, [sp, #0]
 800f9a0:	4603      	mov	r3, r0
 800f9a2:	464a      	mov	r2, r9
 800f9a4:	78a1      	ldrb	r1, [r4, #2]
 800f9a6:	47c0      	blx	r8

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 800f9a8:	7c63      	ldrb	r3, [r4, #17]
 800f9aa:	b18b      	cbz	r3, 800f9d0 <RegionUS915RxConfig+0x90>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 800f9ac:	4b0f      	ldr	r3, [pc, #60]	; (800f9ec <RegionUS915RxConfig+0xac>)
 800f9ae:	5d99      	ldrb	r1, [r3, r6]
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800f9b0:	4b0a      	ldr	r3, [pc, #40]	; (800f9dc <RegionUS915RxConfig+0x9c>)
 800f9b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f9b4:	310d      	adds	r1, #13
 800f9b6:	b2c9      	uxtb	r1, r1
 800f9b8:	2001      	movs	r0, #1
 800f9ba:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800f9bc:	4632      	mov	r2, r6
 800f9be:	4639      	mov	r1, r7
 800f9c0:	7ce0      	ldrb	r0, [r4, #19]
 800f9c2:	f7fe fe93 	bl	800e6ec <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 800f9c6:	702e      	strb	r6, [r5, #0]
    return true;
 800f9c8:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_US915 */
}
 800f9ca:	b00b      	add	sp, #44	; 0x2c
 800f9cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 800f9d0:	4b07      	ldr	r3, [pc, #28]	; (800f9f0 <RegionUS915RxConfig+0xb0>)
 800f9d2:	5d99      	ldrb	r1, [r3, r6]
 800f9d4:	e7ec      	b.n	800f9b0 <RegionUS915RxConfig+0x70>
        return false;
 800f9d6:	2000      	movs	r0, #0
 800f9d8:	e7f7      	b.n	800f9ca <RegionUS915RxConfig+0x8a>
 800f9da:	bf00      	nop
 800f9dc:	08014f0c 	.word	0x08014f0c
 800f9e0:	000927c0 	.word	0x000927c0
 800f9e4:	370870a0 	.word	0x370870a0
 800f9e8:	08014978 	.word	0x08014978
 800f9ec:	08014988 	.word	0x08014988
 800f9f0:	08014998 	.word	0x08014998

0800f9f4 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800f9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9f8:	b08d      	sub	sp, #52	; 0x34
 800f9fa:	4604      	mov	r4, r0
 800f9fc:	468b      	mov	fp, r1
 800f9fe:	4617      	mov	r7, r2
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 800fa00:	f990 2001 	ldrsb.w	r2, [r0, #1]
 800fa04:	4b32      	ldr	r3, [pc, #200]	; (800fad0 <RegionUS915TxConfig+0xdc>)
 800fa06:	f913 a002 	ldrsb.w	sl, [r3, r2]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 800fa0a:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 800fad4 <RegionUS915TxConfig+0xe0>
 800fa0e:	f8d9 3000 	ldr.w	r3, [r9]
 800fa12:	7801      	ldrb	r1, [r0, #0]
 800fa14:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800fa18:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800fa1c:	7a49      	ldrb	r1, [r1, #9]
 800fa1e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800fa22:	482d      	ldr	r0, [pc, #180]	; (800fad8 <RegionUS915TxConfig+0xe4>)
 800fa24:	6800      	ldr	r0, [r0, #0]
 800fa26:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800fa2a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800fa2e:	f991 1002 	ldrsb.w	r1, [r1, #2]
 800fa32:	f994 0002 	ldrsb.w	r0, [r4, #2]
 800fa36:	f7ff fce7 	bl	800f408 <LimitTxPower>
 800fa3a:	4606      	mov	r6, r0
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 800fa3c:	4927      	ldr	r1, [pc, #156]	; (800fadc <RegionUS915TxConfig+0xe8>)
 800fa3e:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800fa42:	f7fe fe41 	bl	800e6c8 <RegionCommonGetBandwidth>
 800fa46:	900a      	str	r0, [sp, #40]	; 0x28
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 800fa48:	2200      	movs	r2, #0
 800fa4a:	4925      	ldr	r1, [pc, #148]	; (800fae0 <RegionUS915TxConfig+0xec>)
 800fa4c:	4630      	mov	r0, r6
 800fa4e:	f7fe fd51 	bl	800e4f4 <RegionCommonComputeTxPower>
 800fa52:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800fa54:	f8df 808c 	ldr.w	r8, [pc, #140]	; 800fae4 <RegionUS915TxConfig+0xf0>
 800fa58:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800fa5c:	f8d9 1000 	ldr.w	r1, [r9]
 800fa60:	7823      	ldrb	r3, [r4, #0]
 800fa62:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800fa66:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800fa6a:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800fa6c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800fa70:	9308      	str	r3, [sp, #32]
 800fa72:	2200      	movs	r2, #0
 800fa74:	9207      	str	r2, [sp, #28]
 800fa76:	9206      	str	r2, [sp, #24]
 800fa78:	9205      	str	r2, [sp, #20]
 800fa7a:	2501      	movs	r5, #1
 800fa7c:	9504      	str	r5, [sp, #16]
 800fa7e:	9203      	str	r2, [sp, #12]
 800fa80:	2308      	movs	r3, #8
 800fa82:	9302      	str	r3, [sp, #8]
 800fa84:	9501      	str	r5, [sp, #4]
 800fa86:	f8cd a000 	str.w	sl, [sp]
 800fa8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fa8e:	4628      	mov	r0, r5
 800fa90:	f8d8 c01c 	ldr.w	ip, [r8, #28]
 800fa94:	47e0      	blx	ip
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800fa96:	f8d9 2000 	ldr.w	r2, [r9]
 800fa9a:	7823      	ldrb	r3, [r4, #0]
 800fa9c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800faa0:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800faa4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800faa8:	f7fe fe42 	bl	800e730 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 800faac:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 800fab0:	7b21      	ldrb	r1, [r4, #12]
 800fab2:	4628      	mov	r0, r5
 800fab4:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800fab6:	89a1      	ldrh	r1, [r4, #12]
 800fab8:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800fabc:	f7ff fc86 	bl	800f3cc <GetTimeOnAir>
 800fac0:	6038      	str	r0, [r7, #0]

    *txPower = txPowerLimited;
 800fac2:	f88b 6000 	strb.w	r6, [fp]
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 800fac6:	4628      	mov	r0, r5
 800fac8:	b00d      	add	sp, #52	; 0x34
 800faca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800face:	bf00      	nop
 800fad0:	08014978 	.word	0x08014978
 800fad4:	2000102c 	.word	0x2000102c
 800fad8:	20001024 	.word	0x20001024
 800fadc:	08014924 	.word	0x08014924
 800fae0:	41f00000 	.word	0x41f00000
 800fae4:	08014f0c 	.word	0x08014f0c

0800fae8 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800fae8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800faec:	b091      	sub	sp, #68	; 0x44
 800faee:	4605      	mov	r5, r0
 800faf0:	4688      	mov	r8, r1
 800faf2:	4617      	mov	r7, r2
 800faf4:	461e      	mov	r6, r3
    uint8_t status = 0x07;
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800faf6:	2400      	movs	r4, #0
 800faf8:	940e      	str	r4, [sp, #56]	; 0x38
 800fafa:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 800fafe:	940b      	str	r4, [sp, #44]	; 0x2c
 800fb00:	940c      	str	r4, [sp, #48]	; 0x30
 800fb02:	940d      	str	r4, [sp, #52]	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800fb04:	4b97      	ldr	r3, [pc, #604]	; (800fd64 <RegionUS915LinkAdrReq+0x27c>)
 800fb06:	6819      	ldr	r1, [r3, #0]
 800fb08:	2206      	movs	r2, #6
 800fb0a:	f501 7158 	add.w	r1, r1, #864	; 0x360
 800fb0e:	a80b      	add	r0, sp, #44	; 0x2c
 800fb10:	f7fe fb80 	bl	800e214 <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800fb14:	e00d      	b.n	800fb32 <RegionUS915LinkAdrReq+0x4a>
        status = 0x07;

        if( linkAdrParams.ChMaskCtrl == 6 )
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 800fb16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fb1a:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0xFFFF;
 800fb1e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0xFFFF;
 800fb22:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0xFFFF;
 800fb26:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800fb2a:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 800fb2e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800fb32:	7a2b      	ldrb	r3, [r5, #8]
 800fb34:	42a3      	cmp	r3, r4
 800fb36:	f240 8081 	bls.w	800fc3c <RegionUS915LinkAdrReq+0x154>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800fb3a:	6868      	ldr	r0, [r5, #4]
 800fb3c:	a90e      	add	r1, sp, #56	; 0x38
 800fb3e:	4420      	add	r0, r4
 800fb40:	f7fe fc18 	bl	800e374 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800fb44:	2800      	cmp	r0, #0
 800fb46:	d079      	beq.n	800fc3c <RegionUS915LinkAdrReq+0x154>
        bytesProcessed += nextIndex;
 800fb48:	4404      	add	r4, r0
 800fb4a:	b2e4      	uxtb	r4, r4
        if( linkAdrParams.ChMaskCtrl == 6 )
 800fb4c:	f89d c03b 	ldrb.w	ip, [sp, #59]	; 0x3b
 800fb50:	f1bc 0f06 	cmp.w	ip, #6
 800fb54:	d0df      	beq.n	800fb16 <RegionUS915LinkAdrReq+0x2e>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 800fb56:	f1bc 0f07 	cmp.w	ip, #7
 800fb5a:	d00a      	beq.n	800fb72 <RegionUS915LinkAdrReq+0x8a>
            channelsMask[2] = 0x0000;
            channelsMask[3] = 0x0000;
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 800fb5c:	f1bc 0f05 	cmp.w	ip, #5
 800fb60:	d068      	beq.n	800fc34 <RegionUS915LinkAdrReq+0x14c>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 800fb62:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800fb66:	aa10      	add	r2, sp, #64	; 0x40
 800fb68:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 800fb6c:	f82c 3c14 	strh.w	r3, [ip, #-20]
 800fb70:	e7df      	b.n	800fb32 <RegionUS915LinkAdrReq+0x4a>
            channelsMask[0] = 0x0000;
 800fb72:	2300      	movs	r3, #0
 800fb74:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0x0000;
 800fb78:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0x0000;
 800fb7c:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0x0000;
 800fb80:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800fb84:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 800fb88:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800fb8c:	e7d1      	b.n	800fb32 <RegionUS915LinkAdrReq+0x4a>
                        channelsMask[cntChannelMask] |= 0xFF00;
 800fb8e:	aa10      	add	r2, sp, #64	; 0x40
 800fb90:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800fb94:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800fb98:	f062 02ff 	orn	r2, r2, #255	; 0xff
 800fb9c:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 800fba0:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800fba4:	4313      	orrs	r3, r2
 800fba6:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                        cntChannelMask++;
 800fbaa:	3101      	adds	r1, #1
 800fbac:	b2c9      	uxtb	r1, r1
            for( uint8_t i = 0; i <= 7; i++ )
 800fbae:	f10c 0c01 	add.w	ip, ip, #1
 800fbb2:	fa5f fc8c 	uxtb.w	ip, ip
 800fbb6:	f1bc 0f07 	cmp.w	ip, #7
 800fbba:	d8ba      	bhi.n	800fb32 <RegionUS915LinkAdrReq+0x4a>
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 800fbbc:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 800fbc0:	2301      	movs	r3, #1
 800fbc2:	fa03 f30c 	lsl.w	r3, r3, ip
 800fbc6:	421a      	tst	r2, r3
 800fbc8:	d011      	beq.n	800fbee <RegionUS915LinkAdrReq+0x106>
                    if( ( i % 2 ) == 0 )
 800fbca:	f01c 0f01 	tst.w	ip, #1
 800fbce:	d1de      	bne.n	800fb8e <RegionUS915LinkAdrReq+0xa6>
                        channelsMask[cntChannelMask] |= 0x00FF;
 800fbd0:	aa10      	add	r2, sp, #64	; 0x40
 800fbd2:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800fbd6:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800fbda:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 800fbde:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 800fbe2:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800fbe6:	4313      	orrs	r3, r2
 800fbe8:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800fbec:	e7df      	b.n	800fbae <RegionUS915LinkAdrReq+0xc6>
                    if( ( i % 2 ) == 0 )
 800fbee:	f01c 0f01 	tst.w	ip, #1
 800fbf2:	d10f      	bne.n	800fc14 <RegionUS915LinkAdrReq+0x12c>
                        channelsMask[cntChannelMask] &= 0xFF00;
 800fbf4:	aa10      	add	r2, sp, #64	; 0x40
 800fbf6:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800fbfa:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800fbfe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800fc02:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 800fc06:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800fc0a:	ea22 0303 	bic.w	r3, r2, r3
 800fc0e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800fc12:	e7cc      	b.n	800fbae <RegionUS915LinkAdrReq+0xc6>
                        channelsMask[cntChannelMask] &= 0x00FF;
 800fc14:	aa10      	add	r2, sp, #64	; 0x40
 800fc16:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 800fc1a:	f812 0c14 	ldrb.w	r0, [r2, #-20]
 800fc1e:	f822 0c14 	strh.w	r0, [r2, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 800fc22:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800fc26:	ea22 0303 	bic.w	r3, r2, r3
 800fc2a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                        cntChannelMask++;
 800fc2e:	3101      	adds	r1, #1
 800fc30:	b2c9      	uxtb	r1, r1
 800fc32:	e7bc      	b.n	800fbae <RegionUS915LinkAdrReq+0xc6>
            for( uint8_t i = 0; i <= 7; i++ )
 800fc34:	f04f 0c00 	mov.w	ip, #0
            uint8_t cntChannelMask = 0;
 800fc38:	4661      	mov	r1, ip
 800fc3a:	e7bc      	b.n	800fbb6 <RegionUS915LinkAdrReq+0xce>
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 800fc3c:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800fc40:	2b03      	cmp	r3, #3
 800fc42:	dd58      	ble.n	800fcf6 <RegionUS915LinkAdrReq+0x20e>
 800fc44:	f04f 0907 	mov.w	r9, #7
    {
        status &= 0xFE; // Channel mask KO
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800fc48:	2302      	movs	r3, #2
 800fc4a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800fc4e:	7a6b      	ldrb	r3, [r5, #9]
 800fc50:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    phyParam = RegionUS915GetPhyParam( &getPhy );
 800fc54:	a809      	add	r0, sp, #36	; 0x24
 800fc56:	f7ff fbf3 	bl	800f440 <RegionUS915GetPhyParam>
 800fc5a:	9008      	str	r0, [sp, #32]

    linkAdrVerifyParams.Status = status;
 800fc5c:	f88d 9004 	strb.w	r9, [sp, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800fc60:	7aab      	ldrb	r3, [r5, #10]
 800fc62:	f88d 3005 	strb.w	r3, [sp, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800fc66:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800fc6a:	f88d 3006 	strb.w	r3, [sp, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800fc6e:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 800fc72:	f88d 3007 	strb.w	r3, [sp, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800fc76:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800fc7a:	f88d 3008 	strb.w	r3, [sp, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800fc7e:	f995 300b 	ldrsb.w	r3, [r5, #11]
 800fc82:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800fc86:	f995 300c 	ldrsb.w	r3, [r5, #12]
 800fc8a:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800fc8e:	f995 300d 	ldrsb.w	r3, [r5, #13]
 800fc92:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 800fc96:	2348      	movs	r3, #72	; 0x48
 800fc98:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 800fc9c:	ab0b      	add	r3, sp, #44	; 0x2c
 800fc9e:	9304      	str	r3, [sp, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800fca0:	f88d 0014 	strb.w	r0, [sp, #20]
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 800fca4:	2304      	movs	r3, #4
 800fca6:	f88d 3015 	strb.w	r3, [sp, #21]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800fcaa:	4b2e      	ldr	r3, [pc, #184]	; (800fd64 <RegionUS915LinkAdrReq+0x27c>)
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	9306      	str	r3, [sp, #24]
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 800fcb0:	230e      	movs	r3, #14
 800fcb2:	f88d 301c 	strb.w	r3, [sp, #28]
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	f88d 301d 	strb.w	r3, [sp, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800fcbc:	682b      	ldr	r3, [r5, #0]
 800fcbe:	9300      	str	r3, [sp, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800fcc0:	ab0e      	add	r3, sp, #56	; 0x38
 800fcc2:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 800fcc6:	f10d 0139 	add.w	r1, sp, #57	; 0x39
 800fcca:	4668      	mov	r0, sp
 800fccc:	f7fe fb70 	bl	800e3b0 <RegionCommonLinkAdrReqVerifyParams>
 800fcd0:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800fcd2:	2807      	cmp	r0, #7
 800fcd4:	d01c      	beq.n	800fd10 <RegionUS915LinkAdrReq+0x228>
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800fcd6:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800fcda:	f888 3000 	strb.w	r3, [r8]
    *txPowOut = linkAdrParams.TxPower;
 800fcde:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 800fce2:	703b      	strb	r3, [r7, #0]
    *nbRepOut = linkAdrParams.NbRep;
 800fce4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800fce8:	7033      	strb	r3, [r6, #0]
    *nbBytesParsed = bytesProcessed;
 800fcea:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800fcec:	701c      	strb	r4, [r3, #0]

#endif /* REGION_US915 */
    return status;
}
 800fcee:	4628      	mov	r0, r5
 800fcf0:	b011      	add	sp, #68	; 0x44
 800fcf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 800fcf6:	2204      	movs	r2, #4
 800fcf8:	2100      	movs	r1, #0
 800fcfa:	a80b      	add	r0, sp, #44	; 0x2c
 800fcfc:	f7fe fa74 	bl	800e1e8 <RegionCommonCountChannels>
 800fd00:	2801      	cmp	r0, #1
 800fd02:	d902      	bls.n	800fd0a <RegionUS915LinkAdrReq+0x222>
 800fd04:	f04f 0907 	mov.w	r9, #7
 800fd08:	e79e      	b.n	800fc48 <RegionUS915LinkAdrReq+0x160>
        status &= 0xFE; // Channel mask KO
 800fd0a:	f04f 0906 	mov.w	r9, #6
 800fd0e:	e79b      	b.n	800fc48 <RegionUS915LinkAdrReq+0x160>
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 800fd10:	f8df 9050 	ldr.w	r9, [pc, #80]	; 800fd64 <RegionUS915LinkAdrReq+0x27c>
 800fd14:	f8d9 0000 	ldr.w	r0, [r9]
 800fd18:	2206      	movs	r2, #6
 800fd1a:	a90b      	add	r1, sp, #44	; 0x2c
 800fd1c:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800fd20:	f7fe fa78 	bl	800e214 <RegionCommonChanMaskCopy>
        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 800fd24:	4b10      	ldr	r3, [pc, #64]	; (800fd68 <RegionUS915LinkAdrReq+0x280>)
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	f8d9 2000 	ldr.w	r2, [r9]
 800fd2c:	f8b2 1360 	ldrh.w	r1, [r2, #864]	; 0x360
 800fd30:	8818      	ldrh	r0, [r3, #0]
 800fd32:	4001      	ands	r1, r0
 800fd34:	8019      	strh	r1, [r3, #0]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 800fd36:	f8b2 1362 	ldrh.w	r1, [r2, #866]	; 0x362
 800fd3a:	8858      	ldrh	r0, [r3, #2]
 800fd3c:	4001      	ands	r1, r0
 800fd3e:	8059      	strh	r1, [r3, #2]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 800fd40:	f8b2 1364 	ldrh.w	r1, [r2, #868]	; 0x364
 800fd44:	8898      	ldrh	r0, [r3, #4]
 800fd46:	4001      	ands	r1, r0
 800fd48:	8099      	strh	r1, [r3, #4]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 800fd4a:	f8b2 1366 	ldrh.w	r1, [r2, #870]	; 0x366
 800fd4e:	88d8      	ldrh	r0, [r3, #6]
 800fd50:	4001      	ands	r1, r0
 800fd52:	80d9      	strh	r1, [r3, #6]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800fd54:	f8b2 1368 	ldrh.w	r1, [r2, #872]	; 0x368
 800fd58:	8119      	strh	r1, [r3, #8]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 800fd5a:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
 800fd5e:	815a      	strh	r2, [r3, #10]
 800fd60:	e7b9      	b.n	800fcd6 <RegionUS915LinkAdrReq+0x1ee>
 800fd62:	bf00      	nop
 800fd64:	2000102c 	.word	0x2000102c
 800fd68:	20001028 	.word	0x20001028

0800fd6c <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800fd6c:	b538      	push	{r3, r4, r5, lr}
 800fd6e:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 800fd70:	6840      	ldr	r0, [r0, #4]
 800fd72:	f7ff fafb 	bl	800f36c <VerifyRfFreq>
 800fd76:	b310      	cbz	r0, 800fdbe <RegionUS915RxParamSetupReq+0x52>
    uint8_t status = 0x07;
 800fd78:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 800fd7a:	220d      	movs	r2, #13
 800fd7c:	2108      	movs	r1, #8
 800fd7e:	f994 0000 	ldrsb.w	r0, [r4]
 800fd82:	f7fe f9d6 	bl	800e132 <RegionCommonValueInRange>
 800fd86:	b908      	cbnz	r0, 800fd8c <RegionUS915RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 800fd88:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 800fd8c:	2207      	movs	r2, #7
 800fd8e:	2105      	movs	r1, #5
 800fd90:	f994 0000 	ldrsb.w	r0, [r4]
 800fd94:	f7fe f9cd 	bl	800e132 <RegionCommonValueInRange>
 800fd98:	2801      	cmp	r0, #1
 800fd9a:	d003      	beq.n	800fda4 <RegionUS915RxParamSetupReq+0x38>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 800fd9c:	f994 3000 	ldrsb.w	r3, [r4]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 800fda0:	2b0d      	cmp	r3, #13
 800fda2:	dd01      	ble.n	800fda8 <RegionUS915RxParamSetupReq+0x3c>
    {
        status &= 0xFD; // Datarate KO
 800fda4:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 800fda8:	2203      	movs	r2, #3
 800fdaa:	2100      	movs	r1, #0
 800fdac:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800fdb0:	f7fe f9bf 	bl	800e132 <RegionCommonValueInRange>
 800fdb4:	b908      	cbnz	r0, 800fdba <RegionUS915RxParamSetupReq+0x4e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800fdb6:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_US915 */
    return status;
}
 800fdba:	4628      	mov	r0, r5
 800fdbc:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800fdbe:	2506      	movs	r5, #6
 800fdc0:	e7db      	b.n	800fd7a <RegionUS915RxParamSetupReq+0xe>

0800fdc2 <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
    // Do not accept the request
    return -1;
}
 800fdc2:	f04f 30ff 	mov.w	r0, #4294967295
 800fdc6:	4770      	bx	lr

0800fdc8 <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 800fdc8:	f04f 30ff 	mov.w	r0, #4294967295
 800fdcc:	4770      	bx	lr

0800fdce <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
    // Do not accept the request
    return -1;
}
 800fdce:	f04f 30ff 	mov.w	r0, #4294967295
 800fdd2:	4770      	bx	lr

0800fdd4 <RegionUS915AlternateDr>:
int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 800fdd4:	b999      	cbnz	r1, 800fdfe <RegionUS915AlternateDr+0x2a>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 800fdd6:	4b0e      	ldr	r3, [pc, #56]	; (800fe10 <RegionUS915AlternateDr+0x3c>)
 800fdd8:	681a      	ldr	r2, [r3, #0]
 800fdda:	7b53      	ldrb	r3, [r2, #13]
 800fddc:	3301      	adds	r3, #1
 800fdde:	7353      	strb	r3, [r2, #13]
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 800fde0:	4b0b      	ldr	r3, [pc, #44]	; (800fe10 <RegionUS915AlternateDr+0x3c>)
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	7b5a      	ldrb	r2, [r3, #13]
 800fde6:	4b0b      	ldr	r3, [pc, #44]	; (800fe14 <RegionUS915AlternateDr+0x40>)
 800fde8:	fba3 1302 	umull	r1, r3, r3, r2
 800fdec:	085b      	lsrs	r3, r3, #1
 800fdee:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800fdf2:	1ad3      	subs	r3, r2, r3
 800fdf4:	f013 0fff 	tst.w	r3, #255	; 0xff
 800fdf8:	d007      	beq.n	800fe0a <RegionUS915AlternateDr+0x36>
        // Use DR_4 every 9th times.
        currentDr = DR_4;
    }
    else
    {
        currentDr = DR_0;
 800fdfa:	2000      	movs	r0, #0
    }
    return currentDr;
#else
    return -1;
#endif /* REGION_US915 */
}
 800fdfc:	4770      	bx	lr
        RegionNvmGroup1->JoinTrialsCounter--;
 800fdfe:	4b04      	ldr	r3, [pc, #16]	; (800fe10 <RegionUS915AlternateDr+0x3c>)
 800fe00:	681a      	ldr	r2, [r3, #0]
 800fe02:	7b53      	ldrb	r3, [r2, #13]
 800fe04:	3b01      	subs	r3, #1
 800fe06:	7353      	strb	r3, [r2, #13]
 800fe08:	e7ea      	b.n	800fde0 <RegionUS915AlternateDr+0xc>
        currentDr = DR_4;
 800fe0a:	2004      	movs	r0, #4
 800fe0c:	4770      	bx	lr
 800fe0e:	bf00      	nop
 800fe10:	20001028 	.word	0x20001028
 800fe14:	38e38e39 	.word	0x38e38e39

0800fe18 <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800fe18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe1c:	b0a4      	sub	sp, #144	; 0x90
 800fe1e:	4604      	mov	r4, r0
 800fe20:	460e      	mov	r6, r1
 800fe22:	4690      	mov	r8, r2
 800fe24:	461f      	mov	r7, r3
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 800fe26:	2500      	movs	r5, #0
 800fe28:	f88d 508f 	strb.w	r5, [sp, #143]	; 0x8f
    uint8_t nbRestrictedChannels = 0;
 800fe2c:	f88d 508e 	strb.w	r5, [sp, #142]	; 0x8e
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 800fe30:	9511      	str	r5, [sp, #68]	; 0x44
 800fe32:	2244      	movs	r2, #68	; 0x44
 800fe34:	4629      	mov	r1, r5
 800fe36:	a812      	add	r0, sp, #72	; 0x48
 800fe38:	f003 fc4e 	bl	80136d8 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 800fe3c:	2204      	movs	r2, #4
 800fe3e:	4629      	mov	r1, r5
 800fe40:	4b49      	ldr	r3, [pc, #292]	; (800ff68 <RegionUS915NextChannel+0x150>)
 800fe42:	6818      	ldr	r0, [r3, #0]
 800fe44:	f7fe f9d0 	bl	800e1e8 <RegionCommonCountChannels>
 800fe48:	2800      	cmp	r0, #0
 800fe4a:	d052      	beq.n	800fef2 <RegionUS915NextChannel+0xda>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 800fe4c:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800fe50:	2b03      	cmp	r3, #3
 800fe52:	dd08      	ble.n	800fe66 <RegionUS915NextChannel+0x4e>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 800fe54:	4b44      	ldr	r3, [pc, #272]	; (800ff68 <RegionUS915NextChannel+0x150>)
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	7a1a      	ldrb	r2, [r3, #8]
 800fe5a:	b922      	cbnz	r2, 800fe66 <RegionUS915NextChannel+0x4e>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800fe5c:	4a43      	ldr	r2, [pc, #268]	; (800ff6c <RegionUS915NextChannel+0x154>)
 800fe5e:	6812      	ldr	r2, [r2, #0]
 800fe60:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 800fe64:	811a      	strh	r2, [r3, #8]
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800fe66:	7a63      	ldrb	r3, [r4, #9]
 800fe68:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800fe6c:	7a23      	ldrb	r3, [r4, #8]
 800fe6e:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 800fe72:	4b3d      	ldr	r3, [pc, #244]	; (800ff68 <RegionUS915NextChannel+0x150>)
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	9304      	str	r3, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800fe78:	4b3c      	ldr	r3, [pc, #240]	; (800ff6c <RegionUS915NextChannel+0x154>)
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	9305      	str	r3, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 800fe7e:	4b3c      	ldr	r3, [pc, #240]	; (800ff70 <RegionUS915NextChannel+0x158>)
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	9306      	str	r3, [sp, #24]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 800fe84:	2348      	movs	r3, #72	; 0x48
 800fe86:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = NULL;
 800fe8a:	2300      	movs	r3, #0
 800fe8c:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800fe8e:	6823      	ldr	r3, [r4, #0]
 800fe90:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800fe92:	6863      	ldr	r3, [r4, #4]
 800fe94:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800fe96:	7aa3      	ldrb	r3, [r4, #10]
 800fe98:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 800fe9c:	2301      	movs	r3, #1
 800fe9e:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800fea2:	ab03      	add	r3, sp, #12
 800fea4:	9310      	str	r3, [sp, #64]	; 0x40

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800fea6:	ab0c      	add	r3, sp, #48	; 0x30
 800fea8:	f104 020c 	add.w	r2, r4, #12
 800feac:	e892 0003 	ldmia.w	r2, {r0, r1}
 800feb0:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800feb4:	7d23      	ldrb	r3, [r4, #20]
 800feb6:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800feba:	8ae1      	ldrh	r1, [r4, #22]
 800febc:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800fec0:	f7ff fa84 	bl	800f3cc <GetTimeOnAir>
 800fec4:	900f      	str	r0, [sp, #60]	; 0x3c
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800fec6:	f8cd 8004 	str.w	r8, [sp, #4]
 800feca:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 800fece:	9300      	str	r3, [sp, #0]
 800fed0:	f10d 038f 	add.w	r3, sp, #143	; 0x8f
 800fed4:	aa11      	add	r2, sp, #68	; 0x44
 800fed6:	4639      	mov	r1, r7
 800fed8:	a809      	add	r0, sp, #36	; 0x24
 800feda:	f7fe fb87 	bl	800e5ec <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800fede:	4605      	mov	r5, r0
 800fee0:	2800      	cmp	r0, #0
 800fee2:	d13c      	bne.n	800ff5e <RegionUS915NextChannel+0x146>
    {
        if( nextChanParams->Joined == true )
 800fee4:	7a63      	ldrb	r3, [r4, #9]
 800fee6:	b98b      	cbnz	r3, 800ff0c <RegionUS915NextChannel+0xf4>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 800fee8:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800feec:	b1db      	cbz	r3, 800ff26 <RegionUS915NextChannel+0x10e>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 800feee:	4603      	mov	r3, r0
 800fef0:	e026      	b.n	800ff40 <RegionUS915NextChannel+0x128>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 800fef2:	4d1d      	ldr	r5, [pc, #116]	; (800ff68 <RegionUS915NextChannel+0x150>)
 800fef4:	4b1d      	ldr	r3, [pc, #116]	; (800ff6c <RegionUS915NextChannel+0x154>)
 800fef6:	6819      	ldr	r1, [r3, #0]
 800fef8:	2204      	movs	r2, #4
 800fefa:	f501 7158 	add.w	r1, r1, #864	; 0x360
 800fefe:	6828      	ldr	r0, [r5, #0]
 800ff00:	f7fe f988 	bl	800e214 <RegionCommonChanMaskCopy>
        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800ff04:	682b      	ldr	r3, [r5, #0]
 800ff06:	2200      	movs	r2, #0
 800ff08:	731a      	strb	r2, [r3, #12]
 800ff0a:	e79f      	b.n	800fe4c <RegionUS915NextChannel+0x34>
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800ff0c:	f89d 108f 	ldrb.w	r1, [sp, #143]	; 0x8f
 800ff10:	3901      	subs	r1, #1
 800ff12:	f000 ff2f 	bl	8010d74 <randr>
 800ff16:	f100 0390 	add.w	r3, r0, #144	; 0x90
 800ff1a:	eb0d 0003 	add.w	r0, sp, r3
 800ff1e:	f810 3c4c 	ldrb.w	r3, [r0, #-76]
 800ff22:	7033      	strb	r3, [r6, #0]
 800ff24:	e015      	b.n	800ff52 <RegionUS915NextChannel+0x13a>
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 800ff26:	4b10      	ldr	r3, [pc, #64]	; (800ff68 <RegionUS915NextChannel+0x150>)
 800ff28:	6818      	ldr	r0, [r3, #0]
 800ff2a:	4632      	mov	r2, r6
 800ff2c:	f100 010c 	add.w	r1, r0, #12
 800ff30:	f7fd ffe2 	bl	800def8 <RegionBaseUSComputeNext125kHzJoinChannel>
 800ff34:	2803      	cmp	r0, #3
 800ff36:	d10c      	bne.n	800ff52 <RegionUS915NextChannel+0x13a>
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 800ff38:	4605      	mov	r5, r0
 800ff3a:	e010      	b.n	800ff5e <RegionUS915NextChannel+0x146>
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
                {
                    i++;
 800ff3c:	3301      	adds	r3, #1
 800ff3e:	b2db      	uxtb	r3, r3
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 800ff40:	4a09      	ldr	r2, [pc, #36]	; (800ff68 <RegionUS915NextChannel+0x150>)
 800ff42:	6812      	ldr	r2, [r2, #0]
 800ff44:	7a10      	ldrb	r0, [r2, #8]
 800ff46:	4118      	asrs	r0, r3
 800ff48:	f010 0f01 	tst.w	r0, #1
 800ff4c:	d0f6      	beq.n	800ff3c <RegionUS915NextChannel+0x124>
                }
                *channel = 64 + i;
 800ff4e:	3340      	adds	r3, #64	; 0x40
 800ff50:	7033      	strb	r3, [r6, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 800ff52:	2248      	movs	r2, #72	; 0x48
 800ff54:	7831      	ldrb	r1, [r6, #0]
 800ff56:	4b04      	ldr	r3, [pc, #16]	; (800ff68 <RegionUS915NextChannel+0x150>)
 800ff58:	6818      	ldr	r0, [r3, #0]
 800ff5a:	f7fe f92c 	bl	800e1b6 <RegionCommonChanDisable>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 800ff5e:	4628      	mov	r0, r5
 800ff60:	b024      	add	sp, #144	; 0x90
 800ff62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff66:	bf00      	nop
 800ff68:	20001028 	.word	0x20001028
 800ff6c:	2000102c 	.word	0x2000102c
 800ff70:	20001024 	.word	0x20001024

0800ff74 <RegionUS915ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 800ff74:	4b04      	ldr	r3, [pc, #16]	; (800ff88 <RegionUS915ApplyDrOffset+0x14>)
 800ff76:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800ff7a:	5698      	ldrsb	r0, [r3, r2]

    if( datarate < 0 )
 800ff7c:	2800      	cmp	r0, #0
 800ff7e:	db01      	blt.n	800ff84 <RegionUS915ApplyDrOffset+0x10>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_US915 */
}
 800ff80:	b2c0      	uxtb	r0, r0
 800ff82:	4770      	bx	lr
        datarate = DR_0;
 800ff84:	2000      	movs	r0, #0
 800ff86:	e7fb      	b.n	800ff80 <RegionUS915ApplyDrOffset+0xc>
 800ff88:	08014964 	.word	0x08014964

0800ff8c <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800ff8c:	b510      	push	{r4, lr}
 800ff8e:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 800ff90:	2210      	movs	r2, #16
 800ff92:	2100      	movs	r1, #0
 800ff94:	30f1      	adds	r0, #241	; 0xf1
 800ff96:	f000 ff12 	bl	8010dbe <memset1>
    ctx->M_n = 0;
 800ff9a:	2100      	movs	r1, #0
 800ff9c:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800ffa0:	22f0      	movs	r2, #240	; 0xf0
 800ffa2:	4620      	mov	r0, r4
 800ffa4:	f000 ff0b 	bl	8010dbe <memset1>
}
 800ffa8:	bd10      	pop	{r4, pc}

0800ffaa <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800ffaa:	b508      	push	{r3, lr}
 800ffac:	4602      	mov	r2, r0
 800ffae:	4608      	mov	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800ffb0:	2110      	movs	r1, #16
 800ffb2:	f000 fb3b 	bl	801062c <lorawan_aes_set_key>
}
 800ffb6:	bd08      	pop	{r3, pc}

0800ffb8 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800ffb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffbc:	b084      	sub	sp, #16
 800ffbe:	4604      	mov	r4, r0
 800ffc0:	460d      	mov	r5, r1
 800ffc2:	4616      	mov	r6, r2
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800ffc4:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d054      	beq.n	8010076 <AES_CMAC_Update+0xbe>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800ffcc:	f1c3 0810 	rsb	r8, r3, #16
 800ffd0:	4647      	mov	r7, r8
 800ffd2:	4590      	cmp	r8, r2
 800ffd4:	bf28      	it	cs
 800ffd6:	4617      	movcs	r7, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800ffd8:	f200 1001 	addw	r0, r0, #257	; 0x101
 800ffdc:	b2ba      	uxth	r2, r7
 800ffde:	4418      	add	r0, r3
 800ffe0:	f000 fed5 	bl	8010d8e <memcpy1>
        ctx->M_n += mlen;
 800ffe4:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800ffe8:	443b      	add	r3, r7
 800ffea:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800ffee:	2b0f      	cmp	r3, #15
 800fff0:	d94d      	bls.n	801008e <AES_CMAC_Update+0xd6>
 800fff2:	45b0      	cmp	r8, r6
 800fff4:	d24b      	bcs.n	801008e <AES_CMAC_Update+0xd6>
            return;
        XOR( ctx->M_last, ctx->X );
 800fff6:	2300      	movs	r3, #0
 800fff8:	e008      	b.n	801000c <AES_CMAC_Update+0x54>
 800fffa:	18e2      	adds	r2, r4, r3
 800fffc:	f892 10f1 	ldrb.w	r1, [r2, #241]	; 0xf1
 8010000:	f892 0101 	ldrb.w	r0, [r2, #257]	; 0x101
 8010004:	4041      	eors	r1, r0
 8010006:	f882 10f1 	strb.w	r1, [r2, #241]	; 0xf1
 801000a:	3301      	adds	r3, #1
 801000c:	2b0f      	cmp	r3, #15
 801000e:	ddf4      	ble.n	800fffa <AES_CMAC_Update+0x42>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8010010:	f104 08f1 	add.w	r8, r4, #241	; 0xf1
 8010014:	2210      	movs	r2, #16
 8010016:	4641      	mov	r1, r8
 8010018:	4668      	mov	r0, sp
 801001a:	f000 feb8 	bl	8010d8e <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 801001e:	4622      	mov	r2, r4
 8010020:	4669      	mov	r1, sp
 8010022:	4668      	mov	r0, sp
 8010024:	f000 fb84 	bl	8010730 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8010028:	2210      	movs	r2, #16
 801002a:	4669      	mov	r1, sp
 801002c:	4640      	mov	r0, r8
 801002e:	f000 feae 	bl	8010d8e <memcpy1>

        data += mlen;
 8010032:	443d      	add	r5, r7
        len -= mlen;
 8010034:	1bf6      	subs	r6, r6, r7
 8010036:	e01e      	b.n	8010076 <AES_CMAC_Update+0xbe>
    }
    while( len > 16 )
    { /* not last block */

        XOR( data, ctx->X );
 8010038:	eb04 0e03 	add.w	lr, r4, r3
 801003c:	f89e c0f1 	ldrb.w	ip, [lr, #241]	; 0xf1
 8010040:	5cea      	ldrb	r2, [r5, r3]
 8010042:	ea8c 0c02 	eor.w	ip, ip, r2
 8010046:	f88e c0f1 	strb.w	ip, [lr, #241]	; 0xf1
 801004a:	3301      	adds	r3, #1
 801004c:	2b0f      	cmp	r3, #15
 801004e:	ddf3      	ble.n	8010038 <AES_CMAC_Update+0x80>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8010050:	f104 07f1 	add.w	r7, r4, #241	; 0xf1
 8010054:	2210      	movs	r2, #16
 8010056:	4639      	mov	r1, r7
 8010058:	4668      	mov	r0, sp
 801005a:	f000 fe98 	bl	8010d8e <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 801005e:	4622      	mov	r2, r4
 8010060:	4669      	mov	r1, sp
 8010062:	4668      	mov	r0, sp
 8010064:	f000 fb64 	bl	8010730 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8010068:	2210      	movs	r2, #16
 801006a:	4669      	mov	r1, sp
 801006c:	4638      	mov	r0, r7
 801006e:	f000 fe8e 	bl	8010d8e <memcpy1>

        data += 16;
 8010072:	3510      	adds	r5, #16
        len -= 16;
 8010074:	3e10      	subs	r6, #16
    while( len > 16 )
 8010076:	2e10      	cmp	r6, #16
 8010078:	d901      	bls.n	801007e <AES_CMAC_Update+0xc6>
        XOR( data, ctx->X );
 801007a:	2300      	movs	r3, #0
 801007c:	e7e6      	b.n	801004c <AES_CMAC_Update+0x94>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 801007e:	b2b2      	uxth	r2, r6
 8010080:	4629      	mov	r1, r5
 8010082:	f204 1001 	addw	r0, r4, #257	; 0x101
 8010086:	f000 fe82 	bl	8010d8e <memcpy1>
    ctx->M_n = len;
 801008a:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
}
 801008e:	b004      	add	sp, #16
 8010090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010094 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 8010094:	b530      	push	{r4, r5, lr}
 8010096:	b089      	sub	sp, #36	; 0x24
 8010098:	4605      	mov	r5, r0
 801009a:	460c      	mov	r4, r1
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 801009c:	2210      	movs	r2, #16
 801009e:	2100      	movs	r1, #0
 80100a0:	eb0d 0002 	add.w	r0, sp, r2
 80100a4:	f000 fe8b 	bl	8010dbe <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 80100a8:	4622      	mov	r2, r4
 80100aa:	a904      	add	r1, sp, #16
 80100ac:	4608      	mov	r0, r1
 80100ae:	f000 fb3f 	bl	8010730 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 80100b2:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	db01      	blt.n	80100be <AES_CMAC_Final+0x2a>
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 80100ba:	2300      	movs	r3, #0
 80100bc:	e030      	b.n	8010120 <AES_CMAC_Final+0x8c>
        LSHIFT( K, K );
 80100be:	2300      	movs	r3, #0
 80100c0:	2b0e      	cmp	r3, #14
 80100c2:	dc11      	bgt.n	80100e8 <AES_CMAC_Final+0x54>
 80100c4:	f103 0220 	add.w	r2, r3, #32
 80100c8:	eb0d 0102 	add.w	r1, sp, r2
 80100cc:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 80100d0:	3301      	adds	r3, #1
 80100d2:	f103 0220 	add.w	r2, r3, #32
 80100d6:	446a      	add	r2, sp
 80100d8:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80100dc:	09d2      	lsrs	r2, r2, #7
 80100de:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 80100e2:	f801 2c10 	strb.w	r2, [r1, #-16]
 80100e6:	e7eb      	b.n	80100c0 <AES_CMAC_Final+0x2c>
 80100e8:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80100ec:	005b      	lsls	r3, r3, #1
 80100ee:	b2db      	uxtb	r3, r3
 80100f0:	f88d 301f 	strb.w	r3, [sp, #31]
        K[15] ^= 0x87;
 80100f4:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 80100f8:	f88d 301f 	strb.w	r3, [sp, #31]
 80100fc:	e017      	b.n	801012e <AES_CMAC_Final+0x9a>
        LSHIFT( K, K );
 80100fe:	f103 0220 	add.w	r2, r3, #32
 8010102:	eb0d 0102 	add.w	r1, sp, r2
 8010106:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 801010a:	3301      	adds	r3, #1
 801010c:	f103 0220 	add.w	r2, r3, #32
 8010110:	446a      	add	r2, sp
 8010112:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8010116:	09d2      	lsrs	r2, r2, #7
 8010118:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 801011c:	f801 2c10 	strb.w	r2, [r1, #-16]
 8010120:	2b0e      	cmp	r3, #14
 8010122:	ddec      	ble.n	80100fe <AES_CMAC_Final+0x6a>
 8010124:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8010128:	005b      	lsls	r3, r3, #1
 801012a:	f88d 301f 	strb.w	r3, [sp, #31]

    if( ctx->M_n == 16 )
 801012e:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 8010132:	2810      	cmp	r0, #16
 8010134:	d014      	beq.n	8010160 <AES_CMAC_Final+0xcc>
        XOR( K, ctx->M_last );
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 8010136:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 801013a:	2b00      	cmp	r3, #0
 801013c:	db30      	blt.n	80101a0 <AES_CMAC_Final+0x10c>
        {
            LSHIFT( K, K );
            K[15] ^= 0x87;
        }
        else
            LSHIFT( K, K );
 801013e:	2300      	movs	r3, #0
 8010140:	e041      	b.n	80101c6 <AES_CMAC_Final+0x132>
        XOR( K, ctx->M_last );
 8010142:	18e1      	adds	r1, r4, r3
 8010144:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 8010148:	f103 0020 	add.w	r0, r3, #32
 801014c:	4468      	add	r0, sp
 801014e:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 8010152:	4042      	eors	r2, r0
 8010154:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 8010158:	3301      	adds	r3, #1
 801015a:	2b0f      	cmp	r3, #15
 801015c:	ddf1      	ble.n	8010142 <AES_CMAC_Final+0xae>
 801015e:	e059      	b.n	8010214 <AES_CMAC_Final+0x180>
 8010160:	2300      	movs	r3, #0
 8010162:	e7fa      	b.n	801015a <AES_CMAC_Final+0xc6>
            LSHIFT( K, K );
 8010164:	f103 0220 	add.w	r2, r3, #32
 8010168:	eb0d 0102 	add.w	r1, sp, r2
 801016c:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 8010170:	3301      	adds	r3, #1
 8010172:	f103 0220 	add.w	r2, r3, #32
 8010176:	446a      	add	r2, sp
 8010178:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 801017c:	09d2      	lsrs	r2, r2, #7
 801017e:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 8010182:	f801 2c10 	strb.w	r2, [r1, #-16]
 8010186:	2b0e      	cmp	r3, #14
 8010188:	ddec      	ble.n	8010164 <AES_CMAC_Final+0xd0>
 801018a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801018e:	005b      	lsls	r3, r3, #1
 8010190:	b2db      	uxtb	r3, r3
 8010192:	f88d 301f 	strb.w	r3, [sp, #31]
            K[15] ^= 0x87;
 8010196:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 801019a:	f88d 301f 	strb.w	r3, [sp, #31]
 801019e:	e019      	b.n	80101d4 <AES_CMAC_Final+0x140>
            LSHIFT( K, K );
 80101a0:	2300      	movs	r3, #0
 80101a2:	e7f0      	b.n	8010186 <AES_CMAC_Final+0xf2>
            LSHIFT( K, K );
 80101a4:	f103 0220 	add.w	r2, r3, #32
 80101a8:	eb0d 0102 	add.w	r1, sp, r2
 80101ac:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 80101b0:	3301      	adds	r3, #1
 80101b2:	f103 0220 	add.w	r2, r3, #32
 80101b6:	446a      	add	r2, sp
 80101b8:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80101bc:	09d2      	lsrs	r2, r2, #7
 80101be:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 80101c2:	f801 2c10 	strb.w	r2, [r1, #-16]
 80101c6:	2b0e      	cmp	r3, #14
 80101c8:	ddec      	ble.n	80101a4 <AES_CMAC_Final+0x110>
 80101ca:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80101ce:	005b      	lsls	r3, r3, #1
 80101d0:	f88d 301f 	strb.w	r3, [sp, #31]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 80101d4:	4420      	add	r0, r4
 80101d6:	2380      	movs	r3, #128	; 0x80
 80101d8:	f880 3101 	strb.w	r3, [r0, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 80101dc:	e003      	b.n	80101e6 <AES_CMAC_Final+0x152>
            ctx->M_last[ctx->M_n] = 0;
 80101de:	4423      	add	r3, r4
 80101e0:	2200      	movs	r2, #0
 80101e2:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 80101e6:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80101ea:	3301      	adds	r3, #1
 80101ec:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 80101f0:	2b0f      	cmp	r3, #15
 80101f2:	d9f4      	bls.n	80101de <AES_CMAC_Final+0x14a>

        XOR( K, ctx->M_last );
 80101f4:	2300      	movs	r3, #0
 80101f6:	e00b      	b.n	8010210 <AES_CMAC_Final+0x17c>
 80101f8:	18e1      	adds	r1, r4, r3
 80101fa:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 80101fe:	f103 0020 	add.w	r0, r3, #32
 8010202:	4468      	add	r0, sp
 8010204:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 8010208:	4042      	eors	r2, r0
 801020a:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 801020e:	3301      	adds	r3, #1
 8010210:	2b0f      	cmp	r3, #15
 8010212:	ddf1      	ble.n	80101f8 <AES_CMAC_Final+0x164>
 8010214:	2300      	movs	r3, #0
 8010216:	e009      	b.n	801022c <AES_CMAC_Final+0x198>
    }
    XOR( ctx->M_last, ctx->X );
 8010218:	18e2      	adds	r2, r4, r3
 801021a:	f892 c0f1 	ldrb.w	ip, [r2, #241]	; 0xf1
 801021e:	f892 1101 	ldrb.w	r1, [r2, #257]	; 0x101
 8010222:	ea8c 0c01 	eor.w	ip, ip, r1
 8010226:	f882 c0f1 	strb.w	ip, [r2, #241]	; 0xf1
 801022a:	3301      	adds	r3, #1
 801022c:	2b0f      	cmp	r3, #15
 801022e:	ddf3      	ble.n	8010218 <AES_CMAC_Final+0x184>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8010230:	2210      	movs	r2, #16
 8010232:	f104 01f1 	add.w	r1, r4, #241	; 0xf1
 8010236:	4668      	mov	r0, sp
 8010238:	f000 fda9 	bl	8010d8e <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 801023c:	4622      	mov	r2, r4
 801023e:	4629      	mov	r1, r5
 8010240:	4668      	mov	r0, sp
 8010242:	f000 fa75 	bl	8010730 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 8010246:	2210      	movs	r2, #16
 8010248:	2100      	movs	r1, #0
 801024a:	eb0d 0002 	add.w	r0, sp, r2
 801024e:	f000 fdb6 	bl	8010dbe <memset1>
}
 8010252:	b009      	add	sp, #36	; 0x24
 8010254:	bd30      	pop	{r4, r5, pc}

08010256 <copy_block>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 8010256:	780b      	ldrb	r3, [r1, #0]
 8010258:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 801025a:	784b      	ldrb	r3, [r1, #1]
 801025c:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 801025e:	788b      	ldrb	r3, [r1, #2]
 8010260:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 8010262:	78cb      	ldrb	r3, [r1, #3]
 8010264:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 8010266:	790b      	ldrb	r3, [r1, #4]
 8010268:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 801026a:	794b      	ldrb	r3, [r1, #5]
 801026c:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 801026e:	798b      	ldrb	r3, [r1, #6]
 8010270:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 8010272:	79cb      	ldrb	r3, [r1, #7]
 8010274:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 8010276:	7a0b      	ldrb	r3, [r1, #8]
 8010278:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 801027a:	7a4b      	ldrb	r3, [r1, #9]
 801027c:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 801027e:	7a8b      	ldrb	r3, [r1, #10]
 8010280:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 8010282:	7acb      	ldrb	r3, [r1, #11]
 8010284:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 8010286:	7b0b      	ldrb	r3, [r1, #12]
 8010288:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 801028a:	7b4b      	ldrb	r3, [r1, #13]
 801028c:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 801028e:	7b8b      	ldrb	r3, [r1, #14]
 8010290:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 8010292:	7bcb      	ldrb	r3, [r1, #15]
 8010294:	73c3      	strb	r3, [r0, #15]
#endif
}
 8010296:	4770      	bx	lr

08010298 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
    while( nn-- )
 8010298:	e004      	b.n	80102a4 <copy_block_nn+0xc>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 801029a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801029e:	f800 2b01 	strb.w	r2, [r0], #1
    while( nn-- )
 80102a2:	461a      	mov	r2, r3
 80102a4:	1e53      	subs	r3, r2, #1
 80102a6:	b2db      	uxtb	r3, r3
 80102a8:	2a00      	cmp	r2, #0
 80102aa:	d1f6      	bne.n	801029a <copy_block_nn+0x2>
}
 80102ac:	4770      	bx	lr

080102ae <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 80102ae:	780b      	ldrb	r3, [r1, #0]
 80102b0:	7802      	ldrb	r2, [r0, #0]
 80102b2:	4053      	eors	r3, r2
 80102b4:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 80102b6:	784b      	ldrb	r3, [r1, #1]
 80102b8:	7842      	ldrb	r2, [r0, #1]
 80102ba:	4053      	eors	r3, r2
 80102bc:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 80102be:	788b      	ldrb	r3, [r1, #2]
 80102c0:	7882      	ldrb	r2, [r0, #2]
 80102c2:	4053      	eors	r3, r2
 80102c4:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 80102c6:	78cb      	ldrb	r3, [r1, #3]
 80102c8:	78c2      	ldrb	r2, [r0, #3]
 80102ca:	4053      	eors	r3, r2
 80102cc:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 80102ce:	790b      	ldrb	r3, [r1, #4]
 80102d0:	7902      	ldrb	r2, [r0, #4]
 80102d2:	4053      	eors	r3, r2
 80102d4:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 80102d6:	794b      	ldrb	r3, [r1, #5]
 80102d8:	7942      	ldrb	r2, [r0, #5]
 80102da:	4053      	eors	r3, r2
 80102dc:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 80102de:	798b      	ldrb	r3, [r1, #6]
 80102e0:	7982      	ldrb	r2, [r0, #6]
 80102e2:	4053      	eors	r3, r2
 80102e4:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 80102e6:	79cb      	ldrb	r3, [r1, #7]
 80102e8:	79c2      	ldrb	r2, [r0, #7]
 80102ea:	4053      	eors	r3, r2
 80102ec:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 80102ee:	7a0b      	ldrb	r3, [r1, #8]
 80102f0:	7a02      	ldrb	r2, [r0, #8]
 80102f2:	4053      	eors	r3, r2
 80102f4:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 80102f6:	7a4b      	ldrb	r3, [r1, #9]
 80102f8:	7a42      	ldrb	r2, [r0, #9]
 80102fa:	4053      	eors	r3, r2
 80102fc:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 80102fe:	7a8b      	ldrb	r3, [r1, #10]
 8010300:	7a82      	ldrb	r2, [r0, #10]
 8010302:	4053      	eors	r3, r2
 8010304:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 8010306:	7acb      	ldrb	r3, [r1, #11]
 8010308:	7ac2      	ldrb	r2, [r0, #11]
 801030a:	4053      	eors	r3, r2
 801030c:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 801030e:	7b0b      	ldrb	r3, [r1, #12]
 8010310:	7b02      	ldrb	r2, [r0, #12]
 8010312:	4053      	eors	r3, r2
 8010314:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 8010316:	7b4b      	ldrb	r3, [r1, #13]
 8010318:	7b42      	ldrb	r2, [r0, #13]
 801031a:	4053      	eors	r3, r2
 801031c:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 801031e:	7b8b      	ldrb	r3, [r1, #14]
 8010320:	7b82      	ldrb	r2, [r0, #14]
 8010322:	4053      	eors	r3, r2
 8010324:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 8010326:	7bcb      	ldrb	r3, [r1, #15]
 8010328:	7bc2      	ldrb	r2, [r0, #15]
 801032a:	4053      	eors	r3, r2
 801032c:	73c3      	strb	r3, [r0, #15]
#endif
}
 801032e:	4770      	bx	lr

08010330 <copy_and_key>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 8010330:	780b      	ldrb	r3, [r1, #0]
 8010332:	f892 c000 	ldrb.w	ip, [r2]
 8010336:	ea83 030c 	eor.w	r3, r3, ip
 801033a:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 801033c:	784b      	ldrb	r3, [r1, #1]
 801033e:	f892 c001 	ldrb.w	ip, [r2, #1]
 8010342:	ea83 030c 	eor.w	r3, r3, ip
 8010346:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 8010348:	788b      	ldrb	r3, [r1, #2]
 801034a:	f892 c002 	ldrb.w	ip, [r2, #2]
 801034e:	ea83 030c 	eor.w	r3, r3, ip
 8010352:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 8010354:	78cb      	ldrb	r3, [r1, #3]
 8010356:	f892 c003 	ldrb.w	ip, [r2, #3]
 801035a:	ea83 030c 	eor.w	r3, r3, ip
 801035e:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 8010360:	790b      	ldrb	r3, [r1, #4]
 8010362:	f892 c004 	ldrb.w	ip, [r2, #4]
 8010366:	ea83 030c 	eor.w	r3, r3, ip
 801036a:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 801036c:	794b      	ldrb	r3, [r1, #5]
 801036e:	f892 c005 	ldrb.w	ip, [r2, #5]
 8010372:	ea83 030c 	eor.w	r3, r3, ip
 8010376:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 8010378:	798b      	ldrb	r3, [r1, #6]
 801037a:	f892 c006 	ldrb.w	ip, [r2, #6]
 801037e:	ea83 030c 	eor.w	r3, r3, ip
 8010382:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 8010384:	79cb      	ldrb	r3, [r1, #7]
 8010386:	f892 c007 	ldrb.w	ip, [r2, #7]
 801038a:	ea83 030c 	eor.w	r3, r3, ip
 801038e:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 8010390:	7a0b      	ldrb	r3, [r1, #8]
 8010392:	f892 c008 	ldrb.w	ip, [r2, #8]
 8010396:	ea83 030c 	eor.w	r3, r3, ip
 801039a:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 801039c:	7a4b      	ldrb	r3, [r1, #9]
 801039e:	f892 c009 	ldrb.w	ip, [r2, #9]
 80103a2:	ea83 030c 	eor.w	r3, r3, ip
 80103a6:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 80103a8:	7a8b      	ldrb	r3, [r1, #10]
 80103aa:	f892 c00a 	ldrb.w	ip, [r2, #10]
 80103ae:	ea83 030c 	eor.w	r3, r3, ip
 80103b2:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 80103b4:	7acb      	ldrb	r3, [r1, #11]
 80103b6:	f892 c00b 	ldrb.w	ip, [r2, #11]
 80103ba:	ea83 030c 	eor.w	r3, r3, ip
 80103be:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 80103c0:	7b0b      	ldrb	r3, [r1, #12]
 80103c2:	f892 c00c 	ldrb.w	ip, [r2, #12]
 80103c6:	ea83 030c 	eor.w	r3, r3, ip
 80103ca:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 80103cc:	7b4b      	ldrb	r3, [r1, #13]
 80103ce:	f892 c00d 	ldrb.w	ip, [r2, #13]
 80103d2:	ea83 030c 	eor.w	r3, r3, ip
 80103d6:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 80103d8:	7b8b      	ldrb	r3, [r1, #14]
 80103da:	f892 c00e 	ldrb.w	ip, [r2, #14]
 80103de:	ea83 030c 	eor.w	r3, r3, ip
 80103e2:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 80103e4:	7bcb      	ldrb	r3, [r1, #15]
 80103e6:	7bd2      	ldrb	r2, [r2, #15]
 80103e8:	4053      	eors	r3, r2
 80103ea:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 80103ec:	4770      	bx	lr

080103ee <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 80103ee:	b508      	push	{r3, lr}
    xor_block(d, k);
 80103f0:	f7ff ff5d 	bl	80102ae <xor_block>
}
 80103f4:	bd08      	pop	{r3, pc}
	...

080103f8 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 80103f8:	7802      	ldrb	r2, [r0, #0]
 80103fa:	4b18      	ldr	r3, [pc, #96]	; (801045c <shift_sub_rows+0x64>)
 80103fc:	5c9a      	ldrb	r2, [r3, r2]
 80103fe:	7002      	strb	r2, [r0, #0]
 8010400:	7902      	ldrb	r2, [r0, #4]
 8010402:	5c9a      	ldrb	r2, [r3, r2]
 8010404:	7102      	strb	r2, [r0, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8010406:	7a02      	ldrb	r2, [r0, #8]
 8010408:	5c9a      	ldrb	r2, [r3, r2]
 801040a:	7202      	strb	r2, [r0, #8]
 801040c:	7b02      	ldrb	r2, [r0, #12]
 801040e:	5c9a      	ldrb	r2, [r3, r2]
 8010410:	7302      	strb	r2, [r0, #12]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8010412:	7842      	ldrb	r2, [r0, #1]
 8010414:	7941      	ldrb	r1, [r0, #5]
 8010416:	5c59      	ldrb	r1, [r3, r1]
 8010418:	7041      	strb	r1, [r0, #1]
 801041a:	7a41      	ldrb	r1, [r0, #9]
 801041c:	5c59      	ldrb	r1, [r3, r1]
 801041e:	7141      	strb	r1, [r0, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 8010420:	7b41      	ldrb	r1, [r0, #13]
 8010422:	5c59      	ldrb	r1, [r3, r1]
 8010424:	7241      	strb	r1, [r0, #9]
 8010426:	5c9a      	ldrb	r2, [r3, r2]
 8010428:	7342      	strb	r2, [r0, #13]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 801042a:	7882      	ldrb	r2, [r0, #2]
 801042c:	7a81      	ldrb	r1, [r0, #10]
 801042e:	5c59      	ldrb	r1, [r3, r1]
 8010430:	7081      	strb	r1, [r0, #2]
 8010432:	5c9a      	ldrb	r2, [r3, r2]
 8010434:	7282      	strb	r2, [r0, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 8010436:	7982      	ldrb	r2, [r0, #6]
 8010438:	7b81      	ldrb	r1, [r0, #14]
 801043a:	5c59      	ldrb	r1, [r3, r1]
 801043c:	7181      	strb	r1, [r0, #6]
 801043e:	5c9a      	ldrb	r2, [r3, r2]
 8010440:	7382      	strb	r2, [r0, #14]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8010442:	7bc2      	ldrb	r2, [r0, #15]
 8010444:	7ac1      	ldrb	r1, [r0, #11]
 8010446:	5c59      	ldrb	r1, [r3, r1]
 8010448:	73c1      	strb	r1, [r0, #15]
 801044a:	79c1      	ldrb	r1, [r0, #7]
 801044c:	5c59      	ldrb	r1, [r3, r1]
 801044e:	72c1      	strb	r1, [r0, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8010450:	78c1      	ldrb	r1, [r0, #3]
 8010452:	5c59      	ldrb	r1, [r3, r1]
 8010454:	71c1      	strb	r1, [r0, #7]
 8010456:	5c9b      	ldrb	r3, [r3, r2]
 8010458:	70c3      	strb	r3, [r0, #3]
}
 801045a:	4770      	bx	lr
 801045c:	08014ba8 	.word	0x08014ba8

08010460 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 8010460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010464:	b084      	sub	sp, #16
 8010466:	4604      	mov	r4, r0
    block_copy(st, dt);
 8010468:	4601      	mov	r1, r0
 801046a:	4668      	mov	r0, sp
 801046c:	f7ff fef3 	bl	8010256 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8010470:	f89d c000 	ldrb.w	ip, [sp]
 8010474:	4b6a      	ldr	r3, [pc, #424]	; (8010620 <mix_sub_columns+0x1c0>)
 8010476:	f813 000c 	ldrb.w	r0, [r3, ip]
 801047a:	f89d 8005 	ldrb.w	r8, [sp, #5]
 801047e:	4a69      	ldr	r2, [pc, #420]	; (8010624 <mix_sub_columns+0x1c4>)
 8010480:	f812 9008 	ldrb.w	r9, [r2, r8]
 8010484:	f89d e00a 	ldrb.w	lr, [sp, #10]
 8010488:	4967      	ldr	r1, [pc, #412]	; (8010628 <mix_sub_columns+0x1c8>)
 801048a:	f811 500e 	ldrb.w	r5, [r1, lr]
 801048e:	f89d 700f 	ldrb.w	r7, [sp, #15]
 8010492:	5dce      	ldrb	r6, [r1, r7]
 8010494:	ea80 0009 	eor.w	r0, r0, r9
 8010498:	4068      	eors	r0, r5
 801049a:	4070      	eors	r0, r6
 801049c:	7020      	strb	r0, [r4, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 801049e:	f811 000c 	ldrb.w	r0, [r1, ip]
 80104a2:	f813 a008 	ldrb.w	sl, [r3, r8]
 80104a6:	f812 900e 	ldrb.w	r9, [r2, lr]
 80104aa:	ea80 0a0a 	eor.w	sl, r0, sl
 80104ae:	ea89 090a 	eor.w	r9, r9, sl
 80104b2:	ea86 0609 	eor.w	r6, r6, r9
 80104b6:	7066      	strb	r6, [r4, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 80104b8:	f811 8008 	ldrb.w	r8, [r1, r8]
 80104bc:	f813 e00e 	ldrb.w	lr, [r3, lr]
 80104c0:	5dd6      	ldrb	r6, [r2, r7]
 80104c2:	ea80 0008 	eor.w	r0, r0, r8
 80104c6:	ea8e 0000 	eor.w	r0, lr, r0
 80104ca:	4070      	eors	r0, r6
 80104cc:	70a0      	strb	r0, [r4, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 80104ce:	f812 600c 	ldrb.w	r6, [r2, ip]
 80104d2:	5dd8      	ldrb	r0, [r3, r7]
 80104d4:	ea86 0608 	eor.w	r6, r6, r8
 80104d8:	4075      	eors	r5, r6
 80104da:	4045      	eors	r5, r0
 80104dc:	70e5      	strb	r5, [r4, #3]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 80104de:	f89d c004 	ldrb.w	ip, [sp, #4]
 80104e2:	f813 000c 	ldrb.w	r0, [r3, ip]
 80104e6:	f89d 8009 	ldrb.w	r8, [sp, #9]
 80104ea:	f812 9008 	ldrb.w	r9, [r2, r8]
 80104ee:	f89d e00e 	ldrb.w	lr, [sp, #14]
 80104f2:	f811 500e 	ldrb.w	r5, [r1, lr]
 80104f6:	f89d 7003 	ldrb.w	r7, [sp, #3]
 80104fa:	5dce      	ldrb	r6, [r1, r7]
 80104fc:	ea80 0009 	eor.w	r0, r0, r9
 8010500:	4068      	eors	r0, r5
 8010502:	4070      	eors	r0, r6
 8010504:	7120      	strb	r0, [r4, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8010506:	f811 000c 	ldrb.w	r0, [r1, ip]
 801050a:	f813 a008 	ldrb.w	sl, [r3, r8]
 801050e:	f812 900e 	ldrb.w	r9, [r2, lr]
 8010512:	ea80 0a0a 	eor.w	sl, r0, sl
 8010516:	ea89 090a 	eor.w	r9, r9, sl
 801051a:	ea86 0609 	eor.w	r6, r6, r9
 801051e:	7166      	strb	r6, [r4, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8010520:	f811 8008 	ldrb.w	r8, [r1, r8]
 8010524:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8010528:	5dd6      	ldrb	r6, [r2, r7]
 801052a:	ea80 0008 	eor.w	r0, r0, r8
 801052e:	ea8e 0000 	eor.w	r0, lr, r0
 8010532:	4070      	eors	r0, r6
 8010534:	71a0      	strb	r0, [r4, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8010536:	f812 600c 	ldrb.w	r6, [r2, ip]
 801053a:	5dd8      	ldrb	r0, [r3, r7]
 801053c:	ea86 0608 	eor.w	r6, r6, r8
 8010540:	4075      	eors	r5, r6
 8010542:	4045      	eors	r5, r0
 8010544:	71e5      	strb	r5, [r4, #7]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8010546:	f89d c008 	ldrb.w	ip, [sp, #8]
 801054a:	f813 000c 	ldrb.w	r0, [r3, ip]
 801054e:	f89d 800d 	ldrb.w	r8, [sp, #13]
 8010552:	f812 9008 	ldrb.w	r9, [r2, r8]
 8010556:	f89d e002 	ldrb.w	lr, [sp, #2]
 801055a:	f811 500e 	ldrb.w	r5, [r1, lr]
 801055e:	f89d 7007 	ldrb.w	r7, [sp, #7]
 8010562:	5dce      	ldrb	r6, [r1, r7]
 8010564:	ea80 0009 	eor.w	r0, r0, r9
 8010568:	4068      	eors	r0, r5
 801056a:	4070      	eors	r0, r6
 801056c:	7220      	strb	r0, [r4, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 801056e:	f811 000c 	ldrb.w	r0, [r1, ip]
 8010572:	f813 a008 	ldrb.w	sl, [r3, r8]
 8010576:	f812 900e 	ldrb.w	r9, [r2, lr]
 801057a:	ea80 0a0a 	eor.w	sl, r0, sl
 801057e:	ea89 090a 	eor.w	r9, r9, sl
 8010582:	ea86 0609 	eor.w	r6, r6, r9
 8010586:	7266      	strb	r6, [r4, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8010588:	f811 8008 	ldrb.w	r8, [r1, r8]
 801058c:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8010590:	5dd6      	ldrb	r6, [r2, r7]
 8010592:	ea80 0008 	eor.w	r0, r0, r8
 8010596:	ea8e 0000 	eor.w	r0, lr, r0
 801059a:	4070      	eors	r0, r6
 801059c:	72a0      	strb	r0, [r4, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 801059e:	f812 600c 	ldrb.w	r6, [r2, ip]
 80105a2:	5dd8      	ldrb	r0, [r3, r7]
 80105a4:	ea86 0608 	eor.w	r6, r6, r8
 80105a8:	4075      	eors	r5, r6
 80105aa:	4045      	eors	r5, r0
 80105ac:	72e5      	strb	r5, [r4, #11]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 80105ae:	f89d 600c 	ldrb.w	r6, [sp, #12]
 80105b2:	5d98      	ldrb	r0, [r3, r6]
 80105b4:	f89d 8001 	ldrb.w	r8, [sp, #1]
 80105b8:	f812 9008 	ldrb.w	r9, [r2, r8]
 80105bc:	f89d 7006 	ldrb.w	r7, [sp, #6]
 80105c0:	f811 c007 	ldrb.w	ip, [r1, r7]
 80105c4:	f89d 500b 	ldrb.w	r5, [sp, #11]
 80105c8:	f811 e005 	ldrb.w	lr, [r1, r5]
 80105cc:	ea80 0009 	eor.w	r0, r0, r9
 80105d0:	ea8c 0000 	eor.w	r0, ip, r0
 80105d4:	ea8e 0000 	eor.w	r0, lr, r0
 80105d8:	7320      	strb	r0, [r4, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 80105da:	5d88      	ldrb	r0, [r1, r6]
 80105dc:	f813 a008 	ldrb.w	sl, [r3, r8]
 80105e0:	f812 9007 	ldrb.w	r9, [r2, r7]
 80105e4:	ea80 0a0a 	eor.w	sl, r0, sl
 80105e8:	ea89 090a 	eor.w	r9, r9, sl
 80105ec:	ea8e 0e09 	eor.w	lr, lr, r9
 80105f0:	f884 e00d 	strb.w	lr, [r4, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 80105f4:	f811 1008 	ldrb.w	r1, [r1, r8]
 80105f8:	f813 e007 	ldrb.w	lr, [r3, r7]
 80105fc:	5d57      	ldrb	r7, [r2, r5]
 80105fe:	4048      	eors	r0, r1
 8010600:	ea8e 0000 	eor.w	r0, lr, r0
 8010604:	4078      	eors	r0, r7
 8010606:	73a0      	strb	r0, [r4, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8010608:	5d92      	ldrb	r2, [r2, r6]
 801060a:	5d5b      	ldrb	r3, [r3, r5]
 801060c:	4051      	eors	r1, r2
 801060e:	ea8c 0c01 	eor.w	ip, ip, r1
 8010612:	ea83 0c0c 	eor.w	ip, r3, ip
 8010616:	f884 c00f 	strb.w	ip, [r4, #15]
  }
 801061a:	b004      	add	sp, #16
 801061c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010620:	080149a8 	.word	0x080149a8
 8010624:	08014aa8 	.word	0x08014aa8
 8010628:	08014ba8 	.word	0x08014ba8

0801062c <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 801062c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010630:	4614      	mov	r4, r2
    uint8_t cc, rc, hi;

    switch( keylen )
 8010632:	f1a1 0310 	sub.w	r3, r1, #16
 8010636:	b2da      	uxtb	r2, r3
 8010638:	2a10      	cmp	r2, #16
 801063a:	d807      	bhi.n	801064c <lorawan_aes_set_key+0x20>
 801063c:	460d      	mov	r5, r1
 801063e:	2301      	movs	r3, #1
 8010640:	4093      	lsls	r3, r2
 8010642:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8010646:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801064a:	b92b      	cbnz	r3, 8010658 <lorawan_aes_set_key+0x2c>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 801064c:	2300      	movs	r3, #0
 801064e:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
        return ( uint8_t )-1;
 8010652:	20ff      	movs	r0, #255	; 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 8010654:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    block_copy_nn(ctx->ksch, key, keylen);
 8010658:	460a      	mov	r2, r1
 801065a:	4601      	mov	r1, r0
 801065c:	4620      	mov	r0, r4
 801065e:	f7ff fe1b 	bl	8010298 <copy_block_nn>
    hi = (keylen + 28) << 2;
 8010662:	f105 031c 	add.w	r3, r5, #28
 8010666:	b2db      	uxtb	r3, r3
 8010668:	009b      	lsls	r3, r3, #2
 801066a:	fa5f fe83 	uxtb.w	lr, r3
    ctx->rnd = (hi >> 4) - 1;
 801066e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8010672:	3b01      	subs	r3, #1
 8010674:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8010678:	462b      	mov	r3, r5
 801067a:	f04f 0c01 	mov.w	ip, #1
 801067e:	e023      	b.n	80106c8 <lorawan_aes_set_key+0x9c>
        else if( keylen > 24 && cc % keylen == 16 )
 8010680:	2d18      	cmp	r5, #24
 8010682:	d901      	bls.n	8010688 <lorawan_aes_set_key+0x5c>
 8010684:	2a10      	cmp	r2, #16
 8010686:	d047      	beq.n	8010718 <lorawan_aes_set_key+0xec>
        tt = cc - keylen;
 8010688:	1b5a      	subs	r2, r3, r5
 801068a:	b2d2      	uxtb	r2, r2
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 801068c:	f814 9002 	ldrb.w	r9, [r4, r2]
 8010690:	ea89 0808 	eor.w	r8, r9, r8
 8010694:	f804 8000 	strb.w	r8, [r4, r0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8010698:	f102 0801 	add.w	r8, r2, #1
 801069c:	f814 8008 	ldrb.w	r8, [r4, r8]
 80106a0:	f100 0901 	add.w	r9, r0, #1
 80106a4:	ea88 0707 	eor.w	r7, r8, r7
 80106a8:	f804 7009 	strb.w	r7, [r4, r9]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 80106ac:	1c97      	adds	r7, r2, #2
 80106ae:	5de7      	ldrb	r7, [r4, r7]
 80106b0:	f100 0802 	add.w	r8, r0, #2
 80106b4:	407e      	eors	r6, r7
 80106b6:	f804 6008 	strb.w	r6, [r4, r8]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 80106ba:	3203      	adds	r2, #3
 80106bc:	5ca6      	ldrb	r6, [r4, r2]
 80106be:	1cc2      	adds	r2, r0, #3
 80106c0:	4071      	eors	r1, r6
 80106c2:	54a1      	strb	r1, [r4, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80106c4:	3304      	adds	r3, #4
 80106c6:	b2db      	uxtb	r3, r3
 80106c8:	4573      	cmp	r3, lr
 80106ca:	d22c      	bcs.n	8010726 <lorawan_aes_set_key+0xfa>
        t0 = ctx->ksch[cc - 4];
 80106cc:	4618      	mov	r0, r3
 80106ce:	1f1a      	subs	r2, r3, #4
 80106d0:	f814 8002 	ldrb.w	r8, [r4, r2]
        t1 = ctx->ksch[cc - 3];
 80106d4:	1eda      	subs	r2, r3, #3
 80106d6:	5ca7      	ldrb	r7, [r4, r2]
        t2 = ctx->ksch[cc - 2];
 80106d8:	1e9a      	subs	r2, r3, #2
 80106da:	5ca6      	ldrb	r6, [r4, r2]
        t3 = ctx->ksch[cc - 1];
 80106dc:	1e5a      	subs	r2, r3, #1
 80106de:	5ca1      	ldrb	r1, [r4, r2]
        if( cc % keylen == 0 )
 80106e0:	fbb3 f2f5 	udiv	r2, r3, r5
 80106e4:	fb05 3212 	mls	r2, r5, r2, r3
 80106e8:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 80106ec:	d1c8      	bne.n	8010680 <lorawan_aes_set_key+0x54>
            t0 = s_box(t1) ^ rc;
 80106ee:	4a0f      	ldr	r2, [pc, #60]	; (801072c <lorawan_aes_set_key+0x100>)
 80106f0:	f812 9007 	ldrb.w	r9, [r2, r7]
 80106f4:	ea89 090c 	eor.w	r9, r9, ip
            t1 = s_box(t2);
 80106f8:	5d97      	ldrb	r7, [r2, r6]
            t2 = s_box(t3);
 80106fa:	5c56      	ldrb	r6, [r2, r1]
            t3 = s_box(tt);
 80106fc:	f812 1008 	ldrb.w	r1, [r2, r8]
            rc = f2(rc);
 8010700:	ea4f 12dc 	mov.w	r2, ip, lsr #7
 8010704:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8010708:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 801070c:	ea82 0c4c 	eor.w	ip, r2, ip, lsl #1
 8010710:	fa5f fc8c 	uxtb.w	ip, ip
            t0 = s_box(t1) ^ rc;
 8010714:	46c8      	mov	r8, r9
 8010716:	e7b7      	b.n	8010688 <lorawan_aes_set_key+0x5c>
            t0 = s_box(t0);
 8010718:	4a04      	ldr	r2, [pc, #16]	; (801072c <lorawan_aes_set_key+0x100>)
 801071a:	f812 8008 	ldrb.w	r8, [r2, r8]
            t1 = s_box(t1);
 801071e:	5dd7      	ldrb	r7, [r2, r7]
            t2 = s_box(t2);
 8010720:	5d96      	ldrb	r6, [r2, r6]
            t3 = s_box(t3);
 8010722:	5c51      	ldrb	r1, [r2, r1]
 8010724:	e7b0      	b.n	8010688 <lorawan_aes_set_key+0x5c>
    return 0;
 8010726:	2000      	movs	r0, #0
 8010728:	e794      	b.n	8010654 <lorawan_aes_set_key+0x28>
 801072a:	bf00      	nop
 801072c:	08014ba8 	.word	0x08014ba8

08010730 <lorawan_aes_encrypt>:

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
    if( ctx->rnd )
 8010730:	f892 30f0 	ldrb.w	r3, [r2, #240]	; 0xf0
 8010734:	b31b      	cbz	r3, 801077e <lorawan_aes_encrypt+0x4e>
{
 8010736:	b570      	push	{r4, r5, r6, lr}
 8010738:	b084      	sub	sp, #16
 801073a:	460e      	mov	r6, r1
 801073c:	4615      	mov	r5, r2
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 801073e:	4601      	mov	r1, r0
 8010740:	4668      	mov	r0, sp
 8010742:	f7ff fdf5 	bl	8010330 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 8010746:	2401      	movs	r4, #1
 8010748:	e009      	b.n	801075e <lorawan_aes_encrypt+0x2e>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 801074a:	4668      	mov	r0, sp
 801074c:	f7ff fe88 	bl	8010460 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 8010750:	eb05 1104 	add.w	r1, r5, r4, lsl #4
 8010754:	4668      	mov	r0, sp
 8010756:	f7ff fe4a 	bl	80103ee <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 801075a:	3401      	adds	r4, #1
 801075c:	b2e4      	uxtb	r4, r4
 801075e:	f895 30f0 	ldrb.w	r3, [r5, #240]	; 0xf0
 8010762:	42a3      	cmp	r3, r4
 8010764:	d8f1      	bhi.n	801074a <lorawan_aes_encrypt+0x1a>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 8010766:	4668      	mov	r0, sp
 8010768:	f7ff fe46 	bl	80103f8 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 801076c:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 8010770:	4669      	mov	r1, sp
 8010772:	4630      	mov	r0, r6
 8010774:	f7ff fddc 	bl	8010330 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 8010778:	2000      	movs	r0, #0
}
 801077a:	b004      	add	sp, #16
 801077c:	bd70      	pop	{r4, r5, r6, pc}
        return ( uint8_t )-1;
 801077e:	20ff      	movs	r0, #255	; 0xff
}
 8010780:	4770      	bx	lr
	...

08010784 <GetKeyByID>:
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8010784:	2300      	movs	r3, #0
 8010786:	2b09      	cmp	r3, #9
 8010788:	d817      	bhi.n	80107ba <GetKeyByID+0x36>
{
 801078a:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 801078c:	4a0c      	ldr	r2, [pc, #48]	; (80107c0 <GetKeyByID+0x3c>)
 801078e:	6814      	ldr	r4, [r2, #0]
 8010790:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8010794:	4422      	add	r2, r4
 8010796:	7c12      	ldrb	r2, [r2, #16]
 8010798:	4282      	cmp	r2, r0
 801079a:	d006      	beq.n	80107aa <GetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 801079c:	3301      	adds	r3, #1
 801079e:	b2db      	uxtb	r3, r3
 80107a0:	2b09      	cmp	r3, #9
 80107a2:	d9f3      	bls.n	801078c <GetKeyByID+0x8>
        {
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80107a4:	2003      	movs	r0, #3
}
 80107a6:	bc10      	pop	{r4}
 80107a8:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 80107aa:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 80107ae:	f10c 0c10 	add.w	ip, ip, #16
 80107b2:	4464      	add	r4, ip
 80107b4:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 80107b6:	2000      	movs	r0, #0
 80107b8:	e7f5      	b.n	80107a6 <GetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80107ba:	2003      	movs	r0, #3
}
 80107bc:	4770      	bx	lr
 80107be:	bf00      	nop
 80107c0:	20001030 	.word	0x20001030

080107c4 <ComputeCmac>:
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 80107c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107c8:	b0cc      	sub	sp, #304	; 0x130
 80107ca:	9e52      	ldr	r6, [sp, #328]	; 0x148
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 80107cc:	b3a9      	cbz	r1, 801083a <ComputeCmac+0x76>
 80107ce:	4605      	mov	r5, r0
 80107d0:	4617      	mov	r7, r2
 80107d2:	461c      	mov	r4, r3
 80107d4:	4688      	mov	r8, r1
 80107d6:	b396      	cbz	r6, 801083e <ComputeCmac+0x7a>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 80107d8:	a802      	add	r0, sp, #8
 80107da:	f7ff fbd7 	bl	800ff8c <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 80107de:	a901      	add	r1, sp, #4
 80107e0:	4620      	mov	r0, r4
 80107e2:	f7ff ffcf 	bl	8010784 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 80107e6:	4604      	mov	r4, r0
 80107e8:	b118      	cbz	r0, 80107f2 <ComputeCmac+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
}
 80107ea:	4620      	mov	r0, r4
 80107ec:	b04c      	add	sp, #304	; 0x130
 80107ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 80107f2:	9901      	ldr	r1, [sp, #4]
 80107f4:	3101      	adds	r1, #1
 80107f6:	a802      	add	r0, sp, #8
 80107f8:	f7ff fbd7 	bl	800ffaa <AES_CMAC_SetKey>
        if( micBxBuffer != NULL )
 80107fc:	b125      	cbz	r5, 8010808 <ComputeCmac+0x44>
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 80107fe:	2210      	movs	r2, #16
 8010800:	4629      	mov	r1, r5
 8010802:	a802      	add	r0, sp, #8
 8010804:	f7ff fbd8 	bl	800ffb8 <AES_CMAC_Update>
        AES_CMAC_Update( aesCmacCtx, buffer, size );
 8010808:	463a      	mov	r2, r7
 801080a:	4641      	mov	r1, r8
 801080c:	a802      	add	r0, sp, #8
 801080e:	f7ff fbd3 	bl	800ffb8 <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, aesCmacCtx );
 8010812:	a902      	add	r1, sp, #8
 8010814:	a848      	add	r0, sp, #288	; 0x120
 8010816:	f7ff fc3d 	bl	8010094 <AES_CMAC_Final>
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 801081a:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
 801081e:	f89d 3122 	ldrb.w	r3, [sp, #290]	; 0x122
 8010822:	041b      	lsls	r3, r3, #16
 8010824:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8010828:	f89d 2121 	ldrb.w	r2, [sp, #289]	; 0x121
 801082c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                              ( uint32_t ) Cmac[0] );
 8010830:	f89d 2120 	ldrb.w	r2, [sp, #288]	; 0x120
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 8010834:	4313      	orrs	r3, r2
 8010836:	6033      	str	r3, [r6, #0]
 8010838:	e7d7      	b.n	80107ea <ComputeCmac+0x26>
        return SECURE_ELEMENT_ERROR_NPE;
 801083a:	2402      	movs	r4, #2
 801083c:	e7d5      	b.n	80107ea <ComputeCmac+0x26>
 801083e:	2402      	movs	r4, #2
 8010840:	e7d3      	b.n	80107ea <ComputeCmac+0x26>
	...

08010844 <SecureElementInit>:
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    if( nvm == NULL )
 8010844:	b168      	cbz	r0, 8010862 <SecureElementInit+0x1e>
{
 8010846:	b510      	push	{r4, lr}
 8010848:	460c      	mov	r4, r1
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 801084a:	4a08      	ldr	r2, [pc, #32]	; (801086c <SecureElementInit+0x28>)
 801084c:	6010      	str	r0, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 801084e:	22c0      	movs	r2, #192	; 0xc0
 8010850:	4907      	ldr	r1, [pc, #28]	; (8010870 <SecureElementInit+0x2c>)
 8010852:	f000 fa9c 	bl	8010d8e <memcpy1>
#endif /* LORAMAC_CLASSB_ENABLED */
#endif /* LORAWAN_KMS */

#if !defined( SECURE_ELEMENT_PRE_PROVISIONED )
#if( STATIC_DEVICE_EUI == 0 )
    if (seGetUniqueId != NULL)
 8010856:	b134      	cbz	r4, 8010866 <SecureElementInit+0x22>
    {
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
 8010858:	4b04      	ldr	r3, [pc, #16]	; (801086c <SecureElementInit+0x28>)
 801085a:	6818      	ldr	r0, [r3, #0]
 801085c:	47a0      	blx	r4
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 801085e:	2000      	movs	r0, #0
}
 8010860:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8010862:	2002      	movs	r0, #2
}
 8010864:	4770      	bx	lr
    return SECURE_ELEMENT_SUCCESS;
 8010866:	2000      	movs	r0, #0
 8010868:	e7fa      	b.n	8010860 <SecureElementInit+0x1c>
 801086a:	bf00      	nop
 801086c:	20001030 	.word	0x20001030
 8010870:	0803e500 	.word	0x0803e500

08010874 <SecureElementGetKeyByID>:
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, uint8_t* extractable_key )
#endif /* LORAWAN_KMS */
{
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 8010874:	2300      	movs	r3, #0
 8010876:	2b09      	cmp	r3, #9
 8010878:	d817      	bhi.n	80108aa <SecureElementGetKeyByID+0x36>
{
 801087a:	b410      	push	{r4}
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 801087c:	4a0c      	ldr	r2, [pc, #48]	; (80108b0 <SecureElementGetKeyByID+0x3c>)
 801087e:	6814      	ldr	r4, [r2, #0]
 8010880:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8010884:	4422      	add	r2, r4
 8010886:	7c12      	ldrb	r2, [r2, #16]
 8010888:	4282      	cmp	r2, r0
 801088a:	d006      	beq.n	801089a <SecureElementGetKeyByID+0x26>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 801088c:	3301      	adds	r3, #1
 801088e:	b2db      	uxtb	r3, r3
 8010890:	2b09      	cmp	r3, #9
 8010892:	d9f3      	bls.n	801087c <SecureElementGetKeyByID+0x8>
            *keyItem = &(SeNvm->KeyList[i]);
            return SECURE_ELEMENT_SUCCESS;
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8010894:	2003      	movs	r0, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 8010896:	bc10      	pop	{r4}
 8010898:	4770      	bx	lr
            *keyItem = &(SeNvm->KeyList[i]);
 801089a:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 801089e:	f10c 0c10 	add.w	ip, ip, #16
 80108a2:	4464      	add	r4, ip
 80108a4:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 80108a6:	2000      	movs	r0, #0
 80108a8:	e7f5      	b.n	8010896 <SecureElementGetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80108aa:	2003      	movs	r0, #3
}
 80108ac:	4770      	bx	lr
 80108ae:	bf00      	nop
 80108b0:	20001030 	.word	0x20001030

080108b4 <PrintKey>:
{
 80108b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108b8:	b095      	sub	sp, #84	; 0x54
 80108ba:	4604      	mov	r4, r0
    retval = SecureElementGetKeyByID(key, &keyItem);
 80108bc:	a913      	add	r1, sp, #76	; 0x4c
 80108be:	f7ff ffd9 	bl	8010874 <SecureElementGetKeyByID>
    if (retval == SECURE_ELEMENT_SUCCESS)
 80108c2:	2800      	cmp	r0, #0
 80108c4:	d154      	bne.n	8010970 <PrintKey+0xbc>
        if (key == APP_KEY)
 80108c6:	b1b4      	cbz	r4, 80108f6 <PrintKey+0x42>
        else if (key == NWK_KEY)
 80108c8:	2c01      	cmp	r4, #1
 80108ca:	d054      	beq.n	8010976 <PrintKey+0xc2>
        else if (key == APP_S_KEY)
 80108cc:	2c03      	cmp	r4, #3
 80108ce:	d059      	beq.n	8010984 <PrintKey+0xd0>
        else if (key == NWK_S_KEY)
 80108d0:	2c02      	cmp	r4, #2
 80108d2:	d05e      	beq.n	8010992 <PrintKey+0xde>
        else if (key == MC_ROOT_KEY)
 80108d4:	2c04      	cmp	r4, #4
 80108d6:	d063      	beq.n	80109a0 <PrintKey+0xec>
        else if (key == MC_KE_KEY)
 80108d8:	2c7f      	cmp	r4, #127	; 0x7f
 80108da:	d068      	beq.n	80109ae <PrintKey+0xfa>
        else if (key == MC_KEY_0)
 80108dc:	2c80      	cmp	r4, #128	; 0x80
 80108de:	d06d      	beq.n	80109bc <PrintKey+0x108>
        else if (key == MC_APP_S_KEY_0)
 80108e0:	2c81      	cmp	r4, #129	; 0x81
 80108e2:	d072      	beq.n	80109ca <PrintKey+0x116>
        else if (key == MC_NWK_S_KEY_0)
 80108e4:	2c82      	cmp	r4, #130	; 0x82
 80108e6:	d10c      	bne.n	8010902 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 80108e8:	4b3b      	ldr	r3, [pc, #236]	; (80109d8 <PrintKey+0x124>)
 80108ea:	2200      	movs	r2, #0
 80108ec:	4611      	mov	r1, r2
 80108ee:	2002      	movs	r0, #2
 80108f0:	f002 f8f6 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
 80108f4:	e005      	b.n	8010902 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 80108f6:	4b39      	ldr	r3, [pc, #228]	; (80109dc <PrintKey+0x128>)
 80108f8:	2200      	movs	r2, #0
 80108fa:	4611      	mov	r1, r2
 80108fc:	2002      	movs	r0, #2
 80108fe:	f002 f8ef 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8010902:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010904:	785a      	ldrb	r2, [r3, #1]
 8010906:	9210      	str	r2, [sp, #64]	; 0x40
 8010908:	7899      	ldrb	r1, [r3, #2]
 801090a:	9111      	str	r1, [sp, #68]	; 0x44
 801090c:	78da      	ldrb	r2, [r3, #3]
 801090e:	7919      	ldrb	r1, [r3, #4]
 8010910:	7958      	ldrb	r0, [r3, #5]
 8010912:	799c      	ldrb	r4, [r3, #6]
 8010914:	79dd      	ldrb	r5, [r3, #7]
 8010916:	7a1e      	ldrb	r6, [r3, #8]
 8010918:	7a5f      	ldrb	r7, [r3, #9]
 801091a:	f893 c00a 	ldrb.w	ip, [r3, #10]
 801091e:	f893 e00b 	ldrb.w	lr, [r3, #11]
 8010922:	f893 800c 	ldrb.w	r8, [r3, #12]
 8010926:	f893 900d 	ldrb.w	r9, [r3, #13]
 801092a:	f893 a00e 	ldrb.w	sl, [r3, #14]
 801092e:	f893 b00f 	ldrb.w	fp, [r3, #15]
 8010932:	7c1b      	ldrb	r3, [r3, #16]
 8010934:	930f      	str	r3, [sp, #60]	; 0x3c
 8010936:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 801093a:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801093e:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8010942:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8010946:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 801094a:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 801094e:	9708      	str	r7, [sp, #32]
 8010950:	9607      	str	r6, [sp, #28]
 8010952:	9506      	str	r5, [sp, #24]
 8010954:	9405      	str	r4, [sp, #20]
 8010956:	9004      	str	r0, [sp, #16]
 8010958:	9103      	str	r1, [sp, #12]
 801095a:	9202      	str	r2, [sp, #8]
 801095c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801095e:	9101      	str	r1, [sp, #4]
 8010960:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010962:	9200      	str	r2, [sp, #0]
 8010964:	4b1e      	ldr	r3, [pc, #120]	; (80109e0 <PrintKey+0x12c>)
 8010966:	2200      	movs	r2, #0
 8010968:	4611      	mov	r1, r2
 801096a:	2002      	movs	r0, #2
 801096c:	f002 f8b8 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
}
 8010970:	b015      	add	sp, #84	; 0x54
 8010972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 8010976:	4b1b      	ldr	r3, [pc, #108]	; (80109e4 <PrintKey+0x130>)
 8010978:	2200      	movs	r2, #0
 801097a:	4611      	mov	r1, r2
 801097c:	2002      	movs	r0, #2
 801097e:	f002 f8af 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
 8010982:	e7be      	b.n	8010902 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 8010984:	4b18      	ldr	r3, [pc, #96]	; (80109e8 <PrintKey+0x134>)
 8010986:	2200      	movs	r2, #0
 8010988:	4611      	mov	r1, r2
 801098a:	2002      	movs	r0, #2
 801098c:	f002 f8a8 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
 8010990:	e7b7      	b.n	8010902 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 8010992:	4b16      	ldr	r3, [pc, #88]	; (80109ec <PrintKey+0x138>)
 8010994:	2200      	movs	r2, #0
 8010996:	4611      	mov	r1, r2
 8010998:	2002      	movs	r0, #2
 801099a:	f002 f8a1 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
 801099e:	e7b0      	b.n	8010902 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 80109a0:	4b13      	ldr	r3, [pc, #76]	; (80109f0 <PrintKey+0x13c>)
 80109a2:	2200      	movs	r2, #0
 80109a4:	4611      	mov	r1, r2
 80109a6:	2002      	movs	r0, #2
 80109a8:	f002 f89a 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
 80109ac:	e7a9      	b.n	8010902 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 80109ae:	4b11      	ldr	r3, [pc, #68]	; (80109f4 <PrintKey+0x140>)
 80109b0:	2200      	movs	r2, #0
 80109b2:	4611      	mov	r1, r2
 80109b4:	2002      	movs	r0, #2
 80109b6:	f002 f893 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
 80109ba:	e7a2      	b.n	8010902 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 80109bc:	4b0e      	ldr	r3, [pc, #56]	; (80109f8 <PrintKey+0x144>)
 80109be:	2200      	movs	r2, #0
 80109c0:	4611      	mov	r1, r2
 80109c2:	2002      	movs	r0, #2
 80109c4:	f002 f88c 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
 80109c8:	e79b      	b.n	8010902 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 80109ca:	4b0c      	ldr	r3, [pc, #48]	; (80109fc <PrintKey+0x148>)
 80109cc:	2200      	movs	r2, #0
 80109ce:	4611      	mov	r1, r2
 80109d0:	2002      	movs	r0, #2
 80109d2:	f002 f885 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
 80109d6:	e794      	b.n	8010902 <PrintKey+0x4e>
 80109d8:	08014d68 	.word	0x08014d68
 80109dc:	08014ca8 	.word	0x08014ca8
 80109e0:	08014d80 	.word	0x08014d80
 80109e4:	08014cc0 	.word	0x08014cc0
 80109e8:	08014cd8 	.word	0x08014cd8
 80109ec:	08014cf0 	.word	0x08014cf0
 80109f0:	08014d08 	.word	0x08014d08
 80109f4:	08014d20 	.word	0x08014d20
 80109f8:	08014d38 	.word	0x08014d38
 80109fc:	08014d50 	.word	0x08014d50

08010a00 <SecureElementPrintKeys>:

SecureElementStatus_t SecureElementPrintKeys( void )
{
 8010a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a02:	b089      	sub	sp, #36	; 0x24
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 8010a04:	4b28      	ldr	r3, [pc, #160]	; (8010aa8 <SecureElementPrintKeys+0xa8>)
 8010a06:	2200      	movs	r2, #0
 8010a08:	4611      	mov	r1, r2
 8010a0a:	2002      	movs	r0, #2
 8010a0c:	f002 f868 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 8010a10:	2000      	movs	r0, #0
 8010a12:	f7ff ff4f 	bl	80108b4 <PrintKey>
    PrintKey(NWK_KEY);
 8010a16:	2001      	movs	r0, #1
 8010a18:	f7ff ff4c 	bl	80108b4 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 8010a1c:	4b23      	ldr	r3, [pc, #140]	; (8010aac <SecureElementPrintKeys+0xac>)
 8010a1e:	2200      	movs	r2, #0
 8010a20:	4611      	mov	r1, r2
 8010a22:	2002      	movs	r0, #2
 8010a24:	f002 f85c 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 8010a28:	2003      	movs	r0, #3
 8010a2a:	f7ff ff43 	bl	80108b4 <PrintKey>
    PrintKey(NWK_S_KEY);
 8010a2e:	2002      	movs	r0, #2
 8010a30:	f7ff ff40 	bl	80108b4 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    MW_LOG(TS_OFF, VLEVEL_M, "###### IDs  ######\r\n");
 8010a34:	4b1e      	ldr	r3, [pc, #120]	; (8010ab0 <SecureElementPrintKeys+0xb0>)
 8010a36:	2200      	movs	r2, #0
 8010a38:	4611      	mov	r1, r2
 8010a3a:	2002      	movs	r0, #2
 8010a3c:	f002 f850 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8010a40:	4c1c      	ldr	r4, [pc, #112]	; (8010ab4 <SecureElementPrintKeys+0xb4>)
 8010a42:	6823      	ldr	r3, [r4, #0]
 8010a44:	781a      	ldrb	r2, [r3, #0]
 8010a46:	7859      	ldrb	r1, [r3, #1]
 8010a48:	7898      	ldrb	r0, [r3, #2]
 8010a4a:	78dd      	ldrb	r5, [r3, #3]
 8010a4c:	791e      	ldrb	r6, [r3, #4]
 8010a4e:	795f      	ldrb	r7, [r3, #5]
 8010a50:	f893 c006 	ldrb.w	ip, [r3, #6]
 8010a54:	79db      	ldrb	r3, [r3, #7]
 8010a56:	9307      	str	r3, [sp, #28]
 8010a58:	f8cd c018 	str.w	ip, [sp, #24]
 8010a5c:	9705      	str	r7, [sp, #20]
 8010a5e:	9604      	str	r6, [sp, #16]
 8010a60:	9503      	str	r5, [sp, #12]
 8010a62:	9002      	str	r0, [sp, #8]
 8010a64:	9101      	str	r1, [sp, #4]
 8010a66:	9200      	str	r2, [sp, #0]
 8010a68:	4b13      	ldr	r3, [pc, #76]	; (8010ab8 <SecureElementPrintKeys+0xb8>)
 8010a6a:	2200      	movs	r2, #0
 8010a6c:	4611      	mov	r1, r2
 8010a6e:	2002      	movs	r0, #2
 8010a70:	f002 f836 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8010a74:	6823      	ldr	r3, [r4, #0]
 8010a76:	7a1a      	ldrb	r2, [r3, #8]
 8010a78:	7a59      	ldrb	r1, [r3, #9]
 8010a7a:	7a98      	ldrb	r0, [r3, #10]
 8010a7c:	7adc      	ldrb	r4, [r3, #11]
 8010a7e:	7b1d      	ldrb	r5, [r3, #12]
 8010a80:	7b5e      	ldrb	r6, [r3, #13]
 8010a82:	7b9f      	ldrb	r7, [r3, #14]
 8010a84:	7bdb      	ldrb	r3, [r3, #15]
 8010a86:	9307      	str	r3, [sp, #28]
 8010a88:	9706      	str	r7, [sp, #24]
 8010a8a:	9605      	str	r6, [sp, #20]
 8010a8c:	9504      	str	r5, [sp, #16]
 8010a8e:	9403      	str	r4, [sp, #12]
 8010a90:	9002      	str	r0, [sp, #8]
 8010a92:	9101      	str	r1, [sp, #4]
 8010a94:	9200      	str	r2, [sp, #0]
 8010a96:	4b09      	ldr	r3, [pc, #36]	; (8010abc <SecureElementPrintKeys+0xbc>)
 8010a98:	2200      	movs	r2, #0
 8010a9a:	4611      	mov	r1, r2
 8010a9c:	2002      	movs	r0, #2
 8010a9e:	f002 f81f 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->JoinEui));
    return SECURE_ELEMENT_SUCCESS;
}
 8010aa2:	2000      	movs	r0, #0
 8010aa4:	b009      	add	sp, #36	; 0x24
 8010aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010aa8:	08014dd4 	.word	0x08014dd4
 8010aac:	08014dec 	.word	0x08014dec
 8010ab0:	08014e04 	.word	0x08014e04
 8010ab4:	20001030 	.word	0x20001030
 8010ab8:	08014e1c 	.word	0x08014e1c
 8010abc:	08014e5c 	.word	0x08014e5c

08010ac0 <SecureElementPrintSessionKeys>:
    
SecureElementStatus_t SecureElementPrintSessionKeys( void )
{
 8010ac0:	b508      	push	{r3, lr}
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    PrintKey(MC_ROOT_KEY);
 8010ac2:	2004      	movs	r0, #4
 8010ac4:	f7ff fef6 	bl	80108b4 <PrintKey>
    PrintKey(MC_KE_KEY);
 8010ac8:	207f      	movs	r0, #127	; 0x7f
 8010aca:	f7ff fef3 	bl	80108b4 <PrintKey>
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    PrintKey(F_NWK_S_INT_KEY);
    PrintKey(S_NWK_S_INT_KEY);
    PrintKey(NWK_S_ENC_KEY);
#else
    PrintKey(NWK_S_KEY);
 8010ace:	2002      	movs	r0, #2
 8010ad0:	f7ff fef0 	bl	80108b4 <PrintKey>
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    PrintKey(APP_S_KEY);
 8010ad4:	2003      	movs	r0, #3
 8010ad6:	f7ff feed 	bl	80108b4 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_SUCCESS;
}
 8010ada:	2000      	movs	r0, #0
 8010adc:	bd08      	pop	{r3, pc}

08010ade <SecureElementComputeAesCmac>:
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 8010ade:	2b7e      	cmp	r3, #126	; 0x7e
 8010ae0:	d80a      	bhi.n	8010af8 <SecureElementComputeAesCmac+0x1a>
{
 8010ae2:	b500      	push	{lr}
 8010ae4:	b083      	sub	sp, #12
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 8010ae6:	f8dd c010 	ldr.w	ip, [sp, #16]
 8010aea:	f8cd c000 	str.w	ip, [sp]
 8010aee:	f7ff fe69 	bl	80107c4 <ComputeCmac>
}
 8010af2:	b003      	add	sp, #12
 8010af4:	f85d fb04 	ldr.w	pc, [sp], #4
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8010af8:	2003      	movs	r0, #3
}
 8010afa:	4770      	bx	lr

08010afc <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
    if( buffer == NULL )
 8010afc:	b190      	cbz	r0, 8010b24 <SecureElementVerifyAesCmac+0x28>
{
 8010afe:	b510      	push	{r4, lr}
 8010b00:	b084      	sub	sp, #16
 8010b02:	468c      	mov	ip, r1
 8010b04:	4614      	mov	r4, r2
 8010b06:	4601      	mov	r1, r0
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 8010b08:	2000      	movs	r0, #0
 8010b0a:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 8010b0c:	aa03      	add	r2, sp, #12
 8010b0e:	9200      	str	r2, [sp, #0]
 8010b10:	4662      	mov	r2, ip
 8010b12:	f7ff fe57 	bl	80107c4 <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8010b16:	b918      	cbnz	r0, 8010b20 <SecureElementVerifyAesCmac+0x24>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 8010b18:	9b03      	ldr	r3, [sp, #12]
 8010b1a:	42a3      	cmp	r3, r4
 8010b1c:	d000      	beq.n	8010b20 <SecureElementVerifyAesCmac+0x24>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 8010b1e:	2001      	movs	r0, #1
    }

#endif /* LORAWAN_KMS */

    return retval;
}
 8010b20:	b004      	add	sp, #16
 8010b22:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8010b24:	2002      	movs	r0, #2
}
 8010b26:	4770      	bx	lr

08010b28 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 8010b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b2c:	b0be      	sub	sp, #248	; 0xf8
    if( buffer == NULL || encBuffer == NULL )
 8010b2e:	b350      	cbz	r0, 8010b86 <SecureElementAesEncrypt+0x5e>
 8010b30:	460c      	mov	r4, r1
 8010b32:	4615      	mov	r5, r2
 8010b34:	461e      	mov	r6, r3
 8010b36:	4607      	mov	r7, r0
 8010b38:	b343      	cbz	r3, 8010b8c <SecureElementAesEncrypt+0x64>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 8010b3a:	f011 0f0f 	tst.w	r1, #15
 8010b3e:	d128      	bne.n	8010b92 <SecureElementAesEncrypt+0x6a>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 8010b40:	22f0      	movs	r2, #240	; 0xf0
 8010b42:	2100      	movs	r1, #0
 8010b44:	a801      	add	r0, sp, #4
 8010b46:	f000 f93a 	bl	8010dbe <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 8010b4a:	4669      	mov	r1, sp
 8010b4c:	4628      	mov	r0, r5
 8010b4e:	f7ff fe19 	bl	8010784 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 8010b52:	4680      	mov	r8, r0
 8010b54:	b118      	cbz	r0, 8010b5e <SecureElementAesEncrypt+0x36>
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
}
 8010b56:	4640      	mov	r0, r8
 8010b58:	b03e      	add	sp, #248	; 0xf8
 8010b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 8010b5e:	aa01      	add	r2, sp, #4
 8010b60:	2110      	movs	r1, #16
 8010b62:	9800      	ldr	r0, [sp, #0]
 8010b64:	3001      	adds	r0, #1
 8010b66:	f7ff fd61 	bl	801062c <lorawan_aes_set_key>
        uint8_t block = 0;
 8010b6a:	4645      	mov	r5, r8
        while( size != 0 )
 8010b6c:	e008      	b.n	8010b80 <SecureElementAesEncrypt+0x58>
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 8010b6e:	aa01      	add	r2, sp, #4
 8010b70:	1971      	adds	r1, r6, r5
 8010b72:	1978      	adds	r0, r7, r5
 8010b74:	f7ff fddc 	bl	8010730 <lorawan_aes_encrypt>
            block = block + 16;
 8010b78:	3510      	adds	r5, #16
 8010b7a:	b2ed      	uxtb	r5, r5
            size  = size - 16;
 8010b7c:	3c10      	subs	r4, #16
 8010b7e:	b2a4      	uxth	r4, r4
        while( size != 0 )
 8010b80:	2c00      	cmp	r4, #0
 8010b82:	d1f4      	bne.n	8010b6e <SecureElementAesEncrypt+0x46>
 8010b84:	e7e7      	b.n	8010b56 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_NPE;
 8010b86:	f04f 0802 	mov.w	r8, #2
 8010b8a:	e7e4      	b.n	8010b56 <SecureElementAesEncrypt+0x2e>
 8010b8c:	f04f 0802 	mov.w	r8, #2
 8010b90:	e7e1      	b.n	8010b56 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8010b92:	f04f 0805 	mov.w	r8, #5
 8010b96:	e7de      	b.n	8010b56 <SecureElementAesEncrypt+0x2e>

08010b98 <SecureElementSetKey>:
{
 8010b98:	b530      	push	{r4, r5, lr}
 8010b9a:	b085      	sub	sp, #20
    if( key == NULL )
 8010b9c:	2900      	cmp	r1, #0
 8010b9e:	d038      	beq.n	8010c12 <SecureElementSetKey+0x7a>
 8010ba0:	468c      	mov	ip, r1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	2b09      	cmp	r3, #9
 8010ba6:	d830      	bhi.n	8010c0a <SecureElementSetKey+0x72>
        if( SeNvm->KeyList[i].KeyID == keyID )
 8010ba8:	4a1b      	ldr	r2, [pc, #108]	; (8010c18 <SecureElementSetKey+0x80>)
 8010baa:	6811      	ldr	r1, [r2, #0]
 8010bac:	461c      	mov	r4, r3
 8010bae:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8010bb2:	440a      	add	r2, r1
 8010bb4:	7c12      	ldrb	r2, [r2, #16]
 8010bb6:	4282      	cmp	r2, r0
 8010bb8:	d002      	beq.n	8010bc0 <SecureElementSetKey+0x28>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8010bba:	3301      	adds	r3, #1
 8010bbc:	b2db      	uxtb	r3, r3
 8010bbe:	e7f1      	b.n	8010ba4 <SecureElementSetKey+0xc>
            if ( keyID == MC_KEY_0 )
 8010bc0:	2880      	cmp	r0, #128	; 0x80
 8010bc2:	d00a      	beq.n	8010bda <SecureElementSetKey+0x42>
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 8010bc4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8010bc8:	3310      	adds	r3, #16
 8010bca:	440b      	add	r3, r1
 8010bcc:	2210      	movs	r2, #16
 8010bce:	4661      	mov	r1, ip
 8010bd0:	1c58      	adds	r0, r3, #1
 8010bd2:	f000 f8dc 	bl	8010d8e <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 8010bd6:	2500      	movs	r5, #0
 8010bd8:	e018      	b.n	8010c0c <SecureElementSetKey+0x74>
                uint8_t               decryptedKey[16] = { 0 };
 8010bda:	2300      	movs	r3, #0
 8010bdc:	9300      	str	r3, [sp, #0]
 8010bde:	9301      	str	r3, [sp, #4]
 8010be0:	9302      	str	r3, [sp, #8]
 8010be2:	9303      	str	r3, [sp, #12]
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 8010be4:	466b      	mov	r3, sp
 8010be6:	227f      	movs	r2, #127	; 0x7f
 8010be8:	2110      	movs	r1, #16
 8010bea:	4660      	mov	r0, ip
 8010bec:	f7ff ff9c 	bl	8010b28 <SecureElementAesEncrypt>
 8010bf0:	4605      	mov	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 8010bf2:	4b09      	ldr	r3, [pc, #36]	; (8010c18 <SecureElementSetKey+0x80>)
 8010bf4:	6818      	ldr	r0, [r3, #0]
 8010bf6:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8010bfa:	3410      	adds	r4, #16
 8010bfc:	4420      	add	r0, r4
 8010bfe:	2210      	movs	r2, #16
 8010c00:	4669      	mov	r1, sp
 8010c02:	3001      	adds	r0, #1
 8010c04:	f000 f8c3 	bl	8010d8e <memcpy1>
                return retval;
 8010c08:	e000      	b.n	8010c0c <SecureElementSetKey+0x74>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8010c0a:	2503      	movs	r5, #3
}
 8010c0c:	4628      	mov	r0, r5
 8010c0e:	b005      	add	sp, #20
 8010c10:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8010c12:	2502      	movs	r5, #2
 8010c14:	e7fa      	b.n	8010c0c <SecureElementSetKey+0x74>
 8010c16:	bf00      	nop
 8010c18:	20001030 	.word	0x20001030

08010c1c <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
    if( input == NULL )
 8010c1c:	b1d0      	cbz	r0, 8010c54 <SecureElementDeriveAndStoreKey+0x38>
{
 8010c1e:	b510      	push	{r4, lr}
 8010c20:	b084      	sub	sp, #16
 8010c22:	4614      	mov	r4, r2
 8010c24:	4684      	mov	ip, r0
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 8010c26:	2a7f      	cmp	r2, #127	; 0x7f
 8010c28:	d101      	bne.n	8010c2e <SecureElementDeriveAndStoreKey+0x12>
    {
        if( rootKeyID != MC_ROOT_KEY )
 8010c2a:	2904      	cmp	r1, #4
 8010c2c:	d114      	bne.n	8010c58 <SecureElementDeriveAndStoreKey+0x3c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 8010c2e:	2300      	movs	r3, #0
 8010c30:	9300      	str	r3, [sp, #0]
 8010c32:	9301      	str	r3, [sp, #4]
 8010c34:	9302      	str	r3, [sp, #8]
 8010c36:	9303      	str	r3, [sp, #12]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 8010c38:	466b      	mov	r3, sp
 8010c3a:	460a      	mov	r2, r1
 8010c3c:	2110      	movs	r1, #16
 8010c3e:	4660      	mov	r0, ip
 8010c40:	f7ff ff72 	bl	8010b28 <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8010c44:	b108      	cbz	r0, 8010c4a <SecureElementDeriveAndStoreKey+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 8010c46:	b004      	add	sp, #16
 8010c48:	bd10      	pop	{r4, pc}
    retval = SecureElementSetKey( targetKeyID, key );
 8010c4a:	4669      	mov	r1, sp
 8010c4c:	4620      	mov	r0, r4
 8010c4e:	f7ff ffa3 	bl	8010b98 <SecureElementSetKey>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8010c52:	e7f8      	b.n	8010c46 <SecureElementDeriveAndStoreKey+0x2a>
        return SECURE_ELEMENT_ERROR_NPE;
 8010c54:	2002      	movs	r0, #2
}
 8010c56:	4770      	bx	lr
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8010c58:	2003      	movs	r0, #3
 8010c5a:	e7f4      	b.n	8010c46 <SecureElementDeriveAndStoreKey+0x2a>

08010c5c <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 8010c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c60:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8010c64:	9d07      	ldr	r5, [sp, #28]
 8010c66:	9e08      	ldr	r6, [sp, #32]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 8010c68:	b37b      	cbz	r3, 8010cca <SecureElementProcessJoinAccept+0x6e>
 8010c6a:	4698      	mov	r8, r3
 8010c6c:	b37d      	cbz	r5, 8010cce <SecureElementProcessJoinAccept+0x72>
 8010c6e:	b386      	cbz	r6, 8010cd2 <SecureElementProcessJoinAccept+0x76>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 8010c70:	2c21      	cmp	r4, #33	; 0x21
 8010c72:	d830      	bhi.n	8010cd6 <SecureElementProcessJoinAccept+0x7a>
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 8010c74:	b2a7      	uxth	r7, r4
 8010c76:	463a      	mov	r2, r7
 8010c78:	4619      	mov	r1, r3
 8010c7a:	4628      	mov	r0, r5
 8010c7c:	f000 f887 	bl	8010d8e <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 8010c80:	1e79      	subs	r1, r7, #1
 8010c82:	1c6b      	adds	r3, r5, #1
 8010c84:	2201      	movs	r2, #1
 8010c86:	b289      	uxth	r1, r1
 8010c88:	eb08 0002 	add.w	r0, r8, r2
 8010c8c:	f7ff ff4c 	bl	8010b28 <SecureElementAesEncrypt>
 8010c90:	bb20      	cbnz	r0, 8010cdc <SecureElementProcessJoinAccept+0x80>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 8010c92:	7aeb      	ldrb	r3, [r5, #11]
 8010c94:	09db      	lsrs	r3, r3, #7
 8010c96:	7033      	strb	r3, [r6, #0]

    uint32_t mic = 0;

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 8010c98:	442c      	add	r4, r5
 8010c9a:	f814 2c04 	ldrb.w	r2, [r4, #-4]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 8010c9e:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8010ca2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 8010ca6:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 8010caa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 8010cae:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8010cb2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 8010cb6:	b99b      	cbnz	r3, 8010ce0 <SecureElementProcessJoinAccept+0x84>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 8010cb8:	1f39      	subs	r1, r7, #4
 8010cba:	2301      	movs	r3, #1
 8010cbc:	b289      	uxth	r1, r1
 8010cbe:	4628      	mov	r0, r5
 8010cc0:	f7ff ff1c 	bl	8010afc <SecureElementVerifyAesCmac>
 8010cc4:	b140      	cbz	r0, 8010cd8 <SecureElementProcessJoinAccept+0x7c>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 8010cc6:	2001      	movs	r0, #1
 8010cc8:	e006      	b.n	8010cd8 <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_NPE;
 8010cca:	2002      	movs	r0, #2
 8010ccc:	e004      	b.n	8010cd8 <SecureElementProcessJoinAccept+0x7c>
 8010cce:	2002      	movs	r0, #2
 8010cd0:	e002      	b.n	8010cd8 <SecureElementProcessJoinAccept+0x7c>
 8010cd2:	2002      	movs	r0, #2
 8010cd4:	e000      	b.n	8010cd8 <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8010cd6:	2005      	movs	r0, #5
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 8010cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 8010cdc:	2007      	movs	r0, #7
 8010cde:	e7fb      	b.n	8010cd8 <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 8010ce0:	2004      	movs	r0, #4
 8010ce2:	e7f9      	b.n	8010cd8 <SecureElementProcessJoinAccept+0x7c>

08010ce4 <SecureElementSetDevEui>:
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
    if( devEui == NULL )
 8010ce4:	b140      	cbz	r0, 8010cf8 <SecureElementSetDevEui+0x14>
{
 8010ce6:	b508      	push	{r3, lr}
 8010ce8:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 8010cea:	2208      	movs	r2, #8
 8010cec:	4b03      	ldr	r3, [pc, #12]	; (8010cfc <SecureElementSetDevEui+0x18>)
 8010cee:	6818      	ldr	r0, [r3, #0]
 8010cf0:	f000 f84d 	bl	8010d8e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8010cf4:	2000      	movs	r0, #0
}
 8010cf6:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8010cf8:	2002      	movs	r0, #2
}
 8010cfa:	4770      	bx	lr
 8010cfc:	20001030 	.word	0x20001030

08010d00 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
    return SeNvm->DevEui;
}
 8010d00:	4b01      	ldr	r3, [pc, #4]	; (8010d08 <SecureElementGetDevEui+0x8>)
 8010d02:	6818      	ldr	r0, [r3, #0]
 8010d04:	4770      	bx	lr
 8010d06:	bf00      	nop
 8010d08:	20001030 	.word	0x20001030

08010d0c <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
    if( joinEui == NULL )
 8010d0c:	b148      	cbz	r0, 8010d22 <SecureElementSetJoinEui+0x16>
{
 8010d0e:	b508      	push	{r3, lr}
 8010d10:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 8010d12:	4b05      	ldr	r3, [pc, #20]	; (8010d28 <SecureElementSetJoinEui+0x1c>)
 8010d14:	6818      	ldr	r0, [r3, #0]
 8010d16:	2208      	movs	r2, #8
 8010d18:	4410      	add	r0, r2
 8010d1a:	f000 f838 	bl	8010d8e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8010d1e:	2000      	movs	r0, #0
}
 8010d20:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8010d22:	2002      	movs	r0, #2
}
 8010d24:	4770      	bx	lr
 8010d26:	bf00      	nop
 8010d28:	20001030 	.word	0x20001030

08010d2c <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
    return SeNvm->JoinEui;
 8010d2c:	4b01      	ldr	r3, [pc, #4]	; (8010d34 <SecureElementGetJoinEui+0x8>)
 8010d2e:	6818      	ldr	r0, [r3, #0]
}
 8010d30:	3008      	adds	r0, #8
 8010d32:	4770      	bx	lr
 8010d34:	20001030 	.word	0x20001030

08010d38 <rand1>:

static int32_t rand1( void );

static int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8010d38:	4b09      	ldr	r3, [pc, #36]	; (8010d60 <rand1+0x28>)
 8010d3a:	681a      	ldr	r2, [r3, #0]
 8010d3c:	4909      	ldr	r1, [pc, #36]	; (8010d64 <rand1+0x2c>)
 8010d3e:	f243 0039 	movw	r0, #12345	; 0x3039
 8010d42:	fb01 0002 	mla	r0, r1, r2, r0
 8010d46:	6018      	str	r0, [r3, #0]
 8010d48:	2303      	movs	r3, #3
 8010d4a:	fba3 2300 	umull	r2, r3, r3, r0
 8010d4e:	1ac2      	subs	r2, r0, r3
 8010d50:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8010d54:	0f9b      	lsrs	r3, r3, #30
 8010d56:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
 8010d5a:	1ac0      	subs	r0, r0, r3
 8010d5c:	4770      	bx	lr
 8010d5e:	bf00      	nop
 8010d60:	20000108 	.word	0x20000108
 8010d64:	41c64e6d 	.word	0x41c64e6d

08010d68 <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 8010d68:	4b01      	ldr	r3, [pc, #4]	; (8010d70 <srand1+0x8>)
 8010d6a:	6018      	str	r0, [r3, #0]
}
 8010d6c:	4770      	bx	lr
 8010d6e:	bf00      	nop
 8010d70:	20000108 	.word	0x20000108

08010d74 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8010d74:	b538      	push	{r3, r4, r5, lr}
 8010d76:	4605      	mov	r5, r0
 8010d78:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8010d7a:	f7ff ffdd 	bl	8010d38 <rand1>
 8010d7e:	1b61      	subs	r1, r4, r5
 8010d80:	3101      	adds	r1, #1
 8010d82:	fb90 f3f1 	sdiv	r3, r0, r1
 8010d86:	fb01 0013 	mls	r0, r1, r3, r0
}
 8010d8a:	4428      	add	r0, r5
 8010d8c:	bd38      	pop	{r3, r4, r5, pc}

08010d8e <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 8010d8e:	e004      	b.n	8010d9a <memcpy1+0xc>
    {
        *dst++ = *src++;
 8010d90:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010d94:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 8010d98:	461a      	mov	r2, r3
 8010d9a:	1e53      	subs	r3, r2, #1
 8010d9c:	b29b      	uxth	r3, r3
 8010d9e:	2a00      	cmp	r2, #0
 8010da0:	d1f6      	bne.n	8010d90 <memcpy1+0x2>
    }
}
 8010da2:	4770      	bx	lr

08010da4 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 8010da4:	1e53      	subs	r3, r2, #1
 8010da6:	4418      	add	r0, r3
    while( size-- )
 8010da8:	e004      	b.n	8010db4 <memcpyr+0x10>
    {
        *dst-- = *src++;
 8010daa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010dae:	f800 2901 	strb.w	r2, [r0], #-1
    while( size-- )
 8010db2:	461a      	mov	r2, r3
 8010db4:	1e53      	subs	r3, r2, #1
 8010db6:	b29b      	uxth	r3, r3
 8010db8:	2a00      	cmp	r2, #0
 8010dba:	d1f6      	bne.n	8010daa <memcpyr+0x6>
    }
}
 8010dbc:	4770      	bx	lr

08010dbe <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 8010dbe:	e002      	b.n	8010dc6 <memset1+0x8>
    {
        *dst++ = value;
 8010dc0:	f800 1b01 	strb.w	r1, [r0], #1
    while( size-- )
 8010dc4:	461a      	mov	r2, r3
 8010dc6:	1e53      	subs	r3, r2, #1
 8010dc8:	b29b      	uxth	r3, r3
 8010dca:	2a00      	cmp	r2, #0
 8010dcc:	d1f8      	bne.n	8010dc0 <memset1+0x2>
    }
}
 8010dce:	4770      	bx	lr

08010dd0 <Crc32>:
uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 8010dd0:	b1f0      	cbz	r0, 8010e10 <Crc32+0x40>
{
 8010dd2:	b510      	push	{r4, lr}
 8010dd4:	4604      	mov	r4, r0
    {
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
 8010dd6:	f04f 0e00 	mov.w	lr, #0
    uint32_t crc = 0xFFFFFFFF;
 8010dda:	f04f 30ff 	mov.w	r0, #4294967295
 8010dde:	e00e      	b.n	8010dfe <Crc32+0x2e>
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8010de0:	f340 0c00 	sbfx	ip, r0, #0, #1
 8010de4:	4a0b      	ldr	r2, [pc, #44]	; (8010e14 <Crc32+0x44>)
 8010de6:	ea0c 0202 	and.w	r2, ip, r2
 8010dea:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
 8010dee:	3301      	adds	r3, #1
 8010df0:	b29b      	uxth	r3, r3
 8010df2:	2b07      	cmp	r3, #7
 8010df4:	d9f4      	bls.n	8010de0 <Crc32+0x10>
    for( uint16_t i = 0; i < length; ++i )
 8010df6:	f10e 0e01 	add.w	lr, lr, #1
 8010dfa:	fa1f fe8e 	uxth.w	lr, lr
 8010dfe:	458e      	cmp	lr, r1
 8010e00:	d204      	bcs.n	8010e0c <Crc32+0x3c>
        crc ^= ( uint32_t )buffer[i];
 8010e02:	f814 300e 	ldrb.w	r3, [r4, lr]
 8010e06:	4058      	eors	r0, r3
        for( uint16_t i = 0; i < 8; i++ )
 8010e08:	2300      	movs	r3, #0
 8010e0a:	e7f2      	b.n	8010df2 <Crc32+0x22>
        }
    }

    return ~crc;
 8010e0c:	43c0      	mvns	r0, r0
}
 8010e0e:	bd10      	pop	{r4, pc}
        return 0;
 8010e10:	2000      	movs	r0, #0
}
 8010e12:	4770      	bx	lr
 8010e14:	edb88320 	.word	0xedb88320

08010e18 <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 8010e18:	2001      	movs	r0, #1
 8010e1a:	4770      	bx	lr

08010e1c <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 8010e1c:	280a      	cmp	r0, #10
 8010e1e:	d807      	bhi.n	8010e30 <RadioGetLoRaBandwidthInHz+0x14>
 8010e20:	e8df f000 	tbb	[pc, r0]
 8010e24:	17110b20 	.word	0x17110b20
 8010e28:	061e1c1a 	.word	0x061e1c1a
 8010e2c:	0e08      	.short	0x0e08
 8010e2e:	14          	.byte	0x14
 8010e2f:	00          	.byte	0x00
 8010e30:	2000      	movs	r0, #0
 8010e32:	4770      	bx	lr
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
        break;
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8010e34:	f642 00b1 	movw	r0, #10417	; 0x28b1
        break;
 8010e38:	4770      	bx	lr
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8010e3a:	f643 5009 	movw	r0, #15625	; 0x3d09
        break;
 8010e3e:	4770      	bx	lr
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8010e40:	f245 1061 	movw	r0, #20833	; 0x5161
        break;
 8010e44:	4770      	bx	lr
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8010e46:	f647 2012 	movw	r0, #31250	; 0x7a12
        break;
 8010e4a:	4770      	bx	lr
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8010e4c:	f24a 20c3 	movw	r0, #41667	; 0xa2c3
        break;
 8010e50:	4770      	bx	lr
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8010e52:	f24f 4024 	movw	r0, #62500	; 0xf424
        break;
 8010e56:	4770      	bx	lr
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8010e58:	4804      	ldr	r0, [pc, #16]	; (8010e6c <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 8010e5a:	4770      	bx	lr
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8010e5c:	4804      	ldr	r0, [pc, #16]	; (8010e70 <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 8010e5e:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8010e60:	4804      	ldr	r0, [pc, #16]	; (8010e74 <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 8010e62:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 8010e64:	f641 6084 	movw	r0, #7812	; 0x1e84
    }

    return bandwidthInHz;
}
 8010e68:	4770      	bx	lr
 8010e6a:	bf00      	nop
 8010e6c:	0001e848 	.word	0x0001e848
 8010e70:	0003d090 	.word	0x0003d090
 8010e74:	0007a120 	.word	0x0007a120

08010e78 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8010e78:	f89d 1004 	ldrb.w	r1, [sp, #4]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 8010e7c:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8010e7e:	b953      	cbnz	r3, 8010e96 <RadioGetGfskTimeOnAirNumerator+0x1e>
 8010e80:	2008      	movs	r0, #8
    return ( preambleLen << 3 ) +
 8010e82:	4402      	add	r2, r0
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8010e84:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8010e86:	b141      	cbz	r1, 8010e9a <RadioGetGfskTimeOnAirNumerator+0x22>
 8010e88:	2302      	movs	r3, #2
 8010e8a:	f89d 0000 	ldrb.w	r0, [sp]
 8010e8e:	4418      	add	r0, r3
    /* ST_WORKAROUND_END */
}
 8010e90:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8010e94:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8010e96:	2000      	movs	r0, #0
 8010e98:	e7f3      	b.n	8010e82 <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8010e9a:	2300      	movs	r3, #0
 8010e9c:	e7f5      	b.n	8010e8a <RadioGetGfskTimeOnAirNumerator+0x12>

08010e9e <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8010e9e:	b570      	push	{r4, r5, r6, lr}
 8010ea0:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8010ea4:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 8010ea8:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8010eaa:	f1a1 0c05 	sub.w	ip, r1, #5
 8010eae:	f1bc 0f01 	cmp.w	ip, #1
 8010eb2:	d932      	bls.n	8010f1a <RadioGetLoRaTimeOnAirNumerator+0x7c>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8010eb4:	b918      	cbnz	r0, 8010ebe <RadioGetLoRaTimeOnAirNumerator+0x20>
 8010eb6:	f1a1 060b 	sub.w	r6, r1, #11
 8010eba:	2e01      	cmp	r6, #1
 8010ebc:	d935      	bls.n	8010f2a <RadioGetLoRaTimeOnAirNumerator+0x8c>
 8010ebe:	2801      	cmp	r0, #1
 8010ec0:	d02f      	beq.n	8010f22 <RadioGetLoRaTimeOnAirNumerator+0x84>
    bool    lowDatareOptimize = false;
 8010ec2:	2600      	movs	r6, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8010ec4:	f89d e014 	ldrb.w	lr, [sp, #20]
 8010ec8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
                            ( crcOn ? 16 : 0 ) -
 8010ecc:	b38d      	cbz	r5, 8010f32 <RadioGetLoRaTimeOnAirNumerator+0x94>
 8010ece:	f04f 0c10 	mov.w	ip, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8010ed2:	44e6      	add	lr, ip
                            ( 4 * datarate ) +
 8010ed4:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 8010ed6:	ebae 0e81 	sub.w	lr, lr, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 8010eda:	b36c      	cbz	r4, 8010f38 <RadioGetLoRaTimeOnAirNumerator+0x9a>
 8010edc:	f04f 0c00 	mov.w	ip, #0
                            ( 4 * datarate ) +
 8010ee0:	44f4      	add	ip, lr

    if( datarate <= 6 )
 8010ee2:	2906      	cmp	r1, #6
 8010ee4:	d904      	bls.n	8010ef0 <RadioGetLoRaTimeOnAirNumerator+0x52>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 8010ee6:	f10c 0c08 	add.w	ip, ip, #8

        if( lowDatareOptimize == true )
 8010eea:	b10e      	cbz	r6, 8010ef0 <RadioGetLoRaTimeOnAirNumerator+0x52>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8010eec:	1e88      	subs	r0, r1, #2
 8010eee:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 8010ef0:	f1bc 0f00 	cmp.w	ip, #0
 8010ef4:	db23      	blt.n	8010f3e <RadioGetLoRaTimeOnAirNumerator+0xa0>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8010ef6:	4484      	add	ip, r0
 8010ef8:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010efc:	fb9c fcf0 	sdiv	ip, ip, r0
 8010f00:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 8010f04:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 8010f08:	2906      	cmp	r1, #6
 8010f0a:	d801      	bhi.n	8010f10 <RadioGetLoRaTimeOnAirNumerator+0x72>
    {
        intermediate += 2;
 8010f0c:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8010f10:	0080      	lsls	r0, r0, #2
 8010f12:	3001      	adds	r0, #1
 8010f14:	3902      	subs	r1, #2
}
 8010f16:	4088      	lsls	r0, r1
 8010f18:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 8010f1a:	2b0b      	cmp	r3, #11
 8010f1c:	d8ca      	bhi.n	8010eb4 <RadioGetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 8010f1e:	230c      	movs	r3, #12
 8010f20:	e7c8      	b.n	8010eb4 <RadioGetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8010f22:	290c      	cmp	r1, #12
 8010f24:	d003      	beq.n	8010f2e <RadioGetLoRaTimeOnAirNumerator+0x90>
    bool    lowDatareOptimize = false;
 8010f26:	2600      	movs	r6, #0
 8010f28:	e7cc      	b.n	8010ec4 <RadioGetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 8010f2a:	2601      	movs	r6, #1
 8010f2c:	e7ca      	b.n	8010ec4 <RadioGetLoRaTimeOnAirNumerator+0x26>
 8010f2e:	2601      	movs	r6, #1
 8010f30:	e7c8      	b.n	8010ec4 <RadioGetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 8010f32:	f04f 0c00 	mov.w	ip, #0
 8010f36:	e7cc      	b.n	8010ed2 <RadioGetLoRaTimeOnAirNumerator+0x34>
                            ( fixLen ? 0 : 20 );
 8010f38:	f04f 0c14 	mov.w	ip, #20
 8010f3c:	e7d0      	b.n	8010ee0 <RadioGetLoRaTimeOnAirNumerator+0x42>
        ceilNumerator = 0;
 8010f3e:	f04f 0c00 	mov.w	ip, #0
 8010f42:	e7d8      	b.n	8010ef6 <RadioGetLoRaTimeOnAirNumerator+0x58>

08010f44 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8010f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f46:	b085      	sub	sp, #20
 8010f48:	460e      	mov	r6, r1
 8010f4a:	4615      	mov	r5, r2
 8010f4c:	4619      	mov	r1, r3
 8010f4e:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8010f52:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8010f56:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8010f5a:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 8010f5e:	b148      	cbz	r0, 8010f74 <RadioTimeOnAir+0x30>
 8010f60:	2801      	cmp	r0, #1
 8010f62:	d012      	beq.n	8010f8a <RadioTimeOnAir+0x46>
 8010f64:	2501      	movs	r5, #1
 8010f66:	2400      	movs	r4, #0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 8010f68:	442c      	add	r4, r5
 8010f6a:	1e60      	subs	r0, r4, #1
}
 8010f6c:	fbb0 f0f5 	udiv	r0, r0, r5
 8010f70:	b005      	add	sp, #20
 8010f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8010f74:	f8cd c004 	str.w	ip, [sp, #4]
 8010f78:	9700      	str	r7, [sp, #0]
 8010f7a:	4628      	mov	r0, r5
 8010f7c:	f7ff ff7c 	bl	8010e78 <RadioGetGfskTimeOnAirNumerator>
 8010f80:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8010f84:	fb00 f404 	mul.w	r4, r0, r4
        break;
 8010f88:	e7ee      	b.n	8010f68 <RadioTimeOnAir+0x24>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8010f8a:	f8cd c008 	str.w	ip, [sp, #8]
 8010f8e:	9701      	str	r7, [sp, #4]
 8010f90:	9300      	str	r3, [sp, #0]
 8010f92:	4613      	mov	r3, r2
 8010f94:	460a      	mov	r2, r1
 8010f96:	4629      	mov	r1, r5
 8010f98:	4630      	mov	r0, r6
 8010f9a:	f7ff ff80 	bl	8010e9e <RadioGetLoRaTimeOnAirNumerator>
 8010f9e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8010fa2:	fb00 f404 	mul.w	r4, r0, r4
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8010fa6:	4b03      	ldr	r3, [pc, #12]	; (8010fb4 <RadioTimeOnAir+0x70>)
 8010fa8:	5d98      	ldrb	r0, [r3, r6]
 8010faa:	f7ff ff37 	bl	8010e1c <RadioGetLoRaBandwidthInHz>
 8010fae:	4605      	mov	r5, r0
        break;
 8010fb0:	e7da      	b.n	8010f68 <RadioTimeOnAir+0x24>
 8010fb2:	bf00      	nop
 8010fb4:	08014f08 	.word	0x08014f08

08010fb8 <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 8010fb8:	b508      	push	{r3, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8010fba:	4b05      	ldr	r3, [pc, #20]	; (8010fd0 <RadioOnTxTimeoutProcess+0x18>)
 8010fbc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8010fc0:	629a      	str	r2, [r3, #40]	; 0x28
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8010fc2:	4b04      	ldr	r3, [pc, #16]	; (8010fd4 <RadioOnTxTimeoutProcess+0x1c>)
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	b113      	cbz	r3, 8010fce <RadioOnTxTimeoutProcess+0x16>
 8010fc8:	685b      	ldr	r3, [r3, #4]
 8010fca:	b103      	cbz	r3, 8010fce <RadioOnTxTimeoutProcess+0x16>
    {
        RadioEvents->TxTimeout( );
 8010fcc:	4798      	blx	r3
    }
}
 8010fce:	bd08      	pop	{r3, pc}
 8010fd0:	48000400 	.word	0x48000400
 8010fd4:	20001134 	.word	0x20001134

08010fd8 <RadioOnTxTimeoutIrq>:
{
 8010fd8:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 8010fda:	f7ff ffed 	bl	8010fb8 <RadioOnTxTimeoutProcess>
}
 8010fde:	bd08      	pop	{r3, pc}

08010fe0 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8010fe0:	b508      	push	{r3, lr}
 8010fe2:	4b05      	ldr	r3, [pc, #20]	; (8010ff8 <RadioOnRxTimeoutProcess+0x18>)
 8010fe4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010fe8:	629a      	str	r2, [r3, #40]	; 0x28
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8010fea:	4b04      	ldr	r3, [pc, #16]	; (8010ffc <RadioOnRxTimeoutProcess+0x1c>)
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	b113      	cbz	r3, 8010ff6 <RadioOnRxTimeoutProcess+0x16>
 8010ff0:	68db      	ldr	r3, [r3, #12]
 8010ff2:	b103      	cbz	r3, 8010ff6 <RadioOnRxTimeoutProcess+0x16>
    {
        RadioEvents->RxTimeout( );
 8010ff4:	4798      	blx	r3
    }
}
 8010ff6:	bd08      	pop	{r3, pc}
 8010ff8:	48000400 	.word	0x48000400
 8010ffc:	20001134 	.word	0x20001134

08011000 <RadioOnRxTimeoutIrq>:
{
 8011000:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 8011002:	f7ff ffed 	bl	8010fe0 <RadioOnRxTimeoutProcess>
}
 8011006:	bd08      	pop	{r3, pc}

08011008 <RadioSetRxGenericConfig>:
    }
    return status;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8011008:	f04f 30ff 	mov.w	r0, #4294967295
 801100c:	4770      	bx	lr

0801100e <RadioSetTxGenericConfig>:
    SubgRf.TxTimeout = timeout;
    return 0;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801100e:	f04f 30ff 	mov.w	r0, #4294967295
 8011012:	4770      	bx	lr

08011014 <RadioTxCw>:
{
 8011014:	b508      	push	{r3, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8011016:	f001 fbab 	bl	8012770 <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 801101a:	2101      	movs	r1, #1
 801101c:	f001 fb94 	bl	8012748 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8011020:	f000 feac 	bl	8011d7c <SUBGRF_SetTxContinuousWave>
}
 8011024:	bd08      	pop	{r3, pc}
	...

08011028 <RadioSetRxDutyCycle>:
{
 8011028:	b570      	push	{r4, r5, r6, lr}
 801102a:	4604      	mov	r4, r0
 801102c:	460d      	mov	r5, r1
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 801102e:	eb01 0340 	add.w	r3, r1, r0, lsl #1
 8011032:	4e09      	ldr	r6, [pc, #36]	; (8011058 <RadioSetRxDutyCycle+0x30>)
 8011034:	65b3      	str	r3, [r6, #88]	; 0x58
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8011036:	2300      	movs	r3, #0
 8011038:	461a      	mov	r2, r3
 801103a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801103e:	4608      	mov	r0, r1
 8011040:	f000 ff47 	bl	8011ed2 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8011044:	2100      	movs	r1, #0
 8011046:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 801104a:	f001 fb7d 	bl	8012748 <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 801104e:	4629      	mov	r1, r5
 8011050:	4620      	mov	r0, r4
 8011052:	f000 fe63 	bl	8011d1c <SUBGRF_SetRxDutyCycle>
}
 8011056:	bd70      	pop	{r4, r5, r6, pc}
 8011058:	20001150 	.word	0x20001150

0801105c <RadioRxBoosted>:
{
 801105c:	b538      	push	{r3, r4, r5, lr}
 801105e:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init() )
 8011060:	f001 fc57 	bl	8012912 <RFW_Is_Init>
 8011064:	2801      	cmp	r0, #1
 8011066:	d019      	beq.n	801109c <RadioRxBoosted+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8011068:	2300      	movs	r3, #0
 801106a:	461a      	mov	r2, r3
 801106c:	f240 2162 	movw	r1, #610	; 0x262
 8011070:	4608      	mov	r0, r1
 8011072:	f000 ff2e 	bl	8011ed2 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 8011076:	b9a4      	cbnz	r4, 80110a2 <RadioRxBoosted+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8011078:	4c11      	ldr	r4, [pc, #68]	; (80110c0 <RadioRxBoosted+0x64>)
 801107a:	2100      	movs	r1, #0
 801107c:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 801107e:	4b11      	ldr	r3, [pc, #68]	; (80110c4 <RadioRxBoosted+0x68>)
 8011080:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011084:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8011086:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 801108a:	f001 fb5d 	bl	8012748 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 801108e:	7863      	ldrb	r3, [r4, #1]
 8011090:	b183      	cbz	r3, 80110b4 <RadioRxBoosted+0x58>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8011092:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8011096:	f000 ffef 	bl	8012078 <SUBGRF_SetRxBoosted>
}
 801109a:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit();
 801109c:	f001 fc41 	bl	8012922 <RFW_ReceiveInit>
 80110a0:	e7e9      	b.n	8011076 <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 80110a2:	4d09      	ldr	r5, [pc, #36]	; (80110c8 <RadioRxBoosted+0x6c>)
 80110a4:	4621      	mov	r1, r4
 80110a6:	4628      	mov	r0, r5
 80110a8:	f002 f90e 	bl	80132c8 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80110ac:	4628      	mov	r0, r5
 80110ae:	f002 f8c5 	bl	801323c <UTIL_TIMER_Start>
 80110b2:	e7e1      	b.n	8011078 <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 80110b4:	4b02      	ldr	r3, [pc, #8]	; (80110c0 <RadioRxBoosted+0x64>)
 80110b6:	6898      	ldr	r0, [r3, #8]
 80110b8:	0180      	lsls	r0, r0, #6
 80110ba:	f000 ffdd 	bl	8012078 <SUBGRF_SetRxBoosted>
}
 80110be:	e7ec      	b.n	801109a <RadioRxBoosted+0x3e>
 80110c0:	20001150 	.word	0x20001150
 80110c4:	48000400 	.word	0x48000400
 80110c8:	20001138 	.word	0x20001138

080110cc <RadioStandby>:
{
 80110cc:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 80110ce:	2000      	movs	r0, #0
 80110d0:	f000 fdd6 	bl	8011c80 <SUBGRF_SetStandby>
}
 80110d4:	bd08      	pop	{r3, pc}

080110d6 <RadioWrite>:
{
 80110d6:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister( addr, data );
 80110d8:	f000 ffbe 	bl	8012058 <SUBGRF_WriteRegister>
}
 80110dc:	bd08      	pop	{r3, pc}
	...

080110e0 <RadioTxPrbs>:
{
 80110e0:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80110e2:	2101      	movs	r1, #1
 80110e4:	4b07      	ldr	r3, [pc, #28]	; (8011104 <RadioTxPrbs+0x24>)
 80110e6:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 80110ea:	f001 fb2d 	bl	8012748 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 80110ee:	212d      	movs	r1, #45	; 0x2d
 80110f0:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80110f4:	f7ff ffef 	bl	80110d6 <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 80110f8:	f000 fe47 	bl	8011d8a <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 80110fc:	4802      	ldr	r0, [pc, #8]	; (8011108 <RadioTxPrbs+0x28>)
 80110fe:	f000 fdd9 	bl	8011cb4 <SUBGRF_SetTx>
}
 8011102:	bd08      	pop	{r3, pc}
 8011104:	20001150 	.word	0x20001150
 8011108:	000fffff 	.word	0x000fffff

0801110c <RadioRead>:
{
 801110c:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister( addr );
 801110e:	f001 f895 	bl	801223c <SUBGRF_ReadRegister>
}
 8011112:	bd08      	pop	{r3, pc}

08011114 <RadioGetStatus>:
{
 8011114:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 8011116:	f000 fdad 	bl	8011c74 <SUBGRF_GetOperatingMode>
 801111a:	2805      	cmp	r0, #5
 801111c:	d007      	beq.n	801112e <RadioGetStatus+0x1a>
 801111e:	2807      	cmp	r0, #7
 8011120:	d007      	beq.n	8011132 <RadioGetStatus+0x1e>
 8011122:	2804      	cmp	r0, #4
 8011124:	d001      	beq.n	801112a <RadioGetStatus+0x16>
            return RF_IDLE;
 8011126:	2000      	movs	r0, #0
}
 8011128:	bd08      	pop	{r3, pc}
    switch( SUBGRF_GetOperatingMode( ) )
 801112a:	2002      	movs	r0, #2
 801112c:	e7fc      	b.n	8011128 <RadioGetStatus+0x14>
            return RF_RX_RUNNING;
 801112e:	2001      	movs	r0, #1
 8011130:	e7fa      	b.n	8011128 <RadioGetStatus+0x14>
            return RF_CAD;
 8011132:	2003      	movs	r0, #3
 8011134:	e7f8      	b.n	8011128 <RadioGetStatus+0x14>
	...

08011138 <RadioIrqProcess>:
{
 8011138:	b530      	push	{r4, r5, lr}
 801113a:	b083      	sub	sp, #12
    uint8_t size = 0;
 801113c:	2300      	movs	r3, #0
 801113e:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 8011142:	9300      	str	r3, [sp, #0]
    switch( SubgRf.RadioIrq )
 8011144:	4ba5      	ldr	r3, [pc, #660]	; (80113dc <RadioIrqProcess+0x2a4>)
 8011146:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801114a:	2b20      	cmp	r3, #32
 801114c:	d829      	bhi.n	80111a2 <RadioIrqProcess+0x6a>
 801114e:	b21a      	sxth	r2, r3
 8011150:	2a00      	cmp	r2, #0
 8011152:	f000 8140 	beq.w	80113d6 <RadioIrqProcess+0x29e>
 8011156:	3b01      	subs	r3, #1
 8011158:	2b1f      	cmp	r3, #31
 801115a:	f200 813c 	bhi.w	80113d6 <RadioIrqProcess+0x29e>
 801115e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8011162:	0063      	.short	0x0063
 8011164:	013a007f 	.word	0x013a007f
 8011168:	013a00f7 	.word	0x013a00f7
 801116c:	013a013a 	.word	0x013a013a
 8011170:	013a0127 	.word	0x013a0127
 8011174:	013a013a 	.word	0x013a013a
 8011178:	013a013a 	.word	0x013a013a
 801117c:	013a013a 	.word	0x013a013a
 8011180:	013a0134 	.word	0x013a0134
 8011184:	013a013a 	.word	0x013a013a
 8011188:	013a013a 	.word	0x013a013a
 801118c:	013a013a 	.word	0x013a013a
 8011190:	013a013a 	.word	0x013a013a
 8011194:	013a013a 	.word	0x013a013a
 8011198:	013a013a 	.word	0x013a013a
 801119c:	013a013a 	.word	0x013a013a
 80111a0:	0155      	.short	0x0155
 80111a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80111a6:	f000 80b3 	beq.w	8011310 <RadioIrqProcess+0x1d8>
 80111aa:	d928      	bls.n	80111fe <RadioIrqProcess+0xc6>
 80111ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80111b0:	f040 8111 	bne.w	80113d6 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 80111b4:	4b8a      	ldr	r3, [pc, #552]	; (80113e0 <RadioIrqProcess+0x2a8>)
 80111b6:	2201      	movs	r2, #1
 80111b8:	2100      	movs	r1, #0
 80111ba:	2002      	movs	r0, #2
 80111bc:	f001 fc90 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 80111c0:	f000 fd58 	bl	8011c74 <SUBGRF_GetOperatingMode>
 80111c4:	2804      	cmp	r0, #4
 80111c6:	f000 80b0 	beq.w	801132a <RadioIrqProcess+0x1f2>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 80111ca:	f000 fd53 	bl	8011c74 <SUBGRF_GetOperatingMode>
 80111ce:	2805      	cmp	r0, #5
 80111d0:	f040 8101 	bne.w	80113d6 <RadioIrqProcess+0x29e>
  WRITE_REG(GPIOx->BRR, PinMask);
 80111d4:	4b83      	ldr	r3, [pc, #524]	; (80113e4 <RadioIrqProcess+0x2ac>)
 80111d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80111da:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &RxTimeoutTimer );
 80111dc:	4882      	ldr	r0, [pc, #520]	; (80113e8 <RadioIrqProcess+0x2b0>)
 80111de:	f001 ffd3 	bl	8013188 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80111e2:	2000      	movs	r0, #0
 80111e4:	f000 fd4c 	bl	8011c80 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80111e8:	4b80      	ldr	r3, [pc, #512]	; (80113ec <RadioIrqProcess+0x2b4>)
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	f000 80f2 	beq.w	80113d6 <RadioIrqProcess+0x29e>
 80111f2:	68db      	ldr	r3, [r3, #12]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	f000 80ee 	beq.w	80113d6 <RadioIrqProcess+0x29e>
                RadioEvents->RxTimeout( );
 80111fa:	4798      	blx	r3
 80111fc:	e0eb      	b.n	80113d6 <RadioIrqProcess+0x29e>
    switch( SubgRf.RadioIrq )
 80111fe:	2b40      	cmp	r3, #64	; 0x40
 8011200:	f000 811d 	beq.w	801143e <RadioIrqProcess+0x306>
 8011204:	2b80      	cmp	r3, #128	; 0x80
 8011206:	f040 80e6 	bne.w	80113d6 <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 801120a:	2000      	movs	r0, #0
 801120c:	f000 fd38 	bl	8011c80 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8011210:	4b76      	ldr	r3, [pc, #472]	; (80113ec <RadioIrqProcess+0x2b4>)
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	2b00      	cmp	r3, #0
 8011216:	f000 80de 	beq.w	80113d6 <RadioIrqProcess+0x29e>
 801121a:	699b      	ldr	r3, [r3, #24]
 801121c:	2b00      	cmp	r3, #0
 801121e:	f000 80da 	beq.w	80113d6 <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( false );
 8011222:	2000      	movs	r0, #0
 8011224:	4798      	blx	r3
 8011226:	e0d6      	b.n	80113d6 <RadioIrqProcess+0x29e>
 8011228:	4b6e      	ldr	r3, [pc, #440]	; (80113e4 <RadioIrqProcess+0x2ac>)
 801122a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801122e:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &TxTimeoutTimer );
 8011230:	486f      	ldr	r0, [pc, #444]	; (80113f0 <RadioIrqProcess+0x2b8>)
 8011232:	f001 ffa9 	bl	8013188 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8011236:	2000      	movs	r0, #0
 8011238:	f000 fd22 	bl	8011c80 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 801123c:	f001 fb6b 	bl	8012916 <RFW_Is_LongPacketModeEnabled>
 8011240:	2801      	cmp	r0, #1
 8011242:	d00a      	beq.n	801125a <RadioIrqProcess+0x122>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8011244:	4b69      	ldr	r3, [pc, #420]	; (80113ec <RadioIrqProcess+0x2b4>)
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	2b00      	cmp	r3, #0
 801124a:	f000 80c4 	beq.w	80113d6 <RadioIrqProcess+0x29e>
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	2b00      	cmp	r3, #0
 8011252:	f000 80c0 	beq.w	80113d6 <RadioIrqProcess+0x29e>
            RadioEvents->TxDone( );
 8011256:	4798      	blx	r3
 8011258:	e0bd      	b.n	80113d6 <RadioIrqProcess+0x29e>
            RFW_DeInit_TxLongPacket( );
 801125a:	f001 fb65 	bl	8012928 <RFW_DeInit_TxLongPacket>
 801125e:	e7f1      	b.n	8011244 <RadioIrqProcess+0x10c>
 8011260:	4b60      	ldr	r3, [pc, #384]	; (80113e4 <RadioIrqProcess+0x2ac>)
 8011262:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011266:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &RxTimeoutTimer );
 8011268:	485f      	ldr	r0, [pc, #380]	; (80113e8 <RadioIrqProcess+0x2b0>)
 801126a:	f001 ff8d 	bl	8013188 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801126e:	4b5b      	ldr	r3, [pc, #364]	; (80113dc <RadioIrqProcess+0x2a4>)
 8011270:	785b      	ldrb	r3, [r3, #1]
 8011272:	b303      	cbz	r3, 80112b6 <RadioIrqProcess+0x17e>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8011274:	22ff      	movs	r2, #255	; 0xff
 8011276:	f10d 0107 	add.w	r1, sp, #7
 801127a:	485e      	ldr	r0, [pc, #376]	; (80113f4 <RadioIrqProcess+0x2bc>)
 801127c:	f001 fa4a 	bl	8012714 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8011280:	485d      	ldr	r0, [pc, #372]	; (80113f8 <RadioIrqProcess+0x2c0>)
 8011282:	f000 fead 	bl	8011fe0 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8011286:	4b59      	ldr	r3, [pc, #356]	; (80113ec <RadioIrqProcess+0x2b4>)
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	2b00      	cmp	r3, #0
 801128c:	f000 80a3 	beq.w	80113d6 <RadioIrqProcess+0x29e>
 8011290:	689c      	ldr	r4, [r3, #8]
 8011292:	2c00      	cmp	r4, #0
 8011294:	f000 809f 	beq.w	80113d6 <RadioIrqProcess+0x29e>
            switch( SubgRf.PacketStatus.packetType )
 8011298:	4b50      	ldr	r3, [pc, #320]	; (80113dc <RadioIrqProcess+0x2a4>)
 801129a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801129e:	2b01      	cmp	r3, #1
 80112a0:	d11d      	bne.n	80112de <RadioIrqProcess+0x1a6>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 80112a2:	4a4e      	ldr	r2, [pc, #312]	; (80113dc <RadioIrqProcess+0x2a4>)
 80112a4:	f992 3031 	ldrsb.w	r3, [r2, #49]	; 0x31
 80112a8:	f992 2030 	ldrsb.w	r2, [r2, #48]	; 0x30
 80112ac:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80112b0:	4850      	ldr	r0, [pc, #320]	; (80113f4 <RadioIrqProcess+0x2bc>)
 80112b2:	47a0      	blx	r4
                break;
 80112b4:	e08f      	b.n	80113d6 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 80112b6:	2000      	movs	r0, #0
 80112b8:	f000 fce2 	bl	8011c80 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 80112bc:	2100      	movs	r1, #0
 80112be:	f640 1002 	movw	r0, #2306	; 0x902
 80112c2:	f000 fec9 	bl	8012058 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 80112c6:	f640 1044 	movw	r0, #2372	; 0x944
 80112ca:	f000 ffb7 	bl	801223c <SUBGRF_ReadRegister>
 80112ce:	f040 0102 	orr.w	r1, r0, #2
 80112d2:	b2c9      	uxtb	r1, r1
 80112d4:	f640 1044 	movw	r0, #2372	; 0x944
 80112d8:	f000 febe 	bl	8012058 <SUBGRF_WriteRegister>
 80112dc:	e7ca      	b.n	8011274 <RadioIrqProcess+0x13c>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 80112de:	4c3f      	ldr	r4, [pc, #252]	; (80113dc <RadioIrqProcess+0x2a4>)
 80112e0:	4669      	mov	r1, sp
 80112e2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80112e4:	f001 faca 	bl	801287c <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 80112e8:	4b40      	ldr	r3, [pc, #256]	; (80113ec <RadioIrqProcess+0x2b4>)
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	689d      	ldr	r5, [r3, #8]
 80112ee:	9b00      	ldr	r3, [sp, #0]
 80112f0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80112f4:	4a41      	ldr	r2, [pc, #260]	; (80113fc <RadioIrqProcess+0x2c4>)
 80112f6:	fb82 1203 	smull	r1, r2, r2, r3
 80112fa:	17db      	asrs	r3, r3, #31
 80112fc:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 8011300:	b25b      	sxtb	r3, r3
 8011302:	f994 2029 	ldrsb.w	r2, [r4, #41]	; 0x29
 8011306:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801130a:	483a      	ldr	r0, [pc, #232]	; (80113f4 <RadioIrqProcess+0x2bc>)
 801130c:	47a8      	blx	r5
                break;
 801130e:	e062      	b.n	80113d6 <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 8011310:	2000      	movs	r0, #0
 8011312:	f000 fcb5 	bl	8011c80 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8011316:	4b35      	ldr	r3, [pc, #212]	; (80113ec <RadioIrqProcess+0x2b4>)
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	2b00      	cmp	r3, #0
 801131c:	d05b      	beq.n	80113d6 <RadioIrqProcess+0x29e>
 801131e:	699b      	ldr	r3, [r3, #24]
 8011320:	2b00      	cmp	r3, #0
 8011322:	d058      	beq.n	80113d6 <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( true );
 8011324:	2001      	movs	r0, #1
 8011326:	4798      	blx	r3
 8011328:	e055      	b.n	80113d6 <RadioIrqProcess+0x29e>
 801132a:	4b2e      	ldr	r3, [pc, #184]	; (80113e4 <RadioIrqProcess+0x2ac>)
 801132c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8011330:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &TxTimeoutTimer );
 8011332:	482f      	ldr	r0, [pc, #188]	; (80113f0 <RadioIrqProcess+0x2b8>)
 8011334:	f001 ff28 	bl	8013188 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8011338:	2000      	movs	r0, #0
 801133a:	f000 fca1 	bl	8011c80 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801133e:	4b2b      	ldr	r3, [pc, #172]	; (80113ec <RadioIrqProcess+0x2b4>)
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	2b00      	cmp	r3, #0
 8011344:	d047      	beq.n	80113d6 <RadioIrqProcess+0x29e>
 8011346:	685b      	ldr	r3, [r3, #4]
 8011348:	2b00      	cmp	r3, #0
 801134a:	d044      	beq.n	80113d6 <RadioIrqProcess+0x29e>
                RadioEvents->TxTimeout( );
 801134c:	4798      	blx	r3
 801134e:	e042      	b.n	80113d6 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8011350:	4b2b      	ldr	r3, [pc, #172]	; (8011400 <RadioIrqProcess+0x2c8>)
 8011352:	2201      	movs	r2, #1
 8011354:	2100      	movs	r1, #0
 8011356:	2002      	movs	r0, #2
 8011358:	f001 fbc2 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 801135c:	4b1f      	ldr	r3, [pc, #124]	; (80113dc <RadioIrqProcess+0x2a4>)
 801135e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8011360:	b3c9      	cbz	r1, 80113d6 <RadioIrqProcess+0x29e>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 8011362:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8011366:	f640 1003 	movw	r0, #2307	; 0x903
 801136a:	f7ff feb4 	bl	80110d6 <RadioWrite>
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 801136e:	4c1b      	ldr	r4, [pc, #108]	; (80113dc <RadioIrqProcess+0x2a4>)
 8011370:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8011374:	f640 1004 	movw	r0, #2308	; 0x904
 8011378:	f7ff fead 	bl	80110d6 <RadioWrite>
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 801137c:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
 8011380:	f640 1005 	movw	r0, #2309	; 0x905
 8011384:	f7ff fea7 	bl	80110d6 <RadioWrite>
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 8011388:	f640 1002 	movw	r0, #2306	; 0x902
 801138c:	f7ff febe 	bl	801110c <RadioRead>
 8011390:	f040 0101 	orr.w	r1, r0, #1
 8011394:	b2c9      	uxtb	r1, r1
 8011396:	f640 1002 	movw	r0, #2306	; 0x902
 801139a:	f7ff fe9c 	bl	80110d6 <RadioWrite>
          SubgRf.RxDcPreambleDetectTimeout = 0;
 801139e:	2200      	movs	r2, #0
 80113a0:	65a2      	str	r2, [r4, #88]	; 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80113a2:	4613      	mov	r3, r2
 80113a4:	f240 2162 	movw	r1, #610	; 0x262
 80113a8:	4608      	mov	r0, r1
 80113aa:	f000 fd92 	bl	8011ed2 <SUBGRF_SetDioIrqParams>
 80113ae:	e012      	b.n	80113d6 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 80113b0:	4b14      	ldr	r3, [pc, #80]	; (8011404 <RadioIrqProcess+0x2cc>)
 80113b2:	2201      	movs	r2, #1
 80113b4:	2100      	movs	r1, #0
 80113b6:	2002      	movs	r0, #2
 80113b8:	f001 fb92 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 80113bc:	f001 faa9 	bl	8012912 <RFW_Is_Init>
 80113c0:	2801      	cmp	r0, #1
 80113c2:	d108      	bne.n	80113d6 <RadioIrqProcess+0x29e>
            RFW_ReceivePayload( );
 80113c4:	f001 fab1 	bl	801292a <RFW_ReceivePayload>
 80113c8:	e005      	b.n	80113d6 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 80113ca:	4b0f      	ldr	r3, [pc, #60]	; (8011408 <RadioIrqProcess+0x2d0>)
 80113cc:	2201      	movs	r2, #1
 80113ce:	2100      	movs	r1, #0
 80113d0:	2002      	movs	r0, #2
 80113d2:	f001 fb85 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
}
 80113d6:	b003      	add	sp, #12
 80113d8:	bd30      	pop	{r4, r5, pc}
 80113da:	bf00      	nop
 80113dc:	20001150 	.word	0x20001150
 80113e0:	08014e9c 	.word	0x08014e9c
 80113e4:	48000400 	.word	0x48000400
 80113e8:	20001138 	.word	0x20001138
 80113ec:	20001134 	.word	0x20001134
 80113f0:	200011ac 	.word	0x200011ac
 80113f4:	20001034 	.word	0x20001034
 80113f8:	20001174 	.word	0x20001174
 80113fc:	10624dd3 	.word	0x10624dd3
 8011400:	08014eb0 	.word	0x08014eb0
 8011404:	08014ebc 	.word	0x08014ebc
 8011408:	08014ec8 	.word	0x08014ec8
        TimerStop( &RxTimeoutTimer );
 801140c:	4817      	ldr	r0, [pc, #92]	; (801146c <RadioIrqProcess+0x334>)
 801140e:	f001 febb 	bl	8013188 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8011412:	4b17      	ldr	r3, [pc, #92]	; (8011470 <RadioIrqProcess+0x338>)
 8011414:	785b      	ldrb	r3, [r3, #1]
 8011416:	b173      	cbz	r3, 8011436 <RadioIrqProcess+0x2fe>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8011418:	4b16      	ldr	r3, [pc, #88]	; (8011474 <RadioIrqProcess+0x33c>)
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	2b00      	cmp	r3, #0
 801141e:	d0da      	beq.n	80113d6 <RadioIrqProcess+0x29e>
 8011420:	68db      	ldr	r3, [r3, #12]
 8011422:	2b00      	cmp	r3, #0
 8011424:	d0d7      	beq.n	80113d6 <RadioIrqProcess+0x29e>
            RadioEvents->RxTimeout( );
 8011426:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8011428:	4b13      	ldr	r3, [pc, #76]	; (8011478 <RadioIrqProcess+0x340>)
 801142a:	2201      	movs	r2, #1
 801142c:	2100      	movs	r1, #0
 801142e:	2002      	movs	r0, #2
 8011430:	f001 fb56 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
 8011434:	e7cf      	b.n	80113d6 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 8011436:	2000      	movs	r0, #0
 8011438:	f000 fc22 	bl	8011c80 <SUBGRF_SetStandby>
 801143c:	e7ec      	b.n	8011418 <RadioIrqProcess+0x2e0>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 801143e:	4b0f      	ldr	r3, [pc, #60]	; (801147c <RadioIrqProcess+0x344>)
 8011440:	2201      	movs	r2, #1
 8011442:	2100      	movs	r1, #0
 8011444:	2002      	movs	r0, #2
 8011446:	f001 fb4b 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 801144a:	4b09      	ldr	r3, [pc, #36]	; (8011470 <RadioIrqProcess+0x338>)
 801144c:	785b      	ldrb	r3, [r3, #1]
 801144e:	b143      	cbz	r3, 8011462 <RadioIrqProcess+0x32a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8011450:	4b08      	ldr	r3, [pc, #32]	; (8011474 <RadioIrqProcess+0x33c>)
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d0be      	beq.n	80113d6 <RadioIrqProcess+0x29e>
 8011458:	691b      	ldr	r3, [r3, #16]
 801145a:	2b00      	cmp	r3, #0
 801145c:	d0bb      	beq.n	80113d6 <RadioIrqProcess+0x29e>
            RadioEvents->RxError( );
 801145e:	4798      	blx	r3
}
 8011460:	e7b9      	b.n	80113d6 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 8011462:	2000      	movs	r0, #0
 8011464:	f000 fc0c 	bl	8011c80 <SUBGRF_SetStandby>
 8011468:	e7f2      	b.n	8011450 <RadioIrqProcess+0x318>
 801146a:	bf00      	nop
 801146c:	20001138 	.word	0x20001138
 8011470:	20001150 	.word	0x20001150
 8011474:	20001134 	.word	0x20001134
 8011478:	08014ed4 	.word	0x08014ed4
 801147c:	08014ee0 	.word	0x08014ee0

08011480 <RadioOnDioIrq>:
{
 8011480:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 8011482:	4b03      	ldr	r3, [pc, #12]	; (8011490 <RadioOnDioIrq+0x10>)
 8011484:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
    RADIO_IRQ_PROCESS();
 8011488:	f7ff fe56 	bl	8011138 <RadioIrqProcess>
}
 801148c:	bd08      	pop	{r3, pc}
 801148e:	bf00      	nop
 8011490:	20001150 	.word	0x20001150

08011494 <RadioGetWakeupTime>:
{
 8011494:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8011496:	f001 f982 	bl	801279e <SUBGRF_GetRadioWakeUpTime>
}
 801149a:	3003      	adds	r0, #3
 801149c:	bd08      	pop	{r3, pc}
	...

080114a0 <RadioSetMaxPayloadLength>:
{
 80114a0:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 80114a2:	2801      	cmp	r0, #1
 80114a4:	d004      	beq.n	80114b0 <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 80114a6:	4b0a      	ldr	r3, [pc, #40]	; (80114d0 <RadioSetMaxPayloadLength+0x30>)
 80114a8:	7d5b      	ldrb	r3, [r3, #21]
 80114aa:	2b01      	cmp	r3, #1
 80114ac:	d008      	beq.n	80114c0 <RadioSetMaxPayloadLength+0x20>
}
 80114ae:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 80114b0:	4b08      	ldr	r3, [pc, #32]	; (80114d4 <RadioSetMaxPayloadLength+0x34>)
 80114b2:	7019      	strb	r1, [r3, #0]
 80114b4:	4806      	ldr	r0, [pc, #24]	; (80114d0 <RadioSetMaxPayloadLength+0x30>)
 80114b6:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80114b8:	300e      	adds	r0, #14
 80114ba:	f001 f843 	bl	8012544 <SUBGRF_SetPacketParams>
 80114be:	e7f6      	b.n	80114ae <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 80114c0:	4b04      	ldr	r3, [pc, #16]	; (80114d4 <RadioSetMaxPayloadLength+0x34>)
 80114c2:	7019      	strb	r1, [r3, #0]
 80114c4:	4802      	ldr	r0, [pc, #8]	; (80114d0 <RadioSetMaxPayloadLength+0x30>)
 80114c6:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80114c8:	300e      	adds	r0, #14
 80114ca:	f001 f83b 	bl	8012544 <SUBGRF_SetPacketParams>
}
 80114ce:	e7ee      	b.n	80114ae <RadioSetMaxPayloadLength+0xe>
 80114d0:	20001150 	.word	0x20001150
 80114d4:	2000010c 	.word	0x2000010c

080114d8 <RadioReadRegisters>:
{
 80114d8:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 80114da:	f001 f8a5 	bl	8012628 <SUBGRF_ReadRegisters>
}
 80114de:	bd08      	pop	{r3, pc}

080114e0 <RadioWriteRegisters>:
{
 80114e0:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 80114e2:	f000 ffed 	bl	80124c0 <SUBGRF_WriteRegisters>
}
 80114e6:	bd08      	pop	{r3, pc}

080114e8 <RadioRssi>:
{
 80114e8:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 80114ea:	f000 fd6b 	bl	8011fc4 <SUBGRF_GetRssiInst>
}
 80114ee:	b200      	sxth	r0, r0
 80114f0:	bd08      	pop	{r3, pc}
	...

080114f4 <RadioSetTxContinuousWave>:
{
 80114f4:	b538      	push	{r3, r4, r5, lr}
 80114f6:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 80114f8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80114fc:	fb02 f404 	mul.w	r4, r2, r4
    SUBGRF_SetRfFrequency( freq );
 8011500:	f000 fd20 	bl	8011f44 <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 8011504:	4628      	mov	r0, r5
 8011506:	f001 f933 	bl	8012770 <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 801150a:	2101      	movs	r1, #1
 801150c:	f001 f91c 	bl	8012748 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8011510:	f000 fc34 	bl	8011d7c <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8011514:	4d04      	ldr	r5, [pc, #16]	; (8011528 <RadioSetTxContinuousWave+0x34>)
 8011516:	4621      	mov	r1, r4
 8011518:	4628      	mov	r0, r5
 801151a:	f001 fed5 	bl	80132c8 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801151e:	4628      	mov	r0, r5
 8011520:	f001 fe8c 	bl	801323c <UTIL_TIMER_Start>
}
 8011524:	bd38      	pop	{r3, r4, r5, pc}
 8011526:	bf00      	nop
 8011528:	200011ac 	.word	0x200011ac

0801152c <RadioSetChannel>:
{
 801152c:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 801152e:	f000 fd09 	bl	8011f44 <SUBGRF_SetRfFrequency>
}
 8011532:	bd08      	pop	{r3, pc}

08011534 <RadioStartCad>:
{
 8011534:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8011536:	2100      	movs	r1, #0
 8011538:	4b07      	ldr	r3, [pc, #28]	; (8011558 <RadioStartCad+0x24>)
 801153a:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 801153e:	f001 f903 	bl	8012748 <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8011542:	2300      	movs	r3, #0
 8011544:	461a      	mov	r2, r3
 8011546:	f44f 71c0 	mov.w	r1, #384	; 0x180
 801154a:	4608      	mov	r0, r1
 801154c:	f000 fcc1 	bl	8011ed2 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 8011550:	f000 fc08 	bl	8011d64 <SUBGRF_SetCad>
}
 8011554:	bd08      	pop	{r3, pc}
 8011556:	bf00      	nop
 8011558:	20001150 	.word	0x20001150

0801155c <RadioRx>:
{
 801155c:	b538      	push	{r3, r4, r5, lr}
 801155e:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init( ) )
 8011560:	f001 f9d7 	bl	8012912 <RFW_Is_Init>
 8011564:	2801      	cmp	r0, #1
 8011566:	d019      	beq.n	801159c <RadioRx+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8011568:	2300      	movs	r3, #0
 801156a:	461a      	mov	r2, r3
 801156c:	f240 2162 	movw	r1, #610	; 0x262
 8011570:	4608      	mov	r0, r1
 8011572:	f000 fcae 	bl	8011ed2 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 8011576:	b9a4      	cbnz	r4, 80115a2 <RadioRx+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8011578:	4c11      	ldr	r4, [pc, #68]	; (80115c0 <RadioRx+0x64>)
 801157a:	2100      	movs	r1, #0
 801157c:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 801157e:	4b11      	ldr	r3, [pc, #68]	; (80115c4 <RadioRx+0x68>)
 8011580:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011584:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8011586:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 801158a:	f001 f8dd 	bl	8012748 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 801158e:	7863      	ldrb	r3, [r4, #1]
 8011590:	b183      	cbz	r3, 80115b4 <RadioRx+0x58>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8011592:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8011596:	f000 fba7 	bl	8011ce8 <SUBGRF_SetRx>
}
 801159a:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit( );
 801159c:	f001 f9c1 	bl	8012922 <RFW_ReceiveInit>
 80115a0:	e7e9      	b.n	8011576 <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 80115a2:	4d09      	ldr	r5, [pc, #36]	; (80115c8 <RadioRx+0x6c>)
 80115a4:	4621      	mov	r1, r4
 80115a6:	4628      	mov	r0, r5
 80115a8:	f001 fe8e 	bl	80132c8 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80115ac:	4628      	mov	r0, r5
 80115ae:	f001 fe45 	bl	801323c <UTIL_TIMER_Start>
 80115b2:	e7e1      	b.n	8011578 <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 80115b4:	4b02      	ldr	r3, [pc, #8]	; (80115c0 <RadioRx+0x64>)
 80115b6:	6898      	ldr	r0, [r3, #8]
 80115b8:	0180      	lsls	r0, r0, #6
 80115ba:	f000 fb95 	bl	8011ce8 <SUBGRF_SetRx>
}
 80115be:	e7ec      	b.n	801159a <RadioRx+0x3e>
 80115c0:	20001150 	.word	0x20001150
 80115c4:	48000400 	.word	0x48000400
 80115c8:	20001138 	.word	0x20001138

080115cc <RadioSleep>:
{
 80115cc:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 80115ce:	f04f 0004 	mov.w	r0, #4
 80115d2:	f000 fe8d 	bl	80122f0 <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 80115d6:	2002      	movs	r0, #2
 80115d8:	f7f0 fa82 	bl	8001ae0 <HAL_Delay>
}
 80115dc:	bd08      	pop	{r3, pc}
	...

080115e0 <RadioSend>:
{
 80115e0:	b570      	push	{r4, r5, r6, lr}
 80115e2:	b082      	sub	sp, #8
 80115e4:	4605      	mov	r5, r0
 80115e6:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 80115e8:	2300      	movs	r3, #0
 80115ea:	461a      	mov	r2, r3
 80115ec:	f240 2101 	movw	r1, #513	; 0x201
 80115f0:	4608      	mov	r0, r1
 80115f2:	f000 fc6e 	bl	8011ed2 <SUBGRF_SetDioIrqParams>
 80115f6:	4b3e      	ldr	r3, [pc, #248]	; (80116f0 <RadioSend+0x110>)
 80115f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80115fc:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80115fe:	4e3d      	ldr	r6, [pc, #244]	; (80116f4 <RadioSend+0x114>)
 8011600:	2101      	movs	r1, #1
 8011602:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 8011606:	f001 f89f 	bl	8012748 <SUBGRF_SetSwitch>
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 801160a:	7833      	ldrb	r3, [r6, #0]
 801160c:	2b01      	cmp	r3, #1
 801160e:	d103      	bne.n	8011618 <RadioSend+0x38>
 8011610:	f896 3051 	ldrb.w	r3, [r6, #81]	; 0x51
 8011614:	2b06      	cmp	r3, #6
 8011616:	d012      	beq.n	801163e <RadioSend+0x5e>
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8011618:	f640 0089 	movw	r0, #2185	; 0x889
 801161c:	f000 fe0e 	bl	801223c <SUBGRF_ReadRegister>
 8011620:	f040 0104 	orr.w	r1, r0, #4
 8011624:	b2c9      	uxtb	r1, r1
 8011626:	f640 0089 	movw	r0, #2185	; 0x889
 801162a:	f000 fd15 	bl	8012058 <SUBGRF_WriteRegister>
    switch( SubgRf.Modem )
 801162e:	4b31      	ldr	r3, [pc, #196]	; (80116f4 <RadioSend+0x114>)
 8011630:	781b      	ldrb	r3, [r3, #0]
 8011632:	2b03      	cmp	r3, #3
 8011634:	d818      	bhi.n	8011668 <RadioSend+0x88>
 8011636:	e8df f003 	tbb	[pc, r3]
 801163a:	0d22      	.short	0x0d22
 801163c:	4d22      	.short	0x4d22
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801163e:	f640 0089 	movw	r0, #2185	; 0x889
 8011642:	f000 fdfb 	bl	801223c <SUBGRF_ReadRegister>
 8011646:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 801164a:	f640 0089 	movw	r0, #2185	; 0x889
 801164e:	f000 fd03 	bl	8012058 <SUBGRF_WriteRegister>
 8011652:	e7ec      	b.n	801162e <RadioSend+0x4e>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8011654:	4827      	ldr	r0, [pc, #156]	; (80116f4 <RadioSend+0x114>)
 8011656:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011658:	300e      	adds	r0, #14
 801165a:	f000 ff73 	bl	8012544 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801165e:	2200      	movs	r2, #0
 8011660:	4621      	mov	r1, r4
 8011662:	4628      	mov	r0, r5
 8011664:	f001 f83d 	bl	80126e2 <SUBGRF_SendPayload>
    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8011668:	4c23      	ldr	r4, [pc, #140]	; (80116f8 <RadioSend+0x118>)
 801166a:	4b22      	ldr	r3, [pc, #136]	; (80116f4 <RadioSend+0x114>)
 801166c:	6859      	ldr	r1, [r3, #4]
 801166e:	4620      	mov	r0, r4
 8011670:	f001 fe2a 	bl	80132c8 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8011674:	4620      	mov	r0, r4
 8011676:	f001 fde1 	bl	801323c <UTIL_TIMER_Start>
}
 801167a:	b002      	add	sp, #8
 801167c:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 801167e:	f001 f948 	bl	8012912 <RFW_Is_Init>
 8011682:	2801      	cmp	r0, #1
 8011684:	d00a      	beq.n	801169c <RadioSend+0xbc>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8011686:	481b      	ldr	r0, [pc, #108]	; (80116f4 <RadioSend+0x114>)
 8011688:	7584      	strb	r4, [r0, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801168a:	300e      	adds	r0, #14
 801168c:	f000 ff5a 	bl	8012544 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8011690:	2200      	movs	r2, #0
 8011692:	4621      	mov	r1, r4
 8011694:	4628      	mov	r0, r5
 8011696:	f001 f824 	bl	80126e2 <SUBGRF_SendPayload>
 801169a:	e7e5      	b.n	8011668 <RadioSend+0x88>
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 801169c:	f10d 0207 	add.w	r2, sp, #7
 80116a0:	4621      	mov	r1, r4
 80116a2:	4628      	mov	r0, r5
 80116a4:	f001 f93a 	bl	801291c <RFW_TransmitInit>
 80116a8:	b968      	cbnz	r0, 80116c6 <RadioSend+0xe6>
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 80116aa:	4812      	ldr	r0, [pc, #72]	; (80116f4 <RadioSend+0x114>)
 80116ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80116b0:	7583      	strb	r3, [r0, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80116b2:	300e      	adds	r0, #14
 80116b4:	f000 ff46 	bl	8012544 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 80116b8:	2200      	movs	r2, #0
 80116ba:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80116be:	4628      	mov	r0, r5
 80116c0:	f001 f80f 	bl	80126e2 <SUBGRF_SendPayload>
 80116c4:	e7d0      	b.n	8011668 <RadioSend+0x88>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 80116c6:	4b0d      	ldr	r3, [pc, #52]	; (80116fc <RadioSend+0x11c>)
 80116c8:	2201      	movs	r2, #1
 80116ca:	2100      	movs	r1, #0
 80116cc:	2002      	movs	r0, #2
 80116ce:	f001 fa07 	bl	8012ae0 <UTIL_ADV_TRACE_COND_FSend>
                return;
 80116d2:	e7d2      	b.n	801167a <RadioSend+0x9a>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80116d4:	4807      	ldr	r0, [pc, #28]	; (80116f4 <RadioSend+0x114>)
 80116d6:	2302      	movs	r3, #2
 80116d8:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 80116da:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80116dc:	300e      	adds	r0, #14
 80116de:	f000 ff31 	bl	8012544 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80116e2:	2200      	movs	r2, #0
 80116e4:	4621      	mov	r1, r4
 80116e6:	4628      	mov	r0, r5
 80116e8:	f000 fffb 	bl	80126e2 <SUBGRF_SendPayload>
            break;
 80116ec:	e7bc      	b.n	8011668 <RadioSend+0x88>
 80116ee:	bf00      	nop
 80116f0:	48000400 	.word	0x48000400
 80116f4:	20001150 	.word	0x20001150
 80116f8:	200011ac 	.word	0x200011ac
 80116fc:	08014ef0 	.word	0x08014ef0

08011700 <RadioRandom>:
{
 8011700:	b508      	push	{r3, lr}
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8011702:	2300      	movs	r3, #0
 8011704:	461a      	mov	r2, r3
 8011706:	4619      	mov	r1, r3
 8011708:	4618      	mov	r0, r3
 801170a:	f000 fbe2 	bl	8011ed2 <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 801170e:	f000 ff9b 	bl	8012648 <SUBGRF_GetRandom>
}
 8011712:	bd08      	pop	{r3, pc}

08011714 <RadioSetModem>:
{
 8011714:	b510      	push	{r4, lr}
 8011716:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 8011718:	4b14      	ldr	r3, [pc, #80]	; (801176c <RadioSetModem+0x58>)
 801171a:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem( modem );
 801171c:	f001 f906 	bl	801292c <RFW_SetRadioModem>
    switch( modem )
 8011720:	2c01      	cmp	r4, #1
 8011722:	d010      	beq.n	8011746 <RadioSetModem+0x32>
 8011724:	2c03      	cmp	r4, #3
 8011726:	d01a      	beq.n	801175e <RadioSetModem+0x4a>
 8011728:	b134      	cbz	r4, 8011738 <RadioSetModem+0x24>
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 801172a:	2003      	movs	r0, #3
 801172c:	f000 fce4 	bl	80120f8 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8011730:	4b0e      	ldr	r3, [pc, #56]	; (801176c <RadioSetModem+0x58>)
 8011732:	2200      	movs	r2, #0
 8011734:	735a      	strb	r2, [r3, #13]
}
 8011736:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8011738:	2000      	movs	r0, #0
 801173a:	f000 fcdd 	bl	80120f8 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 801173e:	4b0b      	ldr	r3, [pc, #44]	; (801176c <RadioSetModem+0x58>)
 8011740:	2200      	movs	r2, #0
 8011742:	735a      	strb	r2, [r3, #13]
        break;
 8011744:	e7f7      	b.n	8011736 <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8011746:	2001      	movs	r0, #1
 8011748:	f000 fcd6 	bl	80120f8 <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 801174c:	4b07      	ldr	r3, [pc, #28]	; (801176c <RadioSetModem+0x58>)
 801174e:	7b5a      	ldrb	r2, [r3, #13]
 8011750:	7b18      	ldrb	r0, [r3, #12]
 8011752:	4282      	cmp	r2, r0
 8011754:	d0ef      	beq.n	8011736 <RadioSetModem+0x22>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8011756:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8011758:	f000 f80a 	bl	8011770 <RadioSetPublicNetwork>
 801175c:	e7eb      	b.n	8011736 <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801175e:	2002      	movs	r0, #2
 8011760:	f000 fcca 	bl	80120f8 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8011764:	4b01      	ldr	r3, [pc, #4]	; (801176c <RadioSetModem+0x58>)
 8011766:	2200      	movs	r2, #0
 8011768:	735a      	strb	r2, [r3, #13]
}
 801176a:	e7e4      	b.n	8011736 <RadioSetModem+0x22>
 801176c:	20001150 	.word	0x20001150

08011770 <RadioSetPublicNetwork>:
{
 8011770:	b510      	push	{r4, lr}
 8011772:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8011774:	4b0e      	ldr	r3, [pc, #56]	; (80117b0 <RadioSetPublicNetwork+0x40>)
 8011776:	7318      	strb	r0, [r3, #12]
 8011778:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 801177a:	2001      	movs	r0, #1
 801177c:	f7ff ffca 	bl	8011714 <RadioSetModem>
    if( enable == true )
 8011780:	b154      	cbz	r4, 8011798 <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8011782:	2134      	movs	r1, #52	; 0x34
 8011784:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8011788:	f000 fc66 	bl	8012058 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 801178c:	2144      	movs	r1, #68	; 0x44
 801178e:	f240 7041 	movw	r0, #1857	; 0x741
 8011792:	f000 fc61 	bl	8012058 <SUBGRF_WriteRegister>
}
 8011796:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8011798:	2114      	movs	r1, #20
 801179a:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801179e:	f000 fc5b 	bl	8012058 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 80117a2:	2124      	movs	r1, #36	; 0x24
 80117a4:	f240 7041 	movw	r0, #1857	; 0x741
 80117a8:	f000 fc56 	bl	8012058 <SUBGRF_WriteRegister>
}
 80117ac:	e7f3      	b.n	8011796 <RadioSetPublicNetwork+0x26>
 80117ae:	bf00      	nop
 80117b0:	20001150 	.word	0x20001150

080117b4 <RadioSetTxConfig>:
{
 80117b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117b8:	b083      	sub	sp, #12
 80117ba:	4604      	mov	r4, r0
 80117bc:	460e      	mov	r6, r1
 80117be:	4617      	mov	r7, r2
 80117c0:	461d      	mov	r5, r3
 80117c2:	f8bd 8038 	ldrh.w	r8, [sp, #56]	; 0x38
 80117c6:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
 80117ca:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 80117ce:	f001 f89f 	bl	8012910 <RFW_DeInit>
    switch( modem )
 80117d2:	b174      	cbz	r4, 80117f2 <RadioSetTxConfig+0x3e>
 80117d4:	2c01      	cmp	r4, #1
 80117d6:	d053      	beq.n	8011880 <RadioSetTxConfig+0xcc>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80117d8:	4630      	mov	r0, r6
 80117da:	f000 ffc9 	bl	8012770 <SUBGRF_SetRfTxPower>
 80117de:	4c51      	ldr	r4, [pc, #324]	; (8011924 <RadioSetTxConfig+0x170>)
 80117e0:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 80117e4:	f001 f899 	bl	801291a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80117e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80117ea:	6063      	str	r3, [r4, #4]
}
 80117ec:	b003      	add	sp, #12
 80117ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80117f2:	4c4c      	ldr	r4, [pc, #304]	; (8011924 <RadioSetTxConfig+0x170>)
 80117f4:	f04f 0b00 	mov.w	fp, #0
 80117f8:	f884 b038 	strb.w	fp, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80117fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80117fe:	63e3      	str	r3, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8011800:	230b      	movs	r3, #11
 8011802:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8011806:	4628      	mov	r0, r5
 8011808:	f001 f820 	bl	801284c <SUBGRF_GetFskBandwidthRegValue>
 801180c:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8011810:	6427      	str	r7, [r4, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8011812:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8011816:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801181a:	f8a4 8010 	strh.w	r8, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801181e:	2304      	movs	r3, #4
 8011820:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8011822:	2318      	movs	r3, #24
 8011824:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8011826:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801182a:	f089 0901 	eor.w	r9, r9, #1
 801182e:	f884 9015 	strb.w	r9, [r4, #21]
            if( crcOn == true )
 8011832:	f1ba 0f00 	cmp.w	sl, #0
 8011836:	d01f      	beq.n	8011878 <RadioSetTxConfig+0xc4>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8011838:	22f2      	movs	r2, #242	; 0xf2
 801183a:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801183c:	4c39      	ldr	r4, [pc, #228]	; (8011924 <RadioSetTxConfig+0x170>)
 801183e:	2301      	movs	r3, #1
 8011840:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8011842:	f7ff fc43 	bl	80110cc <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8011846:	2000      	movs	r0, #0
 8011848:	f7ff ff64 	bl	8011714 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801184c:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8011850:	f000 fc6c 	bl	801212c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011854:	f104 000e 	add.w	r0, r4, #14
 8011858:	f000 fe74 	bl	8012544 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801185c:	4a32      	ldr	r2, [pc, #200]	; (8011928 <RadioSetTxConfig+0x174>)
 801185e:	466b      	mov	r3, sp
 8011860:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011864:	e883 0003 	stmia.w	r3, {r0, r1}
 8011868:	4618      	mov	r0, r3
 801186a:	f000 fe39 	bl	80124e0 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801186e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8011872:	f000 fd5d 	bl	8012330 <SUBGRF_SetWhiteningSeed>
            break;
 8011876:	e7af      	b.n	80117d8 <RadioSetTxConfig+0x24>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8011878:	4b2a      	ldr	r3, [pc, #168]	; (8011924 <RadioSetTxConfig+0x170>)
 801187a:	2201      	movs	r2, #1
 801187c:	75da      	strb	r2, [r3, #23]
 801187e:	e7dd      	b.n	801183c <RadioSetTxConfig+0x88>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8011880:	4a28      	ldr	r2, [pc, #160]	; (8011924 <RadioSetTxConfig+0x170>)
 8011882:	2301      	movs	r3, #1
 8011884:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8011888:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801188a:	b2db      	uxtb	r3, r3
 801188c:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8011890:	4926      	ldr	r1, [pc, #152]	; (801192c <RadioSetTxConfig+0x178>)
 8011892:	5d49      	ldrb	r1, [r1, r5]
 8011894:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8011898:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 801189c:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80118a0:	b91d      	cbnz	r5, 80118aa <RadioSetTxConfig+0xf6>
 80118a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80118a4:	3a0b      	subs	r2, #11
 80118a6:	2a01      	cmp	r2, #1
 80118a8:	d92c      	bls.n	8011904 <RadioSetTxConfig+0x150>
 80118aa:	2d01      	cmp	r5, #1
 80118ac:	d027      	beq.n	80118fe <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80118ae:	4a1d      	ldr	r2, [pc, #116]	; (8011924 <RadioSetTxConfig+0x170>)
 80118b0:	2100      	movs	r1, #0
 80118b2:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80118b6:	4a1b      	ldr	r2, [pc, #108]	; (8011924 <RadioSetTxConfig+0x170>)
 80118b8:	2101      	movs	r1, #1
 80118ba:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80118bc:	3b05      	subs	r3, #5
 80118be:	b2db      	uxtb	r3, r3
 80118c0:	428b      	cmp	r3, r1
 80118c2:	d924      	bls.n	801190e <RadioSetTxConfig+0x15a>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80118c4:	4b17      	ldr	r3, [pc, #92]	; (8011924 <RadioSetTxConfig+0x170>)
 80118c6:	f8a3 801c 	strh.w	r8, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80118ca:	4c16      	ldr	r4, [pc, #88]	; (8011924 <RadioSetTxConfig+0x170>)
 80118cc:	f884 901e 	strb.w	r9, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80118d0:	4b17      	ldr	r3, [pc, #92]	; (8011930 <RadioSetTxConfig+0x17c>)
 80118d2:	781b      	ldrb	r3, [r3, #0]
 80118d4:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80118d6:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80118da:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80118de:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 80118e2:	f7ff fbf3 	bl	80110cc <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80118e6:	2001      	movs	r0, #1
 80118e8:	f7ff ff14 	bl	8011714 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80118ec:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80118f0:	f000 fc1c 	bl	801212c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80118f4:	f104 000e 	add.w	r0, r4, #14
 80118f8:	f000 fe24 	bl	8012544 <SUBGRF_SetPacketParams>
            break;
 80118fc:	e76c      	b.n	80117d8 <RadioSetTxConfig+0x24>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80118fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011900:	2a0c      	cmp	r2, #12
 8011902:	d1d4      	bne.n	80118ae <RadioSetTxConfig+0xfa>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8011904:	4a07      	ldr	r2, [pc, #28]	; (8011924 <RadioSetTxConfig+0x170>)
 8011906:	2101      	movs	r1, #1
 8011908:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 801190c:	e7d3      	b.n	80118b6 <RadioSetTxConfig+0x102>
                if( preambleLen < 12 )
 801190e:	f1b8 0f0b 	cmp.w	r8, #11
 8011912:	d803      	bhi.n	801191c <RadioSetTxConfig+0x168>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8011914:	4613      	mov	r3, r2
 8011916:	220c      	movs	r2, #12
 8011918:	839a      	strh	r2, [r3, #28]
 801191a:	e7d6      	b.n	80118ca <RadioSetTxConfig+0x116>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801191c:	4b01      	ldr	r3, [pc, #4]	; (8011924 <RadioSetTxConfig+0x170>)
 801191e:	f8a3 801c 	strh.w	r8, [r3, #28]
 8011922:	e7d2      	b.n	80118ca <RadioSetTxConfig+0x116>
 8011924:	20001150 	.word	0x20001150
 8011928:	080141b4 	.word	0x080141b4
 801192c:	08014f08 	.word	0x08014f08
 8011930:	2000010c 	.word	0x2000010c

08011934 <RadioSetRxConfig>:
{
 8011934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011938:	b085      	sub	sp, #20
 801193a:	4604      	mov	r4, r0
 801193c:	460d      	mov	r5, r1
 801193e:	4616      	mov	r6, r2
 8011940:	9301      	str	r3, [sp, #4]
 8011942:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
 8011946:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 801194a:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 801194e:	f89d b04c 	ldrb.w	fp, [sp, #76]	; 0x4c
 8011952:	f89d 805c 	ldrb.w	r8, [sp, #92]	; 0x5c
    SubgRf.RxContinuous = rxContinuous;
 8011956:	4b6e      	ldr	r3, [pc, #440]	; (8011b10 <RadioSetRxConfig+0x1dc>)
 8011958:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 801195c:	f000 ffd8 	bl	8012910 <RFW_DeInit>
    if( rxContinuous == true )
 8011960:	f1b8 0f00 	cmp.w	r8, #0
 8011964:	d001      	beq.n	801196a <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 8011966:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 801196a:	b14f      	cbz	r7, 8011980 <RadioSetRxConfig+0x4c>
        MaxPayloadLength = payloadLen;
 801196c:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8011970:	4b68      	ldr	r3, [pc, #416]	; (8011b14 <RadioSetRxConfig+0x1e0>)
 8011972:	701a      	strb	r2, [r3, #0]
    switch( modem )
 8011974:	b144      	cbz	r4, 8011988 <RadioSetRxConfig+0x54>
 8011976:	2c01      	cmp	r4, #1
 8011978:	d057      	beq.n	8011a2a <RadioSetRxConfig+0xf6>
}
 801197a:	b005      	add	sp, #20
 801197c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MaxPayloadLength = 0xFF;
 8011980:	4b64      	ldr	r3, [pc, #400]	; (8011b14 <RadioSetRxConfig+0x1e0>)
 8011982:	22ff      	movs	r2, #255	; 0xff
 8011984:	701a      	strb	r2, [r3, #0]
 8011986:	e7f5      	b.n	8011974 <RadioSetRxConfig+0x40>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8011988:	2000      	movs	r0, #0
 801198a:	f000 fa05 	bl	8011d98 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801198e:	4c60      	ldr	r4, [pc, #384]	; (8011b10 <RadioSetRxConfig+0x1dc>)
 8011990:	f04f 0800 	mov.w	r8, #0
 8011994:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8011998:	63e6      	str	r6, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801199a:	230b      	movs	r3, #11
 801199c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80119a0:	4628      	mov	r0, r5
 80119a2:	f000 ff53 	bl	801284c <SUBGRF_GetFskBandwidthRegValue>
 80119a6:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80119aa:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80119ae:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 80119b2:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80119b6:	2304      	movs	r3, #4
 80119b8:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80119ba:	2318      	movs	r3, #24
 80119bc:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80119be:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80119c2:	f087 0701 	eor.w	r7, r7, #1
 80119c6:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80119c8:	4b52      	ldr	r3, [pc, #328]	; (8011b14 <RadioSetRxConfig+0x1e0>)
 80119ca:	781b      	ldrb	r3, [r3, #0]
 80119cc:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 80119ce:	f1bb 0f00 	cmp.w	fp, #0
 80119d2:	d026      	beq.n	8011a22 <RadioSetRxConfig+0xee>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80119d4:	22f2      	movs	r2, #242	; 0xf2
 80119d6:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80119d8:	4c4d      	ldr	r4, [pc, #308]	; (8011b10 <RadioSetRxConfig+0x1dc>)
 80119da:	2301      	movs	r3, #1
 80119dc:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 80119de:	f7ff fb75 	bl	80110cc <RadioStandby>
            RadioSetModem( MODEM_FSK );
 80119e2:	2000      	movs	r0, #0
 80119e4:	f7ff fe96 	bl	8011714 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80119e8:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80119ec:	f000 fb9e 	bl	801212c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80119f0:	f104 000e 	add.w	r0, r4, #14
 80119f4:	f000 fda6 	bl	8012544 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80119f8:	4a47      	ldr	r2, [pc, #284]	; (8011b18 <RadioSetRxConfig+0x1e4>)
 80119fa:	ab02      	add	r3, sp, #8
 80119fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011a00:	e883 0003 	stmia.w	r3, {r0, r1}
 8011a04:	4618      	mov	r0, r3
 8011a06:	f000 fd6b 	bl	80124e0 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8011a0a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8011a0e:	f000 fc8f 	bl	8012330 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8011a12:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8011a16:	fb02 fa0a 	mul.w	sl, r2, sl
 8011a1a:	fbba f6f6 	udiv	r6, sl, r6
 8011a1e:	60a6      	str	r6, [r4, #8]
            break;
 8011a20:	e7ab      	b.n	801197a <RadioSetRxConfig+0x46>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8011a22:	4b3b      	ldr	r3, [pc, #236]	; (8011b10 <RadioSetRxConfig+0x1dc>)
 8011a24:	2201      	movs	r2, #1
 8011a26:	75da      	strb	r2, [r3, #23]
 8011a28:	e7d6      	b.n	80119d8 <RadioSetRxConfig+0xa4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8011a2a:	2000      	movs	r0, #0
 8011a2c:	f000 f9b4 	bl	8011d98 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8011a30:	4a37      	ldr	r2, [pc, #220]	; (8011b10 <RadioSetRxConfig+0x1dc>)
 8011a32:	2301      	movs	r3, #1
 8011a34:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8011a38:	b2f3      	uxtb	r3, r6
 8011a3a:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8011a3e:	4937      	ldr	r1, [pc, #220]	; (8011b1c <RadioSetRxConfig+0x1e8>)
 8011a40:	5d49      	ldrb	r1, [r1, r5]
 8011a42:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8011a46:	9901      	ldr	r1, [sp, #4]
 8011a48:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8011a4c:	b91d      	cbnz	r5, 8011a56 <RadioSetRxConfig+0x122>
 8011a4e:	f1a6 020b 	sub.w	r2, r6, #11
 8011a52:	2a01      	cmp	r2, #1
 8011a54:	d941      	bls.n	8011ada <RadioSetRxConfig+0x1a6>
 8011a56:	2d01      	cmp	r5, #1
 8011a58:	d03d      	beq.n	8011ad6 <RadioSetRxConfig+0x1a2>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8011a5a:	4a2d      	ldr	r2, [pc, #180]	; (8011b10 <RadioSetRxConfig+0x1dc>)
 8011a5c:	2100      	movs	r1, #0
 8011a5e:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8011a62:	4a2b      	ldr	r2, [pc, #172]	; (8011b10 <RadioSetRxConfig+0x1dc>)
 8011a64:	2101      	movs	r1, #1
 8011a66:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8011a68:	3b05      	subs	r3, #5
 8011a6a:	b2db      	uxtb	r3, r3
 8011a6c:	428b      	cmp	r3, r1
 8011a6e:	d939      	bls.n	8011ae4 <RadioSetRxConfig+0x1b0>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8011a70:	4b27      	ldr	r3, [pc, #156]	; (8011b10 <RadioSetRxConfig+0x1dc>)
 8011a72:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8011a76:	4c26      	ldr	r4, [pc, #152]	; (8011b10 <RadioSetRxConfig+0x1dc>)
 8011a78:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8011a7a:	4b26      	ldr	r3, [pc, #152]	; (8011b14 <RadioSetRxConfig+0x1e0>)
 8011a7c:	781b      	ldrb	r3, [r3, #0]
 8011a7e:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8011a80:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8011a84:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8011a88:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 8011a8c:	f7ff fb1e 	bl	80110cc <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8011a90:	2001      	movs	r0, #1
 8011a92:	f7ff fe3f 	bl	8011714 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8011a96:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8011a9a:	f000 fb47 	bl	801212c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011a9e:	f104 000e 	add.w	r0, r4, #14
 8011aa2:	f000 fd4f 	bl	8012544 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8011aa6:	fa5f f08a 	uxtb.w	r0, sl
 8011aaa:	f000 fb03 	bl	80120b4 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8011aae:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8011ab2:	2b01      	cmp	r3, #1
 8011ab4:	d021      	beq.n	8011afa <RadioSetRxConfig+0x1c6>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8011ab6:	f240 7036 	movw	r0, #1846	; 0x736
 8011aba:	f000 fbbf 	bl	801223c <SUBGRF_ReadRegister>
 8011abe:	f040 0104 	orr.w	r1, r0, #4
 8011ac2:	b2c9      	uxtb	r1, r1
 8011ac4:	f240 7036 	movw	r0, #1846	; 0x736
 8011ac8:	f000 fac6 	bl	8012058 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8011acc:	4b10      	ldr	r3, [pc, #64]	; (8011b10 <RadioSetRxConfig+0x1dc>)
 8011ace:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011ad2:	609a      	str	r2, [r3, #8]
}
 8011ad4:	e751      	b.n	801197a <RadioSetRxConfig+0x46>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8011ad6:	2e0c      	cmp	r6, #12
 8011ad8:	d1bf      	bne.n	8011a5a <RadioSetRxConfig+0x126>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8011ada:	4a0d      	ldr	r2, [pc, #52]	; (8011b10 <RadioSetRxConfig+0x1dc>)
 8011adc:	2101      	movs	r1, #1
 8011ade:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 8011ae2:	e7be      	b.n	8011a62 <RadioSetRxConfig+0x12e>
                if( preambleLen < 12 )
 8011ae4:	f1b9 0f0b 	cmp.w	r9, #11
 8011ae8:	d803      	bhi.n	8011af2 <RadioSetRxConfig+0x1be>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8011aea:	4613      	mov	r3, r2
 8011aec:	220c      	movs	r2, #12
 8011aee:	839a      	strh	r2, [r3, #28]
 8011af0:	e7c1      	b.n	8011a76 <RadioSetRxConfig+0x142>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8011af2:	4b07      	ldr	r3, [pc, #28]	; (8011b10 <RadioSetRxConfig+0x1dc>)
 8011af4:	f8a3 901c 	strh.w	r9, [r3, #28]
 8011af8:	e7bd      	b.n	8011a76 <RadioSetRxConfig+0x142>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8011afa:	f240 7036 	movw	r0, #1846	; 0x736
 8011afe:	f000 fb9d 	bl	801223c <SUBGRF_ReadRegister>
 8011b02:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8011b06:	f240 7036 	movw	r0, #1846	; 0x736
 8011b0a:	f000 faa5 	bl	8012058 <SUBGRF_WriteRegister>
 8011b0e:	e7dd      	b.n	8011acc <RadioSetRxConfig+0x198>
 8011b10:	20001150 	.word	0x20001150
 8011b14:	2000010c 	.word	0x2000010c
 8011b18:	080141b4 	.word	0x080141b4
 8011b1c:	08014f08 	.word	0x08014f08

08011b20 <RadioIsChannelFree>:
{
 8011b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b22:	b08b      	sub	sp, #44	; 0x2c
 8011b24:	4604      	mov	r4, r0
 8011b26:	460f      	mov	r7, r1
 8011b28:	4616      	mov	r6, r2
 8011b2a:	461d      	mov	r5, r3
    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8011b2c:	f7ff face 	bl	80110cc <RadioStandby>
    RadioSetModem( MODEM_FSK );
 8011b30:	2000      	movs	r0, #0
 8011b32:	f7ff fdef 	bl	8011714 <RadioSetModem>
    RadioSetChannel( freq );
 8011b36:	4620      	mov	r0, r4
 8011b38:	f7ff fcf8 	bl	801152c <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8011b3c:	2301      	movs	r3, #1
 8011b3e:	9309      	str	r3, [sp, #36]	; 0x24
 8011b40:	2400      	movs	r4, #0
 8011b42:	9408      	str	r4, [sp, #32]
 8011b44:	9407      	str	r4, [sp, #28]
 8011b46:	9406      	str	r4, [sp, #24]
 8011b48:	9405      	str	r4, [sp, #20]
 8011b4a:	9404      	str	r4, [sp, #16]
 8011b4c:	9403      	str	r4, [sp, #12]
 8011b4e:	9402      	str	r4, [sp, #8]
 8011b50:	2303      	movs	r3, #3
 8011b52:	9301      	str	r3, [sp, #4]
 8011b54:	9700      	str	r7, [sp, #0]
 8011b56:	4623      	mov	r3, r4
 8011b58:	f44f 7216 	mov.w	r2, #600	; 0x258
 8011b5c:	4639      	mov	r1, r7
 8011b5e:	4620      	mov	r0, r4
 8011b60:	f7ff fee8 	bl	8011934 <RadioSetRxConfig>
    RadioRx( 0 );
 8011b64:	4620      	mov	r0, r4
 8011b66:	f7ff fcf9 	bl	801155c <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8011b6a:	f7ff fc93 	bl	8011494 <RadioGetWakeupTime>
 8011b6e:	f7ef ffb7 	bl	8001ae0 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 8011b72:	f001 fac9 	bl	8013108 <UTIL_TIMER_GetCurrentTime>
 8011b76:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8011b78:	4620      	mov	r0, r4
 8011b7a:	f001 facf 	bl	801311c <UTIL_TIMER_GetElapsedTime>
 8011b7e:	42a8      	cmp	r0, r5
 8011b80:	d206      	bcs.n	8011b90 <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 8011b82:	2000      	movs	r0, #0
 8011b84:	f7ff fcb0 	bl	80114e8 <RadioRssi>
        if( rssi > rssiThresh )
 8011b88:	42b0      	cmp	r0, r6
 8011b8a:	ddf5      	ble.n	8011b78 <RadioIsChannelFree+0x58>
            status = false;
 8011b8c:	2400      	movs	r4, #0
 8011b8e:	e000      	b.n	8011b92 <RadioIsChannelFree+0x72>
    bool status = true;
 8011b90:	2401      	movs	r4, #1
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8011b92:	f7ff fa9b 	bl	80110cc <RadioStandby>
}
 8011b96:	4620      	mov	r0, r4
 8011b98:	b00b      	add	sp, #44	; 0x2c
 8011b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011b9c <RadioInit>:
{
 8011b9c:	b570      	push	{r4, r5, r6, lr}
 8011b9e:	b082      	sub	sp, #8
    RadioEvents = events;
 8011ba0:	4b1d      	ldr	r3, [pc, #116]	; (8011c18 <RadioInit+0x7c>)
 8011ba2:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 8011ba4:	4d1d      	ldr	r5, [pc, #116]	; (8011c1c <RadioInit+0x80>)
 8011ba6:	2400      	movs	r4, #0
 8011ba8:	706c      	strb	r4, [r5, #1]
    SubgRf.TxTimeout = 0;
 8011baa:	606c      	str	r4, [r5, #4]
    SubgRf.RxTimeout = 0;
 8011bac:	60ac      	str	r4, [r5, #8]
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8011bae:	65ac      	str	r4, [r5, #88]	; 0x58
    SUBGRF_Init( RadioOnDioIrq );
 8011bb0:	481b      	ldr	r0, [pc, #108]	; (8011c20 <RadioInit+0x84>)
 8011bb2:	f000 fb67 	bl	8012284 <SUBGRF_Init>
    SubgRf.PublicNetwork.Current = false;
 8011bb6:	736c      	strb	r4, [r5, #13]
    SubgRf.PublicNetwork.Previous = false;
 8011bb8:	732c      	strb	r4, [r5, #12]
    SUBGRF_SetRegulatorMode( );
 8011bba:	f000 f8fa 	bl	8011db2 <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8011bbe:	4621      	mov	r1, r4
 8011bc0:	4620      	mov	r0, r4
 8011bc2:	f000 f9f1 	bl	8011fa8 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8011bc6:	2204      	movs	r2, #4
 8011bc8:	4621      	mov	r1, r4
 8011bca:	2001      	movs	r0, #1
 8011bcc:	f000 fbc9 	bl	8012362 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8011bd0:	4623      	mov	r3, r4
 8011bd2:	4622      	mov	r2, r4
 8011bd4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011bd8:	4608      	mov	r0, r1
 8011bda:	f000 f97a 	bl	8011ed2 <SUBGRF_SetDioIrqParams>
    RadioSleep();
 8011bde:	f7ff fcf5 	bl	80115cc <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8011be2:	4e10      	ldr	r6, [pc, #64]	; (8011c24 <RadioInit+0x88>)
 8011be4:	9400      	str	r4, [sp, #0]
 8011be6:	4b10      	ldr	r3, [pc, #64]	; (8011c28 <RadioInit+0x8c>)
 8011be8:	4622      	mov	r2, r4
 8011bea:	f04f 31ff 	mov.w	r1, #4294967295
 8011bee:	4630      	mov	r0, r6
 8011bf0:	f001 fa6c 	bl	80130cc <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8011bf4:	4d0d      	ldr	r5, [pc, #52]	; (8011c2c <RadioInit+0x90>)
 8011bf6:	9400      	str	r4, [sp, #0]
 8011bf8:	4b0d      	ldr	r3, [pc, #52]	; (8011c30 <RadioInit+0x94>)
 8011bfa:	4622      	mov	r2, r4
 8011bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8011c00:	4628      	mov	r0, r5
 8011c02:	f001 fa63 	bl	80130cc <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8011c06:	4630      	mov	r0, r6
 8011c08:	f001 fabe 	bl	8013188 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8011c0c:	4628      	mov	r0, r5
 8011c0e:	f001 fabb 	bl	8013188 <UTIL_TIMER_Stop>
}
 8011c12:	b002      	add	sp, #8
 8011c14:	bd70      	pop	{r4, r5, r6, pc}
 8011c16:	bf00      	nop
 8011c18:	20001134 	.word	0x20001134
 8011c1c:	20001150 	.word	0x20001150
 8011c20:	08011481 	.word	0x08011481
 8011c24:	200011ac 	.word	0x200011ac
 8011c28:	08010fd9 	.word	0x08010fd9
 8011c2c:	20001138 	.word	0x20001138
 8011c30:	08011001 	.word	0x08011001

08011c34 <SUBGRF_WriteCommand>:
    CRITICAL_SECTION_END();
}

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8011c34:	b510      	push	{r4, lr}
 8011c36:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011c38:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011c3c:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8011c3e:	460a      	mov	r2, r1
 8011c40:	4601      	mov	r1, r0
 8011c42:	4803      	ldr	r0, [pc, #12]	; (8011c50 <SUBGRF_WriteCommand+0x1c>)
 8011c44:	f7f5 faa8 	bl	8007198 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011c48:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 8011c4c:	bd10      	pop	{r4, pc}
 8011c4e:	bf00      	nop
 8011c50:	20000284 	.word	0x20000284

08011c54 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8011c54:	b510      	push	{r4, lr}
 8011c56:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011c58:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011c5c:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8011c5e:	460a      	mov	r2, r1
 8011c60:	4601      	mov	r1, r0
 8011c62:	4803      	ldr	r0, [pc, #12]	; (8011c70 <SUBGRF_ReadCommand+0x1c>)
 8011c64:	f7f5 faee 	bl	8007244 <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011c68:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 8011c6c:	bd10      	pop	{r4, pc}
 8011c6e:	bf00      	nop
 8011c70:	20000284 	.word	0x20000284

08011c74 <SUBGRF_GetOperatingMode>:
}
 8011c74:	4b01      	ldr	r3, [pc, #4]	; (8011c7c <SUBGRF_GetOperatingMode+0x8>)
 8011c76:	7818      	ldrb	r0, [r3, #0]
 8011c78:	4770      	bx	lr
 8011c7a:	bf00      	nop
 8011c7c:	200011ca 	.word	0x200011ca

08011c80 <SUBGRF_SetStandby>:
{
 8011c80:	b500      	push	{lr}
 8011c82:	b083      	sub	sp, #12
 8011c84:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8011c88:	2201      	movs	r2, #1
 8011c8a:	f10d 0107 	add.w	r1, sp, #7
 8011c8e:	2080      	movs	r0, #128	; 0x80
 8011c90:	f7ff ffd0 	bl	8011c34 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8011c94:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011c98:	b92b      	cbnz	r3, 8011ca6 <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 8011c9a:	4b05      	ldr	r3, [pc, #20]	; (8011cb0 <SUBGRF_SetStandby+0x30>)
 8011c9c:	2201      	movs	r2, #1
 8011c9e:	701a      	strb	r2, [r3, #0]
}
 8011ca0:	b003      	add	sp, #12
 8011ca2:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 8011ca6:	4b02      	ldr	r3, [pc, #8]	; (8011cb0 <SUBGRF_SetStandby+0x30>)
 8011ca8:	2202      	movs	r2, #2
 8011caa:	701a      	strb	r2, [r3, #0]
}
 8011cac:	e7f8      	b.n	8011ca0 <SUBGRF_SetStandby+0x20>
 8011cae:	bf00      	nop
 8011cb0:	200011ca 	.word	0x200011ca

08011cb4 <SUBGRF_SetTx>:
{
 8011cb4:	b500      	push	{lr}
 8011cb6:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 8011cb8:	4b0a      	ldr	r3, [pc, #40]	; (8011ce4 <SUBGRF_SetTx+0x30>)
 8011cba:	2204      	movs	r2, #4
 8011cbc:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8011cbe:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8011cc2:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8011cc6:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8011cca:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8011cce:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8011cd2:	2203      	movs	r2, #3
 8011cd4:	a901      	add	r1, sp, #4
 8011cd6:	2083      	movs	r0, #131	; 0x83
 8011cd8:	f7ff ffac 	bl	8011c34 <SUBGRF_WriteCommand>
}
 8011cdc:	b003      	add	sp, #12
 8011cde:	f85d fb04 	ldr.w	pc, [sp], #4
 8011ce2:	bf00      	nop
 8011ce4:	200011ca 	.word	0x200011ca

08011ce8 <SUBGRF_SetRx>:
{
 8011ce8:	b500      	push	{lr}
 8011cea:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 8011cec:	4b0a      	ldr	r3, [pc, #40]	; (8011d18 <SUBGRF_SetRx+0x30>)
 8011cee:	2205      	movs	r2, #5
 8011cf0:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8011cf2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8011cf6:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8011cfa:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8011cfe:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8011d02:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8011d06:	2203      	movs	r2, #3
 8011d08:	a901      	add	r1, sp, #4
 8011d0a:	2082      	movs	r0, #130	; 0x82
 8011d0c:	f7ff ff92 	bl	8011c34 <SUBGRF_WriteCommand>
}
 8011d10:	b003      	add	sp, #12
 8011d12:	f85d fb04 	ldr.w	pc, [sp], #4
 8011d16:	bf00      	nop
 8011d18:	200011ca 	.word	0x200011ca

08011d1c <SUBGRF_SetRxDutyCycle>:
{
 8011d1c:	b500      	push	{lr}
 8011d1e:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8011d20:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8011d24:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8011d28:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8011d2c:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8011d30:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8011d34:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8011d38:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8011d3c:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8011d40:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8011d44:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8011d48:	2206      	movs	r2, #6
 8011d4a:	4669      	mov	r1, sp
 8011d4c:	2094      	movs	r0, #148	; 0x94
 8011d4e:	f7ff ff71 	bl	8011c34 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8011d52:	4b03      	ldr	r3, [pc, #12]	; (8011d60 <SUBGRF_SetRxDutyCycle+0x44>)
 8011d54:	2206      	movs	r2, #6
 8011d56:	701a      	strb	r2, [r3, #0]
}
 8011d58:	b003      	add	sp, #12
 8011d5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8011d5e:	bf00      	nop
 8011d60:	200011ca 	.word	0x200011ca

08011d64 <SUBGRF_SetCad>:
{
 8011d64:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8011d66:	2200      	movs	r2, #0
 8011d68:	4611      	mov	r1, r2
 8011d6a:	20c5      	movs	r0, #197	; 0xc5
 8011d6c:	f7ff ff62 	bl	8011c34 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8011d70:	4b01      	ldr	r3, [pc, #4]	; (8011d78 <SUBGRF_SetCad+0x14>)
 8011d72:	2207      	movs	r2, #7
 8011d74:	701a      	strb	r2, [r3, #0]
}
 8011d76:	bd08      	pop	{r3, pc}
 8011d78:	200011ca 	.word	0x200011ca

08011d7c <SUBGRF_SetTxContinuousWave>:
{
 8011d7c:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8011d7e:	2200      	movs	r2, #0
 8011d80:	4611      	mov	r1, r2
 8011d82:	20d1      	movs	r0, #209	; 0xd1
 8011d84:	f7ff ff56 	bl	8011c34 <SUBGRF_WriteCommand>
}
 8011d88:	bd08      	pop	{r3, pc}

08011d8a <SUBGRF_SetTxInfinitePreamble>:
{
 8011d8a:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8011d8c:	2200      	movs	r2, #0
 8011d8e:	4611      	mov	r1, r2
 8011d90:	20d2      	movs	r0, #210	; 0xd2
 8011d92:	f7ff ff4f 	bl	8011c34 <SUBGRF_WriteCommand>
}
 8011d96:	bd08      	pop	{r3, pc}

08011d98 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 8011d98:	b500      	push	{lr}
 8011d9a:	b083      	sub	sp, #12
 8011d9c:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8011da0:	2201      	movs	r2, #1
 8011da2:	f10d 0107 	add.w	r1, sp, #7
 8011da6:	209f      	movs	r0, #159	; 0x9f
 8011da8:	f7ff ff44 	bl	8011c34 <SUBGRF_WriteCommand>
}
 8011dac:	b003      	add	sp, #12
 8011dae:	f85d fb04 	ldr.w	pc, [sp], #4

08011db2 <SUBGRF_SetRegulatorMode>:
{
 8011db2:	b500      	push	{lr}
 8011db4:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8011db6:	f7f1 f813 	bl	8002de0 <RBI_IsDCDC>
 8011dba:	2801      	cmp	r0, #1
 8011dbc:	d00b      	beq.n	8011dd6 <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 8011dbe:	2300      	movs	r3, #0
 8011dc0:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8011dc4:	2201      	movs	r2, #1
 8011dc6:	f10d 0107 	add.w	r1, sp, #7
 8011dca:	2096      	movs	r0, #150	; 0x96
 8011dcc:	f7ff ff32 	bl	8011c34 <SUBGRF_WriteCommand>
}
 8011dd0:	b003      	add	sp, #12
 8011dd2:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 8011dd6:	2301      	movs	r3, #1
 8011dd8:	f88d 3007 	strb.w	r3, [sp, #7]
 8011ddc:	e7f2      	b.n	8011dc4 <SUBGRF_SetRegulatorMode+0x12>

08011dde <SUBGRF_Calibrate>:
{
 8011dde:	b500      	push	{lr}
 8011de0:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8011de2:	f000 0340 	and.w	r3, r0, #64	; 0x40
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8011de6:	f000 0220 	and.w	r2, r0, #32
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8011dea:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8011dec:	f000 0210 	and.w	r2, r0, #16
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8011df0:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8011df2:	f000 0208 	and.w	r2, r0, #8
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8011df6:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8011df8:	f000 0204 	and.w	r2, r0, #4
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8011dfc:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8011dfe:	f000 0202 	and.w	r2, r0, #2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8011e02:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8011e04:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8011e08:	4318      	orrs	r0, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8011e0a:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8011e0e:	2201      	movs	r2, #1
 8011e10:	f10d 0107 	add.w	r1, sp, #7
 8011e14:	2089      	movs	r0, #137	; 0x89
 8011e16:	f7ff ff0d 	bl	8011c34 <SUBGRF_WriteCommand>
}
 8011e1a:	b003      	add	sp, #12
 8011e1c:	f85d fb04 	ldr.w	pc, [sp], #4

08011e20 <SUBGRF_CalibrateImage>:
{
 8011e20:	b500      	push	{lr}
 8011e22:	b083      	sub	sp, #12
    if( freq > 900000000 )
 8011e24:	4b1c      	ldr	r3, [pc, #112]	; (8011e98 <SUBGRF_CalibrateImage+0x78>)
 8011e26:	4298      	cmp	r0, r3
 8011e28:	d90d      	bls.n	8011e46 <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 8011e2a:	23e1      	movs	r3, #225	; 0xe1
 8011e2c:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 8011e30:	23e9      	movs	r3, #233	; 0xe9
 8011e32:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8011e36:	2202      	movs	r2, #2
 8011e38:	a901      	add	r1, sp, #4
 8011e3a:	2098      	movs	r0, #152	; 0x98
 8011e3c:	f7ff fefa 	bl	8011c34 <SUBGRF_WriteCommand>
}
 8011e40:	b003      	add	sp, #12
 8011e42:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 8011e46:	4b15      	ldr	r3, [pc, #84]	; (8011e9c <SUBGRF_CalibrateImage+0x7c>)
 8011e48:	4298      	cmp	r0, r3
 8011e4a:	d906      	bls.n	8011e5a <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 8011e4c:	23d7      	movs	r3, #215	; 0xd7
 8011e4e:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 8011e52:	23db      	movs	r3, #219	; 0xdb
 8011e54:	f88d 3005 	strb.w	r3, [sp, #5]
 8011e58:	e7ed      	b.n	8011e36 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 8011e5a:	4b11      	ldr	r3, [pc, #68]	; (8011ea0 <SUBGRF_CalibrateImage+0x80>)
 8011e5c:	4298      	cmp	r0, r3
 8011e5e:	d906      	bls.n	8011e6e <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 8011e60:	23c1      	movs	r3, #193	; 0xc1
 8011e62:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 8011e66:	23c5      	movs	r3, #197	; 0xc5
 8011e68:	f88d 3005 	strb.w	r3, [sp, #5]
 8011e6c:	e7e3      	b.n	8011e36 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 8011e6e:	4b0d      	ldr	r3, [pc, #52]	; (8011ea4 <SUBGRF_CalibrateImage+0x84>)
 8011e70:	4298      	cmp	r0, r3
 8011e72:	d906      	bls.n	8011e82 <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 8011e74:	2375      	movs	r3, #117	; 0x75
 8011e76:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 8011e7a:	2381      	movs	r3, #129	; 0x81
 8011e7c:	f88d 3005 	strb.w	r3, [sp, #5]
 8011e80:	e7d9      	b.n	8011e36 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 8011e82:	4b09      	ldr	r3, [pc, #36]	; (8011ea8 <SUBGRF_CalibrateImage+0x88>)
 8011e84:	4298      	cmp	r0, r3
 8011e86:	d9d6      	bls.n	8011e36 <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x6B;
 8011e88:	236b      	movs	r3, #107	; 0x6b
 8011e8a:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 8011e8e:	236f      	movs	r3, #111	; 0x6f
 8011e90:	f88d 3005 	strb.w	r3, [sp, #5]
 8011e94:	e7cf      	b.n	8011e36 <SUBGRF_CalibrateImage+0x16>
 8011e96:	bf00      	nop
 8011e98:	35a4e900 	.word	0x35a4e900
 8011e9c:	32a9f880 	.word	0x32a9f880
 8011ea0:	2de54480 	.word	0x2de54480
 8011ea4:	1b6b0b00 	.word	0x1b6b0b00
 8011ea8:	1954fc40 	.word	0x1954fc40

08011eac <SUBGRF_SetPaConfig>:
{
 8011eac:	b500      	push	{lr}
 8011eae:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 8011eb0:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 8011eb4:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 8011eb8:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 8011ebc:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8011ec0:	2204      	movs	r2, #4
 8011ec2:	eb0d 0102 	add.w	r1, sp, r2
 8011ec6:	2095      	movs	r0, #149	; 0x95
 8011ec8:	f7ff feb4 	bl	8011c34 <SUBGRF_WriteCommand>
}
 8011ecc:	b003      	add	sp, #12
 8011ece:	f85d fb04 	ldr.w	pc, [sp], #4

08011ed2 <SUBGRF_SetDioIrqParams>:
{
 8011ed2:	b500      	push	{lr}
 8011ed4:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8011ed6:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 8011eda:	f88d c000 	strb.w	ip, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8011ede:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8011ee2:	0a08      	lsrs	r0, r1, #8
 8011ee4:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8011ee8:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8011eec:	0a11      	lsrs	r1, r2, #8
 8011eee:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8011ef2:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8011ef6:	0a1a      	lsrs	r2, r3, #8
 8011ef8:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8011efc:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8011f00:	2208      	movs	r2, #8
 8011f02:	4669      	mov	r1, sp
 8011f04:	4610      	mov	r0, r2
 8011f06:	f7ff fe95 	bl	8011c34 <SUBGRF_WriteCommand>
}
 8011f0a:	b003      	add	sp, #12
 8011f0c:	f85d fb04 	ldr.w	pc, [sp], #4

08011f10 <SUBGRF_SetTcxoMode>:
{
 8011f10:	b500      	push	{lr}
 8011f12:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 8011f14:	f000 0007 	and.w	r0, r0, #7
 8011f18:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8011f1c:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8011f20:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8011f24:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8011f28:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8011f2c:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8011f30:	2204      	movs	r2, #4
 8011f32:	eb0d 0102 	add.w	r1, sp, r2
 8011f36:	2097      	movs	r0, #151	; 0x97
 8011f38:	f7ff fe7c 	bl	8011c34 <SUBGRF_WriteCommand>
}
 8011f3c:	b003      	add	sp, #12
 8011f3e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08011f44 <SUBGRF_SetRfFrequency>:
{
 8011f44:	b510      	push	{r4, lr}
 8011f46:	b082      	sub	sp, #8
 8011f48:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 8011f4a:	4b12      	ldr	r3, [pc, #72]	; (8011f94 <SUBGRF_SetRfFrequency+0x50>)
 8011f4c:	781b      	ldrb	r3, [r3, #0]
 8011f4e:	b1d3      	cbz	r3, 8011f86 <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8011f50:	4a11      	ldr	r2, [pc, #68]	; (8011f98 <SUBGRF_SetRfFrequency+0x54>)
 8011f52:	2300      	movs	r3, #0
 8011f54:	0660      	lsls	r0, r4, #25
 8011f56:	09e1      	lsrs	r1, r4, #7
 8011f58:	f7ee feca 	bl	8000cf0 <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8011f5c:	0e03      	lsrs	r3, r0, #24
 8011f5e:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8011f62:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8011f66:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8011f6a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8011f6e:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8011f72:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8011f76:	2204      	movs	r2, #4
 8011f78:	eb0d 0102 	add.w	r1, sp, r2
 8011f7c:	2086      	movs	r0, #134	; 0x86
 8011f7e:	f7ff fe59 	bl	8011c34 <SUBGRF_WriteCommand>
}
 8011f82:	b002      	add	sp, #8
 8011f84:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 8011f86:	f7ff ff4b 	bl	8011e20 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8011f8a:	4b02      	ldr	r3, [pc, #8]	; (8011f94 <SUBGRF_SetRfFrequency+0x50>)
 8011f8c:	2201      	movs	r2, #1
 8011f8e:	701a      	strb	r2, [r3, #0]
 8011f90:	e7de      	b.n	8011f50 <SUBGRF_SetRfFrequency+0xc>
 8011f92:	bf00      	nop
 8011f94:	200011c8 	.word	0x200011c8
 8011f98:	01e84800 	.word	0x01e84800

08011f9c <SUBGRF_GetPacketType>:
}
 8011f9c:	4b01      	ldr	r3, [pc, #4]	; (8011fa4 <SUBGRF_GetPacketType+0x8>)
 8011f9e:	7818      	ldrb	r0, [r3, #0]
 8011fa0:	4770      	bx	lr
 8011fa2:	bf00      	nop
 8011fa4:	200011cb 	.word	0x200011cb

08011fa8 <SUBGRF_SetBufferBaseAddress>:
{
 8011fa8:	b500      	push	{lr}
 8011faa:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 8011fac:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 8011fb0:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8011fb4:	2202      	movs	r2, #2
 8011fb6:	a901      	add	r1, sp, #4
 8011fb8:	208f      	movs	r0, #143	; 0x8f
 8011fba:	f7ff fe3b 	bl	8011c34 <SUBGRF_WriteCommand>
}
 8011fbe:	b003      	add	sp, #12
 8011fc0:	f85d fb04 	ldr.w	pc, [sp], #4

08011fc4 <SUBGRF_GetRssiInst>:
{
 8011fc4:	b500      	push	{lr}
 8011fc6:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8011fc8:	2201      	movs	r2, #1
 8011fca:	a901      	add	r1, sp, #4
 8011fcc:	2015      	movs	r0, #21
 8011fce:	f7ff fe41 	bl	8011c54 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8011fd2:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8011fd6:	4240      	negs	r0, r0
}
 8011fd8:	1040      	asrs	r0, r0, #1
 8011fda:	b003      	add	sp, #12
 8011fdc:	f85d fb04 	ldr.w	pc, [sp], #4

08011fe0 <SUBGRF_GetPacketStatus>:
{
 8011fe0:	b510      	push	{r4, lr}
 8011fe2:	b082      	sub	sp, #8
 8011fe4:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8011fe6:	2203      	movs	r2, #3
 8011fe8:	a901      	add	r1, sp, #4
 8011fea:	2014      	movs	r0, #20
 8011fec:	f7ff fe32 	bl	8011c54 <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 8011ff0:	f7ff ffd4 	bl	8011f9c <SUBGRF_GetPacketType>
 8011ff4:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 8011ff6:	b148      	cbz	r0, 801200c <SUBGRF_GetPacketStatus+0x2c>
 8011ff8:	2801      	cmp	r0, #1
 8011ffa:	d018      	beq.n	801202e <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8011ffc:	2214      	movs	r2, #20
 8011ffe:	2100      	movs	r1, #0
 8012000:	4620      	mov	r0, r4
 8012002:	f000 fe8e 	bl	8012d22 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8012006:	230f      	movs	r3, #15
 8012008:	7023      	strb	r3, [r4, #0]
}
 801200a:	e00e      	b.n	801202a <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801200c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012010:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8012012:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012016:	425b      	negs	r3, r3
 8012018:	105b      	asrs	r3, r3, #1
 801201a:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801201c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012020:	425b      	negs	r3, r3
 8012022:	105b      	asrs	r3, r3, #1
 8012024:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8012026:	2300      	movs	r3, #0
 8012028:	60a3      	str	r3, [r4, #8]
}
 801202a:	b002      	add	sp, #8
 801202c:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801202e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012032:	425b      	negs	r3, r3
 8012034:	105b      	asrs	r3, r3, #1
 8012036:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8012038:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 801203c:	3302      	adds	r3, #2
 801203e:	109b      	asrs	r3, r3, #2
 8012040:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8012042:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012046:	425b      	negs	r3, r3
 8012048:	105b      	asrs	r3, r3, #1
 801204a:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801204c:	4b01      	ldr	r3, [pc, #4]	; (8012054 <SUBGRF_GetPacketStatus+0x74>)
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	6123      	str	r3, [r4, #16]
            break;
 8012052:	e7ea      	b.n	801202a <SUBGRF_GetPacketStatus+0x4a>
 8012054:	200011c4 	.word	0x200011c4

08012058 <SUBGRF_WriteRegister>:
{
 8012058:	b500      	push	{lr}
 801205a:	b083      	sub	sp, #12
 801205c:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8012060:	2301      	movs	r3, #1
 8012062:	f10d 0207 	add.w	r2, sp, #7
 8012066:	4601      	mov	r1, r0
 8012068:	4802      	ldr	r0, [pc, #8]	; (8012074 <SUBGRF_WriteRegister+0x1c>)
 801206a:	f7f4 fff1 	bl	8007050 <HAL_SUBGHZ_WriteRegisters>
}
 801206e:	b003      	add	sp, #12
 8012070:	f85d fb04 	ldr.w	pc, [sp], #4
 8012074:	20000284 	.word	0x20000284

08012078 <SUBGRF_SetRxBoosted>:
{
 8012078:	b510      	push	{r4, lr}
 801207a:	b082      	sub	sp, #8
 801207c:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 801207e:	4b0c      	ldr	r3, [pc, #48]	; (80120b0 <SUBGRF_SetRxBoosted+0x38>)
 8012080:	2205      	movs	r2, #5
 8012082:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8012084:	2197      	movs	r1, #151	; 0x97
 8012086:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801208a:	f7ff ffe5 	bl	8012058 <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801208e:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8012092:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8012096:	f3c4 2307 	ubfx	r3, r4, #8, #8
 801209a:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801209e:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80120a2:	2203      	movs	r2, #3
 80120a4:	a901      	add	r1, sp, #4
 80120a6:	2082      	movs	r0, #130	; 0x82
 80120a8:	f7ff fdc4 	bl	8011c34 <SUBGRF_WriteCommand>
}
 80120ac:	b002      	add	sp, #8
 80120ae:	bd10      	pop	{r4, pc}
 80120b0:	200011ca 	.word	0x200011ca

080120b4 <SUBGRF_SetLoRaSymbNumTimeout>:
{
 80120b4:	b500      	push	{lr}
 80120b6:	b083      	sub	sp, #12
 80120b8:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 80120bc:	2201      	movs	r2, #1
 80120be:	f10d 0107 	add.w	r1, sp, #7
 80120c2:	20a0      	movs	r0, #160	; 0xa0
 80120c4:	f7ff fdb6 	bl	8011c34 <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 80120c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80120cc:	2b3f      	cmp	r3, #63	; 0x3f
 80120ce:	d90f      	bls.n	80120f0 <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 80120d0:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 80120d2:	2200      	movs	r2, #0
        while( mant > 31 )
 80120d4:	e002      	b.n	80120dc <SUBGRF_SetLoRaSymbNumTimeout+0x28>
            mant >>= 2;
 80120d6:	089b      	lsrs	r3, r3, #2
            exp++;
 80120d8:	1c51      	adds	r1, r2, #1
 80120da:	b2ca      	uxtb	r2, r1
        while( mant > 31 )
 80120dc:	2b1f      	cmp	r3, #31
 80120de:	d8fa      	bhi.n	80120d6 <SUBGRF_SetLoRaSymbNumTimeout+0x22>
        reg = exp + ( mant << 3 );
 80120e0:	00d9      	lsls	r1, r3, #3
 80120e2:	b2c9      	uxtb	r1, r1
 80120e4:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 80120e6:	b2c9      	uxtb	r1, r1
 80120e8:	f240 7006 	movw	r0, #1798	; 0x706
 80120ec:	f7ff ffb4 	bl	8012058 <SUBGRF_WriteRegister>
}
 80120f0:	b003      	add	sp, #12
 80120f2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080120f8 <SUBGRF_SetPacketType>:
{
 80120f8:	b500      	push	{lr}
 80120fa:	b083      	sub	sp, #12
 80120fc:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 8012100:	b2c3      	uxtb	r3, r0
 8012102:	4a09      	ldr	r2, [pc, #36]	; (8012128 <SUBGRF_SetPacketType+0x30>)
 8012104:	7013      	strb	r3, [r2, #0]
    if( packetType == PACKET_TYPE_GFSK )
 8012106:	b143      	cbz	r3, 801211a <SUBGRF_SetPacketType+0x22>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8012108:	2201      	movs	r2, #1
 801210a:	f10d 0107 	add.w	r1, sp, #7
 801210e:	208a      	movs	r0, #138	; 0x8a
 8012110:	f7ff fd90 	bl	8011c34 <SUBGRF_WriteCommand>
}
 8012114:	b003      	add	sp, #12
 8012116:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801211a:	2100      	movs	r1, #0
 801211c:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8012120:	f7ff ff9a 	bl	8012058 <SUBGRF_WriteRegister>
 8012124:	e7f0      	b.n	8012108 <SUBGRF_SetPacketType+0x10>
 8012126:	bf00      	nop
 8012128:	200011cb 	.word	0x200011cb

0801212c <SUBGRF_SetModulationParams>:
{
 801212c:	b510      	push	{r4, lr}
 801212e:	b082      	sub	sp, #8
 8012130:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8012132:	4b3e      	ldr	r3, [pc, #248]	; (801222c <SUBGRF_SetModulationParams+0x100>)
 8012134:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012138:	ab02      	add	r3, sp, #8
 801213a:	e903 0003 	stmdb	r3, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 801213e:	7820      	ldrb	r0, [r4, #0]
 8012140:	4b3b      	ldr	r3, [pc, #236]	; (8012230 <SUBGRF_SetModulationParams+0x104>)
 8012142:	781b      	ldrb	r3, [r3, #0]
 8012144:	4298      	cmp	r0, r3
 8012146:	d106      	bne.n	8012156 <SUBGRF_SetModulationParams+0x2a>
    switch( modulationParams->PacketType )
 8012148:	7823      	ldrb	r3, [r4, #0]
 801214a:	2b03      	cmp	r3, #3
 801214c:	d82c      	bhi.n	80121a8 <SUBGRF_SetModulationParams+0x7c>
 801214e:	e8df f003 	tbb	[pc, r3]
 8012152:	4205      	.short	0x4205
 8012154:	542d      	.short	0x542d
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8012156:	f7ff ffcf 	bl	80120f8 <SUBGRF_SetPacketType>
 801215a:	e7f5      	b.n	8012148 <SUBGRF_SetModulationParams+0x1c>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801215c:	6862      	ldr	r2, [r4, #4]
 801215e:	4b35      	ldr	r3, [pc, #212]	; (8012234 <SUBGRF_SetModulationParams+0x108>)
 8012160:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8012164:	0c1a      	lsrs	r2, r3, #16
 8012166:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801216a:	0a1a      	lsrs	r2, r3, #8
 801216c:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8012170:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8012174:	7b23      	ldrb	r3, [r4, #12]
 8012176:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801217a:	7b63      	ldrb	r3, [r4, #13]
 801217c:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8012180:	68a1      	ldr	r1, [r4, #8]
 8012182:	4a2d      	ldr	r2, [pc, #180]	; (8012238 <SUBGRF_SetModulationParams+0x10c>)
 8012184:	2300      	movs	r3, #0
 8012186:	0648      	lsls	r0, r1, #25
 8012188:	09c9      	lsrs	r1, r1, #7
 801218a:	f7ee fdb1 	bl	8000cf0 <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801218e:	0c03      	lsrs	r3, r0, #16
 8012190:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8012194:	0a03      	lsrs	r3, r0, #8
 8012196:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 801219a:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801219e:	2208      	movs	r2, #8
 80121a0:	4669      	mov	r1, sp
 80121a2:	208b      	movs	r0, #139	; 0x8b
 80121a4:	f7ff fd46 	bl	8011c34 <SUBGRF_WriteCommand>
}
 80121a8:	b002      	add	sp, #8
 80121aa:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 80121ac:	6922      	ldr	r2, [r4, #16]
 80121ae:	4b21      	ldr	r3, [pc, #132]	; (8012234 <SUBGRF_SetModulationParams+0x108>)
 80121b0:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80121b4:	0c1a      	lsrs	r2, r3, #16
 80121b6:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80121ba:	0a1a      	lsrs	r2, r3, #8
 80121bc:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 80121c0:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 80121c4:	7d23      	ldrb	r3, [r4, #20]
 80121c6:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80121ca:	2204      	movs	r2, #4
 80121cc:	4669      	mov	r1, sp
 80121ce:	208b      	movs	r0, #139	; 0x8b
 80121d0:	f7ff fd30 	bl	8011c34 <SUBGRF_WriteCommand>
        break;
 80121d4:	e7e8      	b.n	80121a8 <SUBGRF_SetModulationParams+0x7c>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 80121d6:	7e23      	ldrb	r3, [r4, #24]
 80121d8:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 80121dc:	7e63      	ldrb	r3, [r4, #25]
 80121de:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 80121e2:	7ea3      	ldrb	r3, [r4, #26]
 80121e4:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 80121e8:	7ee3      	ldrb	r3, [r4, #27]
 80121ea:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80121ee:	2204      	movs	r2, #4
 80121f0:	4669      	mov	r1, sp
 80121f2:	208b      	movs	r0, #139	; 0x8b
 80121f4:	f7ff fd1e 	bl	8011c34 <SUBGRF_WriteCommand>
        break;
 80121f8:	e7d6      	b.n	80121a8 <SUBGRF_SetModulationParams+0x7c>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 80121fa:	6862      	ldr	r2, [r4, #4]
 80121fc:	4b0d      	ldr	r3, [pc, #52]	; (8012234 <SUBGRF_SetModulationParams+0x108>)
 80121fe:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8012202:	0c1a      	lsrs	r2, r3, #16
 8012204:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8012208:	0a1a      	lsrs	r2, r3, #8
 801220a:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 801220e:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8012212:	7b23      	ldrb	r3, [r4, #12]
 8012214:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8012218:	7b63      	ldrb	r3, [r4, #13]
 801221a:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801221e:	2205      	movs	r2, #5
 8012220:	4669      	mov	r1, sp
 8012222:	208b      	movs	r0, #139	; 0x8b
 8012224:	f7ff fd06 	bl	8011c34 <SUBGRF_WriteCommand>
}
 8012228:	e7be      	b.n	80121a8 <SUBGRF_SetModulationParams+0x7c>
 801222a:	bf00      	nop
 801222c:	080141bc 	.word	0x080141bc
 8012230:	200011cb 	.word	0x200011cb
 8012234:	3d090000 	.word	0x3d090000
 8012238:	01e84800 	.word	0x01e84800

0801223c <SUBGRF_ReadRegister>:
{
 801223c:	b500      	push	{lr}
 801223e:	b083      	sub	sp, #12
 8012240:	4601      	mov	r1, r0
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8012242:	2301      	movs	r3, #1
 8012244:	f10d 0207 	add.w	r2, sp, #7
 8012248:	4803      	ldr	r0, [pc, #12]	; (8012258 <SUBGRF_ReadRegister+0x1c>)
 801224a:	f7f4 ff51 	bl	80070f0 <HAL_SUBGHZ_ReadRegisters>
}
 801224e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012252:	b003      	add	sp, #12
 8012254:	f85d fb04 	ldr.w	pc, [sp], #4
 8012258:	20000284 	.word	0x20000284

0801225c <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
}

static void Radio_SMPS_Set(uint8_t level)
{
 801225c:	b510      	push	{r4, lr}
 801225e:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 8012260:	f7f0 fdbe 	bl	8002de0 <RBI_IsDCDC>
 8012264:	2801      	cmp	r0, #1
 8012266:	d000      	beq.n	801226a <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 8012268:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801226a:	f640 1023 	movw	r0, #2339	; 0x923
 801226e:	f7ff ffe5 	bl	801223c <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 8012272:	f000 01f9 	and.w	r1, r0, #249	; 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8012276:	4321      	orrs	r1, r4
 8012278:	f640 1023 	movw	r0, #2339	; 0x923
 801227c:	f7ff feec 	bl	8012058 <SUBGRF_WriteRegister>
}
 8012280:	e7f2      	b.n	8012268 <Radio_SMPS_Set+0xc>
	...

08012284 <SUBGRF_Init>:
{
 8012284:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 8012286:	b108      	cbz	r0, 801228c <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 8012288:	4a16      	ldr	r2, [pc, #88]	; (80122e4 <SUBGRF_Init+0x60>)
 801228a:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 801228c:	f7ef fb20 	bl	80018d0 <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8012290:	2002      	movs	r0, #2
 8012292:	f7ff ffe3 	bl	801225c <Radio_SMPS_Set>
    ImageCalibrated = false;
 8012296:	2000      	movs	r0, #0
 8012298:	4b13      	ldr	r3, [pc, #76]	; (80122e8 <SUBGRF_Init+0x64>)
 801229a:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 801229c:	f7ff fcf0 	bl	8011c80 <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 80122a0:	f7f0 fd9a 	bl	8002dd8 <RBI_IsTCXO>
 80122a4:	2801      	cmp	r0, #1
 80122a6:	d00f      	beq.n	80122c8 <SUBGRF_Init+0x44>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80122a8:	2120      	movs	r1, #32
 80122aa:	f640 1011 	movw	r0, #2321	; 0x911
 80122ae:	f7ff fed3 	bl	8012058 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80122b2:	2120      	movs	r1, #32
 80122b4:	f640 1012 	movw	r0, #2322	; 0x912
 80122b8:	f7ff fece 	bl	8012058 <SUBGRF_WriteRegister>
    RBI_Init();
 80122bc:	f7f0 fd80 	bl	8002dc0 <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 80122c0:	4b0a      	ldr	r3, [pc, #40]	; (80122ec <SUBGRF_Init+0x68>)
 80122c2:	2201      	movs	r2, #1
 80122c4:	701a      	strb	r2, [r3, #0]
}
 80122c6:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 80122c8:	2140      	movs	r1, #64	; 0x40
 80122ca:	f7ff fe21 	bl	8011f10 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 80122ce:	2100      	movs	r1, #0
 80122d0:	f640 1011 	movw	r0, #2321	; 0x911
 80122d4:	f7ff fec0 	bl	8012058 <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 80122d8:	f04f 007f 	mov.w	r0, #127	; 0x7f
 80122dc:	f7ff fd7f 	bl	8011dde <SUBGRF_Calibrate>
 80122e0:	e7ec      	b.n	80122bc <SUBGRF_Init+0x38>
 80122e2:	bf00      	nop
 80122e4:	200011cc 	.word	0x200011cc
 80122e8:	200011c8 	.word	0x200011c8
 80122ec:	200011ca 	.word	0x200011ca

080122f0 <SUBGRF_SetSleep>:
{
 80122f0:	b510      	push	{r4, lr}
 80122f2:	b082      	sub	sp, #8
 80122f4:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 80122f6:	2000      	movs	r0, #0
 80122f8:	f7f0 fd66 	bl	8002dc8 <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80122fc:	2002      	movs	r0, #2
 80122fe:	f7ff ffad 	bl	801225c <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8012302:	f004 0004 	and.w	r0, r4, #4
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8012306:	f004 0302 	and.w	r3, r4, #2
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801230a:	4318      	orrs	r0, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801230c:	f004 0401 	and.w	r4, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8012310:	4304      	orrs	r4, r0
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8012312:	f88d 4007 	strb.w	r4, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8012316:	2201      	movs	r2, #1
 8012318:	f10d 0107 	add.w	r1, sp, #7
 801231c:	2084      	movs	r0, #132	; 0x84
 801231e:	f7ff fc89 	bl	8011c34 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8012322:	4b02      	ldr	r3, [pc, #8]	; (801232c <SUBGRF_SetSleep+0x3c>)
 8012324:	2200      	movs	r2, #0
 8012326:	701a      	strb	r2, [r3, #0]
}
 8012328:	b002      	add	sp, #8
 801232a:	bd10      	pop	{r4, pc}
 801232c:	200011ca 	.word	0x200011ca

08012330 <SUBGRF_SetWhiteningSeed>:
{
 8012330:	b510      	push	{r4, lr}
 8012332:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 8012334:	f7ff fe32 	bl	8011f9c <SUBGRF_GetPacketType>
 8012338:	b100      	cbz	r0, 801233c <SUBGRF_SetWhiteningSeed+0xc>
}
 801233a:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801233c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8012340:	f7ff ff7c 	bl	801223c <SUBGRF_ReadRegister>
 8012344:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8012348:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801234c:	4301      	orrs	r1, r0
 801234e:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8012352:	f7ff fe81 	bl	8012058 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8012356:	b2e1      	uxtb	r1, r4
 8012358:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801235c:	f7ff fe7c 	bl	8012058 <SUBGRF_WriteRegister>
}
 8012360:	e7eb      	b.n	801233a <SUBGRF_SetWhiteningSeed+0xa>

08012362 <SUBGRF_SetTxParams>:
{
 8012362:	b570      	push	{r4, r5, r6, lr}
 8012364:	b082      	sub	sp, #8
 8012366:	460c      	mov	r4, r1
 8012368:	4616      	mov	r6, r2
    if (paSelect == RFO_LP)
 801236a:	2801      	cmp	r0, #1
 801236c:	d035      	beq.n	80123da <SUBGRF_SetTxParams+0x78>
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801236e:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8012372:	f7ff ff63 	bl	801223c <SUBGRF_ReadRegister>
 8012376:	f040 011e 	orr.w	r1, r0, #30
 801237a:	b2c9      	uxtb	r1, r1
 801237c:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8012380:	f7ff fe6a 	bl	8012058 <SUBGRF_WriteRegister>
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8012384:	2001      	movs	r0, #1
 8012386:	f7f0 fd2f 	bl	8002de8 <RBI_GetRFOMaxPowerConfig>
 801238a:	4605      	mov	r5, r0
        if (power > max_power)
 801238c:	4284      	cmp	r4, r0
 801238e:	dd00      	ble.n	8012392 <SUBGRF_SetTxParams+0x30>
            power = max_power;
 8012390:	b244      	sxtb	r4, r0
        if (max_power == 20)
 8012392:	2d14      	cmp	r5, #20
 8012394:	d054      	beq.n	8012440 <SUBGRF_SetTxParams+0xde>
        else if (max_power == 17)
 8012396:	2d11      	cmp	r5, #17
 8012398:	d05c      	beq.n	8012454 <SUBGRF_SetTxParams+0xf2>
        else if (max_power == 14)
 801239a:	2d0e      	cmp	r5, #14
 801239c:	d064      	beq.n	8012468 <SUBGRF_SetTxParams+0x106>
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801239e:	2301      	movs	r3, #1
 80123a0:	2200      	movs	r2, #0
 80123a2:	2107      	movs	r1, #7
 80123a4:	2004      	movs	r0, #4
 80123a6:	f7ff fd81 	bl	8011eac <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80123aa:	1b64      	subs	r4, r4, r5
 80123ac:	3416      	adds	r4, #22
 80123ae:	b264      	sxtb	r4, r4
        if (power < -9)
 80123b0:	f114 0f09 	cmn.w	r4, #9
 80123b4:	da01      	bge.n	80123ba <SUBGRF_SetTxParams+0x58>
            power = -9;
 80123b6:	f06f 0408 	mvn.w	r4, #8
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 80123ba:	2138      	movs	r1, #56	; 0x38
 80123bc:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80123c0:	f7ff fe4a 	bl	8012058 <SUBGRF_WriteRegister>
    buf[0] = power;
 80123c4:	f88d 4004 	strb.w	r4, [sp, #4]
    buf[1] = (uint8_t)rampTime;
 80123c8:	f88d 6005 	strb.w	r6, [sp, #5]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 80123cc:	2202      	movs	r2, #2
 80123ce:	a901      	add	r1, sp, #4
 80123d0:	208e      	movs	r0, #142	; 0x8e
 80123d2:	f7ff fc2f 	bl	8011c34 <SUBGRF_WriteCommand>
}
 80123d6:	b002      	add	sp, #8
 80123d8:	bd70      	pop	{r4, r5, r6, pc}
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 80123da:	2000      	movs	r0, #0
 80123dc:	f7f0 fd04 	bl	8002de8 <RBI_GetRFOMaxPowerConfig>
 80123e0:	4605      	mov	r5, r0
        if (power >  max_power)
 80123e2:	4284      	cmp	r4, r0
 80123e4:	dd00      	ble.n	80123e8 <SUBGRF_SetTxParams+0x86>
          power = max_power;
 80123e6:	b244      	sxtb	r4, r0
        if (max_power == 14)
 80123e8:	2d0e      	cmp	r5, #14
 80123ea:	d015      	beq.n	8012418 <SUBGRF_SetTxParams+0xb6>
        else if (max_power == 10)
 80123ec:	2d0a      	cmp	r5, #10
 80123ee:	d01d      	beq.n	801242c <SUBGRF_SetTxParams+0xca>
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 80123f0:	2301      	movs	r3, #1
 80123f2:	461a      	mov	r2, r3
 80123f4:	2100      	movs	r1, #0
 80123f6:	2006      	movs	r0, #6
 80123f8:	f7ff fd58 	bl	8011eac <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80123fc:	1b64      	subs	r4, r4, r5
 80123fe:	340e      	adds	r4, #14
 8012400:	b264      	sxtb	r4, r4
        if (power < -17)
 8012402:	f114 0f11 	cmn.w	r4, #17
 8012406:	da01      	bge.n	801240c <SUBGRF_SetTxParams+0xaa>
            power = -17;
 8012408:	f06f 0410 	mvn.w	r4, #16
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801240c:	2118      	movs	r1, #24
 801240e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8012412:	f7ff fe21 	bl	8012058 <SUBGRF_WriteRegister>
 8012416:	e7d5      	b.n	80123c4 <SUBGRF_SetTxParams+0x62>
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8012418:	2301      	movs	r3, #1
 801241a:	461a      	mov	r2, r3
 801241c:	2100      	movs	r1, #0
 801241e:	2004      	movs	r0, #4
 8012420:	f7ff fd44 	bl	8011eac <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8012424:	1b64      	subs	r4, r4, r5
 8012426:	340e      	adds	r4, #14
 8012428:	b264      	sxtb	r4, r4
 801242a:	e7ea      	b.n	8012402 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801242c:	2301      	movs	r3, #1
 801242e:	461a      	mov	r2, r3
 8012430:	2100      	movs	r1, #0
 8012432:	4618      	mov	r0, r3
 8012434:	f7ff fd3a 	bl	8011eac <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8012438:	1b64      	subs	r4, r4, r5
 801243a:	340d      	adds	r4, #13
 801243c:	b264      	sxtb	r4, r4
 801243e:	e7e0      	b.n	8012402 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8012440:	2301      	movs	r3, #1
 8012442:	2200      	movs	r2, #0
 8012444:	2105      	movs	r1, #5
 8012446:	2003      	movs	r0, #3
 8012448:	f7ff fd30 	bl	8011eac <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801244c:	1b64      	subs	r4, r4, r5
 801244e:	3416      	adds	r4, #22
 8012450:	b264      	sxtb	r4, r4
 8012452:	e7ad      	b.n	80123b0 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8012454:	2301      	movs	r3, #1
 8012456:	2200      	movs	r2, #0
 8012458:	2103      	movs	r1, #3
 801245a:	2002      	movs	r0, #2
 801245c:	f7ff fd26 	bl	8011eac <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8012460:	1b64      	subs	r4, r4, r5
 8012462:	3416      	adds	r4, #22
 8012464:	b264      	sxtb	r4, r4
 8012466:	e7a3      	b.n	80123b0 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8012468:	2301      	movs	r3, #1
 801246a:	2200      	movs	r2, #0
 801246c:	2102      	movs	r1, #2
 801246e:	4608      	mov	r0, r1
 8012470:	f7ff fd1c 	bl	8011eac <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8012474:	1b64      	subs	r4, r4, r5
 8012476:	340e      	adds	r4, #14
 8012478:	b264      	sxtb	r4, r4
 801247a:	e799      	b.n	80123b0 <SUBGRF_SetTxParams+0x4e>

0801247c <SUBGRF_GetRxBufferStatus>:
{
 801247c:	b530      	push	{r4, r5, lr}
 801247e:	b083      	sub	sp, #12
 8012480:	4605      	mov	r5, r0
 8012482:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8012484:	2202      	movs	r2, #2
 8012486:	a901      	add	r1, sp, #4
 8012488:	2013      	movs	r0, #19
 801248a:	f7ff fbe3 	bl	8011c54 <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801248e:	f7ff fd85 	bl	8011f9c <SUBGRF_GetPacketType>
 8012492:	2801      	cmp	r0, #1
 8012494:	d007      	beq.n	80124a6 <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 8012496:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801249a:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 801249c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80124a0:	7023      	strb	r3, [r4, #0]
}
 80124a2:	b003      	add	sp, #12
 80124a4:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 80124a6:	4b05      	ldr	r3, [pc, #20]	; (80124bc <SUBGRF_GetRxBufferStatus+0x40>)
 80124a8:	781b      	ldrb	r3, [r3, #0]
 80124aa:	b2db      	uxtb	r3, r3
 80124ac:	2b01      	cmp	r3, #1
 80124ae:	d1f2      	bne.n	8012496 <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 80124b0:	f240 7002 	movw	r0, #1794	; 0x702
 80124b4:	f7ff fec2 	bl	801223c <SUBGRF_ReadRegister>
 80124b8:	7028      	strb	r0, [r5, #0]
 80124ba:	e7ef      	b.n	801249c <SUBGRF_GetRxBufferStatus+0x20>
 80124bc:	200011c9 	.word	0x200011c9

080124c0 <SUBGRF_WriteRegisters>:
{
 80124c0:	b510      	push	{r4, lr}
 80124c2:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80124c4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80124c8:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 80124ca:	460a      	mov	r2, r1
 80124cc:	4601      	mov	r1, r0
 80124ce:	4803      	ldr	r0, [pc, #12]	; (80124dc <SUBGRF_WriteRegisters+0x1c>)
 80124d0:	f7f4 fdbe 	bl	8007050 <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80124d4:	f384 8810 	msr	PRIMASK, r4
}
 80124d8:	bd10      	pop	{r4, pc}
 80124da:	bf00      	nop
 80124dc:	20000284 	.word	0x20000284

080124e0 <SUBGRF_SetSyncWord>:
{
 80124e0:	b508      	push	{r3, lr}
 80124e2:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 80124e4:	2208      	movs	r2, #8
 80124e6:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 80124ea:	f7ff ffe9 	bl	80124c0 <SUBGRF_WriteRegisters>
}
 80124ee:	2000      	movs	r0, #0
 80124f0:	bd08      	pop	{r3, pc}

080124f2 <SUBGRF_SetCrcSeed>:
{
 80124f2:	b500      	push	{lr}
 80124f4:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 80124f6:	0a03      	lsrs	r3, r0, #8
 80124f8:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 80124fc:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8012500:	f7ff fd4c 	bl	8011f9c <SUBGRF_GetPacketType>
 8012504:	b110      	cbz	r0, 801250c <SUBGRF_SetCrcSeed+0x1a>
}
 8012506:	b003      	add	sp, #12
 8012508:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801250c:	2202      	movs	r2, #2
 801250e:	a901      	add	r1, sp, #4
 8012510:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8012514:	f7ff ffd4 	bl	80124c0 <SUBGRF_WriteRegisters>
}
 8012518:	e7f5      	b.n	8012506 <SUBGRF_SetCrcSeed+0x14>

0801251a <SUBGRF_SetCrcPolynomial>:
{
 801251a:	b500      	push	{lr}
 801251c:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801251e:	0a03      	lsrs	r3, r0, #8
 8012520:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8012524:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8012528:	f7ff fd38 	bl	8011f9c <SUBGRF_GetPacketType>
 801252c:	b110      	cbz	r0, 8012534 <SUBGRF_SetCrcPolynomial+0x1a>
}
 801252e:	b003      	add	sp, #12
 8012530:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8012534:	2202      	movs	r2, #2
 8012536:	a901      	add	r1, sp, #4
 8012538:	f240 60be 	movw	r0, #1726	; 0x6be
 801253c:	f7ff ffc0 	bl	80124c0 <SUBGRF_WriteRegisters>
}
 8012540:	e7f5      	b.n	801252e <SUBGRF_SetCrcPolynomial+0x14>
	...

08012544 <SUBGRF_SetPacketParams>:
{
 8012544:	b510      	push	{r4, lr}
 8012546:	b084      	sub	sp, #16
 8012548:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801254a:	ab01      	add	r3, sp, #4
 801254c:	4a33      	ldr	r2, [pc, #204]	; (801261c <SUBGRF_SetPacketParams+0xd8>)
 801254e:	ca07      	ldmia	r2, {r0, r1, r2}
 8012550:	c303      	stmia	r3!, {r0, r1}
 8012552:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 8012554:	7820      	ldrb	r0, [r4, #0]
 8012556:	4b32      	ldr	r3, [pc, #200]	; (8012620 <SUBGRF_SetPacketParams+0xdc>)
 8012558:	781b      	ldrb	r3, [r3, #0]
 801255a:	4298      	cmp	r0, r3
 801255c:	d106      	bne.n	801256c <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 801255e:	7823      	ldrb	r3, [r4, #0]
 8012560:	2b03      	cmp	r3, #3
 8012562:	d82a      	bhi.n	80125ba <SUBGRF_SetPacketParams+0x76>
 8012564:	e8df f003 	tbb	[pc, r3]
 8012568:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 801256c:	f7ff fdc4 	bl	80120f8 <SUBGRF_SetPacketType>
 8012570:	e7f5      	b.n	801255e <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8012572:	7a63      	ldrb	r3, [r4, #9]
 8012574:	2bf1      	cmp	r3, #241	; 0xf1
 8012576:	d022      	beq.n	80125be <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8012578:	2bf2      	cmp	r3, #242	; 0xf2
 801257a:	d02a      	beq.n	80125d2 <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801257c:	8862      	ldrh	r2, [r4, #2]
 801257e:	0a11      	lsrs	r1, r2, #8
 8012580:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8012584:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8012588:	7922      	ldrb	r2, [r4, #4]
 801258a:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801258e:	7962      	ldrb	r2, [r4, #5]
 8012590:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8012594:	79a2      	ldrb	r2, [r4, #6]
 8012596:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801259a:	79e2      	ldrb	r2, [r4, #7]
 801259c:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 80125a0:	7a22      	ldrb	r2, [r4, #8]
 80125a2:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 80125a6:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 80125aa:	7aa3      	ldrb	r3, [r4, #10]
 80125ac:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 80125b0:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 80125b2:	a901      	add	r1, sp, #4
 80125b4:	208c      	movs	r0, #140	; 0x8c
 80125b6:	f7ff fb3d 	bl	8011c34 <SUBGRF_WriteCommand>
}
 80125ba:	b004      	add	sp, #16
 80125bc:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 80125be:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80125c2:	f7ff ff96 	bl	80124f2 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 80125c6:	f248 0005 	movw	r0, #32773	; 0x8005
 80125ca:	f7ff ffa6 	bl	801251a <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 80125ce:	2302      	movs	r3, #2
 80125d0:	e7d4      	b.n	801257c <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 80125d2:	f641 500f 	movw	r0, #7439	; 0x1d0f
 80125d6:	f7ff ff8c 	bl	80124f2 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 80125da:	f241 0021 	movw	r0, #4129	; 0x1021
 80125de:	f7ff ff9c 	bl	801251a <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 80125e2:	2306      	movs	r3, #6
 80125e4:	e7ca      	b.n	801257c <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 80125e6:	7b23      	ldrb	r3, [r4, #12]
 80125e8:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 80125ec:	2201      	movs	r2, #1
        break;
 80125ee:	e7e0      	b.n	80125b2 <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 80125f0:	89e3      	ldrh	r3, [r4, #14]
 80125f2:	0a1a      	lsrs	r2, r3, #8
 80125f4:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 80125f8:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 80125fc:	7c23      	ldrb	r3, [r4, #16]
 80125fe:	4a09      	ldr	r2, [pc, #36]	; (8012624 <SUBGRF_SetPacketParams+0xe0>)
 8012600:	7013      	strb	r3, [r2, #0]
 8012602:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8012606:	7c63      	ldrb	r3, [r4, #17]
 8012608:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801260c:	7ca3      	ldrb	r3, [r4, #18]
 801260e:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8012612:	7ce3      	ldrb	r3, [r4, #19]
 8012614:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 8012618:	2206      	movs	r2, #6
        break;
 801261a:	e7ca      	b.n	80125b2 <SUBGRF_SetPacketParams+0x6e>
 801261c:	080141c4 	.word	0x080141c4
 8012620:	200011cb 	.word	0x200011cb
 8012624:	200011c9 	.word	0x200011c9

08012628 <SUBGRF_ReadRegisters>:
{
 8012628:	b510      	push	{r4, lr}
 801262a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801262c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012630:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8012632:	460a      	mov	r2, r1
 8012634:	4601      	mov	r1, r0
 8012636:	4803      	ldr	r0, [pc, #12]	; (8012644 <SUBGRF_ReadRegisters+0x1c>)
 8012638:	f7f4 fd5a 	bl	80070f0 <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801263c:	f384 8810 	msr	PRIMASK, r4
}
 8012640:	bd10      	pop	{r4, pc}
 8012642:	bf00      	nop
 8012644:	20000284 	.word	0x20000284

08012648 <SUBGRF_GetRandom>:
{
 8012648:	b570      	push	{r4, r5, r6, lr}
 801264a:	b082      	sub	sp, #8
    uint32_t number = 0;
 801264c:	2600      	movs	r6, #0
 801264e:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8012650:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8012654:	f7ff fdf2 	bl	801223c <SUBGRF_ReadRegister>
 8012658:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801265a:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 801265e:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8012662:	f7ff fcf9 	bl	8012058 <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8012666:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801266a:	f7ff fde7 	bl	801223c <SUBGRF_ReadRegister>
 801266e:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8012670:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8012674:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8012678:	f7ff fcee 	bl	8012058 <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801267c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8012680:	f7ff fb32 	bl	8011ce8 <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8012684:	2204      	movs	r2, #4
 8012686:	eb0d 0102 	add.w	r1, sp, r2
 801268a:	f640 0019 	movw	r0, #2073	; 0x819
 801268e:	f7ff ffcb 	bl	8012628 <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 8012692:	4630      	mov	r0, r6
 8012694:	f7ff faf4 	bl	8011c80 <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8012698:	4629      	mov	r1, r5
 801269a:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801269e:	f7ff fcdb 	bl	8012058 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 80126a2:	4621      	mov	r1, r4
 80126a4:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80126a8:	f7ff fcd6 	bl	8012058 <SUBGRF_WriteRegister>
}
 80126ac:	9801      	ldr	r0, [sp, #4]
 80126ae:	b002      	add	sp, #8
 80126b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080126b4 <SUBGRF_WriteBuffer>:
{
 80126b4:	b510      	push	{r4, lr}
 80126b6:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80126b8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80126bc:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 80126be:	460a      	mov	r2, r1
 80126c0:	4601      	mov	r1, r0
 80126c2:	4803      	ldr	r0, [pc, #12]	; (80126d0 <SUBGRF_WriteBuffer+0x1c>)
 80126c4:	f7f4 fe6a 	bl	800739c <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80126c8:	f384 8810 	msr	PRIMASK, r4
}
 80126cc:	bd10      	pop	{r4, pc}
 80126ce:	bf00      	nop
 80126d0:	20000284 	.word	0x20000284

080126d4 <SUBGRF_SetPayload>:
{
 80126d4:	b508      	push	{r3, lr}
 80126d6:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 80126d8:	4601      	mov	r1, r0
 80126da:	2000      	movs	r0, #0
 80126dc:	f7ff ffea 	bl	80126b4 <SUBGRF_WriteBuffer>
}
 80126e0:	bd08      	pop	{r3, pc}

080126e2 <SUBGRF_SendPayload>:
{
 80126e2:	b510      	push	{r4, lr}
 80126e4:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 80126e6:	f7ff fff5 	bl	80126d4 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 80126ea:	4620      	mov	r0, r4
 80126ec:	f7ff fae2 	bl	8011cb4 <SUBGRF_SetTx>
}
 80126f0:	bd10      	pop	{r4, pc}
	...

080126f4 <SUBGRF_ReadBuffer>:
{
 80126f4:	b510      	push	{r4, lr}
 80126f6:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80126f8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80126fc:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 80126fe:	460a      	mov	r2, r1
 8012700:	4601      	mov	r1, r0
 8012702:	4803      	ldr	r0, [pc, #12]	; (8012710 <SUBGRF_ReadBuffer+0x1c>)
 8012704:	f7f4 fe94 	bl	8007430 <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012708:	f384 8810 	msr	PRIMASK, r4
}
 801270c:	bd10      	pop	{r4, pc}
 801270e:	bf00      	nop
 8012710:	20000284 	.word	0x20000284

08012714 <SUBGRF_GetPayload>:
{
 8012714:	b570      	push	{r4, r5, r6, lr}
 8012716:	b082      	sub	sp, #8
 8012718:	4606      	mov	r6, r0
 801271a:	460c      	mov	r4, r1
 801271c:	4615      	mov	r5, r2
    uint8_t offset = 0;
 801271e:	2300      	movs	r3, #0
 8012720:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 8012724:	f10d 0107 	add.w	r1, sp, #7
 8012728:	4620      	mov	r0, r4
 801272a:	f7ff fea7 	bl	801247c <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801272e:	7822      	ldrb	r2, [r4, #0]
 8012730:	42aa      	cmp	r2, r5
 8012732:	d902      	bls.n	801273a <SUBGRF_GetPayload+0x26>
        return 1;
 8012734:	2001      	movs	r0, #1
}
 8012736:	b002      	add	sp, #8
 8012738:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801273a:	4631      	mov	r1, r6
 801273c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012740:	f7ff ffd8 	bl	80126f4 <SUBGRF_ReadBuffer>
    return 0;
 8012744:	2000      	movs	r0, #0
 8012746:	e7f6      	b.n	8012736 <SUBGRF_GetPayload+0x22>

08012748 <SUBGRF_SetSwitch>:
{
 8012748:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 801274a:	2901      	cmp	r1, #1
 801274c:	d003      	beq.n	8012756 <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801274e:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 8012750:	f7f0 fb3a 	bl	8002dc8 <RBI_ConfigRFSwitch>
}
 8012754:	bd10      	pop	{r4, pc}
 8012756:	4604      	mov	r4, r0
 8012758:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 801275a:	2c01      	cmp	r4, #1
 801275c:	d003      	beq.n	8012766 <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 801275e:	2c02      	cmp	r4, #2
 8012760:	d1f6      	bne.n	8012750 <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 8012762:	2003      	movs	r0, #3
 8012764:	e7f4      	b.n	8012750 <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8012766:	2004      	movs	r0, #4
 8012768:	f7ff fd78 	bl	801225c <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 801276c:	2002      	movs	r0, #2
 801276e:	e7f6      	b.n	801275e <SUBGRF_SetSwitch+0x16>

08012770 <SUBGRF_SetRfTxPower>:
{
 8012770:	b538      	push	{r3, r4, r5, lr}
 8012772:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 8012774:	f7f0 fb2c 	bl	8002dd0 <RBI_GetTxConfig>
    switch (TxConfig)
 8012778:	b148      	cbz	r0, 801278e <SUBGRF_SetRfTxPower+0x1e>
 801277a:	2802      	cmp	r0, #2
 801277c:	d10d      	bne.n	801279a <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 801277e:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8012780:	2202      	movs	r2, #2
 8012782:	4621      	mov	r1, r4
 8012784:	4628      	mov	r0, r5
 8012786:	f7ff fdec 	bl	8012362 <SUBGRF_SetTxParams>
}
 801278a:	4628      	mov	r0, r5
 801278c:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 801278e:	2c0f      	cmp	r4, #15
 8012790:	dc01      	bgt.n	8012796 <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 8012792:	2501      	movs	r5, #1
 8012794:	e7f4      	b.n	8012780 <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 8012796:	2502      	movs	r5, #2
 8012798:	e7f2      	b.n	8012780 <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 801279a:	2501      	movs	r5, #1
 801279c:	e7f0      	b.n	8012780 <SUBGRF_SetRfTxPower+0x10>

0801279e <SUBGRF_GetRadioWakeUpTime>:
}
 801279e:	2001      	movs	r0, #1
 80127a0:	4770      	bx	lr
	...

080127a4 <HAL_SUBGHZ_TxCpltCallback>:
{
 80127a4:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 80127a6:	4b02      	ldr	r3, [pc, #8]	; (80127b0 <HAL_SUBGHZ_TxCpltCallback+0xc>)
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	2001      	movs	r0, #1
 80127ac:	4798      	blx	r3
}
 80127ae:	bd08      	pop	{r3, pc}
 80127b0:	200011cc 	.word	0x200011cc

080127b4 <HAL_SUBGHZ_RxCpltCallback>:
{
 80127b4:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 80127b6:	4b02      	ldr	r3, [pc, #8]	; (80127c0 <HAL_SUBGHZ_RxCpltCallback+0xc>)
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	2002      	movs	r0, #2
 80127bc:	4798      	blx	r3
}
 80127be:	bd08      	pop	{r3, pc}
 80127c0:	200011cc 	.word	0x200011cc

080127c4 <HAL_SUBGHZ_CRCErrorCallback>:
{
 80127c4:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 80127c6:	4b02      	ldr	r3, [pc, #8]	; (80127d0 <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	2040      	movs	r0, #64	; 0x40
 80127cc:	4798      	blx	r3
}
 80127ce:	bd08      	pop	{r3, pc}
 80127d0:	200011cc 	.word	0x200011cc

080127d4 <HAL_SUBGHZ_CADStatusCallback>:
{
 80127d4:	b508      	push	{r3, lr}
    switch (cadstatus)
 80127d6:	b111      	cbz	r1, 80127de <HAL_SUBGHZ_CADStatusCallback+0xa>
 80127d8:	2901      	cmp	r1, #1
 80127da:	d005      	beq.n	80127e8 <HAL_SUBGHZ_CADStatusCallback+0x14>
}
 80127dc:	bd08      	pop	{r3, pc}
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 80127de:	4b05      	ldr	r3, [pc, #20]	; (80127f4 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	2080      	movs	r0, #128	; 0x80
 80127e4:	4798      	blx	r3
            break;
 80127e6:	e7f9      	b.n	80127dc <HAL_SUBGHZ_CADStatusCallback+0x8>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 80127e8:	4b02      	ldr	r3, [pc, #8]	; (80127f4 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	f44f 7080 	mov.w	r0, #256	; 0x100
 80127f0:	4798      	blx	r3
}
 80127f2:	e7f3      	b.n	80127dc <HAL_SUBGHZ_CADStatusCallback+0x8>
 80127f4:	200011cc 	.word	0x200011cc

080127f8 <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 80127f8:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 80127fa:	4b03      	ldr	r3, [pc, #12]	; (8012808 <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8012802:	4798      	blx	r3
}
 8012804:	bd08      	pop	{r3, pc}
 8012806:	bf00      	nop
 8012808:	200011cc 	.word	0x200011cc

0801280c <HAL_SUBGHZ_HeaderErrorCallback>:
{
 801280c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801280e:	4b02      	ldr	r3, [pc, #8]	; (8012818 <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	2020      	movs	r0, #32
 8012814:	4798      	blx	r3
}
 8012816:	bd08      	pop	{r3, pc}
 8012818:	200011cc 	.word	0x200011cc

0801281c <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 801281c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801281e:	4b02      	ldr	r3, [pc, #8]	; (8012828 <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	2004      	movs	r0, #4
 8012824:	4798      	blx	r3
}
 8012826:	bd08      	pop	{r3, pc}
 8012828:	200011cc 	.word	0x200011cc

0801282c <HAL_SUBGHZ_SyncWordValidCallback>:
{
 801282c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801282e:	4b02      	ldr	r3, [pc, #8]	; (8012838 <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	2008      	movs	r0, #8
 8012834:	4798      	blx	r3
}
 8012836:	bd08      	pop	{r3, pc}
 8012838:	200011cc 	.word	0x200011cc

0801283c <HAL_SUBGHZ_HeaderValidCallback>:
{
 801283c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801283e:	4b02      	ldr	r3, [pc, #8]	; (8012848 <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	2010      	movs	r0, #16
 8012844:	4798      	blx	r3
}
 8012846:	bd08      	pop	{r3, pc}
 8012848:	200011cc 	.word	0x200011cc

0801284c <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 801284c:	4601      	mov	r1, r0
 801284e:	b188      	cbz	r0, 8012874 <SUBGRF_GetFskBandwidthRegValue+0x28>
    {
        return( 0x1F );
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8012850:	2300      	movs	r3, #0
 8012852:	2b15      	cmp	r3, #21
 8012854:	d80d      	bhi.n	8012872 <SUBGRF_GetFskBandwidthRegValue+0x26>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8012856:	4618      	mov	r0, r3
 8012858:	4a07      	ldr	r2, [pc, #28]	; (8012878 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 801285a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801285e:	428a      	cmp	r2, r1
 8012860:	d802      	bhi.n	8012868 <SUBGRF_GetFskBandwidthRegValue+0x1c>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8012862:	3301      	adds	r3, #1
 8012864:	b2db      	uxtb	r3, r3
 8012866:	e7f4      	b.n	8012852 <SUBGRF_GetFskBandwidthRegValue+0x6>
        {
            return FskBandwidths[i].RegValue;
 8012868:	4b03      	ldr	r3, [pc, #12]	; (8012878 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 801286a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 801286e:	7900      	ldrb	r0, [r0, #4]
 8012870:	4770      	bx	lr
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 8012872:	e7fe      	b.n	8012872 <SUBGRF_GetFskBandwidthRegValue+0x26>
        return( 0x1F );
 8012874:	201f      	movs	r0, #31
}
 8012876:	4770      	bx	lr
 8012878:	08014f90 	.word	0x08014f90

0801287c <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801287c:	b570      	push	{r4, r5, r6, lr}
 801287e:	b082      	sub	sp, #8
 8012880:	4606      	mov	r6, r0
 8012882:	460c      	mov	r4, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 8012884:	4b1d      	ldr	r3, [pc, #116]	; (80128fc <SUBGRF_GetCFO+0x80>)
 8012886:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 8012888:	f640 0007 	movw	r0, #2055	; 0x807
 801288c:	f7ff fcd6 	bl	801223c <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8012890:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 8012894:	3308      	adds	r3, #8
 8012896:	446b      	add	r3, sp
 8012898:	f813 5c04 	ldrb.w	r5, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 801289c:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 80128a0:	3b01      	subs	r3, #1
 80128a2:	fa05 f303 	lsl.w	r3, r5, r3
 80128a6:	4d16      	ldr	r5, [pc, #88]	; (8012900 <SUBGRF_GetCFO+0x84>)
 80128a8:	fbb5 f5f3 	udiv	r5, r5, r3
  uint32_t cf_osr = cf_fs / bitRate;
 80128ac:	fbb5 f2f6 	udiv	r2, r5, r6
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 80128b0:	2a07      	cmp	r2, #7
 80128b2:	d921      	bls.n	80128f8 <SUBGRF_GetCFO+0x7c>
  uint8_t interp = 1;
 80128b4:	2001      	movs	r0, #1
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 80128b6:	fb00 f202 	mul.w	r2, r0, r2
 80128ba:	2a03      	cmp	r2, #3
 80128bc:	d800      	bhi.n	80128c0 <SUBGRF_GetCFO+0x44>
  {
    interp = 4;
 80128be:	2004      	movs	r0, #4
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 80128c0:	fb00 f505 	mul.w	r5, r0, r5
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 80128c4:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 80128c8:	f7ff fcb8 	bl	801223c <SUBGRF_ReadRegister>
 80128cc:	0200      	lsls	r0, r0, #8
 80128ce:	f400 6670 	and.w	r6, r0, #3840	; 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 80128d2:	f240 60b1 	movw	r0, #1713	; 0x6b1
 80128d6:	f7ff fcb1 	bl	801223c <SUBGRF_ReadRegister>
 80128da:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 80128dc:	f410 6f00 	tst.w	r0, #2048	; 0x800
 80128e0:	d003      	beq.n	80128ea <SUBGRF_GetCFO+0x6e>
  {
    cfo_bin |= 0xFFFFF000;
 80128e2:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 80128e6:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 80128ea:	096d      	lsrs	r5, r5, #5
 80128ec:	fb05 f000 	mul.w	r0, r5, r0
 80128f0:	11c0      	asrs	r0, r0, #7
 80128f2:	6020      	str	r0, [r4, #0]
}
 80128f4:	b002      	add	sp, #8
 80128f6:	bd70      	pop	{r4, r5, r6, pc}
    interp = 2;
 80128f8:	2002      	movs	r0, #2
 80128fa:	e7dc      	b.n	80128b6 <SUBGRF_GetCFO+0x3a>
 80128fc:	0c0a0804 	.word	0x0c0a0804
 8012900:	01e84800 	.word	0x01e84800

08012904 <RFW_TransmitLongPacket>:
  }
#else
  status= -1;
#endif
  return status;
}
 8012904:	f04f 30ff 	mov.w	r0, #4294967295
 8012908:	4770      	bx	lr

0801290a <RFW_ReceiveLongPacket>:
  }
#else
  status= -1;
#endif
  return status;
}
 801290a:	f04f 30ff 	mov.w	r0, #4294967295
 801290e:	4770      	bx	lr

08012910 <RFW_DeInit>:
void RFW_DeInit( void)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 8012910:	4770      	bx	lr

08012912 <RFW_Is_Init>:
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
#endif
}
 8012912:	2000      	movs	r0, #0
 8012914:	4770      	bx	lr

08012916 <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
#endif
}
 8012916:	2000      	movs	r0, #0
 8012918:	4770      	bx	lr

0801291a <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 801291a:	4770      	bx	lr

0801291c <RFW_TransmitInit>:

    status= 0;
  }
#endif
  return status;
}
 801291c:	f04f 30ff 	mov.w	r0, #4294967295
 8012920:	4770      	bx	lr

08012922 <RFW_ReceiveInit>:
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
#endif
}
 8012922:	f04f 30ff 	mov.w	r0, #4294967295
 8012926:	4770      	bx	lr

08012928 <RFW_DeInit_TxLongPacket>:
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 8012928:	4770      	bx	lr

0801292a <RFW_ReceivePayload>:
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 801292a:	4770      	bx	lr

0801292c <RFW_SetRadioModem>:
void RFW_SetRadioModem(RadioModems_t Modem)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 801292c:	4770      	bx	lr
	...

08012930 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 8012930:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012932:	f3ef 8e10 	mrs	lr, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012936:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8012938:	4b1e      	ldr	r3, [pc, #120]	; (80129b4 <TRACE_AllocateBufer+0x84>)
 801293a:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 801293e:	8a1a      	ldrh	r2, [r3, #16]
 8012940:	4594      	cmp	ip, r2
 8012942:	d011      	beq.n	8012968 <TRACE_AllocateBufer+0x38>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8012944:	4594      	cmp	ip, r2
 8012946:	d921      	bls.n	801298c <TRACE_AllocateBufer+0x5c>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8012948:	f5cc 6380 	rsb	r3, ip, #1024	; 0x400
 801294c:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801294e:	4283      	cmp	r3, r0
 8012950:	d81f      	bhi.n	8012992 <TRACE_AllocateBufer+0x62>
 8012952:	4282      	cmp	r2, r0
 8012954:	d91d      	bls.n	8012992 <TRACE_AllocateBufer+0x62>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8012956:	4b17      	ldr	r3, [pc, #92]	; (80129b4 <TRACE_AllocateBufer+0x84>)
 8012958:	2401      	movs	r4, #1
 801295a:	709c      	strb	r4, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801295c:	f8a3 c000 	strh.w	ip, [r3]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8012960:	2400      	movs	r4, #0
 8012962:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8012964:	4613      	mov	r3, r2
 8012966:	e014      	b.n	8012992 <TRACE_AllocateBufer+0x62>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8012968:	f5cc 6380 	rsb	r3, ip, #1024	; 0x400
 801296c:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801296e:	4298      	cmp	r0, r3
 8012970:	d30f      	bcc.n	8012992 <TRACE_AllocateBufer+0x62>
 8012972:	4282      	cmp	r2, r0
 8012974:	d90d      	bls.n	8012992 <TRACE_AllocateBufer+0x62>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8012976:	4b0f      	ldr	r3, [pc, #60]	; (80129b4 <TRACE_AllocateBufer+0x84>)
 8012978:	2401      	movs	r4, #1
 801297a:	709c      	strb	r4, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801297c:	f8a3 c000 	strh.w	ip, [r3]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 8012980:	f04f 0c00 	mov.w	ip, #0
 8012984:	f8a3 c012 	strh.w	ip, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8012988:	4613      	mov	r3, r2
 801298a:	e002      	b.n	8012992 <TRACE_AllocateBufer+0x62>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801298c:	eba2 030c 	sub.w	r3, r2, ip
 8012990:	b29b      	uxth	r3, r3
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 8012992:	4283      	cmp	r3, r0
 8012994:	d90a      	bls.n	80129ac <TRACE_AllocateBufer+0x7c>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 8012996:	4a07      	ldr	r2, [pc, #28]	; (80129b4 <TRACE_AllocateBufer+0x84>)
 8012998:	8a53      	ldrh	r3, [r2, #18]
 801299a:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801299c:	4403      	add	r3, r0
 801299e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80129a2:	8253      	strh	r3, [r2, #18]
    ret = 0;
 80129a4:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80129a6:	f38e 8810 	msr	PRIMASK, lr
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 80129aa:	bd10      	pop	{r4, pc}
  int16_t ret = -1;
 80129ac:	f04f 30ff 	mov.w	r0, #4294967295
 80129b0:	e7f9      	b.n	80129a6 <TRACE_AllocateBufer+0x76>
 80129b2:	bf00      	nop
 80129b4:	200015d0 	.word	0x200015d0

080129b8 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80129b8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80129bc:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 80129be:	4a03      	ldr	r2, [pc, #12]	; (80129cc <TRACE_Lock+0x14>)
 80129c0:	8ad3      	ldrh	r3, [r2, #22]
 80129c2:	3301      	adds	r3, #1
 80129c4:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80129c6:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 80129ca:	4770      	bx	lr
 80129cc:	200015d0 	.word	0x200015d0

080129d0 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80129d0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80129d4:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 80129d6:	4a03      	ldr	r2, [pc, #12]	; (80129e4 <TRACE_UnLock+0x14>)
 80129d8:	8ad3      	ldrh	r3, [r2, #22]
 80129da:	3b01      	subs	r3, #1
 80129dc:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80129de:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 80129e2:	4770      	bx	lr
 80129e4:	200015d0 	.word	0x200015d0

080129e8 <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 80129e8:	4b02      	ldr	r3, [pc, #8]	; (80129f4 <TRACE_IsLocked+0xc>)
 80129ea:	8ad8      	ldrh	r0, [r3, #22]
}
 80129ec:	3800      	subs	r0, #0
 80129ee:	bf18      	it	ne
 80129f0:	2001      	movne	r0, #1
 80129f2:	4770      	bx	lr
 80129f4:	200015d0 	.word	0x200015d0

080129f8 <UTIL_ADV_TRACE_Init>:
{
 80129f8:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 80129fa:	2218      	movs	r2, #24
 80129fc:	2100      	movs	r1, #0
 80129fe:	4807      	ldr	r0, [pc, #28]	; (8012a1c <UTIL_ADV_TRACE_Init+0x24>)
 8012a00:	f000 f98f 	bl	8012d22 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 8012a04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012a08:	2100      	movs	r1, #0
 8012a0a:	4805      	ldr	r0, [pc, #20]	; (8012a20 <UTIL_ADV_TRACE_Init+0x28>)
 8012a0c:	f000 f989 	bl	8012d22 <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8012a10:	4b04      	ldr	r3, [pc, #16]	; (8012a24 <UTIL_ADV_TRACE_Init+0x2c>)
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	4804      	ldr	r0, [pc, #16]	; (8012a28 <UTIL_ADV_TRACE_Init+0x30>)
 8012a16:	4798      	blx	r3
}
 8012a18:	bd08      	pop	{r3, pc}
 8012a1a:	bf00      	nop
 8012a1c:	200015d0 	.word	0x200015d0
 8012a20:	200011d0 	.word	0x200011d0
 8012a24:	0801426c 	.word	0x0801426c
 8012a28:	08012bad 	.word	0x08012bad

08012a2c <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 8012a2c:	4b01      	ldr	r3, [pc, #4]	; (8012a34 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 8012a2e:	6058      	str	r0, [r3, #4]
}
 8012a30:	4770      	bx	lr
 8012a32:	bf00      	nop
 8012a34:	200015d0 	.word	0x200015d0

08012a38 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8012a38:	4b01      	ldr	r3, [pc, #4]	; (8012a40 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 8012a3a:	7218      	strb	r0, [r3, #8]
}
 8012a3c:	4770      	bx	lr
 8012a3e:	bf00      	nop
 8012a40:	200015d0 	.word	0x200015d0

08012a44 <TRACE_Send>:
{
 8012a44:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012a46:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012a4a:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 8012a4c:	f7ff ffcc 	bl	80129e8 <TRACE_IsLocked>
 8012a50:	b118      	cbz	r0, 8012a5a <TRACE_Send+0x16>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012a52:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8012a56:	2000      	movs	r0, #0
}
 8012a58:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 8012a5a:	f7ff ffad 	bl	80129b8 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 8012a5e:	4b1d      	ldr	r3, [pc, #116]	; (8012ad4 <TRACE_Send+0x90>)
 8012a60:	8a1a      	ldrh	r2, [r3, #16]
 8012a62:	8a5b      	ldrh	r3, [r3, #18]
 8012a64:	429a      	cmp	r2, r3
 8012a66:	d02e      	beq.n	8012ac6 <TRACE_Send+0x82>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8012a68:	491a      	ldr	r1, [pc, #104]	; (8012ad4 <TRACE_Send+0x90>)
 8012a6a:	7889      	ldrb	r1, [r1, #2]
 8012a6c:	2901      	cmp	r1, #1
 8012a6e:	d017      	beq.n	8012aa0 <TRACE_Send+0x5c>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8012a70:	4a18      	ldr	r2, [pc, #96]	; (8012ad4 <TRACE_Send+0x90>)
 8012a72:	7892      	ldrb	r2, [r2, #2]
 8012a74:	b932      	cbnz	r2, 8012a84 <TRACE_Send+0x40>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8012a76:	4a17      	ldr	r2, [pc, #92]	; (8012ad4 <TRACE_Send+0x90>)
 8012a78:	8a12      	ldrh	r2, [r2, #16]
 8012a7a:	4293      	cmp	r3, r2
 8012a7c:	d91e      	bls.n	8012abc <TRACE_Send+0x78>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8012a7e:	1a9b      	subs	r3, r3, r2
 8012a80:	4a14      	ldr	r2, [pc, #80]	; (8012ad4 <TRACE_Send+0x90>)
 8012a82:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8012a84:	4e13      	ldr	r6, [pc, #76]	; (8012ad4 <TRACE_Send+0x90>)
 8012a86:	8a33      	ldrh	r3, [r6, #16]
 8012a88:	4d13      	ldr	r5, [pc, #76]	; (8012ad8 <TRACE_Send+0x94>)
 8012a8a:	441d      	add	r5, r3
 8012a8c:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 8012a90:	f7ef f80c 	bl	8001aac <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8012a94:	4b11      	ldr	r3, [pc, #68]	; (8012adc <TRACE_Send+0x98>)
 8012a96:	68db      	ldr	r3, [r3, #12]
 8012a98:	8ab1      	ldrh	r1, [r6, #20]
 8012a9a:	4628      	mov	r0, r5
 8012a9c:	4798      	blx	r3
 8012a9e:	e7db      	b.n	8012a58 <TRACE_Send+0x14>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8012aa0:	480c      	ldr	r0, [pc, #48]	; (8012ad4 <TRACE_Send+0x90>)
 8012aa2:	8801      	ldrh	r1, [r0, #0]
 8012aa4:	1a8a      	subs	r2, r1, r2
 8012aa6:	b292      	uxth	r2, r2
 8012aa8:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8012aaa:	2102      	movs	r1, #2
 8012aac:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 8012aae:	2100      	movs	r1, #0
 8012ab0:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8012ab2:	2a00      	cmp	r2, #0
 8012ab4:	d1dc      	bne.n	8012a70 <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8012ab6:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 8012ab8:	8201      	strh	r1, [r0, #16]
 8012aba:	e7d9      	b.n	8012a70 <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8012abc:	f5c2 6380 	rsb	r3, r2, #1024	; 0x400
 8012ac0:	4a04      	ldr	r2, [pc, #16]	; (8012ad4 <TRACE_Send+0x90>)
 8012ac2:	8293      	strh	r3, [r2, #20]
 8012ac4:	e7de      	b.n	8012a84 <TRACE_Send+0x40>
      TRACE_UnLock();
 8012ac6:	f7ff ff83 	bl	80129d0 <TRACE_UnLock>
 8012aca:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8012ace:	2000      	movs	r0, #0
}
 8012ad0:	e7c2      	b.n	8012a58 <TRACE_Send+0x14>
 8012ad2:	bf00      	nop
 8012ad4:	200015d0 	.word	0x200015d0
 8012ad8:	200011d0 	.word	0x200011d0
 8012adc:	0801426c 	.word	0x0801426c

08012ae0 <UTIL_ADV_TRACE_COND_FSend>:
{
 8012ae0:	b408      	push	{r3}
 8012ae2:	b530      	push	{r4, r5, lr}
 8012ae4:	b086      	sub	sp, #24
 8012ae6:	9c09      	ldr	r4, [sp, #36]	; 0x24
  uint16_t timestamp_size = 0u;
 8012ae8:	2300      	movs	r3, #0
 8012aea:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 8012aee:	4b2c      	ldr	r3, [pc, #176]	; (8012ba0 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8012af0:	7a1b      	ldrb	r3, [r3, #8]
 8012af2:	4283      	cmp	r3, r0
 8012af4:	d34d      	bcc.n	8012b92 <UTIL_ADV_TRACE_COND_FSend+0xb2>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 8012af6:	4b2a      	ldr	r3, [pc, #168]	; (8012ba0 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8012af8:	68db      	ldr	r3, [r3, #12]
 8012afa:	ea31 0303 	bics.w	r3, r1, r3
 8012afe:	d14b      	bne.n	8012b98 <UTIL_ADV_TRACE_COND_FSend+0xb8>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 8012b00:	4b27      	ldr	r3, [pc, #156]	; (8012ba0 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8012b02:	685b      	ldr	r3, [r3, #4]
 8012b04:	b123      	cbz	r3, 8012b10 <UTIL_ADV_TRACE_COND_FSend+0x30>
 8012b06:	b11a      	cbz	r2, 8012b10 <UTIL_ADV_TRACE_COND_FSend+0x30>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 8012b08:	f10d 0102 	add.w	r1, sp, #2
 8012b0c:	a801      	add	r0, sp, #4
 8012b0e:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 8012b10:	ab0a      	add	r3, sp, #40	; 0x28
 8012b12:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8012b14:	4622      	mov	r2, r4
 8012b16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8012b1a:	4822      	ldr	r0, [pc, #136]	; (8012ba4 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8012b1c:	f000 fcd0 	bl	80134c0 <tiny_vsnprintf_like>
 8012b20:	b285      	uxth	r5, r0
  TRACE_Lock();
 8012b22:	f7ff ff49 	bl	80129b8 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 8012b26:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8012b2a:	4428      	add	r0, r5
 8012b2c:	4669      	mov	r1, sp
 8012b2e:	b280      	uxth	r0, r0
 8012b30:	f7ff fefe 	bl	8012930 <TRACE_AllocateBufer>
 8012b34:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012b38:	d026      	beq.n	8012b88 <UTIL_ADV_TRACE_COND_FSend+0xa8>
    for (idx = 0u; idx < timestamp_size; idx++)
 8012b3a:	2300      	movs	r3, #0
 8012b3c:	e00d      	b.n	8012b5a <UTIL_ADV_TRACE_COND_FSend+0x7a>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 8012b3e:	f8bd 2000 	ldrh.w	r2, [sp]
 8012b42:	f103 0118 	add.w	r1, r3, #24
 8012b46:	4469      	add	r1, sp
 8012b48:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 8012b4c:	4916      	ldr	r1, [pc, #88]	; (8012ba8 <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 8012b4e:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 8012b50:	3201      	adds	r2, #1
 8012b52:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 8012b56:	3301      	adds	r3, #1
 8012b58:	b29b      	uxth	r3, r3
 8012b5a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8012b5e:	429a      	cmp	r2, r3
 8012b60:	d8ed      	bhi.n	8012b3e <UTIL_ADV_TRACE_COND_FSend+0x5e>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8012b62:	f8bd 0000 	ldrh.w	r0, [sp]
 8012b66:	9b05      	ldr	r3, [sp, #20]
 8012b68:	4622      	mov	r2, r4
 8012b6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8012b6e:	4c0e      	ldr	r4, [pc, #56]	; (8012ba8 <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 8012b70:	4420      	add	r0, r4
 8012b72:	f000 fca5 	bl	80134c0 <tiny_vsnprintf_like>
    TRACE_UnLock();
 8012b76:	f7ff ff2b 	bl	80129d0 <TRACE_UnLock>
    return TRACE_Send();
 8012b7a:	f7ff ff63 	bl	8012a44 <TRACE_Send>
}
 8012b7e:	b006      	add	sp, #24
 8012b80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012b84:	b001      	add	sp, #4
 8012b86:	4770      	bx	lr
  TRACE_UnLock();
 8012b88:	f7ff ff22 	bl	80129d0 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 8012b8c:	f06f 0002 	mvn.w	r0, #2
 8012b90:	e7f5      	b.n	8012b7e <UTIL_ADV_TRACE_COND_FSend+0x9e>
    return UTIL_ADV_TRACE_GIVEUP;
 8012b92:	f06f 0004 	mvn.w	r0, #4
 8012b96:	e7f2      	b.n	8012b7e <UTIL_ADV_TRACE_COND_FSend+0x9e>
    return UTIL_ADV_TRACE_REGIONMASKED;
 8012b98:	f06f 0005 	mvn.w	r0, #5
 8012b9c:	e7ef      	b.n	8012b7e <UTIL_ADV_TRACE_COND_FSend+0x9e>
 8012b9e:	bf00      	nop
 8012ba0:	200015d0 	.word	0x200015d0
 8012ba4:	200015e8 	.word	0x200015e8
 8012ba8:	200011d0 	.word	0x200011d0

08012bac <TRACE_TxCpltCallback>:
{
 8012bac:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012bae:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012bb2:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 8012bb4:	4b25      	ldr	r3, [pc, #148]	; (8012c4c <TRACE_TxCpltCallback+0xa0>)
 8012bb6:	789b      	ldrb	r3, [r3, #2]
 8012bb8:	2b02      	cmp	r3, #2
 8012bba:	d016      	beq.n	8012bea <TRACE_TxCpltCallback+0x3e>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8012bbc:	4a23      	ldr	r2, [pc, #140]	; (8012c4c <TRACE_TxCpltCallback+0xa0>)
 8012bbe:	8a13      	ldrh	r3, [r2, #16]
 8012bc0:	8a90      	ldrh	r0, [r2, #20]
 8012bc2:	4403      	add	r3, r0
 8012bc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012bc8:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 8012bca:	4b20      	ldr	r3, [pc, #128]	; (8012c4c <TRACE_TxCpltCallback+0xa0>)
 8012bcc:	8a1a      	ldrh	r2, [r3, #16]
 8012bce:	8a5b      	ldrh	r3, [r3, #18]
 8012bd0:	429a      	cmp	r2, r3
 8012bd2:	d003      	beq.n	8012bdc <TRACE_TxCpltCallback+0x30>
 8012bd4:	481d      	ldr	r0, [pc, #116]	; (8012c4c <TRACE_TxCpltCallback+0xa0>)
 8012bd6:	8ac0      	ldrh	r0, [r0, #22]
 8012bd8:	2801      	cmp	r0, #1
 8012bda:	d00b      	beq.n	8012bf4 <TRACE_TxCpltCallback+0x48>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012bdc:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 8012be0:	f7ee ff6a 	bl	8001ab8 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 8012be4:	f7ff fef4 	bl	80129d0 <TRACE_UnLock>
}
 8012be8:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8012bea:	4b18      	ldr	r3, [pc, #96]	; (8012c4c <TRACE_TxCpltCallback+0xa0>)
 8012bec:	2200      	movs	r2, #0
 8012bee:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 8012bf0:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 8012bf2:	e7ea      	b.n	8012bca <TRACE_TxCpltCallback+0x1e>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8012bf4:	4815      	ldr	r0, [pc, #84]	; (8012c4c <TRACE_TxCpltCallback+0xa0>)
 8012bf6:	7880      	ldrb	r0, [r0, #2]
 8012bf8:	2801      	cmp	r0, #1
 8012bfa:	d014      	beq.n	8012c26 <TRACE_TxCpltCallback+0x7a>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8012bfc:	4a13      	ldr	r2, [pc, #76]	; (8012c4c <TRACE_TxCpltCallback+0xa0>)
 8012bfe:	7892      	ldrb	r2, [r2, #2]
 8012c00:	b932      	cbnz	r2, 8012c10 <TRACE_TxCpltCallback+0x64>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8012c02:	4a12      	ldr	r2, [pc, #72]	; (8012c4c <TRACE_TxCpltCallback+0xa0>)
 8012c04:	8a12      	ldrh	r2, [r2, #16]
 8012c06:	4293      	cmp	r3, r2
 8012c08:	d91b      	bls.n	8012c42 <TRACE_TxCpltCallback+0x96>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8012c0a:	1a9b      	subs	r3, r3, r2
 8012c0c:	4a0f      	ldr	r2, [pc, #60]	; (8012c4c <TRACE_TxCpltCallback+0xa0>)
 8012c0e:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8012c10:	4b0e      	ldr	r3, [pc, #56]	; (8012c4c <TRACE_TxCpltCallback+0xa0>)
 8012c12:	8a1a      	ldrh	r2, [r3, #16]
 8012c14:	480e      	ldr	r0, [pc, #56]	; (8012c50 <TRACE_TxCpltCallback+0xa4>)
 8012c16:	4410      	add	r0, r2
 8012c18:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8012c1c:	4a0d      	ldr	r2, [pc, #52]	; (8012c54 <TRACE_TxCpltCallback+0xa8>)
 8012c1e:	68d2      	ldr	r2, [r2, #12]
 8012c20:	8a99      	ldrh	r1, [r3, #20]
 8012c22:	4790      	blx	r2
 8012c24:	e7e0      	b.n	8012be8 <TRACE_TxCpltCallback+0x3c>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 8012c26:	4c09      	ldr	r4, [pc, #36]	; (8012c4c <TRACE_TxCpltCallback+0xa0>)
 8012c28:	8820      	ldrh	r0, [r4, #0]
 8012c2a:	1a82      	subs	r2, r0, r2
 8012c2c:	b292      	uxth	r2, r2
 8012c2e:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8012c30:	2002      	movs	r0, #2
 8012c32:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 8012c34:	2000      	movs	r0, #0
 8012c36:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8012c38:	2a00      	cmp	r2, #0
 8012c3a:	d1df      	bne.n	8012bfc <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8012c3c:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 8012c3e:	8220      	strh	r0, [r4, #16]
 8012c40:	e7dc      	b.n	8012bfc <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8012c42:	f5c2 6380 	rsb	r3, r2, #1024	; 0x400
 8012c46:	4a01      	ldr	r2, [pc, #4]	; (8012c4c <TRACE_TxCpltCallback+0xa0>)
 8012c48:	8293      	strh	r3, [r2, #20]
 8012c4a:	e7e1      	b.n	8012c10 <TRACE_TxCpltCallback+0x64>
 8012c4c:	200015d0 	.word	0x200015d0
 8012c50:	200011d0 	.word	0x200011d0
 8012c54:	0801426c 	.word	0x0801426c

08012c58 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8012c58:	2300      	movs	r3, #0
 8012c5a:	4a02      	ldr	r2, [pc, #8]	; (8012c64 <UTIL_LPM_Init+0xc>)
 8012c5c:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8012c5e:	4a02      	ldr	r2, [pc, #8]	; (8012c68 <UTIL_LPM_Init+0x10>)
 8012c60:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8012c62:	4770      	bx	lr
 8012c64:	200017ec 	.word	0x200017ec
 8012c68:	200017e8 	.word	0x200017e8

08012c6c <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012c6c:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012c70:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 8012c72:	b141      	cbz	r1, 8012c86 <UTIL_LPM_SetStopMode+0x1a>
 8012c74:	2901      	cmp	r1, #1
 8012c76:	d103      	bne.n	8012c80 <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8012c78:	4906      	ldr	r1, [pc, #24]	; (8012c94 <UTIL_LPM_SetStopMode+0x28>)
 8012c7a:	680a      	ldr	r2, [r1, #0]
 8012c7c:	4310      	orrs	r0, r2
 8012c7e:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012c80:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8012c84:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 8012c86:	4903      	ldr	r1, [pc, #12]	; (8012c94 <UTIL_LPM_SetStopMode+0x28>)
 8012c88:	680a      	ldr	r2, [r1, #0]
 8012c8a:	ea22 0000 	bic.w	r0, r2, r0
 8012c8e:	6008      	str	r0, [r1, #0]
      break;
 8012c90:	e7f6      	b.n	8012c80 <UTIL_LPM_SetStopMode+0x14>
 8012c92:	bf00      	nop
 8012c94:	200017ec 	.word	0x200017ec

08012c98 <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012c98:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012c9c:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 8012c9e:	b141      	cbz	r1, 8012cb2 <UTIL_LPM_SetOffMode+0x1a>
 8012ca0:	2901      	cmp	r1, #1
 8012ca2:	d103      	bne.n	8012cac <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8012ca4:	4906      	ldr	r1, [pc, #24]	; (8012cc0 <UTIL_LPM_SetOffMode+0x28>)
 8012ca6:	680a      	ldr	r2, [r1, #0]
 8012ca8:	4310      	orrs	r0, r2
 8012caa:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012cac:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8012cb0:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 8012cb2:	4903      	ldr	r1, [pc, #12]	; (8012cc0 <UTIL_LPM_SetOffMode+0x28>)
 8012cb4:	680a      	ldr	r2, [r1, #0]
 8012cb6:	ea22 0000 	bic.w	r0, r2, r0
 8012cba:	6008      	str	r0, [r1, #0]
      break;
 8012cbc:	e7f6      	b.n	8012cac <UTIL_LPM_SetOffMode+0x14>
 8012cbe:	bf00      	nop
 8012cc0:	200017e8 	.word	0x200017e8

08012cc4 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8012cc4:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012cc6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012cca:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8012ccc:	4b0c      	ldr	r3, [pc, #48]	; (8012d00 <UTIL_LPM_EnterLowPower+0x3c>)
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	b13b      	cbz	r3, 8012ce2 <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8012cd2:	4d0c      	ldr	r5, [pc, #48]	; (8012d04 <UTIL_LPM_EnterLowPower+0x40>)
 8012cd4:	682b      	ldr	r3, [r5, #0]
 8012cd6:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8012cd8:	686b      	ldr	r3, [r5, #4]
 8012cda:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012cdc:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8012ce0:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8012ce2:	4b09      	ldr	r3, [pc, #36]	; (8012d08 <UTIL_LPM_EnterLowPower+0x44>)
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	b12b      	cbz	r3, 8012cf4 <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 8012ce8:	4d06      	ldr	r5, [pc, #24]	; (8012d04 <UTIL_LPM_EnterLowPower+0x40>)
 8012cea:	68ab      	ldr	r3, [r5, #8]
 8012cec:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8012cee:	68eb      	ldr	r3, [r5, #12]
 8012cf0:	4798      	blx	r3
 8012cf2:	e7f3      	b.n	8012cdc <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 8012cf4:	4d03      	ldr	r5, [pc, #12]	; (8012d04 <UTIL_LPM_EnterLowPower+0x40>)
 8012cf6:	692b      	ldr	r3, [r5, #16]
 8012cf8:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8012cfa:	696b      	ldr	r3, [r5, #20]
 8012cfc:	4798      	blx	r3
 8012cfe:	e7ed      	b.n	8012cdc <UTIL_LPM_EnterLowPower+0x18>
 8012d00:	200017ec 	.word	0x200017ec
 8012d04:	080141d0 	.word	0x080141d0
 8012d08:	200017e8 	.word	0x200017e8

08012d0c <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 8012d0c:	e004      	b.n	8012d18 <UTIL_MEM_cpy_8+0xc>
    {
        *dst8++ = *src8++;
 8012d0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012d12:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 8012d16:	461a      	mov	r2, r3
 8012d18:	1e53      	subs	r3, r2, #1
 8012d1a:	b29b      	uxth	r3, r3
 8012d1c:	2a00      	cmp	r2, #0
 8012d1e:	d1f6      	bne.n	8012d0e <UTIL_MEM_cpy_8+0x2>
    }
}
 8012d20:	4770      	bx	lr

08012d22 <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 8012d22:	e002      	b.n	8012d2a <UTIL_MEM_set_8+0x8>
  {
    *dst8++ = value;
 8012d24:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 8012d28:	461a      	mov	r2, r3
 8012d2a:	1e53      	subs	r3, r2, #1
 8012d2c:	b29b      	uxth	r3, r3
 8012d2e:	2a00      	cmp	r2, #0
 8012d30:	d1f8      	bne.n	8012d24 <UTIL_MEM_set_8+0x2>
  }
}
 8012d32:	4770      	bx	lr

08012d34 <UTIL_SEQ_SetTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012d34:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012d38:	b672      	cpsid	i

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 8012d3a:	4a06      	ldr	r2, [pc, #24]	; (8012d54 <UTIL_SEQ_SetTask+0x20>)
 8012d3c:	6813      	ldr	r3, [r2, #0]
 8012d3e:	4303      	orrs	r3, r0
 8012d40:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8012d42:	4a05      	ldr	r2, [pc, #20]	; (8012d58 <UTIL_SEQ_SetTask+0x24>)
 8012d44:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 8012d48:	4318      	orrs	r0, r3
 8012d4a:	f842 0031 	str.w	r0, [r2, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012d4e:	f38c 8810 	msr	PRIMASK, ip

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 8012d52:	4770      	bx	lr
 8012d54:	20001814 	.word	0x20001814
 8012d58:	2000180c 	.word	0x2000180c

08012d5c <UTIL_SEQ_PreIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8012d5c:	4770      	bx	lr

08012d5e <UTIL_SEQ_PostIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8012d5e:	4770      	bx	lr

08012d60 <SEQ_BitPosition>:
uint8_t SEQ_BitPosition(uint32_t Value)
{
uint8_t n = 0U;
uint32_t lvalue = Value;

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8012d60:	0c03      	lsrs	r3, r0, #16
 8012d62:	041b      	lsls	r3, r3, #16
 8012d64:	b9b3      	cbnz	r3, 8012d94 <SEQ_BitPosition+0x34>
 8012d66:	0400      	lsls	r0, r0, #16
 8012d68:	2310      	movs	r3, #16
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8012d6a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012d6e:	d102      	bne.n	8012d76 <SEQ_BitPosition+0x16>
 8012d70:	3308      	adds	r3, #8
 8012d72:	b2db      	uxtb	r3, r3
 8012d74:	0200      	lsls	r0, r0, #8
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8012d76:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012d7a:	d102      	bne.n	8012d82 <SEQ_BitPosition+0x22>
 8012d7c:	3304      	adds	r3, #4
 8012d7e:	b2db      	uxtb	r3, r3
 8012d80:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8012d82:	0f00      	lsrs	r0, r0, #28
 8012d84:	4a04      	ldr	r2, [pc, #16]	; (8012d98 <SEQ_BitPosition+0x38>)
 8012d86:	5c10      	ldrb	r0, [r2, r0]
 8012d88:	4418      	add	r0, r3
 8012d8a:	b2c0      	uxtb	r0, r0

  return (uint8_t)(31U-n);
 8012d8c:	f1c0 001f 	rsb	r0, r0, #31
}
 8012d90:	b2c0      	uxtb	r0, r0
 8012d92:	4770      	bx	lr
uint8_t n = 0U;
 8012d94:	2300      	movs	r3, #0
 8012d96:	e7e8      	b.n	8012d6a <SEQ_BitPosition+0xa>
 8012d98:	08015040 	.word	0x08015040

08012d9c <UTIL_SEQ_Run>:
{
 8012d9c:	b538      	push	{r3, r4, r5, lr}
  super_mask_backup = SuperMask;
 8012d9e:	4b43      	ldr	r3, [pc, #268]	; (8012eac <UTIL_SEQ_Run+0x110>)
 8012da0:	681c      	ldr	r4, [r3, #0]
  SuperMask &= Mask_bm;
 8012da2:	4020      	ands	r0, r4
 8012da4:	6018      	str	r0, [r3, #0]
  local_taskset = TaskSet;
 8012da6:	4b42      	ldr	r3, [pc, #264]	; (8012eb0 <UTIL_SEQ_Run+0x114>)
 8012da8:	6819      	ldr	r1, [r3, #0]
  local_evtset = EvtSet;
 8012daa:	4b42      	ldr	r3, [pc, #264]	; (8012eb4 <UTIL_SEQ_Run+0x118>)
 8012dac:	681b      	ldr	r3, [r3, #0]
  local_taskmask = TaskMask;
 8012dae:	4a42      	ldr	r2, [pc, #264]	; (8012eb8 <UTIL_SEQ_Run+0x11c>)
 8012db0:	6810      	ldr	r0, [r2, #0]
  local_evtwaited =  EvtWaited;
 8012db2:	4a42      	ldr	r2, [pc, #264]	; (8012ebc <UTIL_SEQ_Run+0x120>)
 8012db4:	6812      	ldr	r2, [r2, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8012db6:	e030      	b.n	8012e1a <UTIL_SEQ_Run+0x7e>
      counter++;
 8012db8:	3301      	adds	r3, #1
 8012dba:	e035      	b.n	8012e28 <UTIL_SEQ_Run+0x8c>
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8012dbc:	4d40      	ldr	r5, [pc, #256]	; (8012ec0 <UTIL_SEQ_Run+0x124>)
 8012dbe:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8012dc2:	6868      	ldr	r0, [r5, #4]
 8012dc4:	4010      	ands	r0, r2
 8012dc6:	f7ff ffcb 	bl	8012d60 <SEQ_BitPosition>
 8012dca:	493e      	ldr	r1, [pc, #248]	; (8012ec4 <UTIL_SEQ_Run+0x128>)
 8012dcc:	6008      	str	r0, [r1, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8012dce:	686a      	ldr	r2, [r5, #4]
 8012dd0:	2301      	movs	r3, #1
 8012dd2:	fa03 f000 	lsl.w	r0, r3, r0
 8012dd6:	ea22 0000 	bic.w	r0, r2, r0
 8012dda:	6068      	str	r0, [r5, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012ddc:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012de0:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 8012de2:	680a      	ldr	r2, [r1, #0]
 8012de4:	fa03 f202 	lsl.w	r2, r3, r2
 8012de8:	ea6f 0c02 	mvn.w	ip, r2
 8012dec:	4830      	ldr	r0, [pc, #192]	; (8012eb0 <UTIL_SEQ_Run+0x114>)
 8012dee:	6801      	ldr	r1, [r0, #0]
 8012df0:	ea21 0202 	bic.w	r2, r1, r2
 8012df4:	6002      	str	r2, [r0, #0]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d12d      	bne.n	8012e56 <UTIL_SEQ_Run+0xba>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012dfa:	f385 8810 	msr	PRIMASK, r5
    TaskCb[CurrentTaskIdx]( );
 8012dfe:	4b31      	ldr	r3, [pc, #196]	; (8012ec4 <UTIL_SEQ_Run+0x128>)
 8012e00:	681a      	ldr	r2, [r3, #0]
 8012e02:	4b31      	ldr	r3, [pc, #196]	; (8012ec8 <UTIL_SEQ_Run+0x12c>)
 8012e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e08:	4798      	blx	r3
    local_taskset = TaskSet;
 8012e0a:	4b29      	ldr	r3, [pc, #164]	; (8012eb0 <UTIL_SEQ_Run+0x114>)
 8012e0c:	6819      	ldr	r1, [r3, #0]
    local_evtset = EvtSet;
 8012e0e:	4b29      	ldr	r3, [pc, #164]	; (8012eb4 <UTIL_SEQ_Run+0x118>)
 8012e10:	681b      	ldr	r3, [r3, #0]
    local_taskmask = TaskMask;
 8012e12:	4a29      	ldr	r2, [pc, #164]	; (8012eb8 <UTIL_SEQ_Run+0x11c>)
 8012e14:	6810      	ldr	r0, [r2, #0]
    local_evtwaited = EvtWaited;
 8012e16:	4a29      	ldr	r2, [pc, #164]	; (8012ebc <UTIL_SEQ_Run+0x120>)
 8012e18:	6812      	ldr	r2, [r2, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8012e1a:	4001      	ands	r1, r0
 8012e1c:	4d23      	ldr	r5, [pc, #140]	; (8012eac <UTIL_SEQ_Run+0x110>)
 8012e1e:	682d      	ldr	r5, [r5, #0]
 8012e20:	4229      	tst	r1, r5
 8012e22:	d021      	beq.n	8012e68 <UTIL_SEQ_Run+0xcc>
 8012e24:	4013      	ands	r3, r2
 8012e26:	d11f      	bne.n	8012e68 <UTIL_SEQ_Run+0xcc>
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8012e28:	4a25      	ldr	r2, [pc, #148]	; (8012ec0 <UTIL_SEQ_Run+0x124>)
 8012e2a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8012e2e:	4002      	ands	r2, r0
 8012e30:	422a      	tst	r2, r5
 8012e32:	d0c1      	beq.n	8012db8 <UTIL_SEQ_Run+0x1c>
    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8012e34:	4922      	ldr	r1, [pc, #136]	; (8012ec0 <UTIL_SEQ_Run+0x124>)
 8012e36:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8012e3a:	4002      	ands	r2, r0
 8012e3c:	402a      	ands	r2, r5
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8012e3e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012e42:	6849      	ldr	r1, [r1, #4]
 8012e44:	4211      	tst	r1, r2
 8012e46:	d1b9      	bne.n	8012dbc <UTIL_SEQ_Run+0x20>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8012e48:	491d      	ldr	r1, [pc, #116]	; (8012ec0 <UTIL_SEQ_Run+0x124>)
 8012e4a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8012e52:	6048      	str	r0, [r1, #4]
 8012e54:	e7b2      	b.n	8012dbc <UTIL_SEQ_Run+0x20>
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8012e56:	3b01      	subs	r3, #1
 8012e58:	4919      	ldr	r1, [pc, #100]	; (8012ec0 <UTIL_SEQ_Run+0x124>)
 8012e5a:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8012e5e:	ea0c 0202 	and.w	r2, ip, r2
 8012e62:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8012e66:	e7c6      	b.n	8012df6 <UTIL_SEQ_Run+0x5a>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8012e68:	4b16      	ldr	r3, [pc, #88]	; (8012ec4 <UTIL_SEQ_Run+0x128>)
 8012e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8012e6e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8012e70:	f7ff ff74 	bl	8012d5c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012e74:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012e78:	b672      	cpsid	i
  local_taskset = TaskSet;
 8012e7a:	4b0d      	ldr	r3, [pc, #52]	; (8012eb0 <UTIL_SEQ_Run+0x114>)
 8012e7c:	681b      	ldr	r3, [r3, #0]
  local_evtset = EvtSet;
 8012e7e:	4a0d      	ldr	r2, [pc, #52]	; (8012eb4 <UTIL_SEQ_Run+0x118>)
 8012e80:	6811      	ldr	r1, [r2, #0]
  local_taskmask = TaskMask;
 8012e82:	4a0d      	ldr	r2, [pc, #52]	; (8012eb8 <UTIL_SEQ_Run+0x11c>)
 8012e84:	6812      	ldr	r2, [r2, #0]
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8012e86:	4013      	ands	r3, r2
 8012e88:	4a08      	ldr	r2, [pc, #32]	; (8012eac <UTIL_SEQ_Run+0x110>)
 8012e8a:	6812      	ldr	r2, [r2, #0]
 8012e8c:	4213      	tst	r3, r2
 8012e8e:	d103      	bne.n	8012e98 <UTIL_SEQ_Run+0xfc>
    if ((local_evtset & EvtWaited)== 0U)
 8012e90:	4b0a      	ldr	r3, [pc, #40]	; (8012ebc <UTIL_SEQ_Run+0x120>)
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	420b      	tst	r3, r1
 8012e96:	d006      	beq.n	8012ea6 <UTIL_SEQ_Run+0x10a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012e98:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 8012e9c:	f7ff ff5f 	bl	8012d5e <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 8012ea0:	4b02      	ldr	r3, [pc, #8]	; (8012eac <UTIL_SEQ_Run+0x110>)
 8012ea2:	601c      	str	r4, [r3, #0]
}
 8012ea4:	bd38      	pop	{r3, r4, r5, pc}
      UTIL_SEQ_Idle( );
 8012ea6:	f7ee fd8b 	bl	80019c0 <UTIL_SEQ_Idle>
 8012eaa:	e7f5      	b.n	8012e98 <UTIL_SEQ_Run+0xfc>
 8012eac:	20000110 	.word	0x20000110
 8012eb0:	20001814 	.word	0x20001814
 8012eb4:	200017f4 	.word	0x200017f4
 8012eb8:	20000114 	.word	0x20000114
 8012ebc:	200017f8 	.word	0x200017f8
 8012ec0:	2000180c 	.word	0x2000180c
 8012ec4:	200017f0 	.word	0x200017f0
 8012ec8:	200017fc 	.word	0x200017fc

08012ecc <UTIL_SEQ_RegTask>:
{
 8012ecc:	b538      	push	{r3, r4, r5, lr}
 8012ece:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012ed0:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012ed4:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8012ed6:	f7ff ff43 	bl	8012d60 <SEQ_BitPosition>
 8012eda:	4b03      	ldr	r3, [pc, #12]	; (8012ee8 <UTIL_SEQ_RegTask+0x1c>)
 8012edc:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012ee0:	f385 8810 	msr	PRIMASK, r5
}
 8012ee4:	bd38      	pop	{r3, r4, r5, pc}
 8012ee6:	bf00      	nop
 8012ee8:	200017fc 	.word	0x200017fc

08012eec <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8012eec:	b082      	sub	sp, #8
 8012eee:	b082      	sub	sp, #8
 8012ef0:	f10d 0c08 	add.w	ip, sp, #8
 8012ef4:	e90c 0006 	stmdb	ip, {r1, r2}
 8012ef8:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 8012efa:	2200      	movs	r2, #0
 8012efc:	6002      	str	r2, [r0, #0]
 8012efe:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds + b.Seconds;
 8012f00:	440b      	add	r3, r1
 8012f02:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8012f04:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8012f08:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8012f0c:	440a      	add	r2, r1
 8012f0e:	b291      	uxth	r1, r2
 8012f10:	b212      	sxth	r2, r2
 8012f12:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 8012f14:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8012f18:	db04      	blt.n	8012f24 <SysTimeAdd+0x38>
  {
    c.Seconds++;
 8012f1a:	3301      	adds	r3, #1
 8012f1c:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 8012f1e:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 8012f22:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 8012f24:	b002      	add	sp, #8
 8012f26:	b002      	add	sp, #8
 8012f28:	4770      	bx	lr

08012f2a <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 8012f2a:	b082      	sub	sp, #8
 8012f2c:	b082      	sub	sp, #8
 8012f2e:	f10d 0c08 	add.w	ip, sp, #8
 8012f32:	e90c 0006 	stmdb	ip, {r1, r2}
 8012f36:	9303      	str	r3, [sp, #12]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 8012f38:	2200      	movs	r2, #0
 8012f3a:	6002      	str	r2, [r0, #0]
 8012f3c:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds - b.Seconds;
 8012f3e:	1acb      	subs	r3, r1, r3
 8012f40:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8012f42:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8012f46:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8012f4a:	1a52      	subs	r2, r2, r1
 8012f4c:	b291      	uxth	r1, r2
 8012f4e:	b212      	sxth	r2, r2
 8012f50:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds < 0 )
 8012f52:	2a00      	cmp	r2, #0
 8012f54:	db02      	blt.n	8012f5c <SysTimeSub+0x32>
  {
    c.Seconds--;
    c.SubSeconds += 1000;
  }
  return c;
}
 8012f56:	b002      	add	sp, #8
 8012f58:	b002      	add	sp, #8
 8012f5a:	4770      	bx	lr
    c.Seconds--;
 8012f5c:	3b01      	subs	r3, #1
 8012f5e:	6003      	str	r3, [r0, #0]
    c.SubSeconds += 1000;
 8012f60:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 8012f64:	8081      	strh	r1, [r0, #4]
  return c;
 8012f66:	e7f6      	b.n	8012f56 <SysTimeSub+0x2c>

08012f68 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8012f68:	b530      	push	{r4, r5, lr}
 8012f6a:	b089      	sub	sp, #36	; 0x24
 8012f6c:	ac02      	add	r4, sp, #8
 8012f6e:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8012f72:	2300      	movs	r3, #0
 8012f74:	9304      	str	r3, [sp, #16]
 8012f76:	f8ad 3014 	strh.w	r3, [sp, #20]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8012f7a:	4d0b      	ldr	r5, [pc, #44]	; (8012fa8 <SysTimeSet+0x40>)
 8012f7c:	692b      	ldr	r3, [r5, #16]
 8012f7e:	a805      	add	r0, sp, #20
 8012f80:	4798      	blx	r3
 8012f82:	4603      	mov	r3, r0
 8012f84:	9004      	str	r0, [sp, #16]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 8012f86:	9a05      	ldr	r2, [sp, #20]
 8012f88:	9200      	str	r2, [sp, #0]
 8012f8a:	e894 0006 	ldmia.w	r4, {r1, r2}
 8012f8e:	a806      	add	r0, sp, #24
 8012f90:	f7ff ffcb 	bl	8012f2a <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 8012f94:	682b      	ldr	r3, [r5, #0]
 8012f96:	9806      	ldr	r0, [sp, #24]
 8012f98:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 8012f9a:	68ab      	ldr	r3, [r5, #8]
 8012f9c:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8012fa0:	4798      	blx	r3
}
 8012fa2:	b009      	add	sp, #36	; 0x24
 8012fa4:	bd30      	pop	{r4, r5, pc}
 8012fa6:	bf00      	nop
 8012fa8:	0801422c 	.word	0x0801422c

08012fac <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8012fac:	b530      	push	{r4, r5, lr}
 8012fae:	b087      	sub	sp, #28
 8012fb0:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8012fb2:	2300      	movs	r3, #0
 8012fb4:	9304      	str	r3, [sp, #16]
 8012fb6:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 8012fba:	6003      	str	r3, [r0, #0]
 8012fbc:	8083      	strh	r3, [r0, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8012fbe:	4d0b      	ldr	r5, [pc, #44]	; (8012fec <SysTimeGet+0x40>)
 8012fc0:	692b      	ldr	r3, [r5, #16]
 8012fc2:	a805      	add	r0, sp, #20
 8012fc4:	4798      	blx	r3
 8012fc6:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8012fc8:	68eb      	ldr	r3, [r5, #12]
 8012fca:	4798      	blx	r3
 8012fcc:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8012fd0:	686b      	ldr	r3, [r5, #4]
 8012fd2:	4798      	blx	r3
 8012fd4:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 8012fd6:	9b05      	ldr	r3, [sp, #20]
 8012fd8:	9300      	str	r3, [sp, #0]
 8012fda:	9b04      	ldr	r3, [sp, #16]
 8012fdc:	aa02      	add	r2, sp, #8
 8012fde:	ca06      	ldmia	r2, {r1, r2}
 8012fe0:	4620      	mov	r0, r4
 8012fe2:	f7ff ff83 	bl	8012eec <SysTimeAdd>

  return sysTime;
}
 8012fe6:	4620      	mov	r0, r4
 8012fe8:	b007      	add	sp, #28
 8012fea:	bd30      	pop	{r4, r5, pc}
 8012fec:	0801422c 	.word	0x0801422c

08012ff0 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 8012ff0:	b530      	push	{r4, r5, lr}
 8012ff2:	b083      	sub	sp, #12
 8012ff4:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8012ff6:	2300      	movs	r3, #0
 8012ff8:	9300      	str	r3, [sp, #0]
 8012ffa:	f8ad 3004 	strh.w	r3, [sp, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8012ffe:	4b06      	ldr	r3, [pc, #24]	; (8013018 <SysTimeGetMcuTime+0x28>)
 8013000:	691b      	ldr	r3, [r3, #16]
 8013002:	466d      	mov	r5, sp
 8013004:	a801      	add	r0, sp, #4
 8013006:	4798      	blx	r3
 8013008:	9000      	str	r0, [sp, #0]

  return calendarTime;
 801300a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801300e:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8013012:	4620      	mov	r0, r4
 8013014:	b003      	add	sp, #12
 8013016:	bd30      	pop	{r4, r5, pc}
 8013018:	0801422c 	.word	0x0801422c

0801301c <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801301c:	b530      	push	{r4, r5, lr}
 801301e:	b089      	sub	sp, #36	; 0x24
 8013020:	ac02      	add	r4, sp, #8
 8013022:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8013026:	4d0c      	ldr	r5, [pc, #48]	; (8013058 <SysTimeToMs+0x3c>)
 8013028:	68eb      	ldr	r3, [r5, #12]
 801302a:	4798      	blx	r3
 801302c:	f8ad 001c 	strh.w	r0, [sp, #28]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8013030:	686b      	ldr	r3, [r5, #4]
 8013032:	4798      	blx	r3
 8013034:	4603      	mov	r3, r0
 8013036:	9006      	str	r0, [sp, #24]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 8013038:	9a07      	ldr	r2, [sp, #28]
 801303a:	9200      	str	r2, [sp, #0]
 801303c:	e894 0006 	ldmia.w	r4, {r1, r2}
 8013040:	a804      	add	r0, sp, #16
 8013042:	f7ff ff72 	bl	8012f2a <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 8013046:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
}
 801304a:	9a04      	ldr	r2, [sp, #16]
 801304c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8013050:	fb00 3002 	mla	r0, r0, r2, r3
 8013054:	b009      	add	sp, #36	; 0x24
 8013056:	bd30      	pop	{r4, r5, pc}
 8013058:	0801422c 	.word	0x0801422c

0801305c <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801305c:	b530      	push	{r4, r5, lr}
 801305e:	b087      	sub	sp, #28
 8013060:	4604      	mov	r4, r0
  uint32_t seconds = timeMs / 1000;
 8013062:	4b12      	ldr	r3, [pc, #72]	; (80130ac <SysTimeFromMs+0x50>)
 8013064:	fba3 2301 	umull	r2, r3, r3, r1
 8013068:	099b      	lsrs	r3, r3, #6
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801306a:	9304      	str	r3, [sp, #16]
 801306c:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8013070:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8013074:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
 8013078:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t DeltaTime = { 0 };
 801307c:	2300      	movs	r3, #0
 801307e:	9302      	str	r3, [sp, #8]
 8013080:	9303      	str	r3, [sp, #12]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8013082:	4d0b      	ldr	r5, [pc, #44]	; (80130b0 <SysTimeFromMs+0x54>)
 8013084:	68eb      	ldr	r3, [r5, #12]
 8013086:	4798      	blx	r3
 8013088:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801308c:	686b      	ldr	r3, [r5, #4]
 801308e:	4798      	blx	r3
 8013090:	4603      	mov	r3, r0
 8013092:	9002      	str	r0, [sp, #8]
  return SysTimeAdd( sysTime, DeltaTime );
 8013094:	9a03      	ldr	r2, [sp, #12]
 8013096:	9200      	str	r2, [sp, #0]
 8013098:	aa06      	add	r2, sp, #24
 801309a:	e912 0006 	ldmdb	r2, {r1, r2}
 801309e:	4620      	mov	r0, r4
 80130a0:	f7ff ff24 	bl	8012eec <SysTimeAdd>
}
 80130a4:	4620      	mov	r0, r4
 80130a6:	b007      	add	sp, #28
 80130a8:	bd30      	pop	{r4, r5, pc}
 80130aa:	bf00      	nop
 80130ac:	10624dd3 	.word	0x10624dd3
 80130b0:	0801422c 	.word	0x0801422c

080130b4 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 80130b4:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 80130b6:	4b03      	ldr	r3, [pc, #12]	; (80130c4 <UTIL_TIMER_Init+0x10>)
 80130b8:	2200      	movs	r2, #0
 80130ba:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 80130bc:	4b02      	ldr	r3, [pc, #8]	; (80130c8 <UTIL_TIMER_Init+0x14>)
 80130be:	681b      	ldr	r3, [r3, #0]
 80130c0:	4798      	blx	r3
}
 80130c2:	bd08      	pop	{r3, pc}
 80130c4:	20001818 	.word	0x20001818
 80130c8:	08014240 	.word	0x08014240

080130cc <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 80130cc:	b1a8      	cbz	r0, 80130fa <UTIL_TIMER_Create+0x2e>
{
 80130ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130d0:	4617      	mov	r7, r2
 80130d2:	461e      	mov	r6, r3
 80130d4:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 80130d6:	b193      	cbz	r3, 80130fe <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 80130d8:	2500      	movs	r5, #0
 80130da:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 80130dc:	4b09      	ldr	r3, [pc, #36]	; (8013104 <UTIL_TIMER_Create+0x38>)
 80130de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130e0:	4608      	mov	r0, r1
 80130e2:	4798      	blx	r3
 80130e4:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 80130e6:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 80130e8:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 80130ea:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 80130ec:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 80130ee:	9b06      	ldr	r3, [sp, #24]
 80130f0:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 80130f2:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 80130f4:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 80130f6:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 80130f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 80130fa:	2001      	movs	r0, #1
}
 80130fc:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 80130fe:	2001      	movs	r0, #1
 8013100:	e7fa      	b.n	80130f8 <UTIL_TIMER_Create+0x2c>
 8013102:	bf00      	nop
 8013104:	08014240 	.word	0x08014240

08013108 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8013108:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801310a:	4c03      	ldr	r4, [pc, #12]	; (8013118 <UTIL_TIMER_GetCurrentTime+0x10>)
 801310c:	69e3      	ldr	r3, [r4, #28]
 801310e:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 8013110:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013112:	4798      	blx	r3
}
 8013114:	bd10      	pop	{r4, pc}
 8013116:	bf00      	nop
 8013118:	08014240 	.word	0x08014240

0801311c <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801311c:	b570      	push	{r4, r5, r6, lr}
 801311e:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8013120:	4d05      	ldr	r5, [pc, #20]	; (8013138 <UTIL_TIMER_GetElapsedTime+0x1c>)
 8013122:	69eb      	ldr	r3, [r5, #28]
 8013124:	4798      	blx	r3
 8013126:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8013128:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801312a:	4630      	mov	r0, r6
 801312c:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801312e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8013130:	1a20      	subs	r0, r4, r0
 8013132:	4798      	blx	r3
}
 8013134:	bd70      	pop	{r4, r5, r6, pc}
 8013136:	bf00      	nop
 8013138:	08014240 	.word	0x08014240

0801313c <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801313c:	4b05      	ldr	r3, [pc, #20]	; (8013154 <TimerExists+0x18>)
 801313e:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 8013140:	e000      	b.n	8013144 <TimerExists+0x8>
  {
    if( cur == TimerObject )
    {
      return true;
    }
    cur = cur->Next;
 8013142:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 8013144:	b11b      	cbz	r3, 801314e <TimerExists+0x12>
    if( cur == TimerObject )
 8013146:	4283      	cmp	r3, r0
 8013148:	d1fb      	bne.n	8013142 <TimerExists+0x6>
      return true;
 801314a:	2001      	movs	r0, #1
  }
  return false;
}
 801314c:	4770      	bx	lr
  return false;
 801314e:	2000      	movs	r0, #0
 8013150:	4770      	bx	lr
 8013152:	bf00      	nop
 8013154:	20001818 	.word	0x20001818

08013158 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8013158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801315a:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801315c:	4e09      	ldr	r6, [pc, #36]	; (8013184 <TimerSetTimeout+0x2c>)
 801315e:	6a33      	ldr	r3, [r6, #32]
 8013160:	4798      	blx	r3
 8013162:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 8013164:	2301      	movs	r3, #1
 8013166:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8013168:	6827      	ldr	r7, [r4, #0]
 801316a:	69b6      	ldr	r6, [r6, #24]
 801316c:	47b0      	blx	r6
 801316e:	4428      	add	r0, r5
 8013170:	4287      	cmp	r7, r0
 8013172:	d202      	bcs.n	801317a <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8013174:	47b0      	blx	r6
 8013176:	4405      	add	r5, r0
 8013178:	6025      	str	r5, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801317a:	4b02      	ldr	r3, [pc, #8]	; (8013184 <TimerSetTimeout+0x2c>)
 801317c:	689b      	ldr	r3, [r3, #8]
 801317e:	6820      	ldr	r0, [r4, #0]
 8013180:	4798      	blx	r3
}
 8013182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013184:	08014240 	.word	0x08014240

08013188 <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 8013188:	b368      	cbz	r0, 80131e6 <UTIL_TIMER_Stop+0x5e>
{
 801318a:	b510      	push	{r4, lr}
 801318c:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801318e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013192:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8013194:	4b15      	ldr	r3, [pc, #84]	; (80131ec <UTIL_TIMER_Stop+0x64>)
 8013196:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 8013198:	2301      	movs	r3, #1
 801319a:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 801319c:	b1e1      	cbz	r1, 80131d8 <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 801319e:	2300      	movs	r3, #0
 80131a0:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 80131a2:	4288      	cmp	r0, r1
 80131a4:	d006      	beq.n	80131b4 <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 80131a6:	460b      	mov	r3, r1
        while( cur != NULL )
 80131a8:	b1b3      	cbz	r3, 80131d8 <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 80131aa:	4293      	cmp	r3, r2
 80131ac:	d011      	beq.n	80131d2 <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 80131ae:	4619      	mov	r1, r3
            cur = cur->Next;
 80131b0:	695b      	ldr	r3, [r3, #20]
 80131b2:	e7f9      	b.n	80131a8 <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 80131b4:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 80131b6:	6948      	ldr	r0, [r1, #20]
 80131b8:	b120      	cbz	r0, 80131c4 <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 80131ba:	4b0c      	ldr	r3, [pc, #48]	; (80131ec <UTIL_TIMER_Stop+0x64>)
 80131bc:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 80131be:	f7ff ffcb 	bl	8013158 <TimerSetTimeout>
 80131c2:	e009      	b.n	80131d8 <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 80131c4:	4b0a      	ldr	r3, [pc, #40]	; (80131f0 <UTIL_TIMER_Stop+0x68>)
 80131c6:	68db      	ldr	r3, [r3, #12]
 80131c8:	4798      	blx	r3
            TimerListHead = NULL;
 80131ca:	4b08      	ldr	r3, [pc, #32]	; (80131ec <UTIL_TIMER_Stop+0x64>)
 80131cc:	2200      	movs	r2, #0
 80131ce:	601a      	str	r2, [r3, #0]
 80131d0:	e002      	b.n	80131d8 <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 80131d2:	695b      	ldr	r3, [r3, #20]
 80131d4:	b123      	cbz	r3, 80131e0 <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 80131d6:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80131d8:	f384 8810 	msr	PRIMASK, r4
}
 80131dc:	2000      	movs	r0, #0
}
 80131de:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 80131e0:	2300      	movs	r3, #0
 80131e2:	614b      	str	r3, [r1, #20]
 80131e4:	e7f8      	b.n	80131d8 <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 80131e6:	2001      	movs	r0, #1
}
 80131e8:	4770      	bx	lr
 80131ea:	bf00      	nop
 80131ec:	20001818 	.word	0x20001818
 80131f0:	08014240 	.word	0x08014240

080131f4 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80131f4:	4b09      	ldr	r3, [pc, #36]	; (801321c <TimerInsertTimer+0x28>)
 80131f6:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 80131f8:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 80131fa:	e001      	b.n	8013200 <TimerInsertTimer+0xc>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
    {
        cur = next;
 80131fc:	461a      	mov	r2, r3
        next = next->Next;
 80131fe:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 8013200:	6951      	ldr	r1, [r2, #20]
 8013202:	b139      	cbz	r1, 8013214 <TimerInsertTimer+0x20>
    if( TimerObject->Timestamp  > next->Timestamp )
 8013204:	6819      	ldr	r1, [r3, #0]
 8013206:	f8d0 c000 	ldr.w	ip, [r0]
 801320a:	458c      	cmp	ip, r1
 801320c:	d8f6      	bhi.n	80131fc <TimerInsertTimer+0x8>
    }
    else
    {
        cur->Next = TimerObject;
 801320e:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 8013210:	6143      	str	r3, [r0, #20]
        return;
 8013212:	4770      	bx	lr

    }
  }
  cur->Next = TimerObject;
 8013214:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 8013216:	2300      	movs	r3, #0
 8013218:	6143      	str	r3, [r0, #20]
}
 801321a:	4770      	bx	lr
 801321c:	20001818 	.word	0x20001818

08013220 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 8013220:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8013222:	4b05      	ldr	r3, [pc, #20]	; (8013238 <TimerInsertNewHeadTimer+0x18>)
 8013224:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 8013226:	b10b      	cbz	r3, 801322c <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 8013228:	2200      	movs	r2, #0
 801322a:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801322c:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 801322e:	4b02      	ldr	r3, [pc, #8]	; (8013238 <TimerInsertNewHeadTimer+0x18>)
 8013230:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 8013232:	f7ff ff91 	bl	8013158 <TimerSetTimeout>
}
 8013236:	bd08      	pop	{r3, pc}
 8013238:	20001818 	.word	0x20001818

0801323c <UTIL_TIMER_Start>:
{
 801323c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801323e:	2800      	cmp	r0, #0
 8013240:	d036      	beq.n	80132b0 <UTIL_TIMER_Start+0x74>
 8013242:	4604      	mov	r4, r0
 8013244:	f7ff ff7a 	bl	801313c <TimerExists>
 8013248:	2800      	cmp	r0, #0
 801324a:	d134      	bne.n	80132b6 <UTIL_TIMER_Start+0x7a>
 801324c:	7a65      	ldrb	r5, [r4, #9]
 801324e:	2d00      	cmp	r5, #0
 8013250:	d133      	bne.n	80132ba <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013252:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013256:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 8013258:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801325a:	4b19      	ldr	r3, [pc, #100]	; (80132c0 <UTIL_TIMER_Start+0x84>)
 801325c:	6a1b      	ldr	r3, [r3, #32]
 801325e:	4798      	blx	r3
    if( ticks < minValue )
 8013260:	4287      	cmp	r7, r0
 8013262:	d300      	bcc.n	8013266 <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 8013264:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 8013266:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 8013268:	2300      	movs	r3, #0
 801326a:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 801326c:	2201      	movs	r2, #1
 801326e:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8013270:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 8013272:	4b14      	ldr	r3, [pc, #80]	; (80132c4 <UTIL_TIMER_Start+0x88>)
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	b183      	cbz	r3, 801329a <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8013278:	4b11      	ldr	r3, [pc, #68]	; (80132c0 <UTIL_TIMER_Start+0x84>)
 801327a:	699b      	ldr	r3, [r3, #24]
 801327c:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 801327e:	6823      	ldr	r3, [r4, #0]
 8013280:	4418      	add	r0, r3
 8013282:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8013284:	4b0f      	ldr	r3, [pc, #60]	; (80132c4 <UTIL_TIMER_Start+0x88>)
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	4298      	cmp	r0, r3
 801328c:	d20c      	bcs.n	80132a8 <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 801328e:	4620      	mov	r0, r4
 8013290:	f7ff ffc6 	bl	8013220 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013294:	f386 8810 	msr	PRIMASK, r6
}
 8013298:	e00b      	b.n	80132b2 <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 801329a:	4b09      	ldr	r3, [pc, #36]	; (80132c0 <UTIL_TIMER_Start+0x84>)
 801329c:	691b      	ldr	r3, [r3, #16]
 801329e:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 80132a0:	4620      	mov	r0, r4
 80132a2:	f7ff ffbd 	bl	8013220 <TimerInsertNewHeadTimer>
 80132a6:	e7f5      	b.n	8013294 <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 80132a8:	4620      	mov	r0, r4
 80132aa:	f7ff ffa3 	bl	80131f4 <TimerInsertTimer>
 80132ae:	e7f1      	b.n	8013294 <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 80132b0:	2501      	movs	r5, #1
}
 80132b2:	4628      	mov	r0, r5
 80132b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 80132b6:	2501      	movs	r5, #1
 80132b8:	e7fb      	b.n	80132b2 <UTIL_TIMER_Start+0x76>
 80132ba:	2501      	movs	r5, #1
 80132bc:	e7f9      	b.n	80132b2 <UTIL_TIMER_Start+0x76>
 80132be:	bf00      	nop
 80132c0:	08014240 	.word	0x08014240
 80132c4:	20001818 	.word	0x20001818

080132c8 <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 80132c8:	b198      	cbz	r0, 80132f2 <UTIL_TIMER_SetPeriod+0x2a>
{
 80132ca:	b510      	push	{r4, lr}
 80132cc:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 80132ce:	4b0a      	ldr	r3, [pc, #40]	; (80132f8 <UTIL_TIMER_SetPeriod+0x30>)
 80132d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132d2:	4608      	mov	r0, r1
 80132d4:	4798      	blx	r3
 80132d6:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 80132d8:	4620      	mov	r0, r4
 80132da:	f7ff ff2f 	bl	801313c <TimerExists>
 80132de:	b908      	cbnz	r0, 80132e4 <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 80132e0:	2000      	movs	r0, #0
}
 80132e2:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 80132e4:	4620      	mov	r0, r4
 80132e6:	f7ff ff4f 	bl	8013188 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 80132ea:	4620      	mov	r0, r4
 80132ec:	f7ff ffa6 	bl	801323c <UTIL_TIMER_Start>
 80132f0:	e7f7      	b.n	80132e2 <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 80132f2:	2001      	movs	r0, #1
}
 80132f4:	4770      	bx	lr
 80132f6:	bf00      	nop
 80132f8:	08014240 	.word	0x08014240

080132fc <UTIL_TIMER_IRQ_Handler>:
{
 80132fc:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80132fe:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013302:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 8013304:	4c1e      	ldr	r4, [pc, #120]	; (8013380 <UTIL_TIMER_IRQ_Handler+0x84>)
 8013306:	6963      	ldr	r3, [r4, #20]
 8013308:	4798      	blx	r3
 801330a:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801330c:	6923      	ldr	r3, [r4, #16]
 801330e:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 8013310:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 8013312:	4b1c      	ldr	r3, [pc, #112]	; (8013384 <UTIL_TIMER_IRQ_Handler+0x88>)
 8013314:	681b      	ldr	r3, [r3, #0]
 8013316:	b923      	cbnz	r3, 8013322 <UTIL_TIMER_IRQ_Handler+0x26>
 8013318:	e018      	b.n	801334c <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 801331a:	2200      	movs	r2, #0
 801331c:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 801331e:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 8013320:	b1a3      	cbz	r3, 801334c <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 8013322:	681a      	ldr	r2, [r3, #0]
 8013324:	42a2      	cmp	r2, r4
 8013326:	d9f8      	bls.n	801331a <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 8013328:	1a31      	subs	r1, r6, r0
 801332a:	440a      	add	r2, r1
 801332c:	601a      	str	r2, [r3, #0]
 801332e:	e7f6      	b.n	801331e <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 8013330:	4b14      	ldr	r3, [pc, #80]	; (8013384 <UTIL_TIMER_IRQ_Handler+0x88>)
 8013332:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 8013334:	6962      	ldr	r2, [r4, #20]
 8013336:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 8013338:	2300      	movs	r3, #0
 801333a:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 801333c:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 801333e:	68e3      	ldr	r3, [r4, #12]
 8013340:	6920      	ldr	r0, [r4, #16]
 8013342:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 8013344:	8963      	ldrh	r3, [r4, #10]
 8013346:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801334a:	d012      	beq.n	8013372 <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801334c:	4b0d      	ldr	r3, [pc, #52]	; (8013384 <UTIL_TIMER_IRQ_Handler+0x88>)
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	b13b      	cbz	r3, 8013362 <UTIL_TIMER_IRQ_Handler+0x66>
 8013352:	681c      	ldr	r4, [r3, #0]
 8013354:	2c00      	cmp	r4, #0
 8013356:	d0eb      	beq.n	8013330 <UTIL_TIMER_IRQ_Handler+0x34>
 8013358:	4b09      	ldr	r3, [pc, #36]	; (8013380 <UTIL_TIMER_IRQ_Handler+0x84>)
 801335a:	699b      	ldr	r3, [r3, #24]
 801335c:	4798      	blx	r3
 801335e:	4284      	cmp	r4, r0
 8013360:	d3e6      	bcc.n	8013330 <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 8013362:	4b08      	ldr	r3, [pc, #32]	; (8013384 <UTIL_TIMER_IRQ_Handler+0x88>)
 8013364:	6818      	ldr	r0, [r3, #0]
 8013366:	b108      	cbz	r0, 801336c <UTIL_TIMER_IRQ_Handler+0x70>
 8013368:	7a03      	ldrb	r3, [r0, #8]
 801336a:	b133      	cbz	r3, 801337a <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801336c:	f385 8810 	msr	PRIMASK, r5
}
 8013370:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 8013372:	4620      	mov	r0, r4
 8013374:	f7ff ff62 	bl	801323c <UTIL_TIMER_Start>
 8013378:	e7e8      	b.n	801334c <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 801337a:	f7ff feed 	bl	8013158 <TimerSetTimeout>
 801337e:	e7f5      	b.n	801336c <UTIL_TIMER_IRQ_Handler+0x70>
 8013380:	08014240 	.word	0x08014240
 8013384:	20001818 	.word	0x20001818

08013388 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 8013388:	4601      	mov	r1, r0
  int i = 0;
 801338a:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801338c:	e007      	b.n	801339e <ee_skip_atoi+0x16>
 801338e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8013392:	1c53      	adds	r3, r2, #1
 8013394:	600b      	str	r3, [r1, #0]
 8013396:	7813      	ldrb	r3, [r2, #0]
 8013398:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 801339c:	3830      	subs	r0, #48	; 0x30
 801339e:	680a      	ldr	r2, [r1, #0]
 80133a0:	7813      	ldrb	r3, [r2, #0]
 80133a2:	3b30      	subs	r3, #48	; 0x30
 80133a4:	b2db      	uxtb	r3, r3
 80133a6:	2b09      	cmp	r3, #9
 80133a8:	d9f1      	bls.n	801338e <ee_skip_atoi+0x6>
  return i;
}
 80133aa:	4770      	bx	lr

080133ac <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 80133ac:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 80133b0:	b093      	sub	sp, #76	; 0x4c
 80133b2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80133b4:	9e1c      	ldr	r6, [sp, #112]	; 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 80133b6:	f016 0f40 	tst.w	r6, #64	; 0x40
 80133ba:	d110      	bne.n	80133de <ee_number+0x32>
  char *dig = lower_digits;
 80133bc:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 80134b8 <ee_number+0x10c>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 80133c0:	1e9f      	subs	r7, r3, #2
 80133c2:	2f22      	cmp	r7, #34	; 0x22
 80133c4:	d875      	bhi.n	80134b2 <ee_number+0x106>

  c = (type & ZEROPAD) ? '0' : ' ';
 80133c6:	f016 0401 	ands.w	r4, r6, #1
 80133ca:	d00b      	beq.n	80133e4 <ee_number+0x38>
 80133cc:	f04f 0e30 	mov.w	lr, #48	; 0x30
  sign = 0;
  if (type & SIGN)
 80133d0:	f016 0f02 	tst.w	r6, #2
 80133d4:	d00f      	beq.n	80133f6 <ee_number+0x4a>
  {
    if (num < 0)
 80133d6:	2a00      	cmp	r2, #0
 80133d8:	db07      	blt.n	80133ea <ee_number+0x3e>
  sign = 0;
 80133da:	2700      	movs	r7, #0
 80133dc:	e00c      	b.n	80133f8 <ee_number+0x4c>
  if (type & UPPERCASE)  dig = upper_digits;
 80133de:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 80134bc <ee_number+0x110>
 80133e2:	e7ed      	b.n	80133c0 <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 80133e4:	f04f 0e20 	mov.w	lr, #32
 80133e8:	e7f2      	b.n	80133d0 <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 80133ea:	4252      	negs	r2, r2
      size--;
 80133ec:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80133ee:	3e01      	subs	r6, #1
 80133f0:	961a      	str	r6, [sp, #104]	; 0x68
      sign = '-';
 80133f2:	272d      	movs	r7, #45	; 0x2d
 80133f4:	e000      	b.n	80133f8 <ee_number+0x4c>
  sign = 0;
 80133f6:	2700      	movs	r7, #0
  }
#endif

  i = 0;

  if (num == 0)
 80133f8:	bb5a      	cbnz	r2, 8013452 <ee_number+0xa6>
    tmp[i++] = '0';
 80133fa:	2330      	movs	r3, #48	; 0x30
 80133fc:	f88d 3004 	strb.w	r3, [sp, #4]
 8013400:	f04f 0c01 	mov.w	ip, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 8013404:	45ac      	cmp	ip, r5
 8013406:	dd00      	ble.n	801340a <ee_number+0x5e>
 8013408:	4665      	mov	r5, ip
  size -= precision;
 801340a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801340c:	1b5b      	subs	r3, r3, r5
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801340e:	b31c      	cbz	r4, 8013458 <ee_number+0xac>
  if (sign) ASSIGN_STR(sign);
 8013410:	b11f      	cbz	r7, 801341a <ee_number+0x6e>
 8013412:	f800 7b01 	strb.w	r7, [r0], #1
 8013416:	3901      	subs	r1, #1
 8013418:	d007      	beq.n	801342a <ee_number+0x7e>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801341a:	2b00      	cmp	r3, #0
 801341c:	f103 33ff 	add.w	r3, r3, #4294967295
 8013420:	dd24      	ble.n	801346c <ee_number+0xc0>
 8013422:	f800 eb01 	strb.w	lr, [r0], #1
 8013426:	3901      	subs	r1, #1
 8013428:	d1f7      	bne.n	801341a <ee_number+0x6e>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 801342a:	b013      	add	sp, #76	; 0x4c
 801342c:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8013430:	fbb2 f6f3 	udiv	r6, r2, r3
 8013434:	fb03 2216 	mls	r2, r3, r6, r2
 8013438:	f81a 8002 	ldrb.w	r8, [sl, r2]
 801343c:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 8013440:	446a      	add	r2, sp
 8013442:	f802 8c44 	strb.w	r8, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 8013446:	4632      	mov	r2, r6
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8013448:	f10c 0c01 	add.w	ip, ip, #1
    while (num != 0)
 801344c:	2a00      	cmp	r2, #0
 801344e:	d1ef      	bne.n	8013430 <ee_number+0x84>
 8013450:	e7d8      	b.n	8013404 <ee_number+0x58>
  i = 0;
 8013452:	f04f 0c00 	mov.w	ip, #0
 8013456:	e7f9      	b.n	801344c <ee_number+0xa0>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8013458:	2b00      	cmp	r3, #0
 801345a:	f103 33ff 	add.w	r3, r3, #4294967295
 801345e:	ddd7      	ble.n	8013410 <ee_number+0x64>
 8013460:	2220      	movs	r2, #32
 8013462:	f800 2b01 	strb.w	r2, [r0], #1
 8013466:	3901      	subs	r1, #1
 8013468:	d1f6      	bne.n	8013458 <ee_number+0xac>
 801346a:	e7de      	b.n	801342a <ee_number+0x7e>
  while (i < precision--) ASSIGN_STR('0');
 801346c:	4565      	cmp	r5, ip
 801346e:	f105 35ff 	add.w	r5, r5, #4294967295
 8013472:	dd05      	ble.n	8013480 <ee_number+0xd4>
 8013474:	2230      	movs	r2, #48	; 0x30
 8013476:	f800 2b01 	strb.w	r2, [r0], #1
 801347a:	3901      	subs	r1, #1
 801347c:	d1f6      	bne.n	801346c <ee_number+0xc0>
 801347e:	e7d4      	b.n	801342a <ee_number+0x7e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8013480:	4662      	mov	r2, ip
 8013482:	2a00      	cmp	r2, #0
 8013484:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013488:	dd09      	ble.n	801349e <ee_number+0xf2>
 801348a:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 801348e:	446a      	add	r2, sp
 8013490:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 8013494:	f800 2b01 	strb.w	r2, [r0], #1
 8013498:	3901      	subs	r1, #1
 801349a:	d1f1      	bne.n	8013480 <ee_number+0xd4>
 801349c:	e7c5      	b.n	801342a <ee_number+0x7e>
  while (size-- > 0) ASSIGN_STR(' ');
 801349e:	2b00      	cmp	r3, #0
 80134a0:	f103 33ff 	add.w	r3, r3, #4294967295
 80134a4:	ddc1      	ble.n	801342a <ee_number+0x7e>
 80134a6:	2220      	movs	r2, #32
 80134a8:	f800 2b01 	strb.w	r2, [r0], #1
 80134ac:	3901      	subs	r1, #1
 80134ae:	d1f6      	bne.n	801349e <ee_number+0xf2>
 80134b0:	e7bb      	b.n	801342a <ee_number+0x7e>
  if (base < 2 || base > 36) return 0;
 80134b2:	2000      	movs	r0, #0
 80134b4:	e7b9      	b.n	801342a <ee_number+0x7e>
 80134b6:	bf00      	nop
 80134b8:	08015078 	.word	0x08015078
 80134bc:	08015050 	.word	0x08015050

080134c0 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 80134c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80134c4:	b087      	sub	sp, #28
 80134c6:	9205      	str	r2, [sp, #20]
 80134c8:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 80134ca:	1e0f      	subs	r7, r1, #0
 80134cc:	f340 80b8 	ble.w	8013640 <tiny_vsnprintf_like+0x180>
 80134d0:	4606      	mov	r6, r0
  {
    return 0;
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 80134d2:	4604      	mov	r4, r0
 80134d4:	e004      	b.n	80134e0 <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);

    if (*fmt != '%')
    {
      *str++ = *fmt;
 80134d6:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 80134da:	9b05      	ldr	r3, [sp, #20]
 80134dc:	3301      	adds	r3, #1
 80134de:	9305      	str	r3, [sp, #20]
 80134e0:	9905      	ldr	r1, [sp, #20]
 80134e2:	780a      	ldrb	r2, [r1, #0]
 80134e4:	b922      	cbnz	r2, 80134f0 <tiny_vsnprintf_like+0x30>
 80134e6:	1ba3      	subs	r3, r4, r6
 80134e8:	1e78      	subs	r0, r7, #1
 80134ea:	4283      	cmp	r3, r0
 80134ec:	f2c0 80a2 	blt.w	8013634 <tiny_vsnprintf_like+0x174>
    CHECK_STR_SIZE(buf, str, size);
 80134f0:	1ba3      	subs	r3, r4, r6
 80134f2:	f107 38ff 	add.w	r8, r7, #4294967295
 80134f6:	4543      	cmp	r3, r8
 80134f8:	f280 809c 	bge.w	8013634 <tiny_vsnprintf_like+0x174>
    if (*fmt != '%')
 80134fc:	2a25      	cmp	r2, #37	; 0x25
 80134fe:	d1ea      	bne.n	80134d6 <tiny_vsnprintf_like+0x16>

    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 8013500:	1c4b      	adds	r3, r1, #1
 8013502:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 8013504:	784b      	ldrb	r3, [r1, #1]
 8013506:	2b30      	cmp	r3, #48	; 0x30
 8013508:	d020      	beq.n	801354c <tiny_vsnprintf_like+0x8c>
    flags = 0;
 801350a:	f04f 0900 	mov.w	r9, #0
    }
#endif

    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 801350e:	3b30      	subs	r3, #48	; 0x30
 8013510:	b2db      	uxtb	r3, r3
 8013512:	2b09      	cmp	r3, #9
 8013514:	d91d      	bls.n	8013552 <tiny_vsnprintf_like+0x92>
    field_width = -1;
 8013516:	f04f 35ff 	mov.w	r5, #4294967295
#endif

    // Default base
    base = 10;

    switch (*fmt)
 801351a:	9b05      	ldr	r3, [sp, #20]
 801351c:	781a      	ldrb	r2, [r3, #0]
 801351e:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 8013522:	2b20      	cmp	r3, #32
 8013524:	d867      	bhi.n	80135f6 <tiny_vsnprintf_like+0x136>
 8013526:	e8df f003 	tbb	[pc, r3]
 801352a:	664a      	.short	0x664a
 801352c:	66666666 	.word	0x66666666
 8013530:	66666666 	.word	0x66666666
 8013534:	66621e66 	.word	0x66621e66
 8013538:	62666666 	.word	0x62666666
 801353c:	66666666 	.word	0x66666666
 8013540:	66666666 	.word	0x66666666
 8013544:	19662866 	.word	0x19662866
 8013548:	6666      	.short	0x6666
 801354a:	7c          	.byte	0x7c
 801354b:	00          	.byte	0x00
      flags |= ZEROPAD;
 801354c:	f04f 0901 	mov.w	r9, #1
 8013550:	e7dd      	b.n	801350e <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 8013552:	a805      	add	r0, sp, #20
 8013554:	f7ff ff18 	bl	8013388 <ee_skip_atoi>
 8013558:	4605      	mov	r5, r0
 801355a:	e7de      	b.n	801351a <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 801355c:	230a      	movs	r3, #10
 801355e:	e031      	b.n	80135c4 <tiny_vsnprintf_like+0x104>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 8013560:	2320      	movs	r3, #32
 8013562:	f804 3b01 	strb.w	r3, [r4], #1
 8013566:	3d01      	subs	r5, #1
 8013568:	2d00      	cmp	r5, #0
 801356a:	dcf9      	bgt.n	8013560 <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 801356c:	9b04      	ldr	r3, [sp, #16]
 801356e:	1d1a      	adds	r2, r3, #4
 8013570:	9204      	str	r2, [sp, #16]
 8013572:	781b      	ldrb	r3, [r3, #0]
 8013574:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 8013578:	e7af      	b.n	80134da <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 801357a:	9b04      	ldr	r3, [sp, #16]
 801357c:	1d1a      	adds	r2, r3, #4
 801357e:	9204      	str	r2, [sp, #16]
 8013580:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 8013584:	f1b8 0f00 	cmp.w	r8, #0
 8013588:	d003      	beq.n	8013592 <tiny_vsnprintf_like+0xd2>
#ifdef TINY_PRINTF
        len = strlen(s);
 801358a:	4640      	mov	r0, r8
 801358c:	f7ec fdf8 	bl	8000180 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 8013590:	e006      	b.n	80135a0 <tiny_vsnprintf_like+0xe0>
        if (!s) s = "<NULL>";
 8013592:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8013644 <tiny_vsnprintf_like+0x184>
 8013596:	e7f8      	b.n	801358a <tiny_vsnprintf_like+0xca>
          while (len < field_width--) *str++ = ' ';
 8013598:	2220      	movs	r2, #32
 801359a:	f804 2b01 	strb.w	r2, [r4], #1
 801359e:	461d      	mov	r5, r3
 80135a0:	1e6b      	subs	r3, r5, #1
 80135a2:	4285      	cmp	r5, r0
 80135a4:	dcf8      	bgt.n	8013598 <tiny_vsnprintf_like+0xd8>
        for (i = 0; i < len; ++i) *str++ = *s++;
 80135a6:	2200      	movs	r2, #0
 80135a8:	e006      	b.n	80135b8 <tiny_vsnprintf_like+0xf8>
 80135aa:	4643      	mov	r3, r8
 80135ac:	f813 1b01 	ldrb.w	r1, [r3], #1
 80135b0:	f804 1b01 	strb.w	r1, [r4], #1
 80135b4:	3201      	adds	r2, #1
 80135b6:	4698      	mov	r8, r3
 80135b8:	4282      	cmp	r2, r0
 80135ba:	dbf6      	blt.n	80135aa <tiny_vsnprintf_like+0xea>
 80135bc:	e78d      	b.n	80134da <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 80135be:	f049 0940 	orr.w	r9, r9, #64	; 0x40

      case 'x':
        base = 16;
 80135c2:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 80135c4:	f019 0f02 	tst.w	r9, #2
 80135c8:	d02f      	beq.n	801362a <tiny_vsnprintf_like+0x16a>
      num = va_arg(args, int);
 80135ca:	9a04      	ldr	r2, [sp, #16]
 80135cc:	1d11      	adds	r1, r2, #4
 80135ce:	9104      	str	r1, [sp, #16]
 80135d0:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 80135d2:	1ba1      	subs	r1, r4, r6
 80135d4:	f8cd 9008 	str.w	r9, [sp, #8]
 80135d8:	f04f 30ff 	mov.w	r0, #4294967295
 80135dc:	9001      	str	r0, [sp, #4]
 80135de:	9500      	str	r5, [sp, #0]
 80135e0:	eba8 0101 	sub.w	r1, r8, r1
 80135e4:	4620      	mov	r0, r4
 80135e6:	f7ff fee1 	bl	80133ac <ee_number>
 80135ea:	4604      	mov	r4, r0
 80135ec:	e775      	b.n	80134da <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 80135ee:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 80135f2:	230a      	movs	r3, #10
 80135f4:	e7e6      	b.n	80135c4 <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 80135f6:	2a25      	cmp	r2, #37	; 0x25
 80135f8:	d002      	beq.n	8013600 <tiny_vsnprintf_like+0x140>
 80135fa:	2325      	movs	r3, #37	; 0x25
 80135fc:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8013600:	1ba3      	subs	r3, r4, r6
 8013602:	4598      	cmp	r8, r3
 8013604:	dd0f      	ble.n	8013626 <tiny_vsnprintf_like+0x166>
        if (*fmt)
 8013606:	9b05      	ldr	r3, [sp, #20]
 8013608:	781a      	ldrb	r2, [r3, #0]
 801360a:	b13a      	cbz	r2, 801361c <tiny_vsnprintf_like+0x15c>
          *str++ = *fmt;
 801360c:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8013610:	1ba3      	subs	r3, r4, r6
 8013612:	4598      	cmp	r8, r3
 8013614:	f73f af61 	bgt.w	80134da <tiny_vsnprintf_like+0x1a>
    base = 10;
 8013618:	230a      	movs	r3, #10
    if (qualifier == 'l')
 801361a:	e7d3      	b.n	80135c4 <tiny_vsnprintf_like+0x104>
          --fmt;
 801361c:	3b01      	subs	r3, #1
 801361e:	9305      	str	r3, [sp, #20]
 8013620:	e7f6      	b.n	8013610 <tiny_vsnprintf_like+0x150>
        base = 16;
 8013622:	2310      	movs	r3, #16
 8013624:	e7ce      	b.n	80135c4 <tiny_vsnprintf_like+0x104>
    base = 10;
 8013626:	230a      	movs	r3, #10
 8013628:	e7cc      	b.n	80135c4 <tiny_vsnprintf_like+0x104>
      num = va_arg(args, unsigned int);
 801362a:	9a04      	ldr	r2, [sp, #16]
 801362c:	1d11      	adds	r1, r2, #4
 801362e:	9104      	str	r1, [sp, #16]
 8013630:	6812      	ldr	r2, [r2, #0]
 8013632:	e7ce      	b.n	80135d2 <tiny_vsnprintf_like+0x112>
  }

  *str = '\0';
 8013634:	2300      	movs	r3, #0
 8013636:	7023      	strb	r3, [r4, #0]
  return str - buf;
 8013638:	1ba0      	subs	r0, r4, r6
}
 801363a:	b007      	add	sp, #28
 801363c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 8013640:	2000      	movs	r0, #0
 8013642:	e7fa      	b.n	801363a <tiny_vsnprintf_like+0x17a>
 8013644:	080150a0 	.word	0x080150a0

08013648 <__errno>:
 8013648:	4b01      	ldr	r3, [pc, #4]	; (8013650 <__errno+0x8>)
 801364a:	6818      	ldr	r0, [r3, #0]
 801364c:	4770      	bx	lr
 801364e:	bf00      	nop
 8013650:	20000118 	.word	0x20000118

08013654 <__libc_init_array>:
 8013654:	b570      	push	{r4, r5, r6, lr}
 8013656:	4d0d      	ldr	r5, [pc, #52]	; (801368c <__libc_init_array+0x38>)
 8013658:	4c0d      	ldr	r4, [pc, #52]	; (8013690 <__libc_init_array+0x3c>)
 801365a:	1b64      	subs	r4, r4, r5
 801365c:	10a4      	asrs	r4, r4, #2
 801365e:	2600      	movs	r6, #0
 8013660:	42a6      	cmp	r6, r4
 8013662:	d109      	bne.n	8013678 <__libc_init_array+0x24>
 8013664:	4d0b      	ldr	r5, [pc, #44]	; (8013694 <__libc_init_array+0x40>)
 8013666:	4c0c      	ldr	r4, [pc, #48]	; (8013698 <__libc_init_array+0x44>)
 8013668:	f000 fd1e 	bl	80140a8 <_init>
 801366c:	1b64      	subs	r4, r4, r5
 801366e:	10a4      	asrs	r4, r4, #2
 8013670:	2600      	movs	r6, #0
 8013672:	42a6      	cmp	r6, r4
 8013674:	d105      	bne.n	8013682 <__libc_init_array+0x2e>
 8013676:	bd70      	pop	{r4, r5, r6, pc}
 8013678:	f855 3b04 	ldr.w	r3, [r5], #4
 801367c:	4798      	blx	r3
 801367e:	3601      	adds	r6, #1
 8013680:	e7ee      	b.n	8013660 <__libc_init_array+0xc>
 8013682:	f855 3b04 	ldr.w	r3, [r5], #4
 8013686:	4798      	blx	r3
 8013688:	3601      	adds	r6, #1
 801368a:	e7f2      	b.n	8013672 <__libc_init_array+0x1e>
 801368c:	080150e8 	.word	0x080150e8
 8013690:	080150e8 	.word	0x080150e8
 8013694:	080150e8 	.word	0x080150e8
 8013698:	080150ec 	.word	0x080150ec

0801369c <malloc>:
 801369c:	4b02      	ldr	r3, [pc, #8]	; (80136a8 <malloc+0xc>)
 801369e:	4601      	mov	r1, r0
 80136a0:	6818      	ldr	r0, [r3, #0]
 80136a2:	f000 b88b 	b.w	80137bc <_malloc_r>
 80136a6:	bf00      	nop
 80136a8:	20000118 	.word	0x20000118

080136ac <free>:
 80136ac:	4b02      	ldr	r3, [pc, #8]	; (80136b8 <free+0xc>)
 80136ae:	4601      	mov	r1, r0
 80136b0:	6818      	ldr	r0, [r3, #0]
 80136b2:	f000 b819 	b.w	80136e8 <_free_r>
 80136b6:	bf00      	nop
 80136b8:	20000118 	.word	0x20000118

080136bc <memcpy>:
 80136bc:	440a      	add	r2, r1
 80136be:	4291      	cmp	r1, r2
 80136c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80136c4:	d100      	bne.n	80136c8 <memcpy+0xc>
 80136c6:	4770      	bx	lr
 80136c8:	b510      	push	{r4, lr}
 80136ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80136ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80136d2:	4291      	cmp	r1, r2
 80136d4:	d1f9      	bne.n	80136ca <memcpy+0xe>
 80136d6:	bd10      	pop	{r4, pc}

080136d8 <memset>:
 80136d8:	4402      	add	r2, r0
 80136da:	4603      	mov	r3, r0
 80136dc:	4293      	cmp	r3, r2
 80136de:	d100      	bne.n	80136e2 <memset+0xa>
 80136e0:	4770      	bx	lr
 80136e2:	f803 1b01 	strb.w	r1, [r3], #1
 80136e6:	e7f9      	b.n	80136dc <memset+0x4>

080136e8 <_free_r>:
 80136e8:	b538      	push	{r3, r4, r5, lr}
 80136ea:	4605      	mov	r5, r0
 80136ec:	2900      	cmp	r1, #0
 80136ee:	d041      	beq.n	8013774 <_free_r+0x8c>
 80136f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80136f4:	1f0c      	subs	r4, r1, #4
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	bfb8      	it	lt
 80136fa:	18e4      	addlt	r4, r4, r3
 80136fc:	f000 f902 	bl	8013904 <__malloc_lock>
 8013700:	4a1d      	ldr	r2, [pc, #116]	; (8013778 <_free_r+0x90>)
 8013702:	6813      	ldr	r3, [r2, #0]
 8013704:	b933      	cbnz	r3, 8013714 <_free_r+0x2c>
 8013706:	6063      	str	r3, [r4, #4]
 8013708:	6014      	str	r4, [r2, #0]
 801370a:	4628      	mov	r0, r5
 801370c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013710:	f000 b8fe 	b.w	8013910 <__malloc_unlock>
 8013714:	42a3      	cmp	r3, r4
 8013716:	d908      	bls.n	801372a <_free_r+0x42>
 8013718:	6820      	ldr	r0, [r4, #0]
 801371a:	1821      	adds	r1, r4, r0
 801371c:	428b      	cmp	r3, r1
 801371e:	bf01      	itttt	eq
 8013720:	6819      	ldreq	r1, [r3, #0]
 8013722:	685b      	ldreq	r3, [r3, #4]
 8013724:	1809      	addeq	r1, r1, r0
 8013726:	6021      	streq	r1, [r4, #0]
 8013728:	e7ed      	b.n	8013706 <_free_r+0x1e>
 801372a:	461a      	mov	r2, r3
 801372c:	685b      	ldr	r3, [r3, #4]
 801372e:	b10b      	cbz	r3, 8013734 <_free_r+0x4c>
 8013730:	42a3      	cmp	r3, r4
 8013732:	d9fa      	bls.n	801372a <_free_r+0x42>
 8013734:	6811      	ldr	r1, [r2, #0]
 8013736:	1850      	adds	r0, r2, r1
 8013738:	42a0      	cmp	r0, r4
 801373a:	d10b      	bne.n	8013754 <_free_r+0x6c>
 801373c:	6820      	ldr	r0, [r4, #0]
 801373e:	4401      	add	r1, r0
 8013740:	1850      	adds	r0, r2, r1
 8013742:	4283      	cmp	r3, r0
 8013744:	6011      	str	r1, [r2, #0]
 8013746:	d1e0      	bne.n	801370a <_free_r+0x22>
 8013748:	6818      	ldr	r0, [r3, #0]
 801374a:	685b      	ldr	r3, [r3, #4]
 801374c:	6053      	str	r3, [r2, #4]
 801374e:	4401      	add	r1, r0
 8013750:	6011      	str	r1, [r2, #0]
 8013752:	e7da      	b.n	801370a <_free_r+0x22>
 8013754:	d902      	bls.n	801375c <_free_r+0x74>
 8013756:	230c      	movs	r3, #12
 8013758:	602b      	str	r3, [r5, #0]
 801375a:	e7d6      	b.n	801370a <_free_r+0x22>
 801375c:	6820      	ldr	r0, [r4, #0]
 801375e:	1821      	adds	r1, r4, r0
 8013760:	428b      	cmp	r3, r1
 8013762:	bf04      	itt	eq
 8013764:	6819      	ldreq	r1, [r3, #0]
 8013766:	685b      	ldreq	r3, [r3, #4]
 8013768:	6063      	str	r3, [r4, #4]
 801376a:	bf04      	itt	eq
 801376c:	1809      	addeq	r1, r1, r0
 801376e:	6021      	streq	r1, [r4, #0]
 8013770:	6054      	str	r4, [r2, #4]
 8013772:	e7ca      	b.n	801370a <_free_r+0x22>
 8013774:	bd38      	pop	{r3, r4, r5, pc}
 8013776:	bf00      	nop
 8013778:	2000181c 	.word	0x2000181c

0801377c <sbrk_aligned>:
 801377c:	b570      	push	{r4, r5, r6, lr}
 801377e:	4e0e      	ldr	r6, [pc, #56]	; (80137b8 <sbrk_aligned+0x3c>)
 8013780:	460c      	mov	r4, r1
 8013782:	6831      	ldr	r1, [r6, #0]
 8013784:	4605      	mov	r5, r0
 8013786:	b911      	cbnz	r1, 801378e <sbrk_aligned+0x12>
 8013788:	f000 f88c 	bl	80138a4 <_sbrk_r>
 801378c:	6030      	str	r0, [r6, #0]
 801378e:	4621      	mov	r1, r4
 8013790:	4628      	mov	r0, r5
 8013792:	f000 f887 	bl	80138a4 <_sbrk_r>
 8013796:	1c43      	adds	r3, r0, #1
 8013798:	d00a      	beq.n	80137b0 <sbrk_aligned+0x34>
 801379a:	1cc4      	adds	r4, r0, #3
 801379c:	f024 0403 	bic.w	r4, r4, #3
 80137a0:	42a0      	cmp	r0, r4
 80137a2:	d007      	beq.n	80137b4 <sbrk_aligned+0x38>
 80137a4:	1a21      	subs	r1, r4, r0
 80137a6:	4628      	mov	r0, r5
 80137a8:	f000 f87c 	bl	80138a4 <_sbrk_r>
 80137ac:	3001      	adds	r0, #1
 80137ae:	d101      	bne.n	80137b4 <sbrk_aligned+0x38>
 80137b0:	f04f 34ff 	mov.w	r4, #4294967295
 80137b4:	4620      	mov	r0, r4
 80137b6:	bd70      	pop	{r4, r5, r6, pc}
 80137b8:	20001820 	.word	0x20001820

080137bc <_malloc_r>:
 80137bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137c0:	1ccd      	adds	r5, r1, #3
 80137c2:	f025 0503 	bic.w	r5, r5, #3
 80137c6:	3508      	adds	r5, #8
 80137c8:	2d0c      	cmp	r5, #12
 80137ca:	bf38      	it	cc
 80137cc:	250c      	movcc	r5, #12
 80137ce:	2d00      	cmp	r5, #0
 80137d0:	4607      	mov	r7, r0
 80137d2:	db01      	blt.n	80137d8 <_malloc_r+0x1c>
 80137d4:	42a9      	cmp	r1, r5
 80137d6:	d905      	bls.n	80137e4 <_malloc_r+0x28>
 80137d8:	230c      	movs	r3, #12
 80137da:	603b      	str	r3, [r7, #0]
 80137dc:	2600      	movs	r6, #0
 80137de:	4630      	mov	r0, r6
 80137e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137e4:	4e2e      	ldr	r6, [pc, #184]	; (80138a0 <_malloc_r+0xe4>)
 80137e6:	f000 f88d 	bl	8013904 <__malloc_lock>
 80137ea:	6833      	ldr	r3, [r6, #0]
 80137ec:	461c      	mov	r4, r3
 80137ee:	bb34      	cbnz	r4, 801383e <_malloc_r+0x82>
 80137f0:	4629      	mov	r1, r5
 80137f2:	4638      	mov	r0, r7
 80137f4:	f7ff ffc2 	bl	801377c <sbrk_aligned>
 80137f8:	1c43      	adds	r3, r0, #1
 80137fa:	4604      	mov	r4, r0
 80137fc:	d14d      	bne.n	801389a <_malloc_r+0xde>
 80137fe:	6834      	ldr	r4, [r6, #0]
 8013800:	4626      	mov	r6, r4
 8013802:	2e00      	cmp	r6, #0
 8013804:	d140      	bne.n	8013888 <_malloc_r+0xcc>
 8013806:	6823      	ldr	r3, [r4, #0]
 8013808:	4631      	mov	r1, r6
 801380a:	4638      	mov	r0, r7
 801380c:	eb04 0803 	add.w	r8, r4, r3
 8013810:	f000 f848 	bl	80138a4 <_sbrk_r>
 8013814:	4580      	cmp	r8, r0
 8013816:	d13a      	bne.n	801388e <_malloc_r+0xd2>
 8013818:	6821      	ldr	r1, [r4, #0]
 801381a:	3503      	adds	r5, #3
 801381c:	1a6d      	subs	r5, r5, r1
 801381e:	f025 0503 	bic.w	r5, r5, #3
 8013822:	3508      	adds	r5, #8
 8013824:	2d0c      	cmp	r5, #12
 8013826:	bf38      	it	cc
 8013828:	250c      	movcc	r5, #12
 801382a:	4629      	mov	r1, r5
 801382c:	4638      	mov	r0, r7
 801382e:	f7ff ffa5 	bl	801377c <sbrk_aligned>
 8013832:	3001      	adds	r0, #1
 8013834:	d02b      	beq.n	801388e <_malloc_r+0xd2>
 8013836:	6823      	ldr	r3, [r4, #0]
 8013838:	442b      	add	r3, r5
 801383a:	6023      	str	r3, [r4, #0]
 801383c:	e00e      	b.n	801385c <_malloc_r+0xa0>
 801383e:	6822      	ldr	r2, [r4, #0]
 8013840:	1b52      	subs	r2, r2, r5
 8013842:	d41e      	bmi.n	8013882 <_malloc_r+0xc6>
 8013844:	2a0b      	cmp	r2, #11
 8013846:	d916      	bls.n	8013876 <_malloc_r+0xba>
 8013848:	1961      	adds	r1, r4, r5
 801384a:	42a3      	cmp	r3, r4
 801384c:	6025      	str	r5, [r4, #0]
 801384e:	bf18      	it	ne
 8013850:	6059      	strne	r1, [r3, #4]
 8013852:	6863      	ldr	r3, [r4, #4]
 8013854:	bf08      	it	eq
 8013856:	6031      	streq	r1, [r6, #0]
 8013858:	5162      	str	r2, [r4, r5]
 801385a:	604b      	str	r3, [r1, #4]
 801385c:	4638      	mov	r0, r7
 801385e:	f104 060b 	add.w	r6, r4, #11
 8013862:	f000 f855 	bl	8013910 <__malloc_unlock>
 8013866:	f026 0607 	bic.w	r6, r6, #7
 801386a:	1d23      	adds	r3, r4, #4
 801386c:	1af2      	subs	r2, r6, r3
 801386e:	d0b6      	beq.n	80137de <_malloc_r+0x22>
 8013870:	1b9b      	subs	r3, r3, r6
 8013872:	50a3      	str	r3, [r4, r2]
 8013874:	e7b3      	b.n	80137de <_malloc_r+0x22>
 8013876:	6862      	ldr	r2, [r4, #4]
 8013878:	42a3      	cmp	r3, r4
 801387a:	bf0c      	ite	eq
 801387c:	6032      	streq	r2, [r6, #0]
 801387e:	605a      	strne	r2, [r3, #4]
 8013880:	e7ec      	b.n	801385c <_malloc_r+0xa0>
 8013882:	4623      	mov	r3, r4
 8013884:	6864      	ldr	r4, [r4, #4]
 8013886:	e7b2      	b.n	80137ee <_malloc_r+0x32>
 8013888:	4634      	mov	r4, r6
 801388a:	6876      	ldr	r6, [r6, #4]
 801388c:	e7b9      	b.n	8013802 <_malloc_r+0x46>
 801388e:	230c      	movs	r3, #12
 8013890:	603b      	str	r3, [r7, #0]
 8013892:	4638      	mov	r0, r7
 8013894:	f000 f83c 	bl	8013910 <__malloc_unlock>
 8013898:	e7a1      	b.n	80137de <_malloc_r+0x22>
 801389a:	6025      	str	r5, [r4, #0]
 801389c:	e7de      	b.n	801385c <_malloc_r+0xa0>
 801389e:	bf00      	nop
 80138a0:	2000181c 	.word	0x2000181c

080138a4 <_sbrk_r>:
 80138a4:	b538      	push	{r3, r4, r5, lr}
 80138a6:	4d06      	ldr	r5, [pc, #24]	; (80138c0 <_sbrk_r+0x1c>)
 80138a8:	2300      	movs	r3, #0
 80138aa:	4604      	mov	r4, r0
 80138ac:	4608      	mov	r0, r1
 80138ae:	602b      	str	r3, [r5, #0]
 80138b0:	f7ee fad4 	bl	8001e5c <_sbrk>
 80138b4:	1c43      	adds	r3, r0, #1
 80138b6:	d102      	bne.n	80138be <_sbrk_r+0x1a>
 80138b8:	682b      	ldr	r3, [r5, #0]
 80138ba:	b103      	cbz	r3, 80138be <_sbrk_r+0x1a>
 80138bc:	6023      	str	r3, [r4, #0]
 80138be:	bd38      	pop	{r3, r4, r5, pc}
 80138c0:	20001824 	.word	0x20001824

080138c4 <siprintf>:
 80138c4:	b40e      	push	{r1, r2, r3}
 80138c6:	b500      	push	{lr}
 80138c8:	b09c      	sub	sp, #112	; 0x70
 80138ca:	ab1d      	add	r3, sp, #116	; 0x74
 80138cc:	9002      	str	r0, [sp, #8]
 80138ce:	9006      	str	r0, [sp, #24]
 80138d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80138d4:	4809      	ldr	r0, [pc, #36]	; (80138fc <siprintf+0x38>)
 80138d6:	9107      	str	r1, [sp, #28]
 80138d8:	9104      	str	r1, [sp, #16]
 80138da:	4909      	ldr	r1, [pc, #36]	; (8013900 <siprintf+0x3c>)
 80138dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80138e0:	9105      	str	r1, [sp, #20]
 80138e2:	6800      	ldr	r0, [r0, #0]
 80138e4:	9301      	str	r3, [sp, #4]
 80138e6:	a902      	add	r1, sp, #8
 80138e8:	f000 f874 	bl	80139d4 <_svfiprintf_r>
 80138ec:	9b02      	ldr	r3, [sp, #8]
 80138ee:	2200      	movs	r2, #0
 80138f0:	701a      	strb	r2, [r3, #0]
 80138f2:	b01c      	add	sp, #112	; 0x70
 80138f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80138f8:	b003      	add	sp, #12
 80138fa:	4770      	bx	lr
 80138fc:	20000118 	.word	0x20000118
 8013900:	ffff0208 	.word	0xffff0208

08013904 <__malloc_lock>:
 8013904:	4801      	ldr	r0, [pc, #4]	; (801390c <__malloc_lock+0x8>)
 8013906:	f000 baf9 	b.w	8013efc <__retarget_lock_acquire_recursive>
 801390a:	bf00      	nop
 801390c:	20001828 	.word	0x20001828

08013910 <__malloc_unlock>:
 8013910:	4801      	ldr	r0, [pc, #4]	; (8013918 <__malloc_unlock+0x8>)
 8013912:	f000 baf4 	b.w	8013efe <__retarget_lock_release_recursive>
 8013916:	bf00      	nop
 8013918:	20001828 	.word	0x20001828

0801391c <__ssputs_r>:
 801391c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013920:	688e      	ldr	r6, [r1, #8]
 8013922:	429e      	cmp	r6, r3
 8013924:	4682      	mov	sl, r0
 8013926:	460c      	mov	r4, r1
 8013928:	4690      	mov	r8, r2
 801392a:	461f      	mov	r7, r3
 801392c:	d838      	bhi.n	80139a0 <__ssputs_r+0x84>
 801392e:	898a      	ldrh	r2, [r1, #12]
 8013930:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013934:	d032      	beq.n	801399c <__ssputs_r+0x80>
 8013936:	6825      	ldr	r5, [r4, #0]
 8013938:	6909      	ldr	r1, [r1, #16]
 801393a:	eba5 0901 	sub.w	r9, r5, r1
 801393e:	6965      	ldr	r5, [r4, #20]
 8013940:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013944:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013948:	3301      	adds	r3, #1
 801394a:	444b      	add	r3, r9
 801394c:	106d      	asrs	r5, r5, #1
 801394e:	429d      	cmp	r5, r3
 8013950:	bf38      	it	cc
 8013952:	461d      	movcc	r5, r3
 8013954:	0553      	lsls	r3, r2, #21
 8013956:	d531      	bpl.n	80139bc <__ssputs_r+0xa0>
 8013958:	4629      	mov	r1, r5
 801395a:	f7ff ff2f 	bl	80137bc <_malloc_r>
 801395e:	4606      	mov	r6, r0
 8013960:	b950      	cbnz	r0, 8013978 <__ssputs_r+0x5c>
 8013962:	230c      	movs	r3, #12
 8013964:	f8ca 3000 	str.w	r3, [sl]
 8013968:	89a3      	ldrh	r3, [r4, #12]
 801396a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801396e:	81a3      	strh	r3, [r4, #12]
 8013970:	f04f 30ff 	mov.w	r0, #4294967295
 8013974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013978:	6921      	ldr	r1, [r4, #16]
 801397a:	464a      	mov	r2, r9
 801397c:	f7ff fe9e 	bl	80136bc <memcpy>
 8013980:	89a3      	ldrh	r3, [r4, #12]
 8013982:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801398a:	81a3      	strh	r3, [r4, #12]
 801398c:	6126      	str	r6, [r4, #16]
 801398e:	6165      	str	r5, [r4, #20]
 8013990:	444e      	add	r6, r9
 8013992:	eba5 0509 	sub.w	r5, r5, r9
 8013996:	6026      	str	r6, [r4, #0]
 8013998:	60a5      	str	r5, [r4, #8]
 801399a:	463e      	mov	r6, r7
 801399c:	42be      	cmp	r6, r7
 801399e:	d900      	bls.n	80139a2 <__ssputs_r+0x86>
 80139a0:	463e      	mov	r6, r7
 80139a2:	6820      	ldr	r0, [r4, #0]
 80139a4:	4632      	mov	r2, r6
 80139a6:	4641      	mov	r1, r8
 80139a8:	f000 faaa 	bl	8013f00 <memmove>
 80139ac:	68a3      	ldr	r3, [r4, #8]
 80139ae:	1b9b      	subs	r3, r3, r6
 80139b0:	60a3      	str	r3, [r4, #8]
 80139b2:	6823      	ldr	r3, [r4, #0]
 80139b4:	4433      	add	r3, r6
 80139b6:	6023      	str	r3, [r4, #0]
 80139b8:	2000      	movs	r0, #0
 80139ba:	e7db      	b.n	8013974 <__ssputs_r+0x58>
 80139bc:	462a      	mov	r2, r5
 80139be:	f000 fab9 	bl	8013f34 <_realloc_r>
 80139c2:	4606      	mov	r6, r0
 80139c4:	2800      	cmp	r0, #0
 80139c6:	d1e1      	bne.n	801398c <__ssputs_r+0x70>
 80139c8:	6921      	ldr	r1, [r4, #16]
 80139ca:	4650      	mov	r0, sl
 80139cc:	f7ff fe8c 	bl	80136e8 <_free_r>
 80139d0:	e7c7      	b.n	8013962 <__ssputs_r+0x46>
	...

080139d4 <_svfiprintf_r>:
 80139d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139d8:	4698      	mov	r8, r3
 80139da:	898b      	ldrh	r3, [r1, #12]
 80139dc:	061b      	lsls	r3, r3, #24
 80139de:	b09d      	sub	sp, #116	; 0x74
 80139e0:	4607      	mov	r7, r0
 80139e2:	460d      	mov	r5, r1
 80139e4:	4614      	mov	r4, r2
 80139e6:	d50e      	bpl.n	8013a06 <_svfiprintf_r+0x32>
 80139e8:	690b      	ldr	r3, [r1, #16]
 80139ea:	b963      	cbnz	r3, 8013a06 <_svfiprintf_r+0x32>
 80139ec:	2140      	movs	r1, #64	; 0x40
 80139ee:	f7ff fee5 	bl	80137bc <_malloc_r>
 80139f2:	6028      	str	r0, [r5, #0]
 80139f4:	6128      	str	r0, [r5, #16]
 80139f6:	b920      	cbnz	r0, 8013a02 <_svfiprintf_r+0x2e>
 80139f8:	230c      	movs	r3, #12
 80139fa:	603b      	str	r3, [r7, #0]
 80139fc:	f04f 30ff 	mov.w	r0, #4294967295
 8013a00:	e0d1      	b.n	8013ba6 <_svfiprintf_r+0x1d2>
 8013a02:	2340      	movs	r3, #64	; 0x40
 8013a04:	616b      	str	r3, [r5, #20]
 8013a06:	2300      	movs	r3, #0
 8013a08:	9309      	str	r3, [sp, #36]	; 0x24
 8013a0a:	2320      	movs	r3, #32
 8013a0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013a10:	f8cd 800c 	str.w	r8, [sp, #12]
 8013a14:	2330      	movs	r3, #48	; 0x30
 8013a16:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013bc0 <_svfiprintf_r+0x1ec>
 8013a1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013a1e:	f04f 0901 	mov.w	r9, #1
 8013a22:	4623      	mov	r3, r4
 8013a24:	469a      	mov	sl, r3
 8013a26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013a2a:	b10a      	cbz	r2, 8013a30 <_svfiprintf_r+0x5c>
 8013a2c:	2a25      	cmp	r2, #37	; 0x25
 8013a2e:	d1f9      	bne.n	8013a24 <_svfiprintf_r+0x50>
 8013a30:	ebba 0b04 	subs.w	fp, sl, r4
 8013a34:	d00b      	beq.n	8013a4e <_svfiprintf_r+0x7a>
 8013a36:	465b      	mov	r3, fp
 8013a38:	4622      	mov	r2, r4
 8013a3a:	4629      	mov	r1, r5
 8013a3c:	4638      	mov	r0, r7
 8013a3e:	f7ff ff6d 	bl	801391c <__ssputs_r>
 8013a42:	3001      	adds	r0, #1
 8013a44:	f000 80aa 	beq.w	8013b9c <_svfiprintf_r+0x1c8>
 8013a48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013a4a:	445a      	add	r2, fp
 8013a4c:	9209      	str	r2, [sp, #36]	; 0x24
 8013a4e:	f89a 3000 	ldrb.w	r3, [sl]
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	f000 80a2 	beq.w	8013b9c <_svfiprintf_r+0x1c8>
 8013a58:	2300      	movs	r3, #0
 8013a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8013a5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013a62:	f10a 0a01 	add.w	sl, sl, #1
 8013a66:	9304      	str	r3, [sp, #16]
 8013a68:	9307      	str	r3, [sp, #28]
 8013a6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013a6e:	931a      	str	r3, [sp, #104]	; 0x68
 8013a70:	4654      	mov	r4, sl
 8013a72:	2205      	movs	r2, #5
 8013a74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a78:	4851      	ldr	r0, [pc, #324]	; (8013bc0 <_svfiprintf_r+0x1ec>)
 8013a7a:	f7ec fb89 	bl	8000190 <memchr>
 8013a7e:	9a04      	ldr	r2, [sp, #16]
 8013a80:	b9d8      	cbnz	r0, 8013aba <_svfiprintf_r+0xe6>
 8013a82:	06d0      	lsls	r0, r2, #27
 8013a84:	bf44      	itt	mi
 8013a86:	2320      	movmi	r3, #32
 8013a88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013a8c:	0711      	lsls	r1, r2, #28
 8013a8e:	bf44      	itt	mi
 8013a90:	232b      	movmi	r3, #43	; 0x2b
 8013a92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013a96:	f89a 3000 	ldrb.w	r3, [sl]
 8013a9a:	2b2a      	cmp	r3, #42	; 0x2a
 8013a9c:	d015      	beq.n	8013aca <_svfiprintf_r+0xf6>
 8013a9e:	9a07      	ldr	r2, [sp, #28]
 8013aa0:	4654      	mov	r4, sl
 8013aa2:	2000      	movs	r0, #0
 8013aa4:	f04f 0c0a 	mov.w	ip, #10
 8013aa8:	4621      	mov	r1, r4
 8013aaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013aae:	3b30      	subs	r3, #48	; 0x30
 8013ab0:	2b09      	cmp	r3, #9
 8013ab2:	d94e      	bls.n	8013b52 <_svfiprintf_r+0x17e>
 8013ab4:	b1b0      	cbz	r0, 8013ae4 <_svfiprintf_r+0x110>
 8013ab6:	9207      	str	r2, [sp, #28]
 8013ab8:	e014      	b.n	8013ae4 <_svfiprintf_r+0x110>
 8013aba:	eba0 0308 	sub.w	r3, r0, r8
 8013abe:	fa09 f303 	lsl.w	r3, r9, r3
 8013ac2:	4313      	orrs	r3, r2
 8013ac4:	9304      	str	r3, [sp, #16]
 8013ac6:	46a2      	mov	sl, r4
 8013ac8:	e7d2      	b.n	8013a70 <_svfiprintf_r+0x9c>
 8013aca:	9b03      	ldr	r3, [sp, #12]
 8013acc:	1d19      	adds	r1, r3, #4
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	9103      	str	r1, [sp, #12]
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	bfbb      	ittet	lt
 8013ad6:	425b      	neglt	r3, r3
 8013ad8:	f042 0202 	orrlt.w	r2, r2, #2
 8013adc:	9307      	strge	r3, [sp, #28]
 8013ade:	9307      	strlt	r3, [sp, #28]
 8013ae0:	bfb8      	it	lt
 8013ae2:	9204      	strlt	r2, [sp, #16]
 8013ae4:	7823      	ldrb	r3, [r4, #0]
 8013ae6:	2b2e      	cmp	r3, #46	; 0x2e
 8013ae8:	d10c      	bne.n	8013b04 <_svfiprintf_r+0x130>
 8013aea:	7863      	ldrb	r3, [r4, #1]
 8013aec:	2b2a      	cmp	r3, #42	; 0x2a
 8013aee:	d135      	bne.n	8013b5c <_svfiprintf_r+0x188>
 8013af0:	9b03      	ldr	r3, [sp, #12]
 8013af2:	1d1a      	adds	r2, r3, #4
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	9203      	str	r2, [sp, #12]
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	bfb8      	it	lt
 8013afc:	f04f 33ff 	movlt.w	r3, #4294967295
 8013b00:	3402      	adds	r4, #2
 8013b02:	9305      	str	r3, [sp, #20]
 8013b04:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8013bc4 <_svfiprintf_r+0x1f0>
 8013b08:	7821      	ldrb	r1, [r4, #0]
 8013b0a:	2203      	movs	r2, #3
 8013b0c:	4650      	mov	r0, sl
 8013b0e:	f7ec fb3f 	bl	8000190 <memchr>
 8013b12:	b140      	cbz	r0, 8013b26 <_svfiprintf_r+0x152>
 8013b14:	2340      	movs	r3, #64	; 0x40
 8013b16:	eba0 000a 	sub.w	r0, r0, sl
 8013b1a:	fa03 f000 	lsl.w	r0, r3, r0
 8013b1e:	9b04      	ldr	r3, [sp, #16]
 8013b20:	4303      	orrs	r3, r0
 8013b22:	3401      	adds	r4, #1
 8013b24:	9304      	str	r3, [sp, #16]
 8013b26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b2a:	4827      	ldr	r0, [pc, #156]	; (8013bc8 <_svfiprintf_r+0x1f4>)
 8013b2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013b30:	2206      	movs	r2, #6
 8013b32:	f7ec fb2d 	bl	8000190 <memchr>
 8013b36:	2800      	cmp	r0, #0
 8013b38:	d038      	beq.n	8013bac <_svfiprintf_r+0x1d8>
 8013b3a:	4b24      	ldr	r3, [pc, #144]	; (8013bcc <_svfiprintf_r+0x1f8>)
 8013b3c:	bb1b      	cbnz	r3, 8013b86 <_svfiprintf_r+0x1b2>
 8013b3e:	9b03      	ldr	r3, [sp, #12]
 8013b40:	3307      	adds	r3, #7
 8013b42:	f023 0307 	bic.w	r3, r3, #7
 8013b46:	3308      	adds	r3, #8
 8013b48:	9303      	str	r3, [sp, #12]
 8013b4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b4c:	4433      	add	r3, r6
 8013b4e:	9309      	str	r3, [sp, #36]	; 0x24
 8013b50:	e767      	b.n	8013a22 <_svfiprintf_r+0x4e>
 8013b52:	fb0c 3202 	mla	r2, ip, r2, r3
 8013b56:	460c      	mov	r4, r1
 8013b58:	2001      	movs	r0, #1
 8013b5a:	e7a5      	b.n	8013aa8 <_svfiprintf_r+0xd4>
 8013b5c:	2300      	movs	r3, #0
 8013b5e:	3401      	adds	r4, #1
 8013b60:	9305      	str	r3, [sp, #20]
 8013b62:	4619      	mov	r1, r3
 8013b64:	f04f 0c0a 	mov.w	ip, #10
 8013b68:	4620      	mov	r0, r4
 8013b6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013b6e:	3a30      	subs	r2, #48	; 0x30
 8013b70:	2a09      	cmp	r2, #9
 8013b72:	d903      	bls.n	8013b7c <_svfiprintf_r+0x1a8>
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d0c5      	beq.n	8013b04 <_svfiprintf_r+0x130>
 8013b78:	9105      	str	r1, [sp, #20]
 8013b7a:	e7c3      	b.n	8013b04 <_svfiprintf_r+0x130>
 8013b7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8013b80:	4604      	mov	r4, r0
 8013b82:	2301      	movs	r3, #1
 8013b84:	e7f0      	b.n	8013b68 <_svfiprintf_r+0x194>
 8013b86:	ab03      	add	r3, sp, #12
 8013b88:	9300      	str	r3, [sp, #0]
 8013b8a:	462a      	mov	r2, r5
 8013b8c:	4b10      	ldr	r3, [pc, #64]	; (8013bd0 <_svfiprintf_r+0x1fc>)
 8013b8e:	a904      	add	r1, sp, #16
 8013b90:	4638      	mov	r0, r7
 8013b92:	f3af 8000 	nop.w
 8013b96:	1c42      	adds	r2, r0, #1
 8013b98:	4606      	mov	r6, r0
 8013b9a:	d1d6      	bne.n	8013b4a <_svfiprintf_r+0x176>
 8013b9c:	89ab      	ldrh	r3, [r5, #12]
 8013b9e:	065b      	lsls	r3, r3, #25
 8013ba0:	f53f af2c 	bmi.w	80139fc <_svfiprintf_r+0x28>
 8013ba4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013ba6:	b01d      	add	sp, #116	; 0x74
 8013ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bac:	ab03      	add	r3, sp, #12
 8013bae:	9300      	str	r3, [sp, #0]
 8013bb0:	462a      	mov	r2, r5
 8013bb2:	4b07      	ldr	r3, [pc, #28]	; (8013bd0 <_svfiprintf_r+0x1fc>)
 8013bb4:	a904      	add	r1, sp, #16
 8013bb6:	4638      	mov	r0, r7
 8013bb8:	f000 f87a 	bl	8013cb0 <_printf_i>
 8013bbc:	e7eb      	b.n	8013b96 <_svfiprintf_r+0x1c2>
 8013bbe:	bf00      	nop
 8013bc0:	080150a7 	.word	0x080150a7
 8013bc4:	080150ad 	.word	0x080150ad
 8013bc8:	080150b1 	.word	0x080150b1
 8013bcc:	00000000 	.word	0x00000000
 8013bd0:	0801391d 	.word	0x0801391d

08013bd4 <_printf_common>:
 8013bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013bd8:	4616      	mov	r6, r2
 8013bda:	4699      	mov	r9, r3
 8013bdc:	688a      	ldr	r2, [r1, #8]
 8013bde:	690b      	ldr	r3, [r1, #16]
 8013be0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013be4:	4293      	cmp	r3, r2
 8013be6:	bfb8      	it	lt
 8013be8:	4613      	movlt	r3, r2
 8013bea:	6033      	str	r3, [r6, #0]
 8013bec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013bf0:	4607      	mov	r7, r0
 8013bf2:	460c      	mov	r4, r1
 8013bf4:	b10a      	cbz	r2, 8013bfa <_printf_common+0x26>
 8013bf6:	3301      	adds	r3, #1
 8013bf8:	6033      	str	r3, [r6, #0]
 8013bfa:	6823      	ldr	r3, [r4, #0]
 8013bfc:	0699      	lsls	r1, r3, #26
 8013bfe:	bf42      	ittt	mi
 8013c00:	6833      	ldrmi	r3, [r6, #0]
 8013c02:	3302      	addmi	r3, #2
 8013c04:	6033      	strmi	r3, [r6, #0]
 8013c06:	6825      	ldr	r5, [r4, #0]
 8013c08:	f015 0506 	ands.w	r5, r5, #6
 8013c0c:	d106      	bne.n	8013c1c <_printf_common+0x48>
 8013c0e:	f104 0a19 	add.w	sl, r4, #25
 8013c12:	68e3      	ldr	r3, [r4, #12]
 8013c14:	6832      	ldr	r2, [r6, #0]
 8013c16:	1a9b      	subs	r3, r3, r2
 8013c18:	42ab      	cmp	r3, r5
 8013c1a:	dc26      	bgt.n	8013c6a <_printf_common+0x96>
 8013c1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013c20:	1e13      	subs	r3, r2, #0
 8013c22:	6822      	ldr	r2, [r4, #0]
 8013c24:	bf18      	it	ne
 8013c26:	2301      	movne	r3, #1
 8013c28:	0692      	lsls	r2, r2, #26
 8013c2a:	d42b      	bmi.n	8013c84 <_printf_common+0xb0>
 8013c2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013c30:	4649      	mov	r1, r9
 8013c32:	4638      	mov	r0, r7
 8013c34:	47c0      	blx	r8
 8013c36:	3001      	adds	r0, #1
 8013c38:	d01e      	beq.n	8013c78 <_printf_common+0xa4>
 8013c3a:	6823      	ldr	r3, [r4, #0]
 8013c3c:	68e5      	ldr	r5, [r4, #12]
 8013c3e:	6832      	ldr	r2, [r6, #0]
 8013c40:	f003 0306 	and.w	r3, r3, #6
 8013c44:	2b04      	cmp	r3, #4
 8013c46:	bf08      	it	eq
 8013c48:	1aad      	subeq	r5, r5, r2
 8013c4a:	68a3      	ldr	r3, [r4, #8]
 8013c4c:	6922      	ldr	r2, [r4, #16]
 8013c4e:	bf0c      	ite	eq
 8013c50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013c54:	2500      	movne	r5, #0
 8013c56:	4293      	cmp	r3, r2
 8013c58:	bfc4      	itt	gt
 8013c5a:	1a9b      	subgt	r3, r3, r2
 8013c5c:	18ed      	addgt	r5, r5, r3
 8013c5e:	2600      	movs	r6, #0
 8013c60:	341a      	adds	r4, #26
 8013c62:	42b5      	cmp	r5, r6
 8013c64:	d11a      	bne.n	8013c9c <_printf_common+0xc8>
 8013c66:	2000      	movs	r0, #0
 8013c68:	e008      	b.n	8013c7c <_printf_common+0xa8>
 8013c6a:	2301      	movs	r3, #1
 8013c6c:	4652      	mov	r2, sl
 8013c6e:	4649      	mov	r1, r9
 8013c70:	4638      	mov	r0, r7
 8013c72:	47c0      	blx	r8
 8013c74:	3001      	adds	r0, #1
 8013c76:	d103      	bne.n	8013c80 <_printf_common+0xac>
 8013c78:	f04f 30ff 	mov.w	r0, #4294967295
 8013c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c80:	3501      	adds	r5, #1
 8013c82:	e7c6      	b.n	8013c12 <_printf_common+0x3e>
 8013c84:	18e1      	adds	r1, r4, r3
 8013c86:	1c5a      	adds	r2, r3, #1
 8013c88:	2030      	movs	r0, #48	; 0x30
 8013c8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013c8e:	4422      	add	r2, r4
 8013c90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013c94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013c98:	3302      	adds	r3, #2
 8013c9a:	e7c7      	b.n	8013c2c <_printf_common+0x58>
 8013c9c:	2301      	movs	r3, #1
 8013c9e:	4622      	mov	r2, r4
 8013ca0:	4649      	mov	r1, r9
 8013ca2:	4638      	mov	r0, r7
 8013ca4:	47c0      	blx	r8
 8013ca6:	3001      	adds	r0, #1
 8013ca8:	d0e6      	beq.n	8013c78 <_printf_common+0xa4>
 8013caa:	3601      	adds	r6, #1
 8013cac:	e7d9      	b.n	8013c62 <_printf_common+0x8e>
	...

08013cb0 <_printf_i>:
 8013cb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013cb4:	7e0f      	ldrb	r7, [r1, #24]
 8013cb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013cb8:	2f78      	cmp	r7, #120	; 0x78
 8013cba:	4691      	mov	r9, r2
 8013cbc:	4680      	mov	r8, r0
 8013cbe:	460c      	mov	r4, r1
 8013cc0:	469a      	mov	sl, r3
 8013cc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013cc6:	d807      	bhi.n	8013cd8 <_printf_i+0x28>
 8013cc8:	2f62      	cmp	r7, #98	; 0x62
 8013cca:	d80a      	bhi.n	8013ce2 <_printf_i+0x32>
 8013ccc:	2f00      	cmp	r7, #0
 8013cce:	f000 80d8 	beq.w	8013e82 <_printf_i+0x1d2>
 8013cd2:	2f58      	cmp	r7, #88	; 0x58
 8013cd4:	f000 80a3 	beq.w	8013e1e <_printf_i+0x16e>
 8013cd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013cdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013ce0:	e03a      	b.n	8013d58 <_printf_i+0xa8>
 8013ce2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013ce6:	2b15      	cmp	r3, #21
 8013ce8:	d8f6      	bhi.n	8013cd8 <_printf_i+0x28>
 8013cea:	a101      	add	r1, pc, #4	; (adr r1, 8013cf0 <_printf_i+0x40>)
 8013cec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013cf0:	08013d49 	.word	0x08013d49
 8013cf4:	08013d5d 	.word	0x08013d5d
 8013cf8:	08013cd9 	.word	0x08013cd9
 8013cfc:	08013cd9 	.word	0x08013cd9
 8013d00:	08013cd9 	.word	0x08013cd9
 8013d04:	08013cd9 	.word	0x08013cd9
 8013d08:	08013d5d 	.word	0x08013d5d
 8013d0c:	08013cd9 	.word	0x08013cd9
 8013d10:	08013cd9 	.word	0x08013cd9
 8013d14:	08013cd9 	.word	0x08013cd9
 8013d18:	08013cd9 	.word	0x08013cd9
 8013d1c:	08013e69 	.word	0x08013e69
 8013d20:	08013d8d 	.word	0x08013d8d
 8013d24:	08013e4b 	.word	0x08013e4b
 8013d28:	08013cd9 	.word	0x08013cd9
 8013d2c:	08013cd9 	.word	0x08013cd9
 8013d30:	08013e8b 	.word	0x08013e8b
 8013d34:	08013cd9 	.word	0x08013cd9
 8013d38:	08013d8d 	.word	0x08013d8d
 8013d3c:	08013cd9 	.word	0x08013cd9
 8013d40:	08013cd9 	.word	0x08013cd9
 8013d44:	08013e53 	.word	0x08013e53
 8013d48:	682b      	ldr	r3, [r5, #0]
 8013d4a:	1d1a      	adds	r2, r3, #4
 8013d4c:	681b      	ldr	r3, [r3, #0]
 8013d4e:	602a      	str	r2, [r5, #0]
 8013d50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013d54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013d58:	2301      	movs	r3, #1
 8013d5a:	e0a3      	b.n	8013ea4 <_printf_i+0x1f4>
 8013d5c:	6820      	ldr	r0, [r4, #0]
 8013d5e:	6829      	ldr	r1, [r5, #0]
 8013d60:	0606      	lsls	r6, r0, #24
 8013d62:	f101 0304 	add.w	r3, r1, #4
 8013d66:	d50a      	bpl.n	8013d7e <_printf_i+0xce>
 8013d68:	680e      	ldr	r6, [r1, #0]
 8013d6a:	602b      	str	r3, [r5, #0]
 8013d6c:	2e00      	cmp	r6, #0
 8013d6e:	da03      	bge.n	8013d78 <_printf_i+0xc8>
 8013d70:	232d      	movs	r3, #45	; 0x2d
 8013d72:	4276      	negs	r6, r6
 8013d74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013d78:	485e      	ldr	r0, [pc, #376]	; (8013ef4 <_printf_i+0x244>)
 8013d7a:	230a      	movs	r3, #10
 8013d7c:	e019      	b.n	8013db2 <_printf_i+0x102>
 8013d7e:	680e      	ldr	r6, [r1, #0]
 8013d80:	602b      	str	r3, [r5, #0]
 8013d82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013d86:	bf18      	it	ne
 8013d88:	b236      	sxthne	r6, r6
 8013d8a:	e7ef      	b.n	8013d6c <_printf_i+0xbc>
 8013d8c:	682b      	ldr	r3, [r5, #0]
 8013d8e:	6820      	ldr	r0, [r4, #0]
 8013d90:	1d19      	adds	r1, r3, #4
 8013d92:	6029      	str	r1, [r5, #0]
 8013d94:	0601      	lsls	r1, r0, #24
 8013d96:	d501      	bpl.n	8013d9c <_printf_i+0xec>
 8013d98:	681e      	ldr	r6, [r3, #0]
 8013d9a:	e002      	b.n	8013da2 <_printf_i+0xf2>
 8013d9c:	0646      	lsls	r6, r0, #25
 8013d9e:	d5fb      	bpl.n	8013d98 <_printf_i+0xe8>
 8013da0:	881e      	ldrh	r6, [r3, #0]
 8013da2:	4854      	ldr	r0, [pc, #336]	; (8013ef4 <_printf_i+0x244>)
 8013da4:	2f6f      	cmp	r7, #111	; 0x6f
 8013da6:	bf0c      	ite	eq
 8013da8:	2308      	moveq	r3, #8
 8013daa:	230a      	movne	r3, #10
 8013dac:	2100      	movs	r1, #0
 8013dae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013db2:	6865      	ldr	r5, [r4, #4]
 8013db4:	60a5      	str	r5, [r4, #8]
 8013db6:	2d00      	cmp	r5, #0
 8013db8:	bfa2      	ittt	ge
 8013dba:	6821      	ldrge	r1, [r4, #0]
 8013dbc:	f021 0104 	bicge.w	r1, r1, #4
 8013dc0:	6021      	strge	r1, [r4, #0]
 8013dc2:	b90e      	cbnz	r6, 8013dc8 <_printf_i+0x118>
 8013dc4:	2d00      	cmp	r5, #0
 8013dc6:	d04d      	beq.n	8013e64 <_printf_i+0x1b4>
 8013dc8:	4615      	mov	r5, r2
 8013dca:	fbb6 f1f3 	udiv	r1, r6, r3
 8013dce:	fb03 6711 	mls	r7, r3, r1, r6
 8013dd2:	5dc7      	ldrb	r7, [r0, r7]
 8013dd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013dd8:	4637      	mov	r7, r6
 8013dda:	42bb      	cmp	r3, r7
 8013ddc:	460e      	mov	r6, r1
 8013dde:	d9f4      	bls.n	8013dca <_printf_i+0x11a>
 8013de0:	2b08      	cmp	r3, #8
 8013de2:	d10b      	bne.n	8013dfc <_printf_i+0x14c>
 8013de4:	6823      	ldr	r3, [r4, #0]
 8013de6:	07de      	lsls	r6, r3, #31
 8013de8:	d508      	bpl.n	8013dfc <_printf_i+0x14c>
 8013dea:	6923      	ldr	r3, [r4, #16]
 8013dec:	6861      	ldr	r1, [r4, #4]
 8013dee:	4299      	cmp	r1, r3
 8013df0:	bfde      	ittt	le
 8013df2:	2330      	movle	r3, #48	; 0x30
 8013df4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013df8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013dfc:	1b52      	subs	r2, r2, r5
 8013dfe:	6122      	str	r2, [r4, #16]
 8013e00:	f8cd a000 	str.w	sl, [sp]
 8013e04:	464b      	mov	r3, r9
 8013e06:	aa03      	add	r2, sp, #12
 8013e08:	4621      	mov	r1, r4
 8013e0a:	4640      	mov	r0, r8
 8013e0c:	f7ff fee2 	bl	8013bd4 <_printf_common>
 8013e10:	3001      	adds	r0, #1
 8013e12:	d14c      	bne.n	8013eae <_printf_i+0x1fe>
 8013e14:	f04f 30ff 	mov.w	r0, #4294967295
 8013e18:	b004      	add	sp, #16
 8013e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e1e:	4835      	ldr	r0, [pc, #212]	; (8013ef4 <_printf_i+0x244>)
 8013e20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013e24:	6829      	ldr	r1, [r5, #0]
 8013e26:	6823      	ldr	r3, [r4, #0]
 8013e28:	f851 6b04 	ldr.w	r6, [r1], #4
 8013e2c:	6029      	str	r1, [r5, #0]
 8013e2e:	061d      	lsls	r5, r3, #24
 8013e30:	d514      	bpl.n	8013e5c <_printf_i+0x1ac>
 8013e32:	07df      	lsls	r7, r3, #31
 8013e34:	bf44      	itt	mi
 8013e36:	f043 0320 	orrmi.w	r3, r3, #32
 8013e3a:	6023      	strmi	r3, [r4, #0]
 8013e3c:	b91e      	cbnz	r6, 8013e46 <_printf_i+0x196>
 8013e3e:	6823      	ldr	r3, [r4, #0]
 8013e40:	f023 0320 	bic.w	r3, r3, #32
 8013e44:	6023      	str	r3, [r4, #0]
 8013e46:	2310      	movs	r3, #16
 8013e48:	e7b0      	b.n	8013dac <_printf_i+0xfc>
 8013e4a:	6823      	ldr	r3, [r4, #0]
 8013e4c:	f043 0320 	orr.w	r3, r3, #32
 8013e50:	6023      	str	r3, [r4, #0]
 8013e52:	2378      	movs	r3, #120	; 0x78
 8013e54:	4828      	ldr	r0, [pc, #160]	; (8013ef8 <_printf_i+0x248>)
 8013e56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013e5a:	e7e3      	b.n	8013e24 <_printf_i+0x174>
 8013e5c:	0659      	lsls	r1, r3, #25
 8013e5e:	bf48      	it	mi
 8013e60:	b2b6      	uxthmi	r6, r6
 8013e62:	e7e6      	b.n	8013e32 <_printf_i+0x182>
 8013e64:	4615      	mov	r5, r2
 8013e66:	e7bb      	b.n	8013de0 <_printf_i+0x130>
 8013e68:	682b      	ldr	r3, [r5, #0]
 8013e6a:	6826      	ldr	r6, [r4, #0]
 8013e6c:	6961      	ldr	r1, [r4, #20]
 8013e6e:	1d18      	adds	r0, r3, #4
 8013e70:	6028      	str	r0, [r5, #0]
 8013e72:	0635      	lsls	r5, r6, #24
 8013e74:	681b      	ldr	r3, [r3, #0]
 8013e76:	d501      	bpl.n	8013e7c <_printf_i+0x1cc>
 8013e78:	6019      	str	r1, [r3, #0]
 8013e7a:	e002      	b.n	8013e82 <_printf_i+0x1d2>
 8013e7c:	0670      	lsls	r0, r6, #25
 8013e7e:	d5fb      	bpl.n	8013e78 <_printf_i+0x1c8>
 8013e80:	8019      	strh	r1, [r3, #0]
 8013e82:	2300      	movs	r3, #0
 8013e84:	6123      	str	r3, [r4, #16]
 8013e86:	4615      	mov	r5, r2
 8013e88:	e7ba      	b.n	8013e00 <_printf_i+0x150>
 8013e8a:	682b      	ldr	r3, [r5, #0]
 8013e8c:	1d1a      	adds	r2, r3, #4
 8013e8e:	602a      	str	r2, [r5, #0]
 8013e90:	681d      	ldr	r5, [r3, #0]
 8013e92:	6862      	ldr	r2, [r4, #4]
 8013e94:	2100      	movs	r1, #0
 8013e96:	4628      	mov	r0, r5
 8013e98:	f7ec f97a 	bl	8000190 <memchr>
 8013e9c:	b108      	cbz	r0, 8013ea2 <_printf_i+0x1f2>
 8013e9e:	1b40      	subs	r0, r0, r5
 8013ea0:	6060      	str	r0, [r4, #4]
 8013ea2:	6863      	ldr	r3, [r4, #4]
 8013ea4:	6123      	str	r3, [r4, #16]
 8013ea6:	2300      	movs	r3, #0
 8013ea8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013eac:	e7a8      	b.n	8013e00 <_printf_i+0x150>
 8013eae:	6923      	ldr	r3, [r4, #16]
 8013eb0:	462a      	mov	r2, r5
 8013eb2:	4649      	mov	r1, r9
 8013eb4:	4640      	mov	r0, r8
 8013eb6:	47d0      	blx	sl
 8013eb8:	3001      	adds	r0, #1
 8013eba:	d0ab      	beq.n	8013e14 <_printf_i+0x164>
 8013ebc:	6823      	ldr	r3, [r4, #0]
 8013ebe:	079b      	lsls	r3, r3, #30
 8013ec0:	d413      	bmi.n	8013eea <_printf_i+0x23a>
 8013ec2:	68e0      	ldr	r0, [r4, #12]
 8013ec4:	9b03      	ldr	r3, [sp, #12]
 8013ec6:	4298      	cmp	r0, r3
 8013ec8:	bfb8      	it	lt
 8013eca:	4618      	movlt	r0, r3
 8013ecc:	e7a4      	b.n	8013e18 <_printf_i+0x168>
 8013ece:	2301      	movs	r3, #1
 8013ed0:	4632      	mov	r2, r6
 8013ed2:	4649      	mov	r1, r9
 8013ed4:	4640      	mov	r0, r8
 8013ed6:	47d0      	blx	sl
 8013ed8:	3001      	adds	r0, #1
 8013eda:	d09b      	beq.n	8013e14 <_printf_i+0x164>
 8013edc:	3501      	adds	r5, #1
 8013ede:	68e3      	ldr	r3, [r4, #12]
 8013ee0:	9903      	ldr	r1, [sp, #12]
 8013ee2:	1a5b      	subs	r3, r3, r1
 8013ee4:	42ab      	cmp	r3, r5
 8013ee6:	dcf2      	bgt.n	8013ece <_printf_i+0x21e>
 8013ee8:	e7eb      	b.n	8013ec2 <_printf_i+0x212>
 8013eea:	2500      	movs	r5, #0
 8013eec:	f104 0619 	add.w	r6, r4, #25
 8013ef0:	e7f5      	b.n	8013ede <_printf_i+0x22e>
 8013ef2:	bf00      	nop
 8013ef4:	080150b8 	.word	0x080150b8
 8013ef8:	080150c9 	.word	0x080150c9

08013efc <__retarget_lock_acquire_recursive>:
 8013efc:	4770      	bx	lr

08013efe <__retarget_lock_release_recursive>:
 8013efe:	4770      	bx	lr

08013f00 <memmove>:
 8013f00:	4288      	cmp	r0, r1
 8013f02:	b510      	push	{r4, lr}
 8013f04:	eb01 0402 	add.w	r4, r1, r2
 8013f08:	d902      	bls.n	8013f10 <memmove+0x10>
 8013f0a:	4284      	cmp	r4, r0
 8013f0c:	4623      	mov	r3, r4
 8013f0e:	d807      	bhi.n	8013f20 <memmove+0x20>
 8013f10:	1e43      	subs	r3, r0, #1
 8013f12:	42a1      	cmp	r1, r4
 8013f14:	d008      	beq.n	8013f28 <memmove+0x28>
 8013f16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013f1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013f1e:	e7f8      	b.n	8013f12 <memmove+0x12>
 8013f20:	4402      	add	r2, r0
 8013f22:	4601      	mov	r1, r0
 8013f24:	428a      	cmp	r2, r1
 8013f26:	d100      	bne.n	8013f2a <memmove+0x2a>
 8013f28:	bd10      	pop	{r4, pc}
 8013f2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013f2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013f32:	e7f7      	b.n	8013f24 <memmove+0x24>

08013f34 <_realloc_r>:
 8013f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f38:	4680      	mov	r8, r0
 8013f3a:	4614      	mov	r4, r2
 8013f3c:	460e      	mov	r6, r1
 8013f3e:	b921      	cbnz	r1, 8013f4a <_realloc_r+0x16>
 8013f40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013f44:	4611      	mov	r1, r2
 8013f46:	f7ff bc39 	b.w	80137bc <_malloc_r>
 8013f4a:	b92a      	cbnz	r2, 8013f58 <_realloc_r+0x24>
 8013f4c:	f7ff fbcc 	bl	80136e8 <_free_r>
 8013f50:	4625      	mov	r5, r4
 8013f52:	4628      	mov	r0, r5
 8013f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f58:	f000 f81b 	bl	8013f92 <_malloc_usable_size_r>
 8013f5c:	4284      	cmp	r4, r0
 8013f5e:	4607      	mov	r7, r0
 8013f60:	d802      	bhi.n	8013f68 <_realloc_r+0x34>
 8013f62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013f66:	d812      	bhi.n	8013f8e <_realloc_r+0x5a>
 8013f68:	4621      	mov	r1, r4
 8013f6a:	4640      	mov	r0, r8
 8013f6c:	f7ff fc26 	bl	80137bc <_malloc_r>
 8013f70:	4605      	mov	r5, r0
 8013f72:	2800      	cmp	r0, #0
 8013f74:	d0ed      	beq.n	8013f52 <_realloc_r+0x1e>
 8013f76:	42bc      	cmp	r4, r7
 8013f78:	4622      	mov	r2, r4
 8013f7a:	4631      	mov	r1, r6
 8013f7c:	bf28      	it	cs
 8013f7e:	463a      	movcs	r2, r7
 8013f80:	f7ff fb9c 	bl	80136bc <memcpy>
 8013f84:	4631      	mov	r1, r6
 8013f86:	4640      	mov	r0, r8
 8013f88:	f7ff fbae 	bl	80136e8 <_free_r>
 8013f8c:	e7e1      	b.n	8013f52 <_realloc_r+0x1e>
 8013f8e:	4635      	mov	r5, r6
 8013f90:	e7df      	b.n	8013f52 <_realloc_r+0x1e>

08013f92 <_malloc_usable_size_r>:
 8013f92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013f96:	1f18      	subs	r0, r3, #4
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	bfbc      	itt	lt
 8013f9c:	580b      	ldrlt	r3, [r1, r0]
 8013f9e:	18c0      	addlt	r0, r0, r3
 8013fa0:	4770      	bx	lr
 8013fa2:	0000      	movs	r0, r0
 8013fa4:	0000      	movs	r0, r0
	...

08013fa8 <floor>:
 8013fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013fac:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8013fb0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8013fb4:	2e13      	cmp	r6, #19
 8013fb6:	4602      	mov	r2, r0
 8013fb8:	460b      	mov	r3, r1
 8013fba:	4607      	mov	r7, r0
 8013fbc:	460c      	mov	r4, r1
 8013fbe:	4605      	mov	r5, r0
 8013fc0:	dc33      	bgt.n	801402a <floor+0x82>
 8013fc2:	2e00      	cmp	r6, #0
 8013fc4:	da14      	bge.n	8013ff0 <floor+0x48>
 8013fc6:	a334      	add	r3, pc, #208	; (adr r3, 8014098 <floor+0xf0>)
 8013fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fcc:	f7ec f936 	bl	800023c <__adddf3>
 8013fd0:	2200      	movs	r2, #0
 8013fd2:	2300      	movs	r3, #0
 8013fd4:	f7ec fb66 	bl	80006a4 <__aeabi_dcmpgt>
 8013fd8:	b138      	cbz	r0, 8013fea <floor+0x42>
 8013fda:	2c00      	cmp	r4, #0
 8013fdc:	da58      	bge.n	8014090 <floor+0xe8>
 8013fde:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8013fe2:	431d      	orrs	r5, r3
 8013fe4:	d001      	beq.n	8013fea <floor+0x42>
 8013fe6:	4c2e      	ldr	r4, [pc, #184]	; (80140a0 <floor+0xf8>)
 8013fe8:	2500      	movs	r5, #0
 8013fea:	4623      	mov	r3, r4
 8013fec:	462f      	mov	r7, r5
 8013fee:	e025      	b.n	801403c <floor+0x94>
 8013ff0:	4a2c      	ldr	r2, [pc, #176]	; (80140a4 <floor+0xfc>)
 8013ff2:	fa42 f806 	asr.w	r8, r2, r6
 8013ff6:	ea01 0208 	and.w	r2, r1, r8
 8013ffa:	4302      	orrs	r2, r0
 8013ffc:	d01e      	beq.n	801403c <floor+0x94>
 8013ffe:	a326      	add	r3, pc, #152	; (adr r3, 8014098 <floor+0xf0>)
 8014000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014004:	f7ec f91a 	bl	800023c <__adddf3>
 8014008:	2200      	movs	r2, #0
 801400a:	2300      	movs	r3, #0
 801400c:	f7ec fb4a 	bl	80006a4 <__aeabi_dcmpgt>
 8014010:	2800      	cmp	r0, #0
 8014012:	d0ea      	beq.n	8013fea <floor+0x42>
 8014014:	2c00      	cmp	r4, #0
 8014016:	bfbe      	ittt	lt
 8014018:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801401c:	fa43 f606 	asrlt.w	r6, r3, r6
 8014020:	19a4      	addlt	r4, r4, r6
 8014022:	ea24 0408 	bic.w	r4, r4, r8
 8014026:	2500      	movs	r5, #0
 8014028:	e7df      	b.n	8013fea <floor+0x42>
 801402a:	2e33      	cmp	r6, #51	; 0x33
 801402c:	dd0a      	ble.n	8014044 <floor+0x9c>
 801402e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8014032:	d103      	bne.n	801403c <floor+0x94>
 8014034:	f7ec f902 	bl	800023c <__adddf3>
 8014038:	4607      	mov	r7, r0
 801403a:	460b      	mov	r3, r1
 801403c:	4638      	mov	r0, r7
 801403e:	4619      	mov	r1, r3
 8014040:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014044:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8014048:	f04f 32ff 	mov.w	r2, #4294967295
 801404c:	fa22 f808 	lsr.w	r8, r2, r8
 8014050:	ea18 0f00 	tst.w	r8, r0
 8014054:	d0f2      	beq.n	801403c <floor+0x94>
 8014056:	a310      	add	r3, pc, #64	; (adr r3, 8014098 <floor+0xf0>)
 8014058:	e9d3 2300 	ldrd	r2, r3, [r3]
 801405c:	f7ec f8ee 	bl	800023c <__adddf3>
 8014060:	2200      	movs	r2, #0
 8014062:	2300      	movs	r3, #0
 8014064:	f7ec fb1e 	bl	80006a4 <__aeabi_dcmpgt>
 8014068:	2800      	cmp	r0, #0
 801406a:	d0be      	beq.n	8013fea <floor+0x42>
 801406c:	2c00      	cmp	r4, #0
 801406e:	da02      	bge.n	8014076 <floor+0xce>
 8014070:	2e14      	cmp	r6, #20
 8014072:	d103      	bne.n	801407c <floor+0xd4>
 8014074:	3401      	adds	r4, #1
 8014076:	ea25 0508 	bic.w	r5, r5, r8
 801407a:	e7b6      	b.n	8013fea <floor+0x42>
 801407c:	2301      	movs	r3, #1
 801407e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8014082:	fa03 f606 	lsl.w	r6, r3, r6
 8014086:	4435      	add	r5, r6
 8014088:	42bd      	cmp	r5, r7
 801408a:	bf38      	it	cc
 801408c:	18e4      	addcc	r4, r4, r3
 801408e:	e7f2      	b.n	8014076 <floor+0xce>
 8014090:	2500      	movs	r5, #0
 8014092:	462c      	mov	r4, r5
 8014094:	e7a9      	b.n	8013fea <floor+0x42>
 8014096:	bf00      	nop
 8014098:	8800759c 	.word	0x8800759c
 801409c:	7e37e43c 	.word	0x7e37e43c
 80140a0:	bff00000 	.word	0xbff00000
 80140a4:	000fffff 	.word	0x000fffff

080140a8 <_init>:
 80140a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140aa:	bf00      	nop
 80140ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80140ae:	bc08      	pop	{r3}
 80140b0:	469e      	mov	lr, r3
 80140b2:	4770      	bx	lr

080140b4 <_fini>:
 80140b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140b6:	bf00      	nop
 80140b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80140ba:	bc08      	pop	{r3}
 80140bc:	469e      	mov	lr, r3
 80140be:	4770      	bx	lr
