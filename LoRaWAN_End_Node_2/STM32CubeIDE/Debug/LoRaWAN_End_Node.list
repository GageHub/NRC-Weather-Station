
LoRaWAN_End_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013ce0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001070  08013e20  08013e20  00023e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014e90  08014e90  0003e5c0  2**0
                  CONTENTS
  4 .ARM          00000008  08014e90  08014e90  00024e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014e98  08014e98  0003e5c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08014e98  08014e98  00024e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08014ea0  08014ea0  00024ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .USER_embedded_Keys 000000c0  0803e500  0803e500  0003e500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000188  20000000  08014ea8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 LW_NVM_RAM    00000e70  20008000  20008000  00048000  2**2
                  ALLOC
 11 .bss          000014b8  20000188  20000188  00040188  2**2
                  ALLOC
 12 RAM1_region   00000000  20001640  20001640  0003e5c0  2**0
                  CONTENTS
 13 RAM2_region   00000000  20009000  20009000  0003e5c0  2**0
                  CONTENTS
 14 ._user_heap_stack 00000a00  20001640  20001640  00040188  2**0
                  ALLOC
 15 .ARM.attributes 0000002a  00000000  00000000  0003e5c0  2**0
                  CONTENTS, READONLY
 16 .debug_info   00061086  00000000  00000000  0003e5ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000c545  00000000  00000000  0009f670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    0002a890  00000000  00000000  000abbb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003050  00000000  00000000  000d6448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00003240  00000000  00000000  000d9498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002c939  00000000  00000000  000dc6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   00051fb2  00000000  00000000  00109011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000e25ed  00000000  00000000  0015afc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000050  00000000  00000000  0023d5b0  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00008d1c  00000000  00000000  0023d600  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000188 	.word	0x20000188
 800015c:	00000000 	.word	0x00000000
 8000160:	08013e08 	.word	0x08013e08

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000018c 	.word	0x2000018c
 800017c:	08013e08 	.word	0x08013e08

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_fmul>:
 8000230:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000234:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000238:	bf1e      	ittt	ne
 800023a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800023e:	ea92 0f0c 	teqne	r2, ip
 8000242:	ea93 0f0c 	teqne	r3, ip
 8000246:	d06f      	beq.n	8000328 <__aeabi_fmul+0xf8>
 8000248:	441a      	add	r2, r3
 800024a:	ea80 0c01 	eor.w	ip, r0, r1
 800024e:	0240      	lsls	r0, r0, #9
 8000250:	bf18      	it	ne
 8000252:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000256:	d01e      	beq.n	8000296 <__aeabi_fmul+0x66>
 8000258:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800025c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000260:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000264:	fba0 3101 	umull	r3, r1, r0, r1
 8000268:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800026c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000270:	bf3e      	ittt	cc
 8000272:	0049      	lslcc	r1, r1, #1
 8000274:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000278:	005b      	lslcc	r3, r3, #1
 800027a:	ea40 0001 	orr.w	r0, r0, r1
 800027e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000282:	2afd      	cmp	r2, #253	; 0xfd
 8000284:	d81d      	bhi.n	80002c2 <__aeabi_fmul+0x92>
 8000286:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800028a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800028e:	bf08      	it	eq
 8000290:	f020 0001 	biceq.w	r0, r0, #1
 8000294:	4770      	bx	lr
 8000296:	f090 0f00 	teq	r0, #0
 800029a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800029e:	bf08      	it	eq
 80002a0:	0249      	lsleq	r1, r1, #9
 80002a2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80002a6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80002aa:	3a7f      	subs	r2, #127	; 0x7f
 80002ac:	bfc2      	ittt	gt
 80002ae:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002b2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002b6:	4770      	bxgt	lr
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	3a01      	subs	r2, #1
 80002c2:	dc5d      	bgt.n	8000380 <__aeabi_fmul+0x150>
 80002c4:	f112 0f19 	cmn.w	r2, #25
 80002c8:	bfdc      	itt	le
 80002ca:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002ce:	4770      	bxle	lr
 80002d0:	f1c2 0200 	rsb	r2, r2, #0
 80002d4:	0041      	lsls	r1, r0, #1
 80002d6:	fa21 f102 	lsr.w	r1, r1, r2
 80002da:	f1c2 0220 	rsb	r2, r2, #32
 80002de:	fa00 fc02 	lsl.w	ip, r0, r2
 80002e2:	ea5f 0031 	movs.w	r0, r1, rrx
 80002e6:	f140 0000 	adc.w	r0, r0, #0
 80002ea:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80002ee:	bf08      	it	eq
 80002f0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80002f4:	4770      	bx	lr
 80002f6:	f092 0f00 	teq	r2, #0
 80002fa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80002fe:	bf02      	ittt	eq
 8000300:	0040      	lsleq	r0, r0, #1
 8000302:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000306:	3a01      	subeq	r2, #1
 8000308:	d0f9      	beq.n	80002fe <__aeabi_fmul+0xce>
 800030a:	ea40 000c 	orr.w	r0, r0, ip
 800030e:	f093 0f00 	teq	r3, #0
 8000312:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000316:	bf02      	ittt	eq
 8000318:	0049      	lsleq	r1, r1, #1
 800031a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800031e:	3b01      	subeq	r3, #1
 8000320:	d0f9      	beq.n	8000316 <__aeabi_fmul+0xe6>
 8000322:	ea41 010c 	orr.w	r1, r1, ip
 8000326:	e78f      	b.n	8000248 <__aeabi_fmul+0x18>
 8000328:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800032c:	ea92 0f0c 	teq	r2, ip
 8000330:	bf18      	it	ne
 8000332:	ea93 0f0c 	teqne	r3, ip
 8000336:	d00a      	beq.n	800034e <__aeabi_fmul+0x11e>
 8000338:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800033c:	bf18      	it	ne
 800033e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000342:	d1d8      	bne.n	80002f6 <__aeabi_fmul+0xc6>
 8000344:	ea80 0001 	eor.w	r0, r0, r1
 8000348:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800034c:	4770      	bx	lr
 800034e:	f090 0f00 	teq	r0, #0
 8000352:	bf17      	itett	ne
 8000354:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000358:	4608      	moveq	r0, r1
 800035a:	f091 0f00 	teqne	r1, #0
 800035e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000362:	d014      	beq.n	800038e <__aeabi_fmul+0x15e>
 8000364:	ea92 0f0c 	teq	r2, ip
 8000368:	d101      	bne.n	800036e <__aeabi_fmul+0x13e>
 800036a:	0242      	lsls	r2, r0, #9
 800036c:	d10f      	bne.n	800038e <__aeabi_fmul+0x15e>
 800036e:	ea93 0f0c 	teq	r3, ip
 8000372:	d103      	bne.n	800037c <__aeabi_fmul+0x14c>
 8000374:	024b      	lsls	r3, r1, #9
 8000376:	bf18      	it	ne
 8000378:	4608      	movne	r0, r1
 800037a:	d108      	bne.n	800038e <__aeabi_fmul+0x15e>
 800037c:	ea80 0001 	eor.w	r0, r0, r1
 8000380:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000384:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000388:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800038c:	4770      	bx	lr
 800038e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000392:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000396:	4770      	bx	lr

08000398 <__aeabi_drsub>:
 8000398:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800039c:	e002      	b.n	80003a4 <__adddf3>
 800039e:	bf00      	nop

080003a0 <__aeabi_dsub>:
 80003a0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003a4 <__adddf3>:
 80003a4:	b530      	push	{r4, r5, lr}
 80003a6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003aa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ae:	ea94 0f05 	teq	r4, r5
 80003b2:	bf08      	it	eq
 80003b4:	ea90 0f02 	teqeq	r0, r2
 80003b8:	bf1f      	itttt	ne
 80003ba:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003be:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003c2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003c6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ca:	f000 80e2 	beq.w	8000592 <__adddf3+0x1ee>
 80003ce:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003d2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003d6:	bfb8      	it	lt
 80003d8:	426d      	neglt	r5, r5
 80003da:	dd0c      	ble.n	80003f6 <__adddf3+0x52>
 80003dc:	442c      	add	r4, r5
 80003de:	ea80 0202 	eor.w	r2, r0, r2
 80003e2:	ea81 0303 	eor.w	r3, r1, r3
 80003e6:	ea82 0000 	eor.w	r0, r2, r0
 80003ea:	ea83 0101 	eor.w	r1, r3, r1
 80003ee:	ea80 0202 	eor.w	r2, r0, r2
 80003f2:	ea81 0303 	eor.w	r3, r1, r3
 80003f6:	2d36      	cmp	r5, #54	; 0x36
 80003f8:	bf88      	it	hi
 80003fa:	bd30      	pophi	{r4, r5, pc}
 80003fc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000400:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000404:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000408:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800040c:	d002      	beq.n	8000414 <__adddf3+0x70>
 800040e:	4240      	negs	r0, r0
 8000410:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000414:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000418:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800041c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000420:	d002      	beq.n	8000428 <__adddf3+0x84>
 8000422:	4252      	negs	r2, r2
 8000424:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000428:	ea94 0f05 	teq	r4, r5
 800042c:	f000 80a7 	beq.w	800057e <__adddf3+0x1da>
 8000430:	f1a4 0401 	sub.w	r4, r4, #1
 8000434:	f1d5 0e20 	rsbs	lr, r5, #32
 8000438:	db0d      	blt.n	8000456 <__adddf3+0xb2>
 800043a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800043e:	fa22 f205 	lsr.w	r2, r2, r5
 8000442:	1880      	adds	r0, r0, r2
 8000444:	f141 0100 	adc.w	r1, r1, #0
 8000448:	fa03 f20e 	lsl.w	r2, r3, lr
 800044c:	1880      	adds	r0, r0, r2
 800044e:	fa43 f305 	asr.w	r3, r3, r5
 8000452:	4159      	adcs	r1, r3
 8000454:	e00e      	b.n	8000474 <__adddf3+0xd0>
 8000456:	f1a5 0520 	sub.w	r5, r5, #32
 800045a:	f10e 0e20 	add.w	lr, lr, #32
 800045e:	2a01      	cmp	r2, #1
 8000460:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000464:	bf28      	it	cs
 8000466:	f04c 0c02 	orrcs.w	ip, ip, #2
 800046a:	fa43 f305 	asr.w	r3, r3, r5
 800046e:	18c0      	adds	r0, r0, r3
 8000470:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	d507      	bpl.n	800048a <__adddf3+0xe6>
 800047a:	f04f 0e00 	mov.w	lr, #0
 800047e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000482:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000486:	eb6e 0101 	sbc.w	r1, lr, r1
 800048a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800048e:	d31b      	bcc.n	80004c8 <__adddf3+0x124>
 8000490:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000494:	d30c      	bcc.n	80004b0 <__adddf3+0x10c>
 8000496:	0849      	lsrs	r1, r1, #1
 8000498:	ea5f 0030 	movs.w	r0, r0, rrx
 800049c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a0:	f104 0401 	add.w	r4, r4, #1
 80004a4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004ac:	f080 809a 	bcs.w	80005e4 <__adddf3+0x240>
 80004b0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004b4:	bf08      	it	eq
 80004b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004ba:	f150 0000 	adcs.w	r0, r0, #0
 80004be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004c2:	ea41 0105 	orr.w	r1, r1, r5
 80004c6:	bd30      	pop	{r4, r5, pc}
 80004c8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004cc:	4140      	adcs	r0, r0
 80004ce:	eb41 0101 	adc.w	r1, r1, r1
 80004d2:	3c01      	subs	r4, #1
 80004d4:	bf28      	it	cs
 80004d6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004da:	d2e9      	bcs.n	80004b0 <__adddf3+0x10c>
 80004dc:	f091 0f00 	teq	r1, #0
 80004e0:	bf04      	itt	eq
 80004e2:	4601      	moveq	r1, r0
 80004e4:	2000      	moveq	r0, #0
 80004e6:	fab1 f381 	clz	r3, r1
 80004ea:	bf08      	it	eq
 80004ec:	3320      	addeq	r3, #32
 80004ee:	f1a3 030b 	sub.w	r3, r3, #11
 80004f2:	f1b3 0220 	subs.w	r2, r3, #32
 80004f6:	da0c      	bge.n	8000512 <__adddf3+0x16e>
 80004f8:	320c      	adds	r2, #12
 80004fa:	dd08      	ble.n	800050e <__adddf3+0x16a>
 80004fc:	f102 0c14 	add.w	ip, r2, #20
 8000500:	f1c2 020c 	rsb	r2, r2, #12
 8000504:	fa01 f00c 	lsl.w	r0, r1, ip
 8000508:	fa21 f102 	lsr.w	r1, r1, r2
 800050c:	e00c      	b.n	8000528 <__adddf3+0x184>
 800050e:	f102 0214 	add.w	r2, r2, #20
 8000512:	bfd8      	it	le
 8000514:	f1c2 0c20 	rsble	ip, r2, #32
 8000518:	fa01 f102 	lsl.w	r1, r1, r2
 800051c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000520:	bfdc      	itt	le
 8000522:	ea41 010c 	orrle.w	r1, r1, ip
 8000526:	4090      	lslle	r0, r2
 8000528:	1ae4      	subs	r4, r4, r3
 800052a:	bfa2      	ittt	ge
 800052c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000530:	4329      	orrge	r1, r5
 8000532:	bd30      	popge	{r4, r5, pc}
 8000534:	ea6f 0404 	mvn.w	r4, r4
 8000538:	3c1f      	subs	r4, #31
 800053a:	da1c      	bge.n	8000576 <__adddf3+0x1d2>
 800053c:	340c      	adds	r4, #12
 800053e:	dc0e      	bgt.n	800055e <__adddf3+0x1ba>
 8000540:	f104 0414 	add.w	r4, r4, #20
 8000544:	f1c4 0220 	rsb	r2, r4, #32
 8000548:	fa20 f004 	lsr.w	r0, r0, r4
 800054c:	fa01 f302 	lsl.w	r3, r1, r2
 8000550:	ea40 0003 	orr.w	r0, r0, r3
 8000554:	fa21 f304 	lsr.w	r3, r1, r4
 8000558:	ea45 0103 	orr.w	r1, r5, r3
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	f1c4 040c 	rsb	r4, r4, #12
 8000562:	f1c4 0220 	rsb	r2, r4, #32
 8000566:	fa20 f002 	lsr.w	r0, r0, r2
 800056a:	fa01 f304 	lsl.w	r3, r1, r4
 800056e:	ea40 0003 	orr.w	r0, r0, r3
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	fa21 f004 	lsr.w	r0, r1, r4
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	f094 0f00 	teq	r4, #0
 8000582:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000586:	bf06      	itte	eq
 8000588:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800058c:	3401      	addeq	r4, #1
 800058e:	3d01      	subne	r5, #1
 8000590:	e74e      	b.n	8000430 <__adddf3+0x8c>
 8000592:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000596:	bf18      	it	ne
 8000598:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800059c:	d029      	beq.n	80005f2 <__adddf3+0x24e>
 800059e:	ea94 0f05 	teq	r4, r5
 80005a2:	bf08      	it	eq
 80005a4:	ea90 0f02 	teqeq	r0, r2
 80005a8:	d005      	beq.n	80005b6 <__adddf3+0x212>
 80005aa:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ae:	bf04      	itt	eq
 80005b0:	4619      	moveq	r1, r3
 80005b2:	4610      	moveq	r0, r2
 80005b4:	bd30      	pop	{r4, r5, pc}
 80005b6:	ea91 0f03 	teq	r1, r3
 80005ba:	bf1e      	ittt	ne
 80005bc:	2100      	movne	r1, #0
 80005be:	2000      	movne	r0, #0
 80005c0:	bd30      	popne	{r4, r5, pc}
 80005c2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005c6:	d105      	bne.n	80005d4 <__adddf3+0x230>
 80005c8:	0040      	lsls	r0, r0, #1
 80005ca:	4149      	adcs	r1, r1
 80005cc:	bf28      	it	cs
 80005ce:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005d2:	bd30      	pop	{r4, r5, pc}
 80005d4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d8:	bf3c      	itt	cc
 80005da:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005de:	bd30      	popcc	{r4, r5, pc}
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005ec:	f04f 0000 	mov.w	r0, #0
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005f6:	bf1a      	itte	ne
 80005f8:	4619      	movne	r1, r3
 80005fa:	4610      	movne	r0, r2
 80005fc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000600:	bf1c      	itt	ne
 8000602:	460b      	movne	r3, r1
 8000604:	4602      	movne	r2, r0
 8000606:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800060a:	bf06      	itte	eq
 800060c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000610:	ea91 0f03 	teqeq	r1, r3
 8000614:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	bf00      	nop

0800061c <__aeabi_ui2d>:
 800061c:	f090 0f00 	teq	r0, #0
 8000620:	bf04      	itt	eq
 8000622:	2100      	moveq	r1, #0
 8000624:	4770      	bxeq	lr
 8000626:	b530      	push	{r4, r5, lr}
 8000628:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800062c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000630:	f04f 0500 	mov.w	r5, #0
 8000634:	f04f 0100 	mov.w	r1, #0
 8000638:	e750      	b.n	80004dc <__adddf3+0x138>
 800063a:	bf00      	nop

0800063c <__aeabi_i2d>:
 800063c:	f090 0f00 	teq	r0, #0
 8000640:	bf04      	itt	eq
 8000642:	2100      	moveq	r1, #0
 8000644:	4770      	bxeq	lr
 8000646:	b530      	push	{r4, r5, lr}
 8000648:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800064c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000650:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000654:	bf48      	it	mi
 8000656:	4240      	negmi	r0, r0
 8000658:	f04f 0100 	mov.w	r1, #0
 800065c:	e73e      	b.n	80004dc <__adddf3+0x138>
 800065e:	bf00      	nop

08000660 <__aeabi_f2d>:
 8000660:	0042      	lsls	r2, r0, #1
 8000662:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000666:	ea4f 0131 	mov.w	r1, r1, rrx
 800066a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800066e:	bf1f      	itttt	ne
 8000670:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000674:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000678:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800067c:	4770      	bxne	lr
 800067e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000682:	bf08      	it	eq
 8000684:	4770      	bxeq	lr
 8000686:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800068a:	bf04      	itt	eq
 800068c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000690:	4770      	bxeq	lr
 8000692:	b530      	push	{r4, r5, lr}
 8000694:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000698:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800069c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	e71c      	b.n	80004dc <__adddf3+0x138>
 80006a2:	bf00      	nop

080006a4 <__aeabi_ul2d>:
 80006a4:	ea50 0201 	orrs.w	r2, r0, r1
 80006a8:	bf08      	it	eq
 80006aa:	4770      	bxeq	lr
 80006ac:	b530      	push	{r4, r5, lr}
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	e00a      	b.n	80006ca <__aeabi_l2d+0x16>

080006b4 <__aeabi_l2d>:
 80006b4:	ea50 0201 	orrs.w	r2, r0, r1
 80006b8:	bf08      	it	eq
 80006ba:	4770      	bxeq	lr
 80006bc:	b530      	push	{r4, r5, lr}
 80006be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006c2:	d502      	bpl.n	80006ca <__aeabi_l2d+0x16>
 80006c4:	4240      	negs	r0, r0
 80006c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006d6:	f43f aed8 	beq.w	800048a <__adddf3+0xe6>
 80006da:	f04f 0203 	mov.w	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006f2:	f1c2 0320 	rsb	r3, r2, #32
 80006f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80006fa:	fa20 f002 	lsr.w	r0, r0, r2
 80006fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8000702:	ea40 000e 	orr.w	r0, r0, lr
 8000706:	fa21 f102 	lsr.w	r1, r1, r2
 800070a:	4414      	add	r4, r2
 800070c:	e6bd      	b.n	800048a <__adddf3+0xe6>
 800070e:	bf00      	nop

08000710 <__gedf2>:
 8000710:	f04f 3cff 	mov.w	ip, #4294967295
 8000714:	e006      	b.n	8000724 <__cmpdf2+0x4>
 8000716:	bf00      	nop

08000718 <__ledf2>:
 8000718:	f04f 0c01 	mov.w	ip, #1
 800071c:	e002      	b.n	8000724 <__cmpdf2+0x4>
 800071e:	bf00      	nop

08000720 <__cmpdf2>:
 8000720:	f04f 0c01 	mov.w	ip, #1
 8000724:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000728:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800072c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000730:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000734:	bf18      	it	ne
 8000736:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800073a:	d01b      	beq.n	8000774 <__cmpdf2+0x54>
 800073c:	b001      	add	sp, #4
 800073e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000742:	bf0c      	ite	eq
 8000744:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000748:	ea91 0f03 	teqne	r1, r3
 800074c:	bf02      	ittt	eq
 800074e:	ea90 0f02 	teqeq	r0, r2
 8000752:	2000      	moveq	r0, #0
 8000754:	4770      	bxeq	lr
 8000756:	f110 0f00 	cmn.w	r0, #0
 800075a:	ea91 0f03 	teq	r1, r3
 800075e:	bf58      	it	pl
 8000760:	4299      	cmppl	r1, r3
 8000762:	bf08      	it	eq
 8000764:	4290      	cmpeq	r0, r2
 8000766:	bf2c      	ite	cs
 8000768:	17d8      	asrcs	r0, r3, #31
 800076a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800076e:	f040 0001 	orr.w	r0, r0, #1
 8000772:	4770      	bx	lr
 8000774:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000778:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800077c:	d102      	bne.n	8000784 <__cmpdf2+0x64>
 800077e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000782:	d107      	bne.n	8000794 <__cmpdf2+0x74>
 8000784:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000788:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800078c:	d1d6      	bne.n	800073c <__cmpdf2+0x1c>
 800078e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000792:	d0d3      	beq.n	800073c <__cmpdf2+0x1c>
 8000794:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop

0800079c <__aeabi_cdrcmple>:
 800079c:	4684      	mov	ip, r0
 800079e:	4610      	mov	r0, r2
 80007a0:	4662      	mov	r2, ip
 80007a2:	468c      	mov	ip, r1
 80007a4:	4619      	mov	r1, r3
 80007a6:	4663      	mov	r3, ip
 80007a8:	e000      	b.n	80007ac <__aeabi_cdcmpeq>
 80007aa:	bf00      	nop

080007ac <__aeabi_cdcmpeq>:
 80007ac:	b501      	push	{r0, lr}
 80007ae:	f7ff ffb7 	bl	8000720 <__cmpdf2>
 80007b2:	2800      	cmp	r0, #0
 80007b4:	bf48      	it	mi
 80007b6:	f110 0f00 	cmnmi.w	r0, #0
 80007ba:	bd01      	pop	{r0, pc}

080007bc <__aeabi_dcmpeq>:
 80007bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007c0:	f7ff fff4 	bl	80007ac <__aeabi_cdcmpeq>
 80007c4:	bf0c      	ite	eq
 80007c6:	2001      	moveq	r0, #1
 80007c8:	2000      	movne	r0, #0
 80007ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80007ce:	bf00      	nop

080007d0 <__aeabi_dcmplt>:
 80007d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007d4:	f7ff ffea 	bl	80007ac <__aeabi_cdcmpeq>
 80007d8:	bf34      	ite	cc
 80007da:	2001      	movcc	r0, #1
 80007dc:	2000      	movcs	r0, #0
 80007de:	f85d fb08 	ldr.w	pc, [sp], #8
 80007e2:	bf00      	nop

080007e4 <__aeabi_dcmple>:
 80007e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007e8:	f7ff ffe0 	bl	80007ac <__aeabi_cdcmpeq>
 80007ec:	bf94      	ite	ls
 80007ee:	2001      	movls	r0, #1
 80007f0:	2000      	movhi	r0, #0
 80007f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80007f6:	bf00      	nop

080007f8 <__aeabi_dcmpge>:
 80007f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007fc:	f7ff ffce 	bl	800079c <__aeabi_cdrcmple>
 8000800:	bf94      	ite	ls
 8000802:	2001      	movls	r0, #1
 8000804:	2000      	movhi	r0, #0
 8000806:	f85d fb08 	ldr.w	pc, [sp], #8
 800080a:	bf00      	nop

0800080c <__aeabi_dcmpgt>:
 800080c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000810:	f7ff ffc4 	bl	800079c <__aeabi_cdrcmple>
 8000814:	bf34      	ite	cc
 8000816:	2001      	movcc	r0, #1
 8000818:	2000      	movcs	r0, #0
 800081a:	f85d fb08 	ldr.w	pc, [sp], #8
 800081e:	bf00      	nop

08000820 <__aeabi_d2iz>:
 8000820:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000824:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000828:	d215      	bcs.n	8000856 <__aeabi_d2iz+0x36>
 800082a:	d511      	bpl.n	8000850 <__aeabi_d2iz+0x30>
 800082c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000830:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000834:	d912      	bls.n	800085c <__aeabi_d2iz+0x3c>
 8000836:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800083a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800083e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000842:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000846:	fa23 f002 	lsr.w	r0, r3, r2
 800084a:	bf18      	it	ne
 800084c:	4240      	negne	r0, r0
 800084e:	4770      	bx	lr
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	4770      	bx	lr
 8000856:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800085a:	d105      	bne.n	8000868 <__aeabi_d2iz+0x48>
 800085c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000860:	bf08      	it	eq
 8000862:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000866:	4770      	bx	lr
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop

08000870 <__aeabi_frsub>:
 8000870:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000874:	e002      	b.n	800087c <__addsf3>
 8000876:	bf00      	nop

08000878 <__aeabi_fsub>:
 8000878:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800087c <__addsf3>:
 800087c:	0042      	lsls	r2, r0, #1
 800087e:	bf1f      	itttt	ne
 8000880:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000884:	ea92 0f03 	teqne	r2, r3
 8000888:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800088c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000890:	d06a      	beq.n	8000968 <__addsf3+0xec>
 8000892:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000896:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800089a:	bfc1      	itttt	gt
 800089c:	18d2      	addgt	r2, r2, r3
 800089e:	4041      	eorgt	r1, r0
 80008a0:	4048      	eorgt	r0, r1
 80008a2:	4041      	eorgt	r1, r0
 80008a4:	bfb8      	it	lt
 80008a6:	425b      	neglt	r3, r3
 80008a8:	2b19      	cmp	r3, #25
 80008aa:	bf88      	it	hi
 80008ac:	4770      	bxhi	lr
 80008ae:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80008b2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80008ba:	bf18      	it	ne
 80008bc:	4240      	negne	r0, r0
 80008be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80008c2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80008c6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80008ca:	bf18      	it	ne
 80008cc:	4249      	negne	r1, r1
 80008ce:	ea92 0f03 	teq	r2, r3
 80008d2:	d03f      	beq.n	8000954 <__addsf3+0xd8>
 80008d4:	f1a2 0201 	sub.w	r2, r2, #1
 80008d8:	fa41 fc03 	asr.w	ip, r1, r3
 80008dc:	eb10 000c 	adds.w	r0, r0, ip
 80008e0:	f1c3 0320 	rsb	r3, r3, #32
 80008e4:	fa01 f103 	lsl.w	r1, r1, r3
 80008e8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80008ec:	d502      	bpl.n	80008f4 <__addsf3+0x78>
 80008ee:	4249      	negs	r1, r1
 80008f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80008f4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80008f8:	d313      	bcc.n	8000922 <__addsf3+0xa6>
 80008fa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80008fe:	d306      	bcc.n	800090e <__addsf3+0x92>
 8000900:	0840      	lsrs	r0, r0, #1
 8000902:	ea4f 0131 	mov.w	r1, r1, rrx
 8000906:	f102 0201 	add.w	r2, r2, #1
 800090a:	2afe      	cmp	r2, #254	; 0xfe
 800090c:	d251      	bcs.n	80009b2 <__addsf3+0x136>
 800090e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000912:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000916:	bf08      	it	eq
 8000918:	f020 0001 	biceq.w	r0, r0, #1
 800091c:	ea40 0003 	orr.w	r0, r0, r3
 8000920:	4770      	bx	lr
 8000922:	0049      	lsls	r1, r1, #1
 8000924:	eb40 0000 	adc.w	r0, r0, r0
 8000928:	3a01      	subs	r2, #1
 800092a:	bf28      	it	cs
 800092c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000930:	d2ed      	bcs.n	800090e <__addsf3+0x92>
 8000932:	fab0 fc80 	clz	ip, r0
 8000936:	f1ac 0c08 	sub.w	ip, ip, #8
 800093a:	ebb2 020c 	subs.w	r2, r2, ip
 800093e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000942:	bfaa      	itet	ge
 8000944:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000948:	4252      	neglt	r2, r2
 800094a:	4318      	orrge	r0, r3
 800094c:	bfbc      	itt	lt
 800094e:	40d0      	lsrlt	r0, r2
 8000950:	4318      	orrlt	r0, r3
 8000952:	4770      	bx	lr
 8000954:	f092 0f00 	teq	r2, #0
 8000958:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800095c:	bf06      	itte	eq
 800095e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000962:	3201      	addeq	r2, #1
 8000964:	3b01      	subne	r3, #1
 8000966:	e7b5      	b.n	80008d4 <__addsf3+0x58>
 8000968:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800096c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000970:	bf18      	it	ne
 8000972:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000976:	d021      	beq.n	80009bc <__addsf3+0x140>
 8000978:	ea92 0f03 	teq	r2, r3
 800097c:	d004      	beq.n	8000988 <__addsf3+0x10c>
 800097e:	f092 0f00 	teq	r2, #0
 8000982:	bf08      	it	eq
 8000984:	4608      	moveq	r0, r1
 8000986:	4770      	bx	lr
 8000988:	ea90 0f01 	teq	r0, r1
 800098c:	bf1c      	itt	ne
 800098e:	2000      	movne	r0, #0
 8000990:	4770      	bxne	lr
 8000992:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000996:	d104      	bne.n	80009a2 <__addsf3+0x126>
 8000998:	0040      	lsls	r0, r0, #1
 800099a:	bf28      	it	cs
 800099c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80009a0:	4770      	bx	lr
 80009a2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80009a6:	bf3c      	itt	cc
 80009a8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80009ac:	4770      	bxcc	lr
 80009ae:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009b2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80009b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009ba:	4770      	bx	lr
 80009bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80009c0:	bf16      	itet	ne
 80009c2:	4608      	movne	r0, r1
 80009c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80009c8:	4601      	movne	r1, r0
 80009ca:	0242      	lsls	r2, r0, #9
 80009cc:	bf06      	itte	eq
 80009ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80009d2:	ea90 0f01 	teqeq	r0, r1
 80009d6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80009da:	4770      	bx	lr

080009dc <__aeabi_ui2f>:
 80009dc:	f04f 0300 	mov.w	r3, #0
 80009e0:	e004      	b.n	80009ec <__aeabi_i2f+0x8>
 80009e2:	bf00      	nop

080009e4 <__aeabi_i2f>:
 80009e4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80009e8:	bf48      	it	mi
 80009ea:	4240      	negmi	r0, r0
 80009ec:	ea5f 0c00 	movs.w	ip, r0
 80009f0:	bf08      	it	eq
 80009f2:	4770      	bxeq	lr
 80009f4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80009f8:	4601      	mov	r1, r0
 80009fa:	f04f 0000 	mov.w	r0, #0
 80009fe:	e01c      	b.n	8000a3a <__aeabi_l2f+0x2a>

08000a00 <__aeabi_ul2f>:
 8000a00:	ea50 0201 	orrs.w	r2, r0, r1
 8000a04:	bf08      	it	eq
 8000a06:	4770      	bxeq	lr
 8000a08:	f04f 0300 	mov.w	r3, #0
 8000a0c:	e00a      	b.n	8000a24 <__aeabi_l2f+0x14>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_l2f>:
 8000a10:	ea50 0201 	orrs.w	r2, r0, r1
 8000a14:	bf08      	it	eq
 8000a16:	4770      	bxeq	lr
 8000a18:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000a1c:	d502      	bpl.n	8000a24 <__aeabi_l2f+0x14>
 8000a1e:	4240      	negs	r0, r0
 8000a20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a24:	ea5f 0c01 	movs.w	ip, r1
 8000a28:	bf02      	ittt	eq
 8000a2a:	4684      	moveq	ip, r0
 8000a2c:	4601      	moveq	r1, r0
 8000a2e:	2000      	moveq	r0, #0
 8000a30:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000a34:	bf08      	it	eq
 8000a36:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000a3a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000a3e:	fabc f28c 	clz	r2, ip
 8000a42:	3a08      	subs	r2, #8
 8000a44:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000a48:	db10      	blt.n	8000a6c <__aeabi_l2f+0x5c>
 8000a4a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000a4e:	4463      	add	r3, ip
 8000a50:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a54:	f1c2 0220 	rsb	r2, r2, #32
 8000a58:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000a5c:	fa20 f202 	lsr.w	r2, r0, r2
 8000a60:	eb43 0002 	adc.w	r0, r3, r2
 8000a64:	bf08      	it	eq
 8000a66:	f020 0001 	biceq.w	r0, r0, #1
 8000a6a:	4770      	bx	lr
 8000a6c:	f102 0220 	add.w	r2, r2, #32
 8000a70:	fa01 fc02 	lsl.w	ip, r1, r2
 8000a74:	f1c2 0220 	rsb	r2, r2, #32
 8000a78:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000a7c:	fa21 f202 	lsr.w	r2, r1, r2
 8000a80:	eb43 0002 	adc.w	r0, r3, r2
 8000a84:	bf08      	it	eq
 8000a86:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_f2iz>:
 8000a8c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000a90:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000a94:	d30f      	bcc.n	8000ab6 <__aeabi_f2iz+0x2a>
 8000a96:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000a9a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_f2iz+0x30>
 8000aa0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000aa4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aac:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab0:	bf18      	it	ne
 8000ab2:	4240      	negne	r0, r0
 8000ab4:	4770      	bx	lr
 8000ab6:	f04f 0000 	mov.w	r0, #0
 8000aba:	4770      	bx	lr
 8000abc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ac0:	d101      	bne.n	8000ac6 <__aeabi_f2iz+0x3a>
 8000ac2:	0242      	lsls	r2, r0, #9
 8000ac4:	d105      	bne.n	8000ad2 <__aeabi_f2iz+0x46>
 8000ac6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000aca:	bf08      	it	eq
 8000acc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ad0:	4770      	bx	lr
 8000ad2:	f04f 0000 	mov.w	r0, #0
 8000ad6:	4770      	bx	lr

08000ad8 <__aeabi_f2uiz>:
 8000ad8:	0042      	lsls	r2, r0, #1
 8000ada:	d20e      	bcs.n	8000afa <__aeabi_f2uiz+0x22>
 8000adc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ae0:	d30b      	bcc.n	8000afa <__aeabi_f2uiz+0x22>
 8000ae2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ae6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000aea:	d409      	bmi.n	8000b00 <__aeabi_f2uiz+0x28>
 8000aec:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000af0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af4:	fa23 f002 	lsr.w	r0, r3, r2
 8000af8:	4770      	bx	lr
 8000afa:	f04f 0000 	mov.w	r0, #0
 8000afe:	4770      	bx	lr
 8000b00:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b04:	d101      	bne.n	8000b0a <__aeabi_f2uiz+0x32>
 8000b06:	0242      	lsls	r2, r0, #9
 8000b08:	d102      	bne.n	8000b10 <__aeabi_f2uiz+0x38>
 8000b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_ldivmod>:
 8000b18:	b97b      	cbnz	r3, 8000b3a <__aeabi_ldivmod+0x22>
 8000b1a:	b972      	cbnz	r2, 8000b3a <__aeabi_ldivmod+0x22>
 8000b1c:	2900      	cmp	r1, #0
 8000b1e:	bfbe      	ittt	lt
 8000b20:	2000      	movlt	r0, #0
 8000b22:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000b26:	e006      	blt.n	8000b36 <__aeabi_ldivmod+0x1e>
 8000b28:	bf08      	it	eq
 8000b2a:	2800      	cmpeq	r0, #0
 8000b2c:	bf1c      	itt	ne
 8000b2e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000b32:	f04f 30ff 	movne.w	r0, #4294967295
 8000b36:	f000 b9bf 	b.w	8000eb8 <__aeabi_idiv0>
 8000b3a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b3e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b42:	2900      	cmp	r1, #0
 8000b44:	db09      	blt.n	8000b5a <__aeabi_ldivmod+0x42>
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	db1a      	blt.n	8000b80 <__aeabi_ldivmod+0x68>
 8000b4a:	f000 f84d 	bl	8000be8 <__udivmoddi4>
 8000b4e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b56:	b004      	add	sp, #16
 8000b58:	4770      	bx	lr
 8000b5a:	4240      	negs	r0, r0
 8000b5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	db1b      	blt.n	8000b9c <__aeabi_ldivmod+0x84>
 8000b64:	f000 f840 	bl	8000be8 <__udivmoddi4>
 8000b68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b70:	b004      	add	sp, #16
 8000b72:	4240      	negs	r0, r0
 8000b74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b78:	4252      	negs	r2, r2
 8000b7a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b7e:	4770      	bx	lr
 8000b80:	4252      	negs	r2, r2
 8000b82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b86:	f000 f82f 	bl	8000be8 <__udivmoddi4>
 8000b8a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b92:	b004      	add	sp, #16
 8000b94:	4240      	negs	r0, r0
 8000b96:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b9a:	4770      	bx	lr
 8000b9c:	4252      	negs	r2, r2
 8000b9e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ba2:	f000 f821 	bl	8000be8 <__udivmoddi4>
 8000ba6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000baa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bae:	b004      	add	sp, #16
 8000bb0:	4252      	negs	r2, r2
 8000bb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14d      	bne.n	8000c94 <__udivmoddi4+0xac>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d968      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b152      	cbz	r2, 8000c1a <__udivmoddi4+0x32>
 8000c04:	fa01 f302 	lsl.w	r3, r1, r2
 8000c08:	f1c2 0120 	rsb	r1, r2, #32
 8000c0c:	fa20 f101 	lsr.w	r1, r0, r1
 8000c10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c14:	ea41 0803 	orr.w	r8, r1, r3
 8000c18:	4094      	lsls	r4, r2
 8000c1a:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000c1e:	0c21      	lsrs	r1, r4, #16
 8000c20:	fbb8 fef5 	udiv	lr, r8, r5
 8000c24:	fa1f f78c 	uxth.w	r7, ip
 8000c28:	fb05 831e 	mls	r3, r5, lr, r8
 8000c2c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c30:	fb0e f107 	mul.w	r1, lr, r7
 8000c34:	4299      	cmp	r1, r3
 8000c36:	d90b      	bls.n	8000c50 <__udivmoddi4+0x68>
 8000c38:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3c:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000c40:	f080 811e 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c44:	4299      	cmp	r1, r3
 8000c46:	f240 811b 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c4a:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c4e:	4463      	add	r3, ip
 8000c50:	1a5b      	subs	r3, r3, r1
 8000c52:	b2a4      	uxth	r4, r4
 8000c54:	fbb3 f0f5 	udiv	r0, r3, r5
 8000c58:	fb05 3310 	mls	r3, r5, r0, r3
 8000c5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c60:	fb00 f707 	mul.w	r7, r0, r7
 8000c64:	42a7      	cmp	r7, r4
 8000c66:	d90a      	bls.n	8000c7e <__udivmoddi4+0x96>
 8000c68:	eb1c 0404 	adds.w	r4, ip, r4
 8000c6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c70:	f080 8108 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c74:	42a7      	cmp	r7, r4
 8000c76:	f240 8105 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c7a:	4464      	add	r4, ip
 8000c7c:	3802      	subs	r0, #2
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000c84:	2100      	movs	r1, #0
 8000c86:	b11e      	cbz	r6, 8000c90 <__udivmoddi4+0xa8>
 8000c88:	40d4      	lsrs	r4, r2
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	428b      	cmp	r3, r1
 8000c96:	d908      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c98:	2e00      	cmp	r6, #0
 8000c9a:	f000 80ee 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	e9c6 0500 	strd	r0, r5, [r6]
 8000ca4:	4608      	mov	r0, r1
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f183 	clz	r1, r3
 8000cae:	2900      	cmp	r1, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	42ab      	cmp	r3, r5
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb65 0303 	sbc.w	r3, r5, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	4698      	mov	r8, r3
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d0e2      	beq.n	8000c90 <__udivmoddi4+0xa8>
 8000cca:	e9c6 4800 	strd	r4, r8, [r6]
 8000cce:	e7df      	b.n	8000c90 <__udivmoddi4+0xa8>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8091 	bne.w	8000e00 <__udivmoddi4+0x218>
 8000cde:	eba1 050c 	sub.w	r5, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2101      	movs	r1, #1
 8000cec:	fbb5 f3f7 	udiv	r3, r5, r7
 8000cf0:	fb07 5013 	mls	r0, r7, r3, r5
 8000cf4:	0c25      	lsrs	r5, r4, #16
 8000cf6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	42a8      	cmp	r0, r5
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0505 	adds.w	r5, ip, r5
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	42a8      	cmp	r0, r5
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a2d      	subs	r5, r5, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb5 f0f7 	udiv	r0, r5, r7
 8000d1c:	fb07 5510 	mls	r5, r7, r0, r5
 8000d20:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4628      	mov	r0, r5
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79e      	b.n	8000c86 <__udivmoddi4+0x9e>
 8000d48:	f1c1 0720 	rsb	r7, r1, #32
 8000d4c:	408b      	lsls	r3, r1
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa05 f301 	lsl.w	r3, r5, r1
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40fd      	lsrs	r5, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f301 	lsl.w	r3, r0, r1
 8000d6a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 5518 	mls	r5, r9, r8, r5
 8000d78:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	42a8      	cmp	r0, r5
 8000d82:	fa02 f201 	lsl.w	r2, r2, r1
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0505 	adds.w	r5, ip, r5
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	42a8      	cmp	r0, r5
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4465      	add	r5, ip
 8000da0:	1a2d      	subs	r5, r5, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb5 f0f9 	udiv	r0, r5, r9
 8000da8:	fb09 5510 	mls	r5, r9, r0, r5
 8000dac:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	45ae      	cmp	lr, r5
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0505 	adds.w	r5, ip, r5
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	45ae      	cmp	lr, r5
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4465      	add	r5, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba5 050e 	sub.w	r5, r5, lr
 8000dd6:	42a5      	cmp	r5, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15e      	cbz	r6, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb65 050e 	sbc.w	r5, r5, lr
 8000dea:	fa05 f707 	lsl.w	r7, r5, r7
 8000dee:	fa22 f301 	lsr.w	r3, r2, r1
 8000df2:	40cd      	lsrs	r5, r1
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c6 7500 	strd	r7, r5, [r6]
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e00:	f1c2 0320 	rsb	r3, r2, #32
 8000e04:	fa20 f103 	lsr.w	r1, r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa25 f303 	lsr.w	r3, r5, r3
 8000e10:	4095      	lsls	r5, r2
 8000e12:	430d      	orrs	r5, r1
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f1f7 	udiv	r1, r3, r7
 8000e20:	fb07 3011 	mls	r0, r7, r1, r3
 8000e24:	0c2b      	lsrs	r3, r5, #16
 8000e26:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000e2a:	fb01 f00e 	mul.w	r0, r1, lr
 8000e2e:	4298      	cmp	r0, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f101 38ff 	add.w	r8, r1, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	4298      	cmp	r0, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3902      	subs	r1, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1a1b      	subs	r3, r3, r0
 8000e4a:	b2ad      	uxth	r5, r5
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3310 	mls	r3, r7, r0, r3
 8000e54:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e58:	fb00 f30e 	mul.w	r3, r0, lr
 8000e5c:	42ab      	cmp	r3, r5
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0505 	adds.w	r5, ip, r5
 8000e64:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	42ab      	cmp	r3, r5
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4465      	add	r5, ip
 8000e72:	1aed      	subs	r5, r5, r3
 8000e74:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	4631      	mov	r1, r6
 8000e7c:	4630      	mov	r0, r6
 8000e7e:	e707      	b.n	8000c90 <__udivmoddi4+0xa8>
 8000e80:	4686      	mov	lr, r0
 8000e82:	e6e5      	b.n	8000c50 <__udivmoddi4+0x68>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6fa      	b.n	8000c7e <__udivmoddi4+0x96>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4641      	mov	r1, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4465      	add	r5, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4608      	mov	r0, r1
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000ebc:	b508      	push	{r3, lr}

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000ebe:	4813      	ldr	r0, [pc, #76]	; (8000f0c <MX_ADC_Init+0x50>)
 8000ec0:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <MX_ADC_Init+0x54>)
 8000ec2:	6003      	str	r3, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ec4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000ec8:	6043      	str	r3, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ece:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ed0:	6103      	str	r3, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ed2:	2204      	movs	r2, #4
 8000ed4:	6142      	str	r2, [r0, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000ed6:	7603      	strb	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000ed8:	7643      	strb	r3, [r0, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000eda:	7683      	strb	r3, [r0, #26]
  hadc.Init.NbrOfConversion = 1;
 8000edc:	2201      	movs	r2, #1
 8000ede:	61c2      	str	r2, [r0, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000ee0:	f880 3020 	strb.w	r3, [r0, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ee4:	6243      	str	r3, [r0, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ee6:	6283      	str	r3, [r0, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000ee8:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000eec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ef0:	6302      	str	r2, [r0, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000ef2:	2207      	movs	r2, #7
 8000ef4:	6342      	str	r2, [r0, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000ef6:	6382      	str	r2, [r0, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000ef8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000efc:	64c3      	str	r3, [r0, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000efe:	f002 fe99 	bl	8003c34 <HAL_ADC_Init>
 8000f02:	b900      	cbnz	r0, 8000f06 <MX_ADC_Init+0x4a>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000f04:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000f06:	f000 fb2b 	bl	8001560 <Error_Handler>
}
 8000f0a:	e7fb      	b.n	8000f04 <MX_ADC_Init+0x48>
 8000f0c:	200001a4 	.word	0x200001a4
 8000f10:	40012400 	.word	0x40012400

08000f14 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8000f14:	6802      	ldr	r2, [r0, #0]
 8000f16:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <HAL_ADC_MspInit+0x28>)
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d000      	beq.n	8000f1e <HAL_ADC_MspInit+0xa>
 8000f1c:	4770      	bx	lr
{
 8000f1e:	b082      	sub	sp, #8
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f24:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f2a:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f32:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000f34:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_ADC_CLK_ENABLE();
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8000f36:	b002      	add	sp, #8
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	40012400 	.word	0x40012400

08000f40 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8000f40:	6802      	ldr	r2, [r0, #0]
 8000f42:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <HAL_ADC_MspDeInit+0x18>)
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d000      	beq.n	8000f4a <HAL_ADC_MspDeInit+0xa>
    __HAL_RCC_ADC_CLK_DISABLE();
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8000f48:	4770      	bx	lr
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000f4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f4e:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8000f50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000f54:	6613      	str	r3, [r2, #96]	; 0x60
 8000f56:	e7f7      	b.n	8000f48 <HAL_ADC_MspDeInit+0x8>
 8000f58:	40012400 	.word	0x40012400

08000f5c <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8000f5c:	b530      	push	{r4, r5, lr}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	4604      	mov	r4, r0
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f62:	2300      	movs	r3, #0
 8000f64:	9301      	str	r3, [sp, #4]
 8000f66:	9302      	str	r3, [sp, #8]
 8000f68:	9303      	str	r3, [sp, #12]

  MX_ADC_Init();
 8000f6a:	f7ff ffa7 	bl	8000ebc <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8000f6e:	4816      	ldr	r0, [pc, #88]	; (8000fc8 <ADC_ReadChannels+0x6c>)
 8000f70:	f003 faa4 	bl	80044bc <HAL_ADCEx_Calibration_Start>
 8000f74:	b9f8      	cbnz	r0, 8000fb6 <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8000f76:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000f7c:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f7e:	a901      	add	r1, sp, #4
 8000f80:	4811      	ldr	r0, [pc, #68]	; (8000fc8 <ADC_ReadChannels+0x6c>)
 8000f82:	f002 ffe5 	bl	8003f50 <HAL_ADC_ConfigChannel>
 8000f86:	b9c8      	cbnz	r0, 8000fbc <ADC_ReadChannels+0x60>
  {
    Error_Handler();
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8000f88:	480f      	ldr	r0, [pc, #60]	; (8000fc8 <ADC_ReadChannels+0x6c>)
 8000f8a:	f003 f9a5 	bl	80042d8 <HAL_ADC_Start>
 8000f8e:	b9c0      	cbnz	r0, 8000fc2 <ADC_ReadChannels+0x66>
  {
    /* Start Error */
    Error_Handler();
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000f90:	4c0d      	ldr	r4, [pc, #52]	; (8000fc8 <ADC_ReadChannels+0x6c>)
 8000f92:	f04f 31ff 	mov.w	r1, #4294967295
 8000f96:	4620      	mov	r0, r4
 8000f98:	f002 ff78 	bl	8003e8c <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	f003 fa6d 	bl	800447c <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8000fa2:	4620      	mov	r0, r4
 8000fa4:	f002 ffd1 	bl	8003f4a <HAL_ADC_GetValue>
 8000fa8:	4605      	mov	r5, r0

  HAL_ADC_DeInit(&hadc);
 8000faa:	4620      	mov	r0, r4
 8000fac:	f003 fa10 	bl	80043d0 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8000fb0:	4628      	mov	r0, r5
 8000fb2:	b005      	add	sp, #20
 8000fb4:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8000fb6:	f000 fad3 	bl	8001560 <Error_Handler>
 8000fba:	e7dc      	b.n	8000f76 <ADC_ReadChannels+0x1a>
    Error_Handler();
 8000fbc:	f000 fad0 	bl	8001560 <Error_Handler>
 8000fc0:	e7e2      	b.n	8000f88 <ADC_ReadChannels+0x2c>
    Error_Handler();
 8000fc2:	f000 facd 	bl	8001560 <Error_Handler>
 8000fc6:	e7e3      	b.n	8000f90 <ADC_ReadChannels+0x34>
 8000fc8:	200001a4 	.word	0x200001a4

08000fcc <SYS_InitMeasurement>:
  hadc.Instance = ADC;
 8000fcc:	4b01      	ldr	r3, [pc, #4]	; (8000fd4 <SYS_InitMeasurement+0x8>)
 8000fce:	4a02      	ldr	r2, [pc, #8]	; (8000fd8 <SYS_InitMeasurement+0xc>)
 8000fd0:	601a      	str	r2, [r3, #0]
}
 8000fd2:	4770      	bx	lr
 8000fd4:	200001a4 	.word	0x200001a4
 8000fd8:	40012400 	.word	0x40012400

08000fdc <SYS_GetBatteryLevel>:
{
 8000fdc:	b508      	push	{r3, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8000fde:	480d      	ldr	r0, [pc, #52]	; (8001014 <SYS_GetBatteryLevel+0x38>)
 8000fe0:	f7ff ffbc 	bl	8000f5c <ADC_ReadChannels>
  if (measuredLevel == 0)
 8000fe4:	b1a0      	cbz	r0, 8001010 <SYS_GetBatteryLevel+0x34>
 8000fe6:	4602      	mov	r2, r0
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8000fe8:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <SYS_GetBatteryLevel+0x3c>)
 8000fea:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8000fee:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ff2:	428b      	cmp	r3, r1
 8000ff4:	d007      	beq.n	8001006 <SYS_GetBatteryLevel+0x2a>
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8000ff6:	f640 40e4 	movw	r0, #3300	; 0xce4
 8000ffa:	fb03 f000 	mul.w	r0, r3, r0
 8000ffe:	fbb0 f0f2 	udiv	r0, r0, r2
 8001002:	b280      	uxth	r0, r0
 8001004:	e005      	b.n	8001012 <SYS_GetBatteryLevel+0x36>
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8001006:	4805      	ldr	r0, [pc, #20]	; (800101c <SYS_GetBatteryLevel+0x40>)
 8001008:	fbb0 f0f2 	udiv	r0, r0, r2
 800100c:	b280      	uxth	r0, r0
 800100e:	e000      	b.n	8001012 <SYS_GetBatteryLevel+0x36>
    batteryLevelmV = 0;
 8001010:	2000      	movs	r0, #0
}
 8001012:	bd08      	pop	{r3, pc}
 8001014:	b4002000 	.word	0xb4002000
 8001018:	1fff7500 	.word	0x1fff7500
 800101c:	004c08d8 	.word	0x004c08d8

08001020 <SYS_GetTemperatureLevel>:
{
 8001020:	b510      	push	{r4, lr}
 8001022:	b082      	sub	sp, #8
  __IO int16_t temperatureDegreeC = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 800102a:	f7ff ffd7 	bl	8000fdc <SYS_GetBatteryLevel>
 800102e:	4604      	mov	r4, r0
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8001030:	4821      	ldr	r0, [pc, #132]	; (80010b8 <SYS_GetTemperatureLevel+0x98>)
 8001032:	f7ff ff93 	bl	8000f5c <ADC_ReadChannels>
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 8001036:	4b21      	ldr	r3, [pc, #132]	; (80010bc <SYS_GetTemperatureLevel+0x9c>)
 8001038:	f8b3 20c8 	ldrh.w	r2, [r3, #200]	; 0xc8
 800103c:	f8b3 10a8 	ldrh.w	r1, [r3, #168]	; 0xa8
 8001040:	428a      	cmp	r2, r1
 8001042:	d01d      	beq.n	8001080 <SYS_GetTemperatureLevel+0x60>
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 8001044:	fb00 f304 	mul.w	r3, r0, r4
 8001048:	089b      	lsrs	r3, r3, #2
 800104a:	4c1d      	ldr	r4, [pc, #116]	; (80010c0 <SYS_GetTemperatureLevel+0xa0>)
 800104c:	fba4 0303 	umull	r0, r3, r4, r3
 8001050:	ebc1 1353 	rsb	r3, r1, r3, lsr #5
 8001054:	2064      	movs	r0, #100	; 0x64
 8001056:	fb00 f303 	mul.w	r3, r0, r3
 800105a:	1a52      	subs	r2, r2, r1
 800105c:	fb93 f3f2 	sdiv	r3, r3, r2
 8001060:	331e      	adds	r3, #30
 8001062:	b21b      	sxth	r3, r3
 8001064:	f8ad 3006 	strh.w	r3, [sp, #6]
  temperatureDegreeC <<= 8;
 8001068:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800106c:	b21b      	sxth	r3, r3
 800106e:	021b      	lsls	r3, r3, #8
 8001070:	b21b      	sxth	r3, r3
 8001072:	f8ad 3006 	strh.w	r3, [sp, #6]
  return (int16_t) temperatureDegreeC;
 8001076:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}
 800107a:	b200      	sxth	r0, r0
 800107c:	b002      	add	sp, #8
 800107e:	bd10      	pop	{r4, pc}
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8001080:	fb00 f404 	mul.w	r4, r0, r4
 8001084:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <SYS_GetTemperatureLevel+0xa4>)
 8001086:	fba3 2304 	umull	r2, r3, r3, r4
 800108a:	1ae4      	subs	r4, r4, r3
 800108c:	eb03 0454 	add.w	r4, r3, r4, lsr #1
 8001090:	0ae4      	lsrs	r4, r4, #11
 8001092:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001096:	fb03 f404 	mul.w	r4, r3, r4
 800109a:	f5a4 2439 	sub.w	r4, r4, #757760	; 0xb9000
 800109e:	f5a4 640c 	sub.w	r4, r4, #2240	; 0x8c0
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <SYS_GetTemperatureLevel+0xa8>)
 80010a4:	fb83 2304 	smull	r2, r3, r3, r4
 80010a8:	17e4      	asrs	r4, r4, #31
 80010aa:	ebc4 24a3 	rsb	r4, r4, r3, asr #10
 80010ae:	341e      	adds	r4, #30
 80010b0:	b224      	sxth	r4, r4
 80010b2:	f8ad 4006 	strh.w	r4, [sp, #6]
 80010b6:	e7d7      	b.n	8001068 <SYS_GetTemperatureLevel+0x48>
 80010b8:	b0001000 	.word	0xb0001000
 80010bc:	1fff7500 	.word	0x1fff7500
 80010c0:	09ee009f 	.word	0x09ee009f
 80010c4:	00100101 	.word	0x00100101
 80010c8:	68db8bad 	.word	0x68db8bad

080010cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010cc:	b500      	push	{lr}
 80010ce:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB1ENR, Periphs);
 80010d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80010d6:	f042 0204 	orr.w	r2, r2, #4
 80010da:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80010dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80010de:	f002 0204 	and.w	r2, r2, #4
 80010e2:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80010e4:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80010e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80010e8:	f042 0201 	orr.w	r2, r2, #1
 80010ec:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80010ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80010f6:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 80010f8:	2200      	movs	r2, #0
 80010fa:	2102      	movs	r1, #2
 80010fc:	200f      	movs	r0, #15
 80010fe:	f003 fa8f 	bl	8004620 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001102:	200f      	movs	r0, #15
 8001104:	f003 fac4 	bl	8004690 <HAL_NVIC_EnableIRQ>

}
 8001108:	b003      	add	sp, #12
 800110a:	f85d fb04 	ldr.w	pc, [sp], #4

0800110e <FLASH_IF_IsEmpty>:
  /* USER CODE END FLASH_IF_IsEmpty_1 */
  uint64_t *addr64;
  uint32_t i;

  /* start memory NOT 64bits aligned */
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 800110e:	e000      	b.n	8001112 <FLASH_IF_IsEmpty+0x4>
  {
    if (*addr++ != UINT8_MAX)
    {
      return FLASH_NOT_EMPTY;
    }
    size--;
 8001110:	3901      	subs	r1, #1
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001112:	f010 0307 	ands.w	r3, r0, #7
 8001116:	d012      	beq.n	800113e <FLASH_IF_IsEmpty+0x30>
    if (*addr++ != UINT8_MAX)
 8001118:	f810 3b01 	ldrb.w	r3, [r0], #1
 800111c:	2bff      	cmp	r3, #255	; 0xff
 800111e:	d0f7      	beq.n	8001110 <FLASH_IF_IsEmpty+0x2>
      return FLASH_NOT_EMPTY;
 8001120:	2001      	movs	r0, #1
 8001122:	4770      	bx	lr
  {
    if (*addr++ != UINT8_MAX)
    {
      return FLASH_NOT_EMPTY;
    }
    size--;
 8001124:	3901      	subs	r1, #1
  while (size != 0)
 8001126:	b129      	cbz	r1, 8001134 <FLASH_IF_IsEmpty+0x26>
    if (*addr++ != UINT8_MAX)
 8001128:	f810 3b01 	ldrb.w	r3, [r0], #1
 800112c:	2bff      	cmp	r3, #255	; 0xff
 800112e:	d0f9      	beq.n	8001124 <FLASH_IF_IsEmpty+0x16>
      return FLASH_NOT_EMPTY;
 8001130:	2001      	movs	r0, #1
 8001132:	e002      	b.n	800113a <FLASH_IF_IsEmpty+0x2c>
  }
  return FLASH_EMPTY;
 8001134:	2000      	movs	r0, #0
 8001136:	e000      	b.n	800113a <FLASH_IF_IsEmpty+0x2c>
      return FLASH_NOT_EMPTY;
 8001138:	2001      	movs	r0, #1
  /* USER CODE BEGIN FLASH_IF_IsEmpty_2 */

  /* USER CODE END FLASH_IF_IsEmpty_2 */
}
 800113a:	bc10      	pop	{r4}
 800113c:	4770      	bx	lr
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 800113e:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001142:	d212      	bcs.n	800116a <FLASH_IF_IsEmpty+0x5c>
{
 8001144:	b410      	push	{r4}
    if (*addr64++ != UINT64_MAX)
 8001146:	4602      	mov	r2, r0
 8001148:	f852 4b08 	ldr.w	r4, [r2], #8
 800114c:	6840      	ldr	r0, [r0, #4]
 800114e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001152:	bf08      	it	eq
 8001154:	f1b4 3fff 	cmpeq.w	r4, #4294967295
 8001158:	d1ee      	bne.n	8001138 <FLASH_IF_IsEmpty+0x2a>
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 800115a:	3301      	adds	r3, #1
    if (*addr64++ != UINT64_MAX)
 800115c:	4610      	mov	r0, r2
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 800115e:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001162:	d3f0      	bcc.n	8001146 <FLASH_IF_IsEmpty+0x38>
  size -= sizeof(uint64_t) * i;
 8001164:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
  while (size != 0)
 8001168:	e7dd      	b.n	8001126 <FLASH_IF_IsEmpty+0x18>
  size -= sizeof(uint64_t) * i;
 800116a:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
  while (size != 0)
 800116e:	b129      	cbz	r1, 800117c <FLASH_IF_IsEmpty+0x6e>
    if (*addr++ != UINT8_MAX)
 8001170:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001174:	2bff      	cmp	r3, #255	; 0xff
 8001176:	d103      	bne.n	8001180 <FLASH_IF_IsEmpty+0x72>
    size--;
 8001178:	3901      	subs	r1, #1
 800117a:	e7f8      	b.n	800116e <FLASH_IF_IsEmpty+0x60>
  return FLASH_EMPTY;
 800117c:	2000      	movs	r0, #0
 800117e:	4770      	bx	lr
      return FLASH_NOT_EMPTY;
 8001180:	2001      	movs	r0, #1
}
 8001182:	4770      	bx	lr

08001184 <FLASH_IF_Write64>:
{
 8001184:	b570      	push	{r4, r5, r6, lr}
 8001186:	4604      	mov	r4, r0
 8001188:	4616      	mov	r6, r2
 800118a:	461d      	mov	r5, r3
  while (*(uint64_t *)address != data)
 800118c:	e005      	b.n	800119a <FLASH_IF_Write64+0x16>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data);
 800118e:	4632      	mov	r2, r6
 8001190:	462b      	mov	r3, r5
 8001192:	4621      	mov	r1, r4
 8001194:	2001      	movs	r0, #1
 8001196:	f003 fda7 	bl	8004ce8 <HAL_FLASH_Program>
  while (*(uint64_t *)address != data)
 800119a:	6822      	ldr	r2, [r4, #0]
 800119c:	6863      	ldr	r3, [r4, #4]
 800119e:	42ab      	cmp	r3, r5
 80011a0:	bf08      	it	eq
 80011a2:	42b2      	cmpeq	r2, r6
 80011a4:	d005      	beq.n	80011b2 <FLASH_IF_Write64+0x2e>
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
#if defined(CORE_CM0PLUS)
  return ((READ_BIT(FLASH->C2SR, FLASH_C2SR_PESD) == (FLASH_C2SR_PESD)) ? 1UL : 0UL);
#else
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 80011a6:	4904      	ldr	r1, [pc, #16]	; (80011b8 <FLASH_IF_Write64+0x34>)
 80011a8:	6909      	ldr	r1, [r1, #16]
 80011aa:	f411 2f00 	tst.w	r1, #524288	; 0x80000
 80011ae:	d1fa      	bne.n	80011a6 <FLASH_IF_Write64+0x22>
 80011b0:	e7ed      	b.n	800118e <FLASH_IF_Write64+0xa>
}
 80011b2:	2000      	movs	r0, #0
 80011b4:	bd70      	pop	{r4, r5, r6, pc}
 80011b6:	bf00      	nop
 80011b8:	58004000 	.word	0x58004000

080011bc <FLASH_IF_Write_Buffer>:
{
 80011bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	4606      	mov	r6, r0
 80011c4:	460c      	mov	r4, r1
 80011c6:	4690      	mov	r8, r2
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 80011c8:	2500      	movs	r5, #0
  int32_t status = FLASH_OK;
 80011ca:	462f      	mov	r7, r5
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 80011cc:	e003      	b.n	80011d6 <FLASH_IF_Write_Buffer+0x1a>
    pDestination += sizeof(uint64_t);
 80011ce:	3608      	adds	r6, #8
    pSrc += sizeof(uint64_t);
 80011d0:	3408      	adds	r4, #8
    if (status != FLASH_OK)
 80011d2:	b9af      	cbnz	r7, 8001200 <FLASH_IF_Write_Buffer+0x44>
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 80011d4:	3501      	adds	r5, #1
 80011d6:	ebb5 0fd8 	cmp.w	r5, r8, lsr #3
 80011da:	d211      	bcs.n	8001200 <FLASH_IF_Write_Buffer+0x44>
    UTIL_MEM_cpy_8(&src_value, pSrc, sizeof(uint64_t));
 80011dc:	2208      	movs	r2, #8
 80011de:	4621      	mov	r1, r4
 80011e0:	4668      	mov	r0, sp
 80011e2:	f011 fc43 	bl	8012a6c <UTIL_MEM_cpy_8>
    if (src_value != UINT64_MAX)
 80011e6:	9a00      	ldr	r2, [sp, #0]
 80011e8:	9b01      	ldr	r3, [sp, #4]
 80011ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011ee:	bf08      	it	eq
 80011f0:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80011f4:	d0eb      	beq.n	80011ce <FLASH_IF_Write_Buffer+0x12>
      status = FLASH_IF_Write64(pDestination, src_value);
 80011f6:	4630      	mov	r0, r6
 80011f8:	f7ff ffc4 	bl	8001184 <FLASH_IF_Write64>
 80011fc:	4607      	mov	r7, r0
 80011fe:	e7e6      	b.n	80011ce <FLASH_IF_Write_Buffer+0x12>
}
 8001200:	4638      	mov	r0, r7
 8001202:	b002      	add	sp, #8
 8001204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001208 <FLASH_IF_EraseByPages>:
{
 8001208:	b500      	push	{lr}
 800120a:	b085      	sub	sp, #20
  erase_str.TypeErase = FLASH_TYPEERASE_PAGES;
 800120c:	2302      	movs	r3, #2
 800120e:	9301      	str	r3, [sp, #4]
  erase_str.Page = page;
 8001210:	9002      	str	r0, [sp, #8]
  erase_str.NbPages = n;
 8001212:	9103      	str	r1, [sp, #12]
  if (interrupt)
 8001214:	b13a      	cbz	r2, 8001226 <FLASH_IF_EraseByPages+0x1e>
    hal_status = HAL_FLASHEx_Erase_IT(&erase_str);
 8001216:	a801      	add	r0, sp, #4
 8001218:	f003 fe2e 	bl	8004e78 <HAL_FLASHEx_Erase_IT>
  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 800121c:	b140      	cbz	r0, 8001230 <FLASH_IF_EraseByPages+0x28>
 800121e:	2802      	cmp	r0, #2
 8001220:	d10a      	bne.n	8001238 <FLASH_IF_EraseByPages+0x30>
 8001222:	2001      	movs	r0, #1
 8001224:	e005      	b.n	8001232 <FLASH_IF_EraseByPages+0x2a>
    hal_status = HAL_FLASHEx_Erase(&erase_str, &page_error);
 8001226:	4669      	mov	r1, sp
 8001228:	a801      	add	r0, sp, #4
 800122a:	f003 fde5 	bl	8004df8 <HAL_FLASHEx_Erase>
 800122e:	e7f5      	b.n	800121c <FLASH_IF_EraseByPages+0x14>
  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 8001230:	2000      	movs	r0, #0
}
 8001232:	b005      	add	sp, #20
 8001234:	f85d fb04 	ldr.w	pc, [sp], #4
  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 8001238:	f06f 0001 	mvn.w	r0, #1
 800123c:	e7f9      	b.n	8001232 <FLASH_IF_EraseByPages+0x2a>
	...

08001240 <FLASH_IF_Write>:
{
 8001240:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001244:	4693      	mov	fp, r2
 8001246:	4699      	mov	r9, r3
  uint32_t page_start_index = PAGE(address);
 8001248:	f100 4578 	add.w	r5, r0, #4160749568	; 0xf8000000
 800124c:	4b3e      	ldr	r3, [pc, #248]	; (8001348 <FLASH_IF_Write+0x108>)
 800124e:	f8d3 25e0 	ldr.w	r2, [r3, #1504]	; 0x5e0
 8001252:	4b3e      	ldr	r3, [pc, #248]	; (800134c <FLASH_IF_Write+0x10c>)
 8001254:	ea03 2382 	and.w	r3, r3, r2, lsl #10
 8001258:	fbb5 f2f3 	udiv	r2, r5, r3
 800125c:	fb03 5512 	mls	r5, r3, r2, r5
  uint32_t page_end_index = PAGE(address + size - 1);
 8001260:	eb00 0a0b 	add.w	sl, r0, fp
 8001264:	f10a 4a78 	add.w	sl, sl, #4160749568	; 0xf8000000
 8001268:	f10a 3aff 	add.w	sl, sl, #4294967295
 800126c:	fbba f2f3 	udiv	r2, sl, r3
 8001270:	fb03 aa12 	mls	sl, r3, r2, sl
  if ((data == NULL) || ((size % sizeof(uint64_t)) != 0) || ((address % sizeof(uint64_t)) != 0))
 8001274:	2900      	cmp	r1, #0
 8001276:	d052      	beq.n	800131e <FLASH_IF_Write+0xde>
 8001278:	4606      	mov	r6, r0
 800127a:	0aed      	lsrs	r5, r5, #11
 800127c:	ea4f 2ada 	mov.w	sl, sl, lsr #11
 8001280:	4688      	mov	r8, r1
 8001282:	f01b 0f07 	tst.w	fp, #7
 8001286:	d14d      	bne.n	8001324 <FLASH_IF_Write+0xe4>
 8001288:	f010 0f07 	tst.w	r0, #7
 800128c:	d14d      	bne.n	800132a <FLASH_IF_Write+0xea>
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800128e:	4b30      	ldr	r3, [pc, #192]	; (8001350 <FLASH_IF_Write+0x110>)
 8001290:	695b      	ldr	r3, [r3, #20]
 8001292:	2b00      	cmp	r3, #0
 8001294:	db4c      	blt.n	8001330 <FLASH_IF_Write+0xf0>
  if (page_start_index != page_end_index)
 8001296:	4555      	cmp	r5, sl
 8001298:	d004      	beq.n	80012a4 <FLASH_IF_Write+0x64>
    curr_size = FLASH_PAGE_SIZE - (address % FLASH_PAGE_SIZE);
 800129a:	f3c0 040a 	ubfx	r4, r0, #0, #11
 800129e:	f5c4 6400 	rsb	r4, r4, #2048	; 0x800
 80012a2:	e00d      	b.n	80012c0 <FLASH_IF_Write+0x80>
  uint32_t curr_size = size;
 80012a4:	465c      	mov	r4, fp
 80012a6:	e00b      	b.n	80012c0 <FLASH_IF_Write+0x80>
      if (FLASH_IF_Write_Buffer(curr_dest_addr, (uint8_t *)curr_src_addr, curr_size) != FLASH_OK)
 80012a8:	4622      	mov	r2, r4
 80012aa:	4641      	mov	r1, r8
 80012ac:	4630      	mov	r0, r6
 80012ae:	f7ff ff85 	bl	80011bc <FLASH_IF_Write_Buffer>
 80012b2:	2800      	cmp	r0, #0
 80012b4:	d145      	bne.n	8001342 <FLASH_IF_Write+0x102>
    curr_dest_addr += curr_size;
 80012b6:	4426      	add	r6, r4
    curr_src_addr += curr_size;
 80012b8:	44a0      	add	r8, r4
    curr_size = size - curr_size;
 80012ba:	ebab 0404 	sub.w	r4, fp, r4
  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 80012be:	3501      	adds	r5, #1
 80012c0:	4555      	cmp	r5, sl
 80012c2:	d829      	bhi.n	8001318 <FLASH_IF_Write+0xd8>
    if (FLASH_IF_IsEmpty((uint8_t *)curr_dest_addr, curr_size) != FLASH_EMPTY)
 80012c4:	4621      	mov	r1, r4
 80012c6:	4630      	mov	r0, r6
 80012c8:	f7ff ff21 	bl	800110e <FLASH_IF_IsEmpty>
 80012cc:	2800      	cmp	r0, #0
 80012ce:	d0eb      	beq.n	80012a8 <FLASH_IF_Write+0x68>
      if (dataTempPage == NULL)
 80012d0:	f1b9 0f00 	cmp.w	r9, #0
 80012d4:	d02f      	beq.n	8001336 <FLASH_IF_Write+0xf6>
      UTIL_MEM_cpy_8(dataTempPage, (uint8_t *)(idx * FLASH_PAGE_SIZE + FLASH_BASE), FLASH_PAGE_SIZE);
 80012d6:	f505 3780 	add.w	r7, r5, #65536	; 0x10000
 80012da:	02ff      	lsls	r7, r7, #11
 80012dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012e0:	4639      	mov	r1, r7
 80012e2:	4648      	mov	r0, r9
 80012e4:	f011 fbc2 	bl	8012a6c <UTIL_MEM_cpy_8>
      UTIL_MEM_cpy_8(&dataTempPage[((uint32_t)curr_dest_addr) % FLASH_PAGE_SIZE], (uint8_t *)curr_src_addr, curr_size);
 80012e8:	f3c6 000a 	ubfx	r0, r6, #0, #11
 80012ec:	b2a2      	uxth	r2, r4
 80012ee:	4641      	mov	r1, r8
 80012f0:	4448      	add	r0, r9
 80012f2:	f011 fbbb 	bl	8012a6c <UTIL_MEM_cpy_8>
      if (FLASH_IF_EraseByPages(idx, 1, 0) != FLASH_OK)
 80012f6:	2200      	movs	r2, #0
 80012f8:	2101      	movs	r1, #1
 80012fa:	4628      	mov	r0, r5
 80012fc:	f7ff ff84 	bl	8001208 <FLASH_IF_EraseByPages>
 8001300:	b9e0      	cbnz	r0, 800133c <FLASH_IF_Write+0xfc>
        if (FLASH_IF_Write_Buffer(idx * FLASH_PAGE_SIZE + FLASH_BASE, dataTempPage, FLASH_PAGE_SIZE) != FLASH_OK)
 8001302:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001306:	4649      	mov	r1, r9
 8001308:	4638      	mov	r0, r7
 800130a:	f7ff ff57 	bl	80011bc <FLASH_IF_Write_Buffer>
 800130e:	2800      	cmp	r0, #0
 8001310:	d0d1      	beq.n	80012b6 <FLASH_IF_Write+0x76>
          status = FLASH_WRITE_ERROR;
 8001312:	f06f 0002 	mvn.w	r0, #2
 8001316:	e000      	b.n	800131a <FLASH_IF_Write+0xda>
  int32_t status = FLASH_OK;
 8001318:	2000      	movs	r0, #0
}
 800131a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return FLASH_PARAM_ERROR;
 800131e:	f06f 0004 	mvn.w	r0, #4
 8001322:	e7fa      	b.n	800131a <FLASH_IF_Write+0xda>
 8001324:	f06f 0004 	mvn.w	r0, #4
 8001328:	e7f7      	b.n	800131a <FLASH_IF_Write+0xda>
 800132a:	f06f 0004 	mvn.w	r0, #4
 800132e:	e7f4      	b.n	800131a <FLASH_IF_Write+0xda>
    return FLASH_LOCK_ERROR;
 8001330:	f06f 0003 	mvn.w	r0, #3
 8001334:	e7f1      	b.n	800131a <FLASH_IF_Write+0xda>
        return FLASH_PARAM_ERROR;
 8001336:	f06f 0004 	mvn.w	r0, #4
 800133a:	e7ee      	b.n	800131a <FLASH_IF_Write+0xda>
        status = FLASH_ERASE_ERROR;
 800133c:	f06f 0001 	mvn.w	r0, #1
 8001340:	e7eb      	b.n	800131a <FLASH_IF_Write+0xda>
        status = FLASH_WRITE_ERROR;
 8001342:	f06f 0002 	mvn.w	r0, #2
 8001346:	e7e8      	b.n	800131a <FLASH_IF_Write+0xda>
 8001348:	1fff7000 	.word	0x1fff7000
 800134c:	03fffc00 	.word	0x03fffc00
 8001350:	58004000 	.word	0x58004000

08001354 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001358:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135a:	2400      	movs	r4, #0
 800135c:	9403      	str	r4, [sp, #12]
 800135e:	9404      	str	r4, [sp, #16]
 8001360:	9405      	str	r4, [sp, #20]
 8001362:	9406      	str	r4, [sp, #24]
 8001364:	9407      	str	r4, [sp, #28]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800136a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800136c:	f042 0202 	orr.w	r2, r2, #2
 8001370:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001372:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001374:	f002 0202 	and.w	r2, r2, #2
 8001378:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800137a:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800137c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800137e:	f042 0204 	orr.w	r2, r2, #4
 8001382:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001384:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001386:	f002 0204 	and.w	r2, r2, #4
 800138a:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800138c:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800138e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001390:	f042 0201 	orr.w	r2, r2, #1
 8001394:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800139e:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|PROB2_Pin|PROB1_Pin
 80013a0:	4e34      	ldr	r6, [pc, #208]	; (8001474 <MX_GPIO_Init+0x120>)
 80013a2:	4622      	mov	r2, r4
 80013a4:	f44f 413a 	mov.w	r1, #47616	; 0xba00
 80013a8:	4630      	mov	r0, r6
 80013aa:	f003 fee9 	bl	8005180 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80013ae:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 80013b2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b4:	2501      	movs	r5, #1
 80013b6:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013ba:	2302      	movs	r3, #2
 80013bc:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013be:	a903      	add	r1, sp, #12
 80013c0:	4630      	mov	r0, r6
 80013c2:	f003 fd8d 	bl	8004ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_14;
 80013c6:	f244 0310 	movw	r3, #16400	; 0x4010
 80013ca:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013cc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013d0:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d4:	a903      	add	r1, sp, #12
 80013d6:	4630      	mov	r0, r6
 80013d8:	f003 fd82 	bl	8004ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin;
 80013dc:	f04f 0803 	mov.w	r8, #3
 80013e0:	f8cd 800c 	str.w	r8, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013e4:	f44f 1704 	mov.w	r7, #2162688	; 0x210000
 80013e8:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ea:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ec:	a903      	add	r1, sp, #12
 80013ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f2:	f003 fd75 	bl	8004ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PROB2_Pin|PROB1_Pin;
 80013f6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80013fa:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fc:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001400:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001404:	a903      	add	r1, sp, #12
 8001406:	4630      	mov	r0, r6
 8001408:	f003 fd6a 	bl	8004ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT3_Pin;
 800140c:	2340      	movs	r3, #64	; 0x40
 800140e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001410:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001412:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(BUT3_GPIO_Port, &GPIO_InitStruct);
 8001414:	a903      	add	r1, sp, #12
 8001416:	4818      	ldr	r0, [pc, #96]	; (8001478 <MX_GPIO_Init+0x124>)
 8001418:	f003 fd62 	bl	8004ee0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800141c:	4622      	mov	r2, r4
 800141e:	4621      	mov	r1, r4
 8001420:	2006      	movs	r0, #6
 8001422:	f003 f8fd 	bl	8004620 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001426:	2006      	movs	r0, #6
 8001428:	f003 f932 	bl	8004690 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800142c:	4622      	mov	r2, r4
 800142e:	4621      	mov	r1, r4
 8001430:	2007      	movs	r0, #7
 8001432:	f003 f8f5 	bl	8004620 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001436:	2007      	movs	r0, #7
 8001438:	f003 f92a 	bl	8004690 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800143c:	4622      	mov	r2, r4
 800143e:	4621      	mov	r1, r4
 8001440:	200a      	movs	r0, #10
 8001442:	f003 f8ed 	bl	8004620 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001446:	200a      	movs	r0, #10
 8001448:	f003 f922 	bl	8004690 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800144c:	4622      	mov	r2, r4
 800144e:	4621      	mov	r1, r4
 8001450:	2016      	movs	r0, #22
 8001452:	f003 f8e5 	bl	8004620 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001456:	2016      	movs	r0, #22
 8001458:	f003 f91a 	bl	8004690 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800145c:	4622      	mov	r2, r4
 800145e:	4621      	mov	r1, r4
 8001460:	2029      	movs	r0, #41	; 0x29
 8001462:	f003 f8dd 	bl	8004620 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001466:	2029      	movs	r0, #41	; 0x29
 8001468:	f003 f912 	bl	8004690 <HAL_NVIC_EnableIRQ>

}
 800146c:	b008      	add	sp, #32
 800146e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001472:	bf00      	nop
 8001474:	48000400 	.word	0x48000400
 8001478:	48000800 	.word	0x48000800

0800147c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800147c:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800147e:	4812      	ldr	r0, [pc, #72]	; (80014c8 <MX_I2C1_Init+0x4c>)
 8001480:	4b12      	ldr	r3, [pc, #72]	; (80014cc <MX_I2C1_Init+0x50>)
 8001482:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8001484:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <MX_I2C1_Init+0x54>)
 8001486:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800148c:	2201      	movs	r2, #1
 800148e:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001490:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001492:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001494:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001496:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001498:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800149a:	f004 f828 	bl	80054ee <HAL_I2C_Init>
 800149e:	b950      	cbnz	r0, 80014b6 <MX_I2C1_Init+0x3a>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014a0:	2100      	movs	r1, #0
 80014a2:	4809      	ldr	r0, [pc, #36]	; (80014c8 <MX_I2C1_Init+0x4c>)
 80014a4:	f004 f9fe 	bl	80058a4 <HAL_I2CEx_ConfigAnalogFilter>
 80014a8:	b940      	cbnz	r0, 80014bc <MX_I2C1_Init+0x40>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014aa:	2100      	movs	r1, #0
 80014ac:	4806      	ldr	r0, [pc, #24]	; (80014c8 <MX_I2C1_Init+0x4c>)
 80014ae:	f004 fa27 	bl	8005900 <HAL_I2CEx_ConfigDigitalFilter>
 80014b2:	b930      	cbnz	r0, 80014c2 <MX_I2C1_Init+0x46>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014b4:	bd08      	pop	{r3, pc}
    Error_Handler();
 80014b6:	f000 f853 	bl	8001560 <Error_Handler>
 80014ba:	e7f1      	b.n	80014a0 <MX_I2C1_Init+0x24>
    Error_Handler();
 80014bc:	f000 f850 	bl	8001560 <Error_Handler>
 80014c0:	e7f3      	b.n	80014aa <MX_I2C1_Init+0x2e>
    Error_Handler();
 80014c2:	f000 f84d 	bl	8001560 <Error_Handler>
}
 80014c6:	e7f5      	b.n	80014b4 <MX_I2C1_Init+0x38>
 80014c8:	20000208 	.word	0x20000208
 80014cc:	40005400 	.word	0x40005400
 80014d0:	20303e5d 	.word	0x20303e5d

080014d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80014d4:	b510      	push	{r4, lr}
 80014d6:	b096      	sub	sp, #88	; 0x58
 80014d8:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014da:	2100      	movs	r1, #0
 80014dc:	9111      	str	r1, [sp, #68]	; 0x44
 80014de:	9112      	str	r1, [sp, #72]	; 0x48
 80014e0:	9113      	str	r1, [sp, #76]	; 0x4c
 80014e2:	9114      	str	r1, [sp, #80]	; 0x50
 80014e4:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014e6:	2238      	movs	r2, #56	; 0x38
 80014e8:	a803      	add	r0, sp, #12
 80014ea:	f011 ffa5 	bl	8013438 <memset>
  if(i2cHandle->Instance==I2C1)
 80014ee:	6822      	ldr	r2, [r4, #0]
 80014f0:	4b19      	ldr	r3, [pc, #100]	; (8001558 <HAL_I2C_MspInit+0x84>)
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d001      	beq.n	80014fa <HAL_I2C_MspInit+0x26>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80014f6:	b016      	add	sp, #88	; 0x58
 80014f8:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80014fa:	2340      	movs	r3, #64	; 0x40
 80014fc:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80014fe:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001502:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001504:	a803      	add	r0, sp, #12
 8001506:	f005 f851 	bl	80065ac <HAL_RCCEx_PeriphCLKConfig>
 800150a:	bb10      	cbnz	r0, 8001552 <HAL_I2C_MspInit+0x7e>
  SET_BIT(RCC->AHB2ENR, Periphs);
 800150c:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8001510:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001512:	f043 0302 	orr.w	r3, r3, #2
 8001516:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001518:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8001520:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001522:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001526:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001528:	2312      	movs	r3, #18
 800152a:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001530:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001532:	2304      	movs	r3, #4
 8001534:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001536:	a911      	add	r1, sp, #68	; 0x44
 8001538:	4808      	ldr	r0, [pc, #32]	; (800155c <HAL_I2C_MspInit+0x88>)
 800153a:	f003 fcd1 	bl	8004ee0 <HAL_GPIO_Init>
  SET_BIT(RCC->APB1ENR1, Periphs);
 800153e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001540:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001544:	65a3      	str	r3, [r4, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001546:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001548:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800154c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800154e:	9b01      	ldr	r3, [sp, #4]
}
 8001550:	e7d1      	b.n	80014f6 <HAL_I2C_MspInit+0x22>
      Error_Handler();
 8001552:	f000 f805 	bl	8001560 <Error_Handler>
 8001556:	e7d9      	b.n	800150c <HAL_I2C_MspInit+0x38>
 8001558:	40005400 	.word	0x40005400
 800155c:	48000400 	.word	0x48000400

08001560 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001560:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001562:	e7fe      	b.n	8001562 <Error_Handler+0x2>

08001564 <SystemClock_Config>:
{
 8001564:	b510      	push	{r4, lr}
 8001566:	b09a      	sub	sp, #104	; 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001568:	2248      	movs	r2, #72	; 0x48
 800156a:	2100      	movs	r1, #0
 800156c:	a808      	add	r0, sp, #32
 800156e:	f011 ff63 	bl	8013438 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001572:	2400      	movs	r4, #0
 8001574:	9401      	str	r4, [sp, #4]
 8001576:	9402      	str	r4, [sp, #8]
 8001578:	9403      	str	r4, [sp, #12]
 800157a:	9404      	str	r4, [sp, #16]
 800157c:	9405      	str	r4, [sp, #20]
 800157e:	9406      	str	r4, [sp, #24]
 8001580:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 8001582:	f004 f9e9 	bl	8005958 <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001586:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800158a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800158e:	f023 0318 	bic.w	r3, r3, #24
 8001592:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001596:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800159a:	6813      	ldr	r3, [r2, #0]
 800159c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015a4:	6013      	str	r3, [r2, #0]
 80015a6:	6813      	ldr	r3, [r2, #0]
 80015a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015ac:	9300      	str	r3, [sp, #0]
 80015ae:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80015b0:	2324      	movs	r3, #36	; 0x24
 80015b2:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80015b4:	2381      	movs	r3, #129	; 0x81
 80015b6:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80015b8:	2301      	movs	r3, #1
 80015ba:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80015bc:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80015be:	23b0      	movs	r3, #176	; 0xb0
 80015c0:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015c2:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015c4:	a808      	add	r0, sp, #32
 80015c6:	f004 fb61 	bl	8005c8c <HAL_RCC_OscConfig>
 80015ca:	b970      	cbnz	r0, 80015ea <SystemClock_Config+0x86>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80015cc:	234f      	movs	r3, #79	; 0x4f
 80015ce:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80015d0:	2300      	movs	r3, #0
 80015d2:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d4:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015d6:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015d8:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80015da:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015dc:	2102      	movs	r1, #2
 80015de:	a801      	add	r0, sp, #4
 80015e0:	f004 fe90 	bl	8006304 <HAL_RCC_ClockConfig>
 80015e4:	b918      	cbnz	r0, 80015ee <SystemClock_Config+0x8a>
}
 80015e6:	b01a      	add	sp, #104	; 0x68
 80015e8:	bd10      	pop	{r4, pc}
    Error_Handler();
 80015ea:	f7ff ffb9 	bl	8001560 <Error_Handler>
    Error_Handler();
 80015ee:	f7ff ffb7 	bl	8001560 <Error_Handler>

080015f2 <main>:
{
 80015f2:	b508      	push	{r3, lr}
  HAL_Init();
 80015f4:	f002 fad0 	bl	8003b98 <HAL_Init>
  SystemClock_Config();
 80015f8:	f7ff ffb4 	bl	8001564 <SystemClock_Config>
  MX_GPIO_Init();
 80015fc:	f7ff feaa 	bl	8001354 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8001600:	f000 fe7c 	bl	80022fc <MX_LoRaWAN_Init>
  MX_I2C1_Init();
 8001604:	f7ff ff3a 	bl	800147c <MX_I2C1_Init>
    MX_LoRaWAN_Process();
 8001608:	f000 fe7e 	bl	8002308 <MX_LoRaWAN_Process>
  while (1)
 800160c:	e7fc      	b.n	8001608 <main+0x16>
	...

08001610 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001610:	b500      	push	{lr}
 8001612:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001614:	222c      	movs	r2, #44	; 0x2c
 8001616:	2100      	movs	r1, #0
 8001618:	a801      	add	r0, sp, #4
 800161a:	f011 ff0d 	bl	8013438 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800161e:	4819      	ldr	r0, [pc, #100]	; (8001684 <MX_RTC_Init+0x74>)
 8001620:	4b19      	ldr	r3, [pc, #100]	; (8001688 <MX_RTC_Init+0x78>)
 8001622:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001624:	231f      	movs	r3, #31
 8001626:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001628:	2300      	movs	r3, #0
 800162a:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800162c:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800162e:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001630:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001634:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001636:	6203      	str	r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001638:	f44f 7380 	mov.w	r3, #256	; 0x100
 800163c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800163e:	f005 f9c7 	bl	80069d0 <HAL_RTC_Init>
 8001642:	b9a8      	cbnz	r0, 8001670 <MX_RTC_Init+0x60>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001644:	480f      	ldr	r0, [pc, #60]	; (8001684 <MX_RTC_Init+0x74>)
 8001646:	f005 fafd 	bl	8006c44 <HAL_RTCEx_SetSSRU_IT>
 800164a:	b9a0      	cbnz	r0, 8001676 <MX_RTC_Init+0x66>
    Error_Handler();
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800164c:	2200      	movs	r2, #0
 800164e:	9208      	str	r2, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001650:	9202      	str	r2, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001652:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001654:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001658:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800165a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800165e:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001660:	a901      	add	r1, sp, #4
 8001662:	4808      	ldr	r0, [pc, #32]	; (8001684 <MX_RTC_Init+0x74>)
 8001664:	f005 fa12 	bl	8006a8c <HAL_RTC_SetAlarm_IT>
 8001668:	b940      	cbnz	r0, 800167c <MX_RTC_Init+0x6c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800166a:	b00d      	add	sp, #52	; 0x34
 800166c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001670:	f7ff ff76 	bl	8001560 <Error_Handler>
 8001674:	e7e6      	b.n	8001644 <MX_RTC_Init+0x34>
    Error_Handler();
 8001676:	f7ff ff73 	bl	8001560 <Error_Handler>
 800167a:	e7e7      	b.n	800164c <MX_RTC_Init+0x3c>
    Error_Handler();
 800167c:	f7ff ff70 	bl	8001560 <Error_Handler>
}
 8001680:	e7f3      	b.n	800166a <MX_RTC_Init+0x5a>
 8001682:	bf00      	nop
 8001684:	20000254 	.word	0x20000254
 8001688:	40002800 	.word	0x40002800

0800168c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800168c:	b510      	push	{r4, lr}
 800168e:	b090      	sub	sp, #64	; 0x40
 8001690:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001692:	2238      	movs	r2, #56	; 0x38
 8001694:	2100      	movs	r1, #0
 8001696:	a802      	add	r0, sp, #8
 8001698:	f011 fece 	bl	8013438 <memset>
  if(rtcHandle->Instance==RTC)
 800169c:	6822      	ldr	r2, [r4, #0]
 800169e:	4b1a      	ldr	r3, [pc, #104]	; (8001708 <HAL_RTC_MspInit+0x7c>)
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d001      	beq.n	80016a8 <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80016a4:	b010      	add	sp, #64	; 0x40
 80016a6:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80016a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016ac:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80016ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016b2:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016b4:	a802      	add	r0, sp, #8
 80016b6:	f004 ff79 	bl	80065ac <HAL_RCCEx_PeriphCLKConfig>
 80016ba:	bb08      	cbnz	r0, 8001700 <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80016bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016c0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80016c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 80016cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80016ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80016d2:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80016d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016da:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80016dc:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80016de:	2200      	movs	r2, #0
 80016e0:	4611      	mov	r1, r2
 80016e2:	2002      	movs	r0, #2
 80016e4:	f002 ff9c 	bl	8004620 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 80016e8:	2002      	movs	r0, #2
 80016ea:	f002 ffd1 	bl	8004690 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80016ee:	2200      	movs	r2, #0
 80016f0:	4611      	mov	r1, r2
 80016f2:	202a      	movs	r0, #42	; 0x2a
 80016f4:	f002 ff94 	bl	8004620 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80016f8:	202a      	movs	r0, #42	; 0x2a
 80016fa:	f002 ffc9 	bl	8004690 <HAL_NVIC_EnableIRQ>
}
 80016fe:	e7d1      	b.n	80016a4 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 8001700:	f7ff ff2e 	bl	8001560 <Error_Handler>
 8001704:	e7da      	b.n	80016bc <HAL_RTC_MspInit+0x30>
 8001706:	bf00      	nop
 8001708:	40002800 	.word	0x40002800

0800170c <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 800170c:	4770      	bx	lr

0800170e <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 800170e:	4770      	bx	lr

08001710 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001710:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001712:	f002 fa57 	bl	8003bc4 <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001716:	2001      	movs	r0, #1
 8001718:	4b02      	ldr	r3, [pc, #8]	; (8001724 <PWR_EnterStopMode+0x14>)
 800171a:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 800171e:	f004 f97f 	bl	8005a20 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001722:	bd08      	pop	{r3, pc}
 8001724:	58000400 	.word	0x58000400

08001728 <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 8001728:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 800172a:	f002 fa52 	bl	8003bd2 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 800172e:	bd08      	pop	{r3, pc}

08001730 <PWR_ExitStopMode>:
{
 8001730:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 8001732:	f002 fa4e 	bl	8003bd2 <HAL_ResumeTick>
  vcom_Resume();
 8001736:	f000 fda1 	bl	800227c <vcom_Resume>
}
 800173a:	bd08      	pop	{r3, pc}

0800173c <PWR_EnterSleepMode>:
{
 800173c:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 800173e:	f002 fa41 	bl	8003bc4 <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001742:	2101      	movs	r1, #1
 8001744:	2000      	movs	r0, #0
 8001746:	f004 f90f 	bl	8005968 <HAL_PWR_EnterSLEEPMode>
}
 800174a:	bd08      	pop	{r3, pc}

0800174c <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800174c:	4770      	bx	lr

0800174e <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800174e:	e7fe      	b.n	800174e <NMI_Handler>

08001750 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001750:	e7fe      	b.n	8001750 <HardFault_Handler>

08001752 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001752:	e7fe      	b.n	8001752 <MemManage_Handler>

08001754 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001754:	e7fe      	b.n	8001754 <BusFault_Handler>

08001756 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001756:	e7fe      	b.n	8001756 <UsageFault_Handler>

08001758 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001758:	4770      	bx	lr

0800175a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800175a:	4770      	bx	lr

0800175c <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800175c:	4770      	bx	lr

0800175e <SysTick_Handler>:

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800175e:	4770      	bx	lr

08001760 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001760:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001762:	4802      	ldr	r0, [pc, #8]	; (800176c <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 8001764:	f005 fa9a 	bl	8006c9c <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001768:	bd08      	pop	{r3, pc}
 800176a:	bf00      	nop
 800176c:	20000254 	.word	0x20000254

08001770 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001770:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8001772:	2001      	movs	r0, #1
 8001774:	f003 fd12 	bl	800519c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001778:	bd08      	pop	{r3, pc}

0800177a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800177a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT2_Pin);
 800177c:	2002      	movs	r0, #2
 800177e:	f003 fd0d 	bl	800519c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001782:	bd08      	pop	{r3, pc}

08001784 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI Line 4 Interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001784:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001786:	2010      	movs	r0, #16
 8001788:	f003 fd08 	bl	800519c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800178c:	bd08      	pop	{r3, pc}
	...

08001790 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001790:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001792:	4802      	ldr	r0, [pc, #8]	; (800179c <DMA1_Channel5_IRQHandler+0xc>)
 8001794:	f003 f99a 	bl	8004acc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001798:	bd08      	pop	{r3, pc}
 800179a:	bf00      	nop
 800179c:	200003d8 	.word	0x200003d8

080017a0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 80017a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT3_Pin);
 80017a2:	2040      	movs	r0, #64	; 0x40
 80017a4:	f003 fcfa 	bl	800519c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80017a8:	bd08      	pop	{r3, pc}
	...

080017ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 80017ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017ae:	4802      	ldr	r0, [pc, #8]	; (80017b8 <USART2_IRQHandler+0xc>)
 80017b0:	f005 ff30 	bl	8007614 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017b4:	bd08      	pop	{r3, pc}
 80017b6:	bf00      	nop
 80017b8:	20000438 	.word	0x20000438

080017bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 80017bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80017be:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80017c2:	f003 fceb 	bl	800519c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017c6:	bd08      	pop	{r3, pc}

080017c8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 80017c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80017ca:	4802      	ldr	r0, [pc, #8]	; (80017d4 <RTC_Alarm_IRQHandler+0xc>)
 80017cc:	f005 f878 	bl	80068c0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80017d0:	bd08      	pop	{r3, pc}
 80017d2:	bf00      	nop
 80017d4:	20000254 	.word	0x20000254

080017d8 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80017d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80017da:	4802      	ldr	r0, [pc, #8]	; (80017e4 <SUBGHZ_Radio_IRQHandler+0xc>)
 80017dc:	f005 fd08 	bl	80071f0 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80017e0:	bd08      	pop	{r3, pc}
 80017e2:	bf00      	nop
 80017e4:	2000028c 	.word	0x2000028c

080017e8 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80017e8:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80017ea:	4805      	ldr	r0, [pc, #20]	; (8001800 <MX_SUBGHZ_Init+0x18>)
 80017ec:	2308      	movs	r3, #8
 80017ee:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80017f0:	f005 fa8a 	bl	8006d08 <HAL_SUBGHZ_Init>
 80017f4:	b900      	cbnz	r0, 80017f8 <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80017f6:	bd08      	pop	{r3, pc}
    Error_Handler();
 80017f8:	f7ff feb2 	bl	8001560 <Error_Handler>
}
 80017fc:	e7fb      	b.n	80017f6 <MX_SUBGHZ_Init+0xe>
 80017fe:	bf00      	nop
 8001800:	2000028c 	.word	0x2000028c

08001804 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001804:	b500      	push	{lr}
 8001806:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001808:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800180c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800180e:	f042 0201 	orr.w	r2, r2, #1
 8001812:	665a      	str	r2, [r3, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001814:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800181c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 800181e:	2200      	movs	r2, #0
 8001820:	4611      	mov	r1, r2
 8001822:	2032      	movs	r0, #50	; 0x32
 8001824:	f002 fefc 	bl	8004620 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001828:	2032      	movs	r0, #50	; 0x32
 800182a:	f002 ff31 	bl	8004690 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 800182e:	b003      	add	sp, #12
 8001830:	f85d fb04 	ldr.w	pc, [sp], #4

08001834 <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001834:	b40c      	push	{r2, r3}
 8001836:	b500      	push	{lr}
 8001838:	b083      	sub	sp, #12
 800183a:	ab04      	add	r3, sp, #16
 800183c:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001840:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001842:	f011 fced 	bl	8013220 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001846:	b003      	add	sp, #12
 8001848:	f85d eb04 	ldr.w	lr, [sp], #4
 800184c:	b002      	add	sp, #8
 800184e:	4770      	bx	lr

08001850 <TimestampNow>:
{
 8001850:	b530      	push	{r4, r5, lr}
 8001852:	b085      	sub	sp, #20
 8001854:	4604      	mov	r4, r0
 8001856:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 8001858:	a802      	add	r0, sp, #8
 800185a:	f011 fa57 	bl	8012d0c <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 800185e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	9b02      	ldr	r3, [sp, #8]
 8001866:	4a05      	ldr	r2, [pc, #20]	; (800187c <TimestampNow+0x2c>)
 8001868:	2110      	movs	r1, #16
 800186a:	4620      	mov	r0, r4
 800186c:	f7ff ffe2 	bl	8001834 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001870:	4620      	mov	r0, r4
 8001872:	f7fe fc85 	bl	8000180 <strlen>
 8001876:	8028      	strh	r0, [r5, #0]
}
 8001878:	b005      	add	sp, #20
 800187a:	bd30      	pop	{r4, r5, pc}
 800187c:	08013f1c 	.word	0x08013f1c

08001880 <SystemApp_Init>:
{
 8001880:	b510      	push	{r4, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001882:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001886:	6893      	ldr	r3, [r2, #8]
 8001888:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800188c:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 800188e:	f011 fac1 	bl	8012e14 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001892:	2401      	movs	r4, #1
 8001894:	4b0d      	ldr	r3, [pc, #52]	; (80018cc <SystemApp_Init+0x4c>)
 8001896:	701c      	strb	r4, [r3, #0]
  DBG_Init();
 8001898:	f000 f8b8 	bl	8001a0c <DBG_Init>
  UTIL_ADV_TRACE_Init();
 800189c:	f010 ff5c 	bl	8012758 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 80018a0:	480b      	ldr	r0, [pc, #44]	; (80018d0 <SystemApp_Init+0x50>)
 80018a2:	f010 ff73 	bl	801278c <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80018a6:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <SystemApp_Init+0x54>)
 80018a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80018ac:	611a      	str	r2, [r3, #16]
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 80018ae:	2002      	movs	r0, #2
 80018b0:	f010 ff72 	bl	8012798 <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 80018b4:	f7ff fb8a 	bl	8000fcc <SYS_InitMeasurement>
  EnvSensors_Init();
 80018b8:	f000 f9a0 	bl	8001bfc <EnvSensors_Init>
  UTIL_LPM_Init();
 80018bc:	f011 f87c 	bl	80129b8 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80018c0:	4621      	mov	r1, r4
 80018c2:	4620      	mov	r0, r4
 80018c4:	f011 f898 	bl	80129f8 <UTIL_LPM_SetOffMode>
}
 80018c8:	bd10      	pop	{r4, pc}
 80018ca:	bf00      	nop
 80018cc:	20000298 	.word	0x20000298
 80018d0:	08001851 	.word	0x08001851
 80018d4:	58004000 	.word	0x58004000

080018d8 <UTIL_SEQ_Idle>:
{
 80018d8:	b508      	push	{r3, lr}
  UTIL_LPM_EnterLowPower();
 80018da:	f011 f8a3 	bl	8012a24 <UTIL_LPM_EnterLowPower>
}
 80018de:	bd08      	pop	{r3, pc}

080018e0 <GetBatteryLevel>:
{
 80018e0:	b508      	push	{r3, lr}
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 80018e2:	f7ff fb7b 	bl	8000fdc <SYS_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 80018e6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80018ea:	4298      	cmp	r0, r3
 80018ec:	d80d      	bhi.n	800190a <GetBatteryLevel+0x2a>
  else if (batteryLevelmV < VDD_MIN)
 80018ee:	f5b0 6fe1 	cmp.w	r0, #1800	; 0x708
 80018f2:	d30c      	bcc.n	800190e <GetBatteryLevel+0x2e>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80018f4:	f5a0 60e1 	sub.w	r0, r0, #1800	; 0x708
 80018f8:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
 80018fc:	0040      	lsls	r0, r0, #1
 80018fe:	4b05      	ldr	r3, [pc, #20]	; (8001914 <GetBatteryLevel+0x34>)
 8001900:	fba3 3000 	umull	r3, r0, r3, r0
 8001904:	f3c0 10c7 	ubfx	r0, r0, #7, #8
 8001908:	e000      	b.n	800190c <GetBatteryLevel+0x2c>
    batteryLevel = LORAWAN_MAX_BAT;
 800190a:	20fe      	movs	r0, #254	; 0xfe
}
 800190c:	bd08      	pop	{r3, pc}
    batteryLevel = 0;
 800190e:	2000      	movs	r0, #0
 8001910:	e7fc      	b.n	800190c <GetBatteryLevel+0x2c>
 8001912:	bf00      	nop
 8001914:	1b4e81b5 	.word	0x1b4e81b5

08001918 <GetTemperatureLevel>:
{
 8001918:	b500      	push	{lr}
 800191a:	b087      	sub	sp, #28
  EnvSensors_Read(&sensor_data);
 800191c:	4668      	mov	r0, sp
 800191e:	f000 f9f1 	bl	8001d04 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8001922:	9801      	ldr	r0, [sp, #4]
 8001924:	f7ff f8b2 	bl	8000a8c <__aeabi_f2iz>
}
 8001928:	b200      	sxth	r0, r0
 800192a:	b007      	add	sp, #28
 800192c:	f85d fb04 	ldr.w	pc, [sp], #4

08001930 <GetUniqueId>:
{
 8001930:	b538      	push	{r3, r4, r5, lr}
 8001932:	4604      	mov	r4, r0
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001934:	4b18      	ldr	r3, [pc, #96]	; (8001998 <GetUniqueId+0x68>)
 8001936:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 800193a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800193e:	d013      	beq.n	8001968 <GetUniqueId+0x38>
    id[7] = val & 0xFF;
 8001940:	71c3      	strb	r3, [r0, #7]
    id[6] = (val >> 8) & 0xFF;
 8001942:	0a1a      	lsrs	r2, r3, #8
 8001944:	7182      	strb	r2, [r0, #6]
    id[5] = (val >> 16) & 0xFF;
 8001946:	0c1a      	lsrs	r2, r3, #16
 8001948:	7142      	strb	r2, [r0, #5]
    id[4] = (val >> 24) & 0xFF;
 800194a:	0e1b      	lsrs	r3, r3, #24
 800194c:	7103      	strb	r3, [r0, #4]
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800194e:	4b12      	ldr	r3, [pc, #72]	; (8001998 <GetUniqueId+0x68>)
 8001950:	f8d3 2584 	ldr.w	r2, [r3, #1412]	; 0x584
    id[3] = val & 0xFF;
 8001954:	70c2      	strb	r2, [r0, #3]
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001956:	f8d3 3584 	ldr.w	r3, [r3, #1412]	; 0x584
 800195a:	0a1a      	lsrs	r2, r3, #8
    id[2] = val & 0xFF;
 800195c:	7082      	strb	r2, [r0, #2]
    id[1] = (val >> 8) & 0xFF;
 800195e:	0c1a      	lsrs	r2, r3, #16
 8001960:	7042      	strb	r2, [r0, #1]
    id[0] = (val >> 16) & 0xFF;
 8001962:	0e1b      	lsrs	r3, r3, #24
 8001964:	7003      	strb	r3, [r0, #0]
}
 8001966:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001968:	f002 f93a 	bl	8003be0 <HAL_GetUIDw0>
 800196c:	4605      	mov	r5, r0
 800196e:	f002 f943 	bl	8003bf8 <HAL_GetUIDw2>
 8001972:	4405      	add	r5, r0
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001974:	f002 f93a 	bl	8003bec <HAL_GetUIDw1>
    id[7] = (ID_1_3_val) >> 24;
 8001978:	0e2b      	lsrs	r3, r5, #24
 800197a:	71e3      	strb	r3, [r4, #7]
    id[6] = (ID_1_3_val) >> 16;
 800197c:	0c2b      	lsrs	r3, r5, #16
 800197e:	71a3      	strb	r3, [r4, #6]
    id[5] = (ID_1_3_val) >> 8;
 8001980:	0a2b      	lsrs	r3, r5, #8
 8001982:	7163      	strb	r3, [r4, #5]
    id[4] = (ID_1_3_val);
 8001984:	7125      	strb	r5, [r4, #4]
    id[3] = (ID_2_val) >> 24;
 8001986:	0e03      	lsrs	r3, r0, #24
 8001988:	70e3      	strb	r3, [r4, #3]
    id[2] = (ID_2_val) >> 16;
 800198a:	0c03      	lsrs	r3, r0, #16
 800198c:	70a3      	strb	r3, [r4, #2]
    id[1] = (ID_2_val) >> 8;
 800198e:	0a03      	lsrs	r3, r0, #8
 8001990:	7063      	strb	r3, [r4, #1]
    id[0] = (ID_2_val);
 8001992:	7020      	strb	r0, [r4, #0]
 8001994:	e7e7      	b.n	8001966 <GetUniqueId+0x36>
 8001996:	bf00      	nop
 8001998:	1fff7000 	.word	0x1fff7000

0800199c <GetDevAddr>:
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 800199c:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <GetDevAddr+0x24>)
 800199e:	f8d3 0580 	ldr.w	r0, [r3, #1408]	; 0x580
  if (val == 0xFFFFFFFF)
 80019a2:	f1b0 3fff 	cmp.w	r0, #4294967295
 80019a6:	d000      	beq.n	80019aa <GetDevAddr+0xe>
}
 80019a8:	4770      	bx	lr
{
 80019aa:	b510      	push	{r4, lr}
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 80019ac:	f002 f918 	bl	8003be0 <HAL_GetUIDw0>
 80019b0:	4604      	mov	r4, r0
 80019b2:	f002 f91b 	bl	8003bec <HAL_GetUIDw1>
 80019b6:	4044      	eors	r4, r0
 80019b8:	f002 f91e 	bl	8003bf8 <HAL_GetUIDw2>
 80019bc:	4060      	eors	r0, r4
}
 80019be:	bd10      	pop	{r4, pc}
 80019c0:	1fff7000 	.word	0x1fff7000

080019c4 <UTIL_ADV_TRACE_PreSendHook>:
{
 80019c4:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 80019c6:	2101      	movs	r1, #1
 80019c8:	2002      	movs	r0, #2
 80019ca:	f010 ffff 	bl	80129cc <UTIL_LPM_SetStopMode>
}
 80019ce:	bd08      	pop	{r3, pc}

080019d0 <UTIL_ADV_TRACE_PostSendHook>:
{
 80019d0:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 80019d2:	2100      	movs	r1, #0
 80019d4:	2002      	movs	r0, #2
 80019d6:	f010 fff9 	bl	80129cc <UTIL_LPM_SetStopMode>
}
 80019da:	bd08      	pop	{r3, pc}

080019dc <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 80019dc:	2000      	movs	r0, #0
 80019de:	4770      	bx	lr

080019e0 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80019e0:	b508      	push	{r3, lr}
  uint32_t ret = 0;
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 80019e2:	4b04      	ldr	r3, [pc, #16]	; (80019f4 <HAL_GetTick+0x14>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	b90b      	cbnz	r3, 80019ec <HAL_GetTick+0xc>
  uint32_t ret = 0;
 80019e8:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
}
 80019ea:	bd08      	pop	{r3, pc}
    ret = TIMER_IF_GetTimerValue();
 80019ec:	f000 fa10 	bl	8001e10 <TIMER_IF_GetTimerValue>
 80019f0:	e7fb      	b.n	80019ea <HAL_GetTick+0xa>
 80019f2:	bf00      	nop
 80019f4:	20000298 	.word	0x20000298

080019f8 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80019f8:	b500      	push	{lr}
 80019fa:	b083      	sub	sp, #12
 80019fc:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 80019fe:	9801      	ldr	r0, [sp, #4]
 8001a00:	f000 faec 	bl	8001fdc <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001a04:	b003      	add	sp, #12
 8001a06:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001a0c <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8001a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a0e:	b089      	sub	sp, #36	; 0x24
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001a10:	4a22      	ldr	r2, [pc, #136]	; (8001a9c <DBG_Init+0x90>)
 8001a12:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001a16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8001a1e:	f002 f8f1 	bl	8003c04 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8001a22:	f002 f8f7 	bl	8003c14 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8001a26:	f002 f8fd 	bl	8003c24 <HAL_DBGMCU_EnableDBGStandbyMode>
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8001a2a:	2400      	movs	r4, #0
 8001a2c:	9403      	str	r4, [sp, #12]
 8001a2e:	9404      	str	r4, [sp, #16]
 8001a30:	9405      	str	r4, [sp, #20]
 8001a32:	9406      	str	r4, [sp, #24]
 8001a34:	9407      	str	r4, [sp, #28]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8001a36:	2301      	movs	r3, #1
 8001a38:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	9306      	str	r3, [sp, #24]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a44:	f042 0202 	orr.w	r2, r2, #2
 8001a48:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a4c:	f002 0202 	and.w	r2, r2, #2
 8001a50:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001a52:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a56:	f042 0202 	orr.w	r2, r2, #2
 8001a5a:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001a64:	9b01      	ldr	r3, [sp, #4]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
  PROBE_LINE2_CLK_ENABLE();

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8001a66:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8001a6a:	9703      	str	r7, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8001a6c:	4d0c      	ldr	r5, [pc, #48]	; (8001aa0 <DBG_Init+0x94>)
 8001a6e:	a903      	add	r1, sp, #12
 8001a70:	4628      	mov	r0, r5
 8001a72:	f003 fa35 	bl	8004ee0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8001a76:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 8001a7a:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8001a7c:	a903      	add	r1, sp, #12
 8001a7e:	4628      	mov	r0, r5
 8001a80:	f003 fa2e 	bl	8004ee0 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8001a84:	4622      	mov	r2, r4
 8001a86:	4639      	mov	r1, r7
 8001a88:	4628      	mov	r0, r5
 8001a8a:	f003 fb79 	bl	8005180 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8001a8e:	4622      	mov	r2, r4
 8001a90:	4631      	mov	r1, r6
 8001a92:	4628      	mov	r0, r5
 8001a94:	f003 fb74 	bl	8005180 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8001a98:	b009      	add	sp, #36	; 0x24
 8001a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a9c:	58000800 	.word	0x58000800
 8001aa0:	48000400 	.word	0x48000400

08001aa4 <bme680I2cRead>:
/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
/* USER CODE BEGIN PrFD */

int8_t bme680I2cRead(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8001aa4:	b570      	push	{r4, r5, r6, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	4604      	mov	r4, r0
 8001aaa:	4616      	mov	r6, r2
 8001aac:	461d      	mov	r5, r3
 8001aae:	f88d 100f 	strb.w	r1, [sp, #15]
	// read I2C line

	int8_t result;
	static const size_t I2C_READ_TIMEOUT = 250;

	if (HAL_I2C_Master_Transmit(&hi2c1, (dev_id << 1), &reg_addr, 1, I2C_READ_TIMEOUT) != HAL_OK) {
 8001ab2:	23fa      	movs	r3, #250	; 0xfa
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	f10d 020f 	add.w	r2, sp, #15
 8001abc:	fa00 f103 	lsl.w	r1, r0, r3
 8001ac0:	480b      	ldr	r0, [pc, #44]	; (8001af0 <bme680I2cRead+0x4c>)
 8001ac2:	f003 fd73 	bl	80055ac <HAL_I2C_Master_Transmit>
 8001ac6:	b980      	cbnz	r0, 8001aea <bme680I2cRead+0x46>
		result = -1;
	} else if (HAL_I2C_Master_Receive (&hi2c1, (dev_id << 1) | 0x01, reg_data, len, I2C_READ_TIMEOUT) != HAL_OK) {
 8001ac8:	0061      	lsls	r1, r4, #1
 8001aca:	23fa      	movs	r3, #250	; 0xfa
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	462b      	mov	r3, r5
 8001ad0:	4632      	mov	r2, r6
 8001ad2:	f041 0101 	orr.w	r1, r1, #1
 8001ad6:	4806      	ldr	r0, [pc, #24]	; (8001af0 <bme680I2cRead+0x4c>)
 8001ad8:	f003 fe26 	bl	8005728 <HAL_I2C_Master_Receive>
 8001adc:	b910      	cbnz	r0, 8001ae4 <bme680I2cRead+0x40>
		result = -1;
	} else {
		result = 0;
 8001ade:	2000      	movs	r0, #0
	}

	return result;

}
 8001ae0:	b004      	add	sp, #16
 8001ae2:	bd70      	pop	{r4, r5, r6, pc}
		result = -1;
 8001ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae8:	e7fa      	b.n	8001ae0 <bme680I2cRead+0x3c>
		result = -1;
 8001aea:	f04f 30ff 	mov.w	r0, #4294967295
 8001aee:	e7f7      	b.n	8001ae0 <bme680I2cRead+0x3c>
 8001af0:	20000208 	.word	0x20000208

08001af4 <bme680I2cWrite>:

int8_t bme680I2cWrite(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8001af4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001af8:	b083      	sub	sp, #12
 8001afa:	4606      	mov	r6, r0
 8001afc:	4688      	mov	r8, r1
 8001afe:	4617      	mov	r7, r2
 8001b00:	461d      	mov	r5, r3
  // write to I2C line
  int8_t result;
  int8_t *buf;

  // Allocate and load I2C transmit buffer
  buf = malloc(len + 1);
 8001b02:	f103 0901 	add.w	r9, r3, #1
 8001b06:	4648      	mov	r0, r9
 8001b08:	f011 fc78 	bl	80133fc <malloc>
 8001b0c:	4604      	mov	r4, r0
  buf[0] = reg_addr;
 8001b0e:	f800 8b01 	strb.w	r8, [r0], #1
  memcpy(buf + 1, reg_data, len);
 8001b12:	462a      	mov	r2, r5
 8001b14:	4639      	mov	r1, r7
 8001b16:	f011 fc81 	bl	801341c <memcpy>

  if (HAL_I2C_Master_Transmit(&hi2c1, (dev_id << 1), (uint8_t *) buf, len + 1, HAL_MAX_DELAY) != HAL_OK) {
 8001b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	fa1f f389 	uxth.w	r3, r9
 8001b24:	4622      	mov	r2, r4
 8001b26:	0071      	lsls	r1, r6, #1
 8001b28:	4807      	ldr	r0, [pc, #28]	; (8001b48 <bme680I2cWrite+0x54>)
 8001b2a:	f003 fd3f 	bl	80055ac <HAL_I2C_Master_Transmit>
 8001b2e:	b938      	cbnz	r0, 8001b40 <bme680I2cWrite+0x4c>
    result = -1;
  } else {
    result = 0;
 8001b30:	2500      	movs	r5, #0
  }

  free(buf);
 8001b32:	4620      	mov	r0, r4
 8001b34:	f011 fc6a 	bl	801340c <free>
  return result;
}
 8001b38:	4628      	mov	r0, r5
 8001b3a:	b003      	add	sp, #12
 8001b3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    result = -1;
 8001b40:	f04f 35ff 	mov.w	r5, #4294967295
 8001b44:	e7f5      	b.n	8001b32 <bme680I2cWrite+0x3e>
 8001b46:	bf00      	nop
 8001b48:	20000208 	.word	0x20000208

08001b4c <bme680Init>:

bme bme680Init(struct bme680_dev gas_sensor, int8_t rslt, bme bmes) {
 8001b4c:	b084      	sub	sp, #16
 8001b4e:	b570      	push	{r4, r5, r6, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	4605      	mov	r5, r0
 8001b54:	ac07      	add	r4, sp, #28
 8001b56:	e884 000e 	stmia.w	r4, {r1, r2, r3}

  // ----------------------Configure the BME680 driver-----------------------------

  gas_sensor.dev_id = BME680_I2C_ADDR_PRIMARY;
 8001b5a:	2376      	movs	r3, #118	; 0x76
 8001b5c:	f88d 301d 	strb.w	r3, [sp, #29]
  gas_sensor.intf = BME680_I2C_INTF;
 8001b60:	2601      	movs	r6, #1
 8001b62:	f88d 601e 	strb.w	r6, [sp, #30]
  gas_sensor.read = bme680I2cRead;
 8001b66:	4b22      	ldr	r3, [pc, #136]	; (8001bf0 <bme680Init+0xa4>)
 8001b68:	9319      	str	r3, [sp, #100]	; 0x64
  gas_sensor.write = bme680I2cWrite;
 8001b6a:	4b22      	ldr	r3, [pc, #136]	; (8001bf4 <bme680Init+0xa8>)
 8001b6c:	931a      	str	r3, [sp, #104]	; 0x68
  gas_sensor.delay_ms = HAL_Delay;
 8001b6e:	4b22      	ldr	r3, [pc, #136]	; (8001bf8 <bme680Init+0xac>)
 8001b70:	931b      	str	r3, [sp, #108]	; 0x6c
  gas_sensor.amb_temp = 25;
 8001b72:	2319      	movs	r3, #25
 8001b74:	f88d 3020 	strb.w	r3, [sp, #32]

  // Initialize the driver
  if (bme680_init(&gas_sensor) != BME680_OK) {
 8001b78:	4620      	mov	r0, r4
 8001b7a:	f001 fd71 	bl	8003660 <bme680_init>
	//char bme_msg[] = "BME680 Initialized and Ready\r\n";
	//DebugSerialOutput(bme_msg);
  }

  // Select desired over sampling rates
  gas_sensor.tph_sett.os_hum = BME680_OS_2X;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
  gas_sensor.tph_sett.os_pres = BME680_OS_4X;
 8001b84:	2203      	movs	r2, #3
 8001b86:	f88d 2056 	strb.w	r2, [sp, #86]	; 0x56
  gas_sensor.tph_sett.os_temp = BME680_OS_8X;
 8001b8a:	2204      	movs	r2, #4
 8001b8c:	f88d 2055 	strb.w	r2, [sp, #85]	; 0x55
  gas_sensor.tph_sett.filter = BME680_FILTER_SIZE_3;
 8001b90:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57

  /* Set the remaining gas sensor settings and link the heating profile */
  gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
 8001b94:	f88d 605a 	strb.w	r6, [sp, #90]	; 0x5a
  /* Create a ramp heat waveform in 3 steps */
  gas_sensor.gas_sett.heatr_temp = 320; /* degree Celsius */
 8001b98:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001b9c:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
  gas_sensor.gas_sett.heatr_dur = 150; /* milliseconds */
 8001ba0:	2396      	movs	r3, #150	; 0x96
 8001ba2:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e

  // Set sensor to "always on"
  gas_sensor.power_mode = BME680_FORCED_MODE;
 8001ba6:	f88d 6060 	strb.w	r6, [sp, #96]	; 0x60

  // Set over sampling settings
  uint8_t required_settings = (BME680_OST_SEL | BME680_OSP_SEL | BME680_OSH_SEL | BME680_FILTER_SEL | BME680_GAS_SENSOR_SEL);
  rslt = bme680_set_sensor_settings(required_settings, &gas_sensor);
 8001baa:	4621      	mov	r1, r4
 8001bac:	20df      	movs	r0, #223	; 0xdf
 8001bae:	f001 fdbc 	bl	800372a <bme680_set_sensor_settings>

  // Set sensor mode
  rslt = bme680_set_sensor_mode(&gas_sensor);
 8001bb2:	4620      	mov	r0, r4
 8001bb4:	f001 fd71 	bl	800369a <bme680_set_sensor_mode>
 8001bb8:	4606      	mov	r6, r0

  // Query minimum sampling period
  uint16_t min_sampling_period;
  bme680_get_profile_dur(&min_sampling_period, &gas_sensor);
 8001bba:	4621      	mov	r1, r4
 8001bbc:	f10d 0006 	add.w	r0, sp, #6
 8001bc0:	f001 fefa 	bl	80039b8 <bme680_get_profile_dur>

  bmes.result = rslt;
 8001bc4:	f88d 6078 	strb.w	r6, [sp, #120]	; 0x78
  bmes.min_period = min_sampling_period;
 8001bc8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001bcc:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
  bmes.gs = gas_sensor;
 8001bd0:	2258      	movs	r2, #88	; 0x58
 8001bd2:	4621      	mov	r1, r4
 8001bd4:	a81f      	add	r0, sp, #124	; 0x7c
 8001bd6:	f011 fc21 	bl	801341c <memcpy>

  return bmes;
 8001bda:	225c      	movs	r2, #92	; 0x5c
 8001bdc:	a91e      	add	r1, sp, #120	; 0x78
 8001bde:	4628      	mov	r0, r5
 8001be0:	f011 fc1c 	bl	801341c <memcpy>

}//bme680 init
 8001be4:	4628      	mov	r0, r5
 8001be6:	b002      	add	sp, #8
 8001be8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001bec:	b004      	add	sp, #16
 8001bee:	4770      	bx	lr
 8001bf0:	08001aa5 	.word	0x08001aa5
 8001bf4:	08001af5 	.word	0x08001af5
 8001bf8:	080019f9 	.word	0x080019f9

08001bfc <EnvSensors_Init>:
{
 8001bfc:	b570      	push	{r4, r5, r6, lr}
 8001bfe:	b0c4      	sub	sp, #272	; 0x110
  bmes = bme680Init(gas_sensor, rslt, bmes);
 8001c00:	4d0f      	ldr	r5, [pc, #60]	; (8001c40 <EnvSensors_Init+0x44>)
 8001c02:	4c10      	ldr	r4, [pc, #64]	; (8001c44 <EnvSensors_Init+0x48>)
 8001c04:	265c      	movs	r6, #92	; 0x5c
 8001c06:	4632      	mov	r2, r6
 8001c08:	4629      	mov	r1, r5
 8001c0a:	a814      	add	r0, sp, #80	; 0x50
 8001c0c:	f011 fc06 	bl	801341c <memcpy>
 8001c10:	4b0d      	ldr	r3, [pc, #52]	; (8001c48 <EnvSensors_Init+0x4c>)
 8001c12:	f993 3000 	ldrsb.w	r3, [r3]
 8001c16:	9313      	str	r3, [sp, #76]	; 0x4c
 8001c18:	224c      	movs	r2, #76	; 0x4c
 8001c1a:	f104 010c 	add.w	r1, r4, #12
 8001c1e:	4668      	mov	r0, sp
 8001c20:	f011 fbfc 	bl	801341c <memcpy>
 8001c24:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001c28:	a82c      	add	r0, sp, #176	; 0xb0
 8001c2a:	f7ff ff8f 	bl	8001b4c <bme680Init>
 8001c2e:	4632      	mov	r2, r6
 8001c30:	a92c      	add	r1, sp, #176	; 0xb0
 8001c32:	4628      	mov	r0, r5
 8001c34:	f011 fbf2 	bl	801341c <memcpy>
}
 8001c38:	2000      	movs	r0, #0
 8001c3a:	b044      	add	sp, #272	; 0x110
 8001c3c:	bd70      	pop	{r4, r5, r6, pc}
 8001c3e:	bf00      	nop
 8001c40:	2000029c 	.word	0x2000029c
 8001c44:	2000030c 	.word	0x2000030c
 8001c48:	200003c8 	.word	0x200003c8

08001c4c <bme680TakeSample>:

void bme680TakeSample(sensor_t *sensor_data, char i2c_reading_buf[100], int8_t rslt, struct bme680_field_data data, uint16_t min_sampling_period, struct bme680_dev gas_sensor) {
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c52:	b085      	sub	sp, #20
 8001c54:	4604      	mov	r4, r0
 8001c56:	4688      	mov	r8, r1
 8001c58:	930d      	str	r3, [sp, #52]	; 0x34

	//------------------------Take sample using BME-----------------------------------

	// Allow BME680 to sample environment
	HAL_Delay(min_sampling_period);
 8001c5a:	f8bd 0048 	ldrh.w	r0, [sp, #72]	; 0x48
 8001c5e:	f7ff fecb 	bl	80019f8 <HAL_Delay>

	// Query the sample data
	rslt = bme680_get_sensor_data(&data, &gas_sensor);
 8001c62:	a913      	add	r1, sp, #76	; 0x4c
 8001c64:	a80d      	add	r0, sp, #52	; 0x34
 8001c66:	f001 fee1 	bl	8003a2c <bme680_get_sensor_data>

	// Format results into a readable string
	sprintf(i2c_reading_buf,
	  "Temp: %u.%u degC, Pres: %u.%u hPa, Humi: %u.%u %%rH\r\n",
	  (unsigned int)data.temperature / 100,
 8001c6a:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
	  (unsigned int)data.temperature % 100,
	  (unsigned int)data.pressure / 100,
 8001c6e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
	  (unsigned int)data.pressure % 100,
	  (unsigned int)data.humidity / 1000,
 8001c70:	9810      	ldr	r0, [sp, #64]	; 0x40
	sprintf(i2c_reading_buf,
 8001c72:	4d21      	ldr	r5, [pc, #132]	; (8001cf8 <bme680TakeSample+0xac>)
 8001c74:	fba5 320c 	umull	r3, r2, r5, ip
 8001c78:	0952      	lsrs	r2, r2, #5
 8001c7a:	2364      	movs	r3, #100	; 0x64
 8001c7c:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8001cfc <bme680TakeSample+0xb0>
 8001c80:	fba9 6100 	umull	r6, r1, r9, r0
 8001c84:	0989      	lsrs	r1, r1, #6
 8001c86:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8001c8a:	fb06 0011 	mls	r0, r6, r1, r0
 8001c8e:	9003      	str	r0, [sp, #12]
 8001c90:	9102      	str	r1, [sp, #8]
 8001c92:	fba5 1607 	umull	r1, r6, r5, r7
 8001c96:	0976      	lsrs	r6, r6, #5
 8001c98:	fb03 7716 	mls	r7, r3, r6, r7
 8001c9c:	9701      	str	r7, [sp, #4]
 8001c9e:	9600      	str	r6, [sp, #0]
 8001ca0:	fb03 c312 	mls	r3, r3, r2, ip
 8001ca4:	4916      	ldr	r1, [pc, #88]	; (8001d00 <bme680TakeSample+0xb4>)
 8001ca6:	4640      	mov	r0, r8
 8001ca8:	f011 fcbc 	bl	8013624 <siprintf>
	  (unsigned int)data.humidity % 1000);

	sensor_data->humidity    = data.humidity / 1000;
 8001cac:	9810      	ldr	r0, [sp, #64]	; 0x40
 8001cae:	fba9 3000 	umull	r3, r0, r9, r0
 8001cb2:	0980      	lsrs	r0, r0, #6
 8001cb4:	f7fe fe92 	bl	80009dc <__aeabi_ui2f>
 8001cb8:	60a0      	str	r0, [r4, #8]
	sensor_data->temperature = data.temperature / 100;
 8001cba:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 8001cbe:	fb85 2003 	smull	r2, r0, r5, r3
 8001cc2:	17db      	asrs	r3, r3, #31
 8001cc4:	ebc3 1060 	rsb	r0, r3, r0, asr #5
 8001cc8:	b200      	sxth	r0, r0
 8001cca:	f7fe fe8b 	bl	80009e4 <__aeabi_i2f>
 8001cce:	6060      	str	r0, [r4, #4]
	sensor_data->pressure    = data.pressure / 100;
 8001cd0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8001cd2:	fba5 3000 	umull	r3, r0, r5, r0
 8001cd6:	0940      	lsrs	r0, r0, #5
 8001cd8:	f7fe fe80 	bl	80009dc <__aeabi_ui2f>
 8001cdc:	6020      	str	r0, [r4, #0]

	// Publish result to connected PC
	//DebugSerialOutput(i2c_reading_buf);

	// Request the next sample
	if (gas_sensor.power_mode == BME680_FORCED_MODE) {
 8001cde:	f89d 3090 	ldrb.w	r3, [sp, #144]	; 0x90
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d004      	beq.n	8001cf0 <bme680TakeSample+0xa4>
	  rslt = bme680_set_sensor_mode(&gas_sensor);
	}

	//------------------------Finish BME sample--------------------------------

} // bme680TakeSample function
 8001ce6:	b005      	add	sp, #20
 8001ce8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001cec:	b002      	add	sp, #8
 8001cee:	4770      	bx	lr
	  rslt = bme680_set_sensor_mode(&gas_sensor);
 8001cf0:	a813      	add	r0, sp, #76	; 0x4c
 8001cf2:	f001 fcd2 	bl	800369a <bme680_set_sensor_mode>
} // bme680TakeSample function
 8001cf6:	e7f6      	b.n	8001ce6 <bme680TakeSample+0x9a>
 8001cf8:	51eb851f 	.word	0x51eb851f
 8001cfc:	10624dd3 	.word	0x10624dd3
 8001d00:	08013f28 	.word	0x08013f28

08001d04 <EnvSensors_Read>:
{
 8001d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d06:	b09d      	sub	sp, #116	; 0x74
 8001d08:	4604      	mov	r4, r0
  TEMPERATURE_Value = (SYS_GetTemperatureLevel() >> 8);
 8001d0a:	f7ff f989 	bl	8001020 <SYS_GetTemperatureLevel>
 8001d0e:	f340 200f 	sbfx	r0, r0, #8, #16
 8001d12:	f7fe fe67 	bl	80009e4 <__aeabi_i2f>
  sensor_data->humidity    = HUMIDITY_Value;
 8001d16:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <EnvSensors_Read+0x54>)
 8001d18:	60a3      	str	r3, [r4, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8001d1a:	6060      	str	r0, [r4, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8001d1c:	4b0f      	ldr	r3, [pc, #60]	; (8001d5c <EnvSensors_Read+0x58>)
 8001d1e:	6023      	str	r3, [r4, #0]
  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8001d20:	4b0f      	ldr	r3, [pc, #60]	; (8001d60 <EnvSensors_Read+0x5c>)
 8001d22:	60e3      	str	r3, [r4, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8001d24:	4b0f      	ldr	r3, [pc, #60]	; (8001d64 <EnvSensors_Read+0x60>)
 8001d26:	6123      	str	r3, [r4, #16]
  bme680TakeSample(sensor_data, i2c_reading_buf, bmes.result, data, bmes.min_period, bmes.gs);
 8001d28:	4d0f      	ldr	r5, [pc, #60]	; (8001d68 <EnvSensors_Read+0x64>)
 8001d2a:	4e10      	ldr	r6, [pc, #64]	; (8001d6c <EnvSensors_Read+0x68>)
 8001d2c:	4631      	mov	r1, r6
 8001d2e:	f911 7b04 	ldrsb.w	r7, [r1], #4
 8001d32:	2258      	movs	r2, #88	; 0x58
 8001d34:	a805      	add	r0, sp, #20
 8001d36:	f011 fb71 	bl	801341c <memcpy>
 8001d3a:	8873      	ldrh	r3, [r6, #2]
 8001d3c:	9304      	str	r3, [sp, #16]
 8001d3e:	1d2b      	adds	r3, r5, #4
 8001d40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d42:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8001d46:	682b      	ldr	r3, [r5, #0]
 8001d48:	463a      	mov	r2, r7
 8001d4a:	4909      	ldr	r1, [pc, #36]	; (8001d70 <EnvSensors_Read+0x6c>)
 8001d4c:	4620      	mov	r0, r4
 8001d4e:	f7ff ff7d 	bl	8001c4c <bme680TakeSample>
}
 8001d52:	2000      	movs	r0, #0
 8001d54:	b01d      	add	sp, #116	; 0x74
 8001d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d58:	42480000 	.word	0x42480000
 8001d5c:	447a0000 	.word	0x447a0000
 8001d60:	003e090d 	.word	0x003e090d
 8001d64:	000503ab 	.word	0x000503ab
 8001d68:	200002f8 	.word	0x200002f8
 8001d6c:	2000029c 	.word	0x2000029c
 8001d70:	20000364 	.word	0x20000364

08001d74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d74:	b510      	push	{r4, lr}
 8001d76:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d78:	4a0c      	ldr	r2, [pc, #48]	; (8001dac <_sbrk+0x38>)
 8001d7a:	490d      	ldr	r1, [pc, #52]	; (8001db0 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d7c:	480d      	ldr	r0, [pc, #52]	; (8001db4 <_sbrk+0x40>)
 8001d7e:	6800      	ldr	r0, [r0, #0]
 8001d80:	b140      	cbz	r0, 8001d94 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d82:	480c      	ldr	r0, [pc, #48]	; (8001db4 <_sbrk+0x40>)
 8001d84:	6800      	ldr	r0, [r0, #0]
 8001d86:	4403      	add	r3, r0
 8001d88:	1a52      	subs	r2, r2, r1
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d806      	bhi.n	8001d9c <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001d8e:	4a09      	ldr	r2, [pc, #36]	; (8001db4 <_sbrk+0x40>)
 8001d90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001d92:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001d94:	4807      	ldr	r0, [pc, #28]	; (8001db4 <_sbrk+0x40>)
 8001d96:	4c08      	ldr	r4, [pc, #32]	; (8001db8 <_sbrk+0x44>)
 8001d98:	6004      	str	r4, [r0, #0]
 8001d9a:	e7f2      	b.n	8001d82 <_sbrk+0xe>
    errno = ENOMEM;
 8001d9c:	f011 fb04 	bl	80133a8 <__errno>
 8001da0:	230c      	movs	r3, #12
 8001da2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001da4:	f04f 30ff 	mov.w	r0, #4294967295
 8001da8:	e7f3      	b.n	8001d92 <_sbrk+0x1e>
 8001daa:	bf00      	nop
 8001dac:	20008000 	.word	0x20008000
 8001db0:	00000800 	.word	0x00000800
 8001db4:	200003cc 	.word	0x200003cc
 8001db8:	20001640 	.word	0x20001640

08001dbc <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001dbc:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <TIMER_IF_SetTimerContext+0x1c>)
 8001dbe:	6898      	ldr	r0, [r3, #8]
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001dc0:	e001      	b.n	8001dc6 <TIMER_IF_SetTimerContext+0xa>
 8001dc2:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <TIMER_IF_SetTimerContext+0x1c>)
 8001dc4:	6898      	ldr	r0, [r3, #8]
 8001dc6:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <TIMER_IF_SetTimerContext+0x1c>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	4283      	cmp	r3, r0
 8001dcc:	d1f9      	bne.n	8001dc2 <TIMER_IF_SetTimerContext+0x6>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
  }
  return UINT32_MAX - ssr;
 8001dce:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 8001dd0:	4b02      	ldr	r3, [pc, #8]	; (8001ddc <TIMER_IF_SetTimerContext+0x20>)
 8001dd2:	6018      	str	r0, [r3, #0]
}
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	40002800 	.word	0x40002800
 8001ddc:	200003d4 	.word	0x200003d4

08001de0 <TIMER_IF_GetTimerContext>:
}
 8001de0:	4b01      	ldr	r3, [pc, #4]	; (8001de8 <TIMER_IF_GetTimerContext+0x8>)
 8001de2:	6818      	ldr	r0, [r3, #0]
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	200003d4 	.word	0x200003d4

08001dec <TIMER_IF_GetTimerElapsedTime>:
 8001dec:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001dee:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001df0:	e001      	b.n	8001df6 <TIMER_IF_GetTimerElapsedTime+0xa>
 8001df2:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001df4:	6898      	ldr	r0, [r3, #8]
 8001df6:	4b04      	ldr	r3, [pc, #16]	; (8001e08 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	4283      	cmp	r3, r0
 8001dfc:	d1f9      	bne.n	8001df2 <TIMER_IF_GetTimerElapsedTime+0x6>
  return UINT32_MAX - ssr;
 8001dfe:	43c0      	mvns	r0, r0
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001e00:	4b02      	ldr	r3, [pc, #8]	; (8001e0c <TIMER_IF_GetTimerElapsedTime+0x20>)
 8001e02:	681b      	ldr	r3, [r3, #0]
}
 8001e04:	1ac0      	subs	r0, r0, r3
 8001e06:	4770      	bx	lr
 8001e08:	40002800 	.word	0x40002800
 8001e0c:	200003d4 	.word	0x200003d4

08001e10 <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 8001e10:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <TIMER_IF_GetTimerValue+0x20>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	b153      	cbz	r3, 8001e2c <TIMER_IF_GetTimerValue+0x1c>
 8001e16:	4b07      	ldr	r3, [pc, #28]	; (8001e34 <TIMER_IF_GetTimerValue+0x24>)
 8001e18:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001e1a:	e001      	b.n	8001e20 <TIMER_IF_GetTimerValue+0x10>
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <TIMER_IF_GetTimerValue+0x24>)
 8001e1e:	6898      	ldr	r0, [r3, #8]
 8001e20:	4b04      	ldr	r3, [pc, #16]	; (8001e34 <TIMER_IF_GetTimerValue+0x24>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	4283      	cmp	r3, r0
 8001e26:	d1f9      	bne.n	8001e1c <TIMER_IF_GetTimerValue+0xc>
  return UINT32_MAX - ssr;
 8001e28:	43c0      	mvns	r0, r0
 8001e2a:	4770      	bx	lr
  uint32_t ret = 0;
 8001e2c:	2000      	movs	r0, #0
}
 8001e2e:	4770      	bx	lr
 8001e30:	200003d0 	.word	0x200003d0
 8001e34:	40002800 	.word	0x40002800

08001e38 <TIMER_IF_GetMinimumTimeout>:
}
 8001e38:	2003      	movs	r0, #3
 8001e3a:	4770      	bx	lr

08001e3c <TIMER_IF_Convert_ms2Tick>:
{
 8001e3c:	b508      	push	{r3, lr}
 8001e3e:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8001e40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e44:	2300      	movs	r3, #0
 8001e46:	0280      	lsls	r0, r0, #10
 8001e48:	0d89      	lsrs	r1, r1, #22
 8001e4a:	f7fe feb5 	bl	8000bb8 <__aeabi_uldivmod>
}
 8001e4e:	bd08      	pop	{r3, pc}

08001e50 <TIMER_IF_Convert_Tick2ms>:
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8001e50:	0ec2      	lsrs	r2, r0, #27
 8001e52:	0143      	lsls	r3, r0, #5
 8001e54:	1a1b      	subs	r3, r3, r0
 8001e56:	f162 0200 	sbc.w	r2, r2, #0
 8001e5a:	0092      	lsls	r2, r2, #2
 8001e5c:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	181b      	adds	r3, r3, r0
 8001e64:	f142 0000 	adc.w	r0, r2, #0
 8001e68:	00c0      	lsls	r0, r0, #3
 8001e6a:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8001e6e:	f3c3 13d5 	ubfx	r3, r3, #7, #22
}
 8001e72:	ea43 5080 	orr.w	r0, r3, r0, lsl #22
 8001e76:	4770      	bx	lr

08001e78 <TIMER_IF_StopTimer>:
{
 8001e78:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001e7a:	4b07      	ldr	r3, [pc, #28]	; (8001e98 <TIMER_IF_StopTimer+0x20>)
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001e80:	4c06      	ldr	r4, [pc, #24]	; (8001e9c <TIMER_IF_StopTimer+0x24>)
 8001e82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e86:	4620      	mov	r0, r4
 8001e88:	f004 fcda 	bl	8006840 <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e90:	6323      	str	r3, [r4, #48]	; 0x30
}
 8001e92:	2000      	movs	r0, #0
 8001e94:	bd10      	pop	{r4, pc}
 8001e96:	bf00      	nop
 8001e98:	40002800 	.word	0x40002800
 8001e9c:	20000254 	.word	0x20000254

08001ea0 <TIMER_IF_BkUp_Write_MSBticks>:
{
 8001ea0:	b508      	push	{r3, lr}
 8001ea2:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8001ea4:	2102      	movs	r1, #2
 8001ea6:	4802      	ldr	r0, [pc, #8]	; (8001eb0 <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 8001ea8:	f004 ff0d 	bl	8006cc6 <HAL_RTCEx_BKUPWrite>
}
 8001eac:	bd08      	pop	{r3, pc}
 8001eae:	bf00      	nop
 8001eb0:	20000254 	.word	0x20000254

08001eb4 <TIMER_IF_Init>:
{
 8001eb4:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 8001eb6:	4b0f      	ldr	r3, [pc, #60]	; (8001ef4 <TIMER_IF_Init+0x40>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	b10b      	cbz	r3, 8001ec0 <TIMER_IF_Init+0xc>
}
 8001ebc:	2000      	movs	r0, #0
 8001ebe:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001ec0:	4c0d      	ldr	r4, [pc, #52]	; (8001ef8 <TIMER_IF_Init+0x44>)
 8001ec2:	f04f 35ff 	mov.w	r5, #4294967295
 8001ec6:	6325      	str	r5, [r4, #48]	; 0x30
    MX_RTC_Init();
 8001ec8:	f7ff fba2 	bl	8001610 <MX_RTC_Init>
    TIMER_IF_StopTimer();
 8001ecc:	f7ff ffd4 	bl	8001e78 <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001ed0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ed4:	4620      	mov	r0, r4
 8001ed6:	f004 fcb3 	bl	8006840 <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001eda:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001edc:	4620      	mov	r0, r4
 8001ede:	f004 fe91 	bl	8006c04 <HAL_RTCEx_EnableBypassShadow>
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001ee2:	2000      	movs	r0, #0
 8001ee4:	f7ff ffdc 	bl	8001ea0 <TIMER_IF_BkUp_Write_MSBticks>
    TIMER_IF_SetTimerContext();
 8001ee8:	f7ff ff68 	bl	8001dbc <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 8001eec:	4b01      	ldr	r3, [pc, #4]	; (8001ef4 <TIMER_IF_Init+0x40>)
 8001eee:	2201      	movs	r2, #1
 8001ef0:	701a      	strb	r2, [r3, #0]
 8001ef2:	e7e3      	b.n	8001ebc <TIMER_IF_Init+0x8>
 8001ef4:	200003d0 	.word	0x200003d0
 8001ef8:	20000254 	.word	0x20000254

08001efc <TIMER_IF_BkUp_Write_Seconds>:
{
 8001efc:	b508      	push	{r3, lr}
 8001efe:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8001f00:	2100      	movs	r1, #0
 8001f02:	4802      	ldr	r0, [pc, #8]	; (8001f0c <TIMER_IF_BkUp_Write_Seconds+0x10>)
 8001f04:	f004 fedf 	bl	8006cc6 <HAL_RTCEx_BKUPWrite>
}
 8001f08:	bd08      	pop	{r3, pc}
 8001f0a:	bf00      	nop
 8001f0c:	20000254 	.word	0x20000254

08001f10 <TIMER_IF_BkUp_Write_SubSeconds>:
{
 8001f10:	b508      	push	{r3, lr}
 8001f12:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8001f14:	2101      	movs	r1, #1
 8001f16:	4802      	ldr	r0, [pc, #8]	; (8001f20 <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 8001f18:	f004 fed5 	bl	8006cc6 <HAL_RTCEx_BKUPWrite>
}
 8001f1c:	bd08      	pop	{r3, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000254 	.word	0x20000254

08001f24 <TIMER_IF_StartTimer>:
{
 8001f24:	b510      	push	{r4, lr}
 8001f26:	b08c      	sub	sp, #48	; 0x30
 8001f28:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 8001f2a:	222c      	movs	r2, #44	; 0x2c
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	a801      	add	r0, sp, #4
 8001f30:	f011 fa82 	bl	8013438 <memset>
  TIMER_IF_StopTimer();
 8001f34:	f7ff ffa0 	bl	8001e78 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8001f38:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <TIMER_IF_StartTimer+0x48>)
 8001f3a:	6818      	ldr	r0, [r3, #0]
 8001f3c:	4404      	add	r4, r0
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8001f42:	43e4      	mvns	r4, r4
 8001f44:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001f46:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001f48:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001f4c:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001f4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f52:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001f54:	2201      	movs	r2, #1
 8001f56:	a901      	add	r1, sp, #4
 8001f58:	4805      	ldr	r0, [pc, #20]	; (8001f70 <TIMER_IF_StartTimer+0x4c>)
 8001f5a:	f004 fd97 	bl	8006a8c <HAL_RTC_SetAlarm_IT>
 8001f5e:	b910      	cbnz	r0, 8001f66 <TIMER_IF_StartTimer+0x42>
}
 8001f60:	2000      	movs	r0, #0
 8001f62:	b00c      	add	sp, #48	; 0x30
 8001f64:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001f66:	f7ff fafb 	bl	8001560 <Error_Handler>
 8001f6a:	e7f9      	b.n	8001f60 <TIMER_IF_StartTimer+0x3c>
 8001f6c:	200003d4 	.word	0x200003d4
 8001f70:	20000254 	.word	0x20000254

08001f74 <TIMER_IF_BkUp_Read_MSBticks>:
{
 8001f74:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8001f76:	2102      	movs	r1, #2
 8001f78:	4801      	ldr	r0, [pc, #4]	; (8001f80 <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 8001f7a:	f004 feab 	bl	8006cd4 <HAL_RTCEx_BKUPRead>
}
 8001f7e:	bd08      	pop	{r3, pc}
 8001f80:	20000254 	.word	0x20000254

08001f84 <TIMER_IF_GetTime>:
{
 8001f84:	b538      	push	{r3, r4, r5, lr}
 8001f86:	4605      	mov	r5, r0
 8001f88:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <TIMER_IF_GetTime+0x34>)
 8001f8a:	689c      	ldr	r4, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001f8c:	e001      	b.n	8001f92 <TIMER_IF_GetTime+0xe>
 8001f8e:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <TIMER_IF_GetTime+0x34>)
 8001f90:	689c      	ldr	r4, [r3, #8]
 8001f92:	4a09      	ldr	r2, [pc, #36]	; (8001fb8 <TIMER_IF_GetTime+0x34>)
 8001f94:	6892      	ldr	r2, [r2, #8]
 8001f96:	42a2      	cmp	r2, r4
 8001f98:	d1f9      	bne.n	8001f8e <TIMER_IF_GetTime+0xa>
  return UINT32_MAX - ssr;
 8001f9a:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8001f9c:	f7ff ffea 	bl	8001f74 <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8001fa0:	4623      	mov	r3, r4
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8001fa2:	0aa4      	lsrs	r4, r4, #10
 8001fa4:	ea44 5480 	orr.w	r4, r4, r0, lsl #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8001fa8:	f3c3 0009 	ubfx	r0, r3, #0, #10
 8001fac:	f7ff ff50 	bl	8001e50 <TIMER_IF_Convert_Tick2ms>
 8001fb0:	8028      	strh	r0, [r5, #0]
}
 8001fb2:	4620      	mov	r0, r4
 8001fb4:	bd38      	pop	{r3, r4, r5, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40002800 	.word	0x40002800

08001fbc <TIMER_IF_BkUp_Read_Seconds>:
{
 8001fbc:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	4801      	ldr	r0, [pc, #4]	; (8001fc8 <TIMER_IF_BkUp_Read_Seconds+0xc>)
 8001fc2:	f004 fe87 	bl	8006cd4 <HAL_RTCEx_BKUPRead>
}
 8001fc6:	bd08      	pop	{r3, pc}
 8001fc8:	20000254 	.word	0x20000254

08001fcc <TIMER_IF_BkUp_Read_SubSeconds>:
{
 8001fcc:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8001fce:	2101      	movs	r1, #1
 8001fd0:	4801      	ldr	r0, [pc, #4]	; (8001fd8 <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 8001fd2:	f004 fe7f 	bl	8006cd4 <HAL_RTCEx_BKUPRead>
}
 8001fd6:	bd08      	pop	{r3, pc}
 8001fd8:	20000254 	.word	0x20000254

08001fdc <TIMER_IF_DelayMs>:
{
 8001fdc:	b508      	push	{r3, lr}
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8001fde:	f7ff ff2d 	bl	8001e3c <TIMER_IF_Convert_ms2Tick>
 8001fe2:	4b0d      	ldr	r3, [pc, #52]	; (8002018 <TIMER_IF_DelayMs+0x3c>)
 8001fe4:	6899      	ldr	r1, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001fe6:	e001      	b.n	8001fec <TIMER_IF_DelayMs+0x10>
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <TIMER_IF_DelayMs+0x3c>)
 8001fea:	6899      	ldr	r1, [r3, #8]
 8001fec:	4a0a      	ldr	r2, [pc, #40]	; (8002018 <TIMER_IF_DelayMs+0x3c>)
 8001fee:	6892      	ldr	r2, [r2, #8]
 8001ff0:	428a      	cmp	r2, r1
 8001ff2:	d1f9      	bne.n	8001fe8 <TIMER_IF_DelayMs+0xc>
  return UINT32_MAX - ssr;
 8001ff4:	43c9      	mvns	r1, r1
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001ff6:	e00a      	b.n	800200e <TIMER_IF_DelayMs+0x32>
 8001ff8:	4b07      	ldr	r3, [pc, #28]	; (8002018 <TIMER_IF_DelayMs+0x3c>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	4a06      	ldr	r2, [pc, #24]	; (8002018 <TIMER_IF_DelayMs+0x3c>)
 8001ffe:	6892      	ldr	r2, [r2, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002000:	429a      	cmp	r2, r3
 8002002:	d1f9      	bne.n	8001ff8 <TIMER_IF_DelayMs+0x1c>
  return UINT32_MAX - ssr;
 8002004:	43db      	mvns	r3, r3
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002006:	1a5b      	subs	r3, r3, r1
 8002008:	4283      	cmp	r3, r0
 800200a:	d203      	bcs.n	8002014 <TIMER_IF_DelayMs+0x38>
    __NOP();
 800200c:	bf00      	nop
 800200e:	4b02      	ldr	r3, [pc, #8]	; (8002018 <TIMER_IF_DelayMs+0x3c>)
 8002010:	689b      	ldr	r3, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002012:	e7f3      	b.n	8001ffc <TIMER_IF_DelayMs+0x20>
}
 8002014:	bd08      	pop	{r3, pc}
 8002016:	bf00      	nop
 8002018:	40002800 	.word	0x40002800

0800201c <HAL_RTC_AlarmAEventCallback>:
{
 800201c:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 800201e:	f011 f81d 	bl	801305c <UTIL_TIMER_IRQ_Handler>
}
 8002022:	bd08      	pop	{r3, pc}

08002024 <HAL_RTCEx_SSRUEventCallback>:
{
 8002024:	b508      	push	{r3, lr}
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8002026:	f7ff ffa5 	bl	8001f74 <TIMER_IF_BkUp_Read_MSBticks>
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 800202a:	3001      	adds	r0, #1
 800202c:	f7ff ff38 	bl	8001ea0 <TIMER_IF_BkUp_Write_MSBticks>
}
 8002030:	bd08      	pop	{r3, pc}
	...

08002034 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002034:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002036:	4817      	ldr	r0, [pc, #92]	; (8002094 <MX_USART2_UART_Init+0x60>)
 8002038:	4b17      	ldr	r3, [pc, #92]	; (8002098 <MX_USART2_UART_Init+0x64>)
 800203a:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 800203c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002040:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002042:	2300      	movs	r3, #0
 8002044:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002046:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002048:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800204a:	220c      	movs	r2, #12
 800204c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800204e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002050:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002052:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002054:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002056:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002058:	f006 f93b 	bl	80082d2 <HAL_UART_Init>
 800205c:	b970      	cbnz	r0, 800207c <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800205e:	2100      	movs	r1, #0
 8002060:	480c      	ldr	r0, [pc, #48]	; (8002094 <MX_USART2_UART_Init+0x60>)
 8002062:	f006 faf8 	bl	8008656 <HAL_UARTEx_SetTxFifoThreshold>
 8002066:	b960      	cbnz	r0, 8002082 <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002068:	2100      	movs	r1, #0
 800206a:	480a      	ldr	r0, [pc, #40]	; (8002094 <MX_USART2_UART_Init+0x60>)
 800206c:	f006 fb18 	bl	80086a0 <HAL_UARTEx_SetRxFifoThreshold>
 8002070:	b950      	cbnz	r0, 8002088 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8002072:	4808      	ldr	r0, [pc, #32]	; (8002094 <MX_USART2_UART_Init+0x60>)
 8002074:	f006 facb 	bl	800860e <HAL_UARTEx_EnableFifoMode>
 8002078:	b948      	cbnz	r0, 800208e <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800207a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800207c:	f7ff fa70 	bl	8001560 <Error_Handler>
 8002080:	e7ed      	b.n	800205e <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 8002082:	f7ff fa6d 	bl	8001560 <Error_Handler>
 8002086:	e7ef      	b.n	8002068 <MX_USART2_UART_Init+0x34>
    Error_Handler();
 8002088:	f7ff fa6a 	bl	8001560 <Error_Handler>
 800208c:	e7f1      	b.n	8002072 <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 800208e:	f7ff fa67 	bl	8001560 <Error_Handler>
}
 8002092:	e7f2      	b.n	800207a <MX_USART2_UART_Init+0x46>
 8002094:	20000438 	.word	0x20000438
 8002098:	40004400 	.word	0x40004400

0800209c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800209c:	b530      	push	{r4, r5, lr}
 800209e:	b097      	sub	sp, #92	; 0x5c
 80020a0:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a2:	2100      	movs	r1, #0
 80020a4:	9111      	str	r1, [sp, #68]	; 0x44
 80020a6:	9112      	str	r1, [sp, #72]	; 0x48
 80020a8:	9113      	str	r1, [sp, #76]	; 0x4c
 80020aa:	9114      	str	r1, [sp, #80]	; 0x50
 80020ac:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020ae:	2238      	movs	r2, #56	; 0x38
 80020b0:	a803      	add	r0, sp, #12
 80020b2:	f011 f9c1 	bl	8013438 <memset>
  if(uartHandle->Instance==USART2)
 80020b6:	6822      	ldr	r2, [r4, #0]
 80020b8:	4b2d      	ldr	r3, [pc, #180]	; (8002170 <HAL_UART_MspInit+0xd4>)
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d001      	beq.n	80020c2 <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80020be:	b017      	add	sp, #92	; 0x5c
 80020c0:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80020c2:	2302      	movs	r3, #2
 80020c4:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80020c6:	4b2b      	ldr	r3, [pc, #172]	; (8002174 <HAL_UART_MspInit+0xd8>)
 80020c8:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020ca:	a803      	add	r0, sp, #12
 80020cc:	f004 fa6e 	bl	80065ac <HAL_RCCEx_PeriphCLKConfig>
 80020d0:	2800      	cmp	r0, #0
 80020d2:	d144      	bne.n	800215e <HAL_UART_MspInit+0xc2>
  SET_BIT(RCC->APB1ENR1, Periphs);
 80020d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80020da:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80020de:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80020e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80020e2:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80020e6:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80020e8:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80020ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020ec:	f042 0201 	orr.w	r2, r2, #1
 80020f0:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80020f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80020fa:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 80020fc:	230c      	movs	r3, #12
 80020fe:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002100:	2302      	movs	r3, #2
 8002102:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002104:	2500      	movs	r5, #0
 8002106:	9513      	str	r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002108:	2303      	movs	r3, #3
 800210a:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800210c:	2307      	movs	r3, #7
 800210e:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002110:	a911      	add	r1, sp, #68	; 0x44
 8002112:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002116:	f002 fee3 	bl	8004ee0 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel5;
 800211a:	4817      	ldr	r0, [pc, #92]	; (8002178 <HAL_UART_MspInit+0xdc>)
 800211c:	4b17      	ldr	r3, [pc, #92]	; (800217c <HAL_UART_MspInit+0xe0>)
 800211e:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002120:	2314      	movs	r3, #20
 8002122:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002124:	2310      	movs	r3, #16
 8002126:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002128:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800212a:	2380      	movs	r3, #128	; 0x80
 800212c:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800212e:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002130:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002132:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002134:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002136:	f002 fb3b 	bl	80047b0 <HAL_DMA_Init>
 800213a:	b998      	cbnz	r0, 8002164 <HAL_UART_MspInit+0xc8>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 800213c:	2110      	movs	r1, #16
 800213e:	480e      	ldr	r0, [pc, #56]	; (8002178 <HAL_UART_MspInit+0xdc>)
 8002140:	f002 fd38 	bl	8004bb4 <HAL_DMA_ConfigChannelAttributes>
 8002144:	b988      	cbnz	r0, 800216a <HAL_UART_MspInit+0xce>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002146:	4b0c      	ldr	r3, [pc, #48]	; (8002178 <HAL_UART_MspInit+0xdc>)
 8002148:	67a3      	str	r3, [r4, #120]	; 0x78
 800214a:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 800214c:	2200      	movs	r2, #0
 800214e:	2102      	movs	r1, #2
 8002150:	2025      	movs	r0, #37	; 0x25
 8002152:	f002 fa65 	bl	8004620 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002156:	2025      	movs	r0, #37	; 0x25
 8002158:	f002 fa9a 	bl	8004690 <HAL_NVIC_EnableIRQ>
}
 800215c:	e7af      	b.n	80020be <HAL_UART_MspInit+0x22>
      Error_Handler();
 800215e:	f7ff f9ff 	bl	8001560 <Error_Handler>
 8002162:	e7b7      	b.n	80020d4 <HAL_UART_MspInit+0x38>
      Error_Handler();
 8002164:	f7ff f9fc 	bl	8001560 <Error_Handler>
 8002168:	e7e8      	b.n	800213c <HAL_UART_MspInit+0xa0>
      Error_Handler();
 800216a:	f7ff f9f9 	bl	8001560 <Error_Handler>
 800216e:	e7ea      	b.n	8002146 <HAL_UART_MspInit+0xaa>
 8002170:	40004400 	.word	0x40004400
 8002174:	000c0004 	.word	0x000c0004
 8002178:	200003d8 	.word	0x200003d8
 800217c:	40020058 	.word	0x40020058

08002180 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART2)
 8002180:	6802      	ldr	r2, [r0, #0]
 8002182:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <HAL_UART_MspDeInit+0x34>)
 8002184:	429a      	cmp	r2, r3
 8002186:	d000      	beq.n	800218a <HAL_UART_MspDeInit+0xa>
 8002188:	4770      	bx	lr
{
 800218a:	b510      	push	{r4, lr}
 800218c:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 800218e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002192:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002194:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002198:	6593      	str	r3, [r2, #88]	; 0x58

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 800219a:	210c      	movs	r1, #12
 800219c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021a0:	f002 ff70 	bl	8005084 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80021a4:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80021a6:	f002 fb75 	bl	8004894 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80021aa:	2025      	movs	r0, #37	; 0x25
 80021ac:	f002 fa7e 	bl	80046ac <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 80021b0:	bd10      	pop	{r4, pc}
 80021b2:	bf00      	nop
 80021b4:	40004400 	.word	0x40004400

080021b8 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 80021b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80021ba:	4b07      	ldr	r3, [pc, #28]	; (80021d8 <vcom_Init+0x20>)
 80021bc:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 80021be:	f7fe ff85 	bl	80010cc <MX_DMA_Init>
  MX_USART2_UART_Init();
 80021c2:	f7ff ff37 	bl	8002034 <MX_USART2_UART_Init>
  SET_BIT(EXTI->IMR1, ExtiLine);
 80021c6:	4a05      	ldr	r2, [pc, #20]	; (80021dc <vcom_Init+0x24>)
 80021c8:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80021cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80021d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 80021d4:	2000      	movs	r0, #0
 80021d6:	bd08      	pop	{r3, pc}
 80021d8:	200004cc 	.word	0x200004cc
 80021dc:	58000800 	.word	0x58000800

080021e0 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80021e0:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB1RSTR1, Periphs);
 80021e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021e8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80021ec:	639a      	str	r2, [r3, #56]	; 0x38
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 80021ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021f0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80021f4:	639a      	str	r2, [r3, #56]	; 0x38
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
  __HAL_RCC_USART2_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 80021f6:	4804      	ldr	r0, [pc, #16]	; (8002208 <vcom_DeInit+0x28>)
 80021f8:	f7ff ffc2 	bl	8002180 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 80021fc:	200f      	movs	r0, #15
 80021fe:	f002 fa55 	bl	80046ac <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002202:	2000      	movs	r0, #0
 8002204:	bd08      	pop	{r3, pc}
 8002206:	bf00      	nop
 8002208:	20000438 	.word	0x20000438

0800220c <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 800220c:	b508      	push	{r3, lr}
 800220e:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8002210:	4601      	mov	r1, r0
 8002212:	4802      	ldr	r0, [pc, #8]	; (800221c <vcom_Trace_DMA+0x10>)
 8002214:	f005 f92a 	bl	800746c <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002218:	2000      	movs	r0, #0
 800221a:	bd08      	pop	{r3, pc}
 800221c:	20000438 	.word	0x20000438

08002220 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002220:	b510      	push	{r4, lr}
 8002222:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002224:	4b12      	ldr	r3, [pc, #72]	; (8002270 <vcom_ReceiveInit+0x50>)
 8002226:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002228:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800222c:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 800222e:	ab02      	add	r3, sp, #8
 8002230:	e913 0006 	ldmdb	r3, {r1, r2}
 8002234:	480f      	ldr	r0, [pc, #60]	; (8002274 <vcom_ReceiveInit+0x54>)
 8002236:	f006 f992 	bl	800855e <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 800223a:	4b0e      	ldr	r3, [pc, #56]	; (8002274 <vcom_ReceiveInit+0x54>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	69da      	ldr	r2, [r3, #28]
 8002240:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8002244:	d1f9      	bne.n	800223a <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 8002246:	69da      	ldr	r2, [r3, #28]
 8002248:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 800224c:	d0fb      	beq.n	8002246 <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002254:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 8002256:	4c07      	ldr	r4, [pc, #28]	; (8002274 <vcom_ReceiveInit+0x54>)
 8002258:	4620      	mov	r0, r4
 800225a:	f006 f9c1 	bl	80085e0 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 800225e:	2201      	movs	r2, #1
 8002260:	4905      	ldr	r1, [pc, #20]	; (8002278 <vcom_ReceiveInit+0x58>)
 8002262:	4620      	mov	r0, r4
 8002264:	f006 f90c 	bl	8008480 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002268:	2000      	movs	r0, #0
 800226a:	b002      	add	sp, #8
 800226c:	bd10      	pop	{r4, pc}
 800226e:	bf00      	nop
 8002270:	200004c8 	.word	0x200004c8
 8002274:	20000438 	.word	0x20000438
 8002278:	200004d0 	.word	0x200004d0

0800227c <vcom_Resume>:

void vcom_Resume(void)
{
 800227c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800227e:	4807      	ldr	r0, [pc, #28]	; (800229c <vcom_Resume+0x20>)
 8002280:	f006 f827 	bl	80082d2 <HAL_UART_Init>
 8002284:	b920      	cbnz	r0, 8002290 <vcom_Resume+0x14>
  {
    Error_Handler();
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002286:	4806      	ldr	r0, [pc, #24]	; (80022a0 <vcom_Resume+0x24>)
 8002288:	f002 fa92 	bl	80047b0 <HAL_DMA_Init>
 800228c:	b918      	cbnz	r0, 8002296 <vcom_Resume+0x1a>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 800228e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002290:	f7ff f966 	bl	8001560 <Error_Handler>
 8002294:	e7f7      	b.n	8002286 <vcom_Resume+0xa>
    Error_Handler();
 8002296:	f7ff f963 	bl	8001560 <Error_Handler>
}
 800229a:	e7f8      	b.n	800228e <vcom_Resume+0x12>
 800229c:	20000438 	.word	0x20000438
 80022a0:	200003d8 	.word	0x200003d8

080022a4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80022a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 80022a6:	6802      	ldr	r2, [r0, #0]
 80022a8:	4b04      	ldr	r3, [pc, #16]	; (80022bc <HAL_UART_TxCpltCallback+0x18>)
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d000      	beq.n	80022b0 <HAL_UART_TxCpltCallback+0xc>
    TxCpltCallback(NULL);
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 80022ae:	bd08      	pop	{r3, pc}
    TxCpltCallback(NULL);
 80022b0:	4b03      	ldr	r3, [pc, #12]	; (80022c0 <HAL_UART_TxCpltCallback+0x1c>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2000      	movs	r0, #0
 80022b6:	4798      	blx	r3
}
 80022b8:	e7f9      	b.n	80022ae <HAL_UART_TxCpltCallback+0xa>
 80022ba:	bf00      	nop
 80022bc:	40004400 	.word	0x40004400
 80022c0:	200004cc 	.word	0x200004cc

080022c4 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 80022c4:	6802      	ldr	r2, [r0, #0]
 80022c6:	4b0a      	ldr	r3, [pc, #40]	; (80022f0 <HAL_UART_RxCpltCallback+0x2c>)
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d000      	beq.n	80022ce <HAL_UART_RxCpltCallback+0xa>
 80022cc:	4770      	bx	lr
{
 80022ce:	b510      	push	{r4, lr}
 80022d0:	4604      	mov	r4, r0
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 80022d2:	4b08      	ldr	r3, [pc, #32]	; (80022f4 <HAL_UART_RxCpltCallback+0x30>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	b12b      	cbz	r3, 80022e4 <HAL_UART_RxCpltCallback+0x20>
 80022d8:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 80022dc:	b912      	cbnz	r2, 80022e4 <HAL_UART_RxCpltCallback+0x20>
    {
      RxCpltCallback(&charRx, 1, 0);
 80022de:	2101      	movs	r1, #1
 80022e0:	4805      	ldr	r0, [pc, #20]	; (80022f8 <HAL_UART_RxCpltCallback+0x34>)
 80022e2:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 80022e4:	2201      	movs	r2, #1
 80022e6:	4904      	ldr	r1, [pc, #16]	; (80022f8 <HAL_UART_RxCpltCallback+0x34>)
 80022e8:	4620      	mov	r0, r4
 80022ea:	f006 f8c9 	bl	8008480 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80022ee:	bd10      	pop	{r4, pc}
 80022f0:	40004400 	.word	0x40004400
 80022f4:	200004c8 	.word	0x200004c8
 80022f8:	200004d0 	.word	0x200004d0

080022fc <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 80022fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 80022fe:	f7ff fabf 	bl	8001880 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8002302:	f000 fbc7 	bl	8002a94 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8002306:	bd08      	pop	{r3, pc}

08002308 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8002308:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800230a:	f04f 30ff 	mov.w	r0, #4294967295
 800230e:	f010 fbf5 	bl	8012afc <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8002312:	bd08      	pop	{r3, pc}

08002314 <OnTxFrameCtrlChanged>:
static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 8002314:	4b01      	ldr	r3, [pc, #4]	; (800231c <OnTxFrameCtrlChanged+0x8>)
 8002316:	70d8      	strb	r0, [r3, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	20000058 	.word	0x20000058

08002320 <OnPingSlotPeriodicityChanged>:
static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 8002320:	4b01      	ldr	r3, [pc, #4]	; (8002328 <OnPingSlotPeriodicityChanged+0x8>)
 8002322:	7318      	strb	r0, [r3, #12]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	20000058 	.word	0x20000058

0800232c <OnBeaconStatusChange>:
  if (params != NULL)
 800232c:	2800      	cmp	r0, #0
 800232e:	d03f      	beq.n	80023b0 <OnBeaconStatusChange+0x84>
{
 8002330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002334:	b08c      	sub	sp, #48	; 0x30
 8002336:	4603      	mov	r3, r0
    switch (params->State)
 8002338:	7842      	ldrb	r2, [r0, #1]
 800233a:	2a02      	cmp	r2, #2
 800233c:	d00a      	beq.n	8002354 <OnBeaconStatusChange+0x28>
 800233e:	2a03      	cmp	r2, #3
 8002340:	d02f      	beq.n	80023a2 <OnBeaconStatusChange+0x76>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 8002342:	4b1c      	ldr	r3, [pc, #112]	; (80023b4 <OnBeaconStatusChange+0x88>)
 8002344:	2200      	movs	r2, #0
 8002346:	4611      	mov	r1, r2
 8002348:	2002      	movs	r0, #2
 800234a:	f010 fa79 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
}
 800234e:	b00c      	add	sp, #48	; 0x30
 8002350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        APP_LOG(TS_OFF, VLEVEL_M,
 8002354:	7c02      	ldrb	r2, [r0, #16]
 8002356:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
 800235a:	f990 0014 	ldrsb.w	r0, [r0, #20]
 800235e:	7d5c      	ldrb	r4, [r3, #21]
 8002360:	7d9d      	ldrb	r5, [r3, #22]
 8002362:	7dde      	ldrb	r6, [r3, #23]
 8002364:	7e1f      	ldrb	r7, [r3, #24]
 8002366:	f893 c019 	ldrb.w	ip, [r3, #25]
 800236a:	f893 e01a 	ldrb.w	lr, [r3, #26]
 800236e:	f893 801b 	ldrb.w	r8, [r3, #27]
 8002372:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8002376:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 800237a:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800237e:	9708      	str	r7, [sp, #32]
 8002380:	9607      	str	r6, [sp, #28]
 8002382:	9506      	str	r5, [sp, #24]
 8002384:	9405      	str	r4, [sp, #20]
 8002386:	685c      	ldr	r4, [r3, #4]
 8002388:	9404      	str	r4, [sp, #16]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	9303      	str	r3, [sp, #12]
 800238e:	9002      	str	r0, [sp, #8]
 8002390:	9101      	str	r1, [sp, #4]
 8002392:	9200      	str	r2, [sp, #0]
 8002394:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <OnBeaconStatusChange+0x8c>)
 8002396:	2200      	movs	r2, #0
 8002398:	4611      	mov	r1, r2
 800239a:	2002      	movs	r0, #2
 800239c:	f010 fa50 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
        break;
 80023a0:	e7d5      	b.n	800234e <OnBeaconStatusChange+0x22>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 80023a2:	4b06      	ldr	r3, [pc, #24]	; (80023bc <OnBeaconStatusChange+0x90>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	4611      	mov	r1, r2
 80023a8:	2002      	movs	r0, #2
 80023aa:	f010 fa49 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
}
 80023ae:	e7ce      	b.n	800234e <OnBeaconStatusChange+0x22>
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	08013fb0 	.word	0x08013fb0
 80023b8:	08013fc8 	.word	0x08013fc8
 80023bc:	0801403c 	.word	0x0801403c

080023c0 <OnClassChange>:
{
 80023c0:	b500      	push	{lr}
 80023c2:	b083      	sub	sp, #12
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 80023c4:	4b05      	ldr	r3, [pc, #20]	; (80023dc <OnClassChange+0x1c>)
 80023c6:	5c1b      	ldrb	r3, [r3, r0]
 80023c8:	9300      	str	r3, [sp, #0]
 80023ca:	4b05      	ldr	r3, [pc, #20]	; (80023e0 <OnClassChange+0x20>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	4611      	mov	r1, r2
 80023d0:	2002      	movs	r0, #2
 80023d2:	f010 fa35 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
}
 80023d6:	b003      	add	sp, #12
 80023d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80023dc:	08014078 	.word	0x08014078
 80023e0:	0801405c 	.word	0x0801405c

080023e4 <OnNvmDataChange>:

  /* USER CODE END StoreContext_Last */
}

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 80023e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 80023e6:	2801      	cmp	r0, #1
 80023e8:	d006      	beq.n	80023f8 <OnNvmDataChange+0x14>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 80023ea:	4b07      	ldr	r3, [pc, #28]	; (8002408 <OnNvmDataChange+0x24>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	4611      	mov	r1, r2
 80023f0:	2002      	movs	r0, #2
 80023f2:	f010 fa25 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 80023f6:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 80023f8:	4b04      	ldr	r3, [pc, #16]	; (800240c <OnNvmDataChange+0x28>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	4611      	mov	r1, r2
 80023fe:	2002      	movs	r0, #2
 8002400:	f010 fa1e 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
 8002404:	e7f7      	b.n	80023f6 <OnNvmDataChange+0x12>
 8002406:	bf00      	nop
 8002408:	08014090 	.word	0x08014090
 800240c:	0801407c 	.word	0x0801407c

08002410 <OnTxTimerEvent>:
{
 8002410:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8002412:	2100      	movs	r1, #0
 8002414:	2002      	movs	r0, #2
 8002416:	f010 fb3d 	bl	8012a94 <UTIL_SEQ_SetTask>
  UTIL_TIMER_Start(&TxTimer);
 800241a:	4802      	ldr	r0, [pc, #8]	; (8002424 <OnTxTimerEvent+0x14>)
 800241c:	f010 fdbe 	bl	8012f9c <UTIL_TIMER_Start>
}
 8002420:	bd08      	pop	{r3, pc}
 8002422:	bf00      	nop
 8002424:	20000628 	.word	0x20000628

08002428 <OnMacProcessNotify>:
{
 8002428:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800242a:	2100      	movs	r1, #0
 800242c:	2001      	movs	r0, #1
 800242e:	f010 fb31 	bl	8012a94 <UTIL_SEQ_SetTask>
}
 8002432:	bd08      	pop	{r3, pc}

08002434 <OnSystemReset>:
{
 8002434:	b508      	push	{r3, lr}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002436:	f006 fe0f 	bl	8009058 <LmHandlerHalt>
 800243a:	b100      	cbz	r0, 800243e <OnSystemReset+0xa>
}
 800243c:	bd08      	pop	{r3, pc}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800243e:	f006 fa09 	bl	8008854 <LmHandlerJoinStatus>
 8002442:	2801      	cmp	r0, #1
 8002444:	d1fa      	bne.n	800243c <OnSystemReset+0x8>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002446:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800244a:	4905      	ldr	r1, [pc, #20]	; (8002460 <OnSystemReset+0x2c>)
 800244c:	68ca      	ldr	r2, [r1, #12]
 800244e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002452:	4b04      	ldr	r3, [pc, #16]	; (8002464 <OnSystemReset+0x30>)
 8002454:	4313      	orrs	r3, r2
 8002456:	60cb      	str	r3, [r1, #12]
 8002458:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800245c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800245e:	e7fd      	b.n	800245c <OnSystemReset+0x28>
 8002460:	e000ed00 	.word	0xe000ed00
 8002464:	05fa0004 	.word	0x05fa0004

08002468 <OnTxPeriodicityChanged>:
{
 8002468:	b510      	push	{r4, lr}
  TxPeriodicity = periodicity;
 800246a:	4b09      	ldr	r3, [pc, #36]	; (8002490 <OnTxPeriodicityChanged+0x28>)
 800246c:	6018      	str	r0, [r3, #0]
  if (TxPeriodicity == 0)
 800246e:	b910      	cbnz	r0, 8002476 <OnTxPeriodicityChanged+0xe>
    TxPeriodicity = APP_TX_DUTYCYCLE;
 8002470:	f242 7210 	movw	r2, #10000	; 0x2710
 8002474:	601a      	str	r2, [r3, #0]
  UTIL_TIMER_Stop(&TxTimer);
 8002476:	4c07      	ldr	r4, [pc, #28]	; (8002494 <OnTxPeriodicityChanged+0x2c>)
 8002478:	4620      	mov	r0, r4
 800247a:	f010 fd35 	bl	8012ee8 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800247e:	4b04      	ldr	r3, [pc, #16]	; (8002490 <OnTxPeriodicityChanged+0x28>)
 8002480:	6819      	ldr	r1, [r3, #0]
 8002482:	4620      	mov	r0, r4
 8002484:	f010 fdd0 	bl	8013028 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 8002488:	4620      	mov	r0, r4
 800248a:	f010 fd87 	bl	8012f9c <UTIL_TIMER_Start>
}
 800248e:	bd10      	pop	{r4, pc}
 8002490:	2000006c 	.word	0x2000006c
 8002494:	20000628 	.word	0x20000628

08002498 <OnTxData>:
  if ((params != NULL))
 8002498:	2800      	cmp	r0, #0
 800249a:	d042      	beq.n	8002522 <OnTxData+0x8a>
{
 800249c:	b510      	push	{r4, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	4604      	mov	r4, r0
    if (params->IsMcpsConfirm != 0)
 80024a2:	7803      	ldrb	r3, [r0, #0]
 80024a4:	b90b      	cbnz	r3, 80024aa <OnTxData+0x12>
}
 80024a6:	b004      	add	sp, #16
 80024a8:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 80024aa:	2201      	movs	r2, #1
 80024ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024b0:	481c      	ldr	r0, [pc, #112]	; (8002524 <OnTxData+0x8c>)
 80024b2:	f002 fe65 	bl	8005180 <HAL_GPIO_WritePin>
      UTIL_TIMER_Start(&TxLedTimer);
 80024b6:	481c      	ldr	r0, [pc, #112]	; (8002528 <OnTxData+0x90>)
 80024b8:	f010 fd70 	bl	8012f9c <UTIL_TIMER_Start>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 80024bc:	4b1b      	ldr	r3, [pc, #108]	; (800252c <OnTxData+0x94>)
 80024be:	2200      	movs	r2, #0
 80024c0:	4611      	mov	r1, r2
 80024c2:	2002      	movs	r0, #2
 80024c4:	f010 f9bc 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 80024c8:	7c23      	ldrb	r3, [r4, #16]
 80024ca:	f994 200a 	ldrsb.w	r2, [r4, #10]
 80024ce:	f994 1018 	ldrsb.w	r1, [r4, #24]
 80024d2:	9103      	str	r1, [sp, #12]
 80024d4:	9202      	str	r2, [sp, #8]
 80024d6:	9301      	str	r3, [sp, #4]
 80024d8:	68e3      	ldr	r3, [r4, #12]
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	4b14      	ldr	r3, [pc, #80]	; (8002530 <OnTxData+0x98>)
 80024de:	2200      	movs	r2, #0
 80024e0:	4611      	mov	r1, r2
 80024e2:	2003      	movs	r0, #3
 80024e4:	f010 f9ac 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 80024e8:	4b12      	ldr	r3, [pc, #72]	; (8002534 <OnTxData+0x9c>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	4611      	mov	r1, r2
 80024ee:	2003      	movs	r0, #3
 80024f0:	f010 f9a6 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 80024f4:	7a23      	ldrb	r3, [r4, #8]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d10c      	bne.n	8002514 <OnTxData+0x7c>
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 80024fa:	7a63      	ldrb	r3, [r4, #9]
 80024fc:	b143      	cbz	r3, 8002510 <OnTxData+0x78>
 80024fe:	4b0e      	ldr	r3, [pc, #56]	; (8002538 <OnTxData+0xa0>)
 8002500:	9300      	str	r3, [sp, #0]
 8002502:	4b0e      	ldr	r3, [pc, #56]	; (800253c <OnTxData+0xa4>)
 8002504:	2200      	movs	r2, #0
 8002506:	4611      	mov	r1, r2
 8002508:	2003      	movs	r0, #3
 800250a:	f010 f999 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
 800250e:	e7ca      	b.n	80024a6 <OnTxData+0xe>
 8002510:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <OnTxData+0xa8>)
 8002512:	e7f5      	b.n	8002500 <OnTxData+0x68>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 8002514:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <OnTxData+0xac>)
 8002516:	2200      	movs	r2, #0
 8002518:	4611      	mov	r1, r2
 800251a:	2003      	movs	r0, #3
 800251c:	f010 f990 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
}
 8002520:	e7c1      	b.n	80024a6 <OnTxData+0xe>
 8002522:	4770      	bx	lr
 8002524:	48000400 	.word	0x48000400
 8002528:	20000610 	.word	0x20000610
 800252c:	080140b0 	.word	0x080140b0
 8002530:	080140e4 	.word	0x080140e4
 8002534:	08014118 	.word	0x08014118
 8002538:	080140ac 	.word	0x080140ac
 800253c:	08014128 	.word	0x08014128
 8002540:	080140a4 	.word	0x080140a4
 8002544:	0801413c 	.word	0x0801413c

08002548 <OnJoinRequest>:
  if (joinParams != NULL)
 8002548:	b358      	cbz	r0, 80025a2 <OnJoinRequest+0x5a>
{
 800254a:	b510      	push	{r4, lr}
 800254c:	4604      	mov	r4, r0
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800254e:	f990 3005 	ldrsb.w	r3, [r0, #5]
 8002552:	b9fb      	cbnz	r3, 8002594 <OnJoinRequest+0x4c>
      UTIL_TIMER_Stop(&JoinLedTimer);
 8002554:	4813      	ldr	r0, [pc, #76]	; (80025a4 <OnJoinRequest+0x5c>)
 8002556:	f010 fcc7 	bl	8012ee8 <UTIL_TIMER_Stop>
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 800255a:	2200      	movs	r2, #0
 800255c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002560:	4811      	ldr	r0, [pc, #68]	; (80025a8 <OnJoinRequest+0x60>)
 8002562:	f002 fe0d 	bl	8005180 <HAL_GPIO_WritePin>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 8002566:	4b11      	ldr	r3, [pc, #68]	; (80025ac <OnJoinRequest+0x64>)
 8002568:	2200      	movs	r2, #0
 800256a:	4611      	mov	r1, r2
 800256c:	2002      	movs	r0, #2
 800256e:	f010 f967 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 8002572:	79a3      	ldrb	r3, [r4, #6]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d006      	beq.n	8002586 <OnJoinRequest+0x3e>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 8002578:	4b0d      	ldr	r3, [pc, #52]	; (80025b0 <OnJoinRequest+0x68>)
 800257a:	2200      	movs	r2, #0
 800257c:	4611      	mov	r1, r2
 800257e:	2002      	movs	r0, #2
 8002580:	f010 f95e 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
 8002584:	e00c      	b.n	80025a0 <OnJoinRequest+0x58>
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 8002586:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <OnJoinRequest+0x6c>)
 8002588:	2200      	movs	r2, #0
 800258a:	4611      	mov	r1, r2
 800258c:	2002      	movs	r0, #2
 800258e:	f010 f957 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
 8002592:	e005      	b.n	80025a0 <OnJoinRequest+0x58>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 8002594:	4b08      	ldr	r3, [pc, #32]	; (80025b8 <OnJoinRequest+0x70>)
 8002596:	2200      	movs	r2, #0
 8002598:	4611      	mov	r1, r2
 800259a:	2002      	movs	r0, #2
 800259c:	f010 f950 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
}
 80025a0:	bd10      	pop	{r4, pc}
 80025a2:	4770      	bx	lr
 80025a4:	200005c8 	.word	0x200005c8
 80025a8:	48000400 	.word	0x48000400
 80025ac:	0801414c 	.word	0x0801414c
 80025b0:	08014184 	.word	0x08014184
 80025b4:	08014164 	.word	0x08014164
 80025b8:	080141a4 	.word	0x080141a4

080025bc <OnStopJoinTimerEvent>:
{
 80025bc:	b510      	push	{r4, lr}
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 80025be:	4b0e      	ldr	r3, [pc, #56]	; (80025f8 <OnStopJoinTimerEvent+0x3c>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d013      	beq.n	80025ee <OnStopJoinTimerEvent+0x32>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 80025c6:	4c0d      	ldr	r4, [pc, #52]	; (80025fc <OnStopJoinTimerEvent+0x40>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025ce:	4620      	mov	r0, r4
 80025d0:	f002 fdd6 	bl	8005180 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 80025d4:	2200      	movs	r2, #0
 80025d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025da:	4620      	mov	r0, r4
 80025dc:	f002 fdd0 	bl	8005180 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 80025e0:	2200      	movs	r2, #0
 80025e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025e6:	4620      	mov	r0, r4
 80025e8:	f002 fdca 	bl	8005180 <HAL_GPIO_WritePin>
}
 80025ec:	bd10      	pop	{r4, pc}
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 80025ee:	2100      	movs	r1, #0
 80025f0:	2008      	movs	r0, #8
 80025f2:	f010 fa4f 	bl	8012a94 <UTIL_SEQ_SetTask>
 80025f6:	e7e6      	b.n	80025c6 <OnStopJoinTimerEvent+0xa>
 80025f8:	20000000 	.word	0x20000000
 80025fc:	48000400 	.word	0x48000400

08002600 <OnRxTimerLedEvent>:
{
 8002600:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 8002602:	2200      	movs	r2, #0
 8002604:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002608:	4801      	ldr	r0, [pc, #4]	; (8002610 <OnRxTimerLedEvent+0x10>)
 800260a:	f002 fdb9 	bl	8005180 <HAL_GPIO_WritePin>
}
 800260e:	bd08      	pop	{r3, pc}
 8002610:	48000400 	.word	0x48000400

08002614 <OnTxTimerLedEvent>:
{
 8002614:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 8002616:	2200      	movs	r2, #0
 8002618:	f44f 7100 	mov.w	r1, #512	; 0x200
 800261c:	4801      	ldr	r0, [pc, #4]	; (8002624 <OnTxTimerLedEvent+0x10>)
 800261e:	f002 fdaf 	bl	8005180 <HAL_GPIO_WritePin>
}
 8002622:	bd08      	pop	{r3, pc}
 8002624:	48000400 	.word	0x48000400

08002628 <OnRxData>:
  if (params != NULL)
 8002628:	2900      	cmp	r1, #0
 800262a:	d06e      	beq.n	800270a <OnRxData+0xe2>
{
 800262c:	b570      	push	{r4, r5, r6, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	4604      	mov	r4, r0
 8002632:	460d      	mov	r5, r1
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 8002634:	2201      	movs	r2, #1
 8002636:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800263a:	4834      	ldr	r0, [pc, #208]	; (800270c <OnRxData+0xe4>)
 800263c:	f002 fda0 	bl	8005180 <HAL_GPIO_WritePin>
    UTIL_TIMER_Start(&RxLedTimer);
 8002640:	4833      	ldr	r0, [pc, #204]	; (8002710 <OnRxData+0xe8>)
 8002642:	f010 fcab 	bl	8012f9c <UTIL_TIMER_Start>
    if (params->IsMcpsIndication)
 8002646:	782e      	ldrb	r6, [r5, #0]
 8002648:	2e00      	cmp	r6, #0
 800264a:	d042      	beq.n	80026d2 <OnRxData+0xaa>
      if (appData != NULL)
 800264c:	2c00      	cmp	r4, #0
 800264e:	d03f      	beq.n	80026d0 <OnRxData+0xa8>
        RxPort = appData->Port;
 8002650:	7826      	ldrb	r6, [r4, #0]
        if (appData->Buffer != NULL)
 8002652:	6863      	ldr	r3, [r4, #4]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d03c      	beq.n	80026d2 <OnRxData+0xaa>
          switch (appData->Port)
 8002658:	2e02      	cmp	r6, #2
 800265a:	d016      	beq.n	800268a <OnRxData+0x62>
 800265c:	2e03      	cmp	r6, #3
 800265e:	d138      	bne.n	80026d2 <OnRxData+0xaa>
              if (appData->BufferSize == 1)
 8002660:	7862      	ldrb	r2, [r4, #1]
 8002662:	2a01      	cmp	r2, #1
 8002664:	d135      	bne.n	80026d2 <OnRxData+0xaa>
                switch (appData->Buffer[0])
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d006      	beq.n	800267a <OnRxData+0x52>
 800266c:	2b02      	cmp	r3, #2
 800266e:	d008      	beq.n	8002682 <OnRxData+0x5a>
 8002670:	bb7b      	cbnz	r3, 80026d2 <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_A);
 8002672:	2000      	movs	r0, #0
 8002674:	f006 f900 	bl	8008878 <LmHandlerRequestClass>
                    break;
 8002678:	e02b      	b.n	80026d2 <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_B);
 800267a:	2001      	movs	r0, #1
 800267c:	f006 f8fc 	bl	8008878 <LmHandlerRequestClass>
                    break;
 8002680:	e027      	b.n	80026d2 <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_C);
 8002682:	2002      	movs	r0, #2
 8002684:	f006 f8f8 	bl	8008878 <LmHandlerRequestClass>
                    break;
 8002688:	e023      	b.n	80026d2 <OnRxData+0xaa>
              if (appData->BufferSize == 1)
 800268a:	7862      	ldrb	r2, [r4, #1]
 800268c:	2a01      	cmp	r2, #1
 800268e:	d120      	bne.n	80026d2 <OnRxData+0xaa>
                AppLedStateOn = appData->Buffer[0] & 0x01;
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	4a1f      	ldr	r2, [pc, #124]	; (8002714 <OnRxData+0xec>)
 8002698:	7013      	strb	r3, [r2, #0]
                if (AppLedStateOn == RESET)
 800269a:	b963      	cbnz	r3, 80026b6 <OnRxData+0x8e>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 800269c:	4b1e      	ldr	r3, [pc, #120]	; (8002718 <OnRxData+0xf0>)
 800269e:	2200      	movs	r2, #0
 80026a0:	4611      	mov	r1, r2
 80026a2:	2003      	movs	r0, #3
 80026a4:	f010 f8cc 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 80026a8:	2200      	movs	r2, #0
 80026aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026ae:	4817      	ldr	r0, [pc, #92]	; (800270c <OnRxData+0xe4>)
 80026b0:	f002 fd66 	bl	8005180 <HAL_GPIO_WritePin>
 80026b4:	e00d      	b.n	80026d2 <OnRxData+0xaa>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 80026b6:	4b19      	ldr	r3, [pc, #100]	; (800271c <OnRxData+0xf4>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	4611      	mov	r1, r2
 80026bc:	2003      	movs	r0, #3
 80026be:	f010 f8bf 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 80026c2:	2201      	movs	r2, #1
 80026c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026c8:	4810      	ldr	r0, [pc, #64]	; (800270c <OnRxData+0xe4>)
 80026ca:	f002 fd59 	bl	8005180 <HAL_GPIO_WritePin>
 80026ce:	e000      	b.n	80026d2 <OnRxData+0xaa>
  uint8_t RxPort = 0;
 80026d0:	2600      	movs	r6, #0
    if (params->RxSlot < RX_SLOT_NONE)
 80026d2:	7c2b      	ldrb	r3, [r5, #16]
 80026d4:	2b05      	cmp	r3, #5
 80026d6:	d901      	bls.n	80026dc <OnRxData+0xb4>
}
 80026d8:	b006      	add	sp, #24
 80026da:	bd70      	pop	{r4, r5, r6, pc}
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 80026dc:	f995 2008 	ldrsb.w	r2, [r5, #8]
 80026e0:	f995 1009 	ldrsb.w	r1, [r5, #9]
 80026e4:	f995 000a 	ldrsb.w	r0, [r5, #10]
 80026e8:	9005      	str	r0, [sp, #20]
 80026ea:	9104      	str	r1, [sp, #16]
 80026ec:	490c      	ldr	r1, [pc, #48]	; (8002720 <OnRxData+0xf8>)
 80026ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80026f2:	9303      	str	r3, [sp, #12]
 80026f4:	9202      	str	r2, [sp, #8]
 80026f6:	9601      	str	r6, [sp, #4]
 80026f8:	68eb      	ldr	r3, [r5, #12]
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	4b09      	ldr	r3, [pc, #36]	; (8002724 <OnRxData+0xfc>)
 80026fe:	2200      	movs	r2, #0
 8002700:	4611      	mov	r1, r2
 8002702:	2003      	movs	r0, #3
 8002704:	f010 f89c 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
}
 8002708:	e7e6      	b.n	80026d8 <OnRxData+0xb0>
 800270a:	4770      	bx	lr
 800270c:	48000400 	.word	0x48000400
 8002710:	200005e0 	.word	0x200005e0
 8002714:	200005c6 	.word	0x200005c6
 8002718:	080141c0 	.word	0x080141c0
 800271c:	080141cc 	.word	0x080141cc
 8002720:	08014474 	.word	0x08014474
 8002724:	080141d8 	.word	0x080141d8

08002728 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8002728:	b538      	push	{r3, r4, r5, lr}
 800272a:	4605      	mov	r5, r0
 800272c:	460c      	mov	r4, r1
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (HAL_FLASH_Unlock() == HAL_OK)
 800272e:	f002 fa7f 	bl	8004c30 <HAL_FLASH_Unlock>
 8002732:	b100      	cbz	r0, 8002736 <OnStoreContextRequest+0xe>
    HAL_FLASH_Lock();
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 8002734:	bd38      	pop	{r3, r4, r5, pc}
    if (FLASH_IF_EraseByPages(PAGE(LORAWAN_NVM_BASE_ADDRESS), 1, 0U) == FLASH_OK)
 8002736:	4b0f      	ldr	r3, [pc, #60]	; (8002774 <OnStoreContextRequest+0x4c>)
 8002738:	f8d3 05e0 	ldr.w	r0, [r3, #1504]	; 0x5e0
 800273c:	4b0e      	ldr	r3, [pc, #56]	; (8002778 <OnStoreContextRequest+0x50>)
 800273e:	ea03 2080 	and.w	r0, r3, r0, lsl #10
 8002742:	f44f 337c 	mov.w	r3, #258048	; 0x3f000
 8002746:	fbb3 f3f0 	udiv	r3, r3, r0
 800274a:	fb00 f303 	mul.w	r3, r0, r3
 800274e:	f5c3 337c 	rsb	r3, r3, #258048	; 0x3f000
 8002752:	2200      	movs	r2, #0
 8002754:	2101      	movs	r1, #1
 8002756:	0ad8      	lsrs	r0, r3, #11
 8002758:	f7fe fd56 	bl	8001208 <FLASH_IF_EraseByPages>
 800275c:	b110      	cbz	r0, 8002764 <OnStoreContextRequest+0x3c>
    HAL_FLASH_Lock();
 800275e:	f002 fa7f 	bl	8004c60 <HAL_FLASH_Lock>
}
 8002762:	e7e7      	b.n	8002734 <OnStoreContextRequest+0xc>
      FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (uint8_t *)nvm, nvm_size, NULL);
 8002764:	2300      	movs	r3, #0
 8002766:	4622      	mov	r2, r4
 8002768:	4629      	mov	r1, r5
 800276a:	4804      	ldr	r0, [pc, #16]	; (800277c <OnStoreContextRequest+0x54>)
 800276c:	f7fe fd68 	bl	8001240 <FLASH_IF_Write>
 8002770:	e7f5      	b.n	800275e <OnStoreContextRequest+0x36>
 8002772:	bf00      	nop
 8002774:	1fff7000 	.word	0x1fff7000
 8002778:	03fffc00 	.word	0x03fffc00
 800277c:	0803f000 	.word	0x0803f000

08002780 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8002780:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  UTIL_MEM_cpy_8(nvm, (void *)LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 8002782:	b28a      	uxth	r2, r1
 8002784:	4901      	ldr	r1, [pc, #4]	; (800278c <OnRestoreContextRequest+0xc>)
 8002786:	f010 f971 	bl	8012a6c <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800278a:	bd08      	pop	{r3, pc}
 800278c:	0803f000 	.word	0x0803f000

08002790 <StopJoin>:
{
 8002790:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 8002792:	4c1e      	ldr	r4, [pc, #120]	; (800280c <StopJoin+0x7c>)
 8002794:	2201      	movs	r2, #1
 8002796:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800279a:	4620      	mov	r0, r4
 800279c:	f002 fcf0 	bl	8005180 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 80027a0:	2201      	movs	r2, #1
 80027a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027a6:	4620      	mov	r0, r4
 80027a8:	f002 fcea 	bl	8005180 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 80027ac:	2201      	movs	r2, #1
 80027ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80027b2:	4620      	mov	r0, r4
 80027b4:	f002 fce4 	bl	8005180 <HAL_GPIO_WritePin>
  UTIL_TIMER_Stop(&TxTimer);
 80027b8:	4815      	ldr	r0, [pc, #84]	; (8002810 <StopJoin+0x80>)
 80027ba:	f010 fb95 	bl	8012ee8 <UTIL_TIMER_Stop>
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 80027be:	f006 fc43 	bl	8009048 <LmHandlerStop>
 80027c2:	b148      	cbz	r0, 80027d8 <StopJoin+0x48>
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 80027c4:	4b13      	ldr	r3, [pc, #76]	; (8002814 <StopJoin+0x84>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	4611      	mov	r1, r2
 80027ca:	2002      	movs	r0, #2
 80027cc:	f010 f838 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Start(&StopJoinTimer);
 80027d0:	4811      	ldr	r0, [pc, #68]	; (8002818 <StopJoin+0x88>)
 80027d2:	f010 fbe3 	bl	8012f9c <UTIL_TIMER_Start>
}
 80027d6:	bd38      	pop	{r3, r4, r5, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 80027d8:	4b10      	ldr	r3, [pc, #64]	; (800281c <StopJoin+0x8c>)
 80027da:	2200      	movs	r2, #0
 80027dc:	4611      	mov	r1, r2
 80027de:	2002      	movs	r0, #2
 80027e0:	f010 f82e 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_ABP;
 80027e4:	4c0e      	ldr	r4, [pc, #56]	; (8002820 <StopJoin+0x90>)
 80027e6:	2501      	movs	r5, #1
 80027e8:	7025      	strb	r5, [r4, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 80027ea:	4b0e      	ldr	r3, [pc, #56]	; (8002824 <StopJoin+0x94>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	4611      	mov	r1, r2
 80027f0:	2002      	movs	r0, #2
 80027f2:	f010 f825 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
    LmHandlerConfigure(&LmHandlerParams);
 80027f6:	480c      	ldr	r0, [pc, #48]	; (8002828 <StopJoin+0x98>)
 80027f8:	f006 fab0 	bl	8008d5c <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 80027fc:	4629      	mov	r1, r5
 80027fe:	7820      	ldrb	r0, [r4, #0]
 8002800:	f006 f896 	bl	8008930 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 8002804:	4802      	ldr	r0, [pc, #8]	; (8002810 <StopJoin+0x80>)
 8002806:	f010 fbc9 	bl	8012f9c <UTIL_TIMER_Start>
 800280a:	e7e1      	b.n	80027d0 <StopJoin+0x40>
 800280c:	48000400 	.word	0x48000400
 8002810:	20000628 	.word	0x20000628
 8002814:	08014220 	.word	0x08014220
 8002818:	200005f8 	.word	0x200005f8
 800281c:	08014240 	.word	0x08014240
 8002820:	20000000 	.word	0x20000000
 8002824:	08014254 	.word	0x08014254
 8002828:	20000058 	.word	0x20000058

0800282c <StoreContext>:
{
 800282c:	b508      	push	{r3, lr}
  status = LmHandlerNvmDataStore();
 800282e:	f006 fc1b 	bl	8009068 <LmHandlerNvmDataStore>
  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 8002832:	f110 0f08 	cmn.w	r0, #8
 8002836:	d003      	beq.n	8002840 <StoreContext+0x14>
  else if (status == LORAMAC_HANDLER_ERROR)
 8002838:	f1b0 3fff 	cmp.w	r0, #4294967295
 800283c:	d007      	beq.n	800284e <StoreContext+0x22>
}
 800283e:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 8002840:	4b06      	ldr	r3, [pc, #24]	; (800285c <StoreContext+0x30>)
 8002842:	2200      	movs	r2, #0
 8002844:	4611      	mov	r1, r2
 8002846:	2002      	movs	r0, #2
 8002848:	f00f fffa 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
 800284c:	e7f7      	b.n	800283e <StoreContext+0x12>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800284e:	4b04      	ldr	r3, [pc, #16]	; (8002860 <StoreContext+0x34>)
 8002850:	2200      	movs	r2, #0
 8002852:	4611      	mov	r1, r2
 8002854:	2002      	movs	r0, #2
 8002856:	f00f fff3 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
}
 800285a:	e7f0      	b.n	800283e <StoreContext+0x12>
 800285c:	08014274 	.word	0x08014274
 8002860:	0801428c 	.word	0x0801428c

08002864 <SendTxData>:
{
 8002864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002866:	b089      	sub	sp, #36	; 0x24
  uint8_t batteryLevel = GetBatteryLevel();
 8002868:	f7ff f83a 	bl	80018e0 <GetBatteryLevel>
 800286c:	4604      	mov	r4, r0
  EnvSensors_Init();
 800286e:	f7ff f9c5 	bl	8001bfc <EnvSensors_Init>
  EnvSensors_Read(&sensor_data);
 8002872:	a802      	add	r0, sp, #8
 8002874:	f7ff fa46 	bl	8001d04 <EnvSensors_Read>
  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 8002878:	9400      	str	r4, [sp, #0]
 800287a:	4b6d      	ldr	r3, [pc, #436]	; (8002a30 <SendTxData+0x1cc>)
 800287c:	2201      	movs	r2, #1
 800287e:	2100      	movs	r1, #0
 8002880:	2002      	movs	r0, #2
 8002882:	f00f ffdd 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "temperature: %d deg C\r\n", (int16_t)(sensor_data.temperature));
 8002886:	9803      	ldr	r0, [sp, #12]
 8002888:	f7fe f900 	bl	8000a8c <__aeabi_f2iz>
 800288c:	b200      	sxth	r0, r0
 800288e:	9000      	str	r0, [sp, #0]
 8002890:	4b68      	ldr	r3, [pc, #416]	; (8002a34 <SendTxData+0x1d0>)
 8002892:	2201      	movs	r2, #1
 8002894:	2100      	movs	r1, #0
 8002896:	2002      	movs	r0, #2
 8002898:	f00f ffd2 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "humidity: %d rH \r\n", (int16_t)(sensor_data.humidity));
 800289c:	9804      	ldr	r0, [sp, #16]
 800289e:	f7fe f8f5 	bl	8000a8c <__aeabi_f2iz>
 80028a2:	b200      	sxth	r0, r0
 80028a4:	9000      	str	r0, [sp, #0]
 80028a6:	4b64      	ldr	r3, [pc, #400]	; (8002a38 <SendTxData+0x1d4>)
 80028a8:	2201      	movs	r2, #1
 80028aa:	2100      	movs	r1, #0
 80028ac:	2002      	movs	r0, #2
 80028ae:	f00f ffc7 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "air pressure: %d hPa \r\n", (int16_t)(sensor_data.pressure));
 80028b2:	9802      	ldr	r0, [sp, #8]
 80028b4:	f7fe f8ea 	bl	8000a8c <__aeabi_f2iz>
 80028b8:	b200      	sxth	r0, r0
 80028ba:	9000      	str	r0, [sp, #0]
 80028bc:	4b5f      	ldr	r3, [pc, #380]	; (8002a3c <SendTxData+0x1d8>)
 80028be:	2201      	movs	r2, #1
 80028c0:	2100      	movs	r1, #0
 80028c2:	2002      	movs	r0, #2
 80028c4:	f00f ffbc 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "rainfall since program start: %d mm \r\n", (int16_t)rainFallInMM);
 80028c8:	4b5d      	ldr	r3, [pc, #372]	; (8002a40 <SendTxData+0x1dc>)
 80028ca:	6818      	ldr	r0, [r3, #0]
 80028cc:	f7fe f8de 	bl	8000a8c <__aeabi_f2iz>
 80028d0:	b200      	sxth	r0, r0
 80028d2:	9000      	str	r0, [sp, #0]
 80028d4:	4b5b      	ldr	r3, [pc, #364]	; (8002a44 <SendTxData+0x1e0>)
 80028d6:	2201      	movs	r2, #1
 80028d8:	2100      	movs	r1, #0
 80028da:	2002      	movs	r0, #2
 80028dc:	f00f ffb0 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "instantaneous wind speed: %d km/h \r\n", (int16_t)windTips);
 80028e0:	4b59      	ldr	r3, [pc, #356]	; (8002a48 <SendTxData+0x1e4>)
 80028e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	4b58      	ldr	r3, [pc, #352]	; (8002a4c <SendTxData+0x1e8>)
 80028ea:	2201      	movs	r2, #1
 80028ec:	2100      	movs	r1, #0
 80028ee:	2002      	movs	r0, #2
 80028f0:	f00f ffa6 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "instantaneous wind direction: %s \r\n", "North");
 80028f4:	4b56      	ldr	r3, [pc, #344]	; (8002a50 <SendTxData+0x1ec>)
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	4b56      	ldr	r3, [pc, #344]	; (8002a54 <SendTxData+0x1f0>)
 80028fa:	2201      	movs	r2, #1
 80028fc:	2100      	movs	r1, #0
 80028fe:	2002      	movs	r0, #2
 8002900:	f00f ff9e 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
  AppData.Port = LORAWAN_USER_APP_PORT;
 8002904:	4c54      	ldr	r4, [pc, #336]	; (8002a58 <SendTxData+0x1f4>)
 8002906:	2302      	movs	r3, #2
 8002908:	7023      	strb	r3, [r4, #0]
  humidity    = (uint16_t)(sensor_data.humidity);
 800290a:	9804      	ldr	r0, [sp, #16]
 800290c:	f7fe f8e4 	bl	8000ad8 <__aeabi_f2uiz>
 8002910:	b285      	uxth	r5, r0
  temperature = (int16_t)(sensor_data.temperature);
 8002912:	9803      	ldr	r0, [sp, #12]
 8002914:	f7fe f8ba 	bl	8000a8c <__aeabi_f2iz>
 8002918:	b206      	sxth	r6, r0
  pressure = (uint16_t)(sensor_data.pressure);
 800291a:	9802      	ldr	r0, [sp, #8]
 800291c:	f7fe f8dc 	bl	8000ad8 <__aeabi_f2uiz>
  AppData.Buffer[i++] = AppLedStateOn;
 8002920:	6863      	ldr	r3, [r4, #4]
 8002922:	4a4e      	ldr	r2, [pc, #312]	; (8002a5c <SendTxData+0x1f8>)
 8002924:	7812      	ldrb	r2, [r2, #0]
 8002926:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 8002928:	6863      	ldr	r3, [r4, #4]
 800292a:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800292e:	705a      	strb	r2, [r3, #1]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 8002930:	6863      	ldr	r3, [r4, #4]
 8002932:	7098      	strb	r0, [r3, #2]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 8002934:	6863      	ldr	r3, [r4, #4]
 8002936:	70de      	strb	r6, [r3, #3]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 8002938:	6863      	ldr	r3, [r4, #4]
 800293a:	0a2a      	lsrs	r2, r5, #8
 800293c:	711a      	strb	r2, [r3, #4]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 800293e:	6863      	ldr	r3, [r4, #4]
 8002940:	715d      	strb	r5, [r3, #5]
  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 8002942:	4b47      	ldr	r3, [pc, #284]	; (8002a60 <SendTxData+0x1fc>)
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	2b08      	cmp	r3, #8
 8002948:	d002      	beq.n	8002950 <SendTxData+0xec>
 800294a:	2b01      	cmp	r3, #1
 800294c:	d000      	beq.n	8002950 <SendTxData+0xec>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 800294e:	bb63      	cbnz	r3, 80029aa <SendTxData+0x146>
    AppData.Buffer[i++] = 0;
 8002950:	4a41      	ldr	r2, [pc, #260]	; (8002a58 <SendTxData+0x1f4>)
 8002952:	6851      	ldr	r1, [r2, #4]
 8002954:	2300      	movs	r3, #0
 8002956:	718b      	strb	r3, [r1, #6]
    AppData.Buffer[i++] = 0;
 8002958:	6851      	ldr	r1, [r2, #4]
 800295a:	71cb      	strb	r3, [r1, #7]
    AppData.Buffer[i++] = 0;
 800295c:	6852      	ldr	r2, [r2, #4]
 800295e:	7213      	strb	r3, [r2, #8]
    AppData.Buffer[i++] = 0;
 8002960:	7253      	strb	r3, [r2, #9]
 8002962:	220a      	movs	r2, #10
  AppData.BufferSize = i;
 8002964:	4b3c      	ldr	r3, [pc, #240]	; (8002a58 <SendTxData+0x1f4>)
 8002966:	705a      	strb	r2, [r3, #1]
  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002968:	4b3e      	ldr	r3, [pc, #248]	; (8002a64 <SendTxData+0x200>)
 800296a:	7a5b      	ldrb	r3, [r3, #9]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d138      	bne.n	80029e2 <SendTxData+0x17e>
  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 8002970:	2200      	movs	r2, #0
 8002972:	4b3b      	ldr	r3, [pc, #236]	; (8002a60 <SendTxData+0x1fc>)
 8002974:	78d9      	ldrb	r1, [r3, #3]
 8002976:	4838      	ldr	r0, [pc, #224]	; (8002a58 <SendTxData+0x1f4>)
 8002978:	f006 f83a 	bl	80089f0 <LmHandlerSend>
  if (LORAMAC_HANDLER_SUCCESS == status)
 800297c:	2800      	cmp	r0, #0
 800297e:	d03e      	beq.n	80029fe <SendTxData+0x19a>
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 8002980:	f110 0f06 	cmn.w	r0, #6
 8002984:	d043      	beq.n	8002a0e <SendTxData+0x1aa>
  UTIL_TIMER_Time_t nextTxIn = 0;
 8002986:	2500      	movs	r5, #0
    UTIL_TIMER_Stop(&TxTimer);
 8002988:	4c37      	ldr	r4, [pc, #220]	; (8002a68 <SendTxData+0x204>)
 800298a:	4620      	mov	r0, r4
 800298c:	f010 faac 	bl	8012ee8 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 8002990:	4b36      	ldr	r3, [pc, #216]	; (8002a6c <SendTxData+0x208>)
 8002992:	6819      	ldr	r1, [r3, #0]
 8002994:	42a9      	cmp	r1, r5
 8002996:	bf38      	it	cc
 8002998:	4629      	movcc	r1, r5
 800299a:	4620      	mov	r0, r4
 800299c:	f010 fb44 	bl	8013028 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 80029a0:	4620      	mov	r0, r4
 80029a2:	f010 fafb 	bl	8012f9c <UTIL_TIMER_Start>
}
 80029a6:	b009      	add	sp, #36	; 0x24
 80029a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    latitude = sensor_data.latitude;
 80029aa:	9d05      	ldr	r5, [sp, #20]
    longitude = sensor_data.longitude;
 80029ac:	9c06      	ldr	r4, [sp, #24]
    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 80029ae:	4e2a      	ldr	r6, [pc, #168]	; (8002a58 <SendTxData+0x1f4>)
 80029b0:	6877      	ldr	r7, [r6, #4]
 80029b2:	f7fe ff95 	bl	80018e0 <GetBatteryLevel>
 80029b6:	71b8      	strb	r0, [r7, #6]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 80029b8:	6873      	ldr	r3, [r6, #4]
 80029ba:	f3c5 4207 	ubfx	r2, r5, #16, #8
 80029be:	71da      	strb	r2, [r3, #7]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 80029c0:	6873      	ldr	r3, [r6, #4]
 80029c2:	f3c5 2207 	ubfx	r2, r5, #8, #8
 80029c6:	721a      	strb	r2, [r3, #8]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 80029c8:	725d      	strb	r5, [r3, #9]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 80029ca:	f3c4 4207 	ubfx	r2, r4, #16, #8
 80029ce:	729a      	strb	r2, [r3, #10]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 80029d0:	f3c4 2207 	ubfx	r2, r4, #8, #8
 80029d4:	72da      	strb	r2, [r3, #11]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 80029d6:	731c      	strb	r4, [r3, #12]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 80029d8:	2200      	movs	r2, #0
 80029da:	735a      	strb	r2, [r3, #13]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 80029dc:	739a      	strb	r2, [r3, #14]
 80029de:	220f      	movs	r2, #15
 80029e0:	e7c0      	b.n	8002964 <SendTxData+0x100>
  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 80029e2:	f005 ff37 	bl	8008854 <LmHandlerJoinStatus>
 80029e6:	2801      	cmp	r0, #1
 80029e8:	d1c2      	bne.n	8002970 <SendTxData+0x10c>
    UTIL_TIMER_Stop(&JoinLedTimer);
 80029ea:	481e      	ldr	r0, [pc, #120]	; (8002a64 <SendTxData+0x200>)
 80029ec:	f010 fa7c 	bl	8012ee8 <UTIL_TIMER_Stop>
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 80029f0:	2200      	movs	r2, #0
 80029f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80029f6:	481e      	ldr	r0, [pc, #120]	; (8002a70 <SendTxData+0x20c>)
 80029f8:	f002 fbc2 	bl	8005180 <HAL_GPIO_WritePin>
 80029fc:	e7b8      	b.n	8002970 <SendTxData+0x10c>
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 80029fe:	4b1d      	ldr	r3, [pc, #116]	; (8002a74 <SendTxData+0x210>)
 8002a00:	2201      	movs	r2, #1
 8002a02:	2100      	movs	r1, #0
 8002a04:	4610      	mov	r0, r2
 8002a06:	f00f ff1b 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Time_t nextTxIn = 0;
 8002a0a:	2500      	movs	r5, #0
 8002a0c:	e7bc      	b.n	8002988 <SendTxData+0x124>
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 8002a0e:	f005 ff1b 	bl	8008848 <LmHandlerGetDutyCycleWaitTime>
    if (nextTxIn > 0)
 8002a12:	4605      	mov	r5, r0
 8002a14:	2800      	cmp	r0, #0
 8002a16:	d0b7      	beq.n	8002988 <SendTxData+0x124>
      APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 8002a18:	4b17      	ldr	r3, [pc, #92]	; (8002a78 <SendTxData+0x214>)
 8002a1a:	fba3 2300 	umull	r2, r3, r3, r0
 8002a1e:	099b      	lsrs	r3, r3, #6
 8002a20:	9300      	str	r3, [sp, #0]
 8002a22:	4b16      	ldr	r3, [pc, #88]	; (8002a7c <SendTxData+0x218>)
 8002a24:	2201      	movs	r2, #1
 8002a26:	2100      	movs	r1, #0
 8002a28:	4610      	mov	r0, r2
 8002a2a:	f00f ff09 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
 8002a2e:	e7ab      	b.n	8002988 <SendTxData+0x124>
 8002a30:	080142a4 	.word	0x080142a4
 8002a34:	080142b0 	.word	0x080142b0
 8002a38:	080142c8 	.word	0x080142c8
 8002a3c:	080142dc 	.word	0x080142dc
 8002a40:	20000640 	.word	0x20000640
 8002a44:	080142f4 	.word	0x080142f4
 8002a48:	20000648 	.word	0x20000648
 8002a4c:	0801431c 	.word	0x0801431c
 8002a50:	08014368 	.word	0x08014368
 8002a54:	08014344 	.word	0x08014344
 8002a58:	20000004 	.word	0x20000004
 8002a5c:	200005c6 	.word	0x200005c6
 8002a60:	20000058 	.word	0x20000058
 8002a64:	200005c8 	.word	0x200005c8
 8002a68:	20000628 	.word	0x20000628
 8002a6c:	2000006c 	.word	0x2000006c
 8002a70:	48000400 	.word	0x48000400
 8002a74:	08014370 	.word	0x08014370
 8002a78:	10624dd3 	.word	0x10624dd3
 8002a7c:	08014380 	.word	0x08014380

08002a80 <OnJoinTimerLedEvent>:
{
 8002a80:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
 8002a82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a86:	4802      	ldr	r0, [pc, #8]	; (8002a90 <OnJoinTimerLedEvent+0x10>)
 8002a88:	f002 fb7f 	bl	800518a <HAL_GPIO_TogglePin>
}
 8002a8c:	bd08      	pop	{r3, pc}
 8002a8e:	bf00      	nop
 8002a90:	48000400 	.word	0x48000400

08002a94 <LoRaWAN_Init>:
{
 8002a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a98:	b086      	sub	sp, #24
  uint32_t feature_version = 0UL;
 8002a9a:	2400      	movs	r4, #0
 8002a9c:	9405      	str	r4, [sp, #20]
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 8002a9e:	9402      	str	r4, [sp, #8]
 8002aa0:	2502      	movs	r5, #2
 8002aa2:	9501      	str	r5, [sp, #4]
 8002aa4:	2601      	movs	r6, #1
 8002aa6:	9600      	str	r6, [sp, #0]
 8002aa8:	4b4b      	ldr	r3, [pc, #300]	; (8002bd8 <LoRaWAN_Init+0x144>)
 8002aaa:	4622      	mov	r2, r4
 8002aac:	4621      	mov	r1, r4
 8002aae:	4628      	mov	r0, r5
 8002ab0:	f00f fec6 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 8002ab4:	9402      	str	r4, [sp, #8]
 8002ab6:	2704      	movs	r7, #4
 8002ab8:	9701      	str	r7, [sp, #4]
 8002aba:	9500      	str	r5, [sp, #0]
 8002abc:	4b47      	ldr	r3, [pc, #284]	; (8002bdc <LoRaWAN_Init+0x148>)
 8002abe:	4622      	mov	r2, r4
 8002ac0:	4621      	mov	r1, r4
 8002ac2:	4628      	mov	r0, r5
 8002ac4:	f00f febc 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 8002ac8:	9402      	str	r4, [sp, #8]
 8002aca:	9501      	str	r5, [sp, #4]
 8002acc:	9600      	str	r6, [sp, #0]
 8002ace:	4b44      	ldr	r3, [pc, #272]	; (8002be0 <LoRaWAN_Init+0x14c>)
 8002ad0:	4622      	mov	r2, r4
 8002ad2:	4621      	mov	r1, r4
 8002ad4:	4628      	mov	r0, r5
 8002ad6:	f00f feb3 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 8002ada:	a905      	add	r1, sp, #20
 8002adc:	4620      	mov	r0, r4
 8002ade:	f006 fa9d 	bl	800901c <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 8002ae2:	9b05      	ldr	r3, [sp, #20]
 8002ae4:	0e1a      	lsrs	r2, r3, #24
 8002ae6:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002aea:	9102      	str	r1, [sp, #8]
 8002aec:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002af0:	9301      	str	r3, [sp, #4]
 8002af2:	9200      	str	r2, [sp, #0]
 8002af4:	4b3b      	ldr	r3, [pc, #236]	; (8002be4 <LoRaWAN_Init+0x150>)
 8002af6:	4622      	mov	r2, r4
 8002af8:	4621      	mov	r1, r4
 8002afa:	4628      	mov	r0, r5
 8002afc:	f00f fea0 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 8002b00:	a905      	add	r1, sp, #20
 8002b02:	4630      	mov	r0, r6
 8002b04:	f006 fa8a 	bl	800901c <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 8002b08:	9b05      	ldr	r3, [sp, #20]
 8002b0a:	0e1a      	lsrs	r2, r3, #24
 8002b0c:	b2d9      	uxtb	r1, r3
 8002b0e:	9103      	str	r1, [sp, #12]
 8002b10:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002b14:	9102      	str	r1, [sp, #8]
 8002b16:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002b1a:	9301      	str	r3, [sp, #4]
 8002b1c:	9200      	str	r2, [sp, #0]
 8002b1e:	4b32      	ldr	r3, [pc, #200]	; (8002be8 <LoRaWAN_Init+0x154>)
 8002b20:	4622      	mov	r2, r4
 8002b22:	4621      	mov	r1, r4
 8002b24:	4628      	mov	r0, r5
 8002b26:	f00f fe8b 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8002b2a:	9400      	str	r4, [sp, #0]
 8002b2c:	4b2f      	ldr	r3, [pc, #188]	; (8002bec <LoRaWAN_Init+0x158>)
 8002b2e:	4622      	mov	r2, r4
 8002b30:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002b34:	482e      	ldr	r0, [pc, #184]	; (8002bf0 <LoRaWAN_Init+0x15c>)
 8002b36:	f010 f979 	bl	8012e2c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8002b3a:	9400      	str	r4, [sp, #0]
 8002b3c:	4b2d      	ldr	r3, [pc, #180]	; (8002bf4 <LoRaWAN_Init+0x160>)
 8002b3e:	4622      	mov	r2, r4
 8002b40:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002b44:	482c      	ldr	r0, [pc, #176]	; (8002bf8 <LoRaWAN_Init+0x164>)
 8002b46:	f010 f971 	bl	8012e2c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8002b4a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8002bfc <LoRaWAN_Init+0x168>
 8002b4e:	9400      	str	r4, [sp, #0]
 8002b50:	4b2b      	ldr	r3, [pc, #172]	; (8002c00 <LoRaWAN_Init+0x16c>)
 8002b52:	4632      	mov	r2, r6
 8002b54:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002b58:	4640      	mov	r0, r8
 8002b5a:	f010 f967 	bl	8012e2c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 8002b5e:	9400      	str	r4, [sp, #0]
 8002b60:	4b28      	ldr	r3, [pc, #160]	; (8002c04 <LoRaWAN_Init+0x170>)
 8002b62:	4622      	mov	r2, r4
 8002b64:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002b68:	4827      	ldr	r0, [pc, #156]	; (8002c08 <LoRaWAN_Init+0x174>)
 8002b6a:	f010 f95f 	bl	8012e2c <UTIL_TIMER_Create>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8002b6e:	4a27      	ldr	r2, [pc, #156]	; (8002c0c <LoRaWAN_Init+0x178>)
 8002b70:	4621      	mov	r1, r4
 8002b72:	4630      	mov	r0, r6
 8002b74:	f010 f85a 	bl	8012c2c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 8002b78:	4a25      	ldr	r2, [pc, #148]	; (8002c10 <LoRaWAN_Init+0x17c>)
 8002b7a:	4621      	mov	r1, r4
 8002b7c:	4628      	mov	r0, r5
 8002b7e:	f010 f855 	bl	8012c2c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 8002b82:	4a24      	ldr	r2, [pc, #144]	; (8002c14 <LoRaWAN_Init+0x180>)
 8002b84:	4621      	mov	r1, r4
 8002b86:	4638      	mov	r0, r7
 8002b88:	f010 f850 	bl	8012c2c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 8002b8c:	4a22      	ldr	r2, [pc, #136]	; (8002c18 <LoRaWAN_Init+0x184>)
 8002b8e:	4621      	mov	r1, r4
 8002b90:	2008      	movs	r0, #8
 8002b92:	f010 f84b 	bl	8012c2c <UTIL_SEQ_RegTask>
  LoraInfo_Init();
 8002b96:	f000 f889 	bl	8002cac <LoraInfo_Init>
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 8002b9a:	f04f 7181 	mov.w	r1, #16908288	; 0x1020000
 8002b9e:	481f      	ldr	r0, [pc, #124]	; (8002c1c <LoRaWAN_Init+0x188>)
 8002ba0:	f006 fa0a 	bl	8008fb8 <LmHandlerInit>
  LmHandlerConfigure(&LmHandlerParams);
 8002ba4:	481e      	ldr	r0, [pc, #120]	; (8002c20 <LoRaWAN_Init+0x18c>)
 8002ba6:	f006 f8d9 	bl	8008d5c <LmHandlerConfigure>
  UTIL_TIMER_Start(&JoinLedTimer);
 8002baa:	4640      	mov	r0, r8
 8002bac:	f010 f9f6 	bl	8012f9c <UTIL_TIMER_Start>
  LmHandlerJoin(ActivationType, ForceRejoin);
 8002bb0:	4621      	mov	r1, r4
 8002bb2:	4b1c      	ldr	r3, [pc, #112]	; (8002c24 <LoRaWAN_Init+0x190>)
 8002bb4:	7818      	ldrb	r0, [r3, #0]
 8002bb6:	f005 febb 	bl	8008930 <LmHandlerJoin>
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8002bba:	4d1b      	ldr	r5, [pc, #108]	; (8002c28 <LoRaWAN_Init+0x194>)
 8002bbc:	9400      	str	r4, [sp, #0]
 8002bbe:	4b1b      	ldr	r3, [pc, #108]	; (8002c2c <LoRaWAN_Init+0x198>)
 8002bc0:	4622      	mov	r2, r4
 8002bc2:	491b      	ldr	r1, [pc, #108]	; (8002c30 <LoRaWAN_Init+0x19c>)
 8002bc4:	6809      	ldr	r1, [r1, #0]
 8002bc6:	4628      	mov	r0, r5
 8002bc8:	f010 f930 	bl	8012e2c <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 8002bcc:	4628      	mov	r0, r5
 8002bce:	f010 f9e5 	bl	8012f9c <UTIL_TIMER_Start>
}
 8002bd2:	b006      	add	sp, #24
 8002bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002bd8:	080143a0 	.word	0x080143a0
 8002bdc:	080143c4 	.word	0x080143c4
 8002be0:	080143e8 	.word	0x080143e8
 8002be4:	0801440c 	.word	0x0801440c
 8002be8:	08014430 	.word	0x08014430
 8002bec:	08002615 	.word	0x08002615
 8002bf0:	20000610 	.word	0x20000610
 8002bf4:	08002601 	.word	0x08002601
 8002bf8:	200005e0 	.word	0x200005e0
 8002bfc:	200005c8 	.word	0x200005c8
 8002c00:	08002a81 	.word	0x08002a81
 8002c04:	080025bd 	.word	0x080025bd
 8002c08:	200005f8 	.word	0x200005f8
 8002c0c:	0800883d 	.word	0x0800883d
 8002c10:	08002865 	.word	0x08002865
 8002c14:	0800282d 	.word	0x0800282d
 8002c18:	08002791 	.word	0x08002791
 8002c1c:	2000000c 	.word	0x2000000c
 8002c20:	20000058 	.word	0x20000058
 8002c24:	20000000 	.word	0x20000000
 8002c28:	20000628 	.word	0x20000628
 8002c2c:	08002411 	.word	0x08002411
 8002c30:	2000006c 	.word	0x2000006c

08002c34 <getRainfall>:
} // getRainfall function
 8002c34:	3001      	adds	r0, #1
 8002c36:	4770      	bx	lr

08002c38 <getWindSpeed>:
  windTips++;
 8002c38:	4a02      	ldr	r2, [pc, #8]	; (8002c44 <getWindSpeed+0xc>)
 8002c3a:	6813      	ldr	r3, [r2, #0]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	6013      	str	r3, [r2, #0]
} // getWindSpeed function
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	20000648 	.word	0x20000648

08002c48 <HAL_GPIO_EXTI_Callback>:
{
 8002c48:	b510      	push	{r4, lr}
  switch (GPIO_Pin)
 8002c4a:	2810      	cmp	r0, #16
 8002c4c:	d023      	beq.n	8002c96 <HAL_GPIO_EXTI_Callback+0x4e>
 8002c4e:	d914      	bls.n	8002c7a <HAL_GPIO_EXTI_Callback+0x32>
 8002c50:	2840      	cmp	r0, #64	; 0x40
 8002c52:	d01b      	beq.n	8002c8c <HAL_GPIO_EXTI_Callback+0x44>
 8002c54:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8002c58:	d117      	bne.n	8002c8a <HAL_GPIO_EXTI_Callback+0x42>
        rainTips = getRainfall(rainTips);
 8002c5a:	4c10      	ldr	r4, [pc, #64]	; (8002c9c <HAL_GPIO_EXTI_Callback+0x54>)
 8002c5c:	6820      	ldr	r0, [r4, #0]
 8002c5e:	f7ff ffe9 	bl	8002c34 <getRainfall>
 8002c62:	6020      	str	r0, [r4, #0]
        rainFallInMM = rainTips*rainConvert*10000;
 8002c64:	f7fd febe 	bl	80009e4 <__aeabi_i2f>
 8002c68:	490d      	ldr	r1, [pc, #52]	; (8002ca0 <HAL_GPIO_EXTI_Callback+0x58>)
 8002c6a:	f7fd fae1 	bl	8000230 <__aeabi_fmul>
 8002c6e:	490d      	ldr	r1, [pc, #52]	; (8002ca4 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002c70:	f7fd fade 	bl	8000230 <__aeabi_fmul>
 8002c74:	4b0c      	ldr	r3, [pc, #48]	; (8002ca8 <HAL_GPIO_EXTI_Callback+0x60>)
 8002c76:	6018      	str	r0, [r3, #0]
        break;
 8002c78:	e007      	b.n	8002c8a <HAL_GPIO_EXTI_Callback+0x42>
  switch (GPIO_Pin)
 8002c7a:	2801      	cmp	r0, #1
 8002c7c:	d005      	beq.n	8002c8a <HAL_GPIO_EXTI_Callback+0x42>
 8002c7e:	2802      	cmp	r0, #2
 8002c80:	d103      	bne.n	8002c8a <HAL_GPIO_EXTI_Callback+0x42>
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 8002c82:	2100      	movs	r1, #0
 8002c84:	2008      	movs	r0, #8
 8002c86:	f00f ff05 	bl	8012a94 <UTIL_SEQ_SetTask>
}
 8002c8a:	bd10      	pop	{r4, pc}
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	2004      	movs	r0, #4
 8002c90:	f00f ff00 	bl	8012a94 <UTIL_SEQ_SetTask>
      break;
 8002c94:	e7f9      	b.n	8002c8a <HAL_GPIO_EXTI_Callback+0x42>
        getWindSpeed();
 8002c96:	f7ff ffcf 	bl	8002c38 <getWindSpeed>
}
 8002c9a:	e7f6      	b.n	8002c8a <HAL_GPIO_EXTI_Callback+0x42>
 8002c9c:	20000644 	.word	0x20000644
 8002ca0:	3dbeb5b3 	.word	0x3dbeb5b3
 8002ca4:	461c4000 	.word	0x461c4000
 8002ca8:	20000640 	.word	0x20000640

08002cac <LoraInfo_Init>:
/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ActivationMode = 0;
 8002cac:	4b06      	ldr	r3, [pc, #24]	; (8002cc8 <LoraInfo_Init+0x1c>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 8002cb2:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 8002cb4:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 8002cb6:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 8002cb8:	2220      	movs	r2, #32
 8002cba:	605a      	str	r2, [r3, #4]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865);
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915);
 8002cbc:	f44f 7290 	mov.w	r2, #288	; 0x120
 8002cc0:	605a      	str	r2, [r3, #4]
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
  loraInfo.ActivationMode = 3;
 8002cc2:	2203      	movs	r2, #3
 8002cc4:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8002cc6:	4770      	bx	lr
 8002cc8:	2000064c 	.word	0x2000064c

08002ccc <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 8002ccc:	4800      	ldr	r0, [pc, #0]	; (8002cd0 <LoraInfo_GetPtr+0x4>)
 8002cce:	4770      	bx	lr
 8002cd0:	2000064c 	.word	0x2000064c

08002cd4 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8002cd4:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 8002cd6:	f000 fec3 	bl	8003a60 <BSP_RADIO_Init>
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002cda:	bd08      	pop	{r3, pc}

08002cdc <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8002cdc:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8002cde:	f000 ff01 	bl	8003ae4 <BSP_RADIO_ConfigRFSwitch>
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8002ce2:	bd08      	pop	{r3, pc}

08002ce4 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8002ce4:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 8002ce6:	f000 ff4b 	bl	8003b80 <BSP_RADIO_GetTxConfig>
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8002cea:	bd08      	pop	{r3, pc}

08002cec <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8002cec:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 8002cee:	f000 ff49 	bl	8003b84 <BSP_RADIO_IsTCXO>
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002cf2:	bd08      	pop	{r3, pc}

08002cf4 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8002cf4:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 8002cf6:	f000 ff47 	bl	8003b88 <BSP_RADIO_IsDCDC>
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002cfa:	bd08      	pop	{r3, pc}

08002cfc <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8002cfc:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 8002cfe:	f000 ff45 	bl	8003b8c <BSP_RADIO_GetRFOMaxPowerConfig>
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 8002d02:	bd08      	pop	{r3, pc}

08002d04 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d04:	480d      	ldr	r0, [pc, #52]	; (8002d3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002d06:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d08:	f000 ff45 	bl	8003b96 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d0c:	480c      	ldr	r0, [pc, #48]	; (8002d40 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d0e:	490d      	ldr	r1, [pc, #52]	; (8002d44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d10:	4a0d      	ldr	r2, [pc, #52]	; (8002d48 <LoopForever+0xe>)
  movs r3, #0
 8002d12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d14:	e002      	b.n	8002d1c <LoopCopyDataInit>

08002d16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d1a:	3304      	adds	r3, #4

08002d1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d20:	d3f9      	bcc.n	8002d16 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d22:	4a0a      	ldr	r2, [pc, #40]	; (8002d4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d24:	4c0a      	ldr	r4, [pc, #40]	; (8002d50 <LoopForever+0x16>)
  movs r3, #0
 8002d26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d28:	e001      	b.n	8002d2e <LoopFillZerobss>

08002d2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d2c:	3204      	adds	r2, #4

08002d2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d30:	d3fb      	bcc.n	8002d2a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002d32:	f010 fb3f 	bl	80133b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d36:	f7fe fc5c 	bl	80015f2 <main>

08002d3a <LoopForever>:

LoopForever:
    b LoopForever
 8002d3a:	e7fe      	b.n	8002d3a <LoopForever>
  ldr   r0, =_estack
 8002d3c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002d40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d44:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 8002d48:	08014ea8 	.word	0x08014ea8
  ldr r2, =_sbss
 8002d4c:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 8002d50:	20001640 	.word	0x20001640

08002d54 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d54:	e7fe      	b.n	8002d54 <ADC_IRQHandler>

08002d56 <calc_temperature>:

/*!
 * @brief This internal API is used to calculate the temperature value.
 */
static int16_t calc_temperature(uint32_t temp_adc, struct bme680_dev *dev)
{
 8002d56:	b500      	push	{lr}
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 8002d58:	8acb      	ldrh	r3, [r1, #22]
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	ebc3 00e0 	rsb	r0, r3, r0, asr #3
 8002d60:	17c2      	asrs	r2, r0, #31
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 8002d62:	f9b1 c018 	ldrsh.w	ip, [r1, #24]
 8002d66:	ea4f 7eec 	mov.w	lr, ip, asr #31
 8002d6a:	fb0c f302 	mul.w	r3, ip, r2
 8002d6e:	fb00 330e 	mla	r3, r0, lr, r3
 8002d72:	fbac ce00 	umull	ip, lr, ip, r0
 8002d76:	4473      	add	r3, lr
 8002d78:	ea4f 2cdc 	mov.w	ip, ip, lsr #11
 8002d7c:	ea4c 5c43 	orr.w	ip, ip, r3, lsl #21
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 8002d80:	0840      	lsrs	r0, r0, #1
 8002d82:	ea40 70c2 	orr.w	r0, r0, r2, lsl #31
 8002d86:	fb00 f302 	mul.w	r3, r0, r2
 8002d8a:	fba0 0200 	umull	r0, r2, r0, r0
 8002d8e:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8002d92:	0b03      	lsrs	r3, r0, #12
 8002d94:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8002d98:	1312      	asrs	r2, r2, #12
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8002d9a:	f991 e01a 	ldrsb.w	lr, [r1, #26]
 8002d9e:	ea4f 100e 	mov.w	r0, lr, lsl #4
 8002da2:	ea4f 7eee 	mov.w	lr, lr, asr #31
 8002da6:	fb00 f202 	mul.w	r2, r0, r2
 8002daa:	fb03 220e 	mla	r2, r3, lr, r2
 8002dae:	fba0 0303 	umull	r0, r3, r0, r3
 8002db2:	4413      	add	r3, r2
 8002db4:	0b80      	lsrs	r0, r0, #14
 8002db6:	ea40 4083 	orr.w	r0, r0, r3, lsl #18
	dev->calib.t_fine = (int32_t) (var2 + var3);
 8002dba:	4460      	add	r0, ip
 8002dbc:	6308      	str	r0, [r1, #48]	; 0x30
	calc_temp = (int16_t) (((dev->calib.t_fine * 5) + 128) >> 8);
 8002dbe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002dc2:	3080      	adds	r0, #128	; 0x80

	return calc_temp;
}
 8002dc4:	f340 200f 	sbfx	r0, r0, #8, #16
 8002dc8:	f85d fb04 	ldr.w	pc, [sp], #4

08002dcc <calc_pressure>:

/*!
 * @brief This internal API is used to calculate the pressure value.
 */
static uint32_t calc_pressure(uint32_t pres_adc, const struct bme680_dev *dev)
{
 8002dcc:	b510      	push	{r4, lr}
	int32_t var1;
	int32_t var2;
	int32_t var3;
	int32_t pressure_comp;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 8002dce:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8002dd0:	105b      	asrs	r3, r3, #1
 8002dd2:	f5a3 4e7a 	sub.w	lr, r3, #64000	; 0xfa00
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8002dd6:	ea4f 02ae 	mov.w	r2, lr, asr #2
 8002dda:	fb02 f202 	mul.w	r2, r2, r2
 8002dde:	12d4      	asrs	r4, r2, #11
		(int32_t)dev->calib.par_p6) >> 2;
 8002de0:	f991 c026 	ldrsb.w	ip, [r1, #38]	; 0x26
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8002de4:	fb0c f404 	mul.w	r4, ip, r4
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
 8002de8:	f9b1 c024 	ldrsh.w	ip, [r1, #36]	; 0x24
 8002dec:	fb0e fc0c 	mul.w	ip, lr, ip
 8002df0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8002df4:	eb0c 04a4 	add.w	r4, ip, r4, asr #2
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 8002df8:	f9b1 3022 	ldrsh.w	r3, [r1, #34]	; 0x22
 8002dfc:	041b      	lsls	r3, r3, #16
 8002dfe:	eb03 0ca4 	add.w	ip, r3, r4, asr #2
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8002e02:	1352      	asrs	r2, r2, #13
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 8002e04:	f991 3020 	ldrsb.w	r3, [r1, #32]
 8002e08:	015b      	lsls	r3, r3, #5
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8002e0a:	fb03 f202 	mul.w	r2, r3, r2
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 8002e0e:	f9b1 301e 	ldrsh.w	r3, [r1, #30]
 8002e12:	fb0e f303 	mul.w	r3, lr, r3
 8002e16:	105b      	asrs	r3, r3, #1
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8002e18:	eb03 03e2 	add.w	r3, r3, r2, asr #3
	var1 = var1 >> 18;
 8002e1c:	149b      	asrs	r3, r3, #18
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 8002e1e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002e22:	8b8a      	ldrh	r2, [r1, #28]
 8002e24:	fb02 f303 	mul.w	r3, r2, r3
 8002e28:	13da      	asrs	r2, r3, #15
	pressure_comp = 1048576 - pres_adc;
 8002e2a:	f5c0 1380 	rsb	r3, r0, #1048576	; 0x100000
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
 8002e2e:	eba3 332c 	sub.w	r3, r3, ip, asr #12
 8002e32:	f640 4035 	movw	r0, #3125	; 0xc35
 8002e36:	fb00 f303 	mul.w	r3, r0, r3
	if (pressure_comp >= BME680_MAX_OVERFLOW_VAL)
 8002e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e3e:	db24      	blt.n	8002e8a <calc_pressure+0xbe>
		pressure_comp = ((pressure_comp / var1) << 1);
 8002e40:	fb93 f3f2 	sdiv	r3, r3, r2
 8002e44:	005b      	lsls	r3, r3, #1
	else
		pressure_comp = ((pressure_comp << 1) / var1);
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 8002e46:	f9b1 002a 	ldrsh.w	r0, [r1, #42]	; 0x2a
 8002e4a:	10da      	asrs	r2, r3, #3
 8002e4c:	fb02 f202 	mul.w	r2, r2, r2
		(pressure_comp >> 3)) >> 13)) >> 12;
 8002e50:	1352      	asrs	r2, r2, #13
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 8002e52:	fb02 f400 	mul.w	r4, r2, r0
	var2 = ((int32_t)(pressure_comp >> 2) *
 8002e56:	1098      	asrs	r0, r3, #2
		(int32_t)dev->calib.par_p8) >> 13;
 8002e58:	f9b1 2028 	ldrsh.w	r2, [r1, #40]	; 0x28
	var2 = ((int32_t)(pressure_comp >> 2) *
 8002e5c:	fb02 f000 	mul.w	r0, r2, r0
 8002e60:	1340      	asrs	r0, r0, #13
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8002e62:	121a      	asrs	r2, r3, #8
 8002e64:	fb02 fc02 	mul.w	ip, r2, r2
 8002e68:	fb0c f202 	mul.w	r2, ip, r2
		(int32_t)(pressure_comp >> 8) *
		(int32_t)dev->calib.par_p10) >> 17;
 8002e6c:	f891 c02c 	ldrb.w	ip, [r1, #44]	; 0x2c
		(int32_t)(pressure_comp >> 8) *
 8002e70:	fb0c f202 	mul.w	r2, ip, r2

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8002e74:	eb00 3024 	add.w	r0, r0, r4, asr #12
 8002e78:	eb00 4062 	add.w	r0, r0, r2, asr #17
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 8002e7c:	f991 2027 	ldrsb.w	r2, [r1, #39]	; 0x27
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8002e80:	eb00 10c2 	add.w	r0, r0, r2, lsl #7

	return (uint32_t)pressure_comp;

}
 8002e84:	eb03 1020 	add.w	r0, r3, r0, asr #4
 8002e88:	bd10      	pop	{r4, pc}
		pressure_comp = ((pressure_comp << 1) / var1);
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	fb93 f3f2 	sdiv	r3, r3, r2
 8002e90:	e7d9      	b.n	8002e46 <calc_pressure+0x7a>
	...

08002e94 <calc_humidity>:

/*!
 * @brief This internal API is used to calculate the humidity value.
 */
static uint32_t calc_humidity(uint16_t hum_adc, const struct bme680_dev *dev)
{
 8002e94:	b570      	push	{r4, r5, r6, lr}
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 8002e96:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8002e98:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002e9c:	3380      	adds	r3, #128	; 0x80
 8002e9e:	ea4f 2c23 	mov.w	ip, r3, asr #8
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 8002ea2:	890a      	ldrh	r2, [r1, #8]
 8002ea4:	eba0 1002 	sub.w	r0, r0, r2, lsl #4
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
 8002ea8:	f991 200c 	ldrsb.w	r2, [r1, #12]
 8002eac:	fb0c f202 	mul.w	r2, ip, r2
 8002eb0:	4c28      	ldr	r4, [pc, #160]	; (8002f54 <calc_humidity+0xc0>)
 8002eb2:	fb84 5302 	smull	r5, r3, r4, r2
 8002eb6:	17d2      	asrs	r2, r2, #31
 8002eb8:	ebc2 1263 	rsb	r2, r2, r3, asr #5
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 8002ebc:	eba0 0062 	sub.w	r0, r0, r2, asr #1
	var2 = ((int32_t) dev->calib.par_h2
 8002ec0:	894d      	ldrh	r5, [r1, #10]
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8002ec2:	f991 e00d 	ldrsb.w	lr, [r1, #13]
 8002ec6:	fb0c fe0e 	mul.w	lr, ip, lr
 8002eca:	fb84 230e 	smull	r2, r3, r4, lr
 8002ece:	ea4f 7eee 	mov.w	lr, lr, asr #31
 8002ed2:	ebce 1e63 	rsb	lr, lr, r3, asr #5
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8002ed6:	f991 200e 	ldrsb.w	r2, [r1, #14]
 8002eda:	fb0c f202 	mul.w	r2, ip, r2
 8002ede:	fb84 3602 	smull	r3, r6, r4, r2
 8002ee2:	17d3      	asrs	r3, r2, #31
 8002ee4:	ebc3 1366 	rsb	r3, r3, r6, asr #5
 8002ee8:	fb0c f303 	mul.w	r3, ip, r3
 8002eec:	119a      	asrs	r2, r3, #6
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 8002eee:	fb84 6202 	smull	r6, r2, r4, r2
 8002ef2:	17db      	asrs	r3, r3, #31
 8002ef4:	ebc3 1362 	rsb	r3, r3, r2, asr #5
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8002ef8:	4473      	add	r3, lr
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 8002efa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8002efe:	fb03 f505 	mul.w	r5, r3, r5
	var2 = ((int32_t) dev->calib.par_h2
 8002f02:	12ad      	asrs	r5, r5, #10
	var3 = var1 * var2;
 8002f04:	fb05 f000 	mul.w	r0, r5, r0
	var4 = (int32_t) dev->calib.par_h6 << 7;
 8002f08:	7bcd      	ldrb	r5, [r1, #15]
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8002f0a:	f991 2010 	ldrsb.w	r2, [r1, #16]
 8002f0e:	fb0c f302 	mul.w	r3, ip, r2
 8002f12:	fb84 2403 	smull	r2, r4, r4, r3
 8002f16:	17db      	asrs	r3, r3, #31
 8002f18:	ebc3 1364 	rsb	r3, r3, r4, asr #5
 8002f1c:	eb03 13c5 	add.w	r3, r3, r5, lsl #7
 8002f20:	111b      	asrs	r3, r3, #4
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8002f22:	1382      	asrs	r2, r0, #14
 8002f24:	fb02 f202 	mul.w	r2, r2, r2
 8002f28:	1292      	asrs	r2, r2, #10
	var6 = (var4 * var5) >> 1;
 8002f2a:	fb02 f303 	mul.w	r3, r2, r3
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 8002f2e:	eb00 0363 	add.w	r3, r0, r3, asr #1
 8002f32:	129b      	asrs	r3, r3, #10
 8002f34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f38:	fb02 f303 	mul.w	r3, r2, r3

	if (calc_hum > 100000) /* Cap at 100%rH */
 8002f3c:	4a06      	ldr	r2, [pc, #24]	; (8002f58 <calc_humidity+0xc4>)
 8002f3e:	ebb2 3f23 	cmp.w	r2, r3, asr #12
 8002f42:	db04      	blt.n	8002f4e <calc_humidity+0xba>
 8002f44:	1318      	asrs	r0, r3, #12
		calc_hum = 100000;
	else if (calc_hum < 0)
 8002f46:	2800      	cmp	r0, #0
 8002f48:	da02      	bge.n	8002f50 <calc_humidity+0xbc>
		calc_hum = 0;
 8002f4a:	2000      	movs	r0, #0
 8002f4c:	e000      	b.n	8002f50 <calc_humidity+0xbc>
		calc_hum = 100000;
 8002f4e:	4802      	ldr	r0, [pc, #8]	; (8002f58 <calc_humidity+0xc4>)

	return (uint32_t) calc_hum;
}
 8002f50:	bd70      	pop	{r4, r5, r6, pc}
 8002f52:	bf00      	nop
 8002f54:	51eb851f 	.word	0x51eb851f
 8002f58:	000186a0 	.word	0x000186a0

08002f5c <calc_gas_resistance>:

/*!
 * @brief This internal API is used to calculate the Gas Resistance value.
 */
static uint32_t calc_gas_resistance(uint16_t gas_res_adc, uint8_t gas_range, const struct bme680_dev *dev)
{
 8002f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f5e:	b0a1      	sub	sp, #132	; 0x84
 8002f60:	4605      	mov	r5, r0
 8002f62:	460e      	mov	r6, r1
 8002f64:	4617      	mov	r7, r2
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;
	/**Look up table 1 for the possible gas range values */
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
 8002f66:	4c32      	ldr	r4, [pc, #200]	; (8003030 <calc_gas_resistance+0xd4>)
 8002f68:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 8002f6c:	46a6      	mov	lr, r4
 8002f6e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8002f72:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002f76:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8002f7a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002f7e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8002f82:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002f86:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8002f8a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2130303777),
		UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2143188679), UINT32_C(2136746228),
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2147483647) };
	/**Look up table 2 for the possible gas range values */
	uint32_t lookupTable2[16] = { UINT32_C(4096000000), UINT32_C(2048000000), UINT32_C(1024000000), UINT32_C(512000000),
 8002f8e:	46ee      	mov	lr, sp
 8002f90:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 8002f94:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002f98:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8002f9c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002fa0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8002fa4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002fa8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8002fac:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8002fb0:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
		UINT32_C(255744255), UINT32_C(127110228), UINT32_C(64000000), UINT32_C(32258064), UINT32_C(16016016),
		UINT32_C(8000000), UINT32_C(4000000), UINT32_C(2000000), UINT32_C(1000000), UINT32_C(500000),
		UINT32_C(250000), UINT32_C(125000) };

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8002fb4:	f997 2036 	ldrsb.w	r2, [r7, #54]	; 0x36
 8002fb8:	17d3      	asrs	r3, r2, #31
 8002fba:	0099      	lsls	r1, r3, #2
 8002fbc:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002fc0:	ea4f 0c82 	mov.w	ip, r2, lsl #2
 8002fc4:	eb1c 0c02 	adds.w	ip, ip, r2
 8002fc8:	eb43 0301 	adc.w	r3, r3, r1
 8002fcc:	f240 523c 	movw	r2, #1340	; 0x53c
 8002fd0:	eb1c 0c02 	adds.w	ip, ip, r2
 8002fd4:	f143 0300 	adc.w	r3, r3, #0
		((int64_t) lookupTable1[gas_range])) >> 16;
 8002fd8:	aa20      	add	r2, sp, #128	; 0x80
 8002fda:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8002fde:	f856 2c40 	ldr.w	r2, [r6, #-64]
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8002fe2:	fbac c002 	umull	ip, r0, ip, r2
 8002fe6:	fb02 0003 	mla	r0, r2, r3, r0
 8002fea:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8002fee:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
 8002ff2:	1404      	asrs	r4, r0, #16
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8002ff4:	03ea      	lsls	r2, r5, #15
 8002ff6:	f112 427f 	adds.w	r2, r2, #4278190080	; 0xff000000
 8002ffa:	eb63 0303 	sbc.w	r3, r3, r3
 8002ffe:	eb12 020c 	adds.w	r2, r2, ip
 8003002:	eb43 4320 	adc.w	r3, r3, r0, asr #16
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 8003006:	f856 1c80 	ldr.w	r1, [r6, #-128]
 800300a:	fba1 0c0c 	umull	r0, ip, r1, ip
 800300e:	fb01 cc04 	mla	ip, r1, r4, ip
 8003012:	0a40      	lsrs	r0, r0, #9
 8003014:	ea40 50cc 	orr.w	r0, r0, ip, lsl #23
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
 8003018:	0854      	lsrs	r4, r2, #1
 800301a:	ea44 74c3 	orr.w	r4, r4, r3, lsl #31
 800301e:	1059      	asrs	r1, r3, #1
 8003020:	1820      	adds	r0, r4, r0
 8003022:	eb41 216c 	adc.w	r1, r1, ip, asr #9
 8003026:	f7fd fd77 	bl	8000b18 <__aeabi_ldivmod>

	return calc_gas_res;
}
 800302a:	b021      	add	sp, #132	; 0x84
 800302c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800302e:	bf00      	nop
 8003030:	08013e20 	.word	0x08013e20

08003034 <calc_heater_res>:

/*!
 * @brief This internal API is used to calculate the Heat Resistance value.
 */
static uint8_t calc_heater_res(uint16_t temp, const struct bme680_dev *dev)
{
 8003034:	b510      	push	{r4, lr}
	int32_t var3;
	int32_t var4;
	int32_t var5;
	int32_t heatr_res_x100;

	if (temp > 400) /* Cap temperature */
 8003036:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
 800303a:	d901      	bls.n	8003040 <calc_heater_res+0xc>
		temp = 400;
 800303c:	f44f 70c8 	mov.w	r0, #400	; 0x190

	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 8003040:	f991 3004 	ldrsb.w	r3, [r1, #4]
 8003044:	f991 2014 	ldrsb.w	r2, [r1, #20]
 8003048:	fb02 f303 	mul.w	r3, r2, r3
 800304c:	4a20      	ldr	r2, [pc, #128]	; (80030d0 <calc_heater_res+0x9c>)
 800304e:	fb82 2c03 	smull	r2, ip, r2, r3
 8003052:	17db      	asrs	r3, r3, #31
 8003054:	ebc3 1cac 	rsb	ip, r3, ip, asr #6
	var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 8003058:	f991 3011 	ldrsb.w	r3, [r1, #17]
 800305c:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8003060:	f9b1 2012 	ldrsh.w	r2, [r1, #18]
 8003064:	f502 3216 	add.w	r2, r2, #153600	; 0x25800
 8003068:	f202 1299 	addw	r2, r2, #409	; 0x199
 800306c:	fb02 f000 	mul.w	r0, r2, r0
 8003070:	4c18      	ldr	r4, [pc, #96]	; (80030d4 <calc_heater_res+0xa0>)
 8003072:	fb84 e200 	smull	lr, r2, r4, r0
 8003076:	17c0      	asrs	r0, r0, #31
 8003078:	ebc0 02e2 	rsb	r2, r0, r2, asr #3
 800307c:	f502 1248 	add.w	r2, r2, #3276800	; 0x320000
 8003080:	fb84 0402 	smull	r0, r4, r4, r2
 8003084:	17d2      	asrs	r2, r2, #31
 8003086:	ebc2 02a4 	rsb	r2, r2, r4, asr #2
 800308a:	fb02 f303 	mul.w	r3, r2, r3
	var3 = var1 + (var2 / 2);
 800308e:	eb03 70d3 	add.w	r0, r3, r3, lsr #31
 8003092:	1040      	asrs	r0, r0, #1
 8003094:	eb00 200c 	add.w	r0, r0, ip, lsl #8
	var4 = (var3 / (dev->calib.res_heat_range + 4));
 8003098:	f891 3034 	ldrb.w	r3, [r1, #52]	; 0x34
 800309c:	3304      	adds	r3, #4
 800309e:	fb90 f0f3 	sdiv	r0, r0, r3
	var5 = (131 * dev->calib.res_heat_val) + 65536;
 80030a2:	f991 3035 	ldrsb.w	r3, [r1, #53]	; 0x35
 80030a6:	eb03 1283 	add.w	r2, r3, r3, lsl #6
 80030aa:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80030ae:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	heatr_res_x100 = (int32_t) (((var4 / var5) - 250) * 34);
 80030b2:	fb90 f0f3 	sdiv	r0, r0, r3
 80030b6:	38fa      	subs	r0, #250	; 0xfa
 80030b8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80030bc:	0040      	lsls	r0, r0, #1
	heatr_res = (uint8_t) ((heatr_res_x100 + 50) / 100);
 80030be:	3032      	adds	r0, #50	; 0x32
 80030c0:	4b05      	ldr	r3, [pc, #20]	; (80030d8 <calc_heater_res+0xa4>)
 80030c2:	fb83 2300 	smull	r2, r3, r3, r0
 80030c6:	17c0      	asrs	r0, r0, #31
 80030c8:	ebc0 1063 	rsb	r0, r0, r3, asr #5

	return heatr_res;
}
 80030cc:	b2c0      	uxtb	r0, r0
 80030ce:	bd10      	pop	{r4, pc}
 80030d0:	10624dd3 	.word	0x10624dd3
 80030d4:	66666667 	.word	0x66666667
 80030d8:	51eb851f 	.word	0x51eb851f

080030dc <calc_heater_dur>:
static uint8_t calc_heater_dur(uint16_t dur)
{
	uint8_t factor = 0;
	uint8_t durval;

	if (dur >= 0xfc0) {
 80030dc:	f5b0 6f7c 	cmp.w	r0, #4032	; 0xfc0
 80030e0:	d20c      	bcs.n	80030fc <calc_heater_dur+0x20>
	uint8_t factor = 0;
 80030e2:	2300      	movs	r3, #0
 80030e4:	e002      	b.n	80030ec <calc_heater_dur+0x10>
		durval = 0xff; /* Max duration*/
	} else {
		while (dur > 0x3F) {
			dur = dur / 4;
 80030e6:	0880      	lsrs	r0, r0, #2
			factor += 1;
 80030e8:	3301      	adds	r3, #1
 80030ea:	b2db      	uxtb	r3, r3
		while (dur > 0x3F) {
 80030ec:	283f      	cmp	r0, #63	; 0x3f
 80030ee:	d8fa      	bhi.n	80030e6 <calc_heater_dur+0xa>
		}
		durval = (uint8_t) (dur + (factor * 64));
 80030f0:	019b      	lsls	r3, r3, #6
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	fa53 f080 	uxtab	r0, r3, r0
 80030f8:	b2c0      	uxtb	r0, r0
 80030fa:	4770      	bx	lr
		durval = 0xff; /* Max duration*/
 80030fc:	20ff      	movs	r0, #255	; 0xff
	}

	return durval;
}
 80030fe:	4770      	bx	lr

08003100 <boundary_check>:
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
	int8_t rslt = BME680_OK;

	if (value != NULL) {
 8003100:	4684      	mov	ip, r0
 8003102:	b1c0      	cbz	r0, 8003136 <boundary_check+0x36>
		/* Check if value is below minimum value */
		if (*value < min) {
 8003104:	7800      	ldrb	r0, [r0, #0]
 8003106:	4288      	cmp	r0, r1
 8003108:	d207      	bcs.n	800311a <boundary_check+0x1a>
			/* Auto correct the invalid value to minimum value */
			*value = min;
 800310a:	f88c 1000 	strb.w	r1, [ip]
			dev->info_msg |= BME680_I_MIN_CORRECTION;
 800310e:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
 8003112:	f041 0101 	orr.w	r1, r1, #1
 8003116:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
		}
		/* Check if value is above maximum value */
		if (*value > max) {
 800311a:	f89c 1000 	ldrb.w	r1, [ip]
 800311e:	4291      	cmp	r1, r2
 8003120:	d90c      	bls.n	800313c <boundary_check+0x3c>
			/* Auto correct the invalid value to maximum value */
			*value = max;
 8003122:	f88c 2000 	strb.w	r2, [ip]
			dev->info_msg |= BME680_I_MAX_CORRECTION;
 8003126:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800312a:	f042 0202 	orr.w	r2, r2, #2
 800312e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	int8_t rslt = BME680_OK;
 8003132:	2000      	movs	r0, #0
 8003134:	4770      	bx	lr
		}
	} else {
		rslt = BME680_E_NULL_PTR;
 8003136:	f04f 30ff 	mov.w	r0, #4294967295
 800313a:	4770      	bx	lr
	int8_t rslt = BME680_OK;
 800313c:	2000      	movs	r0, #0
	}

	return rslt;
}
 800313e:	4770      	bx	lr

08003140 <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8003140:	b150      	cbz	r0, 8003158 <null_ptr_check+0x18>
 8003142:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8003144:	b15a      	cbz	r2, 800315e <null_ptr_check+0x1e>
 8003146:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8003148:	b162      	cbz	r2, 8003164 <null_ptr_check+0x24>
 800314a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800314c:	b10b      	cbz	r3, 8003152 <null_ptr_check+0x12>
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
	} else {
		/* Device structure is fine */
		rslt = BME680_OK;
 800314e:	2000      	movs	r0, #0
	}

	return rslt;
}
 8003150:	4770      	bx	lr
		rslt = BME680_E_NULL_PTR;
 8003152:	f04f 30ff 	mov.w	r0, #4294967295
 8003156:	4770      	bx	lr
 8003158:	f04f 30ff 	mov.w	r0, #4294967295
 800315c:	4770      	bx	lr
 800315e:	f04f 30ff 	mov.w	r0, #4294967295
 8003162:	4770      	bx	lr
 8003164:	f04f 30ff 	mov.w	r0, #4294967295
 8003168:	4770      	bx	lr

0800316a <set_mem_page>:
{
 800316a:	b570      	push	{r4, r5, r6, lr}
 800316c:	b082      	sub	sp, #8
 800316e:	4605      	mov	r5, r0
 8003170:	460c      	mov	r4, r1
	rslt = null_ptr_check(dev);
 8003172:	4608      	mov	r0, r1
 8003174:	f7ff ffe4 	bl	8003140 <null_ptr_check>
	if (rslt == BME680_OK) {
 8003178:	4606      	mov	r6, r0
 800317a:	bb40      	cbnz	r0, 80031ce <set_mem_page+0x64>
		if (reg_addr > 0x7f)
 800317c:	f015 0f80 	tst.w	r5, #128	; 0x80
 8003180:	d128      	bne.n	80031d4 <set_mem_page+0x6a>
			mem_page = BME680_MEM_PAGE0;
 8003182:	2310      	movs	r3, #16
		if (mem_page != dev->mem_page) {
 8003184:	78e2      	ldrb	r2, [r4, #3]
 8003186:	429a      	cmp	r2, r3
 8003188:	d021      	beq.n	80031ce <set_mem_page+0x64>
			dev->mem_page = mem_page;
 800318a:	70e3      	strb	r3, [r4, #3]
			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 800318c:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800318e:	2301      	movs	r3, #1
 8003190:	f10d 0207 	add.w	r2, sp, #7
 8003194:	21f3      	movs	r1, #243	; 0xf3
 8003196:	7860      	ldrb	r0, [r4, #1]
 8003198:	47a8      	blx	r5
 800319a:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
			if (dev->com_rslt != 0)
 800319e:	b9d8      	cbnz	r0, 80031d8 <set_mem_page+0x6e>
				reg = reg & (~BME680_MEM_PAGE_MSK);
 80031a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80031a4:	f003 02ef 	and.w	r2, r3, #239	; 0xef
 80031a8:	f88d 2007 	strb.w	r2, [sp, #7]
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 80031ac:	f994 3003 	ldrsb.w	r3, [r4, #3]
 80031b0:	f003 0310 	and.w	r3, r3, #16
 80031b4:	4313      	orrs	r3, r2
 80031b6:	f88d 3007 	strb.w	r3, [sp, #7]
				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 80031ba:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80031bc:	2301      	movs	r3, #1
 80031be:	f10d 0207 	add.w	r2, sp, #7
 80031c2:	2173      	movs	r1, #115	; 0x73
 80031c4:	7860      	ldrb	r0, [r4, #1]
 80031c6:	47a8      	blx	r5
 80031c8:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
				if (dev->com_rslt != 0)
 80031cc:	b938      	cbnz	r0, 80031de <set_mem_page+0x74>
}
 80031ce:	4630      	mov	r0, r6
 80031d0:	b002      	add	sp, #8
 80031d2:	bd70      	pop	{r4, r5, r6, pc}
			mem_page = BME680_MEM_PAGE1;
 80031d4:	2300      	movs	r3, #0
 80031d6:	e7d5      	b.n	8003184 <set_mem_page+0x1a>
				rslt = BME680_E_COM_FAIL;
 80031d8:	f06f 0601 	mvn.w	r6, #1
 80031dc:	e7f7      	b.n	80031ce <set_mem_page+0x64>
					rslt = BME680_E_COM_FAIL;
 80031de:	f06f 0601 	mvn.w	r6, #1
 80031e2:	e7f4      	b.n	80031ce <set_mem_page+0x64>

080031e4 <get_mem_page>:
{
 80031e4:	b530      	push	{r4, r5, lr}
 80031e6:	b083      	sub	sp, #12
 80031e8:	4604      	mov	r4, r0
	rslt = null_ptr_check(dev);
 80031ea:	f7ff ffa9 	bl	8003140 <null_ptr_check>
	if (rslt == BME680_OK) {
 80031ee:	4605      	mov	r5, r0
 80031f0:	b978      	cbnz	r0, 8003212 <get_mem_page+0x2e>
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 80031f2:	2301      	movs	r3, #1
 80031f4:	f10d 0207 	add.w	r2, sp, #7
 80031f8:	21f3      	movs	r1, #243	; 0xf3
 80031fa:	7860      	ldrb	r0, [r4, #1]
 80031fc:	f8d4 c048 	ldr.w	ip, [r4, #72]	; 0x48
 8003200:	47e0      	blx	ip
 8003202:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
		if (dev->com_rslt != 0)
 8003206:	b938      	cbnz	r0, 8003218 <get_mem_page+0x34>
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
 8003208:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800320c:	f003 0310 	and.w	r3, r3, #16
 8003210:	70e3      	strb	r3, [r4, #3]
}
 8003212:	4628      	mov	r0, r5
 8003214:	b003      	add	sp, #12
 8003216:	bd30      	pop	{r4, r5, pc}
			rslt = BME680_E_COM_FAIL;
 8003218:	f06f 0501 	mvn.w	r5, #1
 800321c:	e7f9      	b.n	8003212 <get_mem_page+0x2e>

0800321e <bme680_get_regs>:
{
 800321e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003222:	4605      	mov	r5, r0
 8003224:	460e      	mov	r6, r1
 8003226:	4690      	mov	r8, r2
 8003228:	461c      	mov	r4, r3
	rslt = null_ptr_check(dev);
 800322a:	4618      	mov	r0, r3
 800322c:	f7ff ff88 	bl	8003140 <null_ptr_check>
	if (rslt == BME680_OK) {
 8003230:	4607      	mov	r7, r0
 8003232:	b950      	cbnz	r0, 800324a <bme680_get_regs+0x2c>
		if (dev->intf == BME680_SPI_INTF) {
 8003234:	78a3      	ldrb	r3, [r4, #2]
 8003236:	b15b      	cbz	r3, 8003250 <bme680_get_regs+0x32>
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8003238:	4643      	mov	r3, r8
 800323a:	4632      	mov	r2, r6
 800323c:	4629      	mov	r1, r5
 800323e:	7860      	ldrb	r0, [r4, #1]
 8003240:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8003242:	47a8      	blx	r5
 8003244:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
		if (dev->com_rslt != 0)
 8003248:	b960      	cbnz	r0, 8003264 <bme680_get_regs+0x46>
}
 800324a:	4638      	mov	r0, r7
 800324c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			rslt = set_mem_page(reg_addr, dev);
 8003250:	4621      	mov	r1, r4
 8003252:	4628      	mov	r0, r5
 8003254:	f7ff ff89 	bl	800316a <set_mem_page>
			if (rslt == BME680_OK)
 8003258:	4607      	mov	r7, r0
 800325a:	2800      	cmp	r0, #0
 800325c:	d1ec      	bne.n	8003238 <bme680_get_regs+0x1a>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
 800325e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8003262:	e7e9      	b.n	8003238 <bme680_get_regs+0x1a>
			rslt = BME680_E_COM_FAIL;
 8003264:	f06f 0701 	mvn.w	r7, #1
 8003268:	e7ef      	b.n	800324a <bme680_get_regs+0x2c>

0800326a <get_calib_data>:
{
 800326a:	b530      	push	{r4, r5, lr}
 800326c:	b08d      	sub	sp, #52	; 0x34
 800326e:	4604      	mov	r4, r0
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
 8003270:	2500      	movs	r5, #0
 8003272:	9501      	str	r5, [sp, #4]
 8003274:	2225      	movs	r2, #37	; 0x25
 8003276:	4629      	mov	r1, r5
 8003278:	a802      	add	r0, sp, #8
 800327a:	f010 f8dd 	bl	8013438 <memset>
	uint8_t temp_var = 0; /* Temporary variable */
 800327e:	f88d 5003 	strb.w	r5, [sp, #3]
	rslt = null_ptr_check(dev);
 8003282:	4620      	mov	r0, r4
 8003284:	f7ff ff5c 	bl	8003140 <null_ptr_check>
	if (rslt == BME680_OK) {
 8003288:	4603      	mov	r3, r0
 800328a:	b110      	cbz	r0, 8003292 <get_calib_data+0x28>
}
 800328c:	4618      	mov	r0, r3
 800328e:	b00d      	add	sp, #52	; 0x34
 8003290:	bd30      	pop	{r4, r5, pc}
		rslt = bme680_get_regs(BME680_COEFF_ADDR1, coeff_array, BME680_COEFF_ADDR1_LEN, dev);
 8003292:	4623      	mov	r3, r4
 8003294:	2219      	movs	r2, #25
 8003296:	a901      	add	r1, sp, #4
 8003298:	2089      	movs	r0, #137	; 0x89
 800329a:	f7ff ffc0 	bl	800321e <bme680_get_regs>
		if (rslt == BME680_OK)
 800329e:	4603      	mov	r3, r0
 80032a0:	2800      	cmp	r0, #0
 80032a2:	d07c      	beq.n	800339e <get_calib_data+0x134>
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
 80032a4:	f89d 1026 	ldrb.w	r1, [sp, #38]	; 0x26
 80032a8:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 80032ac:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80032b0:	82e2      	strh	r2, [r4, #22]
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
 80032b2:	f89d 1006 	ldrb.w	r1, [sp, #6]
 80032b6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80032ba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80032be:	8322      	strh	r2, [r4, #24]
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
 80032c0:	f99d 2007 	ldrsb.w	r2, [sp, #7]
 80032c4:	76a2      	strb	r2, [r4, #26]
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
 80032c6:	f89d 100a 	ldrb.w	r1, [sp, #10]
 80032ca:	f89d 2009 	ldrb.w	r2, [sp, #9]
 80032ce:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80032d2:	83a2      	strh	r2, [r4, #28]
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
 80032d4:	f89d 100c 	ldrb.w	r1, [sp, #12]
 80032d8:	f89d 200b 	ldrb.w	r2, [sp, #11]
 80032dc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80032e0:	83e2      	strh	r2, [r4, #30]
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
 80032e2:	f99d 200d 	ldrsb.w	r2, [sp, #13]
 80032e6:	f884 2020 	strb.w	r2, [r4, #32]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
 80032ea:	f89d 1010 	ldrb.w	r1, [sp, #16]
 80032ee:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80032f2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80032f6:	8462      	strh	r2, [r4, #34]	; 0x22
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
 80032f8:	f89d 1012 	ldrb.w	r1, [sp, #18]
 80032fc:	f89d 2011 	ldrb.w	r2, [sp, #17]
 8003300:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003304:	84a2      	strh	r2, [r4, #36]	; 0x24
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
 8003306:	f99d 2014 	ldrsb.w	r2, [sp, #20]
 800330a:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
 800330e:	f99d 2013 	ldrsb.w	r2, [sp, #19]
 8003312:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
 8003316:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800331a:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800331e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003322:	8522      	strh	r2, [r4, #40]	; 0x28
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
 8003324:	f89d 101a 	ldrb.w	r1, [sp, #26]
 8003328:	f89d 2019 	ldrb.w	r2, [sp, #25]
 800332c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003330:	8562      	strh	r2, [r4, #42]	; 0x2a
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
 8003332:	f89d 201b 	ldrb.w	r2, [sp, #27]
 8003336:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 800333a:	f89d 001f 	ldrb.w	r0, [sp, #31]
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
 800333e:	f89d 201e 	ldrb.w	r2, [sp, #30]
 8003342:	f002 010f 	and.w	r1, r2, #15
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 8003346:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 800334a:	8121      	strh	r1, [r4, #8]
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 800334c:	f89d 101d 	ldrb.w	r1, [sp, #29]
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
 8003350:	0912      	lsrs	r2, r2, #4
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 8003352:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8003356:	8162      	strh	r2, [r4, #10]
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
 8003358:	f99d 2020 	ldrsb.w	r2, [sp, #32]
 800335c:	7322      	strb	r2, [r4, #12]
		dev->calib.par_h4 = (int8_t) coeff_array[BME680_H4_REG];
 800335e:	f99d 2021 	ldrsb.w	r2, [sp, #33]	; 0x21
 8003362:	7362      	strb	r2, [r4, #13]
		dev->calib.par_h5 = (int8_t) coeff_array[BME680_H5_REG];
 8003364:	f99d 2022 	ldrsb.w	r2, [sp, #34]	; 0x22
 8003368:	73a2      	strb	r2, [r4, #14]
		dev->calib.par_h6 = (uint8_t) coeff_array[BME680_H6_REG];
 800336a:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
 800336e:	73e2      	strb	r2, [r4, #15]
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];
 8003370:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
 8003374:	7422      	strb	r2, [r4, #16]
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
 8003376:	f99d 2029 	ldrsb.w	r2, [sp, #41]	; 0x29
 800337a:	7462      	strb	r2, [r4, #17]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
 800337c:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
 8003380:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 8003384:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003388:	8262      	strh	r2, [r4, #18]
		dev->calib.par_gh3 = (int8_t) coeff_array[BME680_GH3_REG];
 800338a:	f99d 202a 	ldrsb.w	r2, [sp, #42]	; 0x2a
 800338e:	7522      	strb	r2, [r4, #20]
		if (rslt == BME680_OK) {
 8003390:	b173      	cbz	r3, 80033b0 <get_calib_data+0x146>
		dev->calib.range_sw_err = ((int8_t) temp_var & (int8_t) BME680_RSERROR_MSK) / 16;
 8003392:	f99d 2003 	ldrsb.w	r2, [sp, #3]
 8003396:	1112      	asrs	r2, r2, #4
 8003398:	f884 2036 	strb.w	r2, [r4, #54]	; 0x36
 800339c:	e776      	b.n	800328c <get_calib_data+0x22>
			rslt = bme680_get_regs(BME680_COEFF_ADDR2, &coeff_array[BME680_COEFF_ADDR1_LEN]
 800339e:	4623      	mov	r3, r4
 80033a0:	2210      	movs	r2, #16
 80033a2:	f10d 011d 	add.w	r1, sp, #29
 80033a6:	20e1      	movs	r0, #225	; 0xe1
 80033a8:	f7ff ff39 	bl	800321e <bme680_get_regs>
 80033ac:	4603      	mov	r3, r0
 80033ae:	e779      	b.n	80032a4 <get_calib_data+0x3a>
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);
 80033b0:	4623      	mov	r3, r4
 80033b2:	2201      	movs	r2, #1
 80033b4:	f10d 0103 	add.w	r1, sp, #3
 80033b8:	2002      	movs	r0, #2
 80033ba:	f7ff ff30 	bl	800321e <bme680_get_regs>
			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
 80033be:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80033c2:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80033c6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			if (rslt == BME680_OK) {
 80033ca:	4603      	mov	r3, r0
 80033cc:	2800      	cmp	r0, #0
 80033ce:	d1e0      	bne.n	8003392 <get_calib_data+0x128>
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);
 80033d0:	4623      	mov	r3, r4
 80033d2:	2201      	movs	r2, #1
 80033d4:	f10d 0103 	add.w	r1, sp, #3
 80033d8:	f7ff ff21 	bl	800321e <bme680_get_regs>
				dev->calib.res_heat_val = (int8_t) temp_var;
 80033dc:	f99d 3003 	ldrsb.w	r3, [sp, #3]
 80033e0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
				if (rslt == BME680_OK)
 80033e4:	4603      	mov	r3, r0
 80033e6:	2800      	cmp	r0, #0
 80033e8:	d1d3      	bne.n	8003392 <get_calib_data+0x128>
					rslt = bme680_get_regs(BME680_ADDR_RANGE_SW_ERR_ADDR, &temp_var, 1, dev);
 80033ea:	4623      	mov	r3, r4
 80033ec:	2201      	movs	r2, #1
 80033ee:	f10d 0103 	add.w	r1, sp, #3
 80033f2:	2004      	movs	r0, #4
 80033f4:	f7ff ff13 	bl	800321e <bme680_get_regs>
 80033f8:	4603      	mov	r3, r0
 80033fa:	e7ca      	b.n	8003392 <get_calib_data+0x128>

080033fc <read_field_data>:
{
 80033fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003400:	b085      	sub	sp, #20
 8003402:	4607      	mov	r7, r0
 8003404:	4688      	mov	r8, r1
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
 8003406:	2300      	movs	r3, #0
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	9301      	str	r3, [sp, #4]
 800340c:	9302      	str	r3, [sp, #8]
 800340e:	f8cd 300b 	str.w	r3, [sp, #11]
	rslt = null_ptr_check(dev);
 8003412:	4608      	mov	r0, r1
 8003414:	f7ff fe94 	bl	8003140 <null_ptr_check>
 8003418:	4605      	mov	r5, r0
	uint8_t tries = 10;
 800341a:	240a      	movs	r4, #10
 800341c:	e01d      	b.n	800345a <read_field_data+0x5e>
				data->temperature = calc_temperature(adc_temp, dev);
 800341e:	4641      	mov	r1, r8
 8003420:	f7ff fc99 	bl	8002d56 <calc_temperature>
 8003424:	80b8      	strh	r0, [r7, #4]
				data->pressure = calc_pressure(adc_pres, dev);
 8003426:	4641      	mov	r1, r8
 8003428:	4630      	mov	r0, r6
 800342a:	f7ff fccf 	bl	8002dcc <calc_pressure>
 800342e:	60b8      	str	r0, [r7, #8]
				data->humidity = calc_humidity(adc_hum, dev);
 8003430:	4641      	mov	r1, r8
 8003432:	4650      	mov	r0, sl
 8003434:	f7ff fd2e 	bl	8002e94 <calc_humidity>
 8003438:	60f8      	str	r0, [r7, #12]
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 800343a:	4642      	mov	r2, r8
 800343c:	4659      	mov	r1, fp
 800343e:	4648      	mov	r0, r9
 8003440:	f7ff fd8c 	bl	8002f5c <calc_gas_resistance>
 8003444:	6138      	str	r0, [r7, #16]
	if (!tries)
 8003446:	2c00      	cmp	r4, #0
 8003448:	d053      	beq.n	80034f2 <read_field_data+0xf6>
}
 800344a:	4628      	mov	r0, r5
 800344c:	b005      	add	sp, #20
 800344e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		tries--;
 8003452:	3c01      	subs	r4, #1
	} while (tries);
 8003454:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8003458:	d0f5      	beq.n	8003446 <read_field_data+0x4a>
		if (rslt == BME680_OK) {
 800345a:	2d00      	cmp	r5, #0
 800345c:	d1f9      	bne.n	8003452 <read_field_data+0x56>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 800345e:	4643      	mov	r3, r8
 8003460:	220f      	movs	r2, #15
 8003462:	4669      	mov	r1, sp
 8003464:	201d      	movs	r0, #29
 8003466:	f7ff feda 	bl	800321e <bme680_get_regs>
 800346a:	4605      	mov	r5, r0
			data->status = buff[0] & BME680_NEW_DATA_MSK;
 800346c:	f89d 3000 	ldrb.w	r3, [sp]
 8003470:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8003474:	703a      	strb	r2, [r7, #0]
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 8003476:	f003 030f 	and.w	r3, r3, #15
 800347a:	707b      	strb	r3, [r7, #1]
			data->meas_index = buff[1];
 800347c:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8003480:	70bb      	strb	r3, [r7, #2]
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 8003482:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8003486:	f89d 6003 	ldrb.w	r6, [sp, #3]
 800348a:	0136      	lsls	r6, r6, #4
 800348c:	ea46 3603 	orr.w	r6, r6, r3, lsl #12
				| ((uint32_t) buff[4] / 16));
 8003490:	f89d 3004 	ldrb.w	r3, [sp, #4]
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 8003494:	ea46 1613 	orr.w	r6, r6, r3, lsr #4
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 8003498:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800349c:	f89d 0006 	ldrb.w	r0, [sp, #6]
 80034a0:	0100      	lsls	r0, r0, #4
 80034a2:	ea40 3003 	orr.w	r0, r0, r3, lsl #12
				| ((uint32_t) buff[7] / 16));
 80034a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 80034aa:	ea40 1013 	orr.w	r0, r0, r3, lsr #4
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 80034ae:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80034b2:	f89d a009 	ldrb.w	sl, [sp, #9]
 80034b6:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80034ba:	f89d 100d 	ldrb.w	r1, [sp, #13]
 80034be:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80034c2:	ea4f 1993 	mov.w	r9, r3, lsr #6
 80034c6:	ea49 0981 	orr.w	r9, r9, r1, lsl #2
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;
 80034ca:	f003 0b0f 	and.w	fp, r3, #15
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 80034ce:	f003 0320 	and.w	r3, r3, #32
 80034d2:	4313      	orrs	r3, r2
 80034d4:	b25b      	sxtb	r3, r3
 80034d6:	703b      	strb	r3, [r7, #0]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 80034d8:	f99d 200e 	ldrsb.w	r2, [sp, #14]
 80034dc:	f002 0210 	and.w	r2, r2, #16
 80034e0:	4313      	orrs	r3, r2
 80034e2:	703b      	strb	r3, [r7, #0]
			if (data->status & BME680_NEW_DATA_MSK) {
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	db9a      	blt.n	800341e <read_field_data+0x22>
			dev->delay_ms(BME680_POLL_PERIOD_MS);
 80034e8:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
 80034ec:	200a      	movs	r0, #10
 80034ee:	4798      	blx	r3
 80034f0:	e7af      	b.n	8003452 <read_field_data+0x56>
		rslt = BME680_W_NO_NEW_DATA;
 80034f2:	2502      	movs	r5, #2
 80034f4:	e7a9      	b.n	800344a <read_field_data+0x4e>

080034f6 <bme680_set_regs>:
{
 80034f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80034fa:	b08b      	sub	sp, #44	; 0x2c
 80034fc:	4606      	mov	r6, r0
 80034fe:	4688      	mov	r8, r1
 8003500:	4617      	mov	r7, r2
 8003502:	461d      	mov	r5, r3
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 8003504:	2100      	movs	r1, #0
 8003506:	9100      	str	r1, [sp, #0]
 8003508:	2224      	movs	r2, #36	; 0x24
 800350a:	a801      	add	r0, sp, #4
 800350c:	f00f ff94 	bl	8013438 <memset>
	rslt = null_ptr_check(dev);
 8003510:	4628      	mov	r0, r5
 8003512:	f7ff fe15 	bl	8003140 <null_ptr_check>
	if (rslt == BME680_OK) {
 8003516:	4681      	mov	r9, r0
 8003518:	2800      	cmp	r0, #0
 800351a:	d13e      	bne.n	800359a <bme680_set_regs+0xa4>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
 800351c:	1e7b      	subs	r3, r7, #1
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b12      	cmp	r3, #18
 8003522:	d801      	bhi.n	8003528 <bme680_set_regs+0x32>
			for (index = 0; index < len; index++) {
 8003524:	2400      	movs	r4, #0
 8003526:	e01b      	b.n	8003560 <bme680_set_regs+0x6a>
			rslt = BME680_E_INVALID_LENGTH;
 8003528:	f06f 0903 	mvn.w	r9, #3
 800352c:	e035      	b.n	800359a <bme680_set_regs+0xa4>
					rslt = set_mem_page(reg_addr[index], dev);
 800352e:	4629      	mov	r1, r5
 8003530:	5d30      	ldrb	r0, [r6, r4]
 8003532:	f7ff fe1a 	bl	800316a <set_mem_page>
 8003536:	4681      	mov	r9, r0
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 8003538:	5d33      	ldrb	r3, [r6, r4]
 800353a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800353e:	aa0a      	add	r2, sp, #40	; 0x28
 8003540:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 8003544:	f802 3c28 	strb.w	r3, [r2, #-40]
				tmp_buff[(2 * index) + 1] = reg_data[index];
 8003548:	ea4f 0c44 	mov.w	ip, r4, lsl #1
 800354c:	f818 3004 	ldrb.w	r3, [r8, r4]
 8003550:	f10c 0229 	add.w	r2, ip, #41	; 0x29
 8003554:	eb0d 0c02 	add.w	ip, sp, r2
 8003558:	f80c 3c28 	strb.w	r3, [ip, #-40]
			for (index = 0; index < len; index++) {
 800355c:	3401      	adds	r4, #1
 800355e:	b2a4      	uxth	r4, r4
 8003560:	b2bb      	uxth	r3, r7
 8003562:	42a3      	cmp	r3, r4
 8003564:	d909      	bls.n	800357a <bme680_set_regs+0x84>
				if (dev->intf == BME680_SPI_INTF) {
 8003566:	78ab      	ldrb	r3, [r5, #2]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0e0      	beq.n	800352e <bme680_set_regs+0x38>
					tmp_buff[(2 * index)] = reg_addr[index];
 800356c:	5d32      	ldrb	r2, [r6, r4]
 800356e:	ab0a      	add	r3, sp, #40	; 0x28
 8003570:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8003574:	f803 2c28 	strb.w	r2, [r3, #-40]
 8003578:	e7e6      	b.n	8003548 <bme680_set_regs+0x52>
			if (rslt == BME680_OK) {
 800357a:	f1b9 0f00 	cmp.w	r9, #0
 800357e:	d10c      	bne.n	800359a <bme680_set_regs+0xa4>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 8003580:	6cec      	ldr	r4, [r5, #76]	; 0x4c
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	3b01      	subs	r3, #1
 8003586:	b29b      	uxth	r3, r3
 8003588:	f10d 0201 	add.w	r2, sp, #1
 800358c:	f89d 1000 	ldrb.w	r1, [sp]
 8003590:	7868      	ldrb	r0, [r5, #1]
 8003592:	47a0      	blx	r4
 8003594:	f885 0054 	strb.w	r0, [r5, #84]	; 0x54
				if (dev->com_rslt != 0)
 8003598:	b918      	cbnz	r0, 80035a2 <bme680_set_regs+0xac>
}
 800359a:	4648      	mov	r0, r9
 800359c:	b00b      	add	sp, #44	; 0x2c
 800359e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					rslt = BME680_E_COM_FAIL;
 80035a2:	f06f 0901 	mvn.w	r9, #1
 80035a6:	e7f8      	b.n	800359a <bme680_set_regs+0xa4>

080035a8 <set_gas_config>:
{
 80035a8:	b510      	push	{r4, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	4604      	mov	r4, r0
	rslt = null_ptr_check(dev);
 80035ae:	f7ff fdc7 	bl	8003140 <null_ptr_check>
	if (rslt == BME680_OK) {
 80035b2:	b940      	cbnz	r0, 80035c6 <set_gas_config+0x1e>
		uint8_t reg_addr[2] = {0};
 80035b4:	f8ad 0000 	strh.w	r0, [sp]
		uint8_t reg_data[2] = {0};
 80035b8:	f8ad 0004 	strh.w	r0, [sp, #4]
		if (dev->power_mode == BME680_FORCED_MODE) {
 80035bc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d002      	beq.n	80035ca <set_gas_config+0x22>
			rslt = BME680_W_DEFINE_PWR_MODE;
 80035c4:	2001      	movs	r0, #1
}
 80035c6:	b002      	add	sp, #8
 80035c8:	bd10      	pop	{r4, pc}
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
 80035ca:	235a      	movs	r3, #90	; 0x5a
 80035cc:	f88d 3000 	strb.w	r3, [sp]
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
 80035d0:	4621      	mov	r1, r4
 80035d2:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
 80035d6:	f7ff fd2d 	bl	8003034 <calc_heater_res>
 80035da:	f88d 0004 	strb.w	r0, [sp, #4]
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
 80035de:	2364      	movs	r3, #100	; 0x64
 80035e0:	f88d 3001 	strb.w	r3, [sp, #1]
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 80035e4:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
 80035e8:	f7ff fd78 	bl	80030dc <calc_heater_dur>
 80035ec:	f88d 0005 	strb.w	r0, [sp, #5]
			dev->gas_sett.nb_conv = 0;
 80035f0:	2300      	movs	r3, #0
 80035f2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 80035f6:	4623      	mov	r3, r4
 80035f8:	2202      	movs	r2, #2
 80035fa:	a901      	add	r1, sp, #4
 80035fc:	4668      	mov	r0, sp
 80035fe:	f7ff ff7a 	bl	80034f6 <bme680_set_regs>
 8003602:	e7e0      	b.n	80035c6 <set_gas_config+0x1e>

08003604 <bme680_soft_reset>:
{
 8003604:	b530      	push	{r4, r5, lr}
 8003606:	b083      	sub	sp, #12
 8003608:	4604      	mov	r4, r0
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
 800360a:	23e0      	movs	r3, #224	; 0xe0
 800360c:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
 8003610:	23b6      	movs	r3, #182	; 0xb6
 8003612:	f88d 3006 	strb.w	r3, [sp, #6]
	rslt = null_ptr_check(dev);
 8003616:	f7ff fd93 	bl	8003140 <null_ptr_check>
	if (rslt == BME680_OK) {
 800361a:	4605      	mov	r5, r0
 800361c:	b910      	cbnz	r0, 8003624 <bme680_soft_reset+0x20>
		if (dev->intf == BME680_SPI_INTF)
 800361e:	78a3      	ldrb	r3, [r4, #2]
 8003620:	b11b      	cbz	r3, 800362a <bme680_soft_reset+0x26>
		if (rslt == BME680_OK) {
 8003622:	b13d      	cbz	r5, 8003634 <bme680_soft_reset+0x30>
}
 8003624:	4628      	mov	r0, r5
 8003626:	b003      	add	sp, #12
 8003628:	bd30      	pop	{r4, r5, pc}
			rslt = get_mem_page(dev);
 800362a:	4620      	mov	r0, r4
 800362c:	f7ff fdda 	bl	80031e4 <get_mem_page>
 8003630:	4605      	mov	r5, r0
 8003632:	e7f6      	b.n	8003622 <bme680_soft_reset+0x1e>
			rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8003634:	4623      	mov	r3, r4
 8003636:	2201      	movs	r2, #1
 8003638:	f10d 0106 	add.w	r1, sp, #6
 800363c:	f10d 0007 	add.w	r0, sp, #7
 8003640:	f7ff ff59 	bl	80034f6 <bme680_set_regs>
 8003644:	4605      	mov	r5, r0
			dev->delay_ms(BME680_RESET_PERIOD);
 8003646:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003648:	200a      	movs	r0, #10
 800364a:	4798      	blx	r3
			if (rslt == BME680_OK) {
 800364c:	2d00      	cmp	r5, #0
 800364e:	d1e9      	bne.n	8003624 <bme680_soft_reset+0x20>
				if (dev->intf == BME680_SPI_INTF)
 8003650:	78a3      	ldrb	r3, [r4, #2]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1e6      	bne.n	8003624 <bme680_soft_reset+0x20>
					rslt = get_mem_page(dev);
 8003656:	4620      	mov	r0, r4
 8003658:	f7ff fdc4 	bl	80031e4 <get_mem_page>
 800365c:	4605      	mov	r5, r0
 800365e:	e7e1      	b.n	8003624 <bme680_soft_reset+0x20>

08003660 <bme680_init>:
{
 8003660:	b510      	push	{r4, lr}
 8003662:	4604      	mov	r4, r0
	rslt = null_ptr_check(dev);
 8003664:	f7ff fd6c 	bl	8003140 <null_ptr_check>
	if (rslt == BME680_OK) {
 8003668:	b100      	cbz	r0, 800366c <bme680_init+0xc>
}
 800366a:	bd10      	pop	{r4, pc}
		rslt = bme680_soft_reset(dev);
 800366c:	4620      	mov	r0, r4
 800366e:	f7ff ffc9 	bl	8003604 <bme680_soft_reset>
		if (rslt == BME680_OK) {
 8003672:	2800      	cmp	r0, #0
 8003674:	d1f9      	bne.n	800366a <bme680_init+0xa>
			rslt = bme680_get_regs(BME680_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 8003676:	4623      	mov	r3, r4
 8003678:	2201      	movs	r2, #1
 800367a:	4621      	mov	r1, r4
 800367c:	20d0      	movs	r0, #208	; 0xd0
 800367e:	f7ff fdce 	bl	800321e <bme680_get_regs>
			if (rslt == BME680_OK) {
 8003682:	2800      	cmp	r0, #0
 8003684:	d1f1      	bne.n	800366a <bme680_init+0xa>
				if (dev->chip_id == BME680_CHIP_ID) {
 8003686:	7823      	ldrb	r3, [r4, #0]
 8003688:	2b61      	cmp	r3, #97	; 0x61
 800368a:	d103      	bne.n	8003694 <bme680_init+0x34>
					rslt = get_calib_data(dev);
 800368c:	4620      	mov	r0, r4
 800368e:	f7ff fdec 	bl	800326a <get_calib_data>
 8003692:	e7ea      	b.n	800366a <bme680_init+0xa>
					rslt = BME680_E_DEV_NOT_FOUND;
 8003694:	f06f 0002 	mvn.w	r0, #2
 8003698:	e7e7      	b.n	800366a <bme680_init+0xa>

0800369a <bme680_set_sensor_mode>:
{
 800369a:	b570      	push	{r4, r5, r6, lr}
 800369c:	b082      	sub	sp, #8
 800369e:	4604      	mov	r4, r0
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 80036a0:	2374      	movs	r3, #116	; 0x74
 80036a2:	f88d 3006 	strb.w	r3, [sp, #6]
	rslt = null_ptr_check(dev);
 80036a6:	f7ff fd4b 	bl	8003140 <null_ptr_check>
	if (rslt == BME680_OK) {
 80036aa:	4605      	mov	r5, r0
 80036ac:	bb80      	cbnz	r0, 8003710 <bme680_set_sensor_mode+0x76>
	uint8_t pow_mode = 0;
 80036ae:	2600      	movs	r6, #0
 80036b0:	e000      	b.n	80036b4 <bme680_set_sensor_mode+0x1a>
		} while (pow_mode != BME680_SLEEP_MODE);
 80036b2:	b1fe      	cbz	r6, 80036f4 <bme680_set_sensor_mode+0x5a>
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
 80036b4:	4623      	mov	r3, r4
 80036b6:	2201      	movs	r2, #1
 80036b8:	f10d 0107 	add.w	r1, sp, #7
 80036bc:	2074      	movs	r0, #116	; 0x74
 80036be:	f7ff fdae 	bl	800321e <bme680_get_regs>
			if (rslt == BME680_OK) {
 80036c2:	4605      	mov	r5, r0
 80036c4:	2800      	cmp	r0, #0
 80036c6:	d1f4      	bne.n	80036b2 <bme680_set_sensor_mode+0x18>
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
 80036c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
				if (pow_mode != BME680_SLEEP_MODE) {
 80036cc:	f013 0603 	ands.w	r6, r3, #3
 80036d0:	d0ef      	beq.n	80036b2 <bme680_set_sensor_mode+0x18>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
 80036d2:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80036d6:	f88d 3007 	strb.w	r3, [sp, #7]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80036da:	4623      	mov	r3, r4
 80036dc:	2201      	movs	r2, #1
 80036de:	f10d 0107 	add.w	r1, sp, #7
 80036e2:	f10d 0006 	add.w	r0, sp, #6
 80036e6:	f7ff ff06 	bl	80034f6 <bme680_set_regs>
 80036ea:	4605      	mov	r5, r0
					dev->delay_ms(BME680_POLL_PERIOD_MS);
 80036ec:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80036ee:	200a      	movs	r0, #10
 80036f0:	4798      	blx	r3
 80036f2:	e7de      	b.n	80036b2 <bme680_set_sensor_mode+0x18>
		if (dev->power_mode != BME680_SLEEP_MODE) {
 80036f4:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 80036f8:	b152      	cbz	r2, 8003710 <bme680_set_sensor_mode+0x76>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
 80036fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80036fe:	f023 0303 	bic.w	r3, r3, #3
 8003702:	b25b      	sxtb	r3, r3
 8003704:	f002 0203 	and.w	r2, r2, #3
 8003708:	4313      	orrs	r3, r2
 800370a:	f88d 3007 	strb.w	r3, [sp, #7]
			if (rslt == BME680_OK)
 800370e:	b115      	cbz	r5, 8003716 <bme680_set_sensor_mode+0x7c>
}
 8003710:	4628      	mov	r0, r5
 8003712:	b002      	add	sp, #8
 8003714:	bd70      	pop	{r4, r5, r6, pc}
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8003716:	4623      	mov	r3, r4
 8003718:	2201      	movs	r2, #1
 800371a:	f10d 0107 	add.w	r1, sp, #7
 800371e:	f10d 0006 	add.w	r0, sp, #6
 8003722:	f7ff fee8 	bl	80034f6 <bme680_set_regs>
 8003726:	4605      	mov	r5, r0
 8003728:	e7f2      	b.n	8003710 <bme680_set_sensor_mode+0x76>

0800372a <bme680_set_sensor_settings>:
{
 800372a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800372c:	b085      	sub	sp, #20
 800372e:	4606      	mov	r6, r0
 8003730:	460c      	mov	r4, r1
	uint8_t data = 0;
 8003732:	2300      	movs	r3, #0
 8003734:	f88d 300f 	strb.w	r3, [sp, #15]
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 8003738:	9302      	str	r3, [sp, #8]
 800373a:	f8ad 300c 	strh.w	r3, [sp, #12]
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	f8ad 3004 	strh.w	r3, [sp, #4]
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
 8003744:	f891 7044 	ldrb.w	r7, [r1, #68]	; 0x44
	rslt = null_ptr_check(dev);
 8003748:	4608      	mov	r0, r1
 800374a:	f7ff fcf9 	bl	8003140 <null_ptr_check>
	if (rslt == BME680_OK) {
 800374e:	4603      	mov	r3, r0
 8003750:	b9e8      	cbnz	r0, 800378e <bme680_set_sensor_settings+0x64>
		if (desired_settings & BME680_GAS_MEAS_SEL)
 8003752:	f016 0f08 	tst.w	r6, #8
 8003756:	d11d      	bne.n	8003794 <bme680_set_sensor_settings+0x6a>
		dev->power_mode = BME680_SLEEP_MODE;
 8003758:	2200      	movs	r2, #0
 800375a:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
		if (rslt == BME680_OK)
 800375e:	b1f3      	cbz	r3, 800379e <bme680_set_sensor_settings+0x74>
		if (desired_settings & BME680_FILTER_SEL) {
 8003760:	f016 0f10 	tst.w	r6, #16
 8003764:	d120      	bne.n	80037a8 <bme680_set_sensor_settings+0x7e>
	uint8_t count = 0;
 8003766:	2500      	movs	r5, #0
		if (desired_settings & BME680_HCNTRL_SEL) {
 8003768:	f016 0f20 	tst.w	r6, #32
 800376c:	d143      	bne.n	80037f6 <bme680_set_sensor_settings+0xcc>
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
 800376e:	f016 0f03 	tst.w	r6, #3
 8003772:	d16a      	bne.n	800384a <bme680_set_sensor_settings+0x120>
		if (desired_settings & BME680_OSH_SEL) {
 8003774:	f016 0f04 	tst.w	r6, #4
 8003778:	f040 80a3 	bne.w	80038c2 <bme680_set_sensor_settings+0x198>
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
 800377c:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 8003780:	f040 80c9 	bne.w	8003916 <bme680_set_sensor_settings+0x1ec>
		if (rslt == BME680_OK)
 8003784:	2b00      	cmp	r3, #0
 8003786:	f000 810e 	beq.w	80039a6 <bme680_set_sensor_settings+0x27c>
		dev->power_mode = intended_power_mode;
 800378a:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
}
 800378e:	4618      	mov	r0, r3
 8003790:	b005      	add	sp, #20
 8003792:	bdf0      	pop	{r4, r5, r6, r7, pc}
			rslt = set_gas_config(dev);
 8003794:	4620      	mov	r0, r4
 8003796:	f7ff ff07 	bl	80035a8 <set_gas_config>
 800379a:	4603      	mov	r3, r0
 800379c:	e7dc      	b.n	8003758 <bme680_set_sensor_settings+0x2e>
			rslt = bme680_set_sensor_mode(dev);
 800379e:	4620      	mov	r0, r4
 80037a0:	f7ff ff7b 	bl	800369a <bme680_set_sensor_mode>
 80037a4:	4603      	mov	r3, r0
 80037a6:	e7db      	b.n	8003760 <bme680_set_sensor_settings+0x36>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
 80037a8:	4623      	mov	r3, r4
 80037aa:	2207      	movs	r2, #7
 80037ac:	2100      	movs	r1, #0
 80037ae:	f104 003b 	add.w	r0, r4, #59	; 0x3b
 80037b2:	f7ff fca5 	bl	8003100 <boundary_check>
			if (rslt == BME680_OK)
 80037b6:	4603      	mov	r3, r0
 80037b8:	b1a0      	cbz	r0, 80037e4 <bme680_set_sensor_settings+0xba>
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 80037ba:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80037be:	f022 021c 	bic.w	r2, r2, #28
 80037c2:	b252      	sxtb	r2, r2
 80037c4:	f894 103b 	ldrb.w	r1, [r4, #59]	; 0x3b
 80037c8:	0089      	lsls	r1, r1, #2
 80037ca:	f001 011c 	and.w	r1, r1, #28
 80037ce:	430a      	orrs	r2, r1
 80037d0:	b2d2      	uxtb	r2, r2
 80037d2:	f88d 200f 	strb.w	r2, [sp, #15]
			reg_array[count] = reg_addr; /* Append configuration */
 80037d6:	2175      	movs	r1, #117	; 0x75
 80037d8:	f88d 1008 	strb.w	r1, [sp, #8]
			data_array[count] = data;
 80037dc:	f88d 2000 	strb.w	r2, [sp]
			count++;
 80037e0:	2501      	movs	r5, #1
 80037e2:	e7c1      	b.n	8003768 <bme680_set_sensor_settings+0x3e>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80037e4:	4623      	mov	r3, r4
 80037e6:	2201      	movs	r2, #1
 80037e8:	f10d 010f 	add.w	r1, sp, #15
 80037ec:	2075      	movs	r0, #117	; 0x75
 80037ee:	f7ff fd16 	bl	800321e <bme680_get_regs>
 80037f2:	4603      	mov	r3, r0
 80037f4:	e7e1      	b.n	80037ba <bme680_set_sensor_settings+0x90>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
 80037f6:	4623      	mov	r3, r4
 80037f8:	2208      	movs	r2, #8
 80037fa:	2100      	movs	r1, #0
 80037fc:	f104 003d 	add.w	r0, r4, #61	; 0x3d
 8003800:	f7ff fc7e 	bl	8003100 <boundary_check>
			if (rslt == BME680_OK)
 8003804:	4603      	mov	r3, r0
 8003806:	b1b8      	cbz	r0, 8003838 <bme680_set_sensor_settings+0x10e>
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 8003808:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800380c:	f022 0208 	bic.w	r2, r2, #8
 8003810:	b252      	sxtb	r2, r2
 8003812:	f994 103d 	ldrsb.w	r1, [r4, #61]	; 0x3d
 8003816:	f001 0108 	and.w	r1, r1, #8
 800381a:	430a      	orrs	r2, r1
 800381c:	b2d2      	uxtb	r2, r2
 800381e:	f88d 200f 	strb.w	r2, [sp, #15]
			reg_array[count] = reg_addr; /* Append configuration */
 8003822:	f105 0110 	add.w	r1, r5, #16
 8003826:	4469      	add	r1, sp
 8003828:	2070      	movs	r0, #112	; 0x70
 800382a:	f801 0c08 	strb.w	r0, [r1, #-8]
			data_array[count] = data;
 800382e:	f801 2c10 	strb.w	r2, [r1, #-16]
			count++;
 8003832:	3501      	adds	r5, #1
 8003834:	b2ed      	uxtb	r5, r5
 8003836:	e79a      	b.n	800376e <bme680_set_sensor_settings+0x44>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8003838:	4623      	mov	r3, r4
 800383a:	2201      	movs	r2, #1
 800383c:	f10d 010f 	add.w	r1, sp, #15
 8003840:	2070      	movs	r0, #112	; 0x70
 8003842:	f7ff fcec 	bl	800321e <bme680_get_regs>
 8003846:	4603      	mov	r3, r0
 8003848:	e7de      	b.n	8003808 <bme680_set_sensor_settings+0xde>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
 800384a:	4623      	mov	r3, r4
 800384c:	2205      	movs	r2, #5
 800384e:	2100      	movs	r1, #0
 8003850:	f104 0039 	add.w	r0, r4, #57	; 0x39
 8003854:	f7ff fc54 	bl	8003100 <boundary_check>
			if (rslt == BME680_OK)
 8003858:	4603      	mov	r3, r0
 800385a:	b348      	cbz	r0, 80038b0 <bme680_set_sensor_settings+0x186>
			if (desired_settings & BME680_OST_SEL)
 800385c:	f016 0f01 	tst.w	r6, #1
 8003860:	d009      	beq.n	8003876 <bme680_set_sensor_settings+0x14c>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
 8003862:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8003866:	f002 021f 	and.w	r2, r2, #31
 800386a:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 800386e:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
 8003872:	f88d 200f 	strb.w	r2, [sp, #15]
			if (desired_settings & BME680_OSP_SEL)
 8003876:	f016 0f02 	tst.w	r6, #2
 800387a:	d00c      	beq.n	8003896 <bme680_set_sensor_settings+0x16c>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
 800387c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8003880:	f022 021c 	bic.w	r2, r2, #28
 8003884:	b252      	sxtb	r2, r2
 8003886:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
 800388a:	0089      	lsls	r1, r1, #2
 800388c:	f001 011c 	and.w	r1, r1, #28
 8003890:	430a      	orrs	r2, r1
 8003892:	f88d 200f 	strb.w	r2, [sp, #15]
			reg_array[count] = reg_addr;
 8003896:	f105 0210 	add.w	r2, r5, #16
 800389a:	446a      	add	r2, sp
 800389c:	2174      	movs	r1, #116	; 0x74
 800389e:	f802 1c08 	strb.w	r1, [r2, #-8]
			data_array[count] = data;
 80038a2:	f89d 100f 	ldrb.w	r1, [sp, #15]
 80038a6:	f802 1c10 	strb.w	r1, [r2, #-16]
			count++;
 80038aa:	3501      	adds	r5, #1
 80038ac:	b2ed      	uxtb	r5, r5
 80038ae:	e761      	b.n	8003774 <bme680_set_sensor_settings+0x4a>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80038b0:	4623      	mov	r3, r4
 80038b2:	2201      	movs	r2, #1
 80038b4:	f10d 010f 	add.w	r1, sp, #15
 80038b8:	2074      	movs	r0, #116	; 0x74
 80038ba:	f7ff fcb0 	bl	800321e <bme680_get_regs>
 80038be:	4603      	mov	r3, r0
 80038c0:	e7cc      	b.n	800385c <bme680_set_sensor_settings+0x132>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
 80038c2:	4623      	mov	r3, r4
 80038c4:	2205      	movs	r2, #5
 80038c6:	2100      	movs	r1, #0
 80038c8:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80038cc:	f7ff fc18 	bl	8003100 <boundary_check>
			if (rslt == BME680_OK)
 80038d0:	4603      	mov	r3, r0
 80038d2:	b1b8      	cbz	r0, 8003904 <bme680_set_sensor_settings+0x1da>
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 80038d4:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80038d8:	f022 0207 	bic.w	r2, r2, #7
 80038dc:	b252      	sxtb	r2, r2
 80038de:	f994 1038 	ldrsb.w	r1, [r4, #56]	; 0x38
 80038e2:	f001 0107 	and.w	r1, r1, #7
 80038e6:	430a      	orrs	r2, r1
 80038e8:	b2d2      	uxtb	r2, r2
 80038ea:	f88d 200f 	strb.w	r2, [sp, #15]
			reg_array[count] = reg_addr; /* Append configuration */
 80038ee:	f105 0110 	add.w	r1, r5, #16
 80038f2:	4469      	add	r1, sp
 80038f4:	2072      	movs	r0, #114	; 0x72
 80038f6:	f801 0c08 	strb.w	r0, [r1, #-8]
			data_array[count] = data;
 80038fa:	f801 2c10 	strb.w	r2, [r1, #-16]
			count++;
 80038fe:	3501      	adds	r5, #1
 8003900:	b2ed      	uxtb	r5, r5
 8003902:	e73b      	b.n	800377c <bme680_set_sensor_settings+0x52>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8003904:	4623      	mov	r3, r4
 8003906:	2201      	movs	r2, #1
 8003908:	f10d 010f 	add.w	r1, sp, #15
 800390c:	2072      	movs	r0, #114	; 0x72
 800390e:	f7ff fc86 	bl	800321e <bme680_get_regs>
 8003912:	4603      	mov	r3, r0
 8003914:	e7de      	b.n	80038d4 <bme680_set_sensor_settings+0x1aa>
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
 8003916:	4623      	mov	r3, r4
 8003918:	2201      	movs	r2, #1
 800391a:	2100      	movs	r1, #0
 800391c:	f104 003e 	add.w	r0, r4, #62	; 0x3e
 8003920:	f7ff fbee 	bl	8003100 <boundary_check>
			if (rslt == BME680_OK) {
 8003924:	4603      	mov	r3, r0
 8003926:	b360      	cbz	r0, 8003982 <bme680_set_sensor_settings+0x258>
			if (rslt == BME680_OK)
 8003928:	b3a3      	cbz	r3, 8003994 <bme680_set_sensor_settings+0x26a>
			if (desired_settings & BME680_RUN_GAS_SEL)
 800392a:	f016 0f40 	tst.w	r6, #64	; 0x40
 800392e:	d00c      	beq.n	800394a <bme680_set_sensor_settings+0x220>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
 8003930:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8003934:	f022 0210 	bic.w	r2, r2, #16
 8003938:	b252      	sxtb	r2, r2
 800393a:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 800393e:	0109      	lsls	r1, r1, #4
 8003940:	f001 0110 	and.w	r1, r1, #16
 8003944:	430a      	orrs	r2, r1
 8003946:	f88d 200f 	strb.w	r2, [sp, #15]
			if (desired_settings & BME680_NBCONV_SEL)
 800394a:	f016 0f80 	tst.w	r6, #128	; 0x80
 800394e:	d00b      	beq.n	8003968 <bme680_set_sensor_settings+0x23e>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
 8003950:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8003954:	f022 020f 	bic.w	r2, r2, #15
 8003958:	b252      	sxtb	r2, r2
 800395a:	f994 103c 	ldrsb.w	r1, [r4, #60]	; 0x3c
 800395e:	f001 010f 	and.w	r1, r1, #15
 8003962:	430a      	orrs	r2, r1
 8003964:	f88d 200f 	strb.w	r2, [sp, #15]
			reg_array[count] = reg_addr; /* Append configuration */
 8003968:	f105 0210 	add.w	r2, r5, #16
 800396c:	446a      	add	r2, sp
 800396e:	2171      	movs	r1, #113	; 0x71
 8003970:	f802 1c08 	strb.w	r1, [r2, #-8]
			data_array[count] = data;
 8003974:	f89d 100f 	ldrb.w	r1, [sp, #15]
 8003978:	f802 1c10 	strb.w	r1, [r2, #-16]
			count++;
 800397c:	3501      	adds	r5, #1
 800397e:	b2ed      	uxtb	r5, r5
 8003980:	e700      	b.n	8003784 <bme680_set_sensor_settings+0x5a>
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
 8003982:	4623      	mov	r3, r4
 8003984:	220a      	movs	r2, #10
 8003986:	2100      	movs	r1, #0
 8003988:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 800398c:	f7ff fbb8 	bl	8003100 <boundary_check>
 8003990:	4603      	mov	r3, r0
 8003992:	e7c9      	b.n	8003928 <bme680_set_sensor_settings+0x1fe>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8003994:	4623      	mov	r3, r4
 8003996:	2201      	movs	r2, #1
 8003998:	f10d 010f 	add.w	r1, sp, #15
 800399c:	2071      	movs	r0, #113	; 0x71
 800399e:	f7ff fc3e 	bl	800321e <bme680_get_regs>
 80039a2:	4603      	mov	r3, r0
 80039a4:	e7c1      	b.n	800392a <bme680_set_sensor_settings+0x200>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
 80039a6:	4623      	mov	r3, r4
 80039a8:	462a      	mov	r2, r5
 80039aa:	4669      	mov	r1, sp
 80039ac:	a802      	add	r0, sp, #8
 80039ae:	f7ff fda2 	bl	80034f6 <bme680_set_regs>
 80039b2:	4603      	mov	r3, r0
 80039b4:	e6e9      	b.n	800378a <bme680_set_sensor_settings+0x60>
	...

080039b8 <bme680_get_profile_dur>:
{
 80039b8:	b082      	sub	sp, #8
 80039ba:	4684      	mov	ip, r0
 80039bc:	460a      	mov	r2, r1
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80039be:	4b19      	ldr	r3, [pc, #100]	; (8003a24 <bme680_get_profile_dur+0x6c>)
 80039c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80039c4:	9000      	str	r0, [sp, #0]
 80039c6:	f8ad 1004 	strh.w	r1, [sp, #4]
	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 80039ca:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
 80039ce:	3308      	adds	r3, #8
 80039d0:	446b      	add	r3, sp
 80039d2:	f813 3c08 	ldrb.w	r3, [r3, #-8]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 80039d6:	f892 003a 	ldrb.w	r0, [r2, #58]	; 0x3a
 80039da:	f100 0108 	add.w	r1, r0, #8
 80039de:	eb0d 0001 	add.w	r0, sp, r1
 80039e2:	f810 1c08 	ldrb.w	r1, [r0, #-8]
 80039e6:	4419      	add	r1, r3
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 80039e8:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 80039ec:	3308      	adds	r3, #8
 80039ee:	446b      	add	r3, sp
 80039f0:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80039f4:	4419      	add	r1, r3
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 80039f6:	f240 70ab 	movw	r0, #1963	; 0x7ab
 80039fa:	f241 23b9 	movw	r3, #4793	; 0x12b9
 80039fe:	fb00 3301 	mla	r3, r0, r1, r3
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 8003a02:	4909      	ldr	r1, [pc, #36]	; (8003a28 <bme680_get_profile_dur+0x70>)
 8003a04:	fba1 1303 	umull	r1, r3, r1, r3
 8003a08:	099b      	lsrs	r3, r3, #6
	*duration = (uint16_t) tph_dur;
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	f8ac 3000 	strh.w	r3, [ip]
	if (dev->gas_sett.run_gas) {
 8003a10:	f892 103e 	ldrb.w	r1, [r2, #62]	; 0x3e
 8003a14:	b121      	cbz	r1, 8003a20 <bme680_get_profile_dur+0x68>
		*duration += dev->gas_sett.heatr_dur;
 8003a16:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 8003a1a:	4413      	add	r3, r2
 8003a1c:	f8ac 3000 	strh.w	r3, [ip]
}
 8003a20:	b002      	add	sp, #8
 8003a22:	4770      	bx	lr
 8003a24:	08013ea0 	.word	0x08013ea0
 8003a28:	10624dd3 	.word	0x10624dd3

08003a2c <bme680_get_sensor_data>:
{
 8003a2c:	b538      	push	{r3, r4, r5, lr}
 8003a2e:	4605      	mov	r5, r0
 8003a30:	460c      	mov	r4, r1
	rslt = null_ptr_check(dev);
 8003a32:	4608      	mov	r0, r1
 8003a34:	f7ff fb84 	bl	8003140 <null_ptr_check>
	if (rslt == BME680_OK) {
 8003a38:	b100      	cbz	r0, 8003a3c <bme680_get_sensor_data+0x10>
}
 8003a3a:	bd38      	pop	{r3, r4, r5, pc}
		rslt = read_field_data(data, dev);
 8003a3c:	4621      	mov	r1, r4
 8003a3e:	4628      	mov	r0, r5
 8003a40:	f7ff fcdc 	bl	80033fc <read_field_data>
		if (rslt == BME680_OK) {
 8003a44:	2800      	cmp	r0, #0
 8003a46:	d1f8      	bne.n	8003a3a <bme680_get_sensor_data+0xe>
			if (data->status & BME680_NEW_DATA_MSK)
 8003a48:	f995 3000 	ldrsb.w	r3, [r5]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	db03      	blt.n	8003a58 <bme680_get_sensor_data+0x2c>
				dev->new_fields = 0;
 8003a50:	2300      	movs	r3, #0
 8003a52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003a56:	e7f0      	b.n	8003a3a <bme680_get_sensor_data+0xe>
				dev->new_fields = 1;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003a5e:	e7ec      	b.n	8003a3a <bme680_get_sensor_data+0xe>

08003a60 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8003a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a64:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8003a66:	2400      	movs	r4, #0
 8003a68:	9401      	str	r4, [sp, #4]
 8003a6a:	9402      	str	r4, [sp, #8]
 8003a6c:	9403      	str	r4, [sp, #12]
 8003a6e:	9404      	str	r4, [sp, #16]
 8003a70:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003a72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a78:	f042 0204 	orr.w	r2, r2, #4
 8003a7c:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a80:	f003 0304 	and.w	r3, r3, #4
 8003a84:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8003a86:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8003a88:	2710      	movs	r7, #16
 8003a8a:	9701      	str	r7, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a90:	2303      	movs	r3, #3
 8003a92:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8003a94:	4d12      	ldr	r5, [pc, #72]	; (8003ae0 <BSP_RADIO_Init+0x80>)
 8003a96:	a901      	add	r1, sp, #4
 8003a98:	4628      	mov	r0, r5
 8003a9a:	f001 fa21 	bl	8004ee0 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8003a9e:	f04f 0820 	mov.w	r8, #32
 8003aa2:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8003aa6:	a901      	add	r1, sp, #4
 8003aa8:	4628      	mov	r0, r5
 8003aaa:	f001 fa19 	bl	8004ee0 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8003aae:	2608      	movs	r6, #8
 8003ab0:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8003ab2:	a901      	add	r1, sp, #4
 8003ab4:	4628      	mov	r0, r5
 8003ab6:	f001 fa13 	bl	8004ee0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003aba:	4622      	mov	r2, r4
 8003abc:	4641      	mov	r1, r8
 8003abe:	4628      	mov	r0, r5
 8003ac0:	f001 fb5e 	bl	8005180 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8003ac4:	4622      	mov	r2, r4
 8003ac6:	4639      	mov	r1, r7
 8003ac8:	4628      	mov	r0, r5
 8003aca:	f001 fb59 	bl	8005180 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8003ace:	4622      	mov	r2, r4
 8003ad0:	4631      	mov	r1, r6
 8003ad2:	4628      	mov	r0, r5
 8003ad4:	f001 fb54 	bl	8005180 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 8003ad8:	4620      	mov	r0, r4
 8003ada:	b006      	add	sp, #24
 8003adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ae0:	48000800 	.word	0x48000800

08003ae4 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8003ae4:	b510      	push	{r4, lr}
  switch (Config)
 8003ae6:	2803      	cmp	r0, #3
 8003ae8:	d813      	bhi.n	8003b12 <BSP_RADIO_ConfigRFSwitch+0x2e>
 8003aea:	e8df f000 	tbb	[pc, r0]
 8003aee:	1402      	.short	0x1402
 8003af0:	3625      	.short	0x3625
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8003af2:	4c22      	ldr	r4, [pc, #136]	; (8003b7c <BSP_RADIO_ConfigRFSwitch+0x98>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	2108      	movs	r1, #8
 8003af8:	4620      	mov	r0, r4
 8003afa:	f001 fb41 	bl	8005180 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8003afe:	2200      	movs	r2, #0
 8003b00:	2110      	movs	r1, #16
 8003b02:	4620      	mov	r0, r4
 8003b04:	f001 fb3c 	bl	8005180 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8003b08:	2200      	movs	r2, #0
 8003b0a:	2120      	movs	r1, #32
 8003b0c:	4620      	mov	r0, r4
 8003b0e:	f001 fb37 	bl	8005180 <HAL_GPIO_WritePin>
    default:
      break;    
  }  

  return BSP_ERROR_NONE;
}
 8003b12:	2000      	movs	r0, #0
 8003b14:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8003b16:	4c19      	ldr	r4, [pc, #100]	; (8003b7c <BSP_RADIO_ConfigRFSwitch+0x98>)
 8003b18:	2201      	movs	r2, #1
 8003b1a:	2108      	movs	r1, #8
 8003b1c:	4620      	mov	r0, r4
 8003b1e:	f001 fb2f 	bl	8005180 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003b22:	2201      	movs	r2, #1
 8003b24:	2110      	movs	r1, #16
 8003b26:	4620      	mov	r0, r4
 8003b28:	f001 fb2a 	bl	8005180 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	2120      	movs	r1, #32
 8003b30:	4620      	mov	r0, r4
 8003b32:	f001 fb25 	bl	8005180 <HAL_GPIO_WritePin>
      break;
 8003b36:	e7ec      	b.n	8003b12 <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8003b38:	4c10      	ldr	r4, [pc, #64]	; (8003b7c <BSP_RADIO_ConfigRFSwitch+0x98>)
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	2108      	movs	r1, #8
 8003b3e:	4620      	mov	r0, r4
 8003b40:	f001 fb1e 	bl	8005180 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003b44:	2201      	movs	r2, #1
 8003b46:	2110      	movs	r1, #16
 8003b48:	4620      	mov	r0, r4
 8003b4a:	f001 fb19 	bl	8005180 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8003b4e:	2201      	movs	r2, #1
 8003b50:	2120      	movs	r1, #32
 8003b52:	4620      	mov	r0, r4
 8003b54:	f001 fb14 	bl	8005180 <HAL_GPIO_WritePin>
      break;
 8003b58:	e7db      	b.n	8003b12 <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8003b5a:	4c08      	ldr	r4, [pc, #32]	; (8003b7c <BSP_RADIO_ConfigRFSwitch+0x98>)
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	2108      	movs	r1, #8
 8003b60:	4620      	mov	r0, r4
 8003b62:	f001 fb0d 	bl	8005180 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8003b66:	2200      	movs	r2, #0
 8003b68:	2110      	movs	r1, #16
 8003b6a:	4620      	mov	r0, r4
 8003b6c:	f001 fb08 	bl	8005180 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8003b70:	2201      	movs	r2, #1
 8003b72:	2120      	movs	r1, #32
 8003b74:	4620      	mov	r0, r4
 8003b76:	f001 fb03 	bl	8005180 <HAL_GPIO_WritePin>
      break;
 8003b7a:	e7ca      	b.n	8003b12 <BSP_RADIO_ConfigRFSwitch+0x2e>
 8003b7c:	48000800 	.word	0x48000800

08003b80 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
  return RADIO_CONF_RFO_LP_HP;
}
 8003b80:	2000      	movs	r0, #0
 8003b82:	4770      	bx	lr

08003b84 <BSP_RADIO_IsTCXO>:
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
  return RADIO_CONF_TCXO_SUPPORTED;
}
 8003b84:	2001      	movs	r0, #1
 8003b86:	4770      	bx	lr

08003b88 <BSP_RADIO_IsDCDC>:
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
  return RADIO_CONF_DCDC_SUPPORTED;
}
 8003b88:	2001      	movs	r0, #1
 8003b8a:	4770      	bx	lr

08003b8c <BSP_RADIO_GetRFOMaxPowerConfig>:
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8003b8c:	b908      	cbnz	r0, 8003b92 <BSP_RADIO_GetRFOMaxPowerConfig+0x6>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8003b8e:	200f      	movs	r0, #15
 8003b90:	4770      	bx	lr
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8003b92:	2016      	movs	r0, #22
  }

  return ret;
}
 8003b94:	4770      	bx	lr

08003b96 <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8003b96:	4770      	bx	lr

08003b98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b98:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b9a:	2003      	movs	r0, #3
 8003b9c:	f000 fd2e 	bl	80045fc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003ba0:	f002 f864 	bl	8005c6c <HAL_RCC_GetHCLKFreq>
 8003ba4:	4b06      	ldr	r3, [pc, #24]	; (8003bc0 <HAL_Init+0x28>)
 8003ba6:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ba8:	200f      	movs	r0, #15
 8003baa:	f7fd ff17 	bl	80019dc <HAL_InitTick>
 8003bae:	b110      	cbz	r0, 8003bb6 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8003bb0:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8003bb2:	4620      	mov	r0, r4
 8003bb4:	bd10      	pop	{r4, pc}
 8003bb6:	4604      	mov	r4, r0
    HAL_MspInit();
 8003bb8:	f7fd fdc8 	bl	800174c <HAL_MspInit>
 8003bbc:	e7f9      	b.n	8003bb2 <HAL_Init+0x1a>
 8003bbe:	bf00      	nop
 8003bc0:	20000070 	.word	0x20000070

08003bc4 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003bc4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8003bc8:	6913      	ldr	r3, [r2, #16]
 8003bca:	f023 0302 	bic.w	r3, r3, #2
 8003bce:	6113      	str	r3, [r2, #16]
}
 8003bd0:	4770      	bx	lr

08003bd2 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003bd2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8003bd6:	6913      	ldr	r3, [r2, #16]
 8003bd8:	f043 0302 	orr.w	r3, r3, #2
 8003bdc:	6113      	str	r3, [r2, #16]
}
 8003bde:	4770      	bx	lr

08003be0 <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return (READ_REG(*((uint32_t *)UID_BASE)));
}
 8003be0:	4b01      	ldr	r3, [pc, #4]	; (8003be8 <HAL_GetUIDw0+0x8>)
 8003be2:	f8d3 0590 	ldr.w	r0, [r3, #1424]	; 0x590
 8003be6:	4770      	bx	lr
 8003be8:	1fff7000 	.word	0x1fff7000

08003bec <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 8003bec:	4b01      	ldr	r3, [pc, #4]	; (8003bf4 <HAL_GetUIDw1+0x8>)
 8003bee:	f8d3 0594 	ldr.w	r0, [r3, #1428]	; 0x594
 8003bf2:	4770      	bx	lr
 8003bf4:	1fff7000 	.word	0x1fff7000

08003bf8 <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 8003bf8:	4b01      	ldr	r3, [pc, #4]	; (8003c00 <HAL_GetUIDw2+0x8>)
 8003bfa:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8003bfe:	4770      	bx	lr
 8003c00:	1fff7000 	.word	0x1fff7000

08003c04 <HAL_DBGMCU_EnableDBGSleepMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003c04:	4a02      	ldr	r2, [pc, #8]	; (8003c10 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 8003c06:	6853      	ldr	r3, [r2, #4]
 8003c08:	f043 0301 	orr.w	r3, r3, #1
 8003c0c:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  LL_DBGMCU_EnableDBGSleepMode();
}
 8003c0e:	4770      	bx	lr
 8003c10:	e0042000 	.word	0xe0042000

08003c14 <HAL_DBGMCU_EnableDBGStopMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003c14:	4a02      	ldr	r2, [pc, #8]	; (8003c20 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 8003c16:	6853      	ldr	r3, [r2, #4]
 8003c18:	f043 0302 	orr.w	r3, r3, #2
 8003c1c:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  LL_DBGMCU_EnableDBGStopMode();
}
 8003c1e:	4770      	bx	lr
 8003c20:	e0042000 	.word	0xe0042000

08003c24 <HAL_DBGMCU_EnableDBGStandbyMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8003c24:	4a02      	ldr	r2, [pc, #8]	; (8003c30 <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 8003c26:	6853      	ldr	r3, [r2, #4]
 8003c28:	f043 0304 	orr.w	r3, r3, #4
 8003c2c:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  LL_DBGMCU_EnableDBGStandbyMode();
}
 8003c2e:	4770      	bx	lr
 8003c30:	e0042000 	.word	0xe0042000

08003c34 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003c34:	b570      	push	{r4, r5, r6, lr}
 8003c36:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8003c3c:	2800      	cmp	r0, #0
 8003c3e:	f000 811b 	beq.w	8003e78 <HAL_ADC_Init+0x244>
 8003c42:	4604      	mov	r4, r0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003c44:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003c46:	b1bb      	cbz	r3, 8003c78 <HAL_ADC_Init+0x44>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c48:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003c4a:	6893      	ldr	r3, [r2, #8]
 8003c4c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003c50:	d11f      	bne.n	8003c92 <HAL_ADC_Init+0x5e>
  MODIFY_REG(ADCx->CR,
 8003c52:	6893      	ldr	r3, [r2, #8]
 8003c54:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003c58:	f023 0317 	bic.w	r3, r3, #23
 8003c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c60:	6093      	str	r3, [r2, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c62:	4b86      	ldr	r3, [pc, #536]	; (8003e7c <HAL_ADC_Init+0x248>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	099b      	lsrs	r3, r3, #6
 8003c68:	4a85      	ldr	r2, [pc, #532]	; (8003e80 <HAL_ADC_Init+0x24c>)
 8003c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c6e:	099b      	lsrs	r3, r3, #6
 8003c70:	3301      	adds	r3, #1
 8003c72:	005b      	lsls	r3, r3, #1
 8003c74:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003c76:	e009      	b.n	8003c8c <HAL_ADC_Init+0x58>
    HAL_ADC_MspInit(hadc);
 8003c78:	f7fd f94c 	bl	8000f14 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8003c80:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8003c84:	e7e0      	b.n	8003c48 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 8003c86:	9b01      	ldr	r3, [sp, #4]
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003c8c:	9b01      	ldr	r3, [sp, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1f9      	bne.n	8003c86 <HAL_ADC_Init+0x52>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c92:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003c94:	6893      	ldr	r3, [r2, #8]
 8003c96:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003c9a:	f040 809c 	bne.w	8003dd6 <HAL_ADC_Init+0x1a2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003ca0:	f043 0310 	orr.w	r3, r3, #16
 8003ca4:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ca6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003ca8:	f043 0301 	orr.w	r3, r3, #1
 8003cac:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003cae:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003cb0:	6893      	ldr	r3, [r2, #8]
 8003cb2:	f013 0304 	ands.w	r3, r3, #4
 8003cb6:	d000      	beq.n	8003cba <HAL_ADC_Init+0x86>
 8003cb8:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003cba:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003cbc:	f011 0f10 	tst.w	r1, #16
 8003cc0:	f040 80d3 	bne.w	8003e6a <HAL_ADC_Init+0x236>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f040 80d0 	bne.w	8003e6a <HAL_ADC_Init+0x236>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cca:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003ccc:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8003cd0:	f041 0102 	orr.w	r1, r1, #2
 8003cd4:	65a1      	str	r1, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003cd6:	6891      	ldr	r1, [r2, #8]
 8003cd8:	f011 0f01 	tst.w	r1, #1
 8003cdc:	d151      	bne.n	8003d82 <HAL_ADC_Init+0x14e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003cde:	68a1      	ldr	r1, [r4, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003ce0:	7e25      	ldrb	r5, [r4, #24]
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003ce2:	ea41 3185 	orr.w	r1, r1, r5, lsl #14
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003ce6:	7e65      	ldrb	r5, [r4, #25]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003ce8:	ea41 31c5 	orr.w	r1, r1, r5, lsl #15
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003cec:	7ea6      	ldrb	r6, [r4, #26]
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003cee:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003cf2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8003cf4:	b10d      	cbz	r5, 8003cfa <HAL_ADC_Init+0xc6>
 8003cf6:	f44f 5580 	mov.w	r5, #4096	; 0x1000
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003cfa:	4329      	orrs	r1, r5
                   hadc->Init.DataAlign                                           |
 8003cfc:	68e5      	ldr	r5, [r4, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003cfe:	4329      	orrs	r1, r5
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003d00:	6925      	ldr	r5, [r4, #16]
 8003d02:	2d00      	cmp	r5, #0
 8003d04:	db69      	blt.n	8003dda <HAL_ADC_Init+0x1a6>
 8003d06:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8003d0a:	4329      	orrs	r1, r5
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003d0c:	f894 502c 	ldrb.w	r5, [r4, #44]	; 0x2c
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003d10:	ea41 0145 	orr.w	r1, r1, r5, lsl #1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003d14:	f894 5020 	ldrb.w	r5, [r4, #32]
 8003d18:	2d01      	cmp	r5, #1
 8003d1a:	d061      	beq.n	8003de0 <HAL_ADC_Init+0x1ac>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d1c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003d1e:	b125      	cbz	r5, 8003d2a <HAL_ADC_Init+0xf6>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003d20:	f405 75e0 	and.w	r5, r5, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8003d24:	6aa6      	ldr	r6, [r4, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003d26:	4335      	orrs	r5, r6
 8003d28:	4329      	orrs	r1, r5
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003d2a:	68d5      	ldr	r5, [r2, #12]
 8003d2c:	f425 3cfe 	bic.w	ip, r5, #130048	; 0x1fc00
 8003d30:	f42c 7cff 	bic.w	ip, ip, #510	; 0x1fe
 8003d34:	ea4c 0101 	orr.w	r1, ip, r1
 8003d38:	60d1      	str	r1, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003d3a:	6862      	ldr	r2, [r4, #4]
 8003d3c:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8003d40:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003d42:	ea42 0501 	orr.w	r5, r2, r1
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003d46:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 8003d4a:	2901      	cmp	r1, #1
 8003d4c:	d055      	beq.n	8003dfa <HAL_ADC_Init+0x1c6>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003d4e:	6822      	ldr	r2, [r4, #0]
 8003d50:	6916      	ldr	r6, [r2, #16]
 8003d52:	494c      	ldr	r1, [pc, #304]	; (8003e84 <HAL_ADC_Init+0x250>)
 8003d54:	4031      	ands	r1, r6
 8003d56:	4329      	orrs	r1, r5
 8003d58:	6111      	str	r1, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003d5a:	6862      	ldr	r2, [r4, #4]
 8003d5c:	f1b2 4f40 	cmp.w	r2, #3221225472	; 0xc0000000
 8003d60:	d00f      	beq.n	8003d82 <HAL_ADC_Init+0x14e>
 8003d62:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003d66:	d00c      	beq.n	8003d82 <HAL_ADC_Init+0x14e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003d68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8003d6c:	d009      	beq.n	8003d82 <HAL_ADC_Init+0x14e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8003d6e:	4d46      	ldr	r5, [pc, #280]	; (8003e88 <HAL_ADC_Init+0x254>)
 8003d70:	f8d5 1708 	ldr.w	r1, [r5, #1800]	; 0x708
 8003d74:	f421 1170 	bic.w	r1, r1, #3932160	; 0x3c0000
 8003d78:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	f8c5 2708 	str.w	r2, [r5, #1800]	; 0x708
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003d82:	6825      	ldr	r5, [r4, #0]
 8003d84:	6b62      	ldr	r2, [r4, #52]	; 0x34
  MODIFY_REG(ADCx->SMPR,
 8003d86:	6969      	ldr	r1, [r5, #20]
 8003d88:	f021 0107 	bic.w	r1, r1, #7
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	616a      	str	r2, [r5, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003d90:	6821      	ldr	r1, [r4, #0]
 8003d92:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8003d94:	694a      	ldr	r2, [r1, #20]
 8003d96:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003d9a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8003d9e:	614a      	str	r2, [r1, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003da0:	6922      	ldr	r2, [r4, #16]
 8003da2:	2a00      	cmp	r2, #0
 8003da4:	d133      	bne.n	8003e0e <HAL_ADC_Init+0x1da>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003da6:	6822      	ldr	r2, [r4, #0]
 8003da8:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003daa:	f063 030f 	orn	r3, r3, #15
 8003dae:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003db0:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	f003 0307 	and.w	r3, r3, #7
      == hadc->Init.SamplingTimeCommon1)
 8003db8:	6b62      	ldr	r2, [r4, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d04c      	beq.n	8003e58 <HAL_ADC_Init+0x224>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003dbe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003dc0:	f023 0312 	bic.w	r3, r3, #18
 8003dc4:	f043 0310 	orr.w	r3, r3, #16
 8003dc8:	65a3      	str	r3, [r4, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dca:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003dcc:	f043 0301 	orr.w	r3, r3, #1
 8003dd0:	65e3      	str	r3, [r4, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003dd2:	2001      	movs	r0, #1
 8003dd4:	e04e      	b.n	8003e74 <HAL_ADC_Init+0x240>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003dd6:	2000      	movs	r0, #0
 8003dd8:	e76a      	b.n	8003cb0 <HAL_ADC_Init+0x7c>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003dda:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 8003dde:	e794      	b.n	8003d0a <HAL_ADC_Init+0xd6>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003de0:	b916      	cbnz	r6, 8003de8 <HAL_ADC_Init+0x1b4>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003de2:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8003de6:	e799      	b.n	8003d1c <HAL_ADC_Init+0xe8>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003de8:	6da5      	ldr	r5, [r4, #88]	; 0x58
 8003dea:	f045 0520 	orr.w	r5, r5, #32
 8003dee:	65a5      	str	r5, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003df0:	6de5      	ldr	r5, [r4, #92]	; 0x5c
 8003df2:	f045 0501 	orr.w	r5, r5, #1
 8003df6:	65e5      	str	r5, [r4, #92]	; 0x5c
 8003df8:	e790      	b.n	8003d1c <HAL_ADC_Init+0xe8>
                     hadc->Init.Oversampling.Ratio         |
 8003dfa:	6c21      	ldr	r1, [r4, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003dfc:	430a      	orrs	r2, r1
                     hadc->Init.Oversampling.RightBitShift |
 8003dfe:	6c61      	ldr	r1, [r4, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003e00:	430a      	orrs	r2, r1
                     hadc->Init.Oversampling.TriggeredMode
 8003e02:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003e04:	430a      	orrs	r2, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003e06:	432a      	orrs	r2, r5
 8003e08:	f042 0501 	orr.w	r5, r2, #1
 8003e0c:	e79f      	b.n	8003d4e <HAL_ADC_Init+0x11a>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003e0e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8003e12:	d1cd      	bne.n	8003db0 <HAL_ADC_Init+0x17c>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003e14:	2b07      	cmp	r3, #7
 8003e16:	d808      	bhi.n	8003e2a <HAL_ADC_Init+0x1f6>
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8003e18:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003e1a:	0099      	lsls	r1, r3, #2
 8003e1c:	40ca      	lsrs	r2, r1
 8003e1e:	f002 020f 	and.w	r2, r2, #15
 8003e22:	2a0f      	cmp	r2, #15
 8003e24:	d001      	beq.n	8003e2a <HAL_ADC_Init+0x1f6>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003e26:	3301      	adds	r3, #1
 8003e28:	e7f4      	b.n	8003e14 <HAL_ADC_Init+0x1e0>
      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d00e      	beq.n	8003e4c <HAL_ADC_Init+0x218>
        MODIFY_REG(hadc->Instance->CHSELR,
 8003e2e:	6821      	ldr	r1, [r4, #0]
 8003e30:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8003e32:	69e3      	ldr	r3, [r4, #28]
 8003e34:	3b01      	subs	r3, #1
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	f003 031c 	and.w	r3, r3, #28
 8003e3c:	f06f 020f 	mvn.w	r2, #15
 8003e40:	fa02 f303 	lsl.w	r3, r2, r3
 8003e44:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003e46:	4313      	orrs	r3, r2
 8003e48:	628b      	str	r3, [r1, #40]	; 0x28
 8003e4a:	e7b1      	b.n	8003db0 <HAL_ADC_Init+0x17c>
        SET_BIT(hadc->Instance->CHSELR,
 8003e4c:	6822      	ldr	r2, [r4, #0]
 8003e4e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003e50:	f063 030f 	orn	r3, r3, #15
 8003e54:	6293      	str	r3, [r2, #40]	; 0x28
 8003e56:	e7ab      	b.n	8003db0 <HAL_ADC_Init+0x17c>
      ADC_CLEAR_ERRORCODE(hadc);
 8003e58:	2300      	movs	r3, #0
 8003e5a:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8003e5c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003e5e:	f023 0303 	bic.w	r3, r3, #3
 8003e62:	f043 0301 	orr.w	r3, r3, #1
 8003e66:	65a3      	str	r3, [r4, #88]	; 0x58
 8003e68:	e004      	b.n	8003e74 <HAL_ADC_Init+0x240>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003e6c:	f043 0310 	orr.w	r3, r3, #16
 8003e70:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003e72:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 8003e74:	b002      	add	sp, #8
 8003e76:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003e78:	2001      	movs	r0, #1
 8003e7a:	e7fb      	b.n	8003e74 <HAL_ADC_Init+0x240>
 8003e7c:	20000070 	.word	0x20000070
 8003e80:	053e2d63 	.word	0x053e2d63
 8003e84:	1ffffc02 	.word	0x1ffffc02
 8003e88:	40012000 	.word	0x40012000

08003e8c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e8e:	4604      	mov	r4, r0
 8003e90:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003e92:	6946      	ldr	r6, [r0, #20]
 8003e94:	2e08      	cmp	r6, #8
 8003e96:	d005      	beq.n	8003ea4 <HAL_ADC_PollForConversion+0x18>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003e98:	6803      	ldr	r3, [r0, #0]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	f013 0f01 	tst.w	r3, #1
 8003ea0:	d11e      	bne.n	8003ee0 <HAL_ADC_PollForConversion+0x54>

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003ea2:	2604      	movs	r6, #4
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003ea4:	f7fd fd9c 	bl	80019e0 <HAL_GetTick>
 8003ea8:	4607      	mov	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003eaa:	6823      	ldr	r3, [r4, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	4232      	tst	r2, r6
 8003eb0:	d11c      	bne.n	8003eec <HAL_ADC_PollForConversion+0x60>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003eb2:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003eb6:	d0f8      	beq.n	8003eaa <HAL_ADC_PollForConversion+0x1e>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003eb8:	f7fd fd92 	bl	80019e0 <HAL_GetTick>
 8003ebc:	1bc3      	subs	r3, r0, r7
 8003ebe:	42ab      	cmp	r3, r5
 8003ec0:	d801      	bhi.n	8003ec6 <HAL_ADC_PollForConversion+0x3a>
 8003ec2:	2d00      	cmp	r5, #0
 8003ec4:	d1f1      	bne.n	8003eaa <HAL_ADC_PollForConversion+0x1e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003ec6:	6823      	ldr	r3, [r4, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4233      	tst	r3, r6
 8003ecc:	d1ed      	bne.n	8003eaa <HAL_ADC_PollForConversion+0x1e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003ece:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003ed0:	f043 0304 	orr.w	r3, r3, #4
 8003ed4:	65a3      	str	r3, [r4, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

          return HAL_TIMEOUT;
 8003edc:	2003      	movs	r0, #3
 8003ede:	e028      	b.n	8003f32 <HAL_ADC_PollForConversion+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ee0:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003ee2:	f043 0320 	orr.w	r3, r3, #32
 8003ee6:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 8003ee8:	2001      	movs	r0, #1
 8003eea:	e022      	b.n	8003f32 <HAL_ADC_PollForConversion+0xa6>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003eec:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003eee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ef2:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003ef4:	68da      	ldr	r2, [r3, #12]
 8003ef6:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8003efa:	d115      	bne.n	8003f28 <HAL_ADC_PollForConversion+0x9c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003efc:	7ea2      	ldrb	r2, [r4, #26]
 8003efe:	b99a      	cbnz	r2, 8003f28 <HAL_ADC_PollForConversion+0x9c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	f012 0f08 	tst.w	r2, #8
 8003f06:	d00f      	beq.n	8003f28 <HAL_ADC_PollForConversion+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f08:	689a      	ldr	r2, [r3, #8]
 8003f0a:	f012 0f04 	tst.w	r2, #4
 8003f0e:	d111      	bne.n	8003f34 <HAL_ADC_PollForConversion+0xa8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003f10:	685a      	ldr	r2, [r3, #4]
 8003f12:	f022 020c 	bic.w	r2, r2, #12
 8003f16:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003f18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f1e:	f023 0301 	bic.w	r3, r3, #1
 8003f22:	f043 0301 	orr.w	r3, r3, #1
 8003f26:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003f28:	7e20      	ldrb	r0, [r4, #24]
 8003f2a:	b960      	cbnz	r0, 8003f46 <HAL_ADC_PollForConversion+0xba>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003f2c:	6823      	ldr	r3, [r4, #0]
 8003f2e:	220c      	movs	r2, #12
 8003f30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8003f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f34:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f36:	f043 0320 	orr.w	r3, r3, #32
 8003f3a:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f3c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003f3e:	f043 0301 	orr.w	r3, r3, #1
 8003f42:	65e3      	str	r3, [r4, #92]	; 0x5c
 8003f44:	e7f0      	b.n	8003f28 <HAL_ADC_PollForConversion+0x9c>
  return HAL_OK;
 8003f46:	2000      	movs	r0, #0
 8003f48:	e7f3      	b.n	8003f32 <HAL_ADC_PollForConversion+0xa6>

08003f4a <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003f4a:	6803      	ldr	r3, [r0, #0]
 8003f4c:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8003f4e:	4770      	bx	lr

08003f50 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003f50:	b470      	push	{r4, r5, r6}
 8003f52:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003f54:	2200      	movs	r2, #0
 8003f56:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003f58:	6904      	ldr	r4, [r0, #16]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003f5a:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 8003f5e:	2a01      	cmp	r2, #1
 8003f60:	f000 8105 	beq.w	800416e <HAL_ADC_ConfigChannel+0x21e>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2201      	movs	r2, #1
 8003f68:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f6c:	6802      	ldr	r2, [r0, #0]
 8003f6e:	6890      	ldr	r0, [r2, #8]
 8003f70:	f010 0f04 	tst.w	r0, #4
 8003f74:	d00a      	beq.n	8003f8c <HAL_ADC_ConfigChannel+0x3c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f76:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003f78:	f042 0220 	orr.w	r2, r2, #32
 8003f7c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003f7e:	2001      	movs	r0, #1
  }

  __HAL_UNLOCK(hadc);
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
}
 8003f86:	b003      	add	sp, #12
 8003f88:	bc70      	pop	{r4, r5, r6}
 8003f8a:	4770      	bx	lr
    if (pConfig->Rank != ADC_RANK_NONE)
 8003f8c:	6848      	ldr	r0, [r1, #4]
 8003f8e:	2802      	cmp	r0, #2
 8003f90:	f000 809e 	beq.w	80040d0 <HAL_ADC_ConfigChannel+0x180>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003f94:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8003f98:	d029      	beq.n	8003fee <HAL_ADC_ConfigChannel+0x9e>
 8003f9a:	4d76      	ldr	r5, [pc, #472]	; (8004174 <HAL_ADC_ConfigChannel+0x224>)
 8003f9c:	42ac      	cmp	r4, r5
 8003f9e:	d026      	beq.n	8003fee <HAL_ADC_ConfigChannel+0x9e>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003fa0:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8003fa2:	f000 001f 	and.w	r0, r0, #31
 8003fa6:	250f      	movs	r5, #15
 8003fa8:	4085      	lsls	r5, r0
 8003faa:	ea24 0505 	bic.w	r5, r4, r5
 8003fae:	680c      	ldr	r4, [r1, #0]
 8003fb0:	f3c4 0611 	ubfx	r6, r4, #0, #18
 8003fb4:	2e00      	cmp	r6, #0
 8003fb6:	d133      	bne.n	8004020 <HAL_ADC_ConfigChannel+0xd0>
 8003fb8:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8003fbc:	fa04 f000 	lsl.w	r0, r4, r0
 8003fc0:	4328      	orrs	r0, r5
 8003fc2:	6618      	str	r0, [r3, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003fc4:	684c      	ldr	r4, [r1, #4]
 8003fc6:	08a0      	lsrs	r0, r4, #2
 8003fc8:	3001      	adds	r0, #1
 8003fca:	69dd      	ldr	r5, [r3, #28]
 8003fcc:	42a8      	cmp	r0, r5
 8003fce:	d814      	bhi.n	8003ffa <HAL_ADC_ConfigChannel+0xaa>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003fd0:	680d      	ldr	r5, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 8003fd2:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8003fd4:	f004 041f 	and.w	r4, r4, #31
 8003fd8:	260f      	movs	r6, #15
 8003fda:	40a6      	lsls	r6, r4
 8003fdc:	ea20 0006 	bic.w	r0, r0, r6
 8003fe0:	f3c5 6583 	ubfx	r5, r5, #26, #4
 8003fe4:	fa05 f404 	lsl.w	r4, r5, r4
 8003fe8:	4304      	orrs	r4, r0
 8003fea:	6294      	str	r4, [r2, #40]	; 0x28
}
 8003fec:	e005      	b.n	8003ffa <HAL_ADC_ConfigChannel+0xaa>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003fee:	680c      	ldr	r4, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003ff0:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8003ff2:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8003ff6:	4320      	orrs	r0, r4
 8003ff8:	6290      	str	r0, [r2, #40]	; 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003ffa:	681c      	ldr	r4, [r3, #0]
 8003ffc:	680d      	ldr	r5, [r1, #0]
 8003ffe:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 8004000:	6960      	ldr	r0, [r4, #20]
 8004002:	ea20 2005 	bic.w	r0, r0, r5, lsl #8
 8004006:	ea02 2205 	and.w	r2, r2, r5, lsl #8
 800400a:	f022 427c 	bic.w	r2, r2, #4227858432	; 0xfc000000
 800400e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004012:	4302      	orrs	r2, r0
 8004014:	6162      	str	r2, [r4, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004016:	680a      	ldr	r2, [r1, #0]
 8004018:	2a00      	cmp	r2, #0
 800401a:	db09      	blt.n	8004030 <HAL_ADC_ConfigChannel+0xe0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800401c:	2000      	movs	r0, #0
 800401e:	e7af      	b.n	8003f80 <HAL_ADC_ConfigChannel+0x30>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004020:	fa94 f4a4 	rbit	r4, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004024:	b114      	cbz	r4, 800402c <HAL_ADC_ConfigChannel+0xdc>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8004026:	fab4 f484 	clz	r4, r4
 800402a:	e7c7      	b.n	8003fbc <HAL_ADC_ConfigChannel+0x6c>
    return 32U;
 800402c:	2420      	movs	r4, #32
 800402e:	e7c5      	b.n	8003fbc <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004030:	4951      	ldr	r1, [pc, #324]	; (8004178 <HAL_ADC_ConfigChannel+0x228>)
 8004032:	f8d1 0708 	ldr.w	r0, [r1, #1800]	; 0x708
 8004036:	f000 71e0 	and.w	r1, r0, #29360128	; 0x1c00000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800403a:	4c50      	ldr	r4, [pc, #320]	; (800417c <HAL_ADC_ConfigChannel+0x22c>)
 800403c:	42a2      	cmp	r2, r4
 800403e:	d007      	beq.n	8004050 <HAL_ADC_ConfigChannel+0x100>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004040:	4c4f      	ldr	r4, [pc, #316]	; (8004180 <HAL_ADC_ConfigChannel+0x230>)
 8004042:	42a2      	cmp	r2, r4
 8004044:	d026      	beq.n	8004094 <HAL_ADC_ConfigChannel+0x144>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004046:	4c4f      	ldr	r4, [pc, #316]	; (8004184 <HAL_ADC_ConfigChannel+0x234>)
 8004048:	42a2      	cmp	r2, r4
 800404a:	d032      	beq.n	80040b2 <HAL_ADC_ConfigChannel+0x162>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800404c:	2000      	movs	r0, #0
 800404e:	e797      	b.n	8003f80 <HAL_ADC_ConfigChannel+0x30>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004050:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8004054:	d1f4      	bne.n	8004040 <HAL_ADC_ConfigChannel+0xf0>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004056:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800405a:	4847      	ldr	r0, [pc, #284]	; (8004178 <HAL_ADC_ConfigChannel+0x228>)
 800405c:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8004060:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8004064:	4311      	orrs	r1, r2
 8004066:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800406a:	4a47      	ldr	r2, [pc, #284]	; (8004188 <HAL_ADC_ConfigChannel+0x238>)
 800406c:	6812      	ldr	r2, [r2, #0]
 800406e:	0992      	lsrs	r2, r2, #6
 8004070:	4946      	ldr	r1, [pc, #280]	; (800418c <HAL_ADC_ConfigChannel+0x23c>)
 8004072:	fba1 1202 	umull	r1, r2, r1, r2
 8004076:	0992      	lsrs	r2, r2, #6
 8004078:	3201      	adds	r2, #1
 800407a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800407e:	0092      	lsls	r2, r2, #2
 8004080:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8004082:	e002      	b.n	800408a <HAL_ADC_ConfigChannel+0x13a>
            wait_loop_index--;
 8004084:	9a01      	ldr	r2, [sp, #4]
 8004086:	3a01      	subs	r2, #1
 8004088:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800408a:	9a01      	ldr	r2, [sp, #4]
 800408c:	2a00      	cmp	r2, #0
 800408e:	d1f9      	bne.n	8004084 <HAL_ADC_ConfigChannel+0x134>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004090:	2000      	movs	r0, #0
 8004092:	e775      	b.n	8003f80 <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004094:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8004098:	d1d5      	bne.n	8004046 <HAL_ADC_ConfigChannel+0xf6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800409a:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 800409e:	4836      	ldr	r0, [pc, #216]	; (8004178 <HAL_ADC_ConfigChannel+0x228>)
 80040a0:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 80040a4:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80040a8:	4311      	orrs	r1, r2
 80040aa:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040ae:	2000      	movs	r0, #0
}
 80040b0:	e766      	b.n	8003f80 <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80040b2:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 80040b6:	d158      	bne.n	800416a <HAL_ADC_ConfigChannel+0x21a>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80040b8:	f441 0280 	orr.w	r2, r1, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80040bc:	482e      	ldr	r0, [pc, #184]	; (8004178 <HAL_ADC_ConfigChannel+0x228>)
 80040be:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 80040c2:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80040c6:	430a      	orrs	r2, r1
 80040c8:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040cc:	2000      	movs	r0, #0
}
 80040ce:	e757      	b.n	8003f80 <HAL_ADC_ConfigChannel+0x30>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80040d0:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 80040d4:	d002      	beq.n	80040dc <HAL_ADC_ConfigChannel+0x18c>
 80040d6:	4827      	ldr	r0, [pc, #156]	; (8004174 <HAL_ADC_ConfigChannel+0x224>)
 80040d8:	4284      	cmp	r4, r0
 80040da:	d106      	bne.n	80040ea <HAL_ADC_ConfigChannel+0x19a>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80040dc:	680c      	ldr	r4, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80040de:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80040e0:	f3c4 0411 	ubfx	r4, r4, #0, #18
 80040e4:	ea20 0004 	bic.w	r0, r0, r4
 80040e8:	6290      	str	r0, [r2, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80040ea:	680a      	ldr	r2, [r1, #0]
 80040ec:	2a00      	cmp	r2, #0
 80040ee:	db01      	blt.n	80040f4 <HAL_ADC_ConfigChannel+0x1a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040f0:	2000      	movs	r0, #0
 80040f2:	e745      	b.n	8003f80 <HAL_ADC_ConfigChannel+0x30>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80040f4:	4920      	ldr	r1, [pc, #128]	; (8004178 <HAL_ADC_ConfigChannel+0x228>)
 80040f6:	f8d1 1708 	ldr.w	r1, [r1, #1800]	; 0x708
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80040fa:	4820      	ldr	r0, [pc, #128]	; (800417c <HAL_ADC_ConfigChannel+0x22c>)
 80040fc:	4282      	cmp	r2, r0
 80040fe:	d007      	beq.n	8004110 <HAL_ADC_ConfigChannel+0x1c0>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004100:	481f      	ldr	r0, [pc, #124]	; (8004180 <HAL_ADC_ConfigChannel+0x230>)
 8004102:	4282      	cmp	r2, r0
 8004104:	d013      	beq.n	800412e <HAL_ADC_ConfigChannel+0x1de>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004106:	481f      	ldr	r0, [pc, #124]	; (8004184 <HAL_ADC_ConfigChannel+0x234>)
 8004108:	4282      	cmp	r2, r0
 800410a:	d01f      	beq.n	800414c <HAL_ADC_ConfigChannel+0x1fc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800410c:	2000      	movs	r0, #0
 800410e:	e737      	b.n	8003f80 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004110:	f001 71a0 	and.w	r1, r1, #20971520	; 0x1400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004114:	f100 4010 	add.w	r0, r0, #2415919104	; 0x90000000
 8004118:	f500 3088 	add.w	r0, r0, #69632	; 0x11000
 800411c:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8004120:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8004124:	4311      	orrs	r1, r2
 8004126:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800412a:	2000      	movs	r0, #0
}
 800412c:	e728      	b.n	8003f80 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800412e:	f401 0240 	and.w	r2, r1, #12582912	; 0xc00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004132:	f100 4008 	add.w	r0, r0, #2281701376	; 0x88000000
 8004136:	f500 4060 	add.w	r0, r0, #57344	; 0xe000
 800413a:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 800413e:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8004142:	430a      	orrs	r2, r1
 8004144:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004148:	2000      	movs	r0, #0
}
 800414a:	e719      	b.n	8003f80 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800414c:	f001 72c0 	and.w	r2, r1, #25165824	; 0x1800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004150:	f100 400c 	add.w	r0, r0, #2348810240	; 0x8c000000
 8004154:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8004158:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 800415c:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8004160:	430a      	orrs	r2, r1
 8004162:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004166:	2000      	movs	r0, #0
}
 8004168:	e70a      	b.n	8003f80 <HAL_ADC_ConfigChannel+0x30>
 800416a:	2000      	movs	r0, #0
 800416c:	e708      	b.n	8003f80 <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 800416e:	2002      	movs	r0, #2
 8004170:	e709      	b.n	8003f86 <HAL_ADC_ConfigChannel+0x36>
 8004172:	bf00      	nop
 8004174:	80000004 	.word	0x80000004
 8004178:	40012000 	.word	0x40012000
 800417c:	b0001000 	.word	0xb0001000
 8004180:	b8004000 	.word	0xb8004000
 8004184:	b4002000 	.word	0xb4002000
 8004188:	20000070 	.word	0x20000070
 800418c:	053e2d63 	.word	0x053e2d63

08004190 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8004190:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004192:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004194:	689a      	ldr	r2, [r3, #8]
 8004196:	f012 0f04 	tst.w	r2, #4
 800419a:	d02a      	beq.n	80041f2 <ADC_ConversionStop+0x62>
 800419c:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800419e:	689a      	ldr	r2, [r3, #8]
 80041a0:	f012 0f02 	tst.w	r2, #2
 80041a4:	d107      	bne.n	80041b6 <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 80041a6:	689a      	ldr	r2, [r3, #8]
 80041a8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80041ac:	f022 0217 	bic.w	r2, r2, #23
 80041b0:	f042 0210 	orr.w	r2, r2, #16
 80041b4:	609a      	str	r2, [r3, #8]
      LL_ADC_REG_StopConversion(hadc->Instance);
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80041b6:	f7fd fc13 	bl	80019e0 <HAL_GetTick>
 80041ba:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80041bc:	6823      	ldr	r3, [r4, #0]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f013 0f04 	tst.w	r3, #4
 80041c4:	d013      	beq.n	80041ee <ADC_ConversionStop+0x5e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80041c6:	f7fd fc0b 	bl	80019e0 <HAL_GetTick>
 80041ca:	1b43      	subs	r3, r0, r5
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d9f5      	bls.n	80041bc <ADC_ConversionStop+0x2c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80041d0:	6823      	ldr	r3, [r4, #0]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f013 0f04 	tst.w	r3, #4
 80041d8:	d0f0      	beq.n	80041bc <ADC_ConversionStop+0x2c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80041dc:	f043 0310 	orr.w	r3, r3, #16
 80041e0:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041e2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80041e4:	f043 0301 	orr.w	r3, r3, #1
 80041e8:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 80041ea:	2001      	movs	r0, #1
 80041ec:	e002      	b.n	80041f4 <ADC_ConversionStop+0x64>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80041ee:	2000      	movs	r0, #0
 80041f0:	e000      	b.n	80041f4 <ADC_ConversionStop+0x64>
 80041f2:	2000      	movs	r0, #0
}
 80041f4:	bd38      	pop	{r3, r4, r5, pc}
	...

080041f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80041f8:	b530      	push	{r4, r5, lr}
 80041fa:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80041fc:	2300      	movs	r3, #0
 80041fe:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004200:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004202:	689a      	ldr	r2, [r3, #8]
 8004204:	f012 0f01 	tst.w	r2, #1
 8004208:	d15b      	bne.n	80042c2 <ADC_Enable+0xca>
 800420a:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800420c:	6899      	ldr	r1, [r3, #8]
 800420e:	4a2e      	ldr	r2, [pc, #184]	; (80042c8 <ADC_Enable+0xd0>)
 8004210:	4211      	tst	r1, r2
 8004212:	d117      	bne.n	8004244 <ADC_Enable+0x4c>
  MODIFY_REG(ADCx->CR,
 8004214:	689a      	ldr	r2, [r3, #8]
 8004216:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800421a:	f022 0217 	bic.w	r2, r2, #23
 800421e:	f042 0201 	orr.w	r2, r2, #1
 8004222:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004224:	4b29      	ldr	r3, [pc, #164]	; (80042cc <ADC_Enable+0xd4>)
 8004226:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800422a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800422e:	d019      	beq.n	8004264 <ADC_Enable+0x6c>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004230:	4b27      	ldr	r3, [pc, #156]	; (80042d0 <ADC_Enable+0xd8>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	099b      	lsrs	r3, r3, #6
 8004236:	4a27      	ldr	r2, [pc, #156]	; (80042d4 <ADC_Enable+0xdc>)
 8004238:	fba2 2303 	umull	r2, r3, r2, r3
 800423c:	099b      	lsrs	r3, r3, #6
 800423e:	3301      	adds	r3, #1
 8004240:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8004242:	e00c      	b.n	800425e <ADC_Enable+0x66>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004244:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8004246:	f043 0310 	orr.w	r3, r3, #16
 800424a:	6583      	str	r3, [r0, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800424c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800424e:	f043 0301 	orr.w	r3, r3, #1
 8004252:	65c3      	str	r3, [r0, #92]	; 0x5c
      return HAL_ERROR;
 8004254:	2001      	movs	r0, #1
 8004256:	e035      	b.n	80042c4 <ADC_Enable+0xcc>
      {
        wait_loop_index--;
 8004258:	9b01      	ldr	r3, [sp, #4]
 800425a:	3b01      	subs	r3, #1
 800425c:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800425e:	9b01      	ldr	r3, [sp, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1f9      	bne.n	8004258 <ADC_Enable+0x60>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004264:	7e63      	ldrb	r3, [r4, #25]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d101      	bne.n	800426e <ADC_Enable+0x76>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800426a:	2000      	movs	r0, #0
 800426c:	e02a      	b.n	80042c4 <ADC_Enable+0xcc>
      tickstart = HAL_GetTick();
 800426e:	f7fd fbb7 	bl	80019e0 <HAL_GetTick>
 8004272:	4605      	mov	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004274:	6823      	ldr	r3, [r4, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	f012 0f01 	tst.w	r2, #1
 800427c:	d11f      	bne.n	80042be <ADC_Enable+0xc6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	f012 0f01 	tst.w	r2, #1
 8004284:	d107      	bne.n	8004296 <ADC_Enable+0x9e>
  MODIFY_REG(ADCx->CR,
 8004286:	689a      	ldr	r2, [r3, #8]
 8004288:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800428c:	f022 0217 	bic.w	r2, r2, #23
 8004290:	f042 0201 	orr.w	r2, r2, #1
 8004294:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004296:	f7fd fba3 	bl	80019e0 <HAL_GetTick>
 800429a:	1b40      	subs	r0, r0, r5
 800429c:	2802      	cmp	r0, #2
 800429e:	d9e9      	bls.n	8004274 <ADC_Enable+0x7c>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80042a0:	6823      	ldr	r3, [r4, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f013 0f01 	tst.w	r3, #1
 80042a8:	d1e4      	bne.n	8004274 <ADC_Enable+0x7c>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80042ac:	f043 0310 	orr.w	r3, r3, #16
 80042b0:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042b2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80042b4:	f043 0301 	orr.w	r3, r3, #1
 80042b8:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 80042ba:	2001      	movs	r0, #1
 80042bc:	e002      	b.n	80042c4 <ADC_Enable+0xcc>
  return HAL_OK;
 80042be:	2000      	movs	r0, #0
 80042c0:	e000      	b.n	80042c4 <ADC_Enable+0xcc>
 80042c2:	2000      	movs	r0, #0
}
 80042c4:	b003      	add	sp, #12
 80042c6:	bd30      	pop	{r4, r5, pc}
 80042c8:	80000017 	.word	0x80000017
 80042cc:	40012000 	.word	0x40012000
 80042d0:	20000070 	.word	0x20000070
 80042d4:	053e2d63 	.word	0x053e2d63

080042d8 <HAL_ADC_Start>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80042d8:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f013 0f04 	tst.w	r3, #4
 80042e0:	d128      	bne.n	8004334 <HAL_ADC_Start+0x5c>
{
 80042e2:	b510      	push	{r4, lr}
 80042e4:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 80042e6:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d024      	beq.n	8004338 <HAL_ADC_Start+0x60>
 80042ee:	2301      	movs	r3, #1
 80042f0:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    tmp_hal_status = ADC_Enable(hadc);
 80042f4:	f7ff ff80 	bl	80041f8 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80042f8:	b9c0      	cbnz	r0, 800432c <HAL_ADC_Start+0x54>
      ADC_STATE_CLR_SET(hadc->State,
 80042fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80042fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004300:	f023 0301 	bic.w	r3, r3, #1
 8004304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004308:	65a3      	str	r3, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 800430a:	2300      	movs	r3, #0
 800430c:	65e3      	str	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800430e:	6822      	ldr	r2, [r4, #0]
 8004310:	211c      	movs	r1, #28
 8004312:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8004314:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004318:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800431a:	6893      	ldr	r3, [r2, #8]
 800431c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004320:	f023 0317 	bic.w	r3, r3, #23
 8004324:	f043 0304 	orr.w	r3, r3, #4
 8004328:	6093      	str	r3, [r2, #8]
}
 800432a:	bd10      	pop	{r4, pc}
      __HAL_UNLOCK(hadc);
 800432c:	2300      	movs	r3, #0
 800432e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8004332:	e7fa      	b.n	800432a <HAL_ADC_Start+0x52>
    tmp_hal_status = HAL_BUSY;
 8004334:	2002      	movs	r0, #2
}
 8004336:	4770      	bx	lr
    __HAL_LOCK(hadc);
 8004338:	2002      	movs	r0, #2
 800433a:	e7f6      	b.n	800432a <HAL_ADC_Start+0x52>

0800433c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800433c:	b538      	push	{r3, r4, r5, lr}
 800433e:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004340:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004342:	6893      	ldr	r3, [r2, #8]
 8004344:	f013 0302 	ands.w	r3, r3, #2
 8004348:	d000      	beq.n	800434c <ADC_Disable+0x10>
 800434a:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800434c:	6891      	ldr	r1, [r2, #8]
 800434e:	f011 0f01 	tst.w	r1, #1
 8004352:	d039      	beq.n	80043c8 <ADC_Disable+0x8c>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 8004354:	2b00      	cmp	r3, #0
 8004356:	d139      	bne.n	80043cc <ADC_Disable+0x90>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004358:	6893      	ldr	r3, [r2, #8]
 800435a:	f003 0305 	and.w	r3, r3, #5
 800435e:	2b01      	cmp	r3, #1
 8004360:	d009      	beq.n	8004376 <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004362:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004364:	f043 0310 	orr.w	r3, r3, #16
 8004368:	65a3      	str	r3, [r4, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800436a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800436c:	f043 0301 	orr.w	r3, r3, #1
 8004370:	65e3      	str	r3, [r4, #92]	; 0x5c

      return HAL_ERROR;
 8004372:	2001      	movs	r0, #1
 8004374:	e029      	b.n	80043ca <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 8004376:	6893      	ldr	r3, [r2, #8]
 8004378:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800437c:	f023 0317 	bic.w	r3, r3, #23
 8004380:	f043 0302 	orr.w	r3, r3, #2
 8004384:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004386:	6823      	ldr	r3, [r4, #0]
 8004388:	2203      	movs	r2, #3
 800438a:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800438c:	f7fd fb28 	bl	80019e0 <HAL_GetTick>
 8004390:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004392:	6823      	ldr	r3, [r4, #0]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f013 0f01 	tst.w	r3, #1
 800439a:	d013      	beq.n	80043c4 <ADC_Disable+0x88>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800439c:	f7fd fb20 	bl	80019e0 <HAL_GetTick>
 80043a0:	1b40      	subs	r0, r0, r5
 80043a2:	2802      	cmp	r0, #2
 80043a4:	d9f5      	bls.n	8004392 <ADC_Disable+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80043a6:	6823      	ldr	r3, [r4, #0]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f013 0f01 	tst.w	r3, #1
 80043ae:	d0f0      	beq.n	8004392 <ADC_Disable+0x56>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80043b2:	f043 0310 	orr.w	r3, r3, #16
 80043b6:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043b8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80043ba:	f043 0301 	orr.w	r3, r3, #1
 80043be:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 80043c0:	2001      	movs	r0, #1
 80043c2:	e002      	b.n	80043ca <ADC_Disable+0x8e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80043c4:	2000      	movs	r0, #0
 80043c6:	e000      	b.n	80043ca <ADC_Disable+0x8e>
 80043c8:	2000      	movs	r0, #0
}
 80043ca:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 80043cc:	2000      	movs	r0, #0
 80043ce:	e7fc      	b.n	80043ca <ADC_Disable+0x8e>

080043d0 <HAL_ADC_DeInit>:
{
 80043d0:	b570      	push	{r4, r5, r6, lr}
  if (hadc == NULL)
 80043d2:	2800      	cmp	r0, #0
 80043d4:	d04c      	beq.n	8004470 <HAL_ADC_DeInit+0xa0>
 80043d6:	4604      	mov	r4, r0
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80043d8:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80043da:	f043 0302 	orr.w	r3, r3, #2
 80043de:	6583      	str	r3, [r0, #88]	; 0x58
  tmp_hal_status = ADC_ConversionStop(hadc);
 80043e0:	f7ff fed6 	bl	8004190 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80043e4:	4606      	mov	r6, r0
 80043e6:	2800      	cmp	r0, #0
 80043e8:	d033      	beq.n	8004452 <HAL_ADC_DeInit+0x82>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 80043ea:	6822      	ldr	r2, [r4, #0]
 80043ec:	6853      	ldr	r3, [r2, #4]
 80043ee:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 80043f2:	f023 0303 	bic.w	r3, r3, #3
 80043f6:	6053      	str	r3, [r2, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 80043f8:	6823      	ldr	r3, [r4, #0]
 80043fa:	f240 329f 	movw	r2, #927	; 0x39f
 80043fe:	601a      	str	r2, [r3, #0]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8004400:	6822      	ldr	r2, [r4, #0]
 8004402:	68d1      	ldr	r1, [r2, #12]
 8004404:	4b1b      	ldr	r3, [pc, #108]	; (8004474 <HAL_ADC_DeInit+0xa4>)
 8004406:	400b      	ands	r3, r1
 8004408:	60d3      	str	r3, [r2, #12]
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 800440a:	6822      	ldr	r2, [r4, #0]
 800440c:	6913      	ldr	r3, [r2, #16]
 800440e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004412:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8004414:	6822      	ldr	r2, [r4, #0]
 8004416:	6953      	ldr	r3, [r2, #20]
 8004418:	f023 0307 	bic.w	r3, r3, #7
 800441c:	6153      	str	r3, [r2, #20]
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 800441e:	6822      	ldr	r2, [r4, #0]
 8004420:	6a13      	ldr	r3, [r2, #32]
 8004422:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8004426:	6213      	str	r3, [r2, #32]
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8004428:	6823      	ldr	r3, [r4, #0]
 800442a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800442c:	2500      	movs	r5, #0
 800442e:	629d      	str	r5, [r3, #40]	; 0x28
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8004430:	4a11      	ldr	r2, [pc, #68]	; (8004478 <HAL_ADC_DeInit+0xa8>)
 8004432:	f8d2 3708 	ldr.w	r3, [r2, #1800]	; 0x708
 8004436:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 800443a:	f8c2 3708 	str.w	r3, [r2, #1800]	; 0x708
  HAL_ADC_MspDeInit(hadc);
 800443e:	4620      	mov	r0, r4
 8004440:	f7fc fd7e 	bl	8000f40 <HAL_ADC_MspDeInit>
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8004444:	6625      	str	r5, [r4, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(hadc);
 8004446:	65e5      	str	r5, [r4, #92]	; 0x5c
  hadc->State = HAL_ADC_STATE_RESET;
 8004448:	65a5      	str	r5, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 800444a:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
}
 800444e:	4630      	mov	r0, r6
 8004450:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8004452:	4620      	mov	r0, r4
 8004454:	f7ff ff72 	bl	800433c <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8004458:	4606      	mov	r6, r0
 800445a:	b908      	cbnz	r0, 8004460 <HAL_ADC_DeInit+0x90>
      hadc->State = HAL_ADC_STATE_READY;
 800445c:	2301      	movs	r3, #1
 800445e:	65a3      	str	r3, [r4, #88]	; 0x58
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8004460:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8004462:	6893      	ldr	r3, [r2, #8]
 8004464:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004468:	f023 0317 	bic.w	r3, r3, #23
 800446c:	6093      	str	r3, [r2, #8]
}
 800446e:	e7bc      	b.n	80043ea <HAL_ADC_DeInit+0x1a>
    return HAL_ERROR;
 8004470:	2601      	movs	r6, #1
 8004472:	e7ec      	b.n	800444e <HAL_ADC_DeInit+0x7e>
 8004474:	833e0200 	.word	0x833e0200
 8004478:	40012000 	.word	0x40012000

0800447c <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 800447c:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8004480:	2b01      	cmp	r3, #1
 8004482:	d019      	beq.n	80044b8 <HAL_ADC_Stop+0x3c>
{
 8004484:	b510      	push	{r4, lr}
 8004486:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8004488:	2301      	movs	r3, #1
 800448a:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 800448e:	f7ff fe7f 	bl	8004190 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8004492:	b118      	cbz	r0, 800449c <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 8004494:	2300      	movs	r3, #0
 8004496:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
 800449a:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 800449c:	4620      	mov	r0, r4
 800449e:	f7ff ff4d 	bl	800433c <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80044a2:	2800      	cmp	r0, #0
 80044a4:	d1f6      	bne.n	8004494 <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 80044a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80044a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044ac:	f023 0301 	bic.w	r3, r3, #1
 80044b0:	f043 0301 	orr.w	r3, r3, #1
 80044b4:	65a3      	str	r3, [r4, #88]	; 0x58
 80044b6:	e7ed      	b.n	8004494 <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 80044b8:	2002      	movs	r0, #2
}
 80044ba:	4770      	bx	lr

080044bc <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80044bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044be:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80044c0:	2300      	movs	r3, #0
 80044c2:	9301      	str	r3, [sp, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80044c4:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	f000 8094 	beq.w	80045f6 <HAL_ADCEx_Calibration_Start+0x13a>
 80044ce:	4604      	mov	r4, r0
 80044d0:	2301      	movs	r3, #1
 80044d2:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80044d6:	f7ff ff31 	bl	800433c <ADC_Disable>
 80044da:	4605      	mov	r5, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044dc:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	f012 0201 	ands.w	r2, r2, #1
 80044e4:	d009      	beq.n	80044fa <HAL_ADCEx_Calibration_Start+0x3e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80044e8:	f043 0310 	orr.w	r3, r3, #16
 80044ec:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80044ee:	2300      	movs	r3, #0
 80044f0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

  return tmp_hal_status;
}
 80044f4:	4628      	mov	r0, r5
 80044f6:	b003      	add	sp, #12
 80044f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 80044fa:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80044fc:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8004500:	f041 0102 	orr.w	r1, r1, #2
 8004504:	65a1      	str	r1, [r4, #88]	; 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004506:	68de      	ldr	r6, [r3, #12]
 8004508:	f426 46ff 	bic.w	r6, r6, #32640	; 0x7f80
 800450c:	f026 067c 	bic.w	r6, r6, #124	; 0x7c
 8004510:	0436      	lsls	r6, r6, #16
 8004512:	0c36      	lsrs	r6, r6, #16
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004514:	68d9      	ldr	r1, [r3, #12]
 8004516:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800451a:	f021 0103 	bic.w	r1, r1, #3
 800451e:	60d9      	str	r1, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 8004520:	4610      	mov	r0, r2
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004522:	e005      	b.n	8004530 <HAL_ADCEx_Calibration_Start+0x74>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8004524:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004528:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 800452c:	4418      	add	r0, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800452e:	3201      	adds	r2, #1
 8004530:	2a07      	cmp	r2, #7
 8004532:	d81e      	bhi.n	8004572 <HAL_ADCEx_Calibration_Start+0xb6>
      LL_ADC_StartCalibration(hadc->Instance);
 8004534:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8004536:	688b      	ldr	r3, [r1, #8]
 8004538:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800453c:	f023 0317 	bic.w	r3, r3, #23
 8004540:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004544:	608b      	str	r3, [r1, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004546:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004548:	6899      	ldr	r1, [r3, #8]
 800454a:	2900      	cmp	r1, #0
 800454c:	daea      	bge.n	8004524 <HAL_ADCEx_Calibration_Start+0x68>
        wait_loop_index++;
 800454e:	9b01      	ldr	r3, [sp, #4]
 8004550:	3301      	adds	r3, #1
 8004552:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004554:	9b01      	ldr	r3, [sp, #4]
 8004556:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 800455a:	d3f4      	bcc.n	8004546 <HAL_ADCEx_Calibration_Start+0x8a>
          ADC_STATE_CLR_SET(hadc->State,
 800455c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800455e:	f023 0312 	bic.w	r3, r3, #18
 8004562:	f043 0310 	orr.w	r3, r3, #16
 8004566:	65a3      	str	r3, [r4, #88]	; 0x58
          __HAL_UNLOCK(hadc);
 8004568:	2300      	movs	r3, #0
 800456a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 800456e:	2501      	movs	r5, #1
 8004570:	e7c0      	b.n	80044f4 <HAL_ADCEx_Calibration_Start+0x38>
    calibration_factor_accumulated /= calibration_index;
 8004572:	fbb0 f2f2 	udiv	r2, r0, r2
    LL_ADC_Enable(hadc->Instance);
 8004576:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8004578:	688b      	ldr	r3, [r1, #8]
 800457a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800457e:	f023 0317 	bic.w	r3, r3, #23
 8004582:	f043 0301 	orr.w	r3, r3, #1
 8004586:	608b      	str	r3, [r1, #8]
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8004588:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->CALFACT,
 800458a:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 800458e:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
 8004592:	4302      	orrs	r2, r0
 8004594:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    LL_ADC_Disable(hadc->Instance);
 8004598:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800459a:	6893      	ldr	r3, [r2, #8]
 800459c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80045a0:	f023 0317 	bic.w	r3, r3, #23
 80045a4:	f043 0302 	orr.w	r3, r3, #2
 80045a8:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80045aa:	f7fd fa19 	bl	80019e0 <HAL_GetTick>
 80045ae:	4607      	mov	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80045b0:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80045b2:	689a      	ldr	r2, [r3, #8]
 80045b4:	f012 0f01 	tst.w	r2, #1
 80045b8:	d109      	bne.n	80045ce <HAL_ADCEx_Calibration_Start+0x112>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80045ba:	68da      	ldr	r2, [r3, #12]
 80045bc:	4316      	orrs	r6, r2
 80045be:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 80045c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80045c2:	f023 0303 	bic.w	r3, r3, #3
 80045c6:	f043 0301 	orr.w	r3, r3, #1
 80045ca:	65a3      	str	r3, [r4, #88]	; 0x58
 80045cc:	e78f      	b.n	80044ee <HAL_ADCEx_Calibration_Start+0x32>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80045ce:	f7fd fa07 	bl	80019e0 <HAL_GetTick>
 80045d2:	1bc3      	subs	r3, r0, r7
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d9eb      	bls.n	80045b0 <HAL_ADCEx_Calibration_Start+0xf4>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80045d8:	6823      	ldr	r3, [r4, #0]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f013 0f01 	tst.w	r3, #1
 80045e0:	d0e6      	beq.n	80045b0 <HAL_ADCEx_Calibration_Start+0xf4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80045e4:	f043 0310 	orr.w	r3, r3, #16
 80045e8:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045ea:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80045ec:	f043 0301 	orr.w	r3, r3, #1
 80045f0:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 80045f2:	2501      	movs	r5, #1
 80045f4:	e77e      	b.n	80044f4 <HAL_ADCEx_Calibration_Start+0x38>
  __HAL_LOCK(hadc);
 80045f6:	2502      	movs	r5, #2
 80045f8:	e77c      	b.n	80044f4 <HAL_ADCEx_Calibration_Start+0x38>
	...

080045fc <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045fc:	4a07      	ldr	r2, [pc, #28]	; (800461c <HAL_NVIC_SetPriorityGrouping+0x20>)
 80045fe:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004600:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004604:	041b      	lsls	r3, r3, #16
 8004606:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004608:	0200      	lsls	r0, r0, #8
 800460a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800460e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8004610:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8004618:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800461a:	4770      	bx	lr
 800461c:	e000ed00 	.word	0xe000ed00

08004620 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004620:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004622:	4b19      	ldr	r3, [pc, #100]	; (8004688 <HAL_NVIC_SetPriority+0x68>)
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800462a:	f1c3 0c07 	rsb	ip, r3, #7
 800462e:	f1bc 0f04 	cmp.w	ip, #4
 8004632:	bf28      	it	cs
 8004634:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004638:	f103 0e04 	add.w	lr, r3, #4
 800463c:	f1be 0f06 	cmp.w	lr, #6
 8004640:	d918      	bls.n	8004674 <HAL_NVIC_SetPriority+0x54>
 8004642:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004644:	f04f 3eff 	mov.w	lr, #4294967295
 8004648:	fa0e fc0c 	lsl.w	ip, lr, ip
 800464c:	ea21 010c 	bic.w	r1, r1, ip
 8004650:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004652:	fa0e f303 	lsl.w	r3, lr, r3
 8004656:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800465a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800465c:	2800      	cmp	r0, #0
 800465e:	db0b      	blt.n	8004678 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004660:	0109      	lsls	r1, r1, #4
 8004662:	b2c9      	uxtb	r1, r1
 8004664:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004668:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800466c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004670:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004674:	2300      	movs	r3, #0
 8004676:	e7e5      	b.n	8004644 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004678:	f000 000f 	and.w	r0, r0, #15
 800467c:	0109      	lsls	r1, r1, #4
 800467e:	b2c9      	uxtb	r1, r1
 8004680:	4b02      	ldr	r3, [pc, #8]	; (800468c <HAL_NVIC_SetPriority+0x6c>)
 8004682:	5419      	strb	r1, [r3, r0]
 8004684:	e7f4      	b.n	8004670 <HAL_NVIC_SetPriority+0x50>
 8004686:	bf00      	nop
 8004688:	e000ed00 	.word	0xe000ed00
 800468c:	e000ed14 	.word	0xe000ed14

08004690 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004690:	2800      	cmp	r0, #0
 8004692:	db07      	blt.n	80046a4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004694:	f000 021f 	and.w	r2, r0, #31
 8004698:	0940      	lsrs	r0, r0, #5
 800469a:	2301      	movs	r3, #1
 800469c:	4093      	lsls	r3, r2
 800469e:	4a02      	ldr	r2, [pc, #8]	; (80046a8 <HAL_NVIC_EnableIRQ+0x18>)
 80046a0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	e000e100 	.word	0xe000e100

080046ac <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80046ac:	2800      	cmp	r0, #0
 80046ae:	db0c      	blt.n	80046ca <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046b0:	f000 021f 	and.w	r2, r0, #31
 80046b4:	0940      	lsrs	r0, r0, #5
 80046b6:	2301      	movs	r3, #1
 80046b8:	4093      	lsls	r3, r2
 80046ba:	3020      	adds	r0, #32
 80046bc:	4a03      	ldr	r2, [pc, #12]	; (80046cc <HAL_NVIC_DisableIRQ+0x20>)
 80046be:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80046c2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80046c6:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80046ca:	4770      	bx	lr
 80046cc:	e000e100 	.word	0xe000e100

080046d0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046d0:	b410      	push	{r4}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046d2:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 80046d4:	f8d0 c050 	ldr.w	ip, [r0, #80]	; 0x50
 80046d8:	f8c4 c004 	str.w	ip, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80046dc:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80046de:	b124      	cbz	r4, 80046ea <DMA_SetConfig+0x1a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046e0:	6d84      	ldr	r4, [r0, #88]	; 0x58
 80046e2:	f8d0 c05c 	ldr.w	ip, [r0, #92]	; 0x5c
 80046e6:	f8c4 c004 	str.w	ip, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80046ea:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80046ec:	f004 0c1c 	and.w	ip, r4, #28
 80046f0:	2401      	movs	r4, #1
 80046f2:	fa04 f40c 	lsl.w	r4, r4, ip
 80046f6:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
 80046fa:	f8cc 4004 	str.w	r4, [ip, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80046fe:	6804      	ldr	r4, [r0, #0]
 8004700:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004702:	6883      	ldr	r3, [r0, #8]
 8004704:	2b10      	cmp	r3, #16
 8004706:	d005      	beq.n	8004714 <DMA_SetConfig+0x44>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8004708:	6803      	ldr	r3, [r0, #0]
 800470a:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800470c:	6803      	ldr	r3, [r0, #0]
 800470e:	60da      	str	r2, [r3, #12]
  }
}
 8004710:	bc10      	pop	{r4}
 8004712:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8004714:	6803      	ldr	r3, [r0, #0]
 8004716:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8004718:	6803      	ldr	r3, [r0, #0]
 800471a:	60d9      	str	r1, [r3, #12]
 800471c:	e7f8      	b.n	8004710 <DMA_SetConfig+0x40>
	...

08004720 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004720:	6803      	ldr	r3, [r0, #0]
 8004722:	4a14      	ldr	r2, [pc, #80]	; (8004774 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d816      	bhi.n	8004756 <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004728:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800472a:	f022 0203 	bic.w	r2, r2, #3
 800472e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8004732:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 8004736:	6482      	str	r2, [r0, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004738:	b2db      	uxtb	r3, r3
 800473a:	3b08      	subs	r3, #8
 800473c:	4a0e      	ldr	r2, [pc, #56]	; (8004778 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 800473e:	fba2 2303 	umull	r2, r3, r2, r3
 8004742:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004744:	4a0d      	ldr	r2, [pc, #52]	; (800477c <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 8004746:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004748:	f003 031f 	and.w	r3, r3, #31
 800474c:	2201      	movs	r2, #1
 800474e:	fa02 f303 	lsl.w	r3, r2, r3
 8004752:	6503      	str	r3, [r0, #80]	; 0x50
}
 8004754:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004756:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004758:	f022 0103 	bic.w	r1, r2, #3
 800475c:	4a08      	ldr	r2, [pc, #32]	; (8004780 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 800475e:	440a      	add	r2, r1
 8004760:	6482      	str	r2, [r0, #72]	; 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004762:	b2db      	uxtb	r3, r3
 8004764:	3b08      	subs	r3, #8
 8004766:	4a04      	ldr	r2, [pc, #16]	; (8004778 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8004768:	fba2 2303 	umull	r2, r3, r2, r3
 800476c:	091b      	lsrs	r3, r3, #4
 800476e:	3307      	adds	r3, #7
 8004770:	e7e8      	b.n	8004744 <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 8004772:	bf00      	nop
 8004774:	40020407 	.word	0x40020407
 8004778:	cccccccd 	.word	0xcccccccd
 800477c:	40020880 	.word	0x40020880
 8004780:	4002081c 	.word	0x4002081c

08004784 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004784:	6843      	ldr	r3, [r0, #4]
 8004786:	f003 037f 	and.w	r3, r3, #127	; 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800478a:	4a07      	ldr	r2, [pc, #28]	; (80047a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 800478c:	441a      	add	r2, r3
 800478e:	0092      	lsls	r2, r2, #2
 8004790:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004792:	4a06      	ldr	r2, [pc, #24]	; (80047ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 8004794:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004796:	3b01      	subs	r3, #1
 8004798:	f003 0303 	and.w	r3, r3, #3
 800479c:	2201      	movs	r2, #1
 800479e:	fa02 f303 	lsl.w	r3, r2, r3
 80047a2:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	1000823f 	.word	0x1000823f
 80047ac:	40020940 	.word	0x40020940

080047b0 <HAL_DMA_Init>:
  if (hdma == NULL)
 80047b0:	2800      	cmp	r0, #0
 80047b2:	d060      	beq.n	8004876 <HAL_DMA_Init+0xc6>
{
 80047b4:	b510      	push	{r4, lr}
 80047b6:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80047b8:	6802      	ldr	r2, [r0, #0]
 80047ba:	4b30      	ldr	r3, [pc, #192]	; (800487c <HAL_DMA_Init+0xcc>)
 80047bc:	429a      	cmp	r2, r3
 80047be:	d842      	bhi.n	8004846 <HAL_DMA_Init+0x96>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80047c0:	4b2f      	ldr	r3, [pc, #188]	; (8004880 <HAL_DMA_Init+0xd0>)
 80047c2:	4413      	add	r3, r2
 80047c4:	492f      	ldr	r1, [pc, #188]	; (8004884 <HAL_DMA_Init+0xd4>)
 80047c6:	fba1 1303 	umull	r1, r3, r1, r3
 80047ca:	091b      	lsrs	r3, r3, #4
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80047d0:	4b2d      	ldr	r3, [pc, #180]	; (8004888 <HAL_DMA_Init+0xd8>)
 80047d2:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80047d4:	2302      	movs	r3, #2
 80047d6:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80047da:	6813      	ldr	r3, [r2, #0]
 80047dc:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80047e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047e4:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80047e6:	6821      	ldr	r1, [r4, #0]
 80047e8:	680a      	ldr	r2, [r1, #0]
 80047ea:	68a3      	ldr	r3, [r4, #8]
 80047ec:	68e0      	ldr	r0, [r4, #12]
 80047ee:	4303      	orrs	r3, r0
 80047f0:	6920      	ldr	r0, [r4, #16]
 80047f2:	4303      	orrs	r3, r0
 80047f4:	6960      	ldr	r0, [r4, #20]
 80047f6:	4303      	orrs	r3, r0
 80047f8:	69a0      	ldr	r0, [r4, #24]
 80047fa:	4303      	orrs	r3, r0
 80047fc:	69e0      	ldr	r0, [r4, #28]
 80047fe:	4303      	orrs	r3, r0
 8004800:	6a20      	ldr	r0, [r4, #32]
 8004802:	4303      	orrs	r3, r0
 8004804:	4313      	orrs	r3, r2
 8004806:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004808:	4620      	mov	r0, r4
 800480a:	f7ff ff89 	bl	8004720 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800480e:	68a3      	ldr	r3, [r4, #8]
 8004810:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004814:	d022      	beq.n	800485c <HAL_DMA_Init+0xac>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004816:	6863      	ldr	r3, [r4, #4]
 8004818:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800481a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800481e:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004820:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004822:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004824:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004826:	6863      	ldr	r3, [r4, #4]
 8004828:	3b01      	subs	r3, #1
 800482a:	2b03      	cmp	r3, #3
 800482c:	d919      	bls.n	8004862 <HAL_DMA_Init+0xb2>
    hdma->DMAmuxRequestGen = 0U;
 800482e:	2300      	movs	r3, #0
 8004830:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004832:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004834:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004836:	2000      	movs	r0, #0
 8004838:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 800483a:	2301      	movs	r3, #1
 800483c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8004840:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8004844:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004846:	4b11      	ldr	r3, [pc, #68]	; (800488c <HAL_DMA_Init+0xdc>)
 8004848:	4413      	add	r3, r2
 800484a:	490e      	ldr	r1, [pc, #56]	; (8004884 <HAL_DMA_Init+0xd4>)
 800484c:	fba1 1303 	umull	r1, r3, r1, r3
 8004850:	091b      	lsrs	r3, r3, #4
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004856:	4b0e      	ldr	r3, [pc, #56]	; (8004890 <HAL_DMA_Init+0xe0>)
 8004858:	6403      	str	r3, [r0, #64]	; 0x40
 800485a:	e7bb      	b.n	80047d4 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800485c:	2300      	movs	r3, #0
 800485e:	6063      	str	r3, [r4, #4]
 8004860:	e7d9      	b.n	8004816 <HAL_DMA_Init+0x66>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004862:	4620      	mov	r0, r4
 8004864:	f7ff ff8e 	bl	8004784 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004868:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800486a:	2200      	movs	r2, #0
 800486c:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800486e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004870:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004872:	605a      	str	r2, [r3, #4]
 8004874:	e7df      	b.n	8004836 <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 8004876:	2001      	movs	r0, #1
}
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	40020407 	.word	0x40020407
 8004880:	bffdfff8 	.word	0xbffdfff8
 8004884:	cccccccd 	.word	0xcccccccd
 8004888:	40020000 	.word	0x40020000
 800488c:	bffdfbf8 	.word	0xbffdfbf8
 8004890:	40020400 	.word	0x40020400

08004894 <HAL_DMA_DeInit>:
  if (NULL == hdma)
 8004894:	2800      	cmp	r0, #0
 8004896:	d04b      	beq.n	8004930 <HAL_DMA_DeInit+0x9c>
{
 8004898:	b538      	push	{r3, r4, r5, lr}
 800489a:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 800489c:	6802      	ldr	r2, [r0, #0]
 800489e:	6813      	ldr	r3, [r2, #0]
 80048a0:	f023 0301 	bic.w	r3, r3, #1
 80048a4:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80048a6:	6802      	ldr	r2, [r0, #0]
 80048a8:	4b22      	ldr	r3, [pc, #136]	; (8004934 <HAL_DMA_DeInit+0xa0>)
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d82c      	bhi.n	8004908 <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80048ae:	4b22      	ldr	r3, [pc, #136]	; (8004938 <HAL_DMA_DeInit+0xa4>)
 80048b0:	4413      	add	r3, r2
 80048b2:	4922      	ldr	r1, [pc, #136]	; (800493c <HAL_DMA_DeInit+0xa8>)
 80048b4:	fba1 1303 	umull	r1, r3, r1, r3
 80048b8:	091b      	lsrs	r3, r3, #4
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80048be:	4b20      	ldr	r3, [pc, #128]	; (8004940 <HAL_DMA_DeInit+0xac>)
 80048c0:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->Instance->CCR = 0U;
 80048c2:	2500      	movs	r5, #0
 80048c4:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80048c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80048c8:	f003 021c 	and.w	r2, r3, #28
 80048cc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80048ce:	2301      	movs	r3, #1
 80048d0:	4093      	lsls	r3, r2
 80048d2:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80048d4:	4620      	mov	r0, r4
 80048d6:	f7ff ff23 	bl	8004720 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 80048da:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80048dc:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048de:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80048e0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80048e2:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80048e4:	6863      	ldr	r3, [r4, #4]
 80048e6:	3b01      	subs	r3, #1
 80048e8:	2b03      	cmp	r3, #3
 80048ea:	d918      	bls.n	800491e <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = 0U;
 80048ec:	2000      	movs	r0, #0
 80048ee:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 80048f0:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80048f2:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 80048f4:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80048f6:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80048f8:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80048fa:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048fc:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 80048fe:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8004902:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8004906:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004908:	4b0e      	ldr	r3, [pc, #56]	; (8004944 <HAL_DMA_DeInit+0xb0>)
 800490a:	4413      	add	r3, r2
 800490c:	490b      	ldr	r1, [pc, #44]	; (800493c <HAL_DMA_DeInit+0xa8>)
 800490e:	fba1 1303 	umull	r1, r3, r1, r3
 8004912:	091b      	lsrs	r3, r3, #4
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004918:	4b0b      	ldr	r3, [pc, #44]	; (8004948 <HAL_DMA_DeInit+0xb4>)
 800491a:	6403      	str	r3, [r0, #64]	; 0x40
 800491c:	e7d1      	b.n	80048c2 <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800491e:	4620      	mov	r0, r4
 8004920:	f7ff ff30 	bl	8004784 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004924:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004926:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004928:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800492a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800492c:	605a      	str	r2, [r3, #4]
 800492e:	e7dd      	b.n	80048ec <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 8004930:	2001      	movs	r0, #1
}
 8004932:	4770      	bx	lr
 8004934:	40020407 	.word	0x40020407
 8004938:	bffdfff8 	.word	0xbffdfff8
 800493c:	cccccccd 	.word	0xcccccccd
 8004940:	40020000 	.word	0x40020000
 8004944:	bffdfbf8 	.word	0xbffdfbf8
 8004948:	40020400 	.word	0x40020400

0800494c <HAL_DMA_Start_IT>:
{
 800494c:	b538      	push	{r3, r4, r5, lr}
 800494e:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8004950:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 8004954:	2801      	cmp	r0, #1
 8004956:	d043      	beq.n	80049e0 <HAL_DMA_Start_IT+0x94>
 8004958:	2001      	movs	r0, #1
 800495a:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 800495e:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 8004962:	b2c0      	uxtb	r0, r0
 8004964:	2801      	cmp	r0, #1
 8004966:	d006      	beq.n	8004976 <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004968:	2380      	movs	r3, #128	; 0x80
 800496a:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 800496c:	2300      	movs	r3, #0
 800496e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_ERROR;
 8004972:	2001      	movs	r0, #1
}
 8004974:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8004976:	2002      	movs	r0, #2
 8004978:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800497c:	2000      	movs	r0, #0
 800497e:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8004980:	6825      	ldr	r5, [r4, #0]
 8004982:	6828      	ldr	r0, [r5, #0]
 8004984:	f020 0001 	bic.w	r0, r0, #1
 8004988:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800498a:	4620      	mov	r0, r4
 800498c:	f7ff fea0 	bl	80046d0 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8004990:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004992:	b1d3      	cbz	r3, 80049ca <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004994:	6822      	ldr	r2, [r4, #0]
 8004996:	6813      	ldr	r3, [r2, #0]
 8004998:	f043 030e 	orr.w	r3, r3, #14
 800499c:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800499e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80049a6:	d003      	beq.n	80049b0 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049ae:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80049b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80049b2:	b11b      	cbz	r3, 80049bc <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049ba:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 80049bc:	6822      	ldr	r2, [r4, #0]
 80049be:	6813      	ldr	r3, [r2, #0]
 80049c0:	f043 0301 	orr.w	r3, r3, #1
 80049c4:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049c6:	2000      	movs	r0, #0
 80049c8:	e7d4      	b.n	8004974 <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80049ca:	6822      	ldr	r2, [r4, #0]
 80049cc:	6813      	ldr	r3, [r2, #0]
 80049ce:	f023 0304 	bic.w	r3, r3, #4
 80049d2:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80049d4:	6822      	ldr	r2, [r4, #0]
 80049d6:	6813      	ldr	r3, [r2, #0]
 80049d8:	f043 030a 	orr.w	r3, r3, #10
 80049dc:	6013      	str	r3, [r2, #0]
 80049de:	e7de      	b.n	800499e <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 80049e0:	2002      	movs	r0, #2
 80049e2:	e7c7      	b.n	8004974 <HAL_DMA_Start_IT+0x28>

080049e4 <HAL_DMA_Abort>:
  if (NULL == hdma)
 80049e4:	4603      	mov	r3, r0
 80049e6:	2800      	cmp	r0, #0
 80049e8:	d034      	beq.n	8004a54 <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80049ea:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80049ee:	b2d2      	uxtb	r2, r2
 80049f0:	2a02      	cmp	r2, #2
 80049f2:	d006      	beq.n	8004a02 <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049f4:	2204      	movs	r2, #4
 80049f6:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80049f8:	2200      	movs	r2, #0
 80049fa:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    return HAL_ERROR;
 80049fe:	2001      	movs	r0, #1
 8004a00:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a02:	6801      	ldr	r1, [r0, #0]
 8004a04:	680a      	ldr	r2, [r1, #0]
 8004a06:	f022 020e 	bic.w	r2, r2, #14
 8004a0a:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004a0c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004a0e:	680a      	ldr	r2, [r1, #0]
 8004a10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a14:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8004a16:	6801      	ldr	r1, [r0, #0]
 8004a18:	680a      	ldr	r2, [r1, #0]
 8004a1a:	f022 0201 	bic.w	r2, r2, #1
 8004a1e:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004a20:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004a22:	f002 011c 	and.w	r1, r2, #28
 8004a26:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8004a28:	2201      	movs	r2, #1
 8004a2a:	408a      	lsls	r2, r1
 8004a2c:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a30:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004a32:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8004a34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a36:	b132      	cbz	r2, 8004a46 <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004a38:	6811      	ldr	r1, [r2, #0]
 8004a3a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8004a3e:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a40:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004a42:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004a44:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8004a4c:	2000      	movs	r0, #0
 8004a4e:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return HAL_OK;
 8004a52:	4770      	bx	lr
    return HAL_ERROR;
 8004a54:	2001      	movs	r0, #1
}
 8004a56:	4770      	bx	lr

08004a58 <HAL_DMA_Abort_IT>:
{
 8004a58:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004a5a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d003      	beq.n	8004a6c <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a64:	2304      	movs	r3, #4
 8004a66:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8004a68:	2001      	movs	r0, #1
}
 8004a6a:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a6c:	6802      	ldr	r2, [r0, #0]
 8004a6e:	6813      	ldr	r3, [r2, #0]
 8004a70:	f023 030e 	bic.w	r3, r3, #14
 8004a74:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8004a76:	6802      	ldr	r2, [r0, #0]
 8004a78:	6813      	ldr	r3, [r2, #0]
 8004a7a:	f023 0301 	bic.w	r3, r3, #1
 8004a7e:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004a80:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8004a82:	6813      	ldr	r3, [r2, #0]
 8004a84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a88:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004a8a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004a8c:	f003 021c 	and.w	r2, r3, #28
 8004a90:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004a92:	2301      	movs	r3, #1
 8004a94:	4093      	lsls	r3, r2
 8004a96:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a98:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004a9a:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004a9c:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8004a9e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004aa0:	b133      	cbz	r3, 8004ab0 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004aa8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004aaa:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8004aac:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8004aae:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8004abc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004abe:	b113      	cbz	r3, 8004ac6 <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8004ac0:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8004ac2:	2000      	movs	r0, #0
 8004ac4:	e7d1      	b.n	8004a6a <HAL_DMA_Abort_IT+0x12>
 8004ac6:	2000      	movs	r0, #0
 8004ac8:	e7cf      	b.n	8004a6a <HAL_DMA_Abort_IT+0x12>
	...

08004acc <HAL_DMA_IRQHandler>:
{
 8004acc:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004ace:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004ad0:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8004ad2:	6804      	ldr	r4, [r0, #0]
 8004ad4:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004ad6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004ad8:	f003 031c 	and.w	r3, r3, #28
 8004adc:	2204      	movs	r2, #4
 8004ade:	409a      	lsls	r2, r3
 8004ae0:	420a      	tst	r2, r1
 8004ae2:	d015      	beq.n	8004b10 <HAL_DMA_IRQHandler+0x44>
 8004ae4:	f015 0f04 	tst.w	r5, #4
 8004ae8:	d012      	beq.n	8004b10 <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004aea:	6823      	ldr	r3, [r4, #0]
 8004aec:	f013 0f20 	tst.w	r3, #32
 8004af0:	d103      	bne.n	8004afa <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004af2:	6823      	ldr	r3, [r4, #0]
 8004af4:	f023 0304 	bic.w	r3, r3, #4
 8004af8:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004afa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004afc:	f003 021c 	and.w	r2, r3, #28
 8004b00:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004b02:	2304      	movs	r3, #4
 8004b04:	4093      	lsls	r3, r2
 8004b06:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8004b08:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004b0a:	b103      	cbz	r3, 8004b0e <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 8004b0c:	4798      	blx	r3
}
 8004b0e:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004b10:	2202      	movs	r2, #2
 8004b12:	409a      	lsls	r2, r3
 8004b14:	420a      	tst	r2, r1
 8004b16:	d028      	beq.n	8004b6a <HAL_DMA_IRQHandler+0x9e>
 8004b18:	f015 0f02 	tst.w	r5, #2
 8004b1c:	d025      	beq.n	8004b6a <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b1e:	6823      	ldr	r3, [r4, #0]
 8004b20:	f013 0f20 	tst.w	r3, #32
 8004b24:	d106      	bne.n	8004b34 <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004b26:	6823      	ldr	r3, [r4, #0]
 8004b28:	f023 030a 	bic.w	r3, r3, #10
 8004b2c:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004b34:	6802      	ldr	r2, [r0, #0]
 8004b36:	4b1c      	ldr	r3, [pc, #112]	; (8004ba8 <HAL_DMA_IRQHandler+0xdc>)
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d90e      	bls.n	8004b5a <HAL_DMA_IRQHandler+0x8e>
 8004b3c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004b3e:	f003 021c 	and.w	r2, r3, #28
 8004b42:	2302      	movs	r3, #2
 8004b44:	4093      	lsls	r3, r2
 8004b46:	4a19      	ldr	r2, [pc, #100]	; (8004bac <HAL_DMA_IRQHandler+0xe0>)
 8004b48:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      if (hdma->XferCpltCallback != NULL)
 8004b50:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d0db      	beq.n	8004b0e <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 8004b56:	4798      	blx	r3
 8004b58:	e7d9      	b.n	8004b0e <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004b5a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004b5c:	f003 021c 	and.w	r2, r3, #28
 8004b60:	2302      	movs	r3, #2
 8004b62:	4093      	lsls	r3, r2
 8004b64:	4a12      	ldr	r2, [pc, #72]	; (8004bb0 <HAL_DMA_IRQHandler+0xe4>)
 8004b66:	6053      	str	r3, [r2, #4]
 8004b68:	e7ef      	b.n	8004b4a <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004b6a:	2208      	movs	r2, #8
 8004b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b70:	420b      	tst	r3, r1
 8004b72:	d0cc      	beq.n	8004b0e <HAL_DMA_IRQHandler+0x42>
 8004b74:	f015 0f08 	tst.w	r5, #8
 8004b78:	d0c9      	beq.n	8004b0e <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b7a:	6823      	ldr	r3, [r4, #0]
 8004b7c:	f023 030e 	bic.w	r3, r3, #14
 8004b80:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004b82:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004b84:	f003 031c 	and.w	r3, r3, #28
 8004b88:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b90:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b92:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8004b94:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8004b98:	2300      	movs	r3, #0
 8004b9a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8004b9e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d0b4      	beq.n	8004b0e <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8004ba4:	4798      	blx	r3
  return;
 8004ba6:	e7b2      	b.n	8004b0e <HAL_DMA_IRQHandler+0x42>
 8004ba8:	40020080 	.word	0x40020080
 8004bac:	40020400 	.word	0x40020400
 8004bb0:	40020000 	.word	0x40020000

08004bb4 <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 8004bb4:	b178      	cbz	r0, 8004bd6 <HAL_DMA_ConfigChannelAttributes+0x22>
  ccr = READ_REG(hdma->Instance->CCR);
 8004bb6:	6803      	ldr	r3, [r0, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8004bba:	f011 0f10 	tst.w	r1, #16
 8004bbe:	d004      	beq.n	8004bca <HAL_DMA_ConfigChannelAttributes+0x16>
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8004bc0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004bc4:	d004      	beq.n	8004bd0 <HAL_DMA_ConfigChannelAttributes+0x1c>
      SET_BIT(ccr, DMA_CCR_PRIV);
 8004bc6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  WRITE_REG(hdma->Instance->CCR, ccr);
 8004bca:	601a      	str	r2, [r3, #0]
  return status;
 8004bcc:	2000      	movs	r0, #0
 8004bce:	4770      	bx	lr
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8004bd0:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8004bd4:	e7f9      	b.n	8004bca <HAL_DMA_ConfigChannelAttributes+0x16>
    return status;
 8004bd6:	2001      	movs	r0, #1
}
 8004bd8:	4770      	bx	lr
	...

08004bdc <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004bdc:	b410      	push	{r4}
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004bde:	4c05      	ldr	r4, [pc, #20]	; (8004bf4 <FLASH_Program_DoubleWord+0x18>)
 8004be0:	6961      	ldr	r1, [r4, #20]
 8004be2:	f041 0101 	orr.w	r1, r1, #1
 8004be6:	6161      	str	r1, [r4, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8004be8:	6002      	str	r2, [r0, #0]
 8004bea:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8004bee:	6043      	str	r3, [r0, #4]
}
 8004bf0:	bc10      	pop	{r4}
 8004bf2:	4770      	bx	lr
 8004bf4:	58004000 	.word	0x58004000

08004bf8 <FLASH_Program_Fast>:

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8004bf8:	4a0c      	ldr	r2, [pc, #48]	; (8004c2c <FLASH_Program_Fast+0x34>)
 8004bfa:	6953      	ldr	r3, [r2, #20]
 8004bfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c00:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c02:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004c06:	b672      	cpsid	i
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8004c08:	2340      	movs	r3, #64	; 0x40
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8004c0a:	f851 2b04 	ldr.w	r2, [r1], #4
 8004c0e:	f840 2b04 	str.w	r2, [r0], #4
    dest_addr++;
    src_addr++;
    row_index--;
 8004c12:	3b01      	subs	r3, #1
  }
  while (row_index != 0U);
 8004c14:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8004c18:	d1f7      	bne.n	8004c0a <FLASH_Program_Fast+0x12>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8004c1a:	4b04      	ldr	r3, [pc, #16]	; (8004c2c <FLASH_Program_Fast+0x34>)
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004c22:	d1fa      	bne.n	8004c1a <FLASH_Program_Fast+0x22>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c24:	f38c 8810 	msr	PRIMASK, ip
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	58004000 	.word	0x58004000

08004c30 <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004c30:	4b09      	ldr	r3, [pc, #36]	; (8004c58 <HAL_FLASH_Unlock+0x28>)
 8004c32:	695b      	ldr	r3, [r3, #20]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	db01      	blt.n	8004c3c <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8004c38:	2000      	movs	r0, #0
 8004c3a:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004c3c:	4b06      	ldr	r3, [pc, #24]	; (8004c58 <HAL_FLASH_Unlock+0x28>)
 8004c3e:	4a07      	ldr	r2, [pc, #28]	; (8004c5c <HAL_FLASH_Unlock+0x2c>)
 8004c40:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004c42:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8004c46:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	db01      	blt.n	8004c52 <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8004c4e:	2000      	movs	r0, #0
 8004c50:	4770      	bx	lr
      status = HAL_ERROR;
 8004c52:	2001      	movs	r0, #1
}
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	58004000 	.word	0x58004000
 8004c5c:	45670123 	.word	0x45670123

08004c60 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004c60:	4b05      	ldr	r3, [pc, #20]	; (8004c78 <HAL_FLASH_Lock+0x18>)
 8004c62:	695a      	ldr	r2, [r3, #20]
 8004c64:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004c68:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8004c6a:	695b      	ldr	r3, [r3, #20]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	db01      	blt.n	8004c74 <HAL_FLASH_Lock+0x14>
    status = HAL_ERROR;
 8004c70:	2001      	movs	r0, #1
}
 8004c72:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8004c74:	2000      	movs	r0, #0
 8004c76:	4770      	bx	lr
 8004c78:	58004000 	.word	0x58004000

08004c7c <FLASH_WaitForLastOperation>:
{
 8004c7c:	b538      	push	{r3, r4, r5, lr}
 8004c7e:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8004c80:	f7fc feae 	bl	80019e0 <HAL_GetTick>
 8004c84:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004c86:	4b16      	ldr	r3, [pc, #88]	; (8004ce0 <FLASH_WaitForLastOperation+0x64>)
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004c8e:	d006      	beq.n	8004c9e <FLASH_WaitForLastOperation+0x22>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004c90:	f7fc fea6 	bl	80019e0 <HAL_GetTick>
 8004c94:	1b00      	subs	r0, r0, r4
 8004c96:	42a8      	cmp	r0, r5
 8004c98:	d3f5      	bcc.n	8004c86 <FLASH_WaitForLastOperation+0xa>
      return HAL_TIMEOUT;
 8004c9a:	2003      	movs	r0, #3
}
 8004c9c:	bd38      	pop	{r3, r4, r5, pc}
  error = FLASH->SR;
 8004c9e:	4b10      	ldr	r3, [pc, #64]	; (8004ce0 <FLASH_WaitForLastOperation+0x64>)
 8004ca0:	691b      	ldr	r3, [r3, #16]
  if ((error & FLASH_FLAG_EOP) != 0U)
 8004ca2:	f013 0f01 	tst.w	r3, #1
 8004ca6:	d002      	beq.n	8004cae <FLASH_WaitForLastOperation+0x32>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004ca8:	4a0d      	ldr	r2, [pc, #52]	; (8004ce0 <FLASH_WaitForLastOperation+0x64>)
 8004caa:	2101      	movs	r1, #1
 8004cac:	6111      	str	r1, [r2, #16]
  error &= FLASH_FLAG_SR_ERRORS;
 8004cae:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  __HAL_FLASH_CLEAR_FLAG(error);
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	d001      	beq.n	8004cba <FLASH_WaitForLastOperation+0x3e>
 8004cb6:	4a0a      	ldr	r2, [pc, #40]	; (8004ce0 <FLASH_WaitForLastOperation+0x64>)
 8004cb8:	6113      	str	r3, [r2, #16]
  if (error != 0U)
 8004cba:	b95b      	cbnz	r3, 8004cd4 <FLASH_WaitForLastOperation+0x58>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8004cbc:	4b08      	ldr	r3, [pc, #32]	; (8004ce0 <FLASH_WaitForLastOperation+0x64>)
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004cc4:	d00a      	beq.n	8004cdc <FLASH_WaitForLastOperation+0x60>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004cc6:	f7fc fe8b 	bl	80019e0 <HAL_GetTick>
 8004cca:	1b00      	subs	r0, r0, r4
 8004ccc:	42a8      	cmp	r0, r5
 8004cce:	d3f5      	bcc.n	8004cbc <FLASH_WaitForLastOperation+0x40>
      return HAL_TIMEOUT;
 8004cd0:	2003      	movs	r0, #3
 8004cd2:	e7e3      	b.n	8004c9c <FLASH_WaitForLastOperation+0x20>
    pFlash.ErrorCode = error;
 8004cd4:	4a03      	ldr	r2, [pc, #12]	; (8004ce4 <FLASH_WaitForLastOperation+0x68>)
 8004cd6:	6053      	str	r3, [r2, #4]
    return HAL_ERROR;
 8004cd8:	2001      	movs	r0, #1
 8004cda:	e7df      	b.n	8004c9c <FLASH_WaitForLastOperation+0x20>
  return HAL_OK;
 8004cdc:	2000      	movs	r0, #0
 8004cde:	e7dd      	b.n	8004c9c <FLASH_WaitForLastOperation+0x20>
 8004ce0:	58004000 	.word	0x58004000
 8004ce4:	2000065c 	.word	0x2000065c

08004ce8 <HAL_FLASH_Program>:
{
 8004ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cea:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 8004cec:	4b15      	ldr	r3, [pc, #84]	; (8004d44 <HAL_FLASH_Program+0x5c>)
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d025      	beq.n	8004d40 <HAL_FLASH_Program+0x58>
 8004cf4:	4604      	mov	r4, r0
 8004cf6:	460d      	mov	r5, r1
 8004cf8:	4616      	mov	r6, r2
 8004cfa:	4b12      	ldr	r3, [pc, #72]	; (8004d44 <HAL_FLASH_Program+0x5c>)
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004d00:	2200      	movs	r2, #0
 8004d02:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004d04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004d08:	f7ff ffb8 	bl	8004c7c <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8004d0c:	b970      	cbnz	r0, 8004d2c <HAL_FLASH_Program+0x44>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004d0e:	2c01      	cmp	r4, #1
 8004d10:	d010      	beq.n	8004d34 <HAL_FLASH_Program+0x4c>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8004d12:	4631      	mov	r1, r6
 8004d14:	4628      	mov	r0, r5
 8004d16:	f7ff ff6f 	bl	8004bf8 <FLASH_Program_Fast>
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004d1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004d1e:	f7ff ffad 	bl	8004c7c <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8004d22:	4a09      	ldr	r2, [pc, #36]	; (8004d48 <HAL_FLASH_Program+0x60>)
 8004d24:	6953      	ldr	r3, [r2, #20]
 8004d26:	ea23 0404 	bic.w	r4, r3, r4
 8004d2a:	6154      	str	r4, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 8004d2c:	4b05      	ldr	r3, [pc, #20]	; (8004d44 <HAL_FLASH_Program+0x5c>)
 8004d2e:	2200      	movs	r2, #0
 8004d30:	701a      	strb	r2, [r3, #0]
}
 8004d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_DoubleWord(Address, Data);
 8004d34:	4632      	mov	r2, r6
 8004d36:	463b      	mov	r3, r7
 8004d38:	4628      	mov	r0, r5
 8004d3a:	f7ff ff4f 	bl	8004bdc <FLASH_Program_DoubleWord>
 8004d3e:	e7ec      	b.n	8004d1a <HAL_FLASH_Program+0x32>
  __HAL_LOCK(&pFlash);
 8004d40:	2002      	movs	r0, #2
 8004d42:	e7f6      	b.n	8004d32 <HAL_FLASH_Program+0x4a>
 8004d44:	2000065c 	.word	0x2000065c
 8004d48:	58004000 	.word	0x58004000

08004d4c <FLASH_MassErase>:
{
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8004d4c:	4a03      	ldr	r2, [pc, #12]	; (8004d5c <FLASH_MassErase+0x10>)
 8004d4e:	6953      	ldr	r3, [r2, #20]
 8004d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d54:	f043 0304 	orr.w	r3, r3, #4
 8004d58:	6153      	str	r3, [r2, #20]
#endif
}
 8004d5a:	4770      	bx	lr
 8004d5c:	58004000 	.word	0x58004000

08004d60 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8004d60:	4b18      	ldr	r3, [pc, #96]	; (8004dc4 <FLASH_FlushCaches+0x64>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d006      	beq.n	8004d7a <FLASH_FlushCaches+0x1a>
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8004d6c:	4b15      	ldr	r3, [pc, #84]	; (8004dc4 <FLASH_FlushCaches+0x64>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d012      	beq.n	8004d9e <FLASH_FlushCaches+0x3e>
    __HAL_FLASH_DATA_CACHE_RESET();
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }
#endif
}
 8004d78:	4770      	bx	lr
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004d7a:	4b12      	ldr	r3, [pc, #72]	; (8004dc4 <FLASH_FlushCaches+0x64>)
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004d82:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d8a:	601a      	str	r2, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d92:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d9a:	601a      	str	r2, [r3, #0]
 8004d9c:	e7e6      	b.n	8004d6c <FLASH_FlushCaches+0xc>
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004d9e:	4b09      	ldr	r3, [pc, #36]	; (8004dc4 <FLASH_FlushCaches+0x64>)
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004da6:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_RESET();
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004dae:	601a      	str	r2, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004db6:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004dbe:	601a      	str	r2, [r3, #0]
}
 8004dc0:	e7da      	b.n	8004d78 <FLASH_FlushCaches+0x18>
 8004dc2:	bf00      	nop
 8004dc4:	58004000 	.word	0x58004000

08004dc8 <FLASH_AcknowledgePageErase>:
static void FLASH_AcknowledgePageErase(void)
{
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8004dc8:	4a03      	ldr	r2, [pc, #12]	; (8004dd8 <FLASH_AcknowledgePageErase+0x10>)
 8004dca:	6953      	ldr	r3, [r2, #20]
 8004dcc:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8004dd0:	f023 0302 	bic.w	r3, r3, #2
 8004dd4:	6153      	str	r3, [r2, #20]
#endif
}
 8004dd6:	4770      	bx	lr
 8004dd8:	58004000 	.word	0x58004000

08004ddc <FLASH_PageErase>:
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8004ddc:	4a05      	ldr	r2, [pc, #20]	; (8004df4 <FLASH_PageErase+0x18>)
 8004dde:	6953      	ldr	r3, [r2, #20]
 8004de0:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8004de4:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
 8004de8:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8004dec:	f040 0002 	orr.w	r0, r0, #2
 8004df0:	6150      	str	r0, [r2, #20]
}
 8004df2:	4770      	bx	lr
 8004df4:	58004000 	.word	0x58004000

08004df8 <HAL_FLASHEx_Erase>:
{
 8004df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8004dfa:	4b1e      	ldr	r3, [pc, #120]	; (8004e74 <HAL_FLASHEx_Erase+0x7c>)
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d035      	beq.n	8004e6e <HAL_FLASHEx_Erase+0x76>
 8004e02:	4605      	mov	r5, r0
 8004e04:	460f      	mov	r7, r1
 8004e06:	4b1b      	ldr	r3, [pc, #108]	; (8004e74 <HAL_FLASHEx_Erase+0x7c>)
 8004e08:	2201      	movs	r2, #1
 8004e0a:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004e10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e14:	f7ff ff32 	bl	8004c7c <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8004e18:	4606      	mov	r6, r0
 8004e1a:	bb18      	cbnz	r0, 8004e64 <HAL_FLASHEx_Erase+0x6c>
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004e1c:	682b      	ldr	r3, [r5, #0]
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	d013      	beq.n	8004e4a <HAL_FLASHEx_Erase+0x52>
      *PageError = 0xFFFFFFFFU;
 8004e22:	f04f 33ff 	mov.w	r3, #4294967295
 8004e26:	603b      	str	r3, [r7, #0]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004e28:	686c      	ldr	r4, [r5, #4]
 8004e2a:	686b      	ldr	r3, [r5, #4]
 8004e2c:	68aa      	ldr	r2, [r5, #8]
 8004e2e:	4413      	add	r3, r2
 8004e30:	42a3      	cmp	r3, r4
 8004e32:	d913      	bls.n	8004e5c <HAL_FLASHEx_Erase+0x64>
        FLASH_PageErase(index);
 8004e34:	4620      	mov	r0, r4
 8004e36:	f7ff ffd1 	bl	8004ddc <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004e3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e3e:	f7ff ff1d 	bl	8004c7c <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 8004e42:	4606      	mov	r6, r0
 8004e44:	b948      	cbnz	r0, 8004e5a <HAL_FLASHEx_Erase+0x62>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004e46:	3401      	adds	r4, #1
 8004e48:	e7ef      	b.n	8004e2a <HAL_FLASHEx_Erase+0x32>
      FLASH_MassErase();
 8004e4a:	f7ff ff7f 	bl	8004d4c <FLASH_MassErase>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004e4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e52:	f7ff ff13 	bl	8004c7c <FLASH_WaitForLastOperation>
 8004e56:	4606      	mov	r6, r0
 8004e58:	e002      	b.n	8004e60 <HAL_FLASHEx_Erase+0x68>
          *PageError = index;
 8004e5a:	603c      	str	r4, [r7, #0]
      FLASH_AcknowledgePageErase();
 8004e5c:	f7ff ffb4 	bl	8004dc8 <FLASH_AcknowledgePageErase>
    FLASH_FlushCaches();
 8004e60:	f7ff ff7e 	bl	8004d60 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8004e64:	4b03      	ldr	r3, [pc, #12]	; (8004e74 <HAL_FLASHEx_Erase+0x7c>)
 8004e66:	2200      	movs	r2, #0
 8004e68:	701a      	strb	r2, [r3, #0]
}
 8004e6a:	4630      	mov	r0, r6
 8004e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8004e6e:	2602      	movs	r6, #2
 8004e70:	e7fb      	b.n	8004e6a <HAL_FLASHEx_Erase+0x72>
 8004e72:	bf00      	nop
 8004e74:	2000065c 	.word	0x2000065c

08004e78 <HAL_FLASHEx_Erase_IT>:
{
 8004e78:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(&pFlash);
 8004e7a:	4b17      	ldr	r3, [pc, #92]	; (8004ed8 <HAL_FLASHEx_Erase_IT+0x60>)
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d028      	beq.n	8004ed4 <HAL_FLASHEx_Erase_IT+0x5c>
 8004e82:	4604      	mov	r4, r0
 8004e84:	4b14      	ldr	r3, [pc, #80]	; (8004ed8 <HAL_FLASHEx_Erase_IT+0x60>)
 8004e86:	2201      	movs	r2, #1
 8004e88:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	605a      	str	r2, [r3, #4]
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8004e8e:	6802      	ldr	r2, [r0, #0]
 8004e90:	609a      	str	r2, [r3, #8]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004e92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e96:	f7ff fef1 	bl	8004c7c <FLASH_WaitForLastOperation>
  if (status != HAL_OK)
 8004e9a:	4605      	mov	r5, r0
 8004e9c:	b120      	cbz	r0, 8004ea8 <HAL_FLASHEx_Erase_IT+0x30>
    __HAL_UNLOCK(&pFlash);
 8004e9e:	4b0e      	ldr	r3, [pc, #56]	; (8004ed8 <HAL_FLASHEx_Erase_IT+0x60>)
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	701a      	strb	r2, [r3, #0]
}
 8004ea4:	4628      	mov	r0, r5
 8004ea6:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8004ea8:	4a0c      	ldr	r2, [pc, #48]	; (8004edc <HAL_FLASHEx_Erase_IT+0x64>)
 8004eaa:	6953      	ldr	r3, [r2, #20]
 8004eac:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8004eb0:	6153      	str	r3, [r2, #20]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004eb2:	6823      	ldr	r3, [r4, #0]
 8004eb4:	2b04      	cmp	r3, #4
 8004eb6:	d007      	beq.n	8004ec8 <HAL_FLASHEx_Erase_IT+0x50>
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 8004eb8:	68a2      	ldr	r2, [r4, #8]
 8004eba:	4b07      	ldr	r3, [pc, #28]	; (8004ed8 <HAL_FLASHEx_Erase_IT+0x60>)
 8004ebc:	615a      	str	r2, [r3, #20]
      pFlash.Page = pEraseInit->Page;
 8004ebe:	6860      	ldr	r0, [r4, #4]
 8004ec0:	6118      	str	r0, [r3, #16]
      FLASH_PageErase(pEraseInit->Page);
 8004ec2:	f7ff ff8b 	bl	8004ddc <FLASH_PageErase>
 8004ec6:	e7ed      	b.n	8004ea4 <HAL_FLASHEx_Erase_IT+0x2c>
      pFlash.Page = 0;
 8004ec8:	4b03      	ldr	r3, [pc, #12]	; (8004ed8 <HAL_FLASHEx_Erase_IT+0x60>)
 8004eca:	2200      	movs	r2, #0
 8004ecc:	611a      	str	r2, [r3, #16]
      FLASH_MassErase();
 8004ece:	f7ff ff3d 	bl	8004d4c <FLASH_MassErase>
 8004ed2:	e7e7      	b.n	8004ea4 <HAL_FLASHEx_Erase_IT+0x2c>
  __HAL_LOCK(&pFlash);
 8004ed4:	2502      	movs	r5, #2
 8004ed6:	e7e5      	b.n	8004ea4 <HAL_FLASHEx_Erase_IT+0x2c>
 8004ed8:	2000065c 	.word	0x2000065c
 8004edc:	58004000 	.word	0x58004000

08004ee0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ee0:	b570      	push	{r4, r5, r6, lr}
  uint32_t position = 0x00u;
 8004ee2:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ee4:	e069      	b.n	8004fba <HAL_GPIO_Init+0xda>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ee6:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004ee8:	005e      	lsls	r6, r3, #1
 8004eea:	2403      	movs	r4, #3
 8004eec:	40b4      	lsls	r4, r6
 8004eee:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ef2:	68cc      	ldr	r4, [r1, #12]
 8004ef4:	40b4      	lsls	r4, r6
 8004ef6:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8004ef8:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004efa:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004efc:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f00:	684c      	ldr	r4, [r1, #4]
 8004f02:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8004f06:	409c      	lsls	r4, r3
 8004f08:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 8004f0c:	6044      	str	r4, [r0, #4]
 8004f0e:	e065      	b.n	8004fdc <HAL_GPIO_Init+0xfc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f10:	08dd      	lsrs	r5, r3, #3
 8004f12:	3508      	adds	r5, #8
 8004f14:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004f18:	f003 0407 	and.w	r4, r3, #7
 8004f1c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004f20:	240f      	movs	r4, #15
 8004f22:	fa04 f40c 	lsl.w	r4, r4, ip
 8004f26:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004f2a:	690c      	ldr	r4, [r1, #16]
 8004f2c:	fa04 f40c 	lsl.w	r4, r4, ip
 8004f30:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8004f34:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8004f38:	e067      	b.n	800500a <HAL_GPIO_Init+0x12a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004f3a:	2402      	movs	r4, #2
 8004f3c:	e000      	b.n	8004f40 <HAL_GPIO_Init+0x60>
 8004f3e:	2400      	movs	r4, #0
 8004f40:	fa04 f40e 	lsl.w	r4, r4, lr
 8004f44:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004f46:	f10c 0c02 	add.w	ip, ip, #2
 8004f4a:	4d4b      	ldr	r5, [pc, #300]	; (8005078 <HAL_GPIO_Init+0x198>)
 8004f4c:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004f50:	4c4a      	ldr	r4, [pc, #296]	; (800507c <HAL_GPIO_Init+0x19c>)
 8004f52:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8004f54:	43d4      	mvns	r4, r2
 8004f56:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004f5a:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8004f5e:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
 8004f62:	d001      	beq.n	8004f68 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8004f64:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8004f68:	4d44      	ldr	r5, [pc, #272]	; (800507c <HAL_GPIO_Init+0x19c>)
 8004f6a:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8004f6c:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8004f6e:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004f72:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8004f76:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
 8004f7a:	d001      	beq.n	8004f80 <HAL_GPIO_Init+0xa0>
        {
          temp |= iocurrent;
 8004f7c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8004f80:	4d3e      	ldr	r5, [pc, #248]	; (800507c <HAL_GPIO_Init+0x19c>)
 8004f82:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8004f84:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004f88:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004f8c:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8004f90:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
 8004f94:	d001      	beq.n	8004f9a <HAL_GPIO_Init+0xba>
        {
          temp |= iocurrent;
 8004f96:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8004f9a:	4d38      	ldr	r5, [pc, #224]	; (800507c <HAL_GPIO_Init+0x19c>)
 8004f9c:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8004fa0:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004fa4:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004fa6:	684e      	ldr	r6, [r1, #4]
 8004fa8:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8004fac:	d001      	beq.n	8004fb2 <HAL_GPIO_Init+0xd2>
        {
          temp |= iocurrent;
 8004fae:	ea42 0405 	orr.w	r4, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8004fb2:	4a32      	ldr	r2, [pc, #200]	; (800507c <HAL_GPIO_Init+0x19c>)
 8004fb4:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8004fb8:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004fba:	680a      	ldr	r2, [r1, #0]
 8004fbc:	fa32 f403 	lsrs.w	r4, r2, r3
 8004fc0:	d058      	beq.n	8005074 <HAL_GPIO_Init+0x194>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004fc2:	f04f 0c01 	mov.w	ip, #1
 8004fc6:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8004fca:	ea1c 0202 	ands.w	r2, ip, r2
 8004fce:	d0f3      	beq.n	8004fb8 <HAL_GPIO_Init+0xd8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004fd0:	684c      	ldr	r4, [r1, #4]
 8004fd2:	f004 0403 	and.w	r4, r4, #3
 8004fd6:	3c01      	subs	r4, #1
 8004fd8:	2c01      	cmp	r4, #1
 8004fda:	d984      	bls.n	8004ee6 <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004fdc:	684c      	ldr	r4, [r1, #4]
 8004fde:	f004 0403 	and.w	r4, r4, #3
 8004fe2:	2c03      	cmp	r4, #3
 8004fe4:	d00c      	beq.n	8005000 <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 8004fe6:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004fe8:	005d      	lsls	r5, r3, #1
 8004fea:	f04f 0c03 	mov.w	ip, #3
 8004fee:	fa0c fc05 	lsl.w	ip, ip, r5
 8004ff2:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ff6:	688c      	ldr	r4, [r1, #8]
 8004ff8:	40ac      	lsls	r4, r5
 8004ffa:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8004ffe:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005000:	684c      	ldr	r4, [r1, #4]
 8005002:	f004 0403 	and.w	r4, r4, #3
 8005006:	2c02      	cmp	r4, #2
 8005008:	d082      	beq.n	8004f10 <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 800500a:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800500c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8005010:	f04f 0c03 	mov.w	ip, #3
 8005014:	fa0c fc0e 	lsl.w	ip, ip, lr
 8005018:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800501c:	684c      	ldr	r4, [r1, #4]
 800501e:	f004 0403 	and.w	r4, r4, #3
 8005022:	fa04 f40e 	lsl.w	r4, r4, lr
 8005026:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 800502a:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800502c:	684c      	ldr	r4, [r1, #4]
 800502e:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8005032:	d0c1      	beq.n	8004fb8 <HAL_GPIO_Init+0xd8>
        temp = SYSCFG->EXTICR[position >> 2u];
 8005034:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8005038:	f10c 0502 	add.w	r5, ip, #2
 800503c:	4c0e      	ldr	r4, [pc, #56]	; (8005078 <HAL_GPIO_Init+0x198>)
 800503e:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8005042:	f003 0403 	and.w	r4, r3, #3
 8005046:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800504a:	2407      	movs	r4, #7
 800504c:	fa04 f40e 	lsl.w	r4, r4, lr
 8005050:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005054:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8005058:	f43f af71 	beq.w	8004f3e <HAL_GPIO_Init+0x5e>
 800505c:	4c08      	ldr	r4, [pc, #32]	; (8005080 <HAL_GPIO_Init+0x1a0>)
 800505e:	42a0      	cmp	r0, r4
 8005060:	d006      	beq.n	8005070 <HAL_GPIO_Init+0x190>
 8005062:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005066:	42a0      	cmp	r0, r4
 8005068:	f43f af67 	beq.w	8004f3a <HAL_GPIO_Init+0x5a>
 800506c:	2407      	movs	r4, #7
 800506e:	e767      	b.n	8004f40 <HAL_GPIO_Init+0x60>
 8005070:	2401      	movs	r4, #1
 8005072:	e765      	b.n	8004f40 <HAL_GPIO_Init+0x60>
  }
}
 8005074:	bd70      	pop	{r4, r5, r6, pc}
 8005076:	bf00      	nop
 8005078:	40010000 	.word	0x40010000
 800507c:	58000800 	.word	0x58000800
 8005080:	48000400 	.word	0x48000400

08005084 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 8005084:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005086:	fa31 f203 	lsrs.w	r2, r1, r3
 800508a:	d071      	beq.n	8005170 <HAL_GPIO_DeInit+0xec>
{
 800508c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800508e:	e02e      	b.n	80050ee <HAL_GPIO_DeInit+0x6a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005090:	2502      	movs	r5, #2
 8005092:	e000      	b.n	8005096 <HAL_GPIO_DeInit+0x12>
 8005094:	2500      	movs	r5, #0
 8005096:	fa05 fc0c 	lsl.w	ip, r5, ip
 800509a:	45a4      	cmp	ip, r4
 800509c:	d049      	beq.n	8005132 <HAL_GPIO_DeInit+0xae>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800509e:	6804      	ldr	r4, [r0, #0]
 80050a0:	005d      	lsls	r5, r3, #1
 80050a2:	f04f 0c03 	mov.w	ip, #3
 80050a6:	fa0c fc05 	lsl.w	ip, ip, r5
 80050aa:	ea44 040c 	orr.w	r4, r4, ip
 80050ae:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80050b0:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80050b4:	f10e 0e08 	add.w	lr, lr, #8
 80050b8:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 80050bc:	f003 0507 	and.w	r5, r3, #7
 80050c0:	00ae      	lsls	r6, r5, #2
 80050c2:	250f      	movs	r5, #15
 80050c4:	40b5      	lsls	r5, r6
 80050c6:	ea24 0405 	bic.w	r4, r4, r5
 80050ca:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80050ce:	6884      	ldr	r4, [r0, #8]
 80050d0:	ea24 040c 	bic.w	r4, r4, ip
 80050d4:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80050d6:	6844      	ldr	r4, [r0, #4]
 80050d8:	ea24 0202 	bic.w	r2, r4, r2
 80050dc:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80050de:	68c2      	ldr	r2, [r0, #12]
 80050e0:	ea22 020c 	bic.w	r2, r2, ip
 80050e4:	60c2      	str	r2, [r0, #12]
    }

    position++;
 80050e6:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 80050e8:	fa31 f203 	lsrs.w	r2, r1, r3
 80050ec:	d03f      	beq.n	800516e <HAL_GPIO_DeInit+0xea>
    iocurrent = (GPIO_Pin) & (1uL << position);
 80050ee:	2201      	movs	r2, #1
 80050f0:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 80050f2:	ea12 0701 	ands.w	r7, r2, r1
 80050f6:	d0f6      	beq.n	80050e6 <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2u];
 80050f8:	089e      	lsrs	r6, r3, #2
 80050fa:	1cb5      	adds	r5, r6, #2
 80050fc:	4c1d      	ldr	r4, [pc, #116]	; (8005174 <HAL_GPIO_DeInit+0xf0>)
 80050fe:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8005102:	f003 0c03 	and.w	ip, r3, #3
 8005106:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800510a:	f04f 0e07 	mov.w	lr, #7
 800510e:	fa0e fe0c 	lsl.w	lr, lr, ip
 8005112:	ea0e 0404 	and.w	r4, lr, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005116:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 800511a:	d0bb      	beq.n	8005094 <HAL_GPIO_DeInit+0x10>
 800511c:	4d16      	ldr	r5, [pc, #88]	; (8005178 <HAL_GPIO_DeInit+0xf4>)
 800511e:	42a8      	cmp	r0, r5
 8005120:	d005      	beq.n	800512e <HAL_GPIO_DeInit+0xaa>
 8005122:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005126:	42a8      	cmp	r0, r5
 8005128:	d0b2      	beq.n	8005090 <HAL_GPIO_DeInit+0xc>
 800512a:	2507      	movs	r5, #7
 800512c:	e7b3      	b.n	8005096 <HAL_GPIO_DeInit+0x12>
 800512e:	2501      	movs	r5, #1
 8005130:	e7b1      	b.n	8005096 <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 8005132:	4c12      	ldr	r4, [pc, #72]	; (800517c <HAL_GPIO_DeInit+0xf8>)
 8005134:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8005138:	ea25 0507 	bic.w	r5, r5, r7
 800513c:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8005140:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8005144:	ea25 0507 	bic.w	r5, r5, r7
 8005148:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 800514c:	6825      	ldr	r5, [r4, #0]
 800514e:	ea25 0507 	bic.w	r5, r5, r7
 8005152:	6025      	str	r5, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8005154:	6865      	ldr	r5, [r4, #4]
 8005156:	ea25 0707 	bic.w	r7, r5, r7
 800515a:	6067      	str	r7, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800515c:	4d05      	ldr	r5, [pc, #20]	; (8005174 <HAL_GPIO_DeInit+0xf0>)
 800515e:	3602      	adds	r6, #2
 8005160:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 8005164:	ea24 040e 	bic.w	r4, r4, lr
 8005168:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
 800516c:	e797      	b.n	800509e <HAL_GPIO_DeInit+0x1a>
  }
}
 800516e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	40010000 	.word	0x40010000
 8005178:	48000400 	.word	0x48000400
 800517c:	58000800 	.word	0x58000800

08005180 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005180:	b10a      	cbz	r2, 8005186 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005182:	6181      	str	r1, [r0, #24]
 8005184:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005186:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8005188:	4770      	bx	lr

0800518a <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800518a:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800518c:	ea01 0203 	and.w	r2, r1, r3
 8005190:	ea21 0103 	bic.w	r1, r1, r3
 8005194:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005198:	6181      	str	r1, [r0, #24]
}
 800519a:	4770      	bx	lr

0800519c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800519c:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800519e:	4b05      	ldr	r3, [pc, #20]	; (80051b4 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	4203      	tst	r3, r0
 80051a4:	d100      	bne.n	80051a8 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 80051a6:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80051a8:	4b02      	ldr	r3, [pc, #8]	; (80051b4 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80051aa:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80051ac:	f7fd fd4c 	bl	8002c48 <HAL_GPIO_EXTI_Callback>
}
 80051b0:	e7f9      	b.n	80051a6 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80051b2:	bf00      	nop
 80051b4:	58000800 	.word	0x58000800

080051b8 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80051b8:	6803      	ldr	r3, [r0, #0]
 80051ba:	699a      	ldr	r2, [r3, #24]
 80051bc:	f012 0f02 	tst.w	r2, #2
 80051c0:	d001      	beq.n	80051c6 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 80051c2:	2200      	movs	r2, #0
 80051c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051c6:	6803      	ldr	r3, [r0, #0]
 80051c8:	699a      	ldr	r2, [r3, #24]
 80051ca:	f012 0f01 	tst.w	r2, #1
 80051ce:	d103      	bne.n	80051d8 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80051d0:	699a      	ldr	r2, [r3, #24]
 80051d2:	f042 0201 	orr.w	r2, r2, #1
 80051d6:	619a      	str	r2, [r3, #24]
  }
}
 80051d8:	4770      	bx	lr

080051da <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80051da:	b410      	push	{r4}
 80051dc:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80051de:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80051e2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80051e6:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80051e8:	4321      	orrs	r1, r4
 80051ea:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80051ee:	6802      	ldr	r2, [r0, #0]
 80051f0:	6853      	ldr	r3, [r2, #4]
 80051f2:	0d64      	lsrs	r4, r4, #21
 80051f4:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 80051f8:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 80051fc:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8005200:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8005204:	f044 0403 	orr.w	r4, r4, #3
 8005208:	ea23 0404 	bic.w	r4, r3, r4
 800520c:	4321      	orrs	r1, r4
 800520e:	6051      	str	r1, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005210:	bc10      	pop	{r4}
 8005212:	4770      	bx	lr

08005214 <I2C_IsErrorOccurred>:
{
 8005214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005218:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 800521a:	6803      	ldr	r3, [r0, #0]
 800521c:	699f      	ldr	r7, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800521e:	f017 0710 	ands.w	r7, r7, #16
 8005222:	d04c      	beq.n	80052be <I2C_IsErrorOccurred+0xaa>
 8005224:	460e      	mov	r6, r1
 8005226:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005228:	2210      	movs	r2, #16
 800522a:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800522c:	2500      	movs	r5, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800522e:	6823      	ldr	r3, [r4, #0]
 8005230:	6998      	ldr	r0, [r3, #24]
 8005232:	f010 0f20 	tst.w	r0, #32
 8005236:	d13b      	bne.n	80052b0 <I2C_IsErrorOccurred+0x9c>
 8005238:	2d00      	cmp	r5, #0
 800523a:	d139      	bne.n	80052b0 <I2C_IsErrorOccurred+0x9c>
      if (Timeout != HAL_MAX_DELAY)
 800523c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8005240:	d0f5      	beq.n	800522e <I2C_IsErrorOccurred+0x1a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005242:	f7fc fbcd 	bl	80019e0 <HAL_GetTick>
 8005246:	eba0 0008 	sub.w	r0, r0, r8
 800524a:	42b0      	cmp	r0, r6
 800524c:	d801      	bhi.n	8005252 <I2C_IsErrorOccurred+0x3e>
 800524e:	2e00      	cmp	r6, #0
 8005250:	d1ed      	bne.n	800522e <I2C_IsErrorOccurred+0x1a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005252:	6821      	ldr	r1, [r4, #0]
 8005254:	684b      	ldr	r3, [r1, #4]
 8005256:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          tmp2 = hi2c->Mode;
 800525a:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 800525e:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005260:	6988      	ldr	r0, [r1, #24]
 8005262:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8005266:	d002      	beq.n	800526e <I2C_IsErrorOccurred+0x5a>
 8005268:	b90b      	cbnz	r3, 800526e <I2C_IsErrorOccurred+0x5a>
              (tmp1 != I2C_CR2_STOP) && \
 800526a:	2a20      	cmp	r2, #32
 800526c:	d118      	bne.n	80052a0 <I2C_IsErrorOccurred+0x8c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800526e:	6823      	ldr	r3, [r4, #0]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	f013 0f20 	tst.w	r3, #32
 8005276:	d1da      	bne.n	800522e <I2C_IsErrorOccurred+0x1a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005278:	f7fc fbb2 	bl	80019e0 <HAL_GetTick>
 800527c:	eba0 0008 	sub.w	r0, r0, r8
 8005280:	2819      	cmp	r0, #25
 8005282:	d9f4      	bls.n	800526e <I2C_IsErrorOccurred+0x5a>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005284:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005286:	f043 0320 	orr.w	r3, r3, #32
 800528a:	6463      	str	r3, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800528c:	2320      	movs	r3, #32
 800528e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005292:	2300      	movs	r3, #0
 8005294:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
              __HAL_UNLOCK(hi2c);
 8005298:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
              status = HAL_ERROR;
 800529c:	2501      	movs	r5, #1
 800529e:	e7e6      	b.n	800526e <I2C_IsErrorOccurred+0x5a>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80052a0:	684b      	ldr	r3, [r1, #4]
 80052a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052a6:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 80052a8:	f7fc fb9a 	bl	80019e0 <HAL_GetTick>
 80052ac:	4680      	mov	r8, r0
 80052ae:	e7de      	b.n	800526e <I2C_IsErrorOccurred+0x5a>
    if (status == HAL_OK)
 80052b0:	2d00      	cmp	r5, #0
 80052b2:	d140      	bne.n	8005336 <I2C_IsErrorOccurred+0x122>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052b4:	2220      	movs	r2, #32
 80052b6:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 80052b8:	2704      	movs	r7, #4
    status = HAL_ERROR;
 80052ba:	2501      	movs	r5, #1
 80052bc:	e000      	b.n	80052c0 <I2C_IsErrorOccurred+0xac>
  HAL_StatusTypeDef status = HAL_OK;
 80052be:	2500      	movs	r5, #0
  itflag = hi2c->Instance->ISR;
 80052c0:	6822      	ldr	r2, [r4, #0]
 80052c2:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80052c4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80052c8:	d005      	beq.n	80052d6 <I2C_IsErrorOccurred+0xc2>
    error_code |= HAL_I2C_ERROR_BERR;
 80052ca:	f047 0701 	orr.w	r7, r7, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80052ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80052d2:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 80052d4:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80052d6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80052da:	d006      	beq.n	80052ea <I2C_IsErrorOccurred+0xd6>
    error_code |= HAL_I2C_ERROR_OVR;
 80052dc:	f047 0708 	orr.w	r7, r7, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80052e0:	6822      	ldr	r2, [r4, #0]
 80052e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80052e6:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 80052e8:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80052ea:	f413 7f00 	tst.w	r3, #512	; 0x200
 80052ee:	d024      	beq.n	800533a <I2C_IsErrorOccurred+0x126>
    error_code |= HAL_I2C_ERROR_ARLO;
 80052f0:	f047 0702 	orr.w	r7, r7, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80052f4:	6823      	ldr	r3, [r4, #0]
 80052f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052fa:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 80052fc:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 80052fe:	4620      	mov	r0, r4
 8005300:	f7ff ff5a 	bl	80051b8 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8005304:	6822      	ldr	r2, [r4, #0]
 8005306:	6853      	ldr	r3, [r2, #4]
 8005308:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800530c:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005310:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005314:	f023 0301 	bic.w	r3, r3, #1
 8005318:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 800531a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800531c:	431f      	orrs	r7, r3
 800531e:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005320:	2320      	movs	r3, #32
 8005322:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005326:	2300      	movs	r3, #0
 8005328:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800532c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005330:	4628      	mov	r0, r5
 8005332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    error_code |= HAL_I2C_ERROR_AF;
 8005336:	2704      	movs	r7, #4
 8005338:	e7c2      	b.n	80052c0 <I2C_IsErrorOccurred+0xac>
  if (status != HAL_OK)
 800533a:	2d00      	cmp	r5, #0
 800533c:	d0f8      	beq.n	8005330 <I2C_IsErrorOccurred+0x11c>
 800533e:	e7de      	b.n	80052fe <I2C_IsErrorOccurred+0xea>

08005340 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8005340:	b570      	push	{r4, r5, r6, lr}
 8005342:	4604      	mov	r4, r0
 8005344:	460d      	mov	r5, r1
 8005346:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005348:	6823      	ldr	r3, [r4, #0]
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	f013 0f02 	tst.w	r3, #2
 8005350:	d11d      	bne.n	800538e <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005352:	4632      	mov	r2, r6
 8005354:	4629      	mov	r1, r5
 8005356:	4620      	mov	r0, r4
 8005358:	f7ff ff5c 	bl	8005214 <I2C_IsErrorOccurred>
 800535c:	b9c8      	cbnz	r0, 8005392 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 800535e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005362:	d0f1      	beq.n	8005348 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005364:	f7fc fb3c 	bl	80019e0 <HAL_GetTick>
 8005368:	1b80      	subs	r0, r0, r6
 800536a:	42a8      	cmp	r0, r5
 800536c:	d801      	bhi.n	8005372 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800536e:	2d00      	cmp	r5, #0
 8005370:	d1ea      	bne.n	8005348 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005372:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005374:	f043 0320 	orr.w	r3, r3, #32
 8005378:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800537a:	2320      	movs	r3, #32
 800537c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005380:	2300      	movs	r3, #0
 8005382:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8005386:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 800538a:	2001      	movs	r0, #1
 800538c:	e000      	b.n	8005390 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 800538e:	2000      	movs	r0, #0
}
 8005390:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8005392:	2001      	movs	r0, #1
 8005394:	e7fc      	b.n	8005390 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08005396 <I2C_WaitOnFlagUntilTimeout>:
{
 8005396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800539a:	4606      	mov	r6, r0
 800539c:	4688      	mov	r8, r1
 800539e:	4617      	mov	r7, r2
 80053a0:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053a2:	6834      	ldr	r4, [r6, #0]
 80053a4:	69a4      	ldr	r4, [r4, #24]
 80053a6:	ea38 0304 	bics.w	r3, r8, r4
 80053aa:	bf0c      	ite	eq
 80053ac:	f04f 0c01 	moveq.w	ip, #1
 80053b0:	f04f 0c00 	movne.w	ip, #0
 80053b4:	45bc      	cmp	ip, r7
 80053b6:	d118      	bne.n	80053ea <I2C_WaitOnFlagUntilTimeout+0x54>
    if (Timeout != HAL_MAX_DELAY)
 80053b8:	f1b5 3fff 	cmp.w	r5, #4294967295
 80053bc:	d0f1      	beq.n	80053a2 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053be:	f7fc fb0f 	bl	80019e0 <HAL_GetTick>
 80053c2:	9b06      	ldr	r3, [sp, #24]
 80053c4:	1ac0      	subs	r0, r0, r3
 80053c6:	42a8      	cmp	r0, r5
 80053c8:	d801      	bhi.n	80053ce <I2C_WaitOnFlagUntilTimeout+0x38>
 80053ca:	2d00      	cmp	r5, #0
 80053cc:	d1e9      	bne.n	80053a2 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053ce:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80053d0:	f043 0320 	orr.w	r3, r3, #32
 80053d4:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80053d6:	2320      	movs	r3, #32
 80053d8:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053dc:	2300      	movs	r3, #0
 80053de:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80053e2:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 80053e6:	2001      	movs	r0, #1
 80053e8:	e000      	b.n	80053ec <I2C_WaitOnFlagUntilTimeout+0x56>
  return HAL_OK;
 80053ea:	2000      	movs	r0, #0
}
 80053ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080053f0 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80053f0:	b570      	push	{r4, r5, r6, lr}
 80053f2:	4605      	mov	r5, r0
 80053f4:	460c      	mov	r4, r1
 80053f6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053f8:	682b      	ldr	r3, [r5, #0]
 80053fa:	699b      	ldr	r3, [r3, #24]
 80053fc:	f013 0f20 	tst.w	r3, #32
 8005400:	d11a      	bne.n	8005438 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005402:	4632      	mov	r2, r6
 8005404:	4621      	mov	r1, r4
 8005406:	4628      	mov	r0, r5
 8005408:	f7ff ff04 	bl	8005214 <I2C_IsErrorOccurred>
 800540c:	b9b0      	cbnz	r0, 800543c <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800540e:	f7fc fae7 	bl	80019e0 <HAL_GetTick>
 8005412:	1b80      	subs	r0, r0, r6
 8005414:	42a0      	cmp	r0, r4
 8005416:	d801      	bhi.n	800541c <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8005418:	2c00      	cmp	r4, #0
 800541a:	d1ed      	bne.n	80053f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800541c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800541e:	f043 0320 	orr.w	r3, r3, #32
 8005422:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005424:	2320      	movs	r3, #32
 8005426:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800542a:	2300      	movs	r3, #0
 800542c:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005430:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8005434:	2001      	movs	r0, #1
}
 8005436:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8005438:	2000      	movs	r0, #0
 800543a:	e7fc      	b.n	8005436 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 800543c:	2001      	movs	r0, #1
 800543e:	e7fa      	b.n	8005436 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08005440 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8005440:	b570      	push	{r4, r5, r6, lr}
 8005442:	4604      	mov	r4, r0
 8005444:	460d      	mov	r5, r1
 8005446:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005448:	6823      	ldr	r3, [r4, #0]
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	f013 0f04 	tst.w	r3, #4
 8005450:	d149      	bne.n	80054e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005452:	4632      	mov	r2, r6
 8005454:	4629      	mov	r1, r5
 8005456:	4620      	mov	r0, r4
 8005458:	f7ff fedc 	bl	8005214 <I2C_IsErrorOccurred>
 800545c:	4601      	mov	r1, r0
 800545e:	2800      	cmp	r0, #0
 8005460:	d143      	bne.n	80054ea <I2C_WaitOnRXNEFlagUntilTimeout+0xaa>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005462:	6823      	ldr	r3, [r4, #0]
 8005464:	699a      	ldr	r2, [r3, #24]
 8005466:	f012 0f20 	tst.w	r2, #32
 800546a:	d113      	bne.n	8005494 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800546c:	f7fc fab8 	bl	80019e0 <HAL_GetTick>
 8005470:	1b80      	subs	r0, r0, r6
 8005472:	42a8      	cmp	r0, r5
 8005474:	d801      	bhi.n	800547a <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 8005476:	2d00      	cmp	r5, #0
 8005478:	d1e6      	bne.n	8005448 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800547a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800547c:	f043 0320 	orr.w	r3, r3, #32
 8005480:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005482:	2320      	movs	r3, #32
 8005484:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8005488:	2300      	movs	r3, #0
 800548a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800548e:	2101      	movs	r1, #1
}
 8005490:	4608      	mov	r0, r1
 8005492:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005494:	699a      	ldr	r2, [r3, #24]
 8005496:	f012 0f04 	tst.w	r2, #4
 800549a:	d002      	beq.n	80054a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 800549c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800549e:	2a00      	cmp	r2, #0
 80054a0:	d1f6      	bne.n	8005490 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054a2:	699a      	ldr	r2, [r3, #24]
 80054a4:	f012 0f10 	tst.w	r2, #16
 80054a8:	d01a      	beq.n	80054e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054aa:	2210      	movs	r2, #16
 80054ac:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80054ae:	2304      	movs	r3, #4
 80054b0:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054b2:	6823      	ldr	r3, [r4, #0]
 80054b4:	2220      	movs	r2, #32
 80054b6:	61da      	str	r2, [r3, #28]
        I2C_RESET_CR2(hi2c);
 80054b8:	6821      	ldr	r1, [r4, #0]
 80054ba:	684b      	ldr	r3, [r1, #4]
 80054bc:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80054c0:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80054c4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80054c8:	f023 0301 	bic.w	r3, r3, #1
 80054cc:	604b      	str	r3, [r1, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 80054ce:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054d2:	2300      	movs	r3, #0
 80054d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80054d8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80054dc:	2101      	movs	r1, #1
 80054de:	e7d7      	b.n	8005490 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054e0:	2300      	movs	r3, #0
 80054e2:	6463      	str	r3, [r4, #68]	; 0x44
 80054e4:	e7e5      	b.n	80054b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x72>
  return HAL_OK;
 80054e6:	2100      	movs	r1, #0
 80054e8:	e7d2      	b.n	8005490 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
      return HAL_ERROR;
 80054ea:	2101      	movs	r1, #1
 80054ec:	e7d0      	b.n	8005490 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>

080054ee <HAL_I2C_Init>:
  if (hi2c == NULL)
 80054ee:	2800      	cmp	r0, #0
 80054f0:	d059      	beq.n	80055a6 <HAL_I2C_Init+0xb8>
{
 80054f2:	b510      	push	{r4, lr}
 80054f4:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80054f6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d043      	beq.n	8005586 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80054fe:	2324      	movs	r3, #36	; 0x24
 8005500:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8005504:	6822      	ldr	r2, [r4, #0]
 8005506:	6813      	ldr	r3, [r2, #0]
 8005508:	f023 0301 	bic.w	r3, r3, #1
 800550c:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800550e:	6863      	ldr	r3, [r4, #4]
 8005510:	6822      	ldr	r2, [r4, #0]
 8005512:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8005516:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005518:	6822      	ldr	r2, [r4, #0]
 800551a:	6893      	ldr	r3, [r2, #8]
 800551c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005520:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005522:	68e3      	ldr	r3, [r4, #12]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d033      	beq.n	8005590 <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005528:	68a3      	ldr	r3, [r4, #8]
 800552a:	6822      	ldr	r2, [r4, #0]
 800552c:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8005530:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005532:	68e3      	ldr	r3, [r4, #12]
 8005534:	2b02      	cmp	r3, #2
 8005536:	d031      	beq.n	800559c <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005538:	6822      	ldr	r2, [r4, #0]
 800553a:	6853      	ldr	r3, [r2, #4]
 800553c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005540:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005544:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005546:	6822      	ldr	r2, [r4, #0]
 8005548:	68d3      	ldr	r3, [r2, #12]
 800554a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800554e:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005550:	6923      	ldr	r3, [r4, #16]
 8005552:	6962      	ldr	r2, [r4, #20]
 8005554:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005556:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005558:	6822      	ldr	r2, [r4, #0]
 800555a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800555e:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005560:	69e3      	ldr	r3, [r4, #28]
 8005562:	6a21      	ldr	r1, [r4, #32]
 8005564:	6822      	ldr	r2, [r4, #0]
 8005566:	430b      	orrs	r3, r1
 8005568:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 800556a:	6822      	ldr	r2, [r4, #0]
 800556c:	6813      	ldr	r3, [r2, #0]
 800556e:	f043 0301 	orr.w	r3, r3, #1
 8005572:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005574:	2000      	movs	r0, #0
 8005576:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005578:	2320      	movs	r3, #32
 800557a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800557e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005580:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8005584:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8005586:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800558a:	f7fb ffa3 	bl	80014d4 <HAL_I2C_MspInit>
 800558e:	e7b6      	b.n	80054fe <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005590:	68a3      	ldr	r3, [r4, #8]
 8005592:	6822      	ldr	r2, [r4, #0]
 8005594:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005598:	6093      	str	r3, [r2, #8]
 800559a:	e7ca      	b.n	8005532 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800559c:	6823      	ldr	r3, [r4, #0]
 800559e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055a2:	605a      	str	r2, [r3, #4]
 80055a4:	e7c8      	b.n	8005538 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 80055a6:	2001      	movs	r0, #1
}
 80055a8:	4770      	bx	lr
	...

080055ac <HAL_I2C_Master_Transmit>:
{
 80055ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055b0:	b082      	sub	sp, #8
 80055b2:	460f      	mov	r7, r1
 80055b4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80055b6:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 80055ba:	b2c9      	uxtb	r1, r1
 80055bc:	2920      	cmp	r1, #32
 80055be:	f040 80a3 	bne.w	8005708 <HAL_I2C_Master_Transmit+0x15c>
 80055c2:	4604      	mov	r4, r0
 80055c4:	4690      	mov	r8, r2
 80055c6:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 80055c8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	f000 809f 	beq.w	8005710 <HAL_I2C_Master_Transmit+0x164>
 80055d2:	f04f 0a01 	mov.w	sl, #1
 80055d6:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80055da:	f7fc fa01 	bl	80019e0 <HAL_GetTick>
 80055de:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80055e0:	9000      	str	r0, [sp, #0]
 80055e2:	2319      	movs	r3, #25
 80055e4:	4652      	mov	r2, sl
 80055e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80055ea:	4620      	mov	r0, r4
 80055ec:	f7ff fed3 	bl	8005396 <I2C_WaitOnFlagUntilTimeout>
 80055f0:	2800      	cmp	r0, #0
 80055f2:	f040 808f 	bne.w	8005714 <HAL_I2C_Master_Transmit+0x168>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80055f6:	2321      	movs	r3, #33	; 0x21
 80055f8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80055fc:	2310      	movs	r3, #16
 80055fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005602:	2300      	movs	r3, #0
 8005604:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8005606:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800560a:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800560e:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005610:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005612:	b29b      	uxth	r3, r3
 8005614:	2bff      	cmp	r3, #255	; 0xff
 8005616:	d90a      	bls.n	800562e <HAL_I2C_Master_Transmit+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005618:	22ff      	movs	r2, #255	; 0xff
 800561a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800561c:	4b41      	ldr	r3, [pc, #260]	; (8005724 <HAL_I2C_Master_Transmit+0x178>)
 800561e:	9300      	str	r3, [sp, #0]
 8005620:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005624:	4639      	mov	r1, r7
 8005626:	4620      	mov	r0, r4
 8005628:	f7ff fdd7 	bl	80051da <I2C_TransferConfig>
 800562c:	e018      	b.n	8005660 <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = hi2c->XferCount;
 800562e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005630:	b292      	uxth	r2, r2
 8005632:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005634:	4b3b      	ldr	r3, [pc, #236]	; (8005724 <HAL_I2C_Master_Transmit+0x178>)
 8005636:	9300      	str	r3, [sp, #0]
 8005638:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800563c:	b2d2      	uxtb	r2, r2
 800563e:	4639      	mov	r1, r7
 8005640:	4620      	mov	r0, r4
 8005642:	f7ff fdca 	bl	80051da <I2C_TransferConfig>
 8005646:	e00b      	b.n	8005660 <HAL_I2C_Master_Transmit+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 8005648:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800564a:	b292      	uxth	r2, r2
 800564c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800564e:	2300      	movs	r3, #0
 8005650:	9300      	str	r3, [sp, #0]
 8005652:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005656:	b2d2      	uxtb	r2, r2
 8005658:	4639      	mov	r1, r7
 800565a:	4620      	mov	r0, r4
 800565c:	f7ff fdbd 	bl	80051da <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005660:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005662:	b29b      	uxth	r3, r3
 8005664:	2b00      	cmp	r3, #0
 8005666:	d033      	beq.n	80056d0 <HAL_I2C_Master_Transmit+0x124>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005668:	462a      	mov	r2, r5
 800566a:	4631      	mov	r1, r6
 800566c:	4620      	mov	r0, r4
 800566e:	f7ff fe67 	bl	8005340 <I2C_WaitOnTXISFlagUntilTimeout>
 8005672:	2800      	cmp	r0, #0
 8005674:	d150      	bne.n	8005718 <HAL_I2C_Master_Transmit+0x16c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005676:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005678:	6823      	ldr	r3, [r4, #0]
 800567a:	7812      	ldrb	r2, [r2, #0]
 800567c:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 800567e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005680:	3301      	adds	r3, #1
 8005682:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005684:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005686:	b29b      	uxth	r3, r3
 8005688:	3b01      	subs	r3, #1
 800568a:	b29b      	uxth	r3, r3
 800568c:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800568e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005690:	3b01      	subs	r3, #1
 8005692:	b29b      	uxth	r3, r3
 8005694:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005696:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005698:	b292      	uxth	r2, r2
 800569a:	2a00      	cmp	r2, #0
 800569c:	d0e0      	beq.n	8005660 <HAL_I2C_Master_Transmit+0xb4>
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1de      	bne.n	8005660 <HAL_I2C_Master_Transmit+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80056a2:	9500      	str	r5, [sp, #0]
 80056a4:	4633      	mov	r3, r6
 80056a6:	2200      	movs	r2, #0
 80056a8:	2180      	movs	r1, #128	; 0x80
 80056aa:	4620      	mov	r0, r4
 80056ac:	f7ff fe73 	bl	8005396 <I2C_WaitOnFlagUntilTimeout>
 80056b0:	bba0      	cbnz	r0, 800571c <HAL_I2C_Master_Transmit+0x170>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056b2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	2bff      	cmp	r3, #255	; 0xff
 80056b8:	d9c6      	bls.n	8005648 <HAL_I2C_Master_Transmit+0x9c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80056ba:	22ff      	movs	r2, #255	; 0xff
 80056bc:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80056be:	2300      	movs	r3, #0
 80056c0:	9300      	str	r3, [sp, #0]
 80056c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80056c6:	4639      	mov	r1, r7
 80056c8:	4620      	mov	r0, r4
 80056ca:	f7ff fd86 	bl	80051da <I2C_TransferConfig>
 80056ce:	e7c7      	b.n	8005660 <HAL_I2C_Master_Transmit+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056d0:	462a      	mov	r2, r5
 80056d2:	4631      	mov	r1, r6
 80056d4:	4620      	mov	r0, r4
 80056d6:	f7ff fe8b 	bl	80053f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80056da:	bb08      	cbnz	r0, 8005720 <HAL_I2C_Master_Transmit+0x174>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056dc:	6823      	ldr	r3, [r4, #0]
 80056de:	2220      	movs	r2, #32
 80056e0:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80056e2:	6821      	ldr	r1, [r4, #0]
 80056e4:	684b      	ldr	r3, [r1, #4]
 80056e6:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80056ea:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80056ee:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80056f2:	f023 0301 	bic.w	r3, r3, #1
 80056f6:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80056f8:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80056fc:	2300      	movs	r3, #0
 80056fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8005702:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8005706:	e000      	b.n	800570a <HAL_I2C_Master_Transmit+0x15e>
    return HAL_BUSY;
 8005708:	2002      	movs	r0, #2
}
 800570a:	b002      	add	sp, #8
 800570c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8005710:	2002      	movs	r0, #2
 8005712:	e7fa      	b.n	800570a <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 8005714:	2001      	movs	r0, #1
 8005716:	e7f8      	b.n	800570a <HAL_I2C_Master_Transmit+0x15e>
        return HAL_ERROR;
 8005718:	2001      	movs	r0, #1
 800571a:	e7f6      	b.n	800570a <HAL_I2C_Master_Transmit+0x15e>
          return HAL_ERROR;
 800571c:	2001      	movs	r0, #1
 800571e:	e7f4      	b.n	800570a <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 8005720:	2001      	movs	r0, #1
 8005722:	e7f2      	b.n	800570a <HAL_I2C_Master_Transmit+0x15e>
 8005724:	80002000 	.word	0x80002000

08005728 <HAL_I2C_Master_Receive>:
{
 8005728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800572c:	b082      	sub	sp, #8
 800572e:	460f      	mov	r7, r1
 8005730:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005732:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8005736:	b2c9      	uxtb	r1, r1
 8005738:	2920      	cmp	r1, #32
 800573a:	f040 80a2 	bne.w	8005882 <HAL_I2C_Master_Receive+0x15a>
 800573e:	4604      	mov	r4, r0
 8005740:	4690      	mov	r8, r2
 8005742:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 8005744:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005748:	2b01      	cmp	r3, #1
 800574a:	f000 809e 	beq.w	800588a <HAL_I2C_Master_Receive+0x162>
 800574e:	f04f 0a01 	mov.w	sl, #1
 8005752:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8005756:	f7fc f943 	bl	80019e0 <HAL_GetTick>
 800575a:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800575c:	9000      	str	r0, [sp, #0]
 800575e:	2319      	movs	r3, #25
 8005760:	4652      	mov	r2, sl
 8005762:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005766:	4620      	mov	r0, r4
 8005768:	f7ff fe15 	bl	8005396 <I2C_WaitOnFlagUntilTimeout>
 800576c:	2800      	cmp	r0, #0
 800576e:	f040 808e 	bne.w	800588e <HAL_I2C_Master_Receive+0x166>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005772:	2322      	movs	r3, #34	; 0x22
 8005774:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005778:	2310      	movs	r3, #16
 800577a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800577e:	2300      	movs	r3, #0
 8005780:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8005782:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8005786:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800578a:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800578c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800578e:	b29b      	uxth	r3, r3
 8005790:	2bff      	cmp	r3, #255	; 0xff
 8005792:	d90a      	bls.n	80057aa <HAL_I2C_Master_Receive+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005794:	22ff      	movs	r2, #255	; 0xff
 8005796:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005798:	4b41      	ldr	r3, [pc, #260]	; (80058a0 <HAL_I2C_Master_Receive+0x178>)
 800579a:	9300      	str	r3, [sp, #0]
 800579c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80057a0:	4639      	mov	r1, r7
 80057a2:	4620      	mov	r0, r4
 80057a4:	f7ff fd19 	bl	80051da <I2C_TransferConfig>
 80057a8:	e018      	b.n	80057dc <HAL_I2C_Master_Receive+0xb4>
      hi2c->XferSize = hi2c->XferCount;
 80057aa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80057ac:	b292      	uxth	r2, r2
 80057ae:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80057b0:	4b3b      	ldr	r3, [pc, #236]	; (80058a0 <HAL_I2C_Master_Receive+0x178>)
 80057b2:	9300      	str	r3, [sp, #0]
 80057b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057b8:	b2d2      	uxtb	r2, r2
 80057ba:	4639      	mov	r1, r7
 80057bc:	4620      	mov	r0, r4
 80057be:	f7ff fd0c 	bl	80051da <I2C_TransferConfig>
 80057c2:	e00b      	b.n	80057dc <HAL_I2C_Master_Receive+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 80057c4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80057c6:	b292      	uxth	r2, r2
 80057c8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80057ca:	2300      	movs	r3, #0
 80057cc:	9300      	str	r3, [sp, #0]
 80057ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057d2:	b2d2      	uxtb	r2, r2
 80057d4:	4639      	mov	r1, r7
 80057d6:	4620      	mov	r0, r4
 80057d8:	f7ff fcff 	bl	80051da <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80057dc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80057de:	b29b      	uxth	r3, r3
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d032      	beq.n	800584a <HAL_I2C_Master_Receive+0x122>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057e4:	462a      	mov	r2, r5
 80057e6:	4631      	mov	r1, r6
 80057e8:	4620      	mov	r0, r4
 80057ea:	f7ff fe29 	bl	8005440 <I2C_WaitOnRXNEFlagUntilTimeout>
 80057ee:	2800      	cmp	r0, #0
 80057f0:	d14f      	bne.n	8005892 <HAL_I2C_Master_Receive+0x16a>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80057f2:	6823      	ldr	r3, [r4, #0]
 80057f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057f8:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80057fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057fc:	3301      	adds	r3, #1
 80057fe:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8005800:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8005802:	3a01      	subs	r2, #1
 8005804:	b292      	uxth	r2, r2
 8005806:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005808:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800580a:	b29b      	uxth	r3, r3
 800580c:	3b01      	subs	r3, #1
 800580e:	b29b      	uxth	r3, r3
 8005810:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005812:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005814:	b29b      	uxth	r3, r3
 8005816:	2b00      	cmp	r3, #0
 8005818:	d0e0      	beq.n	80057dc <HAL_I2C_Master_Receive+0xb4>
 800581a:	2a00      	cmp	r2, #0
 800581c:	d1de      	bne.n	80057dc <HAL_I2C_Master_Receive+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800581e:	9500      	str	r5, [sp, #0]
 8005820:	4633      	mov	r3, r6
 8005822:	2180      	movs	r1, #128	; 0x80
 8005824:	4620      	mov	r0, r4
 8005826:	f7ff fdb6 	bl	8005396 <I2C_WaitOnFlagUntilTimeout>
 800582a:	bba0      	cbnz	r0, 8005896 <HAL_I2C_Master_Receive+0x16e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800582c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800582e:	b29b      	uxth	r3, r3
 8005830:	2bff      	cmp	r3, #255	; 0xff
 8005832:	d9c7      	bls.n	80057c4 <HAL_I2C_Master_Receive+0x9c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005834:	22ff      	movs	r2, #255	; 0xff
 8005836:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005838:	2300      	movs	r3, #0
 800583a:	9300      	str	r3, [sp, #0]
 800583c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005840:	4639      	mov	r1, r7
 8005842:	4620      	mov	r0, r4
 8005844:	f7ff fcc9 	bl	80051da <I2C_TransferConfig>
 8005848:	e7c8      	b.n	80057dc <HAL_I2C_Master_Receive+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800584a:	462a      	mov	r2, r5
 800584c:	4631      	mov	r1, r6
 800584e:	4620      	mov	r0, r4
 8005850:	f7ff fdce 	bl	80053f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005854:	bb08      	cbnz	r0, 800589a <HAL_I2C_Master_Receive+0x172>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005856:	6823      	ldr	r3, [r4, #0]
 8005858:	2220      	movs	r2, #32
 800585a:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800585c:	6821      	ldr	r1, [r4, #0]
 800585e:	684b      	ldr	r3, [r1, #4]
 8005860:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005864:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005868:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800586c:	f023 0301 	bic.w	r3, r3, #1
 8005870:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005872:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005876:	2300      	movs	r3, #0
 8005878:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800587c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8005880:	e000      	b.n	8005884 <HAL_I2C_Master_Receive+0x15c>
    return HAL_BUSY;
 8005882:	2002      	movs	r0, #2
}
 8005884:	b002      	add	sp, #8
 8005886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 800588a:	2002      	movs	r0, #2
 800588c:	e7fa      	b.n	8005884 <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 800588e:	2001      	movs	r0, #1
 8005890:	e7f8      	b.n	8005884 <HAL_I2C_Master_Receive+0x15c>
        return HAL_ERROR;
 8005892:	2001      	movs	r0, #1
 8005894:	e7f6      	b.n	8005884 <HAL_I2C_Master_Receive+0x15c>
          return HAL_ERROR;
 8005896:	2001      	movs	r0, #1
 8005898:	e7f4      	b.n	8005884 <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 800589a:	2001      	movs	r0, #1
 800589c:	e7f2      	b.n	8005884 <HAL_I2C_Master_Receive+0x15c>
 800589e:	bf00      	nop
 80058a0:	80002400 	.word	0x80002400

080058a4 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058a4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	2b20      	cmp	r3, #32
 80058ac:	d124      	bne.n	80058f8 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058ae:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d022      	beq.n	80058fc <HAL_I2CEx_ConfigAnalogFilter+0x58>
 80058b6:	2301      	movs	r3, #1
 80058b8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80058bc:	2324      	movs	r3, #36	; 0x24
 80058be:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80058c2:	6802      	ldr	r2, [r0, #0]
 80058c4:	6813      	ldr	r3, [r2, #0]
 80058c6:	f023 0301 	bic.w	r3, r3, #1
 80058ca:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80058cc:	6802      	ldr	r2, [r0, #0]
 80058ce:	6813      	ldr	r3, [r2, #0]
 80058d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058d4:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80058d6:	6802      	ldr	r2, [r0, #0]
 80058d8:	6813      	ldr	r3, [r2, #0]
 80058da:	4319      	orrs	r1, r3
 80058dc:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80058de:	6802      	ldr	r2, [r0, #0]
 80058e0:	6813      	ldr	r3, [r2, #0]
 80058e2:	f043 0301 	orr.w	r3, r3, #1
 80058e6:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058e8:	2320      	movs	r3, #32
 80058ea:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058ee:	2300      	movs	r3, #0
 80058f0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80058f4:	4618      	mov	r0, r3
 80058f6:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80058f8:	2002      	movs	r0, #2
 80058fa:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80058fc:	2002      	movs	r0, #2
  }
}
 80058fe:	4770      	bx	lr

08005900 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005900:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005904:	b2db      	uxtb	r3, r3
 8005906:	2b20      	cmp	r3, #32
 8005908:	d122      	bne.n	8005950 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800590a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800590e:	2b01      	cmp	r3, #1
 8005910:	d020      	beq.n	8005954 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8005912:	2301      	movs	r3, #1
 8005914:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005918:	2324      	movs	r3, #36	; 0x24
 800591a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800591e:	6802      	ldr	r2, [r0, #0]
 8005920:	6813      	ldr	r3, [r2, #0]
 8005922:	f023 0301 	bic.w	r3, r3, #1
 8005926:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005928:	6802      	ldr	r2, [r0, #0]
 800592a:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800592c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005930:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005934:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005936:	6802      	ldr	r2, [r0, #0]
 8005938:	6813      	ldr	r3, [r2, #0]
 800593a:	f043 0301 	orr.w	r3, r3, #1
 800593e:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005940:	2320      	movs	r3, #32
 8005942:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005946:	2300      	movs	r3, #0
 8005948:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800594c:	4618      	mov	r0, r3
 800594e:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8005950:	2002      	movs	r0, #2
 8005952:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8005954:	2002      	movs	r0, #2
  }
}
 8005956:	4770      	bx	lr

08005958 <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005958:	4a02      	ldr	r2, [pc, #8]	; (8005964 <HAL_PWR_EnableBkUpAccess+0xc>)
 800595a:	6813      	ldr	r3, [r2, #0]
 800595c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005960:	6013      	str	r3, [r2, #0]
}
 8005962:	4770      	bx	lr
 8005964:	58000400 	.word	0x58000400

08005968 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8005968:	b510      	push	{r4, lr}
 800596a:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 800596c:	b9a0      	cbnz	r0, 8005998 <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800596e:	4b0f      	ldr	r3, [pc, #60]	; (80059ac <HAL_PWR_EnterSLEEPMode+0x44>)
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005976:	d10a      	bne.n	800598e <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005978:	4a0d      	ldr	r2, [pc, #52]	; (80059b0 <HAL_PWR_EnterSLEEPMode+0x48>)
 800597a:	6913      	ldr	r3, [r2, #16]
 800597c:	f023 0304 	bic.w	r3, r3, #4
 8005980:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005982:	2c01      	cmp	r4, #1
 8005984:	d010      	beq.n	80059a8 <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005986:	bf40      	sev
    __WFE();
 8005988:	bf20      	wfe
    __WFE();
 800598a:	bf20      	wfe
  }
}
 800598c:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800598e:	f000 f821 	bl	80059d4 <HAL_PWREx_DisableLowPowerRunMode>
 8005992:	2800      	cmp	r0, #0
 8005994:	d0f0      	beq.n	8005978 <HAL_PWR_EnterSLEEPMode+0x10>
 8005996:	e7f9      	b.n	800598c <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8005998:	4b04      	ldr	r3, [pc, #16]	; (80059ac <HAL_PWR_EnterSLEEPMode+0x44>)
 800599a:	695b      	ldr	r3, [r3, #20]
 800599c:	f413 7f00 	tst.w	r3, #512	; 0x200
 80059a0:	d1ea      	bne.n	8005978 <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 80059a2:	f000 f80f 	bl	80059c4 <HAL_PWREx_EnableLowPowerRunMode>
 80059a6:	e7e7      	b.n	8005978 <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 80059a8:	bf30      	wfi
 80059aa:	e7ef      	b.n	800598c <HAL_PWR_EnterSLEEPMode+0x24>
 80059ac:	58000400 	.word	0x58000400
 80059b0:	e000ed00 	.word	0xe000ed00

080059b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 80059b4:	4b02      	ldr	r3, [pc, #8]	; (80059c0 <HAL_PWREx_GetVoltageRange+0xc>)
 80059b6:	6818      	ldr	r0, [r3, #0]
}
 80059b8:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	58000400 	.word	0x58000400

080059c4 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80059c4:	4a02      	ldr	r2, [pc, #8]	; (80059d0 <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 80059c6:	6813      	ldr	r3, [r2, #0]
 80059c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059cc:	6013      	str	r3, [r2, #0]
}
 80059ce:	4770      	bx	lr
 80059d0:	58000400 	.word	0x58000400

080059d4 <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80059d4:	4a0f      	ldr	r2, [pc, #60]	; (8005a14 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 80059d6:	6813      	ldr	r3, [r2, #0]
 80059d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059dc:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 80059de:	4b0e      	ldr	r3, [pc, #56]	; (8005a18 <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2232      	movs	r2, #50	; 0x32
 80059e4:	fb02 f303 	mul.w	r3, r2, r3
 80059e8:	4a0c      	ldr	r2, [pc, #48]	; (8005a1c <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 80059ea:	fba2 2303 	umull	r2, r3, r2, r3
 80059ee:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80059f0:	e000      	b.n	80059f4 <HAL_PWREx_DisableLowPowerRunMode+0x20>
  {
    wait_loop_index--;
 80059f2:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80059f4:	4a07      	ldr	r2, [pc, #28]	; (8005a14 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 80059f6:	6952      	ldr	r2, [r2, #20]
 80059f8:	f412 7f00 	tst.w	r2, #512	; 0x200
 80059fc:	d001      	beq.n	8005a02 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1f7      	bne.n	80059f2 <HAL_PWREx_DisableLowPowerRunMode+0x1e>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8005a02:	4b04      	ldr	r3, [pc, #16]	; (8005a14 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005a0a:	d101      	bne.n	8005a10 <HAL_PWREx_DisableLowPowerRunMode+0x3c>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 8005a0c:	2000      	movs	r0, #0
 8005a0e:	4770      	bx	lr
    return HAL_TIMEOUT;
 8005a10:	2003      	movs	r0, #3
}
 8005a12:	4770      	bx	lr
 8005a14:	58000400 	.word	0x58000400
 8005a18:	20000070 	.word	0x20000070
 8005a1c:	431bde83 	.word	0x431bde83

08005a20 <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8005a20:	4a0c      	ldr	r2, [pc, #48]	; (8005a54 <HAL_PWREx_EnterSTOP2Mode+0x34>)
 8005a22:	6813      	ldr	r3, [r2, #0]
 8005a24:	f023 0307 	bic.w	r3, r3, #7
 8005a28:	f043 0302 	orr.w	r3, r3, #2
 8005a2c:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005a2e:	4a0a      	ldr	r2, [pc, #40]	; (8005a58 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8005a30:	6913      	ldr	r3, [r2, #16]
 8005a32:	f043 0304 	orr.w	r3, r3, #4
 8005a36:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8005a38:	2801      	cmp	r0, #1
 8005a3a:	d008      	beq.n	8005a4e <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005a3c:	bf40      	sev
    __WFE();
 8005a3e:	bf20      	wfe
    __WFE();
 8005a40:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005a42:	4a05      	ldr	r2, [pc, #20]	; (8005a58 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8005a44:	6913      	ldr	r3, [r2, #16]
 8005a46:	f023 0304 	bic.w	r3, r3, #4
 8005a4a:	6113      	str	r3, [r2, #16]
}
 8005a4c:	4770      	bx	lr
    __WFI();
 8005a4e:	bf30      	wfi
 8005a50:	e7f7      	b.n	8005a42 <HAL_PWREx_EnterSTOP2Mode+0x22>
 8005a52:	bf00      	nop
 8005a54:	58000400 	.word	0x58000400
 8005a58:	e000ed00 	.word	0xe000ed00

08005a5c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005a5c:	b530      	push	{r4, r5, lr}
 8005a5e:	b089      	sub	sp, #36	; 0x24
 8005a60:	4604      	mov	r4, r0
 8005a62:	468c      	mov	ip, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8005a64:	4b2a      	ldr	r3, [pc, #168]	; (8005b10 <RCC_SetFlashLatency+0xb4>)
 8005a66:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005a6a:	9006      	str	r0, [sp, #24]
 8005a6c:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8005a70:	f103 0208 	add.w	r2, r3, #8
 8005a74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005a78:	9004      	str	r0, [sp, #16]
 8005a7a:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8005a7e:	ad01      	add	r5, sp, #4
 8005a80:	3310      	adds	r3, #16
 8005a82:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005a86:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a8a:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8005a8e:	d007      	beq.n	8005aa0 <RCC_SetFlashLatency+0x44>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005a90:	2300      	movs	r3, #0
 8005a92:	e014      	b.n	8005abe <RCC_SetFlashLatency+0x62>
        latency = FLASH_LATENCY_RANGE[index];
 8005a94:	aa08      	add	r2, sp, #32
 8005a96:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005a9a:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8005a9e:	e01e      	b.n	8005ade <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	2b02      	cmp	r3, #2
 8005aa4:	d808      	bhi.n	8005ab8 <RCC_SetFlashLatency+0x5c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005aa6:	aa08      	add	r2, sp, #32
 8005aa8:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8005aac:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 8005ab0:	42a2      	cmp	r2, r4
 8005ab2:	d2ef      	bcs.n	8005a94 <RCC_SetFlashLatency+0x38>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	e7f4      	b.n	8005aa2 <RCC_SetFlashLatency+0x46>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005ab8:	2500      	movs	r5, #0
 8005aba:	e010      	b.n	8005ade <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005abc:	3301      	adds	r3, #1
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	d80c      	bhi.n	8005adc <RCC_SetFlashLatency+0x80>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005ac2:	aa08      	add	r2, sp, #32
 8005ac4:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8005ac8:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 8005acc:	42a2      	cmp	r2, r4
 8005ace:	d3f5      	bcc.n	8005abc <RCC_SetFlashLatency+0x60>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005ad0:	aa08      	add	r2, sp, #32
 8005ad2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005ad6:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8005ada:	e000      	b.n	8005ade <RCC_SetFlashLatency+0x82>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005adc:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005ade:	4a0d      	ldr	r2, [pc, #52]	; (8005b14 <RCC_SetFlashLatency+0xb8>)
 8005ae0:	6813      	ldr	r3, [r2, #0]
 8005ae2:	f023 0307 	bic.w	r3, r3, #7
 8005ae6:	432b      	orrs	r3, r5
 8005ae8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005aea:	f7fb ff79 	bl	80019e0 <HAL_GetTick>
 8005aee:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005af0:	4b08      	ldr	r3, [pc, #32]	; (8005b14 <RCC_SetFlashLatency+0xb8>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 0307 	and.w	r3, r3, #7
 8005af8:	42ab      	cmp	r3, r5
 8005afa:	d006      	beq.n	8005b0a <RCC_SetFlashLatency+0xae>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005afc:	f7fb ff70 	bl	80019e0 <HAL_GetTick>
 8005b00:	1b00      	subs	r0, r0, r4
 8005b02:	2802      	cmp	r0, #2
 8005b04:	d9f4      	bls.n	8005af0 <RCC_SetFlashLatency+0x94>
    {
      return HAL_TIMEOUT;
 8005b06:	2003      	movs	r0, #3
 8005b08:	e000      	b.n	8005b0c <RCC_SetFlashLatency+0xb0>
    }
  }
  return HAL_OK;
 8005b0a:	2000      	movs	r0, #0
}
 8005b0c:	b009      	add	sp, #36	; 0x24
 8005b0e:	bd30      	pop	{r4, r5, pc}
 8005b10:	08013ea8 	.word	0x08013ea8
 8005b14:	58004000 	.word	0x58004000

08005b18 <RCC_SetFlashLatencyFromMSIRange>:
{
 8005b18:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8005b1a:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8005b1e:	4b0c      	ldr	r3, [pc, #48]	; (8005b50 <RCC_SetFlashLatencyFromMSIRange+0x38>)
 8005b20:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b28:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8005b2c:	f003 030f 	and.w	r3, r3, #15
 8005b30:	4a08      	ldr	r2, [pc, #32]	; (8005b54 <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 8005b32:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005b36:	fbb4 f4f0 	udiv	r4, r4, r0
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005b3a:	f7ff ff3b 	bl	80059b4 <HAL_PWREx_GetVoltageRange>
 8005b3e:	4601      	mov	r1, r0
 8005b40:	4805      	ldr	r0, [pc, #20]	; (8005b58 <RCC_SetFlashLatencyFromMSIRange+0x40>)
 8005b42:	fba0 3004 	umull	r3, r0, r0, r4
 8005b46:	0c80      	lsrs	r0, r0, #18
 8005b48:	f7ff ff88 	bl	8005a5c <RCC_SetFlashLatency>
}
 8005b4c:	bd10      	pop	{r4, pc}
 8005b4e:	bf00      	nop
 8005b50:	080144ec 	.word	0x080144ec
 8005b54:	0801448c 	.word	0x0801448c
 8005b58:	431bde83 	.word	0x431bde83

08005b5c <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b60:	6899      	ldr	r1, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005b68:	f011 010c 	ands.w	r1, r1, #12
 8005b6c:	d00a      	beq.n	8005b84 <HAL_RCC_GetSysClockFreq+0x28>
 8005b6e:	290c      	cmp	r1, #12
 8005b70:	d006      	beq.n	8005b80 <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b72:	2904      	cmp	r1, #4
 8005b74:	d047      	beq.n	8005c06 <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b76:	2908      	cmp	r1, #8
 8005b78:	d03b      	beq.n	8005bf2 <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 8005b7a:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 8005b7c:	4610      	mov	r0, r2
 8005b7e:	e026      	b.n	8005bce <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d1f6      	bne.n	8005b72 <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005b84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f013 0308 	ands.w	r3, r3, #8
 8005b8e:	d00d      	beq.n	8005bac <HAL_RCC_GetSysClockFreq+0x50>
 8005b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f013 0308 	ands.w	r3, r3, #8
 8005b9a:	d124      	bne.n	8005be6 <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005b9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ba0:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005ba4:	4a2e      	ldr	r2, [pc, #184]	; (8005c60 <HAL_RCC_GetSysClockFreq+0x104>)
 8005ba6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005baa:	e00e      	b.n	8005bca <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005bac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bb0:	6812      	ldr	r2, [r2, #0]
 8005bb2:	f012 0f08 	tst.w	r2, #8
 8005bb6:	d112      	bne.n	8005bde <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005bb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bc0:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8005bc4:	4a26      	ldr	r2, [pc, #152]	; (8005c60 <HAL_RCC_GetSysClockFreq+0x104>)
 8005bc6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005bca:	b1d1      	cbz	r1, 8005c02 <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 8005bcc:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005bce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005bd8:	2b0c      	cmp	r3, #12
 8005bda:	d01a      	beq.n	8005c12 <HAL_RCC_GetSysClockFreq+0xb6>
}
 8005bdc:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005bde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005be2:	6812      	ldr	r2, [r2, #0]
 8005be4:	e7ee      	b.n	8005bc4 <HAL_RCC_GetSysClockFreq+0x68>
 8005be6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bea:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005bec:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005bf0:	e7d8      	b.n	8005ba4 <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	f412 1280 	ands.w	r2, r2, #1048576	; 0x100000
 8005bfc:	d106      	bne.n	8005c0c <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 8005bfe:	4819      	ldr	r0, [pc, #100]	; (8005c64 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c00:	e7e5      	b.n	8005bce <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 8005c02:	4610      	mov	r0, r2
 8005c04:	e7e3      	b.n	8005bce <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8005c06:	2200      	movs	r2, #0
    sysclockfreq = HSI_VALUE;
 8005c08:	4817      	ldr	r0, [pc, #92]	; (8005c68 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005c0a:	e7e0      	b.n	8005bce <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8005c0c:	2200      	movs	r2, #0
      sysclockfreq = HSE_VALUE / 2U;
 8005c0e:	4816      	ldr	r0, [pc, #88]	; (8005c68 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005c10:	e7dd      	b.n	8005bce <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005c12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d009      	beq.n	8005c34 <HAL_RCC_GetSysClockFreq+0xd8>
 8005c20:	2b03      	cmp	r3, #3
 8005c22:	d108      	bne.n	8005c36 <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005c2e:	d115      	bne.n	8005c5c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8005c30:	4a0c      	ldr	r2, [pc, #48]	; (8005c64 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c32:	e000      	b.n	8005c36 <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 8005c34:	4a0c      	ldr	r2, [pc, #48]	; (8005c68 <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005c36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c3a:	68d8      	ldr	r0, [r3, #12]
 8005c3c:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005c40:	fb00 f202 	mul.w	r2, r0, r2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005c44:	68d8      	ldr	r0, [r3, #12]
 8005c46:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8005c4a:	3001      	adds	r0, #1
 8005c4c:	fbb2 f2f0 	udiv	r2, r2, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005c50:	68d8      	ldr	r0, [r3, #12]
 8005c52:	0f40      	lsrs	r0, r0, #29
 8005c54:	3001      	adds	r0, #1
 8005c56:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 8005c5a:	e7bf      	b.n	8005bdc <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 8005c5c:	4a02      	ldr	r2, [pc, #8]	; (8005c68 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005c5e:	e7ea      	b.n	8005c36 <HAL_RCC_GetSysClockFreq+0xda>
 8005c60:	080144ec 	.word	0x080144ec
 8005c64:	01e84800 	.word	0x01e84800
 8005c68:	00f42400 	.word	0x00f42400

08005c6c <HAL_RCC_GetHCLKFreq>:
{
 8005c6c:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005c6e:	f7ff ff75 	bl	8005b5c <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005c72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005c7c:	4a02      	ldr	r2, [pc, #8]	; (8005c88 <HAL_RCC_GetHCLKFreq+0x1c>)
 8005c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8005c82:	fbb0 f0f3 	udiv	r0, r0, r3
 8005c86:	bd08      	pop	{r3, pc}
 8005c88:	0801448c 	.word	0x0801448c

08005c8c <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8005c8c:	2800      	cmp	r0, #0
 8005c8e:	f000 8319 	beq.w	80062c4 <HAL_RCC_OscConfig+0x638>
{
 8005c92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c94:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005c96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c9a:	689d      	ldr	r5, [r3, #8]
 8005c9c:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005ca0:	68de      	ldr	r6, [r3, #12]
 8005ca2:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005ca6:	6803      	ldr	r3, [r0, #0]
 8005ca8:	f013 0f20 	tst.w	r3, #32
 8005cac:	f000 808f 	beq.w	8005dce <HAL_RCC_OscConfig+0x142>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005cb0:	b1ed      	cbz	r5, 8005cee <HAL_RCC_OscConfig+0x62>
 8005cb2:	2d0c      	cmp	r5, #12
 8005cb4:	d019      	beq.n	8005cea <HAL_RCC_OscConfig+0x5e>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005cb6:	6a23      	ldr	r3, [r4, #32]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f000 80bc 	beq.w	8005e36 <HAL_RCC_OscConfig+0x1aa>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005cbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cc2:	6813      	ldr	r3, [r2, #0]
 8005cc4:	f043 0301 	orr.w	r3, r3, #1
 8005cc8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005cca:	f7fb fe89 	bl	80019e0 <HAL_GetTick>
 8005cce:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f013 0f02 	tst.w	r3, #2
 8005cda:	d165      	bne.n	8005da8 <HAL_RCC_OscConfig+0x11c>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005cdc:	f7fb fe80 	bl	80019e0 <HAL_GetTick>
 8005ce0:	1bc0      	subs	r0, r0, r7
 8005ce2:	2802      	cmp	r0, #2
 8005ce4:	d9f4      	bls.n	8005cd0 <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 8005ce6:	2003      	movs	r0, #3
 8005ce8:	e2f9      	b.n	80062de <HAL_RCC_OscConfig+0x652>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005cea:	2e01      	cmp	r6, #1
 8005cec:	d1e3      	bne.n	8005cb6 <HAL_RCC_OscConfig+0x2a>
 8005cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f013 0f02 	tst.w	r3, #2
 8005cf8:	d003      	beq.n	8005d02 <HAL_RCC_OscConfig+0x76>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005cfa:	6a23      	ldr	r3, [r4, #32]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f000 82e3 	beq.w	80062c8 <HAL_RCC_OscConfig+0x63c>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005d02:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f013 0f08 	tst.w	r3, #8
 8005d0e:	d029      	beq.n	8005d64 <HAL_RCC_OscConfig+0xd8>
 8005d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d1a:	4298      	cmp	r0, r3
 8005d1c:	d92a      	bls.n	8005d74 <HAL_RCC_OscConfig+0xe8>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005d1e:	f7ff fefb 	bl	8005b18 <RCC_SetFlashLatencyFromMSIRange>
 8005d22:	2800      	cmp	r0, #0
 8005d24:	f040 82d2 	bne.w	80062cc <HAL_RCC_OscConfig+0x640>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	f042 0208 	orr.w	r2, r2, #8
 8005d32:	601a      	str	r2, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005d3a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005d3c:	430a      	orrs	r2, r1
 8005d3e:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d40:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005d42:	685a      	ldr	r2, [r3, #4]
 8005d44:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005d48:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005d4c:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005d4e:	f7ff ff8d 	bl	8005c6c <HAL_RCC_GetHCLKFreq>
 8005d52:	4bb0      	ldr	r3, [pc, #704]	; (8006014 <HAL_RCC_OscConfig+0x388>)
 8005d54:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8005d56:	4bb0      	ldr	r3, [pc, #704]	; (8006018 <HAL_RCC_OscConfig+0x38c>)
 8005d58:	6818      	ldr	r0, [r3, #0]
 8005d5a:	f7fb fe3f 	bl	80019dc <HAL_InitTick>
        if (status != HAL_OK)
 8005d5e:	2800      	cmp	r0, #0
 8005d60:	d035      	beq.n	8005dce <HAL_RCC_OscConfig+0x142>
 8005d62:	e2bc      	b.n	80062de <HAL_RCC_OscConfig+0x652>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d6c:	091b      	lsrs	r3, r3, #4
 8005d6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d72:	e7d2      	b.n	8005d1a <HAL_RCC_OscConfig+0x8e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	f042 0208 	orr.w	r2, r2, #8
 8005d7e:	601a      	str	r2, [r3, #0]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005d86:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005d88:	430a      	orrs	r2, r1
 8005d8a:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d8c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005d8e:	685a      	ldr	r2, [r3, #4]
 8005d90:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005d94:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005d98:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005d9a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005d9c:	f7ff febc 	bl	8005b18 <RCC_SetFlashLatencyFromMSIRange>
 8005da0:	2800      	cmp	r0, #0
 8005da2:	d0d4      	beq.n	8005d4e <HAL_RCC_OscConfig+0xc2>
            return HAL_ERROR;
 8005da4:	2001      	movs	r0, #1
 8005da6:	e29a      	b.n	80062de <HAL_RCC_OscConfig+0x652>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	f042 0208 	orr.w	r2, r2, #8
 8005db2:	601a      	str	r2, [r3, #0]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005dba:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005dbc:	430a      	orrs	r2, r1
 8005dbe:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005dc0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005dc2:	685a      	ldr	r2, [r3, #4]
 8005dc4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005dc8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005dcc:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005dce:	6823      	ldr	r3, [r4, #0]
 8005dd0:	f013 0f01 	tst.w	r3, #1
 8005dd4:	d051      	beq.n	8005e7a <HAL_RCC_OscConfig+0x1ee>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005dd6:	2d08      	cmp	r5, #8
 8005dd8:	d045      	beq.n	8005e66 <HAL_RCC_OscConfig+0x1da>
 8005dda:	2d0c      	cmp	r5, #12
 8005ddc:	d041      	beq.n	8005e62 <HAL_RCC_OscConfig+0x1d6>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8005dde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005de2:	6813      	ldr	r3, [r2, #0]
 8005de4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005de8:	68a1      	ldr	r1, [r4, #8]
 8005dea:	430b      	orrs	r3, r1
 8005dec:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dee:	6863      	ldr	r3, [r4, #4]
 8005df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005df4:	d063      	beq.n	8005ebe <HAL_RCC_OscConfig+0x232>
 8005df6:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8005dfa:	d065      	beq.n	8005ec8 <HAL_RCC_OscConfig+0x23c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005e06:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8005e0e:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e10:	6863      	ldr	r3, [r4, #4]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d063      	beq.n	8005ede <HAL_RCC_OscConfig+0x252>
        tickstart = HAL_GetTick();
 8005e16:	f7fb fde3 	bl	80019e0 <HAL_GetTick>
 8005e1a:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005e26:	d128      	bne.n	8005e7a <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e28:	f7fb fdda 	bl	80019e0 <HAL_GetTick>
 8005e2c:	1bc0      	subs	r0, r0, r7
 8005e2e:	2864      	cmp	r0, #100	; 0x64
 8005e30:	d9f4      	bls.n	8005e1c <HAL_RCC_OscConfig+0x190>
            return HAL_TIMEOUT;
 8005e32:	2003      	movs	r0, #3
 8005e34:	e253      	b.n	80062de <HAL_RCC_OscConfig+0x652>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005e36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e3a:	6813      	ldr	r3, [r2, #0]
 8005e3c:	f023 0301 	bic.w	r3, r3, #1
 8005e40:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005e42:	f7fb fdcd 	bl	80019e0 <HAL_GetTick>
 8005e46:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f013 0f02 	tst.w	r3, #2
 8005e52:	d0bc      	beq.n	8005dce <HAL_RCC_OscConfig+0x142>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005e54:	f7fb fdc4 	bl	80019e0 <HAL_GetTick>
 8005e58:	1bc0      	subs	r0, r0, r7
 8005e5a:	2802      	cmp	r0, #2
 8005e5c:	d9f4      	bls.n	8005e48 <HAL_RCC_OscConfig+0x1bc>
            return HAL_TIMEOUT;
 8005e5e:	2003      	movs	r0, #3
 8005e60:	e23d      	b.n	80062de <HAL_RCC_OscConfig+0x652>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005e62:	2e03      	cmp	r6, #3
 8005e64:	d1bb      	bne.n	8005dde <HAL_RCC_OscConfig+0x152>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005e66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005e70:	d003      	beq.n	8005e7a <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e72:	6863      	ldr	r3, [r4, #4]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f000 822b 	beq.w	80062d0 <HAL_RCC_OscConfig+0x644>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e7a:	6823      	ldr	r3, [r4, #0]
 8005e7c:	f013 0f02 	tst.w	r3, #2
 8005e80:	d052      	beq.n	8005f28 <HAL_RCC_OscConfig+0x29c>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005e82:	2d04      	cmp	r5, #4
 8005e84:	d03d      	beq.n	8005f02 <HAL_RCC_OscConfig+0x276>
 8005e86:	2d0c      	cmp	r5, #12
 8005e88:	d039      	beq.n	8005efe <HAL_RCC_OscConfig+0x272>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e8a:	6923      	ldr	r3, [r4, #16]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f000 8091 	beq.w	8005fb4 <HAL_RCC_OscConfig+0x328>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005e92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e96:	6813      	ldr	r3, [r2, #0]
 8005e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e9c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005e9e:	f7fb fd9f 	bl	80019e0 <HAL_GetTick>
 8005ea2:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005eae:	d177      	bne.n	8005fa0 <HAL_RCC_OscConfig+0x314>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005eb0:	f7fb fd96 	bl	80019e0 <HAL_GetTick>
 8005eb4:	1b80      	subs	r0, r0, r6
 8005eb6:	2802      	cmp	r0, #2
 8005eb8:	d9f4      	bls.n	8005ea4 <HAL_RCC_OscConfig+0x218>
            return HAL_TIMEOUT;
 8005eba:	2003      	movs	r0, #3
 8005ebc:	e20f      	b.n	80062de <HAL_RCC_OscConfig+0x652>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005ebe:	6813      	ldr	r3, [r2, #0]
 8005ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ec4:	6013      	str	r3, [r2, #0]
}
 8005ec6:	e7a3      	b.n	8005e10 <HAL_RCC_OscConfig+0x184>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8005ed2:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005eda:	601a      	str	r2, [r3, #0]
}
 8005edc:	e798      	b.n	8005e10 <HAL_RCC_OscConfig+0x184>
        tickstart = HAL_GetTick();
 8005ede:	f7fb fd7f 	bl	80019e0 <HAL_GetTick>
 8005ee2:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005ee4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005eee:	d0c4      	beq.n	8005e7a <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ef0:	f7fb fd76 	bl	80019e0 <HAL_GetTick>
 8005ef4:	1bc0      	subs	r0, r0, r7
 8005ef6:	2864      	cmp	r0, #100	; 0x64
 8005ef8:	d9f4      	bls.n	8005ee4 <HAL_RCC_OscConfig+0x258>
            return HAL_TIMEOUT;
 8005efa:	2003      	movs	r0, #3
 8005efc:	e1ef      	b.n	80062de <HAL_RCC_OscConfig+0x652>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005efe:	2e02      	cmp	r6, #2
 8005f00:	d1c3      	bne.n	8005e8a <HAL_RCC_OscConfig+0x1fe>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005f0c:	d003      	beq.n	8005f16 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f0e:	6923      	ldr	r3, [r4, #16]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	f000 81df 	beq.w	80062d4 <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f16:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005f18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f1c:	6853      	ldr	r3, [r2, #4]
 8005f1e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005f22:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005f26:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f28:	6823      	ldr	r3, [r4, #0]
 8005f2a:	f013 0f08 	tst.w	r3, #8
 8005f2e:	f000 808e 	beq.w	800604e <HAL_RCC_OscConfig+0x3c2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f32:	69a3      	ldr	r3, [r4, #24]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d071      	beq.n	800601c <HAL_RCC_OscConfig+0x390>
      uint32_t csr_temp = RCC->CSR;
 8005f38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8005f40:	69e1      	ldr	r1, [r4, #28]
 8005f42:	f003 0210 	and.w	r2, r3, #16
 8005f46:	4291      	cmp	r1, r2
 8005f48:	d011      	beq.n	8005f6e <HAL_RCC_OscConfig+0x2e2>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005f4a:	f003 0203 	and.w	r2, r3, #3
 8005f4e:	2a02      	cmp	r2, #2
 8005f50:	f000 81c2 	beq.w	80062d8 <HAL_RCC_OscConfig+0x64c>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8005f54:	f013 0f01 	tst.w	r3, #1
 8005f58:	d142      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x354>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8005f5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f5e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005f62:	f023 0310 	bic.w	r3, r3, #16
 8005f66:	69e1      	ldr	r1, [r4, #28]
 8005f68:	430b      	orrs	r3, r1
 8005f6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8005f6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f72:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005f76:	f043 0301 	orr.w	r3, r3, #1
 8005f7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8005f7e:	f7fb fd2f 	bl	80019e0 <HAL_GetTick>
 8005f82:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f8c:	f013 0f02 	tst.w	r3, #2
 8005f90:	d15d      	bne.n	800604e <HAL_RCC_OscConfig+0x3c2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f92:	f7fb fd25 	bl	80019e0 <HAL_GetTick>
 8005f96:	1b80      	subs	r0, r0, r6
 8005f98:	2811      	cmp	r0, #17
 8005f9a:	d9f3      	bls.n	8005f84 <HAL_RCC_OscConfig+0x2f8>
          return HAL_TIMEOUT;
 8005f9c:	2003      	movs	r0, #3
 8005f9e:	e19e      	b.n	80062de <HAL_RCC_OscConfig+0x652>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fa0:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005fa2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fa6:	6853      	ldr	r3, [r2, #4]
 8005fa8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005fac:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005fb0:	6053      	str	r3, [r2, #4]
}
 8005fb2:	e7b9      	b.n	8005f28 <HAL_RCC_OscConfig+0x29c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005fb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fb8:	6813      	ldr	r3, [r2, #0]
 8005fba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fbe:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005fc0:	f7fb fd0e 	bl	80019e0 <HAL_GetTick>
 8005fc4:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005fc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005fd0:	d0aa      	beq.n	8005f28 <HAL_RCC_OscConfig+0x29c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fd2:	f7fb fd05 	bl	80019e0 <HAL_GetTick>
 8005fd6:	1b80      	subs	r0, r0, r6
 8005fd8:	2802      	cmp	r0, #2
 8005fda:	d9f4      	bls.n	8005fc6 <HAL_RCC_OscConfig+0x33a>
            return HAL_TIMEOUT;
 8005fdc:	2003      	movs	r0, #3
 8005fde:	e17e      	b.n	80062de <HAL_RCC_OscConfig+0x652>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005fe0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fe4:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005fe8:	f023 0301 	bic.w	r3, r3, #1
 8005fec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 8005ff0:	f7fb fcf6 	bl	80019e0 <HAL_GetTick>
 8005ff4:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ffa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ffe:	f013 0f02 	tst.w	r3, #2
 8006002:	d0aa      	beq.n	8005f5a <HAL_RCC_OscConfig+0x2ce>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006004:	f7fb fcec 	bl	80019e0 <HAL_GetTick>
 8006008:	1b80      	subs	r0, r0, r6
 800600a:	2811      	cmp	r0, #17
 800600c:	d9f3      	bls.n	8005ff6 <HAL_RCC_OscConfig+0x36a>
              return HAL_TIMEOUT;
 800600e:	2003      	movs	r0, #3
 8006010:	e165      	b.n	80062de <HAL_RCC_OscConfig+0x652>
 8006012:	bf00      	nop
 8006014:	20000070 	.word	0x20000070
 8006018:	20000074 	.word	0x20000074
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800601c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006020:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8006024:	f023 0301 	bic.w	r3, r3, #1
 8006028:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 800602c:	f7fb fcd8 	bl	80019e0 <HAL_GetTick>
 8006030:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8006032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006036:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800603a:	f013 0f02 	tst.w	r3, #2
 800603e:	d006      	beq.n	800604e <HAL_RCC_OscConfig+0x3c2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006040:	f7fb fcce 	bl	80019e0 <HAL_GetTick>
 8006044:	1b80      	subs	r0, r0, r6
 8006046:	2811      	cmp	r0, #17
 8006048:	d9f3      	bls.n	8006032 <HAL_RCC_OscConfig+0x3a6>
          return HAL_TIMEOUT;
 800604a:	2003      	movs	r0, #3
 800604c:	e147      	b.n	80062de <HAL_RCC_OscConfig+0x652>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800604e:	6823      	ldr	r3, [r4, #0]
 8006050:	f013 0f04 	tst.w	r3, #4
 8006054:	f000 80b1 	beq.w	80061ba <HAL_RCC_OscConfig+0x52e>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8006058:	4ba8      	ldr	r3, [pc, #672]	; (80062fc <HAL_RCC_OscConfig+0x670>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006060:	d110      	bne.n	8006084 <HAL_RCC_OscConfig+0x3f8>
      HAL_PWR_EnableBkUpAccess();
 8006062:	f7ff fc79 	bl	8005958 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8006066:	f7fb fcbb 	bl	80019e0 <HAL_GetTick>
 800606a:	4606      	mov	r6, r0
 800606c:	4ba3      	ldr	r3, [pc, #652]	; (80062fc <HAL_RCC_OscConfig+0x670>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006074:	d106      	bne.n	8006084 <HAL_RCC_OscConfig+0x3f8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006076:	f7fb fcb3 	bl	80019e0 <HAL_GetTick>
 800607a:	1b80      	subs	r0, r0, r6
 800607c:	2802      	cmp	r0, #2
 800607e:	d9f5      	bls.n	800606c <HAL_RCC_OscConfig+0x3e0>
          return HAL_TIMEOUT;
 8006080:	2003      	movs	r0, #3
 8006082:	e12c      	b.n	80062de <HAL_RCC_OscConfig+0x652>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006084:	68e3      	ldr	r3, [r4, #12]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d061      	beq.n	800614e <HAL_RCC_OscConfig+0x4c2>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800608a:	2b85      	cmp	r3, #133	; 0x85
 800608c:	d001      	beq.n	8006092 <HAL_RCC_OscConfig+0x406>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800608e:	2b05      	cmp	r3, #5
 8006090:	d107      	bne.n	80060a2 <HAL_RCC_OscConfig+0x416>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006092:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006096:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800609a:	f043 0304 	orr.w	r3, r3, #4
 800609e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 80060a2:	f7fb fc9d 	bl	80019e0 <HAL_GetTick>
 80060a6:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80060a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060ac:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80060b0:	f043 0301 	orr.w	r3, r3, #1
 80060b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80060b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060c0:	f013 0f02 	tst.w	r3, #2
 80060c4:	d108      	bne.n	80060d8 <HAL_RCC_OscConfig+0x44c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060c6:	f7fb fc8b 	bl	80019e0 <HAL_GetTick>
 80060ca:	1b80      	subs	r0, r0, r6
 80060cc:	f241 3388 	movw	r3, #5000	; 0x1388
 80060d0:	4298      	cmp	r0, r3
 80060d2:	d9f1      	bls.n	80060b8 <HAL_RCC_OscConfig+0x42c>
          return HAL_TIMEOUT;
 80060d4:	2003      	movs	r0, #3
 80060d6:	e102      	b.n	80062de <HAL_RCC_OscConfig+0x652>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80060d8:	68e3      	ldr	r3, [r4, #12]
 80060da:	2b81      	cmp	r3, #129	; 0x81
 80060dc:	d001      	beq.n	80060e2 <HAL_RCC_OscConfig+0x456>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80060de:	2b85      	cmp	r3, #133	; 0x85
 80060e0:	d11a      	bne.n	8006118 <HAL_RCC_OscConfig+0x48c>
        tickstart = HAL_GetTick();
 80060e2:	f7fb fc7d 	bl	80019e0 <HAL_GetTick>
 80060e6:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80060e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060ec:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80060f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80060f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006100:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8006104:	d159      	bne.n	80061ba <HAL_RCC_OscConfig+0x52e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006106:	f7fb fc6b 	bl	80019e0 <HAL_GetTick>
 800610a:	1b80      	subs	r0, r0, r6
 800610c:	f241 3388 	movw	r3, #5000	; 0x1388
 8006110:	4298      	cmp	r0, r3
 8006112:	d9f1      	bls.n	80060f8 <HAL_RCC_OscConfig+0x46c>
            return HAL_TIMEOUT;
 8006114:	2003      	movs	r0, #3
 8006116:	e0e2      	b.n	80062de <HAL_RCC_OscConfig+0x652>
        tickstart = HAL_GetTick();
 8006118:	f7fb fc62 	bl	80019e0 <HAL_GetTick>
 800611c:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800611e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006122:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006126:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800612a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800612e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006136:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800613a:	d03e      	beq.n	80061ba <HAL_RCC_OscConfig+0x52e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800613c:	f7fb fc50 	bl	80019e0 <HAL_GetTick>
 8006140:	1b80      	subs	r0, r0, r6
 8006142:	f241 3388 	movw	r3, #5000	; 0x1388
 8006146:	4298      	cmp	r0, r3
 8006148:	d9f1      	bls.n	800612e <HAL_RCC_OscConfig+0x4a2>
            return HAL_TIMEOUT;
 800614a:	2003      	movs	r0, #3
 800614c:	e0c7      	b.n	80062de <HAL_RCC_OscConfig+0x652>
      tickstart = HAL_GetTick();
 800614e:	f7fb fc47 	bl	80019e0 <HAL_GetTick>
 8006152:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006154:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006158:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800615c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006160:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800616c:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8006170:	d008      	beq.n	8006184 <HAL_RCC_OscConfig+0x4f8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006172:	f7fb fc35 	bl	80019e0 <HAL_GetTick>
 8006176:	1b80      	subs	r0, r0, r6
 8006178:	f241 3388 	movw	r3, #5000	; 0x1388
 800617c:	4298      	cmp	r0, r3
 800617e:	d9f1      	bls.n	8006164 <HAL_RCC_OscConfig+0x4d8>
          return HAL_TIMEOUT;
 8006180:	2003      	movs	r0, #3
 8006182:	e0ac      	b.n	80062de <HAL_RCC_OscConfig+0x652>
      tickstart = HAL_GetTick();
 8006184:	f7fb fc2c 	bl	80019e0 <HAL_GetTick>
 8006188:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800618a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800618e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006192:	f023 0301 	bic.w	r3, r3, #1
 8006196:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800619a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800619e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061a2:	f013 0f02 	tst.w	r3, #2
 80061a6:	d008      	beq.n	80061ba <HAL_RCC_OscConfig+0x52e>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061a8:	f7fb fc1a 	bl	80019e0 <HAL_GetTick>
 80061ac:	1b80      	subs	r0, r0, r6
 80061ae:	f241 3388 	movw	r3, #5000	; 0x1388
 80061b2:	4298      	cmp	r0, r3
 80061b4:	d9f1      	bls.n	800619a <HAL_RCC_OscConfig+0x50e>
          return HAL_TIMEOUT;
 80061b6:	2003      	movs	r0, #3
 80061b8:	e091      	b.n	80062de <HAL_RCC_OscConfig+0x652>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80061ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80061bc:	2b00      	cmp	r3, #0
 80061be:	f000 808d 	beq.w	80062dc <HAL_RCC_OscConfig+0x650>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80061c2:	2d0c      	cmp	r5, #12
 80061c4:	d062      	beq.n	800628c <HAL_RCC_OscConfig+0x600>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	d01f      	beq.n	800620a <HAL_RCC_OscConfig+0x57e>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80061ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80061d4:	601a      	str	r2, [r3, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80061d6:	68da      	ldr	r2, [r3, #12]
 80061d8:	f022 0203 	bic.w	r2, r2, #3
 80061dc:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 80061de:	68da      	ldr	r2, [r3, #12]
 80061e0:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 80061e4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80061e8:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 80061ea:	f7fb fbf9 	bl	80019e0 <HAL_GetTick>
 80061ee:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80061f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80061fa:	d073      	beq.n	80062e4 <HAL_RCC_OscConfig+0x658>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061fc:	f7fb fbf0 	bl	80019e0 <HAL_GetTick>
 8006200:	1b00      	subs	r0, r0, r4
 8006202:	280a      	cmp	r0, #10
 8006204:	d9f4      	bls.n	80061f0 <HAL_RCC_OscConfig+0x564>
            return HAL_TIMEOUT;
 8006206:	2003      	movs	r0, #3
 8006208:	e069      	b.n	80062de <HAL_RCC_OscConfig+0x652>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800620a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800620e:	6813      	ldr	r3, [r2, #0]
 8006210:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006214:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006216:	f7fb fbe3 	bl	80019e0 <HAL_GetTick>
 800621a:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800621c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006226:	d12a      	bne.n	800627e <HAL_RCC_OscConfig+0x5f2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006228:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800622c:	68d3      	ldr	r3, [r2, #12]
 800622e:	4934      	ldr	r1, [pc, #208]	; (8006300 <HAL_RCC_OscConfig+0x674>)
 8006230:	4019      	ands	r1, r3
 8006232:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006234:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8006236:	4303      	orrs	r3, r0
 8006238:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800623a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800623e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006240:	4303      	orrs	r3, r0
 8006242:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8006244:	4303      	orrs	r3, r0
 8006246:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8006248:	4303      	orrs	r3, r0
 800624a:	430b      	orrs	r3, r1
 800624c:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800624e:	6813      	ldr	r3, [r2, #0]
 8006250:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006254:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006256:	68d3      	ldr	r3, [r2, #12]
 8006258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800625c:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 800625e:	f7fb fbbf 	bl	80019e0 <HAL_GetTick>
 8006262:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006264:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800626e:	d137      	bne.n	80062e0 <HAL_RCC_OscConfig+0x654>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006270:	f7fb fbb6 	bl	80019e0 <HAL_GetTick>
 8006274:	1b00      	subs	r0, r0, r4
 8006276:	280a      	cmp	r0, #10
 8006278:	d9f4      	bls.n	8006264 <HAL_RCC_OscConfig+0x5d8>
            return HAL_TIMEOUT;
 800627a:	2003      	movs	r0, #3
 800627c:	e02f      	b.n	80062de <HAL_RCC_OscConfig+0x652>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800627e:	f7fb fbaf 	bl	80019e0 <HAL_GetTick>
 8006282:	1b40      	subs	r0, r0, r5
 8006284:	280a      	cmp	r0, #10
 8006286:	d9c9      	bls.n	800621c <HAL_RCC_OscConfig+0x590>
            return HAL_TIMEOUT;
 8006288:	2003      	movs	r0, #3
 800628a:	e028      	b.n	80062de <HAL_RCC_OscConfig+0x652>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800628c:	2b01      	cmp	r3, #1
 800628e:	d02b      	beq.n	80062e8 <HAL_RCC_OscConfig+0x65c>
        pll_config = RCC->PLLCFGR;
 8006290:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006294:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8006296:	f003 0103 	and.w	r1, r3, #3
 800629a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800629c:	4291      	cmp	r1, r2
 800629e:	d125      	bne.n	80062ec <HAL_RCC_OscConfig+0x660>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80062a0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80062a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062a6:	428a      	cmp	r2, r1
 80062a8:	d122      	bne.n	80062f0 <HAL_RCC_OscConfig+0x664>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80062aa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80062ae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80062b0:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80062b4:	d11e      	bne.n	80062f4 <HAL_RCC_OscConfig+0x668>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80062b6:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 80062ba:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80062bc:	4293      	cmp	r3, r2
 80062be:	d11b      	bne.n	80062f8 <HAL_RCC_OscConfig+0x66c>
  return HAL_OK;
 80062c0:	2000      	movs	r0, #0
 80062c2:	e00c      	b.n	80062de <HAL_RCC_OscConfig+0x652>
    return HAL_ERROR;
 80062c4:	2001      	movs	r0, #1
}
 80062c6:	4770      	bx	lr
        return HAL_ERROR;
 80062c8:	2001      	movs	r0, #1
 80062ca:	e008      	b.n	80062de <HAL_RCC_OscConfig+0x652>
            return HAL_ERROR;
 80062cc:	2001      	movs	r0, #1
 80062ce:	e006      	b.n	80062de <HAL_RCC_OscConfig+0x652>
        return HAL_ERROR;
 80062d0:	2001      	movs	r0, #1
 80062d2:	e004      	b.n	80062de <HAL_RCC_OscConfig+0x652>
        return HAL_ERROR;
 80062d4:	2001      	movs	r0, #1
 80062d6:	e002      	b.n	80062de <HAL_RCC_OscConfig+0x652>
          return HAL_ERROR;
 80062d8:	2001      	movs	r0, #1
 80062da:	e000      	b.n	80062de <HAL_RCC_OscConfig+0x652>
  return HAL_OK;
 80062dc:	2000      	movs	r0, #0
}
 80062de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 80062e0:	2000      	movs	r0, #0
 80062e2:	e7fc      	b.n	80062de <HAL_RCC_OscConfig+0x652>
 80062e4:	2000      	movs	r0, #0
 80062e6:	e7fa      	b.n	80062de <HAL_RCC_OscConfig+0x652>
        return HAL_ERROR;
 80062e8:	2001      	movs	r0, #1
 80062ea:	e7f8      	b.n	80062de <HAL_RCC_OscConfig+0x652>
          return HAL_ERROR;
 80062ec:	2001      	movs	r0, #1
 80062ee:	e7f6      	b.n	80062de <HAL_RCC_OscConfig+0x652>
 80062f0:	2001      	movs	r0, #1
 80062f2:	e7f4      	b.n	80062de <HAL_RCC_OscConfig+0x652>
 80062f4:	2001      	movs	r0, #1
 80062f6:	e7f2      	b.n	80062de <HAL_RCC_OscConfig+0x652>
 80062f8:	2001      	movs	r0, #1
 80062fa:	e7f0      	b.n	80062de <HAL_RCC_OscConfig+0x652>
 80062fc:	58000400 	.word	0x58000400
 8006300:	11c1808c 	.word	0x11c1808c

08006304 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8006304:	2800      	cmp	r0, #0
 8006306:	f000 8127 	beq.w	8006558 <HAL_RCC_ClockConfig+0x254>
{
 800630a:	b570      	push	{r4, r5, r6, lr}
 800630c:	460c      	mov	r4, r1
 800630e:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006310:	4b93      	ldr	r3, [pc, #588]	; (8006560 <HAL_RCC_ClockConfig+0x25c>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 0307 	and.w	r3, r3, #7
 8006318:	428b      	cmp	r3, r1
 800631a:	d32d      	bcc.n	8006378 <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800631c:	682b      	ldr	r3, [r5, #0]
 800631e:	f013 0f02 	tst.w	r3, #2
 8006322:	d13f      	bne.n	80063a4 <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006324:	682b      	ldr	r3, [r5, #0]
 8006326:	f013 0f20 	tst.w	r3, #32
 800632a:	d153      	bne.n	80063d4 <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800632c:	682b      	ldr	r3, [r5, #0]
 800632e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006332:	d16a      	bne.n	800640a <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006334:	682b      	ldr	r3, [r5, #0]
 8006336:	f013 0f04 	tst.w	r3, #4
 800633a:	f040 8083 	bne.w	8006444 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800633e:	682b      	ldr	r3, [r5, #0]
 8006340:	f013 0f08 	tst.w	r3, #8
 8006344:	f040 8097 	bne.w	8006476 <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006348:	682b      	ldr	r3, [r5, #0]
 800634a:	f013 0f01 	tst.w	r3, #1
 800634e:	f000 80de 	beq.w	800650e <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006352:	686b      	ldr	r3, [r5, #4]
 8006354:	2b02      	cmp	r3, #2
 8006356:	f000 80a8 	beq.w	80064aa <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800635a:	2b03      	cmp	r3, #3
 800635c:	f000 80ad 	beq.w	80064ba <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006360:	2b00      	cmp	r3, #0
 8006362:	f040 80b2 	bne.w	80064ca <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006366:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800636a:	6812      	ldr	r2, [r2, #0]
 800636c:	f012 0f02 	tst.w	r2, #2
 8006370:	f040 80b1 	bne.w	80064d6 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8006374:	2001      	movs	r0, #1
 8006376:	e0ee      	b.n	8006556 <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006378:	4a79      	ldr	r2, [pc, #484]	; (8006560 <HAL_RCC_ClockConfig+0x25c>)
 800637a:	6813      	ldr	r3, [r2, #0]
 800637c:	f023 0307 	bic.w	r3, r3, #7
 8006380:	430b      	orrs	r3, r1
 8006382:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006384:	f7fb fb2c 	bl	80019e0 <HAL_GetTick>
 8006388:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800638a:	4b75      	ldr	r3, [pc, #468]	; (8006560 <HAL_RCC_ClockConfig+0x25c>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0307 	and.w	r3, r3, #7
 8006392:	42a3      	cmp	r3, r4
 8006394:	d0c2      	beq.n	800631c <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006396:	f7fb fb23 	bl	80019e0 <HAL_GetTick>
 800639a:	1b80      	subs	r0, r0, r6
 800639c:	2802      	cmp	r0, #2
 800639e:	d9f4      	bls.n	800638a <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 80063a0:	2003      	movs	r0, #3
 80063a2:	e0d8      	b.n	8006556 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80063a4:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80063a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063aa:	688a      	ldr	r2, [r1, #8]
 80063ac:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80063b0:	4313      	orrs	r3, r2
 80063b2:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80063b4:	f7fb fb14 	bl	80019e0 <HAL_GetTick>
 80063b8:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80063ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80063c4:	d1ae      	bne.n	8006324 <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80063c6:	f7fb fb0b 	bl	80019e0 <HAL_GetTick>
 80063ca:	1b80      	subs	r0, r0, r6
 80063cc:	2802      	cmp	r0, #2
 80063ce:	d9f4      	bls.n	80063ba <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 80063d0:	2003      	movs	r0, #3
 80063d2:	e0c0      	b.n	8006556 <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80063d4:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80063d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063da:	f8d1 2108 	ldr.w	r2, [r1, #264]	; 0x108
 80063de:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80063e2:	4313      	orrs	r3, r2
 80063e4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
    tickstart = HAL_GetTick();
 80063e8:	f7fb fafa 	bl	80019e0 <HAL_GetTick>
 80063ec:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80063ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063f2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80063f6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80063fa:	d197      	bne.n	800632c <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80063fc:	f7fb faf0 	bl	80019e0 <HAL_GetTick>
 8006400:	1b80      	subs	r0, r0, r6
 8006402:	2802      	cmp	r0, #2
 8006404:	d9f3      	bls.n	80063ee <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 8006406:	2003      	movs	r0, #3
 8006408:	e0a5      	b.n	8006556 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800640a:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800640c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006410:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 8006414:	f023 030f 	bic.w	r3, r3, #15
 8006418:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 800641c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 8006420:	f7fb fade 	bl	80019e0 <HAL_GetTick>
 8006424:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006426:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800642a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800642e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8006432:	f47f af7f 	bne.w	8006334 <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006436:	f7fb fad3 	bl	80019e0 <HAL_GetTick>
 800643a:	1b80      	subs	r0, r0, r6
 800643c:	2802      	cmp	r0, #2
 800643e:	d9f2      	bls.n	8006426 <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 8006440:	2003      	movs	r0, #3
 8006442:	e088      	b.n	8006556 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006444:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006446:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800644a:	688a      	ldr	r2, [r1, #8]
 800644c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006450:	4313      	orrs	r3, r2
 8006452:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8006454:	f7fb fac4 	bl	80019e0 <HAL_GetTick>
 8006458:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800645a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006464:	f47f af6b 	bne.w	800633e <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006468:	f7fb faba 	bl	80019e0 <HAL_GetTick>
 800646c:	1b80      	subs	r0, r0, r6
 800646e:	2802      	cmp	r0, #2
 8006470:	d9f3      	bls.n	800645a <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 8006472:	2003      	movs	r0, #3
 8006474:	e06f      	b.n	8006556 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006476:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006478:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800647c:	6893      	ldr	r3, [r2, #8]
 800647e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8006482:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006486:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8006488:	f7fb faaa 	bl	80019e0 <HAL_GetTick>
 800648c:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800648e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8006498:	f47f af56 	bne.w	8006348 <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800649c:	f7fb faa0 	bl	80019e0 <HAL_GetTick>
 80064a0:	1b80      	subs	r0, r0, r6
 80064a2:	2802      	cmp	r0, #2
 80064a4:	d9f3      	bls.n	800648e <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 80064a6:	2003      	movs	r0, #3
 80064a8:	e055      	b.n	8006556 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80064aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064ae:	6812      	ldr	r2, [r2, #0]
 80064b0:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80064b4:	d10f      	bne.n	80064d6 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 80064b6:	2001      	movs	r0, #1
 80064b8:	e04d      	b.n	8006556 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80064ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064be:	6812      	ldr	r2, [r2, #0]
 80064c0:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80064c4:	d107      	bne.n	80064d6 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 80064c6:	2001      	movs	r0, #1
 80064c8:	e045      	b.n	8006556 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80064ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064ce:	6812      	ldr	r2, [r2, #0]
 80064d0:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80064d4:	d042      	beq.n	800655c <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80064d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064da:	688a      	ldr	r2, [r1, #8]
 80064dc:	f022 0203 	bic.w	r2, r2, #3
 80064e0:	4313      	orrs	r3, r2
 80064e2:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80064e4:	f7fb fa7c 	bl	80019e0 <HAL_GetTick>
 80064e8:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80064ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064f4:	686a      	ldr	r2, [r5, #4]
 80064f6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80064fa:	d008      	beq.n	800650e <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064fc:	f7fb fa70 	bl	80019e0 <HAL_GetTick>
 8006500:	1b80      	subs	r0, r0, r6
 8006502:	f241 3388 	movw	r3, #5000	; 0x1388
 8006506:	4298      	cmp	r0, r3
 8006508:	d9ef      	bls.n	80064ea <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 800650a:	2003      	movs	r0, #3
 800650c:	e023      	b.n	8006556 <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800650e:	4b14      	ldr	r3, [pc, #80]	; (8006560 <HAL_RCC_ClockConfig+0x25c>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 0307 	and.w	r3, r3, #7
 8006516:	42a3      	cmp	r3, r4
 8006518:	d915      	bls.n	8006546 <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800651a:	4a11      	ldr	r2, [pc, #68]	; (8006560 <HAL_RCC_ClockConfig+0x25c>)
 800651c:	6813      	ldr	r3, [r2, #0]
 800651e:	f023 0307 	bic.w	r3, r3, #7
 8006522:	4323      	orrs	r3, r4
 8006524:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006526:	f7fb fa5b 	bl	80019e0 <HAL_GetTick>
 800652a:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800652c:	4b0c      	ldr	r3, [pc, #48]	; (8006560 <HAL_RCC_ClockConfig+0x25c>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 0307 	and.w	r3, r3, #7
 8006534:	42a3      	cmp	r3, r4
 8006536:	d006      	beq.n	8006546 <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006538:	f7fb fa52 	bl	80019e0 <HAL_GetTick>
 800653c:	1b40      	subs	r0, r0, r5
 800653e:	2802      	cmp	r0, #2
 8006540:	d9f4      	bls.n	800652c <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 8006542:	2003      	movs	r0, #3
 8006544:	e007      	b.n	8006556 <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006546:	f7ff fb91 	bl	8005c6c <HAL_RCC_GetHCLKFreq>
 800654a:	4b06      	ldr	r3, [pc, #24]	; (8006564 <HAL_RCC_ClockConfig+0x260>)
 800654c:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 800654e:	4b06      	ldr	r3, [pc, #24]	; (8006568 <HAL_RCC_ClockConfig+0x264>)
 8006550:	6818      	ldr	r0, [r3, #0]
 8006552:	f7fb fa43 	bl	80019dc <HAL_InitTick>
}
 8006556:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8006558:	2001      	movs	r0, #1
}
 800655a:	4770      	bx	lr
        return HAL_ERROR;
 800655c:	2001      	movs	r0, #1
 800655e:	e7fa      	b.n	8006556 <HAL_RCC_ClockConfig+0x252>
 8006560:	58004000 	.word	0x58004000
 8006564:	20000070 	.word	0x20000070
 8006568:	20000074 	.word	0x20000074

0800656c <HAL_RCC_GetPCLK1Freq>:
{
 800656c:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800656e:	f7ff fb7d 	bl	8005c6c <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800657c:	4a02      	ldr	r2, [pc, #8]	; (8006588 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800657e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8006582:	40d8      	lsrs	r0, r3
 8006584:	bd08      	pop	{r3, pc}
 8006586:	bf00      	nop
 8006588:	080144cc 	.word	0x080144cc

0800658c <HAL_RCC_GetPCLK2Freq>:
{
 800658c:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800658e:	f7ff fb6d 	bl	8005c6c <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800659c:	4a02      	ldr	r2, [pc, #8]	; (80065a8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800659e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80065a2:	40d8      	lsrs	r0, r3
 80065a4:	bd08      	pop	{r3, pc}
 80065a6:	bf00      	nop
 80065a8:	080144cc 	.word	0x080144cc

080065ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065ac:	b570      	push	{r4, r5, r6, lr}
 80065ae:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80065b0:	6803      	ldr	r3, [r0, #0]
 80065b2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80065b6:	f040 80ab 	bne.w	8006710 <HAL_RCCEx_PeriphCLKConfig+0x164>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80065ba:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80065bc:	6823      	ldr	r3, [r4, #0]
 80065be:	f013 0f01 	tst.w	r3, #1
 80065c2:	d00a      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80065c4:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80065c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065ca:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80065ce:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 80065d2:	b292      	uxth	r2, r2
 80065d4:	4313      	orrs	r3, r2
 80065d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80065da:	6823      	ldr	r3, [r4, #0]
 80065dc:	f013 0f02 	tst.w	r3, #2
 80065e0:	d00a      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80065e2:	68a2      	ldr	r2, [r4, #8]
 80065e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065e8:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80065ec:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 80065f0:	b292      	uxth	r2, r2
 80065f2:	4313      	orrs	r3, r2
 80065f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80065f8:	6823      	ldr	r3, [r4, #0]
 80065fa:	f013 0f20 	tst.w	r3, #32
 80065fe:	d009      	beq.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006600:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006602:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006606:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800660a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800660e:	4313      	orrs	r3, r2
 8006610:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006614:	6823      	ldr	r3, [r4, #0]
 8006616:	f413 7f00 	tst.w	r3, #512	; 0x200
 800661a:	d00c      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800661c:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800661e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006622:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8006626:	0c02      	lsrs	r2, r0, #16
 8006628:	0412      	lsls	r2, r2, #16
 800662a:	ea23 0302 	bic.w	r3, r3, r2
 800662e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006636:	6823      	ldr	r3, [r4, #0]
 8006638:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800663c:	d00c      	beq.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800663e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006640:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006644:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8006648:	0c02      	lsrs	r2, r0, #16
 800664a:	0412      	lsls	r2, r2, #16
 800664c:	ea23 0302 	bic.w	r3, r3, r2
 8006650:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006654:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006658:	6823      	ldr	r3, [r4, #0]
 800665a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800665e:	d00c      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006660:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006662:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006666:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800666a:	0c02      	lsrs	r2, r0, #16
 800666c:	0412      	lsls	r2, r2, #16
 800666e:	ea23 0302 	bic.w	r3, r3, r2
 8006672:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800667a:	6823      	ldr	r3, [r4, #0]
 800667c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006680:	f040 809e 	bne.w	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x214>
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006684:	6823      	ldr	r3, [r4, #0]
 8006686:	f013 0f80 	tst.w	r3, #128	; 0x80
 800668a:	f040 80aa 	bne.w	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x236>
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800668e:	6823      	ldr	r3, [r4, #0]
 8006690:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006694:	f040 80b6 	bne.w	8006804 <HAL_RCCEx_PeriphCLKConfig+0x258>
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8006698:	6823      	ldr	r3, [r4, #0]
 800669a:	f013 0f10 	tst.w	r3, #16
 800669e:	d00e      	beq.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80066a0:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80066a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066a6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80066aa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80066ae:	4313      	orrs	r3, r2
 80066b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80066b4:	68e3      	ldr	r3, [r4, #12]
 80066b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066ba:	f000 80b4 	beq.w	8006826 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80066be:	6823      	ldr	r3, [r4, #0]
 80066c0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80066c4:	d00f      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80066c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80066c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066cc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80066d0:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 80066d4:	4313      	orrs	r3, r2
 80066d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80066da:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80066dc:	b91b      	cbnz	r3, 80066e6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80066de:	68cb      	ldr	r3, [r1, #12]
 80066e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80066e4:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80066e6:	6823      	ldr	r3, [r4, #0]
 80066e8:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80066ec:	d00e      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80066ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80066f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066f4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80066f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80066fc:	4313      	orrs	r3, r2
 80066fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006702:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006704:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006708:	f000 8092 	beq.w	8006830 <HAL_RCCEx_PeriphCLKConfig+0x284>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 800670c:	4628      	mov	r0, r5
 800670e:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 8006710:	f7ff f922 	bl	8005958 <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 8006714:	f7fb f964 	bl	80019e0 <HAL_GetTick>
 8006718:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800671a:	4b48      	ldr	r3, [pc, #288]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006722:	d106      	bne.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x186>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006724:	f7fb f95c 	bl	80019e0 <HAL_GetTick>
 8006728:	1b40      	subs	r0, r0, r5
 800672a:	2802      	cmp	r0, #2
 800672c:	d9f5      	bls.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x16e>
        ret = HAL_TIMEOUT;
 800672e:	2503      	movs	r5, #3
 8006730:	e000      	b.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x188>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8006732:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 8006734:	2d00      	cmp	r5, #0
 8006736:	f47f af41 	bne.w	80065bc <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800673a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800673e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006742:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8006746:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006748:	429a      	cmp	r2, r3
 800674a:	d024      	beq.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800674c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006750:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006754:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006758:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800675c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8006760:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006764:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8006768:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800676c:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8006770:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8006774:	f012 0f02 	tst.w	r2, #2
 8006778:	d10f      	bne.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
      if (ret == HAL_OK)
 800677a:	2d00      	cmp	r5, #0
 800677c:	f47f af1e 	bne.w	80065bc <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006780:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006782:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006786:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800678a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800678e:	4313      	orrs	r3, r2
 8006790:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006794:	e712      	b.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x10>
  uint32_t tmpregister = 0;
 8006796:	2200      	movs	r2, #0
 8006798:	e7ec      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        tickstart = HAL_GetTick();
 800679a:	f7fb f921 	bl	80019e0 <HAL_GetTick>
 800679e:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80067a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067a8:	f013 0f02 	tst.w	r3, #2
 80067ac:	d1e5      	bne.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067ae:	f7fb f917 	bl	80019e0 <HAL_GetTick>
 80067b2:	1b80      	subs	r0, r0, r6
 80067b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80067b8:	4298      	cmp	r0, r3
 80067ba:	d9f1      	bls.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
            ret = HAL_TIMEOUT;
 80067bc:	2503      	movs	r5, #3
 80067be:	e7dc      	b.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80067c0:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80067c2:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 80067c6:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80067ca:	0919      	lsrs	r1, r3, #4
 80067cc:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 80067d0:	ea22 0201 	bic.w	r2, r2, r1
 80067d4:	011b      	lsls	r3, r3, #4
 80067d6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80067da:	4313      	orrs	r3, r2
 80067dc:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 80067e0:	e750      	b.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80067e2:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80067e4:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 80067e8:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80067ec:	0919      	lsrs	r1, r3, #4
 80067ee:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 80067f2:	ea22 0201 	bic.w	r2, r2, r1
 80067f6:	011b      	lsls	r3, r3, #4
 80067f8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80067fc:	4313      	orrs	r3, r2
 80067fe:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8006802:	e744      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0xe2>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006804:	69e3      	ldr	r3, [r4, #28]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006806:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800680a:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800680e:	0919      	lsrs	r1, r3, #4
 8006810:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8006814:	ea22 0201 	bic.w	r2, r2, r1
 8006818:	011b      	lsls	r3, r3, #4
 800681a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800681e:	4313      	orrs	r3, r2
 8006820:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8006824:	e738      	b.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8006826:	68cb      	ldr	r3, [r1, #12]
 8006828:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800682c:	60cb      	str	r3, [r1, #12]
 800682e:	e746      	b.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006830:	68cb      	ldr	r3, [r1, #12]
 8006832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006836:	60cb      	str	r3, [r1, #12]
 8006838:	e768      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800683a:	bf00      	nop
 800683c:	58000400 	.word	0x58000400

08006840 <HAL_RTC_DeactivateAlarm>:
{
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006840:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006844:	2b01      	cmp	r3, #1
 8006846:	d036      	beq.n	80068b6 <HAL_RTC_DeactivateAlarm+0x76>
 8006848:	2301      	movs	r3, #1
 800684a:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800684e:	2302      	movs	r3, #2
 8006850:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006854:	4b19      	ldr	r3, [pc, #100]	; (80068bc <HAL_RTC_DeactivateAlarm+0x7c>)
 8006856:	22ca      	movs	r2, #202	; 0xca
 8006858:	625a      	str	r2, [r3, #36]	; 0x24
 800685a:	2253      	movs	r2, #83	; 0x53
 800685c:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 800685e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8006862:	d019      	beq.n	8006898 <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006864:	4b15      	ldr	r3, [pc, #84]	; (80068bc <HAL_RTC_DeactivateAlarm+0x7c>)
 8006866:	699a      	ldr	r2, [r3, #24]
 8006868:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 800686c:	619a      	str	r2, [r3, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 800686e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006870:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006874:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006876:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8006878:	f022 0202 	bic.w	r2, r2, #2
 800687c:	6302      	str	r2, [r0, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800687e:	2202      	movs	r2, #2
 8006880:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006882:	4b0e      	ldr	r3, [pc, #56]	; (80068bc <HAL_RTC_DeactivateAlarm+0x7c>)
 8006884:	22ff      	movs	r2, #255	; 0xff
 8006886:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006888:	2301      	movs	r3, #1
 800688a:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800688e:	2300      	movs	r3, #0
 8006890:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8006894:	4618      	mov	r0, r3
 8006896:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006898:	699a      	ldr	r2, [r3, #24]
 800689a:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800689e:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 80068a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068a2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80068a6:	645a      	str	r2, [r3, #68]	; 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80068a8:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80068aa:	f022 0201 	bic.w	r2, r2, #1
 80068ae:	6302      	str	r2, [r0, #48]	; 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80068b0:	2201      	movs	r2, #1
 80068b2:	65da      	str	r2, [r3, #92]	; 0x5c
 80068b4:	e7e5      	b.n	8006882 <HAL_RTC_DeactivateAlarm+0x42>
  __HAL_LOCK(hrtc);
 80068b6:	2002      	movs	r0, #2
}
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	40002800 	.word	0x40002800

080068c0 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80068c0:	b538      	push	{r3, r4, r5, lr}
 80068c2:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80068c4:	4b0d      	ldr	r3, [pc, #52]	; (80068fc <HAL_RTC_AlarmIRQHandler+0x3c>)
 80068c6:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 80068c8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80068ca:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80068cc:	f015 0f01 	tst.w	r5, #1
 80068d0:	d106      	bne.n	80068e0 <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80068d2:	f015 0f02 	tst.w	r5, #2
 80068d6:	d109      	bne.n	80068ec <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80068d8:	2301      	movs	r3, #1
 80068da:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 80068de:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80068e0:	4b06      	ldr	r3, [pc, #24]	; (80068fc <HAL_RTC_AlarmIRQHandler+0x3c>)
 80068e2:	2201      	movs	r2, #1
 80068e4:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 80068e6:	f7fb fb99 	bl	800201c <HAL_RTC_AlarmAEventCallback>
 80068ea:	e7f2      	b.n	80068d2 <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80068ec:	4b03      	ldr	r3, [pc, #12]	; (80068fc <HAL_RTC_AlarmIRQHandler+0x3c>)
 80068ee:	2202      	movs	r2, #2
 80068f0:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80068f2:	4620      	mov	r0, r4
 80068f4:	f000 f9e6 	bl	8006cc4 <HAL_RTCEx_AlarmBEventCallback>
 80068f8:	e7ee      	b.n	80068d8 <HAL_RTC_AlarmIRQHandler+0x18>
 80068fa:	bf00      	nop
 80068fc:	40002800 	.word	0x40002800

08006900 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006900:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8006902:	4a0b      	ldr	r2, [pc, #44]	; (8006930 <HAL_RTC_WaitForSynchro+0x30>)
 8006904:	68d3      	ldr	r3, [r2, #12]
 8006906:	f023 0320 	bic.w	r3, r3, #32
 800690a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800690c:	f7fb f868 	bl	80019e0 <HAL_GetTick>
 8006910:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006912:	4b07      	ldr	r3, [pc, #28]	; (8006930 <HAL_RTC_WaitForSynchro+0x30>)
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	f013 0f20 	tst.w	r3, #32
 800691a:	d107      	bne.n	800692c <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800691c:	f7fb f860 	bl	80019e0 <HAL_GetTick>
 8006920:	1b00      	subs	r0, r0, r4
 8006922:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006926:	d9f4      	bls.n	8006912 <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 8006928:	2003      	movs	r0, #3
 800692a:	e000      	b.n	800692e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800692c:	2000      	movs	r0, #0
}
 800692e:	bd10      	pop	{r4, pc}
 8006930:	40002800 	.word	0x40002800

08006934 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006934:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006936:	4b11      	ldr	r3, [pc, #68]	; (800697c <RTC_EnterInitMode+0x48>)
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800693e:	d002      	beq.n	8006946 <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8006940:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 8006942:	4620      	mov	r0, r4
 8006944:	bd70      	pop	{r4, r5, r6, pc}
 8006946:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006948:	4a0c      	ldr	r2, [pc, #48]	; (800697c <RTC_EnterInitMode+0x48>)
 800694a:	68d3      	ldr	r3, [r2, #12]
 800694c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006950:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8006952:	f7fb f845 	bl	80019e0 <HAL_GetTick>
 8006956:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 8006958:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800695a:	4b08      	ldr	r3, [pc, #32]	; (800697c <RTC_EnterInitMode+0x48>)
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006962:	d1ee      	bne.n	8006942 <RTC_EnterInitMode+0xe>
 8006964:	2c03      	cmp	r4, #3
 8006966:	d0ec      	beq.n	8006942 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006968:	f7fb f83a 	bl	80019e0 <HAL_GetTick>
 800696c:	1b43      	subs	r3, r0, r5
 800696e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006972:	d9f2      	bls.n	800695a <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006974:	2403      	movs	r4, #3
 8006976:	f886 402d 	strb.w	r4, [r6, #45]	; 0x2d
 800697a:	e7ee      	b.n	800695a <RTC_EnterInitMode+0x26>
 800697c:	40002800 	.word	0x40002800

08006980 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006980:	b510      	push	{r4, lr}
 8006982:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006984:	4b11      	ldr	r3, [pc, #68]	; (80069cc <RTC_ExitInitMode+0x4c>)
 8006986:	68da      	ldr	r2, [r3, #12]
 8006988:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800698c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800698e:	699b      	ldr	r3, [r3, #24]
 8006990:	f013 0f20 	tst.w	r3, #32
 8006994:	d107      	bne.n	80069a6 <RTC_ExitInitMode+0x26>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006996:	f7ff ffb3 	bl	8006900 <HAL_RTC_WaitForSynchro>
 800699a:	4603      	mov	r3, r0
 800699c:	b1a0      	cbz	r0, 80069c8 <RTC_ExitInitMode+0x48>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80069a4:	e010      	b.n	80069c8 <RTC_ExitInitMode+0x48>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80069a6:	4a09      	ldr	r2, [pc, #36]	; (80069cc <RTC_ExitInitMode+0x4c>)
 80069a8:	6993      	ldr	r3, [r2, #24]
 80069aa:	f023 0320 	bic.w	r3, r3, #32
 80069ae:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80069b0:	f7ff ffa6 	bl	8006900 <HAL_RTC_WaitForSynchro>
 80069b4:	4603      	mov	r3, r0
 80069b6:	b110      	cbz	r0, 80069be <RTC_ExitInitMode+0x3e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80069b8:	2303      	movs	r3, #3
 80069ba:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80069be:	4903      	ldr	r1, [pc, #12]	; (80069cc <RTC_ExitInitMode+0x4c>)
 80069c0:	698a      	ldr	r2, [r1, #24]
 80069c2:	f042 0220 	orr.w	r2, r2, #32
 80069c6:	618a      	str	r2, [r1, #24]
  }

  return status;
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	bd10      	pop	{r4, pc}
 80069cc:	40002800 	.word	0x40002800

080069d0 <HAL_RTC_Init>:
  if (hrtc != NULL)
 80069d0:	2800      	cmp	r0, #0
 80069d2:	d04a      	beq.n	8006a6a <HAL_RTC_Init+0x9a>
{
 80069d4:	b538      	push	{r3, r4, r5, lr}
 80069d6:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80069d8:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 80069dc:	b19b      	cbz	r3, 8006a06 <HAL_RTC_Init+0x36>
    hrtc->State = HAL_RTC_STATE_BUSY;
 80069de:	2302      	movs	r3, #2
 80069e0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80069e4:	4b22      	ldr	r3, [pc, #136]	; (8006a70 <HAL_RTC_Init+0xa0>)
 80069e6:	22ca      	movs	r2, #202	; 0xca
 80069e8:	625a      	str	r2, [r3, #36]	; 0x24
 80069ea:	2253      	movs	r2, #83	; 0x53
 80069ec:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 80069ee:	4620      	mov	r0, r4
 80069f0:	f7ff ffa0 	bl	8006934 <RTC_EnterInitMode>
    if (status == HAL_OK)
 80069f4:	b160      	cbz	r0, 8006a10 <HAL_RTC_Init+0x40>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069f6:	4b1e      	ldr	r3, [pc, #120]	; (8006a70 <HAL_RTC_Init+0xa0>)
 80069f8:	22ff      	movs	r2, #255	; 0xff
 80069fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 80069fc:	b910      	cbnz	r0, 8006a04 <HAL_RTC_Init+0x34>
      hrtc->State = HAL_RTC_STATE_READY;
 80069fe:	2301      	movs	r3, #1
 8006a00:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8006a04:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 8006a06:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
      HAL_RTC_MspInit(hrtc);
 8006a0a:	f7fa fe3f 	bl	800168c <HAL_RTC_MspInit>
 8006a0e:	e7e6      	b.n	80069de <HAL_RTC_Init+0xe>
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006a10:	4b17      	ldr	r3, [pc, #92]	; (8006a70 <HAL_RTC_Init+0xa0>)
 8006a12:	699a      	ldr	r2, [r3, #24]
 8006a14:	f022 628e 	bic.w	r2, r2, #74448896	; 0x4700000
 8006a18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a1c:	619a      	str	r2, [r3, #24]
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006a1e:	6999      	ldr	r1, [r3, #24]
 8006a20:	6862      	ldr	r2, [r4, #4]
 8006a22:	6920      	ldr	r0, [r4, #16]
 8006a24:	4302      	orrs	r2, r0
 8006a26:	69a0      	ldr	r0, [r4, #24]
 8006a28:	4302      	orrs	r2, r0
 8006a2a:	430a      	orrs	r2, r1
 8006a2c:	619a      	str	r2, [r3, #24]
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006a2e:	68e2      	ldr	r2, [r4, #12]
 8006a30:	68a1      	ldr	r1, [r4, #8]
 8006a32:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006a36:	611a      	str	r2, [r3, #16]
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8006a38:	68da      	ldr	r2, [r3, #12]
 8006a3a:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8006a3e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006a40:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006a42:	4301      	orrs	r1, r0
 8006a44:	430a      	orrs	r2, r1
 8006a46:	60da      	str	r2, [r3, #12]
      status = RTC_ExitInitMode(hrtc);
 8006a48:	4620      	mov	r0, r4
 8006a4a:	f7ff ff99 	bl	8006980 <RTC_ExitInitMode>
      if (status == HAL_OK)
 8006a4e:	2800      	cmp	r0, #0
 8006a50:	d1d1      	bne.n	80069f6 <HAL_RTC_Init+0x26>
        MODIFY_REG(RTC->CR, \
 8006a52:	4907      	ldr	r1, [pc, #28]	; (8006a70 <HAL_RTC_Init+0xa0>)
 8006a54:	698b      	ldr	r3, [r1, #24]
 8006a56:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8006a5a:	6a22      	ldr	r2, [r4, #32]
 8006a5c:	69e5      	ldr	r5, [r4, #28]
 8006a5e:	432a      	orrs	r2, r5
 8006a60:	6965      	ldr	r5, [r4, #20]
 8006a62:	432a      	orrs	r2, r5
 8006a64:	4313      	orrs	r3, r2
 8006a66:	618b      	str	r3, [r1, #24]
 8006a68:	e7c5      	b.n	80069f6 <HAL_RTC_Init+0x26>
  HAL_StatusTypeDef status = HAL_ERROR;
 8006a6a:	2001      	movs	r0, #1
}
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop
 8006a70:	40002800 	.word	0x40002800

08006a74 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8006a74:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 8006a76:	e002      	b.n	8006a7e <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8006a78:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 8006a7a:	380a      	subs	r0, #10
 8006a7c:	b2c0      	uxtb	r0, r0
  while (tmp_Value >= 10U)
 8006a7e:	2809      	cmp	r0, #9
 8006a80:	d8fa      	bhi.n	8006a78 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8006a82:	011b      	lsls	r3, r3, #4
 8006a84:	b2db      	uxtb	r3, r3
}
 8006a86:	4318      	orrs	r0, r3
 8006a88:	4770      	bx	lr
	...

08006a8c <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 8006a8c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	f000 80b0 	beq.w	8006bf6 <HAL_RTC_SetAlarm_IT+0x16a>
{
 8006a96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a9a:	4605      	mov	r5, r0
 8006a9c:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006aa4:	2302      	movs	r3, #2
 8006aa6:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8006aaa:	4b54      	ldr	r3, [pc, #336]	; (8006bfc <HAL_RTC_SetAlarm_IT+0x170>)
 8006aac:	68de      	ldr	r6, [r3, #12]
 8006aae:	f406 7640 	and.w	r6, r6, #768	; 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 8006ab2:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8006ab6:	d043      	beq.n	8006b40 <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 8006ab8:	bb12      	cbnz	r2, 8006b00 <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006aba:	699b      	ldr	r3, [r3, #24]
 8006abc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006ac0:	d101      	bne.n	8006ac6 <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8006ac6:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006aca:	7820      	ldrb	r0, [r4, #0]
 8006acc:	f7ff ffd2 	bl	8006a74 <RTC_ByteToBcd2>
 8006ad0:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006ad2:	7860      	ldrb	r0, [r4, #1]
 8006ad4:	f7ff ffce 	bl	8006a74 <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006ad8:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006adc:	78a0      	ldrb	r0, [r4, #2]
 8006ade:	f7ff ffc9 	bl	8006a74 <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006ae2:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006ae4:	78e0      	ldrb	r0, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006ae6:	ea47 5780 	orr.w	r7, r7, r0, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006aea:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 8006aee:	f7ff ffc1 	bl	8006a74 <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006af2:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006af6:	6a27      	ldr	r7, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006af8:	4338      	orrs	r0, r7
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006afa:	ea48 0000 	orr.w	r0, r8, r0
 8006afe:	e020      	b.n	8006b42 <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8006b00:	6948      	ldr	r0, [r1, #20]
 8006b02:	f1b0 3f80 	cmp.w	r0, #2155905152	; 0x80808080
 8006b06:	d009      	beq.n	8006b1c <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8006b08:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8006b0c:	d006      	beq.n	8006b1c <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006b0e:	4b3b      	ldr	r3, [pc, #236]	; (8006bfc <HAL_RTC_SetAlarm_IT+0x170>)
 8006b10:	699b      	ldr	r3, [r3, #24]
 8006b12:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006b16:	d101      	bne.n	8006b1c <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006b1c:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006b1e:	7863      	ldrb	r3, [r4, #1]
 8006b20:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006b22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006b26:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006b28:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006b2a:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006b2c:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006b30:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006b34:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006b38:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006b3a:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006b3c:	4318      	orrs	r0, r3
 8006b3e:	e000      	b.n	8006b42 <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 8006b40:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b42:	4b2e      	ldr	r3, [pc, #184]	; (8006bfc <HAL_RTC_SetAlarm_IT+0x170>)
 8006b44:	22ca      	movs	r2, #202	; 0xca
 8006b46:	625a      	str	r2, [r3, #36]	; 0x24
 8006b48:	2253      	movs	r2, #83	; 0x53
 8006b4a:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006b4c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006b4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b52:	d02a      	beq.n	8006baa <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006b54:	4b29      	ldr	r3, [pc, #164]	; (8006bfc <HAL_RTC_SetAlarm_IT+0x170>)
 8006b56:	699a      	ldr	r2, [r3, #24]
 8006b58:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 8006b5c:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006b5e:	2202      	movs	r2, #2
 8006b60:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8006b62:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8006b66:	d040      	beq.n	8006bea <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8006b68:	4b24      	ldr	r3, [pc, #144]	; (8006bfc <HAL_RTC_SetAlarm_IT+0x170>)
 8006b6a:	6498      	str	r0, [r3, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8006b6c:	69a2      	ldr	r2, [r4, #24]
 8006b6e:	64da      	str	r2, [r3, #76]	; 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8006b70:	6862      	ldr	r2, [r4, #4]
 8006b72:	4b22      	ldr	r3, [pc, #136]	; (8006bfc <HAL_RTC_SetAlarm_IT+0x170>)
 8006b74:	675a      	str	r2, [r3, #116]	; 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006b76:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8006b78:	f042 0202 	orr.w	r2, r2, #2
 8006b7c:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006b7e:	699a      	ldr	r2, [r3, #24]
 8006b80:	f442 5208 	orr.w	r2, r2, #8704	; 0x2200
 8006b84:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006b86:	4a1e      	ldr	r2, [pc, #120]	; (8006c00 <HAL_RTC_SetAlarm_IT+0x174>)
 8006b88:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8006b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b94:	4b19      	ldr	r3, [pc, #100]	; (8006bfc <HAL_RTC_SetAlarm_IT+0x170>)
 8006b96:	22ff      	movs	r2, #255	; 0xff
 8006b98:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  __HAL_UNLOCK(hrtc);
 8006ba0:	2000      	movs	r0, #0
 8006ba2:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
}
 8006ba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006baa:	4b14      	ldr	r3, [pc, #80]	; (8006bfc <HAL_RTC_SetAlarm_IT+0x170>)
 8006bac:	699a      	ldr	r2, [r3, #24]
 8006bae:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8006bb2:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8006bb8:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8006bbc:	d00f      	beq.n	8006bde <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8006bbe:	4b0f      	ldr	r3, [pc, #60]	; (8006bfc <HAL_RTC_SetAlarm_IT+0x170>)
 8006bc0:	6418      	str	r0, [r3, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8006bc2:	69a2      	ldr	r2, [r4, #24]
 8006bc4:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8006bc6:	6862      	ldr	r2, [r4, #4]
 8006bc8:	4b0c      	ldr	r3, [pc, #48]	; (8006bfc <HAL_RTC_SetAlarm_IT+0x170>)
 8006bca:	671a      	str	r2, [r3, #112]	; 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006bcc:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8006bce:	f042 0201 	orr.w	r2, r2, #1
 8006bd2:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006bd4:	699a      	ldr	r2, [r3, #24]
 8006bd6:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
 8006bda:	619a      	str	r2, [r3, #24]
 8006bdc:	e7d3      	b.n	8006b86 <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8006bde:	69a3      	ldr	r3, [r4, #24]
 8006be0:	69e2      	ldr	r2, [r4, #28]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	4a05      	ldr	r2, [pc, #20]	; (8006bfc <HAL_RTC_SetAlarm_IT+0x170>)
 8006be6:	6453      	str	r3, [r2, #68]	; 0x44
 8006be8:	e7ed      	b.n	8006bc6 <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8006bea:	69a3      	ldr	r3, [r4, #24]
 8006bec:	69e2      	ldr	r2, [r4, #28]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	4a02      	ldr	r2, [pc, #8]	; (8006bfc <HAL_RTC_SetAlarm_IT+0x170>)
 8006bf2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006bf4:	e7bc      	b.n	8006b70 <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 8006bf6:	2002      	movs	r0, #2
}
 8006bf8:	4770      	bx	lr
 8006bfa:	bf00      	nop
 8006bfc:	40002800 	.word	0x40002800
 8006c00:	58000800 	.word	0x58000800

08006c04 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006c04:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d017      	beq.n	8006c3c <HAL_RTCEx_EnableBypassShadow+0x38>
 8006c0c:	2101      	movs	r1, #1
 8006c0e:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c12:	2302      	movs	r3, #2
 8006c14:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c18:	4b09      	ldr	r3, [pc, #36]	; (8006c40 <HAL_RTCEx_EnableBypassShadow+0x3c>)
 8006c1a:	22ca      	movs	r2, #202	; 0xca
 8006c1c:	625a      	str	r2, [r3, #36]	; 0x24
 8006c1e:	2253      	movs	r2, #83	; 0x53
 8006c20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006c22:	699a      	ldr	r2, [r3, #24]
 8006c24:	f042 0220 	orr.w	r2, r2, #32
 8006c28:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c2a:	22ff      	movs	r2, #255	; 0xff
 8006c2c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006c2e:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006c32:	2300      	movs	r3, #0
 8006c34:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8006c38:	4618      	mov	r0, r3
 8006c3a:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8006c3c:	2002      	movs	r0, #2
}
 8006c3e:	4770      	bx	lr
 8006c40:	40002800 	.word	0x40002800

08006c44 <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006c44:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d020      	beq.n	8006c8e <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 8006c4c:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 8006c4e:	2101      	movs	r1, #1
 8006c50:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c54:	2302      	movs	r3, #2
 8006c56:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c5a:	4b0e      	ldr	r3, [pc, #56]	; (8006c94 <HAL_RTCEx_SetSSRU_IT+0x50>)
 8006c5c:	22ca      	movs	r2, #202	; 0xca
 8006c5e:	625a      	str	r2, [r3, #36]	; 0x24
 8006c60:	2253      	movs	r2, #83	; 0x53
 8006c62:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8006c64:	699a      	ldr	r2, [r3, #24]
 8006c66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006c6a:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8006c6c:	4c0a      	ldr	r4, [pc, #40]	; (8006c98 <HAL_RTCEx_SetSSRU_IT+0x54>)
 8006c6e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8006c72:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006c76:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c7a:	22ff      	movs	r2, #255	; 0xff
 8006c7c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006c7e:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006c82:	2300      	movs	r3, #0
 8006c84:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8006c88:	4618      	mov	r0, r3
}
 8006c8a:	bc10      	pop	{r4}
 8006c8c:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8006c8e:	2002      	movs	r0, #2
}
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	40002800 	.word	0x40002800
 8006c98:	58000800 	.word	0x58000800

08006c9c <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006c9c:	b510      	push	{r4, lr}
 8006c9e:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8006ca0:	4b07      	ldr	r3, [pc, #28]	; (8006cc0 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8006ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ca4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006ca8:	d103      	bne.n	8006cb2 <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006caa:	2301      	movs	r3, #1
 8006cac:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8006cb0:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 8006cb2:	4b03      	ldr	r3, [pc, #12]	; (8006cc0 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8006cb4:	2240      	movs	r2, #64	; 0x40
 8006cb6:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8006cb8:	f7fb f9b4 	bl	8002024 <HAL_RTCEx_SSRUEventCallback>
 8006cbc:	e7f5      	b.n	8006caa <HAL_RTCEx_SSRUIRQHandler+0xe>
 8006cbe:	bf00      	nop
 8006cc0:	40002800 	.word	0x40002800

08006cc4 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006cc4:	4770      	bx	lr

08006cc6 <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8006cc6:	0089      	lsls	r1, r1, #2
 8006cc8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8006ccc:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006cd0:	600a      	str	r2, [r1, #0]
}
 8006cd2:	4770      	bx	lr

08006cd4 <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8006cd4:	0089      	lsls	r1, r1, #2
 8006cd6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8006cda:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006cde:	6808      	ldr	r0, [r1, #0]
}
 8006ce0:	4770      	bx	lr
	...

08006ce4 <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8006ce4:	4b07      	ldr	r3, [pc, #28]	; (8006d04 <SUBGHZSPI_Init+0x20>)
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cec:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8006cee:	f440 7041 	orr.w	r0, r0, #772	; 0x304
 8006cf2:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8006cf4:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8006cf8:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d00:	601a      	str	r2, [r3, #0]
}
 8006d02:	4770      	bx	lr
 8006d04:	58010000 	.word	0x58010000

08006d08 <HAL_SUBGHZ_Init>:
{
 8006d08:	b530      	push	{r4, r5, lr}
 8006d0a:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 8006d0c:	2800      	cmp	r0, #0
 8006d0e:	d04e      	beq.n	8006dae <HAL_SUBGHZ_Init+0xa6>
 8006d10:	4604      	mov	r4, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8006d12:	7983      	ldrb	r3, [r0, #6]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d03b      	beq.n	8006d90 <HAL_SUBGHZ_Init+0x88>
  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006d18:	2302      	movs	r3, #2
 8006d1a:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8006d1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d20:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8006d24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d28:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006d2c:	4b21      	ldr	r3, [pc, #132]	; (8006db4 <HAL_SUBGHZ_Init+0xac>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006d34:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006d38:	2264      	movs	r2, #100	; 0x64
 8006d3a:	fb02 f303 	mul.w	r3, r2, r3
 8006d3e:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 8006d40:	9b01      	ldr	r3, [sp, #4]
 8006d42:	b34b      	cbz	r3, 8006d98 <HAL_SUBGHZ_Init+0x90>
    count--;
 8006d44:	9b01      	ldr	r3, [sp, #4]
 8006d46:	3b01      	subs	r3, #1
 8006d48:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8006d4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d52:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006d56:	d1f3      	bne.n	8006d40 <HAL_SUBGHZ_Init+0x38>
    status = HAL_OK;
 8006d58:	2500      	movs	r5, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006d5a:	4b17      	ldr	r3, [pc, #92]	; (8006db8 <HAL_SUBGHZ_Init+0xb0>)
 8006d5c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006d60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d64:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006d68:	4914      	ldr	r1, [pc, #80]	; (8006dbc <HAL_SUBGHZ_Init+0xb4>)
 8006d6a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006d6e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006d72:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8006d76:	689a      	ldr	r2, [r3, #8]
 8006d78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d7c:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8006d7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d82:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 8006d84:	b15d      	cbz	r5, 8006d9e <HAL_SUBGHZ_Init+0x96>
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8006d86:	2301      	movs	r3, #1
 8006d88:	71a3      	strb	r3, [r4, #6]
}
 8006d8a:	4628      	mov	r0, r5
 8006d8c:	b003      	add	sp, #12
 8006d8e:	bd30      	pop	{r4, r5, pc}
    hsubghz->Lock = HAL_UNLOCKED;
 8006d90:	7143      	strb	r3, [r0, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 8006d92:	f7fa fd37 	bl	8001804 <HAL_SUBGHZ_MspInit>
 8006d96:	e7bf      	b.n	8006d18 <HAL_SUBGHZ_Init+0x10>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006d98:	2501      	movs	r5, #1
 8006d9a:	60a5      	str	r5, [r4, #8]
      break;
 8006d9c:	e7dd      	b.n	8006d5a <HAL_SUBGHZ_Init+0x52>
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8006d9e:	6820      	ldr	r0, [r4, #0]
 8006da0:	f7ff ffa0 	bl	8006ce4 <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006da4:	2301      	movs	r3, #1
 8006da6:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8006da8:	2300      	movs	r3, #0
 8006daa:	60a3      	str	r3, [r4, #8]
 8006dac:	e7eb      	b.n	8006d86 <HAL_SUBGHZ_Init+0x7e>
    return status;
 8006dae:	2501      	movs	r5, #1
 8006db0:	e7eb      	b.n	8006d8a <HAL_SUBGHZ_Init+0x82>
 8006db2:	bf00      	nop
 8006db4:	20000070 	.word	0x20000070
 8006db8:	58000400 	.word	0x58000400
 8006dbc:	58000800 	.word	0x58000800

08006dc0 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8006dc0:	b082      	sub	sp, #8
 8006dc2:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006dc4:	4b1a      	ldr	r3, [pc, #104]	; (8006e30 <SUBGHZSPI_Transmit+0x70>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006dcc:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006dd0:	2064      	movs	r0, #100	; 0x64
 8006dd2:	fb00 f303 	mul.w	r3, r0, r3
 8006dd6:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006dd8:	9b01      	ldr	r3, [sp, #4]
 8006dda:	b14b      	cbz	r3, 8006df0 <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8006ddc:	9b01      	ldr	r3, [sp, #4]
 8006dde:	3b01      	subs	r3, #1
 8006de0:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006de2:	4b14      	ldr	r3, [pc, #80]	; (8006e34 <SUBGHZSPI_Transmit+0x74>)
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	f013 0f02 	tst.w	r3, #2
 8006dea:	d0f5      	beq.n	8006dd8 <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8006dec:	2000      	movs	r0, #0
 8006dee:	e001      	b.n	8006df4 <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006df0:	2001      	movs	r0, #1
 8006df2:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 8006df4:	4b0f      	ldr	r3, [pc, #60]	; (8006e34 <SUBGHZSPI_Transmit+0x74>)
 8006df6:	7319      	strb	r1, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006df8:	4b0d      	ldr	r3, [pc, #52]	; (8006e30 <SUBGHZSPI_Transmit+0x70>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006e00:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006e04:	2164      	movs	r1, #100	; 0x64
 8006e06:	fb01 f303 	mul.w	r3, r1, r3
 8006e0a:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8006e0c:	9b01      	ldr	r3, [sp, #4]
 8006e0e:	b143      	cbz	r3, 8006e22 <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8006e10:	9b01      	ldr	r3, [sp, #4]
 8006e12:	3b01      	subs	r3, #1
 8006e14:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8006e16:	4b07      	ldr	r3, [pc, #28]	; (8006e34 <SUBGHZSPI_Transmit+0x74>)
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	f013 0f01 	tst.w	r3, #1
 8006e1e:	d0f5      	beq.n	8006e0c <SUBGHZSPI_Transmit+0x4c>
 8006e20:	e001      	b.n	8006e26 <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006e22:	2001      	movs	r0, #1
 8006e24:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8006e26:	4b03      	ldr	r3, [pc, #12]	; (8006e34 <SUBGHZSPI_Transmit+0x74>)
 8006e28:	68db      	ldr	r3, [r3, #12]

  return status;
}
 8006e2a:	b002      	add	sp, #8
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop
 8006e30:	20000070 	.word	0x20000070
 8006e34:	58010000 	.word	0x58010000

08006e38 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8006e38:	b082      	sub	sp, #8
 8006e3a:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006e3c:	4b1c      	ldr	r3, [pc, #112]	; (8006eb0 <SUBGHZSPI_Receive+0x78>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006e44:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006e48:	2064      	movs	r0, #100	; 0x64
 8006e4a:	fb00 f303 	mul.w	r3, r0, r3
 8006e4e:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006e50:	9b01      	ldr	r3, [sp, #4]
 8006e52:	b14b      	cbz	r3, 8006e68 <SUBGHZSPI_Receive+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8006e54:	9b01      	ldr	r3, [sp, #4]
 8006e56:	3b01      	subs	r3, #1
 8006e58:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006e5a:	4b16      	ldr	r3, [pc, #88]	; (8006eb4 <SUBGHZSPI_Receive+0x7c>)
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	f013 0f02 	tst.w	r3, #2
 8006e62:	d0f5      	beq.n	8006e50 <SUBGHZSPI_Receive+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8006e64:	2000      	movs	r0, #0
 8006e66:	e001      	b.n	8006e6c <SUBGHZSPI_Receive+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006e68:	2001      	movs	r0, #1
 8006e6a:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 8006e6c:	4b11      	ldr	r3, [pc, #68]	; (8006eb4 <SUBGHZSPI_Receive+0x7c>)
 8006e6e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006e72:	f883 c00c 	strb.w	ip, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006e76:	4b0e      	ldr	r3, [pc, #56]	; (8006eb0 <SUBGHZSPI_Receive+0x78>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006e7e:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006e82:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8006e86:	fb0c f303 	mul.w	r3, ip, r3
 8006e8a:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8006e8c:	9b01      	ldr	r3, [sp, #4]
 8006e8e:	b143      	cbz	r3, 8006ea2 <SUBGHZSPI_Receive+0x6a>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8006e90:	9b01      	ldr	r3, [sp, #4]
 8006e92:	3b01      	subs	r3, #1
 8006e94:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8006e96:	4b07      	ldr	r3, [pc, #28]	; (8006eb4 <SUBGHZSPI_Receive+0x7c>)
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	f013 0f01 	tst.w	r3, #1
 8006e9e:	d0f5      	beq.n	8006e8c <SUBGHZSPI_Receive+0x54>
 8006ea0:	e001      	b.n	8006ea6 <SUBGHZSPI_Receive+0x6e>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006ea2:	2001      	movs	r0, #1
 8006ea4:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8006ea6:	4b03      	ldr	r3, [pc, #12]	; (8006eb4 <SUBGHZSPI_Receive+0x7c>)
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	700b      	strb	r3, [r1, #0]

  return status;
}
 8006eac:	b002      	add	sp, #8
 8006eae:	4770      	bx	lr
 8006eb0:	20000070 	.word	0x20000070
 8006eb4:	58010000 	.word	0x58010000

08006eb8 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006eb8:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8006eba:	4b13      	ldr	r3, [pc, #76]	; (8006f08 <SUBGHZ_WaitOnBusy+0x50>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006ec2:	f3c3 434b 	ubfx	r3, r3, #17, #12
 8006ec6:	2264      	movs	r2, #100	; 0x64
 8006ec8:	fb02 f303 	mul.w	r3, r2, r3
 8006ecc:	9301      	str	r3, [sp, #4]
 8006ece:	e006      	b.n	8006ede <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8006ed0:	2302      	movs	r3, #2
 8006ed2:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 8006ed4:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 8006ed6:	b002      	add	sp, #8
 8006ed8:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8006eda:	4213      	tst	r3, r2
 8006edc:	d012      	beq.n	8006f04 <SUBGHZ_WaitOnBusy+0x4c>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8006ede:	4b0b      	ldr	r3, [pc, #44]	; (8006f0c <SUBGHZ_WaitOnBusy+0x54>)
 8006ee0:	695b      	ldr	r3, [r3, #20]
 8006ee2:	f013 0304 	ands.w	r3, r3, #4
 8006ee6:	d000      	beq.n	8006eea <SUBGHZ_WaitOnBusy+0x32>
 8006ee8:	2301      	movs	r3, #1
    if (count == 0U)
 8006eea:	9a01      	ldr	r2, [sp, #4]
 8006eec:	2a00      	cmp	r2, #0
 8006eee:	d0ef      	beq.n	8006ed0 <SUBGHZ_WaitOnBusy+0x18>
    count--;
 8006ef0:	9a01      	ldr	r2, [sp, #4]
 8006ef2:	3a01      	subs	r2, #1
 8006ef4:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8006ef6:	4a05      	ldr	r2, [pc, #20]	; (8006f0c <SUBGHZ_WaitOnBusy+0x54>)
 8006ef8:	6952      	ldr	r2, [r2, #20]
 8006efa:	f012 0202 	ands.w	r2, r2, #2
 8006efe:	d0ec      	beq.n	8006eda <SUBGHZ_WaitOnBusy+0x22>
 8006f00:	2201      	movs	r2, #1
 8006f02:	e7ea      	b.n	8006eda <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 8006f04:	2000      	movs	r0, #0
 8006f06:	e7e6      	b.n	8006ed6 <SUBGHZ_WaitOnBusy+0x1e>
 8006f08:	20000070 	.word	0x20000070
 8006f0c:	58000400 	.word	0x58000400

08006f10 <SUBGHZ_CheckDeviceReady>:
{
 8006f10:	b500      	push	{lr}
 8006f12:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8006f14:	7903      	ldrb	r3, [r0, #4]
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d004      	beq.n	8006f24 <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8006f1a:	f7ff ffcd 	bl	8006eb8 <SUBGHZ_WaitOnBusy>
}
 8006f1e:	b003      	add	sp, #12
 8006f20:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 8006f24:	4b0d      	ldr	r3, [pc, #52]	; (8006f5c <SUBGHZ_CheckDeviceReady+0x4c>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006f2c:	f3c3 334f 	ubfx	r3, r3, #13, #16
 8006f30:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006f32:	4a0b      	ldr	r2, [pc, #44]	; (8006f60 <SUBGHZ_CheckDeviceReady+0x50>)
 8006f34:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006f38:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      count--;
 8006f40:	9b01      	ldr	r3, [sp, #4]
 8006f42:	3b01      	subs	r3, #1
 8006f44:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 8006f46:	9b01      	ldr	r3, [sp, #4]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d1f9      	bne.n	8006f40 <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006f4c:	4a04      	ldr	r2, [pc, #16]	; (8006f60 <SUBGHZ_CheckDeviceReady+0x50>)
 8006f4e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006f52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006f5a:	e7de      	b.n	8006f1a <SUBGHZ_CheckDeviceReady+0xa>
 8006f5c:	20000070 	.word	0x20000070
 8006f60:	58000400 	.word	0x58000400

08006f64 <HAL_SUBGHZ_WriteRegisters>:
{
 8006f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f68:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006f6a:	7980      	ldrb	r0, [r0, #6]
 8006f6c:	fa5f f880 	uxtb.w	r8, r0
 8006f70:	f1b8 0f01 	cmp.w	r8, #1
 8006f74:	d13e      	bne.n	8006ff4 <HAL_SUBGHZ_WriteRegisters+0x90>
 8006f76:	460c      	mov	r4, r1
 8006f78:	4617      	mov	r7, r2
 8006f7a:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8006f7c:	796b      	ldrb	r3, [r5, #5]
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d03b      	beq.n	8006ffa <HAL_SUBGHZ_WriteRegisters+0x96>
 8006f82:	2301      	movs	r3, #1
 8006f84:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006f86:	2302      	movs	r3, #2
 8006f88:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006f8a:	4628      	mov	r0, r5
 8006f8c:	f7ff ffc0 	bl	8006f10 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006f90:	4a1b      	ldr	r2, [pc, #108]	; (8007000 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8006f92:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006f96:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8006f9e:	210d      	movs	r1, #13
 8006fa0:	4628      	mov	r0, r5
 8006fa2:	f7ff ff0d 	bl	8006dc0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006fa6:	0a21      	lsrs	r1, r4, #8
 8006fa8:	4628      	mov	r0, r5
 8006faa:	f7ff ff09 	bl	8006dc0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006fae:	b2e1      	uxtb	r1, r4
 8006fb0:	4628      	mov	r0, r5
 8006fb2:	f7ff ff05 	bl	8006dc0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006fb6:	2400      	movs	r4, #0
 8006fb8:	e005      	b.n	8006fc6 <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006fba:	5d39      	ldrb	r1, [r7, r4]
 8006fbc:	4628      	mov	r0, r5
 8006fbe:	f7ff feff 	bl	8006dc0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006fc2:	3401      	adds	r4, #1
 8006fc4:	b2a4      	uxth	r4, r4
 8006fc6:	42b4      	cmp	r4, r6
 8006fc8:	d3f7      	bcc.n	8006fba <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006fca:	4a0d      	ldr	r2, [pc, #52]	; (8007000 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8006fcc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006fd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006fd8:	4628      	mov	r0, r5
 8006fda:	f7ff ff6d 	bl	8006eb8 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006fde:	68ab      	ldr	r3, [r5, #8]
 8006fe0:	b90b      	cbnz	r3, 8006fe6 <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 8006fe2:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8006fea:	2300      	movs	r3, #0
 8006fec:	716b      	strb	r3, [r5, #5]
}
 8006fee:	4640      	mov	r0, r8
 8006ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8006ff4:	f04f 0802 	mov.w	r8, #2
 8006ff8:	e7f9      	b.n	8006fee <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 8006ffa:	f04f 0802 	mov.w	r8, #2
 8006ffe:	e7f6      	b.n	8006fee <HAL_SUBGHZ_WriteRegisters+0x8a>
 8007000:	58000400 	.word	0x58000400

08007004 <HAL_SUBGHZ_ReadRegisters>:
{
 8007004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007008:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800700a:	7980      	ldrb	r0, [r0, #6]
 800700c:	fa5f f880 	uxtb.w	r8, r0
 8007010:	f1b8 0f01 	cmp.w	r8, #1
 8007014:	d141      	bne.n	800709a <HAL_SUBGHZ_ReadRegisters+0x96>
 8007016:	460c      	mov	r4, r1
 8007018:	4615      	mov	r5, r2
 800701a:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 800701c:	7973      	ldrb	r3, [r6, #5]
 800701e:	2b01      	cmp	r3, #1
 8007020:	d03e      	beq.n	80070a0 <HAL_SUBGHZ_ReadRegisters+0x9c>
 8007022:	2301      	movs	r3, #1
 8007024:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007026:	4630      	mov	r0, r6
 8007028:	f7ff ff72 	bl	8006f10 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800702c:	4a1e      	ldr	r2, [pc, #120]	; (80070a8 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 800702e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007032:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007036:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 800703a:	211d      	movs	r1, #29
 800703c:	4630      	mov	r0, r6
 800703e:	f7ff febf 	bl	8006dc0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007042:	0a21      	lsrs	r1, r4, #8
 8007044:	4630      	mov	r0, r6
 8007046:	f7ff febb 	bl	8006dc0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800704a:	b2e1      	uxtb	r1, r4
 800704c:	4630      	mov	r0, r6
 800704e:	f7ff feb7 	bl	8006dc0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8007052:	2100      	movs	r1, #0
 8007054:	4630      	mov	r0, r6
 8007056:	f7ff feb3 	bl	8006dc0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800705a:	2400      	movs	r4, #0
 800705c:	e006      	b.n	800706c <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800705e:	4629      	mov	r1, r5
 8007060:	4630      	mov	r0, r6
 8007062:	f7ff fee9 	bl	8006e38 <SUBGHZSPI_Receive>
      pData++;
 8007066:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8007068:	3401      	adds	r4, #1
 800706a:	b2a4      	uxth	r4, r4
 800706c:	42bc      	cmp	r4, r7
 800706e:	d3f6      	bcc.n	800705e <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007070:	4a0d      	ldr	r2, [pc, #52]	; (80070a8 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8007072:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007076:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800707a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800707e:	4630      	mov	r0, r6
 8007080:	f7ff ff1a 	bl	8006eb8 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007084:	68b3      	ldr	r3, [r6, #8]
 8007086:	b90b      	cbnz	r3, 800708c <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 8007088:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800708c:	2301      	movs	r3, #1
 800708e:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8007090:	2300      	movs	r3, #0
 8007092:	7173      	strb	r3, [r6, #5]
}
 8007094:	4640      	mov	r0, r8
 8007096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800709a:	f04f 0802 	mov.w	r8, #2
 800709e:	e7f9      	b.n	8007094 <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 80070a0:	f04f 0802 	mov.w	r8, #2
 80070a4:	e7f6      	b.n	8007094 <HAL_SUBGHZ_ReadRegisters+0x90>
 80070a6:	bf00      	nop
 80070a8:	58000400 	.word	0x58000400

080070ac <HAL_SUBGHZ_ExecSetCmd>:
{
 80070ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070b0:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80070b2:	7980      	ldrb	r0, [r0, #6]
 80070b4:	fa5f f980 	uxtb.w	r9, r0
 80070b8:	f1b9 0f01 	cmp.w	r9, #1
 80070bc:	d143      	bne.n	8007146 <HAL_SUBGHZ_ExecSetCmd+0x9a>
 80070be:	4688      	mov	r8, r1
 80070c0:	4617      	mov	r7, r2
 80070c2:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 80070c4:	796b      	ldrb	r3, [r5, #5]
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d040      	beq.n	800714c <HAL_SUBGHZ_ExecSetCmd+0xa0>
 80070ca:	2301      	movs	r3, #1
 80070cc:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80070ce:	4628      	mov	r0, r5
 80070d0:	f7ff ff1e 	bl	8006f10 <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80070d4:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 80070d8:	d005      	beq.n	80070e6 <HAL_SUBGHZ_ExecSetCmd+0x3a>
 80070da:	f1b8 0f94 	cmp.w	r8, #148	; 0x94
 80070de:	d002      	beq.n	80070e6 <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80070e0:	2300      	movs	r3, #0
 80070e2:	712b      	strb	r3, [r5, #4]
 80070e4:	e001      	b.n	80070ea <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80070e6:	2301      	movs	r3, #1
 80070e8:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80070ea:	4a1a      	ldr	r2, [pc, #104]	; (8007154 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 80070ec:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80070f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80070f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80070f8:	4641      	mov	r1, r8
 80070fa:	4628      	mov	r0, r5
 80070fc:	f7ff fe60 	bl	8006dc0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007100:	2400      	movs	r4, #0
 8007102:	e005      	b.n	8007110 <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007104:	5d39      	ldrb	r1, [r7, r4]
 8007106:	4628      	mov	r0, r5
 8007108:	f7ff fe5a 	bl	8006dc0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800710c:	3401      	adds	r4, #1
 800710e:	b2a4      	uxth	r4, r4
 8007110:	42b4      	cmp	r4, r6
 8007112:	d3f7      	bcc.n	8007104 <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007114:	4a0f      	ldr	r2, [pc, #60]	; (8007154 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8007116:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800711a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800711e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if (Command != RADIO_SET_SLEEP)
 8007122:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 8007126:	d10a      	bne.n	800713e <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007128:	68ab      	ldr	r3, [r5, #8]
 800712a:	b90b      	cbnz	r3, 8007130 <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 800712c:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007130:	2301      	movs	r3, #1
 8007132:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8007134:	2300      	movs	r3, #0
 8007136:	716b      	strb	r3, [r5, #5]
}
 8007138:	4648      	mov	r0, r9
 800713a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 800713e:	4628      	mov	r0, r5
 8007140:	f7ff feba 	bl	8006eb8 <SUBGHZ_WaitOnBusy>
 8007144:	e7f0      	b.n	8007128 <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 8007146:	f04f 0902 	mov.w	r9, #2
 800714a:	e7f5      	b.n	8007138 <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 800714c:	f04f 0902 	mov.w	r9, #2
 8007150:	e7f2      	b.n	8007138 <HAL_SUBGHZ_ExecSetCmd+0x8c>
 8007152:	bf00      	nop
 8007154:	58000400 	.word	0x58000400

08007158 <HAL_SUBGHZ_ExecGetCmd>:
{
 8007158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800715c:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800715e:	7980      	ldrb	r0, [r0, #6]
 8007160:	fa5f f880 	uxtb.w	r8, r0
 8007164:	f1b8 0f01 	cmp.w	r8, #1
 8007168:	d139      	bne.n	80071de <HAL_SUBGHZ_ExecGetCmd+0x86>
 800716a:	460c      	mov	r4, r1
 800716c:	4615      	mov	r5, r2
 800716e:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8007170:	7973      	ldrb	r3, [r6, #5]
 8007172:	2b01      	cmp	r3, #1
 8007174:	d036      	beq.n	80071e4 <HAL_SUBGHZ_ExecGetCmd+0x8c>
 8007176:	2301      	movs	r3, #1
 8007178:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800717a:	4630      	mov	r0, r6
 800717c:	f7ff fec8 	bl	8006f10 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007180:	4a1a      	ldr	r2, [pc, #104]	; (80071ec <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8007182:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007186:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800718a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800718e:	4621      	mov	r1, r4
 8007190:	4630      	mov	r0, r6
 8007192:	f7ff fe15 	bl	8006dc0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007196:	2100      	movs	r1, #0
 8007198:	4630      	mov	r0, r6
 800719a:	f7ff fe11 	bl	8006dc0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800719e:	2400      	movs	r4, #0
 80071a0:	e006      	b.n	80071b0 <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80071a2:	4629      	mov	r1, r5
 80071a4:	4630      	mov	r0, r6
 80071a6:	f7ff fe47 	bl	8006e38 <SUBGHZSPI_Receive>
      pData++;
 80071aa:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 80071ac:	3401      	adds	r4, #1
 80071ae:	b2a4      	uxth	r4, r4
 80071b0:	42bc      	cmp	r4, r7
 80071b2:	d3f6      	bcc.n	80071a2 <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80071b4:	4a0d      	ldr	r2, [pc, #52]	; (80071ec <HAL_SUBGHZ_ExecGetCmd+0x94>)
 80071b6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80071ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80071c2:	4630      	mov	r0, r6
 80071c4:	f7ff fe78 	bl	8006eb8 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80071c8:	68b3      	ldr	r3, [r6, #8]
 80071ca:	b90b      	cbnz	r3, 80071d0 <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 80071cc:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80071d0:	2301      	movs	r3, #1
 80071d2:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 80071d4:	2300      	movs	r3, #0
 80071d6:	7173      	strb	r3, [r6, #5]
}
 80071d8:	4640      	mov	r0, r8
 80071da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80071de:	f04f 0802 	mov.w	r8, #2
 80071e2:	e7f9      	b.n	80071d8 <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 80071e4:	f04f 0802 	mov.w	r8, #2
 80071e8:	e7f6      	b.n	80071d8 <HAL_SUBGHZ_ExecGetCmd+0x80>
 80071ea:	bf00      	nop
 80071ec:	58000400 	.word	0x58000400

080071f0 <HAL_SUBGHZ_IRQHandler>:
{
 80071f0:	b530      	push	{r4, r5, lr}
 80071f2:	b083      	sub	sp, #12
 80071f4:	4605      	mov	r5, r0
  uint8_t tmpisr[2U] = {0U};
 80071f6:	2300      	movs	r3, #0
 80071f8:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 80071fc:	2302      	movs	r3, #2
 80071fe:	aa01      	add	r2, sp, #4
 8007200:	2112      	movs	r1, #18
 8007202:	f7ff ffa9 	bl	8007158 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8007206:	f89d 4004 	ldrb.w	r4, [sp, #4]
  itsource = (itsource << 8U) | tmpisr[1U];
 800720a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800720e:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8007212:	f013 0f01 	tst.w	r3, #1
 8007216:	d126      	bne.n	8007266 <HAL_SUBGHZ_IRQHandler+0x76>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8007218:	f014 0f02 	tst.w	r4, #2
 800721c:	d127      	bne.n	800726e <HAL_SUBGHZ_IRQHandler+0x7e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800721e:	f014 0f04 	tst.w	r4, #4
 8007222:	d128      	bne.n	8007276 <HAL_SUBGHZ_IRQHandler+0x86>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8007224:	f014 0f08 	tst.w	r4, #8
 8007228:	d129      	bne.n	800727e <HAL_SUBGHZ_IRQHandler+0x8e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 800722a:	f014 0f10 	tst.w	r4, #16
 800722e:	d12a      	bne.n	8007286 <HAL_SUBGHZ_IRQHandler+0x96>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8007230:	f014 0f20 	tst.w	r4, #32
 8007234:	d12b      	bne.n	800728e <HAL_SUBGHZ_IRQHandler+0x9e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8007236:	f014 0f40 	tst.w	r4, #64	; 0x40
 800723a:	d12c      	bne.n	8007296 <HAL_SUBGHZ_IRQHandler+0xa6>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 800723c:	f014 0f80 	tst.w	r4, #128	; 0x80
 8007240:	d006      	beq.n	8007250 <HAL_SUBGHZ_IRQHandler+0x60>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8007242:	f414 7f80 	tst.w	r4, #256	; 0x100
 8007246:	d02a      	beq.n	800729e <HAL_SUBGHZ_IRQHandler+0xae>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8007248:	2101      	movs	r1, #1
 800724a:	4628      	mov	r0, r5
 800724c:	f00b f972 	bl	8012534 <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8007250:	f414 7f00 	tst.w	r4, #512	; 0x200
 8007254:	d128      	bne.n	80072a8 <HAL_SUBGHZ_IRQHandler+0xb8>
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8007256:	2302      	movs	r3, #2
 8007258:	aa01      	add	r2, sp, #4
 800725a:	4619      	mov	r1, r3
 800725c:	4628      	mov	r0, r5
 800725e:	f7ff ff25 	bl	80070ac <HAL_SUBGHZ_ExecSetCmd>
}
 8007262:	b003      	add	sp, #12
 8007264:	bd30      	pop	{r4, r5, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8007266:	4628      	mov	r0, r5
 8007268:	f00b f94c 	bl	8012504 <HAL_SUBGHZ_TxCpltCallback>
 800726c:	e7d4      	b.n	8007218 <HAL_SUBGHZ_IRQHandler+0x28>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 800726e:	4628      	mov	r0, r5
 8007270:	f00b f950 	bl	8012514 <HAL_SUBGHZ_RxCpltCallback>
 8007274:	e7d3      	b.n	800721e <HAL_SUBGHZ_IRQHandler+0x2e>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8007276:	4628      	mov	r0, r5
 8007278:	f00b f980 	bl	801257c <HAL_SUBGHZ_PreambleDetectedCallback>
 800727c:	e7d2      	b.n	8007224 <HAL_SUBGHZ_IRQHandler+0x34>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800727e:	4628      	mov	r0, r5
 8007280:	f00b f984 	bl	801258c <HAL_SUBGHZ_SyncWordValidCallback>
 8007284:	e7d1      	b.n	800722a <HAL_SUBGHZ_IRQHandler+0x3a>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8007286:	4628      	mov	r0, r5
 8007288:	f00b f988 	bl	801259c <HAL_SUBGHZ_HeaderValidCallback>
 800728c:	e7d0      	b.n	8007230 <HAL_SUBGHZ_IRQHandler+0x40>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800728e:	4628      	mov	r0, r5
 8007290:	f00b f96c 	bl	801256c <HAL_SUBGHZ_HeaderErrorCallback>
 8007294:	e7cf      	b.n	8007236 <HAL_SUBGHZ_IRQHandler+0x46>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8007296:	4628      	mov	r0, r5
 8007298:	f00b f944 	bl	8012524 <HAL_SUBGHZ_CRCErrorCallback>
 800729c:	e7ce      	b.n	800723c <HAL_SUBGHZ_IRQHandler+0x4c>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800729e:	2100      	movs	r1, #0
 80072a0:	4628      	mov	r0, r5
 80072a2:	f00b f947 	bl	8012534 <HAL_SUBGHZ_CADStatusCallback>
 80072a6:	e7d3      	b.n	8007250 <HAL_SUBGHZ_IRQHandler+0x60>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80072a8:	4628      	mov	r0, r5
 80072aa:	f00b f955 	bl	8012558 <HAL_SUBGHZ_RxTxTimeoutCallback>
 80072ae:	e7d2      	b.n	8007256 <HAL_SUBGHZ_IRQHandler+0x66>

080072b0 <HAL_SUBGHZ_WriteBuffer>:
{
 80072b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072b4:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80072b6:	7980      	ldrb	r0, [r0, #6]
 80072b8:	fa5f f880 	uxtb.w	r8, r0
 80072bc:	f1b8 0f01 	cmp.w	r8, #1
 80072c0:	d138      	bne.n	8007334 <HAL_SUBGHZ_WriteBuffer+0x84>
 80072c2:	460c      	mov	r4, r1
 80072c4:	4617      	mov	r7, r2
 80072c6:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 80072c8:	796b      	ldrb	r3, [r5, #5]
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d035      	beq.n	800733a <HAL_SUBGHZ_WriteBuffer+0x8a>
 80072ce:	2301      	movs	r3, #1
 80072d0:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80072d2:	4628      	mov	r0, r5
 80072d4:	f7ff fe1c 	bl	8006f10 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80072d8:	4a19      	ldr	r2, [pc, #100]	; (8007340 <HAL_SUBGHZ_WriteBuffer+0x90>)
 80072da:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80072de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80072e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80072e6:	210e      	movs	r1, #14
 80072e8:	4628      	mov	r0, r5
 80072ea:	f7ff fd69 	bl	8006dc0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80072ee:	4621      	mov	r1, r4
 80072f0:	4628      	mov	r0, r5
 80072f2:	f7ff fd65 	bl	8006dc0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80072f6:	2400      	movs	r4, #0
 80072f8:	e005      	b.n	8007306 <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80072fa:	5d39      	ldrb	r1, [r7, r4]
 80072fc:	4628      	mov	r0, r5
 80072fe:	f7ff fd5f 	bl	8006dc0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007302:	3401      	adds	r4, #1
 8007304:	b2a4      	uxth	r4, r4
 8007306:	42b4      	cmp	r4, r6
 8007308:	d3f7      	bcc.n	80072fa <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800730a:	4a0d      	ldr	r2, [pc, #52]	; (8007340 <HAL_SUBGHZ_WriteBuffer+0x90>)
 800730c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007310:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007314:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007318:	4628      	mov	r0, r5
 800731a:	f7ff fdcd 	bl	8006eb8 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800731e:	68ab      	ldr	r3, [r5, #8]
 8007320:	b90b      	cbnz	r3, 8007326 <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 8007322:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007326:	2301      	movs	r3, #1
 8007328:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 800732a:	2300      	movs	r3, #0
 800732c:	716b      	strb	r3, [r5, #5]
}
 800732e:	4640      	mov	r0, r8
 8007330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8007334:	f04f 0802 	mov.w	r8, #2
 8007338:	e7f9      	b.n	800732e <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 800733a:	f04f 0802 	mov.w	r8, #2
 800733e:	e7f6      	b.n	800732e <HAL_SUBGHZ_WriteBuffer+0x7e>
 8007340:	58000400 	.word	0x58000400

08007344 <HAL_SUBGHZ_ReadBuffer>:
{
 8007344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007348:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800734a:	7980      	ldrb	r0, [r0, #6]
 800734c:	fa5f f880 	uxtb.w	r8, r0
 8007350:	f1b8 0f01 	cmp.w	r8, #1
 8007354:	d13d      	bne.n	80073d2 <HAL_SUBGHZ_ReadBuffer+0x8e>
 8007356:	460c      	mov	r4, r1
 8007358:	4615      	mov	r5, r2
 800735a:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 800735c:	7973      	ldrb	r3, [r6, #5]
 800735e:	2b01      	cmp	r3, #1
 8007360:	d03a      	beq.n	80073d8 <HAL_SUBGHZ_ReadBuffer+0x94>
 8007362:	2301      	movs	r3, #1
 8007364:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007366:	4630      	mov	r0, r6
 8007368:	f7ff fdd2 	bl	8006f10 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800736c:	4a1c      	ldr	r2, [pc, #112]	; (80073e0 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 800736e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007372:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007376:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800737a:	211e      	movs	r1, #30
 800737c:	4630      	mov	r0, r6
 800737e:	f7ff fd1f 	bl	8006dc0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007382:	4621      	mov	r1, r4
 8007384:	4630      	mov	r0, r6
 8007386:	f7ff fd1b 	bl	8006dc0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800738a:	2100      	movs	r1, #0
 800738c:	4630      	mov	r0, r6
 800738e:	f7ff fd17 	bl	8006dc0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007392:	2400      	movs	r4, #0
 8007394:	e006      	b.n	80073a4 <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007396:	4629      	mov	r1, r5
 8007398:	4630      	mov	r0, r6
 800739a:	f7ff fd4d 	bl	8006e38 <SUBGHZSPI_Receive>
      pData++;
 800739e:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 80073a0:	3401      	adds	r4, #1
 80073a2:	b2a4      	uxth	r4, r4
 80073a4:	42bc      	cmp	r4, r7
 80073a6:	d3f6      	bcc.n	8007396 <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80073a8:	4a0d      	ldr	r2, [pc, #52]	; (80073e0 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 80073aa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80073ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80073b6:	4630      	mov	r0, r6
 80073b8:	f7ff fd7e 	bl	8006eb8 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80073bc:	68b3      	ldr	r3, [r6, #8]
 80073be:	b90b      	cbnz	r3, 80073c4 <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 80073c0:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80073c4:	2301      	movs	r3, #1
 80073c6:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 80073c8:	2300      	movs	r3, #0
 80073ca:	7173      	strb	r3, [r6, #5]
}
 80073cc:	4640      	mov	r0, r8
 80073ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80073d2:	f04f 0802 	mov.w	r8, #2
 80073d6:	e7f9      	b.n	80073cc <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 80073d8:	f04f 0802 	mov.w	r8, #2
 80073dc:	e7f6      	b.n	80073cc <HAL_SUBGHZ_ReadBuffer+0x88>
 80073de:	bf00      	nop
 80073e0:	58000400 	.word	0x58000400

080073e4 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80073e4:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e6:	e852 3f00 	ldrex	r3, [r2]
 80073ea:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ee:	e842 3100 	strex	r1, r3, [r2]
 80073f2:	2900      	cmp	r1, #0
 80073f4:	d1f6      	bne.n	80073e4 <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80073f6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f8:	f102 0308 	add.w	r3, r2, #8
 80073fc:	e853 3f00 	ldrex	r3, [r3]
 8007400:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007404:	3208      	adds	r2, #8
 8007406:	e842 3100 	strex	r1, r3, [r2]
 800740a:	2900      	cmp	r1, #0
 800740c:	d1f3      	bne.n	80073f6 <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800740e:	2320      	movs	r3, #32
 8007410:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
}
 8007414:	4770      	bx	lr

08007416 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007416:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007418:	e852 3f00 	ldrex	r3, [r2]
 800741c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007420:	e842 3100 	strex	r1, r3, [r2]
 8007424:	2900      	cmp	r1, #0
 8007426:	d1f6      	bne.n	8007416 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007428:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742a:	f102 0308 	add.w	r3, r2, #8
 800742e:	e853 3f00 	ldrex	r3, [r3]
 8007432:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007436:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743a:	3208      	adds	r2, #8
 800743c:	e842 3100 	strex	r1, r3, [r2]
 8007440:	2900      	cmp	r1, #0
 8007442:	d1f1      	bne.n	8007428 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007444:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8007446:	2b01      	cmp	r3, #1
 8007448:	d006      	beq.n	8007458 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800744a:	2320      	movs	r3, #32
 800744c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007450:	2300      	movs	r3, #0
 8007452:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007454:	6703      	str	r3, [r0, #112]	; 0x70
}
 8007456:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007458:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745a:	e852 3f00 	ldrex	r3, [r2]
 800745e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007462:	e842 3100 	strex	r1, r3, [r2]
 8007466:	2900      	cmp	r1, #0
 8007468:	d1f6      	bne.n	8007458 <UART_EndRxTransfer+0x42>
 800746a:	e7ee      	b.n	800744a <UART_EndRxTransfer+0x34>

0800746c <HAL_UART_Transmit_DMA>:
  if (huart->gState == HAL_UART_STATE_READY)
 800746c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8007470:	2b20      	cmp	r3, #32
 8007472:	d14c      	bne.n	800750e <HAL_UART_Transmit_DMA+0xa2>
{
 8007474:	b510      	push	{r4, lr}
 8007476:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8007478:	2900      	cmp	r1, #0
 800747a:	d04a      	beq.n	8007512 <HAL_UART_Transmit_DMA+0xa6>
 800747c:	2a00      	cmp	r2, #0
 800747e:	d04a      	beq.n	8007516 <HAL_UART_Transmit_DMA+0xaa>
    __HAL_LOCK(huart);
 8007480:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8007484:	2b01      	cmp	r3, #1
 8007486:	d048      	beq.n	800751a <HAL_UART_Transmit_DMA+0xae>
 8007488:	2301      	movs	r3, #1
 800748a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->pTxBuffPtr  = pData;
 800748e:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007490:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 8007494:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007498:	2300      	movs	r3, #0
 800749a:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800749e:	2321      	movs	r3, #33	; 0x21
 80074a0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    if (huart->hdmatx != NULL)
 80074a4:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80074a6:	b1f3      	cbz	r3, 80074e6 <HAL_UART_Transmit_DMA+0x7a>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80074a8:	491d      	ldr	r1, [pc, #116]	; (8007520 <HAL_UART_Transmit_DMA+0xb4>)
 80074aa:	62d9      	str	r1, [r3, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80074ac:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80074ae:	491d      	ldr	r1, [pc, #116]	; (8007524 <HAL_UART_Transmit_DMA+0xb8>)
 80074b0:	6319      	str	r1, [r3, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80074b2:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80074b4:	491c      	ldr	r1, [pc, #112]	; (8007528 <HAL_UART_Transmit_DMA+0xbc>)
 80074b6:	6359      	str	r1, [r3, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 80074b8:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80074ba:	2100      	movs	r1, #0
 80074bc:	6399      	str	r1, [r3, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80074be:	6801      	ldr	r1, [r0, #0]
 80074c0:	4613      	mov	r3, r2
 80074c2:	f101 0228 	add.w	r2, r1, #40	; 0x28
 80074c6:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80074c8:	6f80      	ldr	r0, [r0, #120]	; 0x78
 80074ca:	f7fd fa3f 	bl	800494c <HAL_DMA_Start_IT>
 80074ce:	b150      	cbz	r0, 80074e6 <HAL_UART_Transmit_DMA+0x7a>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80074d0:	2310      	movs	r3, #16
 80074d2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 80074d6:	2300      	movs	r3, #0
 80074d8:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 80074dc:	2320      	movs	r3, #32
 80074de:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        return HAL_ERROR;
 80074e2:	2001      	movs	r0, #1
 80074e4:	e012      	b.n	800750c <HAL_UART_Transmit_DMA+0xa0>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80074e6:	6823      	ldr	r3, [r4, #0]
 80074e8:	2240      	movs	r2, #64	; 0x40
 80074ea:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 80074ec:	2300      	movs	r3, #0
 80074ee:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80074f2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f4:	f102 0308 	add.w	r3, r2, #8
 80074f8:	e853 3f00 	ldrex	r3, [r3]
 80074fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007500:	3208      	adds	r2, #8
 8007502:	e842 3100 	strex	r1, r3, [r2]
 8007506:	2900      	cmp	r1, #0
 8007508:	d1f3      	bne.n	80074f2 <HAL_UART_Transmit_DMA+0x86>
    return HAL_OK;
 800750a:	2000      	movs	r0, #0
}
 800750c:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800750e:	2002      	movs	r0, #2
}
 8007510:	4770      	bx	lr
      return HAL_ERROR;
 8007512:	2001      	movs	r0, #1
 8007514:	e7fa      	b.n	800750c <HAL_UART_Transmit_DMA+0xa0>
 8007516:	2001      	movs	r0, #1
 8007518:	e7f8      	b.n	800750c <HAL_UART_Transmit_DMA+0xa0>
    __HAL_LOCK(huart);
 800751a:	2002      	movs	r0, #2
 800751c:	e7f6      	b.n	800750c <HAL_UART_Transmit_DMA+0xa0>
 800751e:	bf00      	nop
 8007520:	0800752d 	.word	0x0800752d
 8007524:	0800759b 	.word	0x0800759b
 8007528:	080075a7 	.word	0x080075a7

0800752c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800752c:	b508      	push	{r3, lr}
 800752e:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007530:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f013 0f20 	tst.w	r3, #32
 800753a:	d118      	bne.n	800756e <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800753c:	2300      	movs	r3, #0
 800753e:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007542:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007544:	f102 0308 	add.w	r3, r2, #8
 8007548:	e853 3f00 	ldrex	r3, [r3]
 800754c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007550:	3208      	adds	r2, #8
 8007552:	e842 3100 	strex	r1, r3, [r2]
 8007556:	2900      	cmp	r1, #0
 8007558:	d1f3      	bne.n	8007542 <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800755a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800755c:	e852 3f00 	ldrex	r3, [r2]
 8007560:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007564:	e842 3100 	strex	r1, r3, [r2]
 8007568:	2900      	cmp	r1, #0
 800756a:	d1f6      	bne.n	800755a <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800756c:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800756e:	f7fa fe99 	bl	80022a4 <HAL_UART_TxCpltCallback>
}
 8007572:	e7fb      	b.n	800756c <UART_DMATransmitCplt+0x40>

08007574 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007574:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007576:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007578:	e852 3f00 	ldrex	r3, [r2]
 800757c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007580:	e842 3100 	strex	r1, r3, [r2]
 8007584:	2900      	cmp	r1, #0
 8007586:	d1f6      	bne.n	8007576 <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007588:	2320      	movs	r3, #32
 800758a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800758e:	2300      	movs	r3, #0
 8007590:	6743      	str	r3, [r0, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007592:	f7fa fe87 	bl	80022a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007596:	bd08      	pop	{r3, pc}

08007598 <HAL_UART_TxHalfCpltCallback>:
}
 8007598:	4770      	bx	lr

0800759a <UART_DMATxHalfCplt>:
{
 800759a:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 800759c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800759e:	f7ff fffb 	bl	8007598 <HAL_UART_TxHalfCpltCallback>
}
 80075a2:	bd08      	pop	{r3, pc}

080075a4 <HAL_UART_ErrorCallback>:
}
 80075a4:	4770      	bx	lr

080075a6 <UART_DMAError>:
{
 80075a6:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80075a8:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80075aa:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80075ae:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80075b2:	6823      	ldr	r3, [r4, #0]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80075ba:	d001      	beq.n	80075c0 <UART_DMAError+0x1a>
 80075bc:	2a21      	cmp	r2, #33	; 0x21
 80075be:	d010      	beq.n	80075e2 <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80075c0:	6823      	ldr	r3, [r4, #0]
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80075c8:	d001      	beq.n	80075ce <UART_DMAError+0x28>
 80075ca:	2d22      	cmp	r5, #34	; 0x22
 80075cc:	d010      	beq.n	80075f0 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80075ce:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80075d2:	f043 0310 	orr.w	r3, r3, #16
 80075d6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  HAL_UART_ErrorCallback(huart);
 80075da:	4620      	mov	r0, r4
 80075dc:	f7ff ffe2 	bl	80075a4 <HAL_UART_ErrorCallback>
}
 80075e0:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 80075e2:	2300      	movs	r3, #0
 80075e4:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80075e8:	4620      	mov	r0, r4
 80075ea:	f7ff fefb 	bl	80073e4 <UART_EndTxTransfer>
 80075ee:	e7e7      	b.n	80075c0 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 80075f0:	2300      	movs	r3, #0
 80075f2:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80075f6:	4620      	mov	r0, r4
 80075f8:	f7ff ff0d 	bl	8007416 <UART_EndRxTransfer>
 80075fc:	e7e7      	b.n	80075ce <UART_DMAError+0x28>

080075fe <UART_DMAAbortOnError>:
{
 80075fe:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007600:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8007602:	2300      	movs	r3, #0
 8007604:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007608:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 800760c:	f7ff ffca 	bl	80075a4 <HAL_UART_ErrorCallback>
}
 8007610:	bd08      	pop	{r3, pc}

08007612 <HAL_UARTEx_RxEventCallback>:
}
 8007612:	4770      	bx	lr

08007614 <HAL_UART_IRQHandler>:
{
 8007614:	b570      	push	{r4, r5, r6, lr}
 8007616:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007618:	6801      	ldr	r1, [r0, #0]
 800761a:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800761c:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800761e:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007620:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 8007624:	401a      	ands	r2, r3
 8007626:	d108      	bne.n	800763a <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007628:	f013 0f20 	tst.w	r3, #32
 800762c:	d005      	beq.n	800763a <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800762e:	f010 0f20 	tst.w	r0, #32
 8007632:	d134      	bne.n	800769e <HAL_UART_IRQHandler+0x8a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007634:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8007638:	d131      	bne.n	800769e <HAL_UART_IRQHandler+0x8a>
  if ((errorflags != 0U)
 800763a:	b12a      	cbz	r2, 8007648 <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800763c:	4a95      	ldr	r2, [pc, #596]	; (8007894 <HAL_UART_IRQHandler+0x280>)
 800763e:	402a      	ands	r2, r5
 8007640:	d133      	bne.n	80076aa <HAL_UART_IRQHandler+0x96>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007642:	4e95      	ldr	r6, [pc, #596]	; (8007898 <HAL_UART_IRQHandler+0x284>)
 8007644:	4230      	tst	r0, r6
 8007646:	d130      	bne.n	80076aa <HAL_UART_IRQHandler+0x96>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007648:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800764a:	2a01      	cmp	r2, #1
 800764c:	f000 80c3 	beq.w	80077d6 <HAL_UART_IRQHandler+0x1c2>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007650:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8007654:	d003      	beq.n	800765e <HAL_UART_IRQHandler+0x4a>
 8007656:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 800765a:	f040 815b 	bne.w	8007914 <HAL_UART_IRQHandler+0x300>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800765e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007662:	d007      	beq.n	8007674 <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007664:	f010 0f80 	tst.w	r0, #128	; 0x80
 8007668:	f040 815b 	bne.w	8007922 <HAL_UART_IRQHandler+0x30e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800766c:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 8007670:	f040 8157 	bne.w	8007922 <HAL_UART_IRQHandler+0x30e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007674:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007678:	d003      	beq.n	8007682 <HAL_UART_IRQHandler+0x6e>
 800767a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800767e:	f040 8157 	bne.w	8007930 <HAL_UART_IRQHandler+0x31c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007682:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8007686:	d003      	beq.n	8007690 <HAL_UART_IRQHandler+0x7c>
 8007688:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800768c:	f040 8154 	bne.w	8007938 <HAL_UART_IRQHandler+0x324>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007690:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8007694:	d002      	beq.n	800769c <HAL_UART_IRQHandler+0x88>
 8007696:	2800      	cmp	r0, #0
 8007698:	f2c0 8152 	blt.w	8007940 <HAL_UART_IRQHandler+0x32c>
}
 800769c:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 800769e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d0fb      	beq.n	800769c <HAL_UART_IRQHandler+0x88>
        huart->RxISR(huart);
 80076a4:	4620      	mov	r0, r4
 80076a6:	4798      	blx	r3
      return;
 80076a8:	e7f8      	b.n	800769c <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80076aa:	f013 0f01 	tst.w	r3, #1
 80076ae:	d009      	beq.n	80076c4 <HAL_UART_IRQHandler+0xb0>
 80076b0:	f410 7f80 	tst.w	r0, #256	; 0x100
 80076b4:	d006      	beq.n	80076c4 <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80076b6:	2601      	movs	r6, #1
 80076b8:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076ba:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80076be:	4331      	orrs	r1, r6
 80076c0:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80076c4:	f013 0f02 	tst.w	r3, #2
 80076c8:	d00b      	beq.n	80076e2 <HAL_UART_IRQHandler+0xce>
 80076ca:	f015 0f01 	tst.w	r5, #1
 80076ce:	d008      	beq.n	80076e2 <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80076d0:	6821      	ldr	r1, [r4, #0]
 80076d2:	2602      	movs	r6, #2
 80076d4:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80076d6:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80076da:	f041 0104 	orr.w	r1, r1, #4
 80076de:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80076e2:	f013 0f04 	tst.w	r3, #4
 80076e6:	d00b      	beq.n	8007700 <HAL_UART_IRQHandler+0xec>
 80076e8:	f015 0f01 	tst.w	r5, #1
 80076ec:	d008      	beq.n	8007700 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80076ee:	6821      	ldr	r1, [r4, #0]
 80076f0:	2604      	movs	r6, #4
 80076f2:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80076f4:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80076f8:	f041 0102 	orr.w	r1, r1, #2
 80076fc:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007700:	f013 0f08 	tst.w	r3, #8
 8007704:	d00b      	beq.n	800771e <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007706:	f010 0f20 	tst.w	r0, #32
 800770a:	d100      	bne.n	800770e <HAL_UART_IRQHandler+0xfa>
 800770c:	b13a      	cbz	r2, 800771e <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800770e:	6822      	ldr	r2, [r4, #0]
 8007710:	2108      	movs	r1, #8
 8007712:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007714:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8007718:	430a      	orrs	r2, r1
 800771a:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800771e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8007722:	d00c      	beq.n	800773e <HAL_UART_IRQHandler+0x12a>
 8007724:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8007728:	d009      	beq.n	800773e <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800772a:	6822      	ldr	r2, [r4, #0]
 800772c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007730:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007732:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8007736:	f042 0220 	orr.w	r2, r2, #32
 800773a:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800773e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8007742:	2a00      	cmp	r2, #0
 8007744:	d0aa      	beq.n	800769c <HAL_UART_IRQHandler+0x88>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007746:	f013 0f20 	tst.w	r3, #32
 800774a:	d009      	beq.n	8007760 <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800774c:	f010 0f20 	tst.w	r0, #32
 8007750:	d102      	bne.n	8007758 <HAL_UART_IRQHandler+0x144>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007752:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8007756:	d003      	beq.n	8007760 <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 8007758:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800775a:	b10b      	cbz	r3, 8007760 <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 800775c:	4620      	mov	r0, r4
 800775e:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8007760:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007764:	6823      	ldr	r3, [r4, #0]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	f013 0f40 	tst.w	r3, #64	; 0x40
 800776c:	d102      	bne.n	8007774 <HAL_UART_IRQHandler+0x160>
 800776e:	f012 0f28 	tst.w	r2, #40	; 0x28
 8007772:	d029      	beq.n	80077c8 <HAL_UART_IRQHandler+0x1b4>
        UART_EndRxTransfer(huart);
 8007774:	4620      	mov	r0, r4
 8007776:	f7ff fe4e 	bl	8007416 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800777a:	6823      	ldr	r3, [r4, #0]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007782:	d01d      	beq.n	80077c0 <HAL_UART_IRQHandler+0x1ac>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007784:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007786:	f102 0308 	add.w	r3, r2, #8
 800778a:	e853 3f00 	ldrex	r3, [r3]
 800778e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007792:	3208      	adds	r2, #8
 8007794:	e842 3100 	strex	r1, r3, [r2]
 8007798:	2900      	cmp	r1, #0
 800779a:	d1f3      	bne.n	8007784 <HAL_UART_IRQHandler+0x170>
          if (huart->hdmarx != NULL)
 800779c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800779e:	b15b      	cbz	r3, 80077b8 <HAL_UART_IRQHandler+0x1a4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80077a0:	4a3e      	ldr	r2, [pc, #248]	; (800789c <HAL_UART_IRQHandler+0x288>)
 80077a2:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80077a4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80077a6:	f7fd f957 	bl	8004a58 <HAL_DMA_Abort_IT>
 80077aa:	2800      	cmp	r0, #0
 80077ac:	f43f af76 	beq.w	800769c <HAL_UART_IRQHandler+0x88>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80077b0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80077b2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80077b4:	4798      	blx	r3
 80077b6:	e771      	b.n	800769c <HAL_UART_IRQHandler+0x88>
            HAL_UART_ErrorCallback(huart);
 80077b8:	4620      	mov	r0, r4
 80077ba:	f7ff fef3 	bl	80075a4 <HAL_UART_ErrorCallback>
 80077be:	e76d      	b.n	800769c <HAL_UART_IRQHandler+0x88>
          HAL_UART_ErrorCallback(huart);
 80077c0:	4620      	mov	r0, r4
 80077c2:	f7ff feef 	bl	80075a4 <HAL_UART_ErrorCallback>
 80077c6:	e769      	b.n	800769c <HAL_UART_IRQHandler+0x88>
        HAL_UART_ErrorCallback(huart);
 80077c8:	4620      	mov	r0, r4
 80077ca:	f7ff feeb 	bl	80075a4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077ce:	2300      	movs	r3, #0
 80077d0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    return;
 80077d4:	e762      	b.n	800769c <HAL_UART_IRQHandler+0x88>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80077d6:	f013 0f10 	tst.w	r3, #16
 80077da:	f43f af39 	beq.w	8007650 <HAL_UART_IRQHandler+0x3c>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80077de:	f010 0f10 	tst.w	r0, #16
 80077e2:	f43f af35 	beq.w	8007650 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077e6:	2310      	movs	r3, #16
 80077e8:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077ea:	6823      	ldr	r3, [r4, #0]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	f013 0f40 	tst.w	r3, #64	; 0x40
 80077f2:	d055      	beq.n	80078a0 <HAL_UART_IRQHandler+0x28c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80077f4:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80077f6:	6813      	ldr	r3, [r2, #0]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f43f af4d 	beq.w	800769c <HAL_UART_IRQHandler+0x88>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007802:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8007806:	4299      	cmp	r1, r3
 8007808:	f67f af48 	bls.w	800769c <HAL_UART_IRQHandler+0x88>
        huart->RxXferCount = nb_remaining_rx_data;
 800780c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007810:	6813      	ldr	r3, [r2, #0]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f013 0f20 	tst.w	r3, #32
 8007818:	d131      	bne.n	800787e <HAL_UART_IRQHandler+0x26a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800781a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781c:	e852 3f00 	ldrex	r3, [r2]
 8007820:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007824:	e842 3100 	strex	r1, r3, [r2]
 8007828:	2900      	cmp	r1, #0
 800782a:	d1f6      	bne.n	800781a <HAL_UART_IRQHandler+0x206>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800782c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800782e:	f102 0308 	add.w	r3, r2, #8
 8007832:	e853 3f00 	ldrex	r3, [r3]
 8007836:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783a:	3208      	adds	r2, #8
 800783c:	e842 3100 	strex	r1, r3, [r2]
 8007840:	2900      	cmp	r1, #0
 8007842:	d1f3      	bne.n	800782c <HAL_UART_IRQHandler+0x218>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007844:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007846:	f102 0308 	add.w	r3, r2, #8
 800784a:	e853 3f00 	ldrex	r3, [r3]
 800784e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007852:	3208      	adds	r2, #8
 8007854:	e842 3100 	strex	r1, r3, [r2]
 8007858:	2900      	cmp	r1, #0
 800785a:	d1f3      	bne.n	8007844 <HAL_UART_IRQHandler+0x230>
          huart->RxState = HAL_UART_STATE_READY;
 800785c:	2320      	movs	r3, #32
 800785e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007862:	2300      	movs	r3, #0
 8007864:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007866:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007868:	e852 3f00 	ldrex	r3, [r2]
 800786c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007870:	e842 3100 	strex	r1, r3, [r2]
 8007874:	2900      	cmp	r1, #0
 8007876:	d1f6      	bne.n	8007866 <HAL_UART_IRQHandler+0x252>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007878:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800787a:	f7fd f8b3 	bl	80049e4 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800787e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8007882:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007886:	b29b      	uxth	r3, r3
 8007888:	1ac9      	subs	r1, r1, r3
 800788a:	b289      	uxth	r1, r1
 800788c:	4620      	mov	r0, r4
 800788e:	f7ff fec0 	bl	8007612 <HAL_UARTEx_RxEventCallback>
      return;
 8007892:	e703      	b.n	800769c <HAL_UART_IRQHandler+0x88>
 8007894:	10000001 	.word	0x10000001
 8007898:	04000120 	.word	0x04000120
 800789c:	080075ff 	.word	0x080075ff
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80078a0:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80078a4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	1ac9      	subs	r1, r1, r3
 80078ac:	b289      	uxth	r1, r1
      if (  (huart->RxXferCount > 0U)
 80078ae:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	f43f aef1 	beq.w	800769c <HAL_UART_IRQHandler+0x88>
          &&(nb_rx_data > 0U) )
 80078ba:	2900      	cmp	r1, #0
 80078bc:	f43f aeee 	beq.w	800769c <HAL_UART_IRQHandler+0x88>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80078c0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c2:	e852 3f00 	ldrex	r3, [r2]
 80078c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ca:	e842 3000 	strex	r0, r3, [r2]
 80078ce:	2800      	cmp	r0, #0
 80078d0:	d1f6      	bne.n	80078c0 <HAL_UART_IRQHandler+0x2ac>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80078d2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d4:	f102 0308 	add.w	r3, r2, #8
 80078d8:	e853 3f00 	ldrex	r3, [r3]
 80078dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078e0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e4:	3208      	adds	r2, #8
 80078e6:	e842 3000 	strex	r0, r3, [r2]
 80078ea:	2800      	cmp	r0, #0
 80078ec:	d1f1      	bne.n	80078d2 <HAL_UART_IRQHandler+0x2be>
        huart->RxState = HAL_UART_STATE_READY;
 80078ee:	2320      	movs	r3, #32
 80078f0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078f4:	2300      	movs	r3, #0
 80078f6:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 80078f8:	6723      	str	r3, [r4, #112]	; 0x70
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078fa:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078fc:	e852 3f00 	ldrex	r3, [r2]
 8007900:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007904:	e842 3000 	strex	r0, r3, [r2]
 8007908:	2800      	cmp	r0, #0
 800790a:	d1f6      	bne.n	80078fa <HAL_UART_IRQHandler+0x2e6>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800790c:	4620      	mov	r0, r4
 800790e:	f7ff fe80 	bl	8007612 <HAL_UARTEx_RxEventCallback>
      return;
 8007912:	e6c3      	b.n	800769c <HAL_UART_IRQHandler+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007914:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007918:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800791a:	4620      	mov	r0, r4
 800791c:	f000 fe1c 	bl	8008558 <HAL_UARTEx_WakeupCallback>
    return;
 8007920:	e6bc      	b.n	800769c <HAL_UART_IRQHandler+0x88>
    if (huart->TxISR != NULL)
 8007922:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007924:	2b00      	cmp	r3, #0
 8007926:	f43f aeb9 	beq.w	800769c <HAL_UART_IRQHandler+0x88>
      huart->TxISR(huart);
 800792a:	4620      	mov	r0, r4
 800792c:	4798      	blx	r3
    return;
 800792e:	e6b5      	b.n	800769c <HAL_UART_IRQHandler+0x88>
    UART_EndTransmit_IT(huart);
 8007930:	4620      	mov	r0, r4
 8007932:	f7ff fe1f 	bl	8007574 <UART_EndTransmit_IT>
    return;
 8007936:	e6b1      	b.n	800769c <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007938:	4620      	mov	r0, r4
 800793a:	f000 fe0f 	bl	800855c <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 800793e:	e6ad      	b.n	800769c <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007940:	4620      	mov	r0, r4
 8007942:	f000 fe0a 	bl	800855a <HAL_UARTEx_RxFifoFullCallback>
    return;
 8007946:	e6a9      	b.n	800769c <HAL_UART_IRQHandler+0x88>

08007948 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007948:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 800794a:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800794e:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8007952:	2a22      	cmp	r2, #34	; 0x22
 8007954:	d005      	beq.n	8007962 <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007956:	6802      	ldr	r2, [r0, #0]
 8007958:	6993      	ldr	r3, [r2, #24]
 800795a:	f043 0308 	orr.w	r3, r3, #8
 800795e:	6193      	str	r3, [r2, #24]
  }
}
 8007960:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007962:	6802      	ldr	r2, [r0, #0]
 8007964:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007966:	b2db      	uxtb	r3, r3
 8007968:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800796a:	400b      	ands	r3, r1
 800796c:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 800796e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8007970:	3301      	adds	r3, #1
 8007972:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8007974:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8007978:	b29b      	uxth	r3, r3
 800797a:	3b01      	subs	r3, #1
 800797c:	b29b      	uxth	r3, r3
 800797e:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8007982:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8007986:	b29b      	uxth	r3, r3
 8007988:	2b00      	cmp	r3, #0
 800798a:	d1e9      	bne.n	8007960 <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800798c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798e:	e852 3f00 	ldrex	r3, [r2]
 8007992:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007996:	e842 3100 	strex	r1, r3, [r2]
 800799a:	2900      	cmp	r1, #0
 800799c:	d1f6      	bne.n	800798c <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800799e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a0:	f102 0308 	add.w	r3, r2, #8
 80079a4:	e853 3f00 	ldrex	r3, [r3]
 80079a8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ac:	3208      	adds	r2, #8
 80079ae:	e842 3100 	strex	r1, r3, [r2]
 80079b2:	2900      	cmp	r1, #0
 80079b4:	d1f3      	bne.n	800799e <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 80079b6:	2320      	movs	r3, #32
 80079b8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 80079bc:	2300      	movs	r3, #0
 80079be:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079c0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d116      	bne.n	80079f4 <UART_RxISR_8BIT+0xac>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079c6:	2300      	movs	r3, #0
 80079c8:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079ca:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079cc:	e852 3f00 	ldrex	r3, [r2]
 80079d0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d4:	e842 3100 	strex	r1, r3, [r2]
 80079d8:	2900      	cmp	r1, #0
 80079da:	d1f6      	bne.n	80079ca <UART_RxISR_8BIT+0x82>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80079dc:	6803      	ldr	r3, [r0, #0]
 80079de:	69da      	ldr	r2, [r3, #28]
 80079e0:	f012 0f10 	tst.w	r2, #16
 80079e4:	d001      	beq.n	80079ea <UART_RxISR_8BIT+0xa2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079e6:	2210      	movs	r2, #16
 80079e8:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079ea:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 80079ee:	f7ff fe10 	bl	8007612 <HAL_UARTEx_RxEventCallback>
 80079f2:	e7b5      	b.n	8007960 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 80079f4:	f7fa fc66 	bl	80022c4 <HAL_UART_RxCpltCallback>
 80079f8:	e7b2      	b.n	8007960 <UART_RxISR_8BIT+0x18>

080079fa <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80079fa:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80079fc:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a00:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8007a04:	2b22      	cmp	r3, #34	; 0x22
 8007a06:	d005      	beq.n	8007a14 <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a08:	6802      	ldr	r2, [r0, #0]
 8007a0a:	6993      	ldr	r3, [r2, #24]
 8007a0c:	f043 0308 	orr.w	r3, r3, #8
 8007a10:	6193      	str	r3, [r2, #24]
  }
}
 8007a12:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a14:	6803      	ldr	r3, [r0, #0]
 8007a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007a18:	6d81      	ldr	r1, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 8007a1a:	4013      	ands	r3, r2
 8007a1c:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 8007a1e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8007a20:	3302      	adds	r3, #2
 8007a22:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8007a24:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	3b01      	subs	r3, #1
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8007a32:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d1ea      	bne.n	8007a12 <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a3c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a3e:	e852 3f00 	ldrex	r3, [r2]
 8007a42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a46:	e842 3100 	strex	r1, r3, [r2]
 8007a4a:	2900      	cmp	r1, #0
 8007a4c:	d1f6      	bne.n	8007a3c <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a4e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a50:	f102 0308 	add.w	r3, r2, #8
 8007a54:	e853 3f00 	ldrex	r3, [r3]
 8007a58:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a5c:	3208      	adds	r2, #8
 8007a5e:	e842 3100 	strex	r1, r3, [r2]
 8007a62:	2900      	cmp	r1, #0
 8007a64:	d1f3      	bne.n	8007a4e <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 8007a66:	2320      	movs	r3, #32
 8007a68:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a70:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d116      	bne.n	8007aa4 <UART_RxISR_16BIT+0xaa>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a76:	2300      	movs	r3, #0
 8007a78:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a7a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7c:	e852 3f00 	ldrex	r3, [r2]
 8007a80:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a84:	e842 3100 	strex	r1, r3, [r2]
 8007a88:	2900      	cmp	r1, #0
 8007a8a:	d1f6      	bne.n	8007a7a <UART_RxISR_16BIT+0x80>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a8c:	6803      	ldr	r3, [r0, #0]
 8007a8e:	69da      	ldr	r2, [r3, #28]
 8007a90:	f012 0f10 	tst.w	r2, #16
 8007a94:	d001      	beq.n	8007a9a <UART_RxISR_16BIT+0xa0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a96:	2210      	movs	r2, #16
 8007a98:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a9a:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8007a9e:	f7ff fdb8 	bl	8007612 <HAL_UARTEx_RxEventCallback>
 8007aa2:	e7b6      	b.n	8007a12 <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8007aa4:	f7fa fc0e 	bl	80022c4 <HAL_UART_RxCpltCallback>
 8007aa8:	e7b3      	b.n	8007a12 <UART_RxISR_16BIT+0x18>
	...

08007aac <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007aac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 8007ab0:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007ab4:	6803      	ldr	r3, [r0, #0]
 8007ab6:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007ab8:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007abc:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ac0:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8007ac4:	2a22      	cmp	r2, #34	; 0x22
 8007ac6:	d005      	beq.n	8007ad4 <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ac8:	699a      	ldr	r2, [r3, #24]
 8007aca:	f042 0208 	orr.w	r2, r2, #8
 8007ace:	619a      	str	r2, [r3, #24]
  }
}
 8007ad0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ad4:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 8007ad6:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007ada:	e008      	b.n	8007aee <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007adc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d14c      	bne.n	8007b7e <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 8007ae4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d04e      	beq.n	8007b8c <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007aee:	2f00      	cmp	r7, #0
 8007af0:	f000 8087 	beq.w	8007c02 <UART_RxISR_8BIT_FIFOEN+0x156>
 8007af4:	f015 0f20 	tst.w	r5, #32
 8007af8:	f000 8083 	beq.w	8007c02 <UART_RxISR_8BIT_FIFOEN+0x156>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007afc:	6823      	ldr	r3, [r4, #0]
 8007afe:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007b00:	b2f3      	uxtb	r3, r6
 8007b02:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8007b04:	400b      	ands	r3, r1
 8007b06:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8007b08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8007b0e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	3b01      	subs	r3, #1
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007b1c:	6823      	ldr	r3, [r4, #0]
 8007b1e:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007b20:	f015 0f07 	tst.w	r5, #7
 8007b24:	d0de      	beq.n	8007ae4 <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007b26:	f015 0f01 	tst.w	r5, #1
 8007b2a:	d009      	beq.n	8007b40 <UART_RxISR_8BIT_FIFOEN+0x94>
 8007b2c:	f419 7f80 	tst.w	r9, #256	; 0x100
 8007b30:	d006      	beq.n	8007b40 <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007b32:	2201      	movs	r2, #1
 8007b34:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b36:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b40:	f015 0f02 	tst.w	r5, #2
 8007b44:	d00b      	beq.n	8007b5e <UART_RxISR_8BIT_FIFOEN+0xb2>
 8007b46:	f018 0f01 	tst.w	r8, #1
 8007b4a:	d008      	beq.n	8007b5e <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007b4c:	6823      	ldr	r3, [r4, #0]
 8007b4e:	2202      	movs	r2, #2
 8007b50:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b52:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007b56:	f043 0304 	orr.w	r3, r3, #4
 8007b5a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b5e:	f015 0f04 	tst.w	r5, #4
 8007b62:	d0bb      	beq.n	8007adc <UART_RxISR_8BIT_FIFOEN+0x30>
 8007b64:	f018 0f01 	tst.w	r8, #1
 8007b68:	d0b8      	beq.n	8007adc <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007b6a:	6823      	ldr	r3, [r4, #0]
 8007b6c:	2204      	movs	r2, #4
 8007b6e:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b70:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007b74:	f043 0302 	orr.w	r3, r3, #2
 8007b78:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8007b7c:	e7ae      	b.n	8007adc <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8007b7e:	4620      	mov	r0, r4
 8007b80:	f7ff fd10 	bl	80075a4 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b84:	2300      	movs	r3, #0
 8007b86:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8007b8a:	e7ab      	b.n	8007ae4 <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b8c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b8e:	e852 3f00 	ldrex	r3, [r2]
 8007b92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b96:	e842 3100 	strex	r1, r3, [r2]
 8007b9a:	2900      	cmp	r1, #0
 8007b9c:	d1f6      	bne.n	8007b8c <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b9e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba0:	f102 0308 	add.w	r3, r2, #8
 8007ba4:	e853 3f00 	ldrex	r3, [r3]
 8007ba8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007bac:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb0:	3208      	adds	r2, #8
 8007bb2:	e842 3100 	strex	r1, r3, [r2]
 8007bb6:	2900      	cmp	r1, #0
 8007bb8:	d1f1      	bne.n	8007b9e <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 8007bba:	2320      	movs	r3, #32
 8007bbc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bc4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d003      	beq.n	8007bd2 <UART_RxISR_8BIT_FIFOEN+0x126>
          HAL_UART_RxCpltCallback(huart);
 8007bca:	4620      	mov	r0, r4
 8007bcc:	f7fa fb7a 	bl	80022c4 <HAL_UART_RxCpltCallback>
 8007bd0:	e78d      	b.n	8007aee <UART_RxISR_8BIT_FIFOEN+0x42>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bd6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd8:	e852 3f00 	ldrex	r3, [r2]
 8007bdc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be0:	e842 3100 	strex	r1, r3, [r2]
 8007be4:	2900      	cmp	r1, #0
 8007be6:	d1f6      	bne.n	8007bd6 <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007be8:	6823      	ldr	r3, [r4, #0]
 8007bea:	69da      	ldr	r2, [r3, #28]
 8007bec:	f012 0f10 	tst.w	r2, #16
 8007bf0:	d001      	beq.n	8007bf6 <UART_RxISR_8BIT_FIFOEN+0x14a>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007bf2:	2210      	movs	r2, #16
 8007bf4:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007bf6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8007bfa:	4620      	mov	r0, r4
 8007bfc:	f7ff fd09 	bl	8007612 <HAL_UARTEx_RxEventCallback>
 8007c00:	e775      	b.n	8007aee <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8007c02:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007c06:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	f43f af61 	beq.w	8007ad0 <UART_RxISR_8BIT_FIFOEN+0x24>
 8007c0e:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8007c12:	429a      	cmp	r2, r3
 8007c14:	f67f af5c 	bls.w	8007ad0 <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007c18:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c1a:	f102 0308 	add.w	r3, r2, #8
 8007c1e:	e853 3f00 	ldrex	r3, [r3]
 8007c22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c26:	3208      	adds	r2, #8
 8007c28:	e842 3100 	strex	r1, r3, [r2]
 8007c2c:	2900      	cmp	r1, #0
 8007c2e:	d1f3      	bne.n	8007c18 <UART_RxISR_8BIT_FIFOEN+0x16c>
      huart->RxISR = UART_RxISR_8BIT;
 8007c30:	4b05      	ldr	r3, [pc, #20]	; (8007c48 <UART_RxISR_8BIT_FIFOEN+0x19c>)
 8007c32:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007c34:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c36:	e852 3f00 	ldrex	r3, [r2]
 8007c3a:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c3e:	e842 3100 	strex	r1, r3, [r2]
 8007c42:	2900      	cmp	r1, #0
 8007c44:	d1f6      	bne.n	8007c34 <UART_RxISR_8BIT_FIFOEN+0x188>
 8007c46:	e743      	b.n	8007ad0 <UART_RxISR_8BIT_FIFOEN+0x24>
 8007c48:	08007949 	.word	0x08007949

08007c4c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007c50:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007c54:	6803      	ldr	r3, [r0, #0]
 8007c56:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007c58:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007c5c:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c60:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8007c64:	2a22      	cmp	r2, #34	; 0x22
 8007c66:	d005      	beq.n	8007c74 <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007c68:	699a      	ldr	r2, [r3, #24]
 8007c6a:	f042 0208 	orr.w	r2, r2, #8
 8007c6e:	619a      	str	r2, [r3, #24]
  }
}
 8007c70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c74:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 8007c76:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007c7a:	e008      	b.n	8007c8e <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c7c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d14b      	bne.n	8007d1c <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 8007c84:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d04d      	beq.n	8007d2a <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007c8e:	2f00      	cmp	r7, #0
 8007c90:	f000 8086 	beq.w	8007da0 <UART_RxISR_16BIT_FIFOEN+0x154>
 8007c94:	f015 0f20 	tst.w	r5, #32
 8007c98:	f000 8082 	beq.w	8007da0 <UART_RxISR_16BIT_FIFOEN+0x154>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007c9c:	6823      	ldr	r3, [r4, #0]
 8007c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007ca0:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 8007ca2:	4033      	ands	r3, r6
 8007ca4:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8007ca6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ca8:	3302      	adds	r3, #2
 8007caa:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8007cac:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	3b01      	subs	r3, #1
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007cba:	6823      	ldr	r3, [r4, #0]
 8007cbc:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007cbe:	f015 0f07 	tst.w	r5, #7
 8007cc2:	d0df      	beq.n	8007c84 <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007cc4:	f015 0f01 	tst.w	r5, #1
 8007cc8:	d009      	beq.n	8007cde <UART_RxISR_16BIT_FIFOEN+0x92>
 8007cca:	f419 7f80 	tst.w	r9, #256	; 0x100
 8007cce:	d006      	beq.n	8007cde <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007cd4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007cde:	f015 0f02 	tst.w	r5, #2
 8007ce2:	d00b      	beq.n	8007cfc <UART_RxISR_16BIT_FIFOEN+0xb0>
 8007ce4:	f018 0f01 	tst.w	r8, #1
 8007ce8:	d008      	beq.n	8007cfc <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007cea:	6823      	ldr	r3, [r4, #0]
 8007cec:	2202      	movs	r2, #2
 8007cee:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007cf0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007cf4:	f043 0304 	orr.w	r3, r3, #4
 8007cf8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007cfc:	f015 0f04 	tst.w	r5, #4
 8007d00:	d0bc      	beq.n	8007c7c <UART_RxISR_16BIT_FIFOEN+0x30>
 8007d02:	f018 0f01 	tst.w	r8, #1
 8007d06:	d0b9      	beq.n	8007c7c <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007d08:	6823      	ldr	r3, [r4, #0]
 8007d0a:	2204      	movs	r2, #4
 8007d0c:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d0e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007d12:	f043 0302 	orr.w	r3, r3, #2
 8007d16:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8007d1a:	e7af      	b.n	8007c7c <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8007d1c:	4620      	mov	r0, r4
 8007d1e:	f7ff fc41 	bl	80075a4 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d22:	2300      	movs	r3, #0
 8007d24:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8007d28:	e7ac      	b.n	8007c84 <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d2a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2c:	e852 3f00 	ldrex	r3, [r2]
 8007d30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d34:	e842 3100 	strex	r1, r3, [r2]
 8007d38:	2900      	cmp	r1, #0
 8007d3a:	d1f6      	bne.n	8007d2a <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d3c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3e:	f102 0308 	add.w	r3, r2, #8
 8007d42:	e853 3f00 	ldrex	r3, [r3]
 8007d46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d4a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4e:	3208      	adds	r2, #8
 8007d50:	e842 3100 	strex	r1, r3, [r2]
 8007d54:	2900      	cmp	r1, #0
 8007d56:	d1f1      	bne.n	8007d3c <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 8007d58:	2320      	movs	r3, #32
 8007d5a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d62:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d003      	beq.n	8007d70 <UART_RxISR_16BIT_FIFOEN+0x124>
          HAL_UART_RxCpltCallback(huart);
 8007d68:	4620      	mov	r0, r4
 8007d6a:	f7fa faab 	bl	80022c4 <HAL_UART_RxCpltCallback>
 8007d6e:	e78e      	b.n	8007c8e <UART_RxISR_16BIT_FIFOEN+0x42>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d70:	2300      	movs	r3, #0
 8007d72:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d74:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d76:	e852 3f00 	ldrex	r3, [r2]
 8007d7a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d7e:	e842 3100 	strex	r1, r3, [r2]
 8007d82:	2900      	cmp	r1, #0
 8007d84:	d1f6      	bne.n	8007d74 <UART_RxISR_16BIT_FIFOEN+0x128>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007d86:	6823      	ldr	r3, [r4, #0]
 8007d88:	69da      	ldr	r2, [r3, #28]
 8007d8a:	f012 0f10 	tst.w	r2, #16
 8007d8e:	d001      	beq.n	8007d94 <UART_RxISR_16BIT_FIFOEN+0x148>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d90:	2210      	movs	r2, #16
 8007d92:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d94:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8007d98:	4620      	mov	r0, r4
 8007d9a:	f7ff fc3a 	bl	8007612 <HAL_UARTEx_RxEventCallback>
 8007d9e:	e776      	b.n	8007c8e <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8007da0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007da4:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	f43f af62 	beq.w	8007c70 <UART_RxISR_16BIT_FIFOEN+0x24>
 8007dac:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8007db0:	429a      	cmp	r2, r3
 8007db2:	f67f af5d 	bls.w	8007c70 <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007db6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db8:	f102 0308 	add.w	r3, r2, #8
 8007dbc:	e853 3f00 	ldrex	r3, [r3]
 8007dc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc4:	3208      	adds	r2, #8
 8007dc6:	e842 3100 	strex	r1, r3, [r2]
 8007dca:	2900      	cmp	r1, #0
 8007dcc:	d1f3      	bne.n	8007db6 <UART_RxISR_16BIT_FIFOEN+0x16a>
      huart->RxISR = UART_RxISR_16BIT;
 8007dce:	4b06      	ldr	r3, [pc, #24]	; (8007de8 <UART_RxISR_16BIT_FIFOEN+0x19c>)
 8007dd0:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007dd2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd4:	e852 3f00 	ldrex	r3, [r2]
 8007dd8:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ddc:	e842 3100 	strex	r1, r3, [r2]
 8007de0:	2900      	cmp	r1, #0
 8007de2:	d1f6      	bne.n	8007dd2 <UART_RxISR_16BIT_FIFOEN+0x186>
 8007de4:	e744      	b.n	8007c70 <UART_RxISR_16BIT_FIFOEN+0x24>
 8007de6:	bf00      	nop
 8007de8:	080079fb 	.word	0x080079fb

08007dec <UART_SetConfig>:
{
 8007dec:	b570      	push	{r4, r5, r6, lr}
 8007dee:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8007df0:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007df2:	6883      	ldr	r3, [r0, #8]
 8007df4:	6902      	ldr	r2, [r0, #16]
 8007df6:	4313      	orrs	r3, r2
 8007df8:	6942      	ldr	r2, [r0, #20]
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	69c2      	ldr	r2, [r0, #28]
 8007dfe:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e00:	6808      	ldr	r0, [r1, #0]
 8007e02:	4a9d      	ldr	r2, [pc, #628]	; (8008078 <UART_SetConfig+0x28c>)
 8007e04:	4002      	ands	r2, r0
 8007e06:	4313      	orrs	r3, r2
 8007e08:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e0a:	6822      	ldr	r2, [r4, #0]
 8007e0c:	6853      	ldr	r3, [r2, #4]
 8007e0e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007e12:	68e1      	ldr	r1, [r4, #12]
 8007e14:	430b      	orrs	r3, r1
 8007e16:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e18:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007e1a:	6822      	ldr	r2, [r4, #0]
 8007e1c:	4b97      	ldr	r3, [pc, #604]	; (800807c <UART_SetConfig+0x290>)
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d001      	beq.n	8007e26 <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 8007e22:	6a23      	ldr	r3, [r4, #32]
 8007e24:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e26:	6893      	ldr	r3, [r2, #8]
 8007e28:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007e2c:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007e30:	430b      	orrs	r3, r1
 8007e32:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007e34:	6822      	ldr	r2, [r4, #0]
 8007e36:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007e38:	f023 030f 	bic.w	r3, r3, #15
 8007e3c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007e3e:	430b      	orrs	r3, r1
 8007e40:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e42:	6823      	ldr	r3, [r4, #0]
 8007e44:	4a8e      	ldr	r2, [pc, #568]	; (8008080 <UART_SetConfig+0x294>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d01c      	beq.n	8007e84 <UART_SetConfig+0x98>
 8007e4a:	4a8e      	ldr	r2, [pc, #568]	; (8008084 <UART_SetConfig+0x298>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d031      	beq.n	8007eb4 <UART_SetConfig+0xc8>
 8007e50:	4a8a      	ldr	r2, [pc, #552]	; (800807c <UART_SetConfig+0x290>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d04b      	beq.n	8007eee <UART_SetConfig+0x102>
 8007e56:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e58:	4988      	ldr	r1, [pc, #544]	; (800807c <UART_SetConfig+0x290>)
 8007e5a:	428b      	cmp	r3, r1
 8007e5c:	d068      	beq.n	8007f30 <UART_SetConfig+0x144>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e5e:	69e0      	ldr	r0, [r4, #28]
 8007e60:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8007e64:	f000 80a5 	beq.w	8007fb2 <UART_SetConfig+0x1c6>
    switch (clocksource)
 8007e68:	2a08      	cmp	r2, #8
 8007e6a:	f200 811f 	bhi.w	80080ac <UART_SetConfig+0x2c0>
 8007e6e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007e72:	00d3      	.short	0x00d3
 8007e74:	00d100f5 	.word	0x00d100f5
 8007e78:	00f8011d 	.word	0x00f8011d
 8007e7c:	011d011d 	.word	0x011d011d
 8007e80:	00fb011d 	.word	0x00fb011d
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8007e84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e88:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007e8c:	f002 0203 	and.w	r2, r2, #3
 8007e90:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e94:	f5a2 3240 	sub.w	r2, r2, #196608	; 0x30000
 8007e98:	2a03      	cmp	r2, #3
 8007e9a:	d809      	bhi.n	8007eb0 <UART_SetConfig+0xc4>
 8007e9c:	e8df f002 	tbb	[pc, r2]
 8007ea0:	063c0402 	.word	0x063c0402
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	e7d7      	b.n	8007e58 <UART_SetConfig+0x6c>
 8007ea8:	2204      	movs	r2, #4
 8007eaa:	e7d5      	b.n	8007e58 <UART_SetConfig+0x6c>
 8007eac:	2208      	movs	r2, #8
 8007eae:	e7d3      	b.n	8007e58 <UART_SetConfig+0x6c>
 8007eb0:	2210      	movs	r2, #16
 8007eb2:	e7d1      	b.n	8007e58 <UART_SetConfig+0x6c>
 8007eb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007eb8:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007ebc:	f002 020c 	and.w	r2, r2, #12
 8007ec0:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 8007ec4:	f5a2 2240 	sub.w	r2, r2, #786432	; 0xc0000
 8007ec8:	2a0c      	cmp	r2, #12
 8007eca:	d80e      	bhi.n	8007eea <UART_SetConfig+0xfe>
 8007ecc:	e8df f002 	tbb	[pc, r2]
 8007ed0:	0d0d0d07 	.word	0x0d0d0d07
 8007ed4:	0d0d0d09 	.word	0x0d0d0d09
 8007ed8:	0d0d0d26 	.word	0x0d0d0d26
 8007edc:	0b          	.byte	0x0b
 8007edd:	00          	.byte	0x00
 8007ede:	2200      	movs	r2, #0
 8007ee0:	e7ba      	b.n	8007e58 <UART_SetConfig+0x6c>
 8007ee2:	2204      	movs	r2, #4
 8007ee4:	e7b8      	b.n	8007e58 <UART_SetConfig+0x6c>
 8007ee6:	2208      	movs	r2, #8
 8007ee8:	e7b6      	b.n	8007e58 <UART_SetConfig+0x6c>
 8007eea:	2210      	movs	r2, #16
 8007eec:	e7b4      	b.n	8007e58 <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007eee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ef2:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007ef6:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8007efa:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8007efe:	d00f      	beq.n	8007f20 <UART_SetConfig+0x134>
 8007f00:	d805      	bhi.n	8007f0e <UART_SetConfig+0x122>
 8007f02:	b17a      	cbz	r2, 8007f24 <UART_SetConfig+0x138>
 8007f04:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8007f08:	d10e      	bne.n	8007f28 <UART_SetConfig+0x13c>
 8007f0a:	2204      	movs	r2, #4
 8007f0c:	e7a4      	b.n	8007e58 <UART_SetConfig+0x6c>
 8007f0e:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8007f12:	d10b      	bne.n	8007f2c <UART_SetConfig+0x140>
 8007f14:	2208      	movs	r2, #8
 8007f16:	e79f      	b.n	8007e58 <UART_SetConfig+0x6c>
 8007f18:	2202      	movs	r2, #2
 8007f1a:	e79d      	b.n	8007e58 <UART_SetConfig+0x6c>
 8007f1c:	2202      	movs	r2, #2
 8007f1e:	e79b      	b.n	8007e58 <UART_SetConfig+0x6c>
 8007f20:	2202      	movs	r2, #2
 8007f22:	e799      	b.n	8007e58 <UART_SetConfig+0x6c>
 8007f24:	2200      	movs	r2, #0
 8007f26:	e797      	b.n	8007e58 <UART_SetConfig+0x6c>
 8007f28:	2210      	movs	r2, #16
 8007f2a:	e795      	b.n	8007e58 <UART_SetConfig+0x6c>
 8007f2c:	2210      	movs	r2, #16
 8007f2e:	e793      	b.n	8007e58 <UART_SetConfig+0x6c>
    switch (clocksource)
 8007f30:	2a08      	cmp	r2, #8
 8007f32:	f200 809c 	bhi.w	800806e <UART_SetConfig+0x282>
 8007f36:	e8df f002 	tbb	[pc, r2]
 8007f3a:	9a08      	.short	0x9a08
 8007f3c:	9a379a3a 	.word	0x9a379a3a
 8007f40:	9a9a      	.short	0x9a9a
 8007f42:	05          	.byte	0x05
 8007f43:	00          	.byte	0x00
 8007f44:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007f48:	e004      	b.n	8007f54 <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f4a:	f7fe fb0f 	bl	800656c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007f4e:	2800      	cmp	r0, #0
 8007f50:	f000 808f 	beq.w	8008072 <UART_SetConfig+0x286>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007f54:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007f56:	4b4c      	ldr	r3, [pc, #304]	; (8008088 <UART_SetConfig+0x29c>)
 8007f58:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8007f5c:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f60:	6865      	ldr	r5, [r4, #4]
 8007f62:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8007f66:	4299      	cmp	r1, r3
 8007f68:	f200 8094 	bhi.w	8008094 <UART_SetConfig+0x2a8>
 8007f6c:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8007f70:	f200 8092 	bhi.w	8008098 <UART_SetConfig+0x2ac>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f74:	2600      	movs	r6, #0
 8007f76:	4633      	mov	r3, r6
 8007f78:	4631      	mov	r1, r6
 8007f7a:	f7f8 fe1d 	bl	8000bb8 <__aeabi_uldivmod>
 8007f7e:	0209      	lsls	r1, r1, #8
 8007f80:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8007f84:	0200      	lsls	r0, r0, #8
 8007f86:	086b      	lsrs	r3, r5, #1
 8007f88:	18c0      	adds	r0, r0, r3
 8007f8a:	462a      	mov	r2, r5
 8007f8c:	4633      	mov	r3, r6
 8007f8e:	f141 0100 	adc.w	r1, r1, #0
 8007f92:	f7f8 fe11 	bl	8000bb8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f96:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8007f9a:	4b3c      	ldr	r3, [pc, #240]	; (800808c <UART_SetConfig+0x2a0>)
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d87d      	bhi.n	800809c <UART_SetConfig+0x2b0>
          huart->Instance->BRR = usartdiv;
 8007fa0:	6823      	ldr	r3, [r4, #0]
 8007fa2:	60d8      	str	r0, [r3, #12]
 8007fa4:	4630      	mov	r0, r6
 8007fa6:	e050      	b.n	800804a <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetSysClockFreq();
 8007fa8:	f7fd fdd8 	bl	8005b5c <HAL_RCC_GetSysClockFreq>
        break;
 8007fac:	e7cf      	b.n	8007f4e <UART_SetConfig+0x162>
        pclk = (uint32_t) HSI_VALUE;
 8007fae:	4838      	ldr	r0, [pc, #224]	; (8008090 <UART_SetConfig+0x2a4>)
 8007fb0:	e7d0      	b.n	8007f54 <UART_SetConfig+0x168>
    switch (clocksource)
 8007fb2:	2a08      	cmp	r2, #8
 8007fb4:	d874      	bhi.n	80080a0 <UART_SetConfig+0x2b4>
 8007fb6:	e8df f002 	tbb	[pc, r2]
 8007fba:	2707      	.short	0x2707
 8007fbc:	732a7305 	.word	0x732a7305
 8007fc0:	7373      	.short	0x7373
 8007fc2:	0b          	.byte	0x0b
 8007fc3:	00          	.byte	0x00
 8007fc4:	4832      	ldr	r0, [pc, #200]	; (8008090 <UART_SetConfig+0x2a4>)
 8007fc6:	e003      	b.n	8007fd0 <UART_SetConfig+0x1e4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fc8:	f7fe fad0 	bl	800656c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007fcc:	2800      	cmp	r0, #0
 8007fce:	d069      	beq.n	80080a4 <UART_SetConfig+0x2b8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fd0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007fd2:	4b2d      	ldr	r3, [pc, #180]	; (8008088 <UART_SetConfig+0x29c>)
 8007fd4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007fd8:	fbb0 f0f3 	udiv	r0, r0, r3
 8007fdc:	6862      	ldr	r2, [r4, #4]
 8007fde:	0853      	lsrs	r3, r2, #1
 8007fe0:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8007fe4:	fbb0 f0f2 	udiv	r0, r0, r2
 8007fe8:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fea:	f1a0 0210 	sub.w	r2, r0, #16
 8007fee:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d858      	bhi.n	80080a8 <UART_SetConfig+0x2bc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ff6:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ffa:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8007ffe:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 8008000:	6823      	ldr	r3, [r4, #0]
 8008002:	60d8      	str	r0, [r3, #12]
 8008004:	2000      	movs	r0, #0
 8008006:	e020      	b.n	800804a <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8008008:	f7fe fac0 	bl	800658c <HAL_RCC_GetPCLK2Freq>
        break;
 800800c:	e7de      	b.n	8007fcc <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 800800e:	f7fd fda5 	bl	8005b5c <HAL_RCC_GetSysClockFreq>
        break;
 8008012:	e7db      	b.n	8007fcc <UART_SetConfig+0x1e0>
    switch (clocksource)
 8008014:	481e      	ldr	r0, [pc, #120]	; (8008090 <UART_SetConfig+0x2a4>)
 8008016:	e003      	b.n	8008020 <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008018:	f7fe faa8 	bl	800656c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800801c:	2800      	cmp	r0, #0
 800801e:	d047      	beq.n	80080b0 <UART_SetConfig+0x2c4>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008020:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008022:	4b19      	ldr	r3, [pc, #100]	; (8008088 <UART_SetConfig+0x29c>)
 8008024:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008028:	fbb0 f0f3 	udiv	r0, r0, r3
 800802c:	6863      	ldr	r3, [r4, #4]
 800802e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8008032:	fbb0 f0f3 	udiv	r0, r0, r3
 8008036:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008038:	f1a0 0210 	sub.w	r2, r0, #16
 800803c:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8008040:	429a      	cmp	r2, r3
 8008042:	d837      	bhi.n	80080b4 <UART_SetConfig+0x2c8>
        huart->Instance->BRR = usartdiv;
 8008044:	6823      	ldr	r3, [r4, #0]
 8008046:	60d8      	str	r0, [r3, #12]
 8008048:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 800804a:	2301      	movs	r3, #1
 800804c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008050:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8008054:	2300      	movs	r3, #0
 8008056:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 8008058:	6763      	str	r3, [r4, #116]	; 0x74
}
 800805a:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 800805c:	f7fe fa96 	bl	800658c <HAL_RCC_GetPCLK2Freq>
        break;
 8008060:	e7dc      	b.n	800801c <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetSysClockFreq();
 8008062:	f7fd fd7b 	bl	8005b5c <HAL_RCC_GetSysClockFreq>
        break;
 8008066:	e7d9      	b.n	800801c <UART_SetConfig+0x230>
        pclk = (uint32_t) LSE_VALUE;
 8008068:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800806c:	e7d8      	b.n	8008020 <UART_SetConfig+0x234>
    switch (clocksource)
 800806e:	2001      	movs	r0, #1
 8008070:	e7eb      	b.n	800804a <UART_SetConfig+0x25e>
 8008072:	2000      	movs	r0, #0
 8008074:	e7e9      	b.n	800804a <UART_SetConfig+0x25e>
 8008076:	bf00      	nop
 8008078:	cfff69f3 	.word	0xcfff69f3
 800807c:	40008000 	.word	0x40008000
 8008080:	40013800 	.word	0x40013800
 8008084:	40004400 	.word	0x40004400
 8008088:	0801452c 	.word	0x0801452c
 800808c:	000ffcff 	.word	0x000ffcff
 8008090:	00f42400 	.word	0x00f42400
        ret = HAL_ERROR;
 8008094:	2001      	movs	r0, #1
 8008096:	e7d8      	b.n	800804a <UART_SetConfig+0x25e>
 8008098:	2001      	movs	r0, #1
 800809a:	e7d6      	b.n	800804a <UART_SetConfig+0x25e>
          ret = HAL_ERROR;
 800809c:	2001      	movs	r0, #1
 800809e:	e7d4      	b.n	800804a <UART_SetConfig+0x25e>
    switch (clocksource)
 80080a0:	2001      	movs	r0, #1
 80080a2:	e7d2      	b.n	800804a <UART_SetConfig+0x25e>
 80080a4:	2000      	movs	r0, #0
 80080a6:	e7d0      	b.n	800804a <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 80080a8:	2001      	movs	r0, #1
 80080aa:	e7ce      	b.n	800804a <UART_SetConfig+0x25e>
    switch (clocksource)
 80080ac:	2001      	movs	r0, #1
 80080ae:	e7cc      	b.n	800804a <UART_SetConfig+0x25e>
 80080b0:	2000      	movs	r0, #0
 80080b2:	e7ca      	b.n	800804a <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 80080b4:	2001      	movs	r0, #1
 80080b6:	e7c8      	b.n	800804a <UART_SetConfig+0x25e>

080080b8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80080b8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80080ba:	f013 0f01 	tst.w	r3, #1
 80080be:	d006      	beq.n	80080ce <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80080c0:	6802      	ldr	r2, [r0, #0]
 80080c2:	6853      	ldr	r3, [r2, #4]
 80080c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80080c8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80080ca:	430b      	orrs	r3, r1
 80080cc:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80080ce:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80080d0:	f013 0f02 	tst.w	r3, #2
 80080d4:	d006      	beq.n	80080e4 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80080d6:	6802      	ldr	r2, [r0, #0]
 80080d8:	6853      	ldr	r3, [r2, #4]
 80080da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080de:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80080e0:	430b      	orrs	r3, r1
 80080e2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80080e4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80080e6:	f013 0f04 	tst.w	r3, #4
 80080ea:	d006      	beq.n	80080fa <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80080ec:	6802      	ldr	r2, [r0, #0]
 80080ee:	6853      	ldr	r3, [r2, #4]
 80080f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80080f4:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80080f6:	430b      	orrs	r3, r1
 80080f8:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80080fa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80080fc:	f013 0f08 	tst.w	r3, #8
 8008100:	d006      	beq.n	8008110 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008102:	6802      	ldr	r2, [r0, #0]
 8008104:	6853      	ldr	r3, [r2, #4]
 8008106:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800810a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800810c:	430b      	orrs	r3, r1
 800810e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008110:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008112:	f013 0f10 	tst.w	r3, #16
 8008116:	d006      	beq.n	8008126 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008118:	6802      	ldr	r2, [r0, #0]
 800811a:	6893      	ldr	r3, [r2, #8]
 800811c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008120:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8008122:	430b      	orrs	r3, r1
 8008124:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008126:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008128:	f013 0f20 	tst.w	r3, #32
 800812c:	d006      	beq.n	800813c <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800812e:	6802      	ldr	r2, [r0, #0]
 8008130:	6893      	ldr	r3, [r2, #8]
 8008132:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008136:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8008138:	430b      	orrs	r3, r1
 800813a:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800813c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800813e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008142:	d00a      	beq.n	800815a <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008144:	6802      	ldr	r2, [r0, #0]
 8008146:	6853      	ldr	r3, [r2, #4]
 8008148:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800814c:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800814e:	430b      	orrs	r3, r1
 8008150:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008152:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008154:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008158:	d00b      	beq.n	8008172 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800815a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800815c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008160:	d006      	beq.n	8008170 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008162:	6802      	ldr	r2, [r0, #0]
 8008164:	6853      	ldr	r3, [r2, #4]
 8008166:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800816a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800816c:	430b      	orrs	r3, r1
 800816e:	6053      	str	r3, [r2, #4]
}
 8008170:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008172:	6802      	ldr	r2, [r0, #0]
 8008174:	6853      	ldr	r3, [r2, #4]
 8008176:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800817a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800817c:	430b      	orrs	r3, r1
 800817e:	6053      	str	r3, [r2, #4]
 8008180:	e7eb      	b.n	800815a <UART_AdvFeatureConfig+0xa2>

08008182 <UART_WaitOnFlagUntilTimeout>:
{
 8008182:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008186:	4605      	mov	r5, r0
 8008188:	460f      	mov	r7, r1
 800818a:	4616      	mov	r6, r2
 800818c:	4699      	mov	r9, r3
 800818e:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008192:	682c      	ldr	r4, [r5, #0]
 8008194:	69e4      	ldr	r4, [r4, #28]
 8008196:	ea37 0304 	bics.w	r3, r7, r4
 800819a:	bf0c      	ite	eq
 800819c:	f04f 0c01 	moveq.w	ip, #1
 80081a0:	f04f 0c00 	movne.w	ip, #0
 80081a4:	45b4      	cmp	ip, r6
 80081a6:	d157      	bne.n	8008258 <UART_WaitOnFlagUntilTimeout+0xd6>
    if (Timeout != HAL_MAX_DELAY)
 80081a8:	f1b8 3fff 	cmp.w	r8, #4294967295
 80081ac:	d0f1      	beq.n	8008192 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081ae:	f7f9 fc17 	bl	80019e0 <HAL_GetTick>
 80081b2:	eba0 0009 	sub.w	r0, r0, r9
 80081b6:	4540      	cmp	r0, r8
 80081b8:	d82f      	bhi.n	800821a <UART_WaitOnFlagUntilTimeout+0x98>
 80081ba:	f1b8 0f00 	cmp.w	r8, #0
 80081be:	d02c      	beq.n	800821a <UART_WaitOnFlagUntilTimeout+0x98>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80081c0:	682b      	ldr	r3, [r5, #0]
 80081c2:	681a      	ldr	r2, [r3, #0]
 80081c4:	f012 0f04 	tst.w	r2, #4
 80081c8:	d0e3      	beq.n	8008192 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80081ca:	69da      	ldr	r2, [r3, #28]
 80081cc:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80081d0:	d0df      	beq.n	8008192 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80081d6:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80081d8:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081da:	e852 3f00 	ldrex	r3, [r2]
 80081de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e2:	e842 3100 	strex	r1, r3, [r2]
 80081e6:	2900      	cmp	r1, #0
 80081e8:	d1f6      	bne.n	80081d8 <UART_WaitOnFlagUntilTimeout+0x56>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081ea:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ec:	f102 0308 	add.w	r3, r2, #8
 80081f0:	e853 3f00 	ldrex	r3, [r3]
 80081f4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f8:	3208      	adds	r2, #8
 80081fa:	e842 3100 	strex	r1, r3, [r2]
 80081fe:	2900      	cmp	r1, #0
 8008200:	d1f3      	bne.n	80081ea <UART_WaitOnFlagUntilTimeout+0x68>
          huart->gState = HAL_UART_STATE_READY;
 8008202:	2320      	movs	r3, #32
 8008204:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008208:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800820c:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 8008210:	2300      	movs	r3, #0
 8008212:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
          return HAL_TIMEOUT;
 8008216:	2003      	movs	r0, #3
 8008218:	e01f      	b.n	800825a <UART_WaitOnFlagUntilTimeout+0xd8>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800821a:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821c:	e852 3f00 	ldrex	r3, [r2]
 8008220:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008224:	e842 3100 	strex	r1, r3, [r2]
 8008228:	2900      	cmp	r1, #0
 800822a:	d1f6      	bne.n	800821a <UART_WaitOnFlagUntilTimeout+0x98>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800822c:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800822e:	f102 0308 	add.w	r3, r2, #8
 8008232:	e853 3f00 	ldrex	r3, [r3]
 8008236:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800823a:	3208      	adds	r2, #8
 800823c:	e842 3100 	strex	r1, r3, [r2]
 8008240:	2900      	cmp	r1, #0
 8008242:	d1f3      	bne.n	800822c <UART_WaitOnFlagUntilTimeout+0xaa>
        huart->gState = HAL_UART_STATE_READY;
 8008244:	2320      	movs	r3, #32
 8008246:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800824a:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 800824e:	2300      	movs	r3, #0
 8008250:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 8008254:	2003      	movs	r0, #3
 8008256:	e000      	b.n	800825a <UART_WaitOnFlagUntilTimeout+0xd8>
  return HAL_OK;
 8008258:	2000      	movs	r0, #0
}
 800825a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800825e <UART_CheckIdleState>:
{
 800825e:	b530      	push	{r4, r5, lr}
 8008260:	b083      	sub	sp, #12
 8008262:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008264:	2300      	movs	r3, #0
 8008266:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 800826a:	f7f9 fbb9 	bl	80019e0 <HAL_GetTick>
 800826e:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008270:	6822      	ldr	r2, [r4, #0]
 8008272:	6812      	ldr	r2, [r2, #0]
 8008274:	f012 0f08 	tst.w	r2, #8
 8008278:	d10f      	bne.n	800829a <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800827a:	6823      	ldr	r3, [r4, #0]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f013 0f04 	tst.w	r3, #4
 8008282:	d118      	bne.n	80082b6 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8008284:	2320      	movs	r3, #32
 8008286:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800828a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800828e:	2000      	movs	r0, #0
 8008290:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 8008292:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8008296:	b003      	add	sp, #12
 8008298:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800829a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800829e:	9300      	str	r3, [sp, #0]
 80082a0:	4603      	mov	r3, r0
 80082a2:	2200      	movs	r2, #0
 80082a4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80082a8:	4620      	mov	r0, r4
 80082aa:	f7ff ff6a 	bl	8008182 <UART_WaitOnFlagUntilTimeout>
 80082ae:	2800      	cmp	r0, #0
 80082b0:	d0e3      	beq.n	800827a <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 80082b2:	2003      	movs	r0, #3
 80082b4:	e7ef      	b.n	8008296 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082b6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80082ba:	9300      	str	r3, [sp, #0]
 80082bc:	462b      	mov	r3, r5
 80082be:	2200      	movs	r2, #0
 80082c0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80082c4:	4620      	mov	r0, r4
 80082c6:	f7ff ff5c 	bl	8008182 <UART_WaitOnFlagUntilTimeout>
 80082ca:	2800      	cmp	r0, #0
 80082cc:	d0da      	beq.n	8008284 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 80082ce:	2003      	movs	r0, #3
 80082d0:	e7e1      	b.n	8008296 <UART_CheckIdleState+0x38>

080082d2 <HAL_UART_Init>:
  if (huart == NULL)
 80082d2:	b378      	cbz	r0, 8008334 <HAL_UART_Init+0x62>
{
 80082d4:	b510      	push	{r4, lr}
 80082d6:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80082d8:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80082dc:	b30b      	cbz	r3, 8008322 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80082de:	2324      	movs	r3, #36	; 0x24
 80082e0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 80082e4:	6822      	ldr	r2, [r4, #0]
 80082e6:	6813      	ldr	r3, [r2, #0]
 80082e8:	f023 0301 	bic.w	r3, r3, #1
 80082ec:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80082ee:	4620      	mov	r0, r4
 80082f0:	f7ff fd7c 	bl	8007dec <UART_SetConfig>
 80082f4:	2801      	cmp	r0, #1
 80082f6:	d013      	beq.n	8008320 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80082f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80082fa:	b9bb      	cbnz	r3, 800832c <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082fc:	6822      	ldr	r2, [r4, #0]
 80082fe:	6853      	ldr	r3, [r2, #4]
 8008300:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8008304:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008306:	6822      	ldr	r2, [r4, #0]
 8008308:	6893      	ldr	r3, [r2, #8]
 800830a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800830e:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8008310:	6822      	ldr	r2, [r4, #0]
 8008312:	6813      	ldr	r3, [r2, #0]
 8008314:	f043 0301 	orr.w	r3, r3, #1
 8008318:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800831a:	4620      	mov	r0, r4
 800831c:	f7ff ff9f 	bl	800825e <UART_CheckIdleState>
}
 8008320:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8008322:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8008326:	f7f9 feb9 	bl	800209c <HAL_UART_MspInit>
 800832a:	e7d8      	b.n	80082de <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 800832c:	4620      	mov	r0, r4
 800832e:	f7ff fec3 	bl	80080b8 <UART_AdvFeatureConfig>
 8008332:	e7e3      	b.n	80082fc <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8008334:	2001      	movs	r0, #1
}
 8008336:	4770      	bx	lr

08008338 <UART_Start_Receive_IT>:
{
 8008338:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 800833a:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize  = Size;
 800833c:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008340:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008344:	2300      	movs	r3, #0
 8008346:	6703      	str	r3, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 8008348:	6883      	ldr	r3, [r0, #8]
 800834a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800834e:	d006      	beq.n	800835e <UART_Start_Receive_IT+0x26>
 8008350:	b9a3      	cbnz	r3, 800837c <UART_Start_Receive_IT+0x44>
 8008352:	6903      	ldr	r3, [r0, #16]
 8008354:	b973      	cbnz	r3, 8008374 <UART_Start_Receive_IT+0x3c>
 8008356:	23ff      	movs	r3, #255	; 0xff
 8008358:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800835c:	e014      	b.n	8008388 <UART_Start_Receive_IT+0x50>
 800835e:	6903      	ldr	r3, [r0, #16]
 8008360:	b923      	cbnz	r3, 800836c <UART_Start_Receive_IT+0x34>
 8008362:	f240 13ff 	movw	r3, #511	; 0x1ff
 8008366:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800836a:	e00d      	b.n	8008388 <UART_Start_Receive_IT+0x50>
 800836c:	23ff      	movs	r3, #255	; 0xff
 800836e:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8008372:	e009      	b.n	8008388 <UART_Start_Receive_IT+0x50>
 8008374:	237f      	movs	r3, #127	; 0x7f
 8008376:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800837a:	e005      	b.n	8008388 <UART_Start_Receive_IT+0x50>
 800837c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008380:	d030      	beq.n	80083e4 <UART_Start_Receive_IT+0xac>
 8008382:	2300      	movs	r3, #0
 8008384:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008388:	2300      	movs	r3, #0
 800838a:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800838e:	2322      	movs	r3, #34	; 0x22
 8008390:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008394:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008396:	f101 0308 	add.w	r3, r1, #8
 800839a:	e853 3f00 	ldrex	r3, [r3]
 800839e:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a2:	3108      	adds	r1, #8
 80083a4:	e841 3400 	strex	r4, r3, [r1]
 80083a8:	2c00      	cmp	r4, #0
 80083aa:	d1f3      	bne.n	8008394 <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80083ac:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80083ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083b2:	d021      	beq.n	80083f8 <UART_Start_Receive_IT+0xc0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083b4:	6883      	ldr	r3, [r0, #8]
 80083b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083ba:	d048      	beq.n	800844e <UART_Start_Receive_IT+0x116>
      huart->RxISR = UART_RxISR_8BIT;
 80083bc:	4b2c      	ldr	r3, [pc, #176]	; (8008470 <UART_Start_Receive_IT+0x138>)
 80083be:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 80083c0:	2300      	movs	r3, #0
 80083c2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 80083c6:	6903      	ldr	r3, [r0, #16]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d046      	beq.n	800845a <UART_Start_Receive_IT+0x122>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80083cc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ce:	e852 3f00 	ldrex	r3, [r2]
 80083d2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d6:	e842 3100 	strex	r1, r3, [r2]
 80083da:	2900      	cmp	r1, #0
 80083dc:	d1f6      	bne.n	80083cc <UART_Start_Receive_IT+0x94>
}
 80083de:	2000      	movs	r0, #0
 80083e0:	bc10      	pop	{r4}
 80083e2:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 80083e4:	6903      	ldr	r3, [r0, #16]
 80083e6:	b91b      	cbnz	r3, 80083f0 <UART_Start_Receive_IT+0xb8>
 80083e8:	237f      	movs	r3, #127	; 0x7f
 80083ea:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80083ee:	e7cb      	b.n	8008388 <UART_Start_Receive_IT+0x50>
 80083f0:	233f      	movs	r3, #63	; 0x3f
 80083f2:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80083f6:	e7c7      	b.n	8008388 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80083f8:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d8d9      	bhi.n	80083b4 <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008400:	6883      	ldr	r3, [r0, #8]
 8008402:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008406:	d01c      	beq.n	8008442 <UART_Start_Receive_IT+0x10a>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008408:	4b1a      	ldr	r3, [pc, #104]	; (8008474 <UART_Start_Receive_IT+0x13c>)
 800840a:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 800840c:	2300      	movs	r3, #0
 800840e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008412:	6903      	ldr	r3, [r0, #16]
 8008414:	b143      	cbz	r3, 8008428 <UART_Start_Receive_IT+0xf0>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008416:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008418:	e852 3f00 	ldrex	r3, [r2]
 800841c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008420:	e842 3100 	strex	r1, r3, [r2]
 8008424:	2900      	cmp	r1, #0
 8008426:	d1f6      	bne.n	8008416 <UART_Start_Receive_IT+0xde>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008428:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842a:	f102 0308 	add.w	r3, r2, #8
 800842e:	e853 3f00 	ldrex	r3, [r3]
 8008432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008436:	3208      	adds	r2, #8
 8008438:	e842 3100 	strex	r1, r3, [r2]
 800843c:	2900      	cmp	r1, #0
 800843e:	d1f3      	bne.n	8008428 <UART_Start_Receive_IT+0xf0>
 8008440:	e7cd      	b.n	80083de <UART_Start_Receive_IT+0xa6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008442:	6903      	ldr	r3, [r0, #16]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d1df      	bne.n	8008408 <UART_Start_Receive_IT+0xd0>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008448:	4b0b      	ldr	r3, [pc, #44]	; (8008478 <UART_Start_Receive_IT+0x140>)
 800844a:	6703      	str	r3, [r0, #112]	; 0x70
 800844c:	e7de      	b.n	800840c <UART_Start_Receive_IT+0xd4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800844e:	6903      	ldr	r3, [r0, #16]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d1b3      	bne.n	80083bc <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 8008454:	4b09      	ldr	r3, [pc, #36]	; (800847c <UART_Start_Receive_IT+0x144>)
 8008456:	6703      	str	r3, [r0, #112]	; 0x70
 8008458:	e7b2      	b.n	80083c0 <UART_Start_Receive_IT+0x88>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800845a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800845c:	e852 3f00 	ldrex	r3, [r2]
 8008460:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008464:	e842 3100 	strex	r1, r3, [r2]
 8008468:	2900      	cmp	r1, #0
 800846a:	d1f6      	bne.n	800845a <UART_Start_Receive_IT+0x122>
 800846c:	e7b7      	b.n	80083de <UART_Start_Receive_IT+0xa6>
 800846e:	bf00      	nop
 8008470:	08007949 	.word	0x08007949
 8008474:	08007aad 	.word	0x08007aad
 8008478:	08007c4d 	.word	0x08007c4d
 800847c:	080079fb 	.word	0x080079fb

08008480 <HAL_UART_Receive_IT>:
{
 8008480:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8008482:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8008486:	2b20      	cmp	r3, #32
 8008488:	d11e      	bne.n	80084c8 <HAL_UART_Receive_IT+0x48>
    if ((pData == NULL) || (Size == 0U))
 800848a:	b1f9      	cbz	r1, 80084cc <HAL_UART_Receive_IT+0x4c>
 800848c:	b302      	cbz	r2, 80084d0 <HAL_UART_Receive_IT+0x50>
    __HAL_LOCK(huart);
 800848e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8008492:	2b01      	cmp	r3, #1
 8008494:	d01e      	beq.n	80084d4 <HAL_UART_Receive_IT+0x54>
 8008496:	2301      	movs	r3, #1
 8008498:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800849c:	2300      	movs	r3, #0
 800849e:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80084a0:	6803      	ldr	r3, [r0, #0]
 80084a2:	4c0d      	ldr	r4, [pc, #52]	; (80084d8 <HAL_UART_Receive_IT+0x58>)
 80084a4:	42a3      	cmp	r3, r4
 80084a6:	d00c      	beq.n	80084c2 <HAL_UART_Receive_IT+0x42>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80084ae:	d008      	beq.n	80084c2 <HAL_UART_Receive_IT+0x42>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80084b0:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b2:	e854 3f00 	ldrex	r3, [r4]
 80084b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ba:	e844 3500 	strex	r5, r3, [r4]
 80084be:	2d00      	cmp	r5, #0
 80084c0:	d1f6      	bne.n	80084b0 <HAL_UART_Receive_IT+0x30>
    return(UART_Start_Receive_IT(huart, pData, Size));
 80084c2:	f7ff ff39 	bl	8008338 <UART_Start_Receive_IT>
 80084c6:	e000      	b.n	80084ca <HAL_UART_Receive_IT+0x4a>
    return HAL_BUSY;
 80084c8:	2002      	movs	r0, #2
}
 80084ca:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80084cc:	2001      	movs	r0, #1
 80084ce:	e7fc      	b.n	80084ca <HAL_UART_Receive_IT+0x4a>
 80084d0:	2001      	movs	r0, #1
 80084d2:	e7fa      	b.n	80084ca <HAL_UART_Receive_IT+0x4a>
    __HAL_LOCK(huart);
 80084d4:	2002      	movs	r0, #2
 80084d6:	e7f8      	b.n	80084ca <HAL_UART_Receive_IT+0x4a>
 80084d8:	40008000 	.word	0x40008000

080084dc <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80084dc:	b082      	sub	sp, #8
 80084de:	ab02      	add	r3, sp, #8
 80084e0:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 80084e4:	6802      	ldr	r2, [r0, #0]
 80084e6:	6853      	ldr	r3, [r2, #4]
 80084e8:	f023 0310 	bic.w	r3, r3, #16
 80084ec:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80084f0:	430b      	orrs	r3, r1
 80084f2:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 80084f4:	6802      	ldr	r2, [r0, #0]
 80084f6:	6853      	ldr	r3, [r2, #4]
 80084f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80084fc:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8008500:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008504:	6053      	str	r3, [r2, #4]
}
 8008506:	b002      	add	sp, #8
 8008508:	4770      	bx	lr
	...

0800850c <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800850c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800850e:	b92b      	cbnz	r3, 800851c <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8008510:	2301      	movs	r3, #1
 8008512:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008516:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 800851a:	4770      	bx	lr
{
 800851c:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800851e:	6803      	ldr	r3, [r0, #0]
 8008520:	689a      	ldr	r2, [r3, #8]
 8008522:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008526:	6899      	ldr	r1, [r3, #8]
 8008528:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800852a:	4d09      	ldr	r5, [pc, #36]	; (8008550 <UARTEx_SetNbDataToProcess+0x44>)
 800852c:	5c6b      	ldrb	r3, [r5, r1]
 800852e:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008530:	4c08      	ldr	r4, [pc, #32]	; (8008554 <UARTEx_SetNbDataToProcess+0x48>)
 8008532:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008534:	fb93 f3f1 	sdiv	r3, r3, r1
 8008538:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800853c:	5cab      	ldrb	r3, [r5, r2]
 800853e:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008540:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008542:	fb93 f3f2 	sdiv	r3, r3, r2
 8008546:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 800854a:	bc30      	pop	{r4, r5}
 800854c:	4770      	bx	lr
 800854e:	bf00      	nop
 8008550:	0801454c 	.word	0x0801454c
 8008554:	08014544 	.word	0x08014544

08008558 <HAL_UARTEx_WakeupCallback>:
}
 8008558:	4770      	bx	lr

0800855a <HAL_UARTEx_RxFifoFullCallback>:
}
 800855a:	4770      	bx	lr

0800855c <HAL_UARTEx_TxFifoEmptyCallback>:
}
 800855c:	4770      	bx	lr

0800855e <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 800855e:	b510      	push	{r4, lr}
 8008560:	b084      	sub	sp, #16
 8008562:	ab04      	add	r3, sp, #16
 8008564:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 8008568:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800856c:	2b01      	cmp	r3, #1
 800856e:	d035      	beq.n	80085dc <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 8008570:	4604      	mov	r4, r0
 8008572:	2301      	movs	r3, #1
 8008574:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8008578:	2324      	movs	r3, #36	; 0x24
 800857a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800857e:	6802      	ldr	r2, [r0, #0]
 8008580:	6813      	ldr	r3, [r2, #0]
 8008582:	f023 0301 	bic.w	r3, r3, #1
 8008586:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8008588:	6801      	ldr	r1, [r0, #0]
 800858a:	688b      	ldr	r3, [r1, #8]
 800858c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008590:	9a02      	ldr	r2, [sp, #8]
 8008592:	4313      	orrs	r3, r2
 8008594:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8008596:	b1aa      	cbz	r2, 80085c4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 8008598:	6822      	ldr	r2, [r4, #0]
 800859a:	6813      	ldr	r3, [r2, #0]
 800859c:	f043 0301 	orr.w	r3, r3, #1
 80085a0:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80085a2:	f7f9 fa1d 	bl	80019e0 <HAL_GetTick>
 80085a6:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085a8:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80085ac:	9200      	str	r2, [sp, #0]
 80085ae:	2200      	movs	r2, #0
 80085b0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80085b4:	4620      	mov	r0, r4
 80085b6:	f7ff fde4 	bl	8008182 <UART_WaitOnFlagUntilTimeout>
 80085ba:	b948      	cbnz	r0, 80085d0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 80085bc:	2320      	movs	r3, #32
 80085be:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 80085c2:	e006      	b.n	80085d2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 80085c4:	ab04      	add	r3, sp, #16
 80085c6:	e913 0006 	ldmdb	r3, {r1, r2}
 80085ca:	f7ff ff87 	bl	80084dc <UARTEx_Wakeup_AddressConfig>
 80085ce:	e7e3      	b.n	8008598 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 80085d0:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 80085d2:	2300      	movs	r3, #0
 80085d4:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 80085d8:	b004      	add	sp, #16
 80085da:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 80085dc:	2002      	movs	r0, #2
 80085de:	e7fb      	b.n	80085d8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

080085e0 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 80085e0:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d010      	beq.n	800860a <HAL_UARTEx_EnableStopMode+0x2a>
 80085e8:	2301      	movs	r3, #1
 80085ea:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 80085ee:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f0:	e852 3f00 	ldrex	r3, [r2]
 80085f4:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f8:	e842 3100 	strex	r1, r3, [r2]
 80085fc:	2900      	cmp	r1, #0
 80085fe:	d1f6      	bne.n	80085ee <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 8008600:	2300      	movs	r3, #0
 8008602:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 8008606:	4618      	mov	r0, r3
 8008608:	4770      	bx	lr
  __HAL_LOCK(huart);
 800860a:	2002      	movs	r0, #2
}
 800860c:	4770      	bx	lr

0800860e <HAL_UARTEx_EnableFifoMode>:
  __HAL_LOCK(huart);
 800860e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8008612:	2b01      	cmp	r3, #1
 8008614:	d01d      	beq.n	8008652 <HAL_UARTEx_EnableFifoMode+0x44>
{
 8008616:	b510      	push	{r4, lr}
 8008618:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800861a:	2301      	movs	r3, #1
 800861c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8008620:	2324      	movs	r3, #36	; 0x24
 8008622:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008626:	6802      	ldr	r2, [r0, #0]
 8008628:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800862a:	6811      	ldr	r1, [r2, #0]
 800862c:	f021 0101 	bic.w	r1, r1, #1
 8008630:	6011      	str	r1, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008632:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8008636:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800863a:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800863c:	6802      	ldr	r2, [r0, #0]
 800863e:	6013      	str	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 8008640:	f7ff ff64 	bl	800850c <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8008644:	2320      	movs	r3, #32
 8008646:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800864a:	2000      	movs	r0, #0
 800864c:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8008650:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8008652:	2002      	movs	r0, #2
}
 8008654:	4770      	bx	lr

08008656 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8008656:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8008658:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800865c:	2b01      	cmp	r3, #1
 800865e:	d01d      	beq.n	800869c <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8008660:	4604      	mov	r4, r0
 8008662:	2301      	movs	r3, #1
 8008664:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8008668:	2324      	movs	r3, #36	; 0x24
 800866a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800866e:	6803      	ldr	r3, [r0, #0]
 8008670:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8008672:	681a      	ldr	r2, [r3, #0]
 8008674:	f022 0201 	bic.w	r2, r2, #1
 8008678:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800867a:	6802      	ldr	r2, [r0, #0]
 800867c:	6893      	ldr	r3, [r2, #8]
 800867e:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8008682:	4319      	orrs	r1, r3
 8008684:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8008686:	f7ff ff41 	bl	800850c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800868a:	6823      	ldr	r3, [r4, #0]
 800868c:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800868e:	2320      	movs	r3, #32
 8008690:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8008694:	2000      	movs	r0, #0
 8008696:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800869a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800869c:	2002      	movs	r0, #2
 800869e:	e7fc      	b.n	800869a <HAL_UARTEx_SetTxFifoThreshold+0x44>

080086a0 <HAL_UARTEx_SetRxFifoThreshold>:
{
 80086a0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80086a2:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d01d      	beq.n	80086e6 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 80086aa:	4604      	mov	r4, r0
 80086ac:	2301      	movs	r3, #1
 80086ae:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 80086b2:	2324      	movs	r3, #36	; 0x24
 80086b4:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80086b8:	6803      	ldr	r3, [r0, #0]
 80086ba:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	f022 0201 	bic.w	r2, r2, #1
 80086c2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80086c4:	6802      	ldr	r2, [r0, #0]
 80086c6:	6893      	ldr	r3, [r2, #8]
 80086c8:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 80086cc:	4319      	orrs	r1, r3
 80086ce:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80086d0:	f7ff ff1c 	bl	800850c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086d4:	6823      	ldr	r3, [r4, #0]
 80086d6:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80086d8:	2320      	movs	r3, #32
 80086da:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80086de:	2000      	movs	r0, #0
 80086e0:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 80086e4:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80086e6:	2002      	movs	r0, #2
 80086e8:	e7fc      	b.n	80086e4 <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

080086ec <LmHandlerPackageIsInitialized>:
    }
}

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 80086ec:	2804      	cmp	r0, #4
 80086ee:	d807      	bhi.n	8008700 <LmHandlerPackageIsInitialized+0x14>
{
 80086f0:	b508      	push	{r3, lr}
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 80086f2:	4b05      	ldr	r3, [pc, #20]	; (8008708 <LmHandlerPackageIsInitialized+0x1c>)
 80086f4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	b11b      	cbz	r3, 8008704 <LmHandlerPackageIsInitialized+0x18>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 80086fc:	4798      	blx	r3
    }
    else
    {
        return false;
    }
}
 80086fe:	bd08      	pop	{r3, pc}
        return false;
 8008700:	2000      	movs	r0, #0
}
 8008702:	4770      	bx	lr
        return false;
 8008704:	2000      	movs	r0, #0
 8008706:	e7fa      	b.n	80086fe <LmHandlerPackageIsInitialized+0x12>
 8008708:	20000770 	.word	0x20000770

0800870c <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800870c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800870e:	4605      	mov	r5, r0
 8008710:	460f      	mov	r7, r1
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8008712:	2400      	movs	r4, #0
 8008714:	e005      	b.n	8008722 <LmHandlerPackagesNotify+0x16>
        {
            switch( notifyType )
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 8008716:	699b      	ldr	r3, [r3, #24]
 8008718:	b10b      	cbz	r3, 800871e <LmHandlerPackagesNotify+0x12>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800871a:	4638      	mov	r0, r7
 800871c:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800871e:	3401      	adds	r4, #1
 8008720:	b264      	sxtb	r4, r4
 8008722:	2c04      	cmp	r4, #4
 8008724:	dc34      	bgt.n	8008790 <LmHandlerPackagesNotify+0x84>
        if( LmHandlerPackages[i] != NULL )
 8008726:	4626      	mov	r6, r4
 8008728:	4b1a      	ldr	r3, [pc, #104]	; (8008794 <LmHandlerPackagesNotify+0x88>)
 800872a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d0f5      	beq.n	800871e <LmHandlerPackagesNotify+0x12>
            switch( notifyType )
 8008732:	2d03      	cmp	r5, #3
 8008734:	d8f3      	bhi.n	800871e <LmHandlerPackagesNotify+0x12>
 8008736:	a201      	add	r2, pc, #4	; (adr r2, 800873c <LmHandlerPackagesNotify+0x30>)
 8008738:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 800873c:	08008717 	.word	0x08008717
 8008740:	0800874d 	.word	0x0800874d
 8008744:	08008779 	.word	0x08008779
 8008748:	08008785 	.word	0x08008785
                    break;
                }
                case PACKAGE_MCPS_INDICATION:
                {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800874c:	69da      	ldr	r2, [r3, #28]
 800874e:	2a00      	cmp	r2, #0
 8008750:	d0e5      	beq.n	800871e <LmHandlerPackagesNotify+0x12>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 8008752:	781a      	ldrb	r2, [r3, #0]
 8008754:	78fb      	ldrb	r3, [r7, #3]
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 8008756:	429a      	cmp	r2, r3
 8008758:	d007      	beq.n	800876a <LmHandlerPackagesNotify+0x5e>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800875a:	2c00      	cmp	r4, #0
 800875c:	d1df      	bne.n	800871e <LmHandlerPackagesNotify+0x12>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 800875e:	4b0d      	ldr	r3, [pc, #52]	; (8008794 <LmHandlerPackagesNotify+0x88>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	68db      	ldr	r3, [r3, #12]
 8008764:	4798      	blx	r3
 8008766:	2800      	cmp	r0, #0
 8008768:	d0d9      	beq.n	800871e <LmHandlerPackagesNotify+0x12>
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
#endif /* LORAMAC_VERSION */
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800876a:	4b0a      	ldr	r3, [pc, #40]	; (8008794 <LmHandlerPackagesNotify+0x88>)
 800876c:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8008770:	69db      	ldr	r3, [r3, #28]
 8008772:	4638      	mov	r0, r7
 8008774:	4798      	blx	r3
 8008776:	e7d2      	b.n	800871e <LmHandlerPackagesNotify+0x12>
                    }
                    break;
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 8008778:	6a1b      	ldr	r3, [r3, #32]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d0cf      	beq.n	800871e <LmHandlerPackagesNotify+0x12>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800877e:	4638      	mov	r0, r7
 8008780:	4798      	blx	r3
 8008782:	e7cc      	b.n	800871e <LmHandlerPackagesNotify+0x12>
                    }
                    break;
                }
                case PACKAGE_MLME_INDICATION:
                {
                    if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 8008784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008786:	2b00      	cmp	r3, #0
 8008788:	d0c9      	beq.n	800871e <LmHandlerPackagesNotify+0x12>
                    {
                        LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800878a:	4638      	mov	r0, r7
 800878c:	4798      	blx	r3
 800878e:	e7c6      	b.n	800871e <LmHandlerPackagesNotify+0x12>
                    break;
                }
            }
        }
    }
}
 8008790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008792:	bf00      	nop
 8008794:	20000770 	.word	0x20000770

08008798 <McpsConfirm>:
{
 8008798:	b510      	push	{r4, lr}
 800879a:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 1;
 800879c:	480c      	ldr	r0, [pc, #48]	; (80087d0 <McpsConfirm+0x38>)
 800879e:	2301      	movs	r3, #1
 80087a0:	7003      	strb	r3, [r0, #0]
    TxParams.Status = mcpsConfirm->Status;
 80087a2:	7863      	ldrb	r3, [r4, #1]
 80087a4:	7043      	strb	r3, [r0, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 80087a6:	f994 3002 	ldrsb.w	r3, [r4, #2]
 80087aa:	7283      	strb	r3, [r0, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 80087ac:	68e3      	ldr	r3, [r4, #12]
 80087ae:	60c3      	str	r3, [r0, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 80087b0:	f994 3003 	ldrsb.w	r3, [r4, #3]
 80087b4:	7603      	strb	r3, [r0, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 80087b6:	6923      	ldr	r3, [r4, #16]
 80087b8:	7643      	strb	r3, [r0, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 80087ba:	7923      	ldrb	r3, [r4, #4]
 80087bc:	7243      	strb	r3, [r0, #9]
    LmHandlerCallbacks->OnTxData( &TxParams );
 80087be:	4b05      	ldr	r3, [pc, #20]	; (80087d4 <McpsConfirm+0x3c>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087c4:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 80087c6:	4621      	mov	r1, r4
 80087c8:	2000      	movs	r0, #0
 80087ca:	f7ff ff9f 	bl	800870c <LmHandlerPackagesNotify>
}
 80087ce:	bd10      	pop	{r4, pc}
 80087d0:	200000b8 	.word	0x200000b8
 80087d4:	2000076c 	.word	0x2000076c

080087d8 <LmHandlerPackagesProcess>:
    return false;
}
#endif /* LORAMAC_VERSION */

static void LmHandlerPackagesProcess( void )
{
 80087d8:	b538      	push	{r3, r4, r5, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80087da:	2400      	movs	r4, #0
 80087dc:	e001      	b.n	80087e2 <LmHandlerPackagesProcess+0xa>
 80087de:	3401      	adds	r4, #1
 80087e0:	b264      	sxtb	r4, r4
 80087e2:	2c04      	cmp	r4, #4
 80087e4:	dc12      	bgt.n	800880c <LmHandlerPackagesProcess+0x34>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 80087e6:	4b0a      	ldr	r3, [pc, #40]	; (8008810 <LmHandlerPackagesProcess+0x38>)
 80087e8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d0f6      	beq.n	80087de <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 80087f0:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d0f3      	beq.n	80087de <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 80087f6:	b2e0      	uxtb	r0, r4
 80087f8:	f7ff ff78 	bl	80086ec <LmHandlerPackageIsInitialized>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 80087fc:	2800      	cmp	r0, #0
 80087fe:	d0ee      	beq.n	80087de <LmHandlerPackagesProcess+0x6>
        {
            LmHandlerPackages[i]->Process( );
 8008800:	4b03      	ldr	r3, [pc, #12]	; (8008810 <LmHandlerPackagesProcess+0x38>)
 8008802:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008806:	691b      	ldr	r3, [r3, #16]
 8008808:	4798      	blx	r3
 800880a:	e7e8      	b.n	80087de <LmHandlerPackagesProcess+0x6>
        }
    }
}
 800880c:	bd38      	pop	{r3, r4, r5, pc}
 800880e:	bf00      	nop
 8008810:	20000770 	.word	0x20000770

08008814 <LmHandlerDeviceTimeReq>:
{
 8008814:	b500      	push	{lr}
 8008816:	b087      	sub	sp, #28
    mlmeReq.Type = MLME_DEVICE_TIME;
 8008818:	230a      	movs	r3, #10
 800881a:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMlmeRequest( &mlmeReq );
 800881e:	a801      	add	r0, sp, #4
 8008820:	f003 fe04 	bl	800c42c <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 8008824:	9a05      	ldr	r2, [sp, #20]
 8008826:	4b04      	ldr	r3, [pc, #16]	; (8008838 <LmHandlerDeviceTimeReq+0x24>)
 8008828:	601a      	str	r2, [r3, #0]
    if( status == LORAMAC_STATUS_OK )
 800882a:	b910      	cbnz	r0, 8008832 <LmHandlerDeviceTimeReq+0x1e>
}
 800882c:	b007      	add	sp, #28
 800882e:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 8008832:	f04f 30ff 	mov.w	r0, #4294967295
 8008836:	e7f9      	b.n	800882c <LmHandlerDeviceTimeReq+0x18>
 8008838:	20000768 	.word	0x20000768

0800883c <LmHandlerProcess>:
{
 800883c:	b508      	push	{r3, lr}
    LoRaMacProcess( );
 800883e:	f002 ff5b 	bl	800b6f8 <LoRaMacProcess>
    LmHandlerPackagesProcess( );
 8008842:	f7ff ffc9 	bl	80087d8 <LmHandlerPackagesProcess>
}
 8008846:	bd08      	pop	{r3, pc}

08008848 <LmHandlerGetDutyCycleWaitTime>:
}
 8008848:	4b01      	ldr	r3, [pc, #4]	; (8008850 <LmHandlerGetDutyCycleWaitTime+0x8>)
 800884a:	6818      	ldr	r0, [r3, #0]
 800884c:	4770      	bx	lr
 800884e:	bf00      	nop
 8008850:	20000768 	.word	0x20000768

08008854 <LmHandlerJoinStatus>:
{
 8008854:	b500      	push	{lr}
 8008856:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 8008858:	2301      	movs	r3, #1
 800885a:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800885e:	a801      	add	r0, sp, #4
 8008860:	f003 fa22 	bl	800bca8 <LoRaMacMibGetRequestConfirm>
    if( status == LORAMAC_STATUS_OK )
 8008864:	b920      	cbnz	r0, 8008870 <LmHandlerJoinStatus+0x1c>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 8008866:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800886a:	b110      	cbz	r0, 8008872 <LmHandlerJoinStatus+0x1e>
            return LORAMAC_HANDLER_SET;
 800886c:	2001      	movs	r0, #1
 800886e:	e000      	b.n	8008872 <LmHandlerJoinStatus+0x1e>
        return LORAMAC_HANDLER_RESET;
 8008870:	2000      	movs	r0, #0
}
 8008872:	b00b      	add	sp, #44	; 0x2c
 8008874:	f85d fb04 	ldr.w	pc, [sp], #4

08008878 <LmHandlerRequestClass>:
{
 8008878:	b510      	push	{r4, lr}
 800887a:	b08a      	sub	sp, #40	; 0x28
 800887c:	4604      	mov	r4, r0
    if (LoRaMacIsBusy() == true)
 800887e:	f002 ff29 	bl	800b6d4 <LoRaMacIsBusy>
 8008882:	2800      	cmp	r0, #0
 8008884:	d136      	bne.n	80088f4 <LmHandlerRequestClass+0x7c>
    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 8008886:	f7ff ffe5 	bl	8008854 <LmHandlerJoinStatus>
 800888a:	2801      	cmp	r0, #1
 800888c:	d135      	bne.n	80088fa <LmHandlerRequestClass+0x82>
    mibReq.Type = MIB_DEVICE_CLASS;
 800888e:	2300      	movs	r3, #0
 8008890:	f88d 3004 	strb.w	r3, [sp, #4]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8008894:	a801      	add	r0, sp, #4
 8008896:	f003 fa07 	bl	800bca8 <LoRaMacMibGetRequestConfirm>
 800889a:	bb88      	cbnz	r0, 8008900 <LmHandlerRequestClass+0x88>
    currentClass = mibReq.Param.Class;
 800889c:	f89d 3008 	ldrb.w	r3, [sp, #8]
    if( currentClass != newClass )
 80088a0:	42a3      	cmp	r3, r4
 80088a2:	d030      	beq.n	8008906 <LmHandlerRequestClass+0x8e>
        switch( newClass )
 80088a4:	2c01      	cmp	r4, #1
 80088a6:	d030      	beq.n	800890a <LmHandlerRequestClass+0x92>
 80088a8:	2c02      	cmp	r4, #2
 80088aa:	d014      	beq.n	80088d6 <LmHandlerRequestClass+0x5e>
 80088ac:	b114      	cbz	r4, 80088b4 <LmHandlerRequestClass+0x3c>
 80088ae:	2000      	movs	r0, #0
}
 80088b0:	b00a      	add	sp, #40	; 0x28
 80088b2:	bd10      	pop	{r4, pc}
                if( currentClass != CLASS_A )
 80088b4:	b90b      	cbnz	r3, 80088ba <LmHandlerRequestClass+0x42>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80088b6:	2000      	movs	r0, #0
 80088b8:	e7fa      	b.n	80088b0 <LmHandlerRequestClass+0x38>
                    mibReq.Param.Class = newClass;
 80088ba:	f88d 4008 	strb.w	r4, [sp, #8]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 80088be:	a801      	add	r0, sp, #4
 80088c0:	f003 fb28 	bl	800bf14 <LoRaMacMibSetRequestConfirm>
 80088c4:	bb20      	cbnz	r0, 8008910 <LmHandlerRequestClass+0x98>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 80088c6:	4b19      	ldr	r3, [pc, #100]	; (800892c <LmHandlerRequestClass+0xb4>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088cc:	b31b      	cbz	r3, 8008916 <LmHandlerRequestClass+0x9e>
                            LmHandlerCallbacks->OnClassChange( newClass );
 80088ce:	4620      	mov	r0, r4
 80088d0:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80088d2:	2000      	movs	r0, #0
 80088d4:	e7ec      	b.n	80088b0 <LmHandlerRequestClass+0x38>
                if( currentClass != CLASS_A )
 80088d6:	bb03      	cbnz	r3, 800891a <LmHandlerRequestClass+0xa2>
                    mibReq.Param.Class = newClass;
 80088d8:	f88d 4008 	strb.w	r4, [sp, #8]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 80088dc:	a801      	add	r0, sp, #4
 80088de:	f003 fb19 	bl	800bf14 <LoRaMacMibSetRequestConfirm>
 80088e2:	b9e8      	cbnz	r0, 8008920 <LmHandlerRequestClass+0xa8>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 80088e4:	4b11      	ldr	r3, [pc, #68]	; (800892c <LmHandlerRequestClass+0xb4>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ea:	b1e3      	cbz	r3, 8008926 <LmHandlerRequestClass+0xae>
                            LmHandlerCallbacks->OnClassChange( newClass );
 80088ec:	4620      	mov	r0, r4
 80088ee:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80088f0:	2000      	movs	r0, #0
 80088f2:	e7dd      	b.n	80088b0 <LmHandlerRequestClass+0x38>
        return LORAMAC_HANDLER_BUSY_ERROR;
 80088f4:	f06f 0001 	mvn.w	r0, #1
 80088f8:	e7da      	b.n	80088b0 <LmHandlerRequestClass+0x38>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 80088fa:	f06f 0002 	mvn.w	r0, #2
 80088fe:	e7d7      	b.n	80088b0 <LmHandlerRequestClass+0x38>
        return LORAMAC_HANDLER_ERROR;
 8008900:	f04f 30ff 	mov.w	r0, #4294967295
 8008904:	e7d4      	b.n	80088b0 <LmHandlerRequestClass+0x38>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8008906:	2000      	movs	r0, #0
 8008908:	e7d2      	b.n	80088b0 <LmHandlerRequestClass+0x38>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800890a:	f04f 30ff 	mov.w	r0, #4294967295
 800890e:	e7cf      	b.n	80088b0 <LmHandlerRequestClass+0x38>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 8008910:	f04f 30ff 	mov.w	r0, #4294967295
 8008914:	e7cc      	b.n	80088b0 <LmHandlerRequestClass+0x38>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8008916:	2000      	movs	r0, #0
 8008918:	e7ca      	b.n	80088b0 <LmHandlerRequestClass+0x38>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800891a:	f04f 30ff 	mov.w	r0, #4294967295
 800891e:	e7c7      	b.n	80088b0 <LmHandlerRequestClass+0x38>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 8008920:	f04f 30ff 	mov.w	r0, #4294967295
 8008924:	e7c4      	b.n	80088b0 <LmHandlerRequestClass+0x38>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8008926:	2000      	movs	r0, #0
 8008928:	e7c2      	b.n	80088b0 <LmHandlerRequestClass+0x38>
 800892a:	bf00      	nop
 800892c:	2000076c 	.word	0x2000076c

08008930 <LmHandlerJoin>:
{
 8008930:	b500      	push	{lr}
 8008932:	b08f      	sub	sp, #60	; 0x3c
    mlmeReq.Type = MLME_JOIN;
 8008934:	2301      	movs	r3, #1
 8008936:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800893a:	4b28      	ldr	r3, [pc, #160]	; (80089dc <LmHandlerJoin+0xac>)
 800893c:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8008940:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
    if ( mode == ACTIVATION_TYPE_OTAA )
 8008944:	2802      	cmp	r0, #2
 8008946:	d021      	beq.n	800898c <LmHandlerJoin+0x5c>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 8008948:	2001      	movs	r0, #1
 800894a:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800894e:	4b24      	ldr	r3, [pc, #144]	; (80089e0 <LmHandlerJoin+0xb0>)
 8008950:	7198      	strb	r0, [r3, #6]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 8008952:	711a      	strb	r2, [r3, #4]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8008954:	2000      	movs	r0, #0
 8008956:	7158      	strb	r0, [r3, #5]
        JoinParams.forceRejoin = forceRejoin;
 8008958:	71d9      	strb	r1, [r3, #7]
        if (CtxRestoreDone == false)
 800895a:	4b22      	ldr	r3, [pc, #136]	; (80089e4 <LmHandlerJoin+0xb4>)
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	b30b      	cbz	r3, 80089a4 <LmHandlerJoin+0x74>
        LoRaMacStart();
 8008960:	f003 f8ee 	bl	800bb40 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 8008964:	2301      	movs	r3, #1
 8008966:	f88d 3000 	strb.w	r3, [sp]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800896a:	f88d 3004 	strb.w	r3, [sp, #4]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800896e:	4668      	mov	r0, sp
 8008970:	f003 fad0 	bl	800bf14 <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 8008974:	4b1c      	ldr	r3, [pc, #112]	; (80089e8 <LmHandlerJoin+0xb8>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800897a:	4819      	ldr	r0, [pc, #100]	; (80089e0 <LmHandlerJoin+0xb0>)
 800897c:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800897e:	4b17      	ldr	r3, [pc, #92]	; (80089dc <LmHandlerJoin+0xac>)
 8008980:	7858      	ldrb	r0, [r3, #1]
 8008982:	f7ff ff79 	bl	8008878 <LmHandlerRequestClass>
}
 8008986:	b00f      	add	sp, #60	; 0x3c
 8008988:	f85d fb04 	ldr.w	pc, [sp], #4
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800898c:	2202      	movs	r2, #2
 800898e:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 8008992:	4b13      	ldr	r3, [pc, #76]	; (80089e0 <LmHandlerJoin+0xb0>)
 8008994:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 8008996:	71d9      	strb	r1, [r3, #7]
        LoRaMacStart();
 8008998:	f003 f8d2 	bl	800bb40 <LoRaMacStart>
        LoRaMacMlmeRequest( &mlmeReq );
 800899c:	a809      	add	r0, sp, #36	; 0x24
 800899e:	f003 fd45 	bl	800c42c <LoRaMacMlmeRequest>
 80089a2:	e7f0      	b.n	8008986 <LmHandlerJoin+0x56>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 80089a4:	231e      	movs	r3, #30
 80089a6:	f88d 3000 	strb.w	r3, [sp]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 80089aa:	f88d 2004 	strb.w	r2, [sp, #4]
            LoRaMacMibSetRequestConfirm( &mibReq );
 80089ae:	4668      	mov	r0, sp
 80089b0:	f003 fab0 	bl	800bf14 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 80089b4:	231f      	movs	r3, #31
 80089b6:	f88d 3000 	strb.w	r3, [sp]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 80089ba:	4b08      	ldr	r3, [pc, #32]	; (80089dc <LmHandlerJoin+0xac>)
 80089bc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80089c0:	f88d 3004 	strb.w	r3, [sp, #4]
            LoRaMacMibSetRequestConfirm( &mibReq );
 80089c4:	4668      	mov	r0, sp
 80089c6:	f003 faa5 	bl	800bf14 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 80089ca:	2328      	movs	r3, #40	; 0x28
 80089cc:	f88d 3000 	strb.w	r3, [sp]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 80089d0:	4b06      	ldr	r3, [pc, #24]	; (80089ec <LmHandlerJoin+0xbc>)
 80089d2:	9301      	str	r3, [sp, #4]
            LoRaMacMibSetRequestConfirm(&mibReq);
 80089d4:	4668      	mov	r0, sp
 80089d6:	f003 fa9d 	bl	800bf14 <LoRaMacMibSetRequestConfirm>
 80089da:	e7c1      	b.n	8008960 <LmHandlerJoin+0x30>
 80089dc:	20000784 	.word	0x20000784
 80089e0:	20000090 	.word	0x20000090
 80089e4:	20000766 	.word	0x20000766
 80089e8:	2000076c 	.word	0x2000076c
 80089ec:	01000300 	.word	0x01000300

080089f0 <LmHandlerSend>:
{
 80089f0:	b570      	push	{r4, r5, r6, lr}
 80089f2:	b086      	sub	sp, #24
 80089f4:	4604      	mov	r4, r0
 80089f6:	460d      	mov	r5, r1
 80089f8:	4616      	mov	r6, r2
    if (LoRaMacIsBusy() == true)
 80089fa:	f002 fe6b 	bl	800b6d4 <LoRaMacIsBusy>
 80089fe:	2800      	cmp	r0, #0
 8008a00:	d16e      	bne.n	8008ae0 <LmHandlerSend+0xf0>
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 8008a02:	f7ff ff27 	bl	8008854 <LmHandlerJoinStatus>
 8008a06:	2801      	cmp	r0, #1
 8008a08:	d144      	bne.n	8008a94 <LmHandlerSend+0xa4>
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 8008a0a:	4b3a      	ldr	r3, [pc, #232]	; (8008af4 <LmHandlerSend+0x104>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	68db      	ldr	r3, [r3, #12]
 8008a10:	4798      	blx	r3
 8008a12:	b138      	cbz	r0, 8008a24 <LmHandlerSend+0x34>
 8008a14:	7823      	ldrb	r3, [r4, #0]
 8008a16:	4a37      	ldr	r2, [pc, #220]	; (8008af4 <LmHandlerSend+0x104>)
 8008a18:	6812      	ldr	r2, [r2, #0]
 8008a1a:	7812      	ldrb	r2, [r2, #0]
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d001      	beq.n	8008a24 <LmHandlerSend+0x34>
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d160      	bne.n	8008ae6 <LmHandlerSend+0xf6>
    TxParams.MsgType = isTxConfirmed;
 8008a24:	4b34      	ldr	r3, [pc, #208]	; (8008af8 <LmHandlerSend+0x108>)
 8008a26:	721d      	strb	r5, [r3, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 8008a28:	3d00      	subs	r5, #0
 8008a2a:	bf18      	it	ne
 8008a2c:	2501      	movne	r5, #1
 8008a2e:	f88d 5004 	strb.w	r5, [sp, #4]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 8008a32:	4b32      	ldr	r3, [pc, #200]	; (8008afc <LmHandlerSend+0x10c>)
 8008a34:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008a38:	f88d 3012 	strb.w	r3, [sp, #18]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 8008a3c:	4669      	mov	r1, sp
 8008a3e:	7860      	ldrb	r0, [r4, #1]
 8008a40:	f003 f8cc 	bl	800bbdc <LoRaMacQueryTxPossible>
 8008a44:	b370      	cbz	r0, 8008aa4 <LmHandlerSend+0xb4>
        mcpsReq.Type = MCPS_UNCONFIRMED;
 8008a46:	2300      	movs	r3, #0
 8008a48:	f88d 3004 	strb.w	r3, [sp, #4]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 8008a4c:	9303      	str	r3, [sp, #12]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 8008a4e:	f8ad 3010 	strh.w	r3, [sp, #16]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 8008a52:	f06f 0506 	mvn.w	r5, #6
    TxParams.AppData = *appData;
 8008a56:	4b28      	ldr	r3, [pc, #160]	; (8008af8 <LmHandlerSend+0x108>)
 8008a58:	f103 0c10 	add.w	ip, r3, #16
 8008a5c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008a60:	e88c 0003 	stmia.w	ip, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 8008a64:	4a25      	ldr	r2, [pc, #148]	; (8008afc <LmHandlerSend+0x10c>)
 8008a66:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8008a6a:	729a      	strb	r2, [r3, #10]
    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 8008a6c:	4631      	mov	r1, r6
 8008a6e:	a801      	add	r0, sp, #4
 8008a70:	f003 fdb2 	bl	800c5d8 <LoRaMacMcpsRequest>
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 8008a74:	9a05      	ldr	r2, [sp, #20]
 8008a76:	4b22      	ldr	r3, [pc, #136]	; (8008b00 <LmHandlerSend+0x110>)
 8008a78:	601a      	str	r2, [r3, #0]
    switch (status)
 8008a7a:	2811      	cmp	r0, #17
 8008a7c:	d82d      	bhi.n	8008ada <LmHandlerSend+0xea>
 8008a7e:	e8df f000 	tbb	[pc, r0]
 8008a82:	1c21      	.short	0x1c21
 8008a84:	2c2c2c2c 	.word	0x2c2c2c2c
 8008a88:	2c2c352c 	.word	0x2c2c352c
 8008a8c:	2c2c292c 	.word	0x2c2c292c
 8008a90:	261c1c1c 	.word	0x261c1c1c
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 8008a94:	4b1b      	ldr	r3, [pc, #108]	; (8008b04 <LmHandlerSend+0x114>)
 8008a96:	79d9      	ldrb	r1, [r3, #7]
 8008a98:	7998      	ldrb	r0, [r3, #6]
 8008a9a:	f7ff ff49 	bl	8008930 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8008a9e:	f06f 0502 	mvn.w	r5, #2
 8008aa2:	e00c      	b.n	8008abe <LmHandlerSend+0xce>
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 8008aa4:	7823      	ldrb	r3, [r4, #0]
 8008aa6:	f88d 3008 	strb.w	r3, [sp, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 8008aaa:	7863      	ldrb	r3, [r4, #1]
 8008aac:	f8ad 3010 	strh.w	r3, [sp, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 8008ab0:	6863      	ldr	r3, [r4, #4]
 8008ab2:	9303      	str	r3, [sp, #12]
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 8008ab4:	f04f 35ff 	mov.w	r5, #4294967295
 8008ab8:	e7cd      	b.n	8008a56 <LmHandlerSend+0x66>
    switch (status)
 8008aba:	f06f 0501 	mvn.w	r5, #1
}
 8008abe:	4628      	mov	r0, r5
 8008ac0:	b006      	add	sp, #24
 8008ac2:	bd70      	pop	{r4, r5, r6, pc}
            if (lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED)
 8008ac4:	f115 0f07 	cmn.w	r5, #7
 8008ac8:	d0f9      	beq.n	8008abe <LmHandlerSend+0xce>
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 8008aca:	2500      	movs	r5, #0
 8008acc:	e7f7      	b.n	8008abe <LmHandlerSend+0xce>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 8008ace:	f06f 0504 	mvn.w	r5, #4
            break;
 8008ad2:	e7f4      	b.n	8008abe <LmHandlerSend+0xce>
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 8008ad4:	f06f 0505 	mvn.w	r5, #5
            break;
 8008ad8:	e7f1      	b.n	8008abe <LmHandlerSend+0xce>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8008ada:	f04f 35ff 	mov.w	r5, #4294967295
            break;
 8008ade:	e7ee      	b.n	8008abe <LmHandlerSend+0xce>
        return LORAMAC_HANDLER_BUSY_ERROR;
 8008ae0:	f06f 0501 	mvn.w	r5, #1
 8008ae4:	e7eb      	b.n	8008abe <LmHandlerSend+0xce>
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 8008ae6:	f06f 0503 	mvn.w	r5, #3
 8008aea:	e7e8      	b.n	8008abe <LmHandlerSend+0xce>
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8008aec:	f06f 0502 	mvn.w	r5, #2
 8008af0:	e7e5      	b.n	8008abe <LmHandlerSend+0xce>
 8008af2:	bf00      	nop
 8008af4:	20000770 	.word	0x20000770
 8008af8:	200000b8 	.word	0x200000b8
 8008afc:	20000784 	.word	0x20000784
 8008b00:	20000768 	.word	0x20000768
 8008b04:	20000090 	.word	0x20000090

08008b08 <MlmeIndication>:
{
 8008b08:	b510      	push	{r4, lr}
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	4604      	mov	r4, r0
    RxParams.IsMcpsIndication = 0;
 8008b0e:	4b1c      	ldr	r3, [pc, #112]	; (8008b80 <MlmeIndication+0x78>)
 8008b10:	2200      	movs	r2, #0
 8008b12:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 8008b14:	7842      	ldrb	r2, [r0, #1]
 8008b16:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 8008b18:	f990 2002 	ldrsb.w	r2, [r0, #2]
 8008b1c:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 8008b1e:	f9b1 2000 	ldrsh.w	r2, [r1]
 8008b22:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 8008b24:	f991 2002 	ldrsb.w	r2, [r1, #2]
 8008b28:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 8008b2a:	78ca      	ldrb	r2, [r1, #3]
 8008b2c:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 8008b2e:	6842      	ldr	r2, [r0, #4]
 8008b30:	60da      	str	r2, [r3, #12]
    if ((mlmeIndication->MlmeIndication != MLME_BEACON) && (mlmeIndication->MlmeIndication != MLME_BEACON_LOST))
 8008b32:	7803      	ldrb	r3, [r0, #0]
 8008b34:	2b0b      	cmp	r3, #11
 8008b36:	d007      	beq.n	8008b48 <MlmeIndication+0x40>
 8008b38:	2b0f      	cmp	r3, #15
 8008b3a:	d005      	beq.n	8008b48 <MlmeIndication+0x40>
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 8008b3c:	4b11      	ldr	r3, [pc, #68]	; (8008b84 <MlmeIndication+0x7c>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b42:	490f      	ldr	r1, [pc, #60]	; (8008b80 <MlmeIndication+0x78>)
 8008b44:	2000      	movs	r0, #0
 8008b46:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 8008b48:	4621      	mov	r1, r4
 8008b4a:	2003      	movs	r0, #3
 8008b4c:	f7ff fdde 	bl	800870c <LmHandlerPackagesNotify>
    switch( mlmeIndication->MlmeIndication )
 8008b50:	7823      	ldrb	r3, [r4, #0]
 8008b52:	2b07      	cmp	r3, #7
 8008b54:	d001      	beq.n	8008b5a <MlmeIndication+0x52>
}
 8008b56:	b002      	add	sp, #8
 8008b58:	bd10      	pop	{r4, pc}
            LmHandlerAppData_t appData =
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	f88d 3000 	strb.w	r3, [sp]
 8008b60:	f88d 3001 	strb.w	r3, [sp, #1]
 8008b64:	9301      	str	r3, [sp, #4]
            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 8008b66:	4b08      	ldr	r3, [pc, #32]	; (8008b88 <MlmeIndication+0x80>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	68db      	ldr	r3, [r3, #12]
 8008b6c:	4798      	blx	r3
 8008b6e:	2800      	cmp	r0, #0
 8008b70:	d1f1      	bne.n	8008b56 <MlmeIndication+0x4e>
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 8008b72:	2201      	movs	r2, #1
 8008b74:	2100      	movs	r1, #0
 8008b76:	4668      	mov	r0, sp
 8008b78:	f7ff ff3a 	bl	80089f0 <LmHandlerSend>
}
 8008b7c:	e7eb      	b.n	8008b56 <MlmeIndication+0x4e>
 8008b7e:	bf00      	nop
 8008b80:	200000a4 	.word	0x200000a4
 8008b84:	2000076c 	.word	0x2000076c
 8008b88:	20000770 	.word	0x20000770

08008b8c <LmHandlerGetCurrentClass>:
    if (deviceClass == NULL)
 8008b8c:	b170      	cbz	r0, 8008bac <LmHandlerGetCurrentClass+0x20>
{
 8008b8e:	b510      	push	{r4, lr}
 8008b90:	b08a      	sub	sp, #40	; 0x28
 8008b92:	4604      	mov	r4, r0
    mibReq.Type = MIB_DEVICE_CLASS;
 8008b94:	2300      	movs	r3, #0
 8008b96:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 8008b9a:	a801      	add	r0, sp, #4
 8008b9c:	f003 f884 	bl	800bca8 <LoRaMacMibGetRequestConfirm>
 8008ba0:	b938      	cbnz	r0, 8008bb2 <LmHandlerGetCurrentClass+0x26>
    *deviceClass = mibReq.Param.Class;
 8008ba2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8008ba6:	7023      	strb	r3, [r4, #0]
}
 8008ba8:	b00a      	add	sp, #40	; 0x28
 8008baa:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8008bac:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008bb0:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8008bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8008bb6:	e7f7      	b.n	8008ba8 <LmHandlerGetCurrentClass+0x1c>

08008bb8 <McpsIndication>:
{
 8008bb8:	b530      	push	{r4, r5, lr}
 8008bba:	b087      	sub	sp, #28
 8008bbc:	460b      	mov	r3, r1
    DeviceClass_t deviceClass = CLASS_A;
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f88d 200f 	strb.w	r2, [sp, #15]
    RxParams.IsMcpsIndication = 1;
 8008bc4:	4921      	ldr	r1, [pc, #132]	; (8008c4c <McpsIndication+0x94>)
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	700a      	strb	r2, [r1, #0]
    RxParams.Status = mcpsIndication->Status;
 8008bca:	7842      	ldrb	r2, [r0, #1]
 8008bcc:	704a      	strb	r2, [r1, #1]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 8008bce:	bb5a      	cbnz	r2, 8008c28 <McpsIndication+0x70>
 8008bd0:	4604      	mov	r4, r0
    RxParams.Datarate = mcpsIndication->RxDatarate;
 8008bd2:	f990 2004 	ldrsb.w	r2, [r0, #4]
 8008bd6:	720a      	strb	r2, [r1, #8]
    RxParams.Rssi = rxStatus->Rssi;
 8008bd8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008bdc:	724a      	strb	r2, [r1, #9]
    RxParams.Snr = rxStatus->Snr;
 8008bde:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8008be2:	728a      	strb	r2, [r1, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 8008be4:	78db      	ldrb	r3, [r3, #3]
 8008be6:	740b      	strb	r3, [r1, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 8008be8:	6903      	ldr	r3, [r0, #16]
 8008bea:	60cb      	str	r3, [r1, #12]
    appData.Port = mcpsIndication->Port;
 8008bec:	78c3      	ldrb	r3, [r0, #3]
 8008bee:	f88d 3010 	strb.w	r3, [sp, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 8008bf2:	7b03      	ldrb	r3, [r0, #12]
 8008bf4:	f88d 3011 	strb.w	r3, [sp, #17]
    appData.Buffer = mcpsIndication->Buffer;
 8008bf8:	6883      	ldr	r3, [r0, #8]
 8008bfa:	9305      	str	r3, [sp, #20]
    LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 8008bfc:	4d14      	ldr	r5, [pc, #80]	; (8008c50 <McpsIndication+0x98>)
 8008bfe:	682b      	ldr	r3, [r5, #0]
 8008c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c02:	a804      	add	r0, sp, #16
 8008c04:	4798      	blx	r3
    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 8008c06:	682b      	ldr	r3, [r5, #0]
 8008c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c0a:	b113      	cbz	r3, 8008c12 <McpsIndication+0x5a>
 8008c0c:	7e22      	ldrb	r2, [r4, #24]
 8008c0e:	b102      	cbz	r2, 8008c12 <McpsIndication+0x5a>
        LmHandlerCallbacks->OnSysTimeUpdate( );
 8008c10:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 8008c12:	4621      	mov	r1, r4
 8008c14:	2001      	movs	r0, #1
 8008c16:	f7ff fd79 	bl	800870c <LmHandlerPackagesNotify>
    LmHandlerGetCurrentClass( &deviceClass );
 8008c1a:	f10d 000f 	add.w	r0, sp, #15
 8008c1e:	f7ff ffb5 	bl	8008b8c <LmHandlerGetCurrentClass>
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 8008c22:	7963      	ldrb	r3, [r4, #5]
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d001      	beq.n	8008c2c <McpsIndication+0x74>
}
 8008c28:	b007      	add	sp, #28
 8008c2a:	bd30      	pop	{r4, r5, pc}
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 8008c2c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d1f9      	bne.n	8008c28 <McpsIndication+0x70>
        LmHandlerAppData_t appData =
 8008c34:	2100      	movs	r1, #0
 8008c36:	f88d 1004 	strb.w	r1, [sp, #4]
 8008c3a:	f88d 1005 	strb.w	r1, [sp, #5]
 8008c3e:	9102      	str	r1, [sp, #8]
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true);
 8008c40:	2201      	movs	r2, #1
 8008c42:	a801      	add	r0, sp, #4
 8008c44:	f7ff fed4 	bl	80089f0 <LmHandlerSend>
 8008c48:	e7ee      	b.n	8008c28 <McpsIndication+0x70>
 8008c4a:	bf00      	nop
 8008c4c:	200000a4 	.word	0x200000a4
 8008c50:	2000076c 	.word	0x2000076c

08008c54 <LmHandlerGetTxDatarate>:
    if (txDatarate == NULL)
 8008c54:	b180      	cbz	r0, 8008c78 <LmHandlerGetTxDatarate+0x24>
{
 8008c56:	b510      	push	{r4, lr}
 8008c58:	b08a      	sub	sp, #40	; 0x28
 8008c5a:	4604      	mov	r4, r0
    mibGet.Type = MIB_CHANNELS_DATARATE;
 8008c5c:	231f      	movs	r3, #31
 8008c5e:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 8008c62:	a801      	add	r0, sp, #4
 8008c64:	f003 f820 	bl	800bca8 <LoRaMacMibGetRequestConfirm>
 8008c68:	b948      	cbnz	r0, 8008c7e <LmHandlerGetTxDatarate+0x2a>
    *txDatarate = mibGet.Param.ChannelsDatarate;
 8008c6a:	f99d 3008 	ldrsb.w	r3, [sp, #8]
 8008c6e:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 8008c70:	4a04      	ldr	r2, [pc, #16]	; (8008c84 <LmHandlerGetTxDatarate+0x30>)
 8008c72:	7113      	strb	r3, [r2, #4]
}
 8008c74:	b00a      	add	sp, #40	; 0x28
 8008c76:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8008c78:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008c7c:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8008c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8008c82:	e7f7      	b.n	8008c74 <LmHandlerGetTxDatarate+0x20>
 8008c84:	20000784 	.word	0x20000784

08008c88 <MlmeConfirm>:
{
 8008c88:	b510      	push	{r4, lr}
 8008c8a:	b08a      	sub	sp, #40	; 0x28
 8008c8c:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 0;
 8008c8e:	4824      	ldr	r0, [pc, #144]	; (8008d20 <MlmeConfirm+0x98>)
 8008c90:	2300      	movs	r3, #0
 8008c92:	7003      	strb	r3, [r0, #0]
    TxParams.Status = mlmeConfirm->Status;
 8008c94:	7863      	ldrb	r3, [r4, #1]
 8008c96:	7043      	strb	r3, [r0, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 8008c98:	4b22      	ldr	r3, [pc, #136]	; (8008d24 <MlmeConfirm+0x9c>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c9e:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 8008ca0:	4621      	mov	r1, r4
 8008ca2:	2002      	movs	r0, #2
 8008ca4:	f7ff fd32 	bl	800870c <LmHandlerPackagesNotify>
    switch( mlmeConfirm->MlmeRequest )
 8008ca8:	7823      	ldrb	r3, [r4, #0]
 8008caa:	2b04      	cmp	r3, #4
 8008cac:	d029      	beq.n	8008d02 <MlmeConfirm+0x7a>
 8008cae:	2b0c      	cmp	r3, #12
 8008cb0:	d02f      	beq.n	8008d12 <MlmeConfirm+0x8a>
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d001      	beq.n	8008cba <MlmeConfirm+0x32>
}
 8008cb6:	b00a      	add	sp, #40	; 0x28
 8008cb8:	bd10      	pop	{r4, pc}
            mibReq.Type = MIB_DEV_ADDR;
 8008cba:	2306      	movs	r3, #6
 8008cbc:	f88d 3004 	strb.w	r3, [sp, #4]
            LoRaMacMibGetRequestConfirm( &mibReq );
 8008cc0:	a801      	add	r0, sp, #4
 8008cc2:	f002 fff1 	bl	800bca8 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8008cc6:	9a02      	ldr	r2, [sp, #8]
 8008cc8:	4b17      	ldr	r3, [pc, #92]	; (8008d28 <MlmeConfirm+0xa0>)
 8008cca:	615a      	str	r2, [r3, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 8008ccc:	4817      	ldr	r0, [pc, #92]	; (8008d2c <MlmeConfirm+0xa4>)
 8008cce:	f7ff ffc1 	bl	8008c54 <LmHandlerGetTxDatarate>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8008cd2:	7863      	ldrb	r3, [r4, #1]
 8008cd4:	b16b      	cbz	r3, 8008cf2 <MlmeConfirm+0x6a>
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 8008cd6:	4b16      	ldr	r3, [pc, #88]	; (8008d30 <MlmeConfirm+0xa8>)
 8008cd8:	22ff      	movs	r2, #255	; 0xff
 8008cda:	715a      	strb	r2, [r3, #5]
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 8008cdc:	4b11      	ldr	r3, [pc, #68]	; (8008d24 <MlmeConfirm+0x9c>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce2:	4813      	ldr	r0, [pc, #76]	; (8008d30 <MlmeConfirm+0xa8>)
 8008ce4:	4798      	blx	r3
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8008ce6:	7863      	ldrb	r3, [r4, #1]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d1e4      	bne.n	8008cb6 <MlmeConfirm+0x2e>
                SecureElementPrintSessionKeys();
 8008cec:	f007 fd8a 	bl	8010804 <SecureElementPrintSessionKeys>
        break;
 8008cf0:	e7e1      	b.n	8008cb6 <MlmeConfirm+0x2e>
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8008cf2:	4b0f      	ldr	r3, [pc, #60]	; (8008d30 <MlmeConfirm+0xa8>)
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	715a      	strb	r2, [r3, #5]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 8008cf8:	4b0e      	ldr	r3, [pc, #56]	; (8008d34 <MlmeConfirm+0xac>)
 8008cfa:	7858      	ldrb	r0, [r3, #1]
 8008cfc:	f7ff fdbc 	bl	8008878 <LmHandlerRequestClass>
 8008d00:	e7ec      	b.n	8008cdc <MlmeConfirm+0x54>
            RxParams.LinkCheck = true;
 8008d02:	4b0d      	ldr	r3, [pc, #52]	; (8008d38 <MlmeConfirm+0xb0>)
 8008d04:	2201      	movs	r2, #1
 8008d06:	745a      	strb	r2, [r3, #17]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 8008d08:	7a22      	ldrb	r2, [r4, #8]
 8008d0a:	749a      	strb	r2, [r3, #18]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 8008d0c:	7a62      	ldrb	r2, [r4, #9]
 8008d0e:	74da      	strb	r2, [r3, #19]
        break;
 8008d10:	e7d1      	b.n	8008cb6 <MlmeConfirm+0x2e>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8008d12:	7863      	ldrb	r3, [r4, #1]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d0ce      	beq.n	8008cb6 <MlmeConfirm+0x2e>
                LmHandlerDeviceTimeReq( );
 8008d18:	f7ff fd7c 	bl	8008814 <LmHandlerDeviceTimeReq>
}
 8008d1c:	e7cb      	b.n	8008cb6 <MlmeConfirm+0x2e>
 8008d1e:	bf00      	nop
 8008d20:	200000b8 	.word	0x200000b8
 8008d24:	2000076c 	.word	0x2000076c
 8008d28:	20000078 	.word	0x20000078
 8008d2c:	20000094 	.word	0x20000094
 8008d30:	20000090 	.word	0x20000090
 8008d34:	20000784 	.word	0x20000784
 8008d38:	200000a4 	.word	0x200000a4

08008d3c <LmHandlerSetSystemMaxRxError>:
{
 8008d3c:	b500      	push	{lr}
 8008d3e:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8008d40:	2322      	movs	r3, #34	; 0x22
 8008d42:	f88d 3004 	strb.w	r3, [sp, #4]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 8008d46:	9002      	str	r0, [sp, #8]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8008d48:	a801      	add	r0, sp, #4
 8008d4a:	f003 f8e3 	bl	800bf14 <LoRaMacMibSetRequestConfirm>
 8008d4e:	b910      	cbnz	r0, 8008d56 <LmHandlerSetSystemMaxRxError+0x1a>
}
 8008d50:	b00b      	add	sp, #44	; 0x2c
 8008d52:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 8008d56:	f04f 30ff 	mov.w	r0, #4294967295
 8008d5a:	e7f9      	b.n	8008d50 <LmHandlerSetSystemMaxRxError+0x14>

08008d5c <LmHandlerConfigure>:
{
 8008d5c:	b570      	push	{r4, r5, r6, lr}
 8008d5e:	b090      	sub	sp, #64	; 0x40
 8008d60:	4601      	mov	r1, r0
    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 8008d62:	4c76      	ldr	r4, [pc, #472]	; (8008f3c <LmHandlerConfigure+0x1e0>)
 8008d64:	2214      	movs	r2, #20
 8008d66:	4620      	mov	r0, r4
 8008d68:	f009 fe80 	bl	8012a6c <UTIL_MEM_cpy_8>
    loraInfo = LoraInfo_GetPtr();
 8008d6c:	f7f9 ffae 	bl	8002ccc <LoraInfo_GetPtr>
    if (0U == ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 8008d70:	7822      	ldrb	r2, [r4, #0]
 8008d72:	2301      	movs	r3, #1
 8008d74:	4093      	lsls	r3, r2
 8008d76:	6841      	ldr	r1, [r0, #4]
 8008d78:	420b      	tst	r3, r1
 8008d7a:	d106      	bne.n	8008d8a <LmHandlerConfigure+0x2e>
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 8008d7c:	4b70      	ldr	r3, [pc, #448]	; (8008f40 <LmHandlerConfigure+0x1e4>)
 8008d7e:	2201      	movs	r2, #1
 8008d80:	2100      	movs	r1, #0
 8008d82:	4608      	mov	r0, r1
 8008d84:	f009 fd5c 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 8008d88:	e7fe      	b.n	8008d88 <LmHandlerConfigure+0x2c>
    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 8008d8a:	496e      	ldr	r1, [pc, #440]	; (8008f44 <LmHandlerConfigure+0x1e8>)
 8008d8c:	486e      	ldr	r0, [pc, #440]	; (8008f48 <LmHandlerConfigure+0x1ec>)
 8008d8e:	f002 fcfd 	bl	800b78c <LoRaMacInitialization>
 8008d92:	2800      	cmp	r0, #0
 8008d94:	f040 80cf 	bne.w	8008f36 <LmHandlerConfigure+0x1da>
    mibReq.Type = MIB_NVM_CTXS;
 8008d98:	2326      	movs	r3, #38	; 0x26
 8008d9a:	f88d 301c 	strb.w	r3, [sp, #28]
    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 8008d9e:	a807      	add	r0, sp, #28
 8008da0:	f003 f8b8 	bl	800bf14 <LoRaMacMibSetRequestConfirm>
 8008da4:	2800      	cmp	r0, #0
 8008da6:	f040 8087 	bne.w	8008eb8 <LmHandlerConfigure+0x15c>
        CtxRestoreDone = true;
 8008daa:	4b68      	ldr	r3, [pc, #416]	; (8008f4c <LmHandlerConfigure+0x1f0>)
 8008dac:	2201      	movs	r2, #1
 8008dae:	701a      	strb	r2, [r3, #0]
    if (CtxRestoreDone == true)
 8008db0:	4b66      	ldr	r3, [pc, #408]	; (8008f4c <LmHandlerConfigure+0x1f0>)
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	f000 80a8 	beq.w	8008f0a <LmHandlerConfigure+0x1ae>
        if ( LmHandlerCallbacks->OnNvmDataChange != NULL )
 8008dba:	4b65      	ldr	r3, [pc, #404]	; (8008f50 <LmHandlerConfigure+0x1f4>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	69db      	ldr	r3, [r3, #28]
 8008dc0:	b10b      	cbz	r3, 8008dc6 <LmHandlerConfigure+0x6a>
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 8008dc2:	2000      	movs	r0, #0
 8008dc4:	4798      	blx	r3
        mibReq.Type = MIB_DEV_ADDR;
 8008dc6:	2306      	movs	r3, #6
 8008dc8:	f88d 301c 	strb.w	r3, [sp, #28]
        LoRaMacMibGetRequestConfirm( &mibReq );
 8008dcc:	a807      	add	r0, sp, #28
 8008dce:	f002 ff6b 	bl	800bca8 <LoRaMacMibGetRequestConfirm>
        CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8008dd2:	9a08      	ldr	r2, [sp, #32]
 8008dd4:	4b5f      	ldr	r3, [pc, #380]	; (8008f54 <LmHandlerConfigure+0x1f8>)
 8008dd6:	615a      	str	r2, [r3, #20]
        mibReq.Type = MIB_NVM_CTXS;
 8008dd8:	2326      	movs	r3, #38	; 0x26
 8008dda:	f88d 301c 	strb.w	r3, [sp, #28]
        LoRaMacMibGetRequestConfirm( &mibReq );
 8008dde:	a807      	add	r0, sp, #28
 8008de0:	f002 ff62 	bl	800bca8 <LoRaMacMibGetRequestConfirm>
        LmHandlerParams.ActiveRegion = mibReq.Param.Contexts->MacGroup2.Region;
 8008de4:	9a08      	ldr	r2, [sp, #32]
 8008de6:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
 8008dea:	4b54      	ldr	r3, [pc, #336]	; (8008f3c <LmHandlerConfigure+0x1e0>)
 8008dec:	7019      	strb	r1, [r3, #0]
        LmHandlerParams.DefaultClass = mibReq.Param.Contexts->MacGroup2.DeviceClass;
 8008dee:	f892 1104 	ldrb.w	r1, [r2, #260]	; 0x104
 8008df2:	7059      	strb	r1, [r3, #1]
        LmHandlerParams.AdrEnable = mibReq.Param.Contexts->MacGroup2.AdrCtrlOn;
 8008df4:	f892 2106 	ldrb.w	r2, [r2, #262]	; 0x106
 8008df8:	709a      	strb	r2, [r3, #2]
    mibReq.Type = MIB_DEV_EUI;
 8008dfa:	2502      	movs	r5, #2
 8008dfc:	f88d 501c 	strb.w	r5, [sp, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8008e00:	a807      	add	r0, sp, #28
 8008e02:	f002 ff51 	bl	800bca8 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 8008e06:	4c53      	ldr	r4, [pc, #332]	; (8008f54 <LmHandlerConfigure+0x1f8>)
 8008e08:	2208      	movs	r2, #8
 8008e0a:	9908      	ldr	r1, [sp, #32]
 8008e0c:	4620      	mov	r0, r4
 8008e0e:	f007 fe6e 	bl	8010aee <memcpy1>
    mibReq.Type = MIB_JOIN_EUI;
 8008e12:	2303      	movs	r3, #3
 8008e14:	f88d 301c 	strb.w	r3, [sp, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8008e18:	a807      	add	r0, sp, #28
 8008e1a:	f002 ff45 	bl	800bca8 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 8008e1e:	2208      	movs	r2, #8
 8008e20:	9908      	ldr	r1, [sp, #32]
 8008e22:	18a0      	adds	r0, r4, r2
 8008e24:	f007 fe63 	bl	8010aee <memcpy1>
    SecureElementPrintKeys();
 8008e28:	f007 fc8c 	bl	8010744 <SecureElementPrintKeys>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 8008e2c:	7de3      	ldrb	r3, [r4, #23]
 8008e2e:	7da2      	ldrb	r2, [r4, #22]
 8008e30:	7d61      	ldrb	r1, [r4, #21]
 8008e32:	7d20      	ldrb	r0, [r4, #20]
 8008e34:	9003      	str	r0, [sp, #12]
 8008e36:	9102      	str	r1, [sp, #8]
 8008e38:	9201      	str	r2, [sp, #4]
 8008e3a:	9300      	str	r3, [sp, #0]
 8008e3c:	4b46      	ldr	r3, [pc, #280]	; (8008f58 <LmHandlerConfigure+0x1fc>)
 8008e3e:	2200      	movs	r2, #0
 8008e40:	4611      	mov	r1, r2
 8008e42:	4628      	mov	r0, r5
 8008e44:	f009 fcfc 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
    mibReq.Type = MIB_PUBLIC_NETWORK;
 8008e48:	260f      	movs	r6, #15
 8008e4a:	f88d 601c 	strb.w	r6, [sp, #28]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	f88d 3020 	strb.w	r3, [sp, #32]
    LoRaMacMibSetRequestConfirm(&mibReq);
 8008e54:	a807      	add	r0, sp, #28
 8008e56:	f003 f85d 	bl	800bf14 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_REPEATER_SUPPORT;
 8008e5a:	2310      	movs	r3, #16
 8008e5c:	f88d 301c 	strb.w	r3, [sp, #28]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 8008e60:	2500      	movs	r5, #0
 8008e62:	f88d 5020 	strb.w	r5, [sp, #32]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8008e66:	a807      	add	r0, sp, #28
 8008e68:	f003 f854 	bl	800bf14 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ADR;
 8008e6c:	2304      	movs	r3, #4
 8008e6e:	f88d 301c 	strb.w	r3, [sp, #28]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 8008e72:	4c32      	ldr	r4, [pc, #200]	; (8008f3c <LmHandlerConfigure+0x1e0>)
 8008e74:	78a3      	ldrb	r3, [r4, #2]
 8008e76:	f88d 3020 	strb.w	r3, [sp, #32]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8008e7a:	a807      	add	r0, sp, #28
 8008e7c:	f003 f84a 	bl	800bf14 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_RXB_C_TIMEOUT;
 8008e80:	2337      	movs	r3, #55	; 0x37
 8008e82:	f88d 301c 	strb.w	r3, [sp, #28]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 8008e86:	6923      	ldr	r3, [r4, #16]
 8008e88:	9308      	str	r3, [sp, #32]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8008e8a:	a807      	add	r0, sp, #28
 8008e8c:	f003 f842 	bl	800bf14 <LoRaMacMibSetRequestConfirm>
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8008e90:	f88d 6014 	strb.w	r6, [sp, #20]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 8008e94:	a905      	add	r1, sp, #20
 8008e96:	7820      	ldrb	r0, [r4, #0]
 8008e98:	f004 fcf9 	bl	800d88e <RegionGetPhyParam>
 8008e9c:	9004      	str	r0, [sp, #16]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 8008e9e:	1b43      	subs	r3, r0, r5
 8008ea0:	bf18      	it	ne
 8008ea2:	2301      	movne	r3, #1
 8008ea4:	71a3      	strb	r3, [r4, #6]
    LmHandlerSetSystemMaxRxError( 20 );
 8008ea6:	2014      	movs	r0, #20
 8008ea8:	f7ff ff48 	bl	8008d3c <LmHandlerSetSystemMaxRxError>
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 8008eac:	79a0      	ldrb	r0, [r4, #6]
 8008eae:	f003 fc4f 	bl	800c750 <LoRaMacTestSetDutyCycleOn>
    return LORAMAC_HANDLER_SUCCESS;
 8008eb2:	4628      	mov	r0, r5
}
 8008eb4:	b010      	add	sp, #64	; 0x40
 8008eb6:	bd70      	pop	{r4, r5, r6, pc}
        mibReq.Type = MIB_NVM_BKP_CTXS;
 8008eb8:	2327      	movs	r3, #39	; 0x27
 8008eba:	f88d 301c 	strb.w	r3, [sp, #28]
        if (LmHandlerCallbacks->OnRestoreContextRequest != NULL)
 8008ebe:	4b24      	ldr	r3, [pc, #144]	; (8008f50 <LmHandlerConfigure+0x1f4>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	691b      	ldr	r3, [r3, #16]
 8008ec4:	b14b      	cbz	r3, 8008eda <LmHandlerConfigure+0x17e>
            LoRaMacMibGetRequestConfirm( &mibReq );
 8008ec6:	a807      	add	r0, sp, #28
 8008ec8:	f002 feee 	bl	800bca8 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest(mibReq.Param.BackupContexts, sizeof(LoRaMacNvmData_t));
 8008ecc:	4b20      	ldr	r3, [pc, #128]	; (8008f50 <LmHandlerConfigure+0x1f4>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	691b      	ldr	r3, [r3, #16]
 8008ed2:	f44f 61e7 	mov.w	r1, #1848	; 0x738
 8008ed6:	9808      	ldr	r0, [sp, #32]
 8008ed8:	4798      	blx	r3
        mibReq.Type = MIB_NVM_CTXS;
 8008eda:	2326      	movs	r3, #38	; 0x26
 8008edc:	f88d 301c 	strb.w	r3, [sp, #28]
        if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 8008ee0:	a807      	add	r0, sp, #28
 8008ee2:	f003 f817 	bl	800bf14 <LoRaMacMibSetRequestConfirm>
 8008ee6:	2800      	cmp	r0, #0
 8008ee8:	f47f af62 	bne.w	8008db0 <LmHandlerConfigure+0x54>
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 8008eec:	2301      	movs	r3, #1
 8008eee:	f88d 301c 	strb.w	r3, [sp, #28]
            LoRaMacMibGetRequestConfirm( &mibReq );
 8008ef2:	a807      	add	r0, sp, #28
 8008ef4:	f002 fed8 	bl	800bca8 <LoRaMacMibGetRequestConfirm>
            if (mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE)
 8008ef8:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	f43f af57 	beq.w	8008db0 <LmHandlerConfigure+0x54>
                CtxRestoreDone = true;
 8008f02:	4b12      	ldr	r3, [pc, #72]	; (8008f4c <LmHandlerConfigure+0x1f0>)
 8008f04:	2201      	movs	r2, #1
 8008f06:	701a      	strb	r2, [r3, #0]
 8008f08:	e752      	b.n	8008db0 <LmHandlerConfigure+0x54>
        mibReq.Type = MIB_NET_ID;
 8008f0a:	2305      	movs	r3, #5
 8008f0c:	f88d 301c 	strb.w	r3, [sp, #28]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 8008f10:	2300      	movs	r3, #0
 8008f12:	9308      	str	r3, [sp, #32]
        LoRaMacMibSetRequestConfirm(&mibReq);
 8008f14:	a807      	add	r0, sp, #28
 8008f16:	f002 fffd 	bl	800bf14 <LoRaMacMibSetRequestConfirm>
        CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 8008f1a:	4b0d      	ldr	r3, [pc, #52]	; (8008f50 <LmHandlerConfigure+0x1f4>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	68db      	ldr	r3, [r3, #12]
 8008f20:	4798      	blx	r3
 8008f22:	4b0c      	ldr	r3, [pc, #48]	; (8008f54 <LmHandlerConfigure+0x1f8>)
 8008f24:	6158      	str	r0, [r3, #20]
        mibReq.Type = MIB_DEV_ADDR;
 8008f26:	2306      	movs	r3, #6
 8008f28:	f88d 301c 	strb.w	r3, [sp, #28]
        mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 8008f2c:	9008      	str	r0, [sp, #32]
        LoRaMacMibSetRequestConfirm(&mibReq);
 8008f2e:	a807      	add	r0, sp, #28
 8008f30:	f002 fff0 	bl	800bf14 <LoRaMacMibSetRequestConfirm>
 8008f34:	e761      	b.n	8008dfa <LmHandlerConfigure+0x9e>
        return LORAMAC_HANDLER_ERROR;
 8008f36:	f04f 30ff 	mov.w	r0, #4294967295
 8008f3a:	e7bb      	b.n	8008eb4 <LmHandlerConfigure+0x158>
 8008f3c:	20000784 	.word	0x20000784
 8008f40:	08014554 	.word	0x08014554
 8008f44:	20000798 	.word	0x20000798
 8008f48:	200007ac 	.word	0x200007ac
 8008f4c:	20000766 	.word	0x20000766
 8008f50:	2000076c 	.word	0x2000076c
 8008f54:	20000078 	.word	0x20000078
 8008f58:	080145a0 	.word	0x080145a0

08008f5c <LmHandlerPackageRegister>:
    switch( id )
 8008f5c:	b9e0      	cbnz	r0, 8008f98 <LmHandlerPackageRegister+0x3c>
{
 8008f5e:	b538      	push	{r3, r4, r5, lr}
 8008f60:	460c      	mov	r4, r1
 8008f62:	4605      	mov	r5, r0
            package = LmhpCompliancePackageFactory( );
 8008f64:	f000 fa82 	bl	800946c <LmhpCompliancePackageFactory>
    if( package != NULL )
 8008f68:	b198      	cbz	r0, 8008f92 <LmHandlerPackageRegister+0x36>
        LmHandlerPackages[id] = package;
 8008f6a:	4a0d      	ldr	r2, [pc, #52]	; (8008fa0 <LmHandlerPackageRegister+0x44>)
 8008f6c:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 8008f70:	4a0c      	ldr	r2, [pc, #48]	; (8008fa4 <LmHandlerPackageRegister+0x48>)
 8008f72:	6282      	str	r2, [r0, #40]	; 0x28
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 8008f74:	4a0c      	ldr	r2, [pc, #48]	; (8008fa8 <LmHandlerPackageRegister+0x4c>)
 8008f76:	62c2      	str	r2, [r0, #44]	; 0x2c
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 8008f78:	4a0c      	ldr	r2, [pc, #48]	; (8008fac <LmHandlerPackageRegister+0x50>)
 8008f7a:	6302      	str	r2, [r0, #48]	; 0x30
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 8008f7c:	4a0c      	ldr	r2, [pc, #48]	; (8008fb0 <LmHandlerPackageRegister+0x54>)
 8008f7e:	6812      	ldr	r2, [r2, #0]
 8008f80:	6992      	ldr	r2, [r2, #24]
 8008f82:	6142      	str	r2, [r0, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 8008f84:	6843      	ldr	r3, [r0, #4]
 8008f86:	22f2      	movs	r2, #242	; 0xf2
 8008f88:	490a      	ldr	r1, [pc, #40]	; (8008fb4 <LmHandlerPackageRegister+0x58>)
 8008f8a:	4620      	mov	r0, r4
 8008f8c:	4798      	blx	r3
        return LORAMAC_HANDLER_SUCCESS;
 8008f8e:	2000      	movs	r0, #0
}
 8008f90:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_HANDLER_ERROR;
 8008f92:	f04f 30ff 	mov.w	r0, #4294967295
 8008f96:	e7fb      	b.n	8008f90 <LmHandlerPackageRegister+0x34>
 8008f98:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008f9c:	4770      	bx	lr
 8008f9e:	bf00      	nop
 8008fa0:	20000770 	.word	0x20000770
 8008fa4:	08008931 	.word	0x08008931
 8008fa8:	080089f1 	.word	0x080089f1
 8008fac:	08008815 	.word	0x08008815
 8008fb0:	2000076c 	.word	0x2000076c
 8008fb4:	20000674 	.word	0x20000674

08008fb8 <LmHandlerInit>:
{
 8008fb8:	b508      	push	{r3, lr}
    LmHandlerCallbacks = handlerCallbacks;
 8008fba:	4b0f      	ldr	r3, [pc, #60]	; (8008ff8 <LmHandlerInit+0x40>)
 8008fbc:	6018      	str	r0, [r3, #0]
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 8008fbe:	4b0f      	ldr	r3, [pc, #60]	; (8008ffc <LmHandlerInit+0x44>)
 8008fc0:	4a0f      	ldr	r2, [pc, #60]	; (8009000 <LmHandlerInit+0x48>)
 8008fc2:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 8008fc4:	4a0f      	ldr	r2, [pc, #60]	; (8009004 <LmHandlerInit+0x4c>)
 8008fc6:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 8008fc8:	4a0f      	ldr	r2, [pc, #60]	; (8009008 <LmHandlerInit+0x50>)
 8008fca:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 8008fcc:	4a0f      	ldr	r2, [pc, #60]	; (800900c <LmHandlerInit+0x54>)
 8008fce:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 8008fd0:	6802      	ldr	r2, [r0, #0]
 8008fd2:	4b0f      	ldr	r3, [pc, #60]	; (8009010 <LmHandlerInit+0x58>)
 8008fd4:	601a      	str	r2, [r3, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 8008fd6:	6842      	ldr	r2, [r0, #4]
 8008fd8:	605a      	str	r2, [r3, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 8008fda:	6882      	ldr	r2, [r0, #8]
 8008fdc:	609a      	str	r2, [r3, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 8008fde:	4a0d      	ldr	r2, [pc, #52]	; (8009014 <LmHandlerInit+0x5c>)
 8008fe0:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 8008fe2:	6982      	ldr	r2, [r0, #24]
 8008fe4:	611a      	str	r2, [r3, #16]
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 8008fe6:	490c      	ldr	r1, [pc, #48]	; (8009018 <LmHandlerInit+0x60>)
 8008fe8:	2000      	movs	r0, #0
 8008fea:	f7ff ffb7 	bl	8008f5c <LmHandlerPackageRegister>
 8008fee:	b900      	cbnz	r0, 8008ff2 <LmHandlerInit+0x3a>
}
 8008ff0:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_ERROR;
 8008ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ff6:	e7fb      	b.n	8008ff0 <LmHandlerInit+0x38>
 8008ff8:	2000076c 	.word	0x2000076c
 8008ffc:	200007ac 	.word	0x200007ac
 8009000:	08008799 	.word	0x08008799
 8009004:	08008bb9 	.word	0x08008bb9
 8009008:	08008c89 	.word	0x08008c89
 800900c:	08008b09 	.word	0x08008b09
 8009010:	20000798 	.word	0x20000798
 8009014:	0800d86d 	.word	0x0800d86d
 8009018:	20000098 	.word	0x20000098

0800901c <LmHandlerGetVersion>:
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion(LmHandlerVersionType_t lmhType, uint32_t *featureVersion)
{
    if (featureVersion == NULL)
 800901c:	b161      	cbz	r1, 8009038 <LmHandlerGetVersion+0x1c>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    switch(lmhType)
 800901e:	b118      	cbz	r0, 8009028 <LmHandlerGetVersion+0xc>
 8009020:	2801      	cmp	r0, #1
 8009022:	d005      	beq.n	8009030 <LmHandlerGetVersion+0x14>
 8009024:	2000      	movs	r0, #0
 8009026:	4770      	bx	lr
    {
        case LORAMAC_HANDLER_L2_VERSION:
            *featureVersion = LORAMAC_VERSION;
 8009028:	4a05      	ldr	r2, [pc, #20]	; (8009040 <LmHandlerGetVersion+0x24>)
 800902a:	600a      	str	r2, [r1, #0]
            break;
        default:
          break;
    }

    return LORAMAC_HANDLER_SUCCESS;
 800902c:	2000      	movs	r0, #0
            break;
 800902e:	4770      	bx	lr
            *featureVersion = REGION_VERSION;
 8009030:	4a04      	ldr	r2, [pc, #16]	; (8009044 <LmHandlerGetVersion+0x28>)
 8009032:	600a      	str	r2, [r1, #0]
    return LORAMAC_HANDLER_SUCCESS;
 8009034:	2000      	movs	r0, #0
            break;
 8009036:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8009038:	f04f 30ff 	mov.w	r0, #4294967295
}
 800903c:	4770      	bx	lr
 800903e:	bf00      	nop
 8009040:	01000300 	.word	0x01000300
 8009044:	01010003 	.word	0x01010003

08009048 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop(void)
{
 8009048:	b508      	push	{r3, lr}
    if (LoRaMacDeInitialization() == LORAMAC_STATUS_OK)
 800904a:	f003 fb95 	bl	800c778 <LoRaMacDeInitialization>
 800904e:	b900      	cbnz	r0, 8009052 <LmHandlerStop+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 8009050:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 8009052:	f06f 0001 	mvn.w	r0, #1
 8009056:	e7fb      	b.n	8009050 <LmHandlerStop+0x8>

08009058 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt(void)
{
 8009058:	b508      	push	{r3, lr}
    if (LoRaMacHalt() == LORAMAC_STATUS_OK)
 800905a:	f002 fd8d 	bl	800bb78 <LoRaMacHalt>
 800905e:	b900      	cbnz	r0, 8009062 <LmHandlerHalt+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 8009060:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 8009062:	f06f 0001 	mvn.w	r0, #1
 8009066:	e7fb      	b.n	8009060 <LmHandlerHalt+0x8>

08009068 <LmHandlerNvmDataStore>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 8009068:	b510      	push	{r4, lr}
 800906a:	b08a      	sub	sp, #40	; 0x28
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
    int32_t status = NVM_DATA_OK;

    lmhStatus = LmHandlerHalt();
 800906c:	f7ff fff4 	bl	8009058 <LmHandlerHalt>

    if (lmhStatus == LORAMAC_HANDLER_SUCCESS)
 8009070:	4604      	mov	r4, r0
 8009072:	b148      	cbz	r0, 8009088 <LmHandlerNvmDataStore+0x20>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
        }
    }

    if ((lmhStatus == LORAMAC_HANDLER_SUCCESS) && (LmHandlerCallbacks->OnNvmDataChange != NULL ))
 8009074:	b92c      	cbnz	r4, 8009082 <LmHandlerNvmDataStore+0x1a>
 8009076:	4b18      	ldr	r3, [pc, #96]	; (80090d8 <LmHandlerNvmDataStore+0x70>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	69db      	ldr	r3, [r3, #28]
 800907c:	b10b      	cbz	r3, 8009082 <LmHandlerNvmDataStore+0x1a>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800907e:	2001      	movs	r0, #1
 8009080:	4798      	blx	r3
    }

    return lmhStatus;
}
 8009082:	4620      	mov	r0, r4
 8009084:	b00a      	add	sp, #40	; 0x28
 8009086:	bd10      	pop	{r4, pc}
        status = NvmDataMgmtStoreBegin();
 8009088:	f004 fbf1 	bl	800d86e <NvmDataMgmtStoreBegin>
        if (status == NVM_DATA_NO_UPDATED_DATA)
 800908c:	f110 0f02 	cmn.w	r0, #2
 8009090:	d012      	beq.n	80090b8 <LmHandlerNvmDataStore+0x50>
        else if (( status != NVM_DATA_OK ) || (LmHandlerCallbacks->OnStoreContextRequest == NULL))
 8009092:	b9d0      	cbnz	r0, 80090ca <LmHandlerNvmDataStore+0x62>
 8009094:	4b10      	ldr	r3, [pc, #64]	; (80090d8 <LmHandlerNvmDataStore+0x70>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	695b      	ldr	r3, [r3, #20]
 800909a:	b1cb      	cbz	r3, 80090d0 <LmHandlerNvmDataStore+0x68>
          mibReq.Type = MIB_NVM_CTXS;
 800909c:	2326      	movs	r3, #38	; 0x26
 800909e:	f88d 3004 	strb.w	r3, [sp, #4]
          LoRaMacMibGetRequestConfirm( &mibReq );
 80090a2:	a801      	add	r0, sp, #4
 80090a4:	f002 fe00 	bl	800bca8 <LoRaMacMibGetRequestConfirm>
          LmHandlerCallbacks->OnStoreContextRequest(nvm, nvm_size);
 80090a8:	4b0b      	ldr	r3, [pc, #44]	; (80090d8 <LmHandlerNvmDataStore+0x70>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	695b      	ldr	r3, [r3, #20]
 80090ae:	f44f 61e7 	mov.w	r1, #1848	; 0x738
 80090b2:	9802      	ldr	r0, [sp, #8]
 80090b4:	4798      	blx	r3
 80090b6:	e001      	b.n	80090bc <LmHandlerNvmDataStore+0x54>
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 80090b8:	f06f 0407 	mvn.w	r4, #7
        if ( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 80090bc:	f004 fbda 	bl	800d874 <NvmDataMgmtStoreEnd>
 80090c0:	2800      	cmp	r0, #0
 80090c2:	d0d7      	beq.n	8009074 <LmHandlerNvmDataStore+0xc>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 80090c4:	f04f 34ff 	mov.w	r4, #4294967295
 80090c8:	e7db      	b.n	8009082 <LmHandlerNvmDataStore+0x1a>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 80090ca:	f04f 34ff 	mov.w	r4, #4294967295
 80090ce:	e7f5      	b.n	80090bc <LmHandlerNvmDataStore+0x54>
 80090d0:	f04f 34ff 	mov.w	r4, #4294967295
 80090d4:	e7f2      	b.n	80090bc <LmHandlerNvmDataStore+0x54>
 80090d6:	bf00      	nop
 80090d8:	2000076c 	.word	0x2000076c

080090dc <LmhpComplianceInit>:
    return &LmhpCompliancePackage;
}

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 80090dc:	4603      	mov	r3, r0
 80090de:	b140      	cbz	r0, 80090f2 <LmhpComplianceInit+0x16>
 80090e0:	b139      	cbz	r1, 80090f2 <LmhpComplianceInit+0x16>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 80090e2:	4807      	ldr	r0, [pc, #28]	; (8009100 <LmhpComplianceInit+0x24>)
 80090e4:	6003      	str	r3, [r0, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 80090e6:	4b07      	ldr	r3, [pc, #28]	; (8009104 <LmhpComplianceInit+0x28>)
 80090e8:	6099      	str	r1, [r3, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 80090ea:	715a      	strb	r2, [r3, #5]
        ComplianceTestState.Initialized = true;
 80090ec:	2201      	movs	r2, #1
 80090ee:	701a      	strb	r2, [r3, #0]
 80090f0:	4770      	bx	lr
    }
    else
    {
        LmhpComplianceParams = NULL;
 80090f2:	2300      	movs	r3, #0
 80090f4:	4a02      	ldr	r2, [pc, #8]	; (8009100 <LmhpComplianceInit+0x24>)
 80090f6:	6013      	str	r3, [r2, #0]
        ComplianceTestState.Initialized = false;
 80090f8:	4a02      	ldr	r2, [pc, #8]	; (8009104 <LmhpComplianceInit+0x28>)
 80090fa:	7013      	strb	r3, [r2, #0]
    }
}
 80090fc:	4770      	bx	lr
 80090fe:	bf00      	nop
 8009100:	200007e8 	.word	0x200007e8
 8009104:	200007bc 	.word	0x200007bc

08009108 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
    return ComplianceTestState.Initialized;
}
 8009108:	4b01      	ldr	r3, [pc, #4]	; (8009110 <LmhpComplianceIsInitialized+0x8>)
 800910a:	7818      	ldrb	r0, [r3, #0]
 800910c:	4770      	bx	lr
 800910e:	bf00      	nop
 8009110:	200007bc 	.word	0x200007bc

08009114 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
    if( ComplianceTestState.Initialized == false )
 8009114:	4b02      	ldr	r3, [pc, #8]	; (8009120 <LmhpComplianceIsRunning+0xc>)
 8009116:	7818      	ldrb	r0, [r3, #0]
 8009118:	b100      	cbz	r0, 800911c <LmhpComplianceIsRunning+0x8>
    {
        return false;
    }

    return ComplianceTestState.IsRunning;
 800911a:	7858      	ldrb	r0, [r3, #1]
}
 800911c:	4770      	bx	lr
 800911e:	bf00      	nop
 8009120:	200007bc 	.word	0x200007bc

08009124 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
    if (ComplianceTestState.Initialized == false)
 8009124:	4b08      	ldr	r3, [pc, #32]	; (8009148 <LmhpComplianceOnMcpsConfirm+0x24>)
 8009126:	781b      	ldrb	r3, [r3, #0]
 8009128:	b12b      	cbz	r3, 8009136 <LmhpComplianceOnMcpsConfirm+0x12>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800912a:	4b07      	ldr	r3, [pc, #28]	; (8009148 <LmhpComplianceOnMcpsConfirm+0x24>)
 800912c:	785b      	ldrb	r3, [r3, #1]
 800912e:	b113      	cbz	r3, 8009136 <LmhpComplianceOnMcpsConfirm+0x12>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 8009130:	7803      	ldrb	r3, [r0, #0]
    if ((ComplianceTestState.IsRunning == true) &&
 8009132:	2b01      	cmp	r3, #1
 8009134:	d000      	beq.n	8009138 <LmhpComplianceOnMcpsConfirm+0x14>
        (mcpsConfirm->AckReceived != 0))
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
    }
}
 8009136:	4770      	bx	lr
        (mcpsConfirm->AckReceived != 0))
 8009138:	7903      	ldrb	r3, [r0, #4]
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800913a:	2b00      	cmp	r3, #0
 800913c:	d0fb      	beq.n	8009136 <LmhpComplianceOnMcpsConfirm+0x12>
        ComplianceTestState.DownLinkCounter++;
 800913e:	4a02      	ldr	r2, [pc, #8]	; (8009148 <LmhpComplianceOnMcpsConfirm+0x24>)
 8009140:	8993      	ldrh	r3, [r2, #12]
 8009142:	3301      	adds	r3, #1
 8009144:	8193      	strh	r3, [r2, #12]
 8009146:	e7f6      	b.n	8009136 <LmhpComplianceOnMcpsConfirm+0x12>
 8009148:	200007bc 	.word	0x200007bc

0800914c <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
    if( ComplianceTestState.Initialized == false )
 800914c:	4b08      	ldr	r3, [pc, #32]	; (8009170 <LmhpComplianceOnMlmeConfirm+0x24>)
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	b12b      	cbz	r3, 800915e <LmhpComplianceOnMlmeConfirm+0x12>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 8009152:	4b07      	ldr	r3, [pc, #28]	; (8009170 <LmhpComplianceOnMlmeConfirm+0x24>)
 8009154:	785b      	ldrb	r3, [r3, #1]
 8009156:	b113      	cbz	r3, 800915e <LmhpComplianceOnMlmeConfirm+0x12>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 8009158:	7803      	ldrb	r3, [r0, #0]
 800915a:	2b04      	cmp	r3, #4
 800915c:	d000      	beq.n	8009160 <LmhpComplianceOnMlmeConfirm+0x14>
    {
        ComplianceTestState.LinkCheck = true;
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
    }
}
 800915e:	4770      	bx	lr
        ComplianceTestState.LinkCheck = true;
 8009160:	4b03      	ldr	r3, [pc, #12]	; (8009170 <LmhpComplianceOnMlmeConfirm+0x24>)
 8009162:	2201      	movs	r2, #1
 8009164:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 8009166:	7a02      	ldrb	r2, [r0, #8]
 8009168:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800916a:	7a42      	ldrb	r2, [r0, #9]
 800916c:	741a      	strb	r2, [r3, #16]
 800916e:	e7f6      	b.n	800915e <LmhpComplianceOnMlmeConfirm+0x12>
 8009170:	200007bc 	.word	0x200007bc

08009174 <LmhpComplianceProcess>:
}

static void LmhpComplianceProcess( void )
{
    /* Nothing to process */
}
 8009174:	4770      	bx	lr
	...

08009178 <LmhpComplianceTxProcess>:
    if( ComplianceTestState.Initialized == false )
 8009178:	4b23      	ldr	r3, [pc, #140]	; (8009208 <LmhpComplianceTxProcess+0x90>)
 800917a:	781b      	ldrb	r3, [r3, #0]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d03d      	beq.n	80091fc <LmhpComplianceTxProcess+0x84>
    if( ComplianceTestState.IsRunning == false )
 8009180:	4b21      	ldr	r3, [pc, #132]	; (8009208 <LmhpComplianceTxProcess+0x90>)
 8009182:	785b      	ldrb	r3, [r3, #1]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d03c      	beq.n	8009202 <LmhpComplianceTxProcess+0x8a>
{
 8009188:	b510      	push	{r4, lr}
 800918a:	b082      	sub	sp, #8
    if( ComplianceTestState.LinkCheck == true )
 800918c:	4b1e      	ldr	r3, [pc, #120]	; (8009208 <LmhpComplianceTxProcess+0x90>)
 800918e:	7b9b      	ldrb	r3, [r3, #14]
 8009190:	b30b      	cbz	r3, 80091d6 <LmhpComplianceTxProcess+0x5e>
        ComplianceTestState.LinkCheck = false;
 8009192:	4b1d      	ldr	r3, [pc, #116]	; (8009208 <LmhpComplianceTxProcess+0x90>)
 8009194:	2200      	movs	r2, #0
 8009196:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 8009198:	2203      	movs	r2, #3
 800919a:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 800919c:	689a      	ldr	r2, [r3, #8]
 800919e:	2105      	movs	r1, #5
 80091a0:	7011      	strb	r1, [r2, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 80091a2:	7bd9      	ldrb	r1, [r3, #15]
 80091a4:	7051      	strb	r1, [r2, #1]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 80091a6:	7c19      	ldrb	r1, [r3, #16]
 80091a8:	7091      	strb	r1, [r2, #2]
        ComplianceTestState.State = 1;
 80091aa:	2201      	movs	r2, #1
 80091ac:	709a      	strb	r2, [r3, #2]
    LmHandlerAppData_t appData =
 80091ae:	23e0      	movs	r3, #224	; 0xe0
 80091b0:	f88d 3000 	strb.w	r3, [sp]
        .BufferSize = ComplianceTestState.DataBufferSize,
 80091b4:	4c14      	ldr	r4, [pc, #80]	; (8009208 <LmhpComplianceTxProcess+0x90>)
 80091b6:	79a3      	ldrb	r3, [r4, #6]
    LmHandlerAppData_t appData =
 80091b8:	f88d 3001 	strb.w	r3, [sp, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 80091bc:	68a3      	ldr	r3, [r4, #8]
    LmHandlerAppData_t appData =
 80091be:	9301      	str	r3, [sp, #4]
    TimerStart( &ComplianceTxNextPacketTimer );
 80091c0:	4812      	ldr	r0, [pc, #72]	; (800920c <LmhpComplianceTxProcess+0x94>)
 80091c2:	f009 feeb 	bl	8012f9c <UTIL_TIMER_Start>
    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, true );
 80091c6:	4b12      	ldr	r3, [pc, #72]	; (8009210 <LmhpComplianceTxProcess+0x98>)
 80091c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ca:	2201      	movs	r2, #1
 80091cc:	78e1      	ldrb	r1, [r4, #3]
 80091ce:	4668      	mov	r0, sp
 80091d0:	4798      	blx	r3
}
 80091d2:	b002      	add	sp, #8
 80091d4:	bd10      	pop	{r4, pc}
        switch( ComplianceTestState.State )
 80091d6:	4b0c      	ldr	r3, [pc, #48]	; (8009208 <LmhpComplianceTxProcess+0x90>)
 80091d8:	789b      	ldrb	r3, [r3, #2]
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d005      	beq.n	80091ea <LmhpComplianceTxProcess+0x72>
 80091de:	2b04      	cmp	r3, #4
 80091e0:	d1e5      	bne.n	80091ae <LmhpComplianceTxProcess+0x36>
            ComplianceTestState.State = 1;
 80091e2:	4b09      	ldr	r3, [pc, #36]	; (8009208 <LmhpComplianceTxProcess+0x90>)
 80091e4:	2201      	movs	r2, #1
 80091e6:	709a      	strb	r2, [r3, #2]
            break;
 80091e8:	e7e1      	b.n	80091ae <LmhpComplianceTxProcess+0x36>
            ComplianceTestState.DataBufferSize = 2;
 80091ea:	4b07      	ldr	r3, [pc, #28]	; (8009208 <LmhpComplianceTxProcess+0x90>)
 80091ec:	2202      	movs	r2, #2
 80091ee:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 80091f0:	899a      	ldrh	r2, [r3, #12]
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	0a11      	lsrs	r1, r2, #8
 80091f6:	7019      	strb	r1, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 80091f8:	705a      	strb	r2, [r3, #1]
            break;
 80091fa:	e7d8      	b.n	80091ae <LmhpComplianceTxProcess+0x36>
        return LORAMAC_HANDLER_ERROR;
 80091fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009200:	4770      	bx	lr
        return LORAMAC_HANDLER_SUCCESS;
 8009202:	2000      	movs	r0, #0
}
 8009204:	4770      	bx	lr
 8009206:	bf00      	nop
 8009208:	200007bc 	.word	0x200007bc
 800920c:	200007d0 	.word	0x200007d0
 8009210:	200000d4 	.word	0x200000d4

08009214 <LmhpComplianceOnMcpsIndication>:
    if( ComplianceTestState.Initialized == false )
 8009214:	4b8e      	ldr	r3, [pc, #568]	; (8009450 <LmhpComplianceOnMcpsIndication+0x23c>)
 8009216:	781b      	ldrb	r3, [r3, #0]
 8009218:	2b00      	cmp	r3, #0
 800921a:	f000 8117 	beq.w	800944c <LmhpComplianceOnMcpsIndication+0x238>
    if( mcpsIndication->RxData == false )
 800921e:	7b43      	ldrb	r3, [r0, #13]
 8009220:	2b00      	cmp	r3, #0
 8009222:	f000 8113 	beq.w	800944c <LmhpComplianceOnMcpsIndication+0x238>
    if ((ComplianceTestState.IsRunning == true) &&
 8009226:	4b8a      	ldr	r3, [pc, #552]	; (8009450 <LmhpComplianceOnMcpsIndication+0x23c>)
 8009228:	785b      	ldrb	r3, [r3, #1]
 800922a:	b12b      	cbz	r3, 8009238 <LmhpComplianceOnMcpsIndication+0x24>
        (mcpsIndication->AckReceived == 0))
 800922c:	7b82      	ldrb	r2, [r0, #14]
    if ((ComplianceTestState.IsRunning == true) &&
 800922e:	b91a      	cbnz	r2, 8009238 <LmhpComplianceOnMcpsIndication+0x24>
        ComplianceTestState.DownLinkCounter++;
 8009230:	4987      	ldr	r1, [pc, #540]	; (8009450 <LmhpComplianceOnMcpsIndication+0x23c>)
 8009232:	898a      	ldrh	r2, [r1, #12]
 8009234:	3201      	adds	r2, #1
 8009236:	818a      	strh	r2, [r1, #12]
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 8009238:	78c2      	ldrb	r2, [r0, #3]
 800923a:	2ae0      	cmp	r2, #224	; 0xe0
 800923c:	f040 8106 	bne.w	800944c <LmhpComplianceOnMcpsIndication+0x238>
{
 8009240:	b510      	push	{r4, lr}
 8009242:	b08c      	sub	sp, #48	; 0x30
    if( ComplianceTestState.IsRunning == false )
 8009244:	2b00      	cmp	r3, #0
 8009246:	d140      	bne.n	80092ca <LmhpComplianceOnMcpsIndication+0xb6>
        if( ( mcpsIndication->BufferSize == 4 ) &&
 8009248:	7b03      	ldrb	r3, [r0, #12]
 800924a:	2b04      	cmp	r3, #4
 800924c:	d001      	beq.n	8009252 <LmhpComplianceOnMcpsIndication+0x3e>
}
 800924e:	b00c      	add	sp, #48	; 0x30
 8009250:	bd10      	pop	{r4, pc}
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8009252:	6883      	ldr	r3, [r0, #8]
 8009254:	781a      	ldrb	r2, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 8009256:	2a01      	cmp	r2, #1
 8009258:	d1f9      	bne.n	800924e <LmhpComplianceOnMcpsIndication+0x3a>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800925a:	785a      	ldrb	r2, [r3, #1]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800925c:	2a01      	cmp	r2, #1
 800925e:	d1f6      	bne.n	800924e <LmhpComplianceOnMcpsIndication+0x3a>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8009260:	789a      	ldrb	r2, [r3, #2]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8009262:	2a01      	cmp	r2, #1
 8009264:	d1f3      	bne.n	800924e <LmhpComplianceOnMcpsIndication+0x3a>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 8009266:	78db      	ldrb	r3, [r3, #3]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8009268:	2b01      	cmp	r3, #1
 800926a:	d1f0      	bne.n	800924e <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.IsTxConfirmed = false;
 800926c:	4b78      	ldr	r3, [pc, #480]	; (8009450 <LmhpComplianceOnMcpsIndication+0x23c>)
 800926e:	2400      	movs	r4, #0
 8009270:	70dc      	strb	r4, [r3, #3]
            ComplianceTestState.Port = 224;
 8009272:	22e0      	movs	r2, #224	; 0xe0
 8009274:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 8009276:	2202      	movs	r2, #2
 8009278:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 800927a:	819c      	strh	r4, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 800927c:	739c      	strb	r4, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 800927e:	73dc      	strb	r4, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 8009280:	741c      	strb	r4, [r3, #16]
            ComplianceTestState.IsRunning = true;
 8009282:	2201      	movs	r2, #1
 8009284:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 8009286:	709a      	strb	r2, [r3, #2]
            mibReq.Type = MIB_ADR;
 8009288:	2304      	movs	r3, #4
 800928a:	f88d 300c 	strb.w	r3, [sp, #12]
            mibReq.Param.AdrEnable = true;
 800928e:	f88d 2010 	strb.w	r2, [sp, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8009292:	a803      	add	r0, sp, #12
 8009294:	f002 fe3e 	bl	800bf14 <LoRaMacMibSetRequestConfirm>
            LoRaMacTestSetDutyCycleOn( false );
 8009298:	4620      	mov	r0, r4
 800929a:	f003 fa59 	bl	800c750 <LoRaMacTestSetDutyCycleOn>
            if( LmhpComplianceParams->StopPeripherals != NULL )
 800929e:	4b6d      	ldr	r3, [pc, #436]	; (8009454 <LmhpComplianceOnMcpsIndication+0x240>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	b103      	cbz	r3, 80092a8 <LmhpComplianceOnMcpsIndication+0x94>
                LmhpComplianceParams->StopPeripherals( );
 80092a6:	4798      	blx	r3
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 80092a8:	4c6b      	ldr	r4, [pc, #428]	; (8009458 <LmhpComplianceOnMcpsIndication+0x244>)
 80092aa:	2200      	movs	r2, #0
 80092ac:	9200      	str	r2, [sp, #0]
 80092ae:	4b6b      	ldr	r3, [pc, #428]	; (800945c <LmhpComplianceOnMcpsIndication+0x248>)
 80092b0:	f04f 31ff 	mov.w	r1, #4294967295
 80092b4:	4620      	mov	r0, r4
 80092b6:	f009 fdb9 	bl	8012e2c <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 80092ba:	f241 3188 	movw	r1, #5000	; 0x1388
 80092be:	4620      	mov	r0, r4
 80092c0:	f009 feb2 	bl	8013028 <UTIL_TIMER_SetPeriod>
            LmhpComplianceTxProcess( );
 80092c4:	f7ff ff58 	bl	8009178 <LmhpComplianceTxProcess>
 80092c8:	e7c1      	b.n	800924e <LmhpComplianceOnMcpsIndication+0x3a>
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 80092ca:	6882      	ldr	r2, [r0, #8]
 80092cc:	7813      	ldrb	r3, [r2, #0]
 80092ce:	4960      	ldr	r1, [pc, #384]	; (8009450 <LmhpComplianceOnMcpsIndication+0x23c>)
 80092d0:	708b      	strb	r3, [r1, #2]
        switch( ComplianceTestState.State )
 80092d2:	2b0a      	cmp	r3, #10
 80092d4:	d8bb      	bhi.n	800924e <LmhpComplianceOnMcpsIndication+0x3a>
 80092d6:	e8df f003 	tbb	[pc, r3]
 80092da:	2206      	.short	0x2206
 80092dc:	47312b26 	.word	0x47312b26
 80092e0:	a59e6e4e 	.word	0xa59e6e4e
 80092e4:	af          	.byte	0xaf
 80092e5:	00          	.byte	0x00
                TimerStop( &ComplianceTxNextPacketTimer );
 80092e6:	485c      	ldr	r0, [pc, #368]	; (8009458 <LmhpComplianceOnMcpsIndication+0x244>)
 80092e8:	f009 fdfe 	bl	8012ee8 <UTIL_TIMER_Stop>
                ComplianceTestState.DownLinkCounter = 0;
 80092ec:	4b58      	ldr	r3, [pc, #352]	; (8009450 <LmhpComplianceOnMcpsIndication+0x23c>)
 80092ee:	2200      	movs	r2, #0
 80092f0:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 80092f2:	705a      	strb	r2, [r3, #1]
                mibReq.Type = MIB_ADR;
 80092f4:	2304      	movs	r3, #4
 80092f6:	f88d 300c 	strb.w	r3, [sp, #12]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 80092fa:	4c56      	ldr	r4, [pc, #344]	; (8009454 <LmhpComplianceOnMcpsIndication+0x240>)
 80092fc:	6823      	ldr	r3, [r4, #0]
 80092fe:	781b      	ldrb	r3, [r3, #0]
 8009300:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8009304:	a803      	add	r0, sp, #12
 8009306:	f002 fe05 	bl	800bf14 <LoRaMacMibSetRequestConfirm>
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800930a:	6823      	ldr	r3, [r4, #0]
 800930c:	7858      	ldrb	r0, [r3, #1]
 800930e:	f003 fa1f 	bl	800c750 <LoRaMacTestSetDutyCycleOn>
                if( LmhpComplianceParams->StartPeripherals != NULL )
 8009312:	6823      	ldr	r3, [r4, #0]
 8009314:	689b      	ldr	r3, [r3, #8]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d099      	beq.n	800924e <LmhpComplianceOnMcpsIndication+0x3a>
                    LmhpComplianceParams->StartPeripherals( );
 800931a:	4798      	blx	r3
            break;
 800931c:	e797      	b.n	800924e <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.DataBufferSize = 2;
 800931e:	4b4c      	ldr	r3, [pc, #304]	; (8009450 <LmhpComplianceOnMcpsIndication+0x23c>)
 8009320:	2202      	movs	r2, #2
 8009322:	719a      	strb	r2, [r3, #6]
            break;
 8009324:	e793      	b.n	800924e <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.IsTxConfirmed = true;
 8009326:	4b4a      	ldr	r3, [pc, #296]	; (8009450 <LmhpComplianceOnMcpsIndication+0x23c>)
 8009328:	2201      	movs	r2, #1
 800932a:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800932c:	709a      	strb	r2, [r3, #2]
            break;
 800932e:	e78e      	b.n	800924e <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.IsTxConfirmed = false;
 8009330:	4b47      	ldr	r3, [pc, #284]	; (8009450 <LmhpComplianceOnMcpsIndication+0x23c>)
 8009332:	2200      	movs	r2, #0
 8009334:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 8009336:	2201      	movs	r2, #1
 8009338:	709a      	strb	r2, [r3, #2]
            break;
 800933a:	e788      	b.n	800924e <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800933c:	7b01      	ldrb	r1, [r0, #12]
 800933e:	4b44      	ldr	r3, [pc, #272]	; (8009450 <LmhpComplianceOnMcpsIndication+0x23c>)
 8009340:	7199      	strb	r1, [r3, #6]
            ComplianceTestState.DataBuffer[0] = 4;
 8009342:	689c      	ldr	r4, [r3, #8]
 8009344:	2304      	movs	r3, #4
 8009346:	7023      	strb	r3, [r4, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 8009348:	2301      	movs	r3, #1
 800934a:	4a41      	ldr	r2, [pc, #260]	; (8009450 <LmhpComplianceOnMcpsIndication+0x23c>)
 800934c:	7952      	ldrb	r2, [r2, #5]
 800934e:	428a      	cmp	r2, r1
 8009350:	bf28      	it	cs
 8009352:	460a      	movcs	r2, r1
 8009354:	429a      	cmp	r2, r3
 8009356:	f67f af7a 	bls.w	800924e <LmhpComplianceOnMcpsIndication+0x3a>
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800935a:	6882      	ldr	r2, [r0, #8]
 800935c:	5cd2      	ldrb	r2, [r2, r3]
 800935e:	3201      	adds	r2, #1
 8009360:	54e2      	strb	r2, [r4, r3]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 8009362:	3301      	adds	r3, #1
 8009364:	b2db      	uxtb	r3, r3
 8009366:	e7f0      	b.n	800934a <LmhpComplianceOnMcpsIndication+0x136>
                mlmeReq.Type = MLME_LINK_CHECK;
 8009368:	2304      	movs	r3, #4
 800936a:	f88d 300c 	strb.w	r3, [sp, #12]
                LoRaMacMlmeRequest( &mlmeReq );
 800936e:	a803      	add	r0, sp, #12
 8009370:	f003 f85c 	bl	800c42c <LoRaMacMlmeRequest>
            break;
 8009374:	e76b      	b.n	800924e <LmhpComplianceOnMcpsIndication+0x3a>
                TimerStop(&ComplianceTxNextPacketTimer);
 8009376:	4838      	ldr	r0, [pc, #224]	; (8009458 <LmhpComplianceOnMcpsIndication+0x244>)
 8009378:	f009 fdb6 	bl	8012ee8 <UTIL_TIMER_Stop>
                ComplianceTestState.DownLinkCounter = 0;
 800937c:	4b34      	ldr	r3, [pc, #208]	; (8009450 <LmhpComplianceOnMcpsIndication+0x23c>)
 800937e:	2200      	movs	r2, #0
 8009380:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 8009382:	705a      	strb	r2, [r3, #1]
                mibReq.Type = MIB_ADR;
 8009384:	2304      	movs	r3, #4
 8009386:	f88d 300c 	strb.w	r3, [sp, #12]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800938a:	4c32      	ldr	r4, [pc, #200]	; (8009454 <LmhpComplianceOnMcpsIndication+0x240>)
 800938c:	6823      	ldr	r3, [r4, #0]
 800938e:	781b      	ldrb	r3, [r3, #0]
 8009390:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8009394:	a803      	add	r0, sp, #12
 8009396:	f002 fdbd 	bl	800bf14 <LoRaMacMibSetRequestConfirm>
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800939a:	6823      	ldr	r3, [r4, #0]
 800939c:	7858      	ldrb	r0, [r3, #1]
 800939e:	f003 f9d7 	bl	800c750 <LoRaMacTestSetDutyCycleOn>
                if( LmhpComplianceParams->StartPeripherals != NULL )
 80093a2:	6823      	ldr	r3, [r4, #0]
 80093a4:	689b      	ldr	r3, [r3, #8]
 80093a6:	b103      	cbz	r3, 80093aa <LmhpComplianceOnMcpsIndication+0x196>
                    LmhpComplianceParams->StartPeripherals( );
 80093a8:	4798      	blx	r3
                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 80093aa:	4b2d      	ldr	r3, [pc, #180]	; (8009460 <LmhpComplianceOnMcpsIndication+0x24c>)
 80093ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ae:	2101      	movs	r1, #1
 80093b0:	2002      	movs	r0, #2
 80093b2:	4798      	blx	r3
            break;
 80093b4:	e74b      	b.n	800924e <LmhpComplianceOnMcpsIndication+0x3a>
                if( mcpsIndication->BufferSize == 3 )
 80093b6:	7b03      	ldrb	r3, [r0, #12]
 80093b8:	2b03      	cmp	r3, #3
 80093ba:	d008      	beq.n	80093ce <LmhpComplianceOnMcpsIndication+0x1ba>
                else if( mcpsIndication->BufferSize == 7 )
 80093bc:	2b07      	cmp	r3, #7
 80093be:	d010      	beq.n	80093e2 <LmhpComplianceOnMcpsIndication+0x1ce>
                LoRaMacMlmeRequest( &mlmeReq );
 80093c0:	a803      	add	r0, sp, #12
 80093c2:	f003 f833 	bl	800c42c <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 80093c6:	4b22      	ldr	r3, [pc, #136]	; (8009450 <LmhpComplianceOnMcpsIndication+0x23c>)
 80093c8:	2201      	movs	r2, #1
 80093ca:	709a      	strb	r2, [r3, #2]
            break;
 80093cc:	e73f      	b.n	800924e <LmhpComplianceOnMcpsIndication+0x3a>
                    mlmeReq.Type = MLME_TXCW;
 80093ce:	2305      	movs	r3, #5
 80093d0:	f88d 300c 	strb.w	r3, [sp, #12]
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 80093d4:	7851      	ldrb	r1, [r2, #1]
 80093d6:	7893      	ldrb	r3, [r2, #2]
 80093d8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80093dc:	f8ad 3010 	strh.w	r3, [sp, #16]
 80093e0:	e7ee      	b.n	80093c0 <LmhpComplianceOnMcpsIndication+0x1ac>
                    mlmeReq.Type = MLME_TXCW_1;
 80093e2:	2306      	movs	r3, #6
 80093e4:	f88d 300c 	strb.w	r3, [sp, #12]
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 80093e8:	7851      	ldrb	r1, [r2, #1]
 80093ea:	7893      	ldrb	r3, [r2, #2]
 80093ec:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80093f0:	f8ad 3010 	strh.w	r3, [sp, #16]
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 80093f4:	78d1      	ldrb	r1, [r2, #3]
 80093f6:	7913      	ldrb	r3, [r2, #4]
 80093f8:	021b      	lsls	r3, r3, #8
 80093fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80093fe:	7952      	ldrb	r2, [r2, #5]
 8009400:	4313      	orrs	r3, r2
 8009402:	2264      	movs	r2, #100	; 0x64
 8009404:	fb02 f303 	mul.w	r3, r2, r3
 8009408:	9305      	str	r3, [sp, #20]
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800940a:	6883      	ldr	r3, [r0, #8]
 800940c:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8009410:	f88d 3018 	strb.w	r3, [sp, #24]
 8009414:	e7d4      	b.n	80093c0 <LmhpComplianceOnMcpsIndication+0x1ac>
                mlmeReq.Type = MLME_DEVICE_TIME;
 8009416:	230a      	movs	r3, #10
 8009418:	f88d 300c 	strb.w	r3, [sp, #12]
                LoRaMacMlmeRequest( &mlmeReq );
 800941c:	a803      	add	r0, sp, #12
 800941e:	f003 f805 	bl	800c42c <LoRaMacMlmeRequest>
            break;
 8009422:	e714      	b.n	800924e <LmhpComplianceOnMcpsIndication+0x3a>
                mibReq.Type = MIB_DEVICE_CLASS;
 8009424:	2300      	movs	r3, #0
 8009426:	f88d 300c 	strb.w	r3, [sp, #12]
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 800942a:	7853      	ldrb	r3, [r2, #1]
 800942c:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8009430:	a803      	add	r0, sp, #12
 8009432:	f002 fd6f 	bl	800bf14 <LoRaMacMibSetRequestConfirm>
            break;
 8009436:	e70a      	b.n	800924e <LmhpComplianceOnMcpsIndication+0x3a>
                mlmeReq.Type = MLME_PING_SLOT_INFO;
 8009438:	230d      	movs	r3, #13
 800943a:	f88d 300c 	strb.w	r3, [sp, #12]
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800943e:	7853      	ldrb	r3, [r2, #1]
 8009440:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMlmeRequest( &mlmeReq );
 8009444:	a803      	add	r0, sp, #12
 8009446:	f002 fff1 	bl	800c42c <LoRaMacMlmeRequest>
            break;
 800944a:	e700      	b.n	800924e <LmhpComplianceOnMcpsIndication+0x3a>
 800944c:	4770      	bx	lr
 800944e:	bf00      	nop
 8009450:	200007bc 	.word	0x200007bc
 8009454:	200007e8 	.word	0x200007e8
 8009458:	200007d0 	.word	0x200007d0
 800945c:	08009465 	.word	0x08009465
 8009460:	200000d4 	.word	0x200000d4

08009464 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 8009464:	b508      	push	{r3, lr}
    LmhpComplianceTxProcess( );
 8009466:	f7ff fe87 	bl	8009178 <LmhpComplianceTxProcess>
}
 800946a:	bd08      	pop	{r3, pc}

0800946c <LmhpCompliancePackageFactory>:
}
 800946c:	4800      	ldr	r0, [pc, #0]	; (8009470 <LmhpCompliancePackageFactory+0x4>)
 800946e:	4770      	bx	lr
 8009470:	200000d4 	.word	0x200000d4

08009474 <OnRadioRxError>:
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
}

static void OnRadioRxError( void )
{
 8009474:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 8009476:	4a06      	ldr	r2, [pc, #24]	; (8009490 <OnRadioRxError+0x1c>)
 8009478:	7813      	ldrb	r3, [r2, #0]
 800947a:	f043 0302 	orr.w	r3, r3, #2
 800947e:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8009480:	4b04      	ldr	r3, [pc, #16]	; (8009494 <OnRadioRxError+0x20>)
 8009482:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8009486:	b113      	cbz	r3, 800948e <OnRadioRxError+0x1a>
 8009488:	691b      	ldr	r3, [r3, #16]
 800948a:	b103      	cbz	r3, 800948e <OnRadioRxError+0x1a>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800948c:	4798      	blx	r3
    }
}
 800948e:	bd08      	pop	{r3, pc}
 8009490:	200007ec 	.word	0x200007ec
 8009494:	200007f0 	.word	0x200007f0

08009498 <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8009498:	4b07      	ldr	r3, [pc, #28]	; (80094b8 <UpdateRxSlotIdleState+0x20>)
 800949a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800949e:	2b02      	cmp	r3, #2
 80094a0:	d004      	beq.n	80094ac <UpdateRxSlotIdleState+0x14>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 80094a2:	4b06      	ldr	r3, [pc, #24]	; (80094bc <UpdateRxSlotIdleState+0x24>)
 80094a4:	2206      	movs	r2, #6
 80094a6:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
 80094aa:	4770      	bx	lr
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 80094ac:	4b03      	ldr	r3, [pc, #12]	; (80094bc <UpdateRxSlotIdleState+0x24>)
 80094ae:	2202      	movs	r2, #2
 80094b0:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
    }
}
 80094b4:	4770      	bx	lr
 80094b6:	bf00      	nop
 80094b8:	20008000 	.word	0x20008000
 80094bc:	200007f0 	.word	0x200007f0

080094c0 <LoRaMacEnableRequests>:
    return true;
}

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
    MacCtx.AllowRequests = requestState;
 80094c0:	4b01      	ldr	r3, [pc, #4]	; (80094c8 <LoRaMacEnableRequests+0x8>)
 80094c2:	f883 0486 	strb.w	r0, [r3, #1158]	; 0x486
}
 80094c6:	4770      	bx	lr
 80094c8:	200007f0 	.word	0x200007f0

080094cc <LoRaMacHandleIndicationEvents>:
        }
    }
}

static void LoRaMacHandleIndicationEvents( void )
{
 80094cc:	b508      	push	{r3, lr}
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 80094ce:	4b15      	ldr	r3, [pc, #84]	; (8009524 <LoRaMacHandleIndicationEvents+0x58>)
 80094d0:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 80094d4:	f013 0f08 	tst.w	r3, #8
 80094d8:	d00e      	beq.n	80094f8 <LoRaMacHandleIndicationEvents+0x2c>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 80094da:	4812      	ldr	r0, [pc, #72]	; (8009524 <LoRaMacHandleIndicationEvents+0x58>)
 80094dc:	f890 3485 	ldrb.w	r3, [r0, #1157]	; 0x485
 80094e0:	f36f 03c3 	bfc	r3, #3, #1
 80094e4:	f880 3485 	strb.w	r3, [r0, #1157]	; 0x485
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 80094e8:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 80094ec:	68db      	ldr	r3, [r3, #12]
 80094ee:	f500 6190 	add.w	r1, r0, #1152	; 0x480
 80094f2:	f500 608c 	add.w	r0, r0, #1120	; 0x460
 80094f6:	4798      	blx	r3
    }
    */
    /*ST_WORKAROUND_END */

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80094f8:	4b0a      	ldr	r3, [pc, #40]	; (8009524 <LoRaMacHandleIndicationEvents+0x58>)
 80094fa:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 80094fe:	f013 0f02 	tst.w	r3, #2
 8009502:	d00e      	beq.n	8009522 <LoRaMacHandleIndicationEvents+0x56>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8009504:	4807      	ldr	r0, [pc, #28]	; (8009524 <LoRaMacHandleIndicationEvents+0x58>)
 8009506:	f890 3485 	ldrb.w	r3, [r0, #1157]	; 0x485
 800950a:	f36f 0341 	bfc	r3, #1, #1
 800950e:	f880 3485 	strb.w	r3, [r0, #1157]	; 0x485
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 8009512:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	f500 6190 	add.w	r1, r0, #1152	; 0x480
 800951c:	f200 401c 	addw	r0, r0, #1052	; 0x41c
 8009520:	4798      	blx	r3
    }
}
 8009522:	bd08      	pop	{r3, pc}
 8009524:	200007f0 	.word	0x200007f0

08009528 <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8009528:	4b07      	ldr	r3, [pc, #28]	; (8009548 <LoRaMacCheckForRxAbort+0x20>)
 800952a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800952e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009532:	d008      	beq.n	8009546 <LoRaMacCheckForRxAbort+0x1e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 8009534:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8009538:	4a03      	ldr	r2, [pc, #12]	; (8009548 <LoRaMacCheckForRxAbort+0x20>)
 800953a:	f8c2 1340 	str.w	r1, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800953e:	f023 0382 	bic.w	r3, r3, #130	; 0x82
 8009542:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 8009546:	4770      	bx	lr
 8009548:	200007f0 	.word	0x200007f0

0800954c <CalculateBackOff>:

static void CalculateBackOff( void )
{
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 800954c:	4b06      	ldr	r3, [pc, #24]	; (8009568 <CalculateBackOff+0x1c>)
 800954e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009550:	b94b      	cbnz	r3, 8009566 <CalculateBackOff+0x1a>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8009552:	4a05      	ldr	r2, [pc, #20]	; (8009568 <CalculateBackOff+0x1c>)
 8009554:	f8b2 310a 	ldrh.w	r3, [r2, #266]	; 0x10a
 8009558:	4904      	ldr	r1, [pc, #16]	; (800956c <CalculateBackOff+0x20>)
 800955a:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
 800955e:	3b01      	subs	r3, #1
 8009560:	fb01 f303 	mul.w	r3, r1, r3
 8009564:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 8009566:	4770      	bx	lr
 8009568:	20008000 	.word	0x20008000
 800956c:	200007f0 	.word	0x200007f0

08009570 <SetTxContinuousWave1>:

    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8009570:	b508      	push	{r3, lr}
 8009572:	4684      	mov	ip, r0
 8009574:	4608      	mov	r0, r1
 8009576:	4611      	mov	r1, r2
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8009578:	4b06      	ldr	r3, [pc, #24]	; (8009594 <SetTxContinuousWave1+0x24>)
 800957a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800957c:	4662      	mov	r2, ip
 800957e:	b249      	sxtb	r1, r1
 8009580:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8009582:	4a05      	ldr	r2, [pc, #20]	; (8009598 <SetTxContinuousWave1+0x28>)
 8009584:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 8009588:	f043 0302 	orr.w	r3, r3, #2
 800958c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 8009590:	2000      	movs	r0, #0
 8009592:	bd08      	pop	{r3, pc}
 8009594:	08014cbc 	.word	0x08014cbc
 8009598:	200007f0 	.word	0x200007f0

0800959c <DetermineFrameType>:
    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 800959c:	4602      	mov	r2, r0
 800959e:	b1f8      	cbz	r0, 80095e0 <DetermineFrameType+0x44>
 80095a0:	b301      	cbz	r1, 80095e4 <DetermineFrameType+0x48>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 80095a2:	7b03      	ldrb	r3, [r0, #12]
 80095a4:	f013 030f 	ands.w	r3, r3, #15
 80095a8:	d005      	beq.n	80095b6 <DetermineFrameType+0x1a>
 80095aa:	f890 0020 	ldrb.w	r0, [r0, #32]
 80095ae:	b110      	cbz	r0, 80095b6 <DetermineFrameType+0x1a>
    {
        *fType = FRAME_TYPE_A;
 80095b0:	2000      	movs	r0, #0
 80095b2:	7008      	strb	r0, [r1, #0]
 80095b4:	4770      	bx	lr
    }
    else if( macMsg->FRMPayloadSize == 0 )
 80095b6:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
 80095ba:	b910      	cbnz	r0, 80095c2 <DetermineFrameType+0x26>
    {
        *fType = FRAME_TYPE_B;
 80095bc:	2301      	movs	r3, #1
 80095be:	700b      	strb	r3, [r1, #0]
 80095c0:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 80095c2:	b92b      	cbnz	r3, 80095d0 <DetermineFrameType+0x34>
 80095c4:	f892 0020 	ldrb.w	r0, [r2, #32]
 80095c8:	b910      	cbnz	r0, 80095d0 <DetermineFrameType+0x34>
    {
        *fType = FRAME_TYPE_C;
 80095ca:	2302      	movs	r3, #2
 80095cc:	700b      	strb	r3, [r1, #0]
 80095ce:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 80095d0:	b953      	cbnz	r3, 80095e8 <DetermineFrameType+0x4c>
 80095d2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80095d6:	b14a      	cbz	r2, 80095ec <DetermineFrameType+0x50>
    {
        *fType = FRAME_TYPE_D;
 80095d8:	2203      	movs	r2, #3
 80095da:	700a      	strb	r2, [r1, #0]
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
    }

    return LORAMAC_STATUS_OK;
 80095dc:	4618      	mov	r0, r3
        *fType = FRAME_TYPE_D;
 80095de:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80095e0:	2003      	movs	r0, #3
 80095e2:	4770      	bx	lr
 80095e4:	2003      	movs	r0, #3
 80095e6:	4770      	bx	lr
        return LORAMAC_STATUS_ERROR;
 80095e8:	2018      	movs	r0, #24
 80095ea:	4770      	bx	lr
 80095ec:	2018      	movs	r0, #24
}
 80095ee:	4770      	bx	lr

080095f0 <CheckRetransUnconfirmedUplink>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CheckRetransUnconfirmedUplink( void )
{
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 80095f0:	4b0f      	ldr	r3, [pc, #60]	; (8009630 <CheckRetransUnconfirmedUplink+0x40>)
 80095f2:	f893 2410 	ldrb.w	r2, [r3, #1040]	; 0x410
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 80095f6:	4b0f      	ldr	r3, [pc, #60]	; (8009634 <CheckRetransUnconfirmedUplink+0x44>)
 80095f8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    if( MacCtx.ChannelsNbTransCounter >=
 80095fc:	429a      	cmp	r2, r3
 80095fe:	d20f      	bcs.n	8009620 <CheckRetransUnconfirmedUplink+0x30>
    {
        return true;
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8009600:	4b0b      	ldr	r3, [pc, #44]	; (8009630 <CheckRetransUnconfirmedUplink+0x40>)
 8009602:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8009606:	f013 0f02 	tst.w	r3, #2
 800960a:	d00b      	beq.n	8009624 <CheckRetransUnconfirmedUplink+0x34>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800960c:	4b09      	ldr	r3, [pc, #36]	; (8009634 <CheckRetransUnconfirmedUplink+0x44>)
 800960e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8009612:	b14b      	cbz	r3, 8009628 <CheckRetransUnconfirmedUplink+0x38>
        {
            return true;
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 8009614:	4b06      	ldr	r3, [pc, #24]	; (8009630 <CheckRetransUnconfirmedUplink+0x40>)
 8009616:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 800961a:	b13b      	cbz	r3, 800962c <CheckRetransUnconfirmedUplink+0x3c>
            {
                return true;
            }
        }
    }
    return false;
 800961c:	2000      	movs	r0, #0
 800961e:	4770      	bx	lr
        return true;
 8009620:	2001      	movs	r0, #1
 8009622:	4770      	bx	lr
    return false;
 8009624:	2000      	movs	r0, #0
 8009626:	4770      	bx	lr
            return true;
 8009628:	2001      	movs	r0, #1
 800962a:	4770      	bx	lr
                return true;
 800962c:	2001      	movs	r0, #1
}
 800962e:	4770      	bx	lr
 8009630:	200007f0 	.word	0x200007f0
 8009634:	20008000 	.word	0x20008000

08009638 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 8009638:	4b0a      	ldr	r3, [pc, #40]	; (8009664 <CheckRetransConfirmedUplink+0x2c>)
 800963a:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
        MacCtx.AckTimeoutRetries )
 800963e:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
    if( MacCtx.AckTimeoutRetriesCounter >=
 8009642:	429a      	cmp	r2, r3
 8009644:	d209      	bcs.n	800965a <CheckRetransConfirmedUplink+0x22>
    {
        return true;
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8009646:	4b07      	ldr	r3, [pc, #28]	; (8009664 <CheckRetransConfirmedUplink+0x2c>)
 8009648:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800964c:	f013 0f02 	tst.w	r3, #2
 8009650:	d005      	beq.n	800965e <CheckRetransConfirmedUplink+0x26>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8009652:	4b04      	ldr	r3, [pc, #16]	; (8009664 <CheckRetransConfirmedUplink+0x2c>)
 8009654:	f893 043c 	ldrb.w	r0, [r3, #1084]	; 0x43c
 8009658:	4770      	bx	lr
        return true;
 800965a:	2001      	movs	r0, #1
 800965c:	4770      	bx	lr
        {
            return true;
        }
    }
    return false;
 800965e:	2000      	movs	r0, #0
}
 8009660:	4770      	bx	lr
 8009662:	bf00      	nop
 8009664:	200007f0 	.word	0x200007f0

08009668 <StopRetransmission>:
}
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8009668:	4b11      	ldr	r3, [pc, #68]	; (80096b0 <StopRetransmission+0x48>)
 800966a:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800966e:	f013 0f02 	tst.w	r3, #2
 8009672:	d004      	beq.n	800967e <StopRetransmission+0x16>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8009674:	4b0e      	ldr	r3, [pc, #56]	; (80096b0 <StopRetransmission+0x48>)
 8009676:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800967a:	2b01      	cmp	r3, #1
 800967c:	d907      	bls.n	800968e <StopRetransmission+0x26>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800967e:	4b0d      	ldr	r3, [pc, #52]	; (80096b4 <StopRetransmission+0x4c>)
 8009680:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8009684:	b11b      	cbz	r3, 800968e <StopRetransmission+0x26>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
 8009686:	4a0b      	ldr	r2, [pc, #44]	; (80096b4 <StopRetransmission+0x4c>)
 8009688:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800968a:	3301      	adds	r3, #1
 800968c:	6293      	str	r3, [r2, #40]	; 0x28
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 800968e:	4b08      	ldr	r3, [pc, #32]	; (80096b0 <StopRetransmission+0x48>)
 8009690:	2200      	movs	r2, #0
 8009692:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.NodeAckRequested = false;
 8009696:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
 800969a:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800969e:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 80096a2:	f022 0202 	bic.w	r2, r2, #2
 80096a6:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return true;
}
 80096aa:	2001      	movs	r0, #1
 80096ac:	4770      	bx	lr
 80096ae:	bf00      	nop
 80096b0:	200007f0 	.word	0x200007f0
 80096b4:	20008000 	.word	0x20008000

080096b8 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 80096b8:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) &&
 80096ba:	4b04      	ldr	r3, [pc, #16]	; (80096cc <CallNvmDataChangeCallback+0x14>)
 80096bc:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80096c0:	b113      	cbz	r3, 80096c8 <CallNvmDataChangeCallback+0x10>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 80096c2:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 80096c4:	b103      	cbz	r3, 80096c8 <CallNvmDataChangeCallback+0x10>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 80096c6:	4798      	blx	r3
    }
}
 80096c8:	bd08      	pop	{r3, pc}
 80096ca:	bf00      	nop
 80096cc:	200007f0 	.word	0x200007f0

080096d0 <IsRequestPending>:
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80096d0:	4b04      	ldr	r3, [pc, #16]	; (80096e4 <IsRequestPending+0x14>)
 80096d2:	f893 0485 	ldrb.w	r0, [r3, #1157]	; 0x485
 80096d6:	f010 0005 	ands.w	r0, r0, #5
 80096da:	d100      	bne.n	80096de <IsRequestPending+0xe>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
    {
        return 1;
    }
    return 0;
}
 80096dc:	4770      	bx	lr
        return 1;
 80096de:	2001      	movs	r0, #1
 80096e0:	e7fc      	b.n	80096dc <IsRequestPending+0xc>
 80096e2:	bf00      	nop
 80096e4:	200007f0 	.word	0x200007f0

080096e8 <AckTimeoutRetriesProcess>:
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 80096e8:	4a13      	ldr	r2, [pc, #76]	; (8009738 <AckTimeoutRetriesProcess+0x50>)
 80096ea:	f892 3412 	ldrb.w	r3, [r2, #1042]	; 0x412
 80096ee:	f892 2411 	ldrb.w	r2, [r2, #1041]	; 0x411
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d207      	bcs.n	8009706 <AckTimeoutRetriesProcess+0x1e>
        MacCtx.AckTimeoutRetriesCounter++;
 80096f6:	3301      	adds	r3, #1
 80096f8:	b2db      	uxtb	r3, r3
 80096fa:	4a0f      	ldr	r2, [pc, #60]	; (8009738 <AckTimeoutRetriesProcess+0x50>)
 80096fc:	f882 3412 	strb.w	r3, [r2, #1042]	; 0x412
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8009700:	f013 0f01 	tst.w	r3, #1
 8009704:	d100      	bne.n	8009708 <AckTimeoutRetriesProcess+0x20>
 8009706:	4770      	bx	lr
{
 8009708:	b510      	push	{r4, lr}
 800970a:	b084      	sub	sp, #16
            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800970c:	2322      	movs	r3, #34	; 0x22
 800970e:	f88d 3008 	strb.w	r3, [sp, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009712:	4c0a      	ldr	r4, [pc, #40]	; (800973c <AckTimeoutRetriesProcess+0x54>)
 8009714:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8009718:	f88d 300a 	strb.w	r3, [sp, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800971c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
 8009720:	f88d 3009 	strb.w	r3, [sp, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009724:	a902      	add	r1, sp, #8
 8009726:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800972a:	f004 f8b0 	bl	800d88e <RegionGetPhyParam>
 800972e:	9001      	str	r0, [sp, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 8009730:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
}
 8009734:	b004      	add	sp, #16
 8009736:	bd10      	pop	{r4, pc}
 8009738:	200007f0 	.word	0x200007f0
 800973c:	20008000 	.word	0x20008000

08009740 <GetMaxAppPayloadWithoutFOptsLength>:
{
 8009740:	b500      	push	{lr}
 8009742:	b085      	sub	sp, #20
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009744:	4b0d      	ldr	r3, [pc, #52]	; (800977c <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 8009746:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800974a:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Datarate = datarate;
 800974e:	f88d 0009 	strb.w	r0, [sp, #9]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8009752:	220d      	movs	r2, #13
 8009754:	f88d 2008 	strb.w	r2, [sp, #8]
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8009758:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800975c:	b113      	cbz	r3, 8009764 <GetMaxAppPayloadWithoutFOptsLength+0x24>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800975e:	230e      	movs	r3, #14
 8009760:	f88d 3008 	strb.w	r3, [sp, #8]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009764:	a902      	add	r1, sp, #8
 8009766:	4b05      	ldr	r3, [pc, #20]	; (800977c <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 8009768:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800976c:	f004 f88f 	bl	800d88e <RegionGetPhyParam>
 8009770:	9001      	str	r0, [sp, #4]
}
 8009772:	b2c0      	uxtb	r0, r0
 8009774:	b005      	add	sp, #20
 8009776:	f85d fb04 	ldr.w	pc, [sp], #4
 800977a:	bf00      	nop
 800977c:	20008000 	.word	0x20008000

08009780 <ValidatePayloadLength>:
{
 8009780:	b538      	push	{r3, r4, r5, lr}
 8009782:	4605      	mov	r5, r0
 8009784:	4614      	mov	r4, r2
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8009786:	4608      	mov	r0, r1
 8009788:	f7ff ffda 	bl	8009740 <GetMaxAppPayloadWithoutFOptsLength>
 800978c:	b283      	uxth	r3, r0
    payloadSize = ( lenN + fOptsLen );
 800978e:	1962      	adds	r2, r4, r5
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8009790:	4293      	cmp	r3, r2
 8009792:	d303      	bcc.n	800979c <ValidatePayloadLength+0x1c>
 8009794:	2aff      	cmp	r2, #255	; 0xff
 8009796:	d903      	bls.n	80097a0 <ValidatePayloadLength+0x20>
    return false;
 8009798:	2000      	movs	r0, #0
 800979a:	e000      	b.n	800979e <ValidatePayloadLength+0x1e>
 800979c:	2000      	movs	r0, #0
}
 800979e:	bd38      	pop	{r3, r4, r5, pc}
        return true;
 80097a0:	2001      	movs	r0, #1
 80097a2:	e7fc      	b.n	800979e <ValidatePayloadLength+0x1e>

080097a4 <ProcessRadioTxDone>:
{
 80097a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097a6:	b08f      	sub	sp, #60	; 0x3c
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80097a8:	4b39      	ldr	r3, [pc, #228]	; (8009890 <ProcessRadioTxDone+0xec>)
 80097aa:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80097ae:	2b02      	cmp	r3, #2
 80097b0:	d002      	beq.n	80097b8 <ProcessRadioTxDone+0x14>
        Radio.Sleep( );
 80097b2:	4b38      	ldr	r3, [pc, #224]	; (8009894 <ProcessRadioTxDone+0xf0>)
 80097b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097b6:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 80097b8:	4c37      	ldr	r4, [pc, #220]	; (8009898 <ProcessRadioTxDone+0xf4>)
 80097ba:	f504 7560 	add.w	r5, r4, #896	; 0x380
 80097be:	f8d4 13b0 	ldr.w	r1, [r4, #944]	; 0x3b0
 80097c2:	4628      	mov	r0, r5
 80097c4:	f009 fc30 	bl	8013028 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 80097c8:	4628      	mov	r0, r5
 80097ca:	f009 fbe7 	bl	8012f9c <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 80097ce:	f504 7566 	add.w	r5, r4, #920	; 0x398
 80097d2:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 80097d6:	4628      	mov	r0, r5
 80097d8:	f009 fc26 	bl	8013028 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 80097dc:	4628      	mov	r0, r5
 80097de:	f009 fbdd 	bl	8012f9c <UTIL_TIMER_Start>
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 80097e2:	4b2b      	ldr	r3, [pc, #172]	; (8009890 <ProcessRadioTxDone+0xec>)
 80097e4:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80097e8:	2b02      	cmp	r3, #2
 80097ea:	d002      	beq.n	80097f2 <ProcessRadioTxDone+0x4e>
 80097ec:	f894 3414 	ldrb.w	r3, [r4, #1044]	; 0x414
 80097f0:	b1ab      	cbz	r3, 800981e <ProcessRadioTxDone+0x7a>
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 80097f2:	2316      	movs	r3, #22
 80097f4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80097f8:	a90a      	add	r1, sp, #40	; 0x28
 80097fa:	4b25      	ldr	r3, [pc, #148]	; (8009890 <ProcessRadioTxDone+0xec>)
 80097fc:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009800:	f004 f845 	bl	800d88e <RegionGetPhyParam>
 8009804:	9009      	str	r0, [sp, #36]	; 0x24
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8009806:	4c24      	ldr	r4, [pc, #144]	; (8009898 <ProcessRadioTxDone+0xf4>)
 8009808:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 800980c:	f504 747e 	add.w	r4, r4, #1016	; 0x3f8
 8009810:	4401      	add	r1, r0
 8009812:	4620      	mov	r0, r4
 8009814:	f009 fc08 	bl	8013028 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 8009818:	4620      	mov	r0, r4
 800981a:	f009 fbbf 	bl	8012f9c <UTIL_TIMER_Start>
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800981e:	4b1f      	ldr	r3, [pc, #124]	; (800989c <ProcessRadioTxDone+0xf8>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4c1b      	ldr	r4, [pc, #108]	; (8009890 <ProcessRadioTxDone+0xec>)
 8009824:	62e3      	str	r3, [r4, #44]	; 0x2c
    txDone.Channel = MacCtx.Channel;
 8009826:	4f1c      	ldr	r7, [pc, #112]	; (8009898 <ProcessRadioTxDone+0xf4>)
 8009828:	f897 2415 	ldrb.w	r2, [r7, #1045]	; 0x415
 800982c:	f88d 2010 	strb.w	r2, [sp, #16]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8009830:	9305      	str	r3, [sp, #20]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8009832:	ae0c      	add	r6, sp, #48	; 0x30
 8009834:	4630      	mov	r0, r6
 8009836:	f009 fa8b 	bl	8012d50 <SysTimeGetMcuTime>
 800983a:	ad02      	add	r5, sp, #8
 800983c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8009840:	9300      	str	r3, [sp, #0]
 8009842:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8009846:	e896 0006 	ldmia.w	r6, {r1, r2}
 800984a:	4628      	mov	r0, r5
 800984c:	f009 fa1d 	bl	8012c8a <SysTimeSub>
 8009850:	ab07      	add	r3, sp, #28
 8009852:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009856:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800985a:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 800985e:	9306      	str	r3, [sp, #24]
    txDone.Joined  = true;
 8009860:	2301      	movs	r3, #1
 8009862:	f88d 3011 	strb.w	r3, [sp, #17]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8009866:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
 800986a:	b90b      	cbnz	r3, 8009870 <ProcessRadioTxDone+0xcc>
        txDone.Joined  = false;
 800986c:	f88d 3011 	strb.w	r3, [sp, #17]
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8009870:	a904      	add	r1, sp, #16
 8009872:	4b07      	ldr	r3, [pc, #28]	; (8009890 <ProcessRadioTxDone+0xec>)
 8009874:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009878:	f004 f821 	bl	800d8be <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
 800987c:	4b06      	ldr	r3, [pc, #24]	; (8009898 <ProcessRadioTxDone+0xf4>)
 800987e:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8009882:	b91b      	cbnz	r3, 800988c <ProcessRadioTxDone+0xe8>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8009884:	4b04      	ldr	r3, [pc, #16]	; (8009898 <ProcessRadioTxDone+0xf4>)
 8009886:	2200      	movs	r2, #0
 8009888:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
}
 800988c:	b00f      	add	sp, #60	; 0x3c
 800988e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009890:	20008000 	.word	0x20008000
 8009894:	08014cbc 	.word	0x08014cbc
 8009898:	200007f0 	.word	0x200007f0
 800989c:	20000d0c 	.word	0x20000d0c

080098a0 <OnAckTimeoutTimerEvent>:
{
 80098a0:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.AckTimeoutTimer );
 80098a2:	4c10      	ldr	r4, [pc, #64]	; (80098e4 <OnAckTimeoutTimerEvent+0x44>)
 80098a4:	f504 707e 	add.w	r0, r4, #1016	; 0x3f8
 80098a8:	f009 fb1e 	bl	8012ee8 <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 80098ac:	f894 3414 	ldrb.w	r3, [r4, #1044]	; 0x414
 80098b0:	b113      	cbz	r3, 80098b8 <OnAckTimeoutTimerEvent+0x18>
        MacCtx.AckTimeoutRetry = true;
 80098b2:	2201      	movs	r2, #1
 80098b4:	f884 2413 	strb.w	r2, [r4, #1043]	; 0x413
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 80098b8:	4b0b      	ldr	r3, [pc, #44]	; (80098e8 <OnAckTimeoutTimerEvent+0x48>)
 80098ba:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80098be:	2b02      	cmp	r3, #2
 80098c0:	d007      	beq.n	80098d2 <OnAckTimeoutTimerEvent+0x32>
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80098c2:	4b08      	ldr	r3, [pc, #32]	; (80098e4 <OnAckTimeoutTimerEvent+0x44>)
 80098c4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80098c8:	b113      	cbz	r3, 80098d0 <OnAckTimeoutTimerEvent+0x30>
 80098ca:	691b      	ldr	r3, [r3, #16]
 80098cc:	b103      	cbz	r3, 80098d0 <OnAckTimeoutTimerEvent+0x30>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80098ce:	4798      	blx	r3
}
 80098d0:	bd10      	pop	{r4, pc}
        MacCtx.MacFlags.Bits.MacDone = 1;
 80098d2:	4a04      	ldr	r2, [pc, #16]	; (80098e4 <OnAckTimeoutTimerEvent+0x44>)
 80098d4:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 80098d8:	f043 0320 	orr.w	r3, r3, #32
 80098dc:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 80098e0:	e7ef      	b.n	80098c2 <OnAckTimeoutTimerEvent+0x22>
 80098e2:	bf00      	nop
 80098e4:	200007f0 	.word	0x200007f0
 80098e8:	20008000 	.word	0x20008000

080098ec <PrepareRxDoneAbort>:
{
 80098ec:	b508      	push	{r3, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 80098ee:	4b0e      	ldr	r3, [pc, #56]	; (8009928 <PrepareRxDoneAbort+0x3c>)
 80098f0:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 80098f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80098f8:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == true )
 80098fc:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8009900:	b973      	cbnz	r3, 8009920 <PrepareRxDoneAbort+0x34>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 8009902:	4b09      	ldr	r3, [pc, #36]	; (8009928 <PrepareRxDoneAbort+0x3c>)
 8009904:	f893 2485 	ldrb.w	r2, [r3, #1157]	; 0x485
 8009908:	f042 0202 	orr.w	r2, r2, #2
 800990c:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
    MacCtx.MacFlags.Bits.MacDone = 1;
 8009910:	b2d2      	uxtb	r2, r2
 8009912:	f042 0220 	orr.w	r2, r2, #32
 8009916:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
    UpdateRxSlotIdleState( );
 800991a:	f7ff fdbd 	bl	8009498 <UpdateRxSlotIdleState>
}
 800991e:	bd08      	pop	{r3, pc}
        OnAckTimeoutTimerEvent( NULL );
 8009920:	2000      	movs	r0, #0
 8009922:	f7ff ffbd 	bl	80098a0 <OnAckTimeoutTimerEvent>
 8009926:	e7ec      	b.n	8009902 <PrepareRxDoneAbort+0x16>
 8009928:	200007f0 	.word	0x200007f0

0800992c <LoRaMacCheckForBeaconAcquisition>:
{
 800992c:	b508      	push	{r3, lr}
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800992e:	200c      	movs	r0, #12
 8009930:	f003 fa42 	bl	800cdb8 <LoRaMacConfirmQueueIsCmdActive>
 8009934:	b188      	cbz	r0, 800995a <LoRaMacCheckForBeaconAcquisition+0x2e>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8009936:	4b0b      	ldr	r3, [pc, #44]	; (8009964 <LoRaMacCheckForBeaconAcquisition+0x38>)
 8009938:	f893 0485 	ldrb.w	r0, [r3, #1157]	; 0x485
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800993c:	f010 0f01 	tst.w	r0, #1
 8009940:	d10d      	bne.n	800995e <LoRaMacCheckForBeaconAcquisition+0x32>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8009942:	f010 0004 	ands.w	r0, r0, #4
 8009946:	d009      	beq.n	800995c <LoRaMacCheckForBeaconAcquisition+0x30>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009948:	461a      	mov	r2, r3
 800994a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800994e:	f023 0302 	bic.w	r3, r3, #2
 8009952:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 8009956:	2001      	movs	r0, #1
 8009958:	e000      	b.n	800995c <LoRaMacCheckForBeaconAcquisition+0x30>
    return 0x00;
 800995a:	2000      	movs	r0, #0
}
 800995c:	bd08      	pop	{r3, pc}
    return 0x00;
 800995e:	2000      	movs	r0, #0
 8009960:	e7fc      	b.n	800995c <LoRaMacCheckForBeaconAcquisition+0x30>
 8009962:	bf00      	nop
 8009964:	200007f0 	.word	0x200007f0

08009968 <GetFCntDown>:
{
 8009968:	b538      	push	{r3, r4, r5, lr}
 800996a:	9c05      	ldr	r4, [sp, #20]
 800996c:	9d06      	ldr	r5, [sp, #24]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800996e:	b302      	cbz	r2, 80099b2 <GetFCntDown+0x4a>
 8009970:	4694      	mov	ip, r2
 8009972:	b304      	cbz	r4, 80099b6 <GetFCntDown+0x4e>
 8009974:	b30d      	cbz	r5, 80099ba <GetFCntDown+0x52>
    switch( addrID )
 8009976:	b188      	cbz	r0, 800999c <GetFCntDown+0x34>
 8009978:	2801      	cmp	r0, #1
 800997a:	d120      	bne.n	80099be <GetFCntDown+0x56>
            if( lrWanVersion.Fields.Minor == 1 )
 800997c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8009980:	2a01      	cmp	r2, #1
 8009982:	d002      	beq.n	800998a <GetFCntDown+0x22>
                *fCntID = FCNT_DOWN;
 8009984:	2303      	movs	r3, #3
 8009986:	7023      	strb	r3, [r4, #0]
 8009988:	e00a      	b.n	80099a0 <GetFCntDown+0x38>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800998a:	b121      	cbz	r1, 8009996 <GetFCntDown+0x2e>
 800998c:	2903      	cmp	r1, #3
 800998e:	d002      	beq.n	8009996 <GetFCntDown+0x2e>
                    *fCntID = N_FCNT_DOWN;
 8009990:	2301      	movs	r3, #1
 8009992:	7023      	strb	r3, [r4, #0]
 8009994:	e004      	b.n	80099a0 <GetFCntDown+0x38>
                    *fCntID = A_FCNT_DOWN;
 8009996:	2302      	movs	r3, #2
 8009998:	7023      	strb	r3, [r4, #0]
 800999a:	e001      	b.n	80099a0 <GetFCntDown+0x38>
            *fCntID = MC_FCNT_DOWN_0;
 800999c:	2304      	movs	r3, #4
 800999e:	7023      	strb	r3, [r4, #0]
    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 80099a0:	462b      	mov	r3, r5
 80099a2:	f8bc 200e 	ldrh.w	r2, [ip, #14]
 80099a6:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80099aa:	7820      	ldrb	r0, [r4, #0]
 80099ac:	f003 fc26 	bl	800d1fc <LoRaMacCryptoGetFCntDown>
}
 80099b0:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 80099b2:	200a      	movs	r0, #10
 80099b4:	e7fc      	b.n	80099b0 <GetFCntDown+0x48>
 80099b6:	200a      	movs	r0, #10
 80099b8:	e7fa      	b.n	80099b0 <GetFCntDown+0x48>
 80099ba:	200a      	movs	r0, #10
 80099bc:	e7f8      	b.n	80099b0 <GetFCntDown+0x48>
    switch( addrID )
 80099be:	2005      	movs	r0, #5
 80099c0:	e7f6      	b.n	80099b0 <GetFCntDown+0x48>

080099c2 <RemoveMacCommands>:
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 80099c2:	2801      	cmp	r0, #1
 80099c4:	d900      	bls.n	80099c8 <RemoveMacCommands+0x6>
 80099c6:	4770      	bx	lr
{
 80099c8:	b508      	push	{r3, lr}
        if( request == MCPS_CONFIRMED )
 80099ca:	2a01      	cmp	r2, #1
 80099cc:	d105      	bne.n	80099da <RemoveMacCommands+0x18>
            if( fCtrl.Bits.Ack == 1 )
 80099ce:	f011 0f20 	tst.w	r1, #32
 80099d2:	d004      	beq.n	80099de <RemoveMacCommands+0x1c>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 80099d4:	f003 f88c 	bl	800caf0 <LoRaMacCommandsRemoveStickyAnsCmds>
 80099d8:	e001      	b.n	80099de <RemoveMacCommands+0x1c>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 80099da:	f003 f889 	bl	800caf0 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 80099de:	bd08      	pop	{r3, pc}

080099e0 <ProcessMacCommands>:
{
 80099e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099e4:	b08f      	sub	sp, #60	; 0x3c
 80099e6:	4605      	mov	r5, r0
 80099e8:	460c      	mov	r4, r1
 80099ea:	4616      	mov	r6, r2
 80099ec:	4698      	mov	r8, r3
    uint8_t status = 0;
 80099ee:	2700      	movs	r7, #0
 80099f0:	f88d 702f 	strb.w	r7, [sp, #47]	; 0x2f
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80099f4:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
    while( macIndex < commandsSize )
 80099f8:	42b4      	cmp	r4, r6
 80099fa:	f080 82c4 	bcs.w	8009f86 <ProcessMacCommands+0x5a6>
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 80099fe:	5d28      	ldrb	r0, [r5, r4]
 8009a00:	f003 f8de 	bl	800cbc0 <LoRaMacCommandsGetCmdSize>
 8009a04:	4420      	add	r0, r4
 8009a06:	42b0      	cmp	r0, r6
 8009a08:	f300 82bd 	bgt.w	8009f86 <ProcessMacCommands+0x5a6>
        switch( payload[macIndex++] )
 8009a0c:	f104 0901 	add.w	r9, r4, #1
 8009a10:	fa5f f989 	uxtb.w	r9, r9
 8009a14:	5d29      	ldrb	r1, [r5, r4]
 8009a16:	3902      	subs	r1, #2
 8009a18:	2911      	cmp	r1, #17
 8009a1a:	f200 82b4 	bhi.w	8009f86 <ProcessMacCommands+0x5a6>
 8009a1e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8009a22:	0012      	.short	0x0012
 8009a24:	00920029 	.word	0x00920029
 8009a28:	00ee00a6 	.word	0x00ee00a6
 8009a2c:	01400106 	.word	0x01400106
 8009a30:	01ad0157 	.word	0x01ad0157
 8009a34:	02b202b2 	.word	0x02b202b2
 8009a38:	02b201de 	.word	0x02b201de
 8009a3c:	023e02b2 	.word	0x023e02b2
 8009a40:	02750255 	.word	0x02750255
 8009a44:	0291      	.short	0x0291
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8009a46:	2004      	movs	r0, #4
 8009a48:	f003 f9b6 	bl	800cdb8 <LoRaMacConfirmQueueIsCmdActive>
 8009a4c:	b908      	cbnz	r0, 8009a52 <ProcessMacCommands+0x72>
        switch( payload[macIndex++] )
 8009a4e:	464c      	mov	r4, r9
 8009a50:	e7d2      	b.n	80099f8 <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8009a52:	2104      	movs	r1, #4
 8009a54:	2000      	movs	r0, #0
 8009a56:	f003 f963 	bl	800cd20 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8009a5a:	1ca3      	adds	r3, r4, #2
 8009a5c:	b2db      	uxtb	r3, r3
 8009a5e:	f815 1009 	ldrb.w	r1, [r5, r9]
 8009a62:	4ac2      	ldr	r2, [pc, #776]	; (8009d6c <ProcessMacCommands+0x38c>)
 8009a64:	f882 1454 	strb.w	r1, [r2, #1108]	; 0x454
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8009a68:	3403      	adds	r4, #3
 8009a6a:	b2e4      	uxtb	r4, r4
 8009a6c:	5ceb      	ldrb	r3, [r5, r3]
 8009a6e:	f882 3455 	strb.w	r3, [r2, #1109]	; 0x455
 8009a72:	e7c1      	b.n	80099f8 <ProcessMacCommands+0x18>
                int8_t linkAdrDatarate = DR_0;
 8009a74:	2300      	movs	r3, #0
 8009a76:	f88d 300a 	strb.w	r3, [sp, #10]
                int8_t linkAdrTxPower = TX_POWER_0;
 8009a7a:	f88d 300b 	strb.w	r3, [sp, #11]
                uint8_t linkAdrNbRep = 0;
 8009a7e:	f88d 300c 	strb.w	r3, [sp, #12]
                uint8_t linkAdrNbBytesParsed = 0;
 8009a82:	f88d 3014 	strb.w	r3, [sp, #20]
                if( adrBlockFound == false )
 8009a86:	b10f      	cbz	r7, 8009a8c <ProcessMacCommands+0xac>
                break;
 8009a88:	464c      	mov	r4, r9
 8009a8a:	e7b5      	b.n	80099f8 <ProcessMacCommands+0x18>
                    linkAdrReq.Payload = &payload[macIndex - 1];
 8009a8c:	f109 33ff 	add.w	r3, r9, #4294967295
 8009a90:	442b      	add	r3, r5
 8009a92:	9308      	str	r3, [sp, #32]
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8009a94:	eba6 0309 	sub.w	r3, r6, r9
 8009a98:	3301      	adds	r3, #1
 8009a9a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8009a9e:	48b4      	ldr	r0, [pc, #720]	; (8009d70 <ProcessMacCommands+0x390>)
 8009aa0:	f890 3106 	ldrb.w	r3, [r0, #262]	; 0x106
 8009aa4:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009aa8:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8009aac:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8009ab0:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
 8009ab4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8009ab8:	f990 3038 	ldrsb.w	r3, [r0, #56]	; 0x38
 8009abc:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8009ac0:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8009ac4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 8009ac8:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8009acc:	9307      	str	r3, [sp, #28]
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 8009ace:	ab05      	add	r3, sp, #20
 8009ad0:	9301      	str	r3, [sp, #4]
 8009ad2:	ab03      	add	r3, sp, #12
 8009ad4:	9300      	str	r3, [sp, #0]
 8009ad6:	f10d 030b 	add.w	r3, sp, #11
 8009ada:	f10d 020a 	add.w	r2, sp, #10
 8009ade:	a907      	add	r1, sp, #28
 8009ae0:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8009ae4:	f003 ff6b 	bl	800d9be <RegionLinkAdrReq>
 8009ae8:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                    if( ( status & 0x07 ) == 0x07 )
 8009aec:	f000 0007 	and.w	r0, r0, #7
 8009af0:	2807      	cmp	r0, #7
 8009af2:	d001      	beq.n	8009af8 <ProcessMacCommands+0x118>
{
 8009af4:	2400      	movs	r4, #0
 8009af6:	e015      	b.n	8009b24 <ProcessMacCommands+0x144>
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8009af8:	4b9d      	ldr	r3, [pc, #628]	; (8009d70 <ProcessMacCommands+0x390>)
 8009afa:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8009afe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 8009b02:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8009b06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 8009b0a:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8009b0e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8009b12:	e7ef      	b.n	8009af4 <ProcessMacCommands+0x114>
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8009b14:	2201      	movs	r2, #1
 8009b16:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 8009b1a:	2003      	movs	r0, #3
 8009b1c:	f002 ff88 	bl	800ca30 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8009b20:	3401      	adds	r4, #1
 8009b22:	b2e4      	uxtb	r4, r4
 8009b24:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8009b28:	4b92      	ldr	r3, [pc, #584]	; (8009d74 <ProcessMacCommands+0x394>)
 8009b2a:	fba3 1302 	umull	r1, r3, r3, r2
 8009b2e:	ebb4 0f93 	cmp.w	r4, r3, lsr #2
 8009b32:	d3ef      	bcc.n	8009b14 <ProcessMacCommands+0x134>
                    macIndex += linkAdrNbBytesParsed - 1;
 8009b34:	4491      	add	r9, r2
 8009b36:	fa5f f989 	uxtb.w	r9, r9
 8009b3a:	f109 39ff 	add.w	r9, r9, #4294967295
 8009b3e:	fa5f f989 	uxtb.w	r9, r9
                    adrBlockFound = true;
 8009b42:	2701      	movs	r7, #1
 8009b44:	e7a0      	b.n	8009a88 <ProcessMacCommands+0xa8>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 8009b46:	3402      	adds	r4, #2
 8009b48:	b2e4      	uxtb	r4, r4
 8009b4a:	f815 3009 	ldrb.w	r3, [r5, r9]
 8009b4e:	f003 030f 	and.w	r3, r3, #15
 8009b52:	4987      	ldr	r1, [pc, #540]	; (8009d70 <ProcessMacCommands+0x390>)
 8009b54:	f881 3107 	strb.w	r3, [r1, #263]	; 0x107
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8009b58:	2201      	movs	r2, #1
 8009b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8009b5e:	f8a1 310a 	strh.w	r3, [r1, #266]	; 0x10a
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8009b62:	2200      	movs	r2, #0
 8009b64:	a90b      	add	r1, sp, #44	; 0x2c
 8009b66:	2004      	movs	r0, #4
 8009b68:	f002 ff62 	bl	800ca30 <LoRaMacCommandsAddCmd>
                break;
 8009b6c:	e744      	b.n	80099f8 <ProcessMacCommands+0x18>
                status = 0x07;
 8009b6e:	2307      	movs	r3, #7
 8009b70:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8009b74:	f815 3009 	ldrb.w	r3, [r5, r9]
 8009b78:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8009b7c:	f88d 301d 	strb.w	r3, [sp, #29]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8009b80:	f915 3009 	ldrsb.w	r3, [r5, r9]
 8009b84:	f003 030f 	and.w	r3, r3, #15
 8009b88:	f88d 301c 	strb.w	r3, [sp, #28]
                macIndex++;
 8009b8c:	1ca3      	adds	r3, r4, #2
 8009b8e:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8009b90:	1ce1      	adds	r1, r4, #3
 8009b92:	b2c9      	uxtb	r1, r1
 8009b94:	5ceb      	ldrb	r3, [r5, r3]
 8009b96:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009b98:	1d22      	adds	r2, r4, #4
 8009b9a:	b2d2      	uxtb	r2, r2
 8009b9c:	5c69      	ldrb	r1, [r5, r1]
 8009b9e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009ba2:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009ba4:	3405      	adds	r4, #5
 8009ba6:	b2e4      	uxtb	r4, r4
 8009ba8:	5caa      	ldrb	r2, [r5, r2]
 8009baa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009bae:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency *= 100;
 8009bb0:	2264      	movs	r2, #100	; 0x64
 8009bb2:	fb02 f303 	mul.w	r3, r2, r3
 8009bb6:	9308      	str	r3, [sp, #32]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8009bb8:	a907      	add	r1, sp, #28
 8009bba:	4b6d      	ldr	r3, [pc, #436]	; (8009d70 <ProcessMacCommands+0x390>)
 8009bbc:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009bc0:	f003 ff19 	bl	800d9f6 <RegionRxParamSetupReq>
 8009bc4:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                if( ( status & 0x07 ) == 0x07 )
 8009bc8:	f000 0307 	and.w	r3, r0, #7
 8009bcc:	2b07      	cmp	r3, #7
 8009bce:	d007      	beq.n	8009be0 <ProcessMacCommands+0x200>
                macCmdPayload[0] = status;
 8009bd0:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	a90b      	add	r1, sp, #44	; 0x2c
 8009bd8:	2005      	movs	r0, #5
 8009bda:	f002 ff29 	bl	800ca30 <LoRaMacCommandsAddCmd>
                break;
 8009bde:	e70b      	b.n	80099f8 <ProcessMacCommands+0x18>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8009be0:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8009be4:	4b62      	ldr	r3, [pc, #392]	; (8009d70 <ProcessMacCommands+0x390>)
 8009be6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8009bea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8009bee:	9a08      	ldr	r2, [sp, #32]
 8009bf0:	665a      	str	r2, [r3, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8009bf2:	66da      	str	r2, [r3, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8009bf4:	f89d 201d 	ldrb.w	r2, [sp, #29]
 8009bf8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8009bfc:	e7e8      	b.n	8009bd0 <ProcessMacCommands+0x1f0>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8009bfe:	4b5b      	ldr	r3, [pc, #364]	; (8009d6c <ProcessMacCommands+0x38c>)
 8009c00:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8009c04:	b17b      	cbz	r3, 8009c26 <ProcessMacCommands+0x246>
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	b17b      	cbz	r3, 8009c2a <ProcessMacCommands+0x24a>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8009c0a:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 8009c0c:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8009c10:	f008 033f 	and.w	r3, r8, #63	; 0x3f
 8009c14:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8009c18:	2202      	movs	r2, #2
 8009c1a:	a90b      	add	r1, sp, #44	; 0x2c
 8009c1c:	2006      	movs	r0, #6
 8009c1e:	f002 ff07 	bl	800ca30 <LoRaMacCommandsAddCmd>
        switch( payload[macIndex++] )
 8009c22:	464c      	mov	r4, r9
                break;
 8009c24:	e6e8      	b.n	80099f8 <ProcessMacCommands+0x18>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8009c26:	20ff      	movs	r0, #255	; 0xff
 8009c28:	e7f0      	b.n	8009c0c <ProcessMacCommands+0x22c>
 8009c2a:	20ff      	movs	r0, #255	; 0xff
 8009c2c:	e7ee      	b.n	8009c0c <ProcessMacCommands+0x22c>
                status = 0x03;
 8009c2e:	2303      	movs	r3, #3
 8009c30:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                newChannelReq.ChannelId = payload[macIndex++];
 8009c34:	1ca3      	adds	r3, r4, #2
 8009c36:	b2db      	uxtb	r3, r3
 8009c38:	f915 2009 	ldrsb.w	r2, [r5, r9]
 8009c3c:	f88d 2018 	strb.w	r2, [sp, #24]
                newChannelReq.NewChannel = &chParam;
 8009c40:	aa07      	add	r2, sp, #28
 8009c42:	9205      	str	r2, [sp, #20]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8009c44:	1ce2      	adds	r2, r4, #3
 8009c46:	b2d2      	uxtb	r2, r2
 8009c48:	5ceb      	ldrb	r3, [r5, r3]
 8009c4a:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009c4c:	1d21      	adds	r1, r4, #4
 8009c4e:	b2c9      	uxtb	r1, r1
 8009c50:	5caa      	ldrb	r2, [r5, r2]
 8009c52:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009c56:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009c58:	1d62      	adds	r2, r4, #5
 8009c5a:	b2d2      	uxtb	r2, r2
 8009c5c:	5c69      	ldrb	r1, [r5, r1]
 8009c5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8009c62:	9307      	str	r3, [sp, #28]
                chParam.Frequency *= 100;
 8009c64:	2164      	movs	r1, #100	; 0x64
 8009c66:	fb01 f303 	mul.w	r3, r1, r3
 8009c6a:	9307      	str	r3, [sp, #28]
                chParam.Rx1Frequency = 0;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	9308      	str	r3, [sp, #32]
                chParam.DrRange.Value = payload[macIndex++];
 8009c70:	3406      	adds	r4, #6
 8009c72:	b2e4      	uxtb	r4, r4
 8009c74:	56ab      	ldrsb	r3, [r5, r2]
 8009c76:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8009c7a:	a905      	add	r1, sp, #20
 8009c7c:	4b3c      	ldr	r3, [pc, #240]	; (8009d70 <ProcessMacCommands+0x390>)
 8009c7e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009c82:	f003 fec7 	bl	800da14 <RegionNewChannelReq>
 8009c86:	b2c3      	uxtb	r3, r0
 8009c88:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 8009c8c:	2800      	cmp	r0, #0
 8009c8e:	f6ff aeb3 	blt.w	80099f8 <ProcessMacCommands+0x18>
                    macCmdPayload[0] = status;
 8009c92:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8009c96:	2201      	movs	r2, #1
 8009c98:	a90b      	add	r1, sp, #44	; 0x2c
 8009c9a:	2007      	movs	r0, #7
 8009c9c:	f002 fec8 	bl	800ca30 <LoRaMacCommandsAddCmd>
                break;
 8009ca0:	e6aa      	b.n	80099f8 <ProcessMacCommands+0x18>
                uint8_t delay = payload[macIndex++] & 0x0F;
 8009ca2:	3402      	adds	r4, #2
 8009ca4:	b2e4      	uxtb	r4, r4
 8009ca6:	f815 3009 	ldrb.w	r3, [r5, r9]
                if( delay == 0 )
 8009caa:	f013 030f 	ands.w	r3, r3, #15
 8009cae:	d100      	bne.n	8009cb2 <ProcessMacCommands+0x2d2>
                    delay++;
 8009cb0:	3301      	adds	r3, #1
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8009cb2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009cb6:	fb02 f303 	mul.w	r3, r2, r3
 8009cba:	4a2d      	ldr	r2, [pc, #180]	; (8009d70 <ProcessMacCommands+0x390>)
 8009cbc:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8009cbe:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8009cc2:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	a90b      	add	r1, sp, #44	; 0x2c
 8009cc8:	2008      	movs	r0, #8
 8009cca:	f002 feb1 	bl	800ca30 <LoRaMacCommandsAddCmd>
                break;
 8009cce:	e693      	b.n	80099f8 <ProcessMacCommands+0x18>
                uint8_t eirpDwellTime = payload[macIndex++];
 8009cd0:	3402      	adds	r4, #2
 8009cd2:	b2e4      	uxtb	r4, r4
 8009cd4:	f815 3009 	ldrb.w	r3, [r5, r9]
                txParamSetupReq.UplinkDwellTime = 0;
 8009cd8:	2200      	movs	r2, #0
 8009cda:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.DownlinkDwellTime = 0;
 8009cde:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8009ce2:	f013 0f20 	tst.w	r3, #32
 8009ce6:	d002      	beq.n	8009cee <ProcessMacCommands+0x30e>
                    txParamSetupReq.DownlinkDwellTime = 1;
 8009ce8:	2201      	movs	r2, #1
 8009cea:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8009cee:	f013 0f10 	tst.w	r3, #16
 8009cf2:	d002      	beq.n	8009cfa <ProcessMacCommands+0x31a>
                    txParamSetupReq.UplinkDwellTime = 1;
 8009cf4:	2201      	movs	r2, #1
 8009cf6:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8009cfa:	f003 030f 	and.w	r3, r3, #15
 8009cfe:	f88d 300e 	strb.w	r3, [sp, #14]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8009d02:	a903      	add	r1, sp, #12
 8009d04:	4b1a      	ldr	r3, [pc, #104]	; (8009d70 <ProcessMacCommands+0x390>)
 8009d06:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009d0a:	f003 fe92 	bl	800da32 <RegionTxParamSetupReq>
 8009d0e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009d12:	f43f ae71 	beq.w	80099f8 <ProcessMacCommands+0x18>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8009d16:	f89d a00c 	ldrb.w	sl, [sp, #12]
 8009d1a:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8009d70 <ProcessMacCommands+0x390>
 8009d1e:	f889 a074 	strb.w	sl, [r9, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8009d22:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8009d26:	f889 3075 	strb.w	r3, [r9, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8009d2a:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8009d2e:	4a12      	ldr	r2, [pc, #72]	; (8009d78 <ProcessMacCommands+0x398>)
 8009d30:	5cd0      	ldrb	r0, [r2, r3]
 8009d32:	f7f6 fe53 	bl	80009dc <__aeabi_ui2f>
 8009d36:	f8c9 0078 	str.w	r0, [r9, #120]	; 0x78
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8009d3a:	2302      	movs	r3, #2
 8009d3c:	f88d 301c 	strb.w	r3, [sp, #28]
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009d40:	f88d a01e 	strb.w	sl, [sp, #30]
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009d44:	a907      	add	r1, sp, #28
 8009d46:	f899 0040 	ldrb.w	r0, [r9, #64]	; 0x40
 8009d4a:	f003 fda0 	bl	800d88e <RegionGetPhyParam>
 8009d4e:	9005      	str	r0, [sp, #20]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8009d50:	b240      	sxtb	r0, r0
 8009d52:	f999 3039 	ldrsb.w	r3, [r9, #57]	; 0x39
 8009d56:	4298      	cmp	r0, r3
 8009d58:	bfb8      	it	lt
 8009d5a:	4618      	movlt	r0, r3
 8009d5c:	f889 0039 	strb.w	r0, [r9, #57]	; 0x39
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8009d60:	2200      	movs	r2, #0
 8009d62:	a90b      	add	r1, sp, #44	; 0x2c
 8009d64:	2009      	movs	r0, #9
 8009d66:	f002 fe63 	bl	800ca30 <LoRaMacCommandsAddCmd>
                break;
 8009d6a:	e645      	b.n	80099f8 <ProcessMacCommands+0x18>
 8009d6c:	200007f0 	.word	0x200007f0
 8009d70:	20008000 	.word	0x20008000
 8009d74:	cccccccd 	.word	0xcccccccd
 8009d78:	0801460c 	.word	0x0801460c
                status = 0x03;
 8009d7c:	2303      	movs	r3, #3
 8009d7e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                dlChannelReq.ChannelId = payload[macIndex++];
 8009d82:	1ca3      	adds	r3, r4, #2
 8009d84:	b2db      	uxtb	r3, r3
 8009d86:	f815 2009 	ldrb.w	r2, [r5, r9]
 8009d8a:	f88d 201c 	strb.w	r2, [sp, #28]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8009d8e:	1ce1      	adds	r1, r4, #3
 8009d90:	b2c9      	uxtb	r1, r1
 8009d92:	5ceb      	ldrb	r3, [r5, r3]
 8009d94:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009d96:	1d22      	adds	r2, r4, #4
 8009d98:	b2d2      	uxtb	r2, r2
 8009d9a:	5c69      	ldrb	r1, [r5, r1]
 8009d9c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009da0:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009da2:	3405      	adds	r4, #5
 8009da4:	b2e4      	uxtb	r4, r4
 8009da6:	5caa      	ldrb	r2, [r5, r2]
 8009da8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009dac:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency *= 100;
 8009dae:	2264      	movs	r2, #100	; 0x64
 8009db0:	fb02 f303 	mul.w	r3, r2, r3
 8009db4:	9308      	str	r3, [sp, #32]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8009db6:	a907      	add	r1, sp, #28
 8009db8:	4b74      	ldr	r3, [pc, #464]	; (8009f8c <ProcessMacCommands+0x5ac>)
 8009dba:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009dbe:	f003 fe47 	bl	800da50 <RegionDlChannelReq>
 8009dc2:	b2c3      	uxtb	r3, r0
 8009dc4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 8009dc8:	2800      	cmp	r0, #0
 8009dca:	f6ff ae15 	blt.w	80099f8 <ProcessMacCommands+0x18>
                    macCmdPayload[0] = status;
 8009dce:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	a90b      	add	r1, sp, #44	; 0x2c
 8009dd6:	200a      	movs	r0, #10
 8009dd8:	f002 fe2a 	bl	800ca30 <LoRaMacCommandsAddCmd>
                break;
 8009ddc:	e60c      	b.n	80099f8 <ProcessMacCommands+0x18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8009dde:	200a      	movs	r0, #10
 8009de0:	f002 ffea 	bl	800cdb8 <LoRaMacConfirmQueueIsCmdActive>
 8009de4:	b908      	cbnz	r0, 8009dea <ProcessMacCommands+0x40a>
        switch( payload[macIndex++] )
 8009de6:	464c      	mov	r4, r9
 8009de8:	e606      	b.n	80099f8 <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8009dea:	210a      	movs	r1, #10
 8009dec:	2000      	movs	r0, #0
 8009dee:	f002 ff97 	bl	800cd20 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 8009df2:	a803      	add	r0, sp, #12
 8009df4:	2300      	movs	r3, #0
 8009df6:	9303      	str	r3, [sp, #12]
 8009df8:	9304      	str	r3, [sp, #16]
                    SysTime_t sysTime = { 0 };
 8009dfa:	f10d 0a14 	add.w	sl, sp, #20
 8009dfe:	9305      	str	r3, [sp, #20]
 8009e00:	9306      	str	r3, [sp, #24]
                    SysTime_t sysTimeCurrent = { 0 };
 8009e02:	f10d 0b1c 	add.w	fp, sp, #28
 8009e06:	9307      	str	r3, [sp, #28]
 8009e08:	9308      	str	r3, [sp, #32]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8009e0a:	1ca1      	adds	r1, r4, #2
 8009e0c:	b2c9      	uxtb	r1, r1
 8009e0e:	f815 3009 	ldrb.w	r3, [r5, r9]
 8009e12:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8009e14:	1ce2      	adds	r2, r4, #3
 8009e16:	b2d2      	uxtb	r2, r2
 8009e18:	5c69      	ldrb	r1, [r5, r1]
 8009e1a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009e1e:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8009e20:	1d21      	adds	r1, r4, #4
 8009e22:	b2c9      	uxtb	r1, r1
 8009e24:	5caa      	ldrb	r2, [r5, r2]
 8009e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e2a:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8009e2c:	1d62      	adds	r2, r4, #5
 8009e2e:	b2d2      	uxtb	r2, r2
 8009e30:	5c69      	ldrb	r1, [r5, r1]
 8009e32:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8009e36:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8009e38:	3406      	adds	r4, #6
 8009e3a:	b2e4      	uxtb	r4, r4
 8009e3c:	5caa      	ldrb	r2, [r5, r2]
 8009e3e:	f8ad 2010 	strh.w	r2, [sp, #16]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8009e42:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009e46:	fb01 f202 	mul.w	r2, r1, r2
 8009e4a:	0a12      	lsrs	r2, r2, #8
 8009e4c:	f8ad 2010 	strh.w	r2, [sp, #16]
                    sysTime = gpsEpochTime;
 8009e50:	c803      	ldmia	r0, {r0, r1}
 8009e52:	e88a 0003 	stmia.w	sl, {r0, r1}
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8009e56:	4a4e      	ldr	r2, [pc, #312]	; (8009f90 <ProcessMacCommands+0x5b0>)
 8009e58:	441a      	add	r2, r3
 8009e5a:	9205      	str	r2, [sp, #20]
                    sysTimeCurrent = SysTimeGet( );
 8009e5c:	4658      	mov	r0, fp
 8009e5e:	f008 ff55 	bl	8012d0c <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8009e62:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8009f94 <ProcessMacCommands+0x5b4>
 8009e66:	f8d9 333c 	ldr.w	r3, [r9, #828]	; 0x33c
 8009e6a:	9300      	str	r3, [sp, #0]
 8009e6c:	f8d9 3338 	ldr.w	r3, [r9, #824]	; 0x338
 8009e70:	e89a 0006 	ldmia.w	sl, {r1, r2}
 8009e74:	a80c      	add	r0, sp, #48	; 0x30
 8009e76:	f008 ff08 	bl	8012c8a <SysTimeSub>
 8009e7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e7c:	9300      	str	r3, [sp, #0]
 8009e7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e80:	e89b 0006 	ldmia.w	fp, {r1, r2}
 8009e84:	4650      	mov	r0, sl
 8009e86:	f008 fee1 	bl	8012c4c <SysTimeAdd>
                    SysTimeSet( sysTime );
 8009e8a:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8009e8e:	f008 ff1b 	bl	8012cc8 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8009e92:	f002 fd35 	bl	800c900 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8009e96:	2301      	movs	r3, #1
 8009e98:	f889 3434 	strb.w	r3, [r9, #1076]	; 0x434
 8009e9c:	e5ac      	b.n	80099f8 <ProcessMacCommands+0x18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8009e9e:	200d      	movs	r0, #13
 8009ea0:	f002 ff8a 	bl	800cdb8 <LoRaMacConfirmQueueIsCmdActive>
 8009ea4:	b908      	cbnz	r0, 8009eaa <ProcessMacCommands+0x4ca>
        switch( payload[macIndex++] )
 8009ea6:	464c      	mov	r4, r9
 8009ea8:	e5a6      	b.n	80099f8 <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8009eaa:	210d      	movs	r1, #13
 8009eac:	2000      	movs	r0, #0
 8009eae:	f002 ff37 	bl	800cd20 <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8009eb2:	4b38      	ldr	r3, [pc, #224]	; (8009f94 <ProcessMacCommands+0x5b4>)
 8009eb4:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8009eb8:	3b04      	subs	r3, #4
 8009eba:	b2db      	uxtb	r3, r3
 8009ebc:	2b01      	cmp	r3, #1
 8009ebe:	d801      	bhi.n	8009ec4 <ProcessMacCommands+0x4e4>
        switch( payload[macIndex++] )
 8009ec0:	464c      	mov	r4, r9
 8009ec2:	e599      	b.n	80099f8 <ProcessMacCommands+0x18>
                        LoRaMacClassBPingSlotInfoAns( );
 8009ec4:	f002 fd18 	bl	800c8f8 <LoRaMacClassBPingSlotInfoAns>
        switch( payload[macIndex++] )
 8009ec8:	464c      	mov	r4, r9
 8009eca:	e595      	b.n	80099f8 <ProcessMacCommands+0x18>
                frequency = ( uint32_t )payload[macIndex++];
 8009ecc:	1ca2      	adds	r2, r4, #2
 8009ece:	b2d2      	uxtb	r2, r2
 8009ed0:	f815 3009 	ldrb.w	r3, [r5, r9]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8009ed4:	1ce1      	adds	r1, r4, #3
 8009ed6:	b2c9      	uxtb	r1, r1
 8009ed8:	5caa      	ldrb	r2, [r5, r2]
 8009eda:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8009ede:	1d22      	adds	r2, r4, #4
 8009ee0:	b2d2      	uxtb	r2, r2
 8009ee2:	5c69      	ldrb	r1, [r5, r1]
 8009ee4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                datarate = payload[macIndex++] & 0x0F;
 8009ee8:	3405      	adds	r4, #5
 8009eea:	b2e4      	uxtb	r4, r4
 8009eec:	5ca8      	ldrb	r0, [r5, r2]
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8009eee:	2164      	movs	r1, #100	; 0x64
 8009ef0:	fb03 f101 	mul.w	r1, r3, r1
 8009ef4:	f000 000f 	and.w	r0, r0, #15
 8009ef8:	f002 fcff 	bl	800c8fa <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 8009efc:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 8009f00:	2201      	movs	r2, #1
 8009f02:	a90b      	add	r1, sp, #44	; 0x2c
 8009f04:	2011      	movs	r0, #17
 8009f06:	f002 fd93 	bl	800ca30 <LoRaMacCommandsAddCmd>
                break;
 8009f0a:	e575      	b.n	80099f8 <ProcessMacCommands+0x18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8009f0c:	200e      	movs	r0, #14
 8009f0e:	f002 ff53 	bl	800cdb8 <LoRaMacConfirmQueueIsCmdActive>
 8009f12:	b908      	cbnz	r0, 8009f18 <ProcessMacCommands+0x538>
        switch( payload[macIndex++] )
 8009f14:	464c      	mov	r4, r9
 8009f16:	e56f      	b.n	80099f8 <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8009f18:	210e      	movs	r1, #14
 8009f1a:	2000      	movs	r0, #0
 8009f1c:	f002 ff00 	bl	800cd20 <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8009f20:	1ca2      	adds	r2, r4, #2
 8009f22:	b2d2      	uxtb	r2, r2
 8009f24:	f815 0009 	ldrb.w	r0, [r5, r9]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8009f28:	1ce3      	adds	r3, r4, #3
 8009f2a:	b2db      	uxtb	r3, r3
 8009f2c:	f815 c002 	ldrb.w	ip, [r5, r2]
                    beaconTimingChannel = payload[macIndex++];
 8009f30:	3404      	adds	r4, #4
 8009f32:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8009f34:	4a18      	ldr	r2, [pc, #96]	; (8009f98 <ProcessMacCommands+0x5b8>)
 8009f36:	6812      	ldr	r2, [r2, #0]
 8009f38:	5ce9      	ldrb	r1, [r5, r3]
 8009f3a:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
 8009f3e:	f002 fcde 	bl	800c8fe <LoRaMacClassBBeaconTimingAns>
 8009f42:	e559      	b.n	80099f8 <ProcessMacCommands+0x18>
                    frequency = ( uint32_t )payload[macIndex++];
 8009f44:	1ca1      	adds	r1, r4, #2
 8009f46:	b2c9      	uxtb	r1, r1
 8009f48:	f815 3009 	ldrb.w	r3, [r5, r9]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8009f4c:	1ce2      	adds	r2, r4, #3
 8009f4e:	b2d2      	uxtb	r2, r2
 8009f50:	5c68      	ldrb	r0, [r5, r1]
 8009f52:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8009f56:	3404      	adds	r4, #4
 8009f58:	b2e4      	uxtb	r4, r4
 8009f5a:	5ca8      	ldrb	r0, [r5, r2]
 8009f5c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8009f60:	2064      	movs	r0, #100	; 0x64
 8009f62:	fb03 f000 	mul.w	r0, r3, r0
 8009f66:	f002 fccc 	bl	800c902 <LoRaMacClassBBeaconFreqReq>
 8009f6a:	b140      	cbz	r0, 8009f7e <ProcessMacCommands+0x59e>
                        macCmdPayload[0] = 1;
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8009f72:	2201      	movs	r2, #1
 8009f74:	a90b      	add	r1, sp, #44	; 0x2c
 8009f76:	2013      	movs	r0, #19
 8009f78:	f002 fd5a 	bl	800ca30 <LoRaMacCommandsAddCmd>
                break;
 8009f7c:	e53c      	b.n	80099f8 <ProcessMacCommands+0x18>
                        macCmdPayload[0] = 0;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8009f84:	e7f5      	b.n	8009f72 <ProcessMacCommands+0x592>
}
 8009f86:	b00f      	add	sp, #60	; 0x3c
 8009f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f8c:	20008000 	.word	0x20008000
 8009f90:	12d53d80 	.word	0x12d53d80
 8009f94:	200007f0 	.word	0x200007f0
 8009f98:	20000cfc 	.word	0x20000cfc

08009f9c <ProcessRadioRxDone>:
{
 8009f9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009fa0:	b0a3      	sub	sp, #140	; 0x8c
    uint8_t *payload = RxDoneParams.Payload;
 8009fa2:	4bbc      	ldr	r3, [pc, #752]	; (800a294 <ProcessRadioRxDone+0x2f8>)
 8009fa4:	685e      	ldr	r6, [r3, #4]
    uint16_t size = RxDoneParams.Size;
 8009fa6:	891d      	ldrh	r5, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 8009fa8:	f9b3 900a 	ldrsh.w	r9, [r3, #10]
    int8_t snr = RxDoneParams.Snr;
 8009fac:	f993 700c 	ldrsb.w	r7, [r3, #12]
    uint32_t downLinkCounter = 0;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	9306      	str	r3, [sp, #24]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8009fb4:	4ab8      	ldr	r2, [pc, #736]	; (800a298 <ProcessRadioRxDone+0x2fc>)
 8009fb6:	f8d2 80d4 	ldr.w	r8, [r2, #212]	; 0xd4
    MacCtx.McpsConfirm.AckReceived = false;
 8009fba:	4cb8      	ldr	r4, [pc, #736]	; (800a29c <ProcessRadioRxDone+0x300>)
 8009fbc:	f884 343c 	strb.w	r3, [r4, #1084]	; 0x43c
    MacCtx.RxStatus.Rssi = rssi;
 8009fc0:	f8a4 9480 	strh.w	r9, [r4, #1152]	; 0x480
    MacCtx.RxStatus.Snr = snr;
 8009fc4:	f884 7482 	strb.w	r7, [r4, #1154]	; 0x482
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 8009fc8:	f894 2484 	ldrb.w	r2, [r4, #1156]	; 0x484
 8009fcc:	f884 2483 	strb.w	r2, [r4, #1155]	; 0x483
    MacCtx.McpsIndication.Port = 0;
 8009fd0:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
    MacCtx.McpsIndication.Multicast = 0;
 8009fd4:	f884 341e 	strb.w	r3, [r4, #1054]	; 0x41e
    MacCtx.McpsIndication.FramePending = 0;
 8009fd8:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
    MacCtx.McpsIndication.Buffer = NULL;
 8009fdc:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
    MacCtx.McpsIndication.BufferSize = 0;
 8009fe0:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
    MacCtx.McpsIndication.RxData = false;
 8009fe4:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
    MacCtx.McpsIndication.AckReceived = false;
 8009fe8:	f884 342a 	strb.w	r3, [r4, #1066]	; 0x42a
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8009fec:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8009ff0:	f884 341c 	strb.w	r3, [r4, #1052]	; 0x41c
    MacCtx.McpsIndication.DevAddress = 0;
 8009ff4:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8009ff8:	f884 3434 	strb.w	r3, [r4, #1076]	; 0x434
    Radio.Sleep( );
 8009ffc:	4ba8      	ldr	r3, [pc, #672]	; (800a2a0 <ProcessRadioRxDone+0x304>)
 8009ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a000:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800a002:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800a006:	f008 ff6f 	bl	8012ee8 <UTIL_TIMER_Stop>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800a00a:	4629      	mov	r1, r5
 800a00c:	4630      	mov	r0, r6
 800a00e:	f002 fc60 	bl	800c8d2 <LoRaMacClassBRxBeacon>
 800a012:	b998      	cbnz	r0, 800a03c <ProcessRadioRxDone+0xa0>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800a014:	4ba0      	ldr	r3, [pc, #640]	; (800a298 <ProcessRadioRxDone+0x2fc>)
 800a016:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d013      	beq.n	800a046 <ProcessRadioRxDone+0xaa>
    macHdr.Value = payload[pktHeaderLen++];
 800a01e:	7834      	ldrb	r4, [r6, #0]
    switch( macHdr.Bits.MType )
 800a020:	0963      	lsrs	r3, r4, #5
 800a022:	3b01      	subs	r3, #1
 800a024:	2b06      	cmp	r3, #6
 800a026:	f200 8281 	bhi.w	800a52c <ProcessRadioRxDone+0x590>
 800a02a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a02e:	0029      	.short	0x0029
 800a030:	00aa027f 	.word	0x00aa027f
 800a034:	00a6027f 	.word	0x00a6027f
 800a038:	0259027f 	.word	0x0259027f
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800a03c:	f8a4 9476 	strh.w	r9, [r4, #1142]	; 0x476
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800a040:	f884 7478 	strb.w	r7, [r4, #1144]	; 0x478
        return;
 800a044:	e287      	b.n	800a556 <ProcessRadioRxDone+0x5ba>
        if( LoRaMacClassBIsPingExpected( ) == true )
 800a046:	f002 fc48 	bl	800c8da <LoRaMacClassBIsPingExpected>
 800a04a:	b150      	cbz	r0, 800a062 <ProcessRadioRxDone+0xc6>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a04c:	2000      	movs	r0, #0
 800a04e:	f002 fc39 	bl	800c8c4 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800a052:	2000      	movs	r0, #0
 800a054:	f002 fc3b 	bl	800c8ce <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800a058:	4b90      	ldr	r3, [pc, #576]	; (800a29c <ProcessRadioRxDone+0x300>)
 800a05a:	2204      	movs	r2, #4
 800a05c:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
 800a060:	e7dd      	b.n	800a01e <ProcessRadioRxDone+0x82>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800a062:	f002 fc3c 	bl	800c8de <LoRaMacClassBIsMulticastExpected>
 800a066:	2800      	cmp	r0, #0
 800a068:	d0d9      	beq.n	800a01e <ProcessRadioRxDone+0x82>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a06a:	2000      	movs	r0, #0
 800a06c:	f002 fc2b 	bl	800c8c6 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800a070:	2000      	movs	r0, #0
 800a072:	f002 fc2d 	bl	800c8d0 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800a076:	4b89      	ldr	r3, [pc, #548]	; (800a29c <ProcessRadioRxDone+0x300>)
 800a078:	2205      	movs	r2, #5
 800a07a:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
 800a07e:	e7ce      	b.n	800a01e <ProcessRadioRxDone+0x82>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800a080:	2d10      	cmp	r5, #16
 800a082:	d95d      	bls.n	800a140 <ProcessRadioRxDone+0x1a4>
            macMsgJoinAccept.Buffer = payload;
 800a084:	9607      	str	r6, [sp, #28]
            macMsgJoinAccept.BufSize = size;
 800a086:	b2ed      	uxtb	r5, r5
 800a088:	f88d 5020 	strb.w	r5, [sp, #32]
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800a08c:	4b82      	ldr	r3, [pc, #520]	; (800a298 <ProcessRadioRxDone+0x2fc>)
 800a08e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800a092:	2b00      	cmp	r3, #0
 800a094:	d15b      	bne.n	800a14e <ProcessRadioRxDone+0x1b2>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800a096:	f006 fcf9 	bl	8010a8c <SecureElementGetJoinEui>
 800a09a:	4601      	mov	r1, r0
 800a09c:	aa07      	add	r2, sp, #28
 800a09e:	20ff      	movs	r0, #255	; 0xff
 800a0a0:	f003 fa1a 	bl	800d4d8 <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800a0a4:	2800      	cmp	r0, #0
 800a0a6:	d15e      	bne.n	800a166 <ProcessRadioRxDone+0x1ca>
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800a0a8:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 800a0ac:	4b7a      	ldr	r3, [pc, #488]	; (800a298 <ProcessRadioRxDone+0x2fc>)
 800a0ae:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800a0b2:	f89d 1026 	ldrb.w	r1, [sp, #38]	; 0x26
 800a0b6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800a0ba:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800a0be:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
 800a0c2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800a0c6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800a0ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0cc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800a0d0:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 800a0d4:	f3c2 1102 	ubfx	r1, r2, #4, #3
 800a0d8:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800a0dc:	f3c2 0203 	ubfx	r2, r2, #0, #4
 800a0e0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800a0e4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800a0e8:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 800a0ec:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800a0ee:	b90a      	cbnz	r2, 800a0f4 <ProcessRadioRxDone+0x158>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800a0f4:	4c68      	ldr	r4, [pc, #416]	; (800a298 <ProcessRadioRxDone+0x2fc>)
 800a0f6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a0f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a0fc:	fb02 f303 	mul.w	r3, r2, r3
 800a100:	6523      	str	r3, [r4, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800a102:	4413      	add	r3, r2
 800a104:	6563      	str	r3, [r4, #84]	; 0x54
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800a106:	2300      	movs	r3, #0
 800a108:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800a10c:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 800a110:	9320      	str	r3, [sp, #128]	; 0x80
                applyCFList.Size = size - 17;
 800a112:	3d11      	subs	r5, #17
 800a114:	f88d 5084 	strb.w	r5, [sp, #132]	; 0x84
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800a118:	a920      	add	r1, sp, #128	; 0x80
 800a11a:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a11e:	f003 fbfa 	bl	800d916 <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800a122:	2302      	movs	r3, #2
 800a124:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800a128:	2001      	movs	r0, #1
 800a12a:	f002 fe45 	bl	800cdb8 <LoRaMacConfirmQueueIsCmdActive>
 800a12e:	b9a8      	cbnz	r0, 800a15c <ProcessRadioRxDone+0x1c0>
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800a130:	4a5a      	ldr	r2, [pc, #360]	; (800a29c <ProcessRadioRxDone+0x300>)
 800a132:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800a136:	f043 0308 	orr.w	r3, r3, #8
 800a13a:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            break;
 800a13e:	e1e9      	b.n	800a514 <ProcessRadioRxDone+0x578>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a140:	4b56      	ldr	r3, [pc, #344]	; (800a29c <ProcessRadioRxDone+0x300>)
 800a142:	2201      	movs	r2, #1
 800a144:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800a148:	f7ff fbd0 	bl	80098ec <PrepareRxDoneAbort>
                return;
 800a14c:	e203      	b.n	800a556 <ProcessRadioRxDone+0x5ba>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a14e:	4b53      	ldr	r3, [pc, #332]	; (800a29c <ProcessRadioRxDone+0x300>)
 800a150:	2201      	movs	r2, #1
 800a152:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800a156:	f7ff fbc9 	bl	80098ec <PrepareRxDoneAbort>
                return;
 800a15a:	e1fc      	b.n	800a556 <ProcessRadioRxDone+0x5ba>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800a15c:	2101      	movs	r1, #1
 800a15e:	2000      	movs	r0, #0
 800a160:	f002 fdde 	bl	800cd20 <LoRaMacConfirmQueueSetStatus>
 800a164:	e7e4      	b.n	800a130 <ProcessRadioRxDone+0x194>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800a166:	2001      	movs	r0, #1
 800a168:	f002 fe26 	bl	800cdb8 <LoRaMacConfirmQueueIsCmdActive>
 800a16c:	2800      	cmp	r0, #0
 800a16e:	d0df      	beq.n	800a130 <ProcessRadioRxDone+0x194>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800a170:	2101      	movs	r1, #1
 800a172:	2007      	movs	r0, #7
 800a174:	f002 fdd4 	bl	800cd20 <LoRaMacConfirmQueueSetStatus>
 800a178:	e7da      	b.n	800a130 <ProcessRadioRxDone+0x194>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800a17a:	4b48      	ldr	r3, [pc, #288]	; (800a29c <ProcessRadioRxDone+0x300>)
 800a17c:	2201      	movs	r2, #1
 800a17e:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a182:	4b45      	ldr	r3, [pc, #276]	; (800a298 <ProcessRadioRxDone+0x2fc>)
 800a184:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800a188:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800a18c:	4a43      	ldr	r2, [pc, #268]	; (800a29c <ProcessRadioRxDone+0x300>)
 800a18e:	f992 2420 	ldrsb.w	r2, [r2, #1056]	; 0x420
 800a192:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800a196:	220d      	movs	r2, #13
 800a198:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800a19c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a1a0:	b113      	cbz	r3, 800a1a8 <ProcessRadioRxDone+0x20c>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800a1a2:	230e      	movs	r3, #14
 800a1a4:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a1a8:	a91e      	add	r1, sp, #120	; 0x78
 800a1aa:	4b3b      	ldr	r3, [pc, #236]	; (800a298 <ProcessRadioRxDone+0x2fc>)
 800a1ac:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a1b0:	f003 fb6d 	bl	800d88e <RegionGetPhyParam>
 800a1b4:	901d      	str	r0, [sp, #116]	; 0x74
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800a1b6:	f1a5 030d 	sub.w	r3, r5, #13
 800a1ba:	b21b      	sxth	r3, r3
 800a1bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a1c0:	b200      	sxth	r0, r0
 800a1c2:	4283      	cmp	r3, r0
 800a1c4:	dc01      	bgt.n	800a1ca <ProcessRadioRxDone+0x22e>
 800a1c6:	2d0b      	cmp	r5, #11
 800a1c8:	d806      	bhi.n	800a1d8 <ProcessRadioRxDone+0x23c>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a1ca:	4b34      	ldr	r3, [pc, #208]	; (800a29c <ProcessRadioRxDone+0x300>)
 800a1cc:	2201      	movs	r2, #1
 800a1ce:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800a1d2:	f7ff fb8b 	bl	80098ec <PrepareRxDoneAbort>
                return;
 800a1d6:	e1be      	b.n	800a556 <ProcessRadioRxDone+0x5ba>
            macMsgData.Buffer = payload;
 800a1d8:	9611      	str	r6, [sp, #68]	; 0x44
            macMsgData.BufSize = size;
 800a1da:	f88d 5048 	strb.w	r5, [sp, #72]	; 0x48
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800a1de:	4b31      	ldr	r3, [pc, #196]	; (800a2a4 <ProcessRadioRxDone+0x308>)
 800a1e0:	931a      	str	r3, [sp, #104]	; 0x68
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800a1e2:	23ff      	movs	r3, #255	; 0xff
 800a1e4:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800a1e8:	a811      	add	r0, sp, #68	; 0x44
 800a1ea:	f003 fa3b 	bl	800d664 <LoRaMacParserData>
 800a1ee:	2800      	cmp	r0, #0
 800a1f0:	d149      	bne.n	800a286 <ProcessRadioRxDone+0x2ea>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800a1f2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a1f4:	4b29      	ldr	r3, [pc, #164]	; (800a29c <ProcessRadioRxDone+0x300>)
 800a1f6:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800a1fa:	f10d 0116 	add.w	r1, sp, #22
 800a1fe:	a811      	add	r0, sp, #68	; 0x44
 800a200:	f7ff f9cc 	bl	800959c <DetermineFrameType>
 800a204:	4605      	mov	r5, r0
 800a206:	2800      	cmp	r0, #0
 800a208:	d14e      	bne.n	800a2a8 <ProcessRadioRxDone+0x30c>
            downLinkCounter = 0;
 800a20a:	2300      	movs	r3, #0
 800a20c:	9306      	str	r3, [sp, #24]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800a20e:	4603      	mov	r3, r0
 800a210:	2b00      	cmp	r3, #0
 800a212:	d050      	beq.n	800a2b6 <ProcessRadioRxDone+0x31a>
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800a214:	f04f 0901 	mov.w	r9, #1
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800a218:	2d01      	cmp	r5, #1
 800a21a:	d108      	bne.n	800a22e <ProcessRadioRxDone+0x292>
 800a21c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800a220:	2b03      	cmp	r3, #3
 800a222:	d174      	bne.n	800a30e <ProcessRadioRxDone+0x372>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800a224:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800a228:	f013 0f60 	tst.w	r3, #96	; 0x60
 800a22c:	d16f      	bne.n	800a30e <ProcessRadioRxDone+0x372>
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800a22e:	2315      	movs	r3, #21
 800a230:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a234:	4e18      	ldr	r6, [pc, #96]	; (800a298 <ProcessRadioRxDone+0x2fc>)
 800a236:	a91e      	add	r1, sp, #120	; 0x78
 800a238:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 800a23c:	f003 fb27 	bl	800d88e <RegionGetPhyParam>
 800a240:	901d      	str	r0, [sp, #116]	; 0x74
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 800a242:	ab06      	add	r3, sp, #24
 800a244:	9302      	str	r3, [sp, #8]
 800a246:	f10d 0317 	add.w	r3, sp, #23
 800a24a:	9301      	str	r3, [sp, #4]
 800a24c:	b280      	uxth	r0, r0
 800a24e:	9000      	str	r0, [sp, #0]
 800a250:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
 800a254:	aa11      	add	r2, sp, #68	; 0x44
 800a256:	f89d 1016 	ldrb.w	r1, [sp, #22]
 800a25a:	4648      	mov	r0, r9
 800a25c:	f7ff fb84 	bl	8009968 <GetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800a260:	2800      	cmp	r0, #0
 800a262:	d074      	beq.n	800a34e <ProcessRadioRxDone+0x3b2>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800a264:	2807      	cmp	r0, #7
 800a266:	d059      	beq.n	800a31c <ProcessRadioRxDone+0x380>
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800a268:	2808      	cmp	r0, #8
 800a26a:	d06b      	beq.n	800a344 <ProcessRadioRxDone+0x3a8>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a26c:	4b0b      	ldr	r3, [pc, #44]	; (800a29c <ProcessRadioRxDone+0x300>)
 800a26e:	2201      	movs	r2, #1
 800a270:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800a274:	9a06      	ldr	r2, [sp, #24]
 800a276:	4b09      	ldr	r3, [pc, #36]	; (800a29c <ProcessRadioRxDone+0x300>)
 800a278:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800a27c:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
                PrepareRxDoneAbort( );
 800a280:	f7ff fb34 	bl	80098ec <PrepareRxDoneAbort>
                return;
 800a284:	e167      	b.n	800a556 <ProcessRadioRxDone+0x5ba>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a286:	4b05      	ldr	r3, [pc, #20]	; (800a29c <ProcessRadioRxDone+0x300>)
 800a288:	2201      	movs	r2, #1
 800a28a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800a28e:	f7ff fb2d 	bl	80098ec <PrepareRxDoneAbort>
                return;
 800a292:	e160      	b.n	800a556 <ProcessRadioRxDone+0x5ba>
 800a294:	20000cfc 	.word	0x20000cfc
 800a298:	20008000 	.word	0x20008000
 800a29c:	200007f0 	.word	0x200007f0
 800a2a0:	08014cbc 	.word	0x08014cbc
 800a2a4:	20000a28 	.word	0x20000a28
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a2a8:	4bae      	ldr	r3, [pc, #696]	; (800a564 <ProcessRadioRxDone+0x5c8>)
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800a2b0:	f7ff fb1c 	bl	80098ec <PrepareRxDoneAbort>
                return;
 800a2b4:	e14f      	b.n	800a556 <ProcessRadioRxDone+0x5ba>
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	4aab      	ldr	r2, [pc, #684]	; (800a568 <ProcessRadioRxDone+0x5cc>)
 800a2ba:	212c      	movs	r1, #44	; 0x2c
 800a2bc:	fb01 2203 	mla	r2, r1, r3, r2
 800a2c0:	f8d2 20dc 	ldr.w	r2, [r2, #220]	; 0xdc
 800a2c4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a2c6:	428a      	cmp	r2, r1
 800a2c8:	d002      	beq.n	800a2d0 <ProcessRadioRxDone+0x334>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800a2ca:	3301      	adds	r3, #1
 800a2cc:	b2db      	uxtb	r3, r3
 800a2ce:	e79f      	b.n	800a210 <ProcessRadioRxDone+0x274>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800a2d0:	49a5      	ldr	r1, [pc, #660]	; (800a568 <ProcessRadioRxDone+0x5cc>)
 800a2d2:	262c      	movs	r6, #44	; 0x2c
 800a2d4:	fb06 1103 	mla	r1, r6, r3, r1
 800a2d8:	f891 10da 	ldrb.w	r1, [r1, #218]	; 0xda
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800a2dc:	2900      	cmp	r1, #0
 800a2de:	d0f4      	beq.n	800a2ca <ProcessRadioRxDone+0x32e>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800a2e0:	4ba1      	ldr	r3, [pc, #644]	; (800a568 <ProcessRadioRxDone+0x5cc>)
 800a2e2:	fb06 3000 	mla	r0, r6, r0, r3
 800a2e6:	f890 90db 	ldrb.w	r9, [r0, #219]	; 0xdb
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800a2ea:	f8d0 10f8 	ldr.w	r1, [r0, #248]	; 0xf8
 800a2ee:	6809      	ldr	r1, [r1, #0]
 800a2f0:	9106      	str	r1, [sp, #24]
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800a2f2:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800a2f6:	2b02      	cmp	r3, #2
 800a2f8:	d002      	beq.n	800a300 <ProcessRadioRxDone+0x364>
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800a2fa:	4690      	mov	r8, r2
                    multicast = 1;
 800a2fc:	2501      	movs	r5, #1
 800a2fe:	e78b      	b.n	800a218 <ProcessRadioRxDone+0x27c>
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800a300:	4b98      	ldr	r3, [pc, #608]	; (800a564 <ProcessRadioRxDone+0x5c8>)
 800a302:	2103      	movs	r1, #3
 800a304:	f883 1483 	strb.w	r1, [r3, #1155]	; 0x483
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800a308:	4690      	mov	r8, r2
                    multicast = 1;
 800a30a:	2501      	movs	r5, #1
 800a30c:	e784      	b.n	800a218 <ProcessRadioRxDone+0x27c>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a30e:	4b95      	ldr	r3, [pc, #596]	; (800a564 <ProcessRadioRxDone+0x5c8>)
 800a310:	2201      	movs	r2, #1
 800a312:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800a316:	f7ff fae9 	bl	80098ec <PrepareRxDoneAbort>
                return;
 800a31a:	e11c      	b.n	800a556 <ProcessRadioRxDone+0x5ba>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800a31c:	4b91      	ldr	r3, [pc, #580]	; (800a564 <ProcessRadioRxDone+0x5c8>)
 800a31e:	2208      	movs	r2, #8
 800a320:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 800a324:	f896 3116 	ldrb.w	r3, [r6, #278]	; 0x116
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d1a3      	bne.n	800a274 <ProcessRadioRxDone+0x2d8>
 800a32c:	f004 04e0 	and.w	r4, r4, #224	; 0xe0
 800a330:	2ca0      	cmp	r4, #160	; 0xa0
 800a332:	d19f      	bne.n	800a274 <ProcessRadioRxDone+0x2d8>
 800a334:	6b72      	ldr	r2, [r6, #52]	; 0x34
 800a336:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800a338:	429a      	cmp	r2, r3
 800a33a:	d19b      	bne.n	800a274 <ProcessRadioRxDone+0x2d8>
                        Nvm.MacGroup1.SrvAckRequested = true;
 800a33c:	2201      	movs	r2, #1
 800a33e:	f886 203a 	strb.w	r2, [r6, #58]	; 0x3a
 800a342:	e797      	b.n	800a274 <ProcessRadioRxDone+0x2d8>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800a344:	4b87      	ldr	r3, [pc, #540]	; (800a564 <ProcessRadioRxDone+0x5c8>)
 800a346:	220a      	movs	r2, #10
 800a348:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800a34c:	e792      	b.n	800a274 <ProcessRadioRxDone+0x2d8>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800a34e:	ab11      	add	r3, sp, #68	; 0x44
 800a350:	9300      	str	r3, [sp, #0]
 800a352:	9b06      	ldr	r3, [sp, #24]
 800a354:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800a358:	4641      	mov	r1, r8
 800a35a:	4648      	mov	r0, r9
 800a35c:	f003 f810 	bl	800d380 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800a360:	2800      	cmp	r0, #0
 800a362:	d13c      	bne.n	800a3de <ProcessRadioRxDone+0x442>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800a364:	4b7f      	ldr	r3, [pc, #508]	; (800a564 <ProcessRadioRxDone+0x5c8>)
 800a366:	2100      	movs	r1, #0
 800a368:	f883 141d 	strb.w	r1, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Multicast = multicast;
 800a36c:	f883 541e 	strb.w	r5, [r3, #1054]	; 0x41e
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800a370:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 800a374:	f3c2 1000 	ubfx	r0, r2, #4, #1
 800a378:	f883 0421 	strb.w	r0, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = NULL;
 800a37c:	f8c3 1424 	str.w	r1, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = 0;
 800a380:	f883 1428 	strb.w	r1, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800a384:	9806      	ldr	r0, [sp, #24]
 800a386:	f8c3 042c 	str.w	r0, [r3, #1068]	; 0x42c
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800a38a:	f8c3 0464 	str.w	r0, [r3, #1124]	; 0x464
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800a38e:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800a392:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800a396:	f883 1439 	strb.w	r1, [r3, #1081]	; 0x439
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800a39a:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800a39e:	f893 0483 	ldrb.w	r0, [r3, #1155]	; 0x483
 800a3a2:	2801      	cmp	r0, #1
 800a3a4:	d929      	bls.n	800a3fa <ProcessRadioRxDone+0x45e>
            if( multicast == 1 )
 800a3a6:	2d01      	cmp	r5, #1
 800a3a8:	d02a      	beq.n	800a400 <ProcessRadioRxDone+0x464>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800a3aa:	f004 04e0 	and.w	r4, r4, #224	; 0xe0
 800a3ae:	2ca0      	cmp	r4, #160	; 0xa0
 800a3b0:	d02b      	beq.n	800a40a <ProcessRadioRxDone+0x46e>
                    Nvm.MacGroup1.SrvAckRequested = false;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	4a6c      	ldr	r2, [pc, #432]	; (800a568 <ProcessRadioRxDone+0x5cc>)
 800a3b6:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800a3ba:	4a6a      	ldr	r2, [pc, #424]	; (800a564 <ProcessRadioRxDone+0x5c8>)
 800a3bc:	f882 341c 	strb.w	r3, [r2, #1052]	; 0x41c
            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800a3c0:	4b68      	ldr	r3, [pc, #416]	; (800a564 <ProcessRadioRxDone+0x5c8>)
 800a3c2:	f893 2438 	ldrb.w	r2, [r3, #1080]	; 0x438
 800a3c6:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 800a3ca:	f7ff fafa 	bl	80099c2 <RemoveMacCommands>
            switch( fType )
 800a3ce:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800a3d2:	2b03      	cmp	r3, #3
 800a3d4:	d87d      	bhi.n	800a4d2 <ProcessRadioRxDone+0x536>
 800a3d6:	e8df f003 	tbb	[pc, r3]
 800a3da:	4a27      	.short	0x4a27
 800a3dc:	6c5c      	.short	0x6c5c
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800a3de:	2802      	cmp	r0, #2
 800a3e0:	d006      	beq.n	800a3f0 <ProcessRadioRxDone+0x454>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800a3e2:	4b60      	ldr	r3, [pc, #384]	; (800a564 <ProcessRadioRxDone+0x5c8>)
 800a3e4:	220c      	movs	r2, #12
 800a3e6:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800a3ea:	f7ff fa7f 	bl	80098ec <PrepareRxDoneAbort>
                return;
 800a3ee:	e0b2      	b.n	800a556 <ProcessRadioRxDone+0x5ba>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800a3f0:	4b5c      	ldr	r3, [pc, #368]	; (800a564 <ProcessRadioRxDone+0x5c8>)
 800a3f2:	220b      	movs	r2, #11
 800a3f4:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800a3f8:	e7f7      	b.n	800a3ea <ProcessRadioRxDone+0x44e>
                Nvm.MacGroup1.AdrAckCounter = 0;
 800a3fa:	4b5b      	ldr	r3, [pc, #364]	; (800a568 <ProcessRadioRxDone+0x5cc>)
 800a3fc:	6299      	str	r1, [r3, #40]	; 0x28
 800a3fe:	e7d2      	b.n	800a3a6 <ProcessRadioRxDone+0x40a>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800a400:	4b58      	ldr	r3, [pc, #352]	; (800a564 <ProcessRadioRxDone+0x5c8>)
 800a402:	2202      	movs	r2, #2
 800a404:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800a408:	e7da      	b.n	800a3c0 <ProcessRadioRxDone+0x424>
                    Nvm.MacGroup1.SrvAckRequested = true;
 800a40a:	4b57      	ldr	r3, [pc, #348]	; (800a568 <ProcessRadioRxDone+0x5cc>)
 800a40c:	2201      	movs	r2, #1
 800a40e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800a412:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 800a416:	b913      	cbnz	r3, 800a41e <ProcessRadioRxDone+0x482>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800a418:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a41a:	4b53      	ldr	r3, [pc, #332]	; (800a568 <ProcessRadioRxDone+0x5cc>)
 800a41c:	635a      	str	r2, [r3, #52]	; 0x34
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800a41e:	4b51      	ldr	r3, [pc, #324]	; (800a564 <ProcessRadioRxDone+0x5c8>)
 800a420:	2201      	movs	r2, #1
 800a422:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800a426:	e7cb      	b.n	800a3c0 <ProcessRadioRxDone+0x424>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800a428:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 800a42c:	4c4d      	ldr	r4, [pc, #308]	; (800a564 <ProcessRadioRxDone+0x5c8>)
 800a42e:	f894 3483 	ldrb.w	r3, [r4, #1155]	; 0x483
 800a432:	9300      	str	r3, [sp, #0]
 800a434:	463b      	mov	r3, r7
 800a436:	f002 020f 	and.w	r2, r2, #15
 800a43a:	2100      	movs	r1, #0
 800a43c:	a815      	add	r0, sp, #84	; 0x54
 800a43e:	f7ff facf 	bl	80099e0 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800a442:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800a446:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800a44a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a44c:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800a450:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 800a454:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800a458:	2301      	movs	r3, #1
 800a45a:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800a45e:	4a41      	ldr	r2, [pc, #260]	; (800a564 <ProcessRadioRxDone+0x5c8>)
 800a460:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800a464:	f043 0302 	orr.w	r3, r3, #2
 800a468:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            break;
 800a46c:	e052      	b.n	800a514 <ProcessRadioRxDone+0x578>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800a46e:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 800a472:	4c3c      	ldr	r4, [pc, #240]	; (800a564 <ProcessRadioRxDone+0x5c8>)
 800a474:	f894 3483 	ldrb.w	r3, [r4, #1155]	; 0x483
 800a478:	9300      	str	r3, [sp, #0]
 800a47a:	463b      	mov	r3, r7
 800a47c:	f002 020f 	and.w	r2, r2, #15
 800a480:	2100      	movs	r1, #0
 800a482:	a815      	add	r0, sp, #84	; 0x54
 800a484:	f7ff faac 	bl	80099e0 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800a488:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800a48c:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
                    break;
 800a490:	e7e5      	b.n	800a45e <ProcessRadioRxDone+0x4c2>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800a492:	4c34      	ldr	r4, [pc, #208]	; (800a564 <ProcessRadioRxDone+0x5c8>)
 800a494:	f894 3483 	ldrb.w	r3, [r4, #1155]	; 0x483
 800a498:	9300      	str	r3, [sp, #0]
 800a49a:	463b      	mov	r3, r7
 800a49c:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 800a4a0:	2100      	movs	r1, #0
 800a4a2:	981a      	ldr	r0, [sp, #104]	; 0x68
 800a4a4:	f7ff fa9c 	bl	80099e0 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800a4a8:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800a4ac:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
                    break;
 800a4b0:	e7d5      	b.n	800a45e <ProcessRadioRxDone+0x4c2>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800a4b2:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 800a4b6:	4b2b      	ldr	r3, [pc, #172]	; (800a564 <ProcessRadioRxDone+0x5c8>)
 800a4b8:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800a4bc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a4be:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800a4c2:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 800a4c6:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800a4ca:	2201      	movs	r2, #1
 800a4cc:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 800a4d0:	e7c5      	b.n	800a45e <ProcessRadioRxDone+0x4c2>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a4d2:	4b24      	ldr	r3, [pc, #144]	; (800a564 <ProcessRadioRxDone+0x5c8>)
 800a4d4:	2201      	movs	r2, #1
 800a4d6:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    PrepareRxDoneAbort( );
 800a4da:	f7ff fa07 	bl	80098ec <PrepareRxDoneAbort>
                    break;
 800a4de:	e7be      	b.n	800a45e <ProcessRadioRxDone+0x4c2>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800a4e0:	1e6a      	subs	r2, r5, #1
 800a4e2:	4c20      	ldr	r4, [pc, #128]	; (800a564 <ProcessRadioRxDone+0x5c8>)
 800a4e4:	f504 770e 	add.w	r7, r4, #568	; 0x238
 800a4e8:	b292      	uxth	r2, r2
 800a4ea:	1c71      	adds	r1, r6, #1
 800a4ec:	4638      	mov	r0, r7
 800a4ee:	f006 fafe 	bl	8010aee <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800a4f2:	2303      	movs	r3, #3
 800a4f4:	f884 341c 	strb.w	r3, [r4, #1052]	; 0x41c
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	f884 341d 	strb.w	r3, [r4, #1053]	; 0x41d
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800a4fe:	f8c4 7424 	str.w	r7, [r4, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800a502:	3d01      	subs	r5, #1
 800a504:	f884 5428 	strb.w	r5, [r4, #1064]	; 0x428
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800a508:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 800a50c:	f043 0302 	orr.w	r3, r3, #2
 800a510:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
    if( MacCtx.NodeAckRequested == true )
 800a514:	4b13      	ldr	r3, [pc, #76]	; (800a564 <ProcessRadioRxDone+0x5c8>)
 800a516:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800a51a:	b173      	cbz	r3, 800a53a <ProcessRadioRxDone+0x59e>
        if( MacCtx.McpsConfirm.AckReceived == true )
 800a51c:	4b11      	ldr	r3, [pc, #68]	; (800a564 <ProcessRadioRxDone+0x5c8>)
 800a51e:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800a522:	b17b      	cbz	r3, 800a544 <ProcessRadioRxDone+0x5a8>
            OnAckTimeoutTimerEvent( NULL );
 800a524:	2000      	movs	r0, #0
 800a526:	f7ff f9bb 	bl	80098a0 <OnAckTimeoutTimerEvent>
 800a52a:	e00b      	b.n	800a544 <ProcessRadioRxDone+0x5a8>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a52c:	4b0d      	ldr	r3, [pc, #52]	; (800a564 <ProcessRadioRxDone+0x5c8>)
 800a52e:	2201      	movs	r2, #1
 800a530:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            PrepareRxDoneAbort( );
 800a534:	f7ff f9da 	bl	80098ec <PrepareRxDoneAbort>
            break;
 800a538:	e7ec      	b.n	800a514 <ProcessRadioRxDone+0x578>
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800a53a:	4b0b      	ldr	r3, [pc, #44]	; (800a568 <ProcessRadioRxDone+0x5cc>)
 800a53c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800a540:	2b02      	cmp	r3, #2
 800a542:	d00b      	beq.n	800a55c <ProcessRadioRxDone+0x5c0>
    MacCtx.MacFlags.Bits.MacDone = 1;
 800a544:	4a07      	ldr	r2, [pc, #28]	; (800a564 <ProcessRadioRxDone+0x5c8>)
 800a546:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800a54a:	f043 0320 	orr.w	r3, r3, #32
 800a54e:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    UpdateRxSlotIdleState( );
 800a552:	f7fe ffa1 	bl	8009498 <UpdateRxSlotIdleState>
}
 800a556:	b023      	add	sp, #140	; 0x8c
 800a558:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            OnAckTimeoutTimerEvent( NULL );
 800a55c:	2000      	movs	r0, #0
 800a55e:	f7ff f99f 	bl	80098a0 <OnAckTimeoutTimerEvent>
 800a562:	e7ef      	b.n	800a544 <ProcessRadioRxDone+0x5a8>
 800a564:	200007f0 	.word	0x200007f0
 800a568:	20008000 	.word	0x20008000

0800a56c <ProcessRadioTxTimeout>:
{
 800a56c:	b510      	push	{r4, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800a56e:	4b0f      	ldr	r3, [pc, #60]	; (800a5ac <ProcessRadioTxTimeout+0x40>)
 800a570:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800a574:	2b02      	cmp	r3, #2
 800a576:	d002      	beq.n	800a57e <ProcessRadioTxTimeout+0x12>
        Radio.Sleep( );
 800a578:	4b0d      	ldr	r3, [pc, #52]	; (800a5b0 <ProcessRadioTxTimeout+0x44>)
 800a57a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a57c:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 800a57e:	f7fe ff8b 	bl	8009498 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800a582:	4c0c      	ldr	r4, [pc, #48]	; (800a5b4 <ProcessRadioTxTimeout+0x48>)
 800a584:	2002      	movs	r0, #2
 800a586:	f884 0439 	strb.w	r0, [r4, #1081]	; 0x439
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800a58a:	f002 fbf7 	bl	800cd7c <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800a58e:	f894 3414 	ldrb.w	r3, [r4, #1044]	; 0x414
 800a592:	b113      	cbz	r3, 800a59a <ProcessRadioTxTimeout+0x2e>
        MacCtx.AckTimeoutRetry = true;
 800a594:	2201      	movs	r2, #1
 800a596:	f884 2413 	strb.w	r2, [r4, #1043]	; 0x413
    MacCtx.MacFlags.Bits.MacDone = 1;
 800a59a:	4a06      	ldr	r2, [pc, #24]	; (800a5b4 <ProcessRadioTxTimeout+0x48>)
 800a59c:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800a5a0:	f043 0320 	orr.w	r3, r3, #32
 800a5a4:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
}
 800a5a8:	bd10      	pop	{r4, pc}
 800a5aa:	bf00      	nop
 800a5ac:	20008000 	.word	0x20008000
 800a5b0:	08014cbc 	.word	0x08014cbc
 800a5b4:	200007f0 	.word	0x200007f0

0800a5b8 <CheckForClassBCollision>:
{
 800a5b8:	b508      	push	{r3, lr}
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800a5ba:	f002 f98c 	bl	800c8d6 <LoRaMacClassBIsBeaconExpected>
 800a5be:	b978      	cbnz	r0, 800a5e0 <CheckForClassBCollision+0x28>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800a5c0:	4b09      	ldr	r3, [pc, #36]	; (800a5e8 <CheckForClassBCollision+0x30>)
 800a5c2:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800a5c6:	2b01      	cmp	r3, #1
 800a5c8:	d001      	beq.n	800a5ce <CheckForClassBCollision+0x16>
    return LORAMAC_STATUS_OK;
 800a5ca:	2000      	movs	r0, #0
}
 800a5cc:	bd08      	pop	{r3, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 800a5ce:	f002 f984 	bl	800c8da <LoRaMacClassBIsPingExpected>
 800a5d2:	b938      	cbnz	r0, 800a5e4 <CheckForClassBCollision+0x2c>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800a5d4:	f002 f983 	bl	800c8de <LoRaMacClassBIsMulticastExpected>
 800a5d8:	2800      	cmp	r0, #0
 800a5da:	d0f7      	beq.n	800a5cc <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800a5dc:	200f      	movs	r0, #15
 800a5de:	e7f5      	b.n	800a5cc <CheckForClassBCollision+0x14>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800a5e0:	200e      	movs	r0, #14
 800a5e2:	e7f3      	b.n	800a5cc <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800a5e4:	200f      	movs	r0, #15
 800a5e6:	e7f1      	b.n	800a5cc <CheckForClassBCollision+0x14>
 800a5e8:	20008000 	.word	0x20008000

0800a5ec <HandleRadioRxErrorTimeout>:
{
 800a5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ee:	4605      	mov	r5, r0
 800a5f0:	460c      	mov	r4, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800a5f2:	4b37      	ldr	r3, [pc, #220]	; (800a6d0 <HandleRadioRxErrorTimeout+0xe4>)
 800a5f4:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800a5f8:	2b02      	cmp	r3, #2
 800a5fa:	d002      	beq.n	800a602 <HandleRadioRxErrorTimeout+0x16>
        Radio.Sleep( );
 800a5fc:	4b35      	ldr	r3, [pc, #212]	; (800a6d4 <HandleRadioRxErrorTimeout+0xe8>)
 800a5fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a600:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800a602:	f002 f968 	bl	800c8d6 <LoRaMacClassBIsBeaconExpected>
 800a606:	4606      	mov	r6, r0
 800a608:	bb00      	cbnz	r0, 800a64c <HandleRadioRxErrorTimeout+0x60>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800a60a:	4b31      	ldr	r3, [pc, #196]	; (800a6d0 <HandleRadioRxErrorTimeout+0xe4>)
 800a60c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800a610:	2b01      	cmp	r3, #1
 800a612:	d022      	beq.n	800a65a <HandleRadioRxErrorTimeout+0x6e>
    if( classBRx == false )
 800a614:	b9be      	cbnz	r6, 800a646 <HandleRadioRxErrorTimeout+0x5a>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800a616:	4b30      	ldr	r3, [pc, #192]	; (800a6d8 <HandleRadioRxErrorTimeout+0xec>)
 800a618:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d13f      	bne.n	800a6a0 <HandleRadioRxErrorTimeout+0xb4>
            if( MacCtx.NodeAckRequested == true )
 800a620:	4b2d      	ldr	r3, [pc, #180]	; (800a6d8 <HandleRadioRxErrorTimeout+0xec>)
 800a622:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800a626:	b113      	cbz	r3, 800a62e <HandleRadioRxErrorTimeout+0x42>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800a628:	4b2b      	ldr	r3, [pc, #172]	; (800a6d8 <HandleRadioRxErrorTimeout+0xec>)
 800a62a:	f883 5439 	strb.w	r5, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800a62e:	4628      	mov	r0, r5
 800a630:	f002 fba4 	bl	800cd7c <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800a634:	4b26      	ldr	r3, [pc, #152]	; (800a6d0 <HandleRadioRxErrorTimeout+0xe4>)
 800a636:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800a638:	f008 fc20 	bl	8012e7c <UTIL_TIMER_GetElapsedTime>
 800a63c:	4b26      	ldr	r3, [pc, #152]	; (800a6d8 <HandleRadioRxErrorTimeout+0xec>)
 800a63e:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800a642:	4298      	cmp	r0, r3
 800a644:	d220      	bcs.n	800a688 <HandleRadioRxErrorTimeout+0x9c>
    UpdateRxSlotIdleState( );
 800a646:	f7fe ff27 	bl	8009498 <UpdateRxSlotIdleState>
}
 800a64a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800a64c:	2002      	movs	r0, #2
 800a64e:	f002 f938 	bl	800c8c2 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800a652:	2000      	movs	r0, #0
 800a654:	f002 f93a 	bl	800c8cc <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800a658:	e7d7      	b.n	800a60a <HandleRadioRxErrorTimeout+0x1e>
        if( LoRaMacClassBIsPingExpected( ) == true )
 800a65a:	f002 f93e 	bl	800c8da <LoRaMacClassBIsPingExpected>
 800a65e:	4607      	mov	r7, r0
 800a660:	b950      	cbnz	r0, 800a678 <HandleRadioRxErrorTimeout+0x8c>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800a662:	f002 f93c 	bl	800c8de <LoRaMacClassBIsMulticastExpected>
 800a666:	2800      	cmp	r0, #0
 800a668:	d0d4      	beq.n	800a614 <HandleRadioRxErrorTimeout+0x28>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a66a:	2000      	movs	r0, #0
 800a66c:	f002 f92b 	bl	800c8c6 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800a670:	2000      	movs	r0, #0
 800a672:	f002 f92d 	bl	800c8d0 <LoRaMacClassBMulticastSlotTimerEvent>
    if( classBRx == false )
 800a676:	e7e6      	b.n	800a646 <HandleRadioRxErrorTimeout+0x5a>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a678:	2000      	movs	r0, #0
 800a67a:	f002 f923 	bl	800c8c4 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800a67e:	2000      	movs	r0, #0
 800a680:	f002 f925 	bl	800c8ce <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800a684:	463e      	mov	r6, r7
 800a686:	e7ec      	b.n	800a662 <HandleRadioRxErrorTimeout+0x76>
                TimerStop( &MacCtx.RxWindowTimer2 );
 800a688:	4c13      	ldr	r4, [pc, #76]	; (800a6d8 <HandleRadioRxErrorTimeout+0xec>)
 800a68a:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800a68e:	f008 fc2b 	bl	8012ee8 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800a692:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 800a696:	f043 0320 	orr.w	r3, r3, #32
 800a69a:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
 800a69e:	e7d2      	b.n	800a646 <HandleRadioRxErrorTimeout+0x5a>
            if( MacCtx.NodeAckRequested == true )
 800a6a0:	4b0d      	ldr	r3, [pc, #52]	; (800a6d8 <HandleRadioRxErrorTimeout+0xec>)
 800a6a2:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800a6a6:	b113      	cbz	r3, 800a6ae <HandleRadioRxErrorTimeout+0xc2>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800a6a8:	4b0b      	ldr	r3, [pc, #44]	; (800a6d8 <HandleRadioRxErrorTimeout+0xec>)
 800a6aa:	f883 4439 	strb.w	r4, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800a6ae:	4620      	mov	r0, r4
 800a6b0:	f002 fb64 	bl	800cd7c <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800a6b4:	4b06      	ldr	r3, [pc, #24]	; (800a6d0 <HandleRadioRxErrorTimeout+0xe4>)
 800a6b6:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800a6ba:	2b02      	cmp	r3, #2
 800a6bc:	d0c3      	beq.n	800a646 <HandleRadioRxErrorTimeout+0x5a>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800a6be:	4a06      	ldr	r2, [pc, #24]	; (800a6d8 <HandleRadioRxErrorTimeout+0xec>)
 800a6c0:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800a6c4:	f043 0320 	orr.w	r3, r3, #32
 800a6c8:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 800a6cc:	e7bb      	b.n	800a646 <HandleRadioRxErrorTimeout+0x5a>
 800a6ce:	bf00      	nop
 800a6d0:	20008000 	.word	0x20008000
 800a6d4:	08014cbc 	.word	0x08014cbc
 800a6d8:	200007f0 	.word	0x200007f0

0800a6dc <ProcessRadioRxError>:
{
 800a6dc:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800a6de:	2106      	movs	r1, #6
 800a6e0:	2005      	movs	r0, #5
 800a6e2:	f7ff ff83 	bl	800a5ec <HandleRadioRxErrorTimeout>
}
 800a6e6:	bd08      	pop	{r3, pc}

0800a6e8 <ProcessRadioRxTimeout>:
{
 800a6e8:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800a6ea:	2104      	movs	r1, #4
 800a6ec:	2003      	movs	r0, #3
 800a6ee:	f7ff ff7d 	bl	800a5ec <HandleRadioRxErrorTimeout>
}
 800a6f2:	bd08      	pop	{r3, pc}

0800a6f4 <LoRaMacHandleIrqEvents>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a6f4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800a6f8:	b672      	cpsid	i
    events = LoRaMacRadioEvents;
 800a6fa:	4a14      	ldr	r2, [pc, #80]	; (800a74c <LoRaMacHandleIrqEvents+0x58>)
 800a6fc:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 800a6fe:	2000      	movs	r0, #0
 800a700:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a702:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 800a706:	b303      	cbz	r3, 800a74a <LoRaMacHandleIrqEvents+0x56>
{
 800a708:	b510      	push	{r4, lr}
        if( events.Events.TxDone == 1 )
 800a70a:	b2dc      	uxtb	r4, r3
 800a70c:	f013 0f10 	tst.w	r3, #16
 800a710:	d10c      	bne.n	800a72c <LoRaMacHandleIrqEvents+0x38>
        if( events.Events.RxDone == 1 )
 800a712:	f014 0f08 	tst.w	r4, #8
 800a716:	d10c      	bne.n	800a732 <LoRaMacHandleIrqEvents+0x3e>
        if( events.Events.TxTimeout == 1 )
 800a718:	f014 0f04 	tst.w	r4, #4
 800a71c:	d10c      	bne.n	800a738 <LoRaMacHandleIrqEvents+0x44>
        if( events.Events.RxError == 1 )
 800a71e:	f014 0f02 	tst.w	r4, #2
 800a722:	d10c      	bne.n	800a73e <LoRaMacHandleIrqEvents+0x4a>
        if( events.Events.RxTimeout == 1 )
 800a724:	f014 0f01 	tst.w	r4, #1
 800a728:	d10c      	bne.n	800a744 <LoRaMacHandleIrqEvents+0x50>
}
 800a72a:	bd10      	pop	{r4, pc}
            ProcessRadioTxDone( );
 800a72c:	f7ff f83a 	bl	80097a4 <ProcessRadioTxDone>
 800a730:	e7ef      	b.n	800a712 <LoRaMacHandleIrqEvents+0x1e>
            ProcessRadioRxDone( );
 800a732:	f7ff fc33 	bl	8009f9c <ProcessRadioRxDone>
 800a736:	e7ef      	b.n	800a718 <LoRaMacHandleIrqEvents+0x24>
            ProcessRadioTxTimeout( );
 800a738:	f7ff ff18 	bl	800a56c <ProcessRadioTxTimeout>
 800a73c:	e7ef      	b.n	800a71e <LoRaMacHandleIrqEvents+0x2a>
            ProcessRadioRxError( );
 800a73e:	f7ff ffcd 	bl	800a6dc <ProcessRadioRxError>
 800a742:	e7ef      	b.n	800a724 <LoRaMacHandleIrqEvents+0x30>
            ProcessRadioRxTimeout( );
 800a744:	f7ff ffd0 	bl	800a6e8 <ProcessRadioRxTimeout>
}
 800a748:	e7ef      	b.n	800a72a <LoRaMacHandleIrqEvents+0x36>
 800a74a:	4770      	bx	lr
 800a74c:	200007ec 	.word	0x200007ec

0800a750 <LoRaMacHandleMlmeRequest>:
{
 800a750:	b508      	push	{r3, lr}
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800a752:	4b16      	ldr	r3, [pc, #88]	; (800a7ac <LoRaMacHandleMlmeRequest+0x5c>)
 800a754:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800a758:	f013 0f04 	tst.w	r3, #4
 800a75c:	d100      	bne.n	800a760 <LoRaMacHandleMlmeRequest+0x10>
}
 800a75e:	bd08      	pop	{r3, pc}
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800a760:	2001      	movs	r0, #1
 800a762:	f002 fb29 	bl	800cdb8 <LoRaMacConfirmQueueIsCmdActive>
 800a766:	b178      	cbz	r0, 800a788 <LoRaMacHandleMlmeRequest+0x38>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800a768:	2001      	movs	r0, #1
 800a76a:	f002 faef 	bl	800cd4c <LoRaMacConfirmQueueGetStatus>
 800a76e:	b918      	cbnz	r0, 800a778 <LoRaMacHandleMlmeRequest+0x28>
                MacCtx.ChannelsNbTransCounter = 0;
 800a770:	4b0e      	ldr	r3, [pc, #56]	; (800a7ac <LoRaMacHandleMlmeRequest+0x5c>)
 800a772:	2200      	movs	r2, #0
 800a774:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800a778:	4a0c      	ldr	r2, [pc, #48]	; (800a7ac <LoRaMacHandleMlmeRequest+0x5c>)
 800a77a:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800a77e:	f023 0302 	bic.w	r3, r3, #2
 800a782:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
 800a786:	e7ea      	b.n	800a75e <LoRaMacHandleMlmeRequest+0xe>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800a788:	2005      	movs	r0, #5
 800a78a:	f002 fb15 	bl	800cdb8 <LoRaMacConfirmQueueIsCmdActive>
 800a78e:	b138      	cbz	r0, 800a7a0 <LoRaMacHandleMlmeRequest+0x50>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800a790:	4a06      	ldr	r2, [pc, #24]	; (800a7ac <LoRaMacHandleMlmeRequest+0x5c>)
 800a792:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800a796:	f023 0302 	bic.w	r3, r3, #2
 800a79a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800a79e:	e7de      	b.n	800a75e <LoRaMacHandleMlmeRequest+0xe>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800a7a0:	2006      	movs	r0, #6
 800a7a2:	f002 fb09 	bl	800cdb8 <LoRaMacConfirmQueueIsCmdActive>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800a7a6:	2800      	cmp	r0, #0
 800a7a8:	d0d9      	beq.n	800a75e <LoRaMacHandleMlmeRequest+0xe>
 800a7aa:	e7f1      	b.n	800a790 <LoRaMacHandleMlmeRequest+0x40>
 800a7ac:	200007f0 	.word	0x200007f0

0800a7b0 <AckTimeoutRetriesFinalize>:
    if( MacCtx.McpsConfirm.AckReceived == false )
 800a7b0:	4b14      	ldr	r3, [pc, #80]	; (800a804 <AckTimeoutRetriesFinalize+0x54>)
 800a7b2:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800a7b6:	b12b      	cbz	r3, 800a7c4 <AckTimeoutRetriesFinalize+0x14>
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800a7b8:	4b12      	ldr	r3, [pc, #72]	; (800a804 <AckTimeoutRetriesFinalize+0x54>)
 800a7ba:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 800a7be:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
 800a7c2:	4770      	bx	lr
{
 800a7c4:	b500      	push	{lr}
 800a7c6:	b085      	sub	sp, #20
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800a7c8:	2302      	movs	r3, #2
 800a7ca:	f88d 300c 	strb.w	r3, [sp, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 800a7ce:	4b0e      	ldr	r3, [pc, #56]	; (800a808 <AckTimeoutRetriesFinalize+0x58>)
 800a7d0:	f503 72f0 	add.w	r2, r3, #480	; 0x1e0
 800a7d4:	9201      	str	r2, [sp, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 800a7d6:	f503 7221 	add.w	r2, r3, #644	; 0x284
 800a7da:	9202      	str	r2, [sp, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800a7dc:	a901      	add	r1, sp, #4
 800a7de:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a7e2:	f003 f87a 	bl	800d8da <RegionInitDefaults>
        MacCtx.NodeAckRequested = false;
 800a7e6:	4b07      	ldr	r3, [pc, #28]	; (800a804 <AckTimeoutRetriesFinalize+0x54>)
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        MacCtx.McpsConfirm.AckReceived = false;
 800a7ee:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800a7f2:	4b04      	ldr	r3, [pc, #16]	; (800a804 <AckTimeoutRetriesFinalize+0x54>)
 800a7f4:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 800a7f8:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
}
 800a7fc:	b005      	add	sp, #20
 800a7fe:	f85d fb04 	ldr.w	pc, [sp], #4
 800a802:	bf00      	nop
 800a804:	200007f0 	.word	0x200007f0
 800a808:	20008000 	.word	0x20008000

0800a80c <SerializeTxFrame>:
{
 800a80c:	b508      	push	{r3, lr}
    switch( MacCtx.TxMsg.Type )
 800a80e:	4b0f      	ldr	r3, [pc, #60]	; (800a84c <SerializeTxFrame+0x40>)
 800a810:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800a814:	b11b      	cbz	r3, 800a81e <SerializeTxFrame+0x12>
 800a816:	2b04      	cmp	r3, #4
 800a818:	d00a      	beq.n	800a830 <SerializeTxFrame+0x24>
 800a81a:	2003      	movs	r0, #3
}
 800a81c:	bd08      	pop	{r3, pc}
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800a81e:	480c      	ldr	r0, [pc, #48]	; (800a850 <SerializeTxFrame+0x44>)
 800a820:	f002 ff7f 	bl	800d722 <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800a824:	b968      	cbnz	r0, 800a842 <SerializeTxFrame+0x36>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800a826:	4b09      	ldr	r3, [pc, #36]	; (800a84c <SerializeTxFrame+0x40>)
 800a828:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800a82c:	801a      	strh	r2, [r3, #0]
            break;
 800a82e:	e7f5      	b.n	800a81c <SerializeTxFrame+0x10>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800a830:	4807      	ldr	r0, [pc, #28]	; (800a850 <SerializeTxFrame+0x44>)
 800a832:	f002 ffac 	bl	800d78e <LoRaMacSerializerData>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800a836:	b930      	cbnz	r0, 800a846 <SerializeTxFrame+0x3a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800a838:	4b04      	ldr	r3, [pc, #16]	; (800a84c <SerializeTxFrame+0x40>)
 800a83a:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800a83e:	801a      	strh	r2, [r3, #0]
            break;
 800a840:	e7ec      	b.n	800a81c <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800a842:	2011      	movs	r0, #17
 800a844:	e7ea      	b.n	800a81c <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800a846:	2011      	movs	r0, #17
 800a848:	e7e8      	b.n	800a81c <SerializeTxFrame+0x10>
 800a84a:	bf00      	nop
 800a84c:	200007f0 	.word	0x200007f0
 800a850:	200008f8 	.word	0x200008f8

0800a854 <ComputeRxWindowParameters>:
{
 800a854:	b570      	push	{r4, r5, r6, lr}
 800a856:	b082      	sub	sp, #8
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800a858:	4c1d      	ldr	r4, [pc, #116]	; (800a8d0 <ComputeRxWindowParameters+0x7c>)
 800a85a:	f894 6040 	ldrb.w	r6, [r4, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800a85e:	f994 3061 	ldrsb.w	r3, [r4, #97]	; 0x61
 800a862:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
 800a866:	f894 1075 	ldrb.w	r1, [r4, #117]	; 0x75
 800a86a:	4630      	mov	r0, r6
 800a86c:	f003 f932 	bl	800dad4 <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800a870:	4d18      	ldr	r5, [pc, #96]	; (800a8d4 <ComputeRxWindowParameters+0x80>)
 800a872:	f505 736e 	add.w	r3, r5, #952	; 0x3b8
 800a876:	9300      	str	r3, [sp, #0]
 800a878:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a87a:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800a87e:	b241      	sxtb	r1, r0
 800a880:	4630      	mov	r0, r6
 800a882:	f003 f865 	bl	800d950 <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800a886:	f505 7373 	add.w	r3, r5, #972	; 0x3cc
 800a88a:	9300      	str	r3, [sp, #0]
 800a88c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a88e:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800a892:	f994 1068 	ldrsb.w	r1, [r4, #104]	; 0x68
 800a896:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a89a:	f003 f859 	bl	800d950 <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800a89e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a8a0:	f8d5 13c4 	ldr.w	r1, [r5, #964]	; 0x3c4
 800a8a4:	440b      	add	r3, r1
 800a8a6:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800a8aa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a8ac:	f8d5 23d8 	ldr.w	r2, [r5, #984]	; 0x3d8
 800a8b0:	4413      	add	r3, r2
 800a8b2:	f8c5 33b4 	str.w	r3, [r5, #948]	; 0x3b4
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800a8b6:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
 800a8ba:	b93b      	cbnz	r3, 800a8cc <ComputeRxWindowParameters+0x78>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800a8bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a8be:	4419      	add	r1, r3
 800a8c0:	f8c5 13b0 	str.w	r1, [r5, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800a8c4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a8c6:	440a      	add	r2, r1
 800a8c8:	f8c5 23b4 	str.w	r2, [r5, #948]	; 0x3b4
}
 800a8cc:	b002      	add	sp, #8
 800a8ce:	bd70      	pop	{r4, r5, r6, pc}
 800a8d0:	20008000 	.word	0x20008000
 800a8d4:	200007f0 	.word	0x200007f0

0800a8d8 <VerifyTxFrame>:
{
 800a8d8:	b510      	push	{r4, lr}
 800a8da:	b082      	sub	sp, #8
    size_t macCmdsSize = 0;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	9301      	str	r3, [sp, #4]
    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800a8e0:	4b0d      	ldr	r3, [pc, #52]	; (800a918 <VerifyTxFrame+0x40>)
 800a8e2:	f893 4118 	ldrb.w	r4, [r3, #280]	; 0x118
 800a8e6:	b914      	cbnz	r4, 800a8ee <VerifyTxFrame+0x16>
}
 800a8e8:	4620      	mov	r0, r4
 800a8ea:	b002      	add	sp, #8
 800a8ec:	bd10      	pop	{r4, pc}
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800a8ee:	a801      	add	r0, sp, #4
 800a8f0:	f002 f912 	bl	800cb18 <LoRaMacCommandsGetSizeSerializedCmds>
 800a8f4:	4604      	mov	r4, r0
 800a8f6:	b968      	cbnz	r0, 800a914 <VerifyTxFrame+0x3c>
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800a8f8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a8fc:	4b06      	ldr	r3, [pc, #24]	; (800a918 <VerifyTxFrame+0x40>)
 800a8fe:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800a902:	4b06      	ldr	r3, [pc, #24]	; (800a91c <VerifyTxFrame+0x44>)
 800a904:	f893 0237 	ldrb.w	r0, [r3, #567]	; 0x237
 800a908:	f7fe ff3a 	bl	8009780 <ValidatePayloadLength>
 800a90c:	2800      	cmp	r0, #0
 800a90e:	d1eb      	bne.n	800a8e8 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_LENGTH_ERROR;
 800a910:	2408      	movs	r4, #8
 800a912:	e7e9      	b.n	800a8e8 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a914:	2413      	movs	r4, #19
 800a916:	e7e7      	b.n	800a8e8 <VerifyTxFrame+0x10>
 800a918:	20008000 	.word	0x20008000
 800a91c:	200007f0 	.word	0x200007f0

0800a920 <SecureFrame>:
{
 800a920:	b530      	push	{r4, r5, lr}
 800a922:	b083      	sub	sp, #12
    uint32_t fCntUp = 0;
 800a924:	2300      	movs	r3, #0
 800a926:	9301      	str	r3, [sp, #4]
    switch( MacCtx.TxMsg.Type )
 800a928:	4b1a      	ldr	r3, [pc, #104]	; (800a994 <SecureFrame+0x74>)
 800a92a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800a92e:	b133      	cbz	r3, 800a93e <SecureFrame+0x1e>
 800a930:	4605      	mov	r5, r0
 800a932:	460c      	mov	r4, r1
 800a934:	2b04      	cmp	r3, #4
 800a936:	d00b      	beq.n	800a950 <SecureFrame+0x30>
 800a938:	2003      	movs	r0, #3
}
 800a93a:	b003      	add	sp, #12
 800a93c:	bd30      	pop	{r4, r5, pc}
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800a93e:	4816      	ldr	r0, [pc, #88]	; (800a998 <SecureFrame+0x78>)
 800a940:	f002 fcae 	bl	800d2a0 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800a944:	bb00      	cbnz	r0, 800a988 <SecureFrame+0x68>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800a946:	4b13      	ldr	r3, [pc, #76]	; (800a994 <SecureFrame+0x74>)
 800a948:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800a94c:	801a      	strh	r2, [r3, #0]
            break;
 800a94e:	e7f4      	b.n	800a93a <SecureFrame+0x1a>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800a950:	a801      	add	r0, sp, #4
 800a952:	f002 fc47 	bl	800d1e4 <LoRaMacCryptoGetFCntUp>
 800a956:	b9c8      	cbnz	r0, 800a98c <SecureFrame+0x6c>
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 800a958:	4b0e      	ldr	r3, [pc, #56]	; (800a994 <SecureFrame+0x74>)
 800a95a:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800a95e:	b923      	cbnz	r3, 800a96a <SecureFrame+0x4a>
 800a960:	4b0c      	ldr	r3, [pc, #48]	; (800a994 <SecureFrame+0x74>)
 800a962:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 800a966:	2b01      	cmp	r3, #1
 800a968:	d902      	bls.n	800a970 <SecureFrame+0x50>
                fCntUp -= 1;
 800a96a:	9b01      	ldr	r3, [sp, #4]
 800a96c:	3b01      	subs	r3, #1
 800a96e:	9301      	str	r3, [sp, #4]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800a970:	4b09      	ldr	r3, [pc, #36]	; (800a998 <SecureFrame+0x78>)
 800a972:	4622      	mov	r2, r4
 800a974:	4629      	mov	r1, r5
 800a976:	9801      	ldr	r0, [sp, #4]
 800a978:	f002 fcbe 	bl	800d2f8 <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800a97c:	b940      	cbnz	r0, 800a990 <SecureFrame+0x70>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800a97e:	4b05      	ldr	r3, [pc, #20]	; (800a994 <SecureFrame+0x74>)
 800a980:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800a984:	801a      	strh	r2, [r3, #0]
            break;
 800a986:	e7d8      	b.n	800a93a <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800a988:	2011      	movs	r0, #17
 800a98a:	e7d6      	b.n	800a93a <SecureFrame+0x1a>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800a98c:	2012      	movs	r0, #18
 800a98e:	e7d4      	b.n	800a93a <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800a990:	2011      	movs	r0, #17
 800a992:	e7d2      	b.n	800a93a <SecureFrame+0x1a>
 800a994:	200007f0 	.word	0x200007f0
 800a998:	200008f8 	.word	0x200008f8

0800a99c <SendFrameOnChannel>:
{
 800a99c:	b570      	push	{r4, r5, r6, lr}
 800a99e:	b086      	sub	sp, #24
 800a9a0:	4606      	mov	r6, r0
    int8_t txPower = 0;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	f88d 3007 	strb.w	r3, [sp, #7]
    txConfig.Channel = channel;
 800a9a8:	f88d 0008 	strb.w	r0, [sp, #8]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a9ac:	4d33      	ldr	r5, [pc, #204]	; (800aa7c <SendFrameOnChannel+0xe0>)
 800a9ae:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
 800a9b2:	f88d 3009 	strb.w	r3, [sp, #9]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800a9b6:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
 800a9ba:	f88d 300a 	strb.w	r3, [sp, #10]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800a9be:	6fab      	ldr	r3, [r5, #120]	; 0x78
 800a9c0:	9303      	str	r3, [sp, #12]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800a9c2:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800a9c4:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800a9c6:	4c2e      	ldr	r4, [pc, #184]	; (800aa80 <SendFrameOnChannel+0xe4>)
 800a9c8:	8823      	ldrh	r3, [r4, #0]
 800a9ca:	f8ad 3014 	strh.w	r3, [sp, #20]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800a9ce:	f504 6383 	add.w	r3, r4, #1048	; 0x418
 800a9d2:	f10d 0207 	add.w	r2, sp, #7
 800a9d6:	a902      	add	r1, sp, #8
 800a9d8:	f895 0040 	ldrb.w	r0, [r5, #64]	; 0x40
 800a9dc:	f002 ffdc 	bl	800d998 <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	f884 3439 	strb.w	r3, [r4, #1081]	; 0x439
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a9e6:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
 800a9ea:	f884 343a 	strb.w	r3, [r4, #1082]	; 0x43a
    MacCtx.McpsConfirm.TxPower = txPower;
 800a9ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a9f2:	f884 343b 	strb.w	r3, [r4, #1083]	; 0x43b
    MacCtx.McpsConfirm.Channel = channel;
 800a9f6:	f8c4 6448 	str.w	r6, [r4, #1096]	; 0x448
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800a9fa:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
 800a9fe:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800aa02:	f8c4 3450 	str.w	r3, [r4, #1104]	; 0x450
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800aa06:	f001 ff6c 	bl	800c8e2 <LoRaMacClassBIsBeaconModeActive>
 800aa0a:	bb58      	cbnz	r0, 800aa64 <SendFrameOnChannel+0xc8>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800aa0c:	4b1b      	ldr	r3, [pc, #108]	; (800aa7c <SendFrameOnChannel+0xe0>)
 800aa0e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800aa12:	2b01      	cmp	r3, #1
 800aa14:	d02e      	beq.n	800aa74 <SendFrameOnChannel+0xd8>
    LoRaMacClassBHaltBeaconing( );
 800aa16:	f001 ff67 	bl	800c8e8 <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 800aa1a:	4b18      	ldr	r3, [pc, #96]	; (800aa7c <SendFrameOnChannel+0xe0>)
 800aa1c:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 800aa20:	4b17      	ldr	r3, [pc, #92]	; (800aa80 <SendFrameOnChannel+0xe4>)
 800aa22:	f893 1415 	ldrb.w	r1, [r3, #1045]	; 0x415
 800aa26:	b2c0      	uxtb	r0, r0
 800aa28:	f7ff ff7a 	bl	800a920 <SecureFrame>
    if( status != LORAMAC_STATUS_OK )
 800aa2c:	4604      	mov	r4, r0
 800aa2e:	b9b0      	cbnz	r0, 800aa5e <SendFrameOnChannel+0xc2>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800aa30:	4b13      	ldr	r3, [pc, #76]	; (800aa80 <SendFrameOnChannel+0xe4>)
 800aa32:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800aa36:	f042 0202 	orr.w	r2, r2, #2
 800aa3a:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
 800aa3e:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800aa42:	b92b      	cbnz	r3, 800aa50 <SendFrameOnChannel+0xb4>
        MacCtx.ChannelsNbTransCounter++;
 800aa44:	4a0e      	ldr	r2, [pc, #56]	; (800aa80 <SendFrameOnChannel+0xe4>)
 800aa46:	f892 3410 	ldrb.w	r3, [r2, #1040]	; 0x410
 800aa4a:	3301      	adds	r3, #1
 800aa4c:	f882 3410 	strb.w	r3, [r2, #1040]	; 0x410
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800aa50:	4b0c      	ldr	r3, [pc, #48]	; (800aa84 <SendFrameOnChannel+0xe8>)
 800aa52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa54:	480a      	ldr	r0, [pc, #40]	; (800aa80 <SendFrameOnChannel+0xe4>)
 800aa56:	f830 1b02 	ldrh.w	r1, [r0], #2
 800aa5a:	b2c9      	uxtb	r1, r1
 800aa5c:	4798      	blx	r3
}
 800aa5e:	4620      	mov	r0, r4
 800aa60:	b006      	add	sp, #24
 800aa62:	bd70      	pop	{r4, r5, r6, pc}
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800aa64:	f8d4 0418 	ldr.w	r0, [r4, #1048]	; 0x418
 800aa68:	f001 ff4d 	bl	800c906 <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 800aa6c:	2800      	cmp	r0, #0
 800aa6e:	d0cd      	beq.n	800aa0c <SendFrameOnChannel+0x70>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800aa70:	2410      	movs	r4, #16
 800aa72:	e7f4      	b.n	800aa5e <SendFrameOnChannel+0xc2>
        LoRaMacClassBStopRxSlots( );
 800aa74:	f001 ff49 	bl	800c90a <LoRaMacClassBStopRxSlots>
 800aa78:	e7cd      	b.n	800aa16 <SendFrameOnChannel+0x7a>
 800aa7a:	bf00      	nop
 800aa7c:	20008000 	.word	0x20008000
 800aa80:	200007f0 	.word	0x200007f0
 800aa84:	08014cbc 	.word	0x08014cbc

0800aa88 <ScheduleTx>:
{
 800aa88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa8c:	b08c      	sub	sp, #48	; 0x30
 800aa8e:	4605      	mov	r5, r0
    status = CheckForClassBCollision( );
 800aa90:	f7ff fd92 	bl	800a5b8 <CheckForClassBCollision>
    if( status != LORAMAC_STATUS_OK )
 800aa94:	4604      	mov	r4, r0
 800aa96:	b118      	cbz	r0, 800aaa0 <ScheduleTx+0x18>
}
 800aa98:	4620      	mov	r0, r4
 800aa9a:	b00c      	add	sp, #48	; 0x30
 800aa9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CalculateBackOff( );
 800aaa0:	f7fe fd54 	bl	800954c <CalculateBackOff>
    status = SerializeTxFrame( );
 800aaa4:	f7ff feb2 	bl	800a80c <SerializeTxFrame>
    if( status != LORAMAC_STATUS_OK )
 800aaa8:	4604      	mov	r4, r0
 800aaaa:	2800      	cmp	r0, #0
 800aaac:	d1f4      	bne.n	800aa98 <ScheduleTx+0x10>
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800aaae:	4e36      	ldr	r6, [pc, #216]	; (800ab88 <ScheduleTx+0x100>)
 800aab0:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800aab2:	9304      	str	r3, [sp, #16]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800aab4:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 800aab8:	f88d 3018 	strb.w	r3, [sp, #24]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800aabc:	f896 3108 	ldrb.w	r3, [r6, #264]	; 0x108
 800aac0:	f88d 301a 	strb.w	r3, [sp, #26]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800aac4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800aac8:	4640      	mov	r0, r8
 800aaca:	f008 f941 	bl	8012d50 <SysTimeGetMcuTime>
 800aace:	af02      	add	r7, sp, #8
 800aad0:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
 800aad4:	9300      	str	r3, [sp, #0]
 800aad6:	f8d6 310c 	ldr.w	r3, [r6, #268]	; 0x10c
 800aada:	e898 0006 	ldmia.w	r8, {r1, r2}
 800aade:	4638      	mov	r0, r7
 800aae0:	f008 f8d3 	bl	8012c8a <SysTimeSub>
 800aae4:	ab07      	add	r3, sp, #28
 800aae6:	e897 0003 	ldmia.w	r7, {r0, r1}
 800aaea:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800aaee:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800aaf0:	9305      	str	r3, [sp, #20]
    nextChan.LastTxIsJoinRequest = false;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    nextChan.Joined = true;
 800aaf8:	2301      	movs	r3, #1
 800aafa:	f88d 3019 	strb.w	r3, [sp, #25]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800aafe:	4b23      	ldr	r3, [pc, #140]	; (800ab8c <ScheduleTx+0x104>)
 800ab00:	881b      	ldrh	r3, [r3, #0]
 800ab02:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800ab06:	f896 3118 	ldrb.w	r3, [r6, #280]	; 0x118
 800ab0a:	b92b      	cbnz	r3, 800ab18 <ScheduleTx+0x90>
        nextChan.LastTxIsJoinRequest = true;
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        nextChan.Joined = false;
 800ab12:	2300      	movs	r3, #0
 800ab14:	f88d 3019 	strb.w	r3, [sp, #25]
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800ab18:	4a1c      	ldr	r2, [pc, #112]	; (800ab8c <ScheduleTx+0x104>)
 800ab1a:	481b      	ldr	r0, [pc, #108]	; (800ab88 <ScheduleTx+0x100>)
 800ab1c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ab20:	9300      	str	r3, [sp, #0]
 800ab22:	f502 6391 	add.w	r3, r2, #1160	; 0x488
 800ab26:	f202 4215 	addw	r2, r2, #1045	; 0x415
 800ab2a:	a904      	add	r1, sp, #16
 800ab2c:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 800ab30:	f002 ffad 	bl	800da8e <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 800ab34:	b1b0      	cbz	r0, 800ab64 <ScheduleTx+0xdc>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 800ab36:	280b      	cmp	r0, #11
 800ab38:	d122      	bne.n	800ab80 <ScheduleTx+0xf8>
 800ab3a:	b31d      	cbz	r5, 800ab84 <ScheduleTx+0xfc>
            if( MacCtx.DutyCycleWaitTime != 0 )
 800ab3c:	4b13      	ldr	r3, [pc, #76]	; (800ab8c <ScheduleTx+0x104>)
 800ab3e:	f8d3 1488 	ldr.w	r1, [r3, #1160]	; 0x488
 800ab42:	2900      	cmp	r1, #0
 800ab44:	d0a8      	beq.n	800aa98 <ScheduleTx+0x10>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800ab46:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800ab4a:	f042 0220 	orr.w	r2, r2, #32
 800ab4e:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800ab52:	f503 755a 	add.w	r5, r3, #872	; 0x368
 800ab56:	4628      	mov	r0, r5
 800ab58:	f008 fa66 	bl	8013028 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 800ab5c:	4628      	mov	r0, r5
 800ab5e:	f008 fa1d 	bl	8012f9c <UTIL_TIMER_Start>
            return LORAMAC_STATUS_OK;
 800ab62:	e799      	b.n	800aa98 <ScheduleTx+0x10>
    ComputeRxWindowParameters( );
 800ab64:	f7ff fe76 	bl	800a854 <ComputeRxWindowParameters>
    status = VerifyTxFrame( );
 800ab68:	f7ff feb6 	bl	800a8d8 <VerifyTxFrame>
    if( status != LORAMAC_STATUS_OK )
 800ab6c:	4604      	mov	r4, r0
 800ab6e:	2800      	cmp	r0, #0
 800ab70:	d192      	bne.n	800aa98 <ScheduleTx+0x10>
    return SendFrameOnChannel( MacCtx.Channel );
 800ab72:	4b06      	ldr	r3, [pc, #24]	; (800ab8c <ScheduleTx+0x104>)
 800ab74:	f893 0415 	ldrb.w	r0, [r3, #1045]	; 0x415
 800ab78:	f7ff ff10 	bl	800a99c <SendFrameOnChannel>
 800ab7c:	4604      	mov	r4, r0
 800ab7e:	e78b      	b.n	800aa98 <ScheduleTx+0x10>
            return status;
 800ab80:	4604      	mov	r4, r0
 800ab82:	e789      	b.n	800aa98 <ScheduleTx+0x10>
 800ab84:	4604      	mov	r4, r0
 800ab86:	e787      	b.n	800aa98 <ScheduleTx+0x10>
 800ab88:	20008000 	.word	0x20008000
 800ab8c:	200007f0 	.word	0x200007f0

0800ab90 <OnTxDelayedTimerEvent>:
{
 800ab90:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 800ab92:	4c11      	ldr	r4, [pc, #68]	; (800abd8 <OnTxDelayedTimerEvent+0x48>)
 800ab94:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800ab98:	f008 f9a6 	bl	8012ee8 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800ab9c:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800aba0:	f023 0320 	bic.w	r3, r3, #32
 800aba4:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    switch( ScheduleTx( true ) )
 800aba8:	2001      	movs	r0, #1
 800abaa:	f7ff ff6d 	bl	800aa88 <ScheduleTx>
 800abae:	b108      	cbz	r0, 800abb4 <OnTxDelayedTimerEvent+0x24>
 800abb0:	280b      	cmp	r0, #11
 800abb2:	d100      	bne.n	800abb6 <OnTxDelayedTimerEvent+0x26>
}
 800abb4:	bd10      	pop	{r4, pc}
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800abb6:	4b09      	ldr	r3, [pc, #36]	; (800abdc <OnTxDelayedTimerEvent+0x4c>)
 800abb8:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800abbc:	f884 243a 	strb.w	r2, [r4, #1082]	; 0x43a
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800abc0:	f894 2412 	ldrb.w	r2, [r4, #1042]	; 0x412
 800abc4:	f884 243d 	strb.w	r2, [r4, #1085]	; 0x43d
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800abc8:	2009      	movs	r0, #9
 800abca:	f884 0439 	strb.w	r0, [r4, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800abce:	f002 f8d5 	bl	800cd7c <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800abd2:	f7fe fd49 	bl	8009668 <StopRetransmission>
}
 800abd6:	e7ed      	b.n	800abb4 <OnTxDelayedTimerEvent+0x24>
 800abd8:	200007f0 	.word	0x200007f0
 800abdc:	20008000 	.word	0x20008000

0800abe0 <LoRaMacHandleMcpsRequest>:
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800abe0:	4b23      	ldr	r3, [pc, #140]	; (800ac70 <LoRaMacHandleMcpsRequest+0x90>)
 800abe2:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800abe6:	f013 0f01 	tst.w	r3, #1
 800abea:	d040      	beq.n	800ac6e <LoRaMacHandleMcpsRequest+0x8e>
{
 800abec:	b510      	push	{r4, lr}
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800abee:	4b20      	ldr	r3, [pc, #128]	; (800ac70 <LoRaMacHandleMcpsRequest+0x90>)
 800abf0:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800abf4:	b12b      	cbz	r3, 800ac02 <LoRaMacHandleMcpsRequest+0x22>
 800abf6:	2b03      	cmp	r3, #3
 800abf8:	d003      	beq.n	800ac02 <LoRaMacHandleMcpsRequest+0x22>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800abfa:	2b01      	cmp	r3, #1
 800abfc:	d007      	beq.n	800ac0e <LoRaMacHandleMcpsRequest+0x2e>
        bool waitForRetransmission = false;
 800abfe:	2400      	movs	r4, #0
 800ac00:	e003      	b.n	800ac0a <LoRaMacHandleMcpsRequest+0x2a>
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800ac02:	f7fe fcf5 	bl	80095f0 <CheckRetransUnconfirmedUplink>
 800ac06:	4604      	mov	r4, r0
        if( stopRetransmission == true )
 800ac08:	b9a4      	cbnz	r4, 800ac34 <LoRaMacHandleMcpsRequest+0x54>
        else if( waitForRetransmission == false )
 800ac0a:	b31c      	cbz	r4, 800ac54 <LoRaMacHandleMcpsRequest+0x74>
}
 800ac0c:	bd10      	pop	{r4, pc}
            if( MacCtx.AckTimeoutRetry == true )
 800ac0e:	4b18      	ldr	r3, [pc, #96]	; (800ac70 <LoRaMacHandleMcpsRequest+0x90>)
 800ac10:	f893 3413 	ldrb.w	r3, [r3, #1043]	; 0x413
 800ac14:	b1e3      	cbz	r3, 800ac50 <LoRaMacHandleMcpsRequest+0x70>
                stopRetransmission = CheckRetransConfirmedUplink( );
 800ac16:	f7fe fd0f 	bl	8009638 <CheckRetransConfirmedUplink>
 800ac1a:	4604      	mov	r4, r0
                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800ac1c:	4b15      	ldr	r3, [pc, #84]	; (800ac74 <LoRaMacHandleMcpsRequest+0x94>)
 800ac1e:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d1f0      	bne.n	800ac08 <LoRaMacHandleMcpsRequest+0x28>
                    if( stopRetransmission == false )
 800ac26:	b910      	cbnz	r0, 800ac2e <LoRaMacHandleMcpsRequest+0x4e>
                        AckTimeoutRetriesProcess( );
 800ac28:	f7fe fd5e 	bl	80096e8 <AckTimeoutRetriesProcess>
 800ac2c:	e7ec      	b.n	800ac08 <LoRaMacHandleMcpsRequest+0x28>
                        AckTimeoutRetriesFinalize( );
 800ac2e:	f7ff fdbf 	bl	800a7b0 <AckTimeoutRetriesFinalize>
 800ac32:	e7e9      	b.n	800ac08 <LoRaMacHandleMcpsRequest+0x28>
            TimerStop( &MacCtx.TxDelayedTimer );
 800ac34:	4c0e      	ldr	r4, [pc, #56]	; (800ac70 <LoRaMacHandleMcpsRequest+0x90>)
 800ac36:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800ac3a:	f008 f955 	bl	8012ee8 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800ac3e:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800ac42:	f023 0320 	bic.w	r3, r3, #32
 800ac46:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
            StopRetransmission( );
 800ac4a:	f7fe fd0d 	bl	8009668 <StopRetransmission>
 800ac4e:	e7dd      	b.n	800ac0c <LoRaMacHandleMcpsRequest+0x2c>
                waitForRetransmission = true;
 800ac50:	2401      	movs	r4, #1
 800ac52:	e7da      	b.n	800ac0a <LoRaMacHandleMcpsRequest+0x2a>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800ac54:	4b06      	ldr	r3, [pc, #24]	; (800ac70 <LoRaMacHandleMcpsRequest+0x90>)
 800ac56:	f893 2485 	ldrb.w	r2, [r3, #1157]	; 0x485
 800ac5a:	f36f 1245 	bfc	r2, #5, #1
 800ac5e:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
            MacCtx.AckTimeoutRetry = false;
 800ac62:	2000      	movs	r0, #0
 800ac64:	f883 0413 	strb.w	r0, [r3, #1043]	; 0x413
            OnTxDelayedTimerEvent( NULL );
 800ac68:	f7ff ff92 	bl	800ab90 <OnTxDelayedTimerEvent>
}
 800ac6c:	e7ce      	b.n	800ac0c <LoRaMacHandleMcpsRequest+0x2c>
 800ac6e:	4770      	bx	lr
 800ac70:	200007f0 	.word	0x200007f0
 800ac74:	20008000 	.word	0x20008000

0800ac78 <LoRaMacHandleRequestEvents>:
{
 800ac78:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState == LORAMAC_IDLE )
 800ac7a:	4b22      	ldr	r3, [pc, #136]	; (800ad04 <LoRaMacHandleRequestEvents+0x8c>)
 800ac7c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ac80:	bb7b      	cbnz	r3, 800ace2 <LoRaMacHandleRequestEvents+0x6a>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800ac82:	4b20      	ldr	r3, [pc, #128]	; (800ad04 <LoRaMacHandleRequestEvents+0x8c>)
 800ac84:	f893 4485 	ldrb.w	r4, [r3, #1157]	; 0x485
 800ac88:	f014 0501 	ands.w	r5, r4, #1
 800ac8c:	d005      	beq.n	800ac9a <LoRaMacHandleRequestEvents+0x22>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800ac8e:	f893 2485 	ldrb.w	r2, [r3, #1157]	; 0x485
 800ac92:	f36f 0200 	bfc	r2, #0, #1
 800ac96:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800ac9a:	4b1a      	ldr	r3, [pc, #104]	; (800ad04 <LoRaMacHandleRequestEvents+0x8c>)
 800ac9c:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800aca0:	f013 0f04 	tst.w	r3, #4
 800aca4:	d006      	beq.n	800acb4 <LoRaMacHandleRequestEvents+0x3c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800aca6:	4b17      	ldr	r3, [pc, #92]	; (800ad04 <LoRaMacHandleRequestEvents+0x8c>)
 800aca8:	f893 2485 	ldrb.w	r2, [r3, #1157]	; 0x485
 800acac:	f36f 0282 	bfc	r2, #2, #1
 800acb0:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800acb4:	2001      	movs	r0, #1
 800acb6:	f7fe fc03 	bl	80094c0 <LoRaMacEnableRequests>
        if( reqEvents.Bits.McpsReq == 1 )
 800acba:	b135      	cbz	r5, 800acca <LoRaMacHandleRequestEvents+0x52>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800acbc:	4811      	ldr	r0, [pc, #68]	; (800ad04 <LoRaMacHandleRequestEvents+0x8c>)
 800acbe:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f500 6087 	add.w	r0, r0, #1080	; 0x438
 800acc8:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 800acca:	f014 0f04 	tst.w	r4, #4
 800acce:	d109      	bne.n	800ace4 <LoRaMacHandleRequestEvents+0x6c>
        LoRaMacClassBResumeBeaconing( );
 800acd0:	f001 fe0b 	bl	800c8ea <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 800acd4:	4b0b      	ldr	r3, [pc, #44]	; (800ad04 <LoRaMacHandleRequestEvents+0x8c>)
 800acd6:	f893 2485 	ldrb.w	r2, [r3, #1157]	; 0x485
 800acda:	f36f 1245 	bfc	r2, #5, #1
 800acde:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
}
 800ace2:	bd38      	pop	{r3, r4, r5, pc}
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800ace4:	4808      	ldr	r0, [pc, #32]	; (800ad08 <LoRaMacHandleRequestEvents+0x90>)
 800ace6:	f002 f873 	bl	800cdd0 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800acea:	f002 f8a3 	bl	800ce34 <LoRaMacConfirmQueueGetCnt>
 800acee:	2800      	cmp	r0, #0
 800acf0:	d0ee      	beq.n	800acd0 <LoRaMacHandleRequestEvents+0x58>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800acf2:	4a04      	ldr	r2, [pc, #16]	; (800ad04 <LoRaMacHandleRequestEvents+0x8c>)
 800acf4:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800acf8:	f043 0304 	orr.w	r3, r3, #4
 800acfc:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 800ad00:	e7e6      	b.n	800acd0 <LoRaMacHandleRequestEvents+0x58>
 800ad02:	bf00      	nop
 800ad04:	200007f0 	.word	0x200007f0
 800ad08:	20000c3c 	.word	0x20000c3c

0800ad0c <LoRaMacHandleScheduleUplinkEvent>:
    if( MacCtx.MacState == LORAMAC_IDLE )
 800ad0c:	4b07      	ldr	r3, [pc, #28]	; (800ad2c <LoRaMacHandleScheduleUplinkEvent+0x20>)
 800ad0e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ad12:	b103      	cbz	r3, 800ad16 <LoRaMacHandleScheduleUplinkEvent+0xa>
 800ad14:	4770      	bx	lr
{
 800ad16:	b500      	push	{lr}
 800ad18:	b083      	sub	sp, #12
        bool isStickyMacCommandPending = false;
 800ad1a:	f88d 3007 	strb.w	r3, [sp, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800ad1e:	f10d 0007 	add.w	r0, sp, #7
 800ad22:	f001 ff37 	bl	800cb94 <LoRaMacCommandsStickyCmdsPending>
}
 800ad26:	b003      	add	sp, #12
 800ad28:	f85d fb04 	ldr.w	pc, [sp], #4
 800ad2c:	200007f0 	.word	0x200007f0

0800ad30 <OpenContinuousRxCWindow>:
{
 800ad30:	b570      	push	{r4, r5, r6, lr}
 800ad32:	b082      	sub	sp, #8
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 800ad34:	4c14      	ldr	r4, [pc, #80]	; (800ad88 <OpenContinuousRxCWindow+0x58>)
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800ad36:	4d15      	ldr	r5, [pc, #84]	; (800ad8c <OpenContinuousRxCWindow+0x5c>)
 800ad38:	f505 7678 	add.w	r6, r5, #992	; 0x3e0
 800ad3c:	9600      	str	r6, [sp, #0]
 800ad3e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ad40:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800ad44:	f994 1070 	ldrsb.w	r1, [r4, #112]	; 0x70
 800ad48:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800ad4c:	f002 fe00 	bl	800d950 <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800ad50:	2302      	movs	r3, #2
 800ad52:	f885 33f3 	strb.w	r3, [r5, #1011]	; 0x3f3
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800ad56:	2301      	movs	r3, #1
 800ad58:	f885 33f2 	strb.w	r3, [r5, #1010]	; 0x3f2
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800ad5c:	f505 6284 	add.w	r2, r5, #1056	; 0x420
 800ad60:	4631      	mov	r1, r6
 800ad62:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800ad66:	f002 fe07 	bl	800d978 <RegionRxConfig>
 800ad6a:	b158      	cbz	r0, 800ad84 <OpenContinuousRxCWindow+0x54>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800ad6c:	f895 3420 	ldrb.w	r3, [r5, #1056]	; 0x420
 800ad70:	f885 3462 	strb.w	r3, [r5, #1122]	; 0x462
        Radio.Rx( 0 ); // Continuous mode
 800ad74:	4b06      	ldr	r3, [pc, #24]	; (800ad90 <OpenContinuousRxCWindow+0x60>)
 800ad76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad78:	2000      	movs	r0, #0
 800ad7a:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800ad7c:	f895 33f3 	ldrb.w	r3, [r5, #1011]	; 0x3f3
 800ad80:	f885 3484 	strb.w	r3, [r5, #1156]	; 0x484
}
 800ad84:	b002      	add	sp, #8
 800ad86:	bd70      	pop	{r4, r5, r6, pc}
 800ad88:	20008000 	.word	0x20008000
 800ad8c:	200007f0 	.word	0x200007f0
 800ad90:	08014cbc 	.word	0x08014cbc

0800ad94 <RxWindowSetup>:
{
 800ad94:	b538      	push	{r3, r4, r5, lr}
 800ad96:	460c      	mov	r4, r1
    TimerStop( rxTimer );
 800ad98:	f008 f8a6 	bl	8012ee8 <UTIL_TIMER_Stop>
    Radio.Standby( );
 800ad9c:	4b0c      	ldr	r3, [pc, #48]	; (800add0 <RxWindowSetup+0x3c>)
 800ad9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ada0:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800ada2:	4a0c      	ldr	r2, [pc, #48]	; (800add4 <RxWindowSetup+0x40>)
 800ada4:	4621      	mov	r1, r4
 800ada6:	4b0c      	ldr	r3, [pc, #48]	; (800add8 <RxWindowSetup+0x44>)
 800ada8:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800adac:	f002 fde4 	bl	800d978 <RegionRxConfig>
 800adb0:	b160      	cbz	r0, 800adcc <RxWindowSetup+0x38>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800adb2:	4d0a      	ldr	r5, [pc, #40]	; (800addc <RxWindowSetup+0x48>)
 800adb4:	f895 3420 	ldrb.w	r3, [r5, #1056]	; 0x420
 800adb8:	f885 3462 	strb.w	r3, [r5, #1122]	; 0x462
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 800adbc:	4b04      	ldr	r3, [pc, #16]	; (800add0 <RxWindowSetup+0x3c>)
 800adbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adc0:	4a05      	ldr	r2, [pc, #20]	; (800add8 <RxWindowSetup+0x44>)
 800adc2:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 800adc4:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800adc6:	7ce3      	ldrb	r3, [r4, #19]
 800adc8:	f885 3484 	strb.w	r3, [r5, #1156]	; 0x484
}
 800adcc:	bd38      	pop	{r3, r4, r5, pc}
 800adce:	bf00      	nop
 800add0:	08014cbc 	.word	0x08014cbc
 800add4:	20000c10 	.word	0x20000c10
 800add8:	20008000 	.word	0x20008000
 800addc:	200007f0 	.word	0x200007f0

0800ade0 <OnRxWindow2TimerEvent>:
{
 800ade0:	b508      	push	{r3, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800ade2:	4b11      	ldr	r3, [pc, #68]	; (800ae28 <OnRxWindow2TimerEvent+0x48>)
 800ade4:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 800ade8:	b903      	cbnz	r3, 800adec <OnRxWindow2TimerEvent+0xc>
}
 800adea:	bd08      	pop	{r3, pc}
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800adec:	480e      	ldr	r0, [pc, #56]	; (800ae28 <OnRxWindow2TimerEvent+0x48>)
 800adee:	f890 3415 	ldrb.w	r3, [r0, #1045]	; 0x415
 800adf2:	f880 33cc 	strb.w	r3, [r0, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800adf6:	4b0d      	ldr	r3, [pc, #52]	; (800ae2c <OnRxWindow2TimerEvent+0x4c>)
 800adf8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800adfa:	f8c0 23d0 	str.w	r2, [r0, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800adfe:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800ae02:	f880 23dc 	strb.w	r2, [r0, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800ae06:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ae0a:	f880 33dd 	strb.w	r3, [r0, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	f880 33de 	strb.w	r3, [r0, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800ae14:	2301      	movs	r3, #1
 800ae16:	f880 33df 	strb.w	r3, [r0, #991]	; 0x3df
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800ae1a:	f500 7173 	add.w	r1, r0, #972	; 0x3cc
 800ae1e:	f500 7066 	add.w	r0, r0, #920	; 0x398
 800ae22:	f7ff ffb7 	bl	800ad94 <RxWindowSetup>
 800ae26:	e7e0      	b.n	800adea <OnRxWindow2TimerEvent+0xa>
 800ae28:	200007f0 	.word	0x200007f0
 800ae2c:	20008000 	.word	0x20008000

0800ae30 <OnRxWindow1TimerEvent>:
{
 800ae30:	b508      	push	{r3, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800ae32:	480f      	ldr	r0, [pc, #60]	; (800ae70 <OnRxWindow1TimerEvent+0x40>)
 800ae34:	f890 3415 	ldrb.w	r3, [r0, #1045]	; 0x415
 800ae38:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800ae3c:	4b0d      	ldr	r3, [pc, #52]	; (800ae74 <OnRxWindow1TimerEvent+0x44>)
 800ae3e:	f993 2061 	ldrsb.w	r2, [r3, #97]	; 0x61
 800ae42:	f880 23bb 	strb.w	r2, [r0, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ae46:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800ae4a:	f880 23c8 	strb.w	r2, [r0, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800ae4e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ae52:	f880 33c9 	strb.w	r3, [r0, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800ae56:	2300      	movs	r3, #0
 800ae58:	f880 33ca 	strb.w	r3, [r0, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800ae5c:	f880 33cb 	strb.w	r3, [r0, #971]	; 0x3cb
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800ae60:	f500 716e 	add.w	r1, r0, #952	; 0x3b8
 800ae64:	f500 7060 	add.w	r0, r0, #896	; 0x380
 800ae68:	f7ff ff94 	bl	800ad94 <RxWindowSetup>
}
 800ae6c:	bd08      	pop	{r3, pc}
 800ae6e:	bf00      	nop
 800ae70:	200007f0 	.word	0x200007f0
 800ae74:	20008000 	.word	0x20008000

0800ae78 <LoRaMacHandleNvm>:
{
 800ae78:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_IDLE )
 800ae7a:	4b30      	ldr	r3, [pc, #192]	; (800af3c <LoRaMacHandleNvm+0xc4>)
 800ae7c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ae80:	b103      	cbz	r3, 800ae84 <LoRaMacHandleNvm+0xc>
}
 800ae82:	bd38      	pop	{r3, r4, r5, pc}
 800ae84:	4604      	mov	r4, r0
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800ae86:	2124      	movs	r1, #36	; 0x24
 800ae88:	f005 fe52 	bl	8010b30 <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 800ae8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae8e:	4283      	cmp	r3, r0
 800ae90:	d052      	beq.n	800af38 <LoRaMacHandleNvm+0xc0>
        nvmData->Crypto.Crc32 = crc;
 800ae92:	6260      	str	r0, [r4, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800ae94:	2501      	movs	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800ae96:	2114      	movs	r1, #20
 800ae98:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800ae9c:	f005 fe48 	bl	8010b30 <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 800aea0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800aea2:	4283      	cmp	r3, r0
 800aea4:	d002      	beq.n	800aeac <LoRaMacHandleNvm+0x34>
        nvmData->MacGroup1.Crc32 = crc;
 800aea6:	63e0      	str	r0, [r4, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800aea8:	f045 0502 	orr.w	r5, r5, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800aeac:	21dc      	movs	r1, #220	; 0xdc
 800aeae:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800aeb2:	f005 fe3d 	bl	8010b30 <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 800aeb6:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 800aeba:	4283      	cmp	r3, r0
 800aebc:	d003      	beq.n	800aec6 <LoRaMacHandleNvm+0x4e>
        nvmData->MacGroup2.Crc32 = crc;
 800aebe:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800aec2:	f045 0504 	orr.w	r5, r5, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800aec6:	21bc      	movs	r1, #188	; 0xbc
 800aec8:	f504 7090 	add.w	r0, r4, #288	; 0x120
 800aecc:	f005 fe30 	bl	8010b30 <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 800aed0:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
 800aed4:	4283      	cmp	r3, r0
 800aed6:	d003      	beq.n	800aee0 <LoRaMacHandleNvm+0x68>
        nvmData->SecureElement.Crc32 = crc;
 800aed8:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800aedc:	f045 0508 	orr.w	r5, r5, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800aee0:	21a0      	movs	r1, #160	; 0xa0
 800aee2:	f504 70f0 	add.w	r0, r4, #480	; 0x1e0
 800aee6:	f005 fe23 	bl	8010b30 <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 800aeea:	f8d4 3280 	ldr.w	r3, [r4, #640]	; 0x280
 800aeee:	4283      	cmp	r3, r0
 800aef0:	d003      	beq.n	800aefa <LoRaMacHandleNvm+0x82>
        nvmData->RegionGroup1.Crc32 = crc;
 800aef2:	f8c4 0280 	str.w	r0, [r4, #640]	; 0x280
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800aef6:	f045 0510 	orr.w	r5, r5, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800aefa:	f44f 6193 	mov.w	r1, #1176	; 0x498
 800aefe:	f504 7021 	add.w	r0, r4, #644	; 0x284
 800af02:	f005 fe15 	bl	8010b30 <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 800af06:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
 800af0a:	4283      	cmp	r3, r0
 800af0c:	d003      	beq.n	800af16 <LoRaMacHandleNvm+0x9e>
        nvmData->RegionGroup2.Crc32 = crc;
 800af0e:	f8c4 071c 	str.w	r0, [r4, #1820]	; 0x71c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800af12:	f045 0520 	orr.w	r5, r5, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800af16:	2114      	movs	r1, #20
 800af18:	f504 60e4 	add.w	r0, r4, #1824	; 0x720
 800af1c:	f005 fe08 	bl	8010b30 <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 800af20:	f8d4 3734 	ldr.w	r3, [r4, #1844]	; 0x734
 800af24:	4283      	cmp	r3, r0
 800af26:	d003      	beq.n	800af30 <LoRaMacHandleNvm+0xb8>
        nvmData->ClassB.Crc32 = crc;
 800af28:	f8c4 0734 	str.w	r0, [r4, #1844]	; 0x734
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800af2c:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    CallNvmDataChangeCallback( notifyFlags );
 800af30:	4628      	mov	r0, r5
 800af32:	f7fe fbc1 	bl	80096b8 <CallNvmDataChangeCallback>
 800af36:	e7a4      	b.n	800ae82 <LoRaMacHandleNvm+0xa>
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800af38:	2500      	movs	r5, #0
 800af3a:	e7ac      	b.n	800ae96 <LoRaMacHandleNvm+0x1e>
 800af3c:	200007f0 	.word	0x200007f0

0800af40 <RestoreNvmData>:
{
 800af40:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800af42:	4b34      	ldr	r3, [pc, #208]	; (800b014 <RestoreNvmData+0xd4>)
 800af44:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800af48:	2b01      	cmp	r3, #1
 800af4a:	d001      	beq.n	800af50 <RestoreNvmData+0x10>
        return LORAMAC_STATUS_BUSY;
 800af4c:	2001      	movs	r0, #1
}
 800af4e:	bd38      	pop	{r3, r4, r5, pc}
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 800af50:	4c31      	ldr	r4, [pc, #196]	; (800b018 <RestoreNvmData+0xd8>)
 800af52:	2124      	movs	r1, #36	; 0x24
 800af54:	4620      	mov	r0, r4
 800af56:	f005 fdeb 	bl	8010b30 <Crc32>
    if( crc != NvmBackup.Crypto.Crc32 )
 800af5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af5c:	4283      	cmp	r3, r0
 800af5e:	d001      	beq.n	800af64 <RestoreNvmData+0x24>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800af60:	2017      	movs	r0, #23
 800af62:	e7f4      	b.n	800af4e <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 800af64:	2114      	movs	r1, #20
 800af66:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800af6a:	f005 fde1 	bl	8010b30 <Crc32>
    if( crc != NvmBackup.MacGroup1.Crc32 )
 800af6e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800af70:	4283      	cmp	r3, r0
 800af72:	d001      	beq.n	800af78 <RestoreNvmData+0x38>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800af74:	2017      	movs	r0, #23
 800af76:	e7ea      	b.n	800af4e <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 800af78:	21dc      	movs	r1, #220	; 0xdc
 800af7a:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800af7e:	f005 fdd7 	bl	8010b30 <Crc32>
    if( crc != NvmBackup.MacGroup2.Crc32 )
 800af82:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 800af86:	4283      	cmp	r3, r0
 800af88:	d001      	beq.n	800af8e <RestoreNvmData+0x4e>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800af8a:	2017      	movs	r0, #23
 800af8c:	e7df      	b.n	800af4e <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 800af8e:	21bc      	movs	r1, #188	; 0xbc
 800af90:	f504 7090 	add.w	r0, r4, #288	; 0x120
 800af94:	f005 fdcc 	bl	8010b30 <Crc32>
    if( crc != NvmBackup.SecureElement.Crc32 )
 800af98:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
 800af9c:	4283      	cmp	r3, r0
 800af9e:	d001      	beq.n	800afa4 <RestoreNvmData+0x64>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800afa0:	2017      	movs	r0, #23
 800afa2:	e7d4      	b.n	800af4e <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 800afa4:	21a0      	movs	r1, #160	; 0xa0
 800afa6:	f504 70f0 	add.w	r0, r4, #480	; 0x1e0
 800afaa:	f005 fdc1 	bl	8010b30 <Crc32>
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 800afae:	f8d4 3280 	ldr.w	r3, [r4, #640]	; 0x280
 800afb2:	4283      	cmp	r3, r0
 800afb4:	d001      	beq.n	800afba <RestoreNvmData+0x7a>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800afb6:	2017      	movs	r0, #23
 800afb8:	e7c9      	b.n	800af4e <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 800afba:	2114      	movs	r1, #20
 800afbc:	f504 60e4 	add.w	r0, r4, #1824	; 0x720
 800afc0:	f005 fdb6 	bl	8010b30 <Crc32>
    if( crc != NvmBackup.ClassB.Crc32 )
 800afc4:	f8d4 3734 	ldr.w	r3, [r4, #1844]	; 0x734
 800afc8:	4283      	cmp	r3, r0
 800afca:	d001      	beq.n	800afd0 <RestoreNvmData+0x90>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800afcc:	2017      	movs	r0, #23
 800afce:	e7be      	b.n	800af4e <RestoreNvmData+0xe>
    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 800afd0:	4625      	mov	r5, r4
 800afd2:	4c12      	ldr	r4, [pc, #72]	; (800b01c <RestoreNvmData+0xdc>)
 800afd4:	f44f 62e7 	mov.w	r2, #1848	; 0x738
 800afd8:	4629      	mov	r1, r5
 800afda:	4620      	mov	r0, r4
 800afdc:	f005 fd87 	bl	8010aee <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 800afe0:	f44f 62e7 	mov.w	r2, #1848	; 0x738
 800afe4:	2100      	movs	r1, #0
 800afe6:	4628      	mov	r0, r5
 800afe8:	f005 fd99 	bl	8010b1e <memset1>
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800afec:	4b09      	ldr	r3, [pc, #36]	; (800b014 <RestoreNvmData+0xd4>)
 800afee:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800aff2:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800aff6:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800aff8:	f8c3 23e4 	str.w	r2, [r3, #996]	; 0x3e4
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800affc:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
 800b000:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800b004:	2201      	movs	r2, #1
 800b006:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800b00a:	2202      	movs	r2, #2
 800b00c:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
    return LORAMAC_STATUS_OK;
 800b010:	2000      	movs	r0, #0
 800b012:	e79c      	b.n	800af4e <RestoreNvmData+0xe>
 800b014:	200007f0 	.word	0x200007f0
 800b018:	20008738 	.word	0x20008738
 800b01c:	20008000 	.word	0x20008000

0800b020 <OnRadioRxTimeout>:
{
 800b020:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800b022:	4a09      	ldr	r2, [pc, #36]	; (800b048 <OnRadioRxTimeout+0x28>)
 800b024:	7813      	ldrb	r3, [r2, #0]
 800b026:	f043 0301 	orr.w	r3, r3, #1
 800b02a:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800b02c:	4b07      	ldr	r3, [pc, #28]	; (800b04c <OnRadioRxTimeout+0x2c>)
 800b02e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800b032:	b113      	cbz	r3, 800b03a <OnRadioRxTimeout+0x1a>
 800b034:	691b      	ldr	r3, [r3, #16]
 800b036:	b103      	cbz	r3, 800b03a <OnRadioRxTimeout+0x1a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800b038:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800b03a:	4b05      	ldr	r3, [pc, #20]	; (800b050 <OnRadioRxTimeout+0x30>)
 800b03c:	2201      	movs	r2, #1
 800b03e:	2100      	movs	r1, #0
 800b040:	2002      	movs	r0, #2
 800b042:	f007 fbfd 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
}
 800b046:	bd08      	pop	{r3, pc}
 800b048:	200007ec 	.word	0x200007ec
 800b04c:	200007f0 	.word	0x200007f0
 800b050:	080145cc 	.word	0x080145cc

0800b054 <OnRadioTxTimeout>:
{
 800b054:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800b056:	4a09      	ldr	r2, [pc, #36]	; (800b07c <OnRadioTxTimeout+0x28>)
 800b058:	7813      	ldrb	r3, [r2, #0]
 800b05a:	f043 0304 	orr.w	r3, r3, #4
 800b05e:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800b060:	4b07      	ldr	r3, [pc, #28]	; (800b080 <OnRadioTxTimeout+0x2c>)
 800b062:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800b066:	b113      	cbz	r3, 800b06e <OnRadioTxTimeout+0x1a>
 800b068:	691b      	ldr	r3, [r3, #16]
 800b06a:	b103      	cbz	r3, 800b06e <OnRadioTxTimeout+0x1a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800b06c:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800b06e:	4b05      	ldr	r3, [pc, #20]	; (800b084 <OnRadioTxTimeout+0x30>)
 800b070:	2201      	movs	r2, #1
 800b072:	2100      	movs	r1, #0
 800b074:	2002      	movs	r0, #2
 800b076:	f007 fbe3 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
}
 800b07a:	bd08      	pop	{r3, pc}
 800b07c:	200007ec 	.word	0x200007ec
 800b080:	200007f0 	.word	0x200007f0
 800b084:	080145dc 	.word	0x080145dc

0800b088 <OnRadioRxDone>:
{
 800b088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b08c:	4680      	mov	r8, r0
 800b08e:	460f      	mov	r7, r1
 800b090:	4616      	mov	r6, r2
 800b092:	461d      	mov	r5, r3
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800b094:	f007 fee8 	bl	8012e68 <UTIL_TIMER_GetCurrentTime>
 800b098:	4c0d      	ldr	r4, [pc, #52]	; (800b0d0 <OnRadioRxDone+0x48>)
 800b09a:	6020      	str	r0, [r4, #0]
    RxDoneParams.Payload = payload;
 800b09c:	f8c4 8004 	str.w	r8, [r4, #4]
    RxDoneParams.Size = size;
 800b0a0:	8127      	strh	r7, [r4, #8]
    RxDoneParams.Rssi = rssi;
 800b0a2:	8166      	strh	r6, [r4, #10]
    RxDoneParams.Snr = snr;
 800b0a4:	7325      	strb	r5, [r4, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 800b0a6:	4a0b      	ldr	r2, [pc, #44]	; (800b0d4 <OnRadioRxDone+0x4c>)
 800b0a8:	7813      	ldrb	r3, [r2, #0]
 800b0aa:	f043 0308 	orr.w	r3, r3, #8
 800b0ae:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800b0b0:	4b09      	ldr	r3, [pc, #36]	; (800b0d8 <OnRadioRxDone+0x50>)
 800b0b2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800b0b6:	b113      	cbz	r3, 800b0be <OnRadioRxDone+0x36>
 800b0b8:	691b      	ldr	r3, [r3, #16]
 800b0ba:	b103      	cbz	r3, 800b0be <OnRadioRxDone+0x36>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800b0bc:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800b0be:	4b07      	ldr	r3, [pc, #28]	; (800b0dc <OnRadioRxDone+0x54>)
 800b0c0:	2201      	movs	r2, #1
 800b0c2:	2100      	movs	r1, #0
 800b0c4:	2002      	movs	r0, #2
 800b0c6:	f007 fbbb 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
}
 800b0ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0ce:	bf00      	nop
 800b0d0:	20000cfc 	.word	0x20000cfc
 800b0d4:	200007ec 	.word	0x200007ec
 800b0d8:	200007f0 	.word	0x200007f0
 800b0dc:	080145ec 	.word	0x080145ec

0800b0e0 <OnRadioTxDone>:
{
 800b0e0:	b530      	push	{r4, r5, lr}
 800b0e2:	b083      	sub	sp, #12
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800b0e4:	f007 fec0 	bl	8012e68 <UTIL_TIMER_GetCurrentTime>
 800b0e8:	4b0f      	ldr	r3, [pc, #60]	; (800b128 <OnRadioTxDone+0x48>)
 800b0ea:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800b0ec:	4d0f      	ldr	r5, [pc, #60]	; (800b12c <OnRadioTxDone+0x4c>)
 800b0ee:	466c      	mov	r4, sp
 800b0f0:	4620      	mov	r0, r4
 800b0f2:	f007 fe0b 	bl	8012d0c <SysTimeGet>
 800b0f6:	f505 734e 	add.w	r3, r5, #824	; 0x338
 800b0fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b0fe:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 800b102:	4a0b      	ldr	r2, [pc, #44]	; (800b130 <OnRadioTxDone+0x50>)
 800b104:	7813      	ldrb	r3, [r2, #0]
 800b106:	f043 0310 	orr.w	r3, r3, #16
 800b10a:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800b10c:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
 800b110:	b113      	cbz	r3, 800b118 <OnRadioTxDone+0x38>
 800b112:	691b      	ldr	r3, [r3, #16]
 800b114:	b103      	cbz	r3, 800b118 <OnRadioTxDone+0x38>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800b116:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800b118:	4b06      	ldr	r3, [pc, #24]	; (800b134 <OnRadioTxDone+0x54>)
 800b11a:	2201      	movs	r2, #1
 800b11c:	2100      	movs	r1, #0
 800b11e:	2002      	movs	r0, #2
 800b120:	f007 fb8e 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
}
 800b124:	b003      	add	sp, #12
 800b126:	bd30      	pop	{r4, r5, pc}
 800b128:	20000d0c 	.word	0x20000d0c
 800b12c:	200007f0 	.word	0x200007f0
 800b130:	200007ec 	.word	0x200007ec
 800b134:	080145fc 	.word	0x080145fc

0800b138 <ResetMacParameters>:
{
 800b138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b13a:	b08f      	sub	sp, #60	; 0x3c
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800b13c:	4c4d      	ldr	r4, [pc, #308]	; (800b274 <ResetMacParameters+0x13c>)
 800b13e:	2600      	movs	r6, #0
 800b140:	f884 6118 	strb.w	r6, [r4, #280]	; 0x118
    Nvm.MacGroup1.AdrAckCounter = 0;
 800b144:	62a6      	str	r6, [r4, #40]	; 0x28
    MacCtx.ChannelsNbTransCounter = 0;
 800b146:	4d4c      	ldr	r5, [pc, #304]	; (800b278 <ResetMacParameters+0x140>)
 800b148:	f885 6410 	strb.w	r6, [r5, #1040]	; 0x410
    MacCtx.AckTimeoutRetries = 1;
 800b14c:	2701      	movs	r7, #1
 800b14e:	f885 7411 	strb.w	r7, [r5, #1041]	; 0x411
    MacCtx.AckTimeoutRetriesCounter = 1;
 800b152:	f885 7412 	strb.w	r7, [r5, #1042]	; 0x412
    MacCtx.AckTimeoutRetry = false;
 800b156:	f885 6413 	strb.w	r6, [r5, #1043]	; 0x413
    Nvm.MacGroup2.MaxDCycle = 0;
 800b15a:	f884 6107 	strb.w	r6, [r4, #263]	; 0x107
    Nvm.MacGroup2.AggregatedDCycle = 1;
 800b15e:	f8a4 710a 	strh.w	r7, [r4, #266]	; 0x10a
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800b162:	f994 30cc 	ldrsb.w	r3, [r4, #204]	; 0xcc
 800b166:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800b16a:	f994 30cd 	ldrsb.w	r3, [r4, #205]	; 0xcd
 800b16e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800b172:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 800b176:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800b17a:	f104 0364 	add.w	r3, r4, #100	; 0x64
 800b17e:	f104 02a8 	add.w	r2, r4, #168	; 0xa8
 800b182:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b186:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800b18a:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 800b18e:	f104 02b0 	add.w	r2, r4, #176	; 0xb0
 800b192:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b196:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800b19a:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
 800b19e:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800b1a2:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 800b1a6:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800b1aa:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 800b1ae:	67a3      	str	r3, [r4, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800b1b0:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 800b1b4:	67e3      	str	r3, [r4, #124]	; 0x7c
    MacCtx.NodeAckRequested = false;
 800b1b6:	f885 6414 	strb.w	r6, [r5, #1044]	; 0x414
    Nvm.MacGroup1.SrvAckRequested = false;
 800b1ba:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800b1be:	f88d 700c 	strb.w	r7, [sp, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800b1c2:	f504 73f0 	add.w	r3, r4, #480	; 0x1e0
 800b1c6:	9301      	str	r3, [sp, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800b1c8:	f504 7321 	add.w	r3, r4, #644	; 0x284
 800b1cc:	9302      	str	r3, [sp, #8]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800b1ce:	a901      	add	r1, sp, #4
 800b1d0:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b1d4:	f002 fb81 	bl	800d8da <RegionInitDefaults>
    MacCtx.Channel = 0;
 800b1d8:	f885 6415 	strb.w	r6, [r5, #1045]	; 0x415
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800b1dc:	f885 63cc 	strb.w	r6, [r5, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800b1e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b1e2:	f8c5 33d0 	str.w	r3, [r5, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b1e6:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800b1ea:	f885 33dc 	strb.w	r3, [r5, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800b1ee:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 800b1f2:	f885 33dd 	strb.w	r3, [r5, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800b1f6:	f885 63de 	strb.w	r6, [r5, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800b1fa:	f885 73df 	strb.w	r7, [r5, #991]	; 0x3df
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800b1fe:	f505 7478 	add.w	r4, r5, #992	; 0x3e0
 800b202:	f505 7c73 	add.w	ip, r5, #972	; 0x3cc
 800b206:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b20a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b20c:	f8dc 3000 	ldr.w	r3, [ip]
 800b210:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800b212:	f885 73f2 	strb.w	r7, [r5, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800b216:	2302      	movs	r3, #2
 800b218:	f885 33f3 	strb.w	r3, [r5, #1011]	; 0x3f3
    classBCallbacks.GetTemperatureLevel = NULL;
 800b21c:	960c      	str	r6, [sp, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 800b21e:	960d      	str	r6, [sp, #52]	; 0x34
    if( MacCtx.MacCallbacks != NULL )
 800b220:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
 800b224:	b11b      	cbz	r3, 800b22e <ResetMacParameters+0xf6>
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800b226:	685a      	ldr	r2, [r3, #4]
 800b228:	920c      	str	r2, [sp, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800b22a:	691b      	ldr	r3, [r3, #16]
 800b22c:	930d      	str	r3, [sp, #52]	; 0x34
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800b22e:	4b12      	ldr	r3, [pc, #72]	; (800b278 <ResetMacParameters+0x140>)
 800b230:	f503 628c 	add.w	r2, r3, #1120	; 0x460
 800b234:	9204      	str	r2, [sp, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800b236:	f203 421c 	addw	r2, r3, #1052	; 0x41c
 800b23a:	9205      	str	r2, [sp, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800b23c:	f203 424c 	addw	r2, r3, #1100	; 0x44c
 800b240:	9206      	str	r2, [sp, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800b242:	f203 4385 	addw	r3, r3, #1157	; 0x485
 800b246:	9307      	str	r3, [sp, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800b248:	4a0a      	ldr	r2, [pc, #40]	; (800b274 <ResetMacParameters+0x13c>)
 800b24a:	f102 03d4 	add.w	r3, r2, #212	; 0xd4
 800b24e:	9308      	str	r3, [sp, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800b250:	f102 0340 	add.w	r3, r2, #64	; 0x40
 800b254:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800b256:	f102 0344 	add.w	r3, r2, #68	; 0x44
 800b25a:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800b25c:	f102 03d8 	add.w	r3, r2, #216	; 0xd8
 800b260:	930b      	str	r3, [sp, #44]	; 0x2c
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800b262:	f502 62e4 	add.w	r2, r2, #1824	; 0x720
 800b266:	a90c      	add	r1, sp, #48	; 0x30
 800b268:	a804      	add	r0, sp, #16
 800b26a:	f001 fb29 	bl	800c8c0 <LoRaMacClassBInit>
}
 800b26e:	b00f      	add	sp, #60	; 0x3c
 800b270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b272:	bf00      	nop
 800b274:	20008000 	.word	0x20008000
 800b278:	200007f0 	.word	0x200007f0

0800b27c <SwitchClass>:
{
 800b27c:	b570      	push	{r4, r5, r6, lr}
 800b27e:	4604      	mov	r4, r0
    switch( Nvm.MacGroup2.DeviceClass )
 800b280:	4b3e      	ldr	r3, [pc, #248]	; (800b37c <SwitchClass+0x100>)
 800b282:	f893 5104 	ldrb.w	r5, [r3, #260]	; 0x104
 800b286:	2d01      	cmp	r5, #1
 800b288:	d064      	beq.n	800b354 <SwitchClass+0xd8>
 800b28a:	2d02      	cmp	r5, #2
 800b28c:	d06a      	beq.n	800b364 <SwitchClass+0xe8>
 800b28e:	b10d      	cbz	r5, 800b294 <SwitchClass+0x18>
 800b290:	2003      	movs	r0, #3
}
 800b292:	bd70      	pop	{r4, r5, r6, pc}
            if( deviceClass == CLASS_A )
 800b294:	b930      	cbnz	r0, 800b2a4 <SwitchClass+0x28>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800b296:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800b29a:	3364      	adds	r3, #100	; 0x64
 800b29c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b2a0:	e882 0003 	stmia.w	r2, {r0, r1}
            if( deviceClass == CLASS_B )
 800b2a4:	2c01      	cmp	r4, #1
 800b2a6:	d021      	beq.n	800b2ec <SwitchClass+0x70>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b2a8:	2003      	movs	r0, #3
            if( deviceClass == CLASS_C )
 800b2aa:	2c02      	cmp	r4, #2
 800b2ac:	d1f1      	bne.n	800b292 <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800b2ae:	4b33      	ldr	r3, [pc, #204]	; (800b37c <SwitchClass+0x100>)
 800b2b0:	f883 4104 	strb.w	r4, [r3, #260]	; 0x104
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800b2b4:	4e32      	ldr	r6, [pc, #200]	; (800b380 <SwitchClass+0x104>)
 800b2b6:	f506 7478 	add.w	r4, r6, #992	; 0x3e0
 800b2ba:	f506 7c73 	add.w	ip, r6, #972	; 0x3cc
 800b2be:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b2c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b2c4:	f8dc 3000 	ldr.w	r3, [ip]
 800b2c8:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800b2ca:	2302      	movs	r3, #2
 800b2cc:	f886 33f3 	strb.w	r3, [r6, #1011]	; 0x3f3
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	dd13      	ble.n	800b2fe <SwitchClass+0x82>
                MacCtx.NodeAckRequested = false;
 800b2d6:	4b2a      	ldr	r3, [pc, #168]	; (800b380 <SwitchClass+0x104>)
 800b2d8:	2200      	movs	r2, #0
 800b2da:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
                Radio.Sleep( );
 800b2de:	4b29      	ldr	r3, [pc, #164]	; (800b384 <SwitchClass+0x108>)
 800b2e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2e2:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 800b2e4:	f7ff fd24 	bl	800ad30 <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 800b2e8:	4628      	mov	r0, r5
 800b2ea:	e7d2      	b.n	800b292 <SwitchClass+0x16>
                status = LoRaMacClassBSwitchClass( deviceClass );
 800b2ec:	4620      	mov	r0, r4
 800b2ee:	f001 fafd 	bl	800c8ec <LoRaMacClassBSwitchClass>
                if( status == LORAMAC_STATUS_OK )
 800b2f2:	2800      	cmp	r0, #0
 800b2f4:	d1d9      	bne.n	800b2aa <SwitchClass+0x2e>
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800b2f6:	4b21      	ldr	r3, [pc, #132]	; (800b37c <SwitchClass+0x100>)
 800b2f8:	f883 4104 	strb.w	r4, [r3, #260]	; 0x104
 800b2fc:	e7d5      	b.n	800b2aa <SwitchClass+0x2e>
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800b2fe:	4618      	mov	r0, r3
 800b300:	4a1e      	ldr	r2, [pc, #120]	; (800b37c <SwitchClass+0x100>)
 800b302:	212c      	movs	r1, #44	; 0x2c
 800b304:	fb01 2203 	mla	r2, r1, r3, r2
 800b308:	f892 20da 	ldrb.w	r2, [r2, #218]	; 0xda
 800b30c:	b912      	cbnz	r2, 800b314 <SwitchClass+0x98>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800b30e:	3301      	adds	r3, #1
 800b310:	b25b      	sxtb	r3, r3
 800b312:	e7de      	b.n	800b2d2 <SwitchClass+0x56>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800b314:	4a19      	ldr	r2, [pc, #100]	; (800b37c <SwitchClass+0x100>)
 800b316:	fb01 2000 	mla	r0, r1, r0, r2
 800b31a:	f8d0 10f0 	ldr.w	r1, [r0, #240]	; 0xf0
 800b31e:	66d1      	str	r1, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800b320:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
 800b324:	f882 3070 	strb.w	r3, [r2, #112]	; 0x70
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800b328:	4b15      	ldr	r3, [pc, #84]	; (800b380 <SwitchClass+0x104>)
 800b32a:	f893 0415 	ldrb.w	r0, [r3, #1045]	; 0x415
 800b32e:	f883 03e0 	strb.w	r0, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800b332:	f8c3 13e4 	str.w	r1, [r3, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b336:	f892 1075 	ldrb.w	r1, [r2, #117]	; 0x75
 800b33a:	f883 13f0 	strb.w	r1, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800b33e:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 800b342:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800b346:	2203      	movs	r2, #3
 800b348:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800b34c:	2201      	movs	r2, #1
 800b34e:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 800b352:	e7c0      	b.n	800b2d6 <SwitchClass+0x5a>
            status = LoRaMacClassBSwitchClass( deviceClass );
 800b354:	f001 faca 	bl	800c8ec <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 800b358:	2800      	cmp	r0, #0
 800b35a:	d19a      	bne.n	800b292 <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800b35c:	4b07      	ldr	r3, [pc, #28]	; (800b37c <SwitchClass+0x100>)
 800b35e:	f883 4104 	strb.w	r4, [r3, #260]	; 0x104
 800b362:	e796      	b.n	800b292 <SwitchClass+0x16>
            if( deviceClass == CLASS_A )
 800b364:	b938      	cbnz	r0, 800b376 <SwitchClass+0xfa>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800b366:	4b05      	ldr	r3, [pc, #20]	; (800b37c <SwitchClass+0x100>)
 800b368:	f883 0104 	strb.w	r0, [r3, #260]	; 0x104
                Radio.Sleep( );
 800b36c:	4b05      	ldr	r3, [pc, #20]	; (800b384 <SwitchClass+0x108>)
 800b36e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b370:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 800b372:	4620      	mov	r0, r4
 800b374:	e78d      	b.n	800b292 <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b376:	2003      	movs	r0, #3
 800b378:	e78b      	b.n	800b292 <SwitchClass+0x16>
 800b37a:	bf00      	nop
 800b37c:	20008000 	.word	0x20008000
 800b380:	200007f0 	.word	0x200007f0
 800b384:	08014cbc 	.word	0x08014cbc

0800b388 <SendReJoinReq>:
{
 800b388:	b538      	push	{r3, r4, r5, lr}
    switch( joinReqType )
 800b38a:	28ff      	cmp	r0, #255	; 0xff
 800b38c:	d003      	beq.n	800b396 <SendReJoinReq+0xe>
    bool allowDelayedTx = true;
 800b38e:	2001      	movs	r0, #1
    status = ScheduleTx( allowDelayedTx );
 800b390:	f7ff fb7a 	bl	800aa88 <ScheduleTx>
}
 800b394:	bd38      	pop	{r3, r4, r5, pc}
            SwitchClass( CLASS_A );
 800b396:	2000      	movs	r0, #0
 800b398:	f7ff ff70 	bl	800b27c <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800b39c:	4d0e      	ldr	r5, [pc, #56]	; (800b3d8 <SendReJoinReq+0x50>)
 800b39e:	2400      	movs	r4, #0
 800b3a0:	f885 4104 	strb.w	r4, [r5, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800b3a4:	1cab      	adds	r3, r5, #2
 800b3a6:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800b3aa:	23ff      	movs	r3, #255	; 0xff
 800b3ac:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800b3b0:	f885 410d 	strb.w	r4, [r5, #269]	; 0x10d
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 800b3b4:	f005 fb6a 	bl	8010a8c <SecureElementGetJoinEui>
 800b3b8:	4601      	mov	r1, r0
 800b3ba:	2208      	movs	r2, #8
 800b3bc:	f505 7087 	add.w	r0, r5, #270	; 0x10e
 800b3c0:	f005 fb95 	bl	8010aee <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 800b3c4:	f005 fb4c 	bl	8010a60 <SecureElementGetDevEui>
 800b3c8:	4601      	mov	r1, r0
 800b3ca:	2208      	movs	r2, #8
 800b3cc:	f505 708b 	add.w	r0, r5, #278	; 0x116
 800b3d0:	f005 fb8d 	bl	8010aee <memcpy1>
            allowDelayedTx = false;
 800b3d4:	4620      	mov	r0, r4
            break;
 800b3d6:	e7db      	b.n	800b390 <SendReJoinReq+0x8>
 800b3d8:	200007f0 	.word	0x200007f0

0800b3dc <SetTxContinuousWave>:
{
 800b3dc:	b510      	push	{r4, lr}
 800b3de:	b084      	sub	sp, #16
    continuousWave.Channel = MacCtx.Channel;
 800b3e0:	4c10      	ldr	r4, [pc, #64]	; (800b424 <SetTxContinuousWave+0x48>)
 800b3e2:	f894 3415 	ldrb.w	r3, [r4, #1045]	; 0x415
 800b3e6:	f88d 3000 	strb.w	r3, [sp]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800b3ea:	4b0f      	ldr	r3, [pc, #60]	; (800b428 <SetTxContinuousWave+0x4c>)
 800b3ec:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 800b3f0:	f88d 2001 	strb.w	r2, [sp, #1]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800b3f4:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 800b3f8:	f88d 2002 	strb.w	r2, [sp, #2]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800b3fc:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800b3fe:	9201      	str	r2, [sp, #4]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800b400:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800b402:	9202      	str	r2, [sp, #8]
    continuousWave.Timeout = timeout;
 800b404:	f8ad 000c 	strh.w	r0, [sp, #12]
    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 800b408:	4669      	mov	r1, sp
 800b40a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b40e:	f002 fb53 	bl	800dab8 <RegionSetContinuousWave>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800b412:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800b416:	f043 0302 	orr.w	r3, r3, #2
 800b41a:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
}
 800b41e:	2000      	movs	r0, #0
 800b420:	b004      	add	sp, #16
 800b422:	bd10      	pop	{r4, pc}
 800b424:	200007f0 	.word	0x200007f0
 800b428:	20008000 	.word	0x20008000

0800b42c <PrepareFrame>:
{
 800b42c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b430:	b083      	sub	sp, #12
 800b432:	4605      	mov	r5, r0
 800b434:	460e      	mov	r6, r1
 800b436:	4617      	mov	r7, r2
 800b438:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    MacCtx.PktBufferLen = 0;
 800b43c:	4959      	ldr	r1, [pc, #356]	; (800b5a4 <PrepareFrame+0x178>)
 800b43e:	2200      	movs	r2, #0
 800b440:	800a      	strh	r2, [r1, #0]
    MacCtx.NodeAckRequested = false;
 800b442:	f881 2414 	strb.w	r2, [r1, #1044]	; 0x414
    uint32_t fCntUp = 0;
 800b446:	9201      	str	r2, [sp, #4]
    size_t macCmdsSize = 0;
 800b448:	9200      	str	r2, [sp, #0]
    if( fBuffer == NULL )
 800b44a:	4698      	mov	r8, r3
 800b44c:	b1cb      	cbz	r3, 800b482 <PrepareFrame+0x56>
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800b44e:	f8df 9154 	ldr.w	r9, [pc, #340]	; 800b5a4 <PrepareFrame+0x178>
 800b452:	4622      	mov	r2, r4
 800b454:	4641      	mov	r1, r8
 800b456:	f509 709c 	add.w	r0, r9, #312	; 0x138
 800b45a:	f005 fb48 	bl	8010aee <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800b45e:	b2e0      	uxtb	r0, r4
 800b460:	f889 0237 	strb.w	r0, [r9, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 800b464:	782b      	ldrb	r3, [r5, #0]
 800b466:	f889 3002 	strb.w	r3, [r9, #2]
    switch( macHdr->Bits.MType )
 800b46a:	782b      	ldrb	r3, [r5, #0]
 800b46c:	095b      	lsrs	r3, r3, #5
 800b46e:	2b04      	cmp	r3, #4
 800b470:	d009      	beq.n	800b486 <PrepareFrame+0x5a>
 800b472:	2b07      	cmp	r3, #7
 800b474:	d079      	beq.n	800b56a <PrepareFrame+0x13e>
 800b476:	2b02      	cmp	r3, #2
 800b478:	d009      	beq.n	800b48e <PrepareFrame+0x62>
 800b47a:	2002      	movs	r0, #2
}
 800b47c:	b003      	add	sp, #12
 800b47e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        fBufferSize = 0;
 800b482:	4614      	mov	r4, r2
 800b484:	e7e3      	b.n	800b44e <PrepareFrame+0x22>
            MacCtx.NodeAckRequested = true;
 800b486:	4b47      	ldr	r3, [pc, #284]	; (800b5a4 <PrepareFrame+0x178>)
 800b488:	2201      	movs	r2, #1
 800b48a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800b48e:	4b45      	ldr	r3, [pc, #276]	; (800b5a4 <PrepareFrame+0x178>)
 800b490:	2204      	movs	r2, #4
 800b492:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800b496:	1c9a      	adds	r2, r3, #2
 800b498:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800b49c:	22ff      	movs	r2, #255	; 0xff
 800b49e:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800b4a2:	782a      	ldrb	r2, [r5, #0]
 800b4a4:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800b4a8:	f883 7128 	strb.w	r7, [r3, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800b4ac:	4a3e      	ldr	r2, [pc, #248]	; (800b5a8 <PrepareFrame+0x17c>)
 800b4ae:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
 800b4b2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800b4b6:	7832      	ldrb	r2, [r6, #0]
 800b4b8:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800b4bc:	f883 0130 	strb.w	r0, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800b4c0:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800b4c4:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800b4c8:	a801      	add	r0, sp, #4
 800b4ca:	f001 fe8b 	bl	800d1e4 <LoRaMacCryptoGetFCntUp>
 800b4ce:	2800      	cmp	r0, #0
 800b4d0:	d15c      	bne.n	800b58c <PrepareFrame+0x160>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800b4d2:	9a01      	ldr	r2, [sp, #4]
 800b4d4:	4b33      	ldr	r3, [pc, #204]	; (800b5a4 <PrepareFrame+0x178>)
 800b4d6:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
            MacCtx.McpsConfirm.NbRetries = 0;
 800b4da:	2100      	movs	r1, #0
 800b4dc:	f883 143d 	strb.w	r1, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.AckReceived = false;
 800b4e0:	f883 143c 	strb.w	r1, [r3, #1084]	; 0x43c
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800b4e4:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800b4e8:	4668      	mov	r0, sp
 800b4ea:	f001 fb15 	bl	800cb18 <LoRaMacCommandsGetSizeSerializedCmds>
 800b4ee:	2800      	cmp	r0, #0
 800b4f0:	d14e      	bne.n	800b590 <PrepareFrame+0x164>
            if( macCmdsSize > 0 )
 800b4f2:	9b00      	ldr	r3, [sp, #0]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d0c1      	beq.n	800b47c <PrepareFrame+0x50>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 800b4f8:	4b2b      	ldr	r3, [pc, #172]	; (800b5a8 <PrepareFrame+0x17c>)
 800b4fa:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 800b4fe:	f7fe f91f 	bl	8009740 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800b502:	4b28      	ldr	r3, [pc, #160]	; (800b5a4 <PrepareFrame+0x178>)
 800b504:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800b508:	b113      	cbz	r3, 800b510 <PrepareFrame+0xe4>
 800b50a:	9a00      	ldr	r2, [sp, #0]
 800b50c:	2a0f      	cmp	r2, #15
 800b50e:	d915      	bls.n	800b53c <PrepareFrame+0x110>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800b510:	b113      	cbz	r3, 800b518 <PrepareFrame+0xec>
 800b512:	9b00      	ldr	r3, [sp, #0]
 800b514:	2b0f      	cmp	r3, #15
 800b516:	d821      	bhi.n	800b55c <PrepareFrame+0x130>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800b518:	4a24      	ldr	r2, [pc, #144]	; (800b5ac <PrepareFrame+0x180>)
 800b51a:	4669      	mov	r1, sp
 800b51c:	f001 fb08 	bl	800cb30 <LoRaMacCommandsSerializeCmds>
 800b520:	2800      	cmp	r0, #0
 800b522:	d13b      	bne.n	800b59c <PrepareFrame+0x170>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800b524:	4b1f      	ldr	r3, [pc, #124]	; (800b5a4 <PrepareFrame+0x178>)
 800b526:	2200      	movs	r2, #0
 800b528:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 800b52c:	f203 428c 	addw	r2, r3, #1164	; 0x48c
 800b530:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800b534:	9a00      	ldr	r2, [sp, #0]
 800b536:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 800b53a:	e79f      	b.n	800b47c <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800b53c:	4a1c      	ldr	r2, [pc, #112]	; (800b5b0 <PrepareFrame+0x184>)
 800b53e:	4669      	mov	r1, sp
 800b540:	200f      	movs	r0, #15
 800b542:	f001 faf5 	bl	800cb30 <LoRaMacCommandsSerializeCmds>
 800b546:	bb28      	cbnz	r0, 800b594 <PrepareFrame+0x168>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800b548:	7833      	ldrb	r3, [r6, #0]
 800b54a:	9a00      	ldr	r2, [sp, #0]
 800b54c:	f362 0303 	bfi	r3, r2, #0, #4
 800b550:	7033      	strb	r3, [r6, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800b552:	b2da      	uxtb	r2, r3
 800b554:	4b13      	ldr	r3, [pc, #76]	; (800b5a4 <PrepareFrame+0x178>)
 800b556:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 800b55a:	e78f      	b.n	800b47c <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800b55c:	4a13      	ldr	r2, [pc, #76]	; (800b5ac <PrepareFrame+0x180>)
 800b55e:	4669      	mov	r1, sp
 800b560:	f001 fae6 	bl	800cb30 <LoRaMacCommandsSerializeCmds>
 800b564:	b1c0      	cbz	r0, 800b598 <PrepareFrame+0x16c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b566:	2013      	movs	r0, #19
 800b568:	e788      	b.n	800b47c <PrepareFrame+0x50>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800b56a:	f1b8 0f00 	cmp.w	r8, #0
 800b56e:	d017      	beq.n	800b5a0 <PrepareFrame+0x174>
 800b570:	2800      	cmp	r0, #0
 800b572:	d083      	beq.n	800b47c <PrepareFrame+0x50>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800b574:	4c0b      	ldr	r4, [pc, #44]	; (800b5a4 <PrepareFrame+0x178>)
 800b576:	b282      	uxth	r2, r0
 800b578:	4641      	mov	r1, r8
 800b57a:	1ce0      	adds	r0, r4, #3
 800b57c:	f005 fab7 	bl	8010aee <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800b580:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
 800b584:	3301      	adds	r3, #1
 800b586:	8023      	strh	r3, [r4, #0]
    return LORAMAC_STATUS_OK;
 800b588:	2000      	movs	r0, #0
 800b58a:	e777      	b.n	800b47c <PrepareFrame+0x50>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800b58c:	2012      	movs	r0, #18
 800b58e:	e775      	b.n	800b47c <PrepareFrame+0x50>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b590:	2013      	movs	r0, #19
 800b592:	e773      	b.n	800b47c <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b594:	2013      	movs	r0, #19
 800b596:	e771      	b.n	800b47c <PrepareFrame+0x50>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800b598:	200a      	movs	r0, #10
 800b59a:	e76f      	b.n	800b47c <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b59c:	2013      	movs	r0, #19
 800b59e:	e76d      	b.n	800b47c <PrepareFrame+0x50>
    return LORAMAC_STATUS_OK;
 800b5a0:	2000      	movs	r0, #0
 800b5a2:	e76b      	b.n	800b47c <PrepareFrame+0x50>
 800b5a4:	200007f0 	.word	0x200007f0
 800b5a8:	20008000 	.word	0x20008000
 800b5ac:	20000c7c 	.word	0x20000c7c
 800b5b0:	20000908 	.word	0x20000908

0800b5b4 <Send>:
{
 800b5b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5b8:	b08a      	sub	sp, #40	; 0x28
 800b5ba:	4617      	mov	r7, r2
 800b5bc:	4698      	mov	r8, r3
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800b5be:	4c43      	ldr	r4, [pc, #268]	; (800b6cc <Send+0x118>)
 800b5c0:	f994 a039 	ldrsb.w	sl, [r4, #57]	; 0x39
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800b5c4:	f994 9038 	ldrsb.w	r9, [r4, #56]	; 0x38
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800b5c8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b5ca:	9208      	str	r2, [sp, #32]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800b5cc:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d079      	beq.n	800b6c8 <Send+0x114>
 800b5d4:	4605      	mov	r5, r0
 800b5d6:	460e      	mov	r6, r1
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800b5d8:	f894 3107 	ldrb.w	r3, [r4, #263]	; 0x107
 800b5dc:	b90b      	cbnz	r3, 800b5e2 <Send+0x2e>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800b5de:	2100      	movs	r1, #0
 800b5e0:	6321      	str	r1, [r4, #48]	; 0x30
    fCtrl.Value = 0;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800b5e8:	4838      	ldr	r0, [pc, #224]	; (800b6cc <Send+0x118>)
 800b5ea:	f890 1106 	ldrb.w	r1, [r0, #262]	; 0x106
 800b5ee:	f361 13c7 	bfi	r3, r1, #7, #1
 800b5f2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800b5f6:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
 800b5fa:	2b01      	cmp	r3, #1
 800b5fc:	d051      	beq.n	800b6a2 <Send+0xee>
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800b5fe:	4b33      	ldr	r3, [pc, #204]	; (800b6cc <Send+0x118>)
 800b600:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b604:	b12b      	cbz	r3, 800b612 <Send+0x5e>
        fCtrl.Bits.Ack = 1;
 800b606:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800b60a:	f043 0320 	orr.w	r3, r3, #32
 800b60e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    adrNext.Version = Nvm.MacGroup2.Version;
 800b612:	4c2e      	ldr	r4, [pc, #184]	; (800b6cc <Send+0x118>)
 800b614:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800b618:	9303      	str	r3, [sp, #12]
    adrNext.UpdateChanMask = true;
 800b61a:	2301      	movs	r3, #1
 800b61c:	f88d 3010 	strb.w	r3, [sp, #16]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800b620:	f88d 1011 	strb.w	r1, [sp, #17]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800b624:	9205      	str	r2, [sp, #20]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800b626:	4b2a      	ldr	r3, [pc, #168]	; (800b6d0 <Send+0x11c>)
 800b628:	f8b3 23f4 	ldrh.w	r2, [r3, #1012]	; 0x3f4
 800b62c:	f8ad 2018 	strh.w	r2, [sp, #24]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800b630:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 800b634:	f8ad 301a 	strh.w	r3, [sp, #26]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800b638:	f88d a01c 	strb.w	sl, [sp, #28]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800b63c:	f88d 901d 	strb.w	r9, [sp, #29]
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b640:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 800b644:	f88d 301e 	strb.w	r3, [sp, #30]
    adrNext.Region = Nvm.MacGroup2.Region;
 800b648:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800b64c:	f88d 301f 	strb.w	r3, [sp, #31]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800b650:	ab08      	add	r3, sp, #32
 800b652:	f104 0238 	add.w	r2, r4, #56	; 0x38
 800b656:	f104 0139 	add.w	r1, r4, #57	; 0x39
 800b65a:	a803      	add	r0, sp, #12
 800b65c:	f001 f928 	bl	800c8b0 <LoRaMacAdrCalcNext>
 800b660:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800b664:	f360 1386 	bfi	r3, r0, #6, #1
 800b668:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800b66c:	f8cd 8000 	str.w	r8, [sp]
 800b670:	463b      	mov	r3, r7
 800b672:	4632      	mov	r2, r6
 800b674:	a909      	add	r1, sp, #36	; 0x24
 800b676:	4628      	mov	r0, r5
 800b678:	f7ff fed8 	bl	800b42c <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800b67c:	4604      	mov	r4, r0
 800b67e:	b108      	cbz	r0, 800b684 <Send+0xd0>
 800b680:	280a      	cmp	r0, #10
 800b682:	d104      	bne.n	800b68e <Send+0xda>
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800b684:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 800b688:	f7ff f9fe 	bl	800aa88 <ScheduleTx>
 800b68c:	4604      	mov	r4, r0
    if( status != LORAMAC_STATUS_OK )
 800b68e:	b17c      	cbz	r4, 800b6b0 <Send+0xfc>
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800b690:	4b0e      	ldr	r3, [pc, #56]	; (800b6cc <Send+0x118>)
 800b692:	f883 a039 	strb.w	sl, [r3, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800b696:	f883 9038 	strb.w	r9, [r3, #56]	; 0x38
}
 800b69a:	4620      	mov	r0, r4
 800b69c:	b00a      	add	sp, #40	; 0x28
 800b69e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        fCtrl.Bits.FPending      = 1;
 800b6a2:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800b6a6:	f043 0310 	orr.w	r3, r3, #16
 800b6aa:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800b6ae:	e7a6      	b.n	800b5fe <Send+0x4a>
        Nvm.MacGroup1.SrvAckRequested = false;
 800b6b0:	4b06      	ldr	r3, [pc, #24]	; (800b6cc <Send+0x118>)
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800b6b8:	9a08      	ldr	r2, [sp, #32]
 800b6ba:	629a      	str	r2, [r3, #40]	; 0x28
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800b6bc:	f001 fa00 	bl	800cac0 <LoRaMacCommandsRemoveNoneStickyCmds>
 800b6c0:	2800      	cmp	r0, #0
 800b6c2:	d0ea      	beq.n	800b69a <Send+0xe6>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b6c4:	2413      	movs	r4, #19
 800b6c6:	e7e8      	b.n	800b69a <Send+0xe6>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800b6c8:	2407      	movs	r4, #7
 800b6ca:	e7e6      	b.n	800b69a <Send+0xe6>
 800b6cc:	20008000 	.word	0x20008000
 800b6d0:	200007f0 	.word	0x200007f0

0800b6d4 <LoRaMacIsBusy>:
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800b6d4:	4b07      	ldr	r3, [pc, #28]	; (800b6f4 <LoRaMacIsBusy+0x20>)
 800b6d6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800b6da:	b933      	cbnz	r3, 800b6ea <LoRaMacIsBusy+0x16>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800b6dc:	4b05      	ldr	r3, [pc, #20]	; (800b6f4 <LoRaMacIsBusy+0x20>)
 800b6de:	f893 3486 	ldrb.w	r3, [r3, #1158]	; 0x486
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800b6e2:	2b01      	cmp	r3, #1
 800b6e4:	d003      	beq.n	800b6ee <LoRaMacIsBusy+0x1a>
    return true;
 800b6e6:	2001      	movs	r0, #1
 800b6e8:	4770      	bx	lr
 800b6ea:	2001      	movs	r0, #1
 800b6ec:	4770      	bx	lr
        return false;
 800b6ee:	2000      	movs	r0, #0
}
 800b6f0:	4770      	bx	lr
 800b6f2:	bf00      	nop
 800b6f4:	200007f0 	.word	0x200007f0

0800b6f8 <LoRaMacProcess>:
{
 800b6f8:	b508      	push	{r3, lr}
    LoRaMacHandleIrqEvents( );
 800b6fa:	f7fe fffb 	bl	800a6f4 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800b6fe:	f001 f905 	bl	800c90c <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800b702:	4b20      	ldr	r3, [pc, #128]	; (800b784 <LoRaMacProcess+0x8c>)
 800b704:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800b708:	f013 0f20 	tst.w	r3, #32
 800b70c:	d10d      	bne.n	800b72a <LoRaMacProcess+0x32>
    LoRaMacHandleIndicationEvents( );
 800b70e:	f7fd fedd 	bl	80094cc <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800b712:	4b1c      	ldr	r3, [pc, #112]	; (800b784 <LoRaMacProcess+0x8c>)
 800b714:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 800b718:	2b02      	cmp	r3, #2
 800b71a:	d024      	beq.n	800b766 <LoRaMacProcess+0x6e>
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800b71c:	4b19      	ldr	r3, [pc, #100]	; (800b784 <LoRaMacProcess+0x8c>)
 800b71e:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800b722:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b726:	d121      	bne.n	800b76c <LoRaMacProcess+0x74>
}
 800b728:	bd08      	pop	{r3, pc}
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800b72a:	2000      	movs	r0, #0
 800b72c:	f7fd fec8 	bl	80094c0 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800b730:	f7fd fefa 	bl	8009528 <LoRaMacCheckForRxAbort>
        if( IsRequestPending( ) > 0 )
 800b734:	f7fd ffcc 	bl	80096d0 <IsRequestPending>
 800b738:	b110      	cbz	r0, 800b740 <LoRaMacProcess+0x48>
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800b73a:	f7fe f8f7 	bl	800992c <LoRaMacCheckForBeaconAcquisition>
        if( noTx == 0x00 )
 800b73e:	b918      	cbnz	r0, 800b748 <LoRaMacProcess+0x50>
            LoRaMacHandleMlmeRequest( );
 800b740:	f7ff f806 	bl	800a750 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800b744:	f7ff fa4c 	bl	800abe0 <LoRaMacHandleMcpsRequest>
        LoRaMacHandleRequestEvents( );
 800b748:	f7ff fa96 	bl	800ac78 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800b74c:	f7ff fade 	bl	800ad0c <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800b750:	2001      	movs	r0, #1
 800b752:	f7fd feb5 	bl	80094c0 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800b756:	4a0b      	ldr	r2, [pc, #44]	; (800b784 <LoRaMacProcess+0x8c>)
 800b758:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800b75c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b760:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 800b764:	e7d3      	b.n	800b70e <LoRaMacProcess+0x16>
        OpenContinuousRxCWindow( );
 800b766:	f7ff fae3 	bl	800ad30 <OpenContinuousRxCWindow>
 800b76a:	e7d7      	b.n	800b71c <LoRaMacProcess+0x24>
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800b76c:	4b05      	ldr	r3, [pc, #20]	; (800b784 <LoRaMacProcess+0x8c>)
 800b76e:	f893 2485 	ldrb.w	r2, [r3, #1157]	; 0x485
 800b772:	f36f 1286 	bfc	r2, #6, #1
 800b776:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
        LoRaMacHandleNvm( &Nvm );
 800b77a:	4803      	ldr	r0, [pc, #12]	; (800b788 <LoRaMacProcess+0x90>)
 800b77c:	f7ff fb7c 	bl	800ae78 <LoRaMacHandleNvm>
}
 800b780:	e7d2      	b.n	800b728 <LoRaMacProcess+0x30>
 800b782:	bf00      	nop
 800b784:	200007f0 	.word	0x200007f0
 800b788:	20008000 	.word	0x20008000

0800b78c <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800b78c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b790:	b08b      	sub	sp, #44	; 0x2c
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 800b792:	2800      	cmp	r0, #0
 800b794:	f000 81a0 	beq.w	800bad8 <LoRaMacInitialization+0x34c>
 800b798:	460e      	mov	r6, r1
 800b79a:	4691      	mov	r9, r2
 800b79c:	4680      	mov	r8, r0
 800b79e:	2900      	cmp	r1, #0
 800b7a0:	f000 819c 	beq.w	800badc <LoRaMacInitialization+0x350>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800b7a4:	6803      	ldr	r3, [r0, #0]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	f000 819a 	beq.w	800bae0 <LoRaMacInitialization+0x354>
        ( primitives->MacMcpsIndication == NULL ) ||
 800b7ac:	6843      	ldr	r3, [r0, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	f000 8198 	beq.w	800bae4 <LoRaMacInitialization+0x358>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800b7b4:	6883      	ldr	r3, [r0, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	f000 8196 	beq.w	800bae8 <LoRaMacInitialization+0x35c>
        ( primitives->MacMlmeIndication == NULL ) )
 800b7bc:	68c3      	ldr	r3, [r0, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	f000 8194 	beq.w	800baec <LoRaMacInitialization+0x360>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800b7c4:	4610      	mov	r0, r2
 800b7c6:	f002 f858 	bl	800d87a <RegionIsActive>
 800b7ca:	2800      	cmp	r0, #0
 800b7cc:	f000 8190 	beq.w	800baf0 <LoRaMacInitialization+0x364>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 800b7d0:	4640      	mov	r0, r8
 800b7d2:	f001 fa57 	bl	800cc84 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 800b7d6:	4ccc      	ldr	r4, [pc, #816]	; (800bb08 <LoRaMacInitialization+0x37c>)
 800b7d8:	f44f 62e7 	mov.w	r2, #1848	; 0x738
 800b7dc:	2100      	movs	r1, #0
 800b7de:	4620      	mov	r0, r4
 800b7e0:	f005 f99d 	bl	8010b1e <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800b7e4:	4dc9      	ldr	r5, [pc, #804]	; (800bb0c <LoRaMacInitialization+0x380>)
 800b7e6:	f240 520c 	movw	r2, #1292	; 0x50c
 800b7ea:	2100      	movs	r1, #0
 800b7ec:	4628      	mov	r0, r5
 800b7ee:	f005 f996 	bl	8010b1e <memset1>

    // Set non zero variables to its default value
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
 800b7f2:	f04f 0a01 	mov.w	sl, #1
 800b7f6:	f885 a412 	strb.w	sl, [r5, #1042]	; 0x412
    MacCtx.AckTimeoutRetries = 1;
 800b7fa:	f885 a411 	strb.w	sl, [r5, #1041]	; 0x411
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 800b7fe:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800b802:	2700      	movs	r7, #0
 800b804:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 800b808:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 800b80c:	4bc0      	ldr	r3, [pc, #768]	; (800bb10 <LoRaMacInitialization+0x384>)
 800b80e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    params.Bands = &RegionBands;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800b812:	230f      	movs	r3, #15
 800b814:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b818:	a908      	add	r1, sp, #32
 800b81a:	4648      	mov	r0, r9
 800b81c:	f002 f837 	bl	800d88e <RegionGetPhyParam>
 800b820:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800b822:	1bc0      	subs	r0, r0, r7
 800b824:	bf18      	it	ne
 800b826:	2001      	movne	r0, #1
 800b828:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800b82c:	f04f 0b0a 	mov.w	fp, #10
 800b830:	f88d b020 	strb.w	fp, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b834:	a908      	add	r1, sp, #32
 800b836:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b83a:	f002 f828 	bl	800d88e <RegionGetPhyParam>
 800b83e:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 800b840:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_TX_DR;
 800b844:	f04f 0906 	mov.w	r9, #6
 800b848:	f88d 9020 	strb.w	r9, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b84c:	a908      	add	r1, sp, #32
 800b84e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b852:	f002 f81c 	bl	800d88e <RegionGetPhyParam>
 800b856:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 800b858:	f884 00cd 	strb.w	r0, [r4, #205]	; 0xcd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800b85c:	2310      	movs	r3, #16
 800b85e:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b862:	a908      	add	r1, sp, #32
 800b864:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b868:	f002 f811 	bl	800d88e <RegionGetPhyParam>
 800b86c:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800b86e:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800b872:	2311      	movs	r3, #17
 800b874:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b878:	a908      	add	r1, sp, #32
 800b87a:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b87e:	f002 f806 	bl	800d88e <RegionGetPhyParam>
 800b882:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800b884:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800b888:	2312      	movs	r3, #18
 800b88a:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b88e:	a908      	add	r1, sp, #32
 800b890:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b894:	f001 fffb 	bl	800d88e <RegionGetPhyParam>
 800b898:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800b89a:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800b89e:	2313      	movs	r3, #19
 800b8a0:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b8a4:	a908      	add	r1, sp, #32
 800b8a6:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b8aa:	f001 fff0 	bl	800d88e <RegionGetPhyParam>
 800b8ae:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800b8b0:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800b8b4:	2314      	movs	r3, #20
 800b8b6:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b8ba:	a908      	add	r1, sp, #32
 800b8bc:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b8c0:	f001 ffe5 	bl	800d88e <RegionGetPhyParam>
 800b8c4:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800b8c6:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800b8ca:	2317      	movs	r3, #23
 800b8cc:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b8d0:	a908      	add	r1, sp, #32
 800b8d2:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b8d6:	f001 ffda 	bl	800d88e <RegionGetPhyParam>
 800b8da:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800b8dc:	f884 00a5 	strb.w	r0, [r4, #165]	; 0xa5

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800b8e0:	2318      	movs	r3, #24
 800b8e2:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b8e6:	a908      	add	r1, sp, #32
 800b8e8:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b8ec:	f001 ffcf 	bl	800d88e <RegionGetPhyParam>
 800b8f0:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800b8f2:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800b8f6:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800b8fa:	2319      	movs	r3, #25
 800b8fc:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b900:	a908      	add	r1, sp, #32
 800b902:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b906:	f001 ffc2 	bl	800d88e <RegionGetPhyParam>
 800b90a:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800b90c:	b2c0      	uxtb	r0, r0
 800b90e:	f884 00ac 	strb.w	r0, [r4, #172]	; 0xac
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800b912:	f884 00b4 	strb.w	r0, [r4, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800b916:	231e      	movs	r3, #30
 800b918:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b91c:	a908      	add	r1, sp, #32
 800b91e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b922:	f001 ffb4 	bl	800d88e <RegionGetPhyParam>
 800b926:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800b928:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800b92c:	231f      	movs	r3, #31
 800b92e:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b932:	a908      	add	r1, sp, #32
 800b934:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b938:	f001 ffa9 	bl	800d88e <RegionGetPhyParam>
 800b93c:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800b93e:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800b942:	2320      	movs	r3, #32
 800b944:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b948:	eb0d 0103 	add.w	r1, sp, r3
 800b94c:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b950:	f001 ff9d 	bl	800d88e <RegionGetPhyParam>
 800b954:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 800b956:	9b07      	ldr	r3, [sp, #28]
 800b958:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800b95c:	2321      	movs	r3, #33	; 0x21
 800b95e:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b962:	a908      	add	r1, sp, #32
 800b964:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b968:	f001 ff91 	bl	800d88e <RegionGetPhyParam>
 800b96c:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 800b96e:	9b07      	ldr	r3, [sp, #28]
 800b970:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800b974:	230b      	movs	r3, #11
 800b976:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b97a:	a908      	add	r1, sp, #32
 800b97c:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b980:	f001 ff85 	bl	800d88e <RegionGetPhyParam>
 800b984:	9007      	str	r0, [sp, #28]
    MacCtx.AdrAckLimit = phyParam.Value;
 800b986:	f8a5 03f4 	strh.w	r0, [r5, #1012]	; 0x3f4

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800b98a:	230c      	movs	r3, #12
 800b98c:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b990:	a908      	add	r1, sp, #32
 800b992:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b996:	f001 ff7a 	bl	800d88e <RegionGetPhyParam>
 800b99a:	9007      	str	r0, [sp, #28]
    MacCtx.AdrAckDelay = phyParam.Value;
 800b99c:	f8a5 03f6 	strh.w	r0, [r5, #1014]	; 0x3f6

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800b9a0:	f884 a0a4 	strb.w	sl, [r4, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800b9a4:	f8c4 b088 	str.w	fp, [r4, #136]	; 0x88
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 800b9a8:	f884 908c 	strb.w	r9, [r4, #140]	; 0x8c

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 800b9ac:	f8c4 b044 	str.w	fp, [r4, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 800b9b0:	f884 9048 	strb.w	r9, [r4, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800b9b4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800b9b8:	64e3      	str	r3, [r4, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 800b9ba:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800b9be:	6523      	str	r3, [r4, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 800b9c0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800b9c4:	6563      	str	r3, [r4, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 800b9c6:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800b9ca:	65a3      	str	r3, [r4, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 800b9cc:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800b9d0:	65e3      	str	r3, [r4, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 800b9d2:	f884 a060 	strb.w	sl, [r4, #96]	; 0x60

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 800b9d6:	f88d 7018 	strb.w	r7, [sp, #24]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800b9da:	f504 73f0 	add.w	r3, r4, #480	; 0x1e0
 800b9de:	9304      	str	r3, [sp, #16]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800b9e0:	f504 7321 	add.w	r3, r4, #644	; 0x284
 800b9e4:	9305      	str	r3, [sp, #20]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800b9e6:	a904      	add	r1, sp, #16
 800b9e8:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b9ec:	f001 ff75 	bl	800d8da <RegionInitDefaults>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 800b9f0:	f8c5 6348 	str.w	r6, [r5, #840]	; 0x348
    ResetMacParameters( );
 800b9f4:	f7ff fba0 	bl	800b138 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 800b9f8:	f884 a105 	strb.w	sl, [r4, #261]	; 0x105

    MacCtx.MacPrimitives = primitives;
 800b9fc:	f8c5 8344 	str.w	r8, [r5, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 800ba00:	f885 7485 	strb.w	r7, [r5, #1157]	; 0x485
    MacCtx.MacState = LORAMAC_STOPPED;
 800ba04:	f8c5 a340 	str.w	sl, [r5, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 800ba08:	62e7      	str	r7, [r4, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 800ba0a:	6327      	str	r7, [r4, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800ba0c:	9700      	str	r7, [sp, #0]
 800ba0e:	4b41      	ldr	r3, [pc, #260]	; (800bb14 <LoRaMacInitialization+0x388>)
 800ba10:	463a      	mov	r2, r7
 800ba12:	f04f 31ff 	mov.w	r1, #4294967295
 800ba16:	f505 705a 	add.w	r0, r5, #872	; 0x368
 800ba1a:	f007 fa07 	bl	8012e2c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800ba1e:	9700      	str	r7, [sp, #0]
 800ba20:	4b3d      	ldr	r3, [pc, #244]	; (800bb18 <LoRaMacInitialization+0x38c>)
 800ba22:	463a      	mov	r2, r7
 800ba24:	f04f 31ff 	mov.w	r1, #4294967295
 800ba28:	f505 7060 	add.w	r0, r5, #896	; 0x380
 800ba2c:	f007 f9fe 	bl	8012e2c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800ba30:	9700      	str	r7, [sp, #0]
 800ba32:	4b3a      	ldr	r3, [pc, #232]	; (800bb1c <LoRaMacInitialization+0x390>)
 800ba34:	463a      	mov	r2, r7
 800ba36:	f04f 31ff 	mov.w	r1, #4294967295
 800ba3a:	f505 7066 	add.w	r0, r5, #920	; 0x398
 800ba3e:	f007 f9f5 	bl	8012e2c <UTIL_TIMER_Create>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 800ba42:	9700      	str	r7, [sp, #0]
 800ba44:	4b36      	ldr	r3, [pc, #216]	; (800bb20 <LoRaMacInitialization+0x394>)
 800ba46:	463a      	mov	r2, r7
 800ba48:	f04f 31ff 	mov.w	r1, #4294967295
 800ba4c:	f505 707e 	add.w	r0, r5, #1016	; 0x3f8
 800ba50:	f007 f9ec 	bl	8012e2c <UTIL_TIMER_Create>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800ba54:	af02      	add	r7, sp, #8
 800ba56:	4638      	mov	r0, r7
 800ba58:	f007 f97a 	bl	8012d50 <SysTimeGetMcuTime>
 800ba5c:	f504 7386 	add.w	r3, r4, #268	; 0x10c
 800ba60:	e897 0003 	ldmia.w	r7, {r0, r1}
 800ba64:	e883 0003 	stmia.w	r3, {r0, r1}
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800ba68:	4b2e      	ldr	r3, [pc, #184]	; (800bb24 <LoRaMacInitialization+0x398>)
 800ba6a:	f8c5 334c 	str.w	r3, [r5, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800ba6e:	4b2e      	ldr	r3, [pc, #184]	; (800bb28 <LoRaMacInitialization+0x39c>)
 800ba70:	f8c5 3354 	str.w	r3, [r5, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800ba74:	4b2d      	ldr	r3, [pc, #180]	; (800bb2c <LoRaMacInitialization+0x3a0>)
 800ba76:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800ba7a:	4b2d      	ldr	r3, [pc, #180]	; (800bb30 <LoRaMacInitialization+0x3a4>)
 800ba7c:	f8c5 3350 	str.w	r3, [r5, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800ba80:	4b2c      	ldr	r3, [pc, #176]	; (800bb34 <LoRaMacInitialization+0x3a8>)
 800ba82:	f8c5 3358 	str.w	r3, [r5, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 800ba86:	4b2c      	ldr	r3, [pc, #176]	; (800bb38 <LoRaMacInitialization+0x3ac>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f505 7053 	add.w	r0, r5, #844	; 0x34c
 800ba8e:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 800ba90:	68b1      	ldr	r1, [r6, #8]
 800ba92:	f504 7090 	add.w	r0, r4, #288	; 0x120
 800ba96:	f004 fd77 	bl	8010588 <SecureElementInit>
 800ba9a:	bb70      	cbnz	r0, 800bafa <LoRaMacInitialization+0x36e>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 800ba9c:	4620      	mov	r0, r4
 800ba9e:	f001 fb81 	bl	800d1a4 <LoRaMacCryptoInit>
 800baa2:	bb60      	cbnz	r0, 800bafe <LoRaMacInitialization+0x372>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 800baa4:	f000 ffb6 	bl	800ca14 <LoRaMacCommandsInit>
 800baa8:	bb58      	cbnz	r0, 800bb02 <LoRaMacInitialization+0x376>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800baaa:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
 800baae:	f001 fbdf 	bl	800d270 <LoRaMacCryptoSetMulticastReference>
 800bab2:	4604      	mov	r4, r0
 800bab4:	2800      	cmp	r0, #0
 800bab6:	d141      	bne.n	800bb3c <LoRaMacInitialization+0x3b0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 800bab8:	4d1f      	ldr	r5, [pc, #124]	; (800bb38 <LoRaMacInitialization+0x3ac>)
 800baba:	696b      	ldr	r3, [r5, #20]
 800babc:	4798      	blx	r3
 800babe:	f005 f803 	bl	8010ac8 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800bac2:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800bac4:	4a10      	ldr	r2, [pc, #64]	; (800bb08 <LoRaMacInitialization+0x37c>)
 800bac6:	f892 0105 	ldrb.w	r0, [r2, #261]	; 0x105
 800baca:	4798      	blx	r3
    Radio.Sleep( );
 800bacc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800bace:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800bad0:	4650      	mov	r0, sl
 800bad2:	f7fd fcf5 	bl	80094c0 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 800bad6:	e00c      	b.n	800baf2 <LoRaMacInitialization+0x366>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800bad8:	2403      	movs	r4, #3
 800bada:	e00a      	b.n	800baf2 <LoRaMacInitialization+0x366>
 800badc:	2403      	movs	r4, #3
 800bade:	e008      	b.n	800baf2 <LoRaMacInitialization+0x366>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800bae0:	2403      	movs	r4, #3
 800bae2:	e006      	b.n	800baf2 <LoRaMacInitialization+0x366>
 800bae4:	2403      	movs	r4, #3
 800bae6:	e004      	b.n	800baf2 <LoRaMacInitialization+0x366>
 800bae8:	2403      	movs	r4, #3
 800baea:	e002      	b.n	800baf2 <LoRaMacInitialization+0x366>
 800baec:	2403      	movs	r4, #3
 800baee:	e000      	b.n	800baf2 <LoRaMacInitialization+0x366>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800baf0:	2409      	movs	r4, #9
}
 800baf2:	4620      	mov	r0, r4
 800baf4:	b00b      	add	sp, #44	; 0x2c
 800baf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800bafa:	2411      	movs	r4, #17
 800bafc:	e7f9      	b.n	800baf2 <LoRaMacInitialization+0x366>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800bafe:	2411      	movs	r4, #17
 800bb00:	e7f7      	b.n	800baf2 <LoRaMacInitialization+0x366>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800bb02:	2413      	movs	r4, #19
 800bb04:	e7f5      	b.n	800baf2 <LoRaMacInitialization+0x366>
 800bb06:	bf00      	nop
 800bb08:	20008000 	.word	0x20008000
 800bb0c:	200007f0 	.word	0x200007f0
 800bb10:	01000300 	.word	0x01000300
 800bb14:	0800ab91 	.word	0x0800ab91
 800bb18:	0800ae31 	.word	0x0800ae31
 800bb1c:	0800ade1 	.word	0x0800ade1
 800bb20:	080098a1 	.word	0x080098a1
 800bb24:	0800b0e1 	.word	0x0800b0e1
 800bb28:	0800b089 	.word	0x0800b089
 800bb2c:	08009475 	.word	0x08009475
 800bb30:	0800b055 	.word	0x0800b055
 800bb34:	0800b021 	.word	0x0800b021
 800bb38:	08014cbc 	.word	0x08014cbc
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800bb3c:	2411      	movs	r4, #17
 800bb3e:	e7d8      	b.n	800baf2 <LoRaMacInitialization+0x366>

0800bb40 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
    MacCtx.MacState = LORAMAC_IDLE;
 800bb40:	2000      	movs	r0, #0
 800bb42:	4b02      	ldr	r3, [pc, #8]	; (800bb4c <LoRaMacStart+0xc>)
 800bb44:	f8c3 0340 	str.w	r0, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
}
 800bb48:	4770      	bx	lr
 800bb4a:	bf00      	nop
 800bb4c:	200007f0 	.word	0x200007f0

0800bb50 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 800bb50:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == false )
 800bb52:	f7ff fdbf 	bl	800b6d4 <LoRaMacIsBusy>
 800bb56:	b130      	cbz	r0, 800bb66 <LoRaMacStop+0x16>
    {
        MacCtx.MacState = LORAMAC_STOPPED;
        return LORAMAC_STATUS_OK;
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 800bb58:	4b06      	ldr	r3, [pc, #24]	; (800bb74 <LoRaMacStop+0x24>)
 800bb5a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800bb5e:	2b01      	cmp	r3, #1
 800bb60:	d006      	beq.n	800bb70 <LoRaMacStop+0x20>
    {
        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_BUSY;
 800bb62:	2001      	movs	r0, #1
}
 800bb64:	bd08      	pop	{r3, pc}
        MacCtx.MacState = LORAMAC_STOPPED;
 800bb66:	4b03      	ldr	r3, [pc, #12]	; (800bb74 <LoRaMacStop+0x24>)
 800bb68:	2201      	movs	r2, #1
 800bb6a:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 800bb6e:	e7f9      	b.n	800bb64 <LoRaMacStop+0x14>
        return LORAMAC_STATUS_OK;
 800bb70:	2000      	movs	r0, #0
 800bb72:	e7f7      	b.n	800bb64 <LoRaMacStop+0x14>
 800bb74:	200007f0 	.word	0x200007f0

0800bb78 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 800bb78:	b570      	push	{r4, r5, r6, lr}
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 800bb7a:	4c14      	ldr	r4, [pc, #80]	; (800bbcc <LoRaMacHalt+0x54>)
 800bb7c:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800bb80:	f007 f9b2 	bl	8012ee8 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 800bb84:	f504 7060 	add.w	r0, r4, #896	; 0x380
 800bb88:	f007 f9ae 	bl	8012ee8 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 800bb8c:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800bb90:	f007 f9aa 	bl	8012ee8 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
 800bb94:	f504 707e 	add.w	r0, r4, #1016	; 0x3f8
 800bb98:	f007 f9a6 	bl	8012ee8 <UTIL_TIMER_Stop>
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 800bb9c:	f000 fea4 	bl	800c8e8 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 800bba0:	4b0b      	ldr	r3, [pc, #44]	; (800bbd0 <LoRaMacHalt+0x58>)
 800bba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bba4:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 800bba6:	2500      	movs	r5, #0
 800bba8:	f8c4 5340 	str.w	r5, [r4, #832]	; 0x340

    LoRaMacHandleNvm( &Nvm );
 800bbac:	4e09      	ldr	r6, [pc, #36]	; (800bbd4 <LoRaMacHalt+0x5c>)
 800bbae:	4630      	mov	r0, r6
 800bbb0:	f7ff f962 	bl	800ae78 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 800bbb4:	f44f 62e7 	mov.w	r2, #1848	; 0x738
 800bbb8:	4631      	mov	r1, r6
 800bbba:	4807      	ldr	r0, [pc, #28]	; (800bbd8 <LoRaMacHalt+0x60>)
 800bbbc:	f004 ff97 	bl	8010aee <memcpy1>

    MacCtx.MacState = LORAMAC_STOPPED;
 800bbc0:	2301      	movs	r3, #1
 800bbc2:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 800bbc6:	4628      	mov	r0, r5
 800bbc8:	bd70      	pop	{r4, r5, r6, pc}
 800bbca:	bf00      	nop
 800bbcc:	200007f0 	.word	0x200007f0
 800bbd0:	08014cbc 	.word	0x08014cbc
 800bbd4:	20008000 	.word	0x20008000
 800bbd8:	20008738 	.word	0x20008738

0800bbdc <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800bbdc:	b530      	push	{r4, r5, lr}
 800bbde:	b089      	sub	sp, #36	; 0x24
 800bbe0:	4604      	mov	r4, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800bbe2:	4b2f      	ldr	r3, [pc, #188]	; (800bca0 <LoRaMacQueryTxPossible+0xc4>)
 800bbe4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bbe6:	9202      	str	r2, [sp, #8]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800bbe8:	f993 00cd 	ldrsb.w	r0, [r3, #205]	; 0xcd
 800bbec:	f88d 0007 	strb.w	r0, [sp, #7]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800bbf0:	f993 30cc 	ldrsb.w	r3, [r3, #204]	; 0xcc
 800bbf4:	f88d 3006 	strb.w	r3, [sp, #6]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	9300      	str	r3, [sp, #0]

    if( txInfo == NULL )
 800bbfc:	2900      	cmp	r1, #0
 800bbfe:	d048      	beq.n	800bc92 <LoRaMacQueryTxPossible+0xb6>
 800bc00:	460d      	mov	r5, r1
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Setup ADR request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 800bc02:	4b27      	ldr	r3, [pc, #156]	; (800bca0 <LoRaMacQueryTxPossible+0xc4>)
 800bc04:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
 800bc08:	9103      	str	r1, [sp, #12]
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 800bc0a:	2100      	movs	r1, #0
 800bc0c:	f88d 1010 	strb.w	r1, [sp, #16]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800bc10:	f893 1106 	ldrb.w	r1, [r3, #262]	; 0x106
 800bc14:	f88d 1011 	strb.w	r1, [sp, #17]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800bc18:	9205      	str	r2, [sp, #20]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800bc1a:	4a22      	ldr	r2, [pc, #136]	; (800bca4 <LoRaMacQueryTxPossible+0xc8>)
 800bc1c:	f8b2 13f4 	ldrh.w	r1, [r2, #1012]	; 0x3f4
 800bc20:	f8ad 1018 	strh.w	r1, [sp, #24]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800bc24:	f8b2 23f6 	ldrh.w	r2, [r2, #1014]	; 0x3f6
 800bc28:	f8ad 201a 	strh.w	r2, [sp, #26]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800bc2c:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 800bc30:	f88d 201c 	strb.w	r2, [sp, #28]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800bc34:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 800bc38:	f88d 201d 	strb.w	r2, [sp, #29]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800bc3c:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800bc40:	f88d 201e 	strb.w	r2, [sp, #30]
    adrNext.Region = Nvm.MacGroup2.Region;
 800bc44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bc48:	f88d 301f 	strb.w	r3, [sp, #31]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800bc4c:	ab02      	add	r3, sp, #8
 800bc4e:	f10d 0206 	add.w	r2, sp, #6
 800bc52:	f10d 0107 	add.w	r1, sp, #7
 800bc56:	a803      	add	r0, sp, #12
 800bc58:	f000 fe2a 	bl	800c8b0 <LoRaMacAdrCalcNext>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800bc5c:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 800bc60:	f7fd fd6e 	bl	8009740 <GetMaxAppPayloadWithoutFOptsLength>
 800bc64:	7068      	strb	r0, [r5, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800bc66:	4668      	mov	r0, sp
 800bc68:	f000 ff56 	bl	800cb18 <LoRaMacCommandsGetSizeSerializedCmds>
 800bc6c:	b998      	cbnz	r0, 800bc96 <LoRaMacQueryTxPossible+0xba>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800bc6e:	9b00      	ldr	r3, [sp, #0]
 800bc70:	2b0f      	cmp	r3, #15
 800bc72:	d80a      	bhi.n	800bc8a <LoRaMacQueryTxPossible+0xae>
 800bc74:	786a      	ldrb	r2, [r5, #1]
 800bc76:	4293      	cmp	r3, r2
 800bc78:	d807      	bhi.n	800bc8a <LoRaMacQueryTxPossible+0xae>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800bc7a:	1ad3      	subs	r3, r2, r3
 800bc7c:	702b      	strb	r3, [r5, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800bc7e:	9b00      	ldr	r3, [sp, #0]
 800bc80:	441c      	add	r4, r3
 800bc82:	42a2      	cmp	r2, r4
 800bc84:	d309      	bcc.n	800bc9a <LoRaMacQueryTxPossible+0xbe>
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 800bc86:	b009      	add	sp, #36	; 0x24
 800bc88:	bd30      	pop	{r4, r5, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	702b      	strb	r3, [r5, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800bc8e:	2008      	movs	r0, #8
 800bc90:	e7f9      	b.n	800bc86 <LoRaMacQueryTxPossible+0xaa>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800bc92:	2003      	movs	r0, #3
 800bc94:	e7f7      	b.n	800bc86 <LoRaMacQueryTxPossible+0xaa>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800bc96:	2013      	movs	r0, #19
 800bc98:	e7f5      	b.n	800bc86 <LoRaMacQueryTxPossible+0xaa>
           return LORAMAC_STATUS_LENGTH_ERROR;
 800bc9a:	2008      	movs	r0, #8
 800bc9c:	e7f3      	b.n	800bc86 <LoRaMacQueryTxPossible+0xaa>
 800bc9e:	bf00      	nop
 800bca0:	20008000 	.word	0x20008000
 800bca4:	200007f0 	.word	0x200007f0

0800bca8 <LoRaMacMibGetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800bca8:	2800      	cmp	r0, #0
 800bcaa:	f000 8124 	beq.w	800bef6 <LoRaMacMibGetRequestConfirm+0x24e>
{
 800bcae:	b510      	push	{r4, lr}
 800bcb0:	b084      	sub	sp, #16
 800bcb2:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 800bcb4:	7800      	ldrb	r0, [r0, #0]
 800bcb6:	2837      	cmp	r0, #55	; 0x37
 800bcb8:	f200 8119 	bhi.w	800beee <LoRaMacMibGetRequestConfirm+0x246>
 800bcbc:	e8df f010 	tbh	[pc, r0, lsl #1]
 800bcc0:	003e0038 	.word	0x003e0038
 800bcc4:	00490044 	.word	0x00490044
 800bcc8:	0054004e 	.word	0x0054004e
 800bccc:	0117005a 	.word	0x0117005a
 800bcd0:	01170117 	.word	0x01170117
 800bcd4:	01170117 	.word	0x01170117
 800bcd8:	01170117 	.word	0x01170117
 800bcdc:	00600117 	.word	0x00600117
 800bce0:	006c0066 	.word	0x006c0066
 800bce4:	00810079 	.word	0x00810079
 800bce8:	00910089 	.word	0x00910089
 800bcec:	009900a6 	.word	0x009900a6
 800bcf0:	00b900b3 	.word	0x00b900b3
 800bcf4:	00c300be 	.word	0x00c300be
 800bcf8:	00cd00c8 	.word	0x00cd00c8
 800bcfc:	00d800d2 	.word	0x00d800d2
 800bd00:	00de00e4 	.word	0x00de00e4
 800bd04:	00ef00ea 	.word	0x00ef00ea
 800bd08:	010200f5 	.word	0x010200f5
 800bd0c:	00fe00fa 	.word	0x00fe00fa
 800bd10:	01080117 	.word	0x01080117
 800bd14:	01170117 	.word	0x01170117
 800bd18:	01170117 	.word	0x01170117
 800bd1c:	01170117 	.word	0x01170117
 800bd20:	01170117 	.word	0x01170117
 800bd24:	01170117 	.word	0x01170117
 800bd28:	01170117 	.word	0x01170117
 800bd2c:	01110117 	.word	0x01110117
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 800bd30:	4b72      	ldr	r3, [pc, #456]	; (800befc <LoRaMacMibGetRequestConfirm+0x254>)
 800bd32:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800bd36:	7123      	strb	r3, [r4, #4]
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 800bd38:	b004      	add	sp, #16
 800bd3a:	bd10      	pop	{r4, pc}
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800bd3c:	4b6f      	ldr	r3, [pc, #444]	; (800befc <LoRaMacMibGetRequestConfirm+0x254>)
 800bd3e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800bd42:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bd44:	2000      	movs	r0, #0
            break;
 800bd46:	e7f7      	b.n	800bd38 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 800bd48:	f004 fe8a 	bl	8010a60 <SecureElementGetDevEui>
 800bd4c:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bd4e:	2000      	movs	r0, #0
            break;
 800bd50:	e7f2      	b.n	800bd38 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 800bd52:	f004 fe9b 	bl	8010a8c <SecureElementGetJoinEui>
 800bd56:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bd58:	2000      	movs	r0, #0
            break;
 800bd5a:	e7ed      	b.n	800bd38 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 800bd5c:	4b67      	ldr	r3, [pc, #412]	; (800befc <LoRaMacMibGetRequestConfirm+0x254>)
 800bd5e:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800bd62:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bd64:	2000      	movs	r0, #0
            break;
 800bd66:	e7e7      	b.n	800bd38 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 800bd68:	4b64      	ldr	r3, [pc, #400]	; (800befc <LoRaMacMibGetRequestConfirm+0x254>)
 800bd6a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800bd6e:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bd70:	2000      	movs	r0, #0
            break;
 800bd72:	e7e1      	b.n	800bd38 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 800bd74:	4b61      	ldr	r3, [pc, #388]	; (800befc <LoRaMacMibGetRequestConfirm+0x254>)
 800bd76:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800bd7a:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bd7c:	2000      	movs	r0, #0
            break;
 800bd7e:	e7db      	b.n	800bd38 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 800bd80:	4b5e      	ldr	r3, [pc, #376]	; (800befc <LoRaMacMibGetRequestConfirm+0x254>)
 800bd82:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 800bd86:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bd88:	2000      	movs	r0, #0
            break;
 800bd8a:	e7d5      	b.n	800bd38 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800bd8c:	4b5b      	ldr	r3, [pc, #364]	; (800befc <LoRaMacMibGetRequestConfirm+0x254>)
 800bd8e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bd92:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bd94:	2000      	movs	r0, #0
            break;
 800bd96:	e7cf      	b.n	800bd38 <LoRaMacMibGetRequestConfirm+0x90>
            getPhy.Attribute = PHY_CHANNELS;
 800bd98:	231d      	movs	r3, #29
 800bd9a:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bd9e:	a902      	add	r1, sp, #8
 800bda0:	4b56      	ldr	r3, [pc, #344]	; (800befc <LoRaMacMibGetRequestConfirm+0x254>)
 800bda2:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800bda6:	f001 fd72 	bl	800d88e <RegionGetPhyParam>
 800bdaa:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelList = phyParam.Channels;
 800bdac:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bdae:	2000      	movs	r0, #0
            break;
 800bdb0:	e7c2      	b.n	800bd38 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800bdb2:	3404      	adds	r4, #4
 800bdb4:	4b52      	ldr	r3, [pc, #328]	; (800bf00 <LoRaMacMibGetRequestConfirm+0x258>)
 800bdb6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bdba:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bdbe:	2000      	movs	r0, #0
            break;
 800bdc0:	e7ba      	b.n	800bd38 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800bdc2:	3404      	adds	r4, #4
 800bdc4:	4b4f      	ldr	r3, [pc, #316]	; (800bf04 <LoRaMacMibGetRequestConfirm+0x25c>)
 800bdc6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bdca:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bdce:	2000      	movs	r0, #0
            break;
 800bdd0:	e7b2      	b.n	800bd38 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 800bdd2:	3404      	adds	r4, #4
 800bdd4:	4b4c      	ldr	r3, [pc, #304]	; (800bf08 <LoRaMacMibGetRequestConfirm+0x260>)
 800bdd6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bdda:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bdde:	2000      	movs	r0, #0
            break;
 800bde0:	e7aa      	b.n	800bd38 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800bde2:	3404      	adds	r4, #4
 800bde4:	4b49      	ldr	r3, [pc, #292]	; (800bf0c <LoRaMacMibGetRequestConfirm+0x264>)
 800bde6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bdea:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bdee:	2000      	movs	r0, #0
            break;
 800bdf0:	e7a2      	b.n	800bd38 <LoRaMacMibGetRequestConfirm+0x90>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800bdf2:	231b      	movs	r3, #27
 800bdf4:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bdf8:	a902      	add	r1, sp, #8
 800bdfa:	4b40      	ldr	r3, [pc, #256]	; (800befc <LoRaMacMibGetRequestConfirm+0x254>)
 800bdfc:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800be00:	f001 fd45 	bl	800d88e <RegionGetPhyParam>
 800be04:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800be06:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800be08:	2000      	movs	r0, #0
            break;
 800be0a:	e795      	b.n	800bd38 <LoRaMacMibGetRequestConfirm+0x90>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800be0c:	231a      	movs	r3, #26
 800be0e:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800be12:	a902      	add	r1, sp, #8
 800be14:	4b39      	ldr	r3, [pc, #228]	; (800befc <LoRaMacMibGetRequestConfirm+0x254>)
 800be16:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800be1a:	f001 fd38 	bl	800d88e <RegionGetPhyParam>
 800be1e:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800be20:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800be22:	2000      	movs	r0, #0
            break;
 800be24:	e788      	b.n	800bd38 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800be26:	4b35      	ldr	r3, [pc, #212]	; (800befc <LoRaMacMibGetRequestConfirm+0x254>)
 800be28:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800be2c:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800be2e:	2000      	movs	r0, #0
            break;
 800be30:	e782      	b.n	800bd38 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 800be32:	4b32      	ldr	r3, [pc, #200]	; (800befc <LoRaMacMibGetRequestConfirm+0x254>)
 800be34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be36:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800be38:	2000      	movs	r0, #0
            break;
 800be3a:	e77d      	b.n	800bd38 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 800be3c:	4b2f      	ldr	r3, [pc, #188]	; (800befc <LoRaMacMibGetRequestConfirm+0x254>)
 800be3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be40:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800be42:	2000      	movs	r0, #0
            break;
 800be44:	e778      	b.n	800bd38 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 800be46:	4b2d      	ldr	r3, [pc, #180]	; (800befc <LoRaMacMibGetRequestConfirm+0x254>)
 800be48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be4a:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800be4c:	2000      	movs	r0, #0
            break;
 800be4e:	e773      	b.n	800bd38 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 800be50:	4b2a      	ldr	r3, [pc, #168]	; (800befc <LoRaMacMibGetRequestConfirm+0x254>)
 800be52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be54:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800be56:	2000      	movs	r0, #0
            break;
 800be58:	e76e      	b.n	800bd38 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 800be5a:	4b28      	ldr	r3, [pc, #160]	; (800befc <LoRaMacMibGetRequestConfirm+0x254>)
 800be5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be5e:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800be60:	2000      	movs	r0, #0
            break;
 800be62:	e769      	b.n	800bd38 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800be64:	4b25      	ldr	r3, [pc, #148]	; (800befc <LoRaMacMibGetRequestConfirm+0x254>)
 800be66:	f993 30cd 	ldrsb.w	r3, [r3, #205]	; 0xcd
 800be6a:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800be6c:	2000      	movs	r0, #0
            break;
 800be6e:	e763      	b.n	800bd38 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800be70:	4b22      	ldr	r3, [pc, #136]	; (800befc <LoRaMacMibGetRequestConfirm+0x254>)
 800be72:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800be76:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800be78:	2000      	movs	r0, #0
            break;
 800be7a:	e75d      	b.n	800bd38 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800be7c:	4b1f      	ldr	r3, [pc, #124]	; (800befc <LoRaMacMibGetRequestConfirm+0x254>)
 800be7e:	f993 30cc 	ldrsb.w	r3, [r3, #204]	; 0xcc
 800be82:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800be84:	2000      	movs	r0, #0
            break;
 800be86:	e757      	b.n	800bd38 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800be88:	4b1c      	ldr	r3, [pc, #112]	; (800befc <LoRaMacMibGetRequestConfirm+0x254>)
 800be8a:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800be8e:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800be90:	2000      	movs	r0, #0
            break;
 800be92:	e751      	b.n	800bd38 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 800be94:	4b19      	ldr	r3, [pc, #100]	; (800befc <LoRaMacMibGetRequestConfirm+0x254>)
 800be96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be98:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800be9a:	2000      	movs	r0, #0
            break;
 800be9c:	e74c      	b.n	800bd38 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 800be9e:	4b17      	ldr	r3, [pc, #92]	; (800befc <LoRaMacMibGetRequestConfirm+0x254>)
 800bea0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800bea4:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bea6:	2000      	movs	r0, #0
            break;
 800bea8:	e746      	b.n	800bd38 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800beaa:	4b14      	ldr	r3, [pc, #80]	; (800befc <LoRaMacMibGetRequestConfirm+0x254>)
 800beac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800beae:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800beb0:	2000      	movs	r0, #0
            break;
 800beb2:	e741      	b.n	800bd38 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.Contexts = &Nvm;
 800beb4:	4b11      	ldr	r3, [pc, #68]	; (800befc <LoRaMacMibGetRequestConfirm+0x254>)
 800beb6:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800beb8:	2000      	movs	r0, #0
            break;
 800beba:	e73d      	b.n	800bd38 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.BackupContexts = &NvmBackup;
 800bebc:	4b14      	ldr	r3, [pc, #80]	; (800bf10 <LoRaMacMibGetRequestConfirm+0x268>)
 800bebe:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bec0:	2000      	movs	r0, #0
            break;
 800bec2:	e739      	b.n	800bd38 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800bec4:	4b0d      	ldr	r3, [pc, #52]	; (800befc <LoRaMacMibGetRequestConfirm+0x254>)
 800bec6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800beca:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800becc:	2000      	movs	r0, #0
            break;
 800bece:	e733      	b.n	800bd38 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 800bed0:	4b0a      	ldr	r3, [pc, #40]	; (800befc <LoRaMacMibGetRequestConfirm+0x254>)
 800bed2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800bed6:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800bed8:	f001 fe10 	bl	800dafc <RegionGetVersion>
 800bedc:	60a0      	str	r0, [r4, #8]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bede:	2000      	movs	r0, #0
            break;
 800bee0:	e72a      	b.n	800bd38 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800bee2:	4b06      	ldr	r3, [pc, #24]	; (800befc <LoRaMacMibGetRequestConfirm+0x254>)
 800bee4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bee8:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800beea:	2000      	movs	r0, #0
            break;
 800beec:	e724      	b.n	800bd38 <LoRaMacMibGetRequestConfirm+0x90>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800beee:	4620      	mov	r0, r4
 800bef0:	f000 fcfe 	bl	800c8f0 <LoRaMacClassBMibGetRequestConfirm>
            break;
 800bef4:	e720      	b.n	800bd38 <LoRaMacMibGetRequestConfirm+0x90>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800bef6:	2003      	movs	r0, #3
}
 800bef8:	4770      	bx	lr
 800befa:	bf00      	nop
 800befc:	20008000 	.word	0x20008000
 800bf00:	20008064 	.word	0x20008064
 800bf04:	200080a8 	.word	0x200080a8
 800bf08:	2000806c 	.word	0x2000806c
 800bf0c:	200080b0 	.word	0x200080b0
 800bf10:	20008738 	.word	0x20008738

0800bf14 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 800bf14:	b530      	push	{r4, r5, lr}
 800bf16:	b085      	sub	sp, #20
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800bf18:	2800      	cmp	r0, #0
 800bf1a:	f000 8255 	beq.w	800c3c8 <LoRaMacMibSetRequestConfirm+0x4b4>
 800bf1e:	4605      	mov	r5, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800bf20:	4bae      	ldr	r3, [pc, #696]	; (800c1dc <LoRaMacMibSetRequestConfirm+0x2c8>)
 800bf22:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800bf26:	f013 0f02 	tst.w	r3, #2
 800bf2a:	f040 824f 	bne.w	800c3cc <LoRaMacMibSetRequestConfirm+0x4b8>
    {
        return LORAMAC_STATUS_BUSY;
    }

    switch( mibSet->Type )
 800bf2e:	7804      	ldrb	r4, [r0, #0]
 800bf30:	2c37      	cmp	r4, #55	; 0x37
 800bf32:	f200 8245 	bhi.w	800c3c0 <LoRaMacMibSetRequestConfirm+0x4ac>
 800bf36:	e8df f014 	tbh	[pc, r4, lsl #1]
 800bf3a:	0038      	.short	0x0038
 800bf3c:	0046003d 	.word	0x0046003d
 800bf40:	0057004f 	.word	0x0057004f
 800bf44:	0063005d 	.word	0x0063005d
 800bf48:	00760069 	.word	0x00760069
 800bf4c:	00900083 	.word	0x00900083
 800bf50:	00aa009d 	.word	0x00aa009d
 800bf54:	00c400b7 	.word	0x00c400b7
 800bf58:	00dc00d1 	.word	0x00dc00d1
 800bf5c:	00e20243 	.word	0x00e20243
 800bf60:	01220108 	.word	0x01220108
 800bf64:	0185015b 	.word	0x0185015b
 800bf68:	01950175 	.word	0x01950175
 800bf6c:	01a501a0 	.word	0x01a501a0
 800bf70:	01af01aa 	.word	0x01af01aa
 800bf74:	01b901b4 	.word	0x01b901b4
 800bf78:	01fb01ce 	.word	0x01fb01ce
 800bf7c:	020f01e7 	.word	0x020f01e7
 800bf80:	021e0216 	.word	0x021e0216
 800bf84:	02290223 	.word	0x02290223
 800bf88:	022d0243 	.word	0x022d0243
 800bf8c:	02430243 	.word	0x02430243
 800bf90:	02430243 	.word	0x02430243
 800bf94:	02430243 	.word	0x02430243
 800bf98:	02430243 	.word	0x02430243
 800bf9c:	02430243 	.word	0x02430243
 800bfa0:	02430243 	.word	0x02430243
 800bfa4:	02430243 	.word	0x02430243
 800bfa8:	023d      	.short	0x023d
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800bfaa:	7900      	ldrb	r0, [r0, #4]
 800bfac:	f7ff f966 	bl	800b27c <SwitchClass>
 800bfb0:	4604      	mov	r4, r0
            break;
 800bfb2:	e20c      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800bfb4:	7903      	ldrb	r3, [r0, #4]
 800bfb6:	2b02      	cmp	r3, #2
 800bfb8:	f000 820c 	beq.w	800c3d4 <LoRaMacMibSetRequestConfirm+0x4c0>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 800bfbc:	4a88      	ldr	r2, [pc, #544]	; (800c1e0 <LoRaMacMibSetRequestConfirm+0x2cc>)
 800bfbe:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bfc2:	2400      	movs	r4, #0
 800bfc4:	e203      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            break;
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800bfc6:	6840      	ldr	r0, [r0, #4]
 800bfc8:	f004 fd3c 	bl	8010a44 <SecureElementSetDevEui>
 800bfcc:	4604      	mov	r4, r0
 800bfce:	2800      	cmp	r0, #0
 800bfd0:	f000 81fd 	beq.w	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bfd4:	2403      	movs	r4, #3
 800bfd6:	e1fa      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            break;
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800bfd8:	6840      	ldr	r0, [r0, #4]
 800bfda:	f004 fd47 	bl	8010a6c <SecureElementSetJoinEui>
 800bfde:	2800      	cmp	r0, #0
 800bfe0:	f040 81f5 	bne.w	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bfe4:	4604      	mov	r4, r0
 800bfe6:	e1f2      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            break;
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 800bfe8:	7902      	ldrb	r2, [r0, #4]
 800bfea:	4b7d      	ldr	r3, [pc, #500]	; (800c1e0 <LoRaMacMibSetRequestConfirm+0x2cc>)
 800bfec:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bff0:	2400      	movs	r4, #0
            break;
 800bff2:	e1ec      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 800bff4:	6842      	ldr	r2, [r0, #4]
 800bff6:	4b7a      	ldr	r3, [pc, #488]	; (800c1e0 <LoRaMacMibSetRequestConfirm+0x2cc>)
 800bff8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bffc:	2400      	movs	r4, #0
            break;
 800bffe:	e1e6      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 800c000:	6842      	ldr	r2, [r0, #4]
 800c002:	4b77      	ldr	r3, [pc, #476]	; (800c1e0 <LoRaMacMibSetRequestConfirm+0x2cc>)
 800c004:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c008:	2400      	movs	r4, #0
            break;
 800c00a:	e1e0      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 800c00c:	6841      	ldr	r1, [r0, #4]
 800c00e:	2900      	cmp	r1, #0
 800c010:	f000 81e2 	beq.w	800c3d8 <LoRaMacMibSetRequestConfirm+0x4c4>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800c014:	2000      	movs	r0, #0
 800c016:	f001 fa43 	bl	800d4a0 <LoRaMacCryptoSetKey>
 800c01a:	4604      	mov	r4, r0
 800c01c:	2800      	cmp	r0, #0
 800c01e:	f000 81d6 	beq.w	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c022:	2411      	movs	r4, #17
 800c024:	e1d3      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            break;
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 800c026:	6841      	ldr	r1, [r0, #4]
 800c028:	2900      	cmp	r1, #0
 800c02a:	f000 81d7 	beq.w	800c3dc <LoRaMacMibSetRequestConfirm+0x4c8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800c02e:	2001      	movs	r0, #1
 800c030:	f001 fa36 	bl	800d4a0 <LoRaMacCryptoSetKey>
 800c034:	4604      	mov	r4, r0
 800c036:	2800      	cmp	r0, #0
 800c038:	f000 81c9 	beq.w	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c03c:	2411      	movs	r4, #17
 800c03e:	e1c6      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 800c040:	6841      	ldr	r1, [r0, #4]
 800c042:	2900      	cmp	r1, #0
 800c044:	f000 81cc 	beq.w	800c3e0 <LoRaMacMibSetRequestConfirm+0x4cc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800c048:	2002      	movs	r0, #2
 800c04a:	f001 fa29 	bl	800d4a0 <LoRaMacCryptoSetKey>
 800c04e:	4604      	mov	r4, r0
 800c050:	2800      	cmp	r0, #0
 800c052:	f000 81bc 	beq.w	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c056:	2411      	movs	r4, #17
 800c058:	e1b9      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
            break;
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 800c05a:	6841      	ldr	r1, [r0, #4]
 800c05c:	2900      	cmp	r1, #0
 800c05e:	f000 81c1 	beq.w	800c3e4 <LoRaMacMibSetRequestConfirm+0x4d0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800c062:	2003      	movs	r0, #3
 800c064:	f001 fa1c 	bl	800d4a0 <LoRaMacCryptoSetKey>
 800c068:	4604      	mov	r4, r0
 800c06a:	2800      	cmp	r0, #0
 800c06c:	f000 81af 	beq.w	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c070:	2411      	movs	r4, #17
 800c072:	e1ac      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            break;
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 800c074:	6841      	ldr	r1, [r0, #4]
 800c076:	2900      	cmp	r1, #0
 800c078:	f000 81b6 	beq.w	800c3e8 <LoRaMacMibSetRequestConfirm+0x4d4>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800c07c:	207f      	movs	r0, #127	; 0x7f
 800c07e:	f001 fa0f 	bl	800d4a0 <LoRaMacCryptoSetKey>
 800c082:	4604      	mov	r4, r0
 800c084:	2800      	cmp	r0, #0
 800c086:	f000 81a2 	beq.w	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c08a:	2411      	movs	r4, #17
 800c08c:	e19f      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
            break;
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 800c08e:	6841      	ldr	r1, [r0, #4]
 800c090:	2900      	cmp	r1, #0
 800c092:	f000 81ab 	beq.w	800c3ec <LoRaMacMibSetRequestConfirm+0x4d8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800c096:	2080      	movs	r0, #128	; 0x80
 800c098:	f001 fa02 	bl	800d4a0 <LoRaMacCryptoSetKey>
 800c09c:	4604      	mov	r4, r0
 800c09e:	2800      	cmp	r0, #0
 800c0a0:	f000 8195 	beq.w	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c0a4:	2411      	movs	r4, #17
 800c0a6:	e192      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            break;
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 800c0a8:	6841      	ldr	r1, [r0, #4]
 800c0aa:	2900      	cmp	r1, #0
 800c0ac:	f000 81a0 	beq.w	800c3f0 <LoRaMacMibSetRequestConfirm+0x4dc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800c0b0:	2081      	movs	r0, #129	; 0x81
 800c0b2:	f001 f9f5 	bl	800d4a0 <LoRaMacCryptoSetKey>
 800c0b6:	4604      	mov	r4, r0
 800c0b8:	2800      	cmp	r0, #0
 800c0ba:	f000 8188 	beq.w	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c0be:	2411      	movs	r4, #17
 800c0c0:	e185      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            break;
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 800c0c2:	6841      	ldr	r1, [r0, #4]
 800c0c4:	2900      	cmp	r1, #0
 800c0c6:	f000 8195 	beq.w	800c3f4 <LoRaMacMibSetRequestConfirm+0x4e0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800c0ca:	2082      	movs	r0, #130	; 0x82
 800c0cc:	f001 f9e8 	bl	800d4a0 <LoRaMacCryptoSetKey>
 800c0d0:	4604      	mov	r4, r0
 800c0d2:	2800      	cmp	r0, #0
 800c0d4:	f000 817b 	beq.w	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c0d8:	2411      	movs	r4, #17
 800c0da:	e178      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800c0dc:	7900      	ldrb	r0, [r0, #4]
 800c0de:	4b40      	ldr	r3, [pc, #256]	; (800c1e0 <LoRaMacMibSetRequestConfirm+0x2cc>)
 800c0e0:	f883 0105 	strb.w	r0, [r3, #261]	; 0x105
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800c0e4:	4c3f      	ldr	r4, [pc, #252]	; (800c1e4 <LoRaMacMibSetRequestConfirm+0x2d0>)
 800c0e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c0e8:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 800c0ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c0ec:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c0ee:	2400      	movs	r4, #0
            /* ST_WORKAROUND_END */
            break;
 800c0f0:	e16d      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800c0f2:	7902      	ldrb	r2, [r0, #4]
 800c0f4:	4b3a      	ldr	r3, [pc, #232]	; (800c1e0 <LoRaMacMibSetRequestConfirm+0x2cc>)
 800c0f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c0fa:	2400      	movs	r4, #0
            break;
 800c0fc:	e167      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800c0fe:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800c102:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800c106:	4b36      	ldr	r3, [pc, #216]	; (800c1e0 <LoRaMacMibSetRequestConfirm+0x2cc>)
 800c108:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800c10c:	f88d 2005 	strb.w	r2, [sp, #5]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800c110:	2207      	movs	r2, #7
 800c112:	a901      	add	r1, sp, #4
 800c114:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c118:	f001 fbed 	bl	800d8f6 <RegionVerify>
 800c11c:	b908      	cbnz	r0, 800c122 <LoRaMacMibSetRequestConfirm+0x20e>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c11e:	2403      	movs	r4, #3
 800c120:	e155      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            else
            {
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800c122:	686b      	ldr	r3, [r5, #4]
 800c124:	9301      	str	r3, [sp, #4]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800c126:	2200      	movs	r2, #0
 800c128:	a901      	add	r1, sp, #4
 800c12a:	4b2d      	ldr	r3, [pc, #180]	; (800c1e0 <LoRaMacMibSetRequestConfirm+0x2cc>)
 800c12c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c130:	f001 fbe1 	bl	800d8f6 <RegionVerify>
 800c134:	2800      	cmp	r0, #0
 800c136:	f000 815f 	beq.w	800c3f8 <LoRaMacMibSetRequestConfirm+0x4e4>
                {
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
                }
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800c13a:	4b2b      	ldr	r3, [pc, #172]	; (800c1e8 <LoRaMacMibSetRequestConfirm+0x2d4>)
 800c13c:	3504      	adds	r5, #4
 800c13e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c142:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c146:	2400      	movs	r4, #0
 800c148:	e141      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
            /* ST_WORKAROUND_END */
            break;
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800c14a:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800c14e:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800c152:	4b23      	ldr	r3, [pc, #140]	; (800c1e0 <LoRaMacMibSetRequestConfirm+0x2cc>)
 800c154:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800c158:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800c15c:	2207      	movs	r2, #7
 800c15e:	a901      	add	r1, sp, #4
 800c160:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c164:	f001 fbc7 	bl	800d8f6 <RegionVerify>
 800c168:	2800      	cmp	r0, #0
 800c16a:	f000 8147 	beq.w	800c3fc <LoRaMacMibSetRequestConfirm+0x4e8>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800c16e:	4b1f      	ldr	r3, [pc, #124]	; (800c1ec <LoRaMacMibSetRequestConfirm+0x2d8>)
 800c170:	3504      	adds	r5, #4
 800c172:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c176:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c17a:	2400      	movs	r4, #0
 800c17c:	e127      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            break;
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800c17e:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800c182:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800c186:	4b16      	ldr	r3, [pc, #88]	; (800c1e0 <LoRaMacMibSetRequestConfirm+0x2cc>)
 800c188:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800c18c:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800c190:	2207      	movs	r2, #7
 800c192:	a901      	add	r1, sp, #4
 800c194:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c198:	f001 fbad 	bl	800d8f6 <RegionVerify>
 800c19c:	2800      	cmp	r0, #0
 800c19e:	f000 812f 	beq.w	800c400 <LoRaMacMibSetRequestConfirm+0x4ec>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800c1a2:	4b0f      	ldr	r3, [pc, #60]	; (800c1e0 <LoRaMacMibSetRequestConfirm+0x2cc>)
 800c1a4:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800c1a8:	3504      	adds	r5, #4
 800c1aa:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c1ae:	e882 0003 	stmia.w	r2, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800c1b2:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800c1b6:	2b02      	cmp	r3, #2
 800c1b8:	d001      	beq.n	800c1be <LoRaMacMibSetRequestConfirm+0x2aa>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c1ba:	2400      	movs	r4, #0
 800c1bc:	e107      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800c1be:	f1a2 036c 	sub.w	r3, r2, #108	; 0x6c
 800c1c2:	f893 4118 	ldrb.w	r4, [r3, #280]	; 0x118
 800c1c6:	2c00      	cmp	r4, #0
 800c1c8:	f000 8101 	beq.w	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 800c1cc:	4b05      	ldr	r3, [pc, #20]	; (800c1e4 <LoRaMacMibSetRequestConfirm+0x2d0>)
 800c1ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1d0:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 800c1d2:	f7fe fdad 	bl	800ad30 <OpenContinuousRxCWindow>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c1d6:	2400      	movs	r4, #0
 800c1d8:	e0f9      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
 800c1da:	bf00      	nop
 800c1dc:	200007f0 	.word	0x200007f0
 800c1e0:	20008000 	.word	0x20008000
 800c1e4:	08014cbc 	.word	0x08014cbc
 800c1e8:	20008064 	.word	0x20008064
 800c1ec:	200080a8 	.word	0x200080a8
            }
            break;
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800c1f0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800c1f4:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800c1f8:	4b8a      	ldr	r3, [pc, #552]	; (800c424 <LoRaMacMibSetRequestConfirm+0x510>)
 800c1fa:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800c1fe:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800c202:	2207      	movs	r2, #7
 800c204:	a901      	add	r1, sp, #4
 800c206:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c20a:	f001 fb74 	bl	800d8f6 <RegionVerify>
 800c20e:	2800      	cmp	r0, #0
 800c210:	f000 80f8 	beq.w	800c404 <LoRaMacMibSetRequestConfirm+0x4f0>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800c214:	4b84      	ldr	r3, [pc, #528]	; (800c428 <LoRaMacMibSetRequestConfirm+0x514>)
 800c216:	3504      	adds	r5, #4
 800c218:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c21c:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c220:	2400      	movs	r4, #0
 800c222:	e0d4      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            break;
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800c224:	6843      	ldr	r3, [r0, #4]
 800c226:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800c228:	2301      	movs	r3, #1
 800c22a:	f88d 300c 	strb.w	r3, [sp, #12]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800c22e:	a902      	add	r1, sp, #8
 800c230:	4b7c      	ldr	r3, [pc, #496]	; (800c424 <LoRaMacMibSetRequestConfirm+0x510>)
 800c232:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c236:	f001 fb7c 	bl	800d932 <RegionChanMaskSet>
 800c23a:	2800      	cmp	r0, #0
 800c23c:	f000 80e4 	beq.w	800c408 <LoRaMacMibSetRequestConfirm+0x4f4>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c240:	2400      	movs	r4, #0
 800c242:	e0c4      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            break;
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800c244:	6843      	ldr	r3, [r0, #4]
 800c246:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800c248:	2300      	movs	r3, #0
 800c24a:	f88d 300c 	strb.w	r3, [sp, #12]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800c24e:	a902      	add	r1, sp, #8
 800c250:	4b74      	ldr	r3, [pc, #464]	; (800c424 <LoRaMacMibSetRequestConfirm+0x510>)
 800c252:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c256:	f001 fb6c 	bl	800d932 <RegionChanMaskSet>
 800c25a:	2800      	cmp	r0, #0
 800c25c:	f000 80d6 	beq.w	800c40c <LoRaMacMibSetRequestConfirm+0x4f8>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c260:	2400      	movs	r4, #0
 800c262:	e0b4      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            break;
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800c264:	7902      	ldrb	r2, [r0, #4]
 800c266:	1e53      	subs	r3, r2, #1
 800c268:	b2db      	uxtb	r3, r3
 800c26a:	2b0e      	cmp	r3, #14
 800c26c:	f200 80d0 	bhi.w	800c410 <LoRaMacMibSetRequestConfirm+0x4fc>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800c270:	4b6c      	ldr	r3, [pc, #432]	; (800c424 <LoRaMacMibSetRequestConfirm+0x510>)
 800c272:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c276:	2400      	movs	r4, #0
 800c278:	e0a9      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            break;
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800c27a:	6842      	ldr	r2, [r0, #4]
 800c27c:	4b69      	ldr	r3, [pc, #420]	; (800c424 <LoRaMacMibSetRequestConfirm+0x510>)
 800c27e:	64da      	str	r2, [r3, #76]	; 0x4c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c280:	2400      	movs	r4, #0
            break;
 800c282:	e0a4      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800c284:	6842      	ldr	r2, [r0, #4]
 800c286:	4b67      	ldr	r3, [pc, #412]	; (800c424 <LoRaMacMibSetRequestConfirm+0x510>)
 800c288:	651a      	str	r2, [r3, #80]	; 0x50
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c28a:	2400      	movs	r4, #0
            break;
 800c28c:	e09f      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800c28e:	6842      	ldr	r2, [r0, #4]
 800c290:	4b64      	ldr	r3, [pc, #400]	; (800c424 <LoRaMacMibSetRequestConfirm+0x510>)
 800c292:	655a      	str	r2, [r3, #84]	; 0x54
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c294:	2400      	movs	r4, #0
            break;
 800c296:	e09a      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800c298:	6842      	ldr	r2, [r0, #4]
 800c29a:	4b62      	ldr	r3, [pc, #392]	; (800c424 <LoRaMacMibSetRequestConfirm+0x510>)
 800c29c:	659a      	str	r2, [r3, #88]	; 0x58
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c29e:	2400      	movs	r4, #0
            break;
 800c2a0:	e095      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800c2a2:	6842      	ldr	r2, [r0, #4]
 800c2a4:	4b5f      	ldr	r3, [pc, #380]	; (800c424 <LoRaMacMibSetRequestConfirm+0x510>)
 800c2a6:	65da      	str	r2, [r3, #92]	; 0x5c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c2a8:	2400      	movs	r4, #0
            break;
 800c2aa:	e090      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800c2ac:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800c2b0:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800c2b4:	2206      	movs	r2, #6
 800c2b6:	a901      	add	r1, sp, #4
 800c2b8:	4b5a      	ldr	r3, [pc, #360]	; (800c424 <LoRaMacMibSetRequestConfirm+0x510>)
 800c2ba:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c2be:	f001 fb1a 	bl	800d8f6 <RegionVerify>
 800c2c2:	2800      	cmp	r0, #0
 800c2c4:	f000 80a6 	beq.w	800c414 <LoRaMacMibSetRequestConfirm+0x500>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 800c2c8:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800c2cc:	4b55      	ldr	r3, [pc, #340]	; (800c424 <LoRaMacMibSetRequestConfirm+0x510>)
 800c2ce:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c2d2:	2400      	movs	r4, #0
 800c2d4:	e07b      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            break;
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800c2d6:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800c2da:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800c2de:	4b51      	ldr	r3, [pc, #324]	; (800c424 <LoRaMacMibSetRequestConfirm+0x510>)
 800c2e0:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800c2e4:	f88d 2006 	strb.w	r2, [sp, #6]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800c2e8:	2205      	movs	r2, #5
 800c2ea:	a901      	add	r1, sp, #4
 800c2ec:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c2f0:	f001 fb01 	bl	800d8f6 <RegionVerify>
 800c2f4:	2800      	cmp	r0, #0
 800c2f6:	f000 808f 	beq.w	800c418 <LoRaMacMibSetRequestConfirm+0x504>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800c2fa:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800c2fe:	4b49      	ldr	r3, [pc, #292]	; (800c424 <LoRaMacMibSetRequestConfirm+0x510>)
 800c300:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c304:	2400      	movs	r4, #0
 800c306:	e062      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            break;
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800c308:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800c30c:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800c310:	220a      	movs	r2, #10
 800c312:	a901      	add	r1, sp, #4
 800c314:	4b43      	ldr	r3, [pc, #268]	; (800c424 <LoRaMacMibSetRequestConfirm+0x510>)
 800c316:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c31a:	f001 faec 	bl	800d8f6 <RegionVerify>
 800c31e:	2800      	cmp	r0, #0
 800c320:	d07c      	beq.n	800c41c <LoRaMacMibSetRequestConfirm+0x508>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 800c322:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800c326:	4b3f      	ldr	r3, [pc, #252]	; (800c424 <LoRaMacMibSetRequestConfirm+0x510>)
 800c328:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c32c:	2400      	movs	r4, #0
 800c32e:	e04e      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            break;
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800c330:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800c334:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 800c338:	2209      	movs	r2, #9
 800c33a:	a901      	add	r1, sp, #4
 800c33c:	4b39      	ldr	r3, [pc, #228]	; (800c424 <LoRaMacMibSetRequestConfirm+0x510>)
 800c33e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c342:	f001 fad8 	bl	800d8f6 <RegionVerify>
 800c346:	2800      	cmp	r0, #0
 800c348:	d06a      	beq.n	800c420 <LoRaMacMibSetRequestConfirm+0x50c>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 800c34a:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800c34e:	4b35      	ldr	r3, [pc, #212]	; (800c424 <LoRaMacMibSetRequestConfirm+0x510>)
 800c350:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c354:	2400      	movs	r4, #0
 800c356:	e03a      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            break;
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800c358:	6842      	ldr	r2, [r0, #4]
 800c35a:	4b32      	ldr	r3, [pc, #200]	; (800c424 <LoRaMacMibSetRequestConfirm+0x510>)
 800c35c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800c360:	645a      	str	r2, [r3, #68]	; 0x44
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c362:	2400      	movs	r4, #0
            break;
 800c364:	e033      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800c366:	7902      	ldrb	r2, [r0, #4]
 800c368:	4b2e      	ldr	r3, [pc, #184]	; (800c424 <LoRaMacMibSetRequestConfirm+0x510>)
 800c36a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 800c36e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c372:	2400      	movs	r4, #0
            break;
 800c374:	e02b      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800c376:	6842      	ldr	r2, [r0, #4]
 800c378:	4b2a      	ldr	r3, [pc, #168]	; (800c424 <LoRaMacMibSetRequestConfirm+0x510>)
 800c37a:	67da      	str	r2, [r3, #124]	; 0x7c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c37c:	2400      	movs	r4, #0
            break;
 800c37e:	e026      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800c380:	6842      	ldr	r2, [r0, #4]
 800c382:	4b28      	ldr	r3, [pc, #160]	; (800c424 <LoRaMacMibSetRequestConfirm+0x510>)
 800c384:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c388:	2400      	movs	r4, #0
            break;
 800c38a:	e020      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 800c38c:	f7fe fdd8 	bl	800af40 <RestoreNvmData>
 800c390:	4604      	mov	r4, r0
            break;
 800c392:	e01c      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800c394:	7983      	ldrb	r3, [r0, #6]
 800c396:	2b01      	cmp	r3, #1
 800c398:	d901      	bls.n	800c39e <LoRaMacMibSetRequestConfirm+0x48a>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c39a:	2403      	movs	r4, #3
 800c39c:	e017      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800c39e:	6842      	ldr	r2, [r0, #4]
 800c3a0:	4b20      	ldr	r3, [pc, #128]	; (800c424 <LoRaMacMibSetRequestConfirm+0x510>)
 800c3a2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800c3a6:	6840      	ldr	r0, [r0, #4]
 800c3a8:	f000 ff14 	bl	800d1d4 <LoRaMacCryptoSetLrWanVersion>
 800c3ac:	4604      	mov	r4, r0
 800c3ae:	b170      	cbz	r0, 800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c3b0:	2411      	movs	r4, #17
 800c3b2:	e00c      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            break;
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 800c3b4:	6842      	ldr	r2, [r0, #4]
 800c3b6:	4b1b      	ldr	r3, [pc, #108]	; (800c424 <LoRaMacMibSetRequestConfirm+0x510>)
 800c3b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c3bc:	2400      	movs	r4, #0
            break;
 800c3be:	e006      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
            break;
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800c3c0:	f000 fa98 	bl	800c8f4 <LoRaMacMibClassBSetRequestConfirm>
 800c3c4:	4604      	mov	r4, r0
            break;
 800c3c6:	e002      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c3c8:	2403      	movs	r4, #3
 800c3ca:	e000      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
        return LORAMAC_STATUS_BUSY;
 800c3cc:	2401      	movs	r4, #1
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
    }
#endif /* LORAMAC_VERSION */
    return status;
}
 800c3ce:	4620      	mov	r0, r4
 800c3d0:	b005      	add	sp, #20
 800c3d2:	bd30      	pop	{r4, r5, pc}
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c3d4:	2403      	movs	r4, #3
 800c3d6:	e7fa      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c3d8:	2403      	movs	r4, #3
 800c3da:	e7f8      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c3dc:	2403      	movs	r4, #3
 800c3de:	e7f6      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c3e0:	2403      	movs	r4, #3
 800c3e2:	e7f4      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c3e4:	2403      	movs	r4, #3
 800c3e6:	e7f2      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c3e8:	2403      	movs	r4, #3
 800c3ea:	e7f0      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c3ec:	2403      	movs	r4, #3
 800c3ee:	e7ee      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c3f0:	2403      	movs	r4, #3
 800c3f2:	e7ec      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c3f4:	2403      	movs	r4, #3
 800c3f6:	e7ea      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c3f8:	2403      	movs	r4, #3
 800c3fa:	e7e8      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c3fc:	2403      	movs	r4, #3
 800c3fe:	e7e6      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c400:	2403      	movs	r4, #3
 800c402:	e7e4      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c404:	2403      	movs	r4, #3
 800c406:	e7e2      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c408:	2403      	movs	r4, #3
 800c40a:	e7e0      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c40c:	2403      	movs	r4, #3
 800c40e:	e7de      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c410:	2403      	movs	r4, #3
 800c412:	e7dc      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c414:	2403      	movs	r4, #3
 800c416:	e7da      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c418:	2403      	movs	r4, #3
 800c41a:	e7d8      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c41c:	2403      	movs	r4, #3
 800c41e:	e7d6      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c420:	2403      	movs	r4, #3
 800c422:	e7d4      	b.n	800c3ce <LoRaMacMibSetRequestConfirm+0x4ba>
 800c424:	20008000 	.word	0x20008000
 800c428:	200080b0 	.word	0x200080b0

0800c42c <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800c42c:	b570      	push	{r4, r5, r6, lr}
 800c42e:	b082      	sub	sp, #8
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800c430:	2300      	movs	r3, #0
 800c432:	f8ad 3000 	strh.w	r3, [sp]

    if( mlmeRequest == NULL )
 800c436:	2800      	cmp	r0, #0
 800c438:	f000 80c5 	beq.w	800c5c6 <LoRaMacMlmeRequest+0x19a>
 800c43c:	4605      	mov	r5, r0
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 800c43e:	f7ff f949 	bl	800b6d4 <LoRaMacIsBusy>
 800c442:	b118      	cbz	r0, 800c44c <LoRaMacMlmeRequest+0x20>
    {
        return LORAMAC_STATUS_BUSY;
 800c444:	2401      	movs	r4, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 800c446:	4620      	mov	r0, r4
 800c448:	b002      	add	sp, #8
 800c44a:	bd70      	pop	{r4, r5, r6, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800c44c:	f000 fcf8 	bl	800ce40 <LoRaMacConfirmQueueIsFull>
 800c450:	b108      	cbz	r0, 800c456 <LoRaMacMlmeRequest+0x2a>
        return LORAMAC_STATUS_BUSY;
 800c452:	2401      	movs	r4, #1
 800c454:	e7f7      	b.n	800c446 <LoRaMacMlmeRequest+0x1a>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800c456:	f000 fced 	bl	800ce34 <LoRaMacConfirmQueueGetCnt>
 800c45a:	b1f8      	cbz	r0, 800c49c <LoRaMacMlmeRequest+0x70>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c45c:	4b5b      	ldr	r3, [pc, #364]	; (800c5cc <LoRaMacMlmeRequest+0x1a0>)
 800c45e:	2101      	movs	r1, #1
 800c460:	f883 144d 	strb.w	r1, [r3, #1101]	; 0x44d
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800c464:	f893 2485 	ldrb.w	r2, [r3, #1157]	; 0x485
 800c468:	f042 0204 	orr.w	r2, r2, #4
 800c46c:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
    queueElement.Request = mlmeRequest->Type;
 800c470:	782b      	ldrb	r3, [r5, #0]
 800c472:	f88d 3004 	strb.w	r3, [sp, #4]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c476:	f88d 1005 	strb.w	r1, [sp, #5]
    queueElement.RestrictCommonReadyToHandle = false;
 800c47a:	2200      	movs	r2, #0
 800c47c:	f88d 2007 	strb.w	r2, [sp, #7]
    switch( mlmeRequest->Type )
 800c480:	461c      	mov	r4, r3
 800c482:	3b01      	subs	r3, #1
 800c484:	2b0d      	cmp	r3, #13
 800c486:	f200 8084 	bhi.w	800c592 <LoRaMacMlmeRequest+0x166>
 800c48a:	e8df f003 	tbb	[pc, r3]
 800c48e:	820d      	.short	0x820d
 800c490:	423d3382 	.word	0x423d3382
 800c494:	4b828282 	.word	0x4b828282
 800c498:	6a547382 	.word	0x6a547382
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800c49c:	2214      	movs	r2, #20
 800c49e:	2100      	movs	r1, #0
 800c4a0:	484b      	ldr	r0, [pc, #300]	; (800c5d0 <LoRaMacMlmeRequest+0x1a4>)
 800c4a2:	f004 fb3c 	bl	8010b1e <memset1>
 800c4a6:	e7d9      	b.n	800c45c <LoRaMacMlmeRequest+0x30>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800c4a8:	4b48      	ldr	r3, [pc, #288]	; (800c5cc <LoRaMacMlmeRequest+0x1a0>)
 800c4aa:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800c4ae:	f013 0f20 	tst.w	r3, #32
 800c4b2:	d1c8      	bne.n	800c446 <LoRaMacMlmeRequest+0x1a>
            ResetMacParameters( );
 800c4b4:	f7fe fe40 	bl	800b138 <ResetMacParameters>
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800c4b8:	4c46      	ldr	r4, [pc, #280]	; (800c5d4 <LoRaMacMlmeRequest+0x1a8>)
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800c4c0:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800c4c4:	f001 fad3 	bl	800da6e <RegionAlternateDr>
 800c4c8:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800c4cc:	2307      	movs	r3, #7
 800c4ce:	f88d 3005 	strb.w	r3, [sp, #5]
            status = SendReJoinReq( JOIN_REQ );
 800c4d2:	20ff      	movs	r0, #255	; 0xff
 800c4d4:	f7fe ff58 	bl	800b388 <SendReJoinReq>
            if( status != LORAMAC_STATUS_OK )
 800c4d8:	4604      	mov	r4, r0
 800c4da:	2800      	cmp	r0, #0
 800c4dc:	d05a      	beq.n	800c594 <LoRaMacMlmeRequest+0x168>
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800c4de:	4e3d      	ldr	r6, [pc, #244]	; (800c5d4 <LoRaMacMlmeRequest+0x1a8>)
 800c4e0:	2201      	movs	r2, #1
 800c4e2:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800c4e6:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 800c4ea:	f001 fac0 	bl	800da6e <RegionAlternateDr>
 800c4ee:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
 800c4f2:	e04f      	b.n	800c594 <LoRaMacMlmeRequest+0x168>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	4669      	mov	r1, sp
 800c4f8:	2002      	movs	r0, #2
 800c4fa:	f000 fa99 	bl	800ca30 <LoRaMacCommandsAddCmd>
 800c4fe:	4604      	mov	r4, r0
 800c500:	2800      	cmp	r0, #0
 800c502:	d047      	beq.n	800c594 <LoRaMacMlmeRequest+0x168>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800c504:	2413      	movs	r4, #19
 800c506:	e045      	b.n	800c594 <LoRaMacMlmeRequest+0x168>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 800c508:	88a8      	ldrh	r0, [r5, #4]
 800c50a:	f7fe ff67 	bl	800b3dc <SetTxContinuousWave>
 800c50e:	4604      	mov	r4, r0
            break;
 800c510:	e040      	b.n	800c594 <LoRaMacMlmeRequest+0x168>
            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800c512:	f995 200c 	ldrsb.w	r2, [r5, #12]
 800c516:	b2d2      	uxtb	r2, r2
 800c518:	68a9      	ldr	r1, [r5, #8]
 800c51a:	88a8      	ldrh	r0, [r5, #4]
 800c51c:	f7fd f828 	bl	8009570 <SetTxContinuousWave1>
 800c520:	4604      	mov	r4, r0
            break;
 800c522:	e037      	b.n	800c594 <LoRaMacMlmeRequest+0x168>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800c524:	2200      	movs	r2, #0
 800c526:	4669      	mov	r1, sp
 800c528:	200d      	movs	r0, #13
 800c52a:	f000 fa81 	bl	800ca30 <LoRaMacCommandsAddCmd>
 800c52e:	4604      	mov	r4, r0
 800c530:	b380      	cbz	r0, 800c594 <LoRaMacMlmeRequest+0x168>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800c532:	2413      	movs	r4, #19
 800c534:	e02e      	b.n	800c594 <LoRaMacMlmeRequest+0x168>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800c536:	4b27      	ldr	r3, [pc, #156]	; (800c5d4 <LoRaMacMlmeRequest+0x1a8>)
 800c538:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800c53c:	b10b      	cbz	r3, 800c542 <LoRaMacMlmeRequest+0x116>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800c53e:	2402      	movs	r4, #2
 800c540:	e028      	b.n	800c594 <LoRaMacMlmeRequest+0x168>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800c542:	792c      	ldrb	r4, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800c544:	f004 0007 	and.w	r0, r4, #7
 800c548:	f000 f9cd 	bl	800c8e6 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800c54c:	f88d 4000 	strb.w	r4, [sp]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800c550:	2201      	movs	r2, #1
 800c552:	4669      	mov	r1, sp
 800c554:	2010      	movs	r0, #16
 800c556:	f000 fa6b 	bl	800ca30 <LoRaMacCommandsAddCmd>
 800c55a:	4604      	mov	r4, r0
 800c55c:	b1d0      	cbz	r0, 800c594 <LoRaMacMlmeRequest+0x168>
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800c55e:	2413      	movs	r4, #19
 800c560:	e018      	b.n	800c594 <LoRaMacMlmeRequest+0x168>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800c562:	2200      	movs	r2, #0
 800c564:	4669      	mov	r1, sp
 800c566:	2012      	movs	r0, #18
 800c568:	f000 fa62 	bl	800ca30 <LoRaMacCommandsAddCmd>
 800c56c:	4604      	mov	r4, r0
 800c56e:	b188      	cbz	r0, 800c594 <LoRaMacMlmeRequest+0x168>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800c570:	2413      	movs	r4, #19
 800c572:	e00f      	b.n	800c594 <LoRaMacMlmeRequest+0x168>
            queueElement.RestrictCommonReadyToHandle = true;
 800c574:	2301      	movs	r3, #1
 800c576:	f88d 3007 	strb.w	r3, [sp, #7]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800c57a:	f000 f9a5 	bl	800c8c8 <LoRaMacClassBIsAcquisitionInProgress>
 800c57e:	b108      	cbz	r0, 800c584 <LoRaMacMlmeRequest+0x158>
                status = LORAMAC_STATUS_BUSY;
 800c580:	2401      	movs	r4, #1
 800c582:	e007      	b.n	800c594 <LoRaMacMlmeRequest+0x168>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800c584:	f000 f99d 	bl	800c8c2 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800c588:	2000      	movs	r0, #0
 800c58a:	f000 f99f 	bl	800c8cc <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 800c58e:	2400      	movs	r4, #0
 800c590:	e000      	b.n	800c594 <LoRaMacMlmeRequest+0x168>
    switch( mlmeRequest->Type )
 800c592:	2402      	movs	r4, #2
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800c594:	4b0d      	ldr	r3, [pc, #52]	; (800c5cc <LoRaMacMlmeRequest+0x1a0>)
 800c596:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 800c59a:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 800c59c:	b17c      	cbz	r4, 800c5be <LoRaMacMlmeRequest+0x192>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800c59e:	f000 fc49 	bl	800ce34 <LoRaMacConfirmQueueGetCnt>
 800c5a2:	2800      	cmp	r0, #0
 800c5a4:	f47f af4f 	bne.w	800c446 <LoRaMacMlmeRequest+0x1a>
            MacCtx.NodeAckRequested = false;
 800c5a8:	4b08      	ldr	r3, [pc, #32]	; (800c5cc <LoRaMacMlmeRequest+0x1a0>)
 800c5aa:	2100      	movs	r1, #0
 800c5ac:	f883 1414 	strb.w	r1, [r3, #1044]	; 0x414
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800c5b0:	f893 2485 	ldrb.w	r2, [r3, #1157]	; 0x485
 800c5b4:	f361 0282 	bfi	r2, r1, #2, #1
 800c5b8:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
 800c5bc:	e743      	b.n	800c446 <LoRaMacMlmeRequest+0x1a>
        LoRaMacConfirmQueueAdd( &queueElement );
 800c5be:	a801      	add	r0, sp, #4
 800c5c0:	f000 fb74 	bl	800ccac <LoRaMacConfirmQueueAdd>
 800c5c4:	e73f      	b.n	800c446 <LoRaMacMlmeRequest+0x1a>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c5c6:	2403      	movs	r4, #3
 800c5c8:	e73d      	b.n	800c446 <LoRaMacMlmeRequest+0x1a>
 800c5ca:	bf00      	nop
 800c5cc:	200007f0 	.word	0x200007f0
 800c5d0:	20000c3c 	.word	0x20000c3c
 800c5d4:	20008000 	.word	0x20008000

0800c5d8 <LoRaMacMcpsRequest>:
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 800c5d8:	2800      	cmp	r0, #0
 800c5da:	f000 80b0 	beq.w	800c73e <LoRaMacMcpsRequest+0x166>
{
 800c5de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5e2:	b088      	sub	sp, #32
 800c5e4:	460d      	mov	r5, r1
 800c5e6:	f04f 0800 	mov.w	r8, #0
 800c5ea:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( LoRaMacIsBusy( ) == true )
 800c5ec:	f7ff f872 	bl	800b6d4 <LoRaMacIsBusy>
 800c5f0:	4606      	mov	r6, r0
 800c5f2:	b118      	cbz	r0, 800c5fc <LoRaMacMcpsRequest+0x24>
    {
        return LORAMAC_STATUS_BUSY;
 800c5f4:	2001      	movs	r0, #1

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 800c5f6:	b008      	add	sp, #32
 800c5f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    macHdr.Value = 0;
 800c5fc:	4641      	mov	r1, r8
 800c5fe:	f88d 8010 	strb.w	r8, [sp, #16]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800c602:	4f51      	ldr	r7, [pc, #324]	; (800c748 <LoRaMacMcpsRequest+0x170>)
 800c604:	2214      	movs	r2, #20
 800c606:	f507 6087 	add.w	r0, r7, #1080	; 0x438
 800c60a:	f004 fa88 	bl	8010b1e <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c60e:	2301      	movs	r3, #1
 800c610:	f887 3439 	strb.w	r3, [r7, #1081]	; 0x439
    MacCtx.AckTimeoutRetriesCounter = 1;
 800c614:	f887 3412 	strb.w	r3, [r7, #1042]	; 0x412
    switch( mcpsRequest->Type )
 800c618:	7823      	ldrb	r3, [r4, #0]
 800c61a:	2b01      	cmp	r3, #1
 800c61c:	d059      	beq.n	800c6d2 <LoRaMacMcpsRequest+0xfa>
 800c61e:	2b03      	cmp	r3, #3
 800c620:	d06f      	beq.n	800c702 <LoRaMacMcpsRequest+0x12a>
 800c622:	2b00      	cmp	r3, #0
 800c624:	d042      	beq.n	800c6ac <LoRaMacMcpsRequest+0xd4>
 800c626:	2700      	movs	r7, #0
 800c628:	46ba      	mov	sl, r7
 800c62a:	46b9      	mov	r9, r7
    getPhy.Attribute = PHY_MIN_TX_DR;
 800c62c:	2302      	movs	r3, #2
 800c62e:	f88d 3018 	strb.w	r3, [sp, #24]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800c632:	4b46      	ldr	r3, [pc, #280]	; (800c74c <LoRaMacMcpsRequest+0x174>)
 800c634:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800c638:	f88d 201a 	strb.w	r2, [sp, #26]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c63c:	a906      	add	r1, sp, #24
 800c63e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c642:	f001 f924 	bl	800d88e <RegionGetPhyParam>
 800c646:	9005      	str	r0, [sp, #20]
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800c648:	b240      	sxtb	r0, r0
 800c64a:	42b8      	cmp	r0, r7
 800c64c:	bfb8      	it	lt
 800c64e:	4638      	movlt	r0, r7
    if( readyToSend == true )
 800c650:	2e00      	cmp	r6, #0
 800c652:	d06e      	beq.n	800c732 <LoRaMacMcpsRequest+0x15a>
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 800c654:	4b3d      	ldr	r3, [pc, #244]	; (800c74c <LoRaMacMcpsRequest+0x174>)
 800c656:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800c65a:	b99b      	cbnz	r3, 800c684 <LoRaMacMcpsRequest+0xac>
            verify.DatarateParams.Datarate = datarate;
 800c65c:	f88d 000c 	strb.w	r0, [sp, #12]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800c660:	4b3a      	ldr	r3, [pc, #232]	; (800c74c <LoRaMacMcpsRequest+0x174>)
 800c662:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800c666:	f88d 200e 	strb.w	r2, [sp, #14]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800c66a:	2205      	movs	r2, #5
 800c66c:	a903      	add	r1, sp, #12
 800c66e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c672:	f001 f940 	bl	800d8f6 <RegionVerify>
 800c676:	2800      	cmp	r0, #0
 800c678:	d063      	beq.n	800c742 <LoRaMacMcpsRequest+0x16a>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800c67a:	f99d 200c 	ldrsb.w	r2, [sp, #12]
 800c67e:	4b33      	ldr	r3, [pc, #204]	; (800c74c <LoRaMacMcpsRequest+0x174>)
 800c680:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800c684:	9500      	str	r5, [sp, #0]
 800c686:	4643      	mov	r3, r8
 800c688:	4652      	mov	r2, sl
 800c68a:	4649      	mov	r1, r9
 800c68c:	a804      	add	r0, sp, #16
 800c68e:	f7fe ff91 	bl	800b5b4 <Send>
        if( status == LORAMAC_STATUS_OK )
 800c692:	2800      	cmp	r0, #0
 800c694:	d148      	bne.n	800c728 <LoRaMacMcpsRequest+0x150>
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 800c696:	7822      	ldrb	r2, [r4, #0]
 800c698:	4b2b      	ldr	r3, [pc, #172]	; (800c748 <LoRaMacMcpsRequest+0x170>)
 800c69a:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800c69e:	f893 2485 	ldrb.w	r2, [r3, #1157]	; 0x485
 800c6a2:	f042 0201 	orr.w	r2, r2, #1
 800c6a6:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
 800c6aa:	e043      	b.n	800c734 <LoRaMacMcpsRequest+0x15c>
            MacCtx.AckTimeoutRetries = 1;
 800c6ac:	2601      	movs	r6, #1
 800c6ae:	f887 6411 	strb.w	r6, [r7, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800c6b2:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800c6b6:	2202      	movs	r2, #2
 800c6b8:	f362 1347 	bfi	r3, r2, #5, #3
 800c6bc:	f88d 3010 	strb.w	r3, [sp, #16]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 800c6c0:	f894 9004 	ldrb.w	r9, [r4, #4]
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 800c6c4:	f8d4 a008 	ldr.w	sl, [r4, #8]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 800c6c8:	f8b4 800c 	ldrh.w	r8, [r4, #12]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 800c6cc:	f994 700e 	ldrsb.w	r7, [r4, #14]
            break;
 800c6d0:	e7ac      	b.n	800c62c <LoRaMacMcpsRequest+0x54>
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 800c6d2:	7be3      	ldrb	r3, [r4, #15]
 800c6d4:	2b08      	cmp	r3, #8
 800c6d6:	bf28      	it	cs
 800c6d8:	2308      	movcs	r3, #8
 800c6da:	4a1b      	ldr	r2, [pc, #108]	; (800c748 <LoRaMacMcpsRequest+0x170>)
 800c6dc:	f882 3411 	strb.w	r3, [r2, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800c6e0:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800c6e4:	2204      	movs	r2, #4
 800c6e6:	f362 1347 	bfi	r3, r2, #5, #3
 800c6ea:	f88d 3010 	strb.w	r3, [sp, #16]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 800c6ee:	f894 9004 	ldrb.w	r9, [r4, #4]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 800c6f2:	f8d4 a008 	ldr.w	sl, [r4, #8]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 800c6f6:	f8b4 800c 	ldrh.w	r8, [r4, #12]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 800c6fa:	f994 700e 	ldrsb.w	r7, [r4, #14]
            readyToSend = true;
 800c6fe:	2601      	movs	r6, #1
            break;
 800c700:	e794      	b.n	800c62c <LoRaMacMcpsRequest+0x54>
            MacCtx.AckTimeoutRetries = 1;
 800c702:	2601      	movs	r6, #1
 800c704:	4b10      	ldr	r3, [pc, #64]	; (800c748 <LoRaMacMcpsRequest+0x170>)
 800c706:	f883 6411 	strb.w	r6, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800c70a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800c70e:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800c712:	f88d 3010 	strb.w	r3, [sp, #16]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 800c716:	f8d4 a004 	ldr.w	sl, [r4, #4]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 800c71a:	f8b4 8008 	ldrh.w	r8, [r4, #8]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 800c71e:	f994 700a 	ldrsb.w	r7, [r4, #10]
    uint8_t fPort = 0;
 800c722:	f04f 0900 	mov.w	r9, #0
            break;
 800c726:	e781      	b.n	800c62c <LoRaMacMcpsRequest+0x54>
            MacCtx.NodeAckRequested = false;
 800c728:	4b07      	ldr	r3, [pc, #28]	; (800c748 <LoRaMacMcpsRequest+0x170>)
 800c72a:	2200      	movs	r2, #0
 800c72c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 800c730:	e000      	b.n	800c734 <LoRaMacMcpsRequest+0x15c>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800c732:	2002      	movs	r0, #2
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800c734:	4b04      	ldr	r3, [pc, #16]	; (800c748 <LoRaMacMcpsRequest+0x170>)
 800c736:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 800c73a:	6123      	str	r3, [r4, #16]
    return status;
 800c73c:	e75b      	b.n	800c5f6 <LoRaMacMcpsRequest+0x1e>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c73e:	2003      	movs	r0, #3
}
 800c740:	4770      	bx	lr
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800c742:	2003      	movs	r0, #3
 800c744:	e757      	b.n	800c5f6 <LoRaMacMcpsRequest+0x1e>
 800c746:	bf00      	nop
 800c748:	200007f0 	.word	0x200007f0
 800c74c:	20008000 	.word	0x20008000

0800c750 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800c750:	b510      	push	{r4, lr}
 800c752:	b082      	sub	sp, #8
 800c754:	4604      	mov	r4, r0
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 800c756:	f88d 0004 	strb.w	r0, [sp, #4]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800c75a:	220f      	movs	r2, #15
 800c75c:	a901      	add	r1, sp, #4
 800c75e:	4b05      	ldr	r3, [pc, #20]	; (800c774 <LoRaMacTestSetDutyCycleOn+0x24>)
 800c760:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c764:	f001 f8c7 	bl	800d8f6 <RegionVerify>
 800c768:	b110      	cbz	r0, 800c770 <LoRaMacTestSetDutyCycleOn+0x20>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 800c76a:	4b02      	ldr	r3, [pc, #8]	; (800c774 <LoRaMacTestSetDutyCycleOn+0x24>)
 800c76c:	f883 4108 	strb.w	r4, [r3, #264]	; 0x108
    }
}
 800c770:	b002      	add	sp, #8
 800c772:	bd10      	pop	{r4, pc}
 800c774:	20008000 	.word	0x20008000

0800c778 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 800c778:	b538      	push	{r3, r4, r5, lr}
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 800c77a:	f7ff f9e9 	bl	800bb50 <LoRaMacStop>
 800c77e:	b110      	cbz	r0, 800c786 <LoRaMacDeInitialization+0xe>
        // Return success
        return LORAMAC_STATUS_OK;
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 800c780:	2401      	movs	r4, #1
    }
}
 800c782:	4620      	mov	r0, r4
 800c784:	bd38      	pop	{r3, r4, r5, pc}
 800c786:	4604      	mov	r4, r0
        TimerStop( &MacCtx.TxDelayedTimer );
 800c788:	4d0c      	ldr	r5, [pc, #48]	; (800c7bc <LoRaMacDeInitialization+0x44>)
 800c78a:	f505 705a 	add.w	r0, r5, #872	; 0x368
 800c78e:	f006 fbab 	bl	8012ee8 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 800c792:	f505 7060 	add.w	r0, r5, #896	; 0x380
 800c796:	f006 fba7 	bl	8012ee8 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 800c79a:	f505 7066 	add.w	r0, r5, #920	; 0x398
 800c79e:	f006 fba3 	bl	8012ee8 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.AckTimeoutTimer );
 800c7a2:	f505 707e 	add.w	r0, r5, #1016	; 0x3f8
 800c7a6:	f006 fb9f 	bl	8012ee8 <UTIL_TIMER_Stop>
        LoRaMacClassBHaltBeaconing( );
 800c7aa:	f000 f89d 	bl	800c8e8 <LoRaMacClassBHaltBeaconing>
        ResetMacParameters( );
 800c7ae:	f7fe fcc3 	bl	800b138 <ResetMacParameters>
        Radio.Sleep( );
 800c7b2:	4b03      	ldr	r3, [pc, #12]	; (800c7c0 <LoRaMacDeInitialization+0x48>)
 800c7b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7b6:	4798      	blx	r3
        return LORAMAC_STATUS_OK;
 800c7b8:	e7e3      	b.n	800c782 <LoRaMacDeInitialization+0xa>
 800c7ba:	bf00      	nop
 800c7bc:	200007f0 	.word	0x200007f0
 800c7c0:	08014cbc 	.word	0x08014cbc

0800c7c4 <CalcNextV10X>:
#include "LoRaMacAdr.h"
#include "LoRaMacVersion.h"

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800c7c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7c8:	b089      	sub	sp, #36	; 0x24
 800c7ca:	460f      	mov	r7, r1
 800c7cc:	4616      	mov	r6, r2
 800c7ce:	461d      	mov	r5, r3
    bool adrAckReq = false;
    int8_t datarate = adrNext->Datarate;
 800c7d0:	f990 9010 	ldrsb.w	r9, [r0, #16]
    int8_t txPower = adrNext->TxPower;
 800c7d4:	f990 b011 	ldrsb.w	fp, [r0, #17]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 800c7d8:	6883      	ldr	r3, [r0, #8]
 800c7da:	602b      	str	r3, [r5, #0]

    if( adrNext->AdrEnabled == true )
 800c7dc:	f890 8005 	ldrb.w	r8, [r0, #5]
 800c7e0:	f1b8 0f00 	cmp.w	r8, #0
 800c7e4:	d107      	bne.n	800c7f6 <CalcNextV10X+0x32>
                }
            }
        }
    }

    *drOut = datarate;
 800c7e6:	f887 9000 	strb.w	r9, [r7]
    *txPowOut = txPower;
 800c7ea:	f886 b000 	strb.w	fp, [r6]
    return adrAckReq;
}
 800c7ee:	4640      	mov	r0, r8
 800c7f0:	b009      	add	sp, #36	; 0x24
 800c7f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7f6:	4604      	mov	r4, r0
        getPhy.Attribute = PHY_MIN_TX_DR;
 800c7f8:	2302      	movs	r3, #2
 800c7fa:	f88d 3018 	strb.w	r3, [sp, #24]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800c7fe:	7c83      	ldrb	r3, [r0, #18]
 800c800:	f88d 301a 	strb.w	r3, [sp, #26]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800c804:	a906      	add	r1, sp, #24
 800c806:	7cc0      	ldrb	r0, [r0, #19]
 800c808:	f001 f841 	bl	800d88e <RegionGetPhyParam>
 800c80c:	9005      	str	r0, [sp, #20]
        minTxDatarate = phyParam.Value;
 800c80e:	fa4f fa80 	sxtb.w	sl, r0
        datarate = MAX( datarate, minTxDatarate );
 800c812:	464a      	mov	r2, r9
 800c814:	45d1      	cmp	r9, sl
 800c816:	bfb8      	it	lt
 800c818:	4652      	movlt	r2, sl
 800c81a:	9201      	str	r2, [sp, #4]
        if( datarate == minTxDatarate )
 800c81c:	45d1      	cmp	r9, sl
 800c81e:	dc04      	bgt.n	800c82a <CalcNextV10X+0x66>
            *adrAckCounter = 0;
 800c820:	2300      	movs	r3, #0
 800c822:	602b      	str	r3, [r5, #0]
        datarate = MAX( datarate, minTxDatarate );
 800c824:	4691      	mov	r9, r2
            adrAckReq = false;
 800c826:	4698      	mov	r8, r3
 800c828:	e7dd      	b.n	800c7e6 <CalcNextV10X+0x22>
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800c82a:	68a2      	ldr	r2, [r4, #8]
 800c82c:	89a3      	ldrh	r3, [r4, #12]
 800c82e:	429a      	cmp	r2, r3
 800c830:	d201      	bcs.n	800c836 <CalcNextV10X+0x72>
                adrAckReq = false;
 800c832:	f04f 0800 	mov.w	r8, #0
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800c836:	89e1      	ldrh	r1, [r4, #14]
 800c838:	440b      	add	r3, r1
 800c83a:	429a      	cmp	r2, r3
 800c83c:	d202      	bcs.n	800c844 <CalcNextV10X+0x80>
        datarate = MAX( datarate, minTxDatarate );
 800c83e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c842:	e7d0      	b.n	800c7e6 <CalcNextV10X+0x22>
                getPhy.Attribute = PHY_MAX_TX_POWER;
 800c844:	2308      	movs	r3, #8
 800c846:	f88d 3018 	strb.w	r3, [sp, #24]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800c84a:	a906      	add	r1, sp, #24
 800c84c:	7ce0      	ldrb	r0, [r4, #19]
 800c84e:	f001 f81e 	bl	800d88e <RegionGetPhyParam>
 800c852:	9005      	str	r0, [sp, #20]
                txPower = phyParam.Value;
 800c854:	fa4f fb80 	sxtb.w	fp, r0
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800c858:	68a3      	ldr	r3, [r4, #8]
 800c85a:	89e2      	ldrh	r2, [r4, #14]
 800c85c:	fbb3 f1f2 	udiv	r1, r3, r2
 800c860:	fb02 3311 	mls	r3, r2, r1, r3
 800c864:	2b01      	cmp	r3, #1
 800c866:	d002      	beq.n	800c86e <CalcNextV10X+0xaa>
        datarate = MAX( datarate, minTxDatarate );
 800c868:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c86c:	e7bb      	b.n	800c7e6 <CalcNextV10X+0x22>
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800c86e:	2322      	movs	r3, #34	; 0x22
 800c870:	f88d 3018 	strb.w	r3, [sp, #24]
                    getPhy.Datarate = datarate;
 800c874:	9b01      	ldr	r3, [sp, #4]
 800c876:	f88d 3019 	strb.w	r3, [sp, #25]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800c87a:	7ca3      	ldrb	r3, [r4, #18]
 800c87c:	f88d 301a 	strb.w	r3, [sp, #26]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800c880:	a906      	add	r1, sp, #24
 800c882:	7ce0      	ldrb	r0, [r4, #19]
 800c884:	f001 f803 	bl	800d88e <RegionGetPhyParam>
 800c888:	9005      	str	r0, [sp, #20]
                    datarate = phyParam.Value;
 800c88a:	fa4f f980 	sxtb.w	r9, r0
                    if( datarate == minTxDatarate )
 800c88e:	45ca      	cmp	sl, r9
 800c890:	d1a9      	bne.n	800c7e6 <CalcNextV10X+0x22>
                        if( adrNext->UpdateChanMask == true )
 800c892:	f894 8004 	ldrb.w	r8, [r4, #4]
 800c896:	f1b8 0f00 	cmp.w	r8, #0
 800c89a:	d0a4      	beq.n	800c7e6 <CalcNextV10X+0x22>
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800c89c:	2302      	movs	r3, #2
 800c89e:	f88d 3010 	strb.w	r3, [sp, #16]
                            RegionInitDefaults( adrNext->Region, &params );
 800c8a2:	a902      	add	r1, sp, #8
 800c8a4:	7ce0      	ldrb	r0, [r4, #19]
 800c8a6:	f001 f818 	bl	800d8da <RegionInitDefaults>
                        adrAckReq = false;
 800c8aa:	f04f 0800 	mov.w	r8, #0
 800c8ae:	e79a      	b.n	800c7e6 <CalcNextV10X+0x22>

0800c8b0 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800c8b0:	b510      	push	{r4, lr}
    if( adrNext->Version.Fields.Minor == 0 )
 800c8b2:	7884      	ldrb	r4, [r0, #2]
 800c8b4:	b10c      	cbz	r4, 800c8ba <LoRaMacAdrCalcNext+0xa>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
    }
    return false;
 800c8b6:	2000      	movs	r0, #0
}
 800c8b8:	bd10      	pop	{r4, pc}
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 800c8ba:	f7ff ff83 	bl	800c7c4 <CalcNextV10X>
 800c8be:	e7fb      	b.n	800c8b8 <LoRaMacAdrCalcNext+0x8>

0800c8c0 <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c8c0:	4770      	bx	lr

0800c8c2 <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c8c2:	4770      	bx	lr

0800c8c4 <LoRaMacClassBSetPingSlotState>:
void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c8c4:	4770      	bx	lr

0800c8c6 <LoRaMacClassBSetMulticastSlotState>:
void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c8c6:	4770      	bx	lr

0800c8c8 <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c8c8:	2000      	movs	r0, #0
 800c8ca:	4770      	bx	lr

0800c8cc <LoRaMacClassBBeaconTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c8cc:	4770      	bx	lr

0800c8ce <LoRaMacClassBPingSlotTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c8ce:	4770      	bx	lr

0800c8d0 <LoRaMacClassBMulticastSlotTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c8d0:	4770      	bx	lr

0800c8d2 <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c8d2:	2000      	movs	r0, #0
 800c8d4:	4770      	bx	lr

0800c8d6 <LoRaMacClassBIsBeaconExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c8d6:	2000      	movs	r0, #0
 800c8d8:	4770      	bx	lr

0800c8da <LoRaMacClassBIsPingExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c8da:	2000      	movs	r0, #0
 800c8dc:	4770      	bx	lr

0800c8de <LoRaMacClassBIsMulticastExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c8de:	2000      	movs	r0, #0
 800c8e0:	4770      	bx	lr

0800c8e2 <LoRaMacClassBIsBeaconModeActive>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c8e2:	2000      	movs	r0, #0
 800c8e4:	4770      	bx	lr

0800c8e6 <LoRaMacClassBSetPingSlotInfo>:
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c8e6:	4770      	bx	lr

0800c8e8 <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c8e8:	4770      	bx	lr

0800c8ea <LoRaMacClassBResumeBeaconing>:
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c8ea:	4770      	bx	lr

0800c8ec <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c8ec:	2002      	movs	r0, #2
 800c8ee:	4770      	bx	lr

0800c8f0 <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c8f0:	2002      	movs	r0, #2
 800c8f2:	4770      	bx	lr

0800c8f4 <LoRaMacMibClassBSetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c8f4:	2002      	movs	r0, #2
 800c8f6:	4770      	bx	lr

0800c8f8 <LoRaMacClassBPingSlotInfoAns>:
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c8f8:	4770      	bx	lr

0800c8fa <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c8fa:	2000      	movs	r0, #0
 800c8fc:	4770      	bx	lr

0800c8fe <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c8fe:	4770      	bx	lr

0800c900 <LoRaMacClassBDeviceTimeAns>:
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c900:	4770      	bx	lr

0800c902 <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c902:	2000      	movs	r0, #0
 800c904:	4770      	bx	lr

0800c906 <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c906:	2000      	movs	r0, #0
 800c908:	4770      	bx	lr

0800c90a <LoRaMacClassBStopRxSlots>:
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c90a:	4770      	bx	lr

0800c90c <LoRaMacClassBProcess>:
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c90c:	4770      	bx	lr

0800c90e <IsSlotFree>:
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
    uint8_t* mem = ( uint8_t* )slot;

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800c90e:	2300      	movs	r3, #0
 800c910:	2b0f      	cmp	r3, #15
 800c912:	d804      	bhi.n	800c91e <IsSlotFree+0x10>
    {
        if( mem[size] != 0x00 )
 800c914:	5cc2      	ldrb	r2, [r0, r3]
 800c916:	b922      	cbnz	r2, 800c922 <IsSlotFree+0x14>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800c918:	3301      	adds	r3, #1
 800c91a:	b29b      	uxth	r3, r3
 800c91c:	e7f8      	b.n	800c910 <IsSlotFree+0x2>
        {
            return false;
        }
    }
    return true;
 800c91e:	2001      	movs	r0, #1
 800c920:	4770      	bx	lr
            return false;
 800c922:	2000      	movs	r0, #0
}
 800c924:	4770      	bx	lr
	...

0800c928 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 800c928:	b538      	push	{r3, r4, r5, lr}
    uint8_t itr = 0;
 800c92a:	2400      	movs	r4, #0

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800c92c:	0125      	lsls	r5, r4, #4
 800c92e:	f105 0308 	add.w	r3, r5, #8
 800c932:	4d06      	ldr	r5, [pc, #24]	; (800c94c <MallocNewMacCommandSlot+0x24>)
 800c934:	441d      	add	r5, r3
 800c936:	4628      	mov	r0, r5
 800c938:	f7ff ffe9 	bl	800c90e <IsSlotFree>
 800c93c:	b920      	cbnz	r0, 800c948 <MallocNewMacCommandSlot+0x20>
    {
        itr++;
 800c93e:	3401      	adds	r4, #1
 800c940:	b2e4      	uxtb	r4, r4
        if( itr == NUM_OF_MAC_COMMANDS )
 800c942:	2c0f      	cmp	r4, #15
 800c944:	d1f2      	bne.n	800c92c <MallocNewMacCommandSlot+0x4>
        {
            return NULL;
 800c946:	2500      	movs	r5, #0
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
}
 800c948:	4628      	mov	r0, r5
 800c94a:	bd38      	pop	{r3, r4, r5, pc}
 800c94c:	20000d10 	.word	0x20000d10

0800c950 <LinkedListInit>:
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
    if( list == NULL )
 800c950:	b120      	cbz	r0, 800c95c <LinkedListInit+0xc>
    {
        return false;
    }

    list->First = NULL;
 800c952:	2200      	movs	r2, #0
 800c954:	6002      	str	r2, [r0, #0]
    list->Last = NULL;
 800c956:	6042      	str	r2, [r0, #4]

    return true;
 800c958:	2001      	movs	r0, #1
 800c95a:	4770      	bx	lr
        return false;
 800c95c:	2000      	movs	r0, #0
}
 800c95e:	4770      	bx	lr

0800c960 <LinkedListAdd>:
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800c960:	4603      	mov	r3, r0
 800c962:	b160      	cbz	r0, 800c97e <LinkedListAdd+0x1e>
 800c964:	b169      	cbz	r1, 800c982 <LinkedListAdd+0x22>
    {
        return false;
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 800c966:	6802      	ldr	r2, [r0, #0]
 800c968:	b13a      	cbz	r2, 800c97a <LinkedListAdd+0x1a>
    {
        list->First = element;
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 800c96a:	685a      	ldr	r2, [r3, #4]
 800c96c:	b102      	cbz	r2, 800c970 <LinkedListAdd+0x10>
    {
        list->Last->Next = element;
 800c96e:	6011      	str	r1, [r2, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 800c970:	2200      	movs	r2, #0
 800c972:	600a      	str	r2, [r1, #0]

    // Update the last entry of the list.
    list->Last = element;
 800c974:	6059      	str	r1, [r3, #4]

    return true;
 800c976:	2001      	movs	r0, #1
 800c978:	4770      	bx	lr
        list->First = element;
 800c97a:	6001      	str	r1, [r0, #0]
 800c97c:	e7f5      	b.n	800c96a <LinkedListAdd+0xa>
        return false;
 800c97e:	2000      	movs	r0, #0
 800c980:	4770      	bx	lr
 800c982:	2000      	movs	r0, #0
}
 800c984:	4770      	bx	lr

0800c986 <LinkedListGetPrevious>:
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800c986:	b160      	cbz	r0, 800c9a2 <LinkedListGetPrevious+0x1c>
 800c988:	b161      	cbz	r1, 800c9a4 <LinkedListGetPrevious+0x1e>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 800c98a:	6800      	ldr	r0, [r0, #0]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 800c98c:	4281      	cmp	r1, r0
 800c98e:	d102      	bne.n	800c996 <LinkedListGetPrevious+0x10>
            curElement = curElement->Next;
        }
    }
    else
    {
        curElement = NULL;
 800c990:	2000      	movs	r0, #0
    }

    return curElement;
}
 800c992:	4770      	bx	lr
            curElement = curElement->Next;
 800c994:	4618      	mov	r0, r3
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800c996:	2800      	cmp	r0, #0
 800c998:	d0fb      	beq.n	800c992 <LinkedListGetPrevious+0xc>
 800c99a:	6803      	ldr	r3, [r0, #0]
 800c99c:	428b      	cmp	r3, r1
 800c99e:	d1f9      	bne.n	800c994 <LinkedListGetPrevious+0xe>
 800c9a0:	4770      	bx	lr
 800c9a2:	4770      	bx	lr
        return NULL;
 800c9a4:	4608      	mov	r0, r1
 800c9a6:	4770      	bx	lr

0800c9a8 <LinkedListRemove>:
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800c9a8:	b1b8      	cbz	r0, 800c9da <LinkedListRemove+0x32>
{
 800c9aa:	b538      	push	{r3, r4, r5, lr}
 800c9ac:	460c      	mov	r4, r1
 800c9ae:	4605      	mov	r5, r0
    if( ( list == NULL ) || ( element == NULL ) )
 800c9b0:	b1a9      	cbz	r1, 800c9de <LinkedListRemove+0x36>
    {
        return false;
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 800c9b2:	f7ff ffe8 	bl	800c986 <LinkedListGetPrevious>

    if( list->First == element )
 800c9b6:	682b      	ldr	r3, [r5, #0]
 800c9b8:	42a3      	cmp	r3, r4
 800c9ba:	d009      	beq.n	800c9d0 <LinkedListRemove+0x28>
    {
        list->First = element->Next;
    }

    if( list->Last == element )
 800c9bc:	686b      	ldr	r3, [r5, #4]
 800c9be:	42a3      	cmp	r3, r4
 800c9c0:	d009      	beq.n	800c9d6 <LinkedListRemove+0x2e>
    {
        list->Last = PrevElement;
    }

    if( PrevElement != NULL )
 800c9c2:	b108      	cbz	r0, 800c9c8 <LinkedListRemove+0x20>
    {
        PrevElement->Next = element->Next;
 800c9c4:	6823      	ldr	r3, [r4, #0]
 800c9c6:	6003      	str	r3, [r0, #0]
    }

    element->Next = NULL;
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	6023      	str	r3, [r4, #0]

    return true;
 800c9cc:	2001      	movs	r0, #1
}
 800c9ce:	bd38      	pop	{r3, r4, r5, pc}
        list->First = element->Next;
 800c9d0:	6823      	ldr	r3, [r4, #0]
 800c9d2:	602b      	str	r3, [r5, #0]
 800c9d4:	e7f2      	b.n	800c9bc <LinkedListRemove+0x14>
        list->Last = PrevElement;
 800c9d6:	6068      	str	r0, [r5, #4]
 800c9d8:	e7f3      	b.n	800c9c2 <LinkedListRemove+0x1a>
        return false;
 800c9da:	2000      	movs	r0, #0
}
 800c9dc:	4770      	bx	lr
        return false;
 800c9de:	2000      	movs	r0, #0
 800c9e0:	e7f5      	b.n	800c9ce <LinkedListRemove+0x26>

0800c9e2 <IsSticky>:
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
    switch( cid )
 800c9e2:	2805      	cmp	r0, #5
 800c9e4:	d006      	beq.n	800c9f4 <IsSticky+0x12>
 800c9e6:	d307      	bcc.n	800c9f8 <IsSticky+0x16>
 800c9e8:	3808      	subs	r0, #8
 800c9ea:	b2c0      	uxtb	r0, r0
 800c9ec:	2802      	cmp	r0, #2
 800c9ee:	d905      	bls.n	800c9fc <IsSticky+0x1a>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
        default:
            return false;
 800c9f0:	2000      	movs	r0, #0
 800c9f2:	4770      	bx	lr
    switch( cid )
 800c9f4:	2001      	movs	r0, #1
 800c9f6:	4770      	bx	lr
            return false;
 800c9f8:	2000      	movs	r0, #0
 800c9fa:	4770      	bx	lr
    switch( cid )
 800c9fc:	2001      	movs	r0, #1
    }
}
 800c9fe:	4770      	bx	lr

0800ca00 <FreeMacCommandSlot>:
    if( slot == NULL )
 800ca00:	b130      	cbz	r0, 800ca10 <FreeMacCommandSlot+0x10>
{
 800ca02:	b508      	push	{r3, lr}
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800ca04:	2210      	movs	r2, #16
 800ca06:	2100      	movs	r1, #0
 800ca08:	f004 f889 	bl	8010b1e <memset1>
    return true;
 800ca0c:	2001      	movs	r0, #1
}
 800ca0e:	bd08      	pop	{r3, pc}
        return false;
 800ca10:	2000      	movs	r0, #0
}
 800ca12:	4770      	bx	lr

0800ca14 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800ca14:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800ca16:	4c05      	ldr	r4, [pc, #20]	; (800ca2c <LoRaMacCommandsInit+0x18>)
 800ca18:	22fc      	movs	r2, #252	; 0xfc
 800ca1a:	2100      	movs	r1, #0
 800ca1c:	4620      	mov	r0, r4
 800ca1e:	f004 f87e 	bl	8010b1e <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 800ca22:	4620      	mov	r0, r4
 800ca24:	f7ff ff94 	bl	800c950 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800ca28:	2000      	movs	r0, #0
 800ca2a:	bd10      	pop	{r4, pc}
 800ca2c:	20000d10 	.word	0x20000d10

0800ca30 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
    if( payload == NULL )
 800ca30:	b301      	cbz	r1, 800ca74 <LoRaMacCommandsAddCmd+0x44>
{
 800ca32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca34:	4605      	mov	r5, r0
 800ca36:	4614      	mov	r4, r2
 800ca38:	460f      	mov	r7, r1
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 800ca3a:	f7ff ff75 	bl	800c928 <MallocNewMacCommandSlot>

    if( newCmd == NULL )
 800ca3e:	4606      	mov	r6, r0
 800ca40:	b1d0      	cbz	r0, 800ca78 <LoRaMacCommandsAddCmd+0x48>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 800ca42:	4601      	mov	r1, r0
 800ca44:	480e      	ldr	r0, [pc, #56]	; (800ca80 <LoRaMacCommandsAddCmd+0x50>)
 800ca46:	f7ff ff8b 	bl	800c960 <LinkedListAdd>
 800ca4a:	b1b8      	cbz	r0, 800ca7c <LoRaMacCommandsAddCmd+0x4c>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 800ca4c:	7135      	strb	r5, [r6, #4]
    newCmd->PayloadSize = payloadSize;
 800ca4e:	60b4      	str	r4, [r6, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800ca50:	b2a2      	uxth	r2, r4
 800ca52:	4639      	mov	r1, r7
 800ca54:	1d70      	adds	r0, r6, #5
 800ca56:	f004 f84a 	bl	8010aee <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 800ca5a:	4628      	mov	r0, r5
 800ca5c:	f7ff ffc1 	bl	800c9e2 <IsSticky>
 800ca60:	7330      	strb	r0, [r6, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800ca62:	4b07      	ldr	r3, [pc, #28]	; (800ca80 <LoRaMacCommandsAddCmd+0x50>)
 800ca64:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 800ca68:	4414      	add	r4, r2
 800ca6a:	3401      	adds	r4, #1
 800ca6c:	f8c3 40f8 	str.w	r4, [r3, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 800ca70:	2000      	movs	r0, #0
}
 800ca72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800ca74:	2001      	movs	r0, #1
}
 800ca76:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800ca78:	2002      	movs	r0, #2
 800ca7a:	e7fa      	b.n	800ca72 <LoRaMacCommandsAddCmd+0x42>
        return LORAMAC_COMMANDS_ERROR;
 800ca7c:	2005      	movs	r0, #5
 800ca7e:	e7f8      	b.n	800ca72 <LoRaMacCommandsAddCmd+0x42>
 800ca80:	20000d10 	.word	0x20000d10

0800ca84 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
    if( macCmd == NULL )
 800ca84:	b1a0      	cbz	r0, 800cab0 <LoRaMacCommandsRemoveCmd+0x2c>
{
 800ca86:	b510      	push	{r4, lr}
 800ca88:	4604      	mov	r4, r0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 800ca8a:	4601      	mov	r1, r0
 800ca8c:	480b      	ldr	r0, [pc, #44]	; (800cabc <LoRaMacCommandsRemoveCmd+0x38>)
 800ca8e:	f7ff ff8b 	bl	800c9a8 <LinkedListRemove>
 800ca92:	b178      	cbz	r0, 800cab4 <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800ca94:	68a1      	ldr	r1, [r4, #8]
 800ca96:	4a09      	ldr	r2, [pc, #36]	; (800cabc <LoRaMacCommandsRemoveCmd+0x38>)
 800ca98:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
 800ca9c:	1a5b      	subs	r3, r3, r1
 800ca9e:	3b01      	subs	r3, #1
 800caa0:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 800caa4:	4620      	mov	r0, r4
 800caa6:	f7ff ffab 	bl	800ca00 <FreeMacCommandSlot>
 800caaa:	b128      	cbz	r0, 800cab8 <LoRaMacCommandsRemoveCmd+0x34>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800caac:	2000      	movs	r0, #0
}
 800caae:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800cab0:	2001      	movs	r0, #1
}
 800cab2:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800cab4:	2003      	movs	r0, #3
 800cab6:	e7fa      	b.n	800caae <LoRaMacCommandsRemoveCmd+0x2a>
        return LORAMAC_COMMANDS_ERROR;
 800cab8:	2005      	movs	r0, #5
 800caba:	e7f8      	b.n	800caae <LoRaMacCommandsRemoveCmd+0x2a>
 800cabc:	20000d10 	.word	0x20000d10

0800cac0 <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800cac0:	4b0a      	ldr	r3, [pc, #40]	; (800caec <LoRaMacCommandsRemoveNoneStickyCmds+0x2c>)
 800cac2:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800cac4:	b120      	cbz	r0, 800cad0 <LoRaMacCommandsRemoveNoneStickyCmds+0x10>
    {
        if( curElement->IsSticky == false )
 800cac6:	7b03      	ldrb	r3, [r0, #12]
 800cac8:	b11b      	cbz	r3, 800cad2 <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
            curElement = nexElement;
        }
        else
        {
            curElement = curElement->Next;
 800caca:	6800      	ldr	r0, [r0, #0]
 800cacc:	e7fa      	b.n	800cac4 <LoRaMacCommandsRemoveNoneStickyCmds+0x4>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800cace:	bd10      	pop	{r4, pc}
 800cad0:	4770      	bx	lr
{
 800cad2:	b510      	push	{r4, lr}
            nexElement = curElement->Next;
 800cad4:	6804      	ldr	r4, [r0, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 800cad6:	f7ff ffd5 	bl	800ca84 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 800cada:	4620      	mov	r0, r4
    while( curElement != NULL )
 800cadc:	2800      	cmp	r0, #0
 800cade:	d0f6      	beq.n	800cace <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        if( curElement->IsSticky == false )
 800cae0:	7b03      	ldrb	r3, [r0, #12]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d0f6      	beq.n	800cad4 <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
            curElement = curElement->Next;
 800cae6:	6800      	ldr	r0, [r0, #0]
 800cae8:	e7f8      	b.n	800cadc <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>
 800caea:	bf00      	nop
 800caec:	20000d10 	.word	0x20000d10

0800caf0 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800caf0:	b538      	push	{r3, r4, r5, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800caf2:	4b08      	ldr	r3, [pc, #32]	; (800cb14 <LoRaMacCommandsRemoveStickyAnsCmds+0x24>)
 800caf4:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800caf6:	e000      	b.n	800cafa <LoRaMacCommandsRemoveStickyAnsCmds+0xa>
{
 800caf8:	462c      	mov	r4, r5
    while( curElement != NULL )
 800cafa:	b14c      	cbz	r4, 800cb10 <LoRaMacCommandsRemoveStickyAnsCmds+0x20>
    {
        nexElement = curElement->Next;
 800cafc:	6825      	ldr	r5, [r4, #0]
        if( IsSticky( curElement->CID ) == true )
 800cafe:	7920      	ldrb	r0, [r4, #4]
 800cb00:	f7ff ff6f 	bl	800c9e2 <IsSticky>
 800cb04:	2800      	cmp	r0, #0
 800cb06:	d0f7      	beq.n	800caf8 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 800cb08:	4620      	mov	r0, r4
 800cb0a:	f7ff ffbb 	bl	800ca84 <LoRaMacCommandsRemoveCmd>
 800cb0e:	e7f3      	b.n	800caf8 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800cb10:	2000      	movs	r0, #0
 800cb12:	bd38      	pop	{r3, r4, r5, pc}
 800cb14:	20000d10 	.word	0x20000d10

0800cb18 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 800cb18:	b128      	cbz	r0, 800cb26 <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
 800cb1a:	4a04      	ldr	r2, [pc, #16]	; (800cb2c <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800cb1c:	f8d2 20f8 	ldr.w	r2, [r2, #248]	; 0xf8
 800cb20:	6002      	str	r2, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800cb22:	2000      	movs	r0, #0
 800cb24:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800cb26:	2001      	movs	r0, #1
}
 800cb28:	4770      	bx	lr
 800cb2a:	bf00      	nop
 800cb2c:	20000d10 	.word	0x20000d10

0800cb30 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800cb30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800cb34:	4b16      	ldr	r3, [pc, #88]	; (800cb90 <LoRaMacCommandsSerializeCmds+0x60>)
 800cb36:	681c      	ldr	r4, [r3, #0]
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800cb38:	b32a      	cbz	r2, 800cb86 <LoRaMacCommandsSerializeCmds+0x56>
 800cb3a:	4607      	mov	r7, r0
 800cb3c:	4688      	mov	r8, r1
 800cb3e:	4616      	mov	r6, r2
 800cb40:	b319      	cbz	r1, 800cb8a <LoRaMacCommandsSerializeCmds+0x5a>
    uint8_t itr = 0;
 800cb42:	2100      	movs	r1, #0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800cb44:	b194      	cbz	r4, 800cb6c <LoRaMacCommandsSerializeCmds+0x3c>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800cb46:	1a7a      	subs	r2, r7, r1
 800cb48:	68a3      	ldr	r3, [r4, #8]
 800cb4a:	3301      	adds	r3, #1
 800cb4c:	429a      	cmp	r2, r3
 800cb4e:	d30d      	bcc.n	800cb6c <LoRaMacCommandsSerializeCmds+0x3c>
        {
            buffer[itr++] = curElement->CID;
 800cb50:	1c4d      	adds	r5, r1, #1
 800cb52:	b2ed      	uxtb	r5, r5
 800cb54:	7923      	ldrb	r3, [r4, #4]
 800cb56:	5473      	strb	r3, [r6, r1]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800cb58:	8922      	ldrh	r2, [r4, #8]
 800cb5a:	1d61      	adds	r1, r4, #5
 800cb5c:	1970      	adds	r0, r6, r5
 800cb5e:	f003 ffc6 	bl	8010aee <memcpy1>
            itr += curElement->PayloadSize;
 800cb62:	68a3      	ldr	r3, [r4, #8]
 800cb64:	441d      	add	r5, r3
 800cb66:	b2e9      	uxtb	r1, r5
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 800cb68:	6824      	ldr	r4, [r4, #0]
 800cb6a:	e7eb      	b.n	800cb44 <LoRaMacCommandsSerializeCmds+0x14>
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 800cb6c:	b12c      	cbz	r4, 800cb7a <LoRaMacCommandsSerializeCmds+0x4a>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 800cb6e:	6825      	ldr	r5, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800cb70:	4620      	mov	r0, r4
 800cb72:	f7ff ff87 	bl	800ca84 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 800cb76:	462c      	mov	r4, r5
 800cb78:	e7f8      	b.n	800cb6c <LoRaMacCommandsSerializeCmds+0x3c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800cb7a:	4640      	mov	r0, r8
 800cb7c:	f7ff ffcc 	bl	800cb18 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800cb80:	2000      	movs	r0, #0
}
 800cb82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800cb86:	2001      	movs	r0, #1
 800cb88:	e7fb      	b.n	800cb82 <LoRaMacCommandsSerializeCmds+0x52>
 800cb8a:	2001      	movs	r0, #1
 800cb8c:	e7f9      	b.n	800cb82 <LoRaMacCommandsSerializeCmds+0x52>
 800cb8e:	bf00      	nop
 800cb90:	20000d10 	.word	0x20000d10

0800cb94 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
    if( cmdsPending == NULL )
 800cb94:	4601      	mov	r1, r0
 800cb96:	b170      	cbz	r0, 800cbb6 <LoRaMacCommandsStickyCmdsPending+0x22>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 800cb98:	4b08      	ldr	r3, [pc, #32]	; (800cbbc <LoRaMacCommandsStickyCmdsPending+0x28>)
 800cb9a:	681b      	ldr	r3, [r3, #0]

    *cmdsPending = false;
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	7002      	strb	r2, [r0, #0]

    // Loop through all elements
    while( curElement != NULL )
 800cba0:	b13b      	cbz	r3, 800cbb2 <LoRaMacCommandsStickyCmdsPending+0x1e>
    {
        if( curElement->IsSticky == true )
 800cba2:	7b1a      	ldrb	r2, [r3, #12]
 800cba4:	b90a      	cbnz	r2, 800cbaa <LoRaMacCommandsStickyCmdsPending+0x16>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
            return LORAMAC_COMMANDS_SUCCESS;
        }
        curElement = curElement->Next;
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	e7fa      	b.n	800cba0 <LoRaMacCommandsStickyCmdsPending+0xc>
            *cmdsPending = true;
 800cbaa:	2301      	movs	r3, #1
 800cbac:	700b      	strb	r3, [r1, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 800cbae:	2000      	movs	r0, #0
 800cbb0:	4770      	bx	lr
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800cbb2:	2000      	movs	r0, #0
 800cbb4:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800cbb6:	2001      	movs	r0, #1
}
 800cbb8:	4770      	bx	lr
 800cbba:	bf00      	nop
 800cbbc:	20000d10 	.word	0x20000d10

0800cbc0 <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800cbc0:	1e83      	subs	r3, r0, #2
 800cbc2:	2b11      	cmp	r3, #17
 800cbc4:	d80a      	bhi.n	800cbdc <LoRaMacCommandsGetCmdSize+0x1c>
 800cbc6:	e8df f003 	tbb	[pc, r3]
 800cbca:	0b23      	.short	0x0b23
 800cbcc:	110f240d 	.word	0x110f240d
 800cbd0:	09171513 	.word	0x09171513
 800cbd4:	09091909 	.word	0x09091909
 800cbd8:	211f1d1b 	.word	0x211f1d1b
 800cbdc:	2000      	movs	r0, #0
 800cbde:	4770      	bx	lr
            break;
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 800cbe0:	2005      	movs	r0, #5
            break;
 800cbe2:	4770      	bx	lr
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 800cbe4:	2002      	movs	r0, #2
            break;
 800cbe6:	4770      	bx	lr
            break;
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 800cbe8:	2001      	movs	r0, #1
            break;
 800cbea:	4770      	bx	lr
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 800cbec:	2006      	movs	r0, #6
            break;
 800cbee:	4770      	bx	lr
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 800cbf0:	2002      	movs	r0, #2
            break;
 800cbf2:	4770      	bx	lr
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 800cbf4:	2002      	movs	r0, #2
            break;
 800cbf6:	4770      	bx	lr
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 800cbf8:	2005      	movs	r0, #5
            break;
 800cbfa:	4770      	bx	lr
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 800cbfc:	2006      	movs	r0, #6
            break;
 800cbfe:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 800cc00:	2001      	movs	r0, #1
            break;
 800cc02:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 800cc04:	2005      	movs	r0, #5
            break;
 800cc06:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 800cc08:	2004      	movs	r0, #4
            break;
 800cc0a:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 800cc0c:	2004      	movs	r0, #4
            break;
 800cc0e:	4770      	bx	lr
            cidSize = 3;
 800cc10:	2003      	movs	r0, #3
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800cc12:	4770      	bx	lr

0800cc14 <IncreaseBufferPointer>:
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800cc14:	4b03      	ldr	r3, [pc, #12]	; (800cc24 <IncreaseBufferPointer+0x10>)
 800cc16:	4298      	cmp	r0, r3
 800cc18:	d001      	beq.n	800cc1e <IncreaseBufferPointer+0xa>
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
    }
    else
    {
        // Increase
        bufferPointer++;
 800cc1a:	3004      	adds	r0, #4
 800cc1c:	4770      	bx	lr
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800cc1e:	4802      	ldr	r0, [pc, #8]	; (800cc28 <IncreaseBufferPointer+0x14>)
    }
    return bufferPointer;
}
 800cc20:	4770      	bx	lr
 800cc22:	bf00      	nop
 800cc24:	20000e28 	.word	0x20000e28
 800cc28:	20000e18 	.word	0x20000e18

0800cc2c <IsListEmpty>:
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
    if( count == 0 )
 800cc2c:	b108      	cbz	r0, 800cc32 <IsListEmpty+0x6>
    {
        return true;
    }
    return false;
 800cc2e:	2000      	movs	r0, #0
 800cc30:	4770      	bx	lr
        return true;
 800cc32:	2001      	movs	r0, #1
}
 800cc34:	4770      	bx	lr

0800cc36 <IsListFull>:

static bool IsListFull( uint8_t count )
{
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800cc36:	2804      	cmp	r0, #4
 800cc38:	d801      	bhi.n	800cc3e <IsListFull+0x8>
    {
        return true;
    }
    return false;
 800cc3a:	2000      	movs	r0, #0
 800cc3c:	4770      	bx	lr
        return true;
 800cc3e:	2001      	movs	r0, #1
}
 800cc40:	4770      	bx	lr
	...

0800cc44 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 800cc44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc46:	4606      	mov	r6, r0
 800cc48:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800cc4a:	4b0d      	ldr	r3, [pc, #52]	; (800cc80 <GetElement+0x3c>)
 800cc4c:	f893 7020 	ldrb.w	r7, [r3, #32]
 800cc50:	4638      	mov	r0, r7
 800cc52:	f7ff ffeb 	bl	800cc2c <IsListEmpty>
 800cc56:	b970      	cbnz	r0, 800cc76 <GetElement+0x32>
    {
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800cc58:	2500      	movs	r5, #0
 800cc5a:	42af      	cmp	r7, r5
 800cc5c:	d909      	bls.n	800cc72 <GetElement+0x2e>
    {
        if( element->Request == request )
 800cc5e:	7823      	ldrb	r3, [r4, #0]
 800cc60:	42b3      	cmp	r3, r6
 800cc62:	d00a      	beq.n	800cc7a <GetElement+0x36>
        {
            // We have found the element
            return element;
        }
        element = IncreaseBufferPointer( element );
 800cc64:	4620      	mov	r0, r4
 800cc66:	f7ff ffd5 	bl	800cc14 <IncreaseBufferPointer>
 800cc6a:	4604      	mov	r4, r0
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800cc6c:	3501      	adds	r5, #1
 800cc6e:	b2ed      	uxtb	r5, r5
 800cc70:	e7f3      	b.n	800cc5a <GetElement+0x16>
    }

    return NULL;
 800cc72:	2000      	movs	r0, #0
}
 800cc74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
 800cc76:	2000      	movs	r0, #0
 800cc78:	e7fc      	b.n	800cc74 <GetElement+0x30>
            return element;
 800cc7a:	4620      	mov	r0, r4
 800cc7c:	e7fa      	b.n	800cc74 <GetElement+0x30>
 800cc7e:	bf00      	nop
 800cc80:	20000e0c 	.word	0x20000e0c

0800cc84 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 800cc84:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800cc86:	4c08      	ldr	r4, [pc, #32]	; (800cca8 <LoRaMacConfirmQueueInit+0x24>)
 800cc88:	6020      	str	r0, [r4, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	f884 3020 	strb.w	r3, [r4, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800cc90:	f104 000c 	add.w	r0, r4, #12
 800cc94:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800cc96:	60a0      	str	r0, [r4, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800cc98:	2214      	movs	r2, #20
 800cc9a:	21ff      	movs	r1, #255	; 0xff
 800cc9c:	f003 ff3f 	bl	8010b1e <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800cca0:	2301      	movs	r3, #1
 800cca2:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800cca6:	bd10      	pop	{r4, pc}
 800cca8:	20000e0c 	.word	0x20000e0c

0800ccac <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800ccac:	b538      	push	{r3, r4, r5, lr}
 800ccae:	4605      	mov	r5, r0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800ccb0:	4b0f      	ldr	r3, [pc, #60]	; (800ccf0 <LoRaMacConfirmQueueAdd+0x44>)
 800ccb2:	f893 0020 	ldrb.w	r0, [r3, #32]
 800ccb6:	f7ff ffbe 	bl	800cc36 <IsListFull>
 800ccba:	b9b8      	cbnz	r0, 800ccec <LoRaMacConfirmQueueAdd+0x40>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800ccbc:	4c0c      	ldr	r4, [pc, #48]	; (800ccf0 <LoRaMacConfirmQueueAdd+0x44>)
 800ccbe:	68a3      	ldr	r3, [r4, #8]
 800ccc0:	782a      	ldrb	r2, [r5, #0]
 800ccc2:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800ccc4:	68a3      	ldr	r3, [r4, #8]
 800ccc6:	786a      	ldrb	r2, [r5, #1]
 800ccc8:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800ccca:	68a3      	ldr	r3, [r4, #8]
 800cccc:	78ea      	ldrb	r2, [r5, #3]
 800ccce:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 800ccd0:	68a3      	ldr	r3, [r4, #8]
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	709a      	strb	r2, [r3, #2]
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800ccd6:	f894 3020 	ldrb.w	r3, [r4, #32]
 800ccda:	3301      	adds	r3, #1
 800ccdc:	f884 3020 	strb.w	r3, [r4, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800cce0:	68a0      	ldr	r0, [r4, #8]
 800cce2:	f7ff ff97 	bl	800cc14 <IncreaseBufferPointer>
 800cce6:	60a0      	str	r0, [r4, #8]

    return true;
 800cce8:	2001      	movs	r0, #1
}
 800ccea:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800ccec:	2000      	movs	r0, #0
 800ccee:	e7fc      	b.n	800ccea <LoRaMacConfirmQueueAdd+0x3e>
 800ccf0:	20000e0c 	.word	0x20000e0c

0800ccf4 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800ccf4:	b538      	push	{r3, r4, r5, lr}
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800ccf6:	4b09      	ldr	r3, [pc, #36]	; (800cd1c <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800ccf8:	f893 4020 	ldrb.w	r4, [r3, #32]
 800ccfc:	4620      	mov	r0, r4
 800ccfe:	f7ff ff95 	bl	800cc2c <IsListEmpty>
 800cd02:	b948      	cbnz	r0, 800cd18 <LoRaMacConfirmQueueRemoveFirst+0x24>
    {
        return false;
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800cd04:	4d05      	ldr	r5, [pc, #20]	; (800cd1c <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800cd06:	3c01      	subs	r4, #1
 800cd08:	f885 4020 	strb.w	r4, [r5, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800cd0c:	6868      	ldr	r0, [r5, #4]
 800cd0e:	f7ff ff81 	bl	800cc14 <IncreaseBufferPointer>
 800cd12:	6068      	str	r0, [r5, #4]

    return true;
 800cd14:	2001      	movs	r0, #1
}
 800cd16:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800cd18:	2000      	movs	r0, #0
 800cd1a:	e7fc      	b.n	800cd16 <LoRaMacConfirmQueueRemoveFirst+0x22>
 800cd1c:	20000e0c 	.word	0x20000e0c

0800cd20 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800cd20:	b538      	push	{r3, r4, r5, lr}
 800cd22:	4605      	mov	r5, r0
 800cd24:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800cd26:	4b08      	ldr	r3, [pc, #32]	; (800cd48 <LoRaMacConfirmQueueSetStatus+0x28>)
 800cd28:	f893 0020 	ldrb.w	r0, [r3, #32]
 800cd2c:	f7ff ff7e 	bl	800cc2c <IsListEmpty>
 800cd30:	b948      	cbnz	r0, 800cd46 <LoRaMacConfirmQueueSetStatus+0x26>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800cd32:	4b05      	ldr	r3, [pc, #20]	; (800cd48 <LoRaMacConfirmQueueSetStatus+0x28>)
 800cd34:	689a      	ldr	r2, [r3, #8]
 800cd36:	6859      	ldr	r1, [r3, #4]
 800cd38:	4620      	mov	r0, r4
 800cd3a:	f7ff ff83 	bl	800cc44 <GetElement>
        if( element != NULL )
 800cd3e:	b110      	cbz	r0, 800cd46 <LoRaMacConfirmQueueSetStatus+0x26>
        {
            element->Status = status;
 800cd40:	7045      	strb	r5, [r0, #1]
            element->ReadyToHandle = true;
 800cd42:	2201      	movs	r2, #1
 800cd44:	7082      	strb	r2, [r0, #2]
        }
    }
}
 800cd46:	bd38      	pop	{r3, r4, r5, pc}
 800cd48:	20000e0c 	.word	0x20000e0c

0800cd4c <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800cd4c:	b510      	push	{r4, lr}
 800cd4e:	4604      	mov	r4, r0
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800cd50:	4b09      	ldr	r3, [pc, #36]	; (800cd78 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800cd52:	f893 0020 	ldrb.w	r0, [r3, #32]
 800cd56:	f7ff ff69 	bl	800cc2c <IsListEmpty>
 800cd5a:	b940      	cbnz	r0, 800cd6e <LoRaMacConfirmQueueGetStatus+0x22>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800cd5c:	4b06      	ldr	r3, [pc, #24]	; (800cd78 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800cd5e:	689a      	ldr	r2, [r3, #8]
 800cd60:	6859      	ldr	r1, [r3, #4]
 800cd62:	4620      	mov	r0, r4
 800cd64:	f7ff ff6e 	bl	800cc44 <GetElement>
        if( element != NULL )
 800cd68:	b118      	cbz	r0, 800cd72 <LoRaMacConfirmQueueGetStatus+0x26>
        {
            return element->Status;
 800cd6a:	7840      	ldrb	r0, [r0, #1]
 800cd6c:	e000      	b.n	800cd70 <LoRaMacConfirmQueueGetStatus+0x24>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800cd6e:	2001      	movs	r0, #1
}
 800cd70:	bd10      	pop	{r4, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800cd72:	2001      	movs	r0, #1
 800cd74:	e7fc      	b.n	800cd70 <LoRaMacConfirmQueueGetStatus+0x24>
 800cd76:	bf00      	nop
 800cd78:	20000e0c 	.word	0x20000e0c

0800cd7c <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800cd7c:	b538      	push	{r3, r4, r5, lr}
 800cd7e:	4605      	mov	r5, r0
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800cd80:	4b0c      	ldr	r3, [pc, #48]	; (800cdb4 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800cd82:	685c      	ldr	r4, [r3, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 800cd84:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800cd88:	f893 0020 	ldrb.w	r0, [r3, #32]
 800cd8c:	f7ff ff4e 	bl	800cc2c <IsListEmpty>
 800cd90:	b150      	cbz	r0, 800cda8 <LoRaMacConfirmQueueSetStatusCmn+0x2c>
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
    }
}
 800cd92:	bd38      	pop	{r3, r4, r5, pc}
                element->ReadyToHandle = true;
 800cd94:	2301      	movs	r3, #1
 800cd96:	70a3      	strb	r3, [r4, #2]
            element = IncreaseBufferPointer( element );
 800cd98:	4620      	mov	r0, r4
 800cd9a:	f7ff ff3b 	bl	800cc14 <IncreaseBufferPointer>
 800cd9e:	4604      	mov	r4, r0
        }while( element != ConfirmQueueCtx.BufferEnd );
 800cda0:	4b04      	ldr	r3, [pc, #16]	; (800cdb4 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800cda2:	689b      	ldr	r3, [r3, #8]
 800cda4:	4283      	cmp	r3, r0
 800cda6:	d0f4      	beq.n	800cd92 <LoRaMacConfirmQueueSetStatusCmn+0x16>
            element->Status = status;
 800cda8:	7065      	strb	r5, [r4, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800cdaa:	78e3      	ldrb	r3, [r4, #3]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d1f3      	bne.n	800cd98 <LoRaMacConfirmQueueSetStatusCmn+0x1c>
 800cdb0:	e7f0      	b.n	800cd94 <LoRaMacConfirmQueueSetStatusCmn+0x18>
 800cdb2:	bf00      	nop
 800cdb4:	20000e0c 	.word	0x20000e0c

0800cdb8 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 800cdb8:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800cdba:	4b04      	ldr	r3, [pc, #16]	; (800cdcc <LoRaMacConfirmQueueIsCmdActive+0x14>)
 800cdbc:	689a      	ldr	r2, [r3, #8]
 800cdbe:	6859      	ldr	r1, [r3, #4]
 800cdc0:	f7ff ff40 	bl	800cc44 <GetElement>
 800cdc4:	b100      	cbz	r0, 800cdc8 <LoRaMacConfirmQueueIsCmdActive+0x10>
    {
        return true;
 800cdc6:	2001      	movs	r0, #1
    }
    return false;
}
 800cdc8:	bd08      	pop	{r3, pc}
 800cdca:	bf00      	nop
 800cdcc:	20000e0c 	.word	0x20000e0c

0800cdd0 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800cdd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdd2:	b083      	sub	sp, #12
 800cdd4:	4606      	mov	r6, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800cdd6:	4b16      	ldr	r3, [pc, #88]	; (800ce30 <LoRaMacConfirmQueueHandleCb+0x60>)
 800cdd8:	f893 7020 	ldrb.w	r7, [r3, #32]
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 800cddc:	2400      	movs	r4, #0
 800cdde:	e00d      	b.n	800cdfc <LoRaMacConfirmQueueHandleCb+0x2c>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800cde0:	781a      	ldrb	r2, [r3, #0]
 800cde2:	f88d 2004 	strb.w	r2, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800cde6:	785a      	ldrb	r2, [r3, #1]
 800cde8:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800cdec:	78db      	ldrb	r3, [r3, #3]
 800cdee:	f88d 3007 	strb.w	r3, [sp, #7]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 800cdf2:	f7ff ff7f 	bl	800ccf4 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 800cdf6:	b1a5      	cbz	r5, 800ce22 <LoRaMacConfirmQueueHandleCb+0x52>
    for( uint8_t i = 0; i < nbElements; i++ )
 800cdf8:	3401      	adds	r4, #1
 800cdfa:	b2e4      	uxtb	r4, r4
 800cdfc:	42bc      	cmp	r4, r7
 800cdfe:	d214      	bcs.n	800ce2a <LoRaMacConfirmQueueHandleCb+0x5a>
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800ce00:	4b0b      	ldr	r3, [pc, #44]	; (800ce30 <LoRaMacConfirmQueueHandleCb+0x60>)
 800ce02:	685a      	ldr	r2, [r3, #4]
 800ce04:	7812      	ldrb	r2, [r2, #0]
 800ce06:	7032      	strb	r2, [r6, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800ce08:	685a      	ldr	r2, [r3, #4]
 800ce0a:	7852      	ldrb	r2, [r2, #1]
 800ce0c:	7072      	strb	r2, [r6, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800ce0e:	685b      	ldr	r3, [r3, #4]
 800ce10:	789d      	ldrb	r5, [r3, #2]
        if( readyToHandle == true )
 800ce12:	2d00      	cmp	r5, #0
 800ce14:	d0e4      	beq.n	800cde0 <LoRaMacConfirmQueueHandleCb+0x10>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800ce16:	4b06      	ldr	r3, [pc, #24]	; (800ce30 <LoRaMacConfirmQueueHandleCb+0x60>)
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	689b      	ldr	r3, [r3, #8]
 800ce1c:	4630      	mov	r0, r6
 800ce1e:	4798      	blx	r3
 800ce20:	e7e7      	b.n	800cdf2 <LoRaMacConfirmQueueHandleCb+0x22>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800ce22:	a801      	add	r0, sp, #4
 800ce24:	f7ff ff42 	bl	800ccac <LoRaMacConfirmQueueAdd>
 800ce28:	e7e6      	b.n	800cdf8 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 800ce2a:	b003      	add	sp, #12
 800ce2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce2e:	bf00      	nop
 800ce30:	20000e0c 	.word	0x20000e0c

0800ce34 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
}
 800ce34:	4b01      	ldr	r3, [pc, #4]	; (800ce3c <LoRaMacConfirmQueueGetCnt+0x8>)
 800ce36:	f893 0020 	ldrb.w	r0, [r3, #32]
 800ce3a:	4770      	bx	lr
 800ce3c:	20000e0c 	.word	0x20000e0c

0800ce40 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 800ce40:	b508      	push	{r3, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800ce42:	4b03      	ldr	r3, [pc, #12]	; (800ce50 <LoRaMacConfirmQueueIsFull+0x10>)
 800ce44:	f893 0020 	ldrb.w	r0, [r3, #32]
 800ce48:	f7ff fef5 	bl	800cc36 <IsListFull>
    }
    else
    {
        return false;
    }
}
 800ce4c:	bd08      	pop	{r3, pc}
 800ce4e:	bf00      	nop
 800ce50:	20000e0c 	.word	0x20000e0c

0800ce54 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 800ce54:	b410      	push	{r4}
 800ce56:	9c01      	ldr	r4, [sp, #4]
 800ce58:	9902      	ldr	r1, [sp, #8]
 800ce5a:	9a03      	ldr	r2, [sp, #12]
    if( b0 == 0 )
 800ce5c:	b1da      	cbz	r2, 800ce96 <PrepareB0+0x42>
 800ce5e:	4684      	mov	ip, r0
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    b0[0] = 0x49;
 800ce60:	2049      	movs	r0, #73	; 0x49
 800ce62:	7010      	strb	r0, [r2, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 800ce64:	2000      	movs	r0, #0
 800ce66:	7050      	strb	r0, [r2, #1]
        b0[2] = 0x00;
 800ce68:	7090      	strb	r0, [r2, #2]
    }

    b0[3] = 0x00;
 800ce6a:	70d0      	strb	r0, [r2, #3]
    b0[4] = 0x00;
 800ce6c:	7110      	strb	r0, [r2, #4]

    b0[5] = dir;
 800ce6e:	7153      	strb	r3, [r2, #5]

    b0[6] = devAddr & 0xFF;
 800ce70:	7194      	strb	r4, [r2, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800ce72:	0a23      	lsrs	r3, r4, #8
 800ce74:	71d3      	strb	r3, [r2, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800ce76:	0c23      	lsrs	r3, r4, #16
 800ce78:	7213      	strb	r3, [r2, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800ce7a:	0e24      	lsrs	r4, r4, #24
 800ce7c:	7254      	strb	r4, [r2, #9]

    b0[10] = fCnt & 0xFF;
 800ce7e:	7291      	strb	r1, [r2, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800ce80:	0a0b      	lsrs	r3, r1, #8
 800ce82:	72d3      	strb	r3, [r2, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800ce84:	0c0b      	lsrs	r3, r1, #16
 800ce86:	7313      	strb	r3, [r2, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800ce88:	0e09      	lsrs	r1, r1, #24
 800ce8a:	7351      	strb	r1, [r2, #13]

    b0[14] = 0x00;
 800ce8c:	7390      	strb	r0, [r2, #14]

    b0[15] = msgLen & 0xFF;
 800ce8e:	f882 c00f 	strb.w	ip, [r2, #15]

    return LORAMAC_CRYPTO_SUCCESS;
}
 800ce92:	bc10      	pop	{r4}
 800ce94:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ce96:	200a      	movs	r0, #10
 800ce98:	e7fb      	b.n	800ce92 <PrepareB0+0x3e>
	...

0800ce9c <GetKeyAddrItem>:
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	2b01      	cmp	r3, #1
 800cea0:	d80e      	bhi.n	800cec0 <GetKeyAddrItem+0x24>
    {
        if( KeyAddrList[i].AddrID == addrID )
 800cea2:	469c      	mov	ip, r3
 800cea4:	4a07      	ldr	r2, [pc, #28]	; (800cec4 <GetKeyAddrItem+0x28>)
 800cea6:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 800ceaa:	4282      	cmp	r2, r0
 800ceac:	d002      	beq.n	800ceb4 <GetKeyAddrItem+0x18>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800ceae:	3301      	adds	r3, #1
 800ceb0:	b2db      	uxtb	r3, r3
 800ceb2:	e7f4      	b.n	800ce9e <GetKeyAddrItem+0x2>
        {
            *item = &( KeyAddrList[i] );
 800ceb4:	4b03      	ldr	r3, [pc, #12]	; (800cec4 <GetKeyAddrItem+0x28>)
 800ceb6:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 800ceba:	600b      	str	r3, [r1, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 800cebc:	2000      	movs	r0, #0
 800cebe:	4770      	bx	lr
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800cec0:	200c      	movs	r0, #12
}
 800cec2:	4770      	bx	lr
 800cec4:	2000010c 	.word	0x2000010c

0800cec8 <GetLastFcntDown>:
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
    if( lastDown == NULL )
 800cec8:	460b      	mov	r3, r1
 800ceca:	2900      	cmp	r1, #0
 800cecc:	d024      	beq.n	800cf18 <GetLastFcntDown+0x50>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 800cece:	3801      	subs	r0, #1
 800ced0:	2803      	cmp	r0, #3
 800ced2:	d823      	bhi.n	800cf1c <GetLastFcntDown+0x54>
 800ced4:	e8df f000 	tbb	[pc, r0]
 800ced8:	1a120a02 	.word	0x1a120a02
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 800cedc:	4a10      	ldr	r2, [pc, #64]	; (800cf20 <GetLastFcntDown+0x58>)
 800cede:	6812      	ldr	r2, [r2, #0]
 800cee0:	6911      	ldr	r1, [r2, #16]
 800cee2:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 800cee4:	6913      	ldr	r3, [r2, #16]
 800cee6:	6213      	str	r3, [r2, #32]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800cee8:	2000      	movs	r0, #0
            break;
 800ceea:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 800ceec:	4a0c      	ldr	r2, [pc, #48]	; (800cf20 <GetLastFcntDown+0x58>)
 800ceee:	6812      	ldr	r2, [r2, #0]
 800cef0:	6951      	ldr	r1, [r2, #20]
 800cef2:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 800cef4:	6953      	ldr	r3, [r2, #20]
 800cef6:	6213      	str	r3, [r2, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800cef8:	2000      	movs	r0, #0
            break;
 800cefa:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.FCntDown;
 800cefc:	4a08      	ldr	r2, [pc, #32]	; (800cf20 <GetLastFcntDown+0x58>)
 800cefe:	6812      	ldr	r2, [r2, #0]
 800cf00:	6991      	ldr	r1, [r2, #24]
 800cf02:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800cf04:	6993      	ldr	r3, [r2, #24]
 800cf06:	6213      	str	r3, [r2, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800cf08:	2000      	movs	r0, #0
            break;
 800cf0a:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800cf0c:	4a04      	ldr	r2, [pc, #16]	; (800cf20 <GetLastFcntDown+0x58>)
 800cf0e:	6812      	ldr	r2, [r2, #0]
 800cf10:	69d2      	ldr	r2, [r2, #28]
 800cf12:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800cf14:	2000      	movs	r0, #0
            break;
 800cf16:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800cf18:	200a      	movs	r0, #10
 800cf1a:	4770      	bx	lr
    switch( fCntID )
 800cf1c:	2005      	movs	r0, #5
}
 800cf1e:	4770      	bx	lr
 800cf20:	20000e30 	.word	0x20000e30

0800cf24 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 800cf24:	b510      	push	{r4, lr}
 800cf26:	b082      	sub	sp, #8
 800cf28:	460c      	mov	r4, r1
    uint32_t lastDown = 0;
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	9301      	str	r3, [sp, #4]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800cf2e:	a901      	add	r1, sp, #4
 800cf30:	f7ff ffca 	bl	800cec8 <GetLastFcntDown>
 800cf34:	b948      	cbnz	r0, 800cf4a <CheckFCntDown+0x26>
    {
        return false;
    }
    if( ( currentDown > lastDown ) ||
 800cf36:	9b01      	ldr	r3, [sp, #4]
 800cf38:	42a3      	cmp	r3, r4
 800cf3a:	d309      	bcc.n	800cf50 <CheckFCntDown+0x2c>
 800cf3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf40:	d001      	beq.n	800cf46 <CheckFCntDown+0x22>
    {
        return true;
    }
    else
    {
        return false;
 800cf42:	2000      	movs	r0, #0
 800cf44:	e002      	b.n	800cf4c <CheckFCntDown+0x28>
        return true;
 800cf46:	2001      	movs	r0, #1
 800cf48:	e000      	b.n	800cf4c <CheckFCntDown+0x28>
        return false;
 800cf4a:	2000      	movs	r0, #0
    }
}
 800cf4c:	b002      	add	sp, #8
 800cf4e:	bd10      	pop	{r4, pc}
        return true;
 800cf50:	2001      	movs	r0, #1
 800cf52:	e7fb      	b.n	800cf4c <CheckFCntDown+0x28>

0800cf54 <UpdateFCntDown>:
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
    switch( fCntID )
 800cf54:	3801      	subs	r0, #1
 800cf56:	2803      	cmp	r0, #3
 800cf58:	d812      	bhi.n	800cf80 <UpdateFCntDown+0x2c>
 800cf5a:	e8df f000 	tbb	[pc, r0]
 800cf5e:	0602      	.short	0x0602
 800cf60:	0e0a      	.short	0x0e0a
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 800cf62:	4b08      	ldr	r3, [pc, #32]	; (800cf84 <UpdateFCntDown+0x30>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	6119      	str	r1, [r3, #16]
            break;
 800cf68:	4770      	bx	lr
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 800cf6a:	4b06      	ldr	r3, [pc, #24]	; (800cf84 <UpdateFCntDown+0x30>)
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	6159      	str	r1, [r3, #20]
            break;
 800cf70:	4770      	bx	lr
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 800cf72:	4b04      	ldr	r3, [pc, #16]	; (800cf84 <UpdateFCntDown+0x30>)
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	6199      	str	r1, [r3, #24]
            break;
 800cf78:	4770      	bx	lr
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800cf7a:	4b02      	ldr	r3, [pc, #8]	; (800cf84 <UpdateFCntDown+0x30>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	61d9      	str	r1, [r3, #28]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
    }
}
 800cf80:	4770      	bx	lr
 800cf82:	bf00      	nop
 800cf84:	20000e30 	.word	0x20000e30

0800cf88 <ResetFCnts>:
/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
    CryptoNvm->FCntList.FCntUp = 0;
 800cf88:	4b0a      	ldr	r3, [pc, #40]	; (800cfb4 <ResetFCnts+0x2c>)
 800cf8a:	681a      	ldr	r2, [r3, #0]
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	60d3      	str	r3, [r2, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800cf90:	f04f 31ff 	mov.w	r1, #4294967295
 800cf94:	6111      	str	r1, [r2, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800cf96:	6151      	str	r1, [r2, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800cf98:	6191      	str	r1, [r2, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800cf9a:	6211      	str	r1, [r2, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	dd00      	ble.n	800cfa2 <ResetFCnts+0x1a>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
    }
}
 800cfa0:	4770      	bx	lr
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 800cfa2:	1d99      	adds	r1, r3, #6
 800cfa4:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800cfa8:	f04f 30ff 	mov.w	r0, #4294967295
 800cfac:	6048      	str	r0, [r1, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800cfae:	3301      	adds	r3, #1
 800cfb0:	e7f4      	b.n	800cf9c <ResetFCnts+0x14>
 800cfb2:	bf00      	nop
 800cfb4:	20000e30 	.word	0x20000e30

0800cfb8 <ComputeCmacB0>:
{
 800cfb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfbc:	b088      	sub	sp, #32
 800cfbe:	9e11      	ldr	r6, [sp, #68]	; 0x44
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800cfc0:	b1f0      	cbz	r0, 800d000 <ComputeCmacB0+0x48>
 800cfc2:	460c      	mov	r4, r1
 800cfc4:	4615      	mov	r5, r2
 800cfc6:	461a      	mov	r2, r3
 800cfc8:	4680      	mov	r8, r0
 800cfca:	b1de      	cbz	r6, 800d004 <ComputeCmacB0+0x4c>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800cfcc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800cfd0:	d81a      	bhi.n	800d008 <ComputeCmacB0+0x50>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800cfd2:	af04      	add	r7, sp, #16
 800cfd4:	9702      	str	r7, [sp, #8]
 800cfd6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cfd8:	9301      	str	r3, [sp, #4]
 800cfda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cfdc:	9300      	str	r3, [sp, #0]
 800cfde:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800cfe2:	4629      	mov	r1, r5
 800cfe4:	4620      	mov	r0, r4
 800cfe6:	f7ff ff35 	bl	800ce54 <PrepareB0>
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800cfea:	9600      	str	r6, [sp, #0]
 800cfec:	462b      	mov	r3, r5
 800cfee:	4622      	mov	r2, r4
 800cff0:	4641      	mov	r1, r8
 800cff2:	4638      	mov	r0, r7
 800cff4:	f003 fc15 	bl	8010822 <SecureElementComputeAesCmac>
 800cff8:	b940      	cbnz	r0, 800d00c <ComputeCmacB0+0x54>
}
 800cffa:	b008      	add	sp, #32
 800cffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d000:	200a      	movs	r0, #10
 800d002:	e7fa      	b.n	800cffa <ComputeCmacB0+0x42>
 800d004:	200a      	movs	r0, #10
 800d006:	e7f8      	b.n	800cffa <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800d008:	200e      	movs	r0, #14
 800d00a:	e7f6      	b.n	800cffa <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d00c:	200f      	movs	r0, #15
 800d00e:	e7f4      	b.n	800cffa <ComputeCmacB0+0x42>

0800d010 <DeriveSessionKey10x>:
{
 800d010:	b510      	push	{r4, lr}
 800d012:	b084      	sub	sp, #16
    uint8_t compBase[16] = { 0 };
 800d014:	2400      	movs	r4, #0
 800d016:	9400      	str	r4, [sp, #0]
 800d018:	9401      	str	r4, [sp, #4]
 800d01a:	9402      	str	r4, [sp, #8]
 800d01c:	9403      	str	r4, [sp, #12]
    switch( keyID )
 800d01e:	2802      	cmp	r0, #2
 800d020:	d003      	beq.n	800d02a <DeriveSessionKey10x+0x1a>
 800d022:	2803      	cmp	r0, #3
 800d024:	d025      	beq.n	800d072 <DeriveSessionKey10x+0x62>
 800d026:	200b      	movs	r0, #11
 800d028:	e021      	b.n	800d06e <DeriveSessionKey10x+0x5e>
            compBase[0] = 0x01;
 800d02a:	2401      	movs	r4, #1
 800d02c:	f88d 4000 	strb.w	r4, [sp]
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 800d030:	f88d 1001 	strb.w	r1, [sp, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800d034:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800d038:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 800d03c:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800d040:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 800d044:	f88d 2004 	strb.w	r2, [sp, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 800d048:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800d04c:	f88d 1005 	strb.w	r1, [sp, #5]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 800d050:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800d054:	f88d 2006 	strb.w	r2, [sp, #6]
    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 800d058:	f88d 3007 	strb.w	r3, [sp, #7]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 800d05c:	0a1b      	lsrs	r3, r3, #8
 800d05e:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800d062:	4602      	mov	r2, r0
 800d064:	2101      	movs	r1, #1
 800d066:	4668      	mov	r0, sp
 800d068:	f003 fc7a 	bl	8010960 <SecureElementDeriveAndStoreKey>
 800d06c:	b928      	cbnz	r0, 800d07a <DeriveSessionKey10x+0x6a>
}
 800d06e:	b004      	add	sp, #16
 800d070:	bd10      	pop	{r4, pc}
            compBase[0] = 0x02;
 800d072:	2402      	movs	r4, #2
 800d074:	f88d 4000 	strb.w	r4, [sp]
            break;
 800d078:	e7da      	b.n	800d030 <DeriveSessionKey10x+0x20>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d07a:	200f      	movs	r0, #15
 800d07c:	e7f7      	b.n	800d06e <DeriveSessionKey10x+0x5e>

0800d07e <PayloadEncrypt>:
{
 800d07e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d082:	b088      	sub	sp, #32
 800d084:	4690      	mov	r8, r2
 800d086:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    if( buffer == 0 )
 800d088:	2800      	cmp	r0, #0
 800d08a:	d052      	beq.n	800d132 <PayloadEncrypt+0xb4>
 800d08c:	460d      	mov	r5, r1
 800d08e:	4604      	mov	r4, r0
    uint8_t sBlock[16] = { 0 };
 800d090:	2600      	movs	r6, #0
 800d092:	9604      	str	r6, [sp, #16]
 800d094:	9605      	str	r6, [sp, #20]
 800d096:	9606      	str	r6, [sp, #24]
 800d098:	9607      	str	r6, [sp, #28]
    uint8_t aBlock[16] = { 0 };
 800d09a:	9600      	str	r6, [sp, #0]
 800d09c:	9601      	str	r6, [sp, #4]
 800d09e:	9602      	str	r6, [sp, #8]
 800d0a0:	9603      	str	r6, [sp, #12]
    aBlock[0] = 0x01;
 800d0a2:	2701      	movs	r7, #1
 800d0a4:	f88d 7000 	strb.w	r7, [sp]
    aBlock[5] = dir;
 800d0a8:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800d0ac:	f88d 1005 	strb.w	r1, [sp, #5]
    aBlock[6] = address & 0xFF;
 800d0b0:	f88d 3006 	strb.w	r3, [sp, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800d0b4:	0a19      	lsrs	r1, r3, #8
 800d0b6:	f88d 1007 	strb.w	r1, [sp, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800d0ba:	0c19      	lsrs	r1, r3, #16
 800d0bc:	f88d 1008 	strb.w	r1, [sp, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800d0c0:	0e1b      	lsrs	r3, r3, #24
 800d0c2:	f88d 3009 	strb.w	r3, [sp, #9]
    aBlock[10] = frameCounter & 0xFF;
 800d0c6:	f88d 200a 	strb.w	r2, [sp, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800d0ca:	0a13      	lsrs	r3, r2, #8
 800d0cc:	f88d 300b 	strb.w	r3, [sp, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800d0d0:	0c13      	lsrs	r3, r2, #16
 800d0d2:	f88d 300c 	strb.w	r3, [sp, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800d0d6:	0e12      	lsrs	r2, r2, #24
 800d0d8:	f88d 200d 	strb.w	r2, [sp, #13]
    while( size > 0 )
 800d0dc:	e014      	b.n	800d108 <PayloadEncrypt+0x8a>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800d0de:	18f2      	adds	r2, r6, r3
 800d0e0:	5ca0      	ldrb	r0, [r4, r2]
 800d0e2:	f103 0120 	add.w	r1, r3, #32
 800d0e6:	4469      	add	r1, sp
 800d0e8:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 800d0ec:	4048      	eors	r0, r1
 800d0ee:	54a0      	strb	r0, [r4, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800d0f0:	3301      	adds	r3, #1
 800d0f2:	b2db      	uxtb	r3, r3
 800d0f4:	462a      	mov	r2, r5
 800d0f6:	2d10      	cmp	r5, #16
 800d0f8:	bfa8      	it	ge
 800d0fa:	2210      	movge	r2, #16
 800d0fc:	4293      	cmp	r3, r2
 800d0fe:	dbee      	blt.n	800d0de <PayloadEncrypt+0x60>
        size -= 16;
 800d100:	3d10      	subs	r5, #16
 800d102:	b22d      	sxth	r5, r5
        bufferIndex += 16;
 800d104:	3610      	adds	r6, #16
 800d106:	b2f6      	uxtb	r6, r6
    while( size > 0 )
 800d108:	2d00      	cmp	r5, #0
 800d10a:	dd0e      	ble.n	800d12a <PayloadEncrypt+0xac>
        aBlock[15] = ctr & 0xFF;
 800d10c:	f88d 700f 	strb.w	r7, [sp, #15]
        ctr++;
 800d110:	3701      	adds	r7, #1
 800d112:	b2bf      	uxth	r7, r7
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800d114:	ab04      	add	r3, sp, #16
 800d116:	4642      	mov	r2, r8
 800d118:	2110      	movs	r1, #16
 800d11a:	4668      	mov	r0, sp
 800d11c:	f003 fba6 	bl	801086c <SecureElementAesEncrypt>
 800d120:	4603      	mov	r3, r0
 800d122:	2800      	cmp	r0, #0
 800d124:	d0e6      	beq.n	800d0f4 <PayloadEncrypt+0x76>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d126:	200f      	movs	r0, #15
 800d128:	e000      	b.n	800d12c <PayloadEncrypt+0xae>
    return LORAMAC_CRYPTO_SUCCESS;
 800d12a:	2000      	movs	r0, #0
}
 800d12c:	b008      	add	sp, #32
 800d12e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d132:	200a      	movs	r0, #10
 800d134:	e7fa      	b.n	800d12c <PayloadEncrypt+0xae>

0800d136 <VerifyCmacB0>:
    if( msg == 0 )
 800d136:	b370      	cbz	r0, 800d196 <VerifyCmacB0+0x60>
{
 800d138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d13c:	b0c8      	sub	sp, #288	; 0x120
 800d13e:	460c      	mov	r4, r1
 800d140:	4615      	mov	r5, r2
 800d142:	461e      	mov	r6, r3
 800d144:	4680      	mov	r8, r0
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800d146:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800d14a:	d826      	bhi.n	800d19a <VerifyCmacB0+0x64>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800d14c:	af04      	add	r7, sp, #16
 800d14e:	f44f 7288 	mov.w	r2, #272	; 0x110
 800d152:	2100      	movs	r1, #0
 800d154:	4638      	mov	r0, r7
 800d156:	f003 fce2 	bl	8010b1e <memset1>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800d15a:	9702      	str	r7, [sp, #8]
 800d15c:	9b50      	ldr	r3, [sp, #320]	; 0x140
 800d15e:	9301      	str	r3, [sp, #4]
 800d160:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 800d162:	9300      	str	r3, [sp, #0]
 800d164:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
 800d168:	4632      	mov	r2, r6
 800d16a:	4629      	mov	r1, r5
 800d16c:	4620      	mov	r0, r4
 800d16e:	f7ff fe71 	bl	800ce54 <PrepareB0>
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800d172:	4622      	mov	r2, r4
 800d174:	4641      	mov	r1, r8
 800d176:	a808      	add	r0, sp, #32
 800d178:	f003 fcb9 	bl	8010aee <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800d17c:	f104 0110 	add.w	r1, r4, #16
 800d180:	462b      	mov	r3, r5
 800d182:	9a51      	ldr	r2, [sp, #324]	; 0x144
 800d184:	b289      	uxth	r1, r1
 800d186:	4638      	mov	r0, r7
 800d188:	f003 fb5a 	bl	8010840 <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800d18c:	b130      	cbz	r0, 800d19c <VerifyCmacB0+0x66>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800d18e:	2801      	cmp	r0, #1
 800d190:	d004      	beq.n	800d19c <VerifyCmacB0+0x66>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d192:	200f      	movs	r0, #15
 800d194:	e002      	b.n	800d19c <VerifyCmacB0+0x66>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d196:	200a      	movs	r0, #10
}
 800d198:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800d19a:	200e      	movs	r0, #14
}
 800d19c:	b048      	add	sp, #288	; 0x120
 800d19e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800d1a4 <LoRaMacCryptoInit>:
/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
    if( nvm == NULL )
 800d1a4:	b188      	cbz	r0, 800d1ca <LoRaMacCryptoInit+0x26>
{
 800d1a6:	b510      	push	{r4, lr}
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 800d1a8:	4c09      	ldr	r4, [pc, #36]	; (800d1d0 <LoRaMacCryptoInit+0x2c>)
 800d1aa:	6020      	str	r0, [r4, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800d1ac:	2228      	movs	r2, #40	; 0x28
 800d1ae:	2100      	movs	r1, #0
 800d1b0:	f003 fcb5 	bl	8010b1e <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 800d1b4:	6823      	ldr	r3, [r4, #0]
 800d1b6:	2201      	movs	r2, #1
 800d1b8:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 800d1ba:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 800d1bc:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800d1be:	2400      	movs	r4, #0
 800d1c0:	701c      	strb	r4, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 800d1c2:	f7ff fee1 	bl	800cf88 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 800d1c6:	4620      	mov	r0, r4
}
 800d1c8:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
 800d1ca:	2009      	movs	r0, #9
}
 800d1cc:	4770      	bx	lr
 800d1ce:	bf00      	nop
 800d1d0:	20000e30 	.word	0x20000e30

0800d1d4 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoNvm->LrWanVersion = version;
 800d1d4:	4b02      	ldr	r3, [pc, #8]	; (800d1e0 <LoRaMacCryptoSetLrWanVersion+0xc>)
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
 800d1da:	2000      	movs	r0, #0
 800d1dc:	4770      	bx	lr
 800d1de:	bf00      	nop
 800d1e0:	20000e30 	.word	0x20000e30

0800d1e4 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
 800d1e4:	b130      	cbz	r0, 800d1f4 <LoRaMacCryptoGetFCntUp+0x10>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 800d1e6:	4b04      	ldr	r3, [pc, #16]	; (800d1f8 <LoRaMacCryptoGetFCntUp+0x14>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	68db      	ldr	r3, [r3, #12]
 800d1ec:	3301      	adds	r3, #1
 800d1ee:	6003      	str	r3, [r0, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800d1f0:	2000      	movs	r0, #0
 800d1f2:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d1f4:	200a      	movs	r0, #10
}
 800d1f6:	4770      	bx	lr
 800d1f8:	20000e30 	.word	0x20000e30

0800d1fc <LoRaMacCryptoGetFCntDown>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 800d1fc:	b570      	push	{r4, r5, r6, lr}
 800d1fe:	b082      	sub	sp, #8
 800d200:	4614      	mov	r4, r2
    uint32_t lastDown = 0;
 800d202:	2200      	movs	r2, #0
 800d204:	9201      	str	r2, [sp, #4]
    int32_t fCntDiff = 0;
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;

    if( currentDown == NULL )
 800d206:	b363      	cbz	r3, 800d262 <LoRaMacCryptoGetFCntDown+0x66>
 800d208:	460d      	mov	r5, r1
 800d20a:	461e      	mov	r6, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800d20c:	a901      	add	r1, sp, #4
 800d20e:	f7ff fe5b 	bl	800cec8 <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800d212:	b9b8      	cbnz	r0, 800d244 <LoRaMacCryptoGetFCntDown+0x48>
    {
        return cryptoStatus;
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 800d214:	9b01      	ldr	r3, [sp, #4]
 800d216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d21a:	d015      	beq.n	800d248 <LoRaMacCryptoGetFCntDown+0x4c>
        *currentDown = frameFcnt;
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 800d21c:	b29a      	uxth	r2, r3
 800d21e:	1aa2      	subs	r2, r4, r2

        if( fCntDiff > 0 )
 800d220:	2a00      	cmp	r2, #0
 800d222:	dd13      	ble.n	800d24c <LoRaMacCryptoGetFCntDown+0x50>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 800d224:	4413      	add	r3, r2
 800d226:	6033      	str	r3, [r6, #0]
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800d228:	4b10      	ldr	r3, [pc, #64]	; (800d26c <LoRaMacCryptoGetFCntDown+0x70>)
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	789a      	ldrb	r2, [r3, #2]
 800d22e:	b94a      	cbnz	r2, 800d244 <LoRaMacCryptoGetFCntDown+0x48>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 800d230:	6833      	ldr	r3, [r6, #0]
 800d232:	9901      	ldr	r1, [sp, #4]
 800d234:	1a5b      	subs	r3, r3, r1
 800d236:	eb61 0101 	sbc.w	r1, r1, r1
 800d23a:	42ab      	cmp	r3, r5
 800d23c:	f171 0300 	sbcs.w	r3, r1, #0
 800d240:	da11      	bge.n	800d266 <LoRaMacCryptoGetFCntDown+0x6a>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800d242:	4610      	mov	r0, r2
}
 800d244:	b002      	add	sp, #8
 800d246:	bd70      	pop	{r4, r5, r6, pc}
        *currentDown = frameFcnt;
 800d248:	6034      	str	r4, [r6, #0]
 800d24a:	e7ed      	b.n	800d228 <LoRaMacCryptoGetFCntDown+0x2c>
        else if( fCntDiff == 0 )
 800d24c:	b132      	cbz	r2, 800d25c <LoRaMacCryptoGetFCntDown+0x60>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800d24e:	0c1b      	lsrs	r3, r3, #16
 800d250:	041b      	lsls	r3, r3, #16
 800d252:	4423      	add	r3, r4
 800d254:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800d258:	6033      	str	r3, [r6, #0]
 800d25a:	e7e5      	b.n	800d228 <LoRaMacCryptoGetFCntDown+0x2c>
            *currentDown = lastDown;
 800d25c:	6033      	str	r3, [r6, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 800d25e:	2007      	movs	r0, #7
 800d260:	e7f0      	b.n	800d244 <LoRaMacCryptoGetFCntDown+0x48>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d262:	200a      	movs	r0, #10
 800d264:	e7ee      	b.n	800d244 <LoRaMacCryptoGetFCntDown+0x48>
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 800d266:	2008      	movs	r0, #8
 800d268:	e7ec      	b.n	800d244 <LoRaMacCryptoGetFCntDown+0x48>
 800d26a:	bf00      	nop
 800d26c:	20000e30 	.word	0x20000e30

0800d270 <LoRaMacCryptoSetMulticastReference>:
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
 800d270:	4601      	mov	r1, r0
 800d272:	b908      	cbnz	r0, 800d278 <LoRaMacCryptoSetMulticastReference+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d274:	200a      	movs	r0, #10
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800d276:	4770      	bx	lr
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d278:	2300      	movs	r3, #0
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	dd01      	ble.n	800d282 <LoRaMacCryptoSetMulticastReference+0x12>
    return LORAMAC_CRYPTO_SUCCESS;
 800d27e:	2000      	movs	r0, #0
 800d280:	4770      	bx	lr
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 800d282:	4a06      	ldr	r2, [pc, #24]	; (800d29c <LoRaMacCryptoSetMulticastReference+0x2c>)
 800d284:	6812      	ldr	r2, [r2, #0]
 800d286:	202c      	movs	r0, #44	; 0x2c
 800d288:	fb00 1003 	mla	r0, r0, r3, r1
 800d28c:	f103 0c06 	add.w	ip, r3, #6
 800d290:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 800d294:	3204      	adds	r2, #4
 800d296:	6202      	str	r2, [r0, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d298:	3301      	adds	r3, #1
 800d29a:	e7ee      	b.n	800d27a <LoRaMacCryptoSetMulticastReference+0xa>
 800d29c:	20000e30 	.word	0x20000e30

0800d2a0 <LoRaMacCryptoPrepareJoinRequest>:
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( macMsg == 0 )
 800d2a0:	b300      	cbz	r0, 800d2e4 <LoRaMacCryptoPrepareJoinRequest+0x44>
{
 800d2a2:	b510      	push	{r4, lr}
 800d2a4:	b084      	sub	sp, #16
 800d2a6:	4604      	mov	r4, r0
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	9303      	str	r3, [sp, #12]
    SecureElementRandomNumber( &devNonce );
 800d2ac:	a803      	add	r0, sp, #12
 800d2ae:	f003 fbbb 	bl	8010a28 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 800d2b2:	4b10      	ldr	r3, [pc, #64]	; (800d2f4 <LoRaMacCryptoPrepareJoinRequest+0x54>)
 800d2b4:	681a      	ldr	r2, [r3, #0]
 800d2b6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800d2ba:	8093      	strh	r3, [r2, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 800d2bc:	82e3      	strh	r3, [r4, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800d2be:	4620      	mov	r0, r4
 800d2c0:	f000 fa2f 	bl	800d722 <LoRaMacSerializerJoinRequest>
 800d2c4:	b980      	cbnz	r0, 800d2e8 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800d2c6:	4623      	mov	r3, r4
 800d2c8:	f853 1b18 	ldr.w	r1, [r3], #24
 800d2cc:	9300      	str	r3, [sp, #0]
 800d2ce:	2301      	movs	r3, #1
 800d2d0:	2213      	movs	r2, #19
 800d2d2:	f003 faa6 	bl	8010822 <SecureElementComputeAesCmac>
 800d2d6:	b950      	cbnz	r0, 800d2ee <LoRaMacCryptoPrepareJoinRequest+0x4e>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800d2d8:	4620      	mov	r0, r4
 800d2da:	f000 fa22 	bl	800d722 <LoRaMacSerializerJoinRequest>
 800d2de:	b120      	cbz	r0, 800d2ea <LoRaMacCryptoPrepareJoinRequest+0x4a>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800d2e0:	2011      	movs	r0, #17
 800d2e2:	e002      	b.n	800d2ea <LoRaMacCryptoPrepareJoinRequest+0x4a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d2e4:	200a      	movs	r0, #10
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800d2e6:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800d2e8:	2011      	movs	r0, #17
}
 800d2ea:	b004      	add	sp, #16
 800d2ec:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d2ee:	200f      	movs	r0, #15
 800d2f0:	e7fb      	b.n	800d2ea <LoRaMacCryptoPrepareJoinRequest+0x4a>
 800d2f2:	bf00      	nop
 800d2f4:	20000e30 	.word	0x20000e30

0800d2f8 <LoRaMacCryptoSecureMessage>:
LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d036      	beq.n	800d36a <LoRaMacCryptoSecureMessage+0x72>
{
 800d2fc:	b530      	push	{r4, r5, lr}
 800d2fe:	b085      	sub	sp, #20
 800d300:	4604      	mov	r4, r0
 800d302:	461d      	mov	r5, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800d304:	4b1d      	ldr	r3, [pc, #116]	; (800d37c <LoRaMacCryptoSecureMessage+0x84>)
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	68db      	ldr	r3, [r3, #12]
 800d30a:	4283      	cmp	r3, r0
 800d30c:	d82f      	bhi.n	800d36e <LoRaMacCryptoSecureMessage+0x76>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 800d30e:	f895 2020 	ldrb.w	r2, [r5, #32]
 800d312:	b342      	cbz	r2, 800d366 <LoRaMacCryptoSecureMessage+0x6e>
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 800d314:	2203      	movs	r2, #3
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 800d316:	42a3      	cmp	r3, r4
 800d318:	d209      	bcs.n	800d32e <LoRaMacCryptoSecureMessage+0x36>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800d31a:	9401      	str	r4, [sp, #4]
 800d31c:	2300      	movs	r3, #0
 800d31e:	9300      	str	r3, [sp, #0]
 800d320:	68ab      	ldr	r3, [r5, #8]
 800d322:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800d326:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800d328:	f7ff fea9 	bl	800d07e <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d32c:	bb10      	cbnz	r0, 800d374 <LoRaMacCryptoSecureMessage+0x7c>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800d32e:	4628      	mov	r0, r5
 800d330:	f000 fa2d 	bl	800d78e <LoRaMacSerializerData>
 800d334:	b9e8      	cbnz	r0, 800d372 <LoRaMacCryptoSecureMessage+0x7a>
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800d336:	7929      	ldrb	r1, [r5, #4]
 800d338:	3904      	subs	r1, #4
 800d33a:	462b      	mov	r3, r5
 800d33c:	f853 0b2c 	ldr.w	r0, [r3], #44
 800d340:	9303      	str	r3, [sp, #12]
 800d342:	9402      	str	r4, [sp, #8]
 800d344:	68ab      	ldr	r3, [r5, #8]
 800d346:	9301      	str	r3, [sp, #4]
 800d348:	2300      	movs	r3, #0
 800d34a:	9300      	str	r3, [sp, #0]
 800d34c:	2202      	movs	r2, #2
 800d34e:	b289      	uxth	r1, r1
 800d350:	f7ff fe32 	bl	800cfb8 <ComputeCmacB0>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d354:	b970      	cbnz	r0, 800d374 <LoRaMacCryptoSecureMessage+0x7c>
            return retval;
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800d356:	4628      	mov	r0, r5
 800d358:	f000 fa19 	bl	800d78e <LoRaMacSerializerData>
 800d35c:	b960      	cbnz	r0, 800d378 <LoRaMacCryptoSecureMessage+0x80>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 800d35e:	4b07      	ldr	r3, [pc, #28]	; (800d37c <LoRaMacCryptoSecureMessage+0x84>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	60dc      	str	r4, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 800d364:	e006      	b.n	800d374 <LoRaMacCryptoSecureMessage+0x7c>
        payloadDecryptionKeyID = NWK_S_KEY;
 800d366:	2202      	movs	r2, #2
 800d368:	e7d5      	b.n	800d316 <LoRaMacCryptoSecureMessage+0x1e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d36a:	200a      	movs	r0, #10
}
 800d36c:	4770      	bx	lr
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800d36e:	2006      	movs	r0, #6
 800d370:	e000      	b.n	800d374 <LoRaMacCryptoSecureMessage+0x7c>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800d372:	2011      	movs	r0, #17
}
 800d374:	b005      	add	sp, #20
 800d376:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800d378:	2011      	movs	r0, #17
 800d37a:	e7fb      	b.n	800d374 <LoRaMacCryptoSecureMessage+0x7c>
 800d37c:	20000e30 	.word	0x20000e30

0800d380 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 800d380:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d384:	b087      	sub	sp, #28
 800d386:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    if( macMsg == 0 )
 800d388:	2e00      	cmp	r6, #0
 800d38a:	d049      	beq.n	800d420 <LoRaMacCryptoUnsecureMessage+0xa0>
 800d38c:	4605      	mov	r5, r0
 800d38e:	4688      	mov	r8, r1
 800d390:	4617      	mov	r7, r2
 800d392:	461c      	mov	r4, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 800d394:	4619      	mov	r1, r3
 800d396:	4610      	mov	r0, r2
 800d398:	f7ff fdc4 	bl	800cf24 <CheckFCntDown>
 800d39c:	2800      	cmp	r0, #0
 800d39e:	d041      	beq.n	800d424 <LoRaMacCryptoUnsecureMessage+0xa4>
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800d3a0:	4630      	mov	r0, r6
 800d3a2:	f000 f95f 	bl	800d664 <LoRaMacParserData>
 800d3a6:	2800      	cmp	r0, #0
 800d3a8:	d141      	bne.n	800d42e <LoRaMacCryptoUnsecureMessage+0xae>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 800d3aa:	a905      	add	r1, sp, #20
 800d3ac:	4628      	mov	r0, r5
 800d3ae:	f7ff fd75 	bl	800ce9c <GetKeyAddrItem>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d3b2:	4605      	mov	r5, r0
 800d3b4:	2800      	cmp	r0, #0
 800d3b6:	d136      	bne.n	800d426 <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 800d3b8:	9b05      	ldr	r3, [sp, #20]
 800d3ba:	f893 9001 	ldrb.w	r9, [r3, #1]
    micComputationKeyID = curItem->NwkSkey;
 800d3be:	789a      	ldrb	r2, [r3, #2]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 800d3c0:	68b3      	ldr	r3, [r6, #8]
 800d3c2:	4543      	cmp	r3, r8
 800d3c4:	d135      	bne.n	800d432 <LoRaMacCryptoUnsecureMessage+0xb2>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800d3c6:	7b33      	ldrb	r3, [r6, #12]
 800d3c8:	f3c3 1340 	ubfx	r3, r3, #5, #1
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800d3cc:	491a      	ldr	r1, [pc, #104]	; (800d438 <LoRaMacCryptoUnsecureMessage+0xb8>)
 800d3ce:	6809      	ldr	r1, [r1, #0]
 800d3d0:	7889      	ldrb	r1, [r1, #2]
 800d3d2:	b901      	cbnz	r1, 800d3d6 <LoRaMacCryptoUnsecureMessage+0x56>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 800d3d4:	2300      	movs	r3, #0
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800d3d6:	7931      	ldrb	r1, [r6, #4]
 800d3d8:	3904      	subs	r1, #4
 800d3da:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800d3dc:	9003      	str	r0, [sp, #12]
 800d3de:	9402      	str	r4, [sp, #8]
 800d3e0:	f8cd 8004 	str.w	r8, [sp, #4]
 800d3e4:	2001      	movs	r0, #1
 800d3e6:	9000      	str	r0, [sp, #0]
 800d3e8:	b289      	uxth	r1, r1
 800d3ea:	6830      	ldr	r0, [r6, #0]
 800d3ec:	f7ff fea3 	bl	800d136 <VerifyCmacB0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d3f0:	4605      	mov	r5, r0
 800d3f2:	b9c0      	cbnz	r0, 800d426 <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 800d3f4:	f896 3020 	ldrb.w	r3, [r6, #32]
 800d3f8:	b90b      	cbnz	r3, 800d3fe <LoRaMacCryptoUnsecureMessage+0x7e>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 800d3fa:	f04f 0902 	mov.w	r9, #2
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800d3fe:	9401      	str	r4, [sp, #4]
 800d400:	2301      	movs	r3, #1
 800d402:	9300      	str	r3, [sp, #0]
 800d404:	4643      	mov	r3, r8
 800d406:	464a      	mov	r2, r9
 800d408:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800d40c:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800d40e:	f7ff fe36 	bl	800d07e <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d412:	4605      	mov	r5, r0
 800d414:	b938      	cbnz	r0, 800d426 <LoRaMacCryptoUnsecureMessage+0xa6>
            }
        }
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 800d416:	4621      	mov	r1, r4
 800d418:	4638      	mov	r0, r7
 800d41a:	f7ff fd9b 	bl	800cf54 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 800d41e:	e002      	b.n	800d426 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d420:	250a      	movs	r5, #10
 800d422:	e000      	b.n	800d426 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800d424:	2506      	movs	r5, #6
}
 800d426:	4628      	mov	r0, r5
 800d428:	b007      	add	sp, #28
 800d42a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800d42e:	2510      	movs	r5, #16
 800d430:	e7f9      	b.n	800d426 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800d432:	2502      	movs	r5, #2
 800d434:	e7f7      	b.n	800d426 <LoRaMacCryptoUnsecureMessage+0xa6>
 800d436:	bf00      	nop
 800d438:	20000e30 	.word	0x20000e30

0800d43c <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 800d43c:	b9b1      	cbnz	r1, 800d46c <LoRaMacCryptoDeriveMcRootKey+0x30>
{
 800d43e:	b500      	push	{lr}
 800d440:	b085      	sub	sp, #20
 800d442:	468c      	mov	ip, r1
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 800d444:	2300      	movs	r3, #0
 800d446:	9300      	str	r3, [sp, #0]
 800d448:	9301      	str	r3, [sp, #4]
 800d44a:	9302      	str	r3, [sp, #8]
 800d44c:	9303      	str	r3, [sp, #12]

    if( versionMinor == 1 )
 800d44e:	2801      	cmp	r0, #1
 800d450:	d008      	beq.n	800d464 <LoRaMacCryptoDeriveMcRootKey+0x28>
    {
        compBase[0] = 0x20;
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 800d452:	2204      	movs	r2, #4
 800d454:	4661      	mov	r1, ip
 800d456:	4668      	mov	r0, sp
 800d458:	f003 fa82 	bl	8010960 <SecureElementDeriveAndStoreKey>
 800d45c:	b940      	cbnz	r0, 800d470 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800d45e:	b005      	add	sp, #20
 800d460:	f85d fb04 	ldr.w	pc, [sp], #4
        compBase[0] = 0x20;
 800d464:	2320      	movs	r3, #32
 800d466:	f88d 3000 	strb.w	r3, [sp]
 800d46a:	e7f2      	b.n	800d452 <LoRaMacCryptoDeriveMcRootKey+0x16>
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800d46c:	200b      	movs	r0, #11
}
 800d46e:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d470:	200f      	movs	r0, #15
 800d472:	e7f4      	b.n	800d45e <LoRaMacCryptoDeriveMcRootKey+0x22>

0800d474 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 800d474:	2804      	cmp	r0, #4
 800d476:	d001      	beq.n	800d47c <LoRaMacCryptoDeriveMcKEKey+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800d478:	200b      	movs	r0, #11
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800d47a:	4770      	bx	lr
{
 800d47c:	b500      	push	{lr}
 800d47e:	b085      	sub	sp, #20
    uint8_t compBase[16] = { 0 };
 800d480:	2300      	movs	r3, #0
 800d482:	9300      	str	r3, [sp, #0]
 800d484:	9301      	str	r3, [sp, #4]
 800d486:	9302      	str	r3, [sp, #8]
 800d488:	9303      	str	r3, [sp, #12]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 800d48a:	227f      	movs	r2, #127	; 0x7f
 800d48c:	4601      	mov	r1, r0
 800d48e:	4668      	mov	r0, sp
 800d490:	f003 fa66 	bl	8010960 <SecureElementDeriveAndStoreKey>
 800d494:	b910      	cbnz	r0, 800d49c <LoRaMacCryptoDeriveMcKEKey+0x28>
}
 800d496:	b005      	add	sp, #20
 800d498:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d49c:	200f      	movs	r0, #15
 800d49e:	e7fa      	b.n	800d496 <LoRaMacCryptoDeriveMcKEKey+0x22>

0800d4a0 <LoRaMacCryptoSetKey>:
{
 800d4a0:	b510      	push	{r4, lr}
 800d4a2:	4604      	mov	r4, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800d4a4:	f003 fa1a 	bl	80108dc <SecureElementSetKey>
 800d4a8:	b978      	cbnz	r0, 800d4ca <LoRaMacCryptoSetKey+0x2a>
    if( keyID == APP_KEY )
 800d4aa:	b104      	cbz	r4, 800d4ae <LoRaMacCryptoSetKey+0xe>
}
 800d4ac:	bd10      	pop	{r4, pc}
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 800d4ae:	4b09      	ldr	r3, [pc, #36]	; (800d4d4 <LoRaMacCryptoSetKey+0x34>)
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	4621      	mov	r1, r4
 800d4b4:	7898      	ldrb	r0, [r3, #2]
 800d4b6:	f7ff ffc1 	bl	800d43c <LoRaMacCryptoDeriveMcRootKey>
 800d4ba:	b940      	cbnz	r0, 800d4ce <LoRaMacCryptoSetKey+0x2e>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800d4bc:	2004      	movs	r0, #4
 800d4be:	f7ff ffd9 	bl	800d474 <LoRaMacCryptoDeriveMcKEKey>
 800d4c2:	2800      	cmp	r0, #0
 800d4c4:	d0f2      	beq.n	800d4ac <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d4c6:	200f      	movs	r0, #15
 800d4c8:	e7f0      	b.n	800d4ac <LoRaMacCryptoSetKey+0xc>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d4ca:	200f      	movs	r0, #15
 800d4cc:	e7ee      	b.n	800d4ac <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d4ce:	200f      	movs	r0, #15
 800d4d0:	e7ec      	b.n	800d4ac <LoRaMacCryptoSetKey+0xc>
 800d4d2:	bf00      	nop
 800d4d4:	20000e30 	.word	0x20000e30

0800d4d8 <LoRaMacCryptoHandleJoinAccept>:
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800d4d8:	2a00      	cmp	r2, #0
 800d4da:	d064      	beq.n	800d5a6 <LoRaMacCryptoHandleJoinAccept+0xce>
{
 800d4dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4de:	b08f      	sub	sp, #60	; 0x3c
 800d4e0:	4607      	mov	r7, r0
 800d4e2:	460d      	mov	r5, r1
 800d4e4:	4614      	mov	r4, r2
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800d4e6:	2900      	cmp	r1, #0
 800d4e8:	d05f      	beq.n	800d5aa <LoRaMacCryptoHandleJoinAccept+0xd2>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800d4ea:	2600      	movs	r6, #0
 800d4ec:	9605      	str	r6, [sp, #20]
 800d4ee:	221d      	movs	r2, #29
 800d4f0:	4631      	mov	r1, r6
 800d4f2:	a806      	add	r0, sp, #24
 800d4f4:	f005 ffa0 	bl	8013438 <memset>
    uint8_t versionMinor         = 0;
 800d4f8:	f88d 6013 	strb.w	r6, [sp, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 800d4fc:	4b2f      	ldr	r3, [pc, #188]	; (800d5bc <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	889e      	ldrh	r6, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800d502:	f10d 0313 	add.w	r3, sp, #19
 800d506:	9302      	str	r3, [sp, #8]
 800d508:	ab05      	add	r3, sp, #20
 800d50a:	9301      	str	r3, [sp, #4]
 800d50c:	7923      	ldrb	r3, [r4, #4]
 800d50e:	9300      	str	r3, [sp, #0]
 800d510:	6823      	ldr	r3, [r4, #0]
 800d512:	4632      	mov	r2, r6
 800d514:	4629      	mov	r1, r5
 800d516:	4638      	mov	r0, r7
 800d518:	f003 fa42 	bl	80109a0 <SecureElementProcessJoinAccept>
 800d51c:	2800      	cmp	r0, #0
 800d51e:	d146      	bne.n	800d5ae <LoRaMacCryptoHandleJoinAccept+0xd6>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 800d520:	7922      	ldrb	r2, [r4, #4]
 800d522:	a905      	add	r1, sp, #20
 800d524:	6820      	ldr	r0, [r4, #0]
 800d526:	f003 fae2 	bl	8010aee <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800d52a:	4620      	mov	r0, r4
 800d52c:	f000 f848 	bl	800d5c0 <LoRaMacParserJoinAccept>
 800d530:	2800      	cmp	r0, #0
 800d532:	d13f      	bne.n	800d5b4 <LoRaMacCryptoHandleJoinAccept+0xdc>
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 800d534:	79a5      	ldrb	r5, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 800d536:	79e3      	ldrb	r3, [r4, #7]
 800d538:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800d53c:	7a23      	ldrb	r3, [r4, #8]
 800d53e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 800d542:	4b1e      	ldr	r3, [pc, #120]	; (800d5bc <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	689a      	ldr	r2, [r3, #8]
 800d548:	42aa      	cmp	r2, r5
 800d54a:	d035      	beq.n	800d5b8 <LoRaMacCryptoHandleJoinAccept+0xe0>
        CryptoNvm->JoinNonce = currentJoinNonce;
 800d54c:	609d      	str	r5, [r3, #8]
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 800d54e:	2100      	movs	r1, #0
 800d550:	f89d 0013 	ldrb.w	r0, [sp, #19]
 800d554:	f7ff ff72 	bl	800d43c <LoRaMacCryptoDeriveMcRootKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d558:	bb50      	cbnz	r0, 800d5b0 <LoRaMacCryptoHandleJoinAccept+0xd8>
    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 800d55a:	2004      	movs	r0, #4
 800d55c:	f7ff ff8a 	bl	800d474 <LoRaMacCryptoDeriveMcKEKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d560:	bb30      	cbnz	r0, 800d5b0 <LoRaMacCryptoHandleJoinAccept+0xd8>
        netID = ( uint32_t )macMsg->NetID[0];
 800d562:	7a63      	ldrb	r3, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800d564:	7aa2      	ldrb	r2, [r4, #10]
 800d566:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800d56a:	7ae4      	ldrb	r4, [r4, #11]
 800d56c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 800d570:	4633      	mov	r3, r6
 800d572:	4622      	mov	r2, r4
 800d574:	4629      	mov	r1, r5
 800d576:	2003      	movs	r0, #3
 800d578:	f7ff fd4a 	bl	800d010 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d57c:	b9c0      	cbnz	r0, 800d5b0 <LoRaMacCryptoHandleJoinAccept+0xd8>
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 800d57e:	4633      	mov	r3, r6
 800d580:	4622      	mov	r2, r4
 800d582:	4629      	mov	r1, r5
 800d584:	2002      	movs	r0, #2
 800d586:	f7ff fd43 	bl	800d010 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d58a:	b988      	cbnz	r0, 800d5b0 <LoRaMacCryptoHandleJoinAccept+0xd8>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 800d58c:	4b0b      	ldr	r3, [pc, #44]	; (800d5bc <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800d594:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntUp = 0;
 800d596:	2200      	movs	r2, #0
 800d598:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800d59a:	f04f 32ff 	mov.w	r2, #4294967295
 800d59e:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800d5a0:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800d5a2:	615a      	str	r2, [r3, #20]
    return LORAMAC_CRYPTO_SUCCESS;
 800d5a4:	e004      	b.n	800d5b0 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d5a6:	200a      	movs	r0, #10
}
 800d5a8:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d5aa:	200a      	movs	r0, #10
 800d5ac:	e000      	b.n	800d5b0 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d5ae:	200f      	movs	r0, #15
}
 800d5b0:	b00f      	add	sp, #60	; 0x3c
 800d5b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800d5b4:	2010      	movs	r0, #16
 800d5b6:	e7fb      	b.n	800d5b0 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800d5b8:	2003      	movs	r0, #3
 800d5ba:	e7f9      	b.n	800d5b0 <LoRaMacCryptoHandleJoinAccept+0xd8>
 800d5bc:	20000e30 	.word	0x20000e30

0800d5c0 <LoRaMacParserJoinAccept>:
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800d5c0:	2800      	cmp	r0, #0
 800d5c2:	d049      	beq.n	800d658 <LoRaMacParserJoinAccept+0x98>
{
 800d5c4:	b510      	push	{r4, lr}
 800d5c6:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800d5c8:	6801      	ldr	r1, [r0, #0]
 800d5ca:	2900      	cmp	r1, #0
 800d5cc:	d046      	beq.n	800d65c <LoRaMacParserJoinAccept+0x9c>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800d5ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d5d2:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800d5d4:	2203      	movs	r2, #3
 800d5d6:	3006      	adds	r0, #6
 800d5d8:	f003 fa89 	bl	8010aee <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800d5dc:	4620      	mov	r0, r4
 800d5de:	f850 1b09 	ldr.w	r1, [r0], #9
 800d5e2:	2203      	movs	r2, #3
 800d5e4:	3104      	adds	r1, #4
 800d5e6:	f003 fa82 	bl	8010aee <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800d5ea:	6821      	ldr	r1, [r4, #0]
 800d5ec:	79cb      	ldrb	r3, [r1, #7]
 800d5ee:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800d5f0:	7a0a      	ldrb	r2, [r1, #8]
 800d5f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d5f6:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800d5f8:	7a4a      	ldrb	r2, [r1, #9]
 800d5fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d5fe:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800d600:	7a8a      	ldrb	r2, [r1, #10]
 800d602:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d606:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800d608:	7acb      	ldrb	r3, [r1, #11]
 800d60a:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800d60c:	7b0b      	ldrb	r3, [r1, #12]
 800d60e:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 800d610:	7923      	ldrb	r3, [r4, #4]
 800d612:	2b21      	cmp	r3, #33	; 0x21
 800d614:	d018      	beq.n	800d648 <LoRaMacParserJoinAccept+0x88>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800d616:	2b11      	cmp	r3, #17
 800d618:	dc22      	bgt.n	800d660 <LoRaMacParserJoinAccept+0xa0>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800d61a:	220d      	movs	r2, #13
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800d61c:	6821      	ldr	r1, [r4, #0]
 800d61e:	f102 0c01 	add.w	ip, r2, #1
 800d622:	5c8b      	ldrb	r3, [r1, r2]
 800d624:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800d626:	1c90      	adds	r0, r2, #2
 800d628:	f811 c00c 	ldrb.w	ip, [r1, ip]
 800d62c:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800d630:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800d632:	3203      	adds	r2, #3
 800d634:	5c08      	ldrb	r0, [r1, r0]
 800d636:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d63a:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800d63c:	5c8a      	ldrb	r2, [r1, r2]
 800d63e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d642:	6263      	str	r3, [r4, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 800d644:	2000      	movs	r0, #0
}
 800d646:	bd10      	pop	{r4, pc}
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 800d648:	2210      	movs	r2, #16
 800d64a:	310d      	adds	r1, #13
 800d64c:	f104 0012 	add.w	r0, r4, #18
 800d650:	f003 fa4d 	bl	8010aee <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 800d654:	221d      	movs	r2, #29
 800d656:	e7e1      	b.n	800d61c <LoRaMacParserJoinAccept+0x5c>
        return LORAMAC_PARSER_ERROR_NPE;
 800d658:	2002      	movs	r0, #2
}
 800d65a:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800d65c:	2002      	movs	r0, #2
 800d65e:	e7f2      	b.n	800d646 <LoRaMacParserJoinAccept+0x86>
        return LORAMAC_PARSER_FAIL;
 800d660:	2001      	movs	r0, #1
 800d662:	e7f0      	b.n	800d646 <LoRaMacParserJoinAccept+0x86>

0800d664 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800d664:	2800      	cmp	r0, #0
 800d666:	d058      	beq.n	800d71a <LoRaMacParserData+0xb6>
{
 800d668:	b510      	push	{r4, lr}
 800d66a:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800d66c:	6801      	ldr	r1, [r0, #0]
 800d66e:	2900      	cmp	r1, #0
 800d670:	d055      	beq.n	800d71e <LoRaMacParserData+0xba>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800d672:	780b      	ldrb	r3, [r1, #0]
 800d674:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800d676:	784b      	ldrb	r3, [r1, #1]
 800d678:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800d67a:	788a      	ldrb	r2, [r1, #2]
 800d67c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d680:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800d682:	78ca      	ldrb	r2, [r1, #3]
 800d684:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d688:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800d68a:	790a      	ldrb	r2, [r1, #4]
 800d68c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d690:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800d692:	794b      	ldrb	r3, [r1, #5]
 800d694:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800d696:	798b      	ldrb	r3, [r1, #6]
 800d698:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800d69a:	79ca      	ldrb	r2, [r1, #7]
 800d69c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d6a0:	81c3      	strh	r3, [r0, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800d6a2:	7b02      	ldrb	r2, [r0, #12]
 800d6a4:	f002 020f 	and.w	r2, r2, #15
 800d6a8:	3108      	adds	r1, #8
 800d6aa:	3010      	adds	r0, #16
 800d6ac:	f003 fa1f 	bl	8010aee <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800d6b0:	7b23      	ldrb	r3, [r4, #12]
 800d6b2:	f003 030f 	and.w	r3, r3, #15
 800d6b6:	f103 0008 	add.w	r0, r3, #8
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 800d6c0:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800d6c4:	7922      	ldrb	r2, [r4, #4]
 800d6c6:	1a11      	subs	r1, r2, r0
 800d6c8:	2904      	cmp	r1, #4
 800d6ca:	dc16      	bgt.n	800d6fa <LoRaMacParserData+0x96>
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800d6cc:	6822      	ldr	r2, [r4, #0]
 800d6ce:	7923      	ldrb	r3, [r4, #4]
 800d6d0:	441a      	add	r2, r3
 800d6d2:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 800d6d6:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800d6d8:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 800d6dc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800d6e0:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800d6e2:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800d6e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800d6ea:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800d6ec:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800d6f0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d6f4:	62e3      	str	r3, [r4, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 800d6f6:	2000      	movs	r0, #0
}
 800d6f8:	bd10      	pop	{r4, pc}
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800d6fa:	6821      	ldr	r1, [r4, #0]
 800d6fc:	3309      	adds	r3, #9
 800d6fe:	5c08      	ldrb	r0, [r1, r0]
 800d700:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800d704:	1ad2      	subs	r2, r2, r3
 800d706:	b2d2      	uxtb	r2, r2
 800d708:	3a04      	subs	r2, #4
 800d70a:	b2d2      	uxtb	r2, r2
 800d70c:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800d710:	4419      	add	r1, r3
 800d712:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d714:	f003 f9eb 	bl	8010aee <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 800d718:	e7d8      	b.n	800d6cc <LoRaMacParserData+0x68>
        return LORAMAC_PARSER_ERROR_NPE;
 800d71a:	2002      	movs	r0, #2
}
 800d71c:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800d71e:	2002      	movs	r0, #2
 800d720:	e7ea      	b.n	800d6f8 <LoRaMacParserData+0x94>

0800d722 <LoRaMacSerializerJoinRequest>:
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800d722:	b370      	cbz	r0, 800d782 <LoRaMacSerializerJoinRequest+0x60>
{
 800d724:	b510      	push	{r4, lr}
 800d726:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800d728:	6803      	ldr	r3, [r0, #0]
 800d72a:	b363      	cbz	r3, 800d786 <LoRaMacSerializerJoinRequest+0x64>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800d72c:	7902      	ldrb	r2, [r0, #4]
 800d72e:	2a16      	cmp	r2, #22
 800d730:	d92b      	bls.n	800d78a <LoRaMacSerializerJoinRequest+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800d732:	7942      	ldrb	r2, [r0, #5]
 800d734:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800d736:	4601      	mov	r1, r0
 800d738:	f851 0b06 	ldr.w	r0, [r1], #6
 800d73c:	2208      	movs	r2, #8
 800d73e:	3001      	adds	r0, #1
 800d740:	f003 f9e0 	bl	8010b04 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800d744:	4621      	mov	r1, r4
 800d746:	f851 0b0e 	ldr.w	r0, [r1], #14
 800d74a:	2208      	movs	r2, #8
 800d74c:	3009      	adds	r0, #9
 800d74e:	f003 f9d9 	bl	8010b04 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800d752:	8ae2      	ldrh	r2, [r4, #22]
 800d754:	6823      	ldr	r3, [r4, #0]
 800d756:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800d758:	8ae3      	ldrh	r3, [r4, #22]
 800d75a:	6822      	ldr	r2, [r4, #0]
 800d75c:	0a1b      	lsrs	r3, r3, #8
 800d75e:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800d760:	69a2      	ldr	r2, [r4, #24]
 800d762:	6823      	ldr	r3, [r4, #0]
 800d764:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800d766:	69a3      	ldr	r3, [r4, #24]
 800d768:	0a1b      	lsrs	r3, r3, #8
 800d76a:	6822      	ldr	r2, [r4, #0]
 800d76c:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800d76e:	8b62      	ldrh	r2, [r4, #26]
 800d770:	6823      	ldr	r3, [r4, #0]
 800d772:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800d774:	7ee2      	ldrb	r2, [r4, #27]
 800d776:	6823      	ldr	r3, [r4, #0]
 800d778:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 800d77a:	2317      	movs	r3, #23
 800d77c:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800d77e:	2000      	movs	r0, #0
}
 800d780:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800d782:	2001      	movs	r0, #1
}
 800d784:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800d786:	2001      	movs	r0, #1
 800d788:	e7fa      	b.n	800d780 <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800d78a:	2002      	movs	r0, #2
 800d78c:	e7f8      	b.n	800d780 <LoRaMacSerializerJoinRequest+0x5e>

0800d78e <LoRaMacSerializerData>:
    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800d78e:	2800      	cmp	r0, #0
 800d790:	d066      	beq.n	800d860 <LoRaMacSerializerData+0xd2>
{
 800d792:	b538      	push	{r3, r4, r5, lr}
 800d794:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800d796:	6801      	ldr	r1, [r0, #0]
 800d798:	2900      	cmp	r1, #0
 800d79a:	d063      	beq.n	800d864 <LoRaMacSerializerData+0xd6>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800d79c:	7b02      	ldrb	r2, [r0, #12]
 800d79e:	f002 020f 	and.w	r2, r2, #15
 800d7a2:	f102 0008 	add.w	r0, r2, #8

    if( macMsg->FRMPayloadSize > 0 )
 800d7a6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800d7aa:	b10b      	cbz	r3, 800d7b0 <LoRaMacSerializerData+0x22>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 800d7ac:	f102 0009 	add.w	r0, r2, #9
    }

    computedBufSize += macMsg->FRMPayloadSize;
 800d7b0:	4403      	add	r3, r0
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800d7b2:	3304      	adds	r3, #4
 800d7b4:	b29b      	uxth	r3, r3

    if( macMsg->BufSize < computedBufSize )
 800d7b6:	7922      	ldrb	r2, [r4, #4]
 800d7b8:	429a      	cmp	r2, r3
 800d7ba:	d355      	bcc.n	800d868 <LoRaMacSerializerData+0xda>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800d7bc:	7963      	ldrb	r3, [r4, #5]
 800d7be:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800d7c0:	68a2      	ldr	r2, [r4, #8]
 800d7c2:	6823      	ldr	r3, [r4, #0]
 800d7c4:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800d7c6:	68a3      	ldr	r3, [r4, #8]
 800d7c8:	0a1b      	lsrs	r3, r3, #8
 800d7ca:	6822      	ldr	r2, [r4, #0]
 800d7cc:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800d7ce:	8962      	ldrh	r2, [r4, #10]
 800d7d0:	6823      	ldr	r3, [r4, #0]
 800d7d2:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800d7d4:	7ae2      	ldrb	r2, [r4, #11]
 800d7d6:	6823      	ldr	r3, [r4, #0]
 800d7d8:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800d7da:	6823      	ldr	r3, [r4, #0]
 800d7dc:	7b22      	ldrb	r2, [r4, #12]
 800d7de:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800d7e0:	89e2      	ldrh	r2, [r4, #14]
 800d7e2:	6823      	ldr	r3, [r4, #0]
 800d7e4:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800d7e6:	89e3      	ldrh	r3, [r4, #14]
 800d7e8:	6822      	ldr	r2, [r4, #0]
 800d7ea:	0a1b      	lsrs	r3, r3, #8
 800d7ec:	71d3      	strb	r3, [r2, #7]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800d7ee:	4621      	mov	r1, r4
 800d7f0:	f851 0b10 	ldr.w	r0, [r1], #16
 800d7f4:	7b22      	ldrb	r2, [r4, #12]
 800d7f6:	f002 020f 	and.w	r2, r2, #15
 800d7fa:	3008      	adds	r0, #8
 800d7fc:	f003 f977 	bl	8010aee <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800d800:	7b23      	ldrb	r3, [r4, #12]
 800d802:	f003 030f 	and.w	r3, r3, #15
 800d806:	f103 0508 	add.w	r5, r3, #8

    if( macMsg->FRMPayloadSize > 0 )
 800d80a:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800d80e:	b12a      	cbz	r2, 800d81c <LoRaMacSerializerData+0x8e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800d810:	6822      	ldr	r2, [r4, #0]
 800d812:	f894 1020 	ldrb.w	r1, [r4, #32]
 800d816:	5551      	strb	r1, [r2, r5]
 800d818:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800d81c:	6820      	ldr	r0, [r4, #0]
 800d81e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800d822:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d824:	4428      	add	r0, r5
 800d826:	f003 f962 	bl	8010aee <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800d82a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800d82e:	442b      	add	r3, r5

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800d830:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800d832:	6821      	ldr	r1, [r4, #0]
 800d834:	1c5a      	adds	r2, r3, #1
 800d836:	b292      	uxth	r2, r2
 800d838:	54c8      	strb	r0, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800d83a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d83c:	0a08      	lsrs	r0, r1, #8
 800d83e:	6825      	ldr	r5, [r4, #0]
 800d840:	1c99      	adds	r1, r3, #2
 800d842:	b289      	uxth	r1, r1
 800d844:	54a8      	strb	r0, [r5, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800d846:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 800d848:	6820      	ldr	r0, [r4, #0]
 800d84a:	1cda      	adds	r2, r3, #3
 800d84c:	b292      	uxth	r2, r2
 800d84e:	5445      	strb	r5, [r0, r1]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800d850:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 800d854:	6821      	ldr	r1, [r4, #0]
 800d856:	3304      	adds	r3, #4
 800d858:	5488      	strb	r0, [r1, r2]

    macMsg->BufSize = bufItr;
 800d85a:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800d85c:	2000      	movs	r0, #0
}
 800d85e:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800d860:	2001      	movs	r0, #1
}
 800d862:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800d864:	2001      	movs	r0, #1
 800d866:	e7fa      	b.n	800d85e <LoRaMacSerializerData+0xd0>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800d868:	2002      	movs	r0, #2
 800d86a:	e7f8      	b.n	800d85e <LoRaMacSerializerData+0xd0>

0800d86c <NvmDataMgmtEvent>:
void NvmDataMgmtEvent( uint16_t notifyFlags )
{
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800d86c:	4770      	bx	lr

0800d86e <NvmDataMgmtStoreBegin>:
    }
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800d86e:	f06f 0004 	mvn.w	r0, #4
 800d872:	4770      	bx	lr

0800d874 <NvmDataMgmtStoreEnd>:
    LoRaMacStart( );
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800d874:	f06f 0004 	mvn.w	r0, #4
 800d878:	4770      	bx	lr

0800d87a <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 800d87a:	2805      	cmp	r0, #5
 800d87c:	d005      	beq.n	800d88a <RegionIsActive+0x10>
 800d87e:	2808      	cmp	r0, #8
 800d880:	d001      	beq.n	800d886 <RegionIsActive+0xc>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 800d882:	2000      	movs	r0, #0
        }
    }
}
 800d884:	4770      	bx	lr
    switch( region )
 800d886:	2001      	movs	r0, #1
 800d888:	4770      	bx	lr
 800d88a:	2001      	movs	r0, #1
 800d88c:	4770      	bx	lr

0800d88e <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800d88e:	b500      	push	{lr}
 800d890:	b083      	sub	sp, #12
 800d892:	4603      	mov	r3, r0
 800d894:	4608      	mov	r0, r1
    PhyParam_t phyParam = { 0 };
 800d896:	2200      	movs	r2, #0
 800d898:	9200      	str	r2, [sp, #0]
    switch( region )
 800d89a:	2b05      	cmp	r3, #5
 800d89c:	d004      	beq.n	800d8a8 <RegionGetPhyParam+0x1a>
 800d89e:	2b08      	cmp	r3, #8
 800d8a0:	d009      	beq.n	800d8b6 <RegionGetPhyParam+0x28>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 800d8a2:	9b00      	ldr	r3, [sp, #0]
 800d8a4:	9301      	str	r3, [sp, #4]
 800d8a6:	e002      	b.n	800d8ae <RegionGetPhyParam+0x20>
        EU868_GET_PHY_PARAM( );
 800d8a8:	f000 fdfa 	bl	800e4a0 <RegionEU868GetPhyParam>
 800d8ac:	9001      	str	r0, [sp, #4]
        }
    }
}
 800d8ae:	9801      	ldr	r0, [sp, #4]
 800d8b0:	b003      	add	sp, #12
 800d8b2:	f85d fb04 	ldr.w	pc, [sp], #4
        US915_GET_PHY_PARAM( );
 800d8b6:	f001 fc19 	bl	800f0ec <RegionUS915GetPhyParam>
 800d8ba:	9001      	str	r0, [sp, #4]
 800d8bc:	e7f7      	b.n	800d8ae <RegionGetPhyParam+0x20>

0800d8be <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 800d8be:	b508      	push	{r3, lr}
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	4608      	mov	r0, r1
    switch( region )
 800d8c4:	2b05      	cmp	r3, #5
 800d8c6:	d002      	beq.n	800d8ce <RegionSetBandTxDone+0x10>
 800d8c8:	2b08      	cmp	r3, #8
 800d8ca:	d003      	beq.n	800d8d4 <RegionSetBandTxDone+0x16>
        default:
        {
            return;
        }
    }
}
 800d8cc:	bd08      	pop	{r3, pc}
        EU868_SET_BAND_TX_DONE( );
 800d8ce:	f000 fea9 	bl	800e624 <RegionEU868SetBandTxDone>
 800d8d2:	e7fb      	b.n	800d8cc <RegionSetBandTxDone+0xe>
        US915_SET_BAND_TX_DONE( );
 800d8d4:	f001 fce6 	bl	800f2a4 <RegionUS915SetBandTxDone>
 800d8d8:	e7f8      	b.n	800d8cc <RegionSetBandTxDone+0xe>

0800d8da <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 800d8da:	b508      	push	{r3, lr}
 800d8dc:	4603      	mov	r3, r0
 800d8de:	4608      	mov	r0, r1
    switch( region )
 800d8e0:	2b05      	cmp	r3, #5
 800d8e2:	d002      	beq.n	800d8ea <RegionInitDefaults+0x10>
 800d8e4:	2b08      	cmp	r3, #8
 800d8e6:	d003      	beq.n	800d8f0 <RegionInitDefaults+0x16>
        default:
        {
            break;
        }
    }
}
 800d8e8:	bd08      	pop	{r3, pc}
        EU868_INIT_DEFAULTS( );
 800d8ea:	f000 feb9 	bl	800e660 <RegionEU868InitDefaults>
 800d8ee:	e7fb      	b.n	800d8e8 <RegionInitDefaults+0xe>
        US915_INIT_DEFAULTS( );
 800d8f0:	f001 fcf6 	bl	800f2e0 <RegionUS915InitDefaults>
}
 800d8f4:	e7f8      	b.n	800d8e8 <RegionInitDefaults+0xe>

0800d8f6 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800d8f6:	b508      	push	{r3, lr}
 800d8f8:	4603      	mov	r3, r0
 800d8fa:	4608      	mov	r0, r1
 800d8fc:	4611      	mov	r1, r2
    switch( region )
 800d8fe:	2b05      	cmp	r3, #5
 800d900:	d003      	beq.n	800d90a <RegionVerify+0x14>
 800d902:	2b08      	cmp	r3, #8
 800d904:	d004      	beq.n	800d910 <RegionVerify+0x1a>
 800d906:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800d908:	bd08      	pop	{r3, pc}
        EU868_VERIFY( );
 800d90a:	f000 ff15 	bl	800e738 <RegionEU868Verify>
 800d90e:	e7fb      	b.n	800d908 <RegionVerify+0x12>
        US915_VERIFY( );
 800d910:	f001 fd8c 	bl	800f42c <RegionUS915Verify>
 800d914:	e7f8      	b.n	800d908 <RegionVerify+0x12>

0800d916 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 800d916:	b508      	push	{r3, lr}
 800d918:	4603      	mov	r3, r0
 800d91a:	4608      	mov	r0, r1
    switch( region )
 800d91c:	2b05      	cmp	r3, #5
 800d91e:	d002      	beq.n	800d926 <RegionApplyCFList+0x10>
 800d920:	2b08      	cmp	r3, #8
 800d922:	d003      	beq.n	800d92c <RegionApplyCFList+0x16>
        default:
        {
            break;
        }
    }
}
 800d924:	bd08      	pop	{r3, pc}
        EU868_APPLY_CF_LIST( );
 800d926:	f001 fad5 	bl	800eed4 <RegionEU868ApplyCFList>
 800d92a:	e7fb      	b.n	800d924 <RegionApplyCFList+0xe>
        US915_APPLY_CF_LIST( );
 800d92c:	f001 fdae 	bl	800f48c <RegionUS915ApplyCFList>
}
 800d930:	e7f8      	b.n	800d924 <RegionApplyCFList+0xe>

0800d932 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 800d932:	b508      	push	{r3, lr}
 800d934:	4603      	mov	r3, r0
 800d936:	4608      	mov	r0, r1
    switch( region )
 800d938:	2b05      	cmp	r3, #5
 800d93a:	d003      	beq.n	800d944 <RegionChanMaskSet+0x12>
 800d93c:	2b08      	cmp	r3, #8
 800d93e:	d004      	beq.n	800d94a <RegionChanMaskSet+0x18>
 800d940:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800d942:	bd08      	pop	{r3, pc}
        EU868_CHAN_MASK_SET( );
 800d944:	f000 ff3e 	bl	800e7c4 <RegionEU868ChanMaskSet>
 800d948:	e7fb      	b.n	800d942 <RegionChanMaskSet+0x10>
        US915_CHAN_MASK_SET( );
 800d94a:	f001 fde1 	bl	800f510 <RegionUS915ChanMaskSet>
 800d94e:	e7f8      	b.n	800d942 <RegionChanMaskSet+0x10>

0800d950 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800d950:	b508      	push	{r3, lr}
 800d952:	4684      	mov	ip, r0
 800d954:	4608      	mov	r0, r1
 800d956:	4611      	mov	r1, r2
 800d958:	461a      	mov	r2, r3
    switch( region )
 800d95a:	f1bc 0f05 	cmp.w	ip, #5
 800d95e:	d003      	beq.n	800d968 <RegionComputeRxWindowParameters+0x18>
 800d960:	f1bc 0f08 	cmp.w	ip, #8
 800d964:	d004      	beq.n	800d970 <RegionComputeRxWindowParameters+0x20>
        default:
        {
            break;
        }
    }
}
 800d966:	bd08      	pop	{r3, pc}
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 800d968:	9b02      	ldr	r3, [sp, #8]
 800d96a:	f000 ff49 	bl	800e800 <RegionEU868ComputeRxWindowParameters>
 800d96e:	e7fa      	b.n	800d966 <RegionComputeRxWindowParameters+0x16>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 800d970:	9b02      	ldr	r3, [sp, #8]
 800d972:	f001 fe11 	bl	800f598 <RegionUS915ComputeRxWindowParameters>
}
 800d976:	e7f6      	b.n	800d966 <RegionComputeRxWindowParameters+0x16>

0800d978 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800d978:	b508      	push	{r3, lr}
 800d97a:	4603      	mov	r3, r0
 800d97c:	4608      	mov	r0, r1
 800d97e:	4611      	mov	r1, r2
    switch( region )
 800d980:	2b05      	cmp	r3, #5
 800d982:	d003      	beq.n	800d98c <RegionRxConfig+0x14>
 800d984:	2b08      	cmp	r3, #8
 800d986:	d004      	beq.n	800d992 <RegionRxConfig+0x1a>
 800d988:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800d98a:	bd08      	pop	{r3, pc}
        EU868_RX_CONFIG( );
 800d98c:	f000 ff6e 	bl	800e86c <RegionEU868RxConfig>
 800d990:	e7fb      	b.n	800d98a <RegionRxConfig+0x12>
        US915_RX_CONFIG( );
 800d992:	f001 fe2f 	bl	800f5f4 <RegionUS915RxConfig>
 800d996:	e7f8      	b.n	800d98a <RegionRxConfig+0x12>

0800d998 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800d998:	b508      	push	{r3, lr}
 800d99a:	4684      	mov	ip, r0
 800d99c:	4608      	mov	r0, r1
 800d99e:	4611      	mov	r1, r2
 800d9a0:	461a      	mov	r2, r3
    switch( region )
 800d9a2:	f1bc 0f05 	cmp.w	ip, #5
 800d9a6:	d004      	beq.n	800d9b2 <RegionTxConfig+0x1a>
 800d9a8:	f1bc 0f08 	cmp.w	ip, #8
 800d9ac:	d004      	beq.n	800d9b8 <RegionTxConfig+0x20>
 800d9ae:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800d9b0:	bd08      	pop	{r3, pc}
        EU868_TX_CONFIG( );
 800d9b2:	f000 ffdf 	bl	800e974 <RegionEU868TxConfig>
 800d9b6:	e7fb      	b.n	800d9b0 <RegionTxConfig+0x18>
        US915_TX_CONFIG( );
 800d9b8:	f001 fe76 	bl	800f6a8 <RegionUS915TxConfig>
 800d9bc:	e7f8      	b.n	800d9b0 <RegionTxConfig+0x18>

0800d9be <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800d9be:	b500      	push	{lr}
 800d9c0:	b083      	sub	sp, #12
 800d9c2:	4684      	mov	ip, r0
 800d9c4:	4608      	mov	r0, r1
 800d9c6:	4611      	mov	r1, r2
 800d9c8:	461a      	mov	r2, r3
    switch( region )
 800d9ca:	f1bc 0f05 	cmp.w	ip, #5
 800d9ce:	d006      	beq.n	800d9de <RegionLinkAdrReq+0x20>
 800d9d0:	f1bc 0f08 	cmp.w	ip, #8
 800d9d4:	d009      	beq.n	800d9ea <RegionLinkAdrReq+0x2c>
 800d9d6:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800d9d8:	b003      	add	sp, #12
 800d9da:	f85d fb04 	ldr.w	pc, [sp], #4
        EU868_LINK_ADR_REQ( );
 800d9de:	9b05      	ldr	r3, [sp, #20]
 800d9e0:	9300      	str	r3, [sp, #0]
 800d9e2:	9b04      	ldr	r3, [sp, #16]
 800d9e4:	f001 f85e 	bl	800eaa4 <RegionEU868LinkAdrReq>
 800d9e8:	e7f6      	b.n	800d9d8 <RegionLinkAdrReq+0x1a>
        US915_LINK_ADR_REQ( );
 800d9ea:	9b05      	ldr	r3, [sp, #20]
 800d9ec:	9300      	str	r3, [sp, #0]
 800d9ee:	9b04      	ldr	r3, [sp, #16]
 800d9f0:	f001 fed4 	bl	800f79c <RegionUS915LinkAdrReq>
 800d9f4:	e7f0      	b.n	800d9d8 <RegionLinkAdrReq+0x1a>

0800d9f6 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 800d9f6:	b508      	push	{r3, lr}
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	4608      	mov	r0, r1
    switch( region )
 800d9fc:	2b05      	cmp	r3, #5
 800d9fe:	d003      	beq.n	800da08 <RegionRxParamSetupReq+0x12>
 800da00:	2b08      	cmp	r3, #8
 800da02:	d004      	beq.n	800da0e <RegionRxParamSetupReq+0x18>
 800da04:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800da06:	bd08      	pop	{r3, pc}
        EU868_RX_PARAM_SETUP_REQ( );
 800da08:	f001 f910 	bl	800ec2c <RegionEU868RxParamSetupReq>
 800da0c:	e7fb      	b.n	800da06 <RegionRxParamSetupReq+0x10>
        US915_RX_PARAM_SETUP_REQ( );
 800da0e:	f002 f811 	bl	800fa34 <RegionUS915RxParamSetupReq>
 800da12:	e7f8      	b.n	800da06 <RegionRxParamSetupReq+0x10>

0800da14 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 800da14:	b508      	push	{r3, lr}
 800da16:	4603      	mov	r3, r0
 800da18:	4608      	mov	r0, r1
    switch( region )
 800da1a:	2b05      	cmp	r3, #5
 800da1c:	d003      	beq.n	800da26 <RegionNewChannelReq+0x12>
 800da1e:	2b08      	cmp	r3, #8
 800da20:	d004      	beq.n	800da2c <RegionNewChannelReq+0x18>
 800da22:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800da24:	bd08      	pop	{r3, pc}
        EU868_NEW_CHANNEL_REQ( );
 800da26:	f001 fa96 	bl	800ef56 <RegionEU868NewChannelReq>
 800da2a:	e7fb      	b.n	800da24 <RegionNewChannelReq+0x10>
        US915_NEW_CHANNEL_REQ( );
 800da2c:	f002 f82d 	bl	800fa8a <RegionUS915NewChannelReq>
 800da30:	e7f8      	b.n	800da24 <RegionNewChannelReq+0x10>

0800da32 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 800da32:	b508      	push	{r3, lr}
 800da34:	4603      	mov	r3, r0
 800da36:	4608      	mov	r0, r1
    switch( region )
 800da38:	2b05      	cmp	r3, #5
 800da3a:	d003      	beq.n	800da44 <RegionTxParamSetupReq+0x12>
 800da3c:	2b08      	cmp	r3, #8
 800da3e:	d004      	beq.n	800da4a <RegionTxParamSetupReq+0x18>
 800da40:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800da42:	bd08      	pop	{r3, pc}
        EU868_TX_PARAM_SETUP_REQ( );
 800da44:	f001 f916 	bl	800ec74 <RegionEU868TxParamSetupReq>
 800da48:	e7fb      	b.n	800da42 <RegionTxParamSetupReq+0x10>
        US915_TX_PARAM_SETUP_REQ( );
 800da4a:	f002 f821 	bl	800fa90 <RegionUS915TxParamSetupReq>
 800da4e:	e7f8      	b.n	800da42 <RegionTxParamSetupReq+0x10>

0800da50 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 800da50:	b508      	push	{r3, lr}
 800da52:	4603      	mov	r3, r0
 800da54:	4608      	mov	r0, r1
    switch( region )
 800da56:	2b05      	cmp	r3, #5
 800da58:	d003      	beq.n	800da62 <RegionDlChannelReq+0x12>
 800da5a:	2b08      	cmp	r3, #8
 800da5c:	d004      	beq.n	800da68 <RegionDlChannelReq+0x18>
 800da5e:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800da60:	bd08      	pop	{r3, pc}
        EU868_DL_CHANNEL_REQ( );
 800da62:	f001 f90b 	bl	800ec7c <RegionEU868DlChannelReq>
 800da66:	e7fb      	b.n	800da60 <RegionDlChannelReq+0x10>
        US915_DL_CHANNEL_REQ( );
 800da68:	f002 f815 	bl	800fa96 <RegionUS915DlChannelReq>
 800da6c:	e7f8      	b.n	800da60 <RegionDlChannelReq+0x10>

0800da6e <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 800da6e:	b508      	push	{r3, lr}
 800da70:	4603      	mov	r3, r0
 800da72:	4608      	mov	r0, r1
 800da74:	4611      	mov	r1, r2
    switch( region )
 800da76:	2b05      	cmp	r3, #5
 800da78:	d003      	beq.n	800da82 <RegionAlternateDr+0x14>
 800da7a:	2b08      	cmp	r3, #8
 800da7c:	d004      	beq.n	800da88 <RegionAlternateDr+0x1a>
 800da7e:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800da80:	bd08      	pop	{r3, pc}
        EU868_ALTERNATE_DR( );
 800da82:	f001 f923 	bl	800eccc <RegionEU868AlternateDr>
 800da86:	e7fb      	b.n	800da80 <RegionAlternateDr+0x12>
        US915_ALTERNATE_DR( );
 800da88:	f002 f808 	bl	800fa9c <RegionUS915AlternateDr>
 800da8c:	e7f8      	b.n	800da80 <RegionAlternateDr+0x12>

0800da8e <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800da8e:	b508      	push	{r3, lr}
 800da90:	4684      	mov	ip, r0
 800da92:	4608      	mov	r0, r1
 800da94:	4611      	mov	r1, r2
 800da96:	461a      	mov	r2, r3
    switch( region )
 800da98:	f1bc 0f05 	cmp.w	ip, #5
 800da9c:	d004      	beq.n	800daa8 <RegionNextChannel+0x1a>
 800da9e:	f1bc 0f08 	cmp.w	ip, #8
 800daa2:	d005      	beq.n	800dab0 <RegionNextChannel+0x22>
 800daa4:	2009      	movs	r0, #9
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
        }
    }
}
 800daa6:	bd08      	pop	{r3, pc}
        EU868_NEXT_CHANNEL( );
 800daa8:	9b02      	ldr	r3, [sp, #8]
 800daaa:	f001 f911 	bl	800ecd0 <RegionEU868NextChannel>
 800daae:	e7fa      	b.n	800daa6 <RegionNextChannel+0x18>
        US915_NEXT_CHANNEL( );
 800dab0:	9b02      	ldr	r3, [sp, #8]
 800dab2:	f002 f819 	bl	800fae8 <RegionUS915NextChannel>
 800dab6:	e7f6      	b.n	800daa6 <RegionNextChannel+0x18>

0800dab8 <RegionSetContinuousWave>:
    }
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 800dab8:	b508      	push	{r3, lr}
 800daba:	4603      	mov	r3, r0
 800dabc:	4608      	mov	r0, r1
    switch( region )
 800dabe:	2b05      	cmp	r3, #5
 800dac0:	d002      	beq.n	800dac8 <RegionSetContinuousWave+0x10>
 800dac2:	2b08      	cmp	r3, #8
 800dac4:	d003      	beq.n	800dace <RegionSetContinuousWave+0x16>
        default:
        {
            break;
        }
    }
}
 800dac6:	bd08      	pop	{r3, pc}
        EU868_SET_CONTINUOUS_WAVE( );
 800dac8:	f001 fa70 	bl	800efac <RegionEU868SetContinuousWave>
 800dacc:	e7fb      	b.n	800dac6 <RegionSetContinuousWave+0xe>
        US915_SET_CONTINUOUS_WAVE( );
 800dace:	f002 f8bf 	bl	800fc50 <RegionUS915SetContinuousWave>
}
 800dad2:	e7f8      	b.n	800dac6 <RegionSetContinuousWave+0xe>

0800dad4 <RegionApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800dad4:	b508      	push	{r3, lr}
 800dad6:	4684      	mov	ip, r0
 800dad8:	4608      	mov	r0, r1
 800dada:	4611      	mov	r1, r2
 800dadc:	461a      	mov	r2, r3
    switch( region )
 800dade:	f1bc 0f05 	cmp.w	ip, #5
 800dae2:	d004      	beq.n	800daee <RegionApplyDrOffset+0x1a>
 800dae4:	f1bc 0f08 	cmp.w	ip, #8
 800dae8:	d004      	beq.n	800daf4 <RegionApplyDrOffset+0x20>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 800daea:	b2c8      	uxtb	r0, r1
 800daec:	e001      	b.n	800daf2 <RegionApplyDrOffset+0x1e>
        EU868_APPLY_DR_OFFSET( );
 800daee:	f001 fa8b 	bl	800f008 <RegionEU868ApplyDrOffset>
        }
    }
}
 800daf2:	bd08      	pop	{r3, pc}
        US915_APPLY_DR_OFFSET( );
 800daf4:	f002 f8e0 	bl	800fcb8 <RegionUS915ApplyDrOffset>
 800daf8:	e7fb      	b.n	800daf2 <RegionApplyDrOffset+0x1e>
	...

0800dafc <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 800dafc:	4800      	ldr	r0, [pc, #0]	; (800db00 <RegionGetVersion+0x4>)
 800dafe:	4770      	bx	lr
 800db00:	01010003 	.word	0x01010003

0800db04 <FindAvailable125kHzChannels>:
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 800db04:	468c      	mov	ip, r1
 800db06:	b1a9      	cbz	r1, 800db34 <FindAvailable125kHzChannels+0x30>
 800db08:	b1b2      	cbz	r2, 800db38 <FindAvailable125kHzChannels+0x34>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Initialize counter
    *availableChannels = 0;
 800db0a:	2300      	movs	r3, #0
 800db0c:	7013      	strb	r3, [r2, #0]
    for( uint8_t i = 0; i < 8; i++ )
 800db0e:	e001      	b.n	800db14 <FindAvailable125kHzChannels+0x10>
 800db10:	3301      	adds	r3, #1
 800db12:	b2db      	uxtb	r3, r3
 800db14:	2b07      	cmp	r3, #7
 800db16:	d80b      	bhi.n	800db30 <FindAvailable125kHzChannels+0x2c>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 800db18:	fa40 f103 	asr.w	r1, r0, r3
 800db1c:	f011 0f01 	tst.w	r1, #1
 800db20:	d0f6      	beq.n	800db10 <FindAvailable125kHzChannels+0xc>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 800db22:	7811      	ldrb	r1, [r2, #0]
 800db24:	f80c 3001 	strb.w	r3, [ip, r1]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 800db28:	7811      	ldrb	r1, [r2, #0]
 800db2a:	3101      	adds	r1, #1
 800db2c:	7011      	strb	r1, [r2, #0]
 800db2e:	e7ef      	b.n	800db10 <FindAvailable125kHzChannels+0xc>
        }
    }

    return LORAMAC_STATUS_OK;
 800db30:	2000      	movs	r0, #0
 800db32:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800db34:	2003      	movs	r0, #3
 800db36:	4770      	bx	lr
 800db38:	2003      	movs	r0, #3
}
 800db3a:	4770      	bx	lr

0800db3c <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 800db3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db3e:	b085      	sub	sp, #20
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 800db40:	2300      	movs	r3, #0
 800db42:	9302      	str	r3, [sp, #8]
 800db44:	9303      	str	r3, [sp, #12]
    uint8_t availableChannels = 0;
 800db46:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 800db4a:	2800      	cmp	r0, #0
 800db4c:	d03e      	beq.n	800dbcc <RegionBaseUSComputeNext125kHzJoinChannel+0x90>
 800db4e:	460d      	mov	r5, r1
 800db50:	4617      	mov	r7, r2
 800db52:	4606      	mov	r6, r0
 800db54:	2900      	cmp	r1, #0
 800db56:	d03b      	beq.n	800dbd0 <RegionBaseUSComputeNext125kHzJoinChannel+0x94>
 800db58:	2a00      	cmp	r2, #0
 800db5a:	d03b      	beq.n	800dbd4 <RegionBaseUSComputeNext125kHzJoinChannel+0x98>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 800db5c:	780c      	ldrb	r4, [r1, #0]
 800db5e:	e017      	b.n	800db90 <RegionBaseUSComputeNext125kHzJoinChannel+0x54>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 800db60:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
 800db64:	0a00      	lsrs	r0, r0, #8
 800db66:	e019      	b.n	800db9c <RegionBaseUSComputeNext125kHzJoinChannel+0x60>
        }

        if ( availableChannels > 0 )
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 800db68:	3901      	subs	r1, #1
 800db6a:	2000      	movs	r0, #0
 800db6c:	f002 ffb2 	bl	8010ad4 <randr>
 800db70:	f100 0310 	add.w	r3, r0, #16
 800db74:	eb0d 0003 	add.w	r0, sp, r3
 800db78:	f810 3c08 	ldrb.w	r3, [r0, #-8]
 800db7c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800db80:	703b      	strb	r3, [r7, #0]
 800db82:	e016      	b.n	800dbb2 <RegionBaseUSComputeNext125kHzJoinChannel+0x76>
        startIndex++;
        if ( startIndex > 7 )
        {
            startIndex = 0;
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 800db84:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800db88:	b9cb      	cbnz	r3, 800dbbe <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
 800db8a:	782a      	ldrb	r2, [r5, #0]
 800db8c:	42a2      	cmp	r2, r4
 800db8e:	d016      	beq.n	800dbbe <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 800db90:	0863      	lsrs	r3, r4, #1
        if( ( startIndex % 2 ) == 0 )
 800db92:	f014 0f01 	tst.w	r4, #1
 800db96:	d1e3      	bne.n	800db60 <RegionBaseUSComputeNext125kHzJoinChannel+0x24>
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 800db98:	f816 0013 	ldrb.w	r0, [r6, r3, lsl #1]
        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 800db9c:	f10d 0207 	add.w	r2, sp, #7
 800dba0:	a902      	add	r1, sp, #8
 800dba2:	f7ff ffaf 	bl	800db04 <FindAvailable125kHzChannels>
 800dba6:	2803      	cmp	r0, #3
 800dba8:	d00b      	beq.n	800dbc2 <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        if ( availableChannels > 0 )
 800dbaa:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800dbae:	2900      	cmp	r1, #0
 800dbb0:	d1da      	bne.n	800db68 <RegionBaseUSComputeNext125kHzJoinChannel+0x2c>
        startIndex++;
 800dbb2:	3401      	adds	r4, #1
 800dbb4:	b2e4      	uxtb	r4, r4
        if ( startIndex > 7 )
 800dbb6:	2c07      	cmp	r4, #7
 800dbb8:	d9e4      	bls.n	800db84 <RegionBaseUSComputeNext125kHzJoinChannel+0x48>
            startIndex = 0;
 800dbba:	2400      	movs	r4, #0
 800dbbc:	e7e2      	b.n	800db84 <RegionBaseUSComputeNext125kHzJoinChannel+0x48>

    if ( availableChannels > 0 )
 800dbbe:	b913      	cbnz	r3, 800dbc6 <RegionBaseUSComputeNext125kHzJoinChannel+0x8a>
    {
        *groupsCurrentIndex = startIndex;
        return LORAMAC_STATUS_OK;
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 800dbc0:	2003      	movs	r0, #3
}
 800dbc2:	b005      	add	sp, #20
 800dbc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *groupsCurrentIndex = startIndex;
 800dbc6:	702c      	strb	r4, [r5, #0]
        return LORAMAC_STATUS_OK;
 800dbc8:	2000      	movs	r0, #0
 800dbca:	e7fa      	b.n	800dbc2 <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800dbcc:	2003      	movs	r0, #3
 800dbce:	e7f8      	b.n	800dbc2 <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 800dbd0:	2003      	movs	r0, #3
 800dbd2:	e7f6      	b.n	800dbc2 <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 800dbd4:	2003      	movs	r0, #3
 800dbd6:	e7f4      	b.n	800dbc2 <RegionBaseUSComputeNext125kHzJoinChannel+0x86>

0800dbd8 <RegionBaseUSCalcDownlinkFrequency>:
uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
}
 800dbd8:	fb02 1000 	mla	r0, r2, r0, r1
 800dbdc:	4770      	bx	lr

0800dbde <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800dbde:	b082      	sub	sp, #8
 800dbe0:	f10d 0c08 	add.w	ip, sp, #8
 800dbe4:	e90c 000c 	stmdb	ip, {r2, r3}
    uint16_t dutyCycle = band->DCycle;
 800dbe8:	8800      	ldrh	r0, [r0, #0]

    if( joined == false )
 800dbea:	b971      	cbnz	r1, 800dc0a <GetDutyCycle+0x2c>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800dbec:	4613      	mov	r3, r2
 800dbee:	f5b2 6f61 	cmp.w	r2, #3600	; 0xe10
 800dbf2:	d306      	bcc.n	800dc02 <GetDutyCycle+0x24>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 800dbf4:	f649 22af 	movw	r2, #39599	; 0x9aaf
 800dbf8:	4293      	cmp	r3, r2
 800dbfa:	d80a      	bhi.n	800dc12 <GetDutyCycle+0x34>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 800dbfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dc00:	e000      	b.n	800dc04 <GetDutyCycle+0x26>
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 800dc02:	2364      	movs	r3, #100	; 0x64
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800dc04:	4298      	cmp	r0, r3
 800dc06:	bf38      	it	cc
 800dc08:	4618      	movcc	r0, r3
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 800dc0a:	b900      	cbnz	r0, 800dc0e <GetDutyCycle+0x30>
    {
        dutyCycle = 1;
 800dc0c:	2001      	movs	r0, #1
    }

    return dutyCycle;
}
 800dc0e:	b002      	add	sp, #8
 800dc10:	4770      	bx	lr
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 800dc12:	f242 7310 	movw	r3, #10000	; 0x2710
 800dc16:	e7f5      	b.n	800dc04 <GetDutyCycle+0x26>

0800dc18 <CountChannels>:

    return dutyCycle;
}

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 800dc18:	4684      	mov	ip, r0
    uint8_t nbActiveBits = 0;

    for( uint8_t j = 0; j < nbBits; j++ )
 800dc1a:	2300      	movs	r3, #0
    uint8_t nbActiveBits = 0;
 800dc1c:	4618      	mov	r0, r3
    for( uint8_t j = 0; j < nbBits; j++ )
 800dc1e:	e001      	b.n	800dc24 <CountChannels+0xc>
 800dc20:	3301      	adds	r3, #1
 800dc22:	b2db      	uxtb	r3, r3
 800dc24:	428b      	cmp	r3, r1
 800dc26:	d207      	bcs.n	800dc38 <CountChannels+0x20>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800dc28:	2201      	movs	r2, #1
 800dc2a:	409a      	lsls	r2, r3
 800dc2c:	ea32 020c 	bics.w	r2, r2, ip
 800dc30:	d1f6      	bne.n	800dc20 <CountChannels+0x8>
        {
            nbActiveBits++;
 800dc32:	3001      	adds	r0, #1
 800dc34:	b2c0      	uxtb	r0, r0
 800dc36:	e7f3      	b.n	800dc20 <CountChannels+0x8>
        }
    }
    return nbActiveBits;
}
 800dc38:	4770      	bx	lr
	...

0800dc3c <SetMaxTimeCredits>:
{
 800dc3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc40:	b089      	sub	sp, #36	; 0x24
 800dc42:	4604      	mov	r4, r0
 800dc44:	460e      	mov	r6, r1
 800dc46:	ad02      	add	r5, sp, #8
 800dc48:	e885 000c 	stmia.w	r5, {r2, r3}
 800dc4c:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
 800dc50:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 800dc54:	e895 0003 	ldmia.w	r5, {r0, r1}
 800dc58:	f005 f890 	bl	8012d7c <SysTimeToMs>
 800dc5c:	4607      	mov	r7, r0
    SysTime_t timeDiff = { 0 };
 800dc5e:	2300      	movs	r3, #0
 800dc60:	9304      	str	r3, [sp, #16]
 800dc62:	9305      	str	r3, [sp, #20]
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800dc64:	e895 000c 	ldmia.w	r5, {r2, r3}
 800dc68:	4631      	mov	r1, r6
 800dc6a:	4620      	mov	r0, r4
 800dc6c:	f7ff ffb7 	bl	800dbde <GetDutyCycle>
 800dc70:	4605      	mov	r5, r0
    if( joined == false )
 800dc72:	2e00      	cmp	r6, #0
 800dc74:	d14c      	bne.n	800dd10 <SetMaxTimeCredits+0xd4>
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 800dc76:	2864      	cmp	r0, #100	; 0x64
 800dc78:	d025      	beq.n	800dcc6 <SetMaxTimeCredits+0x8a>
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800dc7a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800dc7e:	d025      	beq.n	800dccc <SetMaxTimeCredits+0x90>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 800dc80:	4e27      	ldr	r6, [pc, #156]	; (800dd20 <SetMaxTimeCredits+0xe4>)
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 800dc82:	68a1      	ldr	r1, [r4, #8]
 800dc84:	a806      	add	r0, sp, #24
 800dc86:	f005 f899 	bl	8012dbc <SysTimeFromMs>
 800dc8a:	9b07      	ldr	r3, [sp, #28]
 800dc8c:	9300      	str	r3, [sp, #0]
 800dc8e:	9b06      	ldr	r3, [sp, #24]
 800dc90:	aa02      	add	r2, sp, #8
 800dc92:	ca06      	ldmia	r2, {r1, r2}
 800dc94:	a804      	add	r0, sp, #16
 800dc96:	f004 fff8 	bl	8012c8a <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800dc9a:	f1b8 0f00 	cmp.w	r8, #0
 800dc9e:	d102      	bne.n	800dca6 <SetMaxTimeCredits+0x6a>
 800dca0:	f1b9 0f00 	cmp.w	r9, #0
 800dca4:	d002      	beq.n	800dcac <SetMaxTimeCredits+0x70>
            ( band->MaxTimeCredits != maxCredits ) ||
 800dca6:	6923      	ldr	r3, [r4, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800dca8:	42b3      	cmp	r3, r6
 800dcaa:	d012      	beq.n	800dcd2 <SetMaxTimeCredits+0x96>
            band->TimeCredits = maxCredits;
 800dcac:	60e6      	str	r6, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800dcae:	9b02      	ldr	r3, [sp, #8]
 800dcb0:	4a1c      	ldr	r2, [pc, #112]	; (800dd24 <SetMaxTimeCredits+0xe8>)
 800dcb2:	4293      	cmp	r3, r2
 800dcb4:	d812      	bhi.n	800dcdc <SetMaxTimeCredits+0xa0>
    if( band->LastBandUpdateTime == 0 )
 800dcb6:	6863      	ldr	r3, [r4, #4]
 800dcb8:	b903      	cbnz	r3, 800dcbc <SetMaxTimeCredits+0x80>
        band->TimeCredits = maxCredits;
 800dcba:	60e6      	str	r6, [r4, #12]
    band->MaxTimeCredits = maxCredits;
 800dcbc:	6126      	str	r6, [r4, #16]
}
 800dcbe:	4628      	mov	r0, r5
 800dcc0:	b009      	add	sp, #36	; 0x24
 800dcc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            band->LastMaxCreditAssignTime = elapsedTime;
 800dcc6:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800dcc8:	4e17      	ldr	r6, [pc, #92]	; (800dd28 <SetMaxTimeCredits+0xec>)
 800dcca:	e7da      	b.n	800dc82 <SetMaxTimeCredits+0x46>
            band->LastMaxCreditAssignTime = elapsedTime;
 800dccc:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 800dcce:	4e17      	ldr	r6, [pc, #92]	; (800dd2c <SetMaxTimeCredits+0xf0>)
 800dcd0:	e7d7      	b.n	800dc82 <SetMaxTimeCredits+0x46>
            ( band->MaxTimeCredits != maxCredits ) ||
 800dcd2:	9a04      	ldr	r2, [sp, #16]
 800dcd4:	4b16      	ldr	r3, [pc, #88]	; (800dd30 <SetMaxTimeCredits+0xf4>)
 800dcd6:	429a      	cmp	r2, r3
 800dcd8:	d9ed      	bls.n	800dcb6 <SetMaxTimeCredits+0x7a>
 800dcda:	e7e7      	b.n	800dcac <SetMaxTimeCredits+0x70>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800dcdc:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800dce0:	3b30      	subs	r3, #48	; 0x30
 800dce2:	4a14      	ldr	r2, [pc, #80]	; (800dd34 <SetMaxTimeCredits+0xf8>)
 800dce4:	fba2 2303 	umull	r2, r3, r2, r3
 800dce8:	0c1b      	lsrs	r3, r3, #16
 800dcea:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 800dcec:	4a12      	ldr	r2, [pc, #72]	; (800dd38 <SetMaxTimeCredits+0xfc>)
 800dcee:	fb02 f303 	mul.w	r3, r2, r3
 800dcf2:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800dcf4:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 800dcf8:	3330      	adds	r3, #48	; 0x30
 800dcfa:	9304      	str	r3, [sp, #16]
                timeDiff.SubSeconds = 0;
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	f8ad 3014 	strh.w	r3, [sp, #20]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 800dd02:	ab04      	add	r3, sp, #16
 800dd04:	e893 0003 	ldmia.w	r3, {r0, r1}
 800dd08:	f005 f838 	bl	8012d7c <SysTimeToMs>
 800dd0c:	60a0      	str	r0, [r4, #8]
 800dd0e:	e7d2      	b.n	800dcb6 <SetMaxTimeCredits+0x7a>
        if( dutyCycleEnabled == false )
 800dd10:	f1b8 0f00 	cmp.w	r8, #0
 800dd14:	d102      	bne.n	800dd1c <SetMaxTimeCredits+0xe0>
            band->TimeCredits = maxCredits;
 800dd16:	4e04      	ldr	r6, [pc, #16]	; (800dd28 <SetMaxTimeCredits+0xec>)
 800dd18:	60e6      	str	r6, [r4, #12]
 800dd1a:	e7cc      	b.n	800dcb6 <SetMaxTimeCredits+0x7a>
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800dd1c:	4e02      	ldr	r6, [pc, #8]	; (800dd28 <SetMaxTimeCredits+0xec>)
 800dd1e:	e7ca      	b.n	800dcb6 <SetMaxTimeCredits+0x7a>
 800dd20:	02932e00 	.word	0x02932e00
 800dd24:	0001ec2f 	.word	0x0001ec2f
 800dd28:	001b7740 	.word	0x001b7740
 800dd2c:	0112a880 	.word	0x0112a880
 800dd30:	0001517f 	.word	0x0001517f
 800dd34:	c22e4507 	.word	0xc22e4507
 800dd38:	00015180 	.word	0x00015180

0800dd3c <UpdateTimeCredits>:
{
 800dd3c:	b570      	push	{r4, r5, r6, lr}
 800dd3e:	b082      	sub	sp, #8
 800dd40:	4604      	mov	r4, r0
 800dd42:	460e      	mov	r6, r1
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 800dd44:	9301      	str	r3, [sp, #4]
 800dd46:	9200      	str	r2, [sp, #0]
 800dd48:	ab06      	add	r3, sp, #24
 800dd4a:	cb0c      	ldmia	r3, {r2, r3}
 800dd4c:	f7ff ff76 	bl	800dc3c <SetMaxTimeCredits>
 800dd50:	4605      	mov	r5, r0
    if( joined == true )
 800dd52:	b94e      	cbnz	r6, 800dd68 <UpdateTimeCredits+0x2c>
    if( band->TimeCredits > band->MaxTimeCredits )
 800dd54:	68e2      	ldr	r2, [r4, #12]
 800dd56:	6923      	ldr	r3, [r4, #16]
 800dd58:	429a      	cmp	r2, r3
 800dd5a:	d900      	bls.n	800dd5e <UpdateTimeCredits+0x22>
        band->TimeCredits = band->MaxTimeCredits;
 800dd5c:	60e3      	str	r3, [r4, #12]
    band->LastBandUpdateTime = currentTime;
 800dd5e:	9b08      	ldr	r3, [sp, #32]
 800dd60:	6063      	str	r3, [r4, #4]
}
 800dd62:	4628      	mov	r0, r5
 800dd64:	b002      	add	sp, #8
 800dd66:	bd70      	pop	{r4, r5, r6, pc}
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800dd68:	6860      	ldr	r0, [r4, #4]
 800dd6a:	f005 f887 	bl	8012e7c <UTIL_TIMER_GetElapsedTime>
 800dd6e:	68e3      	ldr	r3, [r4, #12]
 800dd70:	4403      	add	r3, r0
 800dd72:	60e3      	str	r3, [r4, #12]
 800dd74:	e7ee      	b.n	800dd54 <UpdateTimeCredits+0x18>

0800dd76 <RegionCommonValueInRange>:
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 800dd76:	4288      	cmp	r0, r1
 800dd78:	db03      	blt.n	800dd82 <RegionCommonValueInRange+0xc>
 800dd7a:	4290      	cmp	r0, r2
 800dd7c:	dd03      	ble.n	800dd86 <RegionCommonValueInRange+0x10>
    {
        return 1;
    }
    return 0;
 800dd7e:	2000      	movs	r0, #0
 800dd80:	4770      	bx	lr
 800dd82:	2000      	movs	r0, #0
 800dd84:	4770      	bx	lr
        return 1;
 800dd86:	2001      	movs	r0, #1
}
 800dd88:	4770      	bx	lr

0800dd8a <RegionCommonChanVerifyDr>:
{
 800dd8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd8e:	4682      	mov	sl, r0
 800dd90:	460e      	mov	r6, r1
 800dd92:	4690      	mov	r8, r2
 800dd94:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 800dd98:	f99d 2020 	ldrsb.w	r2, [sp, #32]
 800dd9c:	4619      	mov	r1, r3
 800dd9e:	4640      	mov	r0, r8
 800dda0:	f7ff ffe9 	bl	800dd76 <RegionCommonValueInRange>
 800dda4:	b338      	cbz	r0, 800ddf6 <RegionCommonChanVerifyDr+0x6c>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800dda6:	2500      	movs	r5, #0
 800dda8:	462f      	mov	r7, r5
 800ddaa:	e01e      	b.n	800ddea <RegionCommonChanVerifyDr+0x60>
        for( uint8_t j = 0; j < 16; j++ )
 800ddac:	3401      	adds	r4, #1
 800ddae:	b2e4      	uxtb	r4, r4
 800ddb0:	2c0f      	cmp	r4, #15
 800ddb2:	d816      	bhi.n	800dde2 <RegionCommonChanVerifyDr+0x58>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800ddb4:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
 800ddb8:	4123      	asrs	r3, r4
 800ddba:	f013 0f01 	tst.w	r3, #1
 800ddbe:	d0f5      	beq.n	800ddac <RegionCommonChanVerifyDr+0x22>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800ddc0:	193b      	adds	r3, r7, r4
 800ddc2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ddc6:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800ddca:	7a19      	ldrb	r1, [r3, #8]
 800ddcc:	090a      	lsrs	r2, r1, #4
 800ddce:	f001 010f 	and.w	r1, r1, #15
 800ddd2:	4640      	mov	r0, r8
 800ddd4:	f7ff ffcf 	bl	800dd76 <RegionCommonValueInRange>
 800ddd8:	2801      	cmp	r0, #1
 800ddda:	d1e7      	bne.n	800ddac <RegionCommonChanVerifyDr+0x22>
                    return true;
 800dddc:	2001      	movs	r0, #1
}
 800ddde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800dde2:	3710      	adds	r7, #16
 800dde4:	b2ff      	uxtb	r7, r7
 800dde6:	3501      	adds	r5, #1
 800dde8:	b2ed      	uxtb	r5, r5
 800ddea:	4557      	cmp	r7, sl
 800ddec:	d201      	bcs.n	800ddf2 <RegionCommonChanVerifyDr+0x68>
        for( uint8_t j = 0; j < 16; j++ )
 800ddee:	2400      	movs	r4, #0
 800ddf0:	e7de      	b.n	800ddb0 <RegionCommonChanVerifyDr+0x26>
    return false;
 800ddf2:	2000      	movs	r0, #0
 800ddf4:	e7f3      	b.n	800ddde <RegionCommonChanVerifyDr+0x54>
        return false;
 800ddf6:	2000      	movs	r0, #0
 800ddf8:	e7f1      	b.n	800ddde <RegionCommonChanVerifyDr+0x54>

0800ddfa <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
    uint8_t index = id / 16;
 800ddfa:	ea4f 1c11 	mov.w	ip, r1, lsr #4

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800ddfe:	0913      	lsrs	r3, r2, #4
 800de00:	ebb3 1f11 	cmp.w	r3, r1, lsr #4
 800de04:	d30e      	bcc.n	800de24 <RegionCommonChanDisable+0x2a>
 800de06:	4291      	cmp	r1, r2
 800de08:	d20e      	bcs.n	800de28 <RegionCommonChanDisable+0x2e>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800de0a:	f001 010f 	and.w	r1, r1, #15
 800de0e:	2301      	movs	r3, #1
 800de10:	fa03 f101 	lsl.w	r1, r3, r1
 800de14:	f830 201c 	ldrh.w	r2, [r0, ip, lsl #1]
 800de18:	ea22 0101 	bic.w	r1, r2, r1
 800de1c:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]

    return true;
 800de20:	4618      	mov	r0, r3
 800de22:	4770      	bx	lr
        return false;
 800de24:	2000      	movs	r0, #0
 800de26:	4770      	bx	lr
 800de28:	2000      	movs	r0, #0
}
 800de2a:	4770      	bx	lr

0800de2c <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800de2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 800de2e:	b188      	cbz	r0, 800de54 <RegionCommonCountChannels+0x28>
 800de30:	460c      	mov	r4, r1
 800de32:	4616      	mov	r6, r2
 800de34:	4607      	mov	r7, r0
    uint8_t nbChannels = 0;
 800de36:	2500      	movs	r5, #0
 800de38:	e008      	b.n	800de4c <RegionCommonCountChannels+0x20>
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 800de3a:	2110      	movs	r1, #16
 800de3c:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 800de40:	f7ff feea 	bl	800dc18 <CountChannels>
 800de44:	4405      	add	r5, r0
 800de46:	b2ed      	uxtb	r5, r5
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800de48:	3401      	adds	r4, #1
 800de4a:	b2e4      	uxtb	r4, r4
 800de4c:	42b4      	cmp	r4, r6
 800de4e:	d3f4      	bcc.n	800de3a <RegionCommonCountChannels+0xe>
    }

    return nbChannels;
}
 800de50:	4628      	mov	r0, r5
 800de52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 800de54:	2500      	movs	r5, #0
 800de56:	e7fb      	b.n	800de50 <RegionCommonCountChannels+0x24>

0800de58 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800de58:	4684      	mov	ip, r0
 800de5a:	b158      	cbz	r0, 800de74 <RegionCommonChanMaskCopy+0x1c>
 800de5c:	b109      	cbz	r1, 800de62 <RegionCommonChanMaskCopy+0xa>
    {
        for( uint8_t i = 0; i < len; i++ )
 800de5e:	2300      	movs	r3, #0
 800de60:	e006      	b.n	800de70 <RegionCommonChanMaskCopy+0x18>
 800de62:	4770      	bx	lr
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 800de64:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800de68:	f82c 0013 	strh.w	r0, [ip, r3, lsl #1]
        for( uint8_t i = 0; i < len; i++ )
 800de6c:	3301      	adds	r3, #1
 800de6e:	b2db      	uxtb	r3, r3
 800de70:	4293      	cmp	r3, r2
 800de72:	d3f7      	bcc.n	800de64 <RegionCommonChanMaskCopy+0xc>
        }
    }
}
 800de74:	4770      	bx	lr

0800de76 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800de76:	b082      	sub	sp, #8
 800de78:	b538      	push	{r3, r4, r5, lr}
 800de7a:	4604      	mov	r4, r0
 800de7c:	460d      	mov	r5, r1
 800de7e:	4611      	mov	r1, r2
 800de80:	aa04      	add	r2, sp, #16
 800de82:	f842 3f04 	str.w	r3, [r2, #4]!
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800de86:	ca0c      	ldmia	r2, {r2, r3}
 800de88:	f7ff fea9 	bl	800dbde <GetDutyCycle>

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800de8c:	68e3      	ldr	r3, [r4, #12]
 800de8e:	fb05 f000 	mul.w	r0, r5, r0
 800de92:	4283      	cmp	r3, r0
 800de94:	d905      	bls.n	800dea2 <RegionCommonSetBandTxDone+0x2c>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 800de96:	1a18      	subs	r0, r3, r0
 800de98:	60e0      	str	r0, [r4, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 800de9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de9e:	b002      	add	sp, #8
 800dea0:	4770      	bx	lr
        band->TimeCredits = 0;
 800dea2:	2300      	movs	r3, #0
 800dea4:	60e3      	str	r3, [r4, #12]
}
 800dea6:	e7f8      	b.n	800de9a <RegionCommonSetBandTxDone+0x24>

0800dea8 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800dea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deac:	b089      	sub	sp, #36	; 0x24
 800deae:	4607      	mov	r7, r0
 800deb0:	468b      	mov	fp, r1
 800deb2:	4691      	mov	r9, r2
 800deb4:	4698      	mov	r8, r3
 800deb6:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800deba:	f004 ffd5 	bl	8012e68 <UTIL_TIMER_GetCurrentTime>
 800debe:	9004      	str	r0, [sp, #16]
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;

    for( uint8_t i = 0; i < nbBands; i++ )
 800dec0:	2400      	movs	r4, #0
    uint8_t validBands = 0;
 800dec2:	4626      	mov	r6, r4
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800dec4:	f04f 33ff 	mov.w	r3, #4294967295
 800dec8:	9305      	str	r3, [sp, #20]
    for( uint8_t i = 0; i < nbBands; i++ )
 800deca:	e005      	b.n	800ded8 <RegionCommonUpdateBandTimeOff+0x30>
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
        {
            bands[i].ReadyForTransmission = true;
 800decc:	2301      	movs	r3, #1
 800dece:	752b      	strb	r3, [r5, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 800ded0:	441e      	add	r6, r3
 800ded2:	b2f6      	uxtb	r6, r6
    for( uint8_t i = 0; i < nbBands; i++ )
 800ded4:	3401      	adds	r4, #1
 800ded6:	b2e4      	uxtb	r4, r4
 800ded8:	454c      	cmp	r4, r9
 800deda:	d25d      	bcs.n	800df98 <RegionCommonUpdateBandTimeOff+0xf0>
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800dedc:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800dee0:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 800dee4:	9b04      	ldr	r3, [sp, #16]
 800dee6:	9302      	str	r3, [sp, #8]
 800dee8:	ab13      	add	r3, sp, #76	; 0x4c
 800deea:	e893 0003 	ldmia.w	r3, {r0, r1}
 800deee:	e88d 0003 	stmia.w	sp, {r0, r1}
 800def2:	4653      	mov	r3, sl
 800def4:	4642      	mov	r2, r8
 800def6:	4639      	mov	r1, r7
 800def8:	4628      	mov	r0, r5
 800defa:	f7ff ff1f 	bl	800dd3c <UpdateTimeCredits>
        creditCosts = expectedTimeOnAir * dutyCycle;
 800defe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800df00:	fb03 f300 	mul.w	r3, r3, r0
        if( ( bands[i].TimeCredits > creditCosts ) ||
 800df04:	68ea      	ldr	r2, [r5, #12]
 800df06:	429a      	cmp	r2, r3
 800df08:	d8e0      	bhi.n	800decc <RegionCommonUpdateBandTimeOff+0x24>
 800df0a:	f1b8 0f00 	cmp.w	r8, #0
 800df0e:	d101      	bne.n	800df14 <RegionCommonUpdateBandTimeOff+0x6c>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800df10:	2f00      	cmp	r7, #0
 800df12:	d1db      	bne.n	800decc <RegionCommonUpdateBandTimeOff+0x24>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 800df14:	2100      	movs	r1, #0
 800df16:	7529      	strb	r1, [r5, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 800df18:	6929      	ldr	r1, [r5, #16]
 800df1a:	4299      	cmp	r1, r3
 800df1c:	d907      	bls.n	800df2e <RegionCommonUpdateBandTimeOff+0x86>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800df1e:	1a9b      	subs	r3, r3, r2
 800df20:	9a05      	ldr	r2, [sp, #20]
 800df22:	429a      	cmp	r2, r3
 800df24:	bf28      	it	cs
 800df26:	461a      	movcs	r2, r3
 800df28:	9205      	str	r2, [sp, #20]
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 800df2a:	3601      	adds	r6, #1
 800df2c:	b2f6      	uxtb	r6, r6
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 800df2e:	2f00      	cmp	r7, #0
 800df30:	d1d0      	bne.n	800ded4 <RegionCommonUpdateBandTimeOff+0x2c>
            {
                SysTime_t backoffTimeRange = {
 800df32:	2300      	movs	r3, #0
 800df34:	9306      	str	r3, [sp, #24]
 800df36:	f8ad 301c 	strh.w	r3, [sp, #28]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 800df3a:	2864      	cmp	r0, #100	; 0x64
 800df3c:	d024      	beq.n	800df88 <RegionCommonUpdateBandTimeOff+0xe0>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800df3e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800df42:	d025      	beq.n	800df90 <RegionCommonUpdateBandTimeOff+0xe8>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800df44:	4b19      	ldr	r3, [pc, #100]	; (800dfac <RegionCommonUpdateBandTimeOff+0x104>)
 800df46:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800df48:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800df4a:	4a18      	ldr	r2, [pc, #96]	; (800dfac <RegionCommonUpdateBandTimeOff+0x104>)
 800df4c:	4293      	cmp	r3, r2
 800df4e:	d90c      	bls.n	800df6a <RegionCommonUpdateBandTimeOff+0xc2>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800df50:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800df54:	3b30      	subs	r3, #48	; 0x30
 800df56:	4a16      	ldr	r2, [pc, #88]	; (800dfb0 <RegionCommonUpdateBandTimeOff+0x108>)
 800df58:	fba2 2303 	umull	r2, r3, r2, r3
 800df5c:	0c1b      	lsrs	r3, r3, #16
 800df5e:	4a15      	ldr	r2, [pc, #84]	; (800dfb4 <RegionCommonUpdateBandTimeOff+0x10c>)
 800df60:	fb03 2202 	mla	r2, r3, r2, r2
 800df64:	9b06      	ldr	r3, [sp, #24]
 800df66:	4413      	add	r3, r2
 800df68:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 800df6a:	ad06      	add	r5, sp, #24
 800df6c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800df6e:	9300      	str	r3, [sp, #0]
 800df70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800df72:	e895 0006 	ldmia.w	r5, {r1, r2}
 800df76:	4628      	mov	r0, r5
 800df78:	f004 fe87 	bl	8012c8a <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 800df7c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800df80:	f004 fefc 	bl	8012d7c <SysTimeToMs>
 800df84:	9005      	str	r0, [sp, #20]
 800df86:	e7a5      	b.n	800ded4 <RegionCommonUpdateBandTimeOff+0x2c>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 800df88:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800df8c:	9306      	str	r3, [sp, #24]
 800df8e:	e7db      	b.n	800df48 <RegionCommonUpdateBandTimeOff+0xa0>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 800df90:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 800df94:	9306      	str	r3, [sp, #24]
 800df96:	e7d7      	b.n	800df48 <RegionCommonUpdateBandTimeOff+0xa0>
            }
        }
    }

    if( validBands == 0 )
 800df98:	b11e      	cbz	r6, 800dfa2 <RegionCommonUpdateBandTimeOff+0xfa>
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
    }
    return minTimeToWait;
}
 800df9a:	9805      	ldr	r0, [sp, #20]
 800df9c:	b009      	add	sp, #36	; 0x24
 800df9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return TIMERTIME_T_MAX;
 800dfa2:	f04f 33ff 	mov.w	r3, #4294967295
 800dfa6:	9305      	str	r3, [sp, #20]
 800dfa8:	e7f7      	b.n	800df9a <RegionCommonUpdateBandTimeOff+0xf2>
 800dfaa:	bf00      	nop
 800dfac:	0001ec30 	.word	0x0001ec30
 800dfb0:	c22e4507 	.word	0xc22e4507
 800dfb4:	00015180 	.word	0x00015180

0800dfb8 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800dfb8:	7803      	ldrb	r3, [r0, #0]
 800dfba:	2b03      	cmp	r3, #3
 800dfbc:	d001      	beq.n	800dfc2 <RegionCommonParseLinkAdrReq+0xa>
    uint8_t retIndex = 0;
 800dfbe:	2000      	movs	r0, #0

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
    }
    return retIndex;
}
 800dfc0:	4770      	bx	lr
        linkAdrParams->Datarate = payload[1];
 800dfc2:	7842      	ldrb	r2, [r0, #1]
 800dfc4:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800dfc8:	704b      	strb	r3, [r1, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800dfca:	f003 030f 	and.w	r3, r3, #15
 800dfce:	708b      	strb	r3, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800dfd0:	0913      	lsrs	r3, r2, #4
 800dfd2:	704b      	strb	r3, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800dfd4:	7883      	ldrb	r3, [r0, #2]
 800dfd6:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800dfd8:	78c2      	ldrb	r2, [r0, #3]
 800dfda:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800dfde:	808b      	strh	r3, [r1, #4]
        linkAdrParams->NbRep = payload[4];
 800dfe0:	7903      	ldrb	r3, [r0, #4]
 800dfe2:	700b      	strb	r3, [r1, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800dfe4:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800dfe8:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800dfea:	f003 030f 	and.w	r3, r3, #15
 800dfee:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
 800dff0:	2005      	movs	r0, #5
 800dff2:	4770      	bx	lr

0800dff4 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800dff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dff8:	b085      	sub	sp, #20
 800dffa:	4604      	mov	r4, r0
 800dffc:	4688      	mov	r8, r1
 800dffe:	4617      	mov	r7, r2
 800e000:	461e      	mov	r6, r3
    uint8_t status = verifyParams->Status;
 800e002:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 800e004:	f990 a006 	ldrsb.w	sl, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
 800e008:	f990 9007 	ldrsb.w	r9, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 800e00c:	f990 b008 	ldrsb.w	fp, [r0, #8]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800e010:	7943      	ldrb	r3, [r0, #5]
 800e012:	b92b      	cbnz	r3, 800e020 <RegionCommonLinkAdrReqVerifyParams+0x2c>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 800e014:	f990 b00b 	ldrsb.w	fp, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 800e018:	f990 a009 	ldrsb.w	sl, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 800e01c:	f990 900a 	ldrsb.w	r9, [r0, #10]
    }

    if( status != 0 )
 800e020:	b355      	cbz	r5, 800e078 <RegionCommonLinkAdrReqVerifyParams+0x84>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 800e022:	f1ba 0f0f 	cmp.w	sl, #15
 800e026:	d114      	bne.n	800e052 <RegionCommonLinkAdrReqVerifyParams+0x5e>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 800e028:	f994 a009 	ldrsb.w	sl, [r4, #9]
        {
            status &= 0xFD; // Datarate KO
        }

        // Verify tx power
        if( txPower == 0x0F )
 800e02c:	f1b9 0f0f 	cmp.w	r9, #15
 800e030:	d020      	beq.n	800e074 <RegionCommonLinkAdrReqVerifyParams+0x80>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800e032:	f994 301d 	ldrsb.w	r3, [r4, #29]
 800e036:	9303      	str	r3, [sp, #12]
 800e038:	f994 201c 	ldrsb.w	r2, [r4, #28]
 800e03c:	461c      	mov	r4, r3
 800e03e:	4619      	mov	r1, r3
 800e040:	4648      	mov	r0, r9
 800e042:	f7ff fe98 	bl	800dd76 <RegionCommonValueInRange>
 800e046:	b9b8      	cbnz	r0, 800e078 <RegionCommonLinkAdrReqVerifyParams+0x84>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 800e048:	454c      	cmp	r4, r9
 800e04a:	dc21      	bgt.n	800e090 <RegionCommonLinkAdrReqVerifyParams+0x9c>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 800e04c:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
 800e050:	e012      	b.n	800e078 <RegionCommonLinkAdrReqVerifyParams+0x84>
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800e052:	69a3      	ldr	r3, [r4, #24]
 800e054:	9301      	str	r3, [sp, #4]
 800e056:	f994 3015 	ldrsb.w	r3, [r4, #21]
 800e05a:	9300      	str	r3, [sp, #0]
 800e05c:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800e060:	4652      	mov	r2, sl
 800e062:	6921      	ldr	r1, [r4, #16]
 800e064:	7b20      	ldrb	r0, [r4, #12]
 800e066:	f7ff fe90 	bl	800dd8a <RegionCommonChanVerifyDr>
 800e06a:	2800      	cmp	r0, #0
 800e06c:	d1de      	bne.n	800e02c <RegionCommonLinkAdrReqVerifyParams+0x38>
            status &= 0xFD; // Datarate KO
 800e06e:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
 800e072:	e7db      	b.n	800e02c <RegionCommonLinkAdrReqVerifyParams+0x38>
            txPower =  verifyParams->CurrentTxPower;
 800e074:	f994 900a 	ldrsb.w	r9, [r4, #10]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 800e078:	2d07      	cmp	r5, #7
 800e07a:	d00c      	beq.n	800e096 <RegionCommonLinkAdrReqVerifyParams+0xa2>
            nbRepetitions = 1;
        }
    }

    // Apply changes
    *dr = datarate;
 800e07c:	f888 a000 	strb.w	sl, [r8]
    *txPow = txPower;
 800e080:	f887 9000 	strb.w	r9, [r7]
    *nbRep = nbRepetitions;
 800e084:	f886 b000 	strb.w	fp, [r6]

    return status;
}
 800e088:	4628      	mov	r0, r5
 800e08a:	b005      	add	sp, #20
 800e08c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                txPower = verifyParams->MaxTxPower;
 800e090:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800e094:	e7f0      	b.n	800e078 <RegionCommonLinkAdrReqVerifyParams+0x84>
        if( nbRepetitions == 0 )
 800e096:	f1bb 0f00 	cmp.w	fp, #0
 800e09a:	d1ef      	bne.n	800e07c <RegionCommonLinkAdrReqVerifyParams+0x88>
            nbRepetitions = 1;
 800e09c:	f04f 0b01 	mov.w	fp, #1
 800e0a0:	e7ec      	b.n	800e07c <RegionCommonLinkAdrReqVerifyParams+0x88>
	...

0800e0a4 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 800e0a4:	4b02      	ldr	r3, [pc, #8]	; (800e0b0 <RegionCommonComputeSymbolTimeLoRa+0xc>)
 800e0a6:	fa03 f000 	lsl.w	r0, r3, r0
}
 800e0aa:	fbb0 f0f1 	udiv	r0, r0, r1
 800e0ae:	4770      	bx	lr
 800e0b0:	000f4240 	.word	0x000f4240

0800e0b4 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}
 800e0b4:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800e0b8:	fbb3 f0f0 	udiv	r0, r3, r0
 800e0bc:	4770      	bx	lr
	...

0800e0c0 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 800e0c0:	b500      	push	{lr}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800e0c2:	f1a1 0c04 	sub.w	ip, r1, #4
 800e0c6:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
 800e0ca:	fb0e f202 	mul.w	r2, lr, r2
 800e0ce:	fb00 220c 	mla	r2, r0, ip, r2
 800e0d2:	0052      	lsls	r2, r2, #1
 800e0d4:	d021      	beq.n	800e11a <RegionCommonComputeRxWindowParameters+0x5a>
 800e0d6:	4402      	add	r2, r0
 800e0d8:	3a01      	subs	r2, #1
 800e0da:	fbb2 f2f0 	udiv	r2, r2, r0
 800e0de:	4291      	cmp	r1, r2
 800e0e0:	bf38      	it	cc
 800e0e2:	4611      	movcc	r1, r2
 800e0e4:	9a01      	ldr	r2, [sp, #4]
 800e0e6:	6011      	str	r1, [r2, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800e0e8:	0082      	lsls	r2, r0, #2
 800e0ea:	fb00 f101 	mul.w	r1, r0, r1
 800e0ee:	b1b9      	cbz	r1, 800e120 <RegionCommonComputeRxWindowParameters+0x60>
 800e0f0:	3101      	adds	r1, #1
 800e0f2:	0849      	lsrs	r1, r1, #1
 800e0f4:	1a51      	subs	r1, r2, r1
 800e0f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e0fa:	fb02 1313 	mls	r3, r2, r3, r1
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	dd10      	ble.n	800e124 <RegionCommonComputeRxWindowParameters+0x64>
 800e102:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 800e106:	4a0b      	ldr	r2, [pc, #44]	; (800e134 <RegionCommonComputeRxWindowParameters+0x74>)
 800e108:	fb82 1203 	smull	r1, r2, r2, r3
 800e10c:	17db      	asrs	r3, r3, #31
 800e10e:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800e112:	9a02      	ldr	r2, [sp, #8]
 800e114:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 800e116:	f85d fb04 	ldr.w	pc, [sp], #4
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800e11a:	fbb2 f2f0 	udiv	r2, r2, r0
 800e11e:	e7de      	b.n	800e0de <RegionCommonComputeRxWindowParameters+0x1e>
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800e120:	0849      	lsrs	r1, r1, #1
 800e122:	e7e7      	b.n	800e0f4 <RegionCommonComputeRxWindowParameters+0x34>
 800e124:	4a03      	ldr	r2, [pc, #12]	; (800e134 <RegionCommonComputeRxWindowParameters+0x74>)
 800e126:	fb82 1203 	smull	r1, r2, r2, r3
 800e12a:	17db      	asrs	r3, r3, #31
 800e12c:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800e130:	e7ef      	b.n	800e112 <RegionCommonComputeRxWindowParameters+0x52>
 800e132:	bf00      	nop
 800e134:	10624dd3 	.word	0x10624dd3

0800e138 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800e138:	b538      	push	{r3, r4, r5, lr}
 800e13a:	460d      	mov	r5, r1
 800e13c:	4614      	mov	r4, r2
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800e13e:	0040      	lsls	r0, r0, #1
 800e140:	f7f2 fc4c 	bl	80009dc <__aeabi_ui2f>
 800e144:	4601      	mov	r1, r0
 800e146:	4628      	mov	r0, r5
 800e148:	f7f2 fb96 	bl	8000878 <__aeabi_fsub>
 800e14c:	4621      	mov	r1, r4
 800e14e:	f7f2 fb93 	bl	8000878 <__aeabi_fsub>
 800e152:	f7f2 fa85 	bl	8000660 <__aeabi_f2d>
 800e156:	f005 fdd7 	bl	8013d08 <floor>
 800e15a:	f7f2 fb61 	bl	8000820 <__aeabi_d2iz>

    return phyTxPower;
}
 800e15e:	b240      	sxtb	r0, r0
 800e160:	bd38      	pop	{r3, r4, r5, pc}

0800e162 <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 800e162:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e166:	b083      	sub	sp, #12
 800e168:	4605      	mov	r5, r0
 800e16a:	468b      	mov	fp, r1
 800e16c:	9200      	str	r2, [sp, #0]
 800e16e:	9301      	str	r3, [sp, #4]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800e170:	2600      	movs	r6, #0
 800e172:	46b0      	mov	r8, r6
    uint8_t nbRestrictedChannelsCount = 0;
 800e174:	46b2      	mov	sl, r6
    uint8_t nbChannelCount = 0;
 800e176:	46b1      	mov	r9, r6
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800e178:	e04a      	b.n	800e210 <RegionCommonCountNbOfEnabledChannels+0xae>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800e17a:	7a3a      	ldrb	r2, [r7, #8]
 800e17c:	f342 0103 	sbfx	r1, r2, #0, #4
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800e180:	f342 1203 	sbfx	r2, r2, #4, #4
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800e184:	b252      	sxtb	r2, r2
 800e186:	b249      	sxtb	r1, r1
 800e188:	f995 0001 	ldrsb.w	r0, [r5, #1]
 800e18c:	f7ff fdf3 	bl	800dd76 <RegionCommonValueInRange>
 800e190:	b178      	cbz	r0, 800e1b2 <RegionCommonCountNbOfEnabledChannels+0x50>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 800e192:	68ea      	ldr	r2, [r5, #12]
 800e194:	7a7b      	ldrb	r3, [r7, #9]
 800e196:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e19a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e19e:	7d1b      	ldrb	r3, [r3, #20]
 800e1a0:	b35b      	cbz	r3, 800e1fa <RegionCommonCountNbOfEnabledChannels+0x98>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
                    continue;
                }
                enabledChannels[nbChannelCount++] = i + j;
 800e1a2:	f109 0301 	add.w	r3, r9, #1
 800e1a6:	eb08 0204 	add.w	r2, r8, r4
 800e1aa:	f80b 2009 	strb.w	r2, [fp, r9]
 800e1ae:	fa5f f983 	uxtb.w	r9, r3
        for( uint8_t j = 0; j < 16; j++ )
 800e1b2:	3401      	adds	r4, #1
 800e1b4:	b2e4      	uxtb	r4, r4
 800e1b6:	2c0f      	cmp	r4, #15
 800e1b8:	d824      	bhi.n	800e204 <RegionCommonCountNbOfEnabledChannels+0xa2>
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 800e1ba:	686b      	ldr	r3, [r5, #4]
 800e1bc:	0072      	lsls	r2, r6, #1
 800e1be:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 800e1c2:	4123      	asrs	r3, r4
 800e1c4:	f013 0f01 	tst.w	r3, #1
 800e1c8:	d0f3      	beq.n	800e1b2 <RegionCommonCountNbOfEnabledChannels+0x50>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 800e1ca:	68a8      	ldr	r0, [r5, #8]
 800e1cc:	eb08 0304 	add.w	r3, r8, r4
 800e1d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e1d4:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 800e1d8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d0e8      	beq.n	800e1b2 <RegionCommonCountNbOfEnabledChannels+0x50>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800e1e0:	782b      	ldrb	r3, [r5, #0]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d1c9      	bne.n	800e17a <RegionCommonCountNbOfEnabledChannels+0x18>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 800e1e6:	696b      	ldr	r3, [r5, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d0c6      	beq.n	800e17a <RegionCommonCountNbOfEnabledChannels+0x18>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 800e1ec:	5a9b      	ldrh	r3, [r3, r2]
 800e1ee:	fa43 f104 	asr.w	r1, r3, r4
 800e1f2:	f011 0f01 	tst.w	r1, #1
 800e1f6:	d1c0      	bne.n	800e17a <RegionCommonCountNbOfEnabledChannels+0x18>
 800e1f8:	e7db      	b.n	800e1b2 <RegionCommonCountNbOfEnabledChannels+0x50>
                    nbRestrictedChannelsCount++;
 800e1fa:	f10a 0a01 	add.w	sl, sl, #1
 800e1fe:	fa5f fa8a 	uxtb.w	sl, sl
                    continue;
 800e202:	e7d6      	b.n	800e1b2 <RegionCommonCountNbOfEnabledChannels+0x50>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800e204:	f108 0810 	add.w	r8, r8, #16
 800e208:	fa5f f888 	uxtb.w	r8, r8
 800e20c:	3601      	adds	r6, #1
 800e20e:	b2f6      	uxtb	r6, r6
 800e210:	fa1f f388 	uxth.w	r3, r8
 800e214:	8a2a      	ldrh	r2, [r5, #16]
 800e216:	4293      	cmp	r3, r2
 800e218:	d201      	bcs.n	800e21e <RegionCommonCountNbOfEnabledChannels+0xbc>
        for( uint8_t j = 0; j < 16; j++ )
 800e21a:	2400      	movs	r4, #0
 800e21c:	e7cb      	b.n	800e1b6 <RegionCommonCountNbOfEnabledChannels+0x54>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 800e21e:	9b00      	ldr	r3, [sp, #0]
 800e220:	f883 9000 	strb.w	r9, [r3]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800e224:	9b01      	ldr	r3, [sp, #4]
 800e226:	f883 a000 	strb.w	sl, [r3]
}
 800e22a:	b003      	add	sp, #12
 800e22c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e230 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 800e230:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e234:	b085      	sub	sp, #20
 800e236:	4604      	mov	r4, r0
 800e238:	460f      	mov	r7, r1
 800e23a:	4616      	mov	r6, r2
 800e23c:	461d      	mov	r5, r3
 800e23e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800e242:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800e246:	6840      	ldr	r0, [r0, #4]
 800e248:	f004 fe18 	bl	8012e7c <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800e24c:	6823      	ldr	r3, [r4, #0]
 800e24e:	1a1b      	subs	r3, r3, r0
 800e250:	f8c9 3000 	str.w	r3, [r9]
    *nbRestrictedChannels = 1;
 800e254:	2301      	movs	r3, #1
 800e256:	f888 3000 	strb.w	r3, [r8]
    *nbEnabledChannels = 0;
 800e25a:	2300      	movs	r3, #0
 800e25c:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800e25e:	6863      	ldr	r3, [r4, #4]
 800e260:	b113      	cbz	r3, 800e268 <RegionCommonIdentifyChannels+0x38>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 800e262:	6823      	ldr	r3, [r4, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800e264:	4283      	cmp	r3, r0
 800e266:	d81e      	bhi.n	800e2a6 <RegionCommonIdentifyChannels+0x76>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800e268:	2300      	movs	r3, #0
 800e26a:	603b      	str	r3, [r7, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800e26c:	69e3      	ldr	r3, [r4, #28]
 800e26e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800e272:	781f      	ldrb	r7, [r3, #0]
 800e274:	69a3      	ldr	r3, [r4, #24]
 800e276:	9303      	str	r3, [sp, #12]
 800e278:	ab01      	add	r3, sp, #4
 800e27a:	f104 020c 	add.w	r2, r4, #12
 800e27e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e282:	e883 0003 	stmia.w	r3, {r0, r1}
 800e286:	7d23      	ldrb	r3, [r4, #20]
 800e288:	9300      	str	r3, [sp, #0]
 800e28a:	7a23      	ldrb	r3, [r4, #8]
 800e28c:	7a62      	ldrb	r2, [r4, #9]
 800e28e:	4661      	mov	r1, ip
 800e290:	4638      	mov	r0, r7
 800e292:	f7ff fe09 	bl	800dea8 <RegionCommonUpdateBandTimeOff>
 800e296:	f8c9 0000 	str.w	r0, [r9]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800e29a:	4643      	mov	r3, r8
 800e29c:	462a      	mov	r2, r5
 800e29e:	4631      	mov	r1, r6
 800e2a0:	69e0      	ldr	r0, [r4, #28]
 800e2a2:	f7ff ff5e 	bl	800e162 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 800e2a6:	782b      	ldrb	r3, [r5, #0]
 800e2a8:	b923      	cbnz	r3, 800e2b4 <RegionCommonIdentifyChannels+0x84>
    {
        *nextTxDelay = 0;
        return LORAMAC_STATUS_OK;
    }
    else if( *nbRestrictedChannels > 0 )
 800e2aa:	f898 3000 	ldrb.w	r3, [r8]
 800e2ae:	b13b      	cbz	r3, 800e2c0 <RegionCommonIdentifyChannels+0x90>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 800e2b0:	200b      	movs	r0, #11
 800e2b2:	e002      	b.n	800e2ba <RegionCommonIdentifyChannels+0x8a>
        *nextTxDelay = 0;
 800e2b4:	2000      	movs	r0, #0
 800e2b6:	f8c9 0000 	str.w	r0, [r9]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 800e2ba:	b005      	add	sp, #20
 800e2bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800e2c0:	200c      	movs	r0, #12
 800e2c2:	e7fa      	b.n	800e2ba <RegionCommonIdentifyChannels+0x8a>

0800e2c4 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 800e2c4:	b570      	push	{r4, r5, r6, lr}
 800e2c6:	b082      	sub	sp, #8
 800e2c8:	4605      	mov	r5, r0
    int8_t drLocal = params->CurrentDr;
 800e2ca:	f990 4000 	ldrsb.w	r4, [r0]

    if( params->CurrentDr == params->MinDr )
 800e2ce:	f990 6002 	ldrsb.w	r6, [r0, #2]
 800e2d2:	42a6      	cmp	r6, r4
 800e2d4:	d011      	beq.n	800e2fa <RegionCommonGetNextLowerTxDr+0x36>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 800e2d6:	3c01      	subs	r4, #1
 800e2d8:	b264      	sxtb	r4, r4
        } while( ( drLocal != params->MinDr ) &&
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 800e2da:	42a6      	cmp	r6, r4
 800e2dc:	d00e      	beq.n	800e2fc <RegionCommonGetNextLowerTxDr+0x38>
 800e2de:	68ab      	ldr	r3, [r5, #8]
 800e2e0:	9301      	str	r3, [sp, #4]
 800e2e2:	f995 3001 	ldrsb.w	r3, [r5, #1]
 800e2e6:	9300      	str	r3, [sp, #0]
 800e2e8:	4633      	mov	r3, r6
 800e2ea:	4622      	mov	r2, r4
 800e2ec:	6869      	ldr	r1, [r5, #4]
 800e2ee:	78e8      	ldrb	r0, [r5, #3]
 800e2f0:	f7ff fd4b 	bl	800dd8a <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 800e2f4:	2800      	cmp	r0, #0
 800e2f6:	d0ee      	beq.n	800e2d6 <RegionCommonGetNextLowerTxDr+0x12>
 800e2f8:	e000      	b.n	800e2fc <RegionCommonGetNextLowerTxDr+0x38>
        return params->MinDr;
 800e2fa:	4634      	mov	r4, r6

        return drLocal;
    }
}
 800e2fc:	4620      	mov	r0, r4
 800e2fe:	b002      	add	sp, #8
 800e300:	bd70      	pop	{r4, r5, r6, pc}

0800e302 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
}
 800e302:	4288      	cmp	r0, r1
 800e304:	bfb8      	it	lt
 800e306:	4608      	movlt	r0, r1
 800e308:	4770      	bx	lr
	...

0800e30c <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 800e30c:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 800e310:	4a05      	ldr	r2, [pc, #20]	; (800e328 <RegionCommonGetBandwidth+0x1c>)
 800e312:	4293      	cmp	r3, r2
 800e314:	d004      	beq.n	800e320 <RegionCommonGetBandwidth+0x14>
 800e316:	4a05      	ldr	r2, [pc, #20]	; (800e32c <RegionCommonGetBandwidth+0x20>)
 800e318:	4293      	cmp	r3, r2
 800e31a:	d103      	bne.n	800e324 <RegionCommonGetBandwidth+0x18>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 800e31c:	2002      	movs	r0, #2
 800e31e:	4770      	bx	lr
            return 1;
 800e320:	2001      	movs	r0, #1
 800e322:	4770      	bx	lr
    switch( bandwidths[drIndex] )
 800e324:	2000      	movs	r0, #0
    }
}
 800e326:	4770      	bx	lr
 800e328:	0003d090 	.word	0x0003d090
 800e32c:	0007a120 	.word	0x0007a120

0800e330 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 800e330:	b500      	push	{lr}
 800e332:	b085      	sub	sp, #20
    if ( rxSlot < RX_SLOT_NONE )
 800e334:	2805      	cmp	r0, #5
 800e336:	d80e      	bhi.n	800e356 <RegionCommonRxConfigPrint+0x26>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 800e338:	9202      	str	r2, [sp, #8]
 800e33a:	9101      	str	r1, [sp, #4]
 800e33c:	4b0a      	ldr	r3, [pc, #40]	; (800e368 <RegionCommonRxConfigPrint+0x38>)
 800e33e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800e342:	9300      	str	r3, [sp, #0]
 800e344:	4b09      	ldr	r3, [pc, #36]	; (800e36c <RegionCommonRxConfigPrint+0x3c>)
 800e346:	2201      	movs	r2, #1
 800e348:	2100      	movs	r1, #0
 800e34a:	2002      	movs	r0, #2
 800e34c:	f004 fa78 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 800e350:	b005      	add	sp, #20
 800e352:	f85d fb04 	ldr.w	pc, [sp], #4
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 800e356:	9201      	str	r2, [sp, #4]
 800e358:	9100      	str	r1, [sp, #0]
 800e35a:	4b05      	ldr	r3, [pc, #20]	; (800e370 <RegionCommonRxConfigPrint+0x40>)
 800e35c:	2201      	movs	r2, #1
 800e35e:	2100      	movs	r1, #0
 800e360:	2002      	movs	r0, #2
 800e362:	f004 fa6d 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
}
 800e366:	e7f3      	b.n	800e350 <RegionCommonRxConfigPrint+0x20>
 800e368:	08014684 	.word	0x08014684
 800e36c:	0801461c 	.word	0x0801461c
 800e370:	0801463c 	.word	0x0801463c

0800e374 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 800e374:	b500      	push	{lr}
 800e376:	b083      	sub	sp, #12
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 800e378:	9101      	str	r1, [sp, #4]
 800e37a:	9000      	str	r0, [sp, #0]
 800e37c:	4b04      	ldr	r3, [pc, #16]	; (800e390 <RegionCommonTxConfigPrint+0x1c>)
 800e37e:	2201      	movs	r2, #1
 800e380:	2100      	movs	r1, #0
 800e382:	2002      	movs	r0, #2
 800e384:	f004 fa5c 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
}
 800e388:	b003      	add	sp, #12
 800e38a:	f85d fb04 	ldr.w	pc, [sp], #4
 800e38e:	bf00      	nop
 800e390:	08014658 	.word	0x08014658

0800e394 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 800e394:	b538      	push	{r3, r4, r5, lr}
 800e396:	4604      	mov	r4, r0
 800e398:	460d      	mov	r5, r1
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800e39a:	4b1b      	ldr	r3, [pc, #108]	; (800e408 <VerifyRfFreq+0x74>)
 800e39c:	6a1b      	ldr	r3, [r3, #32]
 800e39e:	4798      	blx	r3
 800e3a0:	b130      	cbz	r0, 800e3b0 <VerifyRfFreq+0x1c>
    {
        return false;
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 800e3a2:	4b1a      	ldr	r3, [pc, #104]	; (800e40c <VerifyRfFreq+0x78>)
 800e3a4:	4423      	add	r3, r4
 800e3a6:	4a1a      	ldr	r2, [pc, #104]	; (800e410 <VerifyRfFreq+0x7c>)
 800e3a8:	4293      	cmp	r3, r2
 800e3aa:	d802      	bhi.n	800e3b2 <VerifyRfFreq+0x1e>
    {
        *band = 2;
 800e3ac:	2302      	movs	r3, #2
 800e3ae:	702b      	strb	r3, [r5, #0]
    else
    {
        return false;
    }
    return true;
}
 800e3b0:	bd38      	pop	{r3, r4, r5, pc}
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 800e3b2:	4b18      	ldr	r3, [pc, #96]	; (800e414 <VerifyRfFreq+0x80>)
 800e3b4:	4423      	add	r3, r4
 800e3b6:	4a18      	ldr	r2, [pc, #96]	; (800e418 <VerifyRfFreq+0x84>)
 800e3b8:	4293      	cmp	r3, r2
 800e3ba:	d802      	bhi.n	800e3c2 <VerifyRfFreq+0x2e>
        *band = 0;
 800e3bc:	2300      	movs	r3, #0
 800e3be:	702b      	strb	r3, [r5, #0]
 800e3c0:	e7f6      	b.n	800e3b0 <VerifyRfFreq+0x1c>
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 800e3c2:	4b16      	ldr	r3, [pc, #88]	; (800e41c <VerifyRfFreq+0x88>)
 800e3c4:	4423      	add	r3, r4
 800e3c6:	4a16      	ldr	r2, [pc, #88]	; (800e420 <VerifyRfFreq+0x8c>)
 800e3c8:	4293      	cmp	r3, r2
 800e3ca:	d802      	bhi.n	800e3d2 <VerifyRfFreq+0x3e>
        *band = 1;
 800e3cc:	2301      	movs	r3, #1
 800e3ce:	702b      	strb	r3, [r5, #0]
 800e3d0:	e7ee      	b.n	800e3b0 <VerifyRfFreq+0x1c>
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 800e3d2:	4b14      	ldr	r3, [pc, #80]	; (800e424 <VerifyRfFreq+0x90>)
 800e3d4:	4423      	add	r3, r4
 800e3d6:	4a14      	ldr	r2, [pc, #80]	; (800e428 <VerifyRfFreq+0x94>)
 800e3d8:	4293      	cmp	r3, r2
 800e3da:	d802      	bhi.n	800e3e2 <VerifyRfFreq+0x4e>
        *band = 5;
 800e3dc:	2305      	movs	r3, #5
 800e3de:	702b      	strb	r3, [r5, #0]
 800e3e0:	e7e6      	b.n	800e3b0 <VerifyRfFreq+0x1c>
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 800e3e2:	4b12      	ldr	r3, [pc, #72]	; (800e42c <VerifyRfFreq+0x98>)
 800e3e4:	4423      	add	r3, r4
 800e3e6:	4a12      	ldr	r2, [pc, #72]	; (800e430 <VerifyRfFreq+0x9c>)
 800e3e8:	4293      	cmp	r3, r2
 800e3ea:	d802      	bhi.n	800e3f2 <VerifyRfFreq+0x5e>
        *band = 3;
 800e3ec:	2303      	movs	r3, #3
 800e3ee:	702b      	strb	r3, [r5, #0]
 800e3f0:	e7de      	b.n	800e3b0 <VerifyRfFreq+0x1c>
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 800e3f2:	4b10      	ldr	r3, [pc, #64]	; (800e434 <VerifyRfFreq+0xa0>)
 800e3f4:	4423      	add	r3, r4
 800e3f6:	4a10      	ldr	r2, [pc, #64]	; (800e438 <VerifyRfFreq+0xa4>)
 800e3f8:	4293      	cmp	r3, r2
 800e3fa:	d802      	bhi.n	800e402 <VerifyRfFreq+0x6e>
        *band = 4;
 800e3fc:	2304      	movs	r3, #4
 800e3fe:	702b      	strb	r3, [r5, #0]
 800e400:	e7d6      	b.n	800e3b0 <VerifyRfFreq+0x1c>
        return false;
 800e402:	2000      	movs	r0, #0
 800e404:	e7d4      	b.n	800e3b0 <VerifyRfFreq+0x1c>
 800e406:	bf00      	nop
 800e408:	08014cbc 	.word	0x08014cbc
 800e40c:	cc8faa40 	.word	0xcc8faa40
 800e410:	001e847f 	.word	0x001e847f
 800e414:	cc7125c0 	.word	0xcc7125c0
 800e418:	002dc6c0 	.word	0x002dc6c0
 800e41c:	cc435eff 	.word	0xcc435eff
 800e420:	000927bf 	.word	0x000927bf
 800e424:	cc38b0a0 	.word	0xcc38b0a0
 800e428:	0007a120 	.word	0x0007a120
 800e42c:	cc2e0240 	.word	0xcc2e0240
 800e430:	0003d090 	.word	0x0003d090
 800e434:	cc296e60 	.word	0xcc296e60
 800e438:	000493e0 	.word	0x000493e0

0800e43c <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800e43c:	b570      	push	{r4, r5, r6, lr}
 800e43e:	b084      	sub	sp, #16
 800e440:	4605      	mov	r5, r0
 800e442:	460c      	mov	r4, r1
    int8_t phyDr = DataratesEU868[datarate];
 800e444:	4b13      	ldr	r3, [pc, #76]	; (800e494 <GetTimeOnAir+0x58>)
 800e446:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 800e448:	4913      	ldr	r1, [pc, #76]	; (800e498 <GetTimeOnAir+0x5c>)
 800e44a:	f7ff ff5f 	bl	800e30c <RegionCommonGetBandwidth>
 800e44e:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 800e450:	2d07      	cmp	r5, #7
 800e452:	d00e      	beq.n	800e472 <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800e454:	4b11      	ldr	r3, [pc, #68]	; (800e49c <GetTimeOnAir+0x60>)
 800e456:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800e458:	2001      	movs	r0, #1
 800e45a:	9003      	str	r0, [sp, #12]
 800e45c:	b2e4      	uxtb	r4, r4
 800e45e:	9402      	str	r4, [sp, #8]
 800e460:	2300      	movs	r3, #0
 800e462:	9301      	str	r3, [sp, #4]
 800e464:	2308      	movs	r3, #8
 800e466:	9300      	str	r3, [sp, #0]
 800e468:	4603      	mov	r3, r0
 800e46a:	4632      	mov	r2, r6
 800e46c:	47a8      	blx	r5
    }
    return timeOnAir;
}
 800e46e:	b004      	add	sp, #16
 800e470:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800e472:	4b0a      	ldr	r3, [pc, #40]	; (800e49c <GetTimeOnAir+0x60>)
 800e474:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800e476:	2301      	movs	r3, #1
 800e478:	9303      	str	r3, [sp, #12]
 800e47a:	b2e4      	uxtb	r4, r4
 800e47c:	9402      	str	r4, [sp, #8]
 800e47e:	2000      	movs	r0, #0
 800e480:	9001      	str	r0, [sp, #4]
 800e482:	2305      	movs	r3, #5
 800e484:	9300      	str	r3, [sp, #0]
 800e486:	4603      	mov	r3, r0
 800e488:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e48c:	fb06 f202 	mul.w	r2, r6, r2
 800e490:	47a8      	blx	r5
 800e492:	e7ec      	b.n	800e46e <GetTimeOnAir+0x32>
 800e494:	080146bc 	.word	0x080146bc
 800e498:	0801469c 	.word	0x0801469c
 800e49c:	08014cbc 	.word	0x08014cbc

0800e4a0 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 800e4a0:	b500      	push	{lr}
 800e4a2:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	9304      	str	r3, [sp, #16]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 800e4a8:	7803      	ldrb	r3, [r0, #0]
 800e4aa:	3b0b      	subs	r3, #11
 800e4ac:	2b2e      	cmp	r3, #46	; 0x2e
 800e4ae:	d830      	bhi.n	800e512 <RegionEU868GetPhyParam+0x72>
 800e4b0:	e8df f003 	tbb	[pc, r3]
 800e4b4:	403a3734 	.word	0x403a3734
 800e4b8:	514d4946 	.word	0x514d4946
 800e4bc:	615d5955 	.word	0x615d5955
 800e4c0:	6d2f6a2f 	.word	0x6d2f6a2f
 800e4c4:	2f7c7973 	.word	0x2f7c7973
 800e4c8:	1884802f 	.word	0x1884802f
 800e4cc:	2f2f2f2f 	.word	0x2f2f2f2f
 800e4d0:	2f2f2f2f 	.word	0x2f2f2f2f
 800e4d4:	2f2f2f2f 	.word	0x2f2f2f2f
 800e4d8:	918a872f 	.word	0x918a872f
 800e4dc:	97942f2f 	.word	0x97942f2f
 800e4e0:	9a2f      	.short	0x9a2f
 800e4e2:	a0          	.byte	0xa0
 800e4e3:	00          	.byte	0x00
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 800e4e4:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800e4e8:	f88d 3004 	strb.w	r3, [sp, #4]
 800e4ec:	2307      	movs	r3, #7
 800e4ee:	f88d 3005 	strb.w	r3, [sp, #5]
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	f88d 3006 	strb.w	r3, [sp, #6]
 800e4f8:	2310      	movs	r3, #16
 800e4fa:	f88d 3007 	strb.w	r3, [sp, #7]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800e4fe:	4b41      	ldr	r3, [pc, #260]	; (800e604 <RegionEU868GetPhyParam+0x164>)
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	f503 6290 	add.w	r2, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800e506:	9202      	str	r2, [sp, #8]
 800e508:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800e50a:	a801      	add	r0, sp, #4
 800e50c:	f7ff feda 	bl	800e2c4 <RegionCommonGetNextLowerTxDr>
 800e510:	9004      	str	r0, [sp, #16]
            break;
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 800e512:	9804      	ldr	r0, [sp, #16]
 800e514:	9005      	str	r0, [sp, #20]
}
 800e516:	b007      	add	sp, #28
 800e518:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800e51c:	2340      	movs	r3, #64	; 0x40
 800e51e:	9304      	str	r3, [sp, #16]
            break;
 800e520:	e7f7      	b.n	800e512 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800e522:	2320      	movs	r3, #32
 800e524:	9304      	str	r3, [sp, #16]
            break;
 800e526:	e7f4      	b.n	800e512 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 800e528:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e52c:	4a36      	ldr	r2, [pc, #216]	; (800e608 <RegionEU868GetPhyParam+0x168>)
 800e52e:	5cd3      	ldrb	r3, [r2, r3]
 800e530:	9304      	str	r3, [sp, #16]
            break;
 800e532:	e7ee      	b.n	800e512 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 800e534:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e538:	4a34      	ldr	r2, [pc, #208]	; (800e60c <RegionEU868GetPhyParam+0x16c>)
 800e53a:	5cd3      	ldrb	r3, [r2, r3]
 800e53c:	9304      	str	r3, [sp, #16]
            break;
 800e53e:	e7e8      	b.n	800e512 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 800e540:	2301      	movs	r3, #1
 800e542:	9304      	str	r3, [sp, #16]
            break;
 800e544:	e7e5      	b.n	800e512 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_MAX_RX_WINDOW;
 800e546:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800e54a:	9304      	str	r3, [sp, #16]
            break;
 800e54c:	e7e1      	b.n	800e512 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800e54e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e552:	9304      	str	r3, [sp, #16]
            break;
 800e554:	e7dd      	b.n	800e512 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800e556:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800e55a:	9304      	str	r3, [sp, #16]
            break;
 800e55c:	e7d9      	b.n	800e512 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800e55e:	f241 3388 	movw	r3, #5000	; 0x1388
 800e562:	9304      	str	r3, [sp, #16]
            break;
 800e564:	e7d5      	b.n	800e512 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800e566:	f241 7370 	movw	r3, #6000	; 0x1770
 800e56a:	9304      	str	r3, [sp, #16]
            break;
 800e56c:	e7d1      	b.n	800e512 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 800e56e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e572:	9304      	str	r3, [sp, #16]
            break;
 800e574:	e7cd      	b.n	800e512 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 800e576:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800e57a:	4825      	ldr	r0, [pc, #148]	; (800e610 <RegionEU868GetPhyParam+0x170>)
 800e57c:	f002 faaa 	bl	8010ad4 <randr>
 800e580:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800e584:	9004      	str	r0, [sp, #16]
            break;
 800e586:	e7c4      	b.n	800e512 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_RX_WND_2_FREQ;
 800e588:	4b22      	ldr	r3, [pc, #136]	; (800e614 <RegionEU868GetPhyParam+0x174>)
 800e58a:	9304      	str	r3, [sp, #16]
            break;
 800e58c:	e7c1      	b.n	800e512 <RegionEU868GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800e58e:	4b1d      	ldr	r3, [pc, #116]	; (800e604 <RegionEU868GetPhyParam+0x164>)
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800e596:	9304      	str	r3, [sp, #16]
            break;
 800e598:	e7bb      	b.n	800e512 <RegionEU868GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800e59a:	4b1a      	ldr	r3, [pc, #104]	; (800e604 <RegionEU868GetPhyParam+0x164>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 800e5a2:	9304      	str	r3, [sp, #16]
            break;
 800e5a4:	e7b5      	b.n	800e512 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 800e5a6:	2310      	movs	r3, #16
 800e5a8:	9304      	str	r3, [sp, #16]
            break;
 800e5aa:	e7b2      	b.n	800e512 <RegionEU868GetPhyParam+0x72>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800e5ac:	4b15      	ldr	r3, [pc, #84]	; (800e604 <RegionEU868GetPhyParam+0x164>)
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	9304      	str	r3, [sp, #16]
            break;
 800e5b2:	e7ae      	b.n	800e512 <RegionEU868GetPhyParam+0x72>
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 800e5b4:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 800e5b8:	9304      	str	r3, [sp, #16]
            break;
 800e5ba:	e7aa      	b.n	800e512 <RegionEU868GetPhyParam+0x72>
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 800e5bc:	4b16      	ldr	r3, [pc, #88]	; (800e618 <RegionEU868GetPhyParam+0x178>)
 800e5be:	9304      	str	r3, [sp, #16]
            break;
 800e5c0:	e7a7      	b.n	800e512 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 800e5c2:	4b14      	ldr	r3, [pc, #80]	; (800e614 <RegionEU868GetPhyParam+0x174>)
 800e5c4:	9304      	str	r3, [sp, #16]
            break;
 800e5c6:	e7a4      	b.n	800e512 <RegionEU868GetPhyParam+0x72>
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 800e5c8:	2311      	movs	r3, #17
 800e5ca:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 800e5ce:	2302      	movs	r3, #2
 800e5d0:	f88d 3011 	strb.w	r3, [sp, #17]
            break;
 800e5d4:	e79d      	b.n	800e512 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 800e5d6:	2303      	movs	r3, #3
 800e5d8:	9304      	str	r3, [sp, #16]
            break;
 800e5da:	e79a      	b.n	800e512 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 800e5dc:	4b0d      	ldr	r3, [pc, #52]	; (800e614 <RegionEU868GetPhyParam+0x174>)
 800e5de:	9304      	str	r3, [sp, #16]
            break;
 800e5e0:	e797      	b.n	800e512 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 800e5e2:	2303      	movs	r3, #3
 800e5e4:	9304      	str	r3, [sp, #16]
            break;
 800e5e6:	e794      	b.n	800e512 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 800e5e8:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e5ec:	4a0b      	ldr	r2, [pc, #44]	; (800e61c <RegionEU868GetPhyParam+0x17c>)
 800e5ee:	5cd3      	ldrb	r3, [r2, r3]
 800e5f0:	9304      	str	r3, [sp, #16]
            break;
 800e5f2:	e78e      	b.n	800e512 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 800e5f4:	490a      	ldr	r1, [pc, #40]	; (800e620 <RegionEU868GetPhyParam+0x180>)
 800e5f6:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800e5fa:	f7ff fe87 	bl	800e30c <RegionCommonGetBandwidth>
 800e5fe:	9004      	str	r0, [sp, #16]
            break;
 800e600:	e787      	b.n	800e512 <RegionEU868GetPhyParam+0x72>
 800e602:	bf00      	nop
 800e604:	20000e38 	.word	0x20000e38
 800e608:	080146c4 	.word	0x080146c4
 800e60c:	080146cc 	.word	0x080146cc
 800e610:	fffffc18 	.word	0xfffffc18
 800e614:	33d3e608 	.word	0x33d3e608
 800e618:	4009999a 	.word	0x4009999a
 800e61c:	080146bc 	.word	0x080146bc
 800e620:	0801469c 	.word	0x0801469c

0800e624 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800e624:	b510      	push	{r4, lr}
 800e626:	b082      	sub	sp, #8
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800e628:	4b0b      	ldr	r3, [pc, #44]	; (800e658 <RegionEU868SetBandTxDone+0x34>)
 800e62a:	681c      	ldr	r4, [r3, #0]
 800e62c:	4b0b      	ldr	r3, [pc, #44]	; (800e65c <RegionEU868SetBandTxDone+0x38>)
 800e62e:	681a      	ldr	r2, [r3, #0]
 800e630:	7803      	ldrb	r3, [r0, #0]
 800e632:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e636:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e63a:	7a5b      	ldrb	r3, [r3, #9]
 800e63c:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800e640:	6903      	ldr	r3, [r0, #16]
 800e642:	9300      	str	r3, [sp, #0]
 800e644:	68c3      	ldr	r3, [r0, #12]
 800e646:	7842      	ldrb	r2, [r0, #1]
 800e648:	6881      	ldr	r1, [r0, #8]
 800e64a:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 800e64e:	f7ff fc12 	bl	800de76 <RegionCommonSetBandTxDone>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 800e652:	b002      	add	sp, #8
 800e654:	bd10      	pop	{r4, pc}
 800e656:	bf00      	nop
 800e658:	20000e34 	.word	0x20000e34
 800e65c:	20000e38 	.word	0x20000e38

0800e660 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 800e660:	b510      	push	{r4, lr}
 800e662:	b0a4      	sub	sp, #144	; 0x90
 800e664:	4604      	mov	r4, r0
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 800e666:	2290      	movs	r2, #144	; 0x90
 800e668:	2100      	movs	r1, #0
 800e66a:	4668      	mov	r0, sp
 800e66c:	f004 fee4 	bl	8013438 <memset>
 800e670:	2364      	movs	r3, #100	; 0x64
 800e672:	f8ad 3000 	strh.w	r3, [sp]
 800e676:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e67a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e67e:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 800e682:	210a      	movs	r1, #10
 800e684:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
 800e688:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 800e68c:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 800e690:	7a23      	ldrb	r3, [r4, #8]
 800e692:	2b01      	cmp	r3, #1
 800e694:	d031      	beq.n	800e6fa <RegionEU868InitDefaults+0x9a>
 800e696:	2b02      	cmp	r3, #2
 800e698:	d03d      	beq.n	800e716 <RegionEU868InitDefaults+0xb6>
 800e69a:	b10b      	cbz	r3, 800e6a0 <RegionEU868InitDefaults+0x40>
        {
            break;
        }
    }
#endif /* REGION_EU868 */
}
 800e69c:	b024      	add	sp, #144	; 0x90
 800e69e:	bd10      	pop	{r4, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800e6a0:	6820      	ldr	r0, [r4, #0]
 800e6a2:	2800      	cmp	r0, #0
 800e6a4:	d0fa      	beq.n	800e69c <RegionEU868InitDefaults+0x3c>
 800e6a6:	6863      	ldr	r3, [r4, #4]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d0f7      	beq.n	800e69c <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800e6ac:	4a1f      	ldr	r2, [pc, #124]	; (800e72c <RegionEU868InitDefaults+0xcc>)
 800e6ae:	6010      	str	r0, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800e6b0:	4c1f      	ldr	r4, [pc, #124]	; (800e730 <RegionEU868InitDefaults+0xd0>)
 800e6b2:	6023      	str	r3, [r4, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 800e6b4:	2290      	movs	r2, #144	; 0x90
 800e6b6:	4669      	mov	r1, sp
 800e6b8:	f002 fa19 	bl	8010aee <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 800e6bc:	6824      	ldr	r4, [r4, #0]
 800e6be:	4b1d      	ldr	r3, [pc, #116]	; (800e734 <RegionEU868InitDefaults+0xd4>)
 800e6c0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e6c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 800e6c8:	f104 0c0c 	add.w	ip, r4, #12
 800e6cc:	f103 020c 	add.w	r2, r3, #12
 800e6d0:	ca07      	ldmia	r2, {r0, r1, r2}
 800e6d2:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 800e6d6:	f104 0c18 	add.w	ip, r4, #24
 800e6da:	3318      	adds	r3, #24
 800e6dc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e6e0:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800e6e4:	2307      	movs	r3, #7
 800e6e6:	f8a4 348c 	strh.w	r3, [r4, #1164]	; 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800e6ea:	2201      	movs	r2, #1
 800e6ec:	f204 418c 	addw	r1, r4, #1164	; 0x48c
 800e6f0:	f504 6090 	add.w	r0, r4, #1152	; 0x480
 800e6f4:	f7ff fbb0 	bl	800de58 <RegionCommonChanMaskCopy>
            break;
 800e6f8:	e7d0      	b.n	800e69c <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 800e6fa:	4b0d      	ldr	r3, [pc, #52]	; (800e730 <RegionEU868InitDefaults+0xd0>)
 800e6fc:	6818      	ldr	r0, [r3, #0]
 800e6fe:	2300      	movs	r3, #0
 800e700:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 800e702:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 800e704:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800e706:	2201      	movs	r2, #1
 800e708:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 800e70c:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800e710:	f7ff fba2 	bl	800de58 <RegionCommonChanMaskCopy>
            break;
 800e714:	e7c2      	b.n	800e69c <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 800e716:	4b06      	ldr	r3, [pc, #24]	; (800e730 <RegionEU868InitDefaults+0xd0>)
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	; 0x48c
 800e71e:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	; 0x480
 800e722:	430a      	orrs	r2, r1
 800e724:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
            break;
 800e728:	e7b8      	b.n	800e69c <RegionEU868InitDefaults+0x3c>
 800e72a:	bf00      	nop
 800e72c:	20000e34 	.word	0x20000e34
 800e730:	20000e38 	.word	0x20000e38
 800e734:	08013ec4 	.word	0x08013ec4

0800e738 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800e738:	b500      	push	{lr}
 800e73a:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    switch( phyAttribute )
 800e73c:	290f      	cmp	r1, #15
 800e73e:	d83c      	bhi.n	800e7ba <RegionEU868Verify+0x82>
 800e740:	e8df f001 	tbb	[pc, r1]
 800e744:	3b3b3b0a 	.word	0x3b3b3b0a
 800e748:	271d133b 	.word	0x271d133b
 800e74c:	3b31313b 	.word	0x3b31313b
 800e750:	083b3b3b 	.word	0x083b3b3b
 800e754:	2001      	movs	r0, #1
 800e756:	e031      	b.n	800e7bc <RegionEU868Verify+0x84>
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 800e758:	2300      	movs	r3, #0
 800e75a:	f88d 3007 	strb.w	r3, [sp, #7]
            return VerifyRfFreq( verify->Frequency, &band );
 800e75e:	f10d 0107 	add.w	r1, sp, #7
 800e762:	6800      	ldr	r0, [r0, #0]
 800e764:	f7ff fe16 	bl	800e394 <VerifyRfFreq>
 800e768:	e028      	b.n	800e7bc <RegionEU868Verify+0x84>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 800e76a:	2207      	movs	r2, #7
 800e76c:	2100      	movs	r1, #0
 800e76e:	f990 0000 	ldrsb.w	r0, [r0]
 800e772:	f7ff fb00 	bl	800dd76 <RegionCommonValueInRange>
 800e776:	3800      	subs	r0, #0
 800e778:	bf18      	it	ne
 800e77a:	2001      	movne	r0, #1
 800e77c:	e01e      	b.n	800e7bc <RegionEU868Verify+0x84>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800e77e:	2205      	movs	r2, #5
 800e780:	2100      	movs	r1, #0
 800e782:	f990 0000 	ldrsb.w	r0, [r0]
 800e786:	f7ff faf6 	bl	800dd76 <RegionCommonValueInRange>
 800e78a:	3800      	subs	r0, #0
 800e78c:	bf18      	it	ne
 800e78e:	2001      	movne	r0, #1
 800e790:	e014      	b.n	800e7bc <RegionEU868Verify+0x84>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 800e792:	2207      	movs	r2, #7
 800e794:	2100      	movs	r1, #0
 800e796:	f990 0000 	ldrsb.w	r0, [r0]
 800e79a:	f7ff faec 	bl	800dd76 <RegionCommonValueInRange>
 800e79e:	3800      	subs	r0, #0
 800e7a0:	bf18      	it	ne
 800e7a2:	2001      	movne	r0, #1
 800e7a4:	e00a      	b.n	800e7bc <RegionEU868Verify+0x84>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 800e7a6:	2207      	movs	r2, #7
 800e7a8:	2100      	movs	r1, #0
 800e7aa:	f990 0000 	ldrsb.w	r0, [r0]
 800e7ae:	f7ff fae2 	bl	800dd76 <RegionCommonValueInRange>
 800e7b2:	3800      	subs	r0, #0
 800e7b4:	bf18      	it	ne
 800e7b6:	2001      	movne	r0, #1
 800e7b8:	e000      	b.n	800e7bc <RegionEU868Verify+0x84>
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
 800e7ba:	2000      	movs	r0, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 800e7bc:	b003      	add	sp, #12
 800e7be:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800e7c4 <RegionEU868ChanMaskSet>:
    }
#endif /* REGION_EU868 */
}

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800e7c4:	b508      	push	{r3, lr}
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 800e7c6:	7903      	ldrb	r3, [r0, #4]
 800e7c8:	b11b      	cbz	r3, 800e7d2 <RegionEU868ChanMaskSet+0xe>
 800e7ca:	2b01      	cmp	r3, #1
 800e7cc:	d00b      	beq.n	800e7e6 <RegionEU868ChanMaskSet+0x22>
 800e7ce:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 800e7d0:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800e7d2:	4b0a      	ldr	r3, [pc, #40]	; (800e7fc <RegionEU868ChanMaskSet+0x38>)
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	2201      	movs	r2, #1
 800e7d8:	6801      	ldr	r1, [r0, #0]
 800e7da:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 800e7de:	f7ff fb3b 	bl	800de58 <RegionCommonChanMaskCopy>
    return true;
 800e7e2:	2001      	movs	r0, #1
            break;
 800e7e4:	e7f4      	b.n	800e7d0 <RegionEU868ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800e7e6:	4b05      	ldr	r3, [pc, #20]	; (800e7fc <RegionEU868ChanMaskSet+0x38>)
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	2201      	movs	r2, #1
 800e7ec:	6801      	ldr	r1, [r0, #0]
 800e7ee:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 800e7f2:	f7ff fb31 	bl	800de58 <RegionCommonChanMaskCopy>
    return true;
 800e7f6:	2001      	movs	r0, #1
            break;
 800e7f8:	e7ea      	b.n	800e7d0 <RegionEU868ChanMaskSet+0xc>
 800e7fa:	bf00      	nop
 800e7fc:	20000e38 	.word	0x20000e38

0800e800 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800e800:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e802:	b083      	sub	sp, #12
 800e804:	460e      	mov	r6, r1
 800e806:	4617      	mov	r7, r2
 800e808:	461c      	mov	r4, r3
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 800e80a:	2807      	cmp	r0, #7
 800e80c:	bfa8      	it	ge
 800e80e:	2007      	movge	r0, #7
 800e810:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 800e812:	4913      	ldr	r1, [pc, #76]	; (800e860 <RegionEU868ComputeRxWindowParameters+0x60>)
 800e814:	f7ff fd7a 	bl	800e30c <RegionCommonGetBandwidth>
 800e818:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 800e81a:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800e81e:	2b07      	cmp	r3, #7
 800e820:	d017      	beq.n	800e852 <RegionEU868ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 800e822:	4a0f      	ldr	r2, [pc, #60]	; (800e860 <RegionEU868ComputeRxWindowParameters+0x60>)
 800e824:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800e828:	4a0e      	ldr	r2, [pc, #56]	; (800e864 <RegionEU868ComputeRxWindowParameters+0x64>)
 800e82a:	5cd0      	ldrb	r0, [r2, r3]
 800e82c:	f7ff fc3a 	bl	800e0a4 <RegionCommonComputeSymbolTimeLoRa>
 800e830:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800e832:	4b0d      	ldr	r3, [pc, #52]	; (800e868 <RegionEU868ComputeRxWindowParameters+0x68>)
 800e834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e836:	4798      	blx	r3
 800e838:	4603      	mov	r3, r0
 800e83a:	f104 020c 	add.w	r2, r4, #12
 800e83e:	9201      	str	r2, [sp, #4]
 800e840:	3408      	adds	r4, #8
 800e842:	9400      	str	r4, [sp, #0]
 800e844:	463a      	mov	r2, r7
 800e846:	4631      	mov	r1, r6
 800e848:	4628      	mov	r0, r5
 800e84a:	f7ff fc39 	bl	800e0c0 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 800e84e:	b003      	add	sp, #12
 800e850:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 800e852:	4a04      	ldr	r2, [pc, #16]	; (800e864 <RegionEU868ComputeRxWindowParameters+0x64>)
 800e854:	5cd0      	ldrb	r0, [r2, r3]
 800e856:	f7ff fc2d 	bl	800e0b4 <RegionCommonComputeSymbolTimeFsk>
 800e85a:	4605      	mov	r5, r0
 800e85c:	e7e9      	b.n	800e832 <RegionEU868ComputeRxWindowParameters+0x32>
 800e85e:	bf00      	nop
 800e860:	0801469c 	.word	0x0801469c
 800e864:	080146bc 	.word	0x080146bc
 800e868:	08014cbc 	.word	0x08014cbc

0800e86c <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800e86c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e870:	b08a      	sub	sp, #40	; 0x28
 800e872:	4604      	mov	r4, r0
 800e874:	460f      	mov	r7, r1
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800e876:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800e87a:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800e87e:	4b37      	ldr	r3, [pc, #220]	; (800e95c <RegionEU868RxConfig+0xf0>)
 800e880:	685b      	ldr	r3, [r3, #4]
 800e882:	4798      	blx	r3
 800e884:	2800      	cmp	r0, #0
 800e886:	d167      	bne.n	800e958 <RegionEU868RxConfig+0xec>
 800e888:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800e88a:	7ce3      	ldrb	r3, [r4, #19]
 800e88c:	b983      	cbnz	r3, 800e8b0 <RegionEU868RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800e88e:	4b34      	ldr	r3, [pc, #208]	; (800e960 <RegionEU868RxConfig+0xf4>)
 800e890:	681a      	ldr	r2, [r3, #0]
 800e892:	7823      	ldrb	r3, [r4, #0]
 800e894:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800e898:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800e89c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e8a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e8a4:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800e8a8:	f1b8 0f00 	cmp.w	r8, #0
 800e8ac:	d100      	bne.n	800e8b0 <RegionEU868RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800e8ae:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 800e8b0:	4b2c      	ldr	r3, [pc, #176]	; (800e964 <RegionEU868RxConfig+0xf8>)
 800e8b2:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 800e8b6:	4b29      	ldr	r3, [pc, #164]	; (800e95c <RegionEU868RxConfig+0xf0>)
 800e8b8:	68db      	ldr	r3, [r3, #12]
 800e8ba:	4640      	mov	r0, r8
 800e8bc:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 800e8be:	2d07      	cmp	r5, #7
 800e8c0:	d02b      	beq.n	800e91a <RegionEU868RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800e8c2:	4b26      	ldr	r3, [pc, #152]	; (800e95c <RegionEU868RxConfig+0xf0>)
 800e8c4:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800e8c8:	7ca3      	ldrb	r3, [r4, #18]
 800e8ca:	9309      	str	r3, [sp, #36]	; 0x24
 800e8cc:	2601      	movs	r6, #1
 800e8ce:	9608      	str	r6, [sp, #32]
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	9307      	str	r3, [sp, #28]
 800e8d4:	9306      	str	r3, [sp, #24]
 800e8d6:	9305      	str	r3, [sp, #20]
 800e8d8:	9304      	str	r3, [sp, #16]
 800e8da:	9303      	str	r3, [sp, #12]
 800e8dc:	8922      	ldrh	r2, [r4, #8]
 800e8de:	9202      	str	r2, [sp, #8]
 800e8e0:	2208      	movs	r2, #8
 800e8e2:	9201      	str	r2, [sp, #4]
 800e8e4:	9300      	str	r3, [sp, #0]
 800e8e6:	4633      	mov	r3, r6
 800e8e8:	464a      	mov	r2, r9
 800e8ea:	78a1      	ldrb	r1, [r4, #2]
 800e8ec:	4630      	mov	r0, r6
 800e8ee:	47d0      	blx	sl
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 800e8f0:	7c63      	ldrb	r3, [r4, #17]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d02d      	beq.n	800e952 <RegionEU868RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 800e8f6:	4b1c      	ldr	r3, [pc, #112]	; (800e968 <RegionEU868RxConfig+0xfc>)
 800e8f8:	5d59      	ldrb	r1, [r3, r5]
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800e8fa:	4b18      	ldr	r3, [pc, #96]	; (800e95c <RegionEU868RxConfig+0xf0>)
 800e8fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8fe:	310d      	adds	r1, #13
 800e900:	b2c9      	uxtb	r1, r1
 800e902:	4630      	mov	r0, r6
 800e904:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800e906:	462a      	mov	r2, r5
 800e908:	4641      	mov	r1, r8
 800e90a:	7ce0      	ldrb	r0, [r4, #19]
 800e90c:	f7ff fd10 	bl	800e330 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 800e910:	703d      	strb	r5, [r7, #0]
    return true;
 800e912:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 800e914:	b00a      	add	sp, #40	; 0x28
 800e916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800e91a:	4b10      	ldr	r3, [pc, #64]	; (800e95c <RegionEU868RxConfig+0xf0>)
 800e91c:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800e920:	7ca3      	ldrb	r3, [r4, #18]
 800e922:	9309      	str	r3, [sp, #36]	; 0x24
 800e924:	2000      	movs	r0, #0
 800e926:	9008      	str	r0, [sp, #32]
 800e928:	9007      	str	r0, [sp, #28]
 800e92a:	9006      	str	r0, [sp, #24]
 800e92c:	2301      	movs	r3, #1
 800e92e:	9305      	str	r3, [sp, #20]
 800e930:	9004      	str	r0, [sp, #16]
 800e932:	9003      	str	r0, [sp, #12]
 800e934:	8923      	ldrh	r3, [r4, #8]
 800e936:	9302      	str	r3, [sp, #8]
 800e938:	2305      	movs	r3, #5
 800e93a:	9301      	str	r3, [sp, #4]
 800e93c:	4b0b      	ldr	r3, [pc, #44]	; (800e96c <RegionEU868RxConfig+0x100>)
 800e93e:	9300      	str	r3, [sp, #0]
 800e940:	4603      	mov	r3, r0
 800e942:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e946:	fb02 f209 	mul.w	r2, r2, r9
 800e94a:	f24c 3150 	movw	r1, #50000	; 0xc350
 800e94e:	47d0      	blx	sl
 800e950:	e7ce      	b.n	800e8f0 <RegionEU868RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 800e952:	4b07      	ldr	r3, [pc, #28]	; (800e970 <RegionEU868RxConfig+0x104>)
 800e954:	5d59      	ldrb	r1, [r3, r5]
 800e956:	e7d0      	b.n	800e8fa <RegionEU868RxConfig+0x8e>
        return false;
 800e958:	2000      	movs	r0, #0
 800e95a:	e7db      	b.n	800e914 <RegionEU868RxConfig+0xa8>
 800e95c:	08014cbc 	.word	0x08014cbc
 800e960:	20000e38 	.word	0x20000e38
 800e964:	080146bc 	.word	0x080146bc
 800e968:	080146cc 	.word	0x080146cc
 800e96c:	00014585 	.word	0x00014585
 800e970:	080146c4 	.word	0x080146c4

0800e974 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800e974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e978:	b08d      	sub	sp, #52	; 0x34
 800e97a:	4604      	mov	r4, r0
 800e97c:	460f      	mov	r7, r1
 800e97e:	4690      	mov	r8, r2
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800e980:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e984:	4a42      	ldr	r2, [pc, #264]	; (800ea90 <RegionEU868TxConfig+0x11c>)
 800e986:	f912 a003 	ldrsb.w	sl, [r2, r3]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800e98a:	4b42      	ldr	r3, [pc, #264]	; (800ea94 <RegionEU868TxConfig+0x120>)
 800e98c:	6819      	ldr	r1, [r3, #0]
 800e98e:	4d42      	ldr	r5, [pc, #264]	; (800ea98 <RegionEU868TxConfig+0x124>)
 800e990:	682b      	ldr	r3, [r5, #0]
 800e992:	7802      	ldrb	r2, [r0, #0]
 800e994:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800e998:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800e99c:	7a53      	ldrb	r3, [r2, #9]
 800e99e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e9a2:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800e9a6:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800e9aa:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800e9ae:	f7ff fca8 	bl	800e302 <RegionCommonLimitTxPower>
 800e9b2:	4606      	mov	r6, r0
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 800e9b4:	4939      	ldr	r1, [pc, #228]	; (800ea9c <RegionEU868TxConfig+0x128>)
 800e9b6:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800e9ba:	f7ff fca7 	bl	800e30c <RegionCommonGetBandwidth>
 800e9be:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800e9c0:	68a2      	ldr	r2, [r4, #8]
 800e9c2:	6861      	ldr	r1, [r4, #4]
 800e9c4:	4630      	mov	r0, r6
 800e9c6:	f7ff fbb7 	bl	800e138 <RegionCommonComputeTxPower>
 800e9ca:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800e9cc:	4b34      	ldr	r3, [pc, #208]	; (800eaa0 <RegionEU868TxConfig+0x12c>)
 800e9ce:	68da      	ldr	r2, [r3, #12]
 800e9d0:	6829      	ldr	r1, [r5, #0]
 800e9d2:	7823      	ldrb	r3, [r4, #0]
 800e9d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e9d8:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800e9dc:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 800e9de:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800e9e2:	2b07      	cmp	r3, #7
 800e9e4:	d031      	beq.n	800ea4a <RegionEU868TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800e9e6:	4b2e      	ldr	r3, [pc, #184]	; (800eaa0 <RegionEU868TxConfig+0x12c>)
 800e9e8:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 800e9ec:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800e9f0:	9308      	str	r3, [sp, #32]
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	9207      	str	r2, [sp, #28]
 800e9f6:	9206      	str	r2, [sp, #24]
 800e9f8:	9205      	str	r2, [sp, #20]
 800e9fa:	2501      	movs	r5, #1
 800e9fc:	9504      	str	r5, [sp, #16]
 800e9fe:	9203      	str	r2, [sp, #12]
 800ea00:	2308      	movs	r3, #8
 800ea02:	9302      	str	r3, [sp, #8]
 800ea04:	9501      	str	r5, [sp, #4]
 800ea06:	f8cd a000 	str.w	sl, [sp]
 800ea0a:	464b      	mov	r3, r9
 800ea0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ea0e:	4628      	mov	r0, r5
 800ea10:	47d8      	blx	fp
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800ea12:	4b21      	ldr	r3, [pc, #132]	; (800ea98 <RegionEU868TxConfig+0x124>)
 800ea14:	681a      	ldr	r2, [r3, #0]
 800ea16:	7823      	ldrb	r3, [r4, #0]
 800ea18:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ea1c:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800ea20:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ea24:	f7ff fca6 	bl	800e374 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800ea28:	89a1      	ldrh	r1, [r4, #12]
 800ea2a:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800ea2e:	f7ff fd05 	bl	800e43c <GetTimeOnAir>
 800ea32:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800ea36:	4b1a      	ldr	r3, [pc, #104]	; (800eaa0 <RegionEU868TxConfig+0x12c>)
 800ea38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea3a:	7b21      	ldrb	r1, [r4, #12]
 800ea3c:	4628      	mov	r0, r5
 800ea3e:	4798      	blx	r3

    *txPower = txPowerLimited;
 800ea40:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 800ea42:	2001      	movs	r0, #1
 800ea44:	b00d      	add	sp, #52	; 0x34
 800ea46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800ea4a:	4b15      	ldr	r3, [pc, #84]	; (800eaa0 <RegionEU868TxConfig+0x12c>)
 800ea4c:	69dd      	ldr	r5, [r3, #28]
 800ea4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ea52:	fb03 f30a 	mul.w	r3, r3, sl
 800ea56:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800ea5a:	9208      	str	r2, [sp, #32]
 800ea5c:	f04f 0b00 	mov.w	fp, #0
 800ea60:	f8cd b01c 	str.w	fp, [sp, #28]
 800ea64:	f8cd b018 	str.w	fp, [sp, #24]
 800ea68:	f8cd b014 	str.w	fp, [sp, #20]
 800ea6c:	2201      	movs	r2, #1
 800ea6e:	9204      	str	r2, [sp, #16]
 800ea70:	f8cd b00c 	str.w	fp, [sp, #12]
 800ea74:	2205      	movs	r2, #5
 800ea76:	9202      	str	r2, [sp, #8]
 800ea78:	f8cd b004 	str.w	fp, [sp, #4]
 800ea7c:	9300      	str	r3, [sp, #0]
 800ea7e:	464b      	mov	r3, r9
 800ea80:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800ea84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ea86:	4658      	mov	r0, fp
 800ea88:	47a8      	blx	r5
        modem = MODEM_FSK;
 800ea8a:	465d      	mov	r5, fp
 800ea8c:	e7c1      	b.n	800ea12 <RegionEU868TxConfig+0x9e>
 800ea8e:	bf00      	nop
 800ea90:	080146bc 	.word	0x080146bc
 800ea94:	20000e34 	.word	0x20000e34
 800ea98:	20000e38 	.word	0x20000e38
 800ea9c:	0801469c 	.word	0x0801469c
 800eaa0:	08014cbc 	.word	0x08014cbc

0800eaa4 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800eaa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eaa8:	b08f      	sub	sp, #60	; 0x3c
 800eaaa:	4605      	mov	r5, r0
 800eaac:	4689      	mov	r9, r1
 800eaae:	4690      	mov	r8, r2
 800eab0:	461f      	mov	r7, r3
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800eab2:	2400      	movs	r4, #0
 800eab4:	940c      	str	r4, [sp, #48]	; 0x30
 800eab6:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 800eaba:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
    uint8_t status = 0x07;
 800eabe:	2607      	movs	r6, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800eac0:	e030      	b.n	800eb24 <RegionEU868LinkAdrReq+0x80>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800eac2:	f04f 0c00 	mov.w	ip, #0
        status = 0x07;
 800eac6:	2607      	movs	r6, #7
 800eac8:	e012      	b.n	800eaf0 <RegionEU868LinkAdrReq+0x4c>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 800eaca:	4a57      	ldr	r2, [pc, #348]	; (800ec28 <RegionEU868LinkAdrReq+0x184>)
 800eacc:	6812      	ldr	r2, [r2, #0]
 800eace:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800ead2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800ead6:	b13a      	cbz	r2, 800eae8 <RegionEU868LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 800ead8:	2201      	movs	r2, #1
 800eada:	fa02 f20c 	lsl.w	r2, r2, ip
 800eade:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 800eae2:	430a      	orrs	r2, r1
 800eae4:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800eae8:	f10c 0c01 	add.w	ip, ip, #1
 800eaec:	fa5f fc8c 	uxtb.w	ip, ip
 800eaf0:	f1bc 0f0f 	cmp.w	ip, #15
 800eaf4:	d816      	bhi.n	800eb24 <RegionEU868LinkAdrReq+0x80>
                if( linkAdrParams.ChMaskCtrl == 6 )
 800eaf6:	2b06      	cmp	r3, #6
 800eaf8:	d0e7      	beq.n	800eaca <RegionEU868LinkAdrReq+0x26>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800eafa:	f8bd e02e 	ldrh.w	lr, [sp, #46]	; 0x2e
 800eafe:	fa4e fe0c 	asr.w	lr, lr, ip
 800eb02:	f01e 0f01 	tst.w	lr, #1
 800eb06:	d0ef      	beq.n	800eae8 <RegionEU868LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 800eb08:	4a47      	ldr	r2, [pc, #284]	; (800ec28 <RegionEU868LinkAdrReq+0x184>)
 800eb0a:	6812      	ldr	r2, [r2, #0]
 800eb0c:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800eb10:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800eb14:	2a00      	cmp	r2, #0
 800eb16:	d1e7      	bne.n	800eae8 <RegionEU868LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 800eb18:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 800eb1c:	e7e4      	b.n	800eae8 <RegionEU868LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 800eb1e:	2606      	movs	r6, #6
 800eb20:	e000      	b.n	800eb24 <RegionEU868LinkAdrReq+0x80>
            status &= 0xFE; // Channel mask KO
 800eb22:	2606      	movs	r6, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800eb24:	7a2b      	ldrb	r3, [r5, #8]
 800eb26:	42a3      	cmp	r3, r4
 800eb28:	d918      	bls.n	800eb5c <RegionEU868LinkAdrReq+0xb8>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800eb2a:	6868      	ldr	r0, [r5, #4]
 800eb2c:	a90c      	add	r1, sp, #48	; 0x30
 800eb2e:	4420      	add	r0, r4
 800eb30:	f7ff fa42 	bl	800dfb8 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800eb34:	b190      	cbz	r0, 800eb5c <RegionEU868LinkAdrReq+0xb8>
        bytesProcessed += nextIndex;
 800eb36:	4404      	add	r4, r0
 800eb38:	b2e4      	uxtb	r4, r4
        chMask = linkAdrParams.ChMask;
 800eb3a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800eb3e:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800eb42:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800eb46:	b90b      	cbnz	r3, 800eb4c <RegionEU868LinkAdrReq+0xa8>
 800eb48:	2a00      	cmp	r2, #0
 800eb4a:	d0e8      	beq.n	800eb1e <RegionEU868LinkAdrReq+0x7a>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800eb4c:	1e5a      	subs	r2, r3, #1
 800eb4e:	b2d2      	uxtb	r2, r2
 800eb50:	2a04      	cmp	r2, #4
 800eb52:	d9e6      	bls.n	800eb22 <RegionEU868LinkAdrReq+0x7e>
 800eb54:	2b06      	cmp	r3, #6
 800eb56:	d9b4      	bls.n	800eac2 <RegionEU868LinkAdrReq+0x1e>
            status &= 0xFE; // Channel mask KO
 800eb58:	2606      	movs	r6, #6
 800eb5a:	e7e3      	b.n	800eb24 <RegionEU868LinkAdrReq+0x80>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800eb5c:	2302      	movs	r3, #2
 800eb5e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800eb62:	7a6b      	ldrb	r3, [r5, #9]
 800eb64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    phyParam = RegionEU868GetPhyParam( &getPhy );
 800eb68:	a80a      	add	r0, sp, #40	; 0x28
 800eb6a:	f7ff fc99 	bl	800e4a0 <RegionEU868GetPhyParam>
 800eb6e:	9009      	str	r0, [sp, #36]	; 0x24

    linkAdrVerifyParams.Status = status;
 800eb70:	f88d 6008 	strb.w	r6, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800eb74:	7aab      	ldrb	r3, [r5, #10]
 800eb76:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800eb7a:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800eb7e:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800eb82:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800eb86:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800eb8a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800eb8e:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800eb92:	f995 300b 	ldrsb.w	r3, [r5, #11]
 800eb96:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800eb9a:	f995 300c 	ldrsb.w	r3, [r5, #12]
 800eb9e:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800eba2:	f995 300d 	ldrsb.w	r3, [r5, #13]
 800eba6:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 800ebaa:	2310      	movs	r3, #16
 800ebac:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800ebb0:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 800ebb4:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800ebb6:	f88d 0018 	strb.w	r0, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 800ebba:	2307      	movs	r3, #7
 800ebbc:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800ebc0:	4a19      	ldr	r2, [pc, #100]	; (800ec28 <RegionEU868LinkAdrReq+0x184>)
 800ebc2:	6812      	ldr	r2, [r2, #0]
 800ebc4:	9207      	str	r2, [sp, #28]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 800ebc6:	f88d 3020 	strb.w	r3, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 800ebca:	2300      	movs	r3, #0
 800ebcc:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800ebd0:	682b      	ldr	r3, [r5, #0]
 800ebd2:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800ebd4:	ab0c      	add	r3, sp, #48	; 0x30
 800ebd6:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800ebda:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 800ebde:	a801      	add	r0, sp, #4
 800ebe0:	f7ff fa08 	bl	800dff4 <RegionCommonLinkAdrReqVerifyParams>
 800ebe4:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800ebe6:	2807      	cmp	r0, #7
 800ebe8:	d010      	beq.n	800ec0c <RegionEU868LinkAdrReq+0x168>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800ebea:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800ebee:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
 800ebf2:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800ebf6:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 800ebfa:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800ebfe:	703b      	strb	r3, [r7, #0]
    *nbBytesParsed = bytesProcessed;
 800ec00:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ec02:	701c      	strb	r4, [r3, #0]

#endif /* REGION_EU868 */
    return status;
}
 800ec04:	4628      	mov	r0, r5
 800ec06:	b00f      	add	sp, #60	; 0x3c
 800ec08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 800ec0c:	4e06      	ldr	r6, [pc, #24]	; (800ec28 <RegionEU868LinkAdrReq+0x184>)
 800ec0e:	6830      	ldr	r0, [r6, #0]
 800ec10:	220c      	movs	r2, #12
 800ec12:	2100      	movs	r1, #0
 800ec14:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800ec18:	f001 ff81 	bl	8010b1e <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 800ec1c:	6833      	ldr	r3, [r6, #0]
 800ec1e:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 800ec22:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
 800ec26:	e7e0      	b.n	800ebea <RegionEU868LinkAdrReq+0x146>
 800ec28:	20000e38 	.word	0x20000e38

0800ec2c <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800ec2c:	b530      	push	{r4, r5, lr}
 800ec2e:	b083      	sub	sp, #12
 800ec30:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800ec32:	2300      	movs	r3, #0
 800ec34:	f88d 3007 	strb.w	r3, [sp, #7]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 800ec38:	f10d 0107 	add.w	r1, sp, #7
 800ec3c:	6840      	ldr	r0, [r0, #4]
 800ec3e:	f7ff fba9 	bl	800e394 <VerifyRfFreq>
 800ec42:	b1a8      	cbz	r0, 800ec70 <RegionEU868RxParamSetupReq+0x44>
    uint8_t status = 0x07;
 800ec44:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 800ec46:	2207      	movs	r2, #7
 800ec48:	2100      	movs	r1, #0
 800ec4a:	f994 0000 	ldrsb.w	r0, [r4]
 800ec4e:	f7ff f892 	bl	800dd76 <RegionCommonValueInRange>
 800ec52:	b908      	cbnz	r0, 800ec58 <RegionEU868RxParamSetupReq+0x2c>
    {
        status &= 0xFD; // Datarate KO
 800ec54:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 800ec58:	2205      	movs	r2, #5
 800ec5a:	2100      	movs	r1, #0
 800ec5c:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800ec60:	f7ff f889 	bl	800dd76 <RegionCommonValueInRange>
 800ec64:	b908      	cbnz	r0, 800ec6a <RegionEU868RxParamSetupReq+0x3e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800ec66:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_EU868 */
    return status;
}
 800ec6a:	4628      	mov	r0, r5
 800ec6c:	b003      	add	sp, #12
 800ec6e:	bd30      	pop	{r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800ec70:	2506      	movs	r5, #6
 800ec72:	e7e8      	b.n	800ec46 <RegionEU868RxParamSetupReq+0x1a>

0800ec74 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 800ec74:	f04f 30ff 	mov.w	r0, #4294967295
 800ec78:	4770      	bx	lr
	...

0800ec7c <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 800ec7c:	b510      	push	{r4, lr}
 800ec7e:	b082      	sub	sp, #8
 800ec80:	4604      	mov	r4, r0
    uint8_t status = 0x03;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800ec82:	2300      	movs	r3, #0
 800ec84:	f88d 3007 	strb.w	r3, [sp, #7]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 800ec88:	f10d 0107 	add.w	r1, sp, #7
 800ec8c:	6840      	ldr	r0, [r0, #4]
 800ec8e:	f7ff fb81 	bl	800e394 <VerifyRfFreq>
 800ec92:	b178      	cbz	r0, 800ecb4 <RegionEU868DlChannelReq+0x38>
    uint8_t status = 0x03;
 800ec94:	2003      	movs	r0, #3
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800ec96:	4b0c      	ldr	r3, [pc, #48]	; (800ecc8 <RegionEU868DlChannelReq+0x4c>)
 800ec98:	681a      	ldr	r2, [r3, #0]
 800ec9a:	7823      	ldrb	r3, [r4, #0]
 800ec9c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800eca0:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800eca4:	b909      	cbnz	r1, 800ecaa <RegionEU868DlChannelReq+0x2e>
    {
        status &= 0xFD;
 800eca6:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 800ecaa:	2803      	cmp	r0, #3
 800ecac:	d004      	beq.n	800ecb8 <RegionEU868DlChannelReq+0x3c>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_EU868 */
    return status;
}
 800ecae:	b240      	sxtb	r0, r0
 800ecb0:	b002      	add	sp, #8
 800ecb2:	bd10      	pop	{r4, pc}
        status &= 0xFE;
 800ecb4:	2002      	movs	r0, #2
 800ecb6:	e7ee      	b.n	800ec96 <RegionEU868DlChannelReq+0x1a>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 800ecb8:	6861      	ldr	r1, [r4, #4]
 800ecba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ecbe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ecc2:	6059      	str	r1, [r3, #4]
 800ecc4:	e7f3      	b.n	800ecae <RegionEU868DlChannelReq+0x32>
 800ecc6:	bf00      	nop
 800ecc8:	20000e38 	.word	0x20000e38

0800eccc <RegionEU868AlternateDr>:
#if defined( REGION_EU868 )
    return currentDr;
#else
    return -1;
#endif /* REGION_EU868 */
}
 800eccc:	4770      	bx	lr
	...

0800ecd0 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800ecd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecd2:	b097      	sub	sp, #92	; 0x5c
 800ecd4:	4604      	mov	r4, r0
 800ecd6:	460f      	mov	r7, r1
 800ecd8:	4616      	mov	r6, r2
 800ecda:	461d      	mov	r5, r3
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 800ecdc:	2100      	movs	r1, #0
 800ecde:	f88d 1057 	strb.w	r1, [sp, #87]	; 0x57
    uint8_t nbRestrictedChannels = 0;
 800ece2:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 800ece6:	9111      	str	r1, [sp, #68]	; 0x44
 800ece8:	9112      	str	r1, [sp, #72]	; 0x48
 800ecea:	9113      	str	r1, [sp, #76]	; 0x4c
 800ecec:	9114      	str	r1, [sp, #80]	; 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 800ecee:	2307      	movs	r3, #7
 800ecf0:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800ecf4:	4b34      	ldr	r3, [pc, #208]	; (800edc8 <RegionEU868NextChannel+0xf8>)
 800ecf6:	6818      	ldr	r0, [r3, #0]
 800ecf8:	2201      	movs	r2, #1
 800ecfa:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800ecfe:	f7ff f895 	bl	800de2c <RegionCommonCountChannels>
 800ed02:	b938      	cbnz	r0, 800ed14 <RegionEU868NextChannel+0x44>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800ed04:	4b30      	ldr	r3, [pc, #192]	; (800edc8 <RegionEU868NextChannel+0xf8>)
 800ed06:	681a      	ldr	r2, [r3, #0]
 800ed08:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 800ed0c:	f043 0307 	orr.w	r3, r3, #7
 800ed10:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800ed14:	7a63      	ldrb	r3, [r4, #9]
 800ed16:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800ed1a:	7a23      	ldrb	r3, [r4, #8]
 800ed1c:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800ed20:	4b29      	ldr	r3, [pc, #164]	; (800edc8 <RegionEU868NextChannel+0xf8>)
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	f503 6290 	add.w	r2, r3, #1152	; 0x480
 800ed28:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800ed2a:	9305      	str	r3, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 800ed2c:	4b27      	ldr	r3, [pc, #156]	; (800edcc <RegionEU868NextChannel+0xfc>)
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	9306      	str	r3, [sp, #24]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 800ed32:	2310      	movs	r3, #16
 800ed34:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 800ed38:	f10d 030a 	add.w	r3, sp, #10
 800ed3c:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800ed3e:	6823      	ldr	r3, [r4, #0]
 800ed40:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800ed42:	6863      	ldr	r3, [r4, #4]
 800ed44:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800ed46:	7aa3      	ldrb	r3, [r4, #10]
 800ed48:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 800ed4c:	2306      	movs	r3, #6
 800ed4e:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800ed52:	ab0c      	add	r3, sp, #48	; 0x30
 800ed54:	f104 020c 	add.w	r2, r4, #12
 800ed58:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ed5c:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800ed60:	7d23      	ldrb	r3, [r4, #20]
 800ed62:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800ed66:	8ae1      	ldrh	r1, [r4, #22]
 800ed68:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800ed6c:	f7ff fb66 	bl	800e43c <GetTimeOnAir>
 800ed70:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800ed72:	ab03      	add	r3, sp, #12
 800ed74:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800ed76:	9601      	str	r6, [sp, #4]
 800ed78:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 800ed7c:	9300      	str	r3, [sp, #0]
 800ed7e:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 800ed82:	aa11      	add	r2, sp, #68	; 0x44
 800ed84:	4629      	mov	r1, r5
 800ed86:	a809      	add	r0, sp, #36	; 0x24
 800ed88:	f7ff fa52 	bl	800e230 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800ed8c:	4604      	mov	r4, r0
 800ed8e:	b120      	cbz	r0, 800ed9a <RegionEU868NextChannel+0xca>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 800ed90:	280c      	cmp	r0, #12
 800ed92:	d00f      	beq.n	800edb4 <RegionEU868NextChannel+0xe4>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800ed94:	4620      	mov	r0, r4
 800ed96:	b017      	add	sp, #92	; 0x5c
 800ed98:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800ed9a:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
 800ed9e:	3901      	subs	r1, #1
 800eda0:	f001 fe98 	bl	8010ad4 <randr>
 800eda4:	f100 0358 	add.w	r3, r0, #88	; 0x58
 800eda8:	eb0d 0003 	add.w	r0, sp, r3
 800edac:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 800edb0:	703b      	strb	r3, [r7, #0]
 800edb2:	e7ef      	b.n	800ed94 <RegionEU868NextChannel+0xc4>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800edb4:	4b04      	ldr	r3, [pc, #16]	; (800edc8 <RegionEU868NextChannel+0xf8>)
 800edb6:	681a      	ldr	r2, [r3, #0]
 800edb8:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 800edbc:	f043 0307 	orr.w	r3, r3, #7
 800edc0:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
 800edc4:	e7e6      	b.n	800ed94 <RegionEU868NextChannel+0xc4>
 800edc6:	bf00      	nop
 800edc8:	20000e38 	.word	0x20000e38
 800edcc:	20000e34 	.word	0x20000e34

0800edd0 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 800edd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edd2:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800edd4:	2300      	movs	r3, #0
 800edd6:	f88d 3007 	strb.w	r3, [sp, #7]
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 800edda:	7905      	ldrb	r5, [r0, #4]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800eddc:	2d02      	cmp	r5, #2
 800edde:	d94f      	bls.n	800ee80 <RegionEU868ChannelAdd+0xb0>
 800ede0:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 800ede2:	2d0f      	cmp	r5, #15
 800ede4:	d84e      	bhi.n	800ee84 <RegionEU868ChannelAdd+0xb4>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800ede6:	6803      	ldr	r3, [r0, #0]
 800ede8:	7a18      	ldrb	r0, [r3, #8]
 800edea:	f340 0003 	sbfx	r0, r0, #0, #4
 800edee:	2207      	movs	r2, #7
 800edf0:	2100      	movs	r1, #0
 800edf2:	b240      	sxtb	r0, r0
 800edf4:	f7fe ffbf 	bl	800dd76 <RegionCommonValueInRange>
 800edf8:	2800      	cmp	r0, #0
 800edfa:	d03d      	beq.n	800ee78 <RegionEU868ChannelAdd+0xa8>
    bool drInvalid = false;
 800edfc:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800edfe:	6823      	ldr	r3, [r4, #0]
 800ee00:	7a18      	ldrb	r0, [r3, #8]
 800ee02:	f340 1003 	sbfx	r0, r0, #4, #4
 800ee06:	2207      	movs	r2, #7
 800ee08:	2100      	movs	r1, #0
 800ee0a:	b240      	sxtb	r0, r0
 800ee0c:	f7fe ffb3 	bl	800dd76 <RegionCommonValueInRange>
 800ee10:	b900      	cbnz	r0, 800ee14 <RegionEU868ChannelAdd+0x44>
    {
        drInvalid = true;
 800ee12:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800ee14:	6820      	ldr	r0, [r4, #0]
 800ee16:	7a03      	ldrb	r3, [r0, #8]
 800ee18:	f343 0203 	sbfx	r2, r3, #0, #4
 800ee1c:	b252      	sxtb	r2, r2
 800ee1e:	f343 1303 	sbfx	r3, r3, #4, #4
 800ee22:	b25b      	sxtb	r3, r3
 800ee24:	429a      	cmp	r2, r3
 800ee26:	dd00      	ble.n	800ee2a <RegionEU868ChannelAdd+0x5a>
    {
        drInvalid = true;
 800ee28:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 800ee2a:	f10d 0107 	add.w	r1, sp, #7
 800ee2e:	6800      	ldr	r0, [r0, #0]
 800ee30:	f7ff fab0 	bl	800e394 <VerifyRfFreq>
 800ee34:	b310      	cbz	r0, 800ee7c <RegionEU868ChannelAdd+0xac>
    bool freqInvalid = false;
 800ee36:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800ee38:	b106      	cbz	r6, 800ee3c <RegionEU868ChannelAdd+0x6c>
 800ee3a:	bb33      	cbnz	r3, 800ee8a <RegionEU868ChannelAdd+0xba>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }
    if( drInvalid == true )
 800ee3c:	bb3e      	cbnz	r6, 800ee8e <RegionEU868ChannelAdd+0xbe>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 800ee3e:	bb43      	cbnz	r3, 800ee92 <RegionEU868ChannelAdd+0xc2>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 800ee40:	4f15      	ldr	r7, [pc, #84]	; (800ee98 <RegionEU868ChannelAdd+0xc8>)
 800ee42:	683b      	ldr	r3, [r7, #0]
 800ee44:	006e      	lsls	r6, r5, #1
 800ee46:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 800ee4a:	220c      	movs	r2, #12
 800ee4c:	6821      	ldr	r1, [r4, #0]
 800ee4e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ee52:	f001 fe4c 	bl	8010aee <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 800ee56:	683a      	ldr	r2, [r7, #0]
 800ee58:	442e      	add	r6, r5
 800ee5a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ee5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ee62:	7273      	strb	r3, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 800ee64:	2301      	movs	r3, #1
 800ee66:	fa03 f505 	lsl.w	r5, r3, r5
 800ee6a:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 800ee6e:	431d      	orrs	r5, r3
 800ee70:	f8a2 5480 	strh.w	r5, [r2, #1152]	; 0x480
    return LORAMAC_STATUS_OK;
 800ee74:	2000      	movs	r0, #0
 800ee76:	e006      	b.n	800ee86 <RegionEU868ChannelAdd+0xb6>
        drInvalid = true;
 800ee78:	2601      	movs	r6, #1
 800ee7a:	e7c0      	b.n	800edfe <RegionEU868ChannelAdd+0x2e>
            freqInvalid = true;
 800ee7c:	2301      	movs	r3, #1
 800ee7e:	e7db      	b.n	800ee38 <RegionEU868ChannelAdd+0x68>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800ee80:	2006      	movs	r0, #6
 800ee82:	e000      	b.n	800ee86 <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ee84:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800ee86:	b003      	add	sp, #12
 800ee88:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800ee8a:	2006      	movs	r0, #6
 800ee8c:	e7fb      	b.n	800ee86 <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_DATARATE_INVALID;
 800ee8e:	2005      	movs	r0, #5
 800ee90:	e7f9      	b.n	800ee86 <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 800ee92:	2004      	movs	r0, #4
 800ee94:	e7f7      	b.n	800ee86 <RegionEU868ChannelAdd+0xb6>
 800ee96:	bf00      	nop
 800ee98:	20000e38 	.word	0x20000e38

0800ee9c <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 800ee9c:	7801      	ldrb	r1, [r0, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800ee9e:	2902      	cmp	r1, #2
 800eea0:	d801      	bhi.n	800eea6 <RegionEU868ChannelsRemove+0xa>
    {
        return false;
 800eea2:	2000      	movs	r0, #0

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
#else
    return false;
#endif /* REGION_EU868 */
}
 800eea4:	4770      	bx	lr
{
 800eea6:	b508      	push	{r3, lr}
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 800eea8:	4b09      	ldr	r3, [pc, #36]	; (800eed0 <RegionEU868ChannelsRemove+0x34>)
 800eeaa:	6818      	ldr	r0, [r3, #0]
 800eeac:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800eeb0:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800eeb4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800eeb8:	2200      	movs	r2, #0
 800eeba:	f840 200c 	str.w	r2, [r0, ip]
 800eebe:	605a      	str	r2, [r3, #4]
 800eec0:	609a      	str	r2, [r3, #8]
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 800eec2:	2210      	movs	r2, #16
 800eec4:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800eec8:	f7fe ff97 	bl	800ddfa <RegionCommonChanDisable>
}
 800eecc:	bd08      	pop	{r3, pc}
 800eece:	bf00      	nop
 800eed0:	20000e38 	.word	0x20000e38

0800eed4 <RegionEU868ApplyCFList>:
{
 800eed4:	b570      	push	{r4, r5, r6, lr}
 800eed6:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800eed8:	2350      	movs	r3, #80	; 0x50
 800eeda:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 800eede:	7903      	ldrb	r3, [r0, #4]
 800eee0:	2b10      	cmp	r3, #16
 800eee2:	d136      	bne.n	800ef52 <RegionEU868ApplyCFList+0x7e>
 800eee4:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 800eee6:	6803      	ldr	r3, [r0, #0]
 800eee8:	7bdd      	ldrb	r5, [r3, #15]
 800eeea:	2d00      	cmp	r5, #0
 800eeec:	d131      	bne.n	800ef52 <RegionEU868ApplyCFList+0x7e>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800eeee:	2403      	movs	r4, #3
 800eef0:	e01b      	b.n	800ef2a <RegionEU868ApplyCFList+0x56>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800eef2:	6832      	ldr	r2, [r6, #0]
 800eef4:	5d53      	ldrb	r3, [r2, r5]
 800eef6:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800eef8:	442a      	add	r2, r5
 800eefa:	7851      	ldrb	r1, [r2, #1]
 800eefc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800ef00:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800ef02:	7892      	ldrb	r2, [r2, #2]
 800ef04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ef08:	9303      	str	r3, [sp, #12]
            newChannel.Frequency *= 100;
 800ef0a:	2264      	movs	r2, #100	; 0x64
 800ef0c:	fb02 f303 	mul.w	r3, r2, r3
 800ef10:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 800ef12:	2300      	movs	r3, #0
 800ef14:	9304      	str	r3, [sp, #16]
 800ef16:	e011      	b.n	800ef3c <RegionEU868ApplyCFList+0x68>
            channelRemove.ChannelId = chanIdx;
 800ef18:	f88d 4000 	strb.w	r4, [sp]
            RegionEU868ChannelsRemove( &channelRemove );
 800ef1c:	4668      	mov	r0, sp
 800ef1e:	f7ff ffbd 	bl	800ee9c <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800ef22:	3503      	adds	r5, #3
 800ef24:	b2ed      	uxtb	r5, r5
 800ef26:	3401      	adds	r4, #1
 800ef28:	b2e4      	uxtb	r4, r4
 800ef2a:	2c0f      	cmp	r4, #15
 800ef2c:	d811      	bhi.n	800ef52 <RegionEU868ApplyCFList+0x7e>
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 800ef2e:	2c07      	cmp	r4, #7
 800ef30:	d9df      	bls.n	800eef2 <RegionEU868ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 800ef32:	2300      	movs	r3, #0
 800ef34:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 800ef36:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 800ef3a:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 800ef3c:	9b03      	ldr	r3, [sp, #12]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d0ea      	beq.n	800ef18 <RegionEU868ApplyCFList+0x44>
            channelAdd.NewChannel = &newChannel;
 800ef42:	ab03      	add	r3, sp, #12
 800ef44:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 800ef46:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionEU868ChannelAdd( &channelAdd );
 800ef4a:	a801      	add	r0, sp, #4
 800ef4c:	f7ff ff40 	bl	800edd0 <RegionEU868ChannelAdd>
 800ef50:	e7e7      	b.n	800ef22 <RegionEU868ApplyCFList+0x4e>
}
 800ef52:	b006      	add	sp, #24
 800ef54:	bd70      	pop	{r4, r5, r6, pc}

0800ef56 <RegionEU868NewChannelReq>:
{
 800ef56:	b500      	push	{lr}
 800ef58:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 800ef5a:	6803      	ldr	r3, [r0, #0]
 800ef5c:	681a      	ldr	r2, [r3, #0]
 800ef5e:	b952      	cbnz	r2, 800ef76 <RegionEU868NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800ef60:	7903      	ldrb	r3, [r0, #4]
 800ef62:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 800ef66:	a801      	add	r0, sp, #4
 800ef68:	f7ff ff98 	bl	800ee9c <RegionEU868ChannelsRemove>
 800ef6c:	b1d0      	cbz	r0, 800efa4 <RegionEU868NewChannelReq+0x4e>
    uint8_t status = 0x03;
 800ef6e:	2003      	movs	r0, #3
}
 800ef70:	b005      	add	sp, #20
 800ef72:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 800ef76:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800ef78:	7903      	ldrb	r3, [r0, #4]
 800ef7a:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 800ef7e:	a802      	add	r0, sp, #8
 800ef80:	f7ff ff26 	bl	800edd0 <RegionEU868ChannelAdd>
 800ef84:	2806      	cmp	r0, #6
 800ef86:	d80b      	bhi.n	800efa0 <RegionEU868NewChannelReq+0x4a>
 800ef88:	e8df f000 	tbb	[pc, r0]
 800ef8c:	0a0a0a04 	.word	0x0a0a0a04
 800ef90:	060e      	.short	0x060e
 800ef92:	08          	.byte	0x08
 800ef93:	00          	.byte	0x00
 800ef94:	2003      	movs	r0, #3
 800ef96:	e7eb      	b.n	800ef70 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFD;
 800ef98:	2001      	movs	r0, #1
                break;
 800ef9a:	e7e9      	b.n	800ef70 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 800ef9c:	2000      	movs	r0, #0
                break;
 800ef9e:	e7e7      	b.n	800ef70 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 800efa0:	2000      	movs	r0, #0
                break;
 800efa2:	e7e5      	b.n	800ef70 <RegionEU868NewChannelReq+0x1a>
            status &= 0xFC;
 800efa4:	2000      	movs	r0, #0
 800efa6:	e7e3      	b.n	800ef70 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFE;
 800efa8:	2002      	movs	r0, #2
 800efaa:	e7e1      	b.n	800ef70 <RegionEU868NewChannelReq+0x1a>

0800efac <RegionEU868SetContinuousWave>:

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 800efac:	b538      	push	{r3, r4, r5, lr}
 800efae:	4604      	mov	r4, r0
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 800efb0:	4b12      	ldr	r3, [pc, #72]	; (800effc <RegionEU868SetContinuousWave+0x50>)
 800efb2:	6819      	ldr	r1, [r3, #0]
 800efb4:	4d12      	ldr	r5, [pc, #72]	; (800f000 <RegionEU868SetContinuousWave+0x54>)
 800efb6:	682b      	ldr	r3, [r5, #0]
 800efb8:	7802      	ldrb	r2, [r0, #0]
 800efba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800efbe:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800efc2:	7a53      	ldrb	r3, [r2, #9]
 800efc4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800efc8:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800efcc:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800efd0:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800efd4:	f7ff f995 	bl	800e302 <RegionCommonLimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 800efd8:	682a      	ldr	r2, [r5, #0]
 800efda:	7823      	ldrb	r3, [r4, #0]
 800efdc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800efe0:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800efe4:	68a2      	ldr	r2, [r4, #8]
 800efe6:	6861      	ldr	r1, [r4, #4]
 800efe8:	f7ff f8a6 	bl	800e138 <RegionCommonComputeTxPower>
 800efec:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800efee:	4b05      	ldr	r3, [pc, #20]	; (800f004 <RegionEU868SetContinuousWave+0x58>)
 800eff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eff2:	89a2      	ldrh	r2, [r4, #12]
 800eff4:	4628      	mov	r0, r5
 800eff6:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 800eff8:	bd38      	pop	{r3, r4, r5, pc}
 800effa:	bf00      	nop
 800effc:	20000e34 	.word	0x20000e34
 800f000:	20000e38 	.word	0x20000e38
 800f004:	08014cbc 	.word	0x08014cbc

0800f008 <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 800f008:	1a88      	subs	r0, r1, r2
 800f00a:	b240      	sxtb	r0, r0

    if( datarate < 0 )
 800f00c:	2800      	cmp	r0, #0
 800f00e:	db01      	blt.n	800f014 <RegionEU868ApplyDrOffset+0xc>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_EU868 */
}
 800f010:	b2c0      	uxtb	r0, r0
 800f012:	4770      	bx	lr
        datarate = DR_0;
 800f014:	2000      	movs	r0, #0
 800f016:	e7fb      	b.n	800f010 <RegionEU868ApplyDrOffset+0x8>

0800f018 <VerifyRfFreq>:
    }
    return txPowerResult;
}

static bool VerifyRfFreq( uint32_t freq )
{
 800f018:	b510      	push	{r4, lr}
 800f01a:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800f01c:	4b10      	ldr	r3, [pc, #64]	; (800f060 <VerifyRfFreq+0x48>)
 800f01e:	6a1b      	ldr	r3, [r3, #32]
 800f020:	4798      	blx	r3
 800f022:	b1c8      	cbz	r0, 800f058 <VerifyRfFreq+0x40>
    {
        return false;
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 800f024:	4b0f      	ldr	r3, [pc, #60]	; (800f064 <VerifyRfFreq+0x4c>)
 800f026:	4423      	add	r3, r4
 800f028:	4a0f      	ldr	r2, [pc, #60]	; (800f068 <VerifyRfFreq+0x50>)
 800f02a:	4293      	cmp	r3, r2
 800f02c:	d813      	bhi.n	800f056 <VerifyRfFreq+0x3e>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 800f02e:	f102 42df 	add.w	r2, r2, #1870659584	; 0x6f800000
 800f032:	f502 12c8 	add.w	r2, r2, #1638400	; 0x190000
 800f036:	f202 7245 	addw	r2, r2, #1861	; 0x745
 800f03a:	fba2 1203 	umull	r1, r2, r2, r3
 800f03e:	0c92      	lsrs	r2, r2, #18
 800f040:	490a      	ldr	r1, [pc, #40]	; (800f06c <VerifyRfFreq+0x54>)
 800f042:	fb01 3212 	mls	r2, r1, r2, r3
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 800f046:	b942      	cbnz	r2, 800f05a <VerifyRfFreq+0x42>
    {
        return false;
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 800f048:	4b09      	ldr	r3, [pc, #36]	; (800f070 <VerifyRfFreq+0x58>)
 800f04a:	4423      	add	r3, r4
 800f04c:	4a09      	ldr	r2, [pc, #36]	; (800f074 <VerifyRfFreq+0x5c>)
 800f04e:	4293      	cmp	r3, r2
 800f050:	d902      	bls.n	800f058 <VerifyRfFreq+0x40>
    {
        return false;
 800f052:	2000      	movs	r0, #0
 800f054:	e000      	b.n	800f058 <VerifyRfFreq+0x40>
        return false;
 800f056:	2000      	movs	r0, #0
    }
    return true;
}
 800f058:	bd10      	pop	{r4, pc}
        return false;
 800f05a:	2000      	movs	r0, #0
 800f05c:	e7fc      	b.n	800f058 <VerifyRfFreq+0x40>
 800f05e:	bf00      	nop
 800f060:	08014cbc 	.word	0x08014cbc
 800f064:	c8f78f60 	.word	0xc8f78f60
 800f068:	00401640 	.word	0x00401640
 800f06c:	000927c0 	.word	0x000927c0
 800f070:	ca37fea0 	.word	0xca37fea0
 800f074:	01808580 	.word	0x01808580

0800f078 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800f078:	b570      	push	{r4, r5, r6, lr}
 800f07a:	b084      	sub	sp, #16
 800f07c:	460c      	mov	r4, r1
    int8_t phyDr = DataratesUS915[datarate];
 800f07e:	4b0a      	ldr	r3, [pc, #40]	; (800f0a8 <GetTimeOnAir+0x30>)
 800f080:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 800f082:	490a      	ldr	r1, [pc, #40]	; (800f0ac <GetTimeOnAir+0x34>)
 800f084:	f7ff f942 	bl	800e30c <RegionCommonGetBandwidth>
 800f088:	4601      	mov	r1, r0

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800f08a:	4b09      	ldr	r3, [pc, #36]	; (800f0b0 <GetTimeOnAir+0x38>)
 800f08c:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800f08e:	2001      	movs	r0, #1
 800f090:	9003      	str	r0, [sp, #12]
 800f092:	b2e4      	uxtb	r4, r4
 800f094:	9402      	str	r4, [sp, #8]
 800f096:	2200      	movs	r2, #0
 800f098:	9201      	str	r2, [sp, #4]
 800f09a:	2208      	movs	r2, #8
 800f09c:	9200      	str	r2, [sp, #0]
 800f09e:	4603      	mov	r3, r0
 800f0a0:	4632      	mov	r2, r6
 800f0a2:	47a8      	blx	r5
}
 800f0a4:	b004      	add	sp, #16
 800f0a6:	bd70      	pop	{r4, r5, r6, pc}
 800f0a8:	08014728 	.word	0x08014728
 800f0ac:	080146d4 	.word	0x080146d4
 800f0b0:	08014cbc 	.word	0x08014cbc

0800f0b4 <LimitTxPower>:
{
 800f0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0b6:	4606      	mov	r6, r0
 800f0b8:	4615      	mov	r5, r2
 800f0ba:	461f      	mov	r7, r3
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 800f0bc:	f7ff f921 	bl	800e302 <RegionCommonLimitTxPower>
    if( datarate == DR_4 )
 800f0c0:	2d04      	cmp	r5, #4
 800f0c2:	d105      	bne.n	800f0d0 <LimitTxPower+0x1c>
        txPowerResult = MAX( txPower, TX_POWER_2 );
 800f0c4:	4634      	mov	r4, r6
 800f0c6:	2e02      	cmp	r6, #2
 800f0c8:	bfb8      	it	lt
 800f0ca:	2402      	movlt	r4, #2
}
 800f0cc:	4620      	mov	r0, r4
 800f0ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0d0:	4604      	mov	r4, r0
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 800f0d2:	2204      	movs	r2, #4
 800f0d4:	2100      	movs	r1, #0
 800f0d6:	4638      	mov	r0, r7
 800f0d8:	f7fe fea8 	bl	800de2c <RegionCommonCountChannels>
 800f0dc:	2831      	cmp	r0, #49	; 0x31
 800f0de:	d8f5      	bhi.n	800f0cc <LimitTxPower+0x18>
            txPowerResult = MAX( txPower, TX_POWER_5 );
 800f0e0:	4634      	mov	r4, r6
 800f0e2:	2e05      	cmp	r6, #5
 800f0e4:	bfb8      	it	lt
 800f0e6:	2405      	movlt	r4, #5
 800f0e8:	e7f0      	b.n	800f0cc <LimitTxPower+0x18>
	...

0800f0ec <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 800f0ec:	b500      	push	{lr}
 800f0ee:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	9304      	str	r3, [sp, #16]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 800f0f4:	7803      	ldrb	r3, [r0, #0]
 800f0f6:	3b01      	subs	r3, #1
 800f0f8:	2b38      	cmp	r3, #56	; 0x38
 800f0fa:	d820      	bhi.n	800f13e <RegionUS915GetPhyParam+0x52>
 800f0fc:	e8df f003 	tbb	[pc, r3]
 800f100:	1f1f1f1d 	.word	0x1f1f1f1d
 800f104:	1f1f1f1f 	.word	0x1f1f1f1f
 800f108:	3f3c1f1f 	.word	0x3f3c1f1f
 800f10c:	4e1f4842 	.word	0x4e1f4842
 800f110:	5e5a5652 	.word	0x5e5a5652
 800f114:	6f1f6662 	.word	0x6f1f6662
 800f118:	817b7572 	.word	0x817b7572
 800f11c:	881f1f84 	.word	0x881f1f84
 800f120:	1f1f248b 	.word	0x1f1f248b
 800f124:	1f1f1f1f 	.word	0x1f1f1f1f
 800f128:	1f1f1f1f 	.word	0x1f1f1f1f
 800f12c:	8e1f1f1f 	.word	0x8e1f1f1f
 800f130:	1fa29f95 	.word	0x1fa29f95
 800f134:	b2afaca5 	.word	0xb2afaca5
 800f138:	b8          	.byte	0xb8
 800f139:	00          	.byte	0x00
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 800f13a:	2308      	movs	r3, #8
 800f13c:	9304      	str	r3, [sp, #16]
            break;
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 800f13e:	9804      	ldr	r0, [sp, #16]
 800f140:	9005      	str	r0, [sp, #20]
}
 800f142:	b007      	add	sp, #28
 800f144:	f85d fb04 	ldr.w	pc, [sp], #4
                .CurrentDr = getPhy->Datarate,
 800f148:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800f14c:	f88d 3004 	strb.w	r3, [sp, #4]
 800f150:	2304      	movs	r3, #4
 800f152:	f88d 3005 	strb.w	r3, [sp, #5]
 800f156:	2300      	movs	r3, #0
 800f158:	f88d 3006 	strb.w	r3, [sp, #6]
 800f15c:	2348      	movs	r3, #72	; 0x48
 800f15e:	f88d 3007 	strb.w	r3, [sp, #7]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800f162:	4b47      	ldr	r3, [pc, #284]	; (800f280 <RegionUS915GetPhyParam+0x194>)
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	f503 6290 	add.w	r2, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800f16a:	9202      	str	r2, [sp, #8]
 800f16c:	9303      	str	r3, [sp, #12]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800f16e:	a801      	add	r0, sp, #4
 800f170:	f7ff f8a8 	bl	800e2c4 <RegionCommonGetNextLowerTxDr>
 800f174:	9004      	str	r0, [sp, #16]
            break;
 800f176:	e7e2      	b.n	800f13e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800f178:	2340      	movs	r3, #64	; 0x40
 800f17a:	9304      	str	r3, [sp, #16]
            break;
 800f17c:	e7df      	b.n	800f13e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800f17e:	2320      	movs	r3, #32
 800f180:	9304      	str	r3, [sp, #16]
            break;
 800f182:	e7dc      	b.n	800f13e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 800f184:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800f188:	4a3e      	ldr	r2, [pc, #248]	; (800f284 <RegionUS915GetPhyParam+0x198>)
 800f18a:	5cd3      	ldrb	r3, [r2, r3]
 800f18c:	9304      	str	r3, [sp, #16]
            break;
 800f18e:	e7d6      	b.n	800f13e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 800f190:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800f194:	4a3c      	ldr	r2, [pc, #240]	; (800f288 <RegionUS915GetPhyParam+0x19c>)
 800f196:	5cd3      	ldrb	r3, [r2, r3]
 800f198:	9304      	str	r3, [sp, #16]
            break;
 800f19a:	e7d0      	b.n	800f13e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_MAX_RX_WINDOW;
 800f19c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800f1a0:	9304      	str	r3, [sp, #16]
            break;
 800f1a2:	e7cc      	b.n	800f13e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800f1a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f1a8:	9304      	str	r3, [sp, #16]
            break;
 800f1aa:	e7c8      	b.n	800f13e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800f1ac:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800f1b0:	9304      	str	r3, [sp, #16]
            break;
 800f1b2:	e7c4      	b.n	800f13e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800f1b4:	f241 3388 	movw	r3, #5000	; 0x1388
 800f1b8:	9304      	str	r3, [sp, #16]
            break;
 800f1ba:	e7c0      	b.n	800f13e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800f1bc:	f241 7370 	movw	r3, #6000	; 0x1770
 800f1c0:	9304      	str	r3, [sp, #16]
            break;
 800f1c2:	e7bc      	b.n	800f13e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 800f1c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f1c8:	9304      	str	r3, [sp, #16]
            break;
 800f1ca:	e7b8      	b.n	800f13e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 800f1cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800f1d0:	482e      	ldr	r0, [pc, #184]	; (800f28c <RegionUS915GetPhyParam+0x1a0>)
 800f1d2:	f001 fc7f 	bl	8010ad4 <randr>
 800f1d6:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800f1da:	9004      	str	r0, [sp, #16]
            break;
 800f1dc:	e7af      	b.n	800f13e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_RX_WND_2_FREQ;
 800f1de:	4b2c      	ldr	r3, [pc, #176]	; (800f290 <RegionUS915GetPhyParam+0x1a4>)
 800f1e0:	9304      	str	r3, [sp, #16]
            break;
 800f1e2:	e7ac      	b.n	800f13e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_RX_WND_2_DR;
 800f1e4:	2308      	movs	r3, #8
 800f1e6:	9304      	str	r3, [sp, #16]
            break;
 800f1e8:	e7a9      	b.n	800f13e <RegionUS915GetPhyParam+0x52>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800f1ea:	4b25      	ldr	r3, [pc, #148]	; (800f280 <RegionUS915GetPhyParam+0x194>)
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800f1f2:	9304      	str	r3, [sp, #16]
            break;
 800f1f4:	e7a3      	b.n	800f13e <RegionUS915GetPhyParam+0x52>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800f1f6:	4b22      	ldr	r3, [pc, #136]	; (800f280 <RegionUS915GetPhyParam+0x194>)
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 800f1fe:	9304      	str	r3, [sp, #16]
            break;
 800f200:	e79d      	b.n	800f13e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_MAX_NB_CHANNELS;
 800f202:	2348      	movs	r3, #72	; 0x48
 800f204:	9304      	str	r3, [sp, #16]
            break;
 800f206:	e79a      	b.n	800f13e <RegionUS915GetPhyParam+0x52>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800f208:	4b1d      	ldr	r3, [pc, #116]	; (800f280 <RegionUS915GetPhyParam+0x194>)
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	9304      	str	r3, [sp, #16]
            break;
 800f20e:	e796      	b.n	800f13e <RegionUS915GetPhyParam+0x52>
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 800f210:	4b20      	ldr	r3, [pc, #128]	; (800f294 <RegionUS915GetPhyParam+0x1a8>)
 800f212:	9304      	str	r3, [sp, #16]
            break;
 800f214:	e793      	b.n	800f13e <RegionUS915GetPhyParam+0x52>
            phyParam.fValue = 0;
 800f216:	2300      	movs	r3, #0
 800f218:	9304      	str	r3, [sp, #16]
            break;
 800f21a:	e790      	b.n	800f13e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800f21c:	4a1e      	ldr	r2, [pc, #120]	; (800f298 <RegionUS915GetPhyParam+0x1ac>)
 800f21e:	491c      	ldr	r1, [pc, #112]	; (800f290 <RegionUS915GetPhyParam+0x1a4>)
 800f220:	7900      	ldrb	r0, [r0, #4]
 800f222:	f7fe fcd9 	bl	800dbd8 <RegionBaseUSCalcDownlinkFrequency>
 800f226:	9004      	str	r0, [sp, #16]
            break;
 800f228:	e789      	b.n	800f13e <RegionUS915GetPhyParam+0x52>
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 800f22a:	2317      	movs	r3, #23
 800f22c:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 800f230:	2305      	movs	r3, #5
 800f232:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 800f236:	2303      	movs	r3, #3
 800f238:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 800f23c:	e77f      	b.n	800f13e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 800f23e:	2308      	movs	r3, #8
 800f240:	9304      	str	r3, [sp, #16]
            break;
 800f242:	e77c      	b.n	800f13e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 800f244:	2308      	movs	r3, #8
 800f246:	9304      	str	r3, [sp, #16]
            break;
 800f248:	e779      	b.n	800f13e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800f24a:	4a13      	ldr	r2, [pc, #76]	; (800f298 <RegionUS915GetPhyParam+0x1ac>)
 800f24c:	4910      	ldr	r1, [pc, #64]	; (800f290 <RegionUS915GetPhyParam+0x1a4>)
 800f24e:	7900      	ldrb	r0, [r0, #4]
 800f250:	f7fe fcc2 	bl	800dbd8 <RegionBaseUSCalcDownlinkFrequency>
 800f254:	9004      	str	r0, [sp, #16]
            break;
 800f256:	e772      	b.n	800f13e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 800f258:	2308      	movs	r3, #8
 800f25a:	9304      	str	r3, [sp, #16]
            break;
 800f25c:	e76f      	b.n	800f13e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 800f25e:	2308      	movs	r3, #8
 800f260:	9304      	str	r3, [sp, #16]
            break;
 800f262:	e76c      	b.n	800f13e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 800f264:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800f268:	4a0c      	ldr	r2, [pc, #48]	; (800f29c <RegionUS915GetPhyParam+0x1b0>)
 800f26a:	5cd3      	ldrb	r3, [r2, r3]
 800f26c:	9304      	str	r3, [sp, #16]
            break;
 800f26e:	e766      	b.n	800f13e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 800f270:	490b      	ldr	r1, [pc, #44]	; (800f2a0 <RegionUS915GetPhyParam+0x1b4>)
 800f272:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800f276:	f7ff f849 	bl	800e30c <RegionCommonGetBandwidth>
 800f27a:	9004      	str	r0, [sp, #16]
            break;
 800f27c:	e75f      	b.n	800f13e <RegionUS915GetPhyParam+0x52>
 800f27e:	bf00      	nop
 800f280:	20000e40 	.word	0x20000e40
 800f284:	08014748 	.word	0x08014748
 800f288:	08014738 	.word	0x08014738
 800f28c:	fffffc18 	.word	0xfffffc18
 800f290:	370870a0 	.word	0x370870a0
 800f294:	4200999a 	.word	0x4200999a
 800f298:	000927c0 	.word	0x000927c0
 800f29c:	08014728 	.word	0x08014728
 800f2a0:	080146d4 	.word	0x080146d4

0800f2a4 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800f2a4:	b510      	push	{r4, lr}
 800f2a6:	b082      	sub	sp, #8
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800f2a8:	4b0b      	ldr	r3, [pc, #44]	; (800f2d8 <RegionUS915SetBandTxDone+0x34>)
 800f2aa:	681c      	ldr	r4, [r3, #0]
 800f2ac:	4b0b      	ldr	r3, [pc, #44]	; (800f2dc <RegionUS915SetBandTxDone+0x38>)
 800f2ae:	681a      	ldr	r2, [r3, #0]
 800f2b0:	7803      	ldrb	r3, [r0, #0]
 800f2b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f2b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f2ba:	7a5b      	ldrb	r3, [r3, #9]
 800f2bc:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800f2c0:	6903      	ldr	r3, [r0, #16]
 800f2c2:	9300      	str	r3, [sp, #0]
 800f2c4:	68c3      	ldr	r3, [r0, #12]
 800f2c6:	7842      	ldrb	r2, [r0, #1]
 800f2c8:	6881      	ldr	r1, [r0, #8]
 800f2ca:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 800f2ce:	f7fe fdd2 	bl	800de76 <RegionCommonSetBandTxDone>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 800f2d2:	b002      	add	sp, #8
 800f2d4:	bd10      	pop	{r4, pc}
 800f2d6:	bf00      	nop
 800f2d8:	20000e3c 	.word	0x20000e3c
 800f2dc:	20000e40 	.word	0x20000e40

0800f2e0 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 800f2e0:	b510      	push	{r4, lr}
 800f2e2:	b086      	sub	sp, #24
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 800f2e4:	2301      	movs	r3, #1
 800f2e6:	f8ad 3000 	strh.w	r3, [sp]
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	f88d 3002 	strb.w	r3, [sp, #2]
 800f2f0:	9301      	str	r3, [sp, #4]
 800f2f2:	9302      	str	r3, [sp, #8]
 800f2f4:	9303      	str	r3, [sp, #12]
 800f2f6:	9304      	str	r3, [sp, #16]
 800f2f8:	f88d 3014 	strb.w	r3, [sp, #20]
    {
       US915_BAND0
    };

    switch( params->Type )
 800f2fc:	7a04      	ldrb	r4, [r0, #8]
 800f2fe:	b17c      	cbz	r4, 800f320 <RegionUS915InitDefaults+0x40>
 800f300:	3c01      	subs	r4, #1
 800f302:	b2e4      	uxtb	r4, r4
 800f304:	2c01      	cmp	r4, #1
 800f306:	f200 8082 	bhi.w	800f40e <RegionUS915InitDefaults+0x12e>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800f30a:	4b42      	ldr	r3, [pc, #264]	; (800f414 <RegionUS915InitDefaults+0x134>)
 800f30c:	6818      	ldr	r0, [r3, #0]
 800f30e:	2206      	movs	r2, #6
 800f310:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 800f314:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800f318:	f7fe fd9e 	bl	800de58 <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800f31c:	2300      	movs	r3, #0
 800f31e:	e074      	b.n	800f40a <RegionUS915InitDefaults+0x12a>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800f320:	6803      	ldr	r3, [r0, #0]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d073      	beq.n	800f40e <RegionUS915InitDefaults+0x12e>
 800f326:	6842      	ldr	r2, [r0, #4]
 800f328:	2a00      	cmp	r2, #0
 800f32a:	d070      	beq.n	800f40e <RegionUS915InitDefaults+0x12e>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800f32c:	493a      	ldr	r1, [pc, #232]	; (800f418 <RegionUS915InitDefaults+0x138>)
 800f32e:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800f330:	4938      	ldr	r1, [pc, #224]	; (800f414 <RegionUS915InitDefaults+0x134>)
 800f332:	600a      	str	r2, [r1, #0]
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800f334:	2200      	movs	r2, #0
 800f336:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            RegionNvmGroup1->JoinTrialsCounter = 0;
 800f33a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 800f33e:	2218      	movs	r2, #24
 800f340:	4669      	mov	r1, sp
 800f342:	4618      	mov	r0, r3
 800f344:	f001 fbd3 	bl	8010aee <memcpy1>
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800f348:	e011      	b.n	800f36e <RegionUS915InitDefaults+0x8e>
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 800f34a:	4b32      	ldr	r3, [pc, #200]	; (800f414 <RegionUS915InitDefaults+0x134>)
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	4933      	ldr	r1, [pc, #204]	; (800f41c <RegionUS915InitDefaults+0x13c>)
 800f350:	4a33      	ldr	r2, [pc, #204]	; (800f420 <RegionUS915InitDefaults+0x140>)
 800f352:	fb01 2204 	mla	r2, r1, r4, r2
 800f356:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800f35a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 800f35e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 800f362:	2230      	movs	r2, #48	; 0x30
 800f364:	7202      	strb	r2, [r0, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800f366:	2200      	movs	r2, #0
 800f368:	7242      	strb	r2, [r0, #9]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800f36a:	3401      	adds	r4, #1
 800f36c:	b2e4      	uxtb	r4, r4
 800f36e:	2c3f      	cmp	r4, #63	; 0x3f
 800f370:	d9eb      	bls.n	800f34a <RegionUS915InitDefaults+0x6a>
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800f372:	2340      	movs	r3, #64	; 0x40
 800f374:	2b47      	cmp	r3, #71	; 0x47
 800f376:	d814      	bhi.n	800f3a2 <RegionUS915InitDefaults+0xc2>
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 800f378:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
 800f37c:	4a25      	ldr	r2, [pc, #148]	; (800f414 <RegionUS915InitDefaults+0x134>)
 800f37e:	6812      	ldr	r2, [r2, #0]
 800f380:	4c28      	ldr	r4, [pc, #160]	; (800f424 <RegionUS915InitDefaults+0x144>)
 800f382:	4929      	ldr	r1, [pc, #164]	; (800f428 <RegionUS915InitDefaults+0x148>)
 800f384:	fb04 1100 	mla	r1, r4, r0, r1
 800f388:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800f38c:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 800f390:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 800f394:	2144      	movs	r1, #68	; 0x44
 800f396:	7221      	strb	r1, [r4, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800f398:	2100      	movs	r1, #0
 800f39a:	7261      	strb	r1, [r4, #9]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800f39c:	3301      	adds	r3, #1
 800f39e:	b2db      	uxtb	r3, r3
 800f3a0:	e7e8      	b.n	800f374 <RegionUS915InitDefaults+0x94>
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 800f3a2:	4c1c      	ldr	r4, [pc, #112]	; (800f414 <RegionUS915InitDefaults+0x134>)
 800f3a4:	6820      	ldr	r0, [r4, #0]
 800f3a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f3aa:	f8a0 348c 	strh.w	r3, [r0, #1164]	; 0x48c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 800f3ae:	f8a0 348e 	strh.w	r3, [r0, #1166]	; 0x48e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 800f3b2:	f8a0 3490 	strh.w	r3, [r0, #1168]	; 0x490
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 800f3b6:	f8a0 3492 	strh.w	r3, [r0, #1170]	; 0x492
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 800f3ba:	23ff      	movs	r3, #255	; 0xff
 800f3bc:	f8a0 3494 	strh.w	r3, [r0, #1172]	; 0x494
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	f8a0 3496 	strh.w	r3, [r0, #1174]	; 0x496
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800f3c6:	2206      	movs	r2, #6
 800f3c8:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 800f3cc:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800f3d0:	f7fe fd42 	bl	800de58 <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800f3d4:	4b10      	ldr	r3, [pc, #64]	; (800f418 <RegionUS915InitDefaults+0x138>)
 800f3d6:	6818      	ldr	r0, [r3, #0]
 800f3d8:	6821      	ldr	r1, [r4, #0]
 800f3da:	2206      	movs	r2, #6
 800f3dc:	f501 6190 	add.w	r1, r1, #1152	; 0x480
 800f3e0:	3090      	adds	r0, #144	; 0x90
 800f3e2:	f7fe fd39 	bl	800de58 <RegionCommonChanMaskCopy>
            break;
 800f3e6:	e012      	b.n	800f40e <RegionUS915InitDefaults+0x12e>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800f3e8:	4a0b      	ldr	r2, [pc, #44]	; (800f418 <RegionUS915InitDefaults+0x138>)
 800f3ea:	6811      	ldr	r1, [r2, #0]
 800f3ec:	4a09      	ldr	r2, [pc, #36]	; (800f414 <RegionUS915InitDefaults+0x134>)
 800f3ee:	6812      	ldr	r2, [r2, #0]
 800f3f0:	f503 7010 	add.w	r0, r3, #576	; 0x240
 800f3f4:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 800f3f8:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800f3fc:	f831 4010 	ldrh.w	r4, [r1, r0, lsl #1]
 800f400:	4022      	ands	r2, r4
 800f402:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800f406:	3301      	adds	r3, #1
 800f408:	b2db      	uxtb	r3, r3
 800f40a:	2b05      	cmp	r3, #5
 800f40c:	d9ec      	bls.n	800f3e8 <RegionUS915InitDefaults+0x108>
        {
            break;
        }
    }
#endif /* REGION_US915 */
}
 800f40e:	b006      	add	sp, #24
 800f410:	bd10      	pop	{r4, pc}
 800f412:	bf00      	nop
 800f414:	20000e40 	.word	0x20000e40
 800f418:	20000e3c 	.word	0x20000e3c
 800f41c:	00030d40 	.word	0x00030d40
 800f420:	35c80160 	.word	0x35c80160
 800f424:	00186a00 	.word	0x00186a00
 800f428:	35d2afc0 	.word	0x35d2afc0

0800f42c <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800f42c:	b508      	push	{r3, lr}
#if defined( REGION_US915 )
    switch( phyAttribute )
 800f42e:	290a      	cmp	r1, #10
 800f430:	d829      	bhi.n	800f486 <RegionUS915Verify+0x5a>
 800f432:	e8df f001 	tbb	[pc, r1]
 800f436:	2806      	.short	0x2806
 800f438:	0a282828 	.word	0x0a282828
 800f43c:	1e28140a 	.word	0x1e28140a
 800f440:	1e          	.byte	0x1e
 800f441:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 800f442:	6800      	ldr	r0, [r0, #0]
 800f444:	f7ff fde8 	bl	800f018 <VerifyRfFreq>
 800f448:	e01e      	b.n	800f488 <RegionUS915Verify+0x5c>
        }
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
        case PHY_TX_DR:
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 800f44a:	2204      	movs	r2, #4
 800f44c:	2100      	movs	r1, #0
 800f44e:	f990 0000 	ldrsb.w	r0, [r0]
 800f452:	f7fe fc90 	bl	800dd76 <RegionCommonValueInRange>
 800f456:	3800      	subs	r0, #0
 800f458:	bf18      	it	ne
 800f45a:	2001      	movne	r0, #1
 800f45c:	e014      	b.n	800f488 <RegionUS915Verify+0x5c>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 800f45e:	220d      	movs	r2, #13
 800f460:	2108      	movs	r1, #8
 800f462:	f990 0000 	ldrsb.w	r0, [r0]
 800f466:	f7fe fc86 	bl	800dd76 <RegionCommonValueInRange>
 800f46a:	3800      	subs	r0, #0
 800f46c:	bf18      	it	ne
 800f46e:	2001      	movne	r0, #1
 800f470:	e00a      	b.n	800f488 <RegionUS915Verify+0x5c>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 800f472:	220e      	movs	r2, #14
 800f474:	2100      	movs	r1, #0
 800f476:	f990 0000 	ldrsb.w	r0, [r0]
 800f47a:	f7fe fc7c 	bl	800dd76 <RegionCommonValueInRange>
 800f47e:	3800      	subs	r0, #0
 800f480:	bf18      	it	ne
 800f482:	2001      	movne	r0, #1
 800f484:	e000      	b.n	800f488 <RegionUS915Verify+0x5c>
    switch( phyAttribute )
 800f486:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_US915 */
}
 800f488:	bd08      	pop	{r3, pc}
	...

0800f48c <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 800f48c:	7903      	ldrb	r3, [r0, #4]
 800f48e:	2b10      	cmp	r3, #16
 800f490:	d138      	bne.n	800f504 <RegionUS915ApplyCFList+0x78>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 800f492:	6803      	ldr	r3, [r0, #0]
 800f494:	7bdb      	ldrb	r3, [r3, #15]
 800f496:	2b01      	cmp	r3, #1
 800f498:	d134      	bne.n	800f504 <RegionUS915ApplyCFList+0x78>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800f49a:	2200      	movs	r2, #0
 800f49c:	4613      	mov	r3, r2
 800f49e:	2a04      	cmp	r2, #4
 800f4a0:	d82f      	bhi.n	800f502 <RegionUS915ApplyCFList+0x76>
{
 800f4a2:	b530      	push	{r4, r5, lr}
 800f4a4:	e012      	b.n	800f4cc <RegionUS915ApplyCFList+0x40>
        if( chMaskItr == 4 )
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 800f4a6:	4d18      	ldr	r5, [pc, #96]	; (800f508 <RegionUS915ApplyCFList+0x7c>)
 800f4a8:	682d      	ldr	r5, [r5, #0]
 800f4aa:	f501 7c10 	add.w	ip, r1, #576	; 0x240
 800f4ae:	f834 401c 	ldrh.w	r4, [r4, ip, lsl #1]
 800f4b2:	3148      	adds	r1, #72	; 0x48
 800f4b4:	f835 c011 	ldrh.w	ip, [r5, r1, lsl #1]
 800f4b8:	ea04 040c 	and.w	r4, r4, ip
 800f4bc:	f825 4011 	strh.w	r4, [r5, r1, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800f4c0:	3301      	adds	r3, #1
 800f4c2:	b2db      	uxtb	r3, r3
 800f4c4:	3202      	adds	r2, #2
 800f4c6:	b2d2      	uxtb	r2, r2
 800f4c8:	2b04      	cmp	r3, #4
 800f4ca:	d819      	bhi.n	800f500 <RegionUS915ApplyCFList+0x74>
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 800f4cc:	6805      	ldr	r5, [r0, #0]
 800f4ce:	490f      	ldr	r1, [pc, #60]	; (800f50c <RegionUS915ApplyCFList+0x80>)
 800f4d0:	680c      	ldr	r4, [r1, #0]
 800f4d2:	4619      	mov	r1, r3
 800f4d4:	f815 c002 	ldrb.w	ip, [r5, r2]
 800f4d8:	f503 7510 	add.w	r5, r3, #576	; 0x240
 800f4dc:	f824 c015 	strh.w	ip, [r4, r5, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 800f4e0:	f8d0 e000 	ldr.w	lr, [r0]
 800f4e4:	4496      	add	lr, r2
 800f4e6:	f89e e001 	ldrb.w	lr, [lr, #1]
 800f4ea:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
 800f4ee:	f824 c015 	strh.w	ip, [r4, r5, lsl #1]
        if( chMaskItr == 4 )
 800f4f2:	2b04      	cmp	r3, #4
 800f4f4:	d1d7      	bne.n	800f4a6 <RegionUS915ApplyCFList+0x1a>
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 800f4f6:	fa5f fc8c 	uxtb.w	ip, ip
 800f4fa:	f824 c015 	strh.w	ip, [r4, r5, lsl #1]
 800f4fe:	e7d2      	b.n	800f4a6 <RegionUS915ApplyCFList+0x1a>
    }
#endif /* REGION_US915 */
}
 800f500:	bd30      	pop	{r4, r5, pc}
 800f502:	4770      	bx	lr
 800f504:	4770      	bx	lr
 800f506:	bf00      	nop
 800f508:	20000e3c 	.word	0x20000e3c
 800f50c:	20000e40 	.word	0x20000e40

0800f510 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800f510:	b570      	push	{r4, r5, r6, lr}
 800f512:	4605      	mov	r5, r0
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 800f514:	2204      	movs	r2, #4
 800f516:	2100      	movs	r1, #0
 800f518:	6800      	ldr	r0, [r0, #0]
 800f51a:	f7fe fc87 	bl	800de2c <RegionCommonCountChannels>

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 800f51e:	2801      	cmp	r0, #1
 800f520:	d033      	beq.n	800f58a <RegionUS915ChanMaskSet+0x7a>
        ( nbChannels > 0 ) )
    {
        return false;
    }

    switch( chanMaskSet->ChannelsMaskType )
 800f522:	792c      	ldrb	r4, [r5, #4]
 800f524:	b11c      	cbz	r4, 800f52e <RegionUS915ChanMaskSet+0x1e>
 800f526:	2c01      	cmp	r4, #1
 800f528:	d025      	beq.n	800f576 <RegionUS915ChanMaskSet+0x66>
 800f52a:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 800f52c:	bd70      	pop	{r4, r5, r6, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800f52e:	4e18      	ldr	r6, [pc, #96]	; (800f590 <RegionUS915ChanMaskSet+0x80>)
 800f530:	6830      	ldr	r0, [r6, #0]
 800f532:	2206      	movs	r2, #6
 800f534:	6829      	ldr	r1, [r5, #0]
 800f536:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800f53a:	f7fe fc8d 	bl	800de58 <RegionCommonChanMaskCopy>
            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 800f53e:	6835      	ldr	r5, [r6, #0]
 800f540:	f895 3494 	ldrb.w	r3, [r5, #1172]	; 0x494
 800f544:	f8a5 3494 	strh.w	r3, [r5, #1172]	; 0x494
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800f548:	2300      	movs	r3, #0
 800f54a:	f8a5 3496 	strh.w	r3, [r5, #1174]	; 0x496
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800f54e:	e00e      	b.n	800f56e <RegionUS915ChanMaskSet+0x5e>
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800f550:	4b10      	ldr	r3, [pc, #64]	; (800f594 <RegionUS915ChanMaskSet+0x84>)
 800f552:	681a      	ldr	r2, [r3, #0]
 800f554:	f504 7310 	add.w	r3, r4, #576	; 0x240
 800f558:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 800f55c:	f104 0148 	add.w	r1, r4, #72	; 0x48
 800f560:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
 800f564:	4003      	ands	r3, r0
 800f566:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800f56a:	3401      	adds	r4, #1
 800f56c:	b2e4      	uxtb	r4, r4
 800f56e:	2c05      	cmp	r4, #5
 800f570:	d9ee      	bls.n	800f550 <RegionUS915ChanMaskSet+0x40>
    return true;
 800f572:	2001      	movs	r0, #1
 800f574:	e7da      	b.n	800f52c <RegionUS915ChanMaskSet+0x1c>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800f576:	4b06      	ldr	r3, [pc, #24]	; (800f590 <RegionUS915ChanMaskSet+0x80>)
 800f578:	6818      	ldr	r0, [r3, #0]
 800f57a:	2206      	movs	r2, #6
 800f57c:	6829      	ldr	r1, [r5, #0]
 800f57e:	f200 408c 	addw	r0, r0, #1164	; 0x48c
 800f582:	f7fe fc69 	bl	800de58 <RegionCommonChanMaskCopy>
    return true;
 800f586:	2001      	movs	r0, #1
            break;
 800f588:	e7d0      	b.n	800f52c <RegionUS915ChanMaskSet+0x1c>
        return false;
 800f58a:	2000      	movs	r0, #0
 800f58c:	e7ce      	b.n	800f52c <RegionUS915ChanMaskSet+0x1c>
 800f58e:	bf00      	nop
 800f590:	20000e40 	.word	0x20000e40
 800f594:	20000e3c 	.word	0x20000e3c

0800f598 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800f598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f59a:	b083      	sub	sp, #12
 800f59c:	460e      	mov	r6, r1
 800f59e:	4617      	mov	r7, r2
 800f5a0:	461c      	mov	r4, r3
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 800f5a2:	280d      	cmp	r0, #13
 800f5a4:	bfa8      	it	ge
 800f5a6:	200d      	movge	r0, #13
 800f5a8:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 800f5aa:	4d0f      	ldr	r5, [pc, #60]	; (800f5e8 <RegionUS915ComputeRxWindowParameters+0x50>)
 800f5ac:	4629      	mov	r1, r5
 800f5ae:	f7fe fead 	bl	800e30c <RegionCommonGetBandwidth>
 800f5b2:	70a0      	strb	r0, [r4, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 800f5b4:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800f5b8:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 800f5bc:	4a0b      	ldr	r2, [pc, #44]	; (800f5ec <RegionUS915ComputeRxWindowParameters+0x54>)
 800f5be:	5cd0      	ldrb	r0, [r2, r3]
 800f5c0:	f7fe fd70 	bl	800e0a4 <RegionCommonComputeSymbolTimeLoRa>
 800f5c4:	4605      	mov	r5, r0

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800f5c6:	4b0a      	ldr	r3, [pc, #40]	; (800f5f0 <RegionUS915ComputeRxWindowParameters+0x58>)
 800f5c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f5ca:	4798      	blx	r3
 800f5cc:	4603      	mov	r3, r0
 800f5ce:	f104 020c 	add.w	r2, r4, #12
 800f5d2:	9201      	str	r2, [sp, #4]
 800f5d4:	3408      	adds	r4, #8
 800f5d6:	9400      	str	r4, [sp, #0]
 800f5d8:	463a      	mov	r2, r7
 800f5da:	4631      	mov	r1, r6
 800f5dc:	4628      	mov	r0, r5
 800f5de:	f7fe fd6f 	bl	800e0c0 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 800f5e2:	b003      	add	sp, #12
 800f5e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f5e6:	bf00      	nop
 800f5e8:	080146d4 	.word	0x080146d4
 800f5ec:	08014728 	.word	0x08014728
 800f5f0:	08014cbc 	.word	0x08014cbc

0800f5f4 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800f5f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f5f8:	b08b      	sub	sp, #44	; 0x2c
 800f5fa:	4604      	mov	r4, r0
 800f5fc:	460d      	mov	r5, r1
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 800f5fe:	f990 6001 	ldrsb.w	r6, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800f602:	6847      	ldr	r7, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800f604:	4b22      	ldr	r3, [pc, #136]	; (800f690 <RegionUS915RxConfig+0x9c>)
 800f606:	685b      	ldr	r3, [r3, #4]
 800f608:	4798      	blx	r3
 800f60a:	2800      	cmp	r0, #0
 800f60c:	d13d      	bne.n	800f68a <RegionUS915RxConfig+0x96>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800f60e:	7ce3      	ldrb	r3, [r4, #19]
 800f610:	b933      	cbnz	r3, 800f620 <RegionUS915RxConfig+0x2c>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 800f612:	7827      	ldrb	r7, [r4, #0]
 800f614:	f007 0307 	and.w	r3, r7, #7
 800f618:	4a1e      	ldr	r2, [pc, #120]	; (800f694 <RegionUS915RxConfig+0xa0>)
 800f61a:	4f1f      	ldr	r7, [pc, #124]	; (800f698 <RegionUS915RxConfig+0xa4>)
 800f61c:	fb02 7703 	mla	r7, r2, r3, r7
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 800f620:	4b1e      	ldr	r3, [pc, #120]	; (800f69c <RegionUS915RxConfig+0xa8>)
 800f622:	f913 9006 	ldrsb.w	r9, [r3, r6]

    Radio.SetChannel( frequency );
 800f626:	f8df 8068 	ldr.w	r8, [pc, #104]	; 800f690 <RegionUS915RxConfig+0x9c>
 800f62a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f62e:	4638      	mov	r0, r7
 800f630:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800f632:	f8d8 8018 	ldr.w	r8, [r8, #24]
 800f636:	7ca3      	ldrb	r3, [r4, #18]
 800f638:	9309      	str	r3, [sp, #36]	; 0x24
 800f63a:	2001      	movs	r0, #1
 800f63c:	9008      	str	r0, [sp, #32]
 800f63e:	2200      	movs	r2, #0
 800f640:	9207      	str	r2, [sp, #28]
 800f642:	9206      	str	r2, [sp, #24]
 800f644:	9205      	str	r2, [sp, #20]
 800f646:	9204      	str	r2, [sp, #16]
 800f648:	9203      	str	r2, [sp, #12]
 800f64a:	8923      	ldrh	r3, [r4, #8]
 800f64c:	9302      	str	r3, [sp, #8]
 800f64e:	2308      	movs	r3, #8
 800f650:	9301      	str	r3, [sp, #4]
 800f652:	9200      	str	r2, [sp, #0]
 800f654:	4603      	mov	r3, r0
 800f656:	464a      	mov	r2, r9
 800f658:	78a1      	ldrb	r1, [r4, #2]
 800f65a:	47c0      	blx	r8

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 800f65c:	7c63      	ldrb	r3, [r4, #17]
 800f65e:	b18b      	cbz	r3, 800f684 <RegionUS915RxConfig+0x90>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 800f660:	4b0f      	ldr	r3, [pc, #60]	; (800f6a0 <RegionUS915RxConfig+0xac>)
 800f662:	5d99      	ldrb	r1, [r3, r6]
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800f664:	4b0a      	ldr	r3, [pc, #40]	; (800f690 <RegionUS915RxConfig+0x9c>)
 800f666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f668:	310d      	adds	r1, #13
 800f66a:	b2c9      	uxtb	r1, r1
 800f66c:	2001      	movs	r0, #1
 800f66e:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800f670:	4632      	mov	r2, r6
 800f672:	4639      	mov	r1, r7
 800f674:	7ce0      	ldrb	r0, [r4, #19]
 800f676:	f7fe fe5b 	bl	800e330 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 800f67a:	702e      	strb	r6, [r5, #0]
    return true;
 800f67c:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_US915 */
}
 800f67e:	b00b      	add	sp, #44	; 0x2c
 800f680:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 800f684:	4b07      	ldr	r3, [pc, #28]	; (800f6a4 <RegionUS915RxConfig+0xb0>)
 800f686:	5d99      	ldrb	r1, [r3, r6]
 800f688:	e7ec      	b.n	800f664 <RegionUS915RxConfig+0x70>
        return false;
 800f68a:	2000      	movs	r0, #0
 800f68c:	e7f7      	b.n	800f67e <RegionUS915RxConfig+0x8a>
 800f68e:	bf00      	nop
 800f690:	08014cbc 	.word	0x08014cbc
 800f694:	000927c0 	.word	0x000927c0
 800f698:	370870a0 	.word	0x370870a0
 800f69c:	08014728 	.word	0x08014728
 800f6a0:	08014738 	.word	0x08014738
 800f6a4:	08014748 	.word	0x08014748

0800f6a8 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800f6a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6ac:	b08d      	sub	sp, #52	; 0x34
 800f6ae:	4604      	mov	r4, r0
 800f6b0:	468b      	mov	fp, r1
 800f6b2:	4617      	mov	r7, r2
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 800f6b4:	f990 2001 	ldrsb.w	r2, [r0, #1]
 800f6b8:	4b32      	ldr	r3, [pc, #200]	; (800f784 <RegionUS915TxConfig+0xdc>)
 800f6ba:	f913 a002 	ldrsb.w	sl, [r3, r2]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 800f6be:	4b32      	ldr	r3, [pc, #200]	; (800f788 <RegionUS915TxConfig+0xe0>)
 800f6c0:	6818      	ldr	r0, [r3, #0]
 800f6c2:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 800f78c <RegionUS915TxConfig+0xe4>
 800f6c6:	f8d9 3000 	ldr.w	r3, [r9]
 800f6ca:	7821      	ldrb	r1, [r4, #0]
 800f6cc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800f6d0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800f6d4:	7a49      	ldrb	r1, [r1, #9]
 800f6d6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800f6da:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800f6de:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800f6e2:	f991 1002 	ldrsb.w	r1, [r1, #2]
 800f6e6:	f994 0002 	ldrsb.w	r0, [r4, #2]
 800f6ea:	f7ff fce3 	bl	800f0b4 <LimitTxPower>
 800f6ee:	4606      	mov	r6, r0
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 800f6f0:	4927      	ldr	r1, [pc, #156]	; (800f790 <RegionUS915TxConfig+0xe8>)
 800f6f2:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800f6f6:	f7fe fe09 	bl	800e30c <RegionCommonGetBandwidth>
 800f6fa:	900a      	str	r0, [sp, #40]	; 0x28
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	4925      	ldr	r1, [pc, #148]	; (800f794 <RegionUS915TxConfig+0xec>)
 800f700:	4630      	mov	r0, r6
 800f702:	f7fe fd19 	bl	800e138 <RegionCommonComputeTxPower>
 800f706:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800f708:	f8df 808c 	ldr.w	r8, [pc, #140]	; 800f798 <RegionUS915TxConfig+0xf0>
 800f70c:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800f710:	f8d9 1000 	ldr.w	r1, [r9]
 800f714:	7823      	ldrb	r3, [r4, #0]
 800f716:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f71a:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800f71e:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800f720:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800f724:	9308      	str	r3, [sp, #32]
 800f726:	2200      	movs	r2, #0
 800f728:	9207      	str	r2, [sp, #28]
 800f72a:	9206      	str	r2, [sp, #24]
 800f72c:	9205      	str	r2, [sp, #20]
 800f72e:	2501      	movs	r5, #1
 800f730:	9504      	str	r5, [sp, #16]
 800f732:	9203      	str	r2, [sp, #12]
 800f734:	2308      	movs	r3, #8
 800f736:	9302      	str	r3, [sp, #8]
 800f738:	9501      	str	r5, [sp, #4]
 800f73a:	f8cd a000 	str.w	sl, [sp]
 800f73e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f740:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f742:	4628      	mov	r0, r5
 800f744:	f8d8 c01c 	ldr.w	ip, [r8, #28]
 800f748:	47e0      	blx	ip
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800f74a:	f8d9 2000 	ldr.w	r2, [r9]
 800f74e:	7823      	ldrb	r3, [r4, #0]
 800f750:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f754:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800f758:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f75c:	f7fe fe0a 	bl	800e374 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 800f760:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 800f764:	7b21      	ldrb	r1, [r4, #12]
 800f766:	4628      	mov	r0, r5
 800f768:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800f76a:	89a1      	ldrh	r1, [r4, #12]
 800f76c:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800f770:	f7ff fc82 	bl	800f078 <GetTimeOnAir>
 800f774:	6038      	str	r0, [r7, #0]

    *txPower = txPowerLimited;
 800f776:	f88b 6000 	strb.w	r6, [fp]
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 800f77a:	4628      	mov	r0, r5
 800f77c:	b00d      	add	sp, #52	; 0x34
 800f77e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f782:	bf00      	nop
 800f784:	08014728 	.word	0x08014728
 800f788:	20000e3c 	.word	0x20000e3c
 800f78c:	20000e40 	.word	0x20000e40
 800f790:	080146d4 	.word	0x080146d4
 800f794:	41f00000 	.word	0x41f00000
 800f798:	08014cbc 	.word	0x08014cbc

0800f79c <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800f79c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f7a0:	b091      	sub	sp, #68	; 0x44
 800f7a2:	4605      	mov	r5, r0
 800f7a4:	4688      	mov	r8, r1
 800f7a6:	4617      	mov	r7, r2
 800f7a8:	461e      	mov	r6, r3
    uint8_t status = 0x07;
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800f7aa:	2400      	movs	r4, #0
 800f7ac:	940e      	str	r4, [sp, #56]	; 0x38
 800f7ae:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
 800f7b2:	940b      	str	r4, [sp, #44]	; 0x2c
 800f7b4:	940c      	str	r4, [sp, #48]	; 0x30
 800f7b6:	940d      	str	r4, [sp, #52]	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800f7b8:	4b9c      	ldr	r3, [pc, #624]	; (800fa2c <RegionUS915LinkAdrReq+0x290>)
 800f7ba:	6819      	ldr	r1, [r3, #0]
 800f7bc:	2206      	movs	r2, #6
 800f7be:	f501 6190 	add.w	r1, r1, #1152	; 0x480
 800f7c2:	a80b      	add	r0, sp, #44	; 0x2c
 800f7c4:	f7fe fb48 	bl	800de58 <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800f7c8:	e00d      	b.n	800f7e6 <RegionUS915LinkAdrReq+0x4a>
        status = 0x07;

        if( linkAdrParams.ChMaskCtrl == 6 )
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 800f7ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f7ce:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0xFFFF;
 800f7d2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0xFFFF;
 800f7d6:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0xFFFF;
 800f7da:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800f7de:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 800f7e2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800f7e6:	7a2b      	ldrb	r3, [r5, #8]
 800f7e8:	42a3      	cmp	r3, r4
 800f7ea:	f240 8081 	bls.w	800f8f0 <RegionUS915LinkAdrReq+0x154>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800f7ee:	6868      	ldr	r0, [r5, #4]
 800f7f0:	a90e      	add	r1, sp, #56	; 0x38
 800f7f2:	4420      	add	r0, r4
 800f7f4:	f7fe fbe0 	bl	800dfb8 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800f7f8:	2800      	cmp	r0, #0
 800f7fa:	d079      	beq.n	800f8f0 <RegionUS915LinkAdrReq+0x154>
        bytesProcessed += nextIndex;
 800f7fc:	4404      	add	r4, r0
 800f7fe:	b2e4      	uxtb	r4, r4
        if( linkAdrParams.ChMaskCtrl == 6 )
 800f800:	f89d c03b 	ldrb.w	ip, [sp, #59]	; 0x3b
 800f804:	f1bc 0f06 	cmp.w	ip, #6
 800f808:	d0df      	beq.n	800f7ca <RegionUS915LinkAdrReq+0x2e>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 800f80a:	f1bc 0f07 	cmp.w	ip, #7
 800f80e:	d00a      	beq.n	800f826 <RegionUS915LinkAdrReq+0x8a>
            channelsMask[2] = 0x0000;
            channelsMask[3] = 0x0000;
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 800f810:	f1bc 0f05 	cmp.w	ip, #5
 800f814:	d068      	beq.n	800f8e8 <RegionUS915LinkAdrReq+0x14c>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 800f816:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800f81a:	aa10      	add	r2, sp, #64	; 0x40
 800f81c:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 800f820:	f82c 3c14 	strh.w	r3, [ip, #-20]
 800f824:	e7df      	b.n	800f7e6 <RegionUS915LinkAdrReq+0x4a>
            channelsMask[0] = 0x0000;
 800f826:	2300      	movs	r3, #0
 800f828:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0x0000;
 800f82c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0x0000;
 800f830:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0x0000;
 800f834:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800f838:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 800f83c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800f840:	e7d1      	b.n	800f7e6 <RegionUS915LinkAdrReq+0x4a>
                        channelsMask[cntChannelMask] |= 0xFF00;
 800f842:	aa10      	add	r2, sp, #64	; 0x40
 800f844:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800f848:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800f84c:	f062 02ff 	orn	r2, r2, #255	; 0xff
 800f850:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 800f854:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800f858:	4313      	orrs	r3, r2
 800f85a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                        cntChannelMask++;
 800f85e:	3101      	adds	r1, #1
 800f860:	b2c9      	uxtb	r1, r1
            for( uint8_t i = 0; i <= 7; i++ )
 800f862:	f10c 0c01 	add.w	ip, ip, #1
 800f866:	fa5f fc8c 	uxtb.w	ip, ip
 800f86a:	f1bc 0f07 	cmp.w	ip, #7
 800f86e:	d8ba      	bhi.n	800f7e6 <RegionUS915LinkAdrReq+0x4a>
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 800f870:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 800f874:	2301      	movs	r3, #1
 800f876:	fa03 f30c 	lsl.w	r3, r3, ip
 800f87a:	421a      	tst	r2, r3
 800f87c:	d011      	beq.n	800f8a2 <RegionUS915LinkAdrReq+0x106>
                    if( ( i % 2 ) == 0 )
 800f87e:	f01c 0f01 	tst.w	ip, #1
 800f882:	d1de      	bne.n	800f842 <RegionUS915LinkAdrReq+0xa6>
                        channelsMask[cntChannelMask] |= 0x00FF;
 800f884:	aa10      	add	r2, sp, #64	; 0x40
 800f886:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800f88a:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800f88e:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 800f892:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 800f896:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800f89a:	4313      	orrs	r3, r2
 800f89c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800f8a0:	e7df      	b.n	800f862 <RegionUS915LinkAdrReq+0xc6>
                    if( ( i % 2 ) == 0 )
 800f8a2:	f01c 0f01 	tst.w	ip, #1
 800f8a6:	d10f      	bne.n	800f8c8 <RegionUS915LinkAdrReq+0x12c>
                        channelsMask[cntChannelMask] &= 0xFF00;
 800f8a8:	aa10      	add	r2, sp, #64	; 0x40
 800f8aa:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800f8ae:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800f8b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800f8b6:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 800f8ba:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800f8be:	ea22 0303 	bic.w	r3, r2, r3
 800f8c2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800f8c6:	e7cc      	b.n	800f862 <RegionUS915LinkAdrReq+0xc6>
                        channelsMask[cntChannelMask] &= 0x00FF;
 800f8c8:	aa10      	add	r2, sp, #64	; 0x40
 800f8ca:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 800f8ce:	f812 0c14 	ldrb.w	r0, [r2, #-20]
 800f8d2:	f822 0c14 	strh.w	r0, [r2, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 800f8d6:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800f8da:	ea22 0303 	bic.w	r3, r2, r3
 800f8de:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                        cntChannelMask++;
 800f8e2:	3101      	adds	r1, #1
 800f8e4:	b2c9      	uxtb	r1, r1
 800f8e6:	e7bc      	b.n	800f862 <RegionUS915LinkAdrReq+0xc6>
            for( uint8_t i = 0; i <= 7; i++ )
 800f8e8:	f04f 0c00 	mov.w	ip, #0
            uint8_t cntChannelMask = 0;
 800f8ec:	4661      	mov	r1, ip
 800f8ee:	e7bc      	b.n	800f86a <RegionUS915LinkAdrReq+0xce>
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 800f8f0:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800f8f4:	2b03      	cmp	r3, #3
 800f8f6:	dd58      	ble.n	800f9aa <RegionUS915LinkAdrReq+0x20e>
 800f8f8:	f04f 0907 	mov.w	r9, #7
    {
        status &= 0xFE; // Channel mask KO
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800f8fc:	2302      	movs	r3, #2
 800f8fe:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800f902:	7a6b      	ldrb	r3, [r5, #9]
 800f904:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    phyParam = RegionUS915GetPhyParam( &getPhy );
 800f908:	a809      	add	r0, sp, #36	; 0x24
 800f90a:	f7ff fbef 	bl	800f0ec <RegionUS915GetPhyParam>
 800f90e:	9008      	str	r0, [sp, #32]

    linkAdrVerifyParams.Status = status;
 800f910:	f88d 9004 	strb.w	r9, [sp, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800f914:	7aab      	ldrb	r3, [r5, #10]
 800f916:	f88d 3005 	strb.w	r3, [sp, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800f91a:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800f91e:	f88d 3006 	strb.w	r3, [sp, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800f922:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 800f926:	f88d 3007 	strb.w	r3, [sp, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800f92a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800f92e:	f88d 3008 	strb.w	r3, [sp, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800f932:	f995 300b 	ldrsb.w	r3, [r5, #11]
 800f936:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800f93a:	f995 300c 	ldrsb.w	r3, [r5, #12]
 800f93e:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800f942:	f995 300d 	ldrsb.w	r3, [r5, #13]
 800f946:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 800f94a:	2348      	movs	r3, #72	; 0x48
 800f94c:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 800f950:	ab0b      	add	r3, sp, #44	; 0x2c
 800f952:	9304      	str	r3, [sp, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800f954:	f88d 0014 	strb.w	r0, [sp, #20]
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 800f958:	2304      	movs	r3, #4
 800f95a:	f88d 3015 	strb.w	r3, [sp, #21]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800f95e:	4b33      	ldr	r3, [pc, #204]	; (800fa2c <RegionUS915LinkAdrReq+0x290>)
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	9306      	str	r3, [sp, #24]
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 800f964:	230e      	movs	r3, #14
 800f966:	f88d 301c 	strb.w	r3, [sp, #28]
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 800f96a:	2300      	movs	r3, #0
 800f96c:	f88d 301d 	strb.w	r3, [sp, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800f970:	682b      	ldr	r3, [r5, #0]
 800f972:	9300      	str	r3, [sp, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800f974:	ab0e      	add	r3, sp, #56	; 0x38
 800f976:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 800f97a:	f10d 0139 	add.w	r1, sp, #57	; 0x39
 800f97e:	4668      	mov	r0, sp
 800f980:	f7fe fb38 	bl	800dff4 <RegionCommonLinkAdrReqVerifyParams>
 800f984:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800f986:	2807      	cmp	r0, #7
 800f988:	d01c      	beq.n	800f9c4 <RegionUS915LinkAdrReq+0x228>
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800f98a:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800f98e:	f888 3000 	strb.w	r3, [r8]
    *txPowOut = linkAdrParams.TxPower;
 800f992:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 800f996:	703b      	strb	r3, [r7, #0]
    *nbRepOut = linkAdrParams.NbRep;
 800f998:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800f99c:	7033      	strb	r3, [r6, #0]
    *nbBytesParsed = bytesProcessed;
 800f99e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800f9a0:	701c      	strb	r4, [r3, #0]

#endif /* REGION_US915 */
    return status;
}
 800f9a2:	4628      	mov	r0, r5
 800f9a4:	b011      	add	sp, #68	; 0x44
 800f9a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 800f9aa:	2204      	movs	r2, #4
 800f9ac:	2100      	movs	r1, #0
 800f9ae:	a80b      	add	r0, sp, #44	; 0x2c
 800f9b0:	f7fe fa3c 	bl	800de2c <RegionCommonCountChannels>
 800f9b4:	2801      	cmp	r0, #1
 800f9b6:	d902      	bls.n	800f9be <RegionUS915LinkAdrReq+0x222>
 800f9b8:	f04f 0907 	mov.w	r9, #7
 800f9bc:	e79e      	b.n	800f8fc <RegionUS915LinkAdrReq+0x160>
        status &= 0xFE; // Channel mask KO
 800f9be:	f04f 0906 	mov.w	r9, #6
 800f9c2:	e79b      	b.n	800f8fc <RegionUS915LinkAdrReq+0x160>
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 800f9c4:	f8df 9064 	ldr.w	r9, [pc, #100]	; 800fa2c <RegionUS915LinkAdrReq+0x290>
 800f9c8:	f8d9 0000 	ldr.w	r0, [r9]
 800f9cc:	2206      	movs	r2, #6
 800f9ce:	a90b      	add	r1, sp, #44	; 0x2c
 800f9d0:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800f9d4:	f7fe fa40 	bl	800de58 <RegionCommonChanMaskCopy>
        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 800f9d8:	4b15      	ldr	r3, [pc, #84]	; (800fa30 <RegionUS915LinkAdrReq+0x294>)
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	f8d9 2000 	ldr.w	r2, [r9]
 800f9e0:	f8b2 1480 	ldrh.w	r1, [r2, #1152]	; 0x480
 800f9e4:	f8b3 0090 	ldrh.w	r0, [r3, #144]	; 0x90
 800f9e8:	4001      	ands	r1, r0
 800f9ea:	f8a3 1090 	strh.w	r1, [r3, #144]	; 0x90
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 800f9ee:	f8b2 1482 	ldrh.w	r1, [r2, #1154]	; 0x482
 800f9f2:	f8b3 0092 	ldrh.w	r0, [r3, #146]	; 0x92
 800f9f6:	4001      	ands	r1, r0
 800f9f8:	f8a3 1092 	strh.w	r1, [r3, #146]	; 0x92
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 800f9fc:	f8b2 1484 	ldrh.w	r1, [r2, #1156]	; 0x484
 800fa00:	f8b3 0094 	ldrh.w	r0, [r3, #148]	; 0x94
 800fa04:	4001      	ands	r1, r0
 800fa06:	f8a3 1094 	strh.w	r1, [r3, #148]	; 0x94
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 800fa0a:	f8b2 1486 	ldrh.w	r1, [r2, #1158]	; 0x486
 800fa0e:	f8b3 0096 	ldrh.w	r0, [r3, #150]	; 0x96
 800fa12:	4001      	ands	r1, r0
 800fa14:	f8a3 1096 	strh.w	r1, [r3, #150]	; 0x96
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800fa18:	f8b2 1488 	ldrh.w	r1, [r2, #1160]	; 0x488
 800fa1c:	f8a3 1098 	strh.w	r1, [r3, #152]	; 0x98
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 800fa20:	f8b2 248a 	ldrh.w	r2, [r2, #1162]	; 0x48a
 800fa24:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 800fa28:	e7af      	b.n	800f98a <RegionUS915LinkAdrReq+0x1ee>
 800fa2a:	bf00      	nop
 800fa2c:	20000e40 	.word	0x20000e40
 800fa30:	20000e3c 	.word	0x20000e3c

0800fa34 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800fa34:	b538      	push	{r3, r4, r5, lr}
 800fa36:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 800fa38:	6840      	ldr	r0, [r0, #4]
 800fa3a:	f7ff faed 	bl	800f018 <VerifyRfFreq>
 800fa3e:	b310      	cbz	r0, 800fa86 <RegionUS915RxParamSetupReq+0x52>
    uint8_t status = 0x07;
 800fa40:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 800fa42:	220d      	movs	r2, #13
 800fa44:	2108      	movs	r1, #8
 800fa46:	f994 0000 	ldrsb.w	r0, [r4]
 800fa4a:	f7fe f994 	bl	800dd76 <RegionCommonValueInRange>
 800fa4e:	b908      	cbnz	r0, 800fa54 <RegionUS915RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 800fa50:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 800fa54:	2207      	movs	r2, #7
 800fa56:	2105      	movs	r1, #5
 800fa58:	f994 0000 	ldrsb.w	r0, [r4]
 800fa5c:	f7fe f98b 	bl	800dd76 <RegionCommonValueInRange>
 800fa60:	2801      	cmp	r0, #1
 800fa62:	d003      	beq.n	800fa6c <RegionUS915RxParamSetupReq+0x38>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 800fa64:	f994 3000 	ldrsb.w	r3, [r4]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 800fa68:	2b0d      	cmp	r3, #13
 800fa6a:	dd01      	ble.n	800fa70 <RegionUS915RxParamSetupReq+0x3c>
    {
        status &= 0xFD; // Datarate KO
 800fa6c:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 800fa70:	2203      	movs	r2, #3
 800fa72:	2100      	movs	r1, #0
 800fa74:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800fa78:	f7fe f97d 	bl	800dd76 <RegionCommonValueInRange>
 800fa7c:	b908      	cbnz	r0, 800fa82 <RegionUS915RxParamSetupReq+0x4e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800fa7e:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_US915 */
    return status;
}
 800fa82:	4628      	mov	r0, r5
 800fa84:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800fa86:	2506      	movs	r5, #6
 800fa88:	e7db      	b.n	800fa42 <RegionUS915RxParamSetupReq+0xe>

0800fa8a <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
    // Do not accept the request
    return -1;
}
 800fa8a:	f04f 30ff 	mov.w	r0, #4294967295
 800fa8e:	4770      	bx	lr

0800fa90 <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 800fa90:	f04f 30ff 	mov.w	r0, #4294967295
 800fa94:	4770      	bx	lr

0800fa96 <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
    // Do not accept the request
    return -1;
}
 800fa96:	f04f 30ff 	mov.w	r0, #4294967295
 800fa9a:	4770      	bx	lr

0800fa9c <RegionUS915AlternateDr>:
int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 800fa9c:	b9b1      	cbnz	r1, 800facc <RegionUS915AlternateDr+0x30>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 800fa9e:	4b10      	ldr	r3, [pc, #64]	; (800fae0 <RegionUS915AlternateDr+0x44>)
 800faa0:	681a      	ldr	r2, [r3, #0]
 800faa2:	f892 309d 	ldrb.w	r3, [r2, #157]	; 0x9d
 800faa6:	3301      	adds	r3, #1
 800faa8:	f882 309d 	strb.w	r3, [r2, #157]	; 0x9d
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 800faac:	4b0c      	ldr	r3, [pc, #48]	; (800fae0 <RegionUS915AlternateDr+0x44>)
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
 800fab4:	4b0b      	ldr	r3, [pc, #44]	; (800fae4 <RegionUS915AlternateDr+0x48>)
 800fab6:	fba3 1302 	umull	r1, r3, r3, r2
 800faba:	085b      	lsrs	r3, r3, #1
 800fabc:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800fac0:	1ad3      	subs	r3, r2, r3
 800fac2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800fac6:	d009      	beq.n	800fadc <RegionUS915AlternateDr+0x40>
        // Use DR_4 every 9th times.
        currentDr = DR_4;
    }
    else
    {
        currentDr = DR_0;
 800fac8:	2000      	movs	r0, #0
    }
    return currentDr;
#else
    return -1;
#endif /* REGION_US915 */
}
 800faca:	4770      	bx	lr
        RegionNvmGroup1->JoinTrialsCounter--;
 800facc:	4b04      	ldr	r3, [pc, #16]	; (800fae0 <RegionUS915AlternateDr+0x44>)
 800face:	681a      	ldr	r2, [r3, #0]
 800fad0:	f892 309d 	ldrb.w	r3, [r2, #157]	; 0x9d
 800fad4:	3b01      	subs	r3, #1
 800fad6:	f882 309d 	strb.w	r3, [r2, #157]	; 0x9d
 800fada:	e7e7      	b.n	800faac <RegionUS915AlternateDr+0x10>
        currentDr = DR_4;
 800fadc:	2004      	movs	r0, #4
 800fade:	4770      	bx	lr
 800fae0:	20000e3c 	.word	0x20000e3c
 800fae4:	38e38e39 	.word	0x38e38e39

0800fae8 <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800fae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800faec:	b0a4      	sub	sp, #144	; 0x90
 800faee:	4604      	mov	r4, r0
 800faf0:	460e      	mov	r6, r1
 800faf2:	4690      	mov	r8, r2
 800faf4:	461f      	mov	r7, r3
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 800faf6:	2500      	movs	r5, #0
 800faf8:	f88d 508f 	strb.w	r5, [sp, #143]	; 0x8f
    uint8_t nbRestrictedChannels = 0;
 800fafc:	f88d 508e 	strb.w	r5, [sp, #142]	; 0x8e
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 800fb00:	9511      	str	r5, [sp, #68]	; 0x44
 800fb02:	2244      	movs	r2, #68	; 0x44
 800fb04:	4629      	mov	r1, r5
 800fb06:	a812      	add	r0, sp, #72	; 0x48
 800fb08:	f003 fc96 	bl	8013438 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 800fb0c:	4b4e      	ldr	r3, [pc, #312]	; (800fc48 <RegionUS915NextChannel+0x160>)
 800fb0e:	6818      	ldr	r0, [r3, #0]
 800fb10:	2204      	movs	r2, #4
 800fb12:	4629      	mov	r1, r5
 800fb14:	3090      	adds	r0, #144	; 0x90
 800fb16:	f7fe f989 	bl	800de2c <RegionCommonCountChannels>
 800fb1a:	2800      	cmp	r0, #0
 800fb1c:	d054      	beq.n	800fbc8 <RegionUS915NextChannel+0xe0>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 800fb1e:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800fb22:	2b03      	cmp	r3, #3
 800fb24:	dd0a      	ble.n	800fb3c <RegionUS915NextChannel+0x54>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 800fb26:	4b48      	ldr	r3, [pc, #288]	; (800fc48 <RegionUS915NextChannel+0x160>)
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 800fb2e:	b92a      	cbnz	r2, 800fb3c <RegionUS915NextChannel+0x54>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800fb30:	4a46      	ldr	r2, [pc, #280]	; (800fc4c <RegionUS915NextChannel+0x164>)
 800fb32:	6812      	ldr	r2, [r2, #0]
 800fb34:	f8b2 2488 	ldrh.w	r2, [r2, #1160]	; 0x488
 800fb38:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800fb3c:	7a63      	ldrb	r3, [r4, #9]
 800fb3e:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800fb42:	7a23      	ldrb	r3, [r4, #8]
 800fb44:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 800fb48:	4b3f      	ldr	r3, [pc, #252]	; (800fc48 <RegionUS915NextChannel+0x160>)
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	f103 0290 	add.w	r2, r3, #144	; 0x90
 800fb50:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800fb52:	4a3e      	ldr	r2, [pc, #248]	; (800fc4c <RegionUS915NextChannel+0x164>)
 800fb54:	6812      	ldr	r2, [r2, #0]
 800fb56:	9205      	str	r2, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 800fb58:	9306      	str	r3, [sp, #24]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 800fb5a:	2348      	movs	r3, #72	; 0x48
 800fb5c:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = NULL;
 800fb60:	2300      	movs	r3, #0
 800fb62:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800fb64:	6823      	ldr	r3, [r4, #0]
 800fb66:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800fb68:	6863      	ldr	r3, [r4, #4]
 800fb6a:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800fb6c:	7aa3      	ldrb	r3, [r4, #10]
 800fb6e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 800fb72:	2301      	movs	r3, #1
 800fb74:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800fb78:	ab0c      	add	r3, sp, #48	; 0x30
 800fb7a:	f104 020c 	add.w	r2, r4, #12
 800fb7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fb82:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800fb86:	7d23      	ldrb	r3, [r4, #20]
 800fb88:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800fb8c:	8ae1      	ldrh	r1, [r4, #22]
 800fb8e:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800fb92:	f7ff fa71 	bl	800f078 <GetTimeOnAir>
 800fb96:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800fb98:	ab03      	add	r3, sp, #12
 800fb9a:	9310      	str	r3, [sp, #64]	; 0x40
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800fb9c:	f8cd 8004 	str.w	r8, [sp, #4]
 800fba0:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 800fba4:	9300      	str	r3, [sp, #0]
 800fba6:	f10d 038f 	add.w	r3, sp, #143	; 0x8f
 800fbaa:	aa11      	add	r2, sp, #68	; 0x44
 800fbac:	4639      	mov	r1, r7
 800fbae:	a809      	add	r0, sp, #36	; 0x24
 800fbb0:	f7fe fb3e 	bl	800e230 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800fbb4:	4605      	mov	r5, r0
 800fbb6:	2800      	cmp	r0, #0
 800fbb8:	d141      	bne.n	800fc3e <RegionUS915NextChannel+0x156>
    {
        if( nextChanParams->Joined == true )
 800fbba:	7a63      	ldrb	r3, [r4, #9]
 800fbbc:	b99b      	cbnz	r3, 800fbe6 <RegionUS915NextChannel+0xfe>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 800fbbe:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800fbc2:	b1eb      	cbz	r3, 800fc00 <RegionUS915NextChannel+0x118>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 800fbc4:	4603      	mov	r3, r0
 800fbc6:	e029      	b.n	800fc1c <RegionUS915NextChannel+0x134>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 800fbc8:	4d1f      	ldr	r5, [pc, #124]	; (800fc48 <RegionUS915NextChannel+0x160>)
 800fbca:	6828      	ldr	r0, [r5, #0]
 800fbcc:	4b1f      	ldr	r3, [pc, #124]	; (800fc4c <RegionUS915NextChannel+0x164>)
 800fbce:	6819      	ldr	r1, [r3, #0]
 800fbd0:	2204      	movs	r2, #4
 800fbd2:	f501 6190 	add.w	r1, r1, #1152	; 0x480
 800fbd6:	3090      	adds	r0, #144	; 0x90
 800fbd8:	f7fe f93e 	bl	800de58 <RegionCommonChanMaskCopy>
        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800fbdc:	682b      	ldr	r3, [r5, #0]
 800fbde:	2200      	movs	r2, #0
 800fbe0:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 800fbe4:	e79b      	b.n	800fb1e <RegionUS915NextChannel+0x36>
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800fbe6:	f89d 108f 	ldrb.w	r1, [sp, #143]	; 0x8f
 800fbea:	3901      	subs	r1, #1
 800fbec:	f000 ff72 	bl	8010ad4 <randr>
 800fbf0:	f100 0390 	add.w	r3, r0, #144	; 0x90
 800fbf4:	eb0d 0003 	add.w	r0, sp, r3
 800fbf8:	f810 3c4c 	ldrb.w	r3, [r0, #-76]
 800fbfc:	7033      	strb	r3, [r6, #0]
 800fbfe:	e017      	b.n	800fc30 <RegionUS915NextChannel+0x148>
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 800fc00:	4b11      	ldr	r3, [pc, #68]	; (800fc48 <RegionUS915NextChannel+0x160>)
 800fc02:	6818      	ldr	r0, [r3, #0]
 800fc04:	4632      	mov	r2, r6
 800fc06:	f100 019c 	add.w	r1, r0, #156	; 0x9c
 800fc0a:	3090      	adds	r0, #144	; 0x90
 800fc0c:	f7fd ff96 	bl	800db3c <RegionBaseUSComputeNext125kHzJoinChannel>
 800fc10:	2803      	cmp	r0, #3
 800fc12:	d10d      	bne.n	800fc30 <RegionUS915NextChannel+0x148>
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 800fc14:	4605      	mov	r5, r0
 800fc16:	e012      	b.n	800fc3e <RegionUS915NextChannel+0x156>
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
                {
                    i++;
 800fc18:	3301      	adds	r3, #1
 800fc1a:	b2db      	uxtb	r3, r3
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 800fc1c:	4a0a      	ldr	r2, [pc, #40]	; (800fc48 <RegionUS915NextChannel+0x160>)
 800fc1e:	6812      	ldr	r2, [r2, #0]
 800fc20:	f892 0098 	ldrb.w	r0, [r2, #152]	; 0x98
 800fc24:	4118      	asrs	r0, r3
 800fc26:	f010 0f01 	tst.w	r0, #1
 800fc2a:	d0f5      	beq.n	800fc18 <RegionUS915NextChannel+0x130>
                }
                *channel = 64 + i;
 800fc2c:	3340      	adds	r3, #64	; 0x40
 800fc2e:	7033      	strb	r3, [r6, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 800fc30:	4b05      	ldr	r3, [pc, #20]	; (800fc48 <RegionUS915NextChannel+0x160>)
 800fc32:	6818      	ldr	r0, [r3, #0]
 800fc34:	2248      	movs	r2, #72	; 0x48
 800fc36:	7831      	ldrb	r1, [r6, #0]
 800fc38:	3090      	adds	r0, #144	; 0x90
 800fc3a:	f7fe f8de 	bl	800ddfa <RegionCommonChanDisable>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 800fc3e:	4628      	mov	r0, r5
 800fc40:	b024      	add	sp, #144	; 0x90
 800fc42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc46:	bf00      	nop
 800fc48:	20000e3c 	.word	0x20000e3c
 800fc4c:	20000e40 	.word	0x20000e40

0800fc50 <RegionUS915SetContinuousWave>:
    return LORAMAC_STATUS_PARAMETER_INVALID;
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionUS915SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 800fc50:	b538      	push	{r3, r4, r5, lr}
 800fc52:	4604      	mov	r4, r0
#if defined( REGION_US915 )
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, RegionNvmGroup2->ChannelsMask );
 800fc54:	4b14      	ldr	r3, [pc, #80]	; (800fca8 <RegionUS915SetContinuousWave+0x58>)
 800fc56:	6819      	ldr	r1, [r3, #0]
 800fc58:	4d14      	ldr	r5, [pc, #80]	; (800fcac <RegionUS915SetContinuousWave+0x5c>)
 800fc5a:	682b      	ldr	r3, [r5, #0]
 800fc5c:	7802      	ldrb	r2, [r0, #0]
 800fc5e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800fc62:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800fc66:	7a52      	ldrb	r2, [r2, #9]
 800fc68:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800fc6c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800fc70:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800fc74:	f990 2001 	ldrsb.w	r2, [r0, #1]
 800fc78:	f991 1002 	ldrsb.w	r1, [r1, #2]
 800fc7c:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800fc80:	f7ff fa18 	bl	800f0b4 <LimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 800fc84:	682a      	ldr	r2, [r5, #0]
 800fc86:	7823      	ldrb	r3, [r4, #0]
 800fc88:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800fc8c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 800fc90:	2200      	movs	r2, #0
 800fc92:	4907      	ldr	r1, [pc, #28]	; (800fcb0 <RegionUS915SetContinuousWave+0x60>)
 800fc94:	f7fe fa50 	bl	800e138 <RegionCommonComputeTxPower>
 800fc98:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800fc9a:	4b06      	ldr	r3, [pc, #24]	; (800fcb4 <RegionUS915SetContinuousWave+0x64>)
 800fc9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc9e:	89a2      	ldrh	r2, [r4, #12]
 800fca0:	4628      	mov	r0, r5
 800fca2:	4798      	blx	r3
#endif /* REGION_US915 */
}
 800fca4:	bd38      	pop	{r3, r4, r5, pc}
 800fca6:	bf00      	nop
 800fca8:	20000e3c 	.word	0x20000e3c
 800fcac:	20000e40 	.word	0x20000e40
 800fcb0:	41f00000 	.word	0x41f00000
 800fcb4:	08014cbc 	.word	0x08014cbc

0800fcb8 <RegionUS915ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 800fcb8:	4b04      	ldr	r3, [pc, #16]	; (800fccc <RegionUS915ApplyDrOffset+0x14>)
 800fcba:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800fcbe:	5698      	ldrsb	r0, [r3, r2]

    if( datarate < 0 )
 800fcc0:	2800      	cmp	r0, #0
 800fcc2:	db01      	blt.n	800fcc8 <RegionUS915ApplyDrOffset+0x10>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_US915 */
}
 800fcc4:	b2c0      	uxtb	r0, r0
 800fcc6:	4770      	bx	lr
        datarate = DR_0;
 800fcc8:	2000      	movs	r0, #0
 800fcca:	e7fb      	b.n	800fcc4 <RegionUS915ApplyDrOffset+0xc>
 800fccc:	08014714 	.word	0x08014714

0800fcd0 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800fcd0:	b510      	push	{r4, lr}
 800fcd2:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 800fcd4:	2210      	movs	r2, #16
 800fcd6:	2100      	movs	r1, #0
 800fcd8:	30f1      	adds	r0, #241	; 0xf1
 800fcda:	f000 ff20 	bl	8010b1e <memset1>
    ctx->M_n = 0;
 800fcde:	2100      	movs	r1, #0
 800fce0:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800fce4:	22f0      	movs	r2, #240	; 0xf0
 800fce6:	4620      	mov	r0, r4
 800fce8:	f000 ff19 	bl	8010b1e <memset1>
}
 800fcec:	bd10      	pop	{r4, pc}

0800fcee <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800fcee:	b508      	push	{r3, lr}
 800fcf0:	4602      	mov	r2, r0
 800fcf2:	4608      	mov	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800fcf4:	2110      	movs	r1, #16
 800fcf6:	f000 fb3b 	bl	8010370 <lorawan_aes_set_key>
}
 800fcfa:	bd08      	pop	{r3, pc}

0800fcfc <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800fcfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd00:	b084      	sub	sp, #16
 800fd02:	4604      	mov	r4, r0
 800fd04:	460d      	mov	r5, r1
 800fd06:	4616      	mov	r6, r2
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800fd08:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d054      	beq.n	800fdba <AES_CMAC_Update+0xbe>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800fd10:	f1c3 0810 	rsb	r8, r3, #16
 800fd14:	4647      	mov	r7, r8
 800fd16:	4590      	cmp	r8, r2
 800fd18:	bf28      	it	cs
 800fd1a:	4617      	movcs	r7, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800fd1c:	f200 1001 	addw	r0, r0, #257	; 0x101
 800fd20:	b2ba      	uxth	r2, r7
 800fd22:	4418      	add	r0, r3
 800fd24:	f000 fee3 	bl	8010aee <memcpy1>
        ctx->M_n += mlen;
 800fd28:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800fd2c:	443b      	add	r3, r7
 800fd2e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800fd32:	2b0f      	cmp	r3, #15
 800fd34:	d94d      	bls.n	800fdd2 <AES_CMAC_Update+0xd6>
 800fd36:	45b0      	cmp	r8, r6
 800fd38:	d24b      	bcs.n	800fdd2 <AES_CMAC_Update+0xd6>
            return;
        XOR( ctx->M_last, ctx->X );
 800fd3a:	2300      	movs	r3, #0
 800fd3c:	e008      	b.n	800fd50 <AES_CMAC_Update+0x54>
 800fd3e:	18e2      	adds	r2, r4, r3
 800fd40:	f892 10f1 	ldrb.w	r1, [r2, #241]	; 0xf1
 800fd44:	f892 0101 	ldrb.w	r0, [r2, #257]	; 0x101
 800fd48:	4041      	eors	r1, r0
 800fd4a:	f882 10f1 	strb.w	r1, [r2, #241]	; 0xf1
 800fd4e:	3301      	adds	r3, #1
 800fd50:	2b0f      	cmp	r3, #15
 800fd52:	ddf4      	ble.n	800fd3e <AES_CMAC_Update+0x42>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800fd54:	f104 08f1 	add.w	r8, r4, #241	; 0xf1
 800fd58:	2210      	movs	r2, #16
 800fd5a:	4641      	mov	r1, r8
 800fd5c:	4668      	mov	r0, sp
 800fd5e:	f000 fec6 	bl	8010aee <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800fd62:	4622      	mov	r2, r4
 800fd64:	4669      	mov	r1, sp
 800fd66:	4668      	mov	r0, sp
 800fd68:	f000 fb84 	bl	8010474 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800fd6c:	2210      	movs	r2, #16
 800fd6e:	4669      	mov	r1, sp
 800fd70:	4640      	mov	r0, r8
 800fd72:	f000 febc 	bl	8010aee <memcpy1>

        data += mlen;
 800fd76:	443d      	add	r5, r7
        len -= mlen;
 800fd78:	1bf6      	subs	r6, r6, r7
 800fd7a:	e01e      	b.n	800fdba <AES_CMAC_Update+0xbe>
    }
    while( len > 16 )
    { /* not last block */

        XOR( data, ctx->X );
 800fd7c:	eb04 0e03 	add.w	lr, r4, r3
 800fd80:	f89e c0f1 	ldrb.w	ip, [lr, #241]	; 0xf1
 800fd84:	5cea      	ldrb	r2, [r5, r3]
 800fd86:	ea8c 0c02 	eor.w	ip, ip, r2
 800fd8a:	f88e c0f1 	strb.w	ip, [lr, #241]	; 0xf1
 800fd8e:	3301      	adds	r3, #1
 800fd90:	2b0f      	cmp	r3, #15
 800fd92:	ddf3      	ble.n	800fd7c <AES_CMAC_Update+0x80>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800fd94:	f104 07f1 	add.w	r7, r4, #241	; 0xf1
 800fd98:	2210      	movs	r2, #16
 800fd9a:	4639      	mov	r1, r7
 800fd9c:	4668      	mov	r0, sp
 800fd9e:	f000 fea6 	bl	8010aee <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800fda2:	4622      	mov	r2, r4
 800fda4:	4669      	mov	r1, sp
 800fda6:	4668      	mov	r0, sp
 800fda8:	f000 fb64 	bl	8010474 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800fdac:	2210      	movs	r2, #16
 800fdae:	4669      	mov	r1, sp
 800fdb0:	4638      	mov	r0, r7
 800fdb2:	f000 fe9c 	bl	8010aee <memcpy1>

        data += 16;
 800fdb6:	3510      	adds	r5, #16
        len -= 16;
 800fdb8:	3e10      	subs	r6, #16
    while( len > 16 )
 800fdba:	2e10      	cmp	r6, #16
 800fdbc:	d901      	bls.n	800fdc2 <AES_CMAC_Update+0xc6>
        XOR( data, ctx->X );
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	e7e6      	b.n	800fd90 <AES_CMAC_Update+0x94>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800fdc2:	b2b2      	uxth	r2, r6
 800fdc4:	4629      	mov	r1, r5
 800fdc6:	f204 1001 	addw	r0, r4, #257	; 0x101
 800fdca:	f000 fe90 	bl	8010aee <memcpy1>
    ctx->M_n = len;
 800fdce:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
}
 800fdd2:	b004      	add	sp, #16
 800fdd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fdd8 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800fdd8:	b530      	push	{r4, r5, lr}
 800fdda:	b089      	sub	sp, #36	; 0x24
 800fddc:	4605      	mov	r5, r0
 800fdde:	460c      	mov	r4, r1
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800fde0:	2210      	movs	r2, #16
 800fde2:	2100      	movs	r1, #0
 800fde4:	eb0d 0002 	add.w	r0, sp, r2
 800fde8:	f000 fe99 	bl	8010b1e <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800fdec:	4622      	mov	r2, r4
 800fdee:	a904      	add	r1, sp, #16
 800fdf0:	4608      	mov	r0, r1
 800fdf2:	f000 fb3f 	bl	8010474 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800fdf6:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	db01      	blt.n	800fe02 <AES_CMAC_Final+0x2a>
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 800fdfe:	2300      	movs	r3, #0
 800fe00:	e030      	b.n	800fe64 <AES_CMAC_Final+0x8c>
        LSHIFT( K, K );
 800fe02:	2300      	movs	r3, #0
 800fe04:	2b0e      	cmp	r3, #14
 800fe06:	dc11      	bgt.n	800fe2c <AES_CMAC_Final+0x54>
 800fe08:	f103 0220 	add.w	r2, r3, #32
 800fe0c:	eb0d 0102 	add.w	r1, sp, r2
 800fe10:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 800fe14:	3301      	adds	r3, #1
 800fe16:	f103 0220 	add.w	r2, r3, #32
 800fe1a:	446a      	add	r2, sp
 800fe1c:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800fe20:	09d2      	lsrs	r2, r2, #7
 800fe22:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 800fe26:	f801 2c10 	strb.w	r2, [r1, #-16]
 800fe2a:	e7eb      	b.n	800fe04 <AES_CMAC_Final+0x2c>
 800fe2c:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800fe30:	005b      	lsls	r3, r3, #1
 800fe32:	b2db      	uxtb	r3, r3
 800fe34:	f88d 301f 	strb.w	r3, [sp, #31]
        K[15] ^= 0x87;
 800fe38:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 800fe3c:	f88d 301f 	strb.w	r3, [sp, #31]
 800fe40:	e017      	b.n	800fe72 <AES_CMAC_Final+0x9a>
        LSHIFT( K, K );
 800fe42:	f103 0220 	add.w	r2, r3, #32
 800fe46:	eb0d 0102 	add.w	r1, sp, r2
 800fe4a:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 800fe4e:	3301      	adds	r3, #1
 800fe50:	f103 0220 	add.w	r2, r3, #32
 800fe54:	446a      	add	r2, sp
 800fe56:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800fe5a:	09d2      	lsrs	r2, r2, #7
 800fe5c:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 800fe60:	f801 2c10 	strb.w	r2, [r1, #-16]
 800fe64:	2b0e      	cmp	r3, #14
 800fe66:	ddec      	ble.n	800fe42 <AES_CMAC_Final+0x6a>
 800fe68:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800fe6c:	005b      	lsls	r3, r3, #1
 800fe6e:	f88d 301f 	strb.w	r3, [sp, #31]

    if( ctx->M_n == 16 )
 800fe72:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 800fe76:	2810      	cmp	r0, #16
 800fe78:	d014      	beq.n	800fea4 <AES_CMAC_Final+0xcc>
        XOR( K, ctx->M_last );
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800fe7a:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	db30      	blt.n	800fee4 <AES_CMAC_Final+0x10c>
        {
            LSHIFT( K, K );
            K[15] ^= 0x87;
        }
        else
            LSHIFT( K, K );
 800fe82:	2300      	movs	r3, #0
 800fe84:	e041      	b.n	800ff0a <AES_CMAC_Final+0x132>
        XOR( K, ctx->M_last );
 800fe86:	18e1      	adds	r1, r4, r3
 800fe88:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 800fe8c:	f103 0020 	add.w	r0, r3, #32
 800fe90:	4468      	add	r0, sp
 800fe92:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 800fe96:	4042      	eors	r2, r0
 800fe98:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 800fe9c:	3301      	adds	r3, #1
 800fe9e:	2b0f      	cmp	r3, #15
 800fea0:	ddf1      	ble.n	800fe86 <AES_CMAC_Final+0xae>
 800fea2:	e059      	b.n	800ff58 <AES_CMAC_Final+0x180>
 800fea4:	2300      	movs	r3, #0
 800fea6:	e7fa      	b.n	800fe9e <AES_CMAC_Final+0xc6>
            LSHIFT( K, K );
 800fea8:	f103 0220 	add.w	r2, r3, #32
 800feac:	eb0d 0102 	add.w	r1, sp, r2
 800feb0:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 800feb4:	3301      	adds	r3, #1
 800feb6:	f103 0220 	add.w	r2, r3, #32
 800feba:	446a      	add	r2, sp
 800febc:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800fec0:	09d2      	lsrs	r2, r2, #7
 800fec2:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 800fec6:	f801 2c10 	strb.w	r2, [r1, #-16]
 800feca:	2b0e      	cmp	r3, #14
 800fecc:	ddec      	ble.n	800fea8 <AES_CMAC_Final+0xd0>
 800fece:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800fed2:	005b      	lsls	r3, r3, #1
 800fed4:	b2db      	uxtb	r3, r3
 800fed6:	f88d 301f 	strb.w	r3, [sp, #31]
            K[15] ^= 0x87;
 800feda:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 800fede:	f88d 301f 	strb.w	r3, [sp, #31]
 800fee2:	e019      	b.n	800ff18 <AES_CMAC_Final+0x140>
            LSHIFT( K, K );
 800fee4:	2300      	movs	r3, #0
 800fee6:	e7f0      	b.n	800feca <AES_CMAC_Final+0xf2>
            LSHIFT( K, K );
 800fee8:	f103 0220 	add.w	r2, r3, #32
 800feec:	eb0d 0102 	add.w	r1, sp, r2
 800fef0:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 800fef4:	3301      	adds	r3, #1
 800fef6:	f103 0220 	add.w	r2, r3, #32
 800fefa:	446a      	add	r2, sp
 800fefc:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800ff00:	09d2      	lsrs	r2, r2, #7
 800ff02:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 800ff06:	f801 2c10 	strb.w	r2, [r1, #-16]
 800ff0a:	2b0e      	cmp	r3, #14
 800ff0c:	ddec      	ble.n	800fee8 <AES_CMAC_Final+0x110>
 800ff0e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800ff12:	005b      	lsls	r3, r3, #1
 800ff14:	f88d 301f 	strb.w	r3, [sp, #31]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800ff18:	4420      	add	r0, r4
 800ff1a:	2380      	movs	r3, #128	; 0x80
 800ff1c:	f880 3101 	strb.w	r3, [r0, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800ff20:	e003      	b.n	800ff2a <AES_CMAC_Final+0x152>
            ctx->M_last[ctx->M_n] = 0;
 800ff22:	4423      	add	r3, r4
 800ff24:	2200      	movs	r2, #0
 800ff26:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800ff2a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800ff2e:	3301      	adds	r3, #1
 800ff30:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 800ff34:	2b0f      	cmp	r3, #15
 800ff36:	d9f4      	bls.n	800ff22 <AES_CMAC_Final+0x14a>

        XOR( K, ctx->M_last );
 800ff38:	2300      	movs	r3, #0
 800ff3a:	e00b      	b.n	800ff54 <AES_CMAC_Final+0x17c>
 800ff3c:	18e1      	adds	r1, r4, r3
 800ff3e:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 800ff42:	f103 0020 	add.w	r0, r3, #32
 800ff46:	4468      	add	r0, sp
 800ff48:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 800ff4c:	4042      	eors	r2, r0
 800ff4e:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 800ff52:	3301      	adds	r3, #1
 800ff54:	2b0f      	cmp	r3, #15
 800ff56:	ddf1      	ble.n	800ff3c <AES_CMAC_Final+0x164>
 800ff58:	2300      	movs	r3, #0
 800ff5a:	e009      	b.n	800ff70 <AES_CMAC_Final+0x198>
    }
    XOR( ctx->M_last, ctx->X );
 800ff5c:	18e2      	adds	r2, r4, r3
 800ff5e:	f892 c0f1 	ldrb.w	ip, [r2, #241]	; 0xf1
 800ff62:	f892 1101 	ldrb.w	r1, [r2, #257]	; 0x101
 800ff66:	ea8c 0c01 	eor.w	ip, ip, r1
 800ff6a:	f882 c0f1 	strb.w	ip, [r2, #241]	; 0xf1
 800ff6e:	3301      	adds	r3, #1
 800ff70:	2b0f      	cmp	r3, #15
 800ff72:	ddf3      	ble.n	800ff5c <AES_CMAC_Final+0x184>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800ff74:	2210      	movs	r2, #16
 800ff76:	f104 01f1 	add.w	r1, r4, #241	; 0xf1
 800ff7a:	4668      	mov	r0, sp
 800ff7c:	f000 fdb7 	bl	8010aee <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800ff80:	4622      	mov	r2, r4
 800ff82:	4629      	mov	r1, r5
 800ff84:	4668      	mov	r0, sp
 800ff86:	f000 fa75 	bl	8010474 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800ff8a:	2210      	movs	r2, #16
 800ff8c:	2100      	movs	r1, #0
 800ff8e:	eb0d 0002 	add.w	r0, sp, r2
 800ff92:	f000 fdc4 	bl	8010b1e <memset1>
}
 800ff96:	b009      	add	sp, #36	; 0x24
 800ff98:	bd30      	pop	{r4, r5, pc}

0800ff9a <copy_block>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800ff9a:	780b      	ldrb	r3, [r1, #0]
 800ff9c:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800ff9e:	784b      	ldrb	r3, [r1, #1]
 800ffa0:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800ffa2:	788b      	ldrb	r3, [r1, #2]
 800ffa4:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800ffa6:	78cb      	ldrb	r3, [r1, #3]
 800ffa8:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800ffaa:	790b      	ldrb	r3, [r1, #4]
 800ffac:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800ffae:	794b      	ldrb	r3, [r1, #5]
 800ffb0:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800ffb2:	798b      	ldrb	r3, [r1, #6]
 800ffb4:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800ffb6:	79cb      	ldrb	r3, [r1, #7]
 800ffb8:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800ffba:	7a0b      	ldrb	r3, [r1, #8]
 800ffbc:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800ffbe:	7a4b      	ldrb	r3, [r1, #9]
 800ffc0:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800ffc2:	7a8b      	ldrb	r3, [r1, #10]
 800ffc4:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800ffc6:	7acb      	ldrb	r3, [r1, #11]
 800ffc8:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800ffca:	7b0b      	ldrb	r3, [r1, #12]
 800ffcc:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800ffce:	7b4b      	ldrb	r3, [r1, #13]
 800ffd0:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800ffd2:	7b8b      	ldrb	r3, [r1, #14]
 800ffd4:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800ffd6:	7bcb      	ldrb	r3, [r1, #15]
 800ffd8:	73c3      	strb	r3, [r0, #15]
#endif
}
 800ffda:	4770      	bx	lr

0800ffdc <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
    while( nn-- )
 800ffdc:	e004      	b.n	800ffe8 <copy_block_nn+0xc>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800ffde:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ffe2:	f800 2b01 	strb.w	r2, [r0], #1
    while( nn-- )
 800ffe6:	461a      	mov	r2, r3
 800ffe8:	1e53      	subs	r3, r2, #1
 800ffea:	b2db      	uxtb	r3, r3
 800ffec:	2a00      	cmp	r2, #0
 800ffee:	d1f6      	bne.n	800ffde <copy_block_nn+0x2>
}
 800fff0:	4770      	bx	lr

0800fff2 <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800fff2:	780b      	ldrb	r3, [r1, #0]
 800fff4:	7802      	ldrb	r2, [r0, #0]
 800fff6:	4053      	eors	r3, r2
 800fff8:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800fffa:	784b      	ldrb	r3, [r1, #1]
 800fffc:	7842      	ldrb	r2, [r0, #1]
 800fffe:	4053      	eors	r3, r2
 8010000:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 8010002:	788b      	ldrb	r3, [r1, #2]
 8010004:	7882      	ldrb	r2, [r0, #2]
 8010006:	4053      	eors	r3, r2
 8010008:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 801000a:	78cb      	ldrb	r3, [r1, #3]
 801000c:	78c2      	ldrb	r2, [r0, #3]
 801000e:	4053      	eors	r3, r2
 8010010:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 8010012:	790b      	ldrb	r3, [r1, #4]
 8010014:	7902      	ldrb	r2, [r0, #4]
 8010016:	4053      	eors	r3, r2
 8010018:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 801001a:	794b      	ldrb	r3, [r1, #5]
 801001c:	7942      	ldrb	r2, [r0, #5]
 801001e:	4053      	eors	r3, r2
 8010020:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 8010022:	798b      	ldrb	r3, [r1, #6]
 8010024:	7982      	ldrb	r2, [r0, #6]
 8010026:	4053      	eors	r3, r2
 8010028:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 801002a:	79cb      	ldrb	r3, [r1, #7]
 801002c:	79c2      	ldrb	r2, [r0, #7]
 801002e:	4053      	eors	r3, r2
 8010030:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 8010032:	7a0b      	ldrb	r3, [r1, #8]
 8010034:	7a02      	ldrb	r2, [r0, #8]
 8010036:	4053      	eors	r3, r2
 8010038:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 801003a:	7a4b      	ldrb	r3, [r1, #9]
 801003c:	7a42      	ldrb	r2, [r0, #9]
 801003e:	4053      	eors	r3, r2
 8010040:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 8010042:	7a8b      	ldrb	r3, [r1, #10]
 8010044:	7a82      	ldrb	r2, [r0, #10]
 8010046:	4053      	eors	r3, r2
 8010048:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 801004a:	7acb      	ldrb	r3, [r1, #11]
 801004c:	7ac2      	ldrb	r2, [r0, #11]
 801004e:	4053      	eors	r3, r2
 8010050:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 8010052:	7b0b      	ldrb	r3, [r1, #12]
 8010054:	7b02      	ldrb	r2, [r0, #12]
 8010056:	4053      	eors	r3, r2
 8010058:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 801005a:	7b4b      	ldrb	r3, [r1, #13]
 801005c:	7b42      	ldrb	r2, [r0, #13]
 801005e:	4053      	eors	r3, r2
 8010060:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 8010062:	7b8b      	ldrb	r3, [r1, #14]
 8010064:	7b82      	ldrb	r2, [r0, #14]
 8010066:	4053      	eors	r3, r2
 8010068:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 801006a:	7bcb      	ldrb	r3, [r1, #15]
 801006c:	7bc2      	ldrb	r2, [r0, #15]
 801006e:	4053      	eors	r3, r2
 8010070:	73c3      	strb	r3, [r0, #15]
#endif
}
 8010072:	4770      	bx	lr

08010074 <copy_and_key>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 8010074:	780b      	ldrb	r3, [r1, #0]
 8010076:	f892 c000 	ldrb.w	ip, [r2]
 801007a:	ea83 030c 	eor.w	r3, r3, ip
 801007e:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 8010080:	784b      	ldrb	r3, [r1, #1]
 8010082:	f892 c001 	ldrb.w	ip, [r2, #1]
 8010086:	ea83 030c 	eor.w	r3, r3, ip
 801008a:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 801008c:	788b      	ldrb	r3, [r1, #2]
 801008e:	f892 c002 	ldrb.w	ip, [r2, #2]
 8010092:	ea83 030c 	eor.w	r3, r3, ip
 8010096:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 8010098:	78cb      	ldrb	r3, [r1, #3]
 801009a:	f892 c003 	ldrb.w	ip, [r2, #3]
 801009e:	ea83 030c 	eor.w	r3, r3, ip
 80100a2:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 80100a4:	790b      	ldrb	r3, [r1, #4]
 80100a6:	f892 c004 	ldrb.w	ip, [r2, #4]
 80100aa:	ea83 030c 	eor.w	r3, r3, ip
 80100ae:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 80100b0:	794b      	ldrb	r3, [r1, #5]
 80100b2:	f892 c005 	ldrb.w	ip, [r2, #5]
 80100b6:	ea83 030c 	eor.w	r3, r3, ip
 80100ba:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 80100bc:	798b      	ldrb	r3, [r1, #6]
 80100be:	f892 c006 	ldrb.w	ip, [r2, #6]
 80100c2:	ea83 030c 	eor.w	r3, r3, ip
 80100c6:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 80100c8:	79cb      	ldrb	r3, [r1, #7]
 80100ca:	f892 c007 	ldrb.w	ip, [r2, #7]
 80100ce:	ea83 030c 	eor.w	r3, r3, ip
 80100d2:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 80100d4:	7a0b      	ldrb	r3, [r1, #8]
 80100d6:	f892 c008 	ldrb.w	ip, [r2, #8]
 80100da:	ea83 030c 	eor.w	r3, r3, ip
 80100de:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 80100e0:	7a4b      	ldrb	r3, [r1, #9]
 80100e2:	f892 c009 	ldrb.w	ip, [r2, #9]
 80100e6:	ea83 030c 	eor.w	r3, r3, ip
 80100ea:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 80100ec:	7a8b      	ldrb	r3, [r1, #10]
 80100ee:	f892 c00a 	ldrb.w	ip, [r2, #10]
 80100f2:	ea83 030c 	eor.w	r3, r3, ip
 80100f6:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 80100f8:	7acb      	ldrb	r3, [r1, #11]
 80100fa:	f892 c00b 	ldrb.w	ip, [r2, #11]
 80100fe:	ea83 030c 	eor.w	r3, r3, ip
 8010102:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 8010104:	7b0b      	ldrb	r3, [r1, #12]
 8010106:	f892 c00c 	ldrb.w	ip, [r2, #12]
 801010a:	ea83 030c 	eor.w	r3, r3, ip
 801010e:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 8010110:	7b4b      	ldrb	r3, [r1, #13]
 8010112:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8010116:	ea83 030c 	eor.w	r3, r3, ip
 801011a:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 801011c:	7b8b      	ldrb	r3, [r1, #14]
 801011e:	f892 c00e 	ldrb.w	ip, [r2, #14]
 8010122:	ea83 030c 	eor.w	r3, r3, ip
 8010126:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 8010128:	7bcb      	ldrb	r3, [r1, #15]
 801012a:	7bd2      	ldrb	r2, [r2, #15]
 801012c:	4053      	eors	r3, r2
 801012e:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 8010130:	4770      	bx	lr

08010132 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 8010132:	b508      	push	{r3, lr}
    xor_block(d, k);
 8010134:	f7ff ff5d 	bl	800fff2 <xor_block>
}
 8010138:	bd08      	pop	{r3, pc}
	...

0801013c <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 801013c:	7802      	ldrb	r2, [r0, #0]
 801013e:	4b18      	ldr	r3, [pc, #96]	; (80101a0 <shift_sub_rows+0x64>)
 8010140:	5c9a      	ldrb	r2, [r3, r2]
 8010142:	7002      	strb	r2, [r0, #0]
 8010144:	7902      	ldrb	r2, [r0, #4]
 8010146:	5c9a      	ldrb	r2, [r3, r2]
 8010148:	7102      	strb	r2, [r0, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 801014a:	7a02      	ldrb	r2, [r0, #8]
 801014c:	5c9a      	ldrb	r2, [r3, r2]
 801014e:	7202      	strb	r2, [r0, #8]
 8010150:	7b02      	ldrb	r2, [r0, #12]
 8010152:	5c9a      	ldrb	r2, [r3, r2]
 8010154:	7302      	strb	r2, [r0, #12]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8010156:	7842      	ldrb	r2, [r0, #1]
 8010158:	7941      	ldrb	r1, [r0, #5]
 801015a:	5c59      	ldrb	r1, [r3, r1]
 801015c:	7041      	strb	r1, [r0, #1]
 801015e:	7a41      	ldrb	r1, [r0, #9]
 8010160:	5c59      	ldrb	r1, [r3, r1]
 8010162:	7141      	strb	r1, [r0, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 8010164:	7b41      	ldrb	r1, [r0, #13]
 8010166:	5c59      	ldrb	r1, [r3, r1]
 8010168:	7241      	strb	r1, [r0, #9]
 801016a:	5c9a      	ldrb	r2, [r3, r2]
 801016c:	7342      	strb	r2, [r0, #13]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 801016e:	7882      	ldrb	r2, [r0, #2]
 8010170:	7a81      	ldrb	r1, [r0, #10]
 8010172:	5c59      	ldrb	r1, [r3, r1]
 8010174:	7081      	strb	r1, [r0, #2]
 8010176:	5c9a      	ldrb	r2, [r3, r2]
 8010178:	7282      	strb	r2, [r0, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 801017a:	7982      	ldrb	r2, [r0, #6]
 801017c:	7b81      	ldrb	r1, [r0, #14]
 801017e:	5c59      	ldrb	r1, [r3, r1]
 8010180:	7181      	strb	r1, [r0, #6]
 8010182:	5c9a      	ldrb	r2, [r3, r2]
 8010184:	7382      	strb	r2, [r0, #14]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8010186:	7bc2      	ldrb	r2, [r0, #15]
 8010188:	7ac1      	ldrb	r1, [r0, #11]
 801018a:	5c59      	ldrb	r1, [r3, r1]
 801018c:	73c1      	strb	r1, [r0, #15]
 801018e:	79c1      	ldrb	r1, [r0, #7]
 8010190:	5c59      	ldrb	r1, [r3, r1]
 8010192:	72c1      	strb	r1, [r0, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8010194:	78c1      	ldrb	r1, [r0, #3]
 8010196:	5c59      	ldrb	r1, [r3, r1]
 8010198:	71c1      	strb	r1, [r0, #7]
 801019a:	5c9b      	ldrb	r3, [r3, r2]
 801019c:	70c3      	strb	r3, [r0, #3]
}
 801019e:	4770      	bx	lr
 80101a0:	08014958 	.word	0x08014958

080101a4 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 80101a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101a8:	b084      	sub	sp, #16
 80101aa:	4604      	mov	r4, r0
    block_copy(st, dt);
 80101ac:	4601      	mov	r1, r0
 80101ae:	4668      	mov	r0, sp
 80101b0:	f7ff fef3 	bl	800ff9a <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 80101b4:	f89d c000 	ldrb.w	ip, [sp]
 80101b8:	4b6a      	ldr	r3, [pc, #424]	; (8010364 <mix_sub_columns+0x1c0>)
 80101ba:	f813 000c 	ldrb.w	r0, [r3, ip]
 80101be:	f89d 8005 	ldrb.w	r8, [sp, #5]
 80101c2:	4a69      	ldr	r2, [pc, #420]	; (8010368 <mix_sub_columns+0x1c4>)
 80101c4:	f812 9008 	ldrb.w	r9, [r2, r8]
 80101c8:	f89d e00a 	ldrb.w	lr, [sp, #10]
 80101cc:	4967      	ldr	r1, [pc, #412]	; (801036c <mix_sub_columns+0x1c8>)
 80101ce:	f811 500e 	ldrb.w	r5, [r1, lr]
 80101d2:	f89d 700f 	ldrb.w	r7, [sp, #15]
 80101d6:	5dce      	ldrb	r6, [r1, r7]
 80101d8:	ea80 0009 	eor.w	r0, r0, r9
 80101dc:	4068      	eors	r0, r5
 80101de:	4070      	eors	r0, r6
 80101e0:	7020      	strb	r0, [r4, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 80101e2:	f811 000c 	ldrb.w	r0, [r1, ip]
 80101e6:	f813 a008 	ldrb.w	sl, [r3, r8]
 80101ea:	f812 900e 	ldrb.w	r9, [r2, lr]
 80101ee:	ea80 0a0a 	eor.w	sl, r0, sl
 80101f2:	ea89 090a 	eor.w	r9, r9, sl
 80101f6:	ea86 0609 	eor.w	r6, r6, r9
 80101fa:	7066      	strb	r6, [r4, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 80101fc:	f811 8008 	ldrb.w	r8, [r1, r8]
 8010200:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8010204:	5dd6      	ldrb	r6, [r2, r7]
 8010206:	ea80 0008 	eor.w	r0, r0, r8
 801020a:	ea8e 0000 	eor.w	r0, lr, r0
 801020e:	4070      	eors	r0, r6
 8010210:	70a0      	strb	r0, [r4, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8010212:	f812 600c 	ldrb.w	r6, [r2, ip]
 8010216:	5dd8      	ldrb	r0, [r3, r7]
 8010218:	ea86 0608 	eor.w	r6, r6, r8
 801021c:	4075      	eors	r5, r6
 801021e:	4045      	eors	r5, r0
 8010220:	70e5      	strb	r5, [r4, #3]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8010222:	f89d c004 	ldrb.w	ip, [sp, #4]
 8010226:	f813 000c 	ldrb.w	r0, [r3, ip]
 801022a:	f89d 8009 	ldrb.w	r8, [sp, #9]
 801022e:	f812 9008 	ldrb.w	r9, [r2, r8]
 8010232:	f89d e00e 	ldrb.w	lr, [sp, #14]
 8010236:	f811 500e 	ldrb.w	r5, [r1, lr]
 801023a:	f89d 7003 	ldrb.w	r7, [sp, #3]
 801023e:	5dce      	ldrb	r6, [r1, r7]
 8010240:	ea80 0009 	eor.w	r0, r0, r9
 8010244:	4068      	eors	r0, r5
 8010246:	4070      	eors	r0, r6
 8010248:	7120      	strb	r0, [r4, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 801024a:	f811 000c 	ldrb.w	r0, [r1, ip]
 801024e:	f813 a008 	ldrb.w	sl, [r3, r8]
 8010252:	f812 900e 	ldrb.w	r9, [r2, lr]
 8010256:	ea80 0a0a 	eor.w	sl, r0, sl
 801025a:	ea89 090a 	eor.w	r9, r9, sl
 801025e:	ea86 0609 	eor.w	r6, r6, r9
 8010262:	7166      	strb	r6, [r4, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8010264:	f811 8008 	ldrb.w	r8, [r1, r8]
 8010268:	f813 e00e 	ldrb.w	lr, [r3, lr]
 801026c:	5dd6      	ldrb	r6, [r2, r7]
 801026e:	ea80 0008 	eor.w	r0, r0, r8
 8010272:	ea8e 0000 	eor.w	r0, lr, r0
 8010276:	4070      	eors	r0, r6
 8010278:	71a0      	strb	r0, [r4, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 801027a:	f812 600c 	ldrb.w	r6, [r2, ip]
 801027e:	5dd8      	ldrb	r0, [r3, r7]
 8010280:	ea86 0608 	eor.w	r6, r6, r8
 8010284:	4075      	eors	r5, r6
 8010286:	4045      	eors	r5, r0
 8010288:	71e5      	strb	r5, [r4, #7]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 801028a:	f89d c008 	ldrb.w	ip, [sp, #8]
 801028e:	f813 000c 	ldrb.w	r0, [r3, ip]
 8010292:	f89d 800d 	ldrb.w	r8, [sp, #13]
 8010296:	f812 9008 	ldrb.w	r9, [r2, r8]
 801029a:	f89d e002 	ldrb.w	lr, [sp, #2]
 801029e:	f811 500e 	ldrb.w	r5, [r1, lr]
 80102a2:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80102a6:	5dce      	ldrb	r6, [r1, r7]
 80102a8:	ea80 0009 	eor.w	r0, r0, r9
 80102ac:	4068      	eors	r0, r5
 80102ae:	4070      	eors	r0, r6
 80102b0:	7220      	strb	r0, [r4, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 80102b2:	f811 000c 	ldrb.w	r0, [r1, ip]
 80102b6:	f813 a008 	ldrb.w	sl, [r3, r8]
 80102ba:	f812 900e 	ldrb.w	r9, [r2, lr]
 80102be:	ea80 0a0a 	eor.w	sl, r0, sl
 80102c2:	ea89 090a 	eor.w	r9, r9, sl
 80102c6:	ea86 0609 	eor.w	r6, r6, r9
 80102ca:	7266      	strb	r6, [r4, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 80102cc:	f811 8008 	ldrb.w	r8, [r1, r8]
 80102d0:	f813 e00e 	ldrb.w	lr, [r3, lr]
 80102d4:	5dd6      	ldrb	r6, [r2, r7]
 80102d6:	ea80 0008 	eor.w	r0, r0, r8
 80102da:	ea8e 0000 	eor.w	r0, lr, r0
 80102de:	4070      	eors	r0, r6
 80102e0:	72a0      	strb	r0, [r4, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 80102e2:	f812 600c 	ldrb.w	r6, [r2, ip]
 80102e6:	5dd8      	ldrb	r0, [r3, r7]
 80102e8:	ea86 0608 	eor.w	r6, r6, r8
 80102ec:	4075      	eors	r5, r6
 80102ee:	4045      	eors	r5, r0
 80102f0:	72e5      	strb	r5, [r4, #11]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 80102f2:	f89d 600c 	ldrb.w	r6, [sp, #12]
 80102f6:	5d98      	ldrb	r0, [r3, r6]
 80102f8:	f89d 8001 	ldrb.w	r8, [sp, #1]
 80102fc:	f812 9008 	ldrb.w	r9, [r2, r8]
 8010300:	f89d 7006 	ldrb.w	r7, [sp, #6]
 8010304:	f811 c007 	ldrb.w	ip, [r1, r7]
 8010308:	f89d 500b 	ldrb.w	r5, [sp, #11]
 801030c:	f811 e005 	ldrb.w	lr, [r1, r5]
 8010310:	ea80 0009 	eor.w	r0, r0, r9
 8010314:	ea8c 0000 	eor.w	r0, ip, r0
 8010318:	ea8e 0000 	eor.w	r0, lr, r0
 801031c:	7320      	strb	r0, [r4, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 801031e:	5d88      	ldrb	r0, [r1, r6]
 8010320:	f813 a008 	ldrb.w	sl, [r3, r8]
 8010324:	f812 9007 	ldrb.w	r9, [r2, r7]
 8010328:	ea80 0a0a 	eor.w	sl, r0, sl
 801032c:	ea89 090a 	eor.w	r9, r9, sl
 8010330:	ea8e 0e09 	eor.w	lr, lr, r9
 8010334:	f884 e00d 	strb.w	lr, [r4, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8010338:	f811 1008 	ldrb.w	r1, [r1, r8]
 801033c:	f813 e007 	ldrb.w	lr, [r3, r7]
 8010340:	5d57      	ldrb	r7, [r2, r5]
 8010342:	4048      	eors	r0, r1
 8010344:	ea8e 0000 	eor.w	r0, lr, r0
 8010348:	4078      	eors	r0, r7
 801034a:	73a0      	strb	r0, [r4, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 801034c:	5d92      	ldrb	r2, [r2, r6]
 801034e:	5d5b      	ldrb	r3, [r3, r5]
 8010350:	4051      	eors	r1, r2
 8010352:	ea8c 0c01 	eor.w	ip, ip, r1
 8010356:	ea83 0c0c 	eor.w	ip, r3, ip
 801035a:	f884 c00f 	strb.w	ip, [r4, #15]
  }
 801035e:	b004      	add	sp, #16
 8010360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010364:	08014758 	.word	0x08014758
 8010368:	08014858 	.word	0x08014858
 801036c:	08014958 	.word	0x08014958

08010370 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 8010370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010374:	4614      	mov	r4, r2
    uint8_t cc, rc, hi;

    switch( keylen )
 8010376:	f1a1 0310 	sub.w	r3, r1, #16
 801037a:	b2da      	uxtb	r2, r3
 801037c:	2a10      	cmp	r2, #16
 801037e:	d807      	bhi.n	8010390 <lorawan_aes_set_key+0x20>
 8010380:	460d      	mov	r5, r1
 8010382:	2301      	movs	r3, #1
 8010384:	4093      	lsls	r3, r2
 8010386:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 801038a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801038e:	b92b      	cbnz	r3, 801039c <lorawan_aes_set_key+0x2c>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 8010390:	2300      	movs	r3, #0
 8010392:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
        return ( uint8_t )-1;
 8010396:	20ff      	movs	r0, #255	; 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 8010398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    block_copy_nn(ctx->ksch, key, keylen);
 801039c:	460a      	mov	r2, r1
 801039e:	4601      	mov	r1, r0
 80103a0:	4620      	mov	r0, r4
 80103a2:	f7ff fe1b 	bl	800ffdc <copy_block_nn>
    hi = (keylen + 28) << 2;
 80103a6:	f105 031c 	add.w	r3, r5, #28
 80103aa:	b2db      	uxtb	r3, r3
 80103ac:	009b      	lsls	r3, r3, #2
 80103ae:	fa5f fe83 	uxtb.w	lr, r3
    ctx->rnd = (hi >> 4) - 1;
 80103b2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80103b6:	3b01      	subs	r3, #1
 80103b8:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80103bc:	462b      	mov	r3, r5
 80103be:	f04f 0c01 	mov.w	ip, #1
 80103c2:	e023      	b.n	801040c <lorawan_aes_set_key+0x9c>
        else if( keylen > 24 && cc % keylen == 16 )
 80103c4:	2d18      	cmp	r5, #24
 80103c6:	d901      	bls.n	80103cc <lorawan_aes_set_key+0x5c>
 80103c8:	2a10      	cmp	r2, #16
 80103ca:	d047      	beq.n	801045c <lorawan_aes_set_key+0xec>
        tt = cc - keylen;
 80103cc:	1b5a      	subs	r2, r3, r5
 80103ce:	b2d2      	uxtb	r2, r2
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 80103d0:	f814 9002 	ldrb.w	r9, [r4, r2]
 80103d4:	ea89 0808 	eor.w	r8, r9, r8
 80103d8:	f804 8000 	strb.w	r8, [r4, r0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 80103dc:	f102 0801 	add.w	r8, r2, #1
 80103e0:	f814 8008 	ldrb.w	r8, [r4, r8]
 80103e4:	f100 0901 	add.w	r9, r0, #1
 80103e8:	ea88 0707 	eor.w	r7, r8, r7
 80103ec:	f804 7009 	strb.w	r7, [r4, r9]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 80103f0:	1c97      	adds	r7, r2, #2
 80103f2:	5de7      	ldrb	r7, [r4, r7]
 80103f4:	f100 0802 	add.w	r8, r0, #2
 80103f8:	407e      	eors	r6, r7
 80103fa:	f804 6008 	strb.w	r6, [r4, r8]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 80103fe:	3203      	adds	r2, #3
 8010400:	5ca6      	ldrb	r6, [r4, r2]
 8010402:	1cc2      	adds	r2, r0, #3
 8010404:	4071      	eors	r1, r6
 8010406:	54a1      	strb	r1, [r4, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8010408:	3304      	adds	r3, #4
 801040a:	b2db      	uxtb	r3, r3
 801040c:	4573      	cmp	r3, lr
 801040e:	d22c      	bcs.n	801046a <lorawan_aes_set_key+0xfa>
        t0 = ctx->ksch[cc - 4];
 8010410:	4618      	mov	r0, r3
 8010412:	1f1a      	subs	r2, r3, #4
 8010414:	f814 8002 	ldrb.w	r8, [r4, r2]
        t1 = ctx->ksch[cc - 3];
 8010418:	1eda      	subs	r2, r3, #3
 801041a:	5ca7      	ldrb	r7, [r4, r2]
        t2 = ctx->ksch[cc - 2];
 801041c:	1e9a      	subs	r2, r3, #2
 801041e:	5ca6      	ldrb	r6, [r4, r2]
        t3 = ctx->ksch[cc - 1];
 8010420:	1e5a      	subs	r2, r3, #1
 8010422:	5ca1      	ldrb	r1, [r4, r2]
        if( cc % keylen == 0 )
 8010424:	fbb3 f2f5 	udiv	r2, r3, r5
 8010428:	fb05 3212 	mls	r2, r5, r2, r3
 801042c:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8010430:	d1c8      	bne.n	80103c4 <lorawan_aes_set_key+0x54>
            t0 = s_box(t1) ^ rc;
 8010432:	4a0f      	ldr	r2, [pc, #60]	; (8010470 <lorawan_aes_set_key+0x100>)
 8010434:	f812 9007 	ldrb.w	r9, [r2, r7]
 8010438:	ea89 090c 	eor.w	r9, r9, ip
            t1 = s_box(t2);
 801043c:	5d97      	ldrb	r7, [r2, r6]
            t2 = s_box(t3);
 801043e:	5c56      	ldrb	r6, [r2, r1]
            t3 = s_box(tt);
 8010440:	f812 1008 	ldrb.w	r1, [r2, r8]
            rc = f2(rc);
 8010444:	ea4f 12dc 	mov.w	r2, ip, lsr #7
 8010448:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801044c:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8010450:	ea82 0c4c 	eor.w	ip, r2, ip, lsl #1
 8010454:	fa5f fc8c 	uxtb.w	ip, ip
            t0 = s_box(t1) ^ rc;
 8010458:	46c8      	mov	r8, r9
 801045a:	e7b7      	b.n	80103cc <lorawan_aes_set_key+0x5c>
            t0 = s_box(t0);
 801045c:	4a04      	ldr	r2, [pc, #16]	; (8010470 <lorawan_aes_set_key+0x100>)
 801045e:	f812 8008 	ldrb.w	r8, [r2, r8]
            t1 = s_box(t1);
 8010462:	5dd7      	ldrb	r7, [r2, r7]
            t2 = s_box(t2);
 8010464:	5d96      	ldrb	r6, [r2, r6]
            t3 = s_box(t3);
 8010466:	5c51      	ldrb	r1, [r2, r1]
 8010468:	e7b0      	b.n	80103cc <lorawan_aes_set_key+0x5c>
    return 0;
 801046a:	2000      	movs	r0, #0
 801046c:	e794      	b.n	8010398 <lorawan_aes_set_key+0x28>
 801046e:	bf00      	nop
 8010470:	08014958 	.word	0x08014958

08010474 <lorawan_aes_encrypt>:

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
    if( ctx->rnd )
 8010474:	f892 30f0 	ldrb.w	r3, [r2, #240]	; 0xf0
 8010478:	b31b      	cbz	r3, 80104c2 <lorawan_aes_encrypt+0x4e>
{
 801047a:	b570      	push	{r4, r5, r6, lr}
 801047c:	b084      	sub	sp, #16
 801047e:	460e      	mov	r6, r1
 8010480:	4615      	mov	r5, r2
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 8010482:	4601      	mov	r1, r0
 8010484:	4668      	mov	r0, sp
 8010486:	f7ff fdf5 	bl	8010074 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 801048a:	2401      	movs	r4, #1
 801048c:	e009      	b.n	80104a2 <lorawan_aes_encrypt+0x2e>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 801048e:	4668      	mov	r0, sp
 8010490:	f7ff fe88 	bl	80101a4 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 8010494:	eb05 1104 	add.w	r1, r5, r4, lsl #4
 8010498:	4668      	mov	r0, sp
 801049a:	f7ff fe4a 	bl	8010132 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 801049e:	3401      	adds	r4, #1
 80104a0:	b2e4      	uxtb	r4, r4
 80104a2:	f895 30f0 	ldrb.w	r3, [r5, #240]	; 0xf0
 80104a6:	42a3      	cmp	r3, r4
 80104a8:	d8f1      	bhi.n	801048e <lorawan_aes_encrypt+0x1a>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 80104aa:	4668      	mov	r0, sp
 80104ac:	f7ff fe46 	bl	801013c <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 80104b0:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 80104b4:	4669      	mov	r1, sp
 80104b6:	4630      	mov	r0, r6
 80104b8:	f7ff fddc 	bl	8010074 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 80104bc:	2000      	movs	r0, #0
}
 80104be:	b004      	add	sp, #16
 80104c0:	bd70      	pop	{r4, r5, r6, pc}
        return ( uint8_t )-1;
 80104c2:	20ff      	movs	r0, #255	; 0xff
}
 80104c4:	4770      	bx	lr
	...

080104c8 <GetKeyByID>:
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80104c8:	2300      	movs	r3, #0
 80104ca:	2b09      	cmp	r3, #9
 80104cc:	d817      	bhi.n	80104fe <GetKeyByID+0x36>
{
 80104ce:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 80104d0:	4a0c      	ldr	r2, [pc, #48]	; (8010504 <GetKeyByID+0x3c>)
 80104d2:	6814      	ldr	r4, [r2, #0]
 80104d4:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 80104d8:	4422      	add	r2, r4
 80104da:	7c12      	ldrb	r2, [r2, #16]
 80104dc:	4282      	cmp	r2, r0
 80104de:	d006      	beq.n	80104ee <GetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80104e0:	3301      	adds	r3, #1
 80104e2:	b2db      	uxtb	r3, r3
 80104e4:	2b09      	cmp	r3, #9
 80104e6:	d9f3      	bls.n	80104d0 <GetKeyByID+0x8>
        {
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80104e8:	2003      	movs	r0, #3
}
 80104ea:	bc10      	pop	{r4}
 80104ec:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 80104ee:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 80104f2:	f10c 0c10 	add.w	ip, ip, #16
 80104f6:	4464      	add	r4, ip
 80104f8:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 80104fa:	2000      	movs	r0, #0
 80104fc:	e7f5      	b.n	80104ea <GetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80104fe:	2003      	movs	r0, #3
}
 8010500:	4770      	bx	lr
 8010502:	bf00      	nop
 8010504:	20000e44 	.word	0x20000e44

08010508 <ComputeCmac>:
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 8010508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801050c:	b0cc      	sub	sp, #304	; 0x130
 801050e:	9e52      	ldr	r6, [sp, #328]	; 0x148
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 8010510:	b3a9      	cbz	r1, 801057e <ComputeCmac+0x76>
 8010512:	4605      	mov	r5, r0
 8010514:	4617      	mov	r7, r2
 8010516:	461c      	mov	r4, r3
 8010518:	4688      	mov	r8, r1
 801051a:	b396      	cbz	r6, 8010582 <ComputeCmac+0x7a>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 801051c:	a802      	add	r0, sp, #8
 801051e:	f7ff fbd7 	bl	800fcd0 <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 8010522:	a901      	add	r1, sp, #4
 8010524:	4620      	mov	r0, r4
 8010526:	f7ff ffcf 	bl	80104c8 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 801052a:	4604      	mov	r4, r0
 801052c:	b118      	cbz	r0, 8010536 <ComputeCmac+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
}
 801052e:	4620      	mov	r0, r4
 8010530:	b04c      	add	sp, #304	; 0x130
 8010532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 8010536:	9901      	ldr	r1, [sp, #4]
 8010538:	3101      	adds	r1, #1
 801053a:	a802      	add	r0, sp, #8
 801053c:	f7ff fbd7 	bl	800fcee <AES_CMAC_SetKey>
        if( micBxBuffer != NULL )
 8010540:	b125      	cbz	r5, 801054c <ComputeCmac+0x44>
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 8010542:	2210      	movs	r2, #16
 8010544:	4629      	mov	r1, r5
 8010546:	a802      	add	r0, sp, #8
 8010548:	f7ff fbd8 	bl	800fcfc <AES_CMAC_Update>
        AES_CMAC_Update( aesCmacCtx, buffer, size );
 801054c:	463a      	mov	r2, r7
 801054e:	4641      	mov	r1, r8
 8010550:	a802      	add	r0, sp, #8
 8010552:	f7ff fbd3 	bl	800fcfc <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, aesCmacCtx );
 8010556:	a902      	add	r1, sp, #8
 8010558:	a848      	add	r0, sp, #288	; 0x120
 801055a:	f7ff fc3d 	bl	800fdd8 <AES_CMAC_Final>
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 801055e:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
 8010562:	f89d 3122 	ldrb.w	r3, [sp, #290]	; 0x122
 8010566:	041b      	lsls	r3, r3, #16
 8010568:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801056c:	f89d 2121 	ldrb.w	r2, [sp, #289]	; 0x121
 8010570:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                              ( uint32_t ) Cmac[0] );
 8010574:	f89d 2120 	ldrb.w	r2, [sp, #288]	; 0x120
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 8010578:	4313      	orrs	r3, r2
 801057a:	6033      	str	r3, [r6, #0]
 801057c:	e7d7      	b.n	801052e <ComputeCmac+0x26>
        return SECURE_ELEMENT_ERROR_NPE;
 801057e:	2402      	movs	r4, #2
 8010580:	e7d5      	b.n	801052e <ComputeCmac+0x26>
 8010582:	2402      	movs	r4, #2
 8010584:	e7d3      	b.n	801052e <ComputeCmac+0x26>
	...

08010588 <SecureElementInit>:
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    if( nvm == NULL )
 8010588:	b168      	cbz	r0, 80105a6 <SecureElementInit+0x1e>
{
 801058a:	b510      	push	{r4, lr}
 801058c:	460c      	mov	r4, r1
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 801058e:	4a08      	ldr	r2, [pc, #32]	; (80105b0 <SecureElementInit+0x28>)
 8010590:	6010      	str	r0, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 8010592:	22c0      	movs	r2, #192	; 0xc0
 8010594:	4907      	ldr	r1, [pc, #28]	; (80105b4 <SecureElementInit+0x2c>)
 8010596:	f000 faaa 	bl	8010aee <memcpy1>
#endif /* LORAMAC_CLASSB_ENABLED */
#endif /* LORAWAN_KMS */

#if !defined( SECURE_ELEMENT_PRE_PROVISIONED )
#if( STATIC_DEVICE_EUI == 0 )
    if (seGetUniqueId != NULL)
 801059a:	b134      	cbz	r4, 80105aa <SecureElementInit+0x22>
    {
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
 801059c:	4b04      	ldr	r3, [pc, #16]	; (80105b0 <SecureElementInit+0x28>)
 801059e:	6818      	ldr	r0, [r3, #0]
 80105a0:	47a0      	blx	r4
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 80105a2:	2000      	movs	r0, #0
}
 80105a4:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80105a6:	2002      	movs	r0, #2
}
 80105a8:	4770      	bx	lr
    return SECURE_ELEMENT_SUCCESS;
 80105aa:	2000      	movs	r0, #0
 80105ac:	e7fa      	b.n	80105a4 <SecureElementInit+0x1c>
 80105ae:	bf00      	nop
 80105b0:	20000e44 	.word	0x20000e44
 80105b4:	0803e500 	.word	0x0803e500

080105b8 <SecureElementGetKeyByID>:
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, uint8_t* extractable_key )
#endif /* LORAWAN_KMS */
{
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 80105b8:	2300      	movs	r3, #0
 80105ba:	2b09      	cmp	r3, #9
 80105bc:	d817      	bhi.n	80105ee <SecureElementGetKeyByID+0x36>
{
 80105be:	b410      	push	{r4}
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 80105c0:	4a0c      	ldr	r2, [pc, #48]	; (80105f4 <SecureElementGetKeyByID+0x3c>)
 80105c2:	6814      	ldr	r4, [r2, #0]
 80105c4:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 80105c8:	4422      	add	r2, r4
 80105ca:	7c12      	ldrb	r2, [r2, #16]
 80105cc:	4282      	cmp	r2, r0
 80105ce:	d006      	beq.n	80105de <SecureElementGetKeyByID+0x26>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 80105d0:	3301      	adds	r3, #1
 80105d2:	b2db      	uxtb	r3, r3
 80105d4:	2b09      	cmp	r3, #9
 80105d6:	d9f3      	bls.n	80105c0 <SecureElementGetKeyByID+0x8>
            *keyItem = &(SeNvm->KeyList[i]);
            return SECURE_ELEMENT_SUCCESS;
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80105d8:	2003      	movs	r0, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 80105da:	bc10      	pop	{r4}
 80105dc:	4770      	bx	lr
            *keyItem = &(SeNvm->KeyList[i]);
 80105de:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 80105e2:	f10c 0c10 	add.w	ip, ip, #16
 80105e6:	4464      	add	r4, ip
 80105e8:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 80105ea:	2000      	movs	r0, #0
 80105ec:	e7f5      	b.n	80105da <SecureElementGetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80105ee:	2003      	movs	r0, #3
}
 80105f0:	4770      	bx	lr
 80105f2:	bf00      	nop
 80105f4:	20000e44 	.word	0x20000e44

080105f8 <PrintKey>:
{
 80105f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105fc:	b095      	sub	sp, #84	; 0x54
 80105fe:	4604      	mov	r4, r0
    retval = SecureElementGetKeyByID(key, &keyItem);
 8010600:	a913      	add	r1, sp, #76	; 0x4c
 8010602:	f7ff ffd9 	bl	80105b8 <SecureElementGetKeyByID>
    if (retval == SECURE_ELEMENT_SUCCESS)
 8010606:	2800      	cmp	r0, #0
 8010608:	d154      	bne.n	80106b4 <PrintKey+0xbc>
        if (key == APP_KEY)
 801060a:	b1b4      	cbz	r4, 801063a <PrintKey+0x42>
        else if (key == NWK_KEY)
 801060c:	2c01      	cmp	r4, #1
 801060e:	d054      	beq.n	80106ba <PrintKey+0xc2>
        else if (key == APP_S_KEY)
 8010610:	2c03      	cmp	r4, #3
 8010612:	d059      	beq.n	80106c8 <PrintKey+0xd0>
        else if (key == NWK_S_KEY)
 8010614:	2c02      	cmp	r4, #2
 8010616:	d05e      	beq.n	80106d6 <PrintKey+0xde>
        else if (key == MC_ROOT_KEY)
 8010618:	2c04      	cmp	r4, #4
 801061a:	d063      	beq.n	80106e4 <PrintKey+0xec>
        else if (key == MC_KE_KEY)
 801061c:	2c7f      	cmp	r4, #127	; 0x7f
 801061e:	d068      	beq.n	80106f2 <PrintKey+0xfa>
        else if (key == MC_KEY_0)
 8010620:	2c80      	cmp	r4, #128	; 0x80
 8010622:	d06d      	beq.n	8010700 <PrintKey+0x108>
        else if (key == MC_APP_S_KEY_0)
 8010624:	2c81      	cmp	r4, #129	; 0x81
 8010626:	d072      	beq.n	801070e <PrintKey+0x116>
        else if (key == MC_NWK_S_KEY_0)
 8010628:	2c82      	cmp	r4, #130	; 0x82
 801062a:	d10c      	bne.n	8010646 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 801062c:	4b3b      	ldr	r3, [pc, #236]	; (801071c <PrintKey+0x124>)
 801062e:	2200      	movs	r2, #0
 8010630:	4611      	mov	r1, r2
 8010632:	2002      	movs	r0, #2
 8010634:	f002 f904 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
 8010638:	e005      	b.n	8010646 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 801063a:	4b39      	ldr	r3, [pc, #228]	; (8010720 <PrintKey+0x128>)
 801063c:	2200      	movs	r2, #0
 801063e:	4611      	mov	r1, r2
 8010640:	2002      	movs	r0, #2
 8010642:	f002 f8fd 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8010646:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010648:	785a      	ldrb	r2, [r3, #1]
 801064a:	9210      	str	r2, [sp, #64]	; 0x40
 801064c:	7899      	ldrb	r1, [r3, #2]
 801064e:	9111      	str	r1, [sp, #68]	; 0x44
 8010650:	78da      	ldrb	r2, [r3, #3]
 8010652:	7919      	ldrb	r1, [r3, #4]
 8010654:	7958      	ldrb	r0, [r3, #5]
 8010656:	799c      	ldrb	r4, [r3, #6]
 8010658:	79dd      	ldrb	r5, [r3, #7]
 801065a:	7a1e      	ldrb	r6, [r3, #8]
 801065c:	7a5f      	ldrb	r7, [r3, #9]
 801065e:	f893 c00a 	ldrb.w	ip, [r3, #10]
 8010662:	f893 e00b 	ldrb.w	lr, [r3, #11]
 8010666:	f893 800c 	ldrb.w	r8, [r3, #12]
 801066a:	f893 900d 	ldrb.w	r9, [r3, #13]
 801066e:	f893 a00e 	ldrb.w	sl, [r3, #14]
 8010672:	f893 b00f 	ldrb.w	fp, [r3, #15]
 8010676:	7c1b      	ldrb	r3, [r3, #16]
 8010678:	930f      	str	r3, [sp, #60]	; 0x3c
 801067a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 801067e:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8010682:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8010686:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801068a:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 801068e:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8010692:	9708      	str	r7, [sp, #32]
 8010694:	9607      	str	r6, [sp, #28]
 8010696:	9506      	str	r5, [sp, #24]
 8010698:	9405      	str	r4, [sp, #20]
 801069a:	9004      	str	r0, [sp, #16]
 801069c:	9103      	str	r1, [sp, #12]
 801069e:	9202      	str	r2, [sp, #8]
 80106a0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80106a2:	9101      	str	r1, [sp, #4]
 80106a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80106a6:	9200      	str	r2, [sp, #0]
 80106a8:	4b1e      	ldr	r3, [pc, #120]	; (8010724 <PrintKey+0x12c>)
 80106aa:	2200      	movs	r2, #0
 80106ac:	4611      	mov	r1, r2
 80106ae:	2002      	movs	r0, #2
 80106b0:	f002 f8c6 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
}
 80106b4:	b015      	add	sp, #84	; 0x54
 80106b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 80106ba:	4b1b      	ldr	r3, [pc, #108]	; (8010728 <PrintKey+0x130>)
 80106bc:	2200      	movs	r2, #0
 80106be:	4611      	mov	r1, r2
 80106c0:	2002      	movs	r0, #2
 80106c2:	f002 f8bd 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
 80106c6:	e7be      	b.n	8010646 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 80106c8:	4b18      	ldr	r3, [pc, #96]	; (801072c <PrintKey+0x134>)
 80106ca:	2200      	movs	r2, #0
 80106cc:	4611      	mov	r1, r2
 80106ce:	2002      	movs	r0, #2
 80106d0:	f002 f8b6 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
 80106d4:	e7b7      	b.n	8010646 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 80106d6:	4b16      	ldr	r3, [pc, #88]	; (8010730 <PrintKey+0x138>)
 80106d8:	2200      	movs	r2, #0
 80106da:	4611      	mov	r1, r2
 80106dc:	2002      	movs	r0, #2
 80106de:	f002 f8af 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
 80106e2:	e7b0      	b.n	8010646 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 80106e4:	4b13      	ldr	r3, [pc, #76]	; (8010734 <PrintKey+0x13c>)
 80106e6:	2200      	movs	r2, #0
 80106e8:	4611      	mov	r1, r2
 80106ea:	2002      	movs	r0, #2
 80106ec:	f002 f8a8 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
 80106f0:	e7a9      	b.n	8010646 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 80106f2:	4b11      	ldr	r3, [pc, #68]	; (8010738 <PrintKey+0x140>)
 80106f4:	2200      	movs	r2, #0
 80106f6:	4611      	mov	r1, r2
 80106f8:	2002      	movs	r0, #2
 80106fa:	f002 f8a1 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
 80106fe:	e7a2      	b.n	8010646 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 8010700:	4b0e      	ldr	r3, [pc, #56]	; (801073c <PrintKey+0x144>)
 8010702:	2200      	movs	r2, #0
 8010704:	4611      	mov	r1, r2
 8010706:	2002      	movs	r0, #2
 8010708:	f002 f89a 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
 801070c:	e79b      	b.n	8010646 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 801070e:	4b0c      	ldr	r3, [pc, #48]	; (8010740 <PrintKey+0x148>)
 8010710:	2200      	movs	r2, #0
 8010712:	4611      	mov	r1, r2
 8010714:	2002      	movs	r0, #2
 8010716:	f002 f893 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
 801071a:	e794      	b.n	8010646 <PrintKey+0x4e>
 801071c:	08014b18 	.word	0x08014b18
 8010720:	08014a58 	.word	0x08014a58
 8010724:	08014b30 	.word	0x08014b30
 8010728:	08014a70 	.word	0x08014a70
 801072c:	08014a88 	.word	0x08014a88
 8010730:	08014aa0 	.word	0x08014aa0
 8010734:	08014ab8 	.word	0x08014ab8
 8010738:	08014ad0 	.word	0x08014ad0
 801073c:	08014ae8 	.word	0x08014ae8
 8010740:	08014b00 	.word	0x08014b00

08010744 <SecureElementPrintKeys>:

SecureElementStatus_t SecureElementPrintKeys( void )
{
 8010744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010746:	b089      	sub	sp, #36	; 0x24
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 8010748:	4b28      	ldr	r3, [pc, #160]	; (80107ec <SecureElementPrintKeys+0xa8>)
 801074a:	2200      	movs	r2, #0
 801074c:	4611      	mov	r1, r2
 801074e:	2002      	movs	r0, #2
 8010750:	f002 f876 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 8010754:	2000      	movs	r0, #0
 8010756:	f7ff ff4f 	bl	80105f8 <PrintKey>
    PrintKey(NWK_KEY);
 801075a:	2001      	movs	r0, #1
 801075c:	f7ff ff4c 	bl	80105f8 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 8010760:	4b23      	ldr	r3, [pc, #140]	; (80107f0 <SecureElementPrintKeys+0xac>)
 8010762:	2200      	movs	r2, #0
 8010764:	4611      	mov	r1, r2
 8010766:	2002      	movs	r0, #2
 8010768:	f002 f86a 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 801076c:	2003      	movs	r0, #3
 801076e:	f7ff ff43 	bl	80105f8 <PrintKey>
    PrintKey(NWK_S_KEY);
 8010772:	2002      	movs	r0, #2
 8010774:	f7ff ff40 	bl	80105f8 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    MW_LOG(TS_OFF, VLEVEL_M, "###### IDs  ######\r\n");
 8010778:	4b1e      	ldr	r3, [pc, #120]	; (80107f4 <SecureElementPrintKeys+0xb0>)
 801077a:	2200      	movs	r2, #0
 801077c:	4611      	mov	r1, r2
 801077e:	2002      	movs	r0, #2
 8010780:	f002 f85e 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8010784:	4c1c      	ldr	r4, [pc, #112]	; (80107f8 <SecureElementPrintKeys+0xb4>)
 8010786:	6823      	ldr	r3, [r4, #0]
 8010788:	781a      	ldrb	r2, [r3, #0]
 801078a:	7859      	ldrb	r1, [r3, #1]
 801078c:	7898      	ldrb	r0, [r3, #2]
 801078e:	78dd      	ldrb	r5, [r3, #3]
 8010790:	791e      	ldrb	r6, [r3, #4]
 8010792:	795f      	ldrb	r7, [r3, #5]
 8010794:	f893 c006 	ldrb.w	ip, [r3, #6]
 8010798:	79db      	ldrb	r3, [r3, #7]
 801079a:	9307      	str	r3, [sp, #28]
 801079c:	f8cd c018 	str.w	ip, [sp, #24]
 80107a0:	9705      	str	r7, [sp, #20]
 80107a2:	9604      	str	r6, [sp, #16]
 80107a4:	9503      	str	r5, [sp, #12]
 80107a6:	9002      	str	r0, [sp, #8]
 80107a8:	9101      	str	r1, [sp, #4]
 80107aa:	9200      	str	r2, [sp, #0]
 80107ac:	4b13      	ldr	r3, [pc, #76]	; (80107fc <SecureElementPrintKeys+0xb8>)
 80107ae:	2200      	movs	r2, #0
 80107b0:	4611      	mov	r1, r2
 80107b2:	2002      	movs	r0, #2
 80107b4:	f002 f844 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80107b8:	6823      	ldr	r3, [r4, #0]
 80107ba:	7a1a      	ldrb	r2, [r3, #8]
 80107bc:	7a59      	ldrb	r1, [r3, #9]
 80107be:	7a98      	ldrb	r0, [r3, #10]
 80107c0:	7adc      	ldrb	r4, [r3, #11]
 80107c2:	7b1d      	ldrb	r5, [r3, #12]
 80107c4:	7b5e      	ldrb	r6, [r3, #13]
 80107c6:	7b9f      	ldrb	r7, [r3, #14]
 80107c8:	7bdb      	ldrb	r3, [r3, #15]
 80107ca:	9307      	str	r3, [sp, #28]
 80107cc:	9706      	str	r7, [sp, #24]
 80107ce:	9605      	str	r6, [sp, #20]
 80107d0:	9504      	str	r5, [sp, #16]
 80107d2:	9403      	str	r4, [sp, #12]
 80107d4:	9002      	str	r0, [sp, #8]
 80107d6:	9101      	str	r1, [sp, #4]
 80107d8:	9200      	str	r2, [sp, #0]
 80107da:	4b09      	ldr	r3, [pc, #36]	; (8010800 <SecureElementPrintKeys+0xbc>)
 80107dc:	2200      	movs	r2, #0
 80107de:	4611      	mov	r1, r2
 80107e0:	2002      	movs	r0, #2
 80107e2:	f002 f82d 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->JoinEui));
    return SECURE_ELEMENT_SUCCESS;
}
 80107e6:	2000      	movs	r0, #0
 80107e8:	b009      	add	sp, #36	; 0x24
 80107ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107ec:	08014b84 	.word	0x08014b84
 80107f0:	08014b9c 	.word	0x08014b9c
 80107f4:	08014bb4 	.word	0x08014bb4
 80107f8:	20000e44 	.word	0x20000e44
 80107fc:	08014bcc 	.word	0x08014bcc
 8010800:	08014c0c 	.word	0x08014c0c

08010804 <SecureElementPrintSessionKeys>:
    
SecureElementStatus_t SecureElementPrintSessionKeys( void )
{
 8010804:	b508      	push	{r3, lr}
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    PrintKey(MC_ROOT_KEY);
 8010806:	2004      	movs	r0, #4
 8010808:	f7ff fef6 	bl	80105f8 <PrintKey>
    PrintKey(MC_KE_KEY);
 801080c:	207f      	movs	r0, #127	; 0x7f
 801080e:	f7ff fef3 	bl	80105f8 <PrintKey>
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    PrintKey(F_NWK_S_INT_KEY);
    PrintKey(S_NWK_S_INT_KEY);
    PrintKey(NWK_S_ENC_KEY);
#else
    PrintKey(NWK_S_KEY);
 8010812:	2002      	movs	r0, #2
 8010814:	f7ff fef0 	bl	80105f8 <PrintKey>
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    PrintKey(APP_S_KEY);
 8010818:	2003      	movs	r0, #3
 801081a:	f7ff feed 	bl	80105f8 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_SUCCESS;
}
 801081e:	2000      	movs	r0, #0
 8010820:	bd08      	pop	{r3, pc}

08010822 <SecureElementComputeAesCmac>:
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 8010822:	2b7e      	cmp	r3, #126	; 0x7e
 8010824:	d80a      	bhi.n	801083c <SecureElementComputeAesCmac+0x1a>
{
 8010826:	b500      	push	{lr}
 8010828:	b083      	sub	sp, #12
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 801082a:	f8dd c010 	ldr.w	ip, [sp, #16]
 801082e:	f8cd c000 	str.w	ip, [sp]
 8010832:	f7ff fe69 	bl	8010508 <ComputeCmac>
}
 8010836:	b003      	add	sp, #12
 8010838:	f85d fb04 	ldr.w	pc, [sp], #4
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 801083c:	2003      	movs	r0, #3
}
 801083e:	4770      	bx	lr

08010840 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
    if( buffer == NULL )
 8010840:	b190      	cbz	r0, 8010868 <SecureElementVerifyAesCmac+0x28>
{
 8010842:	b510      	push	{r4, lr}
 8010844:	b084      	sub	sp, #16
 8010846:	468c      	mov	ip, r1
 8010848:	4614      	mov	r4, r2
 801084a:	4601      	mov	r1, r0
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 801084c:	2000      	movs	r0, #0
 801084e:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 8010850:	aa03      	add	r2, sp, #12
 8010852:	9200      	str	r2, [sp, #0]
 8010854:	4662      	mov	r2, ip
 8010856:	f7ff fe57 	bl	8010508 <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 801085a:	b918      	cbnz	r0, 8010864 <SecureElementVerifyAesCmac+0x24>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 801085c:	9b03      	ldr	r3, [sp, #12]
 801085e:	42a3      	cmp	r3, r4
 8010860:	d000      	beq.n	8010864 <SecureElementVerifyAesCmac+0x24>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 8010862:	2001      	movs	r0, #1
    }

#endif /* LORAWAN_KMS */

    return retval;
}
 8010864:	b004      	add	sp, #16
 8010866:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8010868:	2002      	movs	r0, #2
}
 801086a:	4770      	bx	lr

0801086c <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 801086c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010870:	b0be      	sub	sp, #248	; 0xf8
    if( buffer == NULL || encBuffer == NULL )
 8010872:	b350      	cbz	r0, 80108ca <SecureElementAesEncrypt+0x5e>
 8010874:	460c      	mov	r4, r1
 8010876:	4615      	mov	r5, r2
 8010878:	461e      	mov	r6, r3
 801087a:	4607      	mov	r7, r0
 801087c:	b343      	cbz	r3, 80108d0 <SecureElementAesEncrypt+0x64>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 801087e:	f011 0f0f 	tst.w	r1, #15
 8010882:	d128      	bne.n	80108d6 <SecureElementAesEncrypt+0x6a>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 8010884:	22f0      	movs	r2, #240	; 0xf0
 8010886:	2100      	movs	r1, #0
 8010888:	a801      	add	r0, sp, #4
 801088a:	f000 f948 	bl	8010b1e <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 801088e:	4669      	mov	r1, sp
 8010890:	4628      	mov	r0, r5
 8010892:	f7ff fe19 	bl	80104c8 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 8010896:	4680      	mov	r8, r0
 8010898:	b118      	cbz	r0, 80108a2 <SecureElementAesEncrypt+0x36>
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
}
 801089a:	4640      	mov	r0, r8
 801089c:	b03e      	add	sp, #248	; 0xf8
 801089e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 80108a2:	aa01      	add	r2, sp, #4
 80108a4:	2110      	movs	r1, #16
 80108a6:	9800      	ldr	r0, [sp, #0]
 80108a8:	3001      	adds	r0, #1
 80108aa:	f7ff fd61 	bl	8010370 <lorawan_aes_set_key>
        uint8_t block = 0;
 80108ae:	4645      	mov	r5, r8
        while( size != 0 )
 80108b0:	e008      	b.n	80108c4 <SecureElementAesEncrypt+0x58>
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 80108b2:	aa01      	add	r2, sp, #4
 80108b4:	1971      	adds	r1, r6, r5
 80108b6:	1978      	adds	r0, r7, r5
 80108b8:	f7ff fddc 	bl	8010474 <lorawan_aes_encrypt>
            block = block + 16;
 80108bc:	3510      	adds	r5, #16
 80108be:	b2ed      	uxtb	r5, r5
            size  = size - 16;
 80108c0:	3c10      	subs	r4, #16
 80108c2:	b2a4      	uxth	r4, r4
        while( size != 0 )
 80108c4:	2c00      	cmp	r4, #0
 80108c6:	d1f4      	bne.n	80108b2 <SecureElementAesEncrypt+0x46>
 80108c8:	e7e7      	b.n	801089a <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_NPE;
 80108ca:	f04f 0802 	mov.w	r8, #2
 80108ce:	e7e4      	b.n	801089a <SecureElementAesEncrypt+0x2e>
 80108d0:	f04f 0802 	mov.w	r8, #2
 80108d4:	e7e1      	b.n	801089a <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 80108d6:	f04f 0805 	mov.w	r8, #5
 80108da:	e7de      	b.n	801089a <SecureElementAesEncrypt+0x2e>

080108dc <SecureElementSetKey>:
{
 80108dc:	b530      	push	{r4, r5, lr}
 80108de:	b085      	sub	sp, #20
    if( key == NULL )
 80108e0:	2900      	cmp	r1, #0
 80108e2:	d038      	beq.n	8010956 <SecureElementSetKey+0x7a>
 80108e4:	468c      	mov	ip, r1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80108e6:	2300      	movs	r3, #0
 80108e8:	2b09      	cmp	r3, #9
 80108ea:	d830      	bhi.n	801094e <SecureElementSetKey+0x72>
        if( SeNvm->KeyList[i].KeyID == keyID )
 80108ec:	4a1b      	ldr	r2, [pc, #108]	; (801095c <SecureElementSetKey+0x80>)
 80108ee:	6811      	ldr	r1, [r2, #0]
 80108f0:	461c      	mov	r4, r3
 80108f2:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 80108f6:	440a      	add	r2, r1
 80108f8:	7c12      	ldrb	r2, [r2, #16]
 80108fa:	4282      	cmp	r2, r0
 80108fc:	d002      	beq.n	8010904 <SecureElementSetKey+0x28>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80108fe:	3301      	adds	r3, #1
 8010900:	b2db      	uxtb	r3, r3
 8010902:	e7f1      	b.n	80108e8 <SecureElementSetKey+0xc>
            if ( keyID == MC_KEY_0 )
 8010904:	2880      	cmp	r0, #128	; 0x80
 8010906:	d00a      	beq.n	801091e <SecureElementSetKey+0x42>
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 8010908:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801090c:	3310      	adds	r3, #16
 801090e:	440b      	add	r3, r1
 8010910:	2210      	movs	r2, #16
 8010912:	4661      	mov	r1, ip
 8010914:	1c58      	adds	r0, r3, #1
 8010916:	f000 f8ea 	bl	8010aee <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 801091a:	2500      	movs	r5, #0
 801091c:	e018      	b.n	8010950 <SecureElementSetKey+0x74>
                uint8_t               decryptedKey[16] = { 0 };
 801091e:	2300      	movs	r3, #0
 8010920:	9300      	str	r3, [sp, #0]
 8010922:	9301      	str	r3, [sp, #4]
 8010924:	9302      	str	r3, [sp, #8]
 8010926:	9303      	str	r3, [sp, #12]
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 8010928:	466b      	mov	r3, sp
 801092a:	227f      	movs	r2, #127	; 0x7f
 801092c:	2110      	movs	r1, #16
 801092e:	4660      	mov	r0, ip
 8010930:	f7ff ff9c 	bl	801086c <SecureElementAesEncrypt>
 8010934:	4605      	mov	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 8010936:	4b09      	ldr	r3, [pc, #36]	; (801095c <SecureElementSetKey+0x80>)
 8010938:	6818      	ldr	r0, [r3, #0]
 801093a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801093e:	3410      	adds	r4, #16
 8010940:	4420      	add	r0, r4
 8010942:	2210      	movs	r2, #16
 8010944:	4669      	mov	r1, sp
 8010946:	3001      	adds	r0, #1
 8010948:	f000 f8d1 	bl	8010aee <memcpy1>
                return retval;
 801094c:	e000      	b.n	8010950 <SecureElementSetKey+0x74>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 801094e:	2503      	movs	r5, #3
}
 8010950:	4628      	mov	r0, r5
 8010952:	b005      	add	sp, #20
 8010954:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8010956:	2502      	movs	r5, #2
 8010958:	e7fa      	b.n	8010950 <SecureElementSetKey+0x74>
 801095a:	bf00      	nop
 801095c:	20000e44 	.word	0x20000e44

08010960 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
    if( input == NULL )
 8010960:	b1d0      	cbz	r0, 8010998 <SecureElementDeriveAndStoreKey+0x38>
{
 8010962:	b510      	push	{r4, lr}
 8010964:	b084      	sub	sp, #16
 8010966:	4614      	mov	r4, r2
 8010968:	4684      	mov	ip, r0
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 801096a:	2a7f      	cmp	r2, #127	; 0x7f
 801096c:	d101      	bne.n	8010972 <SecureElementDeriveAndStoreKey+0x12>
    {
        if( rootKeyID != MC_ROOT_KEY )
 801096e:	2904      	cmp	r1, #4
 8010970:	d114      	bne.n	801099c <SecureElementDeriveAndStoreKey+0x3c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 8010972:	2300      	movs	r3, #0
 8010974:	9300      	str	r3, [sp, #0]
 8010976:	9301      	str	r3, [sp, #4]
 8010978:	9302      	str	r3, [sp, #8]
 801097a:	9303      	str	r3, [sp, #12]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 801097c:	466b      	mov	r3, sp
 801097e:	460a      	mov	r2, r1
 8010980:	2110      	movs	r1, #16
 8010982:	4660      	mov	r0, ip
 8010984:	f7ff ff72 	bl	801086c <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8010988:	b108      	cbz	r0, 801098e <SecureElementDeriveAndStoreKey+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 801098a:	b004      	add	sp, #16
 801098c:	bd10      	pop	{r4, pc}
    retval = SecureElementSetKey( targetKeyID, key );
 801098e:	4669      	mov	r1, sp
 8010990:	4620      	mov	r0, r4
 8010992:	f7ff ffa3 	bl	80108dc <SecureElementSetKey>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8010996:	e7f8      	b.n	801098a <SecureElementDeriveAndStoreKey+0x2a>
        return SECURE_ELEMENT_ERROR_NPE;
 8010998:	2002      	movs	r0, #2
}
 801099a:	4770      	bx	lr
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 801099c:	2003      	movs	r0, #3
 801099e:	e7f4      	b.n	801098a <SecureElementDeriveAndStoreKey+0x2a>

080109a0 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 80109a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109a4:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80109a8:	9d07      	ldr	r5, [sp, #28]
 80109aa:	9e08      	ldr	r6, [sp, #32]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 80109ac:	b37b      	cbz	r3, 8010a0e <SecureElementProcessJoinAccept+0x6e>
 80109ae:	4698      	mov	r8, r3
 80109b0:	b37d      	cbz	r5, 8010a12 <SecureElementProcessJoinAccept+0x72>
 80109b2:	b386      	cbz	r6, 8010a16 <SecureElementProcessJoinAccept+0x76>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 80109b4:	2c21      	cmp	r4, #33	; 0x21
 80109b6:	d830      	bhi.n	8010a1a <SecureElementProcessJoinAccept+0x7a>
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 80109b8:	b2a7      	uxth	r7, r4
 80109ba:	463a      	mov	r2, r7
 80109bc:	4619      	mov	r1, r3
 80109be:	4628      	mov	r0, r5
 80109c0:	f000 f895 	bl	8010aee <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 80109c4:	1e79      	subs	r1, r7, #1
 80109c6:	1c6b      	adds	r3, r5, #1
 80109c8:	2201      	movs	r2, #1
 80109ca:	b289      	uxth	r1, r1
 80109cc:	eb08 0002 	add.w	r0, r8, r2
 80109d0:	f7ff ff4c 	bl	801086c <SecureElementAesEncrypt>
 80109d4:	bb20      	cbnz	r0, 8010a20 <SecureElementProcessJoinAccept+0x80>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 80109d6:	7aeb      	ldrb	r3, [r5, #11]
 80109d8:	09db      	lsrs	r3, r3, #7
 80109da:	7033      	strb	r3, [r6, #0]

    uint32_t mic = 0;

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 80109dc:	442c      	add	r4, r5
 80109de:	f814 2c04 	ldrb.w	r2, [r4, #-4]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 80109e2:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 80109e6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 80109ea:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 80109ee:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 80109f2:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80109f6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 80109fa:	b99b      	cbnz	r3, 8010a24 <SecureElementProcessJoinAccept+0x84>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 80109fc:	1f39      	subs	r1, r7, #4
 80109fe:	2301      	movs	r3, #1
 8010a00:	b289      	uxth	r1, r1
 8010a02:	4628      	mov	r0, r5
 8010a04:	f7ff ff1c 	bl	8010840 <SecureElementVerifyAesCmac>
 8010a08:	b140      	cbz	r0, 8010a1c <SecureElementProcessJoinAccept+0x7c>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 8010a0a:	2001      	movs	r0, #1
 8010a0c:	e006      	b.n	8010a1c <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_NPE;
 8010a0e:	2002      	movs	r0, #2
 8010a10:	e004      	b.n	8010a1c <SecureElementProcessJoinAccept+0x7c>
 8010a12:	2002      	movs	r0, #2
 8010a14:	e002      	b.n	8010a1c <SecureElementProcessJoinAccept+0x7c>
 8010a16:	2002      	movs	r0, #2
 8010a18:	e000      	b.n	8010a1c <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8010a1a:	2005      	movs	r0, #5
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 8010a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 8010a20:	2007      	movs	r0, #7
 8010a22:	e7fb      	b.n	8010a1c <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 8010a24:	2004      	movs	r0, #4
 8010a26:	e7f9      	b.n	8010a1c <SecureElementProcessJoinAccept+0x7c>

08010a28 <SecureElementRandomNumber>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
    if( randomNum == NULL )
 8010a28:	b138      	cbz	r0, 8010a3a <SecureElementRandomNumber+0x12>
{
 8010a2a:	b510      	push	{r4, lr}
 8010a2c:	4604      	mov	r4, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    *randomNum = Radio.Random();
 8010a2e:	4b04      	ldr	r3, [pc, #16]	; (8010a40 <SecureElementRandomNumber+0x18>)
 8010a30:	695b      	ldr	r3, [r3, #20]
 8010a32:	4798      	blx	r3
 8010a34:	6020      	str	r0, [r4, #0]
    return SECURE_ELEMENT_SUCCESS;
 8010a36:	2000      	movs	r0, #0
}
 8010a38:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8010a3a:	2002      	movs	r0, #2
}
 8010a3c:	4770      	bx	lr
 8010a3e:	bf00      	nop
 8010a40:	08014cbc 	.word	0x08014cbc

08010a44 <SecureElementSetDevEui>:
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
    if( devEui == NULL )
 8010a44:	b140      	cbz	r0, 8010a58 <SecureElementSetDevEui+0x14>
{
 8010a46:	b508      	push	{r3, lr}
 8010a48:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 8010a4a:	2208      	movs	r2, #8
 8010a4c:	4b03      	ldr	r3, [pc, #12]	; (8010a5c <SecureElementSetDevEui+0x18>)
 8010a4e:	6818      	ldr	r0, [r3, #0]
 8010a50:	f000 f84d 	bl	8010aee <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8010a54:	2000      	movs	r0, #0
}
 8010a56:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8010a58:	2002      	movs	r0, #2
}
 8010a5a:	4770      	bx	lr
 8010a5c:	20000e44 	.word	0x20000e44

08010a60 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
    return SeNvm->DevEui;
}
 8010a60:	4b01      	ldr	r3, [pc, #4]	; (8010a68 <SecureElementGetDevEui+0x8>)
 8010a62:	6818      	ldr	r0, [r3, #0]
 8010a64:	4770      	bx	lr
 8010a66:	bf00      	nop
 8010a68:	20000e44 	.word	0x20000e44

08010a6c <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
    if( joinEui == NULL )
 8010a6c:	b148      	cbz	r0, 8010a82 <SecureElementSetJoinEui+0x16>
{
 8010a6e:	b508      	push	{r3, lr}
 8010a70:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 8010a72:	4b05      	ldr	r3, [pc, #20]	; (8010a88 <SecureElementSetJoinEui+0x1c>)
 8010a74:	6818      	ldr	r0, [r3, #0]
 8010a76:	2208      	movs	r2, #8
 8010a78:	4410      	add	r0, r2
 8010a7a:	f000 f838 	bl	8010aee <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8010a7e:	2000      	movs	r0, #0
}
 8010a80:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8010a82:	2002      	movs	r0, #2
}
 8010a84:	4770      	bx	lr
 8010a86:	bf00      	nop
 8010a88:	20000e44 	.word	0x20000e44

08010a8c <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
    return SeNvm->JoinEui;
 8010a8c:	4b01      	ldr	r3, [pc, #4]	; (8010a94 <SecureElementGetJoinEui+0x8>)
 8010a8e:	6818      	ldr	r0, [r3, #0]
}
 8010a90:	3008      	adds	r0, #8
 8010a92:	4770      	bx	lr
 8010a94:	20000e44 	.word	0x20000e44

08010a98 <rand1>:

static int32_t rand1( void );

static int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8010a98:	4b09      	ldr	r3, [pc, #36]	; (8010ac0 <rand1+0x28>)
 8010a9a:	681a      	ldr	r2, [r3, #0]
 8010a9c:	4909      	ldr	r1, [pc, #36]	; (8010ac4 <rand1+0x2c>)
 8010a9e:	f243 0039 	movw	r0, #12345	; 0x3039
 8010aa2:	fb01 0002 	mla	r0, r1, r2, r0
 8010aa6:	6018      	str	r0, [r3, #0]
 8010aa8:	2303      	movs	r3, #3
 8010aaa:	fba3 2300 	umull	r2, r3, r3, r0
 8010aae:	1ac2      	subs	r2, r0, r3
 8010ab0:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8010ab4:	0f9b      	lsrs	r3, r3, #30
 8010ab6:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
 8010aba:	1ac0      	subs	r0, r0, r3
 8010abc:	4770      	bx	lr
 8010abe:	bf00      	nop
 8010ac0:	20000114 	.word	0x20000114
 8010ac4:	41c64e6d 	.word	0x41c64e6d

08010ac8 <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 8010ac8:	4b01      	ldr	r3, [pc, #4]	; (8010ad0 <srand1+0x8>)
 8010aca:	6018      	str	r0, [r3, #0]
}
 8010acc:	4770      	bx	lr
 8010ace:	bf00      	nop
 8010ad0:	20000114 	.word	0x20000114

08010ad4 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8010ad4:	b538      	push	{r3, r4, r5, lr}
 8010ad6:	4605      	mov	r5, r0
 8010ad8:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8010ada:	f7ff ffdd 	bl	8010a98 <rand1>
 8010ade:	1b61      	subs	r1, r4, r5
 8010ae0:	3101      	adds	r1, #1
 8010ae2:	fb90 f3f1 	sdiv	r3, r0, r1
 8010ae6:	fb01 0013 	mls	r0, r1, r3, r0
}
 8010aea:	4428      	add	r0, r5
 8010aec:	bd38      	pop	{r3, r4, r5, pc}

08010aee <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 8010aee:	e004      	b.n	8010afa <memcpy1+0xc>
    {
        *dst++ = *src++;
 8010af0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010af4:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 8010af8:	461a      	mov	r2, r3
 8010afa:	1e53      	subs	r3, r2, #1
 8010afc:	b29b      	uxth	r3, r3
 8010afe:	2a00      	cmp	r2, #0
 8010b00:	d1f6      	bne.n	8010af0 <memcpy1+0x2>
    }
}
 8010b02:	4770      	bx	lr

08010b04 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 8010b04:	1e53      	subs	r3, r2, #1
 8010b06:	4418      	add	r0, r3
    while( size-- )
 8010b08:	e004      	b.n	8010b14 <memcpyr+0x10>
    {
        *dst-- = *src++;
 8010b0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010b0e:	f800 2901 	strb.w	r2, [r0], #-1
    while( size-- )
 8010b12:	461a      	mov	r2, r3
 8010b14:	1e53      	subs	r3, r2, #1
 8010b16:	b29b      	uxth	r3, r3
 8010b18:	2a00      	cmp	r2, #0
 8010b1a:	d1f6      	bne.n	8010b0a <memcpyr+0x6>
    }
}
 8010b1c:	4770      	bx	lr

08010b1e <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 8010b1e:	e002      	b.n	8010b26 <memset1+0x8>
    {
        *dst++ = value;
 8010b20:	f800 1b01 	strb.w	r1, [r0], #1
    while( size-- )
 8010b24:	461a      	mov	r2, r3
 8010b26:	1e53      	subs	r3, r2, #1
 8010b28:	b29b      	uxth	r3, r3
 8010b2a:	2a00      	cmp	r2, #0
 8010b2c:	d1f8      	bne.n	8010b20 <memset1+0x2>
    }
}
 8010b2e:	4770      	bx	lr

08010b30 <Crc32>:
uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 8010b30:	b1f0      	cbz	r0, 8010b70 <Crc32+0x40>
{
 8010b32:	b510      	push	{r4, lr}
 8010b34:	4604      	mov	r4, r0
    {
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
 8010b36:	f04f 0e00 	mov.w	lr, #0
    uint32_t crc = 0xFFFFFFFF;
 8010b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8010b3e:	e00e      	b.n	8010b5e <Crc32+0x2e>
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8010b40:	f340 0c00 	sbfx	ip, r0, #0, #1
 8010b44:	4a0b      	ldr	r2, [pc, #44]	; (8010b74 <Crc32+0x44>)
 8010b46:	ea0c 0202 	and.w	r2, ip, r2
 8010b4a:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
 8010b4e:	3301      	adds	r3, #1
 8010b50:	b29b      	uxth	r3, r3
 8010b52:	2b07      	cmp	r3, #7
 8010b54:	d9f4      	bls.n	8010b40 <Crc32+0x10>
    for( uint16_t i = 0; i < length; ++i )
 8010b56:	f10e 0e01 	add.w	lr, lr, #1
 8010b5a:	fa1f fe8e 	uxth.w	lr, lr
 8010b5e:	458e      	cmp	lr, r1
 8010b60:	d204      	bcs.n	8010b6c <Crc32+0x3c>
        crc ^= ( uint32_t )buffer[i];
 8010b62:	f814 300e 	ldrb.w	r3, [r4, lr]
 8010b66:	4058      	eors	r0, r3
        for( uint16_t i = 0; i < 8; i++ )
 8010b68:	2300      	movs	r3, #0
 8010b6a:	e7f2      	b.n	8010b52 <Crc32+0x22>
        }
    }

    return ~crc;
 8010b6c:	43c0      	mvns	r0, r0
}
 8010b6e:	bd10      	pop	{r4, pc}
        return 0;
 8010b70:	2000      	movs	r0, #0
}
 8010b72:	4770      	bx	lr
 8010b74:	edb88320 	.word	0xedb88320

08010b78 <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 8010b78:	2001      	movs	r0, #1
 8010b7a:	4770      	bx	lr

08010b7c <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 8010b7c:	280a      	cmp	r0, #10
 8010b7e:	d807      	bhi.n	8010b90 <RadioGetLoRaBandwidthInHz+0x14>
 8010b80:	e8df f000 	tbb	[pc, r0]
 8010b84:	17110b20 	.word	0x17110b20
 8010b88:	061e1c1a 	.word	0x061e1c1a
 8010b8c:	0e08      	.short	0x0e08
 8010b8e:	14          	.byte	0x14
 8010b8f:	00          	.byte	0x00
 8010b90:	2000      	movs	r0, #0
 8010b92:	4770      	bx	lr
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
        break;
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8010b94:	f642 00b1 	movw	r0, #10417	; 0x28b1
        break;
 8010b98:	4770      	bx	lr
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8010b9a:	f643 5009 	movw	r0, #15625	; 0x3d09
        break;
 8010b9e:	4770      	bx	lr
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8010ba0:	f245 1061 	movw	r0, #20833	; 0x5161
        break;
 8010ba4:	4770      	bx	lr
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8010ba6:	f647 2012 	movw	r0, #31250	; 0x7a12
        break;
 8010baa:	4770      	bx	lr
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8010bac:	f24a 20c3 	movw	r0, #41667	; 0xa2c3
        break;
 8010bb0:	4770      	bx	lr
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8010bb2:	f24f 4024 	movw	r0, #62500	; 0xf424
        break;
 8010bb6:	4770      	bx	lr
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8010bb8:	4804      	ldr	r0, [pc, #16]	; (8010bcc <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 8010bba:	4770      	bx	lr
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8010bbc:	4804      	ldr	r0, [pc, #16]	; (8010bd0 <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 8010bbe:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8010bc0:	4804      	ldr	r0, [pc, #16]	; (8010bd4 <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 8010bc2:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 8010bc4:	f641 6084 	movw	r0, #7812	; 0x1e84
    }

    return bandwidthInHz;
}
 8010bc8:	4770      	bx	lr
 8010bca:	bf00      	nop
 8010bcc:	0001e848 	.word	0x0001e848
 8010bd0:	0003d090 	.word	0x0003d090
 8010bd4:	0007a120 	.word	0x0007a120

08010bd8 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8010bd8:	f89d 1004 	ldrb.w	r1, [sp, #4]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 8010bdc:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8010bde:	b953      	cbnz	r3, 8010bf6 <RadioGetGfskTimeOnAirNumerator+0x1e>
 8010be0:	2008      	movs	r0, #8
    return ( preambleLen << 3 ) +
 8010be2:	4402      	add	r2, r0
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8010be4:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8010be6:	b141      	cbz	r1, 8010bfa <RadioGetGfskTimeOnAirNumerator+0x22>
 8010be8:	2302      	movs	r3, #2
 8010bea:	f89d 0000 	ldrb.w	r0, [sp]
 8010bee:	4418      	add	r0, r3
    /* ST_WORKAROUND_END */
}
 8010bf0:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8010bf4:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8010bf6:	2000      	movs	r0, #0
 8010bf8:	e7f3      	b.n	8010be2 <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	e7f5      	b.n	8010bea <RadioGetGfskTimeOnAirNumerator+0x12>

08010bfe <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8010bfe:	b570      	push	{r4, r5, r6, lr}
 8010c00:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8010c04:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 8010c08:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8010c0a:	f1a1 0c05 	sub.w	ip, r1, #5
 8010c0e:	f1bc 0f01 	cmp.w	ip, #1
 8010c12:	d932      	bls.n	8010c7a <RadioGetLoRaTimeOnAirNumerator+0x7c>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8010c14:	b918      	cbnz	r0, 8010c1e <RadioGetLoRaTimeOnAirNumerator+0x20>
 8010c16:	f1a1 060b 	sub.w	r6, r1, #11
 8010c1a:	2e01      	cmp	r6, #1
 8010c1c:	d935      	bls.n	8010c8a <RadioGetLoRaTimeOnAirNumerator+0x8c>
 8010c1e:	2801      	cmp	r0, #1
 8010c20:	d02f      	beq.n	8010c82 <RadioGetLoRaTimeOnAirNumerator+0x84>
    bool    lowDatareOptimize = false;
 8010c22:	2600      	movs	r6, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8010c24:	f89d e014 	ldrb.w	lr, [sp, #20]
 8010c28:	ea4f 0ece 	mov.w	lr, lr, lsl #3
                            ( crcOn ? 16 : 0 ) -
 8010c2c:	b38d      	cbz	r5, 8010c92 <RadioGetLoRaTimeOnAirNumerator+0x94>
 8010c2e:	f04f 0c10 	mov.w	ip, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8010c32:	44e6      	add	lr, ip
                            ( 4 * datarate ) +
 8010c34:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 8010c36:	ebae 0e81 	sub.w	lr, lr, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 8010c3a:	b36c      	cbz	r4, 8010c98 <RadioGetLoRaTimeOnAirNumerator+0x9a>
 8010c3c:	f04f 0c00 	mov.w	ip, #0
                            ( 4 * datarate ) +
 8010c40:	44f4      	add	ip, lr

    if( datarate <= 6 )
 8010c42:	2906      	cmp	r1, #6
 8010c44:	d904      	bls.n	8010c50 <RadioGetLoRaTimeOnAirNumerator+0x52>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 8010c46:	f10c 0c08 	add.w	ip, ip, #8

        if( lowDatareOptimize == true )
 8010c4a:	b10e      	cbz	r6, 8010c50 <RadioGetLoRaTimeOnAirNumerator+0x52>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8010c4c:	1e88      	subs	r0, r1, #2
 8010c4e:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 8010c50:	f1bc 0f00 	cmp.w	ip, #0
 8010c54:	db23      	blt.n	8010c9e <RadioGetLoRaTimeOnAirNumerator+0xa0>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8010c56:	4484      	add	ip, r0
 8010c58:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010c5c:	fb9c fcf0 	sdiv	ip, ip, r0
 8010c60:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 8010c64:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 8010c68:	2906      	cmp	r1, #6
 8010c6a:	d801      	bhi.n	8010c70 <RadioGetLoRaTimeOnAirNumerator+0x72>
    {
        intermediate += 2;
 8010c6c:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8010c70:	0080      	lsls	r0, r0, #2
 8010c72:	3001      	adds	r0, #1
 8010c74:	3902      	subs	r1, #2
}
 8010c76:	4088      	lsls	r0, r1
 8010c78:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 8010c7a:	2b0b      	cmp	r3, #11
 8010c7c:	d8ca      	bhi.n	8010c14 <RadioGetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 8010c7e:	230c      	movs	r3, #12
 8010c80:	e7c8      	b.n	8010c14 <RadioGetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8010c82:	290c      	cmp	r1, #12
 8010c84:	d003      	beq.n	8010c8e <RadioGetLoRaTimeOnAirNumerator+0x90>
    bool    lowDatareOptimize = false;
 8010c86:	2600      	movs	r6, #0
 8010c88:	e7cc      	b.n	8010c24 <RadioGetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 8010c8a:	2601      	movs	r6, #1
 8010c8c:	e7ca      	b.n	8010c24 <RadioGetLoRaTimeOnAirNumerator+0x26>
 8010c8e:	2601      	movs	r6, #1
 8010c90:	e7c8      	b.n	8010c24 <RadioGetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 8010c92:	f04f 0c00 	mov.w	ip, #0
 8010c96:	e7cc      	b.n	8010c32 <RadioGetLoRaTimeOnAirNumerator+0x34>
                            ( fixLen ? 0 : 20 );
 8010c98:	f04f 0c14 	mov.w	ip, #20
 8010c9c:	e7d0      	b.n	8010c40 <RadioGetLoRaTimeOnAirNumerator+0x42>
        ceilNumerator = 0;
 8010c9e:	f04f 0c00 	mov.w	ip, #0
 8010ca2:	e7d8      	b.n	8010c56 <RadioGetLoRaTimeOnAirNumerator+0x58>

08010ca4 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8010ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ca6:	b085      	sub	sp, #20
 8010ca8:	460e      	mov	r6, r1
 8010caa:	4615      	mov	r5, r2
 8010cac:	4619      	mov	r1, r3
 8010cae:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8010cb2:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8010cb6:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8010cba:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 8010cbe:	b148      	cbz	r0, 8010cd4 <RadioTimeOnAir+0x30>
 8010cc0:	2801      	cmp	r0, #1
 8010cc2:	d012      	beq.n	8010cea <RadioTimeOnAir+0x46>
 8010cc4:	2501      	movs	r5, #1
 8010cc6:	2400      	movs	r4, #0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 8010cc8:	442c      	add	r4, r5
 8010cca:	1e60      	subs	r0, r4, #1
}
 8010ccc:	fbb0 f0f5 	udiv	r0, r0, r5
 8010cd0:	b005      	add	sp, #20
 8010cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8010cd4:	f8cd c004 	str.w	ip, [sp, #4]
 8010cd8:	9700      	str	r7, [sp, #0]
 8010cda:	4628      	mov	r0, r5
 8010cdc:	f7ff ff7c 	bl	8010bd8 <RadioGetGfskTimeOnAirNumerator>
 8010ce0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8010ce4:	fb00 f404 	mul.w	r4, r0, r4
        break;
 8010ce8:	e7ee      	b.n	8010cc8 <RadioTimeOnAir+0x24>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8010cea:	f8cd c008 	str.w	ip, [sp, #8]
 8010cee:	9701      	str	r7, [sp, #4]
 8010cf0:	9300      	str	r3, [sp, #0]
 8010cf2:	4613      	mov	r3, r2
 8010cf4:	460a      	mov	r2, r1
 8010cf6:	4629      	mov	r1, r5
 8010cf8:	4630      	mov	r0, r6
 8010cfa:	f7ff ff80 	bl	8010bfe <RadioGetLoRaTimeOnAirNumerator>
 8010cfe:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8010d02:	fb00 f404 	mul.w	r4, r0, r4
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8010d06:	4b03      	ldr	r3, [pc, #12]	; (8010d14 <RadioTimeOnAir+0x70>)
 8010d08:	5d98      	ldrb	r0, [r3, r6]
 8010d0a:	f7ff ff37 	bl	8010b7c <RadioGetLoRaBandwidthInHz>
 8010d0e:	4605      	mov	r5, r0
        break;
 8010d10:	e7da      	b.n	8010cc8 <RadioTimeOnAir+0x24>
 8010d12:	bf00      	nop
 8010d14:	08014cb8 	.word	0x08014cb8

08010d18 <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 8010d18:	b508      	push	{r3, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8010d1a:	4b05      	ldr	r3, [pc, #20]	; (8010d30 <RadioOnTxTimeoutProcess+0x18>)
 8010d1c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8010d20:	629a      	str	r2, [r3, #40]	; 0x28
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8010d22:	4b04      	ldr	r3, [pc, #16]	; (8010d34 <RadioOnTxTimeoutProcess+0x1c>)
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	b113      	cbz	r3, 8010d2e <RadioOnTxTimeoutProcess+0x16>
 8010d28:	685b      	ldr	r3, [r3, #4]
 8010d2a:	b103      	cbz	r3, 8010d2e <RadioOnTxTimeoutProcess+0x16>
    {
        RadioEvents->TxTimeout( );
 8010d2c:	4798      	blx	r3
    }
}
 8010d2e:	bd08      	pop	{r3, pc}
 8010d30:	48000400 	.word	0x48000400
 8010d34:	20000f48 	.word	0x20000f48

08010d38 <RadioOnTxTimeoutIrq>:
{
 8010d38:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 8010d3a:	f7ff ffed 	bl	8010d18 <RadioOnTxTimeoutProcess>
}
 8010d3e:	bd08      	pop	{r3, pc}

08010d40 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8010d40:	b508      	push	{r3, lr}
 8010d42:	4b05      	ldr	r3, [pc, #20]	; (8010d58 <RadioOnRxTimeoutProcess+0x18>)
 8010d44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010d48:	629a      	str	r2, [r3, #40]	; 0x28
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8010d4a:	4b04      	ldr	r3, [pc, #16]	; (8010d5c <RadioOnRxTimeoutProcess+0x1c>)
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	b113      	cbz	r3, 8010d56 <RadioOnRxTimeoutProcess+0x16>
 8010d50:	68db      	ldr	r3, [r3, #12]
 8010d52:	b103      	cbz	r3, 8010d56 <RadioOnRxTimeoutProcess+0x16>
    {
        RadioEvents->RxTimeout( );
 8010d54:	4798      	blx	r3
    }
}
 8010d56:	bd08      	pop	{r3, pc}
 8010d58:	48000400 	.word	0x48000400
 8010d5c:	20000f48 	.word	0x20000f48

08010d60 <RadioOnRxTimeoutIrq>:
{
 8010d60:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 8010d62:	f7ff ffed 	bl	8010d40 <RadioOnRxTimeoutProcess>
}
 8010d66:	bd08      	pop	{r3, pc}

08010d68 <RadioSetRxGenericConfig>:
    }
    return status;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8010d68:	f04f 30ff 	mov.w	r0, #4294967295
 8010d6c:	4770      	bx	lr

08010d6e <RadioSetTxGenericConfig>:
    SubgRf.TxTimeout = timeout;
    return 0;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8010d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8010d72:	4770      	bx	lr

08010d74 <RadioTxCw>:
{
 8010d74:	b508      	push	{r3, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8010d76:	f001 fbab 	bl	80124d0 <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8010d7a:	2101      	movs	r1, #1
 8010d7c:	f001 fb94 	bl	80124a8 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8010d80:	f000 feac 	bl	8011adc <SUBGRF_SetTxContinuousWave>
}
 8010d84:	bd08      	pop	{r3, pc}
	...

08010d88 <RadioSetRxDutyCycle>:
{
 8010d88:	b570      	push	{r4, r5, r6, lr}
 8010d8a:	4604      	mov	r4, r0
 8010d8c:	460d      	mov	r5, r1
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8010d8e:	eb01 0340 	add.w	r3, r1, r0, lsl #1
 8010d92:	4e09      	ldr	r6, [pc, #36]	; (8010db8 <RadioSetRxDutyCycle+0x30>)
 8010d94:	65b3      	str	r3, [r6, #88]	; 0x58
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8010d96:	2300      	movs	r3, #0
 8010d98:	461a      	mov	r2, r3
 8010d9a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010d9e:	4608      	mov	r0, r1
 8010da0:	f000 ff47 	bl	8011c32 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8010da4:	2100      	movs	r1, #0
 8010da6:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 8010daa:	f001 fb7d 	bl	80124a8 <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8010dae:	4629      	mov	r1, r5
 8010db0:	4620      	mov	r0, r4
 8010db2:	f000 fe63 	bl	8011a7c <SUBGRF_SetRxDutyCycle>
}
 8010db6:	bd70      	pop	{r4, r5, r6, pc}
 8010db8:	20000f64 	.word	0x20000f64

08010dbc <RadioRxBoosted>:
{
 8010dbc:	b538      	push	{r3, r4, r5, lr}
 8010dbe:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init() )
 8010dc0:	f001 fc57 	bl	8012672 <RFW_Is_Init>
 8010dc4:	2801      	cmp	r0, #1
 8010dc6:	d019      	beq.n	8010dfc <RadioRxBoosted+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8010dc8:	2300      	movs	r3, #0
 8010dca:	461a      	mov	r2, r3
 8010dcc:	f240 2162 	movw	r1, #610	; 0x262
 8010dd0:	4608      	mov	r0, r1
 8010dd2:	f000 ff2e 	bl	8011c32 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 8010dd6:	b9a4      	cbnz	r4, 8010e02 <RadioRxBoosted+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8010dd8:	4c11      	ldr	r4, [pc, #68]	; (8010e20 <RadioRxBoosted+0x64>)
 8010dda:	2100      	movs	r1, #0
 8010ddc:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 8010dde:	4b11      	ldr	r3, [pc, #68]	; (8010e24 <RadioRxBoosted+0x68>)
 8010de0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010de4:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8010de6:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 8010dea:	f001 fb5d 	bl	80124a8 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 8010dee:	7863      	ldrb	r3, [r4, #1]
 8010df0:	b183      	cbz	r3, 8010e14 <RadioRxBoosted+0x58>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8010df2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8010df6:	f000 ffef 	bl	8011dd8 <SUBGRF_SetRxBoosted>
}
 8010dfa:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit();
 8010dfc:	f001 fc41 	bl	8012682 <RFW_ReceiveInit>
 8010e00:	e7e9      	b.n	8010dd6 <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8010e02:	4d09      	ldr	r5, [pc, #36]	; (8010e28 <RadioRxBoosted+0x6c>)
 8010e04:	4621      	mov	r1, r4
 8010e06:	4628      	mov	r0, r5
 8010e08:	f002 f90e 	bl	8013028 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8010e0c:	4628      	mov	r0, r5
 8010e0e:	f002 f8c5 	bl	8012f9c <UTIL_TIMER_Start>
 8010e12:	e7e1      	b.n	8010dd8 <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8010e14:	4b02      	ldr	r3, [pc, #8]	; (8010e20 <RadioRxBoosted+0x64>)
 8010e16:	6898      	ldr	r0, [r3, #8]
 8010e18:	0180      	lsls	r0, r0, #6
 8010e1a:	f000 ffdd 	bl	8011dd8 <SUBGRF_SetRxBoosted>
}
 8010e1e:	e7ec      	b.n	8010dfa <RadioRxBoosted+0x3e>
 8010e20:	20000f64 	.word	0x20000f64
 8010e24:	48000400 	.word	0x48000400
 8010e28:	20000f4c 	.word	0x20000f4c

08010e2c <RadioStandby>:
{
 8010e2c:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 8010e2e:	2000      	movs	r0, #0
 8010e30:	f000 fdd6 	bl	80119e0 <SUBGRF_SetStandby>
}
 8010e34:	bd08      	pop	{r3, pc}

08010e36 <RadioWrite>:
{
 8010e36:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister( addr, data );
 8010e38:	f000 ffbe 	bl	8011db8 <SUBGRF_WriteRegister>
}
 8010e3c:	bd08      	pop	{r3, pc}
	...

08010e40 <RadioTxPrbs>:
{
 8010e40:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8010e42:	2101      	movs	r1, #1
 8010e44:	4b07      	ldr	r3, [pc, #28]	; (8010e64 <RadioTxPrbs+0x24>)
 8010e46:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 8010e4a:	f001 fb2d 	bl	80124a8 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8010e4e:	212d      	movs	r1, #45	; 0x2d
 8010e50:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8010e54:	f7ff ffef 	bl	8010e36 <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 8010e58:	f000 fe47 	bl	8011aea <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8010e5c:	4802      	ldr	r0, [pc, #8]	; (8010e68 <RadioTxPrbs+0x28>)
 8010e5e:	f000 fdd9 	bl	8011a14 <SUBGRF_SetTx>
}
 8010e62:	bd08      	pop	{r3, pc}
 8010e64:	20000f64 	.word	0x20000f64
 8010e68:	000fffff 	.word	0x000fffff

08010e6c <RadioRead>:
{
 8010e6c:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister( addr );
 8010e6e:	f001 f895 	bl	8011f9c <SUBGRF_ReadRegister>
}
 8010e72:	bd08      	pop	{r3, pc}

08010e74 <RadioGetStatus>:
{
 8010e74:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 8010e76:	f000 fdad 	bl	80119d4 <SUBGRF_GetOperatingMode>
 8010e7a:	2805      	cmp	r0, #5
 8010e7c:	d007      	beq.n	8010e8e <RadioGetStatus+0x1a>
 8010e7e:	2807      	cmp	r0, #7
 8010e80:	d007      	beq.n	8010e92 <RadioGetStatus+0x1e>
 8010e82:	2804      	cmp	r0, #4
 8010e84:	d001      	beq.n	8010e8a <RadioGetStatus+0x16>
            return RF_IDLE;
 8010e86:	2000      	movs	r0, #0
}
 8010e88:	bd08      	pop	{r3, pc}
    switch( SUBGRF_GetOperatingMode( ) )
 8010e8a:	2002      	movs	r0, #2
 8010e8c:	e7fc      	b.n	8010e88 <RadioGetStatus+0x14>
            return RF_RX_RUNNING;
 8010e8e:	2001      	movs	r0, #1
 8010e90:	e7fa      	b.n	8010e88 <RadioGetStatus+0x14>
            return RF_CAD;
 8010e92:	2003      	movs	r0, #3
 8010e94:	e7f8      	b.n	8010e88 <RadioGetStatus+0x14>
	...

08010e98 <RadioIrqProcess>:
{
 8010e98:	b530      	push	{r4, r5, lr}
 8010e9a:	b083      	sub	sp, #12
    uint8_t size = 0;
 8010e9c:	2300      	movs	r3, #0
 8010e9e:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 8010ea2:	9300      	str	r3, [sp, #0]
    switch( SubgRf.RadioIrq )
 8010ea4:	4ba5      	ldr	r3, [pc, #660]	; (801113c <RadioIrqProcess+0x2a4>)
 8010ea6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8010eaa:	2b20      	cmp	r3, #32
 8010eac:	d829      	bhi.n	8010f02 <RadioIrqProcess+0x6a>
 8010eae:	b21a      	sxth	r2, r3
 8010eb0:	2a00      	cmp	r2, #0
 8010eb2:	f000 8140 	beq.w	8011136 <RadioIrqProcess+0x29e>
 8010eb6:	3b01      	subs	r3, #1
 8010eb8:	2b1f      	cmp	r3, #31
 8010eba:	f200 813c 	bhi.w	8011136 <RadioIrqProcess+0x29e>
 8010ebe:	e8df f013 	tbh	[pc, r3, lsl #1]
 8010ec2:	0063      	.short	0x0063
 8010ec4:	013a007f 	.word	0x013a007f
 8010ec8:	013a00f7 	.word	0x013a00f7
 8010ecc:	013a013a 	.word	0x013a013a
 8010ed0:	013a0127 	.word	0x013a0127
 8010ed4:	013a013a 	.word	0x013a013a
 8010ed8:	013a013a 	.word	0x013a013a
 8010edc:	013a013a 	.word	0x013a013a
 8010ee0:	013a0134 	.word	0x013a0134
 8010ee4:	013a013a 	.word	0x013a013a
 8010ee8:	013a013a 	.word	0x013a013a
 8010eec:	013a013a 	.word	0x013a013a
 8010ef0:	013a013a 	.word	0x013a013a
 8010ef4:	013a013a 	.word	0x013a013a
 8010ef8:	013a013a 	.word	0x013a013a
 8010efc:	013a013a 	.word	0x013a013a
 8010f00:	0155      	.short	0x0155
 8010f02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010f06:	f000 80b3 	beq.w	8011070 <RadioIrqProcess+0x1d8>
 8010f0a:	d928      	bls.n	8010f5e <RadioIrqProcess+0xc6>
 8010f0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010f10:	f040 8111 	bne.w	8011136 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8010f14:	4b8a      	ldr	r3, [pc, #552]	; (8011140 <RadioIrqProcess+0x2a8>)
 8010f16:	2201      	movs	r2, #1
 8010f18:	2100      	movs	r1, #0
 8010f1a:	2002      	movs	r0, #2
 8010f1c:	f001 fc90 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8010f20:	f000 fd58 	bl	80119d4 <SUBGRF_GetOperatingMode>
 8010f24:	2804      	cmp	r0, #4
 8010f26:	f000 80b0 	beq.w	801108a <RadioIrqProcess+0x1f2>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8010f2a:	f000 fd53 	bl	80119d4 <SUBGRF_GetOperatingMode>
 8010f2e:	2805      	cmp	r0, #5
 8010f30:	f040 8101 	bne.w	8011136 <RadioIrqProcess+0x29e>
  WRITE_REG(GPIOx->BRR, PinMask);
 8010f34:	4b83      	ldr	r3, [pc, #524]	; (8011144 <RadioIrqProcess+0x2ac>)
 8010f36:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010f3a:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &RxTimeoutTimer );
 8010f3c:	4882      	ldr	r0, [pc, #520]	; (8011148 <RadioIrqProcess+0x2b0>)
 8010f3e:	f001 ffd3 	bl	8012ee8 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8010f42:	2000      	movs	r0, #0
 8010f44:	f000 fd4c 	bl	80119e0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8010f48:	4b80      	ldr	r3, [pc, #512]	; (801114c <RadioIrqProcess+0x2b4>)
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	f000 80f2 	beq.w	8011136 <RadioIrqProcess+0x29e>
 8010f52:	68db      	ldr	r3, [r3, #12]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	f000 80ee 	beq.w	8011136 <RadioIrqProcess+0x29e>
                RadioEvents->RxTimeout( );
 8010f5a:	4798      	blx	r3
 8010f5c:	e0eb      	b.n	8011136 <RadioIrqProcess+0x29e>
    switch( SubgRf.RadioIrq )
 8010f5e:	2b40      	cmp	r3, #64	; 0x40
 8010f60:	f000 811d 	beq.w	801119e <RadioIrqProcess+0x306>
 8010f64:	2b80      	cmp	r3, #128	; 0x80
 8010f66:	f040 80e6 	bne.w	8011136 <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 8010f6a:	2000      	movs	r0, #0
 8010f6c:	f000 fd38 	bl	80119e0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8010f70:	4b76      	ldr	r3, [pc, #472]	; (801114c <RadioIrqProcess+0x2b4>)
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	f000 80de 	beq.w	8011136 <RadioIrqProcess+0x29e>
 8010f7a:	699b      	ldr	r3, [r3, #24]
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	f000 80da 	beq.w	8011136 <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( false );
 8010f82:	2000      	movs	r0, #0
 8010f84:	4798      	blx	r3
 8010f86:	e0d6      	b.n	8011136 <RadioIrqProcess+0x29e>
 8010f88:	4b6e      	ldr	r3, [pc, #440]	; (8011144 <RadioIrqProcess+0x2ac>)
 8010f8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8010f8e:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &TxTimeoutTimer );
 8010f90:	486f      	ldr	r0, [pc, #444]	; (8011150 <RadioIrqProcess+0x2b8>)
 8010f92:	f001 ffa9 	bl	8012ee8 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8010f96:	2000      	movs	r0, #0
 8010f98:	f000 fd22 	bl	80119e0 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8010f9c:	f001 fb6b 	bl	8012676 <RFW_Is_LongPacketModeEnabled>
 8010fa0:	2801      	cmp	r0, #1
 8010fa2:	d00a      	beq.n	8010fba <RadioIrqProcess+0x122>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8010fa4:	4b69      	ldr	r3, [pc, #420]	; (801114c <RadioIrqProcess+0x2b4>)
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	f000 80c4 	beq.w	8011136 <RadioIrqProcess+0x29e>
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	f000 80c0 	beq.w	8011136 <RadioIrqProcess+0x29e>
            RadioEvents->TxDone( );
 8010fb6:	4798      	blx	r3
 8010fb8:	e0bd      	b.n	8011136 <RadioIrqProcess+0x29e>
            RFW_DeInit_TxLongPacket( );
 8010fba:	f001 fb65 	bl	8012688 <RFW_DeInit_TxLongPacket>
 8010fbe:	e7f1      	b.n	8010fa4 <RadioIrqProcess+0x10c>
 8010fc0:	4b60      	ldr	r3, [pc, #384]	; (8011144 <RadioIrqProcess+0x2ac>)
 8010fc2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010fc6:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &RxTimeoutTimer );
 8010fc8:	485f      	ldr	r0, [pc, #380]	; (8011148 <RadioIrqProcess+0x2b0>)
 8010fca:	f001 ff8d 	bl	8012ee8 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8010fce:	4b5b      	ldr	r3, [pc, #364]	; (801113c <RadioIrqProcess+0x2a4>)
 8010fd0:	785b      	ldrb	r3, [r3, #1]
 8010fd2:	b303      	cbz	r3, 8011016 <RadioIrqProcess+0x17e>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8010fd4:	22ff      	movs	r2, #255	; 0xff
 8010fd6:	f10d 0107 	add.w	r1, sp, #7
 8010fda:	485e      	ldr	r0, [pc, #376]	; (8011154 <RadioIrqProcess+0x2bc>)
 8010fdc:	f001 fa4a 	bl	8012474 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8010fe0:	485d      	ldr	r0, [pc, #372]	; (8011158 <RadioIrqProcess+0x2c0>)
 8010fe2:	f000 fead 	bl	8011d40 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8010fe6:	4b59      	ldr	r3, [pc, #356]	; (801114c <RadioIrqProcess+0x2b4>)
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	f000 80a3 	beq.w	8011136 <RadioIrqProcess+0x29e>
 8010ff0:	689c      	ldr	r4, [r3, #8]
 8010ff2:	2c00      	cmp	r4, #0
 8010ff4:	f000 809f 	beq.w	8011136 <RadioIrqProcess+0x29e>
            switch( SubgRf.PacketStatus.packetType )
 8010ff8:	4b50      	ldr	r3, [pc, #320]	; (801113c <RadioIrqProcess+0x2a4>)
 8010ffa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010ffe:	2b01      	cmp	r3, #1
 8011000:	d11d      	bne.n	801103e <RadioIrqProcess+0x1a6>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 8011002:	4a4e      	ldr	r2, [pc, #312]	; (801113c <RadioIrqProcess+0x2a4>)
 8011004:	f992 3031 	ldrsb.w	r3, [r2, #49]	; 0x31
 8011008:	f992 2030 	ldrsb.w	r2, [r2, #48]	; 0x30
 801100c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8011010:	4850      	ldr	r0, [pc, #320]	; (8011154 <RadioIrqProcess+0x2bc>)
 8011012:	47a0      	blx	r4
                break;
 8011014:	e08f      	b.n	8011136 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 8011016:	2000      	movs	r0, #0
 8011018:	f000 fce2 	bl	80119e0 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 801101c:	2100      	movs	r1, #0
 801101e:	f640 1002 	movw	r0, #2306	; 0x902
 8011022:	f000 fec9 	bl	8011db8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8011026:	f640 1044 	movw	r0, #2372	; 0x944
 801102a:	f000 ffb7 	bl	8011f9c <SUBGRF_ReadRegister>
 801102e:	f040 0102 	orr.w	r1, r0, #2
 8011032:	b2c9      	uxtb	r1, r1
 8011034:	f640 1044 	movw	r0, #2372	; 0x944
 8011038:	f000 febe 	bl	8011db8 <SUBGRF_WriteRegister>
 801103c:	e7ca      	b.n	8010fd4 <RadioIrqProcess+0x13c>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 801103e:	4c3f      	ldr	r4, [pc, #252]	; (801113c <RadioIrqProcess+0x2a4>)
 8011040:	4669      	mov	r1, sp
 8011042:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8011044:	f001 faca 	bl	80125dc <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 8011048:	4b40      	ldr	r3, [pc, #256]	; (801114c <RadioIrqProcess+0x2b4>)
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	689d      	ldr	r5, [r3, #8]
 801104e:	9b00      	ldr	r3, [sp, #0]
 8011050:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8011054:	4a41      	ldr	r2, [pc, #260]	; (801115c <RadioIrqProcess+0x2c4>)
 8011056:	fb82 1203 	smull	r1, r2, r2, r3
 801105a:	17db      	asrs	r3, r3, #31
 801105c:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 8011060:	b25b      	sxtb	r3, r3
 8011062:	f994 2029 	ldrsb.w	r2, [r4, #41]	; 0x29
 8011066:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801106a:	483a      	ldr	r0, [pc, #232]	; (8011154 <RadioIrqProcess+0x2bc>)
 801106c:	47a8      	blx	r5
                break;
 801106e:	e062      	b.n	8011136 <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 8011070:	2000      	movs	r0, #0
 8011072:	f000 fcb5 	bl	80119e0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8011076:	4b35      	ldr	r3, [pc, #212]	; (801114c <RadioIrqProcess+0x2b4>)
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	2b00      	cmp	r3, #0
 801107c:	d05b      	beq.n	8011136 <RadioIrqProcess+0x29e>
 801107e:	699b      	ldr	r3, [r3, #24]
 8011080:	2b00      	cmp	r3, #0
 8011082:	d058      	beq.n	8011136 <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( true );
 8011084:	2001      	movs	r0, #1
 8011086:	4798      	blx	r3
 8011088:	e055      	b.n	8011136 <RadioIrqProcess+0x29e>
 801108a:	4b2e      	ldr	r3, [pc, #184]	; (8011144 <RadioIrqProcess+0x2ac>)
 801108c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8011090:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &TxTimeoutTimer );
 8011092:	482f      	ldr	r0, [pc, #188]	; (8011150 <RadioIrqProcess+0x2b8>)
 8011094:	f001 ff28 	bl	8012ee8 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8011098:	2000      	movs	r0, #0
 801109a:	f000 fca1 	bl	80119e0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801109e:	4b2b      	ldr	r3, [pc, #172]	; (801114c <RadioIrqProcess+0x2b4>)
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d047      	beq.n	8011136 <RadioIrqProcess+0x29e>
 80110a6:	685b      	ldr	r3, [r3, #4]
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d044      	beq.n	8011136 <RadioIrqProcess+0x29e>
                RadioEvents->TxTimeout( );
 80110ac:	4798      	blx	r3
 80110ae:	e042      	b.n	8011136 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 80110b0:	4b2b      	ldr	r3, [pc, #172]	; (8011160 <RadioIrqProcess+0x2c8>)
 80110b2:	2201      	movs	r2, #1
 80110b4:	2100      	movs	r1, #0
 80110b6:	2002      	movs	r0, #2
 80110b8:	f001 fbc2 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 80110bc:	4b1f      	ldr	r3, [pc, #124]	; (801113c <RadioIrqProcess+0x2a4>)
 80110be:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80110c0:	b3c9      	cbz	r1, 8011136 <RadioIrqProcess+0x29e>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 80110c2:	f3c1 4107 	ubfx	r1, r1, #16, #8
 80110c6:	f640 1003 	movw	r0, #2307	; 0x903
 80110ca:	f7ff feb4 	bl	8010e36 <RadioWrite>
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 80110ce:	4c1b      	ldr	r4, [pc, #108]	; (801113c <RadioIrqProcess+0x2a4>)
 80110d0:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80110d4:	f640 1004 	movw	r0, #2308	; 0x904
 80110d8:	f7ff fead 	bl	8010e36 <RadioWrite>
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 80110dc:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
 80110e0:	f640 1005 	movw	r0, #2309	; 0x905
 80110e4:	f7ff fea7 	bl	8010e36 <RadioWrite>
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 80110e8:	f640 1002 	movw	r0, #2306	; 0x902
 80110ec:	f7ff febe 	bl	8010e6c <RadioRead>
 80110f0:	f040 0101 	orr.w	r1, r0, #1
 80110f4:	b2c9      	uxtb	r1, r1
 80110f6:	f640 1002 	movw	r0, #2306	; 0x902
 80110fa:	f7ff fe9c 	bl	8010e36 <RadioWrite>
          SubgRf.RxDcPreambleDetectTimeout = 0;
 80110fe:	2200      	movs	r2, #0
 8011100:	65a2      	str	r2, [r4, #88]	; 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8011102:	4613      	mov	r3, r2
 8011104:	f240 2162 	movw	r1, #610	; 0x262
 8011108:	4608      	mov	r0, r1
 801110a:	f000 fd92 	bl	8011c32 <SUBGRF_SetDioIrqParams>
 801110e:	e012      	b.n	8011136 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8011110:	4b14      	ldr	r3, [pc, #80]	; (8011164 <RadioIrqProcess+0x2cc>)
 8011112:	2201      	movs	r2, #1
 8011114:	2100      	movs	r1, #0
 8011116:	2002      	movs	r0, #2
 8011118:	f001 fb92 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 801111c:	f001 faa9 	bl	8012672 <RFW_Is_Init>
 8011120:	2801      	cmp	r0, #1
 8011122:	d108      	bne.n	8011136 <RadioIrqProcess+0x29e>
            RFW_ReceivePayload( );
 8011124:	f001 fab1 	bl	801268a <RFW_ReceivePayload>
 8011128:	e005      	b.n	8011136 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801112a:	4b0f      	ldr	r3, [pc, #60]	; (8011168 <RadioIrqProcess+0x2d0>)
 801112c:	2201      	movs	r2, #1
 801112e:	2100      	movs	r1, #0
 8011130:	2002      	movs	r0, #2
 8011132:	f001 fb85 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
}
 8011136:	b003      	add	sp, #12
 8011138:	bd30      	pop	{r4, r5, pc}
 801113a:	bf00      	nop
 801113c:	20000f64 	.word	0x20000f64
 8011140:	08014c4c 	.word	0x08014c4c
 8011144:	48000400 	.word	0x48000400
 8011148:	20000f4c 	.word	0x20000f4c
 801114c:	20000f48 	.word	0x20000f48
 8011150:	20000fc0 	.word	0x20000fc0
 8011154:	20000e48 	.word	0x20000e48
 8011158:	20000f88 	.word	0x20000f88
 801115c:	10624dd3 	.word	0x10624dd3
 8011160:	08014c60 	.word	0x08014c60
 8011164:	08014c6c 	.word	0x08014c6c
 8011168:	08014c78 	.word	0x08014c78
        TimerStop( &RxTimeoutTimer );
 801116c:	4817      	ldr	r0, [pc, #92]	; (80111cc <RadioIrqProcess+0x334>)
 801116e:	f001 febb 	bl	8012ee8 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8011172:	4b17      	ldr	r3, [pc, #92]	; (80111d0 <RadioIrqProcess+0x338>)
 8011174:	785b      	ldrb	r3, [r3, #1]
 8011176:	b173      	cbz	r3, 8011196 <RadioIrqProcess+0x2fe>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8011178:	4b16      	ldr	r3, [pc, #88]	; (80111d4 <RadioIrqProcess+0x33c>)
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	2b00      	cmp	r3, #0
 801117e:	d0da      	beq.n	8011136 <RadioIrqProcess+0x29e>
 8011180:	68db      	ldr	r3, [r3, #12]
 8011182:	2b00      	cmp	r3, #0
 8011184:	d0d7      	beq.n	8011136 <RadioIrqProcess+0x29e>
            RadioEvents->RxTimeout( );
 8011186:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8011188:	4b13      	ldr	r3, [pc, #76]	; (80111d8 <RadioIrqProcess+0x340>)
 801118a:	2201      	movs	r2, #1
 801118c:	2100      	movs	r1, #0
 801118e:	2002      	movs	r0, #2
 8011190:	f001 fb56 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
 8011194:	e7cf      	b.n	8011136 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 8011196:	2000      	movs	r0, #0
 8011198:	f000 fc22 	bl	80119e0 <SUBGRF_SetStandby>
 801119c:	e7ec      	b.n	8011178 <RadioIrqProcess+0x2e0>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 801119e:	4b0f      	ldr	r3, [pc, #60]	; (80111dc <RadioIrqProcess+0x344>)
 80111a0:	2201      	movs	r2, #1
 80111a2:	2100      	movs	r1, #0
 80111a4:	2002      	movs	r0, #2
 80111a6:	f001 fb4b 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 80111aa:	4b09      	ldr	r3, [pc, #36]	; (80111d0 <RadioIrqProcess+0x338>)
 80111ac:	785b      	ldrb	r3, [r3, #1]
 80111ae:	b143      	cbz	r3, 80111c2 <RadioIrqProcess+0x32a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 80111b0:	4b08      	ldr	r3, [pc, #32]	; (80111d4 <RadioIrqProcess+0x33c>)
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d0be      	beq.n	8011136 <RadioIrqProcess+0x29e>
 80111b8:	691b      	ldr	r3, [r3, #16]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d0bb      	beq.n	8011136 <RadioIrqProcess+0x29e>
            RadioEvents->RxError( );
 80111be:	4798      	blx	r3
}
 80111c0:	e7b9      	b.n	8011136 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 80111c2:	2000      	movs	r0, #0
 80111c4:	f000 fc0c 	bl	80119e0 <SUBGRF_SetStandby>
 80111c8:	e7f2      	b.n	80111b0 <RadioIrqProcess+0x318>
 80111ca:	bf00      	nop
 80111cc:	20000f4c 	.word	0x20000f4c
 80111d0:	20000f64 	.word	0x20000f64
 80111d4:	20000f48 	.word	0x20000f48
 80111d8:	08014c84 	.word	0x08014c84
 80111dc:	08014c90 	.word	0x08014c90

080111e0 <RadioOnDioIrq>:
{
 80111e0:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 80111e2:	4b03      	ldr	r3, [pc, #12]	; (80111f0 <RadioOnDioIrq+0x10>)
 80111e4:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
    RADIO_IRQ_PROCESS();
 80111e8:	f7ff fe56 	bl	8010e98 <RadioIrqProcess>
}
 80111ec:	bd08      	pop	{r3, pc}
 80111ee:	bf00      	nop
 80111f0:	20000f64 	.word	0x20000f64

080111f4 <RadioGetWakeupTime>:
{
 80111f4:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 80111f6:	f001 f982 	bl	80124fe <SUBGRF_GetRadioWakeUpTime>
}
 80111fa:	3003      	adds	r0, #3
 80111fc:	bd08      	pop	{r3, pc}
	...

08011200 <RadioSetMaxPayloadLength>:
{
 8011200:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 8011202:	2801      	cmp	r0, #1
 8011204:	d004      	beq.n	8011210 <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8011206:	4b0a      	ldr	r3, [pc, #40]	; (8011230 <RadioSetMaxPayloadLength+0x30>)
 8011208:	7d5b      	ldrb	r3, [r3, #21]
 801120a:	2b01      	cmp	r3, #1
 801120c:	d008      	beq.n	8011220 <RadioSetMaxPayloadLength+0x20>
}
 801120e:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8011210:	4b08      	ldr	r3, [pc, #32]	; (8011234 <RadioSetMaxPayloadLength+0x34>)
 8011212:	7019      	strb	r1, [r3, #0]
 8011214:	4806      	ldr	r0, [pc, #24]	; (8011230 <RadioSetMaxPayloadLength+0x30>)
 8011216:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011218:	300e      	adds	r0, #14
 801121a:	f001 f843 	bl	80122a4 <SUBGRF_SetPacketParams>
 801121e:	e7f6      	b.n	801120e <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8011220:	4b04      	ldr	r3, [pc, #16]	; (8011234 <RadioSetMaxPayloadLength+0x34>)
 8011222:	7019      	strb	r1, [r3, #0]
 8011224:	4802      	ldr	r0, [pc, #8]	; (8011230 <RadioSetMaxPayloadLength+0x30>)
 8011226:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011228:	300e      	adds	r0, #14
 801122a:	f001 f83b 	bl	80122a4 <SUBGRF_SetPacketParams>
}
 801122e:	e7ee      	b.n	801120e <RadioSetMaxPayloadLength+0xe>
 8011230:	20000f64 	.word	0x20000f64
 8011234:	20000118 	.word	0x20000118

08011238 <RadioReadRegisters>:
{
 8011238:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 801123a:	f001 f8a5 	bl	8012388 <SUBGRF_ReadRegisters>
}
 801123e:	bd08      	pop	{r3, pc}

08011240 <RadioWriteRegisters>:
{
 8011240:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 8011242:	f000 ffed 	bl	8012220 <SUBGRF_WriteRegisters>
}
 8011246:	bd08      	pop	{r3, pc}

08011248 <RadioRssi>:
{
 8011248:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 801124a:	f000 fd6b 	bl	8011d24 <SUBGRF_GetRssiInst>
}
 801124e:	b200      	sxth	r0, r0
 8011250:	bd08      	pop	{r3, pc}
	...

08011254 <RadioSetTxContinuousWave>:
{
 8011254:	b538      	push	{r3, r4, r5, lr}
 8011256:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 8011258:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 801125c:	fb02 f404 	mul.w	r4, r2, r4
    SUBGRF_SetRfFrequency( freq );
 8011260:	f000 fd20 	bl	8011ca4 <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 8011264:	4628      	mov	r0, r5
 8011266:	f001 f933 	bl	80124d0 <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 801126a:	2101      	movs	r1, #1
 801126c:	f001 f91c 	bl	80124a8 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8011270:	f000 fc34 	bl	8011adc <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8011274:	4d04      	ldr	r5, [pc, #16]	; (8011288 <RadioSetTxContinuousWave+0x34>)
 8011276:	4621      	mov	r1, r4
 8011278:	4628      	mov	r0, r5
 801127a:	f001 fed5 	bl	8013028 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801127e:	4628      	mov	r0, r5
 8011280:	f001 fe8c 	bl	8012f9c <UTIL_TIMER_Start>
}
 8011284:	bd38      	pop	{r3, r4, r5, pc}
 8011286:	bf00      	nop
 8011288:	20000fc0 	.word	0x20000fc0

0801128c <RadioSetChannel>:
{
 801128c:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 801128e:	f000 fd09 	bl	8011ca4 <SUBGRF_SetRfFrequency>
}
 8011292:	bd08      	pop	{r3, pc}

08011294 <RadioStartCad>:
{
 8011294:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8011296:	2100      	movs	r1, #0
 8011298:	4b07      	ldr	r3, [pc, #28]	; (80112b8 <RadioStartCad+0x24>)
 801129a:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 801129e:	f001 f903 	bl	80124a8 <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 80112a2:	2300      	movs	r3, #0
 80112a4:	461a      	mov	r2, r3
 80112a6:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80112aa:	4608      	mov	r0, r1
 80112ac:	f000 fcc1 	bl	8011c32 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 80112b0:	f000 fc08 	bl	8011ac4 <SUBGRF_SetCad>
}
 80112b4:	bd08      	pop	{r3, pc}
 80112b6:	bf00      	nop
 80112b8:	20000f64 	.word	0x20000f64

080112bc <RadioRx>:
{
 80112bc:	b538      	push	{r3, r4, r5, lr}
 80112be:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init( ) )
 80112c0:	f001 f9d7 	bl	8012672 <RFW_Is_Init>
 80112c4:	2801      	cmp	r0, #1
 80112c6:	d019      	beq.n	80112fc <RadioRx+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80112c8:	2300      	movs	r3, #0
 80112ca:	461a      	mov	r2, r3
 80112cc:	f240 2162 	movw	r1, #610	; 0x262
 80112d0:	4608      	mov	r0, r1
 80112d2:	f000 fcae 	bl	8011c32 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 80112d6:	b9a4      	cbnz	r4, 8011302 <RadioRx+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80112d8:	4c11      	ldr	r4, [pc, #68]	; (8011320 <RadioRx+0x64>)
 80112da:	2100      	movs	r1, #0
 80112dc:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 80112de:	4b11      	ldr	r3, [pc, #68]	; (8011324 <RadioRx+0x68>)
 80112e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80112e4:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80112e6:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 80112ea:	f001 f8dd 	bl	80124a8 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 80112ee:	7863      	ldrb	r3, [r4, #1]
 80112f0:	b183      	cbz	r3, 8011314 <RadioRx+0x58>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80112f2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80112f6:	f000 fba7 	bl	8011a48 <SUBGRF_SetRx>
}
 80112fa:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit( );
 80112fc:	f001 f9c1 	bl	8012682 <RFW_ReceiveInit>
 8011300:	e7e9      	b.n	80112d6 <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8011302:	4d09      	ldr	r5, [pc, #36]	; (8011328 <RadioRx+0x6c>)
 8011304:	4621      	mov	r1, r4
 8011306:	4628      	mov	r0, r5
 8011308:	f001 fe8e 	bl	8013028 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801130c:	4628      	mov	r0, r5
 801130e:	f001 fe45 	bl	8012f9c <UTIL_TIMER_Start>
 8011312:	e7e1      	b.n	80112d8 <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8011314:	4b02      	ldr	r3, [pc, #8]	; (8011320 <RadioRx+0x64>)
 8011316:	6898      	ldr	r0, [r3, #8]
 8011318:	0180      	lsls	r0, r0, #6
 801131a:	f000 fb95 	bl	8011a48 <SUBGRF_SetRx>
}
 801131e:	e7ec      	b.n	80112fa <RadioRx+0x3e>
 8011320:	20000f64 	.word	0x20000f64
 8011324:	48000400 	.word	0x48000400
 8011328:	20000f4c 	.word	0x20000f4c

0801132c <RadioSleep>:
{
 801132c:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 801132e:	f04f 0004 	mov.w	r0, #4
 8011332:	f000 fe8d 	bl	8012050 <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 8011336:	2002      	movs	r0, #2
 8011338:	f7f0 fb5e 	bl	80019f8 <HAL_Delay>
}
 801133c:	bd08      	pop	{r3, pc}
	...

08011340 <RadioSend>:
{
 8011340:	b570      	push	{r4, r5, r6, lr}
 8011342:	b082      	sub	sp, #8
 8011344:	4605      	mov	r5, r0
 8011346:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8011348:	2300      	movs	r3, #0
 801134a:	461a      	mov	r2, r3
 801134c:	f240 2101 	movw	r1, #513	; 0x201
 8011350:	4608      	mov	r0, r1
 8011352:	f000 fc6e 	bl	8011c32 <SUBGRF_SetDioIrqParams>
 8011356:	4b3e      	ldr	r3, [pc, #248]	; (8011450 <RadioSend+0x110>)
 8011358:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801135c:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801135e:	4e3d      	ldr	r6, [pc, #244]	; (8011454 <RadioSend+0x114>)
 8011360:	2101      	movs	r1, #1
 8011362:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 8011366:	f001 f89f 	bl	80124a8 <SUBGRF_SetSwitch>
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 801136a:	7833      	ldrb	r3, [r6, #0]
 801136c:	2b01      	cmp	r3, #1
 801136e:	d103      	bne.n	8011378 <RadioSend+0x38>
 8011370:	f896 3051 	ldrb.w	r3, [r6, #81]	; 0x51
 8011374:	2b06      	cmp	r3, #6
 8011376:	d012      	beq.n	801139e <RadioSend+0x5e>
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8011378:	f640 0089 	movw	r0, #2185	; 0x889
 801137c:	f000 fe0e 	bl	8011f9c <SUBGRF_ReadRegister>
 8011380:	f040 0104 	orr.w	r1, r0, #4
 8011384:	b2c9      	uxtb	r1, r1
 8011386:	f640 0089 	movw	r0, #2185	; 0x889
 801138a:	f000 fd15 	bl	8011db8 <SUBGRF_WriteRegister>
    switch( SubgRf.Modem )
 801138e:	4b31      	ldr	r3, [pc, #196]	; (8011454 <RadioSend+0x114>)
 8011390:	781b      	ldrb	r3, [r3, #0]
 8011392:	2b03      	cmp	r3, #3
 8011394:	d818      	bhi.n	80113c8 <RadioSend+0x88>
 8011396:	e8df f003 	tbb	[pc, r3]
 801139a:	0d22      	.short	0x0d22
 801139c:	4d22      	.short	0x4d22
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801139e:	f640 0089 	movw	r0, #2185	; 0x889
 80113a2:	f000 fdfb 	bl	8011f9c <SUBGRF_ReadRegister>
 80113a6:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 80113aa:	f640 0089 	movw	r0, #2185	; 0x889
 80113ae:	f000 fd03 	bl	8011db8 <SUBGRF_WriteRegister>
 80113b2:	e7ec      	b.n	801138e <RadioSend+0x4e>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 80113b4:	4827      	ldr	r0, [pc, #156]	; (8011454 <RadioSend+0x114>)
 80113b6:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80113b8:	300e      	adds	r0, #14
 80113ba:	f000 ff73 	bl	80122a4 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80113be:	2200      	movs	r2, #0
 80113c0:	4621      	mov	r1, r4
 80113c2:	4628      	mov	r0, r5
 80113c4:	f001 f83d 	bl	8012442 <SUBGRF_SendPayload>
    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 80113c8:	4c23      	ldr	r4, [pc, #140]	; (8011458 <RadioSend+0x118>)
 80113ca:	4b22      	ldr	r3, [pc, #136]	; (8011454 <RadioSend+0x114>)
 80113cc:	6859      	ldr	r1, [r3, #4]
 80113ce:	4620      	mov	r0, r4
 80113d0:	f001 fe2a 	bl	8013028 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80113d4:	4620      	mov	r0, r4
 80113d6:	f001 fde1 	bl	8012f9c <UTIL_TIMER_Start>
}
 80113da:	b002      	add	sp, #8
 80113dc:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 80113de:	f001 f948 	bl	8012672 <RFW_Is_Init>
 80113e2:	2801      	cmp	r0, #1
 80113e4:	d00a      	beq.n	80113fc <RadioSend+0xbc>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 80113e6:	481b      	ldr	r0, [pc, #108]	; (8011454 <RadioSend+0x114>)
 80113e8:	7584      	strb	r4, [r0, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80113ea:	300e      	adds	r0, #14
 80113ec:	f000 ff5a 	bl	80122a4 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 80113f0:	2200      	movs	r2, #0
 80113f2:	4621      	mov	r1, r4
 80113f4:	4628      	mov	r0, r5
 80113f6:	f001 f824 	bl	8012442 <SUBGRF_SendPayload>
 80113fa:	e7e5      	b.n	80113c8 <RadioSend+0x88>
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 80113fc:	f10d 0207 	add.w	r2, sp, #7
 8011400:	4621      	mov	r1, r4
 8011402:	4628      	mov	r0, r5
 8011404:	f001 f93a 	bl	801267c <RFW_TransmitInit>
 8011408:	b968      	cbnz	r0, 8011426 <RadioSend+0xe6>
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 801140a:	4812      	ldr	r0, [pc, #72]	; (8011454 <RadioSend+0x114>)
 801140c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011410:	7583      	strb	r3, [r0, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011412:	300e      	adds	r0, #14
 8011414:	f000 ff46 	bl	80122a4 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8011418:	2200      	movs	r2, #0
 801141a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801141e:	4628      	mov	r0, r5
 8011420:	f001 f80f 	bl	8012442 <SUBGRF_SendPayload>
 8011424:	e7d0      	b.n	80113c8 <RadioSend+0x88>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 8011426:	4b0d      	ldr	r3, [pc, #52]	; (801145c <RadioSend+0x11c>)
 8011428:	2201      	movs	r2, #1
 801142a:	2100      	movs	r1, #0
 801142c:	2002      	movs	r0, #2
 801142e:	f001 fa07 	bl	8012840 <UTIL_ADV_TRACE_COND_FSend>
                return;
 8011432:	e7d2      	b.n	80113da <RadioSend+0x9a>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8011434:	4807      	ldr	r0, [pc, #28]	; (8011454 <RadioSend+0x114>)
 8011436:	2302      	movs	r3, #2
 8011438:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 801143a:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801143c:	300e      	adds	r0, #14
 801143e:	f000 ff31 	bl	80122a4 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8011442:	2200      	movs	r2, #0
 8011444:	4621      	mov	r1, r4
 8011446:	4628      	mov	r0, r5
 8011448:	f000 fffb 	bl	8012442 <SUBGRF_SendPayload>
            break;
 801144c:	e7bc      	b.n	80113c8 <RadioSend+0x88>
 801144e:	bf00      	nop
 8011450:	48000400 	.word	0x48000400
 8011454:	20000f64 	.word	0x20000f64
 8011458:	20000fc0 	.word	0x20000fc0
 801145c:	08014ca0 	.word	0x08014ca0

08011460 <RadioRandom>:
{
 8011460:	b508      	push	{r3, lr}
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8011462:	2300      	movs	r3, #0
 8011464:	461a      	mov	r2, r3
 8011466:	4619      	mov	r1, r3
 8011468:	4618      	mov	r0, r3
 801146a:	f000 fbe2 	bl	8011c32 <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 801146e:	f000 ff9b 	bl	80123a8 <SUBGRF_GetRandom>
}
 8011472:	bd08      	pop	{r3, pc}

08011474 <RadioSetModem>:
{
 8011474:	b510      	push	{r4, lr}
 8011476:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 8011478:	4b14      	ldr	r3, [pc, #80]	; (80114cc <RadioSetModem+0x58>)
 801147a:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem( modem );
 801147c:	f001 f906 	bl	801268c <RFW_SetRadioModem>
    switch( modem )
 8011480:	2c01      	cmp	r4, #1
 8011482:	d010      	beq.n	80114a6 <RadioSetModem+0x32>
 8011484:	2c03      	cmp	r4, #3
 8011486:	d01a      	beq.n	80114be <RadioSetModem+0x4a>
 8011488:	b134      	cbz	r4, 8011498 <RadioSetModem+0x24>
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 801148a:	2003      	movs	r0, #3
 801148c:	f000 fce4 	bl	8011e58 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8011490:	4b0e      	ldr	r3, [pc, #56]	; (80114cc <RadioSetModem+0x58>)
 8011492:	2200      	movs	r2, #0
 8011494:	735a      	strb	r2, [r3, #13]
}
 8011496:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8011498:	2000      	movs	r0, #0
 801149a:	f000 fcdd 	bl	8011e58 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 801149e:	4b0b      	ldr	r3, [pc, #44]	; (80114cc <RadioSetModem+0x58>)
 80114a0:	2200      	movs	r2, #0
 80114a2:	735a      	strb	r2, [r3, #13]
        break;
 80114a4:	e7f7      	b.n	8011496 <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 80114a6:	2001      	movs	r0, #1
 80114a8:	f000 fcd6 	bl	8011e58 <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 80114ac:	4b07      	ldr	r3, [pc, #28]	; (80114cc <RadioSetModem+0x58>)
 80114ae:	7b5a      	ldrb	r2, [r3, #13]
 80114b0:	7b18      	ldrb	r0, [r3, #12]
 80114b2:	4282      	cmp	r2, r0
 80114b4:	d0ef      	beq.n	8011496 <RadioSetModem+0x22>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 80114b6:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 80114b8:	f000 f80a 	bl	80114d0 <RadioSetPublicNetwork>
 80114bc:	e7eb      	b.n	8011496 <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80114be:	2002      	movs	r0, #2
 80114c0:	f000 fcca 	bl	8011e58 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 80114c4:	4b01      	ldr	r3, [pc, #4]	; (80114cc <RadioSetModem+0x58>)
 80114c6:	2200      	movs	r2, #0
 80114c8:	735a      	strb	r2, [r3, #13]
}
 80114ca:	e7e4      	b.n	8011496 <RadioSetModem+0x22>
 80114cc:	20000f64 	.word	0x20000f64

080114d0 <RadioSetPublicNetwork>:
{
 80114d0:	b510      	push	{r4, lr}
 80114d2:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 80114d4:	4b0e      	ldr	r3, [pc, #56]	; (8011510 <RadioSetPublicNetwork+0x40>)
 80114d6:	7318      	strb	r0, [r3, #12]
 80114d8:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 80114da:	2001      	movs	r0, #1
 80114dc:	f7ff ffca 	bl	8011474 <RadioSetModem>
    if( enable == true )
 80114e0:	b154      	cbz	r4, 80114f8 <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 80114e2:	2134      	movs	r1, #52	; 0x34
 80114e4:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80114e8:	f000 fc66 	bl	8011db8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 80114ec:	2144      	movs	r1, #68	; 0x44
 80114ee:	f240 7041 	movw	r0, #1857	; 0x741
 80114f2:	f000 fc61 	bl	8011db8 <SUBGRF_WriteRegister>
}
 80114f6:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 80114f8:	2114      	movs	r1, #20
 80114fa:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80114fe:	f000 fc5b 	bl	8011db8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8011502:	2124      	movs	r1, #36	; 0x24
 8011504:	f240 7041 	movw	r0, #1857	; 0x741
 8011508:	f000 fc56 	bl	8011db8 <SUBGRF_WriteRegister>
}
 801150c:	e7f3      	b.n	80114f6 <RadioSetPublicNetwork+0x26>
 801150e:	bf00      	nop
 8011510:	20000f64 	.word	0x20000f64

08011514 <RadioSetTxConfig>:
{
 8011514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011518:	b083      	sub	sp, #12
 801151a:	4604      	mov	r4, r0
 801151c:	460e      	mov	r6, r1
 801151e:	4617      	mov	r7, r2
 8011520:	461d      	mov	r5, r3
 8011522:	f8bd 8038 	ldrh.w	r8, [sp, #56]	; 0x38
 8011526:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
 801152a:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 801152e:	f001 f89f 	bl	8012670 <RFW_DeInit>
    switch( modem )
 8011532:	b174      	cbz	r4, 8011552 <RadioSetTxConfig+0x3e>
 8011534:	2c01      	cmp	r4, #1
 8011536:	d053      	beq.n	80115e0 <RadioSetTxConfig+0xcc>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8011538:	4630      	mov	r0, r6
 801153a:	f000 ffc9 	bl	80124d0 <SUBGRF_SetRfTxPower>
 801153e:	4c51      	ldr	r4, [pc, #324]	; (8011684 <RadioSetTxConfig+0x170>)
 8011540:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 8011544:	f001 f899 	bl	801267a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8011548:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801154a:	6063      	str	r3, [r4, #4]
}
 801154c:	b003      	add	sp, #12
 801154e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8011552:	4c4c      	ldr	r4, [pc, #304]	; (8011684 <RadioSetTxConfig+0x170>)
 8011554:	f04f 0b00 	mov.w	fp, #0
 8011558:	f884 b038 	strb.w	fp, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801155c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801155e:	63e3      	str	r3, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8011560:	230b      	movs	r3, #11
 8011562:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8011566:	4628      	mov	r0, r5
 8011568:	f001 f820 	bl	80125ac <SUBGRF_GetFskBandwidthRegValue>
 801156c:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8011570:	6427      	str	r7, [r4, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8011572:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8011576:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801157a:	f8a4 8010 	strh.w	r8, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801157e:	2304      	movs	r3, #4
 8011580:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8011582:	2318      	movs	r3, #24
 8011584:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8011586:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801158a:	f089 0901 	eor.w	r9, r9, #1
 801158e:	f884 9015 	strb.w	r9, [r4, #21]
            if( crcOn == true )
 8011592:	f1ba 0f00 	cmp.w	sl, #0
 8011596:	d01f      	beq.n	80115d8 <RadioSetTxConfig+0xc4>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8011598:	22f2      	movs	r2, #242	; 0xf2
 801159a:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801159c:	4c39      	ldr	r4, [pc, #228]	; (8011684 <RadioSetTxConfig+0x170>)
 801159e:	2301      	movs	r3, #1
 80115a0:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 80115a2:	f7ff fc43 	bl	8010e2c <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 80115a6:	2000      	movs	r0, #0
 80115a8:	f7ff ff64 	bl	8011474 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80115ac:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80115b0:	f000 fc6c 	bl	8011e8c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80115b4:	f104 000e 	add.w	r0, r4, #14
 80115b8:	f000 fe74 	bl	80122a4 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80115bc:	4a32      	ldr	r2, [pc, #200]	; (8011688 <RadioSetTxConfig+0x174>)
 80115be:	466b      	mov	r3, sp
 80115c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80115c4:	e883 0003 	stmia.w	r3, {r0, r1}
 80115c8:	4618      	mov	r0, r3
 80115ca:	f000 fe39 	bl	8012240 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80115ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80115d2:	f000 fd5d 	bl	8012090 <SUBGRF_SetWhiteningSeed>
            break;
 80115d6:	e7af      	b.n	8011538 <RadioSetTxConfig+0x24>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80115d8:	4b2a      	ldr	r3, [pc, #168]	; (8011684 <RadioSetTxConfig+0x170>)
 80115da:	2201      	movs	r2, #1
 80115dc:	75da      	strb	r2, [r3, #23]
 80115de:	e7dd      	b.n	801159c <RadioSetTxConfig+0x88>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80115e0:	4a28      	ldr	r2, [pc, #160]	; (8011684 <RadioSetTxConfig+0x170>)
 80115e2:	2301      	movs	r3, #1
 80115e4:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80115e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80115ea:	b2db      	uxtb	r3, r3
 80115ec:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80115f0:	4926      	ldr	r1, [pc, #152]	; (801168c <RadioSetTxConfig+0x178>)
 80115f2:	5d49      	ldrb	r1, [r1, r5]
 80115f4:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 80115f8:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 80115fc:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8011600:	b91d      	cbnz	r5, 801160a <RadioSetTxConfig+0xf6>
 8011602:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011604:	3a0b      	subs	r2, #11
 8011606:	2a01      	cmp	r2, #1
 8011608:	d92c      	bls.n	8011664 <RadioSetTxConfig+0x150>
 801160a:	2d01      	cmp	r5, #1
 801160c:	d027      	beq.n	801165e <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801160e:	4a1d      	ldr	r2, [pc, #116]	; (8011684 <RadioSetTxConfig+0x170>)
 8011610:	2100      	movs	r1, #0
 8011612:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8011616:	4a1b      	ldr	r2, [pc, #108]	; (8011684 <RadioSetTxConfig+0x170>)
 8011618:	2101      	movs	r1, #1
 801161a:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801161c:	3b05      	subs	r3, #5
 801161e:	b2db      	uxtb	r3, r3
 8011620:	428b      	cmp	r3, r1
 8011622:	d924      	bls.n	801166e <RadioSetTxConfig+0x15a>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8011624:	4b17      	ldr	r3, [pc, #92]	; (8011684 <RadioSetTxConfig+0x170>)
 8011626:	f8a3 801c 	strh.w	r8, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801162a:	4c16      	ldr	r4, [pc, #88]	; (8011684 <RadioSetTxConfig+0x170>)
 801162c:	f884 901e 	strb.w	r9, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8011630:	4b17      	ldr	r3, [pc, #92]	; (8011690 <RadioSetTxConfig+0x17c>)
 8011632:	781b      	ldrb	r3, [r3, #0]
 8011634:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8011636:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801163a:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801163e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 8011642:	f7ff fbf3 	bl	8010e2c <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8011646:	2001      	movs	r0, #1
 8011648:	f7ff ff14 	bl	8011474 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801164c:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8011650:	f000 fc1c 	bl	8011e8c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011654:	f104 000e 	add.w	r0, r4, #14
 8011658:	f000 fe24 	bl	80122a4 <SUBGRF_SetPacketParams>
            break;
 801165c:	e76c      	b.n	8011538 <RadioSetTxConfig+0x24>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801165e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011660:	2a0c      	cmp	r2, #12
 8011662:	d1d4      	bne.n	801160e <RadioSetTxConfig+0xfa>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8011664:	4a07      	ldr	r2, [pc, #28]	; (8011684 <RadioSetTxConfig+0x170>)
 8011666:	2101      	movs	r1, #1
 8011668:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 801166c:	e7d3      	b.n	8011616 <RadioSetTxConfig+0x102>
                if( preambleLen < 12 )
 801166e:	f1b8 0f0b 	cmp.w	r8, #11
 8011672:	d803      	bhi.n	801167c <RadioSetTxConfig+0x168>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8011674:	4613      	mov	r3, r2
 8011676:	220c      	movs	r2, #12
 8011678:	839a      	strh	r2, [r3, #28]
 801167a:	e7d6      	b.n	801162a <RadioSetTxConfig+0x116>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801167c:	4b01      	ldr	r3, [pc, #4]	; (8011684 <RadioSetTxConfig+0x170>)
 801167e:	f8a3 801c 	strh.w	r8, [r3, #28]
 8011682:	e7d2      	b.n	801162a <RadioSetTxConfig+0x116>
 8011684:	20000f64 	.word	0x20000f64
 8011688:	08013ee8 	.word	0x08013ee8
 801168c:	08014cb8 	.word	0x08014cb8
 8011690:	20000118 	.word	0x20000118

08011694 <RadioSetRxConfig>:
{
 8011694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011698:	b085      	sub	sp, #20
 801169a:	4604      	mov	r4, r0
 801169c:	460d      	mov	r5, r1
 801169e:	4616      	mov	r6, r2
 80116a0:	9301      	str	r3, [sp, #4]
 80116a2:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
 80116a6:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 80116aa:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 80116ae:	f89d b04c 	ldrb.w	fp, [sp, #76]	; 0x4c
 80116b2:	f89d 805c 	ldrb.w	r8, [sp, #92]	; 0x5c
    SubgRf.RxContinuous = rxContinuous;
 80116b6:	4b6e      	ldr	r3, [pc, #440]	; (8011870 <RadioSetRxConfig+0x1dc>)
 80116b8:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 80116bc:	f000 ffd8 	bl	8012670 <RFW_DeInit>
    if( rxContinuous == true )
 80116c0:	f1b8 0f00 	cmp.w	r8, #0
 80116c4:	d001      	beq.n	80116ca <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 80116c6:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 80116ca:	b14f      	cbz	r7, 80116e0 <RadioSetRxConfig+0x4c>
        MaxPayloadLength = payloadLen;
 80116cc:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 80116d0:	4b68      	ldr	r3, [pc, #416]	; (8011874 <RadioSetRxConfig+0x1e0>)
 80116d2:	701a      	strb	r2, [r3, #0]
    switch( modem )
 80116d4:	b144      	cbz	r4, 80116e8 <RadioSetRxConfig+0x54>
 80116d6:	2c01      	cmp	r4, #1
 80116d8:	d057      	beq.n	801178a <RadioSetRxConfig+0xf6>
}
 80116da:	b005      	add	sp, #20
 80116dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MaxPayloadLength = 0xFF;
 80116e0:	4b64      	ldr	r3, [pc, #400]	; (8011874 <RadioSetRxConfig+0x1e0>)
 80116e2:	22ff      	movs	r2, #255	; 0xff
 80116e4:	701a      	strb	r2, [r3, #0]
 80116e6:	e7f5      	b.n	80116d4 <RadioSetRxConfig+0x40>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80116e8:	2000      	movs	r0, #0
 80116ea:	f000 fa05 	bl	8011af8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80116ee:	4c60      	ldr	r4, [pc, #384]	; (8011870 <RadioSetRxConfig+0x1dc>)
 80116f0:	f04f 0800 	mov.w	r8, #0
 80116f4:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80116f8:	63e6      	str	r6, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80116fa:	230b      	movs	r3, #11
 80116fc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8011700:	4628      	mov	r0, r5
 8011702:	f000 ff53 	bl	80125ac <SUBGRF_GetFskBandwidthRegValue>
 8011706:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801170a:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801170e:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8011712:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8011716:	2304      	movs	r3, #4
 8011718:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 801171a:	2318      	movs	r3, #24
 801171c:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801171e:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8011722:	f087 0701 	eor.w	r7, r7, #1
 8011726:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8011728:	4b52      	ldr	r3, [pc, #328]	; (8011874 <RadioSetRxConfig+0x1e0>)
 801172a:	781b      	ldrb	r3, [r3, #0]
 801172c:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 801172e:	f1bb 0f00 	cmp.w	fp, #0
 8011732:	d026      	beq.n	8011782 <RadioSetRxConfig+0xee>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8011734:	22f2      	movs	r2, #242	; 0xf2
 8011736:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8011738:	4c4d      	ldr	r4, [pc, #308]	; (8011870 <RadioSetRxConfig+0x1dc>)
 801173a:	2301      	movs	r3, #1
 801173c:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 801173e:	f7ff fb75 	bl	8010e2c <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8011742:	2000      	movs	r0, #0
 8011744:	f7ff fe96 	bl	8011474 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8011748:	f104 0038 	add.w	r0, r4, #56	; 0x38
 801174c:	f000 fb9e 	bl	8011e8c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011750:	f104 000e 	add.w	r0, r4, #14
 8011754:	f000 fda6 	bl	80122a4 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8011758:	4a47      	ldr	r2, [pc, #284]	; (8011878 <RadioSetRxConfig+0x1e4>)
 801175a:	ab02      	add	r3, sp, #8
 801175c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011760:	e883 0003 	stmia.w	r3, {r0, r1}
 8011764:	4618      	mov	r0, r3
 8011766:	f000 fd6b 	bl	8012240 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801176a:	f240 10ff 	movw	r0, #511	; 0x1ff
 801176e:	f000 fc8f 	bl	8012090 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8011772:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8011776:	fb02 fa0a 	mul.w	sl, r2, sl
 801177a:	fbba f6f6 	udiv	r6, sl, r6
 801177e:	60a6      	str	r6, [r4, #8]
            break;
 8011780:	e7ab      	b.n	80116da <RadioSetRxConfig+0x46>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8011782:	4b3b      	ldr	r3, [pc, #236]	; (8011870 <RadioSetRxConfig+0x1dc>)
 8011784:	2201      	movs	r2, #1
 8011786:	75da      	strb	r2, [r3, #23]
 8011788:	e7d6      	b.n	8011738 <RadioSetRxConfig+0xa4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801178a:	2000      	movs	r0, #0
 801178c:	f000 f9b4 	bl	8011af8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8011790:	4a37      	ldr	r2, [pc, #220]	; (8011870 <RadioSetRxConfig+0x1dc>)
 8011792:	2301      	movs	r3, #1
 8011794:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8011798:	b2f3      	uxtb	r3, r6
 801179a:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 801179e:	4937      	ldr	r1, [pc, #220]	; (801187c <RadioSetRxConfig+0x1e8>)
 80117a0:	5d49      	ldrb	r1, [r1, r5]
 80117a2:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 80117a6:	9901      	ldr	r1, [sp, #4]
 80117a8:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80117ac:	b91d      	cbnz	r5, 80117b6 <RadioSetRxConfig+0x122>
 80117ae:	f1a6 020b 	sub.w	r2, r6, #11
 80117b2:	2a01      	cmp	r2, #1
 80117b4:	d941      	bls.n	801183a <RadioSetRxConfig+0x1a6>
 80117b6:	2d01      	cmp	r5, #1
 80117b8:	d03d      	beq.n	8011836 <RadioSetRxConfig+0x1a2>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80117ba:	4a2d      	ldr	r2, [pc, #180]	; (8011870 <RadioSetRxConfig+0x1dc>)
 80117bc:	2100      	movs	r1, #0
 80117be:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80117c2:	4a2b      	ldr	r2, [pc, #172]	; (8011870 <RadioSetRxConfig+0x1dc>)
 80117c4:	2101      	movs	r1, #1
 80117c6:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80117c8:	3b05      	subs	r3, #5
 80117ca:	b2db      	uxtb	r3, r3
 80117cc:	428b      	cmp	r3, r1
 80117ce:	d939      	bls.n	8011844 <RadioSetRxConfig+0x1b0>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80117d0:	4b27      	ldr	r3, [pc, #156]	; (8011870 <RadioSetRxConfig+0x1dc>)
 80117d2:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80117d6:	4c26      	ldr	r4, [pc, #152]	; (8011870 <RadioSetRxConfig+0x1dc>)
 80117d8:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80117da:	4b26      	ldr	r3, [pc, #152]	; (8011874 <RadioSetRxConfig+0x1e0>)
 80117dc:	781b      	ldrb	r3, [r3, #0]
 80117de:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80117e0:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80117e4:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80117e8:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 80117ec:	f7ff fb1e 	bl	8010e2c <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80117f0:	2001      	movs	r0, #1
 80117f2:	f7ff fe3f 	bl	8011474 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80117f6:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80117fa:	f000 fb47 	bl	8011e8c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80117fe:	f104 000e 	add.w	r0, r4, #14
 8011802:	f000 fd4f 	bl	80122a4 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8011806:	fa5f f08a 	uxtb.w	r0, sl
 801180a:	f000 fb03 	bl	8011e14 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801180e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8011812:	2b01      	cmp	r3, #1
 8011814:	d021      	beq.n	801185a <RadioSetRxConfig+0x1c6>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8011816:	f240 7036 	movw	r0, #1846	; 0x736
 801181a:	f000 fbbf 	bl	8011f9c <SUBGRF_ReadRegister>
 801181e:	f040 0104 	orr.w	r1, r0, #4
 8011822:	b2c9      	uxtb	r1, r1
 8011824:	f240 7036 	movw	r0, #1846	; 0x736
 8011828:	f000 fac6 	bl	8011db8 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 801182c:	4b10      	ldr	r3, [pc, #64]	; (8011870 <RadioSetRxConfig+0x1dc>)
 801182e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011832:	609a      	str	r2, [r3, #8]
}
 8011834:	e751      	b.n	80116da <RadioSetRxConfig+0x46>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8011836:	2e0c      	cmp	r6, #12
 8011838:	d1bf      	bne.n	80117ba <RadioSetRxConfig+0x126>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801183a:	4a0d      	ldr	r2, [pc, #52]	; (8011870 <RadioSetRxConfig+0x1dc>)
 801183c:	2101      	movs	r1, #1
 801183e:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 8011842:	e7be      	b.n	80117c2 <RadioSetRxConfig+0x12e>
                if( preambleLen < 12 )
 8011844:	f1b9 0f0b 	cmp.w	r9, #11
 8011848:	d803      	bhi.n	8011852 <RadioSetRxConfig+0x1be>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801184a:	4613      	mov	r3, r2
 801184c:	220c      	movs	r2, #12
 801184e:	839a      	strh	r2, [r3, #28]
 8011850:	e7c1      	b.n	80117d6 <RadioSetRxConfig+0x142>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8011852:	4b07      	ldr	r3, [pc, #28]	; (8011870 <RadioSetRxConfig+0x1dc>)
 8011854:	f8a3 901c 	strh.w	r9, [r3, #28]
 8011858:	e7bd      	b.n	80117d6 <RadioSetRxConfig+0x142>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801185a:	f240 7036 	movw	r0, #1846	; 0x736
 801185e:	f000 fb9d 	bl	8011f9c <SUBGRF_ReadRegister>
 8011862:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8011866:	f240 7036 	movw	r0, #1846	; 0x736
 801186a:	f000 faa5 	bl	8011db8 <SUBGRF_WriteRegister>
 801186e:	e7dd      	b.n	801182c <RadioSetRxConfig+0x198>
 8011870:	20000f64 	.word	0x20000f64
 8011874:	20000118 	.word	0x20000118
 8011878:	08013ee8 	.word	0x08013ee8
 801187c:	08014cb8 	.word	0x08014cb8

08011880 <RadioIsChannelFree>:
{
 8011880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011882:	b08b      	sub	sp, #44	; 0x2c
 8011884:	4604      	mov	r4, r0
 8011886:	460f      	mov	r7, r1
 8011888:	4616      	mov	r6, r2
 801188a:	461d      	mov	r5, r3
    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 801188c:	f7ff face 	bl	8010e2c <RadioStandby>
    RadioSetModem( MODEM_FSK );
 8011890:	2000      	movs	r0, #0
 8011892:	f7ff fdef 	bl	8011474 <RadioSetModem>
    RadioSetChannel( freq );
 8011896:	4620      	mov	r0, r4
 8011898:	f7ff fcf8 	bl	801128c <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 801189c:	2301      	movs	r3, #1
 801189e:	9309      	str	r3, [sp, #36]	; 0x24
 80118a0:	2400      	movs	r4, #0
 80118a2:	9408      	str	r4, [sp, #32]
 80118a4:	9407      	str	r4, [sp, #28]
 80118a6:	9406      	str	r4, [sp, #24]
 80118a8:	9405      	str	r4, [sp, #20]
 80118aa:	9404      	str	r4, [sp, #16]
 80118ac:	9403      	str	r4, [sp, #12]
 80118ae:	9402      	str	r4, [sp, #8]
 80118b0:	2303      	movs	r3, #3
 80118b2:	9301      	str	r3, [sp, #4]
 80118b4:	9700      	str	r7, [sp, #0]
 80118b6:	4623      	mov	r3, r4
 80118b8:	f44f 7216 	mov.w	r2, #600	; 0x258
 80118bc:	4639      	mov	r1, r7
 80118be:	4620      	mov	r0, r4
 80118c0:	f7ff fee8 	bl	8011694 <RadioSetRxConfig>
    RadioRx( 0 );
 80118c4:	4620      	mov	r0, r4
 80118c6:	f7ff fcf9 	bl	80112bc <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 80118ca:	f7ff fc93 	bl	80111f4 <RadioGetWakeupTime>
 80118ce:	f7f0 f893 	bl	80019f8 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 80118d2:	f001 fac9 	bl	8012e68 <UTIL_TIMER_GetCurrentTime>
 80118d6:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80118d8:	4620      	mov	r0, r4
 80118da:	f001 facf 	bl	8012e7c <UTIL_TIMER_GetElapsedTime>
 80118de:	42a8      	cmp	r0, r5
 80118e0:	d206      	bcs.n	80118f0 <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 80118e2:	2000      	movs	r0, #0
 80118e4:	f7ff fcb0 	bl	8011248 <RadioRssi>
        if( rssi > rssiThresh )
 80118e8:	42b0      	cmp	r0, r6
 80118ea:	ddf5      	ble.n	80118d8 <RadioIsChannelFree+0x58>
            status = false;
 80118ec:	2400      	movs	r4, #0
 80118ee:	e000      	b.n	80118f2 <RadioIsChannelFree+0x72>
    bool status = true;
 80118f0:	2401      	movs	r4, #1
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 80118f2:	f7ff fa9b 	bl	8010e2c <RadioStandby>
}
 80118f6:	4620      	mov	r0, r4
 80118f8:	b00b      	add	sp, #44	; 0x2c
 80118fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080118fc <RadioInit>:
{
 80118fc:	b570      	push	{r4, r5, r6, lr}
 80118fe:	b082      	sub	sp, #8
    RadioEvents = events;
 8011900:	4b1d      	ldr	r3, [pc, #116]	; (8011978 <RadioInit+0x7c>)
 8011902:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 8011904:	4d1d      	ldr	r5, [pc, #116]	; (801197c <RadioInit+0x80>)
 8011906:	2400      	movs	r4, #0
 8011908:	706c      	strb	r4, [r5, #1]
    SubgRf.TxTimeout = 0;
 801190a:	606c      	str	r4, [r5, #4]
    SubgRf.RxTimeout = 0;
 801190c:	60ac      	str	r4, [r5, #8]
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801190e:	65ac      	str	r4, [r5, #88]	; 0x58
    SUBGRF_Init( RadioOnDioIrq );
 8011910:	481b      	ldr	r0, [pc, #108]	; (8011980 <RadioInit+0x84>)
 8011912:	f000 fb67 	bl	8011fe4 <SUBGRF_Init>
    SubgRf.PublicNetwork.Current = false;
 8011916:	736c      	strb	r4, [r5, #13]
    SubgRf.PublicNetwork.Previous = false;
 8011918:	732c      	strb	r4, [r5, #12]
    SUBGRF_SetRegulatorMode( );
 801191a:	f000 f8fa 	bl	8011b12 <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 801191e:	4621      	mov	r1, r4
 8011920:	4620      	mov	r0, r4
 8011922:	f000 f9f1 	bl	8011d08 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8011926:	2204      	movs	r2, #4
 8011928:	4621      	mov	r1, r4
 801192a:	2001      	movs	r0, #1
 801192c:	f000 fbc9 	bl	80120c2 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8011930:	4623      	mov	r3, r4
 8011932:	4622      	mov	r2, r4
 8011934:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011938:	4608      	mov	r0, r1
 801193a:	f000 f97a 	bl	8011c32 <SUBGRF_SetDioIrqParams>
    RadioSleep();
 801193e:	f7ff fcf5 	bl	801132c <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8011942:	4e10      	ldr	r6, [pc, #64]	; (8011984 <RadioInit+0x88>)
 8011944:	9400      	str	r4, [sp, #0]
 8011946:	4b10      	ldr	r3, [pc, #64]	; (8011988 <RadioInit+0x8c>)
 8011948:	4622      	mov	r2, r4
 801194a:	f04f 31ff 	mov.w	r1, #4294967295
 801194e:	4630      	mov	r0, r6
 8011950:	f001 fa6c 	bl	8012e2c <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8011954:	4d0d      	ldr	r5, [pc, #52]	; (801198c <RadioInit+0x90>)
 8011956:	9400      	str	r4, [sp, #0]
 8011958:	4b0d      	ldr	r3, [pc, #52]	; (8011990 <RadioInit+0x94>)
 801195a:	4622      	mov	r2, r4
 801195c:	f04f 31ff 	mov.w	r1, #4294967295
 8011960:	4628      	mov	r0, r5
 8011962:	f001 fa63 	bl	8012e2c <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8011966:	4630      	mov	r0, r6
 8011968:	f001 fabe 	bl	8012ee8 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 801196c:	4628      	mov	r0, r5
 801196e:	f001 fabb 	bl	8012ee8 <UTIL_TIMER_Stop>
}
 8011972:	b002      	add	sp, #8
 8011974:	bd70      	pop	{r4, r5, r6, pc}
 8011976:	bf00      	nop
 8011978:	20000f48 	.word	0x20000f48
 801197c:	20000f64 	.word	0x20000f64
 8011980:	080111e1 	.word	0x080111e1
 8011984:	20000fc0 	.word	0x20000fc0
 8011988:	08010d39 	.word	0x08010d39
 801198c:	20000f4c 	.word	0x20000f4c
 8011990:	08010d61 	.word	0x08010d61

08011994 <SUBGRF_WriteCommand>:
    CRITICAL_SECTION_END();
}

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8011994:	b510      	push	{r4, lr}
 8011996:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011998:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801199c:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801199e:	460a      	mov	r2, r1
 80119a0:	4601      	mov	r1, r0
 80119a2:	4803      	ldr	r0, [pc, #12]	; (80119b0 <SUBGRF_WriteCommand+0x1c>)
 80119a4:	f7f5 fb82 	bl	80070ac <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80119a8:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 80119ac:	bd10      	pop	{r4, pc}
 80119ae:	bf00      	nop
 80119b0:	2000028c 	.word	0x2000028c

080119b4 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80119b4:	b510      	push	{r4, lr}
 80119b6:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80119b8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80119bc:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 80119be:	460a      	mov	r2, r1
 80119c0:	4601      	mov	r1, r0
 80119c2:	4803      	ldr	r0, [pc, #12]	; (80119d0 <SUBGRF_ReadCommand+0x1c>)
 80119c4:	f7f5 fbc8 	bl	8007158 <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80119c8:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 80119cc:	bd10      	pop	{r4, pc}
 80119ce:	bf00      	nop
 80119d0:	2000028c 	.word	0x2000028c

080119d4 <SUBGRF_GetOperatingMode>:
}
 80119d4:	4b01      	ldr	r3, [pc, #4]	; (80119dc <SUBGRF_GetOperatingMode+0x8>)
 80119d6:	7818      	ldrb	r0, [r3, #0]
 80119d8:	4770      	bx	lr
 80119da:	bf00      	nop
 80119dc:	20000fde 	.word	0x20000fde

080119e0 <SUBGRF_SetStandby>:
{
 80119e0:	b500      	push	{lr}
 80119e2:	b083      	sub	sp, #12
 80119e4:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 80119e8:	2201      	movs	r2, #1
 80119ea:	f10d 0107 	add.w	r1, sp, #7
 80119ee:	2080      	movs	r0, #128	; 0x80
 80119f0:	f7ff ffd0 	bl	8011994 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 80119f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80119f8:	b92b      	cbnz	r3, 8011a06 <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 80119fa:	4b05      	ldr	r3, [pc, #20]	; (8011a10 <SUBGRF_SetStandby+0x30>)
 80119fc:	2201      	movs	r2, #1
 80119fe:	701a      	strb	r2, [r3, #0]
}
 8011a00:	b003      	add	sp, #12
 8011a02:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 8011a06:	4b02      	ldr	r3, [pc, #8]	; (8011a10 <SUBGRF_SetStandby+0x30>)
 8011a08:	2202      	movs	r2, #2
 8011a0a:	701a      	strb	r2, [r3, #0]
}
 8011a0c:	e7f8      	b.n	8011a00 <SUBGRF_SetStandby+0x20>
 8011a0e:	bf00      	nop
 8011a10:	20000fde 	.word	0x20000fde

08011a14 <SUBGRF_SetTx>:
{
 8011a14:	b500      	push	{lr}
 8011a16:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 8011a18:	4b0a      	ldr	r3, [pc, #40]	; (8011a44 <SUBGRF_SetTx+0x30>)
 8011a1a:	2204      	movs	r2, #4
 8011a1c:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8011a1e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8011a22:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8011a26:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8011a2a:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8011a2e:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8011a32:	2203      	movs	r2, #3
 8011a34:	a901      	add	r1, sp, #4
 8011a36:	2083      	movs	r0, #131	; 0x83
 8011a38:	f7ff ffac 	bl	8011994 <SUBGRF_WriteCommand>
}
 8011a3c:	b003      	add	sp, #12
 8011a3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011a42:	bf00      	nop
 8011a44:	20000fde 	.word	0x20000fde

08011a48 <SUBGRF_SetRx>:
{
 8011a48:	b500      	push	{lr}
 8011a4a:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 8011a4c:	4b0a      	ldr	r3, [pc, #40]	; (8011a78 <SUBGRF_SetRx+0x30>)
 8011a4e:	2205      	movs	r2, #5
 8011a50:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8011a52:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8011a56:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8011a5a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8011a5e:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8011a62:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8011a66:	2203      	movs	r2, #3
 8011a68:	a901      	add	r1, sp, #4
 8011a6a:	2082      	movs	r0, #130	; 0x82
 8011a6c:	f7ff ff92 	bl	8011994 <SUBGRF_WriteCommand>
}
 8011a70:	b003      	add	sp, #12
 8011a72:	f85d fb04 	ldr.w	pc, [sp], #4
 8011a76:	bf00      	nop
 8011a78:	20000fde 	.word	0x20000fde

08011a7c <SUBGRF_SetRxDutyCycle>:
{
 8011a7c:	b500      	push	{lr}
 8011a7e:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8011a80:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8011a84:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8011a88:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8011a8c:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8011a90:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8011a94:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8011a98:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8011a9c:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8011aa0:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8011aa4:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8011aa8:	2206      	movs	r2, #6
 8011aaa:	4669      	mov	r1, sp
 8011aac:	2094      	movs	r0, #148	; 0x94
 8011aae:	f7ff ff71 	bl	8011994 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8011ab2:	4b03      	ldr	r3, [pc, #12]	; (8011ac0 <SUBGRF_SetRxDutyCycle+0x44>)
 8011ab4:	2206      	movs	r2, #6
 8011ab6:	701a      	strb	r2, [r3, #0]
}
 8011ab8:	b003      	add	sp, #12
 8011aba:	f85d fb04 	ldr.w	pc, [sp], #4
 8011abe:	bf00      	nop
 8011ac0:	20000fde 	.word	0x20000fde

08011ac4 <SUBGRF_SetCad>:
{
 8011ac4:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8011ac6:	2200      	movs	r2, #0
 8011ac8:	4611      	mov	r1, r2
 8011aca:	20c5      	movs	r0, #197	; 0xc5
 8011acc:	f7ff ff62 	bl	8011994 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8011ad0:	4b01      	ldr	r3, [pc, #4]	; (8011ad8 <SUBGRF_SetCad+0x14>)
 8011ad2:	2207      	movs	r2, #7
 8011ad4:	701a      	strb	r2, [r3, #0]
}
 8011ad6:	bd08      	pop	{r3, pc}
 8011ad8:	20000fde 	.word	0x20000fde

08011adc <SUBGRF_SetTxContinuousWave>:
{
 8011adc:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8011ade:	2200      	movs	r2, #0
 8011ae0:	4611      	mov	r1, r2
 8011ae2:	20d1      	movs	r0, #209	; 0xd1
 8011ae4:	f7ff ff56 	bl	8011994 <SUBGRF_WriteCommand>
}
 8011ae8:	bd08      	pop	{r3, pc}

08011aea <SUBGRF_SetTxInfinitePreamble>:
{
 8011aea:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8011aec:	2200      	movs	r2, #0
 8011aee:	4611      	mov	r1, r2
 8011af0:	20d2      	movs	r0, #210	; 0xd2
 8011af2:	f7ff ff4f 	bl	8011994 <SUBGRF_WriteCommand>
}
 8011af6:	bd08      	pop	{r3, pc}

08011af8 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 8011af8:	b500      	push	{lr}
 8011afa:	b083      	sub	sp, #12
 8011afc:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8011b00:	2201      	movs	r2, #1
 8011b02:	f10d 0107 	add.w	r1, sp, #7
 8011b06:	209f      	movs	r0, #159	; 0x9f
 8011b08:	f7ff ff44 	bl	8011994 <SUBGRF_WriteCommand>
}
 8011b0c:	b003      	add	sp, #12
 8011b0e:	f85d fb04 	ldr.w	pc, [sp], #4

08011b12 <SUBGRF_SetRegulatorMode>:
{
 8011b12:	b500      	push	{lr}
 8011b14:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8011b16:	f7f1 f8ed 	bl	8002cf4 <RBI_IsDCDC>
 8011b1a:	2801      	cmp	r0, #1
 8011b1c:	d00b      	beq.n	8011b36 <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 8011b1e:	2300      	movs	r3, #0
 8011b20:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8011b24:	2201      	movs	r2, #1
 8011b26:	f10d 0107 	add.w	r1, sp, #7
 8011b2a:	2096      	movs	r0, #150	; 0x96
 8011b2c:	f7ff ff32 	bl	8011994 <SUBGRF_WriteCommand>
}
 8011b30:	b003      	add	sp, #12
 8011b32:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 8011b36:	2301      	movs	r3, #1
 8011b38:	f88d 3007 	strb.w	r3, [sp, #7]
 8011b3c:	e7f2      	b.n	8011b24 <SUBGRF_SetRegulatorMode+0x12>

08011b3e <SUBGRF_Calibrate>:
{
 8011b3e:	b500      	push	{lr}
 8011b40:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8011b42:	f000 0340 	and.w	r3, r0, #64	; 0x40
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8011b46:	f000 0220 	and.w	r2, r0, #32
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8011b4a:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8011b4c:	f000 0210 	and.w	r2, r0, #16
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8011b50:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8011b52:	f000 0208 	and.w	r2, r0, #8
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8011b56:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8011b58:	f000 0204 	and.w	r2, r0, #4
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8011b5c:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8011b5e:	f000 0202 	and.w	r2, r0, #2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8011b62:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8011b64:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8011b68:	4318      	orrs	r0, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8011b6a:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8011b6e:	2201      	movs	r2, #1
 8011b70:	f10d 0107 	add.w	r1, sp, #7
 8011b74:	2089      	movs	r0, #137	; 0x89
 8011b76:	f7ff ff0d 	bl	8011994 <SUBGRF_WriteCommand>
}
 8011b7a:	b003      	add	sp, #12
 8011b7c:	f85d fb04 	ldr.w	pc, [sp], #4

08011b80 <SUBGRF_CalibrateImage>:
{
 8011b80:	b500      	push	{lr}
 8011b82:	b083      	sub	sp, #12
    if( freq > 900000000 )
 8011b84:	4b1c      	ldr	r3, [pc, #112]	; (8011bf8 <SUBGRF_CalibrateImage+0x78>)
 8011b86:	4298      	cmp	r0, r3
 8011b88:	d90d      	bls.n	8011ba6 <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 8011b8a:	23e1      	movs	r3, #225	; 0xe1
 8011b8c:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 8011b90:	23e9      	movs	r3, #233	; 0xe9
 8011b92:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8011b96:	2202      	movs	r2, #2
 8011b98:	a901      	add	r1, sp, #4
 8011b9a:	2098      	movs	r0, #152	; 0x98
 8011b9c:	f7ff fefa 	bl	8011994 <SUBGRF_WriteCommand>
}
 8011ba0:	b003      	add	sp, #12
 8011ba2:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 8011ba6:	4b15      	ldr	r3, [pc, #84]	; (8011bfc <SUBGRF_CalibrateImage+0x7c>)
 8011ba8:	4298      	cmp	r0, r3
 8011baa:	d906      	bls.n	8011bba <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 8011bac:	23d7      	movs	r3, #215	; 0xd7
 8011bae:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 8011bb2:	23db      	movs	r3, #219	; 0xdb
 8011bb4:	f88d 3005 	strb.w	r3, [sp, #5]
 8011bb8:	e7ed      	b.n	8011b96 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 8011bba:	4b11      	ldr	r3, [pc, #68]	; (8011c00 <SUBGRF_CalibrateImage+0x80>)
 8011bbc:	4298      	cmp	r0, r3
 8011bbe:	d906      	bls.n	8011bce <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 8011bc0:	23c1      	movs	r3, #193	; 0xc1
 8011bc2:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 8011bc6:	23c5      	movs	r3, #197	; 0xc5
 8011bc8:	f88d 3005 	strb.w	r3, [sp, #5]
 8011bcc:	e7e3      	b.n	8011b96 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 8011bce:	4b0d      	ldr	r3, [pc, #52]	; (8011c04 <SUBGRF_CalibrateImage+0x84>)
 8011bd0:	4298      	cmp	r0, r3
 8011bd2:	d906      	bls.n	8011be2 <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 8011bd4:	2375      	movs	r3, #117	; 0x75
 8011bd6:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 8011bda:	2381      	movs	r3, #129	; 0x81
 8011bdc:	f88d 3005 	strb.w	r3, [sp, #5]
 8011be0:	e7d9      	b.n	8011b96 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 8011be2:	4b09      	ldr	r3, [pc, #36]	; (8011c08 <SUBGRF_CalibrateImage+0x88>)
 8011be4:	4298      	cmp	r0, r3
 8011be6:	d9d6      	bls.n	8011b96 <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x6B;
 8011be8:	236b      	movs	r3, #107	; 0x6b
 8011bea:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 8011bee:	236f      	movs	r3, #111	; 0x6f
 8011bf0:	f88d 3005 	strb.w	r3, [sp, #5]
 8011bf4:	e7cf      	b.n	8011b96 <SUBGRF_CalibrateImage+0x16>
 8011bf6:	bf00      	nop
 8011bf8:	35a4e900 	.word	0x35a4e900
 8011bfc:	32a9f880 	.word	0x32a9f880
 8011c00:	2de54480 	.word	0x2de54480
 8011c04:	1b6b0b00 	.word	0x1b6b0b00
 8011c08:	1954fc40 	.word	0x1954fc40

08011c0c <SUBGRF_SetPaConfig>:
{
 8011c0c:	b500      	push	{lr}
 8011c0e:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 8011c10:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 8011c14:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 8011c18:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 8011c1c:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8011c20:	2204      	movs	r2, #4
 8011c22:	eb0d 0102 	add.w	r1, sp, r2
 8011c26:	2095      	movs	r0, #149	; 0x95
 8011c28:	f7ff feb4 	bl	8011994 <SUBGRF_WriteCommand>
}
 8011c2c:	b003      	add	sp, #12
 8011c2e:	f85d fb04 	ldr.w	pc, [sp], #4

08011c32 <SUBGRF_SetDioIrqParams>:
{
 8011c32:	b500      	push	{lr}
 8011c34:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8011c36:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 8011c3a:	f88d c000 	strb.w	ip, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8011c3e:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8011c42:	0a08      	lsrs	r0, r1, #8
 8011c44:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8011c48:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8011c4c:	0a11      	lsrs	r1, r2, #8
 8011c4e:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8011c52:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8011c56:	0a1a      	lsrs	r2, r3, #8
 8011c58:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8011c5c:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8011c60:	2208      	movs	r2, #8
 8011c62:	4669      	mov	r1, sp
 8011c64:	4610      	mov	r0, r2
 8011c66:	f7ff fe95 	bl	8011994 <SUBGRF_WriteCommand>
}
 8011c6a:	b003      	add	sp, #12
 8011c6c:	f85d fb04 	ldr.w	pc, [sp], #4

08011c70 <SUBGRF_SetTcxoMode>:
{
 8011c70:	b500      	push	{lr}
 8011c72:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 8011c74:	f000 0007 	and.w	r0, r0, #7
 8011c78:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8011c7c:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8011c80:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8011c84:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8011c88:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8011c8c:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8011c90:	2204      	movs	r2, #4
 8011c92:	eb0d 0102 	add.w	r1, sp, r2
 8011c96:	2097      	movs	r0, #151	; 0x97
 8011c98:	f7ff fe7c 	bl	8011994 <SUBGRF_WriteCommand>
}
 8011c9c:	b003      	add	sp, #12
 8011c9e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08011ca4 <SUBGRF_SetRfFrequency>:
{
 8011ca4:	b510      	push	{r4, lr}
 8011ca6:	b082      	sub	sp, #8
 8011ca8:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 8011caa:	4b12      	ldr	r3, [pc, #72]	; (8011cf4 <SUBGRF_SetRfFrequency+0x50>)
 8011cac:	781b      	ldrb	r3, [r3, #0]
 8011cae:	b1d3      	cbz	r3, 8011ce6 <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8011cb0:	4a11      	ldr	r2, [pc, #68]	; (8011cf8 <SUBGRF_SetRfFrequency+0x54>)
 8011cb2:	2300      	movs	r3, #0
 8011cb4:	0660      	lsls	r0, r4, #25
 8011cb6:	09e1      	lsrs	r1, r4, #7
 8011cb8:	f7ee ff7e 	bl	8000bb8 <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8011cbc:	0e03      	lsrs	r3, r0, #24
 8011cbe:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8011cc2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8011cc6:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8011cca:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8011cce:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8011cd2:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8011cd6:	2204      	movs	r2, #4
 8011cd8:	eb0d 0102 	add.w	r1, sp, r2
 8011cdc:	2086      	movs	r0, #134	; 0x86
 8011cde:	f7ff fe59 	bl	8011994 <SUBGRF_WriteCommand>
}
 8011ce2:	b002      	add	sp, #8
 8011ce4:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 8011ce6:	f7ff ff4b 	bl	8011b80 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8011cea:	4b02      	ldr	r3, [pc, #8]	; (8011cf4 <SUBGRF_SetRfFrequency+0x50>)
 8011cec:	2201      	movs	r2, #1
 8011cee:	701a      	strb	r2, [r3, #0]
 8011cf0:	e7de      	b.n	8011cb0 <SUBGRF_SetRfFrequency+0xc>
 8011cf2:	bf00      	nop
 8011cf4:	20000fdc 	.word	0x20000fdc
 8011cf8:	01e84800 	.word	0x01e84800

08011cfc <SUBGRF_GetPacketType>:
}
 8011cfc:	4b01      	ldr	r3, [pc, #4]	; (8011d04 <SUBGRF_GetPacketType+0x8>)
 8011cfe:	7818      	ldrb	r0, [r3, #0]
 8011d00:	4770      	bx	lr
 8011d02:	bf00      	nop
 8011d04:	20000fdf 	.word	0x20000fdf

08011d08 <SUBGRF_SetBufferBaseAddress>:
{
 8011d08:	b500      	push	{lr}
 8011d0a:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 8011d0c:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 8011d10:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8011d14:	2202      	movs	r2, #2
 8011d16:	a901      	add	r1, sp, #4
 8011d18:	208f      	movs	r0, #143	; 0x8f
 8011d1a:	f7ff fe3b 	bl	8011994 <SUBGRF_WriteCommand>
}
 8011d1e:	b003      	add	sp, #12
 8011d20:	f85d fb04 	ldr.w	pc, [sp], #4

08011d24 <SUBGRF_GetRssiInst>:
{
 8011d24:	b500      	push	{lr}
 8011d26:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8011d28:	2201      	movs	r2, #1
 8011d2a:	a901      	add	r1, sp, #4
 8011d2c:	2015      	movs	r0, #21
 8011d2e:	f7ff fe41 	bl	80119b4 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8011d32:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8011d36:	4240      	negs	r0, r0
}
 8011d38:	1040      	asrs	r0, r0, #1
 8011d3a:	b003      	add	sp, #12
 8011d3c:	f85d fb04 	ldr.w	pc, [sp], #4

08011d40 <SUBGRF_GetPacketStatus>:
{
 8011d40:	b510      	push	{r4, lr}
 8011d42:	b082      	sub	sp, #8
 8011d44:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8011d46:	2203      	movs	r2, #3
 8011d48:	a901      	add	r1, sp, #4
 8011d4a:	2014      	movs	r0, #20
 8011d4c:	f7ff fe32 	bl	80119b4 <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 8011d50:	f7ff ffd4 	bl	8011cfc <SUBGRF_GetPacketType>
 8011d54:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 8011d56:	b148      	cbz	r0, 8011d6c <SUBGRF_GetPacketStatus+0x2c>
 8011d58:	2801      	cmp	r0, #1
 8011d5a:	d018      	beq.n	8011d8e <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8011d5c:	2214      	movs	r2, #20
 8011d5e:	2100      	movs	r1, #0
 8011d60:	4620      	mov	r0, r4
 8011d62:	f000 fe8e 	bl	8012a82 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8011d66:	230f      	movs	r3, #15
 8011d68:	7023      	strb	r3, [r4, #0]
}
 8011d6a:	e00e      	b.n	8011d8a <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8011d6c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011d70:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8011d72:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011d76:	425b      	negs	r3, r3
 8011d78:	105b      	asrs	r3, r3, #1
 8011d7a:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8011d7c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011d80:	425b      	negs	r3, r3
 8011d82:	105b      	asrs	r3, r3, #1
 8011d84:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8011d86:	2300      	movs	r3, #0
 8011d88:	60a3      	str	r3, [r4, #8]
}
 8011d8a:	b002      	add	sp, #8
 8011d8c:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8011d8e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011d92:	425b      	negs	r3, r3
 8011d94:	105b      	asrs	r3, r3, #1
 8011d96:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8011d98:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 8011d9c:	3302      	adds	r3, #2
 8011d9e:	109b      	asrs	r3, r3, #2
 8011da0:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8011da2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011da6:	425b      	negs	r3, r3
 8011da8:	105b      	asrs	r3, r3, #1
 8011daa:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8011dac:	4b01      	ldr	r3, [pc, #4]	; (8011db4 <SUBGRF_GetPacketStatus+0x74>)
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	6123      	str	r3, [r4, #16]
            break;
 8011db2:	e7ea      	b.n	8011d8a <SUBGRF_GetPacketStatus+0x4a>
 8011db4:	20000fd8 	.word	0x20000fd8

08011db8 <SUBGRF_WriteRegister>:
{
 8011db8:	b500      	push	{lr}
 8011dba:	b083      	sub	sp, #12
 8011dbc:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8011dc0:	2301      	movs	r3, #1
 8011dc2:	f10d 0207 	add.w	r2, sp, #7
 8011dc6:	4601      	mov	r1, r0
 8011dc8:	4802      	ldr	r0, [pc, #8]	; (8011dd4 <SUBGRF_WriteRegister+0x1c>)
 8011dca:	f7f5 f8cb 	bl	8006f64 <HAL_SUBGHZ_WriteRegisters>
}
 8011dce:	b003      	add	sp, #12
 8011dd0:	f85d fb04 	ldr.w	pc, [sp], #4
 8011dd4:	2000028c 	.word	0x2000028c

08011dd8 <SUBGRF_SetRxBoosted>:
{
 8011dd8:	b510      	push	{r4, lr}
 8011dda:	b082      	sub	sp, #8
 8011ddc:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 8011dde:	4b0c      	ldr	r3, [pc, #48]	; (8011e10 <SUBGRF_SetRxBoosted+0x38>)
 8011de0:	2205      	movs	r2, #5
 8011de2:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8011de4:	2197      	movs	r1, #151	; 0x97
 8011de6:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8011dea:	f7ff ffe5 	bl	8011db8 <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8011dee:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8011df2:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8011df6:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8011dfa:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8011dfe:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8011e02:	2203      	movs	r2, #3
 8011e04:	a901      	add	r1, sp, #4
 8011e06:	2082      	movs	r0, #130	; 0x82
 8011e08:	f7ff fdc4 	bl	8011994 <SUBGRF_WriteCommand>
}
 8011e0c:	b002      	add	sp, #8
 8011e0e:	bd10      	pop	{r4, pc}
 8011e10:	20000fde 	.word	0x20000fde

08011e14 <SUBGRF_SetLoRaSymbNumTimeout>:
{
 8011e14:	b500      	push	{lr}
 8011e16:	b083      	sub	sp, #12
 8011e18:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8011e1c:	2201      	movs	r2, #1
 8011e1e:	f10d 0107 	add.w	r1, sp, #7
 8011e22:	20a0      	movs	r0, #160	; 0xa0
 8011e24:	f7ff fdb6 	bl	8011994 <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 8011e28:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011e2c:	2b3f      	cmp	r3, #63	; 0x3f
 8011e2e:	d90f      	bls.n	8011e50 <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 8011e30:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 8011e32:	2200      	movs	r2, #0
        while( mant > 31 )
 8011e34:	e002      	b.n	8011e3c <SUBGRF_SetLoRaSymbNumTimeout+0x28>
            mant >>= 2;
 8011e36:	089b      	lsrs	r3, r3, #2
            exp++;
 8011e38:	1c51      	adds	r1, r2, #1
 8011e3a:	b2ca      	uxtb	r2, r1
        while( mant > 31 )
 8011e3c:	2b1f      	cmp	r3, #31
 8011e3e:	d8fa      	bhi.n	8011e36 <SUBGRF_SetLoRaSymbNumTimeout+0x22>
        reg = exp + ( mant << 3 );
 8011e40:	00d9      	lsls	r1, r3, #3
 8011e42:	b2c9      	uxtb	r1, r1
 8011e44:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8011e46:	b2c9      	uxtb	r1, r1
 8011e48:	f240 7006 	movw	r0, #1798	; 0x706
 8011e4c:	f7ff ffb4 	bl	8011db8 <SUBGRF_WriteRegister>
}
 8011e50:	b003      	add	sp, #12
 8011e52:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08011e58 <SUBGRF_SetPacketType>:
{
 8011e58:	b500      	push	{lr}
 8011e5a:	b083      	sub	sp, #12
 8011e5c:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 8011e60:	b2c3      	uxtb	r3, r0
 8011e62:	4a09      	ldr	r2, [pc, #36]	; (8011e88 <SUBGRF_SetPacketType+0x30>)
 8011e64:	7013      	strb	r3, [r2, #0]
    if( packetType == PACKET_TYPE_GFSK )
 8011e66:	b143      	cbz	r3, 8011e7a <SUBGRF_SetPacketType+0x22>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8011e68:	2201      	movs	r2, #1
 8011e6a:	f10d 0107 	add.w	r1, sp, #7
 8011e6e:	208a      	movs	r0, #138	; 0x8a
 8011e70:	f7ff fd90 	bl	8011994 <SUBGRF_WriteCommand>
}
 8011e74:	b003      	add	sp, #12
 8011e76:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8011e7a:	2100      	movs	r1, #0
 8011e7c:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8011e80:	f7ff ff9a 	bl	8011db8 <SUBGRF_WriteRegister>
 8011e84:	e7f0      	b.n	8011e68 <SUBGRF_SetPacketType+0x10>
 8011e86:	bf00      	nop
 8011e88:	20000fdf 	.word	0x20000fdf

08011e8c <SUBGRF_SetModulationParams>:
{
 8011e8c:	b510      	push	{r4, lr}
 8011e8e:	b082      	sub	sp, #8
 8011e90:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8011e92:	4b3e      	ldr	r3, [pc, #248]	; (8011f8c <SUBGRF_SetModulationParams+0x100>)
 8011e94:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011e98:	ab02      	add	r3, sp, #8
 8011e9a:	e903 0003 	stmdb	r3, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 8011e9e:	7820      	ldrb	r0, [r4, #0]
 8011ea0:	4b3b      	ldr	r3, [pc, #236]	; (8011f90 <SUBGRF_SetModulationParams+0x104>)
 8011ea2:	781b      	ldrb	r3, [r3, #0]
 8011ea4:	4298      	cmp	r0, r3
 8011ea6:	d106      	bne.n	8011eb6 <SUBGRF_SetModulationParams+0x2a>
    switch( modulationParams->PacketType )
 8011ea8:	7823      	ldrb	r3, [r4, #0]
 8011eaa:	2b03      	cmp	r3, #3
 8011eac:	d82c      	bhi.n	8011f08 <SUBGRF_SetModulationParams+0x7c>
 8011eae:	e8df f003 	tbb	[pc, r3]
 8011eb2:	4205      	.short	0x4205
 8011eb4:	542d      	.short	0x542d
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8011eb6:	f7ff ffcf 	bl	8011e58 <SUBGRF_SetPacketType>
 8011eba:	e7f5      	b.n	8011ea8 <SUBGRF_SetModulationParams+0x1c>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8011ebc:	6862      	ldr	r2, [r4, #4]
 8011ebe:	4b35      	ldr	r3, [pc, #212]	; (8011f94 <SUBGRF_SetModulationParams+0x108>)
 8011ec0:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8011ec4:	0c1a      	lsrs	r2, r3, #16
 8011ec6:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8011eca:	0a1a      	lsrs	r2, r3, #8
 8011ecc:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8011ed0:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8011ed4:	7b23      	ldrb	r3, [r4, #12]
 8011ed6:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8011eda:	7b63      	ldrb	r3, [r4, #13]
 8011edc:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8011ee0:	68a1      	ldr	r1, [r4, #8]
 8011ee2:	4a2d      	ldr	r2, [pc, #180]	; (8011f98 <SUBGRF_SetModulationParams+0x10c>)
 8011ee4:	2300      	movs	r3, #0
 8011ee6:	0648      	lsls	r0, r1, #25
 8011ee8:	09c9      	lsrs	r1, r1, #7
 8011eea:	f7ee fe65 	bl	8000bb8 <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8011eee:	0c03      	lsrs	r3, r0, #16
 8011ef0:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8011ef4:	0a03      	lsrs	r3, r0, #8
 8011ef6:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 8011efa:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8011efe:	2208      	movs	r2, #8
 8011f00:	4669      	mov	r1, sp
 8011f02:	208b      	movs	r0, #139	; 0x8b
 8011f04:	f7ff fd46 	bl	8011994 <SUBGRF_WriteCommand>
}
 8011f08:	b002      	add	sp, #8
 8011f0a:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8011f0c:	6922      	ldr	r2, [r4, #16]
 8011f0e:	4b21      	ldr	r3, [pc, #132]	; (8011f94 <SUBGRF_SetModulationParams+0x108>)
 8011f10:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8011f14:	0c1a      	lsrs	r2, r3, #16
 8011f16:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8011f1a:	0a1a      	lsrs	r2, r3, #8
 8011f1c:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8011f20:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8011f24:	7d23      	ldrb	r3, [r4, #20]
 8011f26:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8011f2a:	2204      	movs	r2, #4
 8011f2c:	4669      	mov	r1, sp
 8011f2e:	208b      	movs	r0, #139	; 0x8b
 8011f30:	f7ff fd30 	bl	8011994 <SUBGRF_WriteCommand>
        break;
 8011f34:	e7e8      	b.n	8011f08 <SUBGRF_SetModulationParams+0x7c>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8011f36:	7e23      	ldrb	r3, [r4, #24]
 8011f38:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8011f3c:	7e63      	ldrb	r3, [r4, #25]
 8011f3e:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8011f42:	7ea3      	ldrb	r3, [r4, #26]
 8011f44:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8011f48:	7ee3      	ldrb	r3, [r4, #27]
 8011f4a:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8011f4e:	2204      	movs	r2, #4
 8011f50:	4669      	mov	r1, sp
 8011f52:	208b      	movs	r0, #139	; 0x8b
 8011f54:	f7ff fd1e 	bl	8011994 <SUBGRF_WriteCommand>
        break;
 8011f58:	e7d6      	b.n	8011f08 <SUBGRF_SetModulationParams+0x7c>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8011f5a:	6862      	ldr	r2, [r4, #4]
 8011f5c:	4b0d      	ldr	r3, [pc, #52]	; (8011f94 <SUBGRF_SetModulationParams+0x108>)
 8011f5e:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8011f62:	0c1a      	lsrs	r2, r3, #16
 8011f64:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8011f68:	0a1a      	lsrs	r2, r3, #8
 8011f6a:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8011f6e:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8011f72:	7b23      	ldrb	r3, [r4, #12]
 8011f74:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8011f78:	7b63      	ldrb	r3, [r4, #13]
 8011f7a:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8011f7e:	2205      	movs	r2, #5
 8011f80:	4669      	mov	r1, sp
 8011f82:	208b      	movs	r0, #139	; 0x8b
 8011f84:	f7ff fd06 	bl	8011994 <SUBGRF_WriteCommand>
}
 8011f88:	e7be      	b.n	8011f08 <SUBGRF_SetModulationParams+0x7c>
 8011f8a:	bf00      	nop
 8011f8c:	08013ef0 	.word	0x08013ef0
 8011f90:	20000fdf 	.word	0x20000fdf
 8011f94:	3d090000 	.word	0x3d090000
 8011f98:	01e84800 	.word	0x01e84800

08011f9c <SUBGRF_ReadRegister>:
{
 8011f9c:	b500      	push	{lr}
 8011f9e:	b083      	sub	sp, #12
 8011fa0:	4601      	mov	r1, r0
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8011fa2:	2301      	movs	r3, #1
 8011fa4:	f10d 0207 	add.w	r2, sp, #7
 8011fa8:	4803      	ldr	r0, [pc, #12]	; (8011fb8 <SUBGRF_ReadRegister+0x1c>)
 8011faa:	f7f5 f82b 	bl	8007004 <HAL_SUBGHZ_ReadRegisters>
}
 8011fae:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011fb2:	b003      	add	sp, #12
 8011fb4:	f85d fb04 	ldr.w	pc, [sp], #4
 8011fb8:	2000028c 	.word	0x2000028c

08011fbc <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
}

static void Radio_SMPS_Set(uint8_t level)
{
 8011fbc:	b510      	push	{r4, lr}
 8011fbe:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 8011fc0:	f7f0 fe98 	bl	8002cf4 <RBI_IsDCDC>
 8011fc4:	2801      	cmp	r0, #1
 8011fc6:	d000      	beq.n	8011fca <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 8011fc8:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8011fca:	f640 1023 	movw	r0, #2339	; 0x923
 8011fce:	f7ff ffe5 	bl	8011f9c <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 8011fd2:	f000 01f9 	and.w	r1, r0, #249	; 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8011fd6:	4321      	orrs	r1, r4
 8011fd8:	f640 1023 	movw	r0, #2339	; 0x923
 8011fdc:	f7ff feec 	bl	8011db8 <SUBGRF_WriteRegister>
}
 8011fe0:	e7f2      	b.n	8011fc8 <Radio_SMPS_Set+0xc>
	...

08011fe4 <SUBGRF_Init>:
{
 8011fe4:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 8011fe6:	b108      	cbz	r0, 8011fec <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 8011fe8:	4a16      	ldr	r2, [pc, #88]	; (8012044 <SUBGRF_Init+0x60>)
 8011fea:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 8011fec:	f7ef fbfc 	bl	80017e8 <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8011ff0:	2002      	movs	r0, #2
 8011ff2:	f7ff ffe3 	bl	8011fbc <Radio_SMPS_Set>
    ImageCalibrated = false;
 8011ff6:	2000      	movs	r0, #0
 8011ff8:	4b13      	ldr	r3, [pc, #76]	; (8012048 <SUBGRF_Init+0x64>)
 8011ffa:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 8011ffc:	f7ff fcf0 	bl	80119e0 <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 8012000:	f7f0 fe74 	bl	8002cec <RBI_IsTCXO>
 8012004:	2801      	cmp	r0, #1
 8012006:	d00f      	beq.n	8012028 <SUBGRF_Init+0x44>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8012008:	2120      	movs	r1, #32
 801200a:	f640 1011 	movw	r0, #2321	; 0x911
 801200e:	f7ff fed3 	bl	8011db8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8012012:	2120      	movs	r1, #32
 8012014:	f640 1012 	movw	r0, #2322	; 0x912
 8012018:	f7ff fece 	bl	8011db8 <SUBGRF_WriteRegister>
    RBI_Init();
 801201c:	f7f0 fe5a 	bl	8002cd4 <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 8012020:	4b0a      	ldr	r3, [pc, #40]	; (801204c <SUBGRF_Init+0x68>)
 8012022:	2201      	movs	r2, #1
 8012024:	701a      	strb	r2, [r3, #0]
}
 8012026:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8012028:	2140      	movs	r1, #64	; 0x40
 801202a:	f7ff fe21 	bl	8011c70 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801202e:	2100      	movs	r1, #0
 8012030:	f640 1011 	movw	r0, #2321	; 0x911
 8012034:	f7ff fec0 	bl	8011db8 <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 8012038:	f04f 007f 	mov.w	r0, #127	; 0x7f
 801203c:	f7ff fd7f 	bl	8011b3e <SUBGRF_Calibrate>
 8012040:	e7ec      	b.n	801201c <SUBGRF_Init+0x38>
 8012042:	bf00      	nop
 8012044:	20000fe0 	.word	0x20000fe0
 8012048:	20000fdc 	.word	0x20000fdc
 801204c:	20000fde 	.word	0x20000fde

08012050 <SUBGRF_SetSleep>:
{
 8012050:	b510      	push	{r4, lr}
 8012052:	b082      	sub	sp, #8
 8012054:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8012056:	2000      	movs	r0, #0
 8012058:	f7f0 fe40 	bl	8002cdc <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801205c:	2002      	movs	r0, #2
 801205e:	f7ff ffad 	bl	8011fbc <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8012062:	f004 0004 	and.w	r0, r4, #4
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8012066:	f004 0302 	and.w	r3, r4, #2
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801206a:	4318      	orrs	r0, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801206c:	f004 0401 	and.w	r4, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8012070:	4304      	orrs	r4, r0
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8012072:	f88d 4007 	strb.w	r4, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8012076:	2201      	movs	r2, #1
 8012078:	f10d 0107 	add.w	r1, sp, #7
 801207c:	2084      	movs	r0, #132	; 0x84
 801207e:	f7ff fc89 	bl	8011994 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8012082:	4b02      	ldr	r3, [pc, #8]	; (801208c <SUBGRF_SetSleep+0x3c>)
 8012084:	2200      	movs	r2, #0
 8012086:	701a      	strb	r2, [r3, #0]
}
 8012088:	b002      	add	sp, #8
 801208a:	bd10      	pop	{r4, pc}
 801208c:	20000fde 	.word	0x20000fde

08012090 <SUBGRF_SetWhiteningSeed>:
{
 8012090:	b510      	push	{r4, lr}
 8012092:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 8012094:	f7ff fe32 	bl	8011cfc <SUBGRF_GetPacketType>
 8012098:	b100      	cbz	r0, 801209c <SUBGRF_SetWhiteningSeed+0xc>
}
 801209a:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801209c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80120a0:	f7ff ff7c 	bl	8011f9c <SUBGRF_ReadRegister>
 80120a4:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 80120a8:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 80120ac:	4301      	orrs	r1, r0
 80120ae:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80120b2:	f7ff fe81 	bl	8011db8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 80120b6:	b2e1      	uxtb	r1, r4
 80120b8:	f240 60b9 	movw	r0, #1721	; 0x6b9
 80120bc:	f7ff fe7c 	bl	8011db8 <SUBGRF_WriteRegister>
}
 80120c0:	e7eb      	b.n	801209a <SUBGRF_SetWhiteningSeed+0xa>

080120c2 <SUBGRF_SetTxParams>:
{
 80120c2:	b570      	push	{r4, r5, r6, lr}
 80120c4:	b082      	sub	sp, #8
 80120c6:	460c      	mov	r4, r1
 80120c8:	4616      	mov	r6, r2
    if (paSelect == RFO_LP)
 80120ca:	2801      	cmp	r0, #1
 80120cc:	d035      	beq.n	801213a <SUBGRF_SetTxParams+0x78>
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 80120ce:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80120d2:	f7ff ff63 	bl	8011f9c <SUBGRF_ReadRegister>
 80120d6:	f040 011e 	orr.w	r1, r0, #30
 80120da:	b2c9      	uxtb	r1, r1
 80120dc:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80120e0:	f7ff fe6a 	bl	8011db8 <SUBGRF_WriteRegister>
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 80120e4:	2001      	movs	r0, #1
 80120e6:	f7f0 fe09 	bl	8002cfc <RBI_GetRFOMaxPowerConfig>
 80120ea:	4605      	mov	r5, r0
        if (power > max_power)
 80120ec:	4284      	cmp	r4, r0
 80120ee:	dd00      	ble.n	80120f2 <SUBGRF_SetTxParams+0x30>
            power = max_power;
 80120f0:	b244      	sxtb	r4, r0
        if (max_power == 20)
 80120f2:	2d14      	cmp	r5, #20
 80120f4:	d054      	beq.n	80121a0 <SUBGRF_SetTxParams+0xde>
        else if (max_power == 17)
 80120f6:	2d11      	cmp	r5, #17
 80120f8:	d05c      	beq.n	80121b4 <SUBGRF_SetTxParams+0xf2>
        else if (max_power == 14)
 80120fa:	2d0e      	cmp	r5, #14
 80120fc:	d064      	beq.n	80121c8 <SUBGRF_SetTxParams+0x106>
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 80120fe:	2301      	movs	r3, #1
 8012100:	2200      	movs	r2, #0
 8012102:	2107      	movs	r1, #7
 8012104:	2004      	movs	r0, #4
 8012106:	f7ff fd81 	bl	8011c0c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801210a:	1b64      	subs	r4, r4, r5
 801210c:	3416      	adds	r4, #22
 801210e:	b264      	sxtb	r4, r4
        if (power < -9)
 8012110:	f114 0f09 	cmn.w	r4, #9
 8012114:	da01      	bge.n	801211a <SUBGRF_SetTxParams+0x58>
            power = -9;
 8012116:	f06f 0408 	mvn.w	r4, #8
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801211a:	2138      	movs	r1, #56	; 0x38
 801211c:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8012120:	f7ff fe4a 	bl	8011db8 <SUBGRF_WriteRegister>
    buf[0] = power;
 8012124:	f88d 4004 	strb.w	r4, [sp, #4]
    buf[1] = (uint8_t)rampTime;
 8012128:	f88d 6005 	strb.w	r6, [sp, #5]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801212c:	2202      	movs	r2, #2
 801212e:	a901      	add	r1, sp, #4
 8012130:	208e      	movs	r0, #142	; 0x8e
 8012132:	f7ff fc2f 	bl	8011994 <SUBGRF_WriteCommand>
}
 8012136:	b002      	add	sp, #8
 8012138:	bd70      	pop	{r4, r5, r6, pc}
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801213a:	2000      	movs	r0, #0
 801213c:	f7f0 fdde 	bl	8002cfc <RBI_GetRFOMaxPowerConfig>
 8012140:	4605      	mov	r5, r0
        if (power >  max_power)
 8012142:	4284      	cmp	r4, r0
 8012144:	dd00      	ble.n	8012148 <SUBGRF_SetTxParams+0x86>
          power = max_power;
 8012146:	b244      	sxtb	r4, r0
        if (max_power == 14)
 8012148:	2d0e      	cmp	r5, #14
 801214a:	d015      	beq.n	8012178 <SUBGRF_SetTxParams+0xb6>
        else if (max_power == 10)
 801214c:	2d0a      	cmp	r5, #10
 801214e:	d01d      	beq.n	801218c <SUBGRF_SetTxParams+0xca>
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 8012150:	2301      	movs	r3, #1
 8012152:	461a      	mov	r2, r3
 8012154:	2100      	movs	r1, #0
 8012156:	2006      	movs	r0, #6
 8012158:	f7ff fd58 	bl	8011c0c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801215c:	1b64      	subs	r4, r4, r5
 801215e:	340e      	adds	r4, #14
 8012160:	b264      	sxtb	r4, r4
        if (power < -17)
 8012162:	f114 0f11 	cmn.w	r4, #17
 8012166:	da01      	bge.n	801216c <SUBGRF_SetTxParams+0xaa>
            power = -17;
 8012168:	f06f 0410 	mvn.w	r4, #16
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801216c:	2118      	movs	r1, #24
 801216e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8012172:	f7ff fe21 	bl	8011db8 <SUBGRF_WriteRegister>
 8012176:	e7d5      	b.n	8012124 <SUBGRF_SetTxParams+0x62>
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8012178:	2301      	movs	r3, #1
 801217a:	461a      	mov	r2, r3
 801217c:	2100      	movs	r1, #0
 801217e:	2004      	movs	r0, #4
 8012180:	f7ff fd44 	bl	8011c0c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8012184:	1b64      	subs	r4, r4, r5
 8012186:	340e      	adds	r4, #14
 8012188:	b264      	sxtb	r4, r4
 801218a:	e7ea      	b.n	8012162 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801218c:	2301      	movs	r3, #1
 801218e:	461a      	mov	r2, r3
 8012190:	2100      	movs	r1, #0
 8012192:	4618      	mov	r0, r3
 8012194:	f7ff fd3a 	bl	8011c0c <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8012198:	1b64      	subs	r4, r4, r5
 801219a:	340d      	adds	r4, #13
 801219c:	b264      	sxtb	r4, r4
 801219e:	e7e0      	b.n	8012162 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 80121a0:	2301      	movs	r3, #1
 80121a2:	2200      	movs	r2, #0
 80121a4:	2105      	movs	r1, #5
 80121a6:	2003      	movs	r0, #3
 80121a8:	f7ff fd30 	bl	8011c0c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80121ac:	1b64      	subs	r4, r4, r5
 80121ae:	3416      	adds	r4, #22
 80121b0:	b264      	sxtb	r4, r4
 80121b2:	e7ad      	b.n	8012110 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 80121b4:	2301      	movs	r3, #1
 80121b6:	2200      	movs	r2, #0
 80121b8:	2103      	movs	r1, #3
 80121ba:	2002      	movs	r0, #2
 80121bc:	f7ff fd26 	bl	8011c0c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80121c0:	1b64      	subs	r4, r4, r5
 80121c2:	3416      	adds	r4, #22
 80121c4:	b264      	sxtb	r4, r4
 80121c6:	e7a3      	b.n	8012110 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 80121c8:	2301      	movs	r3, #1
 80121ca:	2200      	movs	r2, #0
 80121cc:	2102      	movs	r1, #2
 80121ce:	4608      	mov	r0, r1
 80121d0:	f7ff fd1c 	bl	8011c0c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80121d4:	1b64      	subs	r4, r4, r5
 80121d6:	340e      	adds	r4, #14
 80121d8:	b264      	sxtb	r4, r4
 80121da:	e799      	b.n	8012110 <SUBGRF_SetTxParams+0x4e>

080121dc <SUBGRF_GetRxBufferStatus>:
{
 80121dc:	b530      	push	{r4, r5, lr}
 80121de:	b083      	sub	sp, #12
 80121e0:	4605      	mov	r5, r0
 80121e2:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 80121e4:	2202      	movs	r2, #2
 80121e6:	a901      	add	r1, sp, #4
 80121e8:	2013      	movs	r0, #19
 80121ea:	f7ff fbe3 	bl	80119b4 <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 80121ee:	f7ff fd85 	bl	8011cfc <SUBGRF_GetPacketType>
 80121f2:	2801      	cmp	r0, #1
 80121f4:	d007      	beq.n	8012206 <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 80121f6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80121fa:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 80121fc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012200:	7023      	strb	r3, [r4, #0]
}
 8012202:	b003      	add	sp, #12
 8012204:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8012206:	4b05      	ldr	r3, [pc, #20]	; (801221c <SUBGRF_GetRxBufferStatus+0x40>)
 8012208:	781b      	ldrb	r3, [r3, #0]
 801220a:	b2db      	uxtb	r3, r3
 801220c:	2b01      	cmp	r3, #1
 801220e:	d1f2      	bne.n	80121f6 <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8012210:	f240 7002 	movw	r0, #1794	; 0x702
 8012214:	f7ff fec2 	bl	8011f9c <SUBGRF_ReadRegister>
 8012218:	7028      	strb	r0, [r5, #0]
 801221a:	e7ef      	b.n	80121fc <SUBGRF_GetRxBufferStatus+0x20>
 801221c:	20000fdd 	.word	0x20000fdd

08012220 <SUBGRF_WriteRegisters>:
{
 8012220:	b510      	push	{r4, lr}
 8012222:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012224:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012228:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801222a:	460a      	mov	r2, r1
 801222c:	4601      	mov	r1, r0
 801222e:	4803      	ldr	r0, [pc, #12]	; (801223c <SUBGRF_WriteRegisters+0x1c>)
 8012230:	f7f4 fe98 	bl	8006f64 <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012234:	f384 8810 	msr	PRIMASK, r4
}
 8012238:	bd10      	pop	{r4, pc}
 801223a:	bf00      	nop
 801223c:	2000028c 	.word	0x2000028c

08012240 <SUBGRF_SetSyncWord>:
{
 8012240:	b508      	push	{r3, lr}
 8012242:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8012244:	2208      	movs	r2, #8
 8012246:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801224a:	f7ff ffe9 	bl	8012220 <SUBGRF_WriteRegisters>
}
 801224e:	2000      	movs	r0, #0
 8012250:	bd08      	pop	{r3, pc}

08012252 <SUBGRF_SetCrcSeed>:
{
 8012252:	b500      	push	{lr}
 8012254:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8012256:	0a03      	lsrs	r3, r0, #8
 8012258:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801225c:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8012260:	f7ff fd4c 	bl	8011cfc <SUBGRF_GetPacketType>
 8012264:	b110      	cbz	r0, 801226c <SUBGRF_SetCrcSeed+0x1a>
}
 8012266:	b003      	add	sp, #12
 8012268:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801226c:	2202      	movs	r2, #2
 801226e:	a901      	add	r1, sp, #4
 8012270:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8012274:	f7ff ffd4 	bl	8012220 <SUBGRF_WriteRegisters>
}
 8012278:	e7f5      	b.n	8012266 <SUBGRF_SetCrcSeed+0x14>

0801227a <SUBGRF_SetCrcPolynomial>:
{
 801227a:	b500      	push	{lr}
 801227c:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801227e:	0a03      	lsrs	r3, r0, #8
 8012280:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8012284:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8012288:	f7ff fd38 	bl	8011cfc <SUBGRF_GetPacketType>
 801228c:	b110      	cbz	r0, 8012294 <SUBGRF_SetCrcPolynomial+0x1a>
}
 801228e:	b003      	add	sp, #12
 8012290:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8012294:	2202      	movs	r2, #2
 8012296:	a901      	add	r1, sp, #4
 8012298:	f240 60be 	movw	r0, #1726	; 0x6be
 801229c:	f7ff ffc0 	bl	8012220 <SUBGRF_WriteRegisters>
}
 80122a0:	e7f5      	b.n	801228e <SUBGRF_SetCrcPolynomial+0x14>
	...

080122a4 <SUBGRF_SetPacketParams>:
{
 80122a4:	b510      	push	{r4, lr}
 80122a6:	b084      	sub	sp, #16
 80122a8:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80122aa:	ab01      	add	r3, sp, #4
 80122ac:	4a33      	ldr	r2, [pc, #204]	; (801237c <SUBGRF_SetPacketParams+0xd8>)
 80122ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80122b0:	c303      	stmia	r3!, {r0, r1}
 80122b2:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 80122b4:	7820      	ldrb	r0, [r4, #0]
 80122b6:	4b32      	ldr	r3, [pc, #200]	; (8012380 <SUBGRF_SetPacketParams+0xdc>)
 80122b8:	781b      	ldrb	r3, [r3, #0]
 80122ba:	4298      	cmp	r0, r3
 80122bc:	d106      	bne.n	80122cc <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 80122be:	7823      	ldrb	r3, [r4, #0]
 80122c0:	2b03      	cmp	r3, #3
 80122c2:	d82a      	bhi.n	801231a <SUBGRF_SetPacketParams+0x76>
 80122c4:	e8df f003 	tbb	[pc, r3]
 80122c8:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 80122cc:	f7ff fdc4 	bl	8011e58 <SUBGRF_SetPacketType>
 80122d0:	e7f5      	b.n	80122be <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 80122d2:	7a63      	ldrb	r3, [r4, #9]
 80122d4:	2bf1      	cmp	r3, #241	; 0xf1
 80122d6:	d022      	beq.n	801231e <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 80122d8:	2bf2      	cmp	r3, #242	; 0xf2
 80122da:	d02a      	beq.n	8012332 <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 80122dc:	8862      	ldrh	r2, [r4, #2]
 80122de:	0a11      	lsrs	r1, r2, #8
 80122e0:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 80122e4:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 80122e8:	7922      	ldrb	r2, [r4, #4]
 80122ea:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 80122ee:	7962      	ldrb	r2, [r4, #5]
 80122f0:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 80122f4:	79a2      	ldrb	r2, [r4, #6]
 80122f6:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 80122fa:	79e2      	ldrb	r2, [r4, #7]
 80122fc:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8012300:	7a22      	ldrb	r2, [r4, #8]
 8012302:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 8012306:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801230a:	7aa3      	ldrb	r3, [r4, #10]
 801230c:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 8012310:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8012312:	a901      	add	r1, sp, #4
 8012314:	208c      	movs	r0, #140	; 0x8c
 8012316:	f7ff fb3d 	bl	8011994 <SUBGRF_WriteCommand>
}
 801231a:	b004      	add	sp, #16
 801231c:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801231e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8012322:	f7ff ff96 	bl	8012252 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8012326:	f248 0005 	movw	r0, #32773	; 0x8005
 801232a:	f7ff ffa6 	bl	801227a <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801232e:	2302      	movs	r3, #2
 8012330:	e7d4      	b.n	80122dc <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8012332:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8012336:	f7ff ff8c 	bl	8012252 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801233a:	f241 0021 	movw	r0, #4129	; 0x1021
 801233e:	f7ff ff9c 	bl	801227a <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8012342:	2306      	movs	r3, #6
 8012344:	e7ca      	b.n	80122dc <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8012346:	7b23      	ldrb	r3, [r4, #12]
 8012348:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 801234c:	2201      	movs	r2, #1
        break;
 801234e:	e7e0      	b.n	8012312 <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8012350:	89e3      	ldrh	r3, [r4, #14]
 8012352:	0a1a      	lsrs	r2, r3, #8
 8012354:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8012358:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801235c:	7c23      	ldrb	r3, [r4, #16]
 801235e:	4a09      	ldr	r2, [pc, #36]	; (8012384 <SUBGRF_SetPacketParams+0xe0>)
 8012360:	7013      	strb	r3, [r2, #0]
 8012362:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8012366:	7c63      	ldrb	r3, [r4, #17]
 8012368:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801236c:	7ca3      	ldrb	r3, [r4, #18]
 801236e:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8012372:	7ce3      	ldrb	r3, [r4, #19]
 8012374:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 8012378:	2206      	movs	r2, #6
        break;
 801237a:	e7ca      	b.n	8012312 <SUBGRF_SetPacketParams+0x6e>
 801237c:	08013ef8 	.word	0x08013ef8
 8012380:	20000fdf 	.word	0x20000fdf
 8012384:	20000fdd 	.word	0x20000fdd

08012388 <SUBGRF_ReadRegisters>:
{
 8012388:	b510      	push	{r4, lr}
 801238a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801238c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012390:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8012392:	460a      	mov	r2, r1
 8012394:	4601      	mov	r1, r0
 8012396:	4803      	ldr	r0, [pc, #12]	; (80123a4 <SUBGRF_ReadRegisters+0x1c>)
 8012398:	f7f4 fe34 	bl	8007004 <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801239c:	f384 8810 	msr	PRIMASK, r4
}
 80123a0:	bd10      	pop	{r4, pc}
 80123a2:	bf00      	nop
 80123a4:	2000028c 	.word	0x2000028c

080123a8 <SUBGRF_GetRandom>:
{
 80123a8:	b570      	push	{r4, r5, r6, lr}
 80123aa:	b082      	sub	sp, #8
    uint32_t number = 0;
 80123ac:	2600      	movs	r6, #0
 80123ae:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 80123b0:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80123b4:	f7ff fdf2 	bl	8011f9c <SUBGRF_ReadRegister>
 80123b8:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 80123ba:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 80123be:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80123c2:	f7ff fcf9 	bl	8011db8 <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 80123c6:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80123ca:	f7ff fde7 	bl	8011f9c <SUBGRF_ReadRegister>
 80123ce:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 80123d0:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 80123d4:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80123d8:	f7ff fcee 	bl	8011db8 <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80123dc:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80123e0:	f7ff fb32 	bl	8011a48 <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 80123e4:	2204      	movs	r2, #4
 80123e6:	eb0d 0102 	add.w	r1, sp, r2
 80123ea:	f640 0019 	movw	r0, #2073	; 0x819
 80123ee:	f7ff ffcb 	bl	8012388 <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 80123f2:	4630      	mov	r0, r6
 80123f4:	f7ff faf4 	bl	80119e0 <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 80123f8:	4629      	mov	r1, r5
 80123fa:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80123fe:	f7ff fcdb 	bl	8011db8 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8012402:	4621      	mov	r1, r4
 8012404:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8012408:	f7ff fcd6 	bl	8011db8 <SUBGRF_WriteRegister>
}
 801240c:	9801      	ldr	r0, [sp, #4]
 801240e:	b002      	add	sp, #8
 8012410:	bd70      	pop	{r4, r5, r6, pc}
	...

08012414 <SUBGRF_WriteBuffer>:
{
 8012414:	b510      	push	{r4, lr}
 8012416:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012418:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801241c:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801241e:	460a      	mov	r2, r1
 8012420:	4601      	mov	r1, r0
 8012422:	4803      	ldr	r0, [pc, #12]	; (8012430 <SUBGRF_WriteBuffer+0x1c>)
 8012424:	f7f4 ff44 	bl	80072b0 <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012428:	f384 8810 	msr	PRIMASK, r4
}
 801242c:	bd10      	pop	{r4, pc}
 801242e:	bf00      	nop
 8012430:	2000028c 	.word	0x2000028c

08012434 <SUBGRF_SetPayload>:
{
 8012434:	b508      	push	{r3, lr}
 8012436:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8012438:	4601      	mov	r1, r0
 801243a:	2000      	movs	r0, #0
 801243c:	f7ff ffea 	bl	8012414 <SUBGRF_WriteBuffer>
}
 8012440:	bd08      	pop	{r3, pc}

08012442 <SUBGRF_SendPayload>:
{
 8012442:	b510      	push	{r4, lr}
 8012444:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 8012446:	f7ff fff5 	bl	8012434 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801244a:	4620      	mov	r0, r4
 801244c:	f7ff fae2 	bl	8011a14 <SUBGRF_SetTx>
}
 8012450:	bd10      	pop	{r4, pc}
	...

08012454 <SUBGRF_ReadBuffer>:
{
 8012454:	b510      	push	{r4, lr}
 8012456:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012458:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801245c:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801245e:	460a      	mov	r2, r1
 8012460:	4601      	mov	r1, r0
 8012462:	4803      	ldr	r0, [pc, #12]	; (8012470 <SUBGRF_ReadBuffer+0x1c>)
 8012464:	f7f4 ff6e 	bl	8007344 <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012468:	f384 8810 	msr	PRIMASK, r4
}
 801246c:	bd10      	pop	{r4, pc}
 801246e:	bf00      	nop
 8012470:	2000028c 	.word	0x2000028c

08012474 <SUBGRF_GetPayload>:
{
 8012474:	b570      	push	{r4, r5, r6, lr}
 8012476:	b082      	sub	sp, #8
 8012478:	4606      	mov	r6, r0
 801247a:	460c      	mov	r4, r1
 801247c:	4615      	mov	r5, r2
    uint8_t offset = 0;
 801247e:	2300      	movs	r3, #0
 8012480:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 8012484:	f10d 0107 	add.w	r1, sp, #7
 8012488:	4620      	mov	r0, r4
 801248a:	f7ff fea7 	bl	80121dc <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801248e:	7822      	ldrb	r2, [r4, #0]
 8012490:	42aa      	cmp	r2, r5
 8012492:	d902      	bls.n	801249a <SUBGRF_GetPayload+0x26>
        return 1;
 8012494:	2001      	movs	r0, #1
}
 8012496:	b002      	add	sp, #8
 8012498:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801249a:	4631      	mov	r1, r6
 801249c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80124a0:	f7ff ffd8 	bl	8012454 <SUBGRF_ReadBuffer>
    return 0;
 80124a4:	2000      	movs	r0, #0
 80124a6:	e7f6      	b.n	8012496 <SUBGRF_GetPayload+0x22>

080124a8 <SUBGRF_SetSwitch>:
{
 80124a8:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 80124aa:	2901      	cmp	r1, #1
 80124ac:	d003      	beq.n	80124b6 <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 80124ae:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 80124b0:	f7f0 fc14 	bl	8002cdc <RBI_ConfigRFSwitch>
}
 80124b4:	bd10      	pop	{r4, pc}
 80124b6:	4604      	mov	r4, r0
 80124b8:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 80124ba:	2c01      	cmp	r4, #1
 80124bc:	d003      	beq.n	80124c6 <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 80124be:	2c02      	cmp	r4, #2
 80124c0:	d1f6      	bne.n	80124b0 <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 80124c2:	2003      	movs	r0, #3
 80124c4:	e7f4      	b.n	80124b0 <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 80124c6:	2004      	movs	r0, #4
 80124c8:	f7ff fd78 	bl	8011fbc <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 80124cc:	2002      	movs	r0, #2
 80124ce:	e7f6      	b.n	80124be <SUBGRF_SetSwitch+0x16>

080124d0 <SUBGRF_SetRfTxPower>:
{
 80124d0:	b538      	push	{r3, r4, r5, lr}
 80124d2:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 80124d4:	f7f0 fc06 	bl	8002ce4 <RBI_GetTxConfig>
    switch (TxConfig)
 80124d8:	b148      	cbz	r0, 80124ee <SUBGRF_SetRfTxPower+0x1e>
 80124da:	2802      	cmp	r0, #2
 80124dc:	d10d      	bne.n	80124fa <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 80124de:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 80124e0:	2202      	movs	r2, #2
 80124e2:	4621      	mov	r1, r4
 80124e4:	4628      	mov	r0, r5
 80124e6:	f7ff fdec 	bl	80120c2 <SUBGRF_SetTxParams>
}
 80124ea:	4628      	mov	r0, r5
 80124ec:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 80124ee:	2c0f      	cmp	r4, #15
 80124f0:	dc01      	bgt.n	80124f6 <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 80124f2:	2501      	movs	r5, #1
 80124f4:	e7f4      	b.n	80124e0 <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 80124f6:	2502      	movs	r5, #2
 80124f8:	e7f2      	b.n	80124e0 <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 80124fa:	2501      	movs	r5, #1
 80124fc:	e7f0      	b.n	80124e0 <SUBGRF_SetRfTxPower+0x10>

080124fe <SUBGRF_GetRadioWakeUpTime>:
}
 80124fe:	2001      	movs	r0, #1
 8012500:	4770      	bx	lr
	...

08012504 <HAL_SUBGHZ_TxCpltCallback>:
{
 8012504:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8012506:	4b02      	ldr	r3, [pc, #8]	; (8012510 <HAL_SUBGHZ_TxCpltCallback+0xc>)
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	2001      	movs	r0, #1
 801250c:	4798      	blx	r3
}
 801250e:	bd08      	pop	{r3, pc}
 8012510:	20000fe0 	.word	0x20000fe0

08012514 <HAL_SUBGHZ_RxCpltCallback>:
{
 8012514:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8012516:	4b02      	ldr	r3, [pc, #8]	; (8012520 <HAL_SUBGHZ_RxCpltCallback+0xc>)
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	2002      	movs	r0, #2
 801251c:	4798      	blx	r3
}
 801251e:	bd08      	pop	{r3, pc}
 8012520:	20000fe0 	.word	0x20000fe0

08012524 <HAL_SUBGHZ_CRCErrorCallback>:
{
 8012524:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8012526:	4b02      	ldr	r3, [pc, #8]	; (8012530 <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	2040      	movs	r0, #64	; 0x40
 801252c:	4798      	blx	r3
}
 801252e:	bd08      	pop	{r3, pc}
 8012530:	20000fe0 	.word	0x20000fe0

08012534 <HAL_SUBGHZ_CADStatusCallback>:
{
 8012534:	b508      	push	{r3, lr}
    switch (cadstatus)
 8012536:	b111      	cbz	r1, 801253e <HAL_SUBGHZ_CADStatusCallback+0xa>
 8012538:	2901      	cmp	r1, #1
 801253a:	d005      	beq.n	8012548 <HAL_SUBGHZ_CADStatusCallback+0x14>
}
 801253c:	bd08      	pop	{r3, pc}
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801253e:	4b05      	ldr	r3, [pc, #20]	; (8012554 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	2080      	movs	r0, #128	; 0x80
 8012544:	4798      	blx	r3
            break;
 8012546:	e7f9      	b.n	801253c <HAL_SUBGHZ_CADStatusCallback+0x8>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8012548:	4b02      	ldr	r3, [pc, #8]	; (8012554 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8012550:	4798      	blx	r3
}
 8012552:	e7f3      	b.n	801253c <HAL_SUBGHZ_CADStatusCallback+0x8>
 8012554:	20000fe0 	.word	0x20000fe0

08012558 <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 8012558:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801255a:	4b03      	ldr	r3, [pc, #12]	; (8012568 <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8012562:	4798      	blx	r3
}
 8012564:	bd08      	pop	{r3, pc}
 8012566:	bf00      	nop
 8012568:	20000fe0 	.word	0x20000fe0

0801256c <HAL_SUBGHZ_HeaderErrorCallback>:
{
 801256c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801256e:	4b02      	ldr	r3, [pc, #8]	; (8012578 <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	2020      	movs	r0, #32
 8012574:	4798      	blx	r3
}
 8012576:	bd08      	pop	{r3, pc}
 8012578:	20000fe0 	.word	0x20000fe0

0801257c <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 801257c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801257e:	4b02      	ldr	r3, [pc, #8]	; (8012588 <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	2004      	movs	r0, #4
 8012584:	4798      	blx	r3
}
 8012586:	bd08      	pop	{r3, pc}
 8012588:	20000fe0 	.word	0x20000fe0

0801258c <HAL_SUBGHZ_SyncWordValidCallback>:
{
 801258c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801258e:	4b02      	ldr	r3, [pc, #8]	; (8012598 <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	2008      	movs	r0, #8
 8012594:	4798      	blx	r3
}
 8012596:	bd08      	pop	{r3, pc}
 8012598:	20000fe0 	.word	0x20000fe0

0801259c <HAL_SUBGHZ_HeaderValidCallback>:
{
 801259c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801259e:	4b02      	ldr	r3, [pc, #8]	; (80125a8 <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	2010      	movs	r0, #16
 80125a4:	4798      	blx	r3
}
 80125a6:	bd08      	pop	{r3, pc}
 80125a8:	20000fe0 	.word	0x20000fe0

080125ac <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 80125ac:	4601      	mov	r1, r0
 80125ae:	b188      	cbz	r0, 80125d4 <SUBGRF_GetFskBandwidthRegValue+0x28>
    {
        return( 0x1F );
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 80125b0:	2300      	movs	r3, #0
 80125b2:	2b15      	cmp	r3, #21
 80125b4:	d80d      	bhi.n	80125d2 <SUBGRF_GetFskBandwidthRegValue+0x26>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 80125b6:	4618      	mov	r0, r3
 80125b8:	4a07      	ldr	r2, [pc, #28]	; (80125d8 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 80125ba:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80125be:	428a      	cmp	r2, r1
 80125c0:	d802      	bhi.n	80125c8 <SUBGRF_GetFskBandwidthRegValue+0x1c>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 80125c2:	3301      	adds	r3, #1
 80125c4:	b2db      	uxtb	r3, r3
 80125c6:	e7f4      	b.n	80125b2 <SUBGRF_GetFskBandwidthRegValue+0x6>
        {
            return FskBandwidths[i].RegValue;
 80125c8:	4b03      	ldr	r3, [pc, #12]	; (80125d8 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 80125ca:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80125ce:	7900      	ldrb	r0, [r0, #4]
 80125d0:	4770      	bx	lr
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 80125d2:	e7fe      	b.n	80125d2 <SUBGRF_GetFskBandwidthRegValue+0x26>
        return( 0x1F );
 80125d4:	201f      	movs	r0, #31
}
 80125d6:	4770      	bx	lr
 80125d8:	08014d40 	.word	0x08014d40

080125dc <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 80125dc:	b570      	push	{r4, r5, r6, lr}
 80125de:	b082      	sub	sp, #8
 80125e0:	4606      	mov	r6, r0
 80125e2:	460c      	mov	r4, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 80125e4:	4b1d      	ldr	r3, [pc, #116]	; (801265c <SUBGRF_GetCFO+0x80>)
 80125e6:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 80125e8:	f640 0007 	movw	r0, #2055	; 0x807
 80125ec:	f7ff fcd6 	bl	8011f9c <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 80125f0:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 80125f4:	3308      	adds	r3, #8
 80125f6:	446b      	add	r3, sp
 80125f8:	f813 5c04 	ldrb.w	r5, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 80125fc:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 8012600:	3b01      	subs	r3, #1
 8012602:	fa05 f303 	lsl.w	r3, r5, r3
 8012606:	4d16      	ldr	r5, [pc, #88]	; (8012660 <SUBGRF_GetCFO+0x84>)
 8012608:	fbb5 f5f3 	udiv	r5, r5, r3
  uint32_t cf_osr = cf_fs / bitRate;
 801260c:	fbb5 f2f6 	udiv	r2, r5, r6
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8012610:	2a07      	cmp	r2, #7
 8012612:	d921      	bls.n	8012658 <SUBGRF_GetCFO+0x7c>
  uint8_t interp = 1;
 8012614:	2001      	movs	r0, #1
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 8012616:	fb00 f202 	mul.w	r2, r0, r2
 801261a:	2a03      	cmp	r2, #3
 801261c:	d800      	bhi.n	8012620 <SUBGRF_GetCFO+0x44>
  {
    interp = 4;
 801261e:	2004      	movs	r0, #4
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8012620:	fb00 f505 	mul.w	r5, r0, r5
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8012624:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8012628:	f7ff fcb8 	bl	8011f9c <SUBGRF_ReadRegister>
 801262c:	0200      	lsls	r0, r0, #8
 801262e:	f400 6670 	and.w	r6, r0, #3840	; 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 8012632:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8012636:	f7ff fcb1 	bl	8011f9c <SUBGRF_ReadRegister>
 801263a:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801263c:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8012640:	d003      	beq.n	801264a <SUBGRF_GetCFO+0x6e>
  {
    cfo_bin |= 0xFFFFF000;
 8012642:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 8012646:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801264a:	096d      	lsrs	r5, r5, #5
 801264c:	fb05 f000 	mul.w	r0, r5, r0
 8012650:	11c0      	asrs	r0, r0, #7
 8012652:	6020      	str	r0, [r4, #0]
}
 8012654:	b002      	add	sp, #8
 8012656:	bd70      	pop	{r4, r5, r6, pc}
    interp = 2;
 8012658:	2002      	movs	r0, #2
 801265a:	e7dc      	b.n	8012616 <SUBGRF_GetCFO+0x3a>
 801265c:	0c0a0804 	.word	0x0c0a0804
 8012660:	01e84800 	.word	0x01e84800

08012664 <RFW_TransmitLongPacket>:
  }
#else
  status= -1;
#endif
  return status;
}
 8012664:	f04f 30ff 	mov.w	r0, #4294967295
 8012668:	4770      	bx	lr

0801266a <RFW_ReceiveLongPacket>:
  }
#else
  status= -1;
#endif
  return status;
}
 801266a:	f04f 30ff 	mov.w	r0, #4294967295
 801266e:	4770      	bx	lr

08012670 <RFW_DeInit>:
void RFW_DeInit( void)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 8012670:	4770      	bx	lr

08012672 <RFW_Is_Init>:
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
#endif
}
 8012672:	2000      	movs	r0, #0
 8012674:	4770      	bx	lr

08012676 <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
#endif
}
 8012676:	2000      	movs	r0, #0
 8012678:	4770      	bx	lr

0801267a <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 801267a:	4770      	bx	lr

0801267c <RFW_TransmitInit>:

    status= 0;
  }
#endif
  return status;
}
 801267c:	f04f 30ff 	mov.w	r0, #4294967295
 8012680:	4770      	bx	lr

08012682 <RFW_ReceiveInit>:
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
#endif
}
 8012682:	f04f 30ff 	mov.w	r0, #4294967295
 8012686:	4770      	bx	lr

08012688 <RFW_DeInit_TxLongPacket>:
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 8012688:	4770      	bx	lr

0801268a <RFW_ReceivePayload>:
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 801268a:	4770      	bx	lr

0801268c <RFW_SetRadioModem>:
void RFW_SetRadioModem(RadioModems_t Modem)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 801268c:	4770      	bx	lr
	...

08012690 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 8012690:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012692:	f3ef 8e10 	mrs	lr, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012696:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8012698:	4b1e      	ldr	r3, [pc, #120]	; (8012714 <TRACE_AllocateBufer+0x84>)
 801269a:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 801269e:	8a1a      	ldrh	r2, [r3, #16]
 80126a0:	4594      	cmp	ip, r2
 80126a2:	d011      	beq.n	80126c8 <TRACE_AllocateBufer+0x38>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80126a4:	4594      	cmp	ip, r2
 80126a6:	d921      	bls.n	80126ec <TRACE_AllocateBufer+0x5c>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 80126a8:	f5cc 6380 	rsb	r3, ip, #1024	; 0x400
 80126ac:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 80126ae:	4283      	cmp	r3, r0
 80126b0:	d81f      	bhi.n	80126f2 <TRACE_AllocateBufer+0x62>
 80126b2:	4282      	cmp	r2, r0
 80126b4:	d91d      	bls.n	80126f2 <TRACE_AllocateBufer+0x62>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 80126b6:	4b17      	ldr	r3, [pc, #92]	; (8012714 <TRACE_AllocateBufer+0x84>)
 80126b8:	2401      	movs	r4, #1
 80126ba:	709c      	strb	r4, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 80126bc:	f8a3 c000 	strh.w	ip, [r3]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 80126c0:	2400      	movs	r4, #0
 80126c2:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 80126c4:	4613      	mov	r3, r2
 80126c6:	e014      	b.n	80126f2 <TRACE_AllocateBufer+0x62>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 80126c8:	f5cc 6380 	rsb	r3, ip, #1024	; 0x400
 80126cc:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 80126ce:	4298      	cmp	r0, r3
 80126d0:	d30f      	bcc.n	80126f2 <TRACE_AllocateBufer+0x62>
 80126d2:	4282      	cmp	r2, r0
 80126d4:	d90d      	bls.n	80126f2 <TRACE_AllocateBufer+0x62>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 80126d6:	4b0f      	ldr	r3, [pc, #60]	; (8012714 <TRACE_AllocateBufer+0x84>)
 80126d8:	2401      	movs	r4, #1
 80126da:	709c      	strb	r4, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 80126dc:	f8a3 c000 	strh.w	ip, [r3]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 80126e0:	f04f 0c00 	mov.w	ip, #0
 80126e4:	f8a3 c012 	strh.w	ip, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 80126e8:	4613      	mov	r3, r2
 80126ea:	e002      	b.n	80126f2 <TRACE_AllocateBufer+0x62>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 80126ec:	eba2 030c 	sub.w	r3, r2, ip
 80126f0:	b29b      	uxth	r3, r3
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 80126f2:	4283      	cmp	r3, r0
 80126f4:	d90a      	bls.n	801270c <TRACE_AllocateBufer+0x7c>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 80126f6:	4a07      	ldr	r2, [pc, #28]	; (8012714 <TRACE_AllocateBufer+0x84>)
 80126f8:	8a53      	ldrh	r3, [r2, #18]
 80126fa:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 80126fc:	4403      	add	r3, r0
 80126fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012702:	8253      	strh	r3, [r2, #18]
    ret = 0;
 8012704:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012706:	f38e 8810 	msr	PRIMASK, lr
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 801270a:	bd10      	pop	{r4, pc}
  int16_t ret = -1;
 801270c:	f04f 30ff 	mov.w	r0, #4294967295
 8012710:	e7f9      	b.n	8012706 <TRACE_AllocateBufer+0x76>
 8012712:	bf00      	nop
 8012714:	200013e4 	.word	0x200013e4

08012718 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012718:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801271c:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 801271e:	4a03      	ldr	r2, [pc, #12]	; (801272c <TRACE_Lock+0x14>)
 8012720:	8ad3      	ldrh	r3, [r2, #22]
 8012722:	3301      	adds	r3, #1
 8012724:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012726:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801272a:	4770      	bx	lr
 801272c:	200013e4 	.word	0x200013e4

08012730 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012730:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012734:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 8012736:	4a03      	ldr	r2, [pc, #12]	; (8012744 <TRACE_UnLock+0x14>)
 8012738:	8ad3      	ldrh	r3, [r2, #22]
 801273a:	3b01      	subs	r3, #1
 801273c:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801273e:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8012742:	4770      	bx	lr
 8012744:	200013e4 	.word	0x200013e4

08012748 <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 8012748:	4b02      	ldr	r3, [pc, #8]	; (8012754 <TRACE_IsLocked+0xc>)
 801274a:	8ad8      	ldrh	r0, [r3, #22]
}
 801274c:	3800      	subs	r0, #0
 801274e:	bf18      	it	ne
 8012750:	2001      	movne	r0, #1
 8012752:	4770      	bx	lr
 8012754:	200013e4 	.word	0x200013e4

08012758 <UTIL_ADV_TRACE_Init>:
{
 8012758:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801275a:	2218      	movs	r2, #24
 801275c:	2100      	movs	r1, #0
 801275e:	4807      	ldr	r0, [pc, #28]	; (801277c <UTIL_ADV_TRACE_Init+0x24>)
 8012760:	f000 f98f 	bl	8012a82 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 8012764:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012768:	2100      	movs	r1, #0
 801276a:	4805      	ldr	r0, [pc, #20]	; (8012780 <UTIL_ADV_TRACE_Init+0x28>)
 801276c:	f000 f989 	bl	8012a82 <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8012770:	4b04      	ldr	r3, [pc, #16]	; (8012784 <UTIL_ADV_TRACE_Init+0x2c>)
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	4804      	ldr	r0, [pc, #16]	; (8012788 <UTIL_ADV_TRACE_Init+0x30>)
 8012776:	4798      	blx	r3
}
 8012778:	bd08      	pop	{r3, pc}
 801277a:	bf00      	nop
 801277c:	200013e4 	.word	0x200013e4
 8012780:	20000fe4 	.word	0x20000fe4
 8012784:	08013fa0 	.word	0x08013fa0
 8012788:	0801290d 	.word	0x0801290d

0801278c <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801278c:	4b01      	ldr	r3, [pc, #4]	; (8012794 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 801278e:	6058      	str	r0, [r3, #4]
}
 8012790:	4770      	bx	lr
 8012792:	bf00      	nop
 8012794:	200013e4 	.word	0x200013e4

08012798 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8012798:	4b01      	ldr	r3, [pc, #4]	; (80127a0 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 801279a:	7218      	strb	r0, [r3, #8]
}
 801279c:	4770      	bx	lr
 801279e:	bf00      	nop
 80127a0:	200013e4 	.word	0x200013e4

080127a4 <TRACE_Send>:
{
 80127a4:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80127a6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80127aa:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 80127ac:	f7ff ffcc 	bl	8012748 <TRACE_IsLocked>
 80127b0:	b118      	cbz	r0, 80127ba <TRACE_Send+0x16>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80127b2:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 80127b6:	2000      	movs	r0, #0
}
 80127b8:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 80127ba:	f7ff ffad 	bl	8012718 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 80127be:	4b1d      	ldr	r3, [pc, #116]	; (8012834 <TRACE_Send+0x90>)
 80127c0:	8a1a      	ldrh	r2, [r3, #16]
 80127c2:	8a5b      	ldrh	r3, [r3, #18]
 80127c4:	429a      	cmp	r2, r3
 80127c6:	d02e      	beq.n	8012826 <TRACE_Send+0x82>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 80127c8:	491a      	ldr	r1, [pc, #104]	; (8012834 <TRACE_Send+0x90>)
 80127ca:	7889      	ldrb	r1, [r1, #2]
 80127cc:	2901      	cmp	r1, #1
 80127ce:	d017      	beq.n	8012800 <TRACE_Send+0x5c>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 80127d0:	4a18      	ldr	r2, [pc, #96]	; (8012834 <TRACE_Send+0x90>)
 80127d2:	7892      	ldrb	r2, [r2, #2]
 80127d4:	b932      	cbnz	r2, 80127e4 <TRACE_Send+0x40>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80127d6:	4a17      	ldr	r2, [pc, #92]	; (8012834 <TRACE_Send+0x90>)
 80127d8:	8a12      	ldrh	r2, [r2, #16]
 80127da:	4293      	cmp	r3, r2
 80127dc:	d91e      	bls.n	801281c <TRACE_Send+0x78>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 80127de:	1a9b      	subs	r3, r3, r2
 80127e0:	4a14      	ldr	r2, [pc, #80]	; (8012834 <TRACE_Send+0x90>)
 80127e2:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 80127e4:	4e13      	ldr	r6, [pc, #76]	; (8012834 <TRACE_Send+0x90>)
 80127e6:	8a33      	ldrh	r3, [r6, #16]
 80127e8:	4d13      	ldr	r5, [pc, #76]	; (8012838 <TRACE_Send+0x94>)
 80127ea:	441d      	add	r5, r3
 80127ec:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 80127f0:	f7ef f8e8 	bl	80019c4 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 80127f4:	4b11      	ldr	r3, [pc, #68]	; (801283c <TRACE_Send+0x98>)
 80127f6:	68db      	ldr	r3, [r3, #12]
 80127f8:	8ab1      	ldrh	r1, [r6, #20]
 80127fa:	4628      	mov	r0, r5
 80127fc:	4798      	blx	r3
 80127fe:	e7db      	b.n	80127b8 <TRACE_Send+0x14>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8012800:	480c      	ldr	r0, [pc, #48]	; (8012834 <TRACE_Send+0x90>)
 8012802:	8801      	ldrh	r1, [r0, #0]
 8012804:	1a8a      	subs	r2, r1, r2
 8012806:	b292      	uxth	r2, r2
 8012808:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801280a:	2102      	movs	r1, #2
 801280c:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801280e:	2100      	movs	r1, #0
 8012810:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8012812:	2a00      	cmp	r2, #0
 8012814:	d1dc      	bne.n	80127d0 <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8012816:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 8012818:	8201      	strh	r1, [r0, #16]
 801281a:	e7d9      	b.n	80127d0 <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801281c:	f5c2 6380 	rsb	r3, r2, #1024	; 0x400
 8012820:	4a04      	ldr	r2, [pc, #16]	; (8012834 <TRACE_Send+0x90>)
 8012822:	8293      	strh	r3, [r2, #20]
 8012824:	e7de      	b.n	80127e4 <TRACE_Send+0x40>
      TRACE_UnLock();
 8012826:	f7ff ff83 	bl	8012730 <TRACE_UnLock>
 801282a:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801282e:	2000      	movs	r0, #0
}
 8012830:	e7c2      	b.n	80127b8 <TRACE_Send+0x14>
 8012832:	bf00      	nop
 8012834:	200013e4 	.word	0x200013e4
 8012838:	20000fe4 	.word	0x20000fe4
 801283c:	08013fa0 	.word	0x08013fa0

08012840 <UTIL_ADV_TRACE_COND_FSend>:
{
 8012840:	b408      	push	{r3}
 8012842:	b530      	push	{r4, r5, lr}
 8012844:	b086      	sub	sp, #24
 8012846:	9c09      	ldr	r4, [sp, #36]	; 0x24
  uint16_t timestamp_size = 0u;
 8012848:	2300      	movs	r3, #0
 801284a:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801284e:	4b2c      	ldr	r3, [pc, #176]	; (8012900 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8012850:	7a1b      	ldrb	r3, [r3, #8]
 8012852:	4283      	cmp	r3, r0
 8012854:	d34d      	bcc.n	80128f2 <UTIL_ADV_TRACE_COND_FSend+0xb2>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 8012856:	4b2a      	ldr	r3, [pc, #168]	; (8012900 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8012858:	68db      	ldr	r3, [r3, #12]
 801285a:	ea31 0303 	bics.w	r3, r1, r3
 801285e:	d14b      	bne.n	80128f8 <UTIL_ADV_TRACE_COND_FSend+0xb8>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 8012860:	4b27      	ldr	r3, [pc, #156]	; (8012900 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8012862:	685b      	ldr	r3, [r3, #4]
 8012864:	b123      	cbz	r3, 8012870 <UTIL_ADV_TRACE_COND_FSend+0x30>
 8012866:	b11a      	cbz	r2, 8012870 <UTIL_ADV_TRACE_COND_FSend+0x30>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 8012868:	f10d 0102 	add.w	r1, sp, #2
 801286c:	a801      	add	r0, sp, #4
 801286e:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 8012870:	ab0a      	add	r3, sp, #40	; 0x28
 8012872:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8012874:	4622      	mov	r2, r4
 8012876:	f44f 7100 	mov.w	r1, #512	; 0x200
 801287a:	4822      	ldr	r0, [pc, #136]	; (8012904 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 801287c:	f000 fcd0 	bl	8013220 <tiny_vsnprintf_like>
 8012880:	b285      	uxth	r5, r0
  TRACE_Lock();
 8012882:	f7ff ff49 	bl	8012718 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 8012886:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 801288a:	4428      	add	r0, r5
 801288c:	4669      	mov	r1, sp
 801288e:	b280      	uxth	r0, r0
 8012890:	f7ff fefe 	bl	8012690 <TRACE_AllocateBufer>
 8012894:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012898:	d026      	beq.n	80128e8 <UTIL_ADV_TRACE_COND_FSend+0xa8>
    for (idx = 0u; idx < timestamp_size; idx++)
 801289a:	2300      	movs	r3, #0
 801289c:	e00d      	b.n	80128ba <UTIL_ADV_TRACE_COND_FSend+0x7a>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801289e:	f8bd 2000 	ldrh.w	r2, [sp]
 80128a2:	f103 0118 	add.w	r1, r3, #24
 80128a6:	4469      	add	r1, sp
 80128a8:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 80128ac:	4916      	ldr	r1, [pc, #88]	; (8012908 <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 80128ae:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 80128b0:	3201      	adds	r2, #1
 80128b2:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 80128b6:	3301      	adds	r3, #1
 80128b8:	b29b      	uxth	r3, r3
 80128ba:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80128be:	429a      	cmp	r2, r3
 80128c0:	d8ed      	bhi.n	801289e <UTIL_ADV_TRACE_COND_FSend+0x5e>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 80128c2:	f8bd 0000 	ldrh.w	r0, [sp]
 80128c6:	9b05      	ldr	r3, [sp, #20]
 80128c8:	4622      	mov	r2, r4
 80128ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80128ce:	4c0e      	ldr	r4, [pc, #56]	; (8012908 <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 80128d0:	4420      	add	r0, r4
 80128d2:	f000 fca5 	bl	8013220 <tiny_vsnprintf_like>
    TRACE_UnLock();
 80128d6:	f7ff ff2b 	bl	8012730 <TRACE_UnLock>
    return TRACE_Send();
 80128da:	f7ff ff63 	bl	80127a4 <TRACE_Send>
}
 80128de:	b006      	add	sp, #24
 80128e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80128e4:	b001      	add	sp, #4
 80128e6:	4770      	bx	lr
  TRACE_UnLock();
 80128e8:	f7ff ff22 	bl	8012730 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 80128ec:	f06f 0002 	mvn.w	r0, #2
 80128f0:	e7f5      	b.n	80128de <UTIL_ADV_TRACE_COND_FSend+0x9e>
    return UTIL_ADV_TRACE_GIVEUP;
 80128f2:	f06f 0004 	mvn.w	r0, #4
 80128f6:	e7f2      	b.n	80128de <UTIL_ADV_TRACE_COND_FSend+0x9e>
    return UTIL_ADV_TRACE_REGIONMASKED;
 80128f8:	f06f 0005 	mvn.w	r0, #5
 80128fc:	e7ef      	b.n	80128de <UTIL_ADV_TRACE_COND_FSend+0x9e>
 80128fe:	bf00      	nop
 8012900:	200013e4 	.word	0x200013e4
 8012904:	200013fc 	.word	0x200013fc
 8012908:	20000fe4 	.word	0x20000fe4

0801290c <TRACE_TxCpltCallback>:
{
 801290c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801290e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012912:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 8012914:	4b25      	ldr	r3, [pc, #148]	; (80129ac <TRACE_TxCpltCallback+0xa0>)
 8012916:	789b      	ldrb	r3, [r3, #2]
 8012918:	2b02      	cmp	r3, #2
 801291a:	d016      	beq.n	801294a <TRACE_TxCpltCallback+0x3e>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801291c:	4a23      	ldr	r2, [pc, #140]	; (80129ac <TRACE_TxCpltCallback+0xa0>)
 801291e:	8a13      	ldrh	r3, [r2, #16]
 8012920:	8a90      	ldrh	r0, [r2, #20]
 8012922:	4403      	add	r3, r0
 8012924:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012928:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801292a:	4b20      	ldr	r3, [pc, #128]	; (80129ac <TRACE_TxCpltCallback+0xa0>)
 801292c:	8a1a      	ldrh	r2, [r3, #16]
 801292e:	8a5b      	ldrh	r3, [r3, #18]
 8012930:	429a      	cmp	r2, r3
 8012932:	d003      	beq.n	801293c <TRACE_TxCpltCallback+0x30>
 8012934:	481d      	ldr	r0, [pc, #116]	; (80129ac <TRACE_TxCpltCallback+0xa0>)
 8012936:	8ac0      	ldrh	r0, [r0, #22]
 8012938:	2801      	cmp	r0, #1
 801293a:	d00b      	beq.n	8012954 <TRACE_TxCpltCallback+0x48>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801293c:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 8012940:	f7ef f846 	bl	80019d0 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 8012944:	f7ff fef4 	bl	8012730 <TRACE_UnLock>
}
 8012948:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801294a:	4b18      	ldr	r3, [pc, #96]	; (80129ac <TRACE_TxCpltCallback+0xa0>)
 801294c:	2200      	movs	r2, #0
 801294e:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 8012950:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 8012952:	e7ea      	b.n	801292a <TRACE_TxCpltCallback+0x1e>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8012954:	4815      	ldr	r0, [pc, #84]	; (80129ac <TRACE_TxCpltCallback+0xa0>)
 8012956:	7880      	ldrb	r0, [r0, #2]
 8012958:	2801      	cmp	r0, #1
 801295a:	d014      	beq.n	8012986 <TRACE_TxCpltCallback+0x7a>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801295c:	4a13      	ldr	r2, [pc, #76]	; (80129ac <TRACE_TxCpltCallback+0xa0>)
 801295e:	7892      	ldrb	r2, [r2, #2]
 8012960:	b932      	cbnz	r2, 8012970 <TRACE_TxCpltCallback+0x64>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8012962:	4a12      	ldr	r2, [pc, #72]	; (80129ac <TRACE_TxCpltCallback+0xa0>)
 8012964:	8a12      	ldrh	r2, [r2, #16]
 8012966:	4293      	cmp	r3, r2
 8012968:	d91b      	bls.n	80129a2 <TRACE_TxCpltCallback+0x96>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801296a:	1a9b      	subs	r3, r3, r2
 801296c:	4a0f      	ldr	r2, [pc, #60]	; (80129ac <TRACE_TxCpltCallback+0xa0>)
 801296e:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8012970:	4b0e      	ldr	r3, [pc, #56]	; (80129ac <TRACE_TxCpltCallback+0xa0>)
 8012972:	8a1a      	ldrh	r2, [r3, #16]
 8012974:	480e      	ldr	r0, [pc, #56]	; (80129b0 <TRACE_TxCpltCallback+0xa4>)
 8012976:	4410      	add	r0, r2
 8012978:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801297c:	4a0d      	ldr	r2, [pc, #52]	; (80129b4 <TRACE_TxCpltCallback+0xa8>)
 801297e:	68d2      	ldr	r2, [r2, #12]
 8012980:	8a99      	ldrh	r1, [r3, #20]
 8012982:	4790      	blx	r2
 8012984:	e7e0      	b.n	8012948 <TRACE_TxCpltCallback+0x3c>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 8012986:	4c09      	ldr	r4, [pc, #36]	; (80129ac <TRACE_TxCpltCallback+0xa0>)
 8012988:	8820      	ldrh	r0, [r4, #0]
 801298a:	1a82      	subs	r2, r0, r2
 801298c:	b292      	uxth	r2, r2
 801298e:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8012990:	2002      	movs	r0, #2
 8012992:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 8012994:	2000      	movs	r0, #0
 8012996:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8012998:	2a00      	cmp	r2, #0
 801299a:	d1df      	bne.n	801295c <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801299c:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801299e:	8220      	strh	r0, [r4, #16]
 80129a0:	e7dc      	b.n	801295c <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 80129a2:	f5c2 6380 	rsb	r3, r2, #1024	; 0x400
 80129a6:	4a01      	ldr	r2, [pc, #4]	; (80129ac <TRACE_TxCpltCallback+0xa0>)
 80129a8:	8293      	strh	r3, [r2, #20]
 80129aa:	e7e1      	b.n	8012970 <TRACE_TxCpltCallback+0x64>
 80129ac:	200013e4 	.word	0x200013e4
 80129b0:	20000fe4 	.word	0x20000fe4
 80129b4:	08013fa0 	.word	0x08013fa0

080129b8 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80129b8:	2300      	movs	r3, #0
 80129ba:	4a02      	ldr	r2, [pc, #8]	; (80129c4 <UTIL_LPM_Init+0xc>)
 80129bc:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80129be:	4a02      	ldr	r2, [pc, #8]	; (80129c8 <UTIL_LPM_Init+0x10>)
 80129c0:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80129c2:	4770      	bx	lr
 80129c4:	20001600 	.word	0x20001600
 80129c8:	200015fc 	.word	0x200015fc

080129cc <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80129cc:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80129d0:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 80129d2:	b141      	cbz	r1, 80129e6 <UTIL_LPM_SetStopMode+0x1a>
 80129d4:	2901      	cmp	r1, #1
 80129d6:	d103      	bne.n	80129e0 <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 80129d8:	4906      	ldr	r1, [pc, #24]	; (80129f4 <UTIL_LPM_SetStopMode+0x28>)
 80129da:	680a      	ldr	r2, [r1, #0]
 80129dc:	4310      	orrs	r0, r2
 80129de:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80129e0:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80129e4:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 80129e6:	4903      	ldr	r1, [pc, #12]	; (80129f4 <UTIL_LPM_SetStopMode+0x28>)
 80129e8:	680a      	ldr	r2, [r1, #0]
 80129ea:	ea22 0000 	bic.w	r0, r2, r0
 80129ee:	6008      	str	r0, [r1, #0]
      break;
 80129f0:	e7f6      	b.n	80129e0 <UTIL_LPM_SetStopMode+0x14>
 80129f2:	bf00      	nop
 80129f4:	20001600 	.word	0x20001600

080129f8 <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80129f8:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80129fc:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 80129fe:	b141      	cbz	r1, 8012a12 <UTIL_LPM_SetOffMode+0x1a>
 8012a00:	2901      	cmp	r1, #1
 8012a02:	d103      	bne.n	8012a0c <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8012a04:	4906      	ldr	r1, [pc, #24]	; (8012a20 <UTIL_LPM_SetOffMode+0x28>)
 8012a06:	680a      	ldr	r2, [r1, #0]
 8012a08:	4310      	orrs	r0, r2
 8012a0a:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012a0c:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8012a10:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 8012a12:	4903      	ldr	r1, [pc, #12]	; (8012a20 <UTIL_LPM_SetOffMode+0x28>)
 8012a14:	680a      	ldr	r2, [r1, #0]
 8012a16:	ea22 0000 	bic.w	r0, r2, r0
 8012a1a:	6008      	str	r0, [r1, #0]
      break;
 8012a1c:	e7f6      	b.n	8012a0c <UTIL_LPM_SetOffMode+0x14>
 8012a1e:	bf00      	nop
 8012a20:	200015fc 	.word	0x200015fc

08012a24 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8012a24:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012a26:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012a2a:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8012a2c:	4b0c      	ldr	r3, [pc, #48]	; (8012a60 <UTIL_LPM_EnterLowPower+0x3c>)
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	b13b      	cbz	r3, 8012a42 <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8012a32:	4d0c      	ldr	r5, [pc, #48]	; (8012a64 <UTIL_LPM_EnterLowPower+0x40>)
 8012a34:	682b      	ldr	r3, [r5, #0]
 8012a36:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8012a38:	686b      	ldr	r3, [r5, #4]
 8012a3a:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012a3c:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8012a40:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8012a42:	4b09      	ldr	r3, [pc, #36]	; (8012a68 <UTIL_LPM_EnterLowPower+0x44>)
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	b12b      	cbz	r3, 8012a54 <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 8012a48:	4d06      	ldr	r5, [pc, #24]	; (8012a64 <UTIL_LPM_EnterLowPower+0x40>)
 8012a4a:	68ab      	ldr	r3, [r5, #8]
 8012a4c:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8012a4e:	68eb      	ldr	r3, [r5, #12]
 8012a50:	4798      	blx	r3
 8012a52:	e7f3      	b.n	8012a3c <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 8012a54:	4d03      	ldr	r5, [pc, #12]	; (8012a64 <UTIL_LPM_EnterLowPower+0x40>)
 8012a56:	692b      	ldr	r3, [r5, #16]
 8012a58:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8012a5a:	696b      	ldr	r3, [r5, #20]
 8012a5c:	4798      	blx	r3
 8012a5e:	e7ed      	b.n	8012a3c <UTIL_LPM_EnterLowPower+0x18>
 8012a60:	20001600 	.word	0x20001600
 8012a64:	08013f04 	.word	0x08013f04
 8012a68:	200015fc 	.word	0x200015fc

08012a6c <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 8012a6c:	e004      	b.n	8012a78 <UTIL_MEM_cpy_8+0xc>
    {
        *dst8++ = *src8++;
 8012a6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012a72:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 8012a76:	461a      	mov	r2, r3
 8012a78:	1e53      	subs	r3, r2, #1
 8012a7a:	b29b      	uxth	r3, r3
 8012a7c:	2a00      	cmp	r2, #0
 8012a7e:	d1f6      	bne.n	8012a6e <UTIL_MEM_cpy_8+0x2>
    }
}
 8012a80:	4770      	bx	lr

08012a82 <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 8012a82:	e002      	b.n	8012a8a <UTIL_MEM_set_8+0x8>
  {
    *dst8++ = value;
 8012a84:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 8012a88:	461a      	mov	r2, r3
 8012a8a:	1e53      	subs	r3, r2, #1
 8012a8c:	b29b      	uxth	r3, r3
 8012a8e:	2a00      	cmp	r2, #0
 8012a90:	d1f8      	bne.n	8012a84 <UTIL_MEM_set_8+0x2>
  }
}
 8012a92:	4770      	bx	lr

08012a94 <UTIL_SEQ_SetTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012a94:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012a98:	b672      	cpsid	i

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 8012a9a:	4a06      	ldr	r2, [pc, #24]	; (8012ab4 <UTIL_SEQ_SetTask+0x20>)
 8012a9c:	6813      	ldr	r3, [r2, #0]
 8012a9e:	4303      	orrs	r3, r0
 8012aa0:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8012aa2:	4a05      	ldr	r2, [pc, #20]	; (8012ab8 <UTIL_SEQ_SetTask+0x24>)
 8012aa4:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 8012aa8:	4318      	orrs	r0, r3
 8012aaa:	f842 0031 	str.w	r0, [r2, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012aae:	f38c 8810 	msr	PRIMASK, ip

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 8012ab2:	4770      	bx	lr
 8012ab4:	20001628 	.word	0x20001628
 8012ab8:	20001620 	.word	0x20001620

08012abc <UTIL_SEQ_PreIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8012abc:	4770      	bx	lr

08012abe <UTIL_SEQ_PostIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8012abe:	4770      	bx	lr

08012ac0 <SEQ_BitPosition>:
uint8_t SEQ_BitPosition(uint32_t Value)
{
uint8_t n = 0U;
uint32_t lvalue = Value;

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8012ac0:	0c03      	lsrs	r3, r0, #16
 8012ac2:	041b      	lsls	r3, r3, #16
 8012ac4:	b9b3      	cbnz	r3, 8012af4 <SEQ_BitPosition+0x34>
 8012ac6:	0400      	lsls	r0, r0, #16
 8012ac8:	2310      	movs	r3, #16
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8012aca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012ace:	d102      	bne.n	8012ad6 <SEQ_BitPosition+0x16>
 8012ad0:	3308      	adds	r3, #8
 8012ad2:	b2db      	uxtb	r3, r3
 8012ad4:	0200      	lsls	r0, r0, #8
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8012ad6:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012ada:	d102      	bne.n	8012ae2 <SEQ_BitPosition+0x22>
 8012adc:	3304      	adds	r3, #4
 8012ade:	b2db      	uxtb	r3, r3
 8012ae0:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8012ae2:	0f00      	lsrs	r0, r0, #28
 8012ae4:	4a04      	ldr	r2, [pc, #16]	; (8012af8 <SEQ_BitPosition+0x38>)
 8012ae6:	5c10      	ldrb	r0, [r2, r0]
 8012ae8:	4418      	add	r0, r3
 8012aea:	b2c0      	uxtb	r0, r0

  return (uint8_t)(31U-n);
 8012aec:	f1c0 001f 	rsb	r0, r0, #31
}
 8012af0:	b2c0      	uxtb	r0, r0
 8012af2:	4770      	bx	lr
uint8_t n = 0U;
 8012af4:	2300      	movs	r3, #0
 8012af6:	e7e8      	b.n	8012aca <SEQ_BitPosition+0xa>
 8012af8:	08014df0 	.word	0x08014df0

08012afc <UTIL_SEQ_Run>:
{
 8012afc:	b538      	push	{r3, r4, r5, lr}
  super_mask_backup = SuperMask;
 8012afe:	4b43      	ldr	r3, [pc, #268]	; (8012c0c <UTIL_SEQ_Run+0x110>)
 8012b00:	681c      	ldr	r4, [r3, #0]
  SuperMask &= Mask_bm;
 8012b02:	4020      	ands	r0, r4
 8012b04:	6018      	str	r0, [r3, #0]
  local_taskset = TaskSet;
 8012b06:	4b42      	ldr	r3, [pc, #264]	; (8012c10 <UTIL_SEQ_Run+0x114>)
 8012b08:	6819      	ldr	r1, [r3, #0]
  local_evtset = EvtSet;
 8012b0a:	4b42      	ldr	r3, [pc, #264]	; (8012c14 <UTIL_SEQ_Run+0x118>)
 8012b0c:	681b      	ldr	r3, [r3, #0]
  local_taskmask = TaskMask;
 8012b0e:	4a42      	ldr	r2, [pc, #264]	; (8012c18 <UTIL_SEQ_Run+0x11c>)
 8012b10:	6810      	ldr	r0, [r2, #0]
  local_evtwaited =  EvtWaited;
 8012b12:	4a42      	ldr	r2, [pc, #264]	; (8012c1c <UTIL_SEQ_Run+0x120>)
 8012b14:	6812      	ldr	r2, [r2, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8012b16:	e030      	b.n	8012b7a <UTIL_SEQ_Run+0x7e>
      counter++;
 8012b18:	3301      	adds	r3, #1
 8012b1a:	e035      	b.n	8012b88 <UTIL_SEQ_Run+0x8c>
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8012b1c:	4d40      	ldr	r5, [pc, #256]	; (8012c20 <UTIL_SEQ_Run+0x124>)
 8012b1e:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8012b22:	6868      	ldr	r0, [r5, #4]
 8012b24:	4010      	ands	r0, r2
 8012b26:	f7ff ffcb 	bl	8012ac0 <SEQ_BitPosition>
 8012b2a:	493e      	ldr	r1, [pc, #248]	; (8012c24 <UTIL_SEQ_Run+0x128>)
 8012b2c:	6008      	str	r0, [r1, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8012b2e:	686a      	ldr	r2, [r5, #4]
 8012b30:	2301      	movs	r3, #1
 8012b32:	fa03 f000 	lsl.w	r0, r3, r0
 8012b36:	ea22 0000 	bic.w	r0, r2, r0
 8012b3a:	6068      	str	r0, [r5, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012b3c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012b40:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 8012b42:	680a      	ldr	r2, [r1, #0]
 8012b44:	fa03 f202 	lsl.w	r2, r3, r2
 8012b48:	ea6f 0c02 	mvn.w	ip, r2
 8012b4c:	4830      	ldr	r0, [pc, #192]	; (8012c10 <UTIL_SEQ_Run+0x114>)
 8012b4e:	6801      	ldr	r1, [r0, #0]
 8012b50:	ea21 0202 	bic.w	r2, r1, r2
 8012b54:	6002      	str	r2, [r0, #0]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d12d      	bne.n	8012bb6 <UTIL_SEQ_Run+0xba>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012b5a:	f385 8810 	msr	PRIMASK, r5
    TaskCb[CurrentTaskIdx]( );
 8012b5e:	4b31      	ldr	r3, [pc, #196]	; (8012c24 <UTIL_SEQ_Run+0x128>)
 8012b60:	681a      	ldr	r2, [r3, #0]
 8012b62:	4b31      	ldr	r3, [pc, #196]	; (8012c28 <UTIL_SEQ_Run+0x12c>)
 8012b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012b68:	4798      	blx	r3
    local_taskset = TaskSet;
 8012b6a:	4b29      	ldr	r3, [pc, #164]	; (8012c10 <UTIL_SEQ_Run+0x114>)
 8012b6c:	6819      	ldr	r1, [r3, #0]
    local_evtset = EvtSet;
 8012b6e:	4b29      	ldr	r3, [pc, #164]	; (8012c14 <UTIL_SEQ_Run+0x118>)
 8012b70:	681b      	ldr	r3, [r3, #0]
    local_taskmask = TaskMask;
 8012b72:	4a29      	ldr	r2, [pc, #164]	; (8012c18 <UTIL_SEQ_Run+0x11c>)
 8012b74:	6810      	ldr	r0, [r2, #0]
    local_evtwaited = EvtWaited;
 8012b76:	4a29      	ldr	r2, [pc, #164]	; (8012c1c <UTIL_SEQ_Run+0x120>)
 8012b78:	6812      	ldr	r2, [r2, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8012b7a:	4001      	ands	r1, r0
 8012b7c:	4d23      	ldr	r5, [pc, #140]	; (8012c0c <UTIL_SEQ_Run+0x110>)
 8012b7e:	682d      	ldr	r5, [r5, #0]
 8012b80:	4229      	tst	r1, r5
 8012b82:	d021      	beq.n	8012bc8 <UTIL_SEQ_Run+0xcc>
 8012b84:	4013      	ands	r3, r2
 8012b86:	d11f      	bne.n	8012bc8 <UTIL_SEQ_Run+0xcc>
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8012b88:	4a25      	ldr	r2, [pc, #148]	; (8012c20 <UTIL_SEQ_Run+0x124>)
 8012b8a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8012b8e:	4002      	ands	r2, r0
 8012b90:	422a      	tst	r2, r5
 8012b92:	d0c1      	beq.n	8012b18 <UTIL_SEQ_Run+0x1c>
    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8012b94:	4922      	ldr	r1, [pc, #136]	; (8012c20 <UTIL_SEQ_Run+0x124>)
 8012b96:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8012b9a:	4002      	ands	r2, r0
 8012b9c:	402a      	ands	r2, r5
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8012b9e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012ba2:	6849      	ldr	r1, [r1, #4]
 8012ba4:	4211      	tst	r1, r2
 8012ba6:	d1b9      	bne.n	8012b1c <UTIL_SEQ_Run+0x20>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8012ba8:	491d      	ldr	r1, [pc, #116]	; (8012c20 <UTIL_SEQ_Run+0x124>)
 8012baa:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012bae:	f04f 30ff 	mov.w	r0, #4294967295
 8012bb2:	6048      	str	r0, [r1, #4]
 8012bb4:	e7b2      	b.n	8012b1c <UTIL_SEQ_Run+0x20>
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8012bb6:	3b01      	subs	r3, #1
 8012bb8:	4919      	ldr	r1, [pc, #100]	; (8012c20 <UTIL_SEQ_Run+0x124>)
 8012bba:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8012bbe:	ea0c 0202 	and.w	r2, ip, r2
 8012bc2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8012bc6:	e7c6      	b.n	8012b56 <UTIL_SEQ_Run+0x5a>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8012bc8:	4b16      	ldr	r3, [pc, #88]	; (8012c24 <UTIL_SEQ_Run+0x128>)
 8012bca:	f04f 32ff 	mov.w	r2, #4294967295
 8012bce:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8012bd0:	f7ff ff74 	bl	8012abc <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012bd4:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012bd8:	b672      	cpsid	i
  local_taskset = TaskSet;
 8012bda:	4b0d      	ldr	r3, [pc, #52]	; (8012c10 <UTIL_SEQ_Run+0x114>)
 8012bdc:	681b      	ldr	r3, [r3, #0]
  local_evtset = EvtSet;
 8012bde:	4a0d      	ldr	r2, [pc, #52]	; (8012c14 <UTIL_SEQ_Run+0x118>)
 8012be0:	6811      	ldr	r1, [r2, #0]
  local_taskmask = TaskMask;
 8012be2:	4a0d      	ldr	r2, [pc, #52]	; (8012c18 <UTIL_SEQ_Run+0x11c>)
 8012be4:	6812      	ldr	r2, [r2, #0]
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8012be6:	4013      	ands	r3, r2
 8012be8:	4a08      	ldr	r2, [pc, #32]	; (8012c0c <UTIL_SEQ_Run+0x110>)
 8012bea:	6812      	ldr	r2, [r2, #0]
 8012bec:	4213      	tst	r3, r2
 8012bee:	d103      	bne.n	8012bf8 <UTIL_SEQ_Run+0xfc>
    if ((local_evtset & EvtWaited)== 0U)
 8012bf0:	4b0a      	ldr	r3, [pc, #40]	; (8012c1c <UTIL_SEQ_Run+0x120>)
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	420b      	tst	r3, r1
 8012bf6:	d006      	beq.n	8012c06 <UTIL_SEQ_Run+0x10a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012bf8:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 8012bfc:	f7ff ff5f 	bl	8012abe <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 8012c00:	4b02      	ldr	r3, [pc, #8]	; (8012c0c <UTIL_SEQ_Run+0x110>)
 8012c02:	601c      	str	r4, [r3, #0]
}
 8012c04:	bd38      	pop	{r3, r4, r5, pc}
      UTIL_SEQ_Idle( );
 8012c06:	f7ee fe67 	bl	80018d8 <UTIL_SEQ_Idle>
 8012c0a:	e7f5      	b.n	8012bf8 <UTIL_SEQ_Run+0xfc>
 8012c0c:	2000011c 	.word	0x2000011c
 8012c10:	20001628 	.word	0x20001628
 8012c14:	20001608 	.word	0x20001608
 8012c18:	20000120 	.word	0x20000120
 8012c1c:	2000160c 	.word	0x2000160c
 8012c20:	20001620 	.word	0x20001620
 8012c24:	20001604 	.word	0x20001604
 8012c28:	20001610 	.word	0x20001610

08012c2c <UTIL_SEQ_RegTask>:
{
 8012c2c:	b538      	push	{r3, r4, r5, lr}
 8012c2e:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012c30:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012c34:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8012c36:	f7ff ff43 	bl	8012ac0 <SEQ_BitPosition>
 8012c3a:	4b03      	ldr	r3, [pc, #12]	; (8012c48 <UTIL_SEQ_RegTask+0x1c>)
 8012c3c:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012c40:	f385 8810 	msr	PRIMASK, r5
}
 8012c44:	bd38      	pop	{r3, r4, r5, pc}
 8012c46:	bf00      	nop
 8012c48:	20001610 	.word	0x20001610

08012c4c <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8012c4c:	b082      	sub	sp, #8
 8012c4e:	b082      	sub	sp, #8
 8012c50:	f10d 0c08 	add.w	ip, sp, #8
 8012c54:	e90c 0006 	stmdb	ip, {r1, r2}
 8012c58:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 8012c5a:	2200      	movs	r2, #0
 8012c5c:	6002      	str	r2, [r0, #0]
 8012c5e:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds + b.Seconds;
 8012c60:	440b      	add	r3, r1
 8012c62:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8012c64:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8012c68:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8012c6c:	440a      	add	r2, r1
 8012c6e:	b291      	uxth	r1, r2
 8012c70:	b212      	sxth	r2, r2
 8012c72:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 8012c74:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8012c78:	db04      	blt.n	8012c84 <SysTimeAdd+0x38>
  {
    c.Seconds++;
 8012c7a:	3301      	adds	r3, #1
 8012c7c:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 8012c7e:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 8012c82:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 8012c84:	b002      	add	sp, #8
 8012c86:	b002      	add	sp, #8
 8012c88:	4770      	bx	lr

08012c8a <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 8012c8a:	b082      	sub	sp, #8
 8012c8c:	b082      	sub	sp, #8
 8012c8e:	f10d 0c08 	add.w	ip, sp, #8
 8012c92:	e90c 0006 	stmdb	ip, {r1, r2}
 8012c96:	9303      	str	r3, [sp, #12]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 8012c98:	2200      	movs	r2, #0
 8012c9a:	6002      	str	r2, [r0, #0]
 8012c9c:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds - b.Seconds;
 8012c9e:	1acb      	subs	r3, r1, r3
 8012ca0:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8012ca2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8012ca6:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8012caa:	1a52      	subs	r2, r2, r1
 8012cac:	b291      	uxth	r1, r2
 8012cae:	b212      	sxth	r2, r2
 8012cb0:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds < 0 )
 8012cb2:	2a00      	cmp	r2, #0
 8012cb4:	db02      	blt.n	8012cbc <SysTimeSub+0x32>
  {
    c.Seconds--;
    c.SubSeconds += 1000;
  }
  return c;
}
 8012cb6:	b002      	add	sp, #8
 8012cb8:	b002      	add	sp, #8
 8012cba:	4770      	bx	lr
    c.Seconds--;
 8012cbc:	3b01      	subs	r3, #1
 8012cbe:	6003      	str	r3, [r0, #0]
    c.SubSeconds += 1000;
 8012cc0:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 8012cc4:	8081      	strh	r1, [r0, #4]
  return c;
 8012cc6:	e7f6      	b.n	8012cb6 <SysTimeSub+0x2c>

08012cc8 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8012cc8:	b530      	push	{r4, r5, lr}
 8012cca:	b089      	sub	sp, #36	; 0x24
 8012ccc:	ac02      	add	r4, sp, #8
 8012cce:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	9304      	str	r3, [sp, #16]
 8012cd6:	f8ad 3014 	strh.w	r3, [sp, #20]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8012cda:	4d0b      	ldr	r5, [pc, #44]	; (8012d08 <SysTimeSet+0x40>)
 8012cdc:	692b      	ldr	r3, [r5, #16]
 8012cde:	a805      	add	r0, sp, #20
 8012ce0:	4798      	blx	r3
 8012ce2:	4603      	mov	r3, r0
 8012ce4:	9004      	str	r0, [sp, #16]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 8012ce6:	9a05      	ldr	r2, [sp, #20]
 8012ce8:	9200      	str	r2, [sp, #0]
 8012cea:	e894 0006 	ldmia.w	r4, {r1, r2}
 8012cee:	a806      	add	r0, sp, #24
 8012cf0:	f7ff ffcb 	bl	8012c8a <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 8012cf4:	682b      	ldr	r3, [r5, #0]
 8012cf6:	9806      	ldr	r0, [sp, #24]
 8012cf8:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 8012cfa:	68ab      	ldr	r3, [r5, #8]
 8012cfc:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8012d00:	4798      	blx	r3
}
 8012d02:	b009      	add	sp, #36	; 0x24
 8012d04:	bd30      	pop	{r4, r5, pc}
 8012d06:	bf00      	nop
 8012d08:	08013f60 	.word	0x08013f60

08012d0c <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8012d0c:	b530      	push	{r4, r5, lr}
 8012d0e:	b087      	sub	sp, #28
 8012d10:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8012d12:	2300      	movs	r3, #0
 8012d14:	9304      	str	r3, [sp, #16]
 8012d16:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 8012d1a:	6003      	str	r3, [r0, #0]
 8012d1c:	8083      	strh	r3, [r0, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8012d1e:	4d0b      	ldr	r5, [pc, #44]	; (8012d4c <SysTimeGet+0x40>)
 8012d20:	692b      	ldr	r3, [r5, #16]
 8012d22:	a805      	add	r0, sp, #20
 8012d24:	4798      	blx	r3
 8012d26:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8012d28:	68eb      	ldr	r3, [r5, #12]
 8012d2a:	4798      	blx	r3
 8012d2c:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8012d30:	686b      	ldr	r3, [r5, #4]
 8012d32:	4798      	blx	r3
 8012d34:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 8012d36:	9b05      	ldr	r3, [sp, #20]
 8012d38:	9300      	str	r3, [sp, #0]
 8012d3a:	9b04      	ldr	r3, [sp, #16]
 8012d3c:	aa02      	add	r2, sp, #8
 8012d3e:	ca06      	ldmia	r2, {r1, r2}
 8012d40:	4620      	mov	r0, r4
 8012d42:	f7ff ff83 	bl	8012c4c <SysTimeAdd>

  return sysTime;
}
 8012d46:	4620      	mov	r0, r4
 8012d48:	b007      	add	sp, #28
 8012d4a:	bd30      	pop	{r4, r5, pc}
 8012d4c:	08013f60 	.word	0x08013f60

08012d50 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 8012d50:	b530      	push	{r4, r5, lr}
 8012d52:	b083      	sub	sp, #12
 8012d54:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8012d56:	2300      	movs	r3, #0
 8012d58:	9300      	str	r3, [sp, #0]
 8012d5a:	f8ad 3004 	strh.w	r3, [sp, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8012d5e:	4b06      	ldr	r3, [pc, #24]	; (8012d78 <SysTimeGetMcuTime+0x28>)
 8012d60:	691b      	ldr	r3, [r3, #16]
 8012d62:	466d      	mov	r5, sp
 8012d64:	a801      	add	r0, sp, #4
 8012d66:	4798      	blx	r3
 8012d68:	9000      	str	r0, [sp, #0]

  return calendarTime;
 8012d6a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012d6e:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8012d72:	4620      	mov	r0, r4
 8012d74:	b003      	add	sp, #12
 8012d76:	bd30      	pop	{r4, r5, pc}
 8012d78:	08013f60 	.word	0x08013f60

08012d7c <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 8012d7c:	b530      	push	{r4, r5, lr}
 8012d7e:	b089      	sub	sp, #36	; 0x24
 8012d80:	ac02      	add	r4, sp, #8
 8012d82:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8012d86:	4d0c      	ldr	r5, [pc, #48]	; (8012db8 <SysTimeToMs+0x3c>)
 8012d88:	68eb      	ldr	r3, [r5, #12]
 8012d8a:	4798      	blx	r3
 8012d8c:	f8ad 001c 	strh.w	r0, [sp, #28]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8012d90:	686b      	ldr	r3, [r5, #4]
 8012d92:	4798      	blx	r3
 8012d94:	4603      	mov	r3, r0
 8012d96:	9006      	str	r0, [sp, #24]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 8012d98:	9a07      	ldr	r2, [sp, #28]
 8012d9a:	9200      	str	r2, [sp, #0]
 8012d9c:	e894 0006 	ldmia.w	r4, {r1, r2}
 8012da0:	a804      	add	r0, sp, #16
 8012da2:	f7ff ff72 	bl	8012c8a <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 8012da6:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
}
 8012daa:	9a04      	ldr	r2, [sp, #16]
 8012dac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012db0:	fb00 3002 	mla	r0, r0, r2, r3
 8012db4:	b009      	add	sp, #36	; 0x24
 8012db6:	bd30      	pop	{r4, r5, pc}
 8012db8:	08013f60 	.word	0x08013f60

08012dbc <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 8012dbc:	b530      	push	{r4, r5, lr}
 8012dbe:	b087      	sub	sp, #28
 8012dc0:	4604      	mov	r4, r0
  uint32_t seconds = timeMs / 1000;
 8012dc2:	4b12      	ldr	r3, [pc, #72]	; (8012e0c <SysTimeFromMs+0x50>)
 8012dc4:	fba3 2301 	umull	r2, r3, r3, r1
 8012dc8:	099b      	lsrs	r3, r3, #6
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8012dca:	9304      	str	r3, [sp, #16]
 8012dcc:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8012dd0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8012dd4:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
 8012dd8:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t DeltaTime = { 0 };
 8012ddc:	2300      	movs	r3, #0
 8012dde:	9302      	str	r3, [sp, #8]
 8012de0:	9303      	str	r3, [sp, #12]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8012de2:	4d0b      	ldr	r5, [pc, #44]	; (8012e10 <SysTimeFromMs+0x54>)
 8012de4:	68eb      	ldr	r3, [r5, #12]
 8012de6:	4798      	blx	r3
 8012de8:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8012dec:	686b      	ldr	r3, [r5, #4]
 8012dee:	4798      	blx	r3
 8012df0:	4603      	mov	r3, r0
 8012df2:	9002      	str	r0, [sp, #8]
  return SysTimeAdd( sysTime, DeltaTime );
 8012df4:	9a03      	ldr	r2, [sp, #12]
 8012df6:	9200      	str	r2, [sp, #0]
 8012df8:	aa06      	add	r2, sp, #24
 8012dfa:	e912 0006 	ldmdb	r2, {r1, r2}
 8012dfe:	4620      	mov	r0, r4
 8012e00:	f7ff ff24 	bl	8012c4c <SysTimeAdd>
}
 8012e04:	4620      	mov	r0, r4
 8012e06:	b007      	add	sp, #28
 8012e08:	bd30      	pop	{r4, r5, pc}
 8012e0a:	bf00      	nop
 8012e0c:	10624dd3 	.word	0x10624dd3
 8012e10:	08013f60 	.word	0x08013f60

08012e14 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 8012e14:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 8012e16:	4b03      	ldr	r3, [pc, #12]	; (8012e24 <UTIL_TIMER_Init+0x10>)
 8012e18:	2200      	movs	r2, #0
 8012e1a:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 8012e1c:	4b02      	ldr	r3, [pc, #8]	; (8012e28 <UTIL_TIMER_Init+0x14>)
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	4798      	blx	r3
}
 8012e22:	bd08      	pop	{r3, pc}
 8012e24:	2000162c 	.word	0x2000162c
 8012e28:	08013f74 	.word	0x08013f74

08012e2c <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 8012e2c:	b1a8      	cbz	r0, 8012e5a <UTIL_TIMER_Create+0x2e>
{
 8012e2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e30:	4617      	mov	r7, r2
 8012e32:	461e      	mov	r6, r3
 8012e34:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 8012e36:	b193      	cbz	r3, 8012e5e <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 8012e38:	2500      	movs	r5, #0
 8012e3a:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8012e3c:	4b09      	ldr	r3, [pc, #36]	; (8012e64 <UTIL_TIMER_Create+0x38>)
 8012e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e40:	4608      	mov	r0, r1
 8012e42:	4798      	blx	r3
 8012e44:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 8012e46:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 8012e48:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8012e4a:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 8012e4c:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 8012e4e:	9b06      	ldr	r3, [sp, #24]
 8012e50:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 8012e52:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 8012e54:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 8012e56:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 8012e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 8012e5a:	2001      	movs	r0, #1
}
 8012e5c:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 8012e5e:	2001      	movs	r0, #1
 8012e60:	e7fa      	b.n	8012e58 <UTIL_TIMER_Create+0x2c>
 8012e62:	bf00      	nop
 8012e64:	08013f74 	.word	0x08013f74

08012e68 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8012e68:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 8012e6a:	4c03      	ldr	r4, [pc, #12]	; (8012e78 <UTIL_TIMER_GetCurrentTime+0x10>)
 8012e6c:	69e3      	ldr	r3, [r4, #28]
 8012e6e:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 8012e70:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012e72:	4798      	blx	r3
}
 8012e74:	bd10      	pop	{r4, pc}
 8012e76:	bf00      	nop
 8012e78:	08013f74 	.word	0x08013f74

08012e7c <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8012e7c:	b570      	push	{r4, r5, r6, lr}
 8012e7e:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8012e80:	4d05      	ldr	r5, [pc, #20]	; (8012e98 <UTIL_TIMER_GetElapsedTime+0x1c>)
 8012e82:	69eb      	ldr	r3, [r5, #28]
 8012e84:	4798      	blx	r3
 8012e86:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8012e88:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012e8a:	4630      	mov	r0, r6
 8012e8c:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 8012e8e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8012e90:	1a20      	subs	r0, r4, r0
 8012e92:	4798      	blx	r3
}
 8012e94:	bd70      	pop	{r4, r5, r6, pc}
 8012e96:	bf00      	nop
 8012e98:	08013f74 	.word	0x08013f74

08012e9c <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8012e9c:	4b05      	ldr	r3, [pc, #20]	; (8012eb4 <TimerExists+0x18>)
 8012e9e:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 8012ea0:	e000      	b.n	8012ea4 <TimerExists+0x8>
  {
    if( cur == TimerObject )
    {
      return true;
    }
    cur = cur->Next;
 8012ea2:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 8012ea4:	b11b      	cbz	r3, 8012eae <TimerExists+0x12>
    if( cur == TimerObject )
 8012ea6:	4283      	cmp	r3, r0
 8012ea8:	d1fb      	bne.n	8012ea2 <TimerExists+0x6>
      return true;
 8012eaa:	2001      	movs	r0, #1
  }
  return false;
}
 8012eac:	4770      	bx	lr
  return false;
 8012eae:	2000      	movs	r0, #0
 8012eb0:	4770      	bx	lr
 8012eb2:	bf00      	nop
 8012eb4:	2000162c 	.word	0x2000162c

08012eb8 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8012eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012eba:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8012ebc:	4e09      	ldr	r6, [pc, #36]	; (8012ee4 <TimerSetTimeout+0x2c>)
 8012ebe:	6a33      	ldr	r3, [r6, #32]
 8012ec0:	4798      	blx	r3
 8012ec2:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 8012ec4:	2301      	movs	r3, #1
 8012ec6:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8012ec8:	6827      	ldr	r7, [r4, #0]
 8012eca:	69b6      	ldr	r6, [r6, #24]
 8012ecc:	47b0      	blx	r6
 8012ece:	4428      	add	r0, r5
 8012ed0:	4287      	cmp	r7, r0
 8012ed2:	d202      	bcs.n	8012eda <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8012ed4:	47b0      	blx	r6
 8012ed6:	4405      	add	r5, r0
 8012ed8:	6025      	str	r5, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8012eda:	4b02      	ldr	r3, [pc, #8]	; (8012ee4 <TimerSetTimeout+0x2c>)
 8012edc:	689b      	ldr	r3, [r3, #8]
 8012ede:	6820      	ldr	r0, [r4, #0]
 8012ee0:	4798      	blx	r3
}
 8012ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ee4:	08013f74 	.word	0x08013f74

08012ee8 <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 8012ee8:	b368      	cbz	r0, 8012f46 <UTIL_TIMER_Stop+0x5e>
{
 8012eea:	b510      	push	{r4, lr}
 8012eec:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012eee:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012ef2:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8012ef4:	4b15      	ldr	r3, [pc, #84]	; (8012f4c <UTIL_TIMER_Stop+0x64>)
 8012ef6:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 8012ef8:	2301      	movs	r3, #1
 8012efa:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 8012efc:	b1e1      	cbz	r1, 8012f38 <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 8012efe:	2300      	movs	r3, #0
 8012f00:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8012f02:	4288      	cmp	r0, r1
 8012f04:	d006      	beq.n	8012f14 <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 8012f06:	460b      	mov	r3, r1
        while( cur != NULL )
 8012f08:	b1b3      	cbz	r3, 8012f38 <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 8012f0a:	4293      	cmp	r3, r2
 8012f0c:	d011      	beq.n	8012f32 <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 8012f0e:	4619      	mov	r1, r3
            cur = cur->Next;
 8012f10:	695b      	ldr	r3, [r3, #20]
 8012f12:	e7f9      	b.n	8012f08 <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 8012f14:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 8012f16:	6948      	ldr	r0, [r1, #20]
 8012f18:	b120      	cbz	r0, 8012f24 <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 8012f1a:	4b0c      	ldr	r3, [pc, #48]	; (8012f4c <UTIL_TIMER_Stop+0x64>)
 8012f1c:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 8012f1e:	f7ff ffcb 	bl	8012eb8 <TimerSetTimeout>
 8012f22:	e009      	b.n	8012f38 <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 8012f24:	4b0a      	ldr	r3, [pc, #40]	; (8012f50 <UTIL_TIMER_Stop+0x68>)
 8012f26:	68db      	ldr	r3, [r3, #12]
 8012f28:	4798      	blx	r3
            TimerListHead = NULL;
 8012f2a:	4b08      	ldr	r3, [pc, #32]	; (8012f4c <UTIL_TIMER_Stop+0x64>)
 8012f2c:	2200      	movs	r2, #0
 8012f2e:	601a      	str	r2, [r3, #0]
 8012f30:	e002      	b.n	8012f38 <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 8012f32:	695b      	ldr	r3, [r3, #20]
 8012f34:	b123      	cbz	r3, 8012f40 <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 8012f36:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012f38:	f384 8810 	msr	PRIMASK, r4
}
 8012f3c:	2000      	movs	r0, #0
}
 8012f3e:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 8012f40:	2300      	movs	r3, #0
 8012f42:	614b      	str	r3, [r1, #20]
 8012f44:	e7f8      	b.n	8012f38 <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 8012f46:	2001      	movs	r0, #1
}
 8012f48:	4770      	bx	lr
 8012f4a:	bf00      	nop
 8012f4c:	2000162c 	.word	0x2000162c
 8012f50:	08013f74 	.word	0x08013f74

08012f54 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8012f54:	4b09      	ldr	r3, [pc, #36]	; (8012f7c <TimerInsertTimer+0x28>)
 8012f56:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8012f58:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 8012f5a:	e001      	b.n	8012f60 <TimerInsertTimer+0xc>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
    {
        cur = next;
 8012f5c:	461a      	mov	r2, r3
        next = next->Next;
 8012f5e:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 8012f60:	6951      	ldr	r1, [r2, #20]
 8012f62:	b139      	cbz	r1, 8012f74 <TimerInsertTimer+0x20>
    if( TimerObject->Timestamp  > next->Timestamp )
 8012f64:	6819      	ldr	r1, [r3, #0]
 8012f66:	f8d0 c000 	ldr.w	ip, [r0]
 8012f6a:	458c      	cmp	ip, r1
 8012f6c:	d8f6      	bhi.n	8012f5c <TimerInsertTimer+0x8>
    }
    else
    {
        cur->Next = TimerObject;
 8012f6e:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 8012f70:	6143      	str	r3, [r0, #20]
        return;
 8012f72:	4770      	bx	lr

    }
  }
  cur->Next = TimerObject;
 8012f74:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 8012f76:	2300      	movs	r3, #0
 8012f78:	6143      	str	r3, [r0, #20]
}
 8012f7a:	4770      	bx	lr
 8012f7c:	2000162c 	.word	0x2000162c

08012f80 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 8012f80:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8012f82:	4b05      	ldr	r3, [pc, #20]	; (8012f98 <TimerInsertNewHeadTimer+0x18>)
 8012f84:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 8012f86:	b10b      	cbz	r3, 8012f8c <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 8012f88:	2200      	movs	r2, #0
 8012f8a:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 8012f8c:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 8012f8e:	4b02      	ldr	r3, [pc, #8]	; (8012f98 <TimerInsertNewHeadTimer+0x18>)
 8012f90:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 8012f92:	f7ff ff91 	bl	8012eb8 <TimerSetTimeout>
}
 8012f96:	bd08      	pop	{r3, pc}
 8012f98:	2000162c 	.word	0x2000162c

08012f9c <UTIL_TIMER_Start>:
{
 8012f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 8012f9e:	2800      	cmp	r0, #0
 8012fa0:	d036      	beq.n	8013010 <UTIL_TIMER_Start+0x74>
 8012fa2:	4604      	mov	r4, r0
 8012fa4:	f7ff ff7a 	bl	8012e9c <TimerExists>
 8012fa8:	2800      	cmp	r0, #0
 8012faa:	d134      	bne.n	8013016 <UTIL_TIMER_Start+0x7a>
 8012fac:	7a65      	ldrb	r5, [r4, #9]
 8012fae:	2d00      	cmp	r5, #0
 8012fb0:	d133      	bne.n	801301a <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012fb2:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012fb6:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 8012fb8:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8012fba:	4b19      	ldr	r3, [pc, #100]	; (8013020 <UTIL_TIMER_Start+0x84>)
 8012fbc:	6a1b      	ldr	r3, [r3, #32]
 8012fbe:	4798      	blx	r3
    if( ticks < minValue )
 8012fc0:	4287      	cmp	r7, r0
 8012fc2:	d300      	bcc.n	8012fc6 <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 8012fc4:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 8012fc6:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 8012fc8:	2300      	movs	r3, #0
 8012fca:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 8012fcc:	2201      	movs	r2, #1
 8012fce:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8012fd0:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 8012fd2:	4b14      	ldr	r3, [pc, #80]	; (8013024 <UTIL_TIMER_Start+0x88>)
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	b183      	cbz	r3, 8012ffa <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8012fd8:	4b11      	ldr	r3, [pc, #68]	; (8013020 <UTIL_TIMER_Start+0x84>)
 8012fda:	699b      	ldr	r3, [r3, #24]
 8012fdc:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 8012fde:	6823      	ldr	r3, [r4, #0]
 8012fe0:	4418      	add	r0, r3
 8012fe2:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8012fe4:	4b0f      	ldr	r3, [pc, #60]	; (8013024 <UTIL_TIMER_Start+0x88>)
 8012fe6:	681b      	ldr	r3, [r3, #0]
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	4298      	cmp	r0, r3
 8012fec:	d20c      	bcs.n	8013008 <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 8012fee:	4620      	mov	r0, r4
 8012ff0:	f7ff ffc6 	bl	8012f80 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012ff4:	f386 8810 	msr	PRIMASK, r6
}
 8012ff8:	e00b      	b.n	8013012 <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 8012ffa:	4b09      	ldr	r3, [pc, #36]	; (8013020 <UTIL_TIMER_Start+0x84>)
 8012ffc:	691b      	ldr	r3, [r3, #16]
 8012ffe:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 8013000:	4620      	mov	r0, r4
 8013002:	f7ff ffbd 	bl	8012f80 <TimerInsertNewHeadTimer>
 8013006:	e7f5      	b.n	8012ff4 <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 8013008:	4620      	mov	r0, r4
 801300a:	f7ff ffa3 	bl	8012f54 <TimerInsertTimer>
 801300e:	e7f1      	b.n	8012ff4 <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 8013010:	2501      	movs	r5, #1
}
 8013012:	4628      	mov	r0, r5
 8013014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 8013016:	2501      	movs	r5, #1
 8013018:	e7fb      	b.n	8013012 <UTIL_TIMER_Start+0x76>
 801301a:	2501      	movs	r5, #1
 801301c:	e7f9      	b.n	8013012 <UTIL_TIMER_Start+0x76>
 801301e:	bf00      	nop
 8013020:	08013f74 	.word	0x08013f74
 8013024:	2000162c 	.word	0x2000162c

08013028 <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 8013028:	b198      	cbz	r0, 8013052 <UTIL_TIMER_SetPeriod+0x2a>
{
 801302a:	b510      	push	{r4, lr}
 801302c:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801302e:	4b0a      	ldr	r3, [pc, #40]	; (8013058 <UTIL_TIMER_SetPeriod+0x30>)
 8013030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013032:	4608      	mov	r0, r1
 8013034:	4798      	blx	r3
 8013036:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 8013038:	4620      	mov	r0, r4
 801303a:	f7ff ff2f 	bl	8012e9c <TimerExists>
 801303e:	b908      	cbnz	r0, 8013044 <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8013040:	2000      	movs	r0, #0
}
 8013042:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 8013044:	4620      	mov	r0, r4
 8013046:	f7ff ff4f 	bl	8012ee8 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801304a:	4620      	mov	r0, r4
 801304c:	f7ff ffa6 	bl	8012f9c <UTIL_TIMER_Start>
 8013050:	e7f7      	b.n	8013042 <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 8013052:	2001      	movs	r0, #1
}
 8013054:	4770      	bx	lr
 8013056:	bf00      	nop
 8013058:	08013f74 	.word	0x08013f74

0801305c <UTIL_TIMER_IRQ_Handler>:
{
 801305c:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801305e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013062:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 8013064:	4c1e      	ldr	r4, [pc, #120]	; (80130e0 <UTIL_TIMER_IRQ_Handler+0x84>)
 8013066:	6963      	ldr	r3, [r4, #20]
 8013068:	4798      	blx	r3
 801306a:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801306c:	6923      	ldr	r3, [r4, #16]
 801306e:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 8013070:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 8013072:	4b1c      	ldr	r3, [pc, #112]	; (80130e4 <UTIL_TIMER_IRQ_Handler+0x88>)
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	b923      	cbnz	r3, 8013082 <UTIL_TIMER_IRQ_Handler+0x26>
 8013078:	e018      	b.n	80130ac <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 801307a:	2200      	movs	r2, #0
 801307c:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 801307e:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 8013080:	b1a3      	cbz	r3, 80130ac <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 8013082:	681a      	ldr	r2, [r3, #0]
 8013084:	42a2      	cmp	r2, r4
 8013086:	d9f8      	bls.n	801307a <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 8013088:	1a31      	subs	r1, r6, r0
 801308a:	440a      	add	r2, r1
 801308c:	601a      	str	r2, [r3, #0]
 801308e:	e7f6      	b.n	801307e <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 8013090:	4b14      	ldr	r3, [pc, #80]	; (80130e4 <UTIL_TIMER_IRQ_Handler+0x88>)
 8013092:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 8013094:	6962      	ldr	r2, [r4, #20]
 8013096:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 8013098:	2300      	movs	r3, #0
 801309a:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 801309c:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 801309e:	68e3      	ldr	r3, [r4, #12]
 80130a0:	6920      	ldr	r0, [r4, #16]
 80130a2:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 80130a4:	8963      	ldrh	r3, [r4, #10]
 80130a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80130aa:	d012      	beq.n	80130d2 <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 80130ac:	4b0d      	ldr	r3, [pc, #52]	; (80130e4 <UTIL_TIMER_IRQ_Handler+0x88>)
 80130ae:	681b      	ldr	r3, [r3, #0]
 80130b0:	b13b      	cbz	r3, 80130c2 <UTIL_TIMER_IRQ_Handler+0x66>
 80130b2:	681c      	ldr	r4, [r3, #0]
 80130b4:	2c00      	cmp	r4, #0
 80130b6:	d0eb      	beq.n	8013090 <UTIL_TIMER_IRQ_Handler+0x34>
 80130b8:	4b09      	ldr	r3, [pc, #36]	; (80130e0 <UTIL_TIMER_IRQ_Handler+0x84>)
 80130ba:	699b      	ldr	r3, [r3, #24]
 80130bc:	4798      	blx	r3
 80130be:	4284      	cmp	r4, r0
 80130c0:	d3e6      	bcc.n	8013090 <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 80130c2:	4b08      	ldr	r3, [pc, #32]	; (80130e4 <UTIL_TIMER_IRQ_Handler+0x88>)
 80130c4:	6818      	ldr	r0, [r3, #0]
 80130c6:	b108      	cbz	r0, 80130cc <UTIL_TIMER_IRQ_Handler+0x70>
 80130c8:	7a03      	ldrb	r3, [r0, #8]
 80130ca:	b133      	cbz	r3, 80130da <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80130cc:	f385 8810 	msr	PRIMASK, r5
}
 80130d0:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 80130d2:	4620      	mov	r0, r4
 80130d4:	f7ff ff62 	bl	8012f9c <UTIL_TIMER_Start>
 80130d8:	e7e8      	b.n	80130ac <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 80130da:	f7ff feed 	bl	8012eb8 <TimerSetTimeout>
 80130de:	e7f5      	b.n	80130cc <UTIL_TIMER_IRQ_Handler+0x70>
 80130e0:	08013f74 	.word	0x08013f74
 80130e4:	2000162c 	.word	0x2000162c

080130e8 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 80130e8:	4601      	mov	r1, r0
  int i = 0;
 80130ea:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 80130ec:	e007      	b.n	80130fe <ee_skip_atoi+0x16>
 80130ee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80130f2:	1c53      	adds	r3, r2, #1
 80130f4:	600b      	str	r3, [r1, #0]
 80130f6:	7813      	ldrb	r3, [r2, #0]
 80130f8:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80130fc:	3830      	subs	r0, #48	; 0x30
 80130fe:	680a      	ldr	r2, [r1, #0]
 8013100:	7813      	ldrb	r3, [r2, #0]
 8013102:	3b30      	subs	r3, #48	; 0x30
 8013104:	b2db      	uxtb	r3, r3
 8013106:	2b09      	cmp	r3, #9
 8013108:	d9f1      	bls.n	80130ee <ee_skip_atoi+0x6>
  return i;
}
 801310a:	4770      	bx	lr

0801310c <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801310c:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 8013110:	b093      	sub	sp, #76	; 0x4c
 8013112:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8013114:	9e1c      	ldr	r6, [sp, #112]	; 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 8013116:	f016 0f40 	tst.w	r6, #64	; 0x40
 801311a:	d110      	bne.n	801313e <ee_number+0x32>
  char *dig = lower_digits;
 801311c:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 8013218 <ee_number+0x10c>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 8013120:	1e9f      	subs	r7, r3, #2
 8013122:	2f22      	cmp	r7, #34	; 0x22
 8013124:	d875      	bhi.n	8013212 <ee_number+0x106>

  c = (type & ZEROPAD) ? '0' : ' ';
 8013126:	f016 0401 	ands.w	r4, r6, #1
 801312a:	d00b      	beq.n	8013144 <ee_number+0x38>
 801312c:	f04f 0e30 	mov.w	lr, #48	; 0x30
  sign = 0;
  if (type & SIGN)
 8013130:	f016 0f02 	tst.w	r6, #2
 8013134:	d00f      	beq.n	8013156 <ee_number+0x4a>
  {
    if (num < 0)
 8013136:	2a00      	cmp	r2, #0
 8013138:	db07      	blt.n	801314a <ee_number+0x3e>
  sign = 0;
 801313a:	2700      	movs	r7, #0
 801313c:	e00c      	b.n	8013158 <ee_number+0x4c>
  if (type & UPPERCASE)  dig = upper_digits;
 801313e:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 801321c <ee_number+0x110>
 8013142:	e7ed      	b.n	8013120 <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 8013144:	f04f 0e20 	mov.w	lr, #32
 8013148:	e7f2      	b.n	8013130 <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 801314a:	4252      	negs	r2, r2
      size--;
 801314c:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801314e:	3e01      	subs	r6, #1
 8013150:	961a      	str	r6, [sp, #104]	; 0x68
      sign = '-';
 8013152:	272d      	movs	r7, #45	; 0x2d
 8013154:	e000      	b.n	8013158 <ee_number+0x4c>
  sign = 0;
 8013156:	2700      	movs	r7, #0
  }
#endif

  i = 0;

  if (num == 0)
 8013158:	bb5a      	cbnz	r2, 80131b2 <ee_number+0xa6>
    tmp[i++] = '0';
 801315a:	2330      	movs	r3, #48	; 0x30
 801315c:	f88d 3004 	strb.w	r3, [sp, #4]
 8013160:	f04f 0c01 	mov.w	ip, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 8013164:	45ac      	cmp	ip, r5
 8013166:	dd00      	ble.n	801316a <ee_number+0x5e>
 8013168:	4665      	mov	r5, ip
  size -= precision;
 801316a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801316c:	1b5b      	subs	r3, r3, r5
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801316e:	b31c      	cbz	r4, 80131b8 <ee_number+0xac>
  if (sign) ASSIGN_STR(sign);
 8013170:	b11f      	cbz	r7, 801317a <ee_number+0x6e>
 8013172:	f800 7b01 	strb.w	r7, [r0], #1
 8013176:	3901      	subs	r1, #1
 8013178:	d007      	beq.n	801318a <ee_number+0x7e>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801317a:	2b00      	cmp	r3, #0
 801317c:	f103 33ff 	add.w	r3, r3, #4294967295
 8013180:	dd24      	ble.n	80131cc <ee_number+0xc0>
 8013182:	f800 eb01 	strb.w	lr, [r0], #1
 8013186:	3901      	subs	r1, #1
 8013188:	d1f7      	bne.n	801317a <ee_number+0x6e>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 801318a:	b013      	add	sp, #76	; 0x4c
 801318c:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8013190:	fbb2 f6f3 	udiv	r6, r2, r3
 8013194:	fb03 2216 	mls	r2, r3, r6, r2
 8013198:	f81a 8002 	ldrb.w	r8, [sl, r2]
 801319c:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 80131a0:	446a      	add	r2, sp
 80131a2:	f802 8c44 	strb.w	r8, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 80131a6:	4632      	mov	r2, r6
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 80131a8:	f10c 0c01 	add.w	ip, ip, #1
    while (num != 0)
 80131ac:	2a00      	cmp	r2, #0
 80131ae:	d1ef      	bne.n	8013190 <ee_number+0x84>
 80131b0:	e7d8      	b.n	8013164 <ee_number+0x58>
  i = 0;
 80131b2:	f04f 0c00 	mov.w	ip, #0
 80131b6:	e7f9      	b.n	80131ac <ee_number+0xa0>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80131be:	ddd7      	ble.n	8013170 <ee_number+0x64>
 80131c0:	2220      	movs	r2, #32
 80131c2:	f800 2b01 	strb.w	r2, [r0], #1
 80131c6:	3901      	subs	r1, #1
 80131c8:	d1f6      	bne.n	80131b8 <ee_number+0xac>
 80131ca:	e7de      	b.n	801318a <ee_number+0x7e>
  while (i < precision--) ASSIGN_STR('0');
 80131cc:	4565      	cmp	r5, ip
 80131ce:	f105 35ff 	add.w	r5, r5, #4294967295
 80131d2:	dd05      	ble.n	80131e0 <ee_number+0xd4>
 80131d4:	2230      	movs	r2, #48	; 0x30
 80131d6:	f800 2b01 	strb.w	r2, [r0], #1
 80131da:	3901      	subs	r1, #1
 80131dc:	d1f6      	bne.n	80131cc <ee_number+0xc0>
 80131de:	e7d4      	b.n	801318a <ee_number+0x7e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 80131e0:	4662      	mov	r2, ip
 80131e2:	2a00      	cmp	r2, #0
 80131e4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80131e8:	dd09      	ble.n	80131fe <ee_number+0xf2>
 80131ea:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 80131ee:	446a      	add	r2, sp
 80131f0:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 80131f4:	f800 2b01 	strb.w	r2, [r0], #1
 80131f8:	3901      	subs	r1, #1
 80131fa:	d1f1      	bne.n	80131e0 <ee_number+0xd4>
 80131fc:	e7c5      	b.n	801318a <ee_number+0x7e>
  while (size-- > 0) ASSIGN_STR(' ');
 80131fe:	2b00      	cmp	r3, #0
 8013200:	f103 33ff 	add.w	r3, r3, #4294967295
 8013204:	ddc1      	ble.n	801318a <ee_number+0x7e>
 8013206:	2220      	movs	r2, #32
 8013208:	f800 2b01 	strb.w	r2, [r0], #1
 801320c:	3901      	subs	r1, #1
 801320e:	d1f6      	bne.n	80131fe <ee_number+0xf2>
 8013210:	e7bb      	b.n	801318a <ee_number+0x7e>
  if (base < 2 || base > 36) return 0;
 8013212:	2000      	movs	r0, #0
 8013214:	e7b9      	b.n	801318a <ee_number+0x7e>
 8013216:	bf00      	nop
 8013218:	08014e28 	.word	0x08014e28
 801321c:	08014e00 	.word	0x08014e00

08013220 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8013220:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013224:	b087      	sub	sp, #28
 8013226:	9205      	str	r2, [sp, #20]
 8013228:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801322a:	1e0f      	subs	r7, r1, #0
 801322c:	f340 80b8 	ble.w	80133a0 <tiny_vsnprintf_like+0x180>
 8013230:	4606      	mov	r6, r0
  {
    return 0;
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8013232:	4604      	mov	r4, r0
 8013234:	e004      	b.n	8013240 <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);

    if (*fmt != '%')
    {
      *str++ = *fmt;
 8013236:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801323a:	9b05      	ldr	r3, [sp, #20]
 801323c:	3301      	adds	r3, #1
 801323e:	9305      	str	r3, [sp, #20]
 8013240:	9905      	ldr	r1, [sp, #20]
 8013242:	780a      	ldrb	r2, [r1, #0]
 8013244:	b922      	cbnz	r2, 8013250 <tiny_vsnprintf_like+0x30>
 8013246:	1ba3      	subs	r3, r4, r6
 8013248:	1e78      	subs	r0, r7, #1
 801324a:	4283      	cmp	r3, r0
 801324c:	f2c0 80a2 	blt.w	8013394 <tiny_vsnprintf_like+0x174>
    CHECK_STR_SIZE(buf, str, size);
 8013250:	1ba3      	subs	r3, r4, r6
 8013252:	f107 38ff 	add.w	r8, r7, #4294967295
 8013256:	4543      	cmp	r3, r8
 8013258:	f280 809c 	bge.w	8013394 <tiny_vsnprintf_like+0x174>
    if (*fmt != '%')
 801325c:	2a25      	cmp	r2, #37	; 0x25
 801325e:	d1ea      	bne.n	8013236 <tiny_vsnprintf_like+0x16>

    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 8013260:	1c4b      	adds	r3, r1, #1
 8013262:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 8013264:	784b      	ldrb	r3, [r1, #1]
 8013266:	2b30      	cmp	r3, #48	; 0x30
 8013268:	d020      	beq.n	80132ac <tiny_vsnprintf_like+0x8c>
    flags = 0;
 801326a:	f04f 0900 	mov.w	r9, #0
    }
#endif

    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 801326e:	3b30      	subs	r3, #48	; 0x30
 8013270:	b2db      	uxtb	r3, r3
 8013272:	2b09      	cmp	r3, #9
 8013274:	d91d      	bls.n	80132b2 <tiny_vsnprintf_like+0x92>
    field_width = -1;
 8013276:	f04f 35ff 	mov.w	r5, #4294967295
#endif

    // Default base
    base = 10;

    switch (*fmt)
 801327a:	9b05      	ldr	r3, [sp, #20]
 801327c:	781a      	ldrb	r2, [r3, #0]
 801327e:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 8013282:	2b20      	cmp	r3, #32
 8013284:	d867      	bhi.n	8013356 <tiny_vsnprintf_like+0x136>
 8013286:	e8df f003 	tbb	[pc, r3]
 801328a:	664a      	.short	0x664a
 801328c:	66666666 	.word	0x66666666
 8013290:	66666666 	.word	0x66666666
 8013294:	66621e66 	.word	0x66621e66
 8013298:	62666666 	.word	0x62666666
 801329c:	66666666 	.word	0x66666666
 80132a0:	66666666 	.word	0x66666666
 80132a4:	19662866 	.word	0x19662866
 80132a8:	6666      	.short	0x6666
 80132aa:	7c          	.byte	0x7c
 80132ab:	00          	.byte	0x00
      flags |= ZEROPAD;
 80132ac:	f04f 0901 	mov.w	r9, #1
 80132b0:	e7dd      	b.n	801326e <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 80132b2:	a805      	add	r0, sp, #20
 80132b4:	f7ff ff18 	bl	80130e8 <ee_skip_atoi>
 80132b8:	4605      	mov	r5, r0
 80132ba:	e7de      	b.n	801327a <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 80132bc:	230a      	movs	r3, #10
 80132be:	e031      	b.n	8013324 <tiny_vsnprintf_like+0x104>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 80132c0:	2320      	movs	r3, #32
 80132c2:	f804 3b01 	strb.w	r3, [r4], #1
 80132c6:	3d01      	subs	r5, #1
 80132c8:	2d00      	cmp	r5, #0
 80132ca:	dcf9      	bgt.n	80132c0 <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 80132cc:	9b04      	ldr	r3, [sp, #16]
 80132ce:	1d1a      	adds	r2, r3, #4
 80132d0:	9204      	str	r2, [sp, #16]
 80132d2:	781b      	ldrb	r3, [r3, #0]
 80132d4:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 80132d8:	e7af      	b.n	801323a <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 80132da:	9b04      	ldr	r3, [sp, #16]
 80132dc:	1d1a      	adds	r2, r3, #4
 80132de:	9204      	str	r2, [sp, #16]
 80132e0:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 80132e4:	f1b8 0f00 	cmp.w	r8, #0
 80132e8:	d003      	beq.n	80132f2 <tiny_vsnprintf_like+0xd2>
#ifdef TINY_PRINTF
        len = strlen(s);
 80132ea:	4640      	mov	r0, r8
 80132ec:	f7ec ff48 	bl	8000180 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 80132f0:	e006      	b.n	8013300 <tiny_vsnprintf_like+0xe0>
        if (!s) s = "<NULL>";
 80132f2:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80133a4 <tiny_vsnprintf_like+0x184>
 80132f6:	e7f8      	b.n	80132ea <tiny_vsnprintf_like+0xca>
          while (len < field_width--) *str++ = ' ';
 80132f8:	2220      	movs	r2, #32
 80132fa:	f804 2b01 	strb.w	r2, [r4], #1
 80132fe:	461d      	mov	r5, r3
 8013300:	1e6b      	subs	r3, r5, #1
 8013302:	4285      	cmp	r5, r0
 8013304:	dcf8      	bgt.n	80132f8 <tiny_vsnprintf_like+0xd8>
        for (i = 0; i < len; ++i) *str++ = *s++;
 8013306:	2200      	movs	r2, #0
 8013308:	e006      	b.n	8013318 <tiny_vsnprintf_like+0xf8>
 801330a:	4643      	mov	r3, r8
 801330c:	f813 1b01 	ldrb.w	r1, [r3], #1
 8013310:	f804 1b01 	strb.w	r1, [r4], #1
 8013314:	3201      	adds	r2, #1
 8013316:	4698      	mov	r8, r3
 8013318:	4282      	cmp	r2, r0
 801331a:	dbf6      	blt.n	801330a <tiny_vsnprintf_like+0xea>
 801331c:	e78d      	b.n	801323a <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801331e:	f049 0940 	orr.w	r9, r9, #64	; 0x40

      case 'x':
        base = 16;
 8013322:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 8013324:	f019 0f02 	tst.w	r9, #2
 8013328:	d02f      	beq.n	801338a <tiny_vsnprintf_like+0x16a>
      num = va_arg(args, int);
 801332a:	9a04      	ldr	r2, [sp, #16]
 801332c:	1d11      	adds	r1, r2, #4
 801332e:	9104      	str	r1, [sp, #16]
 8013330:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8013332:	1ba1      	subs	r1, r4, r6
 8013334:	f8cd 9008 	str.w	r9, [sp, #8]
 8013338:	f04f 30ff 	mov.w	r0, #4294967295
 801333c:	9001      	str	r0, [sp, #4]
 801333e:	9500      	str	r5, [sp, #0]
 8013340:	eba8 0101 	sub.w	r1, r8, r1
 8013344:	4620      	mov	r0, r4
 8013346:	f7ff fee1 	bl	801310c <ee_number>
 801334a:	4604      	mov	r4, r0
 801334c:	e775      	b.n	801323a <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 801334e:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 8013352:	230a      	movs	r3, #10
 8013354:	e7e6      	b.n	8013324 <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 8013356:	2a25      	cmp	r2, #37	; 0x25
 8013358:	d002      	beq.n	8013360 <tiny_vsnprintf_like+0x140>
 801335a:	2325      	movs	r3, #37	; 0x25
 801335c:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8013360:	1ba3      	subs	r3, r4, r6
 8013362:	4598      	cmp	r8, r3
 8013364:	dd0f      	ble.n	8013386 <tiny_vsnprintf_like+0x166>
        if (*fmt)
 8013366:	9b05      	ldr	r3, [sp, #20]
 8013368:	781a      	ldrb	r2, [r3, #0]
 801336a:	b13a      	cbz	r2, 801337c <tiny_vsnprintf_like+0x15c>
          *str++ = *fmt;
 801336c:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8013370:	1ba3      	subs	r3, r4, r6
 8013372:	4598      	cmp	r8, r3
 8013374:	f73f af61 	bgt.w	801323a <tiny_vsnprintf_like+0x1a>
    base = 10;
 8013378:	230a      	movs	r3, #10
    if (qualifier == 'l')
 801337a:	e7d3      	b.n	8013324 <tiny_vsnprintf_like+0x104>
          --fmt;
 801337c:	3b01      	subs	r3, #1
 801337e:	9305      	str	r3, [sp, #20]
 8013380:	e7f6      	b.n	8013370 <tiny_vsnprintf_like+0x150>
        base = 16;
 8013382:	2310      	movs	r3, #16
 8013384:	e7ce      	b.n	8013324 <tiny_vsnprintf_like+0x104>
    base = 10;
 8013386:	230a      	movs	r3, #10
 8013388:	e7cc      	b.n	8013324 <tiny_vsnprintf_like+0x104>
      num = va_arg(args, unsigned int);
 801338a:	9a04      	ldr	r2, [sp, #16]
 801338c:	1d11      	adds	r1, r2, #4
 801338e:	9104      	str	r1, [sp, #16]
 8013390:	6812      	ldr	r2, [r2, #0]
 8013392:	e7ce      	b.n	8013332 <tiny_vsnprintf_like+0x112>
  }

  *str = '\0';
 8013394:	2300      	movs	r3, #0
 8013396:	7023      	strb	r3, [r4, #0]
  return str - buf;
 8013398:	1ba0      	subs	r0, r4, r6
}
 801339a:	b007      	add	sp, #28
 801339c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 80133a0:	2000      	movs	r0, #0
 80133a2:	e7fa      	b.n	801339a <tiny_vsnprintf_like+0x17a>
 80133a4:	08014e50 	.word	0x08014e50

080133a8 <__errno>:
 80133a8:	4b01      	ldr	r3, [pc, #4]	; (80133b0 <__errno+0x8>)
 80133aa:	6818      	ldr	r0, [r3, #0]
 80133ac:	4770      	bx	lr
 80133ae:	bf00      	nop
 80133b0:	20000124 	.word	0x20000124

080133b4 <__libc_init_array>:
 80133b4:	b570      	push	{r4, r5, r6, lr}
 80133b6:	4d0d      	ldr	r5, [pc, #52]	; (80133ec <__libc_init_array+0x38>)
 80133b8:	4c0d      	ldr	r4, [pc, #52]	; (80133f0 <__libc_init_array+0x3c>)
 80133ba:	1b64      	subs	r4, r4, r5
 80133bc:	10a4      	asrs	r4, r4, #2
 80133be:	2600      	movs	r6, #0
 80133c0:	42a6      	cmp	r6, r4
 80133c2:	d109      	bne.n	80133d8 <__libc_init_array+0x24>
 80133c4:	4d0b      	ldr	r5, [pc, #44]	; (80133f4 <__libc_init_array+0x40>)
 80133c6:	4c0c      	ldr	r4, [pc, #48]	; (80133f8 <__libc_init_array+0x44>)
 80133c8:	f000 fd1e 	bl	8013e08 <_init>
 80133cc:	1b64      	subs	r4, r4, r5
 80133ce:	10a4      	asrs	r4, r4, #2
 80133d0:	2600      	movs	r6, #0
 80133d2:	42a6      	cmp	r6, r4
 80133d4:	d105      	bne.n	80133e2 <__libc_init_array+0x2e>
 80133d6:	bd70      	pop	{r4, r5, r6, pc}
 80133d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80133dc:	4798      	blx	r3
 80133de:	3601      	adds	r6, #1
 80133e0:	e7ee      	b.n	80133c0 <__libc_init_array+0xc>
 80133e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80133e6:	4798      	blx	r3
 80133e8:	3601      	adds	r6, #1
 80133ea:	e7f2      	b.n	80133d2 <__libc_init_array+0x1e>
 80133ec:	08014e98 	.word	0x08014e98
 80133f0:	08014e98 	.word	0x08014e98
 80133f4:	08014e98 	.word	0x08014e98
 80133f8:	08014e9c 	.word	0x08014e9c

080133fc <malloc>:
 80133fc:	4b02      	ldr	r3, [pc, #8]	; (8013408 <malloc+0xc>)
 80133fe:	4601      	mov	r1, r0
 8013400:	6818      	ldr	r0, [r3, #0]
 8013402:	f000 b88b 	b.w	801351c <_malloc_r>
 8013406:	bf00      	nop
 8013408:	20000124 	.word	0x20000124

0801340c <free>:
 801340c:	4b02      	ldr	r3, [pc, #8]	; (8013418 <free+0xc>)
 801340e:	4601      	mov	r1, r0
 8013410:	6818      	ldr	r0, [r3, #0]
 8013412:	f000 b819 	b.w	8013448 <_free_r>
 8013416:	bf00      	nop
 8013418:	20000124 	.word	0x20000124

0801341c <memcpy>:
 801341c:	440a      	add	r2, r1
 801341e:	4291      	cmp	r1, r2
 8013420:	f100 33ff 	add.w	r3, r0, #4294967295
 8013424:	d100      	bne.n	8013428 <memcpy+0xc>
 8013426:	4770      	bx	lr
 8013428:	b510      	push	{r4, lr}
 801342a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801342e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013432:	4291      	cmp	r1, r2
 8013434:	d1f9      	bne.n	801342a <memcpy+0xe>
 8013436:	bd10      	pop	{r4, pc}

08013438 <memset>:
 8013438:	4402      	add	r2, r0
 801343a:	4603      	mov	r3, r0
 801343c:	4293      	cmp	r3, r2
 801343e:	d100      	bne.n	8013442 <memset+0xa>
 8013440:	4770      	bx	lr
 8013442:	f803 1b01 	strb.w	r1, [r3], #1
 8013446:	e7f9      	b.n	801343c <memset+0x4>

08013448 <_free_r>:
 8013448:	b538      	push	{r3, r4, r5, lr}
 801344a:	4605      	mov	r5, r0
 801344c:	2900      	cmp	r1, #0
 801344e:	d041      	beq.n	80134d4 <_free_r+0x8c>
 8013450:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013454:	1f0c      	subs	r4, r1, #4
 8013456:	2b00      	cmp	r3, #0
 8013458:	bfb8      	it	lt
 801345a:	18e4      	addlt	r4, r4, r3
 801345c:	f000 f902 	bl	8013664 <__malloc_lock>
 8013460:	4a1d      	ldr	r2, [pc, #116]	; (80134d8 <_free_r+0x90>)
 8013462:	6813      	ldr	r3, [r2, #0]
 8013464:	b933      	cbnz	r3, 8013474 <_free_r+0x2c>
 8013466:	6063      	str	r3, [r4, #4]
 8013468:	6014      	str	r4, [r2, #0]
 801346a:	4628      	mov	r0, r5
 801346c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013470:	f000 b8fe 	b.w	8013670 <__malloc_unlock>
 8013474:	42a3      	cmp	r3, r4
 8013476:	d908      	bls.n	801348a <_free_r+0x42>
 8013478:	6820      	ldr	r0, [r4, #0]
 801347a:	1821      	adds	r1, r4, r0
 801347c:	428b      	cmp	r3, r1
 801347e:	bf01      	itttt	eq
 8013480:	6819      	ldreq	r1, [r3, #0]
 8013482:	685b      	ldreq	r3, [r3, #4]
 8013484:	1809      	addeq	r1, r1, r0
 8013486:	6021      	streq	r1, [r4, #0]
 8013488:	e7ed      	b.n	8013466 <_free_r+0x1e>
 801348a:	461a      	mov	r2, r3
 801348c:	685b      	ldr	r3, [r3, #4]
 801348e:	b10b      	cbz	r3, 8013494 <_free_r+0x4c>
 8013490:	42a3      	cmp	r3, r4
 8013492:	d9fa      	bls.n	801348a <_free_r+0x42>
 8013494:	6811      	ldr	r1, [r2, #0]
 8013496:	1850      	adds	r0, r2, r1
 8013498:	42a0      	cmp	r0, r4
 801349a:	d10b      	bne.n	80134b4 <_free_r+0x6c>
 801349c:	6820      	ldr	r0, [r4, #0]
 801349e:	4401      	add	r1, r0
 80134a0:	1850      	adds	r0, r2, r1
 80134a2:	4283      	cmp	r3, r0
 80134a4:	6011      	str	r1, [r2, #0]
 80134a6:	d1e0      	bne.n	801346a <_free_r+0x22>
 80134a8:	6818      	ldr	r0, [r3, #0]
 80134aa:	685b      	ldr	r3, [r3, #4]
 80134ac:	6053      	str	r3, [r2, #4]
 80134ae:	4401      	add	r1, r0
 80134b0:	6011      	str	r1, [r2, #0]
 80134b2:	e7da      	b.n	801346a <_free_r+0x22>
 80134b4:	d902      	bls.n	80134bc <_free_r+0x74>
 80134b6:	230c      	movs	r3, #12
 80134b8:	602b      	str	r3, [r5, #0]
 80134ba:	e7d6      	b.n	801346a <_free_r+0x22>
 80134bc:	6820      	ldr	r0, [r4, #0]
 80134be:	1821      	adds	r1, r4, r0
 80134c0:	428b      	cmp	r3, r1
 80134c2:	bf04      	itt	eq
 80134c4:	6819      	ldreq	r1, [r3, #0]
 80134c6:	685b      	ldreq	r3, [r3, #4]
 80134c8:	6063      	str	r3, [r4, #4]
 80134ca:	bf04      	itt	eq
 80134cc:	1809      	addeq	r1, r1, r0
 80134ce:	6021      	streq	r1, [r4, #0]
 80134d0:	6054      	str	r4, [r2, #4]
 80134d2:	e7ca      	b.n	801346a <_free_r+0x22>
 80134d4:	bd38      	pop	{r3, r4, r5, pc}
 80134d6:	bf00      	nop
 80134d8:	20001630 	.word	0x20001630

080134dc <sbrk_aligned>:
 80134dc:	b570      	push	{r4, r5, r6, lr}
 80134de:	4e0e      	ldr	r6, [pc, #56]	; (8013518 <sbrk_aligned+0x3c>)
 80134e0:	460c      	mov	r4, r1
 80134e2:	6831      	ldr	r1, [r6, #0]
 80134e4:	4605      	mov	r5, r0
 80134e6:	b911      	cbnz	r1, 80134ee <sbrk_aligned+0x12>
 80134e8:	f000 f88c 	bl	8013604 <_sbrk_r>
 80134ec:	6030      	str	r0, [r6, #0]
 80134ee:	4621      	mov	r1, r4
 80134f0:	4628      	mov	r0, r5
 80134f2:	f000 f887 	bl	8013604 <_sbrk_r>
 80134f6:	1c43      	adds	r3, r0, #1
 80134f8:	d00a      	beq.n	8013510 <sbrk_aligned+0x34>
 80134fa:	1cc4      	adds	r4, r0, #3
 80134fc:	f024 0403 	bic.w	r4, r4, #3
 8013500:	42a0      	cmp	r0, r4
 8013502:	d007      	beq.n	8013514 <sbrk_aligned+0x38>
 8013504:	1a21      	subs	r1, r4, r0
 8013506:	4628      	mov	r0, r5
 8013508:	f000 f87c 	bl	8013604 <_sbrk_r>
 801350c:	3001      	adds	r0, #1
 801350e:	d101      	bne.n	8013514 <sbrk_aligned+0x38>
 8013510:	f04f 34ff 	mov.w	r4, #4294967295
 8013514:	4620      	mov	r0, r4
 8013516:	bd70      	pop	{r4, r5, r6, pc}
 8013518:	20001634 	.word	0x20001634

0801351c <_malloc_r>:
 801351c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013520:	1ccd      	adds	r5, r1, #3
 8013522:	f025 0503 	bic.w	r5, r5, #3
 8013526:	3508      	adds	r5, #8
 8013528:	2d0c      	cmp	r5, #12
 801352a:	bf38      	it	cc
 801352c:	250c      	movcc	r5, #12
 801352e:	2d00      	cmp	r5, #0
 8013530:	4607      	mov	r7, r0
 8013532:	db01      	blt.n	8013538 <_malloc_r+0x1c>
 8013534:	42a9      	cmp	r1, r5
 8013536:	d905      	bls.n	8013544 <_malloc_r+0x28>
 8013538:	230c      	movs	r3, #12
 801353a:	603b      	str	r3, [r7, #0]
 801353c:	2600      	movs	r6, #0
 801353e:	4630      	mov	r0, r6
 8013540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013544:	4e2e      	ldr	r6, [pc, #184]	; (8013600 <_malloc_r+0xe4>)
 8013546:	f000 f88d 	bl	8013664 <__malloc_lock>
 801354a:	6833      	ldr	r3, [r6, #0]
 801354c:	461c      	mov	r4, r3
 801354e:	bb34      	cbnz	r4, 801359e <_malloc_r+0x82>
 8013550:	4629      	mov	r1, r5
 8013552:	4638      	mov	r0, r7
 8013554:	f7ff ffc2 	bl	80134dc <sbrk_aligned>
 8013558:	1c43      	adds	r3, r0, #1
 801355a:	4604      	mov	r4, r0
 801355c:	d14d      	bne.n	80135fa <_malloc_r+0xde>
 801355e:	6834      	ldr	r4, [r6, #0]
 8013560:	4626      	mov	r6, r4
 8013562:	2e00      	cmp	r6, #0
 8013564:	d140      	bne.n	80135e8 <_malloc_r+0xcc>
 8013566:	6823      	ldr	r3, [r4, #0]
 8013568:	4631      	mov	r1, r6
 801356a:	4638      	mov	r0, r7
 801356c:	eb04 0803 	add.w	r8, r4, r3
 8013570:	f000 f848 	bl	8013604 <_sbrk_r>
 8013574:	4580      	cmp	r8, r0
 8013576:	d13a      	bne.n	80135ee <_malloc_r+0xd2>
 8013578:	6821      	ldr	r1, [r4, #0]
 801357a:	3503      	adds	r5, #3
 801357c:	1a6d      	subs	r5, r5, r1
 801357e:	f025 0503 	bic.w	r5, r5, #3
 8013582:	3508      	adds	r5, #8
 8013584:	2d0c      	cmp	r5, #12
 8013586:	bf38      	it	cc
 8013588:	250c      	movcc	r5, #12
 801358a:	4629      	mov	r1, r5
 801358c:	4638      	mov	r0, r7
 801358e:	f7ff ffa5 	bl	80134dc <sbrk_aligned>
 8013592:	3001      	adds	r0, #1
 8013594:	d02b      	beq.n	80135ee <_malloc_r+0xd2>
 8013596:	6823      	ldr	r3, [r4, #0]
 8013598:	442b      	add	r3, r5
 801359a:	6023      	str	r3, [r4, #0]
 801359c:	e00e      	b.n	80135bc <_malloc_r+0xa0>
 801359e:	6822      	ldr	r2, [r4, #0]
 80135a0:	1b52      	subs	r2, r2, r5
 80135a2:	d41e      	bmi.n	80135e2 <_malloc_r+0xc6>
 80135a4:	2a0b      	cmp	r2, #11
 80135a6:	d916      	bls.n	80135d6 <_malloc_r+0xba>
 80135a8:	1961      	adds	r1, r4, r5
 80135aa:	42a3      	cmp	r3, r4
 80135ac:	6025      	str	r5, [r4, #0]
 80135ae:	bf18      	it	ne
 80135b0:	6059      	strne	r1, [r3, #4]
 80135b2:	6863      	ldr	r3, [r4, #4]
 80135b4:	bf08      	it	eq
 80135b6:	6031      	streq	r1, [r6, #0]
 80135b8:	5162      	str	r2, [r4, r5]
 80135ba:	604b      	str	r3, [r1, #4]
 80135bc:	4638      	mov	r0, r7
 80135be:	f104 060b 	add.w	r6, r4, #11
 80135c2:	f000 f855 	bl	8013670 <__malloc_unlock>
 80135c6:	f026 0607 	bic.w	r6, r6, #7
 80135ca:	1d23      	adds	r3, r4, #4
 80135cc:	1af2      	subs	r2, r6, r3
 80135ce:	d0b6      	beq.n	801353e <_malloc_r+0x22>
 80135d0:	1b9b      	subs	r3, r3, r6
 80135d2:	50a3      	str	r3, [r4, r2]
 80135d4:	e7b3      	b.n	801353e <_malloc_r+0x22>
 80135d6:	6862      	ldr	r2, [r4, #4]
 80135d8:	42a3      	cmp	r3, r4
 80135da:	bf0c      	ite	eq
 80135dc:	6032      	streq	r2, [r6, #0]
 80135de:	605a      	strne	r2, [r3, #4]
 80135e0:	e7ec      	b.n	80135bc <_malloc_r+0xa0>
 80135e2:	4623      	mov	r3, r4
 80135e4:	6864      	ldr	r4, [r4, #4]
 80135e6:	e7b2      	b.n	801354e <_malloc_r+0x32>
 80135e8:	4634      	mov	r4, r6
 80135ea:	6876      	ldr	r6, [r6, #4]
 80135ec:	e7b9      	b.n	8013562 <_malloc_r+0x46>
 80135ee:	230c      	movs	r3, #12
 80135f0:	603b      	str	r3, [r7, #0]
 80135f2:	4638      	mov	r0, r7
 80135f4:	f000 f83c 	bl	8013670 <__malloc_unlock>
 80135f8:	e7a1      	b.n	801353e <_malloc_r+0x22>
 80135fa:	6025      	str	r5, [r4, #0]
 80135fc:	e7de      	b.n	80135bc <_malloc_r+0xa0>
 80135fe:	bf00      	nop
 8013600:	20001630 	.word	0x20001630

08013604 <_sbrk_r>:
 8013604:	b538      	push	{r3, r4, r5, lr}
 8013606:	4d06      	ldr	r5, [pc, #24]	; (8013620 <_sbrk_r+0x1c>)
 8013608:	2300      	movs	r3, #0
 801360a:	4604      	mov	r4, r0
 801360c:	4608      	mov	r0, r1
 801360e:	602b      	str	r3, [r5, #0]
 8013610:	f7ee fbb0 	bl	8001d74 <_sbrk>
 8013614:	1c43      	adds	r3, r0, #1
 8013616:	d102      	bne.n	801361e <_sbrk_r+0x1a>
 8013618:	682b      	ldr	r3, [r5, #0]
 801361a:	b103      	cbz	r3, 801361e <_sbrk_r+0x1a>
 801361c:	6023      	str	r3, [r4, #0]
 801361e:	bd38      	pop	{r3, r4, r5, pc}
 8013620:	20001638 	.word	0x20001638

08013624 <siprintf>:
 8013624:	b40e      	push	{r1, r2, r3}
 8013626:	b500      	push	{lr}
 8013628:	b09c      	sub	sp, #112	; 0x70
 801362a:	ab1d      	add	r3, sp, #116	; 0x74
 801362c:	9002      	str	r0, [sp, #8]
 801362e:	9006      	str	r0, [sp, #24]
 8013630:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013634:	4809      	ldr	r0, [pc, #36]	; (801365c <siprintf+0x38>)
 8013636:	9107      	str	r1, [sp, #28]
 8013638:	9104      	str	r1, [sp, #16]
 801363a:	4909      	ldr	r1, [pc, #36]	; (8013660 <siprintf+0x3c>)
 801363c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013640:	9105      	str	r1, [sp, #20]
 8013642:	6800      	ldr	r0, [r0, #0]
 8013644:	9301      	str	r3, [sp, #4]
 8013646:	a902      	add	r1, sp, #8
 8013648:	f000 f874 	bl	8013734 <_svfiprintf_r>
 801364c:	9b02      	ldr	r3, [sp, #8]
 801364e:	2200      	movs	r2, #0
 8013650:	701a      	strb	r2, [r3, #0]
 8013652:	b01c      	add	sp, #112	; 0x70
 8013654:	f85d eb04 	ldr.w	lr, [sp], #4
 8013658:	b003      	add	sp, #12
 801365a:	4770      	bx	lr
 801365c:	20000124 	.word	0x20000124
 8013660:	ffff0208 	.word	0xffff0208

08013664 <__malloc_lock>:
 8013664:	4801      	ldr	r0, [pc, #4]	; (801366c <__malloc_lock+0x8>)
 8013666:	f000 baf9 	b.w	8013c5c <__retarget_lock_acquire_recursive>
 801366a:	bf00      	nop
 801366c:	2000163c 	.word	0x2000163c

08013670 <__malloc_unlock>:
 8013670:	4801      	ldr	r0, [pc, #4]	; (8013678 <__malloc_unlock+0x8>)
 8013672:	f000 baf4 	b.w	8013c5e <__retarget_lock_release_recursive>
 8013676:	bf00      	nop
 8013678:	2000163c 	.word	0x2000163c

0801367c <__ssputs_r>:
 801367c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013680:	688e      	ldr	r6, [r1, #8]
 8013682:	429e      	cmp	r6, r3
 8013684:	4682      	mov	sl, r0
 8013686:	460c      	mov	r4, r1
 8013688:	4690      	mov	r8, r2
 801368a:	461f      	mov	r7, r3
 801368c:	d838      	bhi.n	8013700 <__ssputs_r+0x84>
 801368e:	898a      	ldrh	r2, [r1, #12]
 8013690:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013694:	d032      	beq.n	80136fc <__ssputs_r+0x80>
 8013696:	6825      	ldr	r5, [r4, #0]
 8013698:	6909      	ldr	r1, [r1, #16]
 801369a:	eba5 0901 	sub.w	r9, r5, r1
 801369e:	6965      	ldr	r5, [r4, #20]
 80136a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80136a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80136a8:	3301      	adds	r3, #1
 80136aa:	444b      	add	r3, r9
 80136ac:	106d      	asrs	r5, r5, #1
 80136ae:	429d      	cmp	r5, r3
 80136b0:	bf38      	it	cc
 80136b2:	461d      	movcc	r5, r3
 80136b4:	0553      	lsls	r3, r2, #21
 80136b6:	d531      	bpl.n	801371c <__ssputs_r+0xa0>
 80136b8:	4629      	mov	r1, r5
 80136ba:	f7ff ff2f 	bl	801351c <_malloc_r>
 80136be:	4606      	mov	r6, r0
 80136c0:	b950      	cbnz	r0, 80136d8 <__ssputs_r+0x5c>
 80136c2:	230c      	movs	r3, #12
 80136c4:	f8ca 3000 	str.w	r3, [sl]
 80136c8:	89a3      	ldrh	r3, [r4, #12]
 80136ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80136ce:	81a3      	strh	r3, [r4, #12]
 80136d0:	f04f 30ff 	mov.w	r0, #4294967295
 80136d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80136d8:	6921      	ldr	r1, [r4, #16]
 80136da:	464a      	mov	r2, r9
 80136dc:	f7ff fe9e 	bl	801341c <memcpy>
 80136e0:	89a3      	ldrh	r3, [r4, #12]
 80136e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80136e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80136ea:	81a3      	strh	r3, [r4, #12]
 80136ec:	6126      	str	r6, [r4, #16]
 80136ee:	6165      	str	r5, [r4, #20]
 80136f0:	444e      	add	r6, r9
 80136f2:	eba5 0509 	sub.w	r5, r5, r9
 80136f6:	6026      	str	r6, [r4, #0]
 80136f8:	60a5      	str	r5, [r4, #8]
 80136fa:	463e      	mov	r6, r7
 80136fc:	42be      	cmp	r6, r7
 80136fe:	d900      	bls.n	8013702 <__ssputs_r+0x86>
 8013700:	463e      	mov	r6, r7
 8013702:	6820      	ldr	r0, [r4, #0]
 8013704:	4632      	mov	r2, r6
 8013706:	4641      	mov	r1, r8
 8013708:	f000 faaa 	bl	8013c60 <memmove>
 801370c:	68a3      	ldr	r3, [r4, #8]
 801370e:	1b9b      	subs	r3, r3, r6
 8013710:	60a3      	str	r3, [r4, #8]
 8013712:	6823      	ldr	r3, [r4, #0]
 8013714:	4433      	add	r3, r6
 8013716:	6023      	str	r3, [r4, #0]
 8013718:	2000      	movs	r0, #0
 801371a:	e7db      	b.n	80136d4 <__ssputs_r+0x58>
 801371c:	462a      	mov	r2, r5
 801371e:	f000 fab9 	bl	8013c94 <_realloc_r>
 8013722:	4606      	mov	r6, r0
 8013724:	2800      	cmp	r0, #0
 8013726:	d1e1      	bne.n	80136ec <__ssputs_r+0x70>
 8013728:	6921      	ldr	r1, [r4, #16]
 801372a:	4650      	mov	r0, sl
 801372c:	f7ff fe8c 	bl	8013448 <_free_r>
 8013730:	e7c7      	b.n	80136c2 <__ssputs_r+0x46>
	...

08013734 <_svfiprintf_r>:
 8013734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013738:	4698      	mov	r8, r3
 801373a:	898b      	ldrh	r3, [r1, #12]
 801373c:	061b      	lsls	r3, r3, #24
 801373e:	b09d      	sub	sp, #116	; 0x74
 8013740:	4607      	mov	r7, r0
 8013742:	460d      	mov	r5, r1
 8013744:	4614      	mov	r4, r2
 8013746:	d50e      	bpl.n	8013766 <_svfiprintf_r+0x32>
 8013748:	690b      	ldr	r3, [r1, #16]
 801374a:	b963      	cbnz	r3, 8013766 <_svfiprintf_r+0x32>
 801374c:	2140      	movs	r1, #64	; 0x40
 801374e:	f7ff fee5 	bl	801351c <_malloc_r>
 8013752:	6028      	str	r0, [r5, #0]
 8013754:	6128      	str	r0, [r5, #16]
 8013756:	b920      	cbnz	r0, 8013762 <_svfiprintf_r+0x2e>
 8013758:	230c      	movs	r3, #12
 801375a:	603b      	str	r3, [r7, #0]
 801375c:	f04f 30ff 	mov.w	r0, #4294967295
 8013760:	e0d1      	b.n	8013906 <_svfiprintf_r+0x1d2>
 8013762:	2340      	movs	r3, #64	; 0x40
 8013764:	616b      	str	r3, [r5, #20]
 8013766:	2300      	movs	r3, #0
 8013768:	9309      	str	r3, [sp, #36]	; 0x24
 801376a:	2320      	movs	r3, #32
 801376c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013770:	f8cd 800c 	str.w	r8, [sp, #12]
 8013774:	2330      	movs	r3, #48	; 0x30
 8013776:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013920 <_svfiprintf_r+0x1ec>
 801377a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801377e:	f04f 0901 	mov.w	r9, #1
 8013782:	4623      	mov	r3, r4
 8013784:	469a      	mov	sl, r3
 8013786:	f813 2b01 	ldrb.w	r2, [r3], #1
 801378a:	b10a      	cbz	r2, 8013790 <_svfiprintf_r+0x5c>
 801378c:	2a25      	cmp	r2, #37	; 0x25
 801378e:	d1f9      	bne.n	8013784 <_svfiprintf_r+0x50>
 8013790:	ebba 0b04 	subs.w	fp, sl, r4
 8013794:	d00b      	beq.n	80137ae <_svfiprintf_r+0x7a>
 8013796:	465b      	mov	r3, fp
 8013798:	4622      	mov	r2, r4
 801379a:	4629      	mov	r1, r5
 801379c:	4638      	mov	r0, r7
 801379e:	f7ff ff6d 	bl	801367c <__ssputs_r>
 80137a2:	3001      	adds	r0, #1
 80137a4:	f000 80aa 	beq.w	80138fc <_svfiprintf_r+0x1c8>
 80137a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80137aa:	445a      	add	r2, fp
 80137ac:	9209      	str	r2, [sp, #36]	; 0x24
 80137ae:	f89a 3000 	ldrb.w	r3, [sl]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	f000 80a2 	beq.w	80138fc <_svfiprintf_r+0x1c8>
 80137b8:	2300      	movs	r3, #0
 80137ba:	f04f 32ff 	mov.w	r2, #4294967295
 80137be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80137c2:	f10a 0a01 	add.w	sl, sl, #1
 80137c6:	9304      	str	r3, [sp, #16]
 80137c8:	9307      	str	r3, [sp, #28]
 80137ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80137ce:	931a      	str	r3, [sp, #104]	; 0x68
 80137d0:	4654      	mov	r4, sl
 80137d2:	2205      	movs	r2, #5
 80137d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80137d8:	4851      	ldr	r0, [pc, #324]	; (8013920 <_svfiprintf_r+0x1ec>)
 80137da:	f7ec fcd9 	bl	8000190 <memchr>
 80137de:	9a04      	ldr	r2, [sp, #16]
 80137e0:	b9d8      	cbnz	r0, 801381a <_svfiprintf_r+0xe6>
 80137e2:	06d0      	lsls	r0, r2, #27
 80137e4:	bf44      	itt	mi
 80137e6:	2320      	movmi	r3, #32
 80137e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80137ec:	0711      	lsls	r1, r2, #28
 80137ee:	bf44      	itt	mi
 80137f0:	232b      	movmi	r3, #43	; 0x2b
 80137f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80137f6:	f89a 3000 	ldrb.w	r3, [sl]
 80137fa:	2b2a      	cmp	r3, #42	; 0x2a
 80137fc:	d015      	beq.n	801382a <_svfiprintf_r+0xf6>
 80137fe:	9a07      	ldr	r2, [sp, #28]
 8013800:	4654      	mov	r4, sl
 8013802:	2000      	movs	r0, #0
 8013804:	f04f 0c0a 	mov.w	ip, #10
 8013808:	4621      	mov	r1, r4
 801380a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801380e:	3b30      	subs	r3, #48	; 0x30
 8013810:	2b09      	cmp	r3, #9
 8013812:	d94e      	bls.n	80138b2 <_svfiprintf_r+0x17e>
 8013814:	b1b0      	cbz	r0, 8013844 <_svfiprintf_r+0x110>
 8013816:	9207      	str	r2, [sp, #28]
 8013818:	e014      	b.n	8013844 <_svfiprintf_r+0x110>
 801381a:	eba0 0308 	sub.w	r3, r0, r8
 801381e:	fa09 f303 	lsl.w	r3, r9, r3
 8013822:	4313      	orrs	r3, r2
 8013824:	9304      	str	r3, [sp, #16]
 8013826:	46a2      	mov	sl, r4
 8013828:	e7d2      	b.n	80137d0 <_svfiprintf_r+0x9c>
 801382a:	9b03      	ldr	r3, [sp, #12]
 801382c:	1d19      	adds	r1, r3, #4
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	9103      	str	r1, [sp, #12]
 8013832:	2b00      	cmp	r3, #0
 8013834:	bfbb      	ittet	lt
 8013836:	425b      	neglt	r3, r3
 8013838:	f042 0202 	orrlt.w	r2, r2, #2
 801383c:	9307      	strge	r3, [sp, #28]
 801383e:	9307      	strlt	r3, [sp, #28]
 8013840:	bfb8      	it	lt
 8013842:	9204      	strlt	r2, [sp, #16]
 8013844:	7823      	ldrb	r3, [r4, #0]
 8013846:	2b2e      	cmp	r3, #46	; 0x2e
 8013848:	d10c      	bne.n	8013864 <_svfiprintf_r+0x130>
 801384a:	7863      	ldrb	r3, [r4, #1]
 801384c:	2b2a      	cmp	r3, #42	; 0x2a
 801384e:	d135      	bne.n	80138bc <_svfiprintf_r+0x188>
 8013850:	9b03      	ldr	r3, [sp, #12]
 8013852:	1d1a      	adds	r2, r3, #4
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	9203      	str	r2, [sp, #12]
 8013858:	2b00      	cmp	r3, #0
 801385a:	bfb8      	it	lt
 801385c:	f04f 33ff 	movlt.w	r3, #4294967295
 8013860:	3402      	adds	r4, #2
 8013862:	9305      	str	r3, [sp, #20]
 8013864:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8013924 <_svfiprintf_r+0x1f0>
 8013868:	7821      	ldrb	r1, [r4, #0]
 801386a:	2203      	movs	r2, #3
 801386c:	4650      	mov	r0, sl
 801386e:	f7ec fc8f 	bl	8000190 <memchr>
 8013872:	b140      	cbz	r0, 8013886 <_svfiprintf_r+0x152>
 8013874:	2340      	movs	r3, #64	; 0x40
 8013876:	eba0 000a 	sub.w	r0, r0, sl
 801387a:	fa03 f000 	lsl.w	r0, r3, r0
 801387e:	9b04      	ldr	r3, [sp, #16]
 8013880:	4303      	orrs	r3, r0
 8013882:	3401      	adds	r4, #1
 8013884:	9304      	str	r3, [sp, #16]
 8013886:	f814 1b01 	ldrb.w	r1, [r4], #1
 801388a:	4827      	ldr	r0, [pc, #156]	; (8013928 <_svfiprintf_r+0x1f4>)
 801388c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013890:	2206      	movs	r2, #6
 8013892:	f7ec fc7d 	bl	8000190 <memchr>
 8013896:	2800      	cmp	r0, #0
 8013898:	d038      	beq.n	801390c <_svfiprintf_r+0x1d8>
 801389a:	4b24      	ldr	r3, [pc, #144]	; (801392c <_svfiprintf_r+0x1f8>)
 801389c:	bb1b      	cbnz	r3, 80138e6 <_svfiprintf_r+0x1b2>
 801389e:	9b03      	ldr	r3, [sp, #12]
 80138a0:	3307      	adds	r3, #7
 80138a2:	f023 0307 	bic.w	r3, r3, #7
 80138a6:	3308      	adds	r3, #8
 80138a8:	9303      	str	r3, [sp, #12]
 80138aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80138ac:	4433      	add	r3, r6
 80138ae:	9309      	str	r3, [sp, #36]	; 0x24
 80138b0:	e767      	b.n	8013782 <_svfiprintf_r+0x4e>
 80138b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80138b6:	460c      	mov	r4, r1
 80138b8:	2001      	movs	r0, #1
 80138ba:	e7a5      	b.n	8013808 <_svfiprintf_r+0xd4>
 80138bc:	2300      	movs	r3, #0
 80138be:	3401      	adds	r4, #1
 80138c0:	9305      	str	r3, [sp, #20]
 80138c2:	4619      	mov	r1, r3
 80138c4:	f04f 0c0a 	mov.w	ip, #10
 80138c8:	4620      	mov	r0, r4
 80138ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80138ce:	3a30      	subs	r2, #48	; 0x30
 80138d0:	2a09      	cmp	r2, #9
 80138d2:	d903      	bls.n	80138dc <_svfiprintf_r+0x1a8>
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d0c5      	beq.n	8013864 <_svfiprintf_r+0x130>
 80138d8:	9105      	str	r1, [sp, #20]
 80138da:	e7c3      	b.n	8013864 <_svfiprintf_r+0x130>
 80138dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80138e0:	4604      	mov	r4, r0
 80138e2:	2301      	movs	r3, #1
 80138e4:	e7f0      	b.n	80138c8 <_svfiprintf_r+0x194>
 80138e6:	ab03      	add	r3, sp, #12
 80138e8:	9300      	str	r3, [sp, #0]
 80138ea:	462a      	mov	r2, r5
 80138ec:	4b10      	ldr	r3, [pc, #64]	; (8013930 <_svfiprintf_r+0x1fc>)
 80138ee:	a904      	add	r1, sp, #16
 80138f0:	4638      	mov	r0, r7
 80138f2:	f3af 8000 	nop.w
 80138f6:	1c42      	adds	r2, r0, #1
 80138f8:	4606      	mov	r6, r0
 80138fa:	d1d6      	bne.n	80138aa <_svfiprintf_r+0x176>
 80138fc:	89ab      	ldrh	r3, [r5, #12]
 80138fe:	065b      	lsls	r3, r3, #25
 8013900:	f53f af2c 	bmi.w	801375c <_svfiprintf_r+0x28>
 8013904:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013906:	b01d      	add	sp, #116	; 0x74
 8013908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801390c:	ab03      	add	r3, sp, #12
 801390e:	9300      	str	r3, [sp, #0]
 8013910:	462a      	mov	r2, r5
 8013912:	4b07      	ldr	r3, [pc, #28]	; (8013930 <_svfiprintf_r+0x1fc>)
 8013914:	a904      	add	r1, sp, #16
 8013916:	4638      	mov	r0, r7
 8013918:	f000 f87a 	bl	8013a10 <_printf_i>
 801391c:	e7eb      	b.n	80138f6 <_svfiprintf_r+0x1c2>
 801391e:	bf00      	nop
 8013920:	08014e57 	.word	0x08014e57
 8013924:	08014e5d 	.word	0x08014e5d
 8013928:	08014e61 	.word	0x08014e61
 801392c:	00000000 	.word	0x00000000
 8013930:	0801367d 	.word	0x0801367d

08013934 <_printf_common>:
 8013934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013938:	4616      	mov	r6, r2
 801393a:	4699      	mov	r9, r3
 801393c:	688a      	ldr	r2, [r1, #8]
 801393e:	690b      	ldr	r3, [r1, #16]
 8013940:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013944:	4293      	cmp	r3, r2
 8013946:	bfb8      	it	lt
 8013948:	4613      	movlt	r3, r2
 801394a:	6033      	str	r3, [r6, #0]
 801394c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013950:	4607      	mov	r7, r0
 8013952:	460c      	mov	r4, r1
 8013954:	b10a      	cbz	r2, 801395a <_printf_common+0x26>
 8013956:	3301      	adds	r3, #1
 8013958:	6033      	str	r3, [r6, #0]
 801395a:	6823      	ldr	r3, [r4, #0]
 801395c:	0699      	lsls	r1, r3, #26
 801395e:	bf42      	ittt	mi
 8013960:	6833      	ldrmi	r3, [r6, #0]
 8013962:	3302      	addmi	r3, #2
 8013964:	6033      	strmi	r3, [r6, #0]
 8013966:	6825      	ldr	r5, [r4, #0]
 8013968:	f015 0506 	ands.w	r5, r5, #6
 801396c:	d106      	bne.n	801397c <_printf_common+0x48>
 801396e:	f104 0a19 	add.w	sl, r4, #25
 8013972:	68e3      	ldr	r3, [r4, #12]
 8013974:	6832      	ldr	r2, [r6, #0]
 8013976:	1a9b      	subs	r3, r3, r2
 8013978:	42ab      	cmp	r3, r5
 801397a:	dc26      	bgt.n	80139ca <_printf_common+0x96>
 801397c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013980:	1e13      	subs	r3, r2, #0
 8013982:	6822      	ldr	r2, [r4, #0]
 8013984:	bf18      	it	ne
 8013986:	2301      	movne	r3, #1
 8013988:	0692      	lsls	r2, r2, #26
 801398a:	d42b      	bmi.n	80139e4 <_printf_common+0xb0>
 801398c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013990:	4649      	mov	r1, r9
 8013992:	4638      	mov	r0, r7
 8013994:	47c0      	blx	r8
 8013996:	3001      	adds	r0, #1
 8013998:	d01e      	beq.n	80139d8 <_printf_common+0xa4>
 801399a:	6823      	ldr	r3, [r4, #0]
 801399c:	68e5      	ldr	r5, [r4, #12]
 801399e:	6832      	ldr	r2, [r6, #0]
 80139a0:	f003 0306 	and.w	r3, r3, #6
 80139a4:	2b04      	cmp	r3, #4
 80139a6:	bf08      	it	eq
 80139a8:	1aad      	subeq	r5, r5, r2
 80139aa:	68a3      	ldr	r3, [r4, #8]
 80139ac:	6922      	ldr	r2, [r4, #16]
 80139ae:	bf0c      	ite	eq
 80139b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80139b4:	2500      	movne	r5, #0
 80139b6:	4293      	cmp	r3, r2
 80139b8:	bfc4      	itt	gt
 80139ba:	1a9b      	subgt	r3, r3, r2
 80139bc:	18ed      	addgt	r5, r5, r3
 80139be:	2600      	movs	r6, #0
 80139c0:	341a      	adds	r4, #26
 80139c2:	42b5      	cmp	r5, r6
 80139c4:	d11a      	bne.n	80139fc <_printf_common+0xc8>
 80139c6:	2000      	movs	r0, #0
 80139c8:	e008      	b.n	80139dc <_printf_common+0xa8>
 80139ca:	2301      	movs	r3, #1
 80139cc:	4652      	mov	r2, sl
 80139ce:	4649      	mov	r1, r9
 80139d0:	4638      	mov	r0, r7
 80139d2:	47c0      	blx	r8
 80139d4:	3001      	adds	r0, #1
 80139d6:	d103      	bne.n	80139e0 <_printf_common+0xac>
 80139d8:	f04f 30ff 	mov.w	r0, #4294967295
 80139dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139e0:	3501      	adds	r5, #1
 80139e2:	e7c6      	b.n	8013972 <_printf_common+0x3e>
 80139e4:	18e1      	adds	r1, r4, r3
 80139e6:	1c5a      	adds	r2, r3, #1
 80139e8:	2030      	movs	r0, #48	; 0x30
 80139ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80139ee:	4422      	add	r2, r4
 80139f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80139f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80139f8:	3302      	adds	r3, #2
 80139fa:	e7c7      	b.n	801398c <_printf_common+0x58>
 80139fc:	2301      	movs	r3, #1
 80139fe:	4622      	mov	r2, r4
 8013a00:	4649      	mov	r1, r9
 8013a02:	4638      	mov	r0, r7
 8013a04:	47c0      	blx	r8
 8013a06:	3001      	adds	r0, #1
 8013a08:	d0e6      	beq.n	80139d8 <_printf_common+0xa4>
 8013a0a:	3601      	adds	r6, #1
 8013a0c:	e7d9      	b.n	80139c2 <_printf_common+0x8e>
	...

08013a10 <_printf_i>:
 8013a10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013a14:	7e0f      	ldrb	r7, [r1, #24]
 8013a16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013a18:	2f78      	cmp	r7, #120	; 0x78
 8013a1a:	4691      	mov	r9, r2
 8013a1c:	4680      	mov	r8, r0
 8013a1e:	460c      	mov	r4, r1
 8013a20:	469a      	mov	sl, r3
 8013a22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013a26:	d807      	bhi.n	8013a38 <_printf_i+0x28>
 8013a28:	2f62      	cmp	r7, #98	; 0x62
 8013a2a:	d80a      	bhi.n	8013a42 <_printf_i+0x32>
 8013a2c:	2f00      	cmp	r7, #0
 8013a2e:	f000 80d8 	beq.w	8013be2 <_printf_i+0x1d2>
 8013a32:	2f58      	cmp	r7, #88	; 0x58
 8013a34:	f000 80a3 	beq.w	8013b7e <_printf_i+0x16e>
 8013a38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013a3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013a40:	e03a      	b.n	8013ab8 <_printf_i+0xa8>
 8013a42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013a46:	2b15      	cmp	r3, #21
 8013a48:	d8f6      	bhi.n	8013a38 <_printf_i+0x28>
 8013a4a:	a101      	add	r1, pc, #4	; (adr r1, 8013a50 <_printf_i+0x40>)
 8013a4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013a50:	08013aa9 	.word	0x08013aa9
 8013a54:	08013abd 	.word	0x08013abd
 8013a58:	08013a39 	.word	0x08013a39
 8013a5c:	08013a39 	.word	0x08013a39
 8013a60:	08013a39 	.word	0x08013a39
 8013a64:	08013a39 	.word	0x08013a39
 8013a68:	08013abd 	.word	0x08013abd
 8013a6c:	08013a39 	.word	0x08013a39
 8013a70:	08013a39 	.word	0x08013a39
 8013a74:	08013a39 	.word	0x08013a39
 8013a78:	08013a39 	.word	0x08013a39
 8013a7c:	08013bc9 	.word	0x08013bc9
 8013a80:	08013aed 	.word	0x08013aed
 8013a84:	08013bab 	.word	0x08013bab
 8013a88:	08013a39 	.word	0x08013a39
 8013a8c:	08013a39 	.word	0x08013a39
 8013a90:	08013beb 	.word	0x08013beb
 8013a94:	08013a39 	.word	0x08013a39
 8013a98:	08013aed 	.word	0x08013aed
 8013a9c:	08013a39 	.word	0x08013a39
 8013aa0:	08013a39 	.word	0x08013a39
 8013aa4:	08013bb3 	.word	0x08013bb3
 8013aa8:	682b      	ldr	r3, [r5, #0]
 8013aaa:	1d1a      	adds	r2, r3, #4
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	602a      	str	r2, [r5, #0]
 8013ab0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013ab4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013ab8:	2301      	movs	r3, #1
 8013aba:	e0a3      	b.n	8013c04 <_printf_i+0x1f4>
 8013abc:	6820      	ldr	r0, [r4, #0]
 8013abe:	6829      	ldr	r1, [r5, #0]
 8013ac0:	0606      	lsls	r6, r0, #24
 8013ac2:	f101 0304 	add.w	r3, r1, #4
 8013ac6:	d50a      	bpl.n	8013ade <_printf_i+0xce>
 8013ac8:	680e      	ldr	r6, [r1, #0]
 8013aca:	602b      	str	r3, [r5, #0]
 8013acc:	2e00      	cmp	r6, #0
 8013ace:	da03      	bge.n	8013ad8 <_printf_i+0xc8>
 8013ad0:	232d      	movs	r3, #45	; 0x2d
 8013ad2:	4276      	negs	r6, r6
 8013ad4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013ad8:	485e      	ldr	r0, [pc, #376]	; (8013c54 <_printf_i+0x244>)
 8013ada:	230a      	movs	r3, #10
 8013adc:	e019      	b.n	8013b12 <_printf_i+0x102>
 8013ade:	680e      	ldr	r6, [r1, #0]
 8013ae0:	602b      	str	r3, [r5, #0]
 8013ae2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013ae6:	bf18      	it	ne
 8013ae8:	b236      	sxthne	r6, r6
 8013aea:	e7ef      	b.n	8013acc <_printf_i+0xbc>
 8013aec:	682b      	ldr	r3, [r5, #0]
 8013aee:	6820      	ldr	r0, [r4, #0]
 8013af0:	1d19      	adds	r1, r3, #4
 8013af2:	6029      	str	r1, [r5, #0]
 8013af4:	0601      	lsls	r1, r0, #24
 8013af6:	d501      	bpl.n	8013afc <_printf_i+0xec>
 8013af8:	681e      	ldr	r6, [r3, #0]
 8013afa:	e002      	b.n	8013b02 <_printf_i+0xf2>
 8013afc:	0646      	lsls	r6, r0, #25
 8013afe:	d5fb      	bpl.n	8013af8 <_printf_i+0xe8>
 8013b00:	881e      	ldrh	r6, [r3, #0]
 8013b02:	4854      	ldr	r0, [pc, #336]	; (8013c54 <_printf_i+0x244>)
 8013b04:	2f6f      	cmp	r7, #111	; 0x6f
 8013b06:	bf0c      	ite	eq
 8013b08:	2308      	moveq	r3, #8
 8013b0a:	230a      	movne	r3, #10
 8013b0c:	2100      	movs	r1, #0
 8013b0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013b12:	6865      	ldr	r5, [r4, #4]
 8013b14:	60a5      	str	r5, [r4, #8]
 8013b16:	2d00      	cmp	r5, #0
 8013b18:	bfa2      	ittt	ge
 8013b1a:	6821      	ldrge	r1, [r4, #0]
 8013b1c:	f021 0104 	bicge.w	r1, r1, #4
 8013b20:	6021      	strge	r1, [r4, #0]
 8013b22:	b90e      	cbnz	r6, 8013b28 <_printf_i+0x118>
 8013b24:	2d00      	cmp	r5, #0
 8013b26:	d04d      	beq.n	8013bc4 <_printf_i+0x1b4>
 8013b28:	4615      	mov	r5, r2
 8013b2a:	fbb6 f1f3 	udiv	r1, r6, r3
 8013b2e:	fb03 6711 	mls	r7, r3, r1, r6
 8013b32:	5dc7      	ldrb	r7, [r0, r7]
 8013b34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013b38:	4637      	mov	r7, r6
 8013b3a:	42bb      	cmp	r3, r7
 8013b3c:	460e      	mov	r6, r1
 8013b3e:	d9f4      	bls.n	8013b2a <_printf_i+0x11a>
 8013b40:	2b08      	cmp	r3, #8
 8013b42:	d10b      	bne.n	8013b5c <_printf_i+0x14c>
 8013b44:	6823      	ldr	r3, [r4, #0]
 8013b46:	07de      	lsls	r6, r3, #31
 8013b48:	d508      	bpl.n	8013b5c <_printf_i+0x14c>
 8013b4a:	6923      	ldr	r3, [r4, #16]
 8013b4c:	6861      	ldr	r1, [r4, #4]
 8013b4e:	4299      	cmp	r1, r3
 8013b50:	bfde      	ittt	le
 8013b52:	2330      	movle	r3, #48	; 0x30
 8013b54:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013b58:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013b5c:	1b52      	subs	r2, r2, r5
 8013b5e:	6122      	str	r2, [r4, #16]
 8013b60:	f8cd a000 	str.w	sl, [sp]
 8013b64:	464b      	mov	r3, r9
 8013b66:	aa03      	add	r2, sp, #12
 8013b68:	4621      	mov	r1, r4
 8013b6a:	4640      	mov	r0, r8
 8013b6c:	f7ff fee2 	bl	8013934 <_printf_common>
 8013b70:	3001      	adds	r0, #1
 8013b72:	d14c      	bne.n	8013c0e <_printf_i+0x1fe>
 8013b74:	f04f 30ff 	mov.w	r0, #4294967295
 8013b78:	b004      	add	sp, #16
 8013b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b7e:	4835      	ldr	r0, [pc, #212]	; (8013c54 <_printf_i+0x244>)
 8013b80:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013b84:	6829      	ldr	r1, [r5, #0]
 8013b86:	6823      	ldr	r3, [r4, #0]
 8013b88:	f851 6b04 	ldr.w	r6, [r1], #4
 8013b8c:	6029      	str	r1, [r5, #0]
 8013b8e:	061d      	lsls	r5, r3, #24
 8013b90:	d514      	bpl.n	8013bbc <_printf_i+0x1ac>
 8013b92:	07df      	lsls	r7, r3, #31
 8013b94:	bf44      	itt	mi
 8013b96:	f043 0320 	orrmi.w	r3, r3, #32
 8013b9a:	6023      	strmi	r3, [r4, #0]
 8013b9c:	b91e      	cbnz	r6, 8013ba6 <_printf_i+0x196>
 8013b9e:	6823      	ldr	r3, [r4, #0]
 8013ba0:	f023 0320 	bic.w	r3, r3, #32
 8013ba4:	6023      	str	r3, [r4, #0]
 8013ba6:	2310      	movs	r3, #16
 8013ba8:	e7b0      	b.n	8013b0c <_printf_i+0xfc>
 8013baa:	6823      	ldr	r3, [r4, #0]
 8013bac:	f043 0320 	orr.w	r3, r3, #32
 8013bb0:	6023      	str	r3, [r4, #0]
 8013bb2:	2378      	movs	r3, #120	; 0x78
 8013bb4:	4828      	ldr	r0, [pc, #160]	; (8013c58 <_printf_i+0x248>)
 8013bb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013bba:	e7e3      	b.n	8013b84 <_printf_i+0x174>
 8013bbc:	0659      	lsls	r1, r3, #25
 8013bbe:	bf48      	it	mi
 8013bc0:	b2b6      	uxthmi	r6, r6
 8013bc2:	e7e6      	b.n	8013b92 <_printf_i+0x182>
 8013bc4:	4615      	mov	r5, r2
 8013bc6:	e7bb      	b.n	8013b40 <_printf_i+0x130>
 8013bc8:	682b      	ldr	r3, [r5, #0]
 8013bca:	6826      	ldr	r6, [r4, #0]
 8013bcc:	6961      	ldr	r1, [r4, #20]
 8013bce:	1d18      	adds	r0, r3, #4
 8013bd0:	6028      	str	r0, [r5, #0]
 8013bd2:	0635      	lsls	r5, r6, #24
 8013bd4:	681b      	ldr	r3, [r3, #0]
 8013bd6:	d501      	bpl.n	8013bdc <_printf_i+0x1cc>
 8013bd8:	6019      	str	r1, [r3, #0]
 8013bda:	e002      	b.n	8013be2 <_printf_i+0x1d2>
 8013bdc:	0670      	lsls	r0, r6, #25
 8013bde:	d5fb      	bpl.n	8013bd8 <_printf_i+0x1c8>
 8013be0:	8019      	strh	r1, [r3, #0]
 8013be2:	2300      	movs	r3, #0
 8013be4:	6123      	str	r3, [r4, #16]
 8013be6:	4615      	mov	r5, r2
 8013be8:	e7ba      	b.n	8013b60 <_printf_i+0x150>
 8013bea:	682b      	ldr	r3, [r5, #0]
 8013bec:	1d1a      	adds	r2, r3, #4
 8013bee:	602a      	str	r2, [r5, #0]
 8013bf0:	681d      	ldr	r5, [r3, #0]
 8013bf2:	6862      	ldr	r2, [r4, #4]
 8013bf4:	2100      	movs	r1, #0
 8013bf6:	4628      	mov	r0, r5
 8013bf8:	f7ec faca 	bl	8000190 <memchr>
 8013bfc:	b108      	cbz	r0, 8013c02 <_printf_i+0x1f2>
 8013bfe:	1b40      	subs	r0, r0, r5
 8013c00:	6060      	str	r0, [r4, #4]
 8013c02:	6863      	ldr	r3, [r4, #4]
 8013c04:	6123      	str	r3, [r4, #16]
 8013c06:	2300      	movs	r3, #0
 8013c08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013c0c:	e7a8      	b.n	8013b60 <_printf_i+0x150>
 8013c0e:	6923      	ldr	r3, [r4, #16]
 8013c10:	462a      	mov	r2, r5
 8013c12:	4649      	mov	r1, r9
 8013c14:	4640      	mov	r0, r8
 8013c16:	47d0      	blx	sl
 8013c18:	3001      	adds	r0, #1
 8013c1a:	d0ab      	beq.n	8013b74 <_printf_i+0x164>
 8013c1c:	6823      	ldr	r3, [r4, #0]
 8013c1e:	079b      	lsls	r3, r3, #30
 8013c20:	d413      	bmi.n	8013c4a <_printf_i+0x23a>
 8013c22:	68e0      	ldr	r0, [r4, #12]
 8013c24:	9b03      	ldr	r3, [sp, #12]
 8013c26:	4298      	cmp	r0, r3
 8013c28:	bfb8      	it	lt
 8013c2a:	4618      	movlt	r0, r3
 8013c2c:	e7a4      	b.n	8013b78 <_printf_i+0x168>
 8013c2e:	2301      	movs	r3, #1
 8013c30:	4632      	mov	r2, r6
 8013c32:	4649      	mov	r1, r9
 8013c34:	4640      	mov	r0, r8
 8013c36:	47d0      	blx	sl
 8013c38:	3001      	adds	r0, #1
 8013c3a:	d09b      	beq.n	8013b74 <_printf_i+0x164>
 8013c3c:	3501      	adds	r5, #1
 8013c3e:	68e3      	ldr	r3, [r4, #12]
 8013c40:	9903      	ldr	r1, [sp, #12]
 8013c42:	1a5b      	subs	r3, r3, r1
 8013c44:	42ab      	cmp	r3, r5
 8013c46:	dcf2      	bgt.n	8013c2e <_printf_i+0x21e>
 8013c48:	e7eb      	b.n	8013c22 <_printf_i+0x212>
 8013c4a:	2500      	movs	r5, #0
 8013c4c:	f104 0619 	add.w	r6, r4, #25
 8013c50:	e7f5      	b.n	8013c3e <_printf_i+0x22e>
 8013c52:	bf00      	nop
 8013c54:	08014e68 	.word	0x08014e68
 8013c58:	08014e79 	.word	0x08014e79

08013c5c <__retarget_lock_acquire_recursive>:
 8013c5c:	4770      	bx	lr

08013c5e <__retarget_lock_release_recursive>:
 8013c5e:	4770      	bx	lr

08013c60 <memmove>:
 8013c60:	4288      	cmp	r0, r1
 8013c62:	b510      	push	{r4, lr}
 8013c64:	eb01 0402 	add.w	r4, r1, r2
 8013c68:	d902      	bls.n	8013c70 <memmove+0x10>
 8013c6a:	4284      	cmp	r4, r0
 8013c6c:	4623      	mov	r3, r4
 8013c6e:	d807      	bhi.n	8013c80 <memmove+0x20>
 8013c70:	1e43      	subs	r3, r0, #1
 8013c72:	42a1      	cmp	r1, r4
 8013c74:	d008      	beq.n	8013c88 <memmove+0x28>
 8013c76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013c7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013c7e:	e7f8      	b.n	8013c72 <memmove+0x12>
 8013c80:	4402      	add	r2, r0
 8013c82:	4601      	mov	r1, r0
 8013c84:	428a      	cmp	r2, r1
 8013c86:	d100      	bne.n	8013c8a <memmove+0x2a>
 8013c88:	bd10      	pop	{r4, pc}
 8013c8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013c8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013c92:	e7f7      	b.n	8013c84 <memmove+0x24>

08013c94 <_realloc_r>:
 8013c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c98:	4680      	mov	r8, r0
 8013c9a:	4614      	mov	r4, r2
 8013c9c:	460e      	mov	r6, r1
 8013c9e:	b921      	cbnz	r1, 8013caa <_realloc_r+0x16>
 8013ca0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013ca4:	4611      	mov	r1, r2
 8013ca6:	f7ff bc39 	b.w	801351c <_malloc_r>
 8013caa:	b92a      	cbnz	r2, 8013cb8 <_realloc_r+0x24>
 8013cac:	f7ff fbcc 	bl	8013448 <_free_r>
 8013cb0:	4625      	mov	r5, r4
 8013cb2:	4628      	mov	r0, r5
 8013cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cb8:	f000 f81b 	bl	8013cf2 <_malloc_usable_size_r>
 8013cbc:	4284      	cmp	r4, r0
 8013cbe:	4607      	mov	r7, r0
 8013cc0:	d802      	bhi.n	8013cc8 <_realloc_r+0x34>
 8013cc2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013cc6:	d812      	bhi.n	8013cee <_realloc_r+0x5a>
 8013cc8:	4621      	mov	r1, r4
 8013cca:	4640      	mov	r0, r8
 8013ccc:	f7ff fc26 	bl	801351c <_malloc_r>
 8013cd0:	4605      	mov	r5, r0
 8013cd2:	2800      	cmp	r0, #0
 8013cd4:	d0ed      	beq.n	8013cb2 <_realloc_r+0x1e>
 8013cd6:	42bc      	cmp	r4, r7
 8013cd8:	4622      	mov	r2, r4
 8013cda:	4631      	mov	r1, r6
 8013cdc:	bf28      	it	cs
 8013cde:	463a      	movcs	r2, r7
 8013ce0:	f7ff fb9c 	bl	801341c <memcpy>
 8013ce4:	4631      	mov	r1, r6
 8013ce6:	4640      	mov	r0, r8
 8013ce8:	f7ff fbae 	bl	8013448 <_free_r>
 8013cec:	e7e1      	b.n	8013cb2 <_realloc_r+0x1e>
 8013cee:	4635      	mov	r5, r6
 8013cf0:	e7df      	b.n	8013cb2 <_realloc_r+0x1e>

08013cf2 <_malloc_usable_size_r>:
 8013cf2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013cf6:	1f18      	subs	r0, r3, #4
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	bfbc      	itt	lt
 8013cfc:	580b      	ldrlt	r3, [r1, r0]
 8013cfe:	18c0      	addlt	r0, r0, r3
 8013d00:	4770      	bx	lr
 8013d02:	0000      	movs	r0, r0
 8013d04:	0000      	movs	r0, r0
	...

08013d08 <floor>:
 8013d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013d0c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8013d10:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8013d14:	2e13      	cmp	r6, #19
 8013d16:	4602      	mov	r2, r0
 8013d18:	460b      	mov	r3, r1
 8013d1a:	4607      	mov	r7, r0
 8013d1c:	460c      	mov	r4, r1
 8013d1e:	4605      	mov	r5, r0
 8013d20:	dc33      	bgt.n	8013d8a <floor+0x82>
 8013d22:	2e00      	cmp	r6, #0
 8013d24:	da14      	bge.n	8013d50 <floor+0x48>
 8013d26:	a334      	add	r3, pc, #208	; (adr r3, 8013df8 <floor+0xf0>)
 8013d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d2c:	f7ec fb3a 	bl	80003a4 <__adddf3>
 8013d30:	2200      	movs	r2, #0
 8013d32:	2300      	movs	r3, #0
 8013d34:	f7ec fd6a 	bl	800080c <__aeabi_dcmpgt>
 8013d38:	b138      	cbz	r0, 8013d4a <floor+0x42>
 8013d3a:	2c00      	cmp	r4, #0
 8013d3c:	da58      	bge.n	8013df0 <floor+0xe8>
 8013d3e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8013d42:	431d      	orrs	r5, r3
 8013d44:	d001      	beq.n	8013d4a <floor+0x42>
 8013d46:	4c2e      	ldr	r4, [pc, #184]	; (8013e00 <floor+0xf8>)
 8013d48:	2500      	movs	r5, #0
 8013d4a:	4623      	mov	r3, r4
 8013d4c:	462f      	mov	r7, r5
 8013d4e:	e025      	b.n	8013d9c <floor+0x94>
 8013d50:	4a2c      	ldr	r2, [pc, #176]	; (8013e04 <floor+0xfc>)
 8013d52:	fa42 f806 	asr.w	r8, r2, r6
 8013d56:	ea01 0208 	and.w	r2, r1, r8
 8013d5a:	4302      	orrs	r2, r0
 8013d5c:	d01e      	beq.n	8013d9c <floor+0x94>
 8013d5e:	a326      	add	r3, pc, #152	; (adr r3, 8013df8 <floor+0xf0>)
 8013d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d64:	f7ec fb1e 	bl	80003a4 <__adddf3>
 8013d68:	2200      	movs	r2, #0
 8013d6a:	2300      	movs	r3, #0
 8013d6c:	f7ec fd4e 	bl	800080c <__aeabi_dcmpgt>
 8013d70:	2800      	cmp	r0, #0
 8013d72:	d0ea      	beq.n	8013d4a <floor+0x42>
 8013d74:	2c00      	cmp	r4, #0
 8013d76:	bfbe      	ittt	lt
 8013d78:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8013d7c:	fa43 f606 	asrlt.w	r6, r3, r6
 8013d80:	19a4      	addlt	r4, r4, r6
 8013d82:	ea24 0408 	bic.w	r4, r4, r8
 8013d86:	2500      	movs	r5, #0
 8013d88:	e7df      	b.n	8013d4a <floor+0x42>
 8013d8a:	2e33      	cmp	r6, #51	; 0x33
 8013d8c:	dd0a      	ble.n	8013da4 <floor+0x9c>
 8013d8e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8013d92:	d103      	bne.n	8013d9c <floor+0x94>
 8013d94:	f7ec fb06 	bl	80003a4 <__adddf3>
 8013d98:	4607      	mov	r7, r0
 8013d9a:	460b      	mov	r3, r1
 8013d9c:	4638      	mov	r0, r7
 8013d9e:	4619      	mov	r1, r3
 8013da0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013da4:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8013da8:	f04f 32ff 	mov.w	r2, #4294967295
 8013dac:	fa22 f808 	lsr.w	r8, r2, r8
 8013db0:	ea18 0f00 	tst.w	r8, r0
 8013db4:	d0f2      	beq.n	8013d9c <floor+0x94>
 8013db6:	a310      	add	r3, pc, #64	; (adr r3, 8013df8 <floor+0xf0>)
 8013db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dbc:	f7ec faf2 	bl	80003a4 <__adddf3>
 8013dc0:	2200      	movs	r2, #0
 8013dc2:	2300      	movs	r3, #0
 8013dc4:	f7ec fd22 	bl	800080c <__aeabi_dcmpgt>
 8013dc8:	2800      	cmp	r0, #0
 8013dca:	d0be      	beq.n	8013d4a <floor+0x42>
 8013dcc:	2c00      	cmp	r4, #0
 8013dce:	da02      	bge.n	8013dd6 <floor+0xce>
 8013dd0:	2e14      	cmp	r6, #20
 8013dd2:	d103      	bne.n	8013ddc <floor+0xd4>
 8013dd4:	3401      	adds	r4, #1
 8013dd6:	ea25 0508 	bic.w	r5, r5, r8
 8013dda:	e7b6      	b.n	8013d4a <floor+0x42>
 8013ddc:	2301      	movs	r3, #1
 8013dde:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8013de2:	fa03 f606 	lsl.w	r6, r3, r6
 8013de6:	4435      	add	r5, r6
 8013de8:	42bd      	cmp	r5, r7
 8013dea:	bf38      	it	cc
 8013dec:	18e4      	addcc	r4, r4, r3
 8013dee:	e7f2      	b.n	8013dd6 <floor+0xce>
 8013df0:	2500      	movs	r5, #0
 8013df2:	462c      	mov	r4, r5
 8013df4:	e7a9      	b.n	8013d4a <floor+0x42>
 8013df6:	bf00      	nop
 8013df8:	8800759c 	.word	0x8800759c
 8013dfc:	7e37e43c 	.word	0x7e37e43c
 8013e00:	bff00000 	.word	0xbff00000
 8013e04:	000fffff 	.word	0x000fffff

08013e08 <_init>:
 8013e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e0a:	bf00      	nop
 8013e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013e0e:	bc08      	pop	{r3}
 8013e10:	469e      	mov	lr, r3
 8013e12:	4770      	bx	lr

08013e14 <_fini>:
 8013e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e16:	bf00      	nop
 8013e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013e1a:	bc08      	pop	{r3}
 8013e1c:	469e      	mov	lr, r3
 8013e1e:	4770      	bx	lr
