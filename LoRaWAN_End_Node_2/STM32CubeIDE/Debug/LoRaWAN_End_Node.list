
LoRaWAN_End_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013c38  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001020  08013d70  08013d70  00023d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014d90  08014d90  0003e5c0  2**0
                  CONTENTS
  4 .ARM          00000008  08014d90  08014d90  00024d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014d98  08014d98  0003e5c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08014d98  08014d98  00024d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08014da0  08014da0  00024da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .USER_embedded_Keys 000000c0  0803e500  0803e500  0003e500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000188  20000000  08014da8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 LW_NVM_RAM    00000e70  20008000  20008000  00048000  2**2
                  ALLOC
 11 .bss          000015b0  20000188  20000188  00040188  2**2
                  ALLOC
 12 RAM1_region   00000000  20001738  20001738  0003e5c0  2**0
                  CONTENTS
 13 RAM2_region   00000000  20009000  20009000  0003e5c0  2**0
                  CONTENTS
 14 ._user_heap_stack 00000a00  20001738  20001738  00040188  2**0
                  ALLOC
 15 .ARM.attributes 0000002a  00000000  00000000  0003e5c0  2**0
                  CONTENTS, READONLY
 16 .debug_info   00061084  00000000  00000000  0003e5ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000c526  00000000  00000000  0009f66e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    0002aa9e  00000000  00000000  000abb94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003048  00000000  00000000  000d6638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00003218  00000000  00000000  000d9680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002c939  00000000  00000000  000dc898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   000520ee  00000000  00000000  001091d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000e2646  00000000  00000000  0015b2bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000050  00000000  00000000  0023d905  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00008b84  00000000  00000000  0023d958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000188 	.word	0x20000188
 8000154:	00000000 	.word	0x00000000
 8000158:	08013d58 	.word	0x08013d58

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000018c 	.word	0x2000018c
 8000174:	08013d58 	.word	0x08013d58

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__aeabi_dmul>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000506:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800050a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050e:	bf1d      	ittte	ne
 8000510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000514:	ea94 0f0c 	teqne	r4, ip
 8000518:	ea95 0f0c 	teqne	r5, ip
 800051c:	f000 f8de 	bleq	80006dc <__aeabi_dmul+0x1dc>
 8000520:	442c      	add	r4, r5
 8000522:	ea81 0603 	eor.w	r6, r1, r3
 8000526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000532:	bf18      	it	ne
 8000534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000540:	d038      	beq.n	80005b4 <__aeabi_dmul+0xb4>
 8000542:	fba0 ce02 	umull	ip, lr, r0, r2
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000552:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000556:	f04f 0600 	mov.w	r6, #0
 800055a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055e:	f09c 0f00 	teq	ip, #0
 8000562:	bf18      	it	ne
 8000564:	f04e 0e01 	orrne.w	lr, lr, #1
 8000568:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800056c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000570:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000574:	d204      	bcs.n	8000580 <__aeabi_dmul+0x80>
 8000576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057a:	416d      	adcs	r5, r5
 800057c:	eb46 0606 	adc.w	r6, r6, r6
 8000580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800058c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000594:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000598:	bf88      	it	hi
 800059a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059e:	d81e      	bhi.n	80005de <__aeabi_dmul+0xde>
 80005a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b8:	ea46 0101 	orr.w	r1, r6, r1
 80005bc:	ea40 0002 	orr.w	r0, r0, r2
 80005c0:	ea81 0103 	eor.w	r1, r1, r3
 80005c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c8:	bfc2      	ittt	gt
 80005ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	popgt	{r4, r5, r6, pc}
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f04f 0e00 	mov.w	lr, #0
 80005dc:	3c01      	subs	r4, #1
 80005de:	f300 80ab 	bgt.w	8000738 <__aeabi_dmul+0x238>
 80005e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e6:	bfde      	ittt	le
 80005e8:	2000      	movle	r0, #0
 80005ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd70      	pople	{r4, r5, r6, pc}
 80005f0:	f1c4 0400 	rsb	r4, r4, #0
 80005f4:	3c20      	subs	r4, #32
 80005f6:	da35      	bge.n	8000664 <__aeabi_dmul+0x164>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc1b      	bgt.n	8000634 <__aeabi_dmul+0x134>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f305 	lsl.w	r3, r0, r5
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f205 	lsl.w	r2, r1, r5
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	fa21 f604 	lsr.w	r6, r1, r4
 8000624:	eb42 0106 	adc.w	r1, r2, r6
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 040c 	rsb	r4, r4, #12
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f304 	lsl.w	r3, r0, r4
 8000640:	fa20 f005 	lsr.w	r0, r0, r5
 8000644:	fa01 f204 	lsl.w	r2, r1, r4
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	f141 0100 	adc.w	r1, r1, #0
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f205 	lsl.w	r2, r0, r5
 800066c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000670:	fa20 f304 	lsr.w	r3, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea43 0302 	orr.w	r3, r3, r2
 800067c:	fa21 f004 	lsr.w	r0, r1, r4
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000684:	fa21 f204 	lsr.w	r2, r1, r4
 8000688:	ea20 0002 	bic.w	r0, r0, r2
 800068c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f094 0f00 	teq	r4, #0
 80006a0:	d10f      	bne.n	80006c2 <__aeabi_dmul+0x1c2>
 80006a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a6:	0040      	lsls	r0, r0, #1
 80006a8:	eb41 0101 	adc.w	r1, r1, r1
 80006ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3c01      	subeq	r4, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1a6>
 80006b6:	ea41 0106 	orr.w	r1, r1, r6
 80006ba:	f095 0f00 	teq	r5, #0
 80006be:	bf18      	it	ne
 80006c0:	4770      	bxne	lr
 80006c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	eb43 0303 	adc.w	r3, r3, r3
 80006cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3d01      	subeq	r5, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1c6>
 80006d6:	ea43 0306 	orr.w	r3, r3, r6
 80006da:	4770      	bx	lr
 80006dc:	ea94 0f0c 	teq	r4, ip
 80006e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e4:	bf18      	it	ne
 80006e6:	ea95 0f0c 	teqne	r5, ip
 80006ea:	d00c      	beq.n	8000706 <__aeabi_dmul+0x206>
 80006ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f0:	bf18      	it	ne
 80006f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f6:	d1d1      	bne.n	800069c <__aeabi_dmul+0x19c>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070a:	bf06      	itte	eq
 800070c:	4610      	moveq	r0, r2
 800070e:	4619      	moveq	r1, r3
 8000710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000714:	d019      	beq.n	800074a <__aeabi_dmul+0x24a>
 8000716:	ea94 0f0c 	teq	r4, ip
 800071a:	d102      	bne.n	8000722 <__aeabi_dmul+0x222>
 800071c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000720:	d113      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000722:	ea95 0f0c 	teq	r5, ip
 8000726:	d105      	bne.n	8000734 <__aeabi_dmul+0x234>
 8000728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800072c:	bf1c      	itt	ne
 800072e:	4610      	movne	r0, r2
 8000730:	4619      	movne	r1, r3
 8000732:	d10a      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000740:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000752:	bd70      	pop	{r4, r5, r6, pc}

08000754 <__aeabi_ddiv>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8a7 	bleq	80008c2 <__aeabi_ddiv+0x16e>
 8000774:	eba4 0405 	sub.w	r4, r4, r5
 8000778:	ea81 0e03 	eor.w	lr, r1, r3
 800077c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000784:	f000 8088 	beq.w	8000898 <__aeabi_ddiv+0x144>
 8000788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800078c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800079c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf08      	it	eq
 80007b0:	4296      	cmpeq	r6, r2
 80007b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ba:	d202      	bcs.n	80007c2 <__aeabi_ddiv+0x6e>
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	1ab6      	subs	r6, r6, r2
 80007c4:	eb65 0503 	sbc.w	r5, r5, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000830:	ea55 0e06 	orrs.w	lr, r5, r6
 8000834:	d018      	beq.n	8000868 <__aeabi_ddiv+0x114>
 8000836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000852:	d1c0      	bne.n	80007d6 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	d10b      	bne.n	8000872 <__aeabi_ddiv+0x11e>
 800085a:	ea41 0100 	orr.w	r1, r1, r0
 800085e:	f04f 0000 	mov.w	r0, #0
 8000862:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000866:	e7b6      	b.n	80007d6 <__aeabi_ddiv+0x82>
 8000868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800086c:	bf04      	itt	eq
 800086e:	4301      	orreq	r1, r0
 8000870:	2000      	moveq	r0, #0
 8000872:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000876:	bf88      	it	hi
 8000878:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800087c:	f63f aeaf 	bhi.w	80005de <__aeabi_dmul+0xde>
 8000880:	ebb5 0c03 	subs.w	ip, r5, r3
 8000884:	bf04      	itt	eq
 8000886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088e:	f150 0000 	adcs.w	r0, r0, #0
 8000892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800089c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a4:	bfc2      	ittt	gt
 80008a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ae:	bd70      	popgt	{r4, r5, r6, pc}
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b4:	f04f 0e00 	mov.w	lr, #0
 80008b8:	3c01      	subs	r4, #1
 80008ba:	e690      	b.n	80005de <__aeabi_dmul+0xde>
 80008bc:	ea45 0e06 	orr.w	lr, r5, r6
 80008c0:	e68d      	b.n	80005de <__aeabi_dmul+0xde>
 80008c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	bf08      	it	eq
 80008cc:	ea95 0f0c 	teqeq	r5, ip
 80008d0:	f43f af3b 	beq.w	800074a <__aeabi_dmul+0x24a>
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	d10a      	bne.n	80008f0 <__aeabi_ddiv+0x19c>
 80008da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008de:	f47f af34 	bne.w	800074a <__aeabi_dmul+0x24a>
 80008e2:	ea95 0f0c 	teq	r5, ip
 80008e6:	f47f af25 	bne.w	8000734 <__aeabi_dmul+0x234>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e72c      	b.n	800074a <__aeabi_dmul+0x24a>
 80008f0:	ea95 0f0c 	teq	r5, ip
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x1b0>
 80008f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fa:	f43f aefd 	beq.w	80006f8 <__aeabi_dmul+0x1f8>
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	e722      	b.n	800074a <__aeabi_dmul+0x24a>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	f47f aec5 	bne.w	800069c <__aeabi_dmul+0x19c>
 8000912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000916:	f47f af0d 	bne.w	8000734 <__aeabi_dmul+0x234>
 800091a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091e:	f47f aeeb 	bne.w	80006f8 <__aeabi_dmul+0x1f8>
 8000922:	e712      	b.n	800074a <__aeabi_dmul+0x24a>

08000924 <__gedf2>:
 8000924:	f04f 3cff 	mov.w	ip, #4294967295
 8000928:	e006      	b.n	8000938 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__ledf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	e002      	b.n	8000938 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__cmpdf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	f84d cd04 	str.w	ip, [sp, #-4]!
 800093c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000944:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800094e:	d01b      	beq.n	8000988 <__cmpdf2+0x54>
 8000950:	b001      	add	sp, #4
 8000952:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000956:	bf0c      	ite	eq
 8000958:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800095c:	ea91 0f03 	teqne	r1, r3
 8000960:	bf02      	ittt	eq
 8000962:	ea90 0f02 	teqeq	r0, r2
 8000966:	2000      	moveq	r0, #0
 8000968:	4770      	bxeq	lr
 800096a:	f110 0f00 	cmn.w	r0, #0
 800096e:	ea91 0f03 	teq	r1, r3
 8000972:	bf58      	it	pl
 8000974:	4299      	cmppl	r1, r3
 8000976:	bf08      	it	eq
 8000978:	4290      	cmpeq	r0, r2
 800097a:	bf2c      	ite	cs
 800097c:	17d8      	asrcs	r0, r3, #31
 800097e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000982:	f040 0001 	orr.w	r0, r0, #1
 8000986:	4770      	bx	lr
 8000988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d102      	bne.n	8000998 <__cmpdf2+0x64>
 8000992:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000996:	d107      	bne.n	80009a8 <__cmpdf2+0x74>
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	d1d6      	bne.n	8000950 <__cmpdf2+0x1c>
 80009a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009a6:	d0d3      	beq.n	8000950 <__cmpdf2+0x1c>
 80009a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdrcmple>:
 80009b0:	4684      	mov	ip, r0
 80009b2:	4610      	mov	r0, r2
 80009b4:	4662      	mov	r2, ip
 80009b6:	468c      	mov	ip, r1
 80009b8:	4619      	mov	r1, r3
 80009ba:	4663      	mov	r3, ip
 80009bc:	e000      	b.n	80009c0 <__aeabi_cdcmpeq>
 80009be:	bf00      	nop

080009c0 <__aeabi_cdcmpeq>:
 80009c0:	b501      	push	{r0, lr}
 80009c2:	f7ff ffb7 	bl	8000934 <__cmpdf2>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	bf48      	it	mi
 80009ca:	f110 0f00 	cmnmi.w	r0, #0
 80009ce:	bd01      	pop	{r0, pc}

080009d0 <__aeabi_dcmpeq>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff fff4 	bl	80009c0 <__aeabi_cdcmpeq>
 80009d8:	bf0c      	ite	eq
 80009da:	2001      	moveq	r0, #1
 80009dc:	2000      	movne	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmplt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffea 	bl	80009c0 <__aeabi_cdcmpeq>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmple>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffe0 	bl	80009c0 <__aeabi_cdcmpeq>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpge>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffce 	bl	80009b0 <__aeabi_cdrcmple>
 8000a14:	bf94      	ite	ls
 8000a16:	2001      	movls	r0, #1
 8000a18:	2000      	movhi	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpgt>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffc4 	bl	80009b0 <__aeabi_cdrcmple>
 8000a28:	bf34      	ite	cc
 8000a2a:	2001      	movcc	r0, #1
 8000a2c:	2000      	movcs	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_d2iz>:
 8000a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a3c:	d215      	bcs.n	8000a6a <__aeabi_d2iz+0x36>
 8000a3e:	d511      	bpl.n	8000a64 <__aeabi_d2iz+0x30>
 8000a40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a48:	d912      	bls.n	8000a70 <__aeabi_d2iz+0x3c>
 8000a4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d105      	bne.n	8000a7c <__aeabi_d2iz+0x48>
 8000a70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a74:	bf08      	it	eq
 8000a76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_frsub>:
 8000b24:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b28:	e002      	b.n	8000b30 <__addsf3>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_fsub>:
 8000b2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b30 <__addsf3>:
 8000b30:	0042      	lsls	r2, r0, #1
 8000b32:	bf1f      	itttt	ne
 8000b34:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b38:	ea92 0f03 	teqne	r2, r3
 8000b3c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b40:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b44:	d06a      	beq.n	8000c1c <__addsf3+0xec>
 8000b46:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b4e:	bfc1      	itttt	gt
 8000b50:	18d2      	addgt	r2, r2, r3
 8000b52:	4041      	eorgt	r1, r0
 8000b54:	4048      	eorgt	r0, r1
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	bfb8      	it	lt
 8000b5a:	425b      	neglt	r3, r3
 8000b5c:	2b19      	cmp	r3, #25
 8000b5e:	bf88      	it	hi
 8000b60:	4770      	bxhi	lr
 8000b62:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b6e:	bf18      	it	ne
 8000b70:	4240      	negne	r0, r0
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b7e:	bf18      	it	ne
 8000b80:	4249      	negne	r1, r1
 8000b82:	ea92 0f03 	teq	r2, r3
 8000b86:	d03f      	beq.n	8000c08 <__addsf3+0xd8>
 8000b88:	f1a2 0201 	sub.w	r2, r2, #1
 8000b8c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b90:	eb10 000c 	adds.w	r0, r0, ip
 8000b94:	f1c3 0320 	rsb	r3, r3, #32
 8000b98:	fa01 f103 	lsl.w	r1, r1, r3
 8000b9c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba0:	d502      	bpl.n	8000ba8 <__addsf3+0x78>
 8000ba2:	4249      	negs	r1, r1
 8000ba4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ba8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bac:	d313      	bcc.n	8000bd6 <__addsf3+0xa6>
 8000bae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb2:	d306      	bcc.n	8000bc2 <__addsf3+0x92>
 8000bb4:	0840      	lsrs	r0, r0, #1
 8000bb6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bba:	f102 0201 	add.w	r2, r2, #1
 8000bbe:	2afe      	cmp	r2, #254	; 0xfe
 8000bc0:	d251      	bcs.n	8000c66 <__addsf3+0x136>
 8000bc2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bca:	bf08      	it	eq
 8000bcc:	f020 0001 	biceq.w	r0, r0, #1
 8000bd0:	ea40 0003 	orr.w	r0, r0, r3
 8000bd4:	4770      	bx	lr
 8000bd6:	0049      	lsls	r1, r1, #1
 8000bd8:	eb40 0000 	adc.w	r0, r0, r0
 8000bdc:	3a01      	subs	r2, #1
 8000bde:	bf28      	it	cs
 8000be0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be4:	d2ed      	bcs.n	8000bc2 <__addsf3+0x92>
 8000be6:	fab0 fc80 	clz	ip, r0
 8000bea:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bee:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bf6:	bfaa      	itet	ge
 8000bf8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bfc:	4252      	neglt	r2, r2
 8000bfe:	4318      	orrge	r0, r3
 8000c00:	bfbc      	itt	lt
 8000c02:	40d0      	lsrlt	r0, r2
 8000c04:	4318      	orrlt	r0, r3
 8000c06:	4770      	bx	lr
 8000c08:	f092 0f00 	teq	r2, #0
 8000c0c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c10:	bf06      	itte	eq
 8000c12:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c16:	3201      	addeq	r2, #1
 8000c18:	3b01      	subne	r3, #1
 8000c1a:	e7b5      	b.n	8000b88 <__addsf3+0x58>
 8000c1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c24:	bf18      	it	ne
 8000c26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2a:	d021      	beq.n	8000c70 <__addsf3+0x140>
 8000c2c:	ea92 0f03 	teq	r2, r3
 8000c30:	d004      	beq.n	8000c3c <__addsf3+0x10c>
 8000c32:	f092 0f00 	teq	r2, #0
 8000c36:	bf08      	it	eq
 8000c38:	4608      	moveq	r0, r1
 8000c3a:	4770      	bx	lr
 8000c3c:	ea90 0f01 	teq	r0, r1
 8000c40:	bf1c      	itt	ne
 8000c42:	2000      	movne	r0, #0
 8000c44:	4770      	bxne	lr
 8000c46:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4a:	d104      	bne.n	8000c56 <__addsf3+0x126>
 8000c4c:	0040      	lsls	r0, r0, #1
 8000c4e:	bf28      	it	cs
 8000c50:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c54:	4770      	bx	lr
 8000c56:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5a:	bf3c      	itt	cc
 8000c5c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c60:	4770      	bxcc	lr
 8000c62:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c66:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6e:	4770      	bx	lr
 8000c70:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c74:	bf16      	itet	ne
 8000c76:	4608      	movne	r0, r1
 8000c78:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c7c:	4601      	movne	r1, r0
 8000c7e:	0242      	lsls	r2, r0, #9
 8000c80:	bf06      	itte	eq
 8000c82:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c86:	ea90 0f01 	teqeq	r0, r1
 8000c8a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c8e:	4770      	bx	lr

08000c90 <__aeabi_ui2f>:
 8000c90:	f04f 0300 	mov.w	r3, #0
 8000c94:	e004      	b.n	8000ca0 <__aeabi_i2f+0x8>
 8000c96:	bf00      	nop

08000c98 <__aeabi_i2f>:
 8000c98:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c9c:	bf48      	it	mi
 8000c9e:	4240      	negmi	r0, r0
 8000ca0:	ea5f 0c00 	movs.w	ip, r0
 8000ca4:	bf08      	it	eq
 8000ca6:	4770      	bxeq	lr
 8000ca8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cac:	4601      	mov	r1, r0
 8000cae:	f04f 0000 	mov.w	r0, #0
 8000cb2:	e01c      	b.n	8000cee <__aeabi_l2f+0x2a>

08000cb4 <__aeabi_ul2f>:
 8000cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e00a      	b.n	8000cd8 <__aeabi_l2f+0x14>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_l2f>:
 8000cc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd0:	d502      	bpl.n	8000cd8 <__aeabi_l2f+0x14>
 8000cd2:	4240      	negs	r0, r0
 8000cd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd8:	ea5f 0c01 	movs.w	ip, r1
 8000cdc:	bf02      	ittt	eq
 8000cde:	4684      	moveq	ip, r0
 8000ce0:	4601      	moveq	r1, r0
 8000ce2:	2000      	moveq	r0, #0
 8000ce4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ce8:	bf08      	it	eq
 8000cea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf2:	fabc f28c 	clz	r2, ip
 8000cf6:	3a08      	subs	r2, #8
 8000cf8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cfc:	db10      	blt.n	8000d20 <__aeabi_l2f+0x5c>
 8000cfe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d02:	4463      	add	r3, ip
 8000d04:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d08:	f1c2 0220 	rsb	r2, r2, #32
 8000d0c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d10:	fa20 f202 	lsr.w	r2, r0, r2
 8000d14:	eb43 0002 	adc.w	r0, r3, r2
 8000d18:	bf08      	it	eq
 8000d1a:	f020 0001 	biceq.w	r0, r0, #1
 8000d1e:	4770      	bx	lr
 8000d20:	f102 0220 	add.w	r2, r2, #32
 8000d24:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d28:	f1c2 0220 	rsb	r2, r2, #32
 8000d2c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d30:	fa21 f202 	lsr.w	r2, r1, r2
 8000d34:	eb43 0002 	adc.w	r0, r3, r2
 8000d38:	bf08      	it	eq
 8000d3a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d3e:	4770      	bx	lr

08000d40 <__aeabi_fmul>:
 8000d40:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d44:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d48:	bf1e      	ittt	ne
 8000d4a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d4e:	ea92 0f0c 	teqne	r2, ip
 8000d52:	ea93 0f0c 	teqne	r3, ip
 8000d56:	d06f      	beq.n	8000e38 <__aeabi_fmul+0xf8>
 8000d58:	441a      	add	r2, r3
 8000d5a:	ea80 0c01 	eor.w	ip, r0, r1
 8000d5e:	0240      	lsls	r0, r0, #9
 8000d60:	bf18      	it	ne
 8000d62:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d66:	d01e      	beq.n	8000da6 <__aeabi_fmul+0x66>
 8000d68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d6c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d70:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d74:	fba0 3101 	umull	r3, r1, r0, r1
 8000d78:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d7c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d80:	bf3e      	ittt	cc
 8000d82:	0049      	lslcc	r1, r1, #1
 8000d84:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d88:	005b      	lslcc	r3, r3, #1
 8000d8a:	ea40 0001 	orr.w	r0, r0, r1
 8000d8e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d92:	2afd      	cmp	r2, #253	; 0xfd
 8000d94:	d81d      	bhi.n	8000dd2 <__aeabi_fmul+0x92>
 8000d96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d9e:	bf08      	it	eq
 8000da0:	f020 0001 	biceq.w	r0, r0, #1
 8000da4:	4770      	bx	lr
 8000da6:	f090 0f00 	teq	r0, #0
 8000daa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dae:	bf08      	it	eq
 8000db0:	0249      	lsleq	r1, r1, #9
 8000db2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dba:	3a7f      	subs	r2, #127	; 0x7f
 8000dbc:	bfc2      	ittt	gt
 8000dbe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dc6:	4770      	bxgt	lr
 8000dc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dcc:	f04f 0300 	mov.w	r3, #0
 8000dd0:	3a01      	subs	r2, #1
 8000dd2:	dc5d      	bgt.n	8000e90 <__aeabi_fmul+0x150>
 8000dd4:	f112 0f19 	cmn.w	r2, #25
 8000dd8:	bfdc      	itt	le
 8000dda:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dde:	4770      	bxle	lr
 8000de0:	f1c2 0200 	rsb	r2, r2, #0
 8000de4:	0041      	lsls	r1, r0, #1
 8000de6:	fa21 f102 	lsr.w	r1, r1, r2
 8000dea:	f1c2 0220 	rsb	r2, r2, #32
 8000dee:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000df6:	f140 0000 	adc.w	r0, r0, #0
 8000dfa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dfe:	bf08      	it	eq
 8000e00:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e04:	4770      	bx	lr
 8000e06:	f092 0f00 	teq	r2, #0
 8000e0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e0e:	bf02      	ittt	eq
 8000e10:	0040      	lsleq	r0, r0, #1
 8000e12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e16:	3a01      	subeq	r2, #1
 8000e18:	d0f9      	beq.n	8000e0e <__aeabi_fmul+0xce>
 8000e1a:	ea40 000c 	orr.w	r0, r0, ip
 8000e1e:	f093 0f00 	teq	r3, #0
 8000e22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e26:	bf02      	ittt	eq
 8000e28:	0049      	lsleq	r1, r1, #1
 8000e2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e2e:	3b01      	subeq	r3, #1
 8000e30:	d0f9      	beq.n	8000e26 <__aeabi_fmul+0xe6>
 8000e32:	ea41 010c 	orr.w	r1, r1, ip
 8000e36:	e78f      	b.n	8000d58 <__aeabi_fmul+0x18>
 8000e38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	bf18      	it	ne
 8000e42:	ea93 0f0c 	teqne	r3, ip
 8000e46:	d00a      	beq.n	8000e5e <__aeabi_fmul+0x11e>
 8000e48:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e4c:	bf18      	it	ne
 8000e4e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e52:	d1d8      	bne.n	8000e06 <__aeabi_fmul+0xc6>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e5c:	4770      	bx	lr
 8000e5e:	f090 0f00 	teq	r0, #0
 8000e62:	bf17      	itett	ne
 8000e64:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e68:	4608      	moveq	r0, r1
 8000e6a:	f091 0f00 	teqne	r1, #0
 8000e6e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e72:	d014      	beq.n	8000e9e <__aeabi_fmul+0x15e>
 8000e74:	ea92 0f0c 	teq	r2, ip
 8000e78:	d101      	bne.n	8000e7e <__aeabi_fmul+0x13e>
 8000e7a:	0242      	lsls	r2, r0, #9
 8000e7c:	d10f      	bne.n	8000e9e <__aeabi_fmul+0x15e>
 8000e7e:	ea93 0f0c 	teq	r3, ip
 8000e82:	d103      	bne.n	8000e8c <__aeabi_fmul+0x14c>
 8000e84:	024b      	lsls	r3, r1, #9
 8000e86:	bf18      	it	ne
 8000e88:	4608      	movne	r0, r1
 8000e8a:	d108      	bne.n	8000e9e <__aeabi_fmul+0x15e>
 8000e8c:	ea80 0001 	eor.w	r0, r0, r1
 8000e90:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e9c:	4770      	bx	lr
 8000e9e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ea6:	4770      	bx	lr

08000ea8 <__aeabi_fdiv>:
 8000ea8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb0:	bf1e      	ittt	ne
 8000eb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eb6:	ea92 0f0c 	teqne	r2, ip
 8000eba:	ea93 0f0c 	teqne	r3, ip
 8000ebe:	d069      	beq.n	8000f94 <__aeabi_fdiv+0xec>
 8000ec0:	eba2 0203 	sub.w	r2, r2, r3
 8000ec4:	ea80 0c01 	eor.w	ip, r0, r1
 8000ec8:	0249      	lsls	r1, r1, #9
 8000eca:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ece:	d037      	beq.n	8000f40 <__aeabi_fdiv+0x98>
 8000ed0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ed8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000edc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	bf38      	it	cc
 8000ee4:	005b      	lslcc	r3, r3, #1
 8000ee6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eea:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	bf24      	itt	cs
 8000ef2:	1a5b      	subcs	r3, r3, r1
 8000ef4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ef8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000efc:	bf24      	itt	cs
 8000efe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f02:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f06:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0a:	bf24      	itt	cs
 8000f0c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f10:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f14:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f18:	bf24      	itt	cs
 8000f1a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f1e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f22:	011b      	lsls	r3, r3, #4
 8000f24:	bf18      	it	ne
 8000f26:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2a:	d1e0      	bne.n	8000eee <__aeabi_fdiv+0x46>
 8000f2c:	2afd      	cmp	r2, #253	; 0xfd
 8000f2e:	f63f af50 	bhi.w	8000dd2 <__aeabi_fmul+0x92>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f38:	bf08      	it	eq
 8000f3a:	f020 0001 	biceq.w	r0, r0, #1
 8000f3e:	4770      	bx	lr
 8000f40:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f44:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f48:	327f      	adds	r2, #127	; 0x7f
 8000f4a:	bfc2      	ittt	gt
 8000f4c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f50:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f54:	4770      	bxgt	lr
 8000f56:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5a:	f04f 0300 	mov.w	r3, #0
 8000f5e:	3a01      	subs	r2, #1
 8000f60:	e737      	b.n	8000dd2 <__aeabi_fmul+0x92>
 8000f62:	f092 0f00 	teq	r2, #0
 8000f66:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6a:	bf02      	ittt	eq
 8000f6c:	0040      	lsleq	r0, r0, #1
 8000f6e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f72:	3a01      	subeq	r2, #1
 8000f74:	d0f9      	beq.n	8000f6a <__aeabi_fdiv+0xc2>
 8000f76:	ea40 000c 	orr.w	r0, r0, ip
 8000f7a:	f093 0f00 	teq	r3, #0
 8000f7e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f82:	bf02      	ittt	eq
 8000f84:	0049      	lsleq	r1, r1, #1
 8000f86:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8a:	3b01      	subeq	r3, #1
 8000f8c:	d0f9      	beq.n	8000f82 <__aeabi_fdiv+0xda>
 8000f8e:	ea41 010c 	orr.w	r1, r1, ip
 8000f92:	e795      	b.n	8000ec0 <__aeabi_fdiv+0x18>
 8000f94:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f98:	ea92 0f0c 	teq	r2, ip
 8000f9c:	d108      	bne.n	8000fb0 <__aeabi_fdiv+0x108>
 8000f9e:	0242      	lsls	r2, r0, #9
 8000fa0:	f47f af7d 	bne.w	8000e9e <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	f47f af70 	bne.w	8000e8c <__aeabi_fmul+0x14c>
 8000fac:	4608      	mov	r0, r1
 8000fae:	e776      	b.n	8000e9e <__aeabi_fmul+0x15e>
 8000fb0:	ea93 0f0c 	teq	r3, ip
 8000fb4:	d104      	bne.n	8000fc0 <__aeabi_fdiv+0x118>
 8000fb6:	024b      	lsls	r3, r1, #9
 8000fb8:	f43f af4c 	beq.w	8000e54 <__aeabi_fmul+0x114>
 8000fbc:	4608      	mov	r0, r1
 8000fbe:	e76e      	b.n	8000e9e <__aeabi_fmul+0x15e>
 8000fc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc4:	bf18      	it	ne
 8000fc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fca:	d1ca      	bne.n	8000f62 <__aeabi_fdiv+0xba>
 8000fcc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd0:	f47f af5c 	bne.w	8000e8c <__aeabi_fmul+0x14c>
 8000fd4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fd8:	f47f af3c 	bne.w	8000e54 <__aeabi_fmul+0x114>
 8000fdc:	e75f      	b.n	8000e9e <__aeabi_fmul+0x15e>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_f2iz>:
 8000fe0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fe8:	d30f      	bcc.n	800100a <__aeabi_f2iz+0x2a>
 8000fea:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ff2:	d90d      	bls.n	8001010 <__aeabi_f2iz+0x30>
 8000ff4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ff8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ffc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001000:	fa23 f002 	lsr.w	r0, r3, r2
 8001004:	bf18      	it	ne
 8001006:	4240      	negne	r0, r0
 8001008:	4770      	bx	lr
 800100a:	f04f 0000 	mov.w	r0, #0
 800100e:	4770      	bx	lr
 8001010:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001014:	d101      	bne.n	800101a <__aeabi_f2iz+0x3a>
 8001016:	0242      	lsls	r2, r0, #9
 8001018:	d105      	bne.n	8001026 <__aeabi_f2iz+0x46>
 800101a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800101e:	bf08      	it	eq
 8001020:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001024:	4770      	bx	lr
 8001026:	f04f 0000 	mov.w	r0, #0
 800102a:	4770      	bx	lr

0800102c <__aeabi_ldivmod>:
 800102c:	b97b      	cbnz	r3, 800104e <__aeabi_ldivmod+0x22>
 800102e:	b972      	cbnz	r2, 800104e <__aeabi_ldivmod+0x22>
 8001030:	2900      	cmp	r1, #0
 8001032:	bfbe      	ittt	lt
 8001034:	2000      	movlt	r0, #0
 8001036:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800103a:	e006      	blt.n	800104a <__aeabi_ldivmod+0x1e>
 800103c:	bf08      	it	eq
 800103e:	2800      	cmpeq	r0, #0
 8001040:	bf1c      	itt	ne
 8001042:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8001046:	f04f 30ff 	movne.w	r0, #4294967295
 800104a:	f000 b9bf 	b.w	80013cc <__aeabi_idiv0>
 800104e:	f1ad 0c08 	sub.w	ip, sp, #8
 8001052:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001056:	2900      	cmp	r1, #0
 8001058:	db09      	blt.n	800106e <__aeabi_ldivmod+0x42>
 800105a:	2b00      	cmp	r3, #0
 800105c:	db1a      	blt.n	8001094 <__aeabi_ldivmod+0x68>
 800105e:	f000 f84d 	bl	80010fc <__udivmoddi4>
 8001062:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001066:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800106a:	b004      	add	sp, #16
 800106c:	4770      	bx	lr
 800106e:	4240      	negs	r0, r0
 8001070:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001074:	2b00      	cmp	r3, #0
 8001076:	db1b      	blt.n	80010b0 <__aeabi_ldivmod+0x84>
 8001078:	f000 f840 	bl	80010fc <__udivmoddi4>
 800107c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001080:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001084:	b004      	add	sp, #16
 8001086:	4240      	negs	r0, r0
 8001088:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800108c:	4252      	negs	r2, r2
 800108e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001092:	4770      	bx	lr
 8001094:	4252      	negs	r2, r2
 8001096:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800109a:	f000 f82f 	bl	80010fc <__udivmoddi4>
 800109e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010a6:	b004      	add	sp, #16
 80010a8:	4240      	negs	r0, r0
 80010aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010ae:	4770      	bx	lr
 80010b0:	4252      	negs	r2, r2
 80010b2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010b6:	f000 f821 	bl	80010fc <__udivmoddi4>
 80010ba:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010c2:	b004      	add	sp, #16
 80010c4:	4252      	negs	r2, r2
 80010c6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010ca:	4770      	bx	lr

080010cc <__aeabi_uldivmod>:
 80010cc:	b953      	cbnz	r3, 80010e4 <__aeabi_uldivmod+0x18>
 80010ce:	b94a      	cbnz	r2, 80010e4 <__aeabi_uldivmod+0x18>
 80010d0:	2900      	cmp	r1, #0
 80010d2:	bf08      	it	eq
 80010d4:	2800      	cmpeq	r0, #0
 80010d6:	bf1c      	itt	ne
 80010d8:	f04f 31ff 	movne.w	r1, #4294967295
 80010dc:	f04f 30ff 	movne.w	r0, #4294967295
 80010e0:	f000 b974 	b.w	80013cc <__aeabi_idiv0>
 80010e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80010e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010ec:	f000 f806 	bl	80010fc <__udivmoddi4>
 80010f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010f8:	b004      	add	sp, #16
 80010fa:	4770      	bx	lr

080010fc <__udivmoddi4>:
 80010fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001100:	9e08      	ldr	r6, [sp, #32]
 8001102:	460d      	mov	r5, r1
 8001104:	4604      	mov	r4, r0
 8001106:	4688      	mov	r8, r1
 8001108:	2b00      	cmp	r3, #0
 800110a:	d14d      	bne.n	80011a8 <__udivmoddi4+0xac>
 800110c:	428a      	cmp	r2, r1
 800110e:	4694      	mov	ip, r2
 8001110:	d968      	bls.n	80011e4 <__udivmoddi4+0xe8>
 8001112:	fab2 f282 	clz	r2, r2
 8001116:	b152      	cbz	r2, 800112e <__udivmoddi4+0x32>
 8001118:	fa01 f302 	lsl.w	r3, r1, r2
 800111c:	f1c2 0120 	rsb	r1, r2, #32
 8001120:	fa20 f101 	lsr.w	r1, r0, r1
 8001124:	fa0c fc02 	lsl.w	ip, ip, r2
 8001128:	ea41 0803 	orr.w	r8, r1, r3
 800112c:	4094      	lsls	r4, r2
 800112e:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8001132:	0c21      	lsrs	r1, r4, #16
 8001134:	fbb8 fef5 	udiv	lr, r8, r5
 8001138:	fa1f f78c 	uxth.w	r7, ip
 800113c:	fb05 831e 	mls	r3, r5, lr, r8
 8001140:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8001144:	fb0e f107 	mul.w	r1, lr, r7
 8001148:	4299      	cmp	r1, r3
 800114a:	d90b      	bls.n	8001164 <__udivmoddi4+0x68>
 800114c:	eb1c 0303 	adds.w	r3, ip, r3
 8001150:	f10e 30ff 	add.w	r0, lr, #4294967295
 8001154:	f080 811e 	bcs.w	8001394 <__udivmoddi4+0x298>
 8001158:	4299      	cmp	r1, r3
 800115a:	f240 811b 	bls.w	8001394 <__udivmoddi4+0x298>
 800115e:	f1ae 0e02 	sub.w	lr, lr, #2
 8001162:	4463      	add	r3, ip
 8001164:	1a5b      	subs	r3, r3, r1
 8001166:	b2a4      	uxth	r4, r4
 8001168:	fbb3 f0f5 	udiv	r0, r3, r5
 800116c:	fb05 3310 	mls	r3, r5, r0, r3
 8001170:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001174:	fb00 f707 	mul.w	r7, r0, r7
 8001178:	42a7      	cmp	r7, r4
 800117a:	d90a      	bls.n	8001192 <__udivmoddi4+0x96>
 800117c:	eb1c 0404 	adds.w	r4, ip, r4
 8001180:	f100 33ff 	add.w	r3, r0, #4294967295
 8001184:	f080 8108 	bcs.w	8001398 <__udivmoddi4+0x29c>
 8001188:	42a7      	cmp	r7, r4
 800118a:	f240 8105 	bls.w	8001398 <__udivmoddi4+0x29c>
 800118e:	4464      	add	r4, ip
 8001190:	3802      	subs	r0, #2
 8001192:	1be4      	subs	r4, r4, r7
 8001194:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8001198:	2100      	movs	r1, #0
 800119a:	b11e      	cbz	r6, 80011a4 <__udivmoddi4+0xa8>
 800119c:	40d4      	lsrs	r4, r2
 800119e:	2300      	movs	r3, #0
 80011a0:	e9c6 4300 	strd	r4, r3, [r6]
 80011a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011a8:	428b      	cmp	r3, r1
 80011aa:	d908      	bls.n	80011be <__udivmoddi4+0xc2>
 80011ac:	2e00      	cmp	r6, #0
 80011ae:	f000 80ee 	beq.w	800138e <__udivmoddi4+0x292>
 80011b2:	2100      	movs	r1, #0
 80011b4:	e9c6 0500 	strd	r0, r5, [r6]
 80011b8:	4608      	mov	r0, r1
 80011ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011be:	fab3 f183 	clz	r1, r3
 80011c2:	2900      	cmp	r1, #0
 80011c4:	d14a      	bne.n	800125c <__udivmoddi4+0x160>
 80011c6:	42ab      	cmp	r3, r5
 80011c8:	d302      	bcc.n	80011d0 <__udivmoddi4+0xd4>
 80011ca:	4282      	cmp	r2, r0
 80011cc:	f200 80f9 	bhi.w	80013c2 <__udivmoddi4+0x2c6>
 80011d0:	1a84      	subs	r4, r0, r2
 80011d2:	eb65 0303 	sbc.w	r3, r5, r3
 80011d6:	2001      	movs	r0, #1
 80011d8:	4698      	mov	r8, r3
 80011da:	2e00      	cmp	r6, #0
 80011dc:	d0e2      	beq.n	80011a4 <__udivmoddi4+0xa8>
 80011de:	e9c6 4800 	strd	r4, r8, [r6]
 80011e2:	e7df      	b.n	80011a4 <__udivmoddi4+0xa8>
 80011e4:	b902      	cbnz	r2, 80011e8 <__udivmoddi4+0xec>
 80011e6:	deff      	udf	#255	; 0xff
 80011e8:	fab2 f282 	clz	r2, r2
 80011ec:	2a00      	cmp	r2, #0
 80011ee:	f040 8091 	bne.w	8001314 <__udivmoddi4+0x218>
 80011f2:	eba1 050c 	sub.w	r5, r1, ip
 80011f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011fa:	fa1f fe8c 	uxth.w	lr, ip
 80011fe:	2101      	movs	r1, #1
 8001200:	fbb5 f3f7 	udiv	r3, r5, r7
 8001204:	fb07 5013 	mls	r0, r7, r3, r5
 8001208:	0c25      	lsrs	r5, r4, #16
 800120a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800120e:	fb0e f003 	mul.w	r0, lr, r3
 8001212:	42a8      	cmp	r0, r5
 8001214:	d908      	bls.n	8001228 <__udivmoddi4+0x12c>
 8001216:	eb1c 0505 	adds.w	r5, ip, r5
 800121a:	f103 38ff 	add.w	r8, r3, #4294967295
 800121e:	d202      	bcs.n	8001226 <__udivmoddi4+0x12a>
 8001220:	42a8      	cmp	r0, r5
 8001222:	f200 80cb 	bhi.w	80013bc <__udivmoddi4+0x2c0>
 8001226:	4643      	mov	r3, r8
 8001228:	1a2d      	subs	r5, r5, r0
 800122a:	b2a4      	uxth	r4, r4
 800122c:	fbb5 f0f7 	udiv	r0, r5, r7
 8001230:	fb07 5510 	mls	r5, r7, r0, r5
 8001234:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001238:	fb0e fe00 	mul.w	lr, lr, r0
 800123c:	45a6      	cmp	lr, r4
 800123e:	d908      	bls.n	8001252 <__udivmoddi4+0x156>
 8001240:	eb1c 0404 	adds.w	r4, ip, r4
 8001244:	f100 35ff 	add.w	r5, r0, #4294967295
 8001248:	d202      	bcs.n	8001250 <__udivmoddi4+0x154>
 800124a:	45a6      	cmp	lr, r4
 800124c:	f200 80bb 	bhi.w	80013c6 <__udivmoddi4+0x2ca>
 8001250:	4628      	mov	r0, r5
 8001252:	eba4 040e 	sub.w	r4, r4, lr
 8001256:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800125a:	e79e      	b.n	800119a <__udivmoddi4+0x9e>
 800125c:	f1c1 0720 	rsb	r7, r1, #32
 8001260:	408b      	lsls	r3, r1
 8001262:	fa22 fc07 	lsr.w	ip, r2, r7
 8001266:	ea4c 0c03 	orr.w	ip, ip, r3
 800126a:	fa20 f407 	lsr.w	r4, r0, r7
 800126e:	fa05 f301 	lsl.w	r3, r5, r1
 8001272:	431c      	orrs	r4, r3
 8001274:	40fd      	lsrs	r5, r7
 8001276:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800127a:	fa00 f301 	lsl.w	r3, r0, r1
 800127e:	fbb5 f8f9 	udiv	r8, r5, r9
 8001282:	0c20      	lsrs	r0, r4, #16
 8001284:	fa1f fe8c 	uxth.w	lr, ip
 8001288:	fb09 5518 	mls	r5, r9, r8, r5
 800128c:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8001290:	fb08 f00e 	mul.w	r0, r8, lr
 8001294:	42a8      	cmp	r0, r5
 8001296:	fa02 f201 	lsl.w	r2, r2, r1
 800129a:	d90b      	bls.n	80012b4 <__udivmoddi4+0x1b8>
 800129c:	eb1c 0505 	adds.w	r5, ip, r5
 80012a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80012a4:	f080 8088 	bcs.w	80013b8 <__udivmoddi4+0x2bc>
 80012a8:	42a8      	cmp	r0, r5
 80012aa:	f240 8085 	bls.w	80013b8 <__udivmoddi4+0x2bc>
 80012ae:	f1a8 0802 	sub.w	r8, r8, #2
 80012b2:	4465      	add	r5, ip
 80012b4:	1a2d      	subs	r5, r5, r0
 80012b6:	b2a4      	uxth	r4, r4
 80012b8:	fbb5 f0f9 	udiv	r0, r5, r9
 80012bc:	fb09 5510 	mls	r5, r9, r0, r5
 80012c0:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80012c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80012c8:	45ae      	cmp	lr, r5
 80012ca:	d908      	bls.n	80012de <__udivmoddi4+0x1e2>
 80012cc:	eb1c 0505 	adds.w	r5, ip, r5
 80012d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80012d4:	d26c      	bcs.n	80013b0 <__udivmoddi4+0x2b4>
 80012d6:	45ae      	cmp	lr, r5
 80012d8:	d96a      	bls.n	80013b0 <__udivmoddi4+0x2b4>
 80012da:	3802      	subs	r0, #2
 80012dc:	4465      	add	r5, ip
 80012de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80012e2:	fba0 9402 	umull	r9, r4, r0, r2
 80012e6:	eba5 050e 	sub.w	r5, r5, lr
 80012ea:	42a5      	cmp	r5, r4
 80012ec:	46c8      	mov	r8, r9
 80012ee:	46a6      	mov	lr, r4
 80012f0:	d356      	bcc.n	80013a0 <__udivmoddi4+0x2a4>
 80012f2:	d053      	beq.n	800139c <__udivmoddi4+0x2a0>
 80012f4:	b15e      	cbz	r6, 800130e <__udivmoddi4+0x212>
 80012f6:	ebb3 0208 	subs.w	r2, r3, r8
 80012fa:	eb65 050e 	sbc.w	r5, r5, lr
 80012fe:	fa05 f707 	lsl.w	r7, r5, r7
 8001302:	fa22 f301 	lsr.w	r3, r2, r1
 8001306:	40cd      	lsrs	r5, r1
 8001308:	431f      	orrs	r7, r3
 800130a:	e9c6 7500 	strd	r7, r5, [r6]
 800130e:	2100      	movs	r1, #0
 8001310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001314:	f1c2 0320 	rsb	r3, r2, #32
 8001318:	fa20 f103 	lsr.w	r1, r0, r3
 800131c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001320:	fa25 f303 	lsr.w	r3, r5, r3
 8001324:	4095      	lsls	r5, r2
 8001326:	430d      	orrs	r5, r1
 8001328:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800132c:	fa1f fe8c 	uxth.w	lr, ip
 8001330:	fbb3 f1f7 	udiv	r1, r3, r7
 8001334:	fb07 3011 	mls	r0, r7, r1, r3
 8001338:	0c2b      	lsrs	r3, r5, #16
 800133a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800133e:	fb01 f00e 	mul.w	r0, r1, lr
 8001342:	4298      	cmp	r0, r3
 8001344:	fa04 f402 	lsl.w	r4, r4, r2
 8001348:	d908      	bls.n	800135c <__udivmoddi4+0x260>
 800134a:	eb1c 0303 	adds.w	r3, ip, r3
 800134e:	f101 38ff 	add.w	r8, r1, #4294967295
 8001352:	d22f      	bcs.n	80013b4 <__udivmoddi4+0x2b8>
 8001354:	4298      	cmp	r0, r3
 8001356:	d92d      	bls.n	80013b4 <__udivmoddi4+0x2b8>
 8001358:	3902      	subs	r1, #2
 800135a:	4463      	add	r3, ip
 800135c:	1a1b      	subs	r3, r3, r0
 800135e:	b2ad      	uxth	r5, r5
 8001360:	fbb3 f0f7 	udiv	r0, r3, r7
 8001364:	fb07 3310 	mls	r3, r7, r0, r3
 8001368:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800136c:	fb00 f30e 	mul.w	r3, r0, lr
 8001370:	42ab      	cmp	r3, r5
 8001372:	d908      	bls.n	8001386 <__udivmoddi4+0x28a>
 8001374:	eb1c 0505 	adds.w	r5, ip, r5
 8001378:	f100 38ff 	add.w	r8, r0, #4294967295
 800137c:	d216      	bcs.n	80013ac <__udivmoddi4+0x2b0>
 800137e:	42ab      	cmp	r3, r5
 8001380:	d914      	bls.n	80013ac <__udivmoddi4+0x2b0>
 8001382:	3802      	subs	r0, #2
 8001384:	4465      	add	r5, ip
 8001386:	1aed      	subs	r5, r5, r3
 8001388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800138c:	e738      	b.n	8001200 <__udivmoddi4+0x104>
 800138e:	4631      	mov	r1, r6
 8001390:	4630      	mov	r0, r6
 8001392:	e707      	b.n	80011a4 <__udivmoddi4+0xa8>
 8001394:	4686      	mov	lr, r0
 8001396:	e6e5      	b.n	8001164 <__udivmoddi4+0x68>
 8001398:	4618      	mov	r0, r3
 800139a:	e6fa      	b.n	8001192 <__udivmoddi4+0x96>
 800139c:	454b      	cmp	r3, r9
 800139e:	d2a9      	bcs.n	80012f4 <__udivmoddi4+0x1f8>
 80013a0:	ebb9 0802 	subs.w	r8, r9, r2
 80013a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80013a8:	3801      	subs	r0, #1
 80013aa:	e7a3      	b.n	80012f4 <__udivmoddi4+0x1f8>
 80013ac:	4640      	mov	r0, r8
 80013ae:	e7ea      	b.n	8001386 <__udivmoddi4+0x28a>
 80013b0:	4620      	mov	r0, r4
 80013b2:	e794      	b.n	80012de <__udivmoddi4+0x1e2>
 80013b4:	4641      	mov	r1, r8
 80013b6:	e7d1      	b.n	800135c <__udivmoddi4+0x260>
 80013b8:	46d0      	mov	r8, sl
 80013ba:	e77b      	b.n	80012b4 <__udivmoddi4+0x1b8>
 80013bc:	3b02      	subs	r3, #2
 80013be:	4465      	add	r5, ip
 80013c0:	e732      	b.n	8001228 <__udivmoddi4+0x12c>
 80013c2:	4608      	mov	r0, r1
 80013c4:	e709      	b.n	80011da <__udivmoddi4+0xde>
 80013c6:	4464      	add	r4, ip
 80013c8:	3802      	subs	r0, #2
 80013ca:	e742      	b.n	8001252 <__udivmoddi4+0x156>

080013cc <__aeabi_idiv0>:
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop

080013d0 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80013d0:	b508      	push	{r3, lr}

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 80013d2:	4813      	ldr	r0, [pc, #76]	; (8001420 <MX_ADC_Init+0x50>)
 80013d4:	4b13      	ldr	r3, [pc, #76]	; (8001424 <MX_ADC_Init+0x54>)
 80013d6:	6003      	str	r3, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80013dc:	6043      	str	r3, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80013de:	2300      	movs	r3, #0
 80013e0:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013e2:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013e4:	6103      	str	r3, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013e6:	2204      	movs	r2, #4
 80013e8:	6142      	str	r2, [r0, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80013ea:	7603      	strb	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80013ec:	7643      	strb	r3, [r0, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80013ee:	7683      	strb	r3, [r0, #26]
  hadc.Init.NbrOfConversion = 1;
 80013f0:	2201      	movs	r2, #1
 80013f2:	61c2      	str	r2, [r0, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80013f4:	f880 3020 	strb.w	r3, [r0, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013f8:	6243      	str	r3, [r0, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013fa:	6283      	str	r3, [r0, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 80013fc:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001400:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001404:	6302      	str	r2, [r0, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8001406:	2207      	movs	r2, #7
 8001408:	6342      	str	r2, [r0, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 800140a:	6382      	str	r2, [r0, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 800140c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001410:	64c3      	str	r3, [r0, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001412:	f002 ff19 	bl	8004248 <HAL_ADC_Init>
 8001416:	b900      	cbnz	r0, 800141a <MX_ADC_Init+0x4a>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001418:	bd08      	pop	{r3, pc}
    Error_Handler();
 800141a:	f000 fb2b 	bl	8001a74 <Error_Handler>
}
 800141e:	e7fb      	b.n	8001418 <MX_ADC_Init+0x48>
 8001420:	200001a4 	.word	0x200001a4
 8001424:	40012400 	.word	0x40012400

08001428 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8001428:	6802      	ldr	r2, [r0, #0]
 800142a:	4b09      	ldr	r3, [pc, #36]	; (8001450 <HAL_ADC_MspInit+0x28>)
 800142c:	429a      	cmp	r2, r3
 800142e:	d000      	beq.n	8001432 <HAL_ADC_MspInit+0xa>
 8001430:	4770      	bx	lr
{
 8001432:	b082      	sub	sp, #8
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001438:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800143a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800143e:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001442:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001446:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001448:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_ADC_CLK_ENABLE();
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 800144a:	b002      	add	sp, #8
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	40012400 	.word	0x40012400

08001454 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8001454:	6802      	ldr	r2, [r0, #0]
 8001456:	4b05      	ldr	r3, [pc, #20]	; (800146c <HAL_ADC_MspDeInit+0x18>)
 8001458:	429a      	cmp	r2, r3
 800145a:	d000      	beq.n	800145e <HAL_ADC_MspDeInit+0xa>
    __HAL_RCC_ADC_CLK_DISABLE();
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 800145c:	4770      	bx	lr
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 800145e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001462:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8001464:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001468:	6613      	str	r3, [r2, #96]	; 0x60
 800146a:	e7f7      	b.n	800145c <HAL_ADC_MspDeInit+0x8>
 800146c:	40012400 	.word	0x40012400

08001470 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001470:	b530      	push	{r4, r5, lr}
 8001472:	b085      	sub	sp, #20
 8001474:	4604      	mov	r4, r0
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 8001476:	2300      	movs	r3, #0
 8001478:	9301      	str	r3, [sp, #4]
 800147a:	9302      	str	r3, [sp, #8]
 800147c:	9303      	str	r3, [sp, #12]

  MX_ADC_Init();
 800147e:	f7ff ffa7 	bl	80013d0 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8001482:	4816      	ldr	r0, [pc, #88]	; (80014dc <ADC_ReadChannels+0x6c>)
 8001484:	f003 fb24 	bl	8004ad0 <HAL_ADCEx_Calibration_Start>
 8001488:	b9f8      	cbnz	r0, 80014ca <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 800148a:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800148c:	2300      	movs	r3, #0
 800148e:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001490:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001492:	a901      	add	r1, sp, #4
 8001494:	4811      	ldr	r0, [pc, #68]	; (80014dc <ADC_ReadChannels+0x6c>)
 8001496:	f003 f865 	bl	8004564 <HAL_ADC_ConfigChannel>
 800149a:	b9c8      	cbnz	r0, 80014d0 <ADC_ReadChannels+0x60>
  {
    Error_Handler();
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 800149c:	480f      	ldr	r0, [pc, #60]	; (80014dc <ADC_ReadChannels+0x6c>)
 800149e:	f003 fa25 	bl	80048ec <HAL_ADC_Start>
 80014a2:	b9c0      	cbnz	r0, 80014d6 <ADC_ReadChannels+0x66>
  {
    /* Start Error */
    Error_Handler();
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80014a4:	4c0d      	ldr	r4, [pc, #52]	; (80014dc <ADC_ReadChannels+0x6c>)
 80014a6:	f04f 31ff 	mov.w	r1, #4294967295
 80014aa:	4620      	mov	r0, r4
 80014ac:	f002 fff8 	bl	80044a0 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 80014b0:	4620      	mov	r0, r4
 80014b2:	f003 faed 	bl	8004a90 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 80014b6:	4620      	mov	r0, r4
 80014b8:	f003 f851 	bl	800455e <HAL_ADC_GetValue>
 80014bc:	4605      	mov	r5, r0

  HAL_ADC_DeInit(&hadc);
 80014be:	4620      	mov	r0, r4
 80014c0:	f003 fa90 	bl	80049e4 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 80014c4:	4628      	mov	r0, r5
 80014c6:	b005      	add	sp, #20
 80014c8:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 80014ca:	f000 fad3 	bl	8001a74 <Error_Handler>
 80014ce:	e7dc      	b.n	800148a <ADC_ReadChannels+0x1a>
    Error_Handler();
 80014d0:	f000 fad0 	bl	8001a74 <Error_Handler>
 80014d4:	e7e2      	b.n	800149c <ADC_ReadChannels+0x2c>
    Error_Handler();
 80014d6:	f000 facd 	bl	8001a74 <Error_Handler>
 80014da:	e7e3      	b.n	80014a4 <ADC_ReadChannels+0x34>
 80014dc:	200001a4 	.word	0x200001a4

080014e0 <SYS_InitMeasurement>:
  hadc.Instance = ADC;
 80014e0:	4b01      	ldr	r3, [pc, #4]	; (80014e8 <SYS_InitMeasurement+0x8>)
 80014e2:	4a02      	ldr	r2, [pc, #8]	; (80014ec <SYS_InitMeasurement+0xc>)
 80014e4:	601a      	str	r2, [r3, #0]
}
 80014e6:	4770      	bx	lr
 80014e8:	200001a4 	.word	0x200001a4
 80014ec:	40012400 	.word	0x40012400

080014f0 <SYS_GetBatteryLevel>:
{
 80014f0:	b508      	push	{r3, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 80014f2:	480d      	ldr	r0, [pc, #52]	; (8001528 <SYS_GetBatteryLevel+0x38>)
 80014f4:	f7ff ffbc 	bl	8001470 <ADC_ReadChannels>
  if (measuredLevel == 0)
 80014f8:	b1a0      	cbz	r0, 8001524 <SYS_GetBatteryLevel+0x34>
 80014fa:	4602      	mov	r2, r0
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 80014fc:	4b0b      	ldr	r3, [pc, #44]	; (800152c <SYS_GetBatteryLevel+0x3c>)
 80014fe:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8001502:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001506:	428b      	cmp	r3, r1
 8001508:	d007      	beq.n	800151a <SYS_GetBatteryLevel+0x2a>
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 800150a:	f640 40e4 	movw	r0, #3300	; 0xce4
 800150e:	fb03 f000 	mul.w	r0, r3, r0
 8001512:	fbb0 f0f2 	udiv	r0, r0, r2
 8001516:	b280      	uxth	r0, r0
 8001518:	e005      	b.n	8001526 <SYS_GetBatteryLevel+0x36>
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 800151a:	4805      	ldr	r0, [pc, #20]	; (8001530 <SYS_GetBatteryLevel+0x40>)
 800151c:	fbb0 f0f2 	udiv	r0, r0, r2
 8001520:	b280      	uxth	r0, r0
 8001522:	e000      	b.n	8001526 <SYS_GetBatteryLevel+0x36>
    batteryLevelmV = 0;
 8001524:	2000      	movs	r0, #0
}
 8001526:	bd08      	pop	{r3, pc}
 8001528:	b4002000 	.word	0xb4002000
 800152c:	1fff7500 	.word	0x1fff7500
 8001530:	004c08d8 	.word	0x004c08d8

08001534 <SYS_GetTemperatureLevel>:
{
 8001534:	b510      	push	{r4, lr}
 8001536:	b082      	sub	sp, #8
  __IO int16_t temperatureDegreeC = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 800153e:	f7ff ffd7 	bl	80014f0 <SYS_GetBatteryLevel>
 8001542:	4604      	mov	r4, r0
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8001544:	4821      	ldr	r0, [pc, #132]	; (80015cc <SYS_GetTemperatureLevel+0x98>)
 8001546:	f7ff ff93 	bl	8001470 <ADC_ReadChannels>
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 800154a:	4b21      	ldr	r3, [pc, #132]	; (80015d0 <SYS_GetTemperatureLevel+0x9c>)
 800154c:	f8b3 20c8 	ldrh.w	r2, [r3, #200]	; 0xc8
 8001550:	f8b3 10a8 	ldrh.w	r1, [r3, #168]	; 0xa8
 8001554:	428a      	cmp	r2, r1
 8001556:	d01d      	beq.n	8001594 <SYS_GetTemperatureLevel+0x60>
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 8001558:	fb00 f304 	mul.w	r3, r0, r4
 800155c:	089b      	lsrs	r3, r3, #2
 800155e:	4c1d      	ldr	r4, [pc, #116]	; (80015d4 <SYS_GetTemperatureLevel+0xa0>)
 8001560:	fba4 0303 	umull	r0, r3, r4, r3
 8001564:	ebc1 1353 	rsb	r3, r1, r3, lsr #5
 8001568:	2064      	movs	r0, #100	; 0x64
 800156a:	fb00 f303 	mul.w	r3, r0, r3
 800156e:	1a52      	subs	r2, r2, r1
 8001570:	fb93 f3f2 	sdiv	r3, r3, r2
 8001574:	331e      	adds	r3, #30
 8001576:	b21b      	sxth	r3, r3
 8001578:	f8ad 3006 	strh.w	r3, [sp, #6]
  temperatureDegreeC <<= 8;
 800157c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001580:	b21b      	sxth	r3, r3
 8001582:	021b      	lsls	r3, r3, #8
 8001584:	b21b      	sxth	r3, r3
 8001586:	f8ad 3006 	strh.w	r3, [sp, #6]
  return (int16_t) temperatureDegreeC;
 800158a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}
 800158e:	b200      	sxth	r0, r0
 8001590:	b002      	add	sp, #8
 8001592:	bd10      	pop	{r4, pc}
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8001594:	fb00 f404 	mul.w	r4, r0, r4
 8001598:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <SYS_GetTemperatureLevel+0xa4>)
 800159a:	fba3 2304 	umull	r2, r3, r3, r4
 800159e:	1ae4      	subs	r4, r4, r3
 80015a0:	eb03 0454 	add.w	r4, r3, r4, lsr #1
 80015a4:	0ae4      	lsrs	r4, r4, #11
 80015a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015aa:	fb03 f404 	mul.w	r4, r3, r4
 80015ae:	f5a4 2439 	sub.w	r4, r4, #757760	; 0xb9000
 80015b2:	f5a4 640c 	sub.w	r4, r4, #2240	; 0x8c0
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <SYS_GetTemperatureLevel+0xa8>)
 80015b8:	fb83 2304 	smull	r2, r3, r3, r4
 80015bc:	17e4      	asrs	r4, r4, #31
 80015be:	ebc4 24a3 	rsb	r4, r4, r3, asr #10
 80015c2:	341e      	adds	r4, #30
 80015c4:	b224      	sxth	r4, r4
 80015c6:	f8ad 4006 	strh.w	r4, [sp, #6]
 80015ca:	e7d7      	b.n	800157c <SYS_GetTemperatureLevel+0x48>
 80015cc:	b0001000 	.word	0xb0001000
 80015d0:	1fff7500 	.word	0x1fff7500
 80015d4:	09ee009f 	.word	0x09ee009f
 80015d8:	00100101 	.word	0x00100101
 80015dc:	68db8bad 	.word	0x68db8bad

080015e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80015e0:	b500      	push	{lr}
 80015e2:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB1ENR, Periphs);
 80015e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80015ea:	f042 0204 	orr.w	r2, r2, #4
 80015ee:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80015f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80015f2:	f002 0204 	and.w	r2, r2, #4
 80015f6:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80015f8:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80015fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80015fc:	f042 0201 	orr.w	r2, r2, #1
 8001600:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800160a:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 800160c:	2200      	movs	r2, #0
 800160e:	2102      	movs	r1, #2
 8001610:	200f      	movs	r0, #15
 8001612:	f003 fb0f 	bl	8004c34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001616:	200f      	movs	r0, #15
 8001618:	f003 fb44 	bl	8004ca4 <HAL_NVIC_EnableIRQ>

}
 800161c:	b003      	add	sp, #12
 800161e:	f85d fb04 	ldr.w	pc, [sp], #4

08001622 <FLASH_IF_IsEmpty>:
  /* USER CODE END FLASH_IF_IsEmpty_1 */
  uint64_t *addr64;
  uint32_t i;

  /* start memory NOT 64bits aligned */
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001622:	e000      	b.n	8001626 <FLASH_IF_IsEmpty+0x4>
  {
    if (*addr++ != UINT8_MAX)
    {
      return FLASH_NOT_EMPTY;
    }
    size--;
 8001624:	3901      	subs	r1, #1
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001626:	f010 0307 	ands.w	r3, r0, #7
 800162a:	d012      	beq.n	8001652 <FLASH_IF_IsEmpty+0x30>
    if (*addr++ != UINT8_MAX)
 800162c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001630:	2bff      	cmp	r3, #255	; 0xff
 8001632:	d0f7      	beq.n	8001624 <FLASH_IF_IsEmpty+0x2>
      return FLASH_NOT_EMPTY;
 8001634:	2001      	movs	r0, #1
 8001636:	4770      	bx	lr
  {
    if (*addr++ != UINT8_MAX)
    {
      return FLASH_NOT_EMPTY;
    }
    size--;
 8001638:	3901      	subs	r1, #1
  while (size != 0)
 800163a:	b129      	cbz	r1, 8001648 <FLASH_IF_IsEmpty+0x26>
    if (*addr++ != UINT8_MAX)
 800163c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001640:	2bff      	cmp	r3, #255	; 0xff
 8001642:	d0f9      	beq.n	8001638 <FLASH_IF_IsEmpty+0x16>
      return FLASH_NOT_EMPTY;
 8001644:	2001      	movs	r0, #1
 8001646:	e002      	b.n	800164e <FLASH_IF_IsEmpty+0x2c>
  }
  return FLASH_EMPTY;
 8001648:	2000      	movs	r0, #0
 800164a:	e000      	b.n	800164e <FLASH_IF_IsEmpty+0x2c>
      return FLASH_NOT_EMPTY;
 800164c:	2001      	movs	r0, #1
  /* USER CODE BEGIN FLASH_IF_IsEmpty_2 */

  /* USER CODE END FLASH_IF_IsEmpty_2 */
}
 800164e:	bc10      	pop	{r4}
 8001650:	4770      	bx	lr
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001652:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001656:	d212      	bcs.n	800167e <FLASH_IF_IsEmpty+0x5c>
{
 8001658:	b410      	push	{r4}
    if (*addr64++ != UINT64_MAX)
 800165a:	4602      	mov	r2, r0
 800165c:	f852 4b08 	ldr.w	r4, [r2], #8
 8001660:	6840      	ldr	r0, [r0, #4]
 8001662:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001666:	bf08      	it	eq
 8001668:	f1b4 3fff 	cmpeq.w	r4, #4294967295
 800166c:	d1ee      	bne.n	800164c <FLASH_IF_IsEmpty+0x2a>
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 800166e:	3301      	adds	r3, #1
    if (*addr64++ != UINT64_MAX)
 8001670:	4610      	mov	r0, r2
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001672:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001676:	d3f0      	bcc.n	800165a <FLASH_IF_IsEmpty+0x38>
  size -= sizeof(uint64_t) * i;
 8001678:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
  while (size != 0)
 800167c:	e7dd      	b.n	800163a <FLASH_IF_IsEmpty+0x18>
  size -= sizeof(uint64_t) * i;
 800167e:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
  while (size != 0)
 8001682:	b129      	cbz	r1, 8001690 <FLASH_IF_IsEmpty+0x6e>
    if (*addr++ != UINT8_MAX)
 8001684:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001688:	2bff      	cmp	r3, #255	; 0xff
 800168a:	d103      	bne.n	8001694 <FLASH_IF_IsEmpty+0x72>
    size--;
 800168c:	3901      	subs	r1, #1
 800168e:	e7f8      	b.n	8001682 <FLASH_IF_IsEmpty+0x60>
  return FLASH_EMPTY;
 8001690:	2000      	movs	r0, #0
 8001692:	4770      	bx	lr
      return FLASH_NOT_EMPTY;
 8001694:	2001      	movs	r0, #1
}
 8001696:	4770      	bx	lr

08001698 <FLASH_IF_Write64>:
{
 8001698:	b570      	push	{r4, r5, r6, lr}
 800169a:	4604      	mov	r4, r0
 800169c:	4616      	mov	r6, r2
 800169e:	461d      	mov	r5, r3
  while (*(uint64_t *)address != data)
 80016a0:	e005      	b.n	80016ae <FLASH_IF_Write64+0x16>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data);
 80016a2:	4632      	mov	r2, r6
 80016a4:	462b      	mov	r3, r5
 80016a6:	4621      	mov	r1, r4
 80016a8:	2001      	movs	r0, #1
 80016aa:	f003 fe27 	bl	80052fc <HAL_FLASH_Program>
  while (*(uint64_t *)address != data)
 80016ae:	6822      	ldr	r2, [r4, #0]
 80016b0:	6863      	ldr	r3, [r4, #4]
 80016b2:	42ab      	cmp	r3, r5
 80016b4:	bf08      	it	eq
 80016b6:	42b2      	cmpeq	r2, r6
 80016b8:	d005      	beq.n	80016c6 <FLASH_IF_Write64+0x2e>
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
#if defined(CORE_CM0PLUS)
  return ((READ_BIT(FLASH->C2SR, FLASH_C2SR_PESD) == (FLASH_C2SR_PESD)) ? 1UL : 0UL);
#else
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 80016ba:	4904      	ldr	r1, [pc, #16]	; (80016cc <FLASH_IF_Write64+0x34>)
 80016bc:	6909      	ldr	r1, [r1, #16]
 80016be:	f411 2f00 	tst.w	r1, #524288	; 0x80000
 80016c2:	d1fa      	bne.n	80016ba <FLASH_IF_Write64+0x22>
 80016c4:	e7ed      	b.n	80016a2 <FLASH_IF_Write64+0xa>
}
 80016c6:	2000      	movs	r0, #0
 80016c8:	bd70      	pop	{r4, r5, r6, pc}
 80016ca:	bf00      	nop
 80016cc:	58004000 	.word	0x58004000

080016d0 <FLASH_IF_Write_Buffer>:
{
 80016d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	4606      	mov	r6, r0
 80016d8:	460c      	mov	r4, r1
 80016da:	4690      	mov	r8, r2
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 80016dc:	2500      	movs	r5, #0
  int32_t status = FLASH_OK;
 80016de:	462f      	mov	r7, r5
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 80016e0:	e003      	b.n	80016ea <FLASH_IF_Write_Buffer+0x1a>
    pDestination += sizeof(uint64_t);
 80016e2:	3608      	adds	r6, #8
    pSrc += sizeof(uint64_t);
 80016e4:	3408      	adds	r4, #8
    if (status != FLASH_OK)
 80016e6:	b9af      	cbnz	r7, 8001714 <FLASH_IF_Write_Buffer+0x44>
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 80016e8:	3501      	adds	r5, #1
 80016ea:	ebb5 0fd8 	cmp.w	r5, r8, lsr #3
 80016ee:	d211      	bcs.n	8001714 <FLASH_IF_Write_Buffer+0x44>
    UTIL_MEM_cpy_8(&src_value, pSrc, sizeof(uint64_t));
 80016f0:	2208      	movs	r2, #8
 80016f2:	4621      	mov	r1, r4
 80016f4:	4668      	mov	r0, sp
 80016f6:	f011 fcc3 	bl	8013080 <UTIL_MEM_cpy_8>
    if (src_value != UINT64_MAX)
 80016fa:	9a00      	ldr	r2, [sp, #0]
 80016fc:	9b01      	ldr	r3, [sp, #4]
 80016fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001702:	bf08      	it	eq
 8001704:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001708:	d0eb      	beq.n	80016e2 <FLASH_IF_Write_Buffer+0x12>
      status = FLASH_IF_Write64(pDestination, src_value);
 800170a:	4630      	mov	r0, r6
 800170c:	f7ff ffc4 	bl	8001698 <FLASH_IF_Write64>
 8001710:	4607      	mov	r7, r0
 8001712:	e7e6      	b.n	80016e2 <FLASH_IF_Write_Buffer+0x12>
}
 8001714:	4638      	mov	r0, r7
 8001716:	b002      	add	sp, #8
 8001718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800171c <FLASH_IF_EraseByPages>:
{
 800171c:	b500      	push	{lr}
 800171e:	b085      	sub	sp, #20
  erase_str.TypeErase = FLASH_TYPEERASE_PAGES;
 8001720:	2302      	movs	r3, #2
 8001722:	9301      	str	r3, [sp, #4]
  erase_str.Page = page;
 8001724:	9002      	str	r0, [sp, #8]
  erase_str.NbPages = n;
 8001726:	9103      	str	r1, [sp, #12]
  if (interrupt)
 8001728:	b13a      	cbz	r2, 800173a <FLASH_IF_EraseByPages+0x1e>
    hal_status = HAL_FLASHEx_Erase_IT(&erase_str);
 800172a:	a801      	add	r0, sp, #4
 800172c:	f003 feae 	bl	800548c <HAL_FLASHEx_Erase_IT>
  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 8001730:	b140      	cbz	r0, 8001744 <FLASH_IF_EraseByPages+0x28>
 8001732:	2802      	cmp	r0, #2
 8001734:	d10a      	bne.n	800174c <FLASH_IF_EraseByPages+0x30>
 8001736:	2001      	movs	r0, #1
 8001738:	e005      	b.n	8001746 <FLASH_IF_EraseByPages+0x2a>
    hal_status = HAL_FLASHEx_Erase(&erase_str, &page_error);
 800173a:	4669      	mov	r1, sp
 800173c:	a801      	add	r0, sp, #4
 800173e:	f003 fe65 	bl	800540c <HAL_FLASHEx_Erase>
 8001742:	e7f5      	b.n	8001730 <FLASH_IF_EraseByPages+0x14>
  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 8001744:	2000      	movs	r0, #0
}
 8001746:	b005      	add	sp, #20
 8001748:	f85d fb04 	ldr.w	pc, [sp], #4
  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 800174c:	f06f 0001 	mvn.w	r0, #1
 8001750:	e7f9      	b.n	8001746 <FLASH_IF_EraseByPages+0x2a>
	...

08001754 <FLASH_IF_Write>:
{
 8001754:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001758:	4693      	mov	fp, r2
 800175a:	4699      	mov	r9, r3
  uint32_t page_start_index = PAGE(address);
 800175c:	f100 4578 	add.w	r5, r0, #4160749568	; 0xf8000000
 8001760:	4b3e      	ldr	r3, [pc, #248]	; (800185c <FLASH_IF_Write+0x108>)
 8001762:	f8d3 25e0 	ldr.w	r2, [r3, #1504]	; 0x5e0
 8001766:	4b3e      	ldr	r3, [pc, #248]	; (8001860 <FLASH_IF_Write+0x10c>)
 8001768:	ea03 2382 	and.w	r3, r3, r2, lsl #10
 800176c:	fbb5 f2f3 	udiv	r2, r5, r3
 8001770:	fb03 5512 	mls	r5, r3, r2, r5
  uint32_t page_end_index = PAGE(address + size - 1);
 8001774:	eb00 0a0b 	add.w	sl, r0, fp
 8001778:	f10a 4a78 	add.w	sl, sl, #4160749568	; 0xf8000000
 800177c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8001780:	fbba f2f3 	udiv	r2, sl, r3
 8001784:	fb03 aa12 	mls	sl, r3, r2, sl
  if ((data == NULL) || ((size % sizeof(uint64_t)) != 0) || ((address % sizeof(uint64_t)) != 0))
 8001788:	2900      	cmp	r1, #0
 800178a:	d052      	beq.n	8001832 <FLASH_IF_Write+0xde>
 800178c:	4606      	mov	r6, r0
 800178e:	0aed      	lsrs	r5, r5, #11
 8001790:	ea4f 2ada 	mov.w	sl, sl, lsr #11
 8001794:	4688      	mov	r8, r1
 8001796:	f01b 0f07 	tst.w	fp, #7
 800179a:	d14d      	bne.n	8001838 <FLASH_IF_Write+0xe4>
 800179c:	f010 0f07 	tst.w	r0, #7
 80017a0:	d14d      	bne.n	800183e <FLASH_IF_Write+0xea>
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80017a2:	4b30      	ldr	r3, [pc, #192]	; (8001864 <FLASH_IF_Write+0x110>)
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	db4c      	blt.n	8001844 <FLASH_IF_Write+0xf0>
  if (page_start_index != page_end_index)
 80017aa:	4555      	cmp	r5, sl
 80017ac:	d004      	beq.n	80017b8 <FLASH_IF_Write+0x64>
    curr_size = FLASH_PAGE_SIZE - (address % FLASH_PAGE_SIZE);
 80017ae:	f3c0 040a 	ubfx	r4, r0, #0, #11
 80017b2:	f5c4 6400 	rsb	r4, r4, #2048	; 0x800
 80017b6:	e00d      	b.n	80017d4 <FLASH_IF_Write+0x80>
  uint32_t curr_size = size;
 80017b8:	465c      	mov	r4, fp
 80017ba:	e00b      	b.n	80017d4 <FLASH_IF_Write+0x80>
      if (FLASH_IF_Write_Buffer(curr_dest_addr, (uint8_t *)curr_src_addr, curr_size) != FLASH_OK)
 80017bc:	4622      	mov	r2, r4
 80017be:	4641      	mov	r1, r8
 80017c0:	4630      	mov	r0, r6
 80017c2:	f7ff ff85 	bl	80016d0 <FLASH_IF_Write_Buffer>
 80017c6:	2800      	cmp	r0, #0
 80017c8:	d145      	bne.n	8001856 <FLASH_IF_Write+0x102>
    curr_dest_addr += curr_size;
 80017ca:	4426      	add	r6, r4
    curr_src_addr += curr_size;
 80017cc:	44a0      	add	r8, r4
    curr_size = size - curr_size;
 80017ce:	ebab 0404 	sub.w	r4, fp, r4
  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 80017d2:	3501      	adds	r5, #1
 80017d4:	4555      	cmp	r5, sl
 80017d6:	d829      	bhi.n	800182c <FLASH_IF_Write+0xd8>
    if (FLASH_IF_IsEmpty((uint8_t *)curr_dest_addr, curr_size) != FLASH_EMPTY)
 80017d8:	4621      	mov	r1, r4
 80017da:	4630      	mov	r0, r6
 80017dc:	f7ff ff21 	bl	8001622 <FLASH_IF_IsEmpty>
 80017e0:	2800      	cmp	r0, #0
 80017e2:	d0eb      	beq.n	80017bc <FLASH_IF_Write+0x68>
      if (dataTempPage == NULL)
 80017e4:	f1b9 0f00 	cmp.w	r9, #0
 80017e8:	d02f      	beq.n	800184a <FLASH_IF_Write+0xf6>
      UTIL_MEM_cpy_8(dataTempPage, (uint8_t *)(idx * FLASH_PAGE_SIZE + FLASH_BASE), FLASH_PAGE_SIZE);
 80017ea:	f505 3780 	add.w	r7, r5, #65536	; 0x10000
 80017ee:	02ff      	lsls	r7, r7, #11
 80017f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017f4:	4639      	mov	r1, r7
 80017f6:	4648      	mov	r0, r9
 80017f8:	f011 fc42 	bl	8013080 <UTIL_MEM_cpy_8>
      UTIL_MEM_cpy_8(&dataTempPage[((uint32_t)curr_dest_addr) % FLASH_PAGE_SIZE], (uint8_t *)curr_src_addr, curr_size);
 80017fc:	f3c6 000a 	ubfx	r0, r6, #0, #11
 8001800:	b2a2      	uxth	r2, r4
 8001802:	4641      	mov	r1, r8
 8001804:	4448      	add	r0, r9
 8001806:	f011 fc3b 	bl	8013080 <UTIL_MEM_cpy_8>
      if (FLASH_IF_EraseByPages(idx, 1, 0) != FLASH_OK)
 800180a:	2200      	movs	r2, #0
 800180c:	2101      	movs	r1, #1
 800180e:	4628      	mov	r0, r5
 8001810:	f7ff ff84 	bl	800171c <FLASH_IF_EraseByPages>
 8001814:	b9e0      	cbnz	r0, 8001850 <FLASH_IF_Write+0xfc>
        if (FLASH_IF_Write_Buffer(idx * FLASH_PAGE_SIZE + FLASH_BASE, dataTempPage, FLASH_PAGE_SIZE) != FLASH_OK)
 8001816:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800181a:	4649      	mov	r1, r9
 800181c:	4638      	mov	r0, r7
 800181e:	f7ff ff57 	bl	80016d0 <FLASH_IF_Write_Buffer>
 8001822:	2800      	cmp	r0, #0
 8001824:	d0d1      	beq.n	80017ca <FLASH_IF_Write+0x76>
          status = FLASH_WRITE_ERROR;
 8001826:	f06f 0002 	mvn.w	r0, #2
 800182a:	e000      	b.n	800182e <FLASH_IF_Write+0xda>
  int32_t status = FLASH_OK;
 800182c:	2000      	movs	r0, #0
}
 800182e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return FLASH_PARAM_ERROR;
 8001832:	f06f 0004 	mvn.w	r0, #4
 8001836:	e7fa      	b.n	800182e <FLASH_IF_Write+0xda>
 8001838:	f06f 0004 	mvn.w	r0, #4
 800183c:	e7f7      	b.n	800182e <FLASH_IF_Write+0xda>
 800183e:	f06f 0004 	mvn.w	r0, #4
 8001842:	e7f4      	b.n	800182e <FLASH_IF_Write+0xda>
    return FLASH_LOCK_ERROR;
 8001844:	f06f 0003 	mvn.w	r0, #3
 8001848:	e7f1      	b.n	800182e <FLASH_IF_Write+0xda>
        return FLASH_PARAM_ERROR;
 800184a:	f06f 0004 	mvn.w	r0, #4
 800184e:	e7ee      	b.n	800182e <FLASH_IF_Write+0xda>
        status = FLASH_ERASE_ERROR;
 8001850:	f06f 0001 	mvn.w	r0, #1
 8001854:	e7eb      	b.n	800182e <FLASH_IF_Write+0xda>
        status = FLASH_WRITE_ERROR;
 8001856:	f06f 0002 	mvn.w	r0, #2
 800185a:	e7e8      	b.n	800182e <FLASH_IF_Write+0xda>
 800185c:	1fff7000 	.word	0x1fff7000
 8001860:	03fffc00 	.word	0x03fffc00
 8001864:	58004000 	.word	0x58004000

08001868 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800186c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186e:	2400      	movs	r4, #0
 8001870:	9403      	str	r4, [sp, #12]
 8001872:	9404      	str	r4, [sp, #16]
 8001874:	9405      	str	r4, [sp, #20]
 8001876:	9406      	str	r4, [sp, #24]
 8001878:	9407      	str	r4, [sp, #28]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800187a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800187e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001880:	f042 0202 	orr.w	r2, r2, #2
 8001884:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001886:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001888:	f002 0202 	and.w	r2, r2, #2
 800188c:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800188e:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001890:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001892:	f042 0204 	orr.w	r2, r2, #4
 8001896:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001898:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800189a:	f002 0204 	and.w	r2, r2, #4
 800189e:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80018a0:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80018a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018a4:	f042 0201 	orr.w	r2, r2, #1
 80018a8:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80018aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80018b2:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|PROB2_Pin|PROB1_Pin
 80018b4:	4e34      	ldr	r6, [pc, #208]	; (8001988 <MX_GPIO_Init+0x120>)
 80018b6:	4622      	mov	r2, r4
 80018b8:	f44f 413a 	mov.w	r1, #47616	; 0xba00
 80018bc:	4630      	mov	r0, r6
 80018be:	f003 ff69 	bl	8005794 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80018c2:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 80018c6:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c8:	2501      	movs	r5, #1
 80018ca:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018ce:	2302      	movs	r3, #2
 80018d0:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d2:	a903      	add	r1, sp, #12
 80018d4:	4630      	mov	r0, r6
 80018d6:	f003 fe0d 	bl	80054f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_14;
 80018da:	f244 0310 	movw	r3, #16400	; 0x4010
 80018de:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018e0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018e4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e8:	a903      	add	r1, sp, #12
 80018ea:	4630      	mov	r0, r6
 80018ec:	f003 fe02 	bl	80054f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin;
 80018f0:	f04f 0803 	mov.w	r8, #3
 80018f4:	f8cd 800c 	str.w	r8, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018f8:	f44f 1704 	mov.w	r7, #2162688	; 0x210000
 80018fc:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018fe:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001900:	a903      	add	r1, sp, #12
 8001902:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001906:	f003 fdf5 	bl	80054f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PROB2_Pin|PROB1_Pin;
 800190a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800190e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001910:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001914:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001918:	a903      	add	r1, sp, #12
 800191a:	4630      	mov	r0, r6
 800191c:	f003 fdea 	bl	80054f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT3_Pin;
 8001920:	2340      	movs	r3, #64	; 0x40
 8001922:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001924:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001926:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(BUT3_GPIO_Port, &GPIO_InitStruct);
 8001928:	a903      	add	r1, sp, #12
 800192a:	4818      	ldr	r0, [pc, #96]	; (800198c <MX_GPIO_Init+0x124>)
 800192c:	f003 fde2 	bl	80054f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001930:	4622      	mov	r2, r4
 8001932:	4621      	mov	r1, r4
 8001934:	2006      	movs	r0, #6
 8001936:	f003 f97d 	bl	8004c34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800193a:	2006      	movs	r0, #6
 800193c:	f003 f9b2 	bl	8004ca4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001940:	4622      	mov	r2, r4
 8001942:	4621      	mov	r1, r4
 8001944:	2007      	movs	r0, #7
 8001946:	f003 f975 	bl	8004c34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800194a:	2007      	movs	r0, #7
 800194c:	f003 f9aa 	bl	8004ca4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001950:	4622      	mov	r2, r4
 8001952:	4621      	mov	r1, r4
 8001954:	200a      	movs	r0, #10
 8001956:	f003 f96d 	bl	8004c34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800195a:	200a      	movs	r0, #10
 800195c:	f003 f9a2 	bl	8004ca4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001960:	4622      	mov	r2, r4
 8001962:	4621      	mov	r1, r4
 8001964:	2016      	movs	r0, #22
 8001966:	f003 f965 	bl	8004c34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800196a:	2016      	movs	r0, #22
 800196c:	f003 f99a 	bl	8004ca4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001970:	4622      	mov	r2, r4
 8001972:	4621      	mov	r1, r4
 8001974:	2029      	movs	r0, #41	; 0x29
 8001976:	f003 f95d 	bl	8004c34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800197a:	2029      	movs	r0, #41	; 0x29
 800197c:	f003 f992 	bl	8004ca4 <HAL_NVIC_EnableIRQ>

}
 8001980:	b008      	add	sp, #32
 8001982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001986:	bf00      	nop
 8001988:	48000400 	.word	0x48000400
 800198c:	48000800 	.word	0x48000800

08001990 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001990:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001992:	4812      	ldr	r0, [pc, #72]	; (80019dc <MX_I2C1_Init+0x4c>)
 8001994:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <MX_I2C1_Init+0x50>)
 8001996:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8001998:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <MX_I2C1_Init+0x54>)
 800199a:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800199c:	2300      	movs	r3, #0
 800199e:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019a0:	2201      	movs	r2, #1
 80019a2:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019a4:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80019a6:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019a8:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019aa:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019ac:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019ae:	f004 f8a8 	bl	8005b02 <HAL_I2C_Init>
 80019b2:	b950      	cbnz	r0, 80019ca <MX_I2C1_Init+0x3a>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019b4:	2100      	movs	r1, #0
 80019b6:	4809      	ldr	r0, [pc, #36]	; (80019dc <MX_I2C1_Init+0x4c>)
 80019b8:	f004 fa7e 	bl	8005eb8 <HAL_I2CEx_ConfigAnalogFilter>
 80019bc:	b940      	cbnz	r0, 80019d0 <MX_I2C1_Init+0x40>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80019be:	2100      	movs	r1, #0
 80019c0:	4806      	ldr	r0, [pc, #24]	; (80019dc <MX_I2C1_Init+0x4c>)
 80019c2:	f004 faa7 	bl	8005f14 <HAL_I2CEx_ConfigDigitalFilter>
 80019c6:	b930      	cbnz	r0, 80019d6 <MX_I2C1_Init+0x46>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019c8:	bd08      	pop	{r3, pc}
    Error_Handler();
 80019ca:	f000 f853 	bl	8001a74 <Error_Handler>
 80019ce:	e7f1      	b.n	80019b4 <MX_I2C1_Init+0x24>
    Error_Handler();
 80019d0:	f000 f850 	bl	8001a74 <Error_Handler>
 80019d4:	e7f3      	b.n	80019be <MX_I2C1_Init+0x2e>
    Error_Handler();
 80019d6:	f000 f84d 	bl	8001a74 <Error_Handler>
}
 80019da:	e7f5      	b.n	80019c8 <MX_I2C1_Init+0x38>
 80019dc:	20000208 	.word	0x20000208
 80019e0:	40005400 	.word	0x40005400
 80019e4:	20303e5d 	.word	0x20303e5d

080019e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80019e8:	b510      	push	{r4, lr}
 80019ea:	b096      	sub	sp, #88	; 0x58
 80019ec:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ee:	2100      	movs	r1, #0
 80019f0:	9111      	str	r1, [sp, #68]	; 0x44
 80019f2:	9112      	str	r1, [sp, #72]	; 0x48
 80019f4:	9113      	str	r1, [sp, #76]	; 0x4c
 80019f6:	9114      	str	r1, [sp, #80]	; 0x50
 80019f8:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019fa:	2238      	movs	r2, #56	; 0x38
 80019fc:	a803      	add	r0, sp, #12
 80019fe:	f012 f825 	bl	8013a4c <memset>
  if(i2cHandle->Instance==I2C1)
 8001a02:	6822      	ldr	r2, [r4, #0]
 8001a04:	4b19      	ldr	r3, [pc, #100]	; (8001a6c <HAL_I2C_MspInit+0x84>)
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d001      	beq.n	8001a0e <HAL_I2C_MspInit+0x26>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001a0a:	b016      	add	sp, #88	; 0x58
 8001a0c:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a0e:	2340      	movs	r3, #64	; 0x40
 8001a10:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a12:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001a16:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a18:	a803      	add	r0, sp, #12
 8001a1a:	f005 f8d1 	bl	8006bc0 <HAL_RCCEx_PeriphCLKConfig>
 8001a1e:	bb10      	cbnz	r0, 8001a66 <HAL_I2C_MspInit+0x7e>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a20:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8001a24:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001a26:	f043 0302 	orr.w	r3, r3, #2
 8001a2a:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a2c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8001a34:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001a36:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001a3a:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a3c:	2312      	movs	r3, #18
 8001a3e:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a44:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a46:	2304      	movs	r3, #4
 8001a48:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a4a:	a911      	add	r1, sp, #68	; 0x44
 8001a4c:	4808      	ldr	r0, [pc, #32]	; (8001a70 <HAL_I2C_MspInit+0x88>)
 8001a4e:	f003 fd51 	bl	80054f4 <HAL_GPIO_Init>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001a52:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001a54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a58:	65a3      	str	r3, [r4, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001a5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001a5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a60:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001a62:	9b01      	ldr	r3, [sp, #4]
}
 8001a64:	e7d1      	b.n	8001a0a <HAL_I2C_MspInit+0x22>
      Error_Handler();
 8001a66:	f000 f805 	bl	8001a74 <Error_Handler>
 8001a6a:	e7d9      	b.n	8001a20 <HAL_I2C_MspInit+0x38>
 8001a6c:	40005400 	.word	0x40005400
 8001a70:	48000400 	.word	0x48000400

08001a74 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a74:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a76:	e7fe      	b.n	8001a76 <Error_Handler+0x2>

08001a78 <SystemClock_Config>:
{
 8001a78:	b510      	push	{r4, lr}
 8001a7a:	b09a      	sub	sp, #104	; 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a7c:	2248      	movs	r2, #72	; 0x48
 8001a7e:	2100      	movs	r1, #0
 8001a80:	a808      	add	r0, sp, #32
 8001a82:	f011 ffe3 	bl	8013a4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a86:	2400      	movs	r4, #0
 8001a88:	9401      	str	r4, [sp, #4]
 8001a8a:	9402      	str	r4, [sp, #8]
 8001a8c:	9403      	str	r4, [sp, #12]
 8001a8e:	9404      	str	r4, [sp, #16]
 8001a90:	9405      	str	r4, [sp, #20]
 8001a92:	9406      	str	r4, [sp, #24]
 8001a94:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 8001a96:	f004 fa69 	bl	8005f6c <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001a9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a9e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001aa2:	f023 0318 	bic.w	r3, r3, #24
 8001aa6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001aaa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001aae:	6813      	ldr	r3, [r2, #0]
 8001ab0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ab4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ab8:	6013      	str	r3, [r2, #0]
 8001aba:	6813      	ldr	r3, [r2, #0]
 8001abc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001ac4:	2324      	movs	r3, #36	; 0x24
 8001ac6:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001ac8:	2381      	movs	r3, #129	; 0x81
 8001aca:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001acc:	2301      	movs	r3, #1
 8001ace:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001ad0:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001ad2:	23b0      	movs	r3, #176	; 0xb0
 8001ad4:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001ad6:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ad8:	a808      	add	r0, sp, #32
 8001ada:	f004 fbe1 	bl	80062a0 <HAL_RCC_OscConfig>
 8001ade:	b970      	cbnz	r0, 8001afe <SystemClock_Config+0x86>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001ae0:	234f      	movs	r3, #79	; 0x4f
 8001ae2:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ae8:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001aea:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001aec:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001aee:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001af0:	2102      	movs	r1, #2
 8001af2:	a801      	add	r0, sp, #4
 8001af4:	f004 ff10 	bl	8006918 <HAL_RCC_ClockConfig>
 8001af8:	b918      	cbnz	r0, 8001b02 <SystemClock_Config+0x8a>
}
 8001afa:	b01a      	add	sp, #104	; 0x68
 8001afc:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001afe:	f7ff ffb9 	bl	8001a74 <Error_Handler>
    Error_Handler();
 8001b02:	f7ff ffb7 	bl	8001a74 <Error_Handler>

08001b06 <main>:
{
 8001b06:	b508      	push	{r3, lr}
  HAL_Init();
 8001b08:	f002 fb50 	bl	80041ac <HAL_Init>
  SystemClock_Config();
 8001b0c:	f7ff ffb4 	bl	8001a78 <SystemClock_Config>
  MX_GPIO_Init();
 8001b10:	f7ff feaa 	bl	8001868 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8001b14:	f000 fe42 	bl	800279c <MX_LoRaWAN_Init>
  MX_I2C1_Init();
 8001b18:	f7ff ff3a 	bl	8001990 <MX_I2C1_Init>
    MX_LoRaWAN_Process();
 8001b1c:	f000 fe44 	bl	80027a8 <MX_LoRaWAN_Process>
  while (1)
 8001b20:	e7fc      	b.n	8001b1c <main+0x16>
	...

08001b24 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001b24:	b500      	push	{lr}
 8001b26:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001b28:	222c      	movs	r2, #44	; 0x2c
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	a801      	add	r0, sp, #4
 8001b2e:	f011 ff8d 	bl	8013a4c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001b32:	4819      	ldr	r0, [pc, #100]	; (8001b98 <MX_RTC_Init+0x74>)
 8001b34:	4b19      	ldr	r3, [pc, #100]	; (8001b9c <MX_RTC_Init+0x78>)
 8001b36:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001b38:	231f      	movs	r3, #31
 8001b3a:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001b40:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001b42:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001b44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b48:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001b4a:	6203      	str	r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001b4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b50:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001b52:	f005 fa47 	bl	8006fe4 <HAL_RTC_Init>
 8001b56:	b9a8      	cbnz	r0, 8001b84 <MX_RTC_Init+0x60>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001b58:	480f      	ldr	r0, [pc, #60]	; (8001b98 <MX_RTC_Init+0x74>)
 8001b5a:	f005 fb7d 	bl	8007258 <HAL_RTCEx_SetSSRU_IT>
 8001b5e:	b9a0      	cbnz	r0, 8001b8a <MX_RTC_Init+0x66>
    Error_Handler();
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001b60:	2200      	movs	r2, #0
 8001b62:	9208      	str	r2, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001b64:	9202      	str	r2, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001b66:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001b68:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001b6c:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001b6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b72:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001b74:	a901      	add	r1, sp, #4
 8001b76:	4808      	ldr	r0, [pc, #32]	; (8001b98 <MX_RTC_Init+0x74>)
 8001b78:	f005 fa92 	bl	80070a0 <HAL_RTC_SetAlarm_IT>
 8001b7c:	b940      	cbnz	r0, 8001b90 <MX_RTC_Init+0x6c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001b7e:	b00d      	add	sp, #52	; 0x34
 8001b80:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001b84:	f7ff ff76 	bl	8001a74 <Error_Handler>
 8001b88:	e7e6      	b.n	8001b58 <MX_RTC_Init+0x34>
    Error_Handler();
 8001b8a:	f7ff ff73 	bl	8001a74 <Error_Handler>
 8001b8e:	e7e7      	b.n	8001b60 <MX_RTC_Init+0x3c>
    Error_Handler();
 8001b90:	f7ff ff70 	bl	8001a74 <Error_Handler>
}
 8001b94:	e7f3      	b.n	8001b7e <MX_RTC_Init+0x5a>
 8001b96:	bf00      	nop
 8001b98:	20000254 	.word	0x20000254
 8001b9c:	40002800 	.word	0x40002800

08001ba0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001ba0:	b510      	push	{r4, lr}
 8001ba2:	b090      	sub	sp, #64	; 0x40
 8001ba4:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ba6:	2238      	movs	r2, #56	; 0x38
 8001ba8:	2100      	movs	r1, #0
 8001baa:	a802      	add	r0, sp, #8
 8001bac:	f011 ff4e 	bl	8013a4c <memset>
  if(rtcHandle->Instance==RTC)
 8001bb0:	6822      	ldr	r2, [r4, #0]
 8001bb2:	4b1a      	ldr	r3, [pc, #104]	; (8001c1c <HAL_RTC_MspInit+0x7c>)
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d001      	beq.n	8001bbc <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001bb8:	b010      	add	sp, #64	; 0x40
 8001bba:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001bbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bc0:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001bc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bc6:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bc8:	a802      	add	r0, sp, #8
 8001bca:	f004 fff9 	bl	8006bc0 <HAL_RCCEx_PeriphCLKConfig>
 8001bce:	bb08      	cbnz	r0, 8001c14 <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001bd8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bdc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001be0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001be2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001be6:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bee:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001bf0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	4611      	mov	r1, r2
 8001bf6:	2002      	movs	r0, #2
 8001bf8:	f003 f81c 	bl	8004c34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001bfc:	2002      	movs	r0, #2
 8001bfe:	f003 f851 	bl	8004ca4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001c02:	2200      	movs	r2, #0
 8001c04:	4611      	mov	r1, r2
 8001c06:	202a      	movs	r0, #42	; 0x2a
 8001c08:	f003 f814 	bl	8004c34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001c0c:	202a      	movs	r0, #42	; 0x2a
 8001c0e:	f003 f849 	bl	8004ca4 <HAL_NVIC_EnableIRQ>
}
 8001c12:	e7d1      	b.n	8001bb8 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 8001c14:	f7ff ff2e 	bl	8001a74 <Error_Handler>
 8001c18:	e7da      	b.n	8001bd0 <HAL_RTC_MspInit+0x30>
 8001c1a:	bf00      	nop
 8001c1c:	40002800 	.word	0x40002800

08001c20 <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001c20:	4770      	bx	lr

08001c22 <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001c22:	4770      	bx	lr

08001c24 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001c24:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001c26:	f002 fad7 	bl	80041d8 <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001c2a:	2001      	movs	r0, #1
 8001c2c:	4b02      	ldr	r3, [pc, #8]	; (8001c38 <PWR_EnterStopMode+0x14>)
 8001c2e:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001c32:	f004 f9ff 	bl	8006034 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001c36:	bd08      	pop	{r3, pc}
 8001c38:	58000400 	.word	0x58000400

08001c3c <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 8001c3c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8001c3e:	f002 fad2 	bl	80041e6 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001c42:	bd08      	pop	{r3, pc}

08001c44 <PWR_ExitStopMode>:
{
 8001c44:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 8001c46:	f002 face 	bl	80041e6 <HAL_ResumeTick>
  vcom_Resume();
 8001c4a:	f000 fd67 	bl	800271c <vcom_Resume>
}
 8001c4e:	bd08      	pop	{r3, pc}

08001c50 <PWR_EnterSleepMode>:
{
 8001c50:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 8001c52:	f002 fac1 	bl	80041d8 <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001c56:	2101      	movs	r1, #1
 8001c58:	2000      	movs	r0, #0
 8001c5a:	f004 f98f 	bl	8005f7c <HAL_PWR_EnterSLEEPMode>
}
 8001c5e:	bd08      	pop	{r3, pc}

08001c60 <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c60:	4770      	bx	lr

08001c62 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c62:	e7fe      	b.n	8001c62 <NMI_Handler>

08001c64 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c64:	e7fe      	b.n	8001c64 <HardFault_Handler>

08001c66 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c66:	e7fe      	b.n	8001c66 <MemManage_Handler>

08001c68 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c68:	e7fe      	b.n	8001c68 <BusFault_Handler>

08001c6a <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c6a:	e7fe      	b.n	8001c6a <UsageFault_Handler>

08001c6c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c6c:	4770      	bx	lr

08001c6e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c6e:	4770      	bx	lr

08001c70 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c70:	4770      	bx	lr

08001c72 <SysTick_Handler>:

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c72:	4770      	bx	lr

08001c74 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001c74:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001c76:	4802      	ldr	r0, [pc, #8]	; (8001c80 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 8001c78:	f005 fb1a 	bl	80072b0 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001c7c:	bd08      	pop	{r3, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000254 	.word	0x20000254

08001c84 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001c84:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8001c86:	2001      	movs	r0, #1
 8001c88:	f003 fd92 	bl	80057b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001c8c:	bd08      	pop	{r3, pc}

08001c8e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001c8e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT2_Pin);
 8001c90:	2002      	movs	r0, #2
 8001c92:	f003 fd8d 	bl	80057b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001c96:	bd08      	pop	{r3, pc}

08001c98 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI Line 4 Interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001c98:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001c9a:	2010      	movs	r0, #16
 8001c9c:	f003 fd88 	bl	80057b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001ca0:	bd08      	pop	{r3, pc}
	...

08001ca4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001ca4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001ca6:	4802      	ldr	r0, [pc, #8]	; (8001cb0 <DMA1_Channel5_IRQHandler+0xc>)
 8001ca8:	f003 fa1a 	bl	80050e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001cac:	bd08      	pop	{r3, pc}
 8001cae:	bf00      	nop
 8001cb0:	200003d8 	.word	0x200003d8

08001cb4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 8001cb4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT3_Pin);
 8001cb6:	2040      	movs	r0, #64	; 0x40
 8001cb8:	f003 fd7a 	bl	80057b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001cbc:	bd08      	pop	{r3, pc}
	...

08001cc0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001cc0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001cc2:	4802      	ldr	r0, [pc, #8]	; (8001ccc <USART2_IRQHandler+0xc>)
 8001cc4:	f005 ffb0 	bl	8007c28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001cc8:	bd08      	pop	{r3, pc}
 8001cca:	bf00      	nop
 8001ccc:	20000438 	.word	0x20000438

08001cd0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 8001cd0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001cd2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001cd6:	f003 fd6b 	bl	80057b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001cda:	bd08      	pop	{r3, pc}

08001cdc <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001cdc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001cde:	4802      	ldr	r0, [pc, #8]	; (8001ce8 <RTC_Alarm_IRQHandler+0xc>)
 8001ce0:	f005 f8f8 	bl	8006ed4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001ce4:	bd08      	pop	{r3, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000254 	.word	0x20000254

08001cec <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001cec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001cee:	4802      	ldr	r0, [pc, #8]	; (8001cf8 <SUBGHZ_Radio_IRQHandler+0xc>)
 8001cf0:	f005 fd88 	bl	8007804 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001cf4:	bd08      	pop	{r3, pc}
 8001cf6:	bf00      	nop
 8001cf8:	2000028c 	.word	0x2000028c

08001cfc <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001cfc:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001cfe:	4805      	ldr	r0, [pc, #20]	; (8001d14 <MX_SUBGHZ_Init+0x18>)
 8001d00:	2308      	movs	r3, #8
 8001d02:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001d04:	f005 fb0a 	bl	800731c <HAL_SUBGHZ_Init>
 8001d08:	b900      	cbnz	r0, 8001d0c <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001d0a:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001d0c:	f7ff feb2 	bl	8001a74 <Error_Handler>
}
 8001d10:	e7fb      	b.n	8001d0a <MX_SUBGHZ_Init+0xe>
 8001d12:	bf00      	nop
 8001d14:	2000028c 	.word	0x2000028c

08001d18 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001d18:	b500      	push	{lr}
 8001d1a:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001d1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d20:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001d22:	f042 0201 	orr.w	r2, r2, #1
 8001d26:	665a      	str	r2, [r3, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001d28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001d30:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001d32:	2200      	movs	r2, #0
 8001d34:	4611      	mov	r1, r2
 8001d36:	2032      	movs	r0, #50	; 0x32
 8001d38:	f002 ff7c 	bl	8004c34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001d3c:	2032      	movs	r0, #50	; 0x32
 8001d3e:	f002 ffb1 	bl	8004ca4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001d42:	b003      	add	sp, #12
 8001d44:	f85d fb04 	ldr.w	pc, [sp], #4

08001d48 <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001d48:	b40c      	push	{r2, r3}
 8001d4a:	b500      	push	{lr}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	ab04      	add	r3, sp, #16
 8001d50:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001d54:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001d56:	f011 fd6d 	bl	8013834 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001d5a:	b003      	add	sp, #12
 8001d5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001d60:	b002      	add	sp, #8
 8001d62:	4770      	bx	lr

08001d64 <TimestampNow>:
{
 8001d64:	b530      	push	{r4, r5, lr}
 8001d66:	b085      	sub	sp, #20
 8001d68:	4604      	mov	r4, r0
 8001d6a:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 8001d6c:	a802      	add	r0, sp, #8
 8001d6e:	f011 fad7 	bl	8013320 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001d72:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	9b02      	ldr	r3, [sp, #8]
 8001d7a:	4a05      	ldr	r2, [pc, #20]	; (8001d90 <TimestampNow+0x2c>)
 8001d7c:	2110      	movs	r1, #16
 8001d7e:	4620      	mov	r0, r4
 8001d80:	f7ff ffe2 	bl	8001d48 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001d84:	4620      	mov	r0, r4
 8001d86:	f7fe f9f7 	bl	8000178 <strlen>
 8001d8a:	8028      	strh	r0, [r5, #0]
}
 8001d8c:	b005      	add	sp, #20
 8001d8e:	bd30      	pop	{r4, r5, pc}
 8001d90:	08013e6c 	.word	0x08013e6c

08001d94 <SystemApp_Init>:
{
 8001d94:	b510      	push	{r4, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001d96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d9a:	6893      	ldr	r3, [r2, #8]
 8001d9c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001da0:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 8001da2:	f011 fb41 	bl	8013428 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001da6:	2401      	movs	r4, #1
 8001da8:	4b0d      	ldr	r3, [pc, #52]	; (8001de0 <SystemApp_Init+0x4c>)
 8001daa:	701c      	strb	r4, [r3, #0]
  DBG_Init();
 8001dac:	f000 f8b6 	bl	8001f1c <DBG_Init>
  UTIL_ADV_TRACE_Init();
 8001db0:	f010 ffdc 	bl	8012d6c <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001db4:	480b      	ldr	r0, [pc, #44]	; (8001de4 <SystemApp_Init+0x50>)
 8001db6:	f010 fff3 	bl	8012da0 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001dba:	4b0b      	ldr	r3, [pc, #44]	; (8001de8 <SystemApp_Init+0x54>)
 8001dbc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001dc0:	611a      	str	r2, [r3, #16]
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001dc2:	2002      	movs	r0, #2
 8001dc4:	f010 fff2 	bl	8012dac <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 8001dc8:	f7ff fb8a 	bl	80014e0 <SYS_InitMeasurement>
  EnvSensors_Init();
 8001dcc:	f000 f99e 	bl	800210c <EnvSensors_Init>
  UTIL_LPM_Init();
 8001dd0:	f011 f8fc 	bl	8012fcc <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001dd4:	4621      	mov	r1, r4
 8001dd6:	4620      	mov	r0, r4
 8001dd8:	f011 f918 	bl	801300c <UTIL_LPM_SetOffMode>
}
 8001ddc:	bd10      	pop	{r4, pc}
 8001dde:	bf00      	nop
 8001de0:	20000298 	.word	0x20000298
 8001de4:	08001d65 	.word	0x08001d65
 8001de8:	58004000 	.word	0x58004000

08001dec <UTIL_SEQ_Idle>:
{
 8001dec:	b508      	push	{r3, lr}
  UTIL_LPM_EnterLowPower();
 8001dee:	f011 f923 	bl	8013038 <UTIL_LPM_EnterLowPower>
}
 8001df2:	bd08      	pop	{r3, pc}

08001df4 <GetBatteryLevel>:
{
 8001df4:	b508      	push	{r3, lr}
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001df6:	f7ff fb7b 	bl	80014f0 <SYS_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 8001dfa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001dfe:	4298      	cmp	r0, r3
 8001e00:	d80d      	bhi.n	8001e1e <GetBatteryLevel+0x2a>
  else if (batteryLevelmV < VDD_MIN)
 8001e02:	f5b0 6fe1 	cmp.w	r0, #1800	; 0x708
 8001e06:	d30c      	bcc.n	8001e22 <GetBatteryLevel+0x2e>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001e08:	f5a0 60e1 	sub.w	r0, r0, #1800	; 0x708
 8001e0c:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
 8001e10:	0040      	lsls	r0, r0, #1
 8001e12:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <GetBatteryLevel+0x34>)
 8001e14:	fba3 3000 	umull	r3, r0, r3, r0
 8001e18:	f3c0 10c7 	ubfx	r0, r0, #7, #8
 8001e1c:	e000      	b.n	8001e20 <GetBatteryLevel+0x2c>
    batteryLevel = LORAWAN_MAX_BAT;
 8001e1e:	20fe      	movs	r0, #254	; 0xfe
}
 8001e20:	bd08      	pop	{r3, pc}
    batteryLevel = 0;
 8001e22:	2000      	movs	r0, #0
 8001e24:	e7fc      	b.n	8001e20 <GetBatteryLevel+0x2c>
 8001e26:	bf00      	nop
 8001e28:	1b4e81b5 	.word	0x1b4e81b5

08001e2c <GetTemperatureLevel>:
{
 8001e2c:	b500      	push	{lr}
 8001e2e:	b089      	sub	sp, #36	; 0x24
  EnvSensors_Read(&sensor_data);
 8001e30:	a801      	add	r0, sp, #4
 8001e32:	f000 f9bb 	bl	80021ac <EnvSensors_Read>
}
 8001e36:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 8001e3a:	b009      	add	sp, #36	; 0x24
 8001e3c:	f85d fb04 	ldr.w	pc, [sp], #4

08001e40 <GetUniqueId>:
{
 8001e40:	b538      	push	{r3, r4, r5, lr}
 8001e42:	4604      	mov	r4, r0
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001e44:	4b18      	ldr	r3, [pc, #96]	; (8001ea8 <GetUniqueId+0x68>)
 8001e46:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e4e:	d013      	beq.n	8001e78 <GetUniqueId+0x38>
    id[7] = val & 0xFF;
 8001e50:	71c3      	strb	r3, [r0, #7]
    id[6] = (val >> 8) & 0xFF;
 8001e52:	0a1a      	lsrs	r2, r3, #8
 8001e54:	7182      	strb	r2, [r0, #6]
    id[5] = (val >> 16) & 0xFF;
 8001e56:	0c1a      	lsrs	r2, r3, #16
 8001e58:	7142      	strb	r2, [r0, #5]
    id[4] = (val >> 24) & 0xFF;
 8001e5a:	0e1b      	lsrs	r3, r3, #24
 8001e5c:	7103      	strb	r3, [r0, #4]
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001e5e:	4b12      	ldr	r3, [pc, #72]	; (8001ea8 <GetUniqueId+0x68>)
 8001e60:	f8d3 2584 	ldr.w	r2, [r3, #1412]	; 0x584
    id[3] = val & 0xFF;
 8001e64:	70c2      	strb	r2, [r0, #3]
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001e66:	f8d3 3584 	ldr.w	r3, [r3, #1412]	; 0x584
 8001e6a:	0a1a      	lsrs	r2, r3, #8
    id[2] = val & 0xFF;
 8001e6c:	7082      	strb	r2, [r0, #2]
    id[1] = (val >> 8) & 0xFF;
 8001e6e:	0c1a      	lsrs	r2, r3, #16
 8001e70:	7042      	strb	r2, [r0, #1]
    id[0] = (val >> 16) & 0xFF;
 8001e72:	0e1b      	lsrs	r3, r3, #24
 8001e74:	7003      	strb	r3, [r0, #0]
}
 8001e76:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001e78:	f002 f9bc 	bl	80041f4 <HAL_GetUIDw0>
 8001e7c:	4605      	mov	r5, r0
 8001e7e:	f002 f9c5 	bl	800420c <HAL_GetUIDw2>
 8001e82:	4405      	add	r5, r0
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001e84:	f002 f9bc 	bl	8004200 <HAL_GetUIDw1>
    id[7] = (ID_1_3_val) >> 24;
 8001e88:	0e2b      	lsrs	r3, r5, #24
 8001e8a:	71e3      	strb	r3, [r4, #7]
    id[6] = (ID_1_3_val) >> 16;
 8001e8c:	0c2b      	lsrs	r3, r5, #16
 8001e8e:	71a3      	strb	r3, [r4, #6]
    id[5] = (ID_1_3_val) >> 8;
 8001e90:	0a2b      	lsrs	r3, r5, #8
 8001e92:	7163      	strb	r3, [r4, #5]
    id[4] = (ID_1_3_val);
 8001e94:	7125      	strb	r5, [r4, #4]
    id[3] = (ID_2_val) >> 24;
 8001e96:	0e03      	lsrs	r3, r0, #24
 8001e98:	70e3      	strb	r3, [r4, #3]
    id[2] = (ID_2_val) >> 16;
 8001e9a:	0c03      	lsrs	r3, r0, #16
 8001e9c:	70a3      	strb	r3, [r4, #2]
    id[1] = (ID_2_val) >> 8;
 8001e9e:	0a03      	lsrs	r3, r0, #8
 8001ea0:	7063      	strb	r3, [r4, #1]
    id[0] = (ID_2_val);
 8001ea2:	7020      	strb	r0, [r4, #0]
 8001ea4:	e7e7      	b.n	8001e76 <GetUniqueId+0x36>
 8001ea6:	bf00      	nop
 8001ea8:	1fff7000 	.word	0x1fff7000

08001eac <GetDevAddr>:
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001eac:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <GetDevAddr+0x24>)
 8001eae:	f8d3 0580 	ldr.w	r0, [r3, #1408]	; 0x580
  if (val == 0xFFFFFFFF)
 8001eb2:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001eb6:	d000      	beq.n	8001eba <GetDevAddr+0xe>
}
 8001eb8:	4770      	bx	lr
{
 8001eba:	b510      	push	{r4, lr}
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001ebc:	f002 f99a 	bl	80041f4 <HAL_GetUIDw0>
 8001ec0:	4604      	mov	r4, r0
 8001ec2:	f002 f99d 	bl	8004200 <HAL_GetUIDw1>
 8001ec6:	4044      	eors	r4, r0
 8001ec8:	f002 f9a0 	bl	800420c <HAL_GetUIDw2>
 8001ecc:	4060      	eors	r0, r4
}
 8001ece:	bd10      	pop	{r4, pc}
 8001ed0:	1fff7000 	.word	0x1fff7000

08001ed4 <UTIL_ADV_TRACE_PreSendHook>:
{
 8001ed4:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	2002      	movs	r0, #2
 8001eda:	f011 f881 	bl	8012fe0 <UTIL_LPM_SetStopMode>
}
 8001ede:	bd08      	pop	{r3, pc}

08001ee0 <UTIL_ADV_TRACE_PostSendHook>:
{
 8001ee0:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	2002      	movs	r0, #2
 8001ee6:	f011 f87b 	bl	8012fe0 <UTIL_LPM_SetStopMode>
}
 8001eea:	bd08      	pop	{r3, pc}

08001eec <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001eec:	2000      	movs	r0, #0
 8001eee:	4770      	bx	lr

08001ef0 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001ef0:	b508      	push	{r3, lr}
  uint32_t ret = 0;
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8001ef2:	4b04      	ldr	r3, [pc, #16]	; (8001f04 <HAL_GetTick+0x14>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	b90b      	cbnz	r3, 8001efc <HAL_GetTick+0xc>
  uint32_t ret = 0;
 8001ef8:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
}
 8001efa:	bd08      	pop	{r3, pc}
    ret = TIMER_IF_GetTimerValue();
 8001efc:	f000 f9d8 	bl	80022b0 <TIMER_IF_GetTimerValue>
 8001f00:	e7fb      	b.n	8001efa <HAL_GetTick+0xa>
 8001f02:	bf00      	nop
 8001f04:	20000298 	.word	0x20000298

08001f08 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001f08:	b500      	push	{lr}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001f0e:	9801      	ldr	r0, [sp, #4]
 8001f10:	f000 fab4 	bl	800247c <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001f14:	b003      	add	sp, #12
 8001f16:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001f1c <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8001f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f1e:	b089      	sub	sp, #36	; 0x24
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001f20:	4a22      	ldr	r2, [pc, #136]	; (8001fac <DBG_Init+0x90>)
 8001f22:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001f26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8001f2e:	f002 f973 	bl	8004218 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8001f32:	f002 f979 	bl	8004228 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8001f36:	f002 f97f 	bl	8004238 <HAL_DBGMCU_EnableDBGStandbyMode>
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8001f3a:	2400      	movs	r4, #0
 8001f3c:	9403      	str	r4, [sp, #12]
 8001f3e:	9404      	str	r4, [sp, #16]
 8001f40:	9405      	str	r4, [sp, #20]
 8001f42:	9406      	str	r4, [sp, #24]
 8001f44:	9407      	str	r4, [sp, #28]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8001f46:	2301      	movs	r3, #1
 8001f48:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	9306      	str	r3, [sp, #24]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001f4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f54:	f042 0202 	orr.w	r2, r2, #2
 8001f58:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001f5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f5c:	f002 0202 	and.w	r2, r2, #2
 8001f60:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001f62:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001f64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f66:	f042 0202 	orr.w	r2, r2, #2
 8001f6a:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001f74:	9b01      	ldr	r3, [sp, #4]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
  PROBE_LINE2_CLK_ENABLE();

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8001f76:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8001f7a:	9703      	str	r7, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8001f7c:	4d0c      	ldr	r5, [pc, #48]	; (8001fb0 <DBG_Init+0x94>)
 8001f7e:	a903      	add	r1, sp, #12
 8001f80:	4628      	mov	r0, r5
 8001f82:	f003 fab7 	bl	80054f4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8001f86:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 8001f8a:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8001f8c:	a903      	add	r1, sp, #12
 8001f8e:	4628      	mov	r0, r5
 8001f90:	f003 fab0 	bl	80054f4 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8001f94:	4622      	mov	r2, r4
 8001f96:	4639      	mov	r1, r7
 8001f98:	4628      	mov	r0, r5
 8001f9a:	f003 fbfb 	bl	8005794 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8001f9e:	4622      	mov	r2, r4
 8001fa0:	4631      	mov	r1, r6
 8001fa2:	4628      	mov	r0, r5
 8001fa4:	f003 fbf6 	bl	8005794 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8001fa8:	b009      	add	sp, #36	; 0x24
 8001faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fac:	58000800 	.word	0x58000800
 8001fb0:	48000400 	.word	0x48000400

08001fb4 <bme680I2cRead>:
/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
/* USER CODE BEGIN PrFD */

int8_t bme680I2cRead(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8001fb4:	b570      	push	{r4, r5, r6, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	4604      	mov	r4, r0
 8001fba:	4616      	mov	r6, r2
 8001fbc:	461d      	mov	r5, r3
 8001fbe:	f88d 100f 	strb.w	r1, [sp, #15]
	// read I2C line

	int8_t result;
	static const size_t I2C_READ_TIMEOUT = 250;

	if (HAL_I2C_Master_Transmit(&hi2c1, (dev_id << 1), &reg_addr, 1, I2C_READ_TIMEOUT) != HAL_OK) {
 8001fc2:	23fa      	movs	r3, #250	; 0xfa
 8001fc4:	9300      	str	r3, [sp, #0]
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	f10d 020f 	add.w	r2, sp, #15
 8001fcc:	fa00 f103 	lsl.w	r1, r0, r3
 8001fd0:	480b      	ldr	r0, [pc, #44]	; (8002000 <bme680I2cRead+0x4c>)
 8001fd2:	f003 fdf5 	bl	8005bc0 <HAL_I2C_Master_Transmit>
 8001fd6:	b980      	cbnz	r0, 8001ffa <bme680I2cRead+0x46>
		result = -1;
	} else if (HAL_I2C_Master_Receive (&hi2c1, (dev_id << 1) | 0x01, reg_data, len, I2C_READ_TIMEOUT) != HAL_OK) {
 8001fd8:	0061      	lsls	r1, r4, #1
 8001fda:	23fa      	movs	r3, #250	; 0xfa
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	462b      	mov	r3, r5
 8001fe0:	4632      	mov	r2, r6
 8001fe2:	f041 0101 	orr.w	r1, r1, #1
 8001fe6:	4806      	ldr	r0, [pc, #24]	; (8002000 <bme680I2cRead+0x4c>)
 8001fe8:	f003 fea8 	bl	8005d3c <HAL_I2C_Master_Receive>
 8001fec:	b910      	cbnz	r0, 8001ff4 <bme680I2cRead+0x40>
		result = -1;
	} else {
		result = 0;
 8001fee:	2000      	movs	r0, #0
	}

	return result;

}
 8001ff0:	b004      	add	sp, #16
 8001ff2:	bd70      	pop	{r4, r5, r6, pc}
		result = -1;
 8001ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff8:	e7fa      	b.n	8001ff0 <bme680I2cRead+0x3c>
		result = -1;
 8001ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8001ffe:	e7f7      	b.n	8001ff0 <bme680I2cRead+0x3c>
 8002000:	20000208 	.word	0x20000208

08002004 <bme680I2cWrite>:

int8_t bme680I2cWrite(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8002004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002008:	b083      	sub	sp, #12
 800200a:	4606      	mov	r6, r0
 800200c:	4688      	mov	r8, r1
 800200e:	4617      	mov	r7, r2
 8002010:	461d      	mov	r5, r3
  // write to I2C line
  int8_t result;
  int8_t *buf;

  // Allocate and load I2C transmit buffer
  buf = malloc(len + 1);
 8002012:	f103 0901 	add.w	r9, r3, #1
 8002016:	4648      	mov	r0, r9
 8002018:	f011 fcfa 	bl	8013a10 <malloc>
 800201c:	4604      	mov	r4, r0
  buf[0] = reg_addr;
 800201e:	f800 8b01 	strb.w	r8, [r0], #1
  memcpy(buf + 1, reg_data, len);
 8002022:	462a      	mov	r2, r5
 8002024:	4639      	mov	r1, r7
 8002026:	f011 fd03 	bl	8013a30 <memcpy>

  if (HAL_I2C_Master_Transmit(&hi2c1, (dev_id << 1), (uint8_t *) buf, len + 1, HAL_MAX_DELAY) != HAL_OK) {
 800202a:	f04f 33ff 	mov.w	r3, #4294967295
 800202e:	9300      	str	r3, [sp, #0]
 8002030:	fa1f f389 	uxth.w	r3, r9
 8002034:	4622      	mov	r2, r4
 8002036:	0071      	lsls	r1, r6, #1
 8002038:	4807      	ldr	r0, [pc, #28]	; (8002058 <bme680I2cWrite+0x54>)
 800203a:	f003 fdc1 	bl	8005bc0 <HAL_I2C_Master_Transmit>
 800203e:	b938      	cbnz	r0, 8002050 <bme680I2cWrite+0x4c>
    result = -1;
  } else {
    result = 0;
 8002040:	2500      	movs	r5, #0
  }

  free(buf);
 8002042:	4620      	mov	r0, r4
 8002044:	f011 fcec 	bl	8013a20 <free>
  return result;
}
 8002048:	4628      	mov	r0, r5
 800204a:	b003      	add	sp, #12
 800204c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    result = -1;
 8002050:	f04f 35ff 	mov.w	r5, #4294967295
 8002054:	e7f5      	b.n	8002042 <bme680I2cWrite+0x3e>
 8002056:	bf00      	nop
 8002058:	20000208 	.word	0x20000208

0800205c <bme680Init>:

bme bme680Init(struct bme680_dev gas_sensor, int8_t rslt, bme bmes) {
 800205c:	b084      	sub	sp, #16
 800205e:	b570      	push	{r4, r5, r6, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	4605      	mov	r5, r0
 8002064:	ac07      	add	r4, sp, #28
 8002066:	e884 000e 	stmia.w	r4, {r1, r2, r3}

  // ----------------------Configure the BME680 driver-----------------------------

  gas_sensor.dev_id = BME680_I2C_ADDR_PRIMARY;
 800206a:	2376      	movs	r3, #118	; 0x76
 800206c:	f88d 301d 	strb.w	r3, [sp, #29]
  gas_sensor.intf = BME680_I2C_INTF;
 8002070:	2601      	movs	r6, #1
 8002072:	f88d 601e 	strb.w	r6, [sp, #30]
  gas_sensor.read = bme680I2cRead;
 8002076:	4b22      	ldr	r3, [pc, #136]	; (8002100 <bme680Init+0xa4>)
 8002078:	9319      	str	r3, [sp, #100]	; 0x64
  gas_sensor.write = bme680I2cWrite;
 800207a:	4b22      	ldr	r3, [pc, #136]	; (8002104 <bme680Init+0xa8>)
 800207c:	931a      	str	r3, [sp, #104]	; 0x68
  gas_sensor.delay_ms = HAL_Delay;
 800207e:	4b22      	ldr	r3, [pc, #136]	; (8002108 <bme680Init+0xac>)
 8002080:	931b      	str	r3, [sp, #108]	; 0x6c
  gas_sensor.amb_temp = 25;
 8002082:	2319      	movs	r3, #25
 8002084:	f88d 3020 	strb.w	r3, [sp, #32]

  // Initialize the driver
  if (bme680_init(&gas_sensor) != BME680_OK) {
 8002088:	4620      	mov	r0, r4
 800208a:	f001 fdf3 	bl	8003c74 <bme680_init>
	//char bme_msg[] = "BME680 Initialized and Ready\r\n";
	//DebugSerialOutput(bme_msg);
  }

  // Select desired over sampling rates
  gas_sensor.tph_sett.os_hum = BME680_OS_2X;
 800208e:	2302      	movs	r3, #2
 8002090:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
  gas_sensor.tph_sett.os_pres = BME680_OS_4X;
 8002094:	2203      	movs	r2, #3
 8002096:	f88d 2056 	strb.w	r2, [sp, #86]	; 0x56
  gas_sensor.tph_sett.os_temp = BME680_OS_8X;
 800209a:	2204      	movs	r2, #4
 800209c:	f88d 2055 	strb.w	r2, [sp, #85]	; 0x55
  gas_sensor.tph_sett.filter = BME680_FILTER_SIZE_3;
 80020a0:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57

  /* Set the remaining gas sensor settings and link the heating profile */
  gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
 80020a4:	f88d 605a 	strb.w	r6, [sp, #90]	; 0x5a
  /* Create a ramp heat waveform in 3 steps */
  gas_sensor.gas_sett.heatr_temp = 320; /* degree Celsius */
 80020a8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80020ac:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
  gas_sensor.gas_sett.heatr_dur = 150; /* milliseconds */
 80020b0:	2396      	movs	r3, #150	; 0x96
 80020b2:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e

  // Set sensor to "always on"
  gas_sensor.power_mode = BME680_FORCED_MODE;
 80020b6:	f88d 6060 	strb.w	r6, [sp, #96]	; 0x60

  // Set over sampling settings
  uint8_t required_settings = (BME680_OST_SEL | BME680_OSP_SEL | BME680_OSH_SEL | BME680_FILTER_SEL | BME680_GAS_SENSOR_SEL);
  rslt = bme680_set_sensor_settings(required_settings, &gas_sensor);
 80020ba:	4621      	mov	r1, r4
 80020bc:	20df      	movs	r0, #223	; 0xdf
 80020be:	f001 fe3e 	bl	8003d3e <bme680_set_sensor_settings>

  // Set sensor mode
  rslt = bme680_set_sensor_mode(&gas_sensor);
 80020c2:	4620      	mov	r0, r4
 80020c4:	f001 fdf3 	bl	8003cae <bme680_set_sensor_mode>
 80020c8:	4606      	mov	r6, r0

  // Query minimum sampling period
  uint16_t min_sampling_period;
  bme680_get_profile_dur(&min_sampling_period, &gas_sensor);
 80020ca:	4621      	mov	r1, r4
 80020cc:	f10d 0006 	add.w	r0, sp, #6
 80020d0:	f001 ff7c 	bl	8003fcc <bme680_get_profile_dur>

  bmes.result = rslt;
 80020d4:	f88d 6078 	strb.w	r6, [sp, #120]	; 0x78
  bmes.min_period = min_sampling_period;
 80020d8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80020dc:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
  bmes.gs = gas_sensor;
 80020e0:	2258      	movs	r2, #88	; 0x58
 80020e2:	4621      	mov	r1, r4
 80020e4:	a81f      	add	r0, sp, #124	; 0x7c
 80020e6:	f011 fca3 	bl	8013a30 <memcpy>

  return bmes;
 80020ea:	225c      	movs	r2, #92	; 0x5c
 80020ec:	a91e      	add	r1, sp, #120	; 0x78
 80020ee:	4628      	mov	r0, r5
 80020f0:	f011 fc9e 	bl	8013a30 <memcpy>

}//bme680 init
 80020f4:	4628      	mov	r0, r5
 80020f6:	b002      	add	sp, #8
 80020f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80020fc:	b004      	add	sp, #16
 80020fe:	4770      	bx	lr
 8002100:	08001fb5 	.word	0x08001fb5
 8002104:	08002005 	.word	0x08002005
 8002108:	08001f09 	.word	0x08001f09

0800210c <EnvSensors_Init>:
{
 800210c:	b570      	push	{r4, r5, r6, lr}
 800210e:	b0c4      	sub	sp, #272	; 0x110
  bmes = bme680Init(gas_sensor, rslt, bmes);
 8002110:	4d0f      	ldr	r5, [pc, #60]	; (8002150 <EnvSensors_Init+0x44>)
 8002112:	4c10      	ldr	r4, [pc, #64]	; (8002154 <EnvSensors_Init+0x48>)
 8002114:	265c      	movs	r6, #92	; 0x5c
 8002116:	4632      	mov	r2, r6
 8002118:	4629      	mov	r1, r5
 800211a:	a814      	add	r0, sp, #80	; 0x50
 800211c:	f011 fc88 	bl	8013a30 <memcpy>
 8002120:	4b0d      	ldr	r3, [pc, #52]	; (8002158 <EnvSensors_Init+0x4c>)
 8002122:	f993 3000 	ldrsb.w	r3, [r3]
 8002126:	9313      	str	r3, [sp, #76]	; 0x4c
 8002128:	224c      	movs	r2, #76	; 0x4c
 800212a:	f104 010c 	add.w	r1, r4, #12
 800212e:	4668      	mov	r0, sp
 8002130:	f011 fc7e 	bl	8013a30 <memcpy>
 8002134:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8002138:	a82c      	add	r0, sp, #176	; 0xb0
 800213a:	f7ff ff8f 	bl	800205c <bme680Init>
 800213e:	4632      	mov	r2, r6
 8002140:	a92c      	add	r1, sp, #176	; 0xb0
 8002142:	4628      	mov	r0, r5
 8002144:	f011 fc74 	bl	8013a30 <memcpy>
}
 8002148:	2000      	movs	r0, #0
 800214a:	b044      	add	sp, #272	; 0x110
 800214c:	bd70      	pop	{r4, r5, r6, pc}
 800214e:	bf00      	nop
 8002150:	2000029c 	.word	0x2000029c
 8002154:	2000030c 	.word	0x2000030c
 8002158:	200003c8 	.word	0x200003c8

0800215c <bme680TakeSample>:

void bme680TakeSample(sensor_t *sensor_data, char i2c_reading_buf[100], int8_t rslt, struct bme680_field_data data, uint16_t min_sampling_period, struct bme680_dev gas_sensor) {
 800215c:	b082      	sub	sp, #8
 800215e:	b510      	push	{r4, lr}
 8002160:	4604      	mov	r4, r0
 8002162:	9303      	str	r3, [sp, #12]

	//------------------------Take sample using BME-----------------------------------

	// Allow BME680 to sample environment
	HAL_Delay(min_sampling_period);
 8002164:	f8bd 0020 	ldrh.w	r0, [sp, #32]
 8002168:	f7ff fece 	bl	8001f08 <HAL_Delay>

	// Query the sample data
	rslt = bme680_get_sensor_data(&data, &gas_sensor);
 800216c:	a909      	add	r1, sp, #36	; 0x24
 800216e:	a803      	add	r0, sp, #12
 8002170:	f001 ff66 	bl	8004040 <bme680_get_sensor_data>

	sensor_data->humidity    = data.humidity / 1000;
 8002174:	9b06      	ldr	r3, [sp, #24]
 8002176:	4a0c      	ldr	r2, [pc, #48]	; (80021a8 <bme680TakeSample+0x4c>)
 8002178:	fba2 2303 	umull	r2, r3, r2, r3
 800217c:	099b      	lsrs	r3, r3, #6
 800217e:	60a3      	str	r3, [r4, #8]
	sensor_data->temperature = data.temperature;
 8002180:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8002184:	6063      	str	r3, [r4, #4]
	sensor_data->pressure    = data.pressure;
 8002186:	9805      	ldr	r0, [sp, #20]
 8002188:	f7fe fd82 	bl	8000c90 <__aeabi_ui2f>
 800218c:	6020      	str	r0, [r4, #0]

	// Request the next sample
	if (gas_sensor.power_mode == BME680_FORCED_MODE) {
 800218e:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 8002192:	2b01      	cmp	r3, #1
 8002194:	d003      	beq.n	800219e <bme680TakeSample+0x42>
	  rslt = bme680_set_sensor_mode(&gas_sensor);
	}

	//------------------------Finish BME sample--------------------------------

} // bme680TakeSample function
 8002196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800219a:	b002      	add	sp, #8
 800219c:	4770      	bx	lr
	  rslt = bme680_set_sensor_mode(&gas_sensor);
 800219e:	a809      	add	r0, sp, #36	; 0x24
 80021a0:	f001 fd85 	bl	8003cae <bme680_set_sensor_mode>
} // bme680TakeSample function
 80021a4:	e7f7      	b.n	8002196 <bme680TakeSample+0x3a>
 80021a6:	bf00      	nop
 80021a8:	10624dd3 	.word	0x10624dd3

080021ac <EnvSensors_Read>:
{
 80021ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ae:	b09d      	sub	sp, #116	; 0x74
 80021b0:	4604      	mov	r4, r0
  TEMPERATURE_Value = (SYS_GetTemperatureLevel() >> 8);
 80021b2:	f7ff f9bf 	bl	8001534 <SYS_GetTemperatureLevel>
 80021b6:	f340 200f 	sbfx	r0, r0, #8, #16
  sensor_data->humidity    = HUMIDITY_Value;
 80021ba:	2332      	movs	r3, #50	; 0x32
 80021bc:	60a3      	str	r3, [r4, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 80021be:	6060      	str	r0, [r4, #4]
  sensor_data->pressure    = PRESSURE_Value;
 80021c0:	4b0e      	ldr	r3, [pc, #56]	; (80021fc <EnvSensors_Read+0x50>)
 80021c2:	6023      	str	r3, [r4, #0]
  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 80021c4:	4b0e      	ldr	r3, [pc, #56]	; (8002200 <EnvSensors_Read+0x54>)
 80021c6:	60e3      	str	r3, [r4, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 80021c8:	4b0e      	ldr	r3, [pc, #56]	; (8002204 <EnvSensors_Read+0x58>)
 80021ca:	6123      	str	r3, [r4, #16]
  bme680TakeSample(sensor_data, i2c_reading_buf, bmes.result, data, bmes.min_period, bmes.gs);
 80021cc:	4d0e      	ldr	r5, [pc, #56]	; (8002208 <EnvSensors_Read+0x5c>)
 80021ce:	4e0f      	ldr	r6, [pc, #60]	; (800220c <EnvSensors_Read+0x60>)
 80021d0:	4631      	mov	r1, r6
 80021d2:	f911 7b04 	ldrsb.w	r7, [r1], #4
 80021d6:	2258      	movs	r2, #88	; 0x58
 80021d8:	a805      	add	r0, sp, #20
 80021da:	f011 fc29 	bl	8013a30 <memcpy>
 80021de:	8873      	ldrh	r3, [r6, #2]
 80021e0:	9304      	str	r3, [sp, #16]
 80021e2:	1d2b      	adds	r3, r5, #4
 80021e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021e6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80021ea:	682b      	ldr	r3, [r5, #0]
 80021ec:	463a      	mov	r2, r7
 80021ee:	4908      	ldr	r1, [pc, #32]	; (8002210 <EnvSensors_Read+0x64>)
 80021f0:	4620      	mov	r0, r4
 80021f2:	f7ff ffb3 	bl	800215c <bme680TakeSample>
}
 80021f6:	2000      	movs	r0, #0
 80021f8:	b01d      	add	sp, #116	; 0x74
 80021fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021fc:	447a0000 	.word	0x447a0000
 8002200:	003e090d 	.word	0x003e090d
 8002204:	000503ab 	.word	0x000503ab
 8002208:	200002f8 	.word	0x200002f8
 800220c:	2000029c 	.word	0x2000029c
 8002210:	20000364 	.word	0x20000364

08002214 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002214:	b510      	push	{r4, lr}
 8002216:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002218:	4a0c      	ldr	r2, [pc, #48]	; (800224c <_sbrk+0x38>)
 800221a:	490d      	ldr	r1, [pc, #52]	; (8002250 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800221c:	480d      	ldr	r0, [pc, #52]	; (8002254 <_sbrk+0x40>)
 800221e:	6800      	ldr	r0, [r0, #0]
 8002220:	b140      	cbz	r0, 8002234 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002222:	480c      	ldr	r0, [pc, #48]	; (8002254 <_sbrk+0x40>)
 8002224:	6800      	ldr	r0, [r0, #0]
 8002226:	4403      	add	r3, r0
 8002228:	1a52      	subs	r2, r2, r1
 800222a:	4293      	cmp	r3, r2
 800222c:	d806      	bhi.n	800223c <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800222e:	4a09      	ldr	r2, [pc, #36]	; (8002254 <_sbrk+0x40>)
 8002230:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8002232:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002234:	4807      	ldr	r0, [pc, #28]	; (8002254 <_sbrk+0x40>)
 8002236:	4c08      	ldr	r4, [pc, #32]	; (8002258 <_sbrk+0x44>)
 8002238:	6004      	str	r4, [r0, #0]
 800223a:	e7f2      	b.n	8002222 <_sbrk+0xe>
    errno = ENOMEM;
 800223c:	f011 fbbe 	bl	80139bc <__errno>
 8002240:	230c      	movs	r3, #12
 8002242:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002244:	f04f 30ff 	mov.w	r0, #4294967295
 8002248:	e7f3      	b.n	8002232 <_sbrk+0x1e>
 800224a:	bf00      	nop
 800224c:	20008000 	.word	0x20008000
 8002250:	00000800 	.word	0x00000800
 8002254:	200003cc 	.word	0x200003cc
 8002258:	20001738 	.word	0x20001738

0800225c <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 800225c:	4b06      	ldr	r3, [pc, #24]	; (8002278 <TIMER_IF_SetTimerContext+0x1c>)
 800225e:	6898      	ldr	r0, [r3, #8]
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002260:	e001      	b.n	8002266 <TIMER_IF_SetTimerContext+0xa>
 8002262:	4b05      	ldr	r3, [pc, #20]	; (8002278 <TIMER_IF_SetTimerContext+0x1c>)
 8002264:	6898      	ldr	r0, [r3, #8]
 8002266:	4b04      	ldr	r3, [pc, #16]	; (8002278 <TIMER_IF_SetTimerContext+0x1c>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	4283      	cmp	r3, r0
 800226c:	d1f9      	bne.n	8002262 <TIMER_IF_SetTimerContext+0x6>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
  }
  return UINT32_MAX - ssr;
 800226e:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 8002270:	4b02      	ldr	r3, [pc, #8]	; (800227c <TIMER_IF_SetTimerContext+0x20>)
 8002272:	6018      	str	r0, [r3, #0]
}
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	40002800 	.word	0x40002800
 800227c:	200003d4 	.word	0x200003d4

08002280 <TIMER_IF_GetTimerContext>:
}
 8002280:	4b01      	ldr	r3, [pc, #4]	; (8002288 <TIMER_IF_GetTimerContext+0x8>)
 8002282:	6818      	ldr	r0, [r3, #0]
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	200003d4 	.word	0x200003d4

0800228c <TIMER_IF_GetTimerElapsedTime>:
 800228c:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 800228e:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002290:	e001      	b.n	8002296 <TIMER_IF_GetTimerElapsedTime+0xa>
 8002292:	4b05      	ldr	r3, [pc, #20]	; (80022a8 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8002294:	6898      	ldr	r0, [r3, #8]
 8002296:	4b04      	ldr	r3, [pc, #16]	; (80022a8 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	4283      	cmp	r3, r0
 800229c:	d1f9      	bne.n	8002292 <TIMER_IF_GetTimerElapsedTime+0x6>
  return UINT32_MAX - ssr;
 800229e:	43c0      	mvns	r0, r0
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 80022a0:	4b02      	ldr	r3, [pc, #8]	; (80022ac <TIMER_IF_GetTimerElapsedTime+0x20>)
 80022a2:	681b      	ldr	r3, [r3, #0]
}
 80022a4:	1ac0      	subs	r0, r0, r3
 80022a6:	4770      	bx	lr
 80022a8:	40002800 	.word	0x40002800
 80022ac:	200003d4 	.word	0x200003d4

080022b0 <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 80022b0:	4b07      	ldr	r3, [pc, #28]	; (80022d0 <TIMER_IF_GetTimerValue+0x20>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	b153      	cbz	r3, 80022cc <TIMER_IF_GetTimerValue+0x1c>
 80022b6:	4b07      	ldr	r3, [pc, #28]	; (80022d4 <TIMER_IF_GetTimerValue+0x24>)
 80022b8:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80022ba:	e001      	b.n	80022c0 <TIMER_IF_GetTimerValue+0x10>
 80022bc:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <TIMER_IF_GetTimerValue+0x24>)
 80022be:	6898      	ldr	r0, [r3, #8]
 80022c0:	4b04      	ldr	r3, [pc, #16]	; (80022d4 <TIMER_IF_GetTimerValue+0x24>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	4283      	cmp	r3, r0
 80022c6:	d1f9      	bne.n	80022bc <TIMER_IF_GetTimerValue+0xc>
  return UINT32_MAX - ssr;
 80022c8:	43c0      	mvns	r0, r0
 80022ca:	4770      	bx	lr
  uint32_t ret = 0;
 80022cc:	2000      	movs	r0, #0
}
 80022ce:	4770      	bx	lr
 80022d0:	200003d0 	.word	0x200003d0
 80022d4:	40002800 	.word	0x40002800

080022d8 <TIMER_IF_GetMinimumTimeout>:
}
 80022d8:	2003      	movs	r0, #3
 80022da:	4770      	bx	lr

080022dc <TIMER_IF_Convert_ms2Tick>:
{
 80022dc:	b508      	push	{r3, lr}
 80022de:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 80022e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022e4:	2300      	movs	r3, #0
 80022e6:	0280      	lsls	r0, r0, #10
 80022e8:	0d89      	lsrs	r1, r1, #22
 80022ea:	f7fe feef 	bl	80010cc <__aeabi_uldivmod>
}
 80022ee:	bd08      	pop	{r3, pc}

080022f0 <TIMER_IF_Convert_Tick2ms>:
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 80022f0:	0ec2      	lsrs	r2, r0, #27
 80022f2:	0143      	lsls	r3, r0, #5
 80022f4:	1a1b      	subs	r3, r3, r0
 80022f6:	f162 0200 	sbc.w	r2, r2, #0
 80022fa:	0092      	lsls	r2, r2, #2
 80022fc:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	181b      	adds	r3, r3, r0
 8002304:	f142 0000 	adc.w	r0, r2, #0
 8002308:	00c0      	lsls	r0, r0, #3
 800230a:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 800230e:	f3c3 13d5 	ubfx	r3, r3, #7, #22
}
 8002312:	ea43 5080 	orr.w	r0, r3, r0, lsl #22
 8002316:	4770      	bx	lr

08002318 <TIMER_IF_StopTimer>:
{
 8002318:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800231a:	4b07      	ldr	r3, [pc, #28]	; (8002338 <TIMER_IF_StopTimer+0x20>)
 800231c:	2201      	movs	r2, #1
 800231e:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002320:	4c06      	ldr	r4, [pc, #24]	; (800233c <TIMER_IF_StopTimer+0x24>)
 8002322:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002326:	4620      	mov	r0, r4
 8002328:	f004 fd94 	bl	8006e54 <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800232c:	f04f 33ff 	mov.w	r3, #4294967295
 8002330:	6323      	str	r3, [r4, #48]	; 0x30
}
 8002332:	2000      	movs	r0, #0
 8002334:	bd10      	pop	{r4, pc}
 8002336:	bf00      	nop
 8002338:	40002800 	.word	0x40002800
 800233c:	20000254 	.word	0x20000254

08002340 <TIMER_IF_BkUp_Write_MSBticks>:
{
 8002340:	b508      	push	{r3, lr}
 8002342:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002344:	2102      	movs	r1, #2
 8002346:	4802      	ldr	r0, [pc, #8]	; (8002350 <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 8002348:	f004 ffc7 	bl	80072da <HAL_RTCEx_BKUPWrite>
}
 800234c:	bd08      	pop	{r3, pc}
 800234e:	bf00      	nop
 8002350:	20000254 	.word	0x20000254

08002354 <TIMER_IF_Init>:
{
 8002354:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 8002356:	4b0f      	ldr	r3, [pc, #60]	; (8002394 <TIMER_IF_Init+0x40>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	b10b      	cbz	r3, 8002360 <TIMER_IF_Init+0xc>
}
 800235c:	2000      	movs	r0, #0
 800235e:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002360:	4c0d      	ldr	r4, [pc, #52]	; (8002398 <TIMER_IF_Init+0x44>)
 8002362:	f04f 35ff 	mov.w	r5, #4294967295
 8002366:	6325      	str	r5, [r4, #48]	; 0x30
    MX_RTC_Init();
 8002368:	f7ff fbdc 	bl	8001b24 <MX_RTC_Init>
    TIMER_IF_StopTimer();
 800236c:	f7ff ffd4 	bl	8002318 <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002370:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002374:	4620      	mov	r0, r4
 8002376:	f004 fd6d 	bl	8006e54 <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800237a:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 800237c:	4620      	mov	r0, r4
 800237e:	f004 ff4b 	bl	8007218 <HAL_RTCEx_EnableBypassShadow>
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002382:	2000      	movs	r0, #0
 8002384:	f7ff ffdc 	bl	8002340 <TIMER_IF_BkUp_Write_MSBticks>
    TIMER_IF_SetTimerContext();
 8002388:	f7ff ff68 	bl	800225c <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 800238c:	4b01      	ldr	r3, [pc, #4]	; (8002394 <TIMER_IF_Init+0x40>)
 800238e:	2201      	movs	r2, #1
 8002390:	701a      	strb	r2, [r3, #0]
 8002392:	e7e3      	b.n	800235c <TIMER_IF_Init+0x8>
 8002394:	200003d0 	.word	0x200003d0
 8002398:	20000254 	.word	0x20000254

0800239c <TIMER_IF_BkUp_Write_Seconds>:
{
 800239c:	b508      	push	{r3, lr}
 800239e:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 80023a0:	2100      	movs	r1, #0
 80023a2:	4802      	ldr	r0, [pc, #8]	; (80023ac <TIMER_IF_BkUp_Write_Seconds+0x10>)
 80023a4:	f004 ff99 	bl	80072da <HAL_RTCEx_BKUPWrite>
}
 80023a8:	bd08      	pop	{r3, pc}
 80023aa:	bf00      	nop
 80023ac:	20000254 	.word	0x20000254

080023b0 <TIMER_IF_BkUp_Write_SubSeconds>:
{
 80023b0:	b508      	push	{r3, lr}
 80023b2:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 80023b4:	2101      	movs	r1, #1
 80023b6:	4802      	ldr	r0, [pc, #8]	; (80023c0 <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 80023b8:	f004 ff8f 	bl	80072da <HAL_RTCEx_BKUPWrite>
}
 80023bc:	bd08      	pop	{r3, pc}
 80023be:	bf00      	nop
 80023c0:	20000254 	.word	0x20000254

080023c4 <TIMER_IF_StartTimer>:
{
 80023c4:	b510      	push	{r4, lr}
 80023c6:	b08c      	sub	sp, #48	; 0x30
 80023c8:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 80023ca:	222c      	movs	r2, #44	; 0x2c
 80023cc:	2100      	movs	r1, #0
 80023ce:	a801      	add	r0, sp, #4
 80023d0:	f011 fb3c 	bl	8013a4c <memset>
  TIMER_IF_StopTimer();
 80023d4:	f7ff ffa0 	bl	8002318 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 80023d8:	4b0c      	ldr	r3, [pc, #48]	; (800240c <TIMER_IF_StartTimer+0x48>)
 80023da:	6818      	ldr	r0, [r3, #0]
 80023dc:	4404      	add	r4, r0
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80023de:	2300      	movs	r3, #0
 80023e0:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 80023e2:	43e4      	mvns	r4, r4
 80023e4:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80023e6:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80023e8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80023ec:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 80023ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023f2:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80023f4:	2201      	movs	r2, #1
 80023f6:	a901      	add	r1, sp, #4
 80023f8:	4805      	ldr	r0, [pc, #20]	; (8002410 <TIMER_IF_StartTimer+0x4c>)
 80023fa:	f004 fe51 	bl	80070a0 <HAL_RTC_SetAlarm_IT>
 80023fe:	b910      	cbnz	r0, 8002406 <TIMER_IF_StartTimer+0x42>
}
 8002400:	2000      	movs	r0, #0
 8002402:	b00c      	add	sp, #48	; 0x30
 8002404:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002406:	f7ff fb35 	bl	8001a74 <Error_Handler>
 800240a:	e7f9      	b.n	8002400 <TIMER_IF_StartTimer+0x3c>
 800240c:	200003d4 	.word	0x200003d4
 8002410:	20000254 	.word	0x20000254

08002414 <TIMER_IF_BkUp_Read_MSBticks>:
{
 8002414:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8002416:	2102      	movs	r1, #2
 8002418:	4801      	ldr	r0, [pc, #4]	; (8002420 <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 800241a:	f004 ff65 	bl	80072e8 <HAL_RTCEx_BKUPRead>
}
 800241e:	bd08      	pop	{r3, pc}
 8002420:	20000254 	.word	0x20000254

08002424 <TIMER_IF_GetTime>:
{
 8002424:	b538      	push	{r3, r4, r5, lr}
 8002426:	4605      	mov	r5, r0
 8002428:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <TIMER_IF_GetTime+0x34>)
 800242a:	689c      	ldr	r4, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800242c:	e001      	b.n	8002432 <TIMER_IF_GetTime+0xe>
 800242e:	4b0a      	ldr	r3, [pc, #40]	; (8002458 <TIMER_IF_GetTime+0x34>)
 8002430:	689c      	ldr	r4, [r3, #8]
 8002432:	4a09      	ldr	r2, [pc, #36]	; (8002458 <TIMER_IF_GetTime+0x34>)
 8002434:	6892      	ldr	r2, [r2, #8]
 8002436:	42a2      	cmp	r2, r4
 8002438:	d1f9      	bne.n	800242e <TIMER_IF_GetTime+0xa>
  return UINT32_MAX - ssr;
 800243a:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 800243c:	f7ff ffea 	bl	8002414 <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002440:	4623      	mov	r3, r4
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002442:	0aa4      	lsrs	r4, r4, #10
 8002444:	ea44 5480 	orr.w	r4, r4, r0, lsl #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002448:	f3c3 0009 	ubfx	r0, r3, #0, #10
 800244c:	f7ff ff50 	bl	80022f0 <TIMER_IF_Convert_Tick2ms>
 8002450:	8028      	strh	r0, [r5, #0]
}
 8002452:	4620      	mov	r0, r4
 8002454:	bd38      	pop	{r3, r4, r5, pc}
 8002456:	bf00      	nop
 8002458:	40002800 	.word	0x40002800

0800245c <TIMER_IF_BkUp_Read_Seconds>:
{
 800245c:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 800245e:	2100      	movs	r1, #0
 8002460:	4801      	ldr	r0, [pc, #4]	; (8002468 <TIMER_IF_BkUp_Read_Seconds+0xc>)
 8002462:	f004 ff41 	bl	80072e8 <HAL_RTCEx_BKUPRead>
}
 8002466:	bd08      	pop	{r3, pc}
 8002468:	20000254 	.word	0x20000254

0800246c <TIMER_IF_BkUp_Read_SubSeconds>:
{
 800246c:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 800246e:	2101      	movs	r1, #1
 8002470:	4801      	ldr	r0, [pc, #4]	; (8002478 <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 8002472:	f004 ff39 	bl	80072e8 <HAL_RTCEx_BKUPRead>
}
 8002476:	bd08      	pop	{r3, pc}
 8002478:	20000254 	.word	0x20000254

0800247c <TIMER_IF_DelayMs>:
{
 800247c:	b508      	push	{r3, lr}
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 800247e:	f7ff ff2d 	bl	80022dc <TIMER_IF_Convert_ms2Tick>
 8002482:	4b0d      	ldr	r3, [pc, #52]	; (80024b8 <TIMER_IF_DelayMs+0x3c>)
 8002484:	6899      	ldr	r1, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002486:	e001      	b.n	800248c <TIMER_IF_DelayMs+0x10>
 8002488:	4b0b      	ldr	r3, [pc, #44]	; (80024b8 <TIMER_IF_DelayMs+0x3c>)
 800248a:	6899      	ldr	r1, [r3, #8]
 800248c:	4a0a      	ldr	r2, [pc, #40]	; (80024b8 <TIMER_IF_DelayMs+0x3c>)
 800248e:	6892      	ldr	r2, [r2, #8]
 8002490:	428a      	cmp	r2, r1
 8002492:	d1f9      	bne.n	8002488 <TIMER_IF_DelayMs+0xc>
  return UINT32_MAX - ssr;
 8002494:	43c9      	mvns	r1, r1
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002496:	e00a      	b.n	80024ae <TIMER_IF_DelayMs+0x32>
 8002498:	4b07      	ldr	r3, [pc, #28]	; (80024b8 <TIMER_IF_DelayMs+0x3c>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	4a06      	ldr	r2, [pc, #24]	; (80024b8 <TIMER_IF_DelayMs+0x3c>)
 800249e:	6892      	ldr	r2, [r2, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d1f9      	bne.n	8002498 <TIMER_IF_DelayMs+0x1c>
  return UINT32_MAX - ssr;
 80024a4:	43db      	mvns	r3, r3
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80024a6:	1a5b      	subs	r3, r3, r1
 80024a8:	4283      	cmp	r3, r0
 80024aa:	d203      	bcs.n	80024b4 <TIMER_IF_DelayMs+0x38>
    __NOP();
 80024ac:	bf00      	nop
 80024ae:	4b02      	ldr	r3, [pc, #8]	; (80024b8 <TIMER_IF_DelayMs+0x3c>)
 80024b0:	689b      	ldr	r3, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80024b2:	e7f3      	b.n	800249c <TIMER_IF_DelayMs+0x20>
}
 80024b4:	bd08      	pop	{r3, pc}
 80024b6:	bf00      	nop
 80024b8:	40002800 	.word	0x40002800

080024bc <HAL_RTC_AlarmAEventCallback>:
{
 80024bc:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 80024be:	f011 f8d7 	bl	8013670 <UTIL_TIMER_IRQ_Handler>
}
 80024c2:	bd08      	pop	{r3, pc}

080024c4 <HAL_RTCEx_SSRUEventCallback>:
{
 80024c4:	b508      	push	{r3, lr}
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 80024c6:	f7ff ffa5 	bl	8002414 <TIMER_IF_BkUp_Read_MSBticks>
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 80024ca:	3001      	adds	r0, #1
 80024cc:	f7ff ff38 	bl	8002340 <TIMER_IF_BkUp_Write_MSBticks>
}
 80024d0:	bd08      	pop	{r3, pc}
	...

080024d4 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80024d4:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024d6:	4817      	ldr	r0, [pc, #92]	; (8002534 <MX_USART2_UART_Init+0x60>)
 80024d8:	4b17      	ldr	r3, [pc, #92]	; (8002538 <MX_USART2_UART_Init+0x64>)
 80024da:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80024dc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80024e0:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024e2:	2300      	movs	r3, #0
 80024e4:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024e6:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024e8:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024ea:	220c      	movs	r2, #12
 80024ec:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ee:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024f0:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024f2:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80024f4:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024f6:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024f8:	f006 f9f5 	bl	80088e6 <HAL_UART_Init>
 80024fc:	b970      	cbnz	r0, 800251c <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024fe:	2100      	movs	r1, #0
 8002500:	480c      	ldr	r0, [pc, #48]	; (8002534 <MX_USART2_UART_Init+0x60>)
 8002502:	f006 fbb2 	bl	8008c6a <HAL_UARTEx_SetTxFifoThreshold>
 8002506:	b960      	cbnz	r0, 8002522 <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002508:	2100      	movs	r1, #0
 800250a:	480a      	ldr	r0, [pc, #40]	; (8002534 <MX_USART2_UART_Init+0x60>)
 800250c:	f006 fbd2 	bl	8008cb4 <HAL_UARTEx_SetRxFifoThreshold>
 8002510:	b950      	cbnz	r0, 8002528 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8002512:	4808      	ldr	r0, [pc, #32]	; (8002534 <MX_USART2_UART_Init+0x60>)
 8002514:	f006 fb85 	bl	8008c22 <HAL_UARTEx_EnableFifoMode>
 8002518:	b948      	cbnz	r0, 800252e <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800251a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800251c:	f7ff faaa 	bl	8001a74 <Error_Handler>
 8002520:	e7ed      	b.n	80024fe <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 8002522:	f7ff faa7 	bl	8001a74 <Error_Handler>
 8002526:	e7ef      	b.n	8002508 <MX_USART2_UART_Init+0x34>
    Error_Handler();
 8002528:	f7ff faa4 	bl	8001a74 <Error_Handler>
 800252c:	e7f1      	b.n	8002512 <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 800252e:	f7ff faa1 	bl	8001a74 <Error_Handler>
}
 8002532:	e7f2      	b.n	800251a <MX_USART2_UART_Init+0x46>
 8002534:	20000438 	.word	0x20000438
 8002538:	40004400 	.word	0x40004400

0800253c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800253c:	b530      	push	{r4, r5, lr}
 800253e:	b097      	sub	sp, #92	; 0x5c
 8002540:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002542:	2100      	movs	r1, #0
 8002544:	9111      	str	r1, [sp, #68]	; 0x44
 8002546:	9112      	str	r1, [sp, #72]	; 0x48
 8002548:	9113      	str	r1, [sp, #76]	; 0x4c
 800254a:	9114      	str	r1, [sp, #80]	; 0x50
 800254c:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800254e:	2238      	movs	r2, #56	; 0x38
 8002550:	a803      	add	r0, sp, #12
 8002552:	f011 fa7b 	bl	8013a4c <memset>
  if(uartHandle->Instance==USART2)
 8002556:	6822      	ldr	r2, [r4, #0]
 8002558:	4b2d      	ldr	r3, [pc, #180]	; (8002610 <HAL_UART_MspInit+0xd4>)
 800255a:	429a      	cmp	r2, r3
 800255c:	d001      	beq.n	8002562 <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800255e:	b017      	add	sp, #92	; 0x5c
 8002560:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002562:	2302      	movs	r3, #2
 8002564:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8002566:	4b2b      	ldr	r3, [pc, #172]	; (8002614 <HAL_UART_MspInit+0xd8>)
 8002568:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800256a:	a803      	add	r0, sp, #12
 800256c:	f004 fb28 	bl	8006bc0 <HAL_RCCEx_PeriphCLKConfig>
 8002570:	2800      	cmp	r0, #0
 8002572:	d144      	bne.n	80025fe <HAL_UART_MspInit+0xc2>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002578:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800257a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800257e:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002580:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002582:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002586:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8002588:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800258a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800258c:	f042 0201 	orr.w	r2, r2, #1
 8002590:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800259a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 800259c:	230c      	movs	r3, #12
 800259e:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a0:	2302      	movs	r3, #2
 80025a2:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a4:	2500      	movs	r5, #0
 80025a6:	9513      	str	r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a8:	2303      	movs	r3, #3
 80025aa:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025ac:	2307      	movs	r3, #7
 80025ae:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b0:	a911      	add	r1, sp, #68	; 0x44
 80025b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025b6:	f002 ff9d 	bl	80054f4 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel5;
 80025ba:	4817      	ldr	r0, [pc, #92]	; (8002618 <HAL_UART_MspInit+0xdc>)
 80025bc:	4b17      	ldr	r3, [pc, #92]	; (800261c <HAL_UART_MspInit+0xe0>)
 80025be:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80025c0:	2314      	movs	r3, #20
 80025c2:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025c4:	2310      	movs	r3, #16
 80025c6:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025c8:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025ca:	2380      	movs	r3, #128	; 0x80
 80025cc:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025ce:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025d0:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80025d2:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80025d4:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80025d6:	f002 fbf5 	bl	8004dc4 <HAL_DMA_Init>
 80025da:	b998      	cbnz	r0, 8002604 <HAL_UART_MspInit+0xc8>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80025dc:	2110      	movs	r1, #16
 80025de:	480e      	ldr	r0, [pc, #56]	; (8002618 <HAL_UART_MspInit+0xdc>)
 80025e0:	f002 fdf2 	bl	80051c8 <HAL_DMA_ConfigChannelAttributes>
 80025e4:	b988      	cbnz	r0, 800260a <HAL_UART_MspInit+0xce>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80025e6:	4b0c      	ldr	r3, [pc, #48]	; (8002618 <HAL_UART_MspInit+0xdc>)
 80025e8:	67a3      	str	r3, [r4, #120]	; 0x78
 80025ea:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 80025ec:	2200      	movs	r2, #0
 80025ee:	2102      	movs	r1, #2
 80025f0:	2025      	movs	r0, #37	; 0x25
 80025f2:	f002 fb1f 	bl	8004c34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80025f6:	2025      	movs	r0, #37	; 0x25
 80025f8:	f002 fb54 	bl	8004ca4 <HAL_NVIC_EnableIRQ>
}
 80025fc:	e7af      	b.n	800255e <HAL_UART_MspInit+0x22>
      Error_Handler();
 80025fe:	f7ff fa39 	bl	8001a74 <Error_Handler>
 8002602:	e7b7      	b.n	8002574 <HAL_UART_MspInit+0x38>
      Error_Handler();
 8002604:	f7ff fa36 	bl	8001a74 <Error_Handler>
 8002608:	e7e8      	b.n	80025dc <HAL_UART_MspInit+0xa0>
      Error_Handler();
 800260a:	f7ff fa33 	bl	8001a74 <Error_Handler>
 800260e:	e7ea      	b.n	80025e6 <HAL_UART_MspInit+0xaa>
 8002610:	40004400 	.word	0x40004400
 8002614:	000c0004 	.word	0x000c0004
 8002618:	200003d8 	.word	0x200003d8
 800261c:	40020058 	.word	0x40020058

08002620 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART2)
 8002620:	6802      	ldr	r2, [r0, #0]
 8002622:	4b0c      	ldr	r3, [pc, #48]	; (8002654 <HAL_UART_MspDeInit+0x34>)
 8002624:	429a      	cmp	r2, r3
 8002626:	d000      	beq.n	800262a <HAL_UART_MspDeInit+0xa>
 8002628:	4770      	bx	lr
{
 800262a:	b510      	push	{r4, lr}
 800262c:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 800262e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002632:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002634:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002638:	6593      	str	r3, [r2, #88]	; 0x58

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 800263a:	210c      	movs	r1, #12
 800263c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002640:	f003 f82a 	bl	8005698 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002644:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8002646:	f002 fc2f 	bl	8004ea8 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800264a:	2025      	movs	r0, #37	; 0x25
 800264c:	f002 fb38 	bl	8004cc0 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8002650:	bd10      	pop	{r4, pc}
 8002652:	bf00      	nop
 8002654:	40004400 	.word	0x40004400

08002658 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002658:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 800265a:	4b07      	ldr	r3, [pc, #28]	; (8002678 <vcom_Init+0x20>)
 800265c:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 800265e:	f7fe ffbf 	bl	80015e0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002662:	f7ff ff37 	bl	80024d4 <MX_USART2_UART_Init>
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002666:	4a05      	ldr	r2, [pc, #20]	; (800267c <vcom_Init+0x24>)
 8002668:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800266c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002670:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002674:	2000      	movs	r0, #0
 8002676:	bd08      	pop	{r3, pc}
 8002678:	200004cc 	.word	0x200004cc
 800267c:	58000800 	.word	0x58000800

08002680 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002680:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8002682:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002686:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002688:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800268c:	639a      	str	r2, [r3, #56]	; 0x38
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 800268e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002690:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002694:	639a      	str	r2, [r3, #56]	; 0x38
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
  __HAL_RCC_USART2_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 8002696:	4804      	ldr	r0, [pc, #16]	; (80026a8 <vcom_DeInit+0x28>)
 8002698:	f7ff ffc2 	bl	8002620 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 800269c:	200f      	movs	r0, #15
 800269e:	f002 fb0f 	bl	8004cc0 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80026a2:	2000      	movs	r0, #0
 80026a4:	bd08      	pop	{r3, pc}
 80026a6:	bf00      	nop
 80026a8:	20000438 	.word	0x20000438

080026ac <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80026ac:	b508      	push	{r3, lr}
 80026ae:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 80026b0:	4601      	mov	r1, r0
 80026b2:	4802      	ldr	r0, [pc, #8]	; (80026bc <vcom_Trace_DMA+0x10>)
 80026b4:	f005 f9e4 	bl	8007a80 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80026b8:	2000      	movs	r0, #0
 80026ba:	bd08      	pop	{r3, pc}
 80026bc:	20000438 	.word	0x20000438

080026c0 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80026c0:	b510      	push	{r4, lr}
 80026c2:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80026c4:	4b12      	ldr	r3, [pc, #72]	; (8002710 <vcom_ReceiveInit+0x50>)
 80026c6:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80026c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80026cc:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 80026ce:	ab02      	add	r3, sp, #8
 80026d0:	e913 0006 	ldmdb	r3, {r1, r2}
 80026d4:	480f      	ldr	r0, [pc, #60]	; (8002714 <vcom_ReceiveInit+0x54>)
 80026d6:	f006 fa4c 	bl	8008b72 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 80026da:	4b0e      	ldr	r3, [pc, #56]	; (8002714 <vcom_ReceiveInit+0x54>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	69da      	ldr	r2, [r3, #28]
 80026e0:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80026e4:	d1f9      	bne.n	80026da <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 80026e6:	69da      	ldr	r2, [r3, #28]
 80026e8:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 80026ec:	d0fb      	beq.n	80026e6 <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80026f4:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 80026f6:	4c07      	ldr	r4, [pc, #28]	; (8002714 <vcom_ReceiveInit+0x54>)
 80026f8:	4620      	mov	r0, r4
 80026fa:	f006 fa7b 	bl	8008bf4 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 80026fe:	2201      	movs	r2, #1
 8002700:	4905      	ldr	r1, [pc, #20]	; (8002718 <vcom_ReceiveInit+0x58>)
 8002702:	4620      	mov	r0, r4
 8002704:	f006 f9c6 	bl	8008a94 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002708:	2000      	movs	r0, #0
 800270a:	b002      	add	sp, #8
 800270c:	bd10      	pop	{r4, pc}
 800270e:	bf00      	nop
 8002710:	200004c8 	.word	0x200004c8
 8002714:	20000438 	.word	0x20000438
 8002718:	200004d0 	.word	0x200004d0

0800271c <vcom_Resume>:

void vcom_Resume(void)
{
 800271c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800271e:	4807      	ldr	r0, [pc, #28]	; (800273c <vcom_Resume+0x20>)
 8002720:	f006 f8e1 	bl	80088e6 <HAL_UART_Init>
 8002724:	b920      	cbnz	r0, 8002730 <vcom_Resume+0x14>
  {
    Error_Handler();
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002726:	4806      	ldr	r0, [pc, #24]	; (8002740 <vcom_Resume+0x24>)
 8002728:	f002 fb4c 	bl	8004dc4 <HAL_DMA_Init>
 800272c:	b918      	cbnz	r0, 8002736 <vcom_Resume+0x1a>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 800272e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002730:	f7ff f9a0 	bl	8001a74 <Error_Handler>
 8002734:	e7f7      	b.n	8002726 <vcom_Resume+0xa>
    Error_Handler();
 8002736:	f7ff f99d 	bl	8001a74 <Error_Handler>
}
 800273a:	e7f8      	b.n	800272e <vcom_Resume+0x12>
 800273c:	20000438 	.word	0x20000438
 8002740:	200003d8 	.word	0x200003d8

08002744 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002744:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 8002746:	6802      	ldr	r2, [r0, #0]
 8002748:	4b04      	ldr	r3, [pc, #16]	; (800275c <HAL_UART_TxCpltCallback+0x18>)
 800274a:	429a      	cmp	r2, r3
 800274c:	d000      	beq.n	8002750 <HAL_UART_TxCpltCallback+0xc>
    TxCpltCallback(NULL);
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 800274e:	bd08      	pop	{r3, pc}
    TxCpltCallback(NULL);
 8002750:	4b03      	ldr	r3, [pc, #12]	; (8002760 <HAL_UART_TxCpltCallback+0x1c>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2000      	movs	r0, #0
 8002756:	4798      	blx	r3
}
 8002758:	e7f9      	b.n	800274e <HAL_UART_TxCpltCallback+0xa>
 800275a:	bf00      	nop
 800275c:	40004400 	.word	0x40004400
 8002760:	200004cc 	.word	0x200004cc

08002764 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 8002764:	6802      	ldr	r2, [r0, #0]
 8002766:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <HAL_UART_RxCpltCallback+0x2c>)
 8002768:	429a      	cmp	r2, r3
 800276a:	d000      	beq.n	800276e <HAL_UART_RxCpltCallback+0xa>
 800276c:	4770      	bx	lr
{
 800276e:	b510      	push	{r4, lr}
 8002770:	4604      	mov	r4, r0
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8002772:	4b08      	ldr	r3, [pc, #32]	; (8002794 <HAL_UART_RxCpltCallback+0x30>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	b12b      	cbz	r3, 8002784 <HAL_UART_RxCpltCallback+0x20>
 8002778:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800277c:	b912      	cbnz	r2, 8002784 <HAL_UART_RxCpltCallback+0x20>
    {
      RxCpltCallback(&charRx, 1, 0);
 800277e:	2101      	movs	r1, #1
 8002780:	4805      	ldr	r0, [pc, #20]	; (8002798 <HAL_UART_RxCpltCallback+0x34>)
 8002782:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8002784:	2201      	movs	r2, #1
 8002786:	4904      	ldr	r1, [pc, #16]	; (8002798 <HAL_UART_RxCpltCallback+0x34>)
 8002788:	4620      	mov	r0, r4
 800278a:	f006 f983 	bl	8008a94 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 800278e:	bd10      	pop	{r4, pc}
 8002790:	40004400 	.word	0x40004400
 8002794:	200004c8 	.word	0x200004c8
 8002798:	200004d0 	.word	0x200004d0

0800279c <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800279c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800279e:	f7ff faf9 	bl	8001d94 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 80027a2:	f000 fc81 	bl	80030a8 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 80027a6:	bd08      	pop	{r3, pc}

080027a8 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 80027a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80027aa:	f04f 30ff 	mov.w	r0, #4294967295
 80027ae:	f010 fcaf 	bl	8013110 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 80027b2:	bd08      	pop	{r3, pc}

080027b4 <OnTxFrameCtrlChanged>:
static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 80027b4:	4b01      	ldr	r3, [pc, #4]	; (80027bc <OnTxFrameCtrlChanged+0x8>)
 80027b6:	70d8      	strb	r0, [r3, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	20000058 	.word	0x20000058

080027c0 <OnPingSlotPeriodicityChanged>:
static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 80027c0:	4b01      	ldr	r3, [pc, #4]	; (80027c8 <OnPingSlotPeriodicityChanged+0x8>)
 80027c2:	7318      	strb	r0, [r3, #12]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	20000058 	.word	0x20000058

080027cc <OnBeaconStatusChange>:
  if (params != NULL)
 80027cc:	2800      	cmp	r0, #0
 80027ce:	d03f      	beq.n	8002850 <OnBeaconStatusChange+0x84>
{
 80027d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027d4:	b08c      	sub	sp, #48	; 0x30
 80027d6:	4603      	mov	r3, r0
    switch (params->State)
 80027d8:	7842      	ldrb	r2, [r0, #1]
 80027da:	2a02      	cmp	r2, #2
 80027dc:	d00a      	beq.n	80027f4 <OnBeaconStatusChange+0x28>
 80027de:	2a03      	cmp	r2, #3
 80027e0:	d02f      	beq.n	8002842 <OnBeaconStatusChange+0x76>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 80027e2:	4b1c      	ldr	r3, [pc, #112]	; (8002854 <OnBeaconStatusChange+0x88>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	4611      	mov	r1, r2
 80027e8:	2002      	movs	r0, #2
 80027ea:	f010 fb33 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
}
 80027ee:	b00c      	add	sp, #48	; 0x30
 80027f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        APP_LOG(TS_OFF, VLEVEL_M,
 80027f4:	7c02      	ldrb	r2, [r0, #16]
 80027f6:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
 80027fa:	f990 0014 	ldrsb.w	r0, [r0, #20]
 80027fe:	7d5c      	ldrb	r4, [r3, #21]
 8002800:	7d9d      	ldrb	r5, [r3, #22]
 8002802:	7dde      	ldrb	r6, [r3, #23]
 8002804:	7e1f      	ldrb	r7, [r3, #24]
 8002806:	f893 c019 	ldrb.w	ip, [r3, #25]
 800280a:	f893 e01a 	ldrb.w	lr, [r3, #26]
 800280e:	f893 801b 	ldrb.w	r8, [r3, #27]
 8002812:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8002816:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 800281a:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800281e:	9708      	str	r7, [sp, #32]
 8002820:	9607      	str	r6, [sp, #28]
 8002822:	9506      	str	r5, [sp, #24]
 8002824:	9405      	str	r4, [sp, #20]
 8002826:	685c      	ldr	r4, [r3, #4]
 8002828:	9404      	str	r4, [sp, #16]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	9303      	str	r3, [sp, #12]
 800282e:	9002      	str	r0, [sp, #8]
 8002830:	9101      	str	r1, [sp, #4]
 8002832:	9200      	str	r2, [sp, #0]
 8002834:	4b08      	ldr	r3, [pc, #32]	; (8002858 <OnBeaconStatusChange+0x8c>)
 8002836:	2200      	movs	r2, #0
 8002838:	4611      	mov	r1, r2
 800283a:	2002      	movs	r0, #2
 800283c:	f010 fb0a 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8002840:	e7d5      	b.n	80027ee <OnBeaconStatusChange+0x22>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 8002842:	4b06      	ldr	r3, [pc, #24]	; (800285c <OnBeaconStatusChange+0x90>)
 8002844:	2200      	movs	r2, #0
 8002846:	4611      	mov	r1, r2
 8002848:	2002      	movs	r0, #2
 800284a:	f010 fb03 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
}
 800284e:	e7ce      	b.n	80027ee <OnBeaconStatusChange+0x22>
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	08013ec8 	.word	0x08013ec8
 8002858:	08013ee0 	.word	0x08013ee0
 800285c:	08013f54 	.word	0x08013f54

08002860 <OnClassChange>:
{
 8002860:	b500      	push	{lr}
 8002862:	b083      	sub	sp, #12
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 8002864:	4b05      	ldr	r3, [pc, #20]	; (800287c <OnClassChange+0x1c>)
 8002866:	5c1b      	ldrb	r3, [r3, r0]
 8002868:	9300      	str	r3, [sp, #0]
 800286a:	4b05      	ldr	r3, [pc, #20]	; (8002880 <OnClassChange+0x20>)
 800286c:	2200      	movs	r2, #0
 800286e:	4611      	mov	r1, r2
 8002870:	2002      	movs	r0, #2
 8002872:	f010 faef 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
}
 8002876:	b003      	add	sp, #12
 8002878:	f85d fb04 	ldr.w	pc, [sp], #4
 800287c:	08013f90 	.word	0x08013f90
 8002880:	08013f74 	.word	0x08013f74

08002884 <OnNvmDataChange>:

  /* USER CODE END StoreContext_Last */
}

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 8002884:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 8002886:	2801      	cmp	r0, #1
 8002888:	d006      	beq.n	8002898 <OnNvmDataChange+0x14>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800288a:	4b07      	ldr	r3, [pc, #28]	; (80028a8 <OnNvmDataChange+0x24>)
 800288c:	2200      	movs	r2, #0
 800288e:	4611      	mov	r1, r2
 8002890:	2002      	movs	r0, #2
 8002892:	f010 fadf 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 8002896:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 8002898:	4b04      	ldr	r3, [pc, #16]	; (80028ac <OnNvmDataChange+0x28>)
 800289a:	2200      	movs	r2, #0
 800289c:	4611      	mov	r1, r2
 800289e:	2002      	movs	r0, #2
 80028a0:	f010 fad8 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
 80028a4:	e7f7      	b.n	8002896 <OnNvmDataChange+0x12>
 80028a6:	bf00      	nop
 80028a8:	08013fa8 	.word	0x08013fa8
 80028ac:	08013f94 	.word	0x08013f94

080028b0 <OnTxTimerEvent>:
{
 80028b0:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 80028b2:	2100      	movs	r1, #0
 80028b4:	2002      	movs	r0, #2
 80028b6:	f010 fbf7 	bl	80130a8 <UTIL_SEQ_SetTask>
  UTIL_TIMER_Start(&TxTimer);
 80028ba:	4802      	ldr	r0, [pc, #8]	; (80028c4 <OnTxTimerEvent+0x14>)
 80028bc:	f010 fe78 	bl	80135b0 <UTIL_TIMER_Start>
}
 80028c0:	bd08      	pop	{r3, pc}
 80028c2:	bf00      	nop
 80028c4:	20000628 	.word	0x20000628

080028c8 <OnMacProcessNotify>:
{
 80028c8:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 80028ca:	2100      	movs	r1, #0
 80028cc:	2001      	movs	r0, #1
 80028ce:	f010 fbeb 	bl	80130a8 <UTIL_SEQ_SetTask>
}
 80028d2:	bd08      	pop	{r3, pc}

080028d4 <OnSystemReset>:
{
 80028d4:	b508      	push	{r3, lr}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 80028d6:	f006 fec9 	bl	800966c <LmHandlerHalt>
 80028da:	b100      	cbz	r0, 80028de <OnSystemReset+0xa>
}
 80028dc:	bd08      	pop	{r3, pc}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 80028de:	f006 fac3 	bl	8008e68 <LmHandlerJoinStatus>
 80028e2:	2801      	cmp	r0, #1
 80028e4:	d1fa      	bne.n	80028dc <OnSystemReset+0x8>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80028e6:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80028ea:	4905      	ldr	r1, [pc, #20]	; (8002900 <OnSystemReset+0x2c>)
 80028ec:	68ca      	ldr	r2, [r1, #12]
 80028ee:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80028f2:	4b04      	ldr	r3, [pc, #16]	; (8002904 <OnSystemReset+0x30>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	60cb      	str	r3, [r1, #12]
 80028f8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80028fc:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80028fe:	e7fd      	b.n	80028fc <OnSystemReset+0x28>
 8002900:	e000ed00 	.word	0xe000ed00
 8002904:	05fa0004 	.word	0x05fa0004

08002908 <OnTxPeriodicityChanged>:
{
 8002908:	b510      	push	{r4, lr}
  TxPeriodicity = periodicity;
 800290a:	4b09      	ldr	r3, [pc, #36]	; (8002930 <OnTxPeriodicityChanged+0x28>)
 800290c:	6018      	str	r0, [r3, #0]
  if (TxPeriodicity == 0)
 800290e:	b908      	cbnz	r0, 8002914 <OnTxPeriodicityChanged+0xc>
    TxPeriodicity = APP_TX_DUTYCYCLE;
 8002910:	4a08      	ldr	r2, [pc, #32]	; (8002934 <OnTxPeriodicityChanged+0x2c>)
 8002912:	601a      	str	r2, [r3, #0]
  UTIL_TIMER_Stop(&TxTimer);
 8002914:	4c08      	ldr	r4, [pc, #32]	; (8002938 <OnTxPeriodicityChanged+0x30>)
 8002916:	4620      	mov	r0, r4
 8002918:	f010 fdf0 	bl	80134fc <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800291c:	4b04      	ldr	r3, [pc, #16]	; (8002930 <OnTxPeriodicityChanged+0x28>)
 800291e:	6819      	ldr	r1, [r3, #0]
 8002920:	4620      	mov	r0, r4
 8002922:	f010 fe8b 	bl	801363c <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 8002926:	4620      	mov	r0, r4
 8002928:	f010 fe42 	bl	80135b0 <UTIL_TIMER_Start>
}
 800292c:	bd10      	pop	{r4, pc}
 800292e:	bf00      	nop
 8002930:	2000006c 	.word	0x2000006c
 8002934:	0001d4c0 	.word	0x0001d4c0
 8002938:	20000628 	.word	0x20000628

0800293c <OnTxData>:
  if ((params != NULL))
 800293c:	2800      	cmp	r0, #0
 800293e:	d042      	beq.n	80029c6 <OnTxData+0x8a>
{
 8002940:	b510      	push	{r4, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	4604      	mov	r4, r0
    if (params->IsMcpsConfirm != 0)
 8002946:	7803      	ldrb	r3, [r0, #0]
 8002948:	b90b      	cbnz	r3, 800294e <OnTxData+0x12>
}
 800294a:	b004      	add	sp, #16
 800294c:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 800294e:	2201      	movs	r2, #1
 8002950:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002954:	481c      	ldr	r0, [pc, #112]	; (80029c8 <OnTxData+0x8c>)
 8002956:	f002 ff1d 	bl	8005794 <HAL_GPIO_WritePin>
      UTIL_TIMER_Start(&TxLedTimer);
 800295a:	481c      	ldr	r0, [pc, #112]	; (80029cc <OnTxData+0x90>)
 800295c:	f010 fe28 	bl	80135b0 <UTIL_TIMER_Start>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 8002960:	4b1b      	ldr	r3, [pc, #108]	; (80029d0 <OnTxData+0x94>)
 8002962:	2200      	movs	r2, #0
 8002964:	4611      	mov	r1, r2
 8002966:	2002      	movs	r0, #2
 8002968:	f010 fa74 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800296c:	7c23      	ldrb	r3, [r4, #16]
 800296e:	f994 200a 	ldrsb.w	r2, [r4, #10]
 8002972:	f994 1018 	ldrsb.w	r1, [r4, #24]
 8002976:	9103      	str	r1, [sp, #12]
 8002978:	9202      	str	r2, [sp, #8]
 800297a:	9301      	str	r3, [sp, #4]
 800297c:	68e3      	ldr	r3, [r4, #12]
 800297e:	9300      	str	r3, [sp, #0]
 8002980:	4b14      	ldr	r3, [pc, #80]	; (80029d4 <OnTxData+0x98>)
 8002982:	2200      	movs	r2, #0
 8002984:	4611      	mov	r1, r2
 8002986:	2003      	movs	r0, #3
 8002988:	f010 fa64 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800298c:	4b12      	ldr	r3, [pc, #72]	; (80029d8 <OnTxData+0x9c>)
 800298e:	2200      	movs	r2, #0
 8002990:	4611      	mov	r1, r2
 8002992:	2003      	movs	r0, #3
 8002994:	f010 fa5e 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 8002998:	7a23      	ldrb	r3, [r4, #8]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d10c      	bne.n	80029b8 <OnTxData+0x7c>
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800299e:	7a63      	ldrb	r3, [r4, #9]
 80029a0:	b143      	cbz	r3, 80029b4 <OnTxData+0x78>
 80029a2:	4b0e      	ldr	r3, [pc, #56]	; (80029dc <OnTxData+0xa0>)
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	4b0e      	ldr	r3, [pc, #56]	; (80029e0 <OnTxData+0xa4>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	4611      	mov	r1, r2
 80029ac:	2003      	movs	r0, #3
 80029ae:	f010 fa51 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
 80029b2:	e7ca      	b.n	800294a <OnTxData+0xe>
 80029b4:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <OnTxData+0xa8>)
 80029b6:	e7f5      	b.n	80029a4 <OnTxData+0x68>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 80029b8:	4b0b      	ldr	r3, [pc, #44]	; (80029e8 <OnTxData+0xac>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	4611      	mov	r1, r2
 80029be:	2003      	movs	r0, #3
 80029c0:	f010 fa48 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
}
 80029c4:	e7c1      	b.n	800294a <OnTxData+0xe>
 80029c6:	4770      	bx	lr
 80029c8:	48000400 	.word	0x48000400
 80029cc:	20000610 	.word	0x20000610
 80029d0:	08013fc8 	.word	0x08013fc8
 80029d4:	08013ffc 	.word	0x08013ffc
 80029d8:	08014030 	.word	0x08014030
 80029dc:	08013fc4 	.word	0x08013fc4
 80029e0:	08014040 	.word	0x08014040
 80029e4:	08013fbc 	.word	0x08013fbc
 80029e8:	08014054 	.word	0x08014054

080029ec <OnJoinRequest>:
  if (joinParams != NULL)
 80029ec:	b358      	cbz	r0, 8002a46 <OnJoinRequest+0x5a>
{
 80029ee:	b510      	push	{r4, lr}
 80029f0:	4604      	mov	r4, r0
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 80029f2:	f990 3005 	ldrsb.w	r3, [r0, #5]
 80029f6:	b9fb      	cbnz	r3, 8002a38 <OnJoinRequest+0x4c>
      UTIL_TIMER_Stop(&JoinLedTimer);
 80029f8:	4813      	ldr	r0, [pc, #76]	; (8002a48 <OnJoinRequest+0x5c>)
 80029fa:	f010 fd7f 	bl	80134fc <UTIL_TIMER_Stop>
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 80029fe:	2200      	movs	r2, #0
 8002a00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a04:	4811      	ldr	r0, [pc, #68]	; (8002a4c <OnJoinRequest+0x60>)
 8002a06:	f002 fec5 	bl	8005794 <HAL_GPIO_WritePin>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 8002a0a:	4b11      	ldr	r3, [pc, #68]	; (8002a50 <OnJoinRequest+0x64>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	4611      	mov	r1, r2
 8002a10:	2002      	movs	r0, #2
 8002a12:	f010 fa1f 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 8002a16:	79a3      	ldrb	r3, [r4, #6]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d006      	beq.n	8002a2a <OnJoinRequest+0x3e>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 8002a1c:	4b0d      	ldr	r3, [pc, #52]	; (8002a54 <OnJoinRequest+0x68>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	4611      	mov	r1, r2
 8002a22:	2002      	movs	r0, #2
 8002a24:	f010 fa16 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
 8002a28:	e00c      	b.n	8002a44 <OnJoinRequest+0x58>
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 8002a2a:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <OnJoinRequest+0x6c>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	4611      	mov	r1, r2
 8002a30:	2002      	movs	r0, #2
 8002a32:	f010 fa0f 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
 8002a36:	e005      	b.n	8002a44 <OnJoinRequest+0x58>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 8002a38:	4b08      	ldr	r3, [pc, #32]	; (8002a5c <OnJoinRequest+0x70>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	4611      	mov	r1, r2
 8002a3e:	2002      	movs	r0, #2
 8002a40:	f010 fa08 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
}
 8002a44:	bd10      	pop	{r4, pc}
 8002a46:	4770      	bx	lr
 8002a48:	200005c8 	.word	0x200005c8
 8002a4c:	48000400 	.word	0x48000400
 8002a50:	08014064 	.word	0x08014064
 8002a54:	0801409c 	.word	0x0801409c
 8002a58:	0801407c 	.word	0x0801407c
 8002a5c:	080140bc 	.word	0x080140bc

08002a60 <OnStopJoinTimerEvent>:
{
 8002a60:	b510      	push	{r4, lr}
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 8002a62:	4b0e      	ldr	r3, [pc, #56]	; (8002a9c <OnStopJoinTimerEvent+0x3c>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d013      	beq.n	8002a92 <OnStopJoinTimerEvent+0x32>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 8002a6a:	4c0d      	ldr	r4, [pc, #52]	; (8002aa0 <OnStopJoinTimerEvent+0x40>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a72:	4620      	mov	r0, r4
 8002a74:	f002 fe8e 	bl	8005794 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a7e:	4620      	mov	r0, r4
 8002a80:	f002 fe88 	bl	8005794 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002a84:	2200      	movs	r2, #0
 8002a86:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a8a:	4620      	mov	r0, r4
 8002a8c:	f002 fe82 	bl	8005794 <HAL_GPIO_WritePin>
}
 8002a90:	bd10      	pop	{r4, pc}
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 8002a92:	2100      	movs	r1, #0
 8002a94:	2008      	movs	r0, #8
 8002a96:	f010 fb07 	bl	80130a8 <UTIL_SEQ_SetTask>
 8002a9a:	e7e6      	b.n	8002a6a <OnStopJoinTimerEvent+0xa>
 8002a9c:	20000000 	.word	0x20000000
 8002aa0:	48000400 	.word	0x48000400

08002aa4 <OnRxTimerLedEvent>:
{
 8002aa4:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002aac:	4801      	ldr	r0, [pc, #4]	; (8002ab4 <OnRxTimerLedEvent+0x10>)
 8002aae:	f002 fe71 	bl	8005794 <HAL_GPIO_WritePin>
}
 8002ab2:	bd08      	pop	{r3, pc}
 8002ab4:	48000400 	.word	0x48000400

08002ab8 <OnTxTimerLedEvent>:
{
 8002ab8:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 8002aba:	2200      	movs	r2, #0
 8002abc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ac0:	4801      	ldr	r0, [pc, #4]	; (8002ac8 <OnTxTimerLedEvent+0x10>)
 8002ac2:	f002 fe67 	bl	8005794 <HAL_GPIO_WritePin>
}
 8002ac6:	bd08      	pop	{r3, pc}
 8002ac8:	48000400 	.word	0x48000400

08002acc <OnRxData>:
  if (params != NULL)
 8002acc:	2900      	cmp	r1, #0
 8002ace:	d06e      	beq.n	8002bae <OnRxData+0xe2>
{
 8002ad0:	b570      	push	{r4, r5, r6, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	4604      	mov	r4, r0
 8002ad6:	460d      	mov	r5, r1
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ade:	4834      	ldr	r0, [pc, #208]	; (8002bb0 <OnRxData+0xe4>)
 8002ae0:	f002 fe58 	bl	8005794 <HAL_GPIO_WritePin>
    UTIL_TIMER_Start(&RxLedTimer);
 8002ae4:	4833      	ldr	r0, [pc, #204]	; (8002bb4 <OnRxData+0xe8>)
 8002ae6:	f010 fd63 	bl	80135b0 <UTIL_TIMER_Start>
    if (params->IsMcpsIndication)
 8002aea:	782e      	ldrb	r6, [r5, #0]
 8002aec:	2e00      	cmp	r6, #0
 8002aee:	d042      	beq.n	8002b76 <OnRxData+0xaa>
      if (appData != NULL)
 8002af0:	2c00      	cmp	r4, #0
 8002af2:	d03f      	beq.n	8002b74 <OnRxData+0xa8>
        RxPort = appData->Port;
 8002af4:	7826      	ldrb	r6, [r4, #0]
        if (appData->Buffer != NULL)
 8002af6:	6863      	ldr	r3, [r4, #4]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d03c      	beq.n	8002b76 <OnRxData+0xaa>
          switch (appData->Port)
 8002afc:	2e02      	cmp	r6, #2
 8002afe:	d016      	beq.n	8002b2e <OnRxData+0x62>
 8002b00:	2e03      	cmp	r6, #3
 8002b02:	d138      	bne.n	8002b76 <OnRxData+0xaa>
              if (appData->BufferSize == 1)
 8002b04:	7862      	ldrb	r2, [r4, #1]
 8002b06:	2a01      	cmp	r2, #1
 8002b08:	d135      	bne.n	8002b76 <OnRxData+0xaa>
                switch (appData->Buffer[0])
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d006      	beq.n	8002b1e <OnRxData+0x52>
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d008      	beq.n	8002b26 <OnRxData+0x5a>
 8002b14:	bb7b      	cbnz	r3, 8002b76 <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_A);
 8002b16:	2000      	movs	r0, #0
 8002b18:	f006 f9b8 	bl	8008e8c <LmHandlerRequestClass>
                    break;
 8002b1c:	e02b      	b.n	8002b76 <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_B);
 8002b1e:	2001      	movs	r0, #1
 8002b20:	f006 f9b4 	bl	8008e8c <LmHandlerRequestClass>
                    break;
 8002b24:	e027      	b.n	8002b76 <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_C);
 8002b26:	2002      	movs	r0, #2
 8002b28:	f006 f9b0 	bl	8008e8c <LmHandlerRequestClass>
                    break;
 8002b2c:	e023      	b.n	8002b76 <OnRxData+0xaa>
              if (appData->BufferSize == 1)
 8002b2e:	7862      	ldrb	r2, [r4, #1]
 8002b30:	2a01      	cmp	r2, #1
 8002b32:	d120      	bne.n	8002b76 <OnRxData+0xaa>
                AppLedStateOn = appData->Buffer[0] & 0x01;
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	4a1f      	ldr	r2, [pc, #124]	; (8002bb8 <OnRxData+0xec>)
 8002b3c:	7013      	strb	r3, [r2, #0]
                if (AppLedStateOn == RESET)
 8002b3e:	b963      	cbnz	r3, 8002b5a <OnRxData+0x8e>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 8002b40:	4b1e      	ldr	r3, [pc, #120]	; (8002bbc <OnRxData+0xf0>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	4611      	mov	r1, r2
 8002b46:	2003      	movs	r0, #3
 8002b48:	f010 f984 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b52:	4817      	ldr	r0, [pc, #92]	; (8002bb0 <OnRxData+0xe4>)
 8002b54:	f002 fe1e 	bl	8005794 <HAL_GPIO_WritePin>
 8002b58:	e00d      	b.n	8002b76 <OnRxData+0xaa>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 8002b5a:	4b19      	ldr	r3, [pc, #100]	; (8002bc0 <OnRxData+0xf4>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	4611      	mov	r1, r2
 8002b60:	2003      	movs	r0, #3
 8002b62:	f010 f977 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 8002b66:	2201      	movs	r2, #1
 8002b68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b6c:	4810      	ldr	r0, [pc, #64]	; (8002bb0 <OnRxData+0xe4>)
 8002b6e:	f002 fe11 	bl	8005794 <HAL_GPIO_WritePin>
 8002b72:	e000      	b.n	8002b76 <OnRxData+0xaa>
  uint8_t RxPort = 0;
 8002b74:	2600      	movs	r6, #0
    if (params->RxSlot < RX_SLOT_NONE)
 8002b76:	7c2b      	ldrb	r3, [r5, #16]
 8002b78:	2b05      	cmp	r3, #5
 8002b7a:	d901      	bls.n	8002b80 <OnRxData+0xb4>
}
 8002b7c:	b006      	add	sp, #24
 8002b7e:	bd70      	pop	{r4, r5, r6, pc}
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 8002b80:	f995 2008 	ldrsb.w	r2, [r5, #8]
 8002b84:	f995 1009 	ldrsb.w	r1, [r5, #9]
 8002b88:	f995 000a 	ldrsb.w	r0, [r5, #10]
 8002b8c:	9005      	str	r0, [sp, #20]
 8002b8e:	9104      	str	r1, [sp, #16]
 8002b90:	490c      	ldr	r1, [pc, #48]	; (8002bc4 <OnRxData+0xf8>)
 8002b92:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002b96:	9303      	str	r3, [sp, #12]
 8002b98:	9202      	str	r2, [sp, #8]
 8002b9a:	9601      	str	r6, [sp, #4]
 8002b9c:	68eb      	ldr	r3, [r5, #12]
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	4b09      	ldr	r3, [pc, #36]	; (8002bc8 <OnRxData+0xfc>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	4611      	mov	r1, r2
 8002ba6:	2003      	movs	r0, #3
 8002ba8:	f010 f954 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
}
 8002bac:	e7e6      	b.n	8002b7c <OnRxData+0xb0>
 8002bae:	4770      	bx	lr
 8002bb0:	48000400 	.word	0x48000400
 8002bb4:	200005e0 	.word	0x200005e0
 8002bb8:	200005c6 	.word	0x200005c6
 8002bbc:	080140d8 	.word	0x080140d8
 8002bc0:	080140e4 	.word	0x080140e4
 8002bc4:	080143a8 	.word	0x080143a8
 8002bc8:	080140f0 	.word	0x080140f0

08002bcc <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8002bcc:	b538      	push	{r3, r4, r5, lr}
 8002bce:	4605      	mov	r5, r0
 8002bd0:	460c      	mov	r4, r1
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (HAL_FLASH_Unlock() == HAL_OK)
 8002bd2:	f002 fb37 	bl	8005244 <HAL_FLASH_Unlock>
 8002bd6:	b100      	cbz	r0, 8002bda <OnStoreContextRequest+0xe>
    HAL_FLASH_Lock();
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 8002bd8:	bd38      	pop	{r3, r4, r5, pc}
    if (FLASH_IF_EraseByPages(PAGE(LORAWAN_NVM_BASE_ADDRESS), 1, 0U) == FLASH_OK)
 8002bda:	4b0f      	ldr	r3, [pc, #60]	; (8002c18 <OnStoreContextRequest+0x4c>)
 8002bdc:	f8d3 05e0 	ldr.w	r0, [r3, #1504]	; 0x5e0
 8002be0:	4b0e      	ldr	r3, [pc, #56]	; (8002c1c <OnStoreContextRequest+0x50>)
 8002be2:	ea03 2080 	and.w	r0, r3, r0, lsl #10
 8002be6:	f44f 337c 	mov.w	r3, #258048	; 0x3f000
 8002bea:	fbb3 f3f0 	udiv	r3, r3, r0
 8002bee:	fb00 f303 	mul.w	r3, r0, r3
 8002bf2:	f5c3 337c 	rsb	r3, r3, #258048	; 0x3f000
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	2101      	movs	r1, #1
 8002bfa:	0ad8      	lsrs	r0, r3, #11
 8002bfc:	f7fe fd8e 	bl	800171c <FLASH_IF_EraseByPages>
 8002c00:	b110      	cbz	r0, 8002c08 <OnStoreContextRequest+0x3c>
    HAL_FLASH_Lock();
 8002c02:	f002 fb37 	bl	8005274 <HAL_FLASH_Lock>
}
 8002c06:	e7e7      	b.n	8002bd8 <OnStoreContextRequest+0xc>
      FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (uint8_t *)nvm, nvm_size, NULL);
 8002c08:	2300      	movs	r3, #0
 8002c0a:	4622      	mov	r2, r4
 8002c0c:	4629      	mov	r1, r5
 8002c0e:	4804      	ldr	r0, [pc, #16]	; (8002c20 <OnStoreContextRequest+0x54>)
 8002c10:	f7fe fda0 	bl	8001754 <FLASH_IF_Write>
 8002c14:	e7f5      	b.n	8002c02 <OnStoreContextRequest+0x36>
 8002c16:	bf00      	nop
 8002c18:	1fff7000 	.word	0x1fff7000
 8002c1c:	03fffc00 	.word	0x03fffc00
 8002c20:	0803f000 	.word	0x0803f000

08002c24 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8002c24:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  UTIL_MEM_cpy_8(nvm, (void *)LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 8002c26:	b28a      	uxth	r2, r1
 8002c28:	4901      	ldr	r1, [pc, #4]	; (8002c30 <OnRestoreContextRequest+0xc>)
 8002c2a:	f010 fa29 	bl	8013080 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 8002c2e:	bd08      	pop	{r3, pc}
 8002c30:	0803f000 	.word	0x0803f000

08002c34 <StopJoin>:
{
 8002c34:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 8002c36:	4c1e      	ldr	r4, [pc, #120]	; (8002cb0 <StopJoin+0x7c>)
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c3e:	4620      	mov	r0, r4
 8002c40:	f002 fda8 	bl	8005794 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 8002c44:	2201      	movs	r2, #1
 8002c46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c4a:	4620      	mov	r0, r4
 8002c4c:	f002 fda2 	bl	8005794 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 8002c50:	2201      	movs	r2, #1
 8002c52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c56:	4620      	mov	r0, r4
 8002c58:	f002 fd9c 	bl	8005794 <HAL_GPIO_WritePin>
  UTIL_TIMER_Stop(&TxTimer);
 8002c5c:	4815      	ldr	r0, [pc, #84]	; (8002cb4 <StopJoin+0x80>)
 8002c5e:	f010 fc4d 	bl	80134fc <UTIL_TIMER_Stop>
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 8002c62:	f006 fcfb 	bl	800965c <LmHandlerStop>
 8002c66:	b148      	cbz	r0, 8002c7c <StopJoin+0x48>
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 8002c68:	4b13      	ldr	r3, [pc, #76]	; (8002cb8 <StopJoin+0x84>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	4611      	mov	r1, r2
 8002c6e:	2002      	movs	r0, #2
 8002c70:	f010 f8f0 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Start(&StopJoinTimer);
 8002c74:	4811      	ldr	r0, [pc, #68]	; (8002cbc <StopJoin+0x88>)
 8002c76:	f010 fc9b 	bl	80135b0 <UTIL_TIMER_Start>
}
 8002c7a:	bd38      	pop	{r3, r4, r5, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 8002c7c:	4b10      	ldr	r3, [pc, #64]	; (8002cc0 <StopJoin+0x8c>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	4611      	mov	r1, r2
 8002c82:	2002      	movs	r0, #2
 8002c84:	f010 f8e6 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_ABP;
 8002c88:	4c0e      	ldr	r4, [pc, #56]	; (8002cc4 <StopJoin+0x90>)
 8002c8a:	2501      	movs	r5, #1
 8002c8c:	7025      	strb	r5, [r4, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 8002c8e:	4b0e      	ldr	r3, [pc, #56]	; (8002cc8 <StopJoin+0x94>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	4611      	mov	r1, r2
 8002c94:	2002      	movs	r0, #2
 8002c96:	f010 f8dd 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
    LmHandlerConfigure(&LmHandlerParams);
 8002c9a:	480c      	ldr	r0, [pc, #48]	; (8002ccc <StopJoin+0x98>)
 8002c9c:	f006 fb68 	bl	8009370 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 8002ca0:	4629      	mov	r1, r5
 8002ca2:	7820      	ldrb	r0, [r4, #0]
 8002ca4:	f006 f94e 	bl	8008f44 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 8002ca8:	4802      	ldr	r0, [pc, #8]	; (8002cb4 <StopJoin+0x80>)
 8002caa:	f010 fc81 	bl	80135b0 <UTIL_TIMER_Start>
 8002cae:	e7e1      	b.n	8002c74 <StopJoin+0x40>
 8002cb0:	48000400 	.word	0x48000400
 8002cb4:	20000628 	.word	0x20000628
 8002cb8:	08014138 	.word	0x08014138
 8002cbc:	200005f8 	.word	0x200005f8
 8002cc0:	08014158 	.word	0x08014158
 8002cc4:	20000000 	.word	0x20000000
 8002cc8:	0801416c 	.word	0x0801416c
 8002ccc:	20000058 	.word	0x20000058

08002cd0 <StoreContext>:
{
 8002cd0:	b508      	push	{r3, lr}
  status = LmHandlerNvmDataStore();
 8002cd2:	f006 fcd3 	bl	800967c <LmHandlerNvmDataStore>
  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 8002cd6:	f110 0f08 	cmn.w	r0, #8
 8002cda:	d003      	beq.n	8002ce4 <StoreContext+0x14>
  else if (status == LORAMAC_HANDLER_ERROR)
 8002cdc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002ce0:	d007      	beq.n	8002cf2 <StoreContext+0x22>
}
 8002ce2:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 8002ce4:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <StoreContext+0x30>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	4611      	mov	r1, r2
 8002cea:	2002      	movs	r0, #2
 8002cec:	f010 f8b2 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
 8002cf0:	e7f7      	b.n	8002ce2 <StoreContext+0x12>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 8002cf2:	4b04      	ldr	r3, [pc, #16]	; (8002d04 <StoreContext+0x34>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	4611      	mov	r1, r2
 8002cf8:	2002      	movs	r0, #2
 8002cfa:	f010 f8ab 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
}
 8002cfe:	e7f0      	b.n	8002ce2 <StoreContext+0x12>
 8002d00:	0801418c 	.word	0x0801418c
 8002d04:	080141a4 	.word	0x080141a4

08002d08 <SendTxData>:
{
 8002d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d0c:	b08d      	sub	sp, #52	; 0x34
  uint8_t batteryLevel = GetBatteryLevel();
 8002d0e:	f7ff f871 	bl	8001df4 <GetBatteryLevel>
 8002d12:	4680      	mov	r8, r0
  EnvSensors_Init();
 8002d14:	f7ff f9fa 	bl	800210c <EnvSensors_Init>
  EnvSensors_Read(&sensor_data);
 8002d18:	a805      	add	r0, sp, #20
 8002d1a:	f7ff fa47 	bl	80021ac <EnvSensors_Read>
  windValues[windCounts++] = windTips*0.02/3;
 8002d1e:	4bc2      	ldr	r3, [pc, #776]	; (8003028 <SendTxData+0x320>)
 8002d20:	6818      	ldr	r0, [r3, #0]
 8002d22:	f7fd fb83 	bl	800042c <__aeabi_i2d>
 8002d26:	a3be      	add	r3, pc, #760	; (adr r3, 8003020 <SendTxData+0x318>)
 8002d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2c:	f7fd fbe8 	bl	8000500 <__aeabi_dmul>
 8002d30:	4bbe      	ldr	r3, [pc, #760]	; (800302c <SendTxData+0x324>)
 8002d32:	681d      	ldr	r5, [r3, #0]
 8002d34:	1c6c      	adds	r4, r5, #1
 8002d36:	601c      	str	r4, [r3, #0]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	4bbd      	ldr	r3, [pc, #756]	; (8003030 <SendTxData+0x328>)
 8002d3c:	f7fd fd0a 	bl	8000754 <__aeabi_ddiv>
 8002d40:	f7fd fea0 	bl	8000a84 <__aeabi_d2f>
 8002d44:	4bbb      	ldr	r3, [pc, #748]	; (8003034 <SendTxData+0x32c>)
 8002d46:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
  if(windCounts > 60) {
 8002d4a:	2c3c      	cmp	r4, #60	; 0x3c
 8002d4c:	dd02      	ble.n	8002d54 <SendTxData+0x4c>
	windCounts = 0;
 8002d4e:	4bb7      	ldr	r3, [pc, #732]	; (800302c <SendTxData+0x324>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]
{
 8002d54:	2400      	movs	r4, #0
 8002d56:	e008      	b.n	8002d6a <SendTxData+0x62>
	avgWindSpeed += windValues[i];
 8002d58:	4db7      	ldr	r5, [pc, #732]	; (8003038 <SendTxData+0x330>)
 8002d5a:	4bb6      	ldr	r3, [pc, #728]	; (8003034 <SendTxData+0x32c>)
 8002d5c:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8002d60:	6828      	ldr	r0, [r5, #0]
 8002d62:	f7fd fee5 	bl	8000b30 <__addsf3>
 8002d66:	6028      	str	r0, [r5, #0]
  for(int i = 0; i<60; i++) {
 8002d68:	3401      	adds	r4, #1
 8002d6a:	2c3b      	cmp	r4, #59	; 0x3b
 8002d6c:	ddf4      	ble.n	8002d58 <SendTxData+0x50>
  if(windCounts < 60) {
 8002d6e:	4baf      	ldr	r3, [pc, #700]	; (800302c <SendTxData+0x324>)
 8002d70:	6818      	ldr	r0, [r3, #0]
 8002d72:	283b      	cmp	r0, #59	; 0x3b
 8002d74:	f300 80dc 	bgt.w	8002f30 <SendTxData+0x228>
	avgWindSpeed = avgWindSpeed / windCounts;
 8002d78:	4caf      	ldr	r4, [pc, #700]	; (8003038 <SendTxData+0x330>)
 8002d7a:	f7fd ff8d 	bl	8000c98 <__aeabi_i2f>
 8002d7e:	4601      	mov	r1, r0
 8002d80:	6820      	ldr	r0, [r4, #0]
 8002d82:	f7fe f891 	bl	8000ea8 <__aeabi_fdiv>
 8002d86:	6020      	str	r0, [r4, #0]
  windTips = 0;
 8002d88:	f8df a29c 	ldr.w	sl, [pc, #668]	; 8003028 <SendTxData+0x320>
 8002d8c:	2400      	movs	r4, #0
 8002d8e:	f8ca 4000 	str.w	r4, [sl]
  tmp.flt = (float)sensor_data.temperature/100;
 8002d92:	9806      	ldr	r0, [sp, #24]
 8002d94:	f7fd ff80 	bl	8000c98 <__aeabi_i2f>
 8002d98:	49a8      	ldr	r1, [pc, #672]	; (800303c <SendTxData+0x334>)
 8002d9a:	f7fe f885 	bl	8000ea8 <__aeabi_fdiv>
 8002d9e:	4606      	mov	r6, r0
  rain.flt = (float)rainFallInMM/1000;
 8002da0:	f8df b29c 	ldr.w	fp, [pc, #668]	; 8003040 <SendTxData+0x338>
 8002da4:	49a7      	ldr	r1, [pc, #668]	; (8003044 <SendTxData+0x33c>)
 8002da6:	f8db 0000 	ldr.w	r0, [fp]
 8002daa:	f7fe f87d 	bl	8000ea8 <__aeabi_fdiv>
 8002dae:	9003      	str	r0, [sp, #12]
  pres.flt = (float)sensor_data.pressure/100;
 8002db0:	49a2      	ldr	r1, [pc, #648]	; (800303c <SendTxData+0x334>)
 8002db2:	9805      	ldr	r0, [sp, #20]
 8002db4:	f7fe f878 	bl	8000ea8 <__aeabi_fdiv>
 8002db8:	4605      	mov	r5, r0
  spd.flt = avgWindSpeed;
 8002dba:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8003038 <SendTxData+0x330>
 8002dbe:	f8d9 7000 	ldr.w	r7, [r9]
  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 8002dc2:	f8cd 8000 	str.w	r8, [sp]
 8002dc6:	4ba0      	ldr	r3, [pc, #640]	; (8003048 <SendTxData+0x340>)
 8002dc8:	2201      	movs	r2, #1
 8002dca:	4621      	mov	r1, r4
 8002dcc:	2002      	movs	r0, #2
 8002dce:	f010 f841 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "temperature: %d deg C\r\n", (int16_t)(sensor_data.temperature));
 8002dd2:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	4b9c      	ldr	r3, [pc, #624]	; (800304c <SendTxData+0x344>)
 8002dda:	2201      	movs	r2, #1
 8002ddc:	4621      	mov	r1, r4
 8002dde:	2002      	movs	r0, #2
 8002de0:	f010 f838 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "humidity: %d rH \r\n", (int16_t)(sensor_data.humidity));
 8002de4:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	4b99      	ldr	r3, [pc, #612]	; (8003050 <SendTxData+0x348>)
 8002dec:	2201      	movs	r2, #1
 8002dee:	4621      	mov	r1, r4
 8002df0:	2002      	movs	r0, #2
 8002df2:	f010 f82f 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "air pressure: %d hPa \r\n", (int16_t)(sensor_data.pressure));
 8002df6:	9805      	ldr	r0, [sp, #20]
 8002df8:	f7fe f8f2 	bl	8000fe0 <__aeabi_f2iz>
 8002dfc:	b200      	sxth	r0, r0
 8002dfe:	9000      	str	r0, [sp, #0]
 8002e00:	4b94      	ldr	r3, [pc, #592]	; (8003054 <SendTxData+0x34c>)
 8002e02:	2201      	movs	r2, #1
 8002e04:	4621      	mov	r1, r4
 8002e06:	2002      	movs	r0, #2
 8002e08:	f010 f824 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "rainfall since program start: %d mm \r\n", (int16_t)rainFallInMM);
 8002e0c:	f8db 0000 	ldr.w	r0, [fp]
 8002e10:	f7fe f8e6 	bl	8000fe0 <__aeabi_f2iz>
 8002e14:	b200      	sxth	r0, r0
 8002e16:	9000      	str	r0, [sp, #0]
 8002e18:	4b8f      	ldr	r3, [pc, #572]	; (8003058 <SendTxData+0x350>)
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	4621      	mov	r1, r4
 8002e1e:	2002      	movs	r0, #2
 8002e20:	f010 f818 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "instantaneous wind speed: %d km/h \r\n", (int16_t)windTips);
 8002e24:	f9ba 3000 	ldrsh.w	r3, [sl]
 8002e28:	9300      	str	r3, [sp, #0]
 8002e2a:	4b8c      	ldr	r3, [pc, #560]	; (800305c <SendTxData+0x354>)
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	4621      	mov	r1, r4
 8002e30:	2002      	movs	r0, #2
 8002e32:	f010 f80f 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "avg wind speed: %d km/h \r\n", (int16_t)avgWindSpeed);
 8002e36:	f8d9 0000 	ldr.w	r0, [r9]
 8002e3a:	f7fe f8d1 	bl	8000fe0 <__aeabi_f2iz>
 8002e3e:	b200      	sxth	r0, r0
 8002e40:	9000      	str	r0, [sp, #0]
 8002e42:	4b87      	ldr	r3, [pc, #540]	; (8003060 <SendTxData+0x358>)
 8002e44:	2201      	movs	r2, #1
 8002e46:	4621      	mov	r1, r4
 8002e48:	2002      	movs	r0, #2
 8002e4a:	f010 f803 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "instantaneous wind direction: %s \r\n", "North");
 8002e4e:	4b85      	ldr	r3, [pc, #532]	; (8003064 <SendTxData+0x35c>)
 8002e50:	9300      	str	r3, [sp, #0]
 8002e52:	4b85      	ldr	r3, [pc, #532]	; (8003068 <SendTxData+0x360>)
 8002e54:	2201      	movs	r2, #1
 8002e56:	4621      	mov	r1, r4
 8002e58:	2002      	movs	r0, #2
 8002e5a:	f00f fffb 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
  AppData.Port = LORAWAN_USER_APP_PORT;
 8002e5e:	4b83      	ldr	r3, [pc, #524]	; (800306c <SendTxData+0x364>)
 8002e60:	2202      	movs	r2, #2
 8002e62:	701a      	strb	r2, [r3, #0]
  humidity    = (uint16_t)(sensor_data.humidity);
 8002e64:	f8dd c01c 	ldr.w	ip, [sp, #28]
  AppData.Buffer[i++] = (uint8_t)(97);
 8002e68:	685a      	ldr	r2, [r3, #4]
 8002e6a:	2161      	movs	r1, #97	; 0x61
 8002e6c:	7011      	strb	r1, [r2, #0]
  AppData.Buffer[i++] = (uint8_t)(102);
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	2166      	movs	r1, #102	; 0x66
 8002e72:	7051      	strb	r1, [r2, #1]
  AppData.Buffer[i++] = (uint8_t)(0);
 8002e74:	685a      	ldr	r2, [r3, #4]
 8002e76:	7094      	strb	r4, [r2, #2]
  AppData.Buffer[i++] = (uint8_t)(1);
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	2001      	movs	r0, #1
 8002e7c:	70d0      	strb	r0, [r2, #3]
  AppData.Buffer[i++] = (uint8_t)(60);
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	203c      	movs	r0, #60	; 0x3c
 8002e82:	7110      	strb	r0, [r2, #4]
  AppData.Buffer[i++] = (uint8_t)(104); //104 = float
 8002e84:	6858      	ldr	r0, [r3, #4]
 8002e86:	2268      	movs	r2, #104	; 0x68
 8002e88:	7142      	strb	r2, [r0, #5]
  AppData.Buffer[i++] = tmp.bytes[3];//(temperature);
 8002e8a:	4630      	mov	r0, r6
 8002e8c:	f3c6 6607 	ubfx	r6, r6, #24, #8
 8002e90:	f8d3 e004 	ldr.w	lr, [r3, #4]
 8002e94:	f88e 6006 	strb.w	r6, [lr, #6]
  AppData.Buffer[i++] = tmp.bytes[2];
 8002e98:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8002e9c:	f8d3 e004 	ldr.w	lr, [r3, #4]
 8002ea0:	f88e 6007 	strb.w	r6, [lr, #7]
  AppData.Buffer[i++] = tmp.bytes[1];
 8002ea4:	685e      	ldr	r6, [r3, #4]
 8002ea6:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8002eaa:	7233      	strb	r3, [r6, #8]
  AppData.Buffer[i++] = tmp.bytes[0];
 8002eac:	7270      	strb	r0, [r6, #9]
  AppData.Buffer[i++] = (uint8_t)(61);
 8002eae:	233d      	movs	r3, #61	; 0x3d
 8002eb0:	72b3      	strb	r3, [r6, #10]
  AppData.Buffer[i++] = (uint8_t)(104);
 8002eb2:	72f2      	strb	r2, [r6, #11]
  AppData.Buffer[i++] = pres.bytes[3];
 8002eb4:	f3c5 6307 	ubfx	r3, r5, #24, #8
 8002eb8:	7333      	strb	r3, [r6, #12]
  AppData.Buffer[i++] = pres.bytes[2];
 8002eba:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8002ebe:	7373      	strb	r3, [r6, #13]
  AppData.Buffer[i++] = pres.bytes[1];
 8002ec0:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8002ec4:	73b3      	strb	r3, [r6, #14]
  AppData.Buffer[i++] = pres.bytes[0];
 8002ec6:	73f5      	strb	r5, [r6, #15]
  AppData.Buffer[i++] = (uint8_t)(62);
 8002ec8:	233e      	movs	r3, #62	; 0x3e
 8002eca:	7433      	strb	r3, [r6, #16]
  AppData.Buffer[i++] = (uint8_t)(102); //102 = uint16
 8002ecc:	7471      	strb	r1, [r6, #17]
  AppData.Buffer[i++] = 0;
 8002ece:	74b4      	strb	r4, [r6, #18]
  AppData.Buffer[i++] = humidity;
 8002ed0:	f886 c013 	strb.w	ip, [r6, #19]
  AppData.Buffer[i++] = (uint8_t)(63);
 8002ed4:	233f      	movs	r3, #63	; 0x3f
 8002ed6:	7533      	strb	r3, [r6, #20]
  AppData.Buffer[i++] = (uint8_t)(104);
 8002ed8:	7572      	strb	r2, [r6, #21]
  AppData.Buffer[i++] = rain.bytes[3];
 8002eda:	9803      	ldr	r0, [sp, #12]
 8002edc:	f3c0 6307 	ubfx	r3, r0, #24, #8
 8002ee0:	75b3      	strb	r3, [r6, #22]
  AppData.Buffer[i++] = rain.bytes[2];
 8002ee2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8002ee6:	75f3      	strb	r3, [r6, #23]
  AppData.Buffer[i++] = rain.bytes[1];
 8002ee8:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8002eec:	7633      	strb	r3, [r6, #24]
  AppData.Buffer[i++] = rain.bytes[0];
 8002eee:	7670      	strb	r0, [r6, #25]
  AppData.Buffer[i++] = (uint8_t)(64);
 8002ef0:	2340      	movs	r3, #64	; 0x40
 8002ef2:	76b3      	strb	r3, [r6, #26]
  AppData.Buffer[i++] = (uint8_t)(102);
 8002ef4:	76f1      	strb	r1, [r6, #27]
  AppData.Buffer[i++] = 0;
 8002ef6:	7734      	strb	r4, [r6, #28]
  AppData.Buffer[i++] = 100;
 8002ef8:	2364      	movs	r3, #100	; 0x64
 8002efa:	7773      	strb	r3, [r6, #29]
  AppData.Buffer[i++] = (uint8_t)(65);
 8002efc:	2341      	movs	r3, #65	; 0x41
 8002efe:	77b3      	strb	r3, [r6, #30]
  AppData.Buffer[i++] = (uint8_t)(104);
 8002f00:	77f2      	strb	r2, [r6, #31]
  AppData.Buffer[i++] = spd.bytes[3];
 8002f02:	f3c7 6307 	ubfx	r3, r7, #24, #8
 8002f06:	f886 3020 	strb.w	r3, [r6, #32]
  AppData.Buffer[i++] = spd.bytes[2];
 8002f0a:	f3c7 4307 	ubfx	r3, r7, #16, #8
 8002f0e:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
  AppData.Buffer[i++] = spd.bytes[1];
 8002f12:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8002f16:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
  AppData.Buffer[i++] = spd.bytes[0];
 8002f1a:	f886 7023 	strb.w	r7, [r6, #35]	; 0x23
  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 8002f1e:	4b54      	ldr	r3, [pc, #336]	; (8003070 <SendTxData+0x368>)
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	2b08      	cmp	r3, #8
 8002f24:	d02e      	beq.n	8002f84 <SendTxData+0x27c>
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d04f      	beq.n	8002fca <SendTxData+0x2c2>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 8002f2a:	b943      	cbnz	r3, 8002f3e <SendTxData+0x236>
  AppData.Buffer[i++] = spd.bytes[0];
 8002f2c:	2224      	movs	r2, #36	; 0x24
 8002f2e:	e02a      	b.n	8002f86 <SendTxData+0x27e>
   	avgWindSpeed = avgWindSpeed / 60;
 8002f30:	4c41      	ldr	r4, [pc, #260]	; (8003038 <SendTxData+0x330>)
 8002f32:	4950      	ldr	r1, [pc, #320]	; (8003074 <SendTxData+0x36c>)
 8002f34:	6820      	ldr	r0, [r4, #0]
 8002f36:	f7fd ffb7 	bl	8000ea8 <__aeabi_fdiv>
 8002f3a:	6020      	str	r0, [r4, #0]
 8002f3c:	e724      	b.n	8002d88 <SendTxData+0x80>
    latitude = sensor_data.latitude;
 8002f3e:	9d08      	ldr	r5, [sp, #32]
    longitude = sensor_data.longitude;
 8002f40:	9c09      	ldr	r4, [sp, #36]	; 0x24
    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 8002f42:	f7fe ff57 	bl	8001df4 <GetBatteryLevel>
 8002f46:	f886 0024 	strb.w	r0, [r6, #36]	; 0x24
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 8002f4a:	4b48      	ldr	r3, [pc, #288]	; (800306c <SendTxData+0x364>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f3c5 4207 	ubfx	r2, r5, #16, #8
 8002f52:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 8002f56:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8002f5a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 8002f5e:	f883 5027 	strb.w	r5, [r3, #39]	; 0x27
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 8002f62:	f3c4 4207 	ubfx	r2, r4, #16, #8
 8002f66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 8002f6a:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8002f6e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 8002f72:	f883 402a 	strb.w	r4, [r3, #42]	; 0x2a
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 8002f7c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8002f80:	222d      	movs	r2, #45	; 0x2d
 8002f82:	e000      	b.n	8002f86 <SendTxData+0x27e>
  AppData.Buffer[i++] = spd.bytes[0];
 8002f84:	2224      	movs	r2, #36	; 0x24
  AppData.BufferSize = i;
 8002f86:	4b39      	ldr	r3, [pc, #228]	; (800306c <SendTxData+0x364>)
 8002f88:	705a      	strb	r2, [r3, #1]
  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002f8a:	4b3b      	ldr	r3, [pc, #236]	; (8003078 <SendTxData+0x370>)
 8002f8c:	7a5b      	ldrb	r3, [r3, #9]
 8002f8e:	b9f3      	cbnz	r3, 8002fce <SendTxData+0x2c6>
  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 8002f90:	2200      	movs	r2, #0
 8002f92:	4b37      	ldr	r3, [pc, #220]	; (8003070 <SendTxData+0x368>)
 8002f94:	78d9      	ldrb	r1, [r3, #3]
 8002f96:	4835      	ldr	r0, [pc, #212]	; (800306c <SendTxData+0x364>)
 8002f98:	f006 f834 	bl	8009004 <LmHandlerSend>
  if (LORAMAC_HANDLER_SUCCESS == status)
 8002f9c:	b328      	cbz	r0, 8002fea <SendTxData+0x2e2>
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 8002f9e:	f110 0f06 	cmn.w	r0, #6
 8002fa2:	d02a      	beq.n	8002ffa <SendTxData+0x2f2>
  UTIL_TIMER_Time_t nextTxIn = 0;
 8002fa4:	2500      	movs	r5, #0
    UTIL_TIMER_Stop(&TxTimer);
 8002fa6:	4c35      	ldr	r4, [pc, #212]	; (800307c <SendTxData+0x374>)
 8002fa8:	4620      	mov	r0, r4
 8002faa:	f010 faa7 	bl	80134fc <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 8002fae:	4b34      	ldr	r3, [pc, #208]	; (8003080 <SendTxData+0x378>)
 8002fb0:	6819      	ldr	r1, [r3, #0]
 8002fb2:	42a9      	cmp	r1, r5
 8002fb4:	bf38      	it	cc
 8002fb6:	4629      	movcc	r1, r5
 8002fb8:	4620      	mov	r0, r4
 8002fba:	f010 fb3f 	bl	801363c <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 8002fbe:	4620      	mov	r0, r4
 8002fc0:	f010 faf6 	bl	80135b0 <UTIL_TIMER_Start>
}
 8002fc4:	b00d      	add	sp, #52	; 0x34
 8002fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  AppData.Buffer[i++] = spd.bytes[0];
 8002fca:	2224      	movs	r2, #36	; 0x24
 8002fcc:	e7db      	b.n	8002f86 <SendTxData+0x27e>
  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002fce:	f005 ff4b 	bl	8008e68 <LmHandlerJoinStatus>
 8002fd2:	2801      	cmp	r0, #1
 8002fd4:	d1dc      	bne.n	8002f90 <SendTxData+0x288>
    UTIL_TIMER_Stop(&JoinLedTimer);
 8002fd6:	4828      	ldr	r0, [pc, #160]	; (8003078 <SendTxData+0x370>)
 8002fd8:	f010 fa90 	bl	80134fc <UTIL_TIMER_Stop>
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002fe2:	4828      	ldr	r0, [pc, #160]	; (8003084 <SendTxData+0x37c>)
 8002fe4:	f002 fbd6 	bl	8005794 <HAL_GPIO_WritePin>
 8002fe8:	e7d2      	b.n	8002f90 <SendTxData+0x288>
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 8002fea:	4b27      	ldr	r3, [pc, #156]	; (8003088 <SendTxData+0x380>)
 8002fec:	2201      	movs	r2, #1
 8002fee:	2100      	movs	r1, #0
 8002ff0:	4610      	mov	r0, r2
 8002ff2:	f00f ff2f 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Time_t nextTxIn = 0;
 8002ff6:	2500      	movs	r5, #0
 8002ff8:	e7d5      	b.n	8002fa6 <SendTxData+0x29e>
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 8002ffa:	f005 ff2f 	bl	8008e5c <LmHandlerGetDutyCycleWaitTime>
    if (nextTxIn > 0)
 8002ffe:	4605      	mov	r5, r0
 8003000:	2800      	cmp	r0, #0
 8003002:	d0d0      	beq.n	8002fa6 <SendTxData+0x29e>
      APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 8003004:	4b21      	ldr	r3, [pc, #132]	; (800308c <SendTxData+0x384>)
 8003006:	fba3 2300 	umull	r2, r3, r3, r0
 800300a:	099b      	lsrs	r3, r3, #6
 800300c:	9300      	str	r3, [sp, #0]
 800300e:	4b20      	ldr	r3, [pc, #128]	; (8003090 <SendTxData+0x388>)
 8003010:	2201      	movs	r2, #1
 8003012:	2100      	movs	r1, #0
 8003014:	4610      	mov	r0, r2
 8003016:	f00f ff1d 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
 800301a:	e7c4      	b.n	8002fa6 <SendTxData+0x29e>
 800301c:	f3af 8000 	nop.w
 8003020:	47ae147b 	.word	0x47ae147b
 8003024:	3f947ae1 	.word	0x3f947ae1
 8003028:	20000650 	.word	0x20000650
 800302c:	2000064c 	.word	0x2000064c
 8003030:	40080000 	.word	0x40080000
 8003034:	20000654 	.word	0x20000654
 8003038:	20000640 	.word	0x20000640
 800303c:	42c80000 	.word	0x42c80000
 8003040:	20000644 	.word	0x20000644
 8003044:	447a0000 	.word	0x447a0000
 8003048:	080141bc 	.word	0x080141bc
 800304c:	080141c8 	.word	0x080141c8
 8003050:	080141e0 	.word	0x080141e0
 8003054:	080141f4 	.word	0x080141f4
 8003058:	0801420c 	.word	0x0801420c
 800305c:	08014234 	.word	0x08014234
 8003060:	0801425c 	.word	0x0801425c
 8003064:	0801429c 	.word	0x0801429c
 8003068:	08014278 	.word	0x08014278
 800306c:	20000004 	.word	0x20000004
 8003070:	20000058 	.word	0x20000058
 8003074:	42700000 	.word	0x42700000
 8003078:	200005c8 	.word	0x200005c8
 800307c:	20000628 	.word	0x20000628
 8003080:	2000006c 	.word	0x2000006c
 8003084:	48000400 	.word	0x48000400
 8003088:	080142a4 	.word	0x080142a4
 800308c:	10624dd3 	.word	0x10624dd3
 8003090:	080142b4 	.word	0x080142b4

08003094 <OnJoinTimerLedEvent>:
{
 8003094:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
 8003096:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800309a:	4802      	ldr	r0, [pc, #8]	; (80030a4 <OnJoinTimerLedEvent+0x10>)
 800309c:	f002 fb7f 	bl	800579e <HAL_GPIO_TogglePin>
}
 80030a0:	bd08      	pop	{r3, pc}
 80030a2:	bf00      	nop
 80030a4:	48000400 	.word	0x48000400

080030a8 <LoRaWAN_Init>:
{
 80030a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030ac:	b086      	sub	sp, #24
  uint32_t feature_version = 0UL;
 80030ae:	2400      	movs	r4, #0
 80030b0:	9405      	str	r4, [sp, #20]
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 80030b2:	9402      	str	r4, [sp, #8]
 80030b4:	2502      	movs	r5, #2
 80030b6:	9501      	str	r5, [sp, #4]
 80030b8:	2601      	movs	r6, #1
 80030ba:	9600      	str	r6, [sp, #0]
 80030bc:	4b4b      	ldr	r3, [pc, #300]	; (80031ec <LoRaWAN_Init+0x144>)
 80030be:	4622      	mov	r2, r4
 80030c0:	4621      	mov	r1, r4
 80030c2:	4628      	mov	r0, r5
 80030c4:	f00f fec6 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 80030c8:	9402      	str	r4, [sp, #8]
 80030ca:	2704      	movs	r7, #4
 80030cc:	9701      	str	r7, [sp, #4]
 80030ce:	9500      	str	r5, [sp, #0]
 80030d0:	4b47      	ldr	r3, [pc, #284]	; (80031f0 <LoRaWAN_Init+0x148>)
 80030d2:	4622      	mov	r2, r4
 80030d4:	4621      	mov	r1, r4
 80030d6:	4628      	mov	r0, r5
 80030d8:	f00f febc 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 80030dc:	9402      	str	r4, [sp, #8]
 80030de:	9501      	str	r5, [sp, #4]
 80030e0:	9600      	str	r6, [sp, #0]
 80030e2:	4b44      	ldr	r3, [pc, #272]	; (80031f4 <LoRaWAN_Init+0x14c>)
 80030e4:	4622      	mov	r2, r4
 80030e6:	4621      	mov	r1, r4
 80030e8:	4628      	mov	r0, r5
 80030ea:	f00f feb3 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 80030ee:	a905      	add	r1, sp, #20
 80030f0:	4620      	mov	r0, r4
 80030f2:	f006 fa9d 	bl	8009630 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 80030f6:	9b05      	ldr	r3, [sp, #20]
 80030f8:	0e1a      	lsrs	r2, r3, #24
 80030fa:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80030fe:	9102      	str	r1, [sp, #8]
 8003100:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8003104:	9301      	str	r3, [sp, #4]
 8003106:	9200      	str	r2, [sp, #0]
 8003108:	4b3b      	ldr	r3, [pc, #236]	; (80031f8 <LoRaWAN_Init+0x150>)
 800310a:	4622      	mov	r2, r4
 800310c:	4621      	mov	r1, r4
 800310e:	4628      	mov	r0, r5
 8003110:	f00f fea0 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 8003114:	a905      	add	r1, sp, #20
 8003116:	4630      	mov	r0, r6
 8003118:	f006 fa8a 	bl	8009630 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800311c:	9b05      	ldr	r3, [sp, #20]
 800311e:	0e1a      	lsrs	r2, r3, #24
 8003120:	b2d9      	uxtb	r1, r3
 8003122:	9103      	str	r1, [sp, #12]
 8003124:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8003128:	9102      	str	r1, [sp, #8]
 800312a:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800312e:	9301      	str	r3, [sp, #4]
 8003130:	9200      	str	r2, [sp, #0]
 8003132:	4b32      	ldr	r3, [pc, #200]	; (80031fc <LoRaWAN_Init+0x154>)
 8003134:	4622      	mov	r2, r4
 8003136:	4621      	mov	r1, r4
 8003138:	4628      	mov	r0, r5
 800313a:	f00f fe8b 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800313e:	9400      	str	r4, [sp, #0]
 8003140:	4b2f      	ldr	r3, [pc, #188]	; (8003200 <LoRaWAN_Init+0x158>)
 8003142:	4622      	mov	r2, r4
 8003144:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003148:	482e      	ldr	r0, [pc, #184]	; (8003204 <LoRaWAN_Init+0x15c>)
 800314a:	f010 f979 	bl	8013440 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800314e:	9400      	str	r4, [sp, #0]
 8003150:	4b2d      	ldr	r3, [pc, #180]	; (8003208 <LoRaWAN_Init+0x160>)
 8003152:	4622      	mov	r2, r4
 8003154:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003158:	482c      	ldr	r0, [pc, #176]	; (800320c <LoRaWAN_Init+0x164>)
 800315a:	f010 f971 	bl	8013440 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800315e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8003210 <LoRaWAN_Init+0x168>
 8003162:	9400      	str	r4, [sp, #0]
 8003164:	4b2b      	ldr	r3, [pc, #172]	; (8003214 <LoRaWAN_Init+0x16c>)
 8003166:	4632      	mov	r2, r6
 8003168:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800316c:	4640      	mov	r0, r8
 800316e:	f010 f967 	bl	8013440 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 8003172:	9400      	str	r4, [sp, #0]
 8003174:	4b28      	ldr	r3, [pc, #160]	; (8003218 <LoRaWAN_Init+0x170>)
 8003176:	4622      	mov	r2, r4
 8003178:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800317c:	4827      	ldr	r0, [pc, #156]	; (800321c <LoRaWAN_Init+0x174>)
 800317e:	f010 f95f 	bl	8013440 <UTIL_TIMER_Create>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8003182:	4a27      	ldr	r2, [pc, #156]	; (8003220 <LoRaWAN_Init+0x178>)
 8003184:	4621      	mov	r1, r4
 8003186:	4630      	mov	r0, r6
 8003188:	f010 f85a 	bl	8013240 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800318c:	4a25      	ldr	r2, [pc, #148]	; (8003224 <LoRaWAN_Init+0x17c>)
 800318e:	4621      	mov	r1, r4
 8003190:	4628      	mov	r0, r5
 8003192:	f010 f855 	bl	8013240 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 8003196:	4a24      	ldr	r2, [pc, #144]	; (8003228 <LoRaWAN_Init+0x180>)
 8003198:	4621      	mov	r1, r4
 800319a:	4638      	mov	r0, r7
 800319c:	f010 f850 	bl	8013240 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 80031a0:	4a22      	ldr	r2, [pc, #136]	; (800322c <LoRaWAN_Init+0x184>)
 80031a2:	4621      	mov	r1, r4
 80031a4:	2008      	movs	r0, #8
 80031a6:	f010 f84b 	bl	8013240 <UTIL_SEQ_RegTask>
  LoraInfo_Init();
 80031aa:	f000 f889 	bl	80032c0 <LoraInfo_Init>
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 80031ae:	f04f 7181 	mov.w	r1, #16908288	; 0x1020000
 80031b2:	481f      	ldr	r0, [pc, #124]	; (8003230 <LoRaWAN_Init+0x188>)
 80031b4:	f006 fa0a 	bl	80095cc <LmHandlerInit>
  LmHandlerConfigure(&LmHandlerParams);
 80031b8:	481e      	ldr	r0, [pc, #120]	; (8003234 <LoRaWAN_Init+0x18c>)
 80031ba:	f006 f8d9 	bl	8009370 <LmHandlerConfigure>
  UTIL_TIMER_Start(&JoinLedTimer);
 80031be:	4640      	mov	r0, r8
 80031c0:	f010 f9f6 	bl	80135b0 <UTIL_TIMER_Start>
  LmHandlerJoin(ActivationType, ForceRejoin);
 80031c4:	4621      	mov	r1, r4
 80031c6:	4b1c      	ldr	r3, [pc, #112]	; (8003238 <LoRaWAN_Init+0x190>)
 80031c8:	7818      	ldrb	r0, [r3, #0]
 80031ca:	f005 febb 	bl	8008f44 <LmHandlerJoin>
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 80031ce:	4d1b      	ldr	r5, [pc, #108]	; (800323c <LoRaWAN_Init+0x194>)
 80031d0:	9400      	str	r4, [sp, #0]
 80031d2:	4b1b      	ldr	r3, [pc, #108]	; (8003240 <LoRaWAN_Init+0x198>)
 80031d4:	4622      	mov	r2, r4
 80031d6:	491b      	ldr	r1, [pc, #108]	; (8003244 <LoRaWAN_Init+0x19c>)
 80031d8:	6809      	ldr	r1, [r1, #0]
 80031da:	4628      	mov	r0, r5
 80031dc:	f010 f930 	bl	8013440 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 80031e0:	4628      	mov	r0, r5
 80031e2:	f010 f9e5 	bl	80135b0 <UTIL_TIMER_Start>
}
 80031e6:	b006      	add	sp, #24
 80031e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031ec:	080142d4 	.word	0x080142d4
 80031f0:	080142f8 	.word	0x080142f8
 80031f4:	0801431c 	.word	0x0801431c
 80031f8:	08014340 	.word	0x08014340
 80031fc:	08014364 	.word	0x08014364
 8003200:	08002ab9 	.word	0x08002ab9
 8003204:	20000610 	.word	0x20000610
 8003208:	08002aa5 	.word	0x08002aa5
 800320c:	200005e0 	.word	0x200005e0
 8003210:	200005c8 	.word	0x200005c8
 8003214:	08003095 	.word	0x08003095
 8003218:	08002a61 	.word	0x08002a61
 800321c:	200005f8 	.word	0x200005f8
 8003220:	08008e51 	.word	0x08008e51
 8003224:	08002d09 	.word	0x08002d09
 8003228:	08002cd1 	.word	0x08002cd1
 800322c:	08002c35 	.word	0x08002c35
 8003230:	2000000c 	.word	0x2000000c
 8003234:	20000058 	.word	0x20000058
 8003238:	20000000 	.word	0x20000000
 800323c:	20000628 	.word	0x20000628
 8003240:	080028b1 	.word	0x080028b1
 8003244:	2000006c 	.word	0x2000006c

08003248 <getRainfall>:
} // getRainfall function
 8003248:	3001      	adds	r0, #1
 800324a:	4770      	bx	lr

0800324c <getWindSpeed>:
  windTips++;
 800324c:	4a02      	ldr	r2, [pc, #8]	; (8003258 <getWindSpeed+0xc>)
 800324e:	6813      	ldr	r3, [r2, #0]
 8003250:	3301      	adds	r3, #1
 8003252:	6013      	str	r3, [r2, #0]
} // getWindSpeed function
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	20000650 	.word	0x20000650

0800325c <HAL_GPIO_EXTI_Callback>:
{
 800325c:	b510      	push	{r4, lr}
  switch (GPIO_Pin)
 800325e:	2810      	cmp	r0, #16
 8003260:	d023      	beq.n	80032aa <HAL_GPIO_EXTI_Callback+0x4e>
 8003262:	d914      	bls.n	800328e <HAL_GPIO_EXTI_Callback+0x32>
 8003264:	2840      	cmp	r0, #64	; 0x40
 8003266:	d01b      	beq.n	80032a0 <HAL_GPIO_EXTI_Callback+0x44>
 8003268:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 800326c:	d117      	bne.n	800329e <HAL_GPIO_EXTI_Callback+0x42>
        rainTips = getRainfall(rainTips);
 800326e:	4c10      	ldr	r4, [pc, #64]	; (80032b0 <HAL_GPIO_EXTI_Callback+0x54>)
 8003270:	6820      	ldr	r0, [r4, #0]
 8003272:	f7ff ffe9 	bl	8003248 <getRainfall>
 8003276:	6020      	str	r0, [r4, #0]
        rainFallInMM = rainTips*rainConvert*10000;
 8003278:	f7fd fd0e 	bl	8000c98 <__aeabi_i2f>
 800327c:	490d      	ldr	r1, [pc, #52]	; (80032b4 <HAL_GPIO_EXTI_Callback+0x58>)
 800327e:	f7fd fd5f 	bl	8000d40 <__aeabi_fmul>
 8003282:	490d      	ldr	r1, [pc, #52]	; (80032b8 <HAL_GPIO_EXTI_Callback+0x5c>)
 8003284:	f7fd fd5c 	bl	8000d40 <__aeabi_fmul>
 8003288:	4b0c      	ldr	r3, [pc, #48]	; (80032bc <HAL_GPIO_EXTI_Callback+0x60>)
 800328a:	6018      	str	r0, [r3, #0]
        break;
 800328c:	e007      	b.n	800329e <HAL_GPIO_EXTI_Callback+0x42>
  switch (GPIO_Pin)
 800328e:	2801      	cmp	r0, #1
 8003290:	d005      	beq.n	800329e <HAL_GPIO_EXTI_Callback+0x42>
 8003292:	2802      	cmp	r0, #2
 8003294:	d103      	bne.n	800329e <HAL_GPIO_EXTI_Callback+0x42>
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 8003296:	2100      	movs	r1, #0
 8003298:	2008      	movs	r0, #8
 800329a:	f00f ff05 	bl	80130a8 <UTIL_SEQ_SetTask>
}
 800329e:	bd10      	pop	{r4, pc}
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 80032a0:	2100      	movs	r1, #0
 80032a2:	2004      	movs	r0, #4
 80032a4:	f00f ff00 	bl	80130a8 <UTIL_SEQ_SetTask>
      break;
 80032a8:	e7f9      	b.n	800329e <HAL_GPIO_EXTI_Callback+0x42>
        getWindSpeed();
 80032aa:	f7ff ffcf 	bl	800324c <getWindSpeed>
}
 80032ae:	e7f6      	b.n	800329e <HAL_GPIO_EXTI_Callback+0x42>
 80032b0:	20000648 	.word	0x20000648
 80032b4:	3dbeb5b3 	.word	0x3dbeb5b3
 80032b8:	461c4000 	.word	0x461c4000
 80032bc:	20000644 	.word	0x20000644

080032c0 <LoraInfo_Init>:
/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ActivationMode = 0;
 80032c0:	4b06      	ldr	r3, [pc, #24]	; (80032dc <LoraInfo_Init+0x1c>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 80032c6:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 80032c8:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 80032ca:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 80032cc:	2220      	movs	r2, #32
 80032ce:	605a      	str	r2, [r3, #4]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865);
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915);
 80032d0:	f44f 7290 	mov.w	r2, #288	; 0x120
 80032d4:	605a      	str	r2, [r3, #4]
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
  loraInfo.ActivationMode = 3;
 80032d6:	2203      	movs	r2, #3
 80032d8:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 80032da:	4770      	bx	lr
 80032dc:	20000744 	.word	0x20000744

080032e0 <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 80032e0:	4800      	ldr	r0, [pc, #0]	; (80032e4 <LoraInfo_GetPtr+0x4>)
 80032e2:	4770      	bx	lr
 80032e4:	20000744 	.word	0x20000744

080032e8 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 80032e8:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 80032ea:	f000 fec3 	bl	8004074 <BSP_RADIO_Init>
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80032ee:	bd08      	pop	{r3, pc}

080032f0 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 80032f0:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 80032f2:	f000 ff01 	bl	80040f8 <BSP_RADIO_ConfigRFSwitch>
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80032f6:	bd08      	pop	{r3, pc}

080032f8 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 80032f8:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 80032fa:	f000 ff4b 	bl	8004194 <BSP_RADIO_GetTxConfig>
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80032fe:	bd08      	pop	{r3, pc}

08003300 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8003300:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 8003302:	f000 ff49 	bl	8004198 <BSP_RADIO_IsTCXO>
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8003306:	bd08      	pop	{r3, pc}

08003308 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8003308:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800330a:	f000 ff47 	bl	800419c <BSP_RADIO_IsDCDC>
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800330e:	bd08      	pop	{r3, pc}

08003310 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8003310:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 8003312:	f000 ff45 	bl	80041a0 <BSP_RADIO_GetRFOMaxPowerConfig>
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 8003316:	bd08      	pop	{r3, pc}

08003318 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003318:	480d      	ldr	r0, [pc, #52]	; (8003350 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800331a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800331c:	f000 ff45 	bl	80041aa <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003320:	480c      	ldr	r0, [pc, #48]	; (8003354 <LoopForever+0x6>)
  ldr r1, =_edata
 8003322:	490d      	ldr	r1, [pc, #52]	; (8003358 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003324:	4a0d      	ldr	r2, [pc, #52]	; (800335c <LoopForever+0xe>)
  movs r3, #0
 8003326:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003328:	e002      	b.n	8003330 <LoopCopyDataInit>

0800332a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800332a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800332c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800332e:	3304      	adds	r3, #4

08003330 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003330:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003332:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003334:	d3f9      	bcc.n	800332a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003336:	4a0a      	ldr	r2, [pc, #40]	; (8003360 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003338:	4c0a      	ldr	r4, [pc, #40]	; (8003364 <LoopForever+0x16>)
  movs r3, #0
 800333a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800333c:	e001      	b.n	8003342 <LoopFillZerobss>

0800333e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800333e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003340:	3204      	adds	r2, #4

08003342 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003342:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003344:	d3fb      	bcc.n	800333e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003346:	f010 fb3f 	bl	80139c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800334a:	f7fe fbdc 	bl	8001b06 <main>

0800334e <LoopForever>:

LoopForever:
    b LoopForever
 800334e:	e7fe      	b.n	800334e <LoopForever>
  ldr   r0, =_estack
 8003350:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003354:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003358:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 800335c:	08014da8 	.word	0x08014da8
  ldr r2, =_sbss
 8003360:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 8003364:	20001738 	.word	0x20001738

08003368 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003368:	e7fe      	b.n	8003368 <ADC_IRQHandler>

0800336a <calc_temperature>:

/*!
 * @brief This internal API is used to calculate the temperature value.
 */
static int16_t calc_temperature(uint32_t temp_adc, struct bme680_dev *dev)
{
 800336a:	b500      	push	{lr}
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 800336c:	8acb      	ldrh	r3, [r1, #22]
 800336e:	005b      	lsls	r3, r3, #1
 8003370:	ebc3 00e0 	rsb	r0, r3, r0, asr #3
 8003374:	17c2      	asrs	r2, r0, #31
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 8003376:	f9b1 c018 	ldrsh.w	ip, [r1, #24]
 800337a:	ea4f 7eec 	mov.w	lr, ip, asr #31
 800337e:	fb0c f302 	mul.w	r3, ip, r2
 8003382:	fb00 330e 	mla	r3, r0, lr, r3
 8003386:	fbac ce00 	umull	ip, lr, ip, r0
 800338a:	4473      	add	r3, lr
 800338c:	ea4f 2cdc 	mov.w	ip, ip, lsr #11
 8003390:	ea4c 5c43 	orr.w	ip, ip, r3, lsl #21
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 8003394:	0840      	lsrs	r0, r0, #1
 8003396:	ea40 70c2 	orr.w	r0, r0, r2, lsl #31
 800339a:	fb00 f302 	mul.w	r3, r0, r2
 800339e:	fba0 0200 	umull	r0, r2, r0, r0
 80033a2:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80033a6:	0b03      	lsrs	r3, r0, #12
 80033a8:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80033ac:	1312      	asrs	r2, r2, #12
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 80033ae:	f991 e01a 	ldrsb.w	lr, [r1, #26]
 80033b2:	ea4f 100e 	mov.w	r0, lr, lsl #4
 80033b6:	ea4f 7eee 	mov.w	lr, lr, asr #31
 80033ba:	fb00 f202 	mul.w	r2, r0, r2
 80033be:	fb03 220e 	mla	r2, r3, lr, r2
 80033c2:	fba0 0303 	umull	r0, r3, r0, r3
 80033c6:	4413      	add	r3, r2
 80033c8:	0b80      	lsrs	r0, r0, #14
 80033ca:	ea40 4083 	orr.w	r0, r0, r3, lsl #18
	dev->calib.t_fine = (int32_t) (var2 + var3);
 80033ce:	4460      	add	r0, ip
 80033d0:	6308      	str	r0, [r1, #48]	; 0x30
	calc_temp = (int16_t) (((dev->calib.t_fine * 5) + 128) >> 8);
 80033d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80033d6:	3080      	adds	r0, #128	; 0x80

	return calc_temp;
}
 80033d8:	f340 200f 	sbfx	r0, r0, #8, #16
 80033dc:	f85d fb04 	ldr.w	pc, [sp], #4

080033e0 <calc_pressure>:

/*!
 * @brief This internal API is used to calculate the pressure value.
 */
static uint32_t calc_pressure(uint32_t pres_adc, const struct bme680_dev *dev)
{
 80033e0:	b510      	push	{r4, lr}
	int32_t var1;
	int32_t var2;
	int32_t var3;
	int32_t pressure_comp;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 80033e2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80033e4:	105b      	asrs	r3, r3, #1
 80033e6:	f5a3 4e7a 	sub.w	lr, r3, #64000	; 0xfa00
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 80033ea:	ea4f 02ae 	mov.w	r2, lr, asr #2
 80033ee:	fb02 f202 	mul.w	r2, r2, r2
 80033f2:	12d4      	asrs	r4, r2, #11
		(int32_t)dev->calib.par_p6) >> 2;
 80033f4:	f991 c026 	ldrsb.w	ip, [r1, #38]	; 0x26
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 80033f8:	fb0c f404 	mul.w	r4, ip, r4
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
 80033fc:	f9b1 c024 	ldrsh.w	ip, [r1, #36]	; 0x24
 8003400:	fb0e fc0c 	mul.w	ip, lr, ip
 8003404:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8003408:	eb0c 04a4 	add.w	r4, ip, r4, asr #2
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 800340c:	f9b1 3022 	ldrsh.w	r3, [r1, #34]	; 0x22
 8003410:	041b      	lsls	r3, r3, #16
 8003412:	eb03 0ca4 	add.w	ip, r3, r4, asr #2
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8003416:	1352      	asrs	r2, r2, #13
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 8003418:	f991 3020 	ldrsb.w	r3, [r1, #32]
 800341c:	015b      	lsls	r3, r3, #5
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 800341e:	fb03 f202 	mul.w	r2, r3, r2
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 8003422:	f9b1 301e 	ldrsh.w	r3, [r1, #30]
 8003426:	fb0e f303 	mul.w	r3, lr, r3
 800342a:	105b      	asrs	r3, r3, #1
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 800342c:	eb03 03e2 	add.w	r3, r3, r2, asr #3
	var1 = var1 >> 18;
 8003430:	149b      	asrs	r3, r3, #18
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 8003432:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003436:	8b8a      	ldrh	r2, [r1, #28]
 8003438:	fb02 f303 	mul.w	r3, r2, r3
 800343c:	13da      	asrs	r2, r3, #15
	pressure_comp = 1048576 - pres_adc;
 800343e:	f5c0 1380 	rsb	r3, r0, #1048576	; 0x100000
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
 8003442:	eba3 332c 	sub.w	r3, r3, ip, asr #12
 8003446:	f640 4035 	movw	r0, #3125	; 0xc35
 800344a:	fb00 f303 	mul.w	r3, r0, r3
	if (pressure_comp >= BME680_MAX_OVERFLOW_VAL)
 800344e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003452:	db24      	blt.n	800349e <calc_pressure+0xbe>
		pressure_comp = ((pressure_comp / var1) << 1);
 8003454:	fb93 f3f2 	sdiv	r3, r3, r2
 8003458:	005b      	lsls	r3, r3, #1
	else
		pressure_comp = ((pressure_comp << 1) / var1);
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 800345a:	f9b1 002a 	ldrsh.w	r0, [r1, #42]	; 0x2a
 800345e:	10da      	asrs	r2, r3, #3
 8003460:	fb02 f202 	mul.w	r2, r2, r2
		(pressure_comp >> 3)) >> 13)) >> 12;
 8003464:	1352      	asrs	r2, r2, #13
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 8003466:	fb02 f400 	mul.w	r4, r2, r0
	var2 = ((int32_t)(pressure_comp >> 2) *
 800346a:	1098      	asrs	r0, r3, #2
		(int32_t)dev->calib.par_p8) >> 13;
 800346c:	f9b1 2028 	ldrsh.w	r2, [r1, #40]	; 0x28
	var2 = ((int32_t)(pressure_comp >> 2) *
 8003470:	fb02 f000 	mul.w	r0, r2, r0
 8003474:	1340      	asrs	r0, r0, #13
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8003476:	121a      	asrs	r2, r3, #8
 8003478:	fb02 fc02 	mul.w	ip, r2, r2
 800347c:	fb0c f202 	mul.w	r2, ip, r2
		(int32_t)(pressure_comp >> 8) *
		(int32_t)dev->calib.par_p10) >> 17;
 8003480:	f891 c02c 	ldrb.w	ip, [r1, #44]	; 0x2c
		(int32_t)(pressure_comp >> 8) *
 8003484:	fb0c f202 	mul.w	r2, ip, r2

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8003488:	eb00 3024 	add.w	r0, r0, r4, asr #12
 800348c:	eb00 4062 	add.w	r0, r0, r2, asr #17
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 8003490:	f991 2027 	ldrsb.w	r2, [r1, #39]	; 0x27
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8003494:	eb00 10c2 	add.w	r0, r0, r2, lsl #7

	return (uint32_t)pressure_comp;

}
 8003498:	eb03 1020 	add.w	r0, r3, r0, asr #4
 800349c:	bd10      	pop	{r4, pc}
		pressure_comp = ((pressure_comp << 1) / var1);
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80034a4:	e7d9      	b.n	800345a <calc_pressure+0x7a>
	...

080034a8 <calc_humidity>:

/*!
 * @brief This internal API is used to calculate the humidity value.
 */
static uint32_t calc_humidity(uint16_t hum_adc, const struct bme680_dev *dev)
{
 80034a8:	b570      	push	{r4, r5, r6, lr}
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 80034aa:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80034ac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80034b0:	3380      	adds	r3, #128	; 0x80
 80034b2:	ea4f 2c23 	mov.w	ip, r3, asr #8
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 80034b6:	890a      	ldrh	r2, [r1, #8]
 80034b8:	eba0 1002 	sub.w	r0, r0, r2, lsl #4
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
 80034bc:	f991 200c 	ldrsb.w	r2, [r1, #12]
 80034c0:	fb0c f202 	mul.w	r2, ip, r2
 80034c4:	4c28      	ldr	r4, [pc, #160]	; (8003568 <calc_humidity+0xc0>)
 80034c6:	fb84 5302 	smull	r5, r3, r4, r2
 80034ca:	17d2      	asrs	r2, r2, #31
 80034cc:	ebc2 1263 	rsb	r2, r2, r3, asr #5
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 80034d0:	eba0 0062 	sub.w	r0, r0, r2, asr #1
	var2 = ((int32_t) dev->calib.par_h2
 80034d4:	894d      	ldrh	r5, [r1, #10]
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 80034d6:	f991 e00d 	ldrsb.w	lr, [r1, #13]
 80034da:	fb0c fe0e 	mul.w	lr, ip, lr
 80034de:	fb84 230e 	smull	r2, r3, r4, lr
 80034e2:	ea4f 7eee 	mov.w	lr, lr, asr #31
 80034e6:	ebce 1e63 	rsb	lr, lr, r3, asr #5
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 80034ea:	f991 200e 	ldrsb.w	r2, [r1, #14]
 80034ee:	fb0c f202 	mul.w	r2, ip, r2
 80034f2:	fb84 3602 	smull	r3, r6, r4, r2
 80034f6:	17d3      	asrs	r3, r2, #31
 80034f8:	ebc3 1366 	rsb	r3, r3, r6, asr #5
 80034fc:	fb0c f303 	mul.w	r3, ip, r3
 8003500:	119a      	asrs	r2, r3, #6
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 8003502:	fb84 6202 	smull	r6, r2, r4, r2
 8003506:	17db      	asrs	r3, r3, #31
 8003508:	ebc3 1362 	rsb	r3, r3, r2, asr #5
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 800350c:	4473      	add	r3, lr
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 800350e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8003512:	fb03 f505 	mul.w	r5, r3, r5
	var2 = ((int32_t) dev->calib.par_h2
 8003516:	12ad      	asrs	r5, r5, #10
	var3 = var1 * var2;
 8003518:	fb05 f000 	mul.w	r0, r5, r0
	var4 = (int32_t) dev->calib.par_h6 << 7;
 800351c:	7bcd      	ldrb	r5, [r1, #15]
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 800351e:	f991 2010 	ldrsb.w	r2, [r1, #16]
 8003522:	fb0c f302 	mul.w	r3, ip, r2
 8003526:	fb84 2403 	smull	r2, r4, r4, r3
 800352a:	17db      	asrs	r3, r3, #31
 800352c:	ebc3 1364 	rsb	r3, r3, r4, asr #5
 8003530:	eb03 13c5 	add.w	r3, r3, r5, lsl #7
 8003534:	111b      	asrs	r3, r3, #4
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8003536:	1382      	asrs	r2, r0, #14
 8003538:	fb02 f202 	mul.w	r2, r2, r2
 800353c:	1292      	asrs	r2, r2, #10
	var6 = (var4 * var5) >> 1;
 800353e:	fb02 f303 	mul.w	r3, r2, r3
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 8003542:	eb00 0363 	add.w	r3, r0, r3, asr #1
 8003546:	129b      	asrs	r3, r3, #10
 8003548:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800354c:	fb02 f303 	mul.w	r3, r2, r3

	if (calc_hum > 100000) /* Cap at 100%rH */
 8003550:	4a06      	ldr	r2, [pc, #24]	; (800356c <calc_humidity+0xc4>)
 8003552:	ebb2 3f23 	cmp.w	r2, r3, asr #12
 8003556:	db04      	blt.n	8003562 <calc_humidity+0xba>
 8003558:	1318      	asrs	r0, r3, #12
		calc_hum = 100000;
	else if (calc_hum < 0)
 800355a:	2800      	cmp	r0, #0
 800355c:	da02      	bge.n	8003564 <calc_humidity+0xbc>
		calc_hum = 0;
 800355e:	2000      	movs	r0, #0
 8003560:	e000      	b.n	8003564 <calc_humidity+0xbc>
		calc_hum = 100000;
 8003562:	4802      	ldr	r0, [pc, #8]	; (800356c <calc_humidity+0xc4>)

	return (uint32_t) calc_hum;
}
 8003564:	bd70      	pop	{r4, r5, r6, pc}
 8003566:	bf00      	nop
 8003568:	51eb851f 	.word	0x51eb851f
 800356c:	000186a0 	.word	0x000186a0

08003570 <calc_gas_resistance>:

/*!
 * @brief This internal API is used to calculate the Gas Resistance value.
 */
static uint32_t calc_gas_resistance(uint16_t gas_res_adc, uint8_t gas_range, const struct bme680_dev *dev)
{
 8003570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003572:	b0a1      	sub	sp, #132	; 0x84
 8003574:	4605      	mov	r5, r0
 8003576:	460e      	mov	r6, r1
 8003578:	4617      	mov	r7, r2
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;
	/**Look up table 1 for the possible gas range values */
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
 800357a:	4c32      	ldr	r4, [pc, #200]	; (8003644 <calc_gas_resistance+0xd4>)
 800357c:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 8003580:	46a6      	mov	lr, r4
 8003582:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8003586:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800358a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800358e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003592:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8003596:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800359a:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 800359e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2130303777),
		UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2143188679), UINT32_C(2136746228),
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2147483647) };
	/**Look up table 2 for the possible gas range values */
	uint32_t lookupTable2[16] = { UINT32_C(4096000000), UINT32_C(2048000000), UINT32_C(1024000000), UINT32_C(512000000),
 80035a2:	46ee      	mov	lr, sp
 80035a4:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 80035a8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80035ac:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80035b0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80035b4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80035b8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80035bc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80035c0:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80035c4:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
		UINT32_C(255744255), UINT32_C(127110228), UINT32_C(64000000), UINT32_C(32258064), UINT32_C(16016016),
		UINT32_C(8000000), UINT32_C(4000000), UINT32_C(2000000), UINT32_C(1000000), UINT32_C(500000),
		UINT32_C(250000), UINT32_C(125000) };

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 80035c8:	f997 2036 	ldrsb.w	r2, [r7, #54]	; 0x36
 80035cc:	17d3      	asrs	r3, r2, #31
 80035ce:	0099      	lsls	r1, r3, #2
 80035d0:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80035d4:	ea4f 0c82 	mov.w	ip, r2, lsl #2
 80035d8:	eb1c 0c02 	adds.w	ip, ip, r2
 80035dc:	eb43 0301 	adc.w	r3, r3, r1
 80035e0:	f240 523c 	movw	r2, #1340	; 0x53c
 80035e4:	eb1c 0c02 	adds.w	ip, ip, r2
 80035e8:	f143 0300 	adc.w	r3, r3, #0
		((int64_t) lookupTable1[gas_range])) >> 16;
 80035ec:	aa20      	add	r2, sp, #128	; 0x80
 80035ee:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80035f2:	f856 2c40 	ldr.w	r2, [r6, #-64]
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 80035f6:	fbac c002 	umull	ip, r0, ip, r2
 80035fa:	fb02 0003 	mla	r0, r2, r3, r0
 80035fe:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8003602:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
 8003606:	1404      	asrs	r4, r0, #16
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8003608:	03ea      	lsls	r2, r5, #15
 800360a:	f112 427f 	adds.w	r2, r2, #4278190080	; 0xff000000
 800360e:	eb63 0303 	sbc.w	r3, r3, r3
 8003612:	eb12 020c 	adds.w	r2, r2, ip
 8003616:	eb43 4320 	adc.w	r3, r3, r0, asr #16
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 800361a:	f856 1c80 	ldr.w	r1, [r6, #-128]
 800361e:	fba1 0c0c 	umull	r0, ip, r1, ip
 8003622:	fb01 cc04 	mla	ip, r1, r4, ip
 8003626:	0a40      	lsrs	r0, r0, #9
 8003628:	ea40 50cc 	orr.w	r0, r0, ip, lsl #23
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
 800362c:	0854      	lsrs	r4, r2, #1
 800362e:	ea44 74c3 	orr.w	r4, r4, r3, lsl #31
 8003632:	1059      	asrs	r1, r3, #1
 8003634:	1820      	adds	r0, r4, r0
 8003636:	eb41 216c 	adc.w	r1, r1, ip, asr #9
 800363a:	f7fd fcf7 	bl	800102c <__aeabi_ldivmod>

	return calc_gas_res;
}
 800363e:	b021      	add	sp, #132	; 0x84
 8003640:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003642:	bf00      	nop
 8003644:	08013d70 	.word	0x08013d70

08003648 <calc_heater_res>:

/*!
 * @brief This internal API is used to calculate the Heat Resistance value.
 */
static uint8_t calc_heater_res(uint16_t temp, const struct bme680_dev *dev)
{
 8003648:	b510      	push	{r4, lr}
	int32_t var3;
	int32_t var4;
	int32_t var5;
	int32_t heatr_res_x100;

	if (temp > 400) /* Cap temperature */
 800364a:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
 800364e:	d901      	bls.n	8003654 <calc_heater_res+0xc>
		temp = 400;
 8003650:	f44f 70c8 	mov.w	r0, #400	; 0x190

	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 8003654:	f991 3004 	ldrsb.w	r3, [r1, #4]
 8003658:	f991 2014 	ldrsb.w	r2, [r1, #20]
 800365c:	fb02 f303 	mul.w	r3, r2, r3
 8003660:	4a20      	ldr	r2, [pc, #128]	; (80036e4 <calc_heater_res+0x9c>)
 8003662:	fb82 2c03 	smull	r2, ip, r2, r3
 8003666:	17db      	asrs	r3, r3, #31
 8003668:	ebc3 1cac 	rsb	ip, r3, ip, asr #6
	var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 800366c:	f991 3011 	ldrsb.w	r3, [r1, #17]
 8003670:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8003674:	f9b1 2012 	ldrsh.w	r2, [r1, #18]
 8003678:	f502 3216 	add.w	r2, r2, #153600	; 0x25800
 800367c:	f202 1299 	addw	r2, r2, #409	; 0x199
 8003680:	fb02 f000 	mul.w	r0, r2, r0
 8003684:	4c18      	ldr	r4, [pc, #96]	; (80036e8 <calc_heater_res+0xa0>)
 8003686:	fb84 e200 	smull	lr, r2, r4, r0
 800368a:	17c0      	asrs	r0, r0, #31
 800368c:	ebc0 02e2 	rsb	r2, r0, r2, asr #3
 8003690:	f502 1248 	add.w	r2, r2, #3276800	; 0x320000
 8003694:	fb84 0402 	smull	r0, r4, r4, r2
 8003698:	17d2      	asrs	r2, r2, #31
 800369a:	ebc2 02a4 	rsb	r2, r2, r4, asr #2
 800369e:	fb02 f303 	mul.w	r3, r2, r3
	var3 = var1 + (var2 / 2);
 80036a2:	eb03 70d3 	add.w	r0, r3, r3, lsr #31
 80036a6:	1040      	asrs	r0, r0, #1
 80036a8:	eb00 200c 	add.w	r0, r0, ip, lsl #8
	var4 = (var3 / (dev->calib.res_heat_range + 4));
 80036ac:	f891 3034 	ldrb.w	r3, [r1, #52]	; 0x34
 80036b0:	3304      	adds	r3, #4
 80036b2:	fb90 f0f3 	sdiv	r0, r0, r3
	var5 = (131 * dev->calib.res_heat_val) + 65536;
 80036b6:	f991 3035 	ldrsb.w	r3, [r1, #53]	; 0x35
 80036ba:	eb03 1283 	add.w	r2, r3, r3, lsl #6
 80036be:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80036c2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	heatr_res_x100 = (int32_t) (((var4 / var5) - 250) * 34);
 80036c6:	fb90 f0f3 	sdiv	r0, r0, r3
 80036ca:	38fa      	subs	r0, #250	; 0xfa
 80036cc:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80036d0:	0040      	lsls	r0, r0, #1
	heatr_res = (uint8_t) ((heatr_res_x100 + 50) / 100);
 80036d2:	3032      	adds	r0, #50	; 0x32
 80036d4:	4b05      	ldr	r3, [pc, #20]	; (80036ec <calc_heater_res+0xa4>)
 80036d6:	fb83 2300 	smull	r2, r3, r3, r0
 80036da:	17c0      	asrs	r0, r0, #31
 80036dc:	ebc0 1063 	rsb	r0, r0, r3, asr #5

	return heatr_res;
}
 80036e0:	b2c0      	uxtb	r0, r0
 80036e2:	bd10      	pop	{r4, pc}
 80036e4:	10624dd3 	.word	0x10624dd3
 80036e8:	66666667 	.word	0x66666667
 80036ec:	51eb851f 	.word	0x51eb851f

080036f0 <calc_heater_dur>:
static uint8_t calc_heater_dur(uint16_t dur)
{
	uint8_t factor = 0;
	uint8_t durval;

	if (dur >= 0xfc0) {
 80036f0:	f5b0 6f7c 	cmp.w	r0, #4032	; 0xfc0
 80036f4:	d20c      	bcs.n	8003710 <calc_heater_dur+0x20>
	uint8_t factor = 0;
 80036f6:	2300      	movs	r3, #0
 80036f8:	e002      	b.n	8003700 <calc_heater_dur+0x10>
		durval = 0xff; /* Max duration*/
	} else {
		while (dur > 0x3F) {
			dur = dur / 4;
 80036fa:	0880      	lsrs	r0, r0, #2
			factor += 1;
 80036fc:	3301      	adds	r3, #1
 80036fe:	b2db      	uxtb	r3, r3
		while (dur > 0x3F) {
 8003700:	283f      	cmp	r0, #63	; 0x3f
 8003702:	d8fa      	bhi.n	80036fa <calc_heater_dur+0xa>
		}
		durval = (uint8_t) (dur + (factor * 64));
 8003704:	019b      	lsls	r3, r3, #6
 8003706:	b2db      	uxtb	r3, r3
 8003708:	fa53 f080 	uxtab	r0, r3, r0
 800370c:	b2c0      	uxtb	r0, r0
 800370e:	4770      	bx	lr
		durval = 0xff; /* Max duration*/
 8003710:	20ff      	movs	r0, #255	; 0xff
	}

	return durval;
}
 8003712:	4770      	bx	lr

08003714 <boundary_check>:
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
	int8_t rslt = BME680_OK;

	if (value != NULL) {
 8003714:	4684      	mov	ip, r0
 8003716:	b1c0      	cbz	r0, 800374a <boundary_check+0x36>
		/* Check if value is below minimum value */
		if (*value < min) {
 8003718:	7800      	ldrb	r0, [r0, #0]
 800371a:	4288      	cmp	r0, r1
 800371c:	d207      	bcs.n	800372e <boundary_check+0x1a>
			/* Auto correct the invalid value to minimum value */
			*value = min;
 800371e:	f88c 1000 	strb.w	r1, [ip]
			dev->info_msg |= BME680_I_MIN_CORRECTION;
 8003722:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
 8003726:	f041 0101 	orr.w	r1, r1, #1
 800372a:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
		}
		/* Check if value is above maximum value */
		if (*value > max) {
 800372e:	f89c 1000 	ldrb.w	r1, [ip]
 8003732:	4291      	cmp	r1, r2
 8003734:	d90c      	bls.n	8003750 <boundary_check+0x3c>
			/* Auto correct the invalid value to maximum value */
			*value = max;
 8003736:	f88c 2000 	strb.w	r2, [ip]
			dev->info_msg |= BME680_I_MAX_CORRECTION;
 800373a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800373e:	f042 0202 	orr.w	r2, r2, #2
 8003742:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	int8_t rslt = BME680_OK;
 8003746:	2000      	movs	r0, #0
 8003748:	4770      	bx	lr
		}
	} else {
		rslt = BME680_E_NULL_PTR;
 800374a:	f04f 30ff 	mov.w	r0, #4294967295
 800374e:	4770      	bx	lr
	int8_t rslt = BME680_OK;
 8003750:	2000      	movs	r0, #0
	}

	return rslt;
}
 8003752:	4770      	bx	lr

08003754 <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8003754:	b150      	cbz	r0, 800376c <null_ptr_check+0x18>
 8003756:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8003758:	b15a      	cbz	r2, 8003772 <null_ptr_check+0x1e>
 800375a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800375c:	b162      	cbz	r2, 8003778 <null_ptr_check+0x24>
 800375e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003760:	b10b      	cbz	r3, 8003766 <null_ptr_check+0x12>
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
	} else {
		/* Device structure is fine */
		rslt = BME680_OK;
 8003762:	2000      	movs	r0, #0
	}

	return rslt;
}
 8003764:	4770      	bx	lr
		rslt = BME680_E_NULL_PTR;
 8003766:	f04f 30ff 	mov.w	r0, #4294967295
 800376a:	4770      	bx	lr
 800376c:	f04f 30ff 	mov.w	r0, #4294967295
 8003770:	4770      	bx	lr
 8003772:	f04f 30ff 	mov.w	r0, #4294967295
 8003776:	4770      	bx	lr
 8003778:	f04f 30ff 	mov.w	r0, #4294967295
 800377c:	4770      	bx	lr

0800377e <set_mem_page>:
{
 800377e:	b570      	push	{r4, r5, r6, lr}
 8003780:	b082      	sub	sp, #8
 8003782:	4605      	mov	r5, r0
 8003784:	460c      	mov	r4, r1
	rslt = null_ptr_check(dev);
 8003786:	4608      	mov	r0, r1
 8003788:	f7ff ffe4 	bl	8003754 <null_ptr_check>
	if (rslt == BME680_OK) {
 800378c:	4606      	mov	r6, r0
 800378e:	bb40      	cbnz	r0, 80037e2 <set_mem_page+0x64>
		if (reg_addr > 0x7f)
 8003790:	f015 0f80 	tst.w	r5, #128	; 0x80
 8003794:	d128      	bne.n	80037e8 <set_mem_page+0x6a>
			mem_page = BME680_MEM_PAGE0;
 8003796:	2310      	movs	r3, #16
		if (mem_page != dev->mem_page) {
 8003798:	78e2      	ldrb	r2, [r4, #3]
 800379a:	429a      	cmp	r2, r3
 800379c:	d021      	beq.n	80037e2 <set_mem_page+0x64>
			dev->mem_page = mem_page;
 800379e:	70e3      	strb	r3, [r4, #3]
			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 80037a0:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80037a2:	2301      	movs	r3, #1
 80037a4:	f10d 0207 	add.w	r2, sp, #7
 80037a8:	21f3      	movs	r1, #243	; 0xf3
 80037aa:	7860      	ldrb	r0, [r4, #1]
 80037ac:	47a8      	blx	r5
 80037ae:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
			if (dev->com_rslt != 0)
 80037b2:	b9d8      	cbnz	r0, 80037ec <set_mem_page+0x6e>
				reg = reg & (~BME680_MEM_PAGE_MSK);
 80037b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80037b8:	f003 02ef 	and.w	r2, r3, #239	; 0xef
 80037bc:	f88d 2007 	strb.w	r2, [sp, #7]
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 80037c0:	f994 3003 	ldrsb.w	r3, [r4, #3]
 80037c4:	f003 0310 	and.w	r3, r3, #16
 80037c8:	4313      	orrs	r3, r2
 80037ca:	f88d 3007 	strb.w	r3, [sp, #7]
				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 80037ce:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80037d0:	2301      	movs	r3, #1
 80037d2:	f10d 0207 	add.w	r2, sp, #7
 80037d6:	2173      	movs	r1, #115	; 0x73
 80037d8:	7860      	ldrb	r0, [r4, #1]
 80037da:	47a8      	blx	r5
 80037dc:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
				if (dev->com_rslt != 0)
 80037e0:	b938      	cbnz	r0, 80037f2 <set_mem_page+0x74>
}
 80037e2:	4630      	mov	r0, r6
 80037e4:	b002      	add	sp, #8
 80037e6:	bd70      	pop	{r4, r5, r6, pc}
			mem_page = BME680_MEM_PAGE1;
 80037e8:	2300      	movs	r3, #0
 80037ea:	e7d5      	b.n	8003798 <set_mem_page+0x1a>
				rslt = BME680_E_COM_FAIL;
 80037ec:	f06f 0601 	mvn.w	r6, #1
 80037f0:	e7f7      	b.n	80037e2 <set_mem_page+0x64>
					rslt = BME680_E_COM_FAIL;
 80037f2:	f06f 0601 	mvn.w	r6, #1
 80037f6:	e7f4      	b.n	80037e2 <set_mem_page+0x64>

080037f8 <get_mem_page>:
{
 80037f8:	b530      	push	{r4, r5, lr}
 80037fa:	b083      	sub	sp, #12
 80037fc:	4604      	mov	r4, r0
	rslt = null_ptr_check(dev);
 80037fe:	f7ff ffa9 	bl	8003754 <null_ptr_check>
	if (rslt == BME680_OK) {
 8003802:	4605      	mov	r5, r0
 8003804:	b978      	cbnz	r0, 8003826 <get_mem_page+0x2e>
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 8003806:	2301      	movs	r3, #1
 8003808:	f10d 0207 	add.w	r2, sp, #7
 800380c:	21f3      	movs	r1, #243	; 0xf3
 800380e:	7860      	ldrb	r0, [r4, #1]
 8003810:	f8d4 c048 	ldr.w	ip, [r4, #72]	; 0x48
 8003814:	47e0      	blx	ip
 8003816:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
		if (dev->com_rslt != 0)
 800381a:	b938      	cbnz	r0, 800382c <get_mem_page+0x34>
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
 800381c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003820:	f003 0310 	and.w	r3, r3, #16
 8003824:	70e3      	strb	r3, [r4, #3]
}
 8003826:	4628      	mov	r0, r5
 8003828:	b003      	add	sp, #12
 800382a:	bd30      	pop	{r4, r5, pc}
			rslt = BME680_E_COM_FAIL;
 800382c:	f06f 0501 	mvn.w	r5, #1
 8003830:	e7f9      	b.n	8003826 <get_mem_page+0x2e>

08003832 <bme680_get_regs>:
{
 8003832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003836:	4605      	mov	r5, r0
 8003838:	460e      	mov	r6, r1
 800383a:	4690      	mov	r8, r2
 800383c:	461c      	mov	r4, r3
	rslt = null_ptr_check(dev);
 800383e:	4618      	mov	r0, r3
 8003840:	f7ff ff88 	bl	8003754 <null_ptr_check>
	if (rslt == BME680_OK) {
 8003844:	4607      	mov	r7, r0
 8003846:	b950      	cbnz	r0, 800385e <bme680_get_regs+0x2c>
		if (dev->intf == BME680_SPI_INTF) {
 8003848:	78a3      	ldrb	r3, [r4, #2]
 800384a:	b15b      	cbz	r3, 8003864 <bme680_get_regs+0x32>
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 800384c:	4643      	mov	r3, r8
 800384e:	4632      	mov	r2, r6
 8003850:	4629      	mov	r1, r5
 8003852:	7860      	ldrb	r0, [r4, #1]
 8003854:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8003856:	47a8      	blx	r5
 8003858:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
		if (dev->com_rslt != 0)
 800385c:	b960      	cbnz	r0, 8003878 <bme680_get_regs+0x46>
}
 800385e:	4638      	mov	r0, r7
 8003860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			rslt = set_mem_page(reg_addr, dev);
 8003864:	4621      	mov	r1, r4
 8003866:	4628      	mov	r0, r5
 8003868:	f7ff ff89 	bl	800377e <set_mem_page>
			if (rslt == BME680_OK)
 800386c:	4607      	mov	r7, r0
 800386e:	2800      	cmp	r0, #0
 8003870:	d1ec      	bne.n	800384c <bme680_get_regs+0x1a>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
 8003872:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8003876:	e7e9      	b.n	800384c <bme680_get_regs+0x1a>
			rslt = BME680_E_COM_FAIL;
 8003878:	f06f 0701 	mvn.w	r7, #1
 800387c:	e7ef      	b.n	800385e <bme680_get_regs+0x2c>

0800387e <get_calib_data>:
{
 800387e:	b530      	push	{r4, r5, lr}
 8003880:	b08d      	sub	sp, #52	; 0x34
 8003882:	4604      	mov	r4, r0
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
 8003884:	2500      	movs	r5, #0
 8003886:	9501      	str	r5, [sp, #4]
 8003888:	2225      	movs	r2, #37	; 0x25
 800388a:	4629      	mov	r1, r5
 800388c:	a802      	add	r0, sp, #8
 800388e:	f010 f8dd 	bl	8013a4c <memset>
	uint8_t temp_var = 0; /* Temporary variable */
 8003892:	f88d 5003 	strb.w	r5, [sp, #3]
	rslt = null_ptr_check(dev);
 8003896:	4620      	mov	r0, r4
 8003898:	f7ff ff5c 	bl	8003754 <null_ptr_check>
	if (rslt == BME680_OK) {
 800389c:	4603      	mov	r3, r0
 800389e:	b110      	cbz	r0, 80038a6 <get_calib_data+0x28>
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	b00d      	add	sp, #52	; 0x34
 80038a4:	bd30      	pop	{r4, r5, pc}
		rslt = bme680_get_regs(BME680_COEFF_ADDR1, coeff_array, BME680_COEFF_ADDR1_LEN, dev);
 80038a6:	4623      	mov	r3, r4
 80038a8:	2219      	movs	r2, #25
 80038aa:	a901      	add	r1, sp, #4
 80038ac:	2089      	movs	r0, #137	; 0x89
 80038ae:	f7ff ffc0 	bl	8003832 <bme680_get_regs>
		if (rslt == BME680_OK)
 80038b2:	4603      	mov	r3, r0
 80038b4:	2800      	cmp	r0, #0
 80038b6:	d07c      	beq.n	80039b2 <get_calib_data+0x134>
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
 80038b8:	f89d 1026 	ldrb.w	r1, [sp, #38]	; 0x26
 80038bc:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 80038c0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80038c4:	82e2      	strh	r2, [r4, #22]
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
 80038c6:	f89d 1006 	ldrb.w	r1, [sp, #6]
 80038ca:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80038ce:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80038d2:	8322      	strh	r2, [r4, #24]
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
 80038d4:	f99d 2007 	ldrsb.w	r2, [sp, #7]
 80038d8:	76a2      	strb	r2, [r4, #26]
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
 80038da:	f89d 100a 	ldrb.w	r1, [sp, #10]
 80038de:	f89d 2009 	ldrb.w	r2, [sp, #9]
 80038e2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80038e6:	83a2      	strh	r2, [r4, #28]
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
 80038e8:	f89d 100c 	ldrb.w	r1, [sp, #12]
 80038ec:	f89d 200b 	ldrb.w	r2, [sp, #11]
 80038f0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80038f4:	83e2      	strh	r2, [r4, #30]
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
 80038f6:	f99d 200d 	ldrsb.w	r2, [sp, #13]
 80038fa:	f884 2020 	strb.w	r2, [r4, #32]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
 80038fe:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8003902:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8003906:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800390a:	8462      	strh	r2, [r4, #34]	; 0x22
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
 800390c:	f89d 1012 	ldrb.w	r1, [sp, #18]
 8003910:	f89d 2011 	ldrb.w	r2, [sp, #17]
 8003914:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003918:	84a2      	strh	r2, [r4, #36]	; 0x24
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
 800391a:	f99d 2014 	ldrsb.w	r2, [sp, #20]
 800391e:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
 8003922:	f99d 2013 	ldrsb.w	r2, [sp, #19]
 8003926:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
 800392a:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800392e:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8003932:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003936:	8522      	strh	r2, [r4, #40]	; 0x28
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
 8003938:	f89d 101a 	ldrb.w	r1, [sp, #26]
 800393c:	f89d 2019 	ldrb.w	r2, [sp, #25]
 8003940:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003944:	8562      	strh	r2, [r4, #42]	; 0x2a
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
 8003946:	f89d 201b 	ldrb.w	r2, [sp, #27]
 800394a:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 800394e:	f89d 001f 	ldrb.w	r0, [sp, #31]
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
 8003952:	f89d 201e 	ldrb.w	r2, [sp, #30]
 8003956:	f002 010f 	and.w	r1, r2, #15
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 800395a:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 800395e:	8121      	strh	r1, [r4, #8]
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 8003960:	f89d 101d 	ldrb.w	r1, [sp, #29]
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
 8003964:	0912      	lsrs	r2, r2, #4
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 8003966:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800396a:	8162      	strh	r2, [r4, #10]
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
 800396c:	f99d 2020 	ldrsb.w	r2, [sp, #32]
 8003970:	7322      	strb	r2, [r4, #12]
		dev->calib.par_h4 = (int8_t) coeff_array[BME680_H4_REG];
 8003972:	f99d 2021 	ldrsb.w	r2, [sp, #33]	; 0x21
 8003976:	7362      	strb	r2, [r4, #13]
		dev->calib.par_h5 = (int8_t) coeff_array[BME680_H5_REG];
 8003978:	f99d 2022 	ldrsb.w	r2, [sp, #34]	; 0x22
 800397c:	73a2      	strb	r2, [r4, #14]
		dev->calib.par_h6 = (uint8_t) coeff_array[BME680_H6_REG];
 800397e:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
 8003982:	73e2      	strb	r2, [r4, #15]
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];
 8003984:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
 8003988:	7422      	strb	r2, [r4, #16]
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
 800398a:	f99d 2029 	ldrsb.w	r2, [sp, #41]	; 0x29
 800398e:	7462      	strb	r2, [r4, #17]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
 8003990:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
 8003994:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 8003998:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800399c:	8262      	strh	r2, [r4, #18]
		dev->calib.par_gh3 = (int8_t) coeff_array[BME680_GH3_REG];
 800399e:	f99d 202a 	ldrsb.w	r2, [sp, #42]	; 0x2a
 80039a2:	7522      	strb	r2, [r4, #20]
		if (rslt == BME680_OK) {
 80039a4:	b173      	cbz	r3, 80039c4 <get_calib_data+0x146>
		dev->calib.range_sw_err = ((int8_t) temp_var & (int8_t) BME680_RSERROR_MSK) / 16;
 80039a6:	f99d 2003 	ldrsb.w	r2, [sp, #3]
 80039aa:	1112      	asrs	r2, r2, #4
 80039ac:	f884 2036 	strb.w	r2, [r4, #54]	; 0x36
 80039b0:	e776      	b.n	80038a0 <get_calib_data+0x22>
			rslt = bme680_get_regs(BME680_COEFF_ADDR2, &coeff_array[BME680_COEFF_ADDR1_LEN]
 80039b2:	4623      	mov	r3, r4
 80039b4:	2210      	movs	r2, #16
 80039b6:	f10d 011d 	add.w	r1, sp, #29
 80039ba:	20e1      	movs	r0, #225	; 0xe1
 80039bc:	f7ff ff39 	bl	8003832 <bme680_get_regs>
 80039c0:	4603      	mov	r3, r0
 80039c2:	e779      	b.n	80038b8 <get_calib_data+0x3a>
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);
 80039c4:	4623      	mov	r3, r4
 80039c6:	2201      	movs	r2, #1
 80039c8:	f10d 0103 	add.w	r1, sp, #3
 80039cc:	2002      	movs	r0, #2
 80039ce:	f7ff ff30 	bl	8003832 <bme680_get_regs>
			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
 80039d2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80039d6:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80039da:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			if (rslt == BME680_OK) {
 80039de:	4603      	mov	r3, r0
 80039e0:	2800      	cmp	r0, #0
 80039e2:	d1e0      	bne.n	80039a6 <get_calib_data+0x128>
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);
 80039e4:	4623      	mov	r3, r4
 80039e6:	2201      	movs	r2, #1
 80039e8:	f10d 0103 	add.w	r1, sp, #3
 80039ec:	f7ff ff21 	bl	8003832 <bme680_get_regs>
				dev->calib.res_heat_val = (int8_t) temp_var;
 80039f0:	f99d 3003 	ldrsb.w	r3, [sp, #3]
 80039f4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
				if (rslt == BME680_OK)
 80039f8:	4603      	mov	r3, r0
 80039fa:	2800      	cmp	r0, #0
 80039fc:	d1d3      	bne.n	80039a6 <get_calib_data+0x128>
					rslt = bme680_get_regs(BME680_ADDR_RANGE_SW_ERR_ADDR, &temp_var, 1, dev);
 80039fe:	4623      	mov	r3, r4
 8003a00:	2201      	movs	r2, #1
 8003a02:	f10d 0103 	add.w	r1, sp, #3
 8003a06:	2004      	movs	r0, #4
 8003a08:	f7ff ff13 	bl	8003832 <bme680_get_regs>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	e7ca      	b.n	80039a6 <get_calib_data+0x128>

08003a10 <read_field_data>:
{
 8003a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a14:	b085      	sub	sp, #20
 8003a16:	4607      	mov	r7, r0
 8003a18:	4688      	mov	r8, r1
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	9301      	str	r3, [sp, #4]
 8003a20:	9302      	str	r3, [sp, #8]
 8003a22:	f8cd 300b 	str.w	r3, [sp, #11]
	rslt = null_ptr_check(dev);
 8003a26:	4608      	mov	r0, r1
 8003a28:	f7ff fe94 	bl	8003754 <null_ptr_check>
 8003a2c:	4605      	mov	r5, r0
	uint8_t tries = 10;
 8003a2e:	240a      	movs	r4, #10
 8003a30:	e01d      	b.n	8003a6e <read_field_data+0x5e>
				data->temperature = calc_temperature(adc_temp, dev);
 8003a32:	4641      	mov	r1, r8
 8003a34:	f7ff fc99 	bl	800336a <calc_temperature>
 8003a38:	80b8      	strh	r0, [r7, #4]
				data->pressure = calc_pressure(adc_pres, dev);
 8003a3a:	4641      	mov	r1, r8
 8003a3c:	4630      	mov	r0, r6
 8003a3e:	f7ff fccf 	bl	80033e0 <calc_pressure>
 8003a42:	60b8      	str	r0, [r7, #8]
				data->humidity = calc_humidity(adc_hum, dev);
 8003a44:	4641      	mov	r1, r8
 8003a46:	4650      	mov	r0, sl
 8003a48:	f7ff fd2e 	bl	80034a8 <calc_humidity>
 8003a4c:	60f8      	str	r0, [r7, #12]
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 8003a4e:	4642      	mov	r2, r8
 8003a50:	4659      	mov	r1, fp
 8003a52:	4648      	mov	r0, r9
 8003a54:	f7ff fd8c 	bl	8003570 <calc_gas_resistance>
 8003a58:	6138      	str	r0, [r7, #16]
	if (!tries)
 8003a5a:	2c00      	cmp	r4, #0
 8003a5c:	d053      	beq.n	8003b06 <read_field_data+0xf6>
}
 8003a5e:	4628      	mov	r0, r5
 8003a60:	b005      	add	sp, #20
 8003a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		tries--;
 8003a66:	3c01      	subs	r4, #1
	} while (tries);
 8003a68:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8003a6c:	d0f5      	beq.n	8003a5a <read_field_data+0x4a>
		if (rslt == BME680_OK) {
 8003a6e:	2d00      	cmp	r5, #0
 8003a70:	d1f9      	bne.n	8003a66 <read_field_data+0x56>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 8003a72:	4643      	mov	r3, r8
 8003a74:	220f      	movs	r2, #15
 8003a76:	4669      	mov	r1, sp
 8003a78:	201d      	movs	r0, #29
 8003a7a:	f7ff feda 	bl	8003832 <bme680_get_regs>
 8003a7e:	4605      	mov	r5, r0
			data->status = buff[0] & BME680_NEW_DATA_MSK;
 8003a80:	f89d 3000 	ldrb.w	r3, [sp]
 8003a84:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8003a88:	703a      	strb	r2, [r7, #0]
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 8003a8a:	f003 030f 	and.w	r3, r3, #15
 8003a8e:	707b      	strb	r3, [r7, #1]
			data->meas_index = buff[1];
 8003a90:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8003a94:	70bb      	strb	r3, [r7, #2]
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 8003a96:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8003a9a:	f89d 6003 	ldrb.w	r6, [sp, #3]
 8003a9e:	0136      	lsls	r6, r6, #4
 8003aa0:	ea46 3603 	orr.w	r6, r6, r3, lsl #12
				| ((uint32_t) buff[4] / 16));
 8003aa4:	f89d 3004 	ldrb.w	r3, [sp, #4]
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 8003aa8:	ea46 1613 	orr.w	r6, r6, r3, lsr #4
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 8003aac:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003ab0:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8003ab4:	0100      	lsls	r0, r0, #4
 8003ab6:	ea40 3003 	orr.w	r0, r0, r3, lsl #12
				| ((uint32_t) buff[7] / 16));
 8003aba:	f89d 3007 	ldrb.w	r3, [sp, #7]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 8003abe:	ea40 1013 	orr.w	r0, r0, r3, lsr #4
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 8003ac2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8003ac6:	f89d a009 	ldrb.w	sl, [sp, #9]
 8003aca:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 8003ace:	f89d 100d 	ldrb.w	r1, [sp, #13]
 8003ad2:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8003ad6:	ea4f 1993 	mov.w	r9, r3, lsr #6
 8003ada:	ea49 0981 	orr.w	r9, r9, r1, lsl #2
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;
 8003ade:	f003 0b0f 	and.w	fp, r3, #15
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 8003ae2:	f003 0320 	and.w	r3, r3, #32
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	b25b      	sxtb	r3, r3
 8003aea:	703b      	strb	r3, [r7, #0]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 8003aec:	f99d 200e 	ldrsb.w	r2, [sp, #14]
 8003af0:	f002 0210 	and.w	r2, r2, #16
 8003af4:	4313      	orrs	r3, r2
 8003af6:	703b      	strb	r3, [r7, #0]
			if (data->status & BME680_NEW_DATA_MSK) {
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	db9a      	blt.n	8003a32 <read_field_data+0x22>
			dev->delay_ms(BME680_POLL_PERIOD_MS);
 8003afc:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
 8003b00:	200a      	movs	r0, #10
 8003b02:	4798      	blx	r3
 8003b04:	e7af      	b.n	8003a66 <read_field_data+0x56>
		rslt = BME680_W_NO_NEW_DATA;
 8003b06:	2502      	movs	r5, #2
 8003b08:	e7a9      	b.n	8003a5e <read_field_data+0x4e>

08003b0a <bme680_set_regs>:
{
 8003b0a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b0e:	b08b      	sub	sp, #44	; 0x2c
 8003b10:	4606      	mov	r6, r0
 8003b12:	4688      	mov	r8, r1
 8003b14:	4617      	mov	r7, r2
 8003b16:	461d      	mov	r5, r3
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 8003b18:	2100      	movs	r1, #0
 8003b1a:	9100      	str	r1, [sp, #0]
 8003b1c:	2224      	movs	r2, #36	; 0x24
 8003b1e:	a801      	add	r0, sp, #4
 8003b20:	f00f ff94 	bl	8013a4c <memset>
	rslt = null_ptr_check(dev);
 8003b24:	4628      	mov	r0, r5
 8003b26:	f7ff fe15 	bl	8003754 <null_ptr_check>
	if (rslt == BME680_OK) {
 8003b2a:	4681      	mov	r9, r0
 8003b2c:	2800      	cmp	r0, #0
 8003b2e:	d13e      	bne.n	8003bae <bme680_set_regs+0xa4>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
 8003b30:	1e7b      	subs	r3, r7, #1
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2b12      	cmp	r3, #18
 8003b36:	d801      	bhi.n	8003b3c <bme680_set_regs+0x32>
			for (index = 0; index < len; index++) {
 8003b38:	2400      	movs	r4, #0
 8003b3a:	e01b      	b.n	8003b74 <bme680_set_regs+0x6a>
			rslt = BME680_E_INVALID_LENGTH;
 8003b3c:	f06f 0903 	mvn.w	r9, #3
 8003b40:	e035      	b.n	8003bae <bme680_set_regs+0xa4>
					rslt = set_mem_page(reg_addr[index], dev);
 8003b42:	4629      	mov	r1, r5
 8003b44:	5d30      	ldrb	r0, [r6, r4]
 8003b46:	f7ff fe1a 	bl	800377e <set_mem_page>
 8003b4a:	4681      	mov	r9, r0
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 8003b4c:	5d33      	ldrb	r3, [r6, r4]
 8003b4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b52:	aa0a      	add	r2, sp, #40	; 0x28
 8003b54:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 8003b58:	f802 3c28 	strb.w	r3, [r2, #-40]
				tmp_buff[(2 * index) + 1] = reg_data[index];
 8003b5c:	ea4f 0c44 	mov.w	ip, r4, lsl #1
 8003b60:	f818 3004 	ldrb.w	r3, [r8, r4]
 8003b64:	f10c 0229 	add.w	r2, ip, #41	; 0x29
 8003b68:	eb0d 0c02 	add.w	ip, sp, r2
 8003b6c:	f80c 3c28 	strb.w	r3, [ip, #-40]
			for (index = 0; index < len; index++) {
 8003b70:	3401      	adds	r4, #1
 8003b72:	b2a4      	uxth	r4, r4
 8003b74:	b2bb      	uxth	r3, r7
 8003b76:	42a3      	cmp	r3, r4
 8003b78:	d909      	bls.n	8003b8e <bme680_set_regs+0x84>
				if (dev->intf == BME680_SPI_INTF) {
 8003b7a:	78ab      	ldrb	r3, [r5, #2]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d0e0      	beq.n	8003b42 <bme680_set_regs+0x38>
					tmp_buff[(2 * index)] = reg_addr[index];
 8003b80:	5d32      	ldrb	r2, [r6, r4]
 8003b82:	ab0a      	add	r3, sp, #40	; 0x28
 8003b84:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8003b88:	f803 2c28 	strb.w	r2, [r3, #-40]
 8003b8c:	e7e6      	b.n	8003b5c <bme680_set_regs+0x52>
			if (rslt == BME680_OK) {
 8003b8e:	f1b9 0f00 	cmp.w	r9, #0
 8003b92:	d10c      	bne.n	8003bae <bme680_set_regs+0xa4>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 8003b94:	6cec      	ldr	r4, [r5, #76]	; 0x4c
 8003b96:	005b      	lsls	r3, r3, #1
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	f10d 0201 	add.w	r2, sp, #1
 8003ba0:	f89d 1000 	ldrb.w	r1, [sp]
 8003ba4:	7868      	ldrb	r0, [r5, #1]
 8003ba6:	47a0      	blx	r4
 8003ba8:	f885 0054 	strb.w	r0, [r5, #84]	; 0x54
				if (dev->com_rslt != 0)
 8003bac:	b918      	cbnz	r0, 8003bb6 <bme680_set_regs+0xac>
}
 8003bae:	4648      	mov	r0, r9
 8003bb0:	b00b      	add	sp, #44	; 0x2c
 8003bb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					rslt = BME680_E_COM_FAIL;
 8003bb6:	f06f 0901 	mvn.w	r9, #1
 8003bba:	e7f8      	b.n	8003bae <bme680_set_regs+0xa4>

08003bbc <set_gas_config>:
{
 8003bbc:	b510      	push	{r4, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	4604      	mov	r4, r0
	rslt = null_ptr_check(dev);
 8003bc2:	f7ff fdc7 	bl	8003754 <null_ptr_check>
	if (rslt == BME680_OK) {
 8003bc6:	b940      	cbnz	r0, 8003bda <set_gas_config+0x1e>
		uint8_t reg_addr[2] = {0};
 8003bc8:	f8ad 0000 	strh.w	r0, [sp]
		uint8_t reg_data[2] = {0};
 8003bcc:	f8ad 0004 	strh.w	r0, [sp, #4]
		if (dev->power_mode == BME680_FORCED_MODE) {
 8003bd0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d002      	beq.n	8003bde <set_gas_config+0x22>
			rslt = BME680_W_DEFINE_PWR_MODE;
 8003bd8:	2001      	movs	r0, #1
}
 8003bda:	b002      	add	sp, #8
 8003bdc:	bd10      	pop	{r4, pc}
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
 8003bde:	235a      	movs	r3, #90	; 0x5a
 8003be0:	f88d 3000 	strb.w	r3, [sp]
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
 8003be4:	4621      	mov	r1, r4
 8003be6:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
 8003bea:	f7ff fd2d 	bl	8003648 <calc_heater_res>
 8003bee:	f88d 0004 	strb.w	r0, [sp, #4]
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
 8003bf2:	2364      	movs	r3, #100	; 0x64
 8003bf4:	f88d 3001 	strb.w	r3, [sp, #1]
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 8003bf8:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
 8003bfc:	f7ff fd78 	bl	80036f0 <calc_heater_dur>
 8003c00:	f88d 0005 	strb.w	r0, [sp, #5]
			dev->gas_sett.nb_conv = 0;
 8003c04:	2300      	movs	r3, #0
 8003c06:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 8003c0a:	4623      	mov	r3, r4
 8003c0c:	2202      	movs	r2, #2
 8003c0e:	a901      	add	r1, sp, #4
 8003c10:	4668      	mov	r0, sp
 8003c12:	f7ff ff7a 	bl	8003b0a <bme680_set_regs>
 8003c16:	e7e0      	b.n	8003bda <set_gas_config+0x1e>

08003c18 <bme680_soft_reset>:
{
 8003c18:	b530      	push	{r4, r5, lr}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	4604      	mov	r4, r0
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
 8003c1e:	23e0      	movs	r3, #224	; 0xe0
 8003c20:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
 8003c24:	23b6      	movs	r3, #182	; 0xb6
 8003c26:	f88d 3006 	strb.w	r3, [sp, #6]
	rslt = null_ptr_check(dev);
 8003c2a:	f7ff fd93 	bl	8003754 <null_ptr_check>
	if (rslt == BME680_OK) {
 8003c2e:	4605      	mov	r5, r0
 8003c30:	b910      	cbnz	r0, 8003c38 <bme680_soft_reset+0x20>
		if (dev->intf == BME680_SPI_INTF)
 8003c32:	78a3      	ldrb	r3, [r4, #2]
 8003c34:	b11b      	cbz	r3, 8003c3e <bme680_soft_reset+0x26>
		if (rslt == BME680_OK) {
 8003c36:	b13d      	cbz	r5, 8003c48 <bme680_soft_reset+0x30>
}
 8003c38:	4628      	mov	r0, r5
 8003c3a:	b003      	add	sp, #12
 8003c3c:	bd30      	pop	{r4, r5, pc}
			rslt = get_mem_page(dev);
 8003c3e:	4620      	mov	r0, r4
 8003c40:	f7ff fdda 	bl	80037f8 <get_mem_page>
 8003c44:	4605      	mov	r5, r0
 8003c46:	e7f6      	b.n	8003c36 <bme680_soft_reset+0x1e>
			rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8003c48:	4623      	mov	r3, r4
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f10d 0106 	add.w	r1, sp, #6
 8003c50:	f10d 0007 	add.w	r0, sp, #7
 8003c54:	f7ff ff59 	bl	8003b0a <bme680_set_regs>
 8003c58:	4605      	mov	r5, r0
			dev->delay_ms(BME680_RESET_PERIOD);
 8003c5a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003c5c:	200a      	movs	r0, #10
 8003c5e:	4798      	blx	r3
			if (rslt == BME680_OK) {
 8003c60:	2d00      	cmp	r5, #0
 8003c62:	d1e9      	bne.n	8003c38 <bme680_soft_reset+0x20>
				if (dev->intf == BME680_SPI_INTF)
 8003c64:	78a3      	ldrb	r3, [r4, #2]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1e6      	bne.n	8003c38 <bme680_soft_reset+0x20>
					rslt = get_mem_page(dev);
 8003c6a:	4620      	mov	r0, r4
 8003c6c:	f7ff fdc4 	bl	80037f8 <get_mem_page>
 8003c70:	4605      	mov	r5, r0
 8003c72:	e7e1      	b.n	8003c38 <bme680_soft_reset+0x20>

08003c74 <bme680_init>:
{
 8003c74:	b510      	push	{r4, lr}
 8003c76:	4604      	mov	r4, r0
	rslt = null_ptr_check(dev);
 8003c78:	f7ff fd6c 	bl	8003754 <null_ptr_check>
	if (rslt == BME680_OK) {
 8003c7c:	b100      	cbz	r0, 8003c80 <bme680_init+0xc>
}
 8003c7e:	bd10      	pop	{r4, pc}
		rslt = bme680_soft_reset(dev);
 8003c80:	4620      	mov	r0, r4
 8003c82:	f7ff ffc9 	bl	8003c18 <bme680_soft_reset>
		if (rslt == BME680_OK) {
 8003c86:	2800      	cmp	r0, #0
 8003c88:	d1f9      	bne.n	8003c7e <bme680_init+0xa>
			rslt = bme680_get_regs(BME680_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 8003c8a:	4623      	mov	r3, r4
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	4621      	mov	r1, r4
 8003c90:	20d0      	movs	r0, #208	; 0xd0
 8003c92:	f7ff fdce 	bl	8003832 <bme680_get_regs>
			if (rslt == BME680_OK) {
 8003c96:	2800      	cmp	r0, #0
 8003c98:	d1f1      	bne.n	8003c7e <bme680_init+0xa>
				if (dev->chip_id == BME680_CHIP_ID) {
 8003c9a:	7823      	ldrb	r3, [r4, #0]
 8003c9c:	2b61      	cmp	r3, #97	; 0x61
 8003c9e:	d103      	bne.n	8003ca8 <bme680_init+0x34>
					rslt = get_calib_data(dev);
 8003ca0:	4620      	mov	r0, r4
 8003ca2:	f7ff fdec 	bl	800387e <get_calib_data>
 8003ca6:	e7ea      	b.n	8003c7e <bme680_init+0xa>
					rslt = BME680_E_DEV_NOT_FOUND;
 8003ca8:	f06f 0002 	mvn.w	r0, #2
 8003cac:	e7e7      	b.n	8003c7e <bme680_init+0xa>

08003cae <bme680_set_sensor_mode>:
{
 8003cae:	b570      	push	{r4, r5, r6, lr}
 8003cb0:	b082      	sub	sp, #8
 8003cb2:	4604      	mov	r4, r0
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 8003cb4:	2374      	movs	r3, #116	; 0x74
 8003cb6:	f88d 3006 	strb.w	r3, [sp, #6]
	rslt = null_ptr_check(dev);
 8003cba:	f7ff fd4b 	bl	8003754 <null_ptr_check>
	if (rslt == BME680_OK) {
 8003cbe:	4605      	mov	r5, r0
 8003cc0:	bb80      	cbnz	r0, 8003d24 <bme680_set_sensor_mode+0x76>
	uint8_t pow_mode = 0;
 8003cc2:	2600      	movs	r6, #0
 8003cc4:	e000      	b.n	8003cc8 <bme680_set_sensor_mode+0x1a>
		} while (pow_mode != BME680_SLEEP_MODE);
 8003cc6:	b1fe      	cbz	r6, 8003d08 <bme680_set_sensor_mode+0x5a>
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
 8003cc8:	4623      	mov	r3, r4
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f10d 0107 	add.w	r1, sp, #7
 8003cd0:	2074      	movs	r0, #116	; 0x74
 8003cd2:	f7ff fdae 	bl	8003832 <bme680_get_regs>
			if (rslt == BME680_OK) {
 8003cd6:	4605      	mov	r5, r0
 8003cd8:	2800      	cmp	r0, #0
 8003cda:	d1f4      	bne.n	8003cc6 <bme680_set_sensor_mode+0x18>
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
 8003cdc:	f89d 3007 	ldrb.w	r3, [sp, #7]
				if (pow_mode != BME680_SLEEP_MODE) {
 8003ce0:	f013 0603 	ands.w	r6, r3, #3
 8003ce4:	d0ef      	beq.n	8003cc6 <bme680_set_sensor_mode+0x18>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
 8003ce6:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8003cea:	f88d 3007 	strb.w	r3, [sp, #7]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8003cee:	4623      	mov	r3, r4
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f10d 0107 	add.w	r1, sp, #7
 8003cf6:	f10d 0006 	add.w	r0, sp, #6
 8003cfa:	f7ff ff06 	bl	8003b0a <bme680_set_regs>
 8003cfe:	4605      	mov	r5, r0
					dev->delay_ms(BME680_POLL_PERIOD_MS);
 8003d00:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003d02:	200a      	movs	r0, #10
 8003d04:	4798      	blx	r3
 8003d06:	e7de      	b.n	8003cc6 <bme680_set_sensor_mode+0x18>
		if (dev->power_mode != BME680_SLEEP_MODE) {
 8003d08:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8003d0c:	b152      	cbz	r2, 8003d24 <bme680_set_sensor_mode+0x76>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
 8003d0e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003d12:	f023 0303 	bic.w	r3, r3, #3
 8003d16:	b25b      	sxtb	r3, r3
 8003d18:	f002 0203 	and.w	r2, r2, #3
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	f88d 3007 	strb.w	r3, [sp, #7]
			if (rslt == BME680_OK)
 8003d22:	b115      	cbz	r5, 8003d2a <bme680_set_sensor_mode+0x7c>
}
 8003d24:	4628      	mov	r0, r5
 8003d26:	b002      	add	sp, #8
 8003d28:	bd70      	pop	{r4, r5, r6, pc}
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8003d2a:	4623      	mov	r3, r4
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f10d 0107 	add.w	r1, sp, #7
 8003d32:	f10d 0006 	add.w	r0, sp, #6
 8003d36:	f7ff fee8 	bl	8003b0a <bme680_set_regs>
 8003d3a:	4605      	mov	r5, r0
 8003d3c:	e7f2      	b.n	8003d24 <bme680_set_sensor_mode+0x76>

08003d3e <bme680_set_sensor_settings>:
{
 8003d3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d40:	b085      	sub	sp, #20
 8003d42:	4606      	mov	r6, r0
 8003d44:	460c      	mov	r4, r1
	uint8_t data = 0;
 8003d46:	2300      	movs	r3, #0
 8003d48:	f88d 300f 	strb.w	r3, [sp, #15]
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 8003d4c:	9302      	str	r3, [sp, #8]
 8003d4e:	f8ad 300c 	strh.w	r3, [sp, #12]
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	f8ad 3004 	strh.w	r3, [sp, #4]
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
 8003d58:	f891 7044 	ldrb.w	r7, [r1, #68]	; 0x44
	rslt = null_ptr_check(dev);
 8003d5c:	4608      	mov	r0, r1
 8003d5e:	f7ff fcf9 	bl	8003754 <null_ptr_check>
	if (rslt == BME680_OK) {
 8003d62:	4603      	mov	r3, r0
 8003d64:	b9e8      	cbnz	r0, 8003da2 <bme680_set_sensor_settings+0x64>
		if (desired_settings & BME680_GAS_MEAS_SEL)
 8003d66:	f016 0f08 	tst.w	r6, #8
 8003d6a:	d11d      	bne.n	8003da8 <bme680_set_sensor_settings+0x6a>
		dev->power_mode = BME680_SLEEP_MODE;
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
		if (rslt == BME680_OK)
 8003d72:	b1f3      	cbz	r3, 8003db2 <bme680_set_sensor_settings+0x74>
		if (desired_settings & BME680_FILTER_SEL) {
 8003d74:	f016 0f10 	tst.w	r6, #16
 8003d78:	d120      	bne.n	8003dbc <bme680_set_sensor_settings+0x7e>
	uint8_t count = 0;
 8003d7a:	2500      	movs	r5, #0
		if (desired_settings & BME680_HCNTRL_SEL) {
 8003d7c:	f016 0f20 	tst.w	r6, #32
 8003d80:	d143      	bne.n	8003e0a <bme680_set_sensor_settings+0xcc>
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
 8003d82:	f016 0f03 	tst.w	r6, #3
 8003d86:	d16a      	bne.n	8003e5e <bme680_set_sensor_settings+0x120>
		if (desired_settings & BME680_OSH_SEL) {
 8003d88:	f016 0f04 	tst.w	r6, #4
 8003d8c:	f040 80a3 	bne.w	8003ed6 <bme680_set_sensor_settings+0x198>
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
 8003d90:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 8003d94:	f040 80c9 	bne.w	8003f2a <bme680_set_sensor_settings+0x1ec>
		if (rslt == BME680_OK)
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f000 810e 	beq.w	8003fba <bme680_set_sensor_settings+0x27c>
		dev->power_mode = intended_power_mode;
 8003d9e:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	b005      	add	sp, #20
 8003da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			rslt = set_gas_config(dev);
 8003da8:	4620      	mov	r0, r4
 8003daa:	f7ff ff07 	bl	8003bbc <set_gas_config>
 8003dae:	4603      	mov	r3, r0
 8003db0:	e7dc      	b.n	8003d6c <bme680_set_sensor_settings+0x2e>
			rslt = bme680_set_sensor_mode(dev);
 8003db2:	4620      	mov	r0, r4
 8003db4:	f7ff ff7b 	bl	8003cae <bme680_set_sensor_mode>
 8003db8:	4603      	mov	r3, r0
 8003dba:	e7db      	b.n	8003d74 <bme680_set_sensor_settings+0x36>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
 8003dbc:	4623      	mov	r3, r4
 8003dbe:	2207      	movs	r2, #7
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	f104 003b 	add.w	r0, r4, #59	; 0x3b
 8003dc6:	f7ff fca5 	bl	8003714 <boundary_check>
			if (rslt == BME680_OK)
 8003dca:	4603      	mov	r3, r0
 8003dcc:	b1a0      	cbz	r0, 8003df8 <bme680_set_sensor_settings+0xba>
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 8003dce:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8003dd2:	f022 021c 	bic.w	r2, r2, #28
 8003dd6:	b252      	sxtb	r2, r2
 8003dd8:	f894 103b 	ldrb.w	r1, [r4, #59]	; 0x3b
 8003ddc:	0089      	lsls	r1, r1, #2
 8003dde:	f001 011c 	and.w	r1, r1, #28
 8003de2:	430a      	orrs	r2, r1
 8003de4:	b2d2      	uxtb	r2, r2
 8003de6:	f88d 200f 	strb.w	r2, [sp, #15]
			reg_array[count] = reg_addr; /* Append configuration */
 8003dea:	2175      	movs	r1, #117	; 0x75
 8003dec:	f88d 1008 	strb.w	r1, [sp, #8]
			data_array[count] = data;
 8003df0:	f88d 2000 	strb.w	r2, [sp]
			count++;
 8003df4:	2501      	movs	r5, #1
 8003df6:	e7c1      	b.n	8003d7c <bme680_set_sensor_settings+0x3e>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8003df8:	4623      	mov	r3, r4
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f10d 010f 	add.w	r1, sp, #15
 8003e00:	2075      	movs	r0, #117	; 0x75
 8003e02:	f7ff fd16 	bl	8003832 <bme680_get_regs>
 8003e06:	4603      	mov	r3, r0
 8003e08:	e7e1      	b.n	8003dce <bme680_set_sensor_settings+0x90>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
 8003e0a:	4623      	mov	r3, r4
 8003e0c:	2208      	movs	r2, #8
 8003e0e:	2100      	movs	r1, #0
 8003e10:	f104 003d 	add.w	r0, r4, #61	; 0x3d
 8003e14:	f7ff fc7e 	bl	8003714 <boundary_check>
			if (rslt == BME680_OK)
 8003e18:	4603      	mov	r3, r0
 8003e1a:	b1b8      	cbz	r0, 8003e4c <bme680_set_sensor_settings+0x10e>
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 8003e1c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8003e20:	f022 0208 	bic.w	r2, r2, #8
 8003e24:	b252      	sxtb	r2, r2
 8003e26:	f994 103d 	ldrsb.w	r1, [r4, #61]	; 0x3d
 8003e2a:	f001 0108 	and.w	r1, r1, #8
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	b2d2      	uxtb	r2, r2
 8003e32:	f88d 200f 	strb.w	r2, [sp, #15]
			reg_array[count] = reg_addr; /* Append configuration */
 8003e36:	f105 0110 	add.w	r1, r5, #16
 8003e3a:	4469      	add	r1, sp
 8003e3c:	2070      	movs	r0, #112	; 0x70
 8003e3e:	f801 0c08 	strb.w	r0, [r1, #-8]
			data_array[count] = data;
 8003e42:	f801 2c10 	strb.w	r2, [r1, #-16]
			count++;
 8003e46:	3501      	adds	r5, #1
 8003e48:	b2ed      	uxtb	r5, r5
 8003e4a:	e79a      	b.n	8003d82 <bme680_set_sensor_settings+0x44>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8003e4c:	4623      	mov	r3, r4
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f10d 010f 	add.w	r1, sp, #15
 8003e54:	2070      	movs	r0, #112	; 0x70
 8003e56:	f7ff fcec 	bl	8003832 <bme680_get_regs>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	e7de      	b.n	8003e1c <bme680_set_sensor_settings+0xde>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
 8003e5e:	4623      	mov	r3, r4
 8003e60:	2205      	movs	r2, #5
 8003e62:	2100      	movs	r1, #0
 8003e64:	f104 0039 	add.w	r0, r4, #57	; 0x39
 8003e68:	f7ff fc54 	bl	8003714 <boundary_check>
			if (rslt == BME680_OK)
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	b348      	cbz	r0, 8003ec4 <bme680_set_sensor_settings+0x186>
			if (desired_settings & BME680_OST_SEL)
 8003e70:	f016 0f01 	tst.w	r6, #1
 8003e74:	d009      	beq.n	8003e8a <bme680_set_sensor_settings+0x14c>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
 8003e76:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8003e7a:	f002 021f 	and.w	r2, r2, #31
 8003e7e:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 8003e82:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
 8003e86:	f88d 200f 	strb.w	r2, [sp, #15]
			if (desired_settings & BME680_OSP_SEL)
 8003e8a:	f016 0f02 	tst.w	r6, #2
 8003e8e:	d00c      	beq.n	8003eaa <bme680_set_sensor_settings+0x16c>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
 8003e90:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8003e94:	f022 021c 	bic.w	r2, r2, #28
 8003e98:	b252      	sxtb	r2, r2
 8003e9a:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
 8003e9e:	0089      	lsls	r1, r1, #2
 8003ea0:	f001 011c 	and.w	r1, r1, #28
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	f88d 200f 	strb.w	r2, [sp, #15]
			reg_array[count] = reg_addr;
 8003eaa:	f105 0210 	add.w	r2, r5, #16
 8003eae:	446a      	add	r2, sp
 8003eb0:	2174      	movs	r1, #116	; 0x74
 8003eb2:	f802 1c08 	strb.w	r1, [r2, #-8]
			data_array[count] = data;
 8003eb6:	f89d 100f 	ldrb.w	r1, [sp, #15]
 8003eba:	f802 1c10 	strb.w	r1, [r2, #-16]
			count++;
 8003ebe:	3501      	adds	r5, #1
 8003ec0:	b2ed      	uxtb	r5, r5
 8003ec2:	e761      	b.n	8003d88 <bme680_set_sensor_settings+0x4a>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8003ec4:	4623      	mov	r3, r4
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f10d 010f 	add.w	r1, sp, #15
 8003ecc:	2074      	movs	r0, #116	; 0x74
 8003ece:	f7ff fcb0 	bl	8003832 <bme680_get_regs>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	e7cc      	b.n	8003e70 <bme680_set_sensor_settings+0x132>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
 8003ed6:	4623      	mov	r3, r4
 8003ed8:	2205      	movs	r2, #5
 8003eda:	2100      	movs	r1, #0
 8003edc:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8003ee0:	f7ff fc18 	bl	8003714 <boundary_check>
			if (rslt == BME680_OK)
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	b1b8      	cbz	r0, 8003f18 <bme680_set_sensor_settings+0x1da>
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 8003ee8:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8003eec:	f022 0207 	bic.w	r2, r2, #7
 8003ef0:	b252      	sxtb	r2, r2
 8003ef2:	f994 1038 	ldrsb.w	r1, [r4, #56]	; 0x38
 8003ef6:	f001 0107 	and.w	r1, r1, #7
 8003efa:	430a      	orrs	r2, r1
 8003efc:	b2d2      	uxtb	r2, r2
 8003efe:	f88d 200f 	strb.w	r2, [sp, #15]
			reg_array[count] = reg_addr; /* Append configuration */
 8003f02:	f105 0110 	add.w	r1, r5, #16
 8003f06:	4469      	add	r1, sp
 8003f08:	2072      	movs	r0, #114	; 0x72
 8003f0a:	f801 0c08 	strb.w	r0, [r1, #-8]
			data_array[count] = data;
 8003f0e:	f801 2c10 	strb.w	r2, [r1, #-16]
			count++;
 8003f12:	3501      	adds	r5, #1
 8003f14:	b2ed      	uxtb	r5, r5
 8003f16:	e73b      	b.n	8003d90 <bme680_set_sensor_settings+0x52>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8003f18:	4623      	mov	r3, r4
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f10d 010f 	add.w	r1, sp, #15
 8003f20:	2072      	movs	r0, #114	; 0x72
 8003f22:	f7ff fc86 	bl	8003832 <bme680_get_regs>
 8003f26:	4603      	mov	r3, r0
 8003f28:	e7de      	b.n	8003ee8 <bme680_set_sensor_settings+0x1aa>
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
 8003f2a:	4623      	mov	r3, r4
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	2100      	movs	r1, #0
 8003f30:	f104 003e 	add.w	r0, r4, #62	; 0x3e
 8003f34:	f7ff fbee 	bl	8003714 <boundary_check>
			if (rslt == BME680_OK) {
 8003f38:	4603      	mov	r3, r0
 8003f3a:	b360      	cbz	r0, 8003f96 <bme680_set_sensor_settings+0x258>
			if (rslt == BME680_OK)
 8003f3c:	b3a3      	cbz	r3, 8003fa8 <bme680_set_sensor_settings+0x26a>
			if (desired_settings & BME680_RUN_GAS_SEL)
 8003f3e:	f016 0f40 	tst.w	r6, #64	; 0x40
 8003f42:	d00c      	beq.n	8003f5e <bme680_set_sensor_settings+0x220>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
 8003f44:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8003f48:	f022 0210 	bic.w	r2, r2, #16
 8003f4c:	b252      	sxtb	r2, r2
 8003f4e:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8003f52:	0109      	lsls	r1, r1, #4
 8003f54:	f001 0110 	and.w	r1, r1, #16
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	f88d 200f 	strb.w	r2, [sp, #15]
			if (desired_settings & BME680_NBCONV_SEL)
 8003f5e:	f016 0f80 	tst.w	r6, #128	; 0x80
 8003f62:	d00b      	beq.n	8003f7c <bme680_set_sensor_settings+0x23e>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
 8003f64:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8003f68:	f022 020f 	bic.w	r2, r2, #15
 8003f6c:	b252      	sxtb	r2, r2
 8003f6e:	f994 103c 	ldrsb.w	r1, [r4, #60]	; 0x3c
 8003f72:	f001 010f 	and.w	r1, r1, #15
 8003f76:	430a      	orrs	r2, r1
 8003f78:	f88d 200f 	strb.w	r2, [sp, #15]
			reg_array[count] = reg_addr; /* Append configuration */
 8003f7c:	f105 0210 	add.w	r2, r5, #16
 8003f80:	446a      	add	r2, sp
 8003f82:	2171      	movs	r1, #113	; 0x71
 8003f84:	f802 1c08 	strb.w	r1, [r2, #-8]
			data_array[count] = data;
 8003f88:	f89d 100f 	ldrb.w	r1, [sp, #15]
 8003f8c:	f802 1c10 	strb.w	r1, [r2, #-16]
			count++;
 8003f90:	3501      	adds	r5, #1
 8003f92:	b2ed      	uxtb	r5, r5
 8003f94:	e700      	b.n	8003d98 <bme680_set_sensor_settings+0x5a>
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
 8003f96:	4623      	mov	r3, r4
 8003f98:	220a      	movs	r2, #10
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8003fa0:	f7ff fbb8 	bl	8003714 <boundary_check>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	e7c9      	b.n	8003f3c <bme680_set_sensor_settings+0x1fe>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8003fa8:	4623      	mov	r3, r4
 8003faa:	2201      	movs	r2, #1
 8003fac:	f10d 010f 	add.w	r1, sp, #15
 8003fb0:	2071      	movs	r0, #113	; 0x71
 8003fb2:	f7ff fc3e 	bl	8003832 <bme680_get_regs>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	e7c1      	b.n	8003f3e <bme680_set_sensor_settings+0x200>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
 8003fba:	4623      	mov	r3, r4
 8003fbc:	462a      	mov	r2, r5
 8003fbe:	4669      	mov	r1, sp
 8003fc0:	a802      	add	r0, sp, #8
 8003fc2:	f7ff fda2 	bl	8003b0a <bme680_set_regs>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	e6e9      	b.n	8003d9e <bme680_set_sensor_settings+0x60>
	...

08003fcc <bme680_get_profile_dur>:
{
 8003fcc:	b082      	sub	sp, #8
 8003fce:	4684      	mov	ip, r0
 8003fd0:	460a      	mov	r2, r1
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 8003fd2:	4b19      	ldr	r3, [pc, #100]	; (8004038 <bme680_get_profile_dur+0x6c>)
 8003fd4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003fd8:	9000      	str	r0, [sp, #0]
 8003fda:	f8ad 1004 	strh.w	r1, [sp, #4]
	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 8003fde:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
 8003fe2:	3308      	adds	r3, #8
 8003fe4:	446b      	add	r3, sp
 8003fe6:	f813 3c08 	ldrb.w	r3, [r3, #-8]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 8003fea:	f892 003a 	ldrb.w	r0, [r2, #58]	; 0x3a
 8003fee:	f100 0108 	add.w	r1, r0, #8
 8003ff2:	eb0d 0001 	add.w	r0, sp, r1
 8003ff6:	f810 1c08 	ldrb.w	r1, [r0, #-8]
 8003ffa:	4419      	add	r1, r3
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 8003ffc:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8004000:	3308      	adds	r3, #8
 8004002:	446b      	add	r3, sp
 8004004:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8004008:	4419      	add	r1, r3
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 800400a:	f240 70ab 	movw	r0, #1963	; 0x7ab
 800400e:	f241 23b9 	movw	r3, #4793	; 0x12b9
 8004012:	fb00 3301 	mla	r3, r0, r1, r3
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 8004016:	4909      	ldr	r1, [pc, #36]	; (800403c <bme680_get_profile_dur+0x70>)
 8004018:	fba1 1303 	umull	r1, r3, r1, r3
 800401c:	099b      	lsrs	r3, r3, #6
	*duration = (uint16_t) tph_dur;
 800401e:	3301      	adds	r3, #1
 8004020:	f8ac 3000 	strh.w	r3, [ip]
	if (dev->gas_sett.run_gas) {
 8004024:	f892 103e 	ldrb.w	r1, [r2, #62]	; 0x3e
 8004028:	b121      	cbz	r1, 8004034 <bme680_get_profile_dur+0x68>
		*duration += dev->gas_sett.heatr_dur;
 800402a:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 800402e:	4413      	add	r3, r2
 8004030:	f8ac 3000 	strh.w	r3, [ip]
}
 8004034:	b002      	add	sp, #8
 8004036:	4770      	bx	lr
 8004038:	08013df0 	.word	0x08013df0
 800403c:	10624dd3 	.word	0x10624dd3

08004040 <bme680_get_sensor_data>:
{
 8004040:	b538      	push	{r3, r4, r5, lr}
 8004042:	4605      	mov	r5, r0
 8004044:	460c      	mov	r4, r1
	rslt = null_ptr_check(dev);
 8004046:	4608      	mov	r0, r1
 8004048:	f7ff fb84 	bl	8003754 <null_ptr_check>
	if (rslt == BME680_OK) {
 800404c:	b100      	cbz	r0, 8004050 <bme680_get_sensor_data+0x10>
}
 800404e:	bd38      	pop	{r3, r4, r5, pc}
		rslt = read_field_data(data, dev);
 8004050:	4621      	mov	r1, r4
 8004052:	4628      	mov	r0, r5
 8004054:	f7ff fcdc 	bl	8003a10 <read_field_data>
		if (rslt == BME680_OK) {
 8004058:	2800      	cmp	r0, #0
 800405a:	d1f8      	bne.n	800404e <bme680_get_sensor_data+0xe>
			if (data->status & BME680_NEW_DATA_MSK)
 800405c:	f995 3000 	ldrsb.w	r3, [r5]
 8004060:	2b00      	cmp	r3, #0
 8004062:	db03      	blt.n	800406c <bme680_get_sensor_data+0x2c>
				dev->new_fields = 0;
 8004064:	2300      	movs	r3, #0
 8004066:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800406a:	e7f0      	b.n	800404e <bme680_get_sensor_data+0xe>
				dev->new_fields = 1;
 800406c:	2301      	movs	r3, #1
 800406e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004072:	e7ec      	b.n	800404e <bme680_get_sensor_data+0xe>

08004074 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8004074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004078:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 800407a:	2400      	movs	r4, #0
 800407c:	9401      	str	r4, [sp, #4]
 800407e:	9402      	str	r4, [sp, #8]
 8004080:	9403      	str	r4, [sp, #12]
 8004082:	9404      	str	r4, [sp, #16]
 8004084:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800408a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800408c:	f042 0204 	orr.w	r2, r2, #4
 8004090:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004094:	f003 0304 	and.w	r3, r3, #4
 8004098:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800409a:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 800409c:	2710      	movs	r7, #16
 800409e:	9701      	str	r7, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80040a0:	2301      	movs	r3, #1
 80040a2:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040a4:	2303      	movs	r3, #3
 80040a6:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 80040a8:	4d12      	ldr	r5, [pc, #72]	; (80040f4 <BSP_RADIO_Init+0x80>)
 80040aa:	a901      	add	r1, sp, #4
 80040ac:	4628      	mov	r0, r5
 80040ae:	f001 fa21 	bl	80054f4 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 80040b2:	f04f 0820 	mov.w	r8, #32
 80040b6:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 80040ba:	a901      	add	r1, sp, #4
 80040bc:	4628      	mov	r0, r5
 80040be:	f001 fa19 	bl	80054f4 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 80040c2:	2608      	movs	r6, #8
 80040c4:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 80040c6:	a901      	add	r1, sp, #4
 80040c8:	4628      	mov	r0, r5
 80040ca:	f001 fa13 	bl	80054f4 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80040ce:	4622      	mov	r2, r4
 80040d0:	4641      	mov	r1, r8
 80040d2:	4628      	mov	r0, r5
 80040d4:	f001 fb5e 	bl	8005794 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80040d8:	4622      	mov	r2, r4
 80040da:	4639      	mov	r1, r7
 80040dc:	4628      	mov	r0, r5
 80040de:	f001 fb59 	bl	8005794 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 80040e2:	4622      	mov	r2, r4
 80040e4:	4631      	mov	r1, r6
 80040e6:	4628      	mov	r0, r5
 80040e8:	f001 fb54 	bl	8005794 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 80040ec:	4620      	mov	r0, r4
 80040ee:	b006      	add	sp, #24
 80040f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040f4:	48000800 	.word	0x48000800

080040f8 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 80040f8:	b510      	push	{r4, lr}
  switch (Config)
 80040fa:	2803      	cmp	r0, #3
 80040fc:	d813      	bhi.n	8004126 <BSP_RADIO_ConfigRFSwitch+0x2e>
 80040fe:	e8df f000 	tbb	[pc, r0]
 8004102:	1402      	.short	0x1402
 8004104:	3625      	.short	0x3625
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8004106:	4c22      	ldr	r4, [pc, #136]	; (8004190 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8004108:	2200      	movs	r2, #0
 800410a:	2108      	movs	r1, #8
 800410c:	4620      	mov	r0, r4
 800410e:	f001 fb41 	bl	8005794 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8004112:	2200      	movs	r2, #0
 8004114:	2110      	movs	r1, #16
 8004116:	4620      	mov	r0, r4
 8004118:	f001 fb3c 	bl	8005794 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 800411c:	2200      	movs	r2, #0
 800411e:	2120      	movs	r1, #32
 8004120:	4620      	mov	r0, r4
 8004122:	f001 fb37 	bl	8005794 <HAL_GPIO_WritePin>
    default:
      break;    
  }  

  return BSP_ERROR_NONE;
}
 8004126:	2000      	movs	r0, #0
 8004128:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800412a:	4c19      	ldr	r4, [pc, #100]	; (8004190 <BSP_RADIO_ConfigRFSwitch+0x98>)
 800412c:	2201      	movs	r2, #1
 800412e:	2108      	movs	r1, #8
 8004130:	4620      	mov	r0, r4
 8004132:	f001 fb2f 	bl	8005794 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8004136:	2201      	movs	r2, #1
 8004138:	2110      	movs	r1, #16
 800413a:	4620      	mov	r0, r4
 800413c:	f001 fb2a 	bl	8005794 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8004140:	2200      	movs	r2, #0
 8004142:	2120      	movs	r1, #32
 8004144:	4620      	mov	r0, r4
 8004146:	f001 fb25 	bl	8005794 <HAL_GPIO_WritePin>
      break;
 800414a:	e7ec      	b.n	8004126 <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800414c:	4c10      	ldr	r4, [pc, #64]	; (8004190 <BSP_RADIO_ConfigRFSwitch+0x98>)
 800414e:	2201      	movs	r2, #1
 8004150:	2108      	movs	r1, #8
 8004152:	4620      	mov	r0, r4
 8004154:	f001 fb1e 	bl	8005794 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8004158:	2201      	movs	r2, #1
 800415a:	2110      	movs	r1, #16
 800415c:	4620      	mov	r0, r4
 800415e:	f001 fb19 	bl	8005794 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8004162:	2201      	movs	r2, #1
 8004164:	2120      	movs	r1, #32
 8004166:	4620      	mov	r0, r4
 8004168:	f001 fb14 	bl	8005794 <HAL_GPIO_WritePin>
      break;
 800416c:	e7db      	b.n	8004126 <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800416e:	4c08      	ldr	r4, [pc, #32]	; (8004190 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8004170:	2201      	movs	r2, #1
 8004172:	2108      	movs	r1, #8
 8004174:	4620      	mov	r0, r4
 8004176:	f001 fb0d 	bl	8005794 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800417a:	2200      	movs	r2, #0
 800417c:	2110      	movs	r1, #16
 800417e:	4620      	mov	r0, r4
 8004180:	f001 fb08 	bl	8005794 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8004184:	2201      	movs	r2, #1
 8004186:	2120      	movs	r1, #32
 8004188:	4620      	mov	r0, r4
 800418a:	f001 fb03 	bl	8005794 <HAL_GPIO_WritePin>
      break;
 800418e:	e7ca      	b.n	8004126 <BSP_RADIO_ConfigRFSwitch+0x2e>
 8004190:	48000800 	.word	0x48000800

08004194 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
  return RADIO_CONF_RFO_LP_HP;
}
 8004194:	2000      	movs	r0, #0
 8004196:	4770      	bx	lr

08004198 <BSP_RADIO_IsTCXO>:
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
  return RADIO_CONF_TCXO_SUPPORTED;
}
 8004198:	2001      	movs	r0, #1
 800419a:	4770      	bx	lr

0800419c <BSP_RADIO_IsDCDC>:
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
  return RADIO_CONF_DCDC_SUPPORTED;
}
 800419c:	2001      	movs	r0, #1
 800419e:	4770      	bx	lr

080041a0 <BSP_RADIO_GetRFOMaxPowerConfig>:
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 80041a0:	b908      	cbnz	r0, 80041a6 <BSP_RADIO_GetRFOMaxPowerConfig+0x6>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 80041a2:	200f      	movs	r0, #15
 80041a4:	4770      	bx	lr
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 80041a6:	2016      	movs	r0, #22
  }

  return ret;
}
 80041a8:	4770      	bx	lr

080041aa <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80041aa:	4770      	bx	lr

080041ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041ac:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041ae:	2003      	movs	r0, #3
 80041b0:	f000 fd2e 	bl	8004c10 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80041b4:	f002 f864 	bl	8006280 <HAL_RCC_GetHCLKFreq>
 80041b8:	4b06      	ldr	r3, [pc, #24]	; (80041d4 <HAL_Init+0x28>)
 80041ba:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80041bc:	200f      	movs	r0, #15
 80041be:	f7fd fe95 	bl	8001eec <HAL_InitTick>
 80041c2:	b110      	cbz	r0, 80041ca <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 80041c4:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 80041c6:	4620      	mov	r0, r4
 80041c8:	bd10      	pop	{r4, pc}
 80041ca:	4604      	mov	r4, r0
    HAL_MspInit();
 80041cc:	f7fd fd48 	bl	8001c60 <HAL_MspInit>
 80041d0:	e7f9      	b.n	80041c6 <HAL_Init+0x1a>
 80041d2:	bf00      	nop
 80041d4:	20000070 	.word	0x20000070

080041d8 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80041d8:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80041dc:	6913      	ldr	r3, [r2, #16]
 80041de:	f023 0302 	bic.w	r3, r3, #2
 80041e2:	6113      	str	r3, [r2, #16]
}
 80041e4:	4770      	bx	lr

080041e6 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80041e6:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80041ea:	6913      	ldr	r3, [r2, #16]
 80041ec:	f043 0302 	orr.w	r3, r3, #2
 80041f0:	6113      	str	r3, [r2, #16]
}
 80041f2:	4770      	bx	lr

080041f4 <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return (READ_REG(*((uint32_t *)UID_BASE)));
}
 80041f4:	4b01      	ldr	r3, [pc, #4]	; (80041fc <HAL_GetUIDw0+0x8>)
 80041f6:	f8d3 0590 	ldr.w	r0, [r3, #1424]	; 0x590
 80041fa:	4770      	bx	lr
 80041fc:	1fff7000 	.word	0x1fff7000

08004200 <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 8004200:	4b01      	ldr	r3, [pc, #4]	; (8004208 <HAL_GetUIDw1+0x8>)
 8004202:	f8d3 0594 	ldr.w	r0, [r3, #1428]	; 0x594
 8004206:	4770      	bx	lr
 8004208:	1fff7000 	.word	0x1fff7000

0800420c <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 800420c:	4b01      	ldr	r3, [pc, #4]	; (8004214 <HAL_GetUIDw2+0x8>)
 800420e:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8004212:	4770      	bx	lr
 8004214:	1fff7000 	.word	0x1fff7000

08004218 <HAL_DBGMCU_EnableDBGSleepMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8004218:	4a02      	ldr	r2, [pc, #8]	; (8004224 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 800421a:	6853      	ldr	r3, [r2, #4]
 800421c:	f043 0301 	orr.w	r3, r3, #1
 8004220:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  LL_DBGMCU_EnableDBGSleepMode();
}
 8004222:	4770      	bx	lr
 8004224:	e0042000 	.word	0xe0042000

08004228 <HAL_DBGMCU_EnableDBGStopMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8004228:	4a02      	ldr	r2, [pc, #8]	; (8004234 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 800422a:	6853      	ldr	r3, [r2, #4]
 800422c:	f043 0302 	orr.w	r3, r3, #2
 8004230:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  LL_DBGMCU_EnableDBGStopMode();
}
 8004232:	4770      	bx	lr
 8004234:	e0042000 	.word	0xe0042000

08004238 <HAL_DBGMCU_EnableDBGStandbyMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8004238:	4a02      	ldr	r2, [pc, #8]	; (8004244 <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 800423a:	6853      	ldr	r3, [r2, #4]
 800423c:	f043 0304 	orr.w	r3, r3, #4
 8004240:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  LL_DBGMCU_EnableDBGStandbyMode();
}
 8004242:	4770      	bx	lr
 8004244:	e0042000 	.word	0xe0042000

08004248 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004248:	b570      	push	{r4, r5, r6, lr}
 800424a:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800424c:	2300      	movs	r3, #0
 800424e:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8004250:	2800      	cmp	r0, #0
 8004252:	f000 811b 	beq.w	800448c <HAL_ADC_Init+0x244>
 8004256:	4604      	mov	r4, r0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004258:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800425a:	b1bb      	cbz	r3, 800428c <HAL_ADC_Init+0x44>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800425c:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800425e:	6893      	ldr	r3, [r2, #8]
 8004260:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004264:	d11f      	bne.n	80042a6 <HAL_ADC_Init+0x5e>
  MODIFY_REG(ADCx->CR,
 8004266:	6893      	ldr	r3, [r2, #8]
 8004268:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800426c:	f023 0317 	bic.w	r3, r3, #23
 8004270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004274:	6093      	str	r3, [r2, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004276:	4b86      	ldr	r3, [pc, #536]	; (8004490 <HAL_ADC_Init+0x248>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	099b      	lsrs	r3, r3, #6
 800427c:	4a85      	ldr	r2, [pc, #532]	; (8004494 <HAL_ADC_Init+0x24c>)
 800427e:	fba2 2303 	umull	r2, r3, r2, r3
 8004282:	099b      	lsrs	r3, r3, #6
 8004284:	3301      	adds	r3, #1
 8004286:	005b      	lsls	r3, r3, #1
 8004288:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800428a:	e009      	b.n	80042a0 <HAL_ADC_Init+0x58>
    HAL_ADC_MspInit(hadc);
 800428c:	f7fd f8cc 	bl	8001428 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8004290:	2300      	movs	r3, #0
 8004292:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8004294:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8004298:	e7e0      	b.n	800425c <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 800429a:	9b01      	ldr	r3, [sp, #4]
 800429c:	3b01      	subs	r3, #1
 800429e:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80042a0:	9b01      	ldr	r3, [sp, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1f9      	bne.n	800429a <HAL_ADC_Init+0x52>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80042a6:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80042a8:	6893      	ldr	r3, [r2, #8]
 80042aa:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80042ae:	f040 809c 	bne.w	80043ea <HAL_ADC_Init+0x1a2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80042b4:	f043 0310 	orr.w	r3, r3, #16
 80042b8:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042ba:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80042bc:	f043 0301 	orr.w	r3, r3, #1
 80042c0:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80042c2:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80042c4:	6893      	ldr	r3, [r2, #8]
 80042c6:	f013 0304 	ands.w	r3, r3, #4
 80042ca:	d000      	beq.n	80042ce <HAL_ADC_Init+0x86>
 80042cc:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80042ce:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80042d0:	f011 0f10 	tst.w	r1, #16
 80042d4:	f040 80d3 	bne.w	800447e <HAL_ADC_Init+0x236>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f040 80d0 	bne.w	800447e <HAL_ADC_Init+0x236>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042de:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80042e0:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 80042e4:	f041 0102 	orr.w	r1, r1, #2
 80042e8:	65a1      	str	r1, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80042ea:	6891      	ldr	r1, [r2, #8]
 80042ec:	f011 0f01 	tst.w	r1, #1
 80042f0:	d151      	bne.n	8004396 <HAL_ADC_Init+0x14e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80042f2:	68a1      	ldr	r1, [r4, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80042f4:	7e25      	ldrb	r5, [r4, #24]
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80042f6:	ea41 3185 	orr.w	r1, r1, r5, lsl #14
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80042fa:	7e65      	ldrb	r5, [r4, #25]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80042fc:	ea41 31c5 	orr.w	r1, r1, r5, lsl #15
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004300:	7ea6      	ldrb	r6, [r4, #26]
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004302:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004306:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8004308:	b10d      	cbz	r5, 800430e <HAL_ADC_Init+0xc6>
 800430a:	f44f 5580 	mov.w	r5, #4096	; 0x1000
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800430e:	4329      	orrs	r1, r5
                   hadc->Init.DataAlign                                           |
 8004310:	68e5      	ldr	r5, [r4, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004312:	4329      	orrs	r1, r5
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004314:	6925      	ldr	r5, [r4, #16]
 8004316:	2d00      	cmp	r5, #0
 8004318:	db69      	blt.n	80043ee <HAL_ADC_Init+0x1a6>
 800431a:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 800431e:	4329      	orrs	r1, r5
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004320:	f894 502c 	ldrb.w	r5, [r4, #44]	; 0x2c
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004324:	ea41 0145 	orr.w	r1, r1, r5, lsl #1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004328:	f894 5020 	ldrb.w	r5, [r4, #32]
 800432c:	2d01      	cmp	r5, #1
 800432e:	d061      	beq.n	80043f4 <HAL_ADC_Init+0x1ac>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004330:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004332:	b125      	cbz	r5, 800433e <HAL_ADC_Init+0xf6>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004334:	f405 75e0 	and.w	r5, r5, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8004338:	6aa6      	ldr	r6, [r4, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800433a:	4335      	orrs	r5, r6
 800433c:	4329      	orrs	r1, r5
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800433e:	68d5      	ldr	r5, [r2, #12]
 8004340:	f425 3cfe 	bic.w	ip, r5, #130048	; 0x1fc00
 8004344:	f42c 7cff 	bic.w	ip, ip, #510	; 0x1fe
 8004348:	ea4c 0101 	orr.w	r1, ip, r1
 800434c:	60d1      	str	r1, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800434e:	6862      	ldr	r2, [r4, #4]
 8004350:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8004354:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004356:	ea42 0501 	orr.w	r5, r2, r1
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800435a:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 800435e:	2901      	cmp	r1, #1
 8004360:	d055      	beq.n	800440e <HAL_ADC_Init+0x1c6>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8004362:	6822      	ldr	r2, [r4, #0]
 8004364:	6916      	ldr	r6, [r2, #16]
 8004366:	494c      	ldr	r1, [pc, #304]	; (8004498 <HAL_ADC_Init+0x250>)
 8004368:	4031      	ands	r1, r6
 800436a:	4329      	orrs	r1, r5
 800436c:	6111      	str	r1, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800436e:	6862      	ldr	r2, [r4, #4]
 8004370:	f1b2 4f40 	cmp.w	r2, #3221225472	; 0xc0000000
 8004374:	d00f      	beq.n	8004396 <HAL_ADC_Init+0x14e>
 8004376:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800437a:	d00c      	beq.n	8004396 <HAL_ADC_Init+0x14e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800437c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8004380:	d009      	beq.n	8004396 <HAL_ADC_Init+0x14e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8004382:	4d46      	ldr	r5, [pc, #280]	; (800449c <HAL_ADC_Init+0x254>)
 8004384:	f8d5 1708 	ldr.w	r1, [r5, #1800]	; 0x708
 8004388:	f421 1170 	bic.w	r1, r1, #3932160	; 0x3c0000
 800438c:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
 8004390:	430a      	orrs	r2, r1
 8004392:	f8c5 2708 	str.w	r2, [r5, #1800]	; 0x708
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8004396:	6825      	ldr	r5, [r4, #0]
 8004398:	6b62      	ldr	r2, [r4, #52]	; 0x34
  MODIFY_REG(ADCx->SMPR,
 800439a:	6969      	ldr	r1, [r5, #20]
 800439c:	f021 0107 	bic.w	r1, r1, #7
 80043a0:	430a      	orrs	r2, r1
 80043a2:	616a      	str	r2, [r5, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80043a4:	6821      	ldr	r1, [r4, #0]
 80043a6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80043a8:	694a      	ldr	r2, [r1, #20]
 80043aa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80043ae:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 80043b2:	614a      	str	r2, [r1, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80043b4:	6922      	ldr	r2, [r4, #16]
 80043b6:	2a00      	cmp	r2, #0
 80043b8:	d133      	bne.n	8004422 <HAL_ADC_Init+0x1da>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80043ba:	6822      	ldr	r2, [r4, #0]
 80043bc:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80043be:	f063 030f 	orn	r3, r3, #15
 80043c2:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80043c4:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	f003 0307 	and.w	r3, r3, #7
      == hadc->Init.SamplingTimeCommon1)
 80043cc:	6b62      	ldr	r2, [r4, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d04c      	beq.n	800446c <HAL_ADC_Init+0x224>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80043d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80043d4:	f023 0312 	bic.w	r3, r3, #18
 80043d8:	f043 0310 	orr.w	r3, r3, #16
 80043dc:	65a3      	str	r3, [r4, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043de:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80043e0:	f043 0301 	orr.w	r3, r3, #1
 80043e4:	65e3      	str	r3, [r4, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80043e6:	2001      	movs	r0, #1
 80043e8:	e04e      	b.n	8004488 <HAL_ADC_Init+0x240>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043ea:	2000      	movs	r0, #0
 80043ec:	e76a      	b.n	80042c4 <HAL_ADC_Init+0x7c>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80043ee:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 80043f2:	e794      	b.n	800431e <HAL_ADC_Init+0xd6>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80043f4:	b916      	cbnz	r6, 80043fc <HAL_ADC_Init+0x1b4>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80043f6:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80043fa:	e799      	b.n	8004330 <HAL_ADC_Init+0xe8>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043fc:	6da5      	ldr	r5, [r4, #88]	; 0x58
 80043fe:	f045 0520 	orr.w	r5, r5, #32
 8004402:	65a5      	str	r5, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004404:	6de5      	ldr	r5, [r4, #92]	; 0x5c
 8004406:	f045 0501 	orr.w	r5, r5, #1
 800440a:	65e5      	str	r5, [r4, #92]	; 0x5c
 800440c:	e790      	b.n	8004330 <HAL_ADC_Init+0xe8>
                     hadc->Init.Oversampling.Ratio         |
 800440e:	6c21      	ldr	r1, [r4, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004410:	430a      	orrs	r2, r1
                     hadc->Init.Oversampling.RightBitShift |
 8004412:	6c61      	ldr	r1, [r4, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8004414:	430a      	orrs	r2, r1
                     hadc->Init.Oversampling.TriggeredMode
 8004416:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8004418:	430a      	orrs	r2, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800441a:	432a      	orrs	r2, r5
 800441c:	f042 0501 	orr.w	r5, r2, #1
 8004420:	e79f      	b.n	8004362 <HAL_ADC_Init+0x11a>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004422:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8004426:	d1cd      	bne.n	80043c4 <HAL_ADC_Init+0x17c>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8004428:	2b07      	cmp	r3, #7
 800442a:	d808      	bhi.n	800443e <HAL_ADC_Init+0x1f6>
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 800442c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800442e:	0099      	lsls	r1, r3, #2
 8004430:	40ca      	lsrs	r2, r1
 8004432:	f002 020f 	and.w	r2, r2, #15
 8004436:	2a0f      	cmp	r2, #15
 8004438:	d001      	beq.n	800443e <HAL_ADC_Init+0x1f6>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800443a:	3301      	adds	r3, #1
 800443c:	e7f4      	b.n	8004428 <HAL_ADC_Init+0x1e0>
      if (ADCGroupRegularSequencerRanksCount == 1UL)
 800443e:	2b01      	cmp	r3, #1
 8004440:	d00e      	beq.n	8004460 <HAL_ADC_Init+0x218>
        MODIFY_REG(hadc->Instance->CHSELR,
 8004442:	6821      	ldr	r1, [r4, #0]
 8004444:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8004446:	69e3      	ldr	r3, [r4, #28]
 8004448:	3b01      	subs	r3, #1
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	f003 031c 	and.w	r3, r3, #28
 8004450:	f06f 020f 	mvn.w	r2, #15
 8004454:	fa02 f303 	lsl.w	r3, r2, r3
 8004458:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800445a:	4313      	orrs	r3, r2
 800445c:	628b      	str	r3, [r1, #40]	; 0x28
 800445e:	e7b1      	b.n	80043c4 <HAL_ADC_Init+0x17c>
        SET_BIT(hadc->Instance->CHSELR,
 8004460:	6822      	ldr	r2, [r4, #0]
 8004462:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8004464:	f063 030f 	orn	r3, r3, #15
 8004468:	6293      	str	r3, [r2, #40]	; 0x28
 800446a:	e7ab      	b.n	80043c4 <HAL_ADC_Init+0x17c>
      ADC_CLEAR_ERRORCODE(hadc);
 800446c:	2300      	movs	r3, #0
 800446e:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8004470:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004472:	f023 0303 	bic.w	r3, r3, #3
 8004476:	f043 0301 	orr.w	r3, r3, #1
 800447a:	65a3      	str	r3, [r4, #88]	; 0x58
 800447c:	e004      	b.n	8004488 <HAL_ADC_Init+0x240>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800447e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004480:	f043 0310 	orr.w	r3, r3, #16
 8004484:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004486:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 8004488:	b002      	add	sp, #8
 800448a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800448c:	2001      	movs	r0, #1
 800448e:	e7fb      	b.n	8004488 <HAL_ADC_Init+0x240>
 8004490:	20000070 	.word	0x20000070
 8004494:	053e2d63 	.word	0x053e2d63
 8004498:	1ffffc02 	.word	0x1ffffc02
 800449c:	40012000 	.word	0x40012000

080044a0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80044a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044a2:	4604      	mov	r4, r0
 80044a4:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80044a6:	6946      	ldr	r6, [r0, #20]
 80044a8:	2e08      	cmp	r6, #8
 80044aa:	d005      	beq.n	80044b8 <HAL_ADC_PollForConversion+0x18>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80044ac:	6803      	ldr	r3, [r0, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	f013 0f01 	tst.w	r3, #1
 80044b4:	d11e      	bne.n	80044f4 <HAL_ADC_PollForConversion+0x54>

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80044b6:	2604      	movs	r6, #4
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80044b8:	f7fd fd1a 	bl	8001ef0 <HAL_GetTick>
 80044bc:	4607      	mov	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80044be:	6823      	ldr	r3, [r4, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	4232      	tst	r2, r6
 80044c4:	d11c      	bne.n	8004500 <HAL_ADC_PollForConversion+0x60>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80044c6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80044ca:	d0f8      	beq.n	80044be <HAL_ADC_PollForConversion+0x1e>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80044cc:	f7fd fd10 	bl	8001ef0 <HAL_GetTick>
 80044d0:	1bc3      	subs	r3, r0, r7
 80044d2:	42ab      	cmp	r3, r5
 80044d4:	d801      	bhi.n	80044da <HAL_ADC_PollForConversion+0x3a>
 80044d6:	2d00      	cmp	r5, #0
 80044d8:	d1f1      	bne.n	80044be <HAL_ADC_PollForConversion+0x1e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80044da:	6823      	ldr	r3, [r4, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4233      	tst	r3, r6
 80044e0:	d1ed      	bne.n	80044be <HAL_ADC_PollForConversion+0x1e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80044e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80044e4:	f043 0304 	orr.w	r3, r3, #4
 80044e8:	65a3      	str	r3, [r4, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 80044ea:	2300      	movs	r3, #0
 80044ec:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

          return HAL_TIMEOUT;
 80044f0:	2003      	movs	r0, #3
 80044f2:	e028      	b.n	8004546 <HAL_ADC_PollForConversion+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044f4:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80044f6:	f043 0320 	orr.w	r3, r3, #32
 80044fa:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 80044fc:	2001      	movs	r0, #1
 80044fe:	e022      	b.n	8004546 <HAL_ADC_PollForConversion+0xa6>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004500:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8004502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004506:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8004508:	68da      	ldr	r2, [r3, #12]
 800450a:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800450e:	d115      	bne.n	800453c <HAL_ADC_PollForConversion+0x9c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004510:	7ea2      	ldrb	r2, [r4, #26]
 8004512:	b99a      	cbnz	r2, 800453c <HAL_ADC_PollForConversion+0x9c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	f012 0f08 	tst.w	r2, #8
 800451a:	d00f      	beq.n	800453c <HAL_ADC_PollForConversion+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800451c:	689a      	ldr	r2, [r3, #8]
 800451e:	f012 0f04 	tst.w	r2, #4
 8004522:	d111      	bne.n	8004548 <HAL_ADC_PollForConversion+0xa8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004524:	685a      	ldr	r2, [r3, #4]
 8004526:	f022 020c 	bic.w	r2, r2, #12
 800452a:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800452c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800452e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004532:	f023 0301 	bic.w	r3, r3, #1
 8004536:	f043 0301 	orr.w	r3, r3, #1
 800453a:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800453c:	7e20      	ldrb	r0, [r4, #24]
 800453e:	b960      	cbnz	r0, 800455a <HAL_ADC_PollForConversion+0xba>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004540:	6823      	ldr	r3, [r4, #0]
 8004542:	220c      	movs	r2, #12
 8004544:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8004546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004548:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800454a:	f043 0320 	orr.w	r3, r3, #32
 800454e:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004550:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004552:	f043 0301 	orr.w	r3, r3, #1
 8004556:	65e3      	str	r3, [r4, #92]	; 0x5c
 8004558:	e7f0      	b.n	800453c <HAL_ADC_PollForConversion+0x9c>
  return HAL_OK;
 800455a:	2000      	movs	r0, #0
 800455c:	e7f3      	b.n	8004546 <HAL_ADC_PollForConversion+0xa6>

0800455e <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800455e:	6803      	ldr	r3, [r0, #0]
 8004560:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8004562:	4770      	bx	lr

08004564 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8004564:	b470      	push	{r4, r5, r6}
 8004566:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004568:	2200      	movs	r2, #0
 800456a:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800456c:	6904      	ldr	r4, [r0, #16]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800456e:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 8004572:	2a01      	cmp	r2, #1
 8004574:	f000 8105 	beq.w	8004782 <HAL_ADC_ConfigChannel+0x21e>
 8004578:	4603      	mov	r3, r0
 800457a:	2201      	movs	r2, #1
 800457c:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004580:	6802      	ldr	r2, [r0, #0]
 8004582:	6890      	ldr	r0, [r2, #8]
 8004584:	f010 0f04 	tst.w	r0, #4
 8004588:	d00a      	beq.n	80045a0 <HAL_ADC_ConfigChannel+0x3c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800458a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800458c:	f042 0220 	orr.w	r2, r2, #32
 8004590:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004592:	2001      	movs	r0, #1
  }

  __HAL_UNLOCK(hadc);
 8004594:	2200      	movs	r2, #0
 8004596:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
}
 800459a:	b003      	add	sp, #12
 800459c:	bc70      	pop	{r4, r5, r6}
 800459e:	4770      	bx	lr
    if (pConfig->Rank != ADC_RANK_NONE)
 80045a0:	6848      	ldr	r0, [r1, #4]
 80045a2:	2802      	cmp	r0, #2
 80045a4:	f000 809e 	beq.w	80046e4 <HAL_ADC_ConfigChannel+0x180>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80045a8:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 80045ac:	d029      	beq.n	8004602 <HAL_ADC_ConfigChannel+0x9e>
 80045ae:	4d76      	ldr	r5, [pc, #472]	; (8004788 <HAL_ADC_ConfigChannel+0x224>)
 80045b0:	42ac      	cmp	r4, r5
 80045b2:	d026      	beq.n	8004602 <HAL_ADC_ConfigChannel+0x9e>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80045b4:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 80045b6:	f000 001f 	and.w	r0, r0, #31
 80045ba:	250f      	movs	r5, #15
 80045bc:	4085      	lsls	r5, r0
 80045be:	ea24 0505 	bic.w	r5, r4, r5
 80045c2:	680c      	ldr	r4, [r1, #0]
 80045c4:	f3c4 0611 	ubfx	r6, r4, #0, #18
 80045c8:	2e00      	cmp	r6, #0
 80045ca:	d133      	bne.n	8004634 <HAL_ADC_ConfigChannel+0xd0>
 80045cc:	f3c4 6484 	ubfx	r4, r4, #26, #5
 80045d0:	fa04 f000 	lsl.w	r0, r4, r0
 80045d4:	4328      	orrs	r0, r5
 80045d6:	6618      	str	r0, [r3, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80045d8:	684c      	ldr	r4, [r1, #4]
 80045da:	08a0      	lsrs	r0, r4, #2
 80045dc:	3001      	adds	r0, #1
 80045de:	69dd      	ldr	r5, [r3, #28]
 80045e0:	42a8      	cmp	r0, r5
 80045e2:	d814      	bhi.n	800460e <HAL_ADC_ConfigChannel+0xaa>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80045e4:	680d      	ldr	r5, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 80045e6:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80045e8:	f004 041f 	and.w	r4, r4, #31
 80045ec:	260f      	movs	r6, #15
 80045ee:	40a6      	lsls	r6, r4
 80045f0:	ea20 0006 	bic.w	r0, r0, r6
 80045f4:	f3c5 6583 	ubfx	r5, r5, #26, #4
 80045f8:	fa05 f404 	lsl.w	r4, r5, r4
 80045fc:	4304      	orrs	r4, r0
 80045fe:	6294      	str	r4, [r2, #40]	; 0x28
}
 8004600:	e005      	b.n	800460e <HAL_ADC_ConfigChannel+0xaa>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004602:	680c      	ldr	r4, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004604:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8004606:	f3c4 0411 	ubfx	r4, r4, #0, #18
 800460a:	4320      	orrs	r0, r4
 800460c:	6290      	str	r0, [r2, #40]	; 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800460e:	681c      	ldr	r4, [r3, #0]
 8004610:	680d      	ldr	r5, [r1, #0]
 8004612:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 8004614:	6960      	ldr	r0, [r4, #20]
 8004616:	ea20 2005 	bic.w	r0, r0, r5, lsl #8
 800461a:	ea02 2205 	and.w	r2, r2, r5, lsl #8
 800461e:	f022 427c 	bic.w	r2, r2, #4227858432	; 0xfc000000
 8004622:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004626:	4302      	orrs	r2, r0
 8004628:	6162      	str	r2, [r4, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800462a:	680a      	ldr	r2, [r1, #0]
 800462c:	2a00      	cmp	r2, #0
 800462e:	db09      	blt.n	8004644 <HAL_ADC_ConfigChannel+0xe0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004630:	2000      	movs	r0, #0
 8004632:	e7af      	b.n	8004594 <HAL_ADC_ConfigChannel+0x30>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004634:	fa94 f4a4 	rbit	r4, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004638:	b114      	cbz	r4, 8004640 <HAL_ADC_ConfigChannel+0xdc>
  {
    return 32U;
  }
  return __builtin_clz(value);
 800463a:	fab4 f484 	clz	r4, r4
 800463e:	e7c7      	b.n	80045d0 <HAL_ADC_ConfigChannel+0x6c>
    return 32U;
 8004640:	2420      	movs	r4, #32
 8004642:	e7c5      	b.n	80045d0 <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004644:	4951      	ldr	r1, [pc, #324]	; (800478c <HAL_ADC_ConfigChannel+0x228>)
 8004646:	f8d1 0708 	ldr.w	r0, [r1, #1800]	; 0x708
 800464a:	f000 71e0 	and.w	r1, r0, #29360128	; 0x1c00000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800464e:	4c50      	ldr	r4, [pc, #320]	; (8004790 <HAL_ADC_ConfigChannel+0x22c>)
 8004650:	42a2      	cmp	r2, r4
 8004652:	d007      	beq.n	8004664 <HAL_ADC_ConfigChannel+0x100>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004654:	4c4f      	ldr	r4, [pc, #316]	; (8004794 <HAL_ADC_ConfigChannel+0x230>)
 8004656:	42a2      	cmp	r2, r4
 8004658:	d026      	beq.n	80046a8 <HAL_ADC_ConfigChannel+0x144>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800465a:	4c4f      	ldr	r4, [pc, #316]	; (8004798 <HAL_ADC_ConfigChannel+0x234>)
 800465c:	42a2      	cmp	r2, r4
 800465e:	d032      	beq.n	80046c6 <HAL_ADC_ConfigChannel+0x162>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004660:	2000      	movs	r0, #0
 8004662:	e797      	b.n	8004594 <HAL_ADC_ConfigChannel+0x30>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004664:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8004668:	d1f4      	bne.n	8004654 <HAL_ADC_ConfigChannel+0xf0>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800466a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800466e:	4847      	ldr	r0, [pc, #284]	; (800478c <HAL_ADC_ConfigChannel+0x228>)
 8004670:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8004674:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8004678:	4311      	orrs	r1, r2
 800467a:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800467e:	4a47      	ldr	r2, [pc, #284]	; (800479c <HAL_ADC_ConfigChannel+0x238>)
 8004680:	6812      	ldr	r2, [r2, #0]
 8004682:	0992      	lsrs	r2, r2, #6
 8004684:	4946      	ldr	r1, [pc, #280]	; (80047a0 <HAL_ADC_ConfigChannel+0x23c>)
 8004686:	fba1 1202 	umull	r1, r2, r1, r2
 800468a:	0992      	lsrs	r2, r2, #6
 800468c:	3201      	adds	r2, #1
 800468e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8004692:	0092      	lsls	r2, r2, #2
 8004694:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8004696:	e002      	b.n	800469e <HAL_ADC_ConfigChannel+0x13a>
            wait_loop_index--;
 8004698:	9a01      	ldr	r2, [sp, #4]
 800469a:	3a01      	subs	r2, #1
 800469c:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800469e:	9a01      	ldr	r2, [sp, #4]
 80046a0:	2a00      	cmp	r2, #0
 80046a2:	d1f9      	bne.n	8004698 <HAL_ADC_ConfigChannel+0x134>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046a4:	2000      	movs	r0, #0
 80046a6:	e775      	b.n	8004594 <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80046a8:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 80046ac:	d1d5      	bne.n	800465a <HAL_ADC_ConfigChannel+0xf6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046ae:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 80046b2:	4836      	ldr	r0, [pc, #216]	; (800478c <HAL_ADC_ConfigChannel+0x228>)
 80046b4:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 80046b8:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80046bc:	4311      	orrs	r1, r2
 80046be:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046c2:	2000      	movs	r0, #0
}
 80046c4:	e766      	b.n	8004594 <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80046c6:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 80046ca:	d158      	bne.n	800477e <HAL_ADC_ConfigChannel+0x21a>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046cc:	f441 0280 	orr.w	r2, r1, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80046d0:	482e      	ldr	r0, [pc, #184]	; (800478c <HAL_ADC_ConfigChannel+0x228>)
 80046d2:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 80046d6:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80046da:	430a      	orrs	r2, r1
 80046dc:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046e0:	2000      	movs	r0, #0
}
 80046e2:	e757      	b.n	8004594 <HAL_ADC_ConfigChannel+0x30>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80046e4:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 80046e8:	d002      	beq.n	80046f0 <HAL_ADC_ConfigChannel+0x18c>
 80046ea:	4827      	ldr	r0, [pc, #156]	; (8004788 <HAL_ADC_ConfigChannel+0x224>)
 80046ec:	4284      	cmp	r4, r0
 80046ee:	d106      	bne.n	80046fe <HAL_ADC_ConfigChannel+0x19a>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80046f0:	680c      	ldr	r4, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80046f2:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80046f4:	f3c4 0411 	ubfx	r4, r4, #0, #18
 80046f8:	ea20 0004 	bic.w	r0, r0, r4
 80046fc:	6290      	str	r0, [r2, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80046fe:	680a      	ldr	r2, [r1, #0]
 8004700:	2a00      	cmp	r2, #0
 8004702:	db01      	blt.n	8004708 <HAL_ADC_ConfigChannel+0x1a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004704:	2000      	movs	r0, #0
 8004706:	e745      	b.n	8004594 <HAL_ADC_ConfigChannel+0x30>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004708:	4920      	ldr	r1, [pc, #128]	; (800478c <HAL_ADC_ConfigChannel+0x228>)
 800470a:	f8d1 1708 	ldr.w	r1, [r1, #1800]	; 0x708
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800470e:	4820      	ldr	r0, [pc, #128]	; (8004790 <HAL_ADC_ConfigChannel+0x22c>)
 8004710:	4282      	cmp	r2, r0
 8004712:	d007      	beq.n	8004724 <HAL_ADC_ConfigChannel+0x1c0>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004714:	481f      	ldr	r0, [pc, #124]	; (8004794 <HAL_ADC_ConfigChannel+0x230>)
 8004716:	4282      	cmp	r2, r0
 8004718:	d013      	beq.n	8004742 <HAL_ADC_ConfigChannel+0x1de>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800471a:	481f      	ldr	r0, [pc, #124]	; (8004798 <HAL_ADC_ConfigChannel+0x234>)
 800471c:	4282      	cmp	r2, r0
 800471e:	d01f      	beq.n	8004760 <HAL_ADC_ConfigChannel+0x1fc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004720:	2000      	movs	r0, #0
 8004722:	e737      	b.n	8004594 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004724:	f001 71a0 	and.w	r1, r1, #20971520	; 0x1400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004728:	f100 4010 	add.w	r0, r0, #2415919104	; 0x90000000
 800472c:	f500 3088 	add.w	r0, r0, #69632	; 0x11000
 8004730:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8004734:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8004738:	4311      	orrs	r1, r2
 800473a:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800473e:	2000      	movs	r0, #0
}
 8004740:	e728      	b.n	8004594 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004742:	f401 0240 	and.w	r2, r1, #12582912	; 0xc00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004746:	f100 4008 	add.w	r0, r0, #2281701376	; 0x88000000
 800474a:	f500 4060 	add.w	r0, r0, #57344	; 0xe000
 800474e:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 8004752:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8004756:	430a      	orrs	r2, r1
 8004758:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800475c:	2000      	movs	r0, #0
}
 800475e:	e719      	b.n	8004594 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004760:	f001 72c0 	and.w	r2, r1, #25165824	; 0x1800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004764:	f100 400c 	add.w	r0, r0, #2348810240	; 0x8c000000
 8004768:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 800476c:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 8004770:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8004774:	430a      	orrs	r2, r1
 8004776:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800477a:	2000      	movs	r0, #0
}
 800477c:	e70a      	b.n	8004594 <HAL_ADC_ConfigChannel+0x30>
 800477e:	2000      	movs	r0, #0
 8004780:	e708      	b.n	8004594 <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 8004782:	2002      	movs	r0, #2
 8004784:	e709      	b.n	800459a <HAL_ADC_ConfigChannel+0x36>
 8004786:	bf00      	nop
 8004788:	80000004 	.word	0x80000004
 800478c:	40012000 	.word	0x40012000
 8004790:	b0001000 	.word	0xb0001000
 8004794:	b8004000 	.word	0xb8004000
 8004798:	b4002000 	.word	0xb4002000
 800479c:	20000070 	.word	0x20000070
 80047a0:	053e2d63 	.word	0x053e2d63

080047a4 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80047a4:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80047a6:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80047a8:	689a      	ldr	r2, [r3, #8]
 80047aa:	f012 0f04 	tst.w	r2, #4
 80047ae:	d02a      	beq.n	8004806 <ADC_ConversionStop+0x62>
 80047b0:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80047b2:	689a      	ldr	r2, [r3, #8]
 80047b4:	f012 0f02 	tst.w	r2, #2
 80047b8:	d107      	bne.n	80047ca <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 80047ba:	689a      	ldr	r2, [r3, #8]
 80047bc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80047c0:	f022 0217 	bic.w	r2, r2, #23
 80047c4:	f042 0210 	orr.w	r2, r2, #16
 80047c8:	609a      	str	r2, [r3, #8]
      LL_ADC_REG_StopConversion(hadc->Instance);
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80047ca:	f7fd fb91 	bl	8001ef0 <HAL_GetTick>
 80047ce:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80047d0:	6823      	ldr	r3, [r4, #0]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f013 0f04 	tst.w	r3, #4
 80047d8:	d013      	beq.n	8004802 <ADC_ConversionStop+0x5e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80047da:	f7fd fb89 	bl	8001ef0 <HAL_GetTick>
 80047de:	1b43      	subs	r3, r0, r5
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d9f5      	bls.n	80047d0 <ADC_ConversionStop+0x2c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80047e4:	6823      	ldr	r3, [r4, #0]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f013 0f04 	tst.w	r3, #4
 80047ec:	d0f0      	beq.n	80047d0 <ADC_ConversionStop+0x2c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80047f0:	f043 0310 	orr.w	r3, r3, #16
 80047f4:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047f6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80047f8:	f043 0301 	orr.w	r3, r3, #1
 80047fc:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 80047fe:	2001      	movs	r0, #1
 8004800:	e002      	b.n	8004808 <ADC_ConversionStop+0x64>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004802:	2000      	movs	r0, #0
 8004804:	e000      	b.n	8004808 <ADC_ConversionStop+0x64>
 8004806:	2000      	movs	r0, #0
}
 8004808:	bd38      	pop	{r3, r4, r5, pc}
	...

0800480c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800480c:	b530      	push	{r4, r5, lr}
 800480e:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004810:	2300      	movs	r3, #0
 8004812:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004814:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004816:	689a      	ldr	r2, [r3, #8]
 8004818:	f012 0f01 	tst.w	r2, #1
 800481c:	d15b      	bne.n	80048d6 <ADC_Enable+0xca>
 800481e:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004820:	6899      	ldr	r1, [r3, #8]
 8004822:	4a2e      	ldr	r2, [pc, #184]	; (80048dc <ADC_Enable+0xd0>)
 8004824:	4211      	tst	r1, r2
 8004826:	d117      	bne.n	8004858 <ADC_Enable+0x4c>
  MODIFY_REG(ADCx->CR,
 8004828:	689a      	ldr	r2, [r3, #8]
 800482a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800482e:	f022 0217 	bic.w	r2, r2, #23
 8004832:	f042 0201 	orr.w	r2, r2, #1
 8004836:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004838:	4b29      	ldr	r3, [pc, #164]	; (80048e0 <ADC_Enable+0xd4>)
 800483a:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800483e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8004842:	d019      	beq.n	8004878 <ADC_Enable+0x6c>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004844:	4b27      	ldr	r3, [pc, #156]	; (80048e4 <ADC_Enable+0xd8>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	099b      	lsrs	r3, r3, #6
 800484a:	4a27      	ldr	r2, [pc, #156]	; (80048e8 <ADC_Enable+0xdc>)
 800484c:	fba2 2303 	umull	r2, r3, r2, r3
 8004850:	099b      	lsrs	r3, r3, #6
 8004852:	3301      	adds	r3, #1
 8004854:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8004856:	e00c      	b.n	8004872 <ADC_Enable+0x66>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004858:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800485a:	f043 0310 	orr.w	r3, r3, #16
 800485e:	6583      	str	r3, [r0, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004860:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8004862:	f043 0301 	orr.w	r3, r3, #1
 8004866:	65c3      	str	r3, [r0, #92]	; 0x5c
      return HAL_ERROR;
 8004868:	2001      	movs	r0, #1
 800486a:	e035      	b.n	80048d8 <ADC_Enable+0xcc>
      {
        wait_loop_index--;
 800486c:	9b01      	ldr	r3, [sp, #4]
 800486e:	3b01      	subs	r3, #1
 8004870:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8004872:	9b01      	ldr	r3, [sp, #4]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1f9      	bne.n	800486c <ADC_Enable+0x60>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004878:	7e63      	ldrb	r3, [r4, #25]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d101      	bne.n	8004882 <ADC_Enable+0x76>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800487e:	2000      	movs	r0, #0
 8004880:	e02a      	b.n	80048d8 <ADC_Enable+0xcc>
      tickstart = HAL_GetTick();
 8004882:	f7fd fb35 	bl	8001ef0 <HAL_GetTick>
 8004886:	4605      	mov	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004888:	6823      	ldr	r3, [r4, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	f012 0f01 	tst.w	r2, #1
 8004890:	d11f      	bne.n	80048d2 <ADC_Enable+0xc6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004892:	689a      	ldr	r2, [r3, #8]
 8004894:	f012 0f01 	tst.w	r2, #1
 8004898:	d107      	bne.n	80048aa <ADC_Enable+0x9e>
  MODIFY_REG(ADCx->CR,
 800489a:	689a      	ldr	r2, [r3, #8]
 800489c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80048a0:	f022 0217 	bic.w	r2, r2, #23
 80048a4:	f042 0201 	orr.w	r2, r2, #1
 80048a8:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80048aa:	f7fd fb21 	bl	8001ef0 <HAL_GetTick>
 80048ae:	1b40      	subs	r0, r0, r5
 80048b0:	2802      	cmp	r0, #2
 80048b2:	d9e9      	bls.n	8004888 <ADC_Enable+0x7c>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048b4:	6823      	ldr	r3, [r4, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f013 0f01 	tst.w	r3, #1
 80048bc:	d1e4      	bne.n	8004888 <ADC_Enable+0x7c>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80048c0:	f043 0310 	orr.w	r3, r3, #16
 80048c4:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048c6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80048c8:	f043 0301 	orr.w	r3, r3, #1
 80048cc:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 80048ce:	2001      	movs	r0, #1
 80048d0:	e002      	b.n	80048d8 <ADC_Enable+0xcc>
  return HAL_OK;
 80048d2:	2000      	movs	r0, #0
 80048d4:	e000      	b.n	80048d8 <ADC_Enable+0xcc>
 80048d6:	2000      	movs	r0, #0
}
 80048d8:	b003      	add	sp, #12
 80048da:	bd30      	pop	{r4, r5, pc}
 80048dc:	80000017 	.word	0x80000017
 80048e0:	40012000 	.word	0x40012000
 80048e4:	20000070 	.word	0x20000070
 80048e8:	053e2d63 	.word	0x053e2d63

080048ec <HAL_ADC_Start>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048ec:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f013 0f04 	tst.w	r3, #4
 80048f4:	d128      	bne.n	8004948 <HAL_ADC_Start+0x5c>
{
 80048f6:	b510      	push	{r4, lr}
 80048f8:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 80048fa:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d024      	beq.n	800494c <HAL_ADC_Start+0x60>
 8004902:	2301      	movs	r3, #1
 8004904:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    tmp_hal_status = ADC_Enable(hadc);
 8004908:	f7ff ff80 	bl	800480c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800490c:	b9c0      	cbnz	r0, 8004940 <HAL_ADC_Start+0x54>
      ADC_STATE_CLR_SET(hadc->State,
 800490e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004910:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004914:	f023 0301 	bic.w	r3, r3, #1
 8004918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800491c:	65a3      	str	r3, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 800491e:	2300      	movs	r3, #0
 8004920:	65e3      	str	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004922:	6822      	ldr	r2, [r4, #0]
 8004924:	211c      	movs	r1, #28
 8004926:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8004928:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      LL_ADC_REG_StartConversion(hadc->Instance);
 800492c:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800492e:	6893      	ldr	r3, [r2, #8]
 8004930:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004934:	f023 0317 	bic.w	r3, r3, #23
 8004938:	f043 0304 	orr.w	r3, r3, #4
 800493c:	6093      	str	r3, [r2, #8]
}
 800493e:	bd10      	pop	{r4, pc}
      __HAL_UNLOCK(hadc);
 8004940:	2300      	movs	r3, #0
 8004942:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8004946:	e7fa      	b.n	800493e <HAL_ADC_Start+0x52>
    tmp_hal_status = HAL_BUSY;
 8004948:	2002      	movs	r0, #2
}
 800494a:	4770      	bx	lr
    __HAL_LOCK(hadc);
 800494c:	2002      	movs	r0, #2
 800494e:	e7f6      	b.n	800493e <HAL_ADC_Start+0x52>

08004950 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004950:	b538      	push	{r3, r4, r5, lr}
 8004952:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004954:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004956:	6893      	ldr	r3, [r2, #8]
 8004958:	f013 0302 	ands.w	r3, r3, #2
 800495c:	d000      	beq.n	8004960 <ADC_Disable+0x10>
 800495e:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004960:	6891      	ldr	r1, [r2, #8]
 8004962:	f011 0f01 	tst.w	r1, #1
 8004966:	d039      	beq.n	80049dc <ADC_Disable+0x8c>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 8004968:	2b00      	cmp	r3, #0
 800496a:	d139      	bne.n	80049e0 <ADC_Disable+0x90>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800496c:	6893      	ldr	r3, [r2, #8]
 800496e:	f003 0305 	and.w	r3, r3, #5
 8004972:	2b01      	cmp	r3, #1
 8004974:	d009      	beq.n	800498a <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004976:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004978:	f043 0310 	orr.w	r3, r3, #16
 800497c:	65a3      	str	r3, [r4, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800497e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004980:	f043 0301 	orr.w	r3, r3, #1
 8004984:	65e3      	str	r3, [r4, #92]	; 0x5c

      return HAL_ERROR;
 8004986:	2001      	movs	r0, #1
 8004988:	e029      	b.n	80049de <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 800498a:	6893      	ldr	r3, [r2, #8]
 800498c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004990:	f023 0317 	bic.w	r3, r3, #23
 8004994:	f043 0302 	orr.w	r3, r3, #2
 8004998:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800499a:	6823      	ldr	r3, [r4, #0]
 800499c:	2203      	movs	r2, #3
 800499e:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80049a0:	f7fd faa6 	bl	8001ef0 <HAL_GetTick>
 80049a4:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80049a6:	6823      	ldr	r3, [r4, #0]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f013 0f01 	tst.w	r3, #1
 80049ae:	d013      	beq.n	80049d8 <ADC_Disable+0x88>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80049b0:	f7fd fa9e 	bl	8001ef0 <HAL_GetTick>
 80049b4:	1b40      	subs	r0, r0, r5
 80049b6:	2802      	cmp	r0, #2
 80049b8:	d9f5      	bls.n	80049a6 <ADC_Disable+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80049ba:	6823      	ldr	r3, [r4, #0]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f013 0f01 	tst.w	r3, #1
 80049c2:	d0f0      	beq.n	80049a6 <ADC_Disable+0x56>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80049c6:	f043 0310 	orr.w	r3, r3, #16
 80049ca:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049cc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80049ce:	f043 0301 	orr.w	r3, r3, #1
 80049d2:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 80049d4:	2001      	movs	r0, #1
 80049d6:	e002      	b.n	80049de <ADC_Disable+0x8e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80049d8:	2000      	movs	r0, #0
 80049da:	e000      	b.n	80049de <ADC_Disable+0x8e>
 80049dc:	2000      	movs	r0, #0
}
 80049de:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 80049e0:	2000      	movs	r0, #0
 80049e2:	e7fc      	b.n	80049de <ADC_Disable+0x8e>

080049e4 <HAL_ADC_DeInit>:
{
 80049e4:	b570      	push	{r4, r5, r6, lr}
  if (hadc == NULL)
 80049e6:	2800      	cmp	r0, #0
 80049e8:	d04c      	beq.n	8004a84 <HAL_ADC_DeInit+0xa0>
 80049ea:	4604      	mov	r4, r0
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80049ec:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80049ee:	f043 0302 	orr.w	r3, r3, #2
 80049f2:	6583      	str	r3, [r0, #88]	; 0x58
  tmp_hal_status = ADC_ConversionStop(hadc);
 80049f4:	f7ff fed6 	bl	80047a4 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80049f8:	4606      	mov	r6, r0
 80049fa:	2800      	cmp	r0, #0
 80049fc:	d033      	beq.n	8004a66 <HAL_ADC_DeInit+0x82>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 80049fe:	6822      	ldr	r2, [r4, #0]
 8004a00:	6853      	ldr	r3, [r2, #4]
 8004a02:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8004a06:	f023 0303 	bic.w	r3, r3, #3
 8004a0a:	6053      	str	r3, [r2, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8004a0c:	6823      	ldr	r3, [r4, #0]
 8004a0e:	f240 329f 	movw	r2, #927	; 0x39f
 8004a12:	601a      	str	r2, [r3, #0]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8004a14:	6822      	ldr	r2, [r4, #0]
 8004a16:	68d1      	ldr	r1, [r2, #12]
 8004a18:	4b1b      	ldr	r3, [pc, #108]	; (8004a88 <HAL_ADC_DeInit+0xa4>)
 8004a1a:	400b      	ands	r3, r1
 8004a1c:	60d3      	str	r3, [r2, #12]
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8004a1e:	6822      	ldr	r2, [r4, #0]
 8004a20:	6913      	ldr	r3, [r2, #16]
 8004a22:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004a26:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8004a28:	6822      	ldr	r2, [r4, #0]
 8004a2a:	6953      	ldr	r3, [r2, #20]
 8004a2c:	f023 0307 	bic.w	r3, r3, #7
 8004a30:	6153      	str	r3, [r2, #20]
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 8004a32:	6822      	ldr	r2, [r4, #0]
 8004a34:	6a13      	ldr	r3, [r2, #32]
 8004a36:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8004a3a:	6213      	str	r3, [r2, #32]
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8004a3c:	6823      	ldr	r3, [r4, #0]
 8004a3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a40:	2500      	movs	r5, #0
 8004a42:	629d      	str	r5, [r3, #40]	; 0x28
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8004a44:	4a11      	ldr	r2, [pc, #68]	; (8004a8c <HAL_ADC_DeInit+0xa8>)
 8004a46:	f8d2 3708 	ldr.w	r3, [r2, #1800]	; 0x708
 8004a4a:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8004a4e:	f8c2 3708 	str.w	r3, [r2, #1800]	; 0x708
  HAL_ADC_MspDeInit(hadc);
 8004a52:	4620      	mov	r0, r4
 8004a54:	f7fc fcfe 	bl	8001454 <HAL_ADC_MspDeInit>
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8004a58:	6625      	str	r5, [r4, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(hadc);
 8004a5a:	65e5      	str	r5, [r4, #92]	; 0x5c
  hadc->State = HAL_ADC_STATE_RESET;
 8004a5c:	65a5      	str	r5, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 8004a5e:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
}
 8004a62:	4630      	mov	r0, r6
 8004a64:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8004a66:	4620      	mov	r0, r4
 8004a68:	f7ff ff72 	bl	8004950 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8004a6c:	4606      	mov	r6, r0
 8004a6e:	b908      	cbnz	r0, 8004a74 <HAL_ADC_DeInit+0x90>
      hadc->State = HAL_ADC_STATE_READY;
 8004a70:	2301      	movs	r3, #1
 8004a72:	65a3      	str	r3, [r4, #88]	; 0x58
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8004a74:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8004a76:	6893      	ldr	r3, [r2, #8]
 8004a78:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004a7c:	f023 0317 	bic.w	r3, r3, #23
 8004a80:	6093      	str	r3, [r2, #8]
}
 8004a82:	e7bc      	b.n	80049fe <HAL_ADC_DeInit+0x1a>
    return HAL_ERROR;
 8004a84:	2601      	movs	r6, #1
 8004a86:	e7ec      	b.n	8004a62 <HAL_ADC_DeInit+0x7e>
 8004a88:	833e0200 	.word	0x833e0200
 8004a8c:	40012000 	.word	0x40012000

08004a90 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8004a90:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d019      	beq.n	8004acc <HAL_ADC_Stop+0x3c>
{
 8004a98:	b510      	push	{r4, lr}
 8004a9a:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004aa2:	f7ff fe7f 	bl	80047a4 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8004aa6:	b118      	cbz	r0, 8004ab0 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
 8004aae:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8004ab0:	4620      	mov	r0, r4
 8004ab2:	f7ff ff4d 	bl	8004950 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8004ab6:	2800      	cmp	r0, #0
 8004ab8:	d1f6      	bne.n	8004aa8 <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 8004aba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004abc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ac0:	f023 0301 	bic.w	r3, r3, #1
 8004ac4:	f043 0301 	orr.w	r3, r3, #1
 8004ac8:	65a3      	str	r3, [r4, #88]	; 0x58
 8004aca:	e7ed      	b.n	8004aa8 <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 8004acc:	2002      	movs	r0, #2
}
 8004ace:	4770      	bx	lr

08004ad0 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8004ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ad2:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	9301      	str	r3, [sp, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8004ad8:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	f000 8094 	beq.w	8004c0a <HAL_ADCEx_Calibration_Start+0x13a>
 8004ae2:	4604      	mov	r4, r0
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004aea:	f7ff ff31 	bl	8004950 <ADC_Disable>
 8004aee:	4605      	mov	r5, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004af0:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004af2:	689a      	ldr	r2, [r3, #8]
 8004af4:	f012 0201 	ands.w	r2, r2, #1
 8004af8:	d009      	beq.n	8004b0e <HAL_ADCEx_Calibration_Start+0x3e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004afa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004afc:	f043 0310 	orr.w	r3, r3, #16
 8004b00:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8004b02:	2300      	movs	r3, #0
 8004b04:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

  return tmp_hal_status;
}
 8004b08:	4628      	mov	r0, r5
 8004b0a:	b003      	add	sp, #12
 8004b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8004b0e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004b10:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8004b14:	f041 0102 	orr.w	r1, r1, #2
 8004b18:	65a1      	str	r1, [r4, #88]	; 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004b1a:	68de      	ldr	r6, [r3, #12]
 8004b1c:	f426 46ff 	bic.w	r6, r6, #32640	; 0x7f80
 8004b20:	f026 067c 	bic.w	r6, r6, #124	; 0x7c
 8004b24:	0436      	lsls	r6, r6, #16
 8004b26:	0c36      	lsrs	r6, r6, #16
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004b28:	68d9      	ldr	r1, [r3, #12]
 8004b2a:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8004b2e:	f021 0103 	bic.w	r1, r1, #3
 8004b32:	60d9      	str	r1, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 8004b34:	4610      	mov	r0, r2
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004b36:	e005      	b.n	8004b44 <HAL_ADCEx_Calibration_Start+0x74>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8004b38:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004b3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8004b40:	4418      	add	r0, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004b42:	3201      	adds	r2, #1
 8004b44:	2a07      	cmp	r2, #7
 8004b46:	d81e      	bhi.n	8004b86 <HAL_ADCEx_Calibration_Start+0xb6>
      LL_ADC_StartCalibration(hadc->Instance);
 8004b48:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8004b4a:	688b      	ldr	r3, [r1, #8]
 8004b4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b50:	f023 0317 	bic.w	r3, r3, #23
 8004b54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b58:	608b      	str	r3, [r1, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004b5a:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004b5c:	6899      	ldr	r1, [r3, #8]
 8004b5e:	2900      	cmp	r1, #0
 8004b60:	daea      	bge.n	8004b38 <HAL_ADCEx_Calibration_Start+0x68>
        wait_loop_index++;
 8004b62:	9b01      	ldr	r3, [sp, #4]
 8004b64:	3301      	adds	r3, #1
 8004b66:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004b68:	9b01      	ldr	r3, [sp, #4]
 8004b6a:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8004b6e:	d3f4      	bcc.n	8004b5a <HAL_ADCEx_Calibration_Start+0x8a>
          ADC_STATE_CLR_SET(hadc->State,
 8004b70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004b72:	f023 0312 	bic.w	r3, r3, #18
 8004b76:	f043 0310 	orr.w	r3, r3, #16
 8004b7a:	65a3      	str	r3, [r4, #88]	; 0x58
          __HAL_UNLOCK(hadc);
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 8004b82:	2501      	movs	r5, #1
 8004b84:	e7c0      	b.n	8004b08 <HAL_ADCEx_Calibration_Start+0x38>
    calibration_factor_accumulated /= calibration_index;
 8004b86:	fbb0 f2f2 	udiv	r2, r0, r2
    LL_ADC_Enable(hadc->Instance);
 8004b8a:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8004b8c:	688b      	ldr	r3, [r1, #8]
 8004b8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b92:	f023 0317 	bic.w	r3, r3, #23
 8004b96:	f043 0301 	orr.w	r3, r3, #1
 8004b9a:	608b      	str	r3, [r1, #8]
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8004b9c:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->CALFACT,
 8004b9e:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 8004ba2:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
 8004ba6:	4302      	orrs	r2, r0
 8004ba8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    LL_ADC_Disable(hadc->Instance);
 8004bac:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8004bae:	6893      	ldr	r3, [r2, #8]
 8004bb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004bb4:	f023 0317 	bic.w	r3, r3, #23
 8004bb8:	f043 0302 	orr.w	r3, r3, #2
 8004bbc:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8004bbe:	f7fd f997 	bl	8001ef0 <HAL_GetTick>
 8004bc2:	4607      	mov	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004bc4:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004bc6:	689a      	ldr	r2, [r3, #8]
 8004bc8:	f012 0f01 	tst.w	r2, #1
 8004bcc:	d109      	bne.n	8004be2 <HAL_ADCEx_Calibration_Start+0x112>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8004bce:	68da      	ldr	r2, [r3, #12]
 8004bd0:	4316      	orrs	r6, r2
 8004bd2:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8004bd4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004bd6:	f023 0303 	bic.w	r3, r3, #3
 8004bda:	f043 0301 	orr.w	r3, r3, #1
 8004bde:	65a3      	str	r3, [r4, #88]	; 0x58
 8004be0:	e78f      	b.n	8004b02 <HAL_ADCEx_Calibration_Start+0x32>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004be2:	f7fd f985 	bl	8001ef0 <HAL_GetTick>
 8004be6:	1bc3      	subs	r3, r0, r7
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d9eb      	bls.n	8004bc4 <HAL_ADCEx_Calibration_Start+0xf4>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004bec:	6823      	ldr	r3, [r4, #0]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f013 0f01 	tst.w	r3, #1
 8004bf4:	d0e6      	beq.n	8004bc4 <HAL_ADCEx_Calibration_Start+0xf4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bf6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004bf8:	f043 0310 	orr.w	r3, r3, #16
 8004bfc:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bfe:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004c00:	f043 0301 	orr.w	r3, r3, #1
 8004c04:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 8004c06:	2501      	movs	r5, #1
 8004c08:	e77e      	b.n	8004b08 <HAL_ADCEx_Calibration_Start+0x38>
  __HAL_LOCK(hadc);
 8004c0a:	2502      	movs	r5, #2
 8004c0c:	e77c      	b.n	8004b08 <HAL_ADCEx_Calibration_Start+0x38>
	...

08004c10 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c10:	4a07      	ldr	r2, [pc, #28]	; (8004c30 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004c12:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c14:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004c18:	041b      	lsls	r3, r3, #16
 8004c1a:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c1c:	0200      	lsls	r0, r0, #8
 8004c1e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c22:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8004c24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8004c2c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004c2e:	4770      	bx	lr
 8004c30:	e000ed00 	.word	0xe000ed00

08004c34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c34:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c36:	4b19      	ldr	r3, [pc, #100]	; (8004c9c <HAL_NVIC_SetPriority+0x68>)
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c3e:	f1c3 0c07 	rsb	ip, r3, #7
 8004c42:	f1bc 0f04 	cmp.w	ip, #4
 8004c46:	bf28      	it	cs
 8004c48:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c4c:	f103 0e04 	add.w	lr, r3, #4
 8004c50:	f1be 0f06 	cmp.w	lr, #6
 8004c54:	d918      	bls.n	8004c88 <HAL_NVIC_SetPriority+0x54>
 8004c56:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c58:	f04f 3eff 	mov.w	lr, #4294967295
 8004c5c:	fa0e fc0c 	lsl.w	ip, lr, ip
 8004c60:	ea21 010c 	bic.w	r1, r1, ip
 8004c64:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c66:	fa0e f303 	lsl.w	r3, lr, r3
 8004c6a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c6e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8004c70:	2800      	cmp	r0, #0
 8004c72:	db0b      	blt.n	8004c8c <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c74:	0109      	lsls	r1, r1, #4
 8004c76:	b2c9      	uxtb	r1, r1
 8004c78:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004c7c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004c80:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004c84:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c88:	2300      	movs	r3, #0
 8004c8a:	e7e5      	b.n	8004c58 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c8c:	f000 000f 	and.w	r0, r0, #15
 8004c90:	0109      	lsls	r1, r1, #4
 8004c92:	b2c9      	uxtb	r1, r1
 8004c94:	4b02      	ldr	r3, [pc, #8]	; (8004ca0 <HAL_NVIC_SetPriority+0x6c>)
 8004c96:	5419      	strb	r1, [r3, r0]
 8004c98:	e7f4      	b.n	8004c84 <HAL_NVIC_SetPriority+0x50>
 8004c9a:	bf00      	nop
 8004c9c:	e000ed00 	.word	0xe000ed00
 8004ca0:	e000ed14 	.word	0xe000ed14

08004ca4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004ca4:	2800      	cmp	r0, #0
 8004ca6:	db07      	blt.n	8004cb8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ca8:	f000 021f 	and.w	r2, r0, #31
 8004cac:	0940      	lsrs	r0, r0, #5
 8004cae:	2301      	movs	r3, #1
 8004cb0:	4093      	lsls	r3, r2
 8004cb2:	4a02      	ldr	r2, [pc, #8]	; (8004cbc <HAL_NVIC_EnableIRQ+0x18>)
 8004cb4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	e000e100 	.word	0xe000e100

08004cc0 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004cc0:	2800      	cmp	r0, #0
 8004cc2:	db0c      	blt.n	8004cde <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cc4:	f000 021f 	and.w	r2, r0, #31
 8004cc8:	0940      	lsrs	r0, r0, #5
 8004cca:	2301      	movs	r3, #1
 8004ccc:	4093      	lsls	r3, r2
 8004cce:	3020      	adds	r0, #32
 8004cd0:	4a03      	ldr	r2, [pc, #12]	; (8004ce0 <HAL_NVIC_DisableIRQ+0x20>)
 8004cd2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004cd6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004cda:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8004cde:	4770      	bx	lr
 8004ce0:	e000e100 	.word	0xe000e100

08004ce4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ce4:	b410      	push	{r4}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ce6:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8004ce8:	f8d0 c050 	ldr.w	ip, [r0, #80]	; 0x50
 8004cec:	f8c4 c004 	str.w	ip, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004cf0:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8004cf2:	b124      	cbz	r4, 8004cfe <DMA_SetConfig+0x1a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004cf4:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8004cf6:	f8d0 c05c 	ldr.w	ip, [r0, #92]	; 0x5c
 8004cfa:	f8c4 c004 	str.w	ip, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004cfe:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004d00:	f004 0c1c 	and.w	ip, r4, #28
 8004d04:	2401      	movs	r4, #1
 8004d06:	fa04 f40c 	lsl.w	r4, r4, ip
 8004d0a:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
 8004d0e:	f8cc 4004 	str.w	r4, [ip, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004d12:	6804      	ldr	r4, [r0, #0]
 8004d14:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d16:	6883      	ldr	r3, [r0, #8]
 8004d18:	2b10      	cmp	r3, #16
 8004d1a:	d005      	beq.n	8004d28 <DMA_SetConfig+0x44>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8004d1c:	6803      	ldr	r3, [r0, #0]
 8004d1e:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8004d20:	6803      	ldr	r3, [r0, #0]
 8004d22:	60da      	str	r2, [r3, #12]
  }
}
 8004d24:	bc10      	pop	{r4}
 8004d26:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8004d28:	6803      	ldr	r3, [r0, #0]
 8004d2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8004d2c:	6803      	ldr	r3, [r0, #0]
 8004d2e:	60d9      	str	r1, [r3, #12]
 8004d30:	e7f8      	b.n	8004d24 <DMA_SetConfig+0x40>
	...

08004d34 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004d34:	6803      	ldr	r3, [r0, #0]
 8004d36:	4a14      	ldr	r2, [pc, #80]	; (8004d88 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d816      	bhi.n	8004d6a <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004d3c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004d3e:	f022 0203 	bic.w	r2, r2, #3
 8004d42:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8004d46:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 8004d4a:	6482      	str	r2, [r0, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	3b08      	subs	r3, #8
 8004d50:	4a0e      	ldr	r2, [pc, #56]	; (8004d8c <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8004d52:	fba2 2303 	umull	r2, r3, r2, r3
 8004d56:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004d58:	4a0d      	ldr	r2, [pc, #52]	; (8004d90 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 8004d5a:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004d5c:	f003 031f 	and.w	r3, r3, #31
 8004d60:	2201      	movs	r2, #1
 8004d62:	fa02 f303 	lsl.w	r3, r2, r3
 8004d66:	6503      	str	r3, [r0, #80]	; 0x50
}
 8004d68:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004d6a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004d6c:	f022 0103 	bic.w	r1, r2, #3
 8004d70:	4a08      	ldr	r2, [pc, #32]	; (8004d94 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 8004d72:	440a      	add	r2, r1
 8004d74:	6482      	str	r2, [r0, #72]	; 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	3b08      	subs	r3, #8
 8004d7a:	4a04      	ldr	r2, [pc, #16]	; (8004d8c <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8004d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d80:	091b      	lsrs	r3, r3, #4
 8004d82:	3307      	adds	r3, #7
 8004d84:	e7e8      	b.n	8004d58 <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 8004d86:	bf00      	nop
 8004d88:	40020407 	.word	0x40020407
 8004d8c:	cccccccd 	.word	0xcccccccd
 8004d90:	40020880 	.word	0x40020880
 8004d94:	4002081c 	.word	0x4002081c

08004d98 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004d98:	6843      	ldr	r3, [r0, #4]
 8004d9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d9e:	4a07      	ldr	r2, [pc, #28]	; (8004dbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8004da0:	441a      	add	r2, r3
 8004da2:	0092      	lsls	r2, r2, #2
 8004da4:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004da6:	4a06      	ldr	r2, [pc, #24]	; (8004dc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 8004da8:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004daa:	3b01      	subs	r3, #1
 8004dac:	f003 0303 	and.w	r3, r3, #3
 8004db0:	2201      	movs	r2, #1
 8004db2:	fa02 f303 	lsl.w	r3, r2, r3
 8004db6:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	1000823f 	.word	0x1000823f
 8004dc0:	40020940 	.word	0x40020940

08004dc4 <HAL_DMA_Init>:
  if (hdma == NULL)
 8004dc4:	2800      	cmp	r0, #0
 8004dc6:	d060      	beq.n	8004e8a <HAL_DMA_Init+0xc6>
{
 8004dc8:	b510      	push	{r4, lr}
 8004dca:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004dcc:	6802      	ldr	r2, [r0, #0]
 8004dce:	4b30      	ldr	r3, [pc, #192]	; (8004e90 <HAL_DMA_Init+0xcc>)
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d842      	bhi.n	8004e5a <HAL_DMA_Init+0x96>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004dd4:	4b2f      	ldr	r3, [pc, #188]	; (8004e94 <HAL_DMA_Init+0xd0>)
 8004dd6:	4413      	add	r3, r2
 8004dd8:	492f      	ldr	r1, [pc, #188]	; (8004e98 <HAL_DMA_Init+0xd4>)
 8004dda:	fba1 1303 	umull	r1, r3, r1, r3
 8004dde:	091b      	lsrs	r3, r3, #4
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004de4:	4b2d      	ldr	r3, [pc, #180]	; (8004e9c <HAL_DMA_Init+0xd8>)
 8004de6:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8004de8:	2302      	movs	r3, #2
 8004dea:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004dee:	6813      	ldr	r3, [r2, #0]
 8004df0:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df8:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004dfa:	6821      	ldr	r1, [r4, #0]
 8004dfc:	680a      	ldr	r2, [r1, #0]
 8004dfe:	68a3      	ldr	r3, [r4, #8]
 8004e00:	68e0      	ldr	r0, [r4, #12]
 8004e02:	4303      	orrs	r3, r0
 8004e04:	6920      	ldr	r0, [r4, #16]
 8004e06:	4303      	orrs	r3, r0
 8004e08:	6960      	ldr	r0, [r4, #20]
 8004e0a:	4303      	orrs	r3, r0
 8004e0c:	69a0      	ldr	r0, [r4, #24]
 8004e0e:	4303      	orrs	r3, r0
 8004e10:	69e0      	ldr	r0, [r4, #28]
 8004e12:	4303      	orrs	r3, r0
 8004e14:	6a20      	ldr	r0, [r4, #32]
 8004e16:	4303      	orrs	r3, r0
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004e1c:	4620      	mov	r0, r4
 8004e1e:	f7ff ff89 	bl	8004d34 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004e22:	68a3      	ldr	r3, [r4, #8]
 8004e24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e28:	d022      	beq.n	8004e70 <HAL_DMA_Init+0xac>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004e2a:	6863      	ldr	r3, [r4, #4]
 8004e2c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004e2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e32:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e34:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004e36:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004e38:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004e3a:	6863      	ldr	r3, [r4, #4]
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	2b03      	cmp	r3, #3
 8004e40:	d919      	bls.n	8004e76 <HAL_DMA_Init+0xb2>
    hdma->DMAmuxRequestGen = 0U;
 8004e42:	2300      	movs	r3, #0
 8004e44:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004e46:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004e48:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e4a:	2000      	movs	r0, #0
 8004e4c:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8004e54:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8004e58:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004e5a:	4b11      	ldr	r3, [pc, #68]	; (8004ea0 <HAL_DMA_Init+0xdc>)
 8004e5c:	4413      	add	r3, r2
 8004e5e:	490e      	ldr	r1, [pc, #56]	; (8004e98 <HAL_DMA_Init+0xd4>)
 8004e60:	fba1 1303 	umull	r1, r3, r1, r3
 8004e64:	091b      	lsrs	r3, r3, #4
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004e6a:	4b0e      	ldr	r3, [pc, #56]	; (8004ea4 <HAL_DMA_Init+0xe0>)
 8004e6c:	6403      	str	r3, [r0, #64]	; 0x40
 8004e6e:	e7bb      	b.n	8004de8 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004e70:	2300      	movs	r3, #0
 8004e72:	6063      	str	r3, [r4, #4]
 8004e74:	e7d9      	b.n	8004e2a <HAL_DMA_Init+0x66>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004e76:	4620      	mov	r0, r4
 8004e78:	f7ff ff8e 	bl	8004d98 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004e7c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004e7e:	2200      	movs	r2, #0
 8004e80:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004e84:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004e86:	605a      	str	r2, [r3, #4]
 8004e88:	e7df      	b.n	8004e4a <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 8004e8a:	2001      	movs	r0, #1
}
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	40020407 	.word	0x40020407
 8004e94:	bffdfff8 	.word	0xbffdfff8
 8004e98:	cccccccd 	.word	0xcccccccd
 8004e9c:	40020000 	.word	0x40020000
 8004ea0:	bffdfbf8 	.word	0xbffdfbf8
 8004ea4:	40020400 	.word	0x40020400

08004ea8 <HAL_DMA_DeInit>:
  if (NULL == hdma)
 8004ea8:	2800      	cmp	r0, #0
 8004eaa:	d04b      	beq.n	8004f44 <HAL_DMA_DeInit+0x9c>
{
 8004eac:	b538      	push	{r3, r4, r5, lr}
 8004eae:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8004eb0:	6802      	ldr	r2, [r0, #0]
 8004eb2:	6813      	ldr	r3, [r2, #0]
 8004eb4:	f023 0301 	bic.w	r3, r3, #1
 8004eb8:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004eba:	6802      	ldr	r2, [r0, #0]
 8004ebc:	4b22      	ldr	r3, [pc, #136]	; (8004f48 <HAL_DMA_DeInit+0xa0>)
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d82c      	bhi.n	8004f1c <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004ec2:	4b22      	ldr	r3, [pc, #136]	; (8004f4c <HAL_DMA_DeInit+0xa4>)
 8004ec4:	4413      	add	r3, r2
 8004ec6:	4922      	ldr	r1, [pc, #136]	; (8004f50 <HAL_DMA_DeInit+0xa8>)
 8004ec8:	fba1 1303 	umull	r1, r3, r1, r3
 8004ecc:	091b      	lsrs	r3, r3, #4
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004ed2:	4b20      	ldr	r3, [pc, #128]	; (8004f54 <HAL_DMA_DeInit+0xac>)
 8004ed4:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->Instance->CCR = 0U;
 8004ed6:	2500      	movs	r5, #0
 8004ed8:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004eda:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004edc:	f003 021c 	and.w	r2, r3, #28
 8004ee0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	4093      	lsls	r3, r2
 8004ee6:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004ee8:	4620      	mov	r0, r4
 8004eea:	f7ff ff23 	bl	8004d34 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 8004eee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004ef0:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ef2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004ef4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004ef6:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004ef8:	6863      	ldr	r3, [r4, #4]
 8004efa:	3b01      	subs	r3, #1
 8004efc:	2b03      	cmp	r3, #3
 8004efe:	d918      	bls.n	8004f32 <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = 0U;
 8004f00:	2000      	movs	r0, #0
 8004f02:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8004f04:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8004f06:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 8004f08:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004f0a:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8004f0c:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8004f0e:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f10:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 8004f12:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8004f16:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8004f1a:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004f1c:	4b0e      	ldr	r3, [pc, #56]	; (8004f58 <HAL_DMA_DeInit+0xb0>)
 8004f1e:	4413      	add	r3, r2
 8004f20:	490b      	ldr	r1, [pc, #44]	; (8004f50 <HAL_DMA_DeInit+0xa8>)
 8004f22:	fba1 1303 	umull	r1, r3, r1, r3
 8004f26:	091b      	lsrs	r3, r3, #4
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004f2c:	4b0b      	ldr	r3, [pc, #44]	; (8004f5c <HAL_DMA_DeInit+0xb4>)
 8004f2e:	6403      	str	r3, [r0, #64]	; 0x40
 8004f30:	e7d1      	b.n	8004ed6 <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004f32:	4620      	mov	r0, r4
 8004f34:	f7ff ff30 	bl	8004d98 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004f38:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004f3a:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f3c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f3e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004f40:	605a      	str	r2, [r3, #4]
 8004f42:	e7dd      	b.n	8004f00 <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 8004f44:	2001      	movs	r0, #1
}
 8004f46:	4770      	bx	lr
 8004f48:	40020407 	.word	0x40020407
 8004f4c:	bffdfff8 	.word	0xbffdfff8
 8004f50:	cccccccd 	.word	0xcccccccd
 8004f54:	40020000 	.word	0x40020000
 8004f58:	bffdfbf8 	.word	0xbffdfbf8
 8004f5c:	40020400 	.word	0x40020400

08004f60 <HAL_DMA_Start_IT>:
{
 8004f60:	b538      	push	{r3, r4, r5, lr}
 8004f62:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8004f64:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 8004f68:	2801      	cmp	r0, #1
 8004f6a:	d043      	beq.n	8004ff4 <HAL_DMA_Start_IT+0x94>
 8004f6c:	2001      	movs	r0, #1
 8004f6e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 8004f72:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 8004f76:	b2c0      	uxtb	r0, r0
 8004f78:	2801      	cmp	r0, #1
 8004f7a:	d006      	beq.n	8004f8a <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004f7c:	2380      	movs	r3, #128	; 0x80
 8004f7e:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8004f80:	2300      	movs	r3, #0
 8004f82:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_ERROR;
 8004f86:	2001      	movs	r0, #1
}
 8004f88:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f8a:	2002      	movs	r0, #2
 8004f8c:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f90:	2000      	movs	r0, #0
 8004f92:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8004f94:	6825      	ldr	r5, [r4, #0]
 8004f96:	6828      	ldr	r0, [r5, #0]
 8004f98:	f020 0001 	bic.w	r0, r0, #1
 8004f9c:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f9e:	4620      	mov	r0, r4
 8004fa0:	f7ff fea0 	bl	8004ce4 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8004fa4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004fa6:	b1d3      	cbz	r3, 8004fde <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fa8:	6822      	ldr	r2, [r4, #0]
 8004faa:	6813      	ldr	r3, [r2, #0]
 8004fac:	f043 030e 	orr.w	r3, r3, #14
 8004fb0:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004fb2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8004fba:	d003      	beq.n	8004fc4 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fc2:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8004fc4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004fc6:	b11b      	cbz	r3, 8004fd0 <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fce:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8004fd0:	6822      	ldr	r2, [r4, #0]
 8004fd2:	6813      	ldr	r3, [r2, #0]
 8004fd4:	f043 0301 	orr.w	r3, r3, #1
 8004fd8:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fda:	2000      	movs	r0, #0
 8004fdc:	e7d4      	b.n	8004f88 <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004fde:	6822      	ldr	r2, [r4, #0]
 8004fe0:	6813      	ldr	r3, [r2, #0]
 8004fe2:	f023 0304 	bic.w	r3, r3, #4
 8004fe6:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004fe8:	6822      	ldr	r2, [r4, #0]
 8004fea:	6813      	ldr	r3, [r2, #0]
 8004fec:	f043 030a 	orr.w	r3, r3, #10
 8004ff0:	6013      	str	r3, [r2, #0]
 8004ff2:	e7de      	b.n	8004fb2 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8004ff4:	2002      	movs	r0, #2
 8004ff6:	e7c7      	b.n	8004f88 <HAL_DMA_Start_IT+0x28>

08004ff8 <HAL_DMA_Abort>:
  if (NULL == hdma)
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2800      	cmp	r0, #0
 8004ffc:	d034      	beq.n	8005068 <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004ffe:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8005002:	b2d2      	uxtb	r2, r2
 8005004:	2a02      	cmp	r2, #2
 8005006:	d006      	beq.n	8005016 <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005008:	2204      	movs	r2, #4
 800500a:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 800500c:	2200      	movs	r2, #0
 800500e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    return HAL_ERROR;
 8005012:	2001      	movs	r0, #1
 8005014:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005016:	6801      	ldr	r1, [r0, #0]
 8005018:	680a      	ldr	r2, [r1, #0]
 800501a:	f022 020e 	bic.w	r2, r2, #14
 800501e:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005020:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005022:	680a      	ldr	r2, [r1, #0]
 8005024:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005028:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 800502a:	6801      	ldr	r1, [r0, #0]
 800502c:	680a      	ldr	r2, [r1, #0]
 800502e:	f022 0201 	bic.w	r2, r2, #1
 8005032:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005034:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005036:	f002 011c 	and.w	r1, r2, #28
 800503a:	6c00      	ldr	r0, [r0, #64]	; 0x40
 800503c:	2201      	movs	r2, #1
 800503e:	408a      	lsls	r2, r1
 8005040:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005042:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005044:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005046:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8005048:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800504a:	b132      	cbz	r2, 800505a <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800504c:	6811      	ldr	r1, [r2, #0]
 800504e:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8005052:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005054:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005056:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8005058:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8005060:	2000      	movs	r0, #0
 8005062:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return HAL_OK;
 8005066:	4770      	bx	lr
    return HAL_ERROR;
 8005068:	2001      	movs	r0, #1
}
 800506a:	4770      	bx	lr

0800506c <HAL_DMA_Abort_IT>:
{
 800506c:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800506e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8005072:	b2db      	uxtb	r3, r3
 8005074:	2b02      	cmp	r3, #2
 8005076:	d003      	beq.n	8005080 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005078:	2304      	movs	r3, #4
 800507a:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 800507c:	2001      	movs	r0, #1
}
 800507e:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005080:	6802      	ldr	r2, [r0, #0]
 8005082:	6813      	ldr	r3, [r2, #0]
 8005084:	f023 030e 	bic.w	r3, r3, #14
 8005088:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800508a:	6802      	ldr	r2, [r0, #0]
 800508c:	6813      	ldr	r3, [r2, #0]
 800508e:	f023 0301 	bic.w	r3, r3, #1
 8005092:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005094:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8005096:	6813      	ldr	r3, [r2, #0]
 8005098:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800509c:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800509e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80050a0:	f003 021c 	and.w	r2, r3, #28
 80050a4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80050a6:	2301      	movs	r3, #1
 80050a8:	4093      	lsls	r3, r2
 80050aa:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80050ac:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80050ae:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80050b0:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80050b2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80050b4:	b133      	cbz	r3, 80050c4 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050bc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80050be:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80050c0:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80050c2:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80050c4:	2301      	movs	r3, #1
 80050c6:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80050ca:	2300      	movs	r3, #0
 80050cc:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 80050d0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80050d2:	b113      	cbz	r3, 80050da <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 80050d4:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80050d6:	2000      	movs	r0, #0
 80050d8:	e7d1      	b.n	800507e <HAL_DMA_Abort_IT+0x12>
 80050da:	2000      	movs	r0, #0
 80050dc:	e7cf      	b.n	800507e <HAL_DMA_Abort_IT+0x12>
	...

080050e0 <HAL_DMA_IRQHandler>:
{
 80050e0:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80050e2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80050e4:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80050e6:	6804      	ldr	r4, [r0, #0]
 80050e8:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80050ea:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80050ec:	f003 031c 	and.w	r3, r3, #28
 80050f0:	2204      	movs	r2, #4
 80050f2:	409a      	lsls	r2, r3
 80050f4:	420a      	tst	r2, r1
 80050f6:	d015      	beq.n	8005124 <HAL_DMA_IRQHandler+0x44>
 80050f8:	f015 0f04 	tst.w	r5, #4
 80050fc:	d012      	beq.n	8005124 <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80050fe:	6823      	ldr	r3, [r4, #0]
 8005100:	f013 0f20 	tst.w	r3, #32
 8005104:	d103      	bne.n	800510e <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005106:	6823      	ldr	r3, [r4, #0]
 8005108:	f023 0304 	bic.w	r3, r3, #4
 800510c:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800510e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005110:	f003 021c 	and.w	r2, r3, #28
 8005114:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8005116:	2304      	movs	r3, #4
 8005118:	4093      	lsls	r3, r2
 800511a:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 800511c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800511e:	b103      	cbz	r3, 8005122 <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 8005120:	4798      	blx	r3
}
 8005122:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8005124:	2202      	movs	r2, #2
 8005126:	409a      	lsls	r2, r3
 8005128:	420a      	tst	r2, r1
 800512a:	d028      	beq.n	800517e <HAL_DMA_IRQHandler+0x9e>
 800512c:	f015 0f02 	tst.w	r5, #2
 8005130:	d025      	beq.n	800517e <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005132:	6823      	ldr	r3, [r4, #0]
 8005134:	f013 0f20 	tst.w	r3, #32
 8005138:	d106      	bne.n	8005148 <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800513a:	6823      	ldr	r3, [r4, #0]
 800513c:	f023 030a 	bic.w	r3, r3, #10
 8005140:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8005142:	2301      	movs	r3, #1
 8005144:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8005148:	6802      	ldr	r2, [r0, #0]
 800514a:	4b1c      	ldr	r3, [pc, #112]	; (80051bc <HAL_DMA_IRQHandler+0xdc>)
 800514c:	429a      	cmp	r2, r3
 800514e:	d90e      	bls.n	800516e <HAL_DMA_IRQHandler+0x8e>
 8005150:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005152:	f003 021c 	and.w	r2, r3, #28
 8005156:	2302      	movs	r3, #2
 8005158:	4093      	lsls	r3, r2
 800515a:	4a19      	ldr	r2, [pc, #100]	; (80051c0 <HAL_DMA_IRQHandler+0xe0>)
 800515c:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 800515e:	2300      	movs	r3, #0
 8005160:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      if (hdma->XferCpltCallback != NULL)
 8005164:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005166:	2b00      	cmp	r3, #0
 8005168:	d0db      	beq.n	8005122 <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 800516a:	4798      	blx	r3
 800516c:	e7d9      	b.n	8005122 <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800516e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005170:	f003 021c 	and.w	r2, r3, #28
 8005174:	2302      	movs	r3, #2
 8005176:	4093      	lsls	r3, r2
 8005178:	4a12      	ldr	r2, [pc, #72]	; (80051c4 <HAL_DMA_IRQHandler+0xe4>)
 800517a:	6053      	str	r3, [r2, #4]
 800517c:	e7ef      	b.n	800515e <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800517e:	2208      	movs	r2, #8
 8005180:	fa02 f303 	lsl.w	r3, r2, r3
 8005184:	420b      	tst	r3, r1
 8005186:	d0cc      	beq.n	8005122 <HAL_DMA_IRQHandler+0x42>
 8005188:	f015 0f08 	tst.w	r5, #8
 800518c:	d0c9      	beq.n	8005122 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800518e:	6823      	ldr	r3, [r4, #0]
 8005190:	f023 030e 	bic.w	r3, r3, #14
 8005194:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005196:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005198:	f003 031c 	and.w	r3, r3, #28
 800519c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800519e:	2201      	movs	r2, #1
 80051a0:	fa02 f303 	lsl.w	r3, r2, r3
 80051a4:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80051a6:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80051a8:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80051ac:	2300      	movs	r3, #0
 80051ae:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 80051b2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d0b4      	beq.n	8005122 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 80051b8:	4798      	blx	r3
  return;
 80051ba:	e7b2      	b.n	8005122 <HAL_DMA_IRQHandler+0x42>
 80051bc:	40020080 	.word	0x40020080
 80051c0:	40020400 	.word	0x40020400
 80051c4:	40020000 	.word	0x40020000

080051c8 <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 80051c8:	b178      	cbz	r0, 80051ea <HAL_DMA_ConfigChannelAttributes+0x22>
  ccr = READ_REG(hdma->Instance->CCR);
 80051ca:	6803      	ldr	r3, [r0, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 80051ce:	f011 0f10 	tst.w	r1, #16
 80051d2:	d004      	beq.n	80051de <HAL_DMA_ConfigChannelAttributes+0x16>
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 80051d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80051d8:	d004      	beq.n	80051e4 <HAL_DMA_ConfigChannelAttributes+0x1c>
      SET_BIT(ccr, DMA_CCR_PRIV);
 80051da:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  WRITE_REG(hdma->Instance->CCR, ccr);
 80051de:	601a      	str	r2, [r3, #0]
  return status;
 80051e0:	2000      	movs	r0, #0
 80051e2:	4770      	bx	lr
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 80051e4:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80051e8:	e7f9      	b.n	80051de <HAL_DMA_ConfigChannelAttributes+0x16>
    return status;
 80051ea:	2001      	movs	r0, #1
}
 80051ec:	4770      	bx	lr
	...

080051f0 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80051f0:	b410      	push	{r4}
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80051f2:	4c05      	ldr	r4, [pc, #20]	; (8005208 <FLASH_Program_DoubleWord+0x18>)
 80051f4:	6961      	ldr	r1, [r4, #20]
 80051f6:	f041 0101 	orr.w	r1, r1, #1
 80051fa:	6161      	str	r1, [r4, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80051fc:	6002      	str	r2, [r0, #0]
 80051fe:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8005202:	6043      	str	r3, [r0, #4]
}
 8005204:	bc10      	pop	{r4}
 8005206:	4770      	bx	lr
 8005208:	58004000 	.word	0x58004000

0800520c <FLASH_Program_Fast>:

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800520c:	4a0c      	ldr	r2, [pc, #48]	; (8005240 <FLASH_Program_Fast+0x34>)
 800520e:	6953      	ldr	r3, [r2, #20]
 8005210:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005214:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005216:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800521a:	b672      	cpsid	i
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800521c:	2340      	movs	r3, #64	; 0x40
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800521e:	f851 2b04 	ldr.w	r2, [r1], #4
 8005222:	f840 2b04 	str.w	r2, [r0], #4
    dest_addr++;
    src_addr++;
    row_index--;
 8005226:	3b01      	subs	r3, #1
  }
  while (row_index != 0U);
 8005228:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800522c:	d1f7      	bne.n	800521e <FLASH_Program_Fast+0x12>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 800522e:	4b04      	ldr	r3, [pc, #16]	; (8005240 <FLASH_Program_Fast+0x34>)
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005236:	d1fa      	bne.n	800522e <FLASH_Program_Fast+0x22>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005238:	f38c 8810 	msr	PRIMASK, ip
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	58004000 	.word	0x58004000

08005244 <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005244:	4b09      	ldr	r3, [pc, #36]	; (800526c <HAL_FLASH_Unlock+0x28>)
 8005246:	695b      	ldr	r3, [r3, #20]
 8005248:	2b00      	cmp	r3, #0
 800524a:	db01      	blt.n	8005250 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 800524c:	2000      	movs	r0, #0
 800524e:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005250:	4b06      	ldr	r3, [pc, #24]	; (800526c <HAL_FLASH_Unlock+0x28>)
 8005252:	4a07      	ldr	r2, [pc, #28]	; (8005270 <HAL_FLASH_Unlock+0x2c>)
 8005254:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005256:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 800525a:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800525c:	695b      	ldr	r3, [r3, #20]
 800525e:	2b00      	cmp	r3, #0
 8005260:	db01      	blt.n	8005266 <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8005262:	2000      	movs	r0, #0
 8005264:	4770      	bx	lr
      status = HAL_ERROR;
 8005266:	2001      	movs	r0, #1
}
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	58004000 	.word	0x58004000
 8005270:	45670123 	.word	0x45670123

08005274 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005274:	4b05      	ldr	r3, [pc, #20]	; (800528c <HAL_FLASH_Lock+0x18>)
 8005276:	695a      	ldr	r2, [r3, #20]
 8005278:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800527c:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 800527e:	695b      	ldr	r3, [r3, #20]
 8005280:	2b00      	cmp	r3, #0
 8005282:	db01      	blt.n	8005288 <HAL_FLASH_Lock+0x14>
    status = HAL_ERROR;
 8005284:	2001      	movs	r0, #1
}
 8005286:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8005288:	2000      	movs	r0, #0
 800528a:	4770      	bx	lr
 800528c:	58004000 	.word	0x58004000

08005290 <FLASH_WaitForLastOperation>:
{
 8005290:	b538      	push	{r3, r4, r5, lr}
 8005292:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8005294:	f7fc fe2c 	bl	8001ef0 <HAL_GetTick>
 8005298:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800529a:	4b16      	ldr	r3, [pc, #88]	; (80052f4 <FLASH_WaitForLastOperation+0x64>)
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80052a2:	d006      	beq.n	80052b2 <FLASH_WaitForLastOperation+0x22>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80052a4:	f7fc fe24 	bl	8001ef0 <HAL_GetTick>
 80052a8:	1b00      	subs	r0, r0, r4
 80052aa:	42a8      	cmp	r0, r5
 80052ac:	d3f5      	bcc.n	800529a <FLASH_WaitForLastOperation+0xa>
      return HAL_TIMEOUT;
 80052ae:	2003      	movs	r0, #3
}
 80052b0:	bd38      	pop	{r3, r4, r5, pc}
  error = FLASH->SR;
 80052b2:	4b10      	ldr	r3, [pc, #64]	; (80052f4 <FLASH_WaitForLastOperation+0x64>)
 80052b4:	691b      	ldr	r3, [r3, #16]
  if ((error & FLASH_FLAG_EOP) != 0U)
 80052b6:	f013 0f01 	tst.w	r3, #1
 80052ba:	d002      	beq.n	80052c2 <FLASH_WaitForLastOperation+0x32>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80052bc:	4a0d      	ldr	r2, [pc, #52]	; (80052f4 <FLASH_WaitForLastOperation+0x64>)
 80052be:	2101      	movs	r1, #1
 80052c0:	6111      	str	r1, [r2, #16]
  error &= FLASH_FLAG_SR_ERRORS;
 80052c2:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  __HAL_FLASH_CLEAR_FLAG(error);
 80052c6:	4013      	ands	r3, r2
 80052c8:	d001      	beq.n	80052ce <FLASH_WaitForLastOperation+0x3e>
 80052ca:	4a0a      	ldr	r2, [pc, #40]	; (80052f4 <FLASH_WaitForLastOperation+0x64>)
 80052cc:	6113      	str	r3, [r2, #16]
  if (error != 0U)
 80052ce:	b95b      	cbnz	r3, 80052e8 <FLASH_WaitForLastOperation+0x58>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 80052d0:	4b08      	ldr	r3, [pc, #32]	; (80052f4 <FLASH_WaitForLastOperation+0x64>)
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80052d8:	d00a      	beq.n	80052f0 <FLASH_WaitForLastOperation+0x60>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80052da:	f7fc fe09 	bl	8001ef0 <HAL_GetTick>
 80052de:	1b00      	subs	r0, r0, r4
 80052e0:	42a8      	cmp	r0, r5
 80052e2:	d3f5      	bcc.n	80052d0 <FLASH_WaitForLastOperation+0x40>
      return HAL_TIMEOUT;
 80052e4:	2003      	movs	r0, #3
 80052e6:	e7e3      	b.n	80052b0 <FLASH_WaitForLastOperation+0x20>
    pFlash.ErrorCode = error;
 80052e8:	4a03      	ldr	r2, [pc, #12]	; (80052f8 <FLASH_WaitForLastOperation+0x68>)
 80052ea:	6053      	str	r3, [r2, #4]
    return HAL_ERROR;
 80052ec:	2001      	movs	r0, #1
 80052ee:	e7df      	b.n	80052b0 <FLASH_WaitForLastOperation+0x20>
  return HAL_OK;
 80052f0:	2000      	movs	r0, #0
 80052f2:	e7dd      	b.n	80052b0 <FLASH_WaitForLastOperation+0x20>
 80052f4:	58004000 	.word	0x58004000
 80052f8:	20000754 	.word	0x20000754

080052fc <HAL_FLASH_Program>:
{
 80052fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052fe:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 8005300:	4b15      	ldr	r3, [pc, #84]	; (8005358 <HAL_FLASH_Program+0x5c>)
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d025      	beq.n	8005354 <HAL_FLASH_Program+0x58>
 8005308:	4604      	mov	r4, r0
 800530a:	460d      	mov	r5, r1
 800530c:	4616      	mov	r6, r2
 800530e:	4b12      	ldr	r3, [pc, #72]	; (8005358 <HAL_FLASH_Program+0x5c>)
 8005310:	2201      	movs	r2, #1
 8005312:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005314:	2200      	movs	r2, #0
 8005316:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005318:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800531c:	f7ff ffb8 	bl	8005290 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8005320:	b970      	cbnz	r0, 8005340 <HAL_FLASH_Program+0x44>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8005322:	2c01      	cmp	r4, #1
 8005324:	d010      	beq.n	8005348 <HAL_FLASH_Program+0x4c>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8005326:	4631      	mov	r1, r6
 8005328:	4628      	mov	r0, r5
 800532a:	f7ff ff6f 	bl	800520c <FLASH_Program_Fast>
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800532e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005332:	f7ff ffad 	bl	8005290 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8005336:	4a09      	ldr	r2, [pc, #36]	; (800535c <HAL_FLASH_Program+0x60>)
 8005338:	6953      	ldr	r3, [r2, #20]
 800533a:	ea23 0404 	bic.w	r4, r3, r4
 800533e:	6154      	str	r4, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 8005340:	4b05      	ldr	r3, [pc, #20]	; (8005358 <HAL_FLASH_Program+0x5c>)
 8005342:	2200      	movs	r2, #0
 8005344:	701a      	strb	r2, [r3, #0]
}
 8005346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_DoubleWord(Address, Data);
 8005348:	4632      	mov	r2, r6
 800534a:	463b      	mov	r3, r7
 800534c:	4628      	mov	r0, r5
 800534e:	f7ff ff4f 	bl	80051f0 <FLASH_Program_DoubleWord>
 8005352:	e7ec      	b.n	800532e <HAL_FLASH_Program+0x32>
  __HAL_LOCK(&pFlash);
 8005354:	2002      	movs	r0, #2
 8005356:	e7f6      	b.n	8005346 <HAL_FLASH_Program+0x4a>
 8005358:	20000754 	.word	0x20000754
 800535c:	58004000 	.word	0x58004000

08005360 <FLASH_MassErase>:
{
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8005360:	4a03      	ldr	r2, [pc, #12]	; (8005370 <FLASH_MassErase+0x10>)
 8005362:	6953      	ldr	r3, [r2, #20]
 8005364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005368:	f043 0304 	orr.w	r3, r3, #4
 800536c:	6153      	str	r3, [r2, #20]
#endif
}
 800536e:	4770      	bx	lr
 8005370:	58004000 	.word	0x58004000

08005374 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8005374:	4b18      	ldr	r3, [pc, #96]	; (80053d8 <FLASH_FlushCaches+0x64>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800537c:	2b01      	cmp	r3, #1
 800537e:	d006      	beq.n	800538e <FLASH_FlushCaches+0x1a>
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8005380:	4b15      	ldr	r3, [pc, #84]	; (80053d8 <FLASH_FlushCaches+0x64>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005388:	2b01      	cmp	r3, #1
 800538a:	d012      	beq.n	80053b2 <FLASH_FlushCaches+0x3e>
    __HAL_FLASH_DATA_CACHE_RESET();
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }
#endif
}
 800538c:	4770      	bx	lr
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800538e:	4b12      	ldr	r3, [pc, #72]	; (80053d8 <FLASH_FlushCaches+0x64>)
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005396:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800539e:	601a      	str	r2, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053a6:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053ae:	601a      	str	r2, [r3, #0]
 80053b0:	e7e6      	b.n	8005380 <FLASH_FlushCaches+0xc>
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80053b2:	4b09      	ldr	r3, [pc, #36]	; (80053d8 <FLASH_FlushCaches+0x64>)
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053ba:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_RESET();
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80053c2:	601a      	str	r2, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80053ca:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053d2:	601a      	str	r2, [r3, #0]
}
 80053d4:	e7da      	b.n	800538c <FLASH_FlushCaches+0x18>
 80053d6:	bf00      	nop
 80053d8:	58004000 	.word	0x58004000

080053dc <FLASH_AcknowledgePageErase>:
static void FLASH_AcknowledgePageErase(void)
{
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80053dc:	4a03      	ldr	r2, [pc, #12]	; (80053ec <FLASH_AcknowledgePageErase+0x10>)
 80053de:	6953      	ldr	r3, [r2, #20]
 80053e0:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 80053e4:	f023 0302 	bic.w	r3, r3, #2
 80053e8:	6153      	str	r3, [r2, #20]
#endif
}
 80053ea:	4770      	bx	lr
 80053ec:	58004000 	.word	0x58004000

080053f0 <FLASH_PageErase>:
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 80053f0:	4a05      	ldr	r2, [pc, #20]	; (8005408 <FLASH_PageErase+0x18>)
 80053f2:	6953      	ldr	r3, [r2, #20]
 80053f4:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 80053f8:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
 80053fc:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8005400:	f040 0002 	orr.w	r0, r0, #2
 8005404:	6150      	str	r0, [r2, #20]
}
 8005406:	4770      	bx	lr
 8005408:	58004000 	.word	0x58004000

0800540c <HAL_FLASHEx_Erase>:
{
 800540c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 800540e:	4b1e      	ldr	r3, [pc, #120]	; (8005488 <HAL_FLASHEx_Erase+0x7c>)
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	2b01      	cmp	r3, #1
 8005414:	d035      	beq.n	8005482 <HAL_FLASHEx_Erase+0x76>
 8005416:	4605      	mov	r5, r0
 8005418:	460f      	mov	r7, r1
 800541a:	4b1b      	ldr	r3, [pc, #108]	; (8005488 <HAL_FLASHEx_Erase+0x7c>)
 800541c:	2201      	movs	r2, #1
 800541e:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005420:	2200      	movs	r2, #0
 8005422:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005424:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005428:	f7ff ff32 	bl	8005290 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 800542c:	4606      	mov	r6, r0
 800542e:	bb18      	cbnz	r0, 8005478 <HAL_FLASHEx_Erase+0x6c>
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005430:	682b      	ldr	r3, [r5, #0]
 8005432:	2b04      	cmp	r3, #4
 8005434:	d013      	beq.n	800545e <HAL_FLASHEx_Erase+0x52>
      *PageError = 0xFFFFFFFFU;
 8005436:	f04f 33ff 	mov.w	r3, #4294967295
 800543a:	603b      	str	r3, [r7, #0]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800543c:	686c      	ldr	r4, [r5, #4]
 800543e:	686b      	ldr	r3, [r5, #4]
 8005440:	68aa      	ldr	r2, [r5, #8]
 8005442:	4413      	add	r3, r2
 8005444:	42a3      	cmp	r3, r4
 8005446:	d913      	bls.n	8005470 <HAL_FLASHEx_Erase+0x64>
        FLASH_PageErase(index);
 8005448:	4620      	mov	r0, r4
 800544a:	f7ff ffd1 	bl	80053f0 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800544e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005452:	f7ff ff1d 	bl	8005290 <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 8005456:	4606      	mov	r6, r0
 8005458:	b948      	cbnz	r0, 800546e <HAL_FLASHEx_Erase+0x62>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800545a:	3401      	adds	r4, #1
 800545c:	e7ef      	b.n	800543e <HAL_FLASHEx_Erase+0x32>
      FLASH_MassErase();
 800545e:	f7ff ff7f 	bl	8005360 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005462:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005466:	f7ff ff13 	bl	8005290 <FLASH_WaitForLastOperation>
 800546a:	4606      	mov	r6, r0
 800546c:	e002      	b.n	8005474 <HAL_FLASHEx_Erase+0x68>
          *PageError = index;
 800546e:	603c      	str	r4, [r7, #0]
      FLASH_AcknowledgePageErase();
 8005470:	f7ff ffb4 	bl	80053dc <FLASH_AcknowledgePageErase>
    FLASH_FlushCaches();
 8005474:	f7ff ff7e 	bl	8005374 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8005478:	4b03      	ldr	r3, [pc, #12]	; (8005488 <HAL_FLASHEx_Erase+0x7c>)
 800547a:	2200      	movs	r2, #0
 800547c:	701a      	strb	r2, [r3, #0]
}
 800547e:	4630      	mov	r0, r6
 8005480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8005482:	2602      	movs	r6, #2
 8005484:	e7fb      	b.n	800547e <HAL_FLASHEx_Erase+0x72>
 8005486:	bf00      	nop
 8005488:	20000754 	.word	0x20000754

0800548c <HAL_FLASHEx_Erase_IT>:
{
 800548c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(&pFlash);
 800548e:	4b17      	ldr	r3, [pc, #92]	; (80054ec <HAL_FLASHEx_Erase_IT+0x60>)
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	2b01      	cmp	r3, #1
 8005494:	d028      	beq.n	80054e8 <HAL_FLASHEx_Erase_IT+0x5c>
 8005496:	4604      	mov	r4, r0
 8005498:	4b14      	ldr	r3, [pc, #80]	; (80054ec <HAL_FLASHEx_Erase_IT+0x60>)
 800549a:	2201      	movs	r2, #1
 800549c:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800549e:	2200      	movs	r2, #0
 80054a0:	605a      	str	r2, [r3, #4]
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 80054a2:	6802      	ldr	r2, [r0, #0]
 80054a4:	609a      	str	r2, [r3, #8]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80054a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80054aa:	f7ff fef1 	bl	8005290 <FLASH_WaitForLastOperation>
  if (status != HAL_OK)
 80054ae:	4605      	mov	r5, r0
 80054b0:	b120      	cbz	r0, 80054bc <HAL_FLASHEx_Erase_IT+0x30>
    __HAL_UNLOCK(&pFlash);
 80054b2:	4b0e      	ldr	r3, [pc, #56]	; (80054ec <HAL_FLASHEx_Erase_IT+0x60>)
 80054b4:	2200      	movs	r2, #0
 80054b6:	701a      	strb	r2, [r3, #0]
}
 80054b8:	4628      	mov	r0, r5
 80054ba:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 80054bc:	4a0c      	ldr	r2, [pc, #48]	; (80054f0 <HAL_FLASHEx_Erase_IT+0x64>)
 80054be:	6953      	ldr	r3, [r2, #20]
 80054c0:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 80054c4:	6153      	str	r3, [r2, #20]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80054c6:	6823      	ldr	r3, [r4, #0]
 80054c8:	2b04      	cmp	r3, #4
 80054ca:	d007      	beq.n	80054dc <HAL_FLASHEx_Erase_IT+0x50>
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 80054cc:	68a2      	ldr	r2, [r4, #8]
 80054ce:	4b07      	ldr	r3, [pc, #28]	; (80054ec <HAL_FLASHEx_Erase_IT+0x60>)
 80054d0:	615a      	str	r2, [r3, #20]
      pFlash.Page = pEraseInit->Page;
 80054d2:	6860      	ldr	r0, [r4, #4]
 80054d4:	6118      	str	r0, [r3, #16]
      FLASH_PageErase(pEraseInit->Page);
 80054d6:	f7ff ff8b 	bl	80053f0 <FLASH_PageErase>
 80054da:	e7ed      	b.n	80054b8 <HAL_FLASHEx_Erase_IT+0x2c>
      pFlash.Page = 0;
 80054dc:	4b03      	ldr	r3, [pc, #12]	; (80054ec <HAL_FLASHEx_Erase_IT+0x60>)
 80054de:	2200      	movs	r2, #0
 80054e0:	611a      	str	r2, [r3, #16]
      FLASH_MassErase();
 80054e2:	f7ff ff3d 	bl	8005360 <FLASH_MassErase>
 80054e6:	e7e7      	b.n	80054b8 <HAL_FLASHEx_Erase_IT+0x2c>
  __HAL_LOCK(&pFlash);
 80054e8:	2502      	movs	r5, #2
 80054ea:	e7e5      	b.n	80054b8 <HAL_FLASHEx_Erase_IT+0x2c>
 80054ec:	20000754 	.word	0x20000754
 80054f0:	58004000 	.word	0x58004000

080054f4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054f4:	b570      	push	{r4, r5, r6, lr}
  uint32_t position = 0x00u;
 80054f6:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80054f8:	e069      	b.n	80055ce <HAL_GPIO_Init+0xda>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80054fa:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80054fc:	005e      	lsls	r6, r3, #1
 80054fe:	2403      	movs	r4, #3
 8005500:	40b4      	lsls	r4, r6
 8005502:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005506:	68cc      	ldr	r4, [r1, #12]
 8005508:	40b4      	lsls	r4, r6
 800550a:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800550c:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800550e:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005510:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005514:	684c      	ldr	r4, [r1, #4]
 8005516:	f3c4 1400 	ubfx	r4, r4, #4, #1
 800551a:	409c      	lsls	r4, r3
 800551c:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 8005520:	6044      	str	r4, [r0, #4]
 8005522:	e065      	b.n	80055f0 <HAL_GPIO_Init+0xfc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005524:	08dd      	lsrs	r5, r3, #3
 8005526:	3508      	adds	r5, #8
 8005528:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800552c:	f003 0407 	and.w	r4, r3, #7
 8005530:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005534:	240f      	movs	r4, #15
 8005536:	fa04 f40c 	lsl.w	r4, r4, ip
 800553a:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800553e:	690c      	ldr	r4, [r1, #16]
 8005540:	fa04 f40c 	lsl.w	r4, r4, ip
 8005544:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8005548:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 800554c:	e067      	b.n	800561e <HAL_GPIO_Init+0x12a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800554e:	2402      	movs	r4, #2
 8005550:	e000      	b.n	8005554 <HAL_GPIO_Init+0x60>
 8005552:	2400      	movs	r4, #0
 8005554:	fa04 f40e 	lsl.w	r4, r4, lr
 8005558:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 800555a:	f10c 0c02 	add.w	ip, ip, #2
 800555e:	4d4b      	ldr	r5, [pc, #300]	; (800568c <HAL_GPIO_Init+0x198>)
 8005560:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005564:	4c4a      	ldr	r4, [pc, #296]	; (8005690 <HAL_GPIO_Init+0x19c>)
 8005566:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8005568:	43d4      	mvns	r4, r2
 800556a:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800556e:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8005572:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
 8005576:	d001      	beq.n	800557c <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8005578:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 800557c:	4d44      	ldr	r5, [pc, #272]	; (8005690 <HAL_GPIO_Init+0x19c>)
 800557e:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8005580:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8005582:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005586:	f8d1 c004 	ldr.w	ip, [r1, #4]
 800558a:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
 800558e:	d001      	beq.n	8005594 <HAL_GPIO_Init+0xa0>
        {
          temp |= iocurrent;
 8005590:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8005594:	4d3e      	ldr	r5, [pc, #248]	; (8005690 <HAL_GPIO_Init+0x19c>)
 8005596:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8005598:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800559c:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80055a0:	f8d1 c004 	ldr.w	ip, [r1, #4]
 80055a4:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
 80055a8:	d001      	beq.n	80055ae <HAL_GPIO_Init+0xba>
        {
          temp |= iocurrent;
 80055aa:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80055ae:	4d38      	ldr	r5, [pc, #224]	; (8005690 <HAL_GPIO_Init+0x19c>)
 80055b0:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80055b4:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80055b8:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80055ba:	684e      	ldr	r6, [r1, #4]
 80055bc:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 80055c0:	d001      	beq.n	80055c6 <HAL_GPIO_Init+0xd2>
        {
          temp |= iocurrent;
 80055c2:	ea42 0405 	orr.w	r4, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80055c6:	4a32      	ldr	r2, [pc, #200]	; (8005690 <HAL_GPIO_Init+0x19c>)
 80055c8:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80055cc:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80055ce:	680a      	ldr	r2, [r1, #0]
 80055d0:	fa32 f403 	lsrs.w	r4, r2, r3
 80055d4:	d058      	beq.n	8005688 <HAL_GPIO_Init+0x194>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80055d6:	f04f 0c01 	mov.w	ip, #1
 80055da:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 80055de:	ea1c 0202 	ands.w	r2, ip, r2
 80055e2:	d0f3      	beq.n	80055cc <HAL_GPIO_Init+0xd8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80055e4:	684c      	ldr	r4, [r1, #4]
 80055e6:	f004 0403 	and.w	r4, r4, #3
 80055ea:	3c01      	subs	r4, #1
 80055ec:	2c01      	cmp	r4, #1
 80055ee:	d984      	bls.n	80054fa <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055f0:	684c      	ldr	r4, [r1, #4]
 80055f2:	f004 0403 	and.w	r4, r4, #3
 80055f6:	2c03      	cmp	r4, #3
 80055f8:	d00c      	beq.n	8005614 <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 80055fa:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80055fc:	005d      	lsls	r5, r3, #1
 80055fe:	f04f 0c03 	mov.w	ip, #3
 8005602:	fa0c fc05 	lsl.w	ip, ip, r5
 8005606:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800560a:	688c      	ldr	r4, [r1, #8]
 800560c:	40ac      	lsls	r4, r5
 800560e:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8005612:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005614:	684c      	ldr	r4, [r1, #4]
 8005616:	f004 0403 	and.w	r4, r4, #3
 800561a:	2c02      	cmp	r4, #2
 800561c:	d082      	beq.n	8005524 <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 800561e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005620:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8005624:	f04f 0c03 	mov.w	ip, #3
 8005628:	fa0c fc0e 	lsl.w	ip, ip, lr
 800562c:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005630:	684c      	ldr	r4, [r1, #4]
 8005632:	f004 0403 	and.w	r4, r4, #3
 8005636:	fa04 f40e 	lsl.w	r4, r4, lr
 800563a:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 800563e:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005640:	684c      	ldr	r4, [r1, #4]
 8005642:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8005646:	d0c1      	beq.n	80055cc <HAL_GPIO_Init+0xd8>
        temp = SYSCFG->EXTICR[position >> 2u];
 8005648:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 800564c:	f10c 0502 	add.w	r5, ip, #2
 8005650:	4c0e      	ldr	r4, [pc, #56]	; (800568c <HAL_GPIO_Init+0x198>)
 8005652:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8005656:	f003 0403 	and.w	r4, r3, #3
 800565a:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800565e:	2407      	movs	r4, #7
 8005660:	fa04 f40e 	lsl.w	r4, r4, lr
 8005664:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005668:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 800566c:	f43f af71 	beq.w	8005552 <HAL_GPIO_Init+0x5e>
 8005670:	4c08      	ldr	r4, [pc, #32]	; (8005694 <HAL_GPIO_Init+0x1a0>)
 8005672:	42a0      	cmp	r0, r4
 8005674:	d006      	beq.n	8005684 <HAL_GPIO_Init+0x190>
 8005676:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800567a:	42a0      	cmp	r0, r4
 800567c:	f43f af67 	beq.w	800554e <HAL_GPIO_Init+0x5a>
 8005680:	2407      	movs	r4, #7
 8005682:	e767      	b.n	8005554 <HAL_GPIO_Init+0x60>
 8005684:	2401      	movs	r4, #1
 8005686:	e765      	b.n	8005554 <HAL_GPIO_Init+0x60>
  }
}
 8005688:	bd70      	pop	{r4, r5, r6, pc}
 800568a:	bf00      	nop
 800568c:	40010000 	.word	0x40010000
 8005690:	58000800 	.word	0x58000800
 8005694:	48000400 	.word	0x48000400

08005698 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 8005698:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800569a:	fa31 f203 	lsrs.w	r2, r1, r3
 800569e:	d071      	beq.n	8005784 <HAL_GPIO_DeInit+0xec>
{
 80056a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056a2:	e02e      	b.n	8005702 <HAL_GPIO_DeInit+0x6a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80056a4:	2502      	movs	r5, #2
 80056a6:	e000      	b.n	80056aa <HAL_GPIO_DeInit+0x12>
 80056a8:	2500      	movs	r5, #0
 80056aa:	fa05 fc0c 	lsl.w	ip, r5, ip
 80056ae:	45a4      	cmp	ip, r4
 80056b0:	d049      	beq.n	8005746 <HAL_GPIO_DeInit+0xae>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80056b2:	6804      	ldr	r4, [r0, #0]
 80056b4:	005d      	lsls	r5, r3, #1
 80056b6:	f04f 0c03 	mov.w	ip, #3
 80056ba:	fa0c fc05 	lsl.w	ip, ip, r5
 80056be:	ea44 040c 	orr.w	r4, r4, ip
 80056c2:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80056c4:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80056c8:	f10e 0e08 	add.w	lr, lr, #8
 80056cc:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 80056d0:	f003 0507 	and.w	r5, r3, #7
 80056d4:	00ae      	lsls	r6, r5, #2
 80056d6:	250f      	movs	r5, #15
 80056d8:	40b5      	lsls	r5, r6
 80056da:	ea24 0405 	bic.w	r4, r4, r5
 80056de:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80056e2:	6884      	ldr	r4, [r0, #8]
 80056e4:	ea24 040c 	bic.w	r4, r4, ip
 80056e8:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80056ea:	6844      	ldr	r4, [r0, #4]
 80056ec:	ea24 0202 	bic.w	r2, r4, r2
 80056f0:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80056f2:	68c2      	ldr	r2, [r0, #12]
 80056f4:	ea22 020c 	bic.w	r2, r2, ip
 80056f8:	60c2      	str	r2, [r0, #12]
    }

    position++;
 80056fa:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 80056fc:	fa31 f203 	lsrs.w	r2, r1, r3
 8005700:	d03f      	beq.n	8005782 <HAL_GPIO_DeInit+0xea>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005702:	2201      	movs	r2, #1
 8005704:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 8005706:	ea12 0701 	ands.w	r7, r2, r1
 800570a:	d0f6      	beq.n	80056fa <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2u];
 800570c:	089e      	lsrs	r6, r3, #2
 800570e:	1cb5      	adds	r5, r6, #2
 8005710:	4c1d      	ldr	r4, [pc, #116]	; (8005788 <HAL_GPIO_DeInit+0xf0>)
 8005712:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8005716:	f003 0c03 	and.w	ip, r3, #3
 800571a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800571e:	f04f 0e07 	mov.w	lr, #7
 8005722:	fa0e fe0c 	lsl.w	lr, lr, ip
 8005726:	ea0e 0404 	and.w	r4, lr, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800572a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 800572e:	d0bb      	beq.n	80056a8 <HAL_GPIO_DeInit+0x10>
 8005730:	4d16      	ldr	r5, [pc, #88]	; (800578c <HAL_GPIO_DeInit+0xf4>)
 8005732:	42a8      	cmp	r0, r5
 8005734:	d005      	beq.n	8005742 <HAL_GPIO_DeInit+0xaa>
 8005736:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800573a:	42a8      	cmp	r0, r5
 800573c:	d0b2      	beq.n	80056a4 <HAL_GPIO_DeInit+0xc>
 800573e:	2507      	movs	r5, #7
 8005740:	e7b3      	b.n	80056aa <HAL_GPIO_DeInit+0x12>
 8005742:	2501      	movs	r5, #1
 8005744:	e7b1      	b.n	80056aa <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 8005746:	4c12      	ldr	r4, [pc, #72]	; (8005790 <HAL_GPIO_DeInit+0xf8>)
 8005748:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 800574c:	ea25 0507 	bic.w	r5, r5, r7
 8005750:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8005754:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8005758:	ea25 0507 	bic.w	r5, r5, r7
 800575c:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 8005760:	6825      	ldr	r5, [r4, #0]
 8005762:	ea25 0507 	bic.w	r5, r5, r7
 8005766:	6025      	str	r5, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8005768:	6865      	ldr	r5, [r4, #4]
 800576a:	ea25 0707 	bic.w	r7, r5, r7
 800576e:	6067      	str	r7, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005770:	4d05      	ldr	r5, [pc, #20]	; (8005788 <HAL_GPIO_DeInit+0xf0>)
 8005772:	3602      	adds	r6, #2
 8005774:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 8005778:	ea24 040e 	bic.w	r4, r4, lr
 800577c:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
 8005780:	e797      	b.n	80056b2 <HAL_GPIO_DeInit+0x1a>
  }
}
 8005782:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005784:	4770      	bx	lr
 8005786:	bf00      	nop
 8005788:	40010000 	.word	0x40010000
 800578c:	48000400 	.word	0x48000400
 8005790:	58000800 	.word	0x58000800

08005794 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005794:	b10a      	cbz	r2, 800579a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005796:	6181      	str	r1, [r0, #24]
 8005798:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800579a:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 800579c:	4770      	bx	lr

0800579e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800579e:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80057a0:	ea01 0203 	and.w	r2, r1, r3
 80057a4:	ea21 0103 	bic.w	r1, r1, r3
 80057a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80057ac:	6181      	str	r1, [r0, #24]
}
 80057ae:	4770      	bx	lr

080057b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80057b0:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80057b2:	4b05      	ldr	r3, [pc, #20]	; (80057c8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	4203      	tst	r3, r0
 80057b8:	d100      	bne.n	80057bc <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 80057ba:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80057bc:	4b02      	ldr	r3, [pc, #8]	; (80057c8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80057be:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80057c0:	f7fd fd4c 	bl	800325c <HAL_GPIO_EXTI_Callback>
}
 80057c4:	e7f9      	b.n	80057ba <HAL_GPIO_EXTI_IRQHandler+0xa>
 80057c6:	bf00      	nop
 80057c8:	58000800 	.word	0x58000800

080057cc <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80057cc:	6803      	ldr	r3, [r0, #0]
 80057ce:	699a      	ldr	r2, [r3, #24]
 80057d0:	f012 0f02 	tst.w	r2, #2
 80057d4:	d001      	beq.n	80057da <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 80057d6:	2200      	movs	r2, #0
 80057d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057da:	6803      	ldr	r3, [r0, #0]
 80057dc:	699a      	ldr	r2, [r3, #24]
 80057de:	f012 0f01 	tst.w	r2, #1
 80057e2:	d103      	bne.n	80057ec <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80057e4:	699a      	ldr	r2, [r3, #24]
 80057e6:	f042 0201 	orr.w	r2, r2, #1
 80057ea:	619a      	str	r2, [r3, #24]
  }
}
 80057ec:	4770      	bx	lr

080057ee <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80057ee:	b410      	push	{r4}
 80057f0:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80057f2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80057f6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80057fa:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80057fc:	4321      	orrs	r1, r4
 80057fe:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005802:	6802      	ldr	r2, [r0, #0]
 8005804:	6853      	ldr	r3, [r2, #4]
 8005806:	0d64      	lsrs	r4, r4, #21
 8005808:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 800580c:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8005810:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8005814:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8005818:	f044 0403 	orr.w	r4, r4, #3
 800581c:	ea23 0404 	bic.w	r4, r3, r4
 8005820:	4321      	orrs	r1, r4
 8005822:	6051      	str	r1, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005824:	bc10      	pop	{r4}
 8005826:	4770      	bx	lr

08005828 <I2C_IsErrorOccurred>:
{
 8005828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800582c:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 800582e:	6803      	ldr	r3, [r0, #0]
 8005830:	699f      	ldr	r7, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005832:	f017 0710 	ands.w	r7, r7, #16
 8005836:	d04c      	beq.n	80058d2 <I2C_IsErrorOccurred+0xaa>
 8005838:	460e      	mov	r6, r1
 800583a:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800583c:	2210      	movs	r2, #16
 800583e:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8005840:	2500      	movs	r5, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005842:	6823      	ldr	r3, [r4, #0]
 8005844:	6998      	ldr	r0, [r3, #24]
 8005846:	f010 0f20 	tst.w	r0, #32
 800584a:	d13b      	bne.n	80058c4 <I2C_IsErrorOccurred+0x9c>
 800584c:	2d00      	cmp	r5, #0
 800584e:	d139      	bne.n	80058c4 <I2C_IsErrorOccurred+0x9c>
      if (Timeout != HAL_MAX_DELAY)
 8005850:	f1b6 3fff 	cmp.w	r6, #4294967295
 8005854:	d0f5      	beq.n	8005842 <I2C_IsErrorOccurred+0x1a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005856:	f7fc fb4b 	bl	8001ef0 <HAL_GetTick>
 800585a:	eba0 0008 	sub.w	r0, r0, r8
 800585e:	42b0      	cmp	r0, r6
 8005860:	d801      	bhi.n	8005866 <I2C_IsErrorOccurred+0x3e>
 8005862:	2e00      	cmp	r6, #0
 8005864:	d1ed      	bne.n	8005842 <I2C_IsErrorOccurred+0x1a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005866:	6821      	ldr	r1, [r4, #0]
 8005868:	684b      	ldr	r3, [r1, #4]
 800586a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          tmp2 = hi2c->Mode;
 800586e:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8005872:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005874:	6988      	ldr	r0, [r1, #24]
 8005876:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800587a:	d002      	beq.n	8005882 <I2C_IsErrorOccurred+0x5a>
 800587c:	b90b      	cbnz	r3, 8005882 <I2C_IsErrorOccurred+0x5a>
              (tmp1 != I2C_CR2_STOP) && \
 800587e:	2a20      	cmp	r2, #32
 8005880:	d118      	bne.n	80058b4 <I2C_IsErrorOccurred+0x8c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005882:	6823      	ldr	r3, [r4, #0]
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	f013 0f20 	tst.w	r3, #32
 800588a:	d1da      	bne.n	8005842 <I2C_IsErrorOccurred+0x1a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800588c:	f7fc fb30 	bl	8001ef0 <HAL_GetTick>
 8005890:	eba0 0008 	sub.w	r0, r0, r8
 8005894:	2819      	cmp	r0, #25
 8005896:	d9f4      	bls.n	8005882 <I2C_IsErrorOccurred+0x5a>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005898:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800589a:	f043 0320 	orr.w	r3, r3, #32
 800589e:	6463      	str	r3, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80058a0:	2320      	movs	r3, #32
 80058a2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80058a6:	2300      	movs	r3, #0
 80058a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
              __HAL_UNLOCK(hi2c);
 80058ac:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
              status = HAL_ERROR;
 80058b0:	2501      	movs	r5, #1
 80058b2:	e7e6      	b.n	8005882 <I2C_IsErrorOccurred+0x5a>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80058b4:	684b      	ldr	r3, [r1, #4]
 80058b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058ba:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 80058bc:	f7fc fb18 	bl	8001ef0 <HAL_GetTick>
 80058c0:	4680      	mov	r8, r0
 80058c2:	e7de      	b.n	8005882 <I2C_IsErrorOccurred+0x5a>
    if (status == HAL_OK)
 80058c4:	2d00      	cmp	r5, #0
 80058c6:	d140      	bne.n	800594a <I2C_IsErrorOccurred+0x122>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058c8:	2220      	movs	r2, #32
 80058ca:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 80058cc:	2704      	movs	r7, #4
    status = HAL_ERROR;
 80058ce:	2501      	movs	r5, #1
 80058d0:	e000      	b.n	80058d4 <I2C_IsErrorOccurred+0xac>
  HAL_StatusTypeDef status = HAL_OK;
 80058d2:	2500      	movs	r5, #0
  itflag = hi2c->Instance->ISR;
 80058d4:	6822      	ldr	r2, [r4, #0]
 80058d6:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80058d8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80058dc:	d005      	beq.n	80058ea <I2C_IsErrorOccurred+0xc2>
    error_code |= HAL_I2C_ERROR_BERR;
 80058de:	f047 0701 	orr.w	r7, r7, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80058e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80058e6:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 80058e8:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80058ea:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80058ee:	d006      	beq.n	80058fe <I2C_IsErrorOccurred+0xd6>
    error_code |= HAL_I2C_ERROR_OVR;
 80058f0:	f047 0708 	orr.w	r7, r7, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80058f4:	6822      	ldr	r2, [r4, #0]
 80058f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80058fa:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 80058fc:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80058fe:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005902:	d024      	beq.n	800594e <I2C_IsErrorOccurred+0x126>
    error_code |= HAL_I2C_ERROR_ARLO;
 8005904:	f047 0702 	orr.w	r7, r7, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005908:	6823      	ldr	r3, [r4, #0]
 800590a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800590e:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 8005910:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 8005912:	4620      	mov	r0, r4
 8005914:	f7ff ff5a 	bl	80057cc <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8005918:	6822      	ldr	r2, [r4, #0]
 800591a:	6853      	ldr	r3, [r2, #4]
 800591c:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005920:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005924:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005928:	f023 0301 	bic.w	r3, r3, #1
 800592c:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 800592e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005930:	431f      	orrs	r7, r3
 8005932:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005934:	2320      	movs	r3, #32
 8005936:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800593a:	2300      	movs	r3, #0
 800593c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8005940:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005944:	4628      	mov	r0, r5
 8005946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    error_code |= HAL_I2C_ERROR_AF;
 800594a:	2704      	movs	r7, #4
 800594c:	e7c2      	b.n	80058d4 <I2C_IsErrorOccurred+0xac>
  if (status != HAL_OK)
 800594e:	2d00      	cmp	r5, #0
 8005950:	d0f8      	beq.n	8005944 <I2C_IsErrorOccurred+0x11c>
 8005952:	e7de      	b.n	8005912 <I2C_IsErrorOccurred+0xea>

08005954 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8005954:	b570      	push	{r4, r5, r6, lr}
 8005956:	4604      	mov	r4, r0
 8005958:	460d      	mov	r5, r1
 800595a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800595c:	6823      	ldr	r3, [r4, #0]
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	f013 0f02 	tst.w	r3, #2
 8005964:	d11d      	bne.n	80059a2 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005966:	4632      	mov	r2, r6
 8005968:	4629      	mov	r1, r5
 800596a:	4620      	mov	r0, r4
 800596c:	f7ff ff5c 	bl	8005828 <I2C_IsErrorOccurred>
 8005970:	b9c8      	cbnz	r0, 80059a6 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8005972:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005976:	d0f1      	beq.n	800595c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005978:	f7fc faba 	bl	8001ef0 <HAL_GetTick>
 800597c:	1b80      	subs	r0, r0, r6
 800597e:	42a8      	cmp	r0, r5
 8005980:	d801      	bhi.n	8005986 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8005982:	2d00      	cmp	r5, #0
 8005984:	d1ea      	bne.n	800595c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005986:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005988:	f043 0320 	orr.w	r3, r3, #32
 800598c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800598e:	2320      	movs	r3, #32
 8005990:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005994:	2300      	movs	r3, #0
 8005996:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800599a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 800599e:	2001      	movs	r0, #1
 80059a0:	e000      	b.n	80059a4 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 80059a2:	2000      	movs	r0, #0
}
 80059a4:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80059a6:	2001      	movs	r0, #1
 80059a8:	e7fc      	b.n	80059a4 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

080059aa <I2C_WaitOnFlagUntilTimeout>:
{
 80059aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059ae:	4606      	mov	r6, r0
 80059b0:	4688      	mov	r8, r1
 80059b2:	4617      	mov	r7, r2
 80059b4:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059b6:	6834      	ldr	r4, [r6, #0]
 80059b8:	69a4      	ldr	r4, [r4, #24]
 80059ba:	ea38 0304 	bics.w	r3, r8, r4
 80059be:	bf0c      	ite	eq
 80059c0:	f04f 0c01 	moveq.w	ip, #1
 80059c4:	f04f 0c00 	movne.w	ip, #0
 80059c8:	45bc      	cmp	ip, r7
 80059ca:	d118      	bne.n	80059fe <I2C_WaitOnFlagUntilTimeout+0x54>
    if (Timeout != HAL_MAX_DELAY)
 80059cc:	f1b5 3fff 	cmp.w	r5, #4294967295
 80059d0:	d0f1      	beq.n	80059b6 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059d2:	f7fc fa8d 	bl	8001ef0 <HAL_GetTick>
 80059d6:	9b06      	ldr	r3, [sp, #24]
 80059d8:	1ac0      	subs	r0, r0, r3
 80059da:	42a8      	cmp	r0, r5
 80059dc:	d801      	bhi.n	80059e2 <I2C_WaitOnFlagUntilTimeout+0x38>
 80059de:	2d00      	cmp	r5, #0
 80059e0:	d1e9      	bne.n	80059b6 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059e2:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80059e4:	f043 0320 	orr.w	r3, r3, #32
 80059e8:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80059ea:	2320      	movs	r3, #32
 80059ec:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059f0:	2300      	movs	r3, #0
 80059f2:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80059f6:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 80059fa:	2001      	movs	r0, #1
 80059fc:	e000      	b.n	8005a00 <I2C_WaitOnFlagUntilTimeout+0x56>
  return HAL_OK;
 80059fe:	2000      	movs	r0, #0
}
 8005a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005a04 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8005a04:	b570      	push	{r4, r5, r6, lr}
 8005a06:	4605      	mov	r5, r0
 8005a08:	460c      	mov	r4, r1
 8005a0a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a0c:	682b      	ldr	r3, [r5, #0]
 8005a0e:	699b      	ldr	r3, [r3, #24]
 8005a10:	f013 0f20 	tst.w	r3, #32
 8005a14:	d11a      	bne.n	8005a4c <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a16:	4632      	mov	r2, r6
 8005a18:	4621      	mov	r1, r4
 8005a1a:	4628      	mov	r0, r5
 8005a1c:	f7ff ff04 	bl	8005828 <I2C_IsErrorOccurred>
 8005a20:	b9b0      	cbnz	r0, 8005a50 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a22:	f7fc fa65 	bl	8001ef0 <HAL_GetTick>
 8005a26:	1b80      	subs	r0, r0, r6
 8005a28:	42a0      	cmp	r0, r4
 8005a2a:	d801      	bhi.n	8005a30 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8005a2c:	2c00      	cmp	r4, #0
 8005a2e:	d1ed      	bne.n	8005a0c <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a30:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8005a32:	f043 0320 	orr.w	r3, r3, #32
 8005a36:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005a38:	2320      	movs	r3, #32
 8005a3a:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005a44:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8005a48:	2001      	movs	r0, #1
}
 8005a4a:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8005a4c:	2000      	movs	r0, #0
 8005a4e:	e7fc      	b.n	8005a4a <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8005a50:	2001      	movs	r0, #1
 8005a52:	e7fa      	b.n	8005a4a <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08005a54 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8005a54:	b570      	push	{r4, r5, r6, lr}
 8005a56:	4604      	mov	r4, r0
 8005a58:	460d      	mov	r5, r1
 8005a5a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a5c:	6823      	ldr	r3, [r4, #0]
 8005a5e:	699b      	ldr	r3, [r3, #24]
 8005a60:	f013 0f04 	tst.w	r3, #4
 8005a64:	d149      	bne.n	8005afa <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a66:	4632      	mov	r2, r6
 8005a68:	4629      	mov	r1, r5
 8005a6a:	4620      	mov	r0, r4
 8005a6c:	f7ff fedc 	bl	8005828 <I2C_IsErrorOccurred>
 8005a70:	4601      	mov	r1, r0
 8005a72:	2800      	cmp	r0, #0
 8005a74:	d143      	bne.n	8005afe <I2C_WaitOnRXNEFlagUntilTimeout+0xaa>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005a76:	6823      	ldr	r3, [r4, #0]
 8005a78:	699a      	ldr	r2, [r3, #24]
 8005a7a:	f012 0f20 	tst.w	r2, #32
 8005a7e:	d113      	bne.n	8005aa8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a80:	f7fc fa36 	bl	8001ef0 <HAL_GetTick>
 8005a84:	1b80      	subs	r0, r0, r6
 8005a86:	42a8      	cmp	r0, r5
 8005a88:	d801      	bhi.n	8005a8e <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 8005a8a:	2d00      	cmp	r5, #0
 8005a8c:	d1e6      	bne.n	8005a5c <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a8e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005a90:	f043 0320 	orr.w	r3, r3, #32
 8005a94:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005a96:	2320      	movs	r3, #32
 8005a98:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005aa2:	2101      	movs	r1, #1
}
 8005aa4:	4608      	mov	r0, r1
 8005aa6:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005aa8:	699a      	ldr	r2, [r3, #24]
 8005aaa:	f012 0f04 	tst.w	r2, #4
 8005aae:	d002      	beq.n	8005ab6 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8005ab0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8005ab2:	2a00      	cmp	r2, #0
 8005ab4:	d1f6      	bne.n	8005aa4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ab6:	699a      	ldr	r2, [r3, #24]
 8005ab8:	f012 0f10 	tst.w	r2, #16
 8005abc:	d01a      	beq.n	8005af4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005abe:	2210      	movs	r2, #16
 8005ac0:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005ac2:	2304      	movs	r3, #4
 8005ac4:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ac6:	6823      	ldr	r3, [r4, #0]
 8005ac8:	2220      	movs	r2, #32
 8005aca:	61da      	str	r2, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8005acc:	6821      	ldr	r1, [r4, #0]
 8005ace:	684b      	ldr	r3, [r1, #4]
 8005ad0:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005ad4:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005ad8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005adc:	f023 0301 	bic.w	r3, r3, #1
 8005ae0:	604b      	str	r3, [r1, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 8005ae2:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8005aec:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8005af0:	2101      	movs	r1, #1
 8005af2:	e7d7      	b.n	8005aa4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005af4:	2300      	movs	r3, #0
 8005af6:	6463      	str	r3, [r4, #68]	; 0x44
 8005af8:	e7e5      	b.n	8005ac6 <I2C_WaitOnRXNEFlagUntilTimeout+0x72>
  return HAL_OK;
 8005afa:	2100      	movs	r1, #0
 8005afc:	e7d2      	b.n	8005aa4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
      return HAL_ERROR;
 8005afe:	2101      	movs	r1, #1
 8005b00:	e7d0      	b.n	8005aa4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>

08005b02 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8005b02:	2800      	cmp	r0, #0
 8005b04:	d059      	beq.n	8005bba <HAL_I2C_Init+0xb8>
{
 8005b06:	b510      	push	{r4, lr}
 8005b08:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b0a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d043      	beq.n	8005b9a <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b12:	2324      	movs	r3, #36	; 0x24
 8005b14:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8005b18:	6822      	ldr	r2, [r4, #0]
 8005b1a:	6813      	ldr	r3, [r2, #0]
 8005b1c:	f023 0301 	bic.w	r3, r3, #1
 8005b20:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005b22:	6863      	ldr	r3, [r4, #4]
 8005b24:	6822      	ldr	r2, [r4, #0]
 8005b26:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8005b2a:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005b2c:	6822      	ldr	r2, [r4, #0]
 8005b2e:	6893      	ldr	r3, [r2, #8]
 8005b30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b34:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005b36:	68e3      	ldr	r3, [r4, #12]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d033      	beq.n	8005ba4 <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005b3c:	68a3      	ldr	r3, [r4, #8]
 8005b3e:	6822      	ldr	r2, [r4, #0]
 8005b40:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8005b44:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005b46:	68e3      	ldr	r3, [r4, #12]
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d031      	beq.n	8005bb0 <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005b4c:	6822      	ldr	r2, [r4, #0]
 8005b4e:	6853      	ldr	r3, [r2, #4]
 8005b50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005b54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b58:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005b5a:	6822      	ldr	r2, [r4, #0]
 8005b5c:	68d3      	ldr	r3, [r2, #12]
 8005b5e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b62:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b64:	6923      	ldr	r3, [r4, #16]
 8005b66:	6962      	ldr	r2, [r4, #20]
 8005b68:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005b6a:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b6c:	6822      	ldr	r2, [r4, #0]
 8005b6e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005b72:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005b74:	69e3      	ldr	r3, [r4, #28]
 8005b76:	6a21      	ldr	r1, [r4, #32]
 8005b78:	6822      	ldr	r2, [r4, #0]
 8005b7a:	430b      	orrs	r3, r1
 8005b7c:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8005b7e:	6822      	ldr	r2, [r4, #0]
 8005b80:	6813      	ldr	r3, [r2, #0]
 8005b82:	f043 0301 	orr.w	r3, r3, #1
 8005b86:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b88:	2000      	movs	r0, #0
 8005b8a:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005b8c:	2320      	movs	r3, #32
 8005b8e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b92:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b94:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8005b98:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8005b9a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8005b9e:	f7fb ff23 	bl	80019e8 <HAL_I2C_MspInit>
 8005ba2:	e7b6      	b.n	8005b12 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005ba4:	68a3      	ldr	r3, [r4, #8]
 8005ba6:	6822      	ldr	r2, [r4, #0]
 8005ba8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bac:	6093      	str	r3, [r2, #8]
 8005bae:	e7ca      	b.n	8005b46 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005bb0:	6823      	ldr	r3, [r4, #0]
 8005bb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005bb6:	605a      	str	r2, [r3, #4]
 8005bb8:	e7c8      	b.n	8005b4c <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8005bba:	2001      	movs	r0, #1
}
 8005bbc:	4770      	bx	lr
	...

08005bc0 <HAL_I2C_Master_Transmit>:
{
 8005bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bc4:	b082      	sub	sp, #8
 8005bc6:	460f      	mov	r7, r1
 8005bc8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bca:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8005bce:	b2c9      	uxtb	r1, r1
 8005bd0:	2920      	cmp	r1, #32
 8005bd2:	f040 80a3 	bne.w	8005d1c <HAL_I2C_Master_Transmit+0x15c>
 8005bd6:	4604      	mov	r4, r0
 8005bd8:	4690      	mov	r8, r2
 8005bda:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 8005bdc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	f000 809f 	beq.w	8005d24 <HAL_I2C_Master_Transmit+0x164>
 8005be6:	f04f 0a01 	mov.w	sl, #1
 8005bea:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8005bee:	f7fc f97f 	bl	8001ef0 <HAL_GetTick>
 8005bf2:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005bf4:	9000      	str	r0, [sp, #0]
 8005bf6:	2319      	movs	r3, #25
 8005bf8:	4652      	mov	r2, sl
 8005bfa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005bfe:	4620      	mov	r0, r4
 8005c00:	f7ff fed3 	bl	80059aa <I2C_WaitOnFlagUntilTimeout>
 8005c04:	2800      	cmp	r0, #0
 8005c06:	f040 808f 	bne.w	8005d28 <HAL_I2C_Master_Transmit+0x168>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005c0a:	2321      	movs	r3, #33	; 0x21
 8005c0c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005c10:	2310      	movs	r3, #16
 8005c12:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c16:	2300      	movs	r3, #0
 8005c18:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8005c1a:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8005c1e:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005c22:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c24:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	2bff      	cmp	r3, #255	; 0xff
 8005c2a:	d90a      	bls.n	8005c42 <HAL_I2C_Master_Transmit+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c2c:	22ff      	movs	r2, #255	; 0xff
 8005c2e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005c30:	4b41      	ldr	r3, [pc, #260]	; (8005d38 <HAL_I2C_Master_Transmit+0x178>)
 8005c32:	9300      	str	r3, [sp, #0]
 8005c34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c38:	4639      	mov	r1, r7
 8005c3a:	4620      	mov	r0, r4
 8005c3c:	f7ff fdd7 	bl	80057ee <I2C_TransferConfig>
 8005c40:	e018      	b.n	8005c74 <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = hi2c->XferCount;
 8005c42:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005c44:	b292      	uxth	r2, r2
 8005c46:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c48:	4b3b      	ldr	r3, [pc, #236]	; (8005d38 <HAL_I2C_Master_Transmit+0x178>)
 8005c4a:	9300      	str	r3, [sp, #0]
 8005c4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c50:	b2d2      	uxtb	r2, r2
 8005c52:	4639      	mov	r1, r7
 8005c54:	4620      	mov	r0, r4
 8005c56:	f7ff fdca 	bl	80057ee <I2C_TransferConfig>
 8005c5a:	e00b      	b.n	8005c74 <HAL_I2C_Master_Transmit+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 8005c5c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005c5e:	b292      	uxth	r2, r2
 8005c60:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c62:	2300      	movs	r3, #0
 8005c64:	9300      	str	r3, [sp, #0]
 8005c66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c6a:	b2d2      	uxtb	r2, r2
 8005c6c:	4639      	mov	r1, r7
 8005c6e:	4620      	mov	r0, r4
 8005c70:	f7ff fdbd 	bl	80057ee <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005c74:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d033      	beq.n	8005ce4 <HAL_I2C_Master_Transmit+0x124>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c7c:	462a      	mov	r2, r5
 8005c7e:	4631      	mov	r1, r6
 8005c80:	4620      	mov	r0, r4
 8005c82:	f7ff fe67 	bl	8005954 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c86:	2800      	cmp	r0, #0
 8005c88:	d150      	bne.n	8005d2c <HAL_I2C_Master_Transmit+0x16c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005c8a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005c8c:	6823      	ldr	r3, [r4, #0]
 8005c8e:	7812      	ldrb	r2, [r2, #0]
 8005c90:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8005c92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c94:	3301      	adds	r3, #1
 8005c96:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005c98:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005ca2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005ca4:	3b01      	subs	r3, #1
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005caa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005cac:	b292      	uxth	r2, r2
 8005cae:	2a00      	cmp	r2, #0
 8005cb0:	d0e0      	beq.n	8005c74 <HAL_I2C_Master_Transmit+0xb4>
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d1de      	bne.n	8005c74 <HAL_I2C_Master_Transmit+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005cb6:	9500      	str	r5, [sp, #0]
 8005cb8:	4633      	mov	r3, r6
 8005cba:	2200      	movs	r2, #0
 8005cbc:	2180      	movs	r1, #128	; 0x80
 8005cbe:	4620      	mov	r0, r4
 8005cc0:	f7ff fe73 	bl	80059aa <I2C_WaitOnFlagUntilTimeout>
 8005cc4:	bba0      	cbnz	r0, 8005d30 <HAL_I2C_Master_Transmit+0x170>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005cc6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	2bff      	cmp	r3, #255	; 0xff
 8005ccc:	d9c6      	bls.n	8005c5c <HAL_I2C_Master_Transmit+0x9c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005cce:	22ff      	movs	r2, #255	; 0xff
 8005cd0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	9300      	str	r3, [sp, #0]
 8005cd6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005cda:	4639      	mov	r1, r7
 8005cdc:	4620      	mov	r0, r4
 8005cde:	f7ff fd86 	bl	80057ee <I2C_TransferConfig>
 8005ce2:	e7c7      	b.n	8005c74 <HAL_I2C_Master_Transmit+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ce4:	462a      	mov	r2, r5
 8005ce6:	4631      	mov	r1, r6
 8005ce8:	4620      	mov	r0, r4
 8005cea:	f7ff fe8b 	bl	8005a04 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005cee:	bb08      	cbnz	r0, 8005d34 <HAL_I2C_Master_Transmit+0x174>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005cf0:	6823      	ldr	r3, [r4, #0]
 8005cf2:	2220      	movs	r2, #32
 8005cf4:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005cf6:	6821      	ldr	r1, [r4, #0]
 8005cf8:	684b      	ldr	r3, [r1, #4]
 8005cfa:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005cfe:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005d02:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005d06:	f023 0301 	bic.w	r3, r3, #1
 8005d0a:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005d0c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005d10:	2300      	movs	r3, #0
 8005d12:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8005d16:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8005d1a:	e000      	b.n	8005d1e <HAL_I2C_Master_Transmit+0x15e>
    return HAL_BUSY;
 8005d1c:	2002      	movs	r0, #2
}
 8005d1e:	b002      	add	sp, #8
 8005d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8005d24:	2002      	movs	r0, #2
 8005d26:	e7fa      	b.n	8005d1e <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 8005d28:	2001      	movs	r0, #1
 8005d2a:	e7f8      	b.n	8005d1e <HAL_I2C_Master_Transmit+0x15e>
        return HAL_ERROR;
 8005d2c:	2001      	movs	r0, #1
 8005d2e:	e7f6      	b.n	8005d1e <HAL_I2C_Master_Transmit+0x15e>
          return HAL_ERROR;
 8005d30:	2001      	movs	r0, #1
 8005d32:	e7f4      	b.n	8005d1e <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 8005d34:	2001      	movs	r0, #1
 8005d36:	e7f2      	b.n	8005d1e <HAL_I2C_Master_Transmit+0x15e>
 8005d38:	80002000 	.word	0x80002000

08005d3c <HAL_I2C_Master_Receive>:
{
 8005d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d40:	b082      	sub	sp, #8
 8005d42:	460f      	mov	r7, r1
 8005d44:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d46:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8005d4a:	b2c9      	uxtb	r1, r1
 8005d4c:	2920      	cmp	r1, #32
 8005d4e:	f040 80a2 	bne.w	8005e96 <HAL_I2C_Master_Receive+0x15a>
 8005d52:	4604      	mov	r4, r0
 8005d54:	4690      	mov	r8, r2
 8005d56:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 8005d58:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	f000 809e 	beq.w	8005e9e <HAL_I2C_Master_Receive+0x162>
 8005d62:	f04f 0a01 	mov.w	sl, #1
 8005d66:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8005d6a:	f7fc f8c1 	bl	8001ef0 <HAL_GetTick>
 8005d6e:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005d70:	9000      	str	r0, [sp, #0]
 8005d72:	2319      	movs	r3, #25
 8005d74:	4652      	mov	r2, sl
 8005d76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d7a:	4620      	mov	r0, r4
 8005d7c:	f7ff fe15 	bl	80059aa <I2C_WaitOnFlagUntilTimeout>
 8005d80:	2800      	cmp	r0, #0
 8005d82:	f040 808e 	bne.w	8005ea2 <HAL_I2C_Master_Receive+0x166>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005d86:	2322      	movs	r3, #34	; 0x22
 8005d88:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005d8c:	2310      	movs	r3, #16
 8005d8e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d92:	2300      	movs	r3, #0
 8005d94:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8005d96:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8005d9a:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005d9e:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005da0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	2bff      	cmp	r3, #255	; 0xff
 8005da6:	d90a      	bls.n	8005dbe <HAL_I2C_Master_Receive+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005da8:	22ff      	movs	r2, #255	; 0xff
 8005daa:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005dac:	4b41      	ldr	r3, [pc, #260]	; (8005eb4 <HAL_I2C_Master_Receive+0x178>)
 8005dae:	9300      	str	r3, [sp, #0]
 8005db0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005db4:	4639      	mov	r1, r7
 8005db6:	4620      	mov	r0, r4
 8005db8:	f7ff fd19 	bl	80057ee <I2C_TransferConfig>
 8005dbc:	e018      	b.n	8005df0 <HAL_I2C_Master_Receive+0xb4>
      hi2c->XferSize = hi2c->XferCount;
 8005dbe:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005dc0:	b292      	uxth	r2, r2
 8005dc2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005dc4:	4b3b      	ldr	r3, [pc, #236]	; (8005eb4 <HAL_I2C_Master_Receive+0x178>)
 8005dc6:	9300      	str	r3, [sp, #0]
 8005dc8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005dcc:	b2d2      	uxtb	r2, r2
 8005dce:	4639      	mov	r1, r7
 8005dd0:	4620      	mov	r0, r4
 8005dd2:	f7ff fd0c 	bl	80057ee <I2C_TransferConfig>
 8005dd6:	e00b      	b.n	8005df0 <HAL_I2C_Master_Receive+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 8005dd8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005dda:	b292      	uxth	r2, r2
 8005ddc:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005dde:	2300      	movs	r3, #0
 8005de0:	9300      	str	r3, [sp, #0]
 8005de2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005de6:	b2d2      	uxtb	r2, r2
 8005de8:	4639      	mov	r1, r7
 8005dea:	4620      	mov	r0, r4
 8005dec:	f7ff fcff 	bl	80057ee <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005df0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d032      	beq.n	8005e5e <HAL_I2C_Master_Receive+0x122>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005df8:	462a      	mov	r2, r5
 8005dfa:	4631      	mov	r1, r6
 8005dfc:	4620      	mov	r0, r4
 8005dfe:	f7ff fe29 	bl	8005a54 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e02:	2800      	cmp	r0, #0
 8005e04:	d14f      	bne.n	8005ea6 <HAL_I2C_Master_Receive+0x16a>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005e06:	6823      	ldr	r3, [r4, #0]
 8005e08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e0c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8005e0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e10:	3301      	adds	r3, #1
 8005e12:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8005e14:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8005e16:	3a01      	subs	r2, #1
 8005e18:	b292      	uxth	r2, r2
 8005e1a:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005e1c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	3b01      	subs	r3, #1
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005e26:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d0e0      	beq.n	8005df0 <HAL_I2C_Master_Receive+0xb4>
 8005e2e:	2a00      	cmp	r2, #0
 8005e30:	d1de      	bne.n	8005df0 <HAL_I2C_Master_Receive+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005e32:	9500      	str	r5, [sp, #0]
 8005e34:	4633      	mov	r3, r6
 8005e36:	2180      	movs	r1, #128	; 0x80
 8005e38:	4620      	mov	r0, r4
 8005e3a:	f7ff fdb6 	bl	80059aa <I2C_WaitOnFlagUntilTimeout>
 8005e3e:	bba0      	cbnz	r0, 8005eaa <HAL_I2C_Master_Receive+0x16e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e40:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	2bff      	cmp	r3, #255	; 0xff
 8005e46:	d9c7      	bls.n	8005dd8 <HAL_I2C_Master_Receive+0x9c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e48:	22ff      	movs	r2, #255	; 0xff
 8005e4a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	9300      	str	r3, [sp, #0]
 8005e50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e54:	4639      	mov	r1, r7
 8005e56:	4620      	mov	r0, r4
 8005e58:	f7ff fcc9 	bl	80057ee <I2C_TransferConfig>
 8005e5c:	e7c8      	b.n	8005df0 <HAL_I2C_Master_Receive+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e5e:	462a      	mov	r2, r5
 8005e60:	4631      	mov	r1, r6
 8005e62:	4620      	mov	r0, r4
 8005e64:	f7ff fdce 	bl	8005a04 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005e68:	bb08      	cbnz	r0, 8005eae <HAL_I2C_Master_Receive+0x172>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e6a:	6823      	ldr	r3, [r4, #0]
 8005e6c:	2220      	movs	r2, #32
 8005e6e:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005e70:	6821      	ldr	r1, [r4, #0]
 8005e72:	684b      	ldr	r3, [r1, #4]
 8005e74:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005e78:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005e7c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005e80:	f023 0301 	bic.w	r3, r3, #1
 8005e84:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005e86:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8005e90:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8005e94:	e000      	b.n	8005e98 <HAL_I2C_Master_Receive+0x15c>
    return HAL_BUSY;
 8005e96:	2002      	movs	r0, #2
}
 8005e98:	b002      	add	sp, #8
 8005e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8005e9e:	2002      	movs	r0, #2
 8005ea0:	e7fa      	b.n	8005e98 <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 8005ea2:	2001      	movs	r0, #1
 8005ea4:	e7f8      	b.n	8005e98 <HAL_I2C_Master_Receive+0x15c>
        return HAL_ERROR;
 8005ea6:	2001      	movs	r0, #1
 8005ea8:	e7f6      	b.n	8005e98 <HAL_I2C_Master_Receive+0x15c>
          return HAL_ERROR;
 8005eaa:	2001      	movs	r0, #1
 8005eac:	e7f4      	b.n	8005e98 <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 8005eae:	2001      	movs	r0, #1
 8005eb0:	e7f2      	b.n	8005e98 <HAL_I2C_Master_Receive+0x15c>
 8005eb2:	bf00      	nop
 8005eb4:	80002400 	.word	0x80002400

08005eb8 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005eb8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	2b20      	cmp	r3, #32
 8005ec0:	d124      	bne.n	8005f0c <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ec2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d022      	beq.n	8005f10 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8005eca:	2301      	movs	r3, #1
 8005ecc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ed0:	2324      	movs	r3, #36	; 0x24
 8005ed2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ed6:	6802      	ldr	r2, [r0, #0]
 8005ed8:	6813      	ldr	r3, [r2, #0]
 8005eda:	f023 0301 	bic.w	r3, r3, #1
 8005ede:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005ee0:	6802      	ldr	r2, [r0, #0]
 8005ee2:	6813      	ldr	r3, [r2, #0]
 8005ee4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ee8:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005eea:	6802      	ldr	r2, [r0, #0]
 8005eec:	6813      	ldr	r3, [r2, #0]
 8005eee:	4319      	orrs	r1, r3
 8005ef0:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ef2:	6802      	ldr	r2, [r0, #0]
 8005ef4:	6813      	ldr	r3, [r2, #0]
 8005ef6:	f043 0301 	orr.w	r3, r3, #1
 8005efa:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005efc:	2320      	movs	r3, #32
 8005efe:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f02:	2300      	movs	r3, #0
 8005f04:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8005f08:	4618      	mov	r0, r3
 8005f0a:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8005f0c:	2002      	movs	r0, #2
 8005f0e:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8005f10:	2002      	movs	r0, #2
  }
}
 8005f12:	4770      	bx	lr

08005f14 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f14:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b20      	cmp	r3, #32
 8005f1c:	d122      	bne.n	8005f64 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f1e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d020      	beq.n	8005f68 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8005f26:	2301      	movs	r3, #1
 8005f28:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f2c:	2324      	movs	r3, #36	; 0x24
 8005f2e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005f32:	6802      	ldr	r2, [r0, #0]
 8005f34:	6813      	ldr	r3, [r2, #0]
 8005f36:	f023 0301 	bic.w	r3, r3, #1
 8005f3a:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005f3c:	6802      	ldr	r2, [r0, #0]
 8005f3e:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005f40:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005f44:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005f48:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005f4a:	6802      	ldr	r2, [r0, #0]
 8005f4c:	6813      	ldr	r3, [r2, #0]
 8005f4e:	f043 0301 	orr.w	r3, r3, #1
 8005f52:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f54:	2320      	movs	r3, #32
 8005f56:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8005f60:	4618      	mov	r0, r3
 8005f62:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8005f64:	2002      	movs	r0, #2
 8005f66:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8005f68:	2002      	movs	r0, #2
  }
}
 8005f6a:	4770      	bx	lr

08005f6c <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f6c:	4a02      	ldr	r2, [pc, #8]	; (8005f78 <HAL_PWR_EnableBkUpAccess+0xc>)
 8005f6e:	6813      	ldr	r3, [r2, #0]
 8005f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f74:	6013      	str	r3, [r2, #0]
}
 8005f76:	4770      	bx	lr
 8005f78:	58000400 	.word	0x58000400

08005f7c <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8005f7c:	b510      	push	{r4, lr}
 8005f7e:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8005f80:	b9a0      	cbnz	r0, 8005fac <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8005f82:	4b0f      	ldr	r3, [pc, #60]	; (8005fc0 <HAL_PWR_EnterSLEEPMode+0x44>)
 8005f84:	695b      	ldr	r3, [r3, #20]
 8005f86:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005f8a:	d10a      	bne.n	8005fa2 <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005f8c:	4a0d      	ldr	r2, [pc, #52]	; (8005fc4 <HAL_PWR_EnterSLEEPMode+0x48>)
 8005f8e:	6913      	ldr	r3, [r2, #16]
 8005f90:	f023 0304 	bic.w	r3, r3, #4
 8005f94:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005f96:	2c01      	cmp	r4, #1
 8005f98:	d010      	beq.n	8005fbc <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005f9a:	bf40      	sev
    __WFE();
 8005f9c:	bf20      	wfe
    __WFE();
 8005f9e:	bf20      	wfe
  }
}
 8005fa0:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8005fa2:	f000 f821 	bl	8005fe8 <HAL_PWREx_DisableLowPowerRunMode>
 8005fa6:	2800      	cmp	r0, #0
 8005fa8:	d0f0      	beq.n	8005f8c <HAL_PWR_EnterSLEEPMode+0x10>
 8005faa:	e7f9      	b.n	8005fa0 <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8005fac:	4b04      	ldr	r3, [pc, #16]	; (8005fc0 <HAL_PWR_EnterSLEEPMode+0x44>)
 8005fae:	695b      	ldr	r3, [r3, #20]
 8005fb0:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005fb4:	d1ea      	bne.n	8005f8c <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 8005fb6:	f000 f80f 	bl	8005fd8 <HAL_PWREx_EnableLowPowerRunMode>
 8005fba:	e7e7      	b.n	8005f8c <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 8005fbc:	bf30      	wfi
 8005fbe:	e7ef      	b.n	8005fa0 <HAL_PWR_EnterSLEEPMode+0x24>
 8005fc0:	58000400 	.word	0x58000400
 8005fc4:	e000ed00 	.word	0xe000ed00

08005fc8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8005fc8:	4b02      	ldr	r3, [pc, #8]	; (8005fd4 <HAL_PWREx_GetVoltageRange+0xc>)
 8005fca:	6818      	ldr	r0, [r3, #0]
}
 8005fcc:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	58000400 	.word	0x58000400

08005fd8 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8005fd8:	4a02      	ldr	r2, [pc, #8]	; (8005fe4 <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 8005fda:	6813      	ldr	r3, [r2, #0]
 8005fdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005fe0:	6013      	str	r3, [r2, #0]
}
 8005fe2:	4770      	bx	lr
 8005fe4:	58000400 	.word	0x58000400

08005fe8 <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8005fe8:	4a0f      	ldr	r2, [pc, #60]	; (8006028 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8005fea:	6813      	ldr	r3, [r2, #0]
 8005fec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ff0:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8005ff2:	4b0e      	ldr	r3, [pc, #56]	; (800602c <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2232      	movs	r2, #50	; 0x32
 8005ff8:	fb02 f303 	mul.w	r3, r2, r3
 8005ffc:	4a0c      	ldr	r2, [pc, #48]	; (8006030 <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 8005ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8006002:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8006004:	e000      	b.n	8006008 <HAL_PWREx_DisableLowPowerRunMode+0x20>
  {
    wait_loop_index--;
 8006006:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8006008:	4a07      	ldr	r2, [pc, #28]	; (8006028 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 800600a:	6952      	ldr	r2, [r2, #20]
 800600c:	f412 7f00 	tst.w	r2, #512	; 0x200
 8006010:	d001      	beq.n	8006016 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
 8006012:	2b00      	cmp	r3, #0
 8006014:	d1f7      	bne.n	8006006 <HAL_PWREx_DisableLowPowerRunMode+0x1e>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8006016:	4b04      	ldr	r3, [pc, #16]	; (8006028 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800601e:	d101      	bne.n	8006024 <HAL_PWREx_DisableLowPowerRunMode+0x3c>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 8006020:	2000      	movs	r0, #0
 8006022:	4770      	bx	lr
    return HAL_TIMEOUT;
 8006024:	2003      	movs	r0, #3
}
 8006026:	4770      	bx	lr
 8006028:	58000400 	.word	0x58000400
 800602c:	20000070 	.word	0x20000070
 8006030:	431bde83 	.word	0x431bde83

08006034 <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8006034:	4a0c      	ldr	r2, [pc, #48]	; (8006068 <HAL_PWREx_EnterSTOP2Mode+0x34>)
 8006036:	6813      	ldr	r3, [r2, #0]
 8006038:	f023 0307 	bic.w	r3, r3, #7
 800603c:	f043 0302 	orr.w	r3, r3, #2
 8006040:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006042:	4a0a      	ldr	r2, [pc, #40]	; (800606c <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8006044:	6913      	ldr	r3, [r2, #16]
 8006046:	f043 0304 	orr.w	r3, r3, #4
 800604a:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800604c:	2801      	cmp	r0, #1
 800604e:	d008      	beq.n	8006062 <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8006050:	bf40      	sev
    __WFE();
 8006052:	bf20      	wfe
    __WFE();
 8006054:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006056:	4a05      	ldr	r2, [pc, #20]	; (800606c <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8006058:	6913      	ldr	r3, [r2, #16]
 800605a:	f023 0304 	bic.w	r3, r3, #4
 800605e:	6113      	str	r3, [r2, #16]
}
 8006060:	4770      	bx	lr
    __WFI();
 8006062:	bf30      	wfi
 8006064:	e7f7      	b.n	8006056 <HAL_PWREx_EnterSTOP2Mode+0x22>
 8006066:	bf00      	nop
 8006068:	58000400 	.word	0x58000400
 800606c:	e000ed00 	.word	0xe000ed00

08006070 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006070:	b530      	push	{r4, r5, lr}
 8006072:	b089      	sub	sp, #36	; 0x24
 8006074:	4604      	mov	r4, r0
 8006076:	468c      	mov	ip, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8006078:	4b2a      	ldr	r3, [pc, #168]	; (8006124 <RCC_SetFlashLatency+0xb4>)
 800607a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800607e:	9006      	str	r0, [sp, #24]
 8006080:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8006084:	f103 0208 	add.w	r2, r3, #8
 8006088:	e892 0003 	ldmia.w	r2, {r0, r1}
 800608c:	9004      	str	r0, [sp, #16]
 800608e:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8006092:	ad01      	add	r5, sp, #4
 8006094:	3310      	adds	r3, #16
 8006096:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800609a:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800609e:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 80060a2:	d007      	beq.n	80060b4 <RCC_SetFlashLatency+0x44>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80060a4:	2300      	movs	r3, #0
 80060a6:	e014      	b.n	80060d2 <RCC_SetFlashLatency+0x62>
        latency = FLASH_LATENCY_RANGE[index];
 80060a8:	aa08      	add	r2, sp, #32
 80060aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80060ae:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 80060b2:	e01e      	b.n	80060f2 <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80060b4:	2300      	movs	r3, #0
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d808      	bhi.n	80060cc <RCC_SetFlashLatency+0x5c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80060ba:	aa08      	add	r2, sp, #32
 80060bc:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80060c0:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 80060c4:	42a2      	cmp	r2, r4
 80060c6:	d2ef      	bcs.n	80060a8 <RCC_SetFlashLatency+0x38>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80060c8:	3301      	adds	r3, #1
 80060ca:	e7f4      	b.n	80060b6 <RCC_SetFlashLatency+0x46>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80060cc:	2500      	movs	r5, #0
 80060ce:	e010      	b.n	80060f2 <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80060d0:	3301      	adds	r3, #1
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d80c      	bhi.n	80060f0 <RCC_SetFlashLatency+0x80>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80060d6:	aa08      	add	r2, sp, #32
 80060d8:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80060dc:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 80060e0:	42a2      	cmp	r2, r4
 80060e2:	d3f5      	bcc.n	80060d0 <RCC_SetFlashLatency+0x60>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80060e4:	aa08      	add	r2, sp, #32
 80060e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80060ea:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 80060ee:	e000      	b.n	80060f2 <RCC_SetFlashLatency+0x82>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80060f0:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80060f2:	4a0d      	ldr	r2, [pc, #52]	; (8006128 <RCC_SetFlashLatency+0xb8>)
 80060f4:	6813      	ldr	r3, [r2, #0]
 80060f6:	f023 0307 	bic.w	r3, r3, #7
 80060fa:	432b      	orrs	r3, r5
 80060fc:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80060fe:	f7fb fef7 	bl	8001ef0 <HAL_GetTick>
 8006102:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006104:	4b08      	ldr	r3, [pc, #32]	; (8006128 <RCC_SetFlashLatency+0xb8>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0307 	and.w	r3, r3, #7
 800610c:	42ab      	cmp	r3, r5
 800610e:	d006      	beq.n	800611e <RCC_SetFlashLatency+0xae>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006110:	f7fb feee 	bl	8001ef0 <HAL_GetTick>
 8006114:	1b00      	subs	r0, r0, r4
 8006116:	2802      	cmp	r0, #2
 8006118:	d9f4      	bls.n	8006104 <RCC_SetFlashLatency+0x94>
    {
      return HAL_TIMEOUT;
 800611a:	2003      	movs	r0, #3
 800611c:	e000      	b.n	8006120 <RCC_SetFlashLatency+0xb0>
    }
  }
  return HAL_OK;
 800611e:	2000      	movs	r0, #0
}
 8006120:	b009      	add	sp, #36	; 0x24
 8006122:	bd30      	pop	{r4, r5, pc}
 8006124:	08013df8 	.word	0x08013df8
 8006128:	58004000 	.word	0x58004000

0800612c <RCC_SetFlashLatencyFromMSIRange>:
{
 800612c:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800612e:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8006132:	4b0c      	ldr	r3, [pc, #48]	; (8006164 <RCC_SetFlashLatencyFromMSIRange+0x38>)
 8006134:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800613c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8006140:	f003 030f 	and.w	r3, r3, #15
 8006144:	4a08      	ldr	r2, [pc, #32]	; (8006168 <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 8006146:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800614a:	fbb4 f4f0 	udiv	r4, r4, r0
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800614e:	f7ff ff3b 	bl	8005fc8 <HAL_PWREx_GetVoltageRange>
 8006152:	4601      	mov	r1, r0
 8006154:	4805      	ldr	r0, [pc, #20]	; (800616c <RCC_SetFlashLatencyFromMSIRange+0x40>)
 8006156:	fba0 3004 	umull	r3, r0, r0, r4
 800615a:	0c80      	lsrs	r0, r0, #18
 800615c:	f7ff ff88 	bl	8006070 <RCC_SetFlashLatency>
}
 8006160:	bd10      	pop	{r4, pc}
 8006162:	bf00      	nop
 8006164:	08014420 	.word	0x08014420
 8006168:	080143c0 	.word	0x080143c0
 800616c:	431bde83 	.word	0x431bde83

08006170 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006170:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006174:	6899      	ldr	r1, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800617c:	f011 010c 	ands.w	r1, r1, #12
 8006180:	d00a      	beq.n	8006198 <HAL_RCC_GetSysClockFreq+0x28>
 8006182:	290c      	cmp	r1, #12
 8006184:	d006      	beq.n	8006194 <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006186:	2904      	cmp	r1, #4
 8006188:	d047      	beq.n	800621a <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800618a:	2908      	cmp	r1, #8
 800618c:	d03b      	beq.n	8006206 <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 800618e:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 8006190:	4610      	mov	r0, r2
 8006192:	e026      	b.n	80061e2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8006194:	2b01      	cmp	r3, #1
 8006196:	d1f6      	bne.n	8006186 <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8006198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f013 0308 	ands.w	r3, r3, #8
 80061a2:	d00d      	beq.n	80061c0 <HAL_RCC_GetSysClockFreq+0x50>
 80061a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f013 0308 	ands.w	r3, r3, #8
 80061ae:	d124      	bne.n	80061fa <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80061b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061b4:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80061b8:	4a2e      	ldr	r2, [pc, #184]	; (8006274 <HAL_RCC_GetSysClockFreq+0x104>)
 80061ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80061be:	e00e      	b.n	80061de <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80061c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061c4:	6812      	ldr	r2, [r2, #0]
 80061c6:	f012 0f08 	tst.w	r2, #8
 80061ca:	d112      	bne.n	80061f2 <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80061cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061d4:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80061d8:	4a26      	ldr	r2, [pc, #152]	; (8006274 <HAL_RCC_GetSysClockFreq+0x104>)
 80061da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80061de:	b1d1      	cbz	r1, 8006216 <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 80061e0:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80061e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80061ec:	2b0c      	cmp	r3, #12
 80061ee:	d01a      	beq.n	8006226 <HAL_RCC_GetSysClockFreq+0xb6>
}
 80061f0:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80061f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061f6:	6812      	ldr	r2, [r2, #0]
 80061f8:	e7ee      	b.n	80061d8 <HAL_RCC_GetSysClockFreq+0x68>
 80061fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061fe:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006200:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006204:	e7d8      	b.n	80061b8 <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006206:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	f412 1280 	ands.w	r2, r2, #1048576	; 0x100000
 8006210:	d106      	bne.n	8006220 <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 8006212:	4819      	ldr	r0, [pc, #100]	; (8006278 <HAL_RCC_GetSysClockFreq+0x108>)
 8006214:	e7e5      	b.n	80061e2 <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 8006216:	4610      	mov	r0, r2
 8006218:	e7e3      	b.n	80061e2 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 800621a:	2200      	movs	r2, #0
    sysclockfreq = HSI_VALUE;
 800621c:	4817      	ldr	r0, [pc, #92]	; (800627c <HAL_RCC_GetSysClockFreq+0x10c>)
 800621e:	e7e0      	b.n	80061e2 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8006220:	2200      	movs	r2, #0
      sysclockfreq = HSE_VALUE / 2U;
 8006222:	4816      	ldr	r0, [pc, #88]	; (800627c <HAL_RCC_GetSysClockFreq+0x10c>)
 8006224:	e7dd      	b.n	80061e2 <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8006230:	2b02      	cmp	r3, #2
 8006232:	d009      	beq.n	8006248 <HAL_RCC_GetSysClockFreq+0xd8>
 8006234:	2b03      	cmp	r3, #3
 8006236:	d108      	bne.n	800624a <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8006242:	d115      	bne.n	8006270 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8006244:	4a0c      	ldr	r2, [pc, #48]	; (8006278 <HAL_RCC_GetSysClockFreq+0x108>)
 8006246:	e000      	b.n	800624a <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 8006248:	4a0c      	ldr	r2, [pc, #48]	; (800627c <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800624a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800624e:	68d8      	ldr	r0, [r3, #12]
 8006250:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8006254:	fb00 f202 	mul.w	r2, r0, r2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006258:	68d8      	ldr	r0, [r3, #12]
 800625a:	f3c0 1002 	ubfx	r0, r0, #4, #3
 800625e:	3001      	adds	r0, #1
 8006260:	fbb2 f2f0 	udiv	r2, r2, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006264:	68d8      	ldr	r0, [r3, #12]
 8006266:	0f40      	lsrs	r0, r0, #29
 8006268:	3001      	adds	r0, #1
 800626a:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 800626e:	e7bf      	b.n	80061f0 <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 8006270:	4a02      	ldr	r2, [pc, #8]	; (800627c <HAL_RCC_GetSysClockFreq+0x10c>)
 8006272:	e7ea      	b.n	800624a <HAL_RCC_GetSysClockFreq+0xda>
 8006274:	08014420 	.word	0x08014420
 8006278:	01e84800 	.word	0x01e84800
 800627c:	00f42400 	.word	0x00f42400

08006280 <HAL_RCC_GetHCLKFreq>:
{
 8006280:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006282:	f7ff ff75 	bl	8006170 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006290:	4a02      	ldr	r2, [pc, #8]	; (800629c <HAL_RCC_GetHCLKFreq+0x1c>)
 8006292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8006296:	fbb0 f0f3 	udiv	r0, r0, r3
 800629a:	bd08      	pop	{r3, pc}
 800629c:	080143c0 	.word	0x080143c0

080062a0 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80062a0:	2800      	cmp	r0, #0
 80062a2:	f000 8319 	beq.w	80068d8 <HAL_RCC_OscConfig+0x638>
{
 80062a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062a8:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80062aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062ae:	689d      	ldr	r5, [r3, #8]
 80062b0:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80062b4:	68de      	ldr	r6, [r3, #12]
 80062b6:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80062ba:	6803      	ldr	r3, [r0, #0]
 80062bc:	f013 0f20 	tst.w	r3, #32
 80062c0:	f000 808f 	beq.w	80063e2 <HAL_RCC_OscConfig+0x142>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80062c4:	b1ed      	cbz	r5, 8006302 <HAL_RCC_OscConfig+0x62>
 80062c6:	2d0c      	cmp	r5, #12
 80062c8:	d019      	beq.n	80062fe <HAL_RCC_OscConfig+0x5e>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80062ca:	6a23      	ldr	r3, [r4, #32]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f000 80bc 	beq.w	800644a <HAL_RCC_OscConfig+0x1aa>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80062d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062d6:	6813      	ldr	r3, [r2, #0]
 80062d8:	f043 0301 	orr.w	r3, r3, #1
 80062dc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80062de:	f7fb fe07 	bl	8001ef0 <HAL_GetTick>
 80062e2:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80062e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f013 0f02 	tst.w	r3, #2
 80062ee:	d165      	bne.n	80063bc <HAL_RCC_OscConfig+0x11c>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80062f0:	f7fb fdfe 	bl	8001ef0 <HAL_GetTick>
 80062f4:	1bc0      	subs	r0, r0, r7
 80062f6:	2802      	cmp	r0, #2
 80062f8:	d9f4      	bls.n	80062e4 <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 80062fa:	2003      	movs	r0, #3
 80062fc:	e2f9      	b.n	80068f2 <HAL_RCC_OscConfig+0x652>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80062fe:	2e01      	cmp	r6, #1
 8006300:	d1e3      	bne.n	80062ca <HAL_RCC_OscConfig+0x2a>
 8006302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f013 0f02 	tst.w	r3, #2
 800630c:	d003      	beq.n	8006316 <HAL_RCC_OscConfig+0x76>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800630e:	6a23      	ldr	r3, [r4, #32]
 8006310:	2b00      	cmp	r3, #0
 8006312:	f000 82e3 	beq.w	80068dc <HAL_RCC_OscConfig+0x63c>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006316:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006318:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f013 0f08 	tst.w	r3, #8
 8006322:	d029      	beq.n	8006378 <HAL_RCC_OscConfig+0xd8>
 8006324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800632e:	4298      	cmp	r0, r3
 8006330:	d92a      	bls.n	8006388 <HAL_RCC_OscConfig+0xe8>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006332:	f7ff fefb 	bl	800612c <RCC_SetFlashLatencyFromMSIRange>
 8006336:	2800      	cmp	r0, #0
 8006338:	f040 82d2 	bne.w	80068e0 <HAL_RCC_OscConfig+0x640>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800633c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	f042 0208 	orr.w	r2, r2, #8
 8006346:	601a      	str	r2, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800634e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006350:	430a      	orrs	r2, r1
 8006352:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006354:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006356:	685a      	ldr	r2, [r3, #4]
 8006358:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800635c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006360:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006362:	f7ff ff8d 	bl	8006280 <HAL_RCC_GetHCLKFreq>
 8006366:	4bb0      	ldr	r3, [pc, #704]	; (8006628 <HAL_RCC_OscConfig+0x388>)
 8006368:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 800636a:	4bb0      	ldr	r3, [pc, #704]	; (800662c <HAL_RCC_OscConfig+0x38c>)
 800636c:	6818      	ldr	r0, [r3, #0]
 800636e:	f7fb fdbd 	bl	8001eec <HAL_InitTick>
        if (status != HAL_OK)
 8006372:	2800      	cmp	r0, #0
 8006374:	d035      	beq.n	80063e2 <HAL_RCC_OscConfig+0x142>
 8006376:	e2bc      	b.n	80068f2 <HAL_RCC_OscConfig+0x652>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006378:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800637c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006380:	091b      	lsrs	r3, r3, #4
 8006382:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006386:	e7d2      	b.n	800632e <HAL_RCC_OscConfig+0x8e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	f042 0208 	orr.w	r2, r2, #8
 8006392:	601a      	str	r2, [r3, #0]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800639a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800639c:	430a      	orrs	r2, r1
 800639e:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80063a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80063a2:	685a      	ldr	r2, [r3, #4]
 80063a4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80063a8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80063ac:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80063ae:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80063b0:	f7ff febc 	bl	800612c <RCC_SetFlashLatencyFromMSIRange>
 80063b4:	2800      	cmp	r0, #0
 80063b6:	d0d4      	beq.n	8006362 <HAL_RCC_OscConfig+0xc2>
            return HAL_ERROR;
 80063b8:	2001      	movs	r0, #1
 80063ba:	e29a      	b.n	80068f2 <HAL_RCC_OscConfig+0x652>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80063bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	f042 0208 	orr.w	r2, r2, #8
 80063c6:	601a      	str	r2, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80063ce:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80063d0:	430a      	orrs	r2, r1
 80063d2:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80063d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80063d6:	685a      	ldr	r2, [r3, #4]
 80063d8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80063dc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80063e0:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063e2:	6823      	ldr	r3, [r4, #0]
 80063e4:	f013 0f01 	tst.w	r3, #1
 80063e8:	d051      	beq.n	800648e <HAL_RCC_OscConfig+0x1ee>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80063ea:	2d08      	cmp	r5, #8
 80063ec:	d045      	beq.n	800647a <HAL_RCC_OscConfig+0x1da>
 80063ee:	2d0c      	cmp	r5, #12
 80063f0:	d041      	beq.n	8006476 <HAL_RCC_OscConfig+0x1d6>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80063f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063f6:	6813      	ldr	r3, [r2, #0]
 80063f8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80063fc:	68a1      	ldr	r1, [r4, #8]
 80063fe:	430b      	orrs	r3, r1
 8006400:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006402:	6863      	ldr	r3, [r4, #4]
 8006404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006408:	d063      	beq.n	80064d2 <HAL_RCC_OscConfig+0x232>
 800640a:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800640e:	d065      	beq.n	80064dc <HAL_RCC_OscConfig+0x23c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8006410:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800641a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8006422:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006424:	6863      	ldr	r3, [r4, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d063      	beq.n	80064f2 <HAL_RCC_OscConfig+0x252>
        tickstart = HAL_GetTick();
 800642a:	f7fb fd61 	bl	8001ef0 <HAL_GetTick>
 800642e:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800643a:	d128      	bne.n	800648e <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800643c:	f7fb fd58 	bl	8001ef0 <HAL_GetTick>
 8006440:	1bc0      	subs	r0, r0, r7
 8006442:	2864      	cmp	r0, #100	; 0x64
 8006444:	d9f4      	bls.n	8006430 <HAL_RCC_OscConfig+0x190>
            return HAL_TIMEOUT;
 8006446:	2003      	movs	r0, #3
 8006448:	e253      	b.n	80068f2 <HAL_RCC_OscConfig+0x652>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800644a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800644e:	6813      	ldr	r3, [r2, #0]
 8006450:	f023 0301 	bic.w	r3, r3, #1
 8006454:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006456:	f7fb fd4b 	bl	8001ef0 <HAL_GetTick>
 800645a:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800645c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f013 0f02 	tst.w	r3, #2
 8006466:	d0bc      	beq.n	80063e2 <HAL_RCC_OscConfig+0x142>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006468:	f7fb fd42 	bl	8001ef0 <HAL_GetTick>
 800646c:	1bc0      	subs	r0, r0, r7
 800646e:	2802      	cmp	r0, #2
 8006470:	d9f4      	bls.n	800645c <HAL_RCC_OscConfig+0x1bc>
            return HAL_TIMEOUT;
 8006472:	2003      	movs	r0, #3
 8006474:	e23d      	b.n	80068f2 <HAL_RCC_OscConfig+0x652>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006476:	2e03      	cmp	r6, #3
 8006478:	d1bb      	bne.n	80063f2 <HAL_RCC_OscConfig+0x152>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800647a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006484:	d003      	beq.n	800648e <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006486:	6863      	ldr	r3, [r4, #4]
 8006488:	2b00      	cmp	r3, #0
 800648a:	f000 822b 	beq.w	80068e4 <HAL_RCC_OscConfig+0x644>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800648e:	6823      	ldr	r3, [r4, #0]
 8006490:	f013 0f02 	tst.w	r3, #2
 8006494:	d052      	beq.n	800653c <HAL_RCC_OscConfig+0x29c>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006496:	2d04      	cmp	r5, #4
 8006498:	d03d      	beq.n	8006516 <HAL_RCC_OscConfig+0x276>
 800649a:	2d0c      	cmp	r5, #12
 800649c:	d039      	beq.n	8006512 <HAL_RCC_OscConfig+0x272>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800649e:	6923      	ldr	r3, [r4, #16]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f000 8091 	beq.w	80065c8 <HAL_RCC_OscConfig+0x328>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80064a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064aa:	6813      	ldr	r3, [r2, #0]
 80064ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064b0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80064b2:	f7fb fd1d 	bl	8001ef0 <HAL_GetTick>
 80064b6:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80064b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80064c2:	d177      	bne.n	80065b4 <HAL_RCC_OscConfig+0x314>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064c4:	f7fb fd14 	bl	8001ef0 <HAL_GetTick>
 80064c8:	1b80      	subs	r0, r0, r6
 80064ca:	2802      	cmp	r0, #2
 80064cc:	d9f4      	bls.n	80064b8 <HAL_RCC_OscConfig+0x218>
            return HAL_TIMEOUT;
 80064ce:	2003      	movs	r0, #3
 80064d0:	e20f      	b.n	80068f2 <HAL_RCC_OscConfig+0x652>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80064d2:	6813      	ldr	r3, [r2, #0]
 80064d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064d8:	6013      	str	r3, [r2, #0]
}
 80064da:	e7a3      	b.n	8006424 <HAL_RCC_OscConfig+0x184>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80064dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80064e6:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80064ee:	601a      	str	r2, [r3, #0]
}
 80064f0:	e798      	b.n	8006424 <HAL_RCC_OscConfig+0x184>
        tickstart = HAL_GetTick();
 80064f2:	f7fb fcfd 	bl	8001ef0 <HAL_GetTick>
 80064f6:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80064f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006502:	d0c4      	beq.n	800648e <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006504:	f7fb fcf4 	bl	8001ef0 <HAL_GetTick>
 8006508:	1bc0      	subs	r0, r0, r7
 800650a:	2864      	cmp	r0, #100	; 0x64
 800650c:	d9f4      	bls.n	80064f8 <HAL_RCC_OscConfig+0x258>
            return HAL_TIMEOUT;
 800650e:	2003      	movs	r0, #3
 8006510:	e1ef      	b.n	80068f2 <HAL_RCC_OscConfig+0x652>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006512:	2e02      	cmp	r6, #2
 8006514:	d1c3      	bne.n	800649e <HAL_RCC_OscConfig+0x1fe>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006516:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006520:	d003      	beq.n	800652a <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006522:	6923      	ldr	r3, [r4, #16]
 8006524:	2b00      	cmp	r3, #0
 8006526:	f000 81df 	beq.w	80068e8 <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800652a:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800652c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006530:	6853      	ldr	r3, [r2, #4]
 8006532:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006536:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800653a:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800653c:	6823      	ldr	r3, [r4, #0]
 800653e:	f013 0f08 	tst.w	r3, #8
 8006542:	f000 808e 	beq.w	8006662 <HAL_RCC_OscConfig+0x3c2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006546:	69a3      	ldr	r3, [r4, #24]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d071      	beq.n	8006630 <HAL_RCC_OscConfig+0x390>
      uint32_t csr_temp = RCC->CSR;
 800654c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006550:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8006554:	69e1      	ldr	r1, [r4, #28]
 8006556:	f003 0210 	and.w	r2, r3, #16
 800655a:	4291      	cmp	r1, r2
 800655c:	d011      	beq.n	8006582 <HAL_RCC_OscConfig+0x2e2>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800655e:	f003 0203 	and.w	r2, r3, #3
 8006562:	2a02      	cmp	r2, #2
 8006564:	f000 81c2 	beq.w	80068ec <HAL_RCC_OscConfig+0x64c>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8006568:	f013 0f01 	tst.w	r3, #1
 800656c:	d142      	bne.n	80065f4 <HAL_RCC_OscConfig+0x354>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800656e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006572:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8006576:	f023 0310 	bic.w	r3, r3, #16
 800657a:	69e1      	ldr	r1, [r4, #28]
 800657c:	430b      	orrs	r3, r1
 800657e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8006582:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006586:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800658a:	f043 0301 	orr.w	r3, r3, #1
 800658e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8006592:	f7fb fcad 	bl	8001ef0 <HAL_GetTick>
 8006596:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8006598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800659c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065a0:	f013 0f02 	tst.w	r3, #2
 80065a4:	d15d      	bne.n	8006662 <HAL_RCC_OscConfig+0x3c2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065a6:	f7fb fca3 	bl	8001ef0 <HAL_GetTick>
 80065aa:	1b80      	subs	r0, r0, r6
 80065ac:	2811      	cmp	r0, #17
 80065ae:	d9f3      	bls.n	8006598 <HAL_RCC_OscConfig+0x2f8>
          return HAL_TIMEOUT;
 80065b0:	2003      	movs	r0, #3
 80065b2:	e19e      	b.n	80068f2 <HAL_RCC_OscConfig+0x652>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065b4:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80065b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065ba:	6853      	ldr	r3, [r2, #4]
 80065bc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80065c0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80065c4:	6053      	str	r3, [r2, #4]
}
 80065c6:	e7b9      	b.n	800653c <HAL_RCC_OscConfig+0x29c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80065c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065cc:	6813      	ldr	r3, [r2, #0]
 80065ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065d2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80065d4:	f7fb fc8c 	bl	8001ef0 <HAL_GetTick>
 80065d8:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80065da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80065e4:	d0aa      	beq.n	800653c <HAL_RCC_OscConfig+0x29c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065e6:	f7fb fc83 	bl	8001ef0 <HAL_GetTick>
 80065ea:	1b80      	subs	r0, r0, r6
 80065ec:	2802      	cmp	r0, #2
 80065ee:	d9f4      	bls.n	80065da <HAL_RCC_OscConfig+0x33a>
            return HAL_TIMEOUT;
 80065f0:	2003      	movs	r0, #3
 80065f2:	e17e      	b.n	80068f2 <HAL_RCC_OscConfig+0x652>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80065f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065f8:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80065fc:	f023 0301 	bic.w	r3, r3, #1
 8006600:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 8006604:	f7fb fc74 	bl	8001ef0 <HAL_GetTick>
 8006608:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800660a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800660e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006612:	f013 0f02 	tst.w	r3, #2
 8006616:	d0aa      	beq.n	800656e <HAL_RCC_OscConfig+0x2ce>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006618:	f7fb fc6a 	bl	8001ef0 <HAL_GetTick>
 800661c:	1b80      	subs	r0, r0, r6
 800661e:	2811      	cmp	r0, #17
 8006620:	d9f3      	bls.n	800660a <HAL_RCC_OscConfig+0x36a>
              return HAL_TIMEOUT;
 8006622:	2003      	movs	r0, #3
 8006624:	e165      	b.n	80068f2 <HAL_RCC_OscConfig+0x652>
 8006626:	bf00      	nop
 8006628:	20000070 	.word	0x20000070
 800662c:	20000074 	.word	0x20000074
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8006630:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006634:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8006638:	f023 0301 	bic.w	r3, r3, #1
 800663c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8006640:	f7fb fc56 	bl	8001ef0 <HAL_GetTick>
 8006644:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8006646:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800664a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800664e:	f013 0f02 	tst.w	r3, #2
 8006652:	d006      	beq.n	8006662 <HAL_RCC_OscConfig+0x3c2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006654:	f7fb fc4c 	bl	8001ef0 <HAL_GetTick>
 8006658:	1b80      	subs	r0, r0, r6
 800665a:	2811      	cmp	r0, #17
 800665c:	d9f3      	bls.n	8006646 <HAL_RCC_OscConfig+0x3a6>
          return HAL_TIMEOUT;
 800665e:	2003      	movs	r0, #3
 8006660:	e147      	b.n	80068f2 <HAL_RCC_OscConfig+0x652>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006662:	6823      	ldr	r3, [r4, #0]
 8006664:	f013 0f04 	tst.w	r3, #4
 8006668:	f000 80b1 	beq.w	80067ce <HAL_RCC_OscConfig+0x52e>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800666c:	4ba8      	ldr	r3, [pc, #672]	; (8006910 <HAL_RCC_OscConfig+0x670>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006674:	d110      	bne.n	8006698 <HAL_RCC_OscConfig+0x3f8>
      HAL_PWR_EnableBkUpAccess();
 8006676:	f7ff fc79 	bl	8005f6c <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 800667a:	f7fb fc39 	bl	8001ef0 <HAL_GetTick>
 800667e:	4606      	mov	r6, r0
 8006680:	4ba3      	ldr	r3, [pc, #652]	; (8006910 <HAL_RCC_OscConfig+0x670>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006688:	d106      	bne.n	8006698 <HAL_RCC_OscConfig+0x3f8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800668a:	f7fb fc31 	bl	8001ef0 <HAL_GetTick>
 800668e:	1b80      	subs	r0, r0, r6
 8006690:	2802      	cmp	r0, #2
 8006692:	d9f5      	bls.n	8006680 <HAL_RCC_OscConfig+0x3e0>
          return HAL_TIMEOUT;
 8006694:	2003      	movs	r0, #3
 8006696:	e12c      	b.n	80068f2 <HAL_RCC_OscConfig+0x652>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006698:	68e3      	ldr	r3, [r4, #12]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d061      	beq.n	8006762 <HAL_RCC_OscConfig+0x4c2>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800669e:	2b85      	cmp	r3, #133	; 0x85
 80066a0:	d001      	beq.n	80066a6 <HAL_RCC_OscConfig+0x406>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80066a2:	2b05      	cmp	r3, #5
 80066a4:	d107      	bne.n	80066b6 <HAL_RCC_OscConfig+0x416>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80066a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80066aa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80066ae:	f043 0304 	orr.w	r3, r3, #4
 80066b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 80066b6:	f7fb fc1b 	bl	8001ef0 <HAL_GetTick>
 80066ba:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80066bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80066c0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80066c4:	f043 0301 	orr.w	r3, r3, #1
 80066c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80066cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066d4:	f013 0f02 	tst.w	r3, #2
 80066d8:	d108      	bne.n	80066ec <HAL_RCC_OscConfig+0x44c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066da:	f7fb fc09 	bl	8001ef0 <HAL_GetTick>
 80066de:	1b80      	subs	r0, r0, r6
 80066e0:	f241 3388 	movw	r3, #5000	; 0x1388
 80066e4:	4298      	cmp	r0, r3
 80066e6:	d9f1      	bls.n	80066cc <HAL_RCC_OscConfig+0x42c>
          return HAL_TIMEOUT;
 80066e8:	2003      	movs	r0, #3
 80066ea:	e102      	b.n	80068f2 <HAL_RCC_OscConfig+0x652>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80066ec:	68e3      	ldr	r3, [r4, #12]
 80066ee:	2b81      	cmp	r3, #129	; 0x81
 80066f0:	d001      	beq.n	80066f6 <HAL_RCC_OscConfig+0x456>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80066f2:	2b85      	cmp	r3, #133	; 0x85
 80066f4:	d11a      	bne.n	800672c <HAL_RCC_OscConfig+0x48c>
        tickstart = HAL_GetTick();
 80066f6:	f7fb fbfb 	bl	8001ef0 <HAL_GetTick>
 80066fa:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80066fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006700:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006708:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800670c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006714:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8006718:	d159      	bne.n	80067ce <HAL_RCC_OscConfig+0x52e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800671a:	f7fb fbe9 	bl	8001ef0 <HAL_GetTick>
 800671e:	1b80      	subs	r0, r0, r6
 8006720:	f241 3388 	movw	r3, #5000	; 0x1388
 8006724:	4298      	cmp	r0, r3
 8006726:	d9f1      	bls.n	800670c <HAL_RCC_OscConfig+0x46c>
            return HAL_TIMEOUT;
 8006728:	2003      	movs	r0, #3
 800672a:	e0e2      	b.n	80068f2 <HAL_RCC_OscConfig+0x652>
        tickstart = HAL_GetTick();
 800672c:	f7fb fbe0 	bl	8001ef0 <HAL_GetTick>
 8006730:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006732:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006736:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800673a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800673e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006742:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800674a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800674e:	d03e      	beq.n	80067ce <HAL_RCC_OscConfig+0x52e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006750:	f7fb fbce 	bl	8001ef0 <HAL_GetTick>
 8006754:	1b80      	subs	r0, r0, r6
 8006756:	f241 3388 	movw	r3, #5000	; 0x1388
 800675a:	4298      	cmp	r0, r3
 800675c:	d9f1      	bls.n	8006742 <HAL_RCC_OscConfig+0x4a2>
            return HAL_TIMEOUT;
 800675e:	2003      	movs	r0, #3
 8006760:	e0c7      	b.n	80068f2 <HAL_RCC_OscConfig+0x652>
      tickstart = HAL_GetTick();
 8006762:	f7fb fbc5 	bl	8001ef0 <HAL_GetTick>
 8006766:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006768:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800676c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006770:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006774:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006778:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800677c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006780:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8006784:	d008      	beq.n	8006798 <HAL_RCC_OscConfig+0x4f8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006786:	f7fb fbb3 	bl	8001ef0 <HAL_GetTick>
 800678a:	1b80      	subs	r0, r0, r6
 800678c:	f241 3388 	movw	r3, #5000	; 0x1388
 8006790:	4298      	cmp	r0, r3
 8006792:	d9f1      	bls.n	8006778 <HAL_RCC_OscConfig+0x4d8>
          return HAL_TIMEOUT;
 8006794:	2003      	movs	r0, #3
 8006796:	e0ac      	b.n	80068f2 <HAL_RCC_OscConfig+0x652>
      tickstart = HAL_GetTick();
 8006798:	f7fb fbaa 	bl	8001ef0 <HAL_GetTick>
 800679c:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800679e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80067a2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80067a6:	f023 0301 	bic.w	r3, r3, #1
 80067aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80067ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067b6:	f013 0f02 	tst.w	r3, #2
 80067ba:	d008      	beq.n	80067ce <HAL_RCC_OscConfig+0x52e>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067bc:	f7fb fb98 	bl	8001ef0 <HAL_GetTick>
 80067c0:	1b80      	subs	r0, r0, r6
 80067c2:	f241 3388 	movw	r3, #5000	; 0x1388
 80067c6:	4298      	cmp	r0, r3
 80067c8:	d9f1      	bls.n	80067ae <HAL_RCC_OscConfig+0x50e>
          return HAL_TIMEOUT;
 80067ca:	2003      	movs	r0, #3
 80067cc:	e091      	b.n	80068f2 <HAL_RCC_OscConfig+0x652>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80067ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	f000 808d 	beq.w	80068f0 <HAL_RCC_OscConfig+0x650>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80067d6:	2d0c      	cmp	r5, #12
 80067d8:	d062      	beq.n	80068a0 <HAL_RCC_OscConfig+0x600>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80067da:	2b02      	cmp	r3, #2
 80067dc:	d01f      	beq.n	800681e <HAL_RCC_OscConfig+0x57e>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80067de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80067e8:	601a      	str	r2, [r3, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80067ea:	68da      	ldr	r2, [r3, #12]
 80067ec:	f022 0203 	bic.w	r2, r2, #3
 80067f0:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 80067f2:	68da      	ldr	r2, [r3, #12]
 80067f4:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 80067f8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80067fc:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 80067fe:	f7fb fb77 	bl	8001ef0 <HAL_GetTick>
 8006802:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800680e:	d073      	beq.n	80068f8 <HAL_RCC_OscConfig+0x658>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006810:	f7fb fb6e 	bl	8001ef0 <HAL_GetTick>
 8006814:	1b00      	subs	r0, r0, r4
 8006816:	280a      	cmp	r0, #10
 8006818:	d9f4      	bls.n	8006804 <HAL_RCC_OscConfig+0x564>
            return HAL_TIMEOUT;
 800681a:	2003      	movs	r0, #3
 800681c:	e069      	b.n	80068f2 <HAL_RCC_OscConfig+0x652>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800681e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006822:	6813      	ldr	r3, [r2, #0]
 8006824:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006828:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800682a:	f7fb fb61 	bl	8001ef0 <HAL_GetTick>
 800682e:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800683a:	d12a      	bne.n	8006892 <HAL_RCC_OscConfig+0x5f2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800683c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006840:	68d3      	ldr	r3, [r2, #12]
 8006842:	4934      	ldr	r1, [pc, #208]	; (8006914 <HAL_RCC_OscConfig+0x674>)
 8006844:	4019      	ands	r1, r3
 8006846:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006848:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800684a:	4303      	orrs	r3, r0
 800684c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800684e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8006852:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006854:	4303      	orrs	r3, r0
 8006856:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8006858:	4303      	orrs	r3, r0
 800685a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800685c:	4303      	orrs	r3, r0
 800685e:	430b      	orrs	r3, r1
 8006860:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006862:	6813      	ldr	r3, [r2, #0]
 8006864:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006868:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800686a:	68d3      	ldr	r3, [r2, #12]
 800686c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006870:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8006872:	f7fb fb3d 	bl	8001ef0 <HAL_GetTick>
 8006876:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006882:	d137      	bne.n	80068f4 <HAL_RCC_OscConfig+0x654>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006884:	f7fb fb34 	bl	8001ef0 <HAL_GetTick>
 8006888:	1b00      	subs	r0, r0, r4
 800688a:	280a      	cmp	r0, #10
 800688c:	d9f4      	bls.n	8006878 <HAL_RCC_OscConfig+0x5d8>
            return HAL_TIMEOUT;
 800688e:	2003      	movs	r0, #3
 8006890:	e02f      	b.n	80068f2 <HAL_RCC_OscConfig+0x652>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006892:	f7fb fb2d 	bl	8001ef0 <HAL_GetTick>
 8006896:	1b40      	subs	r0, r0, r5
 8006898:	280a      	cmp	r0, #10
 800689a:	d9c9      	bls.n	8006830 <HAL_RCC_OscConfig+0x590>
            return HAL_TIMEOUT;
 800689c:	2003      	movs	r0, #3
 800689e:	e028      	b.n	80068f2 <HAL_RCC_OscConfig+0x652>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d02b      	beq.n	80068fc <HAL_RCC_OscConfig+0x65c>
        pll_config = RCC->PLLCFGR;
 80068a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068a8:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80068aa:	f003 0103 	and.w	r1, r3, #3
 80068ae:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80068b0:	4291      	cmp	r1, r2
 80068b2:	d125      	bne.n	8006900 <HAL_RCC_OscConfig+0x660>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80068b4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80068b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068ba:	428a      	cmp	r2, r1
 80068bc:	d122      	bne.n	8006904 <HAL_RCC_OscConfig+0x664>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80068be:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80068c2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80068c4:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80068c8:	d11e      	bne.n	8006908 <HAL_RCC_OscConfig+0x668>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80068ca:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 80068ce:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d11b      	bne.n	800690c <HAL_RCC_OscConfig+0x66c>
  return HAL_OK;
 80068d4:	2000      	movs	r0, #0
 80068d6:	e00c      	b.n	80068f2 <HAL_RCC_OscConfig+0x652>
    return HAL_ERROR;
 80068d8:	2001      	movs	r0, #1
}
 80068da:	4770      	bx	lr
        return HAL_ERROR;
 80068dc:	2001      	movs	r0, #1
 80068de:	e008      	b.n	80068f2 <HAL_RCC_OscConfig+0x652>
            return HAL_ERROR;
 80068e0:	2001      	movs	r0, #1
 80068e2:	e006      	b.n	80068f2 <HAL_RCC_OscConfig+0x652>
        return HAL_ERROR;
 80068e4:	2001      	movs	r0, #1
 80068e6:	e004      	b.n	80068f2 <HAL_RCC_OscConfig+0x652>
        return HAL_ERROR;
 80068e8:	2001      	movs	r0, #1
 80068ea:	e002      	b.n	80068f2 <HAL_RCC_OscConfig+0x652>
          return HAL_ERROR;
 80068ec:	2001      	movs	r0, #1
 80068ee:	e000      	b.n	80068f2 <HAL_RCC_OscConfig+0x652>
  return HAL_OK;
 80068f0:	2000      	movs	r0, #0
}
 80068f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 80068f4:	2000      	movs	r0, #0
 80068f6:	e7fc      	b.n	80068f2 <HAL_RCC_OscConfig+0x652>
 80068f8:	2000      	movs	r0, #0
 80068fa:	e7fa      	b.n	80068f2 <HAL_RCC_OscConfig+0x652>
        return HAL_ERROR;
 80068fc:	2001      	movs	r0, #1
 80068fe:	e7f8      	b.n	80068f2 <HAL_RCC_OscConfig+0x652>
          return HAL_ERROR;
 8006900:	2001      	movs	r0, #1
 8006902:	e7f6      	b.n	80068f2 <HAL_RCC_OscConfig+0x652>
 8006904:	2001      	movs	r0, #1
 8006906:	e7f4      	b.n	80068f2 <HAL_RCC_OscConfig+0x652>
 8006908:	2001      	movs	r0, #1
 800690a:	e7f2      	b.n	80068f2 <HAL_RCC_OscConfig+0x652>
 800690c:	2001      	movs	r0, #1
 800690e:	e7f0      	b.n	80068f2 <HAL_RCC_OscConfig+0x652>
 8006910:	58000400 	.word	0x58000400
 8006914:	11c1808c 	.word	0x11c1808c

08006918 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8006918:	2800      	cmp	r0, #0
 800691a:	f000 8127 	beq.w	8006b6c <HAL_RCC_ClockConfig+0x254>
{
 800691e:	b570      	push	{r4, r5, r6, lr}
 8006920:	460c      	mov	r4, r1
 8006922:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006924:	4b93      	ldr	r3, [pc, #588]	; (8006b74 <HAL_RCC_ClockConfig+0x25c>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 0307 	and.w	r3, r3, #7
 800692c:	428b      	cmp	r3, r1
 800692e:	d32d      	bcc.n	800698c <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006930:	682b      	ldr	r3, [r5, #0]
 8006932:	f013 0f02 	tst.w	r3, #2
 8006936:	d13f      	bne.n	80069b8 <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006938:	682b      	ldr	r3, [r5, #0]
 800693a:	f013 0f20 	tst.w	r3, #32
 800693e:	d153      	bne.n	80069e8 <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8006940:	682b      	ldr	r3, [r5, #0]
 8006942:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006946:	d16a      	bne.n	8006a1e <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006948:	682b      	ldr	r3, [r5, #0]
 800694a:	f013 0f04 	tst.w	r3, #4
 800694e:	f040 8083 	bne.w	8006a58 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006952:	682b      	ldr	r3, [r5, #0]
 8006954:	f013 0f08 	tst.w	r3, #8
 8006958:	f040 8097 	bne.w	8006a8a <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800695c:	682b      	ldr	r3, [r5, #0]
 800695e:	f013 0f01 	tst.w	r3, #1
 8006962:	f000 80de 	beq.w	8006b22 <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006966:	686b      	ldr	r3, [r5, #4]
 8006968:	2b02      	cmp	r3, #2
 800696a:	f000 80a8 	beq.w	8006abe <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800696e:	2b03      	cmp	r3, #3
 8006970:	f000 80ad 	beq.w	8006ace <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006974:	2b00      	cmp	r3, #0
 8006976:	f040 80b2 	bne.w	8006ade <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800697a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800697e:	6812      	ldr	r2, [r2, #0]
 8006980:	f012 0f02 	tst.w	r2, #2
 8006984:	f040 80b1 	bne.w	8006aea <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8006988:	2001      	movs	r0, #1
 800698a:	e0ee      	b.n	8006b6a <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800698c:	4a79      	ldr	r2, [pc, #484]	; (8006b74 <HAL_RCC_ClockConfig+0x25c>)
 800698e:	6813      	ldr	r3, [r2, #0]
 8006990:	f023 0307 	bic.w	r3, r3, #7
 8006994:	430b      	orrs	r3, r1
 8006996:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006998:	f7fb faaa 	bl	8001ef0 <HAL_GetTick>
 800699c:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800699e:	4b75      	ldr	r3, [pc, #468]	; (8006b74 <HAL_RCC_ClockConfig+0x25c>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 0307 	and.w	r3, r3, #7
 80069a6:	42a3      	cmp	r3, r4
 80069a8:	d0c2      	beq.n	8006930 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80069aa:	f7fb faa1 	bl	8001ef0 <HAL_GetTick>
 80069ae:	1b80      	subs	r0, r0, r6
 80069b0:	2802      	cmp	r0, #2
 80069b2:	d9f4      	bls.n	800699e <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 80069b4:	2003      	movs	r0, #3
 80069b6:	e0d8      	b.n	8006b6a <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80069b8:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80069ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80069be:	688a      	ldr	r2, [r1, #8]
 80069c0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80069c4:	4313      	orrs	r3, r2
 80069c6:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80069c8:	f7fb fa92 	bl	8001ef0 <HAL_GetTick>
 80069cc:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80069ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80069d8:	d1ae      	bne.n	8006938 <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80069da:	f7fb fa89 	bl	8001ef0 <HAL_GetTick>
 80069de:	1b80      	subs	r0, r0, r6
 80069e0:	2802      	cmp	r0, #2
 80069e2:	d9f4      	bls.n	80069ce <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 80069e4:	2003      	movs	r0, #3
 80069e6:	e0c0      	b.n	8006b6a <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80069e8:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80069ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80069ee:	f8d1 2108 	ldr.w	r2, [r1, #264]	; 0x108
 80069f2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80069f6:	4313      	orrs	r3, r2
 80069f8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
    tickstart = HAL_GetTick();
 80069fc:	f7fb fa78 	bl	8001ef0 <HAL_GetTick>
 8006a00:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8006a02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a06:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006a0a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006a0e:	d197      	bne.n	8006940 <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006a10:	f7fb fa6e 	bl	8001ef0 <HAL_GetTick>
 8006a14:	1b80      	subs	r0, r0, r6
 8006a16:	2802      	cmp	r0, #2
 8006a18:	d9f3      	bls.n	8006a02 <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 8006a1a:	2003      	movs	r0, #3
 8006a1c:	e0a5      	b.n	8006b6a <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8006a1e:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006a20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a24:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 8006a28:	f023 030f 	bic.w	r3, r3, #15
 8006a2c:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 8006a30:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 8006a34:	f7fb fa5c 	bl	8001ef0 <HAL_GetTick>
 8006a38:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006a3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a3e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006a42:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8006a46:	f47f af7f 	bne.w	8006948 <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006a4a:	f7fb fa51 	bl	8001ef0 <HAL_GetTick>
 8006a4e:	1b80      	subs	r0, r0, r6
 8006a50:	2802      	cmp	r0, #2
 8006a52:	d9f2      	bls.n	8006a3a <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 8006a54:	2003      	movs	r0, #3
 8006a56:	e088      	b.n	8006b6a <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006a58:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006a5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a5e:	688a      	ldr	r2, [r1, #8]
 8006a60:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006a64:	4313      	orrs	r3, r2
 8006a66:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8006a68:	f7fb fa42 	bl	8001ef0 <HAL_GetTick>
 8006a6c:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006a6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006a78:	f47f af6b 	bne.w	8006952 <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006a7c:	f7fb fa38 	bl	8001ef0 <HAL_GetTick>
 8006a80:	1b80      	subs	r0, r0, r6
 8006a82:	2802      	cmp	r0, #2
 8006a84:	d9f3      	bls.n	8006a6e <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 8006a86:	2003      	movs	r0, #3
 8006a88:	e06f      	b.n	8006b6a <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006a8a:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006a8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a90:	6893      	ldr	r3, [r2, #8]
 8006a92:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8006a96:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006a9a:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8006a9c:	f7fb fa28 	bl	8001ef0 <HAL_GetTick>
 8006aa0:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006aa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8006aac:	f47f af56 	bne.w	800695c <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006ab0:	f7fb fa1e 	bl	8001ef0 <HAL_GetTick>
 8006ab4:	1b80      	subs	r0, r0, r6
 8006ab6:	2802      	cmp	r0, #2
 8006ab8:	d9f3      	bls.n	8006aa2 <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 8006aba:	2003      	movs	r0, #3
 8006abc:	e055      	b.n	8006b6a <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006abe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ac2:	6812      	ldr	r2, [r2, #0]
 8006ac4:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8006ac8:	d10f      	bne.n	8006aea <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8006aca:	2001      	movs	r0, #1
 8006acc:	e04d      	b.n	8006b6a <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006ace:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ad2:	6812      	ldr	r2, [r2, #0]
 8006ad4:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8006ad8:	d107      	bne.n	8006aea <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8006ada:	2001      	movs	r0, #1
 8006adc:	e045      	b.n	8006b6a <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006ade:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ae2:	6812      	ldr	r2, [r2, #0]
 8006ae4:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8006ae8:	d042      	beq.n	8006b70 <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006aea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006aee:	688a      	ldr	r2, [r1, #8]
 8006af0:	f022 0203 	bic.w	r2, r2, #3
 8006af4:	4313      	orrs	r3, r2
 8006af6:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8006af8:	f7fb f9fa 	bl	8001ef0 <HAL_GetTick>
 8006afc:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006afe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b08:	686a      	ldr	r2, [r5, #4]
 8006b0a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006b0e:	d008      	beq.n	8006b22 <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b10:	f7fb f9ee 	bl	8001ef0 <HAL_GetTick>
 8006b14:	1b80      	subs	r0, r0, r6
 8006b16:	f241 3388 	movw	r3, #5000	; 0x1388
 8006b1a:	4298      	cmp	r0, r3
 8006b1c:	d9ef      	bls.n	8006afe <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 8006b1e:	2003      	movs	r0, #3
 8006b20:	e023      	b.n	8006b6a <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b22:	4b14      	ldr	r3, [pc, #80]	; (8006b74 <HAL_RCC_ClockConfig+0x25c>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 0307 	and.w	r3, r3, #7
 8006b2a:	42a3      	cmp	r3, r4
 8006b2c:	d915      	bls.n	8006b5a <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b2e:	4a11      	ldr	r2, [pc, #68]	; (8006b74 <HAL_RCC_ClockConfig+0x25c>)
 8006b30:	6813      	ldr	r3, [r2, #0]
 8006b32:	f023 0307 	bic.w	r3, r3, #7
 8006b36:	4323      	orrs	r3, r4
 8006b38:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006b3a:	f7fb f9d9 	bl	8001ef0 <HAL_GetTick>
 8006b3e:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b40:	4b0c      	ldr	r3, [pc, #48]	; (8006b74 <HAL_RCC_ClockConfig+0x25c>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 0307 	and.w	r3, r3, #7
 8006b48:	42a3      	cmp	r3, r4
 8006b4a:	d006      	beq.n	8006b5a <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006b4c:	f7fb f9d0 	bl	8001ef0 <HAL_GetTick>
 8006b50:	1b40      	subs	r0, r0, r5
 8006b52:	2802      	cmp	r0, #2
 8006b54:	d9f4      	bls.n	8006b40 <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 8006b56:	2003      	movs	r0, #3
 8006b58:	e007      	b.n	8006b6a <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006b5a:	f7ff fb91 	bl	8006280 <HAL_RCC_GetHCLKFreq>
 8006b5e:	4b06      	ldr	r3, [pc, #24]	; (8006b78 <HAL_RCC_ClockConfig+0x260>)
 8006b60:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8006b62:	4b06      	ldr	r3, [pc, #24]	; (8006b7c <HAL_RCC_ClockConfig+0x264>)
 8006b64:	6818      	ldr	r0, [r3, #0]
 8006b66:	f7fb f9c1 	bl	8001eec <HAL_InitTick>
}
 8006b6a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8006b6c:	2001      	movs	r0, #1
}
 8006b6e:	4770      	bx	lr
        return HAL_ERROR;
 8006b70:	2001      	movs	r0, #1
 8006b72:	e7fa      	b.n	8006b6a <HAL_RCC_ClockConfig+0x252>
 8006b74:	58004000 	.word	0x58004000
 8006b78:	20000070 	.word	0x20000070
 8006b7c:	20000074 	.word	0x20000074

08006b80 <HAL_RCC_GetPCLK1Freq>:
{
 8006b80:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006b82:	f7ff fb7d 	bl	8006280 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8006b90:	4a02      	ldr	r2, [pc, #8]	; (8006b9c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8006b96:	40d8      	lsrs	r0, r3
 8006b98:	bd08      	pop	{r3, pc}
 8006b9a:	bf00      	nop
 8006b9c:	08014400 	.word	0x08014400

08006ba0 <HAL_RCC_GetPCLK2Freq>:
{
 8006ba0:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006ba2:	f7ff fb6d 	bl	8006280 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006ba6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8006bb0:	4a02      	ldr	r2, [pc, #8]	; (8006bbc <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8006bb6:	40d8      	lsrs	r0, r3
 8006bb8:	bd08      	pop	{r3, pc}
 8006bba:	bf00      	nop
 8006bbc:	08014400 	.word	0x08014400

08006bc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006bc0:	b570      	push	{r4, r5, r6, lr}
 8006bc2:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006bc4:	6803      	ldr	r3, [r0, #0]
 8006bc6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8006bca:	f040 80ab 	bne.w	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x164>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006bce:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006bd0:	6823      	ldr	r3, [r4, #0]
 8006bd2:	f013 0f01 	tst.w	r3, #1
 8006bd6:	d00a      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006bd8:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8006bda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006bde:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8006be2:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8006be6:	b292      	uxth	r2, r2
 8006be8:	4313      	orrs	r3, r2
 8006bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006bee:	6823      	ldr	r3, [r4, #0]
 8006bf0:	f013 0f02 	tst.w	r3, #2
 8006bf4:	d00a      	beq.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006bf6:	68a2      	ldr	r2, [r4, #8]
 8006bf8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006bfc:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8006c00:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8006c04:	b292      	uxth	r2, r2
 8006c06:	4313      	orrs	r3, r2
 8006c08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006c0c:	6823      	ldr	r3, [r4, #0]
 8006c0e:	f013 0f20 	tst.w	r3, #32
 8006c12:	d009      	beq.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006c14:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006c16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c1a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006c1e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006c22:	4313      	orrs	r3, r2
 8006c24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006c28:	6823      	ldr	r3, [r4, #0]
 8006c2a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006c2e:	d00c      	beq.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c30:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006c32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c36:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8006c3a:	0c02      	lsrs	r2, r0, #16
 8006c3c:	0412      	lsls	r2, r2, #16
 8006c3e:	ea23 0302 	bic.w	r3, r3, r2
 8006c42:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006c46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006c4a:	6823      	ldr	r3, [r4, #0]
 8006c4c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006c50:	d00c      	beq.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006c52:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006c54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c58:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8006c5c:	0c02      	lsrs	r2, r0, #16
 8006c5e:	0412      	lsls	r2, r2, #16
 8006c60:	ea23 0302 	bic.w	r3, r3, r2
 8006c64:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006c68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006c6c:	6823      	ldr	r3, [r4, #0]
 8006c6e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8006c72:	d00c      	beq.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006c74:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006c76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c7a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8006c7e:	0c02      	lsrs	r2, r0, #16
 8006c80:	0412      	lsls	r2, r2, #16
 8006c82:	ea23 0302 	bic.w	r3, r3, r2
 8006c86:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006c8e:	6823      	ldr	r3, [r4, #0]
 8006c90:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006c94:	f040 809e 	bne.w	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x214>
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006c98:	6823      	ldr	r3, [r4, #0]
 8006c9a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006c9e:	f040 80aa 	bne.w	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x236>
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006ca2:	6823      	ldr	r3, [r4, #0]
 8006ca4:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006ca8:	f040 80b6 	bne.w	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x258>
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8006cac:	6823      	ldr	r3, [r4, #0]
 8006cae:	f013 0f10 	tst.w	r3, #16
 8006cb2:	d00e      	beq.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006cb4:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8006cb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006cba:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006cbe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006cc8:	68e3      	ldr	r3, [r4, #12]
 8006cca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cce:	f000 80b4 	beq.w	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x27a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006cd2:	6823      	ldr	r3, [r4, #0]
 8006cd4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8006cd8:	d00f      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006cda:	6b23      	ldr	r3, [r4, #48]	; 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006cdc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ce0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006ce4:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006cee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006cf0:	b91b      	cbnz	r3, 8006cfa <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006cf2:	68cb      	ldr	r3, [r1, #12]
 8006cf4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006cf8:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006cfa:	6823      	ldr	r3, [r4, #0]
 8006cfc:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006d00:	d00e      	beq.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006d02:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006d04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d08:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006d0c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006d10:	4313      	orrs	r3, r2
 8006d12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006d16:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006d18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d1c:	f000 8092 	beq.w	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x284>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 8006d20:	4628      	mov	r0, r5
 8006d22:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 8006d24:	f7ff f922 	bl	8005f6c <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 8006d28:	f7fb f8e2 	bl	8001ef0 <HAL_GetTick>
 8006d2c:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006d2e:	4b48      	ldr	r3, [pc, #288]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006d36:	d106      	bne.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x186>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d38:	f7fb f8da 	bl	8001ef0 <HAL_GetTick>
 8006d3c:	1b40      	subs	r0, r0, r5
 8006d3e:	2802      	cmp	r0, #2
 8006d40:	d9f5      	bls.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x16e>
        ret = HAL_TIMEOUT;
 8006d42:	2503      	movs	r5, #3
 8006d44:	e000      	b.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x188>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8006d46:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 8006d48:	2d00      	cmp	r5, #0
 8006d4a:	f47f af41 	bne.w	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8006d5a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d024      	beq.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d64:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006d68:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006d6c:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8006d70:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8006d74:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006d78:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8006d7c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8006d80:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8006d84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8006d88:	f012 0f02 	tst.w	r2, #2
 8006d8c:	d10f      	bne.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
      if (ret == HAL_OK)
 8006d8e:	2d00      	cmp	r5, #0
 8006d90:	f47f af1e 	bne.w	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d94:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006d96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d9a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006d9e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006da2:	4313      	orrs	r3, r2
 8006da4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006da8:	e712      	b.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x10>
  uint32_t tmpregister = 0;
 8006daa:	2200      	movs	r2, #0
 8006dac:	e7ec      	b.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        tickstart = HAL_GetTick();
 8006dae:	f7fb f89f 	bl	8001ef0 <HAL_GetTick>
 8006db2:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006db4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dbc:	f013 0f02 	tst.w	r3, #2
 8006dc0:	d1e5      	bne.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dc2:	f7fb f895 	bl	8001ef0 <HAL_GetTick>
 8006dc6:	1b80      	subs	r0, r0, r6
 8006dc8:	f241 3388 	movw	r3, #5000	; 0x1388
 8006dcc:	4298      	cmp	r0, r3
 8006dce:	d9f1      	bls.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
            ret = HAL_TIMEOUT;
 8006dd0:	2503      	movs	r5, #3
 8006dd2:	e7dc      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006dd4:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006dd6:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8006dda:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8006dde:	0919      	lsrs	r1, r3, #4
 8006de0:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8006de4:	ea22 0201 	bic.w	r2, r2, r1
 8006de8:	011b      	lsls	r3, r3, #4
 8006dea:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006dee:	4313      	orrs	r3, r2
 8006df0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8006df4:	e750      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006df6:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006df8:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8006dfc:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8006e00:	0919      	lsrs	r1, r3, #4
 8006e02:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8006e06:	ea22 0201 	bic.w	r2, r2, r1
 8006e0a:	011b      	lsls	r3, r3, #4
 8006e0c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006e10:	4313      	orrs	r3, r2
 8006e12:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8006e16:	e744      	b.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006e18:	69e3      	ldr	r3, [r4, #28]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006e1a:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8006e1e:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8006e22:	0919      	lsrs	r1, r3, #4
 8006e24:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8006e28:	ea22 0201 	bic.w	r2, r2, r1
 8006e2c:	011b      	lsls	r3, r3, #4
 8006e2e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006e32:	4313      	orrs	r3, r2
 8006e34:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8006e38:	e738      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8006e3a:	68cb      	ldr	r3, [r1, #12]
 8006e3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e40:	60cb      	str	r3, [r1, #12]
 8006e42:	e746      	b.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006e44:	68cb      	ldr	r3, [r1, #12]
 8006e46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e4a:	60cb      	str	r3, [r1, #12]
 8006e4c:	e768      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006e4e:	bf00      	nop
 8006e50:	58000400 	.word	0x58000400

08006e54 <HAL_RTC_DeactivateAlarm>:
{
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006e54:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d036      	beq.n	8006eca <HAL_RTC_DeactivateAlarm+0x76>
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006e62:	2302      	movs	r3, #2
 8006e64:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006e68:	4b19      	ldr	r3, [pc, #100]	; (8006ed0 <HAL_RTC_DeactivateAlarm+0x7c>)
 8006e6a:	22ca      	movs	r2, #202	; 0xca
 8006e6c:	625a      	str	r2, [r3, #36]	; 0x24
 8006e6e:	2253      	movs	r2, #83	; 0x53
 8006e70:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8006e72:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8006e76:	d019      	beq.n	8006eac <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006e78:	4b15      	ldr	r3, [pc, #84]	; (8006ed0 <HAL_RTC_DeactivateAlarm+0x7c>)
 8006e7a:	699a      	ldr	r2, [r3, #24]
 8006e7c:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 8006e80:	619a      	str	r2, [r3, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8006e82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e84:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006e88:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006e8a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8006e8c:	f022 0202 	bic.w	r2, r2, #2
 8006e90:	6302      	str	r2, [r0, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006e92:	2202      	movs	r2, #2
 8006e94:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e96:	4b0e      	ldr	r3, [pc, #56]	; (8006ed0 <HAL_RTC_DeactivateAlarm+0x7c>)
 8006e98:	22ff      	movs	r2, #255	; 0xff
 8006e9a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006eac:	699a      	ldr	r2, [r3, #24]
 8006eae:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8006eb2:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8006eb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006eb6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006eba:	645a      	str	r2, [r3, #68]	; 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006ebc:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8006ebe:	f022 0201 	bic.w	r2, r2, #1
 8006ec2:	6302      	str	r2, [r0, #48]	; 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	65da      	str	r2, [r3, #92]	; 0x5c
 8006ec8:	e7e5      	b.n	8006e96 <HAL_RTC_DeactivateAlarm+0x42>
  __HAL_LOCK(hrtc);
 8006eca:	2002      	movs	r0, #2
}
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	40002800 	.word	0x40002800

08006ed4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006ed4:	b538      	push	{r3, r4, r5, lr}
 8006ed6:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8006ed8:	4b0d      	ldr	r3, [pc, #52]	; (8006f10 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8006eda:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8006edc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006ede:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8006ee0:	f015 0f01 	tst.w	r5, #1
 8006ee4:	d106      	bne.n	8006ef4 <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8006ee6:	f015 0f02 	tst.w	r5, #2
 8006eea:	d109      	bne.n	8006f00 <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006eec:	2301      	movs	r3, #1
 8006eee:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8006ef2:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006ef4:	4b06      	ldr	r3, [pc, #24]	; (8006f10 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 8006efa:	f7fb fadf 	bl	80024bc <HAL_RTC_AlarmAEventCallback>
 8006efe:	e7f2      	b.n	8006ee6 <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006f00:	4b03      	ldr	r3, [pc, #12]	; (8006f10 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8006f02:	2202      	movs	r2, #2
 8006f04:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006f06:	4620      	mov	r0, r4
 8006f08:	f000 f9e6 	bl	80072d8 <HAL_RTCEx_AlarmBEventCallback>
 8006f0c:	e7ee      	b.n	8006eec <HAL_RTC_AlarmIRQHandler+0x18>
 8006f0e:	bf00      	nop
 8006f10:	40002800 	.word	0x40002800

08006f14 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006f14:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8006f16:	4a0b      	ldr	r2, [pc, #44]	; (8006f44 <HAL_RTC_WaitForSynchro+0x30>)
 8006f18:	68d3      	ldr	r3, [r2, #12]
 8006f1a:	f023 0320 	bic.w	r3, r3, #32
 8006f1e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8006f20:	f7fa ffe6 	bl	8001ef0 <HAL_GetTick>
 8006f24:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006f26:	4b07      	ldr	r3, [pc, #28]	; (8006f44 <HAL_RTC_WaitForSynchro+0x30>)
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	f013 0f20 	tst.w	r3, #32
 8006f2e:	d107      	bne.n	8006f40 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006f30:	f7fa ffde 	bl	8001ef0 <HAL_GetTick>
 8006f34:	1b00      	subs	r0, r0, r4
 8006f36:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006f3a:	d9f4      	bls.n	8006f26 <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 8006f3c:	2003      	movs	r0, #3
 8006f3e:	e000      	b.n	8006f42 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8006f40:	2000      	movs	r0, #0
}
 8006f42:	bd10      	pop	{r4, pc}
 8006f44:	40002800 	.word	0x40002800

08006f48 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006f48:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006f4a:	4b11      	ldr	r3, [pc, #68]	; (8006f90 <RTC_EnterInitMode+0x48>)
 8006f4c:	68db      	ldr	r3, [r3, #12]
 8006f4e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006f52:	d002      	beq.n	8006f5a <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8006f54:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 8006f56:	4620      	mov	r0, r4
 8006f58:	bd70      	pop	{r4, r5, r6, pc}
 8006f5a:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006f5c:	4a0c      	ldr	r2, [pc, #48]	; (8006f90 <RTC_EnterInitMode+0x48>)
 8006f5e:	68d3      	ldr	r3, [r2, #12]
 8006f60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f64:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8006f66:	f7fa ffc3 	bl	8001ef0 <HAL_GetTick>
 8006f6a:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 8006f6c:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006f6e:	4b08      	ldr	r3, [pc, #32]	; (8006f90 <RTC_EnterInitMode+0x48>)
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006f76:	d1ee      	bne.n	8006f56 <RTC_EnterInitMode+0xe>
 8006f78:	2c03      	cmp	r4, #3
 8006f7a:	d0ec      	beq.n	8006f56 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006f7c:	f7fa ffb8 	bl	8001ef0 <HAL_GetTick>
 8006f80:	1b43      	subs	r3, r0, r5
 8006f82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f86:	d9f2      	bls.n	8006f6e <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006f88:	2403      	movs	r4, #3
 8006f8a:	f886 402d 	strb.w	r4, [r6, #45]	; 0x2d
 8006f8e:	e7ee      	b.n	8006f6e <RTC_EnterInitMode+0x26>
 8006f90:	40002800 	.word	0x40002800

08006f94 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006f94:	b510      	push	{r4, lr}
 8006f96:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006f98:	4b11      	ldr	r3, [pc, #68]	; (8006fe0 <RTC_ExitInitMode+0x4c>)
 8006f9a:	68da      	ldr	r2, [r3, #12]
 8006f9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fa0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006fa2:	699b      	ldr	r3, [r3, #24]
 8006fa4:	f013 0f20 	tst.w	r3, #32
 8006fa8:	d107      	bne.n	8006fba <RTC_ExitInitMode+0x26>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006faa:	f7ff ffb3 	bl	8006f14 <HAL_RTC_WaitForSynchro>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	b1a0      	cbz	r0, 8006fdc <RTC_ExitInitMode+0x48>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8006fb8:	e010      	b.n	8006fdc <RTC_ExitInitMode+0x48>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006fba:	4a09      	ldr	r2, [pc, #36]	; (8006fe0 <RTC_ExitInitMode+0x4c>)
 8006fbc:	6993      	ldr	r3, [r2, #24]
 8006fbe:	f023 0320 	bic.w	r3, r3, #32
 8006fc2:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006fc4:	f7ff ffa6 	bl	8006f14 <HAL_RTC_WaitForSynchro>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	b110      	cbz	r0, 8006fd2 <RTC_ExitInitMode+0x3e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006fcc:	2303      	movs	r3, #3
 8006fce:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006fd2:	4903      	ldr	r1, [pc, #12]	; (8006fe0 <RTC_ExitInitMode+0x4c>)
 8006fd4:	698a      	ldr	r2, [r1, #24]
 8006fd6:	f042 0220 	orr.w	r2, r2, #32
 8006fda:	618a      	str	r2, [r1, #24]
  }

  return status;
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	bd10      	pop	{r4, pc}
 8006fe0:	40002800 	.word	0x40002800

08006fe4 <HAL_RTC_Init>:
  if (hrtc != NULL)
 8006fe4:	2800      	cmp	r0, #0
 8006fe6:	d04a      	beq.n	800707e <HAL_RTC_Init+0x9a>
{
 8006fe8:	b538      	push	{r3, r4, r5, lr}
 8006fea:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006fec:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8006ff0:	b19b      	cbz	r3, 800701a <HAL_RTC_Init+0x36>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006ff2:	2302      	movs	r3, #2
 8006ff4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ff8:	4b22      	ldr	r3, [pc, #136]	; (8007084 <HAL_RTC_Init+0xa0>)
 8006ffa:	22ca      	movs	r2, #202	; 0xca
 8006ffc:	625a      	str	r2, [r3, #36]	; 0x24
 8006ffe:	2253      	movs	r2, #83	; 0x53
 8007000:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 8007002:	4620      	mov	r0, r4
 8007004:	f7ff ffa0 	bl	8006f48 <RTC_EnterInitMode>
    if (status == HAL_OK)
 8007008:	b160      	cbz	r0, 8007024 <HAL_RTC_Init+0x40>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800700a:	4b1e      	ldr	r3, [pc, #120]	; (8007084 <HAL_RTC_Init+0xa0>)
 800700c:	22ff      	movs	r2, #255	; 0xff
 800700e:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8007010:	b910      	cbnz	r0, 8007018 <HAL_RTC_Init+0x34>
      hrtc->State = HAL_RTC_STATE_READY;
 8007012:	2301      	movs	r3, #1
 8007014:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8007018:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 800701a:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
      HAL_RTC_MspInit(hrtc);
 800701e:	f7fa fdbf 	bl	8001ba0 <HAL_RTC_MspInit>
 8007022:	e7e6      	b.n	8006ff2 <HAL_RTC_Init+0xe>
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8007024:	4b17      	ldr	r3, [pc, #92]	; (8007084 <HAL_RTC_Init+0xa0>)
 8007026:	699a      	ldr	r2, [r3, #24]
 8007028:	f022 628e 	bic.w	r2, r2, #74448896	; 0x4700000
 800702c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007030:	619a      	str	r2, [r3, #24]
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8007032:	6999      	ldr	r1, [r3, #24]
 8007034:	6862      	ldr	r2, [r4, #4]
 8007036:	6920      	ldr	r0, [r4, #16]
 8007038:	4302      	orrs	r2, r0
 800703a:	69a0      	ldr	r0, [r4, #24]
 800703c:	4302      	orrs	r2, r0
 800703e:	430a      	orrs	r2, r1
 8007040:	619a      	str	r2, [r3, #24]
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8007042:	68e2      	ldr	r2, [r4, #12]
 8007044:	68a1      	ldr	r1, [r4, #8]
 8007046:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800704a:	611a      	str	r2, [r3, #16]
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800704c:	68da      	ldr	r2, [r3, #12]
 800704e:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8007052:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007054:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8007056:	4301      	orrs	r1, r0
 8007058:	430a      	orrs	r2, r1
 800705a:	60da      	str	r2, [r3, #12]
      status = RTC_ExitInitMode(hrtc);
 800705c:	4620      	mov	r0, r4
 800705e:	f7ff ff99 	bl	8006f94 <RTC_ExitInitMode>
      if (status == HAL_OK)
 8007062:	2800      	cmp	r0, #0
 8007064:	d1d1      	bne.n	800700a <HAL_RTC_Init+0x26>
        MODIFY_REG(RTC->CR, \
 8007066:	4907      	ldr	r1, [pc, #28]	; (8007084 <HAL_RTC_Init+0xa0>)
 8007068:	698b      	ldr	r3, [r1, #24]
 800706a:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800706e:	6a22      	ldr	r2, [r4, #32]
 8007070:	69e5      	ldr	r5, [r4, #28]
 8007072:	432a      	orrs	r2, r5
 8007074:	6965      	ldr	r5, [r4, #20]
 8007076:	432a      	orrs	r2, r5
 8007078:	4313      	orrs	r3, r2
 800707a:	618b      	str	r3, [r1, #24]
 800707c:	e7c5      	b.n	800700a <HAL_RTC_Init+0x26>
  HAL_StatusTypeDef status = HAL_ERROR;
 800707e:	2001      	movs	r0, #1
}
 8007080:	4770      	bx	lr
 8007082:	bf00      	nop
 8007084:	40002800 	.word	0x40002800

08007088 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8007088:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 800708a:	e002      	b.n	8007092 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 800708c:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 800708e:	380a      	subs	r0, #10
 8007090:	b2c0      	uxtb	r0, r0
  while (tmp_Value >= 10U)
 8007092:	2809      	cmp	r0, #9
 8007094:	d8fa      	bhi.n	800708c <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8007096:	011b      	lsls	r3, r3, #4
 8007098:	b2db      	uxtb	r3, r3
}
 800709a:	4318      	orrs	r0, r3
 800709c:	4770      	bx	lr
	...

080070a0 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 80070a0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	f000 80b0 	beq.w	800720a <HAL_RTC_SetAlarm_IT+0x16a>
{
 80070aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070ae:	4605      	mov	r5, r0
 80070b0:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 80070b2:	2301      	movs	r3, #1
 80070b4:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 80070b8:	2302      	movs	r3, #2
 80070ba:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80070be:	4b54      	ldr	r3, [pc, #336]	; (8007210 <HAL_RTC_SetAlarm_IT+0x170>)
 80070c0:	68de      	ldr	r6, [r3, #12]
 80070c2:	f406 7640 	and.w	r6, r6, #768	; 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 80070c6:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 80070ca:	d043      	beq.n	8007154 <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 80070cc:	bb12      	cbnz	r2, 8007114 <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80070ce:	699b      	ldr	r3, [r3, #24]
 80070d0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80070d4:	d101      	bne.n	80070da <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80070d6:	2300      	movs	r3, #0
 80070d8:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 80070da:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80070de:	7820      	ldrb	r0, [r4, #0]
 80070e0:	f7ff ffd2 	bl	8007088 <RTC_ByteToBcd2>
 80070e4:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80070e6:	7860      	ldrb	r0, [r4, #1]
 80070e8:	f7ff ffce 	bl	8007088 <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80070ec:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80070f0:	78a0      	ldrb	r0, [r4, #2]
 80070f2:	f7ff ffc9 	bl	8007088 <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80070f6:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80070f8:	78e0      	ldrb	r0, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80070fa:	ea47 5780 	orr.w	r7, r7, r0, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80070fe:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 8007102:	f7ff ffc1 	bl	8007088 <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007106:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800710a:	6a27      	ldr	r7, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800710c:	4338      	orrs	r0, r7
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800710e:	ea48 0000 	orr.w	r0, r8, r0
 8007112:	e020      	b.n	8007156 <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8007114:	6948      	ldr	r0, [r1, #20]
 8007116:	f1b0 3f80 	cmp.w	r0, #2155905152	; 0x80808080
 800711a:	d009      	beq.n	8007130 <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 800711c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8007120:	d006      	beq.n	8007130 <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8007122:	4b3b      	ldr	r3, [pc, #236]	; (8007210 <HAL_RTC_SetAlarm_IT+0x170>)
 8007124:	699b      	ldr	r3, [r3, #24]
 8007126:	f013 0f40 	tst.w	r3, #64	; 0x40
 800712a:	d101      	bne.n	8007130 <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 800712c:	2300      	movs	r3, #0
 800712e:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007130:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007132:	7863      	ldrb	r3, [r4, #1]
 8007134:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007136:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800713a:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800713c:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800713e:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007140:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007144:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007148:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800714c:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800714e:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007150:	4318      	orrs	r0, r3
 8007152:	e000      	b.n	8007156 <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 8007154:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007156:	4b2e      	ldr	r3, [pc, #184]	; (8007210 <HAL_RTC_SetAlarm_IT+0x170>)
 8007158:	22ca      	movs	r2, #202	; 0xca
 800715a:	625a      	str	r2, [r3, #36]	; 0x24
 800715c:	2253      	movs	r2, #83	; 0x53
 800715e:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8007160:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007162:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007166:	d02a      	beq.n	80071be <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8007168:	4b29      	ldr	r3, [pc, #164]	; (8007210 <HAL_RTC_SetAlarm_IT+0x170>)
 800716a:	699a      	ldr	r2, [r3, #24]
 800716c:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 8007170:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8007172:	2202      	movs	r2, #2
 8007174:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8007176:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 800717a:	d040      	beq.n	80071fe <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 800717c:	4b24      	ldr	r3, [pc, #144]	; (8007210 <HAL_RTC_SetAlarm_IT+0x170>)
 800717e:	6498      	str	r0, [r3, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8007180:	69a2      	ldr	r2, [r4, #24]
 8007182:	64da      	str	r2, [r3, #76]	; 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8007184:	6862      	ldr	r2, [r4, #4]
 8007186:	4b22      	ldr	r3, [pc, #136]	; (8007210 <HAL_RTC_SetAlarm_IT+0x170>)
 8007188:	675a      	str	r2, [r3, #116]	; 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800718a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800718c:	f042 0202 	orr.w	r2, r2, #2
 8007190:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8007192:	699a      	ldr	r2, [r3, #24]
 8007194:	f442 5208 	orr.w	r2, r2, #8704	; 0x2200
 8007198:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800719a:	4a1e      	ldr	r2, [pc, #120]	; (8007214 <HAL_RTC_SetAlarm_IT+0x174>)
 800719c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80071a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071a8:	4b19      	ldr	r3, [pc, #100]	; (8007210 <HAL_RTC_SetAlarm_IT+0x170>)
 80071aa:	22ff      	movs	r2, #255	; 0xff
 80071ac:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 80071ae:	2301      	movs	r3, #1
 80071b0:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  __HAL_UNLOCK(hrtc);
 80071b4:	2000      	movs	r0, #0
 80071b6:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
}
 80071ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80071be:	4b14      	ldr	r3, [pc, #80]	; (8007210 <HAL_RTC_SetAlarm_IT+0x170>)
 80071c0:	699a      	ldr	r2, [r3, #24]
 80071c2:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80071c6:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80071c8:	2201      	movs	r2, #1
 80071ca:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 80071cc:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 80071d0:	d00f      	beq.n	80071f2 <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80071d2:	4b0f      	ldr	r3, [pc, #60]	; (8007210 <HAL_RTC_SetAlarm_IT+0x170>)
 80071d4:	6418      	str	r0, [r3, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 80071d6:	69a2      	ldr	r2, [r4, #24]
 80071d8:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 80071da:	6862      	ldr	r2, [r4, #4]
 80071dc:	4b0c      	ldr	r3, [pc, #48]	; (8007210 <HAL_RTC_SetAlarm_IT+0x170>)
 80071de:	671a      	str	r2, [r3, #112]	; 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80071e0:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80071e2:	f042 0201 	orr.w	r2, r2, #1
 80071e6:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80071e8:	699a      	ldr	r2, [r3, #24]
 80071ea:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
 80071ee:	619a      	str	r2, [r3, #24]
 80071f0:	e7d3      	b.n	800719a <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 80071f2:	69a3      	ldr	r3, [r4, #24]
 80071f4:	69e2      	ldr	r2, [r4, #28]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	4a05      	ldr	r2, [pc, #20]	; (8007210 <HAL_RTC_SetAlarm_IT+0x170>)
 80071fa:	6453      	str	r3, [r2, #68]	; 0x44
 80071fc:	e7ed      	b.n	80071da <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 80071fe:	69a3      	ldr	r3, [r4, #24]
 8007200:	69e2      	ldr	r2, [r4, #28]
 8007202:	4313      	orrs	r3, r2
 8007204:	4a02      	ldr	r2, [pc, #8]	; (8007210 <HAL_RTC_SetAlarm_IT+0x170>)
 8007206:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007208:	e7bc      	b.n	8007184 <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 800720a:	2002      	movs	r0, #2
}
 800720c:	4770      	bx	lr
 800720e:	bf00      	nop
 8007210:	40002800 	.word	0x40002800
 8007214:	58000800 	.word	0x58000800

08007218 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007218:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800721c:	2b01      	cmp	r3, #1
 800721e:	d017      	beq.n	8007250 <HAL_RTCEx_EnableBypassShadow+0x38>
 8007220:	2101      	movs	r1, #1
 8007222:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007226:	2302      	movs	r3, #2
 8007228:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800722c:	4b09      	ldr	r3, [pc, #36]	; (8007254 <HAL_RTCEx_EnableBypassShadow+0x3c>)
 800722e:	22ca      	movs	r2, #202	; 0xca
 8007230:	625a      	str	r2, [r3, #36]	; 0x24
 8007232:	2253      	movs	r2, #83	; 0x53
 8007234:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007236:	699a      	ldr	r2, [r3, #24]
 8007238:	f042 0220 	orr.w	r2, r2, #32
 800723c:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800723e:	22ff      	movs	r2, #255	; 0xff
 8007240:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007242:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007246:	2300      	movs	r3, #0
 8007248:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 800724c:	4618      	mov	r0, r3
 800724e:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8007250:	2002      	movs	r0, #2
}
 8007252:	4770      	bx	lr
 8007254:	40002800 	.word	0x40002800

08007258 <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007258:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800725c:	2b01      	cmp	r3, #1
 800725e:	d020      	beq.n	80072a2 <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 8007260:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 8007262:	2101      	movs	r1, #1
 8007264:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007268:	2302      	movs	r3, #2
 800726a:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800726e:	4b0e      	ldr	r3, [pc, #56]	; (80072a8 <HAL_RTCEx_SetSSRU_IT+0x50>)
 8007270:	22ca      	movs	r2, #202	; 0xca
 8007272:	625a      	str	r2, [r3, #36]	; 0x24
 8007274:	2253      	movs	r2, #83	; 0x53
 8007276:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8007278:	699a      	ldr	r2, [r3, #24]
 800727a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800727e:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8007280:	4c0a      	ldr	r4, [pc, #40]	; (80072ac <HAL_RTCEx_SetSSRU_IT+0x54>)
 8007282:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8007286:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800728a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800728e:	22ff      	movs	r2, #255	; 0xff
 8007290:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007292:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007296:	2300      	movs	r3, #0
 8007298:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 800729c:	4618      	mov	r0, r3
}
 800729e:	bc10      	pop	{r4}
 80072a0:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 80072a2:	2002      	movs	r0, #2
}
 80072a4:	4770      	bx	lr
 80072a6:	bf00      	nop
 80072a8:	40002800 	.word	0x40002800
 80072ac:	58000800 	.word	0x58000800

080072b0 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80072b0:	b510      	push	{r4, lr}
 80072b2:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 80072b4:	4b07      	ldr	r3, [pc, #28]	; (80072d4 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 80072b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072b8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80072bc:	d103      	bne.n	80072c6 <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80072be:	2301      	movs	r3, #1
 80072c0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 80072c4:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 80072c6:	4b03      	ldr	r3, [pc, #12]	; (80072d4 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 80072c8:	2240      	movs	r2, #64	; 0x40
 80072ca:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 80072cc:	f7fb f8fa 	bl	80024c4 <HAL_RTCEx_SSRUEventCallback>
 80072d0:	e7f5      	b.n	80072be <HAL_RTCEx_SSRUIRQHandler+0xe>
 80072d2:	bf00      	nop
 80072d4:	40002800 	.word	0x40002800

080072d8 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80072d8:	4770      	bx	lr

080072da <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 80072da:	0089      	lsls	r1, r1, #2
 80072dc:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80072e0:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80072e4:	600a      	str	r2, [r1, #0]
}
 80072e6:	4770      	bx	lr

080072e8 <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 80072e8:	0089      	lsls	r1, r1, #2
 80072ea:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80072ee:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80072f2:	6808      	ldr	r0, [r1, #0]
}
 80072f4:	4770      	bx	lr
	...

080072f8 <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80072f8:	4b07      	ldr	r3, [pc, #28]	; (8007318 <SUBGHZSPI_Init+0x20>)
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007300:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8007302:	f440 7041 	orr.w	r0, r0, #772	; 0x304
 8007306:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8007308:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 800730c:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007314:	601a      	str	r2, [r3, #0]
}
 8007316:	4770      	bx	lr
 8007318:	58010000 	.word	0x58010000

0800731c <HAL_SUBGHZ_Init>:
{
 800731c:	b530      	push	{r4, r5, lr}
 800731e:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 8007320:	2800      	cmp	r0, #0
 8007322:	d04e      	beq.n	80073c2 <HAL_SUBGHZ_Init+0xa6>
 8007324:	4604      	mov	r4, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8007326:	7983      	ldrb	r3, [r0, #6]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d03b      	beq.n	80073a4 <HAL_SUBGHZ_Init+0x88>
  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800732c:	2302      	movs	r3, #2
 800732e:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8007330:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007334:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8007338:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800733c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007340:	4b21      	ldr	r3, [pc, #132]	; (80073c8 <HAL_SUBGHZ_Init+0xac>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007348:	f3c3 434c 	ubfx	r3, r3, #17, #13
 800734c:	2264      	movs	r2, #100	; 0x64
 800734e:	fb02 f303 	mul.w	r3, r2, r3
 8007352:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 8007354:	9b01      	ldr	r3, [sp, #4]
 8007356:	b34b      	cbz	r3, 80073ac <HAL_SUBGHZ_Init+0x90>
    count--;
 8007358:	9b01      	ldr	r3, [sp, #4]
 800735a:	3b01      	subs	r3, #1
 800735c:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 800735e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007362:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007366:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800736a:	d1f3      	bne.n	8007354 <HAL_SUBGHZ_Init+0x38>
    status = HAL_OK;
 800736c:	2500      	movs	r5, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800736e:	4b17      	ldr	r3, [pc, #92]	; (80073cc <HAL_SUBGHZ_Init+0xb0>)
 8007370:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007374:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007378:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(EXTI->IMR2, ExtiLine);
 800737c:	4914      	ldr	r1, [pc, #80]	; (80073d0 <HAL_SUBGHZ_Init+0xb4>)
 800737e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8007382:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007386:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 800738a:	689a      	ldr	r2, [r3, #8]
 800738c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007390:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8007392:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007396:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 8007398:	b15d      	cbz	r5, 80073b2 <HAL_SUBGHZ_Init+0x96>
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 800739a:	2301      	movs	r3, #1
 800739c:	71a3      	strb	r3, [r4, #6]
}
 800739e:	4628      	mov	r0, r5
 80073a0:	b003      	add	sp, #12
 80073a2:	bd30      	pop	{r4, r5, pc}
    hsubghz->Lock = HAL_UNLOCKED;
 80073a4:	7143      	strb	r3, [r0, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 80073a6:	f7fa fcb7 	bl	8001d18 <HAL_SUBGHZ_MspInit>
 80073aa:	e7bf      	b.n	800732c <HAL_SUBGHZ_Init+0x10>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80073ac:	2501      	movs	r5, #1
 80073ae:	60a5      	str	r5, [r4, #8]
      break;
 80073b0:	e7dd      	b.n	800736e <HAL_SUBGHZ_Init+0x52>
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80073b2:	6820      	ldr	r0, [r4, #0]
 80073b4:	f7ff ffa0 	bl	80072f8 <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80073b8:	2301      	movs	r3, #1
 80073ba:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80073bc:	2300      	movs	r3, #0
 80073be:	60a3      	str	r3, [r4, #8]
 80073c0:	e7eb      	b.n	800739a <HAL_SUBGHZ_Init+0x7e>
    return status;
 80073c2:	2501      	movs	r5, #1
 80073c4:	e7eb      	b.n	800739e <HAL_SUBGHZ_Init+0x82>
 80073c6:	bf00      	nop
 80073c8:	20000070 	.word	0x20000070
 80073cc:	58000400 	.word	0x58000400
 80073d0:	58000800 	.word	0x58000800

080073d4 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 80073d4:	b082      	sub	sp, #8
 80073d6:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80073d8:	4b1a      	ldr	r3, [pc, #104]	; (8007444 <SUBGHZSPI_Transmit+0x70>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80073e0:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80073e4:	2064      	movs	r0, #100	; 0x64
 80073e6:	fb00 f303 	mul.w	r3, r0, r3
 80073ea:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80073ec:	9b01      	ldr	r3, [sp, #4]
 80073ee:	b14b      	cbz	r3, 8007404 <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 80073f0:	9b01      	ldr	r3, [sp, #4]
 80073f2:	3b01      	subs	r3, #1
 80073f4:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80073f6:	4b14      	ldr	r3, [pc, #80]	; (8007448 <SUBGHZSPI_Transmit+0x74>)
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	f013 0f02 	tst.w	r3, #2
 80073fe:	d0f5      	beq.n	80073ec <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8007400:	2000      	movs	r0, #0
 8007402:	e001      	b.n	8007408 <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007404:	2001      	movs	r0, #1
 8007406:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 8007408:	4b0f      	ldr	r3, [pc, #60]	; (8007448 <SUBGHZSPI_Transmit+0x74>)
 800740a:	7319      	strb	r1, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800740c:	4b0d      	ldr	r3, [pc, #52]	; (8007444 <SUBGHZSPI_Transmit+0x70>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007414:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8007418:	2164      	movs	r1, #100	; 0x64
 800741a:	fb01 f303 	mul.w	r3, r1, r3
 800741e:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007420:	9b01      	ldr	r3, [sp, #4]
 8007422:	b143      	cbz	r3, 8007436 <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8007424:	9b01      	ldr	r3, [sp, #4]
 8007426:	3b01      	subs	r3, #1
 8007428:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800742a:	4b07      	ldr	r3, [pc, #28]	; (8007448 <SUBGHZSPI_Transmit+0x74>)
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	f013 0f01 	tst.w	r3, #1
 8007432:	d0f5      	beq.n	8007420 <SUBGHZSPI_Transmit+0x4c>
 8007434:	e001      	b.n	800743a <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007436:	2001      	movs	r0, #1
 8007438:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800743a:	4b03      	ldr	r3, [pc, #12]	; (8007448 <SUBGHZSPI_Transmit+0x74>)
 800743c:	68db      	ldr	r3, [r3, #12]

  return status;
}
 800743e:	b002      	add	sp, #8
 8007440:	4770      	bx	lr
 8007442:	bf00      	nop
 8007444:	20000070 	.word	0x20000070
 8007448:	58010000 	.word	0x58010000

0800744c <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 800744c:	b082      	sub	sp, #8
 800744e:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007450:	4b1c      	ldr	r3, [pc, #112]	; (80074c4 <SUBGHZSPI_Receive+0x78>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007458:	f3c3 434c 	ubfx	r3, r3, #17, #13
 800745c:	2064      	movs	r0, #100	; 0x64
 800745e:	fb00 f303 	mul.w	r3, r0, r3
 8007462:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007464:	9b01      	ldr	r3, [sp, #4]
 8007466:	b14b      	cbz	r3, 800747c <SUBGHZSPI_Receive+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8007468:	9b01      	ldr	r3, [sp, #4]
 800746a:	3b01      	subs	r3, #1
 800746c:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800746e:	4b16      	ldr	r3, [pc, #88]	; (80074c8 <SUBGHZSPI_Receive+0x7c>)
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	f013 0f02 	tst.w	r3, #2
 8007476:	d0f5      	beq.n	8007464 <SUBGHZSPI_Receive+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8007478:	2000      	movs	r0, #0
 800747a:	e001      	b.n	8007480 <SUBGHZSPI_Receive+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800747c:	2001      	movs	r0, #1
 800747e:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 8007480:	4b11      	ldr	r3, [pc, #68]	; (80074c8 <SUBGHZSPI_Receive+0x7c>)
 8007482:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8007486:	f883 c00c 	strb.w	ip, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800748a:	4b0e      	ldr	r3, [pc, #56]	; (80074c4 <SUBGHZSPI_Receive+0x78>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007492:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8007496:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800749a:	fb0c f303 	mul.w	r3, ip, r3
 800749e:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80074a0:	9b01      	ldr	r3, [sp, #4]
 80074a2:	b143      	cbz	r3, 80074b6 <SUBGHZSPI_Receive+0x6a>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 80074a4:	9b01      	ldr	r3, [sp, #4]
 80074a6:	3b01      	subs	r3, #1
 80074a8:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80074aa:	4b07      	ldr	r3, [pc, #28]	; (80074c8 <SUBGHZSPI_Receive+0x7c>)
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	f013 0f01 	tst.w	r3, #1
 80074b2:	d0f5      	beq.n	80074a0 <SUBGHZSPI_Receive+0x54>
 80074b4:	e001      	b.n	80074ba <SUBGHZSPI_Receive+0x6e>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80074b6:	2001      	movs	r0, #1
 80074b8:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 80074ba:	4b03      	ldr	r3, [pc, #12]	; (80074c8 <SUBGHZSPI_Receive+0x7c>)
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	700b      	strb	r3, [r1, #0]

  return status;
}
 80074c0:	b002      	add	sp, #8
 80074c2:	4770      	bx	lr
 80074c4:	20000070 	.word	0x20000070
 80074c8:	58010000 	.word	0x58010000

080074cc <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80074cc:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80074ce:	4b13      	ldr	r3, [pc, #76]	; (800751c <SUBGHZ_WaitOnBusy+0x50>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80074d6:	f3c3 434b 	ubfx	r3, r3, #17, #12
 80074da:	2264      	movs	r2, #100	; 0x64
 80074dc:	fb02 f303 	mul.w	r3, r2, r3
 80074e0:	9301      	str	r3, [sp, #4]
 80074e2:	e006      	b.n	80074f2 <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80074e4:	2302      	movs	r3, #2
 80074e6:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 80074e8:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 80074ea:	b002      	add	sp, #8
 80074ec:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80074ee:	4213      	tst	r3, r2
 80074f0:	d012      	beq.n	8007518 <SUBGHZ_WaitOnBusy+0x4c>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80074f2:	4b0b      	ldr	r3, [pc, #44]	; (8007520 <SUBGHZ_WaitOnBusy+0x54>)
 80074f4:	695b      	ldr	r3, [r3, #20]
 80074f6:	f013 0304 	ands.w	r3, r3, #4
 80074fa:	d000      	beq.n	80074fe <SUBGHZ_WaitOnBusy+0x32>
 80074fc:	2301      	movs	r3, #1
    if (count == 0U)
 80074fe:	9a01      	ldr	r2, [sp, #4]
 8007500:	2a00      	cmp	r2, #0
 8007502:	d0ef      	beq.n	80074e4 <SUBGHZ_WaitOnBusy+0x18>
    count--;
 8007504:	9a01      	ldr	r2, [sp, #4]
 8007506:	3a01      	subs	r2, #1
 8007508:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 800750a:	4a05      	ldr	r2, [pc, #20]	; (8007520 <SUBGHZ_WaitOnBusy+0x54>)
 800750c:	6952      	ldr	r2, [r2, #20]
 800750e:	f012 0202 	ands.w	r2, r2, #2
 8007512:	d0ec      	beq.n	80074ee <SUBGHZ_WaitOnBusy+0x22>
 8007514:	2201      	movs	r2, #1
 8007516:	e7ea      	b.n	80074ee <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 8007518:	2000      	movs	r0, #0
 800751a:	e7e6      	b.n	80074ea <SUBGHZ_WaitOnBusy+0x1e>
 800751c:	20000070 	.word	0x20000070
 8007520:	58000400 	.word	0x58000400

08007524 <SUBGHZ_CheckDeviceReady>:
{
 8007524:	b500      	push	{lr}
 8007526:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8007528:	7903      	ldrb	r3, [r0, #4]
 800752a:	2b01      	cmp	r3, #1
 800752c:	d004      	beq.n	8007538 <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800752e:	f7ff ffcd 	bl	80074cc <SUBGHZ_WaitOnBusy>
}
 8007532:	b003      	add	sp, #12
 8007534:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 8007538:	4b0d      	ldr	r3, [pc, #52]	; (8007570 <SUBGHZ_CheckDeviceReady+0x4c>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007540:	f3c3 334f 	ubfx	r3, r3, #13, #16
 8007544:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007546:	4a0b      	ldr	r2, [pc, #44]	; (8007574 <SUBGHZ_CheckDeviceReady+0x50>)
 8007548:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800754c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007550:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      count--;
 8007554:	9b01      	ldr	r3, [sp, #4]
 8007556:	3b01      	subs	r3, #1
 8007558:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 800755a:	9b01      	ldr	r3, [sp, #4]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d1f9      	bne.n	8007554 <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007560:	4a04      	ldr	r2, [pc, #16]	; (8007574 <SUBGHZ_CheckDeviceReady+0x50>)
 8007562:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800756a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800756e:	e7de      	b.n	800752e <SUBGHZ_CheckDeviceReady+0xa>
 8007570:	20000070 	.word	0x20000070
 8007574:	58000400 	.word	0x58000400

08007578 <HAL_SUBGHZ_WriteRegisters>:
{
 8007578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800757c:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800757e:	7980      	ldrb	r0, [r0, #6]
 8007580:	fa5f f880 	uxtb.w	r8, r0
 8007584:	f1b8 0f01 	cmp.w	r8, #1
 8007588:	d13e      	bne.n	8007608 <HAL_SUBGHZ_WriteRegisters+0x90>
 800758a:	460c      	mov	r4, r1
 800758c:	4617      	mov	r7, r2
 800758e:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8007590:	796b      	ldrb	r3, [r5, #5]
 8007592:	2b01      	cmp	r3, #1
 8007594:	d03b      	beq.n	800760e <HAL_SUBGHZ_WriteRegisters+0x96>
 8007596:	2301      	movs	r3, #1
 8007598:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800759a:	2302      	movs	r3, #2
 800759c:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800759e:	4628      	mov	r0, r5
 80075a0:	f7ff ffc0 	bl	8007524 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80075a4:	4a1b      	ldr	r2, [pc, #108]	; (8007614 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 80075a6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80075aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80075ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80075b2:	210d      	movs	r1, #13
 80075b4:	4628      	mov	r0, r5
 80075b6:	f7ff ff0d 	bl	80073d4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80075ba:	0a21      	lsrs	r1, r4, #8
 80075bc:	4628      	mov	r0, r5
 80075be:	f7ff ff09 	bl	80073d4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80075c2:	b2e1      	uxtb	r1, r4
 80075c4:	4628      	mov	r0, r5
 80075c6:	f7ff ff05 	bl	80073d4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80075ca:	2400      	movs	r4, #0
 80075cc:	e005      	b.n	80075da <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80075ce:	5d39      	ldrb	r1, [r7, r4]
 80075d0:	4628      	mov	r0, r5
 80075d2:	f7ff feff 	bl	80073d4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80075d6:	3401      	adds	r4, #1
 80075d8:	b2a4      	uxth	r4, r4
 80075da:	42b4      	cmp	r4, r6
 80075dc:	d3f7      	bcc.n	80075ce <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80075de:	4a0d      	ldr	r2, [pc, #52]	; (8007614 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 80075e0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80075e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80075ec:	4628      	mov	r0, r5
 80075ee:	f7ff ff6d 	bl	80074cc <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80075f2:	68ab      	ldr	r3, [r5, #8]
 80075f4:	b90b      	cbnz	r3, 80075fa <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 80075f6:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80075fa:	2301      	movs	r3, #1
 80075fc:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 80075fe:	2300      	movs	r3, #0
 8007600:	716b      	strb	r3, [r5, #5]
}
 8007602:	4640      	mov	r0, r8
 8007604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8007608:	f04f 0802 	mov.w	r8, #2
 800760c:	e7f9      	b.n	8007602 <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 800760e:	f04f 0802 	mov.w	r8, #2
 8007612:	e7f6      	b.n	8007602 <HAL_SUBGHZ_WriteRegisters+0x8a>
 8007614:	58000400 	.word	0x58000400

08007618 <HAL_SUBGHZ_ReadRegisters>:
{
 8007618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800761c:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800761e:	7980      	ldrb	r0, [r0, #6]
 8007620:	fa5f f880 	uxtb.w	r8, r0
 8007624:	f1b8 0f01 	cmp.w	r8, #1
 8007628:	d141      	bne.n	80076ae <HAL_SUBGHZ_ReadRegisters+0x96>
 800762a:	460c      	mov	r4, r1
 800762c:	4615      	mov	r5, r2
 800762e:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8007630:	7973      	ldrb	r3, [r6, #5]
 8007632:	2b01      	cmp	r3, #1
 8007634:	d03e      	beq.n	80076b4 <HAL_SUBGHZ_ReadRegisters+0x9c>
 8007636:	2301      	movs	r3, #1
 8007638:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800763a:	4630      	mov	r0, r6
 800763c:	f7ff ff72 	bl	8007524 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007640:	4a1e      	ldr	r2, [pc, #120]	; (80076bc <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8007642:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007646:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800764a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 800764e:	211d      	movs	r1, #29
 8007650:	4630      	mov	r0, r6
 8007652:	f7ff febf 	bl	80073d4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007656:	0a21      	lsrs	r1, r4, #8
 8007658:	4630      	mov	r0, r6
 800765a:	f7ff febb 	bl	80073d4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800765e:	b2e1      	uxtb	r1, r4
 8007660:	4630      	mov	r0, r6
 8007662:	f7ff feb7 	bl	80073d4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8007666:	2100      	movs	r1, #0
 8007668:	4630      	mov	r0, r6
 800766a:	f7ff feb3 	bl	80073d4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800766e:	2400      	movs	r4, #0
 8007670:	e006      	b.n	8007680 <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007672:	4629      	mov	r1, r5
 8007674:	4630      	mov	r0, r6
 8007676:	f7ff fee9 	bl	800744c <SUBGHZSPI_Receive>
      pData++;
 800767a:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 800767c:	3401      	adds	r4, #1
 800767e:	b2a4      	uxth	r4, r4
 8007680:	42bc      	cmp	r4, r7
 8007682:	d3f6      	bcc.n	8007672 <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007684:	4a0d      	ldr	r2, [pc, #52]	; (80076bc <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8007686:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800768a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800768e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007692:	4630      	mov	r0, r6
 8007694:	f7ff ff1a 	bl	80074cc <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007698:	68b3      	ldr	r3, [r6, #8]
 800769a:	b90b      	cbnz	r3, 80076a0 <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 800769c:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80076a0:	2301      	movs	r3, #1
 80076a2:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 80076a4:	2300      	movs	r3, #0
 80076a6:	7173      	strb	r3, [r6, #5]
}
 80076a8:	4640      	mov	r0, r8
 80076aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80076ae:	f04f 0802 	mov.w	r8, #2
 80076b2:	e7f9      	b.n	80076a8 <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 80076b4:	f04f 0802 	mov.w	r8, #2
 80076b8:	e7f6      	b.n	80076a8 <HAL_SUBGHZ_ReadRegisters+0x90>
 80076ba:	bf00      	nop
 80076bc:	58000400 	.word	0x58000400

080076c0 <HAL_SUBGHZ_ExecSetCmd>:
{
 80076c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076c4:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80076c6:	7980      	ldrb	r0, [r0, #6]
 80076c8:	fa5f f980 	uxtb.w	r9, r0
 80076cc:	f1b9 0f01 	cmp.w	r9, #1
 80076d0:	d143      	bne.n	800775a <HAL_SUBGHZ_ExecSetCmd+0x9a>
 80076d2:	4688      	mov	r8, r1
 80076d4:	4617      	mov	r7, r2
 80076d6:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 80076d8:	796b      	ldrb	r3, [r5, #5]
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d040      	beq.n	8007760 <HAL_SUBGHZ_ExecSetCmd+0xa0>
 80076de:	2301      	movs	r3, #1
 80076e0:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80076e2:	4628      	mov	r0, r5
 80076e4:	f7ff ff1e 	bl	8007524 <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80076e8:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 80076ec:	d005      	beq.n	80076fa <HAL_SUBGHZ_ExecSetCmd+0x3a>
 80076ee:	f1b8 0f94 	cmp.w	r8, #148	; 0x94
 80076f2:	d002      	beq.n	80076fa <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80076f4:	2300      	movs	r3, #0
 80076f6:	712b      	strb	r3, [r5, #4]
 80076f8:	e001      	b.n	80076fe <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80076fa:	2301      	movs	r3, #1
 80076fc:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80076fe:	4a1a      	ldr	r2, [pc, #104]	; (8007768 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8007700:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007704:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007708:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800770c:	4641      	mov	r1, r8
 800770e:	4628      	mov	r0, r5
 8007710:	f7ff fe60 	bl	80073d4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007714:	2400      	movs	r4, #0
 8007716:	e005      	b.n	8007724 <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007718:	5d39      	ldrb	r1, [r7, r4]
 800771a:	4628      	mov	r0, r5
 800771c:	f7ff fe5a 	bl	80073d4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007720:	3401      	adds	r4, #1
 8007722:	b2a4      	uxth	r4, r4
 8007724:	42b4      	cmp	r4, r6
 8007726:	d3f7      	bcc.n	8007718 <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007728:	4a0f      	ldr	r2, [pc, #60]	; (8007768 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 800772a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800772e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007732:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if (Command != RADIO_SET_SLEEP)
 8007736:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 800773a:	d10a      	bne.n	8007752 <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800773c:	68ab      	ldr	r3, [r5, #8]
 800773e:	b90b      	cbnz	r3, 8007744 <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 8007740:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007744:	2301      	movs	r3, #1
 8007746:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8007748:	2300      	movs	r3, #0
 800774a:	716b      	strb	r3, [r5, #5]
}
 800774c:	4648      	mov	r0, r9
 800774e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007752:	4628      	mov	r0, r5
 8007754:	f7ff feba 	bl	80074cc <SUBGHZ_WaitOnBusy>
 8007758:	e7f0      	b.n	800773c <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 800775a:	f04f 0902 	mov.w	r9, #2
 800775e:	e7f5      	b.n	800774c <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 8007760:	f04f 0902 	mov.w	r9, #2
 8007764:	e7f2      	b.n	800774c <HAL_SUBGHZ_ExecSetCmd+0x8c>
 8007766:	bf00      	nop
 8007768:	58000400 	.word	0x58000400

0800776c <HAL_SUBGHZ_ExecGetCmd>:
{
 800776c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007770:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007772:	7980      	ldrb	r0, [r0, #6]
 8007774:	fa5f f880 	uxtb.w	r8, r0
 8007778:	f1b8 0f01 	cmp.w	r8, #1
 800777c:	d139      	bne.n	80077f2 <HAL_SUBGHZ_ExecGetCmd+0x86>
 800777e:	460c      	mov	r4, r1
 8007780:	4615      	mov	r5, r2
 8007782:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8007784:	7973      	ldrb	r3, [r6, #5]
 8007786:	2b01      	cmp	r3, #1
 8007788:	d036      	beq.n	80077f8 <HAL_SUBGHZ_ExecGetCmd+0x8c>
 800778a:	2301      	movs	r3, #1
 800778c:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800778e:	4630      	mov	r0, r6
 8007790:	f7ff fec8 	bl	8007524 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007794:	4a1a      	ldr	r2, [pc, #104]	; (8007800 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8007796:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800779a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800779e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80077a2:	4621      	mov	r1, r4
 80077a4:	4630      	mov	r0, r6
 80077a6:	f7ff fe15 	bl	80073d4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80077aa:	2100      	movs	r1, #0
 80077ac:	4630      	mov	r0, r6
 80077ae:	f7ff fe11 	bl	80073d4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80077b2:	2400      	movs	r4, #0
 80077b4:	e006      	b.n	80077c4 <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80077b6:	4629      	mov	r1, r5
 80077b8:	4630      	mov	r0, r6
 80077ba:	f7ff fe47 	bl	800744c <SUBGHZSPI_Receive>
      pData++;
 80077be:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 80077c0:	3401      	adds	r4, #1
 80077c2:	b2a4      	uxth	r4, r4
 80077c4:	42bc      	cmp	r4, r7
 80077c6:	d3f6      	bcc.n	80077b6 <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80077c8:	4a0d      	ldr	r2, [pc, #52]	; (8007800 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 80077ca:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80077ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80077d6:	4630      	mov	r0, r6
 80077d8:	f7ff fe78 	bl	80074cc <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80077dc:	68b3      	ldr	r3, [r6, #8]
 80077de:	b90b      	cbnz	r3, 80077e4 <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 80077e0:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80077e4:	2301      	movs	r3, #1
 80077e6:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 80077e8:	2300      	movs	r3, #0
 80077ea:	7173      	strb	r3, [r6, #5]
}
 80077ec:	4640      	mov	r0, r8
 80077ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80077f2:	f04f 0802 	mov.w	r8, #2
 80077f6:	e7f9      	b.n	80077ec <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 80077f8:	f04f 0802 	mov.w	r8, #2
 80077fc:	e7f6      	b.n	80077ec <HAL_SUBGHZ_ExecGetCmd+0x80>
 80077fe:	bf00      	nop
 8007800:	58000400 	.word	0x58000400

08007804 <HAL_SUBGHZ_IRQHandler>:
{
 8007804:	b530      	push	{r4, r5, lr}
 8007806:	b083      	sub	sp, #12
 8007808:	4605      	mov	r5, r0
  uint8_t tmpisr[2U] = {0U};
 800780a:	2300      	movs	r3, #0
 800780c:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8007810:	2302      	movs	r3, #2
 8007812:	aa01      	add	r2, sp, #4
 8007814:	2112      	movs	r1, #18
 8007816:	f7ff ffa9 	bl	800776c <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800781a:	f89d 4004 	ldrb.w	r4, [sp, #4]
  itsource = (itsource << 8U) | tmpisr[1U];
 800781e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007822:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8007826:	f013 0f01 	tst.w	r3, #1
 800782a:	d126      	bne.n	800787a <HAL_SUBGHZ_IRQHandler+0x76>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 800782c:	f014 0f02 	tst.w	r4, #2
 8007830:	d127      	bne.n	8007882 <HAL_SUBGHZ_IRQHandler+0x7e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8007832:	f014 0f04 	tst.w	r4, #4
 8007836:	d128      	bne.n	800788a <HAL_SUBGHZ_IRQHandler+0x86>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8007838:	f014 0f08 	tst.w	r4, #8
 800783c:	d129      	bne.n	8007892 <HAL_SUBGHZ_IRQHandler+0x8e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 800783e:	f014 0f10 	tst.w	r4, #16
 8007842:	d12a      	bne.n	800789a <HAL_SUBGHZ_IRQHandler+0x96>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8007844:	f014 0f20 	tst.w	r4, #32
 8007848:	d12b      	bne.n	80078a2 <HAL_SUBGHZ_IRQHandler+0x9e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 800784a:	f014 0f40 	tst.w	r4, #64	; 0x40
 800784e:	d12c      	bne.n	80078aa <HAL_SUBGHZ_IRQHandler+0xa6>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8007850:	f014 0f80 	tst.w	r4, #128	; 0x80
 8007854:	d006      	beq.n	8007864 <HAL_SUBGHZ_IRQHandler+0x60>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8007856:	f414 7f80 	tst.w	r4, #256	; 0x100
 800785a:	d02a      	beq.n	80078b2 <HAL_SUBGHZ_IRQHandler+0xae>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800785c:	2101      	movs	r1, #1
 800785e:	4628      	mov	r0, r5
 8007860:	f00b f972 	bl	8012b48 <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8007864:	f414 7f00 	tst.w	r4, #512	; 0x200
 8007868:	d128      	bne.n	80078bc <HAL_SUBGHZ_IRQHandler+0xb8>
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 800786a:	2302      	movs	r3, #2
 800786c:	aa01      	add	r2, sp, #4
 800786e:	4619      	mov	r1, r3
 8007870:	4628      	mov	r0, r5
 8007872:	f7ff ff25 	bl	80076c0 <HAL_SUBGHZ_ExecSetCmd>
}
 8007876:	b003      	add	sp, #12
 8007878:	bd30      	pop	{r4, r5, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 800787a:	4628      	mov	r0, r5
 800787c:	f00b f94c 	bl	8012b18 <HAL_SUBGHZ_TxCpltCallback>
 8007880:	e7d4      	b.n	800782c <HAL_SUBGHZ_IRQHandler+0x28>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8007882:	4628      	mov	r0, r5
 8007884:	f00b f950 	bl	8012b28 <HAL_SUBGHZ_RxCpltCallback>
 8007888:	e7d3      	b.n	8007832 <HAL_SUBGHZ_IRQHandler+0x2e>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 800788a:	4628      	mov	r0, r5
 800788c:	f00b f980 	bl	8012b90 <HAL_SUBGHZ_PreambleDetectedCallback>
 8007890:	e7d2      	b.n	8007838 <HAL_SUBGHZ_IRQHandler+0x34>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8007892:	4628      	mov	r0, r5
 8007894:	f00b f984 	bl	8012ba0 <HAL_SUBGHZ_SyncWordValidCallback>
 8007898:	e7d1      	b.n	800783e <HAL_SUBGHZ_IRQHandler+0x3a>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800789a:	4628      	mov	r0, r5
 800789c:	f00b f988 	bl	8012bb0 <HAL_SUBGHZ_HeaderValidCallback>
 80078a0:	e7d0      	b.n	8007844 <HAL_SUBGHZ_IRQHandler+0x40>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 80078a2:	4628      	mov	r0, r5
 80078a4:	f00b f96c 	bl	8012b80 <HAL_SUBGHZ_HeaderErrorCallback>
 80078a8:	e7cf      	b.n	800784a <HAL_SUBGHZ_IRQHandler+0x46>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 80078aa:	4628      	mov	r0, r5
 80078ac:	f00b f944 	bl	8012b38 <HAL_SUBGHZ_CRCErrorCallback>
 80078b0:	e7ce      	b.n	8007850 <HAL_SUBGHZ_IRQHandler+0x4c>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 80078b2:	2100      	movs	r1, #0
 80078b4:	4628      	mov	r0, r5
 80078b6:	f00b f947 	bl	8012b48 <HAL_SUBGHZ_CADStatusCallback>
 80078ba:	e7d3      	b.n	8007864 <HAL_SUBGHZ_IRQHandler+0x60>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80078bc:	4628      	mov	r0, r5
 80078be:	f00b f955 	bl	8012b6c <HAL_SUBGHZ_RxTxTimeoutCallback>
 80078c2:	e7d2      	b.n	800786a <HAL_SUBGHZ_IRQHandler+0x66>

080078c4 <HAL_SUBGHZ_WriteBuffer>:
{
 80078c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078c8:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80078ca:	7980      	ldrb	r0, [r0, #6]
 80078cc:	fa5f f880 	uxtb.w	r8, r0
 80078d0:	f1b8 0f01 	cmp.w	r8, #1
 80078d4:	d138      	bne.n	8007948 <HAL_SUBGHZ_WriteBuffer+0x84>
 80078d6:	460c      	mov	r4, r1
 80078d8:	4617      	mov	r7, r2
 80078da:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 80078dc:	796b      	ldrb	r3, [r5, #5]
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d035      	beq.n	800794e <HAL_SUBGHZ_WriteBuffer+0x8a>
 80078e2:	2301      	movs	r3, #1
 80078e4:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80078e6:	4628      	mov	r0, r5
 80078e8:	f7ff fe1c 	bl	8007524 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80078ec:	4a19      	ldr	r2, [pc, #100]	; (8007954 <HAL_SUBGHZ_WriteBuffer+0x90>)
 80078ee:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80078f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80078f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80078fa:	210e      	movs	r1, #14
 80078fc:	4628      	mov	r0, r5
 80078fe:	f7ff fd69 	bl	80073d4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007902:	4621      	mov	r1, r4
 8007904:	4628      	mov	r0, r5
 8007906:	f7ff fd65 	bl	80073d4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800790a:	2400      	movs	r4, #0
 800790c:	e005      	b.n	800791a <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800790e:	5d39      	ldrb	r1, [r7, r4]
 8007910:	4628      	mov	r0, r5
 8007912:	f7ff fd5f 	bl	80073d4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007916:	3401      	adds	r4, #1
 8007918:	b2a4      	uxth	r4, r4
 800791a:	42b4      	cmp	r4, r6
 800791c:	d3f7      	bcc.n	800790e <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800791e:	4a0d      	ldr	r2, [pc, #52]	; (8007954 <HAL_SUBGHZ_WriteBuffer+0x90>)
 8007920:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007924:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007928:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800792c:	4628      	mov	r0, r5
 800792e:	f7ff fdcd 	bl	80074cc <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007932:	68ab      	ldr	r3, [r5, #8]
 8007934:	b90b      	cbnz	r3, 800793a <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 8007936:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800793a:	2301      	movs	r3, #1
 800793c:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 800793e:	2300      	movs	r3, #0
 8007940:	716b      	strb	r3, [r5, #5]
}
 8007942:	4640      	mov	r0, r8
 8007944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8007948:	f04f 0802 	mov.w	r8, #2
 800794c:	e7f9      	b.n	8007942 <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 800794e:	f04f 0802 	mov.w	r8, #2
 8007952:	e7f6      	b.n	8007942 <HAL_SUBGHZ_WriteBuffer+0x7e>
 8007954:	58000400 	.word	0x58000400

08007958 <HAL_SUBGHZ_ReadBuffer>:
{
 8007958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800795c:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800795e:	7980      	ldrb	r0, [r0, #6]
 8007960:	fa5f f880 	uxtb.w	r8, r0
 8007964:	f1b8 0f01 	cmp.w	r8, #1
 8007968:	d13d      	bne.n	80079e6 <HAL_SUBGHZ_ReadBuffer+0x8e>
 800796a:	460c      	mov	r4, r1
 800796c:	4615      	mov	r5, r2
 800796e:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8007970:	7973      	ldrb	r3, [r6, #5]
 8007972:	2b01      	cmp	r3, #1
 8007974:	d03a      	beq.n	80079ec <HAL_SUBGHZ_ReadBuffer+0x94>
 8007976:	2301      	movs	r3, #1
 8007978:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800797a:	4630      	mov	r0, r6
 800797c:	f7ff fdd2 	bl	8007524 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007980:	4a1c      	ldr	r2, [pc, #112]	; (80079f4 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8007982:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007986:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800798a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800798e:	211e      	movs	r1, #30
 8007990:	4630      	mov	r0, r6
 8007992:	f7ff fd1f 	bl	80073d4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007996:	4621      	mov	r1, r4
 8007998:	4630      	mov	r0, r6
 800799a:	f7ff fd1b 	bl	80073d4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800799e:	2100      	movs	r1, #0
 80079a0:	4630      	mov	r0, r6
 80079a2:	f7ff fd17 	bl	80073d4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80079a6:	2400      	movs	r4, #0
 80079a8:	e006      	b.n	80079b8 <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80079aa:	4629      	mov	r1, r5
 80079ac:	4630      	mov	r0, r6
 80079ae:	f7ff fd4d 	bl	800744c <SUBGHZSPI_Receive>
      pData++;
 80079b2:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 80079b4:	3401      	adds	r4, #1
 80079b6:	b2a4      	uxth	r4, r4
 80079b8:	42bc      	cmp	r4, r7
 80079ba:	d3f6      	bcc.n	80079aa <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80079bc:	4a0d      	ldr	r2, [pc, #52]	; (80079f4 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 80079be:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80079c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80079ca:	4630      	mov	r0, r6
 80079cc:	f7ff fd7e 	bl	80074cc <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80079d0:	68b3      	ldr	r3, [r6, #8]
 80079d2:	b90b      	cbnz	r3, 80079d8 <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 80079d4:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80079d8:	2301      	movs	r3, #1
 80079da:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 80079dc:	2300      	movs	r3, #0
 80079de:	7173      	strb	r3, [r6, #5]
}
 80079e0:	4640      	mov	r0, r8
 80079e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80079e6:	f04f 0802 	mov.w	r8, #2
 80079ea:	e7f9      	b.n	80079e0 <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 80079ec:	f04f 0802 	mov.w	r8, #2
 80079f0:	e7f6      	b.n	80079e0 <HAL_SUBGHZ_ReadBuffer+0x88>
 80079f2:	bf00      	nop
 80079f4:	58000400 	.word	0x58000400

080079f8 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80079f8:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fa:	e852 3f00 	ldrex	r3, [r2]
 80079fe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a02:	e842 3100 	strex	r1, r3, [r2]
 8007a06:	2900      	cmp	r1, #0
 8007a08:	d1f6      	bne.n	80079f8 <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007a0a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a0c:	f102 0308 	add.w	r3, r2, #8
 8007a10:	e853 3f00 	ldrex	r3, [r3]
 8007a14:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a18:	3208      	adds	r2, #8
 8007a1a:	e842 3100 	strex	r1, r3, [r2]
 8007a1e:	2900      	cmp	r1, #0
 8007a20:	d1f3      	bne.n	8007a0a <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a22:	2320      	movs	r3, #32
 8007a24:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
}
 8007a28:	4770      	bx	lr

08007a2a <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a2a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2c:	e852 3f00 	ldrex	r3, [r2]
 8007a30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a34:	e842 3100 	strex	r1, r3, [r2]
 8007a38:	2900      	cmp	r1, #0
 8007a3a:	d1f6      	bne.n	8007a2a <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007a3c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a3e:	f102 0308 	add.w	r3, r2, #8
 8007a42:	e853 3f00 	ldrex	r3, [r3]
 8007a46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a4a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4e:	3208      	adds	r2, #8
 8007a50:	e842 3100 	strex	r1, r3, [r2]
 8007a54:	2900      	cmp	r1, #0
 8007a56:	d1f1      	bne.n	8007a3c <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a58:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d006      	beq.n	8007a6c <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a5e:	2320      	movs	r3, #32
 8007a60:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a64:	2300      	movs	r3, #0
 8007a66:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007a68:	6703      	str	r3, [r0, #112]	; 0x70
}
 8007a6a:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a6c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6e:	e852 3f00 	ldrex	r3, [r2]
 8007a72:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a76:	e842 3100 	strex	r1, r3, [r2]
 8007a7a:	2900      	cmp	r1, #0
 8007a7c:	d1f6      	bne.n	8007a6c <UART_EndRxTransfer+0x42>
 8007a7e:	e7ee      	b.n	8007a5e <UART_EndRxTransfer+0x34>

08007a80 <HAL_UART_Transmit_DMA>:
  if (huart->gState == HAL_UART_STATE_READY)
 8007a80:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8007a84:	2b20      	cmp	r3, #32
 8007a86:	d14c      	bne.n	8007b22 <HAL_UART_Transmit_DMA+0xa2>
{
 8007a88:	b510      	push	{r4, lr}
 8007a8a:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8007a8c:	2900      	cmp	r1, #0
 8007a8e:	d04a      	beq.n	8007b26 <HAL_UART_Transmit_DMA+0xa6>
 8007a90:	2a00      	cmp	r2, #0
 8007a92:	d04a      	beq.n	8007b2a <HAL_UART_Transmit_DMA+0xaa>
    __HAL_LOCK(huart);
 8007a94:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d048      	beq.n	8007b2e <HAL_UART_Transmit_DMA+0xae>
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->pTxBuffPtr  = pData;
 8007aa2:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007aa4:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 8007aa8:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aac:	2300      	movs	r3, #0
 8007aae:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ab2:	2321      	movs	r3, #33	; 0x21
 8007ab4:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    if (huart->hdmatx != NULL)
 8007ab8:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8007aba:	b1f3      	cbz	r3, 8007afa <HAL_UART_Transmit_DMA+0x7a>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007abc:	491d      	ldr	r1, [pc, #116]	; (8007b34 <HAL_UART_Transmit_DMA+0xb4>)
 8007abe:	62d9      	str	r1, [r3, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007ac0:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8007ac2:	491d      	ldr	r1, [pc, #116]	; (8007b38 <HAL_UART_Transmit_DMA+0xb8>)
 8007ac4:	6319      	str	r1, [r3, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007ac6:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8007ac8:	491c      	ldr	r1, [pc, #112]	; (8007b3c <HAL_UART_Transmit_DMA+0xbc>)
 8007aca:	6359      	str	r1, [r3, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 8007acc:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8007ace:	2100      	movs	r1, #0
 8007ad0:	6399      	str	r1, [r3, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007ad2:	6801      	ldr	r1, [r0, #0]
 8007ad4:	4613      	mov	r3, r2
 8007ad6:	f101 0228 	add.w	r2, r1, #40	; 0x28
 8007ada:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8007adc:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8007ade:	f7fd fa3f 	bl	8004f60 <HAL_DMA_Start_IT>
 8007ae2:	b150      	cbz	r0, 8007afa <HAL_UART_Transmit_DMA+0x7a>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007ae4:	2310      	movs	r3, #16
 8007ae6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 8007aea:	2300      	movs	r3, #0
 8007aec:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 8007af0:	2320      	movs	r3, #32
 8007af2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        return HAL_ERROR;
 8007af6:	2001      	movs	r0, #1
 8007af8:	e012      	b.n	8007b20 <HAL_UART_Transmit_DMA+0xa0>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007afa:	6823      	ldr	r3, [r4, #0]
 8007afc:	2240      	movs	r2, #64	; 0x40
 8007afe:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8007b00:	2300      	movs	r3, #0
 8007b02:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007b06:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b08:	f102 0308 	add.w	r3, r2, #8
 8007b0c:	e853 3f00 	ldrex	r3, [r3]
 8007b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b14:	3208      	adds	r2, #8
 8007b16:	e842 3100 	strex	r1, r3, [r2]
 8007b1a:	2900      	cmp	r1, #0
 8007b1c:	d1f3      	bne.n	8007b06 <HAL_UART_Transmit_DMA+0x86>
    return HAL_OK;
 8007b1e:	2000      	movs	r0, #0
}
 8007b20:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8007b22:	2002      	movs	r0, #2
}
 8007b24:	4770      	bx	lr
      return HAL_ERROR;
 8007b26:	2001      	movs	r0, #1
 8007b28:	e7fa      	b.n	8007b20 <HAL_UART_Transmit_DMA+0xa0>
 8007b2a:	2001      	movs	r0, #1
 8007b2c:	e7f8      	b.n	8007b20 <HAL_UART_Transmit_DMA+0xa0>
    __HAL_LOCK(huart);
 8007b2e:	2002      	movs	r0, #2
 8007b30:	e7f6      	b.n	8007b20 <HAL_UART_Transmit_DMA+0xa0>
 8007b32:	bf00      	nop
 8007b34:	08007b41 	.word	0x08007b41
 8007b38:	08007baf 	.word	0x08007baf
 8007b3c:	08007bbb 	.word	0x08007bbb

08007b40 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007b40:	b508      	push	{r3, lr}
 8007b42:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b44:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f013 0f20 	tst.w	r3, #32
 8007b4e:	d118      	bne.n	8007b82 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8007b50:	2300      	movs	r3, #0
 8007b52:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007b56:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b58:	f102 0308 	add.w	r3, r2, #8
 8007b5c:	e853 3f00 	ldrex	r3, [r3]
 8007b60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b64:	3208      	adds	r2, #8
 8007b66:	e842 3100 	strex	r1, r3, [r2]
 8007b6a:	2900      	cmp	r1, #0
 8007b6c:	d1f3      	bne.n	8007b56 <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b6e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b70:	e852 3f00 	ldrex	r3, [r2]
 8007b74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b78:	e842 3100 	strex	r1, r3, [r2]
 8007b7c:	2900      	cmp	r1, #0
 8007b7e:	d1f6      	bne.n	8007b6e <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007b80:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8007b82:	f7fa fddf 	bl	8002744 <HAL_UART_TxCpltCallback>
}
 8007b86:	e7fb      	b.n	8007b80 <UART_DMATransmitCplt+0x40>

08007b88 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b88:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b8a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b8c:	e852 3f00 	ldrex	r3, [r2]
 8007b90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b94:	e842 3100 	strex	r1, r3, [r2]
 8007b98:	2900      	cmp	r1, #0
 8007b9a:	d1f6      	bne.n	8007b8a <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b9c:	2320      	movs	r3, #32
 8007b9e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	6743      	str	r3, [r0, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ba6:	f7fa fdcd 	bl	8002744 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007baa:	bd08      	pop	{r3, pc}

08007bac <HAL_UART_TxHalfCpltCallback>:
}
 8007bac:	4770      	bx	lr

08007bae <UART_DMATxHalfCplt>:
{
 8007bae:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8007bb0:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8007bb2:	f7ff fffb 	bl	8007bac <HAL_UART_TxHalfCpltCallback>
}
 8007bb6:	bd08      	pop	{r3, pc}

08007bb8 <HAL_UART_ErrorCallback>:
}
 8007bb8:	4770      	bx	lr

08007bba <UART_DMAError>:
{
 8007bba:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007bbc:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007bbe:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007bc2:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007bc6:	6823      	ldr	r3, [r4, #0]
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007bce:	d001      	beq.n	8007bd4 <UART_DMAError+0x1a>
 8007bd0:	2a21      	cmp	r2, #33	; 0x21
 8007bd2:	d010      	beq.n	8007bf6 <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007bd4:	6823      	ldr	r3, [r4, #0]
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007bdc:	d001      	beq.n	8007be2 <UART_DMAError+0x28>
 8007bde:	2d22      	cmp	r5, #34	; 0x22
 8007be0:	d010      	beq.n	8007c04 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007be2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007be6:	f043 0310 	orr.w	r3, r3, #16
 8007bea:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  HAL_UART_ErrorCallback(huart);
 8007bee:	4620      	mov	r0, r4
 8007bf0:	f7ff ffe2 	bl	8007bb8 <HAL_UART_ErrorCallback>
}
 8007bf4:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8007bfc:	4620      	mov	r0, r4
 8007bfe:	f7ff fefb 	bl	80079f8 <UART_EndTxTransfer>
 8007c02:	e7e7      	b.n	8007bd4 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 8007c04:	2300      	movs	r3, #0
 8007c06:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8007c0a:	4620      	mov	r0, r4
 8007c0c:	f7ff ff0d 	bl	8007a2a <UART_EndRxTransfer>
 8007c10:	e7e7      	b.n	8007be2 <UART_DMAError+0x28>

08007c12 <UART_DMAAbortOnError>:
{
 8007c12:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c14:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8007c16:	2300      	movs	r3, #0
 8007c18:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007c1c:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8007c20:	f7ff ffca 	bl	8007bb8 <HAL_UART_ErrorCallback>
}
 8007c24:	bd08      	pop	{r3, pc}

08007c26 <HAL_UARTEx_RxEventCallback>:
}
 8007c26:	4770      	bx	lr

08007c28 <HAL_UART_IRQHandler>:
{
 8007c28:	b570      	push	{r4, r5, r6, lr}
 8007c2a:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007c2c:	6801      	ldr	r1, [r0, #0]
 8007c2e:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007c30:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007c32:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007c34:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 8007c38:	401a      	ands	r2, r3
 8007c3a:	d108      	bne.n	8007c4e <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007c3c:	f013 0f20 	tst.w	r3, #32
 8007c40:	d005      	beq.n	8007c4e <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007c42:	f010 0f20 	tst.w	r0, #32
 8007c46:	d134      	bne.n	8007cb2 <HAL_UART_IRQHandler+0x8a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007c48:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8007c4c:	d131      	bne.n	8007cb2 <HAL_UART_IRQHandler+0x8a>
  if ((errorflags != 0U)
 8007c4e:	b12a      	cbz	r2, 8007c5c <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007c50:	4a95      	ldr	r2, [pc, #596]	; (8007ea8 <HAL_UART_IRQHandler+0x280>)
 8007c52:	402a      	ands	r2, r5
 8007c54:	d133      	bne.n	8007cbe <HAL_UART_IRQHandler+0x96>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007c56:	4e95      	ldr	r6, [pc, #596]	; (8007eac <HAL_UART_IRQHandler+0x284>)
 8007c58:	4230      	tst	r0, r6
 8007c5a:	d130      	bne.n	8007cbe <HAL_UART_IRQHandler+0x96>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c5c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8007c5e:	2a01      	cmp	r2, #1
 8007c60:	f000 80c3 	beq.w	8007dea <HAL_UART_IRQHandler+0x1c2>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007c64:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8007c68:	d003      	beq.n	8007c72 <HAL_UART_IRQHandler+0x4a>
 8007c6a:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 8007c6e:	f040 815b 	bne.w	8007f28 <HAL_UART_IRQHandler+0x300>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007c72:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007c76:	d007      	beq.n	8007c88 <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007c78:	f010 0f80 	tst.w	r0, #128	; 0x80
 8007c7c:	f040 815b 	bne.w	8007f36 <HAL_UART_IRQHandler+0x30e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007c80:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 8007c84:	f040 8157 	bne.w	8007f36 <HAL_UART_IRQHandler+0x30e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007c88:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007c8c:	d003      	beq.n	8007c96 <HAL_UART_IRQHandler+0x6e>
 8007c8e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007c92:	f040 8157 	bne.w	8007f44 <HAL_UART_IRQHandler+0x31c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007c96:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8007c9a:	d003      	beq.n	8007ca4 <HAL_UART_IRQHandler+0x7c>
 8007c9c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007ca0:	f040 8154 	bne.w	8007f4c <HAL_UART_IRQHandler+0x324>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007ca4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8007ca8:	d002      	beq.n	8007cb0 <HAL_UART_IRQHandler+0x88>
 8007caa:	2800      	cmp	r0, #0
 8007cac:	f2c0 8152 	blt.w	8007f54 <HAL_UART_IRQHandler+0x32c>
}
 8007cb0:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 8007cb2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d0fb      	beq.n	8007cb0 <HAL_UART_IRQHandler+0x88>
        huart->RxISR(huart);
 8007cb8:	4620      	mov	r0, r4
 8007cba:	4798      	blx	r3
      return;
 8007cbc:	e7f8      	b.n	8007cb0 <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007cbe:	f013 0f01 	tst.w	r3, #1
 8007cc2:	d009      	beq.n	8007cd8 <HAL_UART_IRQHandler+0xb0>
 8007cc4:	f410 7f80 	tst.w	r0, #256	; 0x100
 8007cc8:	d006      	beq.n	8007cd8 <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007cca:	2601      	movs	r6, #1
 8007ccc:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007cce:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8007cd2:	4331      	orrs	r1, r6
 8007cd4:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007cd8:	f013 0f02 	tst.w	r3, #2
 8007cdc:	d00b      	beq.n	8007cf6 <HAL_UART_IRQHandler+0xce>
 8007cde:	f015 0f01 	tst.w	r5, #1
 8007ce2:	d008      	beq.n	8007cf6 <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007ce4:	6821      	ldr	r1, [r4, #0]
 8007ce6:	2602      	movs	r6, #2
 8007ce8:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007cea:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8007cee:	f041 0104 	orr.w	r1, r1, #4
 8007cf2:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007cf6:	f013 0f04 	tst.w	r3, #4
 8007cfa:	d00b      	beq.n	8007d14 <HAL_UART_IRQHandler+0xec>
 8007cfc:	f015 0f01 	tst.w	r5, #1
 8007d00:	d008      	beq.n	8007d14 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007d02:	6821      	ldr	r1, [r4, #0]
 8007d04:	2604      	movs	r6, #4
 8007d06:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d08:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8007d0c:	f041 0102 	orr.w	r1, r1, #2
 8007d10:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007d14:	f013 0f08 	tst.w	r3, #8
 8007d18:	d00b      	beq.n	8007d32 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007d1a:	f010 0f20 	tst.w	r0, #32
 8007d1e:	d100      	bne.n	8007d22 <HAL_UART_IRQHandler+0xfa>
 8007d20:	b13a      	cbz	r2, 8007d32 <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d22:	6822      	ldr	r2, [r4, #0]
 8007d24:	2108      	movs	r1, #8
 8007d26:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007d28:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8007d2c:	430a      	orrs	r2, r1
 8007d2e:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007d32:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8007d36:	d00c      	beq.n	8007d52 <HAL_UART_IRQHandler+0x12a>
 8007d38:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8007d3c:	d009      	beq.n	8007d52 <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d3e:	6822      	ldr	r2, [r4, #0]
 8007d40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007d44:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007d46:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8007d4a:	f042 0220 	orr.w	r2, r2, #32
 8007d4e:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d52:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8007d56:	2a00      	cmp	r2, #0
 8007d58:	d0aa      	beq.n	8007cb0 <HAL_UART_IRQHandler+0x88>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007d5a:	f013 0f20 	tst.w	r3, #32
 8007d5e:	d009      	beq.n	8007d74 <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007d60:	f010 0f20 	tst.w	r0, #32
 8007d64:	d102      	bne.n	8007d6c <HAL_UART_IRQHandler+0x144>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007d66:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8007d6a:	d003      	beq.n	8007d74 <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 8007d6c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8007d6e:	b10b      	cbz	r3, 8007d74 <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 8007d70:	4620      	mov	r0, r4
 8007d72:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8007d74:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007d78:	6823      	ldr	r3, [r4, #0]
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007d80:	d102      	bne.n	8007d88 <HAL_UART_IRQHandler+0x160>
 8007d82:	f012 0f28 	tst.w	r2, #40	; 0x28
 8007d86:	d029      	beq.n	8007ddc <HAL_UART_IRQHandler+0x1b4>
        UART_EndRxTransfer(huart);
 8007d88:	4620      	mov	r0, r4
 8007d8a:	f7ff fe4e 	bl	8007a2a <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d8e:	6823      	ldr	r3, [r4, #0]
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007d96:	d01d      	beq.n	8007dd4 <HAL_UART_IRQHandler+0x1ac>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d98:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9a:	f102 0308 	add.w	r3, r2, #8
 8007d9e:	e853 3f00 	ldrex	r3, [r3]
 8007da2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da6:	3208      	adds	r2, #8
 8007da8:	e842 3100 	strex	r1, r3, [r2]
 8007dac:	2900      	cmp	r1, #0
 8007dae:	d1f3      	bne.n	8007d98 <HAL_UART_IRQHandler+0x170>
          if (huart->hdmarx != NULL)
 8007db0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8007db2:	b15b      	cbz	r3, 8007dcc <HAL_UART_IRQHandler+0x1a4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007db4:	4a3e      	ldr	r2, [pc, #248]	; (8007eb0 <HAL_UART_IRQHandler+0x288>)
 8007db6:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007db8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8007dba:	f7fd f957 	bl	800506c <HAL_DMA_Abort_IT>
 8007dbe:	2800      	cmp	r0, #0
 8007dc0:	f43f af76 	beq.w	8007cb0 <HAL_UART_IRQHandler+0x88>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007dc4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8007dc6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007dc8:	4798      	blx	r3
 8007dca:	e771      	b.n	8007cb0 <HAL_UART_IRQHandler+0x88>
            HAL_UART_ErrorCallback(huart);
 8007dcc:	4620      	mov	r0, r4
 8007dce:	f7ff fef3 	bl	8007bb8 <HAL_UART_ErrorCallback>
 8007dd2:	e76d      	b.n	8007cb0 <HAL_UART_IRQHandler+0x88>
          HAL_UART_ErrorCallback(huart);
 8007dd4:	4620      	mov	r0, r4
 8007dd6:	f7ff feef 	bl	8007bb8 <HAL_UART_ErrorCallback>
 8007dda:	e769      	b.n	8007cb0 <HAL_UART_IRQHandler+0x88>
        HAL_UART_ErrorCallback(huart);
 8007ddc:	4620      	mov	r0, r4
 8007dde:	f7ff feeb 	bl	8007bb8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007de2:	2300      	movs	r3, #0
 8007de4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    return;
 8007de8:	e762      	b.n	8007cb0 <HAL_UART_IRQHandler+0x88>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8007dea:	f013 0f10 	tst.w	r3, #16
 8007dee:	f43f af39 	beq.w	8007c64 <HAL_UART_IRQHandler+0x3c>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8007df2:	f010 0f10 	tst.w	r0, #16
 8007df6:	f43f af35 	beq.w	8007c64 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007dfa:	2310      	movs	r3, #16
 8007dfc:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dfe:	6823      	ldr	r3, [r4, #0]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007e06:	d055      	beq.n	8007eb4 <HAL_UART_IRQHandler+0x28c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007e08:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8007e0a:	6813      	ldr	r3, [r2, #0]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	f43f af4d 	beq.w	8007cb0 <HAL_UART_IRQHandler+0x88>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007e16:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8007e1a:	4299      	cmp	r1, r3
 8007e1c:	f67f af48 	bls.w	8007cb0 <HAL_UART_IRQHandler+0x88>
        huart->RxXferCount = nb_remaining_rx_data;
 8007e20:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007e24:	6813      	ldr	r3, [r2, #0]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f013 0f20 	tst.w	r3, #32
 8007e2c:	d131      	bne.n	8007e92 <HAL_UART_IRQHandler+0x26a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e2e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e30:	e852 3f00 	ldrex	r3, [r2]
 8007e34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e38:	e842 3100 	strex	r1, r3, [r2]
 8007e3c:	2900      	cmp	r1, #0
 8007e3e:	d1f6      	bne.n	8007e2e <HAL_UART_IRQHandler+0x206>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e40:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e42:	f102 0308 	add.w	r3, r2, #8
 8007e46:	e853 3f00 	ldrex	r3, [r3]
 8007e4a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4e:	3208      	adds	r2, #8
 8007e50:	e842 3100 	strex	r1, r3, [r2]
 8007e54:	2900      	cmp	r1, #0
 8007e56:	d1f3      	bne.n	8007e40 <HAL_UART_IRQHandler+0x218>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e58:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e5a:	f102 0308 	add.w	r3, r2, #8
 8007e5e:	e853 3f00 	ldrex	r3, [r3]
 8007e62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e66:	3208      	adds	r2, #8
 8007e68:	e842 3100 	strex	r1, r3, [r2]
 8007e6c:	2900      	cmp	r1, #0
 8007e6e:	d1f3      	bne.n	8007e58 <HAL_UART_IRQHandler+0x230>
          huart->RxState = HAL_UART_STATE_READY;
 8007e70:	2320      	movs	r3, #32
 8007e72:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e76:	2300      	movs	r3, #0
 8007e78:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e7a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e7c:	e852 3f00 	ldrex	r3, [r2]
 8007e80:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e84:	e842 3100 	strex	r1, r3, [r2]
 8007e88:	2900      	cmp	r1, #0
 8007e8a:	d1f6      	bne.n	8007e7a <HAL_UART_IRQHandler+0x252>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007e8c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8007e8e:	f7fd f8b3 	bl	8004ff8 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007e92:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8007e96:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	1ac9      	subs	r1, r1, r3
 8007e9e:	b289      	uxth	r1, r1
 8007ea0:	4620      	mov	r0, r4
 8007ea2:	f7ff fec0 	bl	8007c26 <HAL_UARTEx_RxEventCallback>
      return;
 8007ea6:	e703      	b.n	8007cb0 <HAL_UART_IRQHandler+0x88>
 8007ea8:	10000001 	.word	0x10000001
 8007eac:	04000120 	.word	0x04000120
 8007eb0:	08007c13 	.word	0x08007c13
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007eb4:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8007eb8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	1ac9      	subs	r1, r1, r3
 8007ec0:	b289      	uxth	r1, r1
      if (  (huart->RxXferCount > 0U)
 8007ec2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	f43f aef1 	beq.w	8007cb0 <HAL_UART_IRQHandler+0x88>
          &&(nb_rx_data > 0U) )
 8007ece:	2900      	cmp	r1, #0
 8007ed0:	f43f aeee 	beq.w	8007cb0 <HAL_UART_IRQHandler+0x88>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ed4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed6:	e852 3f00 	ldrex	r3, [r2]
 8007eda:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ede:	e842 3000 	strex	r0, r3, [r2]
 8007ee2:	2800      	cmp	r0, #0
 8007ee4:	d1f6      	bne.n	8007ed4 <HAL_UART_IRQHandler+0x2ac>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ee6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee8:	f102 0308 	add.w	r3, r2, #8
 8007eec:	e853 3f00 	ldrex	r3, [r3]
 8007ef0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ef4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef8:	3208      	adds	r2, #8
 8007efa:	e842 3000 	strex	r0, r3, [r2]
 8007efe:	2800      	cmp	r0, #0
 8007f00:	d1f1      	bne.n	8007ee6 <HAL_UART_IRQHandler+0x2be>
        huart->RxState = HAL_UART_STATE_READY;
 8007f02:	2320      	movs	r3, #32
 8007f04:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8007f0c:	6723      	str	r3, [r4, #112]	; 0x70
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f0e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f10:	e852 3f00 	ldrex	r3, [r2]
 8007f14:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f18:	e842 3000 	strex	r0, r3, [r2]
 8007f1c:	2800      	cmp	r0, #0
 8007f1e:	d1f6      	bne.n	8007f0e <HAL_UART_IRQHandler+0x2e6>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007f20:	4620      	mov	r0, r4
 8007f22:	f7ff fe80 	bl	8007c26 <HAL_UARTEx_RxEventCallback>
      return;
 8007f26:	e6c3      	b.n	8007cb0 <HAL_UART_IRQHandler+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007f28:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007f2c:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8007f2e:	4620      	mov	r0, r4
 8007f30:	f000 fe1c 	bl	8008b6c <HAL_UARTEx_WakeupCallback>
    return;
 8007f34:	e6bc      	b.n	8007cb0 <HAL_UART_IRQHandler+0x88>
    if (huart->TxISR != NULL)
 8007f36:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	f43f aeb9 	beq.w	8007cb0 <HAL_UART_IRQHandler+0x88>
      huart->TxISR(huart);
 8007f3e:	4620      	mov	r0, r4
 8007f40:	4798      	blx	r3
    return;
 8007f42:	e6b5      	b.n	8007cb0 <HAL_UART_IRQHandler+0x88>
    UART_EndTransmit_IT(huart);
 8007f44:	4620      	mov	r0, r4
 8007f46:	f7ff fe1f 	bl	8007b88 <UART_EndTransmit_IT>
    return;
 8007f4a:	e6b1      	b.n	8007cb0 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007f4c:	4620      	mov	r0, r4
 8007f4e:	f000 fe0f 	bl	8008b70 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8007f52:	e6ad      	b.n	8007cb0 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007f54:	4620      	mov	r0, r4
 8007f56:	f000 fe0a 	bl	8008b6e <HAL_UARTEx_RxFifoFullCallback>
    return;
 8007f5a:	e6a9      	b.n	8007cb0 <HAL_UART_IRQHandler+0x88>

08007f5c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007f5c:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 8007f5e:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f62:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8007f66:	2a22      	cmp	r2, #34	; 0x22
 8007f68:	d005      	beq.n	8007f76 <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007f6a:	6802      	ldr	r2, [r0, #0]
 8007f6c:	6993      	ldr	r3, [r2, #24]
 8007f6e:	f043 0308 	orr.w	r3, r3, #8
 8007f72:	6193      	str	r3, [r2, #24]
  }
}
 8007f74:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f76:	6802      	ldr	r2, [r0, #0]
 8007f78:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8007f7e:	400b      	ands	r3, r1
 8007f80:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8007f82:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8007f84:	3301      	adds	r3, #1
 8007f86:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8007f88:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	3b01      	subs	r3, #1
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8007f96:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d1e9      	bne.n	8007f74 <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007fa0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa2:	e852 3f00 	ldrex	r3, [r2]
 8007fa6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007faa:	e842 3100 	strex	r1, r3, [r2]
 8007fae:	2900      	cmp	r1, #0
 8007fb0:	d1f6      	bne.n	8007fa0 <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fb2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb4:	f102 0308 	add.w	r3, r2, #8
 8007fb8:	e853 3f00 	ldrex	r3, [r3]
 8007fbc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc0:	3208      	adds	r2, #8
 8007fc2:	e842 3100 	strex	r1, r3, [r2]
 8007fc6:	2900      	cmp	r1, #0
 8007fc8:	d1f3      	bne.n	8007fb2 <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 8007fca:	2320      	movs	r3, #32
 8007fcc:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fd4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d116      	bne.n	8008008 <UART_RxISR_8BIT+0xac>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fde:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe0:	e852 3f00 	ldrex	r3, [r2]
 8007fe4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe8:	e842 3100 	strex	r1, r3, [r2]
 8007fec:	2900      	cmp	r1, #0
 8007fee:	d1f6      	bne.n	8007fde <UART_RxISR_8BIT+0x82>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ff0:	6803      	ldr	r3, [r0, #0]
 8007ff2:	69da      	ldr	r2, [r3, #28]
 8007ff4:	f012 0f10 	tst.w	r2, #16
 8007ff8:	d001      	beq.n	8007ffe <UART_RxISR_8BIT+0xa2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ffa:	2210      	movs	r2, #16
 8007ffc:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ffe:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8008002:	f7ff fe10 	bl	8007c26 <HAL_UARTEx_RxEventCallback>
 8008006:	e7b5      	b.n	8007f74 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8008008:	f7fa fbac 	bl	8002764 <HAL_UART_RxCpltCallback>
 800800c:	e7b2      	b.n	8007f74 <UART_RxISR_8BIT+0x18>

0800800e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800800e:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008010:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008014:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8008018:	2b22      	cmp	r3, #34	; 0x22
 800801a:	d005      	beq.n	8008028 <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800801c:	6802      	ldr	r2, [r0, #0]
 800801e:	6993      	ldr	r3, [r2, #24]
 8008020:	f043 0308 	orr.w	r3, r3, #8
 8008024:	6193      	str	r3, [r2, #24]
  }
}
 8008026:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008028:	6803      	ldr	r3, [r0, #0]
 800802a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800802c:	6d81      	ldr	r1, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 800802e:	4013      	ands	r3, r2
 8008030:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 8008032:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8008034:	3302      	adds	r3, #2
 8008036:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8008038:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800803c:	b29b      	uxth	r3, r3
 800803e:	3b01      	subs	r3, #1
 8008040:	b29b      	uxth	r3, r3
 8008042:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8008046:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800804a:	b29b      	uxth	r3, r3
 800804c:	2b00      	cmp	r3, #0
 800804e:	d1ea      	bne.n	8008026 <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008050:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008052:	e852 3f00 	ldrex	r3, [r2]
 8008056:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800805a:	e842 3100 	strex	r1, r3, [r2]
 800805e:	2900      	cmp	r1, #0
 8008060:	d1f6      	bne.n	8008050 <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008062:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008064:	f102 0308 	add.w	r3, r2, #8
 8008068:	e853 3f00 	ldrex	r3, [r3]
 800806c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008070:	3208      	adds	r2, #8
 8008072:	e842 3100 	strex	r1, r3, [r2]
 8008076:	2900      	cmp	r1, #0
 8008078:	d1f3      	bne.n	8008062 <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 800807a:	2320      	movs	r3, #32
 800807c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 8008080:	2300      	movs	r3, #0
 8008082:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008084:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8008086:	2b01      	cmp	r3, #1
 8008088:	d116      	bne.n	80080b8 <UART_RxISR_16BIT+0xaa>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800808a:	2300      	movs	r3, #0
 800808c:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800808e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008090:	e852 3f00 	ldrex	r3, [r2]
 8008094:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008098:	e842 3100 	strex	r1, r3, [r2]
 800809c:	2900      	cmp	r1, #0
 800809e:	d1f6      	bne.n	800808e <UART_RxISR_16BIT+0x80>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80080a0:	6803      	ldr	r3, [r0, #0]
 80080a2:	69da      	ldr	r2, [r3, #28]
 80080a4:	f012 0f10 	tst.w	r2, #16
 80080a8:	d001      	beq.n	80080ae <UART_RxISR_16BIT+0xa0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80080aa:	2210      	movs	r2, #16
 80080ac:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080ae:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 80080b2:	f7ff fdb8 	bl	8007c26 <HAL_UARTEx_RxEventCallback>
 80080b6:	e7b6      	b.n	8008026 <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 80080b8:	f7fa fb54 	bl	8002764 <HAL_UART_RxCpltCallback>
 80080bc:	e7b3      	b.n	8008026 <UART_RxISR_16BIT+0x18>
	...

080080c0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80080c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 80080c4:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80080c8:	6803      	ldr	r3, [r0, #0]
 80080ca:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80080cc:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80080d0:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080d4:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80080d8:	2a22      	cmp	r2, #34	; 0x22
 80080da:	d005      	beq.n	80080e8 <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80080dc:	699a      	ldr	r2, [r3, #24]
 80080de:	f042 0208 	orr.w	r2, r2, #8
 80080e2:	619a      	str	r2, [r3, #24]
  }
}
 80080e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080e8:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 80080ea:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80080ee:	e008      	b.n	8008102 <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80080f0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d14c      	bne.n	8008192 <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 80080f8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d04e      	beq.n	80081a0 <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008102:	2f00      	cmp	r7, #0
 8008104:	f000 8087 	beq.w	8008216 <UART_RxISR_8BIT_FIFOEN+0x156>
 8008108:	f015 0f20 	tst.w	r5, #32
 800810c:	f000 8083 	beq.w	8008216 <UART_RxISR_8BIT_FIFOEN+0x156>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008110:	6823      	ldr	r3, [r4, #0]
 8008112:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008114:	b2f3      	uxtb	r3, r6
 8008116:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8008118:	400b      	ands	r3, r1
 800811a:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 800811c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800811e:	3301      	adds	r3, #1
 8008120:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8008122:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8008126:	b29b      	uxth	r3, r3
 8008128:	3b01      	subs	r3, #1
 800812a:	b29b      	uxth	r3, r3
 800812c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008130:	6823      	ldr	r3, [r4, #0]
 8008132:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008134:	f015 0f07 	tst.w	r5, #7
 8008138:	d0de      	beq.n	80080f8 <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800813a:	f015 0f01 	tst.w	r5, #1
 800813e:	d009      	beq.n	8008154 <UART_RxISR_8BIT_FIFOEN+0x94>
 8008140:	f419 7f80 	tst.w	r9, #256	; 0x100
 8008144:	d006      	beq.n	8008154 <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008146:	2201      	movs	r2, #1
 8008148:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800814a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800814e:	4313      	orrs	r3, r2
 8008150:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008154:	f015 0f02 	tst.w	r5, #2
 8008158:	d00b      	beq.n	8008172 <UART_RxISR_8BIT_FIFOEN+0xb2>
 800815a:	f018 0f01 	tst.w	r8, #1
 800815e:	d008      	beq.n	8008172 <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008160:	6823      	ldr	r3, [r4, #0]
 8008162:	2202      	movs	r2, #2
 8008164:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008166:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800816a:	f043 0304 	orr.w	r3, r3, #4
 800816e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008172:	f015 0f04 	tst.w	r5, #4
 8008176:	d0bb      	beq.n	80080f0 <UART_RxISR_8BIT_FIFOEN+0x30>
 8008178:	f018 0f01 	tst.w	r8, #1
 800817c:	d0b8      	beq.n	80080f0 <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800817e:	6823      	ldr	r3, [r4, #0]
 8008180:	2204      	movs	r2, #4
 8008182:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008184:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8008188:	f043 0302 	orr.w	r3, r3, #2
 800818c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8008190:	e7ae      	b.n	80080f0 <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8008192:	4620      	mov	r0, r4
 8008194:	f7ff fd10 	bl	8007bb8 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008198:	2300      	movs	r3, #0
 800819a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 800819e:	e7ab      	b.n	80080f8 <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081a0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a2:	e852 3f00 	ldrex	r3, [r2]
 80081a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081aa:	e842 3100 	strex	r1, r3, [r2]
 80081ae:	2900      	cmp	r1, #0
 80081b0:	d1f6      	bne.n	80081a0 <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80081b2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b4:	f102 0308 	add.w	r3, r2, #8
 80081b8:	e853 3f00 	ldrex	r3, [r3]
 80081bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80081c0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c4:	3208      	adds	r2, #8
 80081c6:	e842 3100 	strex	r1, r3, [r2]
 80081ca:	2900      	cmp	r1, #0
 80081cc:	d1f1      	bne.n	80081b2 <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 80081ce:	2320      	movs	r3, #32
 80081d0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 80081d4:	2300      	movs	r3, #0
 80081d6:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081d8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d003      	beq.n	80081e6 <UART_RxISR_8BIT_FIFOEN+0x126>
          HAL_UART_RxCpltCallback(huart);
 80081de:	4620      	mov	r0, r4
 80081e0:	f7fa fac0 	bl	8002764 <HAL_UART_RxCpltCallback>
 80081e4:	e78d      	b.n	8008102 <UART_RxISR_8BIT_FIFOEN+0x42>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081e6:	2300      	movs	r3, #0
 80081e8:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081ea:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ec:	e852 3f00 	ldrex	r3, [r2]
 80081f0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f4:	e842 3100 	strex	r1, r3, [r2]
 80081f8:	2900      	cmp	r1, #0
 80081fa:	d1f6      	bne.n	80081ea <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80081fc:	6823      	ldr	r3, [r4, #0]
 80081fe:	69da      	ldr	r2, [r3, #28]
 8008200:	f012 0f10 	tst.w	r2, #16
 8008204:	d001      	beq.n	800820a <UART_RxISR_8BIT_FIFOEN+0x14a>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008206:	2210      	movs	r2, #16
 8008208:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800820a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800820e:	4620      	mov	r0, r4
 8008210:	f7ff fd09 	bl	8007c26 <HAL_UARTEx_RxEventCallback>
 8008214:	e775      	b.n	8008102 <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8008216:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800821a:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800821c:	2b00      	cmp	r3, #0
 800821e:	f43f af61 	beq.w	80080e4 <UART_RxISR_8BIT_FIFOEN+0x24>
 8008222:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8008226:	429a      	cmp	r2, r3
 8008228:	f67f af5c 	bls.w	80080e4 <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800822c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800822e:	f102 0308 	add.w	r3, r2, #8
 8008232:	e853 3f00 	ldrex	r3, [r3]
 8008236:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800823a:	3208      	adds	r2, #8
 800823c:	e842 3100 	strex	r1, r3, [r2]
 8008240:	2900      	cmp	r1, #0
 8008242:	d1f3      	bne.n	800822c <UART_RxISR_8BIT_FIFOEN+0x16c>
      huart->RxISR = UART_RxISR_8BIT;
 8008244:	4b05      	ldr	r3, [pc, #20]	; (800825c <UART_RxISR_8BIT_FIFOEN+0x19c>)
 8008246:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008248:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824a:	e852 3f00 	ldrex	r3, [r2]
 800824e:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008252:	e842 3100 	strex	r1, r3, [r2]
 8008256:	2900      	cmp	r1, #0
 8008258:	d1f6      	bne.n	8008248 <UART_RxISR_8BIT_FIFOEN+0x188>
 800825a:	e743      	b.n	80080e4 <UART_RxISR_8BIT_FIFOEN+0x24>
 800825c:	08007f5d 	.word	0x08007f5d

08008260 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008264:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008268:	6803      	ldr	r3, [r0, #0]
 800826a:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800826c:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008270:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008274:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8008278:	2a22      	cmp	r2, #34	; 0x22
 800827a:	d005      	beq.n	8008288 <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800827c:	699a      	ldr	r2, [r3, #24]
 800827e:	f042 0208 	orr.w	r2, r2, #8
 8008282:	619a      	str	r2, [r3, #24]
  }
}
 8008284:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008288:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 800828a:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800828e:	e008      	b.n	80082a2 <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008290:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8008294:	2b00      	cmp	r3, #0
 8008296:	d14b      	bne.n	8008330 <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 8008298:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800829c:	b29b      	uxth	r3, r3
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d04d      	beq.n	800833e <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80082a2:	2f00      	cmp	r7, #0
 80082a4:	f000 8086 	beq.w	80083b4 <UART_RxISR_16BIT_FIFOEN+0x154>
 80082a8:	f015 0f20 	tst.w	r5, #32
 80082ac:	f000 8082 	beq.w	80083b4 <UART_RxISR_16BIT_FIFOEN+0x154>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80082b0:	6823      	ldr	r3, [r4, #0]
 80082b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80082b4:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 80082b6:	4033      	ands	r3, r6
 80082b8:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80082ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80082bc:	3302      	adds	r3, #2
 80082be:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 80082c0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	3b01      	subs	r3, #1
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80082ce:	6823      	ldr	r3, [r4, #0]
 80082d0:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80082d2:	f015 0f07 	tst.w	r5, #7
 80082d6:	d0df      	beq.n	8008298 <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80082d8:	f015 0f01 	tst.w	r5, #1
 80082dc:	d009      	beq.n	80082f2 <UART_RxISR_16BIT_FIFOEN+0x92>
 80082de:	f419 7f80 	tst.w	r9, #256	; 0x100
 80082e2:	d006      	beq.n	80082f2 <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80082e4:	2201      	movs	r2, #1
 80082e6:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80082e8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80082ec:	4313      	orrs	r3, r2
 80082ee:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80082f2:	f015 0f02 	tst.w	r5, #2
 80082f6:	d00b      	beq.n	8008310 <UART_RxISR_16BIT_FIFOEN+0xb0>
 80082f8:	f018 0f01 	tst.w	r8, #1
 80082fc:	d008      	beq.n	8008310 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80082fe:	6823      	ldr	r3, [r4, #0]
 8008300:	2202      	movs	r2, #2
 8008302:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008304:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8008308:	f043 0304 	orr.w	r3, r3, #4
 800830c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008310:	f015 0f04 	tst.w	r5, #4
 8008314:	d0bc      	beq.n	8008290 <UART_RxISR_16BIT_FIFOEN+0x30>
 8008316:	f018 0f01 	tst.w	r8, #1
 800831a:	d0b9      	beq.n	8008290 <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800831c:	6823      	ldr	r3, [r4, #0]
 800831e:	2204      	movs	r2, #4
 8008320:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008322:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8008326:	f043 0302 	orr.w	r3, r3, #2
 800832a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 800832e:	e7af      	b.n	8008290 <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8008330:	4620      	mov	r0, r4
 8008332:	f7ff fc41 	bl	8007bb8 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008336:	2300      	movs	r3, #0
 8008338:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 800833c:	e7ac      	b.n	8008298 <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800833e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008340:	e852 3f00 	ldrex	r3, [r2]
 8008344:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008348:	e842 3100 	strex	r1, r3, [r2]
 800834c:	2900      	cmp	r1, #0
 800834e:	d1f6      	bne.n	800833e <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008350:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008352:	f102 0308 	add.w	r3, r2, #8
 8008356:	e853 3f00 	ldrex	r3, [r3]
 800835a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800835e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008362:	3208      	adds	r2, #8
 8008364:	e842 3100 	strex	r1, r3, [r2]
 8008368:	2900      	cmp	r1, #0
 800836a:	d1f1      	bne.n	8008350 <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 800836c:	2320      	movs	r3, #32
 800836e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 8008372:	2300      	movs	r3, #0
 8008374:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008376:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008378:	2b01      	cmp	r3, #1
 800837a:	d003      	beq.n	8008384 <UART_RxISR_16BIT_FIFOEN+0x124>
          HAL_UART_RxCpltCallback(huart);
 800837c:	4620      	mov	r0, r4
 800837e:	f7fa f9f1 	bl	8002764 <HAL_UART_RxCpltCallback>
 8008382:	e78e      	b.n	80082a2 <UART_RxISR_16BIT_FIFOEN+0x42>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008384:	2300      	movs	r3, #0
 8008386:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008388:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800838a:	e852 3f00 	ldrex	r3, [r2]
 800838e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008392:	e842 3100 	strex	r1, r3, [r2]
 8008396:	2900      	cmp	r1, #0
 8008398:	d1f6      	bne.n	8008388 <UART_RxISR_16BIT_FIFOEN+0x128>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800839a:	6823      	ldr	r3, [r4, #0]
 800839c:	69da      	ldr	r2, [r3, #28]
 800839e:	f012 0f10 	tst.w	r2, #16
 80083a2:	d001      	beq.n	80083a8 <UART_RxISR_16BIT_FIFOEN+0x148>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80083a4:	2210      	movs	r2, #16
 80083a6:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80083a8:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80083ac:	4620      	mov	r0, r4
 80083ae:	f7ff fc3a 	bl	8007c26 <HAL_UARTEx_RxEventCallback>
 80083b2:	e776      	b.n	80082a2 <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 80083b4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80083b8:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	f43f af62 	beq.w	8008284 <UART_RxISR_16BIT_FIFOEN+0x24>
 80083c0:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 80083c4:	429a      	cmp	r2, r3
 80083c6:	f67f af5d 	bls.w	8008284 <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80083ca:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083cc:	f102 0308 	add.w	r3, r2, #8
 80083d0:	e853 3f00 	ldrex	r3, [r3]
 80083d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d8:	3208      	adds	r2, #8
 80083da:	e842 3100 	strex	r1, r3, [r2]
 80083de:	2900      	cmp	r1, #0
 80083e0:	d1f3      	bne.n	80083ca <UART_RxISR_16BIT_FIFOEN+0x16a>
      huart->RxISR = UART_RxISR_16BIT;
 80083e2:	4b06      	ldr	r3, [pc, #24]	; (80083fc <UART_RxISR_16BIT_FIFOEN+0x19c>)
 80083e4:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80083e6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e8:	e852 3f00 	ldrex	r3, [r2]
 80083ec:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f0:	e842 3100 	strex	r1, r3, [r2]
 80083f4:	2900      	cmp	r1, #0
 80083f6:	d1f6      	bne.n	80083e6 <UART_RxISR_16BIT_FIFOEN+0x186>
 80083f8:	e744      	b.n	8008284 <UART_RxISR_16BIT_FIFOEN+0x24>
 80083fa:	bf00      	nop
 80083fc:	0800800f 	.word	0x0800800f

08008400 <UART_SetConfig>:
{
 8008400:	b570      	push	{r4, r5, r6, lr}
 8008402:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8008404:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008406:	6883      	ldr	r3, [r0, #8]
 8008408:	6902      	ldr	r2, [r0, #16]
 800840a:	4313      	orrs	r3, r2
 800840c:	6942      	ldr	r2, [r0, #20]
 800840e:	4313      	orrs	r3, r2
 8008410:	69c2      	ldr	r2, [r0, #28]
 8008412:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008414:	6808      	ldr	r0, [r1, #0]
 8008416:	4a9d      	ldr	r2, [pc, #628]	; (800868c <UART_SetConfig+0x28c>)
 8008418:	4002      	ands	r2, r0
 800841a:	4313      	orrs	r3, r2
 800841c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800841e:	6822      	ldr	r2, [r4, #0]
 8008420:	6853      	ldr	r3, [r2, #4]
 8008422:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008426:	68e1      	ldr	r1, [r4, #12]
 8008428:	430b      	orrs	r3, r1
 800842a:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800842c:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800842e:	6822      	ldr	r2, [r4, #0]
 8008430:	4b97      	ldr	r3, [pc, #604]	; (8008690 <UART_SetConfig+0x290>)
 8008432:	429a      	cmp	r2, r3
 8008434:	d001      	beq.n	800843a <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 8008436:	6a23      	ldr	r3, [r4, #32]
 8008438:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800843a:	6893      	ldr	r3, [r2, #8]
 800843c:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008440:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008444:	430b      	orrs	r3, r1
 8008446:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008448:	6822      	ldr	r2, [r4, #0]
 800844a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800844c:	f023 030f 	bic.w	r3, r3, #15
 8008450:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008452:	430b      	orrs	r3, r1
 8008454:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008456:	6823      	ldr	r3, [r4, #0]
 8008458:	4a8e      	ldr	r2, [pc, #568]	; (8008694 <UART_SetConfig+0x294>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d01c      	beq.n	8008498 <UART_SetConfig+0x98>
 800845e:	4a8e      	ldr	r2, [pc, #568]	; (8008698 <UART_SetConfig+0x298>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d031      	beq.n	80084c8 <UART_SetConfig+0xc8>
 8008464:	4a8a      	ldr	r2, [pc, #552]	; (8008690 <UART_SetConfig+0x290>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d04b      	beq.n	8008502 <UART_SetConfig+0x102>
 800846a:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 800846c:	4988      	ldr	r1, [pc, #544]	; (8008690 <UART_SetConfig+0x290>)
 800846e:	428b      	cmp	r3, r1
 8008470:	d068      	beq.n	8008544 <UART_SetConfig+0x144>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008472:	69e0      	ldr	r0, [r4, #28]
 8008474:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008478:	f000 80a5 	beq.w	80085c6 <UART_SetConfig+0x1c6>
    switch (clocksource)
 800847c:	2a08      	cmp	r2, #8
 800847e:	f200 811f 	bhi.w	80086c0 <UART_SetConfig+0x2c0>
 8008482:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008486:	00d3      	.short	0x00d3
 8008488:	00d100f5 	.word	0x00d100f5
 800848c:	00f8011d 	.word	0x00f8011d
 8008490:	011d011d 	.word	0x011d011d
 8008494:	00fb011d 	.word	0x00fb011d
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8008498:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800849c:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80084a0:	f002 0203 	and.w	r2, r2, #3
 80084a4:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
  UART_GETCLOCKSOURCE(huart, clocksource);
 80084a8:	f5a2 3240 	sub.w	r2, r2, #196608	; 0x30000
 80084ac:	2a03      	cmp	r2, #3
 80084ae:	d809      	bhi.n	80084c4 <UART_SetConfig+0xc4>
 80084b0:	e8df f002 	tbb	[pc, r2]
 80084b4:	063c0402 	.word	0x063c0402
 80084b8:	2201      	movs	r2, #1
 80084ba:	e7d7      	b.n	800846c <UART_SetConfig+0x6c>
 80084bc:	2204      	movs	r2, #4
 80084be:	e7d5      	b.n	800846c <UART_SetConfig+0x6c>
 80084c0:	2208      	movs	r2, #8
 80084c2:	e7d3      	b.n	800846c <UART_SetConfig+0x6c>
 80084c4:	2210      	movs	r2, #16
 80084c6:	e7d1      	b.n	800846c <UART_SetConfig+0x6c>
 80084c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80084cc:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80084d0:	f002 020c 	and.w	r2, r2, #12
 80084d4:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 80084d8:	f5a2 2240 	sub.w	r2, r2, #786432	; 0xc0000
 80084dc:	2a0c      	cmp	r2, #12
 80084de:	d80e      	bhi.n	80084fe <UART_SetConfig+0xfe>
 80084e0:	e8df f002 	tbb	[pc, r2]
 80084e4:	0d0d0d07 	.word	0x0d0d0d07
 80084e8:	0d0d0d09 	.word	0x0d0d0d09
 80084ec:	0d0d0d26 	.word	0x0d0d0d26
 80084f0:	0b          	.byte	0x0b
 80084f1:	00          	.byte	0x00
 80084f2:	2200      	movs	r2, #0
 80084f4:	e7ba      	b.n	800846c <UART_SetConfig+0x6c>
 80084f6:	2204      	movs	r2, #4
 80084f8:	e7b8      	b.n	800846c <UART_SetConfig+0x6c>
 80084fa:	2208      	movs	r2, #8
 80084fc:	e7b6      	b.n	800846c <UART_SetConfig+0x6c>
 80084fe:	2210      	movs	r2, #16
 8008500:	e7b4      	b.n	800846c <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8008502:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008506:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800850a:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 800850e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8008512:	d00f      	beq.n	8008534 <UART_SetConfig+0x134>
 8008514:	d805      	bhi.n	8008522 <UART_SetConfig+0x122>
 8008516:	b17a      	cbz	r2, 8008538 <UART_SetConfig+0x138>
 8008518:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800851c:	d10e      	bne.n	800853c <UART_SetConfig+0x13c>
 800851e:	2204      	movs	r2, #4
 8008520:	e7a4      	b.n	800846c <UART_SetConfig+0x6c>
 8008522:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8008526:	d10b      	bne.n	8008540 <UART_SetConfig+0x140>
 8008528:	2208      	movs	r2, #8
 800852a:	e79f      	b.n	800846c <UART_SetConfig+0x6c>
 800852c:	2202      	movs	r2, #2
 800852e:	e79d      	b.n	800846c <UART_SetConfig+0x6c>
 8008530:	2202      	movs	r2, #2
 8008532:	e79b      	b.n	800846c <UART_SetConfig+0x6c>
 8008534:	2202      	movs	r2, #2
 8008536:	e799      	b.n	800846c <UART_SetConfig+0x6c>
 8008538:	2200      	movs	r2, #0
 800853a:	e797      	b.n	800846c <UART_SetConfig+0x6c>
 800853c:	2210      	movs	r2, #16
 800853e:	e795      	b.n	800846c <UART_SetConfig+0x6c>
 8008540:	2210      	movs	r2, #16
 8008542:	e793      	b.n	800846c <UART_SetConfig+0x6c>
    switch (clocksource)
 8008544:	2a08      	cmp	r2, #8
 8008546:	f200 809c 	bhi.w	8008682 <UART_SetConfig+0x282>
 800854a:	e8df f002 	tbb	[pc, r2]
 800854e:	9a08      	.short	0x9a08
 8008550:	9a379a3a 	.word	0x9a379a3a
 8008554:	9a9a      	.short	0x9a9a
 8008556:	05          	.byte	0x05
 8008557:	00          	.byte	0x00
 8008558:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800855c:	e004      	b.n	8008568 <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 800855e:	f7fe fb0f 	bl	8006b80 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8008562:	2800      	cmp	r0, #0
 8008564:	f000 808f 	beq.w	8008686 <UART_SetConfig+0x286>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008568:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800856a:	4b4c      	ldr	r3, [pc, #304]	; (800869c <UART_SetConfig+0x29c>)
 800856c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8008570:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008574:	6865      	ldr	r5, [r4, #4]
 8008576:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800857a:	4299      	cmp	r1, r3
 800857c:	f200 8094 	bhi.w	80086a8 <UART_SetConfig+0x2a8>
 8008580:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8008584:	f200 8092 	bhi.w	80086ac <UART_SetConfig+0x2ac>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008588:	2600      	movs	r6, #0
 800858a:	4633      	mov	r3, r6
 800858c:	4631      	mov	r1, r6
 800858e:	f7f8 fd9d 	bl	80010cc <__aeabi_uldivmod>
 8008592:	0209      	lsls	r1, r1, #8
 8008594:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8008598:	0200      	lsls	r0, r0, #8
 800859a:	086b      	lsrs	r3, r5, #1
 800859c:	18c0      	adds	r0, r0, r3
 800859e:	462a      	mov	r2, r5
 80085a0:	4633      	mov	r3, r6
 80085a2:	f141 0100 	adc.w	r1, r1, #0
 80085a6:	f7f8 fd91 	bl	80010cc <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80085aa:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 80085ae:	4b3c      	ldr	r3, [pc, #240]	; (80086a0 <UART_SetConfig+0x2a0>)
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d87d      	bhi.n	80086b0 <UART_SetConfig+0x2b0>
          huart->Instance->BRR = usartdiv;
 80085b4:	6823      	ldr	r3, [r4, #0]
 80085b6:	60d8      	str	r0, [r3, #12]
 80085b8:	4630      	mov	r0, r6
 80085ba:	e050      	b.n	800865e <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetSysClockFreq();
 80085bc:	f7fd fdd8 	bl	8006170 <HAL_RCC_GetSysClockFreq>
        break;
 80085c0:	e7cf      	b.n	8008562 <UART_SetConfig+0x162>
        pclk = (uint32_t) HSI_VALUE;
 80085c2:	4838      	ldr	r0, [pc, #224]	; (80086a4 <UART_SetConfig+0x2a4>)
 80085c4:	e7d0      	b.n	8008568 <UART_SetConfig+0x168>
    switch (clocksource)
 80085c6:	2a08      	cmp	r2, #8
 80085c8:	d874      	bhi.n	80086b4 <UART_SetConfig+0x2b4>
 80085ca:	e8df f002 	tbb	[pc, r2]
 80085ce:	2707      	.short	0x2707
 80085d0:	732a7305 	.word	0x732a7305
 80085d4:	7373      	.short	0x7373
 80085d6:	0b          	.byte	0x0b
 80085d7:	00          	.byte	0x00
 80085d8:	4832      	ldr	r0, [pc, #200]	; (80086a4 <UART_SetConfig+0x2a4>)
 80085da:	e003      	b.n	80085e4 <UART_SetConfig+0x1e4>
        pclk = HAL_RCC_GetPCLK1Freq();
 80085dc:	f7fe fad0 	bl	8006b80 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80085e0:	2800      	cmp	r0, #0
 80085e2:	d069      	beq.n	80086b8 <UART_SetConfig+0x2b8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085e4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80085e6:	4b2d      	ldr	r3, [pc, #180]	; (800869c <UART_SetConfig+0x29c>)
 80085e8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80085ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80085f0:	6862      	ldr	r2, [r4, #4]
 80085f2:	0853      	lsrs	r3, r2, #1
 80085f4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80085f8:	fbb0 f0f2 	udiv	r0, r0, r2
 80085fc:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085fe:	f1a0 0210 	sub.w	r2, r0, #16
 8008602:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8008606:	429a      	cmp	r2, r3
 8008608:	d858      	bhi.n	80086bc <UART_SetConfig+0x2bc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800860a:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800860e:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8008612:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 8008614:	6823      	ldr	r3, [r4, #0]
 8008616:	60d8      	str	r0, [r3, #12]
 8008618:	2000      	movs	r0, #0
 800861a:	e020      	b.n	800865e <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetPCLK2Freq();
 800861c:	f7fe fac0 	bl	8006ba0 <HAL_RCC_GetPCLK2Freq>
        break;
 8008620:	e7de      	b.n	80085e0 <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 8008622:	f7fd fda5 	bl	8006170 <HAL_RCC_GetSysClockFreq>
        break;
 8008626:	e7db      	b.n	80085e0 <UART_SetConfig+0x1e0>
    switch (clocksource)
 8008628:	481e      	ldr	r0, [pc, #120]	; (80086a4 <UART_SetConfig+0x2a4>)
 800862a:	e003      	b.n	8008634 <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK1Freq();
 800862c:	f7fe faa8 	bl	8006b80 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8008630:	2800      	cmp	r0, #0
 8008632:	d047      	beq.n	80086c4 <UART_SetConfig+0x2c4>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008634:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008636:	4b19      	ldr	r3, [pc, #100]	; (800869c <UART_SetConfig+0x29c>)
 8008638:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800863c:	fbb0 f0f3 	udiv	r0, r0, r3
 8008640:	6863      	ldr	r3, [r4, #4]
 8008642:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8008646:	fbb0 f0f3 	udiv	r0, r0, r3
 800864a:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800864c:	f1a0 0210 	sub.w	r2, r0, #16
 8008650:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8008654:	429a      	cmp	r2, r3
 8008656:	d837      	bhi.n	80086c8 <UART_SetConfig+0x2c8>
        huart->Instance->BRR = usartdiv;
 8008658:	6823      	ldr	r3, [r4, #0]
 800865a:	60d8      	str	r0, [r3, #12]
 800865c:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 800865e:	2301      	movs	r3, #1
 8008660:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008664:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8008668:	2300      	movs	r3, #0
 800866a:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 800866c:	6763      	str	r3, [r4, #116]	; 0x74
}
 800866e:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8008670:	f7fe fa96 	bl	8006ba0 <HAL_RCC_GetPCLK2Freq>
        break;
 8008674:	e7dc      	b.n	8008630 <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetSysClockFreq();
 8008676:	f7fd fd7b 	bl	8006170 <HAL_RCC_GetSysClockFreq>
        break;
 800867a:	e7d9      	b.n	8008630 <UART_SetConfig+0x230>
        pclk = (uint32_t) LSE_VALUE;
 800867c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008680:	e7d8      	b.n	8008634 <UART_SetConfig+0x234>
    switch (clocksource)
 8008682:	2001      	movs	r0, #1
 8008684:	e7eb      	b.n	800865e <UART_SetConfig+0x25e>
 8008686:	2000      	movs	r0, #0
 8008688:	e7e9      	b.n	800865e <UART_SetConfig+0x25e>
 800868a:	bf00      	nop
 800868c:	cfff69f3 	.word	0xcfff69f3
 8008690:	40008000 	.word	0x40008000
 8008694:	40013800 	.word	0x40013800
 8008698:	40004400 	.word	0x40004400
 800869c:	08014460 	.word	0x08014460
 80086a0:	000ffcff 	.word	0x000ffcff
 80086a4:	00f42400 	.word	0x00f42400
        ret = HAL_ERROR;
 80086a8:	2001      	movs	r0, #1
 80086aa:	e7d8      	b.n	800865e <UART_SetConfig+0x25e>
 80086ac:	2001      	movs	r0, #1
 80086ae:	e7d6      	b.n	800865e <UART_SetConfig+0x25e>
          ret = HAL_ERROR;
 80086b0:	2001      	movs	r0, #1
 80086b2:	e7d4      	b.n	800865e <UART_SetConfig+0x25e>
    switch (clocksource)
 80086b4:	2001      	movs	r0, #1
 80086b6:	e7d2      	b.n	800865e <UART_SetConfig+0x25e>
 80086b8:	2000      	movs	r0, #0
 80086ba:	e7d0      	b.n	800865e <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 80086bc:	2001      	movs	r0, #1
 80086be:	e7ce      	b.n	800865e <UART_SetConfig+0x25e>
    switch (clocksource)
 80086c0:	2001      	movs	r0, #1
 80086c2:	e7cc      	b.n	800865e <UART_SetConfig+0x25e>
 80086c4:	2000      	movs	r0, #0
 80086c6:	e7ca      	b.n	800865e <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 80086c8:	2001      	movs	r0, #1
 80086ca:	e7c8      	b.n	800865e <UART_SetConfig+0x25e>

080086cc <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80086cc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80086ce:	f013 0f01 	tst.w	r3, #1
 80086d2:	d006      	beq.n	80086e2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80086d4:	6802      	ldr	r2, [r0, #0]
 80086d6:	6853      	ldr	r3, [r2, #4]
 80086d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80086dc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80086de:	430b      	orrs	r3, r1
 80086e0:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80086e2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80086e4:	f013 0f02 	tst.w	r3, #2
 80086e8:	d006      	beq.n	80086f8 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80086ea:	6802      	ldr	r2, [r0, #0]
 80086ec:	6853      	ldr	r3, [r2, #4]
 80086ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086f2:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80086f4:	430b      	orrs	r3, r1
 80086f6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80086f8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80086fa:	f013 0f04 	tst.w	r3, #4
 80086fe:	d006      	beq.n	800870e <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008700:	6802      	ldr	r2, [r0, #0]
 8008702:	6853      	ldr	r3, [r2, #4]
 8008704:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008708:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800870a:	430b      	orrs	r3, r1
 800870c:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800870e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008710:	f013 0f08 	tst.w	r3, #8
 8008714:	d006      	beq.n	8008724 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008716:	6802      	ldr	r2, [r0, #0]
 8008718:	6853      	ldr	r3, [r2, #4]
 800871a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800871e:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8008720:	430b      	orrs	r3, r1
 8008722:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008724:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008726:	f013 0f10 	tst.w	r3, #16
 800872a:	d006      	beq.n	800873a <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800872c:	6802      	ldr	r2, [r0, #0]
 800872e:	6893      	ldr	r3, [r2, #8]
 8008730:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008734:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8008736:	430b      	orrs	r3, r1
 8008738:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800873a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800873c:	f013 0f20 	tst.w	r3, #32
 8008740:	d006      	beq.n	8008750 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008742:	6802      	ldr	r2, [r0, #0]
 8008744:	6893      	ldr	r3, [r2, #8]
 8008746:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800874a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800874c:	430b      	orrs	r3, r1
 800874e:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008750:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008752:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008756:	d00a      	beq.n	800876e <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008758:	6802      	ldr	r2, [r0, #0]
 800875a:	6853      	ldr	r3, [r2, #4]
 800875c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008760:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8008762:	430b      	orrs	r3, r1
 8008764:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008766:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008768:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800876c:	d00b      	beq.n	8008786 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800876e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008770:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008774:	d006      	beq.n	8008784 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008776:	6802      	ldr	r2, [r0, #0]
 8008778:	6853      	ldr	r3, [r2, #4]
 800877a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800877e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8008780:	430b      	orrs	r3, r1
 8008782:	6053      	str	r3, [r2, #4]
}
 8008784:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008786:	6802      	ldr	r2, [r0, #0]
 8008788:	6853      	ldr	r3, [r2, #4]
 800878a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800878e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8008790:	430b      	orrs	r3, r1
 8008792:	6053      	str	r3, [r2, #4]
 8008794:	e7eb      	b.n	800876e <UART_AdvFeatureConfig+0xa2>

08008796 <UART_WaitOnFlagUntilTimeout>:
{
 8008796:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800879a:	4605      	mov	r5, r0
 800879c:	460f      	mov	r7, r1
 800879e:	4616      	mov	r6, r2
 80087a0:	4699      	mov	r9, r3
 80087a2:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087a6:	682c      	ldr	r4, [r5, #0]
 80087a8:	69e4      	ldr	r4, [r4, #28]
 80087aa:	ea37 0304 	bics.w	r3, r7, r4
 80087ae:	bf0c      	ite	eq
 80087b0:	f04f 0c01 	moveq.w	ip, #1
 80087b4:	f04f 0c00 	movne.w	ip, #0
 80087b8:	45b4      	cmp	ip, r6
 80087ba:	d157      	bne.n	800886c <UART_WaitOnFlagUntilTimeout+0xd6>
    if (Timeout != HAL_MAX_DELAY)
 80087bc:	f1b8 3fff 	cmp.w	r8, #4294967295
 80087c0:	d0f1      	beq.n	80087a6 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087c2:	f7f9 fb95 	bl	8001ef0 <HAL_GetTick>
 80087c6:	eba0 0009 	sub.w	r0, r0, r9
 80087ca:	4540      	cmp	r0, r8
 80087cc:	d82f      	bhi.n	800882e <UART_WaitOnFlagUntilTimeout+0x98>
 80087ce:	f1b8 0f00 	cmp.w	r8, #0
 80087d2:	d02c      	beq.n	800882e <UART_WaitOnFlagUntilTimeout+0x98>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80087d4:	682b      	ldr	r3, [r5, #0]
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	f012 0f04 	tst.w	r2, #4
 80087dc:	d0e3      	beq.n	80087a6 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80087de:	69da      	ldr	r2, [r3, #28]
 80087e0:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80087e4:	d0df      	beq.n	80087a6 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80087e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80087ea:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80087ec:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ee:	e852 3f00 	ldrex	r3, [r2]
 80087f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f6:	e842 3100 	strex	r1, r3, [r2]
 80087fa:	2900      	cmp	r1, #0
 80087fc:	d1f6      	bne.n	80087ec <UART_WaitOnFlagUntilTimeout+0x56>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087fe:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008800:	f102 0308 	add.w	r3, r2, #8
 8008804:	e853 3f00 	ldrex	r3, [r3]
 8008808:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800880c:	3208      	adds	r2, #8
 800880e:	e842 3100 	strex	r1, r3, [r2]
 8008812:	2900      	cmp	r1, #0
 8008814:	d1f3      	bne.n	80087fe <UART_WaitOnFlagUntilTimeout+0x68>
          huart->gState = HAL_UART_STATE_READY;
 8008816:	2320      	movs	r3, #32
 8008818:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800881c:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008820:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 8008824:	2300      	movs	r3, #0
 8008826:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
          return HAL_TIMEOUT;
 800882a:	2003      	movs	r0, #3
 800882c:	e01f      	b.n	800886e <UART_WaitOnFlagUntilTimeout+0xd8>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800882e:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008830:	e852 3f00 	ldrex	r3, [r2]
 8008834:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008838:	e842 3100 	strex	r1, r3, [r2]
 800883c:	2900      	cmp	r1, #0
 800883e:	d1f6      	bne.n	800882e <UART_WaitOnFlagUntilTimeout+0x98>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008840:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008842:	f102 0308 	add.w	r3, r2, #8
 8008846:	e853 3f00 	ldrex	r3, [r3]
 800884a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800884e:	3208      	adds	r2, #8
 8008850:	e842 3100 	strex	r1, r3, [r2]
 8008854:	2900      	cmp	r1, #0
 8008856:	d1f3      	bne.n	8008840 <UART_WaitOnFlagUntilTimeout+0xaa>
        huart->gState = HAL_UART_STATE_READY;
 8008858:	2320      	movs	r3, #32
 800885a:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800885e:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 8008862:	2300      	movs	r3, #0
 8008864:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 8008868:	2003      	movs	r0, #3
 800886a:	e000      	b.n	800886e <UART_WaitOnFlagUntilTimeout+0xd8>
  return HAL_OK;
 800886c:	2000      	movs	r0, #0
}
 800886e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08008872 <UART_CheckIdleState>:
{
 8008872:	b530      	push	{r4, r5, lr}
 8008874:	b083      	sub	sp, #12
 8008876:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008878:	2300      	movs	r3, #0
 800887a:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 800887e:	f7f9 fb37 	bl	8001ef0 <HAL_GetTick>
 8008882:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008884:	6822      	ldr	r2, [r4, #0]
 8008886:	6812      	ldr	r2, [r2, #0]
 8008888:	f012 0f08 	tst.w	r2, #8
 800888c:	d10f      	bne.n	80088ae <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800888e:	6823      	ldr	r3, [r4, #0]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f013 0f04 	tst.w	r3, #4
 8008896:	d118      	bne.n	80088ca <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8008898:	2320      	movs	r3, #32
 800889a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800889e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088a2:	2000      	movs	r0, #0
 80088a4:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 80088a6:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 80088aa:	b003      	add	sp, #12
 80088ac:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088ae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80088b2:	9300      	str	r3, [sp, #0]
 80088b4:	4603      	mov	r3, r0
 80088b6:	2200      	movs	r2, #0
 80088b8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80088bc:	4620      	mov	r0, r4
 80088be:	f7ff ff6a 	bl	8008796 <UART_WaitOnFlagUntilTimeout>
 80088c2:	2800      	cmp	r0, #0
 80088c4:	d0e3      	beq.n	800888e <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 80088c6:	2003      	movs	r0, #3
 80088c8:	e7ef      	b.n	80088aa <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088ca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80088ce:	9300      	str	r3, [sp, #0]
 80088d0:	462b      	mov	r3, r5
 80088d2:	2200      	movs	r2, #0
 80088d4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80088d8:	4620      	mov	r0, r4
 80088da:	f7ff ff5c 	bl	8008796 <UART_WaitOnFlagUntilTimeout>
 80088de:	2800      	cmp	r0, #0
 80088e0:	d0da      	beq.n	8008898 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 80088e2:	2003      	movs	r0, #3
 80088e4:	e7e1      	b.n	80088aa <UART_CheckIdleState+0x38>

080088e6 <HAL_UART_Init>:
  if (huart == NULL)
 80088e6:	b378      	cbz	r0, 8008948 <HAL_UART_Init+0x62>
{
 80088e8:	b510      	push	{r4, lr}
 80088ea:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80088ec:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80088f0:	b30b      	cbz	r3, 8008936 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80088f2:	2324      	movs	r3, #36	; 0x24
 80088f4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 80088f8:	6822      	ldr	r2, [r4, #0]
 80088fa:	6813      	ldr	r3, [r2, #0]
 80088fc:	f023 0301 	bic.w	r3, r3, #1
 8008900:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008902:	4620      	mov	r0, r4
 8008904:	f7ff fd7c 	bl	8008400 <UART_SetConfig>
 8008908:	2801      	cmp	r0, #1
 800890a:	d013      	beq.n	8008934 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800890c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800890e:	b9bb      	cbnz	r3, 8008940 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008910:	6822      	ldr	r2, [r4, #0]
 8008912:	6853      	ldr	r3, [r2, #4]
 8008914:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8008918:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800891a:	6822      	ldr	r2, [r4, #0]
 800891c:	6893      	ldr	r3, [r2, #8]
 800891e:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8008922:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8008924:	6822      	ldr	r2, [r4, #0]
 8008926:	6813      	ldr	r3, [r2, #0]
 8008928:	f043 0301 	orr.w	r3, r3, #1
 800892c:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800892e:	4620      	mov	r0, r4
 8008930:	f7ff ff9f 	bl	8008872 <UART_CheckIdleState>
}
 8008934:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8008936:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 800893a:	f7f9 fdff 	bl	800253c <HAL_UART_MspInit>
 800893e:	e7d8      	b.n	80088f2 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8008940:	4620      	mov	r0, r4
 8008942:	f7ff fec3 	bl	80086cc <UART_AdvFeatureConfig>
 8008946:	e7e3      	b.n	8008910 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8008948:	2001      	movs	r0, #1
}
 800894a:	4770      	bx	lr

0800894c <UART_Start_Receive_IT>:
{
 800894c:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 800894e:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008950:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008954:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008958:	2300      	movs	r3, #0
 800895a:	6703      	str	r3, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 800895c:	6883      	ldr	r3, [r0, #8]
 800895e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008962:	d006      	beq.n	8008972 <UART_Start_Receive_IT+0x26>
 8008964:	b9a3      	cbnz	r3, 8008990 <UART_Start_Receive_IT+0x44>
 8008966:	6903      	ldr	r3, [r0, #16]
 8008968:	b973      	cbnz	r3, 8008988 <UART_Start_Receive_IT+0x3c>
 800896a:	23ff      	movs	r3, #255	; 0xff
 800896c:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8008970:	e014      	b.n	800899c <UART_Start_Receive_IT+0x50>
 8008972:	6903      	ldr	r3, [r0, #16]
 8008974:	b923      	cbnz	r3, 8008980 <UART_Start_Receive_IT+0x34>
 8008976:	f240 13ff 	movw	r3, #511	; 0x1ff
 800897a:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800897e:	e00d      	b.n	800899c <UART_Start_Receive_IT+0x50>
 8008980:	23ff      	movs	r3, #255	; 0xff
 8008982:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8008986:	e009      	b.n	800899c <UART_Start_Receive_IT+0x50>
 8008988:	237f      	movs	r3, #127	; 0x7f
 800898a:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800898e:	e005      	b.n	800899c <UART_Start_Receive_IT+0x50>
 8008990:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008994:	d030      	beq.n	80089f8 <UART_Start_Receive_IT+0xac>
 8008996:	2300      	movs	r3, #0
 8008998:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800899c:	2300      	movs	r3, #0
 800899e:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80089a2:	2322      	movs	r3, #34	; 0x22
 80089a4:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089a8:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089aa:	f101 0308 	add.w	r3, r1, #8
 80089ae:	e853 3f00 	ldrex	r3, [r3]
 80089b2:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b6:	3108      	adds	r1, #8
 80089b8:	e841 3400 	strex	r4, r3, [r1]
 80089bc:	2c00      	cmp	r4, #0
 80089be:	d1f3      	bne.n	80089a8 <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80089c0:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80089c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089c6:	d021      	beq.n	8008a0c <UART_Start_Receive_IT+0xc0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089c8:	6883      	ldr	r3, [r0, #8]
 80089ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089ce:	d048      	beq.n	8008a62 <UART_Start_Receive_IT+0x116>
      huart->RxISR = UART_RxISR_8BIT;
 80089d0:	4b2c      	ldr	r3, [pc, #176]	; (8008a84 <UART_Start_Receive_IT+0x138>)
 80089d2:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 80089d4:	2300      	movs	r3, #0
 80089d6:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 80089da:	6903      	ldr	r3, [r0, #16]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d046      	beq.n	8008a6e <UART_Start_Receive_IT+0x122>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80089e0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089e2:	e852 3f00 	ldrex	r3, [r2]
 80089e6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ea:	e842 3100 	strex	r1, r3, [r2]
 80089ee:	2900      	cmp	r1, #0
 80089f0:	d1f6      	bne.n	80089e0 <UART_Start_Receive_IT+0x94>
}
 80089f2:	2000      	movs	r0, #0
 80089f4:	bc10      	pop	{r4}
 80089f6:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 80089f8:	6903      	ldr	r3, [r0, #16]
 80089fa:	b91b      	cbnz	r3, 8008a04 <UART_Start_Receive_IT+0xb8>
 80089fc:	237f      	movs	r3, #127	; 0x7f
 80089fe:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8008a02:	e7cb      	b.n	800899c <UART_Start_Receive_IT+0x50>
 8008a04:	233f      	movs	r3, #63	; 0x3f
 8008a06:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8008a0a:	e7c7      	b.n	800899c <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008a0c:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d8d9      	bhi.n	80089c8 <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a14:	6883      	ldr	r3, [r0, #8]
 8008a16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a1a:	d01c      	beq.n	8008a56 <UART_Start_Receive_IT+0x10a>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008a1c:	4b1a      	ldr	r3, [pc, #104]	; (8008a88 <UART_Start_Receive_IT+0x13c>)
 8008a1e:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8008a20:	2300      	movs	r3, #0
 8008a22:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008a26:	6903      	ldr	r3, [r0, #16]
 8008a28:	b143      	cbz	r3, 8008a3c <UART_Start_Receive_IT+0xf0>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a2a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a2c:	e852 3f00 	ldrex	r3, [r2]
 8008a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a34:	e842 3100 	strex	r1, r3, [r2]
 8008a38:	2900      	cmp	r1, #0
 8008a3a:	d1f6      	bne.n	8008a2a <UART_Start_Receive_IT+0xde>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008a3c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a3e:	f102 0308 	add.w	r3, r2, #8
 8008a42:	e853 3f00 	ldrex	r3, [r3]
 8008a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4a:	3208      	adds	r2, #8
 8008a4c:	e842 3100 	strex	r1, r3, [r2]
 8008a50:	2900      	cmp	r1, #0
 8008a52:	d1f3      	bne.n	8008a3c <UART_Start_Receive_IT+0xf0>
 8008a54:	e7cd      	b.n	80089f2 <UART_Start_Receive_IT+0xa6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a56:	6903      	ldr	r3, [r0, #16]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d1df      	bne.n	8008a1c <UART_Start_Receive_IT+0xd0>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008a5c:	4b0b      	ldr	r3, [pc, #44]	; (8008a8c <UART_Start_Receive_IT+0x140>)
 8008a5e:	6703      	str	r3, [r0, #112]	; 0x70
 8008a60:	e7de      	b.n	8008a20 <UART_Start_Receive_IT+0xd4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a62:	6903      	ldr	r3, [r0, #16]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d1b3      	bne.n	80089d0 <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 8008a68:	4b09      	ldr	r3, [pc, #36]	; (8008a90 <UART_Start_Receive_IT+0x144>)
 8008a6a:	6703      	str	r3, [r0, #112]	; 0x70
 8008a6c:	e7b2      	b.n	80089d4 <UART_Start_Receive_IT+0x88>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008a6e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a70:	e852 3f00 	ldrex	r3, [r2]
 8008a74:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a78:	e842 3100 	strex	r1, r3, [r2]
 8008a7c:	2900      	cmp	r1, #0
 8008a7e:	d1f6      	bne.n	8008a6e <UART_Start_Receive_IT+0x122>
 8008a80:	e7b7      	b.n	80089f2 <UART_Start_Receive_IT+0xa6>
 8008a82:	bf00      	nop
 8008a84:	08007f5d 	.word	0x08007f5d
 8008a88:	080080c1 	.word	0x080080c1
 8008a8c:	08008261 	.word	0x08008261
 8008a90:	0800800f 	.word	0x0800800f

08008a94 <HAL_UART_Receive_IT>:
{
 8008a94:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8008a96:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8008a9a:	2b20      	cmp	r3, #32
 8008a9c:	d11e      	bne.n	8008adc <HAL_UART_Receive_IT+0x48>
    if ((pData == NULL) || (Size == 0U))
 8008a9e:	b1f9      	cbz	r1, 8008ae0 <HAL_UART_Receive_IT+0x4c>
 8008aa0:	b302      	cbz	r2, 8008ae4 <HAL_UART_Receive_IT+0x50>
    __HAL_LOCK(huart);
 8008aa2:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d01e      	beq.n	8008ae8 <HAL_UART_Receive_IT+0x54>
 8008aaa:	2301      	movs	r3, #1
 8008aac:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008ab4:	6803      	ldr	r3, [r0, #0]
 8008ab6:	4c0d      	ldr	r4, [pc, #52]	; (8008aec <HAL_UART_Receive_IT+0x58>)
 8008ab8:	42a3      	cmp	r3, r4
 8008aba:	d00c      	beq.n	8008ad6 <HAL_UART_Receive_IT+0x42>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8008ac2:	d008      	beq.n	8008ad6 <HAL_UART_Receive_IT+0x42>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008ac4:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac6:	e854 3f00 	ldrex	r3, [r4]
 8008aca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ace:	e844 3500 	strex	r5, r3, [r4]
 8008ad2:	2d00      	cmp	r5, #0
 8008ad4:	d1f6      	bne.n	8008ac4 <HAL_UART_Receive_IT+0x30>
    return(UART_Start_Receive_IT(huart, pData, Size));
 8008ad6:	f7ff ff39 	bl	800894c <UART_Start_Receive_IT>
 8008ada:	e000      	b.n	8008ade <HAL_UART_Receive_IT+0x4a>
    return HAL_BUSY;
 8008adc:	2002      	movs	r0, #2
}
 8008ade:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8008ae0:	2001      	movs	r0, #1
 8008ae2:	e7fc      	b.n	8008ade <HAL_UART_Receive_IT+0x4a>
 8008ae4:	2001      	movs	r0, #1
 8008ae6:	e7fa      	b.n	8008ade <HAL_UART_Receive_IT+0x4a>
    __HAL_LOCK(huart);
 8008ae8:	2002      	movs	r0, #2
 8008aea:	e7f8      	b.n	8008ade <HAL_UART_Receive_IT+0x4a>
 8008aec:	40008000 	.word	0x40008000

08008af0 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8008af0:	b082      	sub	sp, #8
 8008af2:	ab02      	add	r3, sp, #8
 8008af4:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8008af8:	6802      	ldr	r2, [r0, #0]
 8008afa:	6853      	ldr	r3, [r2, #4]
 8008afc:	f023 0310 	bic.w	r3, r3, #16
 8008b00:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8008b04:	430b      	orrs	r3, r1
 8008b06:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8008b08:	6802      	ldr	r2, [r0, #0]
 8008b0a:	6853      	ldr	r3, [r2, #4]
 8008b0c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008b10:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8008b14:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008b18:	6053      	str	r3, [r2, #4]
}
 8008b1a:	b002      	add	sp, #8
 8008b1c:	4770      	bx	lr
	...

08008b20 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008b20:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8008b22:	b92b      	cbnz	r3, 8008b30 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8008b24:	2301      	movs	r3, #1
 8008b26:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008b2a:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8008b2e:	4770      	bx	lr
{
 8008b30:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008b32:	6803      	ldr	r3, [r0, #0]
 8008b34:	689a      	ldr	r2, [r3, #8]
 8008b36:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008b3a:	6899      	ldr	r1, [r3, #8]
 8008b3c:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b3e:	4d09      	ldr	r5, [pc, #36]	; (8008b64 <UARTEx_SetNbDataToProcess+0x44>)
 8008b40:	5c6b      	ldrb	r3, [r5, r1]
 8008b42:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008b44:	4c08      	ldr	r4, [pc, #32]	; (8008b68 <UARTEx_SetNbDataToProcess+0x48>)
 8008b46:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b48:	fb93 f3f1 	sdiv	r3, r3, r1
 8008b4c:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b50:	5cab      	ldrb	r3, [r5, r2]
 8008b52:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008b54:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b56:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b5a:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8008b5e:	bc30      	pop	{r4, r5}
 8008b60:	4770      	bx	lr
 8008b62:	bf00      	nop
 8008b64:	08014480 	.word	0x08014480
 8008b68:	08014478 	.word	0x08014478

08008b6c <HAL_UARTEx_WakeupCallback>:
}
 8008b6c:	4770      	bx	lr

08008b6e <HAL_UARTEx_RxFifoFullCallback>:
}
 8008b6e:	4770      	bx	lr

08008b70 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8008b70:	4770      	bx	lr

08008b72 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 8008b72:	b510      	push	{r4, lr}
 8008b74:	b084      	sub	sp, #16
 8008b76:	ab04      	add	r3, sp, #16
 8008b78:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 8008b7c:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d035      	beq.n	8008bf0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 8008b84:	4604      	mov	r4, r0
 8008b86:	2301      	movs	r3, #1
 8008b88:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8008b8c:	2324      	movs	r3, #36	; 0x24
 8008b8e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8008b92:	6802      	ldr	r2, [r0, #0]
 8008b94:	6813      	ldr	r3, [r2, #0]
 8008b96:	f023 0301 	bic.w	r3, r3, #1
 8008b9a:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8008b9c:	6801      	ldr	r1, [r0, #0]
 8008b9e:	688b      	ldr	r3, [r1, #8]
 8008ba0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008ba4:	9a02      	ldr	r2, [sp, #8]
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8008baa:	b1aa      	cbz	r2, 8008bd8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 8008bac:	6822      	ldr	r2, [r4, #0]
 8008bae:	6813      	ldr	r3, [r2, #0]
 8008bb0:	f043 0301 	orr.w	r3, r3, #1
 8008bb4:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8008bb6:	f7f9 f99b 	bl	8001ef0 <HAL_GetTick>
 8008bba:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008bbc:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8008bc0:	9200      	str	r2, [sp, #0]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008bc8:	4620      	mov	r0, r4
 8008bca:	f7ff fde4 	bl	8008796 <UART_WaitOnFlagUntilTimeout>
 8008bce:	b948      	cbnz	r0, 8008be4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 8008bd0:	2320      	movs	r3, #32
 8008bd2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8008bd6:	e006      	b.n	8008be6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8008bd8:	ab04      	add	r3, sp, #16
 8008bda:	e913 0006 	ldmdb	r3, {r1, r2}
 8008bde:	f7ff ff87 	bl	8008af0 <UARTEx_Wakeup_AddressConfig>
 8008be2:	e7e3      	b.n	8008bac <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 8008be4:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 8008be6:	2300      	movs	r3, #0
 8008be8:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8008bec:	b004      	add	sp, #16
 8008bee:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8008bf0:	2002      	movs	r0, #2
 8008bf2:	e7fb      	b.n	8008bec <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

08008bf4 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 8008bf4:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d010      	beq.n	8008c1e <HAL_UARTEx_EnableStopMode+0x2a>
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8008c02:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c04:	e852 3f00 	ldrex	r3, [r2]
 8008c08:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c0c:	e842 3100 	strex	r1, r3, [r2]
 8008c10:	2900      	cmp	r1, #0
 8008c12:	d1f6      	bne.n	8008c02 <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 8008c14:	2300      	movs	r3, #0
 8008c16:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	4770      	bx	lr
  __HAL_LOCK(huart);
 8008c1e:	2002      	movs	r0, #2
}
 8008c20:	4770      	bx	lr

08008c22 <HAL_UARTEx_EnableFifoMode>:
  __HAL_LOCK(huart);
 8008c22:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d01d      	beq.n	8008c66 <HAL_UARTEx_EnableFifoMode+0x44>
{
 8008c2a:	b510      	push	{r4, lr}
 8008c2c:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8008c2e:	2301      	movs	r3, #1
 8008c30:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8008c34:	2324      	movs	r3, #36	; 0x24
 8008c36:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c3a:	6802      	ldr	r2, [r0, #0]
 8008c3c:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8008c3e:	6811      	ldr	r1, [r2, #0]
 8008c40:	f021 0101 	bic.w	r1, r1, #1
 8008c44:	6011      	str	r1, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008c46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8008c4a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8008c4e:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c50:	6802      	ldr	r2, [r0, #0]
 8008c52:	6013      	str	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 8008c54:	f7ff ff64 	bl	8008b20 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8008c58:	2320      	movs	r3, #32
 8008c5a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8008c5e:	2000      	movs	r0, #0
 8008c60:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8008c64:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8008c66:	2002      	movs	r0, #2
}
 8008c68:	4770      	bx	lr

08008c6a <HAL_UARTEx_SetTxFifoThreshold>:
{
 8008c6a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8008c6c:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d01d      	beq.n	8008cb0 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8008c74:	4604      	mov	r4, r0
 8008c76:	2301      	movs	r3, #1
 8008c78:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8008c7c:	2324      	movs	r3, #36	; 0x24
 8008c7e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c82:	6803      	ldr	r3, [r0, #0]
 8008c84:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	f022 0201 	bic.w	r2, r2, #1
 8008c8c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008c8e:	6802      	ldr	r2, [r0, #0]
 8008c90:	6893      	ldr	r3, [r2, #8]
 8008c92:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8008c96:	4319      	orrs	r1, r3
 8008c98:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8008c9a:	f7ff ff41 	bl	8008b20 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c9e:	6823      	ldr	r3, [r4, #0]
 8008ca0:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8008ca2:	2320      	movs	r3, #32
 8008ca4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8008ca8:	2000      	movs	r0, #0
 8008caa:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8008cae:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8008cb0:	2002      	movs	r0, #2
 8008cb2:	e7fc      	b.n	8008cae <HAL_UARTEx_SetTxFifoThreshold+0x44>

08008cb4 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8008cb4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8008cb6:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8008cba:	2b01      	cmp	r3, #1
 8008cbc:	d01d      	beq.n	8008cfa <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8008cbe:	4604      	mov	r4, r0
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8008cc6:	2324      	movs	r3, #36	; 0x24
 8008cc8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ccc:	6803      	ldr	r3, [r0, #0]
 8008cce:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	f022 0201 	bic.w	r2, r2, #1
 8008cd6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008cd8:	6802      	ldr	r2, [r0, #0]
 8008cda:	6893      	ldr	r3, [r2, #8]
 8008cdc:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8008ce0:	4319      	orrs	r1, r3
 8008ce2:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8008ce4:	f7ff ff1c 	bl	8008b20 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ce8:	6823      	ldr	r3, [r4, #0]
 8008cea:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8008cec:	2320      	movs	r3, #32
 8008cee:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8008cf2:	2000      	movs	r0, #0
 8008cf4:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8008cf8:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8008cfa:	2002      	movs	r0, #2
 8008cfc:	e7fc      	b.n	8008cf8 <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

08008d00 <LmHandlerPackageIsInitialized>:
    }
}

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 8008d00:	2804      	cmp	r0, #4
 8008d02:	d807      	bhi.n	8008d14 <LmHandlerPackageIsInitialized+0x14>
{
 8008d04:	b508      	push	{r3, lr}
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 8008d06:	4b05      	ldr	r3, [pc, #20]	; (8008d1c <LmHandlerPackageIsInitialized+0x1c>)
 8008d08:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	b11b      	cbz	r3, 8008d18 <LmHandlerPackageIsInitialized+0x18>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 8008d10:	4798      	blx	r3
    }
    else
    {
        return false;
    }
}
 8008d12:	bd08      	pop	{r3, pc}
        return false;
 8008d14:	2000      	movs	r0, #0
}
 8008d16:	4770      	bx	lr
        return false;
 8008d18:	2000      	movs	r0, #0
 8008d1a:	e7fa      	b.n	8008d12 <LmHandlerPackageIsInitialized+0x12>
 8008d1c:	20000868 	.word	0x20000868

08008d20 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 8008d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d22:	4605      	mov	r5, r0
 8008d24:	460f      	mov	r7, r1
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8008d26:	2400      	movs	r4, #0
 8008d28:	e005      	b.n	8008d36 <LmHandlerPackagesNotify+0x16>
        {
            switch( notifyType )
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 8008d2a:	699b      	ldr	r3, [r3, #24]
 8008d2c:	b10b      	cbz	r3, 8008d32 <LmHandlerPackagesNotify+0x12>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 8008d2e:	4638      	mov	r0, r7
 8008d30:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8008d32:	3401      	adds	r4, #1
 8008d34:	b264      	sxtb	r4, r4
 8008d36:	2c04      	cmp	r4, #4
 8008d38:	dc34      	bgt.n	8008da4 <LmHandlerPackagesNotify+0x84>
        if( LmHandlerPackages[i] != NULL )
 8008d3a:	4626      	mov	r6, r4
 8008d3c:	4b1a      	ldr	r3, [pc, #104]	; (8008da8 <LmHandlerPackagesNotify+0x88>)
 8008d3e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d0f5      	beq.n	8008d32 <LmHandlerPackagesNotify+0x12>
            switch( notifyType )
 8008d46:	2d03      	cmp	r5, #3
 8008d48:	d8f3      	bhi.n	8008d32 <LmHandlerPackagesNotify+0x12>
 8008d4a:	a201      	add	r2, pc, #4	; (adr r2, 8008d50 <LmHandlerPackagesNotify+0x30>)
 8008d4c:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 8008d50:	08008d2b 	.word	0x08008d2b
 8008d54:	08008d61 	.word	0x08008d61
 8008d58:	08008d8d 	.word	0x08008d8d
 8008d5c:	08008d99 	.word	0x08008d99
                    break;
                }
                case PACKAGE_MCPS_INDICATION:
                {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 8008d60:	69da      	ldr	r2, [r3, #28]
 8008d62:	2a00      	cmp	r2, #0
 8008d64:	d0e5      	beq.n	8008d32 <LmHandlerPackagesNotify+0x12>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 8008d66:	781a      	ldrb	r2, [r3, #0]
 8008d68:	78fb      	ldrb	r3, [r7, #3]
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d007      	beq.n	8008d7e <LmHandlerPackagesNotify+0x5e>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 8008d6e:	2c00      	cmp	r4, #0
 8008d70:	d1df      	bne.n	8008d32 <LmHandlerPackagesNotify+0x12>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 8008d72:	4b0d      	ldr	r3, [pc, #52]	; (8008da8 <LmHandlerPackagesNotify+0x88>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	68db      	ldr	r3, [r3, #12]
 8008d78:	4798      	blx	r3
 8008d7a:	2800      	cmp	r0, #0
 8008d7c:	d0d9      	beq.n	8008d32 <LmHandlerPackagesNotify+0x12>
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
#endif /* LORAMAC_VERSION */
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 8008d7e:	4b0a      	ldr	r3, [pc, #40]	; (8008da8 <LmHandlerPackagesNotify+0x88>)
 8008d80:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8008d84:	69db      	ldr	r3, [r3, #28]
 8008d86:	4638      	mov	r0, r7
 8008d88:	4798      	blx	r3
 8008d8a:	e7d2      	b.n	8008d32 <LmHandlerPackagesNotify+0x12>
                    }
                    break;
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 8008d8c:	6a1b      	ldr	r3, [r3, #32]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d0cf      	beq.n	8008d32 <LmHandlerPackagesNotify+0x12>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 8008d92:	4638      	mov	r0, r7
 8008d94:	4798      	blx	r3
 8008d96:	e7cc      	b.n	8008d32 <LmHandlerPackagesNotify+0x12>
                    }
                    break;
                }
                case PACKAGE_MLME_INDICATION:
                {
                    if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 8008d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d0c9      	beq.n	8008d32 <LmHandlerPackagesNotify+0x12>
                    {
                        LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 8008d9e:	4638      	mov	r0, r7
 8008da0:	4798      	blx	r3
 8008da2:	e7c6      	b.n	8008d32 <LmHandlerPackagesNotify+0x12>
                    break;
                }
            }
        }
    }
}
 8008da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008da6:	bf00      	nop
 8008da8:	20000868 	.word	0x20000868

08008dac <McpsConfirm>:
{
 8008dac:	b510      	push	{r4, lr}
 8008dae:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 1;
 8008db0:	480c      	ldr	r0, [pc, #48]	; (8008de4 <McpsConfirm+0x38>)
 8008db2:	2301      	movs	r3, #1
 8008db4:	7003      	strb	r3, [r0, #0]
    TxParams.Status = mcpsConfirm->Status;
 8008db6:	7863      	ldrb	r3, [r4, #1]
 8008db8:	7043      	strb	r3, [r0, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 8008dba:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8008dbe:	7283      	strb	r3, [r0, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 8008dc0:	68e3      	ldr	r3, [r4, #12]
 8008dc2:	60c3      	str	r3, [r0, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 8008dc4:	f994 3003 	ldrsb.w	r3, [r4, #3]
 8008dc8:	7603      	strb	r3, [r0, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 8008dca:	6923      	ldr	r3, [r4, #16]
 8008dcc:	7643      	strb	r3, [r0, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 8008dce:	7923      	ldrb	r3, [r4, #4]
 8008dd0:	7243      	strb	r3, [r0, #9]
    LmHandlerCallbacks->OnTxData( &TxParams );
 8008dd2:	4b05      	ldr	r3, [pc, #20]	; (8008de8 <McpsConfirm+0x3c>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dd8:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 8008dda:	4621      	mov	r1, r4
 8008ddc:	2000      	movs	r0, #0
 8008dde:	f7ff ff9f 	bl	8008d20 <LmHandlerPackagesNotify>
}
 8008de2:	bd10      	pop	{r4, pc}
 8008de4:	200000b8 	.word	0x200000b8
 8008de8:	20000864 	.word	0x20000864

08008dec <LmHandlerPackagesProcess>:
    return false;
}
#endif /* LORAMAC_VERSION */

static void LmHandlerPackagesProcess( void )
{
 8008dec:	b538      	push	{r3, r4, r5, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8008dee:	2400      	movs	r4, #0
 8008df0:	e001      	b.n	8008df6 <LmHandlerPackagesProcess+0xa>
 8008df2:	3401      	adds	r4, #1
 8008df4:	b264      	sxtb	r4, r4
 8008df6:	2c04      	cmp	r4, #4
 8008df8:	dc12      	bgt.n	8008e20 <LmHandlerPackagesProcess+0x34>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 8008dfa:	4b0a      	ldr	r3, [pc, #40]	; (8008e24 <LmHandlerPackagesProcess+0x38>)
 8008dfc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d0f6      	beq.n	8008df2 <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8008e04:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d0f3      	beq.n	8008df2 <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 8008e0a:	b2e0      	uxtb	r0, r4
 8008e0c:	f7ff ff78 	bl	8008d00 <LmHandlerPackageIsInitialized>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8008e10:	2800      	cmp	r0, #0
 8008e12:	d0ee      	beq.n	8008df2 <LmHandlerPackagesProcess+0x6>
        {
            LmHandlerPackages[i]->Process( );
 8008e14:	4b03      	ldr	r3, [pc, #12]	; (8008e24 <LmHandlerPackagesProcess+0x38>)
 8008e16:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008e1a:	691b      	ldr	r3, [r3, #16]
 8008e1c:	4798      	blx	r3
 8008e1e:	e7e8      	b.n	8008df2 <LmHandlerPackagesProcess+0x6>
        }
    }
}
 8008e20:	bd38      	pop	{r3, r4, r5, pc}
 8008e22:	bf00      	nop
 8008e24:	20000868 	.word	0x20000868

08008e28 <LmHandlerDeviceTimeReq>:
{
 8008e28:	b500      	push	{lr}
 8008e2a:	b087      	sub	sp, #28
    mlmeReq.Type = MLME_DEVICE_TIME;
 8008e2c:	230a      	movs	r3, #10
 8008e2e:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMlmeRequest( &mlmeReq );
 8008e32:	a801      	add	r0, sp, #4
 8008e34:	f003 fe04 	bl	800ca40 <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 8008e38:	9a05      	ldr	r2, [sp, #20]
 8008e3a:	4b04      	ldr	r3, [pc, #16]	; (8008e4c <LmHandlerDeviceTimeReq+0x24>)
 8008e3c:	601a      	str	r2, [r3, #0]
    if( status == LORAMAC_STATUS_OK )
 8008e3e:	b910      	cbnz	r0, 8008e46 <LmHandlerDeviceTimeReq+0x1e>
}
 8008e40:	b007      	add	sp, #28
 8008e42:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 8008e46:	f04f 30ff 	mov.w	r0, #4294967295
 8008e4a:	e7f9      	b.n	8008e40 <LmHandlerDeviceTimeReq+0x18>
 8008e4c:	20000860 	.word	0x20000860

08008e50 <LmHandlerProcess>:
{
 8008e50:	b508      	push	{r3, lr}
    LoRaMacProcess( );
 8008e52:	f002 ff5b 	bl	800bd0c <LoRaMacProcess>
    LmHandlerPackagesProcess( );
 8008e56:	f7ff ffc9 	bl	8008dec <LmHandlerPackagesProcess>
}
 8008e5a:	bd08      	pop	{r3, pc}

08008e5c <LmHandlerGetDutyCycleWaitTime>:
}
 8008e5c:	4b01      	ldr	r3, [pc, #4]	; (8008e64 <LmHandlerGetDutyCycleWaitTime+0x8>)
 8008e5e:	6818      	ldr	r0, [r3, #0]
 8008e60:	4770      	bx	lr
 8008e62:	bf00      	nop
 8008e64:	20000860 	.word	0x20000860

08008e68 <LmHandlerJoinStatus>:
{
 8008e68:	b500      	push	{lr}
 8008e6a:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 8008e72:	a801      	add	r0, sp, #4
 8008e74:	f003 fa22 	bl	800c2bc <LoRaMacMibGetRequestConfirm>
    if( status == LORAMAC_STATUS_OK )
 8008e78:	b920      	cbnz	r0, 8008e84 <LmHandlerJoinStatus+0x1c>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 8008e7a:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8008e7e:	b110      	cbz	r0, 8008e86 <LmHandlerJoinStatus+0x1e>
            return LORAMAC_HANDLER_SET;
 8008e80:	2001      	movs	r0, #1
 8008e82:	e000      	b.n	8008e86 <LmHandlerJoinStatus+0x1e>
        return LORAMAC_HANDLER_RESET;
 8008e84:	2000      	movs	r0, #0
}
 8008e86:	b00b      	add	sp, #44	; 0x2c
 8008e88:	f85d fb04 	ldr.w	pc, [sp], #4

08008e8c <LmHandlerRequestClass>:
{
 8008e8c:	b510      	push	{r4, lr}
 8008e8e:	b08a      	sub	sp, #40	; 0x28
 8008e90:	4604      	mov	r4, r0
    if (LoRaMacIsBusy() == true)
 8008e92:	f002 ff29 	bl	800bce8 <LoRaMacIsBusy>
 8008e96:	2800      	cmp	r0, #0
 8008e98:	d136      	bne.n	8008f08 <LmHandlerRequestClass+0x7c>
    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 8008e9a:	f7ff ffe5 	bl	8008e68 <LmHandlerJoinStatus>
 8008e9e:	2801      	cmp	r0, #1
 8008ea0:	d135      	bne.n	8008f0e <LmHandlerRequestClass+0x82>
    mibReq.Type = MIB_DEVICE_CLASS;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	f88d 3004 	strb.w	r3, [sp, #4]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8008ea8:	a801      	add	r0, sp, #4
 8008eaa:	f003 fa07 	bl	800c2bc <LoRaMacMibGetRequestConfirm>
 8008eae:	bb88      	cbnz	r0, 8008f14 <LmHandlerRequestClass+0x88>
    currentClass = mibReq.Param.Class;
 8008eb0:	f89d 3008 	ldrb.w	r3, [sp, #8]
    if( currentClass != newClass )
 8008eb4:	42a3      	cmp	r3, r4
 8008eb6:	d030      	beq.n	8008f1a <LmHandlerRequestClass+0x8e>
        switch( newClass )
 8008eb8:	2c01      	cmp	r4, #1
 8008eba:	d030      	beq.n	8008f1e <LmHandlerRequestClass+0x92>
 8008ebc:	2c02      	cmp	r4, #2
 8008ebe:	d014      	beq.n	8008eea <LmHandlerRequestClass+0x5e>
 8008ec0:	b114      	cbz	r4, 8008ec8 <LmHandlerRequestClass+0x3c>
 8008ec2:	2000      	movs	r0, #0
}
 8008ec4:	b00a      	add	sp, #40	; 0x28
 8008ec6:	bd10      	pop	{r4, pc}
                if( currentClass != CLASS_A )
 8008ec8:	b90b      	cbnz	r3, 8008ece <LmHandlerRequestClass+0x42>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8008eca:	2000      	movs	r0, #0
 8008ecc:	e7fa      	b.n	8008ec4 <LmHandlerRequestClass+0x38>
                    mibReq.Param.Class = newClass;
 8008ece:	f88d 4008 	strb.w	r4, [sp, #8]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8008ed2:	a801      	add	r0, sp, #4
 8008ed4:	f003 fb28 	bl	800c528 <LoRaMacMibSetRequestConfirm>
 8008ed8:	bb20      	cbnz	r0, 8008f24 <LmHandlerRequestClass+0x98>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 8008eda:	4b19      	ldr	r3, [pc, #100]	; (8008f40 <LmHandlerRequestClass+0xb4>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ee0:	b31b      	cbz	r3, 8008f2a <LmHandlerRequestClass+0x9e>
                            LmHandlerCallbacks->OnClassChange( newClass );
 8008ee2:	4620      	mov	r0, r4
 8008ee4:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8008ee6:	2000      	movs	r0, #0
 8008ee8:	e7ec      	b.n	8008ec4 <LmHandlerRequestClass+0x38>
                if( currentClass != CLASS_A )
 8008eea:	bb03      	cbnz	r3, 8008f2e <LmHandlerRequestClass+0xa2>
                    mibReq.Param.Class = newClass;
 8008eec:	f88d 4008 	strb.w	r4, [sp, #8]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 8008ef0:	a801      	add	r0, sp, #4
 8008ef2:	f003 fb19 	bl	800c528 <LoRaMacMibSetRequestConfirm>
 8008ef6:	b9e8      	cbnz	r0, 8008f34 <LmHandlerRequestClass+0xa8>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 8008ef8:	4b11      	ldr	r3, [pc, #68]	; (8008f40 <LmHandlerRequestClass+0xb4>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008efe:	b1e3      	cbz	r3, 8008f3a <LmHandlerRequestClass+0xae>
                            LmHandlerCallbacks->OnClassChange( newClass );
 8008f00:	4620      	mov	r0, r4
 8008f02:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8008f04:	2000      	movs	r0, #0
 8008f06:	e7dd      	b.n	8008ec4 <LmHandlerRequestClass+0x38>
        return LORAMAC_HANDLER_BUSY_ERROR;
 8008f08:	f06f 0001 	mvn.w	r0, #1
 8008f0c:	e7da      	b.n	8008ec4 <LmHandlerRequestClass+0x38>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8008f0e:	f06f 0002 	mvn.w	r0, #2
 8008f12:	e7d7      	b.n	8008ec4 <LmHandlerRequestClass+0x38>
        return LORAMAC_HANDLER_ERROR;
 8008f14:	f04f 30ff 	mov.w	r0, #4294967295
 8008f18:	e7d4      	b.n	8008ec4 <LmHandlerRequestClass+0x38>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8008f1a:	2000      	movs	r0, #0
 8008f1c:	e7d2      	b.n	8008ec4 <LmHandlerRequestClass+0x38>
                errorStatus = LORAMAC_HANDLER_ERROR;
 8008f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f22:	e7cf      	b.n	8008ec4 <LmHandlerRequestClass+0x38>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 8008f24:	f04f 30ff 	mov.w	r0, #4294967295
 8008f28:	e7cc      	b.n	8008ec4 <LmHandlerRequestClass+0x38>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8008f2a:	2000      	movs	r0, #0
 8008f2c:	e7ca      	b.n	8008ec4 <LmHandlerRequestClass+0x38>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 8008f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f32:	e7c7      	b.n	8008ec4 <LmHandlerRequestClass+0x38>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 8008f34:	f04f 30ff 	mov.w	r0, #4294967295
 8008f38:	e7c4      	b.n	8008ec4 <LmHandlerRequestClass+0x38>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8008f3a:	2000      	movs	r0, #0
 8008f3c:	e7c2      	b.n	8008ec4 <LmHandlerRequestClass+0x38>
 8008f3e:	bf00      	nop
 8008f40:	20000864 	.word	0x20000864

08008f44 <LmHandlerJoin>:
{
 8008f44:	b500      	push	{lr}
 8008f46:	b08f      	sub	sp, #60	; 0x3c
    mlmeReq.Type = MLME_JOIN;
 8008f48:	2301      	movs	r3, #1
 8008f4a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 8008f4e:	4b28      	ldr	r3, [pc, #160]	; (8008ff0 <LmHandlerJoin+0xac>)
 8008f50:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8008f54:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
    if ( mode == ACTIVATION_TYPE_OTAA )
 8008f58:	2802      	cmp	r0, #2
 8008f5a:	d021      	beq.n	8008fa0 <LmHandlerJoin+0x5c>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 8008f5c:	2001      	movs	r0, #1
 8008f5e:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 8008f62:	4b24      	ldr	r3, [pc, #144]	; (8008ff4 <LmHandlerJoin+0xb0>)
 8008f64:	7198      	strb	r0, [r3, #6]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 8008f66:	711a      	strb	r2, [r3, #4]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8008f68:	2000      	movs	r0, #0
 8008f6a:	7158      	strb	r0, [r3, #5]
        JoinParams.forceRejoin = forceRejoin;
 8008f6c:	71d9      	strb	r1, [r3, #7]
        if (CtxRestoreDone == false)
 8008f6e:	4b22      	ldr	r3, [pc, #136]	; (8008ff8 <LmHandlerJoin+0xb4>)
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	b30b      	cbz	r3, 8008fb8 <LmHandlerJoin+0x74>
        LoRaMacStart();
 8008f74:	f003 f8ee 	bl	800c154 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	f88d 3000 	strb.w	r3, [sp]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 8008f7e:	f88d 3004 	strb.w	r3, [sp, #4]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8008f82:	4668      	mov	r0, sp
 8008f84:	f003 fad0 	bl	800c528 <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 8008f88:	4b1c      	ldr	r3, [pc, #112]	; (8008ffc <LmHandlerJoin+0xb8>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f8e:	4819      	ldr	r0, [pc, #100]	; (8008ff4 <LmHandlerJoin+0xb0>)
 8008f90:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 8008f92:	4b17      	ldr	r3, [pc, #92]	; (8008ff0 <LmHandlerJoin+0xac>)
 8008f94:	7858      	ldrb	r0, [r3, #1]
 8008f96:	f7ff ff79 	bl	8008e8c <LmHandlerRequestClass>
}
 8008f9a:	b00f      	add	sp, #60	; 0x3c
 8008f9c:	f85d fb04 	ldr.w	pc, [sp], #4
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8008fa0:	2202      	movs	r2, #2
 8008fa2:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 8008fa6:	4b13      	ldr	r3, [pc, #76]	; (8008ff4 <LmHandlerJoin+0xb0>)
 8008fa8:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 8008faa:	71d9      	strb	r1, [r3, #7]
        LoRaMacStart();
 8008fac:	f003 f8d2 	bl	800c154 <LoRaMacStart>
        LoRaMacMlmeRequest( &mlmeReq );
 8008fb0:	a809      	add	r0, sp, #36	; 0x24
 8008fb2:	f003 fd45 	bl	800ca40 <LoRaMacMlmeRequest>
 8008fb6:	e7f0      	b.n	8008f9a <LmHandlerJoin+0x56>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 8008fb8:	231e      	movs	r3, #30
 8008fba:	f88d 3000 	strb.w	r3, [sp]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 8008fbe:	f88d 2004 	strb.w	r2, [sp, #4]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8008fc2:	4668      	mov	r0, sp
 8008fc4:	f003 fab0 	bl	800c528 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 8008fc8:	231f      	movs	r3, #31
 8008fca:	f88d 3000 	strb.w	r3, [sp]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 8008fce:	4b08      	ldr	r3, [pc, #32]	; (8008ff0 <LmHandlerJoin+0xac>)
 8008fd0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008fd4:	f88d 3004 	strb.w	r3, [sp, #4]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8008fd8:	4668      	mov	r0, sp
 8008fda:	f003 faa5 	bl	800c528 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 8008fde:	2328      	movs	r3, #40	; 0x28
 8008fe0:	f88d 3000 	strb.w	r3, [sp]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 8008fe4:	4b06      	ldr	r3, [pc, #24]	; (8009000 <LmHandlerJoin+0xbc>)
 8008fe6:	9301      	str	r3, [sp, #4]
            LoRaMacMibSetRequestConfirm(&mibReq);
 8008fe8:	4668      	mov	r0, sp
 8008fea:	f003 fa9d 	bl	800c528 <LoRaMacMibSetRequestConfirm>
 8008fee:	e7c1      	b.n	8008f74 <LmHandlerJoin+0x30>
 8008ff0:	2000087c 	.word	0x2000087c
 8008ff4:	20000090 	.word	0x20000090
 8008ff8:	2000085e 	.word	0x2000085e
 8008ffc:	20000864 	.word	0x20000864
 8009000:	01000300 	.word	0x01000300

08009004 <LmHandlerSend>:
{
 8009004:	b570      	push	{r4, r5, r6, lr}
 8009006:	b086      	sub	sp, #24
 8009008:	4604      	mov	r4, r0
 800900a:	460d      	mov	r5, r1
 800900c:	4616      	mov	r6, r2
    if (LoRaMacIsBusy() == true)
 800900e:	f002 fe6b 	bl	800bce8 <LoRaMacIsBusy>
 8009012:	2800      	cmp	r0, #0
 8009014:	d16e      	bne.n	80090f4 <LmHandlerSend+0xf0>
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 8009016:	f7ff ff27 	bl	8008e68 <LmHandlerJoinStatus>
 800901a:	2801      	cmp	r0, #1
 800901c:	d144      	bne.n	80090a8 <LmHandlerSend+0xa4>
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800901e:	4b3a      	ldr	r3, [pc, #232]	; (8009108 <LmHandlerSend+0x104>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	68db      	ldr	r3, [r3, #12]
 8009024:	4798      	blx	r3
 8009026:	b138      	cbz	r0, 8009038 <LmHandlerSend+0x34>
 8009028:	7823      	ldrb	r3, [r4, #0]
 800902a:	4a37      	ldr	r2, [pc, #220]	; (8009108 <LmHandlerSend+0x104>)
 800902c:	6812      	ldr	r2, [r2, #0]
 800902e:	7812      	ldrb	r2, [r2, #0]
 8009030:	4293      	cmp	r3, r2
 8009032:	d001      	beq.n	8009038 <LmHandlerSend+0x34>
 8009034:	2b00      	cmp	r3, #0
 8009036:	d160      	bne.n	80090fa <LmHandlerSend+0xf6>
    TxParams.MsgType = isTxConfirmed;
 8009038:	4b34      	ldr	r3, [pc, #208]	; (800910c <LmHandlerSend+0x108>)
 800903a:	721d      	strb	r5, [r3, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800903c:	3d00      	subs	r5, #0
 800903e:	bf18      	it	ne
 8009040:	2501      	movne	r5, #1
 8009042:	f88d 5004 	strb.w	r5, [sp, #4]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 8009046:	4b32      	ldr	r3, [pc, #200]	; (8009110 <LmHandlerSend+0x10c>)
 8009048:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800904c:	f88d 3012 	strb.w	r3, [sp, #18]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 8009050:	4669      	mov	r1, sp
 8009052:	7860      	ldrb	r0, [r4, #1]
 8009054:	f003 f8cc 	bl	800c1f0 <LoRaMacQueryTxPossible>
 8009058:	b370      	cbz	r0, 80090b8 <LmHandlerSend+0xb4>
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800905a:	2300      	movs	r3, #0
 800905c:	f88d 3004 	strb.w	r3, [sp, #4]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 8009060:	9303      	str	r3, [sp, #12]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 8009062:	f8ad 3010 	strh.w	r3, [sp, #16]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 8009066:	f06f 0506 	mvn.w	r5, #6
    TxParams.AppData = *appData;
 800906a:	4b28      	ldr	r3, [pc, #160]	; (800910c <LmHandlerSend+0x108>)
 800906c:	f103 0c10 	add.w	ip, r3, #16
 8009070:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009074:	e88c 0003 	stmia.w	ip, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 8009078:	4a25      	ldr	r2, [pc, #148]	; (8009110 <LmHandlerSend+0x10c>)
 800907a:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800907e:	729a      	strb	r2, [r3, #10]
    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 8009080:	4631      	mov	r1, r6
 8009082:	a801      	add	r0, sp, #4
 8009084:	f003 fdb2 	bl	800cbec <LoRaMacMcpsRequest>
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 8009088:	9a05      	ldr	r2, [sp, #20]
 800908a:	4b22      	ldr	r3, [pc, #136]	; (8009114 <LmHandlerSend+0x110>)
 800908c:	601a      	str	r2, [r3, #0]
    switch (status)
 800908e:	2811      	cmp	r0, #17
 8009090:	d82d      	bhi.n	80090ee <LmHandlerSend+0xea>
 8009092:	e8df f000 	tbb	[pc, r0]
 8009096:	1c21      	.short	0x1c21
 8009098:	2c2c2c2c 	.word	0x2c2c2c2c
 800909c:	2c2c352c 	.word	0x2c2c352c
 80090a0:	2c2c292c 	.word	0x2c2c292c
 80090a4:	261c1c1c 	.word	0x261c1c1c
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 80090a8:	4b1b      	ldr	r3, [pc, #108]	; (8009118 <LmHandlerSend+0x114>)
 80090aa:	79d9      	ldrb	r1, [r3, #7]
 80090ac:	7998      	ldrb	r0, [r3, #6]
 80090ae:	f7ff ff49 	bl	8008f44 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 80090b2:	f06f 0502 	mvn.w	r5, #2
 80090b6:	e00c      	b.n	80090d2 <LmHandlerSend+0xce>
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 80090b8:	7823      	ldrb	r3, [r4, #0]
 80090ba:	f88d 3008 	strb.w	r3, [sp, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 80090be:	7863      	ldrb	r3, [r4, #1]
 80090c0:	f8ad 3010 	strh.w	r3, [sp, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 80090c4:	6863      	ldr	r3, [r4, #4]
 80090c6:	9303      	str	r3, [sp, #12]
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 80090c8:	f04f 35ff 	mov.w	r5, #4294967295
 80090cc:	e7cd      	b.n	800906a <LmHandlerSend+0x66>
    switch (status)
 80090ce:	f06f 0501 	mvn.w	r5, #1
}
 80090d2:	4628      	mov	r0, r5
 80090d4:	b006      	add	sp, #24
 80090d6:	bd70      	pop	{r4, r5, r6, pc}
            if (lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED)
 80090d8:	f115 0f07 	cmn.w	r5, #7
 80090dc:	d0f9      	beq.n	80090d2 <LmHandlerSend+0xce>
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 80090de:	2500      	movs	r5, #0
 80090e0:	e7f7      	b.n	80090d2 <LmHandlerSend+0xce>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 80090e2:	f06f 0504 	mvn.w	r5, #4
            break;
 80090e6:	e7f4      	b.n	80090d2 <LmHandlerSend+0xce>
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 80090e8:	f06f 0505 	mvn.w	r5, #5
            break;
 80090ec:	e7f1      	b.n	80090d2 <LmHandlerSend+0xce>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 80090ee:	f04f 35ff 	mov.w	r5, #4294967295
            break;
 80090f2:	e7ee      	b.n	80090d2 <LmHandlerSend+0xce>
        return LORAMAC_HANDLER_BUSY_ERROR;
 80090f4:	f06f 0501 	mvn.w	r5, #1
 80090f8:	e7eb      	b.n	80090d2 <LmHandlerSend+0xce>
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 80090fa:	f06f 0503 	mvn.w	r5, #3
 80090fe:	e7e8      	b.n	80090d2 <LmHandlerSend+0xce>
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8009100:	f06f 0502 	mvn.w	r5, #2
 8009104:	e7e5      	b.n	80090d2 <LmHandlerSend+0xce>
 8009106:	bf00      	nop
 8009108:	20000868 	.word	0x20000868
 800910c:	200000b8 	.word	0x200000b8
 8009110:	2000087c 	.word	0x2000087c
 8009114:	20000860 	.word	0x20000860
 8009118:	20000090 	.word	0x20000090

0800911c <MlmeIndication>:
{
 800911c:	b510      	push	{r4, lr}
 800911e:	b082      	sub	sp, #8
 8009120:	4604      	mov	r4, r0
    RxParams.IsMcpsIndication = 0;
 8009122:	4b1c      	ldr	r3, [pc, #112]	; (8009194 <MlmeIndication+0x78>)
 8009124:	2200      	movs	r2, #0
 8009126:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 8009128:	7842      	ldrb	r2, [r0, #1]
 800912a:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800912c:	f990 2002 	ldrsb.w	r2, [r0, #2]
 8009130:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 8009132:	f9b1 2000 	ldrsh.w	r2, [r1]
 8009136:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 8009138:	f991 2002 	ldrsb.w	r2, [r1, #2]
 800913c:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800913e:	78ca      	ldrb	r2, [r1, #3]
 8009140:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 8009142:	6842      	ldr	r2, [r0, #4]
 8009144:	60da      	str	r2, [r3, #12]
    if ((mlmeIndication->MlmeIndication != MLME_BEACON) && (mlmeIndication->MlmeIndication != MLME_BEACON_LOST))
 8009146:	7803      	ldrb	r3, [r0, #0]
 8009148:	2b0b      	cmp	r3, #11
 800914a:	d007      	beq.n	800915c <MlmeIndication+0x40>
 800914c:	2b0f      	cmp	r3, #15
 800914e:	d005      	beq.n	800915c <MlmeIndication+0x40>
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 8009150:	4b11      	ldr	r3, [pc, #68]	; (8009198 <MlmeIndication+0x7c>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009156:	490f      	ldr	r1, [pc, #60]	; (8009194 <MlmeIndication+0x78>)
 8009158:	2000      	movs	r0, #0
 800915a:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800915c:	4621      	mov	r1, r4
 800915e:	2003      	movs	r0, #3
 8009160:	f7ff fdde 	bl	8008d20 <LmHandlerPackagesNotify>
    switch( mlmeIndication->MlmeIndication )
 8009164:	7823      	ldrb	r3, [r4, #0]
 8009166:	2b07      	cmp	r3, #7
 8009168:	d001      	beq.n	800916e <MlmeIndication+0x52>
}
 800916a:	b002      	add	sp, #8
 800916c:	bd10      	pop	{r4, pc}
            LmHandlerAppData_t appData =
 800916e:	2300      	movs	r3, #0
 8009170:	f88d 3000 	strb.w	r3, [sp]
 8009174:	f88d 3001 	strb.w	r3, [sp, #1]
 8009178:	9301      	str	r3, [sp, #4]
            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 800917a:	4b08      	ldr	r3, [pc, #32]	; (800919c <MlmeIndication+0x80>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	68db      	ldr	r3, [r3, #12]
 8009180:	4798      	blx	r3
 8009182:	2800      	cmp	r0, #0
 8009184:	d1f1      	bne.n	800916a <MlmeIndication+0x4e>
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 8009186:	2201      	movs	r2, #1
 8009188:	2100      	movs	r1, #0
 800918a:	4668      	mov	r0, sp
 800918c:	f7ff ff3a 	bl	8009004 <LmHandlerSend>
}
 8009190:	e7eb      	b.n	800916a <MlmeIndication+0x4e>
 8009192:	bf00      	nop
 8009194:	200000a4 	.word	0x200000a4
 8009198:	20000864 	.word	0x20000864
 800919c:	20000868 	.word	0x20000868

080091a0 <LmHandlerGetCurrentClass>:
    if (deviceClass == NULL)
 80091a0:	b170      	cbz	r0, 80091c0 <LmHandlerGetCurrentClass+0x20>
{
 80091a2:	b510      	push	{r4, lr}
 80091a4:	b08a      	sub	sp, #40	; 0x28
 80091a6:	4604      	mov	r4, r0
    mibReq.Type = MIB_DEVICE_CLASS;
 80091a8:	2300      	movs	r3, #0
 80091aa:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 80091ae:	a801      	add	r0, sp, #4
 80091b0:	f003 f884 	bl	800c2bc <LoRaMacMibGetRequestConfirm>
 80091b4:	b938      	cbnz	r0, 80091c6 <LmHandlerGetCurrentClass+0x26>
    *deviceClass = mibReq.Param.Class;
 80091b6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80091ba:	7023      	strb	r3, [r4, #0]
}
 80091bc:	b00a      	add	sp, #40	; 0x28
 80091be:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 80091c0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80091c4:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 80091c6:	f04f 30ff 	mov.w	r0, #4294967295
 80091ca:	e7f7      	b.n	80091bc <LmHandlerGetCurrentClass+0x1c>

080091cc <McpsIndication>:
{
 80091cc:	b530      	push	{r4, r5, lr}
 80091ce:	b087      	sub	sp, #28
 80091d0:	460b      	mov	r3, r1
    DeviceClass_t deviceClass = CLASS_A;
 80091d2:	2200      	movs	r2, #0
 80091d4:	f88d 200f 	strb.w	r2, [sp, #15]
    RxParams.IsMcpsIndication = 1;
 80091d8:	4921      	ldr	r1, [pc, #132]	; (8009260 <McpsIndication+0x94>)
 80091da:	2201      	movs	r2, #1
 80091dc:	700a      	strb	r2, [r1, #0]
    RxParams.Status = mcpsIndication->Status;
 80091de:	7842      	ldrb	r2, [r0, #1]
 80091e0:	704a      	strb	r2, [r1, #1]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 80091e2:	bb5a      	cbnz	r2, 800923c <McpsIndication+0x70>
 80091e4:	4604      	mov	r4, r0
    RxParams.Datarate = mcpsIndication->RxDatarate;
 80091e6:	f990 2004 	ldrsb.w	r2, [r0, #4]
 80091ea:	720a      	strb	r2, [r1, #8]
    RxParams.Rssi = rxStatus->Rssi;
 80091ec:	f9b3 2000 	ldrsh.w	r2, [r3]
 80091f0:	724a      	strb	r2, [r1, #9]
    RxParams.Snr = rxStatus->Snr;
 80091f2:	f993 2002 	ldrsb.w	r2, [r3, #2]
 80091f6:	728a      	strb	r2, [r1, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 80091f8:	78db      	ldrb	r3, [r3, #3]
 80091fa:	740b      	strb	r3, [r1, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 80091fc:	6903      	ldr	r3, [r0, #16]
 80091fe:	60cb      	str	r3, [r1, #12]
    appData.Port = mcpsIndication->Port;
 8009200:	78c3      	ldrb	r3, [r0, #3]
 8009202:	f88d 3010 	strb.w	r3, [sp, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 8009206:	7b03      	ldrb	r3, [r0, #12]
 8009208:	f88d 3011 	strb.w	r3, [sp, #17]
    appData.Buffer = mcpsIndication->Buffer;
 800920c:	6883      	ldr	r3, [r0, #8]
 800920e:	9305      	str	r3, [sp, #20]
    LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 8009210:	4d14      	ldr	r5, [pc, #80]	; (8009264 <McpsIndication+0x98>)
 8009212:	682b      	ldr	r3, [r5, #0]
 8009214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009216:	a804      	add	r0, sp, #16
 8009218:	4798      	blx	r3
    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800921a:	682b      	ldr	r3, [r5, #0]
 800921c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800921e:	b113      	cbz	r3, 8009226 <McpsIndication+0x5a>
 8009220:	7e22      	ldrb	r2, [r4, #24]
 8009222:	b102      	cbz	r2, 8009226 <McpsIndication+0x5a>
        LmHandlerCallbacks->OnSysTimeUpdate( );
 8009224:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 8009226:	4621      	mov	r1, r4
 8009228:	2001      	movs	r0, #1
 800922a:	f7ff fd79 	bl	8008d20 <LmHandlerPackagesNotify>
    LmHandlerGetCurrentClass( &deviceClass );
 800922e:	f10d 000f 	add.w	r0, sp, #15
 8009232:	f7ff ffb5 	bl	80091a0 <LmHandlerGetCurrentClass>
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 8009236:	7963      	ldrb	r3, [r4, #5]
 8009238:	2b01      	cmp	r3, #1
 800923a:	d001      	beq.n	8009240 <McpsIndication+0x74>
}
 800923c:	b007      	add	sp, #28
 800923e:	bd30      	pop	{r4, r5, pc}
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 8009240:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d1f9      	bne.n	800923c <McpsIndication+0x70>
        LmHandlerAppData_t appData =
 8009248:	2100      	movs	r1, #0
 800924a:	f88d 1004 	strb.w	r1, [sp, #4]
 800924e:	f88d 1005 	strb.w	r1, [sp, #5]
 8009252:	9102      	str	r1, [sp, #8]
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true);
 8009254:	2201      	movs	r2, #1
 8009256:	a801      	add	r0, sp, #4
 8009258:	f7ff fed4 	bl	8009004 <LmHandlerSend>
 800925c:	e7ee      	b.n	800923c <McpsIndication+0x70>
 800925e:	bf00      	nop
 8009260:	200000a4 	.word	0x200000a4
 8009264:	20000864 	.word	0x20000864

08009268 <LmHandlerGetTxDatarate>:
    if (txDatarate == NULL)
 8009268:	b180      	cbz	r0, 800928c <LmHandlerGetTxDatarate+0x24>
{
 800926a:	b510      	push	{r4, lr}
 800926c:	b08a      	sub	sp, #40	; 0x28
 800926e:	4604      	mov	r4, r0
    mibGet.Type = MIB_CHANNELS_DATARATE;
 8009270:	231f      	movs	r3, #31
 8009272:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 8009276:	a801      	add	r0, sp, #4
 8009278:	f003 f820 	bl	800c2bc <LoRaMacMibGetRequestConfirm>
 800927c:	b948      	cbnz	r0, 8009292 <LmHandlerGetTxDatarate+0x2a>
    *txDatarate = mibGet.Param.ChannelsDatarate;
 800927e:	f99d 3008 	ldrsb.w	r3, [sp, #8]
 8009282:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 8009284:	4a04      	ldr	r2, [pc, #16]	; (8009298 <LmHandlerGetTxDatarate+0x30>)
 8009286:	7113      	strb	r3, [r2, #4]
}
 8009288:	b00a      	add	sp, #40	; 0x28
 800928a:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 800928c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009290:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8009292:	f04f 30ff 	mov.w	r0, #4294967295
 8009296:	e7f7      	b.n	8009288 <LmHandlerGetTxDatarate+0x20>
 8009298:	2000087c 	.word	0x2000087c

0800929c <MlmeConfirm>:
{
 800929c:	b510      	push	{r4, lr}
 800929e:	b08a      	sub	sp, #40	; 0x28
 80092a0:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 0;
 80092a2:	4824      	ldr	r0, [pc, #144]	; (8009334 <MlmeConfirm+0x98>)
 80092a4:	2300      	movs	r3, #0
 80092a6:	7003      	strb	r3, [r0, #0]
    TxParams.Status = mlmeConfirm->Status;
 80092a8:	7863      	ldrb	r3, [r4, #1]
 80092aa:	7043      	strb	r3, [r0, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 80092ac:	4b22      	ldr	r3, [pc, #136]	; (8009338 <MlmeConfirm+0x9c>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092b2:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 80092b4:	4621      	mov	r1, r4
 80092b6:	2002      	movs	r0, #2
 80092b8:	f7ff fd32 	bl	8008d20 <LmHandlerPackagesNotify>
    switch( mlmeConfirm->MlmeRequest )
 80092bc:	7823      	ldrb	r3, [r4, #0]
 80092be:	2b04      	cmp	r3, #4
 80092c0:	d029      	beq.n	8009316 <MlmeConfirm+0x7a>
 80092c2:	2b0c      	cmp	r3, #12
 80092c4:	d02f      	beq.n	8009326 <MlmeConfirm+0x8a>
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d001      	beq.n	80092ce <MlmeConfirm+0x32>
}
 80092ca:	b00a      	add	sp, #40	; 0x28
 80092cc:	bd10      	pop	{r4, pc}
            mibReq.Type = MIB_DEV_ADDR;
 80092ce:	2306      	movs	r3, #6
 80092d0:	f88d 3004 	strb.w	r3, [sp, #4]
            LoRaMacMibGetRequestConfirm( &mibReq );
 80092d4:	a801      	add	r0, sp, #4
 80092d6:	f002 fff1 	bl	800c2bc <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 80092da:	9a02      	ldr	r2, [sp, #8]
 80092dc:	4b17      	ldr	r3, [pc, #92]	; (800933c <MlmeConfirm+0xa0>)
 80092de:	615a      	str	r2, [r3, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 80092e0:	4817      	ldr	r0, [pc, #92]	; (8009340 <MlmeConfirm+0xa4>)
 80092e2:	f7ff ffc1 	bl	8009268 <LmHandlerGetTxDatarate>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 80092e6:	7863      	ldrb	r3, [r4, #1]
 80092e8:	b16b      	cbz	r3, 8009306 <MlmeConfirm+0x6a>
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 80092ea:	4b16      	ldr	r3, [pc, #88]	; (8009344 <MlmeConfirm+0xa8>)
 80092ec:	22ff      	movs	r2, #255	; 0xff
 80092ee:	715a      	strb	r2, [r3, #5]
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 80092f0:	4b11      	ldr	r3, [pc, #68]	; (8009338 <MlmeConfirm+0x9c>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f6:	4813      	ldr	r0, [pc, #76]	; (8009344 <MlmeConfirm+0xa8>)
 80092f8:	4798      	blx	r3
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 80092fa:	7863      	ldrb	r3, [r4, #1]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d1e4      	bne.n	80092ca <MlmeConfirm+0x2e>
                SecureElementPrintSessionKeys();
 8009300:	f007 fd8a 	bl	8010e18 <SecureElementPrintSessionKeys>
        break;
 8009304:	e7e1      	b.n	80092ca <MlmeConfirm+0x2e>
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8009306:	4b0f      	ldr	r3, [pc, #60]	; (8009344 <MlmeConfirm+0xa8>)
 8009308:	2200      	movs	r2, #0
 800930a:	715a      	strb	r2, [r3, #5]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800930c:	4b0e      	ldr	r3, [pc, #56]	; (8009348 <MlmeConfirm+0xac>)
 800930e:	7858      	ldrb	r0, [r3, #1]
 8009310:	f7ff fdbc 	bl	8008e8c <LmHandlerRequestClass>
 8009314:	e7ec      	b.n	80092f0 <MlmeConfirm+0x54>
            RxParams.LinkCheck = true;
 8009316:	4b0d      	ldr	r3, [pc, #52]	; (800934c <MlmeConfirm+0xb0>)
 8009318:	2201      	movs	r2, #1
 800931a:	745a      	strb	r2, [r3, #17]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800931c:	7a22      	ldrb	r2, [r4, #8]
 800931e:	749a      	strb	r2, [r3, #18]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 8009320:	7a62      	ldrb	r2, [r4, #9]
 8009322:	74da      	strb	r2, [r3, #19]
        break;
 8009324:	e7d1      	b.n	80092ca <MlmeConfirm+0x2e>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8009326:	7863      	ldrb	r3, [r4, #1]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d0ce      	beq.n	80092ca <MlmeConfirm+0x2e>
                LmHandlerDeviceTimeReq( );
 800932c:	f7ff fd7c 	bl	8008e28 <LmHandlerDeviceTimeReq>
}
 8009330:	e7cb      	b.n	80092ca <MlmeConfirm+0x2e>
 8009332:	bf00      	nop
 8009334:	200000b8 	.word	0x200000b8
 8009338:	20000864 	.word	0x20000864
 800933c:	20000078 	.word	0x20000078
 8009340:	20000094 	.word	0x20000094
 8009344:	20000090 	.word	0x20000090
 8009348:	2000087c 	.word	0x2000087c
 800934c:	200000a4 	.word	0x200000a4

08009350 <LmHandlerSetSystemMaxRxError>:
{
 8009350:	b500      	push	{lr}
 8009352:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8009354:	2322      	movs	r3, #34	; 0x22
 8009356:	f88d 3004 	strb.w	r3, [sp, #4]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800935a:	9002      	str	r0, [sp, #8]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800935c:	a801      	add	r0, sp, #4
 800935e:	f003 f8e3 	bl	800c528 <LoRaMacMibSetRequestConfirm>
 8009362:	b910      	cbnz	r0, 800936a <LmHandlerSetSystemMaxRxError+0x1a>
}
 8009364:	b00b      	add	sp, #44	; 0x2c
 8009366:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 800936a:	f04f 30ff 	mov.w	r0, #4294967295
 800936e:	e7f9      	b.n	8009364 <LmHandlerSetSystemMaxRxError+0x14>

08009370 <LmHandlerConfigure>:
{
 8009370:	b570      	push	{r4, r5, r6, lr}
 8009372:	b090      	sub	sp, #64	; 0x40
 8009374:	4601      	mov	r1, r0
    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 8009376:	4c76      	ldr	r4, [pc, #472]	; (8009550 <LmHandlerConfigure+0x1e0>)
 8009378:	2214      	movs	r2, #20
 800937a:	4620      	mov	r0, r4
 800937c:	f009 fe80 	bl	8013080 <UTIL_MEM_cpy_8>
    loraInfo = LoraInfo_GetPtr();
 8009380:	f7f9 ffae 	bl	80032e0 <LoraInfo_GetPtr>
    if (0U == ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 8009384:	7822      	ldrb	r2, [r4, #0]
 8009386:	2301      	movs	r3, #1
 8009388:	4093      	lsls	r3, r2
 800938a:	6841      	ldr	r1, [r0, #4]
 800938c:	420b      	tst	r3, r1
 800938e:	d106      	bne.n	800939e <LmHandlerConfigure+0x2e>
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 8009390:	4b70      	ldr	r3, [pc, #448]	; (8009554 <LmHandlerConfigure+0x1e4>)
 8009392:	2201      	movs	r2, #1
 8009394:	2100      	movs	r1, #0
 8009396:	4608      	mov	r0, r1
 8009398:	f009 fd5c 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800939c:	e7fe      	b.n	800939c <LmHandlerConfigure+0x2c>
    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800939e:	496e      	ldr	r1, [pc, #440]	; (8009558 <LmHandlerConfigure+0x1e8>)
 80093a0:	486e      	ldr	r0, [pc, #440]	; (800955c <LmHandlerConfigure+0x1ec>)
 80093a2:	f002 fcfd 	bl	800bda0 <LoRaMacInitialization>
 80093a6:	2800      	cmp	r0, #0
 80093a8:	f040 80cf 	bne.w	800954a <LmHandlerConfigure+0x1da>
    mibReq.Type = MIB_NVM_CTXS;
 80093ac:	2326      	movs	r3, #38	; 0x26
 80093ae:	f88d 301c 	strb.w	r3, [sp, #28]
    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 80093b2:	a807      	add	r0, sp, #28
 80093b4:	f003 f8b8 	bl	800c528 <LoRaMacMibSetRequestConfirm>
 80093b8:	2800      	cmp	r0, #0
 80093ba:	f040 8087 	bne.w	80094cc <LmHandlerConfigure+0x15c>
        CtxRestoreDone = true;
 80093be:	4b68      	ldr	r3, [pc, #416]	; (8009560 <LmHandlerConfigure+0x1f0>)
 80093c0:	2201      	movs	r2, #1
 80093c2:	701a      	strb	r2, [r3, #0]
    if (CtxRestoreDone == true)
 80093c4:	4b66      	ldr	r3, [pc, #408]	; (8009560 <LmHandlerConfigure+0x1f0>)
 80093c6:	781b      	ldrb	r3, [r3, #0]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	f000 80a8 	beq.w	800951e <LmHandlerConfigure+0x1ae>
        if ( LmHandlerCallbacks->OnNvmDataChange != NULL )
 80093ce:	4b65      	ldr	r3, [pc, #404]	; (8009564 <LmHandlerConfigure+0x1f4>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	69db      	ldr	r3, [r3, #28]
 80093d4:	b10b      	cbz	r3, 80093da <LmHandlerConfigure+0x6a>
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 80093d6:	2000      	movs	r0, #0
 80093d8:	4798      	blx	r3
        mibReq.Type = MIB_DEV_ADDR;
 80093da:	2306      	movs	r3, #6
 80093dc:	f88d 301c 	strb.w	r3, [sp, #28]
        LoRaMacMibGetRequestConfirm( &mibReq );
 80093e0:	a807      	add	r0, sp, #28
 80093e2:	f002 ff6b 	bl	800c2bc <LoRaMacMibGetRequestConfirm>
        CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 80093e6:	9a08      	ldr	r2, [sp, #32]
 80093e8:	4b5f      	ldr	r3, [pc, #380]	; (8009568 <LmHandlerConfigure+0x1f8>)
 80093ea:	615a      	str	r2, [r3, #20]
        mibReq.Type = MIB_NVM_CTXS;
 80093ec:	2326      	movs	r3, #38	; 0x26
 80093ee:	f88d 301c 	strb.w	r3, [sp, #28]
        LoRaMacMibGetRequestConfirm( &mibReq );
 80093f2:	a807      	add	r0, sp, #28
 80093f4:	f002 ff62 	bl	800c2bc <LoRaMacMibGetRequestConfirm>
        LmHandlerParams.ActiveRegion = mibReq.Param.Contexts->MacGroup2.Region;
 80093f8:	9a08      	ldr	r2, [sp, #32]
 80093fa:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
 80093fe:	4b54      	ldr	r3, [pc, #336]	; (8009550 <LmHandlerConfigure+0x1e0>)
 8009400:	7019      	strb	r1, [r3, #0]
        LmHandlerParams.DefaultClass = mibReq.Param.Contexts->MacGroup2.DeviceClass;
 8009402:	f892 1104 	ldrb.w	r1, [r2, #260]	; 0x104
 8009406:	7059      	strb	r1, [r3, #1]
        LmHandlerParams.AdrEnable = mibReq.Param.Contexts->MacGroup2.AdrCtrlOn;
 8009408:	f892 2106 	ldrb.w	r2, [r2, #262]	; 0x106
 800940c:	709a      	strb	r2, [r3, #2]
    mibReq.Type = MIB_DEV_EUI;
 800940e:	2502      	movs	r5, #2
 8009410:	f88d 501c 	strb.w	r5, [sp, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8009414:	a807      	add	r0, sp, #28
 8009416:	f002 ff51 	bl	800c2bc <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800941a:	4c53      	ldr	r4, [pc, #332]	; (8009568 <LmHandlerConfigure+0x1f8>)
 800941c:	2208      	movs	r2, #8
 800941e:	9908      	ldr	r1, [sp, #32]
 8009420:	4620      	mov	r0, r4
 8009422:	f007 fe6e 	bl	8011102 <memcpy1>
    mibReq.Type = MIB_JOIN_EUI;
 8009426:	2303      	movs	r3, #3
 8009428:	f88d 301c 	strb.w	r3, [sp, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800942c:	a807      	add	r0, sp, #28
 800942e:	f002 ff45 	bl	800c2bc <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 8009432:	2208      	movs	r2, #8
 8009434:	9908      	ldr	r1, [sp, #32]
 8009436:	18a0      	adds	r0, r4, r2
 8009438:	f007 fe63 	bl	8011102 <memcpy1>
    SecureElementPrintKeys();
 800943c:	f007 fc8c 	bl	8010d58 <SecureElementPrintKeys>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 8009440:	7de3      	ldrb	r3, [r4, #23]
 8009442:	7da2      	ldrb	r2, [r4, #22]
 8009444:	7d61      	ldrb	r1, [r4, #21]
 8009446:	7d20      	ldrb	r0, [r4, #20]
 8009448:	9003      	str	r0, [sp, #12]
 800944a:	9102      	str	r1, [sp, #8]
 800944c:	9201      	str	r2, [sp, #4]
 800944e:	9300      	str	r3, [sp, #0]
 8009450:	4b46      	ldr	r3, [pc, #280]	; (800956c <LmHandlerConfigure+0x1fc>)
 8009452:	2200      	movs	r2, #0
 8009454:	4611      	mov	r1, r2
 8009456:	4628      	mov	r0, r5
 8009458:	f009 fcfc 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
    mibReq.Type = MIB_PUBLIC_NETWORK;
 800945c:	260f      	movs	r6, #15
 800945e:	f88d 601c 	strb.w	r6, [sp, #28]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 8009462:	2301      	movs	r3, #1
 8009464:	f88d 3020 	strb.w	r3, [sp, #32]
    LoRaMacMibSetRequestConfirm(&mibReq);
 8009468:	a807      	add	r0, sp, #28
 800946a:	f003 f85d 	bl	800c528 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_REPEATER_SUPPORT;
 800946e:	2310      	movs	r3, #16
 8009470:	f88d 301c 	strb.w	r3, [sp, #28]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 8009474:	2500      	movs	r5, #0
 8009476:	f88d 5020 	strb.w	r5, [sp, #32]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800947a:	a807      	add	r0, sp, #28
 800947c:	f003 f854 	bl	800c528 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ADR;
 8009480:	2304      	movs	r3, #4
 8009482:	f88d 301c 	strb.w	r3, [sp, #28]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 8009486:	4c32      	ldr	r4, [pc, #200]	; (8009550 <LmHandlerConfigure+0x1e0>)
 8009488:	78a3      	ldrb	r3, [r4, #2]
 800948a:	f88d 3020 	strb.w	r3, [sp, #32]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800948e:	a807      	add	r0, sp, #28
 8009490:	f003 f84a 	bl	800c528 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_RXB_C_TIMEOUT;
 8009494:	2337      	movs	r3, #55	; 0x37
 8009496:	f88d 301c 	strb.w	r3, [sp, #28]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800949a:	6923      	ldr	r3, [r4, #16]
 800949c:	9308      	str	r3, [sp, #32]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800949e:	a807      	add	r0, sp, #28
 80094a0:	f003 f842 	bl	800c528 <LoRaMacMibSetRequestConfirm>
    getPhy.Attribute = PHY_DUTY_CYCLE;
 80094a4:	f88d 6014 	strb.w	r6, [sp, #20]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 80094a8:	a905      	add	r1, sp, #20
 80094aa:	7820      	ldrb	r0, [r4, #0]
 80094ac:	f004 fcf9 	bl	800dea2 <RegionGetPhyParam>
 80094b0:	9004      	str	r0, [sp, #16]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 80094b2:	1b43      	subs	r3, r0, r5
 80094b4:	bf18      	it	ne
 80094b6:	2301      	movne	r3, #1
 80094b8:	71a3      	strb	r3, [r4, #6]
    LmHandlerSetSystemMaxRxError( 20 );
 80094ba:	2014      	movs	r0, #20
 80094bc:	f7ff ff48 	bl	8009350 <LmHandlerSetSystemMaxRxError>
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 80094c0:	79a0      	ldrb	r0, [r4, #6]
 80094c2:	f003 fc4f 	bl	800cd64 <LoRaMacTestSetDutyCycleOn>
    return LORAMAC_HANDLER_SUCCESS;
 80094c6:	4628      	mov	r0, r5
}
 80094c8:	b010      	add	sp, #64	; 0x40
 80094ca:	bd70      	pop	{r4, r5, r6, pc}
        mibReq.Type = MIB_NVM_BKP_CTXS;
 80094cc:	2327      	movs	r3, #39	; 0x27
 80094ce:	f88d 301c 	strb.w	r3, [sp, #28]
        if (LmHandlerCallbacks->OnRestoreContextRequest != NULL)
 80094d2:	4b24      	ldr	r3, [pc, #144]	; (8009564 <LmHandlerConfigure+0x1f4>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	691b      	ldr	r3, [r3, #16]
 80094d8:	b14b      	cbz	r3, 80094ee <LmHandlerConfigure+0x17e>
            LoRaMacMibGetRequestConfirm( &mibReq );
 80094da:	a807      	add	r0, sp, #28
 80094dc:	f002 feee 	bl	800c2bc <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest(mibReq.Param.BackupContexts, sizeof(LoRaMacNvmData_t));
 80094e0:	4b20      	ldr	r3, [pc, #128]	; (8009564 <LmHandlerConfigure+0x1f4>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	691b      	ldr	r3, [r3, #16]
 80094e6:	f44f 61e7 	mov.w	r1, #1848	; 0x738
 80094ea:	9808      	ldr	r0, [sp, #32]
 80094ec:	4798      	blx	r3
        mibReq.Type = MIB_NVM_CTXS;
 80094ee:	2326      	movs	r3, #38	; 0x26
 80094f0:	f88d 301c 	strb.w	r3, [sp, #28]
        if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 80094f4:	a807      	add	r0, sp, #28
 80094f6:	f003 f817 	bl	800c528 <LoRaMacMibSetRequestConfirm>
 80094fa:	2800      	cmp	r0, #0
 80094fc:	f47f af62 	bne.w	80093c4 <LmHandlerConfigure+0x54>
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 8009500:	2301      	movs	r3, #1
 8009502:	f88d 301c 	strb.w	r3, [sp, #28]
            LoRaMacMibGetRequestConfirm( &mibReq );
 8009506:	a807      	add	r0, sp, #28
 8009508:	f002 fed8 	bl	800c2bc <LoRaMacMibGetRequestConfirm>
            if (mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE)
 800950c:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8009510:	2b00      	cmp	r3, #0
 8009512:	f43f af57 	beq.w	80093c4 <LmHandlerConfigure+0x54>
                CtxRestoreDone = true;
 8009516:	4b12      	ldr	r3, [pc, #72]	; (8009560 <LmHandlerConfigure+0x1f0>)
 8009518:	2201      	movs	r2, #1
 800951a:	701a      	strb	r2, [r3, #0]
 800951c:	e752      	b.n	80093c4 <LmHandlerConfigure+0x54>
        mibReq.Type = MIB_NET_ID;
 800951e:	2305      	movs	r3, #5
 8009520:	f88d 301c 	strb.w	r3, [sp, #28]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 8009524:	2300      	movs	r3, #0
 8009526:	9308      	str	r3, [sp, #32]
        LoRaMacMibSetRequestConfirm(&mibReq);
 8009528:	a807      	add	r0, sp, #28
 800952a:	f002 fffd 	bl	800c528 <LoRaMacMibSetRequestConfirm>
        CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800952e:	4b0d      	ldr	r3, [pc, #52]	; (8009564 <LmHandlerConfigure+0x1f4>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	68db      	ldr	r3, [r3, #12]
 8009534:	4798      	blx	r3
 8009536:	4b0c      	ldr	r3, [pc, #48]	; (8009568 <LmHandlerConfigure+0x1f8>)
 8009538:	6158      	str	r0, [r3, #20]
        mibReq.Type = MIB_DEV_ADDR;
 800953a:	2306      	movs	r3, #6
 800953c:	f88d 301c 	strb.w	r3, [sp, #28]
        mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 8009540:	9008      	str	r0, [sp, #32]
        LoRaMacMibSetRequestConfirm(&mibReq);
 8009542:	a807      	add	r0, sp, #28
 8009544:	f002 fff0 	bl	800c528 <LoRaMacMibSetRequestConfirm>
 8009548:	e761      	b.n	800940e <LmHandlerConfigure+0x9e>
        return LORAMAC_HANDLER_ERROR;
 800954a:	f04f 30ff 	mov.w	r0, #4294967295
 800954e:	e7bb      	b.n	80094c8 <LmHandlerConfigure+0x158>
 8009550:	2000087c 	.word	0x2000087c
 8009554:	08014488 	.word	0x08014488
 8009558:	20000890 	.word	0x20000890
 800955c:	200008a4 	.word	0x200008a4
 8009560:	2000085e 	.word	0x2000085e
 8009564:	20000864 	.word	0x20000864
 8009568:	20000078 	.word	0x20000078
 800956c:	080144d4 	.word	0x080144d4

08009570 <LmHandlerPackageRegister>:
    switch( id )
 8009570:	b9e0      	cbnz	r0, 80095ac <LmHandlerPackageRegister+0x3c>
{
 8009572:	b538      	push	{r3, r4, r5, lr}
 8009574:	460c      	mov	r4, r1
 8009576:	4605      	mov	r5, r0
            package = LmhpCompliancePackageFactory( );
 8009578:	f000 fa82 	bl	8009a80 <LmhpCompliancePackageFactory>
    if( package != NULL )
 800957c:	b198      	cbz	r0, 80095a6 <LmHandlerPackageRegister+0x36>
        LmHandlerPackages[id] = package;
 800957e:	4a0d      	ldr	r2, [pc, #52]	; (80095b4 <LmHandlerPackageRegister+0x44>)
 8009580:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 8009584:	4a0c      	ldr	r2, [pc, #48]	; (80095b8 <LmHandlerPackageRegister+0x48>)
 8009586:	6282      	str	r2, [r0, #40]	; 0x28
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 8009588:	4a0c      	ldr	r2, [pc, #48]	; (80095bc <LmHandlerPackageRegister+0x4c>)
 800958a:	62c2      	str	r2, [r0, #44]	; 0x2c
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800958c:	4a0c      	ldr	r2, [pc, #48]	; (80095c0 <LmHandlerPackageRegister+0x50>)
 800958e:	6302      	str	r2, [r0, #48]	; 0x30
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 8009590:	4a0c      	ldr	r2, [pc, #48]	; (80095c4 <LmHandlerPackageRegister+0x54>)
 8009592:	6812      	ldr	r2, [r2, #0]
 8009594:	6992      	ldr	r2, [r2, #24]
 8009596:	6142      	str	r2, [r0, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 8009598:	6843      	ldr	r3, [r0, #4]
 800959a:	22f2      	movs	r2, #242	; 0xf2
 800959c:	490a      	ldr	r1, [pc, #40]	; (80095c8 <LmHandlerPackageRegister+0x58>)
 800959e:	4620      	mov	r0, r4
 80095a0:	4798      	blx	r3
        return LORAMAC_HANDLER_SUCCESS;
 80095a2:	2000      	movs	r0, #0
}
 80095a4:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_HANDLER_ERROR;
 80095a6:	f04f 30ff 	mov.w	r0, #4294967295
 80095aa:	e7fb      	b.n	80095a4 <LmHandlerPackageRegister+0x34>
 80095ac:	f04f 30ff 	mov.w	r0, #4294967295
}
 80095b0:	4770      	bx	lr
 80095b2:	bf00      	nop
 80095b4:	20000868 	.word	0x20000868
 80095b8:	08008f45 	.word	0x08008f45
 80095bc:	08009005 	.word	0x08009005
 80095c0:	08008e29 	.word	0x08008e29
 80095c4:	20000864 	.word	0x20000864
 80095c8:	2000076c 	.word	0x2000076c

080095cc <LmHandlerInit>:
{
 80095cc:	b508      	push	{r3, lr}
    LmHandlerCallbacks = handlerCallbacks;
 80095ce:	4b0f      	ldr	r3, [pc, #60]	; (800960c <LmHandlerInit+0x40>)
 80095d0:	6018      	str	r0, [r3, #0]
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 80095d2:	4b0f      	ldr	r3, [pc, #60]	; (8009610 <LmHandlerInit+0x44>)
 80095d4:	4a0f      	ldr	r2, [pc, #60]	; (8009614 <LmHandlerInit+0x48>)
 80095d6:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 80095d8:	4a0f      	ldr	r2, [pc, #60]	; (8009618 <LmHandlerInit+0x4c>)
 80095da:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 80095dc:	4a0f      	ldr	r2, [pc, #60]	; (800961c <LmHandlerInit+0x50>)
 80095de:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 80095e0:	4a0f      	ldr	r2, [pc, #60]	; (8009620 <LmHandlerInit+0x54>)
 80095e2:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 80095e4:	6802      	ldr	r2, [r0, #0]
 80095e6:	4b0f      	ldr	r3, [pc, #60]	; (8009624 <LmHandlerInit+0x58>)
 80095e8:	601a      	str	r2, [r3, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 80095ea:	6842      	ldr	r2, [r0, #4]
 80095ec:	605a      	str	r2, [r3, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 80095ee:	6882      	ldr	r2, [r0, #8]
 80095f0:	609a      	str	r2, [r3, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 80095f2:	4a0d      	ldr	r2, [pc, #52]	; (8009628 <LmHandlerInit+0x5c>)
 80095f4:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 80095f6:	6982      	ldr	r2, [r0, #24]
 80095f8:	611a      	str	r2, [r3, #16]
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 80095fa:	490c      	ldr	r1, [pc, #48]	; (800962c <LmHandlerInit+0x60>)
 80095fc:	2000      	movs	r0, #0
 80095fe:	f7ff ffb7 	bl	8009570 <LmHandlerPackageRegister>
 8009602:	b900      	cbnz	r0, 8009606 <LmHandlerInit+0x3a>
}
 8009604:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_ERROR;
 8009606:	f04f 30ff 	mov.w	r0, #4294967295
 800960a:	e7fb      	b.n	8009604 <LmHandlerInit+0x38>
 800960c:	20000864 	.word	0x20000864
 8009610:	200008a4 	.word	0x200008a4
 8009614:	08008dad 	.word	0x08008dad
 8009618:	080091cd 	.word	0x080091cd
 800961c:	0800929d 	.word	0x0800929d
 8009620:	0800911d 	.word	0x0800911d
 8009624:	20000890 	.word	0x20000890
 8009628:	0800de81 	.word	0x0800de81
 800962c:	20000098 	.word	0x20000098

08009630 <LmHandlerGetVersion>:
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion(LmHandlerVersionType_t lmhType, uint32_t *featureVersion)
{
    if (featureVersion == NULL)
 8009630:	b161      	cbz	r1, 800964c <LmHandlerGetVersion+0x1c>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    switch(lmhType)
 8009632:	b118      	cbz	r0, 800963c <LmHandlerGetVersion+0xc>
 8009634:	2801      	cmp	r0, #1
 8009636:	d005      	beq.n	8009644 <LmHandlerGetVersion+0x14>
 8009638:	2000      	movs	r0, #0
 800963a:	4770      	bx	lr
    {
        case LORAMAC_HANDLER_L2_VERSION:
            *featureVersion = LORAMAC_VERSION;
 800963c:	4a05      	ldr	r2, [pc, #20]	; (8009654 <LmHandlerGetVersion+0x24>)
 800963e:	600a      	str	r2, [r1, #0]
            break;
        default:
          break;
    }

    return LORAMAC_HANDLER_SUCCESS;
 8009640:	2000      	movs	r0, #0
            break;
 8009642:	4770      	bx	lr
            *featureVersion = REGION_VERSION;
 8009644:	4a04      	ldr	r2, [pc, #16]	; (8009658 <LmHandlerGetVersion+0x28>)
 8009646:	600a      	str	r2, [r1, #0]
    return LORAMAC_HANDLER_SUCCESS;
 8009648:	2000      	movs	r0, #0
            break;
 800964a:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800964c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009650:	4770      	bx	lr
 8009652:	bf00      	nop
 8009654:	01000300 	.word	0x01000300
 8009658:	01010003 	.word	0x01010003

0800965c <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop(void)
{
 800965c:	b508      	push	{r3, lr}
    if (LoRaMacDeInitialization() == LORAMAC_STATUS_OK)
 800965e:	f003 fb95 	bl	800cd8c <LoRaMacDeInitialization>
 8009662:	b900      	cbnz	r0, 8009666 <LmHandlerStop+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 8009664:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 8009666:	f06f 0001 	mvn.w	r0, #1
 800966a:	e7fb      	b.n	8009664 <LmHandlerStop+0x8>

0800966c <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt(void)
{
 800966c:	b508      	push	{r3, lr}
    if (LoRaMacHalt() == LORAMAC_STATUS_OK)
 800966e:	f002 fd8d 	bl	800c18c <LoRaMacHalt>
 8009672:	b900      	cbnz	r0, 8009676 <LmHandlerHalt+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 8009674:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 8009676:	f06f 0001 	mvn.w	r0, #1
 800967a:	e7fb      	b.n	8009674 <LmHandlerHalt+0x8>

0800967c <LmHandlerNvmDataStore>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800967c:	b510      	push	{r4, lr}
 800967e:	b08a      	sub	sp, #40	; 0x28
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
    int32_t status = NVM_DATA_OK;

    lmhStatus = LmHandlerHalt();
 8009680:	f7ff fff4 	bl	800966c <LmHandlerHalt>

    if (lmhStatus == LORAMAC_HANDLER_SUCCESS)
 8009684:	4604      	mov	r4, r0
 8009686:	b148      	cbz	r0, 800969c <LmHandlerNvmDataStore+0x20>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
        }
    }

    if ((lmhStatus == LORAMAC_HANDLER_SUCCESS) && (LmHandlerCallbacks->OnNvmDataChange != NULL ))
 8009688:	b92c      	cbnz	r4, 8009696 <LmHandlerNvmDataStore+0x1a>
 800968a:	4b18      	ldr	r3, [pc, #96]	; (80096ec <LmHandlerNvmDataStore+0x70>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	69db      	ldr	r3, [r3, #28]
 8009690:	b10b      	cbz	r3, 8009696 <LmHandlerNvmDataStore+0x1a>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 8009692:	2001      	movs	r0, #1
 8009694:	4798      	blx	r3
    }

    return lmhStatus;
}
 8009696:	4620      	mov	r0, r4
 8009698:	b00a      	add	sp, #40	; 0x28
 800969a:	bd10      	pop	{r4, pc}
        status = NvmDataMgmtStoreBegin();
 800969c:	f004 fbf1 	bl	800de82 <NvmDataMgmtStoreBegin>
        if (status == NVM_DATA_NO_UPDATED_DATA)
 80096a0:	f110 0f02 	cmn.w	r0, #2
 80096a4:	d012      	beq.n	80096cc <LmHandlerNvmDataStore+0x50>
        else if (( status != NVM_DATA_OK ) || (LmHandlerCallbacks->OnStoreContextRequest == NULL))
 80096a6:	b9d0      	cbnz	r0, 80096de <LmHandlerNvmDataStore+0x62>
 80096a8:	4b10      	ldr	r3, [pc, #64]	; (80096ec <LmHandlerNvmDataStore+0x70>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	695b      	ldr	r3, [r3, #20]
 80096ae:	b1cb      	cbz	r3, 80096e4 <LmHandlerNvmDataStore+0x68>
          mibReq.Type = MIB_NVM_CTXS;
 80096b0:	2326      	movs	r3, #38	; 0x26
 80096b2:	f88d 3004 	strb.w	r3, [sp, #4]
          LoRaMacMibGetRequestConfirm( &mibReq );
 80096b6:	a801      	add	r0, sp, #4
 80096b8:	f002 fe00 	bl	800c2bc <LoRaMacMibGetRequestConfirm>
          LmHandlerCallbacks->OnStoreContextRequest(nvm, nvm_size);
 80096bc:	4b0b      	ldr	r3, [pc, #44]	; (80096ec <LmHandlerNvmDataStore+0x70>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	695b      	ldr	r3, [r3, #20]
 80096c2:	f44f 61e7 	mov.w	r1, #1848	; 0x738
 80096c6:	9802      	ldr	r0, [sp, #8]
 80096c8:	4798      	blx	r3
 80096ca:	e001      	b.n	80096d0 <LmHandlerNvmDataStore+0x54>
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 80096cc:	f06f 0407 	mvn.w	r4, #7
        if ( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 80096d0:	f004 fbda 	bl	800de88 <NvmDataMgmtStoreEnd>
 80096d4:	2800      	cmp	r0, #0
 80096d6:	d0d7      	beq.n	8009688 <LmHandlerNvmDataStore+0xc>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 80096d8:	f04f 34ff 	mov.w	r4, #4294967295
 80096dc:	e7db      	b.n	8009696 <LmHandlerNvmDataStore+0x1a>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 80096de:	f04f 34ff 	mov.w	r4, #4294967295
 80096e2:	e7f5      	b.n	80096d0 <LmHandlerNvmDataStore+0x54>
 80096e4:	f04f 34ff 	mov.w	r4, #4294967295
 80096e8:	e7f2      	b.n	80096d0 <LmHandlerNvmDataStore+0x54>
 80096ea:	bf00      	nop
 80096ec:	20000864 	.word	0x20000864

080096f0 <LmhpComplianceInit>:
    return &LmhpCompliancePackage;
}

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 80096f0:	4603      	mov	r3, r0
 80096f2:	b140      	cbz	r0, 8009706 <LmhpComplianceInit+0x16>
 80096f4:	b139      	cbz	r1, 8009706 <LmhpComplianceInit+0x16>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 80096f6:	4807      	ldr	r0, [pc, #28]	; (8009714 <LmhpComplianceInit+0x24>)
 80096f8:	6003      	str	r3, [r0, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 80096fa:	4b07      	ldr	r3, [pc, #28]	; (8009718 <LmhpComplianceInit+0x28>)
 80096fc:	6099      	str	r1, [r3, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 80096fe:	715a      	strb	r2, [r3, #5]
        ComplianceTestState.Initialized = true;
 8009700:	2201      	movs	r2, #1
 8009702:	701a      	strb	r2, [r3, #0]
 8009704:	4770      	bx	lr
    }
    else
    {
        LmhpComplianceParams = NULL;
 8009706:	2300      	movs	r3, #0
 8009708:	4a02      	ldr	r2, [pc, #8]	; (8009714 <LmhpComplianceInit+0x24>)
 800970a:	6013      	str	r3, [r2, #0]
        ComplianceTestState.Initialized = false;
 800970c:	4a02      	ldr	r2, [pc, #8]	; (8009718 <LmhpComplianceInit+0x28>)
 800970e:	7013      	strb	r3, [r2, #0]
    }
}
 8009710:	4770      	bx	lr
 8009712:	bf00      	nop
 8009714:	200008e0 	.word	0x200008e0
 8009718:	200008b4 	.word	0x200008b4

0800971c <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
    return ComplianceTestState.Initialized;
}
 800971c:	4b01      	ldr	r3, [pc, #4]	; (8009724 <LmhpComplianceIsInitialized+0x8>)
 800971e:	7818      	ldrb	r0, [r3, #0]
 8009720:	4770      	bx	lr
 8009722:	bf00      	nop
 8009724:	200008b4 	.word	0x200008b4

08009728 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
    if( ComplianceTestState.Initialized == false )
 8009728:	4b02      	ldr	r3, [pc, #8]	; (8009734 <LmhpComplianceIsRunning+0xc>)
 800972a:	7818      	ldrb	r0, [r3, #0]
 800972c:	b100      	cbz	r0, 8009730 <LmhpComplianceIsRunning+0x8>
    {
        return false;
    }

    return ComplianceTestState.IsRunning;
 800972e:	7858      	ldrb	r0, [r3, #1]
}
 8009730:	4770      	bx	lr
 8009732:	bf00      	nop
 8009734:	200008b4 	.word	0x200008b4

08009738 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
    if (ComplianceTestState.Initialized == false)
 8009738:	4b08      	ldr	r3, [pc, #32]	; (800975c <LmhpComplianceOnMcpsConfirm+0x24>)
 800973a:	781b      	ldrb	r3, [r3, #0]
 800973c:	b12b      	cbz	r3, 800974a <LmhpComplianceOnMcpsConfirm+0x12>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800973e:	4b07      	ldr	r3, [pc, #28]	; (800975c <LmhpComplianceOnMcpsConfirm+0x24>)
 8009740:	785b      	ldrb	r3, [r3, #1]
 8009742:	b113      	cbz	r3, 800974a <LmhpComplianceOnMcpsConfirm+0x12>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 8009744:	7803      	ldrb	r3, [r0, #0]
    if ((ComplianceTestState.IsRunning == true) &&
 8009746:	2b01      	cmp	r3, #1
 8009748:	d000      	beq.n	800974c <LmhpComplianceOnMcpsConfirm+0x14>
        (mcpsConfirm->AckReceived != 0))
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
    }
}
 800974a:	4770      	bx	lr
        (mcpsConfirm->AckReceived != 0))
 800974c:	7903      	ldrb	r3, [r0, #4]
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800974e:	2b00      	cmp	r3, #0
 8009750:	d0fb      	beq.n	800974a <LmhpComplianceOnMcpsConfirm+0x12>
        ComplianceTestState.DownLinkCounter++;
 8009752:	4a02      	ldr	r2, [pc, #8]	; (800975c <LmhpComplianceOnMcpsConfirm+0x24>)
 8009754:	8993      	ldrh	r3, [r2, #12]
 8009756:	3301      	adds	r3, #1
 8009758:	8193      	strh	r3, [r2, #12]
 800975a:	e7f6      	b.n	800974a <LmhpComplianceOnMcpsConfirm+0x12>
 800975c:	200008b4 	.word	0x200008b4

08009760 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
    if( ComplianceTestState.Initialized == false )
 8009760:	4b08      	ldr	r3, [pc, #32]	; (8009784 <LmhpComplianceOnMlmeConfirm+0x24>)
 8009762:	781b      	ldrb	r3, [r3, #0]
 8009764:	b12b      	cbz	r3, 8009772 <LmhpComplianceOnMlmeConfirm+0x12>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 8009766:	4b07      	ldr	r3, [pc, #28]	; (8009784 <LmhpComplianceOnMlmeConfirm+0x24>)
 8009768:	785b      	ldrb	r3, [r3, #1]
 800976a:	b113      	cbz	r3, 8009772 <LmhpComplianceOnMlmeConfirm+0x12>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 800976c:	7803      	ldrb	r3, [r0, #0]
 800976e:	2b04      	cmp	r3, #4
 8009770:	d000      	beq.n	8009774 <LmhpComplianceOnMlmeConfirm+0x14>
    {
        ComplianceTestState.LinkCheck = true;
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
    }
}
 8009772:	4770      	bx	lr
        ComplianceTestState.LinkCheck = true;
 8009774:	4b03      	ldr	r3, [pc, #12]	; (8009784 <LmhpComplianceOnMlmeConfirm+0x24>)
 8009776:	2201      	movs	r2, #1
 8009778:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800977a:	7a02      	ldrb	r2, [r0, #8]
 800977c:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800977e:	7a42      	ldrb	r2, [r0, #9]
 8009780:	741a      	strb	r2, [r3, #16]
 8009782:	e7f6      	b.n	8009772 <LmhpComplianceOnMlmeConfirm+0x12>
 8009784:	200008b4 	.word	0x200008b4

08009788 <LmhpComplianceProcess>:
}

static void LmhpComplianceProcess( void )
{
    /* Nothing to process */
}
 8009788:	4770      	bx	lr
	...

0800978c <LmhpComplianceTxProcess>:
    if( ComplianceTestState.Initialized == false )
 800978c:	4b23      	ldr	r3, [pc, #140]	; (800981c <LmhpComplianceTxProcess+0x90>)
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d03d      	beq.n	8009810 <LmhpComplianceTxProcess+0x84>
    if( ComplianceTestState.IsRunning == false )
 8009794:	4b21      	ldr	r3, [pc, #132]	; (800981c <LmhpComplianceTxProcess+0x90>)
 8009796:	785b      	ldrb	r3, [r3, #1]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d03c      	beq.n	8009816 <LmhpComplianceTxProcess+0x8a>
{
 800979c:	b510      	push	{r4, lr}
 800979e:	b082      	sub	sp, #8
    if( ComplianceTestState.LinkCheck == true )
 80097a0:	4b1e      	ldr	r3, [pc, #120]	; (800981c <LmhpComplianceTxProcess+0x90>)
 80097a2:	7b9b      	ldrb	r3, [r3, #14]
 80097a4:	b30b      	cbz	r3, 80097ea <LmhpComplianceTxProcess+0x5e>
        ComplianceTestState.LinkCheck = false;
 80097a6:	4b1d      	ldr	r3, [pc, #116]	; (800981c <LmhpComplianceTxProcess+0x90>)
 80097a8:	2200      	movs	r2, #0
 80097aa:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 80097ac:	2203      	movs	r2, #3
 80097ae:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 80097b0:	689a      	ldr	r2, [r3, #8]
 80097b2:	2105      	movs	r1, #5
 80097b4:	7011      	strb	r1, [r2, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 80097b6:	7bd9      	ldrb	r1, [r3, #15]
 80097b8:	7051      	strb	r1, [r2, #1]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 80097ba:	7c19      	ldrb	r1, [r3, #16]
 80097bc:	7091      	strb	r1, [r2, #2]
        ComplianceTestState.State = 1;
 80097be:	2201      	movs	r2, #1
 80097c0:	709a      	strb	r2, [r3, #2]
    LmHandlerAppData_t appData =
 80097c2:	23e0      	movs	r3, #224	; 0xe0
 80097c4:	f88d 3000 	strb.w	r3, [sp]
        .BufferSize = ComplianceTestState.DataBufferSize,
 80097c8:	4c14      	ldr	r4, [pc, #80]	; (800981c <LmhpComplianceTxProcess+0x90>)
 80097ca:	79a3      	ldrb	r3, [r4, #6]
    LmHandlerAppData_t appData =
 80097cc:	f88d 3001 	strb.w	r3, [sp, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 80097d0:	68a3      	ldr	r3, [r4, #8]
    LmHandlerAppData_t appData =
 80097d2:	9301      	str	r3, [sp, #4]
    TimerStart( &ComplianceTxNextPacketTimer );
 80097d4:	4812      	ldr	r0, [pc, #72]	; (8009820 <LmhpComplianceTxProcess+0x94>)
 80097d6:	f009 feeb 	bl	80135b0 <UTIL_TIMER_Start>
    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, true );
 80097da:	4b12      	ldr	r3, [pc, #72]	; (8009824 <LmhpComplianceTxProcess+0x98>)
 80097dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097de:	2201      	movs	r2, #1
 80097e0:	78e1      	ldrb	r1, [r4, #3]
 80097e2:	4668      	mov	r0, sp
 80097e4:	4798      	blx	r3
}
 80097e6:	b002      	add	sp, #8
 80097e8:	bd10      	pop	{r4, pc}
        switch( ComplianceTestState.State )
 80097ea:	4b0c      	ldr	r3, [pc, #48]	; (800981c <LmhpComplianceTxProcess+0x90>)
 80097ec:	789b      	ldrb	r3, [r3, #2]
 80097ee:	2b01      	cmp	r3, #1
 80097f0:	d005      	beq.n	80097fe <LmhpComplianceTxProcess+0x72>
 80097f2:	2b04      	cmp	r3, #4
 80097f4:	d1e5      	bne.n	80097c2 <LmhpComplianceTxProcess+0x36>
            ComplianceTestState.State = 1;
 80097f6:	4b09      	ldr	r3, [pc, #36]	; (800981c <LmhpComplianceTxProcess+0x90>)
 80097f8:	2201      	movs	r2, #1
 80097fa:	709a      	strb	r2, [r3, #2]
            break;
 80097fc:	e7e1      	b.n	80097c2 <LmhpComplianceTxProcess+0x36>
            ComplianceTestState.DataBufferSize = 2;
 80097fe:	4b07      	ldr	r3, [pc, #28]	; (800981c <LmhpComplianceTxProcess+0x90>)
 8009800:	2202      	movs	r2, #2
 8009802:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 8009804:	899a      	ldrh	r2, [r3, #12]
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	0a11      	lsrs	r1, r2, #8
 800980a:	7019      	strb	r1, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800980c:	705a      	strb	r2, [r3, #1]
            break;
 800980e:	e7d8      	b.n	80097c2 <LmhpComplianceTxProcess+0x36>
        return LORAMAC_HANDLER_ERROR;
 8009810:	f04f 30ff 	mov.w	r0, #4294967295
 8009814:	4770      	bx	lr
        return LORAMAC_HANDLER_SUCCESS;
 8009816:	2000      	movs	r0, #0
}
 8009818:	4770      	bx	lr
 800981a:	bf00      	nop
 800981c:	200008b4 	.word	0x200008b4
 8009820:	200008c8 	.word	0x200008c8
 8009824:	200000d4 	.word	0x200000d4

08009828 <LmhpComplianceOnMcpsIndication>:
    if( ComplianceTestState.Initialized == false )
 8009828:	4b8e      	ldr	r3, [pc, #568]	; (8009a64 <LmhpComplianceOnMcpsIndication+0x23c>)
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	2b00      	cmp	r3, #0
 800982e:	f000 8117 	beq.w	8009a60 <LmhpComplianceOnMcpsIndication+0x238>
    if( mcpsIndication->RxData == false )
 8009832:	7b43      	ldrb	r3, [r0, #13]
 8009834:	2b00      	cmp	r3, #0
 8009836:	f000 8113 	beq.w	8009a60 <LmhpComplianceOnMcpsIndication+0x238>
    if ((ComplianceTestState.IsRunning == true) &&
 800983a:	4b8a      	ldr	r3, [pc, #552]	; (8009a64 <LmhpComplianceOnMcpsIndication+0x23c>)
 800983c:	785b      	ldrb	r3, [r3, #1]
 800983e:	b12b      	cbz	r3, 800984c <LmhpComplianceOnMcpsIndication+0x24>
        (mcpsIndication->AckReceived == 0))
 8009840:	7b82      	ldrb	r2, [r0, #14]
    if ((ComplianceTestState.IsRunning == true) &&
 8009842:	b91a      	cbnz	r2, 800984c <LmhpComplianceOnMcpsIndication+0x24>
        ComplianceTestState.DownLinkCounter++;
 8009844:	4987      	ldr	r1, [pc, #540]	; (8009a64 <LmhpComplianceOnMcpsIndication+0x23c>)
 8009846:	898a      	ldrh	r2, [r1, #12]
 8009848:	3201      	adds	r2, #1
 800984a:	818a      	strh	r2, [r1, #12]
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800984c:	78c2      	ldrb	r2, [r0, #3]
 800984e:	2ae0      	cmp	r2, #224	; 0xe0
 8009850:	f040 8106 	bne.w	8009a60 <LmhpComplianceOnMcpsIndication+0x238>
{
 8009854:	b510      	push	{r4, lr}
 8009856:	b08c      	sub	sp, #48	; 0x30
    if( ComplianceTestState.IsRunning == false )
 8009858:	2b00      	cmp	r3, #0
 800985a:	d140      	bne.n	80098de <LmhpComplianceOnMcpsIndication+0xb6>
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800985c:	7b03      	ldrb	r3, [r0, #12]
 800985e:	2b04      	cmp	r3, #4
 8009860:	d001      	beq.n	8009866 <LmhpComplianceOnMcpsIndication+0x3e>
}
 8009862:	b00c      	add	sp, #48	; 0x30
 8009864:	bd10      	pop	{r4, pc}
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8009866:	6883      	ldr	r3, [r0, #8]
 8009868:	781a      	ldrb	r2, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800986a:	2a01      	cmp	r2, #1
 800986c:	d1f9      	bne.n	8009862 <LmhpComplianceOnMcpsIndication+0x3a>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800986e:	785a      	ldrb	r2, [r3, #1]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8009870:	2a01      	cmp	r2, #1
 8009872:	d1f6      	bne.n	8009862 <LmhpComplianceOnMcpsIndication+0x3a>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8009874:	789a      	ldrb	r2, [r3, #2]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8009876:	2a01      	cmp	r2, #1
 8009878:	d1f3      	bne.n	8009862 <LmhpComplianceOnMcpsIndication+0x3a>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 800987a:	78db      	ldrb	r3, [r3, #3]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800987c:	2b01      	cmp	r3, #1
 800987e:	d1f0      	bne.n	8009862 <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.IsTxConfirmed = false;
 8009880:	4b78      	ldr	r3, [pc, #480]	; (8009a64 <LmhpComplianceOnMcpsIndication+0x23c>)
 8009882:	2400      	movs	r4, #0
 8009884:	70dc      	strb	r4, [r3, #3]
            ComplianceTestState.Port = 224;
 8009886:	22e0      	movs	r2, #224	; 0xe0
 8009888:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 800988a:	2202      	movs	r2, #2
 800988c:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 800988e:	819c      	strh	r4, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 8009890:	739c      	strb	r4, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 8009892:	73dc      	strb	r4, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 8009894:	741c      	strb	r4, [r3, #16]
            ComplianceTestState.IsRunning = true;
 8009896:	2201      	movs	r2, #1
 8009898:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 800989a:	709a      	strb	r2, [r3, #2]
            mibReq.Type = MIB_ADR;
 800989c:	2304      	movs	r3, #4
 800989e:	f88d 300c 	strb.w	r3, [sp, #12]
            mibReq.Param.AdrEnable = true;
 80098a2:	f88d 2010 	strb.w	r2, [sp, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 80098a6:	a803      	add	r0, sp, #12
 80098a8:	f002 fe3e 	bl	800c528 <LoRaMacMibSetRequestConfirm>
            LoRaMacTestSetDutyCycleOn( false );
 80098ac:	4620      	mov	r0, r4
 80098ae:	f003 fa59 	bl	800cd64 <LoRaMacTestSetDutyCycleOn>
            if( LmhpComplianceParams->StopPeripherals != NULL )
 80098b2:	4b6d      	ldr	r3, [pc, #436]	; (8009a68 <LmhpComplianceOnMcpsIndication+0x240>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	b103      	cbz	r3, 80098bc <LmhpComplianceOnMcpsIndication+0x94>
                LmhpComplianceParams->StopPeripherals( );
 80098ba:	4798      	blx	r3
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 80098bc:	4c6b      	ldr	r4, [pc, #428]	; (8009a6c <LmhpComplianceOnMcpsIndication+0x244>)
 80098be:	2200      	movs	r2, #0
 80098c0:	9200      	str	r2, [sp, #0]
 80098c2:	4b6b      	ldr	r3, [pc, #428]	; (8009a70 <LmhpComplianceOnMcpsIndication+0x248>)
 80098c4:	f04f 31ff 	mov.w	r1, #4294967295
 80098c8:	4620      	mov	r0, r4
 80098ca:	f009 fdb9 	bl	8013440 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 80098ce:	f241 3188 	movw	r1, #5000	; 0x1388
 80098d2:	4620      	mov	r0, r4
 80098d4:	f009 feb2 	bl	801363c <UTIL_TIMER_SetPeriod>
            LmhpComplianceTxProcess( );
 80098d8:	f7ff ff58 	bl	800978c <LmhpComplianceTxProcess>
 80098dc:	e7c1      	b.n	8009862 <LmhpComplianceOnMcpsIndication+0x3a>
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 80098de:	6882      	ldr	r2, [r0, #8]
 80098e0:	7813      	ldrb	r3, [r2, #0]
 80098e2:	4960      	ldr	r1, [pc, #384]	; (8009a64 <LmhpComplianceOnMcpsIndication+0x23c>)
 80098e4:	708b      	strb	r3, [r1, #2]
        switch( ComplianceTestState.State )
 80098e6:	2b0a      	cmp	r3, #10
 80098e8:	d8bb      	bhi.n	8009862 <LmhpComplianceOnMcpsIndication+0x3a>
 80098ea:	e8df f003 	tbb	[pc, r3]
 80098ee:	2206      	.short	0x2206
 80098f0:	47312b26 	.word	0x47312b26
 80098f4:	a59e6e4e 	.word	0xa59e6e4e
 80098f8:	af          	.byte	0xaf
 80098f9:	00          	.byte	0x00
                TimerStop( &ComplianceTxNextPacketTimer );
 80098fa:	485c      	ldr	r0, [pc, #368]	; (8009a6c <LmhpComplianceOnMcpsIndication+0x244>)
 80098fc:	f009 fdfe 	bl	80134fc <UTIL_TIMER_Stop>
                ComplianceTestState.DownLinkCounter = 0;
 8009900:	4b58      	ldr	r3, [pc, #352]	; (8009a64 <LmhpComplianceOnMcpsIndication+0x23c>)
 8009902:	2200      	movs	r2, #0
 8009904:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 8009906:	705a      	strb	r2, [r3, #1]
                mibReq.Type = MIB_ADR;
 8009908:	2304      	movs	r3, #4
 800990a:	f88d 300c 	strb.w	r3, [sp, #12]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800990e:	4c56      	ldr	r4, [pc, #344]	; (8009a68 <LmhpComplianceOnMcpsIndication+0x240>)
 8009910:	6823      	ldr	r3, [r4, #0]
 8009912:	781b      	ldrb	r3, [r3, #0]
 8009914:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8009918:	a803      	add	r0, sp, #12
 800991a:	f002 fe05 	bl	800c528 <LoRaMacMibSetRequestConfirm>
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800991e:	6823      	ldr	r3, [r4, #0]
 8009920:	7858      	ldrb	r0, [r3, #1]
 8009922:	f003 fa1f 	bl	800cd64 <LoRaMacTestSetDutyCycleOn>
                if( LmhpComplianceParams->StartPeripherals != NULL )
 8009926:	6823      	ldr	r3, [r4, #0]
 8009928:	689b      	ldr	r3, [r3, #8]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d099      	beq.n	8009862 <LmhpComplianceOnMcpsIndication+0x3a>
                    LmhpComplianceParams->StartPeripherals( );
 800992e:	4798      	blx	r3
            break;
 8009930:	e797      	b.n	8009862 <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.DataBufferSize = 2;
 8009932:	4b4c      	ldr	r3, [pc, #304]	; (8009a64 <LmhpComplianceOnMcpsIndication+0x23c>)
 8009934:	2202      	movs	r2, #2
 8009936:	719a      	strb	r2, [r3, #6]
            break;
 8009938:	e793      	b.n	8009862 <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.IsTxConfirmed = true;
 800993a:	4b4a      	ldr	r3, [pc, #296]	; (8009a64 <LmhpComplianceOnMcpsIndication+0x23c>)
 800993c:	2201      	movs	r2, #1
 800993e:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 8009940:	709a      	strb	r2, [r3, #2]
            break;
 8009942:	e78e      	b.n	8009862 <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.IsTxConfirmed = false;
 8009944:	4b47      	ldr	r3, [pc, #284]	; (8009a64 <LmhpComplianceOnMcpsIndication+0x23c>)
 8009946:	2200      	movs	r2, #0
 8009948:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800994a:	2201      	movs	r2, #1
 800994c:	709a      	strb	r2, [r3, #2]
            break;
 800994e:	e788      	b.n	8009862 <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 8009950:	7b01      	ldrb	r1, [r0, #12]
 8009952:	4b44      	ldr	r3, [pc, #272]	; (8009a64 <LmhpComplianceOnMcpsIndication+0x23c>)
 8009954:	7199      	strb	r1, [r3, #6]
            ComplianceTestState.DataBuffer[0] = 4;
 8009956:	689c      	ldr	r4, [r3, #8]
 8009958:	2304      	movs	r3, #4
 800995a:	7023      	strb	r3, [r4, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800995c:	2301      	movs	r3, #1
 800995e:	4a41      	ldr	r2, [pc, #260]	; (8009a64 <LmhpComplianceOnMcpsIndication+0x23c>)
 8009960:	7952      	ldrb	r2, [r2, #5]
 8009962:	428a      	cmp	r2, r1
 8009964:	bf28      	it	cs
 8009966:	460a      	movcs	r2, r1
 8009968:	429a      	cmp	r2, r3
 800996a:	f67f af7a 	bls.w	8009862 <LmhpComplianceOnMcpsIndication+0x3a>
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800996e:	6882      	ldr	r2, [r0, #8]
 8009970:	5cd2      	ldrb	r2, [r2, r3]
 8009972:	3201      	adds	r2, #1
 8009974:	54e2      	strb	r2, [r4, r3]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 8009976:	3301      	adds	r3, #1
 8009978:	b2db      	uxtb	r3, r3
 800997a:	e7f0      	b.n	800995e <LmhpComplianceOnMcpsIndication+0x136>
                mlmeReq.Type = MLME_LINK_CHECK;
 800997c:	2304      	movs	r3, #4
 800997e:	f88d 300c 	strb.w	r3, [sp, #12]
                LoRaMacMlmeRequest( &mlmeReq );
 8009982:	a803      	add	r0, sp, #12
 8009984:	f003 f85c 	bl	800ca40 <LoRaMacMlmeRequest>
            break;
 8009988:	e76b      	b.n	8009862 <LmhpComplianceOnMcpsIndication+0x3a>
                TimerStop(&ComplianceTxNextPacketTimer);
 800998a:	4838      	ldr	r0, [pc, #224]	; (8009a6c <LmhpComplianceOnMcpsIndication+0x244>)
 800998c:	f009 fdb6 	bl	80134fc <UTIL_TIMER_Stop>
                ComplianceTestState.DownLinkCounter = 0;
 8009990:	4b34      	ldr	r3, [pc, #208]	; (8009a64 <LmhpComplianceOnMcpsIndication+0x23c>)
 8009992:	2200      	movs	r2, #0
 8009994:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 8009996:	705a      	strb	r2, [r3, #1]
                mibReq.Type = MIB_ADR;
 8009998:	2304      	movs	r3, #4
 800999a:	f88d 300c 	strb.w	r3, [sp, #12]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800999e:	4c32      	ldr	r4, [pc, #200]	; (8009a68 <LmhpComplianceOnMcpsIndication+0x240>)
 80099a0:	6823      	ldr	r3, [r4, #0]
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 80099a8:	a803      	add	r0, sp, #12
 80099aa:	f002 fdbd 	bl	800c528 <LoRaMacMibSetRequestConfirm>
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 80099ae:	6823      	ldr	r3, [r4, #0]
 80099b0:	7858      	ldrb	r0, [r3, #1]
 80099b2:	f003 f9d7 	bl	800cd64 <LoRaMacTestSetDutyCycleOn>
                if( LmhpComplianceParams->StartPeripherals != NULL )
 80099b6:	6823      	ldr	r3, [r4, #0]
 80099b8:	689b      	ldr	r3, [r3, #8]
 80099ba:	b103      	cbz	r3, 80099be <LmhpComplianceOnMcpsIndication+0x196>
                    LmhpComplianceParams->StartPeripherals( );
 80099bc:	4798      	blx	r3
                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 80099be:	4b2d      	ldr	r3, [pc, #180]	; (8009a74 <LmhpComplianceOnMcpsIndication+0x24c>)
 80099c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099c2:	2101      	movs	r1, #1
 80099c4:	2002      	movs	r0, #2
 80099c6:	4798      	blx	r3
            break;
 80099c8:	e74b      	b.n	8009862 <LmhpComplianceOnMcpsIndication+0x3a>
                if( mcpsIndication->BufferSize == 3 )
 80099ca:	7b03      	ldrb	r3, [r0, #12]
 80099cc:	2b03      	cmp	r3, #3
 80099ce:	d008      	beq.n	80099e2 <LmhpComplianceOnMcpsIndication+0x1ba>
                else if( mcpsIndication->BufferSize == 7 )
 80099d0:	2b07      	cmp	r3, #7
 80099d2:	d010      	beq.n	80099f6 <LmhpComplianceOnMcpsIndication+0x1ce>
                LoRaMacMlmeRequest( &mlmeReq );
 80099d4:	a803      	add	r0, sp, #12
 80099d6:	f003 f833 	bl	800ca40 <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 80099da:	4b22      	ldr	r3, [pc, #136]	; (8009a64 <LmhpComplianceOnMcpsIndication+0x23c>)
 80099dc:	2201      	movs	r2, #1
 80099de:	709a      	strb	r2, [r3, #2]
            break;
 80099e0:	e73f      	b.n	8009862 <LmhpComplianceOnMcpsIndication+0x3a>
                    mlmeReq.Type = MLME_TXCW;
 80099e2:	2305      	movs	r3, #5
 80099e4:	f88d 300c 	strb.w	r3, [sp, #12]
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 80099e8:	7851      	ldrb	r1, [r2, #1]
 80099ea:	7893      	ldrb	r3, [r2, #2]
 80099ec:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80099f0:	f8ad 3010 	strh.w	r3, [sp, #16]
 80099f4:	e7ee      	b.n	80099d4 <LmhpComplianceOnMcpsIndication+0x1ac>
                    mlmeReq.Type = MLME_TXCW_1;
 80099f6:	2306      	movs	r3, #6
 80099f8:	f88d 300c 	strb.w	r3, [sp, #12]
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 80099fc:	7851      	ldrb	r1, [r2, #1]
 80099fe:	7893      	ldrb	r3, [r2, #2]
 8009a00:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009a04:	f8ad 3010 	strh.w	r3, [sp, #16]
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 8009a08:	78d1      	ldrb	r1, [r2, #3]
 8009a0a:	7913      	ldrb	r3, [r2, #4]
 8009a0c:	021b      	lsls	r3, r3, #8
 8009a0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8009a12:	7952      	ldrb	r2, [r2, #5]
 8009a14:	4313      	orrs	r3, r2
 8009a16:	2264      	movs	r2, #100	; 0x64
 8009a18:	fb02 f303 	mul.w	r3, r2, r3
 8009a1c:	9305      	str	r3, [sp, #20]
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 8009a1e:	6883      	ldr	r3, [r0, #8]
 8009a20:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8009a24:	f88d 3018 	strb.w	r3, [sp, #24]
 8009a28:	e7d4      	b.n	80099d4 <LmhpComplianceOnMcpsIndication+0x1ac>
                mlmeReq.Type = MLME_DEVICE_TIME;
 8009a2a:	230a      	movs	r3, #10
 8009a2c:	f88d 300c 	strb.w	r3, [sp, #12]
                LoRaMacMlmeRequest( &mlmeReq );
 8009a30:	a803      	add	r0, sp, #12
 8009a32:	f003 f805 	bl	800ca40 <LoRaMacMlmeRequest>
            break;
 8009a36:	e714      	b.n	8009862 <LmhpComplianceOnMcpsIndication+0x3a>
                mibReq.Type = MIB_DEVICE_CLASS;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	f88d 300c 	strb.w	r3, [sp, #12]
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 8009a3e:	7853      	ldrb	r3, [r2, #1]
 8009a40:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8009a44:	a803      	add	r0, sp, #12
 8009a46:	f002 fd6f 	bl	800c528 <LoRaMacMibSetRequestConfirm>
            break;
 8009a4a:	e70a      	b.n	8009862 <LmhpComplianceOnMcpsIndication+0x3a>
                mlmeReq.Type = MLME_PING_SLOT_INFO;
 8009a4c:	230d      	movs	r3, #13
 8009a4e:	f88d 300c 	strb.w	r3, [sp, #12]
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 8009a52:	7853      	ldrb	r3, [r2, #1]
 8009a54:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMlmeRequest( &mlmeReq );
 8009a58:	a803      	add	r0, sp, #12
 8009a5a:	f002 fff1 	bl	800ca40 <LoRaMacMlmeRequest>
            break;
 8009a5e:	e700      	b.n	8009862 <LmhpComplianceOnMcpsIndication+0x3a>
 8009a60:	4770      	bx	lr
 8009a62:	bf00      	nop
 8009a64:	200008b4 	.word	0x200008b4
 8009a68:	200008e0 	.word	0x200008e0
 8009a6c:	200008c8 	.word	0x200008c8
 8009a70:	08009a79 	.word	0x08009a79
 8009a74:	200000d4 	.word	0x200000d4

08009a78 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 8009a78:	b508      	push	{r3, lr}
    LmhpComplianceTxProcess( );
 8009a7a:	f7ff fe87 	bl	800978c <LmhpComplianceTxProcess>
}
 8009a7e:	bd08      	pop	{r3, pc}

08009a80 <LmhpCompliancePackageFactory>:
}
 8009a80:	4800      	ldr	r0, [pc, #0]	; (8009a84 <LmhpCompliancePackageFactory+0x4>)
 8009a82:	4770      	bx	lr
 8009a84:	200000d4 	.word	0x200000d4

08009a88 <OnRadioRxError>:
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
}

static void OnRadioRxError( void )
{
 8009a88:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 8009a8a:	4a06      	ldr	r2, [pc, #24]	; (8009aa4 <OnRadioRxError+0x1c>)
 8009a8c:	7813      	ldrb	r3, [r2, #0]
 8009a8e:	f043 0302 	orr.w	r3, r3, #2
 8009a92:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8009a94:	4b04      	ldr	r3, [pc, #16]	; (8009aa8 <OnRadioRxError+0x20>)
 8009a96:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8009a9a:	b113      	cbz	r3, 8009aa2 <OnRadioRxError+0x1a>
 8009a9c:	691b      	ldr	r3, [r3, #16]
 8009a9e:	b103      	cbz	r3, 8009aa2 <OnRadioRxError+0x1a>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8009aa0:	4798      	blx	r3
    }
}
 8009aa2:	bd08      	pop	{r3, pc}
 8009aa4:	200008e4 	.word	0x200008e4
 8009aa8:	200008e8 	.word	0x200008e8

08009aac <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8009aac:	4b07      	ldr	r3, [pc, #28]	; (8009acc <UpdateRxSlotIdleState+0x20>)
 8009aae:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8009ab2:	2b02      	cmp	r3, #2
 8009ab4:	d004      	beq.n	8009ac0 <UpdateRxSlotIdleState+0x14>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8009ab6:	4b06      	ldr	r3, [pc, #24]	; (8009ad0 <UpdateRxSlotIdleState+0x24>)
 8009ab8:	2206      	movs	r2, #6
 8009aba:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
 8009abe:	4770      	bx	lr
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 8009ac0:	4b03      	ldr	r3, [pc, #12]	; (8009ad0 <UpdateRxSlotIdleState+0x24>)
 8009ac2:	2202      	movs	r2, #2
 8009ac4:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
    }
}
 8009ac8:	4770      	bx	lr
 8009aca:	bf00      	nop
 8009acc:	20008000 	.word	0x20008000
 8009ad0:	200008e8 	.word	0x200008e8

08009ad4 <LoRaMacEnableRequests>:
    return true;
}

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
    MacCtx.AllowRequests = requestState;
 8009ad4:	4b01      	ldr	r3, [pc, #4]	; (8009adc <LoRaMacEnableRequests+0x8>)
 8009ad6:	f883 0486 	strb.w	r0, [r3, #1158]	; 0x486
}
 8009ada:	4770      	bx	lr
 8009adc:	200008e8 	.word	0x200008e8

08009ae0 <LoRaMacHandleIndicationEvents>:
        }
    }
}

static void LoRaMacHandleIndicationEvents( void )
{
 8009ae0:	b508      	push	{r3, lr}
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8009ae2:	4b15      	ldr	r3, [pc, #84]	; (8009b38 <LoRaMacHandleIndicationEvents+0x58>)
 8009ae4:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8009ae8:	f013 0f08 	tst.w	r3, #8
 8009aec:	d00e      	beq.n	8009b0c <LoRaMacHandleIndicationEvents+0x2c>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8009aee:	4812      	ldr	r0, [pc, #72]	; (8009b38 <LoRaMacHandleIndicationEvents+0x58>)
 8009af0:	f890 3485 	ldrb.w	r3, [r0, #1157]	; 0x485
 8009af4:	f36f 03c3 	bfc	r3, #3, #1
 8009af8:	f880 3485 	strb.w	r3, [r0, #1157]	; 0x485
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 8009afc:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8009b00:	68db      	ldr	r3, [r3, #12]
 8009b02:	f500 6190 	add.w	r1, r0, #1152	; 0x480
 8009b06:	f500 608c 	add.w	r0, r0, #1120	; 0x460
 8009b0a:	4798      	blx	r3
    }
    */
    /*ST_WORKAROUND_END */

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8009b0c:	4b0a      	ldr	r3, [pc, #40]	; (8009b38 <LoRaMacHandleIndicationEvents+0x58>)
 8009b0e:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8009b12:	f013 0f02 	tst.w	r3, #2
 8009b16:	d00e      	beq.n	8009b36 <LoRaMacHandleIndicationEvents+0x56>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8009b18:	4807      	ldr	r0, [pc, #28]	; (8009b38 <LoRaMacHandleIndicationEvents+0x58>)
 8009b1a:	f890 3485 	ldrb.w	r3, [r0, #1157]	; 0x485
 8009b1e:	f36f 0341 	bfc	r3, #1, #1
 8009b22:	f880 3485 	strb.w	r3, [r0, #1157]	; 0x485
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 8009b26:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	f500 6190 	add.w	r1, r0, #1152	; 0x480
 8009b30:	f200 401c 	addw	r0, r0, #1052	; 0x41c
 8009b34:	4798      	blx	r3
    }
}
 8009b36:	bd08      	pop	{r3, pc}
 8009b38:	200008e8 	.word	0x200008e8

08009b3c <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8009b3c:	4b07      	ldr	r3, [pc, #28]	; (8009b5c <LoRaMacCheckForRxAbort+0x20>)
 8009b3e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009b42:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009b46:	d008      	beq.n	8009b5a <LoRaMacCheckForRxAbort+0x1e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 8009b48:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8009b4c:	4a03      	ldr	r2, [pc, #12]	; (8009b5c <LoRaMacCheckForRxAbort+0x20>)
 8009b4e:	f8c2 1340 	str.w	r1, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009b52:	f023 0382 	bic.w	r3, r3, #130	; 0x82
 8009b56:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 8009b5a:	4770      	bx	lr
 8009b5c:	200008e8 	.word	0x200008e8

08009b60 <CalculateBackOff>:

static void CalculateBackOff( void )
{
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8009b60:	4b06      	ldr	r3, [pc, #24]	; (8009b7c <CalculateBackOff+0x1c>)
 8009b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b64:	b94b      	cbnz	r3, 8009b7a <CalculateBackOff+0x1a>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8009b66:	4a05      	ldr	r2, [pc, #20]	; (8009b7c <CalculateBackOff+0x1c>)
 8009b68:	f8b2 310a 	ldrh.w	r3, [r2, #266]	; 0x10a
 8009b6c:	4904      	ldr	r1, [pc, #16]	; (8009b80 <CalculateBackOff+0x20>)
 8009b6e:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
 8009b72:	3b01      	subs	r3, #1
 8009b74:	fb01 f303 	mul.w	r3, r1, r3
 8009b78:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 8009b7a:	4770      	bx	lr
 8009b7c:	20008000 	.word	0x20008000
 8009b80:	200008e8 	.word	0x200008e8

08009b84 <SetTxContinuousWave1>:

    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8009b84:	b508      	push	{r3, lr}
 8009b86:	4684      	mov	ip, r0
 8009b88:	4608      	mov	r0, r1
 8009b8a:	4611      	mov	r1, r2
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8009b8c:	4b06      	ldr	r3, [pc, #24]	; (8009ba8 <SetTxContinuousWave1+0x24>)
 8009b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b90:	4662      	mov	r2, ip
 8009b92:	b249      	sxtb	r1, r1
 8009b94:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8009b96:	4a05      	ldr	r2, [pc, #20]	; (8009bac <SetTxContinuousWave1+0x28>)
 8009b98:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 8009b9c:	f043 0302 	orr.w	r3, r3, #2
 8009ba0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 8009ba4:	2000      	movs	r0, #0
 8009ba6:	bd08      	pop	{r3, pc}
 8009ba8:	08014bf0 	.word	0x08014bf0
 8009bac:	200008e8 	.word	0x200008e8

08009bb0 <DetermineFrameType>:
    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8009bb0:	4602      	mov	r2, r0
 8009bb2:	b1f8      	cbz	r0, 8009bf4 <DetermineFrameType+0x44>
 8009bb4:	b301      	cbz	r1, 8009bf8 <DetermineFrameType+0x48>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8009bb6:	7b03      	ldrb	r3, [r0, #12]
 8009bb8:	f013 030f 	ands.w	r3, r3, #15
 8009bbc:	d005      	beq.n	8009bca <DetermineFrameType+0x1a>
 8009bbe:	f890 0020 	ldrb.w	r0, [r0, #32]
 8009bc2:	b110      	cbz	r0, 8009bca <DetermineFrameType+0x1a>
    {
        *fType = FRAME_TYPE_A;
 8009bc4:	2000      	movs	r0, #0
 8009bc6:	7008      	strb	r0, [r1, #0]
 8009bc8:	4770      	bx	lr
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8009bca:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
 8009bce:	b910      	cbnz	r0, 8009bd6 <DetermineFrameType+0x26>
    {
        *fType = FRAME_TYPE_B;
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	700b      	strb	r3, [r1, #0]
 8009bd4:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8009bd6:	b92b      	cbnz	r3, 8009be4 <DetermineFrameType+0x34>
 8009bd8:	f892 0020 	ldrb.w	r0, [r2, #32]
 8009bdc:	b910      	cbnz	r0, 8009be4 <DetermineFrameType+0x34>
    {
        *fType = FRAME_TYPE_C;
 8009bde:	2302      	movs	r3, #2
 8009be0:	700b      	strb	r3, [r1, #0]
 8009be2:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8009be4:	b953      	cbnz	r3, 8009bfc <DetermineFrameType+0x4c>
 8009be6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8009bea:	b14a      	cbz	r2, 8009c00 <DetermineFrameType+0x50>
    {
        *fType = FRAME_TYPE_D;
 8009bec:	2203      	movs	r2, #3
 8009bee:	700a      	strb	r2, [r1, #0]
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
    }

    return LORAMAC_STATUS_OK;
 8009bf0:	4618      	mov	r0, r3
        *fType = FRAME_TYPE_D;
 8009bf2:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009bf4:	2003      	movs	r0, #3
 8009bf6:	4770      	bx	lr
 8009bf8:	2003      	movs	r0, #3
 8009bfa:	4770      	bx	lr
        return LORAMAC_STATUS_ERROR;
 8009bfc:	2018      	movs	r0, #24
 8009bfe:	4770      	bx	lr
 8009c00:	2018      	movs	r0, #24
}
 8009c02:	4770      	bx	lr

08009c04 <CheckRetransUnconfirmedUplink>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CheckRetransUnconfirmedUplink( void )
{
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 8009c04:	4b0f      	ldr	r3, [pc, #60]	; (8009c44 <CheckRetransUnconfirmedUplink+0x40>)
 8009c06:	f893 2410 	ldrb.w	r2, [r3, #1040]	; 0x410
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 8009c0a:	4b0f      	ldr	r3, [pc, #60]	; (8009c48 <CheckRetransUnconfirmedUplink+0x44>)
 8009c0c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    if( MacCtx.ChannelsNbTransCounter >=
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d20f      	bcs.n	8009c34 <CheckRetransUnconfirmedUplink+0x30>
    {
        return true;
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8009c14:	4b0b      	ldr	r3, [pc, #44]	; (8009c44 <CheckRetransUnconfirmedUplink+0x40>)
 8009c16:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8009c1a:	f013 0f02 	tst.w	r3, #2
 8009c1e:	d00b      	beq.n	8009c38 <CheckRetransUnconfirmedUplink+0x34>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8009c20:	4b09      	ldr	r3, [pc, #36]	; (8009c48 <CheckRetransUnconfirmedUplink+0x44>)
 8009c22:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8009c26:	b14b      	cbz	r3, 8009c3c <CheckRetransUnconfirmedUplink+0x38>
        {
            return true;
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 8009c28:	4b06      	ldr	r3, [pc, #24]	; (8009c44 <CheckRetransUnconfirmedUplink+0x40>)
 8009c2a:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 8009c2e:	b13b      	cbz	r3, 8009c40 <CheckRetransUnconfirmedUplink+0x3c>
            {
                return true;
            }
        }
    }
    return false;
 8009c30:	2000      	movs	r0, #0
 8009c32:	4770      	bx	lr
        return true;
 8009c34:	2001      	movs	r0, #1
 8009c36:	4770      	bx	lr
    return false;
 8009c38:	2000      	movs	r0, #0
 8009c3a:	4770      	bx	lr
            return true;
 8009c3c:	2001      	movs	r0, #1
 8009c3e:	4770      	bx	lr
                return true;
 8009c40:	2001      	movs	r0, #1
}
 8009c42:	4770      	bx	lr
 8009c44:	200008e8 	.word	0x200008e8
 8009c48:	20008000 	.word	0x20008000

08009c4c <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 8009c4c:	4b0a      	ldr	r3, [pc, #40]	; (8009c78 <CheckRetransConfirmedUplink+0x2c>)
 8009c4e:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
        MacCtx.AckTimeoutRetries )
 8009c52:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
    if( MacCtx.AckTimeoutRetriesCounter >=
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d209      	bcs.n	8009c6e <CheckRetransConfirmedUplink+0x22>
    {
        return true;
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8009c5a:	4b07      	ldr	r3, [pc, #28]	; (8009c78 <CheckRetransConfirmedUplink+0x2c>)
 8009c5c:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8009c60:	f013 0f02 	tst.w	r3, #2
 8009c64:	d005      	beq.n	8009c72 <CheckRetransConfirmedUplink+0x26>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8009c66:	4b04      	ldr	r3, [pc, #16]	; (8009c78 <CheckRetransConfirmedUplink+0x2c>)
 8009c68:	f893 043c 	ldrb.w	r0, [r3, #1084]	; 0x43c
 8009c6c:	4770      	bx	lr
        return true;
 8009c6e:	2001      	movs	r0, #1
 8009c70:	4770      	bx	lr
        {
            return true;
        }
    }
    return false;
 8009c72:	2000      	movs	r0, #0
}
 8009c74:	4770      	bx	lr
 8009c76:	bf00      	nop
 8009c78:	200008e8 	.word	0x200008e8

08009c7c <StopRetransmission>:
}
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8009c7c:	4b11      	ldr	r3, [pc, #68]	; (8009cc4 <StopRetransmission+0x48>)
 8009c7e:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8009c82:	f013 0f02 	tst.w	r3, #2
 8009c86:	d004      	beq.n	8009c92 <StopRetransmission+0x16>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8009c88:	4b0e      	ldr	r3, [pc, #56]	; (8009cc4 <StopRetransmission+0x48>)
 8009c8a:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8009c8e:	2b01      	cmp	r3, #1
 8009c90:	d907      	bls.n	8009ca2 <StopRetransmission+0x26>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8009c92:	4b0d      	ldr	r3, [pc, #52]	; (8009cc8 <StopRetransmission+0x4c>)
 8009c94:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8009c98:	b11b      	cbz	r3, 8009ca2 <StopRetransmission+0x26>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
 8009c9a:	4a0b      	ldr	r2, [pc, #44]	; (8009cc8 <StopRetransmission+0x4c>)
 8009c9c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8009c9e:	3301      	adds	r3, #1
 8009ca0:	6293      	str	r3, [r2, #40]	; 0x28
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8009ca2:	4b08      	ldr	r3, [pc, #32]	; (8009cc4 <StopRetransmission+0x48>)
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.NodeAckRequested = false;
 8009caa:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
 8009cae:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009cb2:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 8009cb6:	f022 0202 	bic.w	r2, r2, #2
 8009cba:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return true;
}
 8009cbe:	2001      	movs	r0, #1
 8009cc0:	4770      	bx	lr
 8009cc2:	bf00      	nop
 8009cc4:	200008e8 	.word	0x200008e8
 8009cc8:	20008000 	.word	0x20008000

08009ccc <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8009ccc:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8009cce:	4b04      	ldr	r3, [pc, #16]	; (8009ce0 <CallNvmDataChangeCallback+0x14>)
 8009cd0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8009cd4:	b113      	cbz	r3, 8009cdc <CallNvmDataChangeCallback+0x10>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8009cd6:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8009cd8:	b103      	cbz	r3, 8009cdc <CallNvmDataChangeCallback+0x10>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8009cda:	4798      	blx	r3
    }
}
 8009cdc:	bd08      	pop	{r3, pc}
 8009cde:	bf00      	nop
 8009ce0:	200008e8 	.word	0x200008e8

08009ce4 <IsRequestPending>:
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8009ce4:	4b04      	ldr	r3, [pc, #16]	; (8009cf8 <IsRequestPending+0x14>)
 8009ce6:	f893 0485 	ldrb.w	r0, [r3, #1157]	; 0x485
 8009cea:	f010 0005 	ands.w	r0, r0, #5
 8009cee:	d100      	bne.n	8009cf2 <IsRequestPending+0xe>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
    {
        return 1;
    }
    return 0;
}
 8009cf0:	4770      	bx	lr
        return 1;
 8009cf2:	2001      	movs	r0, #1
 8009cf4:	e7fc      	b.n	8009cf0 <IsRequestPending+0xc>
 8009cf6:	bf00      	nop
 8009cf8:	200008e8 	.word	0x200008e8

08009cfc <AckTimeoutRetriesProcess>:
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8009cfc:	4a13      	ldr	r2, [pc, #76]	; (8009d4c <AckTimeoutRetriesProcess+0x50>)
 8009cfe:	f892 3412 	ldrb.w	r3, [r2, #1042]	; 0x412
 8009d02:	f892 2411 	ldrb.w	r2, [r2, #1041]	; 0x411
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d207      	bcs.n	8009d1a <AckTimeoutRetriesProcess+0x1e>
        MacCtx.AckTimeoutRetriesCounter++;
 8009d0a:	3301      	adds	r3, #1
 8009d0c:	b2db      	uxtb	r3, r3
 8009d0e:	4a0f      	ldr	r2, [pc, #60]	; (8009d4c <AckTimeoutRetriesProcess+0x50>)
 8009d10:	f882 3412 	strb.w	r3, [r2, #1042]	; 0x412
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8009d14:	f013 0f01 	tst.w	r3, #1
 8009d18:	d100      	bne.n	8009d1c <AckTimeoutRetriesProcess+0x20>
 8009d1a:	4770      	bx	lr
{
 8009d1c:	b510      	push	{r4, lr}
 8009d1e:	b084      	sub	sp, #16
            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8009d20:	2322      	movs	r3, #34	; 0x22
 8009d22:	f88d 3008 	strb.w	r3, [sp, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009d26:	4c0a      	ldr	r4, [pc, #40]	; (8009d50 <AckTimeoutRetriesProcess+0x54>)
 8009d28:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8009d2c:	f88d 300a 	strb.w	r3, [sp, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009d30:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
 8009d34:	f88d 3009 	strb.w	r3, [sp, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009d38:	a902      	add	r1, sp, #8
 8009d3a:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009d3e:	f004 f8b0 	bl	800dea2 <RegionGetPhyParam>
 8009d42:	9001      	str	r0, [sp, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 8009d44:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
}
 8009d48:	b004      	add	sp, #16
 8009d4a:	bd10      	pop	{r4, pc}
 8009d4c:	200008e8 	.word	0x200008e8
 8009d50:	20008000 	.word	0x20008000

08009d54 <GetMaxAppPayloadWithoutFOptsLength>:
{
 8009d54:	b500      	push	{lr}
 8009d56:	b085      	sub	sp, #20
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009d58:	4b0d      	ldr	r3, [pc, #52]	; (8009d90 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 8009d5a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8009d5e:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Datarate = datarate;
 8009d62:	f88d 0009 	strb.w	r0, [sp, #9]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8009d66:	220d      	movs	r2, #13
 8009d68:	f88d 2008 	strb.w	r2, [sp, #8]
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8009d6c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009d70:	b113      	cbz	r3, 8009d78 <GetMaxAppPayloadWithoutFOptsLength+0x24>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8009d72:	230e      	movs	r3, #14
 8009d74:	f88d 3008 	strb.w	r3, [sp, #8]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009d78:	a902      	add	r1, sp, #8
 8009d7a:	4b05      	ldr	r3, [pc, #20]	; (8009d90 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 8009d7c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009d80:	f004 f88f 	bl	800dea2 <RegionGetPhyParam>
 8009d84:	9001      	str	r0, [sp, #4]
}
 8009d86:	b2c0      	uxtb	r0, r0
 8009d88:	b005      	add	sp, #20
 8009d8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8009d8e:	bf00      	nop
 8009d90:	20008000 	.word	0x20008000

08009d94 <ValidatePayloadLength>:
{
 8009d94:	b538      	push	{r3, r4, r5, lr}
 8009d96:	4605      	mov	r5, r0
 8009d98:	4614      	mov	r4, r2
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8009d9a:	4608      	mov	r0, r1
 8009d9c:	f7ff ffda 	bl	8009d54 <GetMaxAppPayloadWithoutFOptsLength>
 8009da0:	b283      	uxth	r3, r0
    payloadSize = ( lenN + fOptsLen );
 8009da2:	1962      	adds	r2, r4, r5
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d303      	bcc.n	8009db0 <ValidatePayloadLength+0x1c>
 8009da8:	2aff      	cmp	r2, #255	; 0xff
 8009daa:	d903      	bls.n	8009db4 <ValidatePayloadLength+0x20>
    return false;
 8009dac:	2000      	movs	r0, #0
 8009dae:	e000      	b.n	8009db2 <ValidatePayloadLength+0x1e>
 8009db0:	2000      	movs	r0, #0
}
 8009db2:	bd38      	pop	{r3, r4, r5, pc}
        return true;
 8009db4:	2001      	movs	r0, #1
 8009db6:	e7fc      	b.n	8009db2 <ValidatePayloadLength+0x1e>

08009db8 <ProcessRadioTxDone>:
{
 8009db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009dba:	b08f      	sub	sp, #60	; 0x3c
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8009dbc:	4b39      	ldr	r3, [pc, #228]	; (8009ea4 <ProcessRadioTxDone+0xec>)
 8009dbe:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8009dc2:	2b02      	cmp	r3, #2
 8009dc4:	d002      	beq.n	8009dcc <ProcessRadioTxDone+0x14>
        Radio.Sleep( );
 8009dc6:	4b38      	ldr	r3, [pc, #224]	; (8009ea8 <ProcessRadioTxDone+0xf0>)
 8009dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dca:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 8009dcc:	4c37      	ldr	r4, [pc, #220]	; (8009eac <ProcessRadioTxDone+0xf4>)
 8009dce:	f504 7560 	add.w	r5, r4, #896	; 0x380
 8009dd2:	f8d4 13b0 	ldr.w	r1, [r4, #944]	; 0x3b0
 8009dd6:	4628      	mov	r0, r5
 8009dd8:	f009 fc30 	bl	801363c <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8009ddc:	4628      	mov	r0, r5
 8009dde:	f009 fbe7 	bl	80135b0 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 8009de2:	f504 7566 	add.w	r5, r4, #920	; 0x398
 8009de6:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 8009dea:	4628      	mov	r0, r5
 8009dec:	f009 fc26 	bl	801363c <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 8009df0:	4628      	mov	r0, r5
 8009df2:	f009 fbdd 	bl	80135b0 <UTIL_TIMER_Start>
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 8009df6:	4b2b      	ldr	r3, [pc, #172]	; (8009ea4 <ProcessRadioTxDone+0xec>)
 8009df8:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8009dfc:	2b02      	cmp	r3, #2
 8009dfe:	d002      	beq.n	8009e06 <ProcessRadioTxDone+0x4e>
 8009e00:	f894 3414 	ldrb.w	r3, [r4, #1044]	; 0x414
 8009e04:	b1ab      	cbz	r3, 8009e32 <ProcessRadioTxDone+0x7a>
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 8009e06:	2316      	movs	r3, #22
 8009e08:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009e0c:	a90a      	add	r1, sp, #40	; 0x28
 8009e0e:	4b25      	ldr	r3, [pc, #148]	; (8009ea4 <ProcessRadioTxDone+0xec>)
 8009e10:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009e14:	f004 f845 	bl	800dea2 <RegionGetPhyParam>
 8009e18:	9009      	str	r0, [sp, #36]	; 0x24
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8009e1a:	4c24      	ldr	r4, [pc, #144]	; (8009eac <ProcessRadioTxDone+0xf4>)
 8009e1c:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 8009e20:	f504 747e 	add.w	r4, r4, #1016	; 0x3f8
 8009e24:	4401      	add	r1, r0
 8009e26:	4620      	mov	r0, r4
 8009e28:	f009 fc08 	bl	801363c <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 8009e2c:	4620      	mov	r0, r4
 8009e2e:	f009 fbbf 	bl	80135b0 <UTIL_TIMER_Start>
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8009e32:	4b1f      	ldr	r3, [pc, #124]	; (8009eb0 <ProcessRadioTxDone+0xf8>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4c1b      	ldr	r4, [pc, #108]	; (8009ea4 <ProcessRadioTxDone+0xec>)
 8009e38:	62e3      	str	r3, [r4, #44]	; 0x2c
    txDone.Channel = MacCtx.Channel;
 8009e3a:	4f1c      	ldr	r7, [pc, #112]	; (8009eac <ProcessRadioTxDone+0xf4>)
 8009e3c:	f897 2415 	ldrb.w	r2, [r7, #1045]	; 0x415
 8009e40:	f88d 2010 	strb.w	r2, [sp, #16]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8009e44:	9305      	str	r3, [sp, #20]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8009e46:	ae0c      	add	r6, sp, #48	; 0x30
 8009e48:	4630      	mov	r0, r6
 8009e4a:	f009 fa8b 	bl	8013364 <SysTimeGetMcuTime>
 8009e4e:	ad02      	add	r5, sp, #8
 8009e50:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8009e54:	9300      	str	r3, [sp, #0]
 8009e56:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8009e5a:	e896 0006 	ldmia.w	r6, {r1, r2}
 8009e5e:	4628      	mov	r0, r5
 8009e60:	f009 fa1d 	bl	801329e <SysTimeSub>
 8009e64:	ab07      	add	r3, sp, #28
 8009e66:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009e6a:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8009e6e:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8009e72:	9306      	str	r3, [sp, #24]
    txDone.Joined  = true;
 8009e74:	2301      	movs	r3, #1
 8009e76:	f88d 3011 	strb.w	r3, [sp, #17]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8009e7a:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
 8009e7e:	b90b      	cbnz	r3, 8009e84 <ProcessRadioTxDone+0xcc>
        txDone.Joined  = false;
 8009e80:	f88d 3011 	strb.w	r3, [sp, #17]
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8009e84:	a904      	add	r1, sp, #16
 8009e86:	4b07      	ldr	r3, [pc, #28]	; (8009ea4 <ProcessRadioTxDone+0xec>)
 8009e88:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009e8c:	f004 f821 	bl	800ded2 <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
 8009e90:	4b06      	ldr	r3, [pc, #24]	; (8009eac <ProcessRadioTxDone+0xf4>)
 8009e92:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8009e96:	b91b      	cbnz	r3, 8009ea0 <ProcessRadioTxDone+0xe8>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8009e98:	4b04      	ldr	r3, [pc, #16]	; (8009eac <ProcessRadioTxDone+0xf4>)
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
}
 8009ea0:	b00f      	add	sp, #60	; 0x3c
 8009ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ea4:	20008000 	.word	0x20008000
 8009ea8:	08014bf0 	.word	0x08014bf0
 8009eac:	200008e8 	.word	0x200008e8
 8009eb0:	20000e04 	.word	0x20000e04

08009eb4 <OnAckTimeoutTimerEvent>:
{
 8009eb4:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.AckTimeoutTimer );
 8009eb6:	4c10      	ldr	r4, [pc, #64]	; (8009ef8 <OnAckTimeoutTimerEvent+0x44>)
 8009eb8:	f504 707e 	add.w	r0, r4, #1016	; 0x3f8
 8009ebc:	f009 fb1e 	bl	80134fc <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 8009ec0:	f894 3414 	ldrb.w	r3, [r4, #1044]	; 0x414
 8009ec4:	b113      	cbz	r3, 8009ecc <OnAckTimeoutTimerEvent+0x18>
        MacCtx.AckTimeoutRetry = true;
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	f884 2413 	strb.w	r2, [r4, #1043]	; 0x413
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8009ecc:	4b0b      	ldr	r3, [pc, #44]	; (8009efc <OnAckTimeoutTimerEvent+0x48>)
 8009ece:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8009ed2:	2b02      	cmp	r3, #2
 8009ed4:	d007      	beq.n	8009ee6 <OnAckTimeoutTimerEvent+0x32>
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8009ed6:	4b08      	ldr	r3, [pc, #32]	; (8009ef8 <OnAckTimeoutTimerEvent+0x44>)
 8009ed8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8009edc:	b113      	cbz	r3, 8009ee4 <OnAckTimeoutTimerEvent+0x30>
 8009ede:	691b      	ldr	r3, [r3, #16]
 8009ee0:	b103      	cbz	r3, 8009ee4 <OnAckTimeoutTimerEvent+0x30>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8009ee2:	4798      	blx	r3
}
 8009ee4:	bd10      	pop	{r4, pc}
        MacCtx.MacFlags.Bits.MacDone = 1;
 8009ee6:	4a04      	ldr	r2, [pc, #16]	; (8009ef8 <OnAckTimeoutTimerEvent+0x44>)
 8009ee8:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8009eec:	f043 0320 	orr.w	r3, r3, #32
 8009ef0:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 8009ef4:	e7ef      	b.n	8009ed6 <OnAckTimeoutTimerEvent+0x22>
 8009ef6:	bf00      	nop
 8009ef8:	200008e8 	.word	0x200008e8
 8009efc:	20008000 	.word	0x20008000

08009f00 <PrepareRxDoneAbort>:
{
 8009f00:	b508      	push	{r3, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8009f02:	4b0e      	ldr	r3, [pc, #56]	; (8009f3c <PrepareRxDoneAbort+0x3c>)
 8009f04:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 8009f08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009f0c:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == true )
 8009f10:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8009f14:	b973      	cbnz	r3, 8009f34 <PrepareRxDoneAbort+0x34>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 8009f16:	4b09      	ldr	r3, [pc, #36]	; (8009f3c <PrepareRxDoneAbort+0x3c>)
 8009f18:	f893 2485 	ldrb.w	r2, [r3, #1157]	; 0x485
 8009f1c:	f042 0202 	orr.w	r2, r2, #2
 8009f20:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
    MacCtx.MacFlags.Bits.MacDone = 1;
 8009f24:	b2d2      	uxtb	r2, r2
 8009f26:	f042 0220 	orr.w	r2, r2, #32
 8009f2a:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
    UpdateRxSlotIdleState( );
 8009f2e:	f7ff fdbd 	bl	8009aac <UpdateRxSlotIdleState>
}
 8009f32:	bd08      	pop	{r3, pc}
        OnAckTimeoutTimerEvent( NULL );
 8009f34:	2000      	movs	r0, #0
 8009f36:	f7ff ffbd 	bl	8009eb4 <OnAckTimeoutTimerEvent>
 8009f3a:	e7ec      	b.n	8009f16 <PrepareRxDoneAbort+0x16>
 8009f3c:	200008e8 	.word	0x200008e8

08009f40 <LoRaMacCheckForBeaconAcquisition>:
{
 8009f40:	b508      	push	{r3, lr}
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8009f42:	200c      	movs	r0, #12
 8009f44:	f003 fa42 	bl	800d3cc <LoRaMacConfirmQueueIsCmdActive>
 8009f48:	b188      	cbz	r0, 8009f6e <LoRaMacCheckForBeaconAcquisition+0x2e>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8009f4a:	4b0b      	ldr	r3, [pc, #44]	; (8009f78 <LoRaMacCheckForBeaconAcquisition+0x38>)
 8009f4c:	f893 0485 	ldrb.w	r0, [r3, #1157]	; 0x485
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8009f50:	f010 0f01 	tst.w	r0, #1
 8009f54:	d10d      	bne.n	8009f72 <LoRaMacCheckForBeaconAcquisition+0x32>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8009f56:	f010 0004 	ands.w	r0, r0, #4
 8009f5a:	d009      	beq.n	8009f70 <LoRaMacCheckForBeaconAcquisition+0x30>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009f62:	f023 0302 	bic.w	r3, r3, #2
 8009f66:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 8009f6a:	2001      	movs	r0, #1
 8009f6c:	e000      	b.n	8009f70 <LoRaMacCheckForBeaconAcquisition+0x30>
    return 0x00;
 8009f6e:	2000      	movs	r0, #0
}
 8009f70:	bd08      	pop	{r3, pc}
    return 0x00;
 8009f72:	2000      	movs	r0, #0
 8009f74:	e7fc      	b.n	8009f70 <LoRaMacCheckForBeaconAcquisition+0x30>
 8009f76:	bf00      	nop
 8009f78:	200008e8 	.word	0x200008e8

08009f7c <GetFCntDown>:
{
 8009f7c:	b538      	push	{r3, r4, r5, lr}
 8009f7e:	9c05      	ldr	r4, [sp, #20]
 8009f80:	9d06      	ldr	r5, [sp, #24]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8009f82:	b302      	cbz	r2, 8009fc6 <GetFCntDown+0x4a>
 8009f84:	4694      	mov	ip, r2
 8009f86:	b304      	cbz	r4, 8009fca <GetFCntDown+0x4e>
 8009f88:	b30d      	cbz	r5, 8009fce <GetFCntDown+0x52>
    switch( addrID )
 8009f8a:	b188      	cbz	r0, 8009fb0 <GetFCntDown+0x34>
 8009f8c:	2801      	cmp	r0, #1
 8009f8e:	d120      	bne.n	8009fd2 <GetFCntDown+0x56>
            if( lrWanVersion.Fields.Minor == 1 )
 8009f90:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8009f94:	2a01      	cmp	r2, #1
 8009f96:	d002      	beq.n	8009f9e <GetFCntDown+0x22>
                *fCntID = FCNT_DOWN;
 8009f98:	2303      	movs	r3, #3
 8009f9a:	7023      	strb	r3, [r4, #0]
 8009f9c:	e00a      	b.n	8009fb4 <GetFCntDown+0x38>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8009f9e:	b121      	cbz	r1, 8009faa <GetFCntDown+0x2e>
 8009fa0:	2903      	cmp	r1, #3
 8009fa2:	d002      	beq.n	8009faa <GetFCntDown+0x2e>
                    *fCntID = N_FCNT_DOWN;
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	7023      	strb	r3, [r4, #0]
 8009fa8:	e004      	b.n	8009fb4 <GetFCntDown+0x38>
                    *fCntID = A_FCNT_DOWN;
 8009faa:	2302      	movs	r3, #2
 8009fac:	7023      	strb	r3, [r4, #0]
 8009fae:	e001      	b.n	8009fb4 <GetFCntDown+0x38>
            *fCntID = MC_FCNT_DOWN_0;
 8009fb0:	2304      	movs	r3, #4
 8009fb2:	7023      	strb	r3, [r4, #0]
    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 8009fb4:	462b      	mov	r3, r5
 8009fb6:	f8bc 200e 	ldrh.w	r2, [ip, #14]
 8009fba:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8009fbe:	7820      	ldrb	r0, [r4, #0]
 8009fc0:	f003 fc26 	bl	800d810 <LoRaMacCryptoGetFCntDown>
}
 8009fc4:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 8009fc6:	200a      	movs	r0, #10
 8009fc8:	e7fc      	b.n	8009fc4 <GetFCntDown+0x48>
 8009fca:	200a      	movs	r0, #10
 8009fcc:	e7fa      	b.n	8009fc4 <GetFCntDown+0x48>
 8009fce:	200a      	movs	r0, #10
 8009fd0:	e7f8      	b.n	8009fc4 <GetFCntDown+0x48>
    switch( addrID )
 8009fd2:	2005      	movs	r0, #5
 8009fd4:	e7f6      	b.n	8009fc4 <GetFCntDown+0x48>

08009fd6 <RemoveMacCommands>:
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8009fd6:	2801      	cmp	r0, #1
 8009fd8:	d900      	bls.n	8009fdc <RemoveMacCommands+0x6>
 8009fda:	4770      	bx	lr
{
 8009fdc:	b508      	push	{r3, lr}
        if( request == MCPS_CONFIRMED )
 8009fde:	2a01      	cmp	r2, #1
 8009fe0:	d105      	bne.n	8009fee <RemoveMacCommands+0x18>
            if( fCtrl.Bits.Ack == 1 )
 8009fe2:	f011 0f20 	tst.w	r1, #32
 8009fe6:	d004      	beq.n	8009ff2 <RemoveMacCommands+0x1c>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8009fe8:	f003 f88c 	bl	800d104 <LoRaMacCommandsRemoveStickyAnsCmds>
 8009fec:	e001      	b.n	8009ff2 <RemoveMacCommands+0x1c>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8009fee:	f003 f889 	bl	800d104 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8009ff2:	bd08      	pop	{r3, pc}

08009ff4 <ProcessMacCommands>:
{
 8009ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ff8:	b08f      	sub	sp, #60	; 0x3c
 8009ffa:	4605      	mov	r5, r0
 8009ffc:	460c      	mov	r4, r1
 8009ffe:	4616      	mov	r6, r2
 800a000:	4698      	mov	r8, r3
    uint8_t status = 0;
 800a002:	2700      	movs	r7, #0
 800a004:	f88d 702f 	strb.w	r7, [sp, #47]	; 0x2f
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800a008:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
    while( macIndex < commandsSize )
 800a00c:	42b4      	cmp	r4, r6
 800a00e:	f080 82c4 	bcs.w	800a59a <ProcessMacCommands+0x5a6>
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800a012:	5d28      	ldrb	r0, [r5, r4]
 800a014:	f003 f8de 	bl	800d1d4 <LoRaMacCommandsGetCmdSize>
 800a018:	4420      	add	r0, r4
 800a01a:	42b0      	cmp	r0, r6
 800a01c:	f300 82bd 	bgt.w	800a59a <ProcessMacCommands+0x5a6>
        switch( payload[macIndex++] )
 800a020:	f104 0901 	add.w	r9, r4, #1
 800a024:	fa5f f989 	uxtb.w	r9, r9
 800a028:	5d29      	ldrb	r1, [r5, r4]
 800a02a:	3902      	subs	r1, #2
 800a02c:	2911      	cmp	r1, #17
 800a02e:	f200 82b4 	bhi.w	800a59a <ProcessMacCommands+0x5a6>
 800a032:	e8df f011 	tbh	[pc, r1, lsl #1]
 800a036:	0012      	.short	0x0012
 800a038:	00920029 	.word	0x00920029
 800a03c:	00ee00a6 	.word	0x00ee00a6
 800a040:	01400106 	.word	0x01400106
 800a044:	01ad0157 	.word	0x01ad0157
 800a048:	02b202b2 	.word	0x02b202b2
 800a04c:	02b201de 	.word	0x02b201de
 800a050:	023e02b2 	.word	0x023e02b2
 800a054:	02750255 	.word	0x02750255
 800a058:	0291      	.short	0x0291
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800a05a:	2004      	movs	r0, #4
 800a05c:	f003 f9b6 	bl	800d3cc <LoRaMacConfirmQueueIsCmdActive>
 800a060:	b908      	cbnz	r0, 800a066 <ProcessMacCommands+0x72>
        switch( payload[macIndex++] )
 800a062:	464c      	mov	r4, r9
 800a064:	e7d2      	b.n	800a00c <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800a066:	2104      	movs	r1, #4
 800a068:	2000      	movs	r0, #0
 800a06a:	f003 f963 	bl	800d334 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800a06e:	1ca3      	adds	r3, r4, #2
 800a070:	b2db      	uxtb	r3, r3
 800a072:	f815 1009 	ldrb.w	r1, [r5, r9]
 800a076:	4ac2      	ldr	r2, [pc, #776]	; (800a380 <ProcessMacCommands+0x38c>)
 800a078:	f882 1454 	strb.w	r1, [r2, #1108]	; 0x454
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800a07c:	3403      	adds	r4, #3
 800a07e:	b2e4      	uxtb	r4, r4
 800a080:	5ceb      	ldrb	r3, [r5, r3]
 800a082:	f882 3455 	strb.w	r3, [r2, #1109]	; 0x455
 800a086:	e7c1      	b.n	800a00c <ProcessMacCommands+0x18>
                int8_t linkAdrDatarate = DR_0;
 800a088:	2300      	movs	r3, #0
 800a08a:	f88d 300a 	strb.w	r3, [sp, #10]
                int8_t linkAdrTxPower = TX_POWER_0;
 800a08e:	f88d 300b 	strb.w	r3, [sp, #11]
                uint8_t linkAdrNbRep = 0;
 800a092:	f88d 300c 	strb.w	r3, [sp, #12]
                uint8_t linkAdrNbBytesParsed = 0;
 800a096:	f88d 3014 	strb.w	r3, [sp, #20]
                if( adrBlockFound == false )
 800a09a:	b10f      	cbz	r7, 800a0a0 <ProcessMacCommands+0xac>
                break;
 800a09c:	464c      	mov	r4, r9
 800a09e:	e7b5      	b.n	800a00c <ProcessMacCommands+0x18>
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800a0a0:	f109 33ff 	add.w	r3, r9, #4294967295
 800a0a4:	442b      	add	r3, r5
 800a0a6:	9308      	str	r3, [sp, #32]
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800a0a8:	eba6 0309 	sub.w	r3, r6, r9
 800a0ac:	3301      	adds	r3, #1
 800a0ae:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800a0b2:	48b4      	ldr	r0, [pc, #720]	; (800a384 <ProcessMacCommands+0x390>)
 800a0b4:	f890 3106 	ldrb.w	r3, [r0, #262]	; 0x106
 800a0b8:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a0bc:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 800a0c0:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800a0c4:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
 800a0c8:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800a0cc:	f990 3038 	ldrsb.w	r3, [r0, #56]	; 0x38
 800a0d0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800a0d4:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 800a0d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 800a0dc:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 800a0e0:	9307      	str	r3, [sp, #28]
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800a0e2:	ab05      	add	r3, sp, #20
 800a0e4:	9301      	str	r3, [sp, #4]
 800a0e6:	ab03      	add	r3, sp, #12
 800a0e8:	9300      	str	r3, [sp, #0]
 800a0ea:	f10d 030b 	add.w	r3, sp, #11
 800a0ee:	f10d 020a 	add.w	r2, sp, #10
 800a0f2:	a907      	add	r1, sp, #28
 800a0f4:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 800a0f8:	f003 ff6b 	bl	800dfd2 <RegionLinkAdrReq>
 800a0fc:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                    if( ( status & 0x07 ) == 0x07 )
 800a100:	f000 0007 	and.w	r0, r0, #7
 800a104:	2807      	cmp	r0, #7
 800a106:	d001      	beq.n	800a10c <ProcessMacCommands+0x118>
{
 800a108:	2400      	movs	r4, #0
 800a10a:	e015      	b.n	800a138 <ProcessMacCommands+0x144>
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800a10c:	4b9d      	ldr	r3, [pc, #628]	; (800a384 <ProcessMacCommands+0x390>)
 800a10e:	f89d 200a 	ldrb.w	r2, [sp, #10]
 800a112:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800a116:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800a11a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800a11e:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800a122:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 800a126:	e7ef      	b.n	800a108 <ProcessMacCommands+0x114>
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800a128:	2201      	movs	r2, #1
 800a12a:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 800a12e:	2003      	movs	r0, #3
 800a130:	f002 ff88 	bl	800d044 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800a134:	3401      	adds	r4, #1
 800a136:	b2e4      	uxtb	r4, r4
 800a138:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800a13c:	4b92      	ldr	r3, [pc, #584]	; (800a388 <ProcessMacCommands+0x394>)
 800a13e:	fba3 1302 	umull	r1, r3, r3, r2
 800a142:	ebb4 0f93 	cmp.w	r4, r3, lsr #2
 800a146:	d3ef      	bcc.n	800a128 <ProcessMacCommands+0x134>
                    macIndex += linkAdrNbBytesParsed - 1;
 800a148:	4491      	add	r9, r2
 800a14a:	fa5f f989 	uxtb.w	r9, r9
 800a14e:	f109 39ff 	add.w	r9, r9, #4294967295
 800a152:	fa5f f989 	uxtb.w	r9, r9
                    adrBlockFound = true;
 800a156:	2701      	movs	r7, #1
 800a158:	e7a0      	b.n	800a09c <ProcessMacCommands+0xa8>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800a15a:	3402      	adds	r4, #2
 800a15c:	b2e4      	uxtb	r4, r4
 800a15e:	f815 3009 	ldrb.w	r3, [r5, r9]
 800a162:	f003 030f 	and.w	r3, r3, #15
 800a166:	4987      	ldr	r1, [pc, #540]	; (800a384 <ProcessMacCommands+0x390>)
 800a168:	f881 3107 	strb.w	r3, [r1, #263]	; 0x107
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800a16c:	2201      	movs	r2, #1
 800a16e:	fa02 f303 	lsl.w	r3, r2, r3
 800a172:	f8a1 310a 	strh.w	r3, [r1, #266]	; 0x10a
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800a176:	2200      	movs	r2, #0
 800a178:	a90b      	add	r1, sp, #44	; 0x2c
 800a17a:	2004      	movs	r0, #4
 800a17c:	f002 ff62 	bl	800d044 <LoRaMacCommandsAddCmd>
                break;
 800a180:	e744      	b.n	800a00c <ProcessMacCommands+0x18>
                status = 0x07;
 800a182:	2307      	movs	r3, #7
 800a184:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800a188:	f815 3009 	ldrb.w	r3, [r5, r9]
 800a18c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800a190:	f88d 301d 	strb.w	r3, [sp, #29]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800a194:	f915 3009 	ldrsb.w	r3, [r5, r9]
 800a198:	f003 030f 	and.w	r3, r3, #15
 800a19c:	f88d 301c 	strb.w	r3, [sp, #28]
                macIndex++;
 800a1a0:	1ca3      	adds	r3, r4, #2
 800a1a2:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800a1a4:	1ce1      	adds	r1, r4, #3
 800a1a6:	b2c9      	uxtb	r1, r1
 800a1a8:	5ceb      	ldrb	r3, [r5, r3]
 800a1aa:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800a1ac:	1d22      	adds	r2, r4, #4
 800a1ae:	b2d2      	uxtb	r2, r2
 800a1b0:	5c69      	ldrb	r1, [r5, r1]
 800a1b2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800a1b6:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800a1b8:	3405      	adds	r4, #5
 800a1ba:	b2e4      	uxtb	r4, r4
 800a1bc:	5caa      	ldrb	r2, [r5, r2]
 800a1be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a1c2:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency *= 100;
 800a1c4:	2264      	movs	r2, #100	; 0x64
 800a1c6:	fb02 f303 	mul.w	r3, r2, r3
 800a1ca:	9308      	str	r3, [sp, #32]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800a1cc:	a907      	add	r1, sp, #28
 800a1ce:	4b6d      	ldr	r3, [pc, #436]	; (800a384 <ProcessMacCommands+0x390>)
 800a1d0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a1d4:	f003 ff19 	bl	800e00a <RegionRxParamSetupReq>
 800a1d8:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                if( ( status & 0x07 ) == 0x07 )
 800a1dc:	f000 0307 	and.w	r3, r0, #7
 800a1e0:	2b07      	cmp	r3, #7
 800a1e2:	d007      	beq.n	800a1f4 <ProcessMacCommands+0x200>
                macCmdPayload[0] = status;
 800a1e4:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800a1e8:	2201      	movs	r2, #1
 800a1ea:	a90b      	add	r1, sp, #44	; 0x2c
 800a1ec:	2005      	movs	r0, #5
 800a1ee:	f002 ff29 	bl	800d044 <LoRaMacCommandsAddCmd>
                break;
 800a1f2:	e70b      	b.n	800a00c <ProcessMacCommands+0x18>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800a1f4:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800a1f8:	4b62      	ldr	r3, [pc, #392]	; (800a384 <ProcessMacCommands+0x390>)
 800a1fa:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800a1fe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800a202:	9a08      	ldr	r2, [sp, #32]
 800a204:	665a      	str	r2, [r3, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800a206:	66da      	str	r2, [r3, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800a208:	f89d 201d 	ldrb.w	r2, [sp, #29]
 800a20c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 800a210:	e7e8      	b.n	800a1e4 <ProcessMacCommands+0x1f0>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800a212:	4b5b      	ldr	r3, [pc, #364]	; (800a380 <ProcessMacCommands+0x38c>)
 800a214:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800a218:	b17b      	cbz	r3, 800a23a <ProcessMacCommands+0x246>
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	b17b      	cbz	r3, 800a23e <ProcessMacCommands+0x24a>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800a21e:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 800a220:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800a224:	f008 033f 	and.w	r3, r8, #63	; 0x3f
 800a228:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800a22c:	2202      	movs	r2, #2
 800a22e:	a90b      	add	r1, sp, #44	; 0x2c
 800a230:	2006      	movs	r0, #6
 800a232:	f002 ff07 	bl	800d044 <LoRaMacCommandsAddCmd>
        switch( payload[macIndex++] )
 800a236:	464c      	mov	r4, r9
                break;
 800a238:	e6e8      	b.n	800a00c <ProcessMacCommands+0x18>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800a23a:	20ff      	movs	r0, #255	; 0xff
 800a23c:	e7f0      	b.n	800a220 <ProcessMacCommands+0x22c>
 800a23e:	20ff      	movs	r0, #255	; 0xff
 800a240:	e7ee      	b.n	800a220 <ProcessMacCommands+0x22c>
                status = 0x03;
 800a242:	2303      	movs	r3, #3
 800a244:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                newChannelReq.ChannelId = payload[macIndex++];
 800a248:	1ca3      	adds	r3, r4, #2
 800a24a:	b2db      	uxtb	r3, r3
 800a24c:	f915 2009 	ldrsb.w	r2, [r5, r9]
 800a250:	f88d 2018 	strb.w	r2, [sp, #24]
                newChannelReq.NewChannel = &chParam;
 800a254:	aa07      	add	r2, sp, #28
 800a256:	9205      	str	r2, [sp, #20]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800a258:	1ce2      	adds	r2, r4, #3
 800a25a:	b2d2      	uxtb	r2, r2
 800a25c:	5ceb      	ldrb	r3, [r5, r3]
 800a25e:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800a260:	1d21      	adds	r1, r4, #4
 800a262:	b2c9      	uxtb	r1, r1
 800a264:	5caa      	ldrb	r2, [r5, r2]
 800a266:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a26a:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800a26c:	1d62      	adds	r2, r4, #5
 800a26e:	b2d2      	uxtb	r2, r2
 800a270:	5c69      	ldrb	r1, [r5, r1]
 800a272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800a276:	9307      	str	r3, [sp, #28]
                chParam.Frequency *= 100;
 800a278:	2164      	movs	r1, #100	; 0x64
 800a27a:	fb01 f303 	mul.w	r3, r1, r3
 800a27e:	9307      	str	r3, [sp, #28]
                chParam.Rx1Frequency = 0;
 800a280:	2300      	movs	r3, #0
 800a282:	9308      	str	r3, [sp, #32]
                chParam.DrRange.Value = payload[macIndex++];
 800a284:	3406      	adds	r4, #6
 800a286:	b2e4      	uxtb	r4, r4
 800a288:	56ab      	ldrsb	r3, [r5, r2]
 800a28a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800a28e:	a905      	add	r1, sp, #20
 800a290:	4b3c      	ldr	r3, [pc, #240]	; (800a384 <ProcessMacCommands+0x390>)
 800a292:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a296:	f003 fec7 	bl	800e028 <RegionNewChannelReq>
 800a29a:	b2c3      	uxtb	r3, r0
 800a29c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 800a2a0:	2800      	cmp	r0, #0
 800a2a2:	f6ff aeb3 	blt.w	800a00c <ProcessMacCommands+0x18>
                    macCmdPayload[0] = status;
 800a2a6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	a90b      	add	r1, sp, #44	; 0x2c
 800a2ae:	2007      	movs	r0, #7
 800a2b0:	f002 fec8 	bl	800d044 <LoRaMacCommandsAddCmd>
                break;
 800a2b4:	e6aa      	b.n	800a00c <ProcessMacCommands+0x18>
                uint8_t delay = payload[macIndex++] & 0x0F;
 800a2b6:	3402      	adds	r4, #2
 800a2b8:	b2e4      	uxtb	r4, r4
 800a2ba:	f815 3009 	ldrb.w	r3, [r5, r9]
                if( delay == 0 )
 800a2be:	f013 030f 	ands.w	r3, r3, #15
 800a2c2:	d100      	bne.n	800a2c6 <ProcessMacCommands+0x2d2>
                    delay++;
 800a2c4:	3301      	adds	r3, #1
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800a2c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a2ca:	fb02 f303 	mul.w	r3, r2, r3
 800a2ce:	4a2d      	ldr	r2, [pc, #180]	; (800a384 <ProcessMacCommands+0x390>)
 800a2d0:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800a2d2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800a2d6:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800a2d8:	2200      	movs	r2, #0
 800a2da:	a90b      	add	r1, sp, #44	; 0x2c
 800a2dc:	2008      	movs	r0, #8
 800a2de:	f002 feb1 	bl	800d044 <LoRaMacCommandsAddCmd>
                break;
 800a2e2:	e693      	b.n	800a00c <ProcessMacCommands+0x18>
                uint8_t eirpDwellTime = payload[macIndex++];
 800a2e4:	3402      	adds	r4, #2
 800a2e6:	b2e4      	uxtb	r4, r4
 800a2e8:	f815 3009 	ldrb.w	r3, [r5, r9]
                txParamSetupReq.UplinkDwellTime = 0;
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.DownlinkDwellTime = 0;
 800a2f2:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800a2f6:	f013 0f20 	tst.w	r3, #32
 800a2fa:	d002      	beq.n	800a302 <ProcessMacCommands+0x30e>
                    txParamSetupReq.DownlinkDwellTime = 1;
 800a2fc:	2201      	movs	r2, #1
 800a2fe:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800a302:	f013 0f10 	tst.w	r3, #16
 800a306:	d002      	beq.n	800a30e <ProcessMacCommands+0x31a>
                    txParamSetupReq.UplinkDwellTime = 1;
 800a308:	2201      	movs	r2, #1
 800a30a:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800a30e:	f003 030f 	and.w	r3, r3, #15
 800a312:	f88d 300e 	strb.w	r3, [sp, #14]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800a316:	a903      	add	r1, sp, #12
 800a318:	4b1a      	ldr	r3, [pc, #104]	; (800a384 <ProcessMacCommands+0x390>)
 800a31a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a31e:	f003 fe92 	bl	800e046 <RegionTxParamSetupReq>
 800a322:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a326:	f43f ae71 	beq.w	800a00c <ProcessMacCommands+0x18>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800a32a:	f89d a00c 	ldrb.w	sl, [sp, #12]
 800a32e:	f8df 9054 	ldr.w	r9, [pc, #84]	; 800a384 <ProcessMacCommands+0x390>
 800a332:	f889 a074 	strb.w	sl, [r9, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800a336:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800a33a:	f889 3075 	strb.w	r3, [r9, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800a33e:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800a342:	4a12      	ldr	r2, [pc, #72]	; (800a38c <ProcessMacCommands+0x398>)
 800a344:	5cd0      	ldrb	r0, [r2, r3]
 800a346:	f7f6 fca3 	bl	8000c90 <__aeabi_ui2f>
 800a34a:	f8c9 0078 	str.w	r0, [r9, #120]	; 0x78
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800a34e:	2302      	movs	r3, #2
 800a350:	f88d 301c 	strb.w	r3, [sp, #28]
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a354:	f88d a01e 	strb.w	sl, [sp, #30]
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a358:	a907      	add	r1, sp, #28
 800a35a:	f899 0040 	ldrb.w	r0, [r9, #64]	; 0x40
 800a35e:	f003 fda0 	bl	800dea2 <RegionGetPhyParam>
 800a362:	9005      	str	r0, [sp, #20]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800a364:	b240      	sxtb	r0, r0
 800a366:	f999 3039 	ldrsb.w	r3, [r9, #57]	; 0x39
 800a36a:	4298      	cmp	r0, r3
 800a36c:	bfb8      	it	lt
 800a36e:	4618      	movlt	r0, r3
 800a370:	f889 0039 	strb.w	r0, [r9, #57]	; 0x39
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800a374:	2200      	movs	r2, #0
 800a376:	a90b      	add	r1, sp, #44	; 0x2c
 800a378:	2009      	movs	r0, #9
 800a37a:	f002 fe63 	bl	800d044 <LoRaMacCommandsAddCmd>
                break;
 800a37e:	e645      	b.n	800a00c <ProcessMacCommands+0x18>
 800a380:	200008e8 	.word	0x200008e8
 800a384:	20008000 	.word	0x20008000
 800a388:	cccccccd 	.word	0xcccccccd
 800a38c:	08014540 	.word	0x08014540
                status = 0x03;
 800a390:	2303      	movs	r3, #3
 800a392:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                dlChannelReq.ChannelId = payload[macIndex++];
 800a396:	1ca3      	adds	r3, r4, #2
 800a398:	b2db      	uxtb	r3, r3
 800a39a:	f815 2009 	ldrb.w	r2, [r5, r9]
 800a39e:	f88d 201c 	strb.w	r2, [sp, #28]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800a3a2:	1ce1      	adds	r1, r4, #3
 800a3a4:	b2c9      	uxtb	r1, r1
 800a3a6:	5ceb      	ldrb	r3, [r5, r3]
 800a3a8:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800a3aa:	1d22      	adds	r2, r4, #4
 800a3ac:	b2d2      	uxtb	r2, r2
 800a3ae:	5c69      	ldrb	r1, [r5, r1]
 800a3b0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800a3b4:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800a3b6:	3405      	adds	r4, #5
 800a3b8:	b2e4      	uxtb	r4, r4
 800a3ba:	5caa      	ldrb	r2, [r5, r2]
 800a3bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a3c0:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency *= 100;
 800a3c2:	2264      	movs	r2, #100	; 0x64
 800a3c4:	fb02 f303 	mul.w	r3, r2, r3
 800a3c8:	9308      	str	r3, [sp, #32]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800a3ca:	a907      	add	r1, sp, #28
 800a3cc:	4b74      	ldr	r3, [pc, #464]	; (800a5a0 <ProcessMacCommands+0x5ac>)
 800a3ce:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a3d2:	f003 fe47 	bl	800e064 <RegionDlChannelReq>
 800a3d6:	b2c3      	uxtb	r3, r0
 800a3d8:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 800a3dc:	2800      	cmp	r0, #0
 800a3de:	f6ff ae15 	blt.w	800a00c <ProcessMacCommands+0x18>
                    macCmdPayload[0] = status;
 800a3e2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800a3e6:	2201      	movs	r2, #1
 800a3e8:	a90b      	add	r1, sp, #44	; 0x2c
 800a3ea:	200a      	movs	r0, #10
 800a3ec:	f002 fe2a 	bl	800d044 <LoRaMacCommandsAddCmd>
                break;
 800a3f0:	e60c      	b.n	800a00c <ProcessMacCommands+0x18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800a3f2:	200a      	movs	r0, #10
 800a3f4:	f002 ffea 	bl	800d3cc <LoRaMacConfirmQueueIsCmdActive>
 800a3f8:	b908      	cbnz	r0, 800a3fe <ProcessMacCommands+0x40a>
        switch( payload[macIndex++] )
 800a3fa:	464c      	mov	r4, r9
 800a3fc:	e606      	b.n	800a00c <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800a3fe:	210a      	movs	r1, #10
 800a400:	2000      	movs	r0, #0
 800a402:	f002 ff97 	bl	800d334 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 800a406:	a803      	add	r0, sp, #12
 800a408:	2300      	movs	r3, #0
 800a40a:	9303      	str	r3, [sp, #12]
 800a40c:	9304      	str	r3, [sp, #16]
                    SysTime_t sysTime = { 0 };
 800a40e:	f10d 0a14 	add.w	sl, sp, #20
 800a412:	9305      	str	r3, [sp, #20]
 800a414:	9306      	str	r3, [sp, #24]
                    SysTime_t sysTimeCurrent = { 0 };
 800a416:	f10d 0b1c 	add.w	fp, sp, #28
 800a41a:	9307      	str	r3, [sp, #28]
 800a41c:	9308      	str	r3, [sp, #32]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800a41e:	1ca1      	adds	r1, r4, #2
 800a420:	b2c9      	uxtb	r1, r1
 800a422:	f815 3009 	ldrb.w	r3, [r5, r9]
 800a426:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800a428:	1ce2      	adds	r2, r4, #3
 800a42a:	b2d2      	uxtb	r2, r2
 800a42c:	5c69      	ldrb	r1, [r5, r1]
 800a42e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800a432:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800a434:	1d21      	adds	r1, r4, #4
 800a436:	b2c9      	uxtb	r1, r1
 800a438:	5caa      	ldrb	r2, [r5, r2]
 800a43a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a43e:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800a440:	1d62      	adds	r2, r4, #5
 800a442:	b2d2      	uxtb	r2, r2
 800a444:	5c69      	ldrb	r1, [r5, r1]
 800a446:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800a44a:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800a44c:	3406      	adds	r4, #6
 800a44e:	b2e4      	uxtb	r4, r4
 800a450:	5caa      	ldrb	r2, [r5, r2]
 800a452:	f8ad 2010 	strh.w	r2, [sp, #16]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800a456:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800a45a:	fb01 f202 	mul.w	r2, r1, r2
 800a45e:	0a12      	lsrs	r2, r2, #8
 800a460:	f8ad 2010 	strh.w	r2, [sp, #16]
                    sysTime = gpsEpochTime;
 800a464:	c803      	ldmia	r0, {r0, r1}
 800a466:	e88a 0003 	stmia.w	sl, {r0, r1}
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800a46a:	4a4e      	ldr	r2, [pc, #312]	; (800a5a4 <ProcessMacCommands+0x5b0>)
 800a46c:	441a      	add	r2, r3
 800a46e:	9205      	str	r2, [sp, #20]
                    sysTimeCurrent = SysTimeGet( );
 800a470:	4658      	mov	r0, fp
 800a472:	f008 ff55 	bl	8013320 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800a476:	f8df 9130 	ldr.w	r9, [pc, #304]	; 800a5a8 <ProcessMacCommands+0x5b4>
 800a47a:	f8d9 333c 	ldr.w	r3, [r9, #828]	; 0x33c
 800a47e:	9300      	str	r3, [sp, #0]
 800a480:	f8d9 3338 	ldr.w	r3, [r9, #824]	; 0x338
 800a484:	e89a 0006 	ldmia.w	sl, {r1, r2}
 800a488:	a80c      	add	r0, sp, #48	; 0x30
 800a48a:	f008 ff08 	bl	801329e <SysTimeSub>
 800a48e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a490:	9300      	str	r3, [sp, #0]
 800a492:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a494:	e89b 0006 	ldmia.w	fp, {r1, r2}
 800a498:	4650      	mov	r0, sl
 800a49a:	f008 fee1 	bl	8013260 <SysTimeAdd>
                    SysTimeSet( sysTime );
 800a49e:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800a4a2:	f008 ff1b 	bl	80132dc <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800a4a6:	f002 fd35 	bl	800cf14 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	f889 3434 	strb.w	r3, [r9, #1076]	; 0x434
 800a4b0:	e5ac      	b.n	800a00c <ProcessMacCommands+0x18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800a4b2:	200d      	movs	r0, #13
 800a4b4:	f002 ff8a 	bl	800d3cc <LoRaMacConfirmQueueIsCmdActive>
 800a4b8:	b908      	cbnz	r0, 800a4be <ProcessMacCommands+0x4ca>
        switch( payload[macIndex++] )
 800a4ba:	464c      	mov	r4, r9
 800a4bc:	e5a6      	b.n	800a00c <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800a4be:	210d      	movs	r1, #13
 800a4c0:	2000      	movs	r0, #0
 800a4c2:	f002 ff37 	bl	800d334 <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800a4c6:	4b38      	ldr	r3, [pc, #224]	; (800a5a8 <ProcessMacCommands+0x5b4>)
 800a4c8:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 800a4cc:	3b04      	subs	r3, #4
 800a4ce:	b2db      	uxtb	r3, r3
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	d801      	bhi.n	800a4d8 <ProcessMacCommands+0x4e4>
        switch( payload[macIndex++] )
 800a4d4:	464c      	mov	r4, r9
 800a4d6:	e599      	b.n	800a00c <ProcessMacCommands+0x18>
                        LoRaMacClassBPingSlotInfoAns( );
 800a4d8:	f002 fd18 	bl	800cf0c <LoRaMacClassBPingSlotInfoAns>
        switch( payload[macIndex++] )
 800a4dc:	464c      	mov	r4, r9
 800a4de:	e595      	b.n	800a00c <ProcessMacCommands+0x18>
                frequency = ( uint32_t )payload[macIndex++];
 800a4e0:	1ca2      	adds	r2, r4, #2
 800a4e2:	b2d2      	uxtb	r2, r2
 800a4e4:	f815 3009 	ldrb.w	r3, [r5, r9]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800a4e8:	1ce1      	adds	r1, r4, #3
 800a4ea:	b2c9      	uxtb	r1, r1
 800a4ec:	5caa      	ldrb	r2, [r5, r2]
 800a4ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800a4f2:	1d22      	adds	r2, r4, #4
 800a4f4:	b2d2      	uxtb	r2, r2
 800a4f6:	5c69      	ldrb	r1, [r5, r1]
 800a4f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                datarate = payload[macIndex++] & 0x0F;
 800a4fc:	3405      	adds	r4, #5
 800a4fe:	b2e4      	uxtb	r4, r4
 800a500:	5ca8      	ldrb	r0, [r5, r2]
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800a502:	2164      	movs	r1, #100	; 0x64
 800a504:	fb03 f101 	mul.w	r1, r3, r1
 800a508:	f000 000f 	and.w	r0, r0, #15
 800a50c:	f002 fcff 	bl	800cf0e <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 800a510:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 800a514:	2201      	movs	r2, #1
 800a516:	a90b      	add	r1, sp, #44	; 0x2c
 800a518:	2011      	movs	r0, #17
 800a51a:	f002 fd93 	bl	800d044 <LoRaMacCommandsAddCmd>
                break;
 800a51e:	e575      	b.n	800a00c <ProcessMacCommands+0x18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800a520:	200e      	movs	r0, #14
 800a522:	f002 ff53 	bl	800d3cc <LoRaMacConfirmQueueIsCmdActive>
 800a526:	b908      	cbnz	r0, 800a52c <ProcessMacCommands+0x538>
        switch( payload[macIndex++] )
 800a528:	464c      	mov	r4, r9
 800a52a:	e56f      	b.n	800a00c <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800a52c:	210e      	movs	r1, #14
 800a52e:	2000      	movs	r0, #0
 800a530:	f002 ff00 	bl	800d334 <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800a534:	1ca2      	adds	r2, r4, #2
 800a536:	b2d2      	uxtb	r2, r2
 800a538:	f815 0009 	ldrb.w	r0, [r5, r9]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800a53c:	1ce3      	adds	r3, r4, #3
 800a53e:	b2db      	uxtb	r3, r3
 800a540:	f815 c002 	ldrb.w	ip, [r5, r2]
                    beaconTimingChannel = payload[macIndex++];
 800a544:	3404      	adds	r4, #4
 800a546:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800a548:	4a18      	ldr	r2, [pc, #96]	; (800a5ac <ProcessMacCommands+0x5b8>)
 800a54a:	6812      	ldr	r2, [r2, #0]
 800a54c:	5ce9      	ldrb	r1, [r5, r3]
 800a54e:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
 800a552:	f002 fcde 	bl	800cf12 <LoRaMacClassBBeaconTimingAns>
 800a556:	e559      	b.n	800a00c <ProcessMacCommands+0x18>
                    frequency = ( uint32_t )payload[macIndex++];
 800a558:	1ca1      	adds	r1, r4, #2
 800a55a:	b2c9      	uxtb	r1, r1
 800a55c:	f815 3009 	ldrb.w	r3, [r5, r9]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800a560:	1ce2      	adds	r2, r4, #3
 800a562:	b2d2      	uxtb	r2, r2
 800a564:	5c68      	ldrb	r0, [r5, r1]
 800a566:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800a56a:	3404      	adds	r4, #4
 800a56c:	b2e4      	uxtb	r4, r4
 800a56e:	5ca8      	ldrb	r0, [r5, r2]
 800a570:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800a574:	2064      	movs	r0, #100	; 0x64
 800a576:	fb03 f000 	mul.w	r0, r3, r0
 800a57a:	f002 fccc 	bl	800cf16 <LoRaMacClassBBeaconFreqReq>
 800a57e:	b140      	cbz	r0, 800a592 <ProcessMacCommands+0x59e>
                        macCmdPayload[0] = 1;
 800a580:	2301      	movs	r3, #1
 800a582:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800a586:	2201      	movs	r2, #1
 800a588:	a90b      	add	r1, sp, #44	; 0x2c
 800a58a:	2013      	movs	r0, #19
 800a58c:	f002 fd5a 	bl	800d044 <LoRaMacCommandsAddCmd>
                break;
 800a590:	e53c      	b.n	800a00c <ProcessMacCommands+0x18>
                        macCmdPayload[0] = 0;
 800a592:	2300      	movs	r3, #0
 800a594:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800a598:	e7f5      	b.n	800a586 <ProcessMacCommands+0x592>
}
 800a59a:	b00f      	add	sp, #60	; 0x3c
 800a59c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5a0:	20008000 	.word	0x20008000
 800a5a4:	12d53d80 	.word	0x12d53d80
 800a5a8:	200008e8 	.word	0x200008e8
 800a5ac:	20000df4 	.word	0x20000df4

0800a5b0 <ProcessRadioRxDone>:
{
 800a5b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a5b4:	b0a3      	sub	sp, #140	; 0x8c
    uint8_t *payload = RxDoneParams.Payload;
 800a5b6:	4bbc      	ldr	r3, [pc, #752]	; (800a8a8 <ProcessRadioRxDone+0x2f8>)
 800a5b8:	685e      	ldr	r6, [r3, #4]
    uint16_t size = RxDoneParams.Size;
 800a5ba:	891d      	ldrh	r5, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 800a5bc:	f9b3 900a 	ldrsh.w	r9, [r3, #10]
    int8_t snr = RxDoneParams.Snr;
 800a5c0:	f993 700c 	ldrsb.w	r7, [r3, #12]
    uint32_t downLinkCounter = 0;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	9306      	str	r3, [sp, #24]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800a5c8:	4ab8      	ldr	r2, [pc, #736]	; (800a8ac <ProcessRadioRxDone+0x2fc>)
 800a5ca:	f8d2 80d4 	ldr.w	r8, [r2, #212]	; 0xd4
    MacCtx.McpsConfirm.AckReceived = false;
 800a5ce:	4cb8      	ldr	r4, [pc, #736]	; (800a8b0 <ProcessRadioRxDone+0x300>)
 800a5d0:	f884 343c 	strb.w	r3, [r4, #1084]	; 0x43c
    MacCtx.RxStatus.Rssi = rssi;
 800a5d4:	f8a4 9480 	strh.w	r9, [r4, #1152]	; 0x480
    MacCtx.RxStatus.Snr = snr;
 800a5d8:	f884 7482 	strb.w	r7, [r4, #1154]	; 0x482
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800a5dc:	f894 2484 	ldrb.w	r2, [r4, #1156]	; 0x484
 800a5e0:	f884 2483 	strb.w	r2, [r4, #1155]	; 0x483
    MacCtx.McpsIndication.Port = 0;
 800a5e4:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
    MacCtx.McpsIndication.Multicast = 0;
 800a5e8:	f884 341e 	strb.w	r3, [r4, #1054]	; 0x41e
    MacCtx.McpsIndication.FramePending = 0;
 800a5ec:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
    MacCtx.McpsIndication.Buffer = NULL;
 800a5f0:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
    MacCtx.McpsIndication.BufferSize = 0;
 800a5f4:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
    MacCtx.McpsIndication.RxData = false;
 800a5f8:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
    MacCtx.McpsIndication.AckReceived = false;
 800a5fc:	f884 342a 	strb.w	r3, [r4, #1066]	; 0x42a
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800a600:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800a604:	f884 341c 	strb.w	r3, [r4, #1052]	; 0x41c
    MacCtx.McpsIndication.DevAddress = 0;
 800a608:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800a60c:	f884 3434 	strb.w	r3, [r4, #1076]	; 0x434
    Radio.Sleep( );
 800a610:	4ba8      	ldr	r3, [pc, #672]	; (800a8b4 <ProcessRadioRxDone+0x304>)
 800a612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a614:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800a616:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800a61a:	f008 ff6f 	bl	80134fc <UTIL_TIMER_Stop>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800a61e:	4629      	mov	r1, r5
 800a620:	4630      	mov	r0, r6
 800a622:	f002 fc60 	bl	800cee6 <LoRaMacClassBRxBeacon>
 800a626:	b998      	cbnz	r0, 800a650 <ProcessRadioRxDone+0xa0>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800a628:	4ba0      	ldr	r3, [pc, #640]	; (800a8ac <ProcessRadioRxDone+0x2fc>)
 800a62a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800a62e:	2b01      	cmp	r3, #1
 800a630:	d013      	beq.n	800a65a <ProcessRadioRxDone+0xaa>
    macHdr.Value = payload[pktHeaderLen++];
 800a632:	7834      	ldrb	r4, [r6, #0]
    switch( macHdr.Bits.MType )
 800a634:	0963      	lsrs	r3, r4, #5
 800a636:	3b01      	subs	r3, #1
 800a638:	2b06      	cmp	r3, #6
 800a63a:	f200 8281 	bhi.w	800ab40 <ProcessRadioRxDone+0x590>
 800a63e:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a642:	0029      	.short	0x0029
 800a644:	00aa027f 	.word	0x00aa027f
 800a648:	00a6027f 	.word	0x00a6027f
 800a64c:	0259027f 	.word	0x0259027f
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800a650:	f8a4 9476 	strh.w	r9, [r4, #1142]	; 0x476
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800a654:	f884 7478 	strb.w	r7, [r4, #1144]	; 0x478
        return;
 800a658:	e287      	b.n	800ab6a <ProcessRadioRxDone+0x5ba>
        if( LoRaMacClassBIsPingExpected( ) == true )
 800a65a:	f002 fc48 	bl	800ceee <LoRaMacClassBIsPingExpected>
 800a65e:	b150      	cbz	r0, 800a676 <ProcessRadioRxDone+0xc6>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a660:	2000      	movs	r0, #0
 800a662:	f002 fc39 	bl	800ced8 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800a666:	2000      	movs	r0, #0
 800a668:	f002 fc3b 	bl	800cee2 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800a66c:	4b90      	ldr	r3, [pc, #576]	; (800a8b0 <ProcessRadioRxDone+0x300>)
 800a66e:	2204      	movs	r2, #4
 800a670:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
 800a674:	e7dd      	b.n	800a632 <ProcessRadioRxDone+0x82>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800a676:	f002 fc3c 	bl	800cef2 <LoRaMacClassBIsMulticastExpected>
 800a67a:	2800      	cmp	r0, #0
 800a67c:	d0d9      	beq.n	800a632 <ProcessRadioRxDone+0x82>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a67e:	2000      	movs	r0, #0
 800a680:	f002 fc2b 	bl	800ceda <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800a684:	2000      	movs	r0, #0
 800a686:	f002 fc2d 	bl	800cee4 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800a68a:	4b89      	ldr	r3, [pc, #548]	; (800a8b0 <ProcessRadioRxDone+0x300>)
 800a68c:	2205      	movs	r2, #5
 800a68e:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
 800a692:	e7ce      	b.n	800a632 <ProcessRadioRxDone+0x82>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800a694:	2d10      	cmp	r5, #16
 800a696:	d95d      	bls.n	800a754 <ProcessRadioRxDone+0x1a4>
            macMsgJoinAccept.Buffer = payload;
 800a698:	9607      	str	r6, [sp, #28]
            macMsgJoinAccept.BufSize = size;
 800a69a:	b2ed      	uxtb	r5, r5
 800a69c:	f88d 5020 	strb.w	r5, [sp, #32]
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800a6a0:	4b82      	ldr	r3, [pc, #520]	; (800a8ac <ProcessRadioRxDone+0x2fc>)
 800a6a2:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d15b      	bne.n	800a762 <ProcessRadioRxDone+0x1b2>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800a6aa:	f006 fcf9 	bl	80110a0 <SecureElementGetJoinEui>
 800a6ae:	4601      	mov	r1, r0
 800a6b0:	aa07      	add	r2, sp, #28
 800a6b2:	20ff      	movs	r0, #255	; 0xff
 800a6b4:	f003 fa1a 	bl	800daec <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800a6b8:	2800      	cmp	r0, #0
 800a6ba:	d15e      	bne.n	800a77a <ProcessRadioRxDone+0x1ca>
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800a6bc:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 800a6c0:	4b7a      	ldr	r3, [pc, #488]	; (800a8ac <ProcessRadioRxDone+0x2fc>)
 800a6c2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800a6c6:	f89d 1026 	ldrb.w	r1, [sp, #38]	; 0x26
 800a6ca:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800a6ce:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800a6d2:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
 800a6d6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800a6da:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800a6de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6e0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800a6e4:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 800a6e8:	f3c2 1102 	ubfx	r1, r2, #4, #3
 800a6ec:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800a6f0:	f3c2 0203 	ubfx	r2, r2, #0, #4
 800a6f4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800a6f8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800a6fc:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 800a700:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800a702:	b90a      	cbnz	r2, 800a708 <ProcessRadioRxDone+0x158>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800a704:	2201      	movs	r2, #1
 800a706:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800a708:	4c68      	ldr	r4, [pc, #416]	; (800a8ac <ProcessRadioRxDone+0x2fc>)
 800a70a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a70c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a710:	fb02 f303 	mul.w	r3, r2, r3
 800a714:	6523      	str	r3, [r4, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800a716:	4413      	add	r3, r2
 800a718:	6563      	str	r3, [r4, #84]	; 0x54
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800a71a:	2300      	movs	r3, #0
 800a71c:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800a720:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 800a724:	9320      	str	r3, [sp, #128]	; 0x80
                applyCFList.Size = size - 17;
 800a726:	3d11      	subs	r5, #17
 800a728:	f88d 5084 	strb.w	r5, [sp, #132]	; 0x84
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800a72c:	a920      	add	r1, sp, #128	; 0x80
 800a72e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a732:	f003 fbfa 	bl	800df2a <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800a736:	2302      	movs	r3, #2
 800a738:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800a73c:	2001      	movs	r0, #1
 800a73e:	f002 fe45 	bl	800d3cc <LoRaMacConfirmQueueIsCmdActive>
 800a742:	b9a8      	cbnz	r0, 800a770 <ProcessRadioRxDone+0x1c0>
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800a744:	4a5a      	ldr	r2, [pc, #360]	; (800a8b0 <ProcessRadioRxDone+0x300>)
 800a746:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800a74a:	f043 0308 	orr.w	r3, r3, #8
 800a74e:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            break;
 800a752:	e1e9      	b.n	800ab28 <ProcessRadioRxDone+0x578>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a754:	4b56      	ldr	r3, [pc, #344]	; (800a8b0 <ProcessRadioRxDone+0x300>)
 800a756:	2201      	movs	r2, #1
 800a758:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800a75c:	f7ff fbd0 	bl	8009f00 <PrepareRxDoneAbort>
                return;
 800a760:	e203      	b.n	800ab6a <ProcessRadioRxDone+0x5ba>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a762:	4b53      	ldr	r3, [pc, #332]	; (800a8b0 <ProcessRadioRxDone+0x300>)
 800a764:	2201      	movs	r2, #1
 800a766:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800a76a:	f7ff fbc9 	bl	8009f00 <PrepareRxDoneAbort>
                return;
 800a76e:	e1fc      	b.n	800ab6a <ProcessRadioRxDone+0x5ba>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800a770:	2101      	movs	r1, #1
 800a772:	2000      	movs	r0, #0
 800a774:	f002 fdde 	bl	800d334 <LoRaMacConfirmQueueSetStatus>
 800a778:	e7e4      	b.n	800a744 <ProcessRadioRxDone+0x194>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800a77a:	2001      	movs	r0, #1
 800a77c:	f002 fe26 	bl	800d3cc <LoRaMacConfirmQueueIsCmdActive>
 800a780:	2800      	cmp	r0, #0
 800a782:	d0df      	beq.n	800a744 <ProcessRadioRxDone+0x194>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800a784:	2101      	movs	r1, #1
 800a786:	2007      	movs	r0, #7
 800a788:	f002 fdd4 	bl	800d334 <LoRaMacConfirmQueueSetStatus>
 800a78c:	e7da      	b.n	800a744 <ProcessRadioRxDone+0x194>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800a78e:	4b48      	ldr	r3, [pc, #288]	; (800a8b0 <ProcessRadioRxDone+0x300>)
 800a790:	2201      	movs	r2, #1
 800a792:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a796:	4b45      	ldr	r3, [pc, #276]	; (800a8ac <ProcessRadioRxDone+0x2fc>)
 800a798:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800a79c:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800a7a0:	4a43      	ldr	r2, [pc, #268]	; (800a8b0 <ProcessRadioRxDone+0x300>)
 800a7a2:	f992 2420 	ldrsb.w	r2, [r2, #1056]	; 0x420
 800a7a6:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800a7aa:	220d      	movs	r2, #13
 800a7ac:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800a7b0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a7b4:	b113      	cbz	r3, 800a7bc <ProcessRadioRxDone+0x20c>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800a7b6:	230e      	movs	r3, #14
 800a7b8:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a7bc:	a91e      	add	r1, sp, #120	; 0x78
 800a7be:	4b3b      	ldr	r3, [pc, #236]	; (800a8ac <ProcessRadioRxDone+0x2fc>)
 800a7c0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a7c4:	f003 fb6d 	bl	800dea2 <RegionGetPhyParam>
 800a7c8:	901d      	str	r0, [sp, #116]	; 0x74
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800a7ca:	f1a5 030d 	sub.w	r3, r5, #13
 800a7ce:	b21b      	sxth	r3, r3
 800a7d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a7d4:	b200      	sxth	r0, r0
 800a7d6:	4283      	cmp	r3, r0
 800a7d8:	dc01      	bgt.n	800a7de <ProcessRadioRxDone+0x22e>
 800a7da:	2d0b      	cmp	r5, #11
 800a7dc:	d806      	bhi.n	800a7ec <ProcessRadioRxDone+0x23c>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a7de:	4b34      	ldr	r3, [pc, #208]	; (800a8b0 <ProcessRadioRxDone+0x300>)
 800a7e0:	2201      	movs	r2, #1
 800a7e2:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800a7e6:	f7ff fb8b 	bl	8009f00 <PrepareRxDoneAbort>
                return;
 800a7ea:	e1be      	b.n	800ab6a <ProcessRadioRxDone+0x5ba>
            macMsgData.Buffer = payload;
 800a7ec:	9611      	str	r6, [sp, #68]	; 0x44
            macMsgData.BufSize = size;
 800a7ee:	f88d 5048 	strb.w	r5, [sp, #72]	; 0x48
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800a7f2:	4b31      	ldr	r3, [pc, #196]	; (800a8b8 <ProcessRadioRxDone+0x308>)
 800a7f4:	931a      	str	r3, [sp, #104]	; 0x68
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800a7f6:	23ff      	movs	r3, #255	; 0xff
 800a7f8:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800a7fc:	a811      	add	r0, sp, #68	; 0x44
 800a7fe:	f003 fa3b 	bl	800dc78 <LoRaMacParserData>
 800a802:	2800      	cmp	r0, #0
 800a804:	d149      	bne.n	800a89a <ProcessRadioRxDone+0x2ea>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800a806:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a808:	4b29      	ldr	r3, [pc, #164]	; (800a8b0 <ProcessRadioRxDone+0x300>)
 800a80a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800a80e:	f10d 0116 	add.w	r1, sp, #22
 800a812:	a811      	add	r0, sp, #68	; 0x44
 800a814:	f7ff f9cc 	bl	8009bb0 <DetermineFrameType>
 800a818:	4605      	mov	r5, r0
 800a81a:	2800      	cmp	r0, #0
 800a81c:	d14e      	bne.n	800a8bc <ProcessRadioRxDone+0x30c>
            downLinkCounter = 0;
 800a81e:	2300      	movs	r3, #0
 800a820:	9306      	str	r3, [sp, #24]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800a822:	4603      	mov	r3, r0
 800a824:	2b00      	cmp	r3, #0
 800a826:	d050      	beq.n	800a8ca <ProcessRadioRxDone+0x31a>
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800a828:	f04f 0901 	mov.w	r9, #1
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800a82c:	2d01      	cmp	r5, #1
 800a82e:	d108      	bne.n	800a842 <ProcessRadioRxDone+0x292>
 800a830:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800a834:	2b03      	cmp	r3, #3
 800a836:	d174      	bne.n	800a922 <ProcessRadioRxDone+0x372>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800a838:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800a83c:	f013 0f60 	tst.w	r3, #96	; 0x60
 800a840:	d16f      	bne.n	800a922 <ProcessRadioRxDone+0x372>
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800a842:	2315      	movs	r3, #21
 800a844:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a848:	4e18      	ldr	r6, [pc, #96]	; (800a8ac <ProcessRadioRxDone+0x2fc>)
 800a84a:	a91e      	add	r1, sp, #120	; 0x78
 800a84c:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 800a850:	f003 fb27 	bl	800dea2 <RegionGetPhyParam>
 800a854:	901d      	str	r0, [sp, #116]	; 0x74
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 800a856:	ab06      	add	r3, sp, #24
 800a858:	9302      	str	r3, [sp, #8]
 800a85a:	f10d 0317 	add.w	r3, sp, #23
 800a85e:	9301      	str	r3, [sp, #4]
 800a860:	b280      	uxth	r0, r0
 800a862:	9000      	str	r0, [sp, #0]
 800a864:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
 800a868:	aa11      	add	r2, sp, #68	; 0x44
 800a86a:	f89d 1016 	ldrb.w	r1, [sp, #22]
 800a86e:	4648      	mov	r0, r9
 800a870:	f7ff fb84 	bl	8009f7c <GetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800a874:	2800      	cmp	r0, #0
 800a876:	d074      	beq.n	800a962 <ProcessRadioRxDone+0x3b2>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800a878:	2807      	cmp	r0, #7
 800a87a:	d059      	beq.n	800a930 <ProcessRadioRxDone+0x380>
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800a87c:	2808      	cmp	r0, #8
 800a87e:	d06b      	beq.n	800a958 <ProcessRadioRxDone+0x3a8>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a880:	4b0b      	ldr	r3, [pc, #44]	; (800a8b0 <ProcessRadioRxDone+0x300>)
 800a882:	2201      	movs	r2, #1
 800a884:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800a888:	9a06      	ldr	r2, [sp, #24]
 800a88a:	4b09      	ldr	r3, [pc, #36]	; (800a8b0 <ProcessRadioRxDone+0x300>)
 800a88c:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800a890:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
                PrepareRxDoneAbort( );
 800a894:	f7ff fb34 	bl	8009f00 <PrepareRxDoneAbort>
                return;
 800a898:	e167      	b.n	800ab6a <ProcessRadioRxDone+0x5ba>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a89a:	4b05      	ldr	r3, [pc, #20]	; (800a8b0 <ProcessRadioRxDone+0x300>)
 800a89c:	2201      	movs	r2, #1
 800a89e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800a8a2:	f7ff fb2d 	bl	8009f00 <PrepareRxDoneAbort>
                return;
 800a8a6:	e160      	b.n	800ab6a <ProcessRadioRxDone+0x5ba>
 800a8a8:	20000df4 	.word	0x20000df4
 800a8ac:	20008000 	.word	0x20008000
 800a8b0:	200008e8 	.word	0x200008e8
 800a8b4:	08014bf0 	.word	0x08014bf0
 800a8b8:	20000b20 	.word	0x20000b20
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a8bc:	4bae      	ldr	r3, [pc, #696]	; (800ab78 <ProcessRadioRxDone+0x5c8>)
 800a8be:	2201      	movs	r2, #1
 800a8c0:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800a8c4:	f7ff fb1c 	bl	8009f00 <PrepareRxDoneAbort>
                return;
 800a8c8:	e14f      	b.n	800ab6a <ProcessRadioRxDone+0x5ba>
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	4aab      	ldr	r2, [pc, #684]	; (800ab7c <ProcessRadioRxDone+0x5cc>)
 800a8ce:	212c      	movs	r1, #44	; 0x2c
 800a8d0:	fb01 2203 	mla	r2, r1, r3, r2
 800a8d4:	f8d2 20dc 	ldr.w	r2, [r2, #220]	; 0xdc
 800a8d8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a8da:	428a      	cmp	r2, r1
 800a8dc:	d002      	beq.n	800a8e4 <ProcessRadioRxDone+0x334>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800a8de:	3301      	adds	r3, #1
 800a8e0:	b2db      	uxtb	r3, r3
 800a8e2:	e79f      	b.n	800a824 <ProcessRadioRxDone+0x274>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800a8e4:	49a5      	ldr	r1, [pc, #660]	; (800ab7c <ProcessRadioRxDone+0x5cc>)
 800a8e6:	262c      	movs	r6, #44	; 0x2c
 800a8e8:	fb06 1103 	mla	r1, r6, r3, r1
 800a8ec:	f891 10da 	ldrb.w	r1, [r1, #218]	; 0xda
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800a8f0:	2900      	cmp	r1, #0
 800a8f2:	d0f4      	beq.n	800a8de <ProcessRadioRxDone+0x32e>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800a8f4:	4ba1      	ldr	r3, [pc, #644]	; (800ab7c <ProcessRadioRxDone+0x5cc>)
 800a8f6:	fb06 3000 	mla	r0, r6, r0, r3
 800a8fa:	f890 90db 	ldrb.w	r9, [r0, #219]	; 0xdb
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800a8fe:	f8d0 10f8 	ldr.w	r1, [r0, #248]	; 0xf8
 800a902:	6809      	ldr	r1, [r1, #0]
 800a904:	9106      	str	r1, [sp, #24]
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800a906:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800a90a:	2b02      	cmp	r3, #2
 800a90c:	d002      	beq.n	800a914 <ProcessRadioRxDone+0x364>
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800a90e:	4690      	mov	r8, r2
                    multicast = 1;
 800a910:	2501      	movs	r5, #1
 800a912:	e78b      	b.n	800a82c <ProcessRadioRxDone+0x27c>
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800a914:	4b98      	ldr	r3, [pc, #608]	; (800ab78 <ProcessRadioRxDone+0x5c8>)
 800a916:	2103      	movs	r1, #3
 800a918:	f883 1483 	strb.w	r1, [r3, #1155]	; 0x483
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800a91c:	4690      	mov	r8, r2
                    multicast = 1;
 800a91e:	2501      	movs	r5, #1
 800a920:	e784      	b.n	800a82c <ProcessRadioRxDone+0x27c>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a922:	4b95      	ldr	r3, [pc, #596]	; (800ab78 <ProcessRadioRxDone+0x5c8>)
 800a924:	2201      	movs	r2, #1
 800a926:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800a92a:	f7ff fae9 	bl	8009f00 <PrepareRxDoneAbort>
                return;
 800a92e:	e11c      	b.n	800ab6a <ProcessRadioRxDone+0x5ba>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800a930:	4b91      	ldr	r3, [pc, #580]	; (800ab78 <ProcessRadioRxDone+0x5c8>)
 800a932:	2208      	movs	r2, #8
 800a934:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 800a938:	f896 3116 	ldrb.w	r3, [r6, #278]	; 0x116
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d1a3      	bne.n	800a888 <ProcessRadioRxDone+0x2d8>
 800a940:	f004 04e0 	and.w	r4, r4, #224	; 0xe0
 800a944:	2ca0      	cmp	r4, #160	; 0xa0
 800a946:	d19f      	bne.n	800a888 <ProcessRadioRxDone+0x2d8>
 800a948:	6b72      	ldr	r2, [r6, #52]	; 0x34
 800a94a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800a94c:	429a      	cmp	r2, r3
 800a94e:	d19b      	bne.n	800a888 <ProcessRadioRxDone+0x2d8>
                        Nvm.MacGroup1.SrvAckRequested = true;
 800a950:	2201      	movs	r2, #1
 800a952:	f886 203a 	strb.w	r2, [r6, #58]	; 0x3a
 800a956:	e797      	b.n	800a888 <ProcessRadioRxDone+0x2d8>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800a958:	4b87      	ldr	r3, [pc, #540]	; (800ab78 <ProcessRadioRxDone+0x5c8>)
 800a95a:	220a      	movs	r2, #10
 800a95c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800a960:	e792      	b.n	800a888 <ProcessRadioRxDone+0x2d8>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800a962:	ab11      	add	r3, sp, #68	; 0x44
 800a964:	9300      	str	r3, [sp, #0]
 800a966:	9b06      	ldr	r3, [sp, #24]
 800a968:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800a96c:	4641      	mov	r1, r8
 800a96e:	4648      	mov	r0, r9
 800a970:	f003 f810 	bl	800d994 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800a974:	2800      	cmp	r0, #0
 800a976:	d13c      	bne.n	800a9f2 <ProcessRadioRxDone+0x442>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800a978:	4b7f      	ldr	r3, [pc, #508]	; (800ab78 <ProcessRadioRxDone+0x5c8>)
 800a97a:	2100      	movs	r1, #0
 800a97c:	f883 141d 	strb.w	r1, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Multicast = multicast;
 800a980:	f883 541e 	strb.w	r5, [r3, #1054]	; 0x41e
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800a984:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 800a988:	f3c2 1000 	ubfx	r0, r2, #4, #1
 800a98c:	f883 0421 	strb.w	r0, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = NULL;
 800a990:	f8c3 1424 	str.w	r1, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = 0;
 800a994:	f883 1428 	strb.w	r1, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800a998:	9806      	ldr	r0, [sp, #24]
 800a99a:	f8c3 042c 	str.w	r0, [r3, #1068]	; 0x42c
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800a99e:	f8c3 0464 	str.w	r0, [r3, #1124]	; 0x464
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800a9a2:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800a9a6:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800a9aa:	f883 1439 	strb.w	r1, [r3, #1081]	; 0x439
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800a9ae:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800a9b2:	f893 0483 	ldrb.w	r0, [r3, #1155]	; 0x483
 800a9b6:	2801      	cmp	r0, #1
 800a9b8:	d929      	bls.n	800aa0e <ProcessRadioRxDone+0x45e>
            if( multicast == 1 )
 800a9ba:	2d01      	cmp	r5, #1
 800a9bc:	d02a      	beq.n	800aa14 <ProcessRadioRxDone+0x464>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800a9be:	f004 04e0 	and.w	r4, r4, #224	; 0xe0
 800a9c2:	2ca0      	cmp	r4, #160	; 0xa0
 800a9c4:	d02b      	beq.n	800aa1e <ProcessRadioRxDone+0x46e>
                    Nvm.MacGroup1.SrvAckRequested = false;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	4a6c      	ldr	r2, [pc, #432]	; (800ab7c <ProcessRadioRxDone+0x5cc>)
 800a9ca:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800a9ce:	4a6a      	ldr	r2, [pc, #424]	; (800ab78 <ProcessRadioRxDone+0x5c8>)
 800a9d0:	f882 341c 	strb.w	r3, [r2, #1052]	; 0x41c
            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800a9d4:	4b68      	ldr	r3, [pc, #416]	; (800ab78 <ProcessRadioRxDone+0x5c8>)
 800a9d6:	f893 2438 	ldrb.w	r2, [r3, #1080]	; 0x438
 800a9da:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 800a9de:	f7ff fafa 	bl	8009fd6 <RemoveMacCommands>
            switch( fType )
 800a9e2:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800a9e6:	2b03      	cmp	r3, #3
 800a9e8:	d87d      	bhi.n	800aae6 <ProcessRadioRxDone+0x536>
 800a9ea:	e8df f003 	tbb	[pc, r3]
 800a9ee:	4a27      	.short	0x4a27
 800a9f0:	6c5c      	.short	0x6c5c
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800a9f2:	2802      	cmp	r0, #2
 800a9f4:	d006      	beq.n	800aa04 <ProcessRadioRxDone+0x454>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800a9f6:	4b60      	ldr	r3, [pc, #384]	; (800ab78 <ProcessRadioRxDone+0x5c8>)
 800a9f8:	220c      	movs	r2, #12
 800a9fa:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800a9fe:	f7ff fa7f 	bl	8009f00 <PrepareRxDoneAbort>
                return;
 800aa02:	e0b2      	b.n	800ab6a <ProcessRadioRxDone+0x5ba>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800aa04:	4b5c      	ldr	r3, [pc, #368]	; (800ab78 <ProcessRadioRxDone+0x5c8>)
 800aa06:	220b      	movs	r2, #11
 800aa08:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800aa0c:	e7f7      	b.n	800a9fe <ProcessRadioRxDone+0x44e>
                Nvm.MacGroup1.AdrAckCounter = 0;
 800aa0e:	4b5b      	ldr	r3, [pc, #364]	; (800ab7c <ProcessRadioRxDone+0x5cc>)
 800aa10:	6299      	str	r1, [r3, #40]	; 0x28
 800aa12:	e7d2      	b.n	800a9ba <ProcessRadioRxDone+0x40a>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800aa14:	4b58      	ldr	r3, [pc, #352]	; (800ab78 <ProcessRadioRxDone+0x5c8>)
 800aa16:	2202      	movs	r2, #2
 800aa18:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800aa1c:	e7da      	b.n	800a9d4 <ProcessRadioRxDone+0x424>
                    Nvm.MacGroup1.SrvAckRequested = true;
 800aa1e:	4b57      	ldr	r3, [pc, #348]	; (800ab7c <ProcessRadioRxDone+0x5cc>)
 800aa20:	2201      	movs	r2, #1
 800aa22:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800aa26:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 800aa2a:	b913      	cbnz	r3, 800aa32 <ProcessRadioRxDone+0x482>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800aa2c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800aa2e:	4b53      	ldr	r3, [pc, #332]	; (800ab7c <ProcessRadioRxDone+0x5cc>)
 800aa30:	635a      	str	r2, [r3, #52]	; 0x34
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800aa32:	4b51      	ldr	r3, [pc, #324]	; (800ab78 <ProcessRadioRxDone+0x5c8>)
 800aa34:	2201      	movs	r2, #1
 800aa36:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800aa3a:	e7cb      	b.n	800a9d4 <ProcessRadioRxDone+0x424>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800aa3c:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 800aa40:	4c4d      	ldr	r4, [pc, #308]	; (800ab78 <ProcessRadioRxDone+0x5c8>)
 800aa42:	f894 3483 	ldrb.w	r3, [r4, #1155]	; 0x483
 800aa46:	9300      	str	r3, [sp, #0]
 800aa48:	463b      	mov	r3, r7
 800aa4a:	f002 020f 	and.w	r2, r2, #15
 800aa4e:	2100      	movs	r1, #0
 800aa50:	a815      	add	r0, sp, #84	; 0x54
 800aa52:	f7ff facf 	bl	8009ff4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800aa56:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800aa5a:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800aa5e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800aa60:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800aa64:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 800aa68:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800aa72:	4a41      	ldr	r2, [pc, #260]	; (800ab78 <ProcessRadioRxDone+0x5c8>)
 800aa74:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800aa78:	f043 0302 	orr.w	r3, r3, #2
 800aa7c:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            break;
 800aa80:	e052      	b.n	800ab28 <ProcessRadioRxDone+0x578>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800aa82:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 800aa86:	4c3c      	ldr	r4, [pc, #240]	; (800ab78 <ProcessRadioRxDone+0x5c8>)
 800aa88:	f894 3483 	ldrb.w	r3, [r4, #1155]	; 0x483
 800aa8c:	9300      	str	r3, [sp, #0]
 800aa8e:	463b      	mov	r3, r7
 800aa90:	f002 020f 	and.w	r2, r2, #15
 800aa94:	2100      	movs	r1, #0
 800aa96:	a815      	add	r0, sp, #84	; 0x54
 800aa98:	f7ff faac 	bl	8009ff4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800aa9c:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800aaa0:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
                    break;
 800aaa4:	e7e5      	b.n	800aa72 <ProcessRadioRxDone+0x4c2>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800aaa6:	4c34      	ldr	r4, [pc, #208]	; (800ab78 <ProcessRadioRxDone+0x5c8>)
 800aaa8:	f894 3483 	ldrb.w	r3, [r4, #1155]	; 0x483
 800aaac:	9300      	str	r3, [sp, #0]
 800aaae:	463b      	mov	r3, r7
 800aab0:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 800aab4:	2100      	movs	r1, #0
 800aab6:	981a      	ldr	r0, [sp, #104]	; 0x68
 800aab8:	f7ff fa9c 	bl	8009ff4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800aabc:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800aac0:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
                    break;
 800aac4:	e7d5      	b.n	800aa72 <ProcessRadioRxDone+0x4c2>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800aac6:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 800aaca:	4b2b      	ldr	r3, [pc, #172]	; (800ab78 <ProcessRadioRxDone+0x5c8>)
 800aacc:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800aad0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800aad2:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800aad6:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 800aada:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800aade:	2201      	movs	r2, #1
 800aae0:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 800aae4:	e7c5      	b.n	800aa72 <ProcessRadioRxDone+0x4c2>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800aae6:	4b24      	ldr	r3, [pc, #144]	; (800ab78 <ProcessRadioRxDone+0x5c8>)
 800aae8:	2201      	movs	r2, #1
 800aaea:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    PrepareRxDoneAbort( );
 800aaee:	f7ff fa07 	bl	8009f00 <PrepareRxDoneAbort>
                    break;
 800aaf2:	e7be      	b.n	800aa72 <ProcessRadioRxDone+0x4c2>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800aaf4:	1e6a      	subs	r2, r5, #1
 800aaf6:	4c20      	ldr	r4, [pc, #128]	; (800ab78 <ProcessRadioRxDone+0x5c8>)
 800aaf8:	f504 770e 	add.w	r7, r4, #568	; 0x238
 800aafc:	b292      	uxth	r2, r2
 800aafe:	1c71      	adds	r1, r6, #1
 800ab00:	4638      	mov	r0, r7
 800ab02:	f006 fafe 	bl	8011102 <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800ab06:	2303      	movs	r3, #3
 800ab08:	f884 341c 	strb.w	r3, [r4, #1052]	; 0x41c
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	f884 341d 	strb.w	r3, [r4, #1053]	; 0x41d
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800ab12:	f8c4 7424 	str.w	r7, [r4, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800ab16:	3d01      	subs	r5, #1
 800ab18:	f884 5428 	strb.w	r5, [r4, #1064]	; 0x428
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800ab1c:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 800ab20:	f043 0302 	orr.w	r3, r3, #2
 800ab24:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
    if( MacCtx.NodeAckRequested == true )
 800ab28:	4b13      	ldr	r3, [pc, #76]	; (800ab78 <ProcessRadioRxDone+0x5c8>)
 800ab2a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800ab2e:	b173      	cbz	r3, 800ab4e <ProcessRadioRxDone+0x59e>
        if( MacCtx.McpsConfirm.AckReceived == true )
 800ab30:	4b11      	ldr	r3, [pc, #68]	; (800ab78 <ProcessRadioRxDone+0x5c8>)
 800ab32:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800ab36:	b17b      	cbz	r3, 800ab58 <ProcessRadioRxDone+0x5a8>
            OnAckTimeoutTimerEvent( NULL );
 800ab38:	2000      	movs	r0, #0
 800ab3a:	f7ff f9bb 	bl	8009eb4 <OnAckTimeoutTimerEvent>
 800ab3e:	e00b      	b.n	800ab58 <ProcessRadioRxDone+0x5a8>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ab40:	4b0d      	ldr	r3, [pc, #52]	; (800ab78 <ProcessRadioRxDone+0x5c8>)
 800ab42:	2201      	movs	r2, #1
 800ab44:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            PrepareRxDoneAbort( );
 800ab48:	f7ff f9da 	bl	8009f00 <PrepareRxDoneAbort>
            break;
 800ab4c:	e7ec      	b.n	800ab28 <ProcessRadioRxDone+0x578>
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800ab4e:	4b0b      	ldr	r3, [pc, #44]	; (800ab7c <ProcessRadioRxDone+0x5cc>)
 800ab50:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800ab54:	2b02      	cmp	r3, #2
 800ab56:	d00b      	beq.n	800ab70 <ProcessRadioRxDone+0x5c0>
    MacCtx.MacFlags.Bits.MacDone = 1;
 800ab58:	4a07      	ldr	r2, [pc, #28]	; (800ab78 <ProcessRadioRxDone+0x5c8>)
 800ab5a:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800ab5e:	f043 0320 	orr.w	r3, r3, #32
 800ab62:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    UpdateRxSlotIdleState( );
 800ab66:	f7fe ffa1 	bl	8009aac <UpdateRxSlotIdleState>
}
 800ab6a:	b023      	add	sp, #140	; 0x8c
 800ab6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            OnAckTimeoutTimerEvent( NULL );
 800ab70:	2000      	movs	r0, #0
 800ab72:	f7ff f99f 	bl	8009eb4 <OnAckTimeoutTimerEvent>
 800ab76:	e7ef      	b.n	800ab58 <ProcessRadioRxDone+0x5a8>
 800ab78:	200008e8 	.word	0x200008e8
 800ab7c:	20008000 	.word	0x20008000

0800ab80 <ProcessRadioTxTimeout>:
{
 800ab80:	b510      	push	{r4, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800ab82:	4b0f      	ldr	r3, [pc, #60]	; (800abc0 <ProcessRadioTxTimeout+0x40>)
 800ab84:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800ab88:	2b02      	cmp	r3, #2
 800ab8a:	d002      	beq.n	800ab92 <ProcessRadioTxTimeout+0x12>
        Radio.Sleep( );
 800ab8c:	4b0d      	ldr	r3, [pc, #52]	; (800abc4 <ProcessRadioTxTimeout+0x44>)
 800ab8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab90:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 800ab92:	f7fe ff8b 	bl	8009aac <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800ab96:	4c0c      	ldr	r4, [pc, #48]	; (800abc8 <ProcessRadioTxTimeout+0x48>)
 800ab98:	2002      	movs	r0, #2
 800ab9a:	f884 0439 	strb.w	r0, [r4, #1081]	; 0x439
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800ab9e:	f002 fbf7 	bl	800d390 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800aba2:	f894 3414 	ldrb.w	r3, [r4, #1044]	; 0x414
 800aba6:	b113      	cbz	r3, 800abae <ProcessRadioTxTimeout+0x2e>
        MacCtx.AckTimeoutRetry = true;
 800aba8:	2201      	movs	r2, #1
 800abaa:	f884 2413 	strb.w	r2, [r4, #1043]	; 0x413
    MacCtx.MacFlags.Bits.MacDone = 1;
 800abae:	4a06      	ldr	r2, [pc, #24]	; (800abc8 <ProcessRadioTxTimeout+0x48>)
 800abb0:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800abb4:	f043 0320 	orr.w	r3, r3, #32
 800abb8:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
}
 800abbc:	bd10      	pop	{r4, pc}
 800abbe:	bf00      	nop
 800abc0:	20008000 	.word	0x20008000
 800abc4:	08014bf0 	.word	0x08014bf0
 800abc8:	200008e8 	.word	0x200008e8

0800abcc <CheckForClassBCollision>:
{
 800abcc:	b508      	push	{r3, lr}
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800abce:	f002 f98c 	bl	800ceea <LoRaMacClassBIsBeaconExpected>
 800abd2:	b978      	cbnz	r0, 800abf4 <CheckForClassBCollision+0x28>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800abd4:	4b09      	ldr	r3, [pc, #36]	; (800abfc <CheckForClassBCollision+0x30>)
 800abd6:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800abda:	2b01      	cmp	r3, #1
 800abdc:	d001      	beq.n	800abe2 <CheckForClassBCollision+0x16>
    return LORAMAC_STATUS_OK;
 800abde:	2000      	movs	r0, #0
}
 800abe0:	bd08      	pop	{r3, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 800abe2:	f002 f984 	bl	800ceee <LoRaMacClassBIsPingExpected>
 800abe6:	b938      	cbnz	r0, 800abf8 <CheckForClassBCollision+0x2c>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800abe8:	f002 f983 	bl	800cef2 <LoRaMacClassBIsMulticastExpected>
 800abec:	2800      	cmp	r0, #0
 800abee:	d0f7      	beq.n	800abe0 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800abf0:	200f      	movs	r0, #15
 800abf2:	e7f5      	b.n	800abe0 <CheckForClassBCollision+0x14>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800abf4:	200e      	movs	r0, #14
 800abf6:	e7f3      	b.n	800abe0 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800abf8:	200f      	movs	r0, #15
 800abfa:	e7f1      	b.n	800abe0 <CheckForClassBCollision+0x14>
 800abfc:	20008000 	.word	0x20008000

0800ac00 <HandleRadioRxErrorTimeout>:
{
 800ac00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac02:	4605      	mov	r5, r0
 800ac04:	460c      	mov	r4, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800ac06:	4b37      	ldr	r3, [pc, #220]	; (800ace4 <HandleRadioRxErrorTimeout+0xe4>)
 800ac08:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800ac0c:	2b02      	cmp	r3, #2
 800ac0e:	d002      	beq.n	800ac16 <HandleRadioRxErrorTimeout+0x16>
        Radio.Sleep( );
 800ac10:	4b35      	ldr	r3, [pc, #212]	; (800ace8 <HandleRadioRxErrorTimeout+0xe8>)
 800ac12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac14:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800ac16:	f002 f968 	bl	800ceea <LoRaMacClassBIsBeaconExpected>
 800ac1a:	4606      	mov	r6, r0
 800ac1c:	bb00      	cbnz	r0, 800ac60 <HandleRadioRxErrorTimeout+0x60>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800ac1e:	4b31      	ldr	r3, [pc, #196]	; (800ace4 <HandleRadioRxErrorTimeout+0xe4>)
 800ac20:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800ac24:	2b01      	cmp	r3, #1
 800ac26:	d022      	beq.n	800ac6e <HandleRadioRxErrorTimeout+0x6e>
    if( classBRx == false )
 800ac28:	b9be      	cbnz	r6, 800ac5a <HandleRadioRxErrorTimeout+0x5a>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800ac2a:	4b30      	ldr	r3, [pc, #192]	; (800acec <HandleRadioRxErrorTimeout+0xec>)
 800ac2c:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d13f      	bne.n	800acb4 <HandleRadioRxErrorTimeout+0xb4>
            if( MacCtx.NodeAckRequested == true )
 800ac34:	4b2d      	ldr	r3, [pc, #180]	; (800acec <HandleRadioRxErrorTimeout+0xec>)
 800ac36:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800ac3a:	b113      	cbz	r3, 800ac42 <HandleRadioRxErrorTimeout+0x42>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800ac3c:	4b2b      	ldr	r3, [pc, #172]	; (800acec <HandleRadioRxErrorTimeout+0xec>)
 800ac3e:	f883 5439 	strb.w	r5, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800ac42:	4628      	mov	r0, r5
 800ac44:	f002 fba4 	bl	800d390 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800ac48:	4b26      	ldr	r3, [pc, #152]	; (800ace4 <HandleRadioRxErrorTimeout+0xe4>)
 800ac4a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800ac4c:	f008 fc20 	bl	8013490 <UTIL_TIMER_GetElapsedTime>
 800ac50:	4b26      	ldr	r3, [pc, #152]	; (800acec <HandleRadioRxErrorTimeout+0xec>)
 800ac52:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800ac56:	4298      	cmp	r0, r3
 800ac58:	d220      	bcs.n	800ac9c <HandleRadioRxErrorTimeout+0x9c>
    UpdateRxSlotIdleState( );
 800ac5a:	f7fe ff27 	bl	8009aac <UpdateRxSlotIdleState>
}
 800ac5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800ac60:	2002      	movs	r0, #2
 800ac62:	f002 f938 	bl	800ced6 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800ac66:	2000      	movs	r0, #0
 800ac68:	f002 f93a 	bl	800cee0 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800ac6c:	e7d7      	b.n	800ac1e <HandleRadioRxErrorTimeout+0x1e>
        if( LoRaMacClassBIsPingExpected( ) == true )
 800ac6e:	f002 f93e 	bl	800ceee <LoRaMacClassBIsPingExpected>
 800ac72:	4607      	mov	r7, r0
 800ac74:	b950      	cbnz	r0, 800ac8c <HandleRadioRxErrorTimeout+0x8c>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800ac76:	f002 f93c 	bl	800cef2 <LoRaMacClassBIsMulticastExpected>
 800ac7a:	2800      	cmp	r0, #0
 800ac7c:	d0d4      	beq.n	800ac28 <HandleRadioRxErrorTimeout+0x28>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ac7e:	2000      	movs	r0, #0
 800ac80:	f002 f92b 	bl	800ceda <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800ac84:	2000      	movs	r0, #0
 800ac86:	f002 f92d 	bl	800cee4 <LoRaMacClassBMulticastSlotTimerEvent>
    if( classBRx == false )
 800ac8a:	e7e6      	b.n	800ac5a <HandleRadioRxErrorTimeout+0x5a>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ac8c:	2000      	movs	r0, #0
 800ac8e:	f002 f923 	bl	800ced8 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800ac92:	2000      	movs	r0, #0
 800ac94:	f002 f925 	bl	800cee2 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800ac98:	463e      	mov	r6, r7
 800ac9a:	e7ec      	b.n	800ac76 <HandleRadioRxErrorTimeout+0x76>
                TimerStop( &MacCtx.RxWindowTimer2 );
 800ac9c:	4c13      	ldr	r4, [pc, #76]	; (800acec <HandleRadioRxErrorTimeout+0xec>)
 800ac9e:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800aca2:	f008 fc2b 	bl	80134fc <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800aca6:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 800acaa:	f043 0320 	orr.w	r3, r3, #32
 800acae:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
 800acb2:	e7d2      	b.n	800ac5a <HandleRadioRxErrorTimeout+0x5a>
            if( MacCtx.NodeAckRequested == true )
 800acb4:	4b0d      	ldr	r3, [pc, #52]	; (800acec <HandleRadioRxErrorTimeout+0xec>)
 800acb6:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800acba:	b113      	cbz	r3, 800acc2 <HandleRadioRxErrorTimeout+0xc2>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800acbc:	4b0b      	ldr	r3, [pc, #44]	; (800acec <HandleRadioRxErrorTimeout+0xec>)
 800acbe:	f883 4439 	strb.w	r4, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800acc2:	4620      	mov	r0, r4
 800acc4:	f002 fb64 	bl	800d390 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800acc8:	4b06      	ldr	r3, [pc, #24]	; (800ace4 <HandleRadioRxErrorTimeout+0xe4>)
 800acca:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800acce:	2b02      	cmp	r3, #2
 800acd0:	d0c3      	beq.n	800ac5a <HandleRadioRxErrorTimeout+0x5a>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800acd2:	4a06      	ldr	r2, [pc, #24]	; (800acec <HandleRadioRxErrorTimeout+0xec>)
 800acd4:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800acd8:	f043 0320 	orr.w	r3, r3, #32
 800acdc:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 800ace0:	e7bb      	b.n	800ac5a <HandleRadioRxErrorTimeout+0x5a>
 800ace2:	bf00      	nop
 800ace4:	20008000 	.word	0x20008000
 800ace8:	08014bf0 	.word	0x08014bf0
 800acec:	200008e8 	.word	0x200008e8

0800acf0 <ProcessRadioRxError>:
{
 800acf0:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800acf2:	2106      	movs	r1, #6
 800acf4:	2005      	movs	r0, #5
 800acf6:	f7ff ff83 	bl	800ac00 <HandleRadioRxErrorTimeout>
}
 800acfa:	bd08      	pop	{r3, pc}

0800acfc <ProcessRadioRxTimeout>:
{
 800acfc:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800acfe:	2104      	movs	r1, #4
 800ad00:	2003      	movs	r0, #3
 800ad02:	f7ff ff7d 	bl	800ac00 <HandleRadioRxErrorTimeout>
}
 800ad06:	bd08      	pop	{r3, pc}

0800ad08 <LoRaMacHandleIrqEvents>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad08:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ad0c:	b672      	cpsid	i
    events = LoRaMacRadioEvents;
 800ad0e:	4a14      	ldr	r2, [pc, #80]	; (800ad60 <LoRaMacHandleIrqEvents+0x58>)
 800ad10:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 800ad12:	2000      	movs	r0, #0
 800ad14:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad16:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 800ad1a:	b303      	cbz	r3, 800ad5e <LoRaMacHandleIrqEvents+0x56>
{
 800ad1c:	b510      	push	{r4, lr}
        if( events.Events.TxDone == 1 )
 800ad1e:	b2dc      	uxtb	r4, r3
 800ad20:	f013 0f10 	tst.w	r3, #16
 800ad24:	d10c      	bne.n	800ad40 <LoRaMacHandleIrqEvents+0x38>
        if( events.Events.RxDone == 1 )
 800ad26:	f014 0f08 	tst.w	r4, #8
 800ad2a:	d10c      	bne.n	800ad46 <LoRaMacHandleIrqEvents+0x3e>
        if( events.Events.TxTimeout == 1 )
 800ad2c:	f014 0f04 	tst.w	r4, #4
 800ad30:	d10c      	bne.n	800ad4c <LoRaMacHandleIrqEvents+0x44>
        if( events.Events.RxError == 1 )
 800ad32:	f014 0f02 	tst.w	r4, #2
 800ad36:	d10c      	bne.n	800ad52 <LoRaMacHandleIrqEvents+0x4a>
        if( events.Events.RxTimeout == 1 )
 800ad38:	f014 0f01 	tst.w	r4, #1
 800ad3c:	d10c      	bne.n	800ad58 <LoRaMacHandleIrqEvents+0x50>
}
 800ad3e:	bd10      	pop	{r4, pc}
            ProcessRadioTxDone( );
 800ad40:	f7ff f83a 	bl	8009db8 <ProcessRadioTxDone>
 800ad44:	e7ef      	b.n	800ad26 <LoRaMacHandleIrqEvents+0x1e>
            ProcessRadioRxDone( );
 800ad46:	f7ff fc33 	bl	800a5b0 <ProcessRadioRxDone>
 800ad4a:	e7ef      	b.n	800ad2c <LoRaMacHandleIrqEvents+0x24>
            ProcessRadioTxTimeout( );
 800ad4c:	f7ff ff18 	bl	800ab80 <ProcessRadioTxTimeout>
 800ad50:	e7ef      	b.n	800ad32 <LoRaMacHandleIrqEvents+0x2a>
            ProcessRadioRxError( );
 800ad52:	f7ff ffcd 	bl	800acf0 <ProcessRadioRxError>
 800ad56:	e7ef      	b.n	800ad38 <LoRaMacHandleIrqEvents+0x30>
            ProcessRadioRxTimeout( );
 800ad58:	f7ff ffd0 	bl	800acfc <ProcessRadioRxTimeout>
}
 800ad5c:	e7ef      	b.n	800ad3e <LoRaMacHandleIrqEvents+0x36>
 800ad5e:	4770      	bx	lr
 800ad60:	200008e4 	.word	0x200008e4

0800ad64 <LoRaMacHandleMlmeRequest>:
{
 800ad64:	b508      	push	{r3, lr}
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800ad66:	4b16      	ldr	r3, [pc, #88]	; (800adc0 <LoRaMacHandleMlmeRequest+0x5c>)
 800ad68:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800ad6c:	f013 0f04 	tst.w	r3, #4
 800ad70:	d100      	bne.n	800ad74 <LoRaMacHandleMlmeRequest+0x10>
}
 800ad72:	bd08      	pop	{r3, pc}
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800ad74:	2001      	movs	r0, #1
 800ad76:	f002 fb29 	bl	800d3cc <LoRaMacConfirmQueueIsCmdActive>
 800ad7a:	b178      	cbz	r0, 800ad9c <LoRaMacHandleMlmeRequest+0x38>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800ad7c:	2001      	movs	r0, #1
 800ad7e:	f002 faef 	bl	800d360 <LoRaMacConfirmQueueGetStatus>
 800ad82:	b918      	cbnz	r0, 800ad8c <LoRaMacHandleMlmeRequest+0x28>
                MacCtx.ChannelsNbTransCounter = 0;
 800ad84:	4b0e      	ldr	r3, [pc, #56]	; (800adc0 <LoRaMacHandleMlmeRequest+0x5c>)
 800ad86:	2200      	movs	r2, #0
 800ad88:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800ad8c:	4a0c      	ldr	r2, [pc, #48]	; (800adc0 <LoRaMacHandleMlmeRequest+0x5c>)
 800ad8e:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800ad92:	f023 0302 	bic.w	r3, r3, #2
 800ad96:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
 800ad9a:	e7ea      	b.n	800ad72 <LoRaMacHandleMlmeRequest+0xe>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800ad9c:	2005      	movs	r0, #5
 800ad9e:	f002 fb15 	bl	800d3cc <LoRaMacConfirmQueueIsCmdActive>
 800ada2:	b138      	cbz	r0, 800adb4 <LoRaMacHandleMlmeRequest+0x50>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800ada4:	4a06      	ldr	r2, [pc, #24]	; (800adc0 <LoRaMacHandleMlmeRequest+0x5c>)
 800ada6:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800adaa:	f023 0302 	bic.w	r3, r3, #2
 800adae:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800adb2:	e7de      	b.n	800ad72 <LoRaMacHandleMlmeRequest+0xe>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800adb4:	2006      	movs	r0, #6
 800adb6:	f002 fb09 	bl	800d3cc <LoRaMacConfirmQueueIsCmdActive>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800adba:	2800      	cmp	r0, #0
 800adbc:	d0d9      	beq.n	800ad72 <LoRaMacHandleMlmeRequest+0xe>
 800adbe:	e7f1      	b.n	800ada4 <LoRaMacHandleMlmeRequest+0x40>
 800adc0:	200008e8 	.word	0x200008e8

0800adc4 <AckTimeoutRetriesFinalize>:
    if( MacCtx.McpsConfirm.AckReceived == false )
 800adc4:	4b14      	ldr	r3, [pc, #80]	; (800ae18 <AckTimeoutRetriesFinalize+0x54>)
 800adc6:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800adca:	b12b      	cbz	r3, 800add8 <AckTimeoutRetriesFinalize+0x14>
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800adcc:	4b12      	ldr	r3, [pc, #72]	; (800ae18 <AckTimeoutRetriesFinalize+0x54>)
 800adce:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 800add2:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
 800add6:	4770      	bx	lr
{
 800add8:	b500      	push	{lr}
 800adda:	b085      	sub	sp, #20
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800addc:	2302      	movs	r3, #2
 800adde:	f88d 300c 	strb.w	r3, [sp, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 800ade2:	4b0e      	ldr	r3, [pc, #56]	; (800ae1c <AckTimeoutRetriesFinalize+0x58>)
 800ade4:	f503 72f0 	add.w	r2, r3, #480	; 0x1e0
 800ade8:	9201      	str	r2, [sp, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 800adea:	f503 7221 	add.w	r2, r3, #644	; 0x284
 800adee:	9202      	str	r2, [sp, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800adf0:	a901      	add	r1, sp, #4
 800adf2:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800adf6:	f003 f87a 	bl	800deee <RegionInitDefaults>
        MacCtx.NodeAckRequested = false;
 800adfa:	4b07      	ldr	r3, [pc, #28]	; (800ae18 <AckTimeoutRetriesFinalize+0x54>)
 800adfc:	2200      	movs	r2, #0
 800adfe:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        MacCtx.McpsConfirm.AckReceived = false;
 800ae02:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800ae06:	4b04      	ldr	r3, [pc, #16]	; (800ae18 <AckTimeoutRetriesFinalize+0x54>)
 800ae08:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 800ae0c:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
}
 800ae10:	b005      	add	sp, #20
 800ae12:	f85d fb04 	ldr.w	pc, [sp], #4
 800ae16:	bf00      	nop
 800ae18:	200008e8 	.word	0x200008e8
 800ae1c:	20008000 	.word	0x20008000

0800ae20 <SerializeTxFrame>:
{
 800ae20:	b508      	push	{r3, lr}
    switch( MacCtx.TxMsg.Type )
 800ae22:	4b0f      	ldr	r3, [pc, #60]	; (800ae60 <SerializeTxFrame+0x40>)
 800ae24:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800ae28:	b11b      	cbz	r3, 800ae32 <SerializeTxFrame+0x12>
 800ae2a:	2b04      	cmp	r3, #4
 800ae2c:	d00a      	beq.n	800ae44 <SerializeTxFrame+0x24>
 800ae2e:	2003      	movs	r0, #3
}
 800ae30:	bd08      	pop	{r3, pc}
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800ae32:	480c      	ldr	r0, [pc, #48]	; (800ae64 <SerializeTxFrame+0x44>)
 800ae34:	f002 ff7f 	bl	800dd36 <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800ae38:	b968      	cbnz	r0, 800ae56 <SerializeTxFrame+0x36>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800ae3a:	4b09      	ldr	r3, [pc, #36]	; (800ae60 <SerializeTxFrame+0x40>)
 800ae3c:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800ae40:	801a      	strh	r2, [r3, #0]
            break;
 800ae42:	e7f5      	b.n	800ae30 <SerializeTxFrame+0x10>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800ae44:	4807      	ldr	r0, [pc, #28]	; (800ae64 <SerializeTxFrame+0x44>)
 800ae46:	f002 ffac 	bl	800dda2 <LoRaMacSerializerData>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800ae4a:	b930      	cbnz	r0, 800ae5a <SerializeTxFrame+0x3a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800ae4c:	4b04      	ldr	r3, [pc, #16]	; (800ae60 <SerializeTxFrame+0x40>)
 800ae4e:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800ae52:	801a      	strh	r2, [r3, #0]
            break;
 800ae54:	e7ec      	b.n	800ae30 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800ae56:	2011      	movs	r0, #17
 800ae58:	e7ea      	b.n	800ae30 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800ae5a:	2011      	movs	r0, #17
 800ae5c:	e7e8      	b.n	800ae30 <SerializeTxFrame+0x10>
 800ae5e:	bf00      	nop
 800ae60:	200008e8 	.word	0x200008e8
 800ae64:	200009f0 	.word	0x200009f0

0800ae68 <ComputeRxWindowParameters>:
{
 800ae68:	b570      	push	{r4, r5, r6, lr}
 800ae6a:	b082      	sub	sp, #8
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800ae6c:	4c1d      	ldr	r4, [pc, #116]	; (800aee4 <ComputeRxWindowParameters+0x7c>)
 800ae6e:	f894 6040 	ldrb.w	r6, [r4, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800ae72:	f994 3061 	ldrsb.w	r3, [r4, #97]	; 0x61
 800ae76:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
 800ae7a:	f894 1075 	ldrb.w	r1, [r4, #117]	; 0x75
 800ae7e:	4630      	mov	r0, r6
 800ae80:	f003 f932 	bl	800e0e8 <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800ae84:	4d18      	ldr	r5, [pc, #96]	; (800aee8 <ComputeRxWindowParameters+0x80>)
 800ae86:	f505 736e 	add.w	r3, r5, #952	; 0x3b8
 800ae8a:	9300      	str	r3, [sp, #0]
 800ae8c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ae8e:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800ae92:	b241      	sxtb	r1, r0
 800ae94:	4630      	mov	r0, r6
 800ae96:	f003 f865 	bl	800df64 <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800ae9a:	f505 7373 	add.w	r3, r5, #972	; 0x3cc
 800ae9e:	9300      	str	r3, [sp, #0]
 800aea0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800aea2:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800aea6:	f994 1068 	ldrsb.w	r1, [r4, #104]	; 0x68
 800aeaa:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800aeae:	f003 f859 	bl	800df64 <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800aeb2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800aeb4:	f8d5 13c4 	ldr.w	r1, [r5, #964]	; 0x3c4
 800aeb8:	440b      	add	r3, r1
 800aeba:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800aebe:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800aec0:	f8d5 23d8 	ldr.w	r2, [r5, #984]	; 0x3d8
 800aec4:	4413      	add	r3, r2
 800aec6:	f8c5 33b4 	str.w	r3, [r5, #948]	; 0x3b4
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800aeca:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
 800aece:	b93b      	cbnz	r3, 800aee0 <ComputeRxWindowParameters+0x78>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800aed0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aed2:	4419      	add	r1, r3
 800aed4:	f8c5 13b0 	str.w	r1, [r5, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800aed8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800aeda:	440a      	add	r2, r1
 800aedc:	f8c5 23b4 	str.w	r2, [r5, #948]	; 0x3b4
}
 800aee0:	b002      	add	sp, #8
 800aee2:	bd70      	pop	{r4, r5, r6, pc}
 800aee4:	20008000 	.word	0x20008000
 800aee8:	200008e8 	.word	0x200008e8

0800aeec <VerifyTxFrame>:
{
 800aeec:	b510      	push	{r4, lr}
 800aeee:	b082      	sub	sp, #8
    size_t macCmdsSize = 0;
 800aef0:	2300      	movs	r3, #0
 800aef2:	9301      	str	r3, [sp, #4]
    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800aef4:	4b0d      	ldr	r3, [pc, #52]	; (800af2c <VerifyTxFrame+0x40>)
 800aef6:	f893 4118 	ldrb.w	r4, [r3, #280]	; 0x118
 800aefa:	b914      	cbnz	r4, 800af02 <VerifyTxFrame+0x16>
}
 800aefc:	4620      	mov	r0, r4
 800aefe:	b002      	add	sp, #8
 800af00:	bd10      	pop	{r4, pc}
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800af02:	a801      	add	r0, sp, #4
 800af04:	f002 f912 	bl	800d12c <LoRaMacCommandsGetSizeSerializedCmds>
 800af08:	4604      	mov	r4, r0
 800af0a:	b968      	cbnz	r0, 800af28 <VerifyTxFrame+0x3c>
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800af0c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800af10:	4b06      	ldr	r3, [pc, #24]	; (800af2c <VerifyTxFrame+0x40>)
 800af12:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800af16:	4b06      	ldr	r3, [pc, #24]	; (800af30 <VerifyTxFrame+0x44>)
 800af18:	f893 0237 	ldrb.w	r0, [r3, #567]	; 0x237
 800af1c:	f7fe ff3a 	bl	8009d94 <ValidatePayloadLength>
 800af20:	2800      	cmp	r0, #0
 800af22:	d1eb      	bne.n	800aefc <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_LENGTH_ERROR;
 800af24:	2408      	movs	r4, #8
 800af26:	e7e9      	b.n	800aefc <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800af28:	2413      	movs	r4, #19
 800af2a:	e7e7      	b.n	800aefc <VerifyTxFrame+0x10>
 800af2c:	20008000 	.word	0x20008000
 800af30:	200008e8 	.word	0x200008e8

0800af34 <SecureFrame>:
{
 800af34:	b530      	push	{r4, r5, lr}
 800af36:	b083      	sub	sp, #12
    uint32_t fCntUp = 0;
 800af38:	2300      	movs	r3, #0
 800af3a:	9301      	str	r3, [sp, #4]
    switch( MacCtx.TxMsg.Type )
 800af3c:	4b1a      	ldr	r3, [pc, #104]	; (800afa8 <SecureFrame+0x74>)
 800af3e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800af42:	b133      	cbz	r3, 800af52 <SecureFrame+0x1e>
 800af44:	4605      	mov	r5, r0
 800af46:	460c      	mov	r4, r1
 800af48:	2b04      	cmp	r3, #4
 800af4a:	d00b      	beq.n	800af64 <SecureFrame+0x30>
 800af4c:	2003      	movs	r0, #3
}
 800af4e:	b003      	add	sp, #12
 800af50:	bd30      	pop	{r4, r5, pc}
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800af52:	4816      	ldr	r0, [pc, #88]	; (800afac <SecureFrame+0x78>)
 800af54:	f002 fcae 	bl	800d8b4 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800af58:	bb00      	cbnz	r0, 800af9c <SecureFrame+0x68>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800af5a:	4b13      	ldr	r3, [pc, #76]	; (800afa8 <SecureFrame+0x74>)
 800af5c:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800af60:	801a      	strh	r2, [r3, #0]
            break;
 800af62:	e7f4      	b.n	800af4e <SecureFrame+0x1a>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800af64:	a801      	add	r0, sp, #4
 800af66:	f002 fc47 	bl	800d7f8 <LoRaMacCryptoGetFCntUp>
 800af6a:	b9c8      	cbnz	r0, 800afa0 <SecureFrame+0x6c>
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 800af6c:	4b0e      	ldr	r3, [pc, #56]	; (800afa8 <SecureFrame+0x74>)
 800af6e:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800af72:	b923      	cbnz	r3, 800af7e <SecureFrame+0x4a>
 800af74:	4b0c      	ldr	r3, [pc, #48]	; (800afa8 <SecureFrame+0x74>)
 800af76:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 800af7a:	2b01      	cmp	r3, #1
 800af7c:	d902      	bls.n	800af84 <SecureFrame+0x50>
                fCntUp -= 1;
 800af7e:	9b01      	ldr	r3, [sp, #4]
 800af80:	3b01      	subs	r3, #1
 800af82:	9301      	str	r3, [sp, #4]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800af84:	4b09      	ldr	r3, [pc, #36]	; (800afac <SecureFrame+0x78>)
 800af86:	4622      	mov	r2, r4
 800af88:	4629      	mov	r1, r5
 800af8a:	9801      	ldr	r0, [sp, #4]
 800af8c:	f002 fcbe 	bl	800d90c <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800af90:	b940      	cbnz	r0, 800afa4 <SecureFrame+0x70>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800af92:	4b05      	ldr	r3, [pc, #20]	; (800afa8 <SecureFrame+0x74>)
 800af94:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800af98:	801a      	strh	r2, [r3, #0]
            break;
 800af9a:	e7d8      	b.n	800af4e <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800af9c:	2011      	movs	r0, #17
 800af9e:	e7d6      	b.n	800af4e <SecureFrame+0x1a>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800afa0:	2012      	movs	r0, #18
 800afa2:	e7d4      	b.n	800af4e <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800afa4:	2011      	movs	r0, #17
 800afa6:	e7d2      	b.n	800af4e <SecureFrame+0x1a>
 800afa8:	200008e8 	.word	0x200008e8
 800afac:	200009f0 	.word	0x200009f0

0800afb0 <SendFrameOnChannel>:
{
 800afb0:	b570      	push	{r4, r5, r6, lr}
 800afb2:	b086      	sub	sp, #24
 800afb4:	4606      	mov	r6, r0
    int8_t txPower = 0;
 800afb6:	2300      	movs	r3, #0
 800afb8:	f88d 3007 	strb.w	r3, [sp, #7]
    txConfig.Channel = channel;
 800afbc:	f88d 0008 	strb.w	r0, [sp, #8]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800afc0:	4d33      	ldr	r5, [pc, #204]	; (800b090 <SendFrameOnChannel+0xe0>)
 800afc2:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
 800afc6:	f88d 3009 	strb.w	r3, [sp, #9]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800afca:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
 800afce:	f88d 300a 	strb.w	r3, [sp, #10]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800afd2:	6fab      	ldr	r3, [r5, #120]	; 0x78
 800afd4:	9303      	str	r3, [sp, #12]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800afd6:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800afd8:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800afda:	4c2e      	ldr	r4, [pc, #184]	; (800b094 <SendFrameOnChannel+0xe4>)
 800afdc:	8823      	ldrh	r3, [r4, #0]
 800afde:	f8ad 3014 	strh.w	r3, [sp, #20]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800afe2:	f504 6383 	add.w	r3, r4, #1048	; 0x418
 800afe6:	f10d 0207 	add.w	r2, sp, #7
 800afea:	a902      	add	r1, sp, #8
 800afec:	f895 0040 	ldrb.w	r0, [r5, #64]	; 0x40
 800aff0:	f002 ffdc 	bl	800dfac <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800aff4:	2301      	movs	r3, #1
 800aff6:	f884 3439 	strb.w	r3, [r4, #1081]	; 0x439
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800affa:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
 800affe:	f884 343a 	strb.w	r3, [r4, #1082]	; 0x43a
    MacCtx.McpsConfirm.TxPower = txPower;
 800b002:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b006:	f884 343b 	strb.w	r3, [r4, #1083]	; 0x43b
    MacCtx.McpsConfirm.Channel = channel;
 800b00a:	f8c4 6448 	str.w	r6, [r4, #1096]	; 0x448
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800b00e:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
 800b012:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800b016:	f8c4 3450 	str.w	r3, [r4, #1104]	; 0x450
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800b01a:	f001 ff6c 	bl	800cef6 <LoRaMacClassBIsBeaconModeActive>
 800b01e:	bb58      	cbnz	r0, 800b078 <SendFrameOnChannel+0xc8>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800b020:	4b1b      	ldr	r3, [pc, #108]	; (800b090 <SendFrameOnChannel+0xe0>)
 800b022:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800b026:	2b01      	cmp	r3, #1
 800b028:	d02e      	beq.n	800b088 <SendFrameOnChannel+0xd8>
    LoRaMacClassBHaltBeaconing( );
 800b02a:	f001 ff67 	bl	800cefc <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 800b02e:	4b18      	ldr	r3, [pc, #96]	; (800b090 <SendFrameOnChannel+0xe0>)
 800b030:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 800b034:	4b17      	ldr	r3, [pc, #92]	; (800b094 <SendFrameOnChannel+0xe4>)
 800b036:	f893 1415 	ldrb.w	r1, [r3, #1045]	; 0x415
 800b03a:	b2c0      	uxtb	r0, r0
 800b03c:	f7ff ff7a 	bl	800af34 <SecureFrame>
    if( status != LORAMAC_STATUS_OK )
 800b040:	4604      	mov	r4, r0
 800b042:	b9b0      	cbnz	r0, 800b072 <SendFrameOnChannel+0xc2>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800b044:	4b13      	ldr	r3, [pc, #76]	; (800b094 <SendFrameOnChannel+0xe4>)
 800b046:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800b04a:	f042 0202 	orr.w	r2, r2, #2
 800b04e:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
 800b052:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800b056:	b92b      	cbnz	r3, 800b064 <SendFrameOnChannel+0xb4>
        MacCtx.ChannelsNbTransCounter++;
 800b058:	4a0e      	ldr	r2, [pc, #56]	; (800b094 <SendFrameOnChannel+0xe4>)
 800b05a:	f892 3410 	ldrb.w	r3, [r2, #1040]	; 0x410
 800b05e:	3301      	adds	r3, #1
 800b060:	f882 3410 	strb.w	r3, [r2, #1040]	; 0x410
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800b064:	4b0c      	ldr	r3, [pc, #48]	; (800b098 <SendFrameOnChannel+0xe8>)
 800b066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b068:	480a      	ldr	r0, [pc, #40]	; (800b094 <SendFrameOnChannel+0xe4>)
 800b06a:	f830 1b02 	ldrh.w	r1, [r0], #2
 800b06e:	b2c9      	uxtb	r1, r1
 800b070:	4798      	blx	r3
}
 800b072:	4620      	mov	r0, r4
 800b074:	b006      	add	sp, #24
 800b076:	bd70      	pop	{r4, r5, r6, pc}
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800b078:	f8d4 0418 	ldr.w	r0, [r4, #1048]	; 0x418
 800b07c:	f001 ff4d 	bl	800cf1a <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 800b080:	2800      	cmp	r0, #0
 800b082:	d0cd      	beq.n	800b020 <SendFrameOnChannel+0x70>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800b084:	2410      	movs	r4, #16
 800b086:	e7f4      	b.n	800b072 <SendFrameOnChannel+0xc2>
        LoRaMacClassBStopRxSlots( );
 800b088:	f001 ff49 	bl	800cf1e <LoRaMacClassBStopRxSlots>
 800b08c:	e7cd      	b.n	800b02a <SendFrameOnChannel+0x7a>
 800b08e:	bf00      	nop
 800b090:	20008000 	.word	0x20008000
 800b094:	200008e8 	.word	0x200008e8
 800b098:	08014bf0 	.word	0x08014bf0

0800b09c <ScheduleTx>:
{
 800b09c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0a0:	b08c      	sub	sp, #48	; 0x30
 800b0a2:	4605      	mov	r5, r0
    status = CheckForClassBCollision( );
 800b0a4:	f7ff fd92 	bl	800abcc <CheckForClassBCollision>
    if( status != LORAMAC_STATUS_OK )
 800b0a8:	4604      	mov	r4, r0
 800b0aa:	b118      	cbz	r0, 800b0b4 <ScheduleTx+0x18>
}
 800b0ac:	4620      	mov	r0, r4
 800b0ae:	b00c      	add	sp, #48	; 0x30
 800b0b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CalculateBackOff( );
 800b0b4:	f7fe fd54 	bl	8009b60 <CalculateBackOff>
    status = SerializeTxFrame( );
 800b0b8:	f7ff feb2 	bl	800ae20 <SerializeTxFrame>
    if( status != LORAMAC_STATUS_OK )
 800b0bc:	4604      	mov	r4, r0
 800b0be:	2800      	cmp	r0, #0
 800b0c0:	d1f4      	bne.n	800b0ac <ScheduleTx+0x10>
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800b0c2:	4e36      	ldr	r6, [pc, #216]	; (800b19c <ScheduleTx+0x100>)
 800b0c4:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800b0c6:	9304      	str	r3, [sp, #16]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800b0c8:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 800b0cc:	f88d 3018 	strb.w	r3, [sp, #24]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800b0d0:	f896 3108 	ldrb.w	r3, [r6, #264]	; 0x108
 800b0d4:	f88d 301a 	strb.w	r3, [sp, #26]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800b0d8:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800b0dc:	4640      	mov	r0, r8
 800b0de:	f008 f941 	bl	8013364 <SysTimeGetMcuTime>
 800b0e2:	af02      	add	r7, sp, #8
 800b0e4:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
 800b0e8:	9300      	str	r3, [sp, #0]
 800b0ea:	f8d6 310c 	ldr.w	r3, [r6, #268]	; 0x10c
 800b0ee:	e898 0006 	ldmia.w	r8, {r1, r2}
 800b0f2:	4638      	mov	r0, r7
 800b0f4:	f008 f8d3 	bl	801329e <SysTimeSub>
 800b0f8:	ab07      	add	r3, sp, #28
 800b0fa:	e897 0003 	ldmia.w	r7, {r0, r1}
 800b0fe:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800b102:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800b104:	9305      	str	r3, [sp, #20]
    nextChan.LastTxIsJoinRequest = false;
 800b106:	2300      	movs	r3, #0
 800b108:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    nextChan.Joined = true;
 800b10c:	2301      	movs	r3, #1
 800b10e:	f88d 3019 	strb.w	r3, [sp, #25]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800b112:	4b23      	ldr	r3, [pc, #140]	; (800b1a0 <ScheduleTx+0x104>)
 800b114:	881b      	ldrh	r3, [r3, #0]
 800b116:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800b11a:	f896 3118 	ldrb.w	r3, [r6, #280]	; 0x118
 800b11e:	b92b      	cbnz	r3, 800b12c <ScheduleTx+0x90>
        nextChan.LastTxIsJoinRequest = true;
 800b120:	2301      	movs	r3, #1
 800b122:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        nextChan.Joined = false;
 800b126:	2300      	movs	r3, #0
 800b128:	f88d 3019 	strb.w	r3, [sp, #25]
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800b12c:	4a1c      	ldr	r2, [pc, #112]	; (800b1a0 <ScheduleTx+0x104>)
 800b12e:	481b      	ldr	r0, [pc, #108]	; (800b19c <ScheduleTx+0x100>)
 800b130:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b134:	9300      	str	r3, [sp, #0]
 800b136:	f502 6391 	add.w	r3, r2, #1160	; 0x488
 800b13a:	f202 4215 	addw	r2, r2, #1045	; 0x415
 800b13e:	a904      	add	r1, sp, #16
 800b140:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 800b144:	f002 ffad 	bl	800e0a2 <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 800b148:	b1b0      	cbz	r0, 800b178 <ScheduleTx+0xdc>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 800b14a:	280b      	cmp	r0, #11
 800b14c:	d122      	bne.n	800b194 <ScheduleTx+0xf8>
 800b14e:	b31d      	cbz	r5, 800b198 <ScheduleTx+0xfc>
            if( MacCtx.DutyCycleWaitTime != 0 )
 800b150:	4b13      	ldr	r3, [pc, #76]	; (800b1a0 <ScheduleTx+0x104>)
 800b152:	f8d3 1488 	ldr.w	r1, [r3, #1160]	; 0x488
 800b156:	2900      	cmp	r1, #0
 800b158:	d0a8      	beq.n	800b0ac <ScheduleTx+0x10>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800b15a:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800b15e:	f042 0220 	orr.w	r2, r2, #32
 800b162:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800b166:	f503 755a 	add.w	r5, r3, #872	; 0x368
 800b16a:	4628      	mov	r0, r5
 800b16c:	f008 fa66 	bl	801363c <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 800b170:	4628      	mov	r0, r5
 800b172:	f008 fa1d 	bl	80135b0 <UTIL_TIMER_Start>
            return LORAMAC_STATUS_OK;
 800b176:	e799      	b.n	800b0ac <ScheduleTx+0x10>
    ComputeRxWindowParameters( );
 800b178:	f7ff fe76 	bl	800ae68 <ComputeRxWindowParameters>
    status = VerifyTxFrame( );
 800b17c:	f7ff feb6 	bl	800aeec <VerifyTxFrame>
    if( status != LORAMAC_STATUS_OK )
 800b180:	4604      	mov	r4, r0
 800b182:	2800      	cmp	r0, #0
 800b184:	d192      	bne.n	800b0ac <ScheduleTx+0x10>
    return SendFrameOnChannel( MacCtx.Channel );
 800b186:	4b06      	ldr	r3, [pc, #24]	; (800b1a0 <ScheduleTx+0x104>)
 800b188:	f893 0415 	ldrb.w	r0, [r3, #1045]	; 0x415
 800b18c:	f7ff ff10 	bl	800afb0 <SendFrameOnChannel>
 800b190:	4604      	mov	r4, r0
 800b192:	e78b      	b.n	800b0ac <ScheduleTx+0x10>
            return status;
 800b194:	4604      	mov	r4, r0
 800b196:	e789      	b.n	800b0ac <ScheduleTx+0x10>
 800b198:	4604      	mov	r4, r0
 800b19a:	e787      	b.n	800b0ac <ScheduleTx+0x10>
 800b19c:	20008000 	.word	0x20008000
 800b1a0:	200008e8 	.word	0x200008e8

0800b1a4 <OnTxDelayedTimerEvent>:
{
 800b1a4:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 800b1a6:	4c11      	ldr	r4, [pc, #68]	; (800b1ec <OnTxDelayedTimerEvent+0x48>)
 800b1a8:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800b1ac:	f008 f9a6 	bl	80134fc <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800b1b0:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800b1b4:	f023 0320 	bic.w	r3, r3, #32
 800b1b8:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    switch( ScheduleTx( true ) )
 800b1bc:	2001      	movs	r0, #1
 800b1be:	f7ff ff6d 	bl	800b09c <ScheduleTx>
 800b1c2:	b108      	cbz	r0, 800b1c8 <OnTxDelayedTimerEvent+0x24>
 800b1c4:	280b      	cmp	r0, #11
 800b1c6:	d100      	bne.n	800b1ca <OnTxDelayedTimerEvent+0x26>
}
 800b1c8:	bd10      	pop	{r4, pc}
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800b1ca:	4b09      	ldr	r3, [pc, #36]	; (800b1f0 <OnTxDelayedTimerEvent+0x4c>)
 800b1cc:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800b1d0:	f884 243a 	strb.w	r2, [r4, #1082]	; 0x43a
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800b1d4:	f894 2412 	ldrb.w	r2, [r4, #1042]	; 0x412
 800b1d8:	f884 243d 	strb.w	r2, [r4, #1085]	; 0x43d
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800b1dc:	2009      	movs	r0, #9
 800b1de:	f884 0439 	strb.w	r0, [r4, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800b1e2:	f002 f8d5 	bl	800d390 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800b1e6:	f7fe fd49 	bl	8009c7c <StopRetransmission>
}
 800b1ea:	e7ed      	b.n	800b1c8 <OnTxDelayedTimerEvent+0x24>
 800b1ec:	200008e8 	.word	0x200008e8
 800b1f0:	20008000 	.word	0x20008000

0800b1f4 <LoRaMacHandleMcpsRequest>:
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800b1f4:	4b23      	ldr	r3, [pc, #140]	; (800b284 <LoRaMacHandleMcpsRequest+0x90>)
 800b1f6:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800b1fa:	f013 0f01 	tst.w	r3, #1
 800b1fe:	d040      	beq.n	800b282 <LoRaMacHandleMcpsRequest+0x8e>
{
 800b200:	b510      	push	{r4, lr}
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800b202:	4b20      	ldr	r3, [pc, #128]	; (800b284 <LoRaMacHandleMcpsRequest+0x90>)
 800b204:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800b208:	b12b      	cbz	r3, 800b216 <LoRaMacHandleMcpsRequest+0x22>
 800b20a:	2b03      	cmp	r3, #3
 800b20c:	d003      	beq.n	800b216 <LoRaMacHandleMcpsRequest+0x22>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800b20e:	2b01      	cmp	r3, #1
 800b210:	d007      	beq.n	800b222 <LoRaMacHandleMcpsRequest+0x2e>
        bool waitForRetransmission = false;
 800b212:	2400      	movs	r4, #0
 800b214:	e003      	b.n	800b21e <LoRaMacHandleMcpsRequest+0x2a>
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800b216:	f7fe fcf5 	bl	8009c04 <CheckRetransUnconfirmedUplink>
 800b21a:	4604      	mov	r4, r0
        if( stopRetransmission == true )
 800b21c:	b9a4      	cbnz	r4, 800b248 <LoRaMacHandleMcpsRequest+0x54>
        else if( waitForRetransmission == false )
 800b21e:	b31c      	cbz	r4, 800b268 <LoRaMacHandleMcpsRequest+0x74>
}
 800b220:	bd10      	pop	{r4, pc}
            if( MacCtx.AckTimeoutRetry == true )
 800b222:	4b18      	ldr	r3, [pc, #96]	; (800b284 <LoRaMacHandleMcpsRequest+0x90>)
 800b224:	f893 3413 	ldrb.w	r3, [r3, #1043]	; 0x413
 800b228:	b1e3      	cbz	r3, 800b264 <LoRaMacHandleMcpsRequest+0x70>
                stopRetransmission = CheckRetransConfirmedUplink( );
 800b22a:	f7fe fd0f 	bl	8009c4c <CheckRetransConfirmedUplink>
 800b22e:	4604      	mov	r4, r0
                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800b230:	4b15      	ldr	r3, [pc, #84]	; (800b288 <LoRaMacHandleMcpsRequest+0x94>)
 800b232:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 800b236:	2b00      	cmp	r3, #0
 800b238:	d1f0      	bne.n	800b21c <LoRaMacHandleMcpsRequest+0x28>
                    if( stopRetransmission == false )
 800b23a:	b910      	cbnz	r0, 800b242 <LoRaMacHandleMcpsRequest+0x4e>
                        AckTimeoutRetriesProcess( );
 800b23c:	f7fe fd5e 	bl	8009cfc <AckTimeoutRetriesProcess>
 800b240:	e7ec      	b.n	800b21c <LoRaMacHandleMcpsRequest+0x28>
                        AckTimeoutRetriesFinalize( );
 800b242:	f7ff fdbf 	bl	800adc4 <AckTimeoutRetriesFinalize>
 800b246:	e7e9      	b.n	800b21c <LoRaMacHandleMcpsRequest+0x28>
            TimerStop( &MacCtx.TxDelayedTimer );
 800b248:	4c0e      	ldr	r4, [pc, #56]	; (800b284 <LoRaMacHandleMcpsRequest+0x90>)
 800b24a:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800b24e:	f008 f955 	bl	80134fc <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800b252:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800b256:	f023 0320 	bic.w	r3, r3, #32
 800b25a:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
            StopRetransmission( );
 800b25e:	f7fe fd0d 	bl	8009c7c <StopRetransmission>
 800b262:	e7dd      	b.n	800b220 <LoRaMacHandleMcpsRequest+0x2c>
                waitForRetransmission = true;
 800b264:	2401      	movs	r4, #1
 800b266:	e7da      	b.n	800b21e <LoRaMacHandleMcpsRequest+0x2a>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800b268:	4b06      	ldr	r3, [pc, #24]	; (800b284 <LoRaMacHandleMcpsRequest+0x90>)
 800b26a:	f893 2485 	ldrb.w	r2, [r3, #1157]	; 0x485
 800b26e:	f36f 1245 	bfc	r2, #5, #1
 800b272:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
            MacCtx.AckTimeoutRetry = false;
 800b276:	2000      	movs	r0, #0
 800b278:	f883 0413 	strb.w	r0, [r3, #1043]	; 0x413
            OnTxDelayedTimerEvent( NULL );
 800b27c:	f7ff ff92 	bl	800b1a4 <OnTxDelayedTimerEvent>
}
 800b280:	e7ce      	b.n	800b220 <LoRaMacHandleMcpsRequest+0x2c>
 800b282:	4770      	bx	lr
 800b284:	200008e8 	.word	0x200008e8
 800b288:	20008000 	.word	0x20008000

0800b28c <LoRaMacHandleRequestEvents>:
{
 800b28c:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState == LORAMAC_IDLE )
 800b28e:	4b22      	ldr	r3, [pc, #136]	; (800b318 <LoRaMacHandleRequestEvents+0x8c>)
 800b290:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800b294:	bb7b      	cbnz	r3, 800b2f6 <LoRaMacHandleRequestEvents+0x6a>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800b296:	4b20      	ldr	r3, [pc, #128]	; (800b318 <LoRaMacHandleRequestEvents+0x8c>)
 800b298:	f893 4485 	ldrb.w	r4, [r3, #1157]	; 0x485
 800b29c:	f014 0501 	ands.w	r5, r4, #1
 800b2a0:	d005      	beq.n	800b2ae <LoRaMacHandleRequestEvents+0x22>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800b2a2:	f893 2485 	ldrb.w	r2, [r3, #1157]	; 0x485
 800b2a6:	f36f 0200 	bfc	r2, #0, #1
 800b2aa:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800b2ae:	4b1a      	ldr	r3, [pc, #104]	; (800b318 <LoRaMacHandleRequestEvents+0x8c>)
 800b2b0:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800b2b4:	f013 0f04 	tst.w	r3, #4
 800b2b8:	d006      	beq.n	800b2c8 <LoRaMacHandleRequestEvents+0x3c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800b2ba:	4b17      	ldr	r3, [pc, #92]	; (800b318 <LoRaMacHandleRequestEvents+0x8c>)
 800b2bc:	f893 2485 	ldrb.w	r2, [r3, #1157]	; 0x485
 800b2c0:	f36f 0282 	bfc	r2, #2, #1
 800b2c4:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800b2c8:	2001      	movs	r0, #1
 800b2ca:	f7fe fc03 	bl	8009ad4 <LoRaMacEnableRequests>
        if( reqEvents.Bits.McpsReq == 1 )
 800b2ce:	b135      	cbz	r5, 800b2de <LoRaMacHandleRequestEvents+0x52>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800b2d0:	4811      	ldr	r0, [pc, #68]	; (800b318 <LoRaMacHandleRequestEvents+0x8c>)
 800b2d2:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f500 6087 	add.w	r0, r0, #1080	; 0x438
 800b2dc:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 800b2de:	f014 0f04 	tst.w	r4, #4
 800b2e2:	d109      	bne.n	800b2f8 <LoRaMacHandleRequestEvents+0x6c>
        LoRaMacClassBResumeBeaconing( );
 800b2e4:	f001 fe0b 	bl	800cefe <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 800b2e8:	4b0b      	ldr	r3, [pc, #44]	; (800b318 <LoRaMacHandleRequestEvents+0x8c>)
 800b2ea:	f893 2485 	ldrb.w	r2, [r3, #1157]	; 0x485
 800b2ee:	f36f 1245 	bfc	r2, #5, #1
 800b2f2:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
}
 800b2f6:	bd38      	pop	{r3, r4, r5, pc}
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800b2f8:	4808      	ldr	r0, [pc, #32]	; (800b31c <LoRaMacHandleRequestEvents+0x90>)
 800b2fa:	f002 f873 	bl	800d3e4 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800b2fe:	f002 f8a3 	bl	800d448 <LoRaMacConfirmQueueGetCnt>
 800b302:	2800      	cmp	r0, #0
 800b304:	d0ee      	beq.n	800b2e4 <LoRaMacHandleRequestEvents+0x58>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800b306:	4a04      	ldr	r2, [pc, #16]	; (800b318 <LoRaMacHandleRequestEvents+0x8c>)
 800b308:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800b30c:	f043 0304 	orr.w	r3, r3, #4
 800b310:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 800b314:	e7e6      	b.n	800b2e4 <LoRaMacHandleRequestEvents+0x58>
 800b316:	bf00      	nop
 800b318:	200008e8 	.word	0x200008e8
 800b31c:	20000d34 	.word	0x20000d34

0800b320 <LoRaMacHandleScheduleUplinkEvent>:
    if( MacCtx.MacState == LORAMAC_IDLE )
 800b320:	4b07      	ldr	r3, [pc, #28]	; (800b340 <LoRaMacHandleScheduleUplinkEvent+0x20>)
 800b322:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800b326:	b103      	cbz	r3, 800b32a <LoRaMacHandleScheduleUplinkEvent+0xa>
 800b328:	4770      	bx	lr
{
 800b32a:	b500      	push	{lr}
 800b32c:	b083      	sub	sp, #12
        bool isStickyMacCommandPending = false;
 800b32e:	f88d 3007 	strb.w	r3, [sp, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800b332:	f10d 0007 	add.w	r0, sp, #7
 800b336:	f001 ff37 	bl	800d1a8 <LoRaMacCommandsStickyCmdsPending>
}
 800b33a:	b003      	add	sp, #12
 800b33c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b340:	200008e8 	.word	0x200008e8

0800b344 <OpenContinuousRxCWindow>:
{
 800b344:	b570      	push	{r4, r5, r6, lr}
 800b346:	b082      	sub	sp, #8
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 800b348:	4c14      	ldr	r4, [pc, #80]	; (800b39c <OpenContinuousRxCWindow+0x58>)
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800b34a:	4d15      	ldr	r5, [pc, #84]	; (800b3a0 <OpenContinuousRxCWindow+0x5c>)
 800b34c:	f505 7678 	add.w	r6, r5, #992	; 0x3e0
 800b350:	9600      	str	r6, [sp, #0]
 800b352:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b354:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800b358:	f994 1070 	ldrsb.w	r1, [r4, #112]	; 0x70
 800b35c:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b360:	f002 fe00 	bl	800df64 <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800b364:	2302      	movs	r3, #2
 800b366:	f885 33f3 	strb.w	r3, [r5, #1011]	; 0x3f3
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800b36a:	2301      	movs	r3, #1
 800b36c:	f885 33f2 	strb.w	r3, [r5, #1010]	; 0x3f2
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800b370:	f505 6284 	add.w	r2, r5, #1056	; 0x420
 800b374:	4631      	mov	r1, r6
 800b376:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b37a:	f002 fe07 	bl	800df8c <RegionRxConfig>
 800b37e:	b158      	cbz	r0, 800b398 <OpenContinuousRxCWindow+0x54>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800b380:	f895 3420 	ldrb.w	r3, [r5, #1056]	; 0x420
 800b384:	f885 3462 	strb.w	r3, [r5, #1122]	; 0x462
        Radio.Rx( 0 ); // Continuous mode
 800b388:	4b06      	ldr	r3, [pc, #24]	; (800b3a4 <OpenContinuousRxCWindow+0x60>)
 800b38a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b38c:	2000      	movs	r0, #0
 800b38e:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800b390:	f895 33f3 	ldrb.w	r3, [r5, #1011]	; 0x3f3
 800b394:	f885 3484 	strb.w	r3, [r5, #1156]	; 0x484
}
 800b398:	b002      	add	sp, #8
 800b39a:	bd70      	pop	{r4, r5, r6, pc}
 800b39c:	20008000 	.word	0x20008000
 800b3a0:	200008e8 	.word	0x200008e8
 800b3a4:	08014bf0 	.word	0x08014bf0

0800b3a8 <RxWindowSetup>:
{
 800b3a8:	b538      	push	{r3, r4, r5, lr}
 800b3aa:	460c      	mov	r4, r1
    TimerStop( rxTimer );
 800b3ac:	f008 f8a6 	bl	80134fc <UTIL_TIMER_Stop>
    Radio.Standby( );
 800b3b0:	4b0c      	ldr	r3, [pc, #48]	; (800b3e4 <RxWindowSetup+0x3c>)
 800b3b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3b4:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800b3b6:	4a0c      	ldr	r2, [pc, #48]	; (800b3e8 <RxWindowSetup+0x40>)
 800b3b8:	4621      	mov	r1, r4
 800b3ba:	4b0c      	ldr	r3, [pc, #48]	; (800b3ec <RxWindowSetup+0x44>)
 800b3bc:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b3c0:	f002 fde4 	bl	800df8c <RegionRxConfig>
 800b3c4:	b160      	cbz	r0, 800b3e0 <RxWindowSetup+0x38>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800b3c6:	4d0a      	ldr	r5, [pc, #40]	; (800b3f0 <RxWindowSetup+0x48>)
 800b3c8:	f895 3420 	ldrb.w	r3, [r5, #1056]	; 0x420
 800b3cc:	f885 3462 	strb.w	r3, [r5, #1122]	; 0x462
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 800b3d0:	4b04      	ldr	r3, [pc, #16]	; (800b3e4 <RxWindowSetup+0x3c>)
 800b3d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3d4:	4a05      	ldr	r2, [pc, #20]	; (800b3ec <RxWindowSetup+0x44>)
 800b3d6:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 800b3d8:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800b3da:	7ce3      	ldrb	r3, [r4, #19]
 800b3dc:	f885 3484 	strb.w	r3, [r5, #1156]	; 0x484
}
 800b3e0:	bd38      	pop	{r3, r4, r5, pc}
 800b3e2:	bf00      	nop
 800b3e4:	08014bf0 	.word	0x08014bf0
 800b3e8:	20000d08 	.word	0x20000d08
 800b3ec:	20008000 	.word	0x20008000
 800b3f0:	200008e8 	.word	0x200008e8

0800b3f4 <OnRxWindow2TimerEvent>:
{
 800b3f4:	b508      	push	{r3, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800b3f6:	4b11      	ldr	r3, [pc, #68]	; (800b43c <OnRxWindow2TimerEvent+0x48>)
 800b3f8:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 800b3fc:	b903      	cbnz	r3, 800b400 <OnRxWindow2TimerEvent+0xc>
}
 800b3fe:	bd08      	pop	{r3, pc}
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800b400:	480e      	ldr	r0, [pc, #56]	; (800b43c <OnRxWindow2TimerEvent+0x48>)
 800b402:	f890 3415 	ldrb.w	r3, [r0, #1045]	; 0x415
 800b406:	f880 33cc 	strb.w	r3, [r0, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800b40a:	4b0d      	ldr	r3, [pc, #52]	; (800b440 <OnRxWindow2TimerEvent+0x4c>)
 800b40c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b40e:	f8c0 23d0 	str.w	r2, [r0, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b412:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800b416:	f880 23dc 	strb.w	r2, [r0, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800b41a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b41e:	f880 33dd 	strb.w	r3, [r0, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800b422:	2300      	movs	r3, #0
 800b424:	f880 33de 	strb.w	r3, [r0, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800b428:	2301      	movs	r3, #1
 800b42a:	f880 33df 	strb.w	r3, [r0, #991]	; 0x3df
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800b42e:	f500 7173 	add.w	r1, r0, #972	; 0x3cc
 800b432:	f500 7066 	add.w	r0, r0, #920	; 0x398
 800b436:	f7ff ffb7 	bl	800b3a8 <RxWindowSetup>
 800b43a:	e7e0      	b.n	800b3fe <OnRxWindow2TimerEvent+0xa>
 800b43c:	200008e8 	.word	0x200008e8
 800b440:	20008000 	.word	0x20008000

0800b444 <OnRxWindow1TimerEvent>:
{
 800b444:	b508      	push	{r3, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800b446:	480f      	ldr	r0, [pc, #60]	; (800b484 <OnRxWindow1TimerEvent+0x40>)
 800b448:	f890 3415 	ldrb.w	r3, [r0, #1045]	; 0x415
 800b44c:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800b450:	4b0d      	ldr	r3, [pc, #52]	; (800b488 <OnRxWindow1TimerEvent+0x44>)
 800b452:	f993 2061 	ldrsb.w	r2, [r3, #97]	; 0x61
 800b456:	f880 23bb 	strb.w	r2, [r0, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b45a:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800b45e:	f880 23c8 	strb.w	r2, [r0, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800b462:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b466:	f880 33c9 	strb.w	r3, [r0, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800b46a:	2300      	movs	r3, #0
 800b46c:	f880 33ca 	strb.w	r3, [r0, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800b470:	f880 33cb 	strb.w	r3, [r0, #971]	; 0x3cb
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800b474:	f500 716e 	add.w	r1, r0, #952	; 0x3b8
 800b478:	f500 7060 	add.w	r0, r0, #896	; 0x380
 800b47c:	f7ff ff94 	bl	800b3a8 <RxWindowSetup>
}
 800b480:	bd08      	pop	{r3, pc}
 800b482:	bf00      	nop
 800b484:	200008e8 	.word	0x200008e8
 800b488:	20008000 	.word	0x20008000

0800b48c <LoRaMacHandleNvm>:
{
 800b48c:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_IDLE )
 800b48e:	4b30      	ldr	r3, [pc, #192]	; (800b550 <LoRaMacHandleNvm+0xc4>)
 800b490:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800b494:	b103      	cbz	r3, 800b498 <LoRaMacHandleNvm+0xc>
}
 800b496:	bd38      	pop	{r3, r4, r5, pc}
 800b498:	4604      	mov	r4, r0
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800b49a:	2124      	movs	r1, #36	; 0x24
 800b49c:	f005 fe52 	bl	8011144 <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 800b4a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4a2:	4283      	cmp	r3, r0
 800b4a4:	d052      	beq.n	800b54c <LoRaMacHandleNvm+0xc0>
        nvmData->Crypto.Crc32 = crc;
 800b4a6:	6260      	str	r0, [r4, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800b4a8:	2501      	movs	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800b4aa:	2114      	movs	r1, #20
 800b4ac:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b4b0:	f005 fe48 	bl	8011144 <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 800b4b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b4b6:	4283      	cmp	r3, r0
 800b4b8:	d002      	beq.n	800b4c0 <LoRaMacHandleNvm+0x34>
        nvmData->MacGroup1.Crc32 = crc;
 800b4ba:	63e0      	str	r0, [r4, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800b4bc:	f045 0502 	orr.w	r5, r5, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800b4c0:	21dc      	movs	r1, #220	; 0xdc
 800b4c2:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800b4c6:	f005 fe3d 	bl	8011144 <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 800b4ca:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 800b4ce:	4283      	cmp	r3, r0
 800b4d0:	d003      	beq.n	800b4da <LoRaMacHandleNvm+0x4e>
        nvmData->MacGroup2.Crc32 = crc;
 800b4d2:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800b4d6:	f045 0504 	orr.w	r5, r5, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800b4da:	21bc      	movs	r1, #188	; 0xbc
 800b4dc:	f504 7090 	add.w	r0, r4, #288	; 0x120
 800b4e0:	f005 fe30 	bl	8011144 <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 800b4e4:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
 800b4e8:	4283      	cmp	r3, r0
 800b4ea:	d003      	beq.n	800b4f4 <LoRaMacHandleNvm+0x68>
        nvmData->SecureElement.Crc32 = crc;
 800b4ec:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800b4f0:	f045 0508 	orr.w	r5, r5, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800b4f4:	21a0      	movs	r1, #160	; 0xa0
 800b4f6:	f504 70f0 	add.w	r0, r4, #480	; 0x1e0
 800b4fa:	f005 fe23 	bl	8011144 <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 800b4fe:	f8d4 3280 	ldr.w	r3, [r4, #640]	; 0x280
 800b502:	4283      	cmp	r3, r0
 800b504:	d003      	beq.n	800b50e <LoRaMacHandleNvm+0x82>
        nvmData->RegionGroup1.Crc32 = crc;
 800b506:	f8c4 0280 	str.w	r0, [r4, #640]	; 0x280
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800b50a:	f045 0510 	orr.w	r5, r5, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800b50e:	f44f 6193 	mov.w	r1, #1176	; 0x498
 800b512:	f504 7021 	add.w	r0, r4, #644	; 0x284
 800b516:	f005 fe15 	bl	8011144 <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 800b51a:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
 800b51e:	4283      	cmp	r3, r0
 800b520:	d003      	beq.n	800b52a <LoRaMacHandleNvm+0x9e>
        nvmData->RegionGroup2.Crc32 = crc;
 800b522:	f8c4 071c 	str.w	r0, [r4, #1820]	; 0x71c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800b526:	f045 0520 	orr.w	r5, r5, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800b52a:	2114      	movs	r1, #20
 800b52c:	f504 60e4 	add.w	r0, r4, #1824	; 0x720
 800b530:	f005 fe08 	bl	8011144 <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 800b534:	f8d4 3734 	ldr.w	r3, [r4, #1844]	; 0x734
 800b538:	4283      	cmp	r3, r0
 800b53a:	d003      	beq.n	800b544 <LoRaMacHandleNvm+0xb8>
        nvmData->ClassB.Crc32 = crc;
 800b53c:	f8c4 0734 	str.w	r0, [r4, #1844]	; 0x734
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800b540:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    CallNvmDataChangeCallback( notifyFlags );
 800b544:	4628      	mov	r0, r5
 800b546:	f7fe fbc1 	bl	8009ccc <CallNvmDataChangeCallback>
 800b54a:	e7a4      	b.n	800b496 <LoRaMacHandleNvm+0xa>
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800b54c:	2500      	movs	r5, #0
 800b54e:	e7ac      	b.n	800b4aa <LoRaMacHandleNvm+0x1e>
 800b550:	200008e8 	.word	0x200008e8

0800b554 <RestoreNvmData>:
{
 800b554:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800b556:	4b34      	ldr	r3, [pc, #208]	; (800b628 <RestoreNvmData+0xd4>)
 800b558:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800b55c:	2b01      	cmp	r3, #1
 800b55e:	d001      	beq.n	800b564 <RestoreNvmData+0x10>
        return LORAMAC_STATUS_BUSY;
 800b560:	2001      	movs	r0, #1
}
 800b562:	bd38      	pop	{r3, r4, r5, pc}
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 800b564:	4c31      	ldr	r4, [pc, #196]	; (800b62c <RestoreNvmData+0xd8>)
 800b566:	2124      	movs	r1, #36	; 0x24
 800b568:	4620      	mov	r0, r4
 800b56a:	f005 fdeb 	bl	8011144 <Crc32>
    if( crc != NvmBackup.Crypto.Crc32 )
 800b56e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b570:	4283      	cmp	r3, r0
 800b572:	d001      	beq.n	800b578 <RestoreNvmData+0x24>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800b574:	2017      	movs	r0, #23
 800b576:	e7f4      	b.n	800b562 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 800b578:	2114      	movs	r1, #20
 800b57a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b57e:	f005 fde1 	bl	8011144 <Crc32>
    if( crc != NvmBackup.MacGroup1.Crc32 )
 800b582:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b584:	4283      	cmp	r3, r0
 800b586:	d001      	beq.n	800b58c <RestoreNvmData+0x38>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800b588:	2017      	movs	r0, #23
 800b58a:	e7ea      	b.n	800b562 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 800b58c:	21dc      	movs	r1, #220	; 0xdc
 800b58e:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800b592:	f005 fdd7 	bl	8011144 <Crc32>
    if( crc != NvmBackup.MacGroup2.Crc32 )
 800b596:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 800b59a:	4283      	cmp	r3, r0
 800b59c:	d001      	beq.n	800b5a2 <RestoreNvmData+0x4e>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800b59e:	2017      	movs	r0, #23
 800b5a0:	e7df      	b.n	800b562 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 800b5a2:	21bc      	movs	r1, #188	; 0xbc
 800b5a4:	f504 7090 	add.w	r0, r4, #288	; 0x120
 800b5a8:	f005 fdcc 	bl	8011144 <Crc32>
    if( crc != NvmBackup.SecureElement.Crc32 )
 800b5ac:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
 800b5b0:	4283      	cmp	r3, r0
 800b5b2:	d001      	beq.n	800b5b8 <RestoreNvmData+0x64>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800b5b4:	2017      	movs	r0, #23
 800b5b6:	e7d4      	b.n	800b562 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 800b5b8:	21a0      	movs	r1, #160	; 0xa0
 800b5ba:	f504 70f0 	add.w	r0, r4, #480	; 0x1e0
 800b5be:	f005 fdc1 	bl	8011144 <Crc32>
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 800b5c2:	f8d4 3280 	ldr.w	r3, [r4, #640]	; 0x280
 800b5c6:	4283      	cmp	r3, r0
 800b5c8:	d001      	beq.n	800b5ce <RestoreNvmData+0x7a>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800b5ca:	2017      	movs	r0, #23
 800b5cc:	e7c9      	b.n	800b562 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 800b5ce:	2114      	movs	r1, #20
 800b5d0:	f504 60e4 	add.w	r0, r4, #1824	; 0x720
 800b5d4:	f005 fdb6 	bl	8011144 <Crc32>
    if( crc != NvmBackup.ClassB.Crc32 )
 800b5d8:	f8d4 3734 	ldr.w	r3, [r4, #1844]	; 0x734
 800b5dc:	4283      	cmp	r3, r0
 800b5de:	d001      	beq.n	800b5e4 <RestoreNvmData+0x90>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800b5e0:	2017      	movs	r0, #23
 800b5e2:	e7be      	b.n	800b562 <RestoreNvmData+0xe>
    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 800b5e4:	4625      	mov	r5, r4
 800b5e6:	4c12      	ldr	r4, [pc, #72]	; (800b630 <RestoreNvmData+0xdc>)
 800b5e8:	f44f 62e7 	mov.w	r2, #1848	; 0x738
 800b5ec:	4629      	mov	r1, r5
 800b5ee:	4620      	mov	r0, r4
 800b5f0:	f005 fd87 	bl	8011102 <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 800b5f4:	f44f 62e7 	mov.w	r2, #1848	; 0x738
 800b5f8:	2100      	movs	r1, #0
 800b5fa:	4628      	mov	r0, r5
 800b5fc:	f005 fd99 	bl	8011132 <memset1>
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800b600:	4b09      	ldr	r3, [pc, #36]	; (800b628 <RestoreNvmData+0xd4>)
 800b602:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800b606:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800b60a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800b60c:	f8c3 23e4 	str.w	r2, [r3, #996]	; 0x3e4
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b610:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
 800b614:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800b618:	2201      	movs	r2, #1
 800b61a:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800b61e:	2202      	movs	r2, #2
 800b620:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
    return LORAMAC_STATUS_OK;
 800b624:	2000      	movs	r0, #0
 800b626:	e79c      	b.n	800b562 <RestoreNvmData+0xe>
 800b628:	200008e8 	.word	0x200008e8
 800b62c:	20008738 	.word	0x20008738
 800b630:	20008000 	.word	0x20008000

0800b634 <OnRadioRxTimeout>:
{
 800b634:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800b636:	4a09      	ldr	r2, [pc, #36]	; (800b65c <OnRadioRxTimeout+0x28>)
 800b638:	7813      	ldrb	r3, [r2, #0]
 800b63a:	f043 0301 	orr.w	r3, r3, #1
 800b63e:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800b640:	4b07      	ldr	r3, [pc, #28]	; (800b660 <OnRadioRxTimeout+0x2c>)
 800b642:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800b646:	b113      	cbz	r3, 800b64e <OnRadioRxTimeout+0x1a>
 800b648:	691b      	ldr	r3, [r3, #16]
 800b64a:	b103      	cbz	r3, 800b64e <OnRadioRxTimeout+0x1a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800b64c:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800b64e:	4b05      	ldr	r3, [pc, #20]	; (800b664 <OnRadioRxTimeout+0x30>)
 800b650:	2201      	movs	r2, #1
 800b652:	2100      	movs	r1, #0
 800b654:	2002      	movs	r0, #2
 800b656:	f007 fbfd 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
}
 800b65a:	bd08      	pop	{r3, pc}
 800b65c:	200008e4 	.word	0x200008e4
 800b660:	200008e8 	.word	0x200008e8
 800b664:	08014500 	.word	0x08014500

0800b668 <OnRadioTxTimeout>:
{
 800b668:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800b66a:	4a09      	ldr	r2, [pc, #36]	; (800b690 <OnRadioTxTimeout+0x28>)
 800b66c:	7813      	ldrb	r3, [r2, #0]
 800b66e:	f043 0304 	orr.w	r3, r3, #4
 800b672:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800b674:	4b07      	ldr	r3, [pc, #28]	; (800b694 <OnRadioTxTimeout+0x2c>)
 800b676:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800b67a:	b113      	cbz	r3, 800b682 <OnRadioTxTimeout+0x1a>
 800b67c:	691b      	ldr	r3, [r3, #16]
 800b67e:	b103      	cbz	r3, 800b682 <OnRadioTxTimeout+0x1a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800b680:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800b682:	4b05      	ldr	r3, [pc, #20]	; (800b698 <OnRadioTxTimeout+0x30>)
 800b684:	2201      	movs	r2, #1
 800b686:	2100      	movs	r1, #0
 800b688:	2002      	movs	r0, #2
 800b68a:	f007 fbe3 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
}
 800b68e:	bd08      	pop	{r3, pc}
 800b690:	200008e4 	.word	0x200008e4
 800b694:	200008e8 	.word	0x200008e8
 800b698:	08014510 	.word	0x08014510

0800b69c <OnRadioRxDone>:
{
 800b69c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6a0:	4680      	mov	r8, r0
 800b6a2:	460f      	mov	r7, r1
 800b6a4:	4616      	mov	r6, r2
 800b6a6:	461d      	mov	r5, r3
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800b6a8:	f007 fee8 	bl	801347c <UTIL_TIMER_GetCurrentTime>
 800b6ac:	4c0d      	ldr	r4, [pc, #52]	; (800b6e4 <OnRadioRxDone+0x48>)
 800b6ae:	6020      	str	r0, [r4, #0]
    RxDoneParams.Payload = payload;
 800b6b0:	f8c4 8004 	str.w	r8, [r4, #4]
    RxDoneParams.Size = size;
 800b6b4:	8127      	strh	r7, [r4, #8]
    RxDoneParams.Rssi = rssi;
 800b6b6:	8166      	strh	r6, [r4, #10]
    RxDoneParams.Snr = snr;
 800b6b8:	7325      	strb	r5, [r4, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 800b6ba:	4a0b      	ldr	r2, [pc, #44]	; (800b6e8 <OnRadioRxDone+0x4c>)
 800b6bc:	7813      	ldrb	r3, [r2, #0]
 800b6be:	f043 0308 	orr.w	r3, r3, #8
 800b6c2:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800b6c4:	4b09      	ldr	r3, [pc, #36]	; (800b6ec <OnRadioRxDone+0x50>)
 800b6c6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800b6ca:	b113      	cbz	r3, 800b6d2 <OnRadioRxDone+0x36>
 800b6cc:	691b      	ldr	r3, [r3, #16]
 800b6ce:	b103      	cbz	r3, 800b6d2 <OnRadioRxDone+0x36>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800b6d0:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800b6d2:	4b07      	ldr	r3, [pc, #28]	; (800b6f0 <OnRadioRxDone+0x54>)
 800b6d4:	2201      	movs	r2, #1
 800b6d6:	2100      	movs	r1, #0
 800b6d8:	2002      	movs	r0, #2
 800b6da:	f007 fbbb 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
}
 800b6de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6e2:	bf00      	nop
 800b6e4:	20000df4 	.word	0x20000df4
 800b6e8:	200008e4 	.word	0x200008e4
 800b6ec:	200008e8 	.word	0x200008e8
 800b6f0:	08014520 	.word	0x08014520

0800b6f4 <OnRadioTxDone>:
{
 800b6f4:	b530      	push	{r4, r5, lr}
 800b6f6:	b083      	sub	sp, #12
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800b6f8:	f007 fec0 	bl	801347c <UTIL_TIMER_GetCurrentTime>
 800b6fc:	4b0f      	ldr	r3, [pc, #60]	; (800b73c <OnRadioTxDone+0x48>)
 800b6fe:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800b700:	4d0f      	ldr	r5, [pc, #60]	; (800b740 <OnRadioTxDone+0x4c>)
 800b702:	466c      	mov	r4, sp
 800b704:	4620      	mov	r0, r4
 800b706:	f007 fe0b 	bl	8013320 <SysTimeGet>
 800b70a:	f505 734e 	add.w	r3, r5, #824	; 0x338
 800b70e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b712:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 800b716:	4a0b      	ldr	r2, [pc, #44]	; (800b744 <OnRadioTxDone+0x50>)
 800b718:	7813      	ldrb	r3, [r2, #0]
 800b71a:	f043 0310 	orr.w	r3, r3, #16
 800b71e:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800b720:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
 800b724:	b113      	cbz	r3, 800b72c <OnRadioTxDone+0x38>
 800b726:	691b      	ldr	r3, [r3, #16]
 800b728:	b103      	cbz	r3, 800b72c <OnRadioTxDone+0x38>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800b72a:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800b72c:	4b06      	ldr	r3, [pc, #24]	; (800b748 <OnRadioTxDone+0x54>)
 800b72e:	2201      	movs	r2, #1
 800b730:	2100      	movs	r1, #0
 800b732:	2002      	movs	r0, #2
 800b734:	f007 fb8e 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
}
 800b738:	b003      	add	sp, #12
 800b73a:	bd30      	pop	{r4, r5, pc}
 800b73c:	20000e04 	.word	0x20000e04
 800b740:	200008e8 	.word	0x200008e8
 800b744:	200008e4 	.word	0x200008e4
 800b748:	08014530 	.word	0x08014530

0800b74c <ResetMacParameters>:
{
 800b74c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b74e:	b08f      	sub	sp, #60	; 0x3c
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800b750:	4c4d      	ldr	r4, [pc, #308]	; (800b888 <ResetMacParameters+0x13c>)
 800b752:	2600      	movs	r6, #0
 800b754:	f884 6118 	strb.w	r6, [r4, #280]	; 0x118
    Nvm.MacGroup1.AdrAckCounter = 0;
 800b758:	62a6      	str	r6, [r4, #40]	; 0x28
    MacCtx.ChannelsNbTransCounter = 0;
 800b75a:	4d4c      	ldr	r5, [pc, #304]	; (800b88c <ResetMacParameters+0x140>)
 800b75c:	f885 6410 	strb.w	r6, [r5, #1040]	; 0x410
    MacCtx.AckTimeoutRetries = 1;
 800b760:	2701      	movs	r7, #1
 800b762:	f885 7411 	strb.w	r7, [r5, #1041]	; 0x411
    MacCtx.AckTimeoutRetriesCounter = 1;
 800b766:	f885 7412 	strb.w	r7, [r5, #1042]	; 0x412
    MacCtx.AckTimeoutRetry = false;
 800b76a:	f885 6413 	strb.w	r6, [r5, #1043]	; 0x413
    Nvm.MacGroup2.MaxDCycle = 0;
 800b76e:	f884 6107 	strb.w	r6, [r4, #263]	; 0x107
    Nvm.MacGroup2.AggregatedDCycle = 1;
 800b772:	f8a4 710a 	strh.w	r7, [r4, #266]	; 0x10a
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800b776:	f994 30cc 	ldrsb.w	r3, [r4, #204]	; 0xcc
 800b77a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800b77e:	f994 30cd 	ldrsb.w	r3, [r4, #205]	; 0xcd
 800b782:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800b786:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 800b78a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800b78e:	f104 0364 	add.w	r3, r4, #100	; 0x64
 800b792:	f104 02a8 	add.w	r2, r4, #168	; 0xa8
 800b796:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b79a:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800b79e:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 800b7a2:	f104 02b0 	add.w	r2, r4, #176	; 0xb0
 800b7a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b7aa:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800b7ae:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
 800b7b2:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800b7b6:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 800b7ba:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800b7be:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 800b7c2:	67a3      	str	r3, [r4, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800b7c4:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 800b7c8:	67e3      	str	r3, [r4, #124]	; 0x7c
    MacCtx.NodeAckRequested = false;
 800b7ca:	f885 6414 	strb.w	r6, [r5, #1044]	; 0x414
    Nvm.MacGroup1.SrvAckRequested = false;
 800b7ce:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800b7d2:	f88d 700c 	strb.w	r7, [sp, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800b7d6:	f504 73f0 	add.w	r3, r4, #480	; 0x1e0
 800b7da:	9301      	str	r3, [sp, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800b7dc:	f504 7321 	add.w	r3, r4, #644	; 0x284
 800b7e0:	9302      	str	r3, [sp, #8]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800b7e2:	a901      	add	r1, sp, #4
 800b7e4:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b7e8:	f002 fb81 	bl	800deee <RegionInitDefaults>
    MacCtx.Channel = 0;
 800b7ec:	f885 6415 	strb.w	r6, [r5, #1045]	; 0x415
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800b7f0:	f885 63cc 	strb.w	r6, [r5, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800b7f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b7f6:	f8c5 33d0 	str.w	r3, [r5, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b7fa:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800b7fe:	f885 33dc 	strb.w	r3, [r5, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800b802:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 800b806:	f885 33dd 	strb.w	r3, [r5, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800b80a:	f885 63de 	strb.w	r6, [r5, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800b80e:	f885 73df 	strb.w	r7, [r5, #991]	; 0x3df
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800b812:	f505 7478 	add.w	r4, r5, #992	; 0x3e0
 800b816:	f505 7c73 	add.w	ip, r5, #972	; 0x3cc
 800b81a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b81e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b820:	f8dc 3000 	ldr.w	r3, [ip]
 800b824:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800b826:	f885 73f2 	strb.w	r7, [r5, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800b82a:	2302      	movs	r3, #2
 800b82c:	f885 33f3 	strb.w	r3, [r5, #1011]	; 0x3f3
    classBCallbacks.GetTemperatureLevel = NULL;
 800b830:	960c      	str	r6, [sp, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 800b832:	960d      	str	r6, [sp, #52]	; 0x34
    if( MacCtx.MacCallbacks != NULL )
 800b834:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
 800b838:	b11b      	cbz	r3, 800b842 <ResetMacParameters+0xf6>
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800b83a:	685a      	ldr	r2, [r3, #4]
 800b83c:	920c      	str	r2, [sp, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800b83e:	691b      	ldr	r3, [r3, #16]
 800b840:	930d      	str	r3, [sp, #52]	; 0x34
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800b842:	4b12      	ldr	r3, [pc, #72]	; (800b88c <ResetMacParameters+0x140>)
 800b844:	f503 628c 	add.w	r2, r3, #1120	; 0x460
 800b848:	9204      	str	r2, [sp, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800b84a:	f203 421c 	addw	r2, r3, #1052	; 0x41c
 800b84e:	9205      	str	r2, [sp, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800b850:	f203 424c 	addw	r2, r3, #1100	; 0x44c
 800b854:	9206      	str	r2, [sp, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800b856:	f203 4385 	addw	r3, r3, #1157	; 0x485
 800b85a:	9307      	str	r3, [sp, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800b85c:	4a0a      	ldr	r2, [pc, #40]	; (800b888 <ResetMacParameters+0x13c>)
 800b85e:	f102 03d4 	add.w	r3, r2, #212	; 0xd4
 800b862:	9308      	str	r3, [sp, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800b864:	f102 0340 	add.w	r3, r2, #64	; 0x40
 800b868:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800b86a:	f102 0344 	add.w	r3, r2, #68	; 0x44
 800b86e:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800b870:	f102 03d8 	add.w	r3, r2, #216	; 0xd8
 800b874:	930b      	str	r3, [sp, #44]	; 0x2c
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800b876:	f502 62e4 	add.w	r2, r2, #1824	; 0x720
 800b87a:	a90c      	add	r1, sp, #48	; 0x30
 800b87c:	a804      	add	r0, sp, #16
 800b87e:	f001 fb29 	bl	800ced4 <LoRaMacClassBInit>
}
 800b882:	b00f      	add	sp, #60	; 0x3c
 800b884:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b886:	bf00      	nop
 800b888:	20008000 	.word	0x20008000
 800b88c:	200008e8 	.word	0x200008e8

0800b890 <SwitchClass>:
{
 800b890:	b570      	push	{r4, r5, r6, lr}
 800b892:	4604      	mov	r4, r0
    switch( Nvm.MacGroup2.DeviceClass )
 800b894:	4b3e      	ldr	r3, [pc, #248]	; (800b990 <SwitchClass+0x100>)
 800b896:	f893 5104 	ldrb.w	r5, [r3, #260]	; 0x104
 800b89a:	2d01      	cmp	r5, #1
 800b89c:	d064      	beq.n	800b968 <SwitchClass+0xd8>
 800b89e:	2d02      	cmp	r5, #2
 800b8a0:	d06a      	beq.n	800b978 <SwitchClass+0xe8>
 800b8a2:	b10d      	cbz	r5, 800b8a8 <SwitchClass+0x18>
 800b8a4:	2003      	movs	r0, #3
}
 800b8a6:	bd70      	pop	{r4, r5, r6, pc}
            if( deviceClass == CLASS_A )
 800b8a8:	b930      	cbnz	r0, 800b8b8 <SwitchClass+0x28>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800b8aa:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800b8ae:	3364      	adds	r3, #100	; 0x64
 800b8b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b8b4:	e882 0003 	stmia.w	r2, {r0, r1}
            if( deviceClass == CLASS_B )
 800b8b8:	2c01      	cmp	r4, #1
 800b8ba:	d021      	beq.n	800b900 <SwitchClass+0x70>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b8bc:	2003      	movs	r0, #3
            if( deviceClass == CLASS_C )
 800b8be:	2c02      	cmp	r4, #2
 800b8c0:	d1f1      	bne.n	800b8a6 <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800b8c2:	4b33      	ldr	r3, [pc, #204]	; (800b990 <SwitchClass+0x100>)
 800b8c4:	f883 4104 	strb.w	r4, [r3, #260]	; 0x104
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800b8c8:	4e32      	ldr	r6, [pc, #200]	; (800b994 <SwitchClass+0x104>)
 800b8ca:	f506 7478 	add.w	r4, r6, #992	; 0x3e0
 800b8ce:	f506 7c73 	add.w	ip, r6, #972	; 0x3cc
 800b8d2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b8d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b8d8:	f8dc 3000 	ldr.w	r3, [ip]
 800b8dc:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800b8de:	2302      	movs	r3, #2
 800b8e0:	f886 33f3 	strb.w	r3, [r6, #1011]	; 0x3f3
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	dd13      	ble.n	800b912 <SwitchClass+0x82>
                MacCtx.NodeAckRequested = false;
 800b8ea:	4b2a      	ldr	r3, [pc, #168]	; (800b994 <SwitchClass+0x104>)
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
                Radio.Sleep( );
 800b8f2:	4b29      	ldr	r3, [pc, #164]	; (800b998 <SwitchClass+0x108>)
 800b8f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8f6:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 800b8f8:	f7ff fd24 	bl	800b344 <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 800b8fc:	4628      	mov	r0, r5
 800b8fe:	e7d2      	b.n	800b8a6 <SwitchClass+0x16>
                status = LoRaMacClassBSwitchClass( deviceClass );
 800b900:	4620      	mov	r0, r4
 800b902:	f001 fafd 	bl	800cf00 <LoRaMacClassBSwitchClass>
                if( status == LORAMAC_STATUS_OK )
 800b906:	2800      	cmp	r0, #0
 800b908:	d1d9      	bne.n	800b8be <SwitchClass+0x2e>
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800b90a:	4b21      	ldr	r3, [pc, #132]	; (800b990 <SwitchClass+0x100>)
 800b90c:	f883 4104 	strb.w	r4, [r3, #260]	; 0x104
 800b910:	e7d5      	b.n	800b8be <SwitchClass+0x2e>
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800b912:	4618      	mov	r0, r3
 800b914:	4a1e      	ldr	r2, [pc, #120]	; (800b990 <SwitchClass+0x100>)
 800b916:	212c      	movs	r1, #44	; 0x2c
 800b918:	fb01 2203 	mla	r2, r1, r3, r2
 800b91c:	f892 20da 	ldrb.w	r2, [r2, #218]	; 0xda
 800b920:	b912      	cbnz	r2, 800b928 <SwitchClass+0x98>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800b922:	3301      	adds	r3, #1
 800b924:	b25b      	sxtb	r3, r3
 800b926:	e7de      	b.n	800b8e6 <SwitchClass+0x56>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800b928:	4a19      	ldr	r2, [pc, #100]	; (800b990 <SwitchClass+0x100>)
 800b92a:	fb01 2000 	mla	r0, r1, r0, r2
 800b92e:	f8d0 10f0 	ldr.w	r1, [r0, #240]	; 0xf0
 800b932:	66d1      	str	r1, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800b934:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
 800b938:	f882 3070 	strb.w	r3, [r2, #112]	; 0x70
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800b93c:	4b15      	ldr	r3, [pc, #84]	; (800b994 <SwitchClass+0x104>)
 800b93e:	f893 0415 	ldrb.w	r0, [r3, #1045]	; 0x415
 800b942:	f883 03e0 	strb.w	r0, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800b946:	f8c3 13e4 	str.w	r1, [r3, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b94a:	f892 1075 	ldrb.w	r1, [r2, #117]	; 0x75
 800b94e:	f883 13f0 	strb.w	r1, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800b952:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 800b956:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800b95a:	2203      	movs	r2, #3
 800b95c:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800b960:	2201      	movs	r2, #1
 800b962:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 800b966:	e7c0      	b.n	800b8ea <SwitchClass+0x5a>
            status = LoRaMacClassBSwitchClass( deviceClass );
 800b968:	f001 faca 	bl	800cf00 <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 800b96c:	2800      	cmp	r0, #0
 800b96e:	d19a      	bne.n	800b8a6 <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800b970:	4b07      	ldr	r3, [pc, #28]	; (800b990 <SwitchClass+0x100>)
 800b972:	f883 4104 	strb.w	r4, [r3, #260]	; 0x104
 800b976:	e796      	b.n	800b8a6 <SwitchClass+0x16>
            if( deviceClass == CLASS_A )
 800b978:	b938      	cbnz	r0, 800b98a <SwitchClass+0xfa>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800b97a:	4b05      	ldr	r3, [pc, #20]	; (800b990 <SwitchClass+0x100>)
 800b97c:	f883 0104 	strb.w	r0, [r3, #260]	; 0x104
                Radio.Sleep( );
 800b980:	4b05      	ldr	r3, [pc, #20]	; (800b998 <SwitchClass+0x108>)
 800b982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b984:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 800b986:	4620      	mov	r0, r4
 800b988:	e78d      	b.n	800b8a6 <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b98a:	2003      	movs	r0, #3
 800b98c:	e78b      	b.n	800b8a6 <SwitchClass+0x16>
 800b98e:	bf00      	nop
 800b990:	20008000 	.word	0x20008000
 800b994:	200008e8 	.word	0x200008e8
 800b998:	08014bf0 	.word	0x08014bf0

0800b99c <SendReJoinReq>:
{
 800b99c:	b538      	push	{r3, r4, r5, lr}
    switch( joinReqType )
 800b99e:	28ff      	cmp	r0, #255	; 0xff
 800b9a0:	d003      	beq.n	800b9aa <SendReJoinReq+0xe>
    bool allowDelayedTx = true;
 800b9a2:	2001      	movs	r0, #1
    status = ScheduleTx( allowDelayedTx );
 800b9a4:	f7ff fb7a 	bl	800b09c <ScheduleTx>
}
 800b9a8:	bd38      	pop	{r3, r4, r5, pc}
            SwitchClass( CLASS_A );
 800b9aa:	2000      	movs	r0, #0
 800b9ac:	f7ff ff70 	bl	800b890 <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800b9b0:	4d0e      	ldr	r5, [pc, #56]	; (800b9ec <SendReJoinReq+0x50>)
 800b9b2:	2400      	movs	r4, #0
 800b9b4:	f885 4104 	strb.w	r4, [r5, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800b9b8:	1cab      	adds	r3, r5, #2
 800b9ba:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800b9be:	23ff      	movs	r3, #255	; 0xff
 800b9c0:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800b9c4:	f885 410d 	strb.w	r4, [r5, #269]	; 0x10d
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 800b9c8:	f005 fb6a 	bl	80110a0 <SecureElementGetJoinEui>
 800b9cc:	4601      	mov	r1, r0
 800b9ce:	2208      	movs	r2, #8
 800b9d0:	f505 7087 	add.w	r0, r5, #270	; 0x10e
 800b9d4:	f005 fb95 	bl	8011102 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 800b9d8:	f005 fb4c 	bl	8011074 <SecureElementGetDevEui>
 800b9dc:	4601      	mov	r1, r0
 800b9de:	2208      	movs	r2, #8
 800b9e0:	f505 708b 	add.w	r0, r5, #278	; 0x116
 800b9e4:	f005 fb8d 	bl	8011102 <memcpy1>
            allowDelayedTx = false;
 800b9e8:	4620      	mov	r0, r4
            break;
 800b9ea:	e7db      	b.n	800b9a4 <SendReJoinReq+0x8>
 800b9ec:	200008e8 	.word	0x200008e8

0800b9f0 <SetTxContinuousWave>:
{
 800b9f0:	b510      	push	{r4, lr}
 800b9f2:	b084      	sub	sp, #16
    continuousWave.Channel = MacCtx.Channel;
 800b9f4:	4c10      	ldr	r4, [pc, #64]	; (800ba38 <SetTxContinuousWave+0x48>)
 800b9f6:	f894 3415 	ldrb.w	r3, [r4, #1045]	; 0x415
 800b9fa:	f88d 3000 	strb.w	r3, [sp]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800b9fe:	4b0f      	ldr	r3, [pc, #60]	; (800ba3c <SetTxContinuousWave+0x4c>)
 800ba00:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 800ba04:	f88d 2001 	strb.w	r2, [sp, #1]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800ba08:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 800ba0c:	f88d 2002 	strb.w	r2, [sp, #2]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800ba10:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800ba12:	9201      	str	r2, [sp, #4]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800ba14:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800ba16:	9202      	str	r2, [sp, #8]
    continuousWave.Timeout = timeout;
 800ba18:	f8ad 000c 	strh.w	r0, [sp, #12]
    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 800ba1c:	4669      	mov	r1, sp
 800ba1e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ba22:	f002 fb53 	bl	800e0cc <RegionSetContinuousWave>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800ba26:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800ba2a:	f043 0302 	orr.w	r3, r3, #2
 800ba2e:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
}
 800ba32:	2000      	movs	r0, #0
 800ba34:	b004      	add	sp, #16
 800ba36:	bd10      	pop	{r4, pc}
 800ba38:	200008e8 	.word	0x200008e8
 800ba3c:	20008000 	.word	0x20008000

0800ba40 <PrepareFrame>:
{
 800ba40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba44:	b083      	sub	sp, #12
 800ba46:	4605      	mov	r5, r0
 800ba48:	460e      	mov	r6, r1
 800ba4a:	4617      	mov	r7, r2
 800ba4c:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    MacCtx.PktBufferLen = 0;
 800ba50:	4959      	ldr	r1, [pc, #356]	; (800bbb8 <PrepareFrame+0x178>)
 800ba52:	2200      	movs	r2, #0
 800ba54:	800a      	strh	r2, [r1, #0]
    MacCtx.NodeAckRequested = false;
 800ba56:	f881 2414 	strb.w	r2, [r1, #1044]	; 0x414
    uint32_t fCntUp = 0;
 800ba5a:	9201      	str	r2, [sp, #4]
    size_t macCmdsSize = 0;
 800ba5c:	9200      	str	r2, [sp, #0]
    if( fBuffer == NULL )
 800ba5e:	4698      	mov	r8, r3
 800ba60:	b1cb      	cbz	r3, 800ba96 <PrepareFrame+0x56>
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800ba62:	f8df 9154 	ldr.w	r9, [pc, #340]	; 800bbb8 <PrepareFrame+0x178>
 800ba66:	4622      	mov	r2, r4
 800ba68:	4641      	mov	r1, r8
 800ba6a:	f509 709c 	add.w	r0, r9, #312	; 0x138
 800ba6e:	f005 fb48 	bl	8011102 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800ba72:	b2e0      	uxtb	r0, r4
 800ba74:	f889 0237 	strb.w	r0, [r9, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 800ba78:	782b      	ldrb	r3, [r5, #0]
 800ba7a:	f889 3002 	strb.w	r3, [r9, #2]
    switch( macHdr->Bits.MType )
 800ba7e:	782b      	ldrb	r3, [r5, #0]
 800ba80:	095b      	lsrs	r3, r3, #5
 800ba82:	2b04      	cmp	r3, #4
 800ba84:	d009      	beq.n	800ba9a <PrepareFrame+0x5a>
 800ba86:	2b07      	cmp	r3, #7
 800ba88:	d079      	beq.n	800bb7e <PrepareFrame+0x13e>
 800ba8a:	2b02      	cmp	r3, #2
 800ba8c:	d009      	beq.n	800baa2 <PrepareFrame+0x62>
 800ba8e:	2002      	movs	r0, #2
}
 800ba90:	b003      	add	sp, #12
 800ba92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        fBufferSize = 0;
 800ba96:	4614      	mov	r4, r2
 800ba98:	e7e3      	b.n	800ba62 <PrepareFrame+0x22>
            MacCtx.NodeAckRequested = true;
 800ba9a:	4b47      	ldr	r3, [pc, #284]	; (800bbb8 <PrepareFrame+0x178>)
 800ba9c:	2201      	movs	r2, #1
 800ba9e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800baa2:	4b45      	ldr	r3, [pc, #276]	; (800bbb8 <PrepareFrame+0x178>)
 800baa4:	2204      	movs	r2, #4
 800baa6:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800baaa:	1c9a      	adds	r2, r3, #2
 800baac:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800bab0:	22ff      	movs	r2, #255	; 0xff
 800bab2:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800bab6:	782a      	ldrb	r2, [r5, #0]
 800bab8:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800babc:	f883 7128 	strb.w	r7, [r3, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800bac0:	4a3e      	ldr	r2, [pc, #248]	; (800bbbc <PrepareFrame+0x17c>)
 800bac2:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
 800bac6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800baca:	7832      	ldrb	r2, [r6, #0]
 800bacc:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800bad0:	f883 0130 	strb.w	r0, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800bad4:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800bad8:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800badc:	a801      	add	r0, sp, #4
 800bade:	f001 fe8b 	bl	800d7f8 <LoRaMacCryptoGetFCntUp>
 800bae2:	2800      	cmp	r0, #0
 800bae4:	d15c      	bne.n	800bba0 <PrepareFrame+0x160>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800bae6:	9a01      	ldr	r2, [sp, #4]
 800bae8:	4b33      	ldr	r3, [pc, #204]	; (800bbb8 <PrepareFrame+0x178>)
 800baea:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
            MacCtx.McpsConfirm.NbRetries = 0;
 800baee:	2100      	movs	r1, #0
 800baf0:	f883 143d 	strb.w	r1, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.AckReceived = false;
 800baf4:	f883 143c 	strb.w	r1, [r3, #1084]	; 0x43c
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800baf8:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800bafc:	4668      	mov	r0, sp
 800bafe:	f001 fb15 	bl	800d12c <LoRaMacCommandsGetSizeSerializedCmds>
 800bb02:	2800      	cmp	r0, #0
 800bb04:	d14e      	bne.n	800bba4 <PrepareFrame+0x164>
            if( macCmdsSize > 0 )
 800bb06:	9b00      	ldr	r3, [sp, #0]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d0c1      	beq.n	800ba90 <PrepareFrame+0x50>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 800bb0c:	4b2b      	ldr	r3, [pc, #172]	; (800bbbc <PrepareFrame+0x17c>)
 800bb0e:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 800bb12:	f7fe f91f 	bl	8009d54 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800bb16:	4b28      	ldr	r3, [pc, #160]	; (800bbb8 <PrepareFrame+0x178>)
 800bb18:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800bb1c:	b113      	cbz	r3, 800bb24 <PrepareFrame+0xe4>
 800bb1e:	9a00      	ldr	r2, [sp, #0]
 800bb20:	2a0f      	cmp	r2, #15
 800bb22:	d915      	bls.n	800bb50 <PrepareFrame+0x110>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800bb24:	b113      	cbz	r3, 800bb2c <PrepareFrame+0xec>
 800bb26:	9b00      	ldr	r3, [sp, #0]
 800bb28:	2b0f      	cmp	r3, #15
 800bb2a:	d821      	bhi.n	800bb70 <PrepareFrame+0x130>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800bb2c:	4a24      	ldr	r2, [pc, #144]	; (800bbc0 <PrepareFrame+0x180>)
 800bb2e:	4669      	mov	r1, sp
 800bb30:	f001 fb08 	bl	800d144 <LoRaMacCommandsSerializeCmds>
 800bb34:	2800      	cmp	r0, #0
 800bb36:	d13b      	bne.n	800bbb0 <PrepareFrame+0x170>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800bb38:	4b1f      	ldr	r3, [pc, #124]	; (800bbb8 <PrepareFrame+0x178>)
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 800bb40:	f203 428c 	addw	r2, r3, #1164	; 0x48c
 800bb44:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800bb48:	9a00      	ldr	r2, [sp, #0]
 800bb4a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 800bb4e:	e79f      	b.n	800ba90 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800bb50:	4a1c      	ldr	r2, [pc, #112]	; (800bbc4 <PrepareFrame+0x184>)
 800bb52:	4669      	mov	r1, sp
 800bb54:	200f      	movs	r0, #15
 800bb56:	f001 faf5 	bl	800d144 <LoRaMacCommandsSerializeCmds>
 800bb5a:	bb28      	cbnz	r0, 800bba8 <PrepareFrame+0x168>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800bb5c:	7833      	ldrb	r3, [r6, #0]
 800bb5e:	9a00      	ldr	r2, [sp, #0]
 800bb60:	f362 0303 	bfi	r3, r2, #0, #4
 800bb64:	7033      	strb	r3, [r6, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800bb66:	b2da      	uxtb	r2, r3
 800bb68:	4b13      	ldr	r3, [pc, #76]	; (800bbb8 <PrepareFrame+0x178>)
 800bb6a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 800bb6e:	e78f      	b.n	800ba90 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800bb70:	4a13      	ldr	r2, [pc, #76]	; (800bbc0 <PrepareFrame+0x180>)
 800bb72:	4669      	mov	r1, sp
 800bb74:	f001 fae6 	bl	800d144 <LoRaMacCommandsSerializeCmds>
 800bb78:	b1c0      	cbz	r0, 800bbac <PrepareFrame+0x16c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800bb7a:	2013      	movs	r0, #19
 800bb7c:	e788      	b.n	800ba90 <PrepareFrame+0x50>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800bb7e:	f1b8 0f00 	cmp.w	r8, #0
 800bb82:	d017      	beq.n	800bbb4 <PrepareFrame+0x174>
 800bb84:	2800      	cmp	r0, #0
 800bb86:	d083      	beq.n	800ba90 <PrepareFrame+0x50>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800bb88:	4c0b      	ldr	r4, [pc, #44]	; (800bbb8 <PrepareFrame+0x178>)
 800bb8a:	b282      	uxth	r2, r0
 800bb8c:	4641      	mov	r1, r8
 800bb8e:	1ce0      	adds	r0, r4, #3
 800bb90:	f005 fab7 	bl	8011102 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800bb94:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
 800bb98:	3301      	adds	r3, #1
 800bb9a:	8023      	strh	r3, [r4, #0]
    return LORAMAC_STATUS_OK;
 800bb9c:	2000      	movs	r0, #0
 800bb9e:	e777      	b.n	800ba90 <PrepareFrame+0x50>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800bba0:	2012      	movs	r0, #18
 800bba2:	e775      	b.n	800ba90 <PrepareFrame+0x50>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800bba4:	2013      	movs	r0, #19
 800bba6:	e773      	b.n	800ba90 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800bba8:	2013      	movs	r0, #19
 800bbaa:	e771      	b.n	800ba90 <PrepareFrame+0x50>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800bbac:	200a      	movs	r0, #10
 800bbae:	e76f      	b.n	800ba90 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800bbb0:	2013      	movs	r0, #19
 800bbb2:	e76d      	b.n	800ba90 <PrepareFrame+0x50>
    return LORAMAC_STATUS_OK;
 800bbb4:	2000      	movs	r0, #0
 800bbb6:	e76b      	b.n	800ba90 <PrepareFrame+0x50>
 800bbb8:	200008e8 	.word	0x200008e8
 800bbbc:	20008000 	.word	0x20008000
 800bbc0:	20000d74 	.word	0x20000d74
 800bbc4:	20000a00 	.word	0x20000a00

0800bbc8 <Send>:
{
 800bbc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbcc:	b08a      	sub	sp, #40	; 0x28
 800bbce:	4617      	mov	r7, r2
 800bbd0:	4698      	mov	r8, r3
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800bbd2:	4c43      	ldr	r4, [pc, #268]	; (800bce0 <Send+0x118>)
 800bbd4:	f994 a039 	ldrsb.w	sl, [r4, #57]	; 0x39
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800bbd8:	f994 9038 	ldrsb.w	r9, [r4, #56]	; 0x38
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800bbdc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800bbde:	9208      	str	r2, [sp, #32]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800bbe0:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d079      	beq.n	800bcdc <Send+0x114>
 800bbe8:	4605      	mov	r5, r0
 800bbea:	460e      	mov	r6, r1
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800bbec:	f894 3107 	ldrb.w	r3, [r4, #263]	; 0x107
 800bbf0:	b90b      	cbnz	r3, 800bbf6 <Send+0x2e>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800bbf2:	2100      	movs	r1, #0
 800bbf4:	6321      	str	r1, [r4, #48]	; 0x30
    fCtrl.Value = 0;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800bbfc:	4838      	ldr	r0, [pc, #224]	; (800bce0 <Send+0x118>)
 800bbfe:	f890 1106 	ldrb.w	r1, [r0, #262]	; 0x106
 800bc02:	f361 13c7 	bfi	r3, r1, #7, #1
 800bc06:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800bc0a:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
 800bc0e:	2b01      	cmp	r3, #1
 800bc10:	d051      	beq.n	800bcb6 <Send+0xee>
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800bc12:	4b33      	ldr	r3, [pc, #204]	; (800bce0 <Send+0x118>)
 800bc14:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800bc18:	b12b      	cbz	r3, 800bc26 <Send+0x5e>
        fCtrl.Bits.Ack = 1;
 800bc1a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800bc1e:	f043 0320 	orr.w	r3, r3, #32
 800bc22:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    adrNext.Version = Nvm.MacGroup2.Version;
 800bc26:	4c2e      	ldr	r4, [pc, #184]	; (800bce0 <Send+0x118>)
 800bc28:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800bc2c:	9303      	str	r3, [sp, #12]
    adrNext.UpdateChanMask = true;
 800bc2e:	2301      	movs	r3, #1
 800bc30:	f88d 3010 	strb.w	r3, [sp, #16]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800bc34:	f88d 1011 	strb.w	r1, [sp, #17]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800bc38:	9205      	str	r2, [sp, #20]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800bc3a:	4b2a      	ldr	r3, [pc, #168]	; (800bce4 <Send+0x11c>)
 800bc3c:	f8b3 23f4 	ldrh.w	r2, [r3, #1012]	; 0x3f4
 800bc40:	f8ad 2018 	strh.w	r2, [sp, #24]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800bc44:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 800bc48:	f8ad 301a 	strh.w	r3, [sp, #26]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800bc4c:	f88d a01c 	strb.w	sl, [sp, #28]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800bc50:	f88d 901d 	strb.w	r9, [sp, #29]
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800bc54:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 800bc58:	f88d 301e 	strb.w	r3, [sp, #30]
    adrNext.Region = Nvm.MacGroup2.Region;
 800bc5c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800bc60:	f88d 301f 	strb.w	r3, [sp, #31]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800bc64:	ab08      	add	r3, sp, #32
 800bc66:	f104 0238 	add.w	r2, r4, #56	; 0x38
 800bc6a:	f104 0139 	add.w	r1, r4, #57	; 0x39
 800bc6e:	a803      	add	r0, sp, #12
 800bc70:	f001 f928 	bl	800cec4 <LoRaMacAdrCalcNext>
 800bc74:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800bc78:	f360 1386 	bfi	r3, r0, #6, #1
 800bc7c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800bc80:	f8cd 8000 	str.w	r8, [sp]
 800bc84:	463b      	mov	r3, r7
 800bc86:	4632      	mov	r2, r6
 800bc88:	a909      	add	r1, sp, #36	; 0x24
 800bc8a:	4628      	mov	r0, r5
 800bc8c:	f7ff fed8 	bl	800ba40 <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800bc90:	4604      	mov	r4, r0
 800bc92:	b108      	cbz	r0, 800bc98 <Send+0xd0>
 800bc94:	280a      	cmp	r0, #10
 800bc96:	d104      	bne.n	800bca2 <Send+0xda>
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800bc98:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 800bc9c:	f7ff f9fe 	bl	800b09c <ScheduleTx>
 800bca0:	4604      	mov	r4, r0
    if( status != LORAMAC_STATUS_OK )
 800bca2:	b17c      	cbz	r4, 800bcc4 <Send+0xfc>
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800bca4:	4b0e      	ldr	r3, [pc, #56]	; (800bce0 <Send+0x118>)
 800bca6:	f883 a039 	strb.w	sl, [r3, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800bcaa:	f883 9038 	strb.w	r9, [r3, #56]	; 0x38
}
 800bcae:	4620      	mov	r0, r4
 800bcb0:	b00a      	add	sp, #40	; 0x28
 800bcb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        fCtrl.Bits.FPending      = 1;
 800bcb6:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800bcba:	f043 0310 	orr.w	r3, r3, #16
 800bcbe:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800bcc2:	e7a6      	b.n	800bc12 <Send+0x4a>
        Nvm.MacGroup1.SrvAckRequested = false;
 800bcc4:	4b06      	ldr	r3, [pc, #24]	; (800bce0 <Send+0x118>)
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800bccc:	9a08      	ldr	r2, [sp, #32]
 800bcce:	629a      	str	r2, [r3, #40]	; 0x28
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800bcd0:	f001 fa00 	bl	800d0d4 <LoRaMacCommandsRemoveNoneStickyCmds>
 800bcd4:	2800      	cmp	r0, #0
 800bcd6:	d0ea      	beq.n	800bcae <Send+0xe6>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800bcd8:	2413      	movs	r4, #19
 800bcda:	e7e8      	b.n	800bcae <Send+0xe6>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800bcdc:	2407      	movs	r4, #7
 800bcde:	e7e6      	b.n	800bcae <Send+0xe6>
 800bce0:	20008000 	.word	0x20008000
 800bce4:	200008e8 	.word	0x200008e8

0800bce8 <LoRaMacIsBusy>:
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800bce8:	4b07      	ldr	r3, [pc, #28]	; (800bd08 <LoRaMacIsBusy+0x20>)
 800bcea:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800bcee:	b933      	cbnz	r3, 800bcfe <LoRaMacIsBusy+0x16>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800bcf0:	4b05      	ldr	r3, [pc, #20]	; (800bd08 <LoRaMacIsBusy+0x20>)
 800bcf2:	f893 3486 	ldrb.w	r3, [r3, #1158]	; 0x486
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800bcf6:	2b01      	cmp	r3, #1
 800bcf8:	d003      	beq.n	800bd02 <LoRaMacIsBusy+0x1a>
    return true;
 800bcfa:	2001      	movs	r0, #1
 800bcfc:	4770      	bx	lr
 800bcfe:	2001      	movs	r0, #1
 800bd00:	4770      	bx	lr
        return false;
 800bd02:	2000      	movs	r0, #0
}
 800bd04:	4770      	bx	lr
 800bd06:	bf00      	nop
 800bd08:	200008e8 	.word	0x200008e8

0800bd0c <LoRaMacProcess>:
{
 800bd0c:	b508      	push	{r3, lr}
    LoRaMacHandleIrqEvents( );
 800bd0e:	f7fe fffb 	bl	800ad08 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800bd12:	f001 f905 	bl	800cf20 <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800bd16:	4b20      	ldr	r3, [pc, #128]	; (800bd98 <LoRaMacProcess+0x8c>)
 800bd18:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800bd1c:	f013 0f20 	tst.w	r3, #32
 800bd20:	d10d      	bne.n	800bd3e <LoRaMacProcess+0x32>
    LoRaMacHandleIndicationEvents( );
 800bd22:	f7fd fedd 	bl	8009ae0 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800bd26:	4b1c      	ldr	r3, [pc, #112]	; (800bd98 <LoRaMacProcess+0x8c>)
 800bd28:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 800bd2c:	2b02      	cmp	r3, #2
 800bd2e:	d024      	beq.n	800bd7a <LoRaMacProcess+0x6e>
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800bd30:	4b19      	ldr	r3, [pc, #100]	; (800bd98 <LoRaMacProcess+0x8c>)
 800bd32:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800bd36:	f013 0f40 	tst.w	r3, #64	; 0x40
 800bd3a:	d121      	bne.n	800bd80 <LoRaMacProcess+0x74>
}
 800bd3c:	bd08      	pop	{r3, pc}
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800bd3e:	2000      	movs	r0, #0
 800bd40:	f7fd fec8 	bl	8009ad4 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800bd44:	f7fd fefa 	bl	8009b3c <LoRaMacCheckForRxAbort>
        if( IsRequestPending( ) > 0 )
 800bd48:	f7fd ffcc 	bl	8009ce4 <IsRequestPending>
 800bd4c:	b110      	cbz	r0, 800bd54 <LoRaMacProcess+0x48>
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800bd4e:	f7fe f8f7 	bl	8009f40 <LoRaMacCheckForBeaconAcquisition>
        if( noTx == 0x00 )
 800bd52:	b918      	cbnz	r0, 800bd5c <LoRaMacProcess+0x50>
            LoRaMacHandleMlmeRequest( );
 800bd54:	f7ff f806 	bl	800ad64 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800bd58:	f7ff fa4c 	bl	800b1f4 <LoRaMacHandleMcpsRequest>
        LoRaMacHandleRequestEvents( );
 800bd5c:	f7ff fa96 	bl	800b28c <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800bd60:	f7ff fade 	bl	800b320 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800bd64:	2001      	movs	r0, #1
 800bd66:	f7fd feb5 	bl	8009ad4 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800bd6a:	4a0b      	ldr	r2, [pc, #44]	; (800bd98 <LoRaMacProcess+0x8c>)
 800bd6c:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800bd70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd74:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 800bd78:	e7d3      	b.n	800bd22 <LoRaMacProcess+0x16>
        OpenContinuousRxCWindow( );
 800bd7a:	f7ff fae3 	bl	800b344 <OpenContinuousRxCWindow>
 800bd7e:	e7d7      	b.n	800bd30 <LoRaMacProcess+0x24>
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800bd80:	4b05      	ldr	r3, [pc, #20]	; (800bd98 <LoRaMacProcess+0x8c>)
 800bd82:	f893 2485 	ldrb.w	r2, [r3, #1157]	; 0x485
 800bd86:	f36f 1286 	bfc	r2, #6, #1
 800bd8a:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
        LoRaMacHandleNvm( &Nvm );
 800bd8e:	4803      	ldr	r0, [pc, #12]	; (800bd9c <LoRaMacProcess+0x90>)
 800bd90:	f7ff fb7c 	bl	800b48c <LoRaMacHandleNvm>
}
 800bd94:	e7d2      	b.n	800bd3c <LoRaMacProcess+0x30>
 800bd96:	bf00      	nop
 800bd98:	200008e8 	.word	0x200008e8
 800bd9c:	20008000 	.word	0x20008000

0800bda0 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800bda0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bda4:	b08b      	sub	sp, #44	; 0x2c
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 800bda6:	2800      	cmp	r0, #0
 800bda8:	f000 81a0 	beq.w	800c0ec <LoRaMacInitialization+0x34c>
 800bdac:	460e      	mov	r6, r1
 800bdae:	4691      	mov	r9, r2
 800bdb0:	4680      	mov	r8, r0
 800bdb2:	2900      	cmp	r1, #0
 800bdb4:	f000 819c 	beq.w	800c0f0 <LoRaMacInitialization+0x350>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800bdb8:	6803      	ldr	r3, [r0, #0]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	f000 819a 	beq.w	800c0f4 <LoRaMacInitialization+0x354>
        ( primitives->MacMcpsIndication == NULL ) ||
 800bdc0:	6843      	ldr	r3, [r0, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	f000 8198 	beq.w	800c0f8 <LoRaMacInitialization+0x358>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800bdc8:	6883      	ldr	r3, [r0, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	f000 8196 	beq.w	800c0fc <LoRaMacInitialization+0x35c>
        ( primitives->MacMlmeIndication == NULL ) )
 800bdd0:	68c3      	ldr	r3, [r0, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	f000 8194 	beq.w	800c100 <LoRaMacInitialization+0x360>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800bdd8:	4610      	mov	r0, r2
 800bdda:	f002 f858 	bl	800de8e <RegionIsActive>
 800bdde:	2800      	cmp	r0, #0
 800bde0:	f000 8190 	beq.w	800c104 <LoRaMacInitialization+0x364>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 800bde4:	4640      	mov	r0, r8
 800bde6:	f001 fa57 	bl	800d298 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 800bdea:	4ccc      	ldr	r4, [pc, #816]	; (800c11c <LoRaMacInitialization+0x37c>)
 800bdec:	f44f 62e7 	mov.w	r2, #1848	; 0x738
 800bdf0:	2100      	movs	r1, #0
 800bdf2:	4620      	mov	r0, r4
 800bdf4:	f005 f99d 	bl	8011132 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800bdf8:	4dc9      	ldr	r5, [pc, #804]	; (800c120 <LoRaMacInitialization+0x380>)
 800bdfa:	f240 520c 	movw	r2, #1292	; 0x50c
 800bdfe:	2100      	movs	r1, #0
 800be00:	4628      	mov	r0, r5
 800be02:	f005 f996 	bl	8011132 <memset1>

    // Set non zero variables to its default value
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
 800be06:	f04f 0a01 	mov.w	sl, #1
 800be0a:	f885 a412 	strb.w	sl, [r5, #1042]	; 0x412
    MacCtx.AckTimeoutRetries = 1;
 800be0e:	f885 a411 	strb.w	sl, [r5, #1041]	; 0x411
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 800be12:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800be16:	2700      	movs	r7, #0
 800be18:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 800be1c:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 800be20:	4bc0      	ldr	r3, [pc, #768]	; (800c124 <LoRaMacInitialization+0x384>)
 800be22:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    params.Bands = &RegionBands;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800be26:	230f      	movs	r3, #15
 800be28:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800be2c:	a908      	add	r1, sp, #32
 800be2e:	4648      	mov	r0, r9
 800be30:	f002 f837 	bl	800dea2 <RegionGetPhyParam>
 800be34:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800be36:	1bc0      	subs	r0, r0, r7
 800be38:	bf18      	it	ne
 800be3a:	2001      	movne	r0, #1
 800be3c:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800be40:	f04f 0b0a 	mov.w	fp, #10
 800be44:	f88d b020 	strb.w	fp, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800be48:	a908      	add	r1, sp, #32
 800be4a:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800be4e:	f002 f828 	bl	800dea2 <RegionGetPhyParam>
 800be52:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 800be54:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_TX_DR;
 800be58:	f04f 0906 	mov.w	r9, #6
 800be5c:	f88d 9020 	strb.w	r9, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800be60:	a908      	add	r1, sp, #32
 800be62:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800be66:	f002 f81c 	bl	800dea2 <RegionGetPhyParam>
 800be6a:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 800be6c:	f884 00cd 	strb.w	r0, [r4, #205]	; 0xcd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800be70:	2310      	movs	r3, #16
 800be72:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800be76:	a908      	add	r1, sp, #32
 800be78:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800be7c:	f002 f811 	bl	800dea2 <RegionGetPhyParam>
 800be80:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800be82:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800be86:	2311      	movs	r3, #17
 800be88:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800be8c:	a908      	add	r1, sp, #32
 800be8e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800be92:	f002 f806 	bl	800dea2 <RegionGetPhyParam>
 800be96:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800be98:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800be9c:	2312      	movs	r3, #18
 800be9e:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bea2:	a908      	add	r1, sp, #32
 800bea4:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800bea8:	f001 fffb 	bl	800dea2 <RegionGetPhyParam>
 800beac:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800beae:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800beb2:	2313      	movs	r3, #19
 800beb4:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800beb8:	a908      	add	r1, sp, #32
 800beba:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800bebe:	f001 fff0 	bl	800dea2 <RegionGetPhyParam>
 800bec2:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800bec4:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800bec8:	2314      	movs	r3, #20
 800beca:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bece:	a908      	add	r1, sp, #32
 800bed0:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800bed4:	f001 ffe5 	bl	800dea2 <RegionGetPhyParam>
 800bed8:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800beda:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800bede:	2317      	movs	r3, #23
 800bee0:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bee4:	a908      	add	r1, sp, #32
 800bee6:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800beea:	f001 ffda 	bl	800dea2 <RegionGetPhyParam>
 800beee:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800bef0:	f884 00a5 	strb.w	r0, [r4, #165]	; 0xa5

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800bef4:	2318      	movs	r3, #24
 800bef6:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800befa:	a908      	add	r1, sp, #32
 800befc:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800bf00:	f001 ffcf 	bl	800dea2 <RegionGetPhyParam>
 800bf04:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800bf06:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800bf0a:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800bf0e:	2319      	movs	r3, #25
 800bf10:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bf14:	a908      	add	r1, sp, #32
 800bf16:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800bf1a:	f001 ffc2 	bl	800dea2 <RegionGetPhyParam>
 800bf1e:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800bf20:	b2c0      	uxtb	r0, r0
 800bf22:	f884 00ac 	strb.w	r0, [r4, #172]	; 0xac
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800bf26:	f884 00b4 	strb.w	r0, [r4, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800bf2a:	231e      	movs	r3, #30
 800bf2c:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bf30:	a908      	add	r1, sp, #32
 800bf32:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800bf36:	f001 ffb4 	bl	800dea2 <RegionGetPhyParam>
 800bf3a:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800bf3c:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800bf40:	231f      	movs	r3, #31
 800bf42:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bf46:	a908      	add	r1, sp, #32
 800bf48:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800bf4c:	f001 ffa9 	bl	800dea2 <RegionGetPhyParam>
 800bf50:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800bf52:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800bf56:	2320      	movs	r3, #32
 800bf58:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bf5c:	eb0d 0103 	add.w	r1, sp, r3
 800bf60:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800bf64:	f001 ff9d 	bl	800dea2 <RegionGetPhyParam>
 800bf68:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 800bf6a:	9b07      	ldr	r3, [sp, #28]
 800bf6c:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800bf70:	2321      	movs	r3, #33	; 0x21
 800bf72:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bf76:	a908      	add	r1, sp, #32
 800bf78:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800bf7c:	f001 ff91 	bl	800dea2 <RegionGetPhyParam>
 800bf80:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 800bf82:	9b07      	ldr	r3, [sp, #28]
 800bf84:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800bf88:	230b      	movs	r3, #11
 800bf8a:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bf8e:	a908      	add	r1, sp, #32
 800bf90:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800bf94:	f001 ff85 	bl	800dea2 <RegionGetPhyParam>
 800bf98:	9007      	str	r0, [sp, #28]
    MacCtx.AdrAckLimit = phyParam.Value;
 800bf9a:	f8a5 03f4 	strh.w	r0, [r5, #1012]	; 0x3f4

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800bf9e:	230c      	movs	r3, #12
 800bfa0:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bfa4:	a908      	add	r1, sp, #32
 800bfa6:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800bfaa:	f001 ff7a 	bl	800dea2 <RegionGetPhyParam>
 800bfae:	9007      	str	r0, [sp, #28]
    MacCtx.AdrAckDelay = phyParam.Value;
 800bfb0:	f8a5 03f6 	strh.w	r0, [r5, #1014]	; 0x3f6

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800bfb4:	f884 a0a4 	strb.w	sl, [r4, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800bfb8:	f8c4 b088 	str.w	fp, [r4, #136]	; 0x88
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 800bfbc:	f884 908c 	strb.w	r9, [r4, #140]	; 0x8c

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 800bfc0:	f8c4 b044 	str.w	fp, [r4, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 800bfc4:	f884 9048 	strb.w	r9, [r4, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800bfc8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800bfcc:	64e3      	str	r3, [r4, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 800bfce:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800bfd2:	6523      	str	r3, [r4, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 800bfd4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800bfd8:	6563      	str	r3, [r4, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 800bfda:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800bfde:	65a3      	str	r3, [r4, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 800bfe0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800bfe4:	65e3      	str	r3, [r4, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 800bfe6:	f884 a060 	strb.w	sl, [r4, #96]	; 0x60

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 800bfea:	f88d 7018 	strb.w	r7, [sp, #24]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800bfee:	f504 73f0 	add.w	r3, r4, #480	; 0x1e0
 800bff2:	9304      	str	r3, [sp, #16]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800bff4:	f504 7321 	add.w	r3, r4, #644	; 0x284
 800bff8:	9305      	str	r3, [sp, #20]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800bffa:	a904      	add	r1, sp, #16
 800bffc:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800c000:	f001 ff75 	bl	800deee <RegionInitDefaults>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 800c004:	f8c5 6348 	str.w	r6, [r5, #840]	; 0x348
    ResetMacParameters( );
 800c008:	f7ff fba0 	bl	800b74c <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 800c00c:	f884 a105 	strb.w	sl, [r4, #261]	; 0x105

    MacCtx.MacPrimitives = primitives;
 800c010:	f8c5 8344 	str.w	r8, [r5, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 800c014:	f885 7485 	strb.w	r7, [r5, #1157]	; 0x485
    MacCtx.MacState = LORAMAC_STOPPED;
 800c018:	f8c5 a340 	str.w	sl, [r5, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 800c01c:	62e7      	str	r7, [r4, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 800c01e:	6327      	str	r7, [r4, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800c020:	9700      	str	r7, [sp, #0]
 800c022:	4b41      	ldr	r3, [pc, #260]	; (800c128 <LoRaMacInitialization+0x388>)
 800c024:	463a      	mov	r2, r7
 800c026:	f04f 31ff 	mov.w	r1, #4294967295
 800c02a:	f505 705a 	add.w	r0, r5, #872	; 0x368
 800c02e:	f007 fa07 	bl	8013440 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800c032:	9700      	str	r7, [sp, #0]
 800c034:	4b3d      	ldr	r3, [pc, #244]	; (800c12c <LoRaMacInitialization+0x38c>)
 800c036:	463a      	mov	r2, r7
 800c038:	f04f 31ff 	mov.w	r1, #4294967295
 800c03c:	f505 7060 	add.w	r0, r5, #896	; 0x380
 800c040:	f007 f9fe 	bl	8013440 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800c044:	9700      	str	r7, [sp, #0]
 800c046:	4b3a      	ldr	r3, [pc, #232]	; (800c130 <LoRaMacInitialization+0x390>)
 800c048:	463a      	mov	r2, r7
 800c04a:	f04f 31ff 	mov.w	r1, #4294967295
 800c04e:	f505 7066 	add.w	r0, r5, #920	; 0x398
 800c052:	f007 f9f5 	bl	8013440 <UTIL_TIMER_Create>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 800c056:	9700      	str	r7, [sp, #0]
 800c058:	4b36      	ldr	r3, [pc, #216]	; (800c134 <LoRaMacInitialization+0x394>)
 800c05a:	463a      	mov	r2, r7
 800c05c:	f04f 31ff 	mov.w	r1, #4294967295
 800c060:	f505 707e 	add.w	r0, r5, #1016	; 0x3f8
 800c064:	f007 f9ec 	bl	8013440 <UTIL_TIMER_Create>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800c068:	af02      	add	r7, sp, #8
 800c06a:	4638      	mov	r0, r7
 800c06c:	f007 f97a 	bl	8013364 <SysTimeGetMcuTime>
 800c070:	f504 7386 	add.w	r3, r4, #268	; 0x10c
 800c074:	e897 0003 	ldmia.w	r7, {r0, r1}
 800c078:	e883 0003 	stmia.w	r3, {r0, r1}
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800c07c:	4b2e      	ldr	r3, [pc, #184]	; (800c138 <LoRaMacInitialization+0x398>)
 800c07e:	f8c5 334c 	str.w	r3, [r5, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800c082:	4b2e      	ldr	r3, [pc, #184]	; (800c13c <LoRaMacInitialization+0x39c>)
 800c084:	f8c5 3354 	str.w	r3, [r5, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800c088:	4b2d      	ldr	r3, [pc, #180]	; (800c140 <LoRaMacInitialization+0x3a0>)
 800c08a:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800c08e:	4b2d      	ldr	r3, [pc, #180]	; (800c144 <LoRaMacInitialization+0x3a4>)
 800c090:	f8c5 3350 	str.w	r3, [r5, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800c094:	4b2c      	ldr	r3, [pc, #176]	; (800c148 <LoRaMacInitialization+0x3a8>)
 800c096:	f8c5 3358 	str.w	r3, [r5, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 800c09a:	4b2c      	ldr	r3, [pc, #176]	; (800c14c <LoRaMacInitialization+0x3ac>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	f505 7053 	add.w	r0, r5, #844	; 0x34c
 800c0a2:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 800c0a4:	68b1      	ldr	r1, [r6, #8]
 800c0a6:	f504 7090 	add.w	r0, r4, #288	; 0x120
 800c0aa:	f004 fd77 	bl	8010b9c <SecureElementInit>
 800c0ae:	bb70      	cbnz	r0, 800c10e <LoRaMacInitialization+0x36e>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 800c0b0:	4620      	mov	r0, r4
 800c0b2:	f001 fb81 	bl	800d7b8 <LoRaMacCryptoInit>
 800c0b6:	bb60      	cbnz	r0, 800c112 <LoRaMacInitialization+0x372>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 800c0b8:	f000 ffb6 	bl	800d028 <LoRaMacCommandsInit>
 800c0bc:	bb58      	cbnz	r0, 800c116 <LoRaMacInitialization+0x376>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800c0be:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
 800c0c2:	f001 fbdf 	bl	800d884 <LoRaMacCryptoSetMulticastReference>
 800c0c6:	4604      	mov	r4, r0
 800c0c8:	2800      	cmp	r0, #0
 800c0ca:	d141      	bne.n	800c150 <LoRaMacInitialization+0x3b0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 800c0cc:	4d1f      	ldr	r5, [pc, #124]	; (800c14c <LoRaMacInitialization+0x3ac>)
 800c0ce:	696b      	ldr	r3, [r5, #20]
 800c0d0:	4798      	blx	r3
 800c0d2:	f005 f803 	bl	80110dc <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800c0d6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800c0d8:	4a10      	ldr	r2, [pc, #64]	; (800c11c <LoRaMacInitialization+0x37c>)
 800c0da:	f892 0105 	ldrb.w	r0, [r2, #261]	; 0x105
 800c0de:	4798      	blx	r3
    Radio.Sleep( );
 800c0e0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800c0e2:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800c0e4:	4650      	mov	r0, sl
 800c0e6:	f7fd fcf5 	bl	8009ad4 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 800c0ea:	e00c      	b.n	800c106 <LoRaMacInitialization+0x366>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c0ec:	2403      	movs	r4, #3
 800c0ee:	e00a      	b.n	800c106 <LoRaMacInitialization+0x366>
 800c0f0:	2403      	movs	r4, #3
 800c0f2:	e008      	b.n	800c106 <LoRaMacInitialization+0x366>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c0f4:	2403      	movs	r4, #3
 800c0f6:	e006      	b.n	800c106 <LoRaMacInitialization+0x366>
 800c0f8:	2403      	movs	r4, #3
 800c0fa:	e004      	b.n	800c106 <LoRaMacInitialization+0x366>
 800c0fc:	2403      	movs	r4, #3
 800c0fe:	e002      	b.n	800c106 <LoRaMacInitialization+0x366>
 800c100:	2403      	movs	r4, #3
 800c102:	e000      	b.n	800c106 <LoRaMacInitialization+0x366>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800c104:	2409      	movs	r4, #9
}
 800c106:	4620      	mov	r0, r4
 800c108:	b00b      	add	sp, #44	; 0x2c
 800c10a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800c10e:	2411      	movs	r4, #17
 800c110:	e7f9      	b.n	800c106 <LoRaMacInitialization+0x366>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800c112:	2411      	movs	r4, #17
 800c114:	e7f7      	b.n	800c106 <LoRaMacInitialization+0x366>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800c116:	2413      	movs	r4, #19
 800c118:	e7f5      	b.n	800c106 <LoRaMacInitialization+0x366>
 800c11a:	bf00      	nop
 800c11c:	20008000 	.word	0x20008000
 800c120:	200008e8 	.word	0x200008e8
 800c124:	01000300 	.word	0x01000300
 800c128:	0800b1a5 	.word	0x0800b1a5
 800c12c:	0800b445 	.word	0x0800b445
 800c130:	0800b3f5 	.word	0x0800b3f5
 800c134:	08009eb5 	.word	0x08009eb5
 800c138:	0800b6f5 	.word	0x0800b6f5
 800c13c:	0800b69d 	.word	0x0800b69d
 800c140:	08009a89 	.word	0x08009a89
 800c144:	0800b669 	.word	0x0800b669
 800c148:	0800b635 	.word	0x0800b635
 800c14c:	08014bf0 	.word	0x08014bf0
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800c150:	2411      	movs	r4, #17
 800c152:	e7d8      	b.n	800c106 <LoRaMacInitialization+0x366>

0800c154 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
    MacCtx.MacState = LORAMAC_IDLE;
 800c154:	2000      	movs	r0, #0
 800c156:	4b02      	ldr	r3, [pc, #8]	; (800c160 <LoRaMacStart+0xc>)
 800c158:	f8c3 0340 	str.w	r0, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
}
 800c15c:	4770      	bx	lr
 800c15e:	bf00      	nop
 800c160:	200008e8 	.word	0x200008e8

0800c164 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 800c164:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == false )
 800c166:	f7ff fdbf 	bl	800bce8 <LoRaMacIsBusy>
 800c16a:	b130      	cbz	r0, 800c17a <LoRaMacStop+0x16>
    {
        MacCtx.MacState = LORAMAC_STOPPED;
        return LORAMAC_STATUS_OK;
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 800c16c:	4b06      	ldr	r3, [pc, #24]	; (800c188 <LoRaMacStop+0x24>)
 800c16e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800c172:	2b01      	cmp	r3, #1
 800c174:	d006      	beq.n	800c184 <LoRaMacStop+0x20>
    {
        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_BUSY;
 800c176:	2001      	movs	r0, #1
}
 800c178:	bd08      	pop	{r3, pc}
        MacCtx.MacState = LORAMAC_STOPPED;
 800c17a:	4b03      	ldr	r3, [pc, #12]	; (800c188 <LoRaMacStop+0x24>)
 800c17c:	2201      	movs	r2, #1
 800c17e:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 800c182:	e7f9      	b.n	800c178 <LoRaMacStop+0x14>
        return LORAMAC_STATUS_OK;
 800c184:	2000      	movs	r0, #0
 800c186:	e7f7      	b.n	800c178 <LoRaMacStop+0x14>
 800c188:	200008e8 	.word	0x200008e8

0800c18c <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 800c18c:	b570      	push	{r4, r5, r6, lr}
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 800c18e:	4c14      	ldr	r4, [pc, #80]	; (800c1e0 <LoRaMacHalt+0x54>)
 800c190:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800c194:	f007 f9b2 	bl	80134fc <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 800c198:	f504 7060 	add.w	r0, r4, #896	; 0x380
 800c19c:	f007 f9ae 	bl	80134fc <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 800c1a0:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800c1a4:	f007 f9aa 	bl	80134fc <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
 800c1a8:	f504 707e 	add.w	r0, r4, #1016	; 0x3f8
 800c1ac:	f007 f9a6 	bl	80134fc <UTIL_TIMER_Stop>
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 800c1b0:	f000 fea4 	bl	800cefc <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 800c1b4:	4b0b      	ldr	r3, [pc, #44]	; (800c1e4 <LoRaMacHalt+0x58>)
 800c1b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1b8:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 800c1ba:	2500      	movs	r5, #0
 800c1bc:	f8c4 5340 	str.w	r5, [r4, #832]	; 0x340

    LoRaMacHandleNvm( &Nvm );
 800c1c0:	4e09      	ldr	r6, [pc, #36]	; (800c1e8 <LoRaMacHalt+0x5c>)
 800c1c2:	4630      	mov	r0, r6
 800c1c4:	f7ff f962 	bl	800b48c <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 800c1c8:	f44f 62e7 	mov.w	r2, #1848	; 0x738
 800c1cc:	4631      	mov	r1, r6
 800c1ce:	4807      	ldr	r0, [pc, #28]	; (800c1ec <LoRaMacHalt+0x60>)
 800c1d0:	f004 ff97 	bl	8011102 <memcpy1>

    MacCtx.MacState = LORAMAC_STOPPED;
 800c1d4:	2301      	movs	r3, #1
 800c1d6:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 800c1da:	4628      	mov	r0, r5
 800c1dc:	bd70      	pop	{r4, r5, r6, pc}
 800c1de:	bf00      	nop
 800c1e0:	200008e8 	.word	0x200008e8
 800c1e4:	08014bf0 	.word	0x08014bf0
 800c1e8:	20008000 	.word	0x20008000
 800c1ec:	20008738 	.word	0x20008738

0800c1f0 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800c1f0:	b530      	push	{r4, r5, lr}
 800c1f2:	b089      	sub	sp, #36	; 0x24
 800c1f4:	4604      	mov	r4, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800c1f6:	4b2f      	ldr	r3, [pc, #188]	; (800c2b4 <LoRaMacQueryTxPossible+0xc4>)
 800c1f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c1fa:	9202      	str	r2, [sp, #8]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800c1fc:	f993 00cd 	ldrsb.w	r0, [r3, #205]	; 0xcd
 800c200:	f88d 0007 	strb.w	r0, [sp, #7]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800c204:	f993 30cc 	ldrsb.w	r3, [r3, #204]	; 0xcc
 800c208:	f88d 3006 	strb.w	r3, [sp, #6]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 800c20c:	2300      	movs	r3, #0
 800c20e:	9300      	str	r3, [sp, #0]

    if( txInfo == NULL )
 800c210:	2900      	cmp	r1, #0
 800c212:	d048      	beq.n	800c2a6 <LoRaMacQueryTxPossible+0xb6>
 800c214:	460d      	mov	r5, r1
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Setup ADR request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 800c216:	4b27      	ldr	r3, [pc, #156]	; (800c2b4 <LoRaMacQueryTxPossible+0xc4>)
 800c218:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
 800c21c:	9103      	str	r1, [sp, #12]
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 800c21e:	2100      	movs	r1, #0
 800c220:	f88d 1010 	strb.w	r1, [sp, #16]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800c224:	f893 1106 	ldrb.w	r1, [r3, #262]	; 0x106
 800c228:	f88d 1011 	strb.w	r1, [sp, #17]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800c22c:	9205      	str	r2, [sp, #20]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800c22e:	4a22      	ldr	r2, [pc, #136]	; (800c2b8 <LoRaMacQueryTxPossible+0xc8>)
 800c230:	f8b2 13f4 	ldrh.w	r1, [r2, #1012]	; 0x3f4
 800c234:	f8ad 1018 	strh.w	r1, [sp, #24]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800c238:	f8b2 23f6 	ldrh.w	r2, [r2, #1014]	; 0x3f6
 800c23c:	f8ad 201a 	strh.w	r2, [sp, #26]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800c240:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 800c244:	f88d 201c 	strb.w	r2, [sp, #28]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800c248:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 800c24c:	f88d 201d 	strb.w	r2, [sp, #29]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800c250:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800c254:	f88d 201e 	strb.w	r2, [sp, #30]
    adrNext.Region = Nvm.MacGroup2.Region;
 800c258:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c25c:	f88d 301f 	strb.w	r3, [sp, #31]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800c260:	ab02      	add	r3, sp, #8
 800c262:	f10d 0206 	add.w	r2, sp, #6
 800c266:	f10d 0107 	add.w	r1, sp, #7
 800c26a:	a803      	add	r0, sp, #12
 800c26c:	f000 fe2a 	bl	800cec4 <LoRaMacAdrCalcNext>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800c270:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 800c274:	f7fd fd6e 	bl	8009d54 <GetMaxAppPayloadWithoutFOptsLength>
 800c278:	7068      	strb	r0, [r5, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800c27a:	4668      	mov	r0, sp
 800c27c:	f000 ff56 	bl	800d12c <LoRaMacCommandsGetSizeSerializedCmds>
 800c280:	b998      	cbnz	r0, 800c2aa <LoRaMacQueryTxPossible+0xba>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800c282:	9b00      	ldr	r3, [sp, #0]
 800c284:	2b0f      	cmp	r3, #15
 800c286:	d80a      	bhi.n	800c29e <LoRaMacQueryTxPossible+0xae>
 800c288:	786a      	ldrb	r2, [r5, #1]
 800c28a:	4293      	cmp	r3, r2
 800c28c:	d807      	bhi.n	800c29e <LoRaMacQueryTxPossible+0xae>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800c28e:	1ad3      	subs	r3, r2, r3
 800c290:	702b      	strb	r3, [r5, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800c292:	9b00      	ldr	r3, [sp, #0]
 800c294:	441c      	add	r4, r3
 800c296:	42a2      	cmp	r2, r4
 800c298:	d309      	bcc.n	800c2ae <LoRaMacQueryTxPossible+0xbe>
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 800c29a:	b009      	add	sp, #36	; 0x24
 800c29c:	bd30      	pop	{r4, r5, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	702b      	strb	r3, [r5, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800c2a2:	2008      	movs	r0, #8
 800c2a4:	e7f9      	b.n	800c29a <LoRaMacQueryTxPossible+0xaa>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c2a6:	2003      	movs	r0, #3
 800c2a8:	e7f7      	b.n	800c29a <LoRaMacQueryTxPossible+0xaa>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800c2aa:	2013      	movs	r0, #19
 800c2ac:	e7f5      	b.n	800c29a <LoRaMacQueryTxPossible+0xaa>
           return LORAMAC_STATUS_LENGTH_ERROR;
 800c2ae:	2008      	movs	r0, #8
 800c2b0:	e7f3      	b.n	800c29a <LoRaMacQueryTxPossible+0xaa>
 800c2b2:	bf00      	nop
 800c2b4:	20008000 	.word	0x20008000
 800c2b8:	200008e8 	.word	0x200008e8

0800c2bc <LoRaMacMibGetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800c2bc:	2800      	cmp	r0, #0
 800c2be:	f000 8124 	beq.w	800c50a <LoRaMacMibGetRequestConfirm+0x24e>
{
 800c2c2:	b510      	push	{r4, lr}
 800c2c4:	b084      	sub	sp, #16
 800c2c6:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 800c2c8:	7800      	ldrb	r0, [r0, #0]
 800c2ca:	2837      	cmp	r0, #55	; 0x37
 800c2cc:	f200 8119 	bhi.w	800c502 <LoRaMacMibGetRequestConfirm+0x246>
 800c2d0:	e8df f010 	tbh	[pc, r0, lsl #1]
 800c2d4:	003e0038 	.word	0x003e0038
 800c2d8:	00490044 	.word	0x00490044
 800c2dc:	0054004e 	.word	0x0054004e
 800c2e0:	0117005a 	.word	0x0117005a
 800c2e4:	01170117 	.word	0x01170117
 800c2e8:	01170117 	.word	0x01170117
 800c2ec:	01170117 	.word	0x01170117
 800c2f0:	00600117 	.word	0x00600117
 800c2f4:	006c0066 	.word	0x006c0066
 800c2f8:	00810079 	.word	0x00810079
 800c2fc:	00910089 	.word	0x00910089
 800c300:	009900a6 	.word	0x009900a6
 800c304:	00b900b3 	.word	0x00b900b3
 800c308:	00c300be 	.word	0x00c300be
 800c30c:	00cd00c8 	.word	0x00cd00c8
 800c310:	00d800d2 	.word	0x00d800d2
 800c314:	00de00e4 	.word	0x00de00e4
 800c318:	00ef00ea 	.word	0x00ef00ea
 800c31c:	010200f5 	.word	0x010200f5
 800c320:	00fe00fa 	.word	0x00fe00fa
 800c324:	01080117 	.word	0x01080117
 800c328:	01170117 	.word	0x01170117
 800c32c:	01170117 	.word	0x01170117
 800c330:	01170117 	.word	0x01170117
 800c334:	01170117 	.word	0x01170117
 800c338:	01170117 	.word	0x01170117
 800c33c:	01170117 	.word	0x01170117
 800c340:	01110117 	.word	0x01110117
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 800c344:	4b72      	ldr	r3, [pc, #456]	; (800c510 <LoRaMacMibGetRequestConfirm+0x254>)
 800c346:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800c34a:	7123      	strb	r3, [r4, #4]
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 800c34c:	b004      	add	sp, #16
 800c34e:	bd10      	pop	{r4, pc}
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800c350:	4b6f      	ldr	r3, [pc, #444]	; (800c510 <LoRaMacMibGetRequestConfirm+0x254>)
 800c352:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800c356:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c358:	2000      	movs	r0, #0
            break;
 800c35a:	e7f7      	b.n	800c34c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 800c35c:	f004 fe8a 	bl	8011074 <SecureElementGetDevEui>
 800c360:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c362:	2000      	movs	r0, #0
            break;
 800c364:	e7f2      	b.n	800c34c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 800c366:	f004 fe9b 	bl	80110a0 <SecureElementGetJoinEui>
 800c36a:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c36c:	2000      	movs	r0, #0
            break;
 800c36e:	e7ed      	b.n	800c34c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 800c370:	4b67      	ldr	r3, [pc, #412]	; (800c510 <LoRaMacMibGetRequestConfirm+0x254>)
 800c372:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800c376:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c378:	2000      	movs	r0, #0
            break;
 800c37a:	e7e7      	b.n	800c34c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 800c37c:	4b64      	ldr	r3, [pc, #400]	; (800c510 <LoRaMacMibGetRequestConfirm+0x254>)
 800c37e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800c382:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c384:	2000      	movs	r0, #0
            break;
 800c386:	e7e1      	b.n	800c34c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 800c388:	4b61      	ldr	r3, [pc, #388]	; (800c510 <LoRaMacMibGetRequestConfirm+0x254>)
 800c38a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c38e:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c390:	2000      	movs	r0, #0
            break;
 800c392:	e7db      	b.n	800c34c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 800c394:	4b5e      	ldr	r3, [pc, #376]	; (800c510 <LoRaMacMibGetRequestConfirm+0x254>)
 800c396:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 800c39a:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c39c:	2000      	movs	r0, #0
            break;
 800c39e:	e7d5      	b.n	800c34c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800c3a0:	4b5b      	ldr	r3, [pc, #364]	; (800c510 <LoRaMacMibGetRequestConfirm+0x254>)
 800c3a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c3a6:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c3a8:	2000      	movs	r0, #0
            break;
 800c3aa:	e7cf      	b.n	800c34c <LoRaMacMibGetRequestConfirm+0x90>
            getPhy.Attribute = PHY_CHANNELS;
 800c3ac:	231d      	movs	r3, #29
 800c3ae:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c3b2:	a902      	add	r1, sp, #8
 800c3b4:	4b56      	ldr	r3, [pc, #344]	; (800c510 <LoRaMacMibGetRequestConfirm+0x254>)
 800c3b6:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c3ba:	f001 fd72 	bl	800dea2 <RegionGetPhyParam>
 800c3be:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelList = phyParam.Channels;
 800c3c0:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c3c2:	2000      	movs	r0, #0
            break;
 800c3c4:	e7c2      	b.n	800c34c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800c3c6:	3404      	adds	r4, #4
 800c3c8:	4b52      	ldr	r3, [pc, #328]	; (800c514 <LoRaMacMibGetRequestConfirm+0x258>)
 800c3ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c3ce:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c3d2:	2000      	movs	r0, #0
            break;
 800c3d4:	e7ba      	b.n	800c34c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800c3d6:	3404      	adds	r4, #4
 800c3d8:	4b4f      	ldr	r3, [pc, #316]	; (800c518 <LoRaMacMibGetRequestConfirm+0x25c>)
 800c3da:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c3de:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c3e2:	2000      	movs	r0, #0
            break;
 800c3e4:	e7b2      	b.n	800c34c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 800c3e6:	3404      	adds	r4, #4
 800c3e8:	4b4c      	ldr	r3, [pc, #304]	; (800c51c <LoRaMacMibGetRequestConfirm+0x260>)
 800c3ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c3ee:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c3f2:	2000      	movs	r0, #0
            break;
 800c3f4:	e7aa      	b.n	800c34c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800c3f6:	3404      	adds	r4, #4
 800c3f8:	4b49      	ldr	r3, [pc, #292]	; (800c520 <LoRaMacMibGetRequestConfirm+0x264>)
 800c3fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c3fe:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c402:	2000      	movs	r0, #0
            break;
 800c404:	e7a2      	b.n	800c34c <LoRaMacMibGetRequestConfirm+0x90>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800c406:	231b      	movs	r3, #27
 800c408:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c40c:	a902      	add	r1, sp, #8
 800c40e:	4b40      	ldr	r3, [pc, #256]	; (800c510 <LoRaMacMibGetRequestConfirm+0x254>)
 800c410:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c414:	f001 fd45 	bl	800dea2 <RegionGetPhyParam>
 800c418:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800c41a:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c41c:	2000      	movs	r0, #0
            break;
 800c41e:	e795      	b.n	800c34c <LoRaMacMibGetRequestConfirm+0x90>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800c420:	231a      	movs	r3, #26
 800c422:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c426:	a902      	add	r1, sp, #8
 800c428:	4b39      	ldr	r3, [pc, #228]	; (800c510 <LoRaMacMibGetRequestConfirm+0x254>)
 800c42a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c42e:	f001 fd38 	bl	800dea2 <RegionGetPhyParam>
 800c432:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800c434:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c436:	2000      	movs	r0, #0
            break;
 800c438:	e788      	b.n	800c34c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800c43a:	4b35      	ldr	r3, [pc, #212]	; (800c510 <LoRaMacMibGetRequestConfirm+0x254>)
 800c43c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800c440:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c442:	2000      	movs	r0, #0
            break;
 800c444:	e782      	b.n	800c34c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 800c446:	4b32      	ldr	r3, [pc, #200]	; (800c510 <LoRaMacMibGetRequestConfirm+0x254>)
 800c448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c44a:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c44c:	2000      	movs	r0, #0
            break;
 800c44e:	e77d      	b.n	800c34c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 800c450:	4b2f      	ldr	r3, [pc, #188]	; (800c510 <LoRaMacMibGetRequestConfirm+0x254>)
 800c452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c454:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c456:	2000      	movs	r0, #0
            break;
 800c458:	e778      	b.n	800c34c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 800c45a:	4b2d      	ldr	r3, [pc, #180]	; (800c510 <LoRaMacMibGetRequestConfirm+0x254>)
 800c45c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c45e:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c460:	2000      	movs	r0, #0
            break;
 800c462:	e773      	b.n	800c34c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 800c464:	4b2a      	ldr	r3, [pc, #168]	; (800c510 <LoRaMacMibGetRequestConfirm+0x254>)
 800c466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c468:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c46a:	2000      	movs	r0, #0
            break;
 800c46c:	e76e      	b.n	800c34c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 800c46e:	4b28      	ldr	r3, [pc, #160]	; (800c510 <LoRaMacMibGetRequestConfirm+0x254>)
 800c470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c472:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c474:	2000      	movs	r0, #0
            break;
 800c476:	e769      	b.n	800c34c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800c478:	4b25      	ldr	r3, [pc, #148]	; (800c510 <LoRaMacMibGetRequestConfirm+0x254>)
 800c47a:	f993 30cd 	ldrsb.w	r3, [r3, #205]	; 0xcd
 800c47e:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c480:	2000      	movs	r0, #0
            break;
 800c482:	e763      	b.n	800c34c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800c484:	4b22      	ldr	r3, [pc, #136]	; (800c510 <LoRaMacMibGetRequestConfirm+0x254>)
 800c486:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800c48a:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c48c:	2000      	movs	r0, #0
            break;
 800c48e:	e75d      	b.n	800c34c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800c490:	4b1f      	ldr	r3, [pc, #124]	; (800c510 <LoRaMacMibGetRequestConfirm+0x254>)
 800c492:	f993 30cc 	ldrsb.w	r3, [r3, #204]	; 0xcc
 800c496:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c498:	2000      	movs	r0, #0
            break;
 800c49a:	e757      	b.n	800c34c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800c49c:	4b1c      	ldr	r3, [pc, #112]	; (800c510 <LoRaMacMibGetRequestConfirm+0x254>)
 800c49e:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800c4a2:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c4a4:	2000      	movs	r0, #0
            break;
 800c4a6:	e751      	b.n	800c34c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 800c4a8:	4b19      	ldr	r3, [pc, #100]	; (800c510 <LoRaMacMibGetRequestConfirm+0x254>)
 800c4aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4ac:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c4ae:	2000      	movs	r0, #0
            break;
 800c4b0:	e74c      	b.n	800c34c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 800c4b2:	4b17      	ldr	r3, [pc, #92]	; (800c510 <LoRaMacMibGetRequestConfirm+0x254>)
 800c4b4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800c4b8:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c4ba:	2000      	movs	r0, #0
            break;
 800c4bc:	e746      	b.n	800c34c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800c4be:	4b14      	ldr	r3, [pc, #80]	; (800c510 <LoRaMacMibGetRequestConfirm+0x254>)
 800c4c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4c2:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c4c4:	2000      	movs	r0, #0
            break;
 800c4c6:	e741      	b.n	800c34c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.Contexts = &Nvm;
 800c4c8:	4b11      	ldr	r3, [pc, #68]	; (800c510 <LoRaMacMibGetRequestConfirm+0x254>)
 800c4ca:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c4cc:	2000      	movs	r0, #0
            break;
 800c4ce:	e73d      	b.n	800c34c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.BackupContexts = &NvmBackup;
 800c4d0:	4b14      	ldr	r3, [pc, #80]	; (800c524 <LoRaMacMibGetRequestConfirm+0x268>)
 800c4d2:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c4d4:	2000      	movs	r0, #0
            break;
 800c4d6:	e739      	b.n	800c34c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800c4d8:	4b0d      	ldr	r3, [pc, #52]	; (800c510 <LoRaMacMibGetRequestConfirm+0x254>)
 800c4da:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800c4de:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c4e0:	2000      	movs	r0, #0
            break;
 800c4e2:	e733      	b.n	800c34c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 800c4e4:	4b0a      	ldr	r3, [pc, #40]	; (800c510 <LoRaMacMibGetRequestConfirm+0x254>)
 800c4e6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c4ea:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800c4ec:	f001 fe10 	bl	800e110 <RegionGetVersion>
 800c4f0:	60a0      	str	r0, [r4, #8]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c4f2:	2000      	movs	r0, #0
            break;
 800c4f4:	e72a      	b.n	800c34c <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800c4f6:	4b06      	ldr	r3, [pc, #24]	; (800c510 <LoRaMacMibGetRequestConfirm+0x254>)
 800c4f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c4fc:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c4fe:	2000      	movs	r0, #0
            break;
 800c500:	e724      	b.n	800c34c <LoRaMacMibGetRequestConfirm+0x90>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800c502:	4620      	mov	r0, r4
 800c504:	f000 fcfe 	bl	800cf04 <LoRaMacClassBMibGetRequestConfirm>
            break;
 800c508:	e720      	b.n	800c34c <LoRaMacMibGetRequestConfirm+0x90>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c50a:	2003      	movs	r0, #3
}
 800c50c:	4770      	bx	lr
 800c50e:	bf00      	nop
 800c510:	20008000 	.word	0x20008000
 800c514:	20008064 	.word	0x20008064
 800c518:	200080a8 	.word	0x200080a8
 800c51c:	2000806c 	.word	0x2000806c
 800c520:	200080b0 	.word	0x200080b0
 800c524:	20008738 	.word	0x20008738

0800c528 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 800c528:	b530      	push	{r4, r5, lr}
 800c52a:	b085      	sub	sp, #20
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800c52c:	2800      	cmp	r0, #0
 800c52e:	f000 8255 	beq.w	800c9dc <LoRaMacMibSetRequestConfirm+0x4b4>
 800c532:	4605      	mov	r5, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800c534:	4bae      	ldr	r3, [pc, #696]	; (800c7f0 <LoRaMacMibSetRequestConfirm+0x2c8>)
 800c536:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800c53a:	f013 0f02 	tst.w	r3, #2
 800c53e:	f040 824f 	bne.w	800c9e0 <LoRaMacMibSetRequestConfirm+0x4b8>
    {
        return LORAMAC_STATUS_BUSY;
    }

    switch( mibSet->Type )
 800c542:	7804      	ldrb	r4, [r0, #0]
 800c544:	2c37      	cmp	r4, #55	; 0x37
 800c546:	f200 8245 	bhi.w	800c9d4 <LoRaMacMibSetRequestConfirm+0x4ac>
 800c54a:	e8df f014 	tbh	[pc, r4, lsl #1]
 800c54e:	0038      	.short	0x0038
 800c550:	0046003d 	.word	0x0046003d
 800c554:	0057004f 	.word	0x0057004f
 800c558:	0063005d 	.word	0x0063005d
 800c55c:	00760069 	.word	0x00760069
 800c560:	00900083 	.word	0x00900083
 800c564:	00aa009d 	.word	0x00aa009d
 800c568:	00c400b7 	.word	0x00c400b7
 800c56c:	00dc00d1 	.word	0x00dc00d1
 800c570:	00e20243 	.word	0x00e20243
 800c574:	01220108 	.word	0x01220108
 800c578:	0185015b 	.word	0x0185015b
 800c57c:	01950175 	.word	0x01950175
 800c580:	01a501a0 	.word	0x01a501a0
 800c584:	01af01aa 	.word	0x01af01aa
 800c588:	01b901b4 	.word	0x01b901b4
 800c58c:	01fb01ce 	.word	0x01fb01ce
 800c590:	020f01e7 	.word	0x020f01e7
 800c594:	021e0216 	.word	0x021e0216
 800c598:	02290223 	.word	0x02290223
 800c59c:	022d0243 	.word	0x022d0243
 800c5a0:	02430243 	.word	0x02430243
 800c5a4:	02430243 	.word	0x02430243
 800c5a8:	02430243 	.word	0x02430243
 800c5ac:	02430243 	.word	0x02430243
 800c5b0:	02430243 	.word	0x02430243
 800c5b4:	02430243 	.word	0x02430243
 800c5b8:	02430243 	.word	0x02430243
 800c5bc:	023d      	.short	0x023d
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800c5be:	7900      	ldrb	r0, [r0, #4]
 800c5c0:	f7ff f966 	bl	800b890 <SwitchClass>
 800c5c4:	4604      	mov	r4, r0
            break;
 800c5c6:	e20c      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800c5c8:	7903      	ldrb	r3, [r0, #4]
 800c5ca:	2b02      	cmp	r3, #2
 800c5cc:	f000 820c 	beq.w	800c9e8 <LoRaMacMibSetRequestConfirm+0x4c0>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 800c5d0:	4a88      	ldr	r2, [pc, #544]	; (800c7f4 <LoRaMacMibSetRequestConfirm+0x2cc>)
 800c5d2:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c5d6:	2400      	movs	r4, #0
 800c5d8:	e203      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            break;
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800c5da:	6840      	ldr	r0, [r0, #4]
 800c5dc:	f004 fd3c 	bl	8011058 <SecureElementSetDevEui>
 800c5e0:	4604      	mov	r4, r0
 800c5e2:	2800      	cmp	r0, #0
 800c5e4:	f000 81fd 	beq.w	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c5e8:	2403      	movs	r4, #3
 800c5ea:	e1fa      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            break;
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800c5ec:	6840      	ldr	r0, [r0, #4]
 800c5ee:	f004 fd47 	bl	8011080 <SecureElementSetJoinEui>
 800c5f2:	2800      	cmp	r0, #0
 800c5f4:	f040 81f5 	bne.w	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c5f8:	4604      	mov	r4, r0
 800c5fa:	e1f2      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            break;
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 800c5fc:	7902      	ldrb	r2, [r0, #4]
 800c5fe:	4b7d      	ldr	r3, [pc, #500]	; (800c7f4 <LoRaMacMibSetRequestConfirm+0x2cc>)
 800c600:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c604:	2400      	movs	r4, #0
            break;
 800c606:	e1ec      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 800c608:	6842      	ldr	r2, [r0, #4]
 800c60a:	4b7a      	ldr	r3, [pc, #488]	; (800c7f4 <LoRaMacMibSetRequestConfirm+0x2cc>)
 800c60c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c610:	2400      	movs	r4, #0
            break;
 800c612:	e1e6      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 800c614:	6842      	ldr	r2, [r0, #4]
 800c616:	4b77      	ldr	r3, [pc, #476]	; (800c7f4 <LoRaMacMibSetRequestConfirm+0x2cc>)
 800c618:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c61c:	2400      	movs	r4, #0
            break;
 800c61e:	e1e0      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 800c620:	6841      	ldr	r1, [r0, #4]
 800c622:	2900      	cmp	r1, #0
 800c624:	f000 81e2 	beq.w	800c9ec <LoRaMacMibSetRequestConfirm+0x4c4>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800c628:	2000      	movs	r0, #0
 800c62a:	f001 fa43 	bl	800dab4 <LoRaMacCryptoSetKey>
 800c62e:	4604      	mov	r4, r0
 800c630:	2800      	cmp	r0, #0
 800c632:	f000 81d6 	beq.w	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c636:	2411      	movs	r4, #17
 800c638:	e1d3      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            break;
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 800c63a:	6841      	ldr	r1, [r0, #4]
 800c63c:	2900      	cmp	r1, #0
 800c63e:	f000 81d7 	beq.w	800c9f0 <LoRaMacMibSetRequestConfirm+0x4c8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800c642:	2001      	movs	r0, #1
 800c644:	f001 fa36 	bl	800dab4 <LoRaMacCryptoSetKey>
 800c648:	4604      	mov	r4, r0
 800c64a:	2800      	cmp	r0, #0
 800c64c:	f000 81c9 	beq.w	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c650:	2411      	movs	r4, #17
 800c652:	e1c6      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 800c654:	6841      	ldr	r1, [r0, #4]
 800c656:	2900      	cmp	r1, #0
 800c658:	f000 81cc 	beq.w	800c9f4 <LoRaMacMibSetRequestConfirm+0x4cc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800c65c:	2002      	movs	r0, #2
 800c65e:	f001 fa29 	bl	800dab4 <LoRaMacCryptoSetKey>
 800c662:	4604      	mov	r4, r0
 800c664:	2800      	cmp	r0, #0
 800c666:	f000 81bc 	beq.w	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c66a:	2411      	movs	r4, #17
 800c66c:	e1b9      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
            break;
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 800c66e:	6841      	ldr	r1, [r0, #4]
 800c670:	2900      	cmp	r1, #0
 800c672:	f000 81c1 	beq.w	800c9f8 <LoRaMacMibSetRequestConfirm+0x4d0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800c676:	2003      	movs	r0, #3
 800c678:	f001 fa1c 	bl	800dab4 <LoRaMacCryptoSetKey>
 800c67c:	4604      	mov	r4, r0
 800c67e:	2800      	cmp	r0, #0
 800c680:	f000 81af 	beq.w	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c684:	2411      	movs	r4, #17
 800c686:	e1ac      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            break;
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 800c688:	6841      	ldr	r1, [r0, #4]
 800c68a:	2900      	cmp	r1, #0
 800c68c:	f000 81b6 	beq.w	800c9fc <LoRaMacMibSetRequestConfirm+0x4d4>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800c690:	207f      	movs	r0, #127	; 0x7f
 800c692:	f001 fa0f 	bl	800dab4 <LoRaMacCryptoSetKey>
 800c696:	4604      	mov	r4, r0
 800c698:	2800      	cmp	r0, #0
 800c69a:	f000 81a2 	beq.w	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c69e:	2411      	movs	r4, #17
 800c6a0:	e19f      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
            break;
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 800c6a2:	6841      	ldr	r1, [r0, #4]
 800c6a4:	2900      	cmp	r1, #0
 800c6a6:	f000 81ab 	beq.w	800ca00 <LoRaMacMibSetRequestConfirm+0x4d8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800c6aa:	2080      	movs	r0, #128	; 0x80
 800c6ac:	f001 fa02 	bl	800dab4 <LoRaMacCryptoSetKey>
 800c6b0:	4604      	mov	r4, r0
 800c6b2:	2800      	cmp	r0, #0
 800c6b4:	f000 8195 	beq.w	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c6b8:	2411      	movs	r4, #17
 800c6ba:	e192      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            break;
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 800c6bc:	6841      	ldr	r1, [r0, #4]
 800c6be:	2900      	cmp	r1, #0
 800c6c0:	f000 81a0 	beq.w	800ca04 <LoRaMacMibSetRequestConfirm+0x4dc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800c6c4:	2081      	movs	r0, #129	; 0x81
 800c6c6:	f001 f9f5 	bl	800dab4 <LoRaMacCryptoSetKey>
 800c6ca:	4604      	mov	r4, r0
 800c6cc:	2800      	cmp	r0, #0
 800c6ce:	f000 8188 	beq.w	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c6d2:	2411      	movs	r4, #17
 800c6d4:	e185      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            break;
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 800c6d6:	6841      	ldr	r1, [r0, #4]
 800c6d8:	2900      	cmp	r1, #0
 800c6da:	f000 8195 	beq.w	800ca08 <LoRaMacMibSetRequestConfirm+0x4e0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800c6de:	2082      	movs	r0, #130	; 0x82
 800c6e0:	f001 f9e8 	bl	800dab4 <LoRaMacCryptoSetKey>
 800c6e4:	4604      	mov	r4, r0
 800c6e6:	2800      	cmp	r0, #0
 800c6e8:	f000 817b 	beq.w	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c6ec:	2411      	movs	r4, #17
 800c6ee:	e178      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800c6f0:	7900      	ldrb	r0, [r0, #4]
 800c6f2:	4b40      	ldr	r3, [pc, #256]	; (800c7f4 <LoRaMacMibSetRequestConfirm+0x2cc>)
 800c6f4:	f883 0105 	strb.w	r0, [r3, #261]	; 0x105
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800c6f8:	4c3f      	ldr	r4, [pc, #252]	; (800c7f8 <LoRaMacMibSetRequestConfirm+0x2d0>)
 800c6fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c6fc:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 800c6fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c700:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c702:	2400      	movs	r4, #0
            /* ST_WORKAROUND_END */
            break;
 800c704:	e16d      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800c706:	7902      	ldrb	r2, [r0, #4]
 800c708:	4b3a      	ldr	r3, [pc, #232]	; (800c7f4 <LoRaMacMibSetRequestConfirm+0x2cc>)
 800c70a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c70e:	2400      	movs	r4, #0
            break;
 800c710:	e167      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800c712:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800c716:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800c71a:	4b36      	ldr	r3, [pc, #216]	; (800c7f4 <LoRaMacMibSetRequestConfirm+0x2cc>)
 800c71c:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800c720:	f88d 2005 	strb.w	r2, [sp, #5]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800c724:	2207      	movs	r2, #7
 800c726:	a901      	add	r1, sp, #4
 800c728:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c72c:	f001 fbed 	bl	800df0a <RegionVerify>
 800c730:	b908      	cbnz	r0, 800c736 <LoRaMacMibSetRequestConfirm+0x20e>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c732:	2403      	movs	r4, #3
 800c734:	e155      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            else
            {
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800c736:	686b      	ldr	r3, [r5, #4]
 800c738:	9301      	str	r3, [sp, #4]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800c73a:	2200      	movs	r2, #0
 800c73c:	a901      	add	r1, sp, #4
 800c73e:	4b2d      	ldr	r3, [pc, #180]	; (800c7f4 <LoRaMacMibSetRequestConfirm+0x2cc>)
 800c740:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c744:	f001 fbe1 	bl	800df0a <RegionVerify>
 800c748:	2800      	cmp	r0, #0
 800c74a:	f000 815f 	beq.w	800ca0c <LoRaMacMibSetRequestConfirm+0x4e4>
                {
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
                }
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800c74e:	4b2b      	ldr	r3, [pc, #172]	; (800c7fc <LoRaMacMibSetRequestConfirm+0x2d4>)
 800c750:	3504      	adds	r5, #4
 800c752:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c756:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c75a:	2400      	movs	r4, #0
 800c75c:	e141      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
            /* ST_WORKAROUND_END */
            break;
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800c75e:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800c762:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800c766:	4b23      	ldr	r3, [pc, #140]	; (800c7f4 <LoRaMacMibSetRequestConfirm+0x2cc>)
 800c768:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800c76c:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800c770:	2207      	movs	r2, #7
 800c772:	a901      	add	r1, sp, #4
 800c774:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c778:	f001 fbc7 	bl	800df0a <RegionVerify>
 800c77c:	2800      	cmp	r0, #0
 800c77e:	f000 8147 	beq.w	800ca10 <LoRaMacMibSetRequestConfirm+0x4e8>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800c782:	4b1f      	ldr	r3, [pc, #124]	; (800c800 <LoRaMacMibSetRequestConfirm+0x2d8>)
 800c784:	3504      	adds	r5, #4
 800c786:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c78a:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c78e:	2400      	movs	r4, #0
 800c790:	e127      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            break;
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800c792:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800c796:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800c79a:	4b16      	ldr	r3, [pc, #88]	; (800c7f4 <LoRaMacMibSetRequestConfirm+0x2cc>)
 800c79c:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800c7a0:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800c7a4:	2207      	movs	r2, #7
 800c7a6:	a901      	add	r1, sp, #4
 800c7a8:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c7ac:	f001 fbad 	bl	800df0a <RegionVerify>
 800c7b0:	2800      	cmp	r0, #0
 800c7b2:	f000 812f 	beq.w	800ca14 <LoRaMacMibSetRequestConfirm+0x4ec>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800c7b6:	4b0f      	ldr	r3, [pc, #60]	; (800c7f4 <LoRaMacMibSetRequestConfirm+0x2cc>)
 800c7b8:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800c7bc:	3504      	adds	r5, #4
 800c7be:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c7c2:	e882 0003 	stmia.w	r2, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800c7c6:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800c7ca:	2b02      	cmp	r3, #2
 800c7cc:	d001      	beq.n	800c7d2 <LoRaMacMibSetRequestConfirm+0x2aa>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c7ce:	2400      	movs	r4, #0
 800c7d0:	e107      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800c7d2:	f1a2 036c 	sub.w	r3, r2, #108	; 0x6c
 800c7d6:	f893 4118 	ldrb.w	r4, [r3, #280]	; 0x118
 800c7da:	2c00      	cmp	r4, #0
 800c7dc:	f000 8101 	beq.w	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 800c7e0:	4b05      	ldr	r3, [pc, #20]	; (800c7f8 <LoRaMacMibSetRequestConfirm+0x2d0>)
 800c7e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7e4:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 800c7e6:	f7fe fdad 	bl	800b344 <OpenContinuousRxCWindow>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c7ea:	2400      	movs	r4, #0
 800c7ec:	e0f9      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
 800c7ee:	bf00      	nop
 800c7f0:	200008e8 	.word	0x200008e8
 800c7f4:	20008000 	.word	0x20008000
 800c7f8:	08014bf0 	.word	0x08014bf0
 800c7fc:	20008064 	.word	0x20008064
 800c800:	200080a8 	.word	0x200080a8
            }
            break;
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800c804:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800c808:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800c80c:	4b8a      	ldr	r3, [pc, #552]	; (800ca38 <LoRaMacMibSetRequestConfirm+0x510>)
 800c80e:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800c812:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800c816:	2207      	movs	r2, #7
 800c818:	a901      	add	r1, sp, #4
 800c81a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c81e:	f001 fb74 	bl	800df0a <RegionVerify>
 800c822:	2800      	cmp	r0, #0
 800c824:	f000 80f8 	beq.w	800ca18 <LoRaMacMibSetRequestConfirm+0x4f0>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800c828:	4b84      	ldr	r3, [pc, #528]	; (800ca3c <LoRaMacMibSetRequestConfirm+0x514>)
 800c82a:	3504      	adds	r5, #4
 800c82c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c830:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c834:	2400      	movs	r4, #0
 800c836:	e0d4      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            break;
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800c838:	6843      	ldr	r3, [r0, #4]
 800c83a:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800c83c:	2301      	movs	r3, #1
 800c83e:	f88d 300c 	strb.w	r3, [sp, #12]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800c842:	a902      	add	r1, sp, #8
 800c844:	4b7c      	ldr	r3, [pc, #496]	; (800ca38 <LoRaMacMibSetRequestConfirm+0x510>)
 800c846:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c84a:	f001 fb7c 	bl	800df46 <RegionChanMaskSet>
 800c84e:	2800      	cmp	r0, #0
 800c850:	f000 80e4 	beq.w	800ca1c <LoRaMacMibSetRequestConfirm+0x4f4>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c854:	2400      	movs	r4, #0
 800c856:	e0c4      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            break;
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800c858:	6843      	ldr	r3, [r0, #4]
 800c85a:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800c85c:	2300      	movs	r3, #0
 800c85e:	f88d 300c 	strb.w	r3, [sp, #12]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800c862:	a902      	add	r1, sp, #8
 800c864:	4b74      	ldr	r3, [pc, #464]	; (800ca38 <LoRaMacMibSetRequestConfirm+0x510>)
 800c866:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c86a:	f001 fb6c 	bl	800df46 <RegionChanMaskSet>
 800c86e:	2800      	cmp	r0, #0
 800c870:	f000 80d6 	beq.w	800ca20 <LoRaMacMibSetRequestConfirm+0x4f8>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c874:	2400      	movs	r4, #0
 800c876:	e0b4      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            break;
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800c878:	7902      	ldrb	r2, [r0, #4]
 800c87a:	1e53      	subs	r3, r2, #1
 800c87c:	b2db      	uxtb	r3, r3
 800c87e:	2b0e      	cmp	r3, #14
 800c880:	f200 80d0 	bhi.w	800ca24 <LoRaMacMibSetRequestConfirm+0x4fc>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800c884:	4b6c      	ldr	r3, [pc, #432]	; (800ca38 <LoRaMacMibSetRequestConfirm+0x510>)
 800c886:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c88a:	2400      	movs	r4, #0
 800c88c:	e0a9      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            break;
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800c88e:	6842      	ldr	r2, [r0, #4]
 800c890:	4b69      	ldr	r3, [pc, #420]	; (800ca38 <LoRaMacMibSetRequestConfirm+0x510>)
 800c892:	64da      	str	r2, [r3, #76]	; 0x4c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c894:	2400      	movs	r4, #0
            break;
 800c896:	e0a4      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800c898:	6842      	ldr	r2, [r0, #4]
 800c89a:	4b67      	ldr	r3, [pc, #412]	; (800ca38 <LoRaMacMibSetRequestConfirm+0x510>)
 800c89c:	651a      	str	r2, [r3, #80]	; 0x50
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c89e:	2400      	movs	r4, #0
            break;
 800c8a0:	e09f      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800c8a2:	6842      	ldr	r2, [r0, #4]
 800c8a4:	4b64      	ldr	r3, [pc, #400]	; (800ca38 <LoRaMacMibSetRequestConfirm+0x510>)
 800c8a6:	655a      	str	r2, [r3, #84]	; 0x54
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c8a8:	2400      	movs	r4, #0
            break;
 800c8aa:	e09a      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800c8ac:	6842      	ldr	r2, [r0, #4]
 800c8ae:	4b62      	ldr	r3, [pc, #392]	; (800ca38 <LoRaMacMibSetRequestConfirm+0x510>)
 800c8b0:	659a      	str	r2, [r3, #88]	; 0x58
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c8b2:	2400      	movs	r4, #0
            break;
 800c8b4:	e095      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800c8b6:	6842      	ldr	r2, [r0, #4]
 800c8b8:	4b5f      	ldr	r3, [pc, #380]	; (800ca38 <LoRaMacMibSetRequestConfirm+0x510>)
 800c8ba:	65da      	str	r2, [r3, #92]	; 0x5c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c8bc:	2400      	movs	r4, #0
            break;
 800c8be:	e090      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800c8c0:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800c8c4:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800c8c8:	2206      	movs	r2, #6
 800c8ca:	a901      	add	r1, sp, #4
 800c8cc:	4b5a      	ldr	r3, [pc, #360]	; (800ca38 <LoRaMacMibSetRequestConfirm+0x510>)
 800c8ce:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c8d2:	f001 fb1a 	bl	800df0a <RegionVerify>
 800c8d6:	2800      	cmp	r0, #0
 800c8d8:	f000 80a6 	beq.w	800ca28 <LoRaMacMibSetRequestConfirm+0x500>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 800c8dc:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800c8e0:	4b55      	ldr	r3, [pc, #340]	; (800ca38 <LoRaMacMibSetRequestConfirm+0x510>)
 800c8e2:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c8e6:	2400      	movs	r4, #0
 800c8e8:	e07b      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            break;
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800c8ea:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800c8ee:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800c8f2:	4b51      	ldr	r3, [pc, #324]	; (800ca38 <LoRaMacMibSetRequestConfirm+0x510>)
 800c8f4:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800c8f8:	f88d 2006 	strb.w	r2, [sp, #6]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800c8fc:	2205      	movs	r2, #5
 800c8fe:	a901      	add	r1, sp, #4
 800c900:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c904:	f001 fb01 	bl	800df0a <RegionVerify>
 800c908:	2800      	cmp	r0, #0
 800c90a:	f000 808f 	beq.w	800ca2c <LoRaMacMibSetRequestConfirm+0x504>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800c90e:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800c912:	4b49      	ldr	r3, [pc, #292]	; (800ca38 <LoRaMacMibSetRequestConfirm+0x510>)
 800c914:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c918:	2400      	movs	r4, #0
 800c91a:	e062      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            break;
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800c91c:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800c920:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800c924:	220a      	movs	r2, #10
 800c926:	a901      	add	r1, sp, #4
 800c928:	4b43      	ldr	r3, [pc, #268]	; (800ca38 <LoRaMacMibSetRequestConfirm+0x510>)
 800c92a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c92e:	f001 faec 	bl	800df0a <RegionVerify>
 800c932:	2800      	cmp	r0, #0
 800c934:	d07c      	beq.n	800ca30 <LoRaMacMibSetRequestConfirm+0x508>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 800c936:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800c93a:	4b3f      	ldr	r3, [pc, #252]	; (800ca38 <LoRaMacMibSetRequestConfirm+0x510>)
 800c93c:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c940:	2400      	movs	r4, #0
 800c942:	e04e      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            break;
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800c944:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800c948:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 800c94c:	2209      	movs	r2, #9
 800c94e:	a901      	add	r1, sp, #4
 800c950:	4b39      	ldr	r3, [pc, #228]	; (800ca38 <LoRaMacMibSetRequestConfirm+0x510>)
 800c952:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c956:	f001 fad8 	bl	800df0a <RegionVerify>
 800c95a:	2800      	cmp	r0, #0
 800c95c:	d06a      	beq.n	800ca34 <LoRaMacMibSetRequestConfirm+0x50c>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 800c95e:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800c962:	4b35      	ldr	r3, [pc, #212]	; (800ca38 <LoRaMacMibSetRequestConfirm+0x510>)
 800c964:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c968:	2400      	movs	r4, #0
 800c96a:	e03a      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            break;
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800c96c:	6842      	ldr	r2, [r0, #4]
 800c96e:	4b32      	ldr	r3, [pc, #200]	; (800ca38 <LoRaMacMibSetRequestConfirm+0x510>)
 800c970:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800c974:	645a      	str	r2, [r3, #68]	; 0x44
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c976:	2400      	movs	r4, #0
            break;
 800c978:	e033      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800c97a:	7902      	ldrb	r2, [r0, #4]
 800c97c:	4b2e      	ldr	r3, [pc, #184]	; (800ca38 <LoRaMacMibSetRequestConfirm+0x510>)
 800c97e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 800c982:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c986:	2400      	movs	r4, #0
            break;
 800c988:	e02b      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800c98a:	6842      	ldr	r2, [r0, #4]
 800c98c:	4b2a      	ldr	r3, [pc, #168]	; (800ca38 <LoRaMacMibSetRequestConfirm+0x510>)
 800c98e:	67da      	str	r2, [r3, #124]	; 0x7c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c990:	2400      	movs	r4, #0
            break;
 800c992:	e026      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800c994:	6842      	ldr	r2, [r0, #4]
 800c996:	4b28      	ldr	r3, [pc, #160]	; (800ca38 <LoRaMacMibSetRequestConfirm+0x510>)
 800c998:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c99c:	2400      	movs	r4, #0
            break;
 800c99e:	e020      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 800c9a0:	f7fe fdd8 	bl	800b554 <RestoreNvmData>
 800c9a4:	4604      	mov	r4, r0
            break;
 800c9a6:	e01c      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800c9a8:	7983      	ldrb	r3, [r0, #6]
 800c9aa:	2b01      	cmp	r3, #1
 800c9ac:	d901      	bls.n	800c9b2 <LoRaMacMibSetRequestConfirm+0x48a>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c9ae:	2403      	movs	r4, #3
 800c9b0:	e017      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800c9b2:	6842      	ldr	r2, [r0, #4]
 800c9b4:	4b20      	ldr	r3, [pc, #128]	; (800ca38 <LoRaMacMibSetRequestConfirm+0x510>)
 800c9b6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800c9ba:	6840      	ldr	r0, [r0, #4]
 800c9bc:	f000 ff14 	bl	800d7e8 <LoRaMacCryptoSetLrWanVersion>
 800c9c0:	4604      	mov	r4, r0
 800c9c2:	b170      	cbz	r0, 800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c9c4:	2411      	movs	r4, #17
 800c9c6:	e00c      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            break;
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 800c9c8:	6842      	ldr	r2, [r0, #4]
 800c9ca:	4b1b      	ldr	r3, [pc, #108]	; (800ca38 <LoRaMacMibSetRequestConfirm+0x510>)
 800c9cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c9d0:	2400      	movs	r4, #0
            break;
 800c9d2:	e006      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
            break;
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800c9d4:	f000 fa98 	bl	800cf08 <LoRaMacMibClassBSetRequestConfirm>
 800c9d8:	4604      	mov	r4, r0
            break;
 800c9da:	e002      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c9dc:	2403      	movs	r4, #3
 800c9de:	e000      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
        return LORAMAC_STATUS_BUSY;
 800c9e0:	2401      	movs	r4, #1
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
    }
#endif /* LORAMAC_VERSION */
    return status;
}
 800c9e2:	4620      	mov	r0, r4
 800c9e4:	b005      	add	sp, #20
 800c9e6:	bd30      	pop	{r4, r5, pc}
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c9e8:	2403      	movs	r4, #3
 800c9ea:	e7fa      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c9ec:	2403      	movs	r4, #3
 800c9ee:	e7f8      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c9f0:	2403      	movs	r4, #3
 800c9f2:	e7f6      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c9f4:	2403      	movs	r4, #3
 800c9f6:	e7f4      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c9f8:	2403      	movs	r4, #3
 800c9fa:	e7f2      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c9fc:	2403      	movs	r4, #3
 800c9fe:	e7f0      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ca00:	2403      	movs	r4, #3
 800ca02:	e7ee      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ca04:	2403      	movs	r4, #3
 800ca06:	e7ec      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ca08:	2403      	movs	r4, #3
 800ca0a:	e7ea      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ca0c:	2403      	movs	r4, #3
 800ca0e:	e7e8      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ca10:	2403      	movs	r4, #3
 800ca12:	e7e6      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ca14:	2403      	movs	r4, #3
 800ca16:	e7e4      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ca18:	2403      	movs	r4, #3
 800ca1a:	e7e2      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ca1c:	2403      	movs	r4, #3
 800ca1e:	e7e0      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ca20:	2403      	movs	r4, #3
 800ca22:	e7de      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ca24:	2403      	movs	r4, #3
 800ca26:	e7dc      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ca28:	2403      	movs	r4, #3
 800ca2a:	e7da      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ca2c:	2403      	movs	r4, #3
 800ca2e:	e7d8      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ca30:	2403      	movs	r4, #3
 800ca32:	e7d6      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ca34:	2403      	movs	r4, #3
 800ca36:	e7d4      	b.n	800c9e2 <LoRaMacMibSetRequestConfirm+0x4ba>
 800ca38:	20008000 	.word	0x20008000
 800ca3c:	200080b0 	.word	0x200080b0

0800ca40 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800ca40:	b570      	push	{r4, r5, r6, lr}
 800ca42:	b082      	sub	sp, #8
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800ca44:	2300      	movs	r3, #0
 800ca46:	f8ad 3000 	strh.w	r3, [sp]

    if( mlmeRequest == NULL )
 800ca4a:	2800      	cmp	r0, #0
 800ca4c:	f000 80c5 	beq.w	800cbda <LoRaMacMlmeRequest+0x19a>
 800ca50:	4605      	mov	r5, r0
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 800ca52:	f7ff f949 	bl	800bce8 <LoRaMacIsBusy>
 800ca56:	b118      	cbz	r0, 800ca60 <LoRaMacMlmeRequest+0x20>
    {
        return LORAMAC_STATUS_BUSY;
 800ca58:	2401      	movs	r4, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 800ca5a:	4620      	mov	r0, r4
 800ca5c:	b002      	add	sp, #8
 800ca5e:	bd70      	pop	{r4, r5, r6, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800ca60:	f000 fcf8 	bl	800d454 <LoRaMacConfirmQueueIsFull>
 800ca64:	b108      	cbz	r0, 800ca6a <LoRaMacMlmeRequest+0x2a>
        return LORAMAC_STATUS_BUSY;
 800ca66:	2401      	movs	r4, #1
 800ca68:	e7f7      	b.n	800ca5a <LoRaMacMlmeRequest+0x1a>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800ca6a:	f000 fced 	bl	800d448 <LoRaMacConfirmQueueGetCnt>
 800ca6e:	b1f8      	cbz	r0, 800cab0 <LoRaMacMlmeRequest+0x70>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ca70:	4b5b      	ldr	r3, [pc, #364]	; (800cbe0 <LoRaMacMlmeRequest+0x1a0>)
 800ca72:	2101      	movs	r1, #1
 800ca74:	f883 144d 	strb.w	r1, [r3, #1101]	; 0x44d
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800ca78:	f893 2485 	ldrb.w	r2, [r3, #1157]	; 0x485
 800ca7c:	f042 0204 	orr.w	r2, r2, #4
 800ca80:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
    queueElement.Request = mlmeRequest->Type;
 800ca84:	782b      	ldrb	r3, [r5, #0]
 800ca86:	f88d 3004 	strb.w	r3, [sp, #4]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ca8a:	f88d 1005 	strb.w	r1, [sp, #5]
    queueElement.RestrictCommonReadyToHandle = false;
 800ca8e:	2200      	movs	r2, #0
 800ca90:	f88d 2007 	strb.w	r2, [sp, #7]
    switch( mlmeRequest->Type )
 800ca94:	461c      	mov	r4, r3
 800ca96:	3b01      	subs	r3, #1
 800ca98:	2b0d      	cmp	r3, #13
 800ca9a:	f200 8084 	bhi.w	800cba6 <LoRaMacMlmeRequest+0x166>
 800ca9e:	e8df f003 	tbb	[pc, r3]
 800caa2:	820d      	.short	0x820d
 800caa4:	423d3382 	.word	0x423d3382
 800caa8:	4b828282 	.word	0x4b828282
 800caac:	6a547382 	.word	0x6a547382
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800cab0:	2214      	movs	r2, #20
 800cab2:	2100      	movs	r1, #0
 800cab4:	484b      	ldr	r0, [pc, #300]	; (800cbe4 <LoRaMacMlmeRequest+0x1a4>)
 800cab6:	f004 fb3c 	bl	8011132 <memset1>
 800caba:	e7d9      	b.n	800ca70 <LoRaMacMlmeRequest+0x30>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800cabc:	4b48      	ldr	r3, [pc, #288]	; (800cbe0 <LoRaMacMlmeRequest+0x1a0>)
 800cabe:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800cac2:	f013 0f20 	tst.w	r3, #32
 800cac6:	d1c8      	bne.n	800ca5a <LoRaMacMlmeRequest+0x1a>
            ResetMacParameters( );
 800cac8:	f7fe fe40 	bl	800b74c <ResetMacParameters>
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800cacc:	4c46      	ldr	r4, [pc, #280]	; (800cbe8 <LoRaMacMlmeRequest+0x1a8>)
 800cace:	2200      	movs	r2, #0
 800cad0:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800cad4:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800cad8:	f001 fad3 	bl	800e082 <RegionAlternateDr>
 800cadc:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800cae0:	2307      	movs	r3, #7
 800cae2:	f88d 3005 	strb.w	r3, [sp, #5]
            status = SendReJoinReq( JOIN_REQ );
 800cae6:	20ff      	movs	r0, #255	; 0xff
 800cae8:	f7fe ff58 	bl	800b99c <SendReJoinReq>
            if( status != LORAMAC_STATUS_OK )
 800caec:	4604      	mov	r4, r0
 800caee:	2800      	cmp	r0, #0
 800caf0:	d05a      	beq.n	800cba8 <LoRaMacMlmeRequest+0x168>
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800caf2:	4e3d      	ldr	r6, [pc, #244]	; (800cbe8 <LoRaMacMlmeRequest+0x1a8>)
 800caf4:	2201      	movs	r2, #1
 800caf6:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800cafa:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 800cafe:	f001 fac0 	bl	800e082 <RegionAlternateDr>
 800cb02:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
 800cb06:	e04f      	b.n	800cba8 <LoRaMacMlmeRequest+0x168>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800cb08:	2200      	movs	r2, #0
 800cb0a:	4669      	mov	r1, sp
 800cb0c:	2002      	movs	r0, #2
 800cb0e:	f000 fa99 	bl	800d044 <LoRaMacCommandsAddCmd>
 800cb12:	4604      	mov	r4, r0
 800cb14:	2800      	cmp	r0, #0
 800cb16:	d047      	beq.n	800cba8 <LoRaMacMlmeRequest+0x168>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800cb18:	2413      	movs	r4, #19
 800cb1a:	e045      	b.n	800cba8 <LoRaMacMlmeRequest+0x168>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 800cb1c:	88a8      	ldrh	r0, [r5, #4]
 800cb1e:	f7fe ff67 	bl	800b9f0 <SetTxContinuousWave>
 800cb22:	4604      	mov	r4, r0
            break;
 800cb24:	e040      	b.n	800cba8 <LoRaMacMlmeRequest+0x168>
            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800cb26:	f995 200c 	ldrsb.w	r2, [r5, #12]
 800cb2a:	b2d2      	uxtb	r2, r2
 800cb2c:	68a9      	ldr	r1, [r5, #8]
 800cb2e:	88a8      	ldrh	r0, [r5, #4]
 800cb30:	f7fd f828 	bl	8009b84 <SetTxContinuousWave1>
 800cb34:	4604      	mov	r4, r0
            break;
 800cb36:	e037      	b.n	800cba8 <LoRaMacMlmeRequest+0x168>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800cb38:	2200      	movs	r2, #0
 800cb3a:	4669      	mov	r1, sp
 800cb3c:	200d      	movs	r0, #13
 800cb3e:	f000 fa81 	bl	800d044 <LoRaMacCommandsAddCmd>
 800cb42:	4604      	mov	r4, r0
 800cb44:	b380      	cbz	r0, 800cba8 <LoRaMacMlmeRequest+0x168>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800cb46:	2413      	movs	r4, #19
 800cb48:	e02e      	b.n	800cba8 <LoRaMacMlmeRequest+0x168>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800cb4a:	4b27      	ldr	r3, [pc, #156]	; (800cbe8 <LoRaMacMlmeRequest+0x1a8>)
 800cb4c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800cb50:	b10b      	cbz	r3, 800cb56 <LoRaMacMlmeRequest+0x116>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800cb52:	2402      	movs	r4, #2
 800cb54:	e028      	b.n	800cba8 <LoRaMacMlmeRequest+0x168>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800cb56:	792c      	ldrb	r4, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800cb58:	f004 0007 	and.w	r0, r4, #7
 800cb5c:	f000 f9cd 	bl	800cefa <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800cb60:	f88d 4000 	strb.w	r4, [sp]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800cb64:	2201      	movs	r2, #1
 800cb66:	4669      	mov	r1, sp
 800cb68:	2010      	movs	r0, #16
 800cb6a:	f000 fa6b 	bl	800d044 <LoRaMacCommandsAddCmd>
 800cb6e:	4604      	mov	r4, r0
 800cb70:	b1d0      	cbz	r0, 800cba8 <LoRaMacMlmeRequest+0x168>
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800cb72:	2413      	movs	r4, #19
 800cb74:	e018      	b.n	800cba8 <LoRaMacMlmeRequest+0x168>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800cb76:	2200      	movs	r2, #0
 800cb78:	4669      	mov	r1, sp
 800cb7a:	2012      	movs	r0, #18
 800cb7c:	f000 fa62 	bl	800d044 <LoRaMacCommandsAddCmd>
 800cb80:	4604      	mov	r4, r0
 800cb82:	b188      	cbz	r0, 800cba8 <LoRaMacMlmeRequest+0x168>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800cb84:	2413      	movs	r4, #19
 800cb86:	e00f      	b.n	800cba8 <LoRaMacMlmeRequest+0x168>
            queueElement.RestrictCommonReadyToHandle = true;
 800cb88:	2301      	movs	r3, #1
 800cb8a:	f88d 3007 	strb.w	r3, [sp, #7]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800cb8e:	f000 f9a5 	bl	800cedc <LoRaMacClassBIsAcquisitionInProgress>
 800cb92:	b108      	cbz	r0, 800cb98 <LoRaMacMlmeRequest+0x158>
                status = LORAMAC_STATUS_BUSY;
 800cb94:	2401      	movs	r4, #1
 800cb96:	e007      	b.n	800cba8 <LoRaMacMlmeRequest+0x168>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800cb98:	f000 f99d 	bl	800ced6 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800cb9c:	2000      	movs	r0, #0
 800cb9e:	f000 f99f 	bl	800cee0 <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 800cba2:	2400      	movs	r4, #0
 800cba4:	e000      	b.n	800cba8 <LoRaMacMlmeRequest+0x168>
    switch( mlmeRequest->Type )
 800cba6:	2402      	movs	r4, #2
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800cba8:	4b0d      	ldr	r3, [pc, #52]	; (800cbe0 <LoRaMacMlmeRequest+0x1a0>)
 800cbaa:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 800cbae:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 800cbb0:	b17c      	cbz	r4, 800cbd2 <LoRaMacMlmeRequest+0x192>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800cbb2:	f000 fc49 	bl	800d448 <LoRaMacConfirmQueueGetCnt>
 800cbb6:	2800      	cmp	r0, #0
 800cbb8:	f47f af4f 	bne.w	800ca5a <LoRaMacMlmeRequest+0x1a>
            MacCtx.NodeAckRequested = false;
 800cbbc:	4b08      	ldr	r3, [pc, #32]	; (800cbe0 <LoRaMacMlmeRequest+0x1a0>)
 800cbbe:	2100      	movs	r1, #0
 800cbc0:	f883 1414 	strb.w	r1, [r3, #1044]	; 0x414
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800cbc4:	f893 2485 	ldrb.w	r2, [r3, #1157]	; 0x485
 800cbc8:	f361 0282 	bfi	r2, r1, #2, #1
 800cbcc:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
 800cbd0:	e743      	b.n	800ca5a <LoRaMacMlmeRequest+0x1a>
        LoRaMacConfirmQueueAdd( &queueElement );
 800cbd2:	a801      	add	r0, sp, #4
 800cbd4:	f000 fb74 	bl	800d2c0 <LoRaMacConfirmQueueAdd>
 800cbd8:	e73f      	b.n	800ca5a <LoRaMacMlmeRequest+0x1a>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800cbda:	2403      	movs	r4, #3
 800cbdc:	e73d      	b.n	800ca5a <LoRaMacMlmeRequest+0x1a>
 800cbde:	bf00      	nop
 800cbe0:	200008e8 	.word	0x200008e8
 800cbe4:	20000d34 	.word	0x20000d34
 800cbe8:	20008000 	.word	0x20008000

0800cbec <LoRaMacMcpsRequest>:
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 800cbec:	2800      	cmp	r0, #0
 800cbee:	f000 80b0 	beq.w	800cd52 <LoRaMacMcpsRequest+0x166>
{
 800cbf2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbf6:	b088      	sub	sp, #32
 800cbf8:	460d      	mov	r5, r1
 800cbfa:	f04f 0800 	mov.w	r8, #0
 800cbfe:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( LoRaMacIsBusy( ) == true )
 800cc00:	f7ff f872 	bl	800bce8 <LoRaMacIsBusy>
 800cc04:	4606      	mov	r6, r0
 800cc06:	b118      	cbz	r0, 800cc10 <LoRaMacMcpsRequest+0x24>
    {
        return LORAMAC_STATUS_BUSY;
 800cc08:	2001      	movs	r0, #1

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 800cc0a:	b008      	add	sp, #32
 800cc0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    macHdr.Value = 0;
 800cc10:	4641      	mov	r1, r8
 800cc12:	f88d 8010 	strb.w	r8, [sp, #16]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800cc16:	4f51      	ldr	r7, [pc, #324]	; (800cd5c <LoRaMacMcpsRequest+0x170>)
 800cc18:	2214      	movs	r2, #20
 800cc1a:	f507 6087 	add.w	r0, r7, #1080	; 0x438
 800cc1e:	f004 fa88 	bl	8011132 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800cc22:	2301      	movs	r3, #1
 800cc24:	f887 3439 	strb.w	r3, [r7, #1081]	; 0x439
    MacCtx.AckTimeoutRetriesCounter = 1;
 800cc28:	f887 3412 	strb.w	r3, [r7, #1042]	; 0x412
    switch( mcpsRequest->Type )
 800cc2c:	7823      	ldrb	r3, [r4, #0]
 800cc2e:	2b01      	cmp	r3, #1
 800cc30:	d059      	beq.n	800cce6 <LoRaMacMcpsRequest+0xfa>
 800cc32:	2b03      	cmp	r3, #3
 800cc34:	d06f      	beq.n	800cd16 <LoRaMacMcpsRequest+0x12a>
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d042      	beq.n	800ccc0 <LoRaMacMcpsRequest+0xd4>
 800cc3a:	2700      	movs	r7, #0
 800cc3c:	46ba      	mov	sl, r7
 800cc3e:	46b9      	mov	r9, r7
    getPhy.Attribute = PHY_MIN_TX_DR;
 800cc40:	2302      	movs	r3, #2
 800cc42:	f88d 3018 	strb.w	r3, [sp, #24]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800cc46:	4b46      	ldr	r3, [pc, #280]	; (800cd60 <LoRaMacMcpsRequest+0x174>)
 800cc48:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800cc4c:	f88d 201a 	strb.w	r2, [sp, #26]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800cc50:	a906      	add	r1, sp, #24
 800cc52:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800cc56:	f001 f924 	bl	800dea2 <RegionGetPhyParam>
 800cc5a:	9005      	str	r0, [sp, #20]
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800cc5c:	b240      	sxtb	r0, r0
 800cc5e:	42b8      	cmp	r0, r7
 800cc60:	bfb8      	it	lt
 800cc62:	4638      	movlt	r0, r7
    if( readyToSend == true )
 800cc64:	2e00      	cmp	r6, #0
 800cc66:	d06e      	beq.n	800cd46 <LoRaMacMcpsRequest+0x15a>
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 800cc68:	4b3d      	ldr	r3, [pc, #244]	; (800cd60 <LoRaMacMcpsRequest+0x174>)
 800cc6a:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800cc6e:	b99b      	cbnz	r3, 800cc98 <LoRaMacMcpsRequest+0xac>
            verify.DatarateParams.Datarate = datarate;
 800cc70:	f88d 000c 	strb.w	r0, [sp, #12]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800cc74:	4b3a      	ldr	r3, [pc, #232]	; (800cd60 <LoRaMacMcpsRequest+0x174>)
 800cc76:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800cc7a:	f88d 200e 	strb.w	r2, [sp, #14]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800cc7e:	2205      	movs	r2, #5
 800cc80:	a903      	add	r1, sp, #12
 800cc82:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800cc86:	f001 f940 	bl	800df0a <RegionVerify>
 800cc8a:	2800      	cmp	r0, #0
 800cc8c:	d063      	beq.n	800cd56 <LoRaMacMcpsRequest+0x16a>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800cc8e:	f99d 200c 	ldrsb.w	r2, [sp, #12]
 800cc92:	4b33      	ldr	r3, [pc, #204]	; (800cd60 <LoRaMacMcpsRequest+0x174>)
 800cc94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800cc98:	9500      	str	r5, [sp, #0]
 800cc9a:	4643      	mov	r3, r8
 800cc9c:	4652      	mov	r2, sl
 800cc9e:	4649      	mov	r1, r9
 800cca0:	a804      	add	r0, sp, #16
 800cca2:	f7fe ff91 	bl	800bbc8 <Send>
        if( status == LORAMAC_STATUS_OK )
 800cca6:	2800      	cmp	r0, #0
 800cca8:	d148      	bne.n	800cd3c <LoRaMacMcpsRequest+0x150>
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 800ccaa:	7822      	ldrb	r2, [r4, #0]
 800ccac:	4b2b      	ldr	r3, [pc, #172]	; (800cd5c <LoRaMacMcpsRequest+0x170>)
 800ccae:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800ccb2:	f893 2485 	ldrb.w	r2, [r3, #1157]	; 0x485
 800ccb6:	f042 0201 	orr.w	r2, r2, #1
 800ccba:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
 800ccbe:	e043      	b.n	800cd48 <LoRaMacMcpsRequest+0x15c>
            MacCtx.AckTimeoutRetries = 1;
 800ccc0:	2601      	movs	r6, #1
 800ccc2:	f887 6411 	strb.w	r6, [r7, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800ccc6:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800ccca:	2202      	movs	r2, #2
 800cccc:	f362 1347 	bfi	r3, r2, #5, #3
 800ccd0:	f88d 3010 	strb.w	r3, [sp, #16]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 800ccd4:	f894 9004 	ldrb.w	r9, [r4, #4]
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 800ccd8:	f8d4 a008 	ldr.w	sl, [r4, #8]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 800ccdc:	f8b4 800c 	ldrh.w	r8, [r4, #12]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 800cce0:	f994 700e 	ldrsb.w	r7, [r4, #14]
            break;
 800cce4:	e7ac      	b.n	800cc40 <LoRaMacMcpsRequest+0x54>
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 800cce6:	7be3      	ldrb	r3, [r4, #15]
 800cce8:	2b08      	cmp	r3, #8
 800ccea:	bf28      	it	cs
 800ccec:	2308      	movcs	r3, #8
 800ccee:	4a1b      	ldr	r2, [pc, #108]	; (800cd5c <LoRaMacMcpsRequest+0x170>)
 800ccf0:	f882 3411 	strb.w	r3, [r2, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800ccf4:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800ccf8:	2204      	movs	r2, #4
 800ccfa:	f362 1347 	bfi	r3, r2, #5, #3
 800ccfe:	f88d 3010 	strb.w	r3, [sp, #16]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 800cd02:	f894 9004 	ldrb.w	r9, [r4, #4]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 800cd06:	f8d4 a008 	ldr.w	sl, [r4, #8]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 800cd0a:	f8b4 800c 	ldrh.w	r8, [r4, #12]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 800cd0e:	f994 700e 	ldrsb.w	r7, [r4, #14]
            readyToSend = true;
 800cd12:	2601      	movs	r6, #1
            break;
 800cd14:	e794      	b.n	800cc40 <LoRaMacMcpsRequest+0x54>
            MacCtx.AckTimeoutRetries = 1;
 800cd16:	2601      	movs	r6, #1
 800cd18:	4b10      	ldr	r3, [pc, #64]	; (800cd5c <LoRaMacMcpsRequest+0x170>)
 800cd1a:	f883 6411 	strb.w	r6, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800cd1e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800cd22:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800cd26:	f88d 3010 	strb.w	r3, [sp, #16]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 800cd2a:	f8d4 a004 	ldr.w	sl, [r4, #4]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 800cd2e:	f8b4 8008 	ldrh.w	r8, [r4, #8]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 800cd32:	f994 700a 	ldrsb.w	r7, [r4, #10]
    uint8_t fPort = 0;
 800cd36:	f04f 0900 	mov.w	r9, #0
            break;
 800cd3a:	e781      	b.n	800cc40 <LoRaMacMcpsRequest+0x54>
            MacCtx.NodeAckRequested = false;
 800cd3c:	4b07      	ldr	r3, [pc, #28]	; (800cd5c <LoRaMacMcpsRequest+0x170>)
 800cd3e:	2200      	movs	r2, #0
 800cd40:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 800cd44:	e000      	b.n	800cd48 <LoRaMacMcpsRequest+0x15c>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800cd46:	2002      	movs	r0, #2
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800cd48:	4b04      	ldr	r3, [pc, #16]	; (800cd5c <LoRaMacMcpsRequest+0x170>)
 800cd4a:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 800cd4e:	6123      	str	r3, [r4, #16]
    return status;
 800cd50:	e75b      	b.n	800cc0a <LoRaMacMcpsRequest+0x1e>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800cd52:	2003      	movs	r0, #3
}
 800cd54:	4770      	bx	lr
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800cd56:	2003      	movs	r0, #3
 800cd58:	e757      	b.n	800cc0a <LoRaMacMcpsRequest+0x1e>
 800cd5a:	bf00      	nop
 800cd5c:	200008e8 	.word	0x200008e8
 800cd60:	20008000 	.word	0x20008000

0800cd64 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800cd64:	b510      	push	{r4, lr}
 800cd66:	b082      	sub	sp, #8
 800cd68:	4604      	mov	r4, r0
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 800cd6a:	f88d 0004 	strb.w	r0, [sp, #4]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800cd6e:	220f      	movs	r2, #15
 800cd70:	a901      	add	r1, sp, #4
 800cd72:	4b05      	ldr	r3, [pc, #20]	; (800cd88 <LoRaMacTestSetDutyCycleOn+0x24>)
 800cd74:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800cd78:	f001 f8c7 	bl	800df0a <RegionVerify>
 800cd7c:	b110      	cbz	r0, 800cd84 <LoRaMacTestSetDutyCycleOn+0x20>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 800cd7e:	4b02      	ldr	r3, [pc, #8]	; (800cd88 <LoRaMacTestSetDutyCycleOn+0x24>)
 800cd80:	f883 4108 	strb.w	r4, [r3, #264]	; 0x108
    }
}
 800cd84:	b002      	add	sp, #8
 800cd86:	bd10      	pop	{r4, pc}
 800cd88:	20008000 	.word	0x20008000

0800cd8c <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 800cd8c:	b538      	push	{r3, r4, r5, lr}
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 800cd8e:	f7ff f9e9 	bl	800c164 <LoRaMacStop>
 800cd92:	b110      	cbz	r0, 800cd9a <LoRaMacDeInitialization+0xe>
        // Return success
        return LORAMAC_STATUS_OK;
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 800cd94:	2401      	movs	r4, #1
    }
}
 800cd96:	4620      	mov	r0, r4
 800cd98:	bd38      	pop	{r3, r4, r5, pc}
 800cd9a:	4604      	mov	r4, r0
        TimerStop( &MacCtx.TxDelayedTimer );
 800cd9c:	4d0c      	ldr	r5, [pc, #48]	; (800cdd0 <LoRaMacDeInitialization+0x44>)
 800cd9e:	f505 705a 	add.w	r0, r5, #872	; 0x368
 800cda2:	f006 fbab 	bl	80134fc <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 800cda6:	f505 7060 	add.w	r0, r5, #896	; 0x380
 800cdaa:	f006 fba7 	bl	80134fc <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 800cdae:	f505 7066 	add.w	r0, r5, #920	; 0x398
 800cdb2:	f006 fba3 	bl	80134fc <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.AckTimeoutTimer );
 800cdb6:	f505 707e 	add.w	r0, r5, #1016	; 0x3f8
 800cdba:	f006 fb9f 	bl	80134fc <UTIL_TIMER_Stop>
        LoRaMacClassBHaltBeaconing( );
 800cdbe:	f000 f89d 	bl	800cefc <LoRaMacClassBHaltBeaconing>
        ResetMacParameters( );
 800cdc2:	f7fe fcc3 	bl	800b74c <ResetMacParameters>
        Radio.Sleep( );
 800cdc6:	4b03      	ldr	r3, [pc, #12]	; (800cdd4 <LoRaMacDeInitialization+0x48>)
 800cdc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdca:	4798      	blx	r3
        return LORAMAC_STATUS_OK;
 800cdcc:	e7e3      	b.n	800cd96 <LoRaMacDeInitialization+0xa>
 800cdce:	bf00      	nop
 800cdd0:	200008e8 	.word	0x200008e8
 800cdd4:	08014bf0 	.word	0x08014bf0

0800cdd8 <CalcNextV10X>:
#include "LoRaMacAdr.h"
#include "LoRaMacVersion.h"

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800cdd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cddc:	b089      	sub	sp, #36	; 0x24
 800cdde:	460f      	mov	r7, r1
 800cde0:	4616      	mov	r6, r2
 800cde2:	461d      	mov	r5, r3
    bool adrAckReq = false;
    int8_t datarate = adrNext->Datarate;
 800cde4:	f990 9010 	ldrsb.w	r9, [r0, #16]
    int8_t txPower = adrNext->TxPower;
 800cde8:	f990 b011 	ldrsb.w	fp, [r0, #17]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 800cdec:	6883      	ldr	r3, [r0, #8]
 800cdee:	602b      	str	r3, [r5, #0]

    if( adrNext->AdrEnabled == true )
 800cdf0:	f890 8005 	ldrb.w	r8, [r0, #5]
 800cdf4:	f1b8 0f00 	cmp.w	r8, #0
 800cdf8:	d107      	bne.n	800ce0a <CalcNextV10X+0x32>
                }
            }
        }
    }

    *drOut = datarate;
 800cdfa:	f887 9000 	strb.w	r9, [r7]
    *txPowOut = txPower;
 800cdfe:	f886 b000 	strb.w	fp, [r6]
    return adrAckReq;
}
 800ce02:	4640      	mov	r0, r8
 800ce04:	b009      	add	sp, #36	; 0x24
 800ce06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce0a:	4604      	mov	r4, r0
        getPhy.Attribute = PHY_MIN_TX_DR;
 800ce0c:	2302      	movs	r3, #2
 800ce0e:	f88d 3018 	strb.w	r3, [sp, #24]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800ce12:	7c83      	ldrb	r3, [r0, #18]
 800ce14:	f88d 301a 	strb.w	r3, [sp, #26]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800ce18:	a906      	add	r1, sp, #24
 800ce1a:	7cc0      	ldrb	r0, [r0, #19]
 800ce1c:	f001 f841 	bl	800dea2 <RegionGetPhyParam>
 800ce20:	9005      	str	r0, [sp, #20]
        minTxDatarate = phyParam.Value;
 800ce22:	fa4f fa80 	sxtb.w	sl, r0
        datarate = MAX( datarate, minTxDatarate );
 800ce26:	464a      	mov	r2, r9
 800ce28:	45d1      	cmp	r9, sl
 800ce2a:	bfb8      	it	lt
 800ce2c:	4652      	movlt	r2, sl
 800ce2e:	9201      	str	r2, [sp, #4]
        if( datarate == minTxDatarate )
 800ce30:	45d1      	cmp	r9, sl
 800ce32:	dc04      	bgt.n	800ce3e <CalcNextV10X+0x66>
            *adrAckCounter = 0;
 800ce34:	2300      	movs	r3, #0
 800ce36:	602b      	str	r3, [r5, #0]
        datarate = MAX( datarate, minTxDatarate );
 800ce38:	4691      	mov	r9, r2
            adrAckReq = false;
 800ce3a:	4698      	mov	r8, r3
 800ce3c:	e7dd      	b.n	800cdfa <CalcNextV10X+0x22>
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800ce3e:	68a2      	ldr	r2, [r4, #8]
 800ce40:	89a3      	ldrh	r3, [r4, #12]
 800ce42:	429a      	cmp	r2, r3
 800ce44:	d201      	bcs.n	800ce4a <CalcNextV10X+0x72>
                adrAckReq = false;
 800ce46:	f04f 0800 	mov.w	r8, #0
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800ce4a:	89e1      	ldrh	r1, [r4, #14]
 800ce4c:	440b      	add	r3, r1
 800ce4e:	429a      	cmp	r2, r3
 800ce50:	d202      	bcs.n	800ce58 <CalcNextV10X+0x80>
        datarate = MAX( datarate, minTxDatarate );
 800ce52:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ce56:	e7d0      	b.n	800cdfa <CalcNextV10X+0x22>
                getPhy.Attribute = PHY_MAX_TX_POWER;
 800ce58:	2308      	movs	r3, #8
 800ce5a:	f88d 3018 	strb.w	r3, [sp, #24]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800ce5e:	a906      	add	r1, sp, #24
 800ce60:	7ce0      	ldrb	r0, [r4, #19]
 800ce62:	f001 f81e 	bl	800dea2 <RegionGetPhyParam>
 800ce66:	9005      	str	r0, [sp, #20]
                txPower = phyParam.Value;
 800ce68:	fa4f fb80 	sxtb.w	fp, r0
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800ce6c:	68a3      	ldr	r3, [r4, #8]
 800ce6e:	89e2      	ldrh	r2, [r4, #14]
 800ce70:	fbb3 f1f2 	udiv	r1, r3, r2
 800ce74:	fb02 3311 	mls	r3, r2, r1, r3
 800ce78:	2b01      	cmp	r3, #1
 800ce7a:	d002      	beq.n	800ce82 <CalcNextV10X+0xaa>
        datarate = MAX( datarate, minTxDatarate );
 800ce7c:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ce80:	e7bb      	b.n	800cdfa <CalcNextV10X+0x22>
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800ce82:	2322      	movs	r3, #34	; 0x22
 800ce84:	f88d 3018 	strb.w	r3, [sp, #24]
                    getPhy.Datarate = datarate;
 800ce88:	9b01      	ldr	r3, [sp, #4]
 800ce8a:	f88d 3019 	strb.w	r3, [sp, #25]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800ce8e:	7ca3      	ldrb	r3, [r4, #18]
 800ce90:	f88d 301a 	strb.w	r3, [sp, #26]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800ce94:	a906      	add	r1, sp, #24
 800ce96:	7ce0      	ldrb	r0, [r4, #19]
 800ce98:	f001 f803 	bl	800dea2 <RegionGetPhyParam>
 800ce9c:	9005      	str	r0, [sp, #20]
                    datarate = phyParam.Value;
 800ce9e:	fa4f f980 	sxtb.w	r9, r0
                    if( datarate == minTxDatarate )
 800cea2:	45ca      	cmp	sl, r9
 800cea4:	d1a9      	bne.n	800cdfa <CalcNextV10X+0x22>
                        if( adrNext->UpdateChanMask == true )
 800cea6:	f894 8004 	ldrb.w	r8, [r4, #4]
 800ceaa:	f1b8 0f00 	cmp.w	r8, #0
 800ceae:	d0a4      	beq.n	800cdfa <CalcNextV10X+0x22>
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800ceb0:	2302      	movs	r3, #2
 800ceb2:	f88d 3010 	strb.w	r3, [sp, #16]
                            RegionInitDefaults( adrNext->Region, &params );
 800ceb6:	a902      	add	r1, sp, #8
 800ceb8:	7ce0      	ldrb	r0, [r4, #19]
 800ceba:	f001 f818 	bl	800deee <RegionInitDefaults>
                        adrAckReq = false;
 800cebe:	f04f 0800 	mov.w	r8, #0
 800cec2:	e79a      	b.n	800cdfa <CalcNextV10X+0x22>

0800cec4 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800cec4:	b510      	push	{r4, lr}
    if( adrNext->Version.Fields.Minor == 0 )
 800cec6:	7884      	ldrb	r4, [r0, #2]
 800cec8:	b10c      	cbz	r4, 800cece <LoRaMacAdrCalcNext+0xa>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
    }
    return false;
 800ceca:	2000      	movs	r0, #0
}
 800cecc:	bd10      	pop	{r4, pc}
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 800cece:	f7ff ff83 	bl	800cdd8 <CalcNextV10X>
 800ced2:	e7fb      	b.n	800cecc <LoRaMacAdrCalcNext+0x8>

0800ced4 <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ced4:	4770      	bx	lr

0800ced6 <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ced6:	4770      	bx	lr

0800ced8 <LoRaMacClassBSetPingSlotState>:
void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ced8:	4770      	bx	lr

0800ceda <LoRaMacClassBSetMulticastSlotState>:
void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ceda:	4770      	bx	lr

0800cedc <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cedc:	2000      	movs	r0, #0
 800cede:	4770      	bx	lr

0800cee0 <LoRaMacClassBBeaconTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cee0:	4770      	bx	lr

0800cee2 <LoRaMacClassBPingSlotTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cee2:	4770      	bx	lr

0800cee4 <LoRaMacClassBMulticastSlotTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cee4:	4770      	bx	lr

0800cee6 <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cee6:	2000      	movs	r0, #0
 800cee8:	4770      	bx	lr

0800ceea <LoRaMacClassBIsBeaconExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ceea:	2000      	movs	r0, #0
 800ceec:	4770      	bx	lr

0800ceee <LoRaMacClassBIsPingExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ceee:	2000      	movs	r0, #0
 800cef0:	4770      	bx	lr

0800cef2 <LoRaMacClassBIsMulticastExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cef2:	2000      	movs	r0, #0
 800cef4:	4770      	bx	lr

0800cef6 <LoRaMacClassBIsBeaconModeActive>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cef6:	2000      	movs	r0, #0
 800cef8:	4770      	bx	lr

0800cefa <LoRaMacClassBSetPingSlotInfo>:
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cefa:	4770      	bx	lr

0800cefc <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cefc:	4770      	bx	lr

0800cefe <LoRaMacClassBResumeBeaconing>:
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cefe:	4770      	bx	lr

0800cf00 <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cf00:	2002      	movs	r0, #2
 800cf02:	4770      	bx	lr

0800cf04 <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cf04:	2002      	movs	r0, #2
 800cf06:	4770      	bx	lr

0800cf08 <LoRaMacMibClassBSetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cf08:	2002      	movs	r0, #2
 800cf0a:	4770      	bx	lr

0800cf0c <LoRaMacClassBPingSlotInfoAns>:
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cf0c:	4770      	bx	lr

0800cf0e <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cf0e:	2000      	movs	r0, #0
 800cf10:	4770      	bx	lr

0800cf12 <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cf12:	4770      	bx	lr

0800cf14 <LoRaMacClassBDeviceTimeAns>:
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cf14:	4770      	bx	lr

0800cf16 <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cf16:	2000      	movs	r0, #0
 800cf18:	4770      	bx	lr

0800cf1a <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cf1a:	2000      	movs	r0, #0
 800cf1c:	4770      	bx	lr

0800cf1e <LoRaMacClassBStopRxSlots>:
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cf1e:	4770      	bx	lr

0800cf20 <LoRaMacClassBProcess>:
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cf20:	4770      	bx	lr

0800cf22 <IsSlotFree>:
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
    uint8_t* mem = ( uint8_t* )slot;

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800cf22:	2300      	movs	r3, #0
 800cf24:	2b0f      	cmp	r3, #15
 800cf26:	d804      	bhi.n	800cf32 <IsSlotFree+0x10>
    {
        if( mem[size] != 0x00 )
 800cf28:	5cc2      	ldrb	r2, [r0, r3]
 800cf2a:	b922      	cbnz	r2, 800cf36 <IsSlotFree+0x14>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800cf2c:	3301      	adds	r3, #1
 800cf2e:	b29b      	uxth	r3, r3
 800cf30:	e7f8      	b.n	800cf24 <IsSlotFree+0x2>
        {
            return false;
        }
    }
    return true;
 800cf32:	2001      	movs	r0, #1
 800cf34:	4770      	bx	lr
            return false;
 800cf36:	2000      	movs	r0, #0
}
 800cf38:	4770      	bx	lr
	...

0800cf3c <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 800cf3c:	b538      	push	{r3, r4, r5, lr}
    uint8_t itr = 0;
 800cf3e:	2400      	movs	r4, #0

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800cf40:	0125      	lsls	r5, r4, #4
 800cf42:	f105 0308 	add.w	r3, r5, #8
 800cf46:	4d06      	ldr	r5, [pc, #24]	; (800cf60 <MallocNewMacCommandSlot+0x24>)
 800cf48:	441d      	add	r5, r3
 800cf4a:	4628      	mov	r0, r5
 800cf4c:	f7ff ffe9 	bl	800cf22 <IsSlotFree>
 800cf50:	b920      	cbnz	r0, 800cf5c <MallocNewMacCommandSlot+0x20>
    {
        itr++;
 800cf52:	3401      	adds	r4, #1
 800cf54:	b2e4      	uxtb	r4, r4
        if( itr == NUM_OF_MAC_COMMANDS )
 800cf56:	2c0f      	cmp	r4, #15
 800cf58:	d1f2      	bne.n	800cf40 <MallocNewMacCommandSlot+0x4>
        {
            return NULL;
 800cf5a:	2500      	movs	r5, #0
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
}
 800cf5c:	4628      	mov	r0, r5
 800cf5e:	bd38      	pop	{r3, r4, r5, pc}
 800cf60:	20000e08 	.word	0x20000e08

0800cf64 <LinkedListInit>:
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
    if( list == NULL )
 800cf64:	b120      	cbz	r0, 800cf70 <LinkedListInit+0xc>
    {
        return false;
    }

    list->First = NULL;
 800cf66:	2200      	movs	r2, #0
 800cf68:	6002      	str	r2, [r0, #0]
    list->Last = NULL;
 800cf6a:	6042      	str	r2, [r0, #4]

    return true;
 800cf6c:	2001      	movs	r0, #1
 800cf6e:	4770      	bx	lr
        return false;
 800cf70:	2000      	movs	r0, #0
}
 800cf72:	4770      	bx	lr

0800cf74 <LinkedListAdd>:
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800cf74:	4603      	mov	r3, r0
 800cf76:	b160      	cbz	r0, 800cf92 <LinkedListAdd+0x1e>
 800cf78:	b169      	cbz	r1, 800cf96 <LinkedListAdd+0x22>
    {
        return false;
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 800cf7a:	6802      	ldr	r2, [r0, #0]
 800cf7c:	b13a      	cbz	r2, 800cf8e <LinkedListAdd+0x1a>
    {
        list->First = element;
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 800cf7e:	685a      	ldr	r2, [r3, #4]
 800cf80:	b102      	cbz	r2, 800cf84 <LinkedListAdd+0x10>
    {
        list->Last->Next = element;
 800cf82:	6011      	str	r1, [r2, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 800cf84:	2200      	movs	r2, #0
 800cf86:	600a      	str	r2, [r1, #0]

    // Update the last entry of the list.
    list->Last = element;
 800cf88:	6059      	str	r1, [r3, #4]

    return true;
 800cf8a:	2001      	movs	r0, #1
 800cf8c:	4770      	bx	lr
        list->First = element;
 800cf8e:	6001      	str	r1, [r0, #0]
 800cf90:	e7f5      	b.n	800cf7e <LinkedListAdd+0xa>
        return false;
 800cf92:	2000      	movs	r0, #0
 800cf94:	4770      	bx	lr
 800cf96:	2000      	movs	r0, #0
}
 800cf98:	4770      	bx	lr

0800cf9a <LinkedListGetPrevious>:
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800cf9a:	b160      	cbz	r0, 800cfb6 <LinkedListGetPrevious+0x1c>
 800cf9c:	b161      	cbz	r1, 800cfb8 <LinkedListGetPrevious+0x1e>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 800cf9e:	6800      	ldr	r0, [r0, #0]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 800cfa0:	4281      	cmp	r1, r0
 800cfa2:	d102      	bne.n	800cfaa <LinkedListGetPrevious+0x10>
            curElement = curElement->Next;
        }
    }
    else
    {
        curElement = NULL;
 800cfa4:	2000      	movs	r0, #0
    }

    return curElement;
}
 800cfa6:	4770      	bx	lr
            curElement = curElement->Next;
 800cfa8:	4618      	mov	r0, r3
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800cfaa:	2800      	cmp	r0, #0
 800cfac:	d0fb      	beq.n	800cfa6 <LinkedListGetPrevious+0xc>
 800cfae:	6803      	ldr	r3, [r0, #0]
 800cfb0:	428b      	cmp	r3, r1
 800cfb2:	d1f9      	bne.n	800cfa8 <LinkedListGetPrevious+0xe>
 800cfb4:	4770      	bx	lr
 800cfb6:	4770      	bx	lr
        return NULL;
 800cfb8:	4608      	mov	r0, r1
 800cfba:	4770      	bx	lr

0800cfbc <LinkedListRemove>:
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800cfbc:	b1b8      	cbz	r0, 800cfee <LinkedListRemove+0x32>
{
 800cfbe:	b538      	push	{r3, r4, r5, lr}
 800cfc0:	460c      	mov	r4, r1
 800cfc2:	4605      	mov	r5, r0
    if( ( list == NULL ) || ( element == NULL ) )
 800cfc4:	b1a9      	cbz	r1, 800cff2 <LinkedListRemove+0x36>
    {
        return false;
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 800cfc6:	f7ff ffe8 	bl	800cf9a <LinkedListGetPrevious>

    if( list->First == element )
 800cfca:	682b      	ldr	r3, [r5, #0]
 800cfcc:	42a3      	cmp	r3, r4
 800cfce:	d009      	beq.n	800cfe4 <LinkedListRemove+0x28>
    {
        list->First = element->Next;
    }

    if( list->Last == element )
 800cfd0:	686b      	ldr	r3, [r5, #4]
 800cfd2:	42a3      	cmp	r3, r4
 800cfd4:	d009      	beq.n	800cfea <LinkedListRemove+0x2e>
    {
        list->Last = PrevElement;
    }

    if( PrevElement != NULL )
 800cfd6:	b108      	cbz	r0, 800cfdc <LinkedListRemove+0x20>
    {
        PrevElement->Next = element->Next;
 800cfd8:	6823      	ldr	r3, [r4, #0]
 800cfda:	6003      	str	r3, [r0, #0]
    }

    element->Next = NULL;
 800cfdc:	2300      	movs	r3, #0
 800cfde:	6023      	str	r3, [r4, #0]

    return true;
 800cfe0:	2001      	movs	r0, #1
}
 800cfe2:	bd38      	pop	{r3, r4, r5, pc}
        list->First = element->Next;
 800cfe4:	6823      	ldr	r3, [r4, #0]
 800cfe6:	602b      	str	r3, [r5, #0]
 800cfe8:	e7f2      	b.n	800cfd0 <LinkedListRemove+0x14>
        list->Last = PrevElement;
 800cfea:	6068      	str	r0, [r5, #4]
 800cfec:	e7f3      	b.n	800cfd6 <LinkedListRemove+0x1a>
        return false;
 800cfee:	2000      	movs	r0, #0
}
 800cff0:	4770      	bx	lr
        return false;
 800cff2:	2000      	movs	r0, #0
 800cff4:	e7f5      	b.n	800cfe2 <LinkedListRemove+0x26>

0800cff6 <IsSticky>:
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
    switch( cid )
 800cff6:	2805      	cmp	r0, #5
 800cff8:	d006      	beq.n	800d008 <IsSticky+0x12>
 800cffa:	d307      	bcc.n	800d00c <IsSticky+0x16>
 800cffc:	3808      	subs	r0, #8
 800cffe:	b2c0      	uxtb	r0, r0
 800d000:	2802      	cmp	r0, #2
 800d002:	d905      	bls.n	800d010 <IsSticky+0x1a>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
        default:
            return false;
 800d004:	2000      	movs	r0, #0
 800d006:	4770      	bx	lr
    switch( cid )
 800d008:	2001      	movs	r0, #1
 800d00a:	4770      	bx	lr
            return false;
 800d00c:	2000      	movs	r0, #0
 800d00e:	4770      	bx	lr
    switch( cid )
 800d010:	2001      	movs	r0, #1
    }
}
 800d012:	4770      	bx	lr

0800d014 <FreeMacCommandSlot>:
    if( slot == NULL )
 800d014:	b130      	cbz	r0, 800d024 <FreeMacCommandSlot+0x10>
{
 800d016:	b508      	push	{r3, lr}
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800d018:	2210      	movs	r2, #16
 800d01a:	2100      	movs	r1, #0
 800d01c:	f004 f889 	bl	8011132 <memset1>
    return true;
 800d020:	2001      	movs	r0, #1
}
 800d022:	bd08      	pop	{r3, pc}
        return false;
 800d024:	2000      	movs	r0, #0
}
 800d026:	4770      	bx	lr

0800d028 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800d028:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800d02a:	4c05      	ldr	r4, [pc, #20]	; (800d040 <LoRaMacCommandsInit+0x18>)
 800d02c:	22fc      	movs	r2, #252	; 0xfc
 800d02e:	2100      	movs	r1, #0
 800d030:	4620      	mov	r0, r4
 800d032:	f004 f87e 	bl	8011132 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 800d036:	4620      	mov	r0, r4
 800d038:	f7ff ff94 	bl	800cf64 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800d03c:	2000      	movs	r0, #0
 800d03e:	bd10      	pop	{r4, pc}
 800d040:	20000e08 	.word	0x20000e08

0800d044 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
    if( payload == NULL )
 800d044:	b301      	cbz	r1, 800d088 <LoRaMacCommandsAddCmd+0x44>
{
 800d046:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d048:	4605      	mov	r5, r0
 800d04a:	4614      	mov	r4, r2
 800d04c:	460f      	mov	r7, r1
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 800d04e:	f7ff ff75 	bl	800cf3c <MallocNewMacCommandSlot>

    if( newCmd == NULL )
 800d052:	4606      	mov	r6, r0
 800d054:	b1d0      	cbz	r0, 800d08c <LoRaMacCommandsAddCmd+0x48>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 800d056:	4601      	mov	r1, r0
 800d058:	480e      	ldr	r0, [pc, #56]	; (800d094 <LoRaMacCommandsAddCmd+0x50>)
 800d05a:	f7ff ff8b 	bl	800cf74 <LinkedListAdd>
 800d05e:	b1b8      	cbz	r0, 800d090 <LoRaMacCommandsAddCmd+0x4c>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 800d060:	7135      	strb	r5, [r6, #4]
    newCmd->PayloadSize = payloadSize;
 800d062:	60b4      	str	r4, [r6, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800d064:	b2a2      	uxth	r2, r4
 800d066:	4639      	mov	r1, r7
 800d068:	1d70      	adds	r0, r6, #5
 800d06a:	f004 f84a 	bl	8011102 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 800d06e:	4628      	mov	r0, r5
 800d070:	f7ff ffc1 	bl	800cff6 <IsSticky>
 800d074:	7330      	strb	r0, [r6, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800d076:	4b07      	ldr	r3, [pc, #28]	; (800d094 <LoRaMacCommandsAddCmd+0x50>)
 800d078:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 800d07c:	4414      	add	r4, r2
 800d07e:	3401      	adds	r4, #1
 800d080:	f8c3 40f8 	str.w	r4, [r3, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 800d084:	2000      	movs	r0, #0
}
 800d086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800d088:	2001      	movs	r0, #1
}
 800d08a:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800d08c:	2002      	movs	r0, #2
 800d08e:	e7fa      	b.n	800d086 <LoRaMacCommandsAddCmd+0x42>
        return LORAMAC_COMMANDS_ERROR;
 800d090:	2005      	movs	r0, #5
 800d092:	e7f8      	b.n	800d086 <LoRaMacCommandsAddCmd+0x42>
 800d094:	20000e08 	.word	0x20000e08

0800d098 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
    if( macCmd == NULL )
 800d098:	b1a0      	cbz	r0, 800d0c4 <LoRaMacCommandsRemoveCmd+0x2c>
{
 800d09a:	b510      	push	{r4, lr}
 800d09c:	4604      	mov	r4, r0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 800d09e:	4601      	mov	r1, r0
 800d0a0:	480b      	ldr	r0, [pc, #44]	; (800d0d0 <LoRaMacCommandsRemoveCmd+0x38>)
 800d0a2:	f7ff ff8b 	bl	800cfbc <LinkedListRemove>
 800d0a6:	b178      	cbz	r0, 800d0c8 <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800d0a8:	68a1      	ldr	r1, [r4, #8]
 800d0aa:	4a09      	ldr	r2, [pc, #36]	; (800d0d0 <LoRaMacCommandsRemoveCmd+0x38>)
 800d0ac:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
 800d0b0:	1a5b      	subs	r3, r3, r1
 800d0b2:	3b01      	subs	r3, #1
 800d0b4:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 800d0b8:	4620      	mov	r0, r4
 800d0ba:	f7ff ffab 	bl	800d014 <FreeMacCommandSlot>
 800d0be:	b128      	cbz	r0, 800d0cc <LoRaMacCommandsRemoveCmd+0x34>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800d0c0:	2000      	movs	r0, #0
}
 800d0c2:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800d0c4:	2001      	movs	r0, #1
}
 800d0c6:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800d0c8:	2003      	movs	r0, #3
 800d0ca:	e7fa      	b.n	800d0c2 <LoRaMacCommandsRemoveCmd+0x2a>
        return LORAMAC_COMMANDS_ERROR;
 800d0cc:	2005      	movs	r0, #5
 800d0ce:	e7f8      	b.n	800d0c2 <LoRaMacCommandsRemoveCmd+0x2a>
 800d0d0:	20000e08 	.word	0x20000e08

0800d0d4 <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800d0d4:	4b0a      	ldr	r3, [pc, #40]	; (800d100 <LoRaMacCommandsRemoveNoneStickyCmds+0x2c>)
 800d0d6:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800d0d8:	b120      	cbz	r0, 800d0e4 <LoRaMacCommandsRemoveNoneStickyCmds+0x10>
    {
        if( curElement->IsSticky == false )
 800d0da:	7b03      	ldrb	r3, [r0, #12]
 800d0dc:	b11b      	cbz	r3, 800d0e6 <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
            curElement = nexElement;
        }
        else
        {
            curElement = curElement->Next;
 800d0de:	6800      	ldr	r0, [r0, #0]
 800d0e0:	e7fa      	b.n	800d0d8 <LoRaMacCommandsRemoveNoneStickyCmds+0x4>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800d0e2:	bd10      	pop	{r4, pc}
 800d0e4:	4770      	bx	lr
{
 800d0e6:	b510      	push	{r4, lr}
            nexElement = curElement->Next;
 800d0e8:	6804      	ldr	r4, [r0, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 800d0ea:	f7ff ffd5 	bl	800d098 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 800d0ee:	4620      	mov	r0, r4
    while( curElement != NULL )
 800d0f0:	2800      	cmp	r0, #0
 800d0f2:	d0f6      	beq.n	800d0e2 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        if( curElement->IsSticky == false )
 800d0f4:	7b03      	ldrb	r3, [r0, #12]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d0f6      	beq.n	800d0e8 <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
            curElement = curElement->Next;
 800d0fa:	6800      	ldr	r0, [r0, #0]
 800d0fc:	e7f8      	b.n	800d0f0 <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>
 800d0fe:	bf00      	nop
 800d100:	20000e08 	.word	0x20000e08

0800d104 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800d104:	b538      	push	{r3, r4, r5, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800d106:	4b08      	ldr	r3, [pc, #32]	; (800d128 <LoRaMacCommandsRemoveStickyAnsCmds+0x24>)
 800d108:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800d10a:	e000      	b.n	800d10e <LoRaMacCommandsRemoveStickyAnsCmds+0xa>
{
 800d10c:	462c      	mov	r4, r5
    while( curElement != NULL )
 800d10e:	b14c      	cbz	r4, 800d124 <LoRaMacCommandsRemoveStickyAnsCmds+0x20>
    {
        nexElement = curElement->Next;
 800d110:	6825      	ldr	r5, [r4, #0]
        if( IsSticky( curElement->CID ) == true )
 800d112:	7920      	ldrb	r0, [r4, #4]
 800d114:	f7ff ff6f 	bl	800cff6 <IsSticky>
 800d118:	2800      	cmp	r0, #0
 800d11a:	d0f7      	beq.n	800d10c <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 800d11c:	4620      	mov	r0, r4
 800d11e:	f7ff ffbb 	bl	800d098 <LoRaMacCommandsRemoveCmd>
 800d122:	e7f3      	b.n	800d10c <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800d124:	2000      	movs	r0, #0
 800d126:	bd38      	pop	{r3, r4, r5, pc}
 800d128:	20000e08 	.word	0x20000e08

0800d12c <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 800d12c:	b128      	cbz	r0, 800d13a <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
 800d12e:	4a04      	ldr	r2, [pc, #16]	; (800d140 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800d130:	f8d2 20f8 	ldr.w	r2, [r2, #248]	; 0xf8
 800d134:	6002      	str	r2, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800d136:	2000      	movs	r0, #0
 800d138:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800d13a:	2001      	movs	r0, #1
}
 800d13c:	4770      	bx	lr
 800d13e:	bf00      	nop
 800d140:	20000e08 	.word	0x20000e08

0800d144 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800d144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800d148:	4b16      	ldr	r3, [pc, #88]	; (800d1a4 <LoRaMacCommandsSerializeCmds+0x60>)
 800d14a:	681c      	ldr	r4, [r3, #0]
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800d14c:	b32a      	cbz	r2, 800d19a <LoRaMacCommandsSerializeCmds+0x56>
 800d14e:	4607      	mov	r7, r0
 800d150:	4688      	mov	r8, r1
 800d152:	4616      	mov	r6, r2
 800d154:	b319      	cbz	r1, 800d19e <LoRaMacCommandsSerializeCmds+0x5a>
    uint8_t itr = 0;
 800d156:	2100      	movs	r1, #0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800d158:	b194      	cbz	r4, 800d180 <LoRaMacCommandsSerializeCmds+0x3c>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800d15a:	1a7a      	subs	r2, r7, r1
 800d15c:	68a3      	ldr	r3, [r4, #8]
 800d15e:	3301      	adds	r3, #1
 800d160:	429a      	cmp	r2, r3
 800d162:	d30d      	bcc.n	800d180 <LoRaMacCommandsSerializeCmds+0x3c>
        {
            buffer[itr++] = curElement->CID;
 800d164:	1c4d      	adds	r5, r1, #1
 800d166:	b2ed      	uxtb	r5, r5
 800d168:	7923      	ldrb	r3, [r4, #4]
 800d16a:	5473      	strb	r3, [r6, r1]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800d16c:	8922      	ldrh	r2, [r4, #8]
 800d16e:	1d61      	adds	r1, r4, #5
 800d170:	1970      	adds	r0, r6, r5
 800d172:	f003 ffc6 	bl	8011102 <memcpy1>
            itr += curElement->PayloadSize;
 800d176:	68a3      	ldr	r3, [r4, #8]
 800d178:	441d      	add	r5, r3
 800d17a:	b2e9      	uxtb	r1, r5
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 800d17c:	6824      	ldr	r4, [r4, #0]
 800d17e:	e7eb      	b.n	800d158 <LoRaMacCommandsSerializeCmds+0x14>
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 800d180:	b12c      	cbz	r4, 800d18e <LoRaMacCommandsSerializeCmds+0x4a>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 800d182:	6825      	ldr	r5, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800d184:	4620      	mov	r0, r4
 800d186:	f7ff ff87 	bl	800d098 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 800d18a:	462c      	mov	r4, r5
 800d18c:	e7f8      	b.n	800d180 <LoRaMacCommandsSerializeCmds+0x3c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800d18e:	4640      	mov	r0, r8
 800d190:	f7ff ffcc 	bl	800d12c <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800d194:	2000      	movs	r0, #0
}
 800d196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800d19a:	2001      	movs	r0, #1
 800d19c:	e7fb      	b.n	800d196 <LoRaMacCommandsSerializeCmds+0x52>
 800d19e:	2001      	movs	r0, #1
 800d1a0:	e7f9      	b.n	800d196 <LoRaMacCommandsSerializeCmds+0x52>
 800d1a2:	bf00      	nop
 800d1a4:	20000e08 	.word	0x20000e08

0800d1a8 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
    if( cmdsPending == NULL )
 800d1a8:	4601      	mov	r1, r0
 800d1aa:	b170      	cbz	r0, 800d1ca <LoRaMacCommandsStickyCmdsPending+0x22>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 800d1ac:	4b08      	ldr	r3, [pc, #32]	; (800d1d0 <LoRaMacCommandsStickyCmdsPending+0x28>)
 800d1ae:	681b      	ldr	r3, [r3, #0]

    *cmdsPending = false;
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	7002      	strb	r2, [r0, #0]

    // Loop through all elements
    while( curElement != NULL )
 800d1b4:	b13b      	cbz	r3, 800d1c6 <LoRaMacCommandsStickyCmdsPending+0x1e>
    {
        if( curElement->IsSticky == true )
 800d1b6:	7b1a      	ldrb	r2, [r3, #12]
 800d1b8:	b90a      	cbnz	r2, 800d1be <LoRaMacCommandsStickyCmdsPending+0x16>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
            return LORAMAC_COMMANDS_SUCCESS;
        }
        curElement = curElement->Next;
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	e7fa      	b.n	800d1b4 <LoRaMacCommandsStickyCmdsPending+0xc>
            *cmdsPending = true;
 800d1be:	2301      	movs	r3, #1
 800d1c0:	700b      	strb	r3, [r1, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 800d1c2:	2000      	movs	r0, #0
 800d1c4:	4770      	bx	lr
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800d1c6:	2000      	movs	r0, #0
 800d1c8:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800d1ca:	2001      	movs	r0, #1
}
 800d1cc:	4770      	bx	lr
 800d1ce:	bf00      	nop
 800d1d0:	20000e08 	.word	0x20000e08

0800d1d4 <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800d1d4:	1e83      	subs	r3, r0, #2
 800d1d6:	2b11      	cmp	r3, #17
 800d1d8:	d80a      	bhi.n	800d1f0 <LoRaMacCommandsGetCmdSize+0x1c>
 800d1da:	e8df f003 	tbb	[pc, r3]
 800d1de:	0b23      	.short	0x0b23
 800d1e0:	110f240d 	.word	0x110f240d
 800d1e4:	09171513 	.word	0x09171513
 800d1e8:	09091909 	.word	0x09091909
 800d1ec:	211f1d1b 	.word	0x211f1d1b
 800d1f0:	2000      	movs	r0, #0
 800d1f2:	4770      	bx	lr
            break;
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 800d1f4:	2005      	movs	r0, #5
            break;
 800d1f6:	4770      	bx	lr
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 800d1f8:	2002      	movs	r0, #2
            break;
 800d1fa:	4770      	bx	lr
            break;
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 800d1fc:	2001      	movs	r0, #1
            break;
 800d1fe:	4770      	bx	lr
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 800d200:	2006      	movs	r0, #6
            break;
 800d202:	4770      	bx	lr
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 800d204:	2002      	movs	r0, #2
            break;
 800d206:	4770      	bx	lr
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 800d208:	2002      	movs	r0, #2
            break;
 800d20a:	4770      	bx	lr
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 800d20c:	2005      	movs	r0, #5
            break;
 800d20e:	4770      	bx	lr
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 800d210:	2006      	movs	r0, #6
            break;
 800d212:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 800d214:	2001      	movs	r0, #1
            break;
 800d216:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 800d218:	2005      	movs	r0, #5
            break;
 800d21a:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 800d21c:	2004      	movs	r0, #4
            break;
 800d21e:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 800d220:	2004      	movs	r0, #4
            break;
 800d222:	4770      	bx	lr
            cidSize = 3;
 800d224:	2003      	movs	r0, #3
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800d226:	4770      	bx	lr

0800d228 <IncreaseBufferPointer>:
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800d228:	4b03      	ldr	r3, [pc, #12]	; (800d238 <IncreaseBufferPointer+0x10>)
 800d22a:	4298      	cmp	r0, r3
 800d22c:	d001      	beq.n	800d232 <IncreaseBufferPointer+0xa>
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
    }
    else
    {
        // Increase
        bufferPointer++;
 800d22e:	3004      	adds	r0, #4
 800d230:	4770      	bx	lr
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800d232:	4802      	ldr	r0, [pc, #8]	; (800d23c <IncreaseBufferPointer+0x14>)
    }
    return bufferPointer;
}
 800d234:	4770      	bx	lr
 800d236:	bf00      	nop
 800d238:	20000f20 	.word	0x20000f20
 800d23c:	20000f10 	.word	0x20000f10

0800d240 <IsListEmpty>:
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
    if( count == 0 )
 800d240:	b108      	cbz	r0, 800d246 <IsListEmpty+0x6>
    {
        return true;
    }
    return false;
 800d242:	2000      	movs	r0, #0
 800d244:	4770      	bx	lr
        return true;
 800d246:	2001      	movs	r0, #1
}
 800d248:	4770      	bx	lr

0800d24a <IsListFull>:

static bool IsListFull( uint8_t count )
{
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800d24a:	2804      	cmp	r0, #4
 800d24c:	d801      	bhi.n	800d252 <IsListFull+0x8>
    {
        return true;
    }
    return false;
 800d24e:	2000      	movs	r0, #0
 800d250:	4770      	bx	lr
        return true;
 800d252:	2001      	movs	r0, #1
}
 800d254:	4770      	bx	lr
	...

0800d258 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 800d258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d25a:	4606      	mov	r6, r0
 800d25c:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800d25e:	4b0d      	ldr	r3, [pc, #52]	; (800d294 <GetElement+0x3c>)
 800d260:	f893 7020 	ldrb.w	r7, [r3, #32]
 800d264:	4638      	mov	r0, r7
 800d266:	f7ff ffeb 	bl	800d240 <IsListEmpty>
 800d26a:	b970      	cbnz	r0, 800d28a <GetElement+0x32>
    {
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800d26c:	2500      	movs	r5, #0
 800d26e:	42af      	cmp	r7, r5
 800d270:	d909      	bls.n	800d286 <GetElement+0x2e>
    {
        if( element->Request == request )
 800d272:	7823      	ldrb	r3, [r4, #0]
 800d274:	42b3      	cmp	r3, r6
 800d276:	d00a      	beq.n	800d28e <GetElement+0x36>
        {
            // We have found the element
            return element;
        }
        element = IncreaseBufferPointer( element );
 800d278:	4620      	mov	r0, r4
 800d27a:	f7ff ffd5 	bl	800d228 <IncreaseBufferPointer>
 800d27e:	4604      	mov	r4, r0
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800d280:	3501      	adds	r5, #1
 800d282:	b2ed      	uxtb	r5, r5
 800d284:	e7f3      	b.n	800d26e <GetElement+0x16>
    }

    return NULL;
 800d286:	2000      	movs	r0, #0
}
 800d288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
 800d28a:	2000      	movs	r0, #0
 800d28c:	e7fc      	b.n	800d288 <GetElement+0x30>
            return element;
 800d28e:	4620      	mov	r0, r4
 800d290:	e7fa      	b.n	800d288 <GetElement+0x30>
 800d292:	bf00      	nop
 800d294:	20000f04 	.word	0x20000f04

0800d298 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 800d298:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800d29a:	4c08      	ldr	r4, [pc, #32]	; (800d2bc <LoRaMacConfirmQueueInit+0x24>)
 800d29c:	6020      	str	r0, [r4, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	f884 3020 	strb.w	r3, [r4, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800d2a4:	f104 000c 	add.w	r0, r4, #12
 800d2a8:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800d2aa:	60a0      	str	r0, [r4, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800d2ac:	2214      	movs	r2, #20
 800d2ae:	21ff      	movs	r1, #255	; 0xff
 800d2b0:	f003 ff3f 	bl	8011132 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800d2ba:	bd10      	pop	{r4, pc}
 800d2bc:	20000f04 	.word	0x20000f04

0800d2c0 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800d2c0:	b538      	push	{r3, r4, r5, lr}
 800d2c2:	4605      	mov	r5, r0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800d2c4:	4b0f      	ldr	r3, [pc, #60]	; (800d304 <LoRaMacConfirmQueueAdd+0x44>)
 800d2c6:	f893 0020 	ldrb.w	r0, [r3, #32]
 800d2ca:	f7ff ffbe 	bl	800d24a <IsListFull>
 800d2ce:	b9b8      	cbnz	r0, 800d300 <LoRaMacConfirmQueueAdd+0x40>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800d2d0:	4c0c      	ldr	r4, [pc, #48]	; (800d304 <LoRaMacConfirmQueueAdd+0x44>)
 800d2d2:	68a3      	ldr	r3, [r4, #8]
 800d2d4:	782a      	ldrb	r2, [r5, #0]
 800d2d6:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800d2d8:	68a3      	ldr	r3, [r4, #8]
 800d2da:	786a      	ldrb	r2, [r5, #1]
 800d2dc:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800d2de:	68a3      	ldr	r3, [r4, #8]
 800d2e0:	78ea      	ldrb	r2, [r5, #3]
 800d2e2:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 800d2e4:	68a3      	ldr	r3, [r4, #8]
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	709a      	strb	r2, [r3, #2]
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800d2ea:	f894 3020 	ldrb.w	r3, [r4, #32]
 800d2ee:	3301      	adds	r3, #1
 800d2f0:	f884 3020 	strb.w	r3, [r4, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800d2f4:	68a0      	ldr	r0, [r4, #8]
 800d2f6:	f7ff ff97 	bl	800d228 <IncreaseBufferPointer>
 800d2fa:	60a0      	str	r0, [r4, #8]

    return true;
 800d2fc:	2001      	movs	r0, #1
}
 800d2fe:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800d300:	2000      	movs	r0, #0
 800d302:	e7fc      	b.n	800d2fe <LoRaMacConfirmQueueAdd+0x3e>
 800d304:	20000f04 	.word	0x20000f04

0800d308 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800d308:	b538      	push	{r3, r4, r5, lr}
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800d30a:	4b09      	ldr	r3, [pc, #36]	; (800d330 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800d30c:	f893 4020 	ldrb.w	r4, [r3, #32]
 800d310:	4620      	mov	r0, r4
 800d312:	f7ff ff95 	bl	800d240 <IsListEmpty>
 800d316:	b948      	cbnz	r0, 800d32c <LoRaMacConfirmQueueRemoveFirst+0x24>
    {
        return false;
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800d318:	4d05      	ldr	r5, [pc, #20]	; (800d330 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800d31a:	3c01      	subs	r4, #1
 800d31c:	f885 4020 	strb.w	r4, [r5, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800d320:	6868      	ldr	r0, [r5, #4]
 800d322:	f7ff ff81 	bl	800d228 <IncreaseBufferPointer>
 800d326:	6068      	str	r0, [r5, #4]

    return true;
 800d328:	2001      	movs	r0, #1
}
 800d32a:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800d32c:	2000      	movs	r0, #0
 800d32e:	e7fc      	b.n	800d32a <LoRaMacConfirmQueueRemoveFirst+0x22>
 800d330:	20000f04 	.word	0x20000f04

0800d334 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800d334:	b538      	push	{r3, r4, r5, lr}
 800d336:	4605      	mov	r5, r0
 800d338:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800d33a:	4b08      	ldr	r3, [pc, #32]	; (800d35c <LoRaMacConfirmQueueSetStatus+0x28>)
 800d33c:	f893 0020 	ldrb.w	r0, [r3, #32]
 800d340:	f7ff ff7e 	bl	800d240 <IsListEmpty>
 800d344:	b948      	cbnz	r0, 800d35a <LoRaMacConfirmQueueSetStatus+0x26>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800d346:	4b05      	ldr	r3, [pc, #20]	; (800d35c <LoRaMacConfirmQueueSetStatus+0x28>)
 800d348:	689a      	ldr	r2, [r3, #8]
 800d34a:	6859      	ldr	r1, [r3, #4]
 800d34c:	4620      	mov	r0, r4
 800d34e:	f7ff ff83 	bl	800d258 <GetElement>
        if( element != NULL )
 800d352:	b110      	cbz	r0, 800d35a <LoRaMacConfirmQueueSetStatus+0x26>
        {
            element->Status = status;
 800d354:	7045      	strb	r5, [r0, #1]
            element->ReadyToHandle = true;
 800d356:	2201      	movs	r2, #1
 800d358:	7082      	strb	r2, [r0, #2]
        }
    }
}
 800d35a:	bd38      	pop	{r3, r4, r5, pc}
 800d35c:	20000f04 	.word	0x20000f04

0800d360 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800d360:	b510      	push	{r4, lr}
 800d362:	4604      	mov	r4, r0
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800d364:	4b09      	ldr	r3, [pc, #36]	; (800d38c <LoRaMacConfirmQueueGetStatus+0x2c>)
 800d366:	f893 0020 	ldrb.w	r0, [r3, #32]
 800d36a:	f7ff ff69 	bl	800d240 <IsListEmpty>
 800d36e:	b940      	cbnz	r0, 800d382 <LoRaMacConfirmQueueGetStatus+0x22>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800d370:	4b06      	ldr	r3, [pc, #24]	; (800d38c <LoRaMacConfirmQueueGetStatus+0x2c>)
 800d372:	689a      	ldr	r2, [r3, #8]
 800d374:	6859      	ldr	r1, [r3, #4]
 800d376:	4620      	mov	r0, r4
 800d378:	f7ff ff6e 	bl	800d258 <GetElement>
        if( element != NULL )
 800d37c:	b118      	cbz	r0, 800d386 <LoRaMacConfirmQueueGetStatus+0x26>
        {
            return element->Status;
 800d37e:	7840      	ldrb	r0, [r0, #1]
 800d380:	e000      	b.n	800d384 <LoRaMacConfirmQueueGetStatus+0x24>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d382:	2001      	movs	r0, #1
}
 800d384:	bd10      	pop	{r4, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d386:	2001      	movs	r0, #1
 800d388:	e7fc      	b.n	800d384 <LoRaMacConfirmQueueGetStatus+0x24>
 800d38a:	bf00      	nop
 800d38c:	20000f04 	.word	0x20000f04

0800d390 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800d390:	b538      	push	{r3, r4, r5, lr}
 800d392:	4605      	mov	r5, r0
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800d394:	4b0c      	ldr	r3, [pc, #48]	; (800d3c8 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800d396:	685c      	ldr	r4, [r3, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 800d398:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800d39c:	f893 0020 	ldrb.w	r0, [r3, #32]
 800d3a0:	f7ff ff4e 	bl	800d240 <IsListEmpty>
 800d3a4:	b150      	cbz	r0, 800d3bc <LoRaMacConfirmQueueSetStatusCmn+0x2c>
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
    }
}
 800d3a6:	bd38      	pop	{r3, r4, r5, pc}
                element->ReadyToHandle = true;
 800d3a8:	2301      	movs	r3, #1
 800d3aa:	70a3      	strb	r3, [r4, #2]
            element = IncreaseBufferPointer( element );
 800d3ac:	4620      	mov	r0, r4
 800d3ae:	f7ff ff3b 	bl	800d228 <IncreaseBufferPointer>
 800d3b2:	4604      	mov	r4, r0
        }while( element != ConfirmQueueCtx.BufferEnd );
 800d3b4:	4b04      	ldr	r3, [pc, #16]	; (800d3c8 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800d3b6:	689b      	ldr	r3, [r3, #8]
 800d3b8:	4283      	cmp	r3, r0
 800d3ba:	d0f4      	beq.n	800d3a6 <LoRaMacConfirmQueueSetStatusCmn+0x16>
            element->Status = status;
 800d3bc:	7065      	strb	r5, [r4, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800d3be:	78e3      	ldrb	r3, [r4, #3]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d1f3      	bne.n	800d3ac <LoRaMacConfirmQueueSetStatusCmn+0x1c>
 800d3c4:	e7f0      	b.n	800d3a8 <LoRaMacConfirmQueueSetStatusCmn+0x18>
 800d3c6:	bf00      	nop
 800d3c8:	20000f04 	.word	0x20000f04

0800d3cc <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 800d3cc:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800d3ce:	4b04      	ldr	r3, [pc, #16]	; (800d3e0 <LoRaMacConfirmQueueIsCmdActive+0x14>)
 800d3d0:	689a      	ldr	r2, [r3, #8]
 800d3d2:	6859      	ldr	r1, [r3, #4]
 800d3d4:	f7ff ff40 	bl	800d258 <GetElement>
 800d3d8:	b100      	cbz	r0, 800d3dc <LoRaMacConfirmQueueIsCmdActive+0x10>
    {
        return true;
 800d3da:	2001      	movs	r0, #1
    }
    return false;
}
 800d3dc:	bd08      	pop	{r3, pc}
 800d3de:	bf00      	nop
 800d3e0:	20000f04 	.word	0x20000f04

0800d3e4 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800d3e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3e6:	b083      	sub	sp, #12
 800d3e8:	4606      	mov	r6, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800d3ea:	4b16      	ldr	r3, [pc, #88]	; (800d444 <LoRaMacConfirmQueueHandleCb+0x60>)
 800d3ec:	f893 7020 	ldrb.w	r7, [r3, #32]
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 800d3f0:	2400      	movs	r4, #0
 800d3f2:	e00d      	b.n	800d410 <LoRaMacConfirmQueueHandleCb+0x2c>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800d3f4:	781a      	ldrb	r2, [r3, #0]
 800d3f6:	f88d 2004 	strb.w	r2, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800d3fa:	785a      	ldrb	r2, [r3, #1]
 800d3fc:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800d400:	78db      	ldrb	r3, [r3, #3]
 800d402:	f88d 3007 	strb.w	r3, [sp, #7]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 800d406:	f7ff ff7f 	bl	800d308 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 800d40a:	b1a5      	cbz	r5, 800d436 <LoRaMacConfirmQueueHandleCb+0x52>
    for( uint8_t i = 0; i < nbElements; i++ )
 800d40c:	3401      	adds	r4, #1
 800d40e:	b2e4      	uxtb	r4, r4
 800d410:	42bc      	cmp	r4, r7
 800d412:	d214      	bcs.n	800d43e <LoRaMacConfirmQueueHandleCb+0x5a>
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800d414:	4b0b      	ldr	r3, [pc, #44]	; (800d444 <LoRaMacConfirmQueueHandleCb+0x60>)
 800d416:	685a      	ldr	r2, [r3, #4]
 800d418:	7812      	ldrb	r2, [r2, #0]
 800d41a:	7032      	strb	r2, [r6, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800d41c:	685a      	ldr	r2, [r3, #4]
 800d41e:	7852      	ldrb	r2, [r2, #1]
 800d420:	7072      	strb	r2, [r6, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800d422:	685b      	ldr	r3, [r3, #4]
 800d424:	789d      	ldrb	r5, [r3, #2]
        if( readyToHandle == true )
 800d426:	2d00      	cmp	r5, #0
 800d428:	d0e4      	beq.n	800d3f4 <LoRaMacConfirmQueueHandleCb+0x10>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800d42a:	4b06      	ldr	r3, [pc, #24]	; (800d444 <LoRaMacConfirmQueueHandleCb+0x60>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	689b      	ldr	r3, [r3, #8]
 800d430:	4630      	mov	r0, r6
 800d432:	4798      	blx	r3
 800d434:	e7e7      	b.n	800d406 <LoRaMacConfirmQueueHandleCb+0x22>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800d436:	a801      	add	r0, sp, #4
 800d438:	f7ff ff42 	bl	800d2c0 <LoRaMacConfirmQueueAdd>
 800d43c:	e7e6      	b.n	800d40c <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 800d43e:	b003      	add	sp, #12
 800d440:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d442:	bf00      	nop
 800d444:	20000f04 	.word	0x20000f04

0800d448 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
}
 800d448:	4b01      	ldr	r3, [pc, #4]	; (800d450 <LoRaMacConfirmQueueGetCnt+0x8>)
 800d44a:	f893 0020 	ldrb.w	r0, [r3, #32]
 800d44e:	4770      	bx	lr
 800d450:	20000f04 	.word	0x20000f04

0800d454 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 800d454:	b508      	push	{r3, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800d456:	4b03      	ldr	r3, [pc, #12]	; (800d464 <LoRaMacConfirmQueueIsFull+0x10>)
 800d458:	f893 0020 	ldrb.w	r0, [r3, #32]
 800d45c:	f7ff fef5 	bl	800d24a <IsListFull>
    }
    else
    {
        return false;
    }
}
 800d460:	bd08      	pop	{r3, pc}
 800d462:	bf00      	nop
 800d464:	20000f04 	.word	0x20000f04

0800d468 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 800d468:	b410      	push	{r4}
 800d46a:	9c01      	ldr	r4, [sp, #4]
 800d46c:	9902      	ldr	r1, [sp, #8]
 800d46e:	9a03      	ldr	r2, [sp, #12]
    if( b0 == 0 )
 800d470:	b1da      	cbz	r2, 800d4aa <PrepareB0+0x42>
 800d472:	4684      	mov	ip, r0
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    b0[0] = 0x49;
 800d474:	2049      	movs	r0, #73	; 0x49
 800d476:	7010      	strb	r0, [r2, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 800d478:	2000      	movs	r0, #0
 800d47a:	7050      	strb	r0, [r2, #1]
        b0[2] = 0x00;
 800d47c:	7090      	strb	r0, [r2, #2]
    }

    b0[3] = 0x00;
 800d47e:	70d0      	strb	r0, [r2, #3]
    b0[4] = 0x00;
 800d480:	7110      	strb	r0, [r2, #4]

    b0[5] = dir;
 800d482:	7153      	strb	r3, [r2, #5]

    b0[6] = devAddr & 0xFF;
 800d484:	7194      	strb	r4, [r2, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800d486:	0a23      	lsrs	r3, r4, #8
 800d488:	71d3      	strb	r3, [r2, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800d48a:	0c23      	lsrs	r3, r4, #16
 800d48c:	7213      	strb	r3, [r2, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800d48e:	0e24      	lsrs	r4, r4, #24
 800d490:	7254      	strb	r4, [r2, #9]

    b0[10] = fCnt & 0xFF;
 800d492:	7291      	strb	r1, [r2, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800d494:	0a0b      	lsrs	r3, r1, #8
 800d496:	72d3      	strb	r3, [r2, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800d498:	0c0b      	lsrs	r3, r1, #16
 800d49a:	7313      	strb	r3, [r2, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800d49c:	0e09      	lsrs	r1, r1, #24
 800d49e:	7351      	strb	r1, [r2, #13]

    b0[14] = 0x00;
 800d4a0:	7390      	strb	r0, [r2, #14]

    b0[15] = msgLen & 0xFF;
 800d4a2:	f882 c00f 	strb.w	ip, [r2, #15]

    return LORAMAC_CRYPTO_SUCCESS;
}
 800d4a6:	bc10      	pop	{r4}
 800d4a8:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d4aa:	200a      	movs	r0, #10
 800d4ac:	e7fb      	b.n	800d4a6 <PrepareB0+0x3e>
	...

0800d4b0 <GetKeyAddrItem>:
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	2b01      	cmp	r3, #1
 800d4b4:	d80e      	bhi.n	800d4d4 <GetKeyAddrItem+0x24>
    {
        if( KeyAddrList[i].AddrID == addrID )
 800d4b6:	469c      	mov	ip, r3
 800d4b8:	4a07      	ldr	r2, [pc, #28]	; (800d4d8 <GetKeyAddrItem+0x28>)
 800d4ba:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 800d4be:	4282      	cmp	r2, r0
 800d4c0:	d002      	beq.n	800d4c8 <GetKeyAddrItem+0x18>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800d4c2:	3301      	adds	r3, #1
 800d4c4:	b2db      	uxtb	r3, r3
 800d4c6:	e7f4      	b.n	800d4b2 <GetKeyAddrItem+0x2>
        {
            *item = &( KeyAddrList[i] );
 800d4c8:	4b03      	ldr	r3, [pc, #12]	; (800d4d8 <GetKeyAddrItem+0x28>)
 800d4ca:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 800d4ce:	600b      	str	r3, [r1, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 800d4d0:	2000      	movs	r0, #0
 800d4d2:	4770      	bx	lr
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800d4d4:	200c      	movs	r0, #12
}
 800d4d6:	4770      	bx	lr
 800d4d8:	2000010c 	.word	0x2000010c

0800d4dc <GetLastFcntDown>:
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
    if( lastDown == NULL )
 800d4dc:	460b      	mov	r3, r1
 800d4de:	2900      	cmp	r1, #0
 800d4e0:	d024      	beq.n	800d52c <GetLastFcntDown+0x50>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 800d4e2:	3801      	subs	r0, #1
 800d4e4:	2803      	cmp	r0, #3
 800d4e6:	d823      	bhi.n	800d530 <GetLastFcntDown+0x54>
 800d4e8:	e8df f000 	tbb	[pc, r0]
 800d4ec:	1a120a02 	.word	0x1a120a02
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 800d4f0:	4a10      	ldr	r2, [pc, #64]	; (800d534 <GetLastFcntDown+0x58>)
 800d4f2:	6812      	ldr	r2, [r2, #0]
 800d4f4:	6911      	ldr	r1, [r2, #16]
 800d4f6:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 800d4f8:	6913      	ldr	r3, [r2, #16]
 800d4fa:	6213      	str	r3, [r2, #32]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800d4fc:	2000      	movs	r0, #0
            break;
 800d4fe:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 800d500:	4a0c      	ldr	r2, [pc, #48]	; (800d534 <GetLastFcntDown+0x58>)
 800d502:	6812      	ldr	r2, [r2, #0]
 800d504:	6951      	ldr	r1, [r2, #20]
 800d506:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 800d508:	6953      	ldr	r3, [r2, #20]
 800d50a:	6213      	str	r3, [r2, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800d50c:	2000      	movs	r0, #0
            break;
 800d50e:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.FCntDown;
 800d510:	4a08      	ldr	r2, [pc, #32]	; (800d534 <GetLastFcntDown+0x58>)
 800d512:	6812      	ldr	r2, [r2, #0]
 800d514:	6991      	ldr	r1, [r2, #24]
 800d516:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800d518:	6993      	ldr	r3, [r2, #24]
 800d51a:	6213      	str	r3, [r2, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800d51c:	2000      	movs	r0, #0
            break;
 800d51e:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800d520:	4a04      	ldr	r2, [pc, #16]	; (800d534 <GetLastFcntDown+0x58>)
 800d522:	6812      	ldr	r2, [r2, #0]
 800d524:	69d2      	ldr	r2, [r2, #28]
 800d526:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800d528:	2000      	movs	r0, #0
            break;
 800d52a:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d52c:	200a      	movs	r0, #10
 800d52e:	4770      	bx	lr
    switch( fCntID )
 800d530:	2005      	movs	r0, #5
}
 800d532:	4770      	bx	lr
 800d534:	20000f28 	.word	0x20000f28

0800d538 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 800d538:	b510      	push	{r4, lr}
 800d53a:	b082      	sub	sp, #8
 800d53c:	460c      	mov	r4, r1
    uint32_t lastDown = 0;
 800d53e:	2300      	movs	r3, #0
 800d540:	9301      	str	r3, [sp, #4]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800d542:	a901      	add	r1, sp, #4
 800d544:	f7ff ffca 	bl	800d4dc <GetLastFcntDown>
 800d548:	b948      	cbnz	r0, 800d55e <CheckFCntDown+0x26>
    {
        return false;
    }
    if( ( currentDown > lastDown ) ||
 800d54a:	9b01      	ldr	r3, [sp, #4]
 800d54c:	42a3      	cmp	r3, r4
 800d54e:	d309      	bcc.n	800d564 <CheckFCntDown+0x2c>
 800d550:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d554:	d001      	beq.n	800d55a <CheckFCntDown+0x22>
    {
        return true;
    }
    else
    {
        return false;
 800d556:	2000      	movs	r0, #0
 800d558:	e002      	b.n	800d560 <CheckFCntDown+0x28>
        return true;
 800d55a:	2001      	movs	r0, #1
 800d55c:	e000      	b.n	800d560 <CheckFCntDown+0x28>
        return false;
 800d55e:	2000      	movs	r0, #0
    }
}
 800d560:	b002      	add	sp, #8
 800d562:	bd10      	pop	{r4, pc}
        return true;
 800d564:	2001      	movs	r0, #1
 800d566:	e7fb      	b.n	800d560 <CheckFCntDown+0x28>

0800d568 <UpdateFCntDown>:
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
    switch( fCntID )
 800d568:	3801      	subs	r0, #1
 800d56a:	2803      	cmp	r0, #3
 800d56c:	d812      	bhi.n	800d594 <UpdateFCntDown+0x2c>
 800d56e:	e8df f000 	tbb	[pc, r0]
 800d572:	0602      	.short	0x0602
 800d574:	0e0a      	.short	0x0e0a
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 800d576:	4b08      	ldr	r3, [pc, #32]	; (800d598 <UpdateFCntDown+0x30>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	6119      	str	r1, [r3, #16]
            break;
 800d57c:	4770      	bx	lr
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 800d57e:	4b06      	ldr	r3, [pc, #24]	; (800d598 <UpdateFCntDown+0x30>)
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	6159      	str	r1, [r3, #20]
            break;
 800d584:	4770      	bx	lr
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 800d586:	4b04      	ldr	r3, [pc, #16]	; (800d598 <UpdateFCntDown+0x30>)
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	6199      	str	r1, [r3, #24]
            break;
 800d58c:	4770      	bx	lr
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800d58e:	4b02      	ldr	r3, [pc, #8]	; (800d598 <UpdateFCntDown+0x30>)
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	61d9      	str	r1, [r3, #28]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
    }
}
 800d594:	4770      	bx	lr
 800d596:	bf00      	nop
 800d598:	20000f28 	.word	0x20000f28

0800d59c <ResetFCnts>:
/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
    CryptoNvm->FCntList.FCntUp = 0;
 800d59c:	4b0a      	ldr	r3, [pc, #40]	; (800d5c8 <ResetFCnts+0x2c>)
 800d59e:	681a      	ldr	r2, [r3, #0]
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	60d3      	str	r3, [r2, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800d5a4:	f04f 31ff 	mov.w	r1, #4294967295
 800d5a8:	6111      	str	r1, [r2, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800d5aa:	6151      	str	r1, [r2, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800d5ac:	6191      	str	r1, [r2, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800d5ae:	6211      	str	r1, [r2, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	dd00      	ble.n	800d5b6 <ResetFCnts+0x1a>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
    }
}
 800d5b4:	4770      	bx	lr
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 800d5b6:	1d99      	adds	r1, r3, #6
 800d5b8:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800d5bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d5c0:	6048      	str	r0, [r1, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d5c2:	3301      	adds	r3, #1
 800d5c4:	e7f4      	b.n	800d5b0 <ResetFCnts+0x14>
 800d5c6:	bf00      	nop
 800d5c8:	20000f28 	.word	0x20000f28

0800d5cc <ComputeCmacB0>:
{
 800d5cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5d0:	b088      	sub	sp, #32
 800d5d2:	9e11      	ldr	r6, [sp, #68]	; 0x44
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800d5d4:	b1f0      	cbz	r0, 800d614 <ComputeCmacB0+0x48>
 800d5d6:	460c      	mov	r4, r1
 800d5d8:	4615      	mov	r5, r2
 800d5da:	461a      	mov	r2, r3
 800d5dc:	4680      	mov	r8, r0
 800d5de:	b1de      	cbz	r6, 800d618 <ComputeCmacB0+0x4c>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800d5e0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800d5e4:	d81a      	bhi.n	800d61c <ComputeCmacB0+0x50>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800d5e6:	af04      	add	r7, sp, #16
 800d5e8:	9702      	str	r7, [sp, #8]
 800d5ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d5ec:	9301      	str	r3, [sp, #4]
 800d5ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d5f0:	9300      	str	r3, [sp, #0]
 800d5f2:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800d5f6:	4629      	mov	r1, r5
 800d5f8:	4620      	mov	r0, r4
 800d5fa:	f7ff ff35 	bl	800d468 <PrepareB0>
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800d5fe:	9600      	str	r6, [sp, #0]
 800d600:	462b      	mov	r3, r5
 800d602:	4622      	mov	r2, r4
 800d604:	4641      	mov	r1, r8
 800d606:	4638      	mov	r0, r7
 800d608:	f003 fc15 	bl	8010e36 <SecureElementComputeAesCmac>
 800d60c:	b940      	cbnz	r0, 800d620 <ComputeCmacB0+0x54>
}
 800d60e:	b008      	add	sp, #32
 800d610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d614:	200a      	movs	r0, #10
 800d616:	e7fa      	b.n	800d60e <ComputeCmacB0+0x42>
 800d618:	200a      	movs	r0, #10
 800d61a:	e7f8      	b.n	800d60e <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800d61c:	200e      	movs	r0, #14
 800d61e:	e7f6      	b.n	800d60e <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d620:	200f      	movs	r0, #15
 800d622:	e7f4      	b.n	800d60e <ComputeCmacB0+0x42>

0800d624 <DeriveSessionKey10x>:
{
 800d624:	b510      	push	{r4, lr}
 800d626:	b084      	sub	sp, #16
    uint8_t compBase[16] = { 0 };
 800d628:	2400      	movs	r4, #0
 800d62a:	9400      	str	r4, [sp, #0]
 800d62c:	9401      	str	r4, [sp, #4]
 800d62e:	9402      	str	r4, [sp, #8]
 800d630:	9403      	str	r4, [sp, #12]
    switch( keyID )
 800d632:	2802      	cmp	r0, #2
 800d634:	d003      	beq.n	800d63e <DeriveSessionKey10x+0x1a>
 800d636:	2803      	cmp	r0, #3
 800d638:	d025      	beq.n	800d686 <DeriveSessionKey10x+0x62>
 800d63a:	200b      	movs	r0, #11
 800d63c:	e021      	b.n	800d682 <DeriveSessionKey10x+0x5e>
            compBase[0] = 0x01;
 800d63e:	2401      	movs	r4, #1
 800d640:	f88d 4000 	strb.w	r4, [sp]
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 800d644:	f88d 1001 	strb.w	r1, [sp, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800d648:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800d64c:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 800d650:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800d654:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 800d658:	f88d 2004 	strb.w	r2, [sp, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 800d65c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800d660:	f88d 1005 	strb.w	r1, [sp, #5]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 800d664:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800d668:	f88d 2006 	strb.w	r2, [sp, #6]
    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 800d66c:	f88d 3007 	strb.w	r3, [sp, #7]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 800d670:	0a1b      	lsrs	r3, r3, #8
 800d672:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800d676:	4602      	mov	r2, r0
 800d678:	2101      	movs	r1, #1
 800d67a:	4668      	mov	r0, sp
 800d67c:	f003 fc7a 	bl	8010f74 <SecureElementDeriveAndStoreKey>
 800d680:	b928      	cbnz	r0, 800d68e <DeriveSessionKey10x+0x6a>
}
 800d682:	b004      	add	sp, #16
 800d684:	bd10      	pop	{r4, pc}
            compBase[0] = 0x02;
 800d686:	2402      	movs	r4, #2
 800d688:	f88d 4000 	strb.w	r4, [sp]
            break;
 800d68c:	e7da      	b.n	800d644 <DeriveSessionKey10x+0x20>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d68e:	200f      	movs	r0, #15
 800d690:	e7f7      	b.n	800d682 <DeriveSessionKey10x+0x5e>

0800d692 <PayloadEncrypt>:
{
 800d692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d696:	b088      	sub	sp, #32
 800d698:	4690      	mov	r8, r2
 800d69a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    if( buffer == 0 )
 800d69c:	2800      	cmp	r0, #0
 800d69e:	d052      	beq.n	800d746 <PayloadEncrypt+0xb4>
 800d6a0:	460d      	mov	r5, r1
 800d6a2:	4604      	mov	r4, r0
    uint8_t sBlock[16] = { 0 };
 800d6a4:	2600      	movs	r6, #0
 800d6a6:	9604      	str	r6, [sp, #16]
 800d6a8:	9605      	str	r6, [sp, #20]
 800d6aa:	9606      	str	r6, [sp, #24]
 800d6ac:	9607      	str	r6, [sp, #28]
    uint8_t aBlock[16] = { 0 };
 800d6ae:	9600      	str	r6, [sp, #0]
 800d6b0:	9601      	str	r6, [sp, #4]
 800d6b2:	9602      	str	r6, [sp, #8]
 800d6b4:	9603      	str	r6, [sp, #12]
    aBlock[0] = 0x01;
 800d6b6:	2701      	movs	r7, #1
 800d6b8:	f88d 7000 	strb.w	r7, [sp]
    aBlock[5] = dir;
 800d6bc:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800d6c0:	f88d 1005 	strb.w	r1, [sp, #5]
    aBlock[6] = address & 0xFF;
 800d6c4:	f88d 3006 	strb.w	r3, [sp, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800d6c8:	0a19      	lsrs	r1, r3, #8
 800d6ca:	f88d 1007 	strb.w	r1, [sp, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800d6ce:	0c19      	lsrs	r1, r3, #16
 800d6d0:	f88d 1008 	strb.w	r1, [sp, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800d6d4:	0e1b      	lsrs	r3, r3, #24
 800d6d6:	f88d 3009 	strb.w	r3, [sp, #9]
    aBlock[10] = frameCounter & 0xFF;
 800d6da:	f88d 200a 	strb.w	r2, [sp, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800d6de:	0a13      	lsrs	r3, r2, #8
 800d6e0:	f88d 300b 	strb.w	r3, [sp, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800d6e4:	0c13      	lsrs	r3, r2, #16
 800d6e6:	f88d 300c 	strb.w	r3, [sp, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800d6ea:	0e12      	lsrs	r2, r2, #24
 800d6ec:	f88d 200d 	strb.w	r2, [sp, #13]
    while( size > 0 )
 800d6f0:	e014      	b.n	800d71c <PayloadEncrypt+0x8a>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800d6f2:	18f2      	adds	r2, r6, r3
 800d6f4:	5ca0      	ldrb	r0, [r4, r2]
 800d6f6:	f103 0120 	add.w	r1, r3, #32
 800d6fa:	4469      	add	r1, sp
 800d6fc:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 800d700:	4048      	eors	r0, r1
 800d702:	54a0      	strb	r0, [r4, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800d704:	3301      	adds	r3, #1
 800d706:	b2db      	uxtb	r3, r3
 800d708:	462a      	mov	r2, r5
 800d70a:	2d10      	cmp	r5, #16
 800d70c:	bfa8      	it	ge
 800d70e:	2210      	movge	r2, #16
 800d710:	4293      	cmp	r3, r2
 800d712:	dbee      	blt.n	800d6f2 <PayloadEncrypt+0x60>
        size -= 16;
 800d714:	3d10      	subs	r5, #16
 800d716:	b22d      	sxth	r5, r5
        bufferIndex += 16;
 800d718:	3610      	adds	r6, #16
 800d71a:	b2f6      	uxtb	r6, r6
    while( size > 0 )
 800d71c:	2d00      	cmp	r5, #0
 800d71e:	dd0e      	ble.n	800d73e <PayloadEncrypt+0xac>
        aBlock[15] = ctr & 0xFF;
 800d720:	f88d 700f 	strb.w	r7, [sp, #15]
        ctr++;
 800d724:	3701      	adds	r7, #1
 800d726:	b2bf      	uxth	r7, r7
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800d728:	ab04      	add	r3, sp, #16
 800d72a:	4642      	mov	r2, r8
 800d72c:	2110      	movs	r1, #16
 800d72e:	4668      	mov	r0, sp
 800d730:	f003 fba6 	bl	8010e80 <SecureElementAesEncrypt>
 800d734:	4603      	mov	r3, r0
 800d736:	2800      	cmp	r0, #0
 800d738:	d0e6      	beq.n	800d708 <PayloadEncrypt+0x76>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d73a:	200f      	movs	r0, #15
 800d73c:	e000      	b.n	800d740 <PayloadEncrypt+0xae>
    return LORAMAC_CRYPTO_SUCCESS;
 800d73e:	2000      	movs	r0, #0
}
 800d740:	b008      	add	sp, #32
 800d742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d746:	200a      	movs	r0, #10
 800d748:	e7fa      	b.n	800d740 <PayloadEncrypt+0xae>

0800d74a <VerifyCmacB0>:
    if( msg == 0 )
 800d74a:	b370      	cbz	r0, 800d7aa <VerifyCmacB0+0x60>
{
 800d74c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d750:	b0c8      	sub	sp, #288	; 0x120
 800d752:	460c      	mov	r4, r1
 800d754:	4615      	mov	r5, r2
 800d756:	461e      	mov	r6, r3
 800d758:	4680      	mov	r8, r0
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800d75a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800d75e:	d826      	bhi.n	800d7ae <VerifyCmacB0+0x64>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800d760:	af04      	add	r7, sp, #16
 800d762:	f44f 7288 	mov.w	r2, #272	; 0x110
 800d766:	2100      	movs	r1, #0
 800d768:	4638      	mov	r0, r7
 800d76a:	f003 fce2 	bl	8011132 <memset1>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800d76e:	9702      	str	r7, [sp, #8]
 800d770:	9b50      	ldr	r3, [sp, #320]	; 0x140
 800d772:	9301      	str	r3, [sp, #4]
 800d774:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 800d776:	9300      	str	r3, [sp, #0]
 800d778:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
 800d77c:	4632      	mov	r2, r6
 800d77e:	4629      	mov	r1, r5
 800d780:	4620      	mov	r0, r4
 800d782:	f7ff fe71 	bl	800d468 <PrepareB0>
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800d786:	4622      	mov	r2, r4
 800d788:	4641      	mov	r1, r8
 800d78a:	a808      	add	r0, sp, #32
 800d78c:	f003 fcb9 	bl	8011102 <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800d790:	f104 0110 	add.w	r1, r4, #16
 800d794:	462b      	mov	r3, r5
 800d796:	9a51      	ldr	r2, [sp, #324]	; 0x144
 800d798:	b289      	uxth	r1, r1
 800d79a:	4638      	mov	r0, r7
 800d79c:	f003 fb5a 	bl	8010e54 <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800d7a0:	b130      	cbz	r0, 800d7b0 <VerifyCmacB0+0x66>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800d7a2:	2801      	cmp	r0, #1
 800d7a4:	d004      	beq.n	800d7b0 <VerifyCmacB0+0x66>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d7a6:	200f      	movs	r0, #15
 800d7a8:	e002      	b.n	800d7b0 <VerifyCmacB0+0x66>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d7aa:	200a      	movs	r0, #10
}
 800d7ac:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800d7ae:	200e      	movs	r0, #14
}
 800d7b0:	b048      	add	sp, #288	; 0x120
 800d7b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800d7b8 <LoRaMacCryptoInit>:
/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
    if( nvm == NULL )
 800d7b8:	b188      	cbz	r0, 800d7de <LoRaMacCryptoInit+0x26>
{
 800d7ba:	b510      	push	{r4, lr}
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 800d7bc:	4c09      	ldr	r4, [pc, #36]	; (800d7e4 <LoRaMacCryptoInit+0x2c>)
 800d7be:	6020      	str	r0, [r4, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800d7c0:	2228      	movs	r2, #40	; 0x28
 800d7c2:	2100      	movs	r1, #0
 800d7c4:	f003 fcb5 	bl	8011132 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 800d7c8:	6823      	ldr	r3, [r4, #0]
 800d7ca:	2201      	movs	r2, #1
 800d7cc:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 800d7ce:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 800d7d0:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800d7d2:	2400      	movs	r4, #0
 800d7d4:	701c      	strb	r4, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 800d7d6:	f7ff fee1 	bl	800d59c <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 800d7da:	4620      	mov	r0, r4
}
 800d7dc:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
 800d7de:	2009      	movs	r0, #9
}
 800d7e0:	4770      	bx	lr
 800d7e2:	bf00      	nop
 800d7e4:	20000f28 	.word	0x20000f28

0800d7e8 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoNvm->LrWanVersion = version;
 800d7e8:	4b02      	ldr	r3, [pc, #8]	; (800d7f4 <LoRaMacCryptoSetLrWanVersion+0xc>)
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
 800d7ee:	2000      	movs	r0, #0
 800d7f0:	4770      	bx	lr
 800d7f2:	bf00      	nop
 800d7f4:	20000f28 	.word	0x20000f28

0800d7f8 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
 800d7f8:	b130      	cbz	r0, 800d808 <LoRaMacCryptoGetFCntUp+0x10>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 800d7fa:	4b04      	ldr	r3, [pc, #16]	; (800d80c <LoRaMacCryptoGetFCntUp+0x14>)
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	68db      	ldr	r3, [r3, #12]
 800d800:	3301      	adds	r3, #1
 800d802:	6003      	str	r3, [r0, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800d804:	2000      	movs	r0, #0
 800d806:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d808:	200a      	movs	r0, #10
}
 800d80a:	4770      	bx	lr
 800d80c:	20000f28 	.word	0x20000f28

0800d810 <LoRaMacCryptoGetFCntDown>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 800d810:	b570      	push	{r4, r5, r6, lr}
 800d812:	b082      	sub	sp, #8
 800d814:	4614      	mov	r4, r2
    uint32_t lastDown = 0;
 800d816:	2200      	movs	r2, #0
 800d818:	9201      	str	r2, [sp, #4]
    int32_t fCntDiff = 0;
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;

    if( currentDown == NULL )
 800d81a:	b363      	cbz	r3, 800d876 <LoRaMacCryptoGetFCntDown+0x66>
 800d81c:	460d      	mov	r5, r1
 800d81e:	461e      	mov	r6, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800d820:	a901      	add	r1, sp, #4
 800d822:	f7ff fe5b 	bl	800d4dc <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800d826:	b9b8      	cbnz	r0, 800d858 <LoRaMacCryptoGetFCntDown+0x48>
    {
        return cryptoStatus;
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 800d828:	9b01      	ldr	r3, [sp, #4]
 800d82a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d82e:	d015      	beq.n	800d85c <LoRaMacCryptoGetFCntDown+0x4c>
        *currentDown = frameFcnt;
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 800d830:	b29a      	uxth	r2, r3
 800d832:	1aa2      	subs	r2, r4, r2

        if( fCntDiff > 0 )
 800d834:	2a00      	cmp	r2, #0
 800d836:	dd13      	ble.n	800d860 <LoRaMacCryptoGetFCntDown+0x50>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 800d838:	4413      	add	r3, r2
 800d83a:	6033      	str	r3, [r6, #0]
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800d83c:	4b10      	ldr	r3, [pc, #64]	; (800d880 <LoRaMacCryptoGetFCntDown+0x70>)
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	789a      	ldrb	r2, [r3, #2]
 800d842:	b94a      	cbnz	r2, 800d858 <LoRaMacCryptoGetFCntDown+0x48>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 800d844:	6833      	ldr	r3, [r6, #0]
 800d846:	9901      	ldr	r1, [sp, #4]
 800d848:	1a5b      	subs	r3, r3, r1
 800d84a:	eb61 0101 	sbc.w	r1, r1, r1
 800d84e:	42ab      	cmp	r3, r5
 800d850:	f171 0300 	sbcs.w	r3, r1, #0
 800d854:	da11      	bge.n	800d87a <LoRaMacCryptoGetFCntDown+0x6a>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800d856:	4610      	mov	r0, r2
}
 800d858:	b002      	add	sp, #8
 800d85a:	bd70      	pop	{r4, r5, r6, pc}
        *currentDown = frameFcnt;
 800d85c:	6034      	str	r4, [r6, #0]
 800d85e:	e7ed      	b.n	800d83c <LoRaMacCryptoGetFCntDown+0x2c>
        else if( fCntDiff == 0 )
 800d860:	b132      	cbz	r2, 800d870 <LoRaMacCryptoGetFCntDown+0x60>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800d862:	0c1b      	lsrs	r3, r3, #16
 800d864:	041b      	lsls	r3, r3, #16
 800d866:	4423      	add	r3, r4
 800d868:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800d86c:	6033      	str	r3, [r6, #0]
 800d86e:	e7e5      	b.n	800d83c <LoRaMacCryptoGetFCntDown+0x2c>
            *currentDown = lastDown;
 800d870:	6033      	str	r3, [r6, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 800d872:	2007      	movs	r0, #7
 800d874:	e7f0      	b.n	800d858 <LoRaMacCryptoGetFCntDown+0x48>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d876:	200a      	movs	r0, #10
 800d878:	e7ee      	b.n	800d858 <LoRaMacCryptoGetFCntDown+0x48>
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 800d87a:	2008      	movs	r0, #8
 800d87c:	e7ec      	b.n	800d858 <LoRaMacCryptoGetFCntDown+0x48>
 800d87e:	bf00      	nop
 800d880:	20000f28 	.word	0x20000f28

0800d884 <LoRaMacCryptoSetMulticastReference>:
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
 800d884:	4601      	mov	r1, r0
 800d886:	b908      	cbnz	r0, 800d88c <LoRaMacCryptoSetMulticastReference+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d888:	200a      	movs	r0, #10
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800d88a:	4770      	bx	lr
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d88c:	2300      	movs	r3, #0
 800d88e:	2b00      	cmp	r3, #0
 800d890:	dd01      	ble.n	800d896 <LoRaMacCryptoSetMulticastReference+0x12>
    return LORAMAC_CRYPTO_SUCCESS;
 800d892:	2000      	movs	r0, #0
 800d894:	4770      	bx	lr
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 800d896:	4a06      	ldr	r2, [pc, #24]	; (800d8b0 <LoRaMacCryptoSetMulticastReference+0x2c>)
 800d898:	6812      	ldr	r2, [r2, #0]
 800d89a:	202c      	movs	r0, #44	; 0x2c
 800d89c:	fb00 1003 	mla	r0, r0, r3, r1
 800d8a0:	f103 0c06 	add.w	ip, r3, #6
 800d8a4:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 800d8a8:	3204      	adds	r2, #4
 800d8aa:	6202      	str	r2, [r0, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d8ac:	3301      	adds	r3, #1
 800d8ae:	e7ee      	b.n	800d88e <LoRaMacCryptoSetMulticastReference+0xa>
 800d8b0:	20000f28 	.word	0x20000f28

0800d8b4 <LoRaMacCryptoPrepareJoinRequest>:
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( macMsg == 0 )
 800d8b4:	b300      	cbz	r0, 800d8f8 <LoRaMacCryptoPrepareJoinRequest+0x44>
{
 800d8b6:	b510      	push	{r4, lr}
 800d8b8:	b084      	sub	sp, #16
 800d8ba:	4604      	mov	r4, r0
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 800d8bc:	2300      	movs	r3, #0
 800d8be:	9303      	str	r3, [sp, #12]
    SecureElementRandomNumber( &devNonce );
 800d8c0:	a803      	add	r0, sp, #12
 800d8c2:	f003 fbbb 	bl	801103c <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 800d8c6:	4b10      	ldr	r3, [pc, #64]	; (800d908 <LoRaMacCryptoPrepareJoinRequest+0x54>)
 800d8c8:	681a      	ldr	r2, [r3, #0]
 800d8ca:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800d8ce:	8093      	strh	r3, [r2, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 800d8d0:	82e3      	strh	r3, [r4, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800d8d2:	4620      	mov	r0, r4
 800d8d4:	f000 fa2f 	bl	800dd36 <LoRaMacSerializerJoinRequest>
 800d8d8:	b980      	cbnz	r0, 800d8fc <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800d8da:	4623      	mov	r3, r4
 800d8dc:	f853 1b18 	ldr.w	r1, [r3], #24
 800d8e0:	9300      	str	r3, [sp, #0]
 800d8e2:	2301      	movs	r3, #1
 800d8e4:	2213      	movs	r2, #19
 800d8e6:	f003 faa6 	bl	8010e36 <SecureElementComputeAesCmac>
 800d8ea:	b950      	cbnz	r0, 800d902 <LoRaMacCryptoPrepareJoinRequest+0x4e>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800d8ec:	4620      	mov	r0, r4
 800d8ee:	f000 fa22 	bl	800dd36 <LoRaMacSerializerJoinRequest>
 800d8f2:	b120      	cbz	r0, 800d8fe <LoRaMacCryptoPrepareJoinRequest+0x4a>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800d8f4:	2011      	movs	r0, #17
 800d8f6:	e002      	b.n	800d8fe <LoRaMacCryptoPrepareJoinRequest+0x4a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d8f8:	200a      	movs	r0, #10
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800d8fa:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800d8fc:	2011      	movs	r0, #17
}
 800d8fe:	b004      	add	sp, #16
 800d900:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d902:	200f      	movs	r0, #15
 800d904:	e7fb      	b.n	800d8fe <LoRaMacCryptoPrepareJoinRequest+0x4a>
 800d906:	bf00      	nop
 800d908:	20000f28 	.word	0x20000f28

0800d90c <LoRaMacCryptoSecureMessage>:
LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d036      	beq.n	800d97e <LoRaMacCryptoSecureMessage+0x72>
{
 800d910:	b530      	push	{r4, r5, lr}
 800d912:	b085      	sub	sp, #20
 800d914:	4604      	mov	r4, r0
 800d916:	461d      	mov	r5, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800d918:	4b1d      	ldr	r3, [pc, #116]	; (800d990 <LoRaMacCryptoSecureMessage+0x84>)
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	68db      	ldr	r3, [r3, #12]
 800d91e:	4283      	cmp	r3, r0
 800d920:	d82f      	bhi.n	800d982 <LoRaMacCryptoSecureMessage+0x76>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 800d922:	f895 2020 	ldrb.w	r2, [r5, #32]
 800d926:	b342      	cbz	r2, 800d97a <LoRaMacCryptoSecureMessage+0x6e>
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 800d928:	2203      	movs	r2, #3
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 800d92a:	42a3      	cmp	r3, r4
 800d92c:	d209      	bcs.n	800d942 <LoRaMacCryptoSecureMessage+0x36>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800d92e:	9401      	str	r4, [sp, #4]
 800d930:	2300      	movs	r3, #0
 800d932:	9300      	str	r3, [sp, #0]
 800d934:	68ab      	ldr	r3, [r5, #8]
 800d936:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800d93a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800d93c:	f7ff fea9 	bl	800d692 <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d940:	bb10      	cbnz	r0, 800d988 <LoRaMacCryptoSecureMessage+0x7c>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800d942:	4628      	mov	r0, r5
 800d944:	f000 fa2d 	bl	800dda2 <LoRaMacSerializerData>
 800d948:	b9e8      	cbnz	r0, 800d986 <LoRaMacCryptoSecureMessage+0x7a>
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800d94a:	7929      	ldrb	r1, [r5, #4]
 800d94c:	3904      	subs	r1, #4
 800d94e:	462b      	mov	r3, r5
 800d950:	f853 0b2c 	ldr.w	r0, [r3], #44
 800d954:	9303      	str	r3, [sp, #12]
 800d956:	9402      	str	r4, [sp, #8]
 800d958:	68ab      	ldr	r3, [r5, #8]
 800d95a:	9301      	str	r3, [sp, #4]
 800d95c:	2300      	movs	r3, #0
 800d95e:	9300      	str	r3, [sp, #0]
 800d960:	2202      	movs	r2, #2
 800d962:	b289      	uxth	r1, r1
 800d964:	f7ff fe32 	bl	800d5cc <ComputeCmacB0>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d968:	b970      	cbnz	r0, 800d988 <LoRaMacCryptoSecureMessage+0x7c>
            return retval;
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800d96a:	4628      	mov	r0, r5
 800d96c:	f000 fa19 	bl	800dda2 <LoRaMacSerializerData>
 800d970:	b960      	cbnz	r0, 800d98c <LoRaMacCryptoSecureMessage+0x80>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 800d972:	4b07      	ldr	r3, [pc, #28]	; (800d990 <LoRaMacCryptoSecureMessage+0x84>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	60dc      	str	r4, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 800d978:	e006      	b.n	800d988 <LoRaMacCryptoSecureMessage+0x7c>
        payloadDecryptionKeyID = NWK_S_KEY;
 800d97a:	2202      	movs	r2, #2
 800d97c:	e7d5      	b.n	800d92a <LoRaMacCryptoSecureMessage+0x1e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d97e:	200a      	movs	r0, #10
}
 800d980:	4770      	bx	lr
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800d982:	2006      	movs	r0, #6
 800d984:	e000      	b.n	800d988 <LoRaMacCryptoSecureMessage+0x7c>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800d986:	2011      	movs	r0, #17
}
 800d988:	b005      	add	sp, #20
 800d98a:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800d98c:	2011      	movs	r0, #17
 800d98e:	e7fb      	b.n	800d988 <LoRaMacCryptoSecureMessage+0x7c>
 800d990:	20000f28 	.word	0x20000f28

0800d994 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 800d994:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d998:	b087      	sub	sp, #28
 800d99a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    if( macMsg == 0 )
 800d99c:	2e00      	cmp	r6, #0
 800d99e:	d049      	beq.n	800da34 <LoRaMacCryptoUnsecureMessage+0xa0>
 800d9a0:	4605      	mov	r5, r0
 800d9a2:	4688      	mov	r8, r1
 800d9a4:	4617      	mov	r7, r2
 800d9a6:	461c      	mov	r4, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 800d9a8:	4619      	mov	r1, r3
 800d9aa:	4610      	mov	r0, r2
 800d9ac:	f7ff fdc4 	bl	800d538 <CheckFCntDown>
 800d9b0:	2800      	cmp	r0, #0
 800d9b2:	d041      	beq.n	800da38 <LoRaMacCryptoUnsecureMessage+0xa4>
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800d9b4:	4630      	mov	r0, r6
 800d9b6:	f000 f95f 	bl	800dc78 <LoRaMacParserData>
 800d9ba:	2800      	cmp	r0, #0
 800d9bc:	d141      	bne.n	800da42 <LoRaMacCryptoUnsecureMessage+0xae>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 800d9be:	a905      	add	r1, sp, #20
 800d9c0:	4628      	mov	r0, r5
 800d9c2:	f7ff fd75 	bl	800d4b0 <GetKeyAddrItem>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d9c6:	4605      	mov	r5, r0
 800d9c8:	2800      	cmp	r0, #0
 800d9ca:	d136      	bne.n	800da3a <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 800d9cc:	9b05      	ldr	r3, [sp, #20]
 800d9ce:	f893 9001 	ldrb.w	r9, [r3, #1]
    micComputationKeyID = curItem->NwkSkey;
 800d9d2:	789a      	ldrb	r2, [r3, #2]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 800d9d4:	68b3      	ldr	r3, [r6, #8]
 800d9d6:	4543      	cmp	r3, r8
 800d9d8:	d135      	bne.n	800da46 <LoRaMacCryptoUnsecureMessage+0xb2>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800d9da:	7b33      	ldrb	r3, [r6, #12]
 800d9dc:	f3c3 1340 	ubfx	r3, r3, #5, #1
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800d9e0:	491a      	ldr	r1, [pc, #104]	; (800da4c <LoRaMacCryptoUnsecureMessage+0xb8>)
 800d9e2:	6809      	ldr	r1, [r1, #0]
 800d9e4:	7889      	ldrb	r1, [r1, #2]
 800d9e6:	b901      	cbnz	r1, 800d9ea <LoRaMacCryptoUnsecureMessage+0x56>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 800d9e8:	2300      	movs	r3, #0
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800d9ea:	7931      	ldrb	r1, [r6, #4]
 800d9ec:	3904      	subs	r1, #4
 800d9ee:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800d9f0:	9003      	str	r0, [sp, #12]
 800d9f2:	9402      	str	r4, [sp, #8]
 800d9f4:	f8cd 8004 	str.w	r8, [sp, #4]
 800d9f8:	2001      	movs	r0, #1
 800d9fa:	9000      	str	r0, [sp, #0]
 800d9fc:	b289      	uxth	r1, r1
 800d9fe:	6830      	ldr	r0, [r6, #0]
 800da00:	f7ff fea3 	bl	800d74a <VerifyCmacB0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800da04:	4605      	mov	r5, r0
 800da06:	b9c0      	cbnz	r0, 800da3a <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 800da08:	f896 3020 	ldrb.w	r3, [r6, #32]
 800da0c:	b90b      	cbnz	r3, 800da12 <LoRaMacCryptoUnsecureMessage+0x7e>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 800da0e:	f04f 0902 	mov.w	r9, #2
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800da12:	9401      	str	r4, [sp, #4]
 800da14:	2301      	movs	r3, #1
 800da16:	9300      	str	r3, [sp, #0]
 800da18:	4643      	mov	r3, r8
 800da1a:	464a      	mov	r2, r9
 800da1c:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800da20:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800da22:	f7ff fe36 	bl	800d692 <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800da26:	4605      	mov	r5, r0
 800da28:	b938      	cbnz	r0, 800da3a <LoRaMacCryptoUnsecureMessage+0xa6>
            }
        }
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 800da2a:	4621      	mov	r1, r4
 800da2c:	4638      	mov	r0, r7
 800da2e:	f7ff fd9b 	bl	800d568 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 800da32:	e002      	b.n	800da3a <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800da34:	250a      	movs	r5, #10
 800da36:	e000      	b.n	800da3a <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800da38:	2506      	movs	r5, #6
}
 800da3a:	4628      	mov	r0, r5
 800da3c:	b007      	add	sp, #28
 800da3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800da42:	2510      	movs	r5, #16
 800da44:	e7f9      	b.n	800da3a <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800da46:	2502      	movs	r5, #2
 800da48:	e7f7      	b.n	800da3a <LoRaMacCryptoUnsecureMessage+0xa6>
 800da4a:	bf00      	nop
 800da4c:	20000f28 	.word	0x20000f28

0800da50 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 800da50:	b9b1      	cbnz	r1, 800da80 <LoRaMacCryptoDeriveMcRootKey+0x30>
{
 800da52:	b500      	push	{lr}
 800da54:	b085      	sub	sp, #20
 800da56:	468c      	mov	ip, r1
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 800da58:	2300      	movs	r3, #0
 800da5a:	9300      	str	r3, [sp, #0]
 800da5c:	9301      	str	r3, [sp, #4]
 800da5e:	9302      	str	r3, [sp, #8]
 800da60:	9303      	str	r3, [sp, #12]

    if( versionMinor == 1 )
 800da62:	2801      	cmp	r0, #1
 800da64:	d008      	beq.n	800da78 <LoRaMacCryptoDeriveMcRootKey+0x28>
    {
        compBase[0] = 0x20;
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 800da66:	2204      	movs	r2, #4
 800da68:	4661      	mov	r1, ip
 800da6a:	4668      	mov	r0, sp
 800da6c:	f003 fa82 	bl	8010f74 <SecureElementDeriveAndStoreKey>
 800da70:	b940      	cbnz	r0, 800da84 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800da72:	b005      	add	sp, #20
 800da74:	f85d fb04 	ldr.w	pc, [sp], #4
        compBase[0] = 0x20;
 800da78:	2320      	movs	r3, #32
 800da7a:	f88d 3000 	strb.w	r3, [sp]
 800da7e:	e7f2      	b.n	800da66 <LoRaMacCryptoDeriveMcRootKey+0x16>
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800da80:	200b      	movs	r0, #11
}
 800da82:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800da84:	200f      	movs	r0, #15
 800da86:	e7f4      	b.n	800da72 <LoRaMacCryptoDeriveMcRootKey+0x22>

0800da88 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 800da88:	2804      	cmp	r0, #4
 800da8a:	d001      	beq.n	800da90 <LoRaMacCryptoDeriveMcKEKey+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800da8c:	200b      	movs	r0, #11
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800da8e:	4770      	bx	lr
{
 800da90:	b500      	push	{lr}
 800da92:	b085      	sub	sp, #20
    uint8_t compBase[16] = { 0 };
 800da94:	2300      	movs	r3, #0
 800da96:	9300      	str	r3, [sp, #0]
 800da98:	9301      	str	r3, [sp, #4]
 800da9a:	9302      	str	r3, [sp, #8]
 800da9c:	9303      	str	r3, [sp, #12]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 800da9e:	227f      	movs	r2, #127	; 0x7f
 800daa0:	4601      	mov	r1, r0
 800daa2:	4668      	mov	r0, sp
 800daa4:	f003 fa66 	bl	8010f74 <SecureElementDeriveAndStoreKey>
 800daa8:	b910      	cbnz	r0, 800dab0 <LoRaMacCryptoDeriveMcKEKey+0x28>
}
 800daaa:	b005      	add	sp, #20
 800daac:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800dab0:	200f      	movs	r0, #15
 800dab2:	e7fa      	b.n	800daaa <LoRaMacCryptoDeriveMcKEKey+0x22>

0800dab4 <LoRaMacCryptoSetKey>:
{
 800dab4:	b510      	push	{r4, lr}
 800dab6:	4604      	mov	r4, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800dab8:	f003 fa1a 	bl	8010ef0 <SecureElementSetKey>
 800dabc:	b978      	cbnz	r0, 800dade <LoRaMacCryptoSetKey+0x2a>
    if( keyID == APP_KEY )
 800dabe:	b104      	cbz	r4, 800dac2 <LoRaMacCryptoSetKey+0xe>
}
 800dac0:	bd10      	pop	{r4, pc}
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 800dac2:	4b09      	ldr	r3, [pc, #36]	; (800dae8 <LoRaMacCryptoSetKey+0x34>)
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	4621      	mov	r1, r4
 800dac8:	7898      	ldrb	r0, [r3, #2]
 800daca:	f7ff ffc1 	bl	800da50 <LoRaMacCryptoDeriveMcRootKey>
 800dace:	b940      	cbnz	r0, 800dae2 <LoRaMacCryptoSetKey+0x2e>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800dad0:	2004      	movs	r0, #4
 800dad2:	f7ff ffd9 	bl	800da88 <LoRaMacCryptoDeriveMcKEKey>
 800dad6:	2800      	cmp	r0, #0
 800dad8:	d0f2      	beq.n	800dac0 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800dada:	200f      	movs	r0, #15
 800dadc:	e7f0      	b.n	800dac0 <LoRaMacCryptoSetKey+0xc>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800dade:	200f      	movs	r0, #15
 800dae0:	e7ee      	b.n	800dac0 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800dae2:	200f      	movs	r0, #15
 800dae4:	e7ec      	b.n	800dac0 <LoRaMacCryptoSetKey+0xc>
 800dae6:	bf00      	nop
 800dae8:	20000f28 	.word	0x20000f28

0800daec <LoRaMacCryptoHandleJoinAccept>:
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800daec:	2a00      	cmp	r2, #0
 800daee:	d064      	beq.n	800dbba <LoRaMacCryptoHandleJoinAccept+0xce>
{
 800daf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800daf2:	b08f      	sub	sp, #60	; 0x3c
 800daf4:	4607      	mov	r7, r0
 800daf6:	460d      	mov	r5, r1
 800daf8:	4614      	mov	r4, r2
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800dafa:	2900      	cmp	r1, #0
 800dafc:	d05f      	beq.n	800dbbe <LoRaMacCryptoHandleJoinAccept+0xd2>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800dafe:	2600      	movs	r6, #0
 800db00:	9605      	str	r6, [sp, #20]
 800db02:	221d      	movs	r2, #29
 800db04:	4631      	mov	r1, r6
 800db06:	a806      	add	r0, sp, #24
 800db08:	f005 ffa0 	bl	8013a4c <memset>
    uint8_t versionMinor         = 0;
 800db0c:	f88d 6013 	strb.w	r6, [sp, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 800db10:	4b2f      	ldr	r3, [pc, #188]	; (800dbd0 <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	889e      	ldrh	r6, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800db16:	f10d 0313 	add.w	r3, sp, #19
 800db1a:	9302      	str	r3, [sp, #8]
 800db1c:	ab05      	add	r3, sp, #20
 800db1e:	9301      	str	r3, [sp, #4]
 800db20:	7923      	ldrb	r3, [r4, #4]
 800db22:	9300      	str	r3, [sp, #0]
 800db24:	6823      	ldr	r3, [r4, #0]
 800db26:	4632      	mov	r2, r6
 800db28:	4629      	mov	r1, r5
 800db2a:	4638      	mov	r0, r7
 800db2c:	f003 fa42 	bl	8010fb4 <SecureElementProcessJoinAccept>
 800db30:	2800      	cmp	r0, #0
 800db32:	d146      	bne.n	800dbc2 <LoRaMacCryptoHandleJoinAccept+0xd6>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 800db34:	7922      	ldrb	r2, [r4, #4]
 800db36:	a905      	add	r1, sp, #20
 800db38:	6820      	ldr	r0, [r4, #0]
 800db3a:	f003 fae2 	bl	8011102 <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800db3e:	4620      	mov	r0, r4
 800db40:	f000 f848 	bl	800dbd4 <LoRaMacParserJoinAccept>
 800db44:	2800      	cmp	r0, #0
 800db46:	d13f      	bne.n	800dbc8 <LoRaMacCryptoHandleJoinAccept+0xdc>
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 800db48:	79a5      	ldrb	r5, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 800db4a:	79e3      	ldrb	r3, [r4, #7]
 800db4c:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800db50:	7a23      	ldrb	r3, [r4, #8]
 800db52:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 800db56:	4b1e      	ldr	r3, [pc, #120]	; (800dbd0 <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	689a      	ldr	r2, [r3, #8]
 800db5c:	42aa      	cmp	r2, r5
 800db5e:	d035      	beq.n	800dbcc <LoRaMacCryptoHandleJoinAccept+0xe0>
        CryptoNvm->JoinNonce = currentJoinNonce;
 800db60:	609d      	str	r5, [r3, #8]
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 800db62:	2100      	movs	r1, #0
 800db64:	f89d 0013 	ldrb.w	r0, [sp, #19]
 800db68:	f7ff ff72 	bl	800da50 <LoRaMacCryptoDeriveMcRootKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800db6c:	bb50      	cbnz	r0, 800dbc4 <LoRaMacCryptoHandleJoinAccept+0xd8>
    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 800db6e:	2004      	movs	r0, #4
 800db70:	f7ff ff8a 	bl	800da88 <LoRaMacCryptoDeriveMcKEKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800db74:	bb30      	cbnz	r0, 800dbc4 <LoRaMacCryptoHandleJoinAccept+0xd8>
        netID = ( uint32_t )macMsg->NetID[0];
 800db76:	7a63      	ldrb	r3, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800db78:	7aa2      	ldrb	r2, [r4, #10]
 800db7a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800db7e:	7ae4      	ldrb	r4, [r4, #11]
 800db80:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 800db84:	4633      	mov	r3, r6
 800db86:	4622      	mov	r2, r4
 800db88:	4629      	mov	r1, r5
 800db8a:	2003      	movs	r0, #3
 800db8c:	f7ff fd4a 	bl	800d624 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800db90:	b9c0      	cbnz	r0, 800dbc4 <LoRaMacCryptoHandleJoinAccept+0xd8>
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 800db92:	4633      	mov	r3, r6
 800db94:	4622      	mov	r2, r4
 800db96:	4629      	mov	r1, r5
 800db98:	2002      	movs	r0, #2
 800db9a:	f7ff fd43 	bl	800d624 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800db9e:	b988      	cbnz	r0, 800dbc4 <LoRaMacCryptoHandleJoinAccept+0xd8>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 800dba0:	4b0b      	ldr	r3, [pc, #44]	; (800dbd0 <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800dba8:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntUp = 0;
 800dbaa:	2200      	movs	r2, #0
 800dbac:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800dbae:	f04f 32ff 	mov.w	r2, #4294967295
 800dbb2:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800dbb4:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800dbb6:	615a      	str	r2, [r3, #20]
    return LORAMAC_CRYPTO_SUCCESS;
 800dbb8:	e004      	b.n	800dbc4 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800dbba:	200a      	movs	r0, #10
}
 800dbbc:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800dbbe:	200a      	movs	r0, #10
 800dbc0:	e000      	b.n	800dbc4 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800dbc2:	200f      	movs	r0, #15
}
 800dbc4:	b00f      	add	sp, #60	; 0x3c
 800dbc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800dbc8:	2010      	movs	r0, #16
 800dbca:	e7fb      	b.n	800dbc4 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800dbcc:	2003      	movs	r0, #3
 800dbce:	e7f9      	b.n	800dbc4 <LoRaMacCryptoHandleJoinAccept+0xd8>
 800dbd0:	20000f28 	.word	0x20000f28

0800dbd4 <LoRaMacParserJoinAccept>:
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800dbd4:	2800      	cmp	r0, #0
 800dbd6:	d049      	beq.n	800dc6c <LoRaMacParserJoinAccept+0x98>
{
 800dbd8:	b510      	push	{r4, lr}
 800dbda:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800dbdc:	6801      	ldr	r1, [r0, #0]
 800dbde:	2900      	cmp	r1, #0
 800dbe0:	d046      	beq.n	800dc70 <LoRaMacParserJoinAccept+0x9c>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800dbe2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dbe6:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800dbe8:	2203      	movs	r2, #3
 800dbea:	3006      	adds	r0, #6
 800dbec:	f003 fa89 	bl	8011102 <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800dbf0:	4620      	mov	r0, r4
 800dbf2:	f850 1b09 	ldr.w	r1, [r0], #9
 800dbf6:	2203      	movs	r2, #3
 800dbf8:	3104      	adds	r1, #4
 800dbfa:	f003 fa82 	bl	8011102 <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800dbfe:	6821      	ldr	r1, [r4, #0]
 800dc00:	79cb      	ldrb	r3, [r1, #7]
 800dc02:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800dc04:	7a0a      	ldrb	r2, [r1, #8]
 800dc06:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800dc0a:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800dc0c:	7a4a      	ldrb	r2, [r1, #9]
 800dc0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dc12:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800dc14:	7a8a      	ldrb	r2, [r1, #10]
 800dc16:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800dc1a:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800dc1c:	7acb      	ldrb	r3, [r1, #11]
 800dc1e:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800dc20:	7b0b      	ldrb	r3, [r1, #12]
 800dc22:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 800dc24:	7923      	ldrb	r3, [r4, #4]
 800dc26:	2b21      	cmp	r3, #33	; 0x21
 800dc28:	d018      	beq.n	800dc5c <LoRaMacParserJoinAccept+0x88>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800dc2a:	2b11      	cmp	r3, #17
 800dc2c:	dc22      	bgt.n	800dc74 <LoRaMacParserJoinAccept+0xa0>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800dc2e:	220d      	movs	r2, #13
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800dc30:	6821      	ldr	r1, [r4, #0]
 800dc32:	f102 0c01 	add.w	ip, r2, #1
 800dc36:	5c8b      	ldrb	r3, [r1, r2]
 800dc38:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800dc3a:	1c90      	adds	r0, r2, #2
 800dc3c:	f811 c00c 	ldrb.w	ip, [r1, ip]
 800dc40:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800dc44:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800dc46:	3203      	adds	r2, #3
 800dc48:	5c08      	ldrb	r0, [r1, r0]
 800dc4a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800dc4e:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800dc50:	5c8a      	ldrb	r2, [r1, r2]
 800dc52:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800dc56:	6263      	str	r3, [r4, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 800dc58:	2000      	movs	r0, #0
}
 800dc5a:	bd10      	pop	{r4, pc}
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 800dc5c:	2210      	movs	r2, #16
 800dc5e:	310d      	adds	r1, #13
 800dc60:	f104 0012 	add.w	r0, r4, #18
 800dc64:	f003 fa4d 	bl	8011102 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 800dc68:	221d      	movs	r2, #29
 800dc6a:	e7e1      	b.n	800dc30 <LoRaMacParserJoinAccept+0x5c>
        return LORAMAC_PARSER_ERROR_NPE;
 800dc6c:	2002      	movs	r0, #2
}
 800dc6e:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800dc70:	2002      	movs	r0, #2
 800dc72:	e7f2      	b.n	800dc5a <LoRaMacParserJoinAccept+0x86>
        return LORAMAC_PARSER_FAIL;
 800dc74:	2001      	movs	r0, #1
 800dc76:	e7f0      	b.n	800dc5a <LoRaMacParserJoinAccept+0x86>

0800dc78 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800dc78:	2800      	cmp	r0, #0
 800dc7a:	d058      	beq.n	800dd2e <LoRaMacParserData+0xb6>
{
 800dc7c:	b510      	push	{r4, lr}
 800dc7e:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800dc80:	6801      	ldr	r1, [r0, #0]
 800dc82:	2900      	cmp	r1, #0
 800dc84:	d055      	beq.n	800dd32 <LoRaMacParserData+0xba>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800dc86:	780b      	ldrb	r3, [r1, #0]
 800dc88:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800dc8a:	784b      	ldrb	r3, [r1, #1]
 800dc8c:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800dc8e:	788a      	ldrb	r2, [r1, #2]
 800dc90:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800dc94:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800dc96:	78ca      	ldrb	r2, [r1, #3]
 800dc98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dc9c:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800dc9e:	790a      	ldrb	r2, [r1, #4]
 800dca0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800dca4:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800dca6:	794b      	ldrb	r3, [r1, #5]
 800dca8:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800dcaa:	798b      	ldrb	r3, [r1, #6]
 800dcac:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800dcae:	79ca      	ldrb	r2, [r1, #7]
 800dcb0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800dcb4:	81c3      	strh	r3, [r0, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800dcb6:	7b02      	ldrb	r2, [r0, #12]
 800dcb8:	f002 020f 	and.w	r2, r2, #15
 800dcbc:	3108      	adds	r1, #8
 800dcbe:	3010      	adds	r0, #16
 800dcc0:	f003 fa1f 	bl	8011102 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800dcc4:	7b23      	ldrb	r3, [r4, #12]
 800dcc6:	f003 030f 	and.w	r3, r3, #15
 800dcca:	f103 0008 	add.w	r0, r3, #8
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800dcce:	2200      	movs	r2, #0
 800dcd0:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 800dcd4:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800dcd8:	7922      	ldrb	r2, [r4, #4]
 800dcda:	1a11      	subs	r1, r2, r0
 800dcdc:	2904      	cmp	r1, #4
 800dcde:	dc16      	bgt.n	800dd0e <LoRaMacParserData+0x96>
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800dce0:	6822      	ldr	r2, [r4, #0]
 800dce2:	7923      	ldrb	r3, [r4, #4]
 800dce4:	441a      	add	r2, r3
 800dce6:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 800dcea:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800dcec:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 800dcf0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800dcf4:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800dcf6:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800dcfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800dcfe:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800dd00:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800dd04:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800dd08:	62e3      	str	r3, [r4, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 800dd0a:	2000      	movs	r0, #0
}
 800dd0c:	bd10      	pop	{r4, pc}
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800dd0e:	6821      	ldr	r1, [r4, #0]
 800dd10:	3309      	adds	r3, #9
 800dd12:	5c08      	ldrb	r0, [r1, r0]
 800dd14:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800dd18:	1ad2      	subs	r2, r2, r3
 800dd1a:	b2d2      	uxtb	r2, r2
 800dd1c:	3a04      	subs	r2, #4
 800dd1e:	b2d2      	uxtb	r2, r2
 800dd20:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800dd24:	4419      	add	r1, r3
 800dd26:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800dd28:	f003 f9eb 	bl	8011102 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 800dd2c:	e7d8      	b.n	800dce0 <LoRaMacParserData+0x68>
        return LORAMAC_PARSER_ERROR_NPE;
 800dd2e:	2002      	movs	r0, #2
}
 800dd30:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800dd32:	2002      	movs	r0, #2
 800dd34:	e7ea      	b.n	800dd0c <LoRaMacParserData+0x94>

0800dd36 <LoRaMacSerializerJoinRequest>:
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800dd36:	b370      	cbz	r0, 800dd96 <LoRaMacSerializerJoinRequest+0x60>
{
 800dd38:	b510      	push	{r4, lr}
 800dd3a:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800dd3c:	6803      	ldr	r3, [r0, #0]
 800dd3e:	b363      	cbz	r3, 800dd9a <LoRaMacSerializerJoinRequest+0x64>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800dd40:	7902      	ldrb	r2, [r0, #4]
 800dd42:	2a16      	cmp	r2, #22
 800dd44:	d92b      	bls.n	800dd9e <LoRaMacSerializerJoinRequest+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800dd46:	7942      	ldrb	r2, [r0, #5]
 800dd48:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800dd4a:	4601      	mov	r1, r0
 800dd4c:	f851 0b06 	ldr.w	r0, [r1], #6
 800dd50:	2208      	movs	r2, #8
 800dd52:	3001      	adds	r0, #1
 800dd54:	f003 f9e0 	bl	8011118 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800dd58:	4621      	mov	r1, r4
 800dd5a:	f851 0b0e 	ldr.w	r0, [r1], #14
 800dd5e:	2208      	movs	r2, #8
 800dd60:	3009      	adds	r0, #9
 800dd62:	f003 f9d9 	bl	8011118 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800dd66:	8ae2      	ldrh	r2, [r4, #22]
 800dd68:	6823      	ldr	r3, [r4, #0]
 800dd6a:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800dd6c:	8ae3      	ldrh	r3, [r4, #22]
 800dd6e:	6822      	ldr	r2, [r4, #0]
 800dd70:	0a1b      	lsrs	r3, r3, #8
 800dd72:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800dd74:	69a2      	ldr	r2, [r4, #24]
 800dd76:	6823      	ldr	r3, [r4, #0]
 800dd78:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800dd7a:	69a3      	ldr	r3, [r4, #24]
 800dd7c:	0a1b      	lsrs	r3, r3, #8
 800dd7e:	6822      	ldr	r2, [r4, #0]
 800dd80:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800dd82:	8b62      	ldrh	r2, [r4, #26]
 800dd84:	6823      	ldr	r3, [r4, #0]
 800dd86:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800dd88:	7ee2      	ldrb	r2, [r4, #27]
 800dd8a:	6823      	ldr	r3, [r4, #0]
 800dd8c:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 800dd8e:	2317      	movs	r3, #23
 800dd90:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800dd92:	2000      	movs	r0, #0
}
 800dd94:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800dd96:	2001      	movs	r0, #1
}
 800dd98:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800dd9a:	2001      	movs	r0, #1
 800dd9c:	e7fa      	b.n	800dd94 <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800dd9e:	2002      	movs	r0, #2
 800dda0:	e7f8      	b.n	800dd94 <LoRaMacSerializerJoinRequest+0x5e>

0800dda2 <LoRaMacSerializerData>:
    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800dda2:	2800      	cmp	r0, #0
 800dda4:	d066      	beq.n	800de74 <LoRaMacSerializerData+0xd2>
{
 800dda6:	b538      	push	{r3, r4, r5, lr}
 800dda8:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800ddaa:	6801      	ldr	r1, [r0, #0]
 800ddac:	2900      	cmp	r1, #0
 800ddae:	d063      	beq.n	800de78 <LoRaMacSerializerData+0xd6>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800ddb0:	7b02      	ldrb	r2, [r0, #12]
 800ddb2:	f002 020f 	and.w	r2, r2, #15
 800ddb6:	f102 0008 	add.w	r0, r2, #8

    if( macMsg->FRMPayloadSize > 0 )
 800ddba:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800ddbe:	b10b      	cbz	r3, 800ddc4 <LoRaMacSerializerData+0x22>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 800ddc0:	f102 0009 	add.w	r0, r2, #9
    }

    computedBufSize += macMsg->FRMPayloadSize;
 800ddc4:	4403      	add	r3, r0
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800ddc6:	3304      	adds	r3, #4
 800ddc8:	b29b      	uxth	r3, r3

    if( macMsg->BufSize < computedBufSize )
 800ddca:	7922      	ldrb	r2, [r4, #4]
 800ddcc:	429a      	cmp	r2, r3
 800ddce:	d355      	bcc.n	800de7c <LoRaMacSerializerData+0xda>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800ddd0:	7963      	ldrb	r3, [r4, #5]
 800ddd2:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800ddd4:	68a2      	ldr	r2, [r4, #8]
 800ddd6:	6823      	ldr	r3, [r4, #0]
 800ddd8:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800ddda:	68a3      	ldr	r3, [r4, #8]
 800dddc:	0a1b      	lsrs	r3, r3, #8
 800ddde:	6822      	ldr	r2, [r4, #0]
 800dde0:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800dde2:	8962      	ldrh	r2, [r4, #10]
 800dde4:	6823      	ldr	r3, [r4, #0]
 800dde6:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800dde8:	7ae2      	ldrb	r2, [r4, #11]
 800ddea:	6823      	ldr	r3, [r4, #0]
 800ddec:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800ddee:	6823      	ldr	r3, [r4, #0]
 800ddf0:	7b22      	ldrb	r2, [r4, #12]
 800ddf2:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800ddf4:	89e2      	ldrh	r2, [r4, #14]
 800ddf6:	6823      	ldr	r3, [r4, #0]
 800ddf8:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800ddfa:	89e3      	ldrh	r3, [r4, #14]
 800ddfc:	6822      	ldr	r2, [r4, #0]
 800ddfe:	0a1b      	lsrs	r3, r3, #8
 800de00:	71d3      	strb	r3, [r2, #7]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800de02:	4621      	mov	r1, r4
 800de04:	f851 0b10 	ldr.w	r0, [r1], #16
 800de08:	7b22      	ldrb	r2, [r4, #12]
 800de0a:	f002 020f 	and.w	r2, r2, #15
 800de0e:	3008      	adds	r0, #8
 800de10:	f003 f977 	bl	8011102 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800de14:	7b23      	ldrb	r3, [r4, #12]
 800de16:	f003 030f 	and.w	r3, r3, #15
 800de1a:	f103 0508 	add.w	r5, r3, #8

    if( macMsg->FRMPayloadSize > 0 )
 800de1e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800de22:	b12a      	cbz	r2, 800de30 <LoRaMacSerializerData+0x8e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800de24:	6822      	ldr	r2, [r4, #0]
 800de26:	f894 1020 	ldrb.w	r1, [r4, #32]
 800de2a:	5551      	strb	r1, [r2, r5]
 800de2c:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800de30:	6820      	ldr	r0, [r4, #0]
 800de32:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800de36:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800de38:	4428      	add	r0, r5
 800de3a:	f003 f962 	bl	8011102 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800de3e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800de42:	442b      	add	r3, r5

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800de44:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800de46:	6821      	ldr	r1, [r4, #0]
 800de48:	1c5a      	adds	r2, r3, #1
 800de4a:	b292      	uxth	r2, r2
 800de4c:	54c8      	strb	r0, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800de4e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800de50:	0a08      	lsrs	r0, r1, #8
 800de52:	6825      	ldr	r5, [r4, #0]
 800de54:	1c99      	adds	r1, r3, #2
 800de56:	b289      	uxth	r1, r1
 800de58:	54a8      	strb	r0, [r5, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800de5a:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 800de5c:	6820      	ldr	r0, [r4, #0]
 800de5e:	1cda      	adds	r2, r3, #3
 800de60:	b292      	uxth	r2, r2
 800de62:	5445      	strb	r5, [r0, r1]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800de64:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 800de68:	6821      	ldr	r1, [r4, #0]
 800de6a:	3304      	adds	r3, #4
 800de6c:	5488      	strb	r0, [r1, r2]

    macMsg->BufSize = bufItr;
 800de6e:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800de70:	2000      	movs	r0, #0
}
 800de72:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800de74:	2001      	movs	r0, #1
}
 800de76:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800de78:	2001      	movs	r0, #1
 800de7a:	e7fa      	b.n	800de72 <LoRaMacSerializerData+0xd0>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800de7c:	2002      	movs	r0, #2
 800de7e:	e7f8      	b.n	800de72 <LoRaMacSerializerData+0xd0>

0800de80 <NvmDataMgmtEvent>:
void NvmDataMgmtEvent( uint16_t notifyFlags )
{
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800de80:	4770      	bx	lr

0800de82 <NvmDataMgmtStoreBegin>:
    }
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800de82:	f06f 0004 	mvn.w	r0, #4
 800de86:	4770      	bx	lr

0800de88 <NvmDataMgmtStoreEnd>:
    LoRaMacStart( );
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800de88:	f06f 0004 	mvn.w	r0, #4
 800de8c:	4770      	bx	lr

0800de8e <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 800de8e:	2805      	cmp	r0, #5
 800de90:	d005      	beq.n	800de9e <RegionIsActive+0x10>
 800de92:	2808      	cmp	r0, #8
 800de94:	d001      	beq.n	800de9a <RegionIsActive+0xc>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 800de96:	2000      	movs	r0, #0
        }
    }
}
 800de98:	4770      	bx	lr
    switch( region )
 800de9a:	2001      	movs	r0, #1
 800de9c:	4770      	bx	lr
 800de9e:	2001      	movs	r0, #1
 800dea0:	4770      	bx	lr

0800dea2 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800dea2:	b500      	push	{lr}
 800dea4:	b083      	sub	sp, #12
 800dea6:	4603      	mov	r3, r0
 800dea8:	4608      	mov	r0, r1
    PhyParam_t phyParam = { 0 };
 800deaa:	2200      	movs	r2, #0
 800deac:	9200      	str	r2, [sp, #0]
    switch( region )
 800deae:	2b05      	cmp	r3, #5
 800deb0:	d004      	beq.n	800debc <RegionGetPhyParam+0x1a>
 800deb2:	2b08      	cmp	r3, #8
 800deb4:	d009      	beq.n	800deca <RegionGetPhyParam+0x28>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 800deb6:	9b00      	ldr	r3, [sp, #0]
 800deb8:	9301      	str	r3, [sp, #4]
 800deba:	e002      	b.n	800dec2 <RegionGetPhyParam+0x20>
        EU868_GET_PHY_PARAM( );
 800debc:	f000 fdfa 	bl	800eab4 <RegionEU868GetPhyParam>
 800dec0:	9001      	str	r0, [sp, #4]
        }
    }
}
 800dec2:	9801      	ldr	r0, [sp, #4]
 800dec4:	b003      	add	sp, #12
 800dec6:	f85d fb04 	ldr.w	pc, [sp], #4
        US915_GET_PHY_PARAM( );
 800deca:	f001 fc19 	bl	800f700 <RegionUS915GetPhyParam>
 800dece:	9001      	str	r0, [sp, #4]
 800ded0:	e7f7      	b.n	800dec2 <RegionGetPhyParam+0x20>

0800ded2 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 800ded2:	b508      	push	{r3, lr}
 800ded4:	4603      	mov	r3, r0
 800ded6:	4608      	mov	r0, r1
    switch( region )
 800ded8:	2b05      	cmp	r3, #5
 800deda:	d002      	beq.n	800dee2 <RegionSetBandTxDone+0x10>
 800dedc:	2b08      	cmp	r3, #8
 800dede:	d003      	beq.n	800dee8 <RegionSetBandTxDone+0x16>
        default:
        {
            return;
        }
    }
}
 800dee0:	bd08      	pop	{r3, pc}
        EU868_SET_BAND_TX_DONE( );
 800dee2:	f000 fea9 	bl	800ec38 <RegionEU868SetBandTxDone>
 800dee6:	e7fb      	b.n	800dee0 <RegionSetBandTxDone+0xe>
        US915_SET_BAND_TX_DONE( );
 800dee8:	f001 fce6 	bl	800f8b8 <RegionUS915SetBandTxDone>
 800deec:	e7f8      	b.n	800dee0 <RegionSetBandTxDone+0xe>

0800deee <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 800deee:	b508      	push	{r3, lr}
 800def0:	4603      	mov	r3, r0
 800def2:	4608      	mov	r0, r1
    switch( region )
 800def4:	2b05      	cmp	r3, #5
 800def6:	d002      	beq.n	800defe <RegionInitDefaults+0x10>
 800def8:	2b08      	cmp	r3, #8
 800defa:	d003      	beq.n	800df04 <RegionInitDefaults+0x16>
        default:
        {
            break;
        }
    }
}
 800defc:	bd08      	pop	{r3, pc}
        EU868_INIT_DEFAULTS( );
 800defe:	f000 feb9 	bl	800ec74 <RegionEU868InitDefaults>
 800df02:	e7fb      	b.n	800defc <RegionInitDefaults+0xe>
        US915_INIT_DEFAULTS( );
 800df04:	f001 fcf6 	bl	800f8f4 <RegionUS915InitDefaults>
}
 800df08:	e7f8      	b.n	800defc <RegionInitDefaults+0xe>

0800df0a <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800df0a:	b508      	push	{r3, lr}
 800df0c:	4603      	mov	r3, r0
 800df0e:	4608      	mov	r0, r1
 800df10:	4611      	mov	r1, r2
    switch( region )
 800df12:	2b05      	cmp	r3, #5
 800df14:	d003      	beq.n	800df1e <RegionVerify+0x14>
 800df16:	2b08      	cmp	r3, #8
 800df18:	d004      	beq.n	800df24 <RegionVerify+0x1a>
 800df1a:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800df1c:	bd08      	pop	{r3, pc}
        EU868_VERIFY( );
 800df1e:	f000 ff15 	bl	800ed4c <RegionEU868Verify>
 800df22:	e7fb      	b.n	800df1c <RegionVerify+0x12>
        US915_VERIFY( );
 800df24:	f001 fd8c 	bl	800fa40 <RegionUS915Verify>
 800df28:	e7f8      	b.n	800df1c <RegionVerify+0x12>

0800df2a <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 800df2a:	b508      	push	{r3, lr}
 800df2c:	4603      	mov	r3, r0
 800df2e:	4608      	mov	r0, r1
    switch( region )
 800df30:	2b05      	cmp	r3, #5
 800df32:	d002      	beq.n	800df3a <RegionApplyCFList+0x10>
 800df34:	2b08      	cmp	r3, #8
 800df36:	d003      	beq.n	800df40 <RegionApplyCFList+0x16>
        default:
        {
            break;
        }
    }
}
 800df38:	bd08      	pop	{r3, pc}
        EU868_APPLY_CF_LIST( );
 800df3a:	f001 fad5 	bl	800f4e8 <RegionEU868ApplyCFList>
 800df3e:	e7fb      	b.n	800df38 <RegionApplyCFList+0xe>
        US915_APPLY_CF_LIST( );
 800df40:	f001 fdae 	bl	800faa0 <RegionUS915ApplyCFList>
}
 800df44:	e7f8      	b.n	800df38 <RegionApplyCFList+0xe>

0800df46 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 800df46:	b508      	push	{r3, lr}
 800df48:	4603      	mov	r3, r0
 800df4a:	4608      	mov	r0, r1
    switch( region )
 800df4c:	2b05      	cmp	r3, #5
 800df4e:	d003      	beq.n	800df58 <RegionChanMaskSet+0x12>
 800df50:	2b08      	cmp	r3, #8
 800df52:	d004      	beq.n	800df5e <RegionChanMaskSet+0x18>
 800df54:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800df56:	bd08      	pop	{r3, pc}
        EU868_CHAN_MASK_SET( );
 800df58:	f000 ff3e 	bl	800edd8 <RegionEU868ChanMaskSet>
 800df5c:	e7fb      	b.n	800df56 <RegionChanMaskSet+0x10>
        US915_CHAN_MASK_SET( );
 800df5e:	f001 fde1 	bl	800fb24 <RegionUS915ChanMaskSet>
 800df62:	e7f8      	b.n	800df56 <RegionChanMaskSet+0x10>

0800df64 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800df64:	b508      	push	{r3, lr}
 800df66:	4684      	mov	ip, r0
 800df68:	4608      	mov	r0, r1
 800df6a:	4611      	mov	r1, r2
 800df6c:	461a      	mov	r2, r3
    switch( region )
 800df6e:	f1bc 0f05 	cmp.w	ip, #5
 800df72:	d003      	beq.n	800df7c <RegionComputeRxWindowParameters+0x18>
 800df74:	f1bc 0f08 	cmp.w	ip, #8
 800df78:	d004      	beq.n	800df84 <RegionComputeRxWindowParameters+0x20>
        default:
        {
            break;
        }
    }
}
 800df7a:	bd08      	pop	{r3, pc}
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 800df7c:	9b02      	ldr	r3, [sp, #8]
 800df7e:	f000 ff49 	bl	800ee14 <RegionEU868ComputeRxWindowParameters>
 800df82:	e7fa      	b.n	800df7a <RegionComputeRxWindowParameters+0x16>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 800df84:	9b02      	ldr	r3, [sp, #8]
 800df86:	f001 fe11 	bl	800fbac <RegionUS915ComputeRxWindowParameters>
}
 800df8a:	e7f6      	b.n	800df7a <RegionComputeRxWindowParameters+0x16>

0800df8c <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800df8c:	b508      	push	{r3, lr}
 800df8e:	4603      	mov	r3, r0
 800df90:	4608      	mov	r0, r1
 800df92:	4611      	mov	r1, r2
    switch( region )
 800df94:	2b05      	cmp	r3, #5
 800df96:	d003      	beq.n	800dfa0 <RegionRxConfig+0x14>
 800df98:	2b08      	cmp	r3, #8
 800df9a:	d004      	beq.n	800dfa6 <RegionRxConfig+0x1a>
 800df9c:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800df9e:	bd08      	pop	{r3, pc}
        EU868_RX_CONFIG( );
 800dfa0:	f000 ff6e 	bl	800ee80 <RegionEU868RxConfig>
 800dfa4:	e7fb      	b.n	800df9e <RegionRxConfig+0x12>
        US915_RX_CONFIG( );
 800dfa6:	f001 fe2f 	bl	800fc08 <RegionUS915RxConfig>
 800dfaa:	e7f8      	b.n	800df9e <RegionRxConfig+0x12>

0800dfac <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800dfac:	b508      	push	{r3, lr}
 800dfae:	4684      	mov	ip, r0
 800dfb0:	4608      	mov	r0, r1
 800dfb2:	4611      	mov	r1, r2
 800dfb4:	461a      	mov	r2, r3
    switch( region )
 800dfb6:	f1bc 0f05 	cmp.w	ip, #5
 800dfba:	d004      	beq.n	800dfc6 <RegionTxConfig+0x1a>
 800dfbc:	f1bc 0f08 	cmp.w	ip, #8
 800dfc0:	d004      	beq.n	800dfcc <RegionTxConfig+0x20>
 800dfc2:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800dfc4:	bd08      	pop	{r3, pc}
        EU868_TX_CONFIG( );
 800dfc6:	f000 ffdf 	bl	800ef88 <RegionEU868TxConfig>
 800dfca:	e7fb      	b.n	800dfc4 <RegionTxConfig+0x18>
        US915_TX_CONFIG( );
 800dfcc:	f001 fe76 	bl	800fcbc <RegionUS915TxConfig>
 800dfd0:	e7f8      	b.n	800dfc4 <RegionTxConfig+0x18>

0800dfd2 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800dfd2:	b500      	push	{lr}
 800dfd4:	b083      	sub	sp, #12
 800dfd6:	4684      	mov	ip, r0
 800dfd8:	4608      	mov	r0, r1
 800dfda:	4611      	mov	r1, r2
 800dfdc:	461a      	mov	r2, r3
    switch( region )
 800dfde:	f1bc 0f05 	cmp.w	ip, #5
 800dfe2:	d006      	beq.n	800dff2 <RegionLinkAdrReq+0x20>
 800dfe4:	f1bc 0f08 	cmp.w	ip, #8
 800dfe8:	d009      	beq.n	800dffe <RegionLinkAdrReq+0x2c>
 800dfea:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800dfec:	b003      	add	sp, #12
 800dfee:	f85d fb04 	ldr.w	pc, [sp], #4
        EU868_LINK_ADR_REQ( );
 800dff2:	9b05      	ldr	r3, [sp, #20]
 800dff4:	9300      	str	r3, [sp, #0]
 800dff6:	9b04      	ldr	r3, [sp, #16]
 800dff8:	f001 f85e 	bl	800f0b8 <RegionEU868LinkAdrReq>
 800dffc:	e7f6      	b.n	800dfec <RegionLinkAdrReq+0x1a>
        US915_LINK_ADR_REQ( );
 800dffe:	9b05      	ldr	r3, [sp, #20]
 800e000:	9300      	str	r3, [sp, #0]
 800e002:	9b04      	ldr	r3, [sp, #16]
 800e004:	f001 fed4 	bl	800fdb0 <RegionUS915LinkAdrReq>
 800e008:	e7f0      	b.n	800dfec <RegionLinkAdrReq+0x1a>

0800e00a <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 800e00a:	b508      	push	{r3, lr}
 800e00c:	4603      	mov	r3, r0
 800e00e:	4608      	mov	r0, r1
    switch( region )
 800e010:	2b05      	cmp	r3, #5
 800e012:	d003      	beq.n	800e01c <RegionRxParamSetupReq+0x12>
 800e014:	2b08      	cmp	r3, #8
 800e016:	d004      	beq.n	800e022 <RegionRxParamSetupReq+0x18>
 800e018:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800e01a:	bd08      	pop	{r3, pc}
        EU868_RX_PARAM_SETUP_REQ( );
 800e01c:	f001 f910 	bl	800f240 <RegionEU868RxParamSetupReq>
 800e020:	e7fb      	b.n	800e01a <RegionRxParamSetupReq+0x10>
        US915_RX_PARAM_SETUP_REQ( );
 800e022:	f002 f811 	bl	8010048 <RegionUS915RxParamSetupReq>
 800e026:	e7f8      	b.n	800e01a <RegionRxParamSetupReq+0x10>

0800e028 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 800e028:	b508      	push	{r3, lr}
 800e02a:	4603      	mov	r3, r0
 800e02c:	4608      	mov	r0, r1
    switch( region )
 800e02e:	2b05      	cmp	r3, #5
 800e030:	d003      	beq.n	800e03a <RegionNewChannelReq+0x12>
 800e032:	2b08      	cmp	r3, #8
 800e034:	d004      	beq.n	800e040 <RegionNewChannelReq+0x18>
 800e036:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800e038:	bd08      	pop	{r3, pc}
        EU868_NEW_CHANNEL_REQ( );
 800e03a:	f001 fa96 	bl	800f56a <RegionEU868NewChannelReq>
 800e03e:	e7fb      	b.n	800e038 <RegionNewChannelReq+0x10>
        US915_NEW_CHANNEL_REQ( );
 800e040:	f002 f82d 	bl	801009e <RegionUS915NewChannelReq>
 800e044:	e7f8      	b.n	800e038 <RegionNewChannelReq+0x10>

0800e046 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 800e046:	b508      	push	{r3, lr}
 800e048:	4603      	mov	r3, r0
 800e04a:	4608      	mov	r0, r1
    switch( region )
 800e04c:	2b05      	cmp	r3, #5
 800e04e:	d003      	beq.n	800e058 <RegionTxParamSetupReq+0x12>
 800e050:	2b08      	cmp	r3, #8
 800e052:	d004      	beq.n	800e05e <RegionTxParamSetupReq+0x18>
 800e054:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800e056:	bd08      	pop	{r3, pc}
        EU868_TX_PARAM_SETUP_REQ( );
 800e058:	f001 f916 	bl	800f288 <RegionEU868TxParamSetupReq>
 800e05c:	e7fb      	b.n	800e056 <RegionTxParamSetupReq+0x10>
        US915_TX_PARAM_SETUP_REQ( );
 800e05e:	f002 f821 	bl	80100a4 <RegionUS915TxParamSetupReq>
 800e062:	e7f8      	b.n	800e056 <RegionTxParamSetupReq+0x10>

0800e064 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 800e064:	b508      	push	{r3, lr}
 800e066:	4603      	mov	r3, r0
 800e068:	4608      	mov	r0, r1
    switch( region )
 800e06a:	2b05      	cmp	r3, #5
 800e06c:	d003      	beq.n	800e076 <RegionDlChannelReq+0x12>
 800e06e:	2b08      	cmp	r3, #8
 800e070:	d004      	beq.n	800e07c <RegionDlChannelReq+0x18>
 800e072:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800e074:	bd08      	pop	{r3, pc}
        EU868_DL_CHANNEL_REQ( );
 800e076:	f001 f90b 	bl	800f290 <RegionEU868DlChannelReq>
 800e07a:	e7fb      	b.n	800e074 <RegionDlChannelReq+0x10>
        US915_DL_CHANNEL_REQ( );
 800e07c:	f002 f815 	bl	80100aa <RegionUS915DlChannelReq>
 800e080:	e7f8      	b.n	800e074 <RegionDlChannelReq+0x10>

0800e082 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 800e082:	b508      	push	{r3, lr}
 800e084:	4603      	mov	r3, r0
 800e086:	4608      	mov	r0, r1
 800e088:	4611      	mov	r1, r2
    switch( region )
 800e08a:	2b05      	cmp	r3, #5
 800e08c:	d003      	beq.n	800e096 <RegionAlternateDr+0x14>
 800e08e:	2b08      	cmp	r3, #8
 800e090:	d004      	beq.n	800e09c <RegionAlternateDr+0x1a>
 800e092:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800e094:	bd08      	pop	{r3, pc}
        EU868_ALTERNATE_DR( );
 800e096:	f001 f923 	bl	800f2e0 <RegionEU868AlternateDr>
 800e09a:	e7fb      	b.n	800e094 <RegionAlternateDr+0x12>
        US915_ALTERNATE_DR( );
 800e09c:	f002 f808 	bl	80100b0 <RegionUS915AlternateDr>
 800e0a0:	e7f8      	b.n	800e094 <RegionAlternateDr+0x12>

0800e0a2 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800e0a2:	b508      	push	{r3, lr}
 800e0a4:	4684      	mov	ip, r0
 800e0a6:	4608      	mov	r0, r1
 800e0a8:	4611      	mov	r1, r2
 800e0aa:	461a      	mov	r2, r3
    switch( region )
 800e0ac:	f1bc 0f05 	cmp.w	ip, #5
 800e0b0:	d004      	beq.n	800e0bc <RegionNextChannel+0x1a>
 800e0b2:	f1bc 0f08 	cmp.w	ip, #8
 800e0b6:	d005      	beq.n	800e0c4 <RegionNextChannel+0x22>
 800e0b8:	2009      	movs	r0, #9
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
        }
    }
}
 800e0ba:	bd08      	pop	{r3, pc}
        EU868_NEXT_CHANNEL( );
 800e0bc:	9b02      	ldr	r3, [sp, #8]
 800e0be:	f001 f911 	bl	800f2e4 <RegionEU868NextChannel>
 800e0c2:	e7fa      	b.n	800e0ba <RegionNextChannel+0x18>
        US915_NEXT_CHANNEL( );
 800e0c4:	9b02      	ldr	r3, [sp, #8]
 800e0c6:	f002 f819 	bl	80100fc <RegionUS915NextChannel>
 800e0ca:	e7f6      	b.n	800e0ba <RegionNextChannel+0x18>

0800e0cc <RegionSetContinuousWave>:
    }
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 800e0cc:	b508      	push	{r3, lr}
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	4608      	mov	r0, r1
    switch( region )
 800e0d2:	2b05      	cmp	r3, #5
 800e0d4:	d002      	beq.n	800e0dc <RegionSetContinuousWave+0x10>
 800e0d6:	2b08      	cmp	r3, #8
 800e0d8:	d003      	beq.n	800e0e2 <RegionSetContinuousWave+0x16>
        default:
        {
            break;
        }
    }
}
 800e0da:	bd08      	pop	{r3, pc}
        EU868_SET_CONTINUOUS_WAVE( );
 800e0dc:	f001 fa70 	bl	800f5c0 <RegionEU868SetContinuousWave>
 800e0e0:	e7fb      	b.n	800e0da <RegionSetContinuousWave+0xe>
        US915_SET_CONTINUOUS_WAVE( );
 800e0e2:	f002 f8bf 	bl	8010264 <RegionUS915SetContinuousWave>
}
 800e0e6:	e7f8      	b.n	800e0da <RegionSetContinuousWave+0xe>

0800e0e8 <RegionApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800e0e8:	b508      	push	{r3, lr}
 800e0ea:	4684      	mov	ip, r0
 800e0ec:	4608      	mov	r0, r1
 800e0ee:	4611      	mov	r1, r2
 800e0f0:	461a      	mov	r2, r3
    switch( region )
 800e0f2:	f1bc 0f05 	cmp.w	ip, #5
 800e0f6:	d004      	beq.n	800e102 <RegionApplyDrOffset+0x1a>
 800e0f8:	f1bc 0f08 	cmp.w	ip, #8
 800e0fc:	d004      	beq.n	800e108 <RegionApplyDrOffset+0x20>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 800e0fe:	b2c8      	uxtb	r0, r1
 800e100:	e001      	b.n	800e106 <RegionApplyDrOffset+0x1e>
        EU868_APPLY_DR_OFFSET( );
 800e102:	f001 fa8b 	bl	800f61c <RegionEU868ApplyDrOffset>
        }
    }
}
 800e106:	bd08      	pop	{r3, pc}
        US915_APPLY_DR_OFFSET( );
 800e108:	f002 f8e0 	bl	80102cc <RegionUS915ApplyDrOffset>
 800e10c:	e7fb      	b.n	800e106 <RegionApplyDrOffset+0x1e>
	...

0800e110 <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 800e110:	4800      	ldr	r0, [pc, #0]	; (800e114 <RegionGetVersion+0x4>)
 800e112:	4770      	bx	lr
 800e114:	01010003 	.word	0x01010003

0800e118 <FindAvailable125kHzChannels>:
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 800e118:	468c      	mov	ip, r1
 800e11a:	b1a9      	cbz	r1, 800e148 <FindAvailable125kHzChannels+0x30>
 800e11c:	b1b2      	cbz	r2, 800e14c <FindAvailable125kHzChannels+0x34>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Initialize counter
    *availableChannels = 0;
 800e11e:	2300      	movs	r3, #0
 800e120:	7013      	strb	r3, [r2, #0]
    for( uint8_t i = 0; i < 8; i++ )
 800e122:	e001      	b.n	800e128 <FindAvailable125kHzChannels+0x10>
 800e124:	3301      	adds	r3, #1
 800e126:	b2db      	uxtb	r3, r3
 800e128:	2b07      	cmp	r3, #7
 800e12a:	d80b      	bhi.n	800e144 <FindAvailable125kHzChannels+0x2c>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 800e12c:	fa40 f103 	asr.w	r1, r0, r3
 800e130:	f011 0f01 	tst.w	r1, #1
 800e134:	d0f6      	beq.n	800e124 <FindAvailable125kHzChannels+0xc>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 800e136:	7811      	ldrb	r1, [r2, #0]
 800e138:	f80c 3001 	strb.w	r3, [ip, r1]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 800e13c:	7811      	ldrb	r1, [r2, #0]
 800e13e:	3101      	adds	r1, #1
 800e140:	7011      	strb	r1, [r2, #0]
 800e142:	e7ef      	b.n	800e124 <FindAvailable125kHzChannels+0xc>
        }
    }

    return LORAMAC_STATUS_OK;
 800e144:	2000      	movs	r0, #0
 800e146:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e148:	2003      	movs	r0, #3
 800e14a:	4770      	bx	lr
 800e14c:	2003      	movs	r0, #3
}
 800e14e:	4770      	bx	lr

0800e150 <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 800e150:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e152:	b085      	sub	sp, #20
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 800e154:	2300      	movs	r3, #0
 800e156:	9302      	str	r3, [sp, #8]
 800e158:	9303      	str	r3, [sp, #12]
    uint8_t availableChannels = 0;
 800e15a:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 800e15e:	2800      	cmp	r0, #0
 800e160:	d03e      	beq.n	800e1e0 <RegionBaseUSComputeNext125kHzJoinChannel+0x90>
 800e162:	460d      	mov	r5, r1
 800e164:	4617      	mov	r7, r2
 800e166:	4606      	mov	r6, r0
 800e168:	2900      	cmp	r1, #0
 800e16a:	d03b      	beq.n	800e1e4 <RegionBaseUSComputeNext125kHzJoinChannel+0x94>
 800e16c:	2a00      	cmp	r2, #0
 800e16e:	d03b      	beq.n	800e1e8 <RegionBaseUSComputeNext125kHzJoinChannel+0x98>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 800e170:	780c      	ldrb	r4, [r1, #0]
 800e172:	e017      	b.n	800e1a4 <RegionBaseUSComputeNext125kHzJoinChannel+0x54>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 800e174:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
 800e178:	0a00      	lsrs	r0, r0, #8
 800e17a:	e019      	b.n	800e1b0 <RegionBaseUSComputeNext125kHzJoinChannel+0x60>
        }

        if ( availableChannels > 0 )
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 800e17c:	3901      	subs	r1, #1
 800e17e:	2000      	movs	r0, #0
 800e180:	f002 ffb2 	bl	80110e8 <randr>
 800e184:	f100 0310 	add.w	r3, r0, #16
 800e188:	eb0d 0003 	add.w	r0, sp, r3
 800e18c:	f810 3c08 	ldrb.w	r3, [r0, #-8]
 800e190:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e194:	703b      	strb	r3, [r7, #0]
 800e196:	e016      	b.n	800e1c6 <RegionBaseUSComputeNext125kHzJoinChannel+0x76>
        startIndex++;
        if ( startIndex > 7 )
        {
            startIndex = 0;
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 800e198:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e19c:	b9cb      	cbnz	r3, 800e1d2 <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
 800e19e:	782a      	ldrb	r2, [r5, #0]
 800e1a0:	42a2      	cmp	r2, r4
 800e1a2:	d016      	beq.n	800e1d2 <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 800e1a4:	0863      	lsrs	r3, r4, #1
        if( ( startIndex % 2 ) == 0 )
 800e1a6:	f014 0f01 	tst.w	r4, #1
 800e1aa:	d1e3      	bne.n	800e174 <RegionBaseUSComputeNext125kHzJoinChannel+0x24>
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 800e1ac:	f816 0013 	ldrb.w	r0, [r6, r3, lsl #1]
        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 800e1b0:	f10d 0207 	add.w	r2, sp, #7
 800e1b4:	a902      	add	r1, sp, #8
 800e1b6:	f7ff ffaf 	bl	800e118 <FindAvailable125kHzChannels>
 800e1ba:	2803      	cmp	r0, #3
 800e1bc:	d00b      	beq.n	800e1d6 <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        if ( availableChannels > 0 )
 800e1be:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800e1c2:	2900      	cmp	r1, #0
 800e1c4:	d1da      	bne.n	800e17c <RegionBaseUSComputeNext125kHzJoinChannel+0x2c>
        startIndex++;
 800e1c6:	3401      	adds	r4, #1
 800e1c8:	b2e4      	uxtb	r4, r4
        if ( startIndex > 7 )
 800e1ca:	2c07      	cmp	r4, #7
 800e1cc:	d9e4      	bls.n	800e198 <RegionBaseUSComputeNext125kHzJoinChannel+0x48>
            startIndex = 0;
 800e1ce:	2400      	movs	r4, #0
 800e1d0:	e7e2      	b.n	800e198 <RegionBaseUSComputeNext125kHzJoinChannel+0x48>

    if ( availableChannels > 0 )
 800e1d2:	b913      	cbnz	r3, 800e1da <RegionBaseUSComputeNext125kHzJoinChannel+0x8a>
    {
        *groupsCurrentIndex = startIndex;
        return LORAMAC_STATUS_OK;
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 800e1d4:	2003      	movs	r0, #3
}
 800e1d6:	b005      	add	sp, #20
 800e1d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *groupsCurrentIndex = startIndex;
 800e1da:	702c      	strb	r4, [r5, #0]
        return LORAMAC_STATUS_OK;
 800e1dc:	2000      	movs	r0, #0
 800e1de:	e7fa      	b.n	800e1d6 <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e1e0:	2003      	movs	r0, #3
 800e1e2:	e7f8      	b.n	800e1d6 <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 800e1e4:	2003      	movs	r0, #3
 800e1e6:	e7f6      	b.n	800e1d6 <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 800e1e8:	2003      	movs	r0, #3
 800e1ea:	e7f4      	b.n	800e1d6 <RegionBaseUSComputeNext125kHzJoinChannel+0x86>

0800e1ec <RegionBaseUSCalcDownlinkFrequency>:
uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
}
 800e1ec:	fb02 1000 	mla	r0, r2, r0, r1
 800e1f0:	4770      	bx	lr

0800e1f2 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800e1f2:	b082      	sub	sp, #8
 800e1f4:	f10d 0c08 	add.w	ip, sp, #8
 800e1f8:	e90c 000c 	stmdb	ip, {r2, r3}
    uint16_t dutyCycle = band->DCycle;
 800e1fc:	8800      	ldrh	r0, [r0, #0]

    if( joined == false )
 800e1fe:	b971      	cbnz	r1, 800e21e <GetDutyCycle+0x2c>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800e200:	4613      	mov	r3, r2
 800e202:	f5b2 6f61 	cmp.w	r2, #3600	; 0xe10
 800e206:	d306      	bcc.n	800e216 <GetDutyCycle+0x24>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 800e208:	f649 22af 	movw	r2, #39599	; 0x9aaf
 800e20c:	4293      	cmp	r3, r2
 800e20e:	d80a      	bhi.n	800e226 <GetDutyCycle+0x34>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 800e210:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e214:	e000      	b.n	800e218 <GetDutyCycle+0x26>
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 800e216:	2364      	movs	r3, #100	; 0x64
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800e218:	4298      	cmp	r0, r3
 800e21a:	bf38      	it	cc
 800e21c:	4618      	movcc	r0, r3
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 800e21e:	b900      	cbnz	r0, 800e222 <GetDutyCycle+0x30>
    {
        dutyCycle = 1;
 800e220:	2001      	movs	r0, #1
    }

    return dutyCycle;
}
 800e222:	b002      	add	sp, #8
 800e224:	4770      	bx	lr
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 800e226:	f242 7310 	movw	r3, #10000	; 0x2710
 800e22a:	e7f5      	b.n	800e218 <GetDutyCycle+0x26>

0800e22c <CountChannels>:

    return dutyCycle;
}

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 800e22c:	4684      	mov	ip, r0
    uint8_t nbActiveBits = 0;

    for( uint8_t j = 0; j < nbBits; j++ )
 800e22e:	2300      	movs	r3, #0
    uint8_t nbActiveBits = 0;
 800e230:	4618      	mov	r0, r3
    for( uint8_t j = 0; j < nbBits; j++ )
 800e232:	e001      	b.n	800e238 <CountChannels+0xc>
 800e234:	3301      	adds	r3, #1
 800e236:	b2db      	uxtb	r3, r3
 800e238:	428b      	cmp	r3, r1
 800e23a:	d207      	bcs.n	800e24c <CountChannels+0x20>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800e23c:	2201      	movs	r2, #1
 800e23e:	409a      	lsls	r2, r3
 800e240:	ea32 020c 	bics.w	r2, r2, ip
 800e244:	d1f6      	bne.n	800e234 <CountChannels+0x8>
        {
            nbActiveBits++;
 800e246:	3001      	adds	r0, #1
 800e248:	b2c0      	uxtb	r0, r0
 800e24a:	e7f3      	b.n	800e234 <CountChannels+0x8>
        }
    }
    return nbActiveBits;
}
 800e24c:	4770      	bx	lr
	...

0800e250 <SetMaxTimeCredits>:
{
 800e250:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e254:	b089      	sub	sp, #36	; 0x24
 800e256:	4604      	mov	r4, r0
 800e258:	460e      	mov	r6, r1
 800e25a:	ad02      	add	r5, sp, #8
 800e25c:	e885 000c 	stmia.w	r5, {r2, r3}
 800e260:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
 800e264:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 800e268:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e26c:	f005 f890 	bl	8013390 <SysTimeToMs>
 800e270:	4607      	mov	r7, r0
    SysTime_t timeDiff = { 0 };
 800e272:	2300      	movs	r3, #0
 800e274:	9304      	str	r3, [sp, #16]
 800e276:	9305      	str	r3, [sp, #20]
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800e278:	e895 000c 	ldmia.w	r5, {r2, r3}
 800e27c:	4631      	mov	r1, r6
 800e27e:	4620      	mov	r0, r4
 800e280:	f7ff ffb7 	bl	800e1f2 <GetDutyCycle>
 800e284:	4605      	mov	r5, r0
    if( joined == false )
 800e286:	2e00      	cmp	r6, #0
 800e288:	d14c      	bne.n	800e324 <SetMaxTimeCredits+0xd4>
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 800e28a:	2864      	cmp	r0, #100	; 0x64
 800e28c:	d025      	beq.n	800e2da <SetMaxTimeCredits+0x8a>
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800e28e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800e292:	d025      	beq.n	800e2e0 <SetMaxTimeCredits+0x90>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 800e294:	4e27      	ldr	r6, [pc, #156]	; (800e334 <SetMaxTimeCredits+0xe4>)
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 800e296:	68a1      	ldr	r1, [r4, #8]
 800e298:	a806      	add	r0, sp, #24
 800e29a:	f005 f899 	bl	80133d0 <SysTimeFromMs>
 800e29e:	9b07      	ldr	r3, [sp, #28]
 800e2a0:	9300      	str	r3, [sp, #0]
 800e2a2:	9b06      	ldr	r3, [sp, #24]
 800e2a4:	aa02      	add	r2, sp, #8
 800e2a6:	ca06      	ldmia	r2, {r1, r2}
 800e2a8:	a804      	add	r0, sp, #16
 800e2aa:	f004 fff8 	bl	801329e <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800e2ae:	f1b8 0f00 	cmp.w	r8, #0
 800e2b2:	d102      	bne.n	800e2ba <SetMaxTimeCredits+0x6a>
 800e2b4:	f1b9 0f00 	cmp.w	r9, #0
 800e2b8:	d002      	beq.n	800e2c0 <SetMaxTimeCredits+0x70>
            ( band->MaxTimeCredits != maxCredits ) ||
 800e2ba:	6923      	ldr	r3, [r4, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800e2bc:	42b3      	cmp	r3, r6
 800e2be:	d012      	beq.n	800e2e6 <SetMaxTimeCredits+0x96>
            band->TimeCredits = maxCredits;
 800e2c0:	60e6      	str	r6, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800e2c2:	9b02      	ldr	r3, [sp, #8]
 800e2c4:	4a1c      	ldr	r2, [pc, #112]	; (800e338 <SetMaxTimeCredits+0xe8>)
 800e2c6:	4293      	cmp	r3, r2
 800e2c8:	d812      	bhi.n	800e2f0 <SetMaxTimeCredits+0xa0>
    if( band->LastBandUpdateTime == 0 )
 800e2ca:	6863      	ldr	r3, [r4, #4]
 800e2cc:	b903      	cbnz	r3, 800e2d0 <SetMaxTimeCredits+0x80>
        band->TimeCredits = maxCredits;
 800e2ce:	60e6      	str	r6, [r4, #12]
    band->MaxTimeCredits = maxCredits;
 800e2d0:	6126      	str	r6, [r4, #16]
}
 800e2d2:	4628      	mov	r0, r5
 800e2d4:	b009      	add	sp, #36	; 0x24
 800e2d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            band->LastMaxCreditAssignTime = elapsedTime;
 800e2da:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800e2dc:	4e17      	ldr	r6, [pc, #92]	; (800e33c <SetMaxTimeCredits+0xec>)
 800e2de:	e7da      	b.n	800e296 <SetMaxTimeCredits+0x46>
            band->LastMaxCreditAssignTime = elapsedTime;
 800e2e0:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 800e2e2:	4e17      	ldr	r6, [pc, #92]	; (800e340 <SetMaxTimeCredits+0xf0>)
 800e2e4:	e7d7      	b.n	800e296 <SetMaxTimeCredits+0x46>
            ( band->MaxTimeCredits != maxCredits ) ||
 800e2e6:	9a04      	ldr	r2, [sp, #16]
 800e2e8:	4b16      	ldr	r3, [pc, #88]	; (800e344 <SetMaxTimeCredits+0xf4>)
 800e2ea:	429a      	cmp	r2, r3
 800e2ec:	d9ed      	bls.n	800e2ca <SetMaxTimeCredits+0x7a>
 800e2ee:	e7e7      	b.n	800e2c0 <SetMaxTimeCredits+0x70>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800e2f0:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800e2f4:	3b30      	subs	r3, #48	; 0x30
 800e2f6:	4a14      	ldr	r2, [pc, #80]	; (800e348 <SetMaxTimeCredits+0xf8>)
 800e2f8:	fba2 2303 	umull	r2, r3, r2, r3
 800e2fc:	0c1b      	lsrs	r3, r3, #16
 800e2fe:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 800e300:	4a12      	ldr	r2, [pc, #72]	; (800e34c <SetMaxTimeCredits+0xfc>)
 800e302:	fb02 f303 	mul.w	r3, r2, r3
 800e306:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800e308:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 800e30c:	3330      	adds	r3, #48	; 0x30
 800e30e:	9304      	str	r3, [sp, #16]
                timeDiff.SubSeconds = 0;
 800e310:	2300      	movs	r3, #0
 800e312:	f8ad 3014 	strh.w	r3, [sp, #20]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 800e316:	ab04      	add	r3, sp, #16
 800e318:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e31c:	f005 f838 	bl	8013390 <SysTimeToMs>
 800e320:	60a0      	str	r0, [r4, #8]
 800e322:	e7d2      	b.n	800e2ca <SetMaxTimeCredits+0x7a>
        if( dutyCycleEnabled == false )
 800e324:	f1b8 0f00 	cmp.w	r8, #0
 800e328:	d102      	bne.n	800e330 <SetMaxTimeCredits+0xe0>
            band->TimeCredits = maxCredits;
 800e32a:	4e04      	ldr	r6, [pc, #16]	; (800e33c <SetMaxTimeCredits+0xec>)
 800e32c:	60e6      	str	r6, [r4, #12]
 800e32e:	e7cc      	b.n	800e2ca <SetMaxTimeCredits+0x7a>
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800e330:	4e02      	ldr	r6, [pc, #8]	; (800e33c <SetMaxTimeCredits+0xec>)
 800e332:	e7ca      	b.n	800e2ca <SetMaxTimeCredits+0x7a>
 800e334:	02932e00 	.word	0x02932e00
 800e338:	0001ec2f 	.word	0x0001ec2f
 800e33c:	001b7740 	.word	0x001b7740
 800e340:	0112a880 	.word	0x0112a880
 800e344:	0001517f 	.word	0x0001517f
 800e348:	c22e4507 	.word	0xc22e4507
 800e34c:	00015180 	.word	0x00015180

0800e350 <UpdateTimeCredits>:
{
 800e350:	b570      	push	{r4, r5, r6, lr}
 800e352:	b082      	sub	sp, #8
 800e354:	4604      	mov	r4, r0
 800e356:	460e      	mov	r6, r1
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 800e358:	9301      	str	r3, [sp, #4]
 800e35a:	9200      	str	r2, [sp, #0]
 800e35c:	ab06      	add	r3, sp, #24
 800e35e:	cb0c      	ldmia	r3, {r2, r3}
 800e360:	f7ff ff76 	bl	800e250 <SetMaxTimeCredits>
 800e364:	4605      	mov	r5, r0
    if( joined == true )
 800e366:	b94e      	cbnz	r6, 800e37c <UpdateTimeCredits+0x2c>
    if( band->TimeCredits > band->MaxTimeCredits )
 800e368:	68e2      	ldr	r2, [r4, #12]
 800e36a:	6923      	ldr	r3, [r4, #16]
 800e36c:	429a      	cmp	r2, r3
 800e36e:	d900      	bls.n	800e372 <UpdateTimeCredits+0x22>
        band->TimeCredits = band->MaxTimeCredits;
 800e370:	60e3      	str	r3, [r4, #12]
    band->LastBandUpdateTime = currentTime;
 800e372:	9b08      	ldr	r3, [sp, #32]
 800e374:	6063      	str	r3, [r4, #4]
}
 800e376:	4628      	mov	r0, r5
 800e378:	b002      	add	sp, #8
 800e37a:	bd70      	pop	{r4, r5, r6, pc}
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800e37c:	6860      	ldr	r0, [r4, #4]
 800e37e:	f005 f887 	bl	8013490 <UTIL_TIMER_GetElapsedTime>
 800e382:	68e3      	ldr	r3, [r4, #12]
 800e384:	4403      	add	r3, r0
 800e386:	60e3      	str	r3, [r4, #12]
 800e388:	e7ee      	b.n	800e368 <UpdateTimeCredits+0x18>

0800e38a <RegionCommonValueInRange>:
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 800e38a:	4288      	cmp	r0, r1
 800e38c:	db03      	blt.n	800e396 <RegionCommonValueInRange+0xc>
 800e38e:	4290      	cmp	r0, r2
 800e390:	dd03      	ble.n	800e39a <RegionCommonValueInRange+0x10>
    {
        return 1;
    }
    return 0;
 800e392:	2000      	movs	r0, #0
 800e394:	4770      	bx	lr
 800e396:	2000      	movs	r0, #0
 800e398:	4770      	bx	lr
        return 1;
 800e39a:	2001      	movs	r0, #1
}
 800e39c:	4770      	bx	lr

0800e39e <RegionCommonChanVerifyDr>:
{
 800e39e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3a2:	4682      	mov	sl, r0
 800e3a4:	460e      	mov	r6, r1
 800e3a6:	4690      	mov	r8, r2
 800e3a8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 800e3ac:	f99d 2020 	ldrsb.w	r2, [sp, #32]
 800e3b0:	4619      	mov	r1, r3
 800e3b2:	4640      	mov	r0, r8
 800e3b4:	f7ff ffe9 	bl	800e38a <RegionCommonValueInRange>
 800e3b8:	b338      	cbz	r0, 800e40a <RegionCommonChanVerifyDr+0x6c>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800e3ba:	2500      	movs	r5, #0
 800e3bc:	462f      	mov	r7, r5
 800e3be:	e01e      	b.n	800e3fe <RegionCommonChanVerifyDr+0x60>
        for( uint8_t j = 0; j < 16; j++ )
 800e3c0:	3401      	adds	r4, #1
 800e3c2:	b2e4      	uxtb	r4, r4
 800e3c4:	2c0f      	cmp	r4, #15
 800e3c6:	d816      	bhi.n	800e3f6 <RegionCommonChanVerifyDr+0x58>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800e3c8:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
 800e3cc:	4123      	asrs	r3, r4
 800e3ce:	f013 0f01 	tst.w	r3, #1
 800e3d2:	d0f5      	beq.n	800e3c0 <RegionCommonChanVerifyDr+0x22>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800e3d4:	193b      	adds	r3, r7, r4
 800e3d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e3da:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800e3de:	7a19      	ldrb	r1, [r3, #8]
 800e3e0:	090a      	lsrs	r2, r1, #4
 800e3e2:	f001 010f 	and.w	r1, r1, #15
 800e3e6:	4640      	mov	r0, r8
 800e3e8:	f7ff ffcf 	bl	800e38a <RegionCommonValueInRange>
 800e3ec:	2801      	cmp	r0, #1
 800e3ee:	d1e7      	bne.n	800e3c0 <RegionCommonChanVerifyDr+0x22>
                    return true;
 800e3f0:	2001      	movs	r0, #1
}
 800e3f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800e3f6:	3710      	adds	r7, #16
 800e3f8:	b2ff      	uxtb	r7, r7
 800e3fa:	3501      	adds	r5, #1
 800e3fc:	b2ed      	uxtb	r5, r5
 800e3fe:	4557      	cmp	r7, sl
 800e400:	d201      	bcs.n	800e406 <RegionCommonChanVerifyDr+0x68>
        for( uint8_t j = 0; j < 16; j++ )
 800e402:	2400      	movs	r4, #0
 800e404:	e7de      	b.n	800e3c4 <RegionCommonChanVerifyDr+0x26>
    return false;
 800e406:	2000      	movs	r0, #0
 800e408:	e7f3      	b.n	800e3f2 <RegionCommonChanVerifyDr+0x54>
        return false;
 800e40a:	2000      	movs	r0, #0
 800e40c:	e7f1      	b.n	800e3f2 <RegionCommonChanVerifyDr+0x54>

0800e40e <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
    uint8_t index = id / 16;
 800e40e:	ea4f 1c11 	mov.w	ip, r1, lsr #4

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800e412:	0913      	lsrs	r3, r2, #4
 800e414:	ebb3 1f11 	cmp.w	r3, r1, lsr #4
 800e418:	d30e      	bcc.n	800e438 <RegionCommonChanDisable+0x2a>
 800e41a:	4291      	cmp	r1, r2
 800e41c:	d20e      	bcs.n	800e43c <RegionCommonChanDisable+0x2e>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800e41e:	f001 010f 	and.w	r1, r1, #15
 800e422:	2301      	movs	r3, #1
 800e424:	fa03 f101 	lsl.w	r1, r3, r1
 800e428:	f830 201c 	ldrh.w	r2, [r0, ip, lsl #1]
 800e42c:	ea22 0101 	bic.w	r1, r2, r1
 800e430:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]

    return true;
 800e434:	4618      	mov	r0, r3
 800e436:	4770      	bx	lr
        return false;
 800e438:	2000      	movs	r0, #0
 800e43a:	4770      	bx	lr
 800e43c:	2000      	movs	r0, #0
}
 800e43e:	4770      	bx	lr

0800e440 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800e440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 800e442:	b188      	cbz	r0, 800e468 <RegionCommonCountChannels+0x28>
 800e444:	460c      	mov	r4, r1
 800e446:	4616      	mov	r6, r2
 800e448:	4607      	mov	r7, r0
    uint8_t nbChannels = 0;
 800e44a:	2500      	movs	r5, #0
 800e44c:	e008      	b.n	800e460 <RegionCommonCountChannels+0x20>
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 800e44e:	2110      	movs	r1, #16
 800e450:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 800e454:	f7ff feea 	bl	800e22c <CountChannels>
 800e458:	4405      	add	r5, r0
 800e45a:	b2ed      	uxtb	r5, r5
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800e45c:	3401      	adds	r4, #1
 800e45e:	b2e4      	uxtb	r4, r4
 800e460:	42b4      	cmp	r4, r6
 800e462:	d3f4      	bcc.n	800e44e <RegionCommonCountChannels+0xe>
    }

    return nbChannels;
}
 800e464:	4628      	mov	r0, r5
 800e466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 800e468:	2500      	movs	r5, #0
 800e46a:	e7fb      	b.n	800e464 <RegionCommonCountChannels+0x24>

0800e46c <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800e46c:	4684      	mov	ip, r0
 800e46e:	b158      	cbz	r0, 800e488 <RegionCommonChanMaskCopy+0x1c>
 800e470:	b109      	cbz	r1, 800e476 <RegionCommonChanMaskCopy+0xa>
    {
        for( uint8_t i = 0; i < len; i++ )
 800e472:	2300      	movs	r3, #0
 800e474:	e006      	b.n	800e484 <RegionCommonChanMaskCopy+0x18>
 800e476:	4770      	bx	lr
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 800e478:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800e47c:	f82c 0013 	strh.w	r0, [ip, r3, lsl #1]
        for( uint8_t i = 0; i < len; i++ )
 800e480:	3301      	adds	r3, #1
 800e482:	b2db      	uxtb	r3, r3
 800e484:	4293      	cmp	r3, r2
 800e486:	d3f7      	bcc.n	800e478 <RegionCommonChanMaskCopy+0xc>
        }
    }
}
 800e488:	4770      	bx	lr

0800e48a <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800e48a:	b082      	sub	sp, #8
 800e48c:	b538      	push	{r3, r4, r5, lr}
 800e48e:	4604      	mov	r4, r0
 800e490:	460d      	mov	r5, r1
 800e492:	4611      	mov	r1, r2
 800e494:	aa04      	add	r2, sp, #16
 800e496:	f842 3f04 	str.w	r3, [r2, #4]!
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800e49a:	ca0c      	ldmia	r2, {r2, r3}
 800e49c:	f7ff fea9 	bl	800e1f2 <GetDutyCycle>

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800e4a0:	68e3      	ldr	r3, [r4, #12]
 800e4a2:	fb05 f000 	mul.w	r0, r5, r0
 800e4a6:	4283      	cmp	r3, r0
 800e4a8:	d905      	bls.n	800e4b6 <RegionCommonSetBandTxDone+0x2c>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 800e4aa:	1a18      	subs	r0, r3, r0
 800e4ac:	60e0      	str	r0, [r4, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 800e4ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e4b2:	b002      	add	sp, #8
 800e4b4:	4770      	bx	lr
        band->TimeCredits = 0;
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	60e3      	str	r3, [r4, #12]
}
 800e4ba:	e7f8      	b.n	800e4ae <RegionCommonSetBandTxDone+0x24>

0800e4bc <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800e4bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4c0:	b089      	sub	sp, #36	; 0x24
 800e4c2:	4607      	mov	r7, r0
 800e4c4:	468b      	mov	fp, r1
 800e4c6:	4691      	mov	r9, r2
 800e4c8:	4698      	mov	r8, r3
 800e4ca:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800e4ce:	f004 ffd5 	bl	801347c <UTIL_TIMER_GetCurrentTime>
 800e4d2:	9004      	str	r0, [sp, #16]
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;

    for( uint8_t i = 0; i < nbBands; i++ )
 800e4d4:	2400      	movs	r4, #0
    uint8_t validBands = 0;
 800e4d6:	4626      	mov	r6, r4
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800e4d8:	f04f 33ff 	mov.w	r3, #4294967295
 800e4dc:	9305      	str	r3, [sp, #20]
    for( uint8_t i = 0; i < nbBands; i++ )
 800e4de:	e005      	b.n	800e4ec <RegionCommonUpdateBandTimeOff+0x30>
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
        {
            bands[i].ReadyForTransmission = true;
 800e4e0:	2301      	movs	r3, #1
 800e4e2:	752b      	strb	r3, [r5, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 800e4e4:	441e      	add	r6, r3
 800e4e6:	b2f6      	uxtb	r6, r6
    for( uint8_t i = 0; i < nbBands; i++ )
 800e4e8:	3401      	adds	r4, #1
 800e4ea:	b2e4      	uxtb	r4, r4
 800e4ec:	454c      	cmp	r4, r9
 800e4ee:	d25d      	bcs.n	800e5ac <RegionCommonUpdateBandTimeOff+0xf0>
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800e4f0:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800e4f4:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 800e4f8:	9b04      	ldr	r3, [sp, #16]
 800e4fa:	9302      	str	r3, [sp, #8]
 800e4fc:	ab13      	add	r3, sp, #76	; 0x4c
 800e4fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e502:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e506:	4653      	mov	r3, sl
 800e508:	4642      	mov	r2, r8
 800e50a:	4639      	mov	r1, r7
 800e50c:	4628      	mov	r0, r5
 800e50e:	f7ff ff1f 	bl	800e350 <UpdateTimeCredits>
        creditCosts = expectedTimeOnAir * dutyCycle;
 800e512:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e514:	fb03 f300 	mul.w	r3, r3, r0
        if( ( bands[i].TimeCredits > creditCosts ) ||
 800e518:	68ea      	ldr	r2, [r5, #12]
 800e51a:	429a      	cmp	r2, r3
 800e51c:	d8e0      	bhi.n	800e4e0 <RegionCommonUpdateBandTimeOff+0x24>
 800e51e:	f1b8 0f00 	cmp.w	r8, #0
 800e522:	d101      	bne.n	800e528 <RegionCommonUpdateBandTimeOff+0x6c>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800e524:	2f00      	cmp	r7, #0
 800e526:	d1db      	bne.n	800e4e0 <RegionCommonUpdateBandTimeOff+0x24>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 800e528:	2100      	movs	r1, #0
 800e52a:	7529      	strb	r1, [r5, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 800e52c:	6929      	ldr	r1, [r5, #16]
 800e52e:	4299      	cmp	r1, r3
 800e530:	d907      	bls.n	800e542 <RegionCommonUpdateBandTimeOff+0x86>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800e532:	1a9b      	subs	r3, r3, r2
 800e534:	9a05      	ldr	r2, [sp, #20]
 800e536:	429a      	cmp	r2, r3
 800e538:	bf28      	it	cs
 800e53a:	461a      	movcs	r2, r3
 800e53c:	9205      	str	r2, [sp, #20]
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 800e53e:	3601      	adds	r6, #1
 800e540:	b2f6      	uxtb	r6, r6
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 800e542:	2f00      	cmp	r7, #0
 800e544:	d1d0      	bne.n	800e4e8 <RegionCommonUpdateBandTimeOff+0x2c>
            {
                SysTime_t backoffTimeRange = {
 800e546:	2300      	movs	r3, #0
 800e548:	9306      	str	r3, [sp, #24]
 800e54a:	f8ad 301c 	strh.w	r3, [sp, #28]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 800e54e:	2864      	cmp	r0, #100	; 0x64
 800e550:	d024      	beq.n	800e59c <RegionCommonUpdateBandTimeOff+0xe0>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800e552:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800e556:	d025      	beq.n	800e5a4 <RegionCommonUpdateBandTimeOff+0xe8>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800e558:	4b19      	ldr	r3, [pc, #100]	; (800e5c0 <RegionCommonUpdateBandTimeOff+0x104>)
 800e55a:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800e55c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e55e:	4a18      	ldr	r2, [pc, #96]	; (800e5c0 <RegionCommonUpdateBandTimeOff+0x104>)
 800e560:	4293      	cmp	r3, r2
 800e562:	d90c      	bls.n	800e57e <RegionCommonUpdateBandTimeOff+0xc2>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800e564:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800e568:	3b30      	subs	r3, #48	; 0x30
 800e56a:	4a16      	ldr	r2, [pc, #88]	; (800e5c4 <RegionCommonUpdateBandTimeOff+0x108>)
 800e56c:	fba2 2303 	umull	r2, r3, r2, r3
 800e570:	0c1b      	lsrs	r3, r3, #16
 800e572:	4a15      	ldr	r2, [pc, #84]	; (800e5c8 <RegionCommonUpdateBandTimeOff+0x10c>)
 800e574:	fb03 2202 	mla	r2, r3, r2, r2
 800e578:	9b06      	ldr	r3, [sp, #24]
 800e57a:	4413      	add	r3, r2
 800e57c:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 800e57e:	ad06      	add	r5, sp, #24
 800e580:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e582:	9300      	str	r3, [sp, #0]
 800e584:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e586:	e895 0006 	ldmia.w	r5, {r1, r2}
 800e58a:	4628      	mov	r0, r5
 800e58c:	f004 fe87 	bl	801329e <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 800e590:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e594:	f004 fefc 	bl	8013390 <SysTimeToMs>
 800e598:	9005      	str	r0, [sp, #20]
 800e59a:	e7a5      	b.n	800e4e8 <RegionCommonUpdateBandTimeOff+0x2c>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 800e59c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800e5a0:	9306      	str	r3, [sp, #24]
 800e5a2:	e7db      	b.n	800e55c <RegionCommonUpdateBandTimeOff+0xa0>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 800e5a4:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 800e5a8:	9306      	str	r3, [sp, #24]
 800e5aa:	e7d7      	b.n	800e55c <RegionCommonUpdateBandTimeOff+0xa0>
            }
        }
    }

    if( validBands == 0 )
 800e5ac:	b11e      	cbz	r6, 800e5b6 <RegionCommonUpdateBandTimeOff+0xfa>
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
    }
    return minTimeToWait;
}
 800e5ae:	9805      	ldr	r0, [sp, #20]
 800e5b0:	b009      	add	sp, #36	; 0x24
 800e5b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return TIMERTIME_T_MAX;
 800e5b6:	f04f 33ff 	mov.w	r3, #4294967295
 800e5ba:	9305      	str	r3, [sp, #20]
 800e5bc:	e7f7      	b.n	800e5ae <RegionCommonUpdateBandTimeOff+0xf2>
 800e5be:	bf00      	nop
 800e5c0:	0001ec30 	.word	0x0001ec30
 800e5c4:	c22e4507 	.word	0xc22e4507
 800e5c8:	00015180 	.word	0x00015180

0800e5cc <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800e5cc:	7803      	ldrb	r3, [r0, #0]
 800e5ce:	2b03      	cmp	r3, #3
 800e5d0:	d001      	beq.n	800e5d6 <RegionCommonParseLinkAdrReq+0xa>
    uint8_t retIndex = 0;
 800e5d2:	2000      	movs	r0, #0

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
    }
    return retIndex;
}
 800e5d4:	4770      	bx	lr
        linkAdrParams->Datarate = payload[1];
 800e5d6:	7842      	ldrb	r2, [r0, #1]
 800e5d8:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e5dc:	704b      	strb	r3, [r1, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800e5de:	f003 030f 	and.w	r3, r3, #15
 800e5e2:	708b      	strb	r3, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800e5e4:	0913      	lsrs	r3, r2, #4
 800e5e6:	704b      	strb	r3, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800e5e8:	7883      	ldrb	r3, [r0, #2]
 800e5ea:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800e5ec:	78c2      	ldrb	r2, [r0, #3]
 800e5ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e5f2:	808b      	strh	r3, [r1, #4]
        linkAdrParams->NbRep = payload[4];
 800e5f4:	7903      	ldrb	r3, [r0, #4]
 800e5f6:	700b      	strb	r3, [r1, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800e5f8:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800e5fc:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800e5fe:	f003 030f 	and.w	r3, r3, #15
 800e602:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
 800e604:	2005      	movs	r0, #5
 800e606:	4770      	bx	lr

0800e608 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800e608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e60c:	b085      	sub	sp, #20
 800e60e:	4604      	mov	r4, r0
 800e610:	4688      	mov	r8, r1
 800e612:	4617      	mov	r7, r2
 800e614:	461e      	mov	r6, r3
    uint8_t status = verifyParams->Status;
 800e616:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 800e618:	f990 a006 	ldrsb.w	sl, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
 800e61c:	f990 9007 	ldrsb.w	r9, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 800e620:	f990 b008 	ldrsb.w	fp, [r0, #8]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800e624:	7943      	ldrb	r3, [r0, #5]
 800e626:	b92b      	cbnz	r3, 800e634 <RegionCommonLinkAdrReqVerifyParams+0x2c>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 800e628:	f990 b00b 	ldrsb.w	fp, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 800e62c:	f990 a009 	ldrsb.w	sl, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 800e630:	f990 900a 	ldrsb.w	r9, [r0, #10]
    }

    if( status != 0 )
 800e634:	b355      	cbz	r5, 800e68c <RegionCommonLinkAdrReqVerifyParams+0x84>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 800e636:	f1ba 0f0f 	cmp.w	sl, #15
 800e63a:	d114      	bne.n	800e666 <RegionCommonLinkAdrReqVerifyParams+0x5e>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 800e63c:	f994 a009 	ldrsb.w	sl, [r4, #9]
        {
            status &= 0xFD; // Datarate KO
        }

        // Verify tx power
        if( txPower == 0x0F )
 800e640:	f1b9 0f0f 	cmp.w	r9, #15
 800e644:	d020      	beq.n	800e688 <RegionCommonLinkAdrReqVerifyParams+0x80>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800e646:	f994 301d 	ldrsb.w	r3, [r4, #29]
 800e64a:	9303      	str	r3, [sp, #12]
 800e64c:	f994 201c 	ldrsb.w	r2, [r4, #28]
 800e650:	461c      	mov	r4, r3
 800e652:	4619      	mov	r1, r3
 800e654:	4648      	mov	r0, r9
 800e656:	f7ff fe98 	bl	800e38a <RegionCommonValueInRange>
 800e65a:	b9b8      	cbnz	r0, 800e68c <RegionCommonLinkAdrReqVerifyParams+0x84>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 800e65c:	454c      	cmp	r4, r9
 800e65e:	dc21      	bgt.n	800e6a4 <RegionCommonLinkAdrReqVerifyParams+0x9c>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 800e660:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
 800e664:	e012      	b.n	800e68c <RegionCommonLinkAdrReqVerifyParams+0x84>
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800e666:	69a3      	ldr	r3, [r4, #24]
 800e668:	9301      	str	r3, [sp, #4]
 800e66a:	f994 3015 	ldrsb.w	r3, [r4, #21]
 800e66e:	9300      	str	r3, [sp, #0]
 800e670:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800e674:	4652      	mov	r2, sl
 800e676:	6921      	ldr	r1, [r4, #16]
 800e678:	7b20      	ldrb	r0, [r4, #12]
 800e67a:	f7ff fe90 	bl	800e39e <RegionCommonChanVerifyDr>
 800e67e:	2800      	cmp	r0, #0
 800e680:	d1de      	bne.n	800e640 <RegionCommonLinkAdrReqVerifyParams+0x38>
            status &= 0xFD; // Datarate KO
 800e682:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
 800e686:	e7db      	b.n	800e640 <RegionCommonLinkAdrReqVerifyParams+0x38>
            txPower =  verifyParams->CurrentTxPower;
 800e688:	f994 900a 	ldrsb.w	r9, [r4, #10]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 800e68c:	2d07      	cmp	r5, #7
 800e68e:	d00c      	beq.n	800e6aa <RegionCommonLinkAdrReqVerifyParams+0xa2>
            nbRepetitions = 1;
        }
    }

    // Apply changes
    *dr = datarate;
 800e690:	f888 a000 	strb.w	sl, [r8]
    *txPow = txPower;
 800e694:	f887 9000 	strb.w	r9, [r7]
    *nbRep = nbRepetitions;
 800e698:	f886 b000 	strb.w	fp, [r6]

    return status;
}
 800e69c:	4628      	mov	r0, r5
 800e69e:	b005      	add	sp, #20
 800e6a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                txPower = verifyParams->MaxTxPower;
 800e6a4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800e6a8:	e7f0      	b.n	800e68c <RegionCommonLinkAdrReqVerifyParams+0x84>
        if( nbRepetitions == 0 )
 800e6aa:	f1bb 0f00 	cmp.w	fp, #0
 800e6ae:	d1ef      	bne.n	800e690 <RegionCommonLinkAdrReqVerifyParams+0x88>
            nbRepetitions = 1;
 800e6b0:	f04f 0b01 	mov.w	fp, #1
 800e6b4:	e7ec      	b.n	800e690 <RegionCommonLinkAdrReqVerifyParams+0x88>
	...

0800e6b8 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 800e6b8:	4b02      	ldr	r3, [pc, #8]	; (800e6c4 <RegionCommonComputeSymbolTimeLoRa+0xc>)
 800e6ba:	fa03 f000 	lsl.w	r0, r3, r0
}
 800e6be:	fbb0 f0f1 	udiv	r0, r0, r1
 800e6c2:	4770      	bx	lr
 800e6c4:	000f4240 	.word	0x000f4240

0800e6c8 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}
 800e6c8:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800e6cc:	fbb3 f0f0 	udiv	r0, r3, r0
 800e6d0:	4770      	bx	lr
	...

0800e6d4 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 800e6d4:	b500      	push	{lr}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800e6d6:	f1a1 0c04 	sub.w	ip, r1, #4
 800e6da:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
 800e6de:	fb0e f202 	mul.w	r2, lr, r2
 800e6e2:	fb00 220c 	mla	r2, r0, ip, r2
 800e6e6:	0052      	lsls	r2, r2, #1
 800e6e8:	d021      	beq.n	800e72e <RegionCommonComputeRxWindowParameters+0x5a>
 800e6ea:	4402      	add	r2, r0
 800e6ec:	3a01      	subs	r2, #1
 800e6ee:	fbb2 f2f0 	udiv	r2, r2, r0
 800e6f2:	4291      	cmp	r1, r2
 800e6f4:	bf38      	it	cc
 800e6f6:	4611      	movcc	r1, r2
 800e6f8:	9a01      	ldr	r2, [sp, #4]
 800e6fa:	6011      	str	r1, [r2, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800e6fc:	0082      	lsls	r2, r0, #2
 800e6fe:	fb00 f101 	mul.w	r1, r0, r1
 800e702:	b1b9      	cbz	r1, 800e734 <RegionCommonComputeRxWindowParameters+0x60>
 800e704:	3101      	adds	r1, #1
 800e706:	0849      	lsrs	r1, r1, #1
 800e708:	1a51      	subs	r1, r2, r1
 800e70a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e70e:	fb02 1313 	mls	r3, r2, r3, r1
 800e712:	2b00      	cmp	r3, #0
 800e714:	dd10      	ble.n	800e738 <RegionCommonComputeRxWindowParameters+0x64>
 800e716:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 800e71a:	4a0b      	ldr	r2, [pc, #44]	; (800e748 <RegionCommonComputeRxWindowParameters+0x74>)
 800e71c:	fb82 1203 	smull	r1, r2, r2, r3
 800e720:	17db      	asrs	r3, r3, #31
 800e722:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800e726:	9a02      	ldr	r2, [sp, #8]
 800e728:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 800e72a:	f85d fb04 	ldr.w	pc, [sp], #4
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800e72e:	fbb2 f2f0 	udiv	r2, r2, r0
 800e732:	e7de      	b.n	800e6f2 <RegionCommonComputeRxWindowParameters+0x1e>
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800e734:	0849      	lsrs	r1, r1, #1
 800e736:	e7e7      	b.n	800e708 <RegionCommonComputeRxWindowParameters+0x34>
 800e738:	4a03      	ldr	r2, [pc, #12]	; (800e748 <RegionCommonComputeRxWindowParameters+0x74>)
 800e73a:	fb82 1203 	smull	r1, r2, r2, r3
 800e73e:	17db      	asrs	r3, r3, #31
 800e740:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800e744:	e7ef      	b.n	800e726 <RegionCommonComputeRxWindowParameters+0x52>
 800e746:	bf00      	nop
 800e748:	10624dd3 	.word	0x10624dd3

0800e74c <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800e74c:	b538      	push	{r3, r4, r5, lr}
 800e74e:	460d      	mov	r5, r1
 800e750:	4614      	mov	r4, r2
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800e752:	0040      	lsls	r0, r0, #1
 800e754:	f7f2 fa9c 	bl	8000c90 <__aeabi_ui2f>
 800e758:	4601      	mov	r1, r0
 800e75a:	4628      	mov	r0, r5
 800e75c:	f7f2 f9e6 	bl	8000b2c <__aeabi_fsub>
 800e760:	4621      	mov	r1, r4
 800e762:	f7f2 f9e3 	bl	8000b2c <__aeabi_fsub>
 800e766:	f7f1 fe73 	bl	8000450 <__aeabi_f2d>
 800e76a:	f005 fa75 	bl	8013c58 <floor>
 800e76e:	f7f2 f961 	bl	8000a34 <__aeabi_d2iz>

    return phyTxPower;
}
 800e772:	b240      	sxtb	r0, r0
 800e774:	bd38      	pop	{r3, r4, r5, pc}

0800e776 <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 800e776:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e77a:	b083      	sub	sp, #12
 800e77c:	4605      	mov	r5, r0
 800e77e:	468b      	mov	fp, r1
 800e780:	9200      	str	r2, [sp, #0]
 800e782:	9301      	str	r3, [sp, #4]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800e784:	2600      	movs	r6, #0
 800e786:	46b0      	mov	r8, r6
    uint8_t nbRestrictedChannelsCount = 0;
 800e788:	46b2      	mov	sl, r6
    uint8_t nbChannelCount = 0;
 800e78a:	46b1      	mov	r9, r6
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800e78c:	e04a      	b.n	800e824 <RegionCommonCountNbOfEnabledChannels+0xae>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800e78e:	7a3a      	ldrb	r2, [r7, #8]
 800e790:	f342 0103 	sbfx	r1, r2, #0, #4
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800e794:	f342 1203 	sbfx	r2, r2, #4, #4
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800e798:	b252      	sxtb	r2, r2
 800e79a:	b249      	sxtb	r1, r1
 800e79c:	f995 0001 	ldrsb.w	r0, [r5, #1]
 800e7a0:	f7ff fdf3 	bl	800e38a <RegionCommonValueInRange>
 800e7a4:	b178      	cbz	r0, 800e7c6 <RegionCommonCountNbOfEnabledChannels+0x50>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 800e7a6:	68ea      	ldr	r2, [r5, #12]
 800e7a8:	7a7b      	ldrb	r3, [r7, #9]
 800e7aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e7ae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e7b2:	7d1b      	ldrb	r3, [r3, #20]
 800e7b4:	b35b      	cbz	r3, 800e80e <RegionCommonCountNbOfEnabledChannels+0x98>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
                    continue;
                }
                enabledChannels[nbChannelCount++] = i + j;
 800e7b6:	f109 0301 	add.w	r3, r9, #1
 800e7ba:	eb08 0204 	add.w	r2, r8, r4
 800e7be:	f80b 2009 	strb.w	r2, [fp, r9]
 800e7c2:	fa5f f983 	uxtb.w	r9, r3
        for( uint8_t j = 0; j < 16; j++ )
 800e7c6:	3401      	adds	r4, #1
 800e7c8:	b2e4      	uxtb	r4, r4
 800e7ca:	2c0f      	cmp	r4, #15
 800e7cc:	d824      	bhi.n	800e818 <RegionCommonCountNbOfEnabledChannels+0xa2>
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 800e7ce:	686b      	ldr	r3, [r5, #4]
 800e7d0:	0072      	lsls	r2, r6, #1
 800e7d2:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 800e7d6:	4123      	asrs	r3, r4
 800e7d8:	f013 0f01 	tst.w	r3, #1
 800e7dc:	d0f3      	beq.n	800e7c6 <RegionCommonCountNbOfEnabledChannels+0x50>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 800e7de:	68a8      	ldr	r0, [r5, #8]
 800e7e0:	eb08 0304 	add.w	r3, r8, r4
 800e7e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e7e8:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 800e7ec:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d0e8      	beq.n	800e7c6 <RegionCommonCountNbOfEnabledChannels+0x50>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800e7f4:	782b      	ldrb	r3, [r5, #0]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d1c9      	bne.n	800e78e <RegionCommonCountNbOfEnabledChannels+0x18>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 800e7fa:	696b      	ldr	r3, [r5, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d0c6      	beq.n	800e78e <RegionCommonCountNbOfEnabledChannels+0x18>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 800e800:	5a9b      	ldrh	r3, [r3, r2]
 800e802:	fa43 f104 	asr.w	r1, r3, r4
 800e806:	f011 0f01 	tst.w	r1, #1
 800e80a:	d1c0      	bne.n	800e78e <RegionCommonCountNbOfEnabledChannels+0x18>
 800e80c:	e7db      	b.n	800e7c6 <RegionCommonCountNbOfEnabledChannels+0x50>
                    nbRestrictedChannelsCount++;
 800e80e:	f10a 0a01 	add.w	sl, sl, #1
 800e812:	fa5f fa8a 	uxtb.w	sl, sl
                    continue;
 800e816:	e7d6      	b.n	800e7c6 <RegionCommonCountNbOfEnabledChannels+0x50>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800e818:	f108 0810 	add.w	r8, r8, #16
 800e81c:	fa5f f888 	uxtb.w	r8, r8
 800e820:	3601      	adds	r6, #1
 800e822:	b2f6      	uxtb	r6, r6
 800e824:	fa1f f388 	uxth.w	r3, r8
 800e828:	8a2a      	ldrh	r2, [r5, #16]
 800e82a:	4293      	cmp	r3, r2
 800e82c:	d201      	bcs.n	800e832 <RegionCommonCountNbOfEnabledChannels+0xbc>
        for( uint8_t j = 0; j < 16; j++ )
 800e82e:	2400      	movs	r4, #0
 800e830:	e7cb      	b.n	800e7ca <RegionCommonCountNbOfEnabledChannels+0x54>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 800e832:	9b00      	ldr	r3, [sp, #0]
 800e834:	f883 9000 	strb.w	r9, [r3]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800e838:	9b01      	ldr	r3, [sp, #4]
 800e83a:	f883 a000 	strb.w	sl, [r3]
}
 800e83e:	b003      	add	sp, #12
 800e840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e844 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 800e844:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e848:	b085      	sub	sp, #20
 800e84a:	4604      	mov	r4, r0
 800e84c:	460f      	mov	r7, r1
 800e84e:	4616      	mov	r6, r2
 800e850:	461d      	mov	r5, r3
 800e852:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800e856:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800e85a:	6840      	ldr	r0, [r0, #4]
 800e85c:	f004 fe18 	bl	8013490 <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800e860:	6823      	ldr	r3, [r4, #0]
 800e862:	1a1b      	subs	r3, r3, r0
 800e864:	f8c9 3000 	str.w	r3, [r9]
    *nbRestrictedChannels = 1;
 800e868:	2301      	movs	r3, #1
 800e86a:	f888 3000 	strb.w	r3, [r8]
    *nbEnabledChannels = 0;
 800e86e:	2300      	movs	r3, #0
 800e870:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800e872:	6863      	ldr	r3, [r4, #4]
 800e874:	b113      	cbz	r3, 800e87c <RegionCommonIdentifyChannels+0x38>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 800e876:	6823      	ldr	r3, [r4, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800e878:	4283      	cmp	r3, r0
 800e87a:	d81e      	bhi.n	800e8ba <RegionCommonIdentifyChannels+0x76>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800e87c:	2300      	movs	r3, #0
 800e87e:	603b      	str	r3, [r7, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800e880:	69e3      	ldr	r3, [r4, #28]
 800e882:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800e886:	781f      	ldrb	r7, [r3, #0]
 800e888:	69a3      	ldr	r3, [r4, #24]
 800e88a:	9303      	str	r3, [sp, #12]
 800e88c:	ab01      	add	r3, sp, #4
 800e88e:	f104 020c 	add.w	r2, r4, #12
 800e892:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e896:	e883 0003 	stmia.w	r3, {r0, r1}
 800e89a:	7d23      	ldrb	r3, [r4, #20]
 800e89c:	9300      	str	r3, [sp, #0]
 800e89e:	7a23      	ldrb	r3, [r4, #8]
 800e8a0:	7a62      	ldrb	r2, [r4, #9]
 800e8a2:	4661      	mov	r1, ip
 800e8a4:	4638      	mov	r0, r7
 800e8a6:	f7ff fe09 	bl	800e4bc <RegionCommonUpdateBandTimeOff>
 800e8aa:	f8c9 0000 	str.w	r0, [r9]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800e8ae:	4643      	mov	r3, r8
 800e8b0:	462a      	mov	r2, r5
 800e8b2:	4631      	mov	r1, r6
 800e8b4:	69e0      	ldr	r0, [r4, #28]
 800e8b6:	f7ff ff5e 	bl	800e776 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 800e8ba:	782b      	ldrb	r3, [r5, #0]
 800e8bc:	b923      	cbnz	r3, 800e8c8 <RegionCommonIdentifyChannels+0x84>
    {
        *nextTxDelay = 0;
        return LORAMAC_STATUS_OK;
    }
    else if( *nbRestrictedChannels > 0 )
 800e8be:	f898 3000 	ldrb.w	r3, [r8]
 800e8c2:	b13b      	cbz	r3, 800e8d4 <RegionCommonIdentifyChannels+0x90>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 800e8c4:	200b      	movs	r0, #11
 800e8c6:	e002      	b.n	800e8ce <RegionCommonIdentifyChannels+0x8a>
        *nextTxDelay = 0;
 800e8c8:	2000      	movs	r0, #0
 800e8ca:	f8c9 0000 	str.w	r0, [r9]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 800e8ce:	b005      	add	sp, #20
 800e8d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800e8d4:	200c      	movs	r0, #12
 800e8d6:	e7fa      	b.n	800e8ce <RegionCommonIdentifyChannels+0x8a>

0800e8d8 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 800e8d8:	b570      	push	{r4, r5, r6, lr}
 800e8da:	b082      	sub	sp, #8
 800e8dc:	4605      	mov	r5, r0
    int8_t drLocal = params->CurrentDr;
 800e8de:	f990 4000 	ldrsb.w	r4, [r0]

    if( params->CurrentDr == params->MinDr )
 800e8e2:	f990 6002 	ldrsb.w	r6, [r0, #2]
 800e8e6:	42a6      	cmp	r6, r4
 800e8e8:	d011      	beq.n	800e90e <RegionCommonGetNextLowerTxDr+0x36>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 800e8ea:	3c01      	subs	r4, #1
 800e8ec:	b264      	sxtb	r4, r4
        } while( ( drLocal != params->MinDr ) &&
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 800e8ee:	42a6      	cmp	r6, r4
 800e8f0:	d00e      	beq.n	800e910 <RegionCommonGetNextLowerTxDr+0x38>
 800e8f2:	68ab      	ldr	r3, [r5, #8]
 800e8f4:	9301      	str	r3, [sp, #4]
 800e8f6:	f995 3001 	ldrsb.w	r3, [r5, #1]
 800e8fa:	9300      	str	r3, [sp, #0]
 800e8fc:	4633      	mov	r3, r6
 800e8fe:	4622      	mov	r2, r4
 800e900:	6869      	ldr	r1, [r5, #4]
 800e902:	78e8      	ldrb	r0, [r5, #3]
 800e904:	f7ff fd4b 	bl	800e39e <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 800e908:	2800      	cmp	r0, #0
 800e90a:	d0ee      	beq.n	800e8ea <RegionCommonGetNextLowerTxDr+0x12>
 800e90c:	e000      	b.n	800e910 <RegionCommonGetNextLowerTxDr+0x38>
        return params->MinDr;
 800e90e:	4634      	mov	r4, r6

        return drLocal;
    }
}
 800e910:	4620      	mov	r0, r4
 800e912:	b002      	add	sp, #8
 800e914:	bd70      	pop	{r4, r5, r6, pc}

0800e916 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
}
 800e916:	4288      	cmp	r0, r1
 800e918:	bfb8      	it	lt
 800e91a:	4608      	movlt	r0, r1
 800e91c:	4770      	bx	lr
	...

0800e920 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 800e920:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 800e924:	4a05      	ldr	r2, [pc, #20]	; (800e93c <RegionCommonGetBandwidth+0x1c>)
 800e926:	4293      	cmp	r3, r2
 800e928:	d004      	beq.n	800e934 <RegionCommonGetBandwidth+0x14>
 800e92a:	4a05      	ldr	r2, [pc, #20]	; (800e940 <RegionCommonGetBandwidth+0x20>)
 800e92c:	4293      	cmp	r3, r2
 800e92e:	d103      	bne.n	800e938 <RegionCommonGetBandwidth+0x18>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 800e930:	2002      	movs	r0, #2
 800e932:	4770      	bx	lr
            return 1;
 800e934:	2001      	movs	r0, #1
 800e936:	4770      	bx	lr
    switch( bandwidths[drIndex] )
 800e938:	2000      	movs	r0, #0
    }
}
 800e93a:	4770      	bx	lr
 800e93c:	0003d090 	.word	0x0003d090
 800e940:	0007a120 	.word	0x0007a120

0800e944 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 800e944:	b500      	push	{lr}
 800e946:	b085      	sub	sp, #20
    if ( rxSlot < RX_SLOT_NONE )
 800e948:	2805      	cmp	r0, #5
 800e94a:	d80e      	bhi.n	800e96a <RegionCommonRxConfigPrint+0x26>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 800e94c:	9202      	str	r2, [sp, #8]
 800e94e:	9101      	str	r1, [sp, #4]
 800e950:	4b0a      	ldr	r3, [pc, #40]	; (800e97c <RegionCommonRxConfigPrint+0x38>)
 800e952:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800e956:	9300      	str	r3, [sp, #0]
 800e958:	4b09      	ldr	r3, [pc, #36]	; (800e980 <RegionCommonRxConfigPrint+0x3c>)
 800e95a:	2201      	movs	r2, #1
 800e95c:	2100      	movs	r1, #0
 800e95e:	2002      	movs	r0, #2
 800e960:	f004 fa78 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 800e964:	b005      	add	sp, #20
 800e966:	f85d fb04 	ldr.w	pc, [sp], #4
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 800e96a:	9201      	str	r2, [sp, #4]
 800e96c:	9100      	str	r1, [sp, #0]
 800e96e:	4b05      	ldr	r3, [pc, #20]	; (800e984 <RegionCommonRxConfigPrint+0x40>)
 800e970:	2201      	movs	r2, #1
 800e972:	2100      	movs	r1, #0
 800e974:	2002      	movs	r0, #2
 800e976:	f004 fa6d 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
}
 800e97a:	e7f3      	b.n	800e964 <RegionCommonRxConfigPrint+0x20>
 800e97c:	080145b8 	.word	0x080145b8
 800e980:	08014550 	.word	0x08014550
 800e984:	08014570 	.word	0x08014570

0800e988 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 800e988:	b500      	push	{lr}
 800e98a:	b083      	sub	sp, #12
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 800e98c:	9101      	str	r1, [sp, #4]
 800e98e:	9000      	str	r0, [sp, #0]
 800e990:	4b04      	ldr	r3, [pc, #16]	; (800e9a4 <RegionCommonTxConfigPrint+0x1c>)
 800e992:	2201      	movs	r2, #1
 800e994:	2100      	movs	r1, #0
 800e996:	2002      	movs	r0, #2
 800e998:	f004 fa5c 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
}
 800e99c:	b003      	add	sp, #12
 800e99e:	f85d fb04 	ldr.w	pc, [sp], #4
 800e9a2:	bf00      	nop
 800e9a4:	0801458c 	.word	0x0801458c

0800e9a8 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 800e9a8:	b538      	push	{r3, r4, r5, lr}
 800e9aa:	4604      	mov	r4, r0
 800e9ac:	460d      	mov	r5, r1
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800e9ae:	4b1b      	ldr	r3, [pc, #108]	; (800ea1c <VerifyRfFreq+0x74>)
 800e9b0:	6a1b      	ldr	r3, [r3, #32]
 800e9b2:	4798      	blx	r3
 800e9b4:	b130      	cbz	r0, 800e9c4 <VerifyRfFreq+0x1c>
    {
        return false;
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 800e9b6:	4b1a      	ldr	r3, [pc, #104]	; (800ea20 <VerifyRfFreq+0x78>)
 800e9b8:	4423      	add	r3, r4
 800e9ba:	4a1a      	ldr	r2, [pc, #104]	; (800ea24 <VerifyRfFreq+0x7c>)
 800e9bc:	4293      	cmp	r3, r2
 800e9be:	d802      	bhi.n	800e9c6 <VerifyRfFreq+0x1e>
    {
        *band = 2;
 800e9c0:	2302      	movs	r3, #2
 800e9c2:	702b      	strb	r3, [r5, #0]
    else
    {
        return false;
    }
    return true;
}
 800e9c4:	bd38      	pop	{r3, r4, r5, pc}
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 800e9c6:	4b18      	ldr	r3, [pc, #96]	; (800ea28 <VerifyRfFreq+0x80>)
 800e9c8:	4423      	add	r3, r4
 800e9ca:	4a18      	ldr	r2, [pc, #96]	; (800ea2c <VerifyRfFreq+0x84>)
 800e9cc:	4293      	cmp	r3, r2
 800e9ce:	d802      	bhi.n	800e9d6 <VerifyRfFreq+0x2e>
        *band = 0;
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	702b      	strb	r3, [r5, #0]
 800e9d4:	e7f6      	b.n	800e9c4 <VerifyRfFreq+0x1c>
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 800e9d6:	4b16      	ldr	r3, [pc, #88]	; (800ea30 <VerifyRfFreq+0x88>)
 800e9d8:	4423      	add	r3, r4
 800e9da:	4a16      	ldr	r2, [pc, #88]	; (800ea34 <VerifyRfFreq+0x8c>)
 800e9dc:	4293      	cmp	r3, r2
 800e9de:	d802      	bhi.n	800e9e6 <VerifyRfFreq+0x3e>
        *band = 1;
 800e9e0:	2301      	movs	r3, #1
 800e9e2:	702b      	strb	r3, [r5, #0]
 800e9e4:	e7ee      	b.n	800e9c4 <VerifyRfFreq+0x1c>
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 800e9e6:	4b14      	ldr	r3, [pc, #80]	; (800ea38 <VerifyRfFreq+0x90>)
 800e9e8:	4423      	add	r3, r4
 800e9ea:	4a14      	ldr	r2, [pc, #80]	; (800ea3c <VerifyRfFreq+0x94>)
 800e9ec:	4293      	cmp	r3, r2
 800e9ee:	d802      	bhi.n	800e9f6 <VerifyRfFreq+0x4e>
        *band = 5;
 800e9f0:	2305      	movs	r3, #5
 800e9f2:	702b      	strb	r3, [r5, #0]
 800e9f4:	e7e6      	b.n	800e9c4 <VerifyRfFreq+0x1c>
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 800e9f6:	4b12      	ldr	r3, [pc, #72]	; (800ea40 <VerifyRfFreq+0x98>)
 800e9f8:	4423      	add	r3, r4
 800e9fa:	4a12      	ldr	r2, [pc, #72]	; (800ea44 <VerifyRfFreq+0x9c>)
 800e9fc:	4293      	cmp	r3, r2
 800e9fe:	d802      	bhi.n	800ea06 <VerifyRfFreq+0x5e>
        *band = 3;
 800ea00:	2303      	movs	r3, #3
 800ea02:	702b      	strb	r3, [r5, #0]
 800ea04:	e7de      	b.n	800e9c4 <VerifyRfFreq+0x1c>
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 800ea06:	4b10      	ldr	r3, [pc, #64]	; (800ea48 <VerifyRfFreq+0xa0>)
 800ea08:	4423      	add	r3, r4
 800ea0a:	4a10      	ldr	r2, [pc, #64]	; (800ea4c <VerifyRfFreq+0xa4>)
 800ea0c:	4293      	cmp	r3, r2
 800ea0e:	d802      	bhi.n	800ea16 <VerifyRfFreq+0x6e>
        *band = 4;
 800ea10:	2304      	movs	r3, #4
 800ea12:	702b      	strb	r3, [r5, #0]
 800ea14:	e7d6      	b.n	800e9c4 <VerifyRfFreq+0x1c>
        return false;
 800ea16:	2000      	movs	r0, #0
 800ea18:	e7d4      	b.n	800e9c4 <VerifyRfFreq+0x1c>
 800ea1a:	bf00      	nop
 800ea1c:	08014bf0 	.word	0x08014bf0
 800ea20:	cc8faa40 	.word	0xcc8faa40
 800ea24:	001e847f 	.word	0x001e847f
 800ea28:	cc7125c0 	.word	0xcc7125c0
 800ea2c:	002dc6c0 	.word	0x002dc6c0
 800ea30:	cc435eff 	.word	0xcc435eff
 800ea34:	000927bf 	.word	0x000927bf
 800ea38:	cc38b0a0 	.word	0xcc38b0a0
 800ea3c:	0007a120 	.word	0x0007a120
 800ea40:	cc2e0240 	.word	0xcc2e0240
 800ea44:	0003d090 	.word	0x0003d090
 800ea48:	cc296e60 	.word	0xcc296e60
 800ea4c:	000493e0 	.word	0x000493e0

0800ea50 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800ea50:	b570      	push	{r4, r5, r6, lr}
 800ea52:	b084      	sub	sp, #16
 800ea54:	4605      	mov	r5, r0
 800ea56:	460c      	mov	r4, r1
    int8_t phyDr = DataratesEU868[datarate];
 800ea58:	4b13      	ldr	r3, [pc, #76]	; (800eaa8 <GetTimeOnAir+0x58>)
 800ea5a:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 800ea5c:	4913      	ldr	r1, [pc, #76]	; (800eaac <GetTimeOnAir+0x5c>)
 800ea5e:	f7ff ff5f 	bl	800e920 <RegionCommonGetBandwidth>
 800ea62:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 800ea64:	2d07      	cmp	r5, #7
 800ea66:	d00e      	beq.n	800ea86 <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800ea68:	4b11      	ldr	r3, [pc, #68]	; (800eab0 <GetTimeOnAir+0x60>)
 800ea6a:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800ea6c:	2001      	movs	r0, #1
 800ea6e:	9003      	str	r0, [sp, #12]
 800ea70:	b2e4      	uxtb	r4, r4
 800ea72:	9402      	str	r4, [sp, #8]
 800ea74:	2300      	movs	r3, #0
 800ea76:	9301      	str	r3, [sp, #4]
 800ea78:	2308      	movs	r3, #8
 800ea7a:	9300      	str	r3, [sp, #0]
 800ea7c:	4603      	mov	r3, r0
 800ea7e:	4632      	mov	r2, r6
 800ea80:	47a8      	blx	r5
    }
    return timeOnAir;
}
 800ea82:	b004      	add	sp, #16
 800ea84:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800ea86:	4b0a      	ldr	r3, [pc, #40]	; (800eab0 <GetTimeOnAir+0x60>)
 800ea88:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800ea8a:	2301      	movs	r3, #1
 800ea8c:	9303      	str	r3, [sp, #12]
 800ea8e:	b2e4      	uxtb	r4, r4
 800ea90:	9402      	str	r4, [sp, #8]
 800ea92:	2000      	movs	r0, #0
 800ea94:	9001      	str	r0, [sp, #4]
 800ea96:	2305      	movs	r3, #5
 800ea98:	9300      	str	r3, [sp, #0]
 800ea9a:	4603      	mov	r3, r0
 800ea9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800eaa0:	fb06 f202 	mul.w	r2, r6, r2
 800eaa4:	47a8      	blx	r5
 800eaa6:	e7ec      	b.n	800ea82 <GetTimeOnAir+0x32>
 800eaa8:	080145f0 	.word	0x080145f0
 800eaac:	080145d0 	.word	0x080145d0
 800eab0:	08014bf0 	.word	0x08014bf0

0800eab4 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 800eab4:	b500      	push	{lr}
 800eab6:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800eab8:	2300      	movs	r3, #0
 800eaba:	9304      	str	r3, [sp, #16]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 800eabc:	7803      	ldrb	r3, [r0, #0]
 800eabe:	3b0b      	subs	r3, #11
 800eac0:	2b2e      	cmp	r3, #46	; 0x2e
 800eac2:	d830      	bhi.n	800eb26 <RegionEU868GetPhyParam+0x72>
 800eac4:	e8df f003 	tbb	[pc, r3]
 800eac8:	403a3734 	.word	0x403a3734
 800eacc:	514d4946 	.word	0x514d4946
 800ead0:	615d5955 	.word	0x615d5955
 800ead4:	6d2f6a2f 	.word	0x6d2f6a2f
 800ead8:	2f7c7973 	.word	0x2f7c7973
 800eadc:	1884802f 	.word	0x1884802f
 800eae0:	2f2f2f2f 	.word	0x2f2f2f2f
 800eae4:	2f2f2f2f 	.word	0x2f2f2f2f
 800eae8:	2f2f2f2f 	.word	0x2f2f2f2f
 800eaec:	918a872f 	.word	0x918a872f
 800eaf0:	97942f2f 	.word	0x97942f2f
 800eaf4:	9a2f      	.short	0x9a2f
 800eaf6:	a0          	.byte	0xa0
 800eaf7:	00          	.byte	0x00
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 800eaf8:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800eafc:	f88d 3004 	strb.w	r3, [sp, #4]
 800eb00:	2307      	movs	r3, #7
 800eb02:	f88d 3005 	strb.w	r3, [sp, #5]
 800eb06:	2300      	movs	r3, #0
 800eb08:	f88d 3006 	strb.w	r3, [sp, #6]
 800eb0c:	2310      	movs	r3, #16
 800eb0e:	f88d 3007 	strb.w	r3, [sp, #7]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800eb12:	4b41      	ldr	r3, [pc, #260]	; (800ec18 <RegionEU868GetPhyParam+0x164>)
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	f503 6290 	add.w	r2, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800eb1a:	9202      	str	r2, [sp, #8]
 800eb1c:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800eb1e:	a801      	add	r0, sp, #4
 800eb20:	f7ff feda 	bl	800e8d8 <RegionCommonGetNextLowerTxDr>
 800eb24:	9004      	str	r0, [sp, #16]
            break;
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 800eb26:	9804      	ldr	r0, [sp, #16]
 800eb28:	9005      	str	r0, [sp, #20]
}
 800eb2a:	b007      	add	sp, #28
 800eb2c:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800eb30:	2340      	movs	r3, #64	; 0x40
 800eb32:	9304      	str	r3, [sp, #16]
            break;
 800eb34:	e7f7      	b.n	800eb26 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800eb36:	2320      	movs	r3, #32
 800eb38:	9304      	str	r3, [sp, #16]
            break;
 800eb3a:	e7f4      	b.n	800eb26 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 800eb3c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800eb40:	4a36      	ldr	r2, [pc, #216]	; (800ec1c <RegionEU868GetPhyParam+0x168>)
 800eb42:	5cd3      	ldrb	r3, [r2, r3]
 800eb44:	9304      	str	r3, [sp, #16]
            break;
 800eb46:	e7ee      	b.n	800eb26 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 800eb48:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800eb4c:	4a34      	ldr	r2, [pc, #208]	; (800ec20 <RegionEU868GetPhyParam+0x16c>)
 800eb4e:	5cd3      	ldrb	r3, [r2, r3]
 800eb50:	9304      	str	r3, [sp, #16]
            break;
 800eb52:	e7e8      	b.n	800eb26 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 800eb54:	2301      	movs	r3, #1
 800eb56:	9304      	str	r3, [sp, #16]
            break;
 800eb58:	e7e5      	b.n	800eb26 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_MAX_RX_WINDOW;
 800eb5a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800eb5e:	9304      	str	r3, [sp, #16]
            break;
 800eb60:	e7e1      	b.n	800eb26 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800eb62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800eb66:	9304      	str	r3, [sp, #16]
            break;
 800eb68:	e7dd      	b.n	800eb26 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800eb6a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800eb6e:	9304      	str	r3, [sp, #16]
            break;
 800eb70:	e7d9      	b.n	800eb26 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800eb72:	f241 3388 	movw	r3, #5000	; 0x1388
 800eb76:	9304      	str	r3, [sp, #16]
            break;
 800eb78:	e7d5      	b.n	800eb26 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800eb7a:	f241 7370 	movw	r3, #6000	; 0x1770
 800eb7e:	9304      	str	r3, [sp, #16]
            break;
 800eb80:	e7d1      	b.n	800eb26 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 800eb82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800eb86:	9304      	str	r3, [sp, #16]
            break;
 800eb88:	e7cd      	b.n	800eb26 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 800eb8a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800eb8e:	4825      	ldr	r0, [pc, #148]	; (800ec24 <RegionEU868GetPhyParam+0x170>)
 800eb90:	f002 faaa 	bl	80110e8 <randr>
 800eb94:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800eb98:	9004      	str	r0, [sp, #16]
            break;
 800eb9a:	e7c4      	b.n	800eb26 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_RX_WND_2_FREQ;
 800eb9c:	4b22      	ldr	r3, [pc, #136]	; (800ec28 <RegionEU868GetPhyParam+0x174>)
 800eb9e:	9304      	str	r3, [sp, #16]
            break;
 800eba0:	e7c1      	b.n	800eb26 <RegionEU868GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800eba2:	4b1d      	ldr	r3, [pc, #116]	; (800ec18 <RegionEU868GetPhyParam+0x164>)
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800ebaa:	9304      	str	r3, [sp, #16]
            break;
 800ebac:	e7bb      	b.n	800eb26 <RegionEU868GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800ebae:	4b1a      	ldr	r3, [pc, #104]	; (800ec18 <RegionEU868GetPhyParam+0x164>)
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 800ebb6:	9304      	str	r3, [sp, #16]
            break;
 800ebb8:	e7b5      	b.n	800eb26 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 800ebba:	2310      	movs	r3, #16
 800ebbc:	9304      	str	r3, [sp, #16]
            break;
 800ebbe:	e7b2      	b.n	800eb26 <RegionEU868GetPhyParam+0x72>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800ebc0:	4b15      	ldr	r3, [pc, #84]	; (800ec18 <RegionEU868GetPhyParam+0x164>)
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	9304      	str	r3, [sp, #16]
            break;
 800ebc6:	e7ae      	b.n	800eb26 <RegionEU868GetPhyParam+0x72>
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 800ebc8:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 800ebcc:	9304      	str	r3, [sp, #16]
            break;
 800ebce:	e7aa      	b.n	800eb26 <RegionEU868GetPhyParam+0x72>
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 800ebd0:	4b16      	ldr	r3, [pc, #88]	; (800ec2c <RegionEU868GetPhyParam+0x178>)
 800ebd2:	9304      	str	r3, [sp, #16]
            break;
 800ebd4:	e7a7      	b.n	800eb26 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 800ebd6:	4b14      	ldr	r3, [pc, #80]	; (800ec28 <RegionEU868GetPhyParam+0x174>)
 800ebd8:	9304      	str	r3, [sp, #16]
            break;
 800ebda:	e7a4      	b.n	800eb26 <RegionEU868GetPhyParam+0x72>
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 800ebdc:	2311      	movs	r3, #17
 800ebde:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 800ebe2:	2302      	movs	r3, #2
 800ebe4:	f88d 3011 	strb.w	r3, [sp, #17]
            break;
 800ebe8:	e79d      	b.n	800eb26 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 800ebea:	2303      	movs	r3, #3
 800ebec:	9304      	str	r3, [sp, #16]
            break;
 800ebee:	e79a      	b.n	800eb26 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 800ebf0:	4b0d      	ldr	r3, [pc, #52]	; (800ec28 <RegionEU868GetPhyParam+0x174>)
 800ebf2:	9304      	str	r3, [sp, #16]
            break;
 800ebf4:	e797      	b.n	800eb26 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 800ebf6:	2303      	movs	r3, #3
 800ebf8:	9304      	str	r3, [sp, #16]
            break;
 800ebfa:	e794      	b.n	800eb26 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 800ebfc:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800ec00:	4a0b      	ldr	r2, [pc, #44]	; (800ec30 <RegionEU868GetPhyParam+0x17c>)
 800ec02:	5cd3      	ldrb	r3, [r2, r3]
 800ec04:	9304      	str	r3, [sp, #16]
            break;
 800ec06:	e78e      	b.n	800eb26 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 800ec08:	490a      	ldr	r1, [pc, #40]	; (800ec34 <RegionEU868GetPhyParam+0x180>)
 800ec0a:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800ec0e:	f7ff fe87 	bl	800e920 <RegionCommonGetBandwidth>
 800ec12:	9004      	str	r0, [sp, #16]
            break;
 800ec14:	e787      	b.n	800eb26 <RegionEU868GetPhyParam+0x72>
 800ec16:	bf00      	nop
 800ec18:	20000f30 	.word	0x20000f30
 800ec1c:	080145f8 	.word	0x080145f8
 800ec20:	08014600 	.word	0x08014600
 800ec24:	fffffc18 	.word	0xfffffc18
 800ec28:	33d3e608 	.word	0x33d3e608
 800ec2c:	4009999a 	.word	0x4009999a
 800ec30:	080145f0 	.word	0x080145f0
 800ec34:	080145d0 	.word	0x080145d0

0800ec38 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800ec38:	b510      	push	{r4, lr}
 800ec3a:	b082      	sub	sp, #8
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800ec3c:	4b0b      	ldr	r3, [pc, #44]	; (800ec6c <RegionEU868SetBandTxDone+0x34>)
 800ec3e:	681c      	ldr	r4, [r3, #0]
 800ec40:	4b0b      	ldr	r3, [pc, #44]	; (800ec70 <RegionEU868SetBandTxDone+0x38>)
 800ec42:	681a      	ldr	r2, [r3, #0]
 800ec44:	7803      	ldrb	r3, [r0, #0]
 800ec46:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ec4a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ec4e:	7a5b      	ldrb	r3, [r3, #9]
 800ec50:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800ec54:	6903      	ldr	r3, [r0, #16]
 800ec56:	9300      	str	r3, [sp, #0]
 800ec58:	68c3      	ldr	r3, [r0, #12]
 800ec5a:	7842      	ldrb	r2, [r0, #1]
 800ec5c:	6881      	ldr	r1, [r0, #8]
 800ec5e:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 800ec62:	f7ff fc12 	bl	800e48a <RegionCommonSetBandTxDone>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 800ec66:	b002      	add	sp, #8
 800ec68:	bd10      	pop	{r4, pc}
 800ec6a:	bf00      	nop
 800ec6c:	20000f2c 	.word	0x20000f2c
 800ec70:	20000f30 	.word	0x20000f30

0800ec74 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 800ec74:	b510      	push	{r4, lr}
 800ec76:	b0a4      	sub	sp, #144	; 0x90
 800ec78:	4604      	mov	r4, r0
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 800ec7a:	2290      	movs	r2, #144	; 0x90
 800ec7c:	2100      	movs	r1, #0
 800ec7e:	4668      	mov	r0, sp
 800ec80:	f004 fee4 	bl	8013a4c <memset>
 800ec84:	2364      	movs	r3, #100	; 0x64
 800ec86:	f8ad 3000 	strh.w	r3, [sp]
 800ec8a:	f8ad 3018 	strh.w	r3, [sp, #24]
 800ec8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ec92:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 800ec96:	210a      	movs	r1, #10
 800ec98:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
 800ec9c:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 800eca0:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 800eca4:	7a23      	ldrb	r3, [r4, #8]
 800eca6:	2b01      	cmp	r3, #1
 800eca8:	d031      	beq.n	800ed0e <RegionEU868InitDefaults+0x9a>
 800ecaa:	2b02      	cmp	r3, #2
 800ecac:	d03d      	beq.n	800ed2a <RegionEU868InitDefaults+0xb6>
 800ecae:	b10b      	cbz	r3, 800ecb4 <RegionEU868InitDefaults+0x40>
        {
            break;
        }
    }
#endif /* REGION_EU868 */
}
 800ecb0:	b024      	add	sp, #144	; 0x90
 800ecb2:	bd10      	pop	{r4, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800ecb4:	6820      	ldr	r0, [r4, #0]
 800ecb6:	2800      	cmp	r0, #0
 800ecb8:	d0fa      	beq.n	800ecb0 <RegionEU868InitDefaults+0x3c>
 800ecba:	6863      	ldr	r3, [r4, #4]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d0f7      	beq.n	800ecb0 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800ecc0:	4a1f      	ldr	r2, [pc, #124]	; (800ed40 <RegionEU868InitDefaults+0xcc>)
 800ecc2:	6010      	str	r0, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800ecc4:	4c1f      	ldr	r4, [pc, #124]	; (800ed44 <RegionEU868InitDefaults+0xd0>)
 800ecc6:	6023      	str	r3, [r4, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 800ecc8:	2290      	movs	r2, #144	; 0x90
 800ecca:	4669      	mov	r1, sp
 800eccc:	f002 fa19 	bl	8011102 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 800ecd0:	6824      	ldr	r4, [r4, #0]
 800ecd2:	4b1d      	ldr	r3, [pc, #116]	; (800ed48 <RegionEU868InitDefaults+0xd4>)
 800ecd4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ecd8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 800ecdc:	f104 0c0c 	add.w	ip, r4, #12
 800ece0:	f103 020c 	add.w	r2, r3, #12
 800ece4:	ca07      	ldmia	r2, {r0, r1, r2}
 800ece6:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 800ecea:	f104 0c18 	add.w	ip, r4, #24
 800ecee:	3318      	adds	r3, #24
 800ecf0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ecf4:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800ecf8:	2307      	movs	r3, #7
 800ecfa:	f8a4 348c 	strh.w	r3, [r4, #1164]	; 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800ecfe:	2201      	movs	r2, #1
 800ed00:	f204 418c 	addw	r1, r4, #1164	; 0x48c
 800ed04:	f504 6090 	add.w	r0, r4, #1152	; 0x480
 800ed08:	f7ff fbb0 	bl	800e46c <RegionCommonChanMaskCopy>
            break;
 800ed0c:	e7d0      	b.n	800ecb0 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 800ed0e:	4b0d      	ldr	r3, [pc, #52]	; (800ed44 <RegionEU868InitDefaults+0xd0>)
 800ed10:	6818      	ldr	r0, [r3, #0]
 800ed12:	2300      	movs	r3, #0
 800ed14:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 800ed16:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 800ed18:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800ed1a:	2201      	movs	r2, #1
 800ed1c:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 800ed20:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800ed24:	f7ff fba2 	bl	800e46c <RegionCommonChanMaskCopy>
            break;
 800ed28:	e7c2      	b.n	800ecb0 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 800ed2a:	4b06      	ldr	r3, [pc, #24]	; (800ed44 <RegionEU868InitDefaults+0xd0>)
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	; 0x48c
 800ed32:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	; 0x480
 800ed36:	430a      	orrs	r2, r1
 800ed38:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
            break;
 800ed3c:	e7b8      	b.n	800ecb0 <RegionEU868InitDefaults+0x3c>
 800ed3e:	bf00      	nop
 800ed40:	20000f2c 	.word	0x20000f2c
 800ed44:	20000f30 	.word	0x20000f30
 800ed48:	08013e14 	.word	0x08013e14

0800ed4c <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800ed4c:	b500      	push	{lr}
 800ed4e:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    switch( phyAttribute )
 800ed50:	290f      	cmp	r1, #15
 800ed52:	d83c      	bhi.n	800edce <RegionEU868Verify+0x82>
 800ed54:	e8df f001 	tbb	[pc, r1]
 800ed58:	3b3b3b0a 	.word	0x3b3b3b0a
 800ed5c:	271d133b 	.word	0x271d133b
 800ed60:	3b31313b 	.word	0x3b31313b
 800ed64:	083b3b3b 	.word	0x083b3b3b
 800ed68:	2001      	movs	r0, #1
 800ed6a:	e031      	b.n	800edd0 <RegionEU868Verify+0x84>
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	f88d 3007 	strb.w	r3, [sp, #7]
            return VerifyRfFreq( verify->Frequency, &band );
 800ed72:	f10d 0107 	add.w	r1, sp, #7
 800ed76:	6800      	ldr	r0, [r0, #0]
 800ed78:	f7ff fe16 	bl	800e9a8 <VerifyRfFreq>
 800ed7c:	e028      	b.n	800edd0 <RegionEU868Verify+0x84>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 800ed7e:	2207      	movs	r2, #7
 800ed80:	2100      	movs	r1, #0
 800ed82:	f990 0000 	ldrsb.w	r0, [r0]
 800ed86:	f7ff fb00 	bl	800e38a <RegionCommonValueInRange>
 800ed8a:	3800      	subs	r0, #0
 800ed8c:	bf18      	it	ne
 800ed8e:	2001      	movne	r0, #1
 800ed90:	e01e      	b.n	800edd0 <RegionEU868Verify+0x84>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800ed92:	2205      	movs	r2, #5
 800ed94:	2100      	movs	r1, #0
 800ed96:	f990 0000 	ldrsb.w	r0, [r0]
 800ed9a:	f7ff faf6 	bl	800e38a <RegionCommonValueInRange>
 800ed9e:	3800      	subs	r0, #0
 800eda0:	bf18      	it	ne
 800eda2:	2001      	movne	r0, #1
 800eda4:	e014      	b.n	800edd0 <RegionEU868Verify+0x84>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 800eda6:	2207      	movs	r2, #7
 800eda8:	2100      	movs	r1, #0
 800edaa:	f990 0000 	ldrsb.w	r0, [r0]
 800edae:	f7ff faec 	bl	800e38a <RegionCommonValueInRange>
 800edb2:	3800      	subs	r0, #0
 800edb4:	bf18      	it	ne
 800edb6:	2001      	movne	r0, #1
 800edb8:	e00a      	b.n	800edd0 <RegionEU868Verify+0x84>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 800edba:	2207      	movs	r2, #7
 800edbc:	2100      	movs	r1, #0
 800edbe:	f990 0000 	ldrsb.w	r0, [r0]
 800edc2:	f7ff fae2 	bl	800e38a <RegionCommonValueInRange>
 800edc6:	3800      	subs	r0, #0
 800edc8:	bf18      	it	ne
 800edca:	2001      	movne	r0, #1
 800edcc:	e000      	b.n	800edd0 <RegionEU868Verify+0x84>
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
 800edce:	2000      	movs	r0, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 800edd0:	b003      	add	sp, #12
 800edd2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800edd8 <RegionEU868ChanMaskSet>:
    }
#endif /* REGION_EU868 */
}

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800edd8:	b508      	push	{r3, lr}
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 800edda:	7903      	ldrb	r3, [r0, #4]
 800eddc:	b11b      	cbz	r3, 800ede6 <RegionEU868ChanMaskSet+0xe>
 800edde:	2b01      	cmp	r3, #1
 800ede0:	d00b      	beq.n	800edfa <RegionEU868ChanMaskSet+0x22>
 800ede2:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 800ede4:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800ede6:	4b0a      	ldr	r3, [pc, #40]	; (800ee10 <RegionEU868ChanMaskSet+0x38>)
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	2201      	movs	r2, #1
 800edec:	6801      	ldr	r1, [r0, #0]
 800edee:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 800edf2:	f7ff fb3b 	bl	800e46c <RegionCommonChanMaskCopy>
    return true;
 800edf6:	2001      	movs	r0, #1
            break;
 800edf8:	e7f4      	b.n	800ede4 <RegionEU868ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800edfa:	4b05      	ldr	r3, [pc, #20]	; (800ee10 <RegionEU868ChanMaskSet+0x38>)
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	2201      	movs	r2, #1
 800ee00:	6801      	ldr	r1, [r0, #0]
 800ee02:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 800ee06:	f7ff fb31 	bl	800e46c <RegionCommonChanMaskCopy>
    return true;
 800ee0a:	2001      	movs	r0, #1
            break;
 800ee0c:	e7ea      	b.n	800ede4 <RegionEU868ChanMaskSet+0xc>
 800ee0e:	bf00      	nop
 800ee10:	20000f30 	.word	0x20000f30

0800ee14 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800ee14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee16:	b083      	sub	sp, #12
 800ee18:	460e      	mov	r6, r1
 800ee1a:	4617      	mov	r7, r2
 800ee1c:	461c      	mov	r4, r3
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 800ee1e:	2807      	cmp	r0, #7
 800ee20:	bfa8      	it	ge
 800ee22:	2007      	movge	r0, #7
 800ee24:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 800ee26:	4913      	ldr	r1, [pc, #76]	; (800ee74 <RegionEU868ComputeRxWindowParameters+0x60>)
 800ee28:	f7ff fd7a 	bl	800e920 <RegionCommonGetBandwidth>
 800ee2c:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 800ee2e:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800ee32:	2b07      	cmp	r3, #7
 800ee34:	d017      	beq.n	800ee66 <RegionEU868ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 800ee36:	4a0f      	ldr	r2, [pc, #60]	; (800ee74 <RegionEU868ComputeRxWindowParameters+0x60>)
 800ee38:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ee3c:	4a0e      	ldr	r2, [pc, #56]	; (800ee78 <RegionEU868ComputeRxWindowParameters+0x64>)
 800ee3e:	5cd0      	ldrb	r0, [r2, r3]
 800ee40:	f7ff fc3a 	bl	800e6b8 <RegionCommonComputeSymbolTimeLoRa>
 800ee44:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800ee46:	4b0d      	ldr	r3, [pc, #52]	; (800ee7c <RegionEU868ComputeRxWindowParameters+0x68>)
 800ee48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee4a:	4798      	blx	r3
 800ee4c:	4603      	mov	r3, r0
 800ee4e:	f104 020c 	add.w	r2, r4, #12
 800ee52:	9201      	str	r2, [sp, #4]
 800ee54:	3408      	adds	r4, #8
 800ee56:	9400      	str	r4, [sp, #0]
 800ee58:	463a      	mov	r2, r7
 800ee5a:	4631      	mov	r1, r6
 800ee5c:	4628      	mov	r0, r5
 800ee5e:	f7ff fc39 	bl	800e6d4 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 800ee62:	b003      	add	sp, #12
 800ee64:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 800ee66:	4a04      	ldr	r2, [pc, #16]	; (800ee78 <RegionEU868ComputeRxWindowParameters+0x64>)
 800ee68:	5cd0      	ldrb	r0, [r2, r3]
 800ee6a:	f7ff fc2d 	bl	800e6c8 <RegionCommonComputeSymbolTimeFsk>
 800ee6e:	4605      	mov	r5, r0
 800ee70:	e7e9      	b.n	800ee46 <RegionEU868ComputeRxWindowParameters+0x32>
 800ee72:	bf00      	nop
 800ee74:	080145d0 	.word	0x080145d0
 800ee78:	080145f0 	.word	0x080145f0
 800ee7c:	08014bf0 	.word	0x08014bf0

0800ee80 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800ee80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee84:	b08a      	sub	sp, #40	; 0x28
 800ee86:	4604      	mov	r4, r0
 800ee88:	460f      	mov	r7, r1
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800ee8a:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800ee8e:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800ee92:	4b37      	ldr	r3, [pc, #220]	; (800ef70 <RegionEU868RxConfig+0xf0>)
 800ee94:	685b      	ldr	r3, [r3, #4]
 800ee96:	4798      	blx	r3
 800ee98:	2800      	cmp	r0, #0
 800ee9a:	d167      	bne.n	800ef6c <RegionEU868RxConfig+0xec>
 800ee9c:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800ee9e:	7ce3      	ldrb	r3, [r4, #19]
 800eea0:	b983      	cbnz	r3, 800eec4 <RegionEU868RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800eea2:	4b34      	ldr	r3, [pc, #208]	; (800ef74 <RegionEU868RxConfig+0xf4>)
 800eea4:	681a      	ldr	r2, [r3, #0]
 800eea6:	7823      	ldrb	r3, [r4, #0]
 800eea8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800eeac:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800eeb0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800eeb4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800eeb8:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800eebc:	f1b8 0f00 	cmp.w	r8, #0
 800eec0:	d100      	bne.n	800eec4 <RegionEU868RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800eec2:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 800eec4:	4b2c      	ldr	r3, [pc, #176]	; (800ef78 <RegionEU868RxConfig+0xf8>)
 800eec6:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 800eeca:	4b29      	ldr	r3, [pc, #164]	; (800ef70 <RegionEU868RxConfig+0xf0>)
 800eecc:	68db      	ldr	r3, [r3, #12]
 800eece:	4640      	mov	r0, r8
 800eed0:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 800eed2:	2d07      	cmp	r5, #7
 800eed4:	d02b      	beq.n	800ef2e <RegionEU868RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800eed6:	4b26      	ldr	r3, [pc, #152]	; (800ef70 <RegionEU868RxConfig+0xf0>)
 800eed8:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800eedc:	7ca3      	ldrb	r3, [r4, #18]
 800eede:	9309      	str	r3, [sp, #36]	; 0x24
 800eee0:	2601      	movs	r6, #1
 800eee2:	9608      	str	r6, [sp, #32]
 800eee4:	2300      	movs	r3, #0
 800eee6:	9307      	str	r3, [sp, #28]
 800eee8:	9306      	str	r3, [sp, #24]
 800eeea:	9305      	str	r3, [sp, #20]
 800eeec:	9304      	str	r3, [sp, #16]
 800eeee:	9303      	str	r3, [sp, #12]
 800eef0:	8922      	ldrh	r2, [r4, #8]
 800eef2:	9202      	str	r2, [sp, #8]
 800eef4:	2208      	movs	r2, #8
 800eef6:	9201      	str	r2, [sp, #4]
 800eef8:	9300      	str	r3, [sp, #0]
 800eefa:	4633      	mov	r3, r6
 800eefc:	464a      	mov	r2, r9
 800eefe:	78a1      	ldrb	r1, [r4, #2]
 800ef00:	4630      	mov	r0, r6
 800ef02:	47d0      	blx	sl
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 800ef04:	7c63      	ldrb	r3, [r4, #17]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d02d      	beq.n	800ef66 <RegionEU868RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 800ef0a:	4b1c      	ldr	r3, [pc, #112]	; (800ef7c <RegionEU868RxConfig+0xfc>)
 800ef0c:	5d59      	ldrb	r1, [r3, r5]
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800ef0e:	4b18      	ldr	r3, [pc, #96]	; (800ef70 <RegionEU868RxConfig+0xf0>)
 800ef10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef12:	310d      	adds	r1, #13
 800ef14:	b2c9      	uxtb	r1, r1
 800ef16:	4630      	mov	r0, r6
 800ef18:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800ef1a:	462a      	mov	r2, r5
 800ef1c:	4641      	mov	r1, r8
 800ef1e:	7ce0      	ldrb	r0, [r4, #19]
 800ef20:	f7ff fd10 	bl	800e944 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 800ef24:	703d      	strb	r5, [r7, #0]
    return true;
 800ef26:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 800ef28:	b00a      	add	sp, #40	; 0x28
 800ef2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800ef2e:	4b10      	ldr	r3, [pc, #64]	; (800ef70 <RegionEU868RxConfig+0xf0>)
 800ef30:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800ef34:	7ca3      	ldrb	r3, [r4, #18]
 800ef36:	9309      	str	r3, [sp, #36]	; 0x24
 800ef38:	2000      	movs	r0, #0
 800ef3a:	9008      	str	r0, [sp, #32]
 800ef3c:	9007      	str	r0, [sp, #28]
 800ef3e:	9006      	str	r0, [sp, #24]
 800ef40:	2301      	movs	r3, #1
 800ef42:	9305      	str	r3, [sp, #20]
 800ef44:	9004      	str	r0, [sp, #16]
 800ef46:	9003      	str	r0, [sp, #12]
 800ef48:	8923      	ldrh	r3, [r4, #8]
 800ef4a:	9302      	str	r3, [sp, #8]
 800ef4c:	2305      	movs	r3, #5
 800ef4e:	9301      	str	r3, [sp, #4]
 800ef50:	4b0b      	ldr	r3, [pc, #44]	; (800ef80 <RegionEU868RxConfig+0x100>)
 800ef52:	9300      	str	r3, [sp, #0]
 800ef54:	4603      	mov	r3, r0
 800ef56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ef5a:	fb02 f209 	mul.w	r2, r2, r9
 800ef5e:	f24c 3150 	movw	r1, #50000	; 0xc350
 800ef62:	47d0      	blx	sl
 800ef64:	e7ce      	b.n	800ef04 <RegionEU868RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 800ef66:	4b07      	ldr	r3, [pc, #28]	; (800ef84 <RegionEU868RxConfig+0x104>)
 800ef68:	5d59      	ldrb	r1, [r3, r5]
 800ef6a:	e7d0      	b.n	800ef0e <RegionEU868RxConfig+0x8e>
        return false;
 800ef6c:	2000      	movs	r0, #0
 800ef6e:	e7db      	b.n	800ef28 <RegionEU868RxConfig+0xa8>
 800ef70:	08014bf0 	.word	0x08014bf0
 800ef74:	20000f30 	.word	0x20000f30
 800ef78:	080145f0 	.word	0x080145f0
 800ef7c:	08014600 	.word	0x08014600
 800ef80:	00014585 	.word	0x00014585
 800ef84:	080145f8 	.word	0x080145f8

0800ef88 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800ef88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef8c:	b08d      	sub	sp, #52	; 0x34
 800ef8e:	4604      	mov	r4, r0
 800ef90:	460f      	mov	r7, r1
 800ef92:	4690      	mov	r8, r2
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800ef94:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800ef98:	4a42      	ldr	r2, [pc, #264]	; (800f0a4 <RegionEU868TxConfig+0x11c>)
 800ef9a:	f912 a003 	ldrsb.w	sl, [r2, r3]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800ef9e:	4b42      	ldr	r3, [pc, #264]	; (800f0a8 <RegionEU868TxConfig+0x120>)
 800efa0:	6819      	ldr	r1, [r3, #0]
 800efa2:	4d42      	ldr	r5, [pc, #264]	; (800f0ac <RegionEU868TxConfig+0x124>)
 800efa4:	682b      	ldr	r3, [r5, #0]
 800efa6:	7802      	ldrb	r2, [r0, #0]
 800efa8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800efac:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800efb0:	7a53      	ldrb	r3, [r2, #9]
 800efb2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800efb6:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800efba:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800efbe:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800efc2:	f7ff fca8 	bl	800e916 <RegionCommonLimitTxPower>
 800efc6:	4606      	mov	r6, r0
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 800efc8:	4939      	ldr	r1, [pc, #228]	; (800f0b0 <RegionEU868TxConfig+0x128>)
 800efca:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800efce:	f7ff fca7 	bl	800e920 <RegionCommonGetBandwidth>
 800efd2:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800efd4:	68a2      	ldr	r2, [r4, #8]
 800efd6:	6861      	ldr	r1, [r4, #4]
 800efd8:	4630      	mov	r0, r6
 800efda:	f7ff fbb7 	bl	800e74c <RegionCommonComputeTxPower>
 800efde:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800efe0:	4b34      	ldr	r3, [pc, #208]	; (800f0b4 <RegionEU868TxConfig+0x12c>)
 800efe2:	68da      	ldr	r2, [r3, #12]
 800efe4:	6829      	ldr	r1, [r5, #0]
 800efe6:	7823      	ldrb	r3, [r4, #0]
 800efe8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800efec:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800eff0:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 800eff2:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800eff6:	2b07      	cmp	r3, #7
 800eff8:	d031      	beq.n	800f05e <RegionEU868TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800effa:	4b2e      	ldr	r3, [pc, #184]	; (800f0b4 <RegionEU868TxConfig+0x12c>)
 800effc:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 800f000:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800f004:	9308      	str	r3, [sp, #32]
 800f006:	2200      	movs	r2, #0
 800f008:	9207      	str	r2, [sp, #28]
 800f00a:	9206      	str	r2, [sp, #24]
 800f00c:	9205      	str	r2, [sp, #20]
 800f00e:	2501      	movs	r5, #1
 800f010:	9504      	str	r5, [sp, #16]
 800f012:	9203      	str	r2, [sp, #12]
 800f014:	2308      	movs	r3, #8
 800f016:	9302      	str	r3, [sp, #8]
 800f018:	9501      	str	r5, [sp, #4]
 800f01a:	f8cd a000 	str.w	sl, [sp]
 800f01e:	464b      	mov	r3, r9
 800f020:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f022:	4628      	mov	r0, r5
 800f024:	47d8      	blx	fp
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800f026:	4b21      	ldr	r3, [pc, #132]	; (800f0ac <RegionEU868TxConfig+0x124>)
 800f028:	681a      	ldr	r2, [r3, #0]
 800f02a:	7823      	ldrb	r3, [r4, #0]
 800f02c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f030:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800f034:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f038:	f7ff fca6 	bl	800e988 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800f03c:	89a1      	ldrh	r1, [r4, #12]
 800f03e:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800f042:	f7ff fd05 	bl	800ea50 <GetTimeOnAir>
 800f046:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800f04a:	4b1a      	ldr	r3, [pc, #104]	; (800f0b4 <RegionEU868TxConfig+0x12c>)
 800f04c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f04e:	7b21      	ldrb	r1, [r4, #12]
 800f050:	4628      	mov	r0, r5
 800f052:	4798      	blx	r3

    *txPower = txPowerLimited;
 800f054:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 800f056:	2001      	movs	r0, #1
 800f058:	b00d      	add	sp, #52	; 0x34
 800f05a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800f05e:	4b15      	ldr	r3, [pc, #84]	; (800f0b4 <RegionEU868TxConfig+0x12c>)
 800f060:	69dd      	ldr	r5, [r3, #28]
 800f062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f066:	fb03 f30a 	mul.w	r3, r3, sl
 800f06a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800f06e:	9208      	str	r2, [sp, #32]
 800f070:	f04f 0b00 	mov.w	fp, #0
 800f074:	f8cd b01c 	str.w	fp, [sp, #28]
 800f078:	f8cd b018 	str.w	fp, [sp, #24]
 800f07c:	f8cd b014 	str.w	fp, [sp, #20]
 800f080:	2201      	movs	r2, #1
 800f082:	9204      	str	r2, [sp, #16]
 800f084:	f8cd b00c 	str.w	fp, [sp, #12]
 800f088:	2205      	movs	r2, #5
 800f08a:	9202      	str	r2, [sp, #8]
 800f08c:	f8cd b004 	str.w	fp, [sp, #4]
 800f090:	9300      	str	r3, [sp, #0]
 800f092:	464b      	mov	r3, r9
 800f094:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800f098:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f09a:	4658      	mov	r0, fp
 800f09c:	47a8      	blx	r5
        modem = MODEM_FSK;
 800f09e:	465d      	mov	r5, fp
 800f0a0:	e7c1      	b.n	800f026 <RegionEU868TxConfig+0x9e>
 800f0a2:	bf00      	nop
 800f0a4:	080145f0 	.word	0x080145f0
 800f0a8:	20000f2c 	.word	0x20000f2c
 800f0ac:	20000f30 	.word	0x20000f30
 800f0b0:	080145d0 	.word	0x080145d0
 800f0b4:	08014bf0 	.word	0x08014bf0

0800f0b8 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800f0b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f0bc:	b08f      	sub	sp, #60	; 0x3c
 800f0be:	4605      	mov	r5, r0
 800f0c0:	4689      	mov	r9, r1
 800f0c2:	4690      	mov	r8, r2
 800f0c4:	461f      	mov	r7, r3
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800f0c6:	2400      	movs	r4, #0
 800f0c8:	940c      	str	r4, [sp, #48]	; 0x30
 800f0ca:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 800f0ce:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
    uint8_t status = 0x07;
 800f0d2:	2607      	movs	r6, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800f0d4:	e030      	b.n	800f138 <RegionEU868LinkAdrReq+0x80>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800f0d6:	f04f 0c00 	mov.w	ip, #0
        status = 0x07;
 800f0da:	2607      	movs	r6, #7
 800f0dc:	e012      	b.n	800f104 <RegionEU868LinkAdrReq+0x4c>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 800f0de:	4a57      	ldr	r2, [pc, #348]	; (800f23c <RegionEU868LinkAdrReq+0x184>)
 800f0e0:	6812      	ldr	r2, [r2, #0]
 800f0e2:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800f0e6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800f0ea:	b13a      	cbz	r2, 800f0fc <RegionEU868LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 800f0ec:	2201      	movs	r2, #1
 800f0ee:	fa02 f20c 	lsl.w	r2, r2, ip
 800f0f2:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 800f0f6:	430a      	orrs	r2, r1
 800f0f8:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800f0fc:	f10c 0c01 	add.w	ip, ip, #1
 800f100:	fa5f fc8c 	uxtb.w	ip, ip
 800f104:	f1bc 0f0f 	cmp.w	ip, #15
 800f108:	d816      	bhi.n	800f138 <RegionEU868LinkAdrReq+0x80>
                if( linkAdrParams.ChMaskCtrl == 6 )
 800f10a:	2b06      	cmp	r3, #6
 800f10c:	d0e7      	beq.n	800f0de <RegionEU868LinkAdrReq+0x26>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800f10e:	f8bd e02e 	ldrh.w	lr, [sp, #46]	; 0x2e
 800f112:	fa4e fe0c 	asr.w	lr, lr, ip
 800f116:	f01e 0f01 	tst.w	lr, #1
 800f11a:	d0ef      	beq.n	800f0fc <RegionEU868LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 800f11c:	4a47      	ldr	r2, [pc, #284]	; (800f23c <RegionEU868LinkAdrReq+0x184>)
 800f11e:	6812      	ldr	r2, [r2, #0]
 800f120:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800f124:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800f128:	2a00      	cmp	r2, #0
 800f12a:	d1e7      	bne.n	800f0fc <RegionEU868LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 800f12c:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 800f130:	e7e4      	b.n	800f0fc <RegionEU868LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 800f132:	2606      	movs	r6, #6
 800f134:	e000      	b.n	800f138 <RegionEU868LinkAdrReq+0x80>
            status &= 0xFE; // Channel mask KO
 800f136:	2606      	movs	r6, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800f138:	7a2b      	ldrb	r3, [r5, #8]
 800f13a:	42a3      	cmp	r3, r4
 800f13c:	d918      	bls.n	800f170 <RegionEU868LinkAdrReq+0xb8>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800f13e:	6868      	ldr	r0, [r5, #4]
 800f140:	a90c      	add	r1, sp, #48	; 0x30
 800f142:	4420      	add	r0, r4
 800f144:	f7ff fa42 	bl	800e5cc <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800f148:	b190      	cbz	r0, 800f170 <RegionEU868LinkAdrReq+0xb8>
        bytesProcessed += nextIndex;
 800f14a:	4404      	add	r4, r0
 800f14c:	b2e4      	uxtb	r4, r4
        chMask = linkAdrParams.ChMask;
 800f14e:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800f152:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800f156:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800f15a:	b90b      	cbnz	r3, 800f160 <RegionEU868LinkAdrReq+0xa8>
 800f15c:	2a00      	cmp	r2, #0
 800f15e:	d0e8      	beq.n	800f132 <RegionEU868LinkAdrReq+0x7a>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800f160:	1e5a      	subs	r2, r3, #1
 800f162:	b2d2      	uxtb	r2, r2
 800f164:	2a04      	cmp	r2, #4
 800f166:	d9e6      	bls.n	800f136 <RegionEU868LinkAdrReq+0x7e>
 800f168:	2b06      	cmp	r3, #6
 800f16a:	d9b4      	bls.n	800f0d6 <RegionEU868LinkAdrReq+0x1e>
            status &= 0xFE; // Channel mask KO
 800f16c:	2606      	movs	r6, #6
 800f16e:	e7e3      	b.n	800f138 <RegionEU868LinkAdrReq+0x80>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800f170:	2302      	movs	r3, #2
 800f172:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800f176:	7a6b      	ldrb	r3, [r5, #9]
 800f178:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    phyParam = RegionEU868GetPhyParam( &getPhy );
 800f17c:	a80a      	add	r0, sp, #40	; 0x28
 800f17e:	f7ff fc99 	bl	800eab4 <RegionEU868GetPhyParam>
 800f182:	9009      	str	r0, [sp, #36]	; 0x24

    linkAdrVerifyParams.Status = status;
 800f184:	f88d 6008 	strb.w	r6, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800f188:	7aab      	ldrb	r3, [r5, #10]
 800f18a:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800f18e:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800f192:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800f196:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800f19a:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800f19e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800f1a2:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800f1a6:	f995 300b 	ldrsb.w	r3, [r5, #11]
 800f1aa:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800f1ae:	f995 300c 	ldrsb.w	r3, [r5, #12]
 800f1b2:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800f1b6:	f995 300d 	ldrsb.w	r3, [r5, #13]
 800f1ba:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 800f1be:	2310      	movs	r3, #16
 800f1c0:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800f1c4:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 800f1c8:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800f1ca:	f88d 0018 	strb.w	r0, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 800f1ce:	2307      	movs	r3, #7
 800f1d0:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800f1d4:	4a19      	ldr	r2, [pc, #100]	; (800f23c <RegionEU868LinkAdrReq+0x184>)
 800f1d6:	6812      	ldr	r2, [r2, #0]
 800f1d8:	9207      	str	r2, [sp, #28]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 800f1da:	f88d 3020 	strb.w	r3, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 800f1de:	2300      	movs	r3, #0
 800f1e0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800f1e4:	682b      	ldr	r3, [r5, #0]
 800f1e6:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800f1e8:	ab0c      	add	r3, sp, #48	; 0x30
 800f1ea:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800f1ee:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 800f1f2:	a801      	add	r0, sp, #4
 800f1f4:	f7ff fa08 	bl	800e608 <RegionCommonLinkAdrReqVerifyParams>
 800f1f8:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800f1fa:	2807      	cmp	r0, #7
 800f1fc:	d010      	beq.n	800f220 <RegionEU868LinkAdrReq+0x168>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800f1fe:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800f202:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
 800f206:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800f20a:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 800f20e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800f212:	703b      	strb	r3, [r7, #0]
    *nbBytesParsed = bytesProcessed;
 800f214:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f216:	701c      	strb	r4, [r3, #0]

#endif /* REGION_EU868 */
    return status;
}
 800f218:	4628      	mov	r0, r5
 800f21a:	b00f      	add	sp, #60	; 0x3c
 800f21c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 800f220:	4e06      	ldr	r6, [pc, #24]	; (800f23c <RegionEU868LinkAdrReq+0x184>)
 800f222:	6830      	ldr	r0, [r6, #0]
 800f224:	220c      	movs	r2, #12
 800f226:	2100      	movs	r1, #0
 800f228:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800f22c:	f001 ff81 	bl	8011132 <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 800f230:	6833      	ldr	r3, [r6, #0]
 800f232:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 800f236:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
 800f23a:	e7e0      	b.n	800f1fe <RegionEU868LinkAdrReq+0x146>
 800f23c:	20000f30 	.word	0x20000f30

0800f240 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800f240:	b530      	push	{r4, r5, lr}
 800f242:	b083      	sub	sp, #12
 800f244:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800f246:	2300      	movs	r3, #0
 800f248:	f88d 3007 	strb.w	r3, [sp, #7]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 800f24c:	f10d 0107 	add.w	r1, sp, #7
 800f250:	6840      	ldr	r0, [r0, #4]
 800f252:	f7ff fba9 	bl	800e9a8 <VerifyRfFreq>
 800f256:	b1a8      	cbz	r0, 800f284 <RegionEU868RxParamSetupReq+0x44>
    uint8_t status = 0x07;
 800f258:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 800f25a:	2207      	movs	r2, #7
 800f25c:	2100      	movs	r1, #0
 800f25e:	f994 0000 	ldrsb.w	r0, [r4]
 800f262:	f7ff f892 	bl	800e38a <RegionCommonValueInRange>
 800f266:	b908      	cbnz	r0, 800f26c <RegionEU868RxParamSetupReq+0x2c>
    {
        status &= 0xFD; // Datarate KO
 800f268:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 800f26c:	2205      	movs	r2, #5
 800f26e:	2100      	movs	r1, #0
 800f270:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800f274:	f7ff f889 	bl	800e38a <RegionCommonValueInRange>
 800f278:	b908      	cbnz	r0, 800f27e <RegionEU868RxParamSetupReq+0x3e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800f27a:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_EU868 */
    return status;
}
 800f27e:	4628      	mov	r0, r5
 800f280:	b003      	add	sp, #12
 800f282:	bd30      	pop	{r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800f284:	2506      	movs	r5, #6
 800f286:	e7e8      	b.n	800f25a <RegionEU868RxParamSetupReq+0x1a>

0800f288 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 800f288:	f04f 30ff 	mov.w	r0, #4294967295
 800f28c:	4770      	bx	lr
	...

0800f290 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 800f290:	b510      	push	{r4, lr}
 800f292:	b082      	sub	sp, #8
 800f294:	4604      	mov	r4, r0
    uint8_t status = 0x03;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800f296:	2300      	movs	r3, #0
 800f298:	f88d 3007 	strb.w	r3, [sp, #7]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 800f29c:	f10d 0107 	add.w	r1, sp, #7
 800f2a0:	6840      	ldr	r0, [r0, #4]
 800f2a2:	f7ff fb81 	bl	800e9a8 <VerifyRfFreq>
 800f2a6:	b178      	cbz	r0, 800f2c8 <RegionEU868DlChannelReq+0x38>
    uint8_t status = 0x03;
 800f2a8:	2003      	movs	r0, #3
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800f2aa:	4b0c      	ldr	r3, [pc, #48]	; (800f2dc <RegionEU868DlChannelReq+0x4c>)
 800f2ac:	681a      	ldr	r2, [r3, #0]
 800f2ae:	7823      	ldrb	r3, [r4, #0]
 800f2b0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800f2b4:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800f2b8:	b909      	cbnz	r1, 800f2be <RegionEU868DlChannelReq+0x2e>
    {
        status &= 0xFD;
 800f2ba:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 800f2be:	2803      	cmp	r0, #3
 800f2c0:	d004      	beq.n	800f2cc <RegionEU868DlChannelReq+0x3c>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_EU868 */
    return status;
}
 800f2c2:	b240      	sxtb	r0, r0
 800f2c4:	b002      	add	sp, #8
 800f2c6:	bd10      	pop	{r4, pc}
        status &= 0xFE;
 800f2c8:	2002      	movs	r0, #2
 800f2ca:	e7ee      	b.n	800f2aa <RegionEU868DlChannelReq+0x1a>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 800f2cc:	6861      	ldr	r1, [r4, #4]
 800f2ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f2d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f2d6:	6059      	str	r1, [r3, #4]
 800f2d8:	e7f3      	b.n	800f2c2 <RegionEU868DlChannelReq+0x32>
 800f2da:	bf00      	nop
 800f2dc:	20000f30 	.word	0x20000f30

0800f2e0 <RegionEU868AlternateDr>:
#if defined( REGION_EU868 )
    return currentDr;
#else
    return -1;
#endif /* REGION_EU868 */
}
 800f2e0:	4770      	bx	lr
	...

0800f2e4 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800f2e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2e6:	b097      	sub	sp, #92	; 0x5c
 800f2e8:	4604      	mov	r4, r0
 800f2ea:	460f      	mov	r7, r1
 800f2ec:	4616      	mov	r6, r2
 800f2ee:	461d      	mov	r5, r3
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 800f2f0:	2100      	movs	r1, #0
 800f2f2:	f88d 1057 	strb.w	r1, [sp, #87]	; 0x57
    uint8_t nbRestrictedChannels = 0;
 800f2f6:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 800f2fa:	9111      	str	r1, [sp, #68]	; 0x44
 800f2fc:	9112      	str	r1, [sp, #72]	; 0x48
 800f2fe:	9113      	str	r1, [sp, #76]	; 0x4c
 800f300:	9114      	str	r1, [sp, #80]	; 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 800f302:	2307      	movs	r3, #7
 800f304:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800f308:	4b34      	ldr	r3, [pc, #208]	; (800f3dc <RegionEU868NextChannel+0xf8>)
 800f30a:	6818      	ldr	r0, [r3, #0]
 800f30c:	2201      	movs	r2, #1
 800f30e:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800f312:	f7ff f895 	bl	800e440 <RegionCommonCountChannels>
 800f316:	b938      	cbnz	r0, 800f328 <RegionEU868NextChannel+0x44>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800f318:	4b30      	ldr	r3, [pc, #192]	; (800f3dc <RegionEU868NextChannel+0xf8>)
 800f31a:	681a      	ldr	r2, [r3, #0]
 800f31c:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 800f320:	f043 0307 	orr.w	r3, r3, #7
 800f324:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800f328:	7a63      	ldrb	r3, [r4, #9]
 800f32a:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800f32e:	7a23      	ldrb	r3, [r4, #8]
 800f330:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800f334:	4b29      	ldr	r3, [pc, #164]	; (800f3dc <RegionEU868NextChannel+0xf8>)
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	f503 6290 	add.w	r2, r3, #1152	; 0x480
 800f33c:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800f33e:	9305      	str	r3, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 800f340:	4b27      	ldr	r3, [pc, #156]	; (800f3e0 <RegionEU868NextChannel+0xfc>)
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	9306      	str	r3, [sp, #24]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 800f346:	2310      	movs	r3, #16
 800f348:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 800f34c:	f10d 030a 	add.w	r3, sp, #10
 800f350:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800f352:	6823      	ldr	r3, [r4, #0]
 800f354:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800f356:	6863      	ldr	r3, [r4, #4]
 800f358:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800f35a:	7aa3      	ldrb	r3, [r4, #10]
 800f35c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 800f360:	2306      	movs	r3, #6
 800f362:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800f366:	ab0c      	add	r3, sp, #48	; 0x30
 800f368:	f104 020c 	add.w	r2, r4, #12
 800f36c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f370:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800f374:	7d23      	ldrb	r3, [r4, #20]
 800f376:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800f37a:	8ae1      	ldrh	r1, [r4, #22]
 800f37c:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800f380:	f7ff fb66 	bl	800ea50 <GetTimeOnAir>
 800f384:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800f386:	ab03      	add	r3, sp, #12
 800f388:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800f38a:	9601      	str	r6, [sp, #4]
 800f38c:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 800f390:	9300      	str	r3, [sp, #0]
 800f392:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 800f396:	aa11      	add	r2, sp, #68	; 0x44
 800f398:	4629      	mov	r1, r5
 800f39a:	a809      	add	r0, sp, #36	; 0x24
 800f39c:	f7ff fa52 	bl	800e844 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800f3a0:	4604      	mov	r4, r0
 800f3a2:	b120      	cbz	r0, 800f3ae <RegionEU868NextChannel+0xca>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 800f3a4:	280c      	cmp	r0, #12
 800f3a6:	d00f      	beq.n	800f3c8 <RegionEU868NextChannel+0xe4>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800f3a8:	4620      	mov	r0, r4
 800f3aa:	b017      	add	sp, #92	; 0x5c
 800f3ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800f3ae:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
 800f3b2:	3901      	subs	r1, #1
 800f3b4:	f001 fe98 	bl	80110e8 <randr>
 800f3b8:	f100 0358 	add.w	r3, r0, #88	; 0x58
 800f3bc:	eb0d 0003 	add.w	r0, sp, r3
 800f3c0:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 800f3c4:	703b      	strb	r3, [r7, #0]
 800f3c6:	e7ef      	b.n	800f3a8 <RegionEU868NextChannel+0xc4>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800f3c8:	4b04      	ldr	r3, [pc, #16]	; (800f3dc <RegionEU868NextChannel+0xf8>)
 800f3ca:	681a      	ldr	r2, [r3, #0]
 800f3cc:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 800f3d0:	f043 0307 	orr.w	r3, r3, #7
 800f3d4:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
 800f3d8:	e7e6      	b.n	800f3a8 <RegionEU868NextChannel+0xc4>
 800f3da:	bf00      	nop
 800f3dc:	20000f30 	.word	0x20000f30
 800f3e0:	20000f2c 	.word	0x20000f2c

0800f3e4 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 800f3e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f3e6:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	f88d 3007 	strb.w	r3, [sp, #7]
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 800f3ee:	7905      	ldrb	r5, [r0, #4]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800f3f0:	2d02      	cmp	r5, #2
 800f3f2:	d94f      	bls.n	800f494 <RegionEU868ChannelAdd+0xb0>
 800f3f4:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 800f3f6:	2d0f      	cmp	r5, #15
 800f3f8:	d84e      	bhi.n	800f498 <RegionEU868ChannelAdd+0xb4>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800f3fa:	6803      	ldr	r3, [r0, #0]
 800f3fc:	7a18      	ldrb	r0, [r3, #8]
 800f3fe:	f340 0003 	sbfx	r0, r0, #0, #4
 800f402:	2207      	movs	r2, #7
 800f404:	2100      	movs	r1, #0
 800f406:	b240      	sxtb	r0, r0
 800f408:	f7fe ffbf 	bl	800e38a <RegionCommonValueInRange>
 800f40c:	2800      	cmp	r0, #0
 800f40e:	d03d      	beq.n	800f48c <RegionEU868ChannelAdd+0xa8>
    bool drInvalid = false;
 800f410:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800f412:	6823      	ldr	r3, [r4, #0]
 800f414:	7a18      	ldrb	r0, [r3, #8]
 800f416:	f340 1003 	sbfx	r0, r0, #4, #4
 800f41a:	2207      	movs	r2, #7
 800f41c:	2100      	movs	r1, #0
 800f41e:	b240      	sxtb	r0, r0
 800f420:	f7fe ffb3 	bl	800e38a <RegionCommonValueInRange>
 800f424:	b900      	cbnz	r0, 800f428 <RegionEU868ChannelAdd+0x44>
    {
        drInvalid = true;
 800f426:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800f428:	6820      	ldr	r0, [r4, #0]
 800f42a:	7a03      	ldrb	r3, [r0, #8]
 800f42c:	f343 0203 	sbfx	r2, r3, #0, #4
 800f430:	b252      	sxtb	r2, r2
 800f432:	f343 1303 	sbfx	r3, r3, #4, #4
 800f436:	b25b      	sxtb	r3, r3
 800f438:	429a      	cmp	r2, r3
 800f43a:	dd00      	ble.n	800f43e <RegionEU868ChannelAdd+0x5a>
    {
        drInvalid = true;
 800f43c:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 800f43e:	f10d 0107 	add.w	r1, sp, #7
 800f442:	6800      	ldr	r0, [r0, #0]
 800f444:	f7ff fab0 	bl	800e9a8 <VerifyRfFreq>
 800f448:	b310      	cbz	r0, 800f490 <RegionEU868ChannelAdd+0xac>
    bool freqInvalid = false;
 800f44a:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800f44c:	b106      	cbz	r6, 800f450 <RegionEU868ChannelAdd+0x6c>
 800f44e:	bb33      	cbnz	r3, 800f49e <RegionEU868ChannelAdd+0xba>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }
    if( drInvalid == true )
 800f450:	bb3e      	cbnz	r6, 800f4a2 <RegionEU868ChannelAdd+0xbe>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 800f452:	bb43      	cbnz	r3, 800f4a6 <RegionEU868ChannelAdd+0xc2>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 800f454:	4f15      	ldr	r7, [pc, #84]	; (800f4ac <RegionEU868ChannelAdd+0xc8>)
 800f456:	683b      	ldr	r3, [r7, #0]
 800f458:	006e      	lsls	r6, r5, #1
 800f45a:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 800f45e:	220c      	movs	r2, #12
 800f460:	6821      	ldr	r1, [r4, #0]
 800f462:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f466:	f001 fe4c 	bl	8011102 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 800f46a:	683a      	ldr	r2, [r7, #0]
 800f46c:	442e      	add	r6, r5
 800f46e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f472:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f476:	7273      	strb	r3, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 800f478:	2301      	movs	r3, #1
 800f47a:	fa03 f505 	lsl.w	r5, r3, r5
 800f47e:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 800f482:	431d      	orrs	r5, r3
 800f484:	f8a2 5480 	strh.w	r5, [r2, #1152]	; 0x480
    return LORAMAC_STATUS_OK;
 800f488:	2000      	movs	r0, #0
 800f48a:	e006      	b.n	800f49a <RegionEU868ChannelAdd+0xb6>
        drInvalid = true;
 800f48c:	2601      	movs	r6, #1
 800f48e:	e7c0      	b.n	800f412 <RegionEU868ChannelAdd+0x2e>
            freqInvalid = true;
 800f490:	2301      	movs	r3, #1
 800f492:	e7db      	b.n	800f44c <RegionEU868ChannelAdd+0x68>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800f494:	2006      	movs	r0, #6
 800f496:	e000      	b.n	800f49a <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f498:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800f49a:	b003      	add	sp, #12
 800f49c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800f49e:	2006      	movs	r0, #6
 800f4a0:	e7fb      	b.n	800f49a <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_DATARATE_INVALID;
 800f4a2:	2005      	movs	r0, #5
 800f4a4:	e7f9      	b.n	800f49a <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 800f4a6:	2004      	movs	r0, #4
 800f4a8:	e7f7      	b.n	800f49a <RegionEU868ChannelAdd+0xb6>
 800f4aa:	bf00      	nop
 800f4ac:	20000f30 	.word	0x20000f30

0800f4b0 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 800f4b0:	7801      	ldrb	r1, [r0, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800f4b2:	2902      	cmp	r1, #2
 800f4b4:	d801      	bhi.n	800f4ba <RegionEU868ChannelsRemove+0xa>
    {
        return false;
 800f4b6:	2000      	movs	r0, #0

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
#else
    return false;
#endif /* REGION_EU868 */
}
 800f4b8:	4770      	bx	lr
{
 800f4ba:	b508      	push	{r3, lr}
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 800f4bc:	4b09      	ldr	r3, [pc, #36]	; (800f4e4 <RegionEU868ChannelsRemove+0x34>)
 800f4be:	6818      	ldr	r0, [r3, #0]
 800f4c0:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800f4c4:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800f4c8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	f840 200c 	str.w	r2, [r0, ip]
 800f4d2:	605a      	str	r2, [r3, #4]
 800f4d4:	609a      	str	r2, [r3, #8]
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 800f4d6:	2210      	movs	r2, #16
 800f4d8:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800f4dc:	f7fe ff97 	bl	800e40e <RegionCommonChanDisable>
}
 800f4e0:	bd08      	pop	{r3, pc}
 800f4e2:	bf00      	nop
 800f4e4:	20000f30 	.word	0x20000f30

0800f4e8 <RegionEU868ApplyCFList>:
{
 800f4e8:	b570      	push	{r4, r5, r6, lr}
 800f4ea:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800f4ec:	2350      	movs	r3, #80	; 0x50
 800f4ee:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 800f4f2:	7903      	ldrb	r3, [r0, #4]
 800f4f4:	2b10      	cmp	r3, #16
 800f4f6:	d136      	bne.n	800f566 <RegionEU868ApplyCFList+0x7e>
 800f4f8:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 800f4fa:	6803      	ldr	r3, [r0, #0]
 800f4fc:	7bdd      	ldrb	r5, [r3, #15]
 800f4fe:	2d00      	cmp	r5, #0
 800f500:	d131      	bne.n	800f566 <RegionEU868ApplyCFList+0x7e>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800f502:	2403      	movs	r4, #3
 800f504:	e01b      	b.n	800f53e <RegionEU868ApplyCFList+0x56>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800f506:	6832      	ldr	r2, [r6, #0]
 800f508:	5d53      	ldrb	r3, [r2, r5]
 800f50a:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800f50c:	442a      	add	r2, r5
 800f50e:	7851      	ldrb	r1, [r2, #1]
 800f510:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800f514:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800f516:	7892      	ldrb	r2, [r2, #2]
 800f518:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f51c:	9303      	str	r3, [sp, #12]
            newChannel.Frequency *= 100;
 800f51e:	2264      	movs	r2, #100	; 0x64
 800f520:	fb02 f303 	mul.w	r3, r2, r3
 800f524:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 800f526:	2300      	movs	r3, #0
 800f528:	9304      	str	r3, [sp, #16]
 800f52a:	e011      	b.n	800f550 <RegionEU868ApplyCFList+0x68>
            channelRemove.ChannelId = chanIdx;
 800f52c:	f88d 4000 	strb.w	r4, [sp]
            RegionEU868ChannelsRemove( &channelRemove );
 800f530:	4668      	mov	r0, sp
 800f532:	f7ff ffbd 	bl	800f4b0 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800f536:	3503      	adds	r5, #3
 800f538:	b2ed      	uxtb	r5, r5
 800f53a:	3401      	adds	r4, #1
 800f53c:	b2e4      	uxtb	r4, r4
 800f53e:	2c0f      	cmp	r4, #15
 800f540:	d811      	bhi.n	800f566 <RegionEU868ApplyCFList+0x7e>
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 800f542:	2c07      	cmp	r4, #7
 800f544:	d9df      	bls.n	800f506 <RegionEU868ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 800f546:	2300      	movs	r3, #0
 800f548:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 800f54a:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 800f54e:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 800f550:	9b03      	ldr	r3, [sp, #12]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d0ea      	beq.n	800f52c <RegionEU868ApplyCFList+0x44>
            channelAdd.NewChannel = &newChannel;
 800f556:	ab03      	add	r3, sp, #12
 800f558:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 800f55a:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionEU868ChannelAdd( &channelAdd );
 800f55e:	a801      	add	r0, sp, #4
 800f560:	f7ff ff40 	bl	800f3e4 <RegionEU868ChannelAdd>
 800f564:	e7e7      	b.n	800f536 <RegionEU868ApplyCFList+0x4e>
}
 800f566:	b006      	add	sp, #24
 800f568:	bd70      	pop	{r4, r5, r6, pc}

0800f56a <RegionEU868NewChannelReq>:
{
 800f56a:	b500      	push	{lr}
 800f56c:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 800f56e:	6803      	ldr	r3, [r0, #0]
 800f570:	681a      	ldr	r2, [r3, #0]
 800f572:	b952      	cbnz	r2, 800f58a <RegionEU868NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800f574:	7903      	ldrb	r3, [r0, #4]
 800f576:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 800f57a:	a801      	add	r0, sp, #4
 800f57c:	f7ff ff98 	bl	800f4b0 <RegionEU868ChannelsRemove>
 800f580:	b1d0      	cbz	r0, 800f5b8 <RegionEU868NewChannelReq+0x4e>
    uint8_t status = 0x03;
 800f582:	2003      	movs	r0, #3
}
 800f584:	b005      	add	sp, #20
 800f586:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 800f58a:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800f58c:	7903      	ldrb	r3, [r0, #4]
 800f58e:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 800f592:	a802      	add	r0, sp, #8
 800f594:	f7ff ff26 	bl	800f3e4 <RegionEU868ChannelAdd>
 800f598:	2806      	cmp	r0, #6
 800f59a:	d80b      	bhi.n	800f5b4 <RegionEU868NewChannelReq+0x4a>
 800f59c:	e8df f000 	tbb	[pc, r0]
 800f5a0:	0a0a0a04 	.word	0x0a0a0a04
 800f5a4:	060e      	.short	0x060e
 800f5a6:	08          	.byte	0x08
 800f5a7:	00          	.byte	0x00
 800f5a8:	2003      	movs	r0, #3
 800f5aa:	e7eb      	b.n	800f584 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFD;
 800f5ac:	2001      	movs	r0, #1
                break;
 800f5ae:	e7e9      	b.n	800f584 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 800f5b0:	2000      	movs	r0, #0
                break;
 800f5b2:	e7e7      	b.n	800f584 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 800f5b4:	2000      	movs	r0, #0
                break;
 800f5b6:	e7e5      	b.n	800f584 <RegionEU868NewChannelReq+0x1a>
            status &= 0xFC;
 800f5b8:	2000      	movs	r0, #0
 800f5ba:	e7e3      	b.n	800f584 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFE;
 800f5bc:	2002      	movs	r0, #2
 800f5be:	e7e1      	b.n	800f584 <RegionEU868NewChannelReq+0x1a>

0800f5c0 <RegionEU868SetContinuousWave>:

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 800f5c0:	b538      	push	{r3, r4, r5, lr}
 800f5c2:	4604      	mov	r4, r0
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 800f5c4:	4b12      	ldr	r3, [pc, #72]	; (800f610 <RegionEU868SetContinuousWave+0x50>)
 800f5c6:	6819      	ldr	r1, [r3, #0]
 800f5c8:	4d12      	ldr	r5, [pc, #72]	; (800f614 <RegionEU868SetContinuousWave+0x54>)
 800f5ca:	682b      	ldr	r3, [r5, #0]
 800f5cc:	7802      	ldrb	r2, [r0, #0]
 800f5ce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800f5d2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800f5d6:	7a53      	ldrb	r3, [r2, #9]
 800f5d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f5dc:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800f5e0:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800f5e4:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800f5e8:	f7ff f995 	bl	800e916 <RegionCommonLimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 800f5ec:	682a      	ldr	r2, [r5, #0]
 800f5ee:	7823      	ldrb	r3, [r4, #0]
 800f5f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f5f4:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800f5f8:	68a2      	ldr	r2, [r4, #8]
 800f5fa:	6861      	ldr	r1, [r4, #4]
 800f5fc:	f7ff f8a6 	bl	800e74c <RegionCommonComputeTxPower>
 800f600:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800f602:	4b05      	ldr	r3, [pc, #20]	; (800f618 <RegionEU868SetContinuousWave+0x58>)
 800f604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f606:	89a2      	ldrh	r2, [r4, #12]
 800f608:	4628      	mov	r0, r5
 800f60a:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 800f60c:	bd38      	pop	{r3, r4, r5, pc}
 800f60e:	bf00      	nop
 800f610:	20000f2c 	.word	0x20000f2c
 800f614:	20000f30 	.word	0x20000f30
 800f618:	08014bf0 	.word	0x08014bf0

0800f61c <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 800f61c:	1a88      	subs	r0, r1, r2
 800f61e:	b240      	sxtb	r0, r0

    if( datarate < 0 )
 800f620:	2800      	cmp	r0, #0
 800f622:	db01      	blt.n	800f628 <RegionEU868ApplyDrOffset+0xc>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_EU868 */
}
 800f624:	b2c0      	uxtb	r0, r0
 800f626:	4770      	bx	lr
        datarate = DR_0;
 800f628:	2000      	movs	r0, #0
 800f62a:	e7fb      	b.n	800f624 <RegionEU868ApplyDrOffset+0x8>

0800f62c <VerifyRfFreq>:
    }
    return txPowerResult;
}

static bool VerifyRfFreq( uint32_t freq )
{
 800f62c:	b510      	push	{r4, lr}
 800f62e:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800f630:	4b10      	ldr	r3, [pc, #64]	; (800f674 <VerifyRfFreq+0x48>)
 800f632:	6a1b      	ldr	r3, [r3, #32]
 800f634:	4798      	blx	r3
 800f636:	b1c8      	cbz	r0, 800f66c <VerifyRfFreq+0x40>
    {
        return false;
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 800f638:	4b0f      	ldr	r3, [pc, #60]	; (800f678 <VerifyRfFreq+0x4c>)
 800f63a:	4423      	add	r3, r4
 800f63c:	4a0f      	ldr	r2, [pc, #60]	; (800f67c <VerifyRfFreq+0x50>)
 800f63e:	4293      	cmp	r3, r2
 800f640:	d813      	bhi.n	800f66a <VerifyRfFreq+0x3e>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 800f642:	f102 42df 	add.w	r2, r2, #1870659584	; 0x6f800000
 800f646:	f502 12c8 	add.w	r2, r2, #1638400	; 0x190000
 800f64a:	f202 7245 	addw	r2, r2, #1861	; 0x745
 800f64e:	fba2 1203 	umull	r1, r2, r2, r3
 800f652:	0c92      	lsrs	r2, r2, #18
 800f654:	490a      	ldr	r1, [pc, #40]	; (800f680 <VerifyRfFreq+0x54>)
 800f656:	fb01 3212 	mls	r2, r1, r2, r3
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 800f65a:	b942      	cbnz	r2, 800f66e <VerifyRfFreq+0x42>
    {
        return false;
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 800f65c:	4b09      	ldr	r3, [pc, #36]	; (800f684 <VerifyRfFreq+0x58>)
 800f65e:	4423      	add	r3, r4
 800f660:	4a09      	ldr	r2, [pc, #36]	; (800f688 <VerifyRfFreq+0x5c>)
 800f662:	4293      	cmp	r3, r2
 800f664:	d902      	bls.n	800f66c <VerifyRfFreq+0x40>
    {
        return false;
 800f666:	2000      	movs	r0, #0
 800f668:	e000      	b.n	800f66c <VerifyRfFreq+0x40>
        return false;
 800f66a:	2000      	movs	r0, #0
    }
    return true;
}
 800f66c:	bd10      	pop	{r4, pc}
        return false;
 800f66e:	2000      	movs	r0, #0
 800f670:	e7fc      	b.n	800f66c <VerifyRfFreq+0x40>
 800f672:	bf00      	nop
 800f674:	08014bf0 	.word	0x08014bf0
 800f678:	c8f78f60 	.word	0xc8f78f60
 800f67c:	00401640 	.word	0x00401640
 800f680:	000927c0 	.word	0x000927c0
 800f684:	ca37fea0 	.word	0xca37fea0
 800f688:	01808580 	.word	0x01808580

0800f68c <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800f68c:	b570      	push	{r4, r5, r6, lr}
 800f68e:	b084      	sub	sp, #16
 800f690:	460c      	mov	r4, r1
    int8_t phyDr = DataratesUS915[datarate];
 800f692:	4b0a      	ldr	r3, [pc, #40]	; (800f6bc <GetTimeOnAir+0x30>)
 800f694:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 800f696:	490a      	ldr	r1, [pc, #40]	; (800f6c0 <GetTimeOnAir+0x34>)
 800f698:	f7ff f942 	bl	800e920 <RegionCommonGetBandwidth>
 800f69c:	4601      	mov	r1, r0

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800f69e:	4b09      	ldr	r3, [pc, #36]	; (800f6c4 <GetTimeOnAir+0x38>)
 800f6a0:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800f6a2:	2001      	movs	r0, #1
 800f6a4:	9003      	str	r0, [sp, #12]
 800f6a6:	b2e4      	uxtb	r4, r4
 800f6a8:	9402      	str	r4, [sp, #8]
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	9201      	str	r2, [sp, #4]
 800f6ae:	2208      	movs	r2, #8
 800f6b0:	9200      	str	r2, [sp, #0]
 800f6b2:	4603      	mov	r3, r0
 800f6b4:	4632      	mov	r2, r6
 800f6b6:	47a8      	blx	r5
}
 800f6b8:	b004      	add	sp, #16
 800f6ba:	bd70      	pop	{r4, r5, r6, pc}
 800f6bc:	0801465c 	.word	0x0801465c
 800f6c0:	08014608 	.word	0x08014608
 800f6c4:	08014bf0 	.word	0x08014bf0

0800f6c8 <LimitTxPower>:
{
 800f6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6ca:	4606      	mov	r6, r0
 800f6cc:	4615      	mov	r5, r2
 800f6ce:	461f      	mov	r7, r3
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 800f6d0:	f7ff f921 	bl	800e916 <RegionCommonLimitTxPower>
    if( datarate == DR_4 )
 800f6d4:	2d04      	cmp	r5, #4
 800f6d6:	d105      	bne.n	800f6e4 <LimitTxPower+0x1c>
        txPowerResult = MAX( txPower, TX_POWER_2 );
 800f6d8:	4634      	mov	r4, r6
 800f6da:	2e02      	cmp	r6, #2
 800f6dc:	bfb8      	it	lt
 800f6de:	2402      	movlt	r4, #2
}
 800f6e0:	4620      	mov	r0, r4
 800f6e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f6e4:	4604      	mov	r4, r0
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 800f6e6:	2204      	movs	r2, #4
 800f6e8:	2100      	movs	r1, #0
 800f6ea:	4638      	mov	r0, r7
 800f6ec:	f7fe fea8 	bl	800e440 <RegionCommonCountChannels>
 800f6f0:	2831      	cmp	r0, #49	; 0x31
 800f6f2:	d8f5      	bhi.n	800f6e0 <LimitTxPower+0x18>
            txPowerResult = MAX( txPower, TX_POWER_5 );
 800f6f4:	4634      	mov	r4, r6
 800f6f6:	2e05      	cmp	r6, #5
 800f6f8:	bfb8      	it	lt
 800f6fa:	2405      	movlt	r4, #5
 800f6fc:	e7f0      	b.n	800f6e0 <LimitTxPower+0x18>
	...

0800f700 <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 800f700:	b500      	push	{lr}
 800f702:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800f704:	2300      	movs	r3, #0
 800f706:	9304      	str	r3, [sp, #16]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 800f708:	7803      	ldrb	r3, [r0, #0]
 800f70a:	3b01      	subs	r3, #1
 800f70c:	2b38      	cmp	r3, #56	; 0x38
 800f70e:	d820      	bhi.n	800f752 <RegionUS915GetPhyParam+0x52>
 800f710:	e8df f003 	tbb	[pc, r3]
 800f714:	1f1f1f1d 	.word	0x1f1f1f1d
 800f718:	1f1f1f1f 	.word	0x1f1f1f1f
 800f71c:	3f3c1f1f 	.word	0x3f3c1f1f
 800f720:	4e1f4842 	.word	0x4e1f4842
 800f724:	5e5a5652 	.word	0x5e5a5652
 800f728:	6f1f6662 	.word	0x6f1f6662
 800f72c:	817b7572 	.word	0x817b7572
 800f730:	881f1f84 	.word	0x881f1f84
 800f734:	1f1f248b 	.word	0x1f1f248b
 800f738:	1f1f1f1f 	.word	0x1f1f1f1f
 800f73c:	1f1f1f1f 	.word	0x1f1f1f1f
 800f740:	8e1f1f1f 	.word	0x8e1f1f1f
 800f744:	1fa29f95 	.word	0x1fa29f95
 800f748:	b2afaca5 	.word	0xb2afaca5
 800f74c:	b8          	.byte	0xb8
 800f74d:	00          	.byte	0x00
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 800f74e:	2308      	movs	r3, #8
 800f750:	9304      	str	r3, [sp, #16]
            break;
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 800f752:	9804      	ldr	r0, [sp, #16]
 800f754:	9005      	str	r0, [sp, #20]
}
 800f756:	b007      	add	sp, #28
 800f758:	f85d fb04 	ldr.w	pc, [sp], #4
                .CurrentDr = getPhy->Datarate,
 800f75c:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800f760:	f88d 3004 	strb.w	r3, [sp, #4]
 800f764:	2304      	movs	r3, #4
 800f766:	f88d 3005 	strb.w	r3, [sp, #5]
 800f76a:	2300      	movs	r3, #0
 800f76c:	f88d 3006 	strb.w	r3, [sp, #6]
 800f770:	2348      	movs	r3, #72	; 0x48
 800f772:	f88d 3007 	strb.w	r3, [sp, #7]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800f776:	4b47      	ldr	r3, [pc, #284]	; (800f894 <RegionUS915GetPhyParam+0x194>)
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	f503 6290 	add.w	r2, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800f77e:	9202      	str	r2, [sp, #8]
 800f780:	9303      	str	r3, [sp, #12]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800f782:	a801      	add	r0, sp, #4
 800f784:	f7ff f8a8 	bl	800e8d8 <RegionCommonGetNextLowerTxDr>
 800f788:	9004      	str	r0, [sp, #16]
            break;
 800f78a:	e7e2      	b.n	800f752 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800f78c:	2340      	movs	r3, #64	; 0x40
 800f78e:	9304      	str	r3, [sp, #16]
            break;
 800f790:	e7df      	b.n	800f752 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800f792:	2320      	movs	r3, #32
 800f794:	9304      	str	r3, [sp, #16]
            break;
 800f796:	e7dc      	b.n	800f752 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 800f798:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800f79c:	4a3e      	ldr	r2, [pc, #248]	; (800f898 <RegionUS915GetPhyParam+0x198>)
 800f79e:	5cd3      	ldrb	r3, [r2, r3]
 800f7a0:	9304      	str	r3, [sp, #16]
            break;
 800f7a2:	e7d6      	b.n	800f752 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 800f7a4:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800f7a8:	4a3c      	ldr	r2, [pc, #240]	; (800f89c <RegionUS915GetPhyParam+0x19c>)
 800f7aa:	5cd3      	ldrb	r3, [r2, r3]
 800f7ac:	9304      	str	r3, [sp, #16]
            break;
 800f7ae:	e7d0      	b.n	800f752 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_MAX_RX_WINDOW;
 800f7b0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800f7b4:	9304      	str	r3, [sp, #16]
            break;
 800f7b6:	e7cc      	b.n	800f752 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800f7b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f7bc:	9304      	str	r3, [sp, #16]
            break;
 800f7be:	e7c8      	b.n	800f752 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800f7c0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800f7c4:	9304      	str	r3, [sp, #16]
            break;
 800f7c6:	e7c4      	b.n	800f752 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800f7c8:	f241 3388 	movw	r3, #5000	; 0x1388
 800f7cc:	9304      	str	r3, [sp, #16]
            break;
 800f7ce:	e7c0      	b.n	800f752 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800f7d0:	f241 7370 	movw	r3, #6000	; 0x1770
 800f7d4:	9304      	str	r3, [sp, #16]
            break;
 800f7d6:	e7bc      	b.n	800f752 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 800f7d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f7dc:	9304      	str	r3, [sp, #16]
            break;
 800f7de:	e7b8      	b.n	800f752 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 800f7e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800f7e4:	482e      	ldr	r0, [pc, #184]	; (800f8a0 <RegionUS915GetPhyParam+0x1a0>)
 800f7e6:	f001 fc7f 	bl	80110e8 <randr>
 800f7ea:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800f7ee:	9004      	str	r0, [sp, #16]
            break;
 800f7f0:	e7af      	b.n	800f752 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_RX_WND_2_FREQ;
 800f7f2:	4b2c      	ldr	r3, [pc, #176]	; (800f8a4 <RegionUS915GetPhyParam+0x1a4>)
 800f7f4:	9304      	str	r3, [sp, #16]
            break;
 800f7f6:	e7ac      	b.n	800f752 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_RX_WND_2_DR;
 800f7f8:	2308      	movs	r3, #8
 800f7fa:	9304      	str	r3, [sp, #16]
            break;
 800f7fc:	e7a9      	b.n	800f752 <RegionUS915GetPhyParam+0x52>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800f7fe:	4b25      	ldr	r3, [pc, #148]	; (800f894 <RegionUS915GetPhyParam+0x194>)
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800f806:	9304      	str	r3, [sp, #16]
            break;
 800f808:	e7a3      	b.n	800f752 <RegionUS915GetPhyParam+0x52>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800f80a:	4b22      	ldr	r3, [pc, #136]	; (800f894 <RegionUS915GetPhyParam+0x194>)
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 800f812:	9304      	str	r3, [sp, #16]
            break;
 800f814:	e79d      	b.n	800f752 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_MAX_NB_CHANNELS;
 800f816:	2348      	movs	r3, #72	; 0x48
 800f818:	9304      	str	r3, [sp, #16]
            break;
 800f81a:	e79a      	b.n	800f752 <RegionUS915GetPhyParam+0x52>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800f81c:	4b1d      	ldr	r3, [pc, #116]	; (800f894 <RegionUS915GetPhyParam+0x194>)
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	9304      	str	r3, [sp, #16]
            break;
 800f822:	e796      	b.n	800f752 <RegionUS915GetPhyParam+0x52>
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 800f824:	4b20      	ldr	r3, [pc, #128]	; (800f8a8 <RegionUS915GetPhyParam+0x1a8>)
 800f826:	9304      	str	r3, [sp, #16]
            break;
 800f828:	e793      	b.n	800f752 <RegionUS915GetPhyParam+0x52>
            phyParam.fValue = 0;
 800f82a:	2300      	movs	r3, #0
 800f82c:	9304      	str	r3, [sp, #16]
            break;
 800f82e:	e790      	b.n	800f752 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800f830:	4a1e      	ldr	r2, [pc, #120]	; (800f8ac <RegionUS915GetPhyParam+0x1ac>)
 800f832:	491c      	ldr	r1, [pc, #112]	; (800f8a4 <RegionUS915GetPhyParam+0x1a4>)
 800f834:	7900      	ldrb	r0, [r0, #4]
 800f836:	f7fe fcd9 	bl	800e1ec <RegionBaseUSCalcDownlinkFrequency>
 800f83a:	9004      	str	r0, [sp, #16]
            break;
 800f83c:	e789      	b.n	800f752 <RegionUS915GetPhyParam+0x52>
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 800f83e:	2317      	movs	r3, #23
 800f840:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 800f844:	2305      	movs	r3, #5
 800f846:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 800f84a:	2303      	movs	r3, #3
 800f84c:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 800f850:	e77f      	b.n	800f752 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 800f852:	2308      	movs	r3, #8
 800f854:	9304      	str	r3, [sp, #16]
            break;
 800f856:	e77c      	b.n	800f752 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 800f858:	2308      	movs	r3, #8
 800f85a:	9304      	str	r3, [sp, #16]
            break;
 800f85c:	e779      	b.n	800f752 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800f85e:	4a13      	ldr	r2, [pc, #76]	; (800f8ac <RegionUS915GetPhyParam+0x1ac>)
 800f860:	4910      	ldr	r1, [pc, #64]	; (800f8a4 <RegionUS915GetPhyParam+0x1a4>)
 800f862:	7900      	ldrb	r0, [r0, #4]
 800f864:	f7fe fcc2 	bl	800e1ec <RegionBaseUSCalcDownlinkFrequency>
 800f868:	9004      	str	r0, [sp, #16]
            break;
 800f86a:	e772      	b.n	800f752 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 800f86c:	2308      	movs	r3, #8
 800f86e:	9304      	str	r3, [sp, #16]
            break;
 800f870:	e76f      	b.n	800f752 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 800f872:	2308      	movs	r3, #8
 800f874:	9304      	str	r3, [sp, #16]
            break;
 800f876:	e76c      	b.n	800f752 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 800f878:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800f87c:	4a0c      	ldr	r2, [pc, #48]	; (800f8b0 <RegionUS915GetPhyParam+0x1b0>)
 800f87e:	5cd3      	ldrb	r3, [r2, r3]
 800f880:	9304      	str	r3, [sp, #16]
            break;
 800f882:	e766      	b.n	800f752 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 800f884:	490b      	ldr	r1, [pc, #44]	; (800f8b4 <RegionUS915GetPhyParam+0x1b4>)
 800f886:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800f88a:	f7ff f849 	bl	800e920 <RegionCommonGetBandwidth>
 800f88e:	9004      	str	r0, [sp, #16]
            break;
 800f890:	e75f      	b.n	800f752 <RegionUS915GetPhyParam+0x52>
 800f892:	bf00      	nop
 800f894:	20000f38 	.word	0x20000f38
 800f898:	0801467c 	.word	0x0801467c
 800f89c:	0801466c 	.word	0x0801466c
 800f8a0:	fffffc18 	.word	0xfffffc18
 800f8a4:	370870a0 	.word	0x370870a0
 800f8a8:	4200999a 	.word	0x4200999a
 800f8ac:	000927c0 	.word	0x000927c0
 800f8b0:	0801465c 	.word	0x0801465c
 800f8b4:	08014608 	.word	0x08014608

0800f8b8 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800f8b8:	b510      	push	{r4, lr}
 800f8ba:	b082      	sub	sp, #8
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800f8bc:	4b0b      	ldr	r3, [pc, #44]	; (800f8ec <RegionUS915SetBandTxDone+0x34>)
 800f8be:	681c      	ldr	r4, [r3, #0]
 800f8c0:	4b0b      	ldr	r3, [pc, #44]	; (800f8f0 <RegionUS915SetBandTxDone+0x38>)
 800f8c2:	681a      	ldr	r2, [r3, #0]
 800f8c4:	7803      	ldrb	r3, [r0, #0]
 800f8c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f8ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f8ce:	7a5b      	ldrb	r3, [r3, #9]
 800f8d0:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800f8d4:	6903      	ldr	r3, [r0, #16]
 800f8d6:	9300      	str	r3, [sp, #0]
 800f8d8:	68c3      	ldr	r3, [r0, #12]
 800f8da:	7842      	ldrb	r2, [r0, #1]
 800f8dc:	6881      	ldr	r1, [r0, #8]
 800f8de:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 800f8e2:	f7fe fdd2 	bl	800e48a <RegionCommonSetBandTxDone>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 800f8e6:	b002      	add	sp, #8
 800f8e8:	bd10      	pop	{r4, pc}
 800f8ea:	bf00      	nop
 800f8ec:	20000f34 	.word	0x20000f34
 800f8f0:	20000f38 	.word	0x20000f38

0800f8f4 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 800f8f4:	b510      	push	{r4, lr}
 800f8f6:	b086      	sub	sp, #24
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 800f8f8:	2301      	movs	r3, #1
 800f8fa:	f8ad 3000 	strh.w	r3, [sp]
 800f8fe:	2300      	movs	r3, #0
 800f900:	f88d 3002 	strb.w	r3, [sp, #2]
 800f904:	9301      	str	r3, [sp, #4]
 800f906:	9302      	str	r3, [sp, #8]
 800f908:	9303      	str	r3, [sp, #12]
 800f90a:	9304      	str	r3, [sp, #16]
 800f90c:	f88d 3014 	strb.w	r3, [sp, #20]
    {
       US915_BAND0
    };

    switch( params->Type )
 800f910:	7a04      	ldrb	r4, [r0, #8]
 800f912:	b17c      	cbz	r4, 800f934 <RegionUS915InitDefaults+0x40>
 800f914:	3c01      	subs	r4, #1
 800f916:	b2e4      	uxtb	r4, r4
 800f918:	2c01      	cmp	r4, #1
 800f91a:	f200 8082 	bhi.w	800fa22 <RegionUS915InitDefaults+0x12e>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800f91e:	4b42      	ldr	r3, [pc, #264]	; (800fa28 <RegionUS915InitDefaults+0x134>)
 800f920:	6818      	ldr	r0, [r3, #0]
 800f922:	2206      	movs	r2, #6
 800f924:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 800f928:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800f92c:	f7fe fd9e 	bl	800e46c <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800f930:	2300      	movs	r3, #0
 800f932:	e074      	b.n	800fa1e <RegionUS915InitDefaults+0x12a>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800f934:	6803      	ldr	r3, [r0, #0]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d073      	beq.n	800fa22 <RegionUS915InitDefaults+0x12e>
 800f93a:	6842      	ldr	r2, [r0, #4]
 800f93c:	2a00      	cmp	r2, #0
 800f93e:	d070      	beq.n	800fa22 <RegionUS915InitDefaults+0x12e>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800f940:	493a      	ldr	r1, [pc, #232]	; (800fa2c <RegionUS915InitDefaults+0x138>)
 800f942:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800f944:	4938      	ldr	r1, [pc, #224]	; (800fa28 <RegionUS915InitDefaults+0x134>)
 800f946:	600a      	str	r2, [r1, #0]
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800f948:	2200      	movs	r2, #0
 800f94a:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            RegionNvmGroup1->JoinTrialsCounter = 0;
 800f94e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 800f952:	2218      	movs	r2, #24
 800f954:	4669      	mov	r1, sp
 800f956:	4618      	mov	r0, r3
 800f958:	f001 fbd3 	bl	8011102 <memcpy1>
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800f95c:	e011      	b.n	800f982 <RegionUS915InitDefaults+0x8e>
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 800f95e:	4b32      	ldr	r3, [pc, #200]	; (800fa28 <RegionUS915InitDefaults+0x134>)
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	4933      	ldr	r1, [pc, #204]	; (800fa30 <RegionUS915InitDefaults+0x13c>)
 800f964:	4a33      	ldr	r2, [pc, #204]	; (800fa34 <RegionUS915InitDefaults+0x140>)
 800f966:	fb01 2204 	mla	r2, r1, r4, r2
 800f96a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800f96e:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 800f972:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 800f976:	2230      	movs	r2, #48	; 0x30
 800f978:	7202      	strb	r2, [r0, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800f97a:	2200      	movs	r2, #0
 800f97c:	7242      	strb	r2, [r0, #9]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800f97e:	3401      	adds	r4, #1
 800f980:	b2e4      	uxtb	r4, r4
 800f982:	2c3f      	cmp	r4, #63	; 0x3f
 800f984:	d9eb      	bls.n	800f95e <RegionUS915InitDefaults+0x6a>
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800f986:	2340      	movs	r3, #64	; 0x40
 800f988:	2b47      	cmp	r3, #71	; 0x47
 800f98a:	d814      	bhi.n	800f9b6 <RegionUS915InitDefaults+0xc2>
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 800f98c:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
 800f990:	4a25      	ldr	r2, [pc, #148]	; (800fa28 <RegionUS915InitDefaults+0x134>)
 800f992:	6812      	ldr	r2, [r2, #0]
 800f994:	4c28      	ldr	r4, [pc, #160]	; (800fa38 <RegionUS915InitDefaults+0x144>)
 800f996:	4929      	ldr	r1, [pc, #164]	; (800fa3c <RegionUS915InitDefaults+0x148>)
 800f998:	fb04 1100 	mla	r1, r4, r0, r1
 800f99c:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800f9a0:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 800f9a4:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 800f9a8:	2144      	movs	r1, #68	; 0x44
 800f9aa:	7221      	strb	r1, [r4, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800f9ac:	2100      	movs	r1, #0
 800f9ae:	7261      	strb	r1, [r4, #9]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800f9b0:	3301      	adds	r3, #1
 800f9b2:	b2db      	uxtb	r3, r3
 800f9b4:	e7e8      	b.n	800f988 <RegionUS915InitDefaults+0x94>
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 800f9b6:	4c1c      	ldr	r4, [pc, #112]	; (800fa28 <RegionUS915InitDefaults+0x134>)
 800f9b8:	6820      	ldr	r0, [r4, #0]
 800f9ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f9be:	f8a0 348c 	strh.w	r3, [r0, #1164]	; 0x48c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 800f9c2:	f8a0 348e 	strh.w	r3, [r0, #1166]	; 0x48e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 800f9c6:	f8a0 3490 	strh.w	r3, [r0, #1168]	; 0x490
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 800f9ca:	f8a0 3492 	strh.w	r3, [r0, #1170]	; 0x492
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 800f9ce:	23ff      	movs	r3, #255	; 0xff
 800f9d0:	f8a0 3494 	strh.w	r3, [r0, #1172]	; 0x494
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800f9d4:	2300      	movs	r3, #0
 800f9d6:	f8a0 3496 	strh.w	r3, [r0, #1174]	; 0x496
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800f9da:	2206      	movs	r2, #6
 800f9dc:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 800f9e0:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800f9e4:	f7fe fd42 	bl	800e46c <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800f9e8:	4b10      	ldr	r3, [pc, #64]	; (800fa2c <RegionUS915InitDefaults+0x138>)
 800f9ea:	6818      	ldr	r0, [r3, #0]
 800f9ec:	6821      	ldr	r1, [r4, #0]
 800f9ee:	2206      	movs	r2, #6
 800f9f0:	f501 6190 	add.w	r1, r1, #1152	; 0x480
 800f9f4:	3090      	adds	r0, #144	; 0x90
 800f9f6:	f7fe fd39 	bl	800e46c <RegionCommonChanMaskCopy>
            break;
 800f9fa:	e012      	b.n	800fa22 <RegionUS915InitDefaults+0x12e>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800f9fc:	4a0b      	ldr	r2, [pc, #44]	; (800fa2c <RegionUS915InitDefaults+0x138>)
 800f9fe:	6811      	ldr	r1, [r2, #0]
 800fa00:	4a09      	ldr	r2, [pc, #36]	; (800fa28 <RegionUS915InitDefaults+0x134>)
 800fa02:	6812      	ldr	r2, [r2, #0]
 800fa04:	f503 7010 	add.w	r0, r3, #576	; 0x240
 800fa08:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 800fa0c:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800fa10:	f831 4010 	ldrh.w	r4, [r1, r0, lsl #1]
 800fa14:	4022      	ands	r2, r4
 800fa16:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800fa1a:	3301      	adds	r3, #1
 800fa1c:	b2db      	uxtb	r3, r3
 800fa1e:	2b05      	cmp	r3, #5
 800fa20:	d9ec      	bls.n	800f9fc <RegionUS915InitDefaults+0x108>
        {
            break;
        }
    }
#endif /* REGION_US915 */
}
 800fa22:	b006      	add	sp, #24
 800fa24:	bd10      	pop	{r4, pc}
 800fa26:	bf00      	nop
 800fa28:	20000f38 	.word	0x20000f38
 800fa2c:	20000f34 	.word	0x20000f34
 800fa30:	00030d40 	.word	0x00030d40
 800fa34:	35c80160 	.word	0x35c80160
 800fa38:	00186a00 	.word	0x00186a00
 800fa3c:	35d2afc0 	.word	0x35d2afc0

0800fa40 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800fa40:	b508      	push	{r3, lr}
#if defined( REGION_US915 )
    switch( phyAttribute )
 800fa42:	290a      	cmp	r1, #10
 800fa44:	d829      	bhi.n	800fa9a <RegionUS915Verify+0x5a>
 800fa46:	e8df f001 	tbb	[pc, r1]
 800fa4a:	2806      	.short	0x2806
 800fa4c:	0a282828 	.word	0x0a282828
 800fa50:	1e28140a 	.word	0x1e28140a
 800fa54:	1e          	.byte	0x1e
 800fa55:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 800fa56:	6800      	ldr	r0, [r0, #0]
 800fa58:	f7ff fde8 	bl	800f62c <VerifyRfFreq>
 800fa5c:	e01e      	b.n	800fa9c <RegionUS915Verify+0x5c>
        }
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
        case PHY_TX_DR:
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 800fa5e:	2204      	movs	r2, #4
 800fa60:	2100      	movs	r1, #0
 800fa62:	f990 0000 	ldrsb.w	r0, [r0]
 800fa66:	f7fe fc90 	bl	800e38a <RegionCommonValueInRange>
 800fa6a:	3800      	subs	r0, #0
 800fa6c:	bf18      	it	ne
 800fa6e:	2001      	movne	r0, #1
 800fa70:	e014      	b.n	800fa9c <RegionUS915Verify+0x5c>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 800fa72:	220d      	movs	r2, #13
 800fa74:	2108      	movs	r1, #8
 800fa76:	f990 0000 	ldrsb.w	r0, [r0]
 800fa7a:	f7fe fc86 	bl	800e38a <RegionCommonValueInRange>
 800fa7e:	3800      	subs	r0, #0
 800fa80:	bf18      	it	ne
 800fa82:	2001      	movne	r0, #1
 800fa84:	e00a      	b.n	800fa9c <RegionUS915Verify+0x5c>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 800fa86:	220e      	movs	r2, #14
 800fa88:	2100      	movs	r1, #0
 800fa8a:	f990 0000 	ldrsb.w	r0, [r0]
 800fa8e:	f7fe fc7c 	bl	800e38a <RegionCommonValueInRange>
 800fa92:	3800      	subs	r0, #0
 800fa94:	bf18      	it	ne
 800fa96:	2001      	movne	r0, #1
 800fa98:	e000      	b.n	800fa9c <RegionUS915Verify+0x5c>
    switch( phyAttribute )
 800fa9a:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_US915 */
}
 800fa9c:	bd08      	pop	{r3, pc}
	...

0800faa0 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 800faa0:	7903      	ldrb	r3, [r0, #4]
 800faa2:	2b10      	cmp	r3, #16
 800faa4:	d138      	bne.n	800fb18 <RegionUS915ApplyCFList+0x78>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 800faa6:	6803      	ldr	r3, [r0, #0]
 800faa8:	7bdb      	ldrb	r3, [r3, #15]
 800faaa:	2b01      	cmp	r3, #1
 800faac:	d134      	bne.n	800fb18 <RegionUS915ApplyCFList+0x78>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800faae:	2200      	movs	r2, #0
 800fab0:	4613      	mov	r3, r2
 800fab2:	2a04      	cmp	r2, #4
 800fab4:	d82f      	bhi.n	800fb16 <RegionUS915ApplyCFList+0x76>
{
 800fab6:	b530      	push	{r4, r5, lr}
 800fab8:	e012      	b.n	800fae0 <RegionUS915ApplyCFList+0x40>
        if( chMaskItr == 4 )
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 800faba:	4d18      	ldr	r5, [pc, #96]	; (800fb1c <RegionUS915ApplyCFList+0x7c>)
 800fabc:	682d      	ldr	r5, [r5, #0]
 800fabe:	f501 7c10 	add.w	ip, r1, #576	; 0x240
 800fac2:	f834 401c 	ldrh.w	r4, [r4, ip, lsl #1]
 800fac6:	3148      	adds	r1, #72	; 0x48
 800fac8:	f835 c011 	ldrh.w	ip, [r5, r1, lsl #1]
 800facc:	ea04 040c 	and.w	r4, r4, ip
 800fad0:	f825 4011 	strh.w	r4, [r5, r1, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800fad4:	3301      	adds	r3, #1
 800fad6:	b2db      	uxtb	r3, r3
 800fad8:	3202      	adds	r2, #2
 800fada:	b2d2      	uxtb	r2, r2
 800fadc:	2b04      	cmp	r3, #4
 800fade:	d819      	bhi.n	800fb14 <RegionUS915ApplyCFList+0x74>
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 800fae0:	6805      	ldr	r5, [r0, #0]
 800fae2:	490f      	ldr	r1, [pc, #60]	; (800fb20 <RegionUS915ApplyCFList+0x80>)
 800fae4:	680c      	ldr	r4, [r1, #0]
 800fae6:	4619      	mov	r1, r3
 800fae8:	f815 c002 	ldrb.w	ip, [r5, r2]
 800faec:	f503 7510 	add.w	r5, r3, #576	; 0x240
 800faf0:	f824 c015 	strh.w	ip, [r4, r5, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 800faf4:	f8d0 e000 	ldr.w	lr, [r0]
 800faf8:	4496      	add	lr, r2
 800fafa:	f89e e001 	ldrb.w	lr, [lr, #1]
 800fafe:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
 800fb02:	f824 c015 	strh.w	ip, [r4, r5, lsl #1]
        if( chMaskItr == 4 )
 800fb06:	2b04      	cmp	r3, #4
 800fb08:	d1d7      	bne.n	800faba <RegionUS915ApplyCFList+0x1a>
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 800fb0a:	fa5f fc8c 	uxtb.w	ip, ip
 800fb0e:	f824 c015 	strh.w	ip, [r4, r5, lsl #1]
 800fb12:	e7d2      	b.n	800faba <RegionUS915ApplyCFList+0x1a>
    }
#endif /* REGION_US915 */
}
 800fb14:	bd30      	pop	{r4, r5, pc}
 800fb16:	4770      	bx	lr
 800fb18:	4770      	bx	lr
 800fb1a:	bf00      	nop
 800fb1c:	20000f34 	.word	0x20000f34
 800fb20:	20000f38 	.word	0x20000f38

0800fb24 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800fb24:	b570      	push	{r4, r5, r6, lr}
 800fb26:	4605      	mov	r5, r0
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 800fb28:	2204      	movs	r2, #4
 800fb2a:	2100      	movs	r1, #0
 800fb2c:	6800      	ldr	r0, [r0, #0]
 800fb2e:	f7fe fc87 	bl	800e440 <RegionCommonCountChannels>

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 800fb32:	2801      	cmp	r0, #1
 800fb34:	d033      	beq.n	800fb9e <RegionUS915ChanMaskSet+0x7a>
        ( nbChannels > 0 ) )
    {
        return false;
    }

    switch( chanMaskSet->ChannelsMaskType )
 800fb36:	792c      	ldrb	r4, [r5, #4]
 800fb38:	b11c      	cbz	r4, 800fb42 <RegionUS915ChanMaskSet+0x1e>
 800fb3a:	2c01      	cmp	r4, #1
 800fb3c:	d025      	beq.n	800fb8a <RegionUS915ChanMaskSet+0x66>
 800fb3e:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 800fb40:	bd70      	pop	{r4, r5, r6, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800fb42:	4e18      	ldr	r6, [pc, #96]	; (800fba4 <RegionUS915ChanMaskSet+0x80>)
 800fb44:	6830      	ldr	r0, [r6, #0]
 800fb46:	2206      	movs	r2, #6
 800fb48:	6829      	ldr	r1, [r5, #0]
 800fb4a:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800fb4e:	f7fe fc8d 	bl	800e46c <RegionCommonChanMaskCopy>
            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 800fb52:	6835      	ldr	r5, [r6, #0]
 800fb54:	f895 3494 	ldrb.w	r3, [r5, #1172]	; 0x494
 800fb58:	f8a5 3494 	strh.w	r3, [r5, #1172]	; 0x494
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800fb5c:	2300      	movs	r3, #0
 800fb5e:	f8a5 3496 	strh.w	r3, [r5, #1174]	; 0x496
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800fb62:	e00e      	b.n	800fb82 <RegionUS915ChanMaskSet+0x5e>
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800fb64:	4b10      	ldr	r3, [pc, #64]	; (800fba8 <RegionUS915ChanMaskSet+0x84>)
 800fb66:	681a      	ldr	r2, [r3, #0]
 800fb68:	f504 7310 	add.w	r3, r4, #576	; 0x240
 800fb6c:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 800fb70:	f104 0148 	add.w	r1, r4, #72	; 0x48
 800fb74:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
 800fb78:	4003      	ands	r3, r0
 800fb7a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800fb7e:	3401      	adds	r4, #1
 800fb80:	b2e4      	uxtb	r4, r4
 800fb82:	2c05      	cmp	r4, #5
 800fb84:	d9ee      	bls.n	800fb64 <RegionUS915ChanMaskSet+0x40>
    return true;
 800fb86:	2001      	movs	r0, #1
 800fb88:	e7da      	b.n	800fb40 <RegionUS915ChanMaskSet+0x1c>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800fb8a:	4b06      	ldr	r3, [pc, #24]	; (800fba4 <RegionUS915ChanMaskSet+0x80>)
 800fb8c:	6818      	ldr	r0, [r3, #0]
 800fb8e:	2206      	movs	r2, #6
 800fb90:	6829      	ldr	r1, [r5, #0]
 800fb92:	f200 408c 	addw	r0, r0, #1164	; 0x48c
 800fb96:	f7fe fc69 	bl	800e46c <RegionCommonChanMaskCopy>
    return true;
 800fb9a:	2001      	movs	r0, #1
            break;
 800fb9c:	e7d0      	b.n	800fb40 <RegionUS915ChanMaskSet+0x1c>
        return false;
 800fb9e:	2000      	movs	r0, #0
 800fba0:	e7ce      	b.n	800fb40 <RegionUS915ChanMaskSet+0x1c>
 800fba2:	bf00      	nop
 800fba4:	20000f38 	.word	0x20000f38
 800fba8:	20000f34 	.word	0x20000f34

0800fbac <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800fbac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbae:	b083      	sub	sp, #12
 800fbb0:	460e      	mov	r6, r1
 800fbb2:	4617      	mov	r7, r2
 800fbb4:	461c      	mov	r4, r3
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 800fbb6:	280d      	cmp	r0, #13
 800fbb8:	bfa8      	it	ge
 800fbba:	200d      	movge	r0, #13
 800fbbc:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 800fbbe:	4d0f      	ldr	r5, [pc, #60]	; (800fbfc <RegionUS915ComputeRxWindowParameters+0x50>)
 800fbc0:	4629      	mov	r1, r5
 800fbc2:	f7fe fead 	bl	800e920 <RegionCommonGetBandwidth>
 800fbc6:	70a0      	strb	r0, [r4, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 800fbc8:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800fbcc:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 800fbd0:	4a0b      	ldr	r2, [pc, #44]	; (800fc00 <RegionUS915ComputeRxWindowParameters+0x54>)
 800fbd2:	5cd0      	ldrb	r0, [r2, r3]
 800fbd4:	f7fe fd70 	bl	800e6b8 <RegionCommonComputeSymbolTimeLoRa>
 800fbd8:	4605      	mov	r5, r0

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800fbda:	4b0a      	ldr	r3, [pc, #40]	; (800fc04 <RegionUS915ComputeRxWindowParameters+0x58>)
 800fbdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fbde:	4798      	blx	r3
 800fbe0:	4603      	mov	r3, r0
 800fbe2:	f104 020c 	add.w	r2, r4, #12
 800fbe6:	9201      	str	r2, [sp, #4]
 800fbe8:	3408      	adds	r4, #8
 800fbea:	9400      	str	r4, [sp, #0]
 800fbec:	463a      	mov	r2, r7
 800fbee:	4631      	mov	r1, r6
 800fbf0:	4628      	mov	r0, r5
 800fbf2:	f7fe fd6f 	bl	800e6d4 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 800fbf6:	b003      	add	sp, #12
 800fbf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbfa:	bf00      	nop
 800fbfc:	08014608 	.word	0x08014608
 800fc00:	0801465c 	.word	0x0801465c
 800fc04:	08014bf0 	.word	0x08014bf0

0800fc08 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800fc08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fc0c:	b08b      	sub	sp, #44	; 0x2c
 800fc0e:	4604      	mov	r4, r0
 800fc10:	460d      	mov	r5, r1
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 800fc12:	f990 6001 	ldrsb.w	r6, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800fc16:	6847      	ldr	r7, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800fc18:	4b22      	ldr	r3, [pc, #136]	; (800fca4 <RegionUS915RxConfig+0x9c>)
 800fc1a:	685b      	ldr	r3, [r3, #4]
 800fc1c:	4798      	blx	r3
 800fc1e:	2800      	cmp	r0, #0
 800fc20:	d13d      	bne.n	800fc9e <RegionUS915RxConfig+0x96>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800fc22:	7ce3      	ldrb	r3, [r4, #19]
 800fc24:	b933      	cbnz	r3, 800fc34 <RegionUS915RxConfig+0x2c>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 800fc26:	7827      	ldrb	r7, [r4, #0]
 800fc28:	f007 0307 	and.w	r3, r7, #7
 800fc2c:	4a1e      	ldr	r2, [pc, #120]	; (800fca8 <RegionUS915RxConfig+0xa0>)
 800fc2e:	4f1f      	ldr	r7, [pc, #124]	; (800fcac <RegionUS915RxConfig+0xa4>)
 800fc30:	fb02 7703 	mla	r7, r2, r3, r7
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 800fc34:	4b1e      	ldr	r3, [pc, #120]	; (800fcb0 <RegionUS915RxConfig+0xa8>)
 800fc36:	f913 9006 	ldrsb.w	r9, [r3, r6]

    Radio.SetChannel( frequency );
 800fc3a:	f8df 8068 	ldr.w	r8, [pc, #104]	; 800fca4 <RegionUS915RxConfig+0x9c>
 800fc3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fc42:	4638      	mov	r0, r7
 800fc44:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800fc46:	f8d8 8018 	ldr.w	r8, [r8, #24]
 800fc4a:	7ca3      	ldrb	r3, [r4, #18]
 800fc4c:	9309      	str	r3, [sp, #36]	; 0x24
 800fc4e:	2001      	movs	r0, #1
 800fc50:	9008      	str	r0, [sp, #32]
 800fc52:	2200      	movs	r2, #0
 800fc54:	9207      	str	r2, [sp, #28]
 800fc56:	9206      	str	r2, [sp, #24]
 800fc58:	9205      	str	r2, [sp, #20]
 800fc5a:	9204      	str	r2, [sp, #16]
 800fc5c:	9203      	str	r2, [sp, #12]
 800fc5e:	8923      	ldrh	r3, [r4, #8]
 800fc60:	9302      	str	r3, [sp, #8]
 800fc62:	2308      	movs	r3, #8
 800fc64:	9301      	str	r3, [sp, #4]
 800fc66:	9200      	str	r2, [sp, #0]
 800fc68:	4603      	mov	r3, r0
 800fc6a:	464a      	mov	r2, r9
 800fc6c:	78a1      	ldrb	r1, [r4, #2]
 800fc6e:	47c0      	blx	r8

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 800fc70:	7c63      	ldrb	r3, [r4, #17]
 800fc72:	b18b      	cbz	r3, 800fc98 <RegionUS915RxConfig+0x90>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 800fc74:	4b0f      	ldr	r3, [pc, #60]	; (800fcb4 <RegionUS915RxConfig+0xac>)
 800fc76:	5d99      	ldrb	r1, [r3, r6]
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800fc78:	4b0a      	ldr	r3, [pc, #40]	; (800fca4 <RegionUS915RxConfig+0x9c>)
 800fc7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc7c:	310d      	adds	r1, #13
 800fc7e:	b2c9      	uxtb	r1, r1
 800fc80:	2001      	movs	r0, #1
 800fc82:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800fc84:	4632      	mov	r2, r6
 800fc86:	4639      	mov	r1, r7
 800fc88:	7ce0      	ldrb	r0, [r4, #19]
 800fc8a:	f7fe fe5b 	bl	800e944 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 800fc8e:	702e      	strb	r6, [r5, #0]
    return true;
 800fc90:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_US915 */
}
 800fc92:	b00b      	add	sp, #44	; 0x2c
 800fc94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 800fc98:	4b07      	ldr	r3, [pc, #28]	; (800fcb8 <RegionUS915RxConfig+0xb0>)
 800fc9a:	5d99      	ldrb	r1, [r3, r6]
 800fc9c:	e7ec      	b.n	800fc78 <RegionUS915RxConfig+0x70>
        return false;
 800fc9e:	2000      	movs	r0, #0
 800fca0:	e7f7      	b.n	800fc92 <RegionUS915RxConfig+0x8a>
 800fca2:	bf00      	nop
 800fca4:	08014bf0 	.word	0x08014bf0
 800fca8:	000927c0 	.word	0x000927c0
 800fcac:	370870a0 	.word	0x370870a0
 800fcb0:	0801465c 	.word	0x0801465c
 800fcb4:	0801466c 	.word	0x0801466c
 800fcb8:	0801467c 	.word	0x0801467c

0800fcbc <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800fcbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcc0:	b08d      	sub	sp, #52	; 0x34
 800fcc2:	4604      	mov	r4, r0
 800fcc4:	468b      	mov	fp, r1
 800fcc6:	4617      	mov	r7, r2
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 800fcc8:	f990 2001 	ldrsb.w	r2, [r0, #1]
 800fccc:	4b32      	ldr	r3, [pc, #200]	; (800fd98 <RegionUS915TxConfig+0xdc>)
 800fcce:	f913 a002 	ldrsb.w	sl, [r3, r2]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 800fcd2:	4b32      	ldr	r3, [pc, #200]	; (800fd9c <RegionUS915TxConfig+0xe0>)
 800fcd4:	6818      	ldr	r0, [r3, #0]
 800fcd6:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 800fda0 <RegionUS915TxConfig+0xe4>
 800fcda:	f8d9 3000 	ldr.w	r3, [r9]
 800fcde:	7821      	ldrb	r1, [r4, #0]
 800fce0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800fce4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800fce8:	7a49      	ldrb	r1, [r1, #9]
 800fcea:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800fcee:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800fcf2:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800fcf6:	f991 1002 	ldrsb.w	r1, [r1, #2]
 800fcfa:	f994 0002 	ldrsb.w	r0, [r4, #2]
 800fcfe:	f7ff fce3 	bl	800f6c8 <LimitTxPower>
 800fd02:	4606      	mov	r6, r0
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 800fd04:	4927      	ldr	r1, [pc, #156]	; (800fda4 <RegionUS915TxConfig+0xe8>)
 800fd06:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800fd0a:	f7fe fe09 	bl	800e920 <RegionCommonGetBandwidth>
 800fd0e:	900a      	str	r0, [sp, #40]	; 0x28
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 800fd10:	2200      	movs	r2, #0
 800fd12:	4925      	ldr	r1, [pc, #148]	; (800fda8 <RegionUS915TxConfig+0xec>)
 800fd14:	4630      	mov	r0, r6
 800fd16:	f7fe fd19 	bl	800e74c <RegionCommonComputeTxPower>
 800fd1a:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800fd1c:	f8df 808c 	ldr.w	r8, [pc, #140]	; 800fdac <RegionUS915TxConfig+0xf0>
 800fd20:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800fd24:	f8d9 1000 	ldr.w	r1, [r9]
 800fd28:	7823      	ldrb	r3, [r4, #0]
 800fd2a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800fd2e:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800fd32:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800fd34:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800fd38:	9308      	str	r3, [sp, #32]
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	9207      	str	r2, [sp, #28]
 800fd3e:	9206      	str	r2, [sp, #24]
 800fd40:	9205      	str	r2, [sp, #20]
 800fd42:	2501      	movs	r5, #1
 800fd44:	9504      	str	r5, [sp, #16]
 800fd46:	9203      	str	r2, [sp, #12]
 800fd48:	2308      	movs	r3, #8
 800fd4a:	9302      	str	r3, [sp, #8]
 800fd4c:	9501      	str	r5, [sp, #4]
 800fd4e:	f8cd a000 	str.w	sl, [sp]
 800fd52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fd56:	4628      	mov	r0, r5
 800fd58:	f8d8 c01c 	ldr.w	ip, [r8, #28]
 800fd5c:	47e0      	blx	ip
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800fd5e:	f8d9 2000 	ldr.w	r2, [r9]
 800fd62:	7823      	ldrb	r3, [r4, #0]
 800fd64:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800fd68:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800fd6c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fd70:	f7fe fe0a 	bl	800e988 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 800fd74:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 800fd78:	7b21      	ldrb	r1, [r4, #12]
 800fd7a:	4628      	mov	r0, r5
 800fd7c:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800fd7e:	89a1      	ldrh	r1, [r4, #12]
 800fd80:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800fd84:	f7ff fc82 	bl	800f68c <GetTimeOnAir>
 800fd88:	6038      	str	r0, [r7, #0]

    *txPower = txPowerLimited;
 800fd8a:	f88b 6000 	strb.w	r6, [fp]
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 800fd8e:	4628      	mov	r0, r5
 800fd90:	b00d      	add	sp, #52	; 0x34
 800fd92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd96:	bf00      	nop
 800fd98:	0801465c 	.word	0x0801465c
 800fd9c:	20000f34 	.word	0x20000f34
 800fda0:	20000f38 	.word	0x20000f38
 800fda4:	08014608 	.word	0x08014608
 800fda8:	41f00000 	.word	0x41f00000
 800fdac:	08014bf0 	.word	0x08014bf0

0800fdb0 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800fdb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fdb4:	b091      	sub	sp, #68	; 0x44
 800fdb6:	4605      	mov	r5, r0
 800fdb8:	4688      	mov	r8, r1
 800fdba:	4617      	mov	r7, r2
 800fdbc:	461e      	mov	r6, r3
    uint8_t status = 0x07;
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800fdbe:	2400      	movs	r4, #0
 800fdc0:	940e      	str	r4, [sp, #56]	; 0x38
 800fdc2:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
 800fdc6:	940b      	str	r4, [sp, #44]	; 0x2c
 800fdc8:	940c      	str	r4, [sp, #48]	; 0x30
 800fdca:	940d      	str	r4, [sp, #52]	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800fdcc:	4b9c      	ldr	r3, [pc, #624]	; (8010040 <RegionUS915LinkAdrReq+0x290>)
 800fdce:	6819      	ldr	r1, [r3, #0]
 800fdd0:	2206      	movs	r2, #6
 800fdd2:	f501 6190 	add.w	r1, r1, #1152	; 0x480
 800fdd6:	a80b      	add	r0, sp, #44	; 0x2c
 800fdd8:	f7fe fb48 	bl	800e46c <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800fddc:	e00d      	b.n	800fdfa <RegionUS915LinkAdrReq+0x4a>
        status = 0x07;

        if( linkAdrParams.ChMaskCtrl == 6 )
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 800fdde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fde2:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0xFFFF;
 800fde6:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0xFFFF;
 800fdea:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0xFFFF;
 800fdee:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800fdf2:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 800fdf6:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800fdfa:	7a2b      	ldrb	r3, [r5, #8]
 800fdfc:	42a3      	cmp	r3, r4
 800fdfe:	f240 8081 	bls.w	800ff04 <RegionUS915LinkAdrReq+0x154>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800fe02:	6868      	ldr	r0, [r5, #4]
 800fe04:	a90e      	add	r1, sp, #56	; 0x38
 800fe06:	4420      	add	r0, r4
 800fe08:	f7fe fbe0 	bl	800e5cc <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800fe0c:	2800      	cmp	r0, #0
 800fe0e:	d079      	beq.n	800ff04 <RegionUS915LinkAdrReq+0x154>
        bytesProcessed += nextIndex;
 800fe10:	4404      	add	r4, r0
 800fe12:	b2e4      	uxtb	r4, r4
        if( linkAdrParams.ChMaskCtrl == 6 )
 800fe14:	f89d c03b 	ldrb.w	ip, [sp, #59]	; 0x3b
 800fe18:	f1bc 0f06 	cmp.w	ip, #6
 800fe1c:	d0df      	beq.n	800fdde <RegionUS915LinkAdrReq+0x2e>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 800fe1e:	f1bc 0f07 	cmp.w	ip, #7
 800fe22:	d00a      	beq.n	800fe3a <RegionUS915LinkAdrReq+0x8a>
            channelsMask[2] = 0x0000;
            channelsMask[3] = 0x0000;
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 800fe24:	f1bc 0f05 	cmp.w	ip, #5
 800fe28:	d068      	beq.n	800fefc <RegionUS915LinkAdrReq+0x14c>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 800fe2a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800fe2e:	aa10      	add	r2, sp, #64	; 0x40
 800fe30:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 800fe34:	f82c 3c14 	strh.w	r3, [ip, #-20]
 800fe38:	e7df      	b.n	800fdfa <RegionUS915LinkAdrReq+0x4a>
            channelsMask[0] = 0x0000;
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0x0000;
 800fe40:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0x0000;
 800fe44:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0x0000;
 800fe48:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800fe4c:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 800fe50:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800fe54:	e7d1      	b.n	800fdfa <RegionUS915LinkAdrReq+0x4a>
                        channelsMask[cntChannelMask] |= 0xFF00;
 800fe56:	aa10      	add	r2, sp, #64	; 0x40
 800fe58:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800fe5c:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800fe60:	f062 02ff 	orn	r2, r2, #255	; 0xff
 800fe64:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 800fe68:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800fe6c:	4313      	orrs	r3, r2
 800fe6e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                        cntChannelMask++;
 800fe72:	3101      	adds	r1, #1
 800fe74:	b2c9      	uxtb	r1, r1
            for( uint8_t i = 0; i <= 7; i++ )
 800fe76:	f10c 0c01 	add.w	ip, ip, #1
 800fe7a:	fa5f fc8c 	uxtb.w	ip, ip
 800fe7e:	f1bc 0f07 	cmp.w	ip, #7
 800fe82:	d8ba      	bhi.n	800fdfa <RegionUS915LinkAdrReq+0x4a>
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 800fe84:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 800fe88:	2301      	movs	r3, #1
 800fe8a:	fa03 f30c 	lsl.w	r3, r3, ip
 800fe8e:	421a      	tst	r2, r3
 800fe90:	d011      	beq.n	800feb6 <RegionUS915LinkAdrReq+0x106>
                    if( ( i % 2 ) == 0 )
 800fe92:	f01c 0f01 	tst.w	ip, #1
 800fe96:	d1de      	bne.n	800fe56 <RegionUS915LinkAdrReq+0xa6>
                        channelsMask[cntChannelMask] |= 0x00FF;
 800fe98:	aa10      	add	r2, sp, #64	; 0x40
 800fe9a:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800fe9e:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800fea2:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 800fea6:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 800feaa:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800feae:	4313      	orrs	r3, r2
 800feb0:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800feb4:	e7df      	b.n	800fe76 <RegionUS915LinkAdrReq+0xc6>
                    if( ( i % 2 ) == 0 )
 800feb6:	f01c 0f01 	tst.w	ip, #1
 800feba:	d10f      	bne.n	800fedc <RegionUS915LinkAdrReq+0x12c>
                        channelsMask[cntChannelMask] &= 0xFF00;
 800febc:	aa10      	add	r2, sp, #64	; 0x40
 800febe:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800fec2:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800fec6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800feca:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 800fece:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800fed2:	ea22 0303 	bic.w	r3, r2, r3
 800fed6:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800feda:	e7cc      	b.n	800fe76 <RegionUS915LinkAdrReq+0xc6>
                        channelsMask[cntChannelMask] &= 0x00FF;
 800fedc:	aa10      	add	r2, sp, #64	; 0x40
 800fede:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 800fee2:	f812 0c14 	ldrb.w	r0, [r2, #-20]
 800fee6:	f822 0c14 	strh.w	r0, [r2, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 800feea:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800feee:	ea22 0303 	bic.w	r3, r2, r3
 800fef2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                        cntChannelMask++;
 800fef6:	3101      	adds	r1, #1
 800fef8:	b2c9      	uxtb	r1, r1
 800fefa:	e7bc      	b.n	800fe76 <RegionUS915LinkAdrReq+0xc6>
            for( uint8_t i = 0; i <= 7; i++ )
 800fefc:	f04f 0c00 	mov.w	ip, #0
            uint8_t cntChannelMask = 0;
 800ff00:	4661      	mov	r1, ip
 800ff02:	e7bc      	b.n	800fe7e <RegionUS915LinkAdrReq+0xce>
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 800ff04:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800ff08:	2b03      	cmp	r3, #3
 800ff0a:	dd58      	ble.n	800ffbe <RegionUS915LinkAdrReq+0x20e>
 800ff0c:	f04f 0907 	mov.w	r9, #7
    {
        status &= 0xFE; // Channel mask KO
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800ff10:	2302      	movs	r3, #2
 800ff12:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800ff16:	7a6b      	ldrb	r3, [r5, #9]
 800ff18:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    phyParam = RegionUS915GetPhyParam( &getPhy );
 800ff1c:	a809      	add	r0, sp, #36	; 0x24
 800ff1e:	f7ff fbef 	bl	800f700 <RegionUS915GetPhyParam>
 800ff22:	9008      	str	r0, [sp, #32]

    linkAdrVerifyParams.Status = status;
 800ff24:	f88d 9004 	strb.w	r9, [sp, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800ff28:	7aab      	ldrb	r3, [r5, #10]
 800ff2a:	f88d 3005 	strb.w	r3, [sp, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800ff2e:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800ff32:	f88d 3006 	strb.w	r3, [sp, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800ff36:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 800ff3a:	f88d 3007 	strb.w	r3, [sp, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800ff3e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800ff42:	f88d 3008 	strb.w	r3, [sp, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800ff46:	f995 300b 	ldrsb.w	r3, [r5, #11]
 800ff4a:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800ff4e:	f995 300c 	ldrsb.w	r3, [r5, #12]
 800ff52:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800ff56:	f995 300d 	ldrsb.w	r3, [r5, #13]
 800ff5a:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 800ff5e:	2348      	movs	r3, #72	; 0x48
 800ff60:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 800ff64:	ab0b      	add	r3, sp, #44	; 0x2c
 800ff66:	9304      	str	r3, [sp, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800ff68:	f88d 0014 	strb.w	r0, [sp, #20]
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 800ff6c:	2304      	movs	r3, #4
 800ff6e:	f88d 3015 	strb.w	r3, [sp, #21]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800ff72:	4b33      	ldr	r3, [pc, #204]	; (8010040 <RegionUS915LinkAdrReq+0x290>)
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	9306      	str	r3, [sp, #24]
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 800ff78:	230e      	movs	r3, #14
 800ff7a:	f88d 301c 	strb.w	r3, [sp, #28]
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 800ff7e:	2300      	movs	r3, #0
 800ff80:	f88d 301d 	strb.w	r3, [sp, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800ff84:	682b      	ldr	r3, [r5, #0]
 800ff86:	9300      	str	r3, [sp, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800ff88:	ab0e      	add	r3, sp, #56	; 0x38
 800ff8a:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 800ff8e:	f10d 0139 	add.w	r1, sp, #57	; 0x39
 800ff92:	4668      	mov	r0, sp
 800ff94:	f7fe fb38 	bl	800e608 <RegionCommonLinkAdrReqVerifyParams>
 800ff98:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800ff9a:	2807      	cmp	r0, #7
 800ff9c:	d01c      	beq.n	800ffd8 <RegionUS915LinkAdrReq+0x228>
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800ff9e:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800ffa2:	f888 3000 	strb.w	r3, [r8]
    *txPowOut = linkAdrParams.TxPower;
 800ffa6:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 800ffaa:	703b      	strb	r3, [r7, #0]
    *nbRepOut = linkAdrParams.NbRep;
 800ffac:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800ffb0:	7033      	strb	r3, [r6, #0]
    *nbBytesParsed = bytesProcessed;
 800ffb2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ffb4:	701c      	strb	r4, [r3, #0]

#endif /* REGION_US915 */
    return status;
}
 800ffb6:	4628      	mov	r0, r5
 800ffb8:	b011      	add	sp, #68	; 0x44
 800ffba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 800ffbe:	2204      	movs	r2, #4
 800ffc0:	2100      	movs	r1, #0
 800ffc2:	a80b      	add	r0, sp, #44	; 0x2c
 800ffc4:	f7fe fa3c 	bl	800e440 <RegionCommonCountChannels>
 800ffc8:	2801      	cmp	r0, #1
 800ffca:	d902      	bls.n	800ffd2 <RegionUS915LinkAdrReq+0x222>
 800ffcc:	f04f 0907 	mov.w	r9, #7
 800ffd0:	e79e      	b.n	800ff10 <RegionUS915LinkAdrReq+0x160>
        status &= 0xFE; // Channel mask KO
 800ffd2:	f04f 0906 	mov.w	r9, #6
 800ffd6:	e79b      	b.n	800ff10 <RegionUS915LinkAdrReq+0x160>
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 800ffd8:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8010040 <RegionUS915LinkAdrReq+0x290>
 800ffdc:	f8d9 0000 	ldr.w	r0, [r9]
 800ffe0:	2206      	movs	r2, #6
 800ffe2:	a90b      	add	r1, sp, #44	; 0x2c
 800ffe4:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800ffe8:	f7fe fa40 	bl	800e46c <RegionCommonChanMaskCopy>
        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 800ffec:	4b15      	ldr	r3, [pc, #84]	; (8010044 <RegionUS915LinkAdrReq+0x294>)
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	f8d9 2000 	ldr.w	r2, [r9]
 800fff4:	f8b2 1480 	ldrh.w	r1, [r2, #1152]	; 0x480
 800fff8:	f8b3 0090 	ldrh.w	r0, [r3, #144]	; 0x90
 800fffc:	4001      	ands	r1, r0
 800fffe:	f8a3 1090 	strh.w	r1, [r3, #144]	; 0x90
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 8010002:	f8b2 1482 	ldrh.w	r1, [r2, #1154]	; 0x482
 8010006:	f8b3 0092 	ldrh.w	r0, [r3, #146]	; 0x92
 801000a:	4001      	ands	r1, r0
 801000c:	f8a3 1092 	strh.w	r1, [r3, #146]	; 0x92
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 8010010:	f8b2 1484 	ldrh.w	r1, [r2, #1156]	; 0x484
 8010014:	f8b3 0094 	ldrh.w	r0, [r3, #148]	; 0x94
 8010018:	4001      	ands	r1, r0
 801001a:	f8a3 1094 	strh.w	r1, [r3, #148]	; 0x94
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 801001e:	f8b2 1486 	ldrh.w	r1, [r2, #1158]	; 0x486
 8010022:	f8b3 0096 	ldrh.w	r0, [r3, #150]	; 0x96
 8010026:	4001      	ands	r1, r0
 8010028:	f8a3 1096 	strh.w	r1, [r3, #150]	; 0x96
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 801002c:	f8b2 1488 	ldrh.w	r1, [r2, #1160]	; 0x488
 8010030:	f8a3 1098 	strh.w	r1, [r3, #152]	; 0x98
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 8010034:	f8b2 248a 	ldrh.w	r2, [r2, #1162]	; 0x48a
 8010038:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 801003c:	e7af      	b.n	800ff9e <RegionUS915LinkAdrReq+0x1ee>
 801003e:	bf00      	nop
 8010040:	20000f38 	.word	0x20000f38
 8010044:	20000f34 	.word	0x20000f34

08010048 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8010048:	b538      	push	{r3, r4, r5, lr}
 801004a:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 801004c:	6840      	ldr	r0, [r0, #4]
 801004e:	f7ff faed 	bl	800f62c <VerifyRfFreq>
 8010052:	b310      	cbz	r0, 801009a <RegionUS915RxParamSetupReq+0x52>
    uint8_t status = 0x07;
 8010054:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 8010056:	220d      	movs	r2, #13
 8010058:	2108      	movs	r1, #8
 801005a:	f994 0000 	ldrsb.w	r0, [r4]
 801005e:	f7fe f994 	bl	800e38a <RegionCommonValueInRange>
 8010062:	b908      	cbnz	r0, 8010068 <RegionUS915RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 8010064:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8010068:	2207      	movs	r2, #7
 801006a:	2105      	movs	r1, #5
 801006c:	f994 0000 	ldrsb.w	r0, [r4]
 8010070:	f7fe f98b 	bl	800e38a <RegionCommonValueInRange>
 8010074:	2801      	cmp	r0, #1
 8010076:	d003      	beq.n	8010080 <RegionUS915RxParamSetupReq+0x38>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 8010078:	f994 3000 	ldrsb.w	r3, [r4]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 801007c:	2b0d      	cmp	r3, #13
 801007e:	dd01      	ble.n	8010084 <RegionUS915RxParamSetupReq+0x3c>
    {
        status &= 0xFD; // Datarate KO
 8010080:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 8010084:	2203      	movs	r2, #3
 8010086:	2100      	movs	r1, #0
 8010088:	f994 0001 	ldrsb.w	r0, [r4, #1]
 801008c:	f7fe f97d 	bl	800e38a <RegionCommonValueInRange>
 8010090:	b908      	cbnz	r0, 8010096 <RegionUS915RxParamSetupReq+0x4e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8010092:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_US915 */
    return status;
}
 8010096:	4628      	mov	r0, r5
 8010098:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 801009a:	2506      	movs	r5, #6
 801009c:	e7db      	b.n	8010056 <RegionUS915RxParamSetupReq+0xe>

0801009e <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
    // Do not accept the request
    return -1;
}
 801009e:	f04f 30ff 	mov.w	r0, #4294967295
 80100a2:	4770      	bx	lr

080100a4 <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 80100a4:	f04f 30ff 	mov.w	r0, #4294967295
 80100a8:	4770      	bx	lr

080100aa <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
    // Do not accept the request
    return -1;
}
 80100aa:	f04f 30ff 	mov.w	r0, #4294967295
 80100ae:	4770      	bx	lr

080100b0 <RegionUS915AlternateDr>:
int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 80100b0:	b9b1      	cbnz	r1, 80100e0 <RegionUS915AlternateDr+0x30>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 80100b2:	4b10      	ldr	r3, [pc, #64]	; (80100f4 <RegionUS915AlternateDr+0x44>)
 80100b4:	681a      	ldr	r2, [r3, #0]
 80100b6:	f892 309d 	ldrb.w	r3, [r2, #157]	; 0x9d
 80100ba:	3301      	adds	r3, #1
 80100bc:	f882 309d 	strb.w	r3, [r2, #157]	; 0x9d
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 80100c0:	4b0c      	ldr	r3, [pc, #48]	; (80100f4 <RegionUS915AlternateDr+0x44>)
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
 80100c8:	4b0b      	ldr	r3, [pc, #44]	; (80100f8 <RegionUS915AlternateDr+0x48>)
 80100ca:	fba3 1302 	umull	r1, r3, r3, r2
 80100ce:	085b      	lsrs	r3, r3, #1
 80100d0:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80100d4:	1ad3      	subs	r3, r2, r3
 80100d6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80100da:	d009      	beq.n	80100f0 <RegionUS915AlternateDr+0x40>
        // Use DR_4 every 9th times.
        currentDr = DR_4;
    }
    else
    {
        currentDr = DR_0;
 80100dc:	2000      	movs	r0, #0
    }
    return currentDr;
#else
    return -1;
#endif /* REGION_US915 */
}
 80100de:	4770      	bx	lr
        RegionNvmGroup1->JoinTrialsCounter--;
 80100e0:	4b04      	ldr	r3, [pc, #16]	; (80100f4 <RegionUS915AlternateDr+0x44>)
 80100e2:	681a      	ldr	r2, [r3, #0]
 80100e4:	f892 309d 	ldrb.w	r3, [r2, #157]	; 0x9d
 80100e8:	3b01      	subs	r3, #1
 80100ea:	f882 309d 	strb.w	r3, [r2, #157]	; 0x9d
 80100ee:	e7e7      	b.n	80100c0 <RegionUS915AlternateDr+0x10>
        currentDr = DR_4;
 80100f0:	2004      	movs	r0, #4
 80100f2:	4770      	bx	lr
 80100f4:	20000f34 	.word	0x20000f34
 80100f8:	38e38e39 	.word	0x38e38e39

080100fc <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80100fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010100:	b0a4      	sub	sp, #144	; 0x90
 8010102:	4604      	mov	r4, r0
 8010104:	460e      	mov	r6, r1
 8010106:	4690      	mov	r8, r2
 8010108:	461f      	mov	r7, r3
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 801010a:	2500      	movs	r5, #0
 801010c:	f88d 508f 	strb.w	r5, [sp, #143]	; 0x8f
    uint8_t nbRestrictedChannels = 0;
 8010110:	f88d 508e 	strb.w	r5, [sp, #142]	; 0x8e
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 8010114:	9511      	str	r5, [sp, #68]	; 0x44
 8010116:	2244      	movs	r2, #68	; 0x44
 8010118:	4629      	mov	r1, r5
 801011a:	a812      	add	r0, sp, #72	; 0x48
 801011c:	f003 fc96 	bl	8013a4c <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 8010120:	4b4e      	ldr	r3, [pc, #312]	; (801025c <RegionUS915NextChannel+0x160>)
 8010122:	6818      	ldr	r0, [r3, #0]
 8010124:	2204      	movs	r2, #4
 8010126:	4629      	mov	r1, r5
 8010128:	3090      	adds	r0, #144	; 0x90
 801012a:	f7fe f989 	bl	800e440 <RegionCommonCountChannels>
 801012e:	2800      	cmp	r0, #0
 8010130:	d054      	beq.n	80101dc <RegionUS915NextChannel+0xe0>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 8010132:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8010136:	2b03      	cmp	r3, #3
 8010138:	dd0a      	ble.n	8010150 <RegionUS915NextChannel+0x54>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 801013a:	4b48      	ldr	r3, [pc, #288]	; (801025c <RegionUS915NextChannel+0x160>)
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8010142:	b92a      	cbnz	r2, 8010150 <RegionUS915NextChannel+0x54>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8010144:	4a46      	ldr	r2, [pc, #280]	; (8010260 <RegionUS915NextChannel+0x164>)
 8010146:	6812      	ldr	r2, [r2, #0]
 8010148:	f8b2 2488 	ldrh.w	r2, [r2, #1160]	; 0x488
 801014c:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8010150:	7a63      	ldrb	r3, [r4, #9]
 8010152:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8010156:	7a23      	ldrb	r3, [r4, #8]
 8010158:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 801015c:	4b3f      	ldr	r3, [pc, #252]	; (801025c <RegionUS915NextChannel+0x160>)
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	f103 0290 	add.w	r2, r3, #144	; 0x90
 8010164:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8010166:	4a3e      	ldr	r2, [pc, #248]	; (8010260 <RegionUS915NextChannel+0x164>)
 8010168:	6812      	ldr	r2, [r2, #0]
 801016a:	9205      	str	r2, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 801016c:	9306      	str	r3, [sp, #24]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 801016e:	2348      	movs	r3, #72	; 0x48
 8010170:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = NULL;
 8010174:	2300      	movs	r3, #0
 8010176:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8010178:	6823      	ldr	r3, [r4, #0]
 801017a:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 801017c:	6863      	ldr	r3, [r4, #4]
 801017e:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8010180:	7aa3      	ldrb	r3, [r4, #10]
 8010182:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 8010186:	2301      	movs	r3, #1
 8010188:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 801018c:	ab0c      	add	r3, sp, #48	; 0x30
 801018e:	f104 020c 	add.w	r2, r4, #12
 8010192:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010196:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 801019a:	7d23      	ldrb	r3, [r4, #20]
 801019c:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 80101a0:	8ae1      	ldrh	r1, [r4, #22]
 80101a2:	f994 0008 	ldrsb.w	r0, [r4, #8]
 80101a6:	f7ff fa71 	bl	800f68c <GetTimeOnAir>
 80101aa:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 80101ac:	ab03      	add	r3, sp, #12
 80101ae:	9310      	str	r3, [sp, #64]	; 0x40
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 80101b0:	f8cd 8004 	str.w	r8, [sp, #4]
 80101b4:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 80101b8:	9300      	str	r3, [sp, #0]
 80101ba:	f10d 038f 	add.w	r3, sp, #143	; 0x8f
 80101be:	aa11      	add	r2, sp, #68	; 0x44
 80101c0:	4639      	mov	r1, r7
 80101c2:	a809      	add	r0, sp, #36	; 0x24
 80101c4:	f7fe fb3e 	bl	800e844 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 80101c8:	4605      	mov	r5, r0
 80101ca:	2800      	cmp	r0, #0
 80101cc:	d141      	bne.n	8010252 <RegionUS915NextChannel+0x156>
    {
        if( nextChanParams->Joined == true )
 80101ce:	7a63      	ldrb	r3, [r4, #9]
 80101d0:	b99b      	cbnz	r3, 80101fa <RegionUS915NextChannel+0xfe>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 80101d2:	f994 3008 	ldrsb.w	r3, [r4, #8]
 80101d6:	b1eb      	cbz	r3, 8010214 <RegionUS915NextChannel+0x118>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 80101d8:	4603      	mov	r3, r0
 80101da:	e029      	b.n	8010230 <RegionUS915NextChannel+0x134>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 80101dc:	4d1f      	ldr	r5, [pc, #124]	; (801025c <RegionUS915NextChannel+0x160>)
 80101de:	6828      	ldr	r0, [r5, #0]
 80101e0:	4b1f      	ldr	r3, [pc, #124]	; (8010260 <RegionUS915NextChannel+0x164>)
 80101e2:	6819      	ldr	r1, [r3, #0]
 80101e4:	2204      	movs	r2, #4
 80101e6:	f501 6190 	add.w	r1, r1, #1152	; 0x480
 80101ea:	3090      	adds	r0, #144	; 0x90
 80101ec:	f7fe f93e 	bl	800e46c <RegionCommonChanMaskCopy>
        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 80101f0:	682b      	ldr	r3, [r5, #0]
 80101f2:	2200      	movs	r2, #0
 80101f4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 80101f8:	e79b      	b.n	8010132 <RegionUS915NextChannel+0x36>
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 80101fa:	f89d 108f 	ldrb.w	r1, [sp, #143]	; 0x8f
 80101fe:	3901      	subs	r1, #1
 8010200:	f000 ff72 	bl	80110e8 <randr>
 8010204:	f100 0390 	add.w	r3, r0, #144	; 0x90
 8010208:	eb0d 0003 	add.w	r0, sp, r3
 801020c:	f810 3c4c 	ldrb.w	r3, [r0, #-76]
 8010210:	7033      	strb	r3, [r6, #0]
 8010212:	e017      	b.n	8010244 <RegionUS915NextChannel+0x148>
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8010214:	4b11      	ldr	r3, [pc, #68]	; (801025c <RegionUS915NextChannel+0x160>)
 8010216:	6818      	ldr	r0, [r3, #0]
 8010218:	4632      	mov	r2, r6
 801021a:	f100 019c 	add.w	r1, r0, #156	; 0x9c
 801021e:	3090      	adds	r0, #144	; 0x90
 8010220:	f7fd ff96 	bl	800e150 <RegionBaseUSComputeNext125kHzJoinChannel>
 8010224:	2803      	cmp	r0, #3
 8010226:	d10d      	bne.n	8010244 <RegionUS915NextChannel+0x148>
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 8010228:	4605      	mov	r5, r0
 801022a:	e012      	b.n	8010252 <RegionUS915NextChannel+0x156>
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
                {
                    i++;
 801022c:	3301      	adds	r3, #1
 801022e:	b2db      	uxtb	r3, r3
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8010230:	4a0a      	ldr	r2, [pc, #40]	; (801025c <RegionUS915NextChannel+0x160>)
 8010232:	6812      	ldr	r2, [r2, #0]
 8010234:	f892 0098 	ldrb.w	r0, [r2, #152]	; 0x98
 8010238:	4118      	asrs	r0, r3
 801023a:	f010 0f01 	tst.w	r0, #1
 801023e:	d0f5      	beq.n	801022c <RegionUS915NextChannel+0x130>
                }
                *channel = 64 + i;
 8010240:	3340      	adds	r3, #64	; 0x40
 8010242:	7033      	strb	r3, [r6, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 8010244:	4b05      	ldr	r3, [pc, #20]	; (801025c <RegionUS915NextChannel+0x160>)
 8010246:	6818      	ldr	r0, [r3, #0]
 8010248:	2248      	movs	r2, #72	; 0x48
 801024a:	7831      	ldrb	r1, [r6, #0]
 801024c:	3090      	adds	r0, #144	; 0x90
 801024e:	f7fe f8de 	bl	800e40e <RegionCommonChanDisable>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 8010252:	4628      	mov	r0, r5
 8010254:	b024      	add	sp, #144	; 0x90
 8010256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801025a:	bf00      	nop
 801025c:	20000f34 	.word	0x20000f34
 8010260:	20000f38 	.word	0x20000f38

08010264 <RegionUS915SetContinuousWave>:
    return LORAMAC_STATUS_PARAMETER_INVALID;
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionUS915SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8010264:	b538      	push	{r3, r4, r5, lr}
 8010266:	4604      	mov	r4, r0
#if defined( REGION_US915 )
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, RegionNvmGroup2->ChannelsMask );
 8010268:	4b14      	ldr	r3, [pc, #80]	; (80102bc <RegionUS915SetContinuousWave+0x58>)
 801026a:	6819      	ldr	r1, [r3, #0]
 801026c:	4d14      	ldr	r5, [pc, #80]	; (80102c0 <RegionUS915SetContinuousWave+0x5c>)
 801026e:	682b      	ldr	r3, [r5, #0]
 8010270:	7802      	ldrb	r2, [r0, #0]
 8010272:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8010276:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801027a:	7a52      	ldrb	r2, [r2, #9]
 801027c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8010280:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8010284:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8010288:	f990 2001 	ldrsb.w	r2, [r0, #1]
 801028c:	f991 1002 	ldrsb.w	r1, [r1, #2]
 8010290:	f990 0002 	ldrsb.w	r0, [r0, #2]
 8010294:	f7ff fa18 	bl	800f6c8 <LimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 8010298:	682a      	ldr	r2, [r5, #0]
 801029a:	7823      	ldrb	r3, [r4, #0]
 801029c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80102a0:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 80102a4:	2200      	movs	r2, #0
 80102a6:	4907      	ldr	r1, [pc, #28]	; (80102c4 <RegionUS915SetContinuousWave+0x60>)
 80102a8:	f7fe fa50 	bl	800e74c <RegionCommonComputeTxPower>
 80102ac:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 80102ae:	4b06      	ldr	r3, [pc, #24]	; (80102c8 <RegionUS915SetContinuousWave+0x64>)
 80102b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80102b2:	89a2      	ldrh	r2, [r4, #12]
 80102b4:	4628      	mov	r0, r5
 80102b6:	4798      	blx	r3
#endif /* REGION_US915 */
}
 80102b8:	bd38      	pop	{r3, r4, r5, pc}
 80102ba:	bf00      	nop
 80102bc:	20000f34 	.word	0x20000f34
 80102c0:	20000f38 	.word	0x20000f38
 80102c4:	41f00000 	.word	0x41f00000
 80102c8:	08014bf0 	.word	0x08014bf0

080102cc <RegionUS915ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 80102cc:	4b04      	ldr	r3, [pc, #16]	; (80102e0 <RegionUS915ApplyDrOffset+0x14>)
 80102ce:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80102d2:	5698      	ldrsb	r0, [r3, r2]

    if( datarate < 0 )
 80102d4:	2800      	cmp	r0, #0
 80102d6:	db01      	blt.n	80102dc <RegionUS915ApplyDrOffset+0x10>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_US915 */
}
 80102d8:	b2c0      	uxtb	r0, r0
 80102da:	4770      	bx	lr
        datarate = DR_0;
 80102dc:	2000      	movs	r0, #0
 80102de:	e7fb      	b.n	80102d8 <RegionUS915ApplyDrOffset+0xc>
 80102e0:	08014648 	.word	0x08014648

080102e4 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 80102e4:	b510      	push	{r4, lr}
 80102e6:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 80102e8:	2210      	movs	r2, #16
 80102ea:	2100      	movs	r1, #0
 80102ec:	30f1      	adds	r0, #241	; 0xf1
 80102ee:	f000 ff20 	bl	8011132 <memset1>
    ctx->M_n = 0;
 80102f2:	2100      	movs	r1, #0
 80102f4:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 80102f8:	22f0      	movs	r2, #240	; 0xf0
 80102fa:	4620      	mov	r0, r4
 80102fc:	f000 ff19 	bl	8011132 <memset1>
}
 8010300:	bd10      	pop	{r4, pc}

08010302 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 8010302:	b508      	push	{r3, lr}
 8010304:	4602      	mov	r2, r0
 8010306:	4608      	mov	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 8010308:	2110      	movs	r1, #16
 801030a:	f000 fb3b 	bl	8010984 <lorawan_aes_set_key>
}
 801030e:	bd08      	pop	{r3, pc}

08010310 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 8010310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010314:	b084      	sub	sp, #16
 8010316:	4604      	mov	r4, r0
 8010318:	460d      	mov	r5, r1
 801031a:	4616      	mov	r6, r2
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 801031c:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8010320:	2b00      	cmp	r3, #0
 8010322:	d054      	beq.n	80103ce <AES_CMAC_Update+0xbe>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 8010324:	f1c3 0810 	rsb	r8, r3, #16
 8010328:	4647      	mov	r7, r8
 801032a:	4590      	cmp	r8, r2
 801032c:	bf28      	it	cs
 801032e:	4617      	movcs	r7, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 8010330:	f200 1001 	addw	r0, r0, #257	; 0x101
 8010334:	b2ba      	uxth	r2, r7
 8010336:	4418      	add	r0, r3
 8010338:	f000 fee3 	bl	8011102 <memcpy1>
        ctx->M_n += mlen;
 801033c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8010340:	443b      	add	r3, r7
 8010342:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 8010346:	2b0f      	cmp	r3, #15
 8010348:	d94d      	bls.n	80103e6 <AES_CMAC_Update+0xd6>
 801034a:	45b0      	cmp	r8, r6
 801034c:	d24b      	bcs.n	80103e6 <AES_CMAC_Update+0xd6>
            return;
        XOR( ctx->M_last, ctx->X );
 801034e:	2300      	movs	r3, #0
 8010350:	e008      	b.n	8010364 <AES_CMAC_Update+0x54>
 8010352:	18e2      	adds	r2, r4, r3
 8010354:	f892 10f1 	ldrb.w	r1, [r2, #241]	; 0xf1
 8010358:	f892 0101 	ldrb.w	r0, [r2, #257]	; 0x101
 801035c:	4041      	eors	r1, r0
 801035e:	f882 10f1 	strb.w	r1, [r2, #241]	; 0xf1
 8010362:	3301      	adds	r3, #1
 8010364:	2b0f      	cmp	r3, #15
 8010366:	ddf4      	ble.n	8010352 <AES_CMAC_Update+0x42>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8010368:	f104 08f1 	add.w	r8, r4, #241	; 0xf1
 801036c:	2210      	movs	r2, #16
 801036e:	4641      	mov	r1, r8
 8010370:	4668      	mov	r0, sp
 8010372:	f000 fec6 	bl	8011102 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8010376:	4622      	mov	r2, r4
 8010378:	4669      	mov	r1, sp
 801037a:	4668      	mov	r0, sp
 801037c:	f000 fb84 	bl	8010a88 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8010380:	2210      	movs	r2, #16
 8010382:	4669      	mov	r1, sp
 8010384:	4640      	mov	r0, r8
 8010386:	f000 febc 	bl	8011102 <memcpy1>

        data += mlen;
 801038a:	443d      	add	r5, r7
        len -= mlen;
 801038c:	1bf6      	subs	r6, r6, r7
 801038e:	e01e      	b.n	80103ce <AES_CMAC_Update+0xbe>
    }
    while( len > 16 )
    { /* not last block */

        XOR( data, ctx->X );
 8010390:	eb04 0e03 	add.w	lr, r4, r3
 8010394:	f89e c0f1 	ldrb.w	ip, [lr, #241]	; 0xf1
 8010398:	5cea      	ldrb	r2, [r5, r3]
 801039a:	ea8c 0c02 	eor.w	ip, ip, r2
 801039e:	f88e c0f1 	strb.w	ip, [lr, #241]	; 0xf1
 80103a2:	3301      	adds	r3, #1
 80103a4:	2b0f      	cmp	r3, #15
 80103a6:	ddf3      	ble.n	8010390 <AES_CMAC_Update+0x80>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 80103a8:	f104 07f1 	add.w	r7, r4, #241	; 0xf1
 80103ac:	2210      	movs	r2, #16
 80103ae:	4639      	mov	r1, r7
 80103b0:	4668      	mov	r0, sp
 80103b2:	f000 fea6 	bl	8011102 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 80103b6:	4622      	mov	r2, r4
 80103b8:	4669      	mov	r1, sp
 80103ba:	4668      	mov	r0, sp
 80103bc:	f000 fb64 	bl	8010a88 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 80103c0:	2210      	movs	r2, #16
 80103c2:	4669      	mov	r1, sp
 80103c4:	4638      	mov	r0, r7
 80103c6:	f000 fe9c 	bl	8011102 <memcpy1>

        data += 16;
 80103ca:	3510      	adds	r5, #16
        len -= 16;
 80103cc:	3e10      	subs	r6, #16
    while( len > 16 )
 80103ce:	2e10      	cmp	r6, #16
 80103d0:	d901      	bls.n	80103d6 <AES_CMAC_Update+0xc6>
        XOR( data, ctx->X );
 80103d2:	2300      	movs	r3, #0
 80103d4:	e7e6      	b.n	80103a4 <AES_CMAC_Update+0x94>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 80103d6:	b2b2      	uxth	r2, r6
 80103d8:	4629      	mov	r1, r5
 80103da:	f204 1001 	addw	r0, r4, #257	; 0x101
 80103de:	f000 fe90 	bl	8011102 <memcpy1>
    ctx->M_n = len;
 80103e2:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
}
 80103e6:	b004      	add	sp, #16
 80103e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080103ec <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 80103ec:	b530      	push	{r4, r5, lr}
 80103ee:	b089      	sub	sp, #36	; 0x24
 80103f0:	4605      	mov	r5, r0
 80103f2:	460c      	mov	r4, r1
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 80103f4:	2210      	movs	r2, #16
 80103f6:	2100      	movs	r1, #0
 80103f8:	eb0d 0002 	add.w	r0, sp, r2
 80103fc:	f000 fe99 	bl	8011132 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 8010400:	4622      	mov	r2, r4
 8010402:	a904      	add	r1, sp, #16
 8010404:	4608      	mov	r0, r1
 8010406:	f000 fb3f 	bl	8010a88 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 801040a:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 801040e:	2b00      	cmp	r3, #0
 8010410:	db01      	blt.n	8010416 <AES_CMAC_Final+0x2a>
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 8010412:	2300      	movs	r3, #0
 8010414:	e030      	b.n	8010478 <AES_CMAC_Final+0x8c>
        LSHIFT( K, K );
 8010416:	2300      	movs	r3, #0
 8010418:	2b0e      	cmp	r3, #14
 801041a:	dc11      	bgt.n	8010440 <AES_CMAC_Final+0x54>
 801041c:	f103 0220 	add.w	r2, r3, #32
 8010420:	eb0d 0102 	add.w	r1, sp, r2
 8010424:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 8010428:	3301      	adds	r3, #1
 801042a:	f103 0220 	add.w	r2, r3, #32
 801042e:	446a      	add	r2, sp
 8010430:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8010434:	09d2      	lsrs	r2, r2, #7
 8010436:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 801043a:	f801 2c10 	strb.w	r2, [r1, #-16]
 801043e:	e7eb      	b.n	8010418 <AES_CMAC_Final+0x2c>
 8010440:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8010444:	005b      	lsls	r3, r3, #1
 8010446:	b2db      	uxtb	r3, r3
 8010448:	f88d 301f 	strb.w	r3, [sp, #31]
        K[15] ^= 0x87;
 801044c:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 8010450:	f88d 301f 	strb.w	r3, [sp, #31]
 8010454:	e017      	b.n	8010486 <AES_CMAC_Final+0x9a>
        LSHIFT( K, K );
 8010456:	f103 0220 	add.w	r2, r3, #32
 801045a:	eb0d 0102 	add.w	r1, sp, r2
 801045e:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 8010462:	3301      	adds	r3, #1
 8010464:	f103 0220 	add.w	r2, r3, #32
 8010468:	446a      	add	r2, sp
 801046a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 801046e:	09d2      	lsrs	r2, r2, #7
 8010470:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8010474:	f801 2c10 	strb.w	r2, [r1, #-16]
 8010478:	2b0e      	cmp	r3, #14
 801047a:	ddec      	ble.n	8010456 <AES_CMAC_Final+0x6a>
 801047c:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8010480:	005b      	lsls	r3, r3, #1
 8010482:	f88d 301f 	strb.w	r3, [sp, #31]

    if( ctx->M_n == 16 )
 8010486:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 801048a:	2810      	cmp	r0, #16
 801048c:	d014      	beq.n	80104b8 <AES_CMAC_Final+0xcc>
        XOR( K, ctx->M_last );
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 801048e:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 8010492:	2b00      	cmp	r3, #0
 8010494:	db30      	blt.n	80104f8 <AES_CMAC_Final+0x10c>
        {
            LSHIFT( K, K );
            K[15] ^= 0x87;
        }
        else
            LSHIFT( K, K );
 8010496:	2300      	movs	r3, #0
 8010498:	e041      	b.n	801051e <AES_CMAC_Final+0x132>
        XOR( K, ctx->M_last );
 801049a:	18e1      	adds	r1, r4, r3
 801049c:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 80104a0:	f103 0020 	add.w	r0, r3, #32
 80104a4:	4468      	add	r0, sp
 80104a6:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 80104aa:	4042      	eors	r2, r0
 80104ac:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 80104b0:	3301      	adds	r3, #1
 80104b2:	2b0f      	cmp	r3, #15
 80104b4:	ddf1      	ble.n	801049a <AES_CMAC_Final+0xae>
 80104b6:	e059      	b.n	801056c <AES_CMAC_Final+0x180>
 80104b8:	2300      	movs	r3, #0
 80104ba:	e7fa      	b.n	80104b2 <AES_CMAC_Final+0xc6>
            LSHIFT( K, K );
 80104bc:	f103 0220 	add.w	r2, r3, #32
 80104c0:	eb0d 0102 	add.w	r1, sp, r2
 80104c4:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 80104c8:	3301      	adds	r3, #1
 80104ca:	f103 0220 	add.w	r2, r3, #32
 80104ce:	446a      	add	r2, sp
 80104d0:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80104d4:	09d2      	lsrs	r2, r2, #7
 80104d6:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 80104da:	f801 2c10 	strb.w	r2, [r1, #-16]
 80104de:	2b0e      	cmp	r3, #14
 80104e0:	ddec      	ble.n	80104bc <AES_CMAC_Final+0xd0>
 80104e2:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80104e6:	005b      	lsls	r3, r3, #1
 80104e8:	b2db      	uxtb	r3, r3
 80104ea:	f88d 301f 	strb.w	r3, [sp, #31]
            K[15] ^= 0x87;
 80104ee:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 80104f2:	f88d 301f 	strb.w	r3, [sp, #31]
 80104f6:	e019      	b.n	801052c <AES_CMAC_Final+0x140>
            LSHIFT( K, K );
 80104f8:	2300      	movs	r3, #0
 80104fa:	e7f0      	b.n	80104de <AES_CMAC_Final+0xf2>
            LSHIFT( K, K );
 80104fc:	f103 0220 	add.w	r2, r3, #32
 8010500:	eb0d 0102 	add.w	r1, sp, r2
 8010504:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 8010508:	3301      	adds	r3, #1
 801050a:	f103 0220 	add.w	r2, r3, #32
 801050e:	446a      	add	r2, sp
 8010510:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8010514:	09d2      	lsrs	r2, r2, #7
 8010516:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 801051a:	f801 2c10 	strb.w	r2, [r1, #-16]
 801051e:	2b0e      	cmp	r3, #14
 8010520:	ddec      	ble.n	80104fc <AES_CMAC_Final+0x110>
 8010522:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8010526:	005b      	lsls	r3, r3, #1
 8010528:	f88d 301f 	strb.w	r3, [sp, #31]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 801052c:	4420      	add	r0, r4
 801052e:	2380      	movs	r3, #128	; 0x80
 8010530:	f880 3101 	strb.w	r3, [r0, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 8010534:	e003      	b.n	801053e <AES_CMAC_Final+0x152>
            ctx->M_last[ctx->M_n] = 0;
 8010536:	4423      	add	r3, r4
 8010538:	2200      	movs	r2, #0
 801053a:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 801053e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8010542:	3301      	adds	r3, #1
 8010544:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8010548:	2b0f      	cmp	r3, #15
 801054a:	d9f4      	bls.n	8010536 <AES_CMAC_Final+0x14a>

        XOR( K, ctx->M_last );
 801054c:	2300      	movs	r3, #0
 801054e:	e00b      	b.n	8010568 <AES_CMAC_Final+0x17c>
 8010550:	18e1      	adds	r1, r4, r3
 8010552:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 8010556:	f103 0020 	add.w	r0, r3, #32
 801055a:	4468      	add	r0, sp
 801055c:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 8010560:	4042      	eors	r2, r0
 8010562:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 8010566:	3301      	adds	r3, #1
 8010568:	2b0f      	cmp	r3, #15
 801056a:	ddf1      	ble.n	8010550 <AES_CMAC_Final+0x164>
 801056c:	2300      	movs	r3, #0
 801056e:	e009      	b.n	8010584 <AES_CMAC_Final+0x198>
    }
    XOR( ctx->M_last, ctx->X );
 8010570:	18e2      	adds	r2, r4, r3
 8010572:	f892 c0f1 	ldrb.w	ip, [r2, #241]	; 0xf1
 8010576:	f892 1101 	ldrb.w	r1, [r2, #257]	; 0x101
 801057a:	ea8c 0c01 	eor.w	ip, ip, r1
 801057e:	f882 c0f1 	strb.w	ip, [r2, #241]	; 0xf1
 8010582:	3301      	adds	r3, #1
 8010584:	2b0f      	cmp	r3, #15
 8010586:	ddf3      	ble.n	8010570 <AES_CMAC_Final+0x184>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8010588:	2210      	movs	r2, #16
 801058a:	f104 01f1 	add.w	r1, r4, #241	; 0xf1
 801058e:	4668      	mov	r0, sp
 8010590:	f000 fdb7 	bl	8011102 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 8010594:	4622      	mov	r2, r4
 8010596:	4629      	mov	r1, r5
 8010598:	4668      	mov	r0, sp
 801059a:	f000 fa75 	bl	8010a88 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 801059e:	2210      	movs	r2, #16
 80105a0:	2100      	movs	r1, #0
 80105a2:	eb0d 0002 	add.w	r0, sp, r2
 80105a6:	f000 fdc4 	bl	8011132 <memset1>
}
 80105aa:	b009      	add	sp, #36	; 0x24
 80105ac:	bd30      	pop	{r4, r5, pc}

080105ae <copy_block>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 80105ae:	780b      	ldrb	r3, [r1, #0]
 80105b0:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 80105b2:	784b      	ldrb	r3, [r1, #1]
 80105b4:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 80105b6:	788b      	ldrb	r3, [r1, #2]
 80105b8:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 80105ba:	78cb      	ldrb	r3, [r1, #3]
 80105bc:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 80105be:	790b      	ldrb	r3, [r1, #4]
 80105c0:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 80105c2:	794b      	ldrb	r3, [r1, #5]
 80105c4:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 80105c6:	798b      	ldrb	r3, [r1, #6]
 80105c8:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 80105ca:	79cb      	ldrb	r3, [r1, #7]
 80105cc:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 80105ce:	7a0b      	ldrb	r3, [r1, #8]
 80105d0:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 80105d2:	7a4b      	ldrb	r3, [r1, #9]
 80105d4:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 80105d6:	7a8b      	ldrb	r3, [r1, #10]
 80105d8:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 80105da:	7acb      	ldrb	r3, [r1, #11]
 80105dc:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 80105de:	7b0b      	ldrb	r3, [r1, #12]
 80105e0:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 80105e2:	7b4b      	ldrb	r3, [r1, #13]
 80105e4:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 80105e6:	7b8b      	ldrb	r3, [r1, #14]
 80105e8:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 80105ea:	7bcb      	ldrb	r3, [r1, #15]
 80105ec:	73c3      	strb	r3, [r0, #15]
#endif
}
 80105ee:	4770      	bx	lr

080105f0 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
    while( nn-- )
 80105f0:	e004      	b.n	80105fc <copy_block_nn+0xc>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 80105f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80105f6:	f800 2b01 	strb.w	r2, [r0], #1
    while( nn-- )
 80105fa:	461a      	mov	r2, r3
 80105fc:	1e53      	subs	r3, r2, #1
 80105fe:	b2db      	uxtb	r3, r3
 8010600:	2a00      	cmp	r2, #0
 8010602:	d1f6      	bne.n	80105f2 <copy_block_nn+0x2>
}
 8010604:	4770      	bx	lr

08010606 <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 8010606:	780b      	ldrb	r3, [r1, #0]
 8010608:	7802      	ldrb	r2, [r0, #0]
 801060a:	4053      	eors	r3, r2
 801060c:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 801060e:	784b      	ldrb	r3, [r1, #1]
 8010610:	7842      	ldrb	r2, [r0, #1]
 8010612:	4053      	eors	r3, r2
 8010614:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 8010616:	788b      	ldrb	r3, [r1, #2]
 8010618:	7882      	ldrb	r2, [r0, #2]
 801061a:	4053      	eors	r3, r2
 801061c:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 801061e:	78cb      	ldrb	r3, [r1, #3]
 8010620:	78c2      	ldrb	r2, [r0, #3]
 8010622:	4053      	eors	r3, r2
 8010624:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 8010626:	790b      	ldrb	r3, [r1, #4]
 8010628:	7902      	ldrb	r2, [r0, #4]
 801062a:	4053      	eors	r3, r2
 801062c:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 801062e:	794b      	ldrb	r3, [r1, #5]
 8010630:	7942      	ldrb	r2, [r0, #5]
 8010632:	4053      	eors	r3, r2
 8010634:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 8010636:	798b      	ldrb	r3, [r1, #6]
 8010638:	7982      	ldrb	r2, [r0, #6]
 801063a:	4053      	eors	r3, r2
 801063c:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 801063e:	79cb      	ldrb	r3, [r1, #7]
 8010640:	79c2      	ldrb	r2, [r0, #7]
 8010642:	4053      	eors	r3, r2
 8010644:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 8010646:	7a0b      	ldrb	r3, [r1, #8]
 8010648:	7a02      	ldrb	r2, [r0, #8]
 801064a:	4053      	eors	r3, r2
 801064c:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 801064e:	7a4b      	ldrb	r3, [r1, #9]
 8010650:	7a42      	ldrb	r2, [r0, #9]
 8010652:	4053      	eors	r3, r2
 8010654:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 8010656:	7a8b      	ldrb	r3, [r1, #10]
 8010658:	7a82      	ldrb	r2, [r0, #10]
 801065a:	4053      	eors	r3, r2
 801065c:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 801065e:	7acb      	ldrb	r3, [r1, #11]
 8010660:	7ac2      	ldrb	r2, [r0, #11]
 8010662:	4053      	eors	r3, r2
 8010664:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 8010666:	7b0b      	ldrb	r3, [r1, #12]
 8010668:	7b02      	ldrb	r2, [r0, #12]
 801066a:	4053      	eors	r3, r2
 801066c:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 801066e:	7b4b      	ldrb	r3, [r1, #13]
 8010670:	7b42      	ldrb	r2, [r0, #13]
 8010672:	4053      	eors	r3, r2
 8010674:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 8010676:	7b8b      	ldrb	r3, [r1, #14]
 8010678:	7b82      	ldrb	r2, [r0, #14]
 801067a:	4053      	eors	r3, r2
 801067c:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 801067e:	7bcb      	ldrb	r3, [r1, #15]
 8010680:	7bc2      	ldrb	r2, [r0, #15]
 8010682:	4053      	eors	r3, r2
 8010684:	73c3      	strb	r3, [r0, #15]
#endif
}
 8010686:	4770      	bx	lr

08010688 <copy_and_key>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 8010688:	780b      	ldrb	r3, [r1, #0]
 801068a:	f892 c000 	ldrb.w	ip, [r2]
 801068e:	ea83 030c 	eor.w	r3, r3, ip
 8010692:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 8010694:	784b      	ldrb	r3, [r1, #1]
 8010696:	f892 c001 	ldrb.w	ip, [r2, #1]
 801069a:	ea83 030c 	eor.w	r3, r3, ip
 801069e:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 80106a0:	788b      	ldrb	r3, [r1, #2]
 80106a2:	f892 c002 	ldrb.w	ip, [r2, #2]
 80106a6:	ea83 030c 	eor.w	r3, r3, ip
 80106aa:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 80106ac:	78cb      	ldrb	r3, [r1, #3]
 80106ae:	f892 c003 	ldrb.w	ip, [r2, #3]
 80106b2:	ea83 030c 	eor.w	r3, r3, ip
 80106b6:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 80106b8:	790b      	ldrb	r3, [r1, #4]
 80106ba:	f892 c004 	ldrb.w	ip, [r2, #4]
 80106be:	ea83 030c 	eor.w	r3, r3, ip
 80106c2:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 80106c4:	794b      	ldrb	r3, [r1, #5]
 80106c6:	f892 c005 	ldrb.w	ip, [r2, #5]
 80106ca:	ea83 030c 	eor.w	r3, r3, ip
 80106ce:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 80106d0:	798b      	ldrb	r3, [r1, #6]
 80106d2:	f892 c006 	ldrb.w	ip, [r2, #6]
 80106d6:	ea83 030c 	eor.w	r3, r3, ip
 80106da:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 80106dc:	79cb      	ldrb	r3, [r1, #7]
 80106de:	f892 c007 	ldrb.w	ip, [r2, #7]
 80106e2:	ea83 030c 	eor.w	r3, r3, ip
 80106e6:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 80106e8:	7a0b      	ldrb	r3, [r1, #8]
 80106ea:	f892 c008 	ldrb.w	ip, [r2, #8]
 80106ee:	ea83 030c 	eor.w	r3, r3, ip
 80106f2:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 80106f4:	7a4b      	ldrb	r3, [r1, #9]
 80106f6:	f892 c009 	ldrb.w	ip, [r2, #9]
 80106fa:	ea83 030c 	eor.w	r3, r3, ip
 80106fe:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 8010700:	7a8b      	ldrb	r3, [r1, #10]
 8010702:	f892 c00a 	ldrb.w	ip, [r2, #10]
 8010706:	ea83 030c 	eor.w	r3, r3, ip
 801070a:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 801070c:	7acb      	ldrb	r3, [r1, #11]
 801070e:	f892 c00b 	ldrb.w	ip, [r2, #11]
 8010712:	ea83 030c 	eor.w	r3, r3, ip
 8010716:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 8010718:	7b0b      	ldrb	r3, [r1, #12]
 801071a:	f892 c00c 	ldrb.w	ip, [r2, #12]
 801071e:	ea83 030c 	eor.w	r3, r3, ip
 8010722:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 8010724:	7b4b      	ldrb	r3, [r1, #13]
 8010726:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801072a:	ea83 030c 	eor.w	r3, r3, ip
 801072e:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 8010730:	7b8b      	ldrb	r3, [r1, #14]
 8010732:	f892 c00e 	ldrb.w	ip, [r2, #14]
 8010736:	ea83 030c 	eor.w	r3, r3, ip
 801073a:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 801073c:	7bcb      	ldrb	r3, [r1, #15]
 801073e:	7bd2      	ldrb	r2, [r2, #15]
 8010740:	4053      	eors	r3, r2
 8010742:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 8010744:	4770      	bx	lr

08010746 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 8010746:	b508      	push	{r3, lr}
    xor_block(d, k);
 8010748:	f7ff ff5d 	bl	8010606 <xor_block>
}
 801074c:	bd08      	pop	{r3, pc}
	...

08010750 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8010750:	7802      	ldrb	r2, [r0, #0]
 8010752:	4b18      	ldr	r3, [pc, #96]	; (80107b4 <shift_sub_rows+0x64>)
 8010754:	5c9a      	ldrb	r2, [r3, r2]
 8010756:	7002      	strb	r2, [r0, #0]
 8010758:	7902      	ldrb	r2, [r0, #4]
 801075a:	5c9a      	ldrb	r2, [r3, r2]
 801075c:	7102      	strb	r2, [r0, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 801075e:	7a02      	ldrb	r2, [r0, #8]
 8010760:	5c9a      	ldrb	r2, [r3, r2]
 8010762:	7202      	strb	r2, [r0, #8]
 8010764:	7b02      	ldrb	r2, [r0, #12]
 8010766:	5c9a      	ldrb	r2, [r3, r2]
 8010768:	7302      	strb	r2, [r0, #12]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 801076a:	7842      	ldrb	r2, [r0, #1]
 801076c:	7941      	ldrb	r1, [r0, #5]
 801076e:	5c59      	ldrb	r1, [r3, r1]
 8010770:	7041      	strb	r1, [r0, #1]
 8010772:	7a41      	ldrb	r1, [r0, #9]
 8010774:	5c59      	ldrb	r1, [r3, r1]
 8010776:	7141      	strb	r1, [r0, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 8010778:	7b41      	ldrb	r1, [r0, #13]
 801077a:	5c59      	ldrb	r1, [r3, r1]
 801077c:	7241      	strb	r1, [r0, #9]
 801077e:	5c9a      	ldrb	r2, [r3, r2]
 8010780:	7342      	strb	r2, [r0, #13]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 8010782:	7882      	ldrb	r2, [r0, #2]
 8010784:	7a81      	ldrb	r1, [r0, #10]
 8010786:	5c59      	ldrb	r1, [r3, r1]
 8010788:	7081      	strb	r1, [r0, #2]
 801078a:	5c9a      	ldrb	r2, [r3, r2]
 801078c:	7282      	strb	r2, [r0, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 801078e:	7982      	ldrb	r2, [r0, #6]
 8010790:	7b81      	ldrb	r1, [r0, #14]
 8010792:	5c59      	ldrb	r1, [r3, r1]
 8010794:	7181      	strb	r1, [r0, #6]
 8010796:	5c9a      	ldrb	r2, [r3, r2]
 8010798:	7382      	strb	r2, [r0, #14]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 801079a:	7bc2      	ldrb	r2, [r0, #15]
 801079c:	7ac1      	ldrb	r1, [r0, #11]
 801079e:	5c59      	ldrb	r1, [r3, r1]
 80107a0:	73c1      	strb	r1, [r0, #15]
 80107a2:	79c1      	ldrb	r1, [r0, #7]
 80107a4:	5c59      	ldrb	r1, [r3, r1]
 80107a6:	72c1      	strb	r1, [r0, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 80107a8:	78c1      	ldrb	r1, [r0, #3]
 80107aa:	5c59      	ldrb	r1, [r3, r1]
 80107ac:	71c1      	strb	r1, [r0, #7]
 80107ae:	5c9b      	ldrb	r3, [r3, r2]
 80107b0:	70c3      	strb	r3, [r0, #3]
}
 80107b2:	4770      	bx	lr
 80107b4:	0801488c 	.word	0x0801488c

080107b8 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 80107b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80107bc:	b084      	sub	sp, #16
 80107be:	4604      	mov	r4, r0
    block_copy(st, dt);
 80107c0:	4601      	mov	r1, r0
 80107c2:	4668      	mov	r0, sp
 80107c4:	f7ff fef3 	bl	80105ae <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 80107c8:	f89d c000 	ldrb.w	ip, [sp]
 80107cc:	4b6a      	ldr	r3, [pc, #424]	; (8010978 <mix_sub_columns+0x1c0>)
 80107ce:	f813 000c 	ldrb.w	r0, [r3, ip]
 80107d2:	f89d 8005 	ldrb.w	r8, [sp, #5]
 80107d6:	4a69      	ldr	r2, [pc, #420]	; (801097c <mix_sub_columns+0x1c4>)
 80107d8:	f812 9008 	ldrb.w	r9, [r2, r8]
 80107dc:	f89d e00a 	ldrb.w	lr, [sp, #10]
 80107e0:	4967      	ldr	r1, [pc, #412]	; (8010980 <mix_sub_columns+0x1c8>)
 80107e2:	f811 500e 	ldrb.w	r5, [r1, lr]
 80107e6:	f89d 700f 	ldrb.w	r7, [sp, #15]
 80107ea:	5dce      	ldrb	r6, [r1, r7]
 80107ec:	ea80 0009 	eor.w	r0, r0, r9
 80107f0:	4068      	eors	r0, r5
 80107f2:	4070      	eors	r0, r6
 80107f4:	7020      	strb	r0, [r4, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 80107f6:	f811 000c 	ldrb.w	r0, [r1, ip]
 80107fa:	f813 a008 	ldrb.w	sl, [r3, r8]
 80107fe:	f812 900e 	ldrb.w	r9, [r2, lr]
 8010802:	ea80 0a0a 	eor.w	sl, r0, sl
 8010806:	ea89 090a 	eor.w	r9, r9, sl
 801080a:	ea86 0609 	eor.w	r6, r6, r9
 801080e:	7066      	strb	r6, [r4, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8010810:	f811 8008 	ldrb.w	r8, [r1, r8]
 8010814:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8010818:	5dd6      	ldrb	r6, [r2, r7]
 801081a:	ea80 0008 	eor.w	r0, r0, r8
 801081e:	ea8e 0000 	eor.w	r0, lr, r0
 8010822:	4070      	eors	r0, r6
 8010824:	70a0      	strb	r0, [r4, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8010826:	f812 600c 	ldrb.w	r6, [r2, ip]
 801082a:	5dd8      	ldrb	r0, [r3, r7]
 801082c:	ea86 0608 	eor.w	r6, r6, r8
 8010830:	4075      	eors	r5, r6
 8010832:	4045      	eors	r5, r0
 8010834:	70e5      	strb	r5, [r4, #3]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8010836:	f89d c004 	ldrb.w	ip, [sp, #4]
 801083a:	f813 000c 	ldrb.w	r0, [r3, ip]
 801083e:	f89d 8009 	ldrb.w	r8, [sp, #9]
 8010842:	f812 9008 	ldrb.w	r9, [r2, r8]
 8010846:	f89d e00e 	ldrb.w	lr, [sp, #14]
 801084a:	f811 500e 	ldrb.w	r5, [r1, lr]
 801084e:	f89d 7003 	ldrb.w	r7, [sp, #3]
 8010852:	5dce      	ldrb	r6, [r1, r7]
 8010854:	ea80 0009 	eor.w	r0, r0, r9
 8010858:	4068      	eors	r0, r5
 801085a:	4070      	eors	r0, r6
 801085c:	7120      	strb	r0, [r4, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 801085e:	f811 000c 	ldrb.w	r0, [r1, ip]
 8010862:	f813 a008 	ldrb.w	sl, [r3, r8]
 8010866:	f812 900e 	ldrb.w	r9, [r2, lr]
 801086a:	ea80 0a0a 	eor.w	sl, r0, sl
 801086e:	ea89 090a 	eor.w	r9, r9, sl
 8010872:	ea86 0609 	eor.w	r6, r6, r9
 8010876:	7166      	strb	r6, [r4, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8010878:	f811 8008 	ldrb.w	r8, [r1, r8]
 801087c:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8010880:	5dd6      	ldrb	r6, [r2, r7]
 8010882:	ea80 0008 	eor.w	r0, r0, r8
 8010886:	ea8e 0000 	eor.w	r0, lr, r0
 801088a:	4070      	eors	r0, r6
 801088c:	71a0      	strb	r0, [r4, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 801088e:	f812 600c 	ldrb.w	r6, [r2, ip]
 8010892:	5dd8      	ldrb	r0, [r3, r7]
 8010894:	ea86 0608 	eor.w	r6, r6, r8
 8010898:	4075      	eors	r5, r6
 801089a:	4045      	eors	r5, r0
 801089c:	71e5      	strb	r5, [r4, #7]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 801089e:	f89d c008 	ldrb.w	ip, [sp, #8]
 80108a2:	f813 000c 	ldrb.w	r0, [r3, ip]
 80108a6:	f89d 800d 	ldrb.w	r8, [sp, #13]
 80108aa:	f812 9008 	ldrb.w	r9, [r2, r8]
 80108ae:	f89d e002 	ldrb.w	lr, [sp, #2]
 80108b2:	f811 500e 	ldrb.w	r5, [r1, lr]
 80108b6:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80108ba:	5dce      	ldrb	r6, [r1, r7]
 80108bc:	ea80 0009 	eor.w	r0, r0, r9
 80108c0:	4068      	eors	r0, r5
 80108c2:	4070      	eors	r0, r6
 80108c4:	7220      	strb	r0, [r4, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 80108c6:	f811 000c 	ldrb.w	r0, [r1, ip]
 80108ca:	f813 a008 	ldrb.w	sl, [r3, r8]
 80108ce:	f812 900e 	ldrb.w	r9, [r2, lr]
 80108d2:	ea80 0a0a 	eor.w	sl, r0, sl
 80108d6:	ea89 090a 	eor.w	r9, r9, sl
 80108da:	ea86 0609 	eor.w	r6, r6, r9
 80108de:	7266      	strb	r6, [r4, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 80108e0:	f811 8008 	ldrb.w	r8, [r1, r8]
 80108e4:	f813 e00e 	ldrb.w	lr, [r3, lr]
 80108e8:	5dd6      	ldrb	r6, [r2, r7]
 80108ea:	ea80 0008 	eor.w	r0, r0, r8
 80108ee:	ea8e 0000 	eor.w	r0, lr, r0
 80108f2:	4070      	eors	r0, r6
 80108f4:	72a0      	strb	r0, [r4, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 80108f6:	f812 600c 	ldrb.w	r6, [r2, ip]
 80108fa:	5dd8      	ldrb	r0, [r3, r7]
 80108fc:	ea86 0608 	eor.w	r6, r6, r8
 8010900:	4075      	eors	r5, r6
 8010902:	4045      	eors	r5, r0
 8010904:	72e5      	strb	r5, [r4, #11]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 8010906:	f89d 600c 	ldrb.w	r6, [sp, #12]
 801090a:	5d98      	ldrb	r0, [r3, r6]
 801090c:	f89d 8001 	ldrb.w	r8, [sp, #1]
 8010910:	f812 9008 	ldrb.w	r9, [r2, r8]
 8010914:	f89d 7006 	ldrb.w	r7, [sp, #6]
 8010918:	f811 c007 	ldrb.w	ip, [r1, r7]
 801091c:	f89d 500b 	ldrb.w	r5, [sp, #11]
 8010920:	f811 e005 	ldrb.w	lr, [r1, r5]
 8010924:	ea80 0009 	eor.w	r0, r0, r9
 8010928:	ea8c 0000 	eor.w	r0, ip, r0
 801092c:	ea8e 0000 	eor.w	r0, lr, r0
 8010930:	7320      	strb	r0, [r4, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8010932:	5d88      	ldrb	r0, [r1, r6]
 8010934:	f813 a008 	ldrb.w	sl, [r3, r8]
 8010938:	f812 9007 	ldrb.w	r9, [r2, r7]
 801093c:	ea80 0a0a 	eor.w	sl, r0, sl
 8010940:	ea89 090a 	eor.w	r9, r9, sl
 8010944:	ea8e 0e09 	eor.w	lr, lr, r9
 8010948:	f884 e00d 	strb.w	lr, [r4, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 801094c:	f811 1008 	ldrb.w	r1, [r1, r8]
 8010950:	f813 e007 	ldrb.w	lr, [r3, r7]
 8010954:	5d57      	ldrb	r7, [r2, r5]
 8010956:	4048      	eors	r0, r1
 8010958:	ea8e 0000 	eor.w	r0, lr, r0
 801095c:	4078      	eors	r0, r7
 801095e:	73a0      	strb	r0, [r4, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8010960:	5d92      	ldrb	r2, [r2, r6]
 8010962:	5d5b      	ldrb	r3, [r3, r5]
 8010964:	4051      	eors	r1, r2
 8010966:	ea8c 0c01 	eor.w	ip, ip, r1
 801096a:	ea83 0c0c 	eor.w	ip, r3, ip
 801096e:	f884 c00f 	strb.w	ip, [r4, #15]
  }
 8010972:	b004      	add	sp, #16
 8010974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010978:	0801468c 	.word	0x0801468c
 801097c:	0801478c 	.word	0x0801478c
 8010980:	0801488c 	.word	0x0801488c

08010984 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 8010984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010988:	4614      	mov	r4, r2
    uint8_t cc, rc, hi;

    switch( keylen )
 801098a:	f1a1 0310 	sub.w	r3, r1, #16
 801098e:	b2da      	uxtb	r2, r3
 8010990:	2a10      	cmp	r2, #16
 8010992:	d807      	bhi.n	80109a4 <lorawan_aes_set_key+0x20>
 8010994:	460d      	mov	r5, r1
 8010996:	2301      	movs	r3, #1
 8010998:	4093      	lsls	r3, r2
 801099a:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 801099e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80109a2:	b92b      	cbnz	r3, 80109b0 <lorawan_aes_set_key+0x2c>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 80109a4:	2300      	movs	r3, #0
 80109a6:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
        return ( uint8_t )-1;
 80109aa:	20ff      	movs	r0, #255	; 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 80109ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    block_copy_nn(ctx->ksch, key, keylen);
 80109b0:	460a      	mov	r2, r1
 80109b2:	4601      	mov	r1, r0
 80109b4:	4620      	mov	r0, r4
 80109b6:	f7ff fe1b 	bl	80105f0 <copy_block_nn>
    hi = (keylen + 28) << 2;
 80109ba:	f105 031c 	add.w	r3, r5, #28
 80109be:	b2db      	uxtb	r3, r3
 80109c0:	009b      	lsls	r3, r3, #2
 80109c2:	fa5f fe83 	uxtb.w	lr, r3
    ctx->rnd = (hi >> 4) - 1;
 80109c6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80109ca:	3b01      	subs	r3, #1
 80109cc:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80109d0:	462b      	mov	r3, r5
 80109d2:	f04f 0c01 	mov.w	ip, #1
 80109d6:	e023      	b.n	8010a20 <lorawan_aes_set_key+0x9c>
        else if( keylen > 24 && cc % keylen == 16 )
 80109d8:	2d18      	cmp	r5, #24
 80109da:	d901      	bls.n	80109e0 <lorawan_aes_set_key+0x5c>
 80109dc:	2a10      	cmp	r2, #16
 80109de:	d047      	beq.n	8010a70 <lorawan_aes_set_key+0xec>
        tt = cc - keylen;
 80109e0:	1b5a      	subs	r2, r3, r5
 80109e2:	b2d2      	uxtb	r2, r2
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 80109e4:	f814 9002 	ldrb.w	r9, [r4, r2]
 80109e8:	ea89 0808 	eor.w	r8, r9, r8
 80109ec:	f804 8000 	strb.w	r8, [r4, r0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 80109f0:	f102 0801 	add.w	r8, r2, #1
 80109f4:	f814 8008 	ldrb.w	r8, [r4, r8]
 80109f8:	f100 0901 	add.w	r9, r0, #1
 80109fc:	ea88 0707 	eor.w	r7, r8, r7
 8010a00:	f804 7009 	strb.w	r7, [r4, r9]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 8010a04:	1c97      	adds	r7, r2, #2
 8010a06:	5de7      	ldrb	r7, [r4, r7]
 8010a08:	f100 0802 	add.w	r8, r0, #2
 8010a0c:	407e      	eors	r6, r7
 8010a0e:	f804 6008 	strb.w	r6, [r4, r8]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8010a12:	3203      	adds	r2, #3
 8010a14:	5ca6      	ldrb	r6, [r4, r2]
 8010a16:	1cc2      	adds	r2, r0, #3
 8010a18:	4071      	eors	r1, r6
 8010a1a:	54a1      	strb	r1, [r4, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8010a1c:	3304      	adds	r3, #4
 8010a1e:	b2db      	uxtb	r3, r3
 8010a20:	4573      	cmp	r3, lr
 8010a22:	d22c      	bcs.n	8010a7e <lorawan_aes_set_key+0xfa>
        t0 = ctx->ksch[cc - 4];
 8010a24:	4618      	mov	r0, r3
 8010a26:	1f1a      	subs	r2, r3, #4
 8010a28:	f814 8002 	ldrb.w	r8, [r4, r2]
        t1 = ctx->ksch[cc - 3];
 8010a2c:	1eda      	subs	r2, r3, #3
 8010a2e:	5ca7      	ldrb	r7, [r4, r2]
        t2 = ctx->ksch[cc - 2];
 8010a30:	1e9a      	subs	r2, r3, #2
 8010a32:	5ca6      	ldrb	r6, [r4, r2]
        t3 = ctx->ksch[cc - 1];
 8010a34:	1e5a      	subs	r2, r3, #1
 8010a36:	5ca1      	ldrb	r1, [r4, r2]
        if( cc % keylen == 0 )
 8010a38:	fbb3 f2f5 	udiv	r2, r3, r5
 8010a3c:	fb05 3212 	mls	r2, r5, r2, r3
 8010a40:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8010a44:	d1c8      	bne.n	80109d8 <lorawan_aes_set_key+0x54>
            t0 = s_box(t1) ^ rc;
 8010a46:	4a0f      	ldr	r2, [pc, #60]	; (8010a84 <lorawan_aes_set_key+0x100>)
 8010a48:	f812 9007 	ldrb.w	r9, [r2, r7]
 8010a4c:	ea89 090c 	eor.w	r9, r9, ip
            t1 = s_box(t2);
 8010a50:	5d97      	ldrb	r7, [r2, r6]
            t2 = s_box(t3);
 8010a52:	5c56      	ldrb	r6, [r2, r1]
            t3 = s_box(tt);
 8010a54:	f812 1008 	ldrb.w	r1, [r2, r8]
            rc = f2(rc);
 8010a58:	ea4f 12dc 	mov.w	r2, ip, lsr #7
 8010a5c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8010a60:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8010a64:	ea82 0c4c 	eor.w	ip, r2, ip, lsl #1
 8010a68:	fa5f fc8c 	uxtb.w	ip, ip
            t0 = s_box(t1) ^ rc;
 8010a6c:	46c8      	mov	r8, r9
 8010a6e:	e7b7      	b.n	80109e0 <lorawan_aes_set_key+0x5c>
            t0 = s_box(t0);
 8010a70:	4a04      	ldr	r2, [pc, #16]	; (8010a84 <lorawan_aes_set_key+0x100>)
 8010a72:	f812 8008 	ldrb.w	r8, [r2, r8]
            t1 = s_box(t1);
 8010a76:	5dd7      	ldrb	r7, [r2, r7]
            t2 = s_box(t2);
 8010a78:	5d96      	ldrb	r6, [r2, r6]
            t3 = s_box(t3);
 8010a7a:	5c51      	ldrb	r1, [r2, r1]
 8010a7c:	e7b0      	b.n	80109e0 <lorawan_aes_set_key+0x5c>
    return 0;
 8010a7e:	2000      	movs	r0, #0
 8010a80:	e794      	b.n	80109ac <lorawan_aes_set_key+0x28>
 8010a82:	bf00      	nop
 8010a84:	0801488c 	.word	0x0801488c

08010a88 <lorawan_aes_encrypt>:

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
    if( ctx->rnd )
 8010a88:	f892 30f0 	ldrb.w	r3, [r2, #240]	; 0xf0
 8010a8c:	b31b      	cbz	r3, 8010ad6 <lorawan_aes_encrypt+0x4e>
{
 8010a8e:	b570      	push	{r4, r5, r6, lr}
 8010a90:	b084      	sub	sp, #16
 8010a92:	460e      	mov	r6, r1
 8010a94:	4615      	mov	r5, r2
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 8010a96:	4601      	mov	r1, r0
 8010a98:	4668      	mov	r0, sp
 8010a9a:	f7ff fdf5 	bl	8010688 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 8010a9e:	2401      	movs	r4, #1
 8010aa0:	e009      	b.n	8010ab6 <lorawan_aes_encrypt+0x2e>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 8010aa2:	4668      	mov	r0, sp
 8010aa4:	f7ff fe88 	bl	80107b8 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 8010aa8:	eb05 1104 	add.w	r1, r5, r4, lsl #4
 8010aac:	4668      	mov	r0, sp
 8010aae:	f7ff fe4a 	bl	8010746 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 8010ab2:	3401      	adds	r4, #1
 8010ab4:	b2e4      	uxtb	r4, r4
 8010ab6:	f895 30f0 	ldrb.w	r3, [r5, #240]	; 0xf0
 8010aba:	42a3      	cmp	r3, r4
 8010abc:	d8f1      	bhi.n	8010aa2 <lorawan_aes_encrypt+0x1a>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 8010abe:	4668      	mov	r0, sp
 8010ac0:	f7ff fe46 	bl	8010750 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8010ac4:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 8010ac8:	4669      	mov	r1, sp
 8010aca:	4630      	mov	r0, r6
 8010acc:	f7ff fddc 	bl	8010688 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 8010ad0:	2000      	movs	r0, #0
}
 8010ad2:	b004      	add	sp, #16
 8010ad4:	bd70      	pop	{r4, r5, r6, pc}
        return ( uint8_t )-1;
 8010ad6:	20ff      	movs	r0, #255	; 0xff
}
 8010ad8:	4770      	bx	lr
	...

08010adc <GetKeyByID>:
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8010adc:	2300      	movs	r3, #0
 8010ade:	2b09      	cmp	r3, #9
 8010ae0:	d817      	bhi.n	8010b12 <GetKeyByID+0x36>
{
 8010ae2:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 8010ae4:	4a0c      	ldr	r2, [pc, #48]	; (8010b18 <GetKeyByID+0x3c>)
 8010ae6:	6814      	ldr	r4, [r2, #0]
 8010ae8:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8010aec:	4422      	add	r2, r4
 8010aee:	7c12      	ldrb	r2, [r2, #16]
 8010af0:	4282      	cmp	r2, r0
 8010af2:	d006      	beq.n	8010b02 <GetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8010af4:	3301      	adds	r3, #1
 8010af6:	b2db      	uxtb	r3, r3
 8010af8:	2b09      	cmp	r3, #9
 8010afa:	d9f3      	bls.n	8010ae4 <GetKeyByID+0x8>
        {
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8010afc:	2003      	movs	r0, #3
}
 8010afe:	bc10      	pop	{r4}
 8010b00:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 8010b02:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 8010b06:	f10c 0c10 	add.w	ip, ip, #16
 8010b0a:	4464      	add	r4, ip
 8010b0c:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 8010b0e:	2000      	movs	r0, #0
 8010b10:	e7f5      	b.n	8010afe <GetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8010b12:	2003      	movs	r0, #3
}
 8010b14:	4770      	bx	lr
 8010b16:	bf00      	nop
 8010b18:	20000f3c 	.word	0x20000f3c

08010b1c <ComputeCmac>:
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 8010b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b20:	b0cc      	sub	sp, #304	; 0x130
 8010b22:	9e52      	ldr	r6, [sp, #328]	; 0x148
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 8010b24:	b3a9      	cbz	r1, 8010b92 <ComputeCmac+0x76>
 8010b26:	4605      	mov	r5, r0
 8010b28:	4617      	mov	r7, r2
 8010b2a:	461c      	mov	r4, r3
 8010b2c:	4688      	mov	r8, r1
 8010b2e:	b396      	cbz	r6, 8010b96 <ComputeCmac+0x7a>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 8010b30:	a802      	add	r0, sp, #8
 8010b32:	f7ff fbd7 	bl	80102e4 <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 8010b36:	a901      	add	r1, sp, #4
 8010b38:	4620      	mov	r0, r4
 8010b3a:	f7ff ffcf 	bl	8010adc <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 8010b3e:	4604      	mov	r4, r0
 8010b40:	b118      	cbz	r0, 8010b4a <ComputeCmac+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
}
 8010b42:	4620      	mov	r0, r4
 8010b44:	b04c      	add	sp, #304	; 0x130
 8010b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 8010b4a:	9901      	ldr	r1, [sp, #4]
 8010b4c:	3101      	adds	r1, #1
 8010b4e:	a802      	add	r0, sp, #8
 8010b50:	f7ff fbd7 	bl	8010302 <AES_CMAC_SetKey>
        if( micBxBuffer != NULL )
 8010b54:	b125      	cbz	r5, 8010b60 <ComputeCmac+0x44>
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 8010b56:	2210      	movs	r2, #16
 8010b58:	4629      	mov	r1, r5
 8010b5a:	a802      	add	r0, sp, #8
 8010b5c:	f7ff fbd8 	bl	8010310 <AES_CMAC_Update>
        AES_CMAC_Update( aesCmacCtx, buffer, size );
 8010b60:	463a      	mov	r2, r7
 8010b62:	4641      	mov	r1, r8
 8010b64:	a802      	add	r0, sp, #8
 8010b66:	f7ff fbd3 	bl	8010310 <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, aesCmacCtx );
 8010b6a:	a902      	add	r1, sp, #8
 8010b6c:	a848      	add	r0, sp, #288	; 0x120
 8010b6e:	f7ff fc3d 	bl	80103ec <AES_CMAC_Final>
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 8010b72:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
 8010b76:	f89d 3122 	ldrb.w	r3, [sp, #290]	; 0x122
 8010b7a:	041b      	lsls	r3, r3, #16
 8010b7c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8010b80:	f89d 2121 	ldrb.w	r2, [sp, #289]	; 0x121
 8010b84:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                              ( uint32_t ) Cmac[0] );
 8010b88:	f89d 2120 	ldrb.w	r2, [sp, #288]	; 0x120
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 8010b8c:	4313      	orrs	r3, r2
 8010b8e:	6033      	str	r3, [r6, #0]
 8010b90:	e7d7      	b.n	8010b42 <ComputeCmac+0x26>
        return SECURE_ELEMENT_ERROR_NPE;
 8010b92:	2402      	movs	r4, #2
 8010b94:	e7d5      	b.n	8010b42 <ComputeCmac+0x26>
 8010b96:	2402      	movs	r4, #2
 8010b98:	e7d3      	b.n	8010b42 <ComputeCmac+0x26>
	...

08010b9c <SecureElementInit>:
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    if( nvm == NULL )
 8010b9c:	b168      	cbz	r0, 8010bba <SecureElementInit+0x1e>
{
 8010b9e:	b510      	push	{r4, lr}
 8010ba0:	460c      	mov	r4, r1
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 8010ba2:	4a08      	ldr	r2, [pc, #32]	; (8010bc4 <SecureElementInit+0x28>)
 8010ba4:	6010      	str	r0, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 8010ba6:	22c0      	movs	r2, #192	; 0xc0
 8010ba8:	4907      	ldr	r1, [pc, #28]	; (8010bc8 <SecureElementInit+0x2c>)
 8010baa:	f000 faaa 	bl	8011102 <memcpy1>
#endif /* LORAMAC_CLASSB_ENABLED */
#endif /* LORAWAN_KMS */

#if !defined( SECURE_ELEMENT_PRE_PROVISIONED )
#if( STATIC_DEVICE_EUI == 0 )
    if (seGetUniqueId != NULL)
 8010bae:	b134      	cbz	r4, 8010bbe <SecureElementInit+0x22>
    {
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
 8010bb0:	4b04      	ldr	r3, [pc, #16]	; (8010bc4 <SecureElementInit+0x28>)
 8010bb2:	6818      	ldr	r0, [r3, #0]
 8010bb4:	47a0      	blx	r4
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 8010bb6:	2000      	movs	r0, #0
}
 8010bb8:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8010bba:	2002      	movs	r0, #2
}
 8010bbc:	4770      	bx	lr
    return SECURE_ELEMENT_SUCCESS;
 8010bbe:	2000      	movs	r0, #0
 8010bc0:	e7fa      	b.n	8010bb8 <SecureElementInit+0x1c>
 8010bc2:	bf00      	nop
 8010bc4:	20000f3c 	.word	0x20000f3c
 8010bc8:	0803e500 	.word	0x0803e500

08010bcc <SecureElementGetKeyByID>:
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, uint8_t* extractable_key )
#endif /* LORAWAN_KMS */
{
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 8010bcc:	2300      	movs	r3, #0
 8010bce:	2b09      	cmp	r3, #9
 8010bd0:	d817      	bhi.n	8010c02 <SecureElementGetKeyByID+0x36>
{
 8010bd2:	b410      	push	{r4}
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 8010bd4:	4a0c      	ldr	r2, [pc, #48]	; (8010c08 <SecureElementGetKeyByID+0x3c>)
 8010bd6:	6814      	ldr	r4, [r2, #0]
 8010bd8:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8010bdc:	4422      	add	r2, r4
 8010bde:	7c12      	ldrb	r2, [r2, #16]
 8010be0:	4282      	cmp	r2, r0
 8010be2:	d006      	beq.n	8010bf2 <SecureElementGetKeyByID+0x26>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 8010be4:	3301      	adds	r3, #1
 8010be6:	b2db      	uxtb	r3, r3
 8010be8:	2b09      	cmp	r3, #9
 8010bea:	d9f3      	bls.n	8010bd4 <SecureElementGetKeyByID+0x8>
            *keyItem = &(SeNvm->KeyList[i]);
            return SECURE_ELEMENT_SUCCESS;
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8010bec:	2003      	movs	r0, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 8010bee:	bc10      	pop	{r4}
 8010bf0:	4770      	bx	lr
            *keyItem = &(SeNvm->KeyList[i]);
 8010bf2:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 8010bf6:	f10c 0c10 	add.w	ip, ip, #16
 8010bfa:	4464      	add	r4, ip
 8010bfc:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 8010bfe:	2000      	movs	r0, #0
 8010c00:	e7f5      	b.n	8010bee <SecureElementGetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8010c02:	2003      	movs	r0, #3
}
 8010c04:	4770      	bx	lr
 8010c06:	bf00      	nop
 8010c08:	20000f3c 	.word	0x20000f3c

08010c0c <PrintKey>:
{
 8010c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c10:	b095      	sub	sp, #84	; 0x54
 8010c12:	4604      	mov	r4, r0
    retval = SecureElementGetKeyByID(key, &keyItem);
 8010c14:	a913      	add	r1, sp, #76	; 0x4c
 8010c16:	f7ff ffd9 	bl	8010bcc <SecureElementGetKeyByID>
    if (retval == SECURE_ELEMENT_SUCCESS)
 8010c1a:	2800      	cmp	r0, #0
 8010c1c:	d154      	bne.n	8010cc8 <PrintKey+0xbc>
        if (key == APP_KEY)
 8010c1e:	b1b4      	cbz	r4, 8010c4e <PrintKey+0x42>
        else if (key == NWK_KEY)
 8010c20:	2c01      	cmp	r4, #1
 8010c22:	d054      	beq.n	8010cce <PrintKey+0xc2>
        else if (key == APP_S_KEY)
 8010c24:	2c03      	cmp	r4, #3
 8010c26:	d059      	beq.n	8010cdc <PrintKey+0xd0>
        else if (key == NWK_S_KEY)
 8010c28:	2c02      	cmp	r4, #2
 8010c2a:	d05e      	beq.n	8010cea <PrintKey+0xde>
        else if (key == MC_ROOT_KEY)
 8010c2c:	2c04      	cmp	r4, #4
 8010c2e:	d063      	beq.n	8010cf8 <PrintKey+0xec>
        else if (key == MC_KE_KEY)
 8010c30:	2c7f      	cmp	r4, #127	; 0x7f
 8010c32:	d068      	beq.n	8010d06 <PrintKey+0xfa>
        else if (key == MC_KEY_0)
 8010c34:	2c80      	cmp	r4, #128	; 0x80
 8010c36:	d06d      	beq.n	8010d14 <PrintKey+0x108>
        else if (key == MC_APP_S_KEY_0)
 8010c38:	2c81      	cmp	r4, #129	; 0x81
 8010c3a:	d072      	beq.n	8010d22 <PrintKey+0x116>
        else if (key == MC_NWK_S_KEY_0)
 8010c3c:	2c82      	cmp	r4, #130	; 0x82
 8010c3e:	d10c      	bne.n	8010c5a <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 8010c40:	4b3b      	ldr	r3, [pc, #236]	; (8010d30 <PrintKey+0x124>)
 8010c42:	2200      	movs	r2, #0
 8010c44:	4611      	mov	r1, r2
 8010c46:	2002      	movs	r0, #2
 8010c48:	f002 f904 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
 8010c4c:	e005      	b.n	8010c5a <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 8010c4e:	4b39      	ldr	r3, [pc, #228]	; (8010d34 <PrintKey+0x128>)
 8010c50:	2200      	movs	r2, #0
 8010c52:	4611      	mov	r1, r2
 8010c54:	2002      	movs	r0, #2
 8010c56:	f002 f8fd 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8010c5a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010c5c:	785a      	ldrb	r2, [r3, #1]
 8010c5e:	9210      	str	r2, [sp, #64]	; 0x40
 8010c60:	7899      	ldrb	r1, [r3, #2]
 8010c62:	9111      	str	r1, [sp, #68]	; 0x44
 8010c64:	78da      	ldrb	r2, [r3, #3]
 8010c66:	7919      	ldrb	r1, [r3, #4]
 8010c68:	7958      	ldrb	r0, [r3, #5]
 8010c6a:	799c      	ldrb	r4, [r3, #6]
 8010c6c:	79dd      	ldrb	r5, [r3, #7]
 8010c6e:	7a1e      	ldrb	r6, [r3, #8]
 8010c70:	7a5f      	ldrb	r7, [r3, #9]
 8010c72:	f893 c00a 	ldrb.w	ip, [r3, #10]
 8010c76:	f893 e00b 	ldrb.w	lr, [r3, #11]
 8010c7a:	f893 800c 	ldrb.w	r8, [r3, #12]
 8010c7e:	f893 900d 	ldrb.w	r9, [r3, #13]
 8010c82:	f893 a00e 	ldrb.w	sl, [r3, #14]
 8010c86:	f893 b00f 	ldrb.w	fp, [r3, #15]
 8010c8a:	7c1b      	ldrb	r3, [r3, #16]
 8010c8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8010c8e:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8010c92:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8010c96:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8010c9a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8010c9e:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 8010ca2:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8010ca6:	9708      	str	r7, [sp, #32]
 8010ca8:	9607      	str	r6, [sp, #28]
 8010caa:	9506      	str	r5, [sp, #24]
 8010cac:	9405      	str	r4, [sp, #20]
 8010cae:	9004      	str	r0, [sp, #16]
 8010cb0:	9103      	str	r1, [sp, #12]
 8010cb2:	9202      	str	r2, [sp, #8]
 8010cb4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010cb6:	9101      	str	r1, [sp, #4]
 8010cb8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010cba:	9200      	str	r2, [sp, #0]
 8010cbc:	4b1e      	ldr	r3, [pc, #120]	; (8010d38 <PrintKey+0x12c>)
 8010cbe:	2200      	movs	r2, #0
 8010cc0:	4611      	mov	r1, r2
 8010cc2:	2002      	movs	r0, #2
 8010cc4:	f002 f8c6 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
}
 8010cc8:	b015      	add	sp, #84	; 0x54
 8010cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 8010cce:	4b1b      	ldr	r3, [pc, #108]	; (8010d3c <PrintKey+0x130>)
 8010cd0:	2200      	movs	r2, #0
 8010cd2:	4611      	mov	r1, r2
 8010cd4:	2002      	movs	r0, #2
 8010cd6:	f002 f8bd 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
 8010cda:	e7be      	b.n	8010c5a <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 8010cdc:	4b18      	ldr	r3, [pc, #96]	; (8010d40 <PrintKey+0x134>)
 8010cde:	2200      	movs	r2, #0
 8010ce0:	4611      	mov	r1, r2
 8010ce2:	2002      	movs	r0, #2
 8010ce4:	f002 f8b6 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
 8010ce8:	e7b7      	b.n	8010c5a <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 8010cea:	4b16      	ldr	r3, [pc, #88]	; (8010d44 <PrintKey+0x138>)
 8010cec:	2200      	movs	r2, #0
 8010cee:	4611      	mov	r1, r2
 8010cf0:	2002      	movs	r0, #2
 8010cf2:	f002 f8af 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
 8010cf6:	e7b0      	b.n	8010c5a <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 8010cf8:	4b13      	ldr	r3, [pc, #76]	; (8010d48 <PrintKey+0x13c>)
 8010cfa:	2200      	movs	r2, #0
 8010cfc:	4611      	mov	r1, r2
 8010cfe:	2002      	movs	r0, #2
 8010d00:	f002 f8a8 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
 8010d04:	e7a9      	b.n	8010c5a <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 8010d06:	4b11      	ldr	r3, [pc, #68]	; (8010d4c <PrintKey+0x140>)
 8010d08:	2200      	movs	r2, #0
 8010d0a:	4611      	mov	r1, r2
 8010d0c:	2002      	movs	r0, #2
 8010d0e:	f002 f8a1 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
 8010d12:	e7a2      	b.n	8010c5a <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 8010d14:	4b0e      	ldr	r3, [pc, #56]	; (8010d50 <PrintKey+0x144>)
 8010d16:	2200      	movs	r2, #0
 8010d18:	4611      	mov	r1, r2
 8010d1a:	2002      	movs	r0, #2
 8010d1c:	f002 f89a 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
 8010d20:	e79b      	b.n	8010c5a <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 8010d22:	4b0c      	ldr	r3, [pc, #48]	; (8010d54 <PrintKey+0x148>)
 8010d24:	2200      	movs	r2, #0
 8010d26:	4611      	mov	r1, r2
 8010d28:	2002      	movs	r0, #2
 8010d2a:	f002 f893 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
 8010d2e:	e794      	b.n	8010c5a <PrintKey+0x4e>
 8010d30:	08014a4c 	.word	0x08014a4c
 8010d34:	0801498c 	.word	0x0801498c
 8010d38:	08014a64 	.word	0x08014a64
 8010d3c:	080149a4 	.word	0x080149a4
 8010d40:	080149bc 	.word	0x080149bc
 8010d44:	080149d4 	.word	0x080149d4
 8010d48:	080149ec 	.word	0x080149ec
 8010d4c:	08014a04 	.word	0x08014a04
 8010d50:	08014a1c 	.word	0x08014a1c
 8010d54:	08014a34 	.word	0x08014a34

08010d58 <SecureElementPrintKeys>:

SecureElementStatus_t SecureElementPrintKeys( void )
{
 8010d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d5a:	b089      	sub	sp, #36	; 0x24
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 8010d5c:	4b28      	ldr	r3, [pc, #160]	; (8010e00 <SecureElementPrintKeys+0xa8>)
 8010d5e:	2200      	movs	r2, #0
 8010d60:	4611      	mov	r1, r2
 8010d62:	2002      	movs	r0, #2
 8010d64:	f002 f876 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 8010d68:	2000      	movs	r0, #0
 8010d6a:	f7ff ff4f 	bl	8010c0c <PrintKey>
    PrintKey(NWK_KEY);
 8010d6e:	2001      	movs	r0, #1
 8010d70:	f7ff ff4c 	bl	8010c0c <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 8010d74:	4b23      	ldr	r3, [pc, #140]	; (8010e04 <SecureElementPrintKeys+0xac>)
 8010d76:	2200      	movs	r2, #0
 8010d78:	4611      	mov	r1, r2
 8010d7a:	2002      	movs	r0, #2
 8010d7c:	f002 f86a 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 8010d80:	2003      	movs	r0, #3
 8010d82:	f7ff ff43 	bl	8010c0c <PrintKey>
    PrintKey(NWK_S_KEY);
 8010d86:	2002      	movs	r0, #2
 8010d88:	f7ff ff40 	bl	8010c0c <PrintKey>
#endif /* KEY_EXTRACTABLE */
    MW_LOG(TS_OFF, VLEVEL_M, "###### IDs  ######\r\n");
 8010d8c:	4b1e      	ldr	r3, [pc, #120]	; (8010e08 <SecureElementPrintKeys+0xb0>)
 8010d8e:	2200      	movs	r2, #0
 8010d90:	4611      	mov	r1, r2
 8010d92:	2002      	movs	r0, #2
 8010d94:	f002 f85e 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8010d98:	4c1c      	ldr	r4, [pc, #112]	; (8010e0c <SecureElementPrintKeys+0xb4>)
 8010d9a:	6823      	ldr	r3, [r4, #0]
 8010d9c:	781a      	ldrb	r2, [r3, #0]
 8010d9e:	7859      	ldrb	r1, [r3, #1]
 8010da0:	7898      	ldrb	r0, [r3, #2]
 8010da2:	78dd      	ldrb	r5, [r3, #3]
 8010da4:	791e      	ldrb	r6, [r3, #4]
 8010da6:	795f      	ldrb	r7, [r3, #5]
 8010da8:	f893 c006 	ldrb.w	ip, [r3, #6]
 8010dac:	79db      	ldrb	r3, [r3, #7]
 8010dae:	9307      	str	r3, [sp, #28]
 8010db0:	f8cd c018 	str.w	ip, [sp, #24]
 8010db4:	9705      	str	r7, [sp, #20]
 8010db6:	9604      	str	r6, [sp, #16]
 8010db8:	9503      	str	r5, [sp, #12]
 8010dba:	9002      	str	r0, [sp, #8]
 8010dbc:	9101      	str	r1, [sp, #4]
 8010dbe:	9200      	str	r2, [sp, #0]
 8010dc0:	4b13      	ldr	r3, [pc, #76]	; (8010e10 <SecureElementPrintKeys+0xb8>)
 8010dc2:	2200      	movs	r2, #0
 8010dc4:	4611      	mov	r1, r2
 8010dc6:	2002      	movs	r0, #2
 8010dc8:	f002 f844 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8010dcc:	6823      	ldr	r3, [r4, #0]
 8010dce:	7a1a      	ldrb	r2, [r3, #8]
 8010dd0:	7a59      	ldrb	r1, [r3, #9]
 8010dd2:	7a98      	ldrb	r0, [r3, #10]
 8010dd4:	7adc      	ldrb	r4, [r3, #11]
 8010dd6:	7b1d      	ldrb	r5, [r3, #12]
 8010dd8:	7b5e      	ldrb	r6, [r3, #13]
 8010dda:	7b9f      	ldrb	r7, [r3, #14]
 8010ddc:	7bdb      	ldrb	r3, [r3, #15]
 8010dde:	9307      	str	r3, [sp, #28]
 8010de0:	9706      	str	r7, [sp, #24]
 8010de2:	9605      	str	r6, [sp, #20]
 8010de4:	9504      	str	r5, [sp, #16]
 8010de6:	9403      	str	r4, [sp, #12]
 8010de8:	9002      	str	r0, [sp, #8]
 8010dea:	9101      	str	r1, [sp, #4]
 8010dec:	9200      	str	r2, [sp, #0]
 8010dee:	4b09      	ldr	r3, [pc, #36]	; (8010e14 <SecureElementPrintKeys+0xbc>)
 8010df0:	2200      	movs	r2, #0
 8010df2:	4611      	mov	r1, r2
 8010df4:	2002      	movs	r0, #2
 8010df6:	f002 f82d 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->JoinEui));
    return SECURE_ELEMENT_SUCCESS;
}
 8010dfa:	2000      	movs	r0, #0
 8010dfc:	b009      	add	sp, #36	; 0x24
 8010dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e00:	08014ab8 	.word	0x08014ab8
 8010e04:	08014ad0 	.word	0x08014ad0
 8010e08:	08014ae8 	.word	0x08014ae8
 8010e0c:	20000f3c 	.word	0x20000f3c
 8010e10:	08014b00 	.word	0x08014b00
 8010e14:	08014b40 	.word	0x08014b40

08010e18 <SecureElementPrintSessionKeys>:
    
SecureElementStatus_t SecureElementPrintSessionKeys( void )
{
 8010e18:	b508      	push	{r3, lr}
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    PrintKey(MC_ROOT_KEY);
 8010e1a:	2004      	movs	r0, #4
 8010e1c:	f7ff fef6 	bl	8010c0c <PrintKey>
    PrintKey(MC_KE_KEY);
 8010e20:	207f      	movs	r0, #127	; 0x7f
 8010e22:	f7ff fef3 	bl	8010c0c <PrintKey>
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    PrintKey(F_NWK_S_INT_KEY);
    PrintKey(S_NWK_S_INT_KEY);
    PrintKey(NWK_S_ENC_KEY);
#else
    PrintKey(NWK_S_KEY);
 8010e26:	2002      	movs	r0, #2
 8010e28:	f7ff fef0 	bl	8010c0c <PrintKey>
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    PrintKey(APP_S_KEY);
 8010e2c:	2003      	movs	r0, #3
 8010e2e:	f7ff feed 	bl	8010c0c <PrintKey>
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_SUCCESS;
}
 8010e32:	2000      	movs	r0, #0
 8010e34:	bd08      	pop	{r3, pc}

08010e36 <SecureElementComputeAesCmac>:
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 8010e36:	2b7e      	cmp	r3, #126	; 0x7e
 8010e38:	d80a      	bhi.n	8010e50 <SecureElementComputeAesCmac+0x1a>
{
 8010e3a:	b500      	push	{lr}
 8010e3c:	b083      	sub	sp, #12
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 8010e3e:	f8dd c010 	ldr.w	ip, [sp, #16]
 8010e42:	f8cd c000 	str.w	ip, [sp]
 8010e46:	f7ff fe69 	bl	8010b1c <ComputeCmac>
}
 8010e4a:	b003      	add	sp, #12
 8010e4c:	f85d fb04 	ldr.w	pc, [sp], #4
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8010e50:	2003      	movs	r0, #3
}
 8010e52:	4770      	bx	lr

08010e54 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
    if( buffer == NULL )
 8010e54:	b190      	cbz	r0, 8010e7c <SecureElementVerifyAesCmac+0x28>
{
 8010e56:	b510      	push	{r4, lr}
 8010e58:	b084      	sub	sp, #16
 8010e5a:	468c      	mov	ip, r1
 8010e5c:	4614      	mov	r4, r2
 8010e5e:	4601      	mov	r1, r0
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 8010e60:	2000      	movs	r0, #0
 8010e62:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 8010e64:	aa03      	add	r2, sp, #12
 8010e66:	9200      	str	r2, [sp, #0]
 8010e68:	4662      	mov	r2, ip
 8010e6a:	f7ff fe57 	bl	8010b1c <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8010e6e:	b918      	cbnz	r0, 8010e78 <SecureElementVerifyAesCmac+0x24>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 8010e70:	9b03      	ldr	r3, [sp, #12]
 8010e72:	42a3      	cmp	r3, r4
 8010e74:	d000      	beq.n	8010e78 <SecureElementVerifyAesCmac+0x24>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 8010e76:	2001      	movs	r0, #1
    }

#endif /* LORAWAN_KMS */

    return retval;
}
 8010e78:	b004      	add	sp, #16
 8010e7a:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8010e7c:	2002      	movs	r0, #2
}
 8010e7e:	4770      	bx	lr

08010e80 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 8010e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e84:	b0be      	sub	sp, #248	; 0xf8
    if( buffer == NULL || encBuffer == NULL )
 8010e86:	b350      	cbz	r0, 8010ede <SecureElementAesEncrypt+0x5e>
 8010e88:	460c      	mov	r4, r1
 8010e8a:	4615      	mov	r5, r2
 8010e8c:	461e      	mov	r6, r3
 8010e8e:	4607      	mov	r7, r0
 8010e90:	b343      	cbz	r3, 8010ee4 <SecureElementAesEncrypt+0x64>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 8010e92:	f011 0f0f 	tst.w	r1, #15
 8010e96:	d128      	bne.n	8010eea <SecureElementAesEncrypt+0x6a>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 8010e98:	22f0      	movs	r2, #240	; 0xf0
 8010e9a:	2100      	movs	r1, #0
 8010e9c:	a801      	add	r0, sp, #4
 8010e9e:	f000 f948 	bl	8011132 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 8010ea2:	4669      	mov	r1, sp
 8010ea4:	4628      	mov	r0, r5
 8010ea6:	f7ff fe19 	bl	8010adc <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 8010eaa:	4680      	mov	r8, r0
 8010eac:	b118      	cbz	r0, 8010eb6 <SecureElementAesEncrypt+0x36>
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
}
 8010eae:	4640      	mov	r0, r8
 8010eb0:	b03e      	add	sp, #248	; 0xf8
 8010eb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 8010eb6:	aa01      	add	r2, sp, #4
 8010eb8:	2110      	movs	r1, #16
 8010eba:	9800      	ldr	r0, [sp, #0]
 8010ebc:	3001      	adds	r0, #1
 8010ebe:	f7ff fd61 	bl	8010984 <lorawan_aes_set_key>
        uint8_t block = 0;
 8010ec2:	4645      	mov	r5, r8
        while( size != 0 )
 8010ec4:	e008      	b.n	8010ed8 <SecureElementAesEncrypt+0x58>
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 8010ec6:	aa01      	add	r2, sp, #4
 8010ec8:	1971      	adds	r1, r6, r5
 8010eca:	1978      	adds	r0, r7, r5
 8010ecc:	f7ff fddc 	bl	8010a88 <lorawan_aes_encrypt>
            block = block + 16;
 8010ed0:	3510      	adds	r5, #16
 8010ed2:	b2ed      	uxtb	r5, r5
            size  = size - 16;
 8010ed4:	3c10      	subs	r4, #16
 8010ed6:	b2a4      	uxth	r4, r4
        while( size != 0 )
 8010ed8:	2c00      	cmp	r4, #0
 8010eda:	d1f4      	bne.n	8010ec6 <SecureElementAesEncrypt+0x46>
 8010edc:	e7e7      	b.n	8010eae <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_NPE;
 8010ede:	f04f 0802 	mov.w	r8, #2
 8010ee2:	e7e4      	b.n	8010eae <SecureElementAesEncrypt+0x2e>
 8010ee4:	f04f 0802 	mov.w	r8, #2
 8010ee8:	e7e1      	b.n	8010eae <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8010eea:	f04f 0805 	mov.w	r8, #5
 8010eee:	e7de      	b.n	8010eae <SecureElementAesEncrypt+0x2e>

08010ef0 <SecureElementSetKey>:
{
 8010ef0:	b530      	push	{r4, r5, lr}
 8010ef2:	b085      	sub	sp, #20
    if( key == NULL )
 8010ef4:	2900      	cmp	r1, #0
 8010ef6:	d038      	beq.n	8010f6a <SecureElementSetKey+0x7a>
 8010ef8:	468c      	mov	ip, r1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8010efa:	2300      	movs	r3, #0
 8010efc:	2b09      	cmp	r3, #9
 8010efe:	d830      	bhi.n	8010f62 <SecureElementSetKey+0x72>
        if( SeNvm->KeyList[i].KeyID == keyID )
 8010f00:	4a1b      	ldr	r2, [pc, #108]	; (8010f70 <SecureElementSetKey+0x80>)
 8010f02:	6811      	ldr	r1, [r2, #0]
 8010f04:	461c      	mov	r4, r3
 8010f06:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8010f0a:	440a      	add	r2, r1
 8010f0c:	7c12      	ldrb	r2, [r2, #16]
 8010f0e:	4282      	cmp	r2, r0
 8010f10:	d002      	beq.n	8010f18 <SecureElementSetKey+0x28>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8010f12:	3301      	adds	r3, #1
 8010f14:	b2db      	uxtb	r3, r3
 8010f16:	e7f1      	b.n	8010efc <SecureElementSetKey+0xc>
            if ( keyID == MC_KEY_0 )
 8010f18:	2880      	cmp	r0, #128	; 0x80
 8010f1a:	d00a      	beq.n	8010f32 <SecureElementSetKey+0x42>
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 8010f1c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8010f20:	3310      	adds	r3, #16
 8010f22:	440b      	add	r3, r1
 8010f24:	2210      	movs	r2, #16
 8010f26:	4661      	mov	r1, ip
 8010f28:	1c58      	adds	r0, r3, #1
 8010f2a:	f000 f8ea 	bl	8011102 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 8010f2e:	2500      	movs	r5, #0
 8010f30:	e018      	b.n	8010f64 <SecureElementSetKey+0x74>
                uint8_t               decryptedKey[16] = { 0 };
 8010f32:	2300      	movs	r3, #0
 8010f34:	9300      	str	r3, [sp, #0]
 8010f36:	9301      	str	r3, [sp, #4]
 8010f38:	9302      	str	r3, [sp, #8]
 8010f3a:	9303      	str	r3, [sp, #12]
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 8010f3c:	466b      	mov	r3, sp
 8010f3e:	227f      	movs	r2, #127	; 0x7f
 8010f40:	2110      	movs	r1, #16
 8010f42:	4660      	mov	r0, ip
 8010f44:	f7ff ff9c 	bl	8010e80 <SecureElementAesEncrypt>
 8010f48:	4605      	mov	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 8010f4a:	4b09      	ldr	r3, [pc, #36]	; (8010f70 <SecureElementSetKey+0x80>)
 8010f4c:	6818      	ldr	r0, [r3, #0]
 8010f4e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8010f52:	3410      	adds	r4, #16
 8010f54:	4420      	add	r0, r4
 8010f56:	2210      	movs	r2, #16
 8010f58:	4669      	mov	r1, sp
 8010f5a:	3001      	adds	r0, #1
 8010f5c:	f000 f8d1 	bl	8011102 <memcpy1>
                return retval;
 8010f60:	e000      	b.n	8010f64 <SecureElementSetKey+0x74>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8010f62:	2503      	movs	r5, #3
}
 8010f64:	4628      	mov	r0, r5
 8010f66:	b005      	add	sp, #20
 8010f68:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8010f6a:	2502      	movs	r5, #2
 8010f6c:	e7fa      	b.n	8010f64 <SecureElementSetKey+0x74>
 8010f6e:	bf00      	nop
 8010f70:	20000f3c 	.word	0x20000f3c

08010f74 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
    if( input == NULL )
 8010f74:	b1d0      	cbz	r0, 8010fac <SecureElementDeriveAndStoreKey+0x38>
{
 8010f76:	b510      	push	{r4, lr}
 8010f78:	b084      	sub	sp, #16
 8010f7a:	4614      	mov	r4, r2
 8010f7c:	4684      	mov	ip, r0
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 8010f7e:	2a7f      	cmp	r2, #127	; 0x7f
 8010f80:	d101      	bne.n	8010f86 <SecureElementDeriveAndStoreKey+0x12>
    {
        if( rootKeyID != MC_ROOT_KEY )
 8010f82:	2904      	cmp	r1, #4
 8010f84:	d114      	bne.n	8010fb0 <SecureElementDeriveAndStoreKey+0x3c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 8010f86:	2300      	movs	r3, #0
 8010f88:	9300      	str	r3, [sp, #0]
 8010f8a:	9301      	str	r3, [sp, #4]
 8010f8c:	9302      	str	r3, [sp, #8]
 8010f8e:	9303      	str	r3, [sp, #12]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 8010f90:	466b      	mov	r3, sp
 8010f92:	460a      	mov	r2, r1
 8010f94:	2110      	movs	r1, #16
 8010f96:	4660      	mov	r0, ip
 8010f98:	f7ff ff72 	bl	8010e80 <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8010f9c:	b108      	cbz	r0, 8010fa2 <SecureElementDeriveAndStoreKey+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 8010f9e:	b004      	add	sp, #16
 8010fa0:	bd10      	pop	{r4, pc}
    retval = SecureElementSetKey( targetKeyID, key );
 8010fa2:	4669      	mov	r1, sp
 8010fa4:	4620      	mov	r0, r4
 8010fa6:	f7ff ffa3 	bl	8010ef0 <SecureElementSetKey>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8010faa:	e7f8      	b.n	8010f9e <SecureElementDeriveAndStoreKey+0x2a>
        return SECURE_ELEMENT_ERROR_NPE;
 8010fac:	2002      	movs	r0, #2
}
 8010fae:	4770      	bx	lr
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8010fb0:	2003      	movs	r0, #3
 8010fb2:	e7f4      	b.n	8010f9e <SecureElementDeriveAndStoreKey+0x2a>

08010fb4 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 8010fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fb8:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8010fbc:	9d07      	ldr	r5, [sp, #28]
 8010fbe:	9e08      	ldr	r6, [sp, #32]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 8010fc0:	b37b      	cbz	r3, 8011022 <SecureElementProcessJoinAccept+0x6e>
 8010fc2:	4698      	mov	r8, r3
 8010fc4:	b37d      	cbz	r5, 8011026 <SecureElementProcessJoinAccept+0x72>
 8010fc6:	b386      	cbz	r6, 801102a <SecureElementProcessJoinAccept+0x76>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 8010fc8:	2c21      	cmp	r4, #33	; 0x21
 8010fca:	d830      	bhi.n	801102e <SecureElementProcessJoinAccept+0x7a>
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 8010fcc:	b2a7      	uxth	r7, r4
 8010fce:	463a      	mov	r2, r7
 8010fd0:	4619      	mov	r1, r3
 8010fd2:	4628      	mov	r0, r5
 8010fd4:	f000 f895 	bl	8011102 <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 8010fd8:	1e79      	subs	r1, r7, #1
 8010fda:	1c6b      	adds	r3, r5, #1
 8010fdc:	2201      	movs	r2, #1
 8010fde:	b289      	uxth	r1, r1
 8010fe0:	eb08 0002 	add.w	r0, r8, r2
 8010fe4:	f7ff ff4c 	bl	8010e80 <SecureElementAesEncrypt>
 8010fe8:	bb20      	cbnz	r0, 8011034 <SecureElementProcessJoinAccept+0x80>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 8010fea:	7aeb      	ldrb	r3, [r5, #11]
 8010fec:	09db      	lsrs	r3, r3, #7
 8010fee:	7033      	strb	r3, [r6, #0]

    uint32_t mic = 0;

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 8010ff0:	442c      	add	r4, r5
 8010ff2:	f814 2c04 	ldrb.w	r2, [r4, #-4]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 8010ff6:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8010ffa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 8010ffe:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 8011002:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 8011006:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801100a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 801100e:	b99b      	cbnz	r3, 8011038 <SecureElementProcessJoinAccept+0x84>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 8011010:	1f39      	subs	r1, r7, #4
 8011012:	2301      	movs	r3, #1
 8011014:	b289      	uxth	r1, r1
 8011016:	4628      	mov	r0, r5
 8011018:	f7ff ff1c 	bl	8010e54 <SecureElementVerifyAesCmac>
 801101c:	b140      	cbz	r0, 8011030 <SecureElementProcessJoinAccept+0x7c>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 801101e:	2001      	movs	r0, #1
 8011020:	e006      	b.n	8011030 <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_NPE;
 8011022:	2002      	movs	r0, #2
 8011024:	e004      	b.n	8011030 <SecureElementProcessJoinAccept+0x7c>
 8011026:	2002      	movs	r0, #2
 8011028:	e002      	b.n	8011030 <SecureElementProcessJoinAccept+0x7c>
 801102a:	2002      	movs	r0, #2
 801102c:	e000      	b.n	8011030 <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 801102e:	2005      	movs	r0, #5
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 8011030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 8011034:	2007      	movs	r0, #7
 8011036:	e7fb      	b.n	8011030 <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 8011038:	2004      	movs	r0, #4
 801103a:	e7f9      	b.n	8011030 <SecureElementProcessJoinAccept+0x7c>

0801103c <SecureElementRandomNumber>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
    if( randomNum == NULL )
 801103c:	b138      	cbz	r0, 801104e <SecureElementRandomNumber+0x12>
{
 801103e:	b510      	push	{r4, lr}
 8011040:	4604      	mov	r4, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    *randomNum = Radio.Random();
 8011042:	4b04      	ldr	r3, [pc, #16]	; (8011054 <SecureElementRandomNumber+0x18>)
 8011044:	695b      	ldr	r3, [r3, #20]
 8011046:	4798      	blx	r3
 8011048:	6020      	str	r0, [r4, #0]
    return SECURE_ELEMENT_SUCCESS;
 801104a:	2000      	movs	r0, #0
}
 801104c:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 801104e:	2002      	movs	r0, #2
}
 8011050:	4770      	bx	lr
 8011052:	bf00      	nop
 8011054:	08014bf0 	.word	0x08014bf0

08011058 <SecureElementSetDevEui>:
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
    if( devEui == NULL )
 8011058:	b140      	cbz	r0, 801106c <SecureElementSetDevEui+0x14>
{
 801105a:	b508      	push	{r3, lr}
 801105c:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 801105e:	2208      	movs	r2, #8
 8011060:	4b03      	ldr	r3, [pc, #12]	; (8011070 <SecureElementSetDevEui+0x18>)
 8011062:	6818      	ldr	r0, [r3, #0]
 8011064:	f000 f84d 	bl	8011102 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8011068:	2000      	movs	r0, #0
}
 801106a:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 801106c:	2002      	movs	r0, #2
}
 801106e:	4770      	bx	lr
 8011070:	20000f3c 	.word	0x20000f3c

08011074 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
    return SeNvm->DevEui;
}
 8011074:	4b01      	ldr	r3, [pc, #4]	; (801107c <SecureElementGetDevEui+0x8>)
 8011076:	6818      	ldr	r0, [r3, #0]
 8011078:	4770      	bx	lr
 801107a:	bf00      	nop
 801107c:	20000f3c 	.word	0x20000f3c

08011080 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
    if( joinEui == NULL )
 8011080:	b148      	cbz	r0, 8011096 <SecureElementSetJoinEui+0x16>
{
 8011082:	b508      	push	{r3, lr}
 8011084:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 8011086:	4b05      	ldr	r3, [pc, #20]	; (801109c <SecureElementSetJoinEui+0x1c>)
 8011088:	6818      	ldr	r0, [r3, #0]
 801108a:	2208      	movs	r2, #8
 801108c:	4410      	add	r0, r2
 801108e:	f000 f838 	bl	8011102 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8011092:	2000      	movs	r0, #0
}
 8011094:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8011096:	2002      	movs	r0, #2
}
 8011098:	4770      	bx	lr
 801109a:	bf00      	nop
 801109c:	20000f3c 	.word	0x20000f3c

080110a0 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
    return SeNvm->JoinEui;
 80110a0:	4b01      	ldr	r3, [pc, #4]	; (80110a8 <SecureElementGetJoinEui+0x8>)
 80110a2:	6818      	ldr	r0, [r3, #0]
}
 80110a4:	3008      	adds	r0, #8
 80110a6:	4770      	bx	lr
 80110a8:	20000f3c 	.word	0x20000f3c

080110ac <rand1>:

static int32_t rand1( void );

static int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 80110ac:	4b09      	ldr	r3, [pc, #36]	; (80110d4 <rand1+0x28>)
 80110ae:	681a      	ldr	r2, [r3, #0]
 80110b0:	4909      	ldr	r1, [pc, #36]	; (80110d8 <rand1+0x2c>)
 80110b2:	f243 0039 	movw	r0, #12345	; 0x3039
 80110b6:	fb01 0002 	mla	r0, r1, r2, r0
 80110ba:	6018      	str	r0, [r3, #0]
 80110bc:	2303      	movs	r3, #3
 80110be:	fba3 2300 	umull	r2, r3, r3, r0
 80110c2:	1ac2      	subs	r2, r0, r3
 80110c4:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80110c8:	0f9b      	lsrs	r3, r3, #30
 80110ca:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
 80110ce:	1ac0      	subs	r0, r0, r3
 80110d0:	4770      	bx	lr
 80110d2:	bf00      	nop
 80110d4:	20000114 	.word	0x20000114
 80110d8:	41c64e6d 	.word	0x41c64e6d

080110dc <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 80110dc:	4b01      	ldr	r3, [pc, #4]	; (80110e4 <srand1+0x8>)
 80110de:	6018      	str	r0, [r3, #0]
}
 80110e0:	4770      	bx	lr
 80110e2:	bf00      	nop
 80110e4:	20000114 	.word	0x20000114

080110e8 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 80110e8:	b538      	push	{r3, r4, r5, lr}
 80110ea:	4605      	mov	r5, r0
 80110ec:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 80110ee:	f7ff ffdd 	bl	80110ac <rand1>
 80110f2:	1b61      	subs	r1, r4, r5
 80110f4:	3101      	adds	r1, #1
 80110f6:	fb90 f3f1 	sdiv	r3, r0, r1
 80110fa:	fb01 0013 	mls	r0, r1, r3, r0
}
 80110fe:	4428      	add	r0, r5
 8011100:	bd38      	pop	{r3, r4, r5, pc}

08011102 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 8011102:	e004      	b.n	801110e <memcpy1+0xc>
    {
        *dst++ = *src++;
 8011104:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011108:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 801110c:	461a      	mov	r2, r3
 801110e:	1e53      	subs	r3, r2, #1
 8011110:	b29b      	uxth	r3, r3
 8011112:	2a00      	cmp	r2, #0
 8011114:	d1f6      	bne.n	8011104 <memcpy1+0x2>
    }
}
 8011116:	4770      	bx	lr

08011118 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 8011118:	1e53      	subs	r3, r2, #1
 801111a:	4418      	add	r0, r3
    while( size-- )
 801111c:	e004      	b.n	8011128 <memcpyr+0x10>
    {
        *dst-- = *src++;
 801111e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011122:	f800 2901 	strb.w	r2, [r0], #-1
    while( size-- )
 8011126:	461a      	mov	r2, r3
 8011128:	1e53      	subs	r3, r2, #1
 801112a:	b29b      	uxth	r3, r3
 801112c:	2a00      	cmp	r2, #0
 801112e:	d1f6      	bne.n	801111e <memcpyr+0x6>
    }
}
 8011130:	4770      	bx	lr

08011132 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 8011132:	e002      	b.n	801113a <memset1+0x8>
    {
        *dst++ = value;
 8011134:	f800 1b01 	strb.w	r1, [r0], #1
    while( size-- )
 8011138:	461a      	mov	r2, r3
 801113a:	1e53      	subs	r3, r2, #1
 801113c:	b29b      	uxth	r3, r3
 801113e:	2a00      	cmp	r2, #0
 8011140:	d1f8      	bne.n	8011134 <memset1+0x2>
    }
}
 8011142:	4770      	bx	lr

08011144 <Crc32>:
uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 8011144:	b1f0      	cbz	r0, 8011184 <Crc32+0x40>
{
 8011146:	b510      	push	{r4, lr}
 8011148:	4604      	mov	r4, r0
    {
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
 801114a:	f04f 0e00 	mov.w	lr, #0
    uint32_t crc = 0xFFFFFFFF;
 801114e:	f04f 30ff 	mov.w	r0, #4294967295
 8011152:	e00e      	b.n	8011172 <Crc32+0x2e>
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8011154:	f340 0c00 	sbfx	ip, r0, #0, #1
 8011158:	4a0b      	ldr	r2, [pc, #44]	; (8011188 <Crc32+0x44>)
 801115a:	ea0c 0202 	and.w	r2, ip, r2
 801115e:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
 8011162:	3301      	adds	r3, #1
 8011164:	b29b      	uxth	r3, r3
 8011166:	2b07      	cmp	r3, #7
 8011168:	d9f4      	bls.n	8011154 <Crc32+0x10>
    for( uint16_t i = 0; i < length; ++i )
 801116a:	f10e 0e01 	add.w	lr, lr, #1
 801116e:	fa1f fe8e 	uxth.w	lr, lr
 8011172:	458e      	cmp	lr, r1
 8011174:	d204      	bcs.n	8011180 <Crc32+0x3c>
        crc ^= ( uint32_t )buffer[i];
 8011176:	f814 300e 	ldrb.w	r3, [r4, lr]
 801117a:	4058      	eors	r0, r3
        for( uint16_t i = 0; i < 8; i++ )
 801117c:	2300      	movs	r3, #0
 801117e:	e7f2      	b.n	8011166 <Crc32+0x22>
        }
    }

    return ~crc;
 8011180:	43c0      	mvns	r0, r0
}
 8011182:	bd10      	pop	{r4, pc}
        return 0;
 8011184:	2000      	movs	r0, #0
}
 8011186:	4770      	bx	lr
 8011188:	edb88320 	.word	0xedb88320

0801118c <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 801118c:	2001      	movs	r0, #1
 801118e:	4770      	bx	lr

08011190 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 8011190:	280a      	cmp	r0, #10
 8011192:	d807      	bhi.n	80111a4 <RadioGetLoRaBandwidthInHz+0x14>
 8011194:	e8df f000 	tbb	[pc, r0]
 8011198:	17110b20 	.word	0x17110b20
 801119c:	061e1c1a 	.word	0x061e1c1a
 80111a0:	0e08      	.short	0x0e08
 80111a2:	14          	.byte	0x14
 80111a3:	00          	.byte	0x00
 80111a4:	2000      	movs	r0, #0
 80111a6:	4770      	bx	lr
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
        break;
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 80111a8:	f642 00b1 	movw	r0, #10417	; 0x28b1
        break;
 80111ac:	4770      	bx	lr
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 80111ae:	f643 5009 	movw	r0, #15625	; 0x3d09
        break;
 80111b2:	4770      	bx	lr
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 80111b4:	f245 1061 	movw	r0, #20833	; 0x5161
        break;
 80111b8:	4770      	bx	lr
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 80111ba:	f647 2012 	movw	r0, #31250	; 0x7a12
        break;
 80111be:	4770      	bx	lr
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 80111c0:	f24a 20c3 	movw	r0, #41667	; 0xa2c3
        break;
 80111c4:	4770      	bx	lr
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 80111c6:	f24f 4024 	movw	r0, #62500	; 0xf424
        break;
 80111ca:	4770      	bx	lr
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 80111cc:	4804      	ldr	r0, [pc, #16]	; (80111e0 <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 80111ce:	4770      	bx	lr
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 80111d0:	4804      	ldr	r0, [pc, #16]	; (80111e4 <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 80111d2:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 80111d4:	4804      	ldr	r0, [pc, #16]	; (80111e8 <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 80111d6:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 80111d8:	f641 6084 	movw	r0, #7812	; 0x1e84
    }

    return bandwidthInHz;
}
 80111dc:	4770      	bx	lr
 80111de:	bf00      	nop
 80111e0:	0001e848 	.word	0x0001e848
 80111e4:	0003d090 	.word	0x0003d090
 80111e8:	0007a120 	.word	0x0007a120

080111ec <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80111ec:	f89d 1004 	ldrb.w	r1, [sp, #4]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 80111f0:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80111f2:	b953      	cbnz	r3, 801120a <RadioGetGfskTimeOnAirNumerator+0x1e>
 80111f4:	2008      	movs	r0, #8
    return ( preambleLen << 3 ) +
 80111f6:	4402      	add	r2, r0
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80111f8:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 80111fa:	b141      	cbz	r1, 801120e <RadioGetGfskTimeOnAirNumerator+0x22>
 80111fc:	2302      	movs	r3, #2
 80111fe:	f89d 0000 	ldrb.w	r0, [sp]
 8011202:	4418      	add	r0, r3
    /* ST_WORKAROUND_END */
}
 8011204:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8011208:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801120a:	2000      	movs	r0, #0
 801120c:	e7f3      	b.n	80111f6 <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801120e:	2300      	movs	r3, #0
 8011210:	e7f5      	b.n	80111fe <RadioGetGfskTimeOnAirNumerator+0x12>

08011212 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8011212:	b570      	push	{r4, r5, r6, lr}
 8011214:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8011218:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 801121c:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801121e:	f1a1 0c05 	sub.w	ip, r1, #5
 8011222:	f1bc 0f01 	cmp.w	ip, #1
 8011226:	d932      	bls.n	801128e <RadioGetLoRaTimeOnAirNumerator+0x7c>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8011228:	b918      	cbnz	r0, 8011232 <RadioGetLoRaTimeOnAirNumerator+0x20>
 801122a:	f1a1 060b 	sub.w	r6, r1, #11
 801122e:	2e01      	cmp	r6, #1
 8011230:	d935      	bls.n	801129e <RadioGetLoRaTimeOnAirNumerator+0x8c>
 8011232:	2801      	cmp	r0, #1
 8011234:	d02f      	beq.n	8011296 <RadioGetLoRaTimeOnAirNumerator+0x84>
    bool    lowDatareOptimize = false;
 8011236:	2600      	movs	r6, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8011238:	f89d e014 	ldrb.w	lr, [sp, #20]
 801123c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
                            ( crcOn ? 16 : 0 ) -
 8011240:	b38d      	cbz	r5, 80112a6 <RadioGetLoRaTimeOnAirNumerator+0x94>
 8011242:	f04f 0c10 	mov.w	ip, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8011246:	44e6      	add	lr, ip
                            ( 4 * datarate ) +
 8011248:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 801124a:	ebae 0e81 	sub.w	lr, lr, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 801124e:	b36c      	cbz	r4, 80112ac <RadioGetLoRaTimeOnAirNumerator+0x9a>
 8011250:	f04f 0c00 	mov.w	ip, #0
                            ( 4 * datarate ) +
 8011254:	44f4      	add	ip, lr

    if( datarate <= 6 )
 8011256:	2906      	cmp	r1, #6
 8011258:	d904      	bls.n	8011264 <RadioGetLoRaTimeOnAirNumerator+0x52>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 801125a:	f10c 0c08 	add.w	ip, ip, #8

        if( lowDatareOptimize == true )
 801125e:	b10e      	cbz	r6, 8011264 <RadioGetLoRaTimeOnAirNumerator+0x52>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8011260:	1e88      	subs	r0, r1, #2
 8011262:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 8011264:	f1bc 0f00 	cmp.w	ip, #0
 8011268:	db23      	blt.n	80112b2 <RadioGetLoRaTimeOnAirNumerator+0xa0>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801126a:	4484      	add	ip, r0
 801126c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011270:	fb9c fcf0 	sdiv	ip, ip, r0
 8011274:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 8011278:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 801127c:	2906      	cmp	r1, #6
 801127e:	d801      	bhi.n	8011284 <RadioGetLoRaTimeOnAirNumerator+0x72>
    {
        intermediate += 2;
 8011280:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8011284:	0080      	lsls	r0, r0, #2
 8011286:	3001      	adds	r0, #1
 8011288:	3902      	subs	r1, #2
}
 801128a:	4088      	lsls	r0, r1
 801128c:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 801128e:	2b0b      	cmp	r3, #11
 8011290:	d8ca      	bhi.n	8011228 <RadioGetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 8011292:	230c      	movs	r3, #12
 8011294:	e7c8      	b.n	8011228 <RadioGetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8011296:	290c      	cmp	r1, #12
 8011298:	d003      	beq.n	80112a2 <RadioGetLoRaTimeOnAirNumerator+0x90>
    bool    lowDatareOptimize = false;
 801129a:	2600      	movs	r6, #0
 801129c:	e7cc      	b.n	8011238 <RadioGetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 801129e:	2601      	movs	r6, #1
 80112a0:	e7ca      	b.n	8011238 <RadioGetLoRaTimeOnAirNumerator+0x26>
 80112a2:	2601      	movs	r6, #1
 80112a4:	e7c8      	b.n	8011238 <RadioGetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 80112a6:	f04f 0c00 	mov.w	ip, #0
 80112aa:	e7cc      	b.n	8011246 <RadioGetLoRaTimeOnAirNumerator+0x34>
                            ( fixLen ? 0 : 20 );
 80112ac:	f04f 0c14 	mov.w	ip, #20
 80112b0:	e7d0      	b.n	8011254 <RadioGetLoRaTimeOnAirNumerator+0x42>
        ceilNumerator = 0;
 80112b2:	f04f 0c00 	mov.w	ip, #0
 80112b6:	e7d8      	b.n	801126a <RadioGetLoRaTimeOnAirNumerator+0x58>

080112b8 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 80112b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112ba:	b085      	sub	sp, #20
 80112bc:	460e      	mov	r6, r1
 80112be:	4615      	mov	r5, r2
 80112c0:	4619      	mov	r1, r3
 80112c2:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80112c6:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80112ca:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 80112ce:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 80112d2:	b148      	cbz	r0, 80112e8 <RadioTimeOnAir+0x30>
 80112d4:	2801      	cmp	r0, #1
 80112d6:	d012      	beq.n	80112fe <RadioTimeOnAir+0x46>
 80112d8:	2501      	movs	r5, #1
 80112da:	2400      	movs	r4, #0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 80112dc:	442c      	add	r4, r5
 80112de:	1e60      	subs	r0, r4, #1
}
 80112e0:	fbb0 f0f5 	udiv	r0, r0, r5
 80112e4:	b005      	add	sp, #20
 80112e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 80112e8:	f8cd c004 	str.w	ip, [sp, #4]
 80112ec:	9700      	str	r7, [sp, #0]
 80112ee:	4628      	mov	r0, r5
 80112f0:	f7ff ff7c 	bl	80111ec <RadioGetGfskTimeOnAirNumerator>
 80112f4:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80112f8:	fb00 f404 	mul.w	r4, r0, r4
        break;
 80112fc:	e7ee      	b.n	80112dc <RadioTimeOnAir+0x24>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 80112fe:	f8cd c008 	str.w	ip, [sp, #8]
 8011302:	9701      	str	r7, [sp, #4]
 8011304:	9300      	str	r3, [sp, #0]
 8011306:	4613      	mov	r3, r2
 8011308:	460a      	mov	r2, r1
 801130a:	4629      	mov	r1, r5
 801130c:	4630      	mov	r0, r6
 801130e:	f7ff ff80 	bl	8011212 <RadioGetLoRaTimeOnAirNumerator>
 8011312:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8011316:	fb00 f404 	mul.w	r4, r0, r4
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 801131a:	4b03      	ldr	r3, [pc, #12]	; (8011328 <RadioTimeOnAir+0x70>)
 801131c:	5d98      	ldrb	r0, [r3, r6]
 801131e:	f7ff ff37 	bl	8011190 <RadioGetLoRaBandwidthInHz>
 8011322:	4605      	mov	r5, r0
        break;
 8011324:	e7da      	b.n	80112dc <RadioTimeOnAir+0x24>
 8011326:	bf00      	nop
 8011328:	08014bec 	.word	0x08014bec

0801132c <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 801132c:	b508      	push	{r3, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 801132e:	4b05      	ldr	r3, [pc, #20]	; (8011344 <RadioOnTxTimeoutProcess+0x18>)
 8011330:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8011334:	629a      	str	r2, [r3, #40]	; 0x28
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8011336:	4b04      	ldr	r3, [pc, #16]	; (8011348 <RadioOnTxTimeoutProcess+0x1c>)
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	b113      	cbz	r3, 8011342 <RadioOnTxTimeoutProcess+0x16>
 801133c:	685b      	ldr	r3, [r3, #4]
 801133e:	b103      	cbz	r3, 8011342 <RadioOnTxTimeoutProcess+0x16>
    {
        RadioEvents->TxTimeout( );
 8011340:	4798      	blx	r3
    }
}
 8011342:	bd08      	pop	{r3, pc}
 8011344:	48000400 	.word	0x48000400
 8011348:	20001040 	.word	0x20001040

0801134c <RadioOnTxTimeoutIrq>:
{
 801134c:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 801134e:	f7ff ffed 	bl	801132c <RadioOnTxTimeoutProcess>
}
 8011352:	bd08      	pop	{r3, pc}

08011354 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8011354:	b508      	push	{r3, lr}
 8011356:	4b05      	ldr	r3, [pc, #20]	; (801136c <RadioOnRxTimeoutProcess+0x18>)
 8011358:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801135c:	629a      	str	r2, [r3, #40]	; 0x28
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801135e:	4b04      	ldr	r3, [pc, #16]	; (8011370 <RadioOnRxTimeoutProcess+0x1c>)
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	b113      	cbz	r3, 801136a <RadioOnRxTimeoutProcess+0x16>
 8011364:	68db      	ldr	r3, [r3, #12]
 8011366:	b103      	cbz	r3, 801136a <RadioOnRxTimeoutProcess+0x16>
    {
        RadioEvents->RxTimeout( );
 8011368:	4798      	blx	r3
    }
}
 801136a:	bd08      	pop	{r3, pc}
 801136c:	48000400 	.word	0x48000400
 8011370:	20001040 	.word	0x20001040

08011374 <RadioOnRxTimeoutIrq>:
{
 8011374:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 8011376:	f7ff ffed 	bl	8011354 <RadioOnRxTimeoutProcess>
}
 801137a:	bd08      	pop	{r3, pc}

0801137c <RadioSetRxGenericConfig>:
    }
    return status;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801137c:	f04f 30ff 	mov.w	r0, #4294967295
 8011380:	4770      	bx	lr

08011382 <RadioSetTxGenericConfig>:
    SubgRf.TxTimeout = timeout;
    return 0;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8011382:	f04f 30ff 	mov.w	r0, #4294967295
 8011386:	4770      	bx	lr

08011388 <RadioTxCw>:
{
 8011388:	b508      	push	{r3, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801138a:	f001 fbab 	bl	8012ae4 <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 801138e:	2101      	movs	r1, #1
 8011390:	f001 fb94 	bl	8012abc <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8011394:	f000 feac 	bl	80120f0 <SUBGRF_SetTxContinuousWave>
}
 8011398:	bd08      	pop	{r3, pc}
	...

0801139c <RadioSetRxDutyCycle>:
{
 801139c:	b570      	push	{r4, r5, r6, lr}
 801139e:	4604      	mov	r4, r0
 80113a0:	460d      	mov	r5, r1
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 80113a2:	eb01 0340 	add.w	r3, r1, r0, lsl #1
 80113a6:	4e09      	ldr	r6, [pc, #36]	; (80113cc <RadioSetRxDutyCycle+0x30>)
 80113a8:	65b3      	str	r3, [r6, #88]	; 0x58
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80113aa:	2300      	movs	r3, #0
 80113ac:	461a      	mov	r2, r3
 80113ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80113b2:	4608      	mov	r0, r1
 80113b4:	f000 ff47 	bl	8012246 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80113b8:	2100      	movs	r1, #0
 80113ba:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 80113be:	f001 fb7d 	bl	8012abc <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 80113c2:	4629      	mov	r1, r5
 80113c4:	4620      	mov	r0, r4
 80113c6:	f000 fe63 	bl	8012090 <SUBGRF_SetRxDutyCycle>
}
 80113ca:	bd70      	pop	{r4, r5, r6, pc}
 80113cc:	2000105c 	.word	0x2000105c

080113d0 <RadioRxBoosted>:
{
 80113d0:	b538      	push	{r3, r4, r5, lr}
 80113d2:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init() )
 80113d4:	f001 fc57 	bl	8012c86 <RFW_Is_Init>
 80113d8:	2801      	cmp	r0, #1
 80113da:	d019      	beq.n	8011410 <RadioRxBoosted+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80113dc:	2300      	movs	r3, #0
 80113de:	461a      	mov	r2, r3
 80113e0:	f240 2162 	movw	r1, #610	; 0x262
 80113e4:	4608      	mov	r0, r1
 80113e6:	f000 ff2e 	bl	8012246 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 80113ea:	b9a4      	cbnz	r4, 8011416 <RadioRxBoosted+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80113ec:	4c11      	ldr	r4, [pc, #68]	; (8011434 <RadioRxBoosted+0x64>)
 80113ee:	2100      	movs	r1, #0
 80113f0:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 80113f2:	4b11      	ldr	r3, [pc, #68]	; (8011438 <RadioRxBoosted+0x68>)
 80113f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80113f8:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80113fa:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 80113fe:	f001 fb5d 	bl	8012abc <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 8011402:	7863      	ldrb	r3, [r4, #1]
 8011404:	b183      	cbz	r3, 8011428 <RadioRxBoosted+0x58>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8011406:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801140a:	f000 ffef 	bl	80123ec <SUBGRF_SetRxBoosted>
}
 801140e:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit();
 8011410:	f001 fc41 	bl	8012c96 <RFW_ReceiveInit>
 8011414:	e7e9      	b.n	80113ea <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8011416:	4d09      	ldr	r5, [pc, #36]	; (801143c <RadioRxBoosted+0x6c>)
 8011418:	4621      	mov	r1, r4
 801141a:	4628      	mov	r0, r5
 801141c:	f002 f90e 	bl	801363c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8011420:	4628      	mov	r0, r5
 8011422:	f002 f8c5 	bl	80135b0 <UTIL_TIMER_Start>
 8011426:	e7e1      	b.n	80113ec <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8011428:	4b02      	ldr	r3, [pc, #8]	; (8011434 <RadioRxBoosted+0x64>)
 801142a:	6898      	ldr	r0, [r3, #8]
 801142c:	0180      	lsls	r0, r0, #6
 801142e:	f000 ffdd 	bl	80123ec <SUBGRF_SetRxBoosted>
}
 8011432:	e7ec      	b.n	801140e <RadioRxBoosted+0x3e>
 8011434:	2000105c 	.word	0x2000105c
 8011438:	48000400 	.word	0x48000400
 801143c:	20001044 	.word	0x20001044

08011440 <RadioStandby>:
{
 8011440:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 8011442:	2000      	movs	r0, #0
 8011444:	f000 fdd6 	bl	8011ff4 <SUBGRF_SetStandby>
}
 8011448:	bd08      	pop	{r3, pc}

0801144a <RadioWrite>:
{
 801144a:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister( addr, data );
 801144c:	f000 ffbe 	bl	80123cc <SUBGRF_WriteRegister>
}
 8011450:	bd08      	pop	{r3, pc}
	...

08011454 <RadioTxPrbs>:
{
 8011454:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8011456:	2101      	movs	r1, #1
 8011458:	4b07      	ldr	r3, [pc, #28]	; (8011478 <RadioTxPrbs+0x24>)
 801145a:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 801145e:	f001 fb2d 	bl	8012abc <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8011462:	212d      	movs	r1, #45	; 0x2d
 8011464:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8011468:	f7ff ffef 	bl	801144a <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 801146c:	f000 fe47 	bl	80120fe <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8011470:	4802      	ldr	r0, [pc, #8]	; (801147c <RadioTxPrbs+0x28>)
 8011472:	f000 fdd9 	bl	8012028 <SUBGRF_SetTx>
}
 8011476:	bd08      	pop	{r3, pc}
 8011478:	2000105c 	.word	0x2000105c
 801147c:	000fffff 	.word	0x000fffff

08011480 <RadioRead>:
{
 8011480:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister( addr );
 8011482:	f001 f895 	bl	80125b0 <SUBGRF_ReadRegister>
}
 8011486:	bd08      	pop	{r3, pc}

08011488 <RadioGetStatus>:
{
 8011488:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 801148a:	f000 fdad 	bl	8011fe8 <SUBGRF_GetOperatingMode>
 801148e:	2805      	cmp	r0, #5
 8011490:	d007      	beq.n	80114a2 <RadioGetStatus+0x1a>
 8011492:	2807      	cmp	r0, #7
 8011494:	d007      	beq.n	80114a6 <RadioGetStatus+0x1e>
 8011496:	2804      	cmp	r0, #4
 8011498:	d001      	beq.n	801149e <RadioGetStatus+0x16>
            return RF_IDLE;
 801149a:	2000      	movs	r0, #0
}
 801149c:	bd08      	pop	{r3, pc}
    switch( SUBGRF_GetOperatingMode( ) )
 801149e:	2002      	movs	r0, #2
 80114a0:	e7fc      	b.n	801149c <RadioGetStatus+0x14>
            return RF_RX_RUNNING;
 80114a2:	2001      	movs	r0, #1
 80114a4:	e7fa      	b.n	801149c <RadioGetStatus+0x14>
            return RF_CAD;
 80114a6:	2003      	movs	r0, #3
 80114a8:	e7f8      	b.n	801149c <RadioGetStatus+0x14>
	...

080114ac <RadioIrqProcess>:
{
 80114ac:	b530      	push	{r4, r5, lr}
 80114ae:	b083      	sub	sp, #12
    uint8_t size = 0;
 80114b0:	2300      	movs	r3, #0
 80114b2:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 80114b6:	9300      	str	r3, [sp, #0]
    switch( SubgRf.RadioIrq )
 80114b8:	4ba5      	ldr	r3, [pc, #660]	; (8011750 <RadioIrqProcess+0x2a4>)
 80114ba:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80114be:	2b20      	cmp	r3, #32
 80114c0:	d829      	bhi.n	8011516 <RadioIrqProcess+0x6a>
 80114c2:	b21a      	sxth	r2, r3
 80114c4:	2a00      	cmp	r2, #0
 80114c6:	f000 8140 	beq.w	801174a <RadioIrqProcess+0x29e>
 80114ca:	3b01      	subs	r3, #1
 80114cc:	2b1f      	cmp	r3, #31
 80114ce:	f200 813c 	bhi.w	801174a <RadioIrqProcess+0x29e>
 80114d2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80114d6:	0063      	.short	0x0063
 80114d8:	013a007f 	.word	0x013a007f
 80114dc:	013a00f7 	.word	0x013a00f7
 80114e0:	013a013a 	.word	0x013a013a
 80114e4:	013a0127 	.word	0x013a0127
 80114e8:	013a013a 	.word	0x013a013a
 80114ec:	013a013a 	.word	0x013a013a
 80114f0:	013a013a 	.word	0x013a013a
 80114f4:	013a0134 	.word	0x013a0134
 80114f8:	013a013a 	.word	0x013a013a
 80114fc:	013a013a 	.word	0x013a013a
 8011500:	013a013a 	.word	0x013a013a
 8011504:	013a013a 	.word	0x013a013a
 8011508:	013a013a 	.word	0x013a013a
 801150c:	013a013a 	.word	0x013a013a
 8011510:	013a013a 	.word	0x013a013a
 8011514:	0155      	.short	0x0155
 8011516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801151a:	f000 80b3 	beq.w	8011684 <RadioIrqProcess+0x1d8>
 801151e:	d928      	bls.n	8011572 <RadioIrqProcess+0xc6>
 8011520:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011524:	f040 8111 	bne.w	801174a <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8011528:	4b8a      	ldr	r3, [pc, #552]	; (8011754 <RadioIrqProcess+0x2a8>)
 801152a:	2201      	movs	r2, #1
 801152c:	2100      	movs	r1, #0
 801152e:	2002      	movs	r0, #2
 8011530:	f001 fc90 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8011534:	f000 fd58 	bl	8011fe8 <SUBGRF_GetOperatingMode>
 8011538:	2804      	cmp	r0, #4
 801153a:	f000 80b0 	beq.w	801169e <RadioIrqProcess+0x1f2>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801153e:	f000 fd53 	bl	8011fe8 <SUBGRF_GetOperatingMode>
 8011542:	2805      	cmp	r0, #5
 8011544:	f040 8101 	bne.w	801174a <RadioIrqProcess+0x29e>
  WRITE_REG(GPIOx->BRR, PinMask);
 8011548:	4b83      	ldr	r3, [pc, #524]	; (8011758 <RadioIrqProcess+0x2ac>)
 801154a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801154e:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &RxTimeoutTimer );
 8011550:	4882      	ldr	r0, [pc, #520]	; (801175c <RadioIrqProcess+0x2b0>)
 8011552:	f001 ffd3 	bl	80134fc <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8011556:	2000      	movs	r0, #0
 8011558:	f000 fd4c 	bl	8011ff4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801155c:	4b80      	ldr	r3, [pc, #512]	; (8011760 <RadioIrqProcess+0x2b4>)
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	2b00      	cmp	r3, #0
 8011562:	f000 80f2 	beq.w	801174a <RadioIrqProcess+0x29e>
 8011566:	68db      	ldr	r3, [r3, #12]
 8011568:	2b00      	cmp	r3, #0
 801156a:	f000 80ee 	beq.w	801174a <RadioIrqProcess+0x29e>
                RadioEvents->RxTimeout( );
 801156e:	4798      	blx	r3
 8011570:	e0eb      	b.n	801174a <RadioIrqProcess+0x29e>
    switch( SubgRf.RadioIrq )
 8011572:	2b40      	cmp	r3, #64	; 0x40
 8011574:	f000 811d 	beq.w	80117b2 <RadioIrqProcess+0x306>
 8011578:	2b80      	cmp	r3, #128	; 0x80
 801157a:	f040 80e6 	bne.w	801174a <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 801157e:	2000      	movs	r0, #0
 8011580:	f000 fd38 	bl	8011ff4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8011584:	4b76      	ldr	r3, [pc, #472]	; (8011760 <RadioIrqProcess+0x2b4>)
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	2b00      	cmp	r3, #0
 801158a:	f000 80de 	beq.w	801174a <RadioIrqProcess+0x29e>
 801158e:	699b      	ldr	r3, [r3, #24]
 8011590:	2b00      	cmp	r3, #0
 8011592:	f000 80da 	beq.w	801174a <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( false );
 8011596:	2000      	movs	r0, #0
 8011598:	4798      	blx	r3
 801159a:	e0d6      	b.n	801174a <RadioIrqProcess+0x29e>
 801159c:	4b6e      	ldr	r3, [pc, #440]	; (8011758 <RadioIrqProcess+0x2ac>)
 801159e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80115a2:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &TxTimeoutTimer );
 80115a4:	486f      	ldr	r0, [pc, #444]	; (8011764 <RadioIrqProcess+0x2b8>)
 80115a6:	f001 ffa9 	bl	80134fc <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 80115aa:	2000      	movs	r0, #0
 80115ac:	f000 fd22 	bl	8011ff4 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 80115b0:	f001 fb6b 	bl	8012c8a <RFW_Is_LongPacketModeEnabled>
 80115b4:	2801      	cmp	r0, #1
 80115b6:	d00a      	beq.n	80115ce <RadioIrqProcess+0x122>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80115b8:	4b69      	ldr	r3, [pc, #420]	; (8011760 <RadioIrqProcess+0x2b4>)
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	f000 80c4 	beq.w	801174a <RadioIrqProcess+0x29e>
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	f000 80c0 	beq.w	801174a <RadioIrqProcess+0x29e>
            RadioEvents->TxDone( );
 80115ca:	4798      	blx	r3
 80115cc:	e0bd      	b.n	801174a <RadioIrqProcess+0x29e>
            RFW_DeInit_TxLongPacket( );
 80115ce:	f001 fb65 	bl	8012c9c <RFW_DeInit_TxLongPacket>
 80115d2:	e7f1      	b.n	80115b8 <RadioIrqProcess+0x10c>
 80115d4:	4b60      	ldr	r3, [pc, #384]	; (8011758 <RadioIrqProcess+0x2ac>)
 80115d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80115da:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &RxTimeoutTimer );
 80115dc:	485f      	ldr	r0, [pc, #380]	; (801175c <RadioIrqProcess+0x2b0>)
 80115de:	f001 ff8d 	bl	80134fc <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80115e2:	4b5b      	ldr	r3, [pc, #364]	; (8011750 <RadioIrqProcess+0x2a4>)
 80115e4:	785b      	ldrb	r3, [r3, #1]
 80115e6:	b303      	cbz	r3, 801162a <RadioIrqProcess+0x17e>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 80115e8:	22ff      	movs	r2, #255	; 0xff
 80115ea:	f10d 0107 	add.w	r1, sp, #7
 80115ee:	485e      	ldr	r0, [pc, #376]	; (8011768 <RadioIrqProcess+0x2bc>)
 80115f0:	f001 fa4a 	bl	8012a88 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 80115f4:	485d      	ldr	r0, [pc, #372]	; (801176c <RadioIrqProcess+0x2c0>)
 80115f6:	f000 fead 	bl	8012354 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80115fa:	4b59      	ldr	r3, [pc, #356]	; (8011760 <RadioIrqProcess+0x2b4>)
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	2b00      	cmp	r3, #0
 8011600:	f000 80a3 	beq.w	801174a <RadioIrqProcess+0x29e>
 8011604:	689c      	ldr	r4, [r3, #8]
 8011606:	2c00      	cmp	r4, #0
 8011608:	f000 809f 	beq.w	801174a <RadioIrqProcess+0x29e>
            switch( SubgRf.PacketStatus.packetType )
 801160c:	4b50      	ldr	r3, [pc, #320]	; (8011750 <RadioIrqProcess+0x2a4>)
 801160e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8011612:	2b01      	cmp	r3, #1
 8011614:	d11d      	bne.n	8011652 <RadioIrqProcess+0x1a6>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 8011616:	4a4e      	ldr	r2, [pc, #312]	; (8011750 <RadioIrqProcess+0x2a4>)
 8011618:	f992 3031 	ldrsb.w	r3, [r2, #49]	; 0x31
 801161c:	f992 2030 	ldrsb.w	r2, [r2, #48]	; 0x30
 8011620:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8011624:	4850      	ldr	r0, [pc, #320]	; (8011768 <RadioIrqProcess+0x2bc>)
 8011626:	47a0      	blx	r4
                break;
 8011628:	e08f      	b.n	801174a <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 801162a:	2000      	movs	r0, #0
 801162c:	f000 fce2 	bl	8011ff4 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8011630:	2100      	movs	r1, #0
 8011632:	f640 1002 	movw	r0, #2306	; 0x902
 8011636:	f000 fec9 	bl	80123cc <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 801163a:	f640 1044 	movw	r0, #2372	; 0x944
 801163e:	f000 ffb7 	bl	80125b0 <SUBGRF_ReadRegister>
 8011642:	f040 0102 	orr.w	r1, r0, #2
 8011646:	b2c9      	uxtb	r1, r1
 8011648:	f640 1044 	movw	r0, #2372	; 0x944
 801164c:	f000 febe 	bl	80123cc <SUBGRF_WriteRegister>
 8011650:	e7ca      	b.n	80115e8 <RadioIrqProcess+0x13c>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8011652:	4c3f      	ldr	r4, [pc, #252]	; (8011750 <RadioIrqProcess+0x2a4>)
 8011654:	4669      	mov	r1, sp
 8011656:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8011658:	f001 faca 	bl	8012bf0 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 801165c:	4b40      	ldr	r3, [pc, #256]	; (8011760 <RadioIrqProcess+0x2b4>)
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	689d      	ldr	r5, [r3, #8]
 8011662:	9b00      	ldr	r3, [sp, #0]
 8011664:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8011668:	4a41      	ldr	r2, [pc, #260]	; (8011770 <RadioIrqProcess+0x2c4>)
 801166a:	fb82 1203 	smull	r1, r2, r2, r3
 801166e:	17db      	asrs	r3, r3, #31
 8011670:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 8011674:	b25b      	sxtb	r3, r3
 8011676:	f994 2029 	ldrsb.w	r2, [r4, #41]	; 0x29
 801167a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801167e:	483a      	ldr	r0, [pc, #232]	; (8011768 <RadioIrqProcess+0x2bc>)
 8011680:	47a8      	blx	r5
                break;
 8011682:	e062      	b.n	801174a <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 8011684:	2000      	movs	r0, #0
 8011686:	f000 fcb5 	bl	8011ff4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801168a:	4b35      	ldr	r3, [pc, #212]	; (8011760 <RadioIrqProcess+0x2b4>)
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	2b00      	cmp	r3, #0
 8011690:	d05b      	beq.n	801174a <RadioIrqProcess+0x29e>
 8011692:	699b      	ldr	r3, [r3, #24]
 8011694:	2b00      	cmp	r3, #0
 8011696:	d058      	beq.n	801174a <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( true );
 8011698:	2001      	movs	r0, #1
 801169a:	4798      	blx	r3
 801169c:	e055      	b.n	801174a <RadioIrqProcess+0x29e>
 801169e:	4b2e      	ldr	r3, [pc, #184]	; (8011758 <RadioIrqProcess+0x2ac>)
 80116a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80116a4:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &TxTimeoutTimer );
 80116a6:	482f      	ldr	r0, [pc, #188]	; (8011764 <RadioIrqProcess+0x2b8>)
 80116a8:	f001 ff28 	bl	80134fc <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80116ac:	2000      	movs	r0, #0
 80116ae:	f000 fca1 	bl	8011ff4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80116b2:	4b2b      	ldr	r3, [pc, #172]	; (8011760 <RadioIrqProcess+0x2b4>)
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d047      	beq.n	801174a <RadioIrqProcess+0x29e>
 80116ba:	685b      	ldr	r3, [r3, #4]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d044      	beq.n	801174a <RadioIrqProcess+0x29e>
                RadioEvents->TxTimeout( );
 80116c0:	4798      	blx	r3
 80116c2:	e042      	b.n	801174a <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 80116c4:	4b2b      	ldr	r3, [pc, #172]	; (8011774 <RadioIrqProcess+0x2c8>)
 80116c6:	2201      	movs	r2, #1
 80116c8:	2100      	movs	r1, #0
 80116ca:	2002      	movs	r0, #2
 80116cc:	f001 fbc2 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 80116d0:	4b1f      	ldr	r3, [pc, #124]	; (8011750 <RadioIrqProcess+0x2a4>)
 80116d2:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80116d4:	b3c9      	cbz	r1, 801174a <RadioIrqProcess+0x29e>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 80116d6:	f3c1 4107 	ubfx	r1, r1, #16, #8
 80116da:	f640 1003 	movw	r0, #2307	; 0x903
 80116de:	f7ff feb4 	bl	801144a <RadioWrite>
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 80116e2:	4c1b      	ldr	r4, [pc, #108]	; (8011750 <RadioIrqProcess+0x2a4>)
 80116e4:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80116e8:	f640 1004 	movw	r0, #2308	; 0x904
 80116ec:	f7ff fead 	bl	801144a <RadioWrite>
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 80116f0:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
 80116f4:	f640 1005 	movw	r0, #2309	; 0x905
 80116f8:	f7ff fea7 	bl	801144a <RadioWrite>
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 80116fc:	f640 1002 	movw	r0, #2306	; 0x902
 8011700:	f7ff febe 	bl	8011480 <RadioRead>
 8011704:	f040 0101 	orr.w	r1, r0, #1
 8011708:	b2c9      	uxtb	r1, r1
 801170a:	f640 1002 	movw	r0, #2306	; 0x902
 801170e:	f7ff fe9c 	bl	801144a <RadioWrite>
          SubgRf.RxDcPreambleDetectTimeout = 0;
 8011712:	2200      	movs	r2, #0
 8011714:	65a2      	str	r2, [r4, #88]	; 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8011716:	4613      	mov	r3, r2
 8011718:	f240 2162 	movw	r1, #610	; 0x262
 801171c:	4608      	mov	r0, r1
 801171e:	f000 fd92 	bl	8012246 <SUBGRF_SetDioIrqParams>
 8011722:	e012      	b.n	801174a <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8011724:	4b14      	ldr	r3, [pc, #80]	; (8011778 <RadioIrqProcess+0x2cc>)
 8011726:	2201      	movs	r2, #1
 8011728:	2100      	movs	r1, #0
 801172a:	2002      	movs	r0, #2
 801172c:	f001 fb92 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8011730:	f001 faa9 	bl	8012c86 <RFW_Is_Init>
 8011734:	2801      	cmp	r0, #1
 8011736:	d108      	bne.n	801174a <RadioIrqProcess+0x29e>
            RFW_ReceivePayload( );
 8011738:	f001 fab1 	bl	8012c9e <RFW_ReceivePayload>
 801173c:	e005      	b.n	801174a <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801173e:	4b0f      	ldr	r3, [pc, #60]	; (801177c <RadioIrqProcess+0x2d0>)
 8011740:	2201      	movs	r2, #1
 8011742:	2100      	movs	r1, #0
 8011744:	2002      	movs	r0, #2
 8011746:	f001 fb85 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
}
 801174a:	b003      	add	sp, #12
 801174c:	bd30      	pop	{r4, r5, pc}
 801174e:	bf00      	nop
 8011750:	2000105c 	.word	0x2000105c
 8011754:	08014b80 	.word	0x08014b80
 8011758:	48000400 	.word	0x48000400
 801175c:	20001044 	.word	0x20001044
 8011760:	20001040 	.word	0x20001040
 8011764:	200010b8 	.word	0x200010b8
 8011768:	20000f40 	.word	0x20000f40
 801176c:	20001080 	.word	0x20001080
 8011770:	10624dd3 	.word	0x10624dd3
 8011774:	08014b94 	.word	0x08014b94
 8011778:	08014ba0 	.word	0x08014ba0
 801177c:	08014bac 	.word	0x08014bac
        TimerStop( &RxTimeoutTimer );
 8011780:	4817      	ldr	r0, [pc, #92]	; (80117e0 <RadioIrqProcess+0x334>)
 8011782:	f001 febb 	bl	80134fc <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8011786:	4b17      	ldr	r3, [pc, #92]	; (80117e4 <RadioIrqProcess+0x338>)
 8011788:	785b      	ldrb	r3, [r3, #1]
 801178a:	b173      	cbz	r3, 80117aa <RadioIrqProcess+0x2fe>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801178c:	4b16      	ldr	r3, [pc, #88]	; (80117e8 <RadioIrqProcess+0x33c>)
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	2b00      	cmp	r3, #0
 8011792:	d0da      	beq.n	801174a <RadioIrqProcess+0x29e>
 8011794:	68db      	ldr	r3, [r3, #12]
 8011796:	2b00      	cmp	r3, #0
 8011798:	d0d7      	beq.n	801174a <RadioIrqProcess+0x29e>
            RadioEvents->RxTimeout( );
 801179a:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801179c:	4b13      	ldr	r3, [pc, #76]	; (80117ec <RadioIrqProcess+0x340>)
 801179e:	2201      	movs	r2, #1
 80117a0:	2100      	movs	r1, #0
 80117a2:	2002      	movs	r0, #2
 80117a4:	f001 fb56 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
 80117a8:	e7cf      	b.n	801174a <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 80117aa:	2000      	movs	r0, #0
 80117ac:	f000 fc22 	bl	8011ff4 <SUBGRF_SetStandby>
 80117b0:	e7ec      	b.n	801178c <RadioIrqProcess+0x2e0>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 80117b2:	4b0f      	ldr	r3, [pc, #60]	; (80117f0 <RadioIrqProcess+0x344>)
 80117b4:	2201      	movs	r2, #1
 80117b6:	2100      	movs	r1, #0
 80117b8:	2002      	movs	r0, #2
 80117ba:	f001 fb4b 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 80117be:	4b09      	ldr	r3, [pc, #36]	; (80117e4 <RadioIrqProcess+0x338>)
 80117c0:	785b      	ldrb	r3, [r3, #1]
 80117c2:	b143      	cbz	r3, 80117d6 <RadioIrqProcess+0x32a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 80117c4:	4b08      	ldr	r3, [pc, #32]	; (80117e8 <RadioIrqProcess+0x33c>)
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d0be      	beq.n	801174a <RadioIrqProcess+0x29e>
 80117cc:	691b      	ldr	r3, [r3, #16]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d0bb      	beq.n	801174a <RadioIrqProcess+0x29e>
            RadioEvents->RxError( );
 80117d2:	4798      	blx	r3
}
 80117d4:	e7b9      	b.n	801174a <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 80117d6:	2000      	movs	r0, #0
 80117d8:	f000 fc0c 	bl	8011ff4 <SUBGRF_SetStandby>
 80117dc:	e7f2      	b.n	80117c4 <RadioIrqProcess+0x318>
 80117de:	bf00      	nop
 80117e0:	20001044 	.word	0x20001044
 80117e4:	2000105c 	.word	0x2000105c
 80117e8:	20001040 	.word	0x20001040
 80117ec:	08014bb8 	.word	0x08014bb8
 80117f0:	08014bc4 	.word	0x08014bc4

080117f4 <RadioOnDioIrq>:
{
 80117f4:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 80117f6:	4b03      	ldr	r3, [pc, #12]	; (8011804 <RadioOnDioIrq+0x10>)
 80117f8:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
    RADIO_IRQ_PROCESS();
 80117fc:	f7ff fe56 	bl	80114ac <RadioIrqProcess>
}
 8011800:	bd08      	pop	{r3, pc}
 8011802:	bf00      	nop
 8011804:	2000105c 	.word	0x2000105c

08011808 <RadioGetWakeupTime>:
{
 8011808:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801180a:	f001 f982 	bl	8012b12 <SUBGRF_GetRadioWakeUpTime>
}
 801180e:	3003      	adds	r0, #3
 8011810:	bd08      	pop	{r3, pc}
	...

08011814 <RadioSetMaxPayloadLength>:
{
 8011814:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 8011816:	2801      	cmp	r0, #1
 8011818:	d004      	beq.n	8011824 <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 801181a:	4b0a      	ldr	r3, [pc, #40]	; (8011844 <RadioSetMaxPayloadLength+0x30>)
 801181c:	7d5b      	ldrb	r3, [r3, #21]
 801181e:	2b01      	cmp	r3, #1
 8011820:	d008      	beq.n	8011834 <RadioSetMaxPayloadLength+0x20>
}
 8011822:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8011824:	4b08      	ldr	r3, [pc, #32]	; (8011848 <RadioSetMaxPayloadLength+0x34>)
 8011826:	7019      	strb	r1, [r3, #0]
 8011828:	4806      	ldr	r0, [pc, #24]	; (8011844 <RadioSetMaxPayloadLength+0x30>)
 801182a:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801182c:	300e      	adds	r0, #14
 801182e:	f001 f843 	bl	80128b8 <SUBGRF_SetPacketParams>
 8011832:	e7f6      	b.n	8011822 <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8011834:	4b04      	ldr	r3, [pc, #16]	; (8011848 <RadioSetMaxPayloadLength+0x34>)
 8011836:	7019      	strb	r1, [r3, #0]
 8011838:	4802      	ldr	r0, [pc, #8]	; (8011844 <RadioSetMaxPayloadLength+0x30>)
 801183a:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801183c:	300e      	adds	r0, #14
 801183e:	f001 f83b 	bl	80128b8 <SUBGRF_SetPacketParams>
}
 8011842:	e7ee      	b.n	8011822 <RadioSetMaxPayloadLength+0xe>
 8011844:	2000105c 	.word	0x2000105c
 8011848:	20000118 	.word	0x20000118

0801184c <RadioReadRegisters>:
{
 801184c:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 801184e:	f001 f8a5 	bl	801299c <SUBGRF_ReadRegisters>
}
 8011852:	bd08      	pop	{r3, pc}

08011854 <RadioWriteRegisters>:
{
 8011854:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 8011856:	f000 ffed 	bl	8012834 <SUBGRF_WriteRegisters>
}
 801185a:	bd08      	pop	{r3, pc}

0801185c <RadioRssi>:
{
 801185c:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 801185e:	f000 fd6b 	bl	8012338 <SUBGRF_GetRssiInst>
}
 8011862:	b200      	sxth	r0, r0
 8011864:	bd08      	pop	{r3, pc}
	...

08011868 <RadioSetTxContinuousWave>:
{
 8011868:	b538      	push	{r3, r4, r5, lr}
 801186a:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 801186c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8011870:	fb02 f404 	mul.w	r4, r2, r4
    SUBGRF_SetRfFrequency( freq );
 8011874:	f000 fd20 	bl	80122b8 <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 8011878:	4628      	mov	r0, r5
 801187a:	f001 f933 	bl	8012ae4 <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 801187e:	2101      	movs	r1, #1
 8011880:	f001 f91c 	bl	8012abc <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8011884:	f000 fc34 	bl	80120f0 <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8011888:	4d04      	ldr	r5, [pc, #16]	; (801189c <RadioSetTxContinuousWave+0x34>)
 801188a:	4621      	mov	r1, r4
 801188c:	4628      	mov	r0, r5
 801188e:	f001 fed5 	bl	801363c <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8011892:	4628      	mov	r0, r5
 8011894:	f001 fe8c 	bl	80135b0 <UTIL_TIMER_Start>
}
 8011898:	bd38      	pop	{r3, r4, r5, pc}
 801189a:	bf00      	nop
 801189c:	200010b8 	.word	0x200010b8

080118a0 <RadioSetChannel>:
{
 80118a0:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 80118a2:	f000 fd09 	bl	80122b8 <SUBGRF_SetRfFrequency>
}
 80118a6:	bd08      	pop	{r3, pc}

080118a8 <RadioStartCad>:
{
 80118a8:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80118aa:	2100      	movs	r1, #0
 80118ac:	4b07      	ldr	r3, [pc, #28]	; (80118cc <RadioStartCad+0x24>)
 80118ae:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 80118b2:	f001 f903 	bl	8012abc <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 80118b6:	2300      	movs	r3, #0
 80118b8:	461a      	mov	r2, r3
 80118ba:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80118be:	4608      	mov	r0, r1
 80118c0:	f000 fcc1 	bl	8012246 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 80118c4:	f000 fc08 	bl	80120d8 <SUBGRF_SetCad>
}
 80118c8:	bd08      	pop	{r3, pc}
 80118ca:	bf00      	nop
 80118cc:	2000105c 	.word	0x2000105c

080118d0 <RadioRx>:
{
 80118d0:	b538      	push	{r3, r4, r5, lr}
 80118d2:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init( ) )
 80118d4:	f001 f9d7 	bl	8012c86 <RFW_Is_Init>
 80118d8:	2801      	cmp	r0, #1
 80118da:	d019      	beq.n	8011910 <RadioRx+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80118dc:	2300      	movs	r3, #0
 80118de:	461a      	mov	r2, r3
 80118e0:	f240 2162 	movw	r1, #610	; 0x262
 80118e4:	4608      	mov	r0, r1
 80118e6:	f000 fcae 	bl	8012246 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 80118ea:	b9a4      	cbnz	r4, 8011916 <RadioRx+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80118ec:	4c11      	ldr	r4, [pc, #68]	; (8011934 <RadioRx+0x64>)
 80118ee:	2100      	movs	r1, #0
 80118f0:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 80118f2:	4b11      	ldr	r3, [pc, #68]	; (8011938 <RadioRx+0x68>)
 80118f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80118f8:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80118fa:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 80118fe:	f001 f8dd 	bl	8012abc <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 8011902:	7863      	ldrb	r3, [r4, #1]
 8011904:	b183      	cbz	r3, 8011928 <RadioRx+0x58>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8011906:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801190a:	f000 fba7 	bl	801205c <SUBGRF_SetRx>
}
 801190e:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit( );
 8011910:	f001 f9c1 	bl	8012c96 <RFW_ReceiveInit>
 8011914:	e7e9      	b.n	80118ea <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8011916:	4d09      	ldr	r5, [pc, #36]	; (801193c <RadioRx+0x6c>)
 8011918:	4621      	mov	r1, r4
 801191a:	4628      	mov	r0, r5
 801191c:	f001 fe8e 	bl	801363c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8011920:	4628      	mov	r0, r5
 8011922:	f001 fe45 	bl	80135b0 <UTIL_TIMER_Start>
 8011926:	e7e1      	b.n	80118ec <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8011928:	4b02      	ldr	r3, [pc, #8]	; (8011934 <RadioRx+0x64>)
 801192a:	6898      	ldr	r0, [r3, #8]
 801192c:	0180      	lsls	r0, r0, #6
 801192e:	f000 fb95 	bl	801205c <SUBGRF_SetRx>
}
 8011932:	e7ec      	b.n	801190e <RadioRx+0x3e>
 8011934:	2000105c 	.word	0x2000105c
 8011938:	48000400 	.word	0x48000400
 801193c:	20001044 	.word	0x20001044

08011940 <RadioSleep>:
{
 8011940:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 8011942:	f04f 0004 	mov.w	r0, #4
 8011946:	f000 fe8d 	bl	8012664 <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 801194a:	2002      	movs	r0, #2
 801194c:	f7f0 fadc 	bl	8001f08 <HAL_Delay>
}
 8011950:	bd08      	pop	{r3, pc}
	...

08011954 <RadioSend>:
{
 8011954:	b570      	push	{r4, r5, r6, lr}
 8011956:	b082      	sub	sp, #8
 8011958:	4605      	mov	r5, r0
 801195a:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 801195c:	2300      	movs	r3, #0
 801195e:	461a      	mov	r2, r3
 8011960:	f240 2101 	movw	r1, #513	; 0x201
 8011964:	4608      	mov	r0, r1
 8011966:	f000 fc6e 	bl	8012246 <SUBGRF_SetDioIrqParams>
 801196a:	4b3e      	ldr	r3, [pc, #248]	; (8011a64 <RadioSend+0x110>)
 801196c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8011970:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8011972:	4e3d      	ldr	r6, [pc, #244]	; (8011a68 <RadioSend+0x114>)
 8011974:	2101      	movs	r1, #1
 8011976:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 801197a:	f001 f89f 	bl	8012abc <SUBGRF_SetSwitch>
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 801197e:	7833      	ldrb	r3, [r6, #0]
 8011980:	2b01      	cmp	r3, #1
 8011982:	d103      	bne.n	801198c <RadioSend+0x38>
 8011984:	f896 3051 	ldrb.w	r3, [r6, #81]	; 0x51
 8011988:	2b06      	cmp	r3, #6
 801198a:	d012      	beq.n	80119b2 <RadioSend+0x5e>
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801198c:	f640 0089 	movw	r0, #2185	; 0x889
 8011990:	f000 fe0e 	bl	80125b0 <SUBGRF_ReadRegister>
 8011994:	f040 0104 	orr.w	r1, r0, #4
 8011998:	b2c9      	uxtb	r1, r1
 801199a:	f640 0089 	movw	r0, #2185	; 0x889
 801199e:	f000 fd15 	bl	80123cc <SUBGRF_WriteRegister>
    switch( SubgRf.Modem )
 80119a2:	4b31      	ldr	r3, [pc, #196]	; (8011a68 <RadioSend+0x114>)
 80119a4:	781b      	ldrb	r3, [r3, #0]
 80119a6:	2b03      	cmp	r3, #3
 80119a8:	d818      	bhi.n	80119dc <RadioSend+0x88>
 80119aa:	e8df f003 	tbb	[pc, r3]
 80119ae:	0d22      	.short	0x0d22
 80119b0:	4d22      	.short	0x4d22
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 80119b2:	f640 0089 	movw	r0, #2185	; 0x889
 80119b6:	f000 fdfb 	bl	80125b0 <SUBGRF_ReadRegister>
 80119ba:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 80119be:	f640 0089 	movw	r0, #2185	; 0x889
 80119c2:	f000 fd03 	bl	80123cc <SUBGRF_WriteRegister>
 80119c6:	e7ec      	b.n	80119a2 <RadioSend+0x4e>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 80119c8:	4827      	ldr	r0, [pc, #156]	; (8011a68 <RadioSend+0x114>)
 80119ca:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80119cc:	300e      	adds	r0, #14
 80119ce:	f000 ff73 	bl	80128b8 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80119d2:	2200      	movs	r2, #0
 80119d4:	4621      	mov	r1, r4
 80119d6:	4628      	mov	r0, r5
 80119d8:	f001 f83d 	bl	8012a56 <SUBGRF_SendPayload>
    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 80119dc:	4c23      	ldr	r4, [pc, #140]	; (8011a6c <RadioSend+0x118>)
 80119de:	4b22      	ldr	r3, [pc, #136]	; (8011a68 <RadioSend+0x114>)
 80119e0:	6859      	ldr	r1, [r3, #4]
 80119e2:	4620      	mov	r0, r4
 80119e4:	f001 fe2a 	bl	801363c <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80119e8:	4620      	mov	r0, r4
 80119ea:	f001 fde1 	bl	80135b0 <UTIL_TIMER_Start>
}
 80119ee:	b002      	add	sp, #8
 80119f0:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 80119f2:	f001 f948 	bl	8012c86 <RFW_Is_Init>
 80119f6:	2801      	cmp	r0, #1
 80119f8:	d00a      	beq.n	8011a10 <RadioSend+0xbc>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 80119fa:	481b      	ldr	r0, [pc, #108]	; (8011a68 <RadioSend+0x114>)
 80119fc:	7584      	strb	r4, [r0, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80119fe:	300e      	adds	r0, #14
 8011a00:	f000 ff5a 	bl	80128b8 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8011a04:	2200      	movs	r2, #0
 8011a06:	4621      	mov	r1, r4
 8011a08:	4628      	mov	r0, r5
 8011a0a:	f001 f824 	bl	8012a56 <SUBGRF_SendPayload>
 8011a0e:	e7e5      	b.n	80119dc <RadioSend+0x88>
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8011a10:	f10d 0207 	add.w	r2, sp, #7
 8011a14:	4621      	mov	r1, r4
 8011a16:	4628      	mov	r0, r5
 8011a18:	f001 f93a 	bl	8012c90 <RFW_TransmitInit>
 8011a1c:	b968      	cbnz	r0, 8011a3a <RadioSend+0xe6>
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8011a1e:	4812      	ldr	r0, [pc, #72]	; (8011a68 <RadioSend+0x114>)
 8011a20:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011a24:	7583      	strb	r3, [r0, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011a26:	300e      	adds	r0, #14
 8011a28:	f000 ff46 	bl	80128b8 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8011a2c:	2200      	movs	r2, #0
 8011a2e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8011a32:	4628      	mov	r0, r5
 8011a34:	f001 f80f 	bl	8012a56 <SUBGRF_SendPayload>
 8011a38:	e7d0      	b.n	80119dc <RadioSend+0x88>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 8011a3a:	4b0d      	ldr	r3, [pc, #52]	; (8011a70 <RadioSend+0x11c>)
 8011a3c:	2201      	movs	r2, #1
 8011a3e:	2100      	movs	r1, #0
 8011a40:	2002      	movs	r0, #2
 8011a42:	f001 fa07 	bl	8012e54 <UTIL_ADV_TRACE_COND_FSend>
                return;
 8011a46:	e7d2      	b.n	80119ee <RadioSend+0x9a>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8011a48:	4807      	ldr	r0, [pc, #28]	; (8011a68 <RadioSend+0x114>)
 8011a4a:	2302      	movs	r3, #2
 8011a4c:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8011a4e:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011a50:	300e      	adds	r0, #14
 8011a52:	f000 ff31 	bl	80128b8 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8011a56:	2200      	movs	r2, #0
 8011a58:	4621      	mov	r1, r4
 8011a5a:	4628      	mov	r0, r5
 8011a5c:	f000 fffb 	bl	8012a56 <SUBGRF_SendPayload>
            break;
 8011a60:	e7bc      	b.n	80119dc <RadioSend+0x88>
 8011a62:	bf00      	nop
 8011a64:	48000400 	.word	0x48000400
 8011a68:	2000105c 	.word	0x2000105c
 8011a6c:	200010b8 	.word	0x200010b8
 8011a70:	08014bd4 	.word	0x08014bd4

08011a74 <RadioRandom>:
{
 8011a74:	b508      	push	{r3, lr}
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8011a76:	2300      	movs	r3, #0
 8011a78:	461a      	mov	r2, r3
 8011a7a:	4619      	mov	r1, r3
 8011a7c:	4618      	mov	r0, r3
 8011a7e:	f000 fbe2 	bl	8012246 <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 8011a82:	f000 ff9b 	bl	80129bc <SUBGRF_GetRandom>
}
 8011a86:	bd08      	pop	{r3, pc}

08011a88 <RadioSetModem>:
{
 8011a88:	b510      	push	{r4, lr}
 8011a8a:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 8011a8c:	4b14      	ldr	r3, [pc, #80]	; (8011ae0 <RadioSetModem+0x58>)
 8011a8e:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem( modem );
 8011a90:	f001 f906 	bl	8012ca0 <RFW_SetRadioModem>
    switch( modem )
 8011a94:	2c01      	cmp	r4, #1
 8011a96:	d010      	beq.n	8011aba <RadioSetModem+0x32>
 8011a98:	2c03      	cmp	r4, #3
 8011a9a:	d01a      	beq.n	8011ad2 <RadioSetModem+0x4a>
 8011a9c:	b134      	cbz	r4, 8011aac <RadioSetModem+0x24>
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8011a9e:	2003      	movs	r0, #3
 8011aa0:	f000 fce4 	bl	801246c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8011aa4:	4b0e      	ldr	r3, [pc, #56]	; (8011ae0 <RadioSetModem+0x58>)
 8011aa6:	2200      	movs	r2, #0
 8011aa8:	735a      	strb	r2, [r3, #13]
}
 8011aaa:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8011aac:	2000      	movs	r0, #0
 8011aae:	f000 fcdd 	bl	801246c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8011ab2:	4b0b      	ldr	r3, [pc, #44]	; (8011ae0 <RadioSetModem+0x58>)
 8011ab4:	2200      	movs	r2, #0
 8011ab6:	735a      	strb	r2, [r3, #13]
        break;
 8011ab8:	e7f7      	b.n	8011aaa <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8011aba:	2001      	movs	r0, #1
 8011abc:	f000 fcd6 	bl	801246c <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8011ac0:	4b07      	ldr	r3, [pc, #28]	; (8011ae0 <RadioSetModem+0x58>)
 8011ac2:	7b5a      	ldrb	r2, [r3, #13]
 8011ac4:	7b18      	ldrb	r0, [r3, #12]
 8011ac6:	4282      	cmp	r2, r0
 8011ac8:	d0ef      	beq.n	8011aaa <RadioSetModem+0x22>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8011aca:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8011acc:	f000 f80a 	bl	8011ae4 <RadioSetPublicNetwork>
 8011ad0:	e7eb      	b.n	8011aaa <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8011ad2:	2002      	movs	r0, #2
 8011ad4:	f000 fcca 	bl	801246c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8011ad8:	4b01      	ldr	r3, [pc, #4]	; (8011ae0 <RadioSetModem+0x58>)
 8011ada:	2200      	movs	r2, #0
 8011adc:	735a      	strb	r2, [r3, #13]
}
 8011ade:	e7e4      	b.n	8011aaa <RadioSetModem+0x22>
 8011ae0:	2000105c 	.word	0x2000105c

08011ae4 <RadioSetPublicNetwork>:
{
 8011ae4:	b510      	push	{r4, lr}
 8011ae6:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8011ae8:	4b0e      	ldr	r3, [pc, #56]	; (8011b24 <RadioSetPublicNetwork+0x40>)
 8011aea:	7318      	strb	r0, [r3, #12]
 8011aec:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 8011aee:	2001      	movs	r0, #1
 8011af0:	f7ff ffca 	bl	8011a88 <RadioSetModem>
    if( enable == true )
 8011af4:	b154      	cbz	r4, 8011b0c <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8011af6:	2134      	movs	r1, #52	; 0x34
 8011af8:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8011afc:	f000 fc66 	bl	80123cc <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8011b00:	2144      	movs	r1, #68	; 0x44
 8011b02:	f240 7041 	movw	r0, #1857	; 0x741
 8011b06:	f000 fc61 	bl	80123cc <SUBGRF_WriteRegister>
}
 8011b0a:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8011b0c:	2114      	movs	r1, #20
 8011b0e:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8011b12:	f000 fc5b 	bl	80123cc <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8011b16:	2124      	movs	r1, #36	; 0x24
 8011b18:	f240 7041 	movw	r0, #1857	; 0x741
 8011b1c:	f000 fc56 	bl	80123cc <SUBGRF_WriteRegister>
}
 8011b20:	e7f3      	b.n	8011b0a <RadioSetPublicNetwork+0x26>
 8011b22:	bf00      	nop
 8011b24:	2000105c 	.word	0x2000105c

08011b28 <RadioSetTxConfig>:
{
 8011b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b2c:	b083      	sub	sp, #12
 8011b2e:	4604      	mov	r4, r0
 8011b30:	460e      	mov	r6, r1
 8011b32:	4617      	mov	r7, r2
 8011b34:	461d      	mov	r5, r3
 8011b36:	f8bd 8038 	ldrh.w	r8, [sp, #56]	; 0x38
 8011b3a:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
 8011b3e:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8011b42:	f001 f89f 	bl	8012c84 <RFW_DeInit>
    switch( modem )
 8011b46:	b174      	cbz	r4, 8011b66 <RadioSetTxConfig+0x3e>
 8011b48:	2c01      	cmp	r4, #1
 8011b4a:	d053      	beq.n	8011bf4 <RadioSetTxConfig+0xcc>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8011b4c:	4630      	mov	r0, r6
 8011b4e:	f000 ffc9 	bl	8012ae4 <SUBGRF_SetRfTxPower>
 8011b52:	4c51      	ldr	r4, [pc, #324]	; (8011c98 <RadioSetTxConfig+0x170>)
 8011b54:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 8011b58:	f001 f899 	bl	8012c8e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8011b5c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011b5e:	6063      	str	r3, [r4, #4]
}
 8011b60:	b003      	add	sp, #12
 8011b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8011b66:	4c4c      	ldr	r4, [pc, #304]	; (8011c98 <RadioSetTxConfig+0x170>)
 8011b68:	f04f 0b00 	mov.w	fp, #0
 8011b6c:	f884 b038 	strb.w	fp, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8011b70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011b72:	63e3      	str	r3, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8011b74:	230b      	movs	r3, #11
 8011b76:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8011b7a:	4628      	mov	r0, r5
 8011b7c:	f001 f820 	bl	8012bc0 <SUBGRF_GetFskBandwidthRegValue>
 8011b80:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8011b84:	6427      	str	r7, [r4, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8011b86:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8011b8a:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8011b8e:	f8a4 8010 	strh.w	r8, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8011b92:	2304      	movs	r3, #4
 8011b94:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8011b96:	2318      	movs	r3, #24
 8011b98:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8011b9a:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8011b9e:	f089 0901 	eor.w	r9, r9, #1
 8011ba2:	f884 9015 	strb.w	r9, [r4, #21]
            if( crcOn == true )
 8011ba6:	f1ba 0f00 	cmp.w	sl, #0
 8011baa:	d01f      	beq.n	8011bec <RadioSetTxConfig+0xc4>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8011bac:	22f2      	movs	r2, #242	; 0xf2
 8011bae:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8011bb0:	4c39      	ldr	r4, [pc, #228]	; (8011c98 <RadioSetTxConfig+0x170>)
 8011bb2:	2301      	movs	r3, #1
 8011bb4:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8011bb6:	f7ff fc43 	bl	8011440 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8011bba:	2000      	movs	r0, #0
 8011bbc:	f7ff ff64 	bl	8011a88 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8011bc0:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8011bc4:	f000 fc6c 	bl	80124a0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011bc8:	f104 000e 	add.w	r0, r4, #14
 8011bcc:	f000 fe74 	bl	80128b8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8011bd0:	4a32      	ldr	r2, [pc, #200]	; (8011c9c <RadioSetTxConfig+0x174>)
 8011bd2:	466b      	mov	r3, sp
 8011bd4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011bd8:	e883 0003 	stmia.w	r3, {r0, r1}
 8011bdc:	4618      	mov	r0, r3
 8011bde:	f000 fe39 	bl	8012854 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8011be2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8011be6:	f000 fd5d 	bl	80126a4 <SUBGRF_SetWhiteningSeed>
            break;
 8011bea:	e7af      	b.n	8011b4c <RadioSetTxConfig+0x24>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8011bec:	4b2a      	ldr	r3, [pc, #168]	; (8011c98 <RadioSetTxConfig+0x170>)
 8011bee:	2201      	movs	r2, #1
 8011bf0:	75da      	strb	r2, [r3, #23]
 8011bf2:	e7dd      	b.n	8011bb0 <RadioSetTxConfig+0x88>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8011bf4:	4a28      	ldr	r2, [pc, #160]	; (8011c98 <RadioSetTxConfig+0x170>)
 8011bf6:	2301      	movs	r3, #1
 8011bf8:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8011bfc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011bfe:	b2db      	uxtb	r3, r3
 8011c00:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8011c04:	4926      	ldr	r1, [pc, #152]	; (8011ca0 <RadioSetTxConfig+0x178>)
 8011c06:	5d49      	ldrb	r1, [r1, r5]
 8011c08:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8011c0c:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 8011c10:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8011c14:	b91d      	cbnz	r5, 8011c1e <RadioSetTxConfig+0xf6>
 8011c16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011c18:	3a0b      	subs	r2, #11
 8011c1a:	2a01      	cmp	r2, #1
 8011c1c:	d92c      	bls.n	8011c78 <RadioSetTxConfig+0x150>
 8011c1e:	2d01      	cmp	r5, #1
 8011c20:	d027      	beq.n	8011c72 <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8011c22:	4a1d      	ldr	r2, [pc, #116]	; (8011c98 <RadioSetTxConfig+0x170>)
 8011c24:	2100      	movs	r1, #0
 8011c26:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8011c2a:	4a1b      	ldr	r2, [pc, #108]	; (8011c98 <RadioSetTxConfig+0x170>)
 8011c2c:	2101      	movs	r1, #1
 8011c2e:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8011c30:	3b05      	subs	r3, #5
 8011c32:	b2db      	uxtb	r3, r3
 8011c34:	428b      	cmp	r3, r1
 8011c36:	d924      	bls.n	8011c82 <RadioSetTxConfig+0x15a>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8011c38:	4b17      	ldr	r3, [pc, #92]	; (8011c98 <RadioSetTxConfig+0x170>)
 8011c3a:	f8a3 801c 	strh.w	r8, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8011c3e:	4c16      	ldr	r4, [pc, #88]	; (8011c98 <RadioSetTxConfig+0x170>)
 8011c40:	f884 901e 	strb.w	r9, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8011c44:	4b17      	ldr	r3, [pc, #92]	; (8011ca4 <RadioSetTxConfig+0x17c>)
 8011c46:	781b      	ldrb	r3, [r3, #0]
 8011c48:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8011c4a:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8011c4e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8011c52:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 8011c56:	f7ff fbf3 	bl	8011440 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8011c5a:	2001      	movs	r0, #1
 8011c5c:	f7ff ff14 	bl	8011a88 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8011c60:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8011c64:	f000 fc1c 	bl	80124a0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011c68:	f104 000e 	add.w	r0, r4, #14
 8011c6c:	f000 fe24 	bl	80128b8 <SUBGRF_SetPacketParams>
            break;
 8011c70:	e76c      	b.n	8011b4c <RadioSetTxConfig+0x24>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8011c72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011c74:	2a0c      	cmp	r2, #12
 8011c76:	d1d4      	bne.n	8011c22 <RadioSetTxConfig+0xfa>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8011c78:	4a07      	ldr	r2, [pc, #28]	; (8011c98 <RadioSetTxConfig+0x170>)
 8011c7a:	2101      	movs	r1, #1
 8011c7c:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 8011c80:	e7d3      	b.n	8011c2a <RadioSetTxConfig+0x102>
                if( preambleLen < 12 )
 8011c82:	f1b8 0f0b 	cmp.w	r8, #11
 8011c86:	d803      	bhi.n	8011c90 <RadioSetTxConfig+0x168>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8011c88:	4613      	mov	r3, r2
 8011c8a:	220c      	movs	r2, #12
 8011c8c:	839a      	strh	r2, [r3, #28]
 8011c8e:	e7d6      	b.n	8011c3e <RadioSetTxConfig+0x116>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8011c90:	4b01      	ldr	r3, [pc, #4]	; (8011c98 <RadioSetTxConfig+0x170>)
 8011c92:	f8a3 801c 	strh.w	r8, [r3, #28]
 8011c96:	e7d2      	b.n	8011c3e <RadioSetTxConfig+0x116>
 8011c98:	2000105c 	.word	0x2000105c
 8011c9c:	08013e38 	.word	0x08013e38
 8011ca0:	08014bec 	.word	0x08014bec
 8011ca4:	20000118 	.word	0x20000118

08011ca8 <RadioSetRxConfig>:
{
 8011ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cac:	b085      	sub	sp, #20
 8011cae:	4604      	mov	r4, r0
 8011cb0:	460d      	mov	r5, r1
 8011cb2:	4616      	mov	r6, r2
 8011cb4:	9301      	str	r3, [sp, #4]
 8011cb6:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
 8011cba:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 8011cbe:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8011cc2:	f89d b04c 	ldrb.w	fp, [sp, #76]	; 0x4c
 8011cc6:	f89d 805c 	ldrb.w	r8, [sp, #92]	; 0x5c
    SubgRf.RxContinuous = rxContinuous;
 8011cca:	4b6e      	ldr	r3, [pc, #440]	; (8011e84 <RadioSetRxConfig+0x1dc>)
 8011ccc:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8011cd0:	f000 ffd8 	bl	8012c84 <RFW_DeInit>
    if( rxContinuous == true )
 8011cd4:	f1b8 0f00 	cmp.w	r8, #0
 8011cd8:	d001      	beq.n	8011cde <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 8011cda:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 8011cde:	b14f      	cbz	r7, 8011cf4 <RadioSetRxConfig+0x4c>
        MaxPayloadLength = payloadLen;
 8011ce0:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8011ce4:	4b68      	ldr	r3, [pc, #416]	; (8011e88 <RadioSetRxConfig+0x1e0>)
 8011ce6:	701a      	strb	r2, [r3, #0]
    switch( modem )
 8011ce8:	b144      	cbz	r4, 8011cfc <RadioSetRxConfig+0x54>
 8011cea:	2c01      	cmp	r4, #1
 8011cec:	d057      	beq.n	8011d9e <RadioSetRxConfig+0xf6>
}
 8011cee:	b005      	add	sp, #20
 8011cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MaxPayloadLength = 0xFF;
 8011cf4:	4b64      	ldr	r3, [pc, #400]	; (8011e88 <RadioSetRxConfig+0x1e0>)
 8011cf6:	22ff      	movs	r2, #255	; 0xff
 8011cf8:	701a      	strb	r2, [r3, #0]
 8011cfa:	e7f5      	b.n	8011ce8 <RadioSetRxConfig+0x40>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8011cfc:	2000      	movs	r0, #0
 8011cfe:	f000 fa05 	bl	801210c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8011d02:	4c60      	ldr	r4, [pc, #384]	; (8011e84 <RadioSetRxConfig+0x1dc>)
 8011d04:	f04f 0800 	mov.w	r8, #0
 8011d08:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8011d0c:	63e6      	str	r6, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8011d0e:	230b      	movs	r3, #11
 8011d10:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8011d14:	4628      	mov	r0, r5
 8011d16:	f000 ff53 	bl	8012bc0 <SUBGRF_GetFskBandwidthRegValue>
 8011d1a:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8011d1e:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8011d22:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8011d26:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8011d2a:	2304      	movs	r3, #4
 8011d2c:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8011d2e:	2318      	movs	r3, #24
 8011d30:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8011d32:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8011d36:	f087 0701 	eor.w	r7, r7, #1
 8011d3a:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8011d3c:	4b52      	ldr	r3, [pc, #328]	; (8011e88 <RadioSetRxConfig+0x1e0>)
 8011d3e:	781b      	ldrb	r3, [r3, #0]
 8011d40:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 8011d42:	f1bb 0f00 	cmp.w	fp, #0
 8011d46:	d026      	beq.n	8011d96 <RadioSetRxConfig+0xee>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8011d48:	22f2      	movs	r2, #242	; 0xf2
 8011d4a:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8011d4c:	4c4d      	ldr	r4, [pc, #308]	; (8011e84 <RadioSetRxConfig+0x1dc>)
 8011d4e:	2301      	movs	r3, #1
 8011d50:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8011d52:	f7ff fb75 	bl	8011440 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8011d56:	2000      	movs	r0, #0
 8011d58:	f7ff fe96 	bl	8011a88 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8011d5c:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8011d60:	f000 fb9e 	bl	80124a0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011d64:	f104 000e 	add.w	r0, r4, #14
 8011d68:	f000 fda6 	bl	80128b8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8011d6c:	4a47      	ldr	r2, [pc, #284]	; (8011e8c <RadioSetRxConfig+0x1e4>)
 8011d6e:	ab02      	add	r3, sp, #8
 8011d70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011d74:	e883 0003 	stmia.w	r3, {r0, r1}
 8011d78:	4618      	mov	r0, r3
 8011d7a:	f000 fd6b 	bl	8012854 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8011d7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8011d82:	f000 fc8f 	bl	80126a4 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8011d86:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8011d8a:	fb02 fa0a 	mul.w	sl, r2, sl
 8011d8e:	fbba f6f6 	udiv	r6, sl, r6
 8011d92:	60a6      	str	r6, [r4, #8]
            break;
 8011d94:	e7ab      	b.n	8011cee <RadioSetRxConfig+0x46>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8011d96:	4b3b      	ldr	r3, [pc, #236]	; (8011e84 <RadioSetRxConfig+0x1dc>)
 8011d98:	2201      	movs	r2, #1
 8011d9a:	75da      	strb	r2, [r3, #23]
 8011d9c:	e7d6      	b.n	8011d4c <RadioSetRxConfig+0xa4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8011d9e:	2000      	movs	r0, #0
 8011da0:	f000 f9b4 	bl	801210c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8011da4:	4a37      	ldr	r2, [pc, #220]	; (8011e84 <RadioSetRxConfig+0x1dc>)
 8011da6:	2301      	movs	r3, #1
 8011da8:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8011dac:	b2f3      	uxtb	r3, r6
 8011dae:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8011db2:	4937      	ldr	r1, [pc, #220]	; (8011e90 <RadioSetRxConfig+0x1e8>)
 8011db4:	5d49      	ldrb	r1, [r1, r5]
 8011db6:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8011dba:	9901      	ldr	r1, [sp, #4]
 8011dbc:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8011dc0:	b91d      	cbnz	r5, 8011dca <RadioSetRxConfig+0x122>
 8011dc2:	f1a6 020b 	sub.w	r2, r6, #11
 8011dc6:	2a01      	cmp	r2, #1
 8011dc8:	d941      	bls.n	8011e4e <RadioSetRxConfig+0x1a6>
 8011dca:	2d01      	cmp	r5, #1
 8011dcc:	d03d      	beq.n	8011e4a <RadioSetRxConfig+0x1a2>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8011dce:	4a2d      	ldr	r2, [pc, #180]	; (8011e84 <RadioSetRxConfig+0x1dc>)
 8011dd0:	2100      	movs	r1, #0
 8011dd2:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8011dd6:	4a2b      	ldr	r2, [pc, #172]	; (8011e84 <RadioSetRxConfig+0x1dc>)
 8011dd8:	2101      	movs	r1, #1
 8011dda:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8011ddc:	3b05      	subs	r3, #5
 8011dde:	b2db      	uxtb	r3, r3
 8011de0:	428b      	cmp	r3, r1
 8011de2:	d939      	bls.n	8011e58 <RadioSetRxConfig+0x1b0>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8011de4:	4b27      	ldr	r3, [pc, #156]	; (8011e84 <RadioSetRxConfig+0x1dc>)
 8011de6:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8011dea:	4c26      	ldr	r4, [pc, #152]	; (8011e84 <RadioSetRxConfig+0x1dc>)
 8011dec:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8011dee:	4b26      	ldr	r3, [pc, #152]	; (8011e88 <RadioSetRxConfig+0x1e0>)
 8011df0:	781b      	ldrb	r3, [r3, #0]
 8011df2:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8011df4:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8011df8:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8011dfc:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 8011e00:	f7ff fb1e 	bl	8011440 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8011e04:	2001      	movs	r0, #1
 8011e06:	f7ff fe3f 	bl	8011a88 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8011e0a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8011e0e:	f000 fb47 	bl	80124a0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011e12:	f104 000e 	add.w	r0, r4, #14
 8011e16:	f000 fd4f 	bl	80128b8 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8011e1a:	fa5f f08a 	uxtb.w	r0, sl
 8011e1e:	f000 fb03 	bl	8012428 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8011e22:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8011e26:	2b01      	cmp	r3, #1
 8011e28:	d021      	beq.n	8011e6e <RadioSetRxConfig+0x1c6>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8011e2a:	f240 7036 	movw	r0, #1846	; 0x736
 8011e2e:	f000 fbbf 	bl	80125b0 <SUBGRF_ReadRegister>
 8011e32:	f040 0104 	orr.w	r1, r0, #4
 8011e36:	b2c9      	uxtb	r1, r1
 8011e38:	f240 7036 	movw	r0, #1846	; 0x736
 8011e3c:	f000 fac6 	bl	80123cc <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8011e40:	4b10      	ldr	r3, [pc, #64]	; (8011e84 <RadioSetRxConfig+0x1dc>)
 8011e42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011e46:	609a      	str	r2, [r3, #8]
}
 8011e48:	e751      	b.n	8011cee <RadioSetRxConfig+0x46>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8011e4a:	2e0c      	cmp	r6, #12
 8011e4c:	d1bf      	bne.n	8011dce <RadioSetRxConfig+0x126>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8011e4e:	4a0d      	ldr	r2, [pc, #52]	; (8011e84 <RadioSetRxConfig+0x1dc>)
 8011e50:	2101      	movs	r1, #1
 8011e52:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 8011e56:	e7be      	b.n	8011dd6 <RadioSetRxConfig+0x12e>
                if( preambleLen < 12 )
 8011e58:	f1b9 0f0b 	cmp.w	r9, #11
 8011e5c:	d803      	bhi.n	8011e66 <RadioSetRxConfig+0x1be>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8011e5e:	4613      	mov	r3, r2
 8011e60:	220c      	movs	r2, #12
 8011e62:	839a      	strh	r2, [r3, #28]
 8011e64:	e7c1      	b.n	8011dea <RadioSetRxConfig+0x142>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8011e66:	4b07      	ldr	r3, [pc, #28]	; (8011e84 <RadioSetRxConfig+0x1dc>)
 8011e68:	f8a3 901c 	strh.w	r9, [r3, #28]
 8011e6c:	e7bd      	b.n	8011dea <RadioSetRxConfig+0x142>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8011e6e:	f240 7036 	movw	r0, #1846	; 0x736
 8011e72:	f000 fb9d 	bl	80125b0 <SUBGRF_ReadRegister>
 8011e76:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8011e7a:	f240 7036 	movw	r0, #1846	; 0x736
 8011e7e:	f000 faa5 	bl	80123cc <SUBGRF_WriteRegister>
 8011e82:	e7dd      	b.n	8011e40 <RadioSetRxConfig+0x198>
 8011e84:	2000105c 	.word	0x2000105c
 8011e88:	20000118 	.word	0x20000118
 8011e8c:	08013e38 	.word	0x08013e38
 8011e90:	08014bec 	.word	0x08014bec

08011e94 <RadioIsChannelFree>:
{
 8011e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e96:	b08b      	sub	sp, #44	; 0x2c
 8011e98:	4604      	mov	r4, r0
 8011e9a:	460f      	mov	r7, r1
 8011e9c:	4616      	mov	r6, r2
 8011e9e:	461d      	mov	r5, r3
    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8011ea0:	f7ff face 	bl	8011440 <RadioStandby>
    RadioSetModem( MODEM_FSK );
 8011ea4:	2000      	movs	r0, #0
 8011ea6:	f7ff fdef 	bl	8011a88 <RadioSetModem>
    RadioSetChannel( freq );
 8011eaa:	4620      	mov	r0, r4
 8011eac:	f7ff fcf8 	bl	80118a0 <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8011eb0:	2301      	movs	r3, #1
 8011eb2:	9309      	str	r3, [sp, #36]	; 0x24
 8011eb4:	2400      	movs	r4, #0
 8011eb6:	9408      	str	r4, [sp, #32]
 8011eb8:	9407      	str	r4, [sp, #28]
 8011eba:	9406      	str	r4, [sp, #24]
 8011ebc:	9405      	str	r4, [sp, #20]
 8011ebe:	9404      	str	r4, [sp, #16]
 8011ec0:	9403      	str	r4, [sp, #12]
 8011ec2:	9402      	str	r4, [sp, #8]
 8011ec4:	2303      	movs	r3, #3
 8011ec6:	9301      	str	r3, [sp, #4]
 8011ec8:	9700      	str	r7, [sp, #0]
 8011eca:	4623      	mov	r3, r4
 8011ecc:	f44f 7216 	mov.w	r2, #600	; 0x258
 8011ed0:	4639      	mov	r1, r7
 8011ed2:	4620      	mov	r0, r4
 8011ed4:	f7ff fee8 	bl	8011ca8 <RadioSetRxConfig>
    RadioRx( 0 );
 8011ed8:	4620      	mov	r0, r4
 8011eda:	f7ff fcf9 	bl	80118d0 <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8011ede:	f7ff fc93 	bl	8011808 <RadioGetWakeupTime>
 8011ee2:	f7f0 f811 	bl	8001f08 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 8011ee6:	f001 fac9 	bl	801347c <UTIL_TIMER_GetCurrentTime>
 8011eea:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8011eec:	4620      	mov	r0, r4
 8011eee:	f001 facf 	bl	8013490 <UTIL_TIMER_GetElapsedTime>
 8011ef2:	42a8      	cmp	r0, r5
 8011ef4:	d206      	bcs.n	8011f04 <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 8011ef6:	2000      	movs	r0, #0
 8011ef8:	f7ff fcb0 	bl	801185c <RadioRssi>
        if( rssi > rssiThresh )
 8011efc:	42b0      	cmp	r0, r6
 8011efe:	ddf5      	ble.n	8011eec <RadioIsChannelFree+0x58>
            status = false;
 8011f00:	2400      	movs	r4, #0
 8011f02:	e000      	b.n	8011f06 <RadioIsChannelFree+0x72>
    bool status = true;
 8011f04:	2401      	movs	r4, #1
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8011f06:	f7ff fa9b 	bl	8011440 <RadioStandby>
}
 8011f0a:	4620      	mov	r0, r4
 8011f0c:	b00b      	add	sp, #44	; 0x2c
 8011f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011f10 <RadioInit>:
{
 8011f10:	b570      	push	{r4, r5, r6, lr}
 8011f12:	b082      	sub	sp, #8
    RadioEvents = events;
 8011f14:	4b1d      	ldr	r3, [pc, #116]	; (8011f8c <RadioInit+0x7c>)
 8011f16:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 8011f18:	4d1d      	ldr	r5, [pc, #116]	; (8011f90 <RadioInit+0x80>)
 8011f1a:	2400      	movs	r4, #0
 8011f1c:	706c      	strb	r4, [r5, #1]
    SubgRf.TxTimeout = 0;
 8011f1e:	606c      	str	r4, [r5, #4]
    SubgRf.RxTimeout = 0;
 8011f20:	60ac      	str	r4, [r5, #8]
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8011f22:	65ac      	str	r4, [r5, #88]	; 0x58
    SUBGRF_Init( RadioOnDioIrq );
 8011f24:	481b      	ldr	r0, [pc, #108]	; (8011f94 <RadioInit+0x84>)
 8011f26:	f000 fb67 	bl	80125f8 <SUBGRF_Init>
    SubgRf.PublicNetwork.Current = false;
 8011f2a:	736c      	strb	r4, [r5, #13]
    SubgRf.PublicNetwork.Previous = false;
 8011f2c:	732c      	strb	r4, [r5, #12]
    SUBGRF_SetRegulatorMode( );
 8011f2e:	f000 f8fa 	bl	8012126 <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8011f32:	4621      	mov	r1, r4
 8011f34:	4620      	mov	r0, r4
 8011f36:	f000 f9f1 	bl	801231c <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8011f3a:	2204      	movs	r2, #4
 8011f3c:	4621      	mov	r1, r4
 8011f3e:	2001      	movs	r0, #1
 8011f40:	f000 fbc9 	bl	80126d6 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8011f44:	4623      	mov	r3, r4
 8011f46:	4622      	mov	r2, r4
 8011f48:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011f4c:	4608      	mov	r0, r1
 8011f4e:	f000 f97a 	bl	8012246 <SUBGRF_SetDioIrqParams>
    RadioSleep();
 8011f52:	f7ff fcf5 	bl	8011940 <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8011f56:	4e10      	ldr	r6, [pc, #64]	; (8011f98 <RadioInit+0x88>)
 8011f58:	9400      	str	r4, [sp, #0]
 8011f5a:	4b10      	ldr	r3, [pc, #64]	; (8011f9c <RadioInit+0x8c>)
 8011f5c:	4622      	mov	r2, r4
 8011f5e:	f04f 31ff 	mov.w	r1, #4294967295
 8011f62:	4630      	mov	r0, r6
 8011f64:	f001 fa6c 	bl	8013440 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8011f68:	4d0d      	ldr	r5, [pc, #52]	; (8011fa0 <RadioInit+0x90>)
 8011f6a:	9400      	str	r4, [sp, #0]
 8011f6c:	4b0d      	ldr	r3, [pc, #52]	; (8011fa4 <RadioInit+0x94>)
 8011f6e:	4622      	mov	r2, r4
 8011f70:	f04f 31ff 	mov.w	r1, #4294967295
 8011f74:	4628      	mov	r0, r5
 8011f76:	f001 fa63 	bl	8013440 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8011f7a:	4630      	mov	r0, r6
 8011f7c:	f001 fabe 	bl	80134fc <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8011f80:	4628      	mov	r0, r5
 8011f82:	f001 fabb 	bl	80134fc <UTIL_TIMER_Stop>
}
 8011f86:	b002      	add	sp, #8
 8011f88:	bd70      	pop	{r4, r5, r6, pc}
 8011f8a:	bf00      	nop
 8011f8c:	20001040 	.word	0x20001040
 8011f90:	2000105c 	.word	0x2000105c
 8011f94:	080117f5 	.word	0x080117f5
 8011f98:	200010b8 	.word	0x200010b8
 8011f9c:	0801134d 	.word	0x0801134d
 8011fa0:	20001044 	.word	0x20001044
 8011fa4:	08011375 	.word	0x08011375

08011fa8 <SUBGRF_WriteCommand>:
    CRITICAL_SECTION_END();
}

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8011fa8:	b510      	push	{r4, lr}
 8011faa:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011fac:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011fb0:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8011fb2:	460a      	mov	r2, r1
 8011fb4:	4601      	mov	r1, r0
 8011fb6:	4803      	ldr	r0, [pc, #12]	; (8011fc4 <SUBGRF_WriteCommand+0x1c>)
 8011fb8:	f7f5 fb82 	bl	80076c0 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011fbc:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 8011fc0:	bd10      	pop	{r4, pc}
 8011fc2:	bf00      	nop
 8011fc4:	2000028c 	.word	0x2000028c

08011fc8 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8011fc8:	b510      	push	{r4, lr}
 8011fca:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011fcc:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011fd0:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8011fd2:	460a      	mov	r2, r1
 8011fd4:	4601      	mov	r1, r0
 8011fd6:	4803      	ldr	r0, [pc, #12]	; (8011fe4 <SUBGRF_ReadCommand+0x1c>)
 8011fd8:	f7f5 fbc8 	bl	800776c <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011fdc:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 8011fe0:	bd10      	pop	{r4, pc}
 8011fe2:	bf00      	nop
 8011fe4:	2000028c 	.word	0x2000028c

08011fe8 <SUBGRF_GetOperatingMode>:
}
 8011fe8:	4b01      	ldr	r3, [pc, #4]	; (8011ff0 <SUBGRF_GetOperatingMode+0x8>)
 8011fea:	7818      	ldrb	r0, [r3, #0]
 8011fec:	4770      	bx	lr
 8011fee:	bf00      	nop
 8011ff0:	200010d6 	.word	0x200010d6

08011ff4 <SUBGRF_SetStandby>:
{
 8011ff4:	b500      	push	{lr}
 8011ff6:	b083      	sub	sp, #12
 8011ff8:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8011ffc:	2201      	movs	r2, #1
 8011ffe:	f10d 0107 	add.w	r1, sp, #7
 8012002:	2080      	movs	r0, #128	; 0x80
 8012004:	f7ff ffd0 	bl	8011fa8 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8012008:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801200c:	b92b      	cbnz	r3, 801201a <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 801200e:	4b05      	ldr	r3, [pc, #20]	; (8012024 <SUBGRF_SetStandby+0x30>)
 8012010:	2201      	movs	r2, #1
 8012012:	701a      	strb	r2, [r3, #0]
}
 8012014:	b003      	add	sp, #12
 8012016:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 801201a:	4b02      	ldr	r3, [pc, #8]	; (8012024 <SUBGRF_SetStandby+0x30>)
 801201c:	2202      	movs	r2, #2
 801201e:	701a      	strb	r2, [r3, #0]
}
 8012020:	e7f8      	b.n	8012014 <SUBGRF_SetStandby+0x20>
 8012022:	bf00      	nop
 8012024:	200010d6 	.word	0x200010d6

08012028 <SUBGRF_SetTx>:
{
 8012028:	b500      	push	{lr}
 801202a:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 801202c:	4b0a      	ldr	r3, [pc, #40]	; (8012058 <SUBGRF_SetTx+0x30>)
 801202e:	2204      	movs	r2, #4
 8012030:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8012032:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8012036:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801203a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801203e:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8012042:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8012046:	2203      	movs	r2, #3
 8012048:	a901      	add	r1, sp, #4
 801204a:	2083      	movs	r0, #131	; 0x83
 801204c:	f7ff ffac 	bl	8011fa8 <SUBGRF_WriteCommand>
}
 8012050:	b003      	add	sp, #12
 8012052:	f85d fb04 	ldr.w	pc, [sp], #4
 8012056:	bf00      	nop
 8012058:	200010d6 	.word	0x200010d6

0801205c <SUBGRF_SetRx>:
{
 801205c:	b500      	push	{lr}
 801205e:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 8012060:	4b0a      	ldr	r3, [pc, #40]	; (801208c <SUBGRF_SetRx+0x30>)
 8012062:	2205      	movs	r2, #5
 8012064:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8012066:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801206a:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801206e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8012072:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8012076:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801207a:	2203      	movs	r2, #3
 801207c:	a901      	add	r1, sp, #4
 801207e:	2082      	movs	r0, #130	; 0x82
 8012080:	f7ff ff92 	bl	8011fa8 <SUBGRF_WriteCommand>
}
 8012084:	b003      	add	sp, #12
 8012086:	f85d fb04 	ldr.w	pc, [sp], #4
 801208a:	bf00      	nop
 801208c:	200010d6 	.word	0x200010d6

08012090 <SUBGRF_SetRxDutyCycle>:
{
 8012090:	b500      	push	{lr}
 8012092:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8012094:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8012098:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801209c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80120a0:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 80120a4:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 80120a8:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80120ac:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 80120b0:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80120b4:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 80120b8:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 80120bc:	2206      	movs	r2, #6
 80120be:	4669      	mov	r1, sp
 80120c0:	2094      	movs	r0, #148	; 0x94
 80120c2:	f7ff ff71 	bl	8011fa8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 80120c6:	4b03      	ldr	r3, [pc, #12]	; (80120d4 <SUBGRF_SetRxDutyCycle+0x44>)
 80120c8:	2206      	movs	r2, #6
 80120ca:	701a      	strb	r2, [r3, #0]
}
 80120cc:	b003      	add	sp, #12
 80120ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80120d2:	bf00      	nop
 80120d4:	200010d6 	.word	0x200010d6

080120d8 <SUBGRF_SetCad>:
{
 80120d8:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 80120da:	2200      	movs	r2, #0
 80120dc:	4611      	mov	r1, r2
 80120de:	20c5      	movs	r0, #197	; 0xc5
 80120e0:	f7ff ff62 	bl	8011fa8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 80120e4:	4b01      	ldr	r3, [pc, #4]	; (80120ec <SUBGRF_SetCad+0x14>)
 80120e6:	2207      	movs	r2, #7
 80120e8:	701a      	strb	r2, [r3, #0]
}
 80120ea:	bd08      	pop	{r3, pc}
 80120ec:	200010d6 	.word	0x200010d6

080120f0 <SUBGRF_SetTxContinuousWave>:
{
 80120f0:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 80120f2:	2200      	movs	r2, #0
 80120f4:	4611      	mov	r1, r2
 80120f6:	20d1      	movs	r0, #209	; 0xd1
 80120f8:	f7ff ff56 	bl	8011fa8 <SUBGRF_WriteCommand>
}
 80120fc:	bd08      	pop	{r3, pc}

080120fe <SUBGRF_SetTxInfinitePreamble>:
{
 80120fe:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8012100:	2200      	movs	r2, #0
 8012102:	4611      	mov	r1, r2
 8012104:	20d2      	movs	r0, #210	; 0xd2
 8012106:	f7ff ff4f 	bl	8011fa8 <SUBGRF_WriteCommand>
}
 801210a:	bd08      	pop	{r3, pc}

0801210c <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 801210c:	b500      	push	{lr}
 801210e:	b083      	sub	sp, #12
 8012110:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8012114:	2201      	movs	r2, #1
 8012116:	f10d 0107 	add.w	r1, sp, #7
 801211a:	209f      	movs	r0, #159	; 0x9f
 801211c:	f7ff ff44 	bl	8011fa8 <SUBGRF_WriteCommand>
}
 8012120:	b003      	add	sp, #12
 8012122:	f85d fb04 	ldr.w	pc, [sp], #4

08012126 <SUBGRF_SetRegulatorMode>:
{
 8012126:	b500      	push	{lr}
 8012128:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801212a:	f7f1 f8ed 	bl	8003308 <RBI_IsDCDC>
 801212e:	2801      	cmp	r0, #1
 8012130:	d00b      	beq.n	801214a <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 8012132:	2300      	movs	r3, #0
 8012134:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8012138:	2201      	movs	r2, #1
 801213a:	f10d 0107 	add.w	r1, sp, #7
 801213e:	2096      	movs	r0, #150	; 0x96
 8012140:	f7ff ff32 	bl	8011fa8 <SUBGRF_WriteCommand>
}
 8012144:	b003      	add	sp, #12
 8012146:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 801214a:	2301      	movs	r3, #1
 801214c:	f88d 3007 	strb.w	r3, [sp, #7]
 8012150:	e7f2      	b.n	8012138 <SUBGRF_SetRegulatorMode+0x12>

08012152 <SUBGRF_Calibrate>:
{
 8012152:	b500      	push	{lr}
 8012154:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8012156:	f000 0340 	and.w	r3, r0, #64	; 0x40
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801215a:	f000 0220 	and.w	r2, r0, #32
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801215e:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8012160:	f000 0210 	and.w	r2, r0, #16
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8012164:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8012166:	f000 0208 	and.w	r2, r0, #8
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801216a:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801216c:	f000 0204 	and.w	r2, r0, #4
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8012170:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8012172:	f000 0202 	and.w	r2, r0, #2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8012176:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8012178:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801217c:	4318      	orrs	r0, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801217e:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8012182:	2201      	movs	r2, #1
 8012184:	f10d 0107 	add.w	r1, sp, #7
 8012188:	2089      	movs	r0, #137	; 0x89
 801218a:	f7ff ff0d 	bl	8011fa8 <SUBGRF_WriteCommand>
}
 801218e:	b003      	add	sp, #12
 8012190:	f85d fb04 	ldr.w	pc, [sp], #4

08012194 <SUBGRF_CalibrateImage>:
{
 8012194:	b500      	push	{lr}
 8012196:	b083      	sub	sp, #12
    if( freq > 900000000 )
 8012198:	4b1c      	ldr	r3, [pc, #112]	; (801220c <SUBGRF_CalibrateImage+0x78>)
 801219a:	4298      	cmp	r0, r3
 801219c:	d90d      	bls.n	80121ba <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 801219e:	23e1      	movs	r3, #225	; 0xe1
 80121a0:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 80121a4:	23e9      	movs	r3, #233	; 0xe9
 80121a6:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80121aa:	2202      	movs	r2, #2
 80121ac:	a901      	add	r1, sp, #4
 80121ae:	2098      	movs	r0, #152	; 0x98
 80121b0:	f7ff fefa 	bl	8011fa8 <SUBGRF_WriteCommand>
}
 80121b4:	b003      	add	sp, #12
 80121b6:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 80121ba:	4b15      	ldr	r3, [pc, #84]	; (8012210 <SUBGRF_CalibrateImage+0x7c>)
 80121bc:	4298      	cmp	r0, r3
 80121be:	d906      	bls.n	80121ce <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 80121c0:	23d7      	movs	r3, #215	; 0xd7
 80121c2:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 80121c6:	23db      	movs	r3, #219	; 0xdb
 80121c8:	f88d 3005 	strb.w	r3, [sp, #5]
 80121cc:	e7ed      	b.n	80121aa <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 80121ce:	4b11      	ldr	r3, [pc, #68]	; (8012214 <SUBGRF_CalibrateImage+0x80>)
 80121d0:	4298      	cmp	r0, r3
 80121d2:	d906      	bls.n	80121e2 <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 80121d4:	23c1      	movs	r3, #193	; 0xc1
 80121d6:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 80121da:	23c5      	movs	r3, #197	; 0xc5
 80121dc:	f88d 3005 	strb.w	r3, [sp, #5]
 80121e0:	e7e3      	b.n	80121aa <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 80121e2:	4b0d      	ldr	r3, [pc, #52]	; (8012218 <SUBGRF_CalibrateImage+0x84>)
 80121e4:	4298      	cmp	r0, r3
 80121e6:	d906      	bls.n	80121f6 <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 80121e8:	2375      	movs	r3, #117	; 0x75
 80121ea:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 80121ee:	2381      	movs	r3, #129	; 0x81
 80121f0:	f88d 3005 	strb.w	r3, [sp, #5]
 80121f4:	e7d9      	b.n	80121aa <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 80121f6:	4b09      	ldr	r3, [pc, #36]	; (801221c <SUBGRF_CalibrateImage+0x88>)
 80121f8:	4298      	cmp	r0, r3
 80121fa:	d9d6      	bls.n	80121aa <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x6B;
 80121fc:	236b      	movs	r3, #107	; 0x6b
 80121fe:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 8012202:	236f      	movs	r3, #111	; 0x6f
 8012204:	f88d 3005 	strb.w	r3, [sp, #5]
 8012208:	e7cf      	b.n	80121aa <SUBGRF_CalibrateImage+0x16>
 801220a:	bf00      	nop
 801220c:	35a4e900 	.word	0x35a4e900
 8012210:	32a9f880 	.word	0x32a9f880
 8012214:	2de54480 	.word	0x2de54480
 8012218:	1b6b0b00 	.word	0x1b6b0b00
 801221c:	1954fc40 	.word	0x1954fc40

08012220 <SUBGRF_SetPaConfig>:
{
 8012220:	b500      	push	{lr}
 8012222:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 8012224:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 8012228:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 801222c:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 8012230:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8012234:	2204      	movs	r2, #4
 8012236:	eb0d 0102 	add.w	r1, sp, r2
 801223a:	2095      	movs	r0, #149	; 0x95
 801223c:	f7ff feb4 	bl	8011fa8 <SUBGRF_WriteCommand>
}
 8012240:	b003      	add	sp, #12
 8012242:	f85d fb04 	ldr.w	pc, [sp], #4

08012246 <SUBGRF_SetDioIrqParams>:
{
 8012246:	b500      	push	{lr}
 8012248:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801224a:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 801224e:	f88d c000 	strb.w	ip, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8012252:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8012256:	0a08      	lsrs	r0, r1, #8
 8012258:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801225c:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8012260:	0a11      	lsrs	r1, r2, #8
 8012262:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8012266:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801226a:	0a1a      	lsrs	r2, r3, #8
 801226c:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8012270:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8012274:	2208      	movs	r2, #8
 8012276:	4669      	mov	r1, sp
 8012278:	4610      	mov	r0, r2
 801227a:	f7ff fe95 	bl	8011fa8 <SUBGRF_WriteCommand>
}
 801227e:	b003      	add	sp, #12
 8012280:	f85d fb04 	ldr.w	pc, [sp], #4

08012284 <SUBGRF_SetTcxoMode>:
{
 8012284:	b500      	push	{lr}
 8012286:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 8012288:	f000 0007 	and.w	r0, r0, #7
 801228c:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8012290:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8012294:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8012298:	f3c1 2307 	ubfx	r3, r1, #8, #8
 801229c:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 80122a0:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 80122a4:	2204      	movs	r2, #4
 80122a6:	eb0d 0102 	add.w	r1, sp, r2
 80122aa:	2097      	movs	r0, #151	; 0x97
 80122ac:	f7ff fe7c 	bl	8011fa8 <SUBGRF_WriteCommand>
}
 80122b0:	b003      	add	sp, #12
 80122b2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080122b8 <SUBGRF_SetRfFrequency>:
{
 80122b8:	b510      	push	{r4, lr}
 80122ba:	b082      	sub	sp, #8
 80122bc:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 80122be:	4b12      	ldr	r3, [pc, #72]	; (8012308 <SUBGRF_SetRfFrequency+0x50>)
 80122c0:	781b      	ldrb	r3, [r3, #0]
 80122c2:	b1d3      	cbz	r3, 80122fa <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);
 80122c4:	4a11      	ldr	r2, [pc, #68]	; (801230c <SUBGRF_SetRfFrequency+0x54>)
 80122c6:	2300      	movs	r3, #0
 80122c8:	0660      	lsls	r0, r4, #25
 80122ca:	09e1      	lsrs	r1, r4, #7
 80122cc:	f7ee fefe 	bl	80010cc <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 80122d0:	0e03      	lsrs	r3, r0, #24
 80122d2:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 80122d6:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80122da:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 80122de:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80122e2:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 80122e6:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 80122ea:	2204      	movs	r2, #4
 80122ec:	eb0d 0102 	add.w	r1, sp, r2
 80122f0:	2086      	movs	r0, #134	; 0x86
 80122f2:	f7ff fe59 	bl	8011fa8 <SUBGRF_WriteCommand>
}
 80122f6:	b002      	add	sp, #8
 80122f8:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 80122fa:	f7ff ff4b 	bl	8012194 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 80122fe:	4b02      	ldr	r3, [pc, #8]	; (8012308 <SUBGRF_SetRfFrequency+0x50>)
 8012300:	2201      	movs	r2, #1
 8012302:	701a      	strb	r2, [r3, #0]
 8012304:	e7de      	b.n	80122c4 <SUBGRF_SetRfFrequency+0xc>
 8012306:	bf00      	nop
 8012308:	200010d4 	.word	0x200010d4
 801230c:	01e84800 	.word	0x01e84800

08012310 <SUBGRF_GetPacketType>:
}
 8012310:	4b01      	ldr	r3, [pc, #4]	; (8012318 <SUBGRF_GetPacketType+0x8>)
 8012312:	7818      	ldrb	r0, [r3, #0]
 8012314:	4770      	bx	lr
 8012316:	bf00      	nop
 8012318:	200010d7 	.word	0x200010d7

0801231c <SUBGRF_SetBufferBaseAddress>:
{
 801231c:	b500      	push	{lr}
 801231e:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 8012320:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 8012324:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8012328:	2202      	movs	r2, #2
 801232a:	a901      	add	r1, sp, #4
 801232c:	208f      	movs	r0, #143	; 0x8f
 801232e:	f7ff fe3b 	bl	8011fa8 <SUBGRF_WriteCommand>
}
 8012332:	b003      	add	sp, #12
 8012334:	f85d fb04 	ldr.w	pc, [sp], #4

08012338 <SUBGRF_GetRssiInst>:
{
 8012338:	b500      	push	{lr}
 801233a:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801233c:	2201      	movs	r2, #1
 801233e:	a901      	add	r1, sp, #4
 8012340:	2015      	movs	r0, #21
 8012342:	f7ff fe41 	bl	8011fc8 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8012346:	f89d 0004 	ldrb.w	r0, [sp, #4]
 801234a:	4240      	negs	r0, r0
}
 801234c:	1040      	asrs	r0, r0, #1
 801234e:	b003      	add	sp, #12
 8012350:	f85d fb04 	ldr.w	pc, [sp], #4

08012354 <SUBGRF_GetPacketStatus>:
{
 8012354:	b510      	push	{r4, lr}
 8012356:	b082      	sub	sp, #8
 8012358:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801235a:	2203      	movs	r2, #3
 801235c:	a901      	add	r1, sp, #4
 801235e:	2014      	movs	r0, #20
 8012360:	f7ff fe32 	bl	8011fc8 <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 8012364:	f7ff ffd4 	bl	8012310 <SUBGRF_GetPacketType>
 8012368:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 801236a:	b148      	cbz	r0, 8012380 <SUBGRF_GetPacketStatus+0x2c>
 801236c:	2801      	cmp	r0, #1
 801236e:	d018      	beq.n	80123a2 <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8012370:	2214      	movs	r2, #20
 8012372:	2100      	movs	r1, #0
 8012374:	4620      	mov	r0, r4
 8012376:	f000 fe8e 	bl	8013096 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801237a:	230f      	movs	r3, #15
 801237c:	7023      	strb	r3, [r4, #0]
}
 801237e:	e00e      	b.n	801239e <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8012380:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012384:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8012386:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801238a:	425b      	negs	r3, r3
 801238c:	105b      	asrs	r3, r3, #1
 801238e:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8012390:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012394:	425b      	negs	r3, r3
 8012396:	105b      	asrs	r3, r3, #1
 8012398:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801239a:	2300      	movs	r3, #0
 801239c:	60a3      	str	r3, [r4, #8]
}
 801239e:	b002      	add	sp, #8
 80123a0:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 80123a2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80123a6:	425b      	negs	r3, r3
 80123a8:	105b      	asrs	r3, r3, #1
 80123aa:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 80123ac:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 80123b0:	3302      	adds	r3, #2
 80123b2:	109b      	asrs	r3, r3, #2
 80123b4:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 80123b6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80123ba:	425b      	negs	r3, r3
 80123bc:	105b      	asrs	r3, r3, #1
 80123be:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 80123c0:	4b01      	ldr	r3, [pc, #4]	; (80123c8 <SUBGRF_GetPacketStatus+0x74>)
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	6123      	str	r3, [r4, #16]
            break;
 80123c6:	e7ea      	b.n	801239e <SUBGRF_GetPacketStatus+0x4a>
 80123c8:	200010d0 	.word	0x200010d0

080123cc <SUBGRF_WriteRegister>:
{
 80123cc:	b500      	push	{lr}
 80123ce:	b083      	sub	sp, #12
 80123d0:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 80123d4:	2301      	movs	r3, #1
 80123d6:	f10d 0207 	add.w	r2, sp, #7
 80123da:	4601      	mov	r1, r0
 80123dc:	4802      	ldr	r0, [pc, #8]	; (80123e8 <SUBGRF_WriteRegister+0x1c>)
 80123de:	f7f5 f8cb 	bl	8007578 <HAL_SUBGHZ_WriteRegisters>
}
 80123e2:	b003      	add	sp, #12
 80123e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80123e8:	2000028c 	.word	0x2000028c

080123ec <SUBGRF_SetRxBoosted>:
{
 80123ec:	b510      	push	{r4, lr}
 80123ee:	b082      	sub	sp, #8
 80123f0:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 80123f2:	4b0c      	ldr	r3, [pc, #48]	; (8012424 <SUBGRF_SetRxBoosted+0x38>)
 80123f4:	2205      	movs	r2, #5
 80123f6:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 80123f8:	2197      	movs	r1, #151	; 0x97
 80123fa:	f640 00ac 	movw	r0, #2220	; 0x8ac
 80123fe:	f7ff ffe5 	bl	80123cc <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8012402:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8012406:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801240a:	f3c4 2307 	ubfx	r3, r4, #8, #8
 801240e:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8012412:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8012416:	2203      	movs	r2, #3
 8012418:	a901      	add	r1, sp, #4
 801241a:	2082      	movs	r0, #130	; 0x82
 801241c:	f7ff fdc4 	bl	8011fa8 <SUBGRF_WriteCommand>
}
 8012420:	b002      	add	sp, #8
 8012422:	bd10      	pop	{r4, pc}
 8012424:	200010d6 	.word	0x200010d6

08012428 <SUBGRF_SetLoRaSymbNumTimeout>:
{
 8012428:	b500      	push	{lr}
 801242a:	b083      	sub	sp, #12
 801242c:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8012430:	2201      	movs	r2, #1
 8012432:	f10d 0107 	add.w	r1, sp, #7
 8012436:	20a0      	movs	r0, #160	; 0xa0
 8012438:	f7ff fdb6 	bl	8011fa8 <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 801243c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012440:	2b3f      	cmp	r3, #63	; 0x3f
 8012442:	d90f      	bls.n	8012464 <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 8012444:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 8012446:	2200      	movs	r2, #0
        while( mant > 31 )
 8012448:	e002      	b.n	8012450 <SUBGRF_SetLoRaSymbNumTimeout+0x28>
            mant >>= 2;
 801244a:	089b      	lsrs	r3, r3, #2
            exp++;
 801244c:	1c51      	adds	r1, r2, #1
 801244e:	b2ca      	uxtb	r2, r1
        while( mant > 31 )
 8012450:	2b1f      	cmp	r3, #31
 8012452:	d8fa      	bhi.n	801244a <SUBGRF_SetLoRaSymbNumTimeout+0x22>
        reg = exp + ( mant << 3 );
 8012454:	00d9      	lsls	r1, r3, #3
 8012456:	b2c9      	uxtb	r1, r1
 8012458:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801245a:	b2c9      	uxtb	r1, r1
 801245c:	f240 7006 	movw	r0, #1798	; 0x706
 8012460:	f7ff ffb4 	bl	80123cc <SUBGRF_WriteRegister>
}
 8012464:	b003      	add	sp, #12
 8012466:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801246c <SUBGRF_SetPacketType>:
{
 801246c:	b500      	push	{lr}
 801246e:	b083      	sub	sp, #12
 8012470:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 8012474:	b2c3      	uxtb	r3, r0
 8012476:	4a09      	ldr	r2, [pc, #36]	; (801249c <SUBGRF_SetPacketType+0x30>)
 8012478:	7013      	strb	r3, [r2, #0]
    if( packetType == PACKET_TYPE_GFSK )
 801247a:	b143      	cbz	r3, 801248e <SUBGRF_SetPacketType+0x22>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801247c:	2201      	movs	r2, #1
 801247e:	f10d 0107 	add.w	r1, sp, #7
 8012482:	208a      	movs	r0, #138	; 0x8a
 8012484:	f7ff fd90 	bl	8011fa8 <SUBGRF_WriteCommand>
}
 8012488:	b003      	add	sp, #12
 801248a:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801248e:	2100      	movs	r1, #0
 8012490:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8012494:	f7ff ff9a 	bl	80123cc <SUBGRF_WriteRegister>
 8012498:	e7f0      	b.n	801247c <SUBGRF_SetPacketType+0x10>
 801249a:	bf00      	nop
 801249c:	200010d7 	.word	0x200010d7

080124a0 <SUBGRF_SetModulationParams>:
{
 80124a0:	b510      	push	{r4, lr}
 80124a2:	b082      	sub	sp, #8
 80124a4:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80124a6:	4b3e      	ldr	r3, [pc, #248]	; (80125a0 <SUBGRF_SetModulationParams+0x100>)
 80124a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80124ac:	ab02      	add	r3, sp, #8
 80124ae:	e903 0003 	stmdb	r3, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 80124b2:	7820      	ldrb	r0, [r4, #0]
 80124b4:	4b3b      	ldr	r3, [pc, #236]	; (80125a4 <SUBGRF_SetModulationParams+0x104>)
 80124b6:	781b      	ldrb	r3, [r3, #0]
 80124b8:	4298      	cmp	r0, r3
 80124ba:	d106      	bne.n	80124ca <SUBGRF_SetModulationParams+0x2a>
    switch( modulationParams->PacketType )
 80124bc:	7823      	ldrb	r3, [r4, #0]
 80124be:	2b03      	cmp	r3, #3
 80124c0:	d82c      	bhi.n	801251c <SUBGRF_SetModulationParams+0x7c>
 80124c2:	e8df f003 	tbb	[pc, r3]
 80124c6:	4205      	.short	0x4205
 80124c8:	542d      	.short	0x542d
        SUBGRF_SetPacketType( modulationParams->PacketType );
 80124ca:	f7ff ffcf 	bl	801246c <SUBGRF_SetPacketType>
 80124ce:	e7f5      	b.n	80124bc <SUBGRF_SetModulationParams+0x1c>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 80124d0:	6862      	ldr	r2, [r4, #4]
 80124d2:	4b35      	ldr	r3, [pc, #212]	; (80125a8 <SUBGRF_SetModulationParams+0x108>)
 80124d4:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80124d8:	0c1a      	lsrs	r2, r3, #16
 80124da:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80124de:	0a1a      	lsrs	r2, r3, #8
 80124e0:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 80124e4:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80124e8:	7b23      	ldrb	r3, [r4, #12]
 80124ea:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80124ee:	7b63      	ldrb	r3, [r4, #13]
 80124f0:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 80124f4:	68a1      	ldr	r1, [r4, #8]
 80124f6:	4a2d      	ldr	r2, [pc, #180]	; (80125ac <SUBGRF_SetModulationParams+0x10c>)
 80124f8:	2300      	movs	r3, #0
 80124fa:	0648      	lsls	r0, r1, #25
 80124fc:	09c9      	lsrs	r1, r1, #7
 80124fe:	f7ee fde5 	bl	80010cc <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8012502:	0c03      	lsrs	r3, r0, #16
 8012504:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8012508:	0a03      	lsrs	r3, r0, #8
 801250a:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 801250e:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8012512:	2208      	movs	r2, #8
 8012514:	4669      	mov	r1, sp
 8012516:	208b      	movs	r0, #139	; 0x8b
 8012518:	f7ff fd46 	bl	8011fa8 <SUBGRF_WriteCommand>
}
 801251c:	b002      	add	sp, #8
 801251e:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8012520:	6922      	ldr	r2, [r4, #16]
 8012522:	4b21      	ldr	r3, [pc, #132]	; (80125a8 <SUBGRF_SetModulationParams+0x108>)
 8012524:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8012528:	0c1a      	lsrs	r2, r3, #16
 801252a:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801252e:	0a1a      	lsrs	r2, r3, #8
 8012530:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8012534:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8012538:	7d23      	ldrb	r3, [r4, #20]
 801253a:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801253e:	2204      	movs	r2, #4
 8012540:	4669      	mov	r1, sp
 8012542:	208b      	movs	r0, #139	; 0x8b
 8012544:	f7ff fd30 	bl	8011fa8 <SUBGRF_WriteCommand>
        break;
 8012548:	e7e8      	b.n	801251c <SUBGRF_SetModulationParams+0x7c>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801254a:	7e23      	ldrb	r3, [r4, #24]
 801254c:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8012550:	7e63      	ldrb	r3, [r4, #25]
 8012552:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8012556:	7ea3      	ldrb	r3, [r4, #26]
 8012558:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801255c:	7ee3      	ldrb	r3, [r4, #27]
 801255e:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8012562:	2204      	movs	r2, #4
 8012564:	4669      	mov	r1, sp
 8012566:	208b      	movs	r0, #139	; 0x8b
 8012568:	f7ff fd1e 	bl	8011fa8 <SUBGRF_WriteCommand>
        break;
 801256c:	e7d6      	b.n	801251c <SUBGRF_SetModulationParams+0x7c>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801256e:	6862      	ldr	r2, [r4, #4]
 8012570:	4b0d      	ldr	r3, [pc, #52]	; (80125a8 <SUBGRF_SetModulationParams+0x108>)
 8012572:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8012576:	0c1a      	lsrs	r2, r3, #16
 8012578:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801257c:	0a1a      	lsrs	r2, r3, #8
 801257e:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8012582:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8012586:	7b23      	ldrb	r3, [r4, #12]
 8012588:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801258c:	7b63      	ldrb	r3, [r4, #13]
 801258e:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8012592:	2205      	movs	r2, #5
 8012594:	4669      	mov	r1, sp
 8012596:	208b      	movs	r0, #139	; 0x8b
 8012598:	f7ff fd06 	bl	8011fa8 <SUBGRF_WriteCommand>
}
 801259c:	e7be      	b.n	801251c <SUBGRF_SetModulationParams+0x7c>
 801259e:	bf00      	nop
 80125a0:	08013e40 	.word	0x08013e40
 80125a4:	200010d7 	.word	0x200010d7
 80125a8:	3d090000 	.word	0x3d090000
 80125ac:	01e84800 	.word	0x01e84800

080125b0 <SUBGRF_ReadRegister>:
{
 80125b0:	b500      	push	{lr}
 80125b2:	b083      	sub	sp, #12
 80125b4:	4601      	mov	r1, r0
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 80125b6:	2301      	movs	r3, #1
 80125b8:	f10d 0207 	add.w	r2, sp, #7
 80125bc:	4803      	ldr	r0, [pc, #12]	; (80125cc <SUBGRF_ReadRegister+0x1c>)
 80125be:	f7f5 f82b 	bl	8007618 <HAL_SUBGHZ_ReadRegisters>
}
 80125c2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80125c6:	b003      	add	sp, #12
 80125c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80125cc:	2000028c 	.word	0x2000028c

080125d0 <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
}

static void Radio_SMPS_Set(uint8_t level)
{
 80125d0:	b510      	push	{r4, lr}
 80125d2:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 80125d4:	f7f0 fe98 	bl	8003308 <RBI_IsDCDC>
 80125d8:	2801      	cmp	r0, #1
 80125da:	d000      	beq.n	80125de <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 80125dc:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 80125de:	f640 1023 	movw	r0, #2339	; 0x923
 80125e2:	f7ff ffe5 	bl	80125b0 <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 80125e6:	f000 01f9 	and.w	r1, r0, #249	; 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 80125ea:	4321      	orrs	r1, r4
 80125ec:	f640 1023 	movw	r0, #2339	; 0x923
 80125f0:	f7ff feec 	bl	80123cc <SUBGRF_WriteRegister>
}
 80125f4:	e7f2      	b.n	80125dc <Radio_SMPS_Set+0xc>
	...

080125f8 <SUBGRF_Init>:
{
 80125f8:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 80125fa:	b108      	cbz	r0, 8012600 <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 80125fc:	4a16      	ldr	r2, [pc, #88]	; (8012658 <SUBGRF_Init+0x60>)
 80125fe:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 8012600:	f7ef fb7c 	bl	8001cfc <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8012604:	2002      	movs	r0, #2
 8012606:	f7ff ffe3 	bl	80125d0 <Radio_SMPS_Set>
    ImageCalibrated = false;
 801260a:	2000      	movs	r0, #0
 801260c:	4b13      	ldr	r3, [pc, #76]	; (801265c <SUBGRF_Init+0x64>)
 801260e:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 8012610:	f7ff fcf0 	bl	8011ff4 <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 8012614:	f7f0 fe74 	bl	8003300 <RBI_IsTCXO>
 8012618:	2801      	cmp	r0, #1
 801261a:	d00f      	beq.n	801263c <SUBGRF_Init+0x44>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801261c:	2120      	movs	r1, #32
 801261e:	f640 1011 	movw	r0, #2321	; 0x911
 8012622:	f7ff fed3 	bl	80123cc <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8012626:	2120      	movs	r1, #32
 8012628:	f640 1012 	movw	r0, #2322	; 0x912
 801262c:	f7ff fece 	bl	80123cc <SUBGRF_WriteRegister>
    RBI_Init();
 8012630:	f7f0 fe5a 	bl	80032e8 <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 8012634:	4b0a      	ldr	r3, [pc, #40]	; (8012660 <SUBGRF_Init+0x68>)
 8012636:	2201      	movs	r2, #1
 8012638:	701a      	strb	r2, [r3, #0]
}
 801263a:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801263c:	2140      	movs	r1, #64	; 0x40
 801263e:	f7ff fe21 	bl	8012284 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8012642:	2100      	movs	r1, #0
 8012644:	f640 1011 	movw	r0, #2321	; 0x911
 8012648:	f7ff fec0 	bl	80123cc <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 801264c:	f04f 007f 	mov.w	r0, #127	; 0x7f
 8012650:	f7ff fd7f 	bl	8012152 <SUBGRF_Calibrate>
 8012654:	e7ec      	b.n	8012630 <SUBGRF_Init+0x38>
 8012656:	bf00      	nop
 8012658:	200010d8 	.word	0x200010d8
 801265c:	200010d4 	.word	0x200010d4
 8012660:	200010d6 	.word	0x200010d6

08012664 <SUBGRF_SetSleep>:
{
 8012664:	b510      	push	{r4, lr}
 8012666:	b082      	sub	sp, #8
 8012668:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801266a:	2000      	movs	r0, #0
 801266c:	f7f0 fe40 	bl	80032f0 <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8012670:	2002      	movs	r0, #2
 8012672:	f7ff ffad 	bl	80125d0 <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8012676:	f004 0004 	and.w	r0, r4, #4
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801267a:	f004 0302 	and.w	r3, r4, #2
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801267e:	4318      	orrs	r0, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8012680:	f004 0401 	and.w	r4, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8012684:	4304      	orrs	r4, r0
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8012686:	f88d 4007 	strb.w	r4, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801268a:	2201      	movs	r2, #1
 801268c:	f10d 0107 	add.w	r1, sp, #7
 8012690:	2084      	movs	r0, #132	; 0x84
 8012692:	f7ff fc89 	bl	8011fa8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8012696:	4b02      	ldr	r3, [pc, #8]	; (80126a0 <SUBGRF_SetSleep+0x3c>)
 8012698:	2200      	movs	r2, #0
 801269a:	701a      	strb	r2, [r3, #0]
}
 801269c:	b002      	add	sp, #8
 801269e:	bd10      	pop	{r4, pc}
 80126a0:	200010d6 	.word	0x200010d6

080126a4 <SUBGRF_SetWhiteningSeed>:
{
 80126a4:	b510      	push	{r4, lr}
 80126a6:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 80126a8:	f7ff fe32 	bl	8012310 <SUBGRF_GetPacketType>
 80126ac:	b100      	cbz	r0, 80126b0 <SUBGRF_SetWhiteningSeed+0xc>
}
 80126ae:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 80126b0:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80126b4:	f7ff ff7c 	bl	80125b0 <SUBGRF_ReadRegister>
 80126b8:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 80126bc:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 80126c0:	4301      	orrs	r1, r0
 80126c2:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80126c6:	f7ff fe81 	bl	80123cc <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 80126ca:	b2e1      	uxtb	r1, r4
 80126cc:	f240 60b9 	movw	r0, #1721	; 0x6b9
 80126d0:	f7ff fe7c 	bl	80123cc <SUBGRF_WriteRegister>
}
 80126d4:	e7eb      	b.n	80126ae <SUBGRF_SetWhiteningSeed+0xa>

080126d6 <SUBGRF_SetTxParams>:
{
 80126d6:	b570      	push	{r4, r5, r6, lr}
 80126d8:	b082      	sub	sp, #8
 80126da:	460c      	mov	r4, r1
 80126dc:	4616      	mov	r6, r2
    if (paSelect == RFO_LP)
 80126de:	2801      	cmp	r0, #1
 80126e0:	d035      	beq.n	801274e <SUBGRF_SetTxParams+0x78>
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 80126e2:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80126e6:	f7ff ff63 	bl	80125b0 <SUBGRF_ReadRegister>
 80126ea:	f040 011e 	orr.w	r1, r0, #30
 80126ee:	b2c9      	uxtb	r1, r1
 80126f0:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80126f4:	f7ff fe6a 	bl	80123cc <SUBGRF_WriteRegister>
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 80126f8:	2001      	movs	r0, #1
 80126fa:	f7f0 fe09 	bl	8003310 <RBI_GetRFOMaxPowerConfig>
 80126fe:	4605      	mov	r5, r0
        if (power > max_power)
 8012700:	4284      	cmp	r4, r0
 8012702:	dd00      	ble.n	8012706 <SUBGRF_SetTxParams+0x30>
            power = max_power;
 8012704:	b244      	sxtb	r4, r0
        if (max_power == 20)
 8012706:	2d14      	cmp	r5, #20
 8012708:	d054      	beq.n	80127b4 <SUBGRF_SetTxParams+0xde>
        else if (max_power == 17)
 801270a:	2d11      	cmp	r5, #17
 801270c:	d05c      	beq.n	80127c8 <SUBGRF_SetTxParams+0xf2>
        else if (max_power == 14)
 801270e:	2d0e      	cmp	r5, #14
 8012710:	d064      	beq.n	80127dc <SUBGRF_SetTxParams+0x106>
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8012712:	2301      	movs	r3, #1
 8012714:	2200      	movs	r2, #0
 8012716:	2107      	movs	r1, #7
 8012718:	2004      	movs	r0, #4
 801271a:	f7ff fd81 	bl	8012220 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801271e:	1b64      	subs	r4, r4, r5
 8012720:	3416      	adds	r4, #22
 8012722:	b264      	sxtb	r4, r4
        if (power < -9)
 8012724:	f114 0f09 	cmn.w	r4, #9
 8012728:	da01      	bge.n	801272e <SUBGRF_SetTxParams+0x58>
            power = -9;
 801272a:	f06f 0408 	mvn.w	r4, #8
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801272e:	2138      	movs	r1, #56	; 0x38
 8012730:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8012734:	f7ff fe4a 	bl	80123cc <SUBGRF_WriteRegister>
    buf[0] = power;
 8012738:	f88d 4004 	strb.w	r4, [sp, #4]
    buf[1] = (uint8_t)rampTime;
 801273c:	f88d 6005 	strb.w	r6, [sp, #5]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8012740:	2202      	movs	r2, #2
 8012742:	a901      	add	r1, sp, #4
 8012744:	208e      	movs	r0, #142	; 0x8e
 8012746:	f7ff fc2f 	bl	8011fa8 <SUBGRF_WriteCommand>
}
 801274a:	b002      	add	sp, #8
 801274c:	bd70      	pop	{r4, r5, r6, pc}
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801274e:	2000      	movs	r0, #0
 8012750:	f7f0 fdde 	bl	8003310 <RBI_GetRFOMaxPowerConfig>
 8012754:	4605      	mov	r5, r0
        if (power >  max_power)
 8012756:	4284      	cmp	r4, r0
 8012758:	dd00      	ble.n	801275c <SUBGRF_SetTxParams+0x86>
          power = max_power;
 801275a:	b244      	sxtb	r4, r0
        if (max_power == 14)
 801275c:	2d0e      	cmp	r5, #14
 801275e:	d015      	beq.n	801278c <SUBGRF_SetTxParams+0xb6>
        else if (max_power == 10)
 8012760:	2d0a      	cmp	r5, #10
 8012762:	d01d      	beq.n	80127a0 <SUBGRF_SetTxParams+0xca>
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 8012764:	2301      	movs	r3, #1
 8012766:	461a      	mov	r2, r3
 8012768:	2100      	movs	r1, #0
 801276a:	2006      	movs	r0, #6
 801276c:	f7ff fd58 	bl	8012220 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8012770:	1b64      	subs	r4, r4, r5
 8012772:	340e      	adds	r4, #14
 8012774:	b264      	sxtb	r4, r4
        if (power < -17)
 8012776:	f114 0f11 	cmn.w	r4, #17
 801277a:	da01      	bge.n	8012780 <SUBGRF_SetTxParams+0xaa>
            power = -17;
 801277c:	f06f 0410 	mvn.w	r4, #16
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8012780:	2118      	movs	r1, #24
 8012782:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8012786:	f7ff fe21 	bl	80123cc <SUBGRF_WriteRegister>
 801278a:	e7d5      	b.n	8012738 <SUBGRF_SetTxParams+0x62>
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801278c:	2301      	movs	r3, #1
 801278e:	461a      	mov	r2, r3
 8012790:	2100      	movs	r1, #0
 8012792:	2004      	movs	r0, #4
 8012794:	f7ff fd44 	bl	8012220 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8012798:	1b64      	subs	r4, r4, r5
 801279a:	340e      	adds	r4, #14
 801279c:	b264      	sxtb	r4, r4
 801279e:	e7ea      	b.n	8012776 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 80127a0:	2301      	movs	r3, #1
 80127a2:	461a      	mov	r2, r3
 80127a4:	2100      	movs	r1, #0
 80127a6:	4618      	mov	r0, r3
 80127a8:	f7ff fd3a 	bl	8012220 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 80127ac:	1b64      	subs	r4, r4, r5
 80127ae:	340d      	adds	r4, #13
 80127b0:	b264      	sxtb	r4, r4
 80127b2:	e7e0      	b.n	8012776 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 80127b4:	2301      	movs	r3, #1
 80127b6:	2200      	movs	r2, #0
 80127b8:	2105      	movs	r1, #5
 80127ba:	2003      	movs	r0, #3
 80127bc:	f7ff fd30 	bl	8012220 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80127c0:	1b64      	subs	r4, r4, r5
 80127c2:	3416      	adds	r4, #22
 80127c4:	b264      	sxtb	r4, r4
 80127c6:	e7ad      	b.n	8012724 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 80127c8:	2301      	movs	r3, #1
 80127ca:	2200      	movs	r2, #0
 80127cc:	2103      	movs	r1, #3
 80127ce:	2002      	movs	r0, #2
 80127d0:	f7ff fd26 	bl	8012220 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80127d4:	1b64      	subs	r4, r4, r5
 80127d6:	3416      	adds	r4, #22
 80127d8:	b264      	sxtb	r4, r4
 80127da:	e7a3      	b.n	8012724 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 80127dc:	2301      	movs	r3, #1
 80127de:	2200      	movs	r2, #0
 80127e0:	2102      	movs	r1, #2
 80127e2:	4608      	mov	r0, r1
 80127e4:	f7ff fd1c 	bl	8012220 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80127e8:	1b64      	subs	r4, r4, r5
 80127ea:	340e      	adds	r4, #14
 80127ec:	b264      	sxtb	r4, r4
 80127ee:	e799      	b.n	8012724 <SUBGRF_SetTxParams+0x4e>

080127f0 <SUBGRF_GetRxBufferStatus>:
{
 80127f0:	b530      	push	{r4, r5, lr}
 80127f2:	b083      	sub	sp, #12
 80127f4:	4605      	mov	r5, r0
 80127f6:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 80127f8:	2202      	movs	r2, #2
 80127fa:	a901      	add	r1, sp, #4
 80127fc:	2013      	movs	r0, #19
 80127fe:	f7ff fbe3 	bl	8011fc8 <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8012802:	f7ff fd85 	bl	8012310 <SUBGRF_GetPacketType>
 8012806:	2801      	cmp	r0, #1
 8012808:	d007      	beq.n	801281a <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 801280a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801280e:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 8012810:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012814:	7023      	strb	r3, [r4, #0]
}
 8012816:	b003      	add	sp, #12
 8012818:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801281a:	4b05      	ldr	r3, [pc, #20]	; (8012830 <SUBGRF_GetRxBufferStatus+0x40>)
 801281c:	781b      	ldrb	r3, [r3, #0]
 801281e:	b2db      	uxtb	r3, r3
 8012820:	2b01      	cmp	r3, #1
 8012822:	d1f2      	bne.n	801280a <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8012824:	f240 7002 	movw	r0, #1794	; 0x702
 8012828:	f7ff fec2 	bl	80125b0 <SUBGRF_ReadRegister>
 801282c:	7028      	strb	r0, [r5, #0]
 801282e:	e7ef      	b.n	8012810 <SUBGRF_GetRxBufferStatus+0x20>
 8012830:	200010d5 	.word	0x200010d5

08012834 <SUBGRF_WriteRegisters>:
{
 8012834:	b510      	push	{r4, lr}
 8012836:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012838:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801283c:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801283e:	460a      	mov	r2, r1
 8012840:	4601      	mov	r1, r0
 8012842:	4803      	ldr	r0, [pc, #12]	; (8012850 <SUBGRF_WriteRegisters+0x1c>)
 8012844:	f7f4 fe98 	bl	8007578 <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012848:	f384 8810 	msr	PRIMASK, r4
}
 801284c:	bd10      	pop	{r4, pc}
 801284e:	bf00      	nop
 8012850:	2000028c 	.word	0x2000028c

08012854 <SUBGRF_SetSyncWord>:
{
 8012854:	b508      	push	{r3, lr}
 8012856:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8012858:	2208      	movs	r2, #8
 801285a:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801285e:	f7ff ffe9 	bl	8012834 <SUBGRF_WriteRegisters>
}
 8012862:	2000      	movs	r0, #0
 8012864:	bd08      	pop	{r3, pc}

08012866 <SUBGRF_SetCrcSeed>:
{
 8012866:	b500      	push	{lr}
 8012868:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801286a:	0a03      	lsrs	r3, r0, #8
 801286c:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8012870:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8012874:	f7ff fd4c 	bl	8012310 <SUBGRF_GetPacketType>
 8012878:	b110      	cbz	r0, 8012880 <SUBGRF_SetCrcSeed+0x1a>
}
 801287a:	b003      	add	sp, #12
 801287c:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8012880:	2202      	movs	r2, #2
 8012882:	a901      	add	r1, sp, #4
 8012884:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8012888:	f7ff ffd4 	bl	8012834 <SUBGRF_WriteRegisters>
}
 801288c:	e7f5      	b.n	801287a <SUBGRF_SetCrcSeed+0x14>

0801288e <SUBGRF_SetCrcPolynomial>:
{
 801288e:	b500      	push	{lr}
 8012890:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8012892:	0a03      	lsrs	r3, r0, #8
 8012894:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8012898:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 801289c:	f7ff fd38 	bl	8012310 <SUBGRF_GetPacketType>
 80128a0:	b110      	cbz	r0, 80128a8 <SUBGRF_SetCrcPolynomial+0x1a>
}
 80128a2:	b003      	add	sp, #12
 80128a4:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 80128a8:	2202      	movs	r2, #2
 80128aa:	a901      	add	r1, sp, #4
 80128ac:	f240 60be 	movw	r0, #1726	; 0x6be
 80128b0:	f7ff ffc0 	bl	8012834 <SUBGRF_WriteRegisters>
}
 80128b4:	e7f5      	b.n	80128a2 <SUBGRF_SetCrcPolynomial+0x14>
	...

080128b8 <SUBGRF_SetPacketParams>:
{
 80128b8:	b510      	push	{r4, lr}
 80128ba:	b084      	sub	sp, #16
 80128bc:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80128be:	ab01      	add	r3, sp, #4
 80128c0:	4a33      	ldr	r2, [pc, #204]	; (8012990 <SUBGRF_SetPacketParams+0xd8>)
 80128c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80128c4:	c303      	stmia	r3!, {r0, r1}
 80128c6:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 80128c8:	7820      	ldrb	r0, [r4, #0]
 80128ca:	4b32      	ldr	r3, [pc, #200]	; (8012994 <SUBGRF_SetPacketParams+0xdc>)
 80128cc:	781b      	ldrb	r3, [r3, #0]
 80128ce:	4298      	cmp	r0, r3
 80128d0:	d106      	bne.n	80128e0 <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 80128d2:	7823      	ldrb	r3, [r4, #0]
 80128d4:	2b03      	cmp	r3, #3
 80128d6:	d82a      	bhi.n	801292e <SUBGRF_SetPacketParams+0x76>
 80128d8:	e8df f003 	tbb	[pc, r3]
 80128dc:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 80128e0:	f7ff fdc4 	bl	801246c <SUBGRF_SetPacketType>
 80128e4:	e7f5      	b.n	80128d2 <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 80128e6:	7a63      	ldrb	r3, [r4, #9]
 80128e8:	2bf1      	cmp	r3, #241	; 0xf1
 80128ea:	d022      	beq.n	8012932 <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 80128ec:	2bf2      	cmp	r3, #242	; 0xf2
 80128ee:	d02a      	beq.n	8012946 <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 80128f0:	8862      	ldrh	r2, [r4, #2]
 80128f2:	0a11      	lsrs	r1, r2, #8
 80128f4:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 80128f8:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 80128fc:	7922      	ldrb	r2, [r4, #4]
 80128fe:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8012902:	7962      	ldrb	r2, [r4, #5]
 8012904:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8012908:	79a2      	ldrb	r2, [r4, #6]
 801290a:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801290e:	79e2      	ldrb	r2, [r4, #7]
 8012910:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8012914:	7a22      	ldrb	r2, [r4, #8]
 8012916:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 801291a:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801291e:	7aa3      	ldrb	r3, [r4, #10]
 8012920:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 8012924:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8012926:	a901      	add	r1, sp, #4
 8012928:	208c      	movs	r0, #140	; 0x8c
 801292a:	f7ff fb3d 	bl	8011fa8 <SUBGRF_WriteCommand>
}
 801292e:	b004      	add	sp, #16
 8012930:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8012932:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8012936:	f7ff ff96 	bl	8012866 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801293a:	f248 0005 	movw	r0, #32773	; 0x8005
 801293e:	f7ff ffa6 	bl	801288e <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8012942:	2302      	movs	r3, #2
 8012944:	e7d4      	b.n	80128f0 <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8012946:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801294a:	f7ff ff8c 	bl	8012866 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801294e:	f241 0021 	movw	r0, #4129	; 0x1021
 8012952:	f7ff ff9c 	bl	801288e <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8012956:	2306      	movs	r3, #6
 8012958:	e7ca      	b.n	80128f0 <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801295a:	7b23      	ldrb	r3, [r4, #12]
 801295c:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 8012960:	2201      	movs	r2, #1
        break;
 8012962:	e7e0      	b.n	8012926 <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8012964:	89e3      	ldrh	r3, [r4, #14]
 8012966:	0a1a      	lsrs	r2, r3, #8
 8012968:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801296c:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8012970:	7c23      	ldrb	r3, [r4, #16]
 8012972:	4a09      	ldr	r2, [pc, #36]	; (8012998 <SUBGRF_SetPacketParams+0xe0>)
 8012974:	7013      	strb	r3, [r2, #0]
 8012976:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801297a:	7c63      	ldrb	r3, [r4, #17]
 801297c:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8012980:	7ca3      	ldrb	r3, [r4, #18]
 8012982:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8012986:	7ce3      	ldrb	r3, [r4, #19]
 8012988:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 801298c:	2206      	movs	r2, #6
        break;
 801298e:	e7ca      	b.n	8012926 <SUBGRF_SetPacketParams+0x6e>
 8012990:	08013e48 	.word	0x08013e48
 8012994:	200010d7 	.word	0x200010d7
 8012998:	200010d5 	.word	0x200010d5

0801299c <SUBGRF_ReadRegisters>:
{
 801299c:	b510      	push	{r4, lr}
 801299e:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80129a0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80129a4:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 80129a6:	460a      	mov	r2, r1
 80129a8:	4601      	mov	r1, r0
 80129aa:	4803      	ldr	r0, [pc, #12]	; (80129b8 <SUBGRF_ReadRegisters+0x1c>)
 80129ac:	f7f4 fe34 	bl	8007618 <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80129b0:	f384 8810 	msr	PRIMASK, r4
}
 80129b4:	bd10      	pop	{r4, pc}
 80129b6:	bf00      	nop
 80129b8:	2000028c 	.word	0x2000028c

080129bc <SUBGRF_GetRandom>:
{
 80129bc:	b570      	push	{r4, r5, r6, lr}
 80129be:	b082      	sub	sp, #8
    uint32_t number = 0;
 80129c0:	2600      	movs	r6, #0
 80129c2:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 80129c4:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80129c8:	f7ff fdf2 	bl	80125b0 <SUBGRF_ReadRegister>
 80129cc:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 80129ce:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 80129d2:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80129d6:	f7ff fcf9 	bl	80123cc <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 80129da:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80129de:	f7ff fde7 	bl	80125b0 <SUBGRF_ReadRegister>
 80129e2:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 80129e4:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 80129e8:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80129ec:	f7ff fcee 	bl	80123cc <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80129f0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80129f4:	f7ff fb32 	bl	801205c <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 80129f8:	2204      	movs	r2, #4
 80129fa:	eb0d 0102 	add.w	r1, sp, r2
 80129fe:	f640 0019 	movw	r0, #2073	; 0x819
 8012a02:	f7ff ffcb 	bl	801299c <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 8012a06:	4630      	mov	r0, r6
 8012a08:	f7ff faf4 	bl	8011ff4 <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8012a0c:	4629      	mov	r1, r5
 8012a0e:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8012a12:	f7ff fcdb 	bl	80123cc <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8012a16:	4621      	mov	r1, r4
 8012a18:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8012a1c:	f7ff fcd6 	bl	80123cc <SUBGRF_WriteRegister>
}
 8012a20:	9801      	ldr	r0, [sp, #4]
 8012a22:	b002      	add	sp, #8
 8012a24:	bd70      	pop	{r4, r5, r6, pc}
	...

08012a28 <SUBGRF_WriteBuffer>:
{
 8012a28:	b510      	push	{r4, lr}
 8012a2a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012a2c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012a30:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8012a32:	460a      	mov	r2, r1
 8012a34:	4601      	mov	r1, r0
 8012a36:	4803      	ldr	r0, [pc, #12]	; (8012a44 <SUBGRF_WriteBuffer+0x1c>)
 8012a38:	f7f4 ff44 	bl	80078c4 <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012a3c:	f384 8810 	msr	PRIMASK, r4
}
 8012a40:	bd10      	pop	{r4, pc}
 8012a42:	bf00      	nop
 8012a44:	2000028c 	.word	0x2000028c

08012a48 <SUBGRF_SetPayload>:
{
 8012a48:	b508      	push	{r3, lr}
 8012a4a:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8012a4c:	4601      	mov	r1, r0
 8012a4e:	2000      	movs	r0, #0
 8012a50:	f7ff ffea 	bl	8012a28 <SUBGRF_WriteBuffer>
}
 8012a54:	bd08      	pop	{r3, pc}

08012a56 <SUBGRF_SendPayload>:
{
 8012a56:	b510      	push	{r4, lr}
 8012a58:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 8012a5a:	f7ff fff5 	bl	8012a48 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8012a5e:	4620      	mov	r0, r4
 8012a60:	f7ff fae2 	bl	8012028 <SUBGRF_SetTx>
}
 8012a64:	bd10      	pop	{r4, pc}
	...

08012a68 <SUBGRF_ReadBuffer>:
{
 8012a68:	b510      	push	{r4, lr}
 8012a6a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012a6c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012a70:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8012a72:	460a      	mov	r2, r1
 8012a74:	4601      	mov	r1, r0
 8012a76:	4803      	ldr	r0, [pc, #12]	; (8012a84 <SUBGRF_ReadBuffer+0x1c>)
 8012a78:	f7f4 ff6e 	bl	8007958 <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012a7c:	f384 8810 	msr	PRIMASK, r4
}
 8012a80:	bd10      	pop	{r4, pc}
 8012a82:	bf00      	nop
 8012a84:	2000028c 	.word	0x2000028c

08012a88 <SUBGRF_GetPayload>:
{
 8012a88:	b570      	push	{r4, r5, r6, lr}
 8012a8a:	b082      	sub	sp, #8
 8012a8c:	4606      	mov	r6, r0
 8012a8e:	460c      	mov	r4, r1
 8012a90:	4615      	mov	r5, r2
    uint8_t offset = 0;
 8012a92:	2300      	movs	r3, #0
 8012a94:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 8012a98:	f10d 0107 	add.w	r1, sp, #7
 8012a9c:	4620      	mov	r0, r4
 8012a9e:	f7ff fea7 	bl	80127f0 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8012aa2:	7822      	ldrb	r2, [r4, #0]
 8012aa4:	42aa      	cmp	r2, r5
 8012aa6:	d902      	bls.n	8012aae <SUBGRF_GetPayload+0x26>
        return 1;
 8012aa8:	2001      	movs	r0, #1
}
 8012aaa:	b002      	add	sp, #8
 8012aac:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8012aae:	4631      	mov	r1, r6
 8012ab0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012ab4:	f7ff ffd8 	bl	8012a68 <SUBGRF_ReadBuffer>
    return 0;
 8012ab8:	2000      	movs	r0, #0
 8012aba:	e7f6      	b.n	8012aaa <SUBGRF_GetPayload+0x22>

08012abc <SUBGRF_SetSwitch>:
{
 8012abc:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 8012abe:	2901      	cmp	r1, #1
 8012ac0:	d003      	beq.n	8012aca <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8012ac2:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 8012ac4:	f7f0 fc14 	bl	80032f0 <RBI_ConfigRFSwitch>
}
 8012ac8:	bd10      	pop	{r4, pc}
 8012aca:	4604      	mov	r4, r0
 8012acc:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 8012ace:	2c01      	cmp	r4, #1
 8012ad0:	d003      	beq.n	8012ada <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 8012ad2:	2c02      	cmp	r4, #2
 8012ad4:	d1f6      	bne.n	8012ac4 <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 8012ad6:	2003      	movs	r0, #3
 8012ad8:	e7f4      	b.n	8012ac4 <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8012ada:	2004      	movs	r0, #4
 8012adc:	f7ff fd78 	bl	80125d0 <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 8012ae0:	2002      	movs	r0, #2
 8012ae2:	e7f6      	b.n	8012ad2 <SUBGRF_SetSwitch+0x16>

08012ae4 <SUBGRF_SetRfTxPower>:
{
 8012ae4:	b538      	push	{r3, r4, r5, lr}
 8012ae6:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 8012ae8:	f7f0 fc06 	bl	80032f8 <RBI_GetTxConfig>
    switch (TxConfig)
 8012aec:	b148      	cbz	r0, 8012b02 <SUBGRF_SetRfTxPower+0x1e>
 8012aee:	2802      	cmp	r0, #2
 8012af0:	d10d      	bne.n	8012b0e <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 8012af2:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8012af4:	2202      	movs	r2, #2
 8012af6:	4621      	mov	r1, r4
 8012af8:	4628      	mov	r0, r5
 8012afa:	f7ff fdec 	bl	80126d6 <SUBGRF_SetTxParams>
}
 8012afe:	4628      	mov	r0, r5
 8012b00:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 8012b02:	2c0f      	cmp	r4, #15
 8012b04:	dc01      	bgt.n	8012b0a <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 8012b06:	2501      	movs	r5, #1
 8012b08:	e7f4      	b.n	8012af4 <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 8012b0a:	2502      	movs	r5, #2
 8012b0c:	e7f2      	b.n	8012af4 <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 8012b0e:	2501      	movs	r5, #1
 8012b10:	e7f0      	b.n	8012af4 <SUBGRF_SetRfTxPower+0x10>

08012b12 <SUBGRF_GetRadioWakeUpTime>:
}
 8012b12:	2001      	movs	r0, #1
 8012b14:	4770      	bx	lr
	...

08012b18 <HAL_SUBGHZ_TxCpltCallback>:
{
 8012b18:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8012b1a:	4b02      	ldr	r3, [pc, #8]	; (8012b24 <HAL_SUBGHZ_TxCpltCallback+0xc>)
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	2001      	movs	r0, #1
 8012b20:	4798      	blx	r3
}
 8012b22:	bd08      	pop	{r3, pc}
 8012b24:	200010d8 	.word	0x200010d8

08012b28 <HAL_SUBGHZ_RxCpltCallback>:
{
 8012b28:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8012b2a:	4b02      	ldr	r3, [pc, #8]	; (8012b34 <HAL_SUBGHZ_RxCpltCallback+0xc>)
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	2002      	movs	r0, #2
 8012b30:	4798      	blx	r3
}
 8012b32:	bd08      	pop	{r3, pc}
 8012b34:	200010d8 	.word	0x200010d8

08012b38 <HAL_SUBGHZ_CRCErrorCallback>:
{
 8012b38:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8012b3a:	4b02      	ldr	r3, [pc, #8]	; (8012b44 <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	2040      	movs	r0, #64	; 0x40
 8012b40:	4798      	blx	r3
}
 8012b42:	bd08      	pop	{r3, pc}
 8012b44:	200010d8 	.word	0x200010d8

08012b48 <HAL_SUBGHZ_CADStatusCallback>:
{
 8012b48:	b508      	push	{r3, lr}
    switch (cadstatus)
 8012b4a:	b111      	cbz	r1, 8012b52 <HAL_SUBGHZ_CADStatusCallback+0xa>
 8012b4c:	2901      	cmp	r1, #1
 8012b4e:	d005      	beq.n	8012b5c <HAL_SUBGHZ_CADStatusCallback+0x14>
}
 8012b50:	bd08      	pop	{r3, pc}
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8012b52:	4b05      	ldr	r3, [pc, #20]	; (8012b68 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8012b54:	681b      	ldr	r3, [r3, #0]
 8012b56:	2080      	movs	r0, #128	; 0x80
 8012b58:	4798      	blx	r3
            break;
 8012b5a:	e7f9      	b.n	8012b50 <HAL_SUBGHZ_CADStatusCallback+0x8>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8012b5c:	4b02      	ldr	r3, [pc, #8]	; (8012b68 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	f44f 7080 	mov.w	r0, #256	; 0x100
 8012b64:	4798      	blx	r3
}
 8012b66:	e7f3      	b.n	8012b50 <HAL_SUBGHZ_CADStatusCallback+0x8>
 8012b68:	200010d8 	.word	0x200010d8

08012b6c <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 8012b6c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8012b6e:	4b03      	ldr	r3, [pc, #12]	; (8012b7c <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	f44f 7000 	mov.w	r0, #512	; 0x200
 8012b76:	4798      	blx	r3
}
 8012b78:	bd08      	pop	{r3, pc}
 8012b7a:	bf00      	nop
 8012b7c:	200010d8 	.word	0x200010d8

08012b80 <HAL_SUBGHZ_HeaderErrorCallback>:
{
 8012b80:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8012b82:	4b02      	ldr	r3, [pc, #8]	; (8012b8c <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	2020      	movs	r0, #32
 8012b88:	4798      	blx	r3
}
 8012b8a:	bd08      	pop	{r3, pc}
 8012b8c:	200010d8 	.word	0x200010d8

08012b90 <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 8012b90:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8012b92:	4b02      	ldr	r3, [pc, #8]	; (8012b9c <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	2004      	movs	r0, #4
 8012b98:	4798      	blx	r3
}
 8012b9a:	bd08      	pop	{r3, pc}
 8012b9c:	200010d8 	.word	0x200010d8

08012ba0 <HAL_SUBGHZ_SyncWordValidCallback>:
{
 8012ba0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8012ba2:	4b02      	ldr	r3, [pc, #8]	; (8012bac <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	2008      	movs	r0, #8
 8012ba8:	4798      	blx	r3
}
 8012baa:	bd08      	pop	{r3, pc}
 8012bac:	200010d8 	.word	0x200010d8

08012bb0 <HAL_SUBGHZ_HeaderValidCallback>:
{
 8012bb0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8012bb2:	4b02      	ldr	r3, [pc, #8]	; (8012bbc <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	2010      	movs	r0, #16
 8012bb8:	4798      	blx	r3
}
 8012bba:	bd08      	pop	{r3, pc}
 8012bbc:	200010d8 	.word	0x200010d8

08012bc0 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 8012bc0:	4601      	mov	r1, r0
 8012bc2:	b188      	cbz	r0, 8012be8 <SUBGRF_GetFskBandwidthRegValue+0x28>
    {
        return( 0x1F );
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8012bc4:	2300      	movs	r3, #0
 8012bc6:	2b15      	cmp	r3, #21
 8012bc8:	d80d      	bhi.n	8012be6 <SUBGRF_GetFskBandwidthRegValue+0x26>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8012bca:	4618      	mov	r0, r3
 8012bcc:	4a07      	ldr	r2, [pc, #28]	; (8012bec <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 8012bce:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8012bd2:	428a      	cmp	r2, r1
 8012bd4:	d802      	bhi.n	8012bdc <SUBGRF_GetFskBandwidthRegValue+0x1c>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8012bd6:	3301      	adds	r3, #1
 8012bd8:	b2db      	uxtb	r3, r3
 8012bda:	e7f4      	b.n	8012bc6 <SUBGRF_GetFskBandwidthRegValue+0x6>
        {
            return FskBandwidths[i].RegValue;
 8012bdc:	4b03      	ldr	r3, [pc, #12]	; (8012bec <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 8012bde:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8012be2:	7900      	ldrb	r0, [r0, #4]
 8012be4:	4770      	bx	lr
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 8012be6:	e7fe      	b.n	8012be6 <SUBGRF_GetFskBandwidthRegValue+0x26>
        return( 0x1F );
 8012be8:	201f      	movs	r0, #31
}
 8012bea:	4770      	bx	lr
 8012bec:	08014c74 	.word	0x08014c74

08012bf0 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8012bf0:	b570      	push	{r4, r5, r6, lr}
 8012bf2:	b082      	sub	sp, #8
 8012bf4:	4606      	mov	r6, r0
 8012bf6:	460c      	mov	r4, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 8012bf8:	4b1d      	ldr	r3, [pc, #116]	; (8012c70 <SUBGRF_GetCFO+0x80>)
 8012bfa:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 8012bfc:	f640 0007 	movw	r0, #2055	; 0x807
 8012c00:	f7ff fcd6 	bl	80125b0 <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8012c04:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 8012c08:	3308      	adds	r3, #8
 8012c0a:	446b      	add	r3, sp
 8012c0c:	f813 5c04 	ldrb.w	r5, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 8012c10:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 8012c14:	3b01      	subs	r3, #1
 8012c16:	fa05 f303 	lsl.w	r3, r5, r3
 8012c1a:	4d16      	ldr	r5, [pc, #88]	; (8012c74 <SUBGRF_GetCFO+0x84>)
 8012c1c:	fbb5 f5f3 	udiv	r5, r5, r3
  uint32_t cf_osr = cf_fs / bitRate;
 8012c20:	fbb5 f2f6 	udiv	r2, r5, r6
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8012c24:	2a07      	cmp	r2, #7
 8012c26:	d921      	bls.n	8012c6c <SUBGRF_GetCFO+0x7c>
  uint8_t interp = 1;
 8012c28:	2001      	movs	r0, #1
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 8012c2a:	fb00 f202 	mul.w	r2, r0, r2
 8012c2e:	2a03      	cmp	r2, #3
 8012c30:	d800      	bhi.n	8012c34 <SUBGRF_GetCFO+0x44>
  {
    interp = 4;
 8012c32:	2004      	movs	r0, #4
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8012c34:	fb00 f505 	mul.w	r5, r0, r5
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8012c38:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8012c3c:	f7ff fcb8 	bl	80125b0 <SUBGRF_ReadRegister>
 8012c40:	0200      	lsls	r0, r0, #8
 8012c42:	f400 6670 	and.w	r6, r0, #3840	; 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 8012c46:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8012c4a:	f7ff fcb1 	bl	80125b0 <SUBGRF_ReadRegister>
 8012c4e:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8012c50:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8012c54:	d003      	beq.n	8012c5e <SUBGRF_GetCFO+0x6e>
  {
    cfo_bin |= 0xFFFFF000;
 8012c56:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 8012c5a:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8012c5e:	096d      	lsrs	r5, r5, #5
 8012c60:	fb05 f000 	mul.w	r0, r5, r0
 8012c64:	11c0      	asrs	r0, r0, #7
 8012c66:	6020      	str	r0, [r4, #0]
}
 8012c68:	b002      	add	sp, #8
 8012c6a:	bd70      	pop	{r4, r5, r6, pc}
    interp = 2;
 8012c6c:	2002      	movs	r0, #2
 8012c6e:	e7dc      	b.n	8012c2a <SUBGRF_GetCFO+0x3a>
 8012c70:	0c0a0804 	.word	0x0c0a0804
 8012c74:	01e84800 	.word	0x01e84800

08012c78 <RFW_TransmitLongPacket>:
  }
#else
  status= -1;
#endif
  return status;
}
 8012c78:	f04f 30ff 	mov.w	r0, #4294967295
 8012c7c:	4770      	bx	lr

08012c7e <RFW_ReceiveLongPacket>:
  }
#else
  status= -1;
#endif
  return status;
}
 8012c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8012c82:	4770      	bx	lr

08012c84 <RFW_DeInit>:
void RFW_DeInit( void)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 8012c84:	4770      	bx	lr

08012c86 <RFW_Is_Init>:
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
#endif
}
 8012c86:	2000      	movs	r0, #0
 8012c88:	4770      	bx	lr

08012c8a <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
#endif
}
 8012c8a:	2000      	movs	r0, #0
 8012c8c:	4770      	bx	lr

08012c8e <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 8012c8e:	4770      	bx	lr

08012c90 <RFW_TransmitInit>:

    status= 0;
  }
#endif
  return status;
}
 8012c90:	f04f 30ff 	mov.w	r0, #4294967295
 8012c94:	4770      	bx	lr

08012c96 <RFW_ReceiveInit>:
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
#endif
}
 8012c96:	f04f 30ff 	mov.w	r0, #4294967295
 8012c9a:	4770      	bx	lr

08012c9c <RFW_DeInit_TxLongPacket>:
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 8012c9c:	4770      	bx	lr

08012c9e <RFW_ReceivePayload>:
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 8012c9e:	4770      	bx	lr

08012ca0 <RFW_SetRadioModem>:
void RFW_SetRadioModem(RadioModems_t Modem)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 8012ca0:	4770      	bx	lr
	...

08012ca4 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 8012ca4:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012ca6:	f3ef 8e10 	mrs	lr, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012caa:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8012cac:	4b1e      	ldr	r3, [pc, #120]	; (8012d28 <TRACE_AllocateBufer+0x84>)
 8012cae:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 8012cb2:	8a1a      	ldrh	r2, [r3, #16]
 8012cb4:	4594      	cmp	ip, r2
 8012cb6:	d011      	beq.n	8012cdc <TRACE_AllocateBufer+0x38>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8012cb8:	4594      	cmp	ip, r2
 8012cba:	d921      	bls.n	8012d00 <TRACE_AllocateBufer+0x5c>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8012cbc:	f5cc 6380 	rsb	r3, ip, #1024	; 0x400
 8012cc0:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 8012cc2:	4283      	cmp	r3, r0
 8012cc4:	d81f      	bhi.n	8012d06 <TRACE_AllocateBufer+0x62>
 8012cc6:	4282      	cmp	r2, r0
 8012cc8:	d91d      	bls.n	8012d06 <TRACE_AllocateBufer+0x62>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8012cca:	4b17      	ldr	r3, [pc, #92]	; (8012d28 <TRACE_AllocateBufer+0x84>)
 8012ccc:	2401      	movs	r4, #1
 8012cce:	709c      	strb	r4, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8012cd0:	f8a3 c000 	strh.w	ip, [r3]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8012cd4:	2400      	movs	r4, #0
 8012cd6:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8012cd8:	4613      	mov	r3, r2
 8012cda:	e014      	b.n	8012d06 <TRACE_AllocateBufer+0x62>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8012cdc:	f5cc 6380 	rsb	r3, ip, #1024	; 0x400
 8012ce0:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 8012ce2:	4298      	cmp	r0, r3
 8012ce4:	d30f      	bcc.n	8012d06 <TRACE_AllocateBufer+0x62>
 8012ce6:	4282      	cmp	r2, r0
 8012ce8:	d90d      	bls.n	8012d06 <TRACE_AllocateBufer+0x62>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8012cea:	4b0f      	ldr	r3, [pc, #60]	; (8012d28 <TRACE_AllocateBufer+0x84>)
 8012cec:	2401      	movs	r4, #1
 8012cee:	709c      	strb	r4, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8012cf0:	f8a3 c000 	strh.w	ip, [r3]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 8012cf4:	f04f 0c00 	mov.w	ip, #0
 8012cf8:	f8a3 c012 	strh.w	ip, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8012cfc:	4613      	mov	r3, r2
 8012cfe:	e002      	b.n	8012d06 <TRACE_AllocateBufer+0x62>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 8012d00:	eba2 030c 	sub.w	r3, r2, ip
 8012d04:	b29b      	uxth	r3, r3
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 8012d06:	4283      	cmp	r3, r0
 8012d08:	d90a      	bls.n	8012d20 <TRACE_AllocateBufer+0x7c>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 8012d0a:	4a07      	ldr	r2, [pc, #28]	; (8012d28 <TRACE_AllocateBufer+0x84>)
 8012d0c:	8a53      	ldrh	r3, [r2, #18]
 8012d0e:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 8012d10:	4403      	add	r3, r0
 8012d12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012d16:	8253      	strh	r3, [r2, #18]
    ret = 0;
 8012d18:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012d1a:	f38e 8810 	msr	PRIMASK, lr
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 8012d1e:	bd10      	pop	{r4, pc}
  int16_t ret = -1;
 8012d20:	f04f 30ff 	mov.w	r0, #4294967295
 8012d24:	e7f9      	b.n	8012d1a <TRACE_AllocateBufer+0x76>
 8012d26:	bf00      	nop
 8012d28:	200014dc 	.word	0x200014dc

08012d2c <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012d2c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012d30:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 8012d32:	4a03      	ldr	r2, [pc, #12]	; (8012d40 <TRACE_Lock+0x14>)
 8012d34:	8ad3      	ldrh	r3, [r2, #22]
 8012d36:	3301      	adds	r3, #1
 8012d38:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012d3a:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8012d3e:	4770      	bx	lr
 8012d40:	200014dc 	.word	0x200014dc

08012d44 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012d44:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012d48:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 8012d4a:	4a03      	ldr	r2, [pc, #12]	; (8012d58 <TRACE_UnLock+0x14>)
 8012d4c:	8ad3      	ldrh	r3, [r2, #22]
 8012d4e:	3b01      	subs	r3, #1
 8012d50:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012d52:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8012d56:	4770      	bx	lr
 8012d58:	200014dc 	.word	0x200014dc

08012d5c <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 8012d5c:	4b02      	ldr	r3, [pc, #8]	; (8012d68 <TRACE_IsLocked+0xc>)
 8012d5e:	8ad8      	ldrh	r0, [r3, #22]
}
 8012d60:	3800      	subs	r0, #0
 8012d62:	bf18      	it	ne
 8012d64:	2001      	movne	r0, #1
 8012d66:	4770      	bx	lr
 8012d68:	200014dc 	.word	0x200014dc

08012d6c <UTIL_ADV_TRACE_Init>:
{
 8012d6c:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 8012d6e:	2218      	movs	r2, #24
 8012d70:	2100      	movs	r1, #0
 8012d72:	4807      	ldr	r0, [pc, #28]	; (8012d90 <UTIL_ADV_TRACE_Init+0x24>)
 8012d74:	f000 f98f 	bl	8013096 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 8012d78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012d7c:	2100      	movs	r1, #0
 8012d7e:	4805      	ldr	r0, [pc, #20]	; (8012d94 <UTIL_ADV_TRACE_Init+0x28>)
 8012d80:	f000 f989 	bl	8013096 <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8012d84:	4b04      	ldr	r3, [pc, #16]	; (8012d98 <UTIL_ADV_TRACE_Init+0x2c>)
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	4804      	ldr	r0, [pc, #16]	; (8012d9c <UTIL_ADV_TRACE_Init+0x30>)
 8012d8a:	4798      	blx	r3
}
 8012d8c:	bd08      	pop	{r3, pc}
 8012d8e:	bf00      	nop
 8012d90:	200014dc 	.word	0x200014dc
 8012d94:	200010dc 	.word	0x200010dc
 8012d98:	08013eb8 	.word	0x08013eb8
 8012d9c:	08012f21 	.word	0x08012f21

08012da0 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 8012da0:	4b01      	ldr	r3, [pc, #4]	; (8012da8 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 8012da2:	6058      	str	r0, [r3, #4]
}
 8012da4:	4770      	bx	lr
 8012da6:	bf00      	nop
 8012da8:	200014dc 	.word	0x200014dc

08012dac <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8012dac:	4b01      	ldr	r3, [pc, #4]	; (8012db4 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 8012dae:	7218      	strb	r0, [r3, #8]
}
 8012db0:	4770      	bx	lr
 8012db2:	bf00      	nop
 8012db4:	200014dc 	.word	0x200014dc

08012db8 <TRACE_Send>:
{
 8012db8:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012dba:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012dbe:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 8012dc0:	f7ff ffcc 	bl	8012d5c <TRACE_IsLocked>
 8012dc4:	b118      	cbz	r0, 8012dce <TRACE_Send+0x16>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012dc6:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8012dca:	2000      	movs	r0, #0
}
 8012dcc:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 8012dce:	f7ff ffad 	bl	8012d2c <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 8012dd2:	4b1d      	ldr	r3, [pc, #116]	; (8012e48 <TRACE_Send+0x90>)
 8012dd4:	8a1a      	ldrh	r2, [r3, #16]
 8012dd6:	8a5b      	ldrh	r3, [r3, #18]
 8012dd8:	429a      	cmp	r2, r3
 8012dda:	d02e      	beq.n	8012e3a <TRACE_Send+0x82>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8012ddc:	491a      	ldr	r1, [pc, #104]	; (8012e48 <TRACE_Send+0x90>)
 8012dde:	7889      	ldrb	r1, [r1, #2]
 8012de0:	2901      	cmp	r1, #1
 8012de2:	d017      	beq.n	8012e14 <TRACE_Send+0x5c>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8012de4:	4a18      	ldr	r2, [pc, #96]	; (8012e48 <TRACE_Send+0x90>)
 8012de6:	7892      	ldrb	r2, [r2, #2]
 8012de8:	b932      	cbnz	r2, 8012df8 <TRACE_Send+0x40>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8012dea:	4a17      	ldr	r2, [pc, #92]	; (8012e48 <TRACE_Send+0x90>)
 8012dec:	8a12      	ldrh	r2, [r2, #16]
 8012dee:	4293      	cmp	r3, r2
 8012df0:	d91e      	bls.n	8012e30 <TRACE_Send+0x78>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8012df2:	1a9b      	subs	r3, r3, r2
 8012df4:	4a14      	ldr	r2, [pc, #80]	; (8012e48 <TRACE_Send+0x90>)
 8012df6:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8012df8:	4e13      	ldr	r6, [pc, #76]	; (8012e48 <TRACE_Send+0x90>)
 8012dfa:	8a33      	ldrh	r3, [r6, #16]
 8012dfc:	4d13      	ldr	r5, [pc, #76]	; (8012e4c <TRACE_Send+0x94>)
 8012dfe:	441d      	add	r5, r3
 8012e00:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 8012e04:	f7ef f866 	bl	8001ed4 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8012e08:	4b11      	ldr	r3, [pc, #68]	; (8012e50 <TRACE_Send+0x98>)
 8012e0a:	68db      	ldr	r3, [r3, #12]
 8012e0c:	8ab1      	ldrh	r1, [r6, #20]
 8012e0e:	4628      	mov	r0, r5
 8012e10:	4798      	blx	r3
 8012e12:	e7db      	b.n	8012dcc <TRACE_Send+0x14>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8012e14:	480c      	ldr	r0, [pc, #48]	; (8012e48 <TRACE_Send+0x90>)
 8012e16:	8801      	ldrh	r1, [r0, #0]
 8012e18:	1a8a      	subs	r2, r1, r2
 8012e1a:	b292      	uxth	r2, r2
 8012e1c:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8012e1e:	2102      	movs	r1, #2
 8012e20:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 8012e22:	2100      	movs	r1, #0
 8012e24:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8012e26:	2a00      	cmp	r2, #0
 8012e28:	d1dc      	bne.n	8012de4 <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8012e2a:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 8012e2c:	8201      	strh	r1, [r0, #16]
 8012e2e:	e7d9      	b.n	8012de4 <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8012e30:	f5c2 6380 	rsb	r3, r2, #1024	; 0x400
 8012e34:	4a04      	ldr	r2, [pc, #16]	; (8012e48 <TRACE_Send+0x90>)
 8012e36:	8293      	strh	r3, [r2, #20]
 8012e38:	e7de      	b.n	8012df8 <TRACE_Send+0x40>
      TRACE_UnLock();
 8012e3a:	f7ff ff83 	bl	8012d44 <TRACE_UnLock>
 8012e3e:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8012e42:	2000      	movs	r0, #0
}
 8012e44:	e7c2      	b.n	8012dcc <TRACE_Send+0x14>
 8012e46:	bf00      	nop
 8012e48:	200014dc 	.word	0x200014dc
 8012e4c:	200010dc 	.word	0x200010dc
 8012e50:	08013eb8 	.word	0x08013eb8

08012e54 <UTIL_ADV_TRACE_COND_FSend>:
{
 8012e54:	b408      	push	{r3}
 8012e56:	b530      	push	{r4, r5, lr}
 8012e58:	b086      	sub	sp, #24
 8012e5a:	9c09      	ldr	r4, [sp, #36]	; 0x24
  uint16_t timestamp_size = 0u;
 8012e5c:	2300      	movs	r3, #0
 8012e5e:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 8012e62:	4b2c      	ldr	r3, [pc, #176]	; (8012f14 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8012e64:	7a1b      	ldrb	r3, [r3, #8]
 8012e66:	4283      	cmp	r3, r0
 8012e68:	d34d      	bcc.n	8012f06 <UTIL_ADV_TRACE_COND_FSend+0xb2>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 8012e6a:	4b2a      	ldr	r3, [pc, #168]	; (8012f14 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8012e6c:	68db      	ldr	r3, [r3, #12]
 8012e6e:	ea31 0303 	bics.w	r3, r1, r3
 8012e72:	d14b      	bne.n	8012f0c <UTIL_ADV_TRACE_COND_FSend+0xb8>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 8012e74:	4b27      	ldr	r3, [pc, #156]	; (8012f14 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8012e76:	685b      	ldr	r3, [r3, #4]
 8012e78:	b123      	cbz	r3, 8012e84 <UTIL_ADV_TRACE_COND_FSend+0x30>
 8012e7a:	b11a      	cbz	r2, 8012e84 <UTIL_ADV_TRACE_COND_FSend+0x30>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 8012e7c:	f10d 0102 	add.w	r1, sp, #2
 8012e80:	a801      	add	r0, sp, #4
 8012e82:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 8012e84:	ab0a      	add	r3, sp, #40	; 0x28
 8012e86:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8012e88:	4622      	mov	r2, r4
 8012e8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8012e8e:	4822      	ldr	r0, [pc, #136]	; (8012f18 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8012e90:	f000 fcd0 	bl	8013834 <tiny_vsnprintf_like>
 8012e94:	b285      	uxth	r5, r0
  TRACE_Lock();
 8012e96:	f7ff ff49 	bl	8012d2c <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 8012e9a:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8012e9e:	4428      	add	r0, r5
 8012ea0:	4669      	mov	r1, sp
 8012ea2:	b280      	uxth	r0, r0
 8012ea4:	f7ff fefe 	bl	8012ca4 <TRACE_AllocateBufer>
 8012ea8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012eac:	d026      	beq.n	8012efc <UTIL_ADV_TRACE_COND_FSend+0xa8>
    for (idx = 0u; idx < timestamp_size; idx++)
 8012eae:	2300      	movs	r3, #0
 8012eb0:	e00d      	b.n	8012ece <UTIL_ADV_TRACE_COND_FSend+0x7a>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 8012eb2:	f8bd 2000 	ldrh.w	r2, [sp]
 8012eb6:	f103 0118 	add.w	r1, r3, #24
 8012eba:	4469      	add	r1, sp
 8012ebc:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 8012ec0:	4916      	ldr	r1, [pc, #88]	; (8012f1c <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 8012ec2:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 8012ec4:	3201      	adds	r2, #1
 8012ec6:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 8012eca:	3301      	adds	r3, #1
 8012ecc:	b29b      	uxth	r3, r3
 8012ece:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8012ed2:	429a      	cmp	r2, r3
 8012ed4:	d8ed      	bhi.n	8012eb2 <UTIL_ADV_TRACE_COND_FSend+0x5e>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8012ed6:	f8bd 0000 	ldrh.w	r0, [sp]
 8012eda:	9b05      	ldr	r3, [sp, #20]
 8012edc:	4622      	mov	r2, r4
 8012ede:	f44f 7100 	mov.w	r1, #512	; 0x200
 8012ee2:	4c0e      	ldr	r4, [pc, #56]	; (8012f1c <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 8012ee4:	4420      	add	r0, r4
 8012ee6:	f000 fca5 	bl	8013834 <tiny_vsnprintf_like>
    TRACE_UnLock();
 8012eea:	f7ff ff2b 	bl	8012d44 <TRACE_UnLock>
    return TRACE_Send();
 8012eee:	f7ff ff63 	bl	8012db8 <TRACE_Send>
}
 8012ef2:	b006      	add	sp, #24
 8012ef4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012ef8:	b001      	add	sp, #4
 8012efa:	4770      	bx	lr
  TRACE_UnLock();
 8012efc:	f7ff ff22 	bl	8012d44 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 8012f00:	f06f 0002 	mvn.w	r0, #2
 8012f04:	e7f5      	b.n	8012ef2 <UTIL_ADV_TRACE_COND_FSend+0x9e>
    return UTIL_ADV_TRACE_GIVEUP;
 8012f06:	f06f 0004 	mvn.w	r0, #4
 8012f0a:	e7f2      	b.n	8012ef2 <UTIL_ADV_TRACE_COND_FSend+0x9e>
    return UTIL_ADV_TRACE_REGIONMASKED;
 8012f0c:	f06f 0005 	mvn.w	r0, #5
 8012f10:	e7ef      	b.n	8012ef2 <UTIL_ADV_TRACE_COND_FSend+0x9e>
 8012f12:	bf00      	nop
 8012f14:	200014dc 	.word	0x200014dc
 8012f18:	200014f4 	.word	0x200014f4
 8012f1c:	200010dc 	.word	0x200010dc

08012f20 <TRACE_TxCpltCallback>:
{
 8012f20:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012f22:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012f26:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 8012f28:	4b25      	ldr	r3, [pc, #148]	; (8012fc0 <TRACE_TxCpltCallback+0xa0>)
 8012f2a:	789b      	ldrb	r3, [r3, #2]
 8012f2c:	2b02      	cmp	r3, #2
 8012f2e:	d016      	beq.n	8012f5e <TRACE_TxCpltCallback+0x3e>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8012f30:	4a23      	ldr	r2, [pc, #140]	; (8012fc0 <TRACE_TxCpltCallback+0xa0>)
 8012f32:	8a13      	ldrh	r3, [r2, #16]
 8012f34:	8a90      	ldrh	r0, [r2, #20]
 8012f36:	4403      	add	r3, r0
 8012f38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012f3c:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 8012f3e:	4b20      	ldr	r3, [pc, #128]	; (8012fc0 <TRACE_TxCpltCallback+0xa0>)
 8012f40:	8a1a      	ldrh	r2, [r3, #16]
 8012f42:	8a5b      	ldrh	r3, [r3, #18]
 8012f44:	429a      	cmp	r2, r3
 8012f46:	d003      	beq.n	8012f50 <TRACE_TxCpltCallback+0x30>
 8012f48:	481d      	ldr	r0, [pc, #116]	; (8012fc0 <TRACE_TxCpltCallback+0xa0>)
 8012f4a:	8ac0      	ldrh	r0, [r0, #22]
 8012f4c:	2801      	cmp	r0, #1
 8012f4e:	d00b      	beq.n	8012f68 <TRACE_TxCpltCallback+0x48>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012f50:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 8012f54:	f7ee ffc4 	bl	8001ee0 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 8012f58:	f7ff fef4 	bl	8012d44 <TRACE_UnLock>
}
 8012f5c:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8012f5e:	4b18      	ldr	r3, [pc, #96]	; (8012fc0 <TRACE_TxCpltCallback+0xa0>)
 8012f60:	2200      	movs	r2, #0
 8012f62:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 8012f64:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 8012f66:	e7ea      	b.n	8012f3e <TRACE_TxCpltCallback+0x1e>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8012f68:	4815      	ldr	r0, [pc, #84]	; (8012fc0 <TRACE_TxCpltCallback+0xa0>)
 8012f6a:	7880      	ldrb	r0, [r0, #2]
 8012f6c:	2801      	cmp	r0, #1
 8012f6e:	d014      	beq.n	8012f9a <TRACE_TxCpltCallback+0x7a>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8012f70:	4a13      	ldr	r2, [pc, #76]	; (8012fc0 <TRACE_TxCpltCallback+0xa0>)
 8012f72:	7892      	ldrb	r2, [r2, #2]
 8012f74:	b932      	cbnz	r2, 8012f84 <TRACE_TxCpltCallback+0x64>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8012f76:	4a12      	ldr	r2, [pc, #72]	; (8012fc0 <TRACE_TxCpltCallback+0xa0>)
 8012f78:	8a12      	ldrh	r2, [r2, #16]
 8012f7a:	4293      	cmp	r3, r2
 8012f7c:	d91b      	bls.n	8012fb6 <TRACE_TxCpltCallback+0x96>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8012f7e:	1a9b      	subs	r3, r3, r2
 8012f80:	4a0f      	ldr	r2, [pc, #60]	; (8012fc0 <TRACE_TxCpltCallback+0xa0>)
 8012f82:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8012f84:	4b0e      	ldr	r3, [pc, #56]	; (8012fc0 <TRACE_TxCpltCallback+0xa0>)
 8012f86:	8a1a      	ldrh	r2, [r3, #16]
 8012f88:	480e      	ldr	r0, [pc, #56]	; (8012fc4 <TRACE_TxCpltCallback+0xa4>)
 8012f8a:	4410      	add	r0, r2
 8012f8c:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8012f90:	4a0d      	ldr	r2, [pc, #52]	; (8012fc8 <TRACE_TxCpltCallback+0xa8>)
 8012f92:	68d2      	ldr	r2, [r2, #12]
 8012f94:	8a99      	ldrh	r1, [r3, #20]
 8012f96:	4790      	blx	r2
 8012f98:	e7e0      	b.n	8012f5c <TRACE_TxCpltCallback+0x3c>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 8012f9a:	4c09      	ldr	r4, [pc, #36]	; (8012fc0 <TRACE_TxCpltCallback+0xa0>)
 8012f9c:	8820      	ldrh	r0, [r4, #0]
 8012f9e:	1a82      	subs	r2, r0, r2
 8012fa0:	b292      	uxth	r2, r2
 8012fa2:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8012fa4:	2002      	movs	r0, #2
 8012fa6:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 8012fa8:	2000      	movs	r0, #0
 8012faa:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8012fac:	2a00      	cmp	r2, #0
 8012fae:	d1df      	bne.n	8012f70 <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8012fb0:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 8012fb2:	8220      	strh	r0, [r4, #16]
 8012fb4:	e7dc      	b.n	8012f70 <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8012fb6:	f5c2 6380 	rsb	r3, r2, #1024	; 0x400
 8012fba:	4a01      	ldr	r2, [pc, #4]	; (8012fc0 <TRACE_TxCpltCallback+0xa0>)
 8012fbc:	8293      	strh	r3, [r2, #20]
 8012fbe:	e7e1      	b.n	8012f84 <TRACE_TxCpltCallback+0x64>
 8012fc0:	200014dc 	.word	0x200014dc
 8012fc4:	200010dc 	.word	0x200010dc
 8012fc8:	08013eb8 	.word	0x08013eb8

08012fcc <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8012fcc:	2300      	movs	r3, #0
 8012fce:	4a02      	ldr	r2, [pc, #8]	; (8012fd8 <UTIL_LPM_Init+0xc>)
 8012fd0:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8012fd2:	4a02      	ldr	r2, [pc, #8]	; (8012fdc <UTIL_LPM_Init+0x10>)
 8012fd4:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8012fd6:	4770      	bx	lr
 8012fd8:	200016f8 	.word	0x200016f8
 8012fdc:	200016f4 	.word	0x200016f4

08012fe0 <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012fe0:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012fe4:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 8012fe6:	b141      	cbz	r1, 8012ffa <UTIL_LPM_SetStopMode+0x1a>
 8012fe8:	2901      	cmp	r1, #1
 8012fea:	d103      	bne.n	8012ff4 <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8012fec:	4906      	ldr	r1, [pc, #24]	; (8013008 <UTIL_LPM_SetStopMode+0x28>)
 8012fee:	680a      	ldr	r2, [r1, #0]
 8012ff0:	4310      	orrs	r0, r2
 8012ff2:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012ff4:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8012ff8:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 8012ffa:	4903      	ldr	r1, [pc, #12]	; (8013008 <UTIL_LPM_SetStopMode+0x28>)
 8012ffc:	680a      	ldr	r2, [r1, #0]
 8012ffe:	ea22 0000 	bic.w	r0, r2, r0
 8013002:	6008      	str	r0, [r1, #0]
      break;
 8013004:	e7f6      	b.n	8012ff4 <UTIL_LPM_SetStopMode+0x14>
 8013006:	bf00      	nop
 8013008:	200016f8 	.word	0x200016f8

0801300c <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801300c:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013010:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 8013012:	b141      	cbz	r1, 8013026 <UTIL_LPM_SetOffMode+0x1a>
 8013014:	2901      	cmp	r1, #1
 8013016:	d103      	bne.n	8013020 <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8013018:	4906      	ldr	r1, [pc, #24]	; (8013034 <UTIL_LPM_SetOffMode+0x28>)
 801301a:	680a      	ldr	r2, [r1, #0]
 801301c:	4310      	orrs	r0, r2
 801301e:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013020:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8013024:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 8013026:	4903      	ldr	r1, [pc, #12]	; (8013034 <UTIL_LPM_SetOffMode+0x28>)
 8013028:	680a      	ldr	r2, [r1, #0]
 801302a:	ea22 0000 	bic.w	r0, r2, r0
 801302e:	6008      	str	r0, [r1, #0]
      break;
 8013030:	e7f6      	b.n	8013020 <UTIL_LPM_SetOffMode+0x14>
 8013032:	bf00      	nop
 8013034:	200016f4 	.word	0x200016f4

08013038 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8013038:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801303a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801303e:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8013040:	4b0c      	ldr	r3, [pc, #48]	; (8013074 <UTIL_LPM_EnterLowPower+0x3c>)
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	b13b      	cbz	r3, 8013056 <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8013046:	4d0c      	ldr	r5, [pc, #48]	; (8013078 <UTIL_LPM_EnterLowPower+0x40>)
 8013048:	682b      	ldr	r3, [r5, #0]
 801304a:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801304c:	686b      	ldr	r3, [r5, #4]
 801304e:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013050:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8013054:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8013056:	4b09      	ldr	r3, [pc, #36]	; (801307c <UTIL_LPM_EnterLowPower+0x44>)
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	b12b      	cbz	r3, 8013068 <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 801305c:	4d06      	ldr	r5, [pc, #24]	; (8013078 <UTIL_LPM_EnterLowPower+0x40>)
 801305e:	68ab      	ldr	r3, [r5, #8]
 8013060:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8013062:	68eb      	ldr	r3, [r5, #12]
 8013064:	4798      	blx	r3
 8013066:	e7f3      	b.n	8013050 <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 8013068:	4d03      	ldr	r5, [pc, #12]	; (8013078 <UTIL_LPM_EnterLowPower+0x40>)
 801306a:	692b      	ldr	r3, [r5, #16]
 801306c:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801306e:	696b      	ldr	r3, [r5, #20]
 8013070:	4798      	blx	r3
 8013072:	e7ed      	b.n	8013050 <UTIL_LPM_EnterLowPower+0x18>
 8013074:	200016f8 	.word	0x200016f8
 8013078:	08013e54 	.word	0x08013e54
 801307c:	200016f4 	.word	0x200016f4

08013080 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 8013080:	e004      	b.n	801308c <UTIL_MEM_cpy_8+0xc>
    {
        *dst8++ = *src8++;
 8013082:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013086:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 801308a:	461a      	mov	r2, r3
 801308c:	1e53      	subs	r3, r2, #1
 801308e:	b29b      	uxth	r3, r3
 8013090:	2a00      	cmp	r2, #0
 8013092:	d1f6      	bne.n	8013082 <UTIL_MEM_cpy_8+0x2>
    }
}
 8013094:	4770      	bx	lr

08013096 <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 8013096:	e002      	b.n	801309e <UTIL_MEM_set_8+0x8>
  {
    *dst8++ = value;
 8013098:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 801309c:	461a      	mov	r2, r3
 801309e:	1e53      	subs	r3, r2, #1
 80130a0:	b29b      	uxth	r3, r3
 80130a2:	2a00      	cmp	r2, #0
 80130a4:	d1f8      	bne.n	8013098 <UTIL_MEM_set_8+0x2>
  }
}
 80130a6:	4770      	bx	lr

080130a8 <UTIL_SEQ_SetTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80130a8:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80130ac:	b672      	cpsid	i

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 80130ae:	4a06      	ldr	r2, [pc, #24]	; (80130c8 <UTIL_SEQ_SetTask+0x20>)
 80130b0:	6813      	ldr	r3, [r2, #0]
 80130b2:	4303      	orrs	r3, r0
 80130b4:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80130b6:	4a05      	ldr	r2, [pc, #20]	; (80130cc <UTIL_SEQ_SetTask+0x24>)
 80130b8:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 80130bc:	4318      	orrs	r0, r3
 80130be:	f842 0031 	str.w	r0, [r2, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80130c2:	f38c 8810 	msr	PRIMASK, ip

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 80130c6:	4770      	bx	lr
 80130c8:	20001720 	.word	0x20001720
 80130cc:	20001718 	.word	0x20001718

080130d0 <UTIL_SEQ_PreIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 80130d0:	4770      	bx	lr

080130d2 <UTIL_SEQ_PostIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 80130d2:	4770      	bx	lr

080130d4 <SEQ_BitPosition>:
uint8_t SEQ_BitPosition(uint32_t Value)
{
uint8_t n = 0U;
uint32_t lvalue = Value;

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 80130d4:	0c03      	lsrs	r3, r0, #16
 80130d6:	041b      	lsls	r3, r3, #16
 80130d8:	b9b3      	cbnz	r3, 8013108 <SEQ_BitPosition+0x34>
 80130da:	0400      	lsls	r0, r0, #16
 80130dc:	2310      	movs	r3, #16
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 80130de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80130e2:	d102      	bne.n	80130ea <SEQ_BitPosition+0x16>
 80130e4:	3308      	adds	r3, #8
 80130e6:	b2db      	uxtb	r3, r3
 80130e8:	0200      	lsls	r0, r0, #8
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 80130ea:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80130ee:	d102      	bne.n	80130f6 <SEQ_BitPosition+0x22>
 80130f0:	3304      	adds	r3, #4
 80130f2:	b2db      	uxtb	r3, r3
 80130f4:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 80130f6:	0f00      	lsrs	r0, r0, #28
 80130f8:	4a04      	ldr	r2, [pc, #16]	; (801310c <SEQ_BitPosition+0x38>)
 80130fa:	5c10      	ldrb	r0, [r2, r0]
 80130fc:	4418      	add	r0, r3
 80130fe:	b2c0      	uxtb	r0, r0

  return (uint8_t)(31U-n);
 8013100:	f1c0 001f 	rsb	r0, r0, #31
}
 8013104:	b2c0      	uxtb	r0, r0
 8013106:	4770      	bx	lr
uint8_t n = 0U;
 8013108:	2300      	movs	r3, #0
 801310a:	e7e8      	b.n	80130de <SEQ_BitPosition+0xa>
 801310c:	08014d24 	.word	0x08014d24

08013110 <UTIL_SEQ_Run>:
{
 8013110:	b538      	push	{r3, r4, r5, lr}
  super_mask_backup = SuperMask;
 8013112:	4b43      	ldr	r3, [pc, #268]	; (8013220 <UTIL_SEQ_Run+0x110>)
 8013114:	681c      	ldr	r4, [r3, #0]
  SuperMask &= Mask_bm;
 8013116:	4020      	ands	r0, r4
 8013118:	6018      	str	r0, [r3, #0]
  local_taskset = TaskSet;
 801311a:	4b42      	ldr	r3, [pc, #264]	; (8013224 <UTIL_SEQ_Run+0x114>)
 801311c:	6819      	ldr	r1, [r3, #0]
  local_evtset = EvtSet;
 801311e:	4b42      	ldr	r3, [pc, #264]	; (8013228 <UTIL_SEQ_Run+0x118>)
 8013120:	681b      	ldr	r3, [r3, #0]
  local_taskmask = TaskMask;
 8013122:	4a42      	ldr	r2, [pc, #264]	; (801322c <UTIL_SEQ_Run+0x11c>)
 8013124:	6810      	ldr	r0, [r2, #0]
  local_evtwaited =  EvtWaited;
 8013126:	4a42      	ldr	r2, [pc, #264]	; (8013230 <UTIL_SEQ_Run+0x120>)
 8013128:	6812      	ldr	r2, [r2, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801312a:	e030      	b.n	801318e <UTIL_SEQ_Run+0x7e>
      counter++;
 801312c:	3301      	adds	r3, #1
 801312e:	e035      	b.n	801319c <UTIL_SEQ_Run+0x8c>
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8013130:	4d40      	ldr	r5, [pc, #256]	; (8013234 <UTIL_SEQ_Run+0x124>)
 8013132:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8013136:	6868      	ldr	r0, [r5, #4]
 8013138:	4010      	ands	r0, r2
 801313a:	f7ff ffcb 	bl	80130d4 <SEQ_BitPosition>
 801313e:	493e      	ldr	r1, [pc, #248]	; (8013238 <UTIL_SEQ_Run+0x128>)
 8013140:	6008      	str	r0, [r1, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8013142:	686a      	ldr	r2, [r5, #4]
 8013144:	2301      	movs	r3, #1
 8013146:	fa03 f000 	lsl.w	r0, r3, r0
 801314a:	ea22 0000 	bic.w	r0, r2, r0
 801314e:	6068      	str	r0, [r5, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013150:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013154:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 8013156:	680a      	ldr	r2, [r1, #0]
 8013158:	fa03 f202 	lsl.w	r2, r3, r2
 801315c:	ea6f 0c02 	mvn.w	ip, r2
 8013160:	4830      	ldr	r0, [pc, #192]	; (8013224 <UTIL_SEQ_Run+0x114>)
 8013162:	6801      	ldr	r1, [r0, #0]
 8013164:	ea21 0202 	bic.w	r2, r1, r2
 8013168:	6002      	str	r2, [r0, #0]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801316a:	2b00      	cmp	r3, #0
 801316c:	d12d      	bne.n	80131ca <UTIL_SEQ_Run+0xba>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801316e:	f385 8810 	msr	PRIMASK, r5
    TaskCb[CurrentTaskIdx]( );
 8013172:	4b31      	ldr	r3, [pc, #196]	; (8013238 <UTIL_SEQ_Run+0x128>)
 8013174:	681a      	ldr	r2, [r3, #0]
 8013176:	4b31      	ldr	r3, [pc, #196]	; (801323c <UTIL_SEQ_Run+0x12c>)
 8013178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801317c:	4798      	blx	r3
    local_taskset = TaskSet;
 801317e:	4b29      	ldr	r3, [pc, #164]	; (8013224 <UTIL_SEQ_Run+0x114>)
 8013180:	6819      	ldr	r1, [r3, #0]
    local_evtset = EvtSet;
 8013182:	4b29      	ldr	r3, [pc, #164]	; (8013228 <UTIL_SEQ_Run+0x118>)
 8013184:	681b      	ldr	r3, [r3, #0]
    local_taskmask = TaskMask;
 8013186:	4a29      	ldr	r2, [pc, #164]	; (801322c <UTIL_SEQ_Run+0x11c>)
 8013188:	6810      	ldr	r0, [r2, #0]
    local_evtwaited = EvtWaited;
 801318a:	4a29      	ldr	r2, [pc, #164]	; (8013230 <UTIL_SEQ_Run+0x120>)
 801318c:	6812      	ldr	r2, [r2, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801318e:	4001      	ands	r1, r0
 8013190:	4d23      	ldr	r5, [pc, #140]	; (8013220 <UTIL_SEQ_Run+0x110>)
 8013192:	682d      	ldr	r5, [r5, #0]
 8013194:	4229      	tst	r1, r5
 8013196:	d021      	beq.n	80131dc <UTIL_SEQ_Run+0xcc>
 8013198:	4013      	ands	r3, r2
 801319a:	d11f      	bne.n	80131dc <UTIL_SEQ_Run+0xcc>
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801319c:	4a25      	ldr	r2, [pc, #148]	; (8013234 <UTIL_SEQ_Run+0x124>)
 801319e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80131a2:	4002      	ands	r2, r0
 80131a4:	422a      	tst	r2, r5
 80131a6:	d0c1      	beq.n	801312c <UTIL_SEQ_Run+0x1c>
    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 80131a8:	4922      	ldr	r1, [pc, #136]	; (8013234 <UTIL_SEQ_Run+0x124>)
 80131aa:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 80131ae:	4002      	ands	r2, r0
 80131b0:	402a      	ands	r2, r5
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80131b2:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80131b6:	6849      	ldr	r1, [r1, #4]
 80131b8:	4211      	tst	r1, r2
 80131ba:	d1b9      	bne.n	8013130 <UTIL_SEQ_Run+0x20>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80131bc:	491d      	ldr	r1, [pc, #116]	; (8013234 <UTIL_SEQ_Run+0x124>)
 80131be:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80131c2:	f04f 30ff 	mov.w	r0, #4294967295
 80131c6:	6048      	str	r0, [r1, #4]
 80131c8:	e7b2      	b.n	8013130 <UTIL_SEQ_Run+0x20>
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80131ca:	3b01      	subs	r3, #1
 80131cc:	4919      	ldr	r1, [pc, #100]	; (8013234 <UTIL_SEQ_Run+0x124>)
 80131ce:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 80131d2:	ea0c 0202 	and.w	r2, ip, r2
 80131d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80131da:	e7c6      	b.n	801316a <UTIL_SEQ_Run+0x5a>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80131dc:	4b16      	ldr	r3, [pc, #88]	; (8013238 <UTIL_SEQ_Run+0x128>)
 80131de:	f04f 32ff 	mov.w	r2, #4294967295
 80131e2:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 80131e4:	f7ff ff74 	bl	80130d0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80131e8:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80131ec:	b672      	cpsid	i
  local_taskset = TaskSet;
 80131ee:	4b0d      	ldr	r3, [pc, #52]	; (8013224 <UTIL_SEQ_Run+0x114>)
 80131f0:	681b      	ldr	r3, [r3, #0]
  local_evtset = EvtSet;
 80131f2:	4a0d      	ldr	r2, [pc, #52]	; (8013228 <UTIL_SEQ_Run+0x118>)
 80131f4:	6811      	ldr	r1, [r2, #0]
  local_taskmask = TaskMask;
 80131f6:	4a0d      	ldr	r2, [pc, #52]	; (801322c <UTIL_SEQ_Run+0x11c>)
 80131f8:	6812      	ldr	r2, [r2, #0]
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 80131fa:	4013      	ands	r3, r2
 80131fc:	4a08      	ldr	r2, [pc, #32]	; (8013220 <UTIL_SEQ_Run+0x110>)
 80131fe:	6812      	ldr	r2, [r2, #0]
 8013200:	4213      	tst	r3, r2
 8013202:	d103      	bne.n	801320c <UTIL_SEQ_Run+0xfc>
    if ((local_evtset & EvtWaited)== 0U)
 8013204:	4b0a      	ldr	r3, [pc, #40]	; (8013230 <UTIL_SEQ_Run+0x120>)
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	420b      	tst	r3, r1
 801320a:	d006      	beq.n	801321a <UTIL_SEQ_Run+0x10a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801320c:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 8013210:	f7ff ff5f 	bl	80130d2 <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 8013214:	4b02      	ldr	r3, [pc, #8]	; (8013220 <UTIL_SEQ_Run+0x110>)
 8013216:	601c      	str	r4, [r3, #0]
}
 8013218:	bd38      	pop	{r3, r4, r5, pc}
      UTIL_SEQ_Idle( );
 801321a:	f7ee fde7 	bl	8001dec <UTIL_SEQ_Idle>
 801321e:	e7f5      	b.n	801320c <UTIL_SEQ_Run+0xfc>
 8013220:	2000011c 	.word	0x2000011c
 8013224:	20001720 	.word	0x20001720
 8013228:	20001700 	.word	0x20001700
 801322c:	20000120 	.word	0x20000120
 8013230:	20001704 	.word	0x20001704
 8013234:	20001718 	.word	0x20001718
 8013238:	200016fc 	.word	0x200016fc
 801323c:	20001708 	.word	0x20001708

08013240 <UTIL_SEQ_RegTask>:
{
 8013240:	b538      	push	{r3, r4, r5, lr}
 8013242:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013244:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013248:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801324a:	f7ff ff43 	bl	80130d4 <SEQ_BitPosition>
 801324e:	4b03      	ldr	r3, [pc, #12]	; (801325c <UTIL_SEQ_RegTask+0x1c>)
 8013250:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013254:	f385 8810 	msr	PRIMASK, r5
}
 8013258:	bd38      	pop	{r3, r4, r5, pc}
 801325a:	bf00      	nop
 801325c:	20001708 	.word	0x20001708

08013260 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8013260:	b082      	sub	sp, #8
 8013262:	b082      	sub	sp, #8
 8013264:	f10d 0c08 	add.w	ip, sp, #8
 8013268:	e90c 0006 	stmdb	ip, {r1, r2}
 801326c:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801326e:	2200      	movs	r2, #0
 8013270:	6002      	str	r2, [r0, #0]
 8013272:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds + b.Seconds;
 8013274:	440b      	add	r3, r1
 8013276:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8013278:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801327c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8013280:	440a      	add	r2, r1
 8013282:	b291      	uxth	r1, r2
 8013284:	b212      	sxth	r2, r2
 8013286:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 8013288:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 801328c:	db04      	blt.n	8013298 <SysTimeAdd+0x38>
  {
    c.Seconds++;
 801328e:	3301      	adds	r3, #1
 8013290:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 8013292:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 8013296:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 8013298:	b002      	add	sp, #8
 801329a:	b002      	add	sp, #8
 801329c:	4770      	bx	lr

0801329e <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801329e:	b082      	sub	sp, #8
 80132a0:	b082      	sub	sp, #8
 80132a2:	f10d 0c08 	add.w	ip, sp, #8
 80132a6:	e90c 0006 	stmdb	ip, {r1, r2}
 80132aa:	9303      	str	r3, [sp, #12]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 80132ac:	2200      	movs	r2, #0
 80132ae:	6002      	str	r2, [r0, #0]
 80132b0:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds - b.Seconds;
 80132b2:	1acb      	subs	r3, r1, r3
 80132b4:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 80132b6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80132ba:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80132be:	1a52      	subs	r2, r2, r1
 80132c0:	b291      	uxth	r1, r2
 80132c2:	b212      	sxth	r2, r2
 80132c4:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds < 0 )
 80132c6:	2a00      	cmp	r2, #0
 80132c8:	db02      	blt.n	80132d0 <SysTimeSub+0x32>
  {
    c.Seconds--;
    c.SubSeconds += 1000;
  }
  return c;
}
 80132ca:	b002      	add	sp, #8
 80132cc:	b002      	add	sp, #8
 80132ce:	4770      	bx	lr
    c.Seconds--;
 80132d0:	3b01      	subs	r3, #1
 80132d2:	6003      	str	r3, [r0, #0]
    c.SubSeconds += 1000;
 80132d4:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 80132d8:	8081      	strh	r1, [r0, #4]
  return c;
 80132da:	e7f6      	b.n	80132ca <SysTimeSub+0x2c>

080132dc <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 80132dc:	b530      	push	{r4, r5, lr}
 80132de:	b089      	sub	sp, #36	; 0x24
 80132e0:	ac02      	add	r4, sp, #8
 80132e2:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80132e6:	2300      	movs	r3, #0
 80132e8:	9304      	str	r3, [sp, #16]
 80132ea:	f8ad 3014 	strh.w	r3, [sp, #20]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80132ee:	4d0b      	ldr	r5, [pc, #44]	; (801331c <SysTimeSet+0x40>)
 80132f0:	692b      	ldr	r3, [r5, #16]
 80132f2:	a805      	add	r0, sp, #20
 80132f4:	4798      	blx	r3
 80132f6:	4603      	mov	r3, r0
 80132f8:	9004      	str	r0, [sp, #16]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 80132fa:	9a05      	ldr	r2, [sp, #20]
 80132fc:	9200      	str	r2, [sp, #0]
 80132fe:	e894 0006 	ldmia.w	r4, {r1, r2}
 8013302:	a806      	add	r0, sp, #24
 8013304:	f7ff ffcb 	bl	801329e <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 8013308:	682b      	ldr	r3, [r5, #0]
 801330a:	9806      	ldr	r0, [sp, #24]
 801330c:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801330e:	68ab      	ldr	r3, [r5, #8]
 8013310:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8013314:	4798      	blx	r3
}
 8013316:	b009      	add	sp, #36	; 0x24
 8013318:	bd30      	pop	{r4, r5, pc}
 801331a:	bf00      	nop
 801331c:	08013e78 	.word	0x08013e78

08013320 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8013320:	b530      	push	{r4, r5, lr}
 8013322:	b087      	sub	sp, #28
 8013324:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8013326:	2300      	movs	r3, #0
 8013328:	9304      	str	r3, [sp, #16]
 801332a:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801332e:	6003      	str	r3, [r0, #0]
 8013330:	8083      	strh	r3, [r0, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8013332:	4d0b      	ldr	r5, [pc, #44]	; (8013360 <SysTimeGet+0x40>)
 8013334:	692b      	ldr	r3, [r5, #16]
 8013336:	a805      	add	r0, sp, #20
 8013338:	4798      	blx	r3
 801333a:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801333c:	68eb      	ldr	r3, [r5, #12]
 801333e:	4798      	blx	r3
 8013340:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8013344:	686b      	ldr	r3, [r5, #4]
 8013346:	4798      	blx	r3
 8013348:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801334a:	9b05      	ldr	r3, [sp, #20]
 801334c:	9300      	str	r3, [sp, #0]
 801334e:	9b04      	ldr	r3, [sp, #16]
 8013350:	aa02      	add	r2, sp, #8
 8013352:	ca06      	ldmia	r2, {r1, r2}
 8013354:	4620      	mov	r0, r4
 8013356:	f7ff ff83 	bl	8013260 <SysTimeAdd>

  return sysTime;
}
 801335a:	4620      	mov	r0, r4
 801335c:	b007      	add	sp, #28
 801335e:	bd30      	pop	{r4, r5, pc}
 8013360:	08013e78 	.word	0x08013e78

08013364 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 8013364:	b530      	push	{r4, r5, lr}
 8013366:	b083      	sub	sp, #12
 8013368:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801336a:	2300      	movs	r3, #0
 801336c:	9300      	str	r3, [sp, #0]
 801336e:	f8ad 3004 	strh.w	r3, [sp, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8013372:	4b06      	ldr	r3, [pc, #24]	; (801338c <SysTimeGetMcuTime+0x28>)
 8013374:	691b      	ldr	r3, [r3, #16]
 8013376:	466d      	mov	r5, sp
 8013378:	a801      	add	r0, sp, #4
 801337a:	4798      	blx	r3
 801337c:	9000      	str	r0, [sp, #0]

  return calendarTime;
 801337e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013382:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8013386:	4620      	mov	r0, r4
 8013388:	b003      	add	sp, #12
 801338a:	bd30      	pop	{r4, r5, pc}
 801338c:	08013e78 	.word	0x08013e78

08013390 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 8013390:	b530      	push	{r4, r5, lr}
 8013392:	b089      	sub	sp, #36	; 0x24
 8013394:	ac02      	add	r4, sp, #8
 8013396:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801339a:	4d0c      	ldr	r5, [pc, #48]	; (80133cc <SysTimeToMs+0x3c>)
 801339c:	68eb      	ldr	r3, [r5, #12]
 801339e:	4798      	blx	r3
 80133a0:	f8ad 001c 	strh.w	r0, [sp, #28]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80133a4:	686b      	ldr	r3, [r5, #4]
 80133a6:	4798      	blx	r3
 80133a8:	4603      	mov	r3, r0
 80133aa:	9006      	str	r0, [sp, #24]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 80133ac:	9a07      	ldr	r2, [sp, #28]
 80133ae:	9200      	str	r2, [sp, #0]
 80133b0:	e894 0006 	ldmia.w	r4, {r1, r2}
 80133b4:	a804      	add	r0, sp, #16
 80133b6:	f7ff ff72 	bl	801329e <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 80133ba:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
}
 80133be:	9a04      	ldr	r2, [sp, #16]
 80133c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80133c4:	fb00 3002 	mla	r0, r0, r2, r3
 80133c8:	b009      	add	sp, #36	; 0x24
 80133ca:	bd30      	pop	{r4, r5, pc}
 80133cc:	08013e78 	.word	0x08013e78

080133d0 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 80133d0:	b530      	push	{r4, r5, lr}
 80133d2:	b087      	sub	sp, #28
 80133d4:	4604      	mov	r4, r0
  uint32_t seconds = timeMs / 1000;
 80133d6:	4b12      	ldr	r3, [pc, #72]	; (8013420 <SysTimeFromMs+0x50>)
 80133d8:	fba3 2301 	umull	r2, r3, r3, r1
 80133dc:	099b      	lsrs	r3, r3, #6
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 80133de:	9304      	str	r3, [sp, #16]
 80133e0:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 80133e4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80133e8:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
 80133ec:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t DeltaTime = { 0 };
 80133f0:	2300      	movs	r3, #0
 80133f2:	9302      	str	r3, [sp, #8]
 80133f4:	9303      	str	r3, [sp, #12]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80133f6:	4d0b      	ldr	r5, [pc, #44]	; (8013424 <SysTimeFromMs+0x54>)
 80133f8:	68eb      	ldr	r3, [r5, #12]
 80133fa:	4798      	blx	r3
 80133fc:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8013400:	686b      	ldr	r3, [r5, #4]
 8013402:	4798      	blx	r3
 8013404:	4603      	mov	r3, r0
 8013406:	9002      	str	r0, [sp, #8]
  return SysTimeAdd( sysTime, DeltaTime );
 8013408:	9a03      	ldr	r2, [sp, #12]
 801340a:	9200      	str	r2, [sp, #0]
 801340c:	aa06      	add	r2, sp, #24
 801340e:	e912 0006 	ldmdb	r2, {r1, r2}
 8013412:	4620      	mov	r0, r4
 8013414:	f7ff ff24 	bl	8013260 <SysTimeAdd>
}
 8013418:	4620      	mov	r0, r4
 801341a:	b007      	add	sp, #28
 801341c:	bd30      	pop	{r4, r5, pc}
 801341e:	bf00      	nop
 8013420:	10624dd3 	.word	0x10624dd3
 8013424:	08013e78 	.word	0x08013e78

08013428 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 8013428:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801342a:	4b03      	ldr	r3, [pc, #12]	; (8013438 <UTIL_TIMER_Init+0x10>)
 801342c:	2200      	movs	r2, #0
 801342e:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 8013430:	4b02      	ldr	r3, [pc, #8]	; (801343c <UTIL_TIMER_Init+0x14>)
 8013432:	681b      	ldr	r3, [r3, #0]
 8013434:	4798      	blx	r3
}
 8013436:	bd08      	pop	{r3, pc}
 8013438:	20001724 	.word	0x20001724
 801343c:	08013e8c 	.word	0x08013e8c

08013440 <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 8013440:	b1a8      	cbz	r0, 801346e <UTIL_TIMER_Create+0x2e>
{
 8013442:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013444:	4617      	mov	r7, r2
 8013446:	461e      	mov	r6, r3
 8013448:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 801344a:	b193      	cbz	r3, 8013472 <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 801344c:	2500      	movs	r5, #0
 801344e:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8013450:	4b09      	ldr	r3, [pc, #36]	; (8013478 <UTIL_TIMER_Create+0x38>)
 8013452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013454:	4608      	mov	r0, r1
 8013456:	4798      	blx	r3
 8013458:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 801345a:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 801345c:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 801345e:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 8013460:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 8013462:	9b06      	ldr	r3, [sp, #24]
 8013464:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 8013466:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 8013468:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 801346a:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 801346c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 801346e:	2001      	movs	r0, #1
}
 8013470:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 8013472:	2001      	movs	r0, #1
 8013474:	e7fa      	b.n	801346c <UTIL_TIMER_Create+0x2c>
 8013476:	bf00      	nop
 8013478:	08013e8c 	.word	0x08013e8c

0801347c <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801347c:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801347e:	4c03      	ldr	r4, [pc, #12]	; (801348c <UTIL_TIMER_GetCurrentTime+0x10>)
 8013480:	69e3      	ldr	r3, [r4, #28]
 8013482:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 8013484:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013486:	4798      	blx	r3
}
 8013488:	bd10      	pop	{r4, pc}
 801348a:	bf00      	nop
 801348c:	08013e8c 	.word	0x08013e8c

08013490 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8013490:	b570      	push	{r4, r5, r6, lr}
 8013492:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8013494:	4d05      	ldr	r5, [pc, #20]	; (80134ac <UTIL_TIMER_GetElapsedTime+0x1c>)
 8013496:	69eb      	ldr	r3, [r5, #28]
 8013498:	4798      	blx	r3
 801349a:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801349c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801349e:	4630      	mov	r0, r6
 80134a0:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 80134a2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80134a4:	1a20      	subs	r0, r4, r0
 80134a6:	4798      	blx	r3
}
 80134a8:	bd70      	pop	{r4, r5, r6, pc}
 80134aa:	bf00      	nop
 80134ac:	08013e8c 	.word	0x08013e8c

080134b0 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80134b0:	4b05      	ldr	r3, [pc, #20]	; (80134c8 <TimerExists+0x18>)
 80134b2:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 80134b4:	e000      	b.n	80134b8 <TimerExists+0x8>
  {
    if( cur == TimerObject )
    {
      return true;
    }
    cur = cur->Next;
 80134b6:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 80134b8:	b11b      	cbz	r3, 80134c2 <TimerExists+0x12>
    if( cur == TimerObject )
 80134ba:	4283      	cmp	r3, r0
 80134bc:	d1fb      	bne.n	80134b6 <TimerExists+0x6>
      return true;
 80134be:	2001      	movs	r0, #1
  }
  return false;
}
 80134c0:	4770      	bx	lr
  return false;
 80134c2:	2000      	movs	r0, #0
 80134c4:	4770      	bx	lr
 80134c6:	bf00      	nop
 80134c8:	20001724 	.word	0x20001724

080134cc <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 80134cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134ce:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 80134d0:	4e09      	ldr	r6, [pc, #36]	; (80134f8 <TimerSetTimeout+0x2c>)
 80134d2:	6a33      	ldr	r3, [r6, #32]
 80134d4:	4798      	blx	r3
 80134d6:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 80134d8:	2301      	movs	r3, #1
 80134da:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 80134dc:	6827      	ldr	r7, [r4, #0]
 80134de:	69b6      	ldr	r6, [r6, #24]
 80134e0:	47b0      	blx	r6
 80134e2:	4428      	add	r0, r5
 80134e4:	4287      	cmp	r7, r0
 80134e6:	d202      	bcs.n	80134ee <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 80134e8:	47b0      	blx	r6
 80134ea:	4405      	add	r5, r0
 80134ec:	6025      	str	r5, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 80134ee:	4b02      	ldr	r3, [pc, #8]	; (80134f8 <TimerSetTimeout+0x2c>)
 80134f0:	689b      	ldr	r3, [r3, #8]
 80134f2:	6820      	ldr	r0, [r4, #0]
 80134f4:	4798      	blx	r3
}
 80134f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80134f8:	08013e8c 	.word	0x08013e8c

080134fc <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 80134fc:	b368      	cbz	r0, 801355a <UTIL_TIMER_Stop+0x5e>
{
 80134fe:	b510      	push	{r4, lr}
 8013500:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013502:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013506:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8013508:	4b15      	ldr	r3, [pc, #84]	; (8013560 <UTIL_TIMER_Stop+0x64>)
 801350a:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 801350c:	2301      	movs	r3, #1
 801350e:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 8013510:	b1e1      	cbz	r1, 801354c <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 8013512:	2300      	movs	r3, #0
 8013514:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8013516:	4288      	cmp	r0, r1
 8013518:	d006      	beq.n	8013528 <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801351a:	460b      	mov	r3, r1
        while( cur != NULL )
 801351c:	b1b3      	cbz	r3, 801354c <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 801351e:	4293      	cmp	r3, r2
 8013520:	d011      	beq.n	8013546 <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 8013522:	4619      	mov	r1, r3
            cur = cur->Next;
 8013524:	695b      	ldr	r3, [r3, #20]
 8013526:	e7f9      	b.n	801351c <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 8013528:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 801352a:	6948      	ldr	r0, [r1, #20]
 801352c:	b120      	cbz	r0, 8013538 <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 801352e:	4b0c      	ldr	r3, [pc, #48]	; (8013560 <UTIL_TIMER_Stop+0x64>)
 8013530:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 8013532:	f7ff ffcb 	bl	80134cc <TimerSetTimeout>
 8013536:	e009      	b.n	801354c <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 8013538:	4b0a      	ldr	r3, [pc, #40]	; (8013564 <UTIL_TIMER_Stop+0x68>)
 801353a:	68db      	ldr	r3, [r3, #12]
 801353c:	4798      	blx	r3
            TimerListHead = NULL;
 801353e:	4b08      	ldr	r3, [pc, #32]	; (8013560 <UTIL_TIMER_Stop+0x64>)
 8013540:	2200      	movs	r2, #0
 8013542:	601a      	str	r2, [r3, #0]
 8013544:	e002      	b.n	801354c <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 8013546:	695b      	ldr	r3, [r3, #20]
 8013548:	b123      	cbz	r3, 8013554 <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 801354a:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801354c:	f384 8810 	msr	PRIMASK, r4
}
 8013550:	2000      	movs	r0, #0
}
 8013552:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 8013554:	2300      	movs	r3, #0
 8013556:	614b      	str	r3, [r1, #20]
 8013558:	e7f8      	b.n	801354c <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 801355a:	2001      	movs	r0, #1
}
 801355c:	4770      	bx	lr
 801355e:	bf00      	nop
 8013560:	20001724 	.word	0x20001724
 8013564:	08013e8c 	.word	0x08013e8c

08013568 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8013568:	4b09      	ldr	r3, [pc, #36]	; (8013590 <TimerInsertTimer+0x28>)
 801356a:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801356c:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 801356e:	e001      	b.n	8013574 <TimerInsertTimer+0xc>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
    {
        cur = next;
 8013570:	461a      	mov	r2, r3
        next = next->Next;
 8013572:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 8013574:	6951      	ldr	r1, [r2, #20]
 8013576:	b139      	cbz	r1, 8013588 <TimerInsertTimer+0x20>
    if( TimerObject->Timestamp  > next->Timestamp )
 8013578:	6819      	ldr	r1, [r3, #0]
 801357a:	f8d0 c000 	ldr.w	ip, [r0]
 801357e:	458c      	cmp	ip, r1
 8013580:	d8f6      	bhi.n	8013570 <TimerInsertTimer+0x8>
    }
    else
    {
        cur->Next = TimerObject;
 8013582:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 8013584:	6143      	str	r3, [r0, #20]
        return;
 8013586:	4770      	bx	lr

    }
  }
  cur->Next = TimerObject;
 8013588:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 801358a:	2300      	movs	r3, #0
 801358c:	6143      	str	r3, [r0, #20]
}
 801358e:	4770      	bx	lr
 8013590:	20001724 	.word	0x20001724

08013594 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 8013594:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8013596:	4b05      	ldr	r3, [pc, #20]	; (80135ac <TimerInsertNewHeadTimer+0x18>)
 8013598:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 801359a:	b10b      	cbz	r3, 80135a0 <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 801359c:	2200      	movs	r2, #0
 801359e:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 80135a0:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 80135a2:	4b02      	ldr	r3, [pc, #8]	; (80135ac <TimerInsertNewHeadTimer+0x18>)
 80135a4:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 80135a6:	f7ff ff91 	bl	80134cc <TimerSetTimeout>
}
 80135aa:	bd08      	pop	{r3, pc}
 80135ac:	20001724 	.word	0x20001724

080135b0 <UTIL_TIMER_Start>:
{
 80135b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 80135b2:	2800      	cmp	r0, #0
 80135b4:	d036      	beq.n	8013624 <UTIL_TIMER_Start+0x74>
 80135b6:	4604      	mov	r4, r0
 80135b8:	f7ff ff7a 	bl	80134b0 <TimerExists>
 80135bc:	2800      	cmp	r0, #0
 80135be:	d134      	bne.n	801362a <UTIL_TIMER_Start+0x7a>
 80135c0:	7a65      	ldrb	r5, [r4, #9]
 80135c2:	2d00      	cmp	r5, #0
 80135c4:	d133      	bne.n	801362e <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80135c6:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80135ca:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 80135cc:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 80135ce:	4b19      	ldr	r3, [pc, #100]	; (8013634 <UTIL_TIMER_Start+0x84>)
 80135d0:	6a1b      	ldr	r3, [r3, #32]
 80135d2:	4798      	blx	r3
    if( ticks < minValue )
 80135d4:	4287      	cmp	r7, r0
 80135d6:	d300      	bcc.n	80135da <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 80135d8:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 80135da:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 80135dc:	2300      	movs	r3, #0
 80135de:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 80135e0:	2201      	movs	r2, #1
 80135e2:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 80135e4:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 80135e6:	4b14      	ldr	r3, [pc, #80]	; (8013638 <UTIL_TIMER_Start+0x88>)
 80135e8:	681b      	ldr	r3, [r3, #0]
 80135ea:	b183      	cbz	r3, 801360e <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 80135ec:	4b11      	ldr	r3, [pc, #68]	; (8013634 <UTIL_TIMER_Start+0x84>)
 80135ee:	699b      	ldr	r3, [r3, #24]
 80135f0:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 80135f2:	6823      	ldr	r3, [r4, #0]
 80135f4:	4418      	add	r0, r3
 80135f6:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 80135f8:	4b0f      	ldr	r3, [pc, #60]	; (8013638 <UTIL_TIMER_Start+0x88>)
 80135fa:	681b      	ldr	r3, [r3, #0]
 80135fc:	681b      	ldr	r3, [r3, #0]
 80135fe:	4298      	cmp	r0, r3
 8013600:	d20c      	bcs.n	801361c <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 8013602:	4620      	mov	r0, r4
 8013604:	f7ff ffc6 	bl	8013594 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013608:	f386 8810 	msr	PRIMASK, r6
}
 801360c:	e00b      	b.n	8013626 <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 801360e:	4b09      	ldr	r3, [pc, #36]	; (8013634 <UTIL_TIMER_Start+0x84>)
 8013610:	691b      	ldr	r3, [r3, #16]
 8013612:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 8013614:	4620      	mov	r0, r4
 8013616:	f7ff ffbd 	bl	8013594 <TimerInsertNewHeadTimer>
 801361a:	e7f5      	b.n	8013608 <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 801361c:	4620      	mov	r0, r4
 801361e:	f7ff ffa3 	bl	8013568 <TimerInsertTimer>
 8013622:	e7f1      	b.n	8013608 <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 8013624:	2501      	movs	r5, #1
}
 8013626:	4628      	mov	r0, r5
 8013628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 801362a:	2501      	movs	r5, #1
 801362c:	e7fb      	b.n	8013626 <UTIL_TIMER_Start+0x76>
 801362e:	2501      	movs	r5, #1
 8013630:	e7f9      	b.n	8013626 <UTIL_TIMER_Start+0x76>
 8013632:	bf00      	nop
 8013634:	08013e8c 	.word	0x08013e8c
 8013638:	20001724 	.word	0x20001724

0801363c <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 801363c:	b198      	cbz	r0, 8013666 <UTIL_TIMER_SetPeriod+0x2a>
{
 801363e:	b510      	push	{r4, lr}
 8013640:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 8013642:	4b0a      	ldr	r3, [pc, #40]	; (801366c <UTIL_TIMER_SetPeriod+0x30>)
 8013644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013646:	4608      	mov	r0, r1
 8013648:	4798      	blx	r3
 801364a:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 801364c:	4620      	mov	r0, r4
 801364e:	f7ff ff2f 	bl	80134b0 <TimerExists>
 8013652:	b908      	cbnz	r0, 8013658 <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8013654:	2000      	movs	r0, #0
}
 8013656:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 8013658:	4620      	mov	r0, r4
 801365a:	f7ff ff4f 	bl	80134fc <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801365e:	4620      	mov	r0, r4
 8013660:	f7ff ffa6 	bl	80135b0 <UTIL_TIMER_Start>
 8013664:	e7f7      	b.n	8013656 <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 8013666:	2001      	movs	r0, #1
}
 8013668:	4770      	bx	lr
 801366a:	bf00      	nop
 801366c:	08013e8c 	.word	0x08013e8c

08013670 <UTIL_TIMER_IRQ_Handler>:
{
 8013670:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013672:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013676:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 8013678:	4c1e      	ldr	r4, [pc, #120]	; (80136f4 <UTIL_TIMER_IRQ_Handler+0x84>)
 801367a:	6963      	ldr	r3, [r4, #20]
 801367c:	4798      	blx	r3
 801367e:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8013680:	6923      	ldr	r3, [r4, #16]
 8013682:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 8013684:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 8013686:	4b1c      	ldr	r3, [pc, #112]	; (80136f8 <UTIL_TIMER_IRQ_Handler+0x88>)
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	b923      	cbnz	r3, 8013696 <UTIL_TIMER_IRQ_Handler+0x26>
 801368c:	e018      	b.n	80136c0 <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 801368e:	2200      	movs	r2, #0
 8013690:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 8013692:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 8013694:	b1a3      	cbz	r3, 80136c0 <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 8013696:	681a      	ldr	r2, [r3, #0]
 8013698:	42a2      	cmp	r2, r4
 801369a:	d9f8      	bls.n	801368e <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 801369c:	1a31      	subs	r1, r6, r0
 801369e:	440a      	add	r2, r1
 80136a0:	601a      	str	r2, [r3, #0]
 80136a2:	e7f6      	b.n	8013692 <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 80136a4:	4b14      	ldr	r3, [pc, #80]	; (80136f8 <UTIL_TIMER_IRQ_Handler+0x88>)
 80136a6:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 80136a8:	6962      	ldr	r2, [r4, #20]
 80136aa:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 80136ac:	2300      	movs	r3, #0
 80136ae:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 80136b0:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 80136b2:	68e3      	ldr	r3, [r4, #12]
 80136b4:	6920      	ldr	r0, [r4, #16]
 80136b6:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 80136b8:	8963      	ldrh	r3, [r4, #10]
 80136ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80136be:	d012      	beq.n	80136e6 <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 80136c0:	4b0d      	ldr	r3, [pc, #52]	; (80136f8 <UTIL_TIMER_IRQ_Handler+0x88>)
 80136c2:	681b      	ldr	r3, [r3, #0]
 80136c4:	b13b      	cbz	r3, 80136d6 <UTIL_TIMER_IRQ_Handler+0x66>
 80136c6:	681c      	ldr	r4, [r3, #0]
 80136c8:	2c00      	cmp	r4, #0
 80136ca:	d0eb      	beq.n	80136a4 <UTIL_TIMER_IRQ_Handler+0x34>
 80136cc:	4b09      	ldr	r3, [pc, #36]	; (80136f4 <UTIL_TIMER_IRQ_Handler+0x84>)
 80136ce:	699b      	ldr	r3, [r3, #24]
 80136d0:	4798      	blx	r3
 80136d2:	4284      	cmp	r4, r0
 80136d4:	d3e6      	bcc.n	80136a4 <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 80136d6:	4b08      	ldr	r3, [pc, #32]	; (80136f8 <UTIL_TIMER_IRQ_Handler+0x88>)
 80136d8:	6818      	ldr	r0, [r3, #0]
 80136da:	b108      	cbz	r0, 80136e0 <UTIL_TIMER_IRQ_Handler+0x70>
 80136dc:	7a03      	ldrb	r3, [r0, #8]
 80136de:	b133      	cbz	r3, 80136ee <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80136e0:	f385 8810 	msr	PRIMASK, r5
}
 80136e4:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 80136e6:	4620      	mov	r0, r4
 80136e8:	f7ff ff62 	bl	80135b0 <UTIL_TIMER_Start>
 80136ec:	e7e8      	b.n	80136c0 <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 80136ee:	f7ff feed 	bl	80134cc <TimerSetTimeout>
 80136f2:	e7f5      	b.n	80136e0 <UTIL_TIMER_IRQ_Handler+0x70>
 80136f4:	08013e8c 	.word	0x08013e8c
 80136f8:	20001724 	.word	0x20001724

080136fc <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 80136fc:	4601      	mov	r1, r0
  int i = 0;
 80136fe:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8013700:	e007      	b.n	8013712 <ee_skip_atoi+0x16>
 8013702:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8013706:	1c53      	adds	r3, r2, #1
 8013708:	600b      	str	r3, [r1, #0]
 801370a:	7813      	ldrb	r3, [r2, #0]
 801370c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8013710:	3830      	subs	r0, #48	; 0x30
 8013712:	680a      	ldr	r2, [r1, #0]
 8013714:	7813      	ldrb	r3, [r2, #0]
 8013716:	3b30      	subs	r3, #48	; 0x30
 8013718:	b2db      	uxtb	r3, r3
 801371a:	2b09      	cmp	r3, #9
 801371c:	d9f1      	bls.n	8013702 <ee_skip_atoi+0x6>
  return i;
}
 801371e:	4770      	bx	lr

08013720 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 8013720:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 8013724:	b093      	sub	sp, #76	; 0x4c
 8013726:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8013728:	9e1c      	ldr	r6, [sp, #112]	; 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801372a:	f016 0f40 	tst.w	r6, #64	; 0x40
 801372e:	d110      	bne.n	8013752 <ee_number+0x32>
  char *dig = lower_digits;
 8013730:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 801382c <ee_number+0x10c>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 8013734:	1e9f      	subs	r7, r3, #2
 8013736:	2f22      	cmp	r7, #34	; 0x22
 8013738:	d875      	bhi.n	8013826 <ee_number+0x106>

  c = (type & ZEROPAD) ? '0' : ' ';
 801373a:	f016 0401 	ands.w	r4, r6, #1
 801373e:	d00b      	beq.n	8013758 <ee_number+0x38>
 8013740:	f04f 0e30 	mov.w	lr, #48	; 0x30
  sign = 0;
  if (type & SIGN)
 8013744:	f016 0f02 	tst.w	r6, #2
 8013748:	d00f      	beq.n	801376a <ee_number+0x4a>
  {
    if (num < 0)
 801374a:	2a00      	cmp	r2, #0
 801374c:	db07      	blt.n	801375e <ee_number+0x3e>
  sign = 0;
 801374e:	2700      	movs	r7, #0
 8013750:	e00c      	b.n	801376c <ee_number+0x4c>
  if (type & UPPERCASE)  dig = upper_digits;
 8013752:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8013830 <ee_number+0x110>
 8013756:	e7ed      	b.n	8013734 <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 8013758:	f04f 0e20 	mov.w	lr, #32
 801375c:	e7f2      	b.n	8013744 <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 801375e:	4252      	negs	r2, r2
      size--;
 8013760:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8013762:	3e01      	subs	r6, #1
 8013764:	961a      	str	r6, [sp, #104]	; 0x68
      sign = '-';
 8013766:	272d      	movs	r7, #45	; 0x2d
 8013768:	e000      	b.n	801376c <ee_number+0x4c>
  sign = 0;
 801376a:	2700      	movs	r7, #0
  }
#endif

  i = 0;

  if (num == 0)
 801376c:	bb5a      	cbnz	r2, 80137c6 <ee_number+0xa6>
    tmp[i++] = '0';
 801376e:	2330      	movs	r3, #48	; 0x30
 8013770:	f88d 3004 	strb.w	r3, [sp, #4]
 8013774:	f04f 0c01 	mov.w	ip, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 8013778:	45ac      	cmp	ip, r5
 801377a:	dd00      	ble.n	801377e <ee_number+0x5e>
 801377c:	4665      	mov	r5, ip
  size -= precision;
 801377e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8013780:	1b5b      	subs	r3, r3, r5
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8013782:	b31c      	cbz	r4, 80137cc <ee_number+0xac>
  if (sign) ASSIGN_STR(sign);
 8013784:	b11f      	cbz	r7, 801378e <ee_number+0x6e>
 8013786:	f800 7b01 	strb.w	r7, [r0], #1
 801378a:	3901      	subs	r1, #1
 801378c:	d007      	beq.n	801379e <ee_number+0x7e>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801378e:	2b00      	cmp	r3, #0
 8013790:	f103 33ff 	add.w	r3, r3, #4294967295
 8013794:	dd24      	ble.n	80137e0 <ee_number+0xc0>
 8013796:	f800 eb01 	strb.w	lr, [r0], #1
 801379a:	3901      	subs	r1, #1
 801379c:	d1f7      	bne.n	801378e <ee_number+0x6e>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 801379e:	b013      	add	sp, #76	; 0x4c
 80137a0:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 80137a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80137a8:	fb03 2216 	mls	r2, r3, r6, r2
 80137ac:	f81a 8002 	ldrb.w	r8, [sl, r2]
 80137b0:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 80137b4:	446a      	add	r2, sp
 80137b6:	f802 8c44 	strb.w	r8, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 80137ba:	4632      	mov	r2, r6
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 80137bc:	f10c 0c01 	add.w	ip, ip, #1
    while (num != 0)
 80137c0:	2a00      	cmp	r2, #0
 80137c2:	d1ef      	bne.n	80137a4 <ee_number+0x84>
 80137c4:	e7d8      	b.n	8013778 <ee_number+0x58>
  i = 0;
 80137c6:	f04f 0c00 	mov.w	ip, #0
 80137ca:	e7f9      	b.n	80137c0 <ee_number+0xa0>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	f103 33ff 	add.w	r3, r3, #4294967295
 80137d2:	ddd7      	ble.n	8013784 <ee_number+0x64>
 80137d4:	2220      	movs	r2, #32
 80137d6:	f800 2b01 	strb.w	r2, [r0], #1
 80137da:	3901      	subs	r1, #1
 80137dc:	d1f6      	bne.n	80137cc <ee_number+0xac>
 80137de:	e7de      	b.n	801379e <ee_number+0x7e>
  while (i < precision--) ASSIGN_STR('0');
 80137e0:	4565      	cmp	r5, ip
 80137e2:	f105 35ff 	add.w	r5, r5, #4294967295
 80137e6:	dd05      	ble.n	80137f4 <ee_number+0xd4>
 80137e8:	2230      	movs	r2, #48	; 0x30
 80137ea:	f800 2b01 	strb.w	r2, [r0], #1
 80137ee:	3901      	subs	r1, #1
 80137f0:	d1f6      	bne.n	80137e0 <ee_number+0xc0>
 80137f2:	e7d4      	b.n	801379e <ee_number+0x7e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 80137f4:	4662      	mov	r2, ip
 80137f6:	2a00      	cmp	r2, #0
 80137f8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80137fc:	dd09      	ble.n	8013812 <ee_number+0xf2>
 80137fe:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 8013802:	446a      	add	r2, sp
 8013804:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 8013808:	f800 2b01 	strb.w	r2, [r0], #1
 801380c:	3901      	subs	r1, #1
 801380e:	d1f1      	bne.n	80137f4 <ee_number+0xd4>
 8013810:	e7c5      	b.n	801379e <ee_number+0x7e>
  while (size-- > 0) ASSIGN_STR(' ');
 8013812:	2b00      	cmp	r3, #0
 8013814:	f103 33ff 	add.w	r3, r3, #4294967295
 8013818:	ddc1      	ble.n	801379e <ee_number+0x7e>
 801381a:	2220      	movs	r2, #32
 801381c:	f800 2b01 	strb.w	r2, [r0], #1
 8013820:	3901      	subs	r1, #1
 8013822:	d1f6      	bne.n	8013812 <ee_number+0xf2>
 8013824:	e7bb      	b.n	801379e <ee_number+0x7e>
  if (base < 2 || base > 36) return 0;
 8013826:	2000      	movs	r0, #0
 8013828:	e7b9      	b.n	801379e <ee_number+0x7e>
 801382a:	bf00      	nop
 801382c:	08014d5c 	.word	0x08014d5c
 8013830:	08014d34 	.word	0x08014d34

08013834 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8013834:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013838:	b087      	sub	sp, #28
 801383a:	9205      	str	r2, [sp, #20]
 801383c:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801383e:	1e0f      	subs	r7, r1, #0
 8013840:	f340 80b8 	ble.w	80139b4 <tiny_vsnprintf_like+0x180>
 8013844:	4606      	mov	r6, r0
  {
    return 0;
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8013846:	4604      	mov	r4, r0
 8013848:	e004      	b.n	8013854 <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);

    if (*fmt != '%')
    {
      *str++ = *fmt;
 801384a:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801384e:	9b05      	ldr	r3, [sp, #20]
 8013850:	3301      	adds	r3, #1
 8013852:	9305      	str	r3, [sp, #20]
 8013854:	9905      	ldr	r1, [sp, #20]
 8013856:	780a      	ldrb	r2, [r1, #0]
 8013858:	b922      	cbnz	r2, 8013864 <tiny_vsnprintf_like+0x30>
 801385a:	1ba3      	subs	r3, r4, r6
 801385c:	1e78      	subs	r0, r7, #1
 801385e:	4283      	cmp	r3, r0
 8013860:	f2c0 80a2 	blt.w	80139a8 <tiny_vsnprintf_like+0x174>
    CHECK_STR_SIZE(buf, str, size);
 8013864:	1ba3      	subs	r3, r4, r6
 8013866:	f107 38ff 	add.w	r8, r7, #4294967295
 801386a:	4543      	cmp	r3, r8
 801386c:	f280 809c 	bge.w	80139a8 <tiny_vsnprintf_like+0x174>
    if (*fmt != '%')
 8013870:	2a25      	cmp	r2, #37	; 0x25
 8013872:	d1ea      	bne.n	801384a <tiny_vsnprintf_like+0x16>

    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 8013874:	1c4b      	adds	r3, r1, #1
 8013876:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 8013878:	784b      	ldrb	r3, [r1, #1]
 801387a:	2b30      	cmp	r3, #48	; 0x30
 801387c:	d020      	beq.n	80138c0 <tiny_vsnprintf_like+0x8c>
    flags = 0;
 801387e:	f04f 0900 	mov.w	r9, #0
    }
#endif

    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 8013882:	3b30      	subs	r3, #48	; 0x30
 8013884:	b2db      	uxtb	r3, r3
 8013886:	2b09      	cmp	r3, #9
 8013888:	d91d      	bls.n	80138c6 <tiny_vsnprintf_like+0x92>
    field_width = -1;
 801388a:	f04f 35ff 	mov.w	r5, #4294967295
#endif

    // Default base
    base = 10;

    switch (*fmt)
 801388e:	9b05      	ldr	r3, [sp, #20]
 8013890:	781a      	ldrb	r2, [r3, #0]
 8013892:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 8013896:	2b20      	cmp	r3, #32
 8013898:	d867      	bhi.n	801396a <tiny_vsnprintf_like+0x136>
 801389a:	e8df f003 	tbb	[pc, r3]
 801389e:	664a      	.short	0x664a
 80138a0:	66666666 	.word	0x66666666
 80138a4:	66666666 	.word	0x66666666
 80138a8:	66621e66 	.word	0x66621e66
 80138ac:	62666666 	.word	0x62666666
 80138b0:	66666666 	.word	0x66666666
 80138b4:	66666666 	.word	0x66666666
 80138b8:	19662866 	.word	0x19662866
 80138bc:	6666      	.short	0x6666
 80138be:	7c          	.byte	0x7c
 80138bf:	00          	.byte	0x00
      flags |= ZEROPAD;
 80138c0:	f04f 0901 	mov.w	r9, #1
 80138c4:	e7dd      	b.n	8013882 <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 80138c6:	a805      	add	r0, sp, #20
 80138c8:	f7ff ff18 	bl	80136fc <ee_skip_atoi>
 80138cc:	4605      	mov	r5, r0
 80138ce:	e7de      	b.n	801388e <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 80138d0:	230a      	movs	r3, #10
 80138d2:	e031      	b.n	8013938 <tiny_vsnprintf_like+0x104>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 80138d4:	2320      	movs	r3, #32
 80138d6:	f804 3b01 	strb.w	r3, [r4], #1
 80138da:	3d01      	subs	r5, #1
 80138dc:	2d00      	cmp	r5, #0
 80138de:	dcf9      	bgt.n	80138d4 <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 80138e0:	9b04      	ldr	r3, [sp, #16]
 80138e2:	1d1a      	adds	r2, r3, #4
 80138e4:	9204      	str	r2, [sp, #16]
 80138e6:	781b      	ldrb	r3, [r3, #0]
 80138e8:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 80138ec:	e7af      	b.n	801384e <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 80138ee:	9b04      	ldr	r3, [sp, #16]
 80138f0:	1d1a      	adds	r2, r3, #4
 80138f2:	9204      	str	r2, [sp, #16]
 80138f4:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 80138f8:	f1b8 0f00 	cmp.w	r8, #0
 80138fc:	d003      	beq.n	8013906 <tiny_vsnprintf_like+0xd2>
#ifdef TINY_PRINTF
        len = strlen(s);
 80138fe:	4640      	mov	r0, r8
 8013900:	f7ec fc3a 	bl	8000178 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 8013904:	e006      	b.n	8013914 <tiny_vsnprintf_like+0xe0>
        if (!s) s = "<NULL>";
 8013906:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80139b8 <tiny_vsnprintf_like+0x184>
 801390a:	e7f8      	b.n	80138fe <tiny_vsnprintf_like+0xca>
          while (len < field_width--) *str++ = ' ';
 801390c:	2220      	movs	r2, #32
 801390e:	f804 2b01 	strb.w	r2, [r4], #1
 8013912:	461d      	mov	r5, r3
 8013914:	1e6b      	subs	r3, r5, #1
 8013916:	4285      	cmp	r5, r0
 8013918:	dcf8      	bgt.n	801390c <tiny_vsnprintf_like+0xd8>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801391a:	2200      	movs	r2, #0
 801391c:	e006      	b.n	801392c <tiny_vsnprintf_like+0xf8>
 801391e:	4643      	mov	r3, r8
 8013920:	f813 1b01 	ldrb.w	r1, [r3], #1
 8013924:	f804 1b01 	strb.w	r1, [r4], #1
 8013928:	3201      	adds	r2, #1
 801392a:	4698      	mov	r8, r3
 801392c:	4282      	cmp	r2, r0
 801392e:	dbf6      	blt.n	801391e <tiny_vsnprintf_like+0xea>
 8013930:	e78d      	b.n	801384e <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 8013932:	f049 0940 	orr.w	r9, r9, #64	; 0x40

      case 'x':
        base = 16;
 8013936:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 8013938:	f019 0f02 	tst.w	r9, #2
 801393c:	d02f      	beq.n	801399e <tiny_vsnprintf_like+0x16a>
      num = va_arg(args, int);
 801393e:	9a04      	ldr	r2, [sp, #16]
 8013940:	1d11      	adds	r1, r2, #4
 8013942:	9104      	str	r1, [sp, #16]
 8013944:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8013946:	1ba1      	subs	r1, r4, r6
 8013948:	f8cd 9008 	str.w	r9, [sp, #8]
 801394c:	f04f 30ff 	mov.w	r0, #4294967295
 8013950:	9001      	str	r0, [sp, #4]
 8013952:	9500      	str	r5, [sp, #0]
 8013954:	eba8 0101 	sub.w	r1, r8, r1
 8013958:	4620      	mov	r0, r4
 801395a:	f7ff fee1 	bl	8013720 <ee_number>
 801395e:	4604      	mov	r4, r0
 8013960:	e775      	b.n	801384e <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 8013962:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 8013966:	230a      	movs	r3, #10
 8013968:	e7e6      	b.n	8013938 <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 801396a:	2a25      	cmp	r2, #37	; 0x25
 801396c:	d002      	beq.n	8013974 <tiny_vsnprintf_like+0x140>
 801396e:	2325      	movs	r3, #37	; 0x25
 8013970:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8013974:	1ba3      	subs	r3, r4, r6
 8013976:	4598      	cmp	r8, r3
 8013978:	dd0f      	ble.n	801399a <tiny_vsnprintf_like+0x166>
        if (*fmt)
 801397a:	9b05      	ldr	r3, [sp, #20]
 801397c:	781a      	ldrb	r2, [r3, #0]
 801397e:	b13a      	cbz	r2, 8013990 <tiny_vsnprintf_like+0x15c>
          *str++ = *fmt;
 8013980:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8013984:	1ba3      	subs	r3, r4, r6
 8013986:	4598      	cmp	r8, r3
 8013988:	f73f af61 	bgt.w	801384e <tiny_vsnprintf_like+0x1a>
    base = 10;
 801398c:	230a      	movs	r3, #10
    if (qualifier == 'l')
 801398e:	e7d3      	b.n	8013938 <tiny_vsnprintf_like+0x104>
          --fmt;
 8013990:	3b01      	subs	r3, #1
 8013992:	9305      	str	r3, [sp, #20]
 8013994:	e7f6      	b.n	8013984 <tiny_vsnprintf_like+0x150>
        base = 16;
 8013996:	2310      	movs	r3, #16
 8013998:	e7ce      	b.n	8013938 <tiny_vsnprintf_like+0x104>
    base = 10;
 801399a:	230a      	movs	r3, #10
 801399c:	e7cc      	b.n	8013938 <tiny_vsnprintf_like+0x104>
      num = va_arg(args, unsigned int);
 801399e:	9a04      	ldr	r2, [sp, #16]
 80139a0:	1d11      	adds	r1, r2, #4
 80139a2:	9104      	str	r1, [sp, #16]
 80139a4:	6812      	ldr	r2, [r2, #0]
 80139a6:	e7ce      	b.n	8013946 <tiny_vsnprintf_like+0x112>
  }

  *str = '\0';
 80139a8:	2300      	movs	r3, #0
 80139aa:	7023      	strb	r3, [r4, #0]
  return str - buf;
 80139ac:	1ba0      	subs	r0, r4, r6
}
 80139ae:	b007      	add	sp, #28
 80139b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 80139b4:	2000      	movs	r0, #0
 80139b6:	e7fa      	b.n	80139ae <tiny_vsnprintf_like+0x17a>
 80139b8:	08014d84 	.word	0x08014d84

080139bc <__errno>:
 80139bc:	4b01      	ldr	r3, [pc, #4]	; (80139c4 <__errno+0x8>)
 80139be:	6818      	ldr	r0, [r3, #0]
 80139c0:	4770      	bx	lr
 80139c2:	bf00      	nop
 80139c4:	20000124 	.word	0x20000124

080139c8 <__libc_init_array>:
 80139c8:	b570      	push	{r4, r5, r6, lr}
 80139ca:	4d0d      	ldr	r5, [pc, #52]	; (8013a00 <__libc_init_array+0x38>)
 80139cc:	4c0d      	ldr	r4, [pc, #52]	; (8013a04 <__libc_init_array+0x3c>)
 80139ce:	1b64      	subs	r4, r4, r5
 80139d0:	10a4      	asrs	r4, r4, #2
 80139d2:	2600      	movs	r6, #0
 80139d4:	42a6      	cmp	r6, r4
 80139d6:	d109      	bne.n	80139ec <__libc_init_array+0x24>
 80139d8:	4d0b      	ldr	r5, [pc, #44]	; (8013a08 <__libc_init_array+0x40>)
 80139da:	4c0c      	ldr	r4, [pc, #48]	; (8013a0c <__libc_init_array+0x44>)
 80139dc:	f000 f9bc 	bl	8013d58 <_init>
 80139e0:	1b64      	subs	r4, r4, r5
 80139e2:	10a4      	asrs	r4, r4, #2
 80139e4:	2600      	movs	r6, #0
 80139e6:	42a6      	cmp	r6, r4
 80139e8:	d105      	bne.n	80139f6 <__libc_init_array+0x2e>
 80139ea:	bd70      	pop	{r4, r5, r6, pc}
 80139ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80139f0:	4798      	blx	r3
 80139f2:	3601      	adds	r6, #1
 80139f4:	e7ee      	b.n	80139d4 <__libc_init_array+0xc>
 80139f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80139fa:	4798      	blx	r3
 80139fc:	3601      	adds	r6, #1
 80139fe:	e7f2      	b.n	80139e6 <__libc_init_array+0x1e>
 8013a00:	08014d98 	.word	0x08014d98
 8013a04:	08014d98 	.word	0x08014d98
 8013a08:	08014d98 	.word	0x08014d98
 8013a0c:	08014d9c 	.word	0x08014d9c

08013a10 <malloc>:
 8013a10:	4b02      	ldr	r3, [pc, #8]	; (8013a1c <malloc+0xc>)
 8013a12:	4601      	mov	r1, r0
 8013a14:	6818      	ldr	r0, [r3, #0]
 8013a16:	f000 b88b 	b.w	8013b30 <_malloc_r>
 8013a1a:	bf00      	nop
 8013a1c:	20000124 	.word	0x20000124

08013a20 <free>:
 8013a20:	4b02      	ldr	r3, [pc, #8]	; (8013a2c <free+0xc>)
 8013a22:	4601      	mov	r1, r0
 8013a24:	6818      	ldr	r0, [r3, #0]
 8013a26:	f000 b819 	b.w	8013a5c <_free_r>
 8013a2a:	bf00      	nop
 8013a2c:	20000124 	.word	0x20000124

08013a30 <memcpy>:
 8013a30:	440a      	add	r2, r1
 8013a32:	4291      	cmp	r1, r2
 8013a34:	f100 33ff 	add.w	r3, r0, #4294967295
 8013a38:	d100      	bne.n	8013a3c <memcpy+0xc>
 8013a3a:	4770      	bx	lr
 8013a3c:	b510      	push	{r4, lr}
 8013a3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013a42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013a46:	4291      	cmp	r1, r2
 8013a48:	d1f9      	bne.n	8013a3e <memcpy+0xe>
 8013a4a:	bd10      	pop	{r4, pc}

08013a4c <memset>:
 8013a4c:	4402      	add	r2, r0
 8013a4e:	4603      	mov	r3, r0
 8013a50:	4293      	cmp	r3, r2
 8013a52:	d100      	bne.n	8013a56 <memset+0xa>
 8013a54:	4770      	bx	lr
 8013a56:	f803 1b01 	strb.w	r1, [r3], #1
 8013a5a:	e7f9      	b.n	8013a50 <memset+0x4>

08013a5c <_free_r>:
 8013a5c:	b538      	push	{r3, r4, r5, lr}
 8013a5e:	4605      	mov	r5, r0
 8013a60:	2900      	cmp	r1, #0
 8013a62:	d041      	beq.n	8013ae8 <_free_r+0x8c>
 8013a64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013a68:	1f0c      	subs	r4, r1, #4
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	bfb8      	it	lt
 8013a6e:	18e4      	addlt	r4, r4, r3
 8013a70:	f000 f8e2 	bl	8013c38 <__malloc_lock>
 8013a74:	4a1d      	ldr	r2, [pc, #116]	; (8013aec <_free_r+0x90>)
 8013a76:	6813      	ldr	r3, [r2, #0]
 8013a78:	b933      	cbnz	r3, 8013a88 <_free_r+0x2c>
 8013a7a:	6063      	str	r3, [r4, #4]
 8013a7c:	6014      	str	r4, [r2, #0]
 8013a7e:	4628      	mov	r0, r5
 8013a80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013a84:	f000 b8de 	b.w	8013c44 <__malloc_unlock>
 8013a88:	42a3      	cmp	r3, r4
 8013a8a:	d908      	bls.n	8013a9e <_free_r+0x42>
 8013a8c:	6820      	ldr	r0, [r4, #0]
 8013a8e:	1821      	adds	r1, r4, r0
 8013a90:	428b      	cmp	r3, r1
 8013a92:	bf01      	itttt	eq
 8013a94:	6819      	ldreq	r1, [r3, #0]
 8013a96:	685b      	ldreq	r3, [r3, #4]
 8013a98:	1809      	addeq	r1, r1, r0
 8013a9a:	6021      	streq	r1, [r4, #0]
 8013a9c:	e7ed      	b.n	8013a7a <_free_r+0x1e>
 8013a9e:	461a      	mov	r2, r3
 8013aa0:	685b      	ldr	r3, [r3, #4]
 8013aa2:	b10b      	cbz	r3, 8013aa8 <_free_r+0x4c>
 8013aa4:	42a3      	cmp	r3, r4
 8013aa6:	d9fa      	bls.n	8013a9e <_free_r+0x42>
 8013aa8:	6811      	ldr	r1, [r2, #0]
 8013aaa:	1850      	adds	r0, r2, r1
 8013aac:	42a0      	cmp	r0, r4
 8013aae:	d10b      	bne.n	8013ac8 <_free_r+0x6c>
 8013ab0:	6820      	ldr	r0, [r4, #0]
 8013ab2:	4401      	add	r1, r0
 8013ab4:	1850      	adds	r0, r2, r1
 8013ab6:	4283      	cmp	r3, r0
 8013ab8:	6011      	str	r1, [r2, #0]
 8013aba:	d1e0      	bne.n	8013a7e <_free_r+0x22>
 8013abc:	6818      	ldr	r0, [r3, #0]
 8013abe:	685b      	ldr	r3, [r3, #4]
 8013ac0:	6053      	str	r3, [r2, #4]
 8013ac2:	4401      	add	r1, r0
 8013ac4:	6011      	str	r1, [r2, #0]
 8013ac6:	e7da      	b.n	8013a7e <_free_r+0x22>
 8013ac8:	d902      	bls.n	8013ad0 <_free_r+0x74>
 8013aca:	230c      	movs	r3, #12
 8013acc:	602b      	str	r3, [r5, #0]
 8013ace:	e7d6      	b.n	8013a7e <_free_r+0x22>
 8013ad0:	6820      	ldr	r0, [r4, #0]
 8013ad2:	1821      	adds	r1, r4, r0
 8013ad4:	428b      	cmp	r3, r1
 8013ad6:	bf04      	itt	eq
 8013ad8:	6819      	ldreq	r1, [r3, #0]
 8013ada:	685b      	ldreq	r3, [r3, #4]
 8013adc:	6063      	str	r3, [r4, #4]
 8013ade:	bf04      	itt	eq
 8013ae0:	1809      	addeq	r1, r1, r0
 8013ae2:	6021      	streq	r1, [r4, #0]
 8013ae4:	6054      	str	r4, [r2, #4]
 8013ae6:	e7ca      	b.n	8013a7e <_free_r+0x22>
 8013ae8:	bd38      	pop	{r3, r4, r5, pc}
 8013aea:	bf00      	nop
 8013aec:	20001728 	.word	0x20001728

08013af0 <sbrk_aligned>:
 8013af0:	b570      	push	{r4, r5, r6, lr}
 8013af2:	4e0e      	ldr	r6, [pc, #56]	; (8013b2c <sbrk_aligned+0x3c>)
 8013af4:	460c      	mov	r4, r1
 8013af6:	6831      	ldr	r1, [r6, #0]
 8013af8:	4605      	mov	r5, r0
 8013afa:	b911      	cbnz	r1, 8013b02 <sbrk_aligned+0x12>
 8013afc:	f000 f88c 	bl	8013c18 <_sbrk_r>
 8013b00:	6030      	str	r0, [r6, #0]
 8013b02:	4621      	mov	r1, r4
 8013b04:	4628      	mov	r0, r5
 8013b06:	f000 f887 	bl	8013c18 <_sbrk_r>
 8013b0a:	1c43      	adds	r3, r0, #1
 8013b0c:	d00a      	beq.n	8013b24 <sbrk_aligned+0x34>
 8013b0e:	1cc4      	adds	r4, r0, #3
 8013b10:	f024 0403 	bic.w	r4, r4, #3
 8013b14:	42a0      	cmp	r0, r4
 8013b16:	d007      	beq.n	8013b28 <sbrk_aligned+0x38>
 8013b18:	1a21      	subs	r1, r4, r0
 8013b1a:	4628      	mov	r0, r5
 8013b1c:	f000 f87c 	bl	8013c18 <_sbrk_r>
 8013b20:	3001      	adds	r0, #1
 8013b22:	d101      	bne.n	8013b28 <sbrk_aligned+0x38>
 8013b24:	f04f 34ff 	mov.w	r4, #4294967295
 8013b28:	4620      	mov	r0, r4
 8013b2a:	bd70      	pop	{r4, r5, r6, pc}
 8013b2c:	2000172c 	.word	0x2000172c

08013b30 <_malloc_r>:
 8013b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b34:	1ccd      	adds	r5, r1, #3
 8013b36:	f025 0503 	bic.w	r5, r5, #3
 8013b3a:	3508      	adds	r5, #8
 8013b3c:	2d0c      	cmp	r5, #12
 8013b3e:	bf38      	it	cc
 8013b40:	250c      	movcc	r5, #12
 8013b42:	2d00      	cmp	r5, #0
 8013b44:	4607      	mov	r7, r0
 8013b46:	db01      	blt.n	8013b4c <_malloc_r+0x1c>
 8013b48:	42a9      	cmp	r1, r5
 8013b4a:	d905      	bls.n	8013b58 <_malloc_r+0x28>
 8013b4c:	230c      	movs	r3, #12
 8013b4e:	603b      	str	r3, [r7, #0]
 8013b50:	2600      	movs	r6, #0
 8013b52:	4630      	mov	r0, r6
 8013b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b58:	4e2e      	ldr	r6, [pc, #184]	; (8013c14 <_malloc_r+0xe4>)
 8013b5a:	f000 f86d 	bl	8013c38 <__malloc_lock>
 8013b5e:	6833      	ldr	r3, [r6, #0]
 8013b60:	461c      	mov	r4, r3
 8013b62:	bb34      	cbnz	r4, 8013bb2 <_malloc_r+0x82>
 8013b64:	4629      	mov	r1, r5
 8013b66:	4638      	mov	r0, r7
 8013b68:	f7ff ffc2 	bl	8013af0 <sbrk_aligned>
 8013b6c:	1c43      	adds	r3, r0, #1
 8013b6e:	4604      	mov	r4, r0
 8013b70:	d14d      	bne.n	8013c0e <_malloc_r+0xde>
 8013b72:	6834      	ldr	r4, [r6, #0]
 8013b74:	4626      	mov	r6, r4
 8013b76:	2e00      	cmp	r6, #0
 8013b78:	d140      	bne.n	8013bfc <_malloc_r+0xcc>
 8013b7a:	6823      	ldr	r3, [r4, #0]
 8013b7c:	4631      	mov	r1, r6
 8013b7e:	4638      	mov	r0, r7
 8013b80:	eb04 0803 	add.w	r8, r4, r3
 8013b84:	f000 f848 	bl	8013c18 <_sbrk_r>
 8013b88:	4580      	cmp	r8, r0
 8013b8a:	d13a      	bne.n	8013c02 <_malloc_r+0xd2>
 8013b8c:	6821      	ldr	r1, [r4, #0]
 8013b8e:	3503      	adds	r5, #3
 8013b90:	1a6d      	subs	r5, r5, r1
 8013b92:	f025 0503 	bic.w	r5, r5, #3
 8013b96:	3508      	adds	r5, #8
 8013b98:	2d0c      	cmp	r5, #12
 8013b9a:	bf38      	it	cc
 8013b9c:	250c      	movcc	r5, #12
 8013b9e:	4629      	mov	r1, r5
 8013ba0:	4638      	mov	r0, r7
 8013ba2:	f7ff ffa5 	bl	8013af0 <sbrk_aligned>
 8013ba6:	3001      	adds	r0, #1
 8013ba8:	d02b      	beq.n	8013c02 <_malloc_r+0xd2>
 8013baa:	6823      	ldr	r3, [r4, #0]
 8013bac:	442b      	add	r3, r5
 8013bae:	6023      	str	r3, [r4, #0]
 8013bb0:	e00e      	b.n	8013bd0 <_malloc_r+0xa0>
 8013bb2:	6822      	ldr	r2, [r4, #0]
 8013bb4:	1b52      	subs	r2, r2, r5
 8013bb6:	d41e      	bmi.n	8013bf6 <_malloc_r+0xc6>
 8013bb8:	2a0b      	cmp	r2, #11
 8013bba:	d916      	bls.n	8013bea <_malloc_r+0xba>
 8013bbc:	1961      	adds	r1, r4, r5
 8013bbe:	42a3      	cmp	r3, r4
 8013bc0:	6025      	str	r5, [r4, #0]
 8013bc2:	bf18      	it	ne
 8013bc4:	6059      	strne	r1, [r3, #4]
 8013bc6:	6863      	ldr	r3, [r4, #4]
 8013bc8:	bf08      	it	eq
 8013bca:	6031      	streq	r1, [r6, #0]
 8013bcc:	5162      	str	r2, [r4, r5]
 8013bce:	604b      	str	r3, [r1, #4]
 8013bd0:	4638      	mov	r0, r7
 8013bd2:	f104 060b 	add.w	r6, r4, #11
 8013bd6:	f000 f835 	bl	8013c44 <__malloc_unlock>
 8013bda:	f026 0607 	bic.w	r6, r6, #7
 8013bde:	1d23      	adds	r3, r4, #4
 8013be0:	1af2      	subs	r2, r6, r3
 8013be2:	d0b6      	beq.n	8013b52 <_malloc_r+0x22>
 8013be4:	1b9b      	subs	r3, r3, r6
 8013be6:	50a3      	str	r3, [r4, r2]
 8013be8:	e7b3      	b.n	8013b52 <_malloc_r+0x22>
 8013bea:	6862      	ldr	r2, [r4, #4]
 8013bec:	42a3      	cmp	r3, r4
 8013bee:	bf0c      	ite	eq
 8013bf0:	6032      	streq	r2, [r6, #0]
 8013bf2:	605a      	strne	r2, [r3, #4]
 8013bf4:	e7ec      	b.n	8013bd0 <_malloc_r+0xa0>
 8013bf6:	4623      	mov	r3, r4
 8013bf8:	6864      	ldr	r4, [r4, #4]
 8013bfa:	e7b2      	b.n	8013b62 <_malloc_r+0x32>
 8013bfc:	4634      	mov	r4, r6
 8013bfe:	6876      	ldr	r6, [r6, #4]
 8013c00:	e7b9      	b.n	8013b76 <_malloc_r+0x46>
 8013c02:	230c      	movs	r3, #12
 8013c04:	603b      	str	r3, [r7, #0]
 8013c06:	4638      	mov	r0, r7
 8013c08:	f000 f81c 	bl	8013c44 <__malloc_unlock>
 8013c0c:	e7a1      	b.n	8013b52 <_malloc_r+0x22>
 8013c0e:	6025      	str	r5, [r4, #0]
 8013c10:	e7de      	b.n	8013bd0 <_malloc_r+0xa0>
 8013c12:	bf00      	nop
 8013c14:	20001728 	.word	0x20001728

08013c18 <_sbrk_r>:
 8013c18:	b538      	push	{r3, r4, r5, lr}
 8013c1a:	4d06      	ldr	r5, [pc, #24]	; (8013c34 <_sbrk_r+0x1c>)
 8013c1c:	2300      	movs	r3, #0
 8013c1e:	4604      	mov	r4, r0
 8013c20:	4608      	mov	r0, r1
 8013c22:	602b      	str	r3, [r5, #0]
 8013c24:	f7ee faf6 	bl	8002214 <_sbrk>
 8013c28:	1c43      	adds	r3, r0, #1
 8013c2a:	d102      	bne.n	8013c32 <_sbrk_r+0x1a>
 8013c2c:	682b      	ldr	r3, [r5, #0]
 8013c2e:	b103      	cbz	r3, 8013c32 <_sbrk_r+0x1a>
 8013c30:	6023      	str	r3, [r4, #0]
 8013c32:	bd38      	pop	{r3, r4, r5, pc}
 8013c34:	20001730 	.word	0x20001730

08013c38 <__malloc_lock>:
 8013c38:	4801      	ldr	r0, [pc, #4]	; (8013c40 <__malloc_lock+0x8>)
 8013c3a:	f000 b809 	b.w	8013c50 <__retarget_lock_acquire_recursive>
 8013c3e:	bf00      	nop
 8013c40:	20001734 	.word	0x20001734

08013c44 <__malloc_unlock>:
 8013c44:	4801      	ldr	r0, [pc, #4]	; (8013c4c <__malloc_unlock+0x8>)
 8013c46:	f000 b804 	b.w	8013c52 <__retarget_lock_release_recursive>
 8013c4a:	bf00      	nop
 8013c4c:	20001734 	.word	0x20001734

08013c50 <__retarget_lock_acquire_recursive>:
 8013c50:	4770      	bx	lr

08013c52 <__retarget_lock_release_recursive>:
 8013c52:	4770      	bx	lr
 8013c54:	0000      	movs	r0, r0
	...

08013c58 <floor>:
 8013c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c5c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8013c60:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8013c64:	2e13      	cmp	r6, #19
 8013c66:	4602      	mov	r2, r0
 8013c68:	460b      	mov	r3, r1
 8013c6a:	4607      	mov	r7, r0
 8013c6c:	460c      	mov	r4, r1
 8013c6e:	4605      	mov	r5, r0
 8013c70:	dc33      	bgt.n	8013cda <floor+0x82>
 8013c72:	2e00      	cmp	r6, #0
 8013c74:	da14      	bge.n	8013ca0 <floor+0x48>
 8013c76:	a334      	add	r3, pc, #208	; (adr r3, 8013d48 <floor+0xf0>)
 8013c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c7c:	f7ec fa8a 	bl	8000194 <__adddf3>
 8013c80:	2200      	movs	r2, #0
 8013c82:	2300      	movs	r3, #0
 8013c84:	f7ec fecc 	bl	8000a20 <__aeabi_dcmpgt>
 8013c88:	b138      	cbz	r0, 8013c9a <floor+0x42>
 8013c8a:	2c00      	cmp	r4, #0
 8013c8c:	da58      	bge.n	8013d40 <floor+0xe8>
 8013c8e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8013c92:	431d      	orrs	r5, r3
 8013c94:	d001      	beq.n	8013c9a <floor+0x42>
 8013c96:	4c2e      	ldr	r4, [pc, #184]	; (8013d50 <floor+0xf8>)
 8013c98:	2500      	movs	r5, #0
 8013c9a:	4623      	mov	r3, r4
 8013c9c:	462f      	mov	r7, r5
 8013c9e:	e025      	b.n	8013cec <floor+0x94>
 8013ca0:	4a2c      	ldr	r2, [pc, #176]	; (8013d54 <floor+0xfc>)
 8013ca2:	fa42 f806 	asr.w	r8, r2, r6
 8013ca6:	ea01 0208 	and.w	r2, r1, r8
 8013caa:	4302      	orrs	r2, r0
 8013cac:	d01e      	beq.n	8013cec <floor+0x94>
 8013cae:	a326      	add	r3, pc, #152	; (adr r3, 8013d48 <floor+0xf0>)
 8013cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cb4:	f7ec fa6e 	bl	8000194 <__adddf3>
 8013cb8:	2200      	movs	r2, #0
 8013cba:	2300      	movs	r3, #0
 8013cbc:	f7ec feb0 	bl	8000a20 <__aeabi_dcmpgt>
 8013cc0:	2800      	cmp	r0, #0
 8013cc2:	d0ea      	beq.n	8013c9a <floor+0x42>
 8013cc4:	2c00      	cmp	r4, #0
 8013cc6:	bfbe      	ittt	lt
 8013cc8:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8013ccc:	fa43 f606 	asrlt.w	r6, r3, r6
 8013cd0:	19a4      	addlt	r4, r4, r6
 8013cd2:	ea24 0408 	bic.w	r4, r4, r8
 8013cd6:	2500      	movs	r5, #0
 8013cd8:	e7df      	b.n	8013c9a <floor+0x42>
 8013cda:	2e33      	cmp	r6, #51	; 0x33
 8013cdc:	dd0a      	ble.n	8013cf4 <floor+0x9c>
 8013cde:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8013ce2:	d103      	bne.n	8013cec <floor+0x94>
 8013ce4:	f7ec fa56 	bl	8000194 <__adddf3>
 8013ce8:	4607      	mov	r7, r0
 8013cea:	460b      	mov	r3, r1
 8013cec:	4638      	mov	r0, r7
 8013cee:	4619      	mov	r1, r3
 8013cf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013cf4:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8013cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8013cfc:	fa22 f808 	lsr.w	r8, r2, r8
 8013d00:	ea18 0f00 	tst.w	r8, r0
 8013d04:	d0f2      	beq.n	8013cec <floor+0x94>
 8013d06:	a310      	add	r3, pc, #64	; (adr r3, 8013d48 <floor+0xf0>)
 8013d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d0c:	f7ec fa42 	bl	8000194 <__adddf3>
 8013d10:	2200      	movs	r2, #0
 8013d12:	2300      	movs	r3, #0
 8013d14:	f7ec fe84 	bl	8000a20 <__aeabi_dcmpgt>
 8013d18:	2800      	cmp	r0, #0
 8013d1a:	d0be      	beq.n	8013c9a <floor+0x42>
 8013d1c:	2c00      	cmp	r4, #0
 8013d1e:	da02      	bge.n	8013d26 <floor+0xce>
 8013d20:	2e14      	cmp	r6, #20
 8013d22:	d103      	bne.n	8013d2c <floor+0xd4>
 8013d24:	3401      	adds	r4, #1
 8013d26:	ea25 0508 	bic.w	r5, r5, r8
 8013d2a:	e7b6      	b.n	8013c9a <floor+0x42>
 8013d2c:	2301      	movs	r3, #1
 8013d2e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8013d32:	fa03 f606 	lsl.w	r6, r3, r6
 8013d36:	4435      	add	r5, r6
 8013d38:	42bd      	cmp	r5, r7
 8013d3a:	bf38      	it	cc
 8013d3c:	18e4      	addcc	r4, r4, r3
 8013d3e:	e7f2      	b.n	8013d26 <floor+0xce>
 8013d40:	2500      	movs	r5, #0
 8013d42:	462c      	mov	r4, r5
 8013d44:	e7a9      	b.n	8013c9a <floor+0x42>
 8013d46:	bf00      	nop
 8013d48:	8800759c 	.word	0x8800759c
 8013d4c:	7e37e43c 	.word	0x7e37e43c
 8013d50:	bff00000 	.word	0xbff00000
 8013d54:	000fffff 	.word	0x000fffff

08013d58 <_init>:
 8013d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d5a:	bf00      	nop
 8013d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d5e:	bc08      	pop	{r3}
 8013d60:	469e      	mov	lr, r3
 8013d62:	4770      	bx	lr

08013d64 <_fini>:
 8013d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d66:	bf00      	nop
 8013d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d6a:	bc08      	pop	{r3}
 8013d6c:	469e      	mov	lr, r3
 8013d6e:	4770      	bx	lr
